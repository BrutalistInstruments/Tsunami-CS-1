
C:\Users\OurBl\AppData\Local\Temp\VMBuilds\Teensy4.1Port\teensy41\Release/Teensy4.1Port.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 80 00     ................
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 98 79 00 00 00 00 00 00                 ...`.y......

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b77      	ldr	r3, [pc, #476]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a77      	ldr	r2, [pc, #476]	; (60001218 <ResetHandler+0x1e4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4877      	ldr	r0, [pc, #476]	; (6000121c <ResetHandler+0x1e8>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a77      	ldr	r2, [pc, #476]	; (60001220 <ResetHandler+0x1ec>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a76      	ldr	r2, [pc, #472]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4976      	ldr	r1, [pc, #472]	; (60001228 <ResetHandler+0x1f4>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b74      	ldr	r3, [pc, #464]	; (6000122c <ResetHandler+0x1f8>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6d      	ldr	r2, [pc, #436]	; (60001230 <ResetHandler+0x1fc>)
6000107c:	496d      	ldr	r1, [pc, #436]	; (60001234 <ResetHandler+0x200>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6d      	ldr	r3, [pc, #436]	; (60001238 <ResetHandler+0x204>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a66      	ldr	r2, [pc, #408]	; (6000123c <ResetHandler+0x208>)
600010a4:	4b66      	ldr	r3, [pc, #408]	; (60001240 <ResetHandler+0x20c>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	4299      	cmp	r1, r3
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a60      	ldr	r2, [pc, #384]	; (60001244 <ResetHandler+0x210>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5f      	ldr	r3, [pc, #380]	; (60001248 <ResetHandler+0x214>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5e      	ldr	r2, [pc, #376]	; (6000124c <ResetHandler+0x218>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	428b      	cmp	r3, r1
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5d      	ldr	r3, [pc, #372]	; (60001250 <ResetHandler+0x21c>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5d      	ldr	r2, [pc, #372]	; (60001254 <ResetHandler+0x220>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5b      	ldr	r4, [pc, #364]	; (60001258 <ResetHandler+0x224>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5b      	ldr	r6, [pc, #364]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 6000129c <ResetHandler+0x268>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 600012a0 <ResetHandler+0x26c>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 600012a4 <ResetHandler+0x270>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b57      	ldr	r3, [pc, #348]	; (60001260 <ResetHandler+0x22c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4943      	ldr	r1, [pc, #268]	; (60001214 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8b5 	bl	600012a8 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a49      	ldr	r2, [pc, #292]	; (60001264 <ResetHandler+0x230>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b49      	ldr	r3, [pc, #292]	; (60001268 <ResetHandler+0x234>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4949      	ldr	r1, [pc, #292]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4946      	ldr	r1, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a47      	ldr	r2, [pc, #284]	; (60001274 <ResetHandler+0x240>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4847      	ldr	r0, [pc, #284]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a46      	ldr	r2, [pc, #280]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4845      	ldr	r0, [pc, #276]	; (60001280 <ResetHandler+0x24c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4944      	ldr	r1, [pc, #272]	; (60001284 <ResetHandler+0x250>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 face 	bl	6000171c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	4840      	ldr	r0, [pc, #256]	; (60001288 <ResetHandler+0x254>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fc99 	bl	60001ac8 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a3a      	ldr	r2, [pc, #232]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b3a      	ldr	r3, [pc, #232]	; (60001290 <ResetHandler+0x25c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4933      	ldr	r1, [pc, #204]	; (60001294 <ResetHandler+0x260>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2e      	ldr	r2, [pc, #184]	; (60001290 <ResetHandler+0x25c>)
600011d6:	4c30      	ldr	r4, [pc, #192]	; (60001298 <ResetHandler+0x264>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
600011e0:	f000 f8de 	bl	600013a0 <configure_external_ram>
#endif
	startup_early_hook();
600011e4:	f000 fc68 	bl	60001ab8 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e8:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011ea:	2b13      	cmp	r3, #19
600011ec:	d9fc      	bls.n	600011e8 <ResetHandler+0x1b4>
	usb_init();
600011ee:	f000 fb55 	bl	6000189c <usb_init>
	analog_init();
600011f2:	f000 fbc9 	bl	60001988 <analog_init>
	pwm_init();
600011f6:	f000 fc6b 	bl	60001ad0 <__pwm_init_veneer>
	tempmon_init();
600011fa:	f000 fac1 	bl	60001780 <tempmon_init>

	startup_late_hook();
600011fe:	f000 fc5f 	bl	60001ac0 <__startup_late_hook_veneer>
60001202:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001204:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001208:	d3fb      	bcc.n	60001202 <ResetHandler+0x1ce>
	//printf("before C++ constructors\n");
	__libc_init_array();
6000120a:	f000 fc65 	bl	60001ad8 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120e:	f000 fc6f 	bl	60001af0 <__main_veneer>
60001212:	e7fe      	b.n	60001212 <ResetHandler+0x1de>
60001214:	400ac000 	.word	0x400ac000
60001218:	aaaaaaab 	.word	0xaaaaaaab
6000121c:	00200007 	.word	0x00200007
60001220:	20078000 	.word	0x20078000
60001224:	00000000 	.word	0x00000000
60001228:	60001b20 	.word	0x60001b20
6000122c:	00004f48 	.word	0x00004f48
60001230:	20000000 	.word	0x20000000
60001234:	60006a6c 	.word	0x60006a6c
60001238:	20000f30 	.word	0x20000f30
6000123c:	20000f30 	.word	0x20000f30
60001240:	200042c0 	.word	0x200042c0
60001244:	e000ed88 	.word	0xe000ed88
60001248:	20001ffc 	.word	0x20001ffc
6000124c:	00002bcd 	.word	0x00002bcd
60001250:	e000e400 	.word	0xe000e400
60001254:	e000e4a0 	.word	0xe000e4a0
60001258:	400d8000 	.word	0x400d8000
6000125c:	400fc000 	.word	0x400fc000
60001260:	e000ed08 	.word	0xe000ed08
60001264:	e000e014 	.word	0xe000e014
60001268:	e000e018 	.word	0xe000e018
6000126c:	00003bfd 	.word	0x00003bfd
60001270:	e000edfc 	.word	0xe000edfc
60001274:	20200000 	.word	0x20200000
60001278:	00003ca9 	.word	0x00003ca9
6000127c:	e0001000 	.word	0xe0001000
60001280:	e0001004 	.word	0xe0001004
60001284:	20001a54 	.word	0x20001a54
60001288:	23c34600 	.word	0x23c34600
6000128c:	40084000 	.word	0x40084000
60001290:	400d4000 	.word	0x400d4000
60001294:	56c00000 	.word	0x56c00000
60001298:	20001a5c 	.word	0x20001a5c
6000129c:	20002000 	.word	0x20002000
600012a0:	2018101b 	.word	0x2018101b
600012a4:	13110d0c 	.word	0x13110d0c

600012a8 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012aa:	4a28      	ldr	r2, [pc, #160]	; (6000134c <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012ac:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012ae:	4b28      	ldr	r3, [pc, #160]	; (60001350 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012b0:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b4:	4c27      	ldr	r4, [pc, #156]	; (60001354 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012b6:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012b8:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 60001394 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012bc:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012be:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012c0:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012c2:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012c6:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012ca:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012cc:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 60001398 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d0:	4f21      	ldr	r7, [pc, #132]	; (60001358 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012d2:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012d6:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d8:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012da:	4e20      	ldr	r6, [pc, #128]	; (6000135c <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012dc:	4f20      	ldr	r7, [pc, #128]	; (60001360 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012de:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e0:	4920      	ldr	r1, [pc, #128]	; (60001364 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012e2:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e4:	4e20      	ldr	r6, [pc, #128]	; (60001368 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e6:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ea:	4f20      	ldr	r7, [pc, #128]	; (6000136c <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012ec:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ee:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f0:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f4:	4e1e      	ldr	r6, [pc, #120]	; (60001370 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012f6:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f8:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012fa:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600012fc:	f8df e09c 	ldr.w	lr, [pc, #156]	; 6000139c <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001300:	4e1c      	ldr	r6, [pc, #112]	; (60001374 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001302:	491d      	ldr	r1, [pc, #116]	; (60001378 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001304:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001308:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000130a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000130c:	4f1b      	ldr	r7, [pc, #108]	; (6000137c <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000130e:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001310:	4e1b      	ldr	r6, [pc, #108]	; (60001380 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001312:	491c      	ldr	r1, [pc, #112]	; (60001384 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001314:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001316:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001318:	4f1b      	ldr	r7, [pc, #108]	; (60001388 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131a:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131c:	4e1b      	ldr	r6, [pc, #108]	; (6000138c <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000131e:	491c      	ldr	r1, [pc, #112]	; (60001390 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001320:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001322:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001324:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001326:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001328:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000132c:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001330:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001334:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001338:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000133c:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001340:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001344:	f842 3c88 	str.w	r3, [r2, #-136]
60001348:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000134a:	bf00      	nop
6000134c:	e000ed9c 	.word	0xe000ed9c
60001350:	e000eda0 	.word	0xe000eda0
60001354:	e000ed94 	.word	0xe000ed94
60001358:	00100009 	.word	0x00100009
6000135c:	00200013 	.word	0x00200013
60001360:	07020021 	.word	0x07020021
60001364:	200042c0 	.word	0x200042c0
60001368:	20000014 	.word	0x20000014
6000136c:	13080025 	.word	0x13080025
60001370:	10000009 	.word	0x10000009
60001374:	40000017 	.word	0x40000017
60001378:	13100033 	.word	0x13100033
6000137c:	60000018 	.word	0x60000018
60001380:	070b002f 	.word	0x070b002f
60001384:	70000019 	.word	0x70000019
60001388:	170b0037 	.word	0x170b0037
6000138c:	7000001a 	.word	0x7000001a
60001390:	130b002f 	.word	0x130b002f
60001394:	1000003f 	.word	0x1000003f
60001398:	03080025 	.word	0x03080025
6000139c:	20200016 	.word	0x20200016

600013a0 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
600013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013a2:	4bb8      	ldr	r3, [pc, #736]	; (60001684 <configure_external_ram+0x2e4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600013a4:	2218      	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013a6:	4eb8      	ldr	r6, [pc, #736]	; (60001688 <configure_external_ram+0x2e8>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013a8:	2001      	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013aa:	49b8      	ldr	r1, [pc, #736]	; (6000168c <configure_external_ram+0x2ec>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600013ac:	f248 7e0c 	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600013b0:	4db7      	ldr	r5, [pc, #732]	; (60001690 <configure_external_ram+0x2f0>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600013b2:	f04f 37ff 	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600013b6:	4cb7      	ldr	r4, [pc, #732]	; (60001694 <configure_external_ram+0x2f4>)
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013b8:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600013bc:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600013c0:	2500      	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013c2:	f8c3 1264 	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600013c6:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600013ca:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013ce:	f8c3 626c 	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013d2:	49b1      	ldr	r1, [pc, #708]	; (60001698 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013d4:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013d8:	f8c3 6274 	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013dc:	f8c3 6278 	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600013e0:	4eae      	ldr	r6, [pc, #696]	; (6000169c <configure_external_ram+0x2fc>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600013e2:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600013e4:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600013e6:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600013e8:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600013ea:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600013ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600013f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600013f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600013f8:	f240 6205 	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013fc:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001400:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001404:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001408:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000140c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001410:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001414:	4629      	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001416:	69b3      	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001418:	48a1      	ldr	r0, [pc, #644]	; (600016a0 <configure_external_ram+0x300>)
6000141a:	4018      	ands	r0, r3
6000141c:	4ba1      	ldr	r3, [pc, #644]	; (600016a4 <configure_external_ram+0x304>)
6000141e:	4303      	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001420:	48a1      	ldr	r0, [pc, #644]	; (600016a8 <configure_external_ram+0x308>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001422:	61b3      	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001424:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
60001428:	f043 030c 	orr.w	r3, r3, #12
6000142c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001430:	2602      	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001432:	6803      	ldr	r3, [r0, #0]
60001434:	4333      	orrs	r3, r6
60001436:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001438:	6803      	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000143a:	ea03 0e0e 	and.w	lr, r3, lr
6000143e:	4b9b      	ldr	r3, [pc, #620]	; (600016ac <configure_external_ram+0x30c>)
60001440:	ea4e 0303 	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001444:	f8df e29c 	ldr.w	lr, [pc, #668]	; 600016e4 <configure_external_ram+0x344>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001448:	6003      	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000144a:	4b99      	ldr	r3, [pc, #612]	; (600016b0 <configure_external_ram+0x310>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000144c:	6047      	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000144e:	f8de 7008 	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001452:	403b      	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001454:	4f97      	ldr	r7, [pc, #604]	; (600016b4 <configure_external_ram+0x314>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001456:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000145a:	6083      	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000145c:	68c3      	ldr	r3, [r0, #12]
6000145e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001462:	60c3      	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001464:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001466:	401f      	ands	r7, r3
60001468:	4b93      	ldr	r3, [pc, #588]	; (600016b8 <configure_external_ram+0x318>)
6000146a:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000146c:	4f91      	ldr	r7, [pc, #580]	; (600016b4 <configure_external_ram+0x314>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000146e:	6203      	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001470:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001472:	401f      	ands	r7, r3
60001474:	4b90      	ldr	r3, [pc, #576]	; (600016b8 <configure_external_ram+0x318>)
60001476:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001478:	4f90      	ldr	r7, [pc, #576]	; (600016bc <configure_external_ram+0x31c>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000147a:	6243      	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000147c:	6287      	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000147e:	62c7      	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001480:	f8de 30b8 	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001484:	4f8e      	ldr	r7, [pc, #568]	; (600016c0 <configure_external_ram+0x320>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001486:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000148a:	f043 0301 	orr.w	r3, r3, #1
6000148e:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001492:	f8de 30bc 	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001496:	f8df e234 	ldr.w	lr, [pc, #564]	; 600016cc <configure_external_ram+0x32c>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000149a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000149e:	f043 0301 	orr.w	r3, r3, #1
600014a2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
600014a6:	6105      	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600014a8:	6604      	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600014aa:	6707      	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014ac:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600014b0:	6644      	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600014b2:	6747      	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014b4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014b8:	6804      	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014ba:	4b82      	ldr	r3, [pc, #520]	; (600016c4 <configure_external_ram+0x324>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014bc:	f024 0402 	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014c0:	4a81      	ldr	r2, [pc, #516]	; (600016c8 <configure_external_ram+0x328>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014c2:	6004      	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014c4:	f8c0 e018 	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014c8:	61c6      	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014ca:	f843 1b04 	str.w	r1, [r3], #4
600014ce:	4293      	cmp	r3, r2
600014d0:	d1fb      	bne.n	600014ca <configure_external_ram+0x12a>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600014d2:	4b75      	ldr	r3, [pc, #468]	; (600016a8 <configure_external_ram+0x308>)
600014d4:	681a      	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600014d6:	4619      	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600014d8:	f042 0201 	orr.w	r2, r2, #1
600014dc:	601a      	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600014de:	680b      	ldr	r3, [r1, #0]
600014e0:	4a71      	ldr	r2, [pc, #452]	; (600016a8 <configure_external_ram+0x308>)
600014e2:	f013 0301 	ands.w	r3, r3, #1
600014e6:	d1fa      	bne.n	600014de <configure_external_ram+0x13e>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014e8:	4e78      	ldr	r6, [pc, #480]	; (600016cc <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014ea:	2502      	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600014ec:	f240 64f5 	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600014f0:	f240 4066 	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600014f4:	f240 4199 	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600014f8:	4f75      	ldr	r7, [pc, #468]	; (600016d0 <configure_external_ram+0x330>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014fa:	6196      	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600014fc:	f242 4601 	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001500:	61d5      	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001502:	f240 4535 	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001506:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000150a:	f242 2401 	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000150e:	f8c2 0210 	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001512:	2001      	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001514:	f8c2 1220 	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001518:	4611      	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
6000151a:	f8c2 7230 	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000151e:	f107 475a 	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001522:	f8c2 6234 	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001526:	f507 7713 	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000152a:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000152e:	4e69      	ldr	r6, [pc, #420]	; (600016d4 <configure_external_ram+0x334>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001530:	4d69      	ldr	r5, [pc, #420]	; (600016d8 <configure_external_ram+0x338>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001532:	f8c2 7250 	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001536:	f8c2 6254 	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000153a:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000153e:	f8c2 4264 	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001542:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001546:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000154a:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000154e:	694b      	ldr	r3, [r1, #20]
60001550:	4a55      	ldr	r2, [pc, #340]	; (600016a8 <configure_external_ram+0x308>)
60001552:	07dd      	lsls	r5, r3, #31
60001554:	d5fb      	bpl.n	6000154e <configure_external_ram+0x1ae>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001556:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001558:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000155a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000155e:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001560:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001562:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001566:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000156a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000156e:	694b      	ldr	r3, [r1, #20]
60001570:	4a4d      	ldr	r2, [pc, #308]	; (600016a8 <configure_external_ram+0x308>)
60001572:	07dc      	lsls	r4, r3, #31
60001574:	d5fb      	bpl.n	6000156e <configure_external_ram+0x1ce>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001576:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001578:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000157a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000157e:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001580:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001582:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001586:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000158a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000158e:	694b      	ldr	r3, [r1, #20]
60001590:	4a45      	ldr	r2, [pc, #276]	; (600016a8 <configure_external_ram+0x308>)
60001592:	07d8      	lsls	r0, r3, #31
60001594:	d5fb      	bpl.n	6000158e <configure_external_ram+0x1ee>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001596:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001598:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000159a:	4850      	ldr	r0, [pc, #320]	; (600016dc <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000159c:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000159e:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015a0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600015a4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015a8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015ac:	694b      	ldr	r3, [r1, #20]
600015ae:	4a3e      	ldr	r2, [pc, #248]	; (600016a8 <configure_external_ram+0x308>)
600015b0:	07db      	lsls	r3, r3, #31
600015b2:	d5fb      	bpl.n	600015ac <configure_external_ram+0x20c>
	uint32_t id = FLEXSPI2_RFDR0;
600015b4:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015b8:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600015bc:	2021      	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015be:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600015c0:	6150      	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015c2:	428b      	cmp	r3, r1
600015c4:	d000      	beq.n	600015c8 <configure_external_ram+0x228>
600015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015c8:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015ce:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015d0:	4611      	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015d2:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015d6:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015da:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015de:	694b      	ldr	r3, [r1, #20]
600015e0:	4a31      	ldr	r2, [pc, #196]	; (600016a8 <configure_external_ram+0x308>)
600015e2:	07df      	lsls	r7, r3, #31
600015e4:	d5fb      	bpl.n	600015de <configure_external_ram+0x23e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600015e6:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015e8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015ec:	2000      	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015ee:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600015f0:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015f2:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015f6:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015fa:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015fe:	694b      	ldr	r3, [r1, #20]
60001600:	4a29      	ldr	r2, [pc, #164]	; (600016a8 <configure_external_ram+0x308>)
60001602:	07de      	lsls	r6, r3, #31
60001604:	d5fb      	bpl.n	600015fe <configure_external_ram+0x25e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001606:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001608:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000160c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001610:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001612:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001614:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001618:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000161c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001620:	694b      	ldr	r3, [r1, #20]
60001622:	4a21      	ldr	r2, [pc, #132]	; (600016a8 <configure_external_ram+0x308>)
60001624:	07dd      	lsls	r5, r3, #31
60001626:	d5fb      	bpl.n	60001620 <configure_external_ram+0x280>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001628:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000162a:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000162e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001632:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001634:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001636:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000163a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000163e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001642:	694b      	ldr	r3, [r1, #20]
60001644:	4a18      	ldr	r2, [pc, #96]	; (600016a8 <configure_external_ram+0x308>)
60001646:	07dc      	lsls	r4, r3, #31
60001648:	d5fb      	bpl.n	60001642 <configure_external_ram+0x2a2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000164a:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000164c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001650:	4822      	ldr	r0, [pc, #136]	; (600016dc <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001652:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001654:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001656:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000165a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000165e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001662:	694b      	ldr	r3, [r1, #20]
60001664:	4a10      	ldr	r2, [pc, #64]	; (600016a8 <configure_external_ram+0x308>)
60001666:	07d8      	lsls	r0, r3, #31
60001668:	d5fb      	bpl.n	60001662 <configure_external_ram+0x2c2>
	uint32_t id = FLEXSPI2_RFDR0;
6000166a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
6000166e:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001672:	2021      	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001674:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001676:	6150      	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001678:	428b      	cmp	r3, r1
6000167a:	d035      	beq.n	600016e8 <configure_external_ram+0x348>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
6000167c:	4b18      	ldr	r3, [pc, #96]	; (600016e0 <configure_external_ram+0x340>)
6000167e:	2208      	movs	r2, #8
60001680:	701a      	strb	r2, [r3, #0]
60001682:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001684:	401f8000 	.word	0x401f8000
60001688:	000170f9 	.word	0x000170f9
6000168c:	0001b0f9 	.word	0x0001b0f9
60001690:	000110f9 	.word	0x000110f9
60001694:	000100f9 	.word	0x000100f9
60001698:	401f8400 	.word	0x401f8400
6000169c:	400fc000 	.word	0x400fc000
600016a0:	1ffffcff 	.word	0x1ffffcff
600016a4:	a0000300 	.word	0xa0000300
600016a8:	402a4000 	.word	0x402a4000
600016ac:	ffff0012 	.word	0xffff0012
600016b0:	00f737ff 	.word	0x00f737ff
600016b4:	7cf0ff00 	.word	0x7cf0ff00
600016b8:	80000040 	.word	0x80000040
600016bc:	830f00ff 	.word	0x830f00ff
600016c0:	00020063 	.word	0x00020063
600016c4:	402a4200 	.word	0x402a4200
600016c8:	402a4300 	.word	0x402a4300
600016cc:	5af05af0 	.word	0x5af05af0
600016d0:	3018049f 	.word	0x3018049f
600016d4:	26013206 	.word	0x26013206
600016d8:	0a180638 	.word	0x0a180638
600016dc:	00030004 	.word	0x00030004
600016e0:	20001a60 	.word	0x20001a60
600016e4:	402a8000 	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016e8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016ec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016f0:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016f2:	4611      	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016f4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016f8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016fc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001700:	694b      	ldr	r3, [r1, #20]
60001702:	4a04      	ldr	r2, [pc, #16]	; (60001714 <configure_external_ram+0x374>)
60001704:	07db      	lsls	r3, r3, #31
60001706:	d5fb      	bpl.n	60001700 <configure_external_ram+0x360>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001708:	2001      	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
6000170a:	4b03      	ldr	r3, [pc, #12]	; (60001718 <configure_external_ram+0x378>)
6000170c:	2110      	movs	r1, #16
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000170e:	6150      	str	r0, [r2, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001710:	7019      	strb	r1, [r3, #0]
60001712:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001714:	402a4000 	.word	0x402a4000
60001718:	20001a60 	.word	0x20001a60

6000171c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000171c:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000171e:	4a17      	ldr	r2, [pc, #92]	; (6000177c <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001720:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001722:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001726:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000172a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000172e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001732:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001736:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001738:	f013 0f02 	tst.w	r3, #2
6000173c:	d006      	beq.n	6000174c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000173e:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001740:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001742:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001744:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001746:	f013 0f02 	tst.w	r3, #2
6000174a:	d1f8      	bne.n	6000173e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000174c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001750:	d101      	bne.n	60001756 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001752:	6155      	str	r5, [r2, #20]
			continue;
60001754:	e7ef      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001756:	f413 5f80 	tst.w	r3, #4096	; 0x1000
6000175a:	d101      	bne.n	60001760 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000175c:	6156      	str	r6, [r2, #20]
			continue;
6000175e:	e7ea      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001760:	2b00      	cmp	r3, #0
60001762:	dae8      	bge.n	60001736 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001764:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001768:	d001      	beq.n	6000176e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000176a:	6191      	str	r1, [r2, #24]
			continue;
6000176c:	e7e3      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000176e:	065b      	lsls	r3, r3, #25
60001770:	d401      	bmi.n	60001776 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001772:	6157      	str	r7, [r2, #20]
			continue;
60001774:	e7df      	b.n	60001736 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001776:	bcf0      	pop	{r4, r5, r6, r7}
60001778:	4770      	bx	lr
6000177a:	bf00      	nop
6000177c:	400d8000 	.word	0x400d8000

60001780 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001780:	4a3b      	ldr	r2, [pc, #236]	; (60001870 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001782:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001786:	493b      	ldr	r1, [pc, #236]	; (60001874 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001788:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000178a:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
6000178c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000178e:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001792:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001794:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001898 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001798:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000179a:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000179e:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017a2:	4f35      	ldr	r7, [pc, #212]	; (60001878 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600017a4:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600017a6:	f3c3 240b 	ubfx	r4, r3, #8, #12
600017aa:	4e34      	ldr	r6, [pc, #208]	; (6000187c <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017ac:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017b0:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017b4:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600017b8:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017c0:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017c4:	ee07 4a90 	vmov	s15, r4
600017c8:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017cc:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600017ce:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017d2:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017d6:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017da:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017dc:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017e4:	4d26      	ldr	r5, [pc, #152]	; (60001880 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017e6:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600017ea:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017ec:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600017f4:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017f6:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600017fa:	4e22      	ldr	r6, [pc, #136]	; (60001884 <tempmon_init+0x104>)
600017fc:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017fe:	4922      	ldr	r1, [pc, #136]	; (60001888 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001800:	4c22      	ldr	r4, [pc, #136]	; (6000188c <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001802:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001806:	ee07 3a90 	vmov	s15, r3
6000180a:	4b21      	ldr	r3, [pc, #132]	; (60001890 <tempmon_init+0x110>)
6000180c:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
60001810:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001814:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001818:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000181c:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001820:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001824:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001828:	ee15 3a90 	vmov	r3, s11
6000182c:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001830:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001834:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001838:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000183a:	ea01 4105 	and.w	r1, r1, r5, lsl #16
6000183e:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001846:	430b      	orrs	r3, r1
60001848:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000184c:	ee17 3a90 	vmov	r3, s15
60001850:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
60001854:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001858:	430b      	orrs	r3, r1
6000185a:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000185e:	6813      	ldr	r3, [r2, #0]
60001860:	f043 0302 	orr.w	r3, r3, #2
60001864:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001866:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001868:	4b0a      	ldr	r3, [pc, #40]	; (60001894 <tempmon_init+0x114>)
6000186a:	2201      	movs	r2, #1
6000186c:	601a      	str	r2, [r3, #0]
6000186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001870:	400d8180 	.word	0x400d8180
60001874:	401f4400 	.word	0x401f4400
60001878:	20001a6c 	.word	0x20001a6c
6000187c:	20001a70 	.word	0x20001a70
60001880:	20001a68 	.word	0x20001a68
60001884:	20002000 	.word	0x20002000
60001888:	0fff0000 	.word	0x0fff0000
6000188c:	e000e440 	.word	0xe000e440
60001890:	00002ca9 	.word	0x00002ca9
60001894:	e000e108 	.word	0xe000e108
60001898:	20001a64 	.word	0x20001a64

6000189c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000189c:	4b30      	ldr	r3, [pc, #192]	; (60001960 <usb_init+0xc4>)
6000189e:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600018a2:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600018a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018a8:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600018ac:	f000 f91c 	bl	60001ae8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018b0:	492c      	ldr	r1, [pc, #176]	; (60001964 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018b2:	482d      	ldr	r0, [pc, #180]	; (60001968 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018b4:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018b8:	4c2c      	ldr	r4, [pc, #176]	; (6000196c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018ba:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018be:	4b2c      	ldr	r3, [pc, #176]	; (60001970 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018c0:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018c4:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018c8:	6822      	ldr	r2, [r4, #0]
600018ca:	4013      	ands	r3, r2
600018cc:	b91b      	cbnz	r3, 600018d6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600018ce:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
600018d2:	079a      	lsls	r2, r3, #30
600018d4:	d01a      	beq.n	6000190c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600018d6:	4b24      	ldr	r3, [pc, #144]	; (60001968 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600018d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600018dc:	4a23      	ldr	r2, [pc, #140]	; (6000196c <usb_init+0xd0>)
600018de:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600018e0:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600018e2:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
600018e6:	f041 0102 	orr.w	r1, r1, #2
600018ea:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600018ee:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600018f2:	079b      	lsls	r3, r3, #30
600018f4:	d4fb      	bmi.n	600018ee <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600018f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600018fa:	491e      	ldr	r1, [pc, #120]	; (60001974 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600018fc:	4b1b      	ldr	r3, [pc, #108]	; (6000196c <usb_init+0xd0>)
600018fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001902:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001904:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001906:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001908:	f000 f8f6 	bl	60001af8 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000190c:	4d1a      	ldr	r5, [pc, #104]	; (60001978 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000190e:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001910:	4b16      	ldr	r3, [pc, #88]	; (6000196c <usb_init+0xd0>)
60001912:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001916:	4c14      	ldr	r4, [pc, #80]	; (60001968 <usb_init+0xcc>)
60001918:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000191a:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000191c:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000191e:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001920:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001922:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001926:	f44f 7220 	mov.w	r2, #640	; 0x280
6000192a:	f000 f8d9 	bl	60001ae0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000192e:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001932:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001936:	f240 1343 	movw	r3, #323	; 0x143
6000193a:	4a10      	ldr	r2, [pc, #64]	; (6000197c <usb_init+0xe0>)
6000193c:	4910      	ldr	r1, [pc, #64]	; (60001980 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000193e:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001940:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001942:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
60001946:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000194a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000194e:	4a0d      	ldr	r2, [pc, #52]	; (60001984 <usb_init+0xe8>)
60001950:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001954:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001956:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001958:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
6000195c:	bd70      	pop	{r4, r5, r6, pc}
6000195e:	bf00      	nop
60001960:	400d8000 	.word	0x400d8000
60001964:	400fc000 	.word	0x400fc000
60001968:	402e0000 	.word	0x402e0000
6000196c:	400d9000 	.word	0x400d9000
60001970:	001e1c00 	.word	0x001e1c00
60001974:	e000e28c 	.word	0xe000e28c
60001978:	20004000 	.word	0x20004000
6000197c:	20002000 	.word	0x20002000
60001980:	00002ccd 	.word	0x00002ccd
60001984:	e000e10c 	.word	0xe000e10c

60001988 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001988:	4b11      	ldr	r3, [pc, #68]	; (600019d0 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000198a:	4912      	ldr	r1, [pc, #72]	; (600019d4 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000198c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000198e:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001990:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001994:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001996:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001998:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000199c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000199e:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600019a0:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600019a4:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019a6:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600019a8:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600019aa:	6c93      	ldr	r3, [r2, #72]	; 0x48
600019ac:	061b      	lsls	r3, r3, #24
600019ae:	d4fc      	bmi.n	600019aa <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019b0:	4b09      	ldr	r3, [pc, #36]	; (600019d8 <analog_init+0x50>)
600019b2:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019b6:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019b8:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019ba:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019bc:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019be:	6c93      	ldr	r3, [r2, #72]	; 0x48
600019c0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600019c4:	d1fb      	bne.n	600019be <analog_init+0x36>
	calibrating = 0;
600019c6:	4a05      	ldr	r2, [pc, #20]	; (600019dc <analog_init+0x54>)
600019c8:	7013      	strb	r3, [r2, #0]
}
600019ca:	bc30      	pop	{r4, r5}
600019cc:	4770      	bx	lr
600019ce:	bf00      	nop
600019d0:	400fc000 	.word	0x400fc000
600019d4:	400c4000 	.word	0x400c4000
600019d8:	400c8000 	.word	0x400c8000
600019dc:	20001ca6 	.word	0x20001ca6

600019e0 <usb_string_product_name_default>:
600019e0:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
600019f0:	00610069 0000006c                       i.a.l...

600019f8 <usb_string_manufacturer_name_default>:
600019f8:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001a08:	00690075 006f006e                       u.i.n.o.

60001a10 <string0>:
60001a10:	04090304                                ....

60001a14 <usb_config_descriptor_12>:
60001a14:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001a24:	24050001 05011000 01010124 06022404     ...$....$....$..
60001a34:	00062405 82050701 10001003 00010409     .$..............
60001a44:	00000a02 03050700 00004002 02840507     .........@......
60001a54:	00000040                                @...

60001a58 <usb_config_descriptor_480>:
60001a58:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001a68:	24050001 05011000 01010124 06022404     ...$....$....$..
60001a78:	00062405 82050701 05001003 00010409     .$..............
60001a88:	00000a02 03050700 00020002 02840507     ................
60001a98:	00000200                                ....

60001a9c <qualifier_descriptor>:
60001a9c:	0200060a 40000002 ff010001                       .......@..

60001aa6 <_serialEvent_default>:
60001aa6:	b5f8ff01                                         ..

60001aa8 <_init>:
60001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001aaa:	bf00      	nop
60001aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001aae:	bc08      	pop	{r3}
60001ab0:	469e      	mov	lr, r3
60001ab2:	4770      	bx	lr
60001ab4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

60001ab8 <__startup_early_hook_veneer>:
60001ab8:	f85f f000 	ldr.w	pc, [pc]	; 60001abc <__startup_early_hook_veneer+0x4>
60001abc:	00002be5 	.word	0x00002be5

60001ac0 <__startup_late_hook_veneer>:
60001ac0:	f85f f000 	ldr.w	pc, [pc]	; 60001ac4 <__startup_late_hook_veneer+0x4>
60001ac4:	00002be9 	.word	0x00002be9

60001ac8 <__set_arm_clock_veneer>:
60001ac8:	f85f f000 	ldr.w	pc, [pc]	; 60001acc <__set_arm_clock_veneer+0x4>
60001acc:	000027c1 	.word	0x000027c1

60001ad0 <__pwm_init_veneer>:
60001ad0:	f85f f000 	ldr.w	pc, [pc]	; 60001ad4 <__pwm_init_veneer+0x4>
60001ad4:	00003f55 	.word	0x00003f55

60001ad8 <____libc_init_array_veneer>:
60001ad8:	f85f f000 	ldr.w	pc, [pc]	; 60001adc <____libc_init_array_veneer+0x4>
60001adc:	00004485 	.word	0x00004485

60001ae0 <__memset_veneer>:
60001ae0:	f85f f000 	ldr.w	pc, [pc]	; 60001ae4 <__memset_veneer+0x4>
60001ae4:	00004a65 	.word	0x00004a65

60001ae8 <__usb_init_serialnumber_veneer>:
60001ae8:	f85f f000 	ldr.w	pc, [pc]	; 60001aec <__usb_init_serialnumber_veneer+0x4>
60001aec:	00003751 	.word	0x00003751

60001af0 <__main_veneer>:
60001af0:	f85f f000 	ldr.w	pc, [pc]	; 60001af4 <__main_veneer+0x4>
60001af4:	00003cc9 	.word	0x00003cc9

60001af8 <__delay_veneer>:
60001af8:	f85f f000 	ldr.w	pc, [pc]	; 60001afc <__delay_veneer+0x4>
60001afc:	00002a81 	.word	0x00002a81

60001b00 <__init_array_start>:
60001b00:	00000045 	.word	0x00000045
60001b04:	000001c1 	.word	0x000001c1
60001b08:	00002071 	.word	0x00002071
60001b0c:	000023a9 	.word	0x000023a9
60001b10:	00002611 	.word	0x00002611
60001b14:	000027a9 	.word	0x000027a9

60001b18 <__init_array_end>:
60001b18:	ffffffff 	.word	0xffffffff
60001b1c:	ffffffff 	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	.short	0xb933

    return tmeas;
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x17>)
      2a:	b113      	.short	0xb113
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1b>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	movs	r3, #1
      34:	bd107023 	.word	0xbd107023
      38:	0f30      	lsrs	r0, r6, #28
      3a:	2000      	movs	r0, #0
      3c:	0000      	movs	r0, r0
      3e:	0000      	movs	r0, r0
}
      40:	00004f44 	.word	0x00004f44

00000044 <frame_dummy>:
      44:	4b08      	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	b510      	.short	0xb510
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	2b00      	cmp	r3, #0
      5e:	d0fb      	beq.n	58 <frame_dummy+0x14>
      60:	4010e8bd 	.word	0x4010e8bd
      64:	4718      	bx	r3
      66:	bf00      	.short	0xbf00
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	0f34      	lsrs	r4, r6, #28
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2000      	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	4f44      	ldr	r7, [pc, #272]	; (184 <setup+0xf0>)
  ADC2_CFG = mode1;
      72:	0000      	movs	r0, r0
  
  if(num >= 4){
      74:	0f30      	lsrs	r0, r6, #28
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	movs	r0, #0
      78:	00000000 	.word	0x00000000

0000007c <std::_Function_base::_Base_manager<setup::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<setup::{lambda()#1}> const&, std::_Manager_operation)>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
      7c:	2a01      	cmp	r2, #1
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
      7e:	bf08      	.short	0xbf08
      80:	6001      	streq	r1, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
      82:	2000      	.short	0x2000
      84:	4770      	bx	lr
	while (1) {
		volatile uint32_t n;
		GPIO2_DR_SET = (1<<3); //digitalWrite(13, HIGH);
		for (n=0; n < 2000000/6; n++) ;
		GPIO2_DR_CLEAR = (1<<3); //digitalWrite(13, LOW);
		for (n=0; n < 1500000/6; n++) ;
      86:	bf00      	.short	0xbf00

00000088 <std::_Function_handler<void (), setup::{lambda()#1}>::_M_invoke(std::_Any_data const&)>:
void setup() {
	initBank(&currentPattern); //set bank to factory defaults
	initGlobals(&currentGlobals, 0); //set globals to factory defaults. both of these will change once the eeprom is implemented. 
	///for current testing, these will stay in here. 
	initPins();
	OLEDTimer.beginPeriodic([] {enableCycle(&currentGlobals); }, 6);
      88:	4801      	ldr	r0, [pc, #4]	; (90 <std::_Function_handler<void (), setup::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x8>)
      8a:	f000      	.short	0xf000
      8c:	baeb      	revsh	r3, r5
      8e:	bf00      	.short	0xbf00
      90:	0f4c      	lsrs	r4, r1, #29
      92:	2000      	movs	r0, #0

00000094 <setup>:
volatile Globals currentGlobals;
volatile Screen screenBank;
TeensyTimerTool::Timer OLEDTimer;


void setup() {
      94:	4842b5f0 	.word	0x4842b5f0
      98:	b08d      	sub	sp, #52	; 0x34
	initBank(&currentPattern); //set bank to factory defaults
      9a:	f000      	.short	0xf000
      9c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	initGlobals(&currentGlobals, 0); //set globals to factory defaults. both of these will change once the eeprom is implemented. 
      a0:	26004840 	.word	0x26004840
      a4:	f000 f988 	bl	3b8 <initGlobals(Globals volatile*, unsigned char)>
     public:
        Timer(TimerGenerator* gen = nullptr);

        inline errorCode beginPeriodic(callback_t cb, uint32_t period)
        {
            isPeriodic = true;
      a8:	f0004c3f 	.word	0xf0004c3f
	///for current testing, these will stay in here. 
	initPins();
      ac:	fba1 4b3f 			; <UNDEFINED> instruction: 0xfba14b3f
      b0:	22022501 	.word	0x22022501
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
      b4:	9303      	str	r3, [sp, #12]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
      b6:	4669      	mov	r1, sp

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
      b8:	a8044b3d 	.word	0xa8044b3d
      bc:	7225      	strb	r5, [r4, #8]
      be:	9302      	.short	0x9302
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
      c0:	9606      	str	r6, [sp, #24]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
      c2:	f7ff      	.short	0xf7ff
      c4:	ffdb 9a03 	vmlsl.u16	<illegal reg q12.5>, d11, d3
	  _M_invoker = __x._M_invoker;
	  _M_manager = __x._M_manager;
      c8:	92079b02 	.word	0x92079b02
      cc:	9306      	str	r3, [sp, #24]
    template <typename T>
    errorCode BaseTimer::begin(callback_t callback, T p, bool start)
    {
        auto period = getPeriod(p);

        if (callback == nullptr) return postError(errorCode::callback);
      ce:	2b00      	.short	0x2b00
      d0:	d04d      	beq.n	16e <setup+0xda>
        if (isPeriodic && period == 0) return postError(errorCode::reload);

        if (timerChannel == nullptr)
      d2:	6865      	.short	0x6865
      d4:	2d00      	cmp	r5, #0
      d6:	d03b      	.short	0xd03b
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
        }

        errorCode result = timerChannel->begin(callback, period, isPeriodic);
      d8:	682a      	ldr	r2, [r5, #0]
      da:	6817      	.short	0x6817
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
      dc:	960a      	str	r6, [sp, #40]	; 0x28
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
      de:	ae08      	add	r6, sp, #32
      e0:	2202      	movs	r2, #2
      e2:	a904      	add	r1, sp, #16
      e4:	47984630 	.word	0x47984630
	  _M_invoker = __x._M_invoker;
      e8:	9a07      	ldr	r2, [sp, #28]
	  _M_manager = __x._M_manager;
      ea:	9b06      	.short	0x9b06
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
      ec:	920b      	str	r2, [sp, #44]	; 0x2c
	  _M_manager = __x._M_manager;
      ee:	930a      	.short	0x930a
      f0:	4628      	mov	r0, r5
      f2:	7a22      	.short	0x7a22
      f4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
      f8:	47b84631 	.word	0x47b84631

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
      fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      fe:	4605      	.short	0x4605
     100:	b11b      	cbz	r3, 10a <setup+0x76>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     102:	2203      	movs	r2, #3
     104:	46304631 	.word	0x46304631
     108:	4798      	blx	r3

        if (result == errorCode::OK)
     10a:	b1c5      	.short	0xb1c5
        {
            if (isPeriodic && start) timerChannel->start();
        }
        return postError(result);
     10c:	4628      	mov	r0, r5
     10e:	f002      	.short	0xf002
     110:	f939 9b06 	ldrsh.w	r9, [r9], #6

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     114:	a904b11b 	.word	0xa904b11b
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     118:	2203      	movs	r2, #3
     11a:	4608      	.short	0x4608
     11c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     11e:	9b02      	.short	0x9b02
     120:	b11b      	cbz	r3, 12a <setup+0x96>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     122:	2203      	.short	0x2203
     124:	4669      	mov	r1, sp
     126:	4668      	.short	0x4668
     128:	4798      	blx	r3
	OLEDTimer.beginPeriodic([] {enableCycle(&currentGlobals); }, 6);
	initScreen(&currentGlobals);
     12a:	481e      	.short	0x481e
     12c:	f000 fbe0 	bl	8f0 <initScreen(Globals volatile*)>
	initMenu(&screenBank, &currentPattern, &currentGlobals);
     130:	491b4a1c 	.word	0x491b4a1c
     134:	481f      	ldr	r0, [pc, #124]	; (1b4 <setup+0x120>)
     136:	f000      	.short	0xf000
     138:	f9ab b00d 	vld1.8	{d11[0]}, [fp]!

}
     13c:	7a23bdf0 	.word	0x7a23bdf0

        errorCode result = timerChannel->begin(callback, period, isPeriodic);

        if (result == errorCode::OK)
        {
            if (isPeriodic && start) timerChannel->start();
     140:	4a19      	ldr	r2, [pc, #100]	; (1a8 <setup+0x114>)
     142:	2b00      	cmp	r3, #0
     144:	d0e2      	beq.n	10c <setup+0x78>
     146:	6850      	.short	0x6850
     148:	6803      	ldr	r3, [r0, #0]
     14a:	699b      	.short	0x699b
     14c:	4798      	blx	r3
     14e:	e7dd      	.short	0xe7dd
        if (callback == nullptr) return postError(errorCode::callback);
        if (isPeriodic && period == 0) return postError(errorCode::reload);

        if (timerChannel == nullptr)
        {
            if (timerGenerator != nullptr) // use timer passed in during construction
     150:	6826      	ldr	r6, [r4, #0]
     152:	b186      	.short	0xb186
            {
                timerChannel = timerGenerator();
     154:	47b0      	blx	r6
     156:	4605      	.short	0x4605
     158:	6060      	str	r0, [r4, #4]
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
     15a:	b1e0      	.short	0xb1e0
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
        }

        errorCode result = timerChannel->begin(callback, period, isPeriodic);
     15c:	6829      	ldr	r1, [r5, #0]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     15e:	2200      	.short	0x2200
     160:	9b06      	ldr	r3, [sp, #24]
     162:	680f      	.short	0x680f
     164:	920a      	str	r2, [sp, #40]	; 0x28
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     166:	2b00      	.short	0x2b00
     168:	d1b9      	bne.n	de <setup+0x4a>
     16a:	ae08      	.short	0xae08
     16c:	e7c0      	b.n	f0 <setup+0x5c>
    template <typename T>
    errorCode BaseTimer::begin(callback_t callback, T p, bool start)
    {
        auto period = getPeriod(p);

        if (callback == nullptr) return postError(errorCode::callback);
     16e:	2065      	.short	0x2065
     170:	f002 f908 	bl	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     174:	4f10e7cd 	.word	0x4f10e7cd
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
                {
                    timerChannel = timerPool[i]();
     178:	f857 3f04 	ldr.w	r3, [r7, #4]!
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
     17c:	47983601 	.word	0x47983601
                {
                    timerChannel = timerPool[i]();
     180:	4605      	mov	r5, r0
     182:	6060      	.short	0x6060
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
     184:	b908      	cbnz	r0, 18a <setup+0xf6>
     186:	2e07      	.short	0x2e07
     188:	d1f6      	bne.n	178 <setup+0xe4>
                {
                    timerChannel = timerPool[i]();
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
     18a:	2d00      	cmp	r5, #0
     18c:	d1e6      	bne.n	15c <setup+0xc8>
     18e:	2067      	movs	r0, #103	; 0x67
     190:	f002 f8f8 	bl	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     194:	e7bd      	b.n	112 <setup+0x7e>
        if (timerChannel == nullptr)
        {
            if (timerGenerator != nullptr) // use timer passed in during construction
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
     196:	2068      	movs	r0, #104	; 0x68
     198:	f002 f8f4 	bl	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     19c:	e7b9      	b.n	112 <setup+0x7e>
     19e:	bf00      	.short	0xbf00
     1a0:	1274      	asrs	r4, r6, #9
     1a2:	2000      	movs	r0, #0
     1a4:	20000f4c 	.word	0x20000f4c
     1a8:	1248      	asrs	r0, r1, #9
     1aa:	2000      	.short	0x2000
     1ac:	0089      	lsls	r1, r1, #2
     1ae:	0000      	.short	0x0000
     1b0:	007d      	lsls	r5, r7, #1
     1b2:	0000      	.short	0x0000
     1b4:	13f0      	asrs	r0, r6, #15
     1b6:	2000      	.short	0x2000
     1b8:	1254      	asrs	r4, r2, #9
     1ba:	2000      	movs	r0, #0

000001bc <loop>:

// the loop function runs over and over again until power down or reset
void loop() {
     1bc:	bf004770 	.word	0xbf004770

000001c0 <_GLOBAL__sub_I_currentPattern>:

     1c0:	b5f0      	push	{r4, r5, r6, r7, lr}

#if defined(ARDUINO_TEENSY40)
    TimerGenerator* const timerPool[] = {GPT1, GPT2, TMR1, TMR2, TMR3, TMR4, TCK};

#elif defined(ARDUINO_TEENSY41)
    TimerGenerator* const timerPool[] = {GPT1, GPT2, TMR1, TMR2, TMR3, TMR4, TCK};
     1c2:	4b0f      	.short	0x4b0f
#include <teensyTimerTool.h>
//initialize our global structs. 
volatile Pattern currentPattern;
volatile Globals currentGlobals;
volatile Screen screenBank;
TeensyTimerTool::Timer OLEDTimer;
     1c4:	2100      	movs	r1, #0
     1c6:	480f      	.short	0x480f
     1c8:	4f0f      	ldr	r7, [pc, #60]	; (208 <_GLOBAL__sub_I_currentPattern+0x48>)
     1ca:	4e10      	.short	0x4e10
     1cc:	4d10      	ldr	r5, [pc, #64]	; (210 <_GLOBAL__sub_I_currentPattern+0x50>)
     1ce:	4c11      	.short	0x4c11
     1d0:	4a11      	ldr	r2, [pc, #68]	; (218 <_GLOBAL__sub_I_currentPattern+0x58>)
     1d2:	f8d3      	.short	0xf8d3
     1d4:	e000      	b.n	1d8 <_GLOBAL__sub_I_currentPattern+0x18>
     1d6:	6800      	.short	0x6800
     1d8:	4b10      	ldr	r3, [pc, #64]	; (21c <_GLOBAL__sub_I_currentPattern+0x5c>)
     1da:	683f      	.short	0x683f
     1dc:	6836      	ldr	r6, [r6, #0]
     1de:	682d      	.short	0x682d
     1e0:	6824      	ldr	r4, [r4, #0]
     1e2:	6812      	.short	0x6812
     1e4:	f8c3 e000 	str.w	lr, [r3]
     1e8:	609f6058 	.word	0x609f6058
     1ec:	60de      	str	r6, [r3, #12]
     1ee:	611d      	.short	0x611d
     1f0:	615c      	str	r4, [r3, #20]
     1f2:	480b      	ldr	r0, [pc, #44]	; (220 <_GLOBAL__sub_I_currentPattern+0x60>)
     1f4:	619a      	str	r2, [r3, #24]
}

// the loop function runs over and over again until power down or reset
void loop() {

     1f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#include <teensyTimerTool.h>
//initialize our global structs. 
volatile Pattern currentPattern;
volatile Globals currentGlobals;
volatile Screen screenBank;
TeensyTimerTool::Timer OLEDTimer;
     1fa:	f002      	.short	0xf002
     1fc:	b8b1      			; <UNDEFINED> instruction: 0xb8b1
     1fe:	bf00      	.short	0xbf00
     200:	0224      	lsls	r4, r4, #8
     202:	2000      	.short	0x2000
     204:	0228      	lsls	r0, r5, #8
     206:	2000      	.short	0x2000
     208:	022c      	lsls	r4, r5, #8
     20a:	2000      	.short	0x2000
     20c:	0230      	lsls	r0, r6, #8
     20e:	2000      	.short	0x2000
     210:	0234      	lsls	r4, r6, #8
     212:	2000      	movs	r0, #0
     214:	023c      	lsls	r4, r7, #8
     216:	2000      	movs	r0, #0
     218:	0238      	lsls	r0, r7, #8
     21a:	2000      	movs	r0, #0
     21c:	1258      	asrs	r0, r3, #9
     21e:	2000      	.short	0x2000
     220:	1248      	asrs	r0, r1, #9
     222:	2000      	.short	0x2000

00000224 <initBank(Pattern volatile*)>:
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
		currentInitPattern->trackPlayMode[i] = 0x01;
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     224:	f04f2200 	.word	0xf04f2200

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     228:	0c02      	lsrs	r2, r0, #16
     22a:	2107      	.short	0x2107
		currentInitPattern->trackPlayMode[i] = 0x01;
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     22c:	4613      	mov	r3, r2
// 

#include "globalVariables.h"

void initBank(volatile Pattern* currentInitPattern)
{
     22e:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     230:	24032501 	.word	0x24032501
     234:	f04f 0e04 	mov.w	lr, #4
     238:	26062705 	.word	0x26062705
     23c:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
		currentInitPattern->trackPlayMode[i] = 0x01;
     240:	5088f880 	.word	0x5088f880
		currentInitPattern->envelopeType[i] = 3;
     244:	f880 40eb 	strb.w	r4, [r0, #235]	; 0xeb
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     248:	f880 20db 	strb.w	r2, [r0, #219]	; 0xdb
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     24c:	f880 20cb 	strb.w	r2, [r0, #203]	; 0xcb

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     250:	f880 c0a9 	strb.w	ip, [r0, #169]	; 0xa9
     254:	f04f 0c08 	mov.w	ip, #8
		currentInitPattern->trackPlayMode[i] = 0x01;
     258:	f880 5089 	strb.w	r5, [r0, #137]	; 0x89
		currentInitPattern->envelopeType[i] = 3;
     25c:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     260:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     264:	f880 20cc 	strb.w	r2, [r0, #204]	; 0xcc

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     268:	f880 40aa 	strb.w	r4, [r0, #170]	; 0xaa
		currentInitPattern->trackPlayMode[i] = 0x01;
     26c:	f880 508a 	strb.w	r5, [r0, #138]	; 0x8a
		currentInitPattern->envelopeType[i] = 3;
     270:	f880 40ed 	strb.w	r4, [r0, #237]	; 0xed
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     274:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     278:	f880 20cd 	strb.w	r2, [r0, #205]	; 0xcd

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     27c:	f880 e0ab 	strb.w	lr, [r0, #171]	; 0xab
     280:	f04f 0e09 	mov.w	lr, #9
		currentInitPattern->trackPlayMode[i] = 0x01;
     284:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
		currentInitPattern->envelopeType[i] = 3;
     288:	f880 40ee 	strb.w	r4, [r0, #238]	; 0xee
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     28c:	f880 20de 	strb.w	r2, [r0, #222]	; 0xde
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     290:	f880 20ce 	strb.w	r2, [r0, #206]	; 0xce

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     294:	f880 70ac 	strb.w	r7, [r0, #172]	; 0xac
     298:	270a      	movs	r7, #10
		currentInitPattern->trackPlayMode[i] = 0x01;
     29a:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
		currentInitPattern->envelopeType[i] = 3;
     29e:	f880 40ef 	strb.w	r4, [r0, #239]	; 0xef
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     2a2:	f880 20df 	strb.w	r2, [r0, #223]	; 0xdf
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     2a6:	f880 20cf 	strb.w	r2, [r0, #207]	; 0xcf

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     2aa:	f880 60ad 	strb.w	r6, [r0, #173]	; 0xad
     2ae:	260b      	movs	r6, #11
		currentInitPattern->trackPlayMode[i] = 0x01;
     2b0:	f880 508d 	strb.w	r5, [r0, #141]	; 0x8d
		currentInitPattern->envelopeType[i] = 3;
     2b4:	f880 40f0 	strb.w	r4, [r0, #240]	; 0xf0
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     2b8:	f880 20e0 	strb.w	r2, [r0, #224]	; 0xe0
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     2bc:	f880 20d0 	strb.w	r2, [r0, #208]	; 0xd0

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     2c0:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
     2c4:	210c      	movs	r1, #12
		currentInitPattern->trackPlayMode[i] = 0x01;
     2c6:	f880 508e 	strb.w	r5, [r0, #142]	; 0x8e
		currentInitPattern->envelopeType[i] = 3;
     2ca:	f880 40f1 	strb.w	r4, [r0, #241]	; 0xf1
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     2ce:	f880 20e1 	strb.w	r2, [r0, #225]	; 0xe1
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     2d2:	f880 20d1 	strb.w	r2, [r0, #209]	; 0xd1

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     2d6:	f880 c0af 	strb.w	ip, [r0, #175]	; 0xaf
     2da:	f04f 0c0d 	mov.w	ip, #13
		currentInitPattern->trackPlayMode[i] = 0x01;
     2de:	f880 508f 	strb.w	r5, [r0, #143]	; 0x8f
		currentInitPattern->envelopeType[i] = 3;
     2e2:	f880 40f2 	strb.w	r4, [r0, #242]	; 0xf2
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     2e6:	f880 20e2 	strb.w	r2, [r0, #226]	; 0xe2
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     2ea:	f880 20d2 	strb.w	r2, [r0, #210]	; 0xd2

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     2ee:	f880 e0b0 	strb.w	lr, [r0, #176]	; 0xb0
     2f2:	f04f 0e0e 	mov.w	lr, #14
		currentInitPattern->trackPlayMode[i] = 0x01;
     2f6:	f880 5090 	strb.w	r5, [r0, #144]	; 0x90
		currentInitPattern->envelopeType[i] = 3;
     2fa:	f880 40f3 	strb.w	r4, [r0, #243]	; 0xf3
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     2fe:	f880 20e3 	strb.w	r2, [r0, #227]	; 0xe3
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     302:	f880 20d3 	strb.w	r2, [r0, #211]	; 0xd3

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     306:	f880 70b1 	strb.w	r7, [r0, #177]	; 0xb1
     30a:	270f      	movs	r7, #15
		currentInitPattern->trackPlayMode[i] = 0x01;
     30c:	f880 5091 	strb.w	r5, [r0, #145]	; 0x91
		currentInitPattern->envelopeType[i] = 3;
     310:	f880 40f4 	strb.w	r4, [r0, #244]	; 0xf4
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     314:	f880 20e4 	strb.w	r2, [r0, #228]	; 0xe4
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     318:	f880 20d4 	strb.w	r2, [r0, #212]	; 0xd4

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     31c:	f880 60b2 	strb.w	r6, [r0, #178]	; 0xb2
     320:	2610      	movs	r6, #16
		currentInitPattern->trackPlayMode[i] = 0x01;
     322:	f880 5092 	strb.w	r5, [r0, #146]	; 0x92
		currentInitPattern->envelopeType[i] = 3;
     326:	f880 40f5 	strb.w	r4, [r0, #245]	; 0xf5
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     32a:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     32e:	f880 20d5 	strb.w	r2, [r0, #213]	; 0xd5

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     332:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
		currentInitPattern->trackSustainTimeMSB[i] = 0;
	}

	for (uint8_t j = 0; j < 64; j++)
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     336:	4611      	mov	r1, r2
void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
		currentInitPattern->trackPlayMode[i] = 0x01;
     338:	f880 5093 	strb.w	r5, [r0, #147]	; 0x93
		currentInitPattern->envelopeType[i] = 3;
     33c:	f880 40f6 	strb.w	r4, [r0, #246]	; 0xf6
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     340:	f880 20e6 	strb.w	r2, [r0, #230]	; 0xe6
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     344:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     348:	f880 c0b4 	strb.w	ip, [r0, #180]	; 0xb4
		currentInitPattern->trackPlayMode[i] = 0x01;
     34c:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
		currentInitPattern->envelopeType[i] = 3;
     350:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     354:	f880 20e7 	strb.w	r2, [r0, #231]	; 0xe7
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     358:	f880 20d7 	strb.w	r2, [r0, #215]	; 0xd7

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     35c:	f880 e0b5 	strb.w	lr, [r0, #181]	; 0xb5
		currentInitPattern->trackPlayMode[i] = 0x01;
     360:	f880 5095 	strb.w	r5, [r0, #149]	; 0x95
		currentInitPattern->envelopeType[i] = 3;
     364:	f880 40f8 	strb.w	r4, [r0, #248]	; 0xf8
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     368:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     36c:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     370:	f880 70b6 	strb.w	r7, [r0, #182]	; 0xb6
		currentInitPattern->trackPlayMode[i] = 0x01;
     374:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
		currentInitPattern->envelopeType[i] = 3;
     378:	f880 40f9 	strb.w	r4, [r0, #249]	; 0xf9
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     37c:	f880 20e9 	strb.w	r2, [r0, #233]	; 0xe9
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     380:	f880 20d9 	strb.w	r2, [r0, #217]	; 0xd9

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     384:	f880 60b7 	strb.w	r6, [r0, #183]	; 0xb7
		currentInitPattern->trackPlayMode[i] = 0x01;
     388:	f880 5097 	strb.w	r5, [r0, #151]	; 0x97
		currentInitPattern->envelopeType[i] = 3;
     38c:	f880 40fa 	strb.w	r4, [r0, #250]	; 0xfa
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     390:	f880 20ea 	strb.w	r2, [r0, #234]	; 0xea
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     394:	f880 20da 	strb.w	r2, [r0, #218]	; 0xda
	}

	for (uint8_t j = 0; j < 64; j++)
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     398:	f103 027c 	add.w	r2, r3, #124	; 0x7c
     39c:	3301      	adds	r3, #1
     39e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
		currentInitPattern->trackSustainTimeMSB[i] = 0;
	}

	for (uint8_t j = 0; j < 64; j++)
     3a2:	2b40      	cmp	r3, #64	; 0x40
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     3a4:	8091      	strh	r1, [r2, #4]
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
		currentInitPattern->trackSustainTimeMSB[i] = 0;
	}

	for (uint8_t j = 0; j < 64; j++)
     3a6:	d1f7      	bne.n	398 <initBank(Pattern volatile*)+0x174>
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 

	}
	//We need to take these and put them in global. 
	currentInitPattern->patternBPM = 120;
     3a8:	2278      	movs	r2, #120	; 0x78
	currentInitPattern->numSteps = 16;
     3aa:	2310      	movs	r3, #16
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 

	}
	//We need to take these and put them in global. 
	currentInitPattern->patternBPM = 120;
     3ac:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
	currentInitPattern->numSteps = 16;
     3b0:	f880 30ca 	strb.w	r3, [r0, #202]	; 0xca
     3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3b6:	bf00      	nop

000003b8 <initGlobals(Globals volatile*, unsigned char)>:
}
void initGlobals(volatile Globals* currentGlobals, uint8_t factoryReset)
{
	currentGlobals->currentTrigButtons = 0; //current state of Trig buttons.
     3b8:	2300      	movs	r3, #0
	currentGlobals->currentTrigSequencer = 0;
	currentGlobals->currentTrigMidi = 0;
	currentGlobals->oledReadIndex = 0;
	currentGlobals->oledWriteIndex = 0;

	if (factoryReset == 1)
     3ba:	2901      	cmp	r1, #1
	currentInitPattern->patternBPM = 120;
	currentInitPattern->numSteps = 16;
}
void initGlobals(volatile Globals* currentGlobals, uint8_t factoryReset)
{
	currentGlobals->currentTrigButtons = 0; //current state of Trig buttons.
     3bc:	8003      	strh	r3, [r0, #0]
	currentGlobals->currentGPButtons = 0; //current state of GP buttons
     3be:	7083      	strb	r3, [r0, #2]
	currentGlobals->currentPatternNumber = 0; //current pattern, between 1 and 256
     3c0:	7203      	strb	r3, [r0, #8]
	currentGlobals->currentStep = 0; // current step in the sequencer
     3c2:	7243      	strb	r3, [r0, #9]
	currentGlobals->currentTrack = 0; //current track being edited
     3c4:	7283      	strb	r3, [r0, #10]
	currentGlobals->menuState = 0; //where the menu is currently
     3c6:	72c3      	strb	r3, [r0, #11]
	currentGlobals->playState = 0; //whether the sequencer is playing, stopped, or paused.
     3c8:	7303      	strb	r3, [r0, #12]
	currentGlobals->factoryReset = 0; //we may not need this in this struct, but good to have for now.
     3ca:	7343      	strb	r3, [r0, #13]
	currentGlobals->buttonSwitchFlag = 0; // could be rolled into value bits.
     3cc:	7383      	strb	r3, [r0, #14]
	currentGlobals->valueChangeFlag = 0; //bit 0 -> changes in encoders, bit 1-> changes in buttons, bit2 -> changes in knobs
     3ce:	73c3      	strb	r3, [r0, #15]
	currentGlobals->knobStatus = 0; //top 4 bits: knob type, bottom 4 bits: knob location.
     3d0:	7403      	strb	r3, [r0, #16]
	currentGlobals->releaseCounter = 0;
     3d2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	currentGlobals->lastGlobalTimer = 0;
     3d6:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
	currentGlobals->clockCounter = 0;
     3da:	f8a0 30f0 	strh.w	r3, [r0, #240]	; 0xf0
	currentGlobals->currentTrigSequencer = 0;
     3de:	8083      	strh	r3, [r0, #4]
	currentGlobals->currentTrigMidi = 0;
     3e0:	80c3      	strh	r3, [r0, #6]
	currentGlobals->oledReadIndex = 0;
     3e2:	f880 32fa 	strb.w	r3, [r0, #762]	; 0x2fa
	currentGlobals->oledWriteIndex = 0;
     3e6:	f880 32fb 	strb.w	r3, [r0, #763]	; 0x2fb

	if (factoryReset == 1)
     3ea:	d000      	beq.n	3ee <initGlobals(Globals volatile*, unsigned char)+0x36>
     3ec:	4770      	bx	lr
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
     3ee:	2224      	movs	r2, #36	; 0x24
	currentGlobals->oledReadIndex = 0;
	currentGlobals->oledWriteIndex = 0;

	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
     3f0:	7443      	strb	r3, [r0, #17]
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
     3f2:	212a      	movs	r1, #42	; 0x2a
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
     3f4:	232c      	movs	r3, #44	; 0x2c
	currentGlobals->oledWriteIndex = 0;

	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
     3f6:	7482      	strb	r2, [r0, #18]
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
     3f8:	222b      	movs	r2, #43	; 0x2b
	//We need to take these and put them in global. 
	currentInitPattern->patternBPM = 120;
	currentInitPattern->numSteps = 16;
}
void initGlobals(volatile Globals* currentGlobals, uint8_t factoryReset)
{
     3fa:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
     3fc:	2726      	movs	r7, #38	; 0x26
		currentGlobals->midiTrackNote[3] = 0x27;
     3fe:	2627      	movs	r6, #39	; 0x27
		currentGlobals->midiTrackNote[4] = 0x28;
     400:	2528      	movs	r5, #40	; 0x28
		currentGlobals->midiTrackNote[5] = 0x29;
     402:	2429      	movs	r4, #41	; 0x29

	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
     404:	f04f 0e25 	mov.w	lr, #37	; 0x25
     408:	f880 e013 	strb.w	lr, [r0, #19]
		currentGlobals->midiTrackNote[2] = 0x26;
     40c:	7507      	strb	r7, [r0, #20]
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
     40e:	272d      	movs	r7, #45	; 0x2d
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
     410:	7546      	strb	r6, [r0, #21]
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
     412:	262e      	movs	r6, #46	; 0x2e
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
     414:	7585      	strb	r5, [r0, #22]
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
     416:	252f      	movs	r5, #47	; 0x2f
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
     418:	75c4      	strb	r4, [r0, #23]
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
     41a:	2430      	movs	r4, #48	; 0x30
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
     41c:	7601      	strb	r1, [r0, #24]
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
		currentGlobals->midiTrackNote[13] = 0x31;
     41e:	2131      	movs	r1, #49	; 0x31
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
     420:	7642      	strb	r2, [r0, #25]
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
		currentGlobals->midiTrackNote[13] = 0x31;
		currentGlobals->midiTrackNote[14] = 0x32;
     422:	2232      	movs	r2, #50	; 0x32
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
     424:	7683      	strb	r3, [r0, #26]
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
		currentGlobals->midiTrackNote[13] = 0x31;
		currentGlobals->midiTrackNote[14] = 0x32;
		currentGlobals->midiTrackNote[15] = 0x33;
     426:	2333      	movs	r3, #51	; 0x33
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
     428:	76c7      	strb	r7, [r0, #27]
		currentGlobals->midiTrackNote[10] = 0x2e;
     42a:	7706      	strb	r6, [r0, #28]
		currentGlobals->midiTrackNote[11] = 0x2f;
     42c:	7745      	strb	r5, [r0, #29]
		currentGlobals->midiTrackNote[12] = 0x30;
     42e:	7784      	strb	r4, [r0, #30]
		currentGlobals->midiTrackNote[13] = 0x31;
     430:	77c1      	strb	r1, [r0, #31]
		currentGlobals->midiTrackNote[14] = 0x32;
     432:	f880 2020 	strb.w	r2, [r0, #32]
		currentGlobals->midiTrackNote[15] = 0x33;
     436:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
     43a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000043c <initArrays(char volatile (*) [21], int, char*)>:
	}
}

void initArrays(volatile char myArray[9][21], int stringNumber, char* myString)
{
     43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     43e:	4606      	mov	r6, r0
	uint8_t lengthOfString = strlen(myString);
     440:	4610      	mov	r0, r2
		currentGlobals->midiTrackNote[15] = 0x33;
	}
}

void initArrays(volatile char myArray[9][21], int stringNumber, char* myString)
{
     442:	460f      	mov	r7, r1
     444:	4614      	mov	r4, r2
	uint8_t lengthOfString = strlen(myString);
     446:	f004 fb7b 	bl	4b40 <strlen>
     44a:	b2c0      	uxtb	r0, r0
	uint8_t charLeft = 20 - lengthOfString;
     44c:	f1c0 0114 	rsb	r1, r0, #20
     450:	b2c9      	uxtb	r1, r1
	uint8_t currentIndex = 0;
	for (currentIndex; currentIndex < lengthOfString; currentIndex++)
     452:	b168      	cbz	r0, 470 <initArrays(char volatile (*) [21], int, char*)+0x34>
     454:	eb07 0547 	add.w	r5, r7, r7, lsl #1
     458:	1e62      	subs	r2, r4, #1
     45a:	2300      	movs	r3, #0
     45c:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
     460:	4435      	add	r5, r6
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     462:	f812 4f01 	ldrb.w	r4, [r2, #1]!
     466:	54ec      	strb	r4, [r5, r3]
     468:	3301      	adds	r3, #1
void initArrays(volatile char myArray[9][21], int stringNumber, char* myString)
{
	uint8_t lengthOfString = strlen(myString);
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for (currentIndex; currentIndex < lengthOfString; currentIndex++)
     46a:	b2dc      	uxtb	r4, r3
     46c:	4284      	cmp	r4, r0
     46e:	d3f8      	bcc.n	462 <initArrays(char volatile (*) [21], int, char*)+0x26>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for (charLeft; charLeft > 0; charLeft--)
     470:	b169      	cbz	r1, 48e <initArrays(char volatile (*) [21], int, char*)+0x52>
     472:	eb07 0747 	add.w	r7, r7, r7, lsl #1
     476:	180a      	adds	r2, r1, r0
	{
		myArray[stringNumber][currentIndex] = ' ';
     478:	2120      	movs	r1, #32
     47a:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
     47e:	b2d2      	uxtb	r2, r2
     480:	443e      	add	r6, r7
		currentIndex++;
     482:	1c43      	adds	r3, r0, #1
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for (charLeft; charLeft > 0; charLeft--)
	{
		myArray[stringNumber][currentIndex] = ' ';
     484:	5431      	strb	r1, [r6, r0]
		currentIndex++;
     486:	b2d8      	uxtb	r0, r3
	for (currentIndex; currentIndex < lengthOfString; currentIndex++)
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for (charLeft; charLeft > 0; charLeft--)
     488:	4290      	cmp	r0, r2
     48a:	d1fa      	bne.n	482 <initArrays(char volatile (*) [21], int, char*)+0x46>
     48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000490 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)>:

		case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0, currentGlobals);
			outputS(menuScreen->screen2[1], 1, currentGlobals);
			outputS(menuScreen->screen2[2], 2, currentGlobals);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
     490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     494:	4605      	mov	r5, r0
			currentGlobals->menuState = TrackMenuArrow1;
     496:	4617      	mov	r7, r2
     498:	4688      	mov	r8, r1
     49a:	4a5c      	ldr	r2, [pc, #368]	; (60c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x17c>)
}

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
     49c:	2100      	movs	r1, #0
     49e:	f100 06bd 	add.w	r6, r0, #189	; 0xbd
     4a2:	f7ff ffcb 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     4a6:	4628      	mov	r0, r5
     4a8:	4a59      	ldr	r2, [pc, #356]	; (610 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x180>)
     4aa:	2101      	movs	r1, #1
     4ac:	f7ff ffc6 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
     4b0:	4628      	mov	r0, r5
     4b2:	4a58      	ldr	r2, [pc, #352]	; (614 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x184>)
     4b4:	2102      	movs	r1, #2
     4b6:	f7ff ffc1 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     4ba:	4628      	mov	r0, r5
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     4bc:	4a56      	ldr	r2, [pc, #344]	; (618 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x188>)
     4be:	2103      	movs	r1, #3

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
     4c0:	f7ff ffbc 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     4c4:	4630      	mov	r0, r6
     4c6:	4a55      	ldr	r2, [pc, #340]	; (61c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x18c>)
     4c8:	2100      	movs	r1, #0
     4ca:	f7ff ffb7 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     4ce:	4630      	mov	r0, r6
     4d0:	4a4f      	ldr	r2, [pc, #316]	; (610 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x180>)
     4d2:	2101      	movs	r1, #1
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     4d4:	f505 74bd 	add.w	r4, r5, #378	; 0x17a
     4d8:	f7ff ffb0 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     4dc:	4630      	mov	r0, r6
     4de:	4a50      	ldr	r2, [pc, #320]	; (620 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x190>)
     4e0:	2102      	movs	r1, #2
		//we need to debug this to make sure it's doing what we think it's doing.
		switch (currentGlobals->menuState)
		{
		case PreformanceModeInit: //initial state
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
			outputS(menuScreen->screen0[0], 0, currentGlobals);
     4e2:	f7ff ffab 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     4e6:	4630      	mov	r0, r6
     4e8:	4a4e      	ldr	r2, [pc, #312]	; (624 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x194>)
     4ea:	2103      	movs	r1, #3
			outputS(menuScreen->screen0[1], 1, currentGlobals);
     4ec:	f7ff ffa6 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     4f0:	4620      	mov	r0, r4
     4f2:	4a4d      	ldr	r2, [pc, #308]	; (628 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x198>)
     4f4:	2100      	movs	r1, #0
			outputS(menuScreen->screen0[2], 2, currentGlobals);
     4f6:	f7ff ffa1 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     4fa:	4620      	mov	r0, r4
     4fc:	4a4b      	ldr	r2, [pc, #300]	; (62c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x19c>)
     4fe:	2101      	movs	r1, #1
			outputS(menuScreen->screen0[3], 3, currentGlobals);
     500:	f7ff ff9c 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     504:	4620      	mov	r0, r4
     506:	4a4a      	ldr	r2, [pc, #296]	; (630 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1a0>)
     508:	2102      	movs	r1, #2
     50a:	f7ff ff97 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
			outputS(menuScreen->screen2[2], 2, currentGlobals);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			break;

		case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     50e:	4620      	mov	r0, r4
			numPrinter(menuScreen->screen2[1], 10, 4, (trackSample));
     510:	4a48      	ldr	r2, [pc, #288]	; (634 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1a4>)
     512:	2103      	movs	r1, #3
     514:	f205 2637 	addw	r6, r5, #567	; 0x237
			outputS(menuScreen->screen2[2], 2, currentGlobals);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			break;

		case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     518:	f7ff ff90 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     51c:	4620      	mov	r0, r4
     51e:	4a46      	ldr	r2, [pc, #280]	; (638 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1a8>)
     520:	2104      	movs	r1, #4
     522:	f7ff ff8b 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     526:	4620      	mov	r0, r4
     528:	4a44      	ldr	r2, [pc, #272]	; (63c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1ac>)
			numPrinter(menuScreen->screen2[1], 10, 4, (trackSample));
     52a:	2105      	movs	r1, #5
     52c:	f7ff ff86 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     530:	4630      	mov	r0, r6
			outputS(menuScreen->screen2[1], 1, currentGlobals);
     532:	4a43      	ldr	r2, [pc, #268]	; (640 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1b0>)
     534:	2101      	movs	r1, #1
     536:	f7ff ff81 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     53a:	4630      	mov	r0, r6
			break;
     53c:	4a41      	ldr	r2, [pc, #260]	; (644 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1b4>)
}

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
     53e:	2102      	movs	r1, #2
     540:	f505 743d 	add.w	r4, r5, #756	; 0x2f4
     544:	f7ff ff7a 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     548:	4630      	mov	r0, r6
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     54a:	4a3f      	ldr	r2, [pc, #252]	; (648 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1b8>)
     54c:	2103      	movs	r1, #3
}

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
     54e:	f7ff ff75 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
     552:	4630      	mov	r0, r6
     554:	4a3d      	ldr	r2, [pc, #244]	; (64c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1bc>)
     556:	2100      	movs	r1, #0
     558:	f7ff ff70 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     55c:	4620      	mov	r0, r4
     55e:	4a3c      	ldr	r2, [pc, #240]	; (650 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1c0>)
     560:	2100      	movs	r1, #0
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     562:	f7ff ff6b 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     566:	4620      	mov	r0, r4
     568:	4a3a      	ldr	r2, [pc, #232]	; (654 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1c4>)
     56a:	2101      	movs	r1, #1
     56c:	f7ff ff66 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     570:	4620      	mov	r0, r4
     572:	4a39      	ldr	r2, [pc, #228]	; (658 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1c8>)
     574:	2102      	movs	r1, #2
     576:	f7ff ff61 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     57a:	4620      	mov	r0, r4
     57c:	4a37      	ldr	r2, [pc, #220]	; (65c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1cc>)
				menuScreen->screen2[4][16] = ' ';
				menuScreen->screen2[4][17] = ' ';
				break;

			case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
     57e:	2103      	movs	r1, #3
				menuScreen->screen2[4][15] = 'o';
     580:	f7ff ff5c 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
				menuScreen->screen2[4][16] = 'n';
				menuScreen->screen2[4][17] = 'e';
     584:	4620      	mov	r0, r4
				menuScreen->screen2[4][16] = ' ';
				menuScreen->screen2[4][17] = ' ';
				break;

			case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
     586:	4a36      	ldr	r2, [pc, #216]	; (660 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1d0>)
     588:	2104      	movs	r1, #4
				menuScreen->screen2[4][15] = 'o';
     58a:	f7ff ff57 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
				menuScreen->screen2[4][16] = 'n';
     58e:	f8b8 30c8 	ldrh.w	r3, [r8, #200]	; 0xc8
				menuScreen->screen2[4][17] = 'e';
     592:	f105 002a 	add.w	r0, r5, #42	; 0x2a
				break;
     596:	2203      	movs	r2, #3
				menuScreen->screen2[4][16] = 'R';
				menuScreen->screen2[4][17] = ' ';
				break;

			case 1: //only release
				menuScreen->screen2[4][14] = 'R';
     598:	b29b      	uxth	r3, r3
     59a:	2105      	movs	r1, #5

			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack] + 1));
			switch (currentPattern->envelopeType[currentGlobals->currentTrack])
			{
			case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
     59c:	f000 fb6a 	bl	c74 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
				menuScreen->screen2[4][15] = '-';
				menuScreen->screen2[4][16] = 'R';
     5a0:	7c7b      	ldrb	r3, [r7, #17]
				menuScreen->screen2[4][17] = ' ';
     5a2:	f505 7013 	add.w	r0, r5, #588	; 0x24c

			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack] + 1));
			switch (currentPattern->envelopeType[currentGlobals->currentTrack])
			{
			case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
     5a6:	2202      	movs	r2, #2
				menuScreen->screen2[4][15] = '-';
     5a8:	3301      	adds	r3, #1
     5aa:	210e      	movs	r1, #14
				menuScreen->screen2[4][16] = 'R';
     5ac:	f000 fb62 	bl	c74 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
				menuScreen->screen2[4][17] = ' ';
     5b0:	7a3b      	ldrb	r3, [r7, #8]
     5b2:	f105 0015 	add.w	r0, r5, #21
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
			{
			case 0:
				menuScreen->screen2[2][10] = 'S';
				menuScreen->screen2[2][11] = 'o';
     5b6:	2203      	movs	r2, #3
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
			{
			case 0:
				menuScreen->screen2[2][10] = 'S';
     5b8:	3301      	adds	r3, #1
				menuScreen->screen2[2][11] = 'o';
				menuScreen->screen2[2][12] = 'l';
     5ba:	2109      	movs	r1, #9
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
			{
			case 0:
				menuScreen->screen2[2][10] = 'S';
     5bc:	f000 fb5a 	bl	c74 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
				menuScreen->screen2[2][11] = 'o';
     5c0:	7a3b      	ldrb	r3, [r7, #8]
     5c2:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
				menuScreen->screen2[2][12] = 'l';
     5c6:	2203      	movs	r2, #3
				menuScreen->screen2[2][13] = 'o';
     5c8:	3301      	adds	r3, #1
     5ca:	2109      	movs	r1, #9
				break;
     5cc:	f000 fb52 	bl	c74 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
		{
		case 0: //output volume
			if ((currentPattern->outputLevelMSB[positionSelect]) == 0)
			{ //value is positive
				menuScreen->knobScreen[0][14] = ' ';
				numPrinter(menuScreen->knobScreen[0], 15, 2, currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
     5d0:	f898 30ca 	ldrb.w	r3, [r8, #202]	; 0xca
     5d4:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
		switch ((currentGlobals->knobStatus) >> 4)
		{
		case 0: //output volume
			if ((currentPattern->outputLevelMSB[positionSelect]) == 0)
			{ //value is positive
				menuScreen->knobScreen[0][14] = ' ';
     5d8:	2202      	movs	r2, #2
     5da:	2107      	movs	r1, #7
				numPrinter(menuScreen->knobScreen[0], 15, 2, currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
     5dc:	462e      	mov	r6, r5
     5de:	f000 fb49 	bl	c74 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
     5e2:	7a7b      	ldrb	r3, [r7, #9]
     5e4:	f105 00fc 	add.w	r0, r5, #252	; 0xfc
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
	numPrinter(initTheScreen->screen3[1], 14, 2, (currentGlobals->midiChannel) + 1);
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
	numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals->currentStep) + 1);
     5e8:	2202      	movs	r2, #2
     5ea:	3301      	adds	r3, #1
     5ec:	210d      	movs	r1, #13
     5ee:	2400      	movs	r4, #0
     5f0:	f000 fb40 	bl	c74 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>

	for (uint8_t i = 0; i < 4; i++)
	{
		outputS(initTheScreen->screen0[i], i, currentGlobals);
     5f4:	4621      	mov	r1, r4
     5f6:	3401      	adds	r4, #1
     5f8:	4630      	mov	r0, r6
     5fa:	463a      	mov	r2, r7
     5fc:	f000 fb0e 	bl	c1c <outputS(char volatile*, int, Globals volatile*)>
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
	numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals->currentStep) + 1);

	for (uint8_t i = 0; i < 4; i++)
     600:	2c04      	cmp	r4, #4
     602:	f106 0615 	add.w	r6, r6, #21
     606:	d1f5      	bne.n	5f4 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x164>
	{
		outputS(initTheScreen->screen0[i], i, currentGlobals);
	}
}
     608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     60c:	20000000 	.word	0x20000000
     610:	20000014 	.word	0x20000014
     614:	20000020 	.word	0x20000020
     618:	20000028 	.word	0x20000028
     61c:	20000030 	.word	0x20000030
     620:	20000040 	.word	0x20000040
     624:	20000048 	.word	0x20000048
     628:	20000058 	.word	0x20000058
     62c:	20000068 	.word	0x20000068
     630:	20000070 	.word	0x20000070
     634:	2000007c 	.word	0x2000007c
     638:	20000088 	.word	0x20000088
     63c:	20000098 	.word	0x20000098
     640:	200000ac 	.word	0x200000ac
     644:	200000bc 	.word	0x200000bc
     648:	200000cc 	.word	0x200000cc
     64c:	200000d0 	.word	0x200000d0
     650:	200000e0 	.word	0x200000e0
     654:	200000f4 	.word	0x200000f4
     658:	20000100 	.word	0x20000100
     65c:	20000118 	.word	0x20000118
     660:	20000130 	.word	0x20000130

00000664 <enableCycle(Globals volatile*)>:
uint8_t new_line[4] = { 0x80, 0xA0, 0xC0, 0xE0 };
uint8_t OLEDPinArray[9] = {OLEDData0,OLEDData1,OLEDData2,OLEDData3,OLEDData4,OLEDData5, OLEDData6, OLEDData7, OLEDDataCommand};

void enableCycle(volatile Globals *OLEDGlobals) //called on by interval timer.
{
	if (OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]) //if this is a non-0 value, continue with interupt. 
     664:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
     668:	337c      	adds	r3, #124	; 0x7c
     66a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
     66e:	885b      	ldrh	r3, [r3, #2]
     670:	b29b      	uxth	r3, r3
     672:	2b00      	cmp	r3, #0
     674:	f000 8093 	beq.w	79e <enableCycle(Globals volatile*)+0x13a>
	{
		//we need to bring the enable pin high, then wait one micro second, then low. 
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
		uint16_t toParse = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]; //create a pare variable, so we don't destroy the variable in the buffer. Might be unnessisary. 
     678:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
		for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(toParse&1)); //mask toParse with 1, so we just get the first bit. 
     67c:	4a56      	ldr	r2, [pc, #344]	; (7d8 <enableCycle(Globals volatile*)+0x174>)
{
	if (OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]) //if this is a non-0 value, continue with interupt. 
	{
		//we need to bring the enable pin high, then wait one micro second, then low. 
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
		uint16_t toParse = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]; //create a pare variable, so we don't destroy the variable in the buffer. Might be unnessisary. 
     67e:	337c      	adds	r3, #124	; 0x7c
     680:	eb00 0343 	add.w	r3, r0, r3, lsl #1

uint8_t new_line[4] = { 0x80, 0xA0, 0xC0, 0xE0 };
uint8_t OLEDPinArray[9] = {OLEDData0,OLEDData1,OLEDData2,OLEDData3,OLEDData4,OLEDData5, OLEDData6, OLEDData7, OLEDDataCommand};

void enableCycle(volatile Globals *OLEDGlobals) //called on by interval timer.
{
     684:	b4f0      	push	{r4, r5, r6, r7}
	if (OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]) //if this is a non-0 value, continue with interupt. 
	{
		//we need to bring the enable pin high, then wait one micro second, then low. 
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
		uint16_t toParse = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]; //create a pare variable, so we don't destroy the variable in the buffer. Might be unnessisary. 
     686:	885b      	ldrh	r3, [r3, #2]
		for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(toParse&1)); //mask toParse with 1, so we just get the first bit. 
     688:	7811      	ldrb	r1, [r2, #0]
{
	if (OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]) //if this is a non-0 value, continue with interupt. 
	{
		//we need to bring the enable pin high, then wait one micro second, then low. 
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
		uint16_t toParse = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]; //create a pare variable, so we don't destroy the variable in the buffer. Might be unnessisary. 
     68a:	b29b      	uxth	r3, r3
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     68c:	010c      	lsls	r4, r1, #4
     68e:	4953      	ldr	r1, [pc, #332]	; (7dc <enableCycle(Globals volatile*)+0x178>)
     690:	07df      	lsls	r7, r3, #31
     692:	eb01 0504 	add.w	r5, r1, r4
     696:	590c      	ldr	r4, [r1, r4]
     698:	68ed      	ldr	r5, [r5, #12]
     69a:	f100 8081 	bmi.w	7a0 <enableCycle(Globals volatile*)+0x13c>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     69e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
		for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(toParse&1)); //mask toParse with 1, so we just get the first bit. 
     6a2:	7854      	ldrb	r4, [r2, #1]
			toParse = toParse >> 1; //shift toParse down one, so we can get the next bit to write.
     6a4:	105b      	asrs	r3, r3, #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     6a6:	0124      	lsls	r4, r4, #4
     6a8:	07de      	lsls	r6, r3, #31
     6aa:	eb01 0504 	add.w	r5, r1, r4
     6ae:	590c      	ldr	r4, [r1, r4]
     6b0:	68ed      	ldr	r5, [r5, #12]
     6b2:	d47b      	bmi.n	7ac <enableCycle(Globals volatile*)+0x148>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     6b4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
		//we need to bring the enable pin high, then wait one micro second, then low. 
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
		uint16_t toParse = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]; //create a pare variable, so we don't destroy the variable in the buffer. Might be unnessisary. 
		for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(toParse&1)); //mask toParse with 1, so we just get the first bit. 
     6b8:	7894      	ldrb	r4, [r2, #2]
			toParse = toParse >> 1; //shift toParse down one, so we can get the next bit to write.
     6ba:	105b      	asrs	r3, r3, #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     6bc:	0124      	lsls	r4, r4, #4
     6be:	07df      	lsls	r7, r3, #31
     6c0:	eb01 0504 	add.w	r5, r1, r4
     6c4:	590c      	ldr	r4, [r1, r4]
     6c6:	68ed      	ldr	r5, [r5, #12]
     6c8:	d476      	bmi.n	7b8 <enableCycle(Globals volatile*)+0x154>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     6ca:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
		//we need to bring the enable pin high, then wait one micro second, then low. 
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
		uint16_t toParse = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]; //create a pare variable, so we don't destroy the variable in the buffer. Might be unnessisary. 
		for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(toParse&1)); //mask toParse with 1, so we just get the first bit. 
     6ce:	78d4      	ldrb	r4, [r2, #3]
			toParse = toParse >> 1; //shift toParse down one, so we can get the next bit to write.
     6d0:	105b      	asrs	r3, r3, #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     6d2:	0124      	lsls	r4, r4, #4
     6d4:	07de      	lsls	r6, r3, #31
     6d6:	eb01 0504 	add.w	r5, r1, r4
     6da:	590c      	ldr	r4, [r1, r4]
     6dc:	68ed      	ldr	r5, [r5, #12]
     6de:	d468      	bmi.n	7b2 <enableCycle(Globals volatile*)+0x14e>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     6e0:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
		//we need to bring the enable pin high, then wait one micro second, then low. 
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
		uint16_t toParse = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]; //create a pare variable, so we don't destroy the variable in the buffer. Might be unnessisary. 
		for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(toParse&1)); //mask toParse with 1, so we just get the first bit. 
     6e4:	7914      	ldrb	r4, [r2, #4]
			toParse = toParse >> 1; //shift toParse down one, so we can get the next bit to write.
     6e6:	105b      	asrs	r3, r3, #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     6e8:	0124      	lsls	r4, r4, #4
     6ea:	07df      	lsls	r7, r3, #31
     6ec:	eb01 0504 	add.w	r5, r1, r4
     6f0:	590c      	ldr	r4, [r1, r4]
     6f2:	68ed      	ldr	r5, [r5, #12]
     6f4:	d46c      	bmi.n	7d0 <enableCycle(Globals volatile*)+0x16c>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     6f6:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
		//we need to bring the enable pin high, then wait one micro second, then low. 
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
		uint16_t toParse = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]; //create a pare variable, so we don't destroy the variable in the buffer. Might be unnessisary. 
		for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(toParse&1)); //mask toParse with 1, so we just get the first bit. 
     6fa:	7954      	ldrb	r4, [r2, #5]
			toParse = toParse >> 1; //shift toParse down one, so we can get the next bit to write.
     6fc:	105b      	asrs	r3, r3, #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     6fe:	0124      	lsls	r4, r4, #4
     700:	07de      	lsls	r6, r3, #31
     702:	eb01 0504 	add.w	r5, r1, r4
     706:	590c      	ldr	r4, [r1, r4]
     708:	68ed      	ldr	r5, [r5, #12]
     70a:	d45e      	bmi.n	7ca <enableCycle(Globals volatile*)+0x166>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     70c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
		//we need to bring the enable pin high, then wait one micro second, then low. 
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
		uint16_t toParse = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]; //create a pare variable, so we don't destroy the variable in the buffer. Might be unnessisary. 
		for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(toParse&1)); //mask toParse with 1, so we just get the first bit. 
     710:	7994      	ldrb	r4, [r2, #6]
			toParse = toParse >> 1; //shift toParse down one, so we can get the next bit to write.
     712:	105b      	asrs	r3, r3, #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     714:	0124      	lsls	r4, r4, #4
     716:	07df      	lsls	r7, r3, #31
     718:	eb01 0504 	add.w	r5, r1, r4
     71c:	590c      	ldr	r4, [r1, r4]
     71e:	68ed      	ldr	r5, [r5, #12]
     720:	d450      	bmi.n	7c4 <enableCycle(Globals volatile*)+0x160>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     722:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
		//we need to bring the enable pin high, then wait one micro second, then low. 
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
		uint16_t toParse = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]; //create a pare variable, so we don't destroy the variable in the buffer. Might be unnessisary. 
		for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(toParse&1)); //mask toParse with 1, so we just get the first bit. 
     726:	79d4      	ldrb	r4, [r2, #7]
			toParse = toParse >> 1; //shift toParse down one, so we can get the next bit to write.
     728:	105b      	asrs	r3, r3, #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     72a:	0124      	lsls	r4, r4, #4
     72c:	07de      	lsls	r6, r3, #31
     72e:	eb01 0504 	add.w	r5, r1, r4
     732:	590c      	ldr	r4, [r1, r4]
     734:	68ed      	ldr	r5, [r5, #12]
     736:	d442      	bmi.n	7be <enableCycle(Globals volatile*)+0x15a>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     738:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
		//we need to bring the enable pin high, then wait one micro second, then low. 
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
		uint16_t toParse = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]; //create a pare variable, so we don't destroy the variable in the buffer. Might be unnessisary. 
		for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(toParse&1)); //mask toParse with 1, so we just get the first bit. 
     73c:	7a12      	ldrb	r2, [r2, #8]
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     73e:	f013 0f02 	tst.w	r3, #2
     742:	ea4f 1202 	mov.w	r2, r2, lsl #4
     746:	eb01 0402 	add.w	r4, r1, r2
     74a:	588b      	ldr	r3, [r1, r2]
     74c:	68e2      	ldr	r2, [r4, #12]
     74e:	d02a      	beq.n	7a6 <enableCycle(Globals volatile*)+0x142>
     750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			toParse = toParse >> 1; //shift toParse down one, so we can get the next bit to write.
		}
		OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = 0; //reset buffer to 0, now that we have shifted out the data.
     754:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
     758:	2400      	movs	r4, #0
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     75a:	4921      	ldr	r1, [pc, #132]	; (7e0 <enableCycle(Globals volatile*)+0x17c>)
			} else if (pin == 4) {
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
     75c:	f44f 6780 	mov.w	r7, #1024	; 0x400
     760:	337c      	adds	r3, #124	; 0x7c
     762:	4e20      	ldr	r6, [pc, #128]	; (7e4 <enableCycle(Globals volatile*)+0x180>)

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     764:	4d20      	ldr	r5, [pc, #128]	; (7e8 <enableCycle(Globals volatile*)+0x184>)
     766:	eb00 0343 	add.w	r3, r0, r3, lsl #1
     76a:	4a20      	ldr	r2, [pc, #128]	; (7ec <enableCycle(Globals volatile*)+0x188>)
     76c:	805c      	strh	r4, [r3, #2]
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     76e:	460c      	mov	r4, r1
		OLEDGlobals->oledReadIndex = OLEDGlobals->oledReadIndex + 1; //increment read Index
     770:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
     774:	3301      	adds	r3, #1
     776:	b2db      	uxtb	r3, r3
     778:	f880 32fa 	strb.w	r3, [r0, #762]	; 0x2fa
			} else if (pin == 4) {
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
     77c:	f8c6 7084 	str.w	r7, [r6, #132]	; 0x84
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     780:	6809      	ldr	r1, [r1, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     782:	682b      	ldr	r3, [r5, #0]
     784:	fba2 3203 	umull	r3, r2, r2, r3
     788:	0c92      	lsrs	r2, r2, #18
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     78a:	6823      	ldr	r3, [r4, #0]
     78c:	1a5b      	subs	r3, r3, r1
     78e:	429a      	cmp	r2, r3
     790:	d8fb      	bhi.n	78a <enableCycle(Globals volatile*)+0x126>
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
     792:	4b14      	ldr	r3, [pc, #80]	; (7e4 <enableCycle(Globals volatile*)+0x180>)
     794:	f44f 6280 	mov.w	r2, #1024	; 0x400
		digitalWriteFast(OLEDEnable, HIGH);
		delayMicroseconds(1);
		digitalWriteFast(OLEDEnable, LOW); //This pulse sends our data to the screen
	}

}
     798:	bcf0      	pop	{r4, r5, r6, r7}
     79a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
     79e:	4770      	bx	lr
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     7a0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
     7a4:	e77d      	b.n	6a2 <enableCycle(Globals volatile*)+0x3e>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     7a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
     7aa:	e7d3      	b.n	754 <enableCycle(Globals volatile*)+0xf0>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     7ac:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
     7b0:	e782      	b.n	6b8 <enableCycle(Globals volatile*)+0x54>
     7b2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
     7b6:	e795      	b.n	6e4 <enableCycle(Globals volatile*)+0x80>
     7b8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
     7bc:	e787      	b.n	6ce <enableCycle(Globals volatile*)+0x6a>
     7be:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
     7c2:	e7bb      	b.n	73c <enableCycle(Globals volatile*)+0xd8>
     7c4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
     7c8:	e7ad      	b.n	726 <enableCycle(Globals volatile*)+0xc2>
     7ca:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
     7ce:	e79f      	b.n	710 <enableCycle(Globals volatile*)+0xac>
     7d0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
     7d4:	e791      	b.n	6fa <enableCycle(Globals volatile*)+0x96>
     7d6:	bf00      	nop
     7d8:	2000067c 	.word	0x2000067c
     7dc:	20000294 	.word	0x20000294
     7e0:	e0001004 	.word	0xe0001004
     7e4:	42004000 	.word	0x42004000
     7e8:	200006b0 	.word	0x200006b0
     7ec:	431bde83 	.word	0x431bde83

000007f0 <initPins()>:
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
}

void initPins() 
{
     7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7f2:	4c38      	ldr	r4, [pc, #224]	; (8d4 <initPins()+0xe4>)
     7f4:	f104 0509 	add.w	r5, r4, #9
	for (int i = 0; i < 9; i++)
	{
		pinMode(OLEDPinArray[i], OUTPUT);
     7f8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
     7fc:	2101      	movs	r1, #1
     7fe:	f002 f9a5 	bl	2b4c <pinMode>
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
}

void initPins() 
{
	for (int i = 0; i < 9; i++)
     802:	42ac      	cmp	r4, r5
     804:	d1f8      	bne.n	7f8 <initPins()+0x8>
	{
		pinMode(OLEDPinArray[i], OUTPUT);
	}
	pinMode(OLEDEnable, OUTPUT);
     806:	2101      	movs	r1, #1
     808:	2006      	movs	r0, #6
     80a:	f002 f99f 	bl	2b4c <pinMode>

	for (int j = 0; j < 9; j++) 
	{
		digitalWriteFast(OLEDPinArray[j], LOW);
     80e:	4a32      	ldr	r2, [pc, #200]	; (8d8 <initPins()+0xe8>)
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     810:	4b32      	ldr	r3, [pc, #200]	; (8dc <initPins()+0xec>)
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
     812:	f44f 6580 	mov.w	r5, #1024	; 0x400
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     816:	7816      	ldrb	r6, [r2, #0]

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     818:	21c8      	movs	r1, #200	; 0xc8
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     81a:	7850      	ldrb	r0, [r2, #1]
     81c:	0136      	lsls	r6, r6, #4
     81e:	7894      	ldrb	r4, [r2, #2]
     820:	0100      	lsls	r0, r0, #4
     822:	199f      	adds	r7, r3, r6
     824:	0124      	lsls	r4, r4, #4
     826:	599e      	ldr	r6, [r3, r6]
     828:	eb03 0e00 	add.w	lr, r3, r0
     82c:	f8d7 c00c 	ldr.w	ip, [r7, #12]
     830:	581f      	ldr	r7, [r3, r0]
     832:	78d0      	ldrb	r0, [r2, #3]
     834:	f8c6 c088 	str.w	ip, [r6, #136]	; 0x88
     838:	191e      	adds	r6, r3, r4
     83a:	f8de c00c 	ldr.w	ip, [lr, #12]
     83e:	0100      	lsls	r0, r0, #4
     840:	f853 e004 	ldr.w	lr, [r3, r4]
     844:	7914      	ldrb	r4, [r2, #4]
     846:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
     84a:	181f      	adds	r7, r3, r0
     84c:	f8d6 c00c 	ldr.w	ip, [r6, #12]
     850:	0124      	lsls	r4, r4, #4
     852:	581e      	ldr	r6, [r3, r0]
     854:	7950      	ldrb	r0, [r2, #5]
     856:	f8ce c088 	str.w	ip, [lr, #136]	; 0x88
     85a:	eb03 0e04 	add.w	lr, r3, r4
     85e:	f8d7 c00c 	ldr.w	ip, [r7, #12]
     862:	0100      	lsls	r0, r0, #4
     864:	591f      	ldr	r7, [r3, r4]
     866:	7994      	ldrb	r4, [r2, #6]
     868:	f8c6 c088 	str.w	ip, [r6, #136]	; 0x88
     86c:	181e      	adds	r6, r3, r0
     86e:	f8de c00c 	ldr.w	ip, [lr, #12]
     872:	0124      	lsls	r4, r4, #4
     874:	f853 e000 	ldr.w	lr, [r3, r0]
     878:	79d0      	ldrb	r0, [r2, #7]
     87a:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
     87e:	191f      	adds	r7, r3, r4
     880:	f8d6 c00c 	ldr.w	ip, [r6, #12]
     884:	0100      	lsls	r0, r0, #4
     886:	591e      	ldr	r6, [r3, r4]
     888:	f8ce c088 	str.w	ip, [lr, #136]	; 0x88
     88c:	181c      	adds	r4, r3, r0
     88e:	68ff      	ldr	r7, [r7, #12]
     890:	5818      	ldr	r0, [r3, r0]
     892:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
     896:	68e4      	ldr	r4, [r4, #12]
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
     898:	4f11      	ldr	r7, [pc, #68]	; (8e0 <initPins()+0xf0>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     89a:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
     89e:	7a12      	ldrb	r2, [r2, #8]
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     8a0:	4810      	ldr	r0, [pc, #64]	; (8e4 <initPins()+0xf4>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     8a2:	0112      	lsls	r2, r2, #4

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     8a4:	4e10      	ldr	r6, [pc, #64]	; (8e8 <initPins()+0xf8>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     8a6:	189c      	adds	r4, r3, r2
     8a8:	589b      	ldr	r3, [r3, r2]

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     8aa:	4a10      	ldr	r2, [pc, #64]	; (8ec <initPins()+0xfc>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     8ac:	f8d4 e00c 	ldr.w	lr, [r4, #12]
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     8b0:	4604      	mov	r4, r0
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     8b2:	f8c3 e088 	str.w	lr, [r3, #136]	; 0x88
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
     8b6:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     8ba:	6800      	ldr	r0, [r0, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     8bc:	6833      	ldr	r3, [r6, #0]
     8be:	fba2 3203 	umull	r3, r2, r2, r3
     8c2:	0c92      	lsrs	r2, r2, #18
     8c4:	fb01 f202 	mul.w	r2, r1, r2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     8c8:	6823      	ldr	r3, [r4, #0]
     8ca:	1a1b      	subs	r3, r3, r0
     8cc:	429a      	cmp	r2, r3
     8ce:	d8fb      	bhi.n	8c8 <initPins()+0xd8>
	}
	digitalWriteFast(OLEDEnable, LOW);
	delayMicroseconds(200);

}
     8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8d2:	bf00      	nop
     8d4:	2000067b 	.word	0x2000067b
     8d8:	2000067c 	.word	0x2000067c
     8dc:	20000294 	.word	0x20000294
     8e0:	42004000 	.word	0x42004000
     8e4:	e0001004 	.word	0xe0001004
     8e8:	200006b0 	.word	0x200006b0
     8ec:	431bde83 	.word	0x431bde83

000008f0 <initScreen(Globals volatile*)>:

void initScreen(volatile Globals* OLEDGlobals)
{
     8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8f2:	4604      	mov	r4, r0

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     8f4:	202a      	movs	r0, #42	; 0x2a
     8f6:	2771      	movs	r7, #113	; 0x71
void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d;
	toBuffer = toBuffer | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     8f8:	f44f 75ae 	mov.w	r5, #348	; 0x15c

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     8fc:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     900:	2128      	movs	r1, #40	; 0x28
     902:	2208      	movs	r2, #8
     904:	2679      	movs	r6, #121	; 0x79
     906:	337c      	adds	r3, #124	; 0x7c
     908:	f04f 0ed5 	mov.w	lr, #213	; 0xd5
     90c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     910:	8058      	strh	r0, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     912:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     916:	3301      	adds	r3, #1
     918:	b2db      	uxtb	r3, r3
     91a:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     91e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     922:	337c      	adds	r3, #124	; 0x7c
     924:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     928:	805f      	strh	r7, [r3, #2]
     92a:	2770      	movs	r7, #112	; 0x70
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     92c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     930:	3301      	adds	r3, #1
     932:	b2db      	uxtb	r3, r3
     934:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d;
	toBuffer = toBuffer | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     938:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     93c:	337c      	adds	r3, #124	; 0x7c
     93e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     942:	805d      	strh	r5, [r3, #2]

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     944:	2578      	movs	r5, #120	; 0x78
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d;
	toBuffer = toBuffer | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     946:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     94a:	3301      	adds	r3, #1
     94c:	b2db      	uxtb	r3, r3
     94e:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     952:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     956:	337c      	adds	r3, #124	; 0x7c
     958:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     95c:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     95e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     962:	3301      	adds	r3, #1
     964:	b2db      	uxtb	r3, r3
     966:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     96a:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     96e:	337c      	adds	r3, #124	; 0x7c
     970:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     974:	805a      	strh	r2, [r3, #2]
     976:	2209      	movs	r2, #9
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     978:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     97c:	3301      	adds	r3, #1
     97e:	b2db      	uxtb	r3, r3
     980:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     984:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     988:	337c      	adds	r3, #124	; 0x7c
     98a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     98e:	8058      	strh	r0, [r3, #2]
     990:	2006      	movs	r0, #6
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     992:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     996:	3301      	adds	r3, #1
     998:	b2db      	uxtb	r3, r3
     99a:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     99e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     9a2:	337c      	adds	r3, #124	; 0x7c
     9a4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     9a8:	805e      	strh	r6, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     9aa:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     9ae:	3301      	adds	r3, #1
     9b0:	b2db      	uxtb	r3, r3
     9b2:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     9b6:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     9ba:	337c      	adds	r3, #124	; 0x7c
     9bc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     9c0:	f8a3 e002 	strh.w	lr, [r3, #2]
     9c4:	f04f 0e72 	mov.w	lr, #114	; 0x72
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     9c8:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     9cc:	3301      	adds	r3, #1
     9ce:	b2db      	uxtb	r3, r3
     9d0:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     9d4:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     9d8:	337c      	adds	r3, #124	; 0x7c
     9da:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     9de:	805f      	strh	r7, [r3, #2]
void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d;
	toBuffer = toBuffer | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     9e0:	f44f 7785 	mov.w	r7, #266	; 0x10a
void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     9e4:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     9e8:	3301      	adds	r3, #1
     9ea:	b2db      	uxtb	r3, r3
     9ec:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     9f0:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     9f4:	337c      	adds	r3, #124	; 0x7c
     9f6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     9fa:	805d      	strh	r5, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     9fc:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a00:	3301      	adds	r3, #1
     a02:	b2db      	uxtb	r3, r3
     a04:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     a08:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a0c:	337c      	adds	r3, #124	; 0x7c
     a0e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     a12:	805a      	strh	r2, [r3, #2]
     a14:	22da      	movs	r2, #218	; 0xda
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     a16:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a1a:	3301      	adds	r3, #1
     a1c:	b2db      	uxtb	r3, r3
     a1e:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     a22:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a26:	337c      	adds	r3, #124	; 0x7c
     a28:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     a2c:	8058      	strh	r0, [r3, #2]
     a2e:	2010      	movs	r0, #16
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     a30:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a34:	3301      	adds	r3, #1
     a36:	b2db      	uxtb	r3, r3
     a38:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     a3c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a40:	337c      	adds	r3, #124	; 0x7c
     a42:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     a46:	f8a3 e002 	strh.w	lr, [r3, #2]
     a4a:	f04f 0edc 	mov.w	lr, #220	; 0xdc
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     a4e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a52:	3301      	adds	r3, #1
     a54:	b2db      	uxtb	r3, r3
     a56:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d;
	toBuffer = toBuffer | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     a5a:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a5e:	337c      	adds	r3, #124	; 0x7c
     a60:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     a64:	805f      	strh	r7, [r3, #2]

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     a66:	2700      	movs	r7, #0
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d;
	toBuffer = toBuffer | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     a68:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a6c:	3301      	adds	r3, #1
     a6e:	b2db      	uxtb	r3, r3
     a70:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     a74:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a78:	337c      	adds	r3, #124	; 0x7c
     a7a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     a7e:	805e      	strh	r6, [r3, #2]
     a80:	2681      	movs	r6, #129	; 0x81
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     a82:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a86:	3301      	adds	r3, #1
     a88:	b2db      	uxtb	r3, r3
     a8a:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     a8e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a92:	337c      	adds	r3, #124	; 0x7c
     a94:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     a98:	805a      	strh	r2, [r3, #2]
     a9a:	227f      	movs	r2, #127	; 0x7f
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     a9c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     aa0:	3301      	adds	r3, #1
     aa2:	b2db      	uxtb	r3, r3
     aa4:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     aa8:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     aac:	337c      	adds	r3, #124	; 0x7c
     aae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     ab2:	8058      	strh	r0, [r3, #2]
     ab4:	20d9      	movs	r0, #217	; 0xd9
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     ab6:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     aba:	3301      	adds	r3, #1
     abc:	b2db      	uxtb	r3, r3
     abe:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     ac2:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     ac6:	337c      	adds	r3, #124	; 0x7c
     ac8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     acc:	f8a3 e002 	strh.w	lr, [r3, #2]
     ad0:	f04f 0ef1 	mov.w	lr, #241	; 0xf1
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     ad4:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     ad8:	3301      	adds	r3, #1
     ada:	b2db      	uxtb	r3, r3
     adc:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     ae0:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     ae4:	337c      	adds	r3, #124	; 0x7c
     ae6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     aea:	805f      	strh	r7, [r3, #2]
     aec:	27db      	movs	r7, #219	; 0xdb
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     aee:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     af2:	3301      	adds	r3, #1
     af4:	b2db      	uxtb	r3, r3
     af6:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     afa:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     afe:	337c      	adds	r3, #124	; 0x7c
     b00:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     b04:	805e      	strh	r6, [r3, #2]
     b06:	2640      	movs	r6, #64	; 0x40
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     b08:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b0c:	3301      	adds	r3, #1
     b0e:	b2db      	uxtb	r3, r3
     b10:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     b14:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b18:	337c      	adds	r3, #124	; 0x7c
     b1a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     b1e:	805a      	strh	r2, [r3, #2]
     b20:	2201      	movs	r2, #1
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     b22:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b26:	4413      	add	r3, r2
     b28:	b2db      	uxtb	r3, r3
     b2a:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     b2e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b32:	337c      	adds	r3, #124	; 0x7c
     b34:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     b38:	8058      	strh	r0, [r3, #2]
	command(0x40, OLEDGlobals);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
	command(0x78, OLEDGlobals);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
	command((0x20 | rows), OLEDGlobals); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
	command(0x01, OLEDGlobals);        // Clear display
	//_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	delay(2);
     b3a:	2002      	movs	r0, #2
void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     b3c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b40:	4413      	add	r3, r2
     b42:	b2db      	uxtb	r3, r3
     b44:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     b48:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b4c:	337c      	adds	r3, #124	; 0x7c
     b4e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     b52:	f8a3 e002 	strh.w	lr, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     b56:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b5a:	4413      	add	r3, r2
     b5c:	b2db      	uxtb	r3, r3
     b5e:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     b62:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b66:	337c      	adds	r3, #124	; 0x7c
     b68:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     b6c:	805f      	strh	r7, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     b6e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b72:	4413      	add	r3, r2
     b74:	b2db      	uxtb	r3, r3
     b76:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     b7a:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b7e:	337c      	adds	r3, #124	; 0x7c
     b80:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     b84:	805e      	strh	r6, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     b86:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b8a:	4413      	add	r3, r2
     b8c:	b2db      	uxtb	r3, r3
     b8e:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     b92:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b96:	337c      	adds	r3, #124	; 0x7c
     b98:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     b9c:	805d      	strh	r5, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     b9e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     ba2:	4413      	add	r3, r2
     ba4:	b2db      	uxtb	r3, r3
     ba6:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     baa:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     bae:	337c      	adds	r3, #124	; 0x7c
     bb0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     bb4:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     bb6:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     bba:	4413      	add	r3, r2
     bbc:	b2db      	uxtb	r3, r3
     bbe:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     bc2:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     bc6:	337c      	adds	r3, #124	; 0x7c
     bc8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     bcc:	805a      	strh	r2, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     bce:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     bd2:	4413      	add	r3, r2
     bd4:	b2db      	uxtb	r3, r3
     bd6:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
	command(0x40, OLEDGlobals);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
	command(0x78, OLEDGlobals);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
	command((0x20 | rows), OLEDGlobals); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
	command(0x01, OLEDGlobals);        // Clear display
	//_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	delay(2);
     bda:	f001 ff51 	bl	2a80 <delay>

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     bde:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     be2:	2180      	movs	r1, #128	; 0x80
     be4:	220c      	movs	r2, #12
     be6:	337c      	adds	r3, #124	; 0x7c
	//_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	delay(2);
	command(0x80, OLEDGlobals);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
	command(0x0C, OLEDGlobals);        // Display ON/OFF control: display ON, cursor off, blink off
	//_delay_ms(250);           // Waits 250 ms for stabilization purpose after display on
	delay(250);
     be8:	20fa      	movs	r0, #250	; 0xfa

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     bea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     bee:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     bf0:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     bf4:	3301      	adds	r3, #1
     bf6:	b2db      	uxtb	r3, r3
     bf8:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     bfc:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     c00:	337c      	adds	r3, #124	; 0x7c
     c02:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     c06:	805a      	strh	r2, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     c08:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     c0c:	3301      	adds	r3, #1
     c0e:	b2db      	uxtb	r3, r3
     c10:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
	command(0x80, OLEDGlobals);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
	command(0x0C, OLEDGlobals);        // Display ON/OFF control: display ON, cursor off, blink off
	//_delay_ms(250);           // Waits 250 ms for stabilization purpose after display on
	delay(250);

}
     c14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	//_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	delay(2);
	command(0x80, OLEDGlobals);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
	command(0x0C, OLEDGlobals);        // Display ON/OFF control: display ON, cursor off, blink off
	//_delay_ms(250);           // Waits 250 ms for stabilization purpose after display on
	delay(250);
     c18:	f001 bf32 	b.w	2a80 <delay>

00000c1c <outputS(char volatile*, int, Globals volatile*)>:

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     c1c:	f892 32fb 	ldrb.w	r3, [r2, #763]	; 0x2fb
void outputS(volatile char* lineIn, int row, volatile Globals* OLEDGlobals)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r], OLEDGlobals);
     c20:	b2c9      	uxtb	r1, r1
		data(lineIn[c],OLEDGlobals);
	}
}
//overloaded method with volatile keyword. 
void outputS(volatile char* lineIn, int row, volatile Globals* OLEDGlobals)
{
     c22:	b410      	push	{r4}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     c24:	337c      	adds	r3, #124	; 0x7c
void outputS(volatile char* lineIn, int row, volatile Globals* OLEDGlobals)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r], OLEDGlobals);
     c26:	4c12      	ldr	r4, [pc, #72]	; (c70 <outputS(char volatile*, int, Globals volatile*)+0x54>)

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     c28:	eb02 0343 	add.w	r3, r2, r3, lsl #1
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = c; // since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
     c2c:	5c61      	ldrb	r1, [r4, r1]
     c2e:	f100 0414 	add.w	r4, r0, #20
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     c32:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     c34:	f892 32fb 	ldrb.w	r3, [r2, #763]	; 0x2fb
     c38:	3301      	adds	r3, #1
     c3a:	b2db      	uxtb	r3, r3
     c3c:	f882 32fb 	strb.w	r3, [r2, #763]	; 0x2fb

	command(new_line[r], OLEDGlobals);
	//20, because our display is 20x4.
	for (c = 0; c < 20; c++)
	{
		data(lineIn[c], OLEDGlobals);
     c40:	f810 1b01 	ldrb.w	r1, [r0], #1
void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d;
	toBuffer = toBuffer | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     c44:	f892 32fb 	ldrb.w	r3, [r2, #763]	; 0x2fb

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d;
	toBuffer = toBuffer | (1 << 8); //this will be our "HIGH" message to the D/C pin
     c48:	f441 7180 	orr.w	r1, r1, #256	; 0x100
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r], OLEDGlobals);
	//20, because our display is 20x4.
	for (c = 0; c < 20; c++)
     c4c:	42a0      	cmp	r0, r4
void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d;
	toBuffer = toBuffer | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     c4e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
     c52:	eb02 0343 	add.w	r3, r2, r3, lsl #1
     c56:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     c58:	f892 32fb 	ldrb.w	r3, [r2, #763]	; 0x2fb
     c5c:	f103 0301 	add.w	r3, r3, #1
     c60:	b2db      	uxtb	r3, r3
     c62:	f882 32fb 	strb.w	r3, [r2, #763]	; 0x2fb
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r], OLEDGlobals);
	//20, because our display is 20x4.
	for (c = 0; c < 20; c++)
     c66:	d1eb      	bne.n	c40 <outputS(char volatile*, int, Globals volatile*)+0x24>
	{
		data(lineIn[c], OLEDGlobals);
	}
}
     c68:	f85d 4b04 	ldr.w	r4, [sp], #4
     c6c:	4770      	bx	lr
     c6e:	bf00      	nop
     c70:	20000678 	.word	0x20000678

00000c74 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>:
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch (numCharacters)
     c74:	3a01      	subs	r2, #1


}
//overloaded function with volatile keyword. 
void numPrinter(volatile char* charArray, uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
     c76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch (numCharacters)
     c7a:	2a04      	cmp	r2, #4
     c7c:	d848      	bhi.n	d10 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x9c>
     c7e:	e8df f002 	tbb	[pc, r2]
     c82:	887b      	.short	0x887b
     c84:	4999      	.short	0x4999
     c86:	03          	.byte	0x03
     c87:	00          	.byte	0x00
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     c88:	f8df e174 	ldr.w	lr, [pc, #372]	; e00 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x18c>
     c8c:	f04f 0864 	mov.w	r8, #100	; 0x64
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     c90:	4e59      	ldr	r6, [pc, #356]	; (df8 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x184>)
     c92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     c96:	fbae 4703 	umull	r4, r7, lr, r3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     c9a:	4d58      	ldr	r5, [pc, #352]	; (dfc <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x188>)
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     c9c:	fba6 c403 	umull	ip, r4, r6, r3
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     ca0:	fba5 c503 	umull	ip, r5, r5, r3
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     ca4:	097f      	lsrs	r7, r7, #5
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     ca6:	f8df c15c 	ldr.w	ip, [pc, #348]	; e04 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     caa:	09a4      	lsrs	r4, r4, #6
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     cac:	fb08 3717 	mls	r7, r8, r7, r3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     cb0:	0b6d      	lsrs	r5, r5, #13
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     cb2:	fbac 9803 	umull	r9, r8, ip, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     cb6:	fb02 3214 	mls	r2, r2, r4, r3
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     cba:	f242 7410 	movw	r4, #10000	; 0x2710
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     cbe:	ea4f 08d8 	mov.w	r8, r8, lsr #3
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     cc2:	fb04 3415 	mls	r4, r4, r5, r3
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     cc6:	b2bf      	uxth	r7, r7
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     cc8:	b292      	uxth	r2, r2
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
     cca:	3530      	adds	r5, #48	; 0x30
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     ccc:	eb08 0888 	add.w	r8, r8, r8, lsl #2
		tensPlace = ((inputNumber % 100) / 10) + 48;
     cd0:	fbac c707 	umull	ip, r7, ip, r7
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     cd4:	fbae e202 	umull	lr, r2, lr, r2
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     cd8:	b2a4      	uxth	r4, r4
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     cda:	eba3 0348 	sub.w	r3, r3, r8, lsl #1
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
		charArray[(startingPos + 3)] = tensPlace;
     cde:	f101 0c03 	add.w	ip, r1, #3

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     ce2:	fba6 6404 	umull	r6, r4, r6, r4
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     ce6:	0952      	lsrs	r2, r2, #5
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     ce8:	08ff      	lsrs	r7, r7, #3
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     cea:	3330      	adds	r3, #48	; 0x30
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
     cec:	1d0e      	adds	r6, r1, #4
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     cee:	3230      	adds	r2, #48	; 0x30
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     cf0:	b2db      	uxtb	r3, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
     cf2:	3730      	adds	r7, #48	; 0x30
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     cf4:	09a4      	lsrs	r4, r4, #6
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
		charArray[(startingPos + 3)] = tensPlace;
		charArray[(startingPos + 2)] = hunderedsPlace;
     cf6:	f101 0e02 	add.w	lr, r1, #2
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
     cfa:	5583      	strb	r3, [r0, r6]
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     cfc:	b2d2      	uxtb	r2, r2
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     cfe:	b2ff      	uxtb	r7, r7
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     d00:	3430      	adds	r4, #48	; 0x30
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
		charArray[(startingPos + 3)] = tensPlace;
		charArray[(startingPos + 2)] = hunderedsPlace;
		charArray[(startingPos + 1)] = thousandsPlace;
     d02:	1c4b      	adds	r3, r1, #1
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
		charArray[(startingPos + 3)] = tensPlace;
     d04:	f800 700c 	strb.w	r7, [r0, ip]
		charArray[(startingPos + 2)] = hunderedsPlace;
     d08:	f800 200e 	strb.w	r2, [r0, lr]
		charArray[(startingPos + 1)] = thousandsPlace;
     d0c:	54c4      	strb	r4, [r0, r3]
		charArray[startingPos] = tenThousandsPlace;
     d0e:	5445      	strb	r5, [r0, r1]
     d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     d14:	4f3a      	ldr	r7, [pc, #232]	; (e00 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x18c>)
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     d16:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
     d1a:	4d37      	ldr	r5, [pc, #220]	; (df8 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x184>)
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     d1c:	2264      	movs	r2, #100	; 0x64
     d1e:	fba7 e403 	umull	lr, r4, r7, r3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     d22:	fba5 e503 	umull	lr, r5, r5, r3
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     d26:	f8df e0dc 	ldr.w	lr, [pc, #220]	; e04 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>
		tensPlace = ((inputNumber % 100) / 10) + 48;
     d2a:	0964      	lsrs	r4, r4, #5
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     d2c:	09ad      	lsrs	r5, r5, #6
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     d2e:	fb02 3214 	mls	r2, r2, r4, r3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     d32:	fb06 3415 	mls	r4, r6, r5, r3
		thousandsPlace = (inputNumber / 1000) + 48;
     d36:	3530      	adds	r5, #48	; 0x30
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     d38:	fbae c603 	umull	ip, r6, lr, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
     d3c:	b292      	uxth	r2, r2
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     d3e:	b2a4      	uxth	r4, r4
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     d40:	08f6      	lsrs	r6, r6, #3
		tensPlace = ((inputNumber % 100) / 10) + 48;
     d42:	fbae e202 	umull	lr, r2, lr, r2
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     d46:	fba7 7404 	umull	r7, r4, r7, r4
		thousandsPlace = (inputNumber / 1000) + 48;
		charArray[(startingPos + 3)] = onesPlace;
		charArray[(startingPos + 2)] = tensPlace;
     d4a:	f101 0e02 	add.w	lr, r1, #2
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     d4e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = (inputNumber / 1000) + 48;
		charArray[(startingPos + 3)] = onesPlace;
     d52:	1ccf      	adds	r7, r1, #3
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     d54:	0964      	lsrs	r4, r4, #5
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     d56:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = (inputNumber / 1000) + 48;
		charArray[(startingPos + 3)] = onesPlace;
		charArray[(startingPos + 2)] = tensPlace;
		charArray[(startingPos + 1)] = hunderedsPlace;
     d5a:	1c4e      	adds	r6, r1, #1
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     d5c:	08d2      	lsrs	r2, r2, #3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     d5e:	3430      	adds	r4, #48	; 0x30
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     d60:	3330      	adds	r3, #48	; 0x30
		tensPlace = ((inputNumber % 100) / 10) + 48;
     d62:	3230      	adds	r2, #48	; 0x30
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     d64:	b2e4      	uxtb	r4, r4
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     d66:	b2db      	uxtb	r3, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
     d68:	b2d2      	uxtb	r2, r2
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = (inputNumber / 1000) + 48;
		charArray[(startingPos + 3)] = onesPlace;
     d6a:	55c3      	strb	r3, [r0, r7]
		charArray[(startingPos + 2)] = tensPlace;
     d6c:	f800 200e 	strb.w	r2, [r0, lr]
		charArray[(startingPos + 1)] = hunderedsPlace;
     d70:	5584      	strb	r4, [r0, r6]
		charArray[startingPos] = thousandsPlace;
     d72:	5445      	strb	r5, [r0, r1]
		break;
     d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	{
	case 0:
		break;

	case 1:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     d78:	4a22      	ldr	r2, [pc, #136]	; (e04 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>)
     d7a:	fba2 4203 	umull	r4, r2, r2, r3
     d7e:	08d2      	lsrs	r2, r2, #3
     d80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     d84:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
     d88:	3330      	adds	r3, #48	; 0x30
     d8a:	b2db      	uxtb	r3, r3
		charArray[startingPos] = onesPlace;
     d8c:	5443      	strb	r3, [r0, r1]
		break;
     d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	case 2:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     d92:	4a1c      	ldr	r2, [pc, #112]	; (e04 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>)
		tensPlace = (inputNumber / 10) + 48;
		charArray[(startingPos + 1)] = onesPlace;
     d94:	1c4d      	adds	r5, r1, #1
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
		break;

	case 2:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     d96:	fba2 4203 	umull	r4, r2, r2, r3
     d9a:	08d2      	lsrs	r2, r2, #3
     d9c:	eb02 0482 	add.w	r4, r2, r2, lsl #2
		tensPlace = (inputNumber / 10) + 48;
     da0:	3230      	adds	r2, #48	; 0x30
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
		break;

	case 2:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     da2:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
		tensPlace = (inputNumber / 10) + 48;
     da6:	b2d2      	uxtb	r2, r2
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
		break;

	case 2:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     da8:	3330      	adds	r3, #48	; 0x30
     daa:	b2db      	uxtb	r3, r3
		tensPlace = (inputNumber / 10) + 48;
		charArray[(startingPos + 1)] = onesPlace;
     dac:	5543      	strb	r3, [r0, r5]
		charArray[startingPos] = tensPlace;
     dae:	5442      	strb	r2, [r0, r1]
		break;
     db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     db4:	4f12      	ldr	r7, [pc, #72]	; (e00 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x18c>)
     db6:	2264      	movs	r2, #100	; 0x64
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     db8:	f8df e048 	ldr.w	lr, [pc, #72]	; e04 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = (inputNumber / 100) + 48;
		charArray[(startingPos + 2)] = onesPlace;
     dbc:	1c8e      	adds	r6, r1, #2
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     dbe:	fba7 4703 	umull	r4, r7, r7, r3
		hunderedsPlace = (inputNumber / 100) + 48;
		charArray[(startingPos + 2)] = onesPlace;
		charArray[(startingPos + 1)] = tensPlace;
     dc2:	1c4d      	adds	r5, r1, #1
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     dc4:	fbae c403 	umull	ip, r4, lr, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
     dc8:	097f      	lsrs	r7, r7, #5
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     dca:	08e4      	lsrs	r4, r4, #3
		tensPlace = ((inputNumber % 100) / 10) + 48;
     dcc:	fb02 3217 	mls	r2, r2, r7, r3
		hunderedsPlace = (inputNumber / 100) + 48;
     dd0:	3730      	adds	r7, #48	; 0x30
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     dd2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
		tensPlace = ((inputNumber % 100) / 10) + 48;
     dd6:	b292      	uxth	r2, r2
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     dd8:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
		tensPlace = ((inputNumber % 100) / 10) + 48;
     ddc:	fbae e202 	umull	lr, r2, lr, r2
		hunderedsPlace = (inputNumber / 100) + 48;
     de0:	b2ff      	uxtb	r7, r7
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     de2:	3330      	adds	r3, #48	; 0x30
		tensPlace = ((inputNumber % 100) / 10) + 48;
     de4:	08d2      	lsrs	r2, r2, #3
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     de6:	b2db      	uxtb	r3, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
     de8:	3230      	adds	r2, #48	; 0x30
		hunderedsPlace = (inputNumber / 100) + 48;
		charArray[(startingPos + 2)] = onesPlace;
     dea:	5583      	strb	r3, [r0, r6]
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     dec:	b2d2      	uxtb	r2, r2
		hunderedsPlace = (inputNumber / 100) + 48;
		charArray[(startingPos + 2)] = onesPlace;
		charArray[(startingPos + 1)] = tensPlace;
     dee:	5542      	strb	r2, [r0, r5]
		charArray[startingPos] = hunderedsPlace;
     df0:	5447      	strb	r7, [r0, r1]
		break;
     df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     df6:	bf00      	nop
     df8:	10624dd3 	.word	0x10624dd3
     dfc:	d1b71759 	.word	0xd1b71759
     e00:	51eb851f 	.word	0x51eb851f
     e04:	cccccccd 	.word	0xcccccccd

00000e08 <TeensyTimerTool::BaseTimer::BaseTimer(TeensyTimerTool::ITimerChannel* (*)(), bool)>:
#include "types.h"

namespace TeensyTimerTool
{

    BaseTimer::BaseTimer(TimerGenerator* generator, bool periodic)
     e08:	b410      	push	{r4}
        : timerGenerator(generator)
     e0a:	2400      	movs	r4, #0
     e0c:	6001      	str	r1, [r0, #0]
    {
        this->timerGenerator = generator;
        this->timerChannel = nullptr;
        this->isPeriodic = periodic;
     e0e:	7202      	strb	r2, [r0, #8]

namespace TeensyTimerTool
{

    BaseTimer::BaseTimer(TimerGenerator* generator, bool periodic)
        : timerGenerator(generator)
     e10:	60c4      	str	r4, [r0, #12]
    {
        this->timerGenerator = generator;
        this->timerChannel = nullptr;
     e12:	6044      	str	r4, [r0, #4]
        this->isPeriodic = periodic;
    }
     e14:	f85d 4b04 	ldr.w	r4, [sp], #4
     e18:	4770      	bx	lr
     e1a:	bf00      	nop

00000e1c <TeensyTimerTool::ITimerChannel::getPeriod()>:

        virtual float getMaxPeriod() const = 0;
        virtual errorCode setPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setCurrentPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setNextPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual uint32_t getPeriod() { return 0; }
     e1c:	2000      	movs	r0, #0
     e1e:	4770      	bx	lr

00000e20 <TeensyTimerTool::TMRChannel::~TMRChannel()>:
        setPrescaler(TMR_DEFAULT_PSC);
    }

    TMRChannel::~TMRChannel()
    {
    }
     e20:	4770      	bx	lr
     e22:	bf00      	nop

00000e24 <TeensyTimerTool::TMRChannel::start()>:

    errorCode TMRChannel::start()
    {
        regs->CNTR = 0x0000;
     e24:	6882      	ldr	r2, [r0, #8]
     e26:	2000      	movs	r0, #0
     e28:	8150      	strh	r0, [r2, #10]
        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
     e2a:	8a93      	ldrh	r3, [r2, #20]
     e2c:	f023 0310 	bic.w	r3, r3, #16
     e30:	041b      	lsls	r3, r3, #16
     e32:	0c1b      	lsrs	r3, r3, #16
     e34:	8293      	strh	r3, [r2, #20]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;
     e36:	8a93      	ldrh	r3, [r2, #20]
     e38:	b29b      	uxth	r3, r3
     e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     e3e:	8293      	strh	r3, [r2, #20]
        return errorCode::OK;
    }
     e40:	4770      	bx	lr
     e42:	bf00      	nop

00000e44 <TeensyTimerTool::TMRChannel::stop()>:

    errorCode TMRChannel::stop()
    {
        regs->CSCTRL &= ~TMR_CSCTRL_TCF1EN;
     e44:	6882      	ldr	r2, [r0, #8]
        return errorCode::OK;
    }
     e46:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode TMRChannel::stop()
    {
        regs->CSCTRL &= ~TMR_CSCTRL_TCF1EN;
     e48:	8a93      	ldrh	r3, [r2, #20]
     e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
     e4e:	041b      	lsls	r3, r3, #16
     e50:	0c1b      	lsrs	r3, r3, #16
     e52:	8293      	strh	r3, [r2, #20]
        return errorCode::OK;
    }
     e54:	4770      	bx	lr
     e56:	bf00      	nop

00000e58 <std::function<void ()>::~function()>:

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     e58:	6883      	ldr	r3, [r0, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
     e5a:	b510      	push	{r4, lr}
     e5c:	4604      	mov	r4, r0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     e5e:	b113      	cbz	r3, e66 <std::function<void ()>::~function()+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     e60:	2203      	movs	r2, #3
     e62:	4601      	mov	r1, r0
     e64:	4798      	blx	r3
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
     e66:	4620      	mov	r0, r4
     e68:	bd10      	pop	{r4, pc}
     e6a:	bf00      	nop

00000e6c <TeensyTimerTool::TMRChannel::trigger(float)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
     e6c:	eddf 7a1b 	vldr	s15, [pc, #108]	; edc <TeensyTimerTool::TMRChannel::trigger(float)+0x70>
     e70:	edd0 6a04 	vldr	s13, [r0, #16]
     e74:	ee20 0a27 	vmul.f32	s0, s0, s15
    // }

    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;
     e78:	ed9f 7a19 	vldr	s14, [pc, #100]	; ee0 <TeensyTimerTool::TMRChannel::trigger(float)+0x74>
    // {
    //     return trigger((float)tcnt);
    // }

    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
     e7c:	b430      	push	{r4, r5}
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
     e7e:	eec0 7a26 	vdiv.f32	s15, s0, s13
    // {
    //     return trigger((float)tcnt);
    // }

    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
     e82:	b082      	sub	sp, #8
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;
     e84:	eef4 7ac7 	vcmpe.f32	s15, s14
     e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e8c:	dc23      	bgt.n	ed6 <TeensyTimerTool::TMRChannel::trigger(float)+0x6a>
     e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     e92:	edcd 7a01 	vstr	s15, [sp, #4]
     e96:	f8bd 4004 	ldrh.w	r4, [sp, #4]

        regs->CTRL = 0x0000;
     e9a:	6883      	ldr	r3, [r0, #8]
     e9c:	2200      	movs	r2, #0
        regs->CNTR = 0x0000;

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
     e9e:	6941      	ldr	r1, [r0, #20]
     ea0:	f242 0560 	movw	r5, #8288	; 0x2060
    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;

        regs->CTRL = 0x0000;
     ea4:	819a      	strh	r2, [r3, #12]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;

        return errorCode::OK;
    }
     ea6:	4610      	mov	r0, r2
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;

        regs->CTRL = 0x0000;
        regs->LOAD = 0x0000;
     ea8:	80da      	strh	r2, [r3, #6]
        regs->CNTR = 0x0000;

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
     eaa:	0249      	lsls	r1, r1, #9
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;

        regs->CTRL = 0x0000;
        regs->LOAD = 0x0000;
        regs->COMP1 = reload;
     eac:	801c      	strh	r4, [r3, #0]
        regs->CMPLD1 = reload;
     eae:	821c      	strh	r4, [r3, #16]
        regs->CNTR = 0x0000;

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
     eb0:	f401 51f0 	and.w	r1, r1, #7680	; 0x1e00

        regs->CTRL = 0x0000;
        regs->LOAD = 0x0000;
        regs->COMP1 = reload;
        regs->CMPLD1 = reload;
        regs->CNTR = 0x0000;
     eb4:	815a      	strh	r2, [r3, #10]

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
     eb6:	8a9a      	ldrh	r2, [r3, #20]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
     eb8:	430d      	orrs	r5, r1
        regs->LOAD = 0x0000;
        regs->COMP1 = reload;
        regs->CMPLD1 = reload;
        regs->CNTR = 0x0000;

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
     eba:	f022 0210 	bic.w	r2, r2, #16
     ebe:	0412      	lsls	r2, r2, #16
     ec0:	0c12      	lsrs	r2, r2, #16
     ec2:	829a      	strh	r2, [r3, #20]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;
     ec4:	8a9a      	ldrh	r2, [r3, #20]
     ec6:	b292      	uxth	r2, r2
     ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     ecc:	829a      	strh	r2, [r3, #20]

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
     ece:	819d      	strh	r5, [r3, #12]

        return errorCode::OK;
    }
     ed0:	b002      	add	sp, #8
     ed2:	bc30      	pop	{r4, r5}
     ed4:	4770      	bx	lr
    // }

    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;
     ed6:	f64f 74ff 	movw	r4, #65535	; 0xffff
     eda:	e7de      	b.n	e9a <TeensyTimerTool::TMRChannel::trigger(float)+0x2e>
     edc:	43160000 	.word	0x43160000
     ee0:	477fff00 	.word	0x477fff00

00000ee4 <TeensyTimerTool::TMRChannel::getMaxPeriod() const>:
        pscBits = 0b1000 | (psc & 0b0111);
    }

    float TMRChannel::getMaxPeriod() const
    {
        return pscValue / 150'000'000.0f * 0xFFFE;
     ee4:	edd0 6a04 	vldr	s13, [r0, #16]
     ee8:	ed9f 7a04 	vldr	s14, [pc, #16]	; efc <TeensyTimerTool::TMRChannel::getMaxPeriod() const+0x18>
     eec:	eddf 7a04 	vldr	s15, [pc, #16]	; f00 <TeensyTimerTool::TMRChannel::getMaxPeriod() const+0x1c>
     ef0:	ee86 0a87 	vdiv.f32	s0, s13, s14
    }
     ef4:	ee20 0a27 	vmul.f32	s0, s0, s15
     ef8:	4770      	bx	lr
     efa:	bf00      	nop
     efc:	4d0f0d18 	.word	0x4d0f0d18
     f00:	477ffe00 	.word	0x477ffe00

00000f04 <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
     f04:	ee07 1a90 	vmov	s15, r1
     f08:	ed9f 7a14 	vldr	s14, [pc, #80]	; f5c <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)+0x58>
     f0c:	ed90 6a04 	vldr	s12, [r0, #16]
     f10:	eef8 7a67 	vcvt.f32.u32	s15, s15

    errorCode TMRChannel::setCurrentPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
     f14:	eddf 6a12 	vldr	s13, [pc, #72]	; f60 <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)+0x5c>
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
     f18:	ee67 7a87 	vmul.f32	s15, s15, s14
     f1c:	ee87 7a86 	vdiv.f32	s14, s15, s12

    errorCode TMRChannel::setCurrentPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
     f20:	eeb4 7ae6 	vcmpe.f32	s14, s13
     f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f28:	d814      	bhi.n	f54 <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)+0x50>
        {
            return _setCurrentPeriod(t);
     f2a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
            return errorCode::OK;
        }
    }

    errorCode TMRChannel::setCurrentPeriod(uint32_t us)
    {
     f2e:	b082      	sub	sp, #8
     f30:	6881      	ldr	r1, [r0, #8]
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
        {
            return _setCurrentPeriod(t);
     f32:	edcd 7a01 	vstr	s15, [sp, #4]
     f36:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    }

    errorCode TMRChannel::_setCurrentPeriod(const uint16_t cnt)
    {

        regs->COMP1 = cnt;
     f3a:	800b      	strh	r3, [r1, #0]

        //Do we need to wait some cycle for IP bus to update here / cache flush?
        //asm volatile("dsb");

        if (regs->CNTR > cnt)
     f3c:	894a      	ldrh	r2, [r1, #10]
     f3e:	b292      	uxth	r2, r2
     f40:	4293      	cmp	r3, r2
     f42:	d302      	bcc.n	f4a <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)+0x46>
            return errorCode::triggeredLate;
        }

        else
        {
            return errorCode::OK;
     f44:	2000      	movs	r0, #0
            return _setCurrentPeriod(t);
        } else
        {
            return errorCode::periodOverflow;
        }
    }
     f46:	b002      	add	sp, #8
     f48:	4770      	bx	lr

        if (regs->CNTR > cnt)
        {
            //if counter alrready went over setted value force a triggering
            regs->CNTR = cnt;
            return errorCode::triggeredLate;
     f4a:	f06f 0065 	mvn.w	r0, #101	; 0x65
        //asm volatile("dsb");

        if (regs->CNTR > cnt)
        {
            //if counter alrready went over setted value force a triggering
            regs->CNTR = cnt;
     f4e:	814b      	strh	r3, [r1, #10]
            return _setCurrentPeriod(t);
        } else
        {
            return errorCode::periodOverflow;
        }
    }
     f50:	b002      	add	sp, #8
     f52:	4770      	bx	lr
        if (t <= 0xFFFF)
        {
            return _setCurrentPeriod(t);
        } else
        {
            return errorCode::periodOverflow;
     f54:	f06f 0063 	mvn.w	r0, #99	; 0x63
        }
    }
     f58:	4770      	bx	lr
     f5a:	bf00      	nop
     f5c:	43160000 	.word	0x43160000
     f60:	477fff00 	.word	0x477fff00

00000f64 <TeensyTimerTool::TMRChannel::setNextPeriod(unsigned long)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
     f64:	ee07 1a90 	vmov	s15, r1
     f68:	ed9f 7a0f 	vldr	s14, [pc, #60]	; fa8 <TeensyTimerTool::TMRChannel::setNextPeriod(unsigned long)+0x44>
     f6c:	ed90 6a04 	vldr	s12, [r0, #16]
     f70:	eef8 7a67 	vcvt.f32.u32	s15, s15

    errorCode TMRChannel::setNextPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
     f74:	eddf 6a0d 	vldr	s13, [pc, #52]	; fac <TeensyTimerTool::TMRChannel::setNextPeriod(unsigned long)+0x48>
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
     f78:	ee67 7a87 	vmul.f32	s15, s15, s14
     f7c:	ee87 7a86 	vdiv.f32	s14, s15, s12

    errorCode TMRChannel::setNextPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
     f80:	eeb4 7ae6 	vcmpe.f32	s14, s13
     f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f88:	d80b      	bhi.n	fa2 <TeensyTimerTool::TMRChannel::setNextPeriod(unsigned long)+0x3e>
        {
            _setNextPeriod(t);
     f8a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
            return errorCode::periodOverflow;
        }
    }

    errorCode TMRChannel::setNextPeriod(uint32_t us)
    {
     f8e:	b082      	sub	sp, #8
     f90:	6882      	ldr	r2, [r0, #8]
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
        {
            _setNextPeriod(t);
            return errorCode::OK;
     f92:	2000      	movs	r0, #0
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
        {
            _setNextPeriod(t);
     f94:	edcd 7a01 	vstr	s15, [sp, #4]
     f98:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        return pscValue / 150'000'000.0f * 0xFFFE;
    }

    void TMRChannel::_setNextPeriod(const uint16_t cnt)
    {
        regs->CMPLD1 = cnt;
     f9c:	8213      	strh	r3, [r2, #16]
            return errorCode::OK;
        } else
        {
            return errorCode::periodOverflow;
        }
    }
     f9e:	b002      	add	sp, #8
     fa0:	4770      	bx	lr
        {
            _setNextPeriod(t);
            return errorCode::OK;
        } else
        {
            return errorCode::periodOverflow;
     fa2:	f06f 0063 	mvn.w	r0, #99	; 0x63
     fa6:	4770      	bx	lr
     fa8:	43160000 	.word	0x43160000
     fac:	477fff00 	.word	0x477fff00

00000fb0 <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
     fb0:	ee07 1a90 	vmov	s15, r1
     fb4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 1008 <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)+0x58>
     fb8:	ed90 6a04 	vldr	s12, [r0, #16]
     fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15

    errorCode TMRChannel::setPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
     fc0:	eddf 6a12 	vldr	s13, [pc, #72]	; 100c <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)+0x5c>
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
     fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
     fc8:	ee87 7a86 	vdiv.f32	s14, s15, s12

    errorCode TMRChannel::setPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
     fcc:	eeb4 7ae6 	vcmpe.f32	s14, s13
     fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fd4:	d815      	bhi.n	1002 <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)+0x52>
        {
            _setNextPeriod(t);
     fd6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
            return errorCode::periodOverflow;
        }
    }

    errorCode TMRChannel::setPeriod(uint32_t us)
    {
     fda:	b082      	sub	sp, #8
     fdc:	6882      	ldr	r2, [r0, #8]
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
        {
            _setNextPeriod(t);
     fde:	edcd 7a01 	vstr	s15, [sp, #4]
     fe2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        return pscValue / 150'000'000.0f * 0xFFFE;
    }

    void TMRChannel::_setNextPeriod(const uint16_t cnt)
    {
        regs->CMPLD1 = cnt;
     fe6:	8213      	strh	r3, [r2, #16]
    }

    errorCode TMRChannel::_setCurrentPeriod(const uint16_t cnt)
    {

        regs->COMP1 = cnt;
     fe8:	8013      	strh	r3, [r2, #0]

        //Do we need to wait some cycle for IP bus to update here / cache flush?
        //asm volatile("dsb");

        if (regs->CNTR > cnt)
     fea:	8951      	ldrh	r1, [r2, #10]
     fec:	b289      	uxth	r1, r1
     fee:	428b      	cmp	r3, r1
     ff0:	d302      	bcc.n	ff8 <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)+0x48>
            return errorCode::triggeredLate;
        }

        else
        {
            return errorCode::OK;
     ff2:	2000      	movs	r0, #0

        } else
        {
            return errorCode::periodOverflow;
        }
    }
     ff4:	b002      	add	sp, #8
     ff6:	4770      	bx	lr

        if (regs->CNTR > cnt)
        {
            //if counter alrready went over setted value force a triggering
            regs->CNTR = cnt;
            return errorCode::triggeredLate;
     ff8:	f06f 0065 	mvn.w	r0, #101	; 0x65
        //asm volatile("dsb");

        if (regs->CNTR > cnt)
        {
            //if counter alrready went over setted value force a triggering
            regs->CNTR = cnt;
     ffc:	8153      	strh	r3, [r2, #10]

        } else
        {
            return errorCode::periodOverflow;
        }
    }
     ffe:	b002      	add	sp, #8
    1000:	4770      	bx	lr
            _setNextPeriod(t);
            return _setCurrentPeriod(t);

        } else
        {
            return errorCode::periodOverflow;
    1002:	f06f 0063 	mvn.w	r0, #99	; 0x63
        }
    }
    1006:	4770      	bx	lr
    1008:	43160000 	.word	0x43160000
    100c:	477fff00 	.word	0x477fff00

00001010 <TeensyTimerTool::GptChannel::getMaxPeriod() const>:

        inline errorCode trigger(float delay) override;
        inline errorCode triggerDirect(uint32_t delay) override;
        inline errorCode getTriggerReload(float delay, uint32_t* reload) override;

        inline float getMaxPeriod() const override { return getMaxMicros() / 1E6; }
    1010:	eddf 6a05 	vldr	s13, [pc, #20]	; 1028 <TeensyTimerTool::GptChannel::getMaxPeriod() const+0x18>
    1014:	ed90 7a05 	vldr	s14, [r0, #20]
    1018:	eddf 7a04 	vldr	s15, [pc, #16]	; 102c <TeensyTimerTool::GptChannel::getMaxPeriod() const+0x1c>
    101c:	ee86 0a87 	vdiv.f32	s0, s13, s14
    1020:	ee80 0a27 	vdiv.f32	s0, s0, s15
    1024:	4770      	bx	lr
    1026:	bf00      	nop
    1028:	4f800000 	.word	0x4f800000
    102c:	49742400 	.word	0x49742400

00001030 <TeensyTimerTool::GptChannel::start()>:
        return errorCode::OK;
    }

    errorCode GptChannel::start()
    {
        regs->SR = 0x3F;         // clear all interupt flags
    1030:	68c3      	ldr	r3, [r0, #12]
    1032:	213f      	movs	r1, #63	; 0x3f
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    1034:	2201      	movs	r2, #1
        regs->CR |= GPT_CR_EN;   // enable timer
        return errorCode::OK;
    }
    1036:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode GptChannel::start()
    {
        regs->SR = 0x3F;         // clear all interupt flags
    1038:	6099      	str	r1, [r3, #8]
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    103a:	60da      	str	r2, [r3, #12]
        regs->CR |= GPT_CR_EN;   // enable timer
    103c:	681a      	ldr	r2, [r3, #0]
    103e:	f042 0201 	orr.w	r2, r2, #1
    1042:	601a      	str	r2, [r3, #0]
        return errorCode::OK;
    }
    1044:	4770      	bx	lr
    1046:	bf00      	nop

00001048 <TeensyTimerTool::GptChannel::stop()>:

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1048:	68c3      	ldr	r3, [r0, #12]
        regs->IR = 0;
    104a:	2100      	movs	r1, #0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    104c:	681a      	ldr	r2, [r3, #0]
        regs->IR = 0;
        return errorCode::OK;
    }
    104e:	4608      	mov	r0, r1
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1050:	f022 0201 	bic.w	r2, r2, #1
    1054:	601a      	str	r2, [r3, #0]
        regs->IR = 0;
    1056:	60d9      	str	r1, [r3, #12]
        return errorCode::OK;
    }
    1058:	4770      	bx	lr
    105a:	bf00      	nop

0000105c <TeensyTimerTool::GptChannel::triggerDirect(unsigned long)>:
    {
        return triggerDirect(microsecondToCycles(delay));
    }

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
    105c:	b410      	push	{r4}
        regs->SR = 0x3F;         // clear all interupt flags
    105e:	68c3      	ldr	r3, [r0, #12]
    1060:	243f      	movs	r4, #63	; 0x3f
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    1062:	2201      	movs	r2, #1
        regs->OCR1 = reload;     // set overflow value
        regs->CR |= GPT_CR_EN;   // enable timer

        return errorCode::OK;
    }
    1064:	2000      	movs	r0, #0
        return triggerDirect(microsecondToCycles(delay));
    }

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
    1066:	609c      	str	r4, [r3, #8]
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    1068:	60da      	str	r2, [r3, #12]
        regs->OCR1 = reload;     // set overflow value
    106a:	6119      	str	r1, [r3, #16]
        regs->CR |= GPT_CR_EN;   // enable timer
    106c:	681a      	ldr	r2, [r3, #0]

        return errorCode::OK;
    }
    106e:	f85d 4b04 	ldr.w	r4, [sp], #4
    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
        regs->OCR1 = reload;     // set overflow value
        regs->CR |= GPT_CR_EN;   // enable timer
    1072:	f042 0201 	orr.w	r2, r2, #1
    1076:	601a      	str	r2, [r3, #0]

        return errorCode::OK;
    }
    1078:	4770      	bx	lr
    107a:	bf00      	nop

0000107c <TeensyTimerTool::TMR_t<0u>::isr()>:
        }
        return nullptr;
    }

    template <unsigned m>
    void TMR_t<m>::isr()
    107c:	b510      	push	{r4, lr}
    107e:	4c25      	ldr	r4, [pc, #148]	; (1114 <TeensyTimerTool::TMR_t<0u>::isr()+0x98>)
    {
        // no loop to gain some time by avoiding indirections and pointer calculations
        if (callbacks[0] != nullptr && pCH0->CSCTRL & TMR_CSCTRL_TCF1)
    1080:	68a3      	ldr	r3, [r4, #8]
    1082:	b16b      	cbz	r3, 10a0 <TeensyTimerTool::TMR_t<0u>::isr()+0x24>
    1084:	4b24      	ldr	r3, [pc, #144]	; (1118 <TeensyTimerTool::TMR_t<0u>::isr()+0x9c>)
    1086:	681a      	ldr	r2, [r3, #0]
    1088:	8a93      	ldrh	r3, [r2, #20]
    108a:	06d9      	lsls	r1, r3, #27
    108c:	d508      	bpl.n	10a0 <TeensyTimerTool::TMR_t<0u>::isr()+0x24>
        {
            pCH0->CSCTRL &= ~TMR_CSCTRL_TCF1;
    108e:	8a93      	ldrh	r3, [r2, #20]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    1090:	4620      	mov	r0, r4
    1092:	68e1      	ldr	r1, [r4, #12]
    1094:	f023 0310 	bic.w	r3, r3, #16
    1098:	041b      	lsls	r3, r3, #16
    109a:	0c1b      	lsrs	r3, r3, #16
    109c:	8293      	strh	r3, [r2, #20]
    109e:	4788      	blx	r1
            callbacks[0]();
        }

        if (callbacks[1] != nullptr && pCH1->CSCTRL & TMR_CSCTRL_TCF1)
    10a0:	69a3      	ldr	r3, [r4, #24]
    10a2:	491c      	ldr	r1, [pc, #112]	; (1114 <TeensyTimerTool::TMR_t<0u>::isr()+0x98>)
    10a4:	b173      	cbz	r3, 10c4 <TeensyTimerTool::TMR_t<0u>::isr()+0x48>
    10a6:	4b1d      	ldr	r3, [pc, #116]	; (111c <TeensyTimerTool::TMR_t<0u>::isr()+0xa0>)
    10a8:	681a      	ldr	r2, [r3, #0]
    10aa:	8a93      	ldrh	r3, [r2, #20]
    10ac:	06db      	lsls	r3, r3, #27
    10ae:	d509      	bpl.n	10c4 <TeensyTimerTool::TMR_t<0u>::isr()+0x48>
        {
            pCH1->CSCTRL &= ~TMR_CSCTRL_TCF1;
    10b0:	8a93      	ldrh	r3, [r2, #20]
    10b2:	f101 0010 	add.w	r0, r1, #16
    10b6:	69c9      	ldr	r1, [r1, #28]
    10b8:	f023 0310 	bic.w	r3, r3, #16
    10bc:	041b      	lsls	r3, r3, #16
    10be:	0c1b      	lsrs	r3, r3, #16
    10c0:	8293      	strh	r3, [r2, #20]
    10c2:	4788      	blx	r1
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
    10c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    10c6:	4913      	ldr	r1, [pc, #76]	; (1114 <TeensyTimerTool::TMR_t<0u>::isr()+0x98>)
    10c8:	b123      	cbz	r3, 10d4 <TeensyTimerTool::TMR_t<0u>::isr()+0x58>
    10ca:	4b15      	ldr	r3, [pc, #84]	; (1120 <TeensyTimerTool::TMR_t<0u>::isr()+0xa4>)
    10cc:	681a      	ldr	r2, [r3, #0]
    10ce:	8a93      	ldrh	r3, [r2, #20]
    10d0:	06d8      	lsls	r0, r3, #27
    10d2:	d414      	bmi.n	10fe <TeensyTimerTool::TMR_t<0u>::isr()+0x82>
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
            callbacks[2]();
        }

        if (callbacks[3] != nullptr && pCH3->CSCTRL & TMR_CSCTRL_TCF1)
    10d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    10d6:	490f      	ldr	r1, [pc, #60]	; (1114 <TeensyTimerTool::TMR_t<0u>::isr()+0x98>)
    10d8:	b173      	cbz	r3, 10f8 <TeensyTimerTool::TMR_t<0u>::isr()+0x7c>
    10da:	4b12      	ldr	r3, [pc, #72]	; (1124 <TeensyTimerTool::TMR_t<0u>::isr()+0xa8>)
    10dc:	681a      	ldr	r2, [r3, #0]
    10de:	8a93      	ldrh	r3, [r2, #20]
    10e0:	06db      	lsls	r3, r3, #27
    10e2:	d509      	bpl.n	10f8 <TeensyTimerTool::TMR_t<0u>::isr()+0x7c>
        {
            pCH3->CSCTRL &= ~TMR_CSCTRL_TCF1;
    10e4:	8a93      	ldrh	r3, [r2, #20]
    10e6:	f101 0030 	add.w	r0, r1, #48	; 0x30
    10ea:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    10ec:	f023 0310 	bic.w	r3, r3, #16
    10f0:	041b      	lsls	r3, r3, #16
    10f2:	0c1b      	lsrs	r3, r3, #16
    10f4:	8293      	strh	r3, [r2, #20]
    10f6:	4788      	blx	r1
            callbacks[3]();
        }
        asm volatile("dsb"); //wait until register changes propagated through the cache
    10f8:	f3bf 8f4f 	dsb	sy
    }
    10fc:	bd10      	pop	{r4, pc}
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
    10fe:	8a93      	ldrh	r3, [r2, #20]
    1100:	f101 0020 	add.w	r0, r1, #32
    1104:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    1106:	f023 0310 	bic.w	r3, r3, #16
    110a:	041b      	lsls	r3, r3, #16
    110c:	0c1b      	lsrs	r3, r3, #16
    110e:	8293      	strh	r3, [r2, #20]
    1110:	4788      	blx	r1
    1112:	e7df      	b.n	10d4 <TeensyTimerTool::TMR_t<0u>::isr()+0x58>
    1114:	20001930 	.word	0x20001930
    1118:	2000192c 	.word	0x2000192c
    111c:	2000183c 	.word	0x2000183c
    1120:	20001838 	.word	0x20001838
    1124:	20001834 	.word	0x20001834

00001128 <TeensyTimerTool::TMR_t<1u>::isr()>:
        }
        return nullptr;
    }

    template <unsigned m>
    void TMR_t<m>::isr()
    1128:	b510      	push	{r4, lr}
    112a:	4c25      	ldr	r4, [pc, #148]	; (11c0 <TeensyTimerTool::TMR_t<1u>::isr()+0x98>)
    {
        // no loop to gain some time by avoiding indirections and pointer calculations
        if (callbacks[0] != nullptr && pCH0->CSCTRL & TMR_CSCTRL_TCF1)
    112c:	68a3      	ldr	r3, [r4, #8]
    112e:	b16b      	cbz	r3, 114c <TeensyTimerTool::TMR_t<1u>::isr()+0x24>
    1130:	4b24      	ldr	r3, [pc, #144]	; (11c4 <TeensyTimerTool::TMR_t<1u>::isr()+0x9c>)
    1132:	681a      	ldr	r2, [r3, #0]
    1134:	8a93      	ldrh	r3, [r2, #20]
    1136:	06d9      	lsls	r1, r3, #27
    1138:	d508      	bpl.n	114c <TeensyTimerTool::TMR_t<1u>::isr()+0x24>
        {
            pCH0->CSCTRL &= ~TMR_CSCTRL_TCF1;
    113a:	8a93      	ldrh	r3, [r2, #20]
    113c:	4620      	mov	r0, r4
    113e:	68e1      	ldr	r1, [r4, #12]
    1140:	f023 0310 	bic.w	r3, r3, #16
    1144:	041b      	lsls	r3, r3, #16
    1146:	0c1b      	lsrs	r3, r3, #16
    1148:	8293      	strh	r3, [r2, #20]
    114a:	4788      	blx	r1
            callbacks[0]();
        }

        if (callbacks[1] != nullptr && pCH1->CSCTRL & TMR_CSCTRL_TCF1)
    114c:	69a3      	ldr	r3, [r4, #24]
    114e:	491c      	ldr	r1, [pc, #112]	; (11c0 <TeensyTimerTool::TMR_t<1u>::isr()+0x98>)
    1150:	b173      	cbz	r3, 1170 <TeensyTimerTool::TMR_t<1u>::isr()+0x48>
    1152:	4b1d      	ldr	r3, [pc, #116]	; (11c8 <TeensyTimerTool::TMR_t<1u>::isr()+0xa0>)
    1154:	681a      	ldr	r2, [r3, #0]
    1156:	8a93      	ldrh	r3, [r2, #20]
    1158:	06db      	lsls	r3, r3, #27
    115a:	d509      	bpl.n	1170 <TeensyTimerTool::TMR_t<1u>::isr()+0x48>
        {
            pCH1->CSCTRL &= ~TMR_CSCTRL_TCF1;
    115c:	8a93      	ldrh	r3, [r2, #20]
    115e:	f101 0010 	add.w	r0, r1, #16
    1162:	69c9      	ldr	r1, [r1, #28]
    1164:	f023 0310 	bic.w	r3, r3, #16
    1168:	041b      	lsls	r3, r3, #16
    116a:	0c1b      	lsrs	r3, r3, #16
    116c:	8293      	strh	r3, [r2, #20]
    116e:	4788      	blx	r1
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
    1170:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1172:	4913      	ldr	r1, [pc, #76]	; (11c0 <TeensyTimerTool::TMR_t<1u>::isr()+0x98>)
    1174:	b123      	cbz	r3, 1180 <TeensyTimerTool::TMR_t<1u>::isr()+0x58>
    1176:	4b15      	ldr	r3, [pc, #84]	; (11cc <TeensyTimerTool::TMR_t<1u>::isr()+0xa4>)
    1178:	681a      	ldr	r2, [r3, #0]
    117a:	8a93      	ldrh	r3, [r2, #20]
    117c:	06d8      	lsls	r0, r3, #27
    117e:	d414      	bmi.n	11aa <TeensyTimerTool::TMR_t<1u>::isr()+0x82>
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
            callbacks[2]();
        }

        if (callbacks[3] != nullptr && pCH3->CSCTRL & TMR_CSCTRL_TCF1)
    1180:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1182:	490f      	ldr	r1, [pc, #60]	; (11c0 <TeensyTimerTool::TMR_t<1u>::isr()+0x98>)
    1184:	b173      	cbz	r3, 11a4 <TeensyTimerTool::TMR_t<1u>::isr()+0x7c>
    1186:	4b12      	ldr	r3, [pc, #72]	; (11d0 <TeensyTimerTool::TMR_t<1u>::isr()+0xa8>)
    1188:	681a      	ldr	r2, [r3, #0]
    118a:	8a93      	ldrh	r3, [r2, #20]
    118c:	06db      	lsls	r3, r3, #27
    118e:	d509      	bpl.n	11a4 <TeensyTimerTool::TMR_t<1u>::isr()+0x7c>
        {
            pCH3->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1190:	8a93      	ldrh	r3, [r2, #20]
    1192:	f101 0030 	add.w	r0, r1, #48	; 0x30
    1196:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    1198:	f023 0310 	bic.w	r3, r3, #16
    119c:	041b      	lsls	r3, r3, #16
    119e:	0c1b      	lsrs	r3, r3, #16
    11a0:	8293      	strh	r3, [r2, #20]
    11a2:	4788      	blx	r1
            callbacks[3]();
        }
        asm volatile("dsb"); //wait until register changes propagated through the cache
    11a4:	f3bf 8f4f 	dsb	sy
    }
    11a8:	bd10      	pop	{r4, pc}
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
    11aa:	8a93      	ldrh	r3, [r2, #20]
    11ac:	f101 0020 	add.w	r0, r1, #32
    11b0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    11b2:	f023 0310 	bic.w	r3, r3, #16
    11b6:	041b      	lsls	r3, r3, #16
    11b8:	0c1b      	lsrs	r3, r3, #16
    11ba:	8293      	strh	r3, [r2, #20]
    11bc:	4788      	blx	r1
    11be:	e7df      	b.n	1180 <TeensyTimerTool::TMR_t<1u>::isr()+0x58>
    11c0:	200018ec 	.word	0x200018ec
    11c4:	200018e8 	.word	0x200018e8
    11c8:	20001830 	.word	0x20001830
    11cc:	2000182c 	.word	0x2000182c
    11d0:	20001828 	.word	0x20001828

000011d4 <TeensyTimerTool::TMR_t<2u>::isr()>:
        }
        return nullptr;
    }

    template <unsigned m>
    void TMR_t<m>::isr()
    11d4:	b510      	push	{r4, lr}
    11d6:	4c25      	ldr	r4, [pc, #148]	; (126c <TeensyTimerTool::TMR_t<2u>::isr()+0x98>)
    {
        // no loop to gain some time by avoiding indirections and pointer calculations
        if (callbacks[0] != nullptr && pCH0->CSCTRL & TMR_CSCTRL_TCF1)
    11d8:	68a3      	ldr	r3, [r4, #8]
    11da:	b16b      	cbz	r3, 11f8 <TeensyTimerTool::TMR_t<2u>::isr()+0x24>
    11dc:	4b24      	ldr	r3, [pc, #144]	; (1270 <TeensyTimerTool::TMR_t<2u>::isr()+0x9c>)
    11de:	681a      	ldr	r2, [r3, #0]
    11e0:	8a93      	ldrh	r3, [r2, #20]
    11e2:	06d9      	lsls	r1, r3, #27
    11e4:	d508      	bpl.n	11f8 <TeensyTimerTool::TMR_t<2u>::isr()+0x24>
        {
            pCH0->CSCTRL &= ~TMR_CSCTRL_TCF1;
    11e6:	8a93      	ldrh	r3, [r2, #20]
    11e8:	4620      	mov	r0, r4
    11ea:	68e1      	ldr	r1, [r4, #12]
    11ec:	f023 0310 	bic.w	r3, r3, #16
    11f0:	041b      	lsls	r3, r3, #16
    11f2:	0c1b      	lsrs	r3, r3, #16
    11f4:	8293      	strh	r3, [r2, #20]
    11f6:	4788      	blx	r1
            callbacks[0]();
        }

        if (callbacks[1] != nullptr && pCH1->CSCTRL & TMR_CSCTRL_TCF1)
    11f8:	69a3      	ldr	r3, [r4, #24]
    11fa:	491c      	ldr	r1, [pc, #112]	; (126c <TeensyTimerTool::TMR_t<2u>::isr()+0x98>)
    11fc:	b173      	cbz	r3, 121c <TeensyTimerTool::TMR_t<2u>::isr()+0x48>
    11fe:	4b1d      	ldr	r3, [pc, #116]	; (1274 <TeensyTimerTool::TMR_t<2u>::isr()+0xa0>)
    1200:	681a      	ldr	r2, [r3, #0]
    1202:	8a93      	ldrh	r3, [r2, #20]
    1204:	06db      	lsls	r3, r3, #27
    1206:	d509      	bpl.n	121c <TeensyTimerTool::TMR_t<2u>::isr()+0x48>
        {
            pCH1->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1208:	8a93      	ldrh	r3, [r2, #20]
    120a:	f101 0010 	add.w	r0, r1, #16
    120e:	69c9      	ldr	r1, [r1, #28]
    1210:	f023 0310 	bic.w	r3, r3, #16
    1214:	041b      	lsls	r3, r3, #16
    1216:	0c1b      	lsrs	r3, r3, #16
    1218:	8293      	strh	r3, [r2, #20]
    121a:	4788      	blx	r1
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
    121c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    121e:	4913      	ldr	r1, [pc, #76]	; (126c <TeensyTimerTool::TMR_t<2u>::isr()+0x98>)
    1220:	b123      	cbz	r3, 122c <TeensyTimerTool::TMR_t<2u>::isr()+0x58>
    1222:	4b15      	ldr	r3, [pc, #84]	; (1278 <TeensyTimerTool::TMR_t<2u>::isr()+0xa4>)
    1224:	681a      	ldr	r2, [r3, #0]
    1226:	8a93      	ldrh	r3, [r2, #20]
    1228:	06d8      	lsls	r0, r3, #27
    122a:	d414      	bmi.n	1256 <TeensyTimerTool::TMR_t<2u>::isr()+0x82>
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
            callbacks[2]();
        }

        if (callbacks[3] != nullptr && pCH3->CSCTRL & TMR_CSCTRL_TCF1)
    122c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    122e:	490f      	ldr	r1, [pc, #60]	; (126c <TeensyTimerTool::TMR_t<2u>::isr()+0x98>)
    1230:	b173      	cbz	r3, 1250 <TeensyTimerTool::TMR_t<2u>::isr()+0x7c>
    1232:	4b12      	ldr	r3, [pc, #72]	; (127c <TeensyTimerTool::TMR_t<2u>::isr()+0xa8>)
    1234:	681a      	ldr	r2, [r3, #0]
    1236:	8a93      	ldrh	r3, [r2, #20]
    1238:	06db      	lsls	r3, r3, #27
    123a:	d509      	bpl.n	1250 <TeensyTimerTool::TMR_t<2u>::isr()+0x7c>
        {
            pCH3->CSCTRL &= ~TMR_CSCTRL_TCF1;
    123c:	8a93      	ldrh	r3, [r2, #20]
    123e:	f101 0030 	add.w	r0, r1, #48	; 0x30
    1242:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    1244:	f023 0310 	bic.w	r3, r3, #16
    1248:	041b      	lsls	r3, r3, #16
    124a:	0c1b      	lsrs	r3, r3, #16
    124c:	8293      	strh	r3, [r2, #20]
    124e:	4788      	blx	r1
            callbacks[3]();
        }
        asm volatile("dsb"); //wait until register changes propagated through the cache
    1250:	f3bf 8f4f 	dsb	sy
    }
    1254:	bd10      	pop	{r4, pc}
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1256:	8a93      	ldrh	r3, [r2, #20]
    1258:	f101 0020 	add.w	r0, r1, #32
    125c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    125e:	f023 0310 	bic.w	r3, r3, #16
    1262:	041b      	lsls	r3, r3, #16
    1264:	0c1b      	lsrs	r3, r3, #16
    1266:	8293      	strh	r3, [r2, #20]
    1268:	4788      	blx	r1
    126a:	e7df      	b.n	122c <TeensyTimerTool::TMR_t<2u>::isr()+0x58>
    126c:	200018a8 	.word	0x200018a8
    1270:	200018a4 	.word	0x200018a4
    1274:	20001824 	.word	0x20001824
    1278:	20001820 	.word	0x20001820
    127c:	2000181c 	.word	0x2000181c

00001280 <TeensyTimerTool::TMR_t<3u>::isr()>:
        }
        return nullptr;
    }

    template <unsigned m>
    void TMR_t<m>::isr()
    1280:	b510      	push	{r4, lr}
    1282:	4c25      	ldr	r4, [pc, #148]	; (1318 <TeensyTimerTool::TMR_t<3u>::isr()+0x98>)
    {
        // no loop to gain some time by avoiding indirections and pointer calculations
        if (callbacks[0] != nullptr && pCH0->CSCTRL & TMR_CSCTRL_TCF1)
    1284:	68a3      	ldr	r3, [r4, #8]
    1286:	b16b      	cbz	r3, 12a4 <TeensyTimerTool::TMR_t<3u>::isr()+0x24>
    1288:	4b24      	ldr	r3, [pc, #144]	; (131c <TeensyTimerTool::TMR_t<3u>::isr()+0x9c>)
    128a:	681a      	ldr	r2, [r3, #0]
    128c:	8a93      	ldrh	r3, [r2, #20]
    128e:	06d9      	lsls	r1, r3, #27
    1290:	d508      	bpl.n	12a4 <TeensyTimerTool::TMR_t<3u>::isr()+0x24>
        {
            pCH0->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1292:	8a93      	ldrh	r3, [r2, #20]
    1294:	4620      	mov	r0, r4
    1296:	68e1      	ldr	r1, [r4, #12]
    1298:	f023 0310 	bic.w	r3, r3, #16
    129c:	041b      	lsls	r3, r3, #16
    129e:	0c1b      	lsrs	r3, r3, #16
    12a0:	8293      	strh	r3, [r2, #20]
    12a2:	4788      	blx	r1
            callbacks[0]();
        }

        if (callbacks[1] != nullptr && pCH1->CSCTRL & TMR_CSCTRL_TCF1)
    12a4:	69a3      	ldr	r3, [r4, #24]
    12a6:	491c      	ldr	r1, [pc, #112]	; (1318 <TeensyTimerTool::TMR_t<3u>::isr()+0x98>)
    12a8:	b173      	cbz	r3, 12c8 <TeensyTimerTool::TMR_t<3u>::isr()+0x48>
    12aa:	4b1d      	ldr	r3, [pc, #116]	; (1320 <TeensyTimerTool::TMR_t<3u>::isr()+0xa0>)
    12ac:	681a      	ldr	r2, [r3, #0]
    12ae:	8a93      	ldrh	r3, [r2, #20]
    12b0:	06db      	lsls	r3, r3, #27
    12b2:	d509      	bpl.n	12c8 <TeensyTimerTool::TMR_t<3u>::isr()+0x48>
        {
            pCH1->CSCTRL &= ~TMR_CSCTRL_TCF1;
    12b4:	8a93      	ldrh	r3, [r2, #20]
    12b6:	f101 0010 	add.w	r0, r1, #16
    12ba:	69c9      	ldr	r1, [r1, #28]
    12bc:	f023 0310 	bic.w	r3, r3, #16
    12c0:	041b      	lsls	r3, r3, #16
    12c2:	0c1b      	lsrs	r3, r3, #16
    12c4:	8293      	strh	r3, [r2, #20]
    12c6:	4788      	blx	r1
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
    12c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    12ca:	4913      	ldr	r1, [pc, #76]	; (1318 <TeensyTimerTool::TMR_t<3u>::isr()+0x98>)
    12cc:	b123      	cbz	r3, 12d8 <TeensyTimerTool::TMR_t<3u>::isr()+0x58>
    12ce:	4b15      	ldr	r3, [pc, #84]	; (1324 <TeensyTimerTool::TMR_t<3u>::isr()+0xa4>)
    12d0:	681a      	ldr	r2, [r3, #0]
    12d2:	8a93      	ldrh	r3, [r2, #20]
    12d4:	06d8      	lsls	r0, r3, #27
    12d6:	d414      	bmi.n	1302 <TeensyTimerTool::TMR_t<3u>::isr()+0x82>
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
            callbacks[2]();
        }

        if (callbacks[3] != nullptr && pCH3->CSCTRL & TMR_CSCTRL_TCF1)
    12d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    12da:	490f      	ldr	r1, [pc, #60]	; (1318 <TeensyTimerTool::TMR_t<3u>::isr()+0x98>)
    12dc:	b173      	cbz	r3, 12fc <TeensyTimerTool::TMR_t<3u>::isr()+0x7c>
    12de:	4b12      	ldr	r3, [pc, #72]	; (1328 <TeensyTimerTool::TMR_t<3u>::isr()+0xa8>)
    12e0:	681a      	ldr	r2, [r3, #0]
    12e2:	8a93      	ldrh	r3, [r2, #20]
    12e4:	06db      	lsls	r3, r3, #27
    12e6:	d509      	bpl.n	12fc <TeensyTimerTool::TMR_t<3u>::isr()+0x7c>
        {
            pCH3->CSCTRL &= ~TMR_CSCTRL_TCF1;
    12e8:	8a93      	ldrh	r3, [r2, #20]
    12ea:	f101 0030 	add.w	r0, r1, #48	; 0x30
    12ee:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    12f0:	f023 0310 	bic.w	r3, r3, #16
    12f4:	041b      	lsls	r3, r3, #16
    12f6:	0c1b      	lsrs	r3, r3, #16
    12f8:	8293      	strh	r3, [r2, #20]
    12fa:	4788      	blx	r1
            callbacks[3]();
        }
        asm volatile("dsb"); //wait until register changes propagated through the cache
    12fc:	f3bf 8f4f 	dsb	sy
    }
    1300:	bd10      	pop	{r4, pc}
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1302:	8a93      	ldrh	r3, [r2, #20]
    1304:	f101 0020 	add.w	r0, r1, #32
    1308:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    130a:	f023 0310 	bic.w	r3, r3, #16
    130e:	041b      	lsls	r3, r3, #16
    1310:	0c1b      	lsrs	r3, r3, #16
    1312:	8293      	strh	r3, [r2, #20]
    1314:	4788      	blx	r1
    1316:	e7df      	b.n	12d8 <TeensyTimerTool::TMR_t<3u>::isr()+0x58>
    1318:	20001864 	.word	0x20001864
    131c:	20001860 	.word	0x20001860
    1320:	20001818 	.word	0x20001818
    1324:	20001814 	.word	0x20001814
    1328:	20001810 	.word	0x20001810

0000132c <TeensyTimerTool::GPT_t<0u>::isr()>:
    }

    template <unsigned tmoduleNr>
    void GPT_t<tmoduleNr>::isr()
    {
        if (!channel->periodic)
    132c:	4b0a      	ldr	r3, [pc, #40]	; (1358 <TeensyTimerTool::GPT_t<0u>::isr()+0x2c>)
    132e:	681b      	ldr	r3, [r3, #0]
    1330:	7a1b      	ldrb	r3, [r3, #8]
        }
        return nullptr;
    }

    template <unsigned tmoduleNr>
    void GPT_t<tmoduleNr>::isr()
    1332:	b510      	push	{r4, lr}
    {
        if (!channel->periodic)
    1334:	b923      	cbnz	r3, 1340 <TeensyTimerTool::GPT_t<0u>::isr()+0x14>
            pGPT->CR &= ~GPT_CR_EN; // stop timer in one shot mode
    1336:	4a09      	ldr	r2, [pc, #36]	; (135c <TeensyTimerTool::GPT_t<0u>::isr()+0x30>)
    1338:	6813      	ldr	r3, [r2, #0]
    133a:	f023 0301 	bic.w	r3, r3, #1
    133e:	6013      	str	r3, [r2, #0]
    1340:	4807      	ldr	r0, [pc, #28]	; (1360 <TeensyTimerTool::GPT_t<0u>::isr()+0x34>)

        pGPT->SR = 0x3F; // reset all interrupt flags
    1342:	223f      	movs	r2, #63	; 0x3f
    1344:	4c05      	ldr	r4, [pc, #20]	; (135c <TeensyTimerTool::GPT_t<0u>::isr()+0x30>)
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    1346:	6883      	ldr	r3, [r0, #8]
    1348:	60a2      	str	r2, [r4, #8]
    134a:	b11b      	cbz	r3, 1354 <TeensyTimerTool::GPT_t<0u>::isr()+0x28>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    134c:	68c3      	ldr	r3, [r0, #12]
    134e:	4798      	blx	r3
        callback();      // we only enabled the OF1 interrupt-> no need to find out which interrupt was actually called
        pGPT->SR;                 // re-read flag to prevent re entering, takes very long, seems to work without?
    1350:	68a3      	ldr	r3, [r4, #8]
    1352:	bd10      	pop	{r4, pc}
    1354:	e7fe      	b.n	1354 <TeensyTimerTool::GPT_t<0u>::isr()+0x28>
    1356:	bf00      	nop
    1358:	200017ac 	.word	0x200017ac
    135c:	401ec000 	.word	0x401ec000
    1360:	20001850 	.word	0x20001850

00001364 <TeensyTimerTool::GPT_t<1u>::isr()>:
    }

    template <unsigned tmoduleNr>
    void GPT_t<tmoduleNr>::isr()
    {
        if (!channel->periodic)
    1364:	4b0a      	ldr	r3, [pc, #40]	; (1390 <TeensyTimerTool::GPT_t<1u>::isr()+0x2c>)
    1366:	681b      	ldr	r3, [r3, #0]
    1368:	7a1b      	ldrb	r3, [r3, #8]
        }
        return nullptr;
    }

    template <unsigned tmoduleNr>
    void GPT_t<tmoduleNr>::isr()
    136a:	b510      	push	{r4, lr}
    {
        if (!channel->periodic)
    136c:	b923      	cbnz	r3, 1378 <TeensyTimerTool::GPT_t<1u>::isr()+0x14>
            pGPT->CR &= ~GPT_CR_EN; // stop timer in one shot mode
    136e:	4a09      	ldr	r2, [pc, #36]	; (1394 <TeensyTimerTool::GPT_t<1u>::isr()+0x30>)
    1370:	6813      	ldr	r3, [r2, #0]
    1372:	f023 0301 	bic.w	r3, r3, #1
    1376:	6013      	str	r3, [r2, #0]
    1378:	4807      	ldr	r0, [pc, #28]	; (1398 <TeensyTimerTool::GPT_t<1u>::isr()+0x34>)

        pGPT->SR = 0x3F; // reset all interrupt flags
    137a:	223f      	movs	r2, #63	; 0x3f
    137c:	4c05      	ldr	r4, [pc, #20]	; (1394 <TeensyTimerTool::GPT_t<1u>::isr()+0x30>)
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    137e:	6883      	ldr	r3, [r0, #8]
    1380:	60a2      	str	r2, [r4, #8]
    1382:	b11b      	cbz	r3, 138c <TeensyTimerTool::GPT_t<1u>::isr()+0x28>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    1384:	68c3      	ldr	r3, [r0, #12]
    1386:	4798      	blx	r3
        callback();      // we only enabled the OF1 interrupt-> no need to find out which interrupt was actually called
        pGPT->SR;                 // re-read flag to prevent re entering, takes very long, seems to work without?
    1388:	68a3      	ldr	r3, [r4, #8]
    138a:	bd10      	pop	{r4, pc}
    138c:	e7fe      	b.n	138c <TeensyTimerTool::GPT_t<1u>::isr()+0x28>
    138e:	bf00      	nop
    1390:	200017a4 	.word	0x200017a4
    1394:	401f0000 	.word	0x401f0000
    1398:	20001840 	.word	0x20001840

0000139c <__tcf_0>:

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    139c:	b538      	push	{r3, r4, r5, lr}
    139e:	4c06      	ldr	r4, [pc, #24]	; (13b8 <__tcf_0+0x1c>)
    13a0:	f1a4 0540 	sub.w	r5, r4, #64	; 0x40
    13a4:	3c10      	subs	r4, #16

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    13a6:	68a3      	ldr	r3, [r4, #8]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    13a8:	2203      	movs	r2, #3
    13aa:	4621      	mov	r1, r4
    13ac:	4620      	mov	r0, r4

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    13ae:	b103      	cbz	r3, 13b2 <__tcf_0+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    13b0:	4798      	blx	r3
    13b2:	42ac      	cmp	r4, r5
    13b4:	d1f6      	bne.n	13a4 <__tcf_0+0x8>
    13b6:	bd38      	pop	{r3, r4, r5, pc}
    13b8:	20001970 	.word	0x20001970

000013bc <__tcf_1>:
    13bc:	b538      	push	{r3, r4, r5, lr}
    13be:	4c06      	ldr	r4, [pc, #24]	; (13d8 <__tcf_1+0x1c>)
    13c0:	f1a4 0540 	sub.w	r5, r4, #64	; 0x40
    13c4:	3c10      	subs	r4, #16

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    13c6:	68a3      	ldr	r3, [r4, #8]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    13c8:	2203      	movs	r2, #3
    13ca:	4621      	mov	r1, r4
    13cc:	4620      	mov	r0, r4

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    13ce:	b103      	cbz	r3, 13d2 <__tcf_1+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    13d0:	4798      	blx	r3
    13d2:	42ac      	cmp	r4, r5
    13d4:	d1f6      	bne.n	13c4 <__tcf_1+0x8>
    13d6:	bd38      	pop	{r3, r4, r5, pc}
    13d8:	2000192c 	.word	0x2000192c

000013dc <__tcf_2>:
    13dc:	b538      	push	{r3, r4, r5, lr}
    13de:	4c06      	ldr	r4, [pc, #24]	; (13f8 <__tcf_2+0x1c>)
    13e0:	f1a4 0540 	sub.w	r5, r4, #64	; 0x40
    13e4:	3c10      	subs	r4, #16

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    13e6:	68a3      	ldr	r3, [r4, #8]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    13e8:	2203      	movs	r2, #3
    13ea:	4621      	mov	r1, r4
    13ec:	4620      	mov	r0, r4

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    13ee:	b103      	cbz	r3, 13f2 <__tcf_2+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    13f0:	4798      	blx	r3
    13f2:	42ac      	cmp	r4, r5
    13f4:	d1f6      	bne.n	13e4 <__tcf_2+0x8>
    13f6:	bd38      	pop	{r3, r4, r5, pc}
    13f8:	200018e8 	.word	0x200018e8

000013fc <__tcf_3>:
    13fc:	b538      	push	{r3, r4, r5, lr}
    13fe:	4c06      	ldr	r4, [pc, #24]	; (1418 <__tcf_3+0x1c>)
    1400:	f1a4 0540 	sub.w	r5, r4, #64	; 0x40
    1404:	3c10      	subs	r4, #16

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1406:	68a3      	ldr	r3, [r4, #8]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1408:	2203      	movs	r2, #3
    140a:	4621      	mov	r1, r4
    140c:	4620      	mov	r0, r4

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    140e:	b103      	cbz	r3, 1412 <__tcf_3+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1410:	4798      	blx	r3
    1412:	42ac      	cmp	r4, r5
    1414:	d1f6      	bne.n	1404 <__tcf_3+0x8>
    1416:	bd38      	pop	{r3, r4, r5, pc}
    1418:	200018a4 	.word	0x200018a4

0000141c <TeensyTimerTool::TckChannel<unsigned long>::triggerDirect(unsigned long)>:
        this->triggered = false;
        return errorCode::OK;
    }

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    141c:	b410      	push	{r4}
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    141e:	4c06      	ldr	r4, [pc, #24]	; (1438 <TeensyTimerTool::TckChannel<unsigned long>::triggerDirect(unsigned long)+0x1c>)
        this->triggered = false;
        return errorCode::OK;
    }

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    1420:	4603      	mov	r3, r0
    {
        this->startCnt = getCycleCounter();
        this->nextPeriod = reload;
        this->currentPeriod = this->nextPeriod;
        this->triggered = true;
    1422:	2201      	movs	r2, #1
        return errorCode::OK;
    }
    1424:	2000      	movs	r0, #0
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    1426:	6824      	ldr	r4, [r4, #0]

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
        this->nextPeriod = reload;
    1428:	6259      	str	r1, [r3, #36]	; 0x24
    }

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
    142a:	61dc      	str	r4, [r3, #28]
        this->nextPeriod = reload;
        this->currentPeriod = this->nextPeriod;
    142c:	6219      	str	r1, [r3, #32]
        this->triggered = true;
    142e:	765a      	strb	r2, [r3, #25]
        return errorCode::OK;
    }
    1430:	f85d 4b04 	ldr.w	r4, [sp], #4
    1434:	4770      	bx	lr
    1436:	bf00      	nop
    1438:	e0001004 	.word	0xe0001004

0000143c <TeensyTimerTool::TckChannel<unsigned long>::start()>:
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    143c:	4a03      	ldr	r2, [pc, #12]	; (144c <TeensyTimerTool::TckChannel<unsigned long>::start()+0x10>)

        return errorCode::OK;
    }

    template <typename T>
    errorCode TckChannel<T>::start()
    143e:	4603      	mov	r3, r0
    {
        this->startCnt = getCycleCounter();
        this->triggered = true;
    1440:	2101      	movs	r1, #1
        return errorCode::OK;
    }
    1442:	2000      	movs	r0, #0
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    1444:	6812      	ldr	r2, [r2, #0]

    template <typename T>
    errorCode TckChannel<T>::start()
    {
        this->startCnt = getCycleCounter();
        this->triggered = true;
    1446:	7659      	strb	r1, [r3, #25]
    }

    template <typename T>
    errorCode TckChannel<T>::start()
    {
        this->startCnt = getCycleCounter();
    1448:	61da      	str	r2, [r3, #28]
        this->triggered = true;
        return errorCode::OK;
    }
    144a:	4770      	bx	lr
    144c:	e0001004 	.word	0xe0001004

00001450 <TeensyTimerTool::TckChannel<unsigned long>::stop()>:

    template <typename T>
    errorCode TckChannel<T>::stop()
    {
        this->triggered = false;
    1450:	2300      	movs	r3, #0
    1452:	7643      	strb	r3, [r0, #25]
        return errorCode::OK;
    }
    1454:	4618      	mov	r0, r3
    1456:	4770      	bx	lr

00001458 <TeensyTimerTool::TckChannel<unsigned long>::getMaxPeriod() const>:
        {
            *reload = microsecondToCycles(delay);
            return errorCode::OK;
        }

        float getMaxPeriod() const override { return getMaxMicros() / 1E6; } // seconds
    1458:	eddf 6a05 	vldr	s13, [pc, #20]	; 1470 <TeensyTimerTool::TckChannel<unsigned long>::getMaxPeriod() const+0x18>
    145c:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
    1460:	eddf 7a04 	vldr	s15, [pc, #16]	; 1474 <TeensyTimerTool::TckChannel<unsigned long>::getMaxPeriod() const+0x1c>
    1464:	ee86 0a87 	vdiv.f32	s0, s13, s14
    1468:	ee80 0a27 	vdiv.f32	s0, s0, s15
    146c:	4770      	bx	lr
    146e:	bf00      	nop
    1470:	4f700000 	.word	0x4f700000
    1474:	49742400 	.word	0x49742400

00001478 <TeensyTimerTool::TckChannel<unsigned long>::tick()>:
    {
        return triggerDirect(microsecondToCycles(delay));
    }

    template <typename counter_t>
    bool TckChannel<counter_t>::tick()
    1478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
    147a:	4d10      	ldr	r5, [pc, #64]	; (14bc <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x44>)
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    147c:	4b10      	ldr	r3, [pc, #64]	; (14c0 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x48>)
    template <typename counter_t>
    bool TckChannel<counter_t>::tick()
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
    147e:	782c      	ldrb	r4, [r5, #0]
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    1480:	681a      	ldr	r2, [r3, #0]
    template <typename counter_t>
    bool TckChannel<counter_t>::tick()
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
    1482:	b9b4      	cbnz	r4, 14b2 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x3a>
    1484:	6a01      	ldr	r1, [r0, #32]
    1486:	b191      	cbz	r1, 14ae <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x36>
    1488:	7e46      	ldrb	r6, [r0, #25]
    148a:	b186      	cbz	r6, 14ae <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x36>
    148c:	69c3      	ldr	r3, [r0, #28]
    148e:	1ad2      	subs	r2, r2, r3
    1490:	4291      	cmp	r1, r2
    1492:	d80c      	bhi.n	14ae <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x36>
        {
            lock = true;
            //this->startCnt = now;
            this->startCnt += currentPeriod;
    1494:	440b      	add	r3, r1
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
        {
            lock = true;
    1496:	2701      	movs	r7, #1
            //this->startCnt = now;
            this->startCnt += currentPeriod;
            this->triggered = this->periodic; // i.e., stays triggerd if periodic, stops if oneShot
    1498:	7e01      	ldrb	r1, [r0, #24]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    149a:	6902      	ldr	r2, [r0, #16]
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
        {
            lock = true;
            //this->startCnt = now;
            this->startCnt += currentPeriod;
    149c:	61c3      	str	r3, [r0, #28]
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
        {
            lock = true;
    149e:	702f      	strb	r7, [r5, #0]
            //this->startCnt = now;
            this->startCnt += currentPeriod;
            this->triggered = this->periodic; // i.e., stays triggerd if periodic, stops if oneShot
    14a0:	7641      	strb	r1, [r0, #25]
    14a2:	b14a      	cbz	r2, 14b8 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x40>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    14a4:	6943      	ldr	r3, [r0, #20]
    14a6:	3008      	adds	r0, #8
    14a8:	4798      	blx	r3
            callback();
            lock = false;
    14aa:	702c      	strb	r4, [r5, #0]
            return true;
    14ac:	4634      	mov	r4, r6
        } else
        {
            return false;
        }
    }
    14ae:	4620      	mov	r0, r4
    14b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            callback();
            lock = false;
            return true;
        } else
        {
            return false;
    14b2:	2400      	movs	r4, #0
        }
    }
    14b4:	4620      	mov	r0, r4
    14b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14b8:	e7fe      	b.n	14b8 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x40>
    14ba:	bf00      	nop
    14bc:	200017a1 	.word	0x200017a1
    14c0:	e0001004 	.word	0xe0001004

000014c4 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()>:
    template <typename CounterType>
    class TckChannel : public TckChannelBase
    {
     public:
        TckChannel();
        virtual ~TckChannel(){}; //TBD
    14c4:	4a06      	ldr	r2, [pc, #24]	; (14e0 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()+0x1c>)

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    14c6:	6903      	ldr	r3, [r0, #16]
    14c8:	b510      	push	{r4, lr}
    14ca:	4604      	mov	r4, r0
    14cc:	6002      	str	r2, [r0, #0]
    14ce:	b123      	cbz	r3, 14da <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    14d0:	f100 0108 	add.w	r1, r0, #8
    14d4:	2203      	movs	r2, #3
    14d6:	4608      	mov	r0, r1
    14d8:	4798      	blx	r3
    14da:	4620      	mov	r0, r4
    14dc:	bd10      	pop	{r4, pc}
    14de:	bf00      	nop
    14e0:	200001e0 	.word	0x200001e0

000014e4 <TeensyTimerTool::GPT_t<0u>::getTimer()>:

    template <unsigned moduleNr>
    IMXRT_GPT_t* const GPT_t<moduleNr>::pGPT = reinterpret_cast<IMXRT_GPT_t*>(moduleNr == 0 ? &IMXRT_GPT1 : &IMXRT_GPT2);

    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    14e4:	b538      	push	{r3, r4, r5, lr}
    {
        if (!isInitialized)
    14e6:	4b1d      	ldr	r3, [pc, #116]	; (155c <TeensyTimerTool::GPT_t<0u>::getTimer()+0x78>)
    14e8:	781a      	ldrb	r2, [r3, #0]
    14ea:	2a00      	cmp	r2, #0
    14ec:	d133      	bne.n	1556 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x72>
        {
            isInitialized = true;

            if (moduleNr == 0) // GPT1 clock settings
                CCM_CCGR1 |= CCM_CCGR1_GPT1_BUS(CCM_CCGR_ON) | CCM_CCGR1_GPT1_SERIAL(CCM_CCGR_ON);
    14ee:	4c1c      	ldr	r4, [pc, #112]	; (1560 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x7c>)
    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            isInitialized = true;
    14f0:	2101      	movs	r1, #1
            if(USE_GPT_PIT_150MHz) // timer clock setting from config.h
                CCM_CSCMR1 &= ~CCM_CSCMR1_PERCLK_CLK_SEL; // 150MHz
            else
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock
    14f2:	4d1c      	ldr	r5, [pc, #112]	; (1564 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x80>)
    14f4:	2242      	movs	r2, #66	; 0x42
    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            isInitialized = true;
    14f6:	7019      	strb	r1, [r3, #0]

            if (moduleNr == 0) // GPT1 clock settings
                CCM_CCGR1 |= CCM_CCGR1_GPT1_BUS(CCM_CCGR_ON) | CCM_CCGR1_GPT1_SERIAL(CCM_CCGR_ON);
    14f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    14fa:	491b      	ldr	r1, [pc, #108]	; (1568 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x84>)
    14fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    1500:	481a      	ldr	r0, [pc, #104]	; (156c <TeensyTimerTool::GPT_t<0u>::getTimer()+0x88>)
    1502:	66e3      	str	r3, [r4, #108]	; 0x6c
                CCM_CCGR0 |= CCM_CCGR0_GPT2_BUS(CCM_CCGR_ON) | CCM_CCGR0_GPT2_SERIAL(CCM_CCGR_ON);

            if(USE_GPT_PIT_150MHz) // timer clock setting from config.h
                CCM_CSCMR1 &= ~CCM_CSCMR1_PERCLK_CLK_SEL; // 150MHz
            else
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz
    1504:	69e3      	ldr	r3, [r4, #28]
    1506:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
    150a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    150e:	61e3      	str	r3, [r4, #28]

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock
    1510:	602a      	str	r2, [r5, #0]

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);
    1512:	4b17      	ldr	r3, [pc, #92]	; (1570 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x8c>)
    1514:	2210      	movs	r2, #16

            channel = new GptChannel(pGPT, &callback);
    1516:	2018      	movs	r0, #24
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);
    1518:	601a      	str	r2, [r3, #0]

            channel = new GptChannel(pGPT, &callback);
    151a:	f002 fbdd 	bl	3cd8 <operator new(unsigned int)>
    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    151e:	69e2      	ldr	r2, [r4, #28]
    1520:	4603      	mov	r3, r0
    };

    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    1522:	4914      	ldr	r1, [pc, #80]	; (1574 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x90>)

    // IMPLEMENTATION ====================================================

    ITimerChannel::ITimerChannel(callback_t* cbStorage)
    {
        this->pCallback = cbStorage;
    1524:	4814      	ldr	r0, [pc, #80]	; (1578 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x94>)
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    1526:	0652      	lsls	r2, r2, #25
    };

    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    1528:	60dd      	str	r5, [r3, #12]
    152a:	6058      	str	r0, [r3, #4]
    152c:	6019      	str	r1, [r3, #0]
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    152e:	d507      	bpl.n	1540 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x5c>
    1530:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    1534:	4a11      	ldr	r2, [pc, #68]	; (157c <TeensyTimerTool::GPT_t<0u>::getTimer()+0x98>)
            return channel;
    1536:	4618      	mov	r0, r3
    1538:	edc3 7a05 	vstr	s15, [r3, #20]
            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);

            channel = new GptChannel(pGPT, &callback);
    153c:	6013      	str	r3, [r2, #0]
            return channel;
    153e:	bd38      	pop	{r3, r4, r5, pc}
    1540:	4a0f      	ldr	r2, [pc, #60]	; (1580 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x9c>)
    1542:	4910      	ldr	r1, [pc, #64]	; (1584 <TeensyTimerTool::GPT_t<0u>::getTimer()+0xa0>)
    1544:	6812      	ldr	r2, [r2, #0]
    1546:	fba1 1202 	umull	r1, r2, r1, r2
    154a:	0c92      	lsrs	r2, r2, #18
    154c:	ee07 2a90 	vmov	s15, r2
    1550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1554:	e7ee      	b.n	1534 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x50>
        }
        return nullptr;
    1556:	2000      	movs	r0, #0
    }
    1558:	bd38      	pop	{r3, r4, r5, pc}
    155a:	bf00      	nop
    155c:	200017b0 	.word	0x200017b0
    1560:	400fc000 	.word	0x400fc000
    1564:	401ec000 	.word	0x401ec000
    1568:	20002000 	.word	0x20002000
    156c:	0000132d 	.word	0x0000132d
    1570:	e000e10c 	.word	0xe000e10c
    1574:	20000198 	.word	0x20000198
    1578:	20001850 	.word	0x20001850
    157c:	200017ac 	.word	0x200017ac
    1580:	200006ac 	.word	0x200006ac
    1584:	431bde83 	.word	0x431bde83

00001588 <TeensyTimerTool::GPT_t<1u>::getTimer()>:

    template <unsigned moduleNr>
    IMXRT_GPT_t* const GPT_t<moduleNr>::pGPT = reinterpret_cast<IMXRT_GPT_t*>(moduleNr == 0 ? &IMXRT_GPT1 : &IMXRT_GPT2);

    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    1588:	b538      	push	{r3, r4, r5, lr}
    {
        if (!isInitialized)
    158a:	4b1d      	ldr	r3, [pc, #116]	; (1600 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x78>)
    158c:	781a      	ldrb	r2, [r3, #0]
    158e:	2a00      	cmp	r2, #0
    1590:	d133      	bne.n	15fa <TeensyTimerTool::GPT_t<1u>::getTimer()+0x72>
            isInitialized = true;

            if (moduleNr == 0) // GPT1 clock settings
                CCM_CCGR1 |= CCM_CCGR1_GPT1_BUS(CCM_CCGR_ON) | CCM_CCGR1_GPT1_SERIAL(CCM_CCGR_ON);
            else // GPT2
                CCM_CCGR0 |= CCM_CCGR0_GPT2_BUS(CCM_CCGR_ON) | CCM_CCGR0_GPT2_SERIAL(CCM_CCGR_ON);
    1592:	4c1c      	ldr	r4, [pc, #112]	; (1604 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x7c>)
    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            isInitialized = true;
    1594:	2101      	movs	r1, #1
            if(USE_GPT_PIT_150MHz) // timer clock setting from config.h
                CCM_CSCMR1 &= ~CCM_CSCMR1_PERCLK_CLK_SEL; // 150MHz
            else
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock
    1596:	4d1c      	ldr	r5, [pc, #112]	; (1608 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x80>)
    1598:	2242      	movs	r2, #66	; 0x42
    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            isInitialized = true;
    159a:	7019      	strb	r1, [r3, #0]

            if (moduleNr == 0) // GPT1 clock settings
                CCM_CCGR1 |= CCM_CCGR1_GPT1_BUS(CCM_CCGR_ON) | CCM_CCGR1_GPT1_SERIAL(CCM_CCGR_ON);
            else // GPT2
                CCM_CCGR0 |= CCM_CCGR0_GPT2_BUS(CCM_CCGR_ON) | CCM_CCGR0_GPT2_SERIAL(CCM_CCGR_ON);
    159c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    159e:	491b      	ldr	r1, [pc, #108]	; (160c <TeensyTimerTool::GPT_t<1u>::getTimer()+0x84>)
    15a0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    15a4:	481a      	ldr	r0, [pc, #104]	; (1610 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x88>)
    15a6:	66a3      	str	r3, [r4, #104]	; 0x68

            if(USE_GPT_PIT_150MHz) // timer clock setting from config.h
                CCM_CSCMR1 &= ~CCM_CSCMR1_PERCLK_CLK_SEL; // 150MHz
            else
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz
    15a8:	69e3      	ldr	r3, [r4, #28]
    15aa:	f8c1 01d4 	str.w	r0, [r1, #468]	; 0x1d4
    15ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    15b2:	61e3      	str	r3, [r4, #28]

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock
    15b4:	602a      	str	r2, [r5, #0]

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);
    15b6:	4b17      	ldr	r3, [pc, #92]	; (1614 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x8c>)
    15b8:	2220      	movs	r2, #32

            channel = new GptChannel(pGPT, &callback);
    15ba:	2018      	movs	r0, #24
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);
    15bc:	601a      	str	r2, [r3, #0]

            channel = new GptChannel(pGPT, &callback);
    15be:	f002 fb8b 	bl	3cd8 <operator new(unsigned int)>
    15c2:	69e2      	ldr	r2, [r4, #28]
    15c4:	4603      	mov	r3, r0
    };

    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    15c6:	4914      	ldr	r1, [pc, #80]	; (1618 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x90>)
    15c8:	4814      	ldr	r0, [pc, #80]	; (161c <TeensyTimerTool::GPT_t<1u>::getTimer()+0x94>)
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    15ca:	0652      	lsls	r2, r2, #25
    };

    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    15cc:	60dd      	str	r5, [r3, #12]
    15ce:	6058      	str	r0, [r3, #4]
    15d0:	6019      	str	r1, [r3, #0]
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    15d2:	d507      	bpl.n	15e4 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x5c>
    15d4:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    15d8:	4a11      	ldr	r2, [pc, #68]	; (1620 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x98>)
            return channel;
    15da:	4618      	mov	r0, r3
    15dc:	edc3 7a05 	vstr	s15, [r3, #20]
            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);

            channel = new GptChannel(pGPT, &callback);
    15e0:	6013      	str	r3, [r2, #0]
            return channel;
    15e2:	bd38      	pop	{r3, r4, r5, pc}
    15e4:	4a0f      	ldr	r2, [pc, #60]	; (1624 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x9c>)
    15e6:	4910      	ldr	r1, [pc, #64]	; (1628 <TeensyTimerTool::GPT_t<1u>::getTimer()+0xa0>)
    15e8:	6812      	ldr	r2, [r2, #0]
    15ea:	fba1 1202 	umull	r1, r2, r1, r2
    15ee:	0c92      	lsrs	r2, r2, #18
    15f0:	ee07 2a90 	vmov	s15, r2
    15f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    15f8:	e7ee      	b.n	15d8 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x50>
        }
        return nullptr;
    15fa:	2000      	movs	r0, #0
    }
    15fc:	bd38      	pop	{r3, r4, r5, pc}
    15fe:	bf00      	nop
    1600:	200017a8 	.word	0x200017a8
    1604:	400fc000 	.word	0x400fc000
    1608:	401f0000 	.word	0x401f0000
    160c:	20002000 	.word	0x20002000
    1610:	00001365 	.word	0x00001365
    1614:	e000e10c 	.word	0xe000e10c
    1618:	20000198 	.word	0x20000198
    161c:	20001840 	.word	0x20001840
    1620:	200017a4 	.word	0x200017a4
    1624:	200006ac 	.word	0x200006ac
    1628:	431bde83 	.word	0x431bde83

0000162c <TeensyTimerTool::TMRChannel::~TMRChannel()>:
    {
        this->regs = regs;
        setPrescaler(TMR_DEFAULT_PSC);
    }

    TMRChannel::~TMRChannel()
    162c:	b510      	push	{r4, lr}
    162e:	4604      	mov	r4, r0
    {
    }
    1630:	2118      	movs	r1, #24
    1632:	f002 fb53 	bl	3cdc <operator delete(void*, unsigned int)>
    1636:	4620      	mov	r0, r4
    1638:	bd10      	pop	{r4, pc}
    163a:	bf00      	nop

0000163c <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()>:
    163c:	4a08      	ldr	r2, [pc, #32]	; (1660 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()+0x24>)

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    163e:	6903      	ldr	r3, [r0, #16]
    1640:	b510      	push	{r4, lr}
    1642:	4604      	mov	r4, r0
    1644:	6002      	str	r2, [r0, #0]
    1646:	b123      	cbz	r3, 1652 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1648:	f100 0108 	add.w	r1, r0, #8
    164c:	2203      	movs	r2, #3
    164e:	4608      	mov	r0, r1
    1650:	4798      	blx	r3
    1652:	4620      	mov	r0, r4
    1654:	2134      	movs	r1, #52	; 0x34
    1656:	f002 fb41 	bl	3cdc <operator delete(void*, unsigned int)>
    165a:	4620      	mov	r0, r4
    165c:	bd10      	pop	{r4, pc}
    165e:	bf00      	nop
    1660:	200001e0 	.word	0x200001e0

00001664 <TeensyTimerTool::ITimerChannel::setPrescaler(int)>:
        virtual errorCode getTriggerReload(float delay, uint64_t* reload) {return postError(errorCode::notImplemented);};

        virtual errorCode start() = 0;
        virtual errorCode stop() = 0;

        virtual errorCode setPrescaler(int  psc) { return postError(errorCode::notImplemented); }
    1664:	2069      	movs	r0, #105	; 0x69
    1666:	f000 be8d 	b.w	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    166a:	bf00      	nop

0000166c <TeensyTimerTool::ITimerChannel::getTriggerReload(float, unsigned long long*)>:
        virtual errorCode begin(callback_t callback, float period, bool oneShot) = 0;
        virtual errorCode trigger(float delay) = 0;
        virtual errorCode triggerDirect(uint32_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode triggerDirect(uint64_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode getTriggerReload(float delay, uint32_t* reload) {return postError(errorCode::notImplemented);};
        virtual errorCode getTriggerReload(float delay, uint64_t* reload) {return postError(errorCode::notImplemented);};
    166c:	2069      	movs	r0, #105	; 0x69
    166e:	f000 be89 	b.w	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    1672:	bf00      	nop

00001674 <TeensyTimerTool::ITimerChannel::getTriggerReload(float, unsigned long*)>:
     public:
        virtual errorCode begin(callback_t callback, float period, bool oneShot) = 0;
        virtual errorCode trigger(float delay) = 0;
        virtual errorCode triggerDirect(uint32_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode triggerDirect(uint64_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode getTriggerReload(float delay, uint32_t* reload) {return postError(errorCode::notImplemented);};
    1674:	2069      	movs	r0, #105	; 0x69
    1676:	f000 be85 	b.w	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    167a:	bf00      	nop

0000167c <TeensyTimerTool::ITimerChannel::triggerDirect(unsigned long long)>:
    {
     public:
        virtual errorCode begin(callback_t callback, float period, bool oneShot) = 0;
        virtual errorCode trigger(float delay) = 0;
        virtual errorCode triggerDirect(uint32_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode triggerDirect(uint64_t reload){ return postError(errorCode::notImplemented); };
    167c:	2069      	movs	r0, #105	; 0x69
    167e:	f000 be81 	b.w	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    1682:	bf00      	nop

00001684 <TeensyTimerTool::ITimerChannel::triggerDirect(unsigned long)>:
    class ITimerChannel
    {
     public:
        virtual errorCode begin(callback_t callback, float period, bool oneShot) = 0;
        virtual errorCode trigger(float delay) = 0;
        virtual errorCode triggerDirect(uint32_t reload){ return postError(errorCode::notImplemented); };
    1684:	2069      	movs	r0, #105	; 0x69
    1686:	f000 be7d 	b.w	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    168a:	bf00      	nop

0000168c <TeensyTimerTool::ITimerChannel::setNextPeriod(unsigned long)>:
        virtual errorCode setPrescaler(int  psc) { return postError(errorCode::notImplemented); }

        virtual float getMaxPeriod() const = 0;
        virtual errorCode setPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setCurrentPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setNextPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
    168c:	2069      	movs	r0, #105	; 0x69
    168e:	f000 be79 	b.w	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    1692:	bf00      	nop

00001694 <TeensyTimerTool::ITimerChannel::setCurrentPeriod(unsigned long)>:

        virtual errorCode setPrescaler(int  psc) { return postError(errorCode::notImplemented); }

        virtual float getMaxPeriod() const = 0;
        virtual errorCode setPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setCurrentPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
    1694:	2069      	movs	r0, #105	; 0x69
    1696:	f000 be75 	b.w	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    169a:	bf00      	nop

0000169c <TeensyTimerTool::ITimerChannel::setPeriod(unsigned long)>:
        virtual errorCode stop() = 0;

        virtual errorCode setPrescaler(int  psc) { return postError(errorCode::notImplemented); }

        virtual float getMaxPeriod() const = 0;
        virtual errorCode setPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
    169c:	2069      	movs	r0, #105	; 0x69
    169e:	f000 be71 	b.w	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    16a2:	bf00      	nop

000016a4 <TeensyTimerTool::TckChannel<unsigned long>::getTriggerReload(float, unsigned long*)>:
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    16a4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 16e8 <TeensyTimerTool::TckChannel<unsigned long>::getTriggerReload(float, unsigned long*)+0x44>
    16a8:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        inline errorCode start() override;
        inline errorCode stop() override;

        inline errorCode trigger(float delay_us) override;
        inline errorCode triggerDirect(CounterType reload) override;
        inline errorCode getTriggerReload(float delay, CounterType* reload) override
    16ac:	b538      	push	{r3, r4, r5, lr}
    16ae:	ed2d 8b02 	vpush	{d8}
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    16b2:	ee87 8a27 	vdiv.f32	s16, s14, s15
        inline errorCode start() override;
        inline errorCode stop() override;

        inline errorCode trigger(float delay_us) override;
        inline errorCode triggerDirect(CounterType reload) override;
        inline errorCode getTriggerReload(float delay, CounterType* reload) override
    16b6:	460d      	mov	r5, r1
    }

    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
    16b8:	eeb4 0ac8 	vcmpe.f32	s0, s16
    16bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    16c0:	dd08      	ble.n	16d4 <TeensyTimerTool::TckChannel<unsigned long>::getTriggerReload(float, unsigned long*)+0x30>
    16c2:	4604      	mov	r4, r0
        {
            microSecond = getMaxMicros();
            postError(errorCode::periodOverflow);
    16c4:	f06f 0063 	mvn.w	r0, #99	; 0x63
    16c8:	f000 fe5c 	bl	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
        {
            microSecond = getMaxMicros();
    16cc:	eeb0 0a48 	vmov.f32	s0, s16
    16d0:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30

        inline errorCode trigger(float delay_us) override;
        inline errorCode triggerDirect(CounterType reload) override;
        inline errorCode getTriggerReload(float delay, CounterType* reload) override
        {
            *reload = microsecondToCycles(delay);
    16d4:	ee20 0a27 	vmul.f32	s0, s0, s15
            return errorCode::OK;
        }
    16d8:	2000      	movs	r0, #0
    16da:	ecbd 8b02 	vpop	{d8}

        inline errorCode trigger(float delay_us) override;
        inline errorCode triggerDirect(CounterType reload) override;
        inline errorCode getTriggerReload(float delay, CounterType* reload) override
        {
            *reload = microsecondToCycles(delay);
    16de:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    16e2:	ed85 0a00 	vstr	s0, [r5]
            return errorCode::OK;
        }
    16e6:	bd38      	pop	{r3, r4, r5, pc}
    16e8:	4f700000 	.word	0x4f700000

000016ec <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()>:
    };

    // IMPLEMENTATION ==================================================================

    template<typename counterType>
    ITimerChannel* TCK_t::getTimer()
    16ec:	b570      	push	{r4, r5, r6, lr}
    {
        if (!isInitialized)
    16ee:	4c16      	ldr	r4, [pc, #88]	; (1748 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x5c>)
    16f0:	7821      	ldrb	r1, [r4, #0]
    16f2:	b989      	cbnz	r1, 1718 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x2c>
    16f4:	2250      	movs	r2, #80	; 0x50
    16f6:	4815      	ldr	r0, [pc, #84]	; (174c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x60>)
    16f8:	f003 f9b4 	bl	4a64 <memset>
        {
            for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
            {
                channels[chNr] = nullptr;
            }
            isInitialized = true;
    16fc:	2301      	movs	r3, #1

            // enable the cycle counter
            ARM_DEMCR |= ARM_DEMCR_TRCENA;
    16fe:	4914      	ldr	r1, [pc, #80]	; (1750 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x64>)
        {
            for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
            {
                channels[chNr] = nullptr;
            }
            isInitialized = true;
    1700:	7023      	strb	r3, [r4, #0]

            // enable the cycle counter
            ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1702:	680b      	ldr	r3, [r1, #0]
            ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1704:	4a13      	ldr	r2, [pc, #76]	; (1754 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x68>)
                channels[chNr] = nullptr;
            }
            isInitialized = true;

            // enable the cycle counter
            ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    170a:	600b      	str	r3, [r1, #0]
            ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    170c:	6813      	ldr	r3, [r2, #0]
    170e:	f043 0301 	orr.w	r3, r3, #1
    1712:	6013      	str	r3, [r2, #0]

            // initialize the yield hook
           #if defined(TEENSYDUINO) && YIELD_TYPE == YIELD_STANDARD
              extern void initYieldHook();
              initYieldHook();
    1714:	f001 f818 	bl	2748 <TeensyTimerTool::initYieldHook()>
    1718:	4b0f      	ldr	r3, [pc, #60]	; (1758 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x6c>)
           #endif
        }

        for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
    171a:	2400      	movs	r4, #0
        {
            if (channels[chNr] == nullptr)
    171c:	f853 5f04 	ldr.w	r5, [r3, #4]!
    1720:	b125      	cbz	r5, 172c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x40>
              extern void initYieldHook();
              initYieldHook();
           #endif
        }

        for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
    1722:	3401      	adds	r4, #1
    1724:	2c14      	cmp	r4, #20
    1726:	d1f9      	bne.n	171c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x30>
                channels[chNr] = new TckChannel<counterType>();
                return channels[chNr];
            }
        }

        return nullptr;
    1728:	2000      	movs	r0, #0
    }
    172a:	bd70      	pop	{r4, r5, r6, pc}

        for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
        {
            if (channels[chNr] == nullptr)
            {
                channels[chNr] = new TckChannel<counterType>();
    172c:	2034      	movs	r0, #52	; 0x34
    };

    // IMPLEMENTATION ==============================================

    template <typename T>
    TckChannel<T>::TckChannel()
    172e:	4e0b      	ldr	r6, [pc, #44]	; (175c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x70>)
    1730:	f002 fad2 	bl	3cd8 <operator new(unsigned int)>
    {
        triggered = false;
        clock = F_CPU / 1'000'000.0f;
    1734:	490a      	ldr	r1, [pc, #40]	; (1760 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x74>)
    1736:	4a05      	ldr	r2, [pc, #20]	; (174c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x60>)

    // IMPLEMENTATION ====================================================

    ITimerChannel::ITimerChannel(callback_t* cbStorage)
    {
        this->pCallback = cbStorage;
    1738:	6045      	str	r5, [r0, #4]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    173a:	6105      	str	r5, [r0, #16]
    // IMPLEMENTATION ==============================================

    template <typename T>
    TckChannel<T>::TckChannel()
    {
        triggered = false;
    173c:	7645      	strb	r5, [r0, #25]
    };

    // IMPLEMENTATION ==============================================

    template <typename T>
    TckChannel<T>::TckChannel()
    173e:	6006      	str	r6, [r0, #0]
    {
        triggered = false;
        clock = F_CPU / 1'000'000.0f;
    1740:	6301      	str	r1, [r0, #48]	; 0x30
    1742:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
                return channels[chNr];
    1746:	bd70      	pop	{r4, r5, r6, pc}
    1748:	20001a50 	.word	0x20001a50
    174c:	20001a00 	.word	0x20001a00
    1750:	e000edfc 	.word	0xe000edfc
    1754:	e0001000 	.word	0xe0001000
    1758:	200019fc 	.word	0x200019fc
    175c:	200001e0 	.word	0x200001e0
    1760:	44160000 	.word	0x44160000

00001764 <TeensyTimerTool::TMR_t<0u>::getTimer()>:
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];

    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    1764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        if (!isInitialized)
    1768:	4e33      	ldr	r6, [pc, #204]	; (1838 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xd4>)
    176a:	7835      	ldrb	r5, [r6, #0]
    176c:	2d00      	cmp	r5, #0
    176e:	d131      	bne.n	17d4 <TeensyTimerTool::TMR_t<0u>::getTimer()+0x70>
    1770:	4f32      	ldr	r7, [pc, #200]	; (183c <TeensyTimerTool::TMR_t<0u>::getTimer()+0xd8>)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
            {
                pTMR->CH[chNr].CTRL = 0x0000;
    1772:	46a8      	mov	r8, r5
    1774:	463c      	mov	r4, r7
    1776:	016a      	lsls	r2, r5, #5
    1778:	4b31      	ldr	r3, [pc, #196]	; (1840 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xdc>)
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    177a:	4621      	mov	r1, r4
    177c:	3501      	adds	r5, #1
    177e:	4413      	add	r3, r2
    1780:	4620      	mov	r0, r4
    1782:	2203      	movs	r2, #3
    1784:	f8a3 800c 	strh.w	r8, [r3, #12]
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    1788:	68a3      	ldr	r3, [r4, #8]
    178a:	b123      	cbz	r3, 1796 <TeensyTimerTool::TMR_t<0u>::getTimer()+0x32>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    178c:	4798      	blx	r3
	    _M_manager = nullptr;
    178e:	f8c4 8008 	str.w	r8, [r4, #8]
	    _M_invoker = nullptr;
    1792:	f8c4 800c 	str.w	r8, [r4, #12]
    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
    1796:	2d04      	cmp	r5, #4
    1798:	f104 0410 	add.w	r4, r4, #16
    179c:	d1eb      	bne.n	1776 <TeensyTimerTool::TMR_t<0u>::getTimer()+0x12>
    179e:	4b29      	ldr	r3, [pc, #164]	; (1844 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xe0>)
    17a0:	4a29      	ldr	r2, [pc, #164]	; (1848 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xe4>)
    17a2:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    17a6:	4a29      	ldr	r2, [pc, #164]	; (184c <TeensyTimerTool::TMR_t<0u>::getTimer()+0xe8>)
    17a8:	2120      	movs	r1, #32
            isInitialized = true;
    17aa:	2301      	movs	r3, #1
            return new TMRChannel(pCH0, &callbacks[0]);
    17ac:	2018      	movs	r0, #24
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    17ae:	6011      	str	r1, [r2, #0]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    17b0:	2500      	movs	r5, #0
            isInitialized = true;
    17b2:	7033      	strb	r3, [r6, #0]
            return new TMRChannel(pCH0, &callbacks[0]);
    17b4:	f002 fa90 	bl	3cd8 <operator new(unsigned int)>
    17b8:	4925      	ldr	r1, [pc, #148]	; (1850 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xec>)
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
        pscBits = 0b1000 | (psc & 0b0111);
    17ba:	220f      	movs	r2, #15
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    17bc:	4e25      	ldr	r6, [pc, #148]	; (1854 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xf0>)
    17be:	680c      	ldr	r4, [r1, #0]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    17c0:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    17c4:	60c5      	str	r5, [r0, #12]
    {
        this->regs = regs;
    17c6:	6084      	str	r4, [r0, #8]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    17c8:	6101      	str	r1, [r0, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    17ca:	6142      	str	r2, [r0, #20]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    17cc:	e880 00c0 	stmia.w	r0, {r6, r7}
    17d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    17d4:	4b1a      	ldr	r3, [pc, #104]	; (1840 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xdc>)
    17d6:	899a      	ldrh	r2, [r3, #12]
    17d8:	b292      	uxth	r2, r2
    17da:	b16a      	cbz	r2, 17f8 <TeensyTimerTool::TMR_t<0u>::getTimer()+0x94>
    17dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    17de:	b292      	uxth	r2, r2
    17e0:	b31a      	cbz	r2, 182a <TeensyTimerTool::TMR_t<0u>::getTimer()+0xc6>
    17e2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    17e6:	b292      	uxth	r2, r2
    17e8:	b30a      	cbz	r2, 182e <TeensyTimerTool::TMR_t<0u>::getTimer()+0xca>
    17ea:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    17ee:	b29b      	uxth	r3, r3
    17f0:	b1fb      	cbz	r3, 1832 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xce>
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
            }
        }
        return nullptr;
    17f2:	2000      	movs	r0, #0
    }
    17f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    17f8:	4614      	mov	r4, r2
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    17fa:	2018      	movs	r0, #24
    17fc:	2600      	movs	r6, #0
    17fe:	f002 fa6b 	bl	3cd8 <operator new(unsigned int)>
    1802:	4a0e      	ldr	r2, [pc, #56]	; (183c <TeensyTimerTool::TMR_t<0u>::getTimer()+0xd8>)
    1804:	4603      	mov	r3, r0
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    1806:	490e      	ldr	r1, [pc, #56]	; (1840 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xdc>)
    1808:	0160      	lsls	r0, r4, #5
    180a:	4f12      	ldr	r7, [pc, #72]	; (1854 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xf0>)
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    180c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1810:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    1814:	4401      	add	r1, r0
        pscBits = 0b1000 | (psc & 0b0111);
    1816:	240f      	movs	r4, #15
    1818:	605a      	str	r2, [r3, #4]
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    181a:	4618      	mov	r0, r3
    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    {
        this->regs = regs;
    181c:	6099      	str	r1, [r3, #8]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    181e:	601f      	str	r7, [r3, #0]
    1820:	60de      	str	r6, [r3, #12]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1822:	611d      	str	r5, [r3, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    1824:	615c      	str	r4, [r3, #20]
    1826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NVIC_ENABLE_IRQ(irq);
            isInitialized = true;
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
    182a:	2401      	movs	r4, #1
    182c:	e7e5      	b.n	17fa <TeensyTimerTool::TMR_t<0u>::getTimer()+0x96>
    182e:	2402      	movs	r4, #2
    1830:	e7e3      	b.n	17fa <TeensyTimerTool::TMR_t<0u>::getTimer()+0x96>
    1832:	2403      	movs	r4, #3
    1834:	e7e1      	b.n	17fa <TeensyTimerTool::TMR_t<0u>::getTimer()+0x96>
    1836:	bf00      	nop
    1838:	200017b4 	.word	0x200017b4
    183c:	20001930 	.word	0x20001930
    1840:	401dc000 	.word	0x401dc000
    1844:	20002000 	.word	0x20002000
    1848:	0000107d 	.word	0x0000107d
    184c:	e000e110 	.word	0xe000e110
    1850:	2000192c 	.word	0x2000192c
    1854:	20000150 	.word	0x20000150

00001858 <TeensyTimerTool::TMR_t<1u>::getTimer()>:
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];

    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    1858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        if (!isInitialized)
    185c:	4e33      	ldr	r6, [pc, #204]	; (192c <TeensyTimerTool::TMR_t<1u>::getTimer()+0xd4>)
    185e:	7835      	ldrb	r5, [r6, #0]
    1860:	2d00      	cmp	r5, #0
    1862:	d131      	bne.n	18c8 <TeensyTimerTool::TMR_t<1u>::getTimer()+0x70>
    1864:	4f32      	ldr	r7, [pc, #200]	; (1930 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xd8>)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
            {
                pTMR->CH[chNr].CTRL = 0x0000;
    1866:	46a8      	mov	r8, r5
    1868:	463c      	mov	r4, r7
    186a:	016a      	lsls	r2, r5, #5
    186c:	4b31      	ldr	r3, [pc, #196]	; (1934 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xdc>)
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    186e:	4621      	mov	r1, r4
    1870:	3501      	adds	r5, #1
    1872:	4413      	add	r3, r2
    1874:	4620      	mov	r0, r4
    1876:	2203      	movs	r2, #3
    1878:	f8a3 800c 	strh.w	r8, [r3, #12]
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    187c:	68a3      	ldr	r3, [r4, #8]
    187e:	b123      	cbz	r3, 188a <TeensyTimerTool::TMR_t<1u>::getTimer()+0x32>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    1880:	4798      	blx	r3
	    _M_manager = nullptr;
    1882:	f8c4 8008 	str.w	r8, [r4, #8]
	    _M_invoker = nullptr;
    1886:	f8c4 800c 	str.w	r8, [r4, #12]
    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
    188a:	2d04      	cmp	r5, #4
    188c:	f104 0410 	add.w	r4, r4, #16
    1890:	d1eb      	bne.n	186a <TeensyTimerTool::TMR_t<1u>::getTimer()+0x12>
    1892:	4b29      	ldr	r3, [pc, #164]	; (1938 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xe0>)
    1894:	4a29      	ldr	r2, [pc, #164]	; (193c <TeensyTimerTool::TMR_t<1u>::getTimer()+0xe4>)
    1896:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    189a:	4a29      	ldr	r2, [pc, #164]	; (1940 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xe8>)
    189c:	2140      	movs	r1, #64	; 0x40
            isInitialized = true;
    189e:	2301      	movs	r3, #1
            return new TMRChannel(pCH0, &callbacks[0]);
    18a0:	2018      	movs	r0, #24
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    18a2:	6011      	str	r1, [r2, #0]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    18a4:	2500      	movs	r5, #0
            isInitialized = true;
    18a6:	7033      	strb	r3, [r6, #0]
            return new TMRChannel(pCH0, &callbacks[0]);
    18a8:	f002 fa16 	bl	3cd8 <operator new(unsigned int)>
    18ac:	4925      	ldr	r1, [pc, #148]	; (1944 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xec>)
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
        pscBits = 0b1000 | (psc & 0b0111);
    18ae:	220f      	movs	r2, #15
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    18b0:	4e25      	ldr	r6, [pc, #148]	; (1948 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xf0>)
    18b2:	680c      	ldr	r4, [r1, #0]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    18b4:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    18b8:	60c5      	str	r5, [r0, #12]
    {
        this->regs = regs;
    18ba:	6084      	str	r4, [r0, #8]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    18bc:	6101      	str	r1, [r0, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    18be:	6142      	str	r2, [r0, #20]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    18c0:	e880 00c0 	stmia.w	r0, {r6, r7}
    18c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    18c8:	4b1a      	ldr	r3, [pc, #104]	; (1934 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xdc>)
    18ca:	899a      	ldrh	r2, [r3, #12]
    18cc:	b292      	uxth	r2, r2
    18ce:	b16a      	cbz	r2, 18ec <TeensyTimerTool::TMR_t<1u>::getTimer()+0x94>
    18d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    18d2:	b292      	uxth	r2, r2
    18d4:	b31a      	cbz	r2, 191e <TeensyTimerTool::TMR_t<1u>::getTimer()+0xc6>
    18d6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    18da:	b292      	uxth	r2, r2
    18dc:	b30a      	cbz	r2, 1922 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xca>
    18de:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    18e2:	b29b      	uxth	r3, r3
    18e4:	b1fb      	cbz	r3, 1926 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xce>
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
            }
        }
        return nullptr;
    18e6:	2000      	movs	r0, #0
    }
    18e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    18ec:	4614      	mov	r4, r2
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    18ee:	2018      	movs	r0, #24
    18f0:	2600      	movs	r6, #0
    18f2:	f002 f9f1 	bl	3cd8 <operator new(unsigned int)>
    18f6:	4a0e      	ldr	r2, [pc, #56]	; (1930 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xd8>)
    18f8:	4603      	mov	r3, r0
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    18fa:	490e      	ldr	r1, [pc, #56]	; (1934 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xdc>)
    18fc:	0160      	lsls	r0, r4, #5
    18fe:	4f12      	ldr	r7, [pc, #72]	; (1948 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xf0>)
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    1900:	eb02 1204 	add.w	r2, r2, r4, lsl #4
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1904:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    1908:	4401      	add	r1, r0
        pscBits = 0b1000 | (psc & 0b0111);
    190a:	240f      	movs	r4, #15
    190c:	605a      	str	r2, [r3, #4]
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    190e:	4618      	mov	r0, r3
    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    {
        this->regs = regs;
    1910:	6099      	str	r1, [r3, #8]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1912:	601f      	str	r7, [r3, #0]
    1914:	60de      	str	r6, [r3, #12]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1916:	611d      	str	r5, [r3, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    1918:	615c      	str	r4, [r3, #20]
    191a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NVIC_ENABLE_IRQ(irq);
            isInitialized = true;
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
    191e:	2401      	movs	r4, #1
    1920:	e7e5      	b.n	18ee <TeensyTimerTool::TMR_t<1u>::getTimer()+0x96>
    1922:	2402      	movs	r4, #2
    1924:	e7e3      	b.n	18ee <TeensyTimerTool::TMR_t<1u>::getTimer()+0x96>
    1926:	2403      	movs	r4, #3
    1928:	e7e1      	b.n	18ee <TeensyTimerTool::TMR_t<1u>::getTimer()+0x96>
    192a:	bf00      	nop
    192c:	200017b3 	.word	0x200017b3
    1930:	200018ec 	.word	0x200018ec
    1934:	401e0000 	.word	0x401e0000
    1938:	20002000 	.word	0x20002000
    193c:	00001129 	.word	0x00001129
    1940:	e000e110 	.word	0xe000e110
    1944:	200018e8 	.word	0x200018e8
    1948:	20000150 	.word	0x20000150

0000194c <TeensyTimerTool::TMR_t<2u>::getTimer()>:
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];

    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    194c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        if (!isInitialized)
    1950:	4e33      	ldr	r6, [pc, #204]	; (1a20 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xd4>)
    1952:	7835      	ldrb	r5, [r6, #0]
    1954:	2d00      	cmp	r5, #0
    1956:	d131      	bne.n	19bc <TeensyTimerTool::TMR_t<2u>::getTimer()+0x70>
    1958:	4f32      	ldr	r7, [pc, #200]	; (1a24 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xd8>)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
            {
                pTMR->CH[chNr].CTRL = 0x0000;
    195a:	46a8      	mov	r8, r5
    195c:	463c      	mov	r4, r7
    195e:	016a      	lsls	r2, r5, #5
    1960:	4b31      	ldr	r3, [pc, #196]	; (1a28 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xdc>)
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    1962:	4621      	mov	r1, r4
    1964:	3501      	adds	r5, #1
    1966:	4413      	add	r3, r2
    1968:	4620      	mov	r0, r4
    196a:	2203      	movs	r2, #3
    196c:	f8a3 800c 	strh.w	r8, [r3, #12]
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    1970:	68a3      	ldr	r3, [r4, #8]
    1972:	b123      	cbz	r3, 197e <TeensyTimerTool::TMR_t<2u>::getTimer()+0x32>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    1974:	4798      	blx	r3
	    _M_manager = nullptr;
    1976:	f8c4 8008 	str.w	r8, [r4, #8]
	    _M_invoker = nullptr;
    197a:	f8c4 800c 	str.w	r8, [r4, #12]
    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
    197e:	2d04      	cmp	r5, #4
    1980:	f104 0410 	add.w	r4, r4, #16
    1984:	d1eb      	bne.n	195e <TeensyTimerTool::TMR_t<2u>::getTimer()+0x12>
    1986:	4b29      	ldr	r3, [pc, #164]	; (1a2c <TeensyTimerTool::TMR_t<2u>::getTimer()+0xe0>)
    1988:	4a29      	ldr	r2, [pc, #164]	; (1a30 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xe4>)
    198a:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    198e:	4a29      	ldr	r2, [pc, #164]	; (1a34 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xe8>)
    1990:	2180      	movs	r1, #128	; 0x80
            isInitialized = true;
    1992:	2301      	movs	r3, #1
            return new TMRChannel(pCH0, &callbacks[0]);
    1994:	2018      	movs	r0, #24
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    1996:	6011      	str	r1, [r2, #0]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1998:	2500      	movs	r5, #0
            isInitialized = true;
    199a:	7033      	strb	r3, [r6, #0]
            return new TMRChannel(pCH0, &callbacks[0]);
    199c:	f002 f99c 	bl	3cd8 <operator new(unsigned int)>
    19a0:	4925      	ldr	r1, [pc, #148]	; (1a38 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xec>)
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
        pscBits = 0b1000 | (psc & 0b0111);
    19a2:	220f      	movs	r2, #15
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    19a4:	4e25      	ldr	r6, [pc, #148]	; (1a3c <TeensyTimerTool::TMR_t<2u>::getTimer()+0xf0>)
    19a6:	680c      	ldr	r4, [r1, #0]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    19a8:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    19ac:	60c5      	str	r5, [r0, #12]
    {
        this->regs = regs;
    19ae:	6084      	str	r4, [r0, #8]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    19b0:	6101      	str	r1, [r0, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    19b2:	6142      	str	r2, [r0, #20]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    19b4:	e880 00c0 	stmia.w	r0, {r6, r7}
    19b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    19bc:	4b1a      	ldr	r3, [pc, #104]	; (1a28 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xdc>)
    19be:	899a      	ldrh	r2, [r3, #12]
    19c0:	b292      	uxth	r2, r2
    19c2:	b16a      	cbz	r2, 19e0 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x94>
    19c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    19c6:	b292      	uxth	r2, r2
    19c8:	b31a      	cbz	r2, 1a12 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xc6>
    19ca:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    19ce:	b292      	uxth	r2, r2
    19d0:	b30a      	cbz	r2, 1a16 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xca>
    19d2:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    19d6:	b29b      	uxth	r3, r3
    19d8:	b1fb      	cbz	r3, 1a1a <TeensyTimerTool::TMR_t<2u>::getTimer()+0xce>
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
            }
        }
        return nullptr;
    19da:	2000      	movs	r0, #0
    }
    19dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    19e0:	4614      	mov	r4, r2
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    19e2:	2018      	movs	r0, #24
    19e4:	2600      	movs	r6, #0
    19e6:	f002 f977 	bl	3cd8 <operator new(unsigned int)>
    19ea:	4a0e      	ldr	r2, [pc, #56]	; (1a24 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xd8>)
    19ec:	4603      	mov	r3, r0
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    19ee:	490e      	ldr	r1, [pc, #56]	; (1a28 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xdc>)
    19f0:	0160      	lsls	r0, r4, #5
    19f2:	4f12      	ldr	r7, [pc, #72]	; (1a3c <TeensyTimerTool::TMR_t<2u>::getTimer()+0xf0>)
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    19f4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    19f8:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    19fc:	4401      	add	r1, r0
        pscBits = 0b1000 | (psc & 0b0111);
    19fe:	240f      	movs	r4, #15
    1a00:	605a      	str	r2, [r3, #4]
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    1a02:	4618      	mov	r0, r3
    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    {
        this->regs = regs;
    1a04:	6099      	str	r1, [r3, #8]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1a06:	601f      	str	r7, [r3, #0]
    1a08:	60de      	str	r6, [r3, #12]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1a0a:	611d      	str	r5, [r3, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    1a0c:	615c      	str	r4, [r3, #20]
    1a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NVIC_ENABLE_IRQ(irq);
            isInitialized = true;
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
    1a12:	2401      	movs	r4, #1
    1a14:	e7e5      	b.n	19e2 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x96>
    1a16:	2402      	movs	r4, #2
    1a18:	e7e3      	b.n	19e2 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x96>
    1a1a:	2403      	movs	r4, #3
    1a1c:	e7e1      	b.n	19e2 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x96>
    1a1e:	bf00      	nop
    1a20:	200017b2 	.word	0x200017b2
    1a24:	200018a8 	.word	0x200018a8
    1a28:	401e4000 	.word	0x401e4000
    1a2c:	20002000 	.word	0x20002000
    1a30:	000011d5 	.word	0x000011d5
    1a34:	e000e110 	.word	0xe000e110
    1a38:	200018a4 	.word	0x200018a4
    1a3c:	20000150 	.word	0x20000150

00001a40 <TeensyTimerTool::TMR_t<3u>::getTimer()>:
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];

    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    1a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        if (!isInitialized)
    1a44:	4e33      	ldr	r6, [pc, #204]	; (1b14 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xd4>)
    1a46:	7835      	ldrb	r5, [r6, #0]
    1a48:	2d00      	cmp	r5, #0
    1a4a:	d132      	bne.n	1ab2 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x72>
    1a4c:	4f32      	ldr	r7, [pc, #200]	; (1b18 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xd8>)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
            {
                pTMR->CH[chNr].CTRL = 0x0000;
    1a4e:	46a8      	mov	r8, r5
    1a50:	463c      	mov	r4, r7
    1a52:	016a      	lsls	r2, r5, #5
    1a54:	4b31      	ldr	r3, [pc, #196]	; (1b1c <TeensyTimerTool::TMR_t<3u>::getTimer()+0xdc>)
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    1a56:	4621      	mov	r1, r4
    1a58:	3501      	adds	r5, #1
    1a5a:	4413      	add	r3, r2
    1a5c:	4620      	mov	r0, r4
    1a5e:	2203      	movs	r2, #3
    1a60:	f8a3 800c 	strh.w	r8, [r3, #12]
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    1a64:	68a3      	ldr	r3, [r4, #8]
    1a66:	b123      	cbz	r3, 1a72 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x32>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    1a68:	4798      	blx	r3
	    _M_manager = nullptr;
    1a6a:	f8c4 8008 	str.w	r8, [r4, #8]
	    _M_invoker = nullptr;
    1a6e:	f8c4 800c 	str.w	r8, [r4, #12]
    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
    1a72:	2d04      	cmp	r5, #4
    1a74:	f104 0410 	add.w	r4, r4, #16
    1a78:	d1eb      	bne.n	1a52 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x12>
    1a7a:	4b29      	ldr	r3, [pc, #164]	; (1b20 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xe0>)
    1a7c:	4a29      	ldr	r2, [pc, #164]	; (1b24 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xe4>)
    1a7e:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    1a82:	4a29      	ldr	r2, [pc, #164]	; (1b28 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xe8>)
    1a84:	f44f 7180 	mov.w	r1, #256	; 0x100
            isInitialized = true;
    1a88:	2301      	movs	r3, #1
            return new TMRChannel(pCH0, &callbacks[0]);
    1a8a:	2018      	movs	r0, #24
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    1a8c:	6011      	str	r1, [r2, #0]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1a8e:	2500      	movs	r5, #0
            isInitialized = true;
    1a90:	7033      	strb	r3, [r6, #0]
            return new TMRChannel(pCH0, &callbacks[0]);
    1a92:	f002 f921 	bl	3cd8 <operator new(unsigned int)>
    1a96:	4925      	ldr	r1, [pc, #148]	; (1b2c <TeensyTimerTool::TMR_t<3u>::getTimer()+0xec>)
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
        pscBits = 0b1000 | (psc & 0b0111);
    1a98:	220f      	movs	r2, #15
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1a9a:	4e25      	ldr	r6, [pc, #148]	; (1b30 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xf0>)
    1a9c:	680c      	ldr	r4, [r1, #0]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1a9e:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1aa2:	60c5      	str	r5, [r0, #12]
    {
        this->regs = regs;
    1aa4:	6084      	str	r4, [r0, #8]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1aa6:	6101      	str	r1, [r0, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    1aa8:	6142      	str	r2, [r0, #20]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1aaa:	e880 00c0 	stmia.w	r0, {r6, r7}
    1aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    1ab2:	4b1a      	ldr	r3, [pc, #104]	; (1b1c <TeensyTimerTool::TMR_t<3u>::getTimer()+0xdc>)
    1ab4:	899a      	ldrh	r2, [r3, #12]
    1ab6:	b292      	uxth	r2, r2
    1ab8:	b16a      	cbz	r2, 1ad6 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x96>
    1aba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    1abc:	b292      	uxth	r2, r2
    1abe:	b31a      	cbz	r2, 1b08 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xc8>
    1ac0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    1ac4:	b292      	uxth	r2, r2
    1ac6:	b30a      	cbz	r2, 1b0c <TeensyTimerTool::TMR_t<3u>::getTimer()+0xcc>
    1ac8:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    1acc:	b29b      	uxth	r3, r3
    1ace:	b1fb      	cbz	r3, 1b10 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xd0>
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
            }
        }
        return nullptr;
    1ad0:	2000      	movs	r0, #0
    }
    1ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    1ad6:	4614      	mov	r4, r2
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    1ad8:	2018      	movs	r0, #24
    1ada:	2600      	movs	r6, #0
    1adc:	f002 f8fc 	bl	3cd8 <operator new(unsigned int)>
    1ae0:	4a0d      	ldr	r2, [pc, #52]	; (1b18 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xd8>)
    1ae2:	4603      	mov	r3, r0
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    1ae4:	490d      	ldr	r1, [pc, #52]	; (1b1c <TeensyTimerTool::TMR_t<3u>::getTimer()+0xdc>)
    1ae6:	0160      	lsls	r0, r4, #5
    1ae8:	4f11      	ldr	r7, [pc, #68]	; (1b30 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xf0>)
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    1aea:	eb02 1204 	add.w	r2, r2, r4, lsl #4
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1aee:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    1af2:	4401      	add	r1, r0
        pscBits = 0b1000 | (psc & 0b0111);
    1af4:	240f      	movs	r4, #15
    1af6:	605a      	str	r2, [r3, #4]
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    1af8:	4618      	mov	r0, r3
    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    {
        this->regs = regs;
    1afa:	6099      	str	r1, [r3, #8]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1afc:	601f      	str	r7, [r3, #0]
    1afe:	60de      	str	r6, [r3, #12]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1b00:	611d      	str	r5, [r3, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    1b02:	615c      	str	r4, [r3, #20]
    1b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NVIC_ENABLE_IRQ(irq);
            isInitialized = true;
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
    1b08:	2401      	movs	r4, #1
    1b0a:	e7e5      	b.n	1ad8 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x98>
    1b0c:	2402      	movs	r4, #2
    1b0e:	e7e3      	b.n	1ad8 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x98>
    1b10:	2403      	movs	r4, #3
    1b12:	e7e1      	b.n	1ad8 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x98>
    1b14:	200017b1 	.word	0x200017b1
    1b18:	20001864 	.word	0x20001864
    1b1c:	401e8000 	.word	0x401e8000
    1b20:	20002000 	.word	0x20002000
    1b24:	00001281 	.word	0x00001281
    1b28:	e000e110 	.word	0xe000e110
    1b2c:	20001860 	.word	0x20001860
    1b30:	20000150 	.word	0x20000150

00001b34 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)>:
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    1b34:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 1ba0 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x6c>
    1b38:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    1b3c:	6803      	ldr	r3, [r0, #0]
        this->triggered = true;
        return errorCode::OK;
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    1b3e:	b570      	push	{r4, r5, r6, lr}
    1b40:	ed2d 8b02 	vpush	{d8}
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    1b44:	ee87 8a27 	vdiv.f32	s16, s14, s15
        this->triggered = true;
        return errorCode::OK;
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    1b48:	4604      	mov	r4, r0
    {
        return triggerDirect(microsecondToCycles(delay));
    1b4a:	689d      	ldr	r5, [r3, #8]
    }

    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
    1b4c:	eeb4 0ac8 	vcmpe.f32	s0, s16
    1b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1b54:	dd07      	ble.n	1b66 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x32>
        {
            microSecond = getMaxMicros();
            postError(errorCode::periodOverflow);
    1b56:	f06f 0063 	mvn.w	r0, #99	; 0x63
    1b5a:	f000 fc13 	bl	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
        {
            microSecond = getMaxMicros();
    1b5e:	eeb0 0a48 	vmov.f32	s0, s16
    1b62:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            postError(errorCode::periodOverflow);
        }
        return (CounterType)(microSecond * clock);
    1b66:	ee20 0a27 	vmul.f32	s0, s0, s15
    1b6a:	4b0e      	ldr	r3, [pc, #56]	; (1ba4 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x70>)
    1b6c:	429d      	cmp	r5, r3
    1b6e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    1b72:	ee17 1a90 	vmov	r1, s15
    1b76:	d10c      	bne.n	1b92 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x5e>
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    1b78:	4a0b      	ldr	r2, [pc, #44]	; (1ba8 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x74>)
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
        this->nextPeriod = reload;
        this->currentPeriod = this->nextPeriod;
        this->triggered = true;
    1b7a:	2301      	movs	r3, #1

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    1b7c:	2000      	movs	r0, #0
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    1b7e:	6812      	ldr	r2, [r2, #0]

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
        this->nextPeriod = reload;
    1b80:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    }

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
    1b84:	61e2      	str	r2, [r4, #28]
        this->nextPeriod = reload;
        this->currentPeriod = this->nextPeriod;
    1b86:	edc4 7a08 	vstr	s15, [r4, #32]
        this->triggered = true;
    1b8a:	7663      	strb	r3, [r4, #25]

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    1b8c:	ecbd 8b02 	vpop	{d8}
    1b90:	bd70      	pop	{r4, r5, r6, pc}
    1b92:	ecbd 8b02 	vpop	{d8}
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    1b96:	4620      	mov	r0, r4
    1b98:	462b      	mov	r3, r5
    }
    1b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    1b9e:	4718      	bx	r3
    1ba0:	4f700000 	.word	0x4f700000
    1ba4:	0000141d 	.word	0x0000141d
    1ba8:	e0001004 	.word	0xe0001004

00001bac <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1bac:	eddf 7a4c 	vldr	s15, [pc, #304]	; 1ce0 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x134>

    errorCode TMRChannel::begin(callback_t cb, float tcnt, bool periodic)
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload;
        if (t > 0xFFFF)
    1bb0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 1ce4 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x138>
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1bb4:	ee20 0a27 	vmul.f32	s0, s0, s15
    1bb8:	edd0 7a04 	vldr	s15, [r0, #16]
    // {
    //     return begin(cb, (float)tcnt, periodic);
    // }

    errorCode TMRChannel::begin(callback_t cb, float tcnt, bool periodic)
    {
    1bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1bc0:	ed2d 8b02 	vpush	{d8}
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1bc4:	ee80 8a27 	vdiv.f32	s16, s0, s15
    // {
    //     return begin(cb, (float)tcnt, periodic);
    // }

    errorCode TMRChannel::begin(callback_t cb, float tcnt, bool periodic)
    {
    1bc8:	b08a      	sub	sp, #40	; 0x28
    1bca:	4605      	mov	r5, r0
    1bcc:	460e      	mov	r6, r1
    1bce:	4617      	mov	r7, r2
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload;
        if (t > 0xFFFF)
    1bd0:	eeb4 8ac7 	vcmpe.f32	s16, s14
    1bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1bd8:	dc78      	bgt.n	1ccc <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x120>
        {
            postError(errorCode::periodOverflow);
            reload = 0xFFFE;
        } else
        {
            reload = (uint16_t)t - 1;
    1bda:	eefc 7ac8 	vcvt.u32.f32	s15, s16
    1bde:	ee17 2a90 	vmov	r2, s15
    1be2:	3a01      	subs	r2, #1
    1be4:	b292      	uxth	r2, r2
        }

        regs->CTRL = 0x0000;
    1be6:	68ab      	ldr	r3, [r5, #8]
    1be8:	2400      	movs	r4, #0
    1bea:	f8d6 8008 	ldr.w	r8, [r6, #8]
    1bee:	819c      	strh	r4, [r3, #12]
        regs->LOAD = 0x0000;
    1bf0:	80dc      	strh	r4, [r3, #6]
        regs->COMP1 = reload;
    1bf2:	801a      	strh	r2, [r3, #0]
        regs->CMPLD1 = reload;
    1bf4:	821a      	strh	r2, [r3, #16]
        regs->CNTR = 0x0000;
    1bf6:	815c      	strh	r4, [r3, #10]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    1bf8:	9404      	str	r4, [sp, #16]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    1bfa:	f1b8 0f00 	cmp.w	r8, #0
    1bfe:	d060      	beq.n	1cc2 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x116>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    1c00:	2202      	movs	r2, #2
    1c02:	4631      	mov	r1, r6
    1c04:	a802      	add	r0, sp, #8
    1c06:	47c0      	blx	r8
	  _M_invoker = __x._M_invoker;
    1c08:	68f2      	ldr	r2, [r6, #12]
	  _M_manager = __x._M_manager;
    1c0a:	68b3      	ldr	r3, [r6, #8]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    1c0c:	ae06      	add	r6, sp, #24
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    1c0e:	9408      	str	r4, [sp, #32]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
    1c10:	9205      	str	r2, [sp, #20]
	  _M_manager = __x._M_manager;
    1c12:	9304      	str	r3, [sp, #16]
    1c14:	686c      	ldr	r4, [r5, #4]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    1c16:	b13b      	cbz	r3, 1c28 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x7c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    1c18:	2202      	movs	r2, #2
    1c1a:	a902      	add	r1, sp, #8
    1c1c:	4630      	mov	r0, r6
    1c1e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    1c20:	9a05      	ldr	r2, [sp, #20]
	  _M_manager = __x._M_manager;
    1c22:	9b04      	ldr	r3, [sp, #16]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
    1c24:	9209      	str	r2, [sp, #36]	; 0x24
	  _M_manager = __x._M_manager;
    1c26:	9308      	str	r3, [sp, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    1c28:	68e2      	ldr	r2, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1c2a:	e896 0003 	ldmia.w	r6, {r0, r1}
    1c2e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    1c32:	e894 0003 	ldmia.w	r4, {r0, r1}
    1c36:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    1c3a:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    1c3e:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    1c40:	e884 0003 	stmia.w	r4, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1c44:	9908      	ldr	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
    1c46:	9308      	str	r3, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
    1c48:	60a1      	str	r1, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1c4a:	9909      	ldr	r1, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
    1c4c:	9209      	str	r2, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
    1c4e:	60e1      	str	r1, [r4, #12]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1c50:	b11b      	cbz	r3, 1c5a <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0xae>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1c52:	2203      	movs	r2, #3
    1c54:	4631      	mov	r1, r6
    1c56:	4630      	mov	r0, r6
    1c58:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1c5a:	9b04      	ldr	r3, [sp, #16]
    1c5c:	b11b      	cbz	r3, 1c66 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0xba>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1c5e:	a902      	add	r1, sp, #8
    1c60:	2203      	movs	r2, #3
    1c62:	4608      	mov	r0, r1
    1c64:	4798      	blx	r3
        setCallback(cb);

        if (!periodic)
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    1c66:	696b      	ldr	r3, [r5, #20]
        regs->COMP1 = reload;
        regs->CMPLD1 = reload;
        regs->CNTR = 0x0000;
        setCallback(cb);

        if (!periodic)
    1c68:	bb47      	cbnz	r7, 1cbc <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x110>
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    1c6a:	f242 0160 	movw	r1, #8288	; 0x2060

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;
    1c6e:	025b      	lsls	r3, r3, #9
    1c70:	68aa      	ldr	r2, [r5, #8]
    1c72:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
    1c76:	4319      	orrs	r1, r3

        start();
    1c78:	682b      	ldr	r3, [r5, #0]

        if (!periodic)
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;
    1c7a:	8191      	strh	r1, [r2, #12]

        start();
    1c7c:	699b      	ldr	r3, [r3, #24]
    1c7e:	491a      	ldr	r1, [pc, #104]	; (1ce8 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x13c>)
    1c80:	428b      	cmp	r3, r1
    1c82:	d12a      	bne.n	1cda <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x12e>
    {
    }

    errorCode TMRChannel::start()
    {
        regs->CNTR = 0x0000;
    1c84:	2300      	movs	r3, #0
    1c86:	8153      	strh	r3, [r2, #10]
        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1c88:	8a93      	ldrh	r3, [r2, #20]
    1c8a:	f023 0310 	bic.w	r3, r3, #16
    1c8e:	041b      	lsls	r3, r3, #16
    1c90:	0c1b      	lsrs	r3, r3, #16
    1c92:	8293      	strh	r3, [r2, #20]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;
    1c94:	8a93      	ldrh	r3, [r2, #20]
    1c96:	b29b      	uxth	r3, r3
    1c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1c9c:	8293      	strh	r3, [r2, #20]

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;

        start();
        return t > 0xFFFF ? errorCode::periodOverflow : errorCode::OK;
    1c9e:	eddf 7a11 	vldr	s15, [pc, #68]	; 1ce4 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x138>
    1ca2:	eeb4 8ae7 	vcmpe.f32	s16, s15
    1ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1caa:	bfcc      	ite	gt
    1cac:	f06f 0063 	mvngt.w	r0, #99	; 0x63
    1cb0:	2000      	movle	r0, #0
    }
    1cb2:	b00a      	add	sp, #40	; 0x28
    1cb4:	ecbd 8b02 	vpop	{d8}
    1cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        if (!periodic)
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;
    1cbc:	f242 0120 	movw	r1, #8224	; 0x2020
    1cc0:	e7d5      	b.n	1c6e <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0xc2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    1cc2:	f8cd 8020 	str.w	r8, [sp, #32]
    1cc6:	ae06      	add	r6, sp, #24
    1cc8:	686c      	ldr	r4, [r5, #4]
    1cca:	e7ad      	b.n	1c28 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x7c>
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload;
        if (t > 0xFFFF)
        {
            postError(errorCode::periodOverflow);
    1ccc:	f06f 0063 	mvn.w	r0, #99	; 0x63
    1cd0:	f000 fb58 	bl	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
            reload = 0xFFFE;
    1cd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    1cd8:	e785      	b.n	1be6 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x3a>
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;

        start();
    1cda:	4628      	mov	r0, r5
    1cdc:	4798      	blx	r3
    1cde:	e7de      	b.n	1c9e <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0xf2>
    1ce0:	43160000 	.word	0x43160000
    1ce4:	477fff00 	.word	0x477fff00
    1ce8:	00000e25 	.word	0x00000e25

00001cec <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)>:

        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
    1cec:	b538      	push	{r3, r4, r5, lr}
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    1cee:	ed9f 7a18 	vldr	s14, [pc, #96]	; 1d50 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x64>

        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
    1cf2:	460d      	mov	r5, r1
    1cf4:	ed2d 8b02 	vpush	{d8}
    1cf8:	eeb0 8a40 	vmov.f32	s16, s0
    1cfc:	ed90 0a05 	vldr	s0, [r0, #20]
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    1d00:	eec7 7a00 	vdiv.f32	s15, s14, s0
        return errorCode::OK;
    }

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
    1d04:	eeb4 8ae7 	vcmpe.f32	s16, s15
    1d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1d0c:	dc0b      	bgt.n	1d26 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x3a>
        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
        *reload = microsecondToCycles(delay);
    1d0e:	ee28 8a00 	vmul.f32	s16, s16, s0
        return errorCode::OK;
    }
    1d12:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
        *reload = microsecondToCycles(delay);
    1d14:	eebc 8ac8 	vcvt.u32.f32	s16, s16
    1d18:	ee18 3a10 	vmov	r3, s16
        return errorCode::OK;
    }
    1d1c:	ecbd 8b02 	vpop	{d8}
        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
        *reload = microsecondToCycles(delay);
    1d20:	3b01      	subs	r3, #1
    1d22:	602b      	str	r3, [r5, #0]
        return errorCode::OK;
    }
    1d24:	bd38      	pop	{r3, r4, r5, pc}

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    1d26:	6803      	ldr	r3, [r0, #0]
    1d28:	4604      	mov	r4, r0
    1d2a:	4a0a      	ldr	r2, [pc, #40]	; (1d54 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x68>)
    1d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d2e:	4293      	cmp	r3, r2
    1d30:	d10a      	bne.n	1d48 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x5c>

        inline errorCode trigger(float delay) override;
        inline errorCode triggerDirect(uint32_t delay) override;
        inline errorCode getTriggerReload(float delay, uint32_t* reload) override;

        inline float getMaxPeriod() const override { return getMaxMicros() / 1E6; }
    1d32:	ed9f 7a09 	vldr	s14, [pc, #36]	; 1d58 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x6c>
    1d36:	ee87 8a87 	vdiv.f32	s16, s15, s14
    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
    1d3a:	f06f 0063 	mvn.w	r0, #99	; 0x63
    1d3e:	f000 fb21 	bl	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    1d42:	ed94 0a05 	vldr	s0, [r4, #20]
    1d46:	e7e2      	b.n	1d0e <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x22>

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    1d48:	4798      	blx	r3
    1d4a:	eeb0 8a40 	vmov.f32	s16, s0
    1d4e:	e7f4      	b.n	1d3a <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x4e>
    1d50:	4f800000 	.word	0x4f800000
    1d54:	00001011 	.word	0x00001011
    1d58:	49742400 	.word	0x49742400

00001d5c <TeensyTimerTool::GptChannel::trigger(float)>:
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    1d5c:	eddf 6a22 	vldr	s13, [pc, #136]	; 1de8 <TeensyTimerTool::GptChannel::trigger(float)+0x8c>
    1d60:	edd0 7a05 	vldr	s15, [r0, #20]
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    1d64:	6803      	ldr	r3, [r0, #0]
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    1d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        stop();
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
    1d6a:	b570      	push	{r4, r5, r6, lr}
    1d6c:	4604      	mov	r4, r0
        return triggerDirect(microsecondToCycles(delay));
    1d6e:	689d      	ldr	r5, [r3, #8]
        stop();
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
    1d70:	ed2d 8b02 	vpush	{d8}
        return errorCode::OK;
    }

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
    1d74:	eeb4 0ac7 	vcmpe.f32	s0, s14
    1d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1d7c:	dc1a      	bgt.n	1db4 <TeensyTimerTool::GptChannel::trigger(float)+0x58>
    1d7e:	eeb0 8a40 	vmov.f32	s16, s0
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
        }
        return (uint32_t)(clock * micros) - 1;
    1d82:	ee67 7a88 	vmul.f32	s15, s15, s16
    1d86:	4b19      	ldr	r3, [pc, #100]	; (1dec <TeensyTimerTool::GptChannel::trigger(float)+0x90>)
    1d88:	429d      	cmp	r5, r3
    1d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1d8e:	ee17 2a90 	vmov	r2, s15
    1d92:	f102 31ff 	add.w	r1, r2, #4294967295
    1d96:	d11c      	bne.n	1dd2 <TeensyTimerTool::GptChannel::trigger(float)+0x76>
        return triggerDirect(microsecondToCycles(delay));
    }

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
    1d98:	68e3      	ldr	r3, [r4, #12]
    1d9a:	203f      	movs	r0, #63	; 0x3f
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    1d9c:	2201      	movs	r2, #1
        return triggerDirect(microsecondToCycles(delay));
    }

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
    1d9e:	6098      	str	r0, [r3, #8]
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    1da0:	2000      	movs	r0, #0

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    1da2:	60da      	str	r2, [r3, #12]
        regs->OCR1 = reload;     // set overflow value
    1da4:	6119      	str	r1, [r3, #16]
        regs->CR |= GPT_CR_EN;   // enable timer
    1da6:	681a      	ldr	r2, [r3, #0]
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    1da8:	ecbd 8b02 	vpop	{d8}
    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
        regs->OCR1 = reload;     // set overflow value
        regs->CR |= GPT_CR_EN;   // enable timer
    1dac:	f042 0201 	orr.w	r2, r2, #1
    1db0:	601a      	str	r2, [r3, #0]
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    1db2:	bd70      	pop	{r4, r5, r6, pc}

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    1db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1db6:	4a0e      	ldr	r2, [pc, #56]	; (1df0 <TeensyTimerTool::GptChannel::trigger(float)+0x94>)
    1db8:	4293      	cmp	r3, r2
    1dba:	d111      	bne.n	1de0 <TeensyTimerTool::GptChannel::trigger(float)+0x84>

        inline errorCode trigger(float delay) override;
        inline errorCode triggerDirect(uint32_t delay) override;
        inline errorCode getTriggerReload(float delay, uint32_t* reload) override;

        inline float getMaxPeriod() const override { return getMaxMicros() / 1E6; }
    1dbc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 1df4 <TeensyTimerTool::GptChannel::trigger(float)+0x98>
    1dc0:	ee87 8a27 	vdiv.f32	s16, s14, s15
    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
    1dc4:	f06f 0063 	mvn.w	r0, #99	; 0x63
    1dc8:	f000 fadc 	bl	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    1dcc:	edd4 7a05 	vldr	s15, [r4, #20]
    1dd0:	e7d7      	b.n	1d82 <TeensyTimerTool::GptChannel::trigger(float)+0x26>
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    1dd2:	ecbd 8b02 	vpop	{d8}
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    1dd6:	4620      	mov	r0, r4
    1dd8:	462b      	mov	r3, r5
    }
    1dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    1dde:	4718      	bx	r3

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    1de0:	4798      	blx	r3
    1de2:	eeb0 8a40 	vmov.f32	s16, s0
    1de6:	e7ed      	b.n	1dc4 <TeensyTimerTool::GptChannel::trigger(float)+0x68>
    1de8:	4f800000 	.word	0x4f800000
    1dec:	0000105d 	.word	0x0000105d
    1df0:	00001011 	.word	0x00001011
    1df4:	49742400 	.word	0x49742400

00001df8 <TeensyTimerTool::GptChannel::~GptChannel()>:
        regs->CR &= ~GPT_CR_EN; // disable timer
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    1df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dfa:	4604      	mov	r4, r0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1dfc:	68c0      	ldr	r0, [r0, #12]
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    1dfe:	b08b      	sub	sp, #44	; 0x2c
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
        regs->IR = 0;
    1e00:	2100      	movs	r1, #0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1e02:	6806      	ldr	r6, [r0, #0]
    1e04:	6863      	ldr	r3, [r4, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1e06:	ad06      	add	r5, sp, #24
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    1e08:	4f16      	ldr	r7, [pc, #88]	; (1e64 <TeensyTimerTool::GptChannel::~GptChannel()+0x6c>)
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1e0a:	f026 0601 	bic.w	r6, r6, #1
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    1e0e:	6027      	str	r7, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
    1e10:	68df      	ldr	r7, [r3, #12]
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1e12:	6006      	str	r6, [r0, #0]
    1e14:	9108      	str	r1, [sp, #32]
        regs->IR = 0;
    1e16:	60c1      	str	r1, [r0, #12]
    1e18:	9104      	str	r1, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1e1a:	e895 0003 	ldmia.w	r5, {r0, r1}
    1e1e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    1e22:	e893 0003 	ldmia.w	r3, {r0, r1}
    1e26:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    1e2a:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    1e2e:	689e      	ldr	r6, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    1e30:	e883 0003 	stmia.w	r3, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1e34:	9a08      	ldr	r2, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
    1e36:	9608      	str	r6, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
    1e38:	609a      	str	r2, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
    1e3c:	9709      	str	r7, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
    1e3e:	60da      	str	r2, [r3, #12]

    ~_Function_base()
    {
      if (_M_manager)
    1e40:	b11e      	cbz	r6, 1e4a <TeensyTimerTool::GptChannel::~GptChannel()+0x52>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1e42:	2203      	movs	r2, #3
    1e44:	4629      	mov	r1, r5
    1e46:	4628      	mov	r0, r5
    1e48:	47b0      	blx	r6

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1e4a:	9b04      	ldr	r3, [sp, #16]
    1e4c:	b11b      	cbz	r3, 1e56 <TeensyTimerTool::GptChannel::~GptChannel()+0x5e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1e4e:	a902      	add	r1, sp, #8
    1e50:	2203      	movs	r2, #3
    1e52:	4608      	mov	r0, r1
    1e54:	4798      	blx	r3

    GptChannel::~GptChannel()
    {
        stop();
        setCallback(nullptr);
    }
    1e56:	4620      	mov	r0, r4
    1e58:	2118      	movs	r1, #24
    1e5a:	f001 ff3f 	bl	3cdc <operator delete(void*, unsigned int)>
    1e5e:	4620      	mov	r0, r4
    1e60:	b00b      	add	sp, #44	; 0x2c
    1e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e64:	20000198 	.word	0x20000198

00001e68 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)>:
    }

    template <typename T>
    errorCode TckChannel<T>::begin(callback_t cb, float period, bool periodic)
    {
        this->triggered = false;
    1e68:	2300      	movs	r3, #0
        triggered = false;
        clock = F_CPU / 1'000'000.0f;
    }

    template <typename T>
    errorCode TckChannel<T>::begin(callback_t cb, float period, bool periodic)
    1e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e6c:	4604      	mov	r4, r0
    1e6e:	460e      	mov	r6, r1
    1e70:	ed2d 8b02 	vpush	{d8}
    {
        this->triggered = false;

        this->periodic = periodic;
    1e74:	7602      	strb	r2, [r0, #24]
        triggered = false;
        clock = F_CPU / 1'000'000.0f;
    }

    template <typename T>
    errorCode TckChannel<T>::begin(callback_t cb, float period, bool periodic)
    1e76:	b087      	sub	sp, #28
    {
        this->triggered = false;
    1e78:	7643      	strb	r3, [r0, #25]

        this->periodic = periodic;
        if (periodic)
    1e7a:	b192      	cbz	r2, 1ea2 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x3a>
    1e7c:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    1e80:	ed9f 7a23 	vldr	s14, [pc, #140]	; 1f10 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0xa8>
    1e84:	ee87 8a27 	vdiv.f32	s16, s14, s15
    }

    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
    1e88:	eeb4 0ac8 	vcmpe.f32	s0, s16
    1e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1e90:	dc34      	bgt.n	1efc <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x94>
        {
            microSecond = getMaxMicros();
            postError(errorCode::periodOverflow);
        }
        return (CounterType)(microSecond * clock);
    1e92:	ee20 0a27 	vmul.f32	s0, s0, s15
    1e96:	eefc 7ac0 	vcvt.u32.f32	s15, s0
        this->triggered = false;

        this->periodic = periodic;
        if (periodic)
        {
            this->currentPeriod = microsecondToCycles(period);
    1e9a:	edc4 7a08 	vstr	s15, [r4, #32]
            this->nextPeriod = this->currentPeriod;
    1e9e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    1ea2:	2200      	movs	r2, #0
    1ea4:	68b3      	ldr	r3, [r6, #8]
    1ea6:	9204      	str	r2, [sp, #16]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    1ea8:	b323      	cbz	r3, 1ef4 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x8c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    1eaa:	ad02      	add	r5, sp, #8
    1eac:	4631      	mov	r1, r6
    1eae:	2202      	movs	r2, #2
    1eb0:	4628      	mov	r0, r5
    1eb2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    1eb4:	68f7      	ldr	r7, [r6, #12]
	  _M_manager = __x._M_manager;
    1eb6:	68b6      	ldr	r6, [r6, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    1eb8:	f104 0308 	add.w	r3, r4, #8
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1ebc:	e895 0003 	ldmia.w	r5, {r0, r1}
    1ec0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    1ec4:	e893 0003 	ldmia.w	r3, {r0, r1}
    1ec8:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    1ecc:	e89d 0003 	ldmia.w	sp, {r0, r1}
    1ed0:	e883 0003 	stmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    1ed4:	6923      	ldr	r3, [r4, #16]
    1ed6:	6962      	ldr	r2, [r4, #20]
    1ed8:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
    1eda:	6126      	str	r6, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    1edc:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
    1ede:	6167      	str	r7, [r4, #20]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1ee0:	b11b      	cbz	r3, 1eea <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x82>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1ee2:	2203      	movs	r2, #3
    1ee4:	4629      	mov	r1, r5
    1ee6:	4628      	mov	r0, r5
    1ee8:	4798      	blx	r3
        }
        this->callback = cb;

        return errorCode::OK;
    }
    1eea:	2000      	movs	r0, #0
    1eec:	b007      	add	sp, #28
    1eee:	ecbd 8b02 	vpop	{d8}
    1ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    1ef4:	461e      	mov	r6, r3
    1ef6:	9f05      	ldr	r7, [sp, #20]
    1ef8:	ad02      	add	r5, sp, #8
    1efa:	e7dd      	b.n	1eb8 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x50>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
        {
            microSecond = getMaxMicros();
            postError(errorCode::periodOverflow);
    1efc:	f06f 0063 	mvn.w	r0, #99	; 0x63
    1f00:	f000 fa40 	bl	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
        {
            microSecond = getMaxMicros();
    1f04:	eeb0 0a48 	vmov.f32	s0, s16
    1f08:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    1f0c:	e7c1      	b.n	1e92 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x2a>
    1f0e:	bf00      	nop
    1f10:	4f700000 	.word	0x4f700000

00001f14 <TeensyTimerTool::GptChannel::~GptChannel()>:
        regs->CR &= ~GPT_CR_EN; // disable timer
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    1f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f16:	4605      	mov	r5, r0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1f18:	68c0      	ldr	r0, [r0, #12]
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    1f1a:	b08b      	sub	sp, #44	; 0x2c
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
        regs->IR = 0;
    1f1c:	2100      	movs	r1, #0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1f1e:	6806      	ldr	r6, [r0, #0]
    1f20:	686b      	ldr	r3, [r5, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1f22:	ac06      	add	r4, sp, #24
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    1f24:	4f14      	ldr	r7, [pc, #80]	; (1f78 <TeensyTimerTool::GptChannel::~GptChannel()+0x64>)
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1f26:	f026 0601 	bic.w	r6, r6, #1
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    1f2a:	602f      	str	r7, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
    1f2c:	68df      	ldr	r7, [r3, #12]
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1f2e:	6006      	str	r6, [r0, #0]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    1f30:	9108      	str	r1, [sp, #32]
        regs->IR = 0;
    1f32:	60c1      	str	r1, [r0, #12]
    1f34:	9104      	str	r1, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1f36:	e894 0003 	ldmia.w	r4, {r0, r1}
    1f3a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    1f3e:	e893 0003 	ldmia.w	r3, {r0, r1}
    1f42:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    1f46:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    1f4a:	689e      	ldr	r6, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    1f4c:	e883 0003 	stmia.w	r3, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1f50:	9a08      	ldr	r2, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
    1f52:	9608      	str	r6, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
    1f54:	609a      	str	r2, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
    1f58:	9709      	str	r7, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
    1f5a:	60da      	str	r2, [r3, #12]

    ~_Function_base()
    {
      if (_M_manager)
    1f5c:	b11e      	cbz	r6, 1f66 <TeensyTimerTool::GptChannel::~GptChannel()+0x52>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1f5e:	2203      	movs	r2, #3
    1f60:	4621      	mov	r1, r4
    1f62:	4620      	mov	r0, r4
    1f64:	47b0      	blx	r6

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1f66:	9b04      	ldr	r3, [sp, #16]
    1f68:	b11b      	cbz	r3, 1f72 <TeensyTimerTool::GptChannel::~GptChannel()+0x5e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1f6a:	a902      	add	r1, sp, #8
    1f6c:	2203      	movs	r2, #3
    1f6e:	4608      	mov	r0, r1
    1f70:	4798      	blx	r3

    GptChannel::~GptChannel()
    {
        stop();
        setCallback(nullptr);
    }
    1f72:	4628      	mov	r0, r5
    1f74:	b00b      	add	sp, #44	; 0x2c
    1f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f78:	20000198 	.word	0x20000198

00001f7c <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)>:
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    }

    errorCode GptChannel::begin(callback_t cb, float period, bool periodic)
    {
    1f7c:	b570      	push	{r4, r5, r6, lr}
    1f7e:	4604      	mov	r4, r0
    1f80:	b08c      	sub	sp, #48	; 0x30
    1f82:	460d      	mov	r5, r1
        this->periodic = periodic;
    1f84:	7202      	strb	r2, [r0, #8]
        if (periodic)
    1f86:	2a00      	cmp	r2, #0
    1f88:	d13f      	bne.n	200a <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x8e>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    1f8a:	2600      	movs	r6, #0
    1f8c:	68ab      	ldr	r3, [r5, #8]
    1f8e:	9606      	str	r6, [sp, #24]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    1f90:	2b00      	cmp	r3, #0
    1f92:	d036      	beq.n	2002 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x86>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    1f94:	2202      	movs	r2, #2
    1f96:	4629      	mov	r1, r5
    1f98:	a804      	add	r0, sp, #16
    1f9a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    1f9c:	68ea      	ldr	r2, [r5, #12]
	  _M_manager = __x._M_manager;
    1f9e:	68ab      	ldr	r3, [r5, #8]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    1fa0:	ad08      	add	r5, sp, #32
    1fa2:	6864      	ldr	r4, [r4, #4]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    1fa4:	960a      	str	r6, [sp, #40]	; 0x28
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
    1fa6:	9207      	str	r2, [sp, #28]
	  _M_manager = __x._M_manager;
    1fa8:	9306      	str	r3, [sp, #24]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    1faa:	b13b      	cbz	r3, 1fbc <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x40>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    1fac:	2202      	movs	r2, #2
    1fae:	a904      	add	r1, sp, #16
    1fb0:	4628      	mov	r0, r5
    1fb2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    1fb4:	9a07      	ldr	r2, [sp, #28]
	  _M_manager = __x._M_manager;
    1fb6:	9b06      	ldr	r3, [sp, #24]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
    1fb8:	920b      	str	r2, [sp, #44]	; 0x2c
	  _M_manager = __x._M_manager;
    1fba:	930a      	str	r3, [sp, #40]	; 0x28
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1fbc:	ab02      	add	r3, sp, #8
      __a = _GLIBCXX_MOVE(__b);
    1fbe:	68e6      	ldr	r6, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1fc0:	e895 0003 	ldmia.w	r5, {r0, r1}
    1fc4:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    1fc8:	e894 0003 	ldmia.w	r4, {r0, r1}
    1fcc:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    1fd0:	e893 0003 	ldmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    1fd4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    1fd6:	e884 0003 	stmia.w	r4, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1fda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
    1fdc:	930a      	str	r3, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
    1fde:	60a2      	str	r2, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1fe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
    1fe2:	960b      	str	r6, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
    1fe4:	60e2      	str	r2, [r4, #12]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1fe6:	b11b      	cbz	r3, 1ff0 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x74>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1fe8:	2203      	movs	r2, #3
    1fea:	4629      	mov	r1, r5
    1fec:	4628      	mov	r0, r5
    1fee:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1ff0:	9b06      	ldr	r3, [sp, #24]
    1ff2:	b11b      	cbz	r3, 1ffc <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x80>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1ff4:	a904      	add	r1, sp, #16
    1ff6:	2203      	movs	r2, #3
    1ff8:	4608      	mov	r0, r1
    1ffa:	4798      	blx	r3
            regs->OCR1 = reload;
        }
        setCallback(cb);

        return errorCode::OK;
    }
    1ffc:	2000      	movs	r0, #0
    1ffe:	b00c      	add	sp, #48	; 0x30
    2000:	bd70      	pop	{r4, r5, r6, pc}
    2002:	6864      	ldr	r4, [r4, #4]
    2004:	ad08      	add	r5, sp, #32
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2006:	930a      	str	r3, [sp, #40]	; 0x28
    2008:	e7d8      	b.n	1fbc <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x40>
    200a:	edd0 7a05 	vldr	s15, [r0, #20]
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    200e:	eddf 6a15 	vldr	s13, [pc, #84]	; 2064 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xe8>
    2012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        return errorCode::OK;
    }

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
    2016:	eeb4 0ac7 	vcmpe.f32	s0, s14
    201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    201e:	dc0a      	bgt.n	2036 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xba>
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
        }
        return (uint32_t)(clock * micros) - 1;
    2020:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        this->periodic = periodic;
        if (periodic)
        {
            reload = microsecondToCycles(period);
            regs->OCR1 = reload;
    2024:	68e2      	ldr	r2, [r4, #12]
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
        }
        return (uint32_t)(clock * micros) - 1;
    2026:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    202a:	ee10 3a10 	vmov	r3, s0
    202e:	3b01      	subs	r3, #1
    errorCode GptChannel::begin(callback_t cb, float period, bool periodic)
    {
        this->periodic = periodic;
        if (periodic)
        {
            reload = microsecondToCycles(period);
    2030:	6123      	str	r3, [r4, #16]
            regs->OCR1 = reload;
    2032:	6113      	str	r3, [r2, #16]
    2034:	e7a9      	b.n	1f8a <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xe>

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    2036:	6803      	ldr	r3, [r0, #0]
    2038:	4a0b      	ldr	r2, [pc, #44]	; (2068 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xec>)
    203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    203c:	4293      	cmp	r3, r2
    203e:	d10e      	bne.n	205e <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xe2>

        inline errorCode trigger(float delay) override;
        inline errorCode triggerDirect(uint32_t delay) override;
        inline errorCode getTriggerReload(float delay, uint32_t* reload) override;

        inline float getMaxPeriod() const override { return getMaxMicros() / 1E6; }
    2040:	eddf 7a0a 	vldr	s15, [pc, #40]	; 206c <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xf0>
    2044:	ee87 0a27 	vdiv.f32	s0, s14, s15
    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
    2048:	f06f 0063 	mvn.w	r0, #99	; 0x63
    204c:	ed8d 0a01 	vstr	s0, [sp, #4]
    2050:	f000 f998 	bl	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    2054:	edd4 7a05 	vldr	s15, [r4, #20]
    2058:	ed9d 0a01 	vldr	s0, [sp, #4]
    205c:	e7e0      	b.n	2020 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xa4>

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    205e:	4798      	blx	r3
    2060:	e7f2      	b.n	2048 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xcc>
    2062:	bf00      	nop
    2064:	4f800000 	.word	0x4f800000
    2068:	00001011 	.word	0x00001011
    206c:	49742400 	.word	0x49742400

00002070 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E>:
        TimerGenerator* const TCK = TCK_t::getTimer<uint32_t>;
        TimerGenerator* const TCK32 = TCK_t::getTimer<uint32_t>; // same as TCK
        TimerGenerator* const TCK64 = TCK_t::getTimer<uint64_t>;

        constexpr tick_t tick = &TCK_t::tick;
    }
    2070:	b570      	push	{r4, r5, r6, lr}

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    2072:	4d79      	ldr	r5, [pc, #484]	; (2258 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1e8>)
    2074:	682b      	ldr	r3, [r5, #0]
    2076:	f013 0301 	ands.w	r3, r3, #1
    207a:	d10b      	bne.n	2094 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x24>
    207c:	4c77      	ldr	r4, [pc, #476]	; (225c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1ec>)
    207e:	2601      	movs	r6, #1
    2080:	4618      	mov	r0, r3
    2082:	4a77      	ldr	r2, [pc, #476]	; (2260 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    2084:	4977      	ldr	r1, [pc, #476]	; (2264 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f4>)
    2086:	60a3      	str	r3, [r4, #8]
    2088:	61a3      	str	r3, [r4, #24]
    208a:	62a3      	str	r3, [r4, #40]	; 0x28
    208c:	63a3      	str	r3, [r4, #56]	; 0x38
    208e:	602e      	str	r6, [r5, #0]
    2090:	f002 f9e6 	bl	4460 <__aeabi_atexit>
    };

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    2094:	4b74      	ldr	r3, [pc, #464]	; (2268 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f8>)
    2096:	681a      	ldr	r2, [r3, #0]
    2098:	07d4      	lsls	r4, r2, #31
    209a:	d404      	bmi.n	20a6 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x36>
    209c:	2001      	movs	r0, #1
    209e:	4a73      	ldr	r2, [pc, #460]	; (226c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1fc>)
    20a0:	4973      	ldr	r1, [pc, #460]	; (2270 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x200>)
    20a2:	6018      	str	r0, [r3, #0]
    20a4:	6011      	str	r1, [r2, #0]

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    20a6:	4d73      	ldr	r5, [pc, #460]	; (2274 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x204>)
    20a8:	682b      	ldr	r3, [r5, #0]
    20aa:	f013 0301 	ands.w	r3, r3, #1
    20ae:	d10b      	bne.n	20c8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x58>
    20b0:	4c71      	ldr	r4, [pc, #452]	; (2278 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x208>)
    20b2:	2601      	movs	r6, #1
    20b4:	4618      	mov	r0, r3
    20b6:	4a6a      	ldr	r2, [pc, #424]	; (2260 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    20b8:	4970      	ldr	r1, [pc, #448]	; (227c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x20c>)
    20ba:	60a3      	str	r3, [r4, #8]
    20bc:	61a3      	str	r3, [r4, #24]
    20be:	62a3      	str	r3, [r4, #40]	; 0x28
    20c0:	63a3      	str	r3, [r4, #56]	; 0x38
    20c2:	602e      	str	r6, [r5, #0]
    20c4:	f002 f9cc 	bl	4460 <__aeabi_atexit>
    };

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    20c8:	4b6d      	ldr	r3, [pc, #436]	; (2280 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x210>)
    20ca:	681a      	ldr	r2, [r3, #0]
    20cc:	07d0      	lsls	r0, r2, #31
    20ce:	d404      	bmi.n	20da <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x6a>
    20d0:	2001      	movs	r0, #1
    20d2:	4a6c      	ldr	r2, [pc, #432]	; (2284 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x214>)
    20d4:	496c      	ldr	r1, [pc, #432]	; (2288 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x218>)
    20d6:	6018      	str	r0, [r3, #0]
    20d8:	6011      	str	r1, [r2, #0]

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    20da:	4d6c      	ldr	r5, [pc, #432]	; (228c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x21c>)
    20dc:	682b      	ldr	r3, [r5, #0]
    20de:	f013 0301 	ands.w	r3, r3, #1
    20e2:	d10b      	bne.n	20fc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x8c>
    20e4:	4c6a      	ldr	r4, [pc, #424]	; (2290 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x220>)
    20e6:	2601      	movs	r6, #1
    20e8:	4618      	mov	r0, r3
    20ea:	4a5d      	ldr	r2, [pc, #372]	; (2260 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    20ec:	4969      	ldr	r1, [pc, #420]	; (2294 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x224>)
    20ee:	60a3      	str	r3, [r4, #8]
    20f0:	61a3      	str	r3, [r4, #24]
    20f2:	62a3      	str	r3, [r4, #40]	; 0x28
    20f4:	63a3      	str	r3, [r4, #56]	; 0x38
    20f6:	602e      	str	r6, [r5, #0]
    20f8:	f002 f9b2 	bl	4460 <__aeabi_atexit>
    };

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    20fc:	4b66      	ldr	r3, [pc, #408]	; (2298 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x228>)
    20fe:	681a      	ldr	r2, [r3, #0]
    2100:	07d1      	lsls	r1, r2, #31
    2102:	d404      	bmi.n	210e <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x9e>
    2104:	2001      	movs	r0, #1
    2106:	4a65      	ldr	r2, [pc, #404]	; (229c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x22c>)
    2108:	4965      	ldr	r1, [pc, #404]	; (22a0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x230>)
    210a:	6018      	str	r0, [r3, #0]
    210c:	6011      	str	r1, [r2, #0]

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    210e:	4d65      	ldr	r5, [pc, #404]	; (22a4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x234>)
    2110:	682b      	ldr	r3, [r5, #0]
    2112:	f013 0301 	ands.w	r3, r3, #1
    2116:	d10b      	bne.n	2130 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xc0>
    2118:	4c63      	ldr	r4, [pc, #396]	; (22a8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x238>)
    211a:	2601      	movs	r6, #1
    211c:	4618      	mov	r0, r3
    211e:	4a50      	ldr	r2, [pc, #320]	; (2260 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    2120:	4962      	ldr	r1, [pc, #392]	; (22ac <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x23c>)
    2122:	60a3      	str	r3, [r4, #8]
    2124:	61a3      	str	r3, [r4, #24]
    2126:	62a3      	str	r3, [r4, #40]	; 0x28
    2128:	63a3      	str	r3, [r4, #56]	; 0x38
    212a:	602e      	str	r6, [r5, #0]
    212c:	f002 f998 	bl	4460 <__aeabi_atexit>
    };

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    2130:	4b5f      	ldr	r3, [pc, #380]	; (22b0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x240>)
    2132:	681a      	ldr	r2, [r3, #0]
    2134:	07d2      	lsls	r2, r2, #31
    2136:	d404      	bmi.n	2142 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xd2>
    2138:	2001      	movs	r0, #1
    213a:	4a5e      	ldr	r2, [pc, #376]	; (22b4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x244>)
    213c:	495e      	ldr	r1, [pc, #376]	; (22b8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x248>)
    213e:	6018      	str	r0, [r3, #0]
    2140:	6011      	str	r1, [r2, #0]

    template <unsigned m>
    bool GPT_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t GPT_t<m>::callback = nullptr;
    2142:	4c5e      	ldr	r4, [pc, #376]	; (22bc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x24c>)
    2144:	6823      	ldr	r3, [r4, #0]
    2146:	f013 0301 	ands.w	r3, r3, #1
    214a:	d071      	beq.n	2230 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1c0>
    214c:	4c5c      	ldr	r4, [pc, #368]	; (22c0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x250>)
    214e:	6823      	ldr	r3, [r4, #0]
    2150:	f013 0301 	ands.w	r3, r3, #1
    2154:	d076      	beq.n	2244 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1d4>
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    2156:	4b5b      	ldr	r3, [pc, #364]	; (22c4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x254>)
    2158:	681a      	ldr	r2, [r3, #0]
    215a:	07d6      	lsls	r6, r2, #31
    215c:	d404      	bmi.n	2168 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xf8>
    215e:	2001      	movs	r0, #1
    2160:	4a59      	ldr	r2, [pc, #356]	; (22c8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x258>)
    2162:	495a      	ldr	r1, [pc, #360]	; (22cc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x25c>)
    2164:	6018      	str	r0, [r3, #0]
    2166:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    2168:	4b59      	ldr	r3, [pc, #356]	; (22d0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x260>)
    216a:	681a      	ldr	r2, [r3, #0]
    216c:	07d5      	lsls	r5, r2, #31
    216e:	d404      	bmi.n	217a <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x10a>
    2170:	2001      	movs	r0, #1
    2172:	4a58      	ldr	r2, [pc, #352]	; (22d4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x264>)
    2174:	4958      	ldr	r1, [pc, #352]	; (22d8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x268>)
    2176:	6018      	str	r0, [r3, #0]
    2178:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];
    217a:	4b58      	ldr	r3, [pc, #352]	; (22dc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x26c>)
    217c:	681a      	ldr	r2, [r3, #0]
    217e:	07d4      	lsls	r4, r2, #31
    2180:	d404      	bmi.n	218c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x11c>
    2182:	2001      	movs	r0, #1
    2184:	4a56      	ldr	r2, [pc, #344]	; (22e0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x270>)
    2186:	4957      	ldr	r1, [pc, #348]	; (22e4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x274>)
    2188:	6018      	str	r0, [r3, #0]
    218a:	6011      	str	r1, [r2, #0]

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    218c:	4b56      	ldr	r3, [pc, #344]	; (22e8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x278>)
    218e:	681a      	ldr	r2, [r3, #0]
    2190:	07d0      	lsls	r0, r2, #31
    2192:	d404      	bmi.n	219e <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x12e>
    2194:	2001      	movs	r0, #1
    2196:	4a55      	ldr	r2, [pc, #340]	; (22ec <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x27c>)
    2198:	4955      	ldr	r1, [pc, #340]	; (22f0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x280>)
    219a:	6018      	str	r0, [r3, #0]
    219c:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    219e:	4b55      	ldr	r3, [pc, #340]	; (22f4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x284>)
    21a0:	681a      	ldr	r2, [r3, #0]
    21a2:	07d1      	lsls	r1, r2, #31
    21a4:	d404      	bmi.n	21b0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x140>
    21a6:	2001      	movs	r0, #1
    21a8:	4a53      	ldr	r2, [pc, #332]	; (22f8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x288>)
    21aa:	4954      	ldr	r1, [pc, #336]	; (22fc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x28c>)
    21ac:	6018      	str	r0, [r3, #0]
    21ae:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];
    21b0:	4b53      	ldr	r3, [pc, #332]	; (2300 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x290>)
    21b2:	681a      	ldr	r2, [r3, #0]
    21b4:	07d2      	lsls	r2, r2, #31
    21b6:	d404      	bmi.n	21c2 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x152>
    21b8:	2001      	movs	r0, #1
    21ba:	4a52      	ldr	r2, [pc, #328]	; (2304 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x294>)
    21bc:	4952      	ldr	r1, [pc, #328]	; (2308 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x298>)
    21be:	6018      	str	r0, [r3, #0]
    21c0:	6011      	str	r1, [r2, #0]

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    21c2:	4b52      	ldr	r3, [pc, #328]	; (230c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x29c>)
    21c4:	681a      	ldr	r2, [r3, #0]
    21c6:	07d6      	lsls	r6, r2, #31
    21c8:	d404      	bmi.n	21d4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x164>
    21ca:	2001      	movs	r0, #1
    21cc:	4a50      	ldr	r2, [pc, #320]	; (2310 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2a0>)
    21ce:	4951      	ldr	r1, [pc, #324]	; (2314 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2a4>)
    21d0:	6018      	str	r0, [r3, #0]
    21d2:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    21d4:	4b50      	ldr	r3, [pc, #320]	; (2318 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2a8>)
    21d6:	681a      	ldr	r2, [r3, #0]
    21d8:	07d5      	lsls	r5, r2, #31
    21da:	d404      	bmi.n	21e6 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x176>
    21dc:	2001      	movs	r0, #1
    21de:	4a4f      	ldr	r2, [pc, #316]	; (231c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2ac>)
    21e0:	494f      	ldr	r1, [pc, #316]	; (2320 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2b0>)
    21e2:	6018      	str	r0, [r3, #0]
    21e4:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];
    21e6:	4b4f      	ldr	r3, [pc, #316]	; (2324 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2b4>)
    21e8:	681a      	ldr	r2, [r3, #0]
    21ea:	07d4      	lsls	r4, r2, #31
    21ec:	d404      	bmi.n	21f8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x188>
    21ee:	2001      	movs	r0, #1
    21f0:	4a4d      	ldr	r2, [pc, #308]	; (2328 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2b8>)
    21f2:	494e      	ldr	r1, [pc, #312]	; (232c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2bc>)
    21f4:	6018      	str	r0, [r3, #0]
    21f6:	6011      	str	r1, [r2, #0]

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    21f8:	4b4d      	ldr	r3, [pc, #308]	; (2330 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2c0>)
    21fa:	681a      	ldr	r2, [r3, #0]
    21fc:	07d0      	lsls	r0, r2, #31
    21fe:	d404      	bmi.n	220a <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x19a>
    2200:	2001      	movs	r0, #1
    2202:	4a4c      	ldr	r2, [pc, #304]	; (2334 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2c4>)
    2204:	494c      	ldr	r1, [pc, #304]	; (2338 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2c8>)
    2206:	6018      	str	r0, [r3, #0]
    2208:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    220a:	4b4c      	ldr	r3, [pc, #304]	; (233c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2cc>)
    220c:	681a      	ldr	r2, [r3, #0]
    220e:	07d1      	lsls	r1, r2, #31
    2210:	d404      	bmi.n	221c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1ac>
    2212:	2001      	movs	r0, #1
    2214:	4a4a      	ldr	r2, [pc, #296]	; (2340 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2d0>)
    2216:	494b      	ldr	r1, [pc, #300]	; (2344 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2d4>)
    2218:	6018      	str	r0, [r3, #0]
    221a:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];
    221c:	4b4a      	ldr	r3, [pc, #296]	; (2348 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2d8>)
    221e:	681a      	ldr	r2, [r3, #0]
    2220:	07d2      	lsls	r2, r2, #31
    2222:	d404      	bmi.n	222e <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1be>
    2224:	2001      	movs	r0, #1
    2226:	4a49      	ldr	r2, [pc, #292]	; (234c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2dc>)
    2228:	4949      	ldr	r1, [pc, #292]	; (2350 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2e0>)
    222a:	6018      	str	r0, [r3, #0]
    222c:	6011      	str	r1, [r2, #0]
    222e:	bd70      	pop	{r4, r5, r6, pc}
    2230:	4d48      	ldr	r5, [pc, #288]	; (2354 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2e4>)
    2232:	2601      	movs	r6, #1
    2234:	4a0a      	ldr	r2, [pc, #40]	; (2260 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    2236:	4628      	mov	r0, r5
    2238:	4947      	ldr	r1, [pc, #284]	; (2358 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2e8>)
    223a:	60ab      	str	r3, [r5, #8]
    223c:	6026      	str	r6, [r4, #0]
    223e:	f002 f90f 	bl	4460 <__aeabi_atexit>
    2242:	e783      	b.n	214c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xdc>
    2244:	4d45      	ldr	r5, [pc, #276]	; (235c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2ec>)
    2246:	2601      	movs	r6, #1
    2248:	4a05      	ldr	r2, [pc, #20]	; (2260 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    224a:	4628      	mov	r0, r5
    224c:	4942      	ldr	r1, [pc, #264]	; (2358 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2e8>)
    224e:	60ab      	str	r3, [r5, #8]
    2250:	6026      	str	r6, [r4, #0]
    2252:	f002 f905 	bl	4460 <__aeabi_atexit>
    2256:	e77e      	b.n	2156 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xe6>
    2258:	2000180c 	.word	0x2000180c
    225c:	20001930 	.word	0x20001930
    2260:	20000674 	.word	0x20000674
    2264:	0000139d 	.word	0x0000139d
    2268:	20001808 	.word	0x20001808
    226c:	2000192c 	.word	0x2000192c
    2270:	401dc000 	.word	0x401dc000
    2274:	20001804 	.word	0x20001804
    2278:	200018ec 	.word	0x200018ec
    227c:	000013bd 	.word	0x000013bd
    2280:	20001800 	.word	0x20001800
    2284:	200018e8 	.word	0x200018e8
    2288:	401e0000 	.word	0x401e0000
    228c:	200017fc 	.word	0x200017fc
    2290:	200018a8 	.word	0x200018a8
    2294:	000013dd 	.word	0x000013dd
    2298:	200017f8 	.word	0x200017f8
    229c:	200018a4 	.word	0x200018a4
    22a0:	401e4000 	.word	0x401e4000
    22a4:	200017f4 	.word	0x200017f4
    22a8:	20001864 	.word	0x20001864
    22ac:	000013fd 	.word	0x000013fd
    22b0:	200017f0 	.word	0x200017f0
    22b4:	20001860 	.word	0x20001860
    22b8:	401e8000 	.word	0x401e8000
    22bc:	200017ec 	.word	0x200017ec
    22c0:	200017e8 	.word	0x200017e8
    22c4:	200017e4 	.word	0x200017e4
    22c8:	2000183c 	.word	0x2000183c
    22cc:	401dc020 	.word	0x401dc020
    22d0:	200017e0 	.word	0x200017e0
    22d4:	20001838 	.word	0x20001838
    22d8:	401dc040 	.word	0x401dc040
    22dc:	200017dc 	.word	0x200017dc
    22e0:	20001834 	.word	0x20001834
    22e4:	401dc060 	.word	0x401dc060
    22e8:	200017d8 	.word	0x200017d8
    22ec:	20001830 	.word	0x20001830
    22f0:	401e0020 	.word	0x401e0020
    22f4:	200017d4 	.word	0x200017d4
    22f8:	2000182c 	.word	0x2000182c
    22fc:	401e0040 	.word	0x401e0040
    2300:	200017d0 	.word	0x200017d0
    2304:	20001828 	.word	0x20001828
    2308:	401e0060 	.word	0x401e0060
    230c:	200017cc 	.word	0x200017cc
    2310:	20001824 	.word	0x20001824
    2314:	401e4020 	.word	0x401e4020
    2318:	200017c8 	.word	0x200017c8
    231c:	20001820 	.word	0x20001820
    2320:	401e4040 	.word	0x401e4040
    2324:	200017c4 	.word	0x200017c4
    2328:	2000181c 	.word	0x2000181c
    232c:	401e4060 	.word	0x401e4060
    2330:	200017c0 	.word	0x200017c0
    2334:	20001818 	.word	0x20001818
    2338:	401e8020 	.word	0x401e8020
    233c:	200017bc 	.word	0x200017bc
    2340:	20001814 	.word	0x20001814
    2344:	401e8040 	.word	0x401e8040
    2348:	200017b8 	.word	0x200017b8
    234c:	20001810 	.word	0x20001810
    2350:	401e8060 	.word	0x401e8060
    2354:	20001850 	.word	0x20001850
    2358:	00000e59 	.word	0x00000e59
    235c:	20001840 	.word	0x20001840

00002360 <TeensyTimerTool::Timer::Timer(TeensyTimerTool::ITimerChannel* (*)())>:
#include "timer.h"
#include "config.h"

namespace TeensyTimerTool
{
    Timer::Timer(TimerGenerator* generator)
    2360:	b510      	push	{r4, lr}
    2362:	4604      	mov	r4, r0
    :BaseTimer(generator, true)
    2364:	2201      	movs	r2, #1
    2366:	f7fe fd4f 	bl	e08 <TeensyTimerTool::BaseTimer::BaseTimer(TeensyTimerTool::ITimerChannel* (*)(), bool)>
    {
    }
    236a:	4620      	mov	r0, r4
    236c:	bd10      	pop	{r4, pc}
    236e:	bf00      	nop

00002370 <std::function<void (TeensyTimerTool::errorCode)>::~function()>:

    ~_Function_base()
    {
      if (_M_manager)
    2370:	6883      	ldr	r3, [r0, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    2372:	b510      	push	{r4, lr}
    2374:	4604      	mov	r4, r0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2376:	b113      	cbz	r3, 237e <std::function<void (TeensyTimerTool::errorCode)>::~function()+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2378:	2203      	movs	r2, #3
    237a:	4601      	mov	r1, r0
    237c:	4798      	blx	r3
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    237e:	4620      	mov	r0, r4
    2380:	bd10      	pop	{r4, pc}
    2382:	bf00      	nop

00002384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>:
    }

    errorFunc_t errFunc;

    errorCode postError(errorCode e)
    {
    2384:	4b07      	ldr	r3, [pc, #28]	; (23a4 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)+0x20>)
        if (errFunc != nullptr && e != errorCode::OK) errFunc(e);
    2386:	689a      	ldr	r2, [r3, #8]
    }

    errorFunc_t errFunc;

    errorCode postError(errorCode e)
    {
    2388:	b510      	push	{r4, lr}
    238a:	4604      	mov	r4, r0
    238c:	b082      	sub	sp, #8
        if (errFunc != nullptr && e != errorCode::OK) errFunc(e);
    238e:	b132      	cbz	r2, 239e <TeensyTimerTool::postError(TeensyTimerTool::errorCode)+0x1a>
    2390:	b128      	cbz	r0, 239e <TeensyTimerTool::postError(TeensyTimerTool::errorCode)+0x1a>
    2392:	a902      	add	r1, sp, #8
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    2394:	68da      	ldr	r2, [r3, #12]
    2396:	4618      	mov	r0, r3
    2398:	f841 4d04 	str.w	r4, [r1, #-4]!
    239c:	4790      	blx	r2
        return e;
    }
    239e:	4620      	mov	r0, r4
    23a0:	b002      	add	sp, #8
    23a2:	bd10      	pop	{r4, pc}
    23a4:	20001970 	.word	0x20001970

000023a8 <_GLOBAL__sub_I__ZN15TeensyTimerTool12ErrorHandlerC2ER6Stream>:
    void attachErrFunc(errorFunc_t _errFunc)
    {
        errFunc = _errFunc;
    }

    23a8:	b410      	push	{r4}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    23aa:	4b05      	ldr	r3, [pc, #20]	; (23c0 <_GLOBAL__sub_I__ZN15TeensyTimerTool12ErrorHandlerC2ER6Stream+0x18>)
    23ac:	2400      	movs	r4, #0
            digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
            delay(50);
        }
    }

    errorFunc_t errFunc;
    23ae:	4a05      	ldr	r2, [pc, #20]	; (23c4 <_GLOBAL__sub_I__ZN15TeensyTimerTool12ErrorHandlerC2ER6Stream+0x1c>)
    23b0:	609c      	str	r4, [r3, #8]
    23b2:	4618      	mov	r0, r3
    23b4:	4904      	ldr	r1, [pc, #16]	; (23c8 <_GLOBAL__sub_I__ZN15TeensyTimerTool12ErrorHandlerC2ER6Stream+0x20>)
    void attachErrFunc(errorFunc_t _errFunc)
    {
        errFunc = _errFunc;
    }

    23b6:	f85d 4b04 	ldr.w	r4, [sp], #4
            digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
            delay(50);
        }
    }

    errorFunc_t errFunc;
    23ba:	f002 b851 	b.w	4460 <__aeabi_atexit>
    23be:	bf00      	nop
    23c0:	20001970 	.word	0x20001970
    23c4:	20000674 	.word	0x20000674
    23c8:	00002371 	.word	0x00002371

000023cc <TeensyTimerTool::PITChannel::start()>:
        return errorCode::OK;
    }

    errorCode PITChannel::start()
    {
       IMXRT_PIT_CHANNELS[chNr].TCTRL = PIT_TCTRL_TEN | PIT_TCTRL_TIE;
    23cc:	68c1      	ldr	r1, [r0, #12]
    23ce:	2203      	movs	r2, #3
    23d0:	4b02      	ldr	r3, [pc, #8]	; (23dc <TeensyTimerTool::PITChannel::start()+0x10>)
       return errorCode::OK;
    }
    23d2:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode PITChannel::start()
    {
       IMXRT_PIT_CHANNELS[chNr].TCTRL = PIT_TCTRL_TEN | PIT_TCTRL_TIE;
    23d4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    23d8:	609a      	str	r2, [r3, #8]
       return errorCode::OK;
    }
    23da:	4770      	bx	lr
    23dc:	40084100 	.word	0x40084100

000023e0 <TeensyTimerTool::PITChannel::stop()>:

    errorCode PITChannel::stop()
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    23e0:	68c1      	ldr	r1, [r0, #12]
    23e2:	2200      	movs	r2, #0
    23e4:	4b02      	ldr	r3, [pc, #8]	; (23f0 <TeensyTimerTool::PITChannel::stop()+0x10>)
        return errorCode::OK;
    }
    23e6:	4610      	mov	r0, r2
       return errorCode::OK;
    }

    errorCode PITChannel::stop()
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    23e8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    23ec:	609a      	str	r2, [r3, #8]
        return errorCode::OK;
    }
    23ee:	4770      	bx	lr
    23f0:	40084100 	.word	0x40084100

000023f4 <TeensyTimerTool::PITChannel::~PITChannel()>:
            callback();
            if (!isPeriodic) IMXRT_PIT_CHANNELS[chNr].TCTRL = 0; // switch off timer
        }
    }

    PITChannel::~PITChannel()
    23f4:	4a06      	ldr	r2, [pc, #24]	; (2410 <TeensyTimerTool::PITChannel::~PITChannel()+0x1c>)
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    23f6:	6983      	ldr	r3, [r0, #24]
    23f8:	b510      	push	{r4, lr}
    23fa:	4604      	mov	r4, r0
    23fc:	6002      	str	r2, [r0, #0]
    23fe:	b123      	cbz	r3, 240a <TeensyTimerTool::PITChannel::~PITChannel()+0x16>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    2400:	f100 0110 	add.w	r1, r0, #16
    2404:	2203      	movs	r2, #3
    2406:	4608      	mov	r0, r1
    2408:	4798      	blx	r3
    {
        callback = nullptr;
    }
    240a:	4620      	mov	r0, r4
    240c:	bd10      	pop	{r4, pc}
    240e:	bf00      	nop
    2410:	20000248 	.word	0x20000248

00002414 <TeensyTimerTool::PITChannel::getMaxPeriod() const>:
        return errorCode::OK;
    }

    float PITChannel::getMaxPeriod() const
    {
        return (float)0xFFFF'FFFE / clockFactor / 1'000'000;
    2414:	4b06      	ldr	r3, [pc, #24]	; (2430 <TeensyTimerTool::PITChannel::getMaxPeriod() const+0x1c>)
    2416:	eddf 6a07 	vldr	s13, [pc, #28]	; 2434 <TeensyTimerTool::PITChannel::getMaxPeriod() const+0x20>
    241a:	edd3 7a00 	vldr	s15, [r3]
    241e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 2438 <TeensyTimerTool::PITChannel::getMaxPeriod() const+0x24>
    2422:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2426:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    }
    242a:	ee80 0a07 	vdiv.f32	s0, s0, s14
    242e:	4770      	bx	lr
    2430:	20000688 	.word	0x20000688
    2434:	4f800000 	.word	0x4f800000
    2438:	49742400 	.word	0x49742400

0000243c <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)>:
    // {
    //     return begin(cb, (float)micros, periodic);
    // }

    errorCode PITChannel::begin(callback_t cb, float micros, bool periodic)
    {
    243c:	b5f0      	push	{r4, r5, r6, r7, lr}
    243e:	688b      	ldr	r3, [r1, #8]
    2440:	4604      	mov	r4, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2442:	2000      	movs	r0, #0
    2444:	ed2d 8b02 	vpush	{d8}
    2448:	b087      	sub	sp, #28
    244a:	eeb0 8a40 	vmov.f32	s16, s0
        isPeriodic = periodic;
    244e:	7222      	strb	r2, [r4, #8]
    2450:	9004      	str	r0, [sp, #16]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    2452:	2b00      	cmp	r3, #0
    2454:	d043      	beq.n	24de <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xa2>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    2456:	ad02      	add	r5, sp, #8
    2458:	460e      	mov	r6, r1
    245a:	2202      	movs	r2, #2
    245c:	4628      	mov	r0, r5
    245e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    2460:	68f7      	ldr	r7, [r6, #12]
	  _M_manager = __x._M_manager;
    2462:	68b6      	ldr	r6, [r6, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2464:	f104 0310 	add.w	r3, r4, #16
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2468:	e895 0003 	ldmia.w	r5, {r0, r1}
    246c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    2470:	e893 0003 	ldmia.w	r3, {r0, r1}
    2474:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    2478:	e89d 0003 	ldmia.w	sp, {r0, r1}
    247c:	e883 0003 	stmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2480:	69a3      	ldr	r3, [r4, #24]
    2482:	69e2      	ldr	r2, [r4, #28]
    2484:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
    2486:	61a6      	str	r6, [r4, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2488:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
    248a:	61e7      	str	r7, [r4, #28]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    248c:	b11b      	cbz	r3, 2496 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0x5a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    248e:	2203      	movs	r2, #3
    2490:	4629      	mov	r1, r5
    2492:	4628      	mov	r0, r5
    2494:	4798      	blx	r3
        callback = cb;

        if (isPeriodic)
    2496:	7a23      	ldrb	r3, [r4, #8]
    2498:	b1e3      	cbz	r3, 24d4 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0x98>
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
    249a:	4b1a      	ldr	r3, [pc, #104]	; (2504 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xc8>)
        isPeriodic = periodic;
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    249c:	2000      	movs	r0, #0
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
    249e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 2508 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xcc>
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;
    24a2:	2101      	movs	r1, #1

            float tmp = micros * clockFactor;
    24a4:	ed93 0a00 	vldr	s0, [r3]
        isPeriodic = periodic;
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    24a8:	68e2      	ldr	r2, [r4, #12]
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
    24aa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
        isPeriodic = periodic;
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    24ae:	4b17      	ldr	r3, [pc, #92]	; (250c <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xd0>)
    24b0:	0112      	lsls	r2, r2, #4
    24b2:	4d16      	ldr	r5, [pc, #88]	; (250c <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xd0>)
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
    24b4:	ee20 0a08 	vmul.f32	s0, s0, s16
        isPeriodic = periodic;
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    24b8:	4413      	add	r3, r2
    24ba:	6098      	str	r0, [r3, #8]
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
    24bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;
    24c0:	60d9      	str	r1, [r3, #12]

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
    24c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    24c6:	dc0e      	bgt.n	24e6 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xaa>
            {
                postError(errorCode::periodOverflow);
                IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
            } else
            {
                IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;
    24c8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    24cc:	ee17 3a90 	vmov	r3, s15
    24d0:	3b01      	subs	r3, #1
    24d2:	5153      	str	r3, [r2, r5]
            }
        }
        return errorCode::OK;
    }
    24d4:	2000      	movs	r0, #0
    24d6:	b007      	add	sp, #28
    24d8:	ecbd 8b02 	vpop	{d8}
    24dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    24de:	461e      	mov	r6, r3
    24e0:	9f05      	ldr	r7, [sp, #20]
    24e2:	ad02      	add	r5, sp, #8
    24e4:	e7be      	b.n	2464 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0x28>
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
            {
                postError(errorCode::periodOverflow);
    24e6:	f06f 0063 	mvn.w	r0, #99	; 0x63
    24ea:	f7ff ff4b 	bl	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
                IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
    24ee:	68e3      	ldr	r3, [r4, #12]
    24f0:	f06f 0201 	mvn.w	r2, #1
            {
                IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;
            }
        }
        return errorCode::OK;
    }
    24f4:	2000      	movs	r0, #0

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
            {
                postError(errorCode::periodOverflow);
                IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
    24f6:	011b      	lsls	r3, r3, #4
    24f8:	515a      	str	r2, [r3, r5]
            {
                IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;
            }
        }
        return errorCode::OK;
    }
    24fa:	b007      	add	sp, #28
    24fc:	ecbd 8b02 	vpop	{d8}
    2500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2502:	bf00      	nop
    2504:	20000688 	.word	0x20000688
    2508:	4f800000 	.word	0x4f800000
    250c:	40084100 	.word	0x40084100

00002510 <TeensyTimerTool::PITChannel::trigger(float)>:
    // {
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
    2510:	b538      	push	{r3, r4, r5, lr}
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
    2512:	4b1d      	ldr	r3, [pc, #116]	; (2588 <TeensyTimerTool::PITChannel::trigger(float)+0x78>)
    // {
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
    2514:	4604      	mov	r4, r0
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
        if (tmp > 0xFFFF'FFFF)
    2516:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 258c <TeensyTimerTool::PITChannel::trigger(float)+0x7c>
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    251a:	2000      	movs	r0, #0
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
    251c:	edd3 7a00 	vldr	s15, [r3]
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;
    2520:	2301      	movs	r3, #1
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    2522:	68e1      	ldr	r1, [r4, #12]
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
    2524:	eef8 7a67 	vcvt.f32.u32	s15, s15
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    2528:	4a19      	ldr	r2, [pc, #100]	; (2590 <TeensyTimerTool::PITChannel::trigger(float)+0x80>)
    252a:	0109      	lsls	r1, r1, #4
    252c:	4615      	mov	r5, r2
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
    252e:	ee27 0a80 	vmul.f32	s0, s15, s0
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    2532:	440a      	add	r2, r1
    2534:	6090      	str	r0, [r2, #8]
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
        if (tmp > 0xFFFF'FFFF)
    2536:	eeb4 0ac7 	vcmpe.f32	s0, s14
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;
    253a:	60d3      	str	r3, [r2, #12]

        float tmp = delay * clockFactor;
        if (tmp > 0xFFFF'FFFF)
    253c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2540:	dc0e      	bgt.n	2560 <TeensyTimerTool::PITChannel::trigger(float)+0x50>
        {
            postError(errorCode::periodOverflow);
            IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
        } else
            IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;
    2542:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    2546:	ee10 3a10 	vmov	r3, s0
    254a:	3b01      	subs	r3, #1
    254c:	514b      	str	r3, [r1, r5]

        start();
    254e:	6823      	ldr	r3, [r4, #0]
    2550:	4910      	ldr	r1, [pc, #64]	; (2594 <TeensyTimerTool::PITChannel::trigger(float)+0x84>)
    2552:	699b      	ldr	r3, [r3, #24]
    2554:	428b      	cmp	r3, r1
    2556:	d113      	bne.n	2580 <TeensyTimerTool::PITChannel::trigger(float)+0x70>
        return errorCode::OK;
    }

    errorCode PITChannel::start()
    {
       IMXRT_PIT_CHANNELS[chNr].TCTRL = PIT_TCTRL_TEN | PIT_TCTRL_TIE;
    2558:	2303      	movs	r3, #3
            IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;

        start();

        return errorCode::OK;
    }
    255a:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode PITChannel::start()
    {
       IMXRT_PIT_CHANNELS[chNr].TCTRL = PIT_TCTRL_TEN | PIT_TCTRL_TIE;
    255c:	6093      	str	r3, [r2, #8]
            IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;

        start();

        return errorCode::OK;
    }
    255e:	bd38      	pop	{r3, r4, r5, pc}
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
        if (tmp > 0xFFFF'FFFF)
        {
            postError(errorCode::periodOverflow);
    2560:	f06f 0063 	mvn.w	r0, #99	; 0x63
    2564:	f7ff ff0e 	bl	2384 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
            IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
    2568:	68e3      	ldr	r3, [r4, #12]
    256a:	f06f 0101 	mvn.w	r1, #1
    256e:	462a      	mov	r2, r5
    2570:	011b      	lsls	r3, r3, #4
    2572:	5159      	str	r1, [r3, r5]
    2574:	441a      	add	r2, r3
        } else
            IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;

        start();
    2576:	6823      	ldr	r3, [r4, #0]
    2578:	4906      	ldr	r1, [pc, #24]	; (2594 <TeensyTimerTool::PITChannel::trigger(float)+0x84>)
    257a:	699b      	ldr	r3, [r3, #24]
    257c:	428b      	cmp	r3, r1
    257e:	d0eb      	beq.n	2558 <TeensyTimerTool::PITChannel::trigger(float)+0x48>
    2580:	4620      	mov	r0, r4
    2582:	4798      	blx	r3

        return errorCode::OK;
    }
    2584:	2000      	movs	r0, #0
    2586:	bd38      	pop	{r3, r4, r5, pc}
    2588:	20000688 	.word	0x20000688
    258c:	4f800000 	.word	0x4f800000
    2590:	40084100 	.word	0x40084100
    2594:	000023cd 	.word	0x000023cd

00002598 <__tcf_0>:
#include "PIT.h"

namespace TeensyTimerTool
{
    bool PIT_t::isInitialized = false;
    PITChannel PIT_t::channel[4] = {{0}, {1}, {2}, {3}};
    2598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    259c:	4c0f      	ldr	r4, [pc, #60]	; (25dc <__tcf_0+0x44>)
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
	    _M_manager = nullptr;
    259e:	2500      	movs	r5, #0
    25a0:	4f0f      	ldr	r7, [pc, #60]	; (25e0 <__tcf_0+0x48>)
    25a2:	f1a4 0680 	sub.w	r6, r4, #128	; 0x80
            callback();
            if (!isPeriodic) IMXRT_PIT_CHANNELS[chNr].TCTRL = 0; // switch off timer
        }
    }

    PITChannel::~PITChannel()
    25a6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 25e4 <__tcf_0+0x4c>
    25aa:	f854 3c10 	ldr.w	r3, [r4, #-16]
    25ae:	f1a4 0e10 	sub.w	lr, r4, #16
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    25b2:	2203      	movs	r2, #3
    25b4:	4621      	mov	r1, r4
    25b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    25b8:	4620      	mov	r0, r4
    25ba:	42bb      	cmp	r3, r7
    25bc:	d10b      	bne.n	25d6 <__tcf_0+0x3e>
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    25be:	68a3      	ldr	r3, [r4, #8]
    25c0:	f844 8c10 	str.w	r8, [r4, #-16]
    25c4:	b113      	cbz	r3, 25cc <__tcf_0+0x34>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    25c6:	4798      	blx	r3
	    _M_manager = nullptr;
    25c8:	60a5      	str	r5, [r4, #8]
	    _M_invoker = nullptr;
    25ca:	60e5      	str	r5, [r4, #12]
    25cc:	3c20      	subs	r4, #32
    25ce:	42b4      	cmp	r4, r6
    25d0:	d1eb      	bne.n	25aa <__tcf_0+0x12>
    25d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    25d6:	4670      	mov	r0, lr
    25d8:	4798      	blx	r3
    25da:	e7f7      	b.n	25cc <__tcf_0+0x34>
    25dc:	200019f0 	.word	0x200019f0
    25e0:	000023f5 	.word	0x000023f5
    25e4:	20000248 	.word	0x20000248

000025e8 <TeensyTimerTool::PITChannel::~PITChannel()>:
    25e8:	4a08      	ldr	r2, [pc, #32]	; (260c <TeensyTimerTool::PITChannel::~PITChannel()+0x24>)
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    25ea:	6983      	ldr	r3, [r0, #24]
    25ec:	b510      	push	{r4, lr}
    25ee:	4604      	mov	r4, r0
    25f0:	6002      	str	r2, [r0, #0]
    25f2:	b123      	cbz	r3, 25fe <TeensyTimerTool::PITChannel::~PITChannel()+0x16>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    25f4:	f100 0110 	add.w	r1, r0, #16
    25f8:	2203      	movs	r2, #3
    25fa:	4608      	mov	r0, r1
    25fc:	4798      	blx	r3
    {
        callback = nullptr;
    }
    25fe:	4620      	mov	r0, r4
    2600:	2120      	movs	r1, #32
    2602:	f001 fb6b 	bl	3cdc <operator delete(void*, unsigned int)>
    2606:	4620      	mov	r0, r4
    2608:	bd10      	pop	{r4, pc}
    260a:	bf00      	nop
    260c:	20000248 	.word	0x20000248

00002610 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE>:

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    2610:	481f      	ldr	r0, [pc, #124]	; (2690 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x80>)
    2612:	2100      	movs	r1, #0
    2614:	4b1f      	ldr	r3, [pc, #124]	; (2694 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x84>)
    2616:	69c0      	ldr	r0, [r0, #28]
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    2618:	4a1f      	ldr	r2, [pc, #124]	; (2698 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x88>)

     uint32_t PITChannel::clockFactor = 1;
}
    261a:	b410      	push	{r4}
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    261c:	0644      	lsls	r4, r0, #25
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    261e:	601a      	str	r2, [r3, #0]
    2620:	6059      	str	r1, [r3, #4]
    2622:	60d9      	str	r1, [r3, #12]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2624:	6199      	str	r1, [r3, #24]
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    2626:	d401      	bmi.n	262c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x1c>
    2628:	491c      	ldr	r1, [pc, #112]	; (269c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x8c>)
    262a:	6809      	ldr	r1, [r1, #0]
    262c:	4818      	ldr	r0, [pc, #96]	; (2690 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x80>)
    262e:	2100      	movs	r1, #0
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    2630:	2401      	movs	r4, #1
    2632:	621a      	str	r2, [r3, #32]
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    2634:	69c0      	ldr	r0, [r0, #28]
    2636:	6259      	str	r1, [r3, #36]	; 0x24
    2638:	0640      	lsls	r0, r0, #25
    263a:	6399      	str	r1, [r3, #56]	; 0x38
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    263c:	62dc      	str	r4, [r3, #44]	; 0x2c
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    263e:	d401      	bmi.n	2644 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x34>
    2640:	4916      	ldr	r1, [pc, #88]	; (269c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x8c>)
    2642:	6809      	ldr	r1, [r1, #0]
    2644:	4812      	ldr	r0, [pc, #72]	; (2690 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x80>)
    2646:	2100      	movs	r1, #0
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    2648:	2402      	movs	r4, #2
    264a:	641a      	str	r2, [r3, #64]	; 0x40
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    264c:	69c0      	ldr	r0, [r0, #28]
    264e:	6459      	str	r1, [r3, #68]	; 0x44
    2650:	6599      	str	r1, [r3, #88]	; 0x58
    2652:	0641      	lsls	r1, r0, #25
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    2654:	64dc      	str	r4, [r3, #76]	; 0x4c
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    2656:	d401      	bmi.n	265c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x4c>
    2658:	4910      	ldr	r1, [pc, #64]	; (269c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x8c>)
    265a:	6809      	ldr	r1, [r1, #0]
    265c:	4c0c      	ldr	r4, [pc, #48]	; (2690 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x80>)
    265e:	2100      	movs	r1, #0
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    2660:	661a      	str	r2, [r3, #96]	; 0x60
    2662:	2003      	movs	r0, #3
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    2664:	69e2      	ldr	r2, [r4, #28]
    2666:	6659      	str	r1, [r3, #100]	; 0x64
    2668:	6799      	str	r1, [r3, #120]	; 0x78
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    266a:	66d8      	str	r0, [r3, #108]	; 0x6c
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    266c:	0653      	lsls	r3, r2, #25
    266e:	d40d      	bmi.n	268c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x7c>
    2670:	4b0a      	ldr	r3, [pc, #40]	; (269c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x8c>)
    2672:	4a0b      	ldr	r2, [pc, #44]	; (26a0 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x90>)
    2674:	681b      	ldr	r3, [r3, #0]
    2676:	fbb3 f3f2 	udiv	r3, r3, r2
    267a:	4c0a      	ldr	r4, [pc, #40]	; (26a4 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x94>)
#include "PIT.h"

namespace TeensyTimerTool
{
    bool PIT_t::isInitialized = false;
    PITChannel PIT_t::channel[4] = {{0}, {1}, {2}, {3}};
    267c:	2000      	movs	r0, #0
    267e:	4a0a      	ldr	r2, [pc, #40]	; (26a8 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x98>)
    2680:	6023      	str	r3, [r4, #0]
    2682:	490a      	ldr	r1, [pc, #40]	; (26ac <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x9c>)

     uint32_t PITChannel::clockFactor = 1;
}
    2684:	f85d 4b04 	ldr.w	r4, [sp], #4
#include "PIT.h"

namespace TeensyTimerTool
{
    bool PIT_t::isInitialized = false;
    PITChannel PIT_t::channel[4] = {{0}, {1}, {2}, {3}};
    2688:	f001 beea 	b.w	4460 <__aeabi_atexit>
    268c:	2318      	movs	r3, #24
    268e:	e7f4      	b.n	267a <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x6a>
    2690:	400fc000 	.word	0x400fc000
    2694:	20001980 	.word	0x20001980
    2698:	20000248 	.word	0x20000248
    269c:	200006ac 	.word	0x200006ac
    26a0:	000f4240 	.word	0x000f4240
    26a4:	20000688 	.word	0x20000688
    26a8:	20000674 	.word	0x20000674
    26ac:	00002599 	.word	0x00002599

000026b0 <EventResponder::~EventResponder()>:
class EventResponder
{
public:
	constexpr EventResponder() {
	}
	~EventResponder() {
    26b0:	b538      	push	{r3, r4, r5, lr}
    26b2:	4b06      	ldr	r3, [pc, #24]	; (26cc <EventResponder::~EventResponder()+0x1c>)
    26b4:	4605      	mov	r5, r0
    26b6:	6003      	str	r3, [r0, #0]
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    26b8:	f3ef 8410 	mrs	r4, PRIMASK
		__disable_irq();
    26bc:	b672      	cpsid	i

	// Do not call any function.  The user's program must occasionally check
	// whether the event has occurred, or use one of the wait functions.
	void detach() {
		bool irq = disableInterrupts();
		detachNoInterrupts();
    26be:	f001 fabf 	bl	3c40 <EventResponder::detachNoInterrupts()>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    26c2:	b904      	cbnz	r4, 26c6 <EventResponder::~EventResponder()+0x16>
    26c4:	b662      	cpsie	i
public:
	constexpr EventResponder() {
	}
	~EventResponder() {
		detach();
	}
    26c6:	4628      	mov	r0, r5
    26c8:	bd38      	pop	{r3, r4, r5, pc}
    26ca:	bf00      	nop
    26cc:	20000290 	.word	0x20000290

000026d0 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    26d0:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    26d2:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    26d4:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    26d6:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    26d8:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    26da:	d003      	beq.n	26e4 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    26dc:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    26e0:	f001 ba4c 	b.w	3b7c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    26e4:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    26e6:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    26ea:	4718      	bx	r3

000026ec <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)>:
    {
        static EventResponder er;

        void initYieldHook()
        {
            er.attach([](EventResponderRef r)
    26ec:	b570      	push	{r4, r5, r6, lr}
    26ee:	4c14      	ldr	r4, [pc, #80]	; (2740 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x54>)
    26f0:	4606      	mov	r6, r0
    26f2:	f104 0550 	add.w	r5, r4, #80	; 0x50

    void TCK_t::tick()
    {
        for (unsigned i = 0; i < NR_OF_TCK_TIMERS; i++)
        {
            if (channels[i] != nullptr)
    26f6:	f854 3f04 	ldr.w	r3, [r4, #4]!
            {
                channels[i]->tick();
    26fa:	4618      	mov	r0, r3

    void TCK_t::tick()
    {
        for (unsigned i = 0; i < NR_OF_TCK_TIMERS; i++)
        {
            if (channels[i] != nullptr)
    26fc:	b113      	cbz	r3, 2704 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x18>
            {
                channels[i]->tick();
    26fe:	681b      	ldr	r3, [r3, #0]
    2700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2702:	4798      	blx	r3
        }
    }

    void TCK_t::tick()
    {
        for (unsigned i = 0; i < NR_OF_TCK_TIMERS; i++)
    2704:	42ac      	cmp	r4, r5
    2706:	d1f6      	bne.n	26f6 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0xa>
            {
                TeensyTimerTool::TCK_t::tick();
                r.triggerEvent();
    2708:	6833      	ldr	r3, [r6, #0]
    270a:	4a0e      	ldr	r2, [pc, #56]	; (2744 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x58>)
    270c:	681b      	ldr	r3, [r3, #0]
    270e:	4293      	cmp	r3, r2
    2710:	d10a      	bne.n	2728 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x3c>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2712:	7f32      	ldrb	r2, [r6, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2714:	2300      	movs	r3, #0
		_data = data;
		if (_type == EventTypeImmediate) {
    2716:	2a02      	cmp	r2, #2

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2718:	6073      	str	r3, [r6, #4]
		_data = data;
    271a:	60f3      	str	r3, [r6, #12]
		if (_type == EventTypeImmediate) {
    271c:	d00a      	beq.n	2734 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x48>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    271e:	4630      	mov	r0, r6
            });
    2720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2724:	f001 ba2a 	b.w	3b7c <EventResponder::triggerEventNotImmediate()>
        void initYieldHook()
        {
            er.attach([](EventResponderRef r)
            {
                TeensyTimerTool::TCK_t::tick();
                r.triggerEvent();
    2728:	2200      	movs	r2, #0
    272a:	4630      	mov	r0, r6
    272c:	4611      	mov	r1, r2
            });
    272e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        void initYieldHook()
        {
            er.attach([](EventResponderRef r)
            {
                TeensyTimerTool::TCK_t::tick();
                r.triggerEvent();
    2732:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2734:	68b3      	ldr	r3, [r6, #8]
    2736:	4630      	mov	r0, r6
            });
    2738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    273c:	4718      	bx	r3
    273e:	bf00      	nop
    2740:	200019fc 	.word	0x200019fc
    2744:	000026d1 	.word	0x000026d1

00002748 <TeensyTimerTool::initYieldHook()>:
    namespace TeensyTimerTool
    {
        static EventResponder er;

        void initYieldHook()
        {
    2748:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    274a:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    274e:	b672      	cpsid	i
	// Attach a function to be called from yield().  This should be the
	// default way to use EventResponder.  Calls from yield() allow use
	// of Arduino libraries, String, Serial, etc.
	void attach(EventResponderFunction function, uint8_t priority=128) {
		bool irq = disableInterrupts();
		detachNoInterrupts();
    2750:	4c12      	ldr	r4, [pc, #72]	; (279c <TeensyTimerTool::initYieldHook()+0x54>)
    2752:	4620      	mov	r0, r4
    2754:	f001 fa74 	bl	3c40 <EventResponder::detachNoInterrupts()>
		_function = function;
		_type = EventTypeYield;
		yield_active_check_flags |= YIELD_CHECK_EVENT_RESPONDER; // user setup a yield type...
    2758:	4a11      	ldr	r2, [pc, #68]	; (27a0 <TeensyTimerTool::initYieldHook()+0x58>)
	// default way to use EventResponder.  Calls from yield() allow use
	// of Arduino libraries, String, Serial, etc.
	void attach(EventResponderFunction function, uint8_t priority=128) {
		bool irq = disableInterrupts();
		detachNoInterrupts();
		_function = function;
    275a:	4812      	ldr	r0, [pc, #72]	; (27a4 <TeensyTimerTool::initYieldHook()+0x5c>)
		_type = EventTypeYield;
    275c:	2101      	movs	r1, #1
		yield_active_check_flags |= YIELD_CHECK_EVENT_RESPONDER; // user setup a yield type...
    275e:	7813      	ldrb	r3, [r2, #0]
	// default way to use EventResponder.  Calls from yield() allow use
	// of Arduino libraries, String, Serial, etc.
	void attach(EventResponderFunction function, uint8_t priority=128) {
		bool irq = disableInterrupts();
		detachNoInterrupts();
		_function = function;
    2760:	60a0      	str	r0, [r4, #8]
		_type = EventTypeYield;
		yield_active_check_flags |= YIELD_CHECK_EVENT_RESPONDER; // user setup a yield type...
    2762:	f043 0304 	orr.w	r3, r3, #4
	// of Arduino libraries, String, Serial, etc.
	void attach(EventResponderFunction function, uint8_t priority=128) {
		bool irq = disableInterrupts();
		detachNoInterrupts();
		_function = function;
		_type = EventTypeYield;
    2766:	7721      	strb	r1, [r4, #28]
		yield_active_check_flags |= YIELD_CHECK_EVENT_RESPONDER; // user setup a yield type...
    2768:	7013      	strb	r3, [r2, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    276a:	b955      	cbnz	r5, 2782 <TeensyTimerTool::initYieldHook()+0x3a>
    276c:	b662      	cpsie	i
    276e:	7f23      	ldrb	r3, [r4, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2770:	6065      	str	r5, [r4, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2772:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2774:	60e5      	str	r5, [r4, #12]
		if (_type == EventTypeImmediate) {
    2776:	d00c      	beq.n	2792 <TeensyTimerTool::initYieldHook()+0x4a>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2778:	4808      	ldr	r0, [pc, #32]	; (279c <TeensyTimerTool::initYieldHook()+0x54>)
            {
                TeensyTimerTool::TCK_t::tick();
                r.triggerEvent();
            });
            er.triggerEvent();
        }
    277a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    277e:	f001 b9fd 	b.w	3b7c <EventResponder::triggerEventNotImmediate()>

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2782:	2300      	movs	r3, #0
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2784:	4805      	ldr	r0, [pc, #20]	; (279c <TeensyTimerTool::initYieldHook()+0x54>)

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2786:	6063      	str	r3, [r4, #4]
		_data = data;
    2788:	60e3      	str	r3, [r4, #12]
    278a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    278e:	f001 b9f5 	b.w	3b7c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2792:	68a3      	ldr	r3, [r4, #8]
    2794:	4620      	mov	r0, r4
    2796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    279a:	4718      	bx	r3
    279c:	2000068c 	.word	0x2000068c
    27a0:	200006e2 	.word	0x200006e2
    27a4:	000026ed 	.word	0x000026ed

000027a8 <_GLOBAL__sub_I__ZN15TeensyTimerTool5TCK_t13isInitializedE>:

    #include "EventResponder.h"

    namespace TeensyTimerTool
    {
        static EventResponder er;
    27a8:	4a02      	ldr	r2, [pc, #8]	; (27b4 <_GLOBAL__sub_I__ZN15TeensyTimerTool5TCK_t13isInitializedE+0xc>)
    27aa:	4903      	ldr	r1, [pc, #12]	; (27b8 <_GLOBAL__sub_I__ZN15TeensyTimerTool5TCK_t13isInitializedE+0x10>)
    27ac:	4803      	ldr	r0, [pc, #12]	; (27bc <_GLOBAL__sub_I__ZN15TeensyTimerTool5TCK_t13isInitializedE+0x14>)
    27ae:	f001 be57 	b.w	4460 <__aeabi_atexit>
    27b2:	bf00      	nop
    27b4:	20000674 	.word	0x20000674
    27b8:	000026b1 	.word	0x000026b1
    27bc:	2000068c 	.word	0x2000068c

000027c0 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    27c0:	4a95      	ldr	r2, [pc, #596]	; (2a18 <set_arm_clock+0x258>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    27c2:	4b96      	ldr	r3, [pc, #600]	; (2a1c <set_arm_clock+0x25c>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    27c4:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    27c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    27ca:	4c95      	ldr	r4, [pc, #596]	; (2a20 <set_arm_clock+0x260>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    27cc:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    27d0:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    27d2:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    27d4:	d91c      	bls.n	2810 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    27d6:	4b93      	ldr	r3, [pc, #588]	; (2a24 <set_arm_clock+0x264>)
    27d8:	4298      	cmp	r0, r3
    27da:	f240 8113 	bls.w	2a04 <set_arm_clock+0x244>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    27de:	4b92      	ldr	r3, [pc, #584]	; (2a28 <set_arm_clock+0x268>)
    27e0:	f240 6527 	movw	r5, #1575	; 0x627
    27e4:	4f91      	ldr	r7, [pc, #580]	; (2a2c <set_arm_clock+0x26c>)
    27e6:	4403      	add	r3, r0
    27e8:	4c91      	ldr	r4, [pc, #580]	; (2a30 <set_arm_clock+0x270>)
    27ea:	0a1a      	lsrs	r2, r3, #8
    27ec:	fba7 3202 	umull	r3, r2, r7, r2
    27f0:	09d3      	lsrs	r3, r2, #7
    27f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    27f6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    27fa:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    27fe:	42ab      	cmp	r3, r5
    2800:	bf28      	it	cs
    2802:	462b      	movcs	r3, r5
    2804:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    2808:	fba4 3503 	umull	r3, r5, r4, r3
    280c:	08ed      	lsrs	r5, r5, #3
    280e:	e004      	b.n	281a <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    2810:	4d88      	ldr	r5, [pc, #544]	; (2a34 <set_arm_clock+0x274>)
    2812:	42a8      	cmp	r0, r5
    2814:	bf94      	ite	ls
    2816:	2506      	movls	r5, #6
    2818:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    281a:	4a80      	ldr	r2, [pc, #512]	; (2a1c <set_arm_clock+0x25c>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    281c:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2820:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2824:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2826:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    282a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    282e:	d20a      	bcs.n	2846 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2830:	4b7b      	ldr	r3, [pc, #492]	; (2a20 <set_arm_clock+0x260>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2832:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2836:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2838:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    283a:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    283c:	6813      	ldr	r3, [r2, #0]
    283e:	2b00      	cmp	r3, #0
    2840:	dafc      	bge.n	283c <set_arm_clock+0x7c>
    2842:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    2846:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    284a:	d12f      	bne.n	28ac <set_arm_clock+0xec>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    284c:	4c7a      	ldr	r4, [pc, #488]	; (2a38 <set_arm_clock+0x278>)
    284e:	4a7b      	ldr	r2, [pc, #492]	; (2a3c <set_arm_clock+0x27c>)
    2850:	f8d4 c010 	ldr.w	ip, [r4, #16]
    2854:	4614      	mov	r4, r2
    2856:	ea0c 0202 	and.w	r2, ip, r2
    285a:	42a2      	cmp	r2, r4
    285c:	bf0a      	itet	eq
    285e:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    2862:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    2866:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    2868:	ea8e 0403 	eor.w	r4, lr, r3
    286c:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    2870:	d006      	beq.n	2880 <set_arm_clock+0xc0>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    2872:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    2876:	4c69      	ldr	r4, [pc, #420]	; (2a1c <set_arm_clock+0x25c>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    2878:	ea4e 0e03 	orr.w	lr, lr, r3
			CCM_CBCDR = cbcdr;
    287c:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    2880:	ea81 0302 	eor.w	r3, r1, r2
    2884:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    2888:	d008      	beq.n	289c <set_arm_clock+0xdc>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    288a:	4b64      	ldr	r3, [pc, #400]	; (2a1c <set_arm_clock+0x25c>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    288c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    2890:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    2892:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    2894:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    2896:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2898:	071c      	lsls	r4, r3, #28
    289a:	d4fc      	bmi.n	2896 <set_arm_clock+0xd6>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    289c:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    28a0:	4a5e      	ldr	r2, [pc, #376]	; (2a1c <set_arm_clock+0x25c>)
    28a2:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    28a6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    28a8:	0699      	lsls	r1, r3, #26
    28aa:	d4fc      	bmi.n	28a6 <set_arm_clock+0xe6>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    28ac:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    28ae:	4c64      	ldr	r4, [pc, #400]	; (2a40 <set_arm_clock+0x280>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    28b0:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    28b2:	fb01 f302 	mul.w	r3, r1, r2
    28b6:	fb00 f303 	mul.w	r3, r0, r3
    28ba:	42a3      	cmp	r3, r4
    28bc:	d809      	bhi.n	28d2 <set_arm_clock+0x112>
		if (div_arm < 8) {
    28be:	2a07      	cmp	r2, #7
    28c0:	f200 8095 	bhi.w	29ee <set_arm_clock+0x22e>
			div_arm = div_arm + 1;
    28c4:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    28c6:	fb01 f302 	mul.w	r3, r1, r2
    28ca:	fb00 f303 	mul.w	r3, r0, r3
    28ce:	42a3      	cmp	r3, r4
    28d0:	d9f5      	bls.n	28be <set_arm_clock+0xfe>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    28d2:	485c      	ldr	r0, [pc, #368]	; (2a44 <set_arm_clock+0x284>)
    28d4:	4c5c      	ldr	r4, [pc, #368]	; (2a48 <set_arm_clock+0x288>)
    28d6:	4418      	add	r0, r3
    28d8:	fba4 0300 	umull	r0, r3, r4, r0
    28dc:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    28de:	2b6c      	cmp	r3, #108	; 0x6c
    28e0:	f200 808b 	bhi.w	29fa <set_arm_clock+0x23a>
	if (mult < 54) mult = 54;
    28e4:	2b35      	cmp	r3, #53	; 0x35
    28e6:	f200 808f 	bhi.w	2a08 <set_arm_clock+0x248>
    28ea:	f8df 8188 	ldr.w	r8, [pc, #392]	; 2a74 <set_arm_clock+0x2b4>
    28ee:	2336      	movs	r3, #54	; 0x36
    28f0:	4856      	ldr	r0, [pc, #344]	; (2a4c <set_arm_clock+0x28c>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    28f2:	f8df c144 	ldr.w	ip, [pc, #324]	; 2a38 <set_arm_clock+0x278>
    28f6:	4c56      	ldr	r4, [pc, #344]	; (2a50 <set_arm_clock+0x290>)
    28f8:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    28fc:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2900:	ea09 0404 	and.w	r4, r9, r4
    2904:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    2906:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    290a:	d00b      	beq.n	2924 <set_arm_clock+0x164>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    290c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2910:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2914:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2916:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    291a:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    291e:	6823      	ldr	r3, [r4, #0]
    2920:	2b00      	cmp	r3, #0
    2922:	dafc      	bge.n	291e <set_arm_clock+0x15e>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    2924:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 2a1c <set_arm_clock+0x25c>
    2928:	3a01      	subs	r2, #1
    292a:	f8dc 3010 	ldr.w	r3, [ip, #16]
    292e:	f003 0307 	and.w	r3, r3, #7
    2932:	4293      	cmp	r3, r2
    2934:	d007      	beq.n	2946 <set_arm_clock+0x186>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2936:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    293a:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    293c:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2940:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2942:	03db      	lsls	r3, r3, #15
    2944:	d4fc      	bmi.n	2940 <set_arm_clock+0x180>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2946:	3901      	subs	r1, #1
    2948:	0289      	lsls	r1, r1, #10
    294a:	ea8e 0301 	eor.w	r3, lr, r1
    294e:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    2952:	d00c      	beq.n	296e <set_arm_clock+0x1ae>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    2954:	4b31      	ldr	r3, [pc, #196]	; (2a1c <set_arm_clock+0x25c>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    2956:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    295a:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    295e:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2960:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    2964:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2968:	6c93      	ldr	r3, [r2, #72]	; 0x48
    296a:	0799      	lsls	r1, r3, #30
    296c:	d4fc      	bmi.n	2968 <set_arm_clock+0x1a8>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    296e:	4b39      	ldr	r3, [pc, #228]	; (2a54 <set_arm_clock+0x294>)
    2970:	4939      	ldr	r1, [pc, #228]	; (2a58 <set_arm_clock+0x298>)
    2972:	4403      	add	r3, r0
    2974:	09db      	lsrs	r3, r3, #7
    2976:	fba1 3103 	umull	r3, r1, r1, r3
    297a:	0b09      	lsrs	r1, r1, #12
    297c:	2904      	cmp	r1, #4
    297e:	bf28      	it	cs
    2980:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    2982:	1e4b      	subs	r3, r1, #1
    2984:	021b      	lsls	r3, r3, #8
    2986:	ea8e 0203 	eor.w	r2, lr, r3
    298a:	f412 7f40 	tst.w	r2, #768	; 0x300
    298e:	d007      	beq.n	29a0 <set_arm_clock+0x1e0>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    2990:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2994:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    2998:	4a20      	ldr	r2, [pc, #128]	; (2a1c <set_arm_clock+0x25c>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    299a:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    299e:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    29a0:	4b1e      	ldr	r3, [pc, #120]	; (2a1c <set_arm_clock+0x25c>)
    29a2:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    29a4:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    29a6:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    29aa:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    29ac:	6c93      	ldr	r3, [r2, #72]	; 0x48
    29ae:	069b      	lsls	r3, r3, #26
    29b0:	d4fc      	bmi.n	29ac <set_arm_clock+0x1ec>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    29b2:	4b2a      	ldr	r3, [pc, #168]	; (2a5c <set_arm_clock+0x29c>)
    29b4:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    29b8:	4c29      	ldr	r4, [pc, #164]	; (2a60 <set_arm_clock+0x2a0>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    29ba:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    29bc:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    29c0:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    29c2:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    29c6:	4c27      	ldr	r4, [pc, #156]	; (2a64 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    29c8:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    29cc:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    29d0:	4a25      	ldr	r2, [pc, #148]	; (2a68 <set_arm_clock+0x2a8>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    29d2:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    29d4:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    29d6:	d208      	bcs.n	29ea <set_arm_clock+0x22a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    29d8:	4b11      	ldr	r3, [pc, #68]	; (2a20 <set_arm_clock+0x260>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    29da:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    29de:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    29e0:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    29e2:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    29e4:	6813      	ldr	r3, [r2, #0]
    29e6:	2b00      	cmp	r3, #0
    29e8:	dafc      	bge.n	29e4 <set_arm_clock+0x224>
	}

	return frequency;
}
    29ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    29ee:	2904      	cmp	r1, #4
    29f0:	f63f af6f 	bhi.w	28d2 <set_arm_clock+0x112>
				div_ahb = div_ahb + 1;
    29f4:	3101      	adds	r1, #1
				div_arm = 1;
    29f6:	2201      	movs	r2, #1
    29f8:	e75b      	b.n	28b2 <set_arm_clock+0xf2>
    29fa:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2a78 <set_arm_clock+0x2b8>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    29fe:	236c      	movs	r3, #108	; 0x6c
    2a00:	481a      	ldr	r0, [pc, #104]	; (2a6c <set_arm_clock+0x2ac>)
    2a02:	e776      	b.n	28f2 <set_arm_clock+0x132>
    2a04:	2512      	movs	r5, #18
    2a06:	e708      	b.n	281a <set_arm_clock+0x5a>
    2a08:	4819      	ldr	r0, [pc, #100]	; (2a70 <set_arm_clock+0x2b0>)
    2a0a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2a7c <set_arm_clock+0x2bc>
    2a0e:	fb00 f003 	mul.w	r0, r0, r3
    2a12:	ea43 0808 	orr.w	r8, r3, r8
    2a16:	e76c      	b.n	28f2 <set_arm_clock+0x132>
    2a18:	1f78a400 	.word	0x1f78a400
    2a1c:	400fc000 	.word	0x400fc000
    2a20:	40080000 	.word	0x40080000
    2a24:	23c34600 	.word	0x23c34600
    2a28:	dc3cba00 	.word	0xdc3cba00
    2a2c:	004cb223 	.word	0x004cb223
    2a30:	51eb851f 	.word	0x51eb851f
    2a34:	016e3600 	.word	0x016e3600
    2a38:	400d8000 	.word	0x400d8000
    2a3c:	80003040 	.word	0x80003040
    2a40:	269fb1ff 	.word	0x269fb1ff
    2a44:	005b8d80 	.word	0x005b8d80
    2a48:	165e9f81 	.word	0x165e9f81
    2a4c:	269fb200 	.word	0x269fb200
    2a50:	8001307f 	.word	0x8001307f
    2a54:	08f0d17f 	.word	0x08f0d17f
    2a58:	00e5109f 	.word	0x00e5109f
    2a5c:	431bde83 	.word	0x431bde83
    2a60:	200006b0 	.word	0x200006b0
    2a64:	200006ac 	.word	0x200006ac
    2a68:	20001a58 	.word	0x20001a58
    2a6c:	4d3f6400 	.word	0x4d3f6400
    2a70:	00b71b00 	.word	0x00b71b00
    2a74:	80002036 	.word	0x80002036
    2a78:	8000206c 	.word	0x8000206c
    2a7c:	80002000 	.word	0x80002000

00002a80 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    2a80:	2800      	cmp	r0, #0
    2a82:	d057      	beq.n	2b34 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2a84:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    2a86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a8a:	b085      	sub	sp, #20
    2a8c:	4683      	mov	fp, r0
    2a8e:	4c2a      	ldr	r4, [pc, #168]	; (2b38 <delay+0xb8>)
    2a90:	4d2a      	ldr	r5, [pc, #168]	; (2b3c <delay+0xbc>)
    2a92:	4e2b      	ldr	r6, [pc, #172]	; (2b40 <delay+0xc0>)
    2a94:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2a98:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    2a9c:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    2a9e:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2aa0:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    2aa4:	2900      	cmp	r1, #0
    2aa6:	d1f7      	bne.n	2a98 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2aa8:	4f26      	ldr	r7, [pc, #152]	; (2b44 <delay+0xc4>)
    2aaa:	e9cd 8902 	strd	r8, r9, [sp, #8]
    2aae:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    2ab0:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2ab2:	4a25      	ldr	r2, [pc, #148]	; (2b48 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    2ab4:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2ab8:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2aba:	6812      	ldr	r2, [r2, #0]
    2abc:	2701      	movs	r7, #1
    2abe:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    2ac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2ac6:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    2ac8:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2aca:	428b      	cmp	r3, r1
    2acc:	bf08      	it	eq
    2ace:	4542      	cmpeq	r2, r8
    2ad0:	bf2c      	ite	cs
    2ad2:	46c2      	movcs	sl, r8
    2ad4:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    2ad6:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2ada:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    2ade:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    2ae0:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2ae2:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    2ae6:	2b00      	cmp	r3, #0
    2ae8:	d1f7      	bne.n	2ada <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2aea:	9801      	ldr	r0, [sp, #4]
    2aec:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    2aee:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2af0:	4815      	ldr	r0, [pc, #84]	; (2b48 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2af2:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2af6:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2af8:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2afc:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    2b00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2b04:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2b08:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    2b0a:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2b0c:	4299      	cmp	r1, r3
    2b0e:	bf08      	it	eq
    2b10:	4540      	cmpeq	r0, r8
    2b12:	bf2c      	ite	cs
    2b14:	4643      	movcs	r3, r8
    2b16:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2b18:	441a      	add	r2, r3
    2b1a:	4572      	cmp	r2, lr
    2b1c:	d307      	bcc.n	2b2e <delay+0xae>
			if (--msec == 0) return;
    2b1e:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    2b22:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    2b26:	d1d8      	bne.n	2ada <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    2b28:	b005      	add	sp, #20
    2b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    2b2e:	f001 f8d7 	bl	3ce0 <yield>
	}
    2b32:	e7d2      	b.n	2ada <delay+0x5a>
    2b34:	4770      	bx	lr
    2b36:	bf00      	nop
    2b38:	20001d00 	.word	0x20001d00
    2b3c:	20001a5c 	.word	0x20001a5c
    2b40:	20001a54 	.word	0x20001a54
    2b44:	e0001004 	.word	0xe0001004
    2b48:	20001a58 	.word	0x20001a58

00002b4c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    2b4c:	2836      	cmp	r0, #54	; 0x36
    2b4e:	d81c      	bhi.n	2b8a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    2b50:	0100      	lsls	r0, r0, #4
    2b52:	4a1a      	ldr	r2, [pc, #104]	; (2bbc <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2b54:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    2b56:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2b5a:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    2b5c:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2b5e:	d015      	beq.n	2b8c <pinMode+0x40>
    2b60:	2904      	cmp	r1, #4
    2b62:	d013      	beq.n	2b8c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2b64:	68dc      	ldr	r4, [r3, #12]
    2b66:	6842      	ldr	r2, [r0, #4]
    2b68:	ea22 0204 	bic.w	r2, r2, r4
    2b6c:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2b6e:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    2b70:	b1e9      	cbz	r1, 2bae <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    2b72:	2902      	cmp	r1, #2
    2b74:	d01e      	beq.n	2bb4 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    2b76:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2b78:	685b      	ldr	r3, [r3, #4]
}
    2b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    2b7e:	bf0c      	ite	eq
    2b80:	490f      	ldreq	r1, [pc, #60]	; (2bc0 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    2b82:	4910      	ldrne	r1, [pc, #64]	; (2bc4 <pinMode+0x78>)
    2b84:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    2b86:	2215      	movs	r2, #21
    2b88:	601a      	str	r2, [r3, #0]
}
    2b8a:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2b8c:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    2b8e:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2b90:	6844      	ldr	r4, [r0, #4]
    2b92:	ea42 0204 	orr.w	r2, r2, r4
    2b96:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2b98:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    2b9a:	d008      	beq.n	2bae <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    2b9c:	f640 0138 	movw	r1, #2104	; 0x838
    2ba0:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2ba2:	685b      	ldr	r3, [r3, #4]
    2ba4:	2215      	movs	r2, #21
}
    2ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2baa:	601a      	str	r2, [r3, #0]
}
    2bac:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2bae:	2138      	movs	r1, #56	; 0x38
    2bb0:	6011      	str	r1, [r2, #0]
    2bb2:	e7f6      	b.n	2ba2 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2bb4:	4904      	ldr	r1, [pc, #16]	; (2bc8 <pinMode+0x7c>)
    2bb6:	6011      	str	r1, [r2, #0]
    2bb8:	e7f3      	b.n	2ba2 <pinMode+0x56>
    2bba:	bf00      	nop
    2bbc:	20000294 	.word	0x20000294
    2bc0:	00013038 	.word	0x00013038
    2bc4:	00010038 	.word	0x00010038
    2bc8:	0001f038 	.word	0x0001f038

00002bcc <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    2bcc:	2004      	movs	r0, #4
    2bce:	4671      	mov	r1, lr
    2bd0:	4208      	tst	r0, r1
    2bd2:	d003      	beq.n	2bdc <_MSP>
    2bd4:	f3ef 8009 	mrs	r0, PSP
    2bd8:	f000 b808 	b.w	2bec <HardFault_HandlerC>

00002bdc <_MSP>:
    2bdc:	f3ef 8008 	mrs	r0, MSP
    2be0:	f000 b804 	b.w	2bec <HardFault_HandlerC>

00002be4 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    2be4:	4770      	bx	lr
    2be6:	bf00      	nop

00002be8 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    2be8:	4770      	bx	lr
    2bea:	bf00      	nop

00002bec <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2bec:	4b1b      	ldr	r3, [pc, #108]	; (2c5c <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    2bee:	2105      	movs	r1, #5
    2bf0:	4a1b      	ldr	r2, [pc, #108]	; (2c60 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    2bf2:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    2bf4:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    2bf6:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    2bfa:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    2bfc:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    2c00:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2c02:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    2c04:	4c17      	ldr	r4, [pc, #92]	; (2c64 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2c06:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    2c08:	4817      	ldr	r0, [pc, #92]	; (2c68 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2c0a:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    2c0c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    2c10:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    2c14:	6823      	ldr	r3, [r4, #0]
    2c16:	4283      	cmp	r3, r0
    2c18:	d902      	bls.n	2c20 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    2c1a:	4814      	ldr	r0, [pc, #80]	; (2c6c <HardFault_HandlerC+0x80>)
    2c1c:	f7ff fdd0 	bl	27c0 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    2c20:	4d0e      	ldr	r5, [pc, #56]	; (2c5c <HardFault_HandlerC+0x70>)
    2c22:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    2c24:	2000      	movs	r0, #0
    2c26:	4a12      	ldr	r2, [pc, #72]	; (2c70 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    2c28:	4912      	ldr	r1, [pc, #72]	; (2c74 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    2c2a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    2c2e:	9001      	str	r0, [sp, #4]
    2c30:	9b01      	ldr	r3, [sp, #4]
    2c32:	4293      	cmp	r3, r2
    2c34:	d805      	bhi.n	2c42 <HardFault_HandlerC+0x56>
    2c36:	9b01      	ldr	r3, [sp, #4]
    2c38:	3301      	adds	r3, #1
    2c3a:	9301      	str	r3, [sp, #4]
    2c3c:	9b01      	ldr	r3, [sp, #4]
    2c3e:	4293      	cmp	r3, r2
    2c40:	d9f9      	bls.n	2c36 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    2c42:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    2c46:	9001      	str	r0, [sp, #4]
    2c48:	9b01      	ldr	r3, [sp, #4]
    2c4a:	428b      	cmp	r3, r1
    2c4c:	d8ed      	bhi.n	2c2a <HardFault_HandlerC+0x3e>
    2c4e:	9b01      	ldr	r3, [sp, #4]
    2c50:	3301      	adds	r3, #1
    2c52:	9301      	str	r3, [sp, #4]
    2c54:	9b01      	ldr	r3, [sp, #4]
    2c56:	428b      	cmp	r3, r1
    2c58:	d9f9      	bls.n	2c4e <HardFault_HandlerC+0x62>
    2c5a:	e7e6      	b.n	2c2a <HardFault_HandlerC+0x3e>
    2c5c:	401bc000 	.word	0x401bc000
    2c60:	401f8000 	.word	0x401f8000
    2c64:	200006b0 	.word	0x200006b0
    2c68:	23c345ff 	.word	0x23c345ff
    2c6c:	11e1a300 	.word	0x11e1a300
    2c70:	000f423f 	.word	0x000f423f
    2c74:	0089543f 	.word	0x0089543f

00002c78 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    2c78:	4a09      	ldr	r2, [pc, #36]	; (2ca0 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    2c7a:	b508      	push	{r3, lr}
        char *prev = __brkval;
    2c7c:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
    2c7e:	b120      	cbz	r0, 2c8a <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    2c80:	4418      	add	r0, r3
    2c82:	4908      	ldr	r1, [pc, #32]	; (2ca4 <_sbrk+0x2c>)
    2c84:	4288      	cmp	r0, r1
    2c86:	d802      	bhi.n	2c8e <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    2c88:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
    2c8a:	4618      	mov	r0, r3
    2c8c:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    2c8e:	f001 fbf3 	bl	4478 <__errno>
    2c92:	220c      	movs	r2, #12
                        return (void *)-1;
    2c94:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    2c98:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    2c9a:	4618      	mov	r0, r3
    2c9c:	bd08      	pop	{r3, pc}
    2c9e:	bf00      	nop
    2ca0:	200006b4 	.word	0x200006b4
    2ca4:	20280000 	.word	0x20280000

00002ca8 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    2ca8:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    2caa:	4a06      	ldr	r2, [pc, #24]	; (2cc4 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    2cac:	2107      	movs	r1, #7
    2cae:	4b06      	ldr	r3, [pc, #24]	; (2cc8 <Panic_Temp_isr+0x20>)
    2cb0:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    2cb2:	6b93      	ldr	r3, [r2, #56]	; 0x38
    2cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2cb8:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    2cba:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    2cbe:	bf30      	wfi
    2cc0:	e7fd      	b.n	2cbe <Panic_Temp_isr+0x16>
    2cc2:	bf00      	nop
    2cc4:	400d4000 	.word	0x400d4000
    2cc8:	400ac000 	.word	0x400ac000

00002ccc <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    2ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2cd0:	4ca6      	ldr	r4, [pc, #664]	; (2f6c <isr+0x2a0>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    2cd2:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2cd4:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2cd8:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    2cdc:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2ce0:	f000 808e 	beq.w	2e00 <isr+0x134>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    2ce4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2ce8:	2b00      	cmp	r3, #0
    2cea:	f000 8084 	beq.w	2df6 <isr+0x12a>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2cee:	f04f 1a01 	mov.w	sl, #65537	; 0x10001
    2cf2:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 2fa4 <isr+0x2d8>
    2cf6:	4e9e      	ldr	r6, [pc, #632]	; (2f70 <isr+0x2a4>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2cf8:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2cfa:	46d3      	mov	fp, sl
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    2cfc:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    2d00:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    2d02:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2d04:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2d08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2d0c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    2d10:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2d14:	0499      	lsls	r1, r3, #18
    2d16:	d5f5      	bpl.n	2d04 <isr+0x38>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    2d18:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    2d1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2d20:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2d24:	f8c5 b1b4 	str.w	fp, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    2d28:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2d2c:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    2d30:	d1fa      	bne.n	2d28 <isr+0x5c>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2d32:	b281      	uxth	r1, r0
    2d34:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    2d38:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2d3c:	42b9      	cmp	r1, r7
    2d3e:	f200 8133 	bhi.w	2fa8 <isr+0x2dc>
    2d42:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    2d46:	f080 82a4 	bcs.w	3292 <isr+0x5c6>
    2d4a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    2d4e:	f000 81f7 	beq.w	3140 <isr+0x474>
    2d52:	f200 816e 	bhi.w	3032 <isr+0x366>
    2d56:	2980      	cmp	r1, #128	; 0x80
    2d58:	f000 81b7 	beq.w	30ca <isr+0x3fe>
    2d5c:	2982      	cmp	r1, #130	; 0x82
    2d5e:	f040 8160 	bne.w	3022 <isr+0x356>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2d62:	b292      	uxth	r2, r2
    2d64:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2d68:	2907      	cmp	r1, #7
    2d6a:	f200 815a 	bhi.w	3022 <isr+0x356>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2d6e:	0089      	lsls	r1, r1, #2
    2d70:	4f80      	ldr	r7, [pc, #512]	; (2f74 <isr+0x2a8>)
		reply_buffer[0] = 0;
    2d72:	4881      	ldr	r0, [pc, #516]	; (2f78 <isr+0x2ac>)
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2d74:	0612      	lsls	r2, r2, #24
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2d76:	440f      	add	r7, r1
    2d78:	6839      	ldr	r1, [r7, #0]
		reply_buffer[0] = 0;
    2d7a:	7003      	strb	r3, [r0, #0]
		reply_buffer[1] = 0;
    2d7c:	7043      	strb	r3, [r0, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2d7e:	f140 831b 	bpl.w	33b8 <isr+0x6ec>
    2d82:	03cb      	lsls	r3, r1, #15
    2d84:	d501      	bpl.n	2d8a <isr+0xbe>
			reply_buffer[0] = 1;
    2d86:	2301      	movs	r3, #1
    2d88:	7003      	strb	r3, [r0, #0]
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2d8a:	4a7c      	ldr	r2, [pc, #496]	; (2f7c <isr+0x2b0>)
    2d8c:	2701      	movs	r7, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2d8e:	4b7c      	ldr	r3, [pc, #496]	; (2f80 <isr+0x2b4>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    2d90:	2100      	movs	r1, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2d92:	6017      	str	r7, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2d94:	6053      	str	r3, [r2, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    2d96:	64b2      	str	r2, [r6, #72]	; 0x48
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2d98:	4b7a      	ldr	r3, [pc, #488]	; (2f84 <isr+0x2b8>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    2d9a:	64f1      	str	r1, [r6, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    2d9c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2da0:	f503 5780 	add.w	r7, r3, #4096	; 0x1000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2da4:	6090      	str	r0, [r2, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2da6:	f503 5000 	add.w	r0, r3, #8192	; 0x2000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2daa:	60d3      	str	r3, [r2, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2dac:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2db0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2db4:	6117      	str	r7, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2db6:	6150      	str	r0, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2db8:	6193      	str	r3, [r2, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2dba:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    2dbe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2dc2:	2b00      	cmp	r3, #0
    2dc4:	d1fb      	bne.n	2dbe <isr+0xf2>
	}
	endpoint0_transfer_ack.next = 1;
    2dc6:	4a70      	ldr	r2, [pc, #448]	; (2f88 <isr+0x2bc>)
    2dc8:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2dca:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    2dcc:	60f3      	str	r3, [r6, #12]
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    2dce:	60b2      	str	r2, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2dd0:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2dd2:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2dd4:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    2dd8:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2ddc:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    2dde:	ea41 0300 	orr.w	r3, r1, r0
    2de2:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    2de6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2dea:	2b00      	cmp	r3, #0
    2dec:	d1fb      	bne.n	2de6 <isr+0x11a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2dee:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2df2:	2b00      	cmp	r3, #0
    2df4:	d182      	bne.n	2cfc <isr+0x30>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    2df6:	4a5d      	ldr	r2, [pc, #372]	; (2f6c <isr+0x2a0>)
    2df8:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    2dfc:	2b00      	cmp	r3, #0
    2dfe:	d150      	bne.n	2ea2 <isr+0x1d6>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    2e00:	f018 0f40 	tst.w	r8, #64	; 0x40
    2e04:	d018      	beq.n	2e38 <isr+0x16c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2e06:	4b59      	ldr	r3, [pc, #356]	; (2f6c <isr+0x2a0>)
    2e08:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2e0c:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2e0e:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    2e12:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    2e16:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2e1a:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    2e1e:	4b53      	ldr	r3, [pc, #332]	; (2f6c <isr+0x2a0>)
    2e20:	2c00      	cmp	r4, #0
    2e22:	d1fa      	bne.n	2e1a <isr+0x14e>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    2e24:	f04f 32ff 	mov.w	r2, #4294967295
    2e28:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    2e2c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    2e30:	f000 fde6 	bl	3a00 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    2e34:	4b55      	ldr	r3, [pc, #340]	; (2f8c <isr+0x2c0>)
    2e36:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    2e38:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    2e3c:	d003      	beq.n	2e46 <isr+0x17a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    2e3e:	4b54      	ldr	r3, [pc, #336]	; (2f90 <isr+0x2c4>)
    2e40:	681b      	ldr	r3, [r3, #0]
    2e42:	b103      	cbz	r3, 2e46 <isr+0x17a>
    2e44:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    2e46:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    2e4a:	d003      	beq.n	2e54 <isr+0x188>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    2e4c:	4b51      	ldr	r3, [pc, #324]	; (2f94 <isr+0x2c8>)
    2e4e:	681b      	ldr	r3, [r3, #0]
    2e50:	b103      	cbz	r3, 2e54 <isr+0x188>
    2e52:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    2e54:	f018 0f04 	tst.w	r8, #4
    2e58:	d008      	beq.n	2e6c <isr+0x1a0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    2e5a:	4b44      	ldr	r3, [pc, #272]	; (2f6c <isr+0x2a0>)
    2e5c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    2e60:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    2e64:	d07f      	beq.n	2f66 <isr+0x29a>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    2e66:	4b4c      	ldr	r3, [pc, #304]	; (2f98 <isr+0x2cc>)
    2e68:	2201      	movs	r2, #1
    2e6a:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    2e6c:	4b3f      	ldr	r3, [pc, #252]	; (2f6c <isr+0x2a0>)
    2e6e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    2e72:	0612      	lsls	r2, r2, #24
    2e74:	d512      	bpl.n	2e9c <isr+0x1d0>
    2e76:	f018 0f80 	tst.w	r8, #128	; 0x80
    2e7a:	d00f      	beq.n	2e9c <isr+0x1d0>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    2e7c:	4947      	ldr	r1, [pc, #284]	; (2f9c <isr+0x2d0>)
    2e7e:	780a      	ldrb	r2, [r1, #0]
    2e80:	b162      	cbz	r2, 2e9c <isr+0x1d0>
			if (--usb_reboot_timer == 0) {
    2e82:	3a01      	subs	r2, #1
    2e84:	b2d2      	uxtb	r2, r2
    2e86:	700a      	strb	r2, [r1, #0]
    2e88:	b942      	cbnz	r2, 2e9c <isr+0x1d0>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    2e8a:	4945      	ldr	r1, [pc, #276]	; (2fa0 <isr+0x2d4>)
    2e8c:	780a      	ldrb	r2, [r1, #0]
    2e8e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2e92:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    2e94:	2a00      	cmp	r2, #0
    2e96:	f000 831b 	beq.w	34d0 <isr+0x804>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    2e9a:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    2e9c:	b003      	add	sp, #12
    2e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2ea2:	4940      	ldr	r1, [pc, #256]	; (2fa4 <isr+0x2d8>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    2ea4:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2ea8:	6808      	ldr	r0, [r1, #0]
    2eaa:	4203      	tst	r3, r0
    2eac:	f040 82c7 	bne.w	343e <isr+0x772>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    2eb0:	4a36      	ldr	r2, [pc, #216]	; (2f8c <isr+0x2c0>)
    2eb2:	6817      	ldr	r7, [r2, #0]
#if 1
			if (completestatus) {
    2eb4:	403b      	ands	r3, r7
    2eb6:	9301      	str	r3, [sp, #4]
    2eb8:	d0a2      	beq.n	2e00 <isr+0x134>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    2eba:	ea5f 4913 	movs.w	r9, r3, lsr #16
    2ebe:	d025      	beq.n	2f0c <isr+0x240>
    2ec0:	4e2b      	ldr	r6, [pc, #172]	; (2f70 <isr+0x2a4>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    2ec2:	f04f 0a01 	mov.w	sl, #1
    2ec6:	46b3      	mov	fp, r6
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    2ec8:	fa99 f5a9 	rbit	r5, r9
    2ecc:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    2ed0:	eb0b 17c5 	add.w	r7, fp, r5, lsl #7
    2ed4:	3740      	adds	r7, #64	; 0x40
};*/

static void run_callbacks(endpoint_t *ep)
{
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    2ed6:	6b38      	ldr	r0, [r7, #48]	; 0x30
	if (first == NULL) return;
    2ed8:	b198      	cbz	r0, 2f02 <isr+0x236>
    2eda:	4602      	mov	r2, r0
    2edc:	2400      	movs	r4, #0
    2ede:	e004      	b.n	2eea <isr+0x21e>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    2ee0:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    2ee2:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    2ee4:	2a01      	cmp	r2, #1
    2ee6:	f000 82dd 	beq.w	34a4 <isr+0x7d8>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    2eea:	6853      	ldr	r3, [r2, #4]
    2eec:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    2ef0:	d0f6      	beq.n	2ee0 <isr+0x214>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    2ef2:	633a      	str	r2, [r7, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2ef4:	b12c      	cbz	r4, 2f02 <isr+0x236>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    2ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    2ef8:	6806      	ldr	r6, [r0, #0]
		ep->callback_function(first);
    2efa:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2efc:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    2efe:	4630      	mov	r0, r6
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2f00:	d1f9      	bne.n	2ef6 <isr+0x22a>
				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    2f02:	fa0a f505 	lsl.w	r5, sl, r5
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    2f06:	ea39 0905 	bics.w	r9, r9, r5
    2f0a:	d1dd      	bne.n	2ec8 <isr+0x1fc>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    2f0c:	f8bd 7004 	ldrh.w	r7, [sp, #4]
				while(rx) {
    2f10:	2f00      	cmp	r7, #0
    2f12:	f43f af75 	beq.w	2e00 <isr+0x134>
    2f16:	4e16      	ldr	r6, [pc, #88]	; (2f70 <isr+0x2a4>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    2f18:	f04f 0901 	mov.w	r9, #1
    2f1c:	46b3      	mov	fp, r6
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    2f1e:	fa97 f5a7 	rbit	r5, r7
    2f22:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    2f26:	eb0b 1ac5 	add.w	sl, fp, r5, lsl #7
};*/

static void run_callbacks(endpoint_t *ep)
{
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    2f2a:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
	if (first == NULL) return;
    2f2e:	b1a8      	cbz	r0, 2f5c <isr+0x290>
    2f30:	4602      	mov	r2, r0
    2f32:	2400      	movs	r4, #0
    2f34:	e004      	b.n	2f40 <isr+0x274>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    2f36:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    2f38:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    2f3a:	2a01      	cmp	r2, #1
    2f3c:	f000 82ad 	beq.w	349a <isr+0x7ce>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    2f40:	6853      	ldr	r3, [r2, #4]
    2f42:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    2f46:	d0f6      	beq.n	2f36 <isr+0x26a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    2f48:	f8ca 2030 	str.w	r2, [sl, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2f4c:	b134      	cbz	r4, 2f5c <isr+0x290>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    2f4e:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    2f52:	6806      	ldr	r6, [r0, #0]
		ep->callback_function(first);
    2f54:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2f56:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    2f58:	4630      	mov	r0, r6
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2f5a:	d1f8      	bne.n	2f4e <isr+0x282>
				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    2f5c:	fa09 f505 	lsl.w	r5, r9, r5
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    2f60:	43af      	bics	r7, r5
    2f62:	d1dc      	bne.n	2f1e <isr+0x252>
    2f64:	e74c      	b.n	2e00 <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    2f66:	4a0c      	ldr	r2, [pc, #48]	; (2f98 <isr+0x2cc>)
    2f68:	7013      	strb	r3, [r2, #0]
    2f6a:	e77f      	b.n	2e6c <isr+0x1a0>
    2f6c:	402e0000 	.word	0x402e0000
    2f70:	20004000 	.word	0x20004000
    2f74:	402e01c0 	.word	0x402e01c0
    2f78:	20001a98 	.word	0x20001a98
    2f7c:	20003000 	.word	0x20003000
    2f80:	00020080 	.word	0x00020080
    2f84:	20002a98 	.word	0x20002a98
    2f88:	20003020 	.word	0x20003020
    2f8c:	20001a78 	.word	0x20001a78
    2f90:	20001a74 	.word	0x20001a74
    2f94:	20001a80 	.word	0x20001a80
    2f98:	20001a84 	.word	0x20001a84
    2f9c:	20001a8c 	.word	0x20001a8c
    2fa0:	20001a7c 	.word	0x20001a7c
    2fa4:	20001a88 	.word	0x20001a88
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2fa8:	f242 0721 	movw	r7, #8225	; 0x2021
    2fac:	42b9      	cmp	r1, r7
    2fae:	d034      	beq.n	301a <isr+0x34e>
    2fb0:	d867      	bhi.n	3082 <isr+0x3b6>
    2fb2:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    2fb6:	f000 8130 	beq.w	321a <isr+0x54e>
    2fba:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    2fbe:	d130      	bne.n	3022 <isr+0x356>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    2fc0:	f3c0 4007 	ubfx	r0, r0, #16, #8
    2fc4:	4ab7      	ldr	r2, [pc, #732]	; (32a4 <isr+0x5d8>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    2fc6:	49b8      	ldr	r1, [pc, #736]	; (32a8 <isr+0x5dc>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    2fc8:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2fca:	4fb8      	ldr	r7, [pc, #736]	; (32ac <isr+0x5e0>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2fcc:	4ab8      	ldr	r2, [pc, #736]	; (32b0 <isr+0x5e4>)
    2fce:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2fd0:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    2fd4:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2fd8:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    2fdc:	f000 fd12 	bl	3a04 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2fe0:	4ab4      	ldr	r2, [pc, #720]	; (32b4 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2fe2:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2fe4:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2fe6:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2fe8:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2fea:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2fec:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2fee:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2ff0:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2ff4:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2ff8:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2ffa:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    2ffe:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3002:	4aad      	ldr	r2, [pc, #692]	; (32b8 <isr+0x5ec>)
    3004:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    3006:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    300a:	2b00      	cmp	r3, #0
    300c:	d1fb      	bne.n	3006 <isr+0x33a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    300e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3012:	2b00      	cmp	r3, #0
    3014:	f47f ae72 	bne.w	2cfc <isr+0x30>
    3018:	e6ed      	b.n	2df6 <isr+0x12a>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    301a:	0c11      	lsrs	r1, r2, #16
    301c:	2907      	cmp	r1, #7
    301e:	f000 81cf 	beq.w	33c0 <isr+0x6f4>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    3022:	f8c4 a1c0 	str.w	sl, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3026:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    302a:	2b00      	cmp	r3, #0
    302c:	f47f ae66 	bne.w	2cfc <isr+0x30>
    3030:	e6e1      	b.n	2df6 <isr+0x12a>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3032:	f240 3702 	movw	r7, #770	; 0x302
    3036:	42b9      	cmp	r1, r7
    3038:	f000 80bf 	beq.w	31ba <isr+0x4ee>
    303c:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    3040:	d1ef      	bne.n	3022 <isr+0x356>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3042:	4a9c      	ldr	r2, [pc, #624]	; (32b4 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3044:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3046:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3048:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    304a:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    304c:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    304e:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3050:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3054:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3058:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    305a:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    305e:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    3062:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3066:	2b00      	cmp	r3, #0
    3068:	d1fb      	bne.n	3062 <isr+0x396>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    306a:	0c03      	lsrs	r3, r0, #16
    306c:	065b      	lsls	r3, r3, #25
    306e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3072:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3076:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    307a:	2b00      	cmp	r3, #0
    307c:	f47f ae3e 	bne.w	2cfc <isr+0x30>
    3080:	e6b9      	b.n	2df6 <isr+0x12a>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3082:	f242 2321 	movw	r3, #8737	; 0x2221
    3086:	4299      	cmp	r1, r3
    3088:	f000 808a 	beq.w	31a0 <isr+0x4d4>
    308c:	f242 3321 	movw	r3, #8993	; 0x2321
    3090:	4299      	cmp	r1, r3
    3092:	d1c6      	bne.n	3022 <isr+0x356>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3094:	4b87      	ldr	r3, [pc, #540]	; (32b4 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3096:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    3098:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    309a:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    309c:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    309e:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    30a0:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    30a2:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    30a4:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    30a8:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    30ac:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    30ae:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    30b2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    30b6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    30ba:	2b00      	cmp	r3, #0
    30bc:	d1fb      	bne.n	30b6 <isr+0x3ea>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    30be:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    30c2:	2b00      	cmp	r3, #0
    30c4:	f47f ae1a 	bne.w	2cfc <isr+0x30>
    30c8:	e695      	b.n	2df6 <isr+0x12a>
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    30ca:	487c      	ldr	r0, [pc, #496]	; (32bc <isr+0x5f0>)
    30cc:	2701      	movs	r7, #1
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    30ce:	497c      	ldr	r1, [pc, #496]	; (32c0 <isr+0x5f4>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    30d0:	4a7c      	ldr	r2, [pc, #496]	; (32c4 <isr+0x5f8>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    30d2:	64f3      	str	r3, [r6, #76]	; 0x4c
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    30d4:	700b      	strb	r3, [r1, #0]
		reply_buffer[1] = 0;
    30d6:	704b      	strb	r3, [r1, #1]
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    30d8:	f501 5300 	add.w	r3, r1, #8192	; 0x2000
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    30dc:	6007      	str	r7, [r0, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    30de:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    30e2:	64b0      	str	r0, [r6, #72]	; 0x48
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    30e4:	6042      	str	r2, [r0, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    30e6:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    30ea:	60c7      	str	r7, [r0, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    30ec:	f501 5740 	add.w	r7, r1, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    30f0:	6103      	str	r3, [r0, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    30f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    30f6:	f501 4380 	add.w	r3, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    30fa:	6081      	str	r1, [r0, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    30fc:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3100:	6147      	str	r7, [r0, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3102:	6183      	str	r3, [r0, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    3104:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3108:	2b00      	cmp	r3, #0
    310a:	d1fb      	bne.n	3104 <isr+0x438>
	}
	endpoint0_transfer_ack.next = 1;
    310c:	4a69      	ldr	r2, [pc, #420]	; (32b4 <isr+0x5e8>)
    310e:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3110:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    3112:	60f3      	str	r3, [r6, #12]
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    3114:	60b2      	str	r2, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3116:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3118:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    311a:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    311e:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3122:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    3124:	ea41 0300 	orr.w	r3, r1, r0
    3128:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    312c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3130:	2b00      	cmp	r3, #0
    3132:	d1fb      	bne.n	312c <isr+0x460>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3134:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3138:	2b00      	cmp	r3, #0
    313a:	f47f addf 	bne.w	2cfc <isr+0x30>
    313e:	e65a      	b.n	2df6 <isr+0x12a>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    3140:	b292      	uxth	r2, r2
    3142:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    3146:	2b07      	cmp	r3, #7
    3148:	f63f af6b 	bhi.w	3022 <isr+0x356>
		dir = setup.wIndex & 0x80;
		if (dir) {
    314c:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    3150:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3154:	4a5c      	ldr	r2, [pc, #368]	; (32c8 <isr+0x5fc>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3156:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    315a:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    315e:	441a      	add	r2, r3
    3160:	6813      	ldr	r3, [r2, #0]
    3162:	bf14      	ite	ne
    3164:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    3168:	f023 0301 	biceq.w	r3, r3, #1
    316c:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    316e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3170:	4b50      	ldr	r3, [pc, #320]	; (32b4 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3172:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3174:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3176:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3178:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    317a:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    317e:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3182:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    3184:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    3188:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    318c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3190:	2b00      	cmp	r3, #0
    3192:	d1fb      	bne.n	318c <isr+0x4c0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3194:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3198:	2b00      	cmp	r3, #0
    319a:	f47f adaf 	bne.w	2cfc <isr+0x30>
    319e:	e62a      	b.n	2df6 <isr+0x12a>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    31a0:	b292      	uxth	r2, r2
    31a2:	2a00      	cmp	r2, #0
    31a4:	f47f af76 	bne.w	3094 <isr+0x3c8>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    31a8:	4b48      	ldr	r3, [pc, #288]	; (32cc <isr+0x600>)
			usb_cdc_line_rtsdtr = setup.wValue;
    31aa:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    31ae:	4a48      	ldr	r2, [pc, #288]	; (32d0 <isr+0x604>)
    31b0:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    31b2:	4b48      	ldr	r3, [pc, #288]	; (32d4 <isr+0x608>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    31b4:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    31b6:	7018      	strb	r0, [r3, #0]
    31b8:	e76c      	b.n	3094 <isr+0x3c8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    31ba:	b292      	uxth	r2, r2
    31bc:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    31c0:	2b07      	cmp	r3, #7
    31c2:	f63f af2e 	bhi.w	3022 <isr+0x356>
		dir = setup.wIndex & 0x80;
		if (dir) {
    31c6:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    31ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
    31ce:	4a3e      	ldr	r2, [pc, #248]	; (32c8 <isr+0x5fc>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    31d0:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    31d4:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    31d8:	441a      	add	r2, r3
    31da:	6813      	ldr	r3, [r2, #0]
    31dc:	bf14      	ite	ne
    31de:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    31e2:	f043 0301 	orreq.w	r3, r3, #1
    31e6:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    31e8:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    31ea:	4b32      	ldr	r3, [pc, #200]	; (32b4 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    31ec:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    31ee:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    31f0:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    31f2:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    31f4:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    31f8:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    31fc:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    31fe:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    3202:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    3206:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    320a:	2b00      	cmp	r3, #0
    320c:	d1fb      	bne.n	3206 <isr+0x53a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    320e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3212:	2b00      	cmp	r3, #0
    3214:	f47f ad72 	bne.w	2cfc <isr+0x30>
    3218:	e5ed      	b.n	2df6 <isr+0x12a>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    321a:	4922      	ldr	r1, [pc, #136]	; (32a4 <isr+0x5d8>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    321c:	2201      	movs	r2, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    321e:	4828      	ldr	r0, [pc, #160]	; (32c0 <isr+0x5f4>)
    3220:	7809      	ldrb	r1, [r1, #0]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    3222:	64f3      	str	r3, [r6, #76]	; 0x4c
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3224:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3228:	7001      	strb	r1, [r0, #0]
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    322a:	4b2b      	ldr	r3, [pc, #172]	; (32d8 <isr+0x60c>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    322c:	4923      	ldr	r1, [pc, #140]	; (32bc <isr+0x5f0>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    322e:	604b      	str	r3, [r1, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3230:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3234:	64b1      	str	r1, [r6, #72]	; 0x48
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3236:	600a      	str	r2, [r1, #0]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3238:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    323c:	60cf      	str	r7, [r1, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    323e:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3242:	610b      	str	r3, [r1, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3244:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3248:	f500 4380 	add.w	r3, r0, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    324c:	6088      	str	r0, [r1, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    324e:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3252:	614f      	str	r7, [r1, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3254:	618b      	str	r3, [r1, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    3256:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    325a:	2b00      	cmp	r3, #0
    325c:	d1fb      	bne.n	3256 <isr+0x58a>
	}
	endpoint0_transfer_ack.next = 1;
    325e:	4a15      	ldr	r2, [pc, #84]	; (32b4 <isr+0x5e8>)
    3260:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3262:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    3264:	60f3      	str	r3, [r6, #12]
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    3266:	60b2      	str	r2, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3268:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    326a:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    326c:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    3270:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3274:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    3276:	ea41 0300 	orr.w	r3, r1, r0
    327a:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    327e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3282:	2b00      	cmp	r3, #0
    3284:	d1fb      	bne.n	327e <isr+0x5b2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3286:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    328a:	2b00      	cmp	r3, #0
    328c:	f47f ad36 	bne.w	2cfc <isr+0x30>
    3290:	e5b1      	b.n	2df6 <isr+0x12a>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    3292:	4b12      	ldr	r3, [pc, #72]	; (32dc <isr+0x610>)
    3294:	6859      	ldr	r1, [r3, #4]
    3296:	2900      	cmp	r1, #0
    3298:	f43f aec3 	beq.w	3022 <isr+0x356>
    329c:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    329e:	fa1f fe82 	uxth.w	lr, r2
    32a2:	e022      	b.n	32ea <isr+0x61e>
    32a4:	20001aa8 	.word	0x20001aa8
    32a8:	000200c8 	.word	0x000200c8
    32ac:	00cc0002 	.word	0x00cc0002
    32b0:	00c80002 	.word	0x00c80002
    32b4:	20003020 	.word	0x20003020
    32b8:	20001a88 	.word	0x20001a88
    32bc:	20003000 	.word	0x20003000
    32c0:	20001a98 	.word	0x20001a98
    32c4:	00020080 	.word	0x00020080
    32c8:	402e01c0 	.word	0x402e01c0
    32cc:	20001a5c 	.word	0x20001a5c
    32d0:	20004288 	.word	0x20004288
    32d4:	20001c90 	.word	0x20001c90
    32d8:	00010080 	.word	0x00010080
    32dc:	20000604 	.word	0x20000604
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    32e0:	330c      	adds	r3, #12
    32e2:	6859      	ldr	r1, [r3, #4]
    32e4:	2900      	cmp	r1, #0
    32e6:	f43f ae9c 	beq.w	3022 <isr+0x356>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    32ea:	881f      	ldrh	r7, [r3, #0]
    32ec:	4287      	cmp	r7, r0
    32ee:	d1f7      	bne.n	32e0 <isr+0x614>
    32f0:	885f      	ldrh	r7, [r3, #2]
    32f2:	4577      	cmp	r7, lr
    32f4:	d1f4      	bne.n	32e0 <isr+0x614>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    32f6:	0a07      	lsrs	r7, r0, #8
    32f8:	2f03      	cmp	r7, #3
    32fa:	f000 80ff 	beq.w	34fc <isr+0x830>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    32fe:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    3300:	0c12      	lsrs	r2, r2, #16
    3302:	4293      	cmp	r3, r2
    3304:	bf28      	it	cs
    3306:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    3308:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    330c:	f000 80e7 	beq.w	34de <isr+0x812>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    3310:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    3314:	f000 80c9 	beq.w	34aa <isr+0x7de>
    3318:	4f7b      	ldr	r7, [pc, #492]	; (3508 <isr+0x83c>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    331a:	461a      	mov	r2, r3
    331c:	9301      	str	r3, [sp, #4]
    331e:	4638      	mov	r0, r7
    3320:	f000 fd56 	bl	3dd0 <memcpy>
    3324:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3326:	f027 021f 	bic.w	r2, r7, #31
    332a:	4977      	ldr	r1, [pc, #476]	; (3508 <isr+0x83c>)
	uint32_t end_addr = (uint32_t)addr + size;
    332c:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    332e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    3332:	4876      	ldr	r0, [pc, #472]	; (350c <isr+0x840>)
    3334:	6002      	str	r2, [r0, #0]
		location += 32;
    3336:	3220      	adds	r2, #32
	} while (location < end_addr);
    3338:	4297      	cmp	r7, r2
    333a:	d8fa      	bhi.n	3332 <isr+0x666>
	asm("dsb");
    333c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3340:	f3bf 8f6f 	isb	sy
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    3344:	b303      	cbz	r3, 3388 <isr+0x6bc>
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3346:	041b      	lsls	r3, r3, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3348:	4a71      	ldr	r2, [pc, #452]	; (3510 <isr+0x844>)
    334a:	2701      	movs	r7, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    334c:	2000      	movs	r0, #0
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    334e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3352:	64b2      	str	r2, [r6, #72]	; 0x48
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3354:	6017      	str	r7, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3356:	6053      	str	r3, [r2, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    3358:	64f0      	str	r0, [r6, #76]	; 0x4c
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    335a:	4b6e      	ldr	r3, [pc, #440]	; (3514 <isr+0x848>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    335c:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3360:	f503 5780 	add.w	r7, r3, #4096	; 0x1000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3364:	6091      	str	r1, [r2, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3366:	f503 5e00 	add.w	lr, r3, #8192	; 0x2000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    336a:	60d3      	str	r3, [r2, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    336c:	f440 3180 	orr.w	r1, r0, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3370:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3374:	6117      	str	r7, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3376:	f8c2 e014 	str.w	lr, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    337a:	6193      	str	r3, [r2, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    337c:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    3380:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3384:	2b00      	cmp	r3, #0
    3386:	d1fb      	bne.n	3380 <isr+0x6b4>
	}
	endpoint0_transfer_ack.next = 1;
    3388:	4b63      	ldr	r3, [pc, #396]	; (3518 <isr+0x84c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    338a:	2200      	movs	r2, #0
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    338c:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    338e:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    3390:	60b3      	str	r3, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3392:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3394:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    3396:	60f2      	str	r2, [r6, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3398:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    339c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    33a0:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    33a2:	ea41 0300 	orr.w	r3, r1, r0
    33a6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    33aa:	f8c9 2000 	str.w	r2, [r9]
	while (USB1_ENDPTPRIME) ;
    33ae:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    33b2:	2b00      	cmp	r3, #0
    33b4:	d1fb      	bne.n	33ae <isr+0x6e2>
    33b6:	e51a      	b.n	2dee <isr+0x122>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    33b8:	07cf      	lsls	r7, r1, #31
    33ba:	f57f ace6 	bpl.w	2d8a <isr+0xbe>
    33be:	e4e2      	b.n	2d86 <isr+0xba>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    33c0:	4f56      	ldr	r7, [pc, #344]	; (351c <isr+0x850>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    33c2:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    33c6:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    33c8:	4955      	ldr	r1, [pc, #340]	; (3520 <isr+0x854>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    33ca:	4b51      	ldr	r3, [pc, #324]	; (3510 <isr+0x844>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    33cc:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    33ce:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    33d2:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    33d4:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    33d6:	4953      	ldr	r1, [pc, #332]	; (3524 <isr+0x858>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    33d8:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    33dc:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    33de:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    33e2:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    33e6:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    33e8:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    33ec:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    33f0:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    33f4:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    33f8:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    33fa:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    33fe:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3400:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    3402:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3406:	2b00      	cmp	r3, #0
    3408:	d1fb      	bne.n	3402 <isr+0x736>
	}
	endpoint0_transfer_ack.next = 1;
    340a:	4a43      	ldr	r2, [pc, #268]	; (3518 <isr+0x84c>)
    340c:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    340e:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3412:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3414:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3416:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    341a:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    341c:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    341e:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3422:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3426:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    3428:	ea41 0300 	orr.w	r3, r1, r0
    342c:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3430:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    3434:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3438:	2b00      	cmp	r3, #0
    343a:	d1fb      	bne.n	3434 <isr+0x768>
    343c:	e4d7      	b.n	2dee <isr+0x122>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    343e:	4837      	ldr	r0, [pc, #220]	; (351c <isr+0x850>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    3440:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    3444:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    3446:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    3448:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    344a:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    344c:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    344e:	f47f ad2f 	bne.w	2eb0 <isr+0x1e4>
    3452:	b281      	uxth	r1, r0
    3454:	2900      	cmp	r1, #0
    3456:	f47f ad2b 	bne.w	2eb0 <isr+0x1e4>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    345a:	4932      	ldr	r1, [pc, #200]	; (3524 <isr+0x858>)
    345c:	4c32      	ldr	r4, [pc, #200]	; (3528 <isr+0x85c>)
    345e:	c903      	ldmia	r1, {r0, r1}
    3460:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    3462:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    3464:	6020      	str	r0, [r4, #0]
    3466:	80a1      	strh	r1, [r4, #4]
    3468:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    346a:	f47f ad21 	bne.w	2eb0 <isr+0x1e4>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    346e:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    3470:	482e      	ldr	r0, [pc, #184]	; (352c <isr+0x860>)
    3472:	7801      	ldrb	r1, [r0, #0]
    3474:	f041 0104 	orr.w	r1, r1, #4
    3478:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    347a:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    347e:	0608      	lsls	r0, r1, #24
    3480:	d406      	bmi.n	3490 <isr+0x7c4>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    3482:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    3486:	2080      	movs	r0, #128	; 0x80
    3488:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    348c:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    3490:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    3492:	4a27      	ldr	r2, [pc, #156]	; (3530 <isr+0x864>)
    3494:	2150      	movs	r1, #80	; 0x50
    3496:	7011      	strb	r1, [r2, #0]
    3498:	e50a      	b.n	2eb0 <isr+0x1e4>
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    349a:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
			ep->last_transfer = NULL;
    349e:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
    34a2:	e553      	b.n	2f4c <isr+0x280>
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    34a4:	633b      	str	r3, [r7, #48]	; 0x30
			ep->last_transfer = NULL;
    34a6:	637b      	str	r3, [r7, #52]	; 0x34
    34a8:	e524      	b.n	2ef4 <isr+0x228>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    34aa:	4822      	ldr	r0, [pc, #136]	; (3534 <isr+0x868>)
					memcpy(usb_descriptor_buffer, src, datalen);
    34ac:	461a      	mov	r2, r3
    34ae:	4f16      	ldr	r7, [pc, #88]	; (3508 <isr+0x83c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    34b0:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    34b4:	4920      	ldr	r1, [pc, #128]	; (3538 <isr+0x86c>)
    34b6:	4821      	ldr	r0, [pc, #132]	; (353c <isr+0x870>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    34b8:	9301      	str	r3, [sp, #4]
    34ba:	f1be 0f00 	cmp.w	lr, #0
    34be:	bf08      	it	eq
    34c0:	4601      	moveq	r1, r0
    34c2:	4638      	mov	r0, r7
    34c4:	f000 fc84 	bl	3dd0 <memcpy>
					usb_descriptor_buffer[1] = 7;
    34c8:	2207      	movs	r2, #7
    34ca:	9b01      	ldr	r3, [sp, #4]
    34cc:	707a      	strb	r2, [r7, #1]
    34ce:	e72a      	b.n	3326 <isr+0x65a>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    34d0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    34d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    34d8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    34dc:	e4dd      	b.n	2e9a <isr+0x1ce>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    34de:	4815      	ldr	r0, [pc, #84]	; (3534 <isr+0x868>)
					memcpy(usb_descriptor_buffer, src, datalen);
    34e0:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    34e2:	4916      	ldr	r1, [pc, #88]	; (353c <isr+0x870>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    34e4:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    34e6:	4814      	ldr	r0, [pc, #80]	; (3538 <isr+0x86c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    34e8:	9301      	str	r3, [sp, #4]
    34ea:	2f00      	cmp	r7, #0
    34ec:	bf08      	it	eq
    34ee:	4601      	moveq	r1, r0
    34f0:	4805      	ldr	r0, [pc, #20]	; (3508 <isr+0x83c>)
    34f2:	f000 fc6d 	bl	3dd0 <memcpy>
    34f6:	4f04      	ldr	r7, [pc, #16]	; (3508 <isr+0x83c>)
    34f8:	9b01      	ldr	r3, [sp, #4]
    34fa:	e714      	b.n	3326 <isr+0x65a>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    34fc:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    34fe:	780b      	ldrb	r3, [r1, #0]
    3500:	4293      	cmp	r3, r2
    3502:	bf28      	it	cs
    3504:	4613      	movcs	r3, r2
    3506:	e703      	b.n	3310 <isr+0x644>
    3508:	20200000 	.word	0x20200000
    350c:	e000ef70 	.word	0xe000ef70
    3510:	20003000 	.word	0x20003000
    3514:	20201000 	.word	0x20201000
    3518:	20003020 	.word	0x20003020
    351c:	20001a90 	.word	0x20001a90
    3520:	00070080 	.word	0x00070080
    3524:	20001aa0 	.word	0x20001aa0
    3528:	20004280 	.word	0x20004280
    352c:	20001a7c 	.word	0x20001a7c
    3530:	20001a8c 	.word	0x20001a8c
    3534:	20001a84 	.word	0x20001a84
    3538:	60001a14 	.word	0x60001a14
    353c:	60001a58 	.word	0x60001a58

00003540 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3540:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3542:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    3546:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    354a:	bf14      	ite	ne
    354c:	2700      	movne	r7, #0
    354e:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3552:	2a02      	cmp	r2, #2
    3554:	d901      	bls.n	355a <usb_config_rx+0x1a>
    3556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    355a:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    355e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 35a0 <usb_config_rx+0x60>
    3562:	460d      	mov	r5, r1
    3564:	4604      	mov	r4, r0
    3566:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    356a:	2100      	movs	r1, #0
    356c:	2240      	movs	r2, #64	; 0x40
    356e:	4698      	mov	r8, r3
    3570:	4630      	mov	r0, r6
    3572:	f001 fa77 	bl	4a64 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    3576:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    3578:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    357c:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    3580:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    3584:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    3586:	f1b8 0f00 	cmp.w	r8, #0
    358a:	d0e4      	beq.n	3556 <usb_config_rx+0x16>
    358c:	4b03      	ldr	r3, [pc, #12]	; (359c <usb_config_rx+0x5c>)
    358e:	40a0      	lsls	r0, r4
    3590:	681c      	ldr	r4, [r3, #0]
    3592:	4320      	orrs	r0, r4
    3594:	6018      	str	r0, [r3, #0]
    3596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    359a:	bf00      	nop
    359c:	20001a78 	.word	0x20001a78
    35a0:	20004000 	.word	0x20004000

000035a4 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    35a4:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    35a6:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    35aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    35ae:	bf14      	ite	ne
    35b0:	2700      	movne	r7, #0
    35b2:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    35b6:	2a02      	cmp	r2, #2
    35b8:	d901      	bls.n	35be <usb_config_tx+0x1a>
    35ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    35be:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    35c0:	01c5      	lsls	r5, r0, #7
    35c2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 3608 <usb_config_tx+0x64>
    35c6:	4688      	mov	r8, r1
    35c8:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    35ca:	2100      	movs	r1, #0
    35cc:	4604      	mov	r4, r0
    35ce:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    35d0:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    35d4:	4650      	mov	r0, sl
    35d6:	f001 fa45 	bl	4a64 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    35da:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    35dc:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    35e0:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    35e4:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    35e8:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    35ec:	2e00      	cmp	r6, #0
    35ee:	d0e4      	beq.n	35ba <usb_config_tx+0x16>
    35f0:	f104 0010 	add.w	r0, r4, #16
    35f4:	4b03      	ldr	r3, [pc, #12]	; (3604 <usb_config_tx+0x60>)
    35f6:	4082      	lsls	r2, r0
    35f8:	6818      	ldr	r0, [r3, #0]
    35fa:	4302      	orrs	r2, r0
    35fc:	601a      	str	r2, [r3, #0]
    35fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3602:	bf00      	nop
    3604:	20001a78 	.word	0x20001a78
    3608:	20004000 	.word	0x20004000

0000360c <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    360c:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    360e:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    3610:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    3612:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    3616:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    3618:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    361a:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    361c:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    3620:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    3624:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    3628:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    362c:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    362e:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    3630:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    3632:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    3634:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    3636:	bcf0      	pop	{r4, r5, r6, r7}
    3638:	4770      	bx	lr
    363a:	bf00      	nop

0000363c <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    363c:	1e83      	subs	r3, r0, #2
    363e:	2b02      	cmp	r3, #2
    3640:	d900      	bls.n	3644 <usb_transmit+0x8>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    3642:	4770      	bx	lr
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    3644:	4a1d      	ldr	r2, [pc, #116]	; (36bc <usb_transmit+0x80>)
	uint32_t mask = 1 << (endpoint_number + 16);
    3646:	f100 0310 	add.w	r3, r0, #16
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    364a:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    364c:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
	uint32_t mask = 1 << (endpoint_number + 16);
    3650:	2701      	movs	r7, #1
    3652:	409f      	lsls	r7, r3
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    3654:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3656:	b11b      	cbz	r3, 3660 <usb_transmit+0x24>
		transfer->status |= (1<<15);
    3658:	684b      	ldr	r3, [r1, #4]
    365a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    365e:	604b      	str	r3, [r1, #4]
	}
	__disable_irq();
    3660:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    3662:	6b42      	ldr	r2, [r0, #52]	; 0x34
	if (last) {
    3664:	b1da      	cbz	r2, 369e <usb_transmit+0x62>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    3666:	4b16      	ldr	r3, [pc, #88]	; (36c0 <usb_transmit+0x84>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    3668:	6011      	str	r1, [r2, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    366a:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
    366e:	4217      	tst	r7, r2
    3670:	d11f      	bne.n	36b2 <usb_transmit+0x76>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    3672:	4c14      	ldr	r4, [pc, #80]	; (36c4 <usb_transmit+0x88>)
    3674:	6826      	ldr	r6, [r4, #0]
    3676:	e004      	b.n	3682 <usb_transmit+0x46>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3678:	6822      	ldr	r2, [r4, #0]
    367a:	1b92      	subs	r2, r2, r6
    367c:	f5b2 6f16 	cmp.w	r2, #2400	; 0x960
    3680:	d20b      	bcs.n	369a <usb_transmit+0x5e>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    3682:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    3686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    368a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    368e:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3692:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    3696:	0452      	lsls	r2, r2, #17
    3698:	d5ee      	bpl.n	3678 <usb_transmit+0x3c>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    369a:	422f      	tst	r7, r5
    369c:	d109      	bne.n	36b2 <usb_transmit+0x76>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    369e:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    36a0:	4a07      	ldr	r2, [pc, #28]	; (36c0 <usb_transmit+0x84>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    36a2:	6081      	str	r1, [r0, #8]
	endpoint->status = 0;
    36a4:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    36a6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    36aa:	431f      	orrs	r7, r3
    36ac:	f8c2 71b0 	str.w	r7, [r2, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    36b0:	6301      	str	r1, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    36b2:	6341      	str	r1, [r0, #52]	; 0x34
	__enable_irq();
    36b4:	b662      	cpsie	i
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    36b6:	bcf0      	pop	{r4, r5, r6, r7}
    36b8:	4770      	bx	lr
    36ba:	bf00      	nop
    36bc:	20004040 	.word	0x20004040
    36c0:	402e0000 	.word	0x402e0000
    36c4:	e0001004 	.word	0xe0001004

000036c8 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    36c8:	1e83      	subs	r3, r0, #2
    36ca:	2b02      	cmp	r3, #2
    36cc:	d900      	bls.n	36d0 <usb_receive+0x8>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    36ce:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    36d0:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    36d2:	4d1c      	ldr	r5, [pc, #112]	; (3744 <usb_receive+0x7c>)
	uint32_t mask = 1 << endpoint_number;
    36d4:	2301      	movs	r3, #1
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    36d6:	eb05 15c0 	add.w	r5, r5, r0, lsl #7
	uint32_t mask = 1 << endpoint_number;
    36da:	fa03 f000 	lsl.w	r0, r3, r0
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    36de:	6bab      	ldr	r3, [r5, #56]	; 0x38
    36e0:	b11b      	cbz	r3, 36ea <usb_receive+0x22>
		transfer->status |= (1<<15);
    36e2:	684b      	ldr	r3, [r1, #4]
    36e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    36e8:	604b      	str	r3, [r1, #4]
	}
	__disable_irq();
    36ea:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    36ec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
	if (last) {
    36ee:	b1da      	cbz	r2, 3728 <usb_receive+0x60>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    36f0:	4b15      	ldr	r3, [pc, #84]	; (3748 <usb_receive+0x80>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    36f2:	6011      	str	r1, [r2, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    36f4:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
    36f8:	4210      	tst	r0, r2
    36fa:	d11f      	bne.n	373c <usb_receive+0x74>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    36fc:	4c13      	ldr	r4, [pc, #76]	; (374c <usb_receive+0x84>)
    36fe:	6827      	ldr	r7, [r4, #0]
    3700:	e004      	b.n	370c <usb_receive+0x44>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3702:	6822      	ldr	r2, [r4, #0]
    3704:	1bd2      	subs	r2, r2, r7
    3706:	f5b2 6f16 	cmp.w	r2, #2400	; 0x960
    370a:	d20b      	bcs.n	3724 <usb_receive+0x5c>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    370c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    3710:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    3714:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    3718:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    371c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    3720:	0452      	lsls	r2, r2, #17
    3722:	d5ee      	bpl.n	3702 <usb_receive+0x3a>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    3724:	4230      	tst	r0, r6
    3726:	d109      	bne.n	373c <usb_receive+0x74>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    3728:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    372a:	4a07      	ldr	r2, [pc, #28]	; (3748 <usb_receive+0x80>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    372c:	60a9      	str	r1, [r5, #8]
	endpoint->status = 0;
    372e:	60eb      	str	r3, [r5, #12]
	USB1_ENDPTPRIME |= epmask;
    3730:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3734:	4318      	orrs	r0, r3
    3736:	f8c2 01b0 	str.w	r0, [r2, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    373a:	6329      	str	r1, [r5, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    373c:	6369      	str	r1, [r5, #52]	; 0x34
	__enable_irq();
    373e:	b662      	cpsie	i
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    3740:	bcf0      	pop	{r4, r5, r6, r7}
    3742:	4770      	bx	lr
    3744:	20004000 	.word	0x20004000
    3748:	402e0000 	.word	0x402e0000
    374c:	e0001004 	.word	0xe0001004

00003750 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    3750:	4a2b      	ldr	r2, [pc, #172]	; (3800 <usb_init_serialnumber+0xb0>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3752:	4b2c      	ldr	r3, [pc, #176]	; (3804 <usb_init_serialnumber+0xb4>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    3754:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    3758:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    375c:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    375e:	b500      	push	{lr}
    3760:	b085      	sub	sp, #20
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3762:	d802      	bhi.n	376a <usb_init_serialnumber+0x1a>
    3764:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3768:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    376a:	220a      	movs	r2, #10
    376c:	a901      	add	r1, sp, #4
    376e:	f000 fbc9 	bl	3f04 <ultoa>
	for (i=0; i<10; i++) {
		char c = buf[i];
    3772:	f89d 2004 	ldrb.w	r2, [sp, #4]
    3776:	4b24      	ldr	r3, [pc, #144]	; (3808 <usb_init_serialnumber+0xb8>)
		if (!c) break;
    3778:	b352      	cbz	r2, 37d0 <usb_init_serialnumber+0x80>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    377a:	f89d 1005 	ldrb.w	r1, [sp, #5]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    377e:	805a      	strh	r2, [r3, #2]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    3780:	b369      	cbz	r1, 37de <usb_init_serialnumber+0x8e>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    3782:	f89d 2006 	ldrb.w	r2, [sp, #6]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3786:	8099      	strh	r1, [r3, #4]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    3788:	b35a      	cbz	r2, 37e2 <usb_init_serialnumber+0x92>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    378a:	f89d 1007 	ldrb.w	r1, [sp, #7]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    378e:	80da      	strh	r2, [r3, #6]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    3790:	b349      	cbz	r1, 37e6 <usb_init_serialnumber+0x96>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    3792:	f89d 2008 	ldrb.w	r2, [sp, #8]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3796:	8119      	strh	r1, [r3, #8]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    3798:	b33a      	cbz	r2, 37ea <usb_init_serialnumber+0x9a>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    379a:	f89d 1009 	ldrb.w	r1, [sp, #9]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    379e:	815a      	strh	r2, [r3, #10]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    37a0:	b329      	cbz	r1, 37ee <usb_init_serialnumber+0x9e>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    37a2:	f89d 200a 	ldrb.w	r2, [sp, #10]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    37a6:	8199      	strh	r1, [r3, #12]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    37a8:	b31a      	cbz	r2, 37f2 <usb_init_serialnumber+0xa2>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    37aa:	f89d 100b 	ldrb.w	r1, [sp, #11]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    37ae:	81da      	strh	r2, [r3, #14]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    37b0:	b309      	cbz	r1, 37f6 <usb_init_serialnumber+0xa6>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    37b2:	f89d 200c 	ldrb.w	r2, [sp, #12]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    37b6:	8219      	strh	r1, [r3, #16]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    37b8:	b14a      	cbz	r2, 37ce <usb_init_serialnumber+0x7e>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    37ba:	f89d 100d 	ldrb.w	r1, [sp, #13]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    37be:	825a      	strh	r2, [r3, #18]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    37c0:	b1d9      	cbz	r1, 37fa <usb_init_serialnumber+0xaa>
    37c2:	2216      	movs	r2, #22
		usb_string_serial_number_default.wString[i] = c;
    37c4:	8299      	strh	r1, [r3, #20]
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    37c6:	701a      	strb	r2, [r3, #0]
}
    37c8:	b005      	add	sp, #20
    37ca:	f85d fb04 	ldr.w	pc, [sp], #4

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    37ce:	2208      	movs	r2, #8
    37d0:	3201      	adds	r2, #1
    37d2:	0052      	lsls	r2, r2, #1
    37d4:	b2d2      	uxtb	r2, r2
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    37d6:	701a      	strb	r2, [r3, #0]
}
    37d8:	b005      	add	sp, #20
    37da:	f85d fb04 	ldr.w	pc, [sp], #4

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    37de:	2201      	movs	r2, #1
    37e0:	e7f6      	b.n	37d0 <usb_init_serialnumber+0x80>
    37e2:	2202      	movs	r2, #2
    37e4:	e7f4      	b.n	37d0 <usb_init_serialnumber+0x80>
    37e6:	2203      	movs	r2, #3
    37e8:	e7f2      	b.n	37d0 <usb_init_serialnumber+0x80>
    37ea:	2204      	movs	r2, #4
    37ec:	e7f0      	b.n	37d0 <usb_init_serialnumber+0x80>
    37ee:	2205      	movs	r2, #5
    37f0:	e7ee      	b.n	37d0 <usb_init_serialnumber+0x80>
    37f2:	2206      	movs	r2, #6
    37f4:	e7ec      	b.n	37d0 <usb_init_serialnumber+0x80>
    37f6:	2207      	movs	r2, #7
    37f8:	e7ea      	b.n	37d0 <usb_init_serialnumber+0x80>
    37fa:	2209      	movs	r2, #9
    37fc:	e7e8      	b.n	37d0 <usb_init_serialnumber+0x80>
    37fe:	bf00      	nop
    3800:	401f4400 	.word	0x401f4400
    3804:	0098967f 	.word	0x0098967f
    3808:	200006cc 	.word	0x200006cc

0000380c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    380c:	4b1e      	ldr	r3, [pc, #120]	; (3888 <usb_serial_flush_callback+0x7c>)
    380e:	781a      	ldrb	r2, [r3, #0]
    3810:	b95a      	cbnz	r2, 382a <usb_serial_flush_callback+0x1e>
    3812:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    3816:	4a1d      	ldr	r2, [pc, #116]	; (388c <usb_serial_flush_callback+0x80>)
    3818:	7812      	ldrb	r2, [r2, #0]
    381a:	b132      	cbz	r2, 382a <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    381c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    3820:	4d1b      	ldr	r5, [pc, #108]	; (3890 <usb_serial_flush_callback+0x84>)
    3822:	882a      	ldrh	r2, [r5, #0]
    3824:	b912      	cbnz	r2, 382c <usb_serial_flush_callback+0x20>
    3826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    382a:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    382c:	4e19      	ldr	r6, [pc, #100]	; (3894 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    382e:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    3832:	4f19      	ldr	r7, [pc, #100]	; (3898 <usb_serial_flush_callback+0x8c>)
    3834:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3836:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3838:	4c18      	ldr	r4, [pc, #96]	; (389c <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    383a:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    383e:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3842:	4638      	mov	r0, r7
    3844:	4621      	mov	r1, r4
    3846:	f7ff fee1 	bl	360c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    384a:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    384e:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    3852:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    3856:	4b12      	ldr	r3, [pc, #72]	; (38a0 <usb_serial_flush_callback+0x94>)
    3858:	6019      	str	r1, [r3, #0]
		location += 32;
    385a:	3120      	adds	r1, #32
	} while (location < end_addr);
    385c:	428a      	cmp	r2, r1
    385e:	d8fb      	bhi.n	3858 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    3860:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3864:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    3868:	2004      	movs	r0, #4
    386a:	4639      	mov	r1, r7
    386c:	f7ff fee6 	bl	363c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    3870:	7833      	ldrb	r3, [r6, #0]
    3872:	4a08      	ldr	r2, [pc, #32]	; (3894 <usb_serial_flush_callback+0x88>)
    3874:	3301      	adds	r3, #1
    3876:	b2db      	uxtb	r3, r3
    3878:	2b03      	cmp	r3, #3
    387a:	bf88      	it	hi
    387c:	2300      	movhi	r3, #0
    387e:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    3880:	2300      	movs	r3, #0
    3882:	802b      	strh	r3, [r5, #0]
    3884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3888:	20001abe 	.word	0x20001abe
    388c:	20001aa8 	.word	0x20001aa8
    3890:	20001bf0 	.word	0x20001bf0
    3894:	20001abf 	.word	0x20001abf
    3898:	20001c00 	.word	0x20001c00
    389c:	20200060 	.word	0x20200060
    38a0:	e000ef70 	.word	0xe000ef70

000038a4 <rx_event>:
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    38a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    38a8:	4e49      	ldr	r6, [pc, #292]	; (39d0 <rx_event+0x12c>)
    38aa:	6844      	ldr	r4, [r0, #4]
    38ac:	8837      	ldrh	r7, [r6, #0]
    38ae:	f3c4 440e 	ubfx	r4, r4, #16, #15
	int i = t->callback_param;
    38b2:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    38b4:	1b3c      	subs	r4, r7, r4
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    38b6:	2c00      	cmp	r4, #0
    38b8:	dd5f      	ble.n	397a <rx_event+0xd6>
		// received a packet with data
		uint32_t head = rx_head;
    38ba:	4946      	ldr	r1, [pc, #280]	; (39d4 <rx_event+0x130>)
		if (head != rx_tail) {
    38bc:	4b46      	ldr	r3, [pc, #280]	; (39d8 <rx_event+0x134>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    38be:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    38c0:	781b      	ldrb	r3, [r3, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    38c2:	b2d2      	uxtb	r2, r2
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    38c4:	4845      	ldr	r0, [pc, #276]	; (39dc <rx_event+0x138>)
			uint32_t count = rx_count[ii];
    38c6:	f8df 8134 	ldr.w	r8, [pc, #308]	; 39fc <rx_event+0x158>
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    38ca:	429a      	cmp	r2, r3
    38cc:	d007      	beq.n	38de <rx_event+0x3a>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    38ce:	f810 b002 	ldrb.w	fp, [r0, r2]
			uint32_t count = rx_count[ii];
    38d2:	f838 a01b 	ldrh.w	sl, [r8, fp, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    38d6:	f5ca 7300 	rsb	r3, sl, #512	; 0x200
    38da:	429c      	cmp	r4, r3
    38dc:	d913      	bls.n	3906 <rx_event+0x62>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    38de:	3201      	adds	r2, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    38e0:	2300      	movs	r3, #0
    38e2:	4e3f      	ldr	r6, [pc, #252]	; (39e0 <rx_event+0x13c>)
		if (++head > RX_NUM) head = 0;
    38e4:	2a08      	cmp	r2, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    38e6:	f828 4015 	strh.w	r4, [r8, r5, lsl #1]
		rx_index[i] = 0;
    38ea:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
    38ee:	bf98      	it	ls
    38f0:	b2d3      	uxtbls	r3, r2
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    38f2:	4e3c      	ldr	r6, [pc, #240]	; (39e4 <rx_event+0x140>)
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    38f4:	bf88      	it	hi
    38f6:	461a      	movhi	r2, r3
		rx_list[head] = i;
		rx_head = head;
    38f8:	700b      	strb	r3, [r1, #0]
		rx_available += len;
    38fa:	6833      	ldr	r3, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    38fc:	5485      	strb	r5, [r0, r2]
		rx_head = head;
		rx_available += len;
    38fe:	441c      	add	r4, r3
    3900:	6034      	str	r4, [r6, #0]
    3902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
    3906:	4b38      	ldr	r3, [pc, #224]	; (39e8 <rx_event+0x144>)
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    3908:	eb0a 204b 	add.w	r0, sl, fp, lsl #9
    390c:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
    390e:	eb03 2945 	add.w	r9, r3, r5, lsl #9
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    3912:	4418      	add	r0, r3
    3914:	4649      	mov	r1, r9
    3916:	f000 fa5b 	bl	3dd0 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    391a:	4832      	ldr	r0, [pc, #200]	; (39e4 <rx_event+0x140>)
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    391c:	4933      	ldr	r1, [pc, #204]	; (39ec <rx_event+0x148>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    391e:	eb0a 0304 	add.w	r3, sl, r4
				rx_available += len;
    3922:	6802      	ldr	r2, [r0, #0]
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3924:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3928:	eb01 1a45 	add.w	sl, r1, r5, lsl #5
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    392c:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 39f8 <rx_event+0x154>
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    3930:	4414      	add	r4, r2
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    3932:	f828 301b 	strh.w	r3, [r8, fp, lsl #1]
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3936:	463a      	mov	r2, r7
    3938:	4649      	mov	r1, r9
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    393a:	6004      	str	r4, [r0, #0]
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    393c:	462b      	mov	r3, r5
    393e:	4650      	mov	r0, sl
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3940:	f8cc e000 	str.w	lr, [ip]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3944:	f7ff fe62 	bl	360c <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    3948:	8832      	ldrh	r2, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    394a:	f029 031f 	bic.w	r3, r9, #31
	uint32_t end_addr = (uint32_t)addr + size;
    394e:	4491      	add	r9, r2
	asm volatile("": : :"memory");
	asm("dsb");
    3950:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    3954:	4a26      	ldr	r2, [pc, #152]	; (39f0 <rx_event+0x14c>)
    3956:	6013      	str	r3, [r2, #0]
		location += 32;
    3958:	3320      	adds	r3, #32
	} while (location < end_addr);
    395a:	4599      	cmp	r9, r3
    395c:	d8fb      	bhi.n	3956 <rx_event+0xb2>
	asm("dsb");
    395e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3962:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    3966:	2003      	movs	r0, #3
    3968:	4651      	mov	r1, sl
    396a:	f7ff fead 	bl	36c8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    396e:	4b21      	ldr	r3, [pc, #132]	; (39f4 <rx_event+0x150>)
    3970:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3974:	601a      	str	r2, [r3, #0]
    3976:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    397a:	491b      	ldr	r1, [pc, #108]	; (39e8 <rx_event+0x144>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    397c:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3980:	4b1a      	ldr	r3, [pc, #104]	; (39ec <rx_event+0x148>)
    3982:	463a      	mov	r2, r7

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    3984:	eb01 2445 	add.w	r4, r1, r5, lsl #9
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3988:	481b      	ldr	r0, [pc, #108]	; (39f8 <rx_event+0x154>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    398a:	eb03 1745 	add.w	r7, r3, r5, lsl #5
    398e:	462b      	mov	r3, r5
    3990:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3992:	f8c0 e000 	str.w	lr, [r0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3996:	4638      	mov	r0, r7
    3998:	f7ff fe38 	bl	360c <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    399c:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    399e:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    39a2:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    39a4:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    39a8:	4a11      	ldr	r2, [pc, #68]	; (39f0 <rx_event+0x14c>)
    39aa:	6013      	str	r3, [r2, #0]
		location += 32;
    39ac:	3320      	adds	r3, #32
	} while (location < end_addr);
    39ae:	4299      	cmp	r1, r3
    39b0:	d8fb      	bhi.n	39aa <rx_event+0x106>
	asm("dsb");
    39b2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    39b6:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    39ba:	2003      	movs	r0, #3
    39bc:	4639      	mov	r1, r7
    39be:	f7ff fe83 	bl	36c8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    39c2:	4b0c      	ldr	r3, [pc, #48]	; (39f4 <rx_event+0x150>)
    39c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    39c8:	601a      	str	r2, [r3, #0]
    39ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39ce:	bf00      	nop
    39d0:	20001bee 	.word	0x20001bee
    39d4:	20001ac0 	.word	0x20001ac0
    39d8:	20001be0 	.word	0x20001be0
    39dc:	20001be4 	.word	0x20001be4
    39e0:	20001aac 	.word	0x20001aac
    39e4:	20001bf4 	.word	0x20001bf4
    39e8:	20202060 	.word	0x20202060
    39ec:	20001ae0 	.word	0x20001ae0
    39f0:	e000ef5c 	.word	0xe000ef5c
    39f4:	e000e10c 	.word	0xe000e10c
    39f8:	e000e18c 	.word	0xe000e18c
    39fc:	20001c80 	.word	0x20001c80

00003a00 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    3a00:	4770      	bx	lr
    3a02:	bf00      	nop

00003a04 <usb_serial_configure>:
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    3a04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    3a08:	4b45      	ldr	r3, [pc, #276]	; (3b20 <usb_serial_configure+0x11c>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3a0a:	2100      	movs	r1, #0
    3a0c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 3b5c <usb_serial_configure+0x158>
    3a10:	2280      	movs	r2, #128	; 0x80
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    3a12:	781b      	ldrb	r3, [r3, #0]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    3a14:	460c      	mov	r4, r1
    3a16:	f8df 8148 	ldr.w	r8, [pc, #328]	; 3b60 <usb_serial_configure+0x15c>
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3a1a:	460f      	mov	r7, r1
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    3a1c:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3a1e:	4841      	ldr	r0, [pc, #260]	; (3b24 <usb_serial_configure+0x120>)
    3a20:	4e41      	ldr	r6, [pc, #260]	; (3b28 <usb_serial_configure+0x124>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3a22:	f44f 3900 	mov.w	r9, #131072	; 0x20000
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    3a26:	bf14      	ite	ne
    3a28:	f44f 7300 	movne.w	r3, #512	; 0x200
    3a2c:	2340      	moveq	r3, #64	; 0x40
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    3a2e:	4d3f      	ldr	r5, [pc, #252]	; (3b2c <usb_serial_configure+0x128>)
    3a30:	f8aa 3000 	strh.w	r3, [sl]
    3a34:	f8a8 3000 	strh.w	r3, [r8]
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3a38:	f001 f814 	bl	4a64 <memset>
	tx_head = 0;
    3a3c:	483c      	ldr	r0, [pc, #240]	; (3b30 <usb_serial_configure+0x12c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3a3e:	4621      	mov	r1, r4
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    3a40:	4b3c      	ldr	r3, [pc, #240]	; (3b34 <usb_serial_configure+0x130>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3a42:	f44f 7280 	mov.w	r2, #256	; 0x100
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    3a46:	7004      	strb	r4, [r0, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3a48:	4630      	mov	r0, r6
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    3a4a:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3a4c:	f001 f80a 	bl	4a64 <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    3a50:	4939      	ldr	r1, [pc, #228]	; (3b38 <usb_serial_configure+0x134>)
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3a52:	4623      	mov	r3, r4
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    3a54:	4839      	ldr	r0, [pc, #228]	; (3b3c <usb_serial_configure+0x138>)
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3a56:	4622      	mov	r2, r4
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    3a58:	f8df e108 	ldr.w	lr, [pc, #264]	; 3b64 <usb_serial_configure+0x160>
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    3a5c:	700c      	strb	r4, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3a5e:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    3a60:	7004      	strb	r4, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3a62:	2002      	movs	r0, #2
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    3a64:	602c      	str	r4, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    3a66:	4d36      	ldr	r5, [pc, #216]	; (3b40 <usb_serial_configure+0x13c>)
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    3a68:	f8ce 4000 	str.w	r4, [lr]
    3a6c:	f8ce 4004 	str.w	r4, [lr, #4]
    3a70:	f8ce 4008 	str.w	r4, [lr, #8]
    3a74:	f8ce 400c 	str.w	r4, [lr, #12]
	memset(rx_index, 0, sizeof(rx_index));
    3a78:	602c      	str	r4, [r5, #0]
    3a7a:	606c      	str	r4, [r5, #4]
    3a7c:	60ac      	str	r4, [r5, #8]
    3a7e:	60ec      	str	r4, [r5, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3a80:	f7ff fd90 	bl	35a4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    3a84:	4622      	mov	r2, r4
    3a86:	f8b8 1000 	ldrh.w	r1, [r8]
    3a8a:	2003      	movs	r0, #3
    3a8c:	4b2d      	ldr	r3, [pc, #180]	; (3b44 <usb_serial_configure+0x140>)
    3a8e:	f7ff fd57 	bl	3540 <usb_config_rx>
    3a92:	4d2d      	ldr	r5, [pc, #180]	; (3b48 <usb_serial_configure+0x144>)
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    3a94:	4623      	mov	r3, r4
    3a96:	f8ba 1000 	ldrh.w	r1, [sl]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCIMVAC = location;
    3a9a:	4c2c      	ldr	r4, [pc, #176]	; (3b4c <usb_serial_configure+0x148>)
    3a9c:	2201      	movs	r2, #1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3a9e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3b68 <usb_serial_configure+0x164>
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    3aa2:	2004      	movs	r0, #4
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
    3aa4:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 3b6c <usb_serial_configure+0x168>
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    3aa8:	f7ff fd7c 	bl	35a4 <usb_config_tx>
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3aac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3ab0:	f8b8 2000 	ldrh.w	r2, [r8]
    3ab4:	4629      	mov	r1, r5
    3ab6:	4630      	mov	r0, r6
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3ab8:	f8ca 3000 	str.w	r3, [sl]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3abc:	463b      	mov	r3, r7
    3abe:	f7ff fda5 	bl	360c <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    3ac2:	f8b8 2000 	ldrh.w	r2, [r8]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3ac6:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    3aca:	442a      	add	r2, r5
	asm volatile("": : :"memory");
	asm("dsb");
    3acc:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    3ad0:	6023      	str	r3, [r4, #0]
		location += 32;
    3ad2:	3320      	adds	r3, #32
	} while (location < end_addr);
    3ad4:	429a      	cmp	r2, r3
    3ad6:	d8fb      	bhi.n	3ad0 <usb_serial_configure+0xcc>
	asm("dsb");
    3ad8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3adc:	f3bf 8f6f 	isb	sy
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3ae0:	3701      	adds	r7, #1
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    3ae2:	4631      	mov	r1, r6
    3ae4:	2003      	movs	r0, #3
    3ae6:	f505 7500 	add.w	r5, r5, #512	; 0x200
    3aea:	f7ff fded 	bl	36c8 <usb_receive>
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3aee:	2f08      	cmp	r7, #8
    3af0:	f106 0620 	add.w	r6, r6, #32
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
    3af4:	f8cb 9000 	str.w	r9, [fp]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3af8:	d1d8      	bne.n	3aac <usb_serial_configure+0xa8>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    3afa:	4b15      	ldr	r3, [pc, #84]	; (3b50 <usb_serial_configure+0x14c>)
	USB1_GPTIMER0LD = microseconds - 1;
    3afc:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    3afe:	4815      	ldr	r0, [pc, #84]	; (3b54 <usb_serial_configure+0x150>)
	USB1_GPTIMER0CTRL = 0;
    3b00:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    3b02:	4c15      	ldr	r4, [pc, #84]	; (3b58 <usb_serial_configure+0x154>)
    3b04:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    3b06:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    3b0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    3b0e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    3b12:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    3b16:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    3b1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b1e:	bf00      	nop
    3b20:	20001a84 	.word	0x20001a84
    3b24:	20001c00 	.word	0x20001c00
    3b28:	20001ae0 	.word	0x20001ae0
    3b2c:	20001bf4 	.word	0x20001bf4
    3b30:	20001abf 	.word	0x20001abf
    3b34:	20001bf0 	.word	0x20001bf0
    3b38:	20001ac0 	.word	0x20001ac0
    3b3c:	20001be0 	.word	0x20001be0
    3b40:	20001aac 	.word	0x20001aac
    3b44:	000038a5 	.word	0x000038a5
    3b48:	20202060 	.word	0x20202060
    3b4c:	e000ef5c 	.word	0xe000ef5c
    3b50:	402e0000 	.word	0x402e0000
    3b54:	20001a74 	.word	0x20001a74
    3b58:	0000380d 	.word	0x0000380d
    3b5c:	20001abc 	.word	0x20001abc
    3b60:	20001bee 	.word	0x20001bee
    3b64:	20001c80 	.word	0x20001c80
    3b68:	e000e18c 	.word	0xe000e18c
    3b6c:	e000e10c 	.word	0xe000e10c

00003b70 <usb_serial_available>:
}

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    3b70:	4b01      	ldr	r3, [pc, #4]	; (3b78 <usb_serial_available+0x8>)
    3b72:	6818      	ldr	r0, [r3, #0]
}
    3b74:	4770      	bx	lr
    3b76:	bf00      	nop
    3b78:	20001bf4 	.word	0x20001bf4

00003b7c <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    3b7c:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3b7e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3b82:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3b84:	7f43      	ldrb	r3, [r0, #29]
    3b86:	b933      	cbnz	r3, 3b96 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3b88:	7f01      	ldrb	r1, [r0, #28]
    3b8a:	2901      	cmp	r1, #1
    3b8c:	d008      	beq.n	3ba0 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    3b8e:	2903      	cmp	r1, #3
    3b90:	d010      	beq.n	3bb4 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    3b92:	2301      	movs	r3, #1
    3b94:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3b96:	b902      	cbnz	r2, 3b9a <EventResponder::triggerEventNotImmediate()+0x1e>
    3b98:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    3b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
    3b9e:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3ba0:	4c11      	ldr	r4, [pc, #68]	; (3be8 <EventResponder::triggerEventNotImmediate()+0x6c>)
    3ba2:	6821      	ldr	r1, [r4, #0]
    3ba4:	b1a1      	cbz	r1, 3bd0 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3ba6:	4911      	ldr	r1, [pc, #68]	; (3bec <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3ba8:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    3baa:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    3bac:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3bae:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    3bb0:	6158      	str	r0, [r3, #20]
    3bb2:	e7ee      	b.n	3b92 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3bb4:	4c0e      	ldr	r4, [pc, #56]	; (3bf0 <EventResponder::triggerEventNotImmediate()+0x74>)
    3bb6:	6821      	ldr	r1, [r4, #0]
    3bb8:	b181      	cbz	r1, 3bdc <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3bba:	490e      	ldr	r1, [pc, #56]	; (3bf4 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3bbc:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3bbe:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    3bc0:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3bc2:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    3bc4:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3bc6:	4b0c      	ldr	r3, [pc, #48]	; (3bf8 <EventResponder::triggerEventNotImmediate()+0x7c>)
    3bc8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3bcc:	6019      	str	r1, [r3, #0]
    3bce:	e7e0      	b.n	3b92 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3bd0:	4b06      	ldr	r3, [pc, #24]	; (3bec <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3bd2:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    3bd4:	6181      	str	r1, [r0, #24]
				firstYield = this;
    3bd6:	6020      	str	r0, [r4, #0]
				lastYield = this;
    3bd8:	6018      	str	r0, [r3, #0]
    3bda:	e7da      	b.n	3b92 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3bdc:	4b05      	ldr	r3, [pc, #20]	; (3bf4 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3bde:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    3be0:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    3be2:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    3be4:	6018      	str	r0, [r3, #0]
    3be6:	e7ee      	b.n	3bc6 <EventResponder::triggerEventNotImmediate()+0x4a>
    3be8:	20001ca0 	.word	0x20001ca0
    3bec:	20001c9c 	.word	0x20001c9c
    3bf0:	20001c94 	.word	0x20001c94
    3bf4:	20001c98 	.word	0x20001c98
    3bf8:	e000ed04 	.word	0xe000ed04

00003bfc <pendablesrvreq_isr>:
	}
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
    3bfc:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3bfe:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    3c02:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3c04:	4c0c      	ldr	r4, [pc, #48]	; (3c38 <pendablesrvreq_isr+0x3c>)
    3c06:	6823      	ldr	r3, [r4, #0]
		if (first) {
    3c08:	b18b      	cbz	r3, 3c2e <pendablesrvreq_isr+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3c0a:	4e0c      	ldr	r6, [pc, #48]	; (3c3c <pendablesrvreq_isr+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3c0c:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3c0e:	695a      	ldr	r2, [r3, #20]
    3c10:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    3c12:	b17a      	cbz	r2, 3c34 <pendablesrvreq_isr+0x38>
				firstInterrupt->_prev = nullptr;
    3c14:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3c16:	b901      	cbnz	r1, 3c1a <pendablesrvreq_isr+0x1e>
    3c18:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3c1a:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    3c1c:	4618      	mov	r0, r3
    3c1e:	689b      	ldr	r3, [r3, #8]
    3c20:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3c22:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    3c26:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3c28:	6823      	ldr	r3, [r4, #0]
		if (first) {
    3c2a:	2b00      	cmp	r3, #0
    3c2c:	d1ef      	bne.n	3c0e <pendablesrvreq_isr+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3c2e:	b901      	cbnz	r1, 3c32 <pendablesrvreq_isr+0x36>
    3c30:	b662      	cpsie	i
    3c32:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3c34:	6032      	str	r2, [r6, #0]
    3c36:	e7ee      	b.n	3c16 <pendablesrvreq_isr+0x1a>
    3c38:	20001c94 	.word	0x20001c94
    3c3c:	20001c98 	.word	0x20001c98

00003c40 <EventResponder::detachNoInterrupts()>:
}

// this detach must be called with interrupts disabled
void EventResponder::detachNoInterrupts()
{
	if (_type == EventTypeYield) {
    3c40:	7f03      	ldrb	r3, [r0, #28]
    3c42:	2b01      	cmp	r3, #1
    3c44:	d00f      	beq.n	3c66 <EventResponder::detachNoInterrupts()+0x26>
			} else {
				lastYield = _prev;
			}
		}
		_type = EventTypeDetached;
	} else if (_type == EventTypeInterrupt) {
    3c46:	2b03      	cmp	r3, #3
    3c48:	d000      	beq.n	3c4c <EventResponder::detachNoInterrupts()+0xc>
    3c4a:	4770      	bx	lr
		if (_triggered) {
    3c4c:	7f43      	ldrb	r3, [r0, #29]
    3c4e:	b13b      	cbz	r3, 3c60 <EventResponder::detachNoInterrupts()+0x20>
			if (_prev) {
    3c50:	6983      	ldr	r3, [r0, #24]
				_prev->_next = _next;
    3c52:	6942      	ldr	r2, [r0, #20]
			}
		}
		_type = EventTypeDetached;
	} else if (_type == EventTypeInterrupt) {
		if (_triggered) {
			if (_prev) {
    3c54:	b1d3      	cbz	r3, 3c8c <EventResponder::detachNoInterrupts()+0x4c>
				_prev->_next = _next;
    3c56:	615a      	str	r2, [r3, #20]
    3c58:	6942      	ldr	r2, [r0, #20]
			} else {
				firstInterrupt = _next;
			}
			if (_next) {
    3c5a:	b96a      	cbnz	r2, 3c78 <EventResponder::detachNoInterrupts()+0x38>
				_next->_prev = _prev;
			} else {
				lastInterrupt = _prev;
    3c5c:	4a0e      	ldr	r2, [pc, #56]	; (3c98 <EventResponder::detachNoInterrupts()+0x58>)
    3c5e:	6013      	str	r3, [r2, #0]
				_next->_prev = _prev;
			} else {
				lastYield = _prev;
			}
		}
		_type = EventTypeDetached;
    3c60:	2300      	movs	r3, #0
    3c62:	7703      	strb	r3, [r0, #28]
    3c64:	4770      	bx	lr

// this detach must be called with interrupts disabled
void EventResponder::detachNoInterrupts()
{
	if (_type == EventTypeYield) {
		if (_triggered) {
    3c66:	7f43      	ldrb	r3, [r0, #29]
    3c68:	2b00      	cmp	r3, #0
    3c6a:	d0f9      	beq.n	3c60 <EventResponder::detachNoInterrupts()+0x20>
			if (_prev) {
    3c6c:	6983      	ldr	r3, [r0, #24]
				_prev->_next = _next;
    3c6e:	6942      	ldr	r2, [r0, #20]
// this detach must be called with interrupts disabled
void EventResponder::detachNoInterrupts()
{
	if (_type == EventTypeYield) {
		if (_triggered) {
			if (_prev) {
    3c70:	b14b      	cbz	r3, 3c86 <EventResponder::detachNoInterrupts()+0x46>
				_prev->_next = _next;
    3c72:	615a      	str	r2, [r3, #20]
    3c74:	6942      	ldr	r2, [r0, #20]
			} else {
				firstYield = _next;
			}
			if (_next) {
    3c76:	b11a      	cbz	r2, 3c80 <EventResponder::detachNoInterrupts()+0x40>
				_prev->_next = _next;
			} else {
				firstInterrupt = _next;
			}
			if (_next) {
				_next->_prev = _prev;
    3c78:	6193      	str	r3, [r2, #24]
				_next->_prev = _prev;
			} else {
				lastYield = _prev;
			}
		}
		_type = EventTypeDetached;
    3c7a:	2300      	movs	r3, #0
    3c7c:	7703      	strb	r3, [r0, #28]
    3c7e:	4770      	bx	lr
				firstYield = _next;
			}
			if (_next) {
				_next->_prev = _prev;
			} else {
				lastYield = _prev;
    3c80:	4a06      	ldr	r2, [pc, #24]	; (3c9c <EventResponder::detachNoInterrupts()+0x5c>)
    3c82:	6013      	str	r3, [r2, #0]
    3c84:	e7ec      	b.n	3c60 <EventResponder::detachNoInterrupts()+0x20>
	if (_type == EventTypeYield) {
		if (_triggered) {
			if (_prev) {
				_prev->_next = _next;
			} else {
				firstYield = _next;
    3c86:	4906      	ldr	r1, [pc, #24]	; (3ca0 <EventResponder::detachNoInterrupts()+0x60>)
    3c88:	600a      	str	r2, [r1, #0]
    3c8a:	e7f4      	b.n	3c76 <EventResponder::detachNoInterrupts()+0x36>
	} else if (_type == EventTypeInterrupt) {
		if (_triggered) {
			if (_prev) {
				_prev->_next = _next;
			} else {
				firstInterrupt = _next;
    3c8c:	4905      	ldr	r1, [pc, #20]	; (3ca4 <EventResponder::detachNoInterrupts()+0x64>)
    3c8e:	600a      	str	r2, [r1, #0]
			}
			if (_next) {
    3c90:	2a00      	cmp	r2, #0
    3c92:	d1f1      	bne.n	3c78 <EventResponder::detachNoInterrupts()+0x38>
    3c94:	e7e2      	b.n	3c5c <EventResponder::detachNoInterrupts()+0x1c>
    3c96:	bf00      	nop
    3c98:	20001c98 	.word	0x20001c98
    3c9c:	20001c9c 	.word	0x20001c9c
    3ca0:	20001ca0 	.word	0x20001ca0
    3ca4:	20001c94 	.word	0x20001c94

00003ca8 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3ca8:	4a04      	ldr	r2, [pc, #16]	; (3cbc <systick_isr+0x14>)
    3caa:	4b05      	ldr	r3, [pc, #20]	; (3cc0 <systick_isr+0x18>)
    3cac:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    3cae:	4a05      	ldr	r2, [pc, #20]	; (3cc4 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3cb0:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    3cb2:	6813      	ldr	r3, [r2, #0]
    3cb4:	3301      	adds	r3, #1
    3cb6:	6013      	str	r3, [r2, #0]
    3cb8:	4770      	bx	lr
    3cba:	bf00      	nop
    3cbc:	e0001004 	.word	0xe0001004
    3cc0:	20001a54 	.word	0x20001a54
    3cc4:	20001a5c 	.word	0x20001a5c

00003cc8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3cc8:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3cca:	f7fc f9e3 	bl	94 <setup>
	while (1) {
		loop();
    3cce:	f7fc fa75 	bl	1bc <loop>
		yield();
    3cd2:	f000 f805 	bl	3ce0 <yield>
    3cd6:	e7fa      	b.n	3cce <main+0x6>

00003cd8 <operator new(unsigned int)>:
    3cd8:	f000 bbfc 	b.w	44d4 <malloc>

00003cdc <operator delete(void*, unsigned int)>:
    3cdc:	f000 bc02 	b.w	44e4 <free>

00003ce0 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    3ce4:	4e32      	ldr	r6, [pc, #200]	; (3db0 <yield+0xd0>)
    3ce6:	7833      	ldrb	r3, [r6, #0]
    3ce8:	b193      	cbz	r3, 3d10 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    3cea:	4f32      	ldr	r7, [pc, #200]	; (3db4 <yield+0xd4>)
    3cec:	783a      	ldrb	r2, [r7, #0]
    3cee:	b97a      	cbnz	r2, 3d10 <yield+0x30>
	running = 1;
    3cf0:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    3cf2:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    3cf4:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    3cf6:	d437      	bmi.n	3d68 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    3cf8:	079a      	lsls	r2, r3, #30
    3cfa:	d419      	bmi.n	3d30 <yield+0x50>

	running = 0;
    3cfc:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    3cfe:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    3d00:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    3d02:	d505      	bpl.n	3d10 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    3d04:	4b2c      	ldr	r3, [pc, #176]	; (3db8 <yield+0xd8>)
    3d06:	681a      	ldr	r2, [r3, #0]
    3d08:	b112      	cbz	r2, 3d10 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3d0a:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    3d0e:	b10a      	cbz	r2, 3d14 <yield+0x34>
    3d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3d14:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    3d18:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3d1a:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    3d1c:	b11a      	cbz	r2, 3d26 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    3d1e:	4c27      	ldr	r4, [pc, #156]	; (3dbc <yield+0xdc>)
    3d20:	7821      	ldrb	r1, [r4, #0]
    3d22:	2900      	cmp	r1, #0
    3d24:	d02f      	beq.n	3d86 <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3d26:	2800      	cmp	r0, #0
    3d28:	d1f2      	bne.n	3d10 <yield+0x30>
    3d2a:	b662      	cpsie	i
    3d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    3d30:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3dc8 <yield+0xe8>
    3d34:	f898 2000 	ldrb.w	r2, [r8]
    3d38:	2a00      	cmp	r2, #0
    3d3a:	d0df      	beq.n	3cfc <yield+0x1c>
    3d3c:	2400      	movs	r4, #0
    3d3e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 3dcc <yield+0xec>
    3d42:	e005      	b.n	3d50 <yield+0x70>
    3d44:	3401      	adds	r4, #1
    3d46:	f898 3000 	ldrb.w	r3, [r8]
    3d4a:	b2e4      	uxtb	r4, r4
    3d4c:	42a3      	cmp	r3, r4
    3d4e:	d913      	bls.n	3d78 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    3d50:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    3d54:	682b      	ldr	r3, [r5, #0]
    3d56:	4628      	mov	r0, r5
    3d58:	691b      	ldr	r3, [r3, #16]
    3d5a:	4798      	blx	r3
    3d5c:	2800      	cmp	r0, #0
    3d5e:	d0f1      	beq.n	3d44 <yield+0x64>
    3d60:	696b      	ldr	r3, [r5, #20]
    3d62:	689b      	ldr	r3, [r3, #8]
    3d64:	4798      	blx	r3
    3d66:	e7ed      	b.n	3d44 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3d68:	f7ff ff02 	bl	3b70 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    3d6c:	b9d0      	cbnz	r0, 3da4 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    3d6e:	4b14      	ldr	r3, [pc, #80]	; (3dc0 <yield+0xe0>)
    3d70:	781b      	ldrb	r3, [r3, #0]
    3d72:	b91b      	cbnz	r3, 3d7c <yield+0x9c>
    3d74:	7833      	ldrb	r3, [r6, #0]
    3d76:	e7bf      	b.n	3cf8 <yield+0x18>
    3d78:	7833      	ldrb	r3, [r6, #0]
    3d7a:	e7bf      	b.n	3cfc <yield+0x1c>
    3d7c:	7833      	ldrb	r3, [r6, #0]
    3d7e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    3d82:	7033      	strb	r3, [r6, #0]
    3d84:	e7b8      	b.n	3cf8 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3d86:	2601      	movs	r6, #1
		firstYield = first->_next;
    3d88:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3d8a:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    3d8c:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    3d8e:	b165      	cbz	r5, 3daa <yield+0xca>
			firstYield->_prev = nullptr;
    3d90:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3d92:	b900      	cbnz	r0, 3d96 <yield+0xb6>
    3d94:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3d96:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    3d98:	6893      	ldr	r3, [r2, #8]
    3d9a:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3d9c:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    3d9e:	4798      	blx	r3
		runningFromYield = false;
    3da0:	7025      	strb	r5, [r4, #0]
    3da2:	e7b5      	b.n	3d10 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    3da4:	f000 fb5a 	bl	445c <serialEvent()>
    3da8:	e7e1      	b.n	3d6e <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    3daa:	4b06      	ldr	r3, [pc, #24]	; (3dc4 <yield+0xe4>)
    3dac:	601d      	str	r5, [r3, #0]
    3dae:	e7f0      	b.n	3d92 <yield+0xb2>
    3db0:	200006e2 	.word	0x200006e2
    3db4:	20001ca5 	.word	0x20001ca5
    3db8:	20001ca0 	.word	0x20001ca0
    3dbc:	20001ca4 	.word	0x20001ca4
    3dc0:	60001aa6 	.word	0x60001aa6
    3dc4:	20001c9c 	.word	0x20001c9c
    3dc8:	20001cc8 	.word	0x20001cc8
    3dcc:	20001ca8 	.word	0x20001ca8

00003dd0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    3dd0:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    3dd2:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    3dd6:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    3dda:	d16d      	bne.n	3eb8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3ddc:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    3dde:	d341      	bcc.n	3e64 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3de0:	f851 3b04 	ldr.w	r3, [r1], #4
    3de4:	f840 3b04 	str.w	r3, [r0], #4
    3de8:	f851 3b04 	ldr.w	r3, [r1], #4
    3dec:	f840 3b04 	str.w	r3, [r0], #4
    3df0:	f851 3b04 	ldr.w	r3, [r1], #4
    3df4:	f840 3b04 	str.w	r3, [r0], #4
    3df8:	f851 3b04 	ldr.w	r3, [r1], #4
    3dfc:	f840 3b04 	str.w	r3, [r0], #4
    3e00:	f851 3b04 	ldr.w	r3, [r1], #4
    3e04:	f840 3b04 	str.w	r3, [r0], #4
    3e08:	f851 3b04 	ldr.w	r3, [r1], #4
    3e0c:	f840 3b04 	str.w	r3, [r0], #4
    3e10:	f851 3b04 	ldr.w	r3, [r1], #4
    3e14:	f840 3b04 	str.w	r3, [r0], #4
    3e18:	f851 3b04 	ldr.w	r3, [r1], #4
    3e1c:	f840 3b04 	str.w	r3, [r0], #4
    3e20:	f851 3b04 	ldr.w	r3, [r1], #4
    3e24:	f840 3b04 	str.w	r3, [r0], #4
    3e28:	f851 3b04 	ldr.w	r3, [r1], #4
    3e2c:	f840 3b04 	str.w	r3, [r0], #4
    3e30:	f851 3b04 	ldr.w	r3, [r1], #4
    3e34:	f840 3b04 	str.w	r3, [r0], #4
    3e38:	f851 3b04 	ldr.w	r3, [r1], #4
    3e3c:	f840 3b04 	str.w	r3, [r0], #4
    3e40:	f851 3b04 	ldr.w	r3, [r1], #4
    3e44:	f840 3b04 	str.w	r3, [r0], #4
    3e48:	f851 3b04 	ldr.w	r3, [r1], #4
    3e4c:	f840 3b04 	str.w	r3, [r0], #4
    3e50:	f851 3b04 	ldr.w	r3, [r1], #4
    3e54:	f840 3b04 	str.w	r3, [r0], #4
    3e58:	f851 3b04 	ldr.w	r3, [r1], #4
    3e5c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3e60:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    3e62:	d2bd      	bcs.n	3de0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    3e64:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    3e66:	d311      	bcc.n	3e8c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3e68:	f851 3b04 	ldr.w	r3, [r1], #4
    3e6c:	f840 3b04 	str.w	r3, [r0], #4
    3e70:	f851 3b04 	ldr.w	r3, [r1], #4
    3e74:	f840 3b04 	str.w	r3, [r0], #4
    3e78:	f851 3b04 	ldr.w	r3, [r1], #4
    3e7c:	f840 3b04 	str.w	r3, [r0], #4
    3e80:	f851 3b04 	ldr.w	r3, [r1], #4
    3e84:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    3e88:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    3e8a:	d2ed      	bcs.n	3e68 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    3e8c:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    3e8e:	d305      	bcc.n	3e9c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    3e90:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    3e94:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    3e98:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    3e9a:	d2f9      	bcs.n	3e90 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    3e9c:	3204      	adds	r2, #4
	beq	.Ldone
    3e9e:	d008      	beq.n	3eb2 <memcpy+0xe2>

	lsls	r2, r2, #31
    3ea0:	07d2      	lsls	r2, r2, #31
	itt ne
    3ea2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3ea4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3ea8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    3eac:	d301      	bcc.n	3eb2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    3eae:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    3eb0:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3eb2:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3eb4:	4770      	bx	lr
    3eb6:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    3eb8:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    3eba:	d313      	bcc.n	3ee4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    3ebc:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    3ebe:	d08d      	beq.n	3ddc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    3ec0:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    3ec4:	d08a      	beq.n	3ddc <memcpy+0xc>

	rsb	r3, #4
    3ec6:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    3eca:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    3ecc:	07db      	lsls	r3, r3, #31
	itt ne
    3ece:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3ed0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3ed4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    3ed8:	d380      	bcc.n	3ddc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    3eda:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    3ede:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    3ee2:	e77b      	b.n	3ddc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    3ee4:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    3ee6:	d3d9      	bcc.n	3e9c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    3ee8:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    3eea:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    3eee:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    3ef2:	d2f9      	bcs.n	3ee8 <memcpy+0x118>

	ldrb	r3, [r1]
    3ef4:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    3ef6:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    3ef8:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    3efa:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    3efc:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    3efe:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3f00:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3f02:	4770      	bx	lr

00003f04 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3f04:	b4f0      	push	{r4, r5, r6, r7}
    3f06:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    3f08:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3f0a:	4637      	mov	r7, r6
    3f0c:	e000      	b.n	3f10 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3f0e:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3f10:	fbb0 f3f2 	udiv	r3, r0, r2
    3f14:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3f18:	f100 0437 	add.w	r4, r0, #55	; 0x37
    3f1c:	2809      	cmp	r0, #9
    3f1e:	f100 0030 	add.w	r0, r0, #48	; 0x30
    3f22:	b2e4      	uxtb	r4, r4
    3f24:	bf98      	it	ls
    3f26:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    3f28:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3f2a:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    3f2e:	2b00      	cmp	r3, #0
    3f30:	d1ed      	bne.n	3f0e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3f32:	194a      	adds	r2, r1, r5
    3f34:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3f36:	b14d      	cbz	r5, 3f4c <ultoa+0x48>
    3f38:	3301      	adds	r3, #1
		t = buf[j];
    3f3a:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    3f3e:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3f40:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    3f42:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3f44:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3f46:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3f4a:	dbf5      	blt.n	3f38 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3f4c:	4608      	mov	r0, r1
    3f4e:	bcf0      	pop	{r4, r5, r6, r7}
    3f50:	4770      	bx	lr
    3f52:	bf00      	nop

00003f54 <pwm_init>:
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    3f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3f58:	4fdb      	ldr	r7, [pc, #876]	; (42c8 <pwm_init+0x374>)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    3f5a:	2300      	movs	r3, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3f5c:	f8df e380 	ldr.w	lr, [pc, #896]	; 42e0 <pwm_init+0x38c>
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3f60:	250f      	movs	r5, #15
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3f62:	6fba      	ldr	r2, [r7, #120]	; 0x78

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3f64:	f44f 4c70 	mov.w	ip, #61440	; 0xf000
    3f68:	49d8      	ldr	r1, [pc, #864]	; (42cc <pwm_init+0x378>)
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3f6a:	f44f 4660 	mov.w	r6, #57344	; 0xe000
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3f6e:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3f72:	f44f 6480 	mov.w	r4, #1024	; 0x400
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3f76:	f248 20b8 	movw	r0, #33464	; 0x82b8
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3f7a:	67ba      	str	r2, [r7, #120]	; 0x78
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3f7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    3f80:	ea42 0e0e 	orr.w	lr, r2, lr
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3f84:	4ad2      	ldr	r2, [pc, #840]	; (42d0 <pwm_init+0x37c>)
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3f86:	f8c7 e080 	str.w	lr, [r7, #128]	; 0x80

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3f8a:	f241 0e01 	movw	lr, #4097	; 0x1001

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3f8e:	f8a1 c18c 	strh.w	ip, [r1, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    3f92:	f8a1 518e 	strh.w	r5, [r1, #398]	; 0x18e
	p->FFILT0 = 0;
    3f96:	f8a1 3190 	strh.w	r3, [r1, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3f9a:	f8b1 7188 	ldrh.w	r7, [r1, #392]	; 0x188
    3f9e:	b2bf      	uxth	r7, r7
    3fa0:	f047 07f0 	orr.w	r7, r7, #240	; 0xf0
    3fa4:	f8a1 7188 	strh.w	r7, [r1, #392]	; 0x188
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3fa8:	f645 57c0 	movw	r7, #24000	; 0x5dc0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3fac:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3fae:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    3fb0:	844b      	strh	r3, [r1, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3fb2:	860b      	strh	r3, [r1, #48]	; 0x30
		p->SM[i].INIT = 0;
    3fb4:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    3fb6:	814b      	strh	r3, [r1, #10]
		p->SM[i].VAL1 = 33464;
    3fb8:	81c8      	strh	r0, [r1, #14]
		p->SM[i].VAL2 = 0;
    3fba:	824b      	strh	r3, [r1, #18]
		p->SM[i].VAL3 = 0;
    3fbc:	82cb      	strh	r3, [r1, #22]
		p->SM[i].VAL4 = 0;
    3fbe:	834b      	strh	r3, [r1, #26]
		p->SM[i].VAL5 = 0;
    3fc0:	83cb      	strh	r3, [r1, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3fc2:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3fc4:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    3fc6:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    3fca:	f8a1 3090 	strh.w	r3, [r1, #144]	; 0x90
		p->SM[i].INIT = 0;
    3fce:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    3fd0:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    3fd4:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    3fd8:	f8a1 3072 	strh.w	r3, [r1, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    3fdc:	f8a1 3076 	strh.w	r3, [r1, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    3fe0:	f8a1 307a 	strh.w	r3, [r1, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    3fe4:	f8a1 307e 	strh.w	r3, [r1, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3fe8:	f8a2 6064 	strh.w	r6, [r2, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3fec:	f8a2 4066 	strh.w	r4, [r2, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    3ff0:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    3ff4:	f8a1 30f0 	strh.w	r3, [r1, #240]	; 0xf0
		p->SM[i].INIT = 0;
    3ff8:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    3ffc:	f8a1 30ca 	strh.w	r3, [r1, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    4000:	f8a1 00ce 	strh.w	r0, [r1, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    4004:	f8a1 30d2 	strh.w	r3, [r1, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    4008:	f8a1 30d6 	strh.w	r3, [r1, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    400c:	f8a1 30da 	strh.w	r3, [r1, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    4010:	f8a1 30de 	strh.w	r3, [r1, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4014:	f8a2 60c4 	strh.w	r6, [r2, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4018:	f8a2 40c6 	strh.w	r4, [r2, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    401c:	f8a1 3142 	strh.w	r3, [r1, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    4020:	f8a1 3150 	strh.w	r3, [r1, #336]	; 0x150
		p->SM[i].INIT = 0;
    4024:	f8a2 30c2 	strh.w	r3, [r2, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    4028:	f8a1 312a 	strh.w	r3, [r1, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    402c:	f8a1 012e 	strh.w	r0, [r1, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    4030:	f8a1 3132 	strh.w	r3, [r1, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    4034:	f8a1 3136 	strh.w	r3, [r1, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    4038:	f8a1 313a 	strh.w	r3, [r1, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    403c:	f8a1 313e 	strh.w	r3, [r1, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4040:	f8b1 2188 	ldrh.w	r2, [r1, #392]	; 0x188
    4044:	b292      	uxth	r2, r2
    4046:	432a      	orrs	r2, r5
    4048:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    404c:	f8b1 8188 	ldrh.w	r8, [r1, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4050:	4aa0      	ldr	r2, [pc, #640]	; (42d4 <pwm_init+0x380>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    4052:	fa1f f888 	uxth.w	r8, r8
    4056:	f448 6870 	orr.w	r8, r8, #3840	; 0xf00
    405a:	f8a1 8188 	strh.w	r8, [r1, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    405e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4062:	f8a2 c18c 	strh.w	ip, [r2, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    4066:	f8a2 518e 	strh.w	r5, [r2, #398]	; 0x18e
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    406a:	3160      	adds	r1, #96	; 0x60
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    406c:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    4070:	f8b2 8188 	ldrh.w	r8, [r2, #392]	; 0x188
    4074:	fa1f f888 	uxth.w	r8, r8
    4078:	f048 08f0 	orr.w	r8, r8, #240	; 0xf0
    407c:	f8a2 8188 	strh.w	r8, [r2, #392]	; 0x188
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4080:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4082:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    4084:	8453      	strh	r3, [r2, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    4086:	8613      	strh	r3, [r2, #48]	; 0x30
		p->SM[i].INIT = 0;
    4088:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    408a:	8153      	strh	r3, [r2, #10]
		p->SM[i].VAL1 = 33464;
    408c:	81d0      	strh	r0, [r2, #14]
		p->SM[i].VAL2 = 0;
    408e:	8253      	strh	r3, [r2, #18]
		p->SM[i].VAL3 = 0;
    4090:	82d3      	strh	r3, [r2, #22]
		p->SM[i].VAL4 = 0;
    4092:	8353      	strh	r3, [r2, #26]
		p->SM[i].VAL5 = 0;
    4094:	83d3      	strh	r3, [r2, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4096:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4098:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    409a:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    409e:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
		p->SM[i].INIT = 0;
    40a2:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    40a4:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    40a8:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    40ac:	f8a2 3072 	strh.w	r3, [r2, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    40b0:	f8a2 3076 	strh.w	r3, [r2, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    40b4:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    40b8:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    40bc:	f8a1 6064 	strh.w	r6, [r1, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    40c0:	f8a1 4066 	strh.w	r4, [r1, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    40c4:	f8a2 30e2 	strh.w	r3, [r2, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    40c8:	f8a2 30f0 	strh.w	r3, [r2, #240]	; 0xf0
		p->SM[i].INIT = 0;
    40cc:	f8a1 3062 	strh.w	r3, [r1, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    40d0:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    40d4:	f8a2 00ce 	strh.w	r0, [r2, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    40d8:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    40dc:	f8a2 30d6 	strh.w	r3, [r2, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    40e0:	f8a2 30da 	strh.w	r3, [r2, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    40e4:	f8a2 30de 	strh.w	r3, [r2, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    40e8:	f8a1 60c4 	strh.w	r6, [r1, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    40ec:	f8a1 40c6 	strh.w	r4, [r1, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    40f0:	f8a2 3142 	strh.w	r3, [r2, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    40f4:	f8a2 3150 	strh.w	r3, [r2, #336]	; 0x150
		p->SM[i].INIT = 0;
    40f8:	f8a1 30c2 	strh.w	r3, [r1, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    40fc:	f8a2 312a 	strh.w	r3, [r2, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    4100:	f8a2 012e 	strh.w	r0, [r2, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    4104:	f8a2 3132 	strh.w	r3, [r2, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    4108:	f8a2 3136 	strh.w	r3, [r2, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    410c:	f8a2 313a 	strh.w	r3, [r2, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    4110:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4114:	f8b2 1188 	ldrh.w	r1, [r2, #392]	; 0x188
    4118:	b289      	uxth	r1, r1
    411a:	4329      	orrs	r1, r5
    411c:	f8a2 1188 	strh.w	r1, [r2, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    4120:	f8b2 8188 	ldrh.w	r8, [r2, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4124:	496c      	ldr	r1, [pc, #432]	; (42d8 <pwm_init+0x384>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    4126:	fa1f f888 	uxth.w	r8, r8
    412a:	f448 6870 	orr.w	r8, r8, #3840	; 0xf00
    412e:	f8a2 8188 	strh.w	r8, [r2, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4132:	f502 4280 	add.w	r2, r2, #16384	; 0x4000

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4136:	f8a1 c18c 	strh.w	ip, [r1, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    413a:	f8a1 518e 	strh.w	r5, [r1, #398]	; 0x18e
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    413e:	3260      	adds	r2, #96	; 0x60
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    4140:	f8a1 3190 	strh.w	r3, [r1, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    4144:	f8b1 8188 	ldrh.w	r8, [r1, #392]	; 0x188
    4148:	fa1f f888 	uxth.w	r8, r8
    414c:	f048 08f0 	orr.w	r8, r8, #240	; 0xf0
    4150:	f8a1 8188 	strh.w	r8, [r1, #392]	; 0x188
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4154:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4156:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    4158:	844b      	strh	r3, [r1, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    415a:	860b      	strh	r3, [r1, #48]	; 0x30
		p->SM[i].INIT = 0;
    415c:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    415e:	814b      	strh	r3, [r1, #10]
		p->SM[i].VAL1 = 33464;
    4160:	81c8      	strh	r0, [r1, #14]
		p->SM[i].VAL2 = 0;
    4162:	824b      	strh	r3, [r1, #18]
		p->SM[i].VAL3 = 0;
    4164:	82cb      	strh	r3, [r1, #22]
		p->SM[i].VAL4 = 0;
    4166:	834b      	strh	r3, [r1, #26]
		p->SM[i].VAL5 = 0;
    4168:	83cb      	strh	r3, [r1, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    416a:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    416c:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    416e:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    4172:	f8a1 3090 	strh.w	r3, [r1, #144]	; 0x90
		p->SM[i].INIT = 0;
    4176:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    4178:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    417c:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    4180:	f8a1 3072 	strh.w	r3, [r1, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    4184:	f8a1 3076 	strh.w	r3, [r1, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    4188:	f8a1 307a 	strh.w	r3, [r1, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    418c:	f8a1 307e 	strh.w	r3, [r1, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4190:	f8a2 6064 	strh.w	r6, [r2, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4194:	f8a2 4066 	strh.w	r4, [r2, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    4198:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    419c:	f8a1 30f0 	strh.w	r3, [r1, #240]	; 0xf0
		p->SM[i].INIT = 0;
    41a0:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    41a4:	f8a1 30ca 	strh.w	r3, [r1, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    41a8:	f8a1 00ce 	strh.w	r0, [r1, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    41ac:	f8a1 30d2 	strh.w	r3, [r1, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    41b0:	f8a1 30d6 	strh.w	r3, [r1, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    41b4:	f8a1 30da 	strh.w	r3, [r1, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    41b8:	f8a1 30de 	strh.w	r3, [r1, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    41bc:	f8a2 60c4 	strh.w	r6, [r2, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    41c0:	f8a2 40c6 	strh.w	r4, [r2, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    41c4:	f8a1 3142 	strh.w	r3, [r1, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    41c8:	f8a1 3150 	strh.w	r3, [r1, #336]	; 0x150
		p->SM[i].INIT = 0;
    41cc:	f8a2 30c2 	strh.w	r3, [r2, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    41d0:	f8a1 312a 	strh.w	r3, [r1, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    41d4:	f8a1 012e 	strh.w	r0, [r1, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    41d8:	f8a1 3132 	strh.w	r3, [r1, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    41dc:	f8a1 3136 	strh.w	r3, [r1, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    41e0:	f8a1 313a 	strh.w	r3, [r1, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    41e4:	f8a1 313e 	strh.w	r3, [r1, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    41e8:	f8b1 2188 	ldrh.w	r2, [r1, #392]	; 0x188
    41ec:	b292      	uxth	r2, r2
    41ee:	432a      	orrs	r2, r5
    41f0:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    41f4:	f8b1 8188 	ldrh.w	r8, [r1, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    41f8:	4a38      	ldr	r2, [pc, #224]	; (42dc <pwm_init+0x388>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    41fa:	fa1f f888 	uxth.w	r8, r8
    41fe:	f448 6870 	orr.w	r8, r8, #3840	; 0xf00
    4202:	f8a1 8188 	strh.w	r8, [r1, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4206:	f501 4180 	add.w	r1, r1, #16384	; 0x4000

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    420a:	f8a2 c18c 	strh.w	ip, [r2, #396]	; 0x18c
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    420e:	f243 0c26 	movw	ip, #12326	; 0x3026
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    4212:	f8a2 518e 	strh.w	r5, [r2, #398]	; 0x18e
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4216:	3160      	adds	r1, #96	; 0x60
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    4218:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    421c:	f8b2 8188 	ldrh.w	r8, [r2, #392]	; 0x188
    4220:	fa1f f888 	uxth.w	r8, r8
    4224:	f048 08f0 	orr.w	r8, r8, #240	; 0xf0
    4228:	f8a2 8188 	strh.w	r8, [r2, #392]	; 0x188
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    422c:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    422e:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    4230:	8453      	strh	r3, [r2, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    4232:	8613      	strh	r3, [r2, #48]	; 0x30
		p->SM[i].INIT = 0;
    4234:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    4236:	8153      	strh	r3, [r2, #10]
		p->SM[i].VAL1 = 33464;
    4238:	81d0      	strh	r0, [r2, #14]
		p->SM[i].VAL2 = 0;
    423a:	8253      	strh	r3, [r2, #18]
		p->SM[i].VAL3 = 0;
    423c:	82d3      	strh	r3, [r2, #22]
		p->SM[i].VAL4 = 0;
    423e:	8353      	strh	r3, [r2, #26]
		p->SM[i].VAL5 = 0;
    4240:	83d3      	strh	r3, [r2, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4242:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4244:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    4246:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    424a:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
		p->SM[i].INIT = 0;
    424e:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    4250:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    4254:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    4258:	f8a2 3072 	strh.w	r3, [r2, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    425c:	f8a2 3076 	strh.w	r3, [r2, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    4260:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    4264:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4268:	f8a1 6064 	strh.w	r6, [r1, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    426c:	f8a1 4066 	strh.w	r4, [r1, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    4270:	f8a2 30e2 	strh.w	r3, [r2, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    4274:	f8a2 30f0 	strh.w	r3, [r2, #240]	; 0xf0
		p->SM[i].INIT = 0;
    4278:	f8a1 3062 	strh.w	r3, [r1, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    427c:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    4280:	f8a2 00ce 	strh.w	r0, [r2, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    4284:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    4288:	f8a2 30d6 	strh.w	r3, [r2, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    428c:	f8a2 30da 	strh.w	r3, [r2, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    4290:	f8a2 30de 	strh.w	r3, [r2, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4294:	f8a1 60c4 	strh.w	r6, [r1, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4298:	f8a1 40c6 	strh.w	r4, [r1, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    429c:	f8a2 3142 	strh.w	r3, [r2, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    42a0:	f8a2 3150 	strh.w	r3, [r2, #336]	; 0x150
		p->SM[i].INIT = 0;
    42a4:	f8a1 30c2 	strh.w	r3, [r1, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    42a8:	f8a2 312a 	strh.w	r3, [r2, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    42ac:	f8a2 012e 	strh.w	r0, [r2, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    42b0:	f8a2 3132 	strh.w	r3, [r2, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    42b4:	f8a2 3136 	strh.w	r3, [r2, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    42b8:	f8a2 313a 	strh.w	r3, [r2, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    42bc:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    42c0:	f8b2 1188 	ldrh.w	r1, [r2, #392]	; 0x188
    42c4:	e00e      	b.n	42e4 <pwm_init+0x390>
    42c6:	bf00      	nop
    42c8:	400fc000 	.word	0x400fc000
    42cc:	403dc000 	.word	0x403dc000
    42d0:	403dc060 	.word	0x403dc060
    42d4:	403e0000 	.word	0x403e0000
    42d8:	403e4000 	.word	0x403e4000
    42dc:	403e8000 	.word	0x403e8000
    42e0:	fc030000 	.word	0xfc030000
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    42e4:	4c57      	ldr	r4, [pc, #348]	; (4444 <pwm_init+0x4f0>)
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    42e6:	b289      	uxth	r1, r1
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    42e8:	4857      	ldr	r0, [pc, #348]	; (4448 <pwm_init+0x4f4>)
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    42ea:	f8df 816c 	ldr.w	r8, [pc, #364]	; 4458 <pwm_init+0x504>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    42ee:	4329      	orrs	r1, r5
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    42f0:	4e56      	ldr	r6, [pc, #344]	; (444c <pwm_init+0x4f8>)
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    42f2:	f8a2 1188 	strh.w	r1, [r2, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    42f6:	f8b2 9188 	ldrh.w	r9, [r2, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    42fa:	4955      	ldr	r1, [pc, #340]	; (4450 <pwm_init+0x4fc>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    42fc:	fa1f f989 	uxth.w	r9, r9
    4300:	f449 6970 	orr.w	r9, r9, #3840	; 0xf00
    4304:	f8a2 9188 	strh.w	r9, [r2, #392]	; 0x188
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4308:	4a52      	ldr	r2, [pc, #328]	; (4454 <pwm_init+0x500>)
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    430a:	81a3      	strh	r3, [r4, #12]
		p->CH[i].CNTR = 0;
    430c:	8163      	strh	r3, [r4, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    430e:	81e5      	strh	r5, [r4, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4310:	f8a4 e014 	strh.w	lr, [r4, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4314:	80e7      	strh	r7, [r4, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4316:	8023      	strh	r3, [r4, #0]
		p->CH[i].CMPLD1 = 0;
    4318:	8223      	strh	r3, [r4, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    431a:	f8a4 c00c 	strh.w	ip, [r4, #12]
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    431e:	85a3      	strh	r3, [r4, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    4320:	8563      	strh	r3, [r4, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4322:	85e5      	strh	r5, [r4, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4324:	f8a4 e034 	strh.w	lr, [r4, #52]	; 0x34
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4328:	f8a8 7006 	strh.w	r7, [r8, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    432c:	f8a8 3000 	strh.w	r3, [r8]
		p->CH[i].CMPLD1 = 0;
    4330:	8623      	strh	r3, [r4, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4332:	f8a4 c02c 	strh.w	ip, [r4, #44]	; 0x2c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4336:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    433a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    433e:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4342:	f8a4 e054 	strh.w	lr, [r4, #84]	; 0x54
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4346:	f8a8 7026 	strh.w	r7, [r8, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    434a:	f8a8 3020 	strh.w	r3, [r8, #32]
		p->CH[i].CMPLD1 = 0;
    434e:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4352:	f8a4 c04c 	strh.w	ip, [r4, #76]	; 0x4c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4356:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    435a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    435e:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4362:	f8a4 e074 	strh.w	lr, [r4, #116]	; 0x74
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4366:	f8a8 7046 	strh.w	r7, [r8, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    436a:	f8a8 3040 	strh.w	r3, [r8, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    436e:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4372:	f8a4 c06c 	strh.w	ip, [r4, #108]	; 0x6c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4376:	8183      	strh	r3, [r0, #12]
		p->CH[i].CNTR = 0;
    4378:	8143      	strh	r3, [r0, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    437a:	81c5      	strh	r5, [r0, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    437c:	f8a0 e014 	strh.w	lr, [r0, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4380:	80c7      	strh	r7, [r0, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4382:	8003      	strh	r3, [r0, #0]
		p->CH[i].CMPLD1 = 0;
    4384:	8203      	strh	r3, [r0, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4386:	f8a0 c00c 	strh.w	ip, [r0, #12]
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    438a:	8583      	strh	r3, [r0, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    438c:	8543      	strh	r3, [r0, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    438e:	85c5      	strh	r5, [r0, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4390:	f8a0 e034 	strh.w	lr, [r0, #52]	; 0x34
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4394:	80f7      	strh	r7, [r6, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4396:	8033      	strh	r3, [r6, #0]
		p->CH[i].CMPLD1 = 0;
    4398:	8603      	strh	r3, [r0, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    439a:	f8a0 c02c 	strh.w	ip, [r0, #44]	; 0x2c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    439e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    43a2:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    43a6:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    43aa:	f8a0 e054 	strh.w	lr, [r0, #84]	; 0x54
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    43ae:	84f7      	strh	r7, [r6, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    43b0:	8433      	strh	r3, [r6, #32]
		p->CH[i].CMPLD1 = 0;
    43b2:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    43b6:	f8a0 c04c 	strh.w	ip, [r0, #76]	; 0x4c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    43ba:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    43be:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    43c2:	f8a0 506e 	strh.w	r5, [r0, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    43c6:	f8a0 e074 	strh.w	lr, [r0, #116]	; 0x74
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    43ca:	f8a6 7046 	strh.w	r7, [r6, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    43ce:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    43d2:	f8a0 3070 	strh.w	r3, [r0, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    43d6:	f8a0 c06c 	strh.w	ip, [r0, #108]	; 0x6c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    43da:	818b      	strh	r3, [r1, #12]
		p->CH[i].CNTR = 0;
    43dc:	814b      	strh	r3, [r1, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    43de:	81cd      	strh	r5, [r1, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    43e0:	f8a1 e014 	strh.w	lr, [r1, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    43e4:	80cf      	strh	r7, [r1, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    43e6:	800b      	strh	r3, [r1, #0]
		p->CH[i].CMPLD1 = 0;
    43e8:	820b      	strh	r3, [r1, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    43ea:	f8a1 c00c 	strh.w	ip, [r1, #12]
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    43ee:	858b      	strh	r3, [r1, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    43f0:	854b      	strh	r3, [r1, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    43f2:	85cd      	strh	r5, [r1, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    43f4:	f8a1 e034 	strh.w	lr, [r1, #52]	; 0x34
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    43f8:	80d7      	strh	r7, [r2, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    43fa:	8013      	strh	r3, [r2, #0]
		p->CH[i].CMPLD1 = 0;
    43fc:	860b      	strh	r3, [r1, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    43fe:	f8a1 c02c 	strh.w	ip, [r1, #44]	; 0x2c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4402:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    4406:	f8a1 304a 	strh.w	r3, [r1, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    440a:	f8a1 504e 	strh.w	r5, [r1, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    440e:	f8a1 e054 	strh.w	lr, [r1, #84]	; 0x54
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4412:	84d7      	strh	r7, [r2, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4414:	8413      	strh	r3, [r2, #32]
		p->CH[i].CMPLD1 = 0;
    4416:	f8a1 3050 	strh.w	r3, [r1, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    441a:	f8a1 c04c 	strh.w	ip, [r1, #76]	; 0x4c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    441e:	f8a1 306c 	strh.w	r3, [r1, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    4422:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4426:	f8a1 506e 	strh.w	r5, [r1, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    442a:	f8a1 e074 	strh.w	lr, [r1, #116]	; 0x74
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    442e:	f8a2 7046 	strh.w	r7, [r2, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4432:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    4436:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    443a:	f8a1 c06c 	strh.w	ip, [r1, #108]	; 0x6c
    443e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4442:	bf00      	nop
    4444:	401dc000 	.word	0x401dc000
    4448:	401e0000 	.word	0x401e0000
    444c:	401e0020 	.word	0x401e0020
    4450:	401e4000 	.word	0x401e4000
    4454:	401e4020 	.word	0x401e4020
    4458:	401dc020 	.word	0x401dc020

0000445c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    445c:	4770      	bx	lr
    445e:	bf00      	nop

00004460 <__aeabi_atexit>:
    4460:	460b      	mov	r3, r1
    4462:	4601      	mov	r1, r0
    4464:	4618      	mov	r0, r3
    4466:	f000 b801 	b.w	446c <__cxa_atexit>
    446a:	bf00      	nop

0000446c <__cxa_atexit>:
    446c:	4613      	mov	r3, r2
    446e:	460a      	mov	r2, r1
    4470:	4601      	mov	r1, r0
    4472:	2002      	movs	r0, #2
    4474:	f000 bbd2 	b.w	4c1c <__register_exitproc>

00004478 <__errno>:
    4478:	4b01      	ldr	r3, [pc, #4]	; (4480 <__errno+0x8>)
    447a:	6818      	ldr	r0, [r3, #0]
    447c:	4770      	bx	lr
    447e:	bf00      	nop
    4480:	20000b10 	.word	0x20000b10

00004484 <__libc_init_array>:
    4484:	b570      	push	{r4, r5, r6, lr}
    4486:	4e0f      	ldr	r6, [pc, #60]	; (44c4 <__libc_init_array+0x40>)
    4488:	4d0f      	ldr	r5, [pc, #60]	; (44c8 <__libc_init_array+0x44>)
    448a:	1b76      	subs	r6, r6, r5
    448c:	10b6      	asrs	r6, r6, #2
    448e:	bf18      	it	ne
    4490:	2400      	movne	r4, #0
    4492:	d005      	beq.n	44a0 <__libc_init_array+0x1c>
    4494:	3401      	adds	r4, #1
    4496:	f855 3b04 	ldr.w	r3, [r5], #4
    449a:	4798      	blx	r3
    449c:	42a6      	cmp	r6, r4
    449e:	d1f9      	bne.n	4494 <__libc_init_array+0x10>
    44a0:	4e0a      	ldr	r6, [pc, #40]	; (44cc <__libc_init_array+0x48>)
    44a2:	4d0b      	ldr	r5, [pc, #44]	; (44d0 <__libc_init_array+0x4c>)
    44a4:	1b76      	subs	r6, r6, r5
    44a6:	f000 fd43 	bl	4f30 <___init_veneer>
    44aa:	10b6      	asrs	r6, r6, #2
    44ac:	bf18      	it	ne
    44ae:	2400      	movne	r4, #0
    44b0:	d006      	beq.n	44c0 <__libc_init_array+0x3c>
    44b2:	3401      	adds	r4, #1
    44b4:	f855 3b04 	ldr.w	r3, [r5], #4
    44b8:	4798      	blx	r3
    44ba:	42a6      	cmp	r6, r4
    44bc:	d1f9      	bne.n	44b2 <__libc_init_array+0x2e>
    44be:	bd70      	pop	{r4, r5, r6, pc}
    44c0:	bd70      	pop	{r4, r5, r6, pc}
    44c2:	bf00      	nop
    44c4:	60001b00 	.word	0x60001b00
    44c8:	60001b00 	.word	0x60001b00
    44cc:	60001b18 	.word	0x60001b18
    44d0:	60001b00 	.word	0x60001b00

000044d4 <malloc>:
    44d4:	4b02      	ldr	r3, [pc, #8]	; (44e0 <malloc+0xc>)
    44d6:	4601      	mov	r1, r0
    44d8:	6818      	ldr	r0, [r3, #0]
    44da:	f000 b80b 	b.w	44f4 <_malloc_r>
    44de:	bf00      	nop
    44e0:	20000b10 	.word	0x20000b10

000044e4 <free>:
    44e4:	4b02      	ldr	r3, [pc, #8]	; (44f0 <free+0xc>)
    44e6:	4601      	mov	r1, r0
    44e8:	6818      	ldr	r0, [r3, #0]
    44ea:	f000 bc37 	b.w	4d5c <_free_r>
    44ee:	bf00      	nop
    44f0:	20000b10 	.word	0x20000b10

000044f4 <_malloc_r>:
    44f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44f8:	f101 050b 	add.w	r5, r1, #11
    44fc:	2d16      	cmp	r5, #22
    44fe:	b083      	sub	sp, #12
    4500:	4606      	mov	r6, r0
    4502:	f240 809f 	bls.w	4644 <_malloc_r+0x150>
    4506:	f035 0507 	bics.w	r5, r5, #7
    450a:	f100 80bf 	bmi.w	468c <_malloc_r+0x198>
    450e:	42a9      	cmp	r1, r5
    4510:	f200 80bc 	bhi.w	468c <_malloc_r+0x198>
    4514:	f000 faf4 	bl	4b00 <__malloc_lock>
    4518:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    451c:	f0c0 829c 	bcc.w	4a58 <_malloc_r+0x564>
    4520:	0a6b      	lsrs	r3, r5, #9
    4522:	f000 80ba 	beq.w	469a <_malloc_r+0x1a6>
    4526:	2b04      	cmp	r3, #4
    4528:	f200 8183 	bhi.w	4832 <_malloc_r+0x33e>
    452c:	09a8      	lsrs	r0, r5, #6
    452e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    4532:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4536:	3038      	adds	r0, #56	; 0x38
    4538:	4fc4      	ldr	r7, [pc, #784]	; (484c <_malloc_r+0x358>)
    453a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    453e:	f1a3 0108 	sub.w	r1, r3, #8
    4542:	685c      	ldr	r4, [r3, #4]
    4544:	42a1      	cmp	r1, r4
    4546:	d107      	bne.n	4558 <_malloc_r+0x64>
    4548:	e0ac      	b.n	46a4 <_malloc_r+0x1b0>
    454a:	2a00      	cmp	r2, #0
    454c:	f280 80ac 	bge.w	46a8 <_malloc_r+0x1b4>
    4550:	68e4      	ldr	r4, [r4, #12]
    4552:	42a1      	cmp	r1, r4
    4554:	f000 80a6 	beq.w	46a4 <_malloc_r+0x1b0>
    4558:	6863      	ldr	r3, [r4, #4]
    455a:	f023 0303 	bic.w	r3, r3, #3
    455e:	1b5a      	subs	r2, r3, r5
    4560:	2a0f      	cmp	r2, #15
    4562:	ddf2      	ble.n	454a <_malloc_r+0x56>
    4564:	49b9      	ldr	r1, [pc, #740]	; (484c <_malloc_r+0x358>)
    4566:	693c      	ldr	r4, [r7, #16]
    4568:	f101 0e08 	add.w	lr, r1, #8
    456c:	4574      	cmp	r4, lr
    456e:	f000 81b3 	beq.w	48d8 <_malloc_r+0x3e4>
    4572:	6863      	ldr	r3, [r4, #4]
    4574:	f023 0303 	bic.w	r3, r3, #3
    4578:	1b5a      	subs	r2, r3, r5
    457a:	2a0f      	cmp	r2, #15
    457c:	f300 8199 	bgt.w	48b2 <_malloc_r+0x3be>
    4580:	2a00      	cmp	r2, #0
    4582:	f8c1 e014 	str.w	lr, [r1, #20]
    4586:	f8c1 e010 	str.w	lr, [r1, #16]
    458a:	f280 809e 	bge.w	46ca <_malloc_r+0x1d6>
    458e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4592:	f080 8167 	bcs.w	4864 <_malloc_r+0x370>
    4596:	08db      	lsrs	r3, r3, #3
    4598:	f103 0c01 	add.w	ip, r3, #1
    459c:	2201      	movs	r2, #1
    459e:	109b      	asrs	r3, r3, #2
    45a0:	fa02 f303 	lsl.w	r3, r2, r3
    45a4:	684a      	ldr	r2, [r1, #4]
    45a6:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    45aa:	f8c4 8008 	str.w	r8, [r4, #8]
    45ae:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    45b2:	431a      	orrs	r2, r3
    45b4:	f1a9 0308 	sub.w	r3, r9, #8
    45b8:	60e3      	str	r3, [r4, #12]
    45ba:	604a      	str	r2, [r1, #4]
    45bc:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    45c0:	f8c8 400c 	str.w	r4, [r8, #12]
    45c4:	1083      	asrs	r3, r0, #2
    45c6:	2401      	movs	r4, #1
    45c8:	409c      	lsls	r4, r3
    45ca:	4294      	cmp	r4, r2
    45cc:	f200 808a 	bhi.w	46e4 <_malloc_r+0x1f0>
    45d0:	4214      	tst	r4, r2
    45d2:	d106      	bne.n	45e2 <_malloc_r+0xee>
    45d4:	f020 0003 	bic.w	r0, r0, #3
    45d8:	0064      	lsls	r4, r4, #1
    45da:	4214      	tst	r4, r2
    45dc:	f100 0004 	add.w	r0, r0, #4
    45e0:	d0fa      	beq.n	45d8 <_malloc_r+0xe4>
    45e2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    45e6:	46cc      	mov	ip, r9
    45e8:	4680      	mov	r8, r0
    45ea:	f8dc 100c 	ldr.w	r1, [ip, #12]
    45ee:	458c      	cmp	ip, r1
    45f0:	d107      	bne.n	4602 <_malloc_r+0x10e>
    45f2:	e173      	b.n	48dc <_malloc_r+0x3e8>
    45f4:	2a00      	cmp	r2, #0
    45f6:	f280 8181 	bge.w	48fc <_malloc_r+0x408>
    45fa:	68c9      	ldr	r1, [r1, #12]
    45fc:	458c      	cmp	ip, r1
    45fe:	f000 816d 	beq.w	48dc <_malloc_r+0x3e8>
    4602:	684b      	ldr	r3, [r1, #4]
    4604:	f023 0303 	bic.w	r3, r3, #3
    4608:	1b5a      	subs	r2, r3, r5
    460a:	2a0f      	cmp	r2, #15
    460c:	ddf2      	ble.n	45f4 <_malloc_r+0x100>
    460e:	460c      	mov	r4, r1
    4610:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    4614:	f854 8f08 	ldr.w	r8, [r4, #8]!
    4618:	194b      	adds	r3, r1, r5
    461a:	f045 0501 	orr.w	r5, r5, #1
    461e:	604d      	str	r5, [r1, #4]
    4620:	f042 0101 	orr.w	r1, r2, #1
    4624:	f8c8 c00c 	str.w	ip, [r8, #12]
    4628:	4630      	mov	r0, r6
    462a:	f8cc 8008 	str.w	r8, [ip, #8]
    462e:	617b      	str	r3, [r7, #20]
    4630:	613b      	str	r3, [r7, #16]
    4632:	f8c3 e00c 	str.w	lr, [r3, #12]
    4636:	f8c3 e008 	str.w	lr, [r3, #8]
    463a:	6059      	str	r1, [r3, #4]
    463c:	509a      	str	r2, [r3, r2]
    463e:	f000 fa61 	bl	4b04 <__malloc_unlock>
    4642:	e01f      	b.n	4684 <_malloc_r+0x190>
    4644:	2910      	cmp	r1, #16
    4646:	d821      	bhi.n	468c <_malloc_r+0x198>
    4648:	f000 fa5a 	bl	4b00 <__malloc_lock>
    464c:	2510      	movs	r5, #16
    464e:	2306      	movs	r3, #6
    4650:	2002      	movs	r0, #2
    4652:	4f7e      	ldr	r7, [pc, #504]	; (484c <_malloc_r+0x358>)
    4654:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4658:	f1a3 0208 	sub.w	r2, r3, #8
    465c:	685c      	ldr	r4, [r3, #4]
    465e:	4294      	cmp	r4, r2
    4660:	f000 8145 	beq.w	48ee <_malloc_r+0x3fa>
    4664:	6863      	ldr	r3, [r4, #4]
    4666:	68e1      	ldr	r1, [r4, #12]
    4668:	68a5      	ldr	r5, [r4, #8]
    466a:	f023 0303 	bic.w	r3, r3, #3
    466e:	4423      	add	r3, r4
    4670:	4630      	mov	r0, r6
    4672:	685a      	ldr	r2, [r3, #4]
    4674:	60e9      	str	r1, [r5, #12]
    4676:	f042 0201 	orr.w	r2, r2, #1
    467a:	608d      	str	r5, [r1, #8]
    467c:	605a      	str	r2, [r3, #4]
    467e:	f000 fa41 	bl	4b04 <__malloc_unlock>
    4682:	3408      	adds	r4, #8
    4684:	4620      	mov	r0, r4
    4686:	b003      	add	sp, #12
    4688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    468c:	2400      	movs	r4, #0
    468e:	230c      	movs	r3, #12
    4690:	4620      	mov	r0, r4
    4692:	6033      	str	r3, [r6, #0]
    4694:	b003      	add	sp, #12
    4696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    469a:	2380      	movs	r3, #128	; 0x80
    469c:	f04f 0e40 	mov.w	lr, #64	; 0x40
    46a0:	203f      	movs	r0, #63	; 0x3f
    46a2:	e749      	b.n	4538 <_malloc_r+0x44>
    46a4:	4670      	mov	r0, lr
    46a6:	e75d      	b.n	4564 <_malloc_r+0x70>
    46a8:	4423      	add	r3, r4
    46aa:	68e1      	ldr	r1, [r4, #12]
    46ac:	685a      	ldr	r2, [r3, #4]
    46ae:	68a5      	ldr	r5, [r4, #8]
    46b0:	f042 0201 	orr.w	r2, r2, #1
    46b4:	60e9      	str	r1, [r5, #12]
    46b6:	4630      	mov	r0, r6
    46b8:	608d      	str	r5, [r1, #8]
    46ba:	605a      	str	r2, [r3, #4]
    46bc:	f000 fa22 	bl	4b04 <__malloc_unlock>
    46c0:	3408      	adds	r4, #8
    46c2:	4620      	mov	r0, r4
    46c4:	b003      	add	sp, #12
    46c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46ca:	4423      	add	r3, r4
    46cc:	4630      	mov	r0, r6
    46ce:	685a      	ldr	r2, [r3, #4]
    46d0:	f042 0201 	orr.w	r2, r2, #1
    46d4:	605a      	str	r2, [r3, #4]
    46d6:	f000 fa15 	bl	4b04 <__malloc_unlock>
    46da:	3408      	adds	r4, #8
    46dc:	4620      	mov	r0, r4
    46de:	b003      	add	sp, #12
    46e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46e4:	68bc      	ldr	r4, [r7, #8]
    46e6:	6863      	ldr	r3, [r4, #4]
    46e8:	f023 0803 	bic.w	r8, r3, #3
    46ec:	45a8      	cmp	r8, r5
    46ee:	d304      	bcc.n	46fa <_malloc_r+0x206>
    46f0:	ebc5 0308 	rsb	r3, r5, r8
    46f4:	2b0f      	cmp	r3, #15
    46f6:	f300 808c 	bgt.w	4812 <_malloc_r+0x31e>
    46fa:	4b55      	ldr	r3, [pc, #340]	; (4850 <_malloc_r+0x35c>)
    46fc:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4860 <_malloc_r+0x36c>
    4700:	681a      	ldr	r2, [r3, #0]
    4702:	f8d9 3000 	ldr.w	r3, [r9]
    4706:	3301      	adds	r3, #1
    4708:	442a      	add	r2, r5
    470a:	eb04 0a08 	add.w	sl, r4, r8
    470e:	f000 8160 	beq.w	49d2 <_malloc_r+0x4de>
    4712:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4716:	320f      	adds	r2, #15
    4718:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    471c:	f022 020f 	bic.w	r2, r2, #15
    4720:	4611      	mov	r1, r2
    4722:	4630      	mov	r0, r6
    4724:	9201      	str	r2, [sp, #4]
    4726:	f000 f9ef 	bl	4b08 <_sbrk_r>
    472a:	f1b0 3fff 	cmp.w	r0, #4294967295
    472e:	4683      	mov	fp, r0
    4730:	9a01      	ldr	r2, [sp, #4]
    4732:	f000 8158 	beq.w	49e6 <_malloc_r+0x4f2>
    4736:	4582      	cmp	sl, r0
    4738:	f200 80fc 	bhi.w	4934 <_malloc_r+0x440>
    473c:	4b45      	ldr	r3, [pc, #276]	; (4854 <_malloc_r+0x360>)
    473e:	6819      	ldr	r1, [r3, #0]
    4740:	45da      	cmp	sl, fp
    4742:	4411      	add	r1, r2
    4744:	6019      	str	r1, [r3, #0]
    4746:	f000 8153 	beq.w	49f0 <_malloc_r+0x4fc>
    474a:	f8d9 0000 	ldr.w	r0, [r9]
    474e:	f8df e110 	ldr.w	lr, [pc, #272]	; 4860 <_malloc_r+0x36c>
    4752:	3001      	adds	r0, #1
    4754:	bf1b      	ittet	ne
    4756:	ebca 0a0b 	rsbne	sl, sl, fp
    475a:	4451      	addne	r1, sl
    475c:	f8ce b000 	streq.w	fp, [lr]
    4760:	6019      	strne	r1, [r3, #0]
    4762:	f01b 0107 	ands.w	r1, fp, #7
    4766:	f000 8117 	beq.w	4998 <_malloc_r+0x4a4>
    476a:	f1c1 0008 	rsb	r0, r1, #8
    476e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    4772:	4483      	add	fp, r0
    4774:	3108      	adds	r1, #8
    4776:	445a      	add	r2, fp
    4778:	f3c2 020b 	ubfx	r2, r2, #0, #12
    477c:	ebc2 0901 	rsb	r9, r2, r1
    4780:	4649      	mov	r1, r9
    4782:	4630      	mov	r0, r6
    4784:	9301      	str	r3, [sp, #4]
    4786:	f000 f9bf 	bl	4b08 <_sbrk_r>
    478a:	1c43      	adds	r3, r0, #1
    478c:	9b01      	ldr	r3, [sp, #4]
    478e:	f000 813f 	beq.w	4a10 <_malloc_r+0x51c>
    4792:	ebcb 0200 	rsb	r2, fp, r0
    4796:	444a      	add	r2, r9
    4798:	f042 0201 	orr.w	r2, r2, #1
    479c:	6819      	ldr	r1, [r3, #0]
    479e:	f8c7 b008 	str.w	fp, [r7, #8]
    47a2:	4449      	add	r1, r9
    47a4:	42bc      	cmp	r4, r7
    47a6:	f8cb 2004 	str.w	r2, [fp, #4]
    47aa:	6019      	str	r1, [r3, #0]
    47ac:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4854 <_malloc_r+0x360>
    47b0:	d016      	beq.n	47e0 <_malloc_r+0x2ec>
    47b2:	f1b8 0f0f 	cmp.w	r8, #15
    47b6:	f240 80fd 	bls.w	49b4 <_malloc_r+0x4c0>
    47ba:	6862      	ldr	r2, [r4, #4]
    47bc:	f1a8 030c 	sub.w	r3, r8, #12
    47c0:	f023 0307 	bic.w	r3, r3, #7
    47c4:	18e0      	adds	r0, r4, r3
    47c6:	f002 0201 	and.w	r2, r2, #1
    47ca:	f04f 0e05 	mov.w	lr, #5
    47ce:	431a      	orrs	r2, r3
    47d0:	2b0f      	cmp	r3, #15
    47d2:	6062      	str	r2, [r4, #4]
    47d4:	f8c0 e004 	str.w	lr, [r0, #4]
    47d8:	f8c0 e008 	str.w	lr, [r0, #8]
    47dc:	f200 811c 	bhi.w	4a18 <_malloc_r+0x524>
    47e0:	4b1d      	ldr	r3, [pc, #116]	; (4858 <_malloc_r+0x364>)
    47e2:	68bc      	ldr	r4, [r7, #8]
    47e4:	681a      	ldr	r2, [r3, #0]
    47e6:	4291      	cmp	r1, r2
    47e8:	bf88      	it	hi
    47ea:	6019      	strhi	r1, [r3, #0]
    47ec:	4b1b      	ldr	r3, [pc, #108]	; (485c <_malloc_r+0x368>)
    47ee:	681a      	ldr	r2, [r3, #0]
    47f0:	4291      	cmp	r1, r2
    47f2:	6862      	ldr	r2, [r4, #4]
    47f4:	bf88      	it	hi
    47f6:	6019      	strhi	r1, [r3, #0]
    47f8:	f022 0203 	bic.w	r2, r2, #3
    47fc:	4295      	cmp	r5, r2
    47fe:	eba2 0305 	sub.w	r3, r2, r5
    4802:	d801      	bhi.n	4808 <_malloc_r+0x314>
    4804:	2b0f      	cmp	r3, #15
    4806:	dc04      	bgt.n	4812 <_malloc_r+0x31e>
    4808:	4630      	mov	r0, r6
    480a:	f000 f97b 	bl	4b04 <__malloc_unlock>
    480e:	2400      	movs	r4, #0
    4810:	e738      	b.n	4684 <_malloc_r+0x190>
    4812:	1962      	adds	r2, r4, r5
    4814:	f043 0301 	orr.w	r3, r3, #1
    4818:	f045 0501 	orr.w	r5, r5, #1
    481c:	6065      	str	r5, [r4, #4]
    481e:	4630      	mov	r0, r6
    4820:	60ba      	str	r2, [r7, #8]
    4822:	6053      	str	r3, [r2, #4]
    4824:	f000 f96e 	bl	4b04 <__malloc_unlock>
    4828:	3408      	adds	r4, #8
    482a:	4620      	mov	r0, r4
    482c:	b003      	add	sp, #12
    482e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4832:	2b14      	cmp	r3, #20
    4834:	d971      	bls.n	491a <_malloc_r+0x426>
    4836:	2b54      	cmp	r3, #84	; 0x54
    4838:	f200 80a4 	bhi.w	4984 <_malloc_r+0x490>
    483c:	0b28      	lsrs	r0, r5, #12
    483e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    4842:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4846:	306e      	adds	r0, #110	; 0x6e
    4848:	e676      	b.n	4538 <_malloc_r+0x44>
    484a:	bf00      	nop
    484c:	20000b14 	.word	0x20000b14
    4850:	20001cd4 	.word	0x20001cd4
    4854:	20001cd8 	.word	0x20001cd8
    4858:	20001cd0 	.word	0x20001cd0
    485c:	20001ccc 	.word	0x20001ccc
    4860:	20000f20 	.word	0x20000f20
    4864:	0a5a      	lsrs	r2, r3, #9
    4866:	2a04      	cmp	r2, #4
    4868:	d95e      	bls.n	4928 <_malloc_r+0x434>
    486a:	2a14      	cmp	r2, #20
    486c:	f200 80b3 	bhi.w	49d6 <_malloc_r+0x4e2>
    4870:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    4874:	0049      	lsls	r1, r1, #1
    4876:	325b      	adds	r2, #91	; 0x5b
    4878:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    487c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    4880:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4a60 <_malloc_r+0x56c>
    4884:	f1ac 0c08 	sub.w	ip, ip, #8
    4888:	458c      	cmp	ip, r1
    488a:	f000 8088 	beq.w	499e <_malloc_r+0x4aa>
    488e:	684a      	ldr	r2, [r1, #4]
    4890:	f022 0203 	bic.w	r2, r2, #3
    4894:	4293      	cmp	r3, r2
    4896:	d202      	bcs.n	489e <_malloc_r+0x3aa>
    4898:	6889      	ldr	r1, [r1, #8]
    489a:	458c      	cmp	ip, r1
    489c:	d1f7      	bne.n	488e <_malloc_r+0x39a>
    489e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    48a2:	687a      	ldr	r2, [r7, #4]
    48a4:	f8c4 c00c 	str.w	ip, [r4, #12]
    48a8:	60a1      	str	r1, [r4, #8]
    48aa:	f8cc 4008 	str.w	r4, [ip, #8]
    48ae:	60cc      	str	r4, [r1, #12]
    48b0:	e688      	b.n	45c4 <_malloc_r+0xd0>
    48b2:	1963      	adds	r3, r4, r5
    48b4:	f042 0701 	orr.w	r7, r2, #1
    48b8:	f045 0501 	orr.w	r5, r5, #1
    48bc:	6065      	str	r5, [r4, #4]
    48be:	4630      	mov	r0, r6
    48c0:	614b      	str	r3, [r1, #20]
    48c2:	610b      	str	r3, [r1, #16]
    48c4:	f8c3 e00c 	str.w	lr, [r3, #12]
    48c8:	f8c3 e008 	str.w	lr, [r3, #8]
    48cc:	605f      	str	r7, [r3, #4]
    48ce:	509a      	str	r2, [r3, r2]
    48d0:	3408      	adds	r4, #8
    48d2:	f000 f917 	bl	4b04 <__malloc_unlock>
    48d6:	e6d5      	b.n	4684 <_malloc_r+0x190>
    48d8:	684a      	ldr	r2, [r1, #4]
    48da:	e673      	b.n	45c4 <_malloc_r+0xd0>
    48dc:	f108 0801 	add.w	r8, r8, #1
    48e0:	f018 0f03 	tst.w	r8, #3
    48e4:	f10c 0c08 	add.w	ip, ip, #8
    48e8:	f47f ae7f 	bne.w	45ea <_malloc_r+0xf6>
    48ec:	e030      	b.n	4950 <_malloc_r+0x45c>
    48ee:	68dc      	ldr	r4, [r3, #12]
    48f0:	42a3      	cmp	r3, r4
    48f2:	bf08      	it	eq
    48f4:	3002      	addeq	r0, #2
    48f6:	f43f ae35 	beq.w	4564 <_malloc_r+0x70>
    48fa:	e6b3      	b.n	4664 <_malloc_r+0x170>
    48fc:	440b      	add	r3, r1
    48fe:	460c      	mov	r4, r1
    4900:	685a      	ldr	r2, [r3, #4]
    4902:	68c9      	ldr	r1, [r1, #12]
    4904:	f854 5f08 	ldr.w	r5, [r4, #8]!
    4908:	f042 0201 	orr.w	r2, r2, #1
    490c:	605a      	str	r2, [r3, #4]
    490e:	4630      	mov	r0, r6
    4910:	60e9      	str	r1, [r5, #12]
    4912:	608d      	str	r5, [r1, #8]
    4914:	f000 f8f6 	bl	4b04 <__malloc_unlock>
    4918:	e6b4      	b.n	4684 <_malloc_r+0x190>
    491a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    491e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    4922:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4926:	e607      	b.n	4538 <_malloc_r+0x44>
    4928:	099a      	lsrs	r2, r3, #6
    492a:	f102 0139 	add.w	r1, r2, #57	; 0x39
    492e:	0049      	lsls	r1, r1, #1
    4930:	3238      	adds	r2, #56	; 0x38
    4932:	e7a1      	b.n	4878 <_malloc_r+0x384>
    4934:	42bc      	cmp	r4, r7
    4936:	4b4a      	ldr	r3, [pc, #296]	; (4a60 <_malloc_r+0x56c>)
    4938:	f43f af00 	beq.w	473c <_malloc_r+0x248>
    493c:	689c      	ldr	r4, [r3, #8]
    493e:	6862      	ldr	r2, [r4, #4]
    4940:	f022 0203 	bic.w	r2, r2, #3
    4944:	e75a      	b.n	47fc <_malloc_r+0x308>
    4946:	f859 3908 	ldr.w	r3, [r9], #-8
    494a:	4599      	cmp	r9, r3
    494c:	f040 8082 	bne.w	4a54 <_malloc_r+0x560>
    4950:	f010 0f03 	tst.w	r0, #3
    4954:	f100 30ff 	add.w	r0, r0, #4294967295
    4958:	d1f5      	bne.n	4946 <_malloc_r+0x452>
    495a:	687b      	ldr	r3, [r7, #4]
    495c:	ea23 0304 	bic.w	r3, r3, r4
    4960:	607b      	str	r3, [r7, #4]
    4962:	0064      	lsls	r4, r4, #1
    4964:	429c      	cmp	r4, r3
    4966:	f63f aebd 	bhi.w	46e4 <_malloc_r+0x1f0>
    496a:	2c00      	cmp	r4, #0
    496c:	f43f aeba 	beq.w	46e4 <_malloc_r+0x1f0>
    4970:	421c      	tst	r4, r3
    4972:	4640      	mov	r0, r8
    4974:	f47f ae35 	bne.w	45e2 <_malloc_r+0xee>
    4978:	0064      	lsls	r4, r4, #1
    497a:	421c      	tst	r4, r3
    497c:	f100 0004 	add.w	r0, r0, #4
    4980:	d0fa      	beq.n	4978 <_malloc_r+0x484>
    4982:	e62e      	b.n	45e2 <_malloc_r+0xee>
    4984:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    4988:	d818      	bhi.n	49bc <_malloc_r+0x4c8>
    498a:	0be8      	lsrs	r0, r5, #15
    498c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    4990:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4994:	3077      	adds	r0, #119	; 0x77
    4996:	e5cf      	b.n	4538 <_malloc_r+0x44>
    4998:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    499c:	e6eb      	b.n	4776 <_malloc_r+0x282>
    499e:	2101      	movs	r1, #1
    49a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    49a4:	1092      	asrs	r2, r2, #2
    49a6:	fa01 f202 	lsl.w	r2, r1, r2
    49aa:	431a      	orrs	r2, r3
    49ac:	f8c8 2004 	str.w	r2, [r8, #4]
    49b0:	4661      	mov	r1, ip
    49b2:	e777      	b.n	48a4 <_malloc_r+0x3b0>
    49b4:	2301      	movs	r3, #1
    49b6:	f8cb 3004 	str.w	r3, [fp, #4]
    49ba:	e725      	b.n	4808 <_malloc_r+0x314>
    49bc:	f240 5254 	movw	r2, #1364	; 0x554
    49c0:	4293      	cmp	r3, r2
    49c2:	d820      	bhi.n	4a06 <_malloc_r+0x512>
    49c4:	0ca8      	lsrs	r0, r5, #18
    49c6:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    49ca:	ea4f 034e 	mov.w	r3, lr, lsl #1
    49ce:	307c      	adds	r0, #124	; 0x7c
    49d0:	e5b2      	b.n	4538 <_malloc_r+0x44>
    49d2:	3210      	adds	r2, #16
    49d4:	e6a4      	b.n	4720 <_malloc_r+0x22c>
    49d6:	2a54      	cmp	r2, #84	; 0x54
    49d8:	d826      	bhi.n	4a28 <_malloc_r+0x534>
    49da:	0b1a      	lsrs	r2, r3, #12
    49dc:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    49e0:	0049      	lsls	r1, r1, #1
    49e2:	326e      	adds	r2, #110	; 0x6e
    49e4:	e748      	b.n	4878 <_malloc_r+0x384>
    49e6:	68bc      	ldr	r4, [r7, #8]
    49e8:	6862      	ldr	r2, [r4, #4]
    49ea:	f022 0203 	bic.w	r2, r2, #3
    49ee:	e705      	b.n	47fc <_malloc_r+0x308>
    49f0:	f3ca 000b 	ubfx	r0, sl, #0, #12
    49f4:	2800      	cmp	r0, #0
    49f6:	f47f aea8 	bne.w	474a <_malloc_r+0x256>
    49fa:	4442      	add	r2, r8
    49fc:	68bb      	ldr	r3, [r7, #8]
    49fe:	f042 0201 	orr.w	r2, r2, #1
    4a02:	605a      	str	r2, [r3, #4]
    4a04:	e6ec      	b.n	47e0 <_malloc_r+0x2ec>
    4a06:	23fe      	movs	r3, #254	; 0xfe
    4a08:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    4a0c:	207e      	movs	r0, #126	; 0x7e
    4a0e:	e593      	b.n	4538 <_malloc_r+0x44>
    4a10:	2201      	movs	r2, #1
    4a12:	f04f 0900 	mov.w	r9, #0
    4a16:	e6c1      	b.n	479c <_malloc_r+0x2a8>
    4a18:	f104 0108 	add.w	r1, r4, #8
    4a1c:	4630      	mov	r0, r6
    4a1e:	f000 f99d 	bl	4d5c <_free_r>
    4a22:	f8d9 1000 	ldr.w	r1, [r9]
    4a26:	e6db      	b.n	47e0 <_malloc_r+0x2ec>
    4a28:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    4a2c:	d805      	bhi.n	4a3a <_malloc_r+0x546>
    4a2e:	0bda      	lsrs	r2, r3, #15
    4a30:	f102 0178 	add.w	r1, r2, #120	; 0x78
    4a34:	0049      	lsls	r1, r1, #1
    4a36:	3277      	adds	r2, #119	; 0x77
    4a38:	e71e      	b.n	4878 <_malloc_r+0x384>
    4a3a:	f240 5154 	movw	r1, #1364	; 0x554
    4a3e:	428a      	cmp	r2, r1
    4a40:	d805      	bhi.n	4a4e <_malloc_r+0x55a>
    4a42:	0c9a      	lsrs	r2, r3, #18
    4a44:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    4a48:	0049      	lsls	r1, r1, #1
    4a4a:	327c      	adds	r2, #124	; 0x7c
    4a4c:	e714      	b.n	4878 <_malloc_r+0x384>
    4a4e:	21fe      	movs	r1, #254	; 0xfe
    4a50:	227e      	movs	r2, #126	; 0x7e
    4a52:	e711      	b.n	4878 <_malloc_r+0x384>
    4a54:	687b      	ldr	r3, [r7, #4]
    4a56:	e784      	b.n	4962 <_malloc_r+0x46e>
    4a58:	08e8      	lsrs	r0, r5, #3
    4a5a:	1c43      	adds	r3, r0, #1
    4a5c:	005b      	lsls	r3, r3, #1
    4a5e:	e5f8      	b.n	4652 <_malloc_r+0x15e>
    4a60:	20000b14 	.word	0x20000b14

00004a64 <memset>:
    4a64:	b470      	push	{r4, r5, r6}
    4a66:	0784      	lsls	r4, r0, #30
    4a68:	d046      	beq.n	4af8 <memset+0x94>
    4a6a:	1e54      	subs	r4, r2, #1
    4a6c:	2a00      	cmp	r2, #0
    4a6e:	d041      	beq.n	4af4 <memset+0x90>
    4a70:	b2cd      	uxtb	r5, r1
    4a72:	4603      	mov	r3, r0
    4a74:	e002      	b.n	4a7c <memset+0x18>
    4a76:	1e62      	subs	r2, r4, #1
    4a78:	b3e4      	cbz	r4, 4af4 <memset+0x90>
    4a7a:	4614      	mov	r4, r2
    4a7c:	f803 5b01 	strb.w	r5, [r3], #1
    4a80:	079a      	lsls	r2, r3, #30
    4a82:	d1f8      	bne.n	4a76 <memset+0x12>
    4a84:	2c03      	cmp	r4, #3
    4a86:	d92e      	bls.n	4ae6 <memset+0x82>
    4a88:	b2cd      	uxtb	r5, r1
    4a8a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    4a8e:	2c0f      	cmp	r4, #15
    4a90:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4a94:	d919      	bls.n	4aca <memset+0x66>
    4a96:	f103 0210 	add.w	r2, r3, #16
    4a9a:	4626      	mov	r6, r4
    4a9c:	3e10      	subs	r6, #16
    4a9e:	2e0f      	cmp	r6, #15
    4aa0:	f842 5c10 	str.w	r5, [r2, #-16]
    4aa4:	f842 5c0c 	str.w	r5, [r2, #-12]
    4aa8:	f842 5c08 	str.w	r5, [r2, #-8]
    4aac:	f842 5c04 	str.w	r5, [r2, #-4]
    4ab0:	f102 0210 	add.w	r2, r2, #16
    4ab4:	d8f2      	bhi.n	4a9c <memset+0x38>
    4ab6:	f1a4 0210 	sub.w	r2, r4, #16
    4aba:	f022 020f 	bic.w	r2, r2, #15
    4abe:	f004 040f 	and.w	r4, r4, #15
    4ac2:	3210      	adds	r2, #16
    4ac4:	2c03      	cmp	r4, #3
    4ac6:	4413      	add	r3, r2
    4ac8:	d90d      	bls.n	4ae6 <memset+0x82>
    4aca:	461e      	mov	r6, r3
    4acc:	4622      	mov	r2, r4
    4ace:	3a04      	subs	r2, #4
    4ad0:	2a03      	cmp	r2, #3
    4ad2:	f846 5b04 	str.w	r5, [r6], #4
    4ad6:	d8fa      	bhi.n	4ace <memset+0x6a>
    4ad8:	1f22      	subs	r2, r4, #4
    4ada:	f022 0203 	bic.w	r2, r2, #3
    4ade:	3204      	adds	r2, #4
    4ae0:	4413      	add	r3, r2
    4ae2:	f004 0403 	and.w	r4, r4, #3
    4ae6:	b12c      	cbz	r4, 4af4 <memset+0x90>
    4ae8:	b2c9      	uxtb	r1, r1
    4aea:	441c      	add	r4, r3
    4aec:	f803 1b01 	strb.w	r1, [r3], #1
    4af0:	42a3      	cmp	r3, r4
    4af2:	d1fb      	bne.n	4aec <memset+0x88>
    4af4:	bc70      	pop	{r4, r5, r6}
    4af6:	4770      	bx	lr
    4af8:	4614      	mov	r4, r2
    4afa:	4603      	mov	r3, r0
    4afc:	e7c2      	b.n	4a84 <memset+0x20>
    4afe:	bf00      	nop

00004b00 <__malloc_lock>:
    4b00:	4770      	bx	lr
    4b02:	bf00      	nop

00004b04 <__malloc_unlock>:
    4b04:	4770      	bx	lr
    4b06:	bf00      	nop

00004b08 <_sbrk_r>:
    4b08:	b538      	push	{r3, r4, r5, lr}
    4b0a:	4c07      	ldr	r4, [pc, #28]	; (4b28 <_sbrk_r+0x20>)
    4b0c:	2300      	movs	r3, #0
    4b0e:	4605      	mov	r5, r0
    4b10:	4608      	mov	r0, r1
    4b12:	6023      	str	r3, [r4, #0]
    4b14:	f7fe f8b0 	bl	2c78 <_sbrk>
    4b18:	1c43      	adds	r3, r0, #1
    4b1a:	d000      	beq.n	4b1e <_sbrk_r+0x16>
    4b1c:	bd38      	pop	{r3, r4, r5, pc}
    4b1e:	6823      	ldr	r3, [r4, #0]
    4b20:	2b00      	cmp	r3, #0
    4b22:	d0fb      	beq.n	4b1c <_sbrk_r+0x14>
    4b24:	602b      	str	r3, [r5, #0]
    4b26:	bd38      	pop	{r3, r4, r5, pc}
    4b28:	2000428c 	.word	0x2000428c
	...

00004b40 <strlen>:
    4b40:	f890 f000 	pld	[r0]
    4b44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    4b48:	f020 0107 	bic.w	r1, r0, #7
    4b4c:	f06f 0c00 	mvn.w	ip, #0
    4b50:	f010 0407 	ands.w	r4, r0, #7
    4b54:	f891 f020 	pld	[r1, #32]
    4b58:	f040 8049 	bne.w	4bee <strlen+0xae>
    4b5c:	f04f 0400 	mov.w	r4, #0
    4b60:	f06f 0007 	mvn.w	r0, #7
    4b64:	e9d1 2300 	ldrd	r2, r3, [r1]
    4b68:	f891 f040 	pld	[r1, #64]	; 0x40
    4b6c:	f100 0008 	add.w	r0, r0, #8
    4b70:	fa82 f24c 	uadd8	r2, r2, ip
    4b74:	faa4 f28c 	sel	r2, r4, ip
    4b78:	fa83 f34c 	uadd8	r3, r3, ip
    4b7c:	faa2 f38c 	sel	r3, r2, ip
    4b80:	bb4b      	cbnz	r3, 4bd6 <strlen+0x96>
    4b82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    4b86:	fa82 f24c 	uadd8	r2, r2, ip
    4b8a:	f100 0008 	add.w	r0, r0, #8
    4b8e:	faa4 f28c 	sel	r2, r4, ip
    4b92:	fa83 f34c 	uadd8	r3, r3, ip
    4b96:	faa2 f38c 	sel	r3, r2, ip
    4b9a:	b9e3      	cbnz	r3, 4bd6 <strlen+0x96>
    4b9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    4ba0:	fa82 f24c 	uadd8	r2, r2, ip
    4ba4:	f100 0008 	add.w	r0, r0, #8
    4ba8:	faa4 f28c 	sel	r2, r4, ip
    4bac:	fa83 f34c 	uadd8	r3, r3, ip
    4bb0:	faa2 f38c 	sel	r3, r2, ip
    4bb4:	b97b      	cbnz	r3, 4bd6 <strlen+0x96>
    4bb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    4bba:	f101 0120 	add.w	r1, r1, #32
    4bbe:	fa82 f24c 	uadd8	r2, r2, ip
    4bc2:	f100 0008 	add.w	r0, r0, #8
    4bc6:	faa4 f28c 	sel	r2, r4, ip
    4bca:	fa83 f34c 	uadd8	r3, r3, ip
    4bce:	faa2 f38c 	sel	r3, r2, ip
    4bd2:	2b00      	cmp	r3, #0
    4bd4:	d0c6      	beq.n	4b64 <strlen+0x24>
    4bd6:	2a00      	cmp	r2, #0
    4bd8:	bf04      	itt	eq
    4bda:	3004      	addeq	r0, #4
    4bdc:	461a      	moveq	r2, r3
    4bde:	ba12      	rev	r2, r2
    4be0:	fab2 f282 	clz	r2, r2
    4be4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    4be8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    4bec:	4770      	bx	lr
    4bee:	e9d1 2300 	ldrd	r2, r3, [r1]
    4bf2:	f004 0503 	and.w	r5, r4, #3
    4bf6:	f1c4 0000 	rsb	r0, r4, #0
    4bfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    4bfe:	f014 0f04 	tst.w	r4, #4
    4c02:	f891 f040 	pld	[r1, #64]	; 0x40
    4c06:	fa0c f505 	lsl.w	r5, ip, r5
    4c0a:	ea62 0205 	orn	r2, r2, r5
    4c0e:	bf1c      	itt	ne
    4c10:	ea63 0305 	ornne	r3, r3, r5
    4c14:	4662      	movne	r2, ip
    4c16:	f04f 0400 	mov.w	r4, #0
    4c1a:	e7a9      	b.n	4b70 <strlen+0x30>

00004c1c <__register_exitproc>:
    4c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c20:	4c25      	ldr	r4, [pc, #148]	; (4cb8 <__register_exitproc+0x9c>)
    4c22:	6825      	ldr	r5, [r4, #0]
    4c24:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    4c28:	4606      	mov	r6, r0
    4c2a:	4688      	mov	r8, r1
    4c2c:	4692      	mov	sl, r2
    4c2e:	4699      	mov	r9, r3
    4c30:	b3c4      	cbz	r4, 4ca4 <__register_exitproc+0x88>
    4c32:	6860      	ldr	r0, [r4, #4]
    4c34:	281f      	cmp	r0, #31
    4c36:	dc17      	bgt.n	4c68 <__register_exitproc+0x4c>
    4c38:	1c43      	adds	r3, r0, #1
    4c3a:	b176      	cbz	r6, 4c5a <__register_exitproc+0x3e>
    4c3c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    4c40:	2201      	movs	r2, #1
    4c42:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    4c46:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    4c4a:	4082      	lsls	r2, r0
    4c4c:	4311      	orrs	r1, r2
    4c4e:	2e02      	cmp	r6, #2
    4c50:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    4c54:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    4c58:	d01e      	beq.n	4c98 <__register_exitproc+0x7c>
    4c5a:	3002      	adds	r0, #2
    4c5c:	6063      	str	r3, [r4, #4]
    4c5e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    4c62:	2000      	movs	r0, #0
    4c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c68:	4b14      	ldr	r3, [pc, #80]	; (4cbc <__register_exitproc+0xa0>)
    4c6a:	b303      	cbz	r3, 4cae <__register_exitproc+0x92>
    4c6c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4c70:	f7ff fc30 	bl	44d4 <malloc>
    4c74:	4604      	mov	r4, r0
    4c76:	b1d0      	cbz	r0, 4cae <__register_exitproc+0x92>
    4c78:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    4c7c:	2700      	movs	r7, #0
    4c7e:	e880 0088 	stmia.w	r0, {r3, r7}
    4c82:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    4c86:	4638      	mov	r0, r7
    4c88:	2301      	movs	r3, #1
    4c8a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    4c8e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    4c92:	2e00      	cmp	r6, #0
    4c94:	d0e1      	beq.n	4c5a <__register_exitproc+0x3e>
    4c96:	e7d1      	b.n	4c3c <__register_exitproc+0x20>
    4c98:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    4c9c:	430a      	orrs	r2, r1
    4c9e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    4ca2:	e7da      	b.n	4c5a <__register_exitproc+0x3e>
    4ca4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    4ca8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    4cac:	e7c1      	b.n	4c32 <__register_exitproc+0x16>
    4cae:	f04f 30ff 	mov.w	r0, #4294967295
    4cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4cb6:	bf00      	nop
    4cb8:	20000670 	.word	0x20000670
    4cbc:	000044d5 	.word	0x000044d5

00004cc0 <_malloc_trim_r>:
    4cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cc2:	4f23      	ldr	r7, [pc, #140]	; (4d50 <_malloc_trim_r+0x90>)
    4cc4:	460c      	mov	r4, r1
    4cc6:	4606      	mov	r6, r0
    4cc8:	f7ff ff1a 	bl	4b00 <__malloc_lock>
    4ccc:	68bb      	ldr	r3, [r7, #8]
    4cce:	685d      	ldr	r5, [r3, #4]
    4cd0:	f025 0503 	bic.w	r5, r5, #3
    4cd4:	1b29      	subs	r1, r5, r4
    4cd6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    4cda:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    4cde:	f021 010f 	bic.w	r1, r1, #15
    4ce2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    4ce6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    4cea:	db07      	blt.n	4cfc <_malloc_trim_r+0x3c>
    4cec:	2100      	movs	r1, #0
    4cee:	4630      	mov	r0, r6
    4cf0:	f7ff ff0a 	bl	4b08 <_sbrk_r>
    4cf4:	68bb      	ldr	r3, [r7, #8]
    4cf6:	442b      	add	r3, r5
    4cf8:	4298      	cmp	r0, r3
    4cfa:	d004      	beq.n	4d06 <_malloc_trim_r+0x46>
    4cfc:	4630      	mov	r0, r6
    4cfe:	f7ff ff01 	bl	4b04 <__malloc_unlock>
    4d02:	2000      	movs	r0, #0
    4d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d06:	4261      	negs	r1, r4
    4d08:	4630      	mov	r0, r6
    4d0a:	f7ff fefd 	bl	4b08 <_sbrk_r>
    4d0e:	3001      	adds	r0, #1
    4d10:	d00d      	beq.n	4d2e <_malloc_trim_r+0x6e>
    4d12:	4b10      	ldr	r3, [pc, #64]	; (4d54 <_malloc_trim_r+0x94>)
    4d14:	68ba      	ldr	r2, [r7, #8]
    4d16:	6819      	ldr	r1, [r3, #0]
    4d18:	1b2d      	subs	r5, r5, r4
    4d1a:	f045 0501 	orr.w	r5, r5, #1
    4d1e:	4630      	mov	r0, r6
    4d20:	1b09      	subs	r1, r1, r4
    4d22:	6055      	str	r5, [r2, #4]
    4d24:	6019      	str	r1, [r3, #0]
    4d26:	f7ff feed 	bl	4b04 <__malloc_unlock>
    4d2a:	2001      	movs	r0, #1
    4d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d2e:	2100      	movs	r1, #0
    4d30:	4630      	mov	r0, r6
    4d32:	f7ff fee9 	bl	4b08 <_sbrk_r>
    4d36:	68ba      	ldr	r2, [r7, #8]
    4d38:	1a83      	subs	r3, r0, r2
    4d3a:	2b0f      	cmp	r3, #15
    4d3c:	ddde      	ble.n	4cfc <_malloc_trim_r+0x3c>
    4d3e:	4c06      	ldr	r4, [pc, #24]	; (4d58 <_malloc_trim_r+0x98>)
    4d40:	4904      	ldr	r1, [pc, #16]	; (4d54 <_malloc_trim_r+0x94>)
    4d42:	6824      	ldr	r4, [r4, #0]
    4d44:	f043 0301 	orr.w	r3, r3, #1
    4d48:	1b00      	subs	r0, r0, r4
    4d4a:	6053      	str	r3, [r2, #4]
    4d4c:	6008      	str	r0, [r1, #0]
    4d4e:	e7d5      	b.n	4cfc <_malloc_trim_r+0x3c>
    4d50:	20000b14 	.word	0x20000b14
    4d54:	20001cd8 	.word	0x20001cd8
    4d58:	20000f20 	.word	0x20000f20

00004d5c <_free_r>:
    4d5c:	2900      	cmp	r1, #0
    4d5e:	d045      	beq.n	4dec <_free_r+0x90>
    4d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d64:	460d      	mov	r5, r1
    4d66:	4680      	mov	r8, r0
    4d68:	f7ff feca 	bl	4b00 <__malloc_lock>
    4d6c:	f855 7c04 	ldr.w	r7, [r5, #-4]
    4d70:	496a      	ldr	r1, [pc, #424]	; (4f1c <_free_r+0x1c0>)
    4d72:	f027 0301 	bic.w	r3, r7, #1
    4d76:	f1a5 0408 	sub.w	r4, r5, #8
    4d7a:	18e2      	adds	r2, r4, r3
    4d7c:	688e      	ldr	r6, [r1, #8]
    4d7e:	6850      	ldr	r0, [r2, #4]
    4d80:	42b2      	cmp	r2, r6
    4d82:	f020 0003 	bic.w	r0, r0, #3
    4d86:	d062      	beq.n	4e4e <_free_r+0xf2>
    4d88:	07fe      	lsls	r6, r7, #31
    4d8a:	6050      	str	r0, [r2, #4]
    4d8c:	d40b      	bmi.n	4da6 <_free_r+0x4a>
    4d8e:	f855 7c08 	ldr.w	r7, [r5, #-8]
    4d92:	1be4      	subs	r4, r4, r7
    4d94:	f101 0e08 	add.w	lr, r1, #8
    4d98:	68a5      	ldr	r5, [r4, #8]
    4d9a:	4575      	cmp	r5, lr
    4d9c:	443b      	add	r3, r7
    4d9e:	d06f      	beq.n	4e80 <_free_r+0x124>
    4da0:	68e7      	ldr	r7, [r4, #12]
    4da2:	60ef      	str	r7, [r5, #12]
    4da4:	60bd      	str	r5, [r7, #8]
    4da6:	1815      	adds	r5, r2, r0
    4da8:	686d      	ldr	r5, [r5, #4]
    4daa:	07ed      	lsls	r5, r5, #31
    4dac:	d542      	bpl.n	4e34 <_free_r+0xd8>
    4dae:	f043 0201 	orr.w	r2, r3, #1
    4db2:	6062      	str	r2, [r4, #4]
    4db4:	50e3      	str	r3, [r4, r3]
    4db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4dba:	d218      	bcs.n	4dee <_free_r+0x92>
    4dbc:	08db      	lsrs	r3, r3, #3
    4dbe:	1c5a      	adds	r2, r3, #1
    4dc0:	684d      	ldr	r5, [r1, #4]
    4dc2:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    4dc6:	60a7      	str	r7, [r4, #8]
    4dc8:	2001      	movs	r0, #1
    4dca:	109b      	asrs	r3, r3, #2
    4dcc:	fa00 f303 	lsl.w	r3, r0, r3
    4dd0:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    4dd4:	431d      	orrs	r5, r3
    4dd6:	3808      	subs	r0, #8
    4dd8:	60e0      	str	r0, [r4, #12]
    4dda:	604d      	str	r5, [r1, #4]
    4ddc:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    4de0:	60fc      	str	r4, [r7, #12]
    4de2:	4640      	mov	r0, r8
    4de4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4de8:	f7ff be8c 	b.w	4b04 <__malloc_unlock>
    4dec:	4770      	bx	lr
    4dee:	0a5a      	lsrs	r2, r3, #9
    4df0:	2a04      	cmp	r2, #4
    4df2:	d853      	bhi.n	4e9c <_free_r+0x140>
    4df4:	099a      	lsrs	r2, r3, #6
    4df6:	f102 0739 	add.w	r7, r2, #57	; 0x39
    4dfa:	007f      	lsls	r7, r7, #1
    4dfc:	f102 0538 	add.w	r5, r2, #56	; 0x38
    4e00:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    4e04:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    4e08:	4944      	ldr	r1, [pc, #272]	; (4f1c <_free_r+0x1c0>)
    4e0a:	3808      	subs	r0, #8
    4e0c:	4290      	cmp	r0, r2
    4e0e:	d04d      	beq.n	4eac <_free_r+0x150>
    4e10:	6851      	ldr	r1, [r2, #4]
    4e12:	f021 0103 	bic.w	r1, r1, #3
    4e16:	428b      	cmp	r3, r1
    4e18:	d202      	bcs.n	4e20 <_free_r+0xc4>
    4e1a:	6892      	ldr	r2, [r2, #8]
    4e1c:	4290      	cmp	r0, r2
    4e1e:	d1f7      	bne.n	4e10 <_free_r+0xb4>
    4e20:	68d0      	ldr	r0, [r2, #12]
    4e22:	60e0      	str	r0, [r4, #12]
    4e24:	60a2      	str	r2, [r4, #8]
    4e26:	6084      	str	r4, [r0, #8]
    4e28:	60d4      	str	r4, [r2, #12]
    4e2a:	4640      	mov	r0, r8
    4e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4e30:	f7ff be68 	b.w	4b04 <__malloc_unlock>
    4e34:	6895      	ldr	r5, [r2, #8]
    4e36:	4f3a      	ldr	r7, [pc, #232]	; (4f20 <_free_r+0x1c4>)
    4e38:	42bd      	cmp	r5, r7
    4e3a:	4403      	add	r3, r0
    4e3c:	d03f      	beq.n	4ebe <_free_r+0x162>
    4e3e:	68d0      	ldr	r0, [r2, #12]
    4e40:	60e8      	str	r0, [r5, #12]
    4e42:	f043 0201 	orr.w	r2, r3, #1
    4e46:	6085      	str	r5, [r0, #8]
    4e48:	6062      	str	r2, [r4, #4]
    4e4a:	50e3      	str	r3, [r4, r3]
    4e4c:	e7b3      	b.n	4db6 <_free_r+0x5a>
    4e4e:	07ff      	lsls	r7, r7, #31
    4e50:	4403      	add	r3, r0
    4e52:	d407      	bmi.n	4e64 <_free_r+0x108>
    4e54:	f855 2c08 	ldr.w	r2, [r5, #-8]
    4e58:	1aa4      	subs	r4, r4, r2
    4e5a:	4413      	add	r3, r2
    4e5c:	68a0      	ldr	r0, [r4, #8]
    4e5e:	68e2      	ldr	r2, [r4, #12]
    4e60:	60c2      	str	r2, [r0, #12]
    4e62:	6090      	str	r0, [r2, #8]
    4e64:	4a2f      	ldr	r2, [pc, #188]	; (4f24 <_free_r+0x1c8>)
    4e66:	6812      	ldr	r2, [r2, #0]
    4e68:	f043 0001 	orr.w	r0, r3, #1
    4e6c:	4293      	cmp	r3, r2
    4e6e:	6060      	str	r0, [r4, #4]
    4e70:	608c      	str	r4, [r1, #8]
    4e72:	d3b6      	bcc.n	4de2 <_free_r+0x86>
    4e74:	4b2c      	ldr	r3, [pc, #176]	; (4f28 <_free_r+0x1cc>)
    4e76:	4640      	mov	r0, r8
    4e78:	6819      	ldr	r1, [r3, #0]
    4e7a:	f7ff ff21 	bl	4cc0 <_malloc_trim_r>
    4e7e:	e7b0      	b.n	4de2 <_free_r+0x86>
    4e80:	1811      	adds	r1, r2, r0
    4e82:	6849      	ldr	r1, [r1, #4]
    4e84:	07c9      	lsls	r1, r1, #31
    4e86:	d444      	bmi.n	4f12 <_free_r+0x1b6>
    4e88:	6891      	ldr	r1, [r2, #8]
    4e8a:	68d2      	ldr	r2, [r2, #12]
    4e8c:	60ca      	str	r2, [r1, #12]
    4e8e:	4403      	add	r3, r0
    4e90:	f043 0001 	orr.w	r0, r3, #1
    4e94:	6091      	str	r1, [r2, #8]
    4e96:	6060      	str	r0, [r4, #4]
    4e98:	50e3      	str	r3, [r4, r3]
    4e9a:	e7a2      	b.n	4de2 <_free_r+0x86>
    4e9c:	2a14      	cmp	r2, #20
    4e9e:	d817      	bhi.n	4ed0 <_free_r+0x174>
    4ea0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    4ea4:	007f      	lsls	r7, r7, #1
    4ea6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    4eaa:	e7a9      	b.n	4e00 <_free_r+0xa4>
    4eac:	10aa      	asrs	r2, r5, #2
    4eae:	684b      	ldr	r3, [r1, #4]
    4eb0:	2501      	movs	r5, #1
    4eb2:	fa05 f202 	lsl.w	r2, r5, r2
    4eb6:	4313      	orrs	r3, r2
    4eb8:	604b      	str	r3, [r1, #4]
    4eba:	4602      	mov	r2, r0
    4ebc:	e7b1      	b.n	4e22 <_free_r+0xc6>
    4ebe:	f043 0201 	orr.w	r2, r3, #1
    4ec2:	614c      	str	r4, [r1, #20]
    4ec4:	610c      	str	r4, [r1, #16]
    4ec6:	60e5      	str	r5, [r4, #12]
    4ec8:	60a5      	str	r5, [r4, #8]
    4eca:	6062      	str	r2, [r4, #4]
    4ecc:	50e3      	str	r3, [r4, r3]
    4ece:	e788      	b.n	4de2 <_free_r+0x86>
    4ed0:	2a54      	cmp	r2, #84	; 0x54
    4ed2:	d806      	bhi.n	4ee2 <_free_r+0x186>
    4ed4:	0b1a      	lsrs	r2, r3, #12
    4ed6:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    4eda:	007f      	lsls	r7, r7, #1
    4edc:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    4ee0:	e78e      	b.n	4e00 <_free_r+0xa4>
    4ee2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    4ee6:	d806      	bhi.n	4ef6 <_free_r+0x19a>
    4ee8:	0bda      	lsrs	r2, r3, #15
    4eea:	f102 0778 	add.w	r7, r2, #120	; 0x78
    4eee:	007f      	lsls	r7, r7, #1
    4ef0:	f102 0577 	add.w	r5, r2, #119	; 0x77
    4ef4:	e784      	b.n	4e00 <_free_r+0xa4>
    4ef6:	f240 5054 	movw	r0, #1364	; 0x554
    4efa:	4282      	cmp	r2, r0
    4efc:	d806      	bhi.n	4f0c <_free_r+0x1b0>
    4efe:	0c9a      	lsrs	r2, r3, #18
    4f00:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    4f04:	007f      	lsls	r7, r7, #1
    4f06:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    4f0a:	e779      	b.n	4e00 <_free_r+0xa4>
    4f0c:	27fe      	movs	r7, #254	; 0xfe
    4f0e:	257e      	movs	r5, #126	; 0x7e
    4f10:	e776      	b.n	4e00 <_free_r+0xa4>
    4f12:	f043 0201 	orr.w	r2, r3, #1
    4f16:	6062      	str	r2, [r4, #4]
    4f18:	50e3      	str	r3, [r4, r3]
    4f1a:	e762      	b.n	4de2 <_free_r+0x86>
    4f1c:	20000b14 	.word	0x20000b14
    4f20:	20000b1c 	.word	0x20000b1c
    4f24:	20000f1c 	.word	0x20000f1c
    4f28:	20001cd4 	.word	0x20001cd4
    4f2c:	00000000 	.word	0x00000000

00004f30 <___init_veneer>:
    4f30:	f85f f000 	ldr.w	pc, [pc]	; 4f34 <___init_veneer+0x4>
    4f34:	60001aa9 	.word	0x60001aa9
	...

Disassembly of section .fini:

00004f40 <_fini>:
    4f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f42:	bf00      	nop
