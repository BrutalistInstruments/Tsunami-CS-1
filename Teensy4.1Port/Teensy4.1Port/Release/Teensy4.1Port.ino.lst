
C:\Users\OurBl\AppData\Local\Temp\VMBuilds\Teensy4.1Port\teensy41\Release/Teensy4.1Port.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 80 00     ................
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 d8 7a 00 00 00 00 00 00                 ...`.z......

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b77      	ldr	r3, [pc, #476]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a77      	ldr	r2, [pc, #476]	; (60001218 <ResetHandler+0x1e4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4877      	ldr	r0, [pc, #476]	; (6000121c <ResetHandler+0x1e8>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a77      	ldr	r2, [pc, #476]	; (60001220 <ResetHandler+0x1ec>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a76      	ldr	r2, [pc, #472]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4976      	ldr	r1, [pc, #472]	; (60001228 <ResetHandler+0x1f4>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b74      	ldr	r3, [pc, #464]	; (6000122c <ResetHandler+0x1f8>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6d      	ldr	r2, [pc, #436]	; (60001230 <ResetHandler+0x1fc>)
6000107c:	496d      	ldr	r1, [pc, #436]	; (60001234 <ResetHandler+0x200>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6d      	ldr	r3, [pc, #436]	; (60001238 <ResetHandler+0x204>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a66      	ldr	r2, [pc, #408]	; (6000123c <ResetHandler+0x208>)
600010a4:	4b66      	ldr	r3, [pc, #408]	; (60001240 <ResetHandler+0x20c>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	4299      	cmp	r1, r3
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a60      	ldr	r2, [pc, #384]	; (60001244 <ResetHandler+0x210>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5f      	ldr	r3, [pc, #380]	; (60001248 <ResetHandler+0x214>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5e      	ldr	r2, [pc, #376]	; (6000124c <ResetHandler+0x218>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	428b      	cmp	r3, r1
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5d      	ldr	r3, [pc, #372]	; (60001250 <ResetHandler+0x21c>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5d      	ldr	r2, [pc, #372]	; (60001254 <ResetHandler+0x220>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5b      	ldr	r4, [pc, #364]	; (60001258 <ResetHandler+0x224>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5b      	ldr	r6, [pc, #364]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 6000129c <ResetHandler+0x268>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 600012a0 <ResetHandler+0x26c>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 600012a4 <ResetHandler+0x270>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b57      	ldr	r3, [pc, #348]	; (60001260 <ResetHandler+0x22c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4943      	ldr	r1, [pc, #268]	; (60001214 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8b5 	bl	600012a8 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a49      	ldr	r2, [pc, #292]	; (60001264 <ResetHandler+0x230>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b49      	ldr	r3, [pc, #292]	; (60001268 <ResetHandler+0x234>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4949      	ldr	r1, [pc, #292]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4946      	ldr	r1, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a47      	ldr	r2, [pc, #284]	; (60001274 <ResetHandler+0x240>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4847      	ldr	r0, [pc, #284]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a46      	ldr	r2, [pc, #280]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4845      	ldr	r0, [pc, #276]	; (60001280 <ResetHandler+0x24c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4944      	ldr	r1, [pc, #272]	; (60001284 <ResetHandler+0x250>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 face 	bl	6000171c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	4840      	ldr	r0, [pc, #256]	; (60001288 <ResetHandler+0x254>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fc99 	bl	60001ac8 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a3a      	ldr	r2, [pc, #232]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b3a      	ldr	r3, [pc, #232]	; (60001290 <ResetHandler+0x25c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4933      	ldr	r1, [pc, #204]	; (60001294 <ResetHandler+0x260>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2e      	ldr	r2, [pc, #184]	; (60001290 <ResetHandler+0x25c>)
600011d6:	4c30      	ldr	r4, [pc, #192]	; (60001298 <ResetHandler+0x264>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
600011e0:	f000 f8de 	bl	600013a0 <configure_external_ram>
#endif
	startup_early_hook();
600011e4:	f000 fc68 	bl	60001ab8 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e8:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011ea:	2b13      	cmp	r3, #19
600011ec:	d9fc      	bls.n	600011e8 <ResetHandler+0x1b4>
	usb_init();
600011ee:	f000 fb55 	bl	6000189c <usb_init>
	analog_init();
600011f2:	f000 fbc9 	bl	60001988 <analog_init>
	pwm_init();
600011f6:	f000 fc6b 	bl	60001ad0 <__pwm_init_veneer>
	tempmon_init();
600011fa:	f000 fac1 	bl	60001780 <tempmon_init>

	startup_late_hook();
600011fe:	f000 fc5f 	bl	60001ac0 <__startup_late_hook_veneer>
60001202:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001204:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001208:	d3fb      	bcc.n	60001202 <ResetHandler+0x1ce>
	//printf("before C++ constructors\n");
	__libc_init_array();
6000120a:	f000 fc65 	bl	60001ad8 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120e:	f000 fc6f 	bl	60001af0 <__main_veneer>
60001212:	e7fe      	b.n	60001212 <ResetHandler+0x1de>
60001214:	400ac000 	.word	0x400ac000
60001218:	aaaaaaab 	.word	0xaaaaaaab
6000121c:	00200007 	.word	0x00200007
60001220:	20078000 	.word	0x20078000
60001224:	00000000 	.word	0x00000000
60001228:	60001b20 	.word	0x60001b20
6000122c:	00005088 	.word	0x00005088
60001230:	20000000 	.word	0x20000000
60001234:	60006bac 	.word	0x60006bac
60001238:	20000f30 	.word	0x20000f30
6000123c:	20000f30 	.word	0x20000f30
60001240:	200042c0 	.word	0x200042c0
60001244:	e000ed88 	.word	0xe000ed88
60001248:	20001ffc 	.word	0x20001ffc
6000124c:	00002d11 	.word	0x00002d11
60001250:	e000e400 	.word	0xe000e400
60001254:	e000e4a0 	.word	0xe000e4a0
60001258:	400d8000 	.word	0x400d8000
6000125c:	400fc000 	.word	0x400fc000
60001260:	e000ed08 	.word	0xe000ed08
60001264:	e000e014 	.word	0xe000e014
60001268:	e000e018 	.word	0xe000e018
6000126c:	00003d41 	.word	0x00003d41
60001270:	e000edfc 	.word	0xe000edfc
60001274:	20200000 	.word	0x20200000
60001278:	00003ded 	.word	0x00003ded
6000127c:	e0001000 	.word	0xe0001000
60001280:	e0001004 	.word	0xe0001004
60001284:	20001a54 	.word	0x20001a54
60001288:	23c34600 	.word	0x23c34600
6000128c:	40084000 	.word	0x40084000
60001290:	400d4000 	.word	0x400d4000
60001294:	56c00000 	.word	0x56c00000
60001298:	20001a5c 	.word	0x20001a5c
6000129c:	20002000 	.word	0x20002000
600012a0:	2018101b 	.word	0x2018101b
600012a4:	13110d0c 	.word	0x13110d0c

600012a8 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012aa:	4a28      	ldr	r2, [pc, #160]	; (6000134c <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012ac:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012ae:	4b28      	ldr	r3, [pc, #160]	; (60001350 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012b0:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b4:	4c27      	ldr	r4, [pc, #156]	; (60001354 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012b6:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012b8:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 60001394 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012bc:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012be:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012c0:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012c2:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012c6:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012ca:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012cc:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 60001398 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d0:	4f21      	ldr	r7, [pc, #132]	; (60001358 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012d2:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012d6:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d8:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012da:	4e20      	ldr	r6, [pc, #128]	; (6000135c <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012dc:	4f20      	ldr	r7, [pc, #128]	; (60001360 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012de:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e0:	4920      	ldr	r1, [pc, #128]	; (60001364 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012e2:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e4:	4e20      	ldr	r6, [pc, #128]	; (60001368 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e6:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ea:	4f20      	ldr	r7, [pc, #128]	; (6000136c <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012ec:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ee:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f0:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f4:	4e1e      	ldr	r6, [pc, #120]	; (60001370 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012f6:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f8:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012fa:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600012fc:	f8df e09c 	ldr.w	lr, [pc, #156]	; 6000139c <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001300:	4e1c      	ldr	r6, [pc, #112]	; (60001374 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001302:	491d      	ldr	r1, [pc, #116]	; (60001378 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001304:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001308:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000130a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000130c:	4f1b      	ldr	r7, [pc, #108]	; (6000137c <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000130e:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001310:	4e1b      	ldr	r6, [pc, #108]	; (60001380 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001312:	491c      	ldr	r1, [pc, #112]	; (60001384 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001314:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001316:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001318:	4f1b      	ldr	r7, [pc, #108]	; (60001388 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131a:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131c:	4e1b      	ldr	r6, [pc, #108]	; (6000138c <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000131e:	491c      	ldr	r1, [pc, #112]	; (60001390 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001320:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001322:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001324:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001326:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001328:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000132c:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001330:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001334:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001338:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000133c:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001340:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001344:	f842 3c88 	str.w	r3, [r2, #-136]
60001348:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000134a:	bf00      	nop
6000134c:	e000ed9c 	.word	0xe000ed9c
60001350:	e000eda0 	.word	0xe000eda0
60001354:	e000ed94 	.word	0xe000ed94
60001358:	00100009 	.word	0x00100009
6000135c:	00200013 	.word	0x00200013
60001360:	07020021 	.word	0x07020021
60001364:	200042c0 	.word	0x200042c0
60001368:	20000014 	.word	0x20000014
6000136c:	13080025 	.word	0x13080025
60001370:	10000009 	.word	0x10000009
60001374:	40000017 	.word	0x40000017
60001378:	13100033 	.word	0x13100033
6000137c:	60000018 	.word	0x60000018
60001380:	070b002f 	.word	0x070b002f
60001384:	70000019 	.word	0x70000019
60001388:	170b0037 	.word	0x170b0037
6000138c:	7000001a 	.word	0x7000001a
60001390:	130b002f 	.word	0x130b002f
60001394:	1000003f 	.word	0x1000003f
60001398:	03080025 	.word	0x03080025
6000139c:	20200016 	.word	0x20200016

600013a0 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
600013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013a2:	4bb8      	ldr	r3, [pc, #736]	; (60001684 <configure_external_ram+0x2e4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600013a4:	2218      	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013a6:	4eb8      	ldr	r6, [pc, #736]	; (60001688 <configure_external_ram+0x2e8>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013a8:	2001      	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013aa:	49b8      	ldr	r1, [pc, #736]	; (6000168c <configure_external_ram+0x2ec>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600013ac:	f248 7e0c 	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600013b0:	4db7      	ldr	r5, [pc, #732]	; (60001690 <configure_external_ram+0x2f0>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600013b2:	f04f 37ff 	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600013b6:	4cb7      	ldr	r4, [pc, #732]	; (60001694 <configure_external_ram+0x2f4>)
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013b8:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600013bc:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600013c0:	2500      	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013c2:	f8c3 1264 	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600013c6:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600013ca:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013ce:	f8c3 626c 	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013d2:	49b1      	ldr	r1, [pc, #708]	; (60001698 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013d4:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013d8:	f8c3 6274 	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013dc:	f8c3 6278 	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600013e0:	4eae      	ldr	r6, [pc, #696]	; (6000169c <configure_external_ram+0x2fc>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600013e2:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600013e4:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600013e6:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600013e8:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600013ea:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600013ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600013f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600013f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600013f8:	f240 6205 	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013fc:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001400:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001404:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001408:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000140c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001410:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001414:	4629      	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001416:	69b3      	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001418:	48a1      	ldr	r0, [pc, #644]	; (600016a0 <configure_external_ram+0x300>)
6000141a:	4018      	ands	r0, r3
6000141c:	4ba1      	ldr	r3, [pc, #644]	; (600016a4 <configure_external_ram+0x304>)
6000141e:	4303      	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001420:	48a1      	ldr	r0, [pc, #644]	; (600016a8 <configure_external_ram+0x308>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001422:	61b3      	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001424:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
60001428:	f043 030c 	orr.w	r3, r3, #12
6000142c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001430:	2602      	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001432:	6803      	ldr	r3, [r0, #0]
60001434:	4333      	orrs	r3, r6
60001436:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001438:	6803      	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000143a:	ea03 0e0e 	and.w	lr, r3, lr
6000143e:	4b9b      	ldr	r3, [pc, #620]	; (600016ac <configure_external_ram+0x30c>)
60001440:	ea4e 0303 	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001444:	f8df e29c 	ldr.w	lr, [pc, #668]	; 600016e4 <configure_external_ram+0x344>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001448:	6003      	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000144a:	4b99      	ldr	r3, [pc, #612]	; (600016b0 <configure_external_ram+0x310>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000144c:	6047      	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000144e:	f8de 7008 	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001452:	403b      	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001454:	4f97      	ldr	r7, [pc, #604]	; (600016b4 <configure_external_ram+0x314>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001456:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000145a:	6083      	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000145c:	68c3      	ldr	r3, [r0, #12]
6000145e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001462:	60c3      	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001464:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001466:	401f      	ands	r7, r3
60001468:	4b93      	ldr	r3, [pc, #588]	; (600016b8 <configure_external_ram+0x318>)
6000146a:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000146c:	4f91      	ldr	r7, [pc, #580]	; (600016b4 <configure_external_ram+0x314>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000146e:	6203      	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001470:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001472:	401f      	ands	r7, r3
60001474:	4b90      	ldr	r3, [pc, #576]	; (600016b8 <configure_external_ram+0x318>)
60001476:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001478:	4f90      	ldr	r7, [pc, #576]	; (600016bc <configure_external_ram+0x31c>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000147a:	6243      	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000147c:	6287      	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000147e:	62c7      	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001480:	f8de 30b8 	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001484:	4f8e      	ldr	r7, [pc, #568]	; (600016c0 <configure_external_ram+0x320>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001486:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000148a:	f043 0301 	orr.w	r3, r3, #1
6000148e:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001492:	f8de 30bc 	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001496:	f8df e234 	ldr.w	lr, [pc, #564]	; 600016cc <configure_external_ram+0x32c>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000149a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000149e:	f043 0301 	orr.w	r3, r3, #1
600014a2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
600014a6:	6105      	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600014a8:	6604      	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600014aa:	6707      	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014ac:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600014b0:	6644      	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600014b2:	6747      	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014b4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014b8:	6804      	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014ba:	4b82      	ldr	r3, [pc, #520]	; (600016c4 <configure_external_ram+0x324>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014bc:	f024 0402 	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014c0:	4a81      	ldr	r2, [pc, #516]	; (600016c8 <configure_external_ram+0x328>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014c2:	6004      	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014c4:	f8c0 e018 	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014c8:	61c6      	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014ca:	f843 1b04 	str.w	r1, [r3], #4
600014ce:	4293      	cmp	r3, r2
600014d0:	d1fb      	bne.n	600014ca <configure_external_ram+0x12a>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600014d2:	4b75      	ldr	r3, [pc, #468]	; (600016a8 <configure_external_ram+0x308>)
600014d4:	681a      	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600014d6:	4619      	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600014d8:	f042 0201 	orr.w	r2, r2, #1
600014dc:	601a      	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600014de:	680b      	ldr	r3, [r1, #0]
600014e0:	4a71      	ldr	r2, [pc, #452]	; (600016a8 <configure_external_ram+0x308>)
600014e2:	f013 0301 	ands.w	r3, r3, #1
600014e6:	d1fa      	bne.n	600014de <configure_external_ram+0x13e>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014e8:	4e78      	ldr	r6, [pc, #480]	; (600016cc <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014ea:	2502      	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600014ec:	f240 64f5 	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600014f0:	f240 4066 	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600014f4:	f240 4199 	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600014f8:	4f75      	ldr	r7, [pc, #468]	; (600016d0 <configure_external_ram+0x330>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014fa:	6196      	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600014fc:	f242 4601 	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001500:	61d5      	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001502:	f240 4535 	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001506:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000150a:	f242 2401 	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000150e:	f8c2 0210 	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001512:	2001      	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001514:	f8c2 1220 	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001518:	4611      	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
6000151a:	f8c2 7230 	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000151e:	f107 475a 	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001522:	f8c2 6234 	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001526:	f507 7713 	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000152a:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000152e:	4e69      	ldr	r6, [pc, #420]	; (600016d4 <configure_external_ram+0x334>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001530:	4d69      	ldr	r5, [pc, #420]	; (600016d8 <configure_external_ram+0x338>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001532:	f8c2 7250 	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001536:	f8c2 6254 	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000153a:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000153e:	f8c2 4264 	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001542:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001546:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000154a:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000154e:	694b      	ldr	r3, [r1, #20]
60001550:	4a55      	ldr	r2, [pc, #340]	; (600016a8 <configure_external_ram+0x308>)
60001552:	07dd      	lsls	r5, r3, #31
60001554:	d5fb      	bpl.n	6000154e <configure_external_ram+0x1ae>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001556:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001558:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000155a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000155e:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001560:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001562:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001566:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000156a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000156e:	694b      	ldr	r3, [r1, #20]
60001570:	4a4d      	ldr	r2, [pc, #308]	; (600016a8 <configure_external_ram+0x308>)
60001572:	07dc      	lsls	r4, r3, #31
60001574:	d5fb      	bpl.n	6000156e <configure_external_ram+0x1ce>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001576:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001578:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000157a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000157e:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001580:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001582:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001586:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000158a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000158e:	694b      	ldr	r3, [r1, #20]
60001590:	4a45      	ldr	r2, [pc, #276]	; (600016a8 <configure_external_ram+0x308>)
60001592:	07d8      	lsls	r0, r3, #31
60001594:	d5fb      	bpl.n	6000158e <configure_external_ram+0x1ee>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001596:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001598:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000159a:	4850      	ldr	r0, [pc, #320]	; (600016dc <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000159c:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000159e:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015a0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600015a4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015a8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015ac:	694b      	ldr	r3, [r1, #20]
600015ae:	4a3e      	ldr	r2, [pc, #248]	; (600016a8 <configure_external_ram+0x308>)
600015b0:	07db      	lsls	r3, r3, #31
600015b2:	d5fb      	bpl.n	600015ac <configure_external_ram+0x20c>
	uint32_t id = FLEXSPI2_RFDR0;
600015b4:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015b8:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600015bc:	2021      	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015be:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600015c0:	6150      	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015c2:	428b      	cmp	r3, r1
600015c4:	d000      	beq.n	600015c8 <configure_external_ram+0x228>
600015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015c8:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015ce:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015d0:	4611      	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015d2:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015d6:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015da:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015de:	694b      	ldr	r3, [r1, #20]
600015e0:	4a31      	ldr	r2, [pc, #196]	; (600016a8 <configure_external_ram+0x308>)
600015e2:	07df      	lsls	r7, r3, #31
600015e4:	d5fb      	bpl.n	600015de <configure_external_ram+0x23e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600015e6:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015e8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015ec:	2000      	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015ee:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600015f0:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015f2:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015f6:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015fa:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015fe:	694b      	ldr	r3, [r1, #20]
60001600:	4a29      	ldr	r2, [pc, #164]	; (600016a8 <configure_external_ram+0x308>)
60001602:	07de      	lsls	r6, r3, #31
60001604:	d5fb      	bpl.n	600015fe <configure_external_ram+0x25e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001606:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001608:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000160c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001610:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001612:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001614:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001618:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000161c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001620:	694b      	ldr	r3, [r1, #20]
60001622:	4a21      	ldr	r2, [pc, #132]	; (600016a8 <configure_external_ram+0x308>)
60001624:	07dd      	lsls	r5, r3, #31
60001626:	d5fb      	bpl.n	60001620 <configure_external_ram+0x280>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001628:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000162a:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000162e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001632:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001634:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001636:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000163a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000163e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001642:	694b      	ldr	r3, [r1, #20]
60001644:	4a18      	ldr	r2, [pc, #96]	; (600016a8 <configure_external_ram+0x308>)
60001646:	07dc      	lsls	r4, r3, #31
60001648:	d5fb      	bpl.n	60001642 <configure_external_ram+0x2a2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000164a:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000164c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001650:	4822      	ldr	r0, [pc, #136]	; (600016dc <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001652:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001654:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001656:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000165a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000165e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001662:	694b      	ldr	r3, [r1, #20]
60001664:	4a10      	ldr	r2, [pc, #64]	; (600016a8 <configure_external_ram+0x308>)
60001666:	07d8      	lsls	r0, r3, #31
60001668:	d5fb      	bpl.n	60001662 <configure_external_ram+0x2c2>
	uint32_t id = FLEXSPI2_RFDR0;
6000166a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
6000166e:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001672:	2021      	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001674:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001676:	6150      	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001678:	428b      	cmp	r3, r1
6000167a:	d035      	beq.n	600016e8 <configure_external_ram+0x348>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
6000167c:	4b18      	ldr	r3, [pc, #96]	; (600016e0 <configure_external_ram+0x340>)
6000167e:	2208      	movs	r2, #8
60001680:	701a      	strb	r2, [r3, #0]
60001682:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001684:	401f8000 	.word	0x401f8000
60001688:	000170f9 	.word	0x000170f9
6000168c:	0001b0f9 	.word	0x0001b0f9
60001690:	000110f9 	.word	0x000110f9
60001694:	000100f9 	.word	0x000100f9
60001698:	401f8400 	.word	0x401f8400
6000169c:	400fc000 	.word	0x400fc000
600016a0:	1ffffcff 	.word	0x1ffffcff
600016a4:	a0000300 	.word	0xa0000300
600016a8:	402a4000 	.word	0x402a4000
600016ac:	ffff0012 	.word	0xffff0012
600016b0:	00f737ff 	.word	0x00f737ff
600016b4:	7cf0ff00 	.word	0x7cf0ff00
600016b8:	80000040 	.word	0x80000040
600016bc:	830f00ff 	.word	0x830f00ff
600016c0:	00020063 	.word	0x00020063
600016c4:	402a4200 	.word	0x402a4200
600016c8:	402a4300 	.word	0x402a4300
600016cc:	5af05af0 	.word	0x5af05af0
600016d0:	3018049f 	.word	0x3018049f
600016d4:	26013206 	.word	0x26013206
600016d8:	0a180638 	.word	0x0a180638
600016dc:	00030004 	.word	0x00030004
600016e0:	20001a60 	.word	0x20001a60
600016e4:	402a8000 	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016e8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016ec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016f0:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016f2:	4611      	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016f4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016f8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016fc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001700:	694b      	ldr	r3, [r1, #20]
60001702:	4a04      	ldr	r2, [pc, #16]	; (60001714 <configure_external_ram+0x374>)
60001704:	07db      	lsls	r3, r3, #31
60001706:	d5fb      	bpl.n	60001700 <configure_external_ram+0x360>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001708:	2001      	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
6000170a:	4b03      	ldr	r3, [pc, #12]	; (60001718 <configure_external_ram+0x378>)
6000170c:	2110      	movs	r1, #16
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000170e:	6150      	str	r0, [r2, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001710:	7019      	strb	r1, [r3, #0]
60001712:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001714:	402a4000 	.word	0x402a4000
60001718:	20001a60 	.word	0x20001a60

6000171c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000171c:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000171e:	4a17      	ldr	r2, [pc, #92]	; (6000177c <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001720:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001722:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001726:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000172a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000172e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001732:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001736:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001738:	f013 0f02 	tst.w	r3, #2
6000173c:	d006      	beq.n	6000174c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000173e:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001740:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001742:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001744:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001746:	f013 0f02 	tst.w	r3, #2
6000174a:	d1f8      	bne.n	6000173e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000174c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001750:	d101      	bne.n	60001756 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001752:	6155      	str	r5, [r2, #20]
			continue;
60001754:	e7ef      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001756:	f413 5f80 	tst.w	r3, #4096	; 0x1000
6000175a:	d101      	bne.n	60001760 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000175c:	6156      	str	r6, [r2, #20]
			continue;
6000175e:	e7ea      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001760:	2b00      	cmp	r3, #0
60001762:	dae8      	bge.n	60001736 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001764:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001768:	d001      	beq.n	6000176e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000176a:	6191      	str	r1, [r2, #24]
			continue;
6000176c:	e7e3      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000176e:	065b      	lsls	r3, r3, #25
60001770:	d401      	bmi.n	60001776 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001772:	6157      	str	r7, [r2, #20]
			continue;
60001774:	e7df      	b.n	60001736 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001776:	bcf0      	pop	{r4, r5, r6, r7}
60001778:	4770      	bx	lr
6000177a:	bf00      	nop
6000177c:	400d8000 	.word	0x400d8000

60001780 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001780:	4a3b      	ldr	r2, [pc, #236]	; (60001870 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001782:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001786:	493b      	ldr	r1, [pc, #236]	; (60001874 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001788:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000178a:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
6000178c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000178e:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001792:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001794:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001898 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001798:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000179a:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000179e:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017a2:	4f35      	ldr	r7, [pc, #212]	; (60001878 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600017a4:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600017a6:	f3c3 240b 	ubfx	r4, r3, #8, #12
600017aa:	4e34      	ldr	r6, [pc, #208]	; (6000187c <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017ac:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017b0:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017b4:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600017b8:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017c0:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017c4:	ee07 4a90 	vmov	s15, r4
600017c8:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017cc:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600017ce:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017d2:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017d6:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017da:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017dc:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017e4:	4d26      	ldr	r5, [pc, #152]	; (60001880 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017e6:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600017ea:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017ec:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600017f4:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017f6:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600017fa:	4e22      	ldr	r6, [pc, #136]	; (60001884 <tempmon_init+0x104>)
600017fc:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017fe:	4922      	ldr	r1, [pc, #136]	; (60001888 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001800:	4c22      	ldr	r4, [pc, #136]	; (6000188c <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001802:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001806:	ee07 3a90 	vmov	s15, r3
6000180a:	4b21      	ldr	r3, [pc, #132]	; (60001890 <tempmon_init+0x110>)
6000180c:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
60001810:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001814:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001818:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000181c:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001820:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001824:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001828:	ee15 3a90 	vmov	r3, s11
6000182c:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001830:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001834:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001838:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000183a:	ea01 4105 	and.w	r1, r1, r5, lsl #16
6000183e:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001846:	430b      	orrs	r3, r1
60001848:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000184c:	ee17 3a90 	vmov	r3, s15
60001850:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
60001854:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001858:	430b      	orrs	r3, r1
6000185a:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000185e:	6813      	ldr	r3, [r2, #0]
60001860:	f043 0302 	orr.w	r3, r3, #2
60001864:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001866:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001868:	4b0a      	ldr	r3, [pc, #40]	; (60001894 <tempmon_init+0x114>)
6000186a:	2201      	movs	r2, #1
6000186c:	601a      	str	r2, [r3, #0]
6000186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001870:	400d8180 	.word	0x400d8180
60001874:	401f4400 	.word	0x401f4400
60001878:	20001a6c 	.word	0x20001a6c
6000187c:	20001a70 	.word	0x20001a70
60001880:	20001a68 	.word	0x20001a68
60001884:	20002000 	.word	0x20002000
60001888:	0fff0000 	.word	0x0fff0000
6000188c:	e000e440 	.word	0xe000e440
60001890:	00002ded 	.word	0x00002ded
60001894:	e000e108 	.word	0xe000e108
60001898:	20001a64 	.word	0x20001a64

6000189c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000189c:	4b30      	ldr	r3, [pc, #192]	; (60001960 <usb_init+0xc4>)
6000189e:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600018a2:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600018a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018a8:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600018ac:	f000 f91c 	bl	60001ae8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018b0:	492c      	ldr	r1, [pc, #176]	; (60001964 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018b2:	482d      	ldr	r0, [pc, #180]	; (60001968 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018b4:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018b8:	4c2c      	ldr	r4, [pc, #176]	; (6000196c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018ba:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018be:	4b2c      	ldr	r3, [pc, #176]	; (60001970 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018c0:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018c4:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018c8:	6822      	ldr	r2, [r4, #0]
600018ca:	4013      	ands	r3, r2
600018cc:	b91b      	cbnz	r3, 600018d6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600018ce:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
600018d2:	079a      	lsls	r2, r3, #30
600018d4:	d01a      	beq.n	6000190c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600018d6:	4b24      	ldr	r3, [pc, #144]	; (60001968 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600018d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600018dc:	4a23      	ldr	r2, [pc, #140]	; (6000196c <usb_init+0xd0>)
600018de:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600018e0:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600018e2:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
600018e6:	f041 0102 	orr.w	r1, r1, #2
600018ea:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600018ee:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600018f2:	079b      	lsls	r3, r3, #30
600018f4:	d4fb      	bmi.n	600018ee <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600018f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600018fa:	491e      	ldr	r1, [pc, #120]	; (60001974 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600018fc:	4b1b      	ldr	r3, [pc, #108]	; (6000196c <usb_init+0xd0>)
600018fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001902:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001904:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001906:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001908:	f000 f8f6 	bl	60001af8 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000190c:	4d1a      	ldr	r5, [pc, #104]	; (60001978 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000190e:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001910:	4b16      	ldr	r3, [pc, #88]	; (6000196c <usb_init+0xd0>)
60001912:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001916:	4c14      	ldr	r4, [pc, #80]	; (60001968 <usb_init+0xcc>)
60001918:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000191a:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000191c:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000191e:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001920:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001922:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001926:	f44f 7220 	mov.w	r2, #640	; 0x280
6000192a:	f000 f8d9 	bl	60001ae0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000192e:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001932:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001936:	f240 1343 	movw	r3, #323	; 0x143
6000193a:	4a10      	ldr	r2, [pc, #64]	; (6000197c <usb_init+0xe0>)
6000193c:	4910      	ldr	r1, [pc, #64]	; (60001980 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000193e:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001940:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001942:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
60001946:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000194a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000194e:	4a0d      	ldr	r2, [pc, #52]	; (60001984 <usb_init+0xe8>)
60001950:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001954:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001956:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001958:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
6000195c:	bd70      	pop	{r4, r5, r6, pc}
6000195e:	bf00      	nop
60001960:	400d8000 	.word	0x400d8000
60001964:	400fc000 	.word	0x400fc000
60001968:	402e0000 	.word	0x402e0000
6000196c:	400d9000 	.word	0x400d9000
60001970:	001e1c00 	.word	0x001e1c00
60001974:	e000e28c 	.word	0xe000e28c
60001978:	20004000 	.word	0x20004000
6000197c:	20002000 	.word	0x20002000
60001980:	00002e11 	.word	0x00002e11
60001984:	e000e10c 	.word	0xe000e10c

60001988 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001988:	4b11      	ldr	r3, [pc, #68]	; (600019d0 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000198a:	4912      	ldr	r1, [pc, #72]	; (600019d4 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000198c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000198e:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001990:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001994:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001996:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001998:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000199c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000199e:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600019a0:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600019a4:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019a6:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600019a8:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600019aa:	6c93      	ldr	r3, [r2, #72]	; 0x48
600019ac:	061b      	lsls	r3, r3, #24
600019ae:	d4fc      	bmi.n	600019aa <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019b0:	4b09      	ldr	r3, [pc, #36]	; (600019d8 <analog_init+0x50>)
600019b2:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019b6:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019b8:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019ba:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019bc:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019be:	6c93      	ldr	r3, [r2, #72]	; 0x48
600019c0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600019c4:	d1fb      	bne.n	600019be <analog_init+0x36>
	calibrating = 0;
600019c6:	4a05      	ldr	r2, [pc, #20]	; (600019dc <analog_init+0x54>)
600019c8:	7013      	strb	r3, [r2, #0]
}
600019ca:	bc30      	pop	{r4, r5}
600019cc:	4770      	bx	lr
600019ce:	bf00      	nop
600019d0:	400fc000 	.word	0x400fc000
600019d4:	400c4000 	.word	0x400c4000
600019d8:	400c8000 	.word	0x400c8000
600019dc:	20001ca6 	.word	0x20001ca6

600019e0 <usb_string_product_name_default>:
600019e0:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
600019f0:	00610069 0000006c                       i.a.l...

600019f8 <usb_string_manufacturer_name_default>:
600019f8:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001a08:	00690075 006f006e                       u.i.n.o.

60001a10 <string0>:
60001a10:	04090304                                ....

60001a14 <usb_config_descriptor_12>:
60001a14:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001a24:	24050001 05011000 01010124 06022404     ...$....$....$..
60001a34:	00062405 82050701 10001003 00010409     .$..............
60001a44:	00000a02 03050700 00004002 02840507     .........@......
60001a54:	00000040                                @...

60001a58 <usb_config_descriptor_480>:
60001a58:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001a68:	24050001 05011000 01010124 06022404     ...$....$....$..
60001a78:	00062405 82050701 05001003 00010409     .$..............
60001a88:	00000a02 03050700 00020002 02840507     ................
60001a98:	00000200                                ....

60001a9c <qualifier_descriptor>:
60001a9c:	0200060a 40000002 ff010001                       .......@..

60001aa6 <_serialEvent_default>:
60001aa6:	b5f8ff01                                         ..

60001aa8 <_init>:
60001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001aaa:	bf00      	nop
60001aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001aae:	bc08      	pop	{r3}
60001ab0:	469e      	mov	lr, r3
60001ab2:	4770      	bx	lr
60001ab4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

60001ab8 <__startup_early_hook_veneer>:
60001ab8:	f85f f000 	ldr.w	pc, [pc]	; 60001abc <__startup_early_hook_veneer+0x4>
60001abc:	00002d29 	.word	0x00002d29

60001ac0 <__startup_late_hook_veneer>:
60001ac0:	f85f f000 	ldr.w	pc, [pc]	; 60001ac4 <__startup_late_hook_veneer+0x4>
60001ac4:	00002d2d 	.word	0x00002d2d

60001ac8 <__set_arm_clock_veneer>:
60001ac8:	f85f f000 	ldr.w	pc, [pc]	; 60001acc <__set_arm_clock_veneer+0x4>
60001acc:	00002905 	.word	0x00002905

60001ad0 <__pwm_init_veneer>:
60001ad0:	f85f f000 	ldr.w	pc, [pc]	; 60001ad4 <__pwm_init_veneer+0x4>
60001ad4:	00004099 	.word	0x00004099

60001ad8 <____libc_init_array_veneer>:
60001ad8:	f85f f000 	ldr.w	pc, [pc]	; 60001adc <____libc_init_array_veneer+0x4>
60001adc:	000045c9 	.word	0x000045c9

60001ae0 <__memset_veneer>:
60001ae0:	f85f f000 	ldr.w	pc, [pc]	; 60001ae4 <__memset_veneer+0x4>
60001ae4:	00004ba9 	.word	0x00004ba9

60001ae8 <__usb_init_serialnumber_veneer>:
60001ae8:	f85f f000 	ldr.w	pc, [pc]	; 60001aec <__usb_init_serialnumber_veneer+0x4>
60001aec:	00003895 	.word	0x00003895

60001af0 <__main_veneer>:
60001af0:	f85f f000 	ldr.w	pc, [pc]	; 60001af4 <__main_veneer+0x4>
60001af4:	00003e0d 	.word	0x00003e0d

60001af8 <__delay_veneer>:
60001af8:	f85f f000 	ldr.w	pc, [pc]	; 60001afc <__delay_veneer+0x4>
60001afc:	00002bc5 	.word	0x00002bc5

60001b00 <__init_array_start>:
60001b00:	00000045 	.word	0x00000045
60001b04:	000001c1 	.word	0x000001c1
60001b08:	000021b5 	.word	0x000021b5
60001b0c:	000024ed 	.word	0x000024ed
60001b10:	00002755 	.word	0x00002755
60001b14:	000028ed 	.word	0x000028ed

60001b18 <__init_array_end>:
60001b18:	ffffffff 	.word	0xffffffff
60001b1c:	ffffffff 	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	.short	0xb933

    return tmeas;
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x17>)
      2a:	b113      	.short	0xb113
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1b>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	movs	r3, #1
      34:	bd107023 	.word	0xbd107023
      38:	0f30      	lsrs	r0, r6, #28
      3a:	2000      	movs	r0, #0
      3c:	0000      	movs	r0, r0
      3e:	0000      	movs	r0, r0
}
      40:	00005084 	.word	0x00005084

00000044 <frame_dummy>:
      44:	4b08      	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	b510      	.short	0xb510
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	2b00      	cmp	r3, #0
      5e:	d0fb      	beq.n	58 <frame_dummy+0x14>
      60:	4010e8bd 	.word	0x4010e8bd
      64:	4718      	bx	r3
      66:	bf00      	.short	0xbf00
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	0f34      	lsrs	r4, r6, #28
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2000      	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	5084      	str	r4, [r0, r2]
  ADC2_CFG = mode1;
      72:	0000      	movs	r0, r0
  
  if(num >= 4){
      74:	0f30      	lsrs	r0, r6, #28
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	movs	r0, #0
      78:	00000000 	.word	0x00000000

0000007c <std::_Function_base::_Base_manager<setup::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<setup::{lambda()#1}> const&, std::_Manager_operation)>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
      7c:	2a01      	cmp	r2, #1
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
      7e:	bf08      	.short	0xbf08
      80:	6001      	streq	r1, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
      82:	2000      	.short	0x2000
      84:	4770      	bx	lr
	while (1) {
		volatile uint32_t n;
		GPIO2_DR_SET = (1<<3); //digitalWrite(13, HIGH);
		for (n=0; n < 2000000/6; n++) ;
		GPIO2_DR_CLEAR = (1<<3); //digitalWrite(13, LOW);
		for (n=0; n < 1500000/6; n++) ;
      86:	bf00      	.short	0xbf00

00000088 <std::_Function_handler<void (), setup::{lambda()#1}>::_M_invoke(std::_Any_data const&)>:
void setup() {
	initBank(&currentPattern); //set bank to factory defaults
	initGlobals(&currentGlobals, 0); //set globals to factory defaults. both of these will change once the eeprom is implemented. 
	///for current testing, these will stay in here. 
	initPins();
	OLEDTimer.beginPeriodic([] {enableCycle(&currentGlobals); }, 10);
      88:	4801      	ldr	r0, [pc, #4]	; (90 <std::_Function_handler<void (), setup::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x8>)
      8a:	f000      	.short	0xf000
      8c:	baeb      	revsh	r3, r5
      8e:	bf00      	.short	0xbf00
      90:	0f4c      	lsrs	r4, r1, #29
      92:	2000      	movs	r0, #0

00000094 <setup>:
volatile Globals currentGlobals;
volatile Screen screenBank;
TeensyTimerTool::Timer OLEDTimer;


void setup() {
      94:	4842b5f0 	.word	0x4842b5f0
      98:	b08d      	sub	sp, #52	; 0x34
	initBank(&currentPattern); //set bank to factory defaults
      9a:	f000      	.short	0xf000
      9c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	initGlobals(&currentGlobals, 0); //set globals to factory defaults. both of these will change once the eeprom is implemented. 
      a0:	26004840 	.word	0x26004840
      a4:	f000 f988 	bl	3b8 <initGlobals(Globals volatile*, unsigned char)>
     public:
        Timer(TimerGenerator* gen = nullptr);

        inline errorCode beginPeriodic(callback_t cb, uint32_t period)
        {
            isPeriodic = true;
      a8:	f0004c3f 	.word	0xf0004c3f
	///for current testing, these will stay in here. 
	initPins();
      ac:	fc43 4b3f 	mcrr2	11, 3, r4, r3, cr15
      b0:	22022501 	.word	0x22022501
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
      b4:	9303      	str	r3, [sp, #12]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
      b6:	4669      	mov	r1, sp

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
      b8:	a8044b3d 	.word	0xa8044b3d
      bc:	7225      	strb	r5, [r4, #8]
      be:	9302      	.short	0x9302
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
      c0:	9606      	str	r6, [sp, #24]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
      c2:	f7ff      	.short	0xf7ff
      c4:	ffdb 9a03 	vmlsl.u16	<illegal reg q12.5>, d11, d3
	  _M_invoker = __x._M_invoker;
	  _M_manager = __x._M_manager;
      c8:	92079b02 	.word	0x92079b02
      cc:	9306      	str	r3, [sp, #24]
    template <typename T>
    errorCode BaseTimer::begin(callback_t callback, T p, bool start)
    {
        auto period = getPeriod(p);

        if (callback == nullptr) return postError(errorCode::callback);
      ce:	2b00      	.short	0x2b00
      d0:	d04d      	beq.n	16e <setup+0xda>
        if (isPeriodic && period == 0) return postError(errorCode::reload);

        if (timerChannel == nullptr)
      d2:	6865      	.short	0x6865
      d4:	2d00      	cmp	r5, #0
      d6:	d03b      	.short	0xd03b
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
        }

        errorCode result = timerChannel->begin(callback, period, isPeriodic);
      d8:	682a      	ldr	r2, [r5, #0]
      da:	6817      	.short	0x6817
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
      dc:	960a      	str	r6, [sp, #40]	; 0x28
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
      de:	ae08      	add	r6, sp, #32
      e0:	2202      	movs	r2, #2
      e2:	a904      	add	r1, sp, #16
      e4:	47984630 	.word	0x47984630
	  _M_invoker = __x._M_invoker;
      e8:	9a07      	ldr	r2, [sp, #28]
	  _M_manager = __x._M_manager;
      ea:	9b06      	.short	0x9b06
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
      ec:	920b      	str	r2, [sp, #44]	; 0x2c
	  _M_manager = __x._M_manager;
      ee:	930a      	.short	0x930a
      f0:	4628      	mov	r0, r5
      f2:	7a22      	.short	0x7a22
      f4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
      f8:	47b84631 	.word	0x47b84631

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
      fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      fe:	4605      	.short	0x4605
     100:	b11b      	cbz	r3, 10a <setup+0x76>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     102:	2203      	movs	r2, #3
     104:	46304631 	.word	0x46304631
     108:	4798      	blx	r3

        if (result == errorCode::OK)
     10a:	b1c5      	.short	0xb1c5
        {
            if (isPeriodic && start) timerChannel->start();
        }
        return postError(result);
     10c:	4628      	mov	r0, r5
     10e:	f002      	.short	0xf002
     110:	f9db 9b06 	ldr??.w	r9, [fp, #2822]	; 0xb06

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     114:	a904b11b 	.word	0xa904b11b
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     118:	2203      	movs	r2, #3
     11a:	4608      	.short	0x4608
     11c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     11e:	9b02      	.short	0x9b02
     120:	b11b      	cbz	r3, 12a <setup+0x96>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     122:	2203      	.short	0x2203
     124:	4669      	mov	r1, sp
     126:	4668      	.short	0x4668
     128:	4798      	blx	r3
	OLEDTimer.beginPeriodic([] {enableCycle(&currentGlobals); }, 10);
	initScreen(&currentGlobals);
     12a:	481e      	.short	0x481e
     12c:	f000 fc82 	bl	a34 <initScreen(Globals volatile*)>
	//outputS("Working Screen     ", 1, &currentGlobals);
	initMenu(&screenBank, &currentPattern, &currentGlobals);
     130:	491b4a1c 	.word	0x491b4a1c
     134:	481f      	ldr	r0, [pc, #124]	; (1b4 <setup+0x120>)
     136:	f000      	.short	0xf000
     138:	f9ab b00d 	vld1.8	{d11[0]}, [fp]!

}
     13c:	7a23bdf0 	.word	0x7a23bdf0

        errorCode result = timerChannel->begin(callback, period, isPeriodic);

        if (result == errorCode::OK)
        {
            if (isPeriodic && start) timerChannel->start();
     140:	4a19      	ldr	r2, [pc, #100]	; (1a8 <setup+0x114>)
     142:	2b00      	cmp	r3, #0
     144:	d0e2      	beq.n	10c <setup+0x78>
     146:	6850      	.short	0x6850
     148:	6803      	ldr	r3, [r0, #0]
     14a:	699b      	.short	0x699b
     14c:	4798      	blx	r3
     14e:	e7dd      	.short	0xe7dd
        if (callback == nullptr) return postError(errorCode::callback);
        if (isPeriodic && period == 0) return postError(errorCode::reload);

        if (timerChannel == nullptr)
        {
            if (timerGenerator != nullptr) // use timer passed in during construction
     150:	6826      	ldr	r6, [r4, #0]
     152:	b186      	.short	0xb186
            {
                timerChannel = timerGenerator();
     154:	47b0      	blx	r6
     156:	4605      	.short	0x4605
     158:	6060      	str	r0, [r4, #4]
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
     15a:	b1e0      	.short	0xb1e0
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
        }

        errorCode result = timerChannel->begin(callback, period, isPeriodic);
     15c:	6829      	ldr	r1, [r5, #0]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     15e:	2200      	.short	0x2200
     160:	9b06      	ldr	r3, [sp, #24]
     162:	680f      	.short	0x680f
     164:	920a      	str	r2, [sp, #40]	; 0x28
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     166:	2b00      	.short	0x2b00
     168:	d1b9      	bne.n	de <setup+0x4a>
     16a:	ae08      	.short	0xae08
     16c:	e7c0      	b.n	f0 <setup+0x5c>
    template <typename T>
    errorCode BaseTimer::begin(callback_t callback, T p, bool start)
    {
        auto period = getPeriod(p);

        if (callback == nullptr) return postError(errorCode::callback);
     16e:	2065      	.short	0x2065
     170:	f002 f9aa 	bl	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     174:	4f10e7cd 	.word	0x4f10e7cd
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
                {
                    timerChannel = timerPool[i]();
     178:	f857 3f04 	ldr.w	r3, [r7, #4]!
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
     17c:	47983601 	.word	0x47983601
                {
                    timerChannel = timerPool[i]();
     180:	4605      	mov	r5, r0
     182:	6060      	.short	0x6060
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
     184:	b908      	cbnz	r0, 18a <setup+0xf6>
     186:	2e07      	.short	0x2e07
     188:	d1f6      	bne.n	178 <setup+0xe4>
                {
                    timerChannel = timerPool[i]();
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
     18a:	2d00      	cmp	r5, #0
     18c:	d1e6      	bne.n	15c <setup+0xc8>
     18e:	2067      	movs	r0, #103	; 0x67
     190:	f002 f99a 	bl	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     194:	e7bd      	b.n	112 <setup+0x7e>
        if (timerChannel == nullptr)
        {
            if (timerGenerator != nullptr) // use timer passed in during construction
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
     196:	2068      	movs	r0, #104	; 0x68
     198:	f002 f996 	bl	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     19c:	e7b9      	b.n	112 <setup+0x7e>
     19e:	bf00      	.short	0xbf00
     1a0:	1274      	asrs	r4, r6, #9
     1a2:	2000      	movs	r0, #0
     1a4:	20000f4c 	.word	0x20000f4c
     1a8:	1248      	asrs	r0, r1, #9
     1aa:	2000      	.short	0x2000
     1ac:	0089      	lsls	r1, r1, #2
     1ae:	0000      	.short	0x0000
     1b0:	007d      	lsls	r5, r7, #1
     1b2:	0000      	.short	0x0000
     1b4:	13f0      	asrs	r0, r6, #15
     1b6:	2000      	.short	0x2000
     1b8:	1254      	asrs	r4, r2, #9
     1ba:	2000      	movs	r0, #0

000001bc <loop>:

// the loop function runs over and over again until power down or reset
void loop() {
     1bc:	bf004770 	.word	0xbf004770

000001c0 <_GLOBAL__sub_I_currentPattern>:
	


     1c0:	b5f0      	push	{r4, r5, r6, r7, lr}

#if defined(ARDUINO_TEENSY40)
    TimerGenerator* const timerPool[] = {GPT1, GPT2, TMR1, TMR2, TMR3, TMR4, TCK};

#elif defined(ARDUINO_TEENSY41)
    TimerGenerator* const timerPool[] = {GPT1, GPT2, TMR1, TMR2, TMR3, TMR4, TCK};
     1c2:	4b0f      	.short	0x4b0f
#include <teensyTimerTool.h>
//initialize our global structs. 
volatile Pattern currentPattern;
volatile Globals currentGlobals;
volatile Screen screenBank;
TeensyTimerTool::Timer OLEDTimer;
     1c4:	2100      	movs	r1, #0
     1c6:	480f      	.short	0x480f
     1c8:	4f0f      	ldr	r7, [pc, #60]	; (208 <_GLOBAL__sub_I_currentPattern+0x48>)
     1ca:	4e10      	.short	0x4e10
     1cc:	4d10      	ldr	r5, [pc, #64]	; (210 <_GLOBAL__sub_I_currentPattern+0x50>)
     1ce:	4c11      	.short	0x4c11
     1d0:	4a11      	ldr	r2, [pc, #68]	; (218 <_GLOBAL__sub_I_currentPattern+0x58>)
     1d2:	f8d3      	.short	0xf8d3
     1d4:	e000      	b.n	1d8 <_GLOBAL__sub_I_currentPattern+0x18>
     1d6:	6800      	.short	0x6800
     1d8:	4b10      	ldr	r3, [pc, #64]	; (21c <_GLOBAL__sub_I_currentPattern+0x5c>)
     1da:	683f      	.short	0x683f
     1dc:	6836      	ldr	r6, [r6, #0]
     1de:	682d      	.short	0x682d
     1e0:	6824      	ldr	r4, [r4, #0]
     1e2:	6812      	.short	0x6812
     1e4:	f8c3 e000 	str.w	lr, [r3]
     1e8:	609f6058 	.word	0x609f6058
     1ec:	60de      	str	r6, [r3, #12]
     1ee:	611d      	.short	0x611d
     1f0:	615c      	str	r4, [r3, #20]
     1f2:	480b      	ldr	r0, [pc, #44]	; (220 <_GLOBAL__sub_I_currentPattern+0x60>)
     1f4:	619a      	str	r2, [r3, #24]
// the loop function runs over and over again until power down or reset
void loop() {
	


     1f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#include <teensyTimerTool.h>
//initialize our global structs. 
volatile Pattern currentPattern;
volatile Globals currentGlobals;
volatile Screen screenBank;
TeensyTimerTool::Timer OLEDTimer;
     1fa:	f002      	.short	0xf002
     1fc:	b953      	cbnz	r3, 214 <_GLOBAL__sub_I_currentPattern+0x54>
     1fe:	bf00      	.short	0xbf00
     200:	0224      	lsls	r4, r4, #8
     202:	2000      	.short	0x2000
     204:	0228      	lsls	r0, r5, #8
     206:	2000      	.short	0x2000
     208:	022c      	lsls	r4, r5, #8
     20a:	2000      	.short	0x2000
     20c:	0230      	lsls	r0, r6, #8
     20e:	2000      	.short	0x2000
     210:	0234      	lsls	r4, r6, #8
     212:	2000      	movs	r0, #0
     214:	023c      	lsls	r4, r7, #8
     216:	2000      	movs	r0, #0
     218:	0238      	lsls	r0, r7, #8
     21a:	2000      	movs	r0, #0
     21c:	1258      	asrs	r0, r3, #9
     21e:	2000      	.short	0x2000
     220:	1248      	asrs	r0, r1, #9
     222:	2000      	.short	0x2000

00000224 <initBank(Pattern volatile*)>:
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
		currentInitPattern->trackPlayMode[i] = 0x01;
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     224:	f04f2200 	.word	0xf04f2200

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     228:	0c02      	lsrs	r2, r0, #16
     22a:	2107      	.short	0x2107
		currentInitPattern->trackPlayMode[i] = 0x01;
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     22c:	4613      	mov	r3, r2
// 

#include "globalVariables.h"

void initBank(volatile Pattern* currentInitPattern)
{
     22e:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     230:	24032501 	.word	0x24032501
     234:	f04f 0e04 	mov.w	lr, #4
     238:	26062705 	.word	0x26062705
     23c:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
		currentInitPattern->trackPlayMode[i] = 0x01;
     240:	5088f880 	.word	0x5088f880
		currentInitPattern->envelopeType[i] = 3;
     244:	f880 40eb 	strb.w	r4, [r0, #235]	; 0xeb
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     248:	f880 20db 	strb.w	r2, [r0, #219]	; 0xdb
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     24c:	f880 20cb 	strb.w	r2, [r0, #203]	; 0xcb

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     250:	f880 c0a9 	strb.w	ip, [r0, #169]	; 0xa9
     254:	f04f 0c08 	mov.w	ip, #8
		currentInitPattern->trackPlayMode[i] = 0x01;
     258:	f880 5089 	strb.w	r5, [r0, #137]	; 0x89
		currentInitPattern->envelopeType[i] = 3;
     25c:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     260:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     264:	f880 20cc 	strb.w	r2, [r0, #204]	; 0xcc

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     268:	f880 40aa 	strb.w	r4, [r0, #170]	; 0xaa
		currentInitPattern->trackPlayMode[i] = 0x01;
     26c:	f880 508a 	strb.w	r5, [r0, #138]	; 0x8a
		currentInitPattern->envelopeType[i] = 3;
     270:	f880 40ed 	strb.w	r4, [r0, #237]	; 0xed
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     274:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     278:	f880 20cd 	strb.w	r2, [r0, #205]	; 0xcd

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     27c:	f880 e0ab 	strb.w	lr, [r0, #171]	; 0xab
     280:	f04f 0e09 	mov.w	lr, #9
		currentInitPattern->trackPlayMode[i] = 0x01;
     284:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
		currentInitPattern->envelopeType[i] = 3;
     288:	f880 40ee 	strb.w	r4, [r0, #238]	; 0xee
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     28c:	f880 20de 	strb.w	r2, [r0, #222]	; 0xde
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     290:	f880 20ce 	strb.w	r2, [r0, #206]	; 0xce

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     294:	f880 70ac 	strb.w	r7, [r0, #172]	; 0xac
     298:	270a      	movs	r7, #10
		currentInitPattern->trackPlayMode[i] = 0x01;
     29a:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
		currentInitPattern->envelopeType[i] = 3;
     29e:	f880 40ef 	strb.w	r4, [r0, #239]	; 0xef
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     2a2:	f880 20df 	strb.w	r2, [r0, #223]	; 0xdf
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     2a6:	f880 20cf 	strb.w	r2, [r0, #207]	; 0xcf

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     2aa:	f880 60ad 	strb.w	r6, [r0, #173]	; 0xad
     2ae:	260b      	movs	r6, #11
		currentInitPattern->trackPlayMode[i] = 0x01;
     2b0:	f880 508d 	strb.w	r5, [r0, #141]	; 0x8d
		currentInitPattern->envelopeType[i] = 3;
     2b4:	f880 40f0 	strb.w	r4, [r0, #240]	; 0xf0
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     2b8:	f880 20e0 	strb.w	r2, [r0, #224]	; 0xe0
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     2bc:	f880 20d0 	strb.w	r2, [r0, #208]	; 0xd0

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     2c0:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
     2c4:	210c      	movs	r1, #12
		currentInitPattern->trackPlayMode[i] = 0x01;
     2c6:	f880 508e 	strb.w	r5, [r0, #142]	; 0x8e
		currentInitPattern->envelopeType[i] = 3;
     2ca:	f880 40f1 	strb.w	r4, [r0, #241]	; 0xf1
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     2ce:	f880 20e1 	strb.w	r2, [r0, #225]	; 0xe1
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     2d2:	f880 20d1 	strb.w	r2, [r0, #209]	; 0xd1

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     2d6:	f880 c0af 	strb.w	ip, [r0, #175]	; 0xaf
     2da:	f04f 0c0d 	mov.w	ip, #13
		currentInitPattern->trackPlayMode[i] = 0x01;
     2de:	f880 508f 	strb.w	r5, [r0, #143]	; 0x8f
		currentInitPattern->envelopeType[i] = 3;
     2e2:	f880 40f2 	strb.w	r4, [r0, #242]	; 0xf2
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     2e6:	f880 20e2 	strb.w	r2, [r0, #226]	; 0xe2
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     2ea:	f880 20d2 	strb.w	r2, [r0, #210]	; 0xd2

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     2ee:	f880 e0b0 	strb.w	lr, [r0, #176]	; 0xb0
     2f2:	f04f 0e0e 	mov.w	lr, #14
		currentInitPattern->trackPlayMode[i] = 0x01;
     2f6:	f880 5090 	strb.w	r5, [r0, #144]	; 0x90
		currentInitPattern->envelopeType[i] = 3;
     2fa:	f880 40f3 	strb.w	r4, [r0, #243]	; 0xf3
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     2fe:	f880 20e3 	strb.w	r2, [r0, #227]	; 0xe3
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     302:	f880 20d3 	strb.w	r2, [r0, #211]	; 0xd3

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     306:	f880 70b1 	strb.w	r7, [r0, #177]	; 0xb1
     30a:	270f      	movs	r7, #15
		currentInitPattern->trackPlayMode[i] = 0x01;
     30c:	f880 5091 	strb.w	r5, [r0, #145]	; 0x91
		currentInitPattern->envelopeType[i] = 3;
     310:	f880 40f4 	strb.w	r4, [r0, #244]	; 0xf4
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     314:	f880 20e4 	strb.w	r2, [r0, #228]	; 0xe4
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     318:	f880 20d4 	strb.w	r2, [r0, #212]	; 0xd4

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     31c:	f880 60b2 	strb.w	r6, [r0, #178]	; 0xb2
     320:	2610      	movs	r6, #16
		currentInitPattern->trackPlayMode[i] = 0x01;
     322:	f880 5092 	strb.w	r5, [r0, #146]	; 0x92
		currentInitPattern->envelopeType[i] = 3;
     326:	f880 40f5 	strb.w	r4, [r0, #245]	; 0xf5
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     32a:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     32e:	f880 20d5 	strb.w	r2, [r0, #213]	; 0xd5

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     332:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
		currentInitPattern->trackSustainTimeMSB[i] = 0;
	}

	for (uint8_t j = 0; j < 64; j++)
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     336:	4611      	mov	r1, r2
void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
		currentInitPattern->trackPlayMode[i] = 0x01;
     338:	f880 5093 	strb.w	r5, [r0, #147]	; 0x93
		currentInitPattern->envelopeType[i] = 3;
     33c:	f880 40f6 	strb.w	r4, [r0, #246]	; 0xf6
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     340:	f880 20e6 	strb.w	r2, [r0, #230]	; 0xe6
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     344:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     348:	f880 c0b4 	strb.w	ip, [r0, #180]	; 0xb4
		currentInitPattern->trackPlayMode[i] = 0x01;
     34c:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
		currentInitPattern->envelopeType[i] = 3;
     350:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     354:	f880 20e7 	strb.w	r2, [r0, #231]	; 0xe7
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     358:	f880 20d7 	strb.w	r2, [r0, #215]	; 0xd7

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     35c:	f880 e0b5 	strb.w	lr, [r0, #181]	; 0xb5
		currentInitPattern->trackPlayMode[i] = 0x01;
     360:	f880 5095 	strb.w	r5, [r0, #149]	; 0x95
		currentInitPattern->envelopeType[i] = 3;
     364:	f880 40f8 	strb.w	r4, [r0, #248]	; 0xf8
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     368:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     36c:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     370:	f880 70b6 	strb.w	r7, [r0, #182]	; 0xb6
		currentInitPattern->trackPlayMode[i] = 0x01;
     374:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
		currentInitPattern->envelopeType[i] = 3;
     378:	f880 40f9 	strb.w	r4, [r0, #249]	; 0xf9
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     37c:	f880 20e9 	strb.w	r2, [r0, #233]	; 0xe9
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     380:	f880 20d9 	strb.w	r2, [r0, #217]	; 0xd9

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     384:	f880 60b7 	strb.w	r6, [r0, #183]	; 0xb7
		currentInitPattern->trackPlayMode[i] = 0x01;
     388:	f880 5097 	strb.w	r5, [r0, #151]	; 0x97
		currentInitPattern->envelopeType[i] = 3;
     38c:	f880 40fa 	strb.w	r4, [r0, #250]	; 0xfa
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     390:	f880 20ea 	strb.w	r2, [r0, #234]	; 0xea
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     394:	f880 20da 	strb.w	r2, [r0, #218]	; 0xda
	}

	for (uint8_t j = 0; j < 64; j++)
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     398:	f103 027c 	add.w	r2, r3, #124	; 0x7c
     39c:	3301      	adds	r3, #1
     39e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
		currentInitPattern->trackSustainTimeMSB[i] = 0;
	}

	for (uint8_t j = 0; j < 64; j++)
     3a2:	2b40      	cmp	r3, #64	; 0x40
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     3a4:	8091      	strh	r1, [r2, #4]
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
		currentInitPattern->trackSustainTimeMSB[i] = 0;
	}

	for (uint8_t j = 0; j < 64; j++)
     3a6:	d1f7      	bne.n	398 <initBank(Pattern volatile*)+0x174>
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 

	}
	//We need to take these and put them in global. 
	currentInitPattern->patternBPM = 120;
     3a8:	2278      	movs	r2, #120	; 0x78
	currentInitPattern->numSteps = 16;
     3aa:	2310      	movs	r3, #16
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 

	}
	//We need to take these and put them in global. 
	currentInitPattern->patternBPM = 120;
     3ac:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
	currentInitPattern->numSteps = 16;
     3b0:	f880 30ca 	strb.w	r3, [r0, #202]	; 0xca
     3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3b6:	bf00      	nop

000003b8 <initGlobals(Globals volatile*, unsigned char)>:
}
void initGlobals(volatile Globals* currentGlobals, uint8_t factoryReset)
{
	currentGlobals->currentTrigButtons = 0; //current state of Trig buttons.
     3b8:	2300      	movs	r3, #0
	currentGlobals->currentTrigSequencer = 0;
	currentGlobals->currentTrigMidi = 0;
	currentGlobals->oledReadIndex = 0;
	currentGlobals->oledWriteIndex = 0;

	if (factoryReset == 1)
     3ba:	2901      	cmp	r1, #1
	currentInitPattern->patternBPM = 120;
	currentInitPattern->numSteps = 16;
}
void initGlobals(volatile Globals* currentGlobals, uint8_t factoryReset)
{
	currentGlobals->currentTrigButtons = 0; //current state of Trig buttons.
     3bc:	8003      	strh	r3, [r0, #0]
	currentGlobals->currentGPButtons = 0; //current state of GP buttons
     3be:	7083      	strb	r3, [r0, #2]
	currentGlobals->currentPatternNumber = 0; //current pattern, between 1 and 256
     3c0:	7203      	strb	r3, [r0, #8]
	currentGlobals->currentStep = 0; // current step in the sequencer
     3c2:	7243      	strb	r3, [r0, #9]
	currentGlobals->currentTrack = 0; //current track being edited
     3c4:	7283      	strb	r3, [r0, #10]
	currentGlobals->menuState = 0; //where the menu is currently
     3c6:	72c3      	strb	r3, [r0, #11]
	currentGlobals->playState = 0; //whether the sequencer is playing, stopped, or paused.
     3c8:	7303      	strb	r3, [r0, #12]
	currentGlobals->factoryReset = 0; //we may not need this in this struct, but good to have for now.
     3ca:	7343      	strb	r3, [r0, #13]
	currentGlobals->buttonSwitchFlag = 0; // could be rolled into value bits.
     3cc:	7383      	strb	r3, [r0, #14]
	currentGlobals->valueChangeFlag = 0; //bit 0 -> changes in encoders, bit 1-> changes in buttons, bit2 -> changes in knobs
     3ce:	73c3      	strb	r3, [r0, #15]
	currentGlobals->knobStatus = 0; //top 4 bits: knob type, bottom 4 bits: knob location.
     3d0:	7403      	strb	r3, [r0, #16]
	currentGlobals->releaseCounter = 0;
     3d2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	currentGlobals->lastGlobalTimer = 0;
     3d6:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
	currentGlobals->clockCounter = 0;
     3da:	f8a0 30f0 	strh.w	r3, [r0, #240]	; 0xf0
	currentGlobals->currentTrigSequencer = 0;
     3de:	8083      	strh	r3, [r0, #4]
	currentGlobals->currentTrigMidi = 0;
     3e0:	80c3      	strh	r3, [r0, #6]
	currentGlobals->oledReadIndex = 0;
     3e2:	f880 32fa 	strb.w	r3, [r0, #762]	; 0x2fa
	currentGlobals->oledWriteIndex = 0;
     3e6:	f880 32fb 	strb.w	r3, [r0, #763]	; 0x2fb

	if (factoryReset == 1)
     3ea:	d000      	beq.n	3ee <initGlobals(Globals volatile*, unsigned char)+0x36>
     3ec:	4770      	bx	lr
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
     3ee:	2224      	movs	r2, #36	; 0x24
	currentGlobals->oledReadIndex = 0;
	currentGlobals->oledWriteIndex = 0;

	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
     3f0:	7443      	strb	r3, [r0, #17]
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
     3f2:	212a      	movs	r1, #42	; 0x2a
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
     3f4:	232c      	movs	r3, #44	; 0x2c
	currentGlobals->oledWriteIndex = 0;

	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
     3f6:	7482      	strb	r2, [r0, #18]
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
     3f8:	222b      	movs	r2, #43	; 0x2b
	//We need to take these and put them in global. 
	currentInitPattern->patternBPM = 120;
	currentInitPattern->numSteps = 16;
}
void initGlobals(volatile Globals* currentGlobals, uint8_t factoryReset)
{
     3fa:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
     3fc:	2726      	movs	r7, #38	; 0x26
		currentGlobals->midiTrackNote[3] = 0x27;
     3fe:	2627      	movs	r6, #39	; 0x27
		currentGlobals->midiTrackNote[4] = 0x28;
     400:	2528      	movs	r5, #40	; 0x28
		currentGlobals->midiTrackNote[5] = 0x29;
     402:	2429      	movs	r4, #41	; 0x29

	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
     404:	f04f 0e25 	mov.w	lr, #37	; 0x25
     408:	f880 e013 	strb.w	lr, [r0, #19]
		currentGlobals->midiTrackNote[2] = 0x26;
     40c:	7507      	strb	r7, [r0, #20]
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
     40e:	272d      	movs	r7, #45	; 0x2d
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
     410:	7546      	strb	r6, [r0, #21]
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
     412:	262e      	movs	r6, #46	; 0x2e
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
     414:	7585      	strb	r5, [r0, #22]
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
     416:	252f      	movs	r5, #47	; 0x2f
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
     418:	75c4      	strb	r4, [r0, #23]
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
     41a:	2430      	movs	r4, #48	; 0x30
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
     41c:	7601      	strb	r1, [r0, #24]
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
		currentGlobals->midiTrackNote[13] = 0x31;
     41e:	2131      	movs	r1, #49	; 0x31
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
     420:	7642      	strb	r2, [r0, #25]
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
		currentGlobals->midiTrackNote[13] = 0x31;
		currentGlobals->midiTrackNote[14] = 0x32;
     422:	2232      	movs	r2, #50	; 0x32
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
     424:	7683      	strb	r3, [r0, #26]
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
		currentGlobals->midiTrackNote[13] = 0x31;
		currentGlobals->midiTrackNote[14] = 0x32;
		currentGlobals->midiTrackNote[15] = 0x33;
     426:	2333      	movs	r3, #51	; 0x33
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
     428:	76c7      	strb	r7, [r0, #27]
		currentGlobals->midiTrackNote[10] = 0x2e;
     42a:	7706      	strb	r6, [r0, #28]
		currentGlobals->midiTrackNote[11] = 0x2f;
     42c:	7745      	strb	r5, [r0, #29]
		currentGlobals->midiTrackNote[12] = 0x30;
     42e:	7784      	strb	r4, [r0, #30]
		currentGlobals->midiTrackNote[13] = 0x31;
     430:	77c1      	strb	r1, [r0, #31]
		currentGlobals->midiTrackNote[14] = 0x32;
     432:	f880 2020 	strb.w	r2, [r0, #32]
		currentGlobals->midiTrackNote[15] = 0x33;
     436:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
     43a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000043c <initArrays(char volatile (*) [21], int, char*)>:
	}
}

void initArrays(volatile char myArray[9][21], int stringNumber, char* myString)
{
     43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     43e:	4606      	mov	r6, r0
	uint8_t lengthOfString = strlen(myString);
     440:	4610      	mov	r0, r2
		currentGlobals->midiTrackNote[15] = 0x33;
	}
}

void initArrays(volatile char myArray[9][21], int stringNumber, char* myString)
{
     442:	460f      	mov	r7, r1
     444:	4614      	mov	r4, r2
	uint8_t lengthOfString = strlen(myString);
     446:	f004 fc1b 	bl	4c80 <strlen>
     44a:	b2c0      	uxtb	r0, r0
	uint8_t charLeft = 20 - lengthOfString;
     44c:	f1c0 0114 	rsb	r1, r0, #20
     450:	b2c9      	uxtb	r1, r1
	uint8_t currentIndex = 0;
	for (currentIndex; currentIndex < lengthOfString; currentIndex++)
     452:	b168      	cbz	r0, 470 <initArrays(char volatile (*) [21], int, char*)+0x34>
     454:	eb07 0547 	add.w	r5, r7, r7, lsl #1
     458:	1e62      	subs	r2, r4, #1
     45a:	2300      	movs	r3, #0
     45c:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
     460:	4435      	add	r5, r6
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     462:	f812 4f01 	ldrb.w	r4, [r2, #1]!
     466:	54ec      	strb	r4, [r5, r3]
     468:	3301      	adds	r3, #1
void initArrays(volatile char myArray[9][21], int stringNumber, char* myString)
{
	uint8_t lengthOfString = strlen(myString);
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for (currentIndex; currentIndex < lengthOfString; currentIndex++)
     46a:	b2dc      	uxtb	r4, r3
     46c:	4284      	cmp	r4, r0
     46e:	d3f8      	bcc.n	462 <initArrays(char volatile (*) [21], int, char*)+0x26>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for (charLeft; charLeft > 0; charLeft--)
     470:	b169      	cbz	r1, 48e <initArrays(char volatile (*) [21], int, char*)+0x52>
     472:	eb07 0747 	add.w	r7, r7, r7, lsl #1
     476:	180a      	adds	r2, r1, r0
	{
		myArray[stringNumber][currentIndex] = ' ';
     478:	2120      	movs	r1, #32
     47a:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
     47e:	b2d2      	uxtb	r2, r2
     480:	443e      	add	r6, r7
		currentIndex++;
     482:	1c43      	adds	r3, r0, #1
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for (charLeft; charLeft > 0; charLeft--)
	{
		myArray[stringNumber][currentIndex] = ' ';
     484:	5431      	strb	r1, [r6, r0]
		currentIndex++;
     486:	b2d8      	uxtb	r0, r3
	for (currentIndex; currentIndex < lengthOfString; currentIndex++)
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for (charLeft; charLeft > 0; charLeft--)
     488:	4290      	cmp	r0, r2
     48a:	d1fa      	bne.n	482 <initArrays(char volatile (*) [21], int, char*)+0x46>
     48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000490 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)>:

		case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0, currentGlobals);
			outputS(menuScreen->screen2[1], 1, currentGlobals);
			outputS(menuScreen->screen2[2], 2, currentGlobals);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
     490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     494:	4605      	mov	r5, r0
			currentGlobals->menuState = TrackMenuArrow1;
     496:	4617      	mov	r7, r2
     498:	4688      	mov	r8, r1
     49a:	4a5c      	ldr	r2, [pc, #368]	; (60c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x17c>)
}

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
     49c:	2100      	movs	r1, #0
     49e:	f100 06bd 	add.w	r6, r0, #189	; 0xbd
     4a2:	f7ff ffcb 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     4a6:	4628      	mov	r0, r5
     4a8:	4a59      	ldr	r2, [pc, #356]	; (610 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x180>)
     4aa:	2101      	movs	r1, #1
     4ac:	f7ff ffc6 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
     4b0:	4628      	mov	r0, r5
     4b2:	4a58      	ldr	r2, [pc, #352]	; (614 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x184>)
     4b4:	2102      	movs	r1, #2
     4b6:	f7ff ffc1 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     4ba:	4628      	mov	r0, r5
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     4bc:	4a56      	ldr	r2, [pc, #344]	; (618 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x188>)
     4be:	2103      	movs	r1, #3

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
     4c0:	f7ff ffbc 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     4c4:	4630      	mov	r0, r6
     4c6:	4a55      	ldr	r2, [pc, #340]	; (61c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x18c>)
     4c8:	2100      	movs	r1, #0
     4ca:	f7ff ffb7 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     4ce:	4630      	mov	r0, r6
     4d0:	4a4f      	ldr	r2, [pc, #316]	; (610 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x180>)
     4d2:	2101      	movs	r1, #1
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     4d4:	f505 74bd 	add.w	r4, r5, #378	; 0x17a
     4d8:	f7ff ffb0 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     4dc:	4630      	mov	r0, r6
     4de:	4a50      	ldr	r2, [pc, #320]	; (620 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x190>)
     4e0:	2102      	movs	r1, #2
		//we need to debug this to make sure it's doing what we think it's doing.
		switch (currentGlobals->menuState)
		{
		case PreformanceModeInit: //initial state
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
			outputS(menuScreen->screen0[0], 0, currentGlobals);
     4e2:	f7ff ffab 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     4e6:	4630      	mov	r0, r6
     4e8:	4a4e      	ldr	r2, [pc, #312]	; (624 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x194>)
     4ea:	2103      	movs	r1, #3
			outputS(menuScreen->screen0[1], 1, currentGlobals);
     4ec:	f7ff ffa6 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     4f0:	4620      	mov	r0, r4
     4f2:	4a4d      	ldr	r2, [pc, #308]	; (628 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x198>)
     4f4:	2100      	movs	r1, #0
			outputS(menuScreen->screen0[2], 2, currentGlobals);
     4f6:	f7ff ffa1 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     4fa:	4620      	mov	r0, r4
     4fc:	4a4b      	ldr	r2, [pc, #300]	; (62c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x19c>)
     4fe:	2101      	movs	r1, #1
			outputS(menuScreen->screen0[3], 3, currentGlobals);
     500:	f7ff ff9c 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     504:	4620      	mov	r0, r4
     506:	4a4a      	ldr	r2, [pc, #296]	; (630 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1a0>)
     508:	2102      	movs	r1, #2
     50a:	f7ff ff97 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
			outputS(menuScreen->screen2[2], 2, currentGlobals);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			break;

		case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     50e:	4620      	mov	r0, r4
			numPrinter(menuScreen->screen2[1], 10, 4, (trackSample));
     510:	4a48      	ldr	r2, [pc, #288]	; (634 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1a4>)
     512:	2103      	movs	r1, #3
     514:	f205 2637 	addw	r6, r5, #567	; 0x237
			outputS(menuScreen->screen2[2], 2, currentGlobals);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			break;

		case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     518:	f7ff ff90 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     51c:	4620      	mov	r0, r4
     51e:	4a46      	ldr	r2, [pc, #280]	; (638 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1a8>)
     520:	2104      	movs	r1, #4
     522:	f7ff ff8b 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     526:	4620      	mov	r0, r4
     528:	4a44      	ldr	r2, [pc, #272]	; (63c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1ac>)
			numPrinter(menuScreen->screen2[1], 10, 4, (trackSample));
     52a:	2105      	movs	r1, #5
     52c:	f7ff ff86 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     530:	4630      	mov	r0, r6
			outputS(menuScreen->screen2[1], 1, currentGlobals);
     532:	4a43      	ldr	r2, [pc, #268]	; (640 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1b0>)
     534:	2101      	movs	r1, #1
     536:	f7ff ff81 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     53a:	4630      	mov	r0, r6
			break;
     53c:	4a41      	ldr	r2, [pc, #260]	; (644 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1b4>)
}

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
     53e:	2102      	movs	r1, #2
     540:	f505 743d 	add.w	r4, r5, #756	; 0x2f4
     544:	f7ff ff7a 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     548:	4630      	mov	r0, r6
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     54a:	4a3f      	ldr	r2, [pc, #252]	; (648 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1b8>)
     54c:	2103      	movs	r1, #3
}

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
     54e:	f7ff ff75 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
     552:	4630      	mov	r0, r6
     554:	4a3d      	ldr	r2, [pc, #244]	; (64c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1bc>)
     556:	2100      	movs	r1, #0
     558:	f7ff ff70 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     55c:	4620      	mov	r0, r4
     55e:	4a3c      	ldr	r2, [pc, #240]	; (650 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1c0>)
     560:	2100      	movs	r1, #0
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     562:	f7ff ff6b 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     566:	4620      	mov	r0, r4
     568:	4a3a      	ldr	r2, [pc, #232]	; (654 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1c4>)
     56a:	2101      	movs	r1, #1
     56c:	f7ff ff66 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     570:	4620      	mov	r0, r4
     572:	4a39      	ldr	r2, [pc, #228]	; (658 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1c8>)
     574:	2102      	movs	r1, #2
     576:	f7ff ff61 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
     57a:	4620      	mov	r0, r4
     57c:	4a37      	ldr	r2, [pc, #220]	; (65c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1cc>)
				menuScreen->screen2[4][16] = ' ';
				menuScreen->screen2[4][17] = ' ';
				break;

			case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
     57e:	2103      	movs	r1, #3
				menuScreen->screen2[4][15] = 'o';
     580:	f7ff ff5c 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
				menuScreen->screen2[4][16] = 'n';
				menuScreen->screen2[4][17] = 'e';
     584:	4620      	mov	r0, r4
				menuScreen->screen2[4][16] = ' ';
				menuScreen->screen2[4][17] = ' ';
				break;

			case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
     586:	4a36      	ldr	r2, [pc, #216]	; (660 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1d0>)
     588:	2104      	movs	r1, #4
				menuScreen->screen2[4][15] = 'o';
     58a:	f7ff ff57 	bl	43c <initArrays(char volatile (*) [21], int, char*)>
				menuScreen->screen2[4][16] = 'n';
     58e:	f8b8 30c8 	ldrh.w	r3, [r8, #200]	; 0xc8
				menuScreen->screen2[4][17] = 'e';
     592:	f105 002a 	add.w	r0, r5, #42	; 0x2a
				break;
     596:	2203      	movs	r2, #3
				menuScreen->screen2[4][16] = 'R';
				menuScreen->screen2[4][17] = ' ';
				break;

			case 1: //only release
				menuScreen->screen2[4][14] = 'R';
     598:	b29b      	uxth	r3, r3
     59a:	2105      	movs	r1, #5

			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack] + 1));
			switch (currentPattern->envelopeType[currentGlobals->currentTrack])
			{
			case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
     59c:	f000 fc0c 	bl	db8 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
				menuScreen->screen2[4][15] = '-';
				menuScreen->screen2[4][16] = 'R';
     5a0:	7c7b      	ldrb	r3, [r7, #17]
				menuScreen->screen2[4][17] = ' ';
     5a2:	f505 7013 	add.w	r0, r5, #588	; 0x24c

			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack] + 1));
			switch (currentPattern->envelopeType[currentGlobals->currentTrack])
			{
			case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
     5a6:	2202      	movs	r2, #2
				menuScreen->screen2[4][15] = '-';
     5a8:	3301      	adds	r3, #1
     5aa:	210e      	movs	r1, #14
				menuScreen->screen2[4][16] = 'R';
     5ac:	f000 fc04 	bl	db8 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
				menuScreen->screen2[4][17] = ' ';
     5b0:	7a3b      	ldrb	r3, [r7, #8]
     5b2:	f105 0015 	add.w	r0, r5, #21
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
			{
			case 0:
				menuScreen->screen2[2][10] = 'S';
				menuScreen->screen2[2][11] = 'o';
     5b6:	2203      	movs	r2, #3
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
			{
			case 0:
				menuScreen->screen2[2][10] = 'S';
     5b8:	3301      	adds	r3, #1
				menuScreen->screen2[2][11] = 'o';
				menuScreen->screen2[2][12] = 'l';
     5ba:	2109      	movs	r1, #9
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
			{
			case 0:
				menuScreen->screen2[2][10] = 'S';
     5bc:	f000 fbfc 	bl	db8 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
				menuScreen->screen2[2][11] = 'o';
     5c0:	7a3b      	ldrb	r3, [r7, #8]
     5c2:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
				menuScreen->screen2[2][12] = 'l';
     5c6:	2203      	movs	r2, #3
				menuScreen->screen2[2][13] = 'o';
     5c8:	3301      	adds	r3, #1
     5ca:	2109      	movs	r1, #9
				break;
     5cc:	f000 fbf4 	bl	db8 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
		{
		case 0: //output volume
			if ((currentPattern->outputLevelMSB[positionSelect]) == 0)
			{ //value is positive
				menuScreen->knobScreen[0][14] = ' ';
				numPrinter(menuScreen->knobScreen[0], 15, 2, currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
     5d0:	f898 30ca 	ldrb.w	r3, [r8, #202]	; 0xca
     5d4:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
		switch ((currentGlobals->knobStatus) >> 4)
		{
		case 0: //output volume
			if ((currentPattern->outputLevelMSB[positionSelect]) == 0)
			{ //value is positive
				menuScreen->knobScreen[0][14] = ' ';
     5d8:	2202      	movs	r2, #2
     5da:	2107      	movs	r1, #7
				numPrinter(menuScreen->knobScreen[0], 15, 2, currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
     5dc:	462e      	mov	r6, r5
     5de:	f000 fbeb 	bl	db8 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
     5e2:	7a7b      	ldrb	r3, [r7, #9]
     5e4:	f105 00fc 	add.w	r0, r5, #252	; 0xfc
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
	numPrinter(initTheScreen->screen3[1], 14, 2, (currentGlobals->midiChannel) + 1);
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
	numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals->currentStep) + 1);
     5e8:	2202      	movs	r2, #2
     5ea:	3301      	adds	r3, #1
     5ec:	210d      	movs	r1, #13
     5ee:	2400      	movs	r4, #0
     5f0:	f000 fbe2 	bl	db8 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>

	for (uint8_t i = 0; i < 4; i++)
	{
		outputS(initTheScreen->screen0[i], i, currentGlobals);
     5f4:	4621      	mov	r1, r4
     5f6:	3401      	adds	r4, #1
     5f8:	4630      	mov	r0, r6
     5fa:	463a      	mov	r2, r7
     5fc:	f000 fbb0 	bl	d60 <outputS(char volatile*, int, Globals volatile*)>
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
	numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals->currentStep) + 1);

	for (uint8_t i = 0; i < 4; i++)
     600:	2c04      	cmp	r4, #4
     602:	f106 0615 	add.w	r6, r6, #21
     606:	d1f5      	bne.n	5f4 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x164>
	{
		outputS(initTheScreen->screen0[i], i, currentGlobals);
	}
}
     608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     60c:	20000000 	.word	0x20000000
     610:	20000014 	.word	0x20000014
     614:	20000020 	.word	0x20000020
     618:	20000028 	.word	0x20000028
     61c:	20000030 	.word	0x20000030
     620:	20000040 	.word	0x20000040
     624:	20000048 	.word	0x20000048
     628:	20000058 	.word	0x20000058
     62c:	20000068 	.word	0x20000068
     630:	20000070 	.word	0x20000070
     634:	2000007c 	.word	0x2000007c
     638:	20000088 	.word	0x20000088
     63c:	20000098 	.word	0x20000098
     640:	200000ac 	.word	0x200000ac
     644:	200000bc 	.word	0x200000bc
     648:	200000cc 	.word	0x200000cc
     64c:	200000d0 	.word	0x200000d0
     650:	200000e0 	.word	0x200000e0
     654:	200000f4 	.word	0x200000f4
     658:	20000100 	.word	0x20000100
     65c:	20000118 	.word	0x20000118
     660:	20000130 	.word	0x20000130

00000664 <enableCycle(Globals volatile*)>:
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     664:	f890 22fa 	ldrb.w	r2, [r0, #762]	; 0x2fa
     668:	4bac      	ldr	r3, [pc, #688]	; (91c <enableCycle(Globals volatile*)+0x2b8>)
     66a:	327c      	adds	r2, #124	; 0x7c
     66c:	eb00 0242 	add.w	r2, r0, r2, lsl #1

uint8_t new_line[4] = { 0x80, 0xA0, 0xC0, 0xE0 };
uint8_t OLEDPinArray[9] = {OLEDData0,OLEDData1,OLEDData2,OLEDData3,OLEDData4,OLEDData5, OLEDData6, OLEDData7, OLEDDataCommand};

void enableCycle(volatile Globals *OLEDGlobals) //called on by interval timer.
{
     670:	b5f0      	push	{r4, r5, r6, r7, lr}
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     672:	8852      	ldrh	r2, [r2, #2]
     674:	7819      	ldrb	r1, [r3, #0]
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     676:	f012 0f01 	tst.w	r2, #1
     67a:	4aa9      	ldr	r2, [pc, #676]	; (920 <enableCycle(Globals volatile*)+0x2bc>)
     67c:	ea4f 1101 	mov.w	r1, r1, lsl #4
     680:	eb02 0401 	add.w	r4, r2, r1
     684:	5851      	ldr	r1, [r2, r1]
     686:	68e4      	ldr	r4, [r4, #12]
     688:	f040 8130 	bne.w	8ec <enableCycle(Globals volatile*)+0x288>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     68c:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     690:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     694:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
     698:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     69a:	785d      	ldrb	r5, [r3, #1]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     69c:	347c      	adds	r4, #124	; 0x7c
     69e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     6a2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     6a6:	012d      	lsls	r5, r5, #4
     6a8:	8864      	ldrh	r4, [r4, #2]
     6aa:	f3c4 044e 	ubfx	r4, r4, #1, #15
     6ae:	804c      	strh	r4, [r1, #2]
     6b0:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     6b2:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     6b6:	68e4      	ldr	r4, [r4, #12]
     6b8:	317c      	adds	r1, #124	; 0x7c
     6ba:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     6be:	8849      	ldrh	r1, [r1, #2]
     6c0:	f011 0f01 	tst.w	r1, #1
     6c4:	5951      	ldr	r1, [r2, r5]
     6c6:	f040 8114 	bne.w	8f2 <enableCycle(Globals volatile*)+0x28e>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     6ca:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     6ce:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     6d2:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
     6d6:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     6d8:	789d      	ldrb	r5, [r3, #2]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     6da:	347c      	adds	r4, #124	; 0x7c
     6dc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     6e0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     6e4:	012d      	lsls	r5, r5, #4
     6e6:	8864      	ldrh	r4, [r4, #2]
     6e8:	f3c4 044e 	ubfx	r4, r4, #1, #15
     6ec:	804c      	strh	r4, [r1, #2]
     6ee:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     6f0:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     6f4:	68e4      	ldr	r4, [r4, #12]
     6f6:	317c      	adds	r1, #124	; 0x7c
     6f8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     6fc:	8849      	ldrh	r1, [r1, #2]
     6fe:	f011 0f01 	tst.w	r1, #1
     702:	5951      	ldr	r1, [r2, r5]
     704:	f040 80f8 	bne.w	8f8 <enableCycle(Globals volatile*)+0x294>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     708:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     70c:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     710:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
     714:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     716:	78dd      	ldrb	r5, [r3, #3]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     718:	347c      	adds	r4, #124	; 0x7c
     71a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     71e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     722:	012d      	lsls	r5, r5, #4
     724:	8864      	ldrh	r4, [r4, #2]
     726:	f3c4 044e 	ubfx	r4, r4, #1, #15
     72a:	804c      	strh	r4, [r1, #2]
     72c:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     72e:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     732:	68e4      	ldr	r4, [r4, #12]
     734:	317c      	adds	r1, #124	; 0x7c
     736:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     73a:	8849      	ldrh	r1, [r1, #2]
     73c:	f011 0f01 	tst.w	r1, #1
     740:	5951      	ldr	r1, [r2, r5]
     742:	f040 80dc 	bne.w	8fe <enableCycle(Globals volatile*)+0x29a>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     746:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     74a:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     74e:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
     752:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     754:	791d      	ldrb	r5, [r3, #4]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     756:	347c      	adds	r4, #124	; 0x7c
     758:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     75c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     760:	012d      	lsls	r5, r5, #4
     762:	8864      	ldrh	r4, [r4, #2]
     764:	f3c4 044e 	ubfx	r4, r4, #1, #15
     768:	804c      	strh	r4, [r1, #2]
     76a:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     76c:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     770:	68e4      	ldr	r4, [r4, #12]
     772:	317c      	adds	r1, #124	; 0x7c
     774:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     778:	8849      	ldrh	r1, [r1, #2]
     77a:	f011 0f01 	tst.w	r1, #1
     77e:	5951      	ldr	r1, [r2, r5]
     780:	f040 80c0 	bne.w	904 <enableCycle(Globals volatile*)+0x2a0>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     784:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     788:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     78c:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
     790:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     792:	795d      	ldrb	r5, [r3, #5]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     794:	347c      	adds	r4, #124	; 0x7c
     796:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     79a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     79e:	012d      	lsls	r5, r5, #4
     7a0:	8864      	ldrh	r4, [r4, #2]
     7a2:	f3c4 044e 	ubfx	r4, r4, #1, #15
     7a6:	804c      	strh	r4, [r1, #2]
     7a8:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     7aa:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     7ae:	68e4      	ldr	r4, [r4, #12]
     7b0:	317c      	adds	r1, #124	; 0x7c
     7b2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     7b6:	8849      	ldrh	r1, [r1, #2]
     7b8:	f011 0f01 	tst.w	r1, #1
     7bc:	5951      	ldr	r1, [r2, r5]
     7be:	f040 80a4 	bne.w	90a <enableCycle(Globals volatile*)+0x2a6>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     7c2:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     7c6:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     7ca:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
     7ce:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     7d0:	799d      	ldrb	r5, [r3, #6]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     7d2:	347c      	adds	r4, #124	; 0x7c
     7d4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     7d8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     7dc:	012d      	lsls	r5, r5, #4
     7de:	8864      	ldrh	r4, [r4, #2]
     7e0:	f3c4 044e 	ubfx	r4, r4, #1, #15
     7e4:	804c      	strh	r4, [r1, #2]
     7e6:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     7e8:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     7ec:	68e4      	ldr	r4, [r4, #12]
     7ee:	317c      	adds	r1, #124	; 0x7c
     7f0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     7f4:	8849      	ldrh	r1, [r1, #2]
     7f6:	f011 0f01 	tst.w	r1, #1
     7fa:	5951      	ldr	r1, [r2, r5]
     7fc:	f040 8088 	bne.w	910 <enableCycle(Globals volatile*)+0x2ac>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     800:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     804:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     808:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
     80c:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     80e:	79dd      	ldrb	r5, [r3, #7]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     810:	347c      	adds	r4, #124	; 0x7c
     812:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     816:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     81a:	012d      	lsls	r5, r5, #4
     81c:	8864      	ldrh	r4, [r4, #2]
     81e:	f3c4 044e 	ubfx	r4, r4, #1, #15
     822:	804c      	strh	r4, [r1, #2]
     824:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     826:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     82a:	68e4      	ldr	r4, [r4, #12]
     82c:	317c      	adds	r1, #124	; 0x7c
     82e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     832:	8849      	ldrh	r1, [r1, #2]
     834:	f011 0f01 	tst.w	r1, #1
     838:	5951      	ldr	r1, [r2, r5]
     83a:	d16c      	bne.n	916 <enableCycle(Globals volatile*)+0x2b2>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     83c:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     840:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     844:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
     848:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     84a:	7a1d      	ldrb	r5, [r3, #8]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     84c:	347c      	adds	r4, #124	; 0x7c
     84e:	eb00 0341 	add.w	r3, r0, r1, lsl #1
     852:	eb00 0144 	add.w	r1, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     856:	012d      	lsls	r5, r5, #4
     858:	8849      	ldrh	r1, [r1, #2]
     85a:	f3c1 014e 	ubfx	r1, r1, #1, #15
     85e:	8059      	strh	r1, [r3, #2]
     860:	1951      	adds	r1, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     862:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
     866:	337c      	adds	r3, #124	; 0x7c
     868:	eb00 0343 	add.w	r3, r0, r3, lsl #1
     86c:	885b      	ldrh	r3, [r3, #2]
     86e:	f013 0f01 	tst.w	r3, #1
     872:	5953      	ldr	r3, [r2, r5]
     874:	68ca      	ldr	r2, [r1, #12]
     876:	d036      	beq.n	8e6 <enableCycle(Globals volatile*)+0x282>
     878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     87c:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
		}
		OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = 0; //reset buffer to 0, now that we have shifted out the data. This might be un-necessary? 
     880:	f04f 0e00 	mov.w	lr, #0
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     884:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
			} else if (pin == 4) {
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
     888:	f44f 6780 	mov.w	r7, #1024	; 0x400
     88c:	337c      	adds	r3, #124	; 0x7c
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     88e:	4925      	ldr	r1, [pc, #148]	; (924 <enableCycle(Globals volatile*)+0x2c0>)
     890:	347c      	adds	r4, #124	; 0x7c
			} else if (pin == 4) {
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
     892:	4e25      	ldr	r6, [pc, #148]	; (928 <enableCycle(Globals volatile*)+0x2c4>)
     894:	eb00 0343 	add.w	r3, r0, r3, lsl #1

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     898:	4d24      	ldr	r5, [pc, #144]	; (92c <enableCycle(Globals volatile*)+0x2c8>)
     89a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
     89e:	4a24      	ldr	r2, [pc, #144]	; (930 <enableCycle(Globals volatile*)+0x2cc>)
     8a0:	8864      	ldrh	r4, [r4, #2]
     8a2:	f3c4 044e 	ubfx	r4, r4, #1, #15
     8a6:	805c      	strh	r4, [r3, #2]
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     8a8:	460c      	mov	r4, r1
		}
		OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = 0; //reset buffer to 0, now that we have shifted out the data. This might be un-necessary? 
     8aa:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
     8ae:	337c      	adds	r3, #124	; 0x7c
     8b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
     8b4:	f8a3 e002 	strh.w	lr, [r3, #2]
		OLEDGlobals->oledReadIndex++; //increment read Index
     8b8:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
     8bc:	3301      	adds	r3, #1
     8be:	b2db      	uxtb	r3, r3
     8c0:	f880 32fa 	strb.w	r3, [r0, #762]	; 0x2fa
			} else if (pin == 4) {
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
     8c4:	f8c6 7084 	str.w	r7, [r6, #132]	; 0x84
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     8c8:	6809      	ldr	r1, [r1, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     8ca:	682b      	ldr	r3, [r5, #0]
     8cc:	fba2 3203 	umull	r3, r2, r2, r3
     8d0:	0c92      	lsrs	r2, r2, #18
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     8d2:	6823      	ldr	r3, [r4, #0]
     8d4:	1a5b      	subs	r3, r3, r1
     8d6:	429a      	cmp	r2, r3
     8d8:	d8fb      	bhi.n	8d2 <enableCycle(Globals volatile*)+0x26e>
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
     8da:	4b13      	ldr	r3, [pc, #76]	; (928 <enableCycle(Globals volatile*)+0x2c4>)
     8dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
     8e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
     8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     8e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
     8ea:	e7c7      	b.n	87c <enableCycle(Globals volatile*)+0x218>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     8ec:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
     8f0:	e6ce      	b.n	690 <enableCycle(Globals volatile*)+0x2c>
     8f2:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
     8f6:	e6ea      	b.n	6ce <enableCycle(Globals volatile*)+0x6a>
     8f8:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
     8fc:	e706      	b.n	70c <enableCycle(Globals volatile*)+0xa8>
     8fe:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
     902:	e722      	b.n	74a <enableCycle(Globals volatile*)+0xe6>
     904:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
     908:	e73e      	b.n	788 <enableCycle(Globals volatile*)+0x124>
     90a:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
     90e:	e75a      	b.n	7c6 <enableCycle(Globals volatile*)+0x162>
     910:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
     914:	e776      	b.n	804 <enableCycle(Globals volatile*)+0x1a0>
     916:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
     91a:	e791      	b.n	840 <enableCycle(Globals volatile*)+0x1dc>
     91c:	2000067c 	.word	0x2000067c
     920:	20000294 	.word	0x20000294
     924:	e0001004 	.word	0xe0001004
     928:	42004000 	.word	0x42004000
     92c:	200006b0 	.word	0x200006b0
     930:	431bde83 	.word	0x431bde83

00000934 <initPins()>:
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
}

void initPins() 
{
     934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     936:	4c38      	ldr	r4, [pc, #224]	; (a18 <initPins()+0xe4>)
     938:	f104 0509 	add.w	r5, r4, #9
	for (int i = 0; i < 9; i++)
	{
		pinMode(OLEDPinArray[i], OUTPUT);
     93c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
     940:	2101      	movs	r1, #1
     942:	f002 f9a5 	bl	2c90 <pinMode>
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
}

void initPins() 
{
	for (int i = 0; i < 9; i++)
     946:	42ac      	cmp	r4, r5
     948:	d1f8      	bne.n	93c <initPins()+0x8>
	{
		pinMode(OLEDPinArray[i], OUTPUT);
	}
	pinMode(OLEDEnable, OUTPUT);
     94a:	2101      	movs	r1, #1
     94c:	2006      	movs	r0, #6
     94e:	f002 f99f 	bl	2c90 <pinMode>

	for (int j = 0; j < 9; j++) 
	{
		digitalWriteFast(OLEDPinArray[j], LOW);
     952:	4a32      	ldr	r2, [pc, #200]	; (a1c <initPins()+0xe8>)
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     954:	4b32      	ldr	r3, [pc, #200]	; (a20 <initPins()+0xec>)
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
     956:	f44f 6580 	mov.w	r5, #1024	; 0x400
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     95a:	7816      	ldrb	r6, [r2, #0]

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     95c:	21c8      	movs	r1, #200	; 0xc8
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     95e:	7850      	ldrb	r0, [r2, #1]
     960:	0136      	lsls	r6, r6, #4
     962:	7894      	ldrb	r4, [r2, #2]
     964:	0100      	lsls	r0, r0, #4
     966:	199f      	adds	r7, r3, r6
     968:	0124      	lsls	r4, r4, #4
     96a:	599e      	ldr	r6, [r3, r6]
     96c:	eb03 0e00 	add.w	lr, r3, r0
     970:	f8d7 c00c 	ldr.w	ip, [r7, #12]
     974:	581f      	ldr	r7, [r3, r0]
     976:	78d0      	ldrb	r0, [r2, #3]
     978:	f8c6 c088 	str.w	ip, [r6, #136]	; 0x88
     97c:	191e      	adds	r6, r3, r4
     97e:	f8de c00c 	ldr.w	ip, [lr, #12]
     982:	0100      	lsls	r0, r0, #4
     984:	f853 e004 	ldr.w	lr, [r3, r4]
     988:	7914      	ldrb	r4, [r2, #4]
     98a:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
     98e:	181f      	adds	r7, r3, r0
     990:	f8d6 c00c 	ldr.w	ip, [r6, #12]
     994:	0124      	lsls	r4, r4, #4
     996:	581e      	ldr	r6, [r3, r0]
     998:	7950      	ldrb	r0, [r2, #5]
     99a:	f8ce c088 	str.w	ip, [lr, #136]	; 0x88
     99e:	eb03 0e04 	add.w	lr, r3, r4
     9a2:	f8d7 c00c 	ldr.w	ip, [r7, #12]
     9a6:	0100      	lsls	r0, r0, #4
     9a8:	591f      	ldr	r7, [r3, r4]
     9aa:	7994      	ldrb	r4, [r2, #6]
     9ac:	f8c6 c088 	str.w	ip, [r6, #136]	; 0x88
     9b0:	181e      	adds	r6, r3, r0
     9b2:	f8de c00c 	ldr.w	ip, [lr, #12]
     9b6:	0124      	lsls	r4, r4, #4
     9b8:	f853 e000 	ldr.w	lr, [r3, r0]
     9bc:	79d0      	ldrb	r0, [r2, #7]
     9be:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
     9c2:	191f      	adds	r7, r3, r4
     9c4:	f8d6 c00c 	ldr.w	ip, [r6, #12]
     9c8:	0100      	lsls	r0, r0, #4
     9ca:	591e      	ldr	r6, [r3, r4]
     9cc:	f8ce c088 	str.w	ip, [lr, #136]	; 0x88
     9d0:	181c      	adds	r4, r3, r0
     9d2:	68ff      	ldr	r7, [r7, #12]
     9d4:	5818      	ldr	r0, [r3, r0]
     9d6:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
     9da:	68e4      	ldr	r4, [r4, #12]
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
     9dc:	4f11      	ldr	r7, [pc, #68]	; (a24 <initPins()+0xf0>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     9de:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
     9e2:	7a12      	ldrb	r2, [r2, #8]
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     9e4:	4810      	ldr	r0, [pc, #64]	; (a28 <initPins()+0xf4>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     9e6:	0112      	lsls	r2, r2, #4

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     9e8:	4e10      	ldr	r6, [pc, #64]	; (a2c <initPins()+0xf8>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     9ea:	189c      	adds	r4, r3, r2
     9ec:	589b      	ldr	r3, [r3, r2]

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     9ee:	4a10      	ldr	r2, [pc, #64]	; (a30 <initPins()+0xfc>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     9f0:	f8d4 e00c 	ldr.w	lr, [r4, #12]
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     9f4:	4604      	mov	r4, r0
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     9f6:	f8c3 e088 	str.w	lr, [r3, #136]	; 0x88
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
     9fa:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     9fe:	6800      	ldr	r0, [r0, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     a00:	6833      	ldr	r3, [r6, #0]
     a02:	fba2 3203 	umull	r3, r2, r2, r3
     a06:	0c92      	lsrs	r2, r2, #18
     a08:	fb01 f202 	mul.w	r2, r1, r2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     a0c:	6823      	ldr	r3, [r4, #0]
     a0e:	1a1b      	subs	r3, r3, r0
     a10:	429a      	cmp	r2, r3
     a12:	d8fb      	bhi.n	a0c <initPins()+0xd8>
	}
	digitalWriteFast(OLEDEnable, LOW);
	delayMicroseconds(200);

}
     a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a16:	bf00      	nop
     a18:	2000067b 	.word	0x2000067b
     a1c:	2000067c 	.word	0x2000067c
     a20:	20000294 	.word	0x20000294
     a24:	42004000 	.word	0x42004000
     a28:	e0001004 	.word	0xe0001004
     a2c:	200006b0 	.word	0x200006b0
     a30:	431bde83 	.word	0x431bde83

00000a34 <initScreen(Globals volatile*)>:

void initScreen(volatile Globals* OLEDGlobals)
{
     a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a36:	4604      	mov	r4, r0
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     a38:	202a      	movs	r0, #42	; 0x2a
     a3a:	2771      	movs	r7, #113	; 0x71

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     a3c:	f44f 7580 	mov.w	r5, #256	; 0x100
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     a40:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a44:	2128      	movs	r1, #40	; 0x28
     a46:	2208      	movs	r2, #8
     a48:	2679      	movs	r6, #121	; 0x79
     a4a:	337c      	adds	r3, #124	; 0x7c
     a4c:	f04f 0ed5 	mov.w	lr, #213	; 0xd5
     a50:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     a54:	8058      	strh	r0, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     a56:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a5a:	3301      	adds	r3, #1
     a5c:	b2db      	uxtb	r3, r3
     a5e:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     a62:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a66:	337c      	adds	r3, #124	; 0x7c
     a68:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     a6c:	805f      	strh	r7, [r3, #2]
     a6e:	2770      	movs	r7, #112	; 0x70
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     a70:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a74:	3301      	adds	r3, #1
     a76:	b2db      	uxtb	r3, r3
     a78:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     a7c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a80:	337c      	adds	r3, #124	; 0x7c
     a82:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     a86:	805d      	strh	r5, [r3, #2]
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     a88:	2578      	movs	r5, #120	; 0x78
void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     a8a:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a8e:	3301      	adds	r3, #1
     a90:	b2db      	uxtb	r3, r3
     a92:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     a96:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     a9a:	337c      	adds	r3, #124	; 0x7c
     a9c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     aa0:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     aa2:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     aa6:	3301      	adds	r3, #1
     aa8:	b2db      	uxtb	r3, r3
     aaa:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     aae:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     ab2:	337c      	adds	r3, #124	; 0x7c
     ab4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     ab8:	805a      	strh	r2, [r3, #2]
     aba:	2209      	movs	r2, #9
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     abc:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     ac0:	3301      	adds	r3, #1
     ac2:	b2db      	uxtb	r3, r3
     ac4:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     ac8:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     acc:	337c      	adds	r3, #124	; 0x7c
     ace:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     ad2:	8058      	strh	r0, [r3, #2]
     ad4:	2006      	movs	r0, #6
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     ad6:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     ada:	3301      	adds	r3, #1
     adc:	b2db      	uxtb	r3, r3
     ade:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     ae2:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     ae6:	337c      	adds	r3, #124	; 0x7c
     ae8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     aec:	805e      	strh	r6, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     aee:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     af2:	3301      	adds	r3, #1
     af4:	b2db      	uxtb	r3, r3
     af6:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     afa:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     afe:	337c      	adds	r3, #124	; 0x7c
     b00:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     b04:	f8a3 e002 	strh.w	lr, [r3, #2]
     b08:	f04f 0e72 	mov.w	lr, #114	; 0x72
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     b0c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b10:	3301      	adds	r3, #1
     b12:	b2db      	uxtb	r3, r3
     b14:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     b18:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b1c:	337c      	adds	r3, #124	; 0x7c
     b1e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     b22:	805f      	strh	r7, [r3, #2]

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     b24:	f44f 7785 	mov.w	r7, #266	; 0x10a

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     b28:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b2c:	3301      	adds	r3, #1
     b2e:	b2db      	uxtb	r3, r3
     b30:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     b34:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b38:	337c      	adds	r3, #124	; 0x7c
     b3a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     b3e:	805d      	strh	r5, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     b40:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b44:	3301      	adds	r3, #1
     b46:	b2db      	uxtb	r3, r3
     b48:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     b4c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b50:	337c      	adds	r3, #124	; 0x7c
     b52:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     b56:	805a      	strh	r2, [r3, #2]
     b58:	22da      	movs	r2, #218	; 0xda
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     b5a:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b5e:	3301      	adds	r3, #1
     b60:	b2db      	uxtb	r3, r3
     b62:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     b66:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b6a:	337c      	adds	r3, #124	; 0x7c
     b6c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     b70:	8058      	strh	r0, [r3, #2]
     b72:	2010      	movs	r0, #16
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     b74:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b78:	3301      	adds	r3, #1
     b7a:	b2db      	uxtb	r3, r3
     b7c:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     b80:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b84:	337c      	adds	r3, #124	; 0x7c
     b86:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     b8a:	f8a3 e002 	strh.w	lr, [r3, #2]
     b8e:	f04f 0edc 	mov.w	lr, #220	; 0xdc
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     b92:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     b96:	3301      	adds	r3, #1
     b98:	b2db      	uxtb	r3, r3
     b9a:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     b9e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     ba2:	337c      	adds	r3, #124	; 0x7c
     ba4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     ba8:	805f      	strh	r7, [r3, #2]
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     baa:	2700      	movs	r7, #0
void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     bac:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     bb0:	3301      	adds	r3, #1
     bb2:	b2db      	uxtb	r3, r3
     bb4:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     bb8:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     bbc:	337c      	adds	r3, #124	; 0x7c
     bbe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     bc2:	805e      	strh	r6, [r3, #2]
     bc4:	2681      	movs	r6, #129	; 0x81
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     bc6:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     bca:	3301      	adds	r3, #1
     bcc:	b2db      	uxtb	r3, r3
     bce:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     bd2:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     bd6:	337c      	adds	r3, #124	; 0x7c
     bd8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     bdc:	805a      	strh	r2, [r3, #2]
     bde:	227f      	movs	r2, #127	; 0x7f
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     be0:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     be4:	3301      	adds	r3, #1
     be6:	b2db      	uxtb	r3, r3
     be8:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     bec:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     bf0:	337c      	adds	r3, #124	; 0x7c
     bf2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     bf6:	8058      	strh	r0, [r3, #2]
     bf8:	20d9      	movs	r0, #217	; 0xd9
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     bfa:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     bfe:	3301      	adds	r3, #1
     c00:	b2db      	uxtb	r3, r3
     c02:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     c06:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     c0a:	337c      	adds	r3, #124	; 0x7c
     c0c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     c10:	f8a3 e002 	strh.w	lr, [r3, #2]
     c14:	f04f 0ef1 	mov.w	lr, #241	; 0xf1
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     c18:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     c1c:	3301      	adds	r3, #1
     c1e:	b2db      	uxtb	r3, r3
     c20:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     c24:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     c28:	337c      	adds	r3, #124	; 0x7c
     c2a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     c2e:	805f      	strh	r7, [r3, #2]
     c30:	27db      	movs	r7, #219	; 0xdb
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     c32:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     c36:	3301      	adds	r3, #1
     c38:	b2db      	uxtb	r3, r3
     c3a:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     c3e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     c42:	337c      	adds	r3, #124	; 0x7c
     c44:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     c48:	805e      	strh	r6, [r3, #2]
     c4a:	2640      	movs	r6, #64	; 0x40
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     c4c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     c50:	3301      	adds	r3, #1
     c52:	b2db      	uxtb	r3, r3
     c54:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     c58:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     c5c:	337c      	adds	r3, #124	; 0x7c
     c5e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     c62:	805a      	strh	r2, [r3, #2]
     c64:	2201      	movs	r2, #1
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     c66:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     c6a:	4413      	add	r3, r2
     c6c:	b2db      	uxtb	r3, r3
     c6e:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     c72:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     c76:	337c      	adds	r3, #124	; 0x7c
     c78:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     c7c:	8058      	strh	r0, [r3, #2]
	command(0x40, OLEDGlobals);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
	command(0x78, OLEDGlobals);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
	command((0x20 | rows), OLEDGlobals); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
	command(0x01, OLEDGlobals);        // Clear display
	//_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	delay(2);
     c7e:	2002      	movs	r0, #2

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     c80:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     c84:	4413      	add	r3, r2
     c86:	b2db      	uxtb	r3, r3
     c88:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     c8c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     c90:	337c      	adds	r3, #124	; 0x7c
     c92:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     c96:	f8a3 e002 	strh.w	lr, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     c9a:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     c9e:	4413      	add	r3, r2
     ca0:	b2db      	uxtb	r3, r3
     ca2:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     ca6:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     caa:	337c      	adds	r3, #124	; 0x7c
     cac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     cb0:	805f      	strh	r7, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     cb2:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     cb6:	4413      	add	r3, r2
     cb8:	b2db      	uxtb	r3, r3
     cba:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     cbe:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     cc2:	337c      	adds	r3, #124	; 0x7c
     cc4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     cc8:	805e      	strh	r6, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     cca:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     cce:	4413      	add	r3, r2
     cd0:	b2db      	uxtb	r3, r3
     cd2:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     cd6:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     cda:	337c      	adds	r3, #124	; 0x7c
     cdc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     ce0:	805d      	strh	r5, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     ce2:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     ce6:	4413      	add	r3, r2
     ce8:	b2db      	uxtb	r3, r3
     cea:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     cee:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     cf2:	337c      	adds	r3, #124	; 0x7c
     cf4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     cf8:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     cfa:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     cfe:	4413      	add	r3, r2
     d00:	b2db      	uxtb	r3, r3
     d02:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     d06:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     d0a:	337c      	adds	r3, #124	; 0x7c
     d0c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     d10:	805a      	strh	r2, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     d12:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     d16:	4413      	add	r3, r2
     d18:	b2db      	uxtb	r3, r3
     d1a:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
	command(0x40, OLEDGlobals);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
	command(0x78, OLEDGlobals);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
	command((0x20 | rows), OLEDGlobals); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
	command(0x01, OLEDGlobals);        // Clear display
	//_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	delay(2);
     d1e:	f001 ff51 	bl	2bc4 <delay>
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     d22:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     d26:	2180      	movs	r1, #128	; 0x80
     d28:	220c      	movs	r2, #12
     d2a:	337c      	adds	r3, #124	; 0x7c
	//_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	delay(2);
	command(0x80, OLEDGlobals);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
	command(0x0C, OLEDGlobals);        // Display ON/OFF control: display ON, cursor off, blink off
	//_delay_ms(250);           // Waits 250 ms for stabilization purpose after display on
	delay(250);
     d2c:	20fa      	movs	r0, #250	; 0xfa
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     d2e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     d32:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     d34:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     d38:	3301      	adds	r3, #1
     d3a:	b2db      	uxtb	r3, r3
     d3c:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     d40:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     d44:	337c      	adds	r3, #124	; 0x7c
     d46:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     d4a:	805a      	strh	r2, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     d4c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
     d50:	3301      	adds	r3, #1
     d52:	b2db      	uxtb	r3, r3
     d54:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
	command(0x80, OLEDGlobals);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
	command(0x0C, OLEDGlobals);        // Display ON/OFF control: display ON, cursor off, blink off
	//_delay_ms(250);           // Waits 250 ms for stabilization purpose after display on
	delay(250);

}
     d58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	//_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	delay(2);
	command(0x80, OLEDGlobals);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
	command(0x0C, OLEDGlobals);        // Display ON/OFF control: display ON, cursor off, blink off
	//_delay_ms(250);           // Waits 250 ms for stabilization purpose after display on
	delay(250);
     d5c:	f001 bf32 	b.w	2bc4 <delay>

00000d60 <outputS(char volatile*, int, Globals volatile*)>:
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     d60:	f892 32fb 	ldrb.w	r3, [r2, #763]	; 0x2fb
void outputS(volatile char* lineIn, int row, volatile Globals* OLEDGlobals)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r], OLEDGlobals);
     d64:	b2c9      	uxtb	r1, r1
		data(lineIn[c],OLEDGlobals);
	}
}
//overloaded method with volatile keyword. 
void outputS(volatile char* lineIn, int row, volatile Globals* OLEDGlobals)
{
     d66:	b410      	push	{r4}
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     d68:	337c      	adds	r3, #124	; 0x7c
void outputS(volatile char* lineIn, int row, volatile Globals* OLEDGlobals)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r], OLEDGlobals);
     d6a:	4c12      	ldr	r4, [pc, #72]	; (db4 <outputS(char volatile*, int, Globals volatile*)+0x54>)
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
     d6c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
     d70:	5c61      	ldrb	r1, [r4, r1]
     d72:	f100 0414 	add.w	r4, r0, #20
     d76:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     d78:	f892 32fb 	ldrb.w	r3, [r2, #763]	; 0x2fb
     d7c:	3301      	adds	r3, #1
     d7e:	b2db      	uxtb	r3, r3
     d80:	f882 32fb 	strb.w	r3, [r2, #763]	; 0x2fb

	command(new_line[r], OLEDGlobals);
	//20, because our display is 20x4.
	for (c = 0; c < 20; c++)
	{
		data(lineIn[c], OLEDGlobals);
     d84:	f810 1b01 	ldrb.w	r1, [r0], #1

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     d88:	f892 32fb 	ldrb.w	r3, [r2, #763]	; 0x2fb
}

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
     d8c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r], OLEDGlobals);
	//20, because our display is 20x4.
	for (c = 0; c < 20; c++)
     d90:	42a0      	cmp	r0, r4

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
     d92:	f103 037c 	add.w	r3, r3, #124	; 0x7c
     d96:	eb02 0343 	add.w	r3, r2, r3, lsl #1
     d9a:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
     d9c:	f892 32fb 	ldrb.w	r3, [r2, #763]	; 0x2fb
     da0:	f103 0301 	add.w	r3, r3, #1
     da4:	b2db      	uxtb	r3, r3
     da6:	f882 32fb 	strb.w	r3, [r2, #763]	; 0x2fb
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r], OLEDGlobals);
	//20, because our display is 20x4.
	for (c = 0; c < 20; c++)
     daa:	d1eb      	bne.n	d84 <outputS(char volatile*, int, Globals volatile*)+0x24>
	{
		data(lineIn[c], OLEDGlobals);
	}
}
     dac:	f85d 4b04 	ldr.w	r4, [sp], #4
     db0:	4770      	bx	lr
     db2:	bf00      	nop
     db4:	20000678 	.word	0x20000678

00000db8 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>:
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch (numCharacters)
     db8:	3a01      	subs	r2, #1


}
//overloaded function with volatile keyword. 
void numPrinter(volatile char* charArray, uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
     dba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch (numCharacters)
     dbe:	2a04      	cmp	r2, #4
     dc0:	d848      	bhi.n	e54 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x9c>
     dc2:	e8df f002 	tbb	[pc, r2]
     dc6:	887b      	.short	0x887b
     dc8:	4999      	.short	0x4999
     dca:	03          	.byte	0x03
     dcb:	00          	.byte	0x00
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     dcc:	f8df e174 	ldr.w	lr, [pc, #372]	; f44 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x18c>
     dd0:	f04f 0864 	mov.w	r8, #100	; 0x64
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     dd4:	4e59      	ldr	r6, [pc, #356]	; (f3c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x184>)
     dd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     dda:	fbae 4703 	umull	r4, r7, lr, r3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     dde:	4d58      	ldr	r5, [pc, #352]	; (f40 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x188>)
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     de0:	fba6 c403 	umull	ip, r4, r6, r3
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     de4:	fba5 c503 	umull	ip, r5, r5, r3
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     de8:	097f      	lsrs	r7, r7, #5
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     dea:	f8df c15c 	ldr.w	ip, [pc, #348]	; f48 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     dee:	09a4      	lsrs	r4, r4, #6
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     df0:	fb08 3717 	mls	r7, r8, r7, r3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     df4:	0b6d      	lsrs	r5, r5, #13
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     df6:	fbac 9803 	umull	r9, r8, ip, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     dfa:	fb02 3214 	mls	r2, r2, r4, r3
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     dfe:	f242 7410 	movw	r4, #10000	; 0x2710
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     e02:	ea4f 08d8 	mov.w	r8, r8, lsr #3
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     e06:	fb04 3415 	mls	r4, r4, r5, r3
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     e0a:	b2bf      	uxth	r7, r7
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     e0c:	b292      	uxth	r2, r2
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
     e0e:	3530      	adds	r5, #48	; 0x30
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     e10:	eb08 0888 	add.w	r8, r8, r8, lsl #2
		tensPlace = ((inputNumber % 100) / 10) + 48;
     e14:	fbac c707 	umull	ip, r7, ip, r7
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     e18:	fbae e202 	umull	lr, r2, lr, r2
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     e1c:	b2a4      	uxth	r4, r4
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     e1e:	eba3 0348 	sub.w	r3, r3, r8, lsl #1
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
		charArray[(startingPos + 3)] = tensPlace;
     e22:	f101 0c03 	add.w	ip, r1, #3

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     e26:	fba6 6404 	umull	r6, r4, r6, r4
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     e2a:	0952      	lsrs	r2, r2, #5
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     e2c:	08ff      	lsrs	r7, r7, #3
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     e2e:	3330      	adds	r3, #48	; 0x30
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
     e30:	1d0e      	adds	r6, r1, #4
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     e32:	3230      	adds	r2, #48	; 0x30
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     e34:	b2db      	uxtb	r3, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
     e36:	3730      	adds	r7, #48	; 0x30
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     e38:	09a4      	lsrs	r4, r4, #6
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
		charArray[(startingPos + 3)] = tensPlace;
		charArray[(startingPos + 2)] = hunderedsPlace;
     e3a:	f101 0e02 	add.w	lr, r1, #2
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
     e3e:	5583      	strb	r3, [r0, r6]
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     e40:	b2d2      	uxtb	r2, r2
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     e42:	b2ff      	uxtb	r7, r7
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
     e44:	3430      	adds	r4, #48	; 0x30
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
		charArray[(startingPos + 3)] = tensPlace;
		charArray[(startingPos + 2)] = hunderedsPlace;
		charArray[(startingPos + 1)] = thousandsPlace;
     e46:	1c4b      	adds	r3, r1, #1
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
		charArray[(startingPos + 3)] = tensPlace;
     e48:	f800 700c 	strb.w	r7, [r0, ip]
		charArray[(startingPos + 2)] = hunderedsPlace;
     e4c:	f800 200e 	strb.w	r2, [r0, lr]
		charArray[(startingPos + 1)] = thousandsPlace;
     e50:	54c4      	strb	r4, [r0, r3]
		charArray[startingPos] = tenThousandsPlace;
     e52:	5445      	strb	r5, [r0, r1]
     e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     e58:	4f3a      	ldr	r7, [pc, #232]	; (f44 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x18c>)
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     e5a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
     e5e:	4d37      	ldr	r5, [pc, #220]	; (f3c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x184>)
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     e60:	2264      	movs	r2, #100	; 0x64
     e62:	fba7 e403 	umull	lr, r4, r7, r3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     e66:	fba5 e503 	umull	lr, r5, r5, r3
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     e6a:	f8df e0dc 	ldr.w	lr, [pc, #220]	; f48 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>
		tensPlace = ((inputNumber % 100) / 10) + 48;
     e6e:	0964      	lsrs	r4, r4, #5
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     e70:	09ad      	lsrs	r5, r5, #6
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     e72:	fb02 3214 	mls	r2, r2, r4, r3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     e76:	fb06 3415 	mls	r4, r6, r5, r3
		thousandsPlace = (inputNumber / 1000) + 48;
     e7a:	3530      	adds	r5, #48	; 0x30
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     e7c:	fbae c603 	umull	ip, r6, lr, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
     e80:	b292      	uxth	r2, r2
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     e82:	b2a4      	uxth	r4, r4
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     e84:	08f6      	lsrs	r6, r6, #3
		tensPlace = ((inputNumber % 100) / 10) + 48;
     e86:	fbae e202 	umull	lr, r2, lr, r2
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     e8a:	fba7 7404 	umull	r7, r4, r7, r4
		thousandsPlace = (inputNumber / 1000) + 48;
		charArray[(startingPos + 3)] = onesPlace;
		charArray[(startingPos + 2)] = tensPlace;
     e8e:	f101 0e02 	add.w	lr, r1, #2
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     e92:	eb06 0686 	add.w	r6, r6, r6, lsl #2
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = (inputNumber / 1000) + 48;
		charArray[(startingPos + 3)] = onesPlace;
     e96:	1ccf      	adds	r7, r1, #3
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     e98:	0964      	lsrs	r4, r4, #5
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     e9a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = (inputNumber / 1000) + 48;
		charArray[(startingPos + 3)] = onesPlace;
		charArray[(startingPos + 2)] = tensPlace;
		charArray[(startingPos + 1)] = hunderedsPlace;
     e9e:	1c4e      	adds	r6, r1, #1
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     ea0:	08d2      	lsrs	r2, r2, #3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     ea2:	3430      	adds	r4, #48	; 0x30
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     ea4:	3330      	adds	r3, #48	; 0x30
		tensPlace = ((inputNumber % 100) / 10) + 48;
     ea6:	3230      	adds	r2, #48	; 0x30
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
     ea8:	b2e4      	uxtb	r4, r4
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     eaa:	b2db      	uxtb	r3, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
     eac:	b2d2      	uxtb	r2, r2
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = (inputNumber / 1000) + 48;
		charArray[(startingPos + 3)] = onesPlace;
     eae:	55c3      	strb	r3, [r0, r7]
		charArray[(startingPos + 2)] = tensPlace;
     eb0:	f800 200e 	strb.w	r2, [r0, lr]
		charArray[(startingPos + 1)] = hunderedsPlace;
     eb4:	5584      	strb	r4, [r0, r6]
		charArray[startingPos] = thousandsPlace;
     eb6:	5445      	strb	r5, [r0, r1]
		break;
     eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	{
	case 0:
		break;

	case 1:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     ebc:	4a22      	ldr	r2, [pc, #136]	; (f48 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>)
     ebe:	fba2 4203 	umull	r4, r2, r2, r3
     ec2:	08d2      	lsrs	r2, r2, #3
     ec4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     ec8:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
     ecc:	3330      	adds	r3, #48	; 0x30
     ece:	b2db      	uxtb	r3, r3
		charArray[startingPos] = onesPlace;
     ed0:	5443      	strb	r3, [r0, r1]
		break;
     ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	case 2:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     ed6:	4a1c      	ldr	r2, [pc, #112]	; (f48 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>)
		tensPlace = (inputNumber / 10) + 48;
		charArray[(startingPos + 1)] = onesPlace;
     ed8:	1c4d      	adds	r5, r1, #1
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
		break;

	case 2:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     eda:	fba2 4203 	umull	r4, r2, r2, r3
     ede:	08d2      	lsrs	r2, r2, #3
     ee0:	eb02 0482 	add.w	r4, r2, r2, lsl #2
		tensPlace = (inputNumber / 10) + 48;
     ee4:	3230      	adds	r2, #48	; 0x30
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
		break;

	case 2:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     ee6:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
		tensPlace = (inputNumber / 10) + 48;
     eea:	b2d2      	uxtb	r2, r2
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
		break;

	case 2:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     eec:	3330      	adds	r3, #48	; 0x30
     eee:	b2db      	uxtb	r3, r3
		tensPlace = (inputNumber / 10) + 48;
		charArray[(startingPos + 1)] = onesPlace;
     ef0:	5543      	strb	r3, [r0, r5]
		charArray[startingPos] = tensPlace;
     ef2:	5442      	strb	r2, [r0, r1]
		break;
     ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     ef8:	4f12      	ldr	r7, [pc, #72]	; (f44 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x18c>)
     efa:	2264      	movs	r2, #100	; 0x64
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     efc:	f8df e048 	ldr.w	lr, [pc, #72]	; f48 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = (inputNumber / 100) + 48;
		charArray[(startingPos + 2)] = onesPlace;
     f00:	1c8e      	adds	r6, r1, #2
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     f02:	fba7 4703 	umull	r4, r7, r7, r3
		hunderedsPlace = (inputNumber / 100) + 48;
		charArray[(startingPos + 2)] = onesPlace;
		charArray[(startingPos + 1)] = tensPlace;
     f06:	1c4d      	adds	r5, r1, #1
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     f08:	fbae c403 	umull	ip, r4, lr, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
     f0c:	097f      	lsrs	r7, r7, #5
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     f0e:	08e4      	lsrs	r4, r4, #3
		tensPlace = ((inputNumber % 100) / 10) + 48;
     f10:	fb02 3217 	mls	r2, r2, r7, r3
		hunderedsPlace = (inputNumber / 100) + 48;
     f14:	3730      	adds	r7, #48	; 0x30
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     f16:	eb04 0484 	add.w	r4, r4, r4, lsl #2
		tensPlace = ((inputNumber % 100) / 10) + 48;
     f1a:	b292      	uxth	r2, r2
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     f1c:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
		tensPlace = ((inputNumber % 100) / 10) + 48;
     f20:	fbae e202 	umull	lr, r2, lr, r2
		hunderedsPlace = (inputNumber / 100) + 48;
     f24:	b2ff      	uxtb	r7, r7
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     f26:	3330      	adds	r3, #48	; 0x30
		tensPlace = ((inputNumber % 100) / 10) + 48;
     f28:	08d2      	lsrs	r2, r2, #3
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
     f2a:	b2db      	uxtb	r3, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
     f2c:	3230      	adds	r2, #48	; 0x30
		hunderedsPlace = (inputNumber / 100) + 48;
		charArray[(startingPos + 2)] = onesPlace;
     f2e:	5583      	strb	r3, [r0, r6]
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
     f30:	b2d2      	uxtb	r2, r2
		hunderedsPlace = (inputNumber / 100) + 48;
		charArray[(startingPos + 2)] = onesPlace;
		charArray[(startingPos + 1)] = tensPlace;
     f32:	5542      	strb	r2, [r0, r5]
		charArray[startingPos] = hunderedsPlace;
     f34:	5447      	strb	r7, [r0, r1]
		break;
     f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f3a:	bf00      	nop
     f3c:	10624dd3 	.word	0x10624dd3
     f40:	d1b71759 	.word	0xd1b71759
     f44:	51eb851f 	.word	0x51eb851f
     f48:	cccccccd 	.word	0xcccccccd

00000f4c <TeensyTimerTool::BaseTimer::BaseTimer(TeensyTimerTool::ITimerChannel* (*)(), bool)>:
#include "types.h"

namespace TeensyTimerTool
{

    BaseTimer::BaseTimer(TimerGenerator* generator, bool periodic)
     f4c:	b410      	push	{r4}
        : timerGenerator(generator)
     f4e:	2400      	movs	r4, #0
     f50:	6001      	str	r1, [r0, #0]
    {
        this->timerGenerator = generator;
        this->timerChannel = nullptr;
        this->isPeriodic = periodic;
     f52:	7202      	strb	r2, [r0, #8]

namespace TeensyTimerTool
{

    BaseTimer::BaseTimer(TimerGenerator* generator, bool periodic)
        : timerGenerator(generator)
     f54:	60c4      	str	r4, [r0, #12]
    {
        this->timerGenerator = generator;
        this->timerChannel = nullptr;
     f56:	6044      	str	r4, [r0, #4]
        this->isPeriodic = periodic;
    }
     f58:	f85d 4b04 	ldr.w	r4, [sp], #4
     f5c:	4770      	bx	lr
     f5e:	bf00      	nop

00000f60 <TeensyTimerTool::ITimerChannel::getPeriod()>:

        virtual float getMaxPeriod() const = 0;
        virtual errorCode setPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setCurrentPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setNextPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual uint32_t getPeriod() { return 0; }
     f60:	2000      	movs	r0, #0
     f62:	4770      	bx	lr

00000f64 <TeensyTimerTool::TMRChannel::~TMRChannel()>:
        setPrescaler(TMR_DEFAULT_PSC);
    }

    TMRChannel::~TMRChannel()
    {
    }
     f64:	4770      	bx	lr
     f66:	bf00      	nop

00000f68 <TeensyTimerTool::TMRChannel::start()>:

    errorCode TMRChannel::start()
    {
        regs->CNTR = 0x0000;
     f68:	6882      	ldr	r2, [r0, #8]
     f6a:	2000      	movs	r0, #0
     f6c:	8150      	strh	r0, [r2, #10]
        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
     f6e:	8a93      	ldrh	r3, [r2, #20]
     f70:	f023 0310 	bic.w	r3, r3, #16
     f74:	041b      	lsls	r3, r3, #16
     f76:	0c1b      	lsrs	r3, r3, #16
     f78:	8293      	strh	r3, [r2, #20]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;
     f7a:	8a93      	ldrh	r3, [r2, #20]
     f7c:	b29b      	uxth	r3, r3
     f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     f82:	8293      	strh	r3, [r2, #20]
        return errorCode::OK;
    }
     f84:	4770      	bx	lr
     f86:	bf00      	nop

00000f88 <TeensyTimerTool::TMRChannel::stop()>:

    errorCode TMRChannel::stop()
    {
        regs->CSCTRL &= ~TMR_CSCTRL_TCF1EN;
     f88:	6882      	ldr	r2, [r0, #8]
        return errorCode::OK;
    }
     f8a:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode TMRChannel::stop()
    {
        regs->CSCTRL &= ~TMR_CSCTRL_TCF1EN;
     f8c:	8a93      	ldrh	r3, [r2, #20]
     f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
     f92:	041b      	lsls	r3, r3, #16
     f94:	0c1b      	lsrs	r3, r3, #16
     f96:	8293      	strh	r3, [r2, #20]
        return errorCode::OK;
    }
     f98:	4770      	bx	lr
     f9a:	bf00      	nop

00000f9c <std::function<void ()>::~function()>:

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     f9c:	6883      	ldr	r3, [r0, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
     f9e:	b510      	push	{r4, lr}
     fa0:	4604      	mov	r4, r0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     fa2:	b113      	cbz	r3, faa <std::function<void ()>::~function()+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     fa4:	2203      	movs	r2, #3
     fa6:	4601      	mov	r1, r0
     fa8:	4798      	blx	r3
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
     faa:	4620      	mov	r0, r4
     fac:	bd10      	pop	{r4, pc}
     fae:	bf00      	nop

00000fb0 <TeensyTimerTool::TMRChannel::trigger(float)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
     fb0:	eddf 7a1b 	vldr	s15, [pc, #108]	; 1020 <TeensyTimerTool::TMRChannel::trigger(float)+0x70>
     fb4:	edd0 6a04 	vldr	s13, [r0, #16]
     fb8:	ee20 0a27 	vmul.f32	s0, s0, s15
    // }

    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;
     fbc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 1024 <TeensyTimerTool::TMRChannel::trigger(float)+0x74>
    // {
    //     return trigger((float)tcnt);
    // }

    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
     fc0:	b430      	push	{r4, r5}
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
     fc2:	eec0 7a26 	vdiv.f32	s15, s0, s13
    // {
    //     return trigger((float)tcnt);
    // }

    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
     fc6:	b082      	sub	sp, #8
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;
     fc8:	eef4 7ac7 	vcmpe.f32	s15, s14
     fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fd0:	dc23      	bgt.n	101a <TeensyTimerTool::TMRChannel::trigger(float)+0x6a>
     fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     fd6:	edcd 7a01 	vstr	s15, [sp, #4]
     fda:	f8bd 4004 	ldrh.w	r4, [sp, #4]

        regs->CTRL = 0x0000;
     fde:	6883      	ldr	r3, [r0, #8]
     fe0:	2200      	movs	r2, #0
        regs->CNTR = 0x0000;

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
     fe2:	6941      	ldr	r1, [r0, #20]
     fe4:	f242 0560 	movw	r5, #8288	; 0x2060
    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;

        regs->CTRL = 0x0000;
     fe8:	819a      	strh	r2, [r3, #12]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;

        return errorCode::OK;
    }
     fea:	4610      	mov	r0, r2
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;

        regs->CTRL = 0x0000;
        regs->LOAD = 0x0000;
     fec:	80da      	strh	r2, [r3, #6]
        regs->CNTR = 0x0000;

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
     fee:	0249      	lsls	r1, r1, #9
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;

        regs->CTRL = 0x0000;
        regs->LOAD = 0x0000;
        regs->COMP1 = reload;
     ff0:	801c      	strh	r4, [r3, #0]
        regs->CMPLD1 = reload;
     ff2:	821c      	strh	r4, [r3, #16]
        regs->CNTR = 0x0000;

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
     ff4:	f401 51f0 	and.w	r1, r1, #7680	; 0x1e00

        regs->CTRL = 0x0000;
        regs->LOAD = 0x0000;
        regs->COMP1 = reload;
        regs->CMPLD1 = reload;
        regs->CNTR = 0x0000;
     ff8:	815a      	strh	r2, [r3, #10]

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
     ffa:	8a9a      	ldrh	r2, [r3, #20]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
     ffc:	430d      	orrs	r5, r1
        regs->LOAD = 0x0000;
        regs->COMP1 = reload;
        regs->CMPLD1 = reload;
        regs->CNTR = 0x0000;

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
     ffe:	f022 0210 	bic.w	r2, r2, #16
    1002:	0412      	lsls	r2, r2, #16
    1004:	0c12      	lsrs	r2, r2, #16
    1006:	829a      	strh	r2, [r3, #20]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;
    1008:	8a9a      	ldrh	r2, [r3, #20]
    100a:	b292      	uxth	r2, r2
    100c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1010:	829a      	strh	r2, [r3, #20]

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    1012:	819d      	strh	r5, [r3, #12]

        return errorCode::OK;
    }
    1014:	b002      	add	sp, #8
    1016:	bc30      	pop	{r4, r5}
    1018:	4770      	bx	lr
    // }

    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;
    101a:	f64f 74ff 	movw	r4, #65535	; 0xffff
    101e:	e7de      	b.n	fde <TeensyTimerTool::TMRChannel::trigger(float)+0x2e>
    1020:	43160000 	.word	0x43160000
    1024:	477fff00 	.word	0x477fff00

00001028 <TeensyTimerTool::TMRChannel::getMaxPeriod() const>:
        pscBits = 0b1000 | (psc & 0b0111);
    }

    float TMRChannel::getMaxPeriod() const
    {
        return pscValue / 150'000'000.0f * 0xFFFE;
    1028:	edd0 6a04 	vldr	s13, [r0, #16]
    102c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1040 <TeensyTimerTool::TMRChannel::getMaxPeriod() const+0x18>
    1030:	eddf 7a04 	vldr	s15, [pc, #16]	; 1044 <TeensyTimerTool::TMRChannel::getMaxPeriod() const+0x1c>
    1034:	ee86 0a87 	vdiv.f32	s0, s13, s14
    }
    1038:	ee20 0a27 	vmul.f32	s0, s0, s15
    103c:	4770      	bx	lr
    103e:	bf00      	nop
    1040:	4d0f0d18 	.word	0x4d0f0d18
    1044:	477ffe00 	.word	0x477ffe00

00001048 <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1048:	ee07 1a90 	vmov	s15, r1
    104c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 10a0 <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)+0x58>
    1050:	ed90 6a04 	vldr	s12, [r0, #16]
    1054:	eef8 7a67 	vcvt.f32.u32	s15, s15

    errorCode TMRChannel::setCurrentPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    1058:	eddf 6a12 	vldr	s13, [pc, #72]	; 10a4 <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)+0x5c>
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    105c:	ee67 7a87 	vmul.f32	s15, s15, s14
    1060:	ee87 7a86 	vdiv.f32	s14, s15, s12

    errorCode TMRChannel::setCurrentPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    1064:	eeb4 7ae6 	vcmpe.f32	s14, s13
    1068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    106c:	d814      	bhi.n	1098 <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)+0x50>
        {
            return _setCurrentPeriod(t);
    106e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
            return errorCode::OK;
        }
    }

    errorCode TMRChannel::setCurrentPeriod(uint32_t us)
    {
    1072:	b082      	sub	sp, #8
    1074:	6881      	ldr	r1, [r0, #8]
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
        {
            return _setCurrentPeriod(t);
    1076:	edcd 7a01 	vstr	s15, [sp, #4]
    107a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    }

    errorCode TMRChannel::_setCurrentPeriod(const uint16_t cnt)
    {

        regs->COMP1 = cnt;
    107e:	800b      	strh	r3, [r1, #0]

        //Do we need to wait some cycle for IP bus to update here / cache flush?
        //asm volatile("dsb");

        if (regs->CNTR > cnt)
    1080:	894a      	ldrh	r2, [r1, #10]
    1082:	b292      	uxth	r2, r2
    1084:	4293      	cmp	r3, r2
    1086:	d302      	bcc.n	108e <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)+0x46>
            return errorCode::triggeredLate;
        }

        else
        {
            return errorCode::OK;
    1088:	2000      	movs	r0, #0
            return _setCurrentPeriod(t);
        } else
        {
            return errorCode::periodOverflow;
        }
    }
    108a:	b002      	add	sp, #8
    108c:	4770      	bx	lr

        if (regs->CNTR > cnt)
        {
            //if counter alrready went over setted value force a triggering
            regs->CNTR = cnt;
            return errorCode::triggeredLate;
    108e:	f06f 0065 	mvn.w	r0, #101	; 0x65
        //asm volatile("dsb");

        if (regs->CNTR > cnt)
        {
            //if counter alrready went over setted value force a triggering
            regs->CNTR = cnt;
    1092:	814b      	strh	r3, [r1, #10]
            return _setCurrentPeriod(t);
        } else
        {
            return errorCode::periodOverflow;
        }
    }
    1094:	b002      	add	sp, #8
    1096:	4770      	bx	lr
        if (t <= 0xFFFF)
        {
            return _setCurrentPeriod(t);
        } else
        {
            return errorCode::periodOverflow;
    1098:	f06f 0063 	mvn.w	r0, #99	; 0x63
        }
    }
    109c:	4770      	bx	lr
    109e:	bf00      	nop
    10a0:	43160000 	.word	0x43160000
    10a4:	477fff00 	.word	0x477fff00

000010a8 <TeensyTimerTool::TMRChannel::setNextPeriod(unsigned long)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    10a8:	ee07 1a90 	vmov	s15, r1
    10ac:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 10ec <TeensyTimerTool::TMRChannel::setNextPeriod(unsigned long)+0x44>
    10b0:	ed90 6a04 	vldr	s12, [r0, #16]
    10b4:	eef8 7a67 	vcvt.f32.u32	s15, s15

    errorCode TMRChannel::setNextPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    10b8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 10f0 <TeensyTimerTool::TMRChannel::setNextPeriod(unsigned long)+0x48>
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    10bc:	ee67 7a87 	vmul.f32	s15, s15, s14
    10c0:	ee87 7a86 	vdiv.f32	s14, s15, s12

    errorCode TMRChannel::setNextPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    10c4:	eeb4 7ae6 	vcmpe.f32	s14, s13
    10c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10cc:	d80b      	bhi.n	10e6 <TeensyTimerTool::TMRChannel::setNextPeriod(unsigned long)+0x3e>
        {
            _setNextPeriod(t);
    10ce:	eefc 7ac7 	vcvt.u32.f32	s15, s14
            return errorCode::periodOverflow;
        }
    }

    errorCode TMRChannel::setNextPeriod(uint32_t us)
    {
    10d2:	b082      	sub	sp, #8
    10d4:	6882      	ldr	r2, [r0, #8]
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
        {
            _setNextPeriod(t);
            return errorCode::OK;
    10d6:	2000      	movs	r0, #0
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
        {
            _setNextPeriod(t);
    10d8:	edcd 7a01 	vstr	s15, [sp, #4]
    10dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        return pscValue / 150'000'000.0f * 0xFFFE;
    }

    void TMRChannel::_setNextPeriod(const uint16_t cnt)
    {
        regs->CMPLD1 = cnt;
    10e0:	8213      	strh	r3, [r2, #16]
            return errorCode::OK;
        } else
        {
            return errorCode::periodOverflow;
        }
    }
    10e2:	b002      	add	sp, #8
    10e4:	4770      	bx	lr
        {
            _setNextPeriod(t);
            return errorCode::OK;
        } else
        {
            return errorCode::periodOverflow;
    10e6:	f06f 0063 	mvn.w	r0, #99	; 0x63
    10ea:	4770      	bx	lr
    10ec:	43160000 	.word	0x43160000
    10f0:	477fff00 	.word	0x477fff00

000010f4 <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    10f4:	ee07 1a90 	vmov	s15, r1
    10f8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 114c <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)+0x58>
    10fc:	ed90 6a04 	vldr	s12, [r0, #16]
    1100:	eef8 7a67 	vcvt.f32.u32	s15, s15

    errorCode TMRChannel::setPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    1104:	eddf 6a12 	vldr	s13, [pc, #72]	; 1150 <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)+0x5c>
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1108:	ee67 7a87 	vmul.f32	s15, s15, s14
    110c:	ee87 7a86 	vdiv.f32	s14, s15, s12

    errorCode TMRChannel::setPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    1110:	eeb4 7ae6 	vcmpe.f32	s14, s13
    1114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1118:	d815      	bhi.n	1146 <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)+0x52>
        {
            _setNextPeriod(t);
    111a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
            return errorCode::periodOverflow;
        }
    }

    errorCode TMRChannel::setPeriod(uint32_t us)
    {
    111e:	b082      	sub	sp, #8
    1120:	6882      	ldr	r2, [r0, #8]
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
        {
            _setNextPeriod(t);
    1122:	edcd 7a01 	vstr	s15, [sp, #4]
    1126:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        return pscValue / 150'000'000.0f * 0xFFFE;
    }

    void TMRChannel::_setNextPeriod(const uint16_t cnt)
    {
        regs->CMPLD1 = cnt;
    112a:	8213      	strh	r3, [r2, #16]
    }

    errorCode TMRChannel::_setCurrentPeriod(const uint16_t cnt)
    {

        regs->COMP1 = cnt;
    112c:	8013      	strh	r3, [r2, #0]

        //Do we need to wait some cycle for IP bus to update here / cache flush?
        //asm volatile("dsb");

        if (regs->CNTR > cnt)
    112e:	8951      	ldrh	r1, [r2, #10]
    1130:	b289      	uxth	r1, r1
    1132:	428b      	cmp	r3, r1
    1134:	d302      	bcc.n	113c <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)+0x48>
            return errorCode::triggeredLate;
        }

        else
        {
            return errorCode::OK;
    1136:	2000      	movs	r0, #0

        } else
        {
            return errorCode::periodOverflow;
        }
    }
    1138:	b002      	add	sp, #8
    113a:	4770      	bx	lr

        if (regs->CNTR > cnt)
        {
            //if counter alrready went over setted value force a triggering
            regs->CNTR = cnt;
            return errorCode::triggeredLate;
    113c:	f06f 0065 	mvn.w	r0, #101	; 0x65
        //asm volatile("dsb");

        if (regs->CNTR > cnt)
        {
            //if counter alrready went over setted value force a triggering
            regs->CNTR = cnt;
    1140:	8153      	strh	r3, [r2, #10]

        } else
        {
            return errorCode::periodOverflow;
        }
    }
    1142:	b002      	add	sp, #8
    1144:	4770      	bx	lr
            _setNextPeriod(t);
            return _setCurrentPeriod(t);

        } else
        {
            return errorCode::periodOverflow;
    1146:	f06f 0063 	mvn.w	r0, #99	; 0x63
        }
    }
    114a:	4770      	bx	lr
    114c:	43160000 	.word	0x43160000
    1150:	477fff00 	.word	0x477fff00

00001154 <TeensyTimerTool::GptChannel::getMaxPeriod() const>:

        inline errorCode trigger(float delay) override;
        inline errorCode triggerDirect(uint32_t delay) override;
        inline errorCode getTriggerReload(float delay, uint32_t* reload) override;

        inline float getMaxPeriod() const override { return getMaxMicros() / 1E6; }
    1154:	eddf 6a05 	vldr	s13, [pc, #20]	; 116c <TeensyTimerTool::GptChannel::getMaxPeriod() const+0x18>
    1158:	ed90 7a05 	vldr	s14, [r0, #20]
    115c:	eddf 7a04 	vldr	s15, [pc, #16]	; 1170 <TeensyTimerTool::GptChannel::getMaxPeriod() const+0x1c>
    1160:	ee86 0a87 	vdiv.f32	s0, s13, s14
    1164:	ee80 0a27 	vdiv.f32	s0, s0, s15
    1168:	4770      	bx	lr
    116a:	bf00      	nop
    116c:	4f800000 	.word	0x4f800000
    1170:	49742400 	.word	0x49742400

00001174 <TeensyTimerTool::GptChannel::start()>:
        return errorCode::OK;
    }

    errorCode GptChannel::start()
    {
        regs->SR = 0x3F;         // clear all interupt flags
    1174:	68c3      	ldr	r3, [r0, #12]
    1176:	213f      	movs	r1, #63	; 0x3f
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    1178:	2201      	movs	r2, #1
        regs->CR |= GPT_CR_EN;   // enable timer
        return errorCode::OK;
    }
    117a:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode GptChannel::start()
    {
        regs->SR = 0x3F;         // clear all interupt flags
    117c:	6099      	str	r1, [r3, #8]
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    117e:	60da      	str	r2, [r3, #12]
        regs->CR |= GPT_CR_EN;   // enable timer
    1180:	681a      	ldr	r2, [r3, #0]
    1182:	f042 0201 	orr.w	r2, r2, #1
    1186:	601a      	str	r2, [r3, #0]
        return errorCode::OK;
    }
    1188:	4770      	bx	lr
    118a:	bf00      	nop

0000118c <TeensyTimerTool::GptChannel::stop()>:

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    118c:	68c3      	ldr	r3, [r0, #12]
        regs->IR = 0;
    118e:	2100      	movs	r1, #0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1190:	681a      	ldr	r2, [r3, #0]
        regs->IR = 0;
        return errorCode::OK;
    }
    1192:	4608      	mov	r0, r1
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1194:	f022 0201 	bic.w	r2, r2, #1
    1198:	601a      	str	r2, [r3, #0]
        regs->IR = 0;
    119a:	60d9      	str	r1, [r3, #12]
        return errorCode::OK;
    }
    119c:	4770      	bx	lr
    119e:	bf00      	nop

000011a0 <TeensyTimerTool::GptChannel::triggerDirect(unsigned long)>:
    {
        return triggerDirect(microsecondToCycles(delay));
    }

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
    11a0:	b410      	push	{r4}
        regs->SR = 0x3F;         // clear all interupt flags
    11a2:	68c3      	ldr	r3, [r0, #12]
    11a4:	243f      	movs	r4, #63	; 0x3f
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    11a6:	2201      	movs	r2, #1
        regs->OCR1 = reload;     // set overflow value
        regs->CR |= GPT_CR_EN;   // enable timer

        return errorCode::OK;
    }
    11a8:	2000      	movs	r0, #0
        return triggerDirect(microsecondToCycles(delay));
    }

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
    11aa:	609c      	str	r4, [r3, #8]
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    11ac:	60da      	str	r2, [r3, #12]
        regs->OCR1 = reload;     // set overflow value
    11ae:	6119      	str	r1, [r3, #16]
        regs->CR |= GPT_CR_EN;   // enable timer
    11b0:	681a      	ldr	r2, [r3, #0]

        return errorCode::OK;
    }
    11b2:	f85d 4b04 	ldr.w	r4, [sp], #4
    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
        regs->OCR1 = reload;     // set overflow value
        regs->CR |= GPT_CR_EN;   // enable timer
    11b6:	f042 0201 	orr.w	r2, r2, #1
    11ba:	601a      	str	r2, [r3, #0]

        return errorCode::OK;
    }
    11bc:	4770      	bx	lr
    11be:	bf00      	nop

000011c0 <TeensyTimerTool::TMR_t<0u>::isr()>:
        }
        return nullptr;
    }

    template <unsigned m>
    void TMR_t<m>::isr()
    11c0:	b510      	push	{r4, lr}
    11c2:	4c25      	ldr	r4, [pc, #148]	; (1258 <TeensyTimerTool::TMR_t<0u>::isr()+0x98>)
    {
        // no loop to gain some time by avoiding indirections and pointer calculations
        if (callbacks[0] != nullptr && pCH0->CSCTRL & TMR_CSCTRL_TCF1)
    11c4:	68a3      	ldr	r3, [r4, #8]
    11c6:	b16b      	cbz	r3, 11e4 <TeensyTimerTool::TMR_t<0u>::isr()+0x24>
    11c8:	4b24      	ldr	r3, [pc, #144]	; (125c <TeensyTimerTool::TMR_t<0u>::isr()+0x9c>)
    11ca:	681a      	ldr	r2, [r3, #0]
    11cc:	8a93      	ldrh	r3, [r2, #20]
    11ce:	06d9      	lsls	r1, r3, #27
    11d0:	d508      	bpl.n	11e4 <TeensyTimerTool::TMR_t<0u>::isr()+0x24>
        {
            pCH0->CSCTRL &= ~TMR_CSCTRL_TCF1;
    11d2:	8a93      	ldrh	r3, [r2, #20]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    11d4:	4620      	mov	r0, r4
    11d6:	68e1      	ldr	r1, [r4, #12]
    11d8:	f023 0310 	bic.w	r3, r3, #16
    11dc:	041b      	lsls	r3, r3, #16
    11de:	0c1b      	lsrs	r3, r3, #16
    11e0:	8293      	strh	r3, [r2, #20]
    11e2:	4788      	blx	r1
            callbacks[0]();
        }

        if (callbacks[1] != nullptr && pCH1->CSCTRL & TMR_CSCTRL_TCF1)
    11e4:	69a3      	ldr	r3, [r4, #24]
    11e6:	491c      	ldr	r1, [pc, #112]	; (1258 <TeensyTimerTool::TMR_t<0u>::isr()+0x98>)
    11e8:	b173      	cbz	r3, 1208 <TeensyTimerTool::TMR_t<0u>::isr()+0x48>
    11ea:	4b1d      	ldr	r3, [pc, #116]	; (1260 <TeensyTimerTool::TMR_t<0u>::isr()+0xa0>)
    11ec:	681a      	ldr	r2, [r3, #0]
    11ee:	8a93      	ldrh	r3, [r2, #20]
    11f0:	06db      	lsls	r3, r3, #27
    11f2:	d509      	bpl.n	1208 <TeensyTimerTool::TMR_t<0u>::isr()+0x48>
        {
            pCH1->CSCTRL &= ~TMR_CSCTRL_TCF1;
    11f4:	8a93      	ldrh	r3, [r2, #20]
    11f6:	f101 0010 	add.w	r0, r1, #16
    11fa:	69c9      	ldr	r1, [r1, #28]
    11fc:	f023 0310 	bic.w	r3, r3, #16
    1200:	041b      	lsls	r3, r3, #16
    1202:	0c1b      	lsrs	r3, r3, #16
    1204:	8293      	strh	r3, [r2, #20]
    1206:	4788      	blx	r1
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
    1208:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    120a:	4913      	ldr	r1, [pc, #76]	; (1258 <TeensyTimerTool::TMR_t<0u>::isr()+0x98>)
    120c:	b123      	cbz	r3, 1218 <TeensyTimerTool::TMR_t<0u>::isr()+0x58>
    120e:	4b15      	ldr	r3, [pc, #84]	; (1264 <TeensyTimerTool::TMR_t<0u>::isr()+0xa4>)
    1210:	681a      	ldr	r2, [r3, #0]
    1212:	8a93      	ldrh	r3, [r2, #20]
    1214:	06d8      	lsls	r0, r3, #27
    1216:	d414      	bmi.n	1242 <TeensyTimerTool::TMR_t<0u>::isr()+0x82>
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
            callbacks[2]();
        }

        if (callbacks[3] != nullptr && pCH3->CSCTRL & TMR_CSCTRL_TCF1)
    1218:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    121a:	490f      	ldr	r1, [pc, #60]	; (1258 <TeensyTimerTool::TMR_t<0u>::isr()+0x98>)
    121c:	b173      	cbz	r3, 123c <TeensyTimerTool::TMR_t<0u>::isr()+0x7c>
    121e:	4b12      	ldr	r3, [pc, #72]	; (1268 <TeensyTimerTool::TMR_t<0u>::isr()+0xa8>)
    1220:	681a      	ldr	r2, [r3, #0]
    1222:	8a93      	ldrh	r3, [r2, #20]
    1224:	06db      	lsls	r3, r3, #27
    1226:	d509      	bpl.n	123c <TeensyTimerTool::TMR_t<0u>::isr()+0x7c>
        {
            pCH3->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1228:	8a93      	ldrh	r3, [r2, #20]
    122a:	f101 0030 	add.w	r0, r1, #48	; 0x30
    122e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    1230:	f023 0310 	bic.w	r3, r3, #16
    1234:	041b      	lsls	r3, r3, #16
    1236:	0c1b      	lsrs	r3, r3, #16
    1238:	8293      	strh	r3, [r2, #20]
    123a:	4788      	blx	r1
            callbacks[3]();
        }
        asm volatile("dsb"); //wait until register changes propagated through the cache
    123c:	f3bf 8f4f 	dsb	sy
    }
    1240:	bd10      	pop	{r4, pc}
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1242:	8a93      	ldrh	r3, [r2, #20]
    1244:	f101 0020 	add.w	r0, r1, #32
    1248:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    124a:	f023 0310 	bic.w	r3, r3, #16
    124e:	041b      	lsls	r3, r3, #16
    1250:	0c1b      	lsrs	r3, r3, #16
    1252:	8293      	strh	r3, [r2, #20]
    1254:	4788      	blx	r1
    1256:	e7df      	b.n	1218 <TeensyTimerTool::TMR_t<0u>::isr()+0x58>
    1258:	20001930 	.word	0x20001930
    125c:	2000192c 	.word	0x2000192c
    1260:	2000183c 	.word	0x2000183c
    1264:	20001838 	.word	0x20001838
    1268:	20001834 	.word	0x20001834

0000126c <TeensyTimerTool::TMR_t<1u>::isr()>:
        }
        return nullptr;
    }

    template <unsigned m>
    void TMR_t<m>::isr()
    126c:	b510      	push	{r4, lr}
    126e:	4c25      	ldr	r4, [pc, #148]	; (1304 <TeensyTimerTool::TMR_t<1u>::isr()+0x98>)
    {
        // no loop to gain some time by avoiding indirections and pointer calculations
        if (callbacks[0] != nullptr && pCH0->CSCTRL & TMR_CSCTRL_TCF1)
    1270:	68a3      	ldr	r3, [r4, #8]
    1272:	b16b      	cbz	r3, 1290 <TeensyTimerTool::TMR_t<1u>::isr()+0x24>
    1274:	4b24      	ldr	r3, [pc, #144]	; (1308 <TeensyTimerTool::TMR_t<1u>::isr()+0x9c>)
    1276:	681a      	ldr	r2, [r3, #0]
    1278:	8a93      	ldrh	r3, [r2, #20]
    127a:	06d9      	lsls	r1, r3, #27
    127c:	d508      	bpl.n	1290 <TeensyTimerTool::TMR_t<1u>::isr()+0x24>
        {
            pCH0->CSCTRL &= ~TMR_CSCTRL_TCF1;
    127e:	8a93      	ldrh	r3, [r2, #20]
    1280:	4620      	mov	r0, r4
    1282:	68e1      	ldr	r1, [r4, #12]
    1284:	f023 0310 	bic.w	r3, r3, #16
    1288:	041b      	lsls	r3, r3, #16
    128a:	0c1b      	lsrs	r3, r3, #16
    128c:	8293      	strh	r3, [r2, #20]
    128e:	4788      	blx	r1
            callbacks[0]();
        }

        if (callbacks[1] != nullptr && pCH1->CSCTRL & TMR_CSCTRL_TCF1)
    1290:	69a3      	ldr	r3, [r4, #24]
    1292:	491c      	ldr	r1, [pc, #112]	; (1304 <TeensyTimerTool::TMR_t<1u>::isr()+0x98>)
    1294:	b173      	cbz	r3, 12b4 <TeensyTimerTool::TMR_t<1u>::isr()+0x48>
    1296:	4b1d      	ldr	r3, [pc, #116]	; (130c <TeensyTimerTool::TMR_t<1u>::isr()+0xa0>)
    1298:	681a      	ldr	r2, [r3, #0]
    129a:	8a93      	ldrh	r3, [r2, #20]
    129c:	06db      	lsls	r3, r3, #27
    129e:	d509      	bpl.n	12b4 <TeensyTimerTool::TMR_t<1u>::isr()+0x48>
        {
            pCH1->CSCTRL &= ~TMR_CSCTRL_TCF1;
    12a0:	8a93      	ldrh	r3, [r2, #20]
    12a2:	f101 0010 	add.w	r0, r1, #16
    12a6:	69c9      	ldr	r1, [r1, #28]
    12a8:	f023 0310 	bic.w	r3, r3, #16
    12ac:	041b      	lsls	r3, r3, #16
    12ae:	0c1b      	lsrs	r3, r3, #16
    12b0:	8293      	strh	r3, [r2, #20]
    12b2:	4788      	blx	r1
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
    12b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    12b6:	4913      	ldr	r1, [pc, #76]	; (1304 <TeensyTimerTool::TMR_t<1u>::isr()+0x98>)
    12b8:	b123      	cbz	r3, 12c4 <TeensyTimerTool::TMR_t<1u>::isr()+0x58>
    12ba:	4b15      	ldr	r3, [pc, #84]	; (1310 <TeensyTimerTool::TMR_t<1u>::isr()+0xa4>)
    12bc:	681a      	ldr	r2, [r3, #0]
    12be:	8a93      	ldrh	r3, [r2, #20]
    12c0:	06d8      	lsls	r0, r3, #27
    12c2:	d414      	bmi.n	12ee <TeensyTimerTool::TMR_t<1u>::isr()+0x82>
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
            callbacks[2]();
        }

        if (callbacks[3] != nullptr && pCH3->CSCTRL & TMR_CSCTRL_TCF1)
    12c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    12c6:	490f      	ldr	r1, [pc, #60]	; (1304 <TeensyTimerTool::TMR_t<1u>::isr()+0x98>)
    12c8:	b173      	cbz	r3, 12e8 <TeensyTimerTool::TMR_t<1u>::isr()+0x7c>
    12ca:	4b12      	ldr	r3, [pc, #72]	; (1314 <TeensyTimerTool::TMR_t<1u>::isr()+0xa8>)
    12cc:	681a      	ldr	r2, [r3, #0]
    12ce:	8a93      	ldrh	r3, [r2, #20]
    12d0:	06db      	lsls	r3, r3, #27
    12d2:	d509      	bpl.n	12e8 <TeensyTimerTool::TMR_t<1u>::isr()+0x7c>
        {
            pCH3->CSCTRL &= ~TMR_CSCTRL_TCF1;
    12d4:	8a93      	ldrh	r3, [r2, #20]
    12d6:	f101 0030 	add.w	r0, r1, #48	; 0x30
    12da:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    12dc:	f023 0310 	bic.w	r3, r3, #16
    12e0:	041b      	lsls	r3, r3, #16
    12e2:	0c1b      	lsrs	r3, r3, #16
    12e4:	8293      	strh	r3, [r2, #20]
    12e6:	4788      	blx	r1
            callbacks[3]();
        }
        asm volatile("dsb"); //wait until register changes propagated through the cache
    12e8:	f3bf 8f4f 	dsb	sy
    }
    12ec:	bd10      	pop	{r4, pc}
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
    12ee:	8a93      	ldrh	r3, [r2, #20]
    12f0:	f101 0020 	add.w	r0, r1, #32
    12f4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    12f6:	f023 0310 	bic.w	r3, r3, #16
    12fa:	041b      	lsls	r3, r3, #16
    12fc:	0c1b      	lsrs	r3, r3, #16
    12fe:	8293      	strh	r3, [r2, #20]
    1300:	4788      	blx	r1
    1302:	e7df      	b.n	12c4 <TeensyTimerTool::TMR_t<1u>::isr()+0x58>
    1304:	200018ec 	.word	0x200018ec
    1308:	200018e8 	.word	0x200018e8
    130c:	20001830 	.word	0x20001830
    1310:	2000182c 	.word	0x2000182c
    1314:	20001828 	.word	0x20001828

00001318 <TeensyTimerTool::TMR_t<2u>::isr()>:
        }
        return nullptr;
    }

    template <unsigned m>
    void TMR_t<m>::isr()
    1318:	b510      	push	{r4, lr}
    131a:	4c25      	ldr	r4, [pc, #148]	; (13b0 <TeensyTimerTool::TMR_t<2u>::isr()+0x98>)
    {
        // no loop to gain some time by avoiding indirections and pointer calculations
        if (callbacks[0] != nullptr && pCH0->CSCTRL & TMR_CSCTRL_TCF1)
    131c:	68a3      	ldr	r3, [r4, #8]
    131e:	b16b      	cbz	r3, 133c <TeensyTimerTool::TMR_t<2u>::isr()+0x24>
    1320:	4b24      	ldr	r3, [pc, #144]	; (13b4 <TeensyTimerTool::TMR_t<2u>::isr()+0x9c>)
    1322:	681a      	ldr	r2, [r3, #0]
    1324:	8a93      	ldrh	r3, [r2, #20]
    1326:	06d9      	lsls	r1, r3, #27
    1328:	d508      	bpl.n	133c <TeensyTimerTool::TMR_t<2u>::isr()+0x24>
        {
            pCH0->CSCTRL &= ~TMR_CSCTRL_TCF1;
    132a:	8a93      	ldrh	r3, [r2, #20]
    132c:	4620      	mov	r0, r4
    132e:	68e1      	ldr	r1, [r4, #12]
    1330:	f023 0310 	bic.w	r3, r3, #16
    1334:	041b      	lsls	r3, r3, #16
    1336:	0c1b      	lsrs	r3, r3, #16
    1338:	8293      	strh	r3, [r2, #20]
    133a:	4788      	blx	r1
            callbacks[0]();
        }

        if (callbacks[1] != nullptr && pCH1->CSCTRL & TMR_CSCTRL_TCF1)
    133c:	69a3      	ldr	r3, [r4, #24]
    133e:	491c      	ldr	r1, [pc, #112]	; (13b0 <TeensyTimerTool::TMR_t<2u>::isr()+0x98>)
    1340:	b173      	cbz	r3, 1360 <TeensyTimerTool::TMR_t<2u>::isr()+0x48>
    1342:	4b1d      	ldr	r3, [pc, #116]	; (13b8 <TeensyTimerTool::TMR_t<2u>::isr()+0xa0>)
    1344:	681a      	ldr	r2, [r3, #0]
    1346:	8a93      	ldrh	r3, [r2, #20]
    1348:	06db      	lsls	r3, r3, #27
    134a:	d509      	bpl.n	1360 <TeensyTimerTool::TMR_t<2u>::isr()+0x48>
        {
            pCH1->CSCTRL &= ~TMR_CSCTRL_TCF1;
    134c:	8a93      	ldrh	r3, [r2, #20]
    134e:	f101 0010 	add.w	r0, r1, #16
    1352:	69c9      	ldr	r1, [r1, #28]
    1354:	f023 0310 	bic.w	r3, r3, #16
    1358:	041b      	lsls	r3, r3, #16
    135a:	0c1b      	lsrs	r3, r3, #16
    135c:	8293      	strh	r3, [r2, #20]
    135e:	4788      	blx	r1
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
    1360:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1362:	4913      	ldr	r1, [pc, #76]	; (13b0 <TeensyTimerTool::TMR_t<2u>::isr()+0x98>)
    1364:	b123      	cbz	r3, 1370 <TeensyTimerTool::TMR_t<2u>::isr()+0x58>
    1366:	4b15      	ldr	r3, [pc, #84]	; (13bc <TeensyTimerTool::TMR_t<2u>::isr()+0xa4>)
    1368:	681a      	ldr	r2, [r3, #0]
    136a:	8a93      	ldrh	r3, [r2, #20]
    136c:	06d8      	lsls	r0, r3, #27
    136e:	d414      	bmi.n	139a <TeensyTimerTool::TMR_t<2u>::isr()+0x82>
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
            callbacks[2]();
        }

        if (callbacks[3] != nullptr && pCH3->CSCTRL & TMR_CSCTRL_TCF1)
    1370:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1372:	490f      	ldr	r1, [pc, #60]	; (13b0 <TeensyTimerTool::TMR_t<2u>::isr()+0x98>)
    1374:	b173      	cbz	r3, 1394 <TeensyTimerTool::TMR_t<2u>::isr()+0x7c>
    1376:	4b12      	ldr	r3, [pc, #72]	; (13c0 <TeensyTimerTool::TMR_t<2u>::isr()+0xa8>)
    1378:	681a      	ldr	r2, [r3, #0]
    137a:	8a93      	ldrh	r3, [r2, #20]
    137c:	06db      	lsls	r3, r3, #27
    137e:	d509      	bpl.n	1394 <TeensyTimerTool::TMR_t<2u>::isr()+0x7c>
        {
            pCH3->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1380:	8a93      	ldrh	r3, [r2, #20]
    1382:	f101 0030 	add.w	r0, r1, #48	; 0x30
    1386:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    1388:	f023 0310 	bic.w	r3, r3, #16
    138c:	041b      	lsls	r3, r3, #16
    138e:	0c1b      	lsrs	r3, r3, #16
    1390:	8293      	strh	r3, [r2, #20]
    1392:	4788      	blx	r1
            callbacks[3]();
        }
        asm volatile("dsb"); //wait until register changes propagated through the cache
    1394:	f3bf 8f4f 	dsb	sy
    }
    1398:	bd10      	pop	{r4, pc}
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
    139a:	8a93      	ldrh	r3, [r2, #20]
    139c:	f101 0020 	add.w	r0, r1, #32
    13a0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    13a2:	f023 0310 	bic.w	r3, r3, #16
    13a6:	041b      	lsls	r3, r3, #16
    13a8:	0c1b      	lsrs	r3, r3, #16
    13aa:	8293      	strh	r3, [r2, #20]
    13ac:	4788      	blx	r1
    13ae:	e7df      	b.n	1370 <TeensyTimerTool::TMR_t<2u>::isr()+0x58>
    13b0:	200018a8 	.word	0x200018a8
    13b4:	200018a4 	.word	0x200018a4
    13b8:	20001824 	.word	0x20001824
    13bc:	20001820 	.word	0x20001820
    13c0:	2000181c 	.word	0x2000181c

000013c4 <TeensyTimerTool::TMR_t<3u>::isr()>:
        }
        return nullptr;
    }

    template <unsigned m>
    void TMR_t<m>::isr()
    13c4:	b510      	push	{r4, lr}
    13c6:	4c25      	ldr	r4, [pc, #148]	; (145c <TeensyTimerTool::TMR_t<3u>::isr()+0x98>)
    {
        // no loop to gain some time by avoiding indirections and pointer calculations
        if (callbacks[0] != nullptr && pCH0->CSCTRL & TMR_CSCTRL_TCF1)
    13c8:	68a3      	ldr	r3, [r4, #8]
    13ca:	b16b      	cbz	r3, 13e8 <TeensyTimerTool::TMR_t<3u>::isr()+0x24>
    13cc:	4b24      	ldr	r3, [pc, #144]	; (1460 <TeensyTimerTool::TMR_t<3u>::isr()+0x9c>)
    13ce:	681a      	ldr	r2, [r3, #0]
    13d0:	8a93      	ldrh	r3, [r2, #20]
    13d2:	06d9      	lsls	r1, r3, #27
    13d4:	d508      	bpl.n	13e8 <TeensyTimerTool::TMR_t<3u>::isr()+0x24>
        {
            pCH0->CSCTRL &= ~TMR_CSCTRL_TCF1;
    13d6:	8a93      	ldrh	r3, [r2, #20]
    13d8:	4620      	mov	r0, r4
    13da:	68e1      	ldr	r1, [r4, #12]
    13dc:	f023 0310 	bic.w	r3, r3, #16
    13e0:	041b      	lsls	r3, r3, #16
    13e2:	0c1b      	lsrs	r3, r3, #16
    13e4:	8293      	strh	r3, [r2, #20]
    13e6:	4788      	blx	r1
            callbacks[0]();
        }

        if (callbacks[1] != nullptr && pCH1->CSCTRL & TMR_CSCTRL_TCF1)
    13e8:	69a3      	ldr	r3, [r4, #24]
    13ea:	491c      	ldr	r1, [pc, #112]	; (145c <TeensyTimerTool::TMR_t<3u>::isr()+0x98>)
    13ec:	b173      	cbz	r3, 140c <TeensyTimerTool::TMR_t<3u>::isr()+0x48>
    13ee:	4b1d      	ldr	r3, [pc, #116]	; (1464 <TeensyTimerTool::TMR_t<3u>::isr()+0xa0>)
    13f0:	681a      	ldr	r2, [r3, #0]
    13f2:	8a93      	ldrh	r3, [r2, #20]
    13f4:	06db      	lsls	r3, r3, #27
    13f6:	d509      	bpl.n	140c <TeensyTimerTool::TMR_t<3u>::isr()+0x48>
        {
            pCH1->CSCTRL &= ~TMR_CSCTRL_TCF1;
    13f8:	8a93      	ldrh	r3, [r2, #20]
    13fa:	f101 0010 	add.w	r0, r1, #16
    13fe:	69c9      	ldr	r1, [r1, #28]
    1400:	f023 0310 	bic.w	r3, r3, #16
    1404:	041b      	lsls	r3, r3, #16
    1406:	0c1b      	lsrs	r3, r3, #16
    1408:	8293      	strh	r3, [r2, #20]
    140a:	4788      	blx	r1
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
    140c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    140e:	4913      	ldr	r1, [pc, #76]	; (145c <TeensyTimerTool::TMR_t<3u>::isr()+0x98>)
    1410:	b123      	cbz	r3, 141c <TeensyTimerTool::TMR_t<3u>::isr()+0x58>
    1412:	4b15      	ldr	r3, [pc, #84]	; (1468 <TeensyTimerTool::TMR_t<3u>::isr()+0xa4>)
    1414:	681a      	ldr	r2, [r3, #0]
    1416:	8a93      	ldrh	r3, [r2, #20]
    1418:	06d8      	lsls	r0, r3, #27
    141a:	d414      	bmi.n	1446 <TeensyTimerTool::TMR_t<3u>::isr()+0x82>
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
            callbacks[2]();
        }

        if (callbacks[3] != nullptr && pCH3->CSCTRL & TMR_CSCTRL_TCF1)
    141c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    141e:	490f      	ldr	r1, [pc, #60]	; (145c <TeensyTimerTool::TMR_t<3u>::isr()+0x98>)
    1420:	b173      	cbz	r3, 1440 <TeensyTimerTool::TMR_t<3u>::isr()+0x7c>
    1422:	4b12      	ldr	r3, [pc, #72]	; (146c <TeensyTimerTool::TMR_t<3u>::isr()+0xa8>)
    1424:	681a      	ldr	r2, [r3, #0]
    1426:	8a93      	ldrh	r3, [r2, #20]
    1428:	06db      	lsls	r3, r3, #27
    142a:	d509      	bpl.n	1440 <TeensyTimerTool::TMR_t<3u>::isr()+0x7c>
        {
            pCH3->CSCTRL &= ~TMR_CSCTRL_TCF1;
    142c:	8a93      	ldrh	r3, [r2, #20]
    142e:	f101 0030 	add.w	r0, r1, #48	; 0x30
    1432:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    1434:	f023 0310 	bic.w	r3, r3, #16
    1438:	041b      	lsls	r3, r3, #16
    143a:	0c1b      	lsrs	r3, r3, #16
    143c:	8293      	strh	r3, [r2, #20]
    143e:	4788      	blx	r1
            callbacks[3]();
        }
        asm volatile("dsb"); //wait until register changes propagated through the cache
    1440:	f3bf 8f4f 	dsb	sy
    }
    1444:	bd10      	pop	{r4, pc}
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1446:	8a93      	ldrh	r3, [r2, #20]
    1448:	f101 0020 	add.w	r0, r1, #32
    144c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    144e:	f023 0310 	bic.w	r3, r3, #16
    1452:	041b      	lsls	r3, r3, #16
    1454:	0c1b      	lsrs	r3, r3, #16
    1456:	8293      	strh	r3, [r2, #20]
    1458:	4788      	blx	r1
    145a:	e7df      	b.n	141c <TeensyTimerTool::TMR_t<3u>::isr()+0x58>
    145c:	20001864 	.word	0x20001864
    1460:	20001860 	.word	0x20001860
    1464:	20001818 	.word	0x20001818
    1468:	20001814 	.word	0x20001814
    146c:	20001810 	.word	0x20001810

00001470 <TeensyTimerTool::GPT_t<0u>::isr()>:
    }

    template <unsigned tmoduleNr>
    void GPT_t<tmoduleNr>::isr()
    {
        if (!channel->periodic)
    1470:	4b0a      	ldr	r3, [pc, #40]	; (149c <TeensyTimerTool::GPT_t<0u>::isr()+0x2c>)
    1472:	681b      	ldr	r3, [r3, #0]
    1474:	7a1b      	ldrb	r3, [r3, #8]
        }
        return nullptr;
    }

    template <unsigned tmoduleNr>
    void GPT_t<tmoduleNr>::isr()
    1476:	b510      	push	{r4, lr}
    {
        if (!channel->periodic)
    1478:	b923      	cbnz	r3, 1484 <TeensyTimerTool::GPT_t<0u>::isr()+0x14>
            pGPT->CR &= ~GPT_CR_EN; // stop timer in one shot mode
    147a:	4a09      	ldr	r2, [pc, #36]	; (14a0 <TeensyTimerTool::GPT_t<0u>::isr()+0x30>)
    147c:	6813      	ldr	r3, [r2, #0]
    147e:	f023 0301 	bic.w	r3, r3, #1
    1482:	6013      	str	r3, [r2, #0]
    1484:	4807      	ldr	r0, [pc, #28]	; (14a4 <TeensyTimerTool::GPT_t<0u>::isr()+0x34>)

        pGPT->SR = 0x3F; // reset all interrupt flags
    1486:	223f      	movs	r2, #63	; 0x3f
    1488:	4c05      	ldr	r4, [pc, #20]	; (14a0 <TeensyTimerTool::GPT_t<0u>::isr()+0x30>)
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    148a:	6883      	ldr	r3, [r0, #8]
    148c:	60a2      	str	r2, [r4, #8]
    148e:	b11b      	cbz	r3, 1498 <TeensyTimerTool::GPT_t<0u>::isr()+0x28>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    1490:	68c3      	ldr	r3, [r0, #12]
    1492:	4798      	blx	r3
        callback();      // we only enabled the OF1 interrupt-> no need to find out which interrupt was actually called
        pGPT->SR;                 // re-read flag to prevent re entering, takes very long, seems to work without?
    1494:	68a3      	ldr	r3, [r4, #8]
    1496:	bd10      	pop	{r4, pc}
    1498:	e7fe      	b.n	1498 <TeensyTimerTool::GPT_t<0u>::isr()+0x28>
    149a:	bf00      	nop
    149c:	200017ac 	.word	0x200017ac
    14a0:	401ec000 	.word	0x401ec000
    14a4:	20001850 	.word	0x20001850

000014a8 <TeensyTimerTool::GPT_t<1u>::isr()>:
    }

    template <unsigned tmoduleNr>
    void GPT_t<tmoduleNr>::isr()
    {
        if (!channel->periodic)
    14a8:	4b0a      	ldr	r3, [pc, #40]	; (14d4 <TeensyTimerTool::GPT_t<1u>::isr()+0x2c>)
    14aa:	681b      	ldr	r3, [r3, #0]
    14ac:	7a1b      	ldrb	r3, [r3, #8]
        }
        return nullptr;
    }

    template <unsigned tmoduleNr>
    void GPT_t<tmoduleNr>::isr()
    14ae:	b510      	push	{r4, lr}
    {
        if (!channel->periodic)
    14b0:	b923      	cbnz	r3, 14bc <TeensyTimerTool::GPT_t<1u>::isr()+0x14>
            pGPT->CR &= ~GPT_CR_EN; // stop timer in one shot mode
    14b2:	4a09      	ldr	r2, [pc, #36]	; (14d8 <TeensyTimerTool::GPT_t<1u>::isr()+0x30>)
    14b4:	6813      	ldr	r3, [r2, #0]
    14b6:	f023 0301 	bic.w	r3, r3, #1
    14ba:	6013      	str	r3, [r2, #0]
    14bc:	4807      	ldr	r0, [pc, #28]	; (14dc <TeensyTimerTool::GPT_t<1u>::isr()+0x34>)

        pGPT->SR = 0x3F; // reset all interrupt flags
    14be:	223f      	movs	r2, #63	; 0x3f
    14c0:	4c05      	ldr	r4, [pc, #20]	; (14d8 <TeensyTimerTool::GPT_t<1u>::isr()+0x30>)
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    14c2:	6883      	ldr	r3, [r0, #8]
    14c4:	60a2      	str	r2, [r4, #8]
    14c6:	b11b      	cbz	r3, 14d0 <TeensyTimerTool::GPT_t<1u>::isr()+0x28>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    14c8:	68c3      	ldr	r3, [r0, #12]
    14ca:	4798      	blx	r3
        callback();      // we only enabled the OF1 interrupt-> no need to find out which interrupt was actually called
        pGPT->SR;                 // re-read flag to prevent re entering, takes very long, seems to work without?
    14cc:	68a3      	ldr	r3, [r4, #8]
    14ce:	bd10      	pop	{r4, pc}
    14d0:	e7fe      	b.n	14d0 <TeensyTimerTool::GPT_t<1u>::isr()+0x28>
    14d2:	bf00      	nop
    14d4:	200017a4 	.word	0x200017a4
    14d8:	401f0000 	.word	0x401f0000
    14dc:	20001840 	.word	0x20001840

000014e0 <__tcf_0>:

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    14e0:	b538      	push	{r3, r4, r5, lr}
    14e2:	4c06      	ldr	r4, [pc, #24]	; (14fc <__tcf_0+0x1c>)
    14e4:	f1a4 0540 	sub.w	r5, r4, #64	; 0x40
    14e8:	3c10      	subs	r4, #16

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    14ea:	68a3      	ldr	r3, [r4, #8]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    14ec:	2203      	movs	r2, #3
    14ee:	4621      	mov	r1, r4
    14f0:	4620      	mov	r0, r4

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    14f2:	b103      	cbz	r3, 14f6 <__tcf_0+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    14f4:	4798      	blx	r3
    14f6:	42ac      	cmp	r4, r5
    14f8:	d1f6      	bne.n	14e8 <__tcf_0+0x8>
    14fa:	bd38      	pop	{r3, r4, r5, pc}
    14fc:	20001970 	.word	0x20001970

00001500 <__tcf_1>:
    1500:	b538      	push	{r3, r4, r5, lr}
    1502:	4c06      	ldr	r4, [pc, #24]	; (151c <__tcf_1+0x1c>)
    1504:	f1a4 0540 	sub.w	r5, r4, #64	; 0x40
    1508:	3c10      	subs	r4, #16

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    150a:	68a3      	ldr	r3, [r4, #8]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    150c:	2203      	movs	r2, #3
    150e:	4621      	mov	r1, r4
    1510:	4620      	mov	r0, r4

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1512:	b103      	cbz	r3, 1516 <__tcf_1+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1514:	4798      	blx	r3
    1516:	42ac      	cmp	r4, r5
    1518:	d1f6      	bne.n	1508 <__tcf_1+0x8>
    151a:	bd38      	pop	{r3, r4, r5, pc}
    151c:	2000192c 	.word	0x2000192c

00001520 <__tcf_2>:
    1520:	b538      	push	{r3, r4, r5, lr}
    1522:	4c06      	ldr	r4, [pc, #24]	; (153c <__tcf_2+0x1c>)
    1524:	f1a4 0540 	sub.w	r5, r4, #64	; 0x40
    1528:	3c10      	subs	r4, #16

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    152a:	68a3      	ldr	r3, [r4, #8]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    152c:	2203      	movs	r2, #3
    152e:	4621      	mov	r1, r4
    1530:	4620      	mov	r0, r4

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1532:	b103      	cbz	r3, 1536 <__tcf_2+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1534:	4798      	blx	r3
    1536:	42ac      	cmp	r4, r5
    1538:	d1f6      	bne.n	1528 <__tcf_2+0x8>
    153a:	bd38      	pop	{r3, r4, r5, pc}
    153c:	200018e8 	.word	0x200018e8

00001540 <__tcf_3>:
    1540:	b538      	push	{r3, r4, r5, lr}
    1542:	4c06      	ldr	r4, [pc, #24]	; (155c <__tcf_3+0x1c>)
    1544:	f1a4 0540 	sub.w	r5, r4, #64	; 0x40
    1548:	3c10      	subs	r4, #16

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    154a:	68a3      	ldr	r3, [r4, #8]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    154c:	2203      	movs	r2, #3
    154e:	4621      	mov	r1, r4
    1550:	4620      	mov	r0, r4

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1552:	b103      	cbz	r3, 1556 <__tcf_3+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1554:	4798      	blx	r3
    1556:	42ac      	cmp	r4, r5
    1558:	d1f6      	bne.n	1548 <__tcf_3+0x8>
    155a:	bd38      	pop	{r3, r4, r5, pc}
    155c:	200018a4 	.word	0x200018a4

00001560 <TeensyTimerTool::TckChannel<unsigned long>::triggerDirect(unsigned long)>:
        this->triggered = false;
        return errorCode::OK;
    }

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    1560:	b410      	push	{r4}
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    1562:	4c06      	ldr	r4, [pc, #24]	; (157c <TeensyTimerTool::TckChannel<unsigned long>::triggerDirect(unsigned long)+0x1c>)
        this->triggered = false;
        return errorCode::OK;
    }

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    1564:	4603      	mov	r3, r0
    {
        this->startCnt = getCycleCounter();
        this->nextPeriod = reload;
        this->currentPeriod = this->nextPeriod;
        this->triggered = true;
    1566:	2201      	movs	r2, #1
        return errorCode::OK;
    }
    1568:	2000      	movs	r0, #0
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    156a:	6824      	ldr	r4, [r4, #0]

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
        this->nextPeriod = reload;
    156c:	6259      	str	r1, [r3, #36]	; 0x24
    }

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
    156e:	61dc      	str	r4, [r3, #28]
        this->nextPeriod = reload;
        this->currentPeriod = this->nextPeriod;
    1570:	6219      	str	r1, [r3, #32]
        this->triggered = true;
    1572:	765a      	strb	r2, [r3, #25]
        return errorCode::OK;
    }
    1574:	f85d 4b04 	ldr.w	r4, [sp], #4
    1578:	4770      	bx	lr
    157a:	bf00      	nop
    157c:	e0001004 	.word	0xe0001004

00001580 <TeensyTimerTool::TckChannel<unsigned long>::start()>:
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    1580:	4a03      	ldr	r2, [pc, #12]	; (1590 <TeensyTimerTool::TckChannel<unsigned long>::start()+0x10>)

        return errorCode::OK;
    }

    template <typename T>
    errorCode TckChannel<T>::start()
    1582:	4603      	mov	r3, r0
    {
        this->startCnt = getCycleCounter();
        this->triggered = true;
    1584:	2101      	movs	r1, #1
        return errorCode::OK;
    }
    1586:	2000      	movs	r0, #0
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    1588:	6812      	ldr	r2, [r2, #0]

    template <typename T>
    errorCode TckChannel<T>::start()
    {
        this->startCnt = getCycleCounter();
        this->triggered = true;
    158a:	7659      	strb	r1, [r3, #25]
    }

    template <typename T>
    errorCode TckChannel<T>::start()
    {
        this->startCnt = getCycleCounter();
    158c:	61da      	str	r2, [r3, #28]
        this->triggered = true;
        return errorCode::OK;
    }
    158e:	4770      	bx	lr
    1590:	e0001004 	.word	0xe0001004

00001594 <TeensyTimerTool::TckChannel<unsigned long>::stop()>:

    template <typename T>
    errorCode TckChannel<T>::stop()
    {
        this->triggered = false;
    1594:	2300      	movs	r3, #0
    1596:	7643      	strb	r3, [r0, #25]
        return errorCode::OK;
    }
    1598:	4618      	mov	r0, r3
    159a:	4770      	bx	lr

0000159c <TeensyTimerTool::TckChannel<unsigned long>::getMaxPeriod() const>:
        {
            *reload = microsecondToCycles(delay);
            return errorCode::OK;
        }

        float getMaxPeriod() const override { return getMaxMicros() / 1E6; } // seconds
    159c:	eddf 6a05 	vldr	s13, [pc, #20]	; 15b4 <TeensyTimerTool::TckChannel<unsigned long>::getMaxPeriod() const+0x18>
    15a0:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
    15a4:	eddf 7a04 	vldr	s15, [pc, #16]	; 15b8 <TeensyTimerTool::TckChannel<unsigned long>::getMaxPeriod() const+0x1c>
    15a8:	ee86 0a87 	vdiv.f32	s0, s13, s14
    15ac:	ee80 0a27 	vdiv.f32	s0, s0, s15
    15b0:	4770      	bx	lr
    15b2:	bf00      	nop
    15b4:	4f700000 	.word	0x4f700000
    15b8:	49742400 	.word	0x49742400

000015bc <TeensyTimerTool::TckChannel<unsigned long>::tick()>:
    {
        return triggerDirect(microsecondToCycles(delay));
    }

    template <typename counter_t>
    bool TckChannel<counter_t>::tick()
    15bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
    15be:	4d10      	ldr	r5, [pc, #64]	; (1600 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x44>)
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    15c0:	4b10      	ldr	r3, [pc, #64]	; (1604 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x48>)
    template <typename counter_t>
    bool TckChannel<counter_t>::tick()
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
    15c2:	782c      	ldrb	r4, [r5, #0]
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    15c4:	681a      	ldr	r2, [r3, #0]
    template <typename counter_t>
    bool TckChannel<counter_t>::tick()
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
    15c6:	b9b4      	cbnz	r4, 15f6 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x3a>
    15c8:	6a01      	ldr	r1, [r0, #32]
    15ca:	b191      	cbz	r1, 15f2 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x36>
    15cc:	7e46      	ldrb	r6, [r0, #25]
    15ce:	b186      	cbz	r6, 15f2 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x36>
    15d0:	69c3      	ldr	r3, [r0, #28]
    15d2:	1ad2      	subs	r2, r2, r3
    15d4:	4291      	cmp	r1, r2
    15d6:	d80c      	bhi.n	15f2 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x36>
        {
            lock = true;
            //this->startCnt = now;
            this->startCnt += currentPeriod;
    15d8:	440b      	add	r3, r1
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
        {
            lock = true;
    15da:	2701      	movs	r7, #1
            //this->startCnt = now;
            this->startCnt += currentPeriod;
            this->triggered = this->periodic; // i.e., stays triggerd if periodic, stops if oneShot
    15dc:	7e01      	ldrb	r1, [r0, #24]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    15de:	6902      	ldr	r2, [r0, #16]
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
        {
            lock = true;
            //this->startCnt = now;
            this->startCnt += currentPeriod;
    15e0:	61c3      	str	r3, [r0, #28]
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
        {
            lock = true;
    15e2:	702f      	strb	r7, [r5, #0]
            //this->startCnt = now;
            this->startCnt += currentPeriod;
            this->triggered = this->periodic; // i.e., stays triggerd if periodic, stops if oneShot
    15e4:	7641      	strb	r1, [r0, #25]
    15e6:	b14a      	cbz	r2, 15fc <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x40>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    15e8:	6943      	ldr	r3, [r0, #20]
    15ea:	3008      	adds	r0, #8
    15ec:	4798      	blx	r3
            callback();
            lock = false;
    15ee:	702c      	strb	r4, [r5, #0]
            return true;
    15f0:	4634      	mov	r4, r6
        } else
        {
            return false;
        }
    }
    15f2:	4620      	mov	r0, r4
    15f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            callback();
            lock = false;
            return true;
        } else
        {
            return false;
    15f6:	2400      	movs	r4, #0
        }
    }
    15f8:	4620      	mov	r0, r4
    15fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15fc:	e7fe      	b.n	15fc <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x40>
    15fe:	bf00      	nop
    1600:	200017a1 	.word	0x200017a1
    1604:	e0001004 	.word	0xe0001004

00001608 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()>:
    template <typename CounterType>
    class TckChannel : public TckChannelBase
    {
     public:
        TckChannel();
        virtual ~TckChannel(){}; //TBD
    1608:	4a06      	ldr	r2, [pc, #24]	; (1624 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()+0x1c>)

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    160a:	6903      	ldr	r3, [r0, #16]
    160c:	b510      	push	{r4, lr}
    160e:	4604      	mov	r4, r0
    1610:	6002      	str	r2, [r0, #0]
    1612:	b123      	cbz	r3, 161e <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1614:	f100 0108 	add.w	r1, r0, #8
    1618:	2203      	movs	r2, #3
    161a:	4608      	mov	r0, r1
    161c:	4798      	blx	r3
    161e:	4620      	mov	r0, r4
    1620:	bd10      	pop	{r4, pc}
    1622:	bf00      	nop
    1624:	200001e0 	.word	0x200001e0

00001628 <TeensyTimerTool::GPT_t<0u>::getTimer()>:

    template <unsigned moduleNr>
    IMXRT_GPT_t* const GPT_t<moduleNr>::pGPT = reinterpret_cast<IMXRT_GPT_t*>(moduleNr == 0 ? &IMXRT_GPT1 : &IMXRT_GPT2);

    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    1628:	b538      	push	{r3, r4, r5, lr}
    {
        if (!isInitialized)
    162a:	4b1d      	ldr	r3, [pc, #116]	; (16a0 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x78>)
    162c:	781a      	ldrb	r2, [r3, #0]
    162e:	2a00      	cmp	r2, #0
    1630:	d133      	bne.n	169a <TeensyTimerTool::GPT_t<0u>::getTimer()+0x72>
        {
            isInitialized = true;

            if (moduleNr == 0) // GPT1 clock settings
                CCM_CCGR1 |= CCM_CCGR1_GPT1_BUS(CCM_CCGR_ON) | CCM_CCGR1_GPT1_SERIAL(CCM_CCGR_ON);
    1632:	4c1c      	ldr	r4, [pc, #112]	; (16a4 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x7c>)
    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            isInitialized = true;
    1634:	2101      	movs	r1, #1
            if(USE_GPT_PIT_150MHz) // timer clock setting from config.h
                CCM_CSCMR1 &= ~CCM_CSCMR1_PERCLK_CLK_SEL; // 150MHz
            else
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock
    1636:	4d1c      	ldr	r5, [pc, #112]	; (16a8 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x80>)
    1638:	2242      	movs	r2, #66	; 0x42
    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            isInitialized = true;
    163a:	7019      	strb	r1, [r3, #0]

            if (moduleNr == 0) // GPT1 clock settings
                CCM_CCGR1 |= CCM_CCGR1_GPT1_BUS(CCM_CCGR_ON) | CCM_CCGR1_GPT1_SERIAL(CCM_CCGR_ON);
    163c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    163e:	491b      	ldr	r1, [pc, #108]	; (16ac <TeensyTimerTool::GPT_t<0u>::getTimer()+0x84>)
    1640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    1644:	481a      	ldr	r0, [pc, #104]	; (16b0 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x88>)
    1646:	66e3      	str	r3, [r4, #108]	; 0x6c
                CCM_CCGR0 |= CCM_CCGR0_GPT2_BUS(CCM_CCGR_ON) | CCM_CCGR0_GPT2_SERIAL(CCM_CCGR_ON);

            if(USE_GPT_PIT_150MHz) // timer clock setting from config.h
                CCM_CSCMR1 &= ~CCM_CSCMR1_PERCLK_CLK_SEL; // 150MHz
            else
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz
    1648:	69e3      	ldr	r3, [r4, #28]
    164a:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
    164e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1652:	61e3      	str	r3, [r4, #28]

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock
    1654:	602a      	str	r2, [r5, #0]

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);
    1656:	4b17      	ldr	r3, [pc, #92]	; (16b4 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x8c>)
    1658:	2210      	movs	r2, #16

            channel = new GptChannel(pGPT, &callback);
    165a:	2018      	movs	r0, #24
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);
    165c:	601a      	str	r2, [r3, #0]

            channel = new GptChannel(pGPT, &callback);
    165e:	f002 fbdd 	bl	3e1c <operator new(unsigned int)>
    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    1662:	69e2      	ldr	r2, [r4, #28]
    1664:	4603      	mov	r3, r0
    };

    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    1666:	4914      	ldr	r1, [pc, #80]	; (16b8 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x90>)

    // IMPLEMENTATION ====================================================

    ITimerChannel::ITimerChannel(callback_t* cbStorage)
    {
        this->pCallback = cbStorage;
    1668:	4814      	ldr	r0, [pc, #80]	; (16bc <TeensyTimerTool::GPT_t<0u>::getTimer()+0x94>)
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    166a:	0652      	lsls	r2, r2, #25
    };

    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    166c:	60dd      	str	r5, [r3, #12]
    166e:	6058      	str	r0, [r3, #4]
    1670:	6019      	str	r1, [r3, #0]
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    1672:	d507      	bpl.n	1684 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x5c>
    1674:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    1678:	4a11      	ldr	r2, [pc, #68]	; (16c0 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x98>)
            return channel;
    167a:	4618      	mov	r0, r3
    167c:	edc3 7a05 	vstr	s15, [r3, #20]
            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);

            channel = new GptChannel(pGPT, &callback);
    1680:	6013      	str	r3, [r2, #0]
            return channel;
    1682:	bd38      	pop	{r3, r4, r5, pc}
    1684:	4a0f      	ldr	r2, [pc, #60]	; (16c4 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x9c>)
    1686:	4910      	ldr	r1, [pc, #64]	; (16c8 <TeensyTimerTool::GPT_t<0u>::getTimer()+0xa0>)
    1688:	6812      	ldr	r2, [r2, #0]
    168a:	fba1 1202 	umull	r1, r2, r1, r2
    168e:	0c92      	lsrs	r2, r2, #18
    1690:	ee07 2a90 	vmov	s15, r2
    1694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1698:	e7ee      	b.n	1678 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x50>
        }
        return nullptr;
    169a:	2000      	movs	r0, #0
    }
    169c:	bd38      	pop	{r3, r4, r5, pc}
    169e:	bf00      	nop
    16a0:	200017b0 	.word	0x200017b0
    16a4:	400fc000 	.word	0x400fc000
    16a8:	401ec000 	.word	0x401ec000
    16ac:	20002000 	.word	0x20002000
    16b0:	00001471 	.word	0x00001471
    16b4:	e000e10c 	.word	0xe000e10c
    16b8:	20000198 	.word	0x20000198
    16bc:	20001850 	.word	0x20001850
    16c0:	200017ac 	.word	0x200017ac
    16c4:	200006ac 	.word	0x200006ac
    16c8:	431bde83 	.word	0x431bde83

000016cc <TeensyTimerTool::GPT_t<1u>::getTimer()>:

    template <unsigned moduleNr>
    IMXRT_GPT_t* const GPT_t<moduleNr>::pGPT = reinterpret_cast<IMXRT_GPT_t*>(moduleNr == 0 ? &IMXRT_GPT1 : &IMXRT_GPT2);

    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    16cc:	b538      	push	{r3, r4, r5, lr}
    {
        if (!isInitialized)
    16ce:	4b1d      	ldr	r3, [pc, #116]	; (1744 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x78>)
    16d0:	781a      	ldrb	r2, [r3, #0]
    16d2:	2a00      	cmp	r2, #0
    16d4:	d133      	bne.n	173e <TeensyTimerTool::GPT_t<1u>::getTimer()+0x72>
            isInitialized = true;

            if (moduleNr == 0) // GPT1 clock settings
                CCM_CCGR1 |= CCM_CCGR1_GPT1_BUS(CCM_CCGR_ON) | CCM_CCGR1_GPT1_SERIAL(CCM_CCGR_ON);
            else // GPT2
                CCM_CCGR0 |= CCM_CCGR0_GPT2_BUS(CCM_CCGR_ON) | CCM_CCGR0_GPT2_SERIAL(CCM_CCGR_ON);
    16d6:	4c1c      	ldr	r4, [pc, #112]	; (1748 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x7c>)
    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            isInitialized = true;
    16d8:	2101      	movs	r1, #1
            if(USE_GPT_PIT_150MHz) // timer clock setting from config.h
                CCM_CSCMR1 &= ~CCM_CSCMR1_PERCLK_CLK_SEL; // 150MHz
            else
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock
    16da:	4d1c      	ldr	r5, [pc, #112]	; (174c <TeensyTimerTool::GPT_t<1u>::getTimer()+0x80>)
    16dc:	2242      	movs	r2, #66	; 0x42
    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            isInitialized = true;
    16de:	7019      	strb	r1, [r3, #0]

            if (moduleNr == 0) // GPT1 clock settings
                CCM_CCGR1 |= CCM_CCGR1_GPT1_BUS(CCM_CCGR_ON) | CCM_CCGR1_GPT1_SERIAL(CCM_CCGR_ON);
            else // GPT2
                CCM_CCGR0 |= CCM_CCGR0_GPT2_BUS(CCM_CCGR_ON) | CCM_CCGR0_GPT2_SERIAL(CCM_CCGR_ON);
    16e0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    16e2:	491b      	ldr	r1, [pc, #108]	; (1750 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x84>)
    16e4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    16e8:	481a      	ldr	r0, [pc, #104]	; (1754 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x88>)
    16ea:	66a3      	str	r3, [r4, #104]	; 0x68

            if(USE_GPT_PIT_150MHz) // timer clock setting from config.h
                CCM_CSCMR1 &= ~CCM_CSCMR1_PERCLK_CLK_SEL; // 150MHz
            else
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz
    16ec:	69e3      	ldr	r3, [r4, #28]
    16ee:	f8c1 01d4 	str.w	r0, [r1, #468]	; 0x1d4
    16f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    16f6:	61e3      	str	r3, [r4, #28]

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock
    16f8:	602a      	str	r2, [r5, #0]

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);
    16fa:	4b17      	ldr	r3, [pc, #92]	; (1758 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x8c>)
    16fc:	2220      	movs	r2, #32

            channel = new GptChannel(pGPT, &callback);
    16fe:	2018      	movs	r0, #24
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);
    1700:	601a      	str	r2, [r3, #0]

            channel = new GptChannel(pGPT, &callback);
    1702:	f002 fb8b 	bl	3e1c <operator new(unsigned int)>
    1706:	69e2      	ldr	r2, [r4, #28]
    1708:	4603      	mov	r3, r0
    };

    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    170a:	4914      	ldr	r1, [pc, #80]	; (175c <TeensyTimerTool::GPT_t<1u>::getTimer()+0x90>)
    170c:	4814      	ldr	r0, [pc, #80]	; (1760 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x94>)
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    170e:	0652      	lsls	r2, r2, #25
    };

    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    1710:	60dd      	str	r5, [r3, #12]
    1712:	6058      	str	r0, [r3, #4]
    1714:	6019      	str	r1, [r3, #0]
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    1716:	d507      	bpl.n	1728 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x5c>
    1718:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    171c:	4a11      	ldr	r2, [pc, #68]	; (1764 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x98>)
            return channel;
    171e:	4618      	mov	r0, r3
    1720:	edc3 7a05 	vstr	s15, [r3, #20]
            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);

            channel = new GptChannel(pGPT, &callback);
    1724:	6013      	str	r3, [r2, #0]
            return channel;
    1726:	bd38      	pop	{r3, r4, r5, pc}
    1728:	4a0f      	ldr	r2, [pc, #60]	; (1768 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x9c>)
    172a:	4910      	ldr	r1, [pc, #64]	; (176c <TeensyTimerTool::GPT_t<1u>::getTimer()+0xa0>)
    172c:	6812      	ldr	r2, [r2, #0]
    172e:	fba1 1202 	umull	r1, r2, r1, r2
    1732:	0c92      	lsrs	r2, r2, #18
    1734:	ee07 2a90 	vmov	s15, r2
    1738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    173c:	e7ee      	b.n	171c <TeensyTimerTool::GPT_t<1u>::getTimer()+0x50>
        }
        return nullptr;
    173e:	2000      	movs	r0, #0
    }
    1740:	bd38      	pop	{r3, r4, r5, pc}
    1742:	bf00      	nop
    1744:	200017a8 	.word	0x200017a8
    1748:	400fc000 	.word	0x400fc000
    174c:	401f0000 	.word	0x401f0000
    1750:	20002000 	.word	0x20002000
    1754:	000014a9 	.word	0x000014a9
    1758:	e000e10c 	.word	0xe000e10c
    175c:	20000198 	.word	0x20000198
    1760:	20001840 	.word	0x20001840
    1764:	200017a4 	.word	0x200017a4
    1768:	200006ac 	.word	0x200006ac
    176c:	431bde83 	.word	0x431bde83

00001770 <TeensyTimerTool::TMRChannel::~TMRChannel()>:
    {
        this->regs = regs;
        setPrescaler(TMR_DEFAULT_PSC);
    }

    TMRChannel::~TMRChannel()
    1770:	b510      	push	{r4, lr}
    1772:	4604      	mov	r4, r0
    {
    }
    1774:	2118      	movs	r1, #24
    1776:	f002 fb53 	bl	3e20 <operator delete(void*, unsigned int)>
    177a:	4620      	mov	r0, r4
    177c:	bd10      	pop	{r4, pc}
    177e:	bf00      	nop

00001780 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()>:
    1780:	4a08      	ldr	r2, [pc, #32]	; (17a4 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()+0x24>)

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1782:	6903      	ldr	r3, [r0, #16]
    1784:	b510      	push	{r4, lr}
    1786:	4604      	mov	r4, r0
    1788:	6002      	str	r2, [r0, #0]
    178a:	b123      	cbz	r3, 1796 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    178c:	f100 0108 	add.w	r1, r0, #8
    1790:	2203      	movs	r2, #3
    1792:	4608      	mov	r0, r1
    1794:	4798      	blx	r3
    1796:	4620      	mov	r0, r4
    1798:	2134      	movs	r1, #52	; 0x34
    179a:	f002 fb41 	bl	3e20 <operator delete(void*, unsigned int)>
    179e:	4620      	mov	r0, r4
    17a0:	bd10      	pop	{r4, pc}
    17a2:	bf00      	nop
    17a4:	200001e0 	.word	0x200001e0

000017a8 <TeensyTimerTool::ITimerChannel::setPrescaler(int)>:
        virtual errorCode getTriggerReload(float delay, uint64_t* reload) {return postError(errorCode::notImplemented);};

        virtual errorCode start() = 0;
        virtual errorCode stop() = 0;

        virtual errorCode setPrescaler(int  psc) { return postError(errorCode::notImplemented); }
    17a8:	2069      	movs	r0, #105	; 0x69
    17aa:	f000 be8d 	b.w	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    17ae:	bf00      	nop

000017b0 <TeensyTimerTool::ITimerChannel::getTriggerReload(float, unsigned long long*)>:
        virtual errorCode begin(callback_t callback, float period, bool oneShot) = 0;
        virtual errorCode trigger(float delay) = 0;
        virtual errorCode triggerDirect(uint32_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode triggerDirect(uint64_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode getTriggerReload(float delay, uint32_t* reload) {return postError(errorCode::notImplemented);};
        virtual errorCode getTriggerReload(float delay, uint64_t* reload) {return postError(errorCode::notImplemented);};
    17b0:	2069      	movs	r0, #105	; 0x69
    17b2:	f000 be89 	b.w	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    17b6:	bf00      	nop

000017b8 <TeensyTimerTool::ITimerChannel::getTriggerReload(float, unsigned long*)>:
     public:
        virtual errorCode begin(callback_t callback, float period, bool oneShot) = 0;
        virtual errorCode trigger(float delay) = 0;
        virtual errorCode triggerDirect(uint32_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode triggerDirect(uint64_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode getTriggerReload(float delay, uint32_t* reload) {return postError(errorCode::notImplemented);};
    17b8:	2069      	movs	r0, #105	; 0x69
    17ba:	f000 be85 	b.w	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    17be:	bf00      	nop

000017c0 <TeensyTimerTool::ITimerChannel::triggerDirect(unsigned long long)>:
    {
     public:
        virtual errorCode begin(callback_t callback, float period, bool oneShot) = 0;
        virtual errorCode trigger(float delay) = 0;
        virtual errorCode triggerDirect(uint32_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode triggerDirect(uint64_t reload){ return postError(errorCode::notImplemented); };
    17c0:	2069      	movs	r0, #105	; 0x69
    17c2:	f000 be81 	b.w	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    17c6:	bf00      	nop

000017c8 <TeensyTimerTool::ITimerChannel::triggerDirect(unsigned long)>:
    class ITimerChannel
    {
     public:
        virtual errorCode begin(callback_t callback, float period, bool oneShot) = 0;
        virtual errorCode trigger(float delay) = 0;
        virtual errorCode triggerDirect(uint32_t reload){ return postError(errorCode::notImplemented); };
    17c8:	2069      	movs	r0, #105	; 0x69
    17ca:	f000 be7d 	b.w	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    17ce:	bf00      	nop

000017d0 <TeensyTimerTool::ITimerChannel::setNextPeriod(unsigned long)>:
        virtual errorCode setPrescaler(int  psc) { return postError(errorCode::notImplemented); }

        virtual float getMaxPeriod() const = 0;
        virtual errorCode setPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setCurrentPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setNextPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
    17d0:	2069      	movs	r0, #105	; 0x69
    17d2:	f000 be79 	b.w	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    17d6:	bf00      	nop

000017d8 <TeensyTimerTool::ITimerChannel::setCurrentPeriod(unsigned long)>:

        virtual errorCode setPrescaler(int  psc) { return postError(errorCode::notImplemented); }

        virtual float getMaxPeriod() const = 0;
        virtual errorCode setPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setCurrentPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
    17d8:	2069      	movs	r0, #105	; 0x69
    17da:	f000 be75 	b.w	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    17de:	bf00      	nop

000017e0 <TeensyTimerTool::ITimerChannel::setPeriod(unsigned long)>:
        virtual errorCode stop() = 0;

        virtual errorCode setPrescaler(int  psc) { return postError(errorCode::notImplemented); }

        virtual float getMaxPeriod() const = 0;
        virtual errorCode setPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
    17e0:	2069      	movs	r0, #105	; 0x69
    17e2:	f000 be71 	b.w	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    17e6:	bf00      	nop

000017e8 <TeensyTimerTool::TckChannel<unsigned long>::getTriggerReload(float, unsigned long*)>:
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    17e8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 182c <TeensyTimerTool::TckChannel<unsigned long>::getTriggerReload(float, unsigned long*)+0x44>
    17ec:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        inline errorCode start() override;
        inline errorCode stop() override;

        inline errorCode trigger(float delay_us) override;
        inline errorCode triggerDirect(CounterType reload) override;
        inline errorCode getTriggerReload(float delay, CounterType* reload) override
    17f0:	b538      	push	{r3, r4, r5, lr}
    17f2:	ed2d 8b02 	vpush	{d8}
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    17f6:	ee87 8a27 	vdiv.f32	s16, s14, s15
        inline errorCode start() override;
        inline errorCode stop() override;

        inline errorCode trigger(float delay_us) override;
        inline errorCode triggerDirect(CounterType reload) override;
        inline errorCode getTriggerReload(float delay, CounterType* reload) override
    17fa:	460d      	mov	r5, r1
    }

    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
    17fc:	eeb4 0ac8 	vcmpe.f32	s0, s16
    1800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1804:	dd08      	ble.n	1818 <TeensyTimerTool::TckChannel<unsigned long>::getTriggerReload(float, unsigned long*)+0x30>
    1806:	4604      	mov	r4, r0
        {
            microSecond = getMaxMicros();
            postError(errorCode::periodOverflow);
    1808:	f06f 0063 	mvn.w	r0, #99	; 0x63
    180c:	f000 fe5c 	bl	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
        {
            microSecond = getMaxMicros();
    1810:	eeb0 0a48 	vmov.f32	s0, s16
    1814:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30

        inline errorCode trigger(float delay_us) override;
        inline errorCode triggerDirect(CounterType reload) override;
        inline errorCode getTriggerReload(float delay, CounterType* reload) override
        {
            *reload = microsecondToCycles(delay);
    1818:	ee20 0a27 	vmul.f32	s0, s0, s15
            return errorCode::OK;
        }
    181c:	2000      	movs	r0, #0
    181e:	ecbd 8b02 	vpop	{d8}

        inline errorCode trigger(float delay_us) override;
        inline errorCode triggerDirect(CounterType reload) override;
        inline errorCode getTriggerReload(float delay, CounterType* reload) override
        {
            *reload = microsecondToCycles(delay);
    1822:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    1826:	ed85 0a00 	vstr	s0, [r5]
            return errorCode::OK;
        }
    182a:	bd38      	pop	{r3, r4, r5, pc}
    182c:	4f700000 	.word	0x4f700000

00001830 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()>:
    };

    // IMPLEMENTATION ==================================================================

    template<typename counterType>
    ITimerChannel* TCK_t::getTimer()
    1830:	b570      	push	{r4, r5, r6, lr}
    {
        if (!isInitialized)
    1832:	4c16      	ldr	r4, [pc, #88]	; (188c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x5c>)
    1834:	7821      	ldrb	r1, [r4, #0]
    1836:	b989      	cbnz	r1, 185c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x2c>
    1838:	2250      	movs	r2, #80	; 0x50
    183a:	4815      	ldr	r0, [pc, #84]	; (1890 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x60>)
    183c:	f003 f9b4 	bl	4ba8 <memset>
        {
            for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
            {
                channels[chNr] = nullptr;
            }
            isInitialized = true;
    1840:	2301      	movs	r3, #1

            // enable the cycle counter
            ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1842:	4914      	ldr	r1, [pc, #80]	; (1894 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x64>)
        {
            for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
            {
                channels[chNr] = nullptr;
            }
            isInitialized = true;
    1844:	7023      	strb	r3, [r4, #0]

            // enable the cycle counter
            ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1846:	680b      	ldr	r3, [r1, #0]
            ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1848:	4a13      	ldr	r2, [pc, #76]	; (1898 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x68>)
                channels[chNr] = nullptr;
            }
            isInitialized = true;

            // enable the cycle counter
            ARM_DEMCR |= ARM_DEMCR_TRCENA;
    184a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    184e:	600b      	str	r3, [r1, #0]
            ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1850:	6813      	ldr	r3, [r2, #0]
    1852:	f043 0301 	orr.w	r3, r3, #1
    1856:	6013      	str	r3, [r2, #0]

            // initialize the yield hook
           #if defined(TEENSYDUINO) && YIELD_TYPE == YIELD_STANDARD
              extern void initYieldHook();
              initYieldHook();
    1858:	f001 f818 	bl	288c <TeensyTimerTool::initYieldHook()>
    185c:	4b0f      	ldr	r3, [pc, #60]	; (189c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x6c>)
           #endif
        }

        for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
    185e:	2400      	movs	r4, #0
        {
            if (channels[chNr] == nullptr)
    1860:	f853 5f04 	ldr.w	r5, [r3, #4]!
    1864:	b125      	cbz	r5, 1870 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x40>
              extern void initYieldHook();
              initYieldHook();
           #endif
        }

        for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
    1866:	3401      	adds	r4, #1
    1868:	2c14      	cmp	r4, #20
    186a:	d1f9      	bne.n	1860 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x30>
                channels[chNr] = new TckChannel<counterType>();
                return channels[chNr];
            }
        }

        return nullptr;
    186c:	2000      	movs	r0, #0
    }
    186e:	bd70      	pop	{r4, r5, r6, pc}

        for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
        {
            if (channels[chNr] == nullptr)
            {
                channels[chNr] = new TckChannel<counterType>();
    1870:	2034      	movs	r0, #52	; 0x34
    };

    // IMPLEMENTATION ==============================================

    template <typename T>
    TckChannel<T>::TckChannel()
    1872:	4e0b      	ldr	r6, [pc, #44]	; (18a0 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x70>)
    1874:	f002 fad2 	bl	3e1c <operator new(unsigned int)>
    {
        triggered = false;
        clock = F_CPU / 1'000'000.0f;
    1878:	490a      	ldr	r1, [pc, #40]	; (18a4 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x74>)
    187a:	4a05      	ldr	r2, [pc, #20]	; (1890 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x60>)

    // IMPLEMENTATION ====================================================

    ITimerChannel::ITimerChannel(callback_t* cbStorage)
    {
        this->pCallback = cbStorage;
    187c:	6045      	str	r5, [r0, #4]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    187e:	6105      	str	r5, [r0, #16]
    // IMPLEMENTATION ==============================================

    template <typename T>
    TckChannel<T>::TckChannel()
    {
        triggered = false;
    1880:	7645      	strb	r5, [r0, #25]
    };

    // IMPLEMENTATION ==============================================

    template <typename T>
    TckChannel<T>::TckChannel()
    1882:	6006      	str	r6, [r0, #0]
    {
        triggered = false;
        clock = F_CPU / 1'000'000.0f;
    1884:	6301      	str	r1, [r0, #48]	; 0x30
    1886:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
                return channels[chNr];
    188a:	bd70      	pop	{r4, r5, r6, pc}
    188c:	20001a50 	.word	0x20001a50
    1890:	20001a00 	.word	0x20001a00
    1894:	e000edfc 	.word	0xe000edfc
    1898:	e0001000 	.word	0xe0001000
    189c:	200019fc 	.word	0x200019fc
    18a0:	200001e0 	.word	0x200001e0
    18a4:	44160000 	.word	0x44160000

000018a8 <TeensyTimerTool::TMR_t<0u>::getTimer()>:
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];

    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    18a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        if (!isInitialized)
    18ac:	4e33      	ldr	r6, [pc, #204]	; (197c <TeensyTimerTool::TMR_t<0u>::getTimer()+0xd4>)
    18ae:	7835      	ldrb	r5, [r6, #0]
    18b0:	2d00      	cmp	r5, #0
    18b2:	d131      	bne.n	1918 <TeensyTimerTool::TMR_t<0u>::getTimer()+0x70>
    18b4:	4f32      	ldr	r7, [pc, #200]	; (1980 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xd8>)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
            {
                pTMR->CH[chNr].CTRL = 0x0000;
    18b6:	46a8      	mov	r8, r5
    18b8:	463c      	mov	r4, r7
    18ba:	016a      	lsls	r2, r5, #5
    18bc:	4b31      	ldr	r3, [pc, #196]	; (1984 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xdc>)
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    18be:	4621      	mov	r1, r4
    18c0:	3501      	adds	r5, #1
    18c2:	4413      	add	r3, r2
    18c4:	4620      	mov	r0, r4
    18c6:	2203      	movs	r2, #3
    18c8:	f8a3 800c 	strh.w	r8, [r3, #12]
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    18cc:	68a3      	ldr	r3, [r4, #8]
    18ce:	b123      	cbz	r3, 18da <TeensyTimerTool::TMR_t<0u>::getTimer()+0x32>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    18d0:	4798      	blx	r3
	    _M_manager = nullptr;
    18d2:	f8c4 8008 	str.w	r8, [r4, #8]
	    _M_invoker = nullptr;
    18d6:	f8c4 800c 	str.w	r8, [r4, #12]
    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
    18da:	2d04      	cmp	r5, #4
    18dc:	f104 0410 	add.w	r4, r4, #16
    18e0:	d1eb      	bne.n	18ba <TeensyTimerTool::TMR_t<0u>::getTimer()+0x12>
    18e2:	4b29      	ldr	r3, [pc, #164]	; (1988 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xe0>)
    18e4:	4a29      	ldr	r2, [pc, #164]	; (198c <TeensyTimerTool::TMR_t<0u>::getTimer()+0xe4>)
    18e6:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    18ea:	4a29      	ldr	r2, [pc, #164]	; (1990 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xe8>)
    18ec:	2120      	movs	r1, #32
            isInitialized = true;
    18ee:	2301      	movs	r3, #1
            return new TMRChannel(pCH0, &callbacks[0]);
    18f0:	2018      	movs	r0, #24
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    18f2:	6011      	str	r1, [r2, #0]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    18f4:	2500      	movs	r5, #0
            isInitialized = true;
    18f6:	7033      	strb	r3, [r6, #0]
            return new TMRChannel(pCH0, &callbacks[0]);
    18f8:	f002 fa90 	bl	3e1c <operator new(unsigned int)>
    18fc:	4925      	ldr	r1, [pc, #148]	; (1994 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xec>)
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
        pscBits = 0b1000 | (psc & 0b0111);
    18fe:	220f      	movs	r2, #15
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1900:	4e25      	ldr	r6, [pc, #148]	; (1998 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xf0>)
    1902:	680c      	ldr	r4, [r1, #0]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1904:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1908:	60c5      	str	r5, [r0, #12]
    {
        this->regs = regs;
    190a:	6084      	str	r4, [r0, #8]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    190c:	6101      	str	r1, [r0, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    190e:	6142      	str	r2, [r0, #20]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1910:	e880 00c0 	stmia.w	r0, {r6, r7}
    1914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    1918:	4b1a      	ldr	r3, [pc, #104]	; (1984 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xdc>)
    191a:	899a      	ldrh	r2, [r3, #12]
    191c:	b292      	uxth	r2, r2
    191e:	b16a      	cbz	r2, 193c <TeensyTimerTool::TMR_t<0u>::getTimer()+0x94>
    1920:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    1922:	b292      	uxth	r2, r2
    1924:	b31a      	cbz	r2, 196e <TeensyTimerTool::TMR_t<0u>::getTimer()+0xc6>
    1926:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    192a:	b292      	uxth	r2, r2
    192c:	b30a      	cbz	r2, 1972 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xca>
    192e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    1932:	b29b      	uxth	r3, r3
    1934:	b1fb      	cbz	r3, 1976 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xce>
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
            }
        }
        return nullptr;
    1936:	2000      	movs	r0, #0
    }
    1938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    193c:	4614      	mov	r4, r2
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    193e:	2018      	movs	r0, #24
    1940:	2600      	movs	r6, #0
    1942:	f002 fa6b 	bl	3e1c <operator new(unsigned int)>
    1946:	4a0e      	ldr	r2, [pc, #56]	; (1980 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xd8>)
    1948:	4603      	mov	r3, r0
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    194a:	490e      	ldr	r1, [pc, #56]	; (1984 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xdc>)
    194c:	0160      	lsls	r0, r4, #5
    194e:	4f12      	ldr	r7, [pc, #72]	; (1998 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xf0>)
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    1950:	eb02 1204 	add.w	r2, r2, r4, lsl #4
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1954:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    1958:	4401      	add	r1, r0
        pscBits = 0b1000 | (psc & 0b0111);
    195a:	240f      	movs	r4, #15
    195c:	605a      	str	r2, [r3, #4]
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    195e:	4618      	mov	r0, r3
    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    {
        this->regs = regs;
    1960:	6099      	str	r1, [r3, #8]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1962:	601f      	str	r7, [r3, #0]
    1964:	60de      	str	r6, [r3, #12]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1966:	611d      	str	r5, [r3, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    1968:	615c      	str	r4, [r3, #20]
    196a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NVIC_ENABLE_IRQ(irq);
            isInitialized = true;
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
    196e:	2401      	movs	r4, #1
    1970:	e7e5      	b.n	193e <TeensyTimerTool::TMR_t<0u>::getTimer()+0x96>
    1972:	2402      	movs	r4, #2
    1974:	e7e3      	b.n	193e <TeensyTimerTool::TMR_t<0u>::getTimer()+0x96>
    1976:	2403      	movs	r4, #3
    1978:	e7e1      	b.n	193e <TeensyTimerTool::TMR_t<0u>::getTimer()+0x96>
    197a:	bf00      	nop
    197c:	200017b4 	.word	0x200017b4
    1980:	20001930 	.word	0x20001930
    1984:	401dc000 	.word	0x401dc000
    1988:	20002000 	.word	0x20002000
    198c:	000011c1 	.word	0x000011c1
    1990:	e000e110 	.word	0xe000e110
    1994:	2000192c 	.word	0x2000192c
    1998:	20000150 	.word	0x20000150

0000199c <TeensyTimerTool::TMR_t<1u>::getTimer()>:
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];

    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    199c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        if (!isInitialized)
    19a0:	4e33      	ldr	r6, [pc, #204]	; (1a70 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xd4>)
    19a2:	7835      	ldrb	r5, [r6, #0]
    19a4:	2d00      	cmp	r5, #0
    19a6:	d131      	bne.n	1a0c <TeensyTimerTool::TMR_t<1u>::getTimer()+0x70>
    19a8:	4f32      	ldr	r7, [pc, #200]	; (1a74 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xd8>)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
            {
                pTMR->CH[chNr].CTRL = 0x0000;
    19aa:	46a8      	mov	r8, r5
    19ac:	463c      	mov	r4, r7
    19ae:	016a      	lsls	r2, r5, #5
    19b0:	4b31      	ldr	r3, [pc, #196]	; (1a78 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xdc>)
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    19b2:	4621      	mov	r1, r4
    19b4:	3501      	adds	r5, #1
    19b6:	4413      	add	r3, r2
    19b8:	4620      	mov	r0, r4
    19ba:	2203      	movs	r2, #3
    19bc:	f8a3 800c 	strh.w	r8, [r3, #12]
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    19c0:	68a3      	ldr	r3, [r4, #8]
    19c2:	b123      	cbz	r3, 19ce <TeensyTimerTool::TMR_t<1u>::getTimer()+0x32>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    19c4:	4798      	blx	r3
	    _M_manager = nullptr;
    19c6:	f8c4 8008 	str.w	r8, [r4, #8]
	    _M_invoker = nullptr;
    19ca:	f8c4 800c 	str.w	r8, [r4, #12]
    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
    19ce:	2d04      	cmp	r5, #4
    19d0:	f104 0410 	add.w	r4, r4, #16
    19d4:	d1eb      	bne.n	19ae <TeensyTimerTool::TMR_t<1u>::getTimer()+0x12>
    19d6:	4b29      	ldr	r3, [pc, #164]	; (1a7c <TeensyTimerTool::TMR_t<1u>::getTimer()+0xe0>)
    19d8:	4a29      	ldr	r2, [pc, #164]	; (1a80 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xe4>)
    19da:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    19de:	4a29      	ldr	r2, [pc, #164]	; (1a84 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xe8>)
    19e0:	2140      	movs	r1, #64	; 0x40
            isInitialized = true;
    19e2:	2301      	movs	r3, #1
            return new TMRChannel(pCH0, &callbacks[0]);
    19e4:	2018      	movs	r0, #24
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    19e6:	6011      	str	r1, [r2, #0]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    19e8:	2500      	movs	r5, #0
            isInitialized = true;
    19ea:	7033      	strb	r3, [r6, #0]
            return new TMRChannel(pCH0, &callbacks[0]);
    19ec:	f002 fa16 	bl	3e1c <operator new(unsigned int)>
    19f0:	4925      	ldr	r1, [pc, #148]	; (1a88 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xec>)
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
        pscBits = 0b1000 | (psc & 0b0111);
    19f2:	220f      	movs	r2, #15
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    19f4:	4e25      	ldr	r6, [pc, #148]	; (1a8c <TeensyTimerTool::TMR_t<1u>::getTimer()+0xf0>)
    19f6:	680c      	ldr	r4, [r1, #0]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    19f8:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    19fc:	60c5      	str	r5, [r0, #12]
    {
        this->regs = regs;
    19fe:	6084      	str	r4, [r0, #8]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1a00:	6101      	str	r1, [r0, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    1a02:	6142      	str	r2, [r0, #20]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1a04:	e880 00c0 	stmia.w	r0, {r6, r7}
    1a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    1a0c:	4b1a      	ldr	r3, [pc, #104]	; (1a78 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xdc>)
    1a0e:	899a      	ldrh	r2, [r3, #12]
    1a10:	b292      	uxth	r2, r2
    1a12:	b16a      	cbz	r2, 1a30 <TeensyTimerTool::TMR_t<1u>::getTimer()+0x94>
    1a14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    1a16:	b292      	uxth	r2, r2
    1a18:	b31a      	cbz	r2, 1a62 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xc6>
    1a1a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    1a1e:	b292      	uxth	r2, r2
    1a20:	b30a      	cbz	r2, 1a66 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xca>
    1a22:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    1a26:	b29b      	uxth	r3, r3
    1a28:	b1fb      	cbz	r3, 1a6a <TeensyTimerTool::TMR_t<1u>::getTimer()+0xce>
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
            }
        }
        return nullptr;
    1a2a:	2000      	movs	r0, #0
    }
    1a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    1a30:	4614      	mov	r4, r2
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    1a32:	2018      	movs	r0, #24
    1a34:	2600      	movs	r6, #0
    1a36:	f002 f9f1 	bl	3e1c <operator new(unsigned int)>
    1a3a:	4a0e      	ldr	r2, [pc, #56]	; (1a74 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xd8>)
    1a3c:	4603      	mov	r3, r0
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    1a3e:	490e      	ldr	r1, [pc, #56]	; (1a78 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xdc>)
    1a40:	0160      	lsls	r0, r4, #5
    1a42:	4f12      	ldr	r7, [pc, #72]	; (1a8c <TeensyTimerTool::TMR_t<1u>::getTimer()+0xf0>)
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    1a44:	eb02 1204 	add.w	r2, r2, r4, lsl #4
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1a48:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    1a4c:	4401      	add	r1, r0
        pscBits = 0b1000 | (psc & 0b0111);
    1a4e:	240f      	movs	r4, #15
    1a50:	605a      	str	r2, [r3, #4]
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    1a52:	4618      	mov	r0, r3
    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    {
        this->regs = regs;
    1a54:	6099      	str	r1, [r3, #8]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1a56:	601f      	str	r7, [r3, #0]
    1a58:	60de      	str	r6, [r3, #12]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1a5a:	611d      	str	r5, [r3, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    1a5c:	615c      	str	r4, [r3, #20]
    1a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NVIC_ENABLE_IRQ(irq);
            isInitialized = true;
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
    1a62:	2401      	movs	r4, #1
    1a64:	e7e5      	b.n	1a32 <TeensyTimerTool::TMR_t<1u>::getTimer()+0x96>
    1a66:	2402      	movs	r4, #2
    1a68:	e7e3      	b.n	1a32 <TeensyTimerTool::TMR_t<1u>::getTimer()+0x96>
    1a6a:	2403      	movs	r4, #3
    1a6c:	e7e1      	b.n	1a32 <TeensyTimerTool::TMR_t<1u>::getTimer()+0x96>
    1a6e:	bf00      	nop
    1a70:	200017b3 	.word	0x200017b3
    1a74:	200018ec 	.word	0x200018ec
    1a78:	401e0000 	.word	0x401e0000
    1a7c:	20002000 	.word	0x20002000
    1a80:	0000126d 	.word	0x0000126d
    1a84:	e000e110 	.word	0xe000e110
    1a88:	200018e8 	.word	0x200018e8
    1a8c:	20000150 	.word	0x20000150

00001a90 <TeensyTimerTool::TMR_t<2u>::getTimer()>:
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];

    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    1a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        if (!isInitialized)
    1a94:	4e33      	ldr	r6, [pc, #204]	; (1b64 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xd4>)
    1a96:	7835      	ldrb	r5, [r6, #0]
    1a98:	2d00      	cmp	r5, #0
    1a9a:	d131      	bne.n	1b00 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x70>
    1a9c:	4f32      	ldr	r7, [pc, #200]	; (1b68 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xd8>)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
            {
                pTMR->CH[chNr].CTRL = 0x0000;
    1a9e:	46a8      	mov	r8, r5
    1aa0:	463c      	mov	r4, r7
    1aa2:	016a      	lsls	r2, r5, #5
    1aa4:	4b31      	ldr	r3, [pc, #196]	; (1b6c <TeensyTimerTool::TMR_t<2u>::getTimer()+0xdc>)
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    1aa6:	4621      	mov	r1, r4
    1aa8:	3501      	adds	r5, #1
    1aaa:	4413      	add	r3, r2
    1aac:	4620      	mov	r0, r4
    1aae:	2203      	movs	r2, #3
    1ab0:	f8a3 800c 	strh.w	r8, [r3, #12]
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    1ab4:	68a3      	ldr	r3, [r4, #8]
    1ab6:	b123      	cbz	r3, 1ac2 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x32>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    1ab8:	4798      	blx	r3
	    _M_manager = nullptr;
    1aba:	f8c4 8008 	str.w	r8, [r4, #8]
	    _M_invoker = nullptr;
    1abe:	f8c4 800c 	str.w	r8, [r4, #12]
    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
    1ac2:	2d04      	cmp	r5, #4
    1ac4:	f104 0410 	add.w	r4, r4, #16
    1ac8:	d1eb      	bne.n	1aa2 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x12>
    1aca:	4b29      	ldr	r3, [pc, #164]	; (1b70 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xe0>)
    1acc:	4a29      	ldr	r2, [pc, #164]	; (1b74 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xe4>)
    1ace:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    1ad2:	4a29      	ldr	r2, [pc, #164]	; (1b78 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xe8>)
    1ad4:	2180      	movs	r1, #128	; 0x80
            isInitialized = true;
    1ad6:	2301      	movs	r3, #1
            return new TMRChannel(pCH0, &callbacks[0]);
    1ad8:	2018      	movs	r0, #24
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    1ada:	6011      	str	r1, [r2, #0]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1adc:	2500      	movs	r5, #0
            isInitialized = true;
    1ade:	7033      	strb	r3, [r6, #0]
            return new TMRChannel(pCH0, &callbacks[0]);
    1ae0:	f002 f99c 	bl	3e1c <operator new(unsigned int)>
    1ae4:	4925      	ldr	r1, [pc, #148]	; (1b7c <TeensyTimerTool::TMR_t<2u>::getTimer()+0xec>)
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
        pscBits = 0b1000 | (psc & 0b0111);
    1ae6:	220f      	movs	r2, #15
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1ae8:	4e25      	ldr	r6, [pc, #148]	; (1b80 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xf0>)
    1aea:	680c      	ldr	r4, [r1, #0]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1aec:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1af0:	60c5      	str	r5, [r0, #12]
    {
        this->regs = regs;
    1af2:	6084      	str	r4, [r0, #8]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1af4:	6101      	str	r1, [r0, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    1af6:	6142      	str	r2, [r0, #20]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1af8:	e880 00c0 	stmia.w	r0, {r6, r7}
    1afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    1b00:	4b1a      	ldr	r3, [pc, #104]	; (1b6c <TeensyTimerTool::TMR_t<2u>::getTimer()+0xdc>)
    1b02:	899a      	ldrh	r2, [r3, #12]
    1b04:	b292      	uxth	r2, r2
    1b06:	b16a      	cbz	r2, 1b24 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x94>
    1b08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    1b0a:	b292      	uxth	r2, r2
    1b0c:	b31a      	cbz	r2, 1b56 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xc6>
    1b0e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    1b12:	b292      	uxth	r2, r2
    1b14:	b30a      	cbz	r2, 1b5a <TeensyTimerTool::TMR_t<2u>::getTimer()+0xca>
    1b16:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    1b1a:	b29b      	uxth	r3, r3
    1b1c:	b1fb      	cbz	r3, 1b5e <TeensyTimerTool::TMR_t<2u>::getTimer()+0xce>
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
            }
        }
        return nullptr;
    1b1e:	2000      	movs	r0, #0
    }
    1b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    1b24:	4614      	mov	r4, r2
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    1b26:	2018      	movs	r0, #24
    1b28:	2600      	movs	r6, #0
    1b2a:	f002 f977 	bl	3e1c <operator new(unsigned int)>
    1b2e:	4a0e      	ldr	r2, [pc, #56]	; (1b68 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xd8>)
    1b30:	4603      	mov	r3, r0
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    1b32:	490e      	ldr	r1, [pc, #56]	; (1b6c <TeensyTimerTool::TMR_t<2u>::getTimer()+0xdc>)
    1b34:	0160      	lsls	r0, r4, #5
    1b36:	4f12      	ldr	r7, [pc, #72]	; (1b80 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xf0>)
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    1b38:	eb02 1204 	add.w	r2, r2, r4, lsl #4
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1b3c:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    1b40:	4401      	add	r1, r0
        pscBits = 0b1000 | (psc & 0b0111);
    1b42:	240f      	movs	r4, #15
    1b44:	605a      	str	r2, [r3, #4]
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    1b46:	4618      	mov	r0, r3
    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    {
        this->regs = regs;
    1b48:	6099      	str	r1, [r3, #8]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1b4a:	601f      	str	r7, [r3, #0]
    1b4c:	60de      	str	r6, [r3, #12]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1b4e:	611d      	str	r5, [r3, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    1b50:	615c      	str	r4, [r3, #20]
    1b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NVIC_ENABLE_IRQ(irq);
            isInitialized = true;
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
    1b56:	2401      	movs	r4, #1
    1b58:	e7e5      	b.n	1b26 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x96>
    1b5a:	2402      	movs	r4, #2
    1b5c:	e7e3      	b.n	1b26 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x96>
    1b5e:	2403      	movs	r4, #3
    1b60:	e7e1      	b.n	1b26 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x96>
    1b62:	bf00      	nop
    1b64:	200017b2 	.word	0x200017b2
    1b68:	200018a8 	.word	0x200018a8
    1b6c:	401e4000 	.word	0x401e4000
    1b70:	20002000 	.word	0x20002000
    1b74:	00001319 	.word	0x00001319
    1b78:	e000e110 	.word	0xe000e110
    1b7c:	200018a4 	.word	0x200018a4
    1b80:	20000150 	.word	0x20000150

00001b84 <TeensyTimerTool::TMR_t<3u>::getTimer()>:
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];

    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    1b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        if (!isInitialized)
    1b88:	4e33      	ldr	r6, [pc, #204]	; (1c58 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xd4>)
    1b8a:	7835      	ldrb	r5, [r6, #0]
    1b8c:	2d00      	cmp	r5, #0
    1b8e:	d132      	bne.n	1bf6 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x72>
    1b90:	4f32      	ldr	r7, [pc, #200]	; (1c5c <TeensyTimerTool::TMR_t<3u>::getTimer()+0xd8>)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
            {
                pTMR->CH[chNr].CTRL = 0x0000;
    1b92:	46a8      	mov	r8, r5
    1b94:	463c      	mov	r4, r7
    1b96:	016a      	lsls	r2, r5, #5
    1b98:	4b31      	ldr	r3, [pc, #196]	; (1c60 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xdc>)
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    1b9a:	4621      	mov	r1, r4
    1b9c:	3501      	adds	r5, #1
    1b9e:	4413      	add	r3, r2
    1ba0:	4620      	mov	r0, r4
    1ba2:	2203      	movs	r2, #3
    1ba4:	f8a3 800c 	strh.w	r8, [r3, #12]
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    1ba8:	68a3      	ldr	r3, [r4, #8]
    1baa:	b123      	cbz	r3, 1bb6 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x32>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    1bac:	4798      	blx	r3
	    _M_manager = nullptr;
    1bae:	f8c4 8008 	str.w	r8, [r4, #8]
	    _M_invoker = nullptr;
    1bb2:	f8c4 800c 	str.w	r8, [r4, #12]
    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
    1bb6:	2d04      	cmp	r5, #4
    1bb8:	f104 0410 	add.w	r4, r4, #16
    1bbc:	d1eb      	bne.n	1b96 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x12>
    1bbe:	4b29      	ldr	r3, [pc, #164]	; (1c64 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xe0>)
    1bc0:	4a29      	ldr	r2, [pc, #164]	; (1c68 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xe4>)
    1bc2:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    1bc6:	4a29      	ldr	r2, [pc, #164]	; (1c6c <TeensyTimerTool::TMR_t<3u>::getTimer()+0xe8>)
    1bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
            isInitialized = true;
    1bcc:	2301      	movs	r3, #1
            return new TMRChannel(pCH0, &callbacks[0]);
    1bce:	2018      	movs	r0, #24
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    1bd0:	6011      	str	r1, [r2, #0]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1bd2:	2500      	movs	r5, #0
            isInitialized = true;
    1bd4:	7033      	strb	r3, [r6, #0]
            return new TMRChannel(pCH0, &callbacks[0]);
    1bd6:	f002 f921 	bl	3e1c <operator new(unsigned int)>
    1bda:	4925      	ldr	r1, [pc, #148]	; (1c70 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xec>)
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
        pscBits = 0b1000 | (psc & 0b0111);
    1bdc:	220f      	movs	r2, #15
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1bde:	4e25      	ldr	r6, [pc, #148]	; (1c74 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xf0>)
    1be0:	680c      	ldr	r4, [r1, #0]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1be2:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1be6:	60c5      	str	r5, [r0, #12]
    {
        this->regs = regs;
    1be8:	6084      	str	r4, [r0, #8]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1bea:	6101      	str	r1, [r0, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    1bec:	6142      	str	r2, [r0, #20]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1bee:	e880 00c0 	stmia.w	r0, {r6, r7}
    1bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    1bf6:	4b1a      	ldr	r3, [pc, #104]	; (1c60 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xdc>)
    1bf8:	899a      	ldrh	r2, [r3, #12]
    1bfa:	b292      	uxth	r2, r2
    1bfc:	b16a      	cbz	r2, 1c1a <TeensyTimerTool::TMR_t<3u>::getTimer()+0x96>
    1bfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    1c00:	b292      	uxth	r2, r2
    1c02:	b31a      	cbz	r2, 1c4c <TeensyTimerTool::TMR_t<3u>::getTimer()+0xc8>
    1c04:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    1c08:	b292      	uxth	r2, r2
    1c0a:	b30a      	cbz	r2, 1c50 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xcc>
    1c0c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    1c10:	b29b      	uxth	r3, r3
    1c12:	b1fb      	cbz	r3, 1c54 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xd0>
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
            }
        }
        return nullptr;
    1c14:	2000      	movs	r0, #0
    }
    1c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    1c1a:	4614      	mov	r4, r2
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    1c1c:	2018      	movs	r0, #24
    1c1e:	2600      	movs	r6, #0
    1c20:	f002 f8fc 	bl	3e1c <operator new(unsigned int)>
    1c24:	4a0d      	ldr	r2, [pc, #52]	; (1c5c <TeensyTimerTool::TMR_t<3u>::getTimer()+0xd8>)
    1c26:	4603      	mov	r3, r0
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    1c28:	490d      	ldr	r1, [pc, #52]	; (1c60 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xdc>)
    1c2a:	0160      	lsls	r0, r4, #5
    1c2c:	4f11      	ldr	r7, [pc, #68]	; (1c74 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xf0>)
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    1c2e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1c32:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    1c36:	4401      	add	r1, r0
        pscBits = 0b1000 | (psc & 0b0111);
    1c38:	240f      	movs	r4, #15
    1c3a:	605a      	str	r2, [r3, #4]
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    1c3c:	4618      	mov	r0, r3
    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    {
        this->regs = regs;
    1c3e:	6099      	str	r1, [r3, #8]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    1c40:	601f      	str	r7, [r3, #0]
    1c42:	60de      	str	r6, [r3, #12]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    1c44:	611d      	str	r5, [r3, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    1c46:	615c      	str	r4, [r3, #20]
    1c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NVIC_ENABLE_IRQ(irq);
            isInitialized = true;
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
    1c4c:	2401      	movs	r4, #1
    1c4e:	e7e5      	b.n	1c1c <TeensyTimerTool::TMR_t<3u>::getTimer()+0x98>
    1c50:	2402      	movs	r4, #2
    1c52:	e7e3      	b.n	1c1c <TeensyTimerTool::TMR_t<3u>::getTimer()+0x98>
    1c54:	2403      	movs	r4, #3
    1c56:	e7e1      	b.n	1c1c <TeensyTimerTool::TMR_t<3u>::getTimer()+0x98>
    1c58:	200017b1 	.word	0x200017b1
    1c5c:	20001864 	.word	0x20001864
    1c60:	401e8000 	.word	0x401e8000
    1c64:	20002000 	.word	0x20002000
    1c68:	000013c5 	.word	0x000013c5
    1c6c:	e000e110 	.word	0xe000e110
    1c70:	20001860 	.word	0x20001860
    1c74:	20000150 	.word	0x20000150

00001c78 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)>:
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    1c78:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 1ce4 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x6c>
    1c7c:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    1c80:	6803      	ldr	r3, [r0, #0]
        this->triggered = true;
        return errorCode::OK;
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    1c82:	b570      	push	{r4, r5, r6, lr}
    1c84:	ed2d 8b02 	vpush	{d8}
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    1c88:	ee87 8a27 	vdiv.f32	s16, s14, s15
        this->triggered = true;
        return errorCode::OK;
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    1c8c:	4604      	mov	r4, r0
    {
        return triggerDirect(microsecondToCycles(delay));
    1c8e:	689d      	ldr	r5, [r3, #8]
    }

    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
    1c90:	eeb4 0ac8 	vcmpe.f32	s0, s16
    1c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1c98:	dd07      	ble.n	1caa <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x32>
        {
            microSecond = getMaxMicros();
            postError(errorCode::periodOverflow);
    1c9a:	f06f 0063 	mvn.w	r0, #99	; 0x63
    1c9e:	f000 fc13 	bl	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
        {
            microSecond = getMaxMicros();
    1ca2:	eeb0 0a48 	vmov.f32	s0, s16
    1ca6:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            postError(errorCode::periodOverflow);
        }
        return (CounterType)(microSecond * clock);
    1caa:	ee20 0a27 	vmul.f32	s0, s0, s15
    1cae:	4b0e      	ldr	r3, [pc, #56]	; (1ce8 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x70>)
    1cb0:	429d      	cmp	r5, r3
    1cb2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    1cb6:	ee17 1a90 	vmov	r1, s15
    1cba:	d10c      	bne.n	1cd6 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x5e>
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    1cbc:	4a0b      	ldr	r2, [pc, #44]	; (1cec <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x74>)
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
        this->nextPeriod = reload;
        this->currentPeriod = this->nextPeriod;
        this->triggered = true;
    1cbe:	2301      	movs	r3, #1

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    1cc0:	2000      	movs	r0, #0
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    1cc2:	6812      	ldr	r2, [r2, #0]

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
        this->nextPeriod = reload;
    1cc4:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    }

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
    1cc8:	61e2      	str	r2, [r4, #28]
        this->nextPeriod = reload;
        this->currentPeriod = this->nextPeriod;
    1cca:	edc4 7a08 	vstr	s15, [r4, #32]
        this->triggered = true;
    1cce:	7663      	strb	r3, [r4, #25]

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    1cd0:	ecbd 8b02 	vpop	{d8}
    1cd4:	bd70      	pop	{r4, r5, r6, pc}
    1cd6:	ecbd 8b02 	vpop	{d8}
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    1cda:	4620      	mov	r0, r4
    1cdc:	462b      	mov	r3, r5
    }
    1cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    1ce2:	4718      	bx	r3
    1ce4:	4f700000 	.word	0x4f700000
    1ce8:	00001561 	.word	0x00001561
    1cec:	e0001004 	.word	0xe0001004

00001cf0 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1cf0:	eddf 7a4c 	vldr	s15, [pc, #304]	; 1e24 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x134>

    errorCode TMRChannel::begin(callback_t cb, float tcnt, bool periodic)
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload;
        if (t > 0xFFFF)
    1cf4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 1e28 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x138>
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1cf8:	ee20 0a27 	vmul.f32	s0, s0, s15
    1cfc:	edd0 7a04 	vldr	s15, [r0, #16]
    // {
    //     return begin(cb, (float)tcnt, periodic);
    // }

    errorCode TMRChannel::begin(callback_t cb, float tcnt, bool periodic)
    {
    1d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d04:	ed2d 8b02 	vpush	{d8}
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1d08:	ee80 8a27 	vdiv.f32	s16, s0, s15
    // {
    //     return begin(cb, (float)tcnt, periodic);
    // }

    errorCode TMRChannel::begin(callback_t cb, float tcnt, bool periodic)
    {
    1d0c:	b08a      	sub	sp, #40	; 0x28
    1d0e:	4605      	mov	r5, r0
    1d10:	460e      	mov	r6, r1
    1d12:	4617      	mov	r7, r2
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload;
        if (t > 0xFFFF)
    1d14:	eeb4 8ac7 	vcmpe.f32	s16, s14
    1d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1d1c:	dc78      	bgt.n	1e10 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x120>
        {
            postError(errorCode::periodOverflow);
            reload = 0xFFFE;
        } else
        {
            reload = (uint16_t)t - 1;
    1d1e:	eefc 7ac8 	vcvt.u32.f32	s15, s16
    1d22:	ee17 2a90 	vmov	r2, s15
    1d26:	3a01      	subs	r2, #1
    1d28:	b292      	uxth	r2, r2
        }

        regs->CTRL = 0x0000;
    1d2a:	68ab      	ldr	r3, [r5, #8]
    1d2c:	2400      	movs	r4, #0
    1d2e:	f8d6 8008 	ldr.w	r8, [r6, #8]
    1d32:	819c      	strh	r4, [r3, #12]
        regs->LOAD = 0x0000;
    1d34:	80dc      	strh	r4, [r3, #6]
        regs->COMP1 = reload;
    1d36:	801a      	strh	r2, [r3, #0]
        regs->CMPLD1 = reload;
    1d38:	821a      	strh	r2, [r3, #16]
        regs->CNTR = 0x0000;
    1d3a:	815c      	strh	r4, [r3, #10]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    1d3c:	9404      	str	r4, [sp, #16]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    1d3e:	f1b8 0f00 	cmp.w	r8, #0
    1d42:	d060      	beq.n	1e06 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x116>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    1d44:	2202      	movs	r2, #2
    1d46:	4631      	mov	r1, r6
    1d48:	a802      	add	r0, sp, #8
    1d4a:	47c0      	blx	r8
	  _M_invoker = __x._M_invoker;
    1d4c:	68f2      	ldr	r2, [r6, #12]
	  _M_manager = __x._M_manager;
    1d4e:	68b3      	ldr	r3, [r6, #8]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    1d50:	ae06      	add	r6, sp, #24
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    1d52:	9408      	str	r4, [sp, #32]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
    1d54:	9205      	str	r2, [sp, #20]
	  _M_manager = __x._M_manager;
    1d56:	9304      	str	r3, [sp, #16]
    1d58:	686c      	ldr	r4, [r5, #4]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    1d5a:	b13b      	cbz	r3, 1d6c <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x7c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    1d5c:	2202      	movs	r2, #2
    1d5e:	a902      	add	r1, sp, #8
    1d60:	4630      	mov	r0, r6
    1d62:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    1d64:	9a05      	ldr	r2, [sp, #20]
	  _M_manager = __x._M_manager;
    1d66:	9b04      	ldr	r3, [sp, #16]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
    1d68:	9209      	str	r2, [sp, #36]	; 0x24
	  _M_manager = __x._M_manager;
    1d6a:	9308      	str	r3, [sp, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    1d6c:	68e2      	ldr	r2, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1d6e:	e896 0003 	ldmia.w	r6, {r0, r1}
    1d72:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    1d76:	e894 0003 	ldmia.w	r4, {r0, r1}
    1d7a:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    1d7e:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    1d82:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    1d84:	e884 0003 	stmia.w	r4, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1d88:	9908      	ldr	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
    1d8a:	9308      	str	r3, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
    1d8c:	60a1      	str	r1, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1d8e:	9909      	ldr	r1, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
    1d90:	9209      	str	r2, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
    1d92:	60e1      	str	r1, [r4, #12]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1d94:	b11b      	cbz	r3, 1d9e <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0xae>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1d96:	2203      	movs	r2, #3
    1d98:	4631      	mov	r1, r6
    1d9a:	4630      	mov	r0, r6
    1d9c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1d9e:	9b04      	ldr	r3, [sp, #16]
    1da0:	b11b      	cbz	r3, 1daa <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0xba>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1da2:	a902      	add	r1, sp, #8
    1da4:	2203      	movs	r2, #3
    1da6:	4608      	mov	r0, r1
    1da8:	4798      	blx	r3
        setCallback(cb);

        if (!periodic)
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    1daa:	696b      	ldr	r3, [r5, #20]
        regs->COMP1 = reload;
        regs->CMPLD1 = reload;
        regs->CNTR = 0x0000;
        setCallback(cb);

        if (!periodic)
    1dac:	bb47      	cbnz	r7, 1e00 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x110>
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    1dae:	f242 0160 	movw	r1, #8288	; 0x2060

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;
    1db2:	025b      	lsls	r3, r3, #9
    1db4:	68aa      	ldr	r2, [r5, #8]
    1db6:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
    1dba:	4319      	orrs	r1, r3

        start();
    1dbc:	682b      	ldr	r3, [r5, #0]

        if (!periodic)
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;
    1dbe:	8191      	strh	r1, [r2, #12]

        start();
    1dc0:	699b      	ldr	r3, [r3, #24]
    1dc2:	491a      	ldr	r1, [pc, #104]	; (1e2c <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x13c>)
    1dc4:	428b      	cmp	r3, r1
    1dc6:	d12a      	bne.n	1e1e <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x12e>
    {
    }

    errorCode TMRChannel::start()
    {
        regs->CNTR = 0x0000;
    1dc8:	2300      	movs	r3, #0
    1dca:	8153      	strh	r3, [r2, #10]
        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1dcc:	8a93      	ldrh	r3, [r2, #20]
    1dce:	f023 0310 	bic.w	r3, r3, #16
    1dd2:	041b      	lsls	r3, r3, #16
    1dd4:	0c1b      	lsrs	r3, r3, #16
    1dd6:	8293      	strh	r3, [r2, #20]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;
    1dd8:	8a93      	ldrh	r3, [r2, #20]
    1dda:	b29b      	uxth	r3, r3
    1ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1de0:	8293      	strh	r3, [r2, #20]

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;

        start();
        return t > 0xFFFF ? errorCode::periodOverflow : errorCode::OK;
    1de2:	eddf 7a11 	vldr	s15, [pc, #68]	; 1e28 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x138>
    1de6:	eeb4 8ae7 	vcmpe.f32	s16, s15
    1dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1dee:	bfcc      	ite	gt
    1df0:	f06f 0063 	mvngt.w	r0, #99	; 0x63
    1df4:	2000      	movle	r0, #0
    }
    1df6:	b00a      	add	sp, #40	; 0x28
    1df8:	ecbd 8b02 	vpop	{d8}
    1dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        if (!periodic)
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;
    1e00:	f242 0120 	movw	r1, #8224	; 0x2020
    1e04:	e7d5      	b.n	1db2 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0xc2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    1e06:	f8cd 8020 	str.w	r8, [sp, #32]
    1e0a:	ae06      	add	r6, sp, #24
    1e0c:	686c      	ldr	r4, [r5, #4]
    1e0e:	e7ad      	b.n	1d6c <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x7c>
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload;
        if (t > 0xFFFF)
        {
            postError(errorCode::periodOverflow);
    1e10:	f06f 0063 	mvn.w	r0, #99	; 0x63
    1e14:	f000 fb58 	bl	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
            reload = 0xFFFE;
    1e18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    1e1c:	e785      	b.n	1d2a <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x3a>
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;

        start();
    1e1e:	4628      	mov	r0, r5
    1e20:	4798      	blx	r3
    1e22:	e7de      	b.n	1de2 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0xf2>
    1e24:	43160000 	.word	0x43160000
    1e28:	477fff00 	.word	0x477fff00
    1e2c:	00000f69 	.word	0x00000f69

00001e30 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)>:

        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
    1e30:	b538      	push	{r3, r4, r5, lr}
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    1e32:	ed9f 7a18 	vldr	s14, [pc, #96]	; 1e94 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x64>

        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
    1e36:	460d      	mov	r5, r1
    1e38:	ed2d 8b02 	vpush	{d8}
    1e3c:	eeb0 8a40 	vmov.f32	s16, s0
    1e40:	ed90 0a05 	vldr	s0, [r0, #20]
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    1e44:	eec7 7a00 	vdiv.f32	s15, s14, s0
        return errorCode::OK;
    }

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
    1e48:	eeb4 8ae7 	vcmpe.f32	s16, s15
    1e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1e50:	dc0b      	bgt.n	1e6a <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x3a>
        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
        *reload = microsecondToCycles(delay);
    1e52:	ee28 8a00 	vmul.f32	s16, s16, s0
        return errorCode::OK;
    }
    1e56:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
        *reload = microsecondToCycles(delay);
    1e58:	eebc 8ac8 	vcvt.u32.f32	s16, s16
    1e5c:	ee18 3a10 	vmov	r3, s16
        return errorCode::OK;
    }
    1e60:	ecbd 8b02 	vpop	{d8}
        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
        *reload = microsecondToCycles(delay);
    1e64:	3b01      	subs	r3, #1
    1e66:	602b      	str	r3, [r5, #0]
        return errorCode::OK;
    }
    1e68:	bd38      	pop	{r3, r4, r5, pc}

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    1e6a:	6803      	ldr	r3, [r0, #0]
    1e6c:	4604      	mov	r4, r0
    1e6e:	4a0a      	ldr	r2, [pc, #40]	; (1e98 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x68>)
    1e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1e72:	4293      	cmp	r3, r2
    1e74:	d10a      	bne.n	1e8c <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x5c>

        inline errorCode trigger(float delay) override;
        inline errorCode triggerDirect(uint32_t delay) override;
        inline errorCode getTriggerReload(float delay, uint32_t* reload) override;

        inline float getMaxPeriod() const override { return getMaxMicros() / 1E6; }
    1e76:	ed9f 7a09 	vldr	s14, [pc, #36]	; 1e9c <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x6c>
    1e7a:	ee87 8a87 	vdiv.f32	s16, s15, s14
    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
    1e7e:	f06f 0063 	mvn.w	r0, #99	; 0x63
    1e82:	f000 fb21 	bl	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    1e86:	ed94 0a05 	vldr	s0, [r4, #20]
    1e8a:	e7e2      	b.n	1e52 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x22>

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    1e8c:	4798      	blx	r3
    1e8e:	eeb0 8a40 	vmov.f32	s16, s0
    1e92:	e7f4      	b.n	1e7e <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x4e>
    1e94:	4f800000 	.word	0x4f800000
    1e98:	00001155 	.word	0x00001155
    1e9c:	49742400 	.word	0x49742400

00001ea0 <TeensyTimerTool::GptChannel::trigger(float)>:
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    1ea0:	eddf 6a22 	vldr	s13, [pc, #136]	; 1f2c <TeensyTimerTool::GptChannel::trigger(float)+0x8c>
    1ea4:	edd0 7a05 	vldr	s15, [r0, #20]
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    1ea8:	6803      	ldr	r3, [r0, #0]
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    1eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        stop();
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
    1eae:	b570      	push	{r4, r5, r6, lr}
    1eb0:	4604      	mov	r4, r0
        return triggerDirect(microsecondToCycles(delay));
    1eb2:	689d      	ldr	r5, [r3, #8]
        stop();
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
    1eb4:	ed2d 8b02 	vpush	{d8}
        return errorCode::OK;
    }

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
    1eb8:	eeb4 0ac7 	vcmpe.f32	s0, s14
    1ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1ec0:	dc1a      	bgt.n	1ef8 <TeensyTimerTool::GptChannel::trigger(float)+0x58>
    1ec2:	eeb0 8a40 	vmov.f32	s16, s0
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
        }
        return (uint32_t)(clock * micros) - 1;
    1ec6:	ee67 7a88 	vmul.f32	s15, s15, s16
    1eca:	4b19      	ldr	r3, [pc, #100]	; (1f30 <TeensyTimerTool::GptChannel::trigger(float)+0x90>)
    1ecc:	429d      	cmp	r5, r3
    1ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1ed2:	ee17 2a90 	vmov	r2, s15
    1ed6:	f102 31ff 	add.w	r1, r2, #4294967295
    1eda:	d11c      	bne.n	1f16 <TeensyTimerTool::GptChannel::trigger(float)+0x76>
        return triggerDirect(microsecondToCycles(delay));
    }

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
    1edc:	68e3      	ldr	r3, [r4, #12]
    1ede:	203f      	movs	r0, #63	; 0x3f
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    1ee0:	2201      	movs	r2, #1
        return triggerDirect(microsecondToCycles(delay));
    }

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
    1ee2:	6098      	str	r0, [r3, #8]
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    1ee4:	2000      	movs	r0, #0

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    1ee6:	60da      	str	r2, [r3, #12]
        regs->OCR1 = reload;     // set overflow value
    1ee8:	6119      	str	r1, [r3, #16]
        regs->CR |= GPT_CR_EN;   // enable timer
    1eea:	681a      	ldr	r2, [r3, #0]
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    1eec:	ecbd 8b02 	vpop	{d8}
    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
        regs->OCR1 = reload;     // set overflow value
        regs->CR |= GPT_CR_EN;   // enable timer
    1ef0:	f042 0201 	orr.w	r2, r2, #1
    1ef4:	601a      	str	r2, [r3, #0]
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    1ef6:	bd70      	pop	{r4, r5, r6, pc}

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    1ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1efa:	4a0e      	ldr	r2, [pc, #56]	; (1f34 <TeensyTimerTool::GptChannel::trigger(float)+0x94>)
    1efc:	4293      	cmp	r3, r2
    1efe:	d111      	bne.n	1f24 <TeensyTimerTool::GptChannel::trigger(float)+0x84>

        inline errorCode trigger(float delay) override;
        inline errorCode triggerDirect(uint32_t delay) override;
        inline errorCode getTriggerReload(float delay, uint32_t* reload) override;

        inline float getMaxPeriod() const override { return getMaxMicros() / 1E6; }
    1f00:	eddf 7a0d 	vldr	s15, [pc, #52]	; 1f38 <TeensyTimerTool::GptChannel::trigger(float)+0x98>
    1f04:	ee87 8a27 	vdiv.f32	s16, s14, s15
    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
    1f08:	f06f 0063 	mvn.w	r0, #99	; 0x63
    1f0c:	f000 fadc 	bl	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    1f10:	edd4 7a05 	vldr	s15, [r4, #20]
    1f14:	e7d7      	b.n	1ec6 <TeensyTimerTool::GptChannel::trigger(float)+0x26>
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    1f16:	ecbd 8b02 	vpop	{d8}
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    1f1a:	4620      	mov	r0, r4
    1f1c:	462b      	mov	r3, r5
    }
    1f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    1f22:	4718      	bx	r3

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    1f24:	4798      	blx	r3
    1f26:	eeb0 8a40 	vmov.f32	s16, s0
    1f2a:	e7ed      	b.n	1f08 <TeensyTimerTool::GptChannel::trigger(float)+0x68>
    1f2c:	4f800000 	.word	0x4f800000
    1f30:	000011a1 	.word	0x000011a1
    1f34:	00001155 	.word	0x00001155
    1f38:	49742400 	.word	0x49742400

00001f3c <TeensyTimerTool::GptChannel::~GptChannel()>:
        regs->CR &= ~GPT_CR_EN; // disable timer
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    1f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f3e:	4604      	mov	r4, r0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1f40:	68c0      	ldr	r0, [r0, #12]
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    1f42:	b08b      	sub	sp, #44	; 0x2c
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
        regs->IR = 0;
    1f44:	2100      	movs	r1, #0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1f46:	6806      	ldr	r6, [r0, #0]
    1f48:	6863      	ldr	r3, [r4, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1f4a:	ad06      	add	r5, sp, #24
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    1f4c:	4f16      	ldr	r7, [pc, #88]	; (1fa8 <TeensyTimerTool::GptChannel::~GptChannel()+0x6c>)
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1f4e:	f026 0601 	bic.w	r6, r6, #1
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    1f52:	6027      	str	r7, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
    1f54:	68df      	ldr	r7, [r3, #12]
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1f56:	6006      	str	r6, [r0, #0]
    1f58:	9108      	str	r1, [sp, #32]
        regs->IR = 0;
    1f5a:	60c1      	str	r1, [r0, #12]
    1f5c:	9104      	str	r1, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1f5e:	e895 0003 	ldmia.w	r5, {r0, r1}
    1f62:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    1f66:	e893 0003 	ldmia.w	r3, {r0, r1}
    1f6a:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    1f6e:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    1f72:	689e      	ldr	r6, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    1f74:	e883 0003 	stmia.w	r3, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1f78:	9a08      	ldr	r2, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
    1f7a:	9608      	str	r6, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
    1f7c:	609a      	str	r2, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
    1f80:	9709      	str	r7, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
    1f82:	60da      	str	r2, [r3, #12]

    ~_Function_base()
    {
      if (_M_manager)
    1f84:	b11e      	cbz	r6, 1f8e <TeensyTimerTool::GptChannel::~GptChannel()+0x52>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1f86:	2203      	movs	r2, #3
    1f88:	4629      	mov	r1, r5
    1f8a:	4628      	mov	r0, r5
    1f8c:	47b0      	blx	r6

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1f8e:	9b04      	ldr	r3, [sp, #16]
    1f90:	b11b      	cbz	r3, 1f9a <TeensyTimerTool::GptChannel::~GptChannel()+0x5e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1f92:	a902      	add	r1, sp, #8
    1f94:	2203      	movs	r2, #3
    1f96:	4608      	mov	r0, r1
    1f98:	4798      	blx	r3

    GptChannel::~GptChannel()
    {
        stop();
        setCallback(nullptr);
    }
    1f9a:	4620      	mov	r0, r4
    1f9c:	2118      	movs	r1, #24
    1f9e:	f001 ff3f 	bl	3e20 <operator delete(void*, unsigned int)>
    1fa2:	4620      	mov	r0, r4
    1fa4:	b00b      	add	sp, #44	; 0x2c
    1fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fa8:	20000198 	.word	0x20000198

00001fac <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)>:
    }

    template <typename T>
    errorCode TckChannel<T>::begin(callback_t cb, float period, bool periodic)
    {
        this->triggered = false;
    1fac:	2300      	movs	r3, #0
        triggered = false;
        clock = F_CPU / 1'000'000.0f;
    }

    template <typename T>
    errorCode TckChannel<T>::begin(callback_t cb, float period, bool periodic)
    1fae:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fb0:	4604      	mov	r4, r0
    1fb2:	460e      	mov	r6, r1
    1fb4:	ed2d 8b02 	vpush	{d8}
    {
        this->triggered = false;

        this->periodic = periodic;
    1fb8:	7602      	strb	r2, [r0, #24]
        triggered = false;
        clock = F_CPU / 1'000'000.0f;
    }

    template <typename T>
    errorCode TckChannel<T>::begin(callback_t cb, float period, bool periodic)
    1fba:	b087      	sub	sp, #28
    {
        this->triggered = false;
    1fbc:	7643      	strb	r3, [r0, #25]

        this->periodic = periodic;
        if (periodic)
    1fbe:	b192      	cbz	r2, 1fe6 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x3a>
    1fc0:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    1fc4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 2054 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0xa8>
    1fc8:	ee87 8a27 	vdiv.f32	s16, s14, s15
    }

    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
    1fcc:	eeb4 0ac8 	vcmpe.f32	s0, s16
    1fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1fd4:	dc34      	bgt.n	2040 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x94>
        {
            microSecond = getMaxMicros();
            postError(errorCode::periodOverflow);
        }
        return (CounterType)(microSecond * clock);
    1fd6:	ee20 0a27 	vmul.f32	s0, s0, s15
    1fda:	eefc 7ac0 	vcvt.u32.f32	s15, s0
        this->triggered = false;

        this->periodic = periodic;
        if (periodic)
        {
            this->currentPeriod = microsecondToCycles(period);
    1fde:	edc4 7a08 	vstr	s15, [r4, #32]
            this->nextPeriod = this->currentPeriod;
    1fe2:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    1fe6:	2200      	movs	r2, #0
    1fe8:	68b3      	ldr	r3, [r6, #8]
    1fea:	9204      	str	r2, [sp, #16]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    1fec:	b323      	cbz	r3, 2038 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x8c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    1fee:	ad02      	add	r5, sp, #8
    1ff0:	4631      	mov	r1, r6
    1ff2:	2202      	movs	r2, #2
    1ff4:	4628      	mov	r0, r5
    1ff6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    1ff8:	68f7      	ldr	r7, [r6, #12]
	  _M_manager = __x._M_manager;
    1ffa:	68b6      	ldr	r6, [r6, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    1ffc:	f104 0308 	add.w	r3, r4, #8
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2000:	e895 0003 	ldmia.w	r5, {r0, r1}
    2004:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    2008:	e893 0003 	ldmia.w	r3, {r0, r1}
    200c:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    2010:	e89d 0003 	ldmia.w	sp, {r0, r1}
    2014:	e883 0003 	stmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2018:	6923      	ldr	r3, [r4, #16]
    201a:	6962      	ldr	r2, [r4, #20]
    201c:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
    201e:	6126      	str	r6, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2020:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
    2022:	6167      	str	r7, [r4, #20]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2024:	b11b      	cbz	r3, 202e <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x82>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2026:	2203      	movs	r2, #3
    2028:	4629      	mov	r1, r5
    202a:	4628      	mov	r0, r5
    202c:	4798      	blx	r3
        }
        this->callback = cb;

        return errorCode::OK;
    }
    202e:	2000      	movs	r0, #0
    2030:	b007      	add	sp, #28
    2032:	ecbd 8b02 	vpop	{d8}
    2036:	bdf0      	pop	{r4, r5, r6, r7, pc}
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    2038:	461e      	mov	r6, r3
    203a:	9f05      	ldr	r7, [sp, #20]
    203c:	ad02      	add	r5, sp, #8
    203e:	e7dd      	b.n	1ffc <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x50>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
        {
            microSecond = getMaxMicros();
            postError(errorCode::periodOverflow);
    2040:	f06f 0063 	mvn.w	r0, #99	; 0x63
    2044:	f000 fa40 	bl	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
        {
            microSecond = getMaxMicros();
    2048:	eeb0 0a48 	vmov.f32	s0, s16
    204c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    2050:	e7c1      	b.n	1fd6 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x2a>
    2052:	bf00      	nop
    2054:	4f700000 	.word	0x4f700000

00002058 <TeensyTimerTool::GptChannel::~GptChannel()>:
        regs->CR &= ~GPT_CR_EN; // disable timer
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    2058:	b5f0      	push	{r4, r5, r6, r7, lr}
    205a:	4605      	mov	r5, r0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    205c:	68c0      	ldr	r0, [r0, #12]
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    205e:	b08b      	sub	sp, #44	; 0x2c
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
        regs->IR = 0;
    2060:	2100      	movs	r1, #0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2062:	6806      	ldr	r6, [r0, #0]
    2064:	686b      	ldr	r3, [r5, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2066:	ac06      	add	r4, sp, #24
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    2068:	4f14      	ldr	r7, [pc, #80]	; (20bc <TeensyTimerTool::GptChannel::~GptChannel()+0x64>)
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    206a:	f026 0601 	bic.w	r6, r6, #1
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    206e:	602f      	str	r7, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
    2070:	68df      	ldr	r7, [r3, #12]
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2072:	6006      	str	r6, [r0, #0]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2074:	9108      	str	r1, [sp, #32]
        regs->IR = 0;
    2076:	60c1      	str	r1, [r0, #12]
    2078:	9104      	str	r1, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    207a:	e894 0003 	ldmia.w	r4, {r0, r1}
    207e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    2082:	e893 0003 	ldmia.w	r3, {r0, r1}
    2086:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    208a:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    208e:	689e      	ldr	r6, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    2090:	e883 0003 	stmia.w	r3, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2094:	9a08      	ldr	r2, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
    2096:	9608      	str	r6, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
    2098:	609a      	str	r2, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    209a:	9a09      	ldr	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
    209c:	9709      	str	r7, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
    209e:	60da      	str	r2, [r3, #12]

    ~_Function_base()
    {
      if (_M_manager)
    20a0:	b11e      	cbz	r6, 20aa <TeensyTimerTool::GptChannel::~GptChannel()+0x52>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    20a2:	2203      	movs	r2, #3
    20a4:	4621      	mov	r1, r4
    20a6:	4620      	mov	r0, r4
    20a8:	47b0      	blx	r6

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    20aa:	9b04      	ldr	r3, [sp, #16]
    20ac:	b11b      	cbz	r3, 20b6 <TeensyTimerTool::GptChannel::~GptChannel()+0x5e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    20ae:	a902      	add	r1, sp, #8
    20b0:	2203      	movs	r2, #3
    20b2:	4608      	mov	r0, r1
    20b4:	4798      	blx	r3

    GptChannel::~GptChannel()
    {
        stop();
        setCallback(nullptr);
    }
    20b6:	4628      	mov	r0, r5
    20b8:	b00b      	add	sp, #44	; 0x2c
    20ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20bc:	20000198 	.word	0x20000198

000020c0 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)>:
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    }

    errorCode GptChannel::begin(callback_t cb, float period, bool periodic)
    {
    20c0:	b570      	push	{r4, r5, r6, lr}
    20c2:	4604      	mov	r4, r0
    20c4:	b08c      	sub	sp, #48	; 0x30
    20c6:	460d      	mov	r5, r1
        this->periodic = periodic;
    20c8:	7202      	strb	r2, [r0, #8]
        if (periodic)
    20ca:	2a00      	cmp	r2, #0
    20cc:	d13f      	bne.n	214e <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x8e>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    20ce:	2600      	movs	r6, #0
    20d0:	68ab      	ldr	r3, [r5, #8]
    20d2:	9606      	str	r6, [sp, #24]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    20d4:	2b00      	cmp	r3, #0
    20d6:	d036      	beq.n	2146 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x86>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    20d8:	2202      	movs	r2, #2
    20da:	4629      	mov	r1, r5
    20dc:	a804      	add	r0, sp, #16
    20de:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    20e0:	68ea      	ldr	r2, [r5, #12]
	  _M_manager = __x._M_manager;
    20e2:	68ab      	ldr	r3, [r5, #8]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    20e4:	ad08      	add	r5, sp, #32
    20e6:	6864      	ldr	r4, [r4, #4]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    20e8:	960a      	str	r6, [sp, #40]	; 0x28
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
    20ea:	9207      	str	r2, [sp, #28]
	  _M_manager = __x._M_manager;
    20ec:	9306      	str	r3, [sp, #24]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    20ee:	b13b      	cbz	r3, 2100 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x40>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    20f0:	2202      	movs	r2, #2
    20f2:	a904      	add	r1, sp, #16
    20f4:	4628      	mov	r0, r5
    20f6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    20f8:	9a07      	ldr	r2, [sp, #28]
	  _M_manager = __x._M_manager;
    20fa:	9b06      	ldr	r3, [sp, #24]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
    20fc:	920b      	str	r2, [sp, #44]	; 0x2c
	  _M_manager = __x._M_manager;
    20fe:	930a      	str	r3, [sp, #40]	; 0x28
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2100:	ab02      	add	r3, sp, #8
      __a = _GLIBCXX_MOVE(__b);
    2102:	68e6      	ldr	r6, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2104:	e895 0003 	ldmia.w	r5, {r0, r1}
    2108:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    210c:	e894 0003 	ldmia.w	r4, {r0, r1}
    2110:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    2114:	e893 0003 	ldmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2118:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    211a:	e884 0003 	stmia.w	r4, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    211e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
    2120:	930a      	str	r3, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
    2122:	60a2      	str	r2, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2124:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
    2126:	960b      	str	r6, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
    2128:	60e2      	str	r2, [r4, #12]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    212a:	b11b      	cbz	r3, 2134 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x74>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    212c:	2203      	movs	r2, #3
    212e:	4629      	mov	r1, r5
    2130:	4628      	mov	r0, r5
    2132:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2134:	9b06      	ldr	r3, [sp, #24]
    2136:	b11b      	cbz	r3, 2140 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x80>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2138:	a904      	add	r1, sp, #16
    213a:	2203      	movs	r2, #3
    213c:	4608      	mov	r0, r1
    213e:	4798      	blx	r3
            regs->OCR1 = reload;
        }
        setCallback(cb);

        return errorCode::OK;
    }
    2140:	2000      	movs	r0, #0
    2142:	b00c      	add	sp, #48	; 0x30
    2144:	bd70      	pop	{r4, r5, r6, pc}
    2146:	6864      	ldr	r4, [r4, #4]
    2148:	ad08      	add	r5, sp, #32
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    214a:	930a      	str	r3, [sp, #40]	; 0x28
    214c:	e7d8      	b.n	2100 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x40>
    214e:	edd0 7a05 	vldr	s15, [r0, #20]
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    2152:	eddf 6a15 	vldr	s13, [pc, #84]	; 21a8 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xe8>
    2156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        return errorCode::OK;
    }

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
    215a:	eeb4 0ac7 	vcmpe.f32	s0, s14
    215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2162:	dc0a      	bgt.n	217a <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xba>
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
        }
        return (uint32_t)(clock * micros) - 1;
    2164:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        this->periodic = periodic;
        if (periodic)
        {
            reload = microsecondToCycles(period);
            regs->OCR1 = reload;
    2168:	68e2      	ldr	r2, [r4, #12]
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
        }
        return (uint32_t)(clock * micros) - 1;
    216a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    216e:	ee10 3a10 	vmov	r3, s0
    2172:	3b01      	subs	r3, #1
    errorCode GptChannel::begin(callback_t cb, float period, bool periodic)
    {
        this->periodic = periodic;
        if (periodic)
        {
            reload = microsecondToCycles(period);
    2174:	6123      	str	r3, [r4, #16]
            regs->OCR1 = reload;
    2176:	6113      	str	r3, [r2, #16]
    2178:	e7a9      	b.n	20ce <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xe>

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    217a:	6803      	ldr	r3, [r0, #0]
    217c:	4a0b      	ldr	r2, [pc, #44]	; (21ac <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xec>)
    217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2180:	4293      	cmp	r3, r2
    2182:	d10e      	bne.n	21a2 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xe2>

        inline errorCode trigger(float delay) override;
        inline errorCode triggerDirect(uint32_t delay) override;
        inline errorCode getTriggerReload(float delay, uint32_t* reload) override;

        inline float getMaxPeriod() const override { return getMaxMicros() / 1E6; }
    2184:	eddf 7a0a 	vldr	s15, [pc, #40]	; 21b0 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xf0>
    2188:	ee87 0a27 	vdiv.f32	s0, s14, s15
    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
    218c:	f06f 0063 	mvn.w	r0, #99	; 0x63
    2190:	ed8d 0a01 	vstr	s0, [sp, #4]
    2194:	f000 f998 	bl	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    2198:	edd4 7a05 	vldr	s15, [r4, #20]
    219c:	ed9d 0a01 	vldr	s0, [sp, #4]
    21a0:	e7e0      	b.n	2164 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xa4>

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    21a2:	4798      	blx	r3
    21a4:	e7f2      	b.n	218c <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xcc>
    21a6:	bf00      	nop
    21a8:	4f800000 	.word	0x4f800000
    21ac:	00001155 	.word	0x00001155
    21b0:	49742400 	.word	0x49742400

000021b4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E>:
        TimerGenerator* const TCK = TCK_t::getTimer<uint32_t>;
        TimerGenerator* const TCK32 = TCK_t::getTimer<uint32_t>; // same as TCK
        TimerGenerator* const TCK64 = TCK_t::getTimer<uint64_t>;

        constexpr tick_t tick = &TCK_t::tick;
    }
    21b4:	b570      	push	{r4, r5, r6, lr}

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    21b6:	4d79      	ldr	r5, [pc, #484]	; (239c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1e8>)
    21b8:	682b      	ldr	r3, [r5, #0]
    21ba:	f013 0301 	ands.w	r3, r3, #1
    21be:	d10b      	bne.n	21d8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x24>
    21c0:	4c77      	ldr	r4, [pc, #476]	; (23a0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1ec>)
    21c2:	2601      	movs	r6, #1
    21c4:	4618      	mov	r0, r3
    21c6:	4a77      	ldr	r2, [pc, #476]	; (23a4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    21c8:	4977      	ldr	r1, [pc, #476]	; (23a8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f4>)
    21ca:	60a3      	str	r3, [r4, #8]
    21cc:	61a3      	str	r3, [r4, #24]
    21ce:	62a3      	str	r3, [r4, #40]	; 0x28
    21d0:	63a3      	str	r3, [r4, #56]	; 0x38
    21d2:	602e      	str	r6, [r5, #0]
    21d4:	f002 f9e6 	bl	45a4 <__aeabi_atexit>
    };

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    21d8:	4b74      	ldr	r3, [pc, #464]	; (23ac <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f8>)
    21da:	681a      	ldr	r2, [r3, #0]
    21dc:	07d4      	lsls	r4, r2, #31
    21de:	d404      	bmi.n	21ea <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x36>
    21e0:	2001      	movs	r0, #1
    21e2:	4a73      	ldr	r2, [pc, #460]	; (23b0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1fc>)
    21e4:	4973      	ldr	r1, [pc, #460]	; (23b4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x200>)
    21e6:	6018      	str	r0, [r3, #0]
    21e8:	6011      	str	r1, [r2, #0]

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    21ea:	4d73      	ldr	r5, [pc, #460]	; (23b8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x204>)
    21ec:	682b      	ldr	r3, [r5, #0]
    21ee:	f013 0301 	ands.w	r3, r3, #1
    21f2:	d10b      	bne.n	220c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x58>
    21f4:	4c71      	ldr	r4, [pc, #452]	; (23bc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x208>)
    21f6:	2601      	movs	r6, #1
    21f8:	4618      	mov	r0, r3
    21fa:	4a6a      	ldr	r2, [pc, #424]	; (23a4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    21fc:	4970      	ldr	r1, [pc, #448]	; (23c0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x20c>)
    21fe:	60a3      	str	r3, [r4, #8]
    2200:	61a3      	str	r3, [r4, #24]
    2202:	62a3      	str	r3, [r4, #40]	; 0x28
    2204:	63a3      	str	r3, [r4, #56]	; 0x38
    2206:	602e      	str	r6, [r5, #0]
    2208:	f002 f9cc 	bl	45a4 <__aeabi_atexit>
    };

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    220c:	4b6d      	ldr	r3, [pc, #436]	; (23c4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x210>)
    220e:	681a      	ldr	r2, [r3, #0]
    2210:	07d0      	lsls	r0, r2, #31
    2212:	d404      	bmi.n	221e <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x6a>
    2214:	2001      	movs	r0, #1
    2216:	4a6c      	ldr	r2, [pc, #432]	; (23c8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x214>)
    2218:	496c      	ldr	r1, [pc, #432]	; (23cc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x218>)
    221a:	6018      	str	r0, [r3, #0]
    221c:	6011      	str	r1, [r2, #0]

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    221e:	4d6c      	ldr	r5, [pc, #432]	; (23d0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x21c>)
    2220:	682b      	ldr	r3, [r5, #0]
    2222:	f013 0301 	ands.w	r3, r3, #1
    2226:	d10b      	bne.n	2240 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x8c>
    2228:	4c6a      	ldr	r4, [pc, #424]	; (23d4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x220>)
    222a:	2601      	movs	r6, #1
    222c:	4618      	mov	r0, r3
    222e:	4a5d      	ldr	r2, [pc, #372]	; (23a4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    2230:	4969      	ldr	r1, [pc, #420]	; (23d8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x224>)
    2232:	60a3      	str	r3, [r4, #8]
    2234:	61a3      	str	r3, [r4, #24]
    2236:	62a3      	str	r3, [r4, #40]	; 0x28
    2238:	63a3      	str	r3, [r4, #56]	; 0x38
    223a:	602e      	str	r6, [r5, #0]
    223c:	f002 f9b2 	bl	45a4 <__aeabi_atexit>
    };

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    2240:	4b66      	ldr	r3, [pc, #408]	; (23dc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x228>)
    2242:	681a      	ldr	r2, [r3, #0]
    2244:	07d1      	lsls	r1, r2, #31
    2246:	d404      	bmi.n	2252 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x9e>
    2248:	2001      	movs	r0, #1
    224a:	4a65      	ldr	r2, [pc, #404]	; (23e0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x22c>)
    224c:	4965      	ldr	r1, [pc, #404]	; (23e4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x230>)
    224e:	6018      	str	r0, [r3, #0]
    2250:	6011      	str	r1, [r2, #0]

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    2252:	4d65      	ldr	r5, [pc, #404]	; (23e8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x234>)
    2254:	682b      	ldr	r3, [r5, #0]
    2256:	f013 0301 	ands.w	r3, r3, #1
    225a:	d10b      	bne.n	2274 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xc0>
    225c:	4c63      	ldr	r4, [pc, #396]	; (23ec <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x238>)
    225e:	2601      	movs	r6, #1
    2260:	4618      	mov	r0, r3
    2262:	4a50      	ldr	r2, [pc, #320]	; (23a4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    2264:	4962      	ldr	r1, [pc, #392]	; (23f0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x23c>)
    2266:	60a3      	str	r3, [r4, #8]
    2268:	61a3      	str	r3, [r4, #24]
    226a:	62a3      	str	r3, [r4, #40]	; 0x28
    226c:	63a3      	str	r3, [r4, #56]	; 0x38
    226e:	602e      	str	r6, [r5, #0]
    2270:	f002 f998 	bl	45a4 <__aeabi_atexit>
    };

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    2274:	4b5f      	ldr	r3, [pc, #380]	; (23f4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x240>)
    2276:	681a      	ldr	r2, [r3, #0]
    2278:	07d2      	lsls	r2, r2, #31
    227a:	d404      	bmi.n	2286 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xd2>
    227c:	2001      	movs	r0, #1
    227e:	4a5e      	ldr	r2, [pc, #376]	; (23f8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x244>)
    2280:	495e      	ldr	r1, [pc, #376]	; (23fc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x248>)
    2282:	6018      	str	r0, [r3, #0]
    2284:	6011      	str	r1, [r2, #0]

    template <unsigned m>
    bool GPT_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t GPT_t<m>::callback = nullptr;
    2286:	4c5e      	ldr	r4, [pc, #376]	; (2400 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x24c>)
    2288:	6823      	ldr	r3, [r4, #0]
    228a:	f013 0301 	ands.w	r3, r3, #1
    228e:	d071      	beq.n	2374 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1c0>
    2290:	4c5c      	ldr	r4, [pc, #368]	; (2404 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x250>)
    2292:	6823      	ldr	r3, [r4, #0]
    2294:	f013 0301 	ands.w	r3, r3, #1
    2298:	d076      	beq.n	2388 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1d4>
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    229a:	4b5b      	ldr	r3, [pc, #364]	; (2408 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x254>)
    229c:	681a      	ldr	r2, [r3, #0]
    229e:	07d6      	lsls	r6, r2, #31
    22a0:	d404      	bmi.n	22ac <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xf8>
    22a2:	2001      	movs	r0, #1
    22a4:	4a59      	ldr	r2, [pc, #356]	; (240c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x258>)
    22a6:	495a      	ldr	r1, [pc, #360]	; (2410 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x25c>)
    22a8:	6018      	str	r0, [r3, #0]
    22aa:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    22ac:	4b59      	ldr	r3, [pc, #356]	; (2414 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x260>)
    22ae:	681a      	ldr	r2, [r3, #0]
    22b0:	07d5      	lsls	r5, r2, #31
    22b2:	d404      	bmi.n	22be <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x10a>
    22b4:	2001      	movs	r0, #1
    22b6:	4a58      	ldr	r2, [pc, #352]	; (2418 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x264>)
    22b8:	4958      	ldr	r1, [pc, #352]	; (241c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x268>)
    22ba:	6018      	str	r0, [r3, #0]
    22bc:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];
    22be:	4b58      	ldr	r3, [pc, #352]	; (2420 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x26c>)
    22c0:	681a      	ldr	r2, [r3, #0]
    22c2:	07d4      	lsls	r4, r2, #31
    22c4:	d404      	bmi.n	22d0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x11c>
    22c6:	2001      	movs	r0, #1
    22c8:	4a56      	ldr	r2, [pc, #344]	; (2424 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x270>)
    22ca:	4957      	ldr	r1, [pc, #348]	; (2428 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x274>)
    22cc:	6018      	str	r0, [r3, #0]
    22ce:	6011      	str	r1, [r2, #0]

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    22d0:	4b56      	ldr	r3, [pc, #344]	; (242c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x278>)
    22d2:	681a      	ldr	r2, [r3, #0]
    22d4:	07d0      	lsls	r0, r2, #31
    22d6:	d404      	bmi.n	22e2 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x12e>
    22d8:	2001      	movs	r0, #1
    22da:	4a55      	ldr	r2, [pc, #340]	; (2430 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x27c>)
    22dc:	4955      	ldr	r1, [pc, #340]	; (2434 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x280>)
    22de:	6018      	str	r0, [r3, #0]
    22e0:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    22e2:	4b55      	ldr	r3, [pc, #340]	; (2438 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x284>)
    22e4:	681a      	ldr	r2, [r3, #0]
    22e6:	07d1      	lsls	r1, r2, #31
    22e8:	d404      	bmi.n	22f4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x140>
    22ea:	2001      	movs	r0, #1
    22ec:	4a53      	ldr	r2, [pc, #332]	; (243c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x288>)
    22ee:	4954      	ldr	r1, [pc, #336]	; (2440 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x28c>)
    22f0:	6018      	str	r0, [r3, #0]
    22f2:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];
    22f4:	4b53      	ldr	r3, [pc, #332]	; (2444 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x290>)
    22f6:	681a      	ldr	r2, [r3, #0]
    22f8:	07d2      	lsls	r2, r2, #31
    22fa:	d404      	bmi.n	2306 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x152>
    22fc:	2001      	movs	r0, #1
    22fe:	4a52      	ldr	r2, [pc, #328]	; (2448 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x294>)
    2300:	4952      	ldr	r1, [pc, #328]	; (244c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x298>)
    2302:	6018      	str	r0, [r3, #0]
    2304:	6011      	str	r1, [r2, #0]

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    2306:	4b52      	ldr	r3, [pc, #328]	; (2450 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x29c>)
    2308:	681a      	ldr	r2, [r3, #0]
    230a:	07d6      	lsls	r6, r2, #31
    230c:	d404      	bmi.n	2318 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x164>
    230e:	2001      	movs	r0, #1
    2310:	4a50      	ldr	r2, [pc, #320]	; (2454 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2a0>)
    2312:	4951      	ldr	r1, [pc, #324]	; (2458 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2a4>)
    2314:	6018      	str	r0, [r3, #0]
    2316:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    2318:	4b50      	ldr	r3, [pc, #320]	; (245c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2a8>)
    231a:	681a      	ldr	r2, [r3, #0]
    231c:	07d5      	lsls	r5, r2, #31
    231e:	d404      	bmi.n	232a <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x176>
    2320:	2001      	movs	r0, #1
    2322:	4a4f      	ldr	r2, [pc, #316]	; (2460 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2ac>)
    2324:	494f      	ldr	r1, [pc, #316]	; (2464 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2b0>)
    2326:	6018      	str	r0, [r3, #0]
    2328:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];
    232a:	4b4f      	ldr	r3, [pc, #316]	; (2468 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2b4>)
    232c:	681a      	ldr	r2, [r3, #0]
    232e:	07d4      	lsls	r4, r2, #31
    2330:	d404      	bmi.n	233c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x188>
    2332:	2001      	movs	r0, #1
    2334:	4a4d      	ldr	r2, [pc, #308]	; (246c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2b8>)
    2336:	494e      	ldr	r1, [pc, #312]	; (2470 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2bc>)
    2338:	6018      	str	r0, [r3, #0]
    233a:	6011      	str	r1, [r2, #0]

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    233c:	4b4d      	ldr	r3, [pc, #308]	; (2474 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2c0>)
    233e:	681a      	ldr	r2, [r3, #0]
    2340:	07d0      	lsls	r0, r2, #31
    2342:	d404      	bmi.n	234e <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x19a>
    2344:	2001      	movs	r0, #1
    2346:	4a4c      	ldr	r2, [pc, #304]	; (2478 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2c4>)
    2348:	494c      	ldr	r1, [pc, #304]	; (247c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2c8>)
    234a:	6018      	str	r0, [r3, #0]
    234c:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    234e:	4b4c      	ldr	r3, [pc, #304]	; (2480 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2cc>)
    2350:	681a      	ldr	r2, [r3, #0]
    2352:	07d1      	lsls	r1, r2, #31
    2354:	d404      	bmi.n	2360 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1ac>
    2356:	2001      	movs	r0, #1
    2358:	4a4a      	ldr	r2, [pc, #296]	; (2484 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2d0>)
    235a:	494b      	ldr	r1, [pc, #300]	; (2488 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2d4>)
    235c:	6018      	str	r0, [r3, #0]
    235e:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];
    2360:	4b4a      	ldr	r3, [pc, #296]	; (248c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2d8>)
    2362:	681a      	ldr	r2, [r3, #0]
    2364:	07d2      	lsls	r2, r2, #31
    2366:	d404      	bmi.n	2372 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1be>
    2368:	2001      	movs	r0, #1
    236a:	4a49      	ldr	r2, [pc, #292]	; (2490 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2dc>)
    236c:	4949      	ldr	r1, [pc, #292]	; (2494 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2e0>)
    236e:	6018      	str	r0, [r3, #0]
    2370:	6011      	str	r1, [r2, #0]
    2372:	bd70      	pop	{r4, r5, r6, pc}
    2374:	4d48      	ldr	r5, [pc, #288]	; (2498 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2e4>)
    2376:	2601      	movs	r6, #1
    2378:	4a0a      	ldr	r2, [pc, #40]	; (23a4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    237a:	4628      	mov	r0, r5
    237c:	4947      	ldr	r1, [pc, #284]	; (249c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2e8>)
    237e:	60ab      	str	r3, [r5, #8]
    2380:	6026      	str	r6, [r4, #0]
    2382:	f002 f90f 	bl	45a4 <__aeabi_atexit>
    2386:	e783      	b.n	2290 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xdc>
    2388:	4d45      	ldr	r5, [pc, #276]	; (24a0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2ec>)
    238a:	2601      	movs	r6, #1
    238c:	4a05      	ldr	r2, [pc, #20]	; (23a4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    238e:	4628      	mov	r0, r5
    2390:	4942      	ldr	r1, [pc, #264]	; (249c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2e8>)
    2392:	60ab      	str	r3, [r5, #8]
    2394:	6026      	str	r6, [r4, #0]
    2396:	f002 f905 	bl	45a4 <__aeabi_atexit>
    239a:	e77e      	b.n	229a <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xe6>
    239c:	2000180c 	.word	0x2000180c
    23a0:	20001930 	.word	0x20001930
    23a4:	20000674 	.word	0x20000674
    23a8:	000014e1 	.word	0x000014e1
    23ac:	20001808 	.word	0x20001808
    23b0:	2000192c 	.word	0x2000192c
    23b4:	401dc000 	.word	0x401dc000
    23b8:	20001804 	.word	0x20001804
    23bc:	200018ec 	.word	0x200018ec
    23c0:	00001501 	.word	0x00001501
    23c4:	20001800 	.word	0x20001800
    23c8:	200018e8 	.word	0x200018e8
    23cc:	401e0000 	.word	0x401e0000
    23d0:	200017fc 	.word	0x200017fc
    23d4:	200018a8 	.word	0x200018a8
    23d8:	00001521 	.word	0x00001521
    23dc:	200017f8 	.word	0x200017f8
    23e0:	200018a4 	.word	0x200018a4
    23e4:	401e4000 	.word	0x401e4000
    23e8:	200017f4 	.word	0x200017f4
    23ec:	20001864 	.word	0x20001864
    23f0:	00001541 	.word	0x00001541
    23f4:	200017f0 	.word	0x200017f0
    23f8:	20001860 	.word	0x20001860
    23fc:	401e8000 	.word	0x401e8000
    2400:	200017ec 	.word	0x200017ec
    2404:	200017e8 	.word	0x200017e8
    2408:	200017e4 	.word	0x200017e4
    240c:	2000183c 	.word	0x2000183c
    2410:	401dc020 	.word	0x401dc020
    2414:	200017e0 	.word	0x200017e0
    2418:	20001838 	.word	0x20001838
    241c:	401dc040 	.word	0x401dc040
    2420:	200017dc 	.word	0x200017dc
    2424:	20001834 	.word	0x20001834
    2428:	401dc060 	.word	0x401dc060
    242c:	200017d8 	.word	0x200017d8
    2430:	20001830 	.word	0x20001830
    2434:	401e0020 	.word	0x401e0020
    2438:	200017d4 	.word	0x200017d4
    243c:	2000182c 	.word	0x2000182c
    2440:	401e0040 	.word	0x401e0040
    2444:	200017d0 	.word	0x200017d0
    2448:	20001828 	.word	0x20001828
    244c:	401e0060 	.word	0x401e0060
    2450:	200017cc 	.word	0x200017cc
    2454:	20001824 	.word	0x20001824
    2458:	401e4020 	.word	0x401e4020
    245c:	200017c8 	.word	0x200017c8
    2460:	20001820 	.word	0x20001820
    2464:	401e4040 	.word	0x401e4040
    2468:	200017c4 	.word	0x200017c4
    246c:	2000181c 	.word	0x2000181c
    2470:	401e4060 	.word	0x401e4060
    2474:	200017c0 	.word	0x200017c0
    2478:	20001818 	.word	0x20001818
    247c:	401e8020 	.word	0x401e8020
    2480:	200017bc 	.word	0x200017bc
    2484:	20001814 	.word	0x20001814
    2488:	401e8040 	.word	0x401e8040
    248c:	200017b8 	.word	0x200017b8
    2490:	20001810 	.word	0x20001810
    2494:	401e8060 	.word	0x401e8060
    2498:	20001850 	.word	0x20001850
    249c:	00000f9d 	.word	0x00000f9d
    24a0:	20001840 	.word	0x20001840

000024a4 <TeensyTimerTool::Timer::Timer(TeensyTimerTool::ITimerChannel* (*)())>:
#include "timer.h"
#include "config.h"

namespace TeensyTimerTool
{
    Timer::Timer(TimerGenerator* generator)
    24a4:	b510      	push	{r4, lr}
    24a6:	4604      	mov	r4, r0
    :BaseTimer(generator, true)
    24a8:	2201      	movs	r2, #1
    24aa:	f7fe fd4f 	bl	f4c <TeensyTimerTool::BaseTimer::BaseTimer(TeensyTimerTool::ITimerChannel* (*)(), bool)>
    {
    }
    24ae:	4620      	mov	r0, r4
    24b0:	bd10      	pop	{r4, pc}
    24b2:	bf00      	nop

000024b4 <std::function<void (TeensyTimerTool::errorCode)>::~function()>:

    ~_Function_base()
    {
      if (_M_manager)
    24b4:	6883      	ldr	r3, [r0, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    24b6:	b510      	push	{r4, lr}
    24b8:	4604      	mov	r4, r0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    24ba:	b113      	cbz	r3, 24c2 <std::function<void (TeensyTimerTool::errorCode)>::~function()+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    24bc:	2203      	movs	r2, #3
    24be:	4601      	mov	r1, r0
    24c0:	4798      	blx	r3
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    24c2:	4620      	mov	r0, r4
    24c4:	bd10      	pop	{r4, pc}
    24c6:	bf00      	nop

000024c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>:
    }

    errorFunc_t errFunc;

    errorCode postError(errorCode e)
    {
    24c8:	4b07      	ldr	r3, [pc, #28]	; (24e8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)+0x20>)
        if (errFunc != nullptr && e != errorCode::OK) errFunc(e);
    24ca:	689a      	ldr	r2, [r3, #8]
    }

    errorFunc_t errFunc;

    errorCode postError(errorCode e)
    {
    24cc:	b510      	push	{r4, lr}
    24ce:	4604      	mov	r4, r0
    24d0:	b082      	sub	sp, #8
        if (errFunc != nullptr && e != errorCode::OK) errFunc(e);
    24d2:	b132      	cbz	r2, 24e2 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)+0x1a>
    24d4:	b128      	cbz	r0, 24e2 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)+0x1a>
    24d6:	a902      	add	r1, sp, #8
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    24d8:	68da      	ldr	r2, [r3, #12]
    24da:	4618      	mov	r0, r3
    24dc:	f841 4d04 	str.w	r4, [r1, #-4]!
    24e0:	4790      	blx	r2
        return e;
    }
    24e2:	4620      	mov	r0, r4
    24e4:	b002      	add	sp, #8
    24e6:	bd10      	pop	{r4, pc}
    24e8:	20001970 	.word	0x20001970

000024ec <_GLOBAL__sub_I__ZN15TeensyTimerTool12ErrorHandlerC2ER6Stream>:
    void attachErrFunc(errorFunc_t _errFunc)
    {
        errFunc = _errFunc;
    }

    24ec:	b410      	push	{r4}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    24ee:	4b05      	ldr	r3, [pc, #20]	; (2504 <_GLOBAL__sub_I__ZN15TeensyTimerTool12ErrorHandlerC2ER6Stream+0x18>)
    24f0:	2400      	movs	r4, #0
            digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
            delay(50);
        }
    }

    errorFunc_t errFunc;
    24f2:	4a05      	ldr	r2, [pc, #20]	; (2508 <_GLOBAL__sub_I__ZN15TeensyTimerTool12ErrorHandlerC2ER6Stream+0x1c>)
    24f4:	609c      	str	r4, [r3, #8]
    24f6:	4618      	mov	r0, r3
    24f8:	4904      	ldr	r1, [pc, #16]	; (250c <_GLOBAL__sub_I__ZN15TeensyTimerTool12ErrorHandlerC2ER6Stream+0x20>)
    void attachErrFunc(errorFunc_t _errFunc)
    {
        errFunc = _errFunc;
    }

    24fa:	f85d 4b04 	ldr.w	r4, [sp], #4
            digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
            delay(50);
        }
    }

    errorFunc_t errFunc;
    24fe:	f002 b851 	b.w	45a4 <__aeabi_atexit>
    2502:	bf00      	nop
    2504:	20001970 	.word	0x20001970
    2508:	20000674 	.word	0x20000674
    250c:	000024b5 	.word	0x000024b5

00002510 <TeensyTimerTool::PITChannel::start()>:
        return errorCode::OK;
    }

    errorCode PITChannel::start()
    {
       IMXRT_PIT_CHANNELS[chNr].TCTRL = PIT_TCTRL_TEN | PIT_TCTRL_TIE;
    2510:	68c1      	ldr	r1, [r0, #12]
    2512:	2203      	movs	r2, #3
    2514:	4b02      	ldr	r3, [pc, #8]	; (2520 <TeensyTimerTool::PITChannel::start()+0x10>)
       return errorCode::OK;
    }
    2516:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode PITChannel::start()
    {
       IMXRT_PIT_CHANNELS[chNr].TCTRL = PIT_TCTRL_TEN | PIT_TCTRL_TIE;
    2518:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    251c:	609a      	str	r2, [r3, #8]
       return errorCode::OK;
    }
    251e:	4770      	bx	lr
    2520:	40084100 	.word	0x40084100

00002524 <TeensyTimerTool::PITChannel::stop()>:

    errorCode PITChannel::stop()
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    2524:	68c1      	ldr	r1, [r0, #12]
    2526:	2200      	movs	r2, #0
    2528:	4b02      	ldr	r3, [pc, #8]	; (2534 <TeensyTimerTool::PITChannel::stop()+0x10>)
        return errorCode::OK;
    }
    252a:	4610      	mov	r0, r2
       return errorCode::OK;
    }

    errorCode PITChannel::stop()
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    252c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    2530:	609a      	str	r2, [r3, #8]
        return errorCode::OK;
    }
    2532:	4770      	bx	lr
    2534:	40084100 	.word	0x40084100

00002538 <TeensyTimerTool::PITChannel::~PITChannel()>:
            callback();
            if (!isPeriodic) IMXRT_PIT_CHANNELS[chNr].TCTRL = 0; // switch off timer
        }
    }

    PITChannel::~PITChannel()
    2538:	4a06      	ldr	r2, [pc, #24]	; (2554 <TeensyTimerTool::PITChannel::~PITChannel()+0x1c>)
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    253a:	6983      	ldr	r3, [r0, #24]
    253c:	b510      	push	{r4, lr}
    253e:	4604      	mov	r4, r0
    2540:	6002      	str	r2, [r0, #0]
    2542:	b123      	cbz	r3, 254e <TeensyTimerTool::PITChannel::~PITChannel()+0x16>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    2544:	f100 0110 	add.w	r1, r0, #16
    2548:	2203      	movs	r2, #3
    254a:	4608      	mov	r0, r1
    254c:	4798      	blx	r3
    {
        callback = nullptr;
    }
    254e:	4620      	mov	r0, r4
    2550:	bd10      	pop	{r4, pc}
    2552:	bf00      	nop
    2554:	20000248 	.word	0x20000248

00002558 <TeensyTimerTool::PITChannel::getMaxPeriod() const>:
        return errorCode::OK;
    }

    float PITChannel::getMaxPeriod() const
    {
        return (float)0xFFFF'FFFE / clockFactor / 1'000'000;
    2558:	4b06      	ldr	r3, [pc, #24]	; (2574 <TeensyTimerTool::PITChannel::getMaxPeriod() const+0x1c>)
    255a:	eddf 6a07 	vldr	s13, [pc, #28]	; 2578 <TeensyTimerTool::PITChannel::getMaxPeriod() const+0x20>
    255e:	edd3 7a00 	vldr	s15, [r3]
    2562:	ed9f 7a06 	vldr	s14, [pc, #24]	; 257c <TeensyTimerTool::PITChannel::getMaxPeriod() const+0x24>
    2566:	eef8 7a67 	vcvt.f32.u32	s15, s15
    256a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    }
    256e:	ee80 0a07 	vdiv.f32	s0, s0, s14
    2572:	4770      	bx	lr
    2574:	20000688 	.word	0x20000688
    2578:	4f800000 	.word	0x4f800000
    257c:	49742400 	.word	0x49742400

00002580 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)>:
    // {
    //     return begin(cb, (float)micros, periodic);
    // }

    errorCode PITChannel::begin(callback_t cb, float micros, bool periodic)
    {
    2580:	b5f0      	push	{r4, r5, r6, r7, lr}
    2582:	688b      	ldr	r3, [r1, #8]
    2584:	4604      	mov	r4, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2586:	2000      	movs	r0, #0
    2588:	ed2d 8b02 	vpush	{d8}
    258c:	b087      	sub	sp, #28
    258e:	eeb0 8a40 	vmov.f32	s16, s0
        isPeriodic = periodic;
    2592:	7222      	strb	r2, [r4, #8]
    2594:	9004      	str	r0, [sp, #16]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    2596:	2b00      	cmp	r3, #0
    2598:	d043      	beq.n	2622 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xa2>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    259a:	ad02      	add	r5, sp, #8
    259c:	460e      	mov	r6, r1
    259e:	2202      	movs	r2, #2
    25a0:	4628      	mov	r0, r5
    25a2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    25a4:	68f7      	ldr	r7, [r6, #12]
	  _M_manager = __x._M_manager;
    25a6:	68b6      	ldr	r6, [r6, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    25a8:	f104 0310 	add.w	r3, r4, #16
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    25ac:	e895 0003 	ldmia.w	r5, {r0, r1}
    25b0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    25b4:	e893 0003 	ldmia.w	r3, {r0, r1}
    25b8:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    25bc:	e89d 0003 	ldmia.w	sp, {r0, r1}
    25c0:	e883 0003 	stmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    25c4:	69a3      	ldr	r3, [r4, #24]
    25c6:	69e2      	ldr	r2, [r4, #28]
    25c8:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
    25ca:	61a6      	str	r6, [r4, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    25cc:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
    25ce:	61e7      	str	r7, [r4, #28]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    25d0:	b11b      	cbz	r3, 25da <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0x5a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    25d2:	2203      	movs	r2, #3
    25d4:	4629      	mov	r1, r5
    25d6:	4628      	mov	r0, r5
    25d8:	4798      	blx	r3
        callback = cb;

        if (isPeriodic)
    25da:	7a23      	ldrb	r3, [r4, #8]
    25dc:	b1e3      	cbz	r3, 2618 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0x98>
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
    25de:	4b1a      	ldr	r3, [pc, #104]	; (2648 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xc8>)
        isPeriodic = periodic;
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    25e0:	2000      	movs	r0, #0
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
    25e2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 264c <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xcc>
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;
    25e6:	2101      	movs	r1, #1

            float tmp = micros * clockFactor;
    25e8:	ed93 0a00 	vldr	s0, [r3]
        isPeriodic = periodic;
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    25ec:	68e2      	ldr	r2, [r4, #12]
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
    25ee:	eeb8 0a40 	vcvt.f32.u32	s0, s0
        isPeriodic = periodic;
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    25f2:	4b17      	ldr	r3, [pc, #92]	; (2650 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xd0>)
    25f4:	0112      	lsls	r2, r2, #4
    25f6:	4d16      	ldr	r5, [pc, #88]	; (2650 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xd0>)
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
    25f8:	ee20 0a08 	vmul.f32	s0, s0, s16
        isPeriodic = periodic;
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    25fc:	4413      	add	r3, r2
    25fe:	6098      	str	r0, [r3, #8]
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
    2600:	eeb4 0ae7 	vcmpe.f32	s0, s15
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;
    2604:	60d9      	str	r1, [r3, #12]

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
    2606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    260a:	dc0e      	bgt.n	262a <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xaa>
            {
                postError(errorCode::periodOverflow);
                IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
            } else
            {
                IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;
    260c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    2610:	ee17 3a90 	vmov	r3, s15
    2614:	3b01      	subs	r3, #1
    2616:	5153      	str	r3, [r2, r5]
            }
        }
        return errorCode::OK;
    }
    2618:	2000      	movs	r0, #0
    261a:	b007      	add	sp, #28
    261c:	ecbd 8b02 	vpop	{d8}
    2620:	bdf0      	pop	{r4, r5, r6, r7, pc}
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    2622:	461e      	mov	r6, r3
    2624:	9f05      	ldr	r7, [sp, #20]
    2626:	ad02      	add	r5, sp, #8
    2628:	e7be      	b.n	25a8 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0x28>
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
            {
                postError(errorCode::periodOverflow);
    262a:	f06f 0063 	mvn.w	r0, #99	; 0x63
    262e:	f7ff ff4b 	bl	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
                IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
    2632:	68e3      	ldr	r3, [r4, #12]
    2634:	f06f 0201 	mvn.w	r2, #1
            {
                IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;
            }
        }
        return errorCode::OK;
    }
    2638:	2000      	movs	r0, #0

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
            {
                postError(errorCode::periodOverflow);
                IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
    263a:	011b      	lsls	r3, r3, #4
    263c:	515a      	str	r2, [r3, r5]
            {
                IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;
            }
        }
        return errorCode::OK;
    }
    263e:	b007      	add	sp, #28
    2640:	ecbd 8b02 	vpop	{d8}
    2644:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2646:	bf00      	nop
    2648:	20000688 	.word	0x20000688
    264c:	4f800000 	.word	0x4f800000
    2650:	40084100 	.word	0x40084100

00002654 <TeensyTimerTool::PITChannel::trigger(float)>:
    // {
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
    2654:	b538      	push	{r3, r4, r5, lr}
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
    2656:	4b1d      	ldr	r3, [pc, #116]	; (26cc <TeensyTimerTool::PITChannel::trigger(float)+0x78>)
    // {
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
    2658:	4604      	mov	r4, r0
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
        if (tmp > 0xFFFF'FFFF)
    265a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 26d0 <TeensyTimerTool::PITChannel::trigger(float)+0x7c>
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    265e:	2000      	movs	r0, #0
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
    2660:	edd3 7a00 	vldr	s15, [r3]
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;
    2664:	2301      	movs	r3, #1
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    2666:	68e1      	ldr	r1, [r4, #12]
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
    2668:	eef8 7a67 	vcvt.f32.u32	s15, s15
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    266c:	4a19      	ldr	r2, [pc, #100]	; (26d4 <TeensyTimerTool::PITChannel::trigger(float)+0x80>)
    266e:	0109      	lsls	r1, r1, #4
    2670:	4615      	mov	r5, r2
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
    2672:	ee27 0a80 	vmul.f32	s0, s15, s0
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    2676:	440a      	add	r2, r1
    2678:	6090      	str	r0, [r2, #8]
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
        if (tmp > 0xFFFF'FFFF)
    267a:	eeb4 0ac7 	vcmpe.f32	s0, s14
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;
    267e:	60d3      	str	r3, [r2, #12]

        float tmp = delay * clockFactor;
        if (tmp > 0xFFFF'FFFF)
    2680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2684:	dc0e      	bgt.n	26a4 <TeensyTimerTool::PITChannel::trigger(float)+0x50>
        {
            postError(errorCode::periodOverflow);
            IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
        } else
            IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;
    2686:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    268a:	ee10 3a10 	vmov	r3, s0
    268e:	3b01      	subs	r3, #1
    2690:	514b      	str	r3, [r1, r5]

        start();
    2692:	6823      	ldr	r3, [r4, #0]
    2694:	4910      	ldr	r1, [pc, #64]	; (26d8 <TeensyTimerTool::PITChannel::trigger(float)+0x84>)
    2696:	699b      	ldr	r3, [r3, #24]
    2698:	428b      	cmp	r3, r1
    269a:	d113      	bne.n	26c4 <TeensyTimerTool::PITChannel::trigger(float)+0x70>
        return errorCode::OK;
    }

    errorCode PITChannel::start()
    {
       IMXRT_PIT_CHANNELS[chNr].TCTRL = PIT_TCTRL_TEN | PIT_TCTRL_TIE;
    269c:	2303      	movs	r3, #3
            IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;

        start();

        return errorCode::OK;
    }
    269e:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode PITChannel::start()
    {
       IMXRT_PIT_CHANNELS[chNr].TCTRL = PIT_TCTRL_TEN | PIT_TCTRL_TIE;
    26a0:	6093      	str	r3, [r2, #8]
            IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;

        start();

        return errorCode::OK;
    }
    26a2:	bd38      	pop	{r3, r4, r5, pc}
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
        if (tmp > 0xFFFF'FFFF)
        {
            postError(errorCode::periodOverflow);
    26a4:	f06f 0063 	mvn.w	r0, #99	; 0x63
    26a8:	f7ff ff0e 	bl	24c8 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
            IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
    26ac:	68e3      	ldr	r3, [r4, #12]
    26ae:	f06f 0101 	mvn.w	r1, #1
    26b2:	462a      	mov	r2, r5
    26b4:	011b      	lsls	r3, r3, #4
    26b6:	5159      	str	r1, [r3, r5]
    26b8:	441a      	add	r2, r3
        } else
            IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;

        start();
    26ba:	6823      	ldr	r3, [r4, #0]
    26bc:	4906      	ldr	r1, [pc, #24]	; (26d8 <TeensyTimerTool::PITChannel::trigger(float)+0x84>)
    26be:	699b      	ldr	r3, [r3, #24]
    26c0:	428b      	cmp	r3, r1
    26c2:	d0eb      	beq.n	269c <TeensyTimerTool::PITChannel::trigger(float)+0x48>
    26c4:	4620      	mov	r0, r4
    26c6:	4798      	blx	r3

        return errorCode::OK;
    }
    26c8:	2000      	movs	r0, #0
    26ca:	bd38      	pop	{r3, r4, r5, pc}
    26cc:	20000688 	.word	0x20000688
    26d0:	4f800000 	.word	0x4f800000
    26d4:	40084100 	.word	0x40084100
    26d8:	00002511 	.word	0x00002511

000026dc <__tcf_0>:
#include "PIT.h"

namespace TeensyTimerTool
{
    bool PIT_t::isInitialized = false;
    PITChannel PIT_t::channel[4] = {{0}, {1}, {2}, {3}};
    26dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    26e0:	4c0f      	ldr	r4, [pc, #60]	; (2720 <__tcf_0+0x44>)
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
	    _M_manager = nullptr;
    26e2:	2500      	movs	r5, #0
    26e4:	4f0f      	ldr	r7, [pc, #60]	; (2724 <__tcf_0+0x48>)
    26e6:	f1a4 0680 	sub.w	r6, r4, #128	; 0x80
            callback();
            if (!isPeriodic) IMXRT_PIT_CHANNELS[chNr].TCTRL = 0; // switch off timer
        }
    }

    PITChannel::~PITChannel()
    26ea:	f8df 803c 	ldr.w	r8, [pc, #60]	; 2728 <__tcf_0+0x4c>
    26ee:	f854 3c10 	ldr.w	r3, [r4, #-16]
    26f2:	f1a4 0e10 	sub.w	lr, r4, #16
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    26f6:	2203      	movs	r2, #3
    26f8:	4621      	mov	r1, r4
    26fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    26fc:	4620      	mov	r0, r4
    26fe:	42bb      	cmp	r3, r7
    2700:	d10b      	bne.n	271a <__tcf_0+0x3e>
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    2702:	68a3      	ldr	r3, [r4, #8]
    2704:	f844 8c10 	str.w	r8, [r4, #-16]
    2708:	b113      	cbz	r3, 2710 <__tcf_0+0x34>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    270a:	4798      	blx	r3
	    _M_manager = nullptr;
    270c:	60a5      	str	r5, [r4, #8]
	    _M_invoker = nullptr;
    270e:	60e5      	str	r5, [r4, #12]
    2710:	3c20      	subs	r4, #32
    2712:	42b4      	cmp	r4, r6
    2714:	d1eb      	bne.n	26ee <__tcf_0+0x12>
    2716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    271a:	4670      	mov	r0, lr
    271c:	4798      	blx	r3
    271e:	e7f7      	b.n	2710 <__tcf_0+0x34>
    2720:	200019f0 	.word	0x200019f0
    2724:	00002539 	.word	0x00002539
    2728:	20000248 	.word	0x20000248

0000272c <TeensyTimerTool::PITChannel::~PITChannel()>:
    272c:	4a08      	ldr	r2, [pc, #32]	; (2750 <TeensyTimerTool::PITChannel::~PITChannel()+0x24>)
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    272e:	6983      	ldr	r3, [r0, #24]
    2730:	b510      	push	{r4, lr}
    2732:	4604      	mov	r4, r0
    2734:	6002      	str	r2, [r0, #0]
    2736:	b123      	cbz	r3, 2742 <TeensyTimerTool::PITChannel::~PITChannel()+0x16>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    2738:	f100 0110 	add.w	r1, r0, #16
    273c:	2203      	movs	r2, #3
    273e:	4608      	mov	r0, r1
    2740:	4798      	blx	r3
    {
        callback = nullptr;
    }
    2742:	4620      	mov	r0, r4
    2744:	2120      	movs	r1, #32
    2746:	f001 fb6b 	bl	3e20 <operator delete(void*, unsigned int)>
    274a:	4620      	mov	r0, r4
    274c:	bd10      	pop	{r4, pc}
    274e:	bf00      	nop
    2750:	20000248 	.word	0x20000248

00002754 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE>:

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    2754:	481f      	ldr	r0, [pc, #124]	; (27d4 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x80>)
    2756:	2100      	movs	r1, #0
    2758:	4b1f      	ldr	r3, [pc, #124]	; (27d8 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x84>)
    275a:	69c0      	ldr	r0, [r0, #28]
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    275c:	4a1f      	ldr	r2, [pc, #124]	; (27dc <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x88>)

     uint32_t PITChannel::clockFactor = 1;
}
    275e:	b410      	push	{r4}
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    2760:	0644      	lsls	r4, r0, #25
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    2762:	601a      	str	r2, [r3, #0]
    2764:	6059      	str	r1, [r3, #4]
    2766:	60d9      	str	r1, [r3, #12]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2768:	6199      	str	r1, [r3, #24]
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    276a:	d401      	bmi.n	2770 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x1c>
    276c:	491c      	ldr	r1, [pc, #112]	; (27e0 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x8c>)
    276e:	6809      	ldr	r1, [r1, #0]
    2770:	4818      	ldr	r0, [pc, #96]	; (27d4 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x80>)
    2772:	2100      	movs	r1, #0
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    2774:	2401      	movs	r4, #1
    2776:	621a      	str	r2, [r3, #32]
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    2778:	69c0      	ldr	r0, [r0, #28]
    277a:	6259      	str	r1, [r3, #36]	; 0x24
    277c:	0640      	lsls	r0, r0, #25
    277e:	6399      	str	r1, [r3, #56]	; 0x38
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    2780:	62dc      	str	r4, [r3, #44]	; 0x2c
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    2782:	d401      	bmi.n	2788 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x34>
    2784:	4916      	ldr	r1, [pc, #88]	; (27e0 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x8c>)
    2786:	6809      	ldr	r1, [r1, #0]
    2788:	4812      	ldr	r0, [pc, #72]	; (27d4 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x80>)
    278a:	2100      	movs	r1, #0
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    278c:	2402      	movs	r4, #2
    278e:	641a      	str	r2, [r3, #64]	; 0x40
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    2790:	69c0      	ldr	r0, [r0, #28]
    2792:	6459      	str	r1, [r3, #68]	; 0x44
    2794:	6599      	str	r1, [r3, #88]	; 0x58
    2796:	0641      	lsls	r1, r0, #25
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    2798:	64dc      	str	r4, [r3, #76]	; 0x4c
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    279a:	d401      	bmi.n	27a0 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x4c>
    279c:	4910      	ldr	r1, [pc, #64]	; (27e0 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x8c>)
    279e:	6809      	ldr	r1, [r1, #0]
    27a0:	4c0c      	ldr	r4, [pc, #48]	; (27d4 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x80>)
    27a2:	2100      	movs	r1, #0
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    27a4:	661a      	str	r2, [r3, #96]	; 0x60
    27a6:	2003      	movs	r0, #3
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    27a8:	69e2      	ldr	r2, [r4, #28]
    27aa:	6659      	str	r1, [r3, #100]	; 0x64
    27ac:	6799      	str	r1, [r3, #120]	; 0x78
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    27ae:	66d8      	str	r0, [r3, #108]	; 0x6c
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    27b0:	0653      	lsls	r3, r2, #25
    27b2:	d40d      	bmi.n	27d0 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x7c>
    27b4:	4b0a      	ldr	r3, [pc, #40]	; (27e0 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x8c>)
    27b6:	4a0b      	ldr	r2, [pc, #44]	; (27e4 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x90>)
    27b8:	681b      	ldr	r3, [r3, #0]
    27ba:	fbb3 f3f2 	udiv	r3, r3, r2
    27be:	4c0a      	ldr	r4, [pc, #40]	; (27e8 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x94>)
#include "PIT.h"

namespace TeensyTimerTool
{
    bool PIT_t::isInitialized = false;
    PITChannel PIT_t::channel[4] = {{0}, {1}, {2}, {3}};
    27c0:	2000      	movs	r0, #0
    27c2:	4a0a      	ldr	r2, [pc, #40]	; (27ec <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x98>)
    27c4:	6023      	str	r3, [r4, #0]
    27c6:	490a      	ldr	r1, [pc, #40]	; (27f0 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x9c>)

     uint32_t PITChannel::clockFactor = 1;
}
    27c8:	f85d 4b04 	ldr.w	r4, [sp], #4
#include "PIT.h"

namespace TeensyTimerTool
{
    bool PIT_t::isInitialized = false;
    PITChannel PIT_t::channel[4] = {{0}, {1}, {2}, {3}};
    27cc:	f001 beea 	b.w	45a4 <__aeabi_atexit>
    27d0:	2318      	movs	r3, #24
    27d2:	e7f4      	b.n	27be <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x6a>
    27d4:	400fc000 	.word	0x400fc000
    27d8:	20001980 	.word	0x20001980
    27dc:	20000248 	.word	0x20000248
    27e0:	200006ac 	.word	0x200006ac
    27e4:	000f4240 	.word	0x000f4240
    27e8:	20000688 	.word	0x20000688
    27ec:	20000674 	.word	0x20000674
    27f0:	000026dd 	.word	0x000026dd

000027f4 <EventResponder::~EventResponder()>:
class EventResponder
{
public:
	constexpr EventResponder() {
	}
	~EventResponder() {
    27f4:	b538      	push	{r3, r4, r5, lr}
    27f6:	4b06      	ldr	r3, [pc, #24]	; (2810 <EventResponder::~EventResponder()+0x1c>)
    27f8:	4605      	mov	r5, r0
    27fa:	6003      	str	r3, [r0, #0]
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    27fc:	f3ef 8410 	mrs	r4, PRIMASK
		__disable_irq();
    2800:	b672      	cpsid	i

	// Do not call any function.  The user's program must occasionally check
	// whether the event has occurred, or use one of the wait functions.
	void detach() {
		bool irq = disableInterrupts();
		detachNoInterrupts();
    2802:	f001 fabf 	bl	3d84 <EventResponder::detachNoInterrupts()>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2806:	b904      	cbnz	r4, 280a <EventResponder::~EventResponder()+0x16>
    2808:	b662      	cpsie	i
public:
	constexpr EventResponder() {
	}
	~EventResponder() {
		detach();
	}
    280a:	4628      	mov	r0, r5
    280c:	bd38      	pop	{r3, r4, r5, pc}
    280e:	bf00      	nop
    2810:	20000290 	.word	0x20000290

00002814 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    2814:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2816:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2818:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    281a:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    281c:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    281e:	d003      	beq.n	2828 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    2820:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2824:	f001 ba4c 	b.w	3cc0 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2828:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    282a:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    282e:	4718      	bx	r3

00002830 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)>:
    {
        static EventResponder er;

        void initYieldHook()
        {
            er.attach([](EventResponderRef r)
    2830:	b570      	push	{r4, r5, r6, lr}
    2832:	4c14      	ldr	r4, [pc, #80]	; (2884 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x54>)
    2834:	4606      	mov	r6, r0
    2836:	f104 0550 	add.w	r5, r4, #80	; 0x50

    void TCK_t::tick()
    {
        for (unsigned i = 0; i < NR_OF_TCK_TIMERS; i++)
        {
            if (channels[i] != nullptr)
    283a:	f854 3f04 	ldr.w	r3, [r4, #4]!
            {
                channels[i]->tick();
    283e:	4618      	mov	r0, r3

    void TCK_t::tick()
    {
        for (unsigned i = 0; i < NR_OF_TCK_TIMERS; i++)
        {
            if (channels[i] != nullptr)
    2840:	b113      	cbz	r3, 2848 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x18>
            {
                channels[i]->tick();
    2842:	681b      	ldr	r3, [r3, #0]
    2844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2846:	4798      	blx	r3
        }
    }

    void TCK_t::tick()
    {
        for (unsigned i = 0; i < NR_OF_TCK_TIMERS; i++)
    2848:	42ac      	cmp	r4, r5
    284a:	d1f6      	bne.n	283a <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0xa>
            {
                TeensyTimerTool::TCK_t::tick();
                r.triggerEvent();
    284c:	6833      	ldr	r3, [r6, #0]
    284e:	4a0e      	ldr	r2, [pc, #56]	; (2888 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x58>)
    2850:	681b      	ldr	r3, [r3, #0]
    2852:	4293      	cmp	r3, r2
    2854:	d10a      	bne.n	286c <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x3c>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2856:	7f32      	ldrb	r2, [r6, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2858:	2300      	movs	r3, #0
		_data = data;
		if (_type == EventTypeImmediate) {
    285a:	2a02      	cmp	r2, #2

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    285c:	6073      	str	r3, [r6, #4]
		_data = data;
    285e:	60f3      	str	r3, [r6, #12]
		if (_type == EventTypeImmediate) {
    2860:	d00a      	beq.n	2878 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x48>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2862:	4630      	mov	r0, r6
            });
    2864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2868:	f001 ba2a 	b.w	3cc0 <EventResponder::triggerEventNotImmediate()>
        void initYieldHook()
        {
            er.attach([](EventResponderRef r)
            {
                TeensyTimerTool::TCK_t::tick();
                r.triggerEvent();
    286c:	2200      	movs	r2, #0
    286e:	4630      	mov	r0, r6
    2870:	4611      	mov	r1, r2
            });
    2872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        void initYieldHook()
        {
            er.attach([](EventResponderRef r)
            {
                TeensyTimerTool::TCK_t::tick();
                r.triggerEvent();
    2876:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2878:	68b3      	ldr	r3, [r6, #8]
    287a:	4630      	mov	r0, r6
            });
    287c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2880:	4718      	bx	r3
    2882:	bf00      	nop
    2884:	200019fc 	.word	0x200019fc
    2888:	00002815 	.word	0x00002815

0000288c <TeensyTimerTool::initYieldHook()>:
    namespace TeensyTimerTool
    {
        static EventResponder er;

        void initYieldHook()
        {
    288c:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    288e:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    2892:	b672      	cpsid	i
	// Attach a function to be called from yield().  This should be the
	// default way to use EventResponder.  Calls from yield() allow use
	// of Arduino libraries, String, Serial, etc.
	void attach(EventResponderFunction function, uint8_t priority=128) {
		bool irq = disableInterrupts();
		detachNoInterrupts();
    2894:	4c12      	ldr	r4, [pc, #72]	; (28e0 <TeensyTimerTool::initYieldHook()+0x54>)
    2896:	4620      	mov	r0, r4
    2898:	f001 fa74 	bl	3d84 <EventResponder::detachNoInterrupts()>
		_function = function;
		_type = EventTypeYield;
		yield_active_check_flags |= YIELD_CHECK_EVENT_RESPONDER; // user setup a yield type...
    289c:	4a11      	ldr	r2, [pc, #68]	; (28e4 <TeensyTimerTool::initYieldHook()+0x58>)
	// default way to use EventResponder.  Calls from yield() allow use
	// of Arduino libraries, String, Serial, etc.
	void attach(EventResponderFunction function, uint8_t priority=128) {
		bool irq = disableInterrupts();
		detachNoInterrupts();
		_function = function;
    289e:	4812      	ldr	r0, [pc, #72]	; (28e8 <TeensyTimerTool::initYieldHook()+0x5c>)
		_type = EventTypeYield;
    28a0:	2101      	movs	r1, #1
		yield_active_check_flags |= YIELD_CHECK_EVENT_RESPONDER; // user setup a yield type...
    28a2:	7813      	ldrb	r3, [r2, #0]
	// default way to use EventResponder.  Calls from yield() allow use
	// of Arduino libraries, String, Serial, etc.
	void attach(EventResponderFunction function, uint8_t priority=128) {
		bool irq = disableInterrupts();
		detachNoInterrupts();
		_function = function;
    28a4:	60a0      	str	r0, [r4, #8]
		_type = EventTypeYield;
		yield_active_check_flags |= YIELD_CHECK_EVENT_RESPONDER; // user setup a yield type...
    28a6:	f043 0304 	orr.w	r3, r3, #4
	// of Arduino libraries, String, Serial, etc.
	void attach(EventResponderFunction function, uint8_t priority=128) {
		bool irq = disableInterrupts();
		detachNoInterrupts();
		_function = function;
		_type = EventTypeYield;
    28aa:	7721      	strb	r1, [r4, #28]
		yield_active_check_flags |= YIELD_CHECK_EVENT_RESPONDER; // user setup a yield type...
    28ac:	7013      	strb	r3, [r2, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    28ae:	b955      	cbnz	r5, 28c6 <TeensyTimerTool::initYieldHook()+0x3a>
    28b0:	b662      	cpsie	i
    28b2:	7f23      	ldrb	r3, [r4, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    28b4:	6065      	str	r5, [r4, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    28b6:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    28b8:	60e5      	str	r5, [r4, #12]
		if (_type == EventTypeImmediate) {
    28ba:	d00c      	beq.n	28d6 <TeensyTimerTool::initYieldHook()+0x4a>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    28bc:	4808      	ldr	r0, [pc, #32]	; (28e0 <TeensyTimerTool::initYieldHook()+0x54>)
            {
                TeensyTimerTool::TCK_t::tick();
                r.triggerEvent();
            });
            er.triggerEvent();
        }
    28be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    28c2:	f001 b9fd 	b.w	3cc0 <EventResponder::triggerEventNotImmediate()>

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    28c6:	2300      	movs	r3, #0
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    28c8:	4805      	ldr	r0, [pc, #20]	; (28e0 <TeensyTimerTool::initYieldHook()+0x54>)

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    28ca:	6063      	str	r3, [r4, #4]
		_data = data;
    28cc:	60e3      	str	r3, [r4, #12]
    28ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    28d2:	f001 b9f5 	b.w	3cc0 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    28d6:	68a3      	ldr	r3, [r4, #8]
    28d8:	4620      	mov	r0, r4
    28da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    28de:	4718      	bx	r3
    28e0:	2000068c 	.word	0x2000068c
    28e4:	200006e2 	.word	0x200006e2
    28e8:	00002831 	.word	0x00002831

000028ec <_GLOBAL__sub_I__ZN15TeensyTimerTool5TCK_t13isInitializedE>:

    #include "EventResponder.h"

    namespace TeensyTimerTool
    {
        static EventResponder er;
    28ec:	4a02      	ldr	r2, [pc, #8]	; (28f8 <_GLOBAL__sub_I__ZN15TeensyTimerTool5TCK_t13isInitializedE+0xc>)
    28ee:	4903      	ldr	r1, [pc, #12]	; (28fc <_GLOBAL__sub_I__ZN15TeensyTimerTool5TCK_t13isInitializedE+0x10>)
    28f0:	4803      	ldr	r0, [pc, #12]	; (2900 <_GLOBAL__sub_I__ZN15TeensyTimerTool5TCK_t13isInitializedE+0x14>)
    28f2:	f001 be57 	b.w	45a4 <__aeabi_atexit>
    28f6:	bf00      	nop
    28f8:	20000674 	.word	0x20000674
    28fc:	000027f5 	.word	0x000027f5
    2900:	2000068c 	.word	0x2000068c

00002904 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2904:	4a95      	ldr	r2, [pc, #596]	; (2b5c <set_arm_clock+0x258>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2906:	4b96      	ldr	r3, [pc, #600]	; (2b60 <set_arm_clock+0x25c>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2908:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    290a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    290e:	4c95      	ldr	r4, [pc, #596]	; (2b64 <set_arm_clock+0x260>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2910:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    2914:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    2916:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2918:	d91c      	bls.n	2954 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    291a:	4b93      	ldr	r3, [pc, #588]	; (2b68 <set_arm_clock+0x264>)
    291c:	4298      	cmp	r0, r3
    291e:	f240 8113 	bls.w	2b48 <set_arm_clock+0x244>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2922:	4b92      	ldr	r3, [pc, #584]	; (2b6c <set_arm_clock+0x268>)
    2924:	f240 6527 	movw	r5, #1575	; 0x627
    2928:	4f91      	ldr	r7, [pc, #580]	; (2b70 <set_arm_clock+0x26c>)
    292a:	4403      	add	r3, r0
    292c:	4c91      	ldr	r4, [pc, #580]	; (2b74 <set_arm_clock+0x270>)
    292e:	0a1a      	lsrs	r2, r3, #8
    2930:	fba7 3202 	umull	r3, r2, r7, r2
    2934:	09d3      	lsrs	r3, r2, #7
    2936:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    293a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    293e:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    2942:	42ab      	cmp	r3, r5
    2944:	bf28      	it	cs
    2946:	462b      	movcs	r3, r5
    2948:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    294c:	fba4 3503 	umull	r3, r5, r4, r3
    2950:	08ed      	lsrs	r5, r5, #3
    2952:	e004      	b.n	295e <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    2954:	4d88      	ldr	r5, [pc, #544]	; (2b78 <set_arm_clock+0x274>)
    2956:	42a8      	cmp	r0, r5
    2958:	bf94      	ite	ls
    295a:	2506      	movls	r5, #6
    295c:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    295e:	4a80      	ldr	r2, [pc, #512]	; (2b60 <set_arm_clock+0x25c>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2960:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2964:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2968:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    296a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    296e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2972:	d20a      	bcs.n	298a <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2974:	4b7b      	ldr	r3, [pc, #492]	; (2b64 <set_arm_clock+0x260>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2976:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    297a:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    297c:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    297e:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2980:	6813      	ldr	r3, [r2, #0]
    2982:	2b00      	cmp	r3, #0
    2984:	dafc      	bge.n	2980 <set_arm_clock+0x7c>
    2986:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    298a:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    298e:	d12f      	bne.n	29f0 <set_arm_clock+0xec>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    2990:	4c7a      	ldr	r4, [pc, #488]	; (2b7c <set_arm_clock+0x278>)
    2992:	4a7b      	ldr	r2, [pc, #492]	; (2b80 <set_arm_clock+0x27c>)
    2994:	f8d4 c010 	ldr.w	ip, [r4, #16]
    2998:	4614      	mov	r4, r2
    299a:	ea0c 0202 	and.w	r2, ip, r2
    299e:	42a2      	cmp	r2, r4
    29a0:	bf0a      	itet	eq
    29a2:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    29a6:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    29aa:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    29ac:	ea8e 0403 	eor.w	r4, lr, r3
    29b0:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    29b4:	d006      	beq.n	29c4 <set_arm_clock+0xc0>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    29b6:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    29ba:	4c69      	ldr	r4, [pc, #420]	; (2b60 <set_arm_clock+0x25c>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    29bc:	ea4e 0e03 	orr.w	lr, lr, r3
			CCM_CBCDR = cbcdr;
    29c0:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    29c4:	ea81 0302 	eor.w	r3, r1, r2
    29c8:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    29cc:	d008      	beq.n	29e0 <set_arm_clock+0xdc>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    29ce:	4b64      	ldr	r3, [pc, #400]	; (2b60 <set_arm_clock+0x25c>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    29d0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    29d4:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    29d6:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    29d8:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    29da:	6c93      	ldr	r3, [r2, #72]	; 0x48
    29dc:	071c      	lsls	r4, r3, #28
    29de:	d4fc      	bmi.n	29da <set_arm_clock+0xd6>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    29e0:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    29e4:	4a5e      	ldr	r2, [pc, #376]	; (2b60 <set_arm_clock+0x25c>)
    29e6:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    29ea:	6c93      	ldr	r3, [r2, #72]	; 0x48
    29ec:	0699      	lsls	r1, r3, #26
    29ee:	d4fc      	bmi.n	29ea <set_arm_clock+0xe6>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    29f0:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    29f2:	4c64      	ldr	r4, [pc, #400]	; (2b84 <set_arm_clock+0x280>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    29f4:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    29f6:	fb01 f302 	mul.w	r3, r1, r2
    29fa:	fb00 f303 	mul.w	r3, r0, r3
    29fe:	42a3      	cmp	r3, r4
    2a00:	d809      	bhi.n	2a16 <set_arm_clock+0x112>
		if (div_arm < 8) {
    2a02:	2a07      	cmp	r2, #7
    2a04:	f200 8095 	bhi.w	2b32 <set_arm_clock+0x22e>
			div_arm = div_arm + 1;
    2a08:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    2a0a:	fb01 f302 	mul.w	r3, r1, r2
    2a0e:	fb00 f303 	mul.w	r3, r0, r3
    2a12:	42a3      	cmp	r3, r4
    2a14:	d9f5      	bls.n	2a02 <set_arm_clock+0xfe>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2a16:	485c      	ldr	r0, [pc, #368]	; (2b88 <set_arm_clock+0x284>)
    2a18:	4c5c      	ldr	r4, [pc, #368]	; (2b8c <set_arm_clock+0x288>)
    2a1a:	4418      	add	r0, r3
    2a1c:	fba4 0300 	umull	r0, r3, r4, r0
    2a20:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    2a22:	2b6c      	cmp	r3, #108	; 0x6c
    2a24:	f200 808b 	bhi.w	2b3e <set_arm_clock+0x23a>
	if (mult < 54) mult = 54;
    2a28:	2b35      	cmp	r3, #53	; 0x35
    2a2a:	f200 808f 	bhi.w	2b4c <set_arm_clock+0x248>
    2a2e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 2bb8 <set_arm_clock+0x2b4>
    2a32:	2336      	movs	r3, #54	; 0x36
    2a34:	4856      	ldr	r0, [pc, #344]	; (2b90 <set_arm_clock+0x28c>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2a36:	f8df c144 	ldr.w	ip, [pc, #324]	; 2b7c <set_arm_clock+0x278>
    2a3a:	4c56      	ldr	r4, [pc, #344]	; (2b94 <set_arm_clock+0x290>)
    2a3c:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    2a40:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2a44:	ea09 0404 	and.w	r4, r9, r4
    2a48:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    2a4a:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2a4e:	d00b      	beq.n	2a68 <set_arm_clock+0x164>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    2a50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2a54:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2a58:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2a5a:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    2a5e:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2a62:	6823      	ldr	r3, [r4, #0]
    2a64:	2b00      	cmp	r3, #0
    2a66:	dafc      	bge.n	2a62 <set_arm_clock+0x15e>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    2a68:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 2b60 <set_arm_clock+0x25c>
    2a6c:	3a01      	subs	r2, #1
    2a6e:	f8dc 3010 	ldr.w	r3, [ip, #16]
    2a72:	f003 0307 	and.w	r3, r3, #7
    2a76:	4293      	cmp	r3, r2
    2a78:	d007      	beq.n	2a8a <set_arm_clock+0x186>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2a7a:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2a7e:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2a80:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2a84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2a86:	03db      	lsls	r3, r3, #15
    2a88:	d4fc      	bmi.n	2a84 <set_arm_clock+0x180>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2a8a:	3901      	subs	r1, #1
    2a8c:	0289      	lsls	r1, r1, #10
    2a8e:	ea8e 0301 	eor.w	r3, lr, r1
    2a92:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    2a96:	d00c      	beq.n	2ab2 <set_arm_clock+0x1ae>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    2a98:	4b31      	ldr	r3, [pc, #196]	; (2b60 <set_arm_clock+0x25c>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    2a9a:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2a9e:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2aa2:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2aa4:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    2aa8:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2aac:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2aae:	0799      	lsls	r1, r3, #30
    2ab0:	d4fc      	bmi.n	2aac <set_arm_clock+0x1a8>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2ab2:	4b39      	ldr	r3, [pc, #228]	; (2b98 <set_arm_clock+0x294>)
    2ab4:	4939      	ldr	r1, [pc, #228]	; (2b9c <set_arm_clock+0x298>)
    2ab6:	4403      	add	r3, r0
    2ab8:	09db      	lsrs	r3, r3, #7
    2aba:	fba1 3103 	umull	r3, r1, r1, r3
    2abe:	0b09      	lsrs	r1, r1, #12
    2ac0:	2904      	cmp	r1, #4
    2ac2:	bf28      	it	cs
    2ac4:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    2ac6:	1e4b      	subs	r3, r1, #1
    2ac8:	021b      	lsls	r3, r3, #8
    2aca:	ea8e 0203 	eor.w	r2, lr, r3
    2ace:	f412 7f40 	tst.w	r2, #768	; 0x300
    2ad2:	d007      	beq.n	2ae4 <set_arm_clock+0x1e0>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    2ad4:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    2adc:	4a20      	ldr	r2, [pc, #128]	; (2b60 <set_arm_clock+0x25c>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2ade:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    2ae2:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    2ae4:	4b1e      	ldr	r3, [pc, #120]	; (2b60 <set_arm_clock+0x25c>)
    2ae6:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2ae8:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    2aea:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    2aee:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2af0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2af2:	069b      	lsls	r3, r3, #26
    2af4:	d4fc      	bmi.n	2af0 <set_arm_clock+0x1ec>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2af6:	4b2a      	ldr	r3, [pc, #168]	; (2ba0 <set_arm_clock+0x29c>)
    2af8:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2afc:	4c29      	ldr	r4, [pc, #164]	; (2ba4 <set_arm_clock+0x2a0>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2afe:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2b00:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2b04:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2b06:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2b0a:	4c27      	ldr	r4, [pc, #156]	; (2ba8 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2b0c:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2b10:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2b14:	4a25      	ldr	r2, [pc, #148]	; (2bac <set_arm_clock+0x2a8>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2b16:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2b18:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2b1a:	d208      	bcs.n	2b2e <set_arm_clock+0x22a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2b1c:	4b11      	ldr	r3, [pc, #68]	; (2b64 <set_arm_clock+0x260>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2b1e:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2b22:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2b24:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    2b26:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2b28:	6813      	ldr	r3, [r2, #0]
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	dafc      	bge.n	2b28 <set_arm_clock+0x224>
	}

	return frequency;
}
    2b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    2b32:	2904      	cmp	r1, #4
    2b34:	f63f af6f 	bhi.w	2a16 <set_arm_clock+0x112>
				div_ahb = div_ahb + 1;
    2b38:	3101      	adds	r1, #1
				div_arm = 1;
    2b3a:	2201      	movs	r2, #1
    2b3c:	e75b      	b.n	29f6 <set_arm_clock+0xf2>
    2b3e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2bbc <set_arm_clock+0x2b8>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    2b42:	236c      	movs	r3, #108	; 0x6c
    2b44:	481a      	ldr	r0, [pc, #104]	; (2bb0 <set_arm_clock+0x2ac>)
    2b46:	e776      	b.n	2a36 <set_arm_clock+0x132>
    2b48:	2512      	movs	r5, #18
    2b4a:	e708      	b.n	295e <set_arm_clock+0x5a>
    2b4c:	4819      	ldr	r0, [pc, #100]	; (2bb4 <set_arm_clock+0x2b0>)
    2b4e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2bc0 <set_arm_clock+0x2bc>
    2b52:	fb00 f003 	mul.w	r0, r0, r3
    2b56:	ea43 0808 	orr.w	r8, r3, r8
    2b5a:	e76c      	b.n	2a36 <set_arm_clock+0x132>
    2b5c:	1f78a400 	.word	0x1f78a400
    2b60:	400fc000 	.word	0x400fc000
    2b64:	40080000 	.word	0x40080000
    2b68:	23c34600 	.word	0x23c34600
    2b6c:	dc3cba00 	.word	0xdc3cba00
    2b70:	004cb223 	.word	0x004cb223
    2b74:	51eb851f 	.word	0x51eb851f
    2b78:	016e3600 	.word	0x016e3600
    2b7c:	400d8000 	.word	0x400d8000
    2b80:	80003040 	.word	0x80003040
    2b84:	269fb1ff 	.word	0x269fb1ff
    2b88:	005b8d80 	.word	0x005b8d80
    2b8c:	165e9f81 	.word	0x165e9f81
    2b90:	269fb200 	.word	0x269fb200
    2b94:	8001307f 	.word	0x8001307f
    2b98:	08f0d17f 	.word	0x08f0d17f
    2b9c:	00e5109f 	.word	0x00e5109f
    2ba0:	431bde83 	.word	0x431bde83
    2ba4:	200006b0 	.word	0x200006b0
    2ba8:	200006ac 	.word	0x200006ac
    2bac:	20001a58 	.word	0x20001a58
    2bb0:	4d3f6400 	.word	0x4d3f6400
    2bb4:	00b71b00 	.word	0x00b71b00
    2bb8:	80002036 	.word	0x80002036
    2bbc:	8000206c 	.word	0x8000206c
    2bc0:	80002000 	.word	0x80002000

00002bc4 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    2bc4:	2800      	cmp	r0, #0
    2bc6:	d057      	beq.n	2c78 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2bc8:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    2bca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bce:	b085      	sub	sp, #20
    2bd0:	4683      	mov	fp, r0
    2bd2:	4c2a      	ldr	r4, [pc, #168]	; (2c7c <delay+0xb8>)
    2bd4:	4d2a      	ldr	r5, [pc, #168]	; (2c80 <delay+0xbc>)
    2bd6:	4e2b      	ldr	r6, [pc, #172]	; (2c84 <delay+0xc0>)
    2bd8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2bdc:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    2be0:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    2be2:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2be4:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    2be8:	2900      	cmp	r1, #0
    2bea:	d1f7      	bne.n	2bdc <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2bec:	4f26      	ldr	r7, [pc, #152]	; (2c88 <delay+0xc4>)
    2bee:	e9cd 8902 	strd	r8, r9, [sp, #8]
    2bf2:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    2bf4:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2bf6:	4a25      	ldr	r2, [pc, #148]	; (2c8c <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    2bf8:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2bfc:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2bfe:	6812      	ldr	r2, [r2, #0]
    2c00:	2701      	movs	r7, #1
    2c02:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    2c06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2c0a:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    2c0c:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2c0e:	428b      	cmp	r3, r1
    2c10:	bf08      	it	eq
    2c12:	4542      	cmpeq	r2, r8
    2c14:	bf2c      	ite	cs
    2c16:	46c2      	movcs	sl, r8
    2c18:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    2c1a:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2c1e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    2c22:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    2c24:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2c26:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	d1f7      	bne.n	2c1e <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2c2e:	9801      	ldr	r0, [sp, #4]
    2c30:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    2c32:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2c34:	4815      	ldr	r0, [pc, #84]	; (2c8c <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2c36:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2c3a:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2c3c:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2c40:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    2c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2c48:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2c4c:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    2c4e:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2c50:	4299      	cmp	r1, r3
    2c52:	bf08      	it	eq
    2c54:	4540      	cmpeq	r0, r8
    2c56:	bf2c      	ite	cs
    2c58:	4643      	movcs	r3, r8
    2c5a:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2c5c:	441a      	add	r2, r3
    2c5e:	4572      	cmp	r2, lr
    2c60:	d307      	bcc.n	2c72 <delay+0xae>
			if (--msec == 0) return;
    2c62:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    2c66:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    2c6a:	d1d8      	bne.n	2c1e <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    2c6c:	b005      	add	sp, #20
    2c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    2c72:	f001 f8d7 	bl	3e24 <yield>
	}
    2c76:	e7d2      	b.n	2c1e <delay+0x5a>
    2c78:	4770      	bx	lr
    2c7a:	bf00      	nop
    2c7c:	20001d00 	.word	0x20001d00
    2c80:	20001a5c 	.word	0x20001a5c
    2c84:	20001a54 	.word	0x20001a54
    2c88:	e0001004 	.word	0xe0001004
    2c8c:	20001a58 	.word	0x20001a58

00002c90 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    2c90:	2836      	cmp	r0, #54	; 0x36
    2c92:	d81c      	bhi.n	2cce <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    2c94:	0100      	lsls	r0, r0, #4
    2c96:	4a1a      	ldr	r2, [pc, #104]	; (2d00 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2c98:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    2c9a:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2c9e:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    2ca0:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2ca2:	d015      	beq.n	2cd0 <pinMode+0x40>
    2ca4:	2904      	cmp	r1, #4
    2ca6:	d013      	beq.n	2cd0 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2ca8:	68dc      	ldr	r4, [r3, #12]
    2caa:	6842      	ldr	r2, [r0, #4]
    2cac:	ea22 0204 	bic.w	r2, r2, r4
    2cb0:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2cb2:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    2cb4:	b1e9      	cbz	r1, 2cf2 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    2cb6:	2902      	cmp	r1, #2
    2cb8:	d01e      	beq.n	2cf8 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    2cba:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2cbc:	685b      	ldr	r3, [r3, #4]
}
    2cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    2cc2:	bf0c      	ite	eq
    2cc4:	490f      	ldreq	r1, [pc, #60]	; (2d04 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    2cc6:	4910      	ldrne	r1, [pc, #64]	; (2d08 <pinMode+0x78>)
    2cc8:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    2cca:	2215      	movs	r2, #21
    2ccc:	601a      	str	r2, [r3, #0]
}
    2cce:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2cd0:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    2cd2:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2cd4:	6844      	ldr	r4, [r0, #4]
    2cd6:	ea42 0204 	orr.w	r2, r2, r4
    2cda:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2cdc:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    2cde:	d008      	beq.n	2cf2 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    2ce0:	f640 0138 	movw	r1, #2104	; 0x838
    2ce4:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2ce6:	685b      	ldr	r3, [r3, #4]
    2ce8:	2215      	movs	r2, #21
}
    2cea:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2cee:	601a      	str	r2, [r3, #0]
}
    2cf0:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2cf2:	2138      	movs	r1, #56	; 0x38
    2cf4:	6011      	str	r1, [r2, #0]
    2cf6:	e7f6      	b.n	2ce6 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2cf8:	4904      	ldr	r1, [pc, #16]	; (2d0c <pinMode+0x7c>)
    2cfa:	6011      	str	r1, [r2, #0]
    2cfc:	e7f3      	b.n	2ce6 <pinMode+0x56>
    2cfe:	bf00      	nop
    2d00:	20000294 	.word	0x20000294
    2d04:	00013038 	.word	0x00013038
    2d08:	00010038 	.word	0x00010038
    2d0c:	0001f038 	.word	0x0001f038

00002d10 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    2d10:	2004      	movs	r0, #4
    2d12:	4671      	mov	r1, lr
    2d14:	4208      	tst	r0, r1
    2d16:	d003      	beq.n	2d20 <_MSP>
    2d18:	f3ef 8009 	mrs	r0, PSP
    2d1c:	f000 b808 	b.w	2d30 <HardFault_HandlerC>

00002d20 <_MSP>:
    2d20:	f3ef 8008 	mrs	r0, MSP
    2d24:	f000 b804 	b.w	2d30 <HardFault_HandlerC>

00002d28 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    2d28:	4770      	bx	lr
    2d2a:	bf00      	nop

00002d2c <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    2d2c:	4770      	bx	lr
    2d2e:	bf00      	nop

00002d30 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2d30:	4b1b      	ldr	r3, [pc, #108]	; (2da0 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    2d32:	2105      	movs	r1, #5
    2d34:	4a1b      	ldr	r2, [pc, #108]	; (2da4 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    2d36:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    2d38:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    2d3a:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    2d3e:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    2d40:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    2d44:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2d46:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    2d48:	4c17      	ldr	r4, [pc, #92]	; (2da8 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2d4a:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    2d4c:	4817      	ldr	r0, [pc, #92]	; (2dac <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2d4e:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    2d50:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    2d54:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    2d58:	6823      	ldr	r3, [r4, #0]
    2d5a:	4283      	cmp	r3, r0
    2d5c:	d902      	bls.n	2d64 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    2d5e:	4814      	ldr	r0, [pc, #80]	; (2db0 <HardFault_HandlerC+0x80>)
    2d60:	f7ff fdd0 	bl	2904 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    2d64:	4d0e      	ldr	r5, [pc, #56]	; (2da0 <HardFault_HandlerC+0x70>)
    2d66:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    2d68:	2000      	movs	r0, #0
    2d6a:	4a12      	ldr	r2, [pc, #72]	; (2db4 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    2d6c:	4912      	ldr	r1, [pc, #72]	; (2db8 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    2d6e:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    2d72:	9001      	str	r0, [sp, #4]
    2d74:	9b01      	ldr	r3, [sp, #4]
    2d76:	4293      	cmp	r3, r2
    2d78:	d805      	bhi.n	2d86 <HardFault_HandlerC+0x56>
    2d7a:	9b01      	ldr	r3, [sp, #4]
    2d7c:	3301      	adds	r3, #1
    2d7e:	9301      	str	r3, [sp, #4]
    2d80:	9b01      	ldr	r3, [sp, #4]
    2d82:	4293      	cmp	r3, r2
    2d84:	d9f9      	bls.n	2d7a <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    2d86:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    2d8a:	9001      	str	r0, [sp, #4]
    2d8c:	9b01      	ldr	r3, [sp, #4]
    2d8e:	428b      	cmp	r3, r1
    2d90:	d8ed      	bhi.n	2d6e <HardFault_HandlerC+0x3e>
    2d92:	9b01      	ldr	r3, [sp, #4]
    2d94:	3301      	adds	r3, #1
    2d96:	9301      	str	r3, [sp, #4]
    2d98:	9b01      	ldr	r3, [sp, #4]
    2d9a:	428b      	cmp	r3, r1
    2d9c:	d9f9      	bls.n	2d92 <HardFault_HandlerC+0x62>
    2d9e:	e7e6      	b.n	2d6e <HardFault_HandlerC+0x3e>
    2da0:	401bc000 	.word	0x401bc000
    2da4:	401f8000 	.word	0x401f8000
    2da8:	200006b0 	.word	0x200006b0
    2dac:	23c345ff 	.word	0x23c345ff
    2db0:	11e1a300 	.word	0x11e1a300
    2db4:	000f423f 	.word	0x000f423f
    2db8:	0089543f 	.word	0x0089543f

00002dbc <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    2dbc:	4a09      	ldr	r2, [pc, #36]	; (2de4 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    2dbe:	b508      	push	{r3, lr}
        char *prev = __brkval;
    2dc0:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
    2dc2:	b120      	cbz	r0, 2dce <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    2dc4:	4418      	add	r0, r3
    2dc6:	4908      	ldr	r1, [pc, #32]	; (2de8 <_sbrk+0x2c>)
    2dc8:	4288      	cmp	r0, r1
    2dca:	d802      	bhi.n	2dd2 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    2dcc:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
    2dce:	4618      	mov	r0, r3
    2dd0:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    2dd2:	f001 fbf3 	bl	45bc <__errno>
    2dd6:	220c      	movs	r2, #12
                        return (void *)-1;
    2dd8:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    2ddc:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    2dde:	4618      	mov	r0, r3
    2de0:	bd08      	pop	{r3, pc}
    2de2:	bf00      	nop
    2de4:	200006b4 	.word	0x200006b4
    2de8:	20280000 	.word	0x20280000

00002dec <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    2dec:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    2dee:	4a06      	ldr	r2, [pc, #24]	; (2e08 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    2df0:	2107      	movs	r1, #7
    2df2:	4b06      	ldr	r3, [pc, #24]	; (2e0c <Panic_Temp_isr+0x20>)
    2df4:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    2df6:	6b93      	ldr	r3, [r2, #56]	; 0x38
    2df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2dfc:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    2dfe:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    2e02:	bf30      	wfi
    2e04:	e7fd      	b.n	2e02 <Panic_Temp_isr+0x16>
    2e06:	bf00      	nop
    2e08:	400d4000 	.word	0x400d4000
    2e0c:	400ac000 	.word	0x400ac000

00002e10 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    2e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2e14:	4ca6      	ldr	r4, [pc, #664]	; (30b0 <isr+0x2a0>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    2e16:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2e18:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2e1c:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    2e20:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2e24:	f000 808e 	beq.w	2f44 <isr+0x134>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    2e28:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2e2c:	2b00      	cmp	r3, #0
    2e2e:	f000 8084 	beq.w	2f3a <isr+0x12a>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2e32:	f04f 1a01 	mov.w	sl, #65537	; 0x10001
    2e36:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 30e8 <isr+0x2d8>
    2e3a:	4e9e      	ldr	r6, [pc, #632]	; (30b4 <isr+0x2a4>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2e3c:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2e3e:	46d3      	mov	fp, sl
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    2e40:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    2e44:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    2e46:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2e48:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2e4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2e50:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    2e54:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2e58:	0499      	lsls	r1, r3, #18
    2e5a:	d5f5      	bpl.n	2e48 <isr+0x38>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    2e5c:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    2e60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2e64:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2e68:	f8c5 b1b4 	str.w	fp, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    2e6c:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2e70:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    2e74:	d1fa      	bne.n	2e6c <isr+0x5c>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2e76:	b281      	uxth	r1, r0
    2e78:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    2e7c:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2e80:	42b9      	cmp	r1, r7
    2e82:	f200 8133 	bhi.w	30ec <isr+0x2dc>
    2e86:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    2e8a:	f080 82a4 	bcs.w	33d6 <isr+0x5c6>
    2e8e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    2e92:	f000 81f7 	beq.w	3284 <isr+0x474>
    2e96:	f200 816e 	bhi.w	3176 <isr+0x366>
    2e9a:	2980      	cmp	r1, #128	; 0x80
    2e9c:	f000 81b7 	beq.w	320e <isr+0x3fe>
    2ea0:	2982      	cmp	r1, #130	; 0x82
    2ea2:	f040 8160 	bne.w	3166 <isr+0x356>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2ea6:	b292      	uxth	r2, r2
    2ea8:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2eac:	2907      	cmp	r1, #7
    2eae:	f200 815a 	bhi.w	3166 <isr+0x356>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2eb2:	0089      	lsls	r1, r1, #2
    2eb4:	4f80      	ldr	r7, [pc, #512]	; (30b8 <isr+0x2a8>)
		reply_buffer[0] = 0;
    2eb6:	4881      	ldr	r0, [pc, #516]	; (30bc <isr+0x2ac>)
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2eb8:	0612      	lsls	r2, r2, #24
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2eba:	440f      	add	r7, r1
    2ebc:	6839      	ldr	r1, [r7, #0]
		reply_buffer[0] = 0;
    2ebe:	7003      	strb	r3, [r0, #0]
		reply_buffer[1] = 0;
    2ec0:	7043      	strb	r3, [r0, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2ec2:	f140 831b 	bpl.w	34fc <isr+0x6ec>
    2ec6:	03cb      	lsls	r3, r1, #15
    2ec8:	d501      	bpl.n	2ece <isr+0xbe>
			reply_buffer[0] = 1;
    2eca:	2301      	movs	r3, #1
    2ecc:	7003      	strb	r3, [r0, #0]
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2ece:	4a7c      	ldr	r2, [pc, #496]	; (30c0 <isr+0x2b0>)
    2ed0:	2701      	movs	r7, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2ed2:	4b7c      	ldr	r3, [pc, #496]	; (30c4 <isr+0x2b4>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    2ed4:	2100      	movs	r1, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2ed6:	6017      	str	r7, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2ed8:	6053      	str	r3, [r2, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    2eda:	64b2      	str	r2, [r6, #72]	; 0x48
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2edc:	4b7a      	ldr	r3, [pc, #488]	; (30c8 <isr+0x2b8>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    2ede:	64f1      	str	r1, [r6, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    2ee0:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2ee4:	f503 5780 	add.w	r7, r3, #4096	; 0x1000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2ee8:	6090      	str	r0, [r2, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2eea:	f503 5000 	add.w	r0, r3, #8192	; 0x2000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2eee:	60d3      	str	r3, [r2, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2ef0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2ef4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2ef8:	6117      	str	r7, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2efa:	6150      	str	r0, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2efc:	6193      	str	r3, [r2, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2efe:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    2f02:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2f06:	2b00      	cmp	r3, #0
    2f08:	d1fb      	bne.n	2f02 <isr+0xf2>
	}
	endpoint0_transfer_ack.next = 1;
    2f0a:	4a70      	ldr	r2, [pc, #448]	; (30cc <isr+0x2bc>)
    2f0c:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2f0e:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    2f10:	60f3      	str	r3, [r6, #12]
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    2f12:	60b2      	str	r2, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2f14:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2f16:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2f18:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    2f1c:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2f20:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    2f22:	ea41 0300 	orr.w	r3, r1, r0
    2f26:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    2f2a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2f2e:	2b00      	cmp	r3, #0
    2f30:	d1fb      	bne.n	2f2a <isr+0x11a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2f32:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2f36:	2b00      	cmp	r3, #0
    2f38:	d182      	bne.n	2e40 <isr+0x30>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    2f3a:	4a5d      	ldr	r2, [pc, #372]	; (30b0 <isr+0x2a0>)
    2f3c:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    2f40:	2b00      	cmp	r3, #0
    2f42:	d150      	bne.n	2fe6 <isr+0x1d6>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    2f44:	f018 0f40 	tst.w	r8, #64	; 0x40
    2f48:	d018      	beq.n	2f7c <isr+0x16c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2f4a:	4b59      	ldr	r3, [pc, #356]	; (30b0 <isr+0x2a0>)
    2f4c:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2f50:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2f52:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    2f56:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    2f5a:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2f5e:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    2f62:	4b53      	ldr	r3, [pc, #332]	; (30b0 <isr+0x2a0>)
    2f64:	2c00      	cmp	r4, #0
    2f66:	d1fa      	bne.n	2f5e <isr+0x14e>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    2f68:	f04f 32ff 	mov.w	r2, #4294967295
    2f6c:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    2f70:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    2f74:	f000 fde6 	bl	3b44 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    2f78:	4b55      	ldr	r3, [pc, #340]	; (30d0 <isr+0x2c0>)
    2f7a:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    2f7c:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    2f80:	d003      	beq.n	2f8a <isr+0x17a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    2f82:	4b54      	ldr	r3, [pc, #336]	; (30d4 <isr+0x2c4>)
    2f84:	681b      	ldr	r3, [r3, #0]
    2f86:	b103      	cbz	r3, 2f8a <isr+0x17a>
    2f88:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    2f8a:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    2f8e:	d003      	beq.n	2f98 <isr+0x188>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    2f90:	4b51      	ldr	r3, [pc, #324]	; (30d8 <isr+0x2c8>)
    2f92:	681b      	ldr	r3, [r3, #0]
    2f94:	b103      	cbz	r3, 2f98 <isr+0x188>
    2f96:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    2f98:	f018 0f04 	tst.w	r8, #4
    2f9c:	d008      	beq.n	2fb0 <isr+0x1a0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    2f9e:	4b44      	ldr	r3, [pc, #272]	; (30b0 <isr+0x2a0>)
    2fa0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    2fa4:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    2fa8:	d07f      	beq.n	30aa <isr+0x29a>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    2faa:	4b4c      	ldr	r3, [pc, #304]	; (30dc <isr+0x2cc>)
    2fac:	2201      	movs	r2, #1
    2fae:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    2fb0:	4b3f      	ldr	r3, [pc, #252]	; (30b0 <isr+0x2a0>)
    2fb2:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    2fb6:	0612      	lsls	r2, r2, #24
    2fb8:	d512      	bpl.n	2fe0 <isr+0x1d0>
    2fba:	f018 0f80 	tst.w	r8, #128	; 0x80
    2fbe:	d00f      	beq.n	2fe0 <isr+0x1d0>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    2fc0:	4947      	ldr	r1, [pc, #284]	; (30e0 <isr+0x2d0>)
    2fc2:	780a      	ldrb	r2, [r1, #0]
    2fc4:	b162      	cbz	r2, 2fe0 <isr+0x1d0>
			if (--usb_reboot_timer == 0) {
    2fc6:	3a01      	subs	r2, #1
    2fc8:	b2d2      	uxtb	r2, r2
    2fca:	700a      	strb	r2, [r1, #0]
    2fcc:	b942      	cbnz	r2, 2fe0 <isr+0x1d0>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    2fce:	4945      	ldr	r1, [pc, #276]	; (30e4 <isr+0x2d4>)
    2fd0:	780a      	ldrb	r2, [r1, #0]
    2fd2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2fd6:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    2fd8:	2a00      	cmp	r2, #0
    2fda:	f000 831b 	beq.w	3614 <isr+0x804>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    2fde:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    2fe0:	b003      	add	sp, #12
    2fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2fe6:	4940      	ldr	r1, [pc, #256]	; (30e8 <isr+0x2d8>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    2fe8:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2fec:	6808      	ldr	r0, [r1, #0]
    2fee:	4203      	tst	r3, r0
    2ff0:	f040 82c7 	bne.w	3582 <isr+0x772>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    2ff4:	4a36      	ldr	r2, [pc, #216]	; (30d0 <isr+0x2c0>)
    2ff6:	6817      	ldr	r7, [r2, #0]
#if 1
			if (completestatus) {
    2ff8:	403b      	ands	r3, r7
    2ffa:	9301      	str	r3, [sp, #4]
    2ffc:	d0a2      	beq.n	2f44 <isr+0x134>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    2ffe:	ea5f 4913 	movs.w	r9, r3, lsr #16
    3002:	d025      	beq.n	3050 <isr+0x240>
    3004:	4e2b      	ldr	r6, [pc, #172]	; (30b4 <isr+0x2a4>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    3006:	f04f 0a01 	mov.w	sl, #1
    300a:	46b3      	mov	fp, r6
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    300c:	fa99 f5a9 	rbit	r5, r9
    3010:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    3014:	eb0b 17c5 	add.w	r7, fp, r5, lsl #7
    3018:	3740      	adds	r7, #64	; 0x40
};*/

static void run_callbacks(endpoint_t *ep)
{
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    301a:	6b38      	ldr	r0, [r7, #48]	; 0x30
	if (first == NULL) return;
    301c:	b198      	cbz	r0, 3046 <isr+0x236>
    301e:	4602      	mov	r2, r0
    3020:	2400      	movs	r4, #0
    3022:	e004      	b.n	302e <isr+0x21e>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    3024:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    3026:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    3028:	2a01      	cmp	r2, #1
    302a:	f000 82dd 	beq.w	35e8 <isr+0x7d8>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    302e:	6853      	ldr	r3, [r2, #4]
    3030:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    3034:	d0f6      	beq.n	3024 <isr+0x214>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    3036:	633a      	str	r2, [r7, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3038:	b12c      	cbz	r4, 3046 <isr+0x236>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    303c:	6806      	ldr	r6, [r0, #0]
		ep->callback_function(first);
    303e:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3040:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    3042:	4630      	mov	r0, r6
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3044:	d1f9      	bne.n	303a <isr+0x22a>
				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    3046:	fa0a f505 	lsl.w	r5, sl, r5
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    304a:	ea39 0905 	bics.w	r9, r9, r5
    304e:	d1dd      	bne.n	300c <isr+0x1fc>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    3050:	f8bd 7004 	ldrh.w	r7, [sp, #4]
				while(rx) {
    3054:	2f00      	cmp	r7, #0
    3056:	f43f af75 	beq.w	2f44 <isr+0x134>
    305a:	4e16      	ldr	r6, [pc, #88]	; (30b4 <isr+0x2a4>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    305c:	f04f 0901 	mov.w	r9, #1
    3060:	46b3      	mov	fp, r6
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    3062:	fa97 f5a7 	rbit	r5, r7
    3066:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    306a:	eb0b 1ac5 	add.w	sl, fp, r5, lsl #7
};*/

static void run_callbacks(endpoint_t *ep)
{
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    306e:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
	if (first == NULL) return;
    3072:	b1a8      	cbz	r0, 30a0 <isr+0x290>
    3074:	4602      	mov	r2, r0
    3076:	2400      	movs	r4, #0
    3078:	e004      	b.n	3084 <isr+0x274>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    307a:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    307c:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    307e:	2a01      	cmp	r2, #1
    3080:	f000 82ad 	beq.w	35de <isr+0x7ce>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    3084:	6853      	ldr	r3, [r2, #4]
    3086:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    308a:	d0f6      	beq.n	307a <isr+0x26a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    308c:	f8ca 2030 	str.w	r2, [sl, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3090:	b134      	cbz	r4, 30a0 <isr+0x290>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    3092:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    3096:	6806      	ldr	r6, [r0, #0]
		ep->callback_function(first);
    3098:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    309a:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    309c:	4630      	mov	r0, r6
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    309e:	d1f8      	bne.n	3092 <isr+0x282>
				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    30a0:	fa09 f505 	lsl.w	r5, r9, r5
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    30a4:	43af      	bics	r7, r5
    30a6:	d1dc      	bne.n	3062 <isr+0x252>
    30a8:	e74c      	b.n	2f44 <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    30aa:	4a0c      	ldr	r2, [pc, #48]	; (30dc <isr+0x2cc>)
    30ac:	7013      	strb	r3, [r2, #0]
    30ae:	e77f      	b.n	2fb0 <isr+0x1a0>
    30b0:	402e0000 	.word	0x402e0000
    30b4:	20004000 	.word	0x20004000
    30b8:	402e01c0 	.word	0x402e01c0
    30bc:	20001a98 	.word	0x20001a98
    30c0:	20003000 	.word	0x20003000
    30c4:	00020080 	.word	0x00020080
    30c8:	20002a98 	.word	0x20002a98
    30cc:	20003020 	.word	0x20003020
    30d0:	20001a78 	.word	0x20001a78
    30d4:	20001a74 	.word	0x20001a74
    30d8:	20001a80 	.word	0x20001a80
    30dc:	20001a84 	.word	0x20001a84
    30e0:	20001a8c 	.word	0x20001a8c
    30e4:	20001a7c 	.word	0x20001a7c
    30e8:	20001a88 	.word	0x20001a88
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    30ec:	f242 0721 	movw	r7, #8225	; 0x2021
    30f0:	42b9      	cmp	r1, r7
    30f2:	d034      	beq.n	315e <isr+0x34e>
    30f4:	d867      	bhi.n	31c6 <isr+0x3b6>
    30f6:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    30fa:	f000 8130 	beq.w	335e <isr+0x54e>
    30fe:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    3102:	d130      	bne.n	3166 <isr+0x356>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    3104:	f3c0 4007 	ubfx	r0, r0, #16, #8
    3108:	4ab7      	ldr	r2, [pc, #732]	; (33e8 <isr+0x5d8>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    310a:	49b8      	ldr	r1, [pc, #736]	; (33ec <isr+0x5dc>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    310c:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    310e:	4fb8      	ldr	r7, [pc, #736]	; (33f0 <isr+0x5e0>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    3110:	4ab8      	ldr	r2, [pc, #736]	; (33f4 <isr+0x5e4>)
    3112:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    3114:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    3118:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    311c:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    3120:	f000 fd12 	bl	3b48 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3124:	4ab4      	ldr	r2, [pc, #720]	; (33f8 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3126:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3128:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    312a:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    312c:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    312e:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3130:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3132:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3134:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3138:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    313c:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    313e:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    3142:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3146:	4aad      	ldr	r2, [pc, #692]	; (33fc <isr+0x5ec>)
    3148:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    314a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    314e:	2b00      	cmp	r3, #0
    3150:	d1fb      	bne.n	314a <isr+0x33a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3152:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3156:	2b00      	cmp	r3, #0
    3158:	f47f ae72 	bne.w	2e40 <isr+0x30>
    315c:	e6ed      	b.n	2f3a <isr+0x12a>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    315e:	0c11      	lsrs	r1, r2, #16
    3160:	2907      	cmp	r1, #7
    3162:	f000 81cf 	beq.w	3504 <isr+0x6f4>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    3166:	f8c4 a1c0 	str.w	sl, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    316a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    316e:	2b00      	cmp	r3, #0
    3170:	f47f ae66 	bne.w	2e40 <isr+0x30>
    3174:	e6e1      	b.n	2f3a <isr+0x12a>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3176:	f240 3702 	movw	r7, #770	; 0x302
    317a:	42b9      	cmp	r1, r7
    317c:	f000 80bf 	beq.w	32fe <isr+0x4ee>
    3180:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    3184:	d1ef      	bne.n	3166 <isr+0x356>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3186:	4a9c      	ldr	r2, [pc, #624]	; (33f8 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3188:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    318a:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    318c:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    318e:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3190:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3192:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3194:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3198:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    319c:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    319e:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    31a2:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    31a6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    31aa:	2b00      	cmp	r3, #0
    31ac:	d1fb      	bne.n	31a6 <isr+0x396>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    31ae:	0c03      	lsrs	r3, r0, #16
    31b0:	065b      	lsls	r3, r3, #25
    31b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    31b6:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    31ba:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    31be:	2b00      	cmp	r3, #0
    31c0:	f47f ae3e 	bne.w	2e40 <isr+0x30>
    31c4:	e6b9      	b.n	2f3a <isr+0x12a>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    31c6:	f242 2321 	movw	r3, #8737	; 0x2221
    31ca:	4299      	cmp	r1, r3
    31cc:	f000 808a 	beq.w	32e4 <isr+0x4d4>
    31d0:	f242 3321 	movw	r3, #8993	; 0x2321
    31d4:	4299      	cmp	r1, r3
    31d6:	d1c6      	bne.n	3166 <isr+0x356>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    31d8:	4b87      	ldr	r3, [pc, #540]	; (33f8 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    31da:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    31dc:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    31de:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    31e0:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    31e2:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    31e4:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    31e6:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    31e8:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    31ec:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    31f0:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    31f2:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    31f6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    31fa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    31fe:	2b00      	cmp	r3, #0
    3200:	d1fb      	bne.n	31fa <isr+0x3ea>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3202:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3206:	2b00      	cmp	r3, #0
    3208:	f47f ae1a 	bne.w	2e40 <isr+0x30>
    320c:	e695      	b.n	2f3a <isr+0x12a>
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    320e:	487c      	ldr	r0, [pc, #496]	; (3400 <isr+0x5f0>)
    3210:	2701      	movs	r7, #1
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3212:	497c      	ldr	r1, [pc, #496]	; (3404 <isr+0x5f4>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3214:	4a7c      	ldr	r2, [pc, #496]	; (3408 <isr+0x5f8>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    3216:	64f3      	str	r3, [r6, #76]	; 0x4c
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3218:	700b      	strb	r3, [r1, #0]
		reply_buffer[1] = 0;
    321a:	704b      	strb	r3, [r1, #1]
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    321c:	f501 5300 	add.w	r3, r1, #8192	; 0x2000
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3220:	6007      	str	r7, [r0, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3222:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3226:	64b0      	str	r0, [r6, #72]	; 0x48
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3228:	6042      	str	r2, [r0, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    322a:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    322e:	60c7      	str	r7, [r0, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3230:	f501 5740 	add.w	r7, r1, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3234:	6103      	str	r3, [r0, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3236:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    323a:	f501 4380 	add.w	r3, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    323e:	6081      	str	r1, [r0, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3240:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3244:	6147      	str	r7, [r0, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3246:	6183      	str	r3, [r0, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    3248:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    324c:	2b00      	cmp	r3, #0
    324e:	d1fb      	bne.n	3248 <isr+0x438>
	}
	endpoint0_transfer_ack.next = 1;
    3250:	4a69      	ldr	r2, [pc, #420]	; (33f8 <isr+0x5e8>)
    3252:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3254:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    3256:	60f3      	str	r3, [r6, #12]
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    3258:	60b2      	str	r2, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    325a:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    325c:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    325e:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    3262:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3266:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    3268:	ea41 0300 	orr.w	r3, r1, r0
    326c:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    3270:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3274:	2b00      	cmp	r3, #0
    3276:	d1fb      	bne.n	3270 <isr+0x460>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3278:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    327c:	2b00      	cmp	r3, #0
    327e:	f47f addf 	bne.w	2e40 <isr+0x30>
    3282:	e65a      	b.n	2f3a <isr+0x12a>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    3284:	b292      	uxth	r2, r2
    3286:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    328a:	2b07      	cmp	r3, #7
    328c:	f63f af6b 	bhi.w	3166 <isr+0x356>
		dir = setup.wIndex & 0x80;
		if (dir) {
    3290:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    3294:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3298:	4a5c      	ldr	r2, [pc, #368]	; (340c <isr+0x5fc>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    329a:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    329e:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    32a2:	441a      	add	r2, r3
    32a4:	6813      	ldr	r3, [r2, #0]
    32a6:	bf14      	ite	ne
    32a8:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    32ac:	f023 0301 	biceq.w	r3, r3, #1
    32b0:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    32b2:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    32b4:	4b50      	ldr	r3, [pc, #320]	; (33f8 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    32b6:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    32b8:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    32ba:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    32bc:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    32be:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    32c2:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    32c6:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    32c8:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    32cc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    32d0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    32d4:	2b00      	cmp	r3, #0
    32d6:	d1fb      	bne.n	32d0 <isr+0x4c0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    32d8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    32dc:	2b00      	cmp	r3, #0
    32de:	f47f adaf 	bne.w	2e40 <isr+0x30>
    32e2:	e62a      	b.n	2f3a <isr+0x12a>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    32e4:	b292      	uxth	r2, r2
    32e6:	2a00      	cmp	r2, #0
    32e8:	f47f af76 	bne.w	31d8 <isr+0x3c8>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    32ec:	4b48      	ldr	r3, [pc, #288]	; (3410 <isr+0x600>)
			usb_cdc_line_rtsdtr = setup.wValue;
    32ee:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    32f2:	4a48      	ldr	r2, [pc, #288]	; (3414 <isr+0x604>)
    32f4:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    32f6:	4b48      	ldr	r3, [pc, #288]	; (3418 <isr+0x608>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    32f8:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    32fa:	7018      	strb	r0, [r3, #0]
    32fc:	e76c      	b.n	31d8 <isr+0x3c8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    32fe:	b292      	uxth	r2, r2
    3300:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    3304:	2b07      	cmp	r3, #7
    3306:	f63f af2e 	bhi.w	3166 <isr+0x356>
		dir = setup.wIndex & 0x80;
		if (dir) {
    330a:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    330e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3312:	4a3e      	ldr	r2, [pc, #248]	; (340c <isr+0x5fc>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3314:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3318:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    331c:	441a      	add	r2, r3
    331e:	6813      	ldr	r3, [r2, #0]
    3320:	bf14      	ite	ne
    3322:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    3326:	f043 0301 	orreq.w	r3, r3, #1
    332a:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    332c:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    332e:	4b32      	ldr	r3, [pc, #200]	; (33f8 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3330:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3332:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3334:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3336:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3338:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    333c:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3340:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    3342:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    3346:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    334a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    334e:	2b00      	cmp	r3, #0
    3350:	d1fb      	bne.n	334a <isr+0x53a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3352:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3356:	2b00      	cmp	r3, #0
    3358:	f47f ad72 	bne.w	2e40 <isr+0x30>
    335c:	e5ed      	b.n	2f3a <isr+0x12a>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    335e:	4922      	ldr	r1, [pc, #136]	; (33e8 <isr+0x5d8>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3360:	2201      	movs	r2, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3362:	4828      	ldr	r0, [pc, #160]	; (3404 <isr+0x5f4>)
    3364:	7809      	ldrb	r1, [r1, #0]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    3366:	64f3      	str	r3, [r6, #76]	; 0x4c
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3368:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    336c:	7001      	strb	r1, [r0, #0]
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    336e:	4b2b      	ldr	r3, [pc, #172]	; (341c <isr+0x60c>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3370:	4923      	ldr	r1, [pc, #140]	; (3400 <isr+0x5f0>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3372:	604b      	str	r3, [r1, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3374:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3378:	64b1      	str	r1, [r6, #72]	; 0x48
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    337a:	600a      	str	r2, [r1, #0]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    337c:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3380:	60cf      	str	r7, [r1, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3382:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3386:	610b      	str	r3, [r1, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3388:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    338c:	f500 4380 	add.w	r3, r0, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3390:	6088      	str	r0, [r1, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3392:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3396:	614f      	str	r7, [r1, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3398:	618b      	str	r3, [r1, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    339a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    339e:	2b00      	cmp	r3, #0
    33a0:	d1fb      	bne.n	339a <isr+0x58a>
	}
	endpoint0_transfer_ack.next = 1;
    33a2:	4a15      	ldr	r2, [pc, #84]	; (33f8 <isr+0x5e8>)
    33a4:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    33a6:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    33a8:	60f3      	str	r3, [r6, #12]
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    33aa:	60b2      	str	r2, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    33ac:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    33ae:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    33b0:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    33b4:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    33b8:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    33ba:	ea41 0300 	orr.w	r3, r1, r0
    33be:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    33c2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    33c6:	2b00      	cmp	r3, #0
    33c8:	d1fb      	bne.n	33c2 <isr+0x5b2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    33ca:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    33ce:	2b00      	cmp	r3, #0
    33d0:	f47f ad36 	bne.w	2e40 <isr+0x30>
    33d4:	e5b1      	b.n	2f3a <isr+0x12a>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    33d6:	4b12      	ldr	r3, [pc, #72]	; (3420 <isr+0x610>)
    33d8:	6859      	ldr	r1, [r3, #4]
    33da:	2900      	cmp	r1, #0
    33dc:	f43f aec3 	beq.w	3166 <isr+0x356>
    33e0:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    33e2:	fa1f fe82 	uxth.w	lr, r2
    33e6:	e022      	b.n	342e <isr+0x61e>
    33e8:	20001aa8 	.word	0x20001aa8
    33ec:	000200c8 	.word	0x000200c8
    33f0:	00cc0002 	.word	0x00cc0002
    33f4:	00c80002 	.word	0x00c80002
    33f8:	20003020 	.word	0x20003020
    33fc:	20001a88 	.word	0x20001a88
    3400:	20003000 	.word	0x20003000
    3404:	20001a98 	.word	0x20001a98
    3408:	00020080 	.word	0x00020080
    340c:	402e01c0 	.word	0x402e01c0
    3410:	20001a5c 	.word	0x20001a5c
    3414:	20004288 	.word	0x20004288
    3418:	20001c90 	.word	0x20001c90
    341c:	00010080 	.word	0x00010080
    3420:	20000604 	.word	0x20000604
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    3424:	330c      	adds	r3, #12
    3426:	6859      	ldr	r1, [r3, #4]
    3428:	2900      	cmp	r1, #0
    342a:	f43f ae9c 	beq.w	3166 <isr+0x356>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    342e:	881f      	ldrh	r7, [r3, #0]
    3430:	4287      	cmp	r7, r0
    3432:	d1f7      	bne.n	3424 <isr+0x614>
    3434:	885f      	ldrh	r7, [r3, #2]
    3436:	4577      	cmp	r7, lr
    3438:	d1f4      	bne.n	3424 <isr+0x614>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    343a:	0a07      	lsrs	r7, r0, #8
    343c:	2f03      	cmp	r7, #3
    343e:	f000 80ff 	beq.w	3640 <isr+0x830>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    3442:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    3444:	0c12      	lsrs	r2, r2, #16
    3446:	4293      	cmp	r3, r2
    3448:	bf28      	it	cs
    344a:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    344c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    3450:	f000 80e7 	beq.w	3622 <isr+0x812>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    3454:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    3458:	f000 80c9 	beq.w	35ee <isr+0x7de>
    345c:	4f7b      	ldr	r7, [pc, #492]	; (364c <isr+0x83c>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    345e:	461a      	mov	r2, r3
    3460:	9301      	str	r3, [sp, #4]
    3462:	4638      	mov	r0, r7
    3464:	f000 fd56 	bl	3f14 <memcpy>
    3468:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    346a:	f027 021f 	bic.w	r2, r7, #31
    346e:	4977      	ldr	r1, [pc, #476]	; (364c <isr+0x83c>)
	uint32_t end_addr = (uint32_t)addr + size;
    3470:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    3472:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    3476:	4876      	ldr	r0, [pc, #472]	; (3650 <isr+0x840>)
    3478:	6002      	str	r2, [r0, #0]
		location += 32;
    347a:	3220      	adds	r2, #32
	} while (location < end_addr);
    347c:	4297      	cmp	r7, r2
    347e:	d8fa      	bhi.n	3476 <isr+0x666>
	asm("dsb");
    3480:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3484:	f3bf 8f6f 	isb	sy
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    3488:	b303      	cbz	r3, 34cc <isr+0x6bc>
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    348a:	041b      	lsls	r3, r3, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    348c:	4a71      	ldr	r2, [pc, #452]	; (3654 <isr+0x844>)
    348e:	2701      	movs	r7, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    3490:	2000      	movs	r0, #0
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3496:	64b2      	str	r2, [r6, #72]	; 0x48
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3498:	6017      	str	r7, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    349a:	6053      	str	r3, [r2, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    349c:	64f0      	str	r0, [r6, #76]	; 0x4c
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    349e:	4b6e      	ldr	r3, [pc, #440]	; (3658 <isr+0x848>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    34a0:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    34a4:	f503 5780 	add.w	r7, r3, #4096	; 0x1000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    34a8:	6091      	str	r1, [r2, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    34aa:	f503 5e00 	add.w	lr, r3, #8192	; 0x2000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    34ae:	60d3      	str	r3, [r2, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    34b0:	f440 3180 	orr.w	r1, r0, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    34b4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    34b8:	6117      	str	r7, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    34ba:	f8c2 e014 	str.w	lr, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    34be:	6193      	str	r3, [r2, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    34c0:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    34c4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    34c8:	2b00      	cmp	r3, #0
    34ca:	d1fb      	bne.n	34c4 <isr+0x6b4>
	}
	endpoint0_transfer_ack.next = 1;
    34cc:	4b63      	ldr	r3, [pc, #396]	; (365c <isr+0x84c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    34ce:	2200      	movs	r2, #0
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    34d0:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    34d2:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    34d4:	60b3      	str	r3, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    34d6:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    34d8:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    34da:	60f2      	str	r2, [r6, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    34dc:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    34e0:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    34e4:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    34e6:	ea41 0300 	orr.w	r3, r1, r0
    34ea:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    34ee:	f8c9 2000 	str.w	r2, [r9]
	while (USB1_ENDPTPRIME) ;
    34f2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    34f6:	2b00      	cmp	r3, #0
    34f8:	d1fb      	bne.n	34f2 <isr+0x6e2>
    34fa:	e51a      	b.n	2f32 <isr+0x122>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    34fc:	07cf      	lsls	r7, r1, #31
    34fe:	f57f ace6 	bpl.w	2ece <isr+0xbe>
    3502:	e4e2      	b.n	2eca <isr+0xba>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    3504:	4f56      	ldr	r7, [pc, #344]	; (3660 <isr+0x850>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3506:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    350a:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    350c:	4955      	ldr	r1, [pc, #340]	; (3664 <isr+0x854>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    350e:	4b51      	ldr	r3, [pc, #324]	; (3654 <isr+0x844>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    3510:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3512:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3516:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    3518:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    351a:	4953      	ldr	r1, [pc, #332]	; (3668 <isr+0x858>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    351c:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    3520:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3522:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    3526:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    352a:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    352c:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3530:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3534:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    3538:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    353c:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    353e:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3542:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3544:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    3546:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    354a:	2b00      	cmp	r3, #0
    354c:	d1fb      	bne.n	3546 <isr+0x736>
	}
	endpoint0_transfer_ack.next = 1;
    354e:	4a43      	ldr	r2, [pc, #268]	; (365c <isr+0x84c>)
    3550:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3552:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3556:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3558:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    355a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    355e:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3560:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3562:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3566:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    356a:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    356c:	ea41 0300 	orr.w	r3, r1, r0
    3570:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3574:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    3578:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    357c:	2b00      	cmp	r3, #0
    357e:	d1fb      	bne.n	3578 <isr+0x768>
    3580:	e4d7      	b.n	2f32 <isr+0x122>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    3582:	4837      	ldr	r0, [pc, #220]	; (3660 <isr+0x850>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    3584:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    3588:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    358a:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    358c:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    358e:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    3590:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    3592:	f47f ad2f 	bne.w	2ff4 <isr+0x1e4>
    3596:	b281      	uxth	r1, r0
    3598:	2900      	cmp	r1, #0
    359a:	f47f ad2b 	bne.w	2ff4 <isr+0x1e4>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    359e:	4932      	ldr	r1, [pc, #200]	; (3668 <isr+0x858>)
    35a0:	4c32      	ldr	r4, [pc, #200]	; (366c <isr+0x85c>)
    35a2:	c903      	ldmia	r1, {r0, r1}
    35a4:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    35a6:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    35a8:	6020      	str	r0, [r4, #0]
    35aa:	80a1      	strh	r1, [r4, #4]
    35ac:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    35ae:	f47f ad21 	bne.w	2ff4 <isr+0x1e4>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    35b2:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    35b4:	482e      	ldr	r0, [pc, #184]	; (3670 <isr+0x860>)
    35b6:	7801      	ldrb	r1, [r0, #0]
    35b8:	f041 0104 	orr.w	r1, r1, #4
    35bc:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    35be:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    35c2:	0608      	lsls	r0, r1, #24
    35c4:	d406      	bmi.n	35d4 <isr+0x7c4>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    35c6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    35ca:	2080      	movs	r0, #128	; 0x80
    35cc:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    35d0:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    35d4:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    35d6:	4a27      	ldr	r2, [pc, #156]	; (3674 <isr+0x864>)
    35d8:	2150      	movs	r1, #80	; 0x50
    35da:	7011      	strb	r1, [r2, #0]
    35dc:	e50a      	b.n	2ff4 <isr+0x1e4>
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    35de:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
			ep->last_transfer = NULL;
    35e2:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
    35e6:	e553      	b.n	3090 <isr+0x280>
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    35e8:	633b      	str	r3, [r7, #48]	; 0x30
			ep->last_transfer = NULL;
    35ea:	637b      	str	r3, [r7, #52]	; 0x34
    35ec:	e524      	b.n	3038 <isr+0x228>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    35ee:	4822      	ldr	r0, [pc, #136]	; (3678 <isr+0x868>)
					memcpy(usb_descriptor_buffer, src, datalen);
    35f0:	461a      	mov	r2, r3
    35f2:	4f16      	ldr	r7, [pc, #88]	; (364c <isr+0x83c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    35f4:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    35f8:	4920      	ldr	r1, [pc, #128]	; (367c <isr+0x86c>)
    35fa:	4821      	ldr	r0, [pc, #132]	; (3680 <isr+0x870>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    35fc:	9301      	str	r3, [sp, #4]
    35fe:	f1be 0f00 	cmp.w	lr, #0
    3602:	bf08      	it	eq
    3604:	4601      	moveq	r1, r0
    3606:	4638      	mov	r0, r7
    3608:	f000 fc84 	bl	3f14 <memcpy>
					usb_descriptor_buffer[1] = 7;
    360c:	2207      	movs	r2, #7
    360e:	9b01      	ldr	r3, [sp, #4]
    3610:	707a      	strb	r2, [r7, #1]
    3612:	e72a      	b.n	346a <isr+0x65a>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    3614:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    3618:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    361c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    3620:	e4dd      	b.n	2fde <isr+0x1ce>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    3622:	4815      	ldr	r0, [pc, #84]	; (3678 <isr+0x868>)
					memcpy(usb_descriptor_buffer, src, datalen);
    3624:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    3626:	4916      	ldr	r1, [pc, #88]	; (3680 <isr+0x870>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    3628:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    362a:	4814      	ldr	r0, [pc, #80]	; (367c <isr+0x86c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    362c:	9301      	str	r3, [sp, #4]
    362e:	2f00      	cmp	r7, #0
    3630:	bf08      	it	eq
    3632:	4601      	moveq	r1, r0
    3634:	4805      	ldr	r0, [pc, #20]	; (364c <isr+0x83c>)
    3636:	f000 fc6d 	bl	3f14 <memcpy>
    363a:	4f04      	ldr	r7, [pc, #16]	; (364c <isr+0x83c>)
    363c:	9b01      	ldr	r3, [sp, #4]
    363e:	e714      	b.n	346a <isr+0x65a>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    3640:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    3642:	780b      	ldrb	r3, [r1, #0]
    3644:	4293      	cmp	r3, r2
    3646:	bf28      	it	cs
    3648:	4613      	movcs	r3, r2
    364a:	e703      	b.n	3454 <isr+0x644>
    364c:	20200000 	.word	0x20200000
    3650:	e000ef70 	.word	0xe000ef70
    3654:	20003000 	.word	0x20003000
    3658:	20201000 	.word	0x20201000
    365c:	20003020 	.word	0x20003020
    3660:	20001a90 	.word	0x20001a90
    3664:	00070080 	.word	0x00070080
    3668:	20001aa0 	.word	0x20001aa0
    366c:	20004280 	.word	0x20004280
    3670:	20001a7c 	.word	0x20001a7c
    3674:	20001a8c 	.word	0x20001a8c
    3678:	20001a84 	.word	0x20001a84
    367c:	60001a14 	.word	0x60001a14
    3680:	60001a58 	.word	0x60001a58

00003684 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3684:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3686:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    368a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    368e:	bf14      	ite	ne
    3690:	2700      	movne	r7, #0
    3692:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3696:	2a02      	cmp	r2, #2
    3698:	d901      	bls.n	369e <usb_config_rx+0x1a>
    369a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    369e:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    36a2:	f8df 9040 	ldr.w	r9, [pc, #64]	; 36e4 <usb_config_rx+0x60>
    36a6:	460d      	mov	r5, r1
    36a8:	4604      	mov	r4, r0
    36aa:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    36ae:	2100      	movs	r1, #0
    36b0:	2240      	movs	r2, #64	; 0x40
    36b2:	4698      	mov	r8, r3
    36b4:	4630      	mov	r0, r6
    36b6:	f001 fa77 	bl	4ba8 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    36ba:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    36bc:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    36c0:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    36c4:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    36c8:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    36ca:	f1b8 0f00 	cmp.w	r8, #0
    36ce:	d0e4      	beq.n	369a <usb_config_rx+0x16>
    36d0:	4b03      	ldr	r3, [pc, #12]	; (36e0 <usb_config_rx+0x5c>)
    36d2:	40a0      	lsls	r0, r4
    36d4:	681c      	ldr	r4, [r3, #0]
    36d6:	4320      	orrs	r0, r4
    36d8:	6018      	str	r0, [r3, #0]
    36da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    36de:	bf00      	nop
    36e0:	20001a78 	.word	0x20001a78
    36e4:	20004000 	.word	0x20004000

000036e8 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    36e8:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    36ea:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    36ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    36f2:	bf14      	ite	ne
    36f4:	2700      	movne	r7, #0
    36f6:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    36fa:	2a02      	cmp	r2, #2
    36fc:	d901      	bls.n	3702 <usb_config_tx+0x1a>
    36fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    3702:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    3704:	01c5      	lsls	r5, r0, #7
    3706:	f8df 9044 	ldr.w	r9, [pc, #68]	; 374c <usb_config_tx+0x64>
    370a:	4688      	mov	r8, r1
    370c:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    370e:	2100      	movs	r1, #0
    3710:	4604      	mov	r4, r0
    3712:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    3714:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    3718:	4650      	mov	r0, sl
    371a:	f001 fa45 	bl	4ba8 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    371e:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    3720:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    3724:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    3728:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    372c:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    3730:	2e00      	cmp	r6, #0
    3732:	d0e4      	beq.n	36fe <usb_config_tx+0x16>
    3734:	f104 0010 	add.w	r0, r4, #16
    3738:	4b03      	ldr	r3, [pc, #12]	; (3748 <usb_config_tx+0x60>)
    373a:	4082      	lsls	r2, r0
    373c:	6818      	ldr	r0, [r3, #0]
    373e:	4302      	orrs	r2, r0
    3740:	601a      	str	r2, [r3, #0]
    3742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3746:	bf00      	nop
    3748:	20001a78 	.word	0x20001a78
    374c:	20004000 	.word	0x20004000

00003750 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    3750:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    3752:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    3754:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    3756:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    375a:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    375c:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    375e:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    3760:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    3764:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    3768:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    376c:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    3770:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    3772:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    3774:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    3776:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    3778:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    377a:	bcf0      	pop	{r4, r5, r6, r7}
    377c:	4770      	bx	lr
    377e:	bf00      	nop

00003780 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3780:	1e83      	subs	r3, r0, #2
    3782:	2b02      	cmp	r3, #2
    3784:	d900      	bls.n	3788 <usb_transmit+0x8>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    3786:	4770      	bx	lr
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    3788:	4a1d      	ldr	r2, [pc, #116]	; (3800 <usb_transmit+0x80>)
	uint32_t mask = 1 << (endpoint_number + 16);
    378a:	f100 0310 	add.w	r3, r0, #16
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    378e:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    3790:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
	uint32_t mask = 1 << (endpoint_number + 16);
    3794:	2701      	movs	r7, #1
    3796:	409f      	lsls	r7, r3
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    3798:	6b83      	ldr	r3, [r0, #56]	; 0x38
    379a:	b11b      	cbz	r3, 37a4 <usb_transmit+0x24>
		transfer->status |= (1<<15);
    379c:	684b      	ldr	r3, [r1, #4]
    379e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    37a2:	604b      	str	r3, [r1, #4]
	}
	__disable_irq();
    37a4:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    37a6:	6b42      	ldr	r2, [r0, #52]	; 0x34
	if (last) {
    37a8:	b1da      	cbz	r2, 37e2 <usb_transmit+0x62>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    37aa:	4b16      	ldr	r3, [pc, #88]	; (3804 <usb_transmit+0x84>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    37ac:	6011      	str	r1, [r2, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    37ae:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
    37b2:	4217      	tst	r7, r2
    37b4:	d11f      	bne.n	37f6 <usb_transmit+0x76>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    37b6:	4c14      	ldr	r4, [pc, #80]	; (3808 <usb_transmit+0x88>)
    37b8:	6826      	ldr	r6, [r4, #0]
    37ba:	e004      	b.n	37c6 <usb_transmit+0x46>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    37bc:	6822      	ldr	r2, [r4, #0]
    37be:	1b92      	subs	r2, r2, r6
    37c0:	f5b2 6f16 	cmp.w	r2, #2400	; 0x960
    37c4:	d20b      	bcs.n	37de <usb_transmit+0x5e>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    37c6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    37ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    37ce:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    37d2:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    37d6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    37da:	0452      	lsls	r2, r2, #17
    37dc:	d5ee      	bpl.n	37bc <usb_transmit+0x3c>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    37de:	422f      	tst	r7, r5
    37e0:	d109      	bne.n	37f6 <usb_transmit+0x76>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    37e2:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    37e4:	4a07      	ldr	r2, [pc, #28]	; (3804 <usb_transmit+0x84>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    37e6:	6081      	str	r1, [r0, #8]
	endpoint->status = 0;
    37e8:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    37ea:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    37ee:	431f      	orrs	r7, r3
    37f0:	f8c2 71b0 	str.w	r7, [r2, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    37f4:	6301      	str	r1, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    37f6:	6341      	str	r1, [r0, #52]	; 0x34
	__enable_irq();
    37f8:	b662      	cpsie	i
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    37fa:	bcf0      	pop	{r4, r5, r6, r7}
    37fc:	4770      	bx	lr
    37fe:	bf00      	nop
    3800:	20004040 	.word	0x20004040
    3804:	402e0000 	.word	0x402e0000
    3808:	e0001004 	.word	0xe0001004

0000380c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    380c:	1e83      	subs	r3, r0, #2
    380e:	2b02      	cmp	r3, #2
    3810:	d900      	bls.n	3814 <usb_receive+0x8>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    3812:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    3814:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    3816:	4d1c      	ldr	r5, [pc, #112]	; (3888 <usb_receive+0x7c>)
	uint32_t mask = 1 << endpoint_number;
    3818:	2301      	movs	r3, #1
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    381a:	eb05 15c0 	add.w	r5, r5, r0, lsl #7
	uint32_t mask = 1 << endpoint_number;
    381e:	fa03 f000 	lsl.w	r0, r3, r0
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    3822:	6bab      	ldr	r3, [r5, #56]	; 0x38
    3824:	b11b      	cbz	r3, 382e <usb_receive+0x22>
		transfer->status |= (1<<15);
    3826:	684b      	ldr	r3, [r1, #4]
    3828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    382c:	604b      	str	r3, [r1, #4]
	}
	__disable_irq();
    382e:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    3830:	6b6a      	ldr	r2, [r5, #52]	; 0x34
	if (last) {
    3832:	b1da      	cbz	r2, 386c <usb_receive+0x60>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    3834:	4b15      	ldr	r3, [pc, #84]	; (388c <usb_receive+0x80>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    3836:	6011      	str	r1, [r2, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    3838:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
    383c:	4210      	tst	r0, r2
    383e:	d11f      	bne.n	3880 <usb_receive+0x74>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    3840:	4c13      	ldr	r4, [pc, #76]	; (3890 <usb_receive+0x84>)
    3842:	6827      	ldr	r7, [r4, #0]
    3844:	e004      	b.n	3850 <usb_receive+0x44>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3846:	6822      	ldr	r2, [r4, #0]
    3848:	1bd2      	subs	r2, r2, r7
    384a:	f5b2 6f16 	cmp.w	r2, #2400	; 0x960
    384e:	d20b      	bcs.n	3868 <usb_receive+0x5c>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    3850:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    3854:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    3858:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    385c:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3860:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    3864:	0452      	lsls	r2, r2, #17
    3866:	d5ee      	bpl.n	3846 <usb_receive+0x3a>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    3868:	4230      	tst	r0, r6
    386a:	d109      	bne.n	3880 <usb_receive+0x74>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    386c:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    386e:	4a07      	ldr	r2, [pc, #28]	; (388c <usb_receive+0x80>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    3870:	60a9      	str	r1, [r5, #8]
	endpoint->status = 0;
    3872:	60eb      	str	r3, [r5, #12]
	USB1_ENDPTPRIME |= epmask;
    3874:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3878:	4318      	orrs	r0, r3
    387a:	f8c2 01b0 	str.w	r0, [r2, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    387e:	6329      	str	r1, [r5, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    3880:	6369      	str	r1, [r5, #52]	; 0x34
	__enable_irq();
    3882:	b662      	cpsie	i
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    3884:	bcf0      	pop	{r4, r5, r6, r7}
    3886:	4770      	bx	lr
    3888:	20004000 	.word	0x20004000
    388c:	402e0000 	.word	0x402e0000
    3890:	e0001004 	.word	0xe0001004

00003894 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    3894:	4a2b      	ldr	r2, [pc, #172]	; (3944 <usb_init_serialnumber+0xb0>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3896:	4b2c      	ldr	r3, [pc, #176]	; (3948 <usb_init_serialnumber+0xb4>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    3898:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    389c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    38a0:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    38a2:	b500      	push	{lr}
    38a4:	b085      	sub	sp, #20
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    38a6:	d802      	bhi.n	38ae <usb_init_serialnumber+0x1a>
    38a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    38ac:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    38ae:	220a      	movs	r2, #10
    38b0:	a901      	add	r1, sp, #4
    38b2:	f000 fbc9 	bl	4048 <ultoa>
	for (i=0; i<10; i++) {
		char c = buf[i];
    38b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    38ba:	4b24      	ldr	r3, [pc, #144]	; (394c <usb_init_serialnumber+0xb8>)
		if (!c) break;
    38bc:	b352      	cbz	r2, 3914 <usb_init_serialnumber+0x80>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    38be:	f89d 1005 	ldrb.w	r1, [sp, #5]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    38c2:	805a      	strh	r2, [r3, #2]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    38c4:	b369      	cbz	r1, 3922 <usb_init_serialnumber+0x8e>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    38c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    38ca:	8099      	strh	r1, [r3, #4]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    38cc:	b35a      	cbz	r2, 3926 <usb_init_serialnumber+0x92>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    38ce:	f89d 1007 	ldrb.w	r1, [sp, #7]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    38d2:	80da      	strh	r2, [r3, #6]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    38d4:	b349      	cbz	r1, 392a <usb_init_serialnumber+0x96>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    38d6:	f89d 2008 	ldrb.w	r2, [sp, #8]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    38da:	8119      	strh	r1, [r3, #8]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    38dc:	b33a      	cbz	r2, 392e <usb_init_serialnumber+0x9a>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    38de:	f89d 1009 	ldrb.w	r1, [sp, #9]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    38e2:	815a      	strh	r2, [r3, #10]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    38e4:	b329      	cbz	r1, 3932 <usb_init_serialnumber+0x9e>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    38e6:	f89d 200a 	ldrb.w	r2, [sp, #10]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    38ea:	8199      	strh	r1, [r3, #12]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    38ec:	b31a      	cbz	r2, 3936 <usb_init_serialnumber+0xa2>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    38ee:	f89d 100b 	ldrb.w	r1, [sp, #11]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    38f2:	81da      	strh	r2, [r3, #14]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    38f4:	b309      	cbz	r1, 393a <usb_init_serialnumber+0xa6>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    38f6:	f89d 200c 	ldrb.w	r2, [sp, #12]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    38fa:	8219      	strh	r1, [r3, #16]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    38fc:	b14a      	cbz	r2, 3912 <usb_init_serialnumber+0x7e>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    38fe:	f89d 100d 	ldrb.w	r1, [sp, #13]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3902:	825a      	strh	r2, [r3, #18]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    3904:	b1d9      	cbz	r1, 393e <usb_init_serialnumber+0xaa>
    3906:	2216      	movs	r2, #22
		usb_string_serial_number_default.wString[i] = c;
    3908:	8299      	strh	r1, [r3, #20]
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    390a:	701a      	strb	r2, [r3, #0]
}
    390c:	b005      	add	sp, #20
    390e:	f85d fb04 	ldr.w	pc, [sp], #4

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3912:	2208      	movs	r2, #8
    3914:	3201      	adds	r2, #1
    3916:	0052      	lsls	r2, r2, #1
    3918:	b2d2      	uxtb	r2, r2
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    391a:	701a      	strb	r2, [r3, #0]
}
    391c:	b005      	add	sp, #20
    391e:	f85d fb04 	ldr.w	pc, [sp], #4

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3922:	2201      	movs	r2, #1
    3924:	e7f6      	b.n	3914 <usb_init_serialnumber+0x80>
    3926:	2202      	movs	r2, #2
    3928:	e7f4      	b.n	3914 <usb_init_serialnumber+0x80>
    392a:	2203      	movs	r2, #3
    392c:	e7f2      	b.n	3914 <usb_init_serialnumber+0x80>
    392e:	2204      	movs	r2, #4
    3930:	e7f0      	b.n	3914 <usb_init_serialnumber+0x80>
    3932:	2205      	movs	r2, #5
    3934:	e7ee      	b.n	3914 <usb_init_serialnumber+0x80>
    3936:	2206      	movs	r2, #6
    3938:	e7ec      	b.n	3914 <usb_init_serialnumber+0x80>
    393a:	2207      	movs	r2, #7
    393c:	e7ea      	b.n	3914 <usb_init_serialnumber+0x80>
    393e:	2209      	movs	r2, #9
    3940:	e7e8      	b.n	3914 <usb_init_serialnumber+0x80>
    3942:	bf00      	nop
    3944:	401f4400 	.word	0x401f4400
    3948:	0098967f 	.word	0x0098967f
    394c:	200006cc 	.word	0x200006cc

00003950 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    3950:	4b1e      	ldr	r3, [pc, #120]	; (39cc <usb_serial_flush_callback+0x7c>)
    3952:	781a      	ldrb	r2, [r3, #0]
    3954:	b95a      	cbnz	r2, 396e <usb_serial_flush_callback+0x1e>
    3956:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    395a:	4a1d      	ldr	r2, [pc, #116]	; (39d0 <usb_serial_flush_callback+0x80>)
    395c:	7812      	ldrb	r2, [r2, #0]
    395e:	b132      	cbz	r2, 396e <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    3960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    3964:	4d1b      	ldr	r5, [pc, #108]	; (39d4 <usb_serial_flush_callback+0x84>)
    3966:	882a      	ldrh	r2, [r5, #0]
    3968:	b912      	cbnz	r2, 3970 <usb_serial_flush_callback+0x20>
    396a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    396e:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    3970:	4e19      	ldr	r6, [pc, #100]	; (39d8 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    3972:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    3976:	4f19      	ldr	r7, [pc, #100]	; (39dc <usb_serial_flush_callback+0x8c>)
    3978:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    397a:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    397c:	4c18      	ldr	r4, [pc, #96]	; (39e0 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    397e:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3982:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3986:	4638      	mov	r0, r7
    3988:	4621      	mov	r1, r4
    398a:	f7ff fee1 	bl	3750 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    398e:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3992:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    3996:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    399a:	4b12      	ldr	r3, [pc, #72]	; (39e4 <usb_serial_flush_callback+0x94>)
    399c:	6019      	str	r1, [r3, #0]
		location += 32;
    399e:	3120      	adds	r1, #32
	} while (location < end_addr);
    39a0:	428a      	cmp	r2, r1
    39a2:	d8fb      	bhi.n	399c <usb_serial_flush_callback+0x4c>
	asm("dsb");
    39a4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    39a8:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    39ac:	2004      	movs	r0, #4
    39ae:	4639      	mov	r1, r7
    39b0:	f7ff fee6 	bl	3780 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    39b4:	7833      	ldrb	r3, [r6, #0]
    39b6:	4a08      	ldr	r2, [pc, #32]	; (39d8 <usb_serial_flush_callback+0x88>)
    39b8:	3301      	adds	r3, #1
    39ba:	b2db      	uxtb	r3, r3
    39bc:	2b03      	cmp	r3, #3
    39be:	bf88      	it	hi
    39c0:	2300      	movhi	r3, #0
    39c2:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    39c4:	2300      	movs	r3, #0
    39c6:	802b      	strh	r3, [r5, #0]
    39c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39cc:	20001abe 	.word	0x20001abe
    39d0:	20001aa8 	.word	0x20001aa8
    39d4:	20001bf0 	.word	0x20001bf0
    39d8:	20001abf 	.word	0x20001abf
    39dc:	20001c00 	.word	0x20001c00
    39e0:	20200060 	.word	0x20200060
    39e4:	e000ef70 	.word	0xe000ef70

000039e8 <rx_event>:
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    39e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    39ec:	4e49      	ldr	r6, [pc, #292]	; (3b14 <rx_event+0x12c>)
    39ee:	6844      	ldr	r4, [r0, #4]
    39f0:	8837      	ldrh	r7, [r6, #0]
    39f2:	f3c4 440e 	ubfx	r4, r4, #16, #15
	int i = t->callback_param;
    39f6:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    39f8:	1b3c      	subs	r4, r7, r4
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    39fa:	2c00      	cmp	r4, #0
    39fc:	dd5f      	ble.n	3abe <rx_event+0xd6>
		// received a packet with data
		uint32_t head = rx_head;
    39fe:	4946      	ldr	r1, [pc, #280]	; (3b18 <rx_event+0x130>)
		if (head != rx_tail) {
    3a00:	4b46      	ldr	r3, [pc, #280]	; (3b1c <rx_event+0x134>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    3a02:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    3a04:	781b      	ldrb	r3, [r3, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    3a06:	b2d2      	uxtb	r2, r2
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    3a08:	4845      	ldr	r0, [pc, #276]	; (3b20 <rx_event+0x138>)
			uint32_t count = rx_count[ii];
    3a0a:	f8df 8134 	ldr.w	r8, [pc, #308]	; 3b40 <rx_event+0x158>
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    3a0e:	429a      	cmp	r2, r3
    3a10:	d007      	beq.n	3a22 <rx_event+0x3a>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    3a12:	f810 b002 	ldrb.w	fp, [r0, r2]
			uint32_t count = rx_count[ii];
    3a16:	f838 a01b 	ldrh.w	sl, [r8, fp, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    3a1a:	f5ca 7300 	rsb	r3, sl, #512	; 0x200
    3a1e:	429c      	cmp	r4, r3
    3a20:	d913      	bls.n	3a4a <rx_event+0x62>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    3a22:	3201      	adds	r2, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    3a24:	2300      	movs	r3, #0
    3a26:	4e3f      	ldr	r6, [pc, #252]	; (3b24 <rx_event+0x13c>)
		if (++head > RX_NUM) head = 0;
    3a28:	2a08      	cmp	r2, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    3a2a:	f828 4015 	strh.w	r4, [r8, r5, lsl #1]
		rx_index[i] = 0;
    3a2e:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
    3a32:	bf98      	it	ls
    3a34:	b2d3      	uxtbls	r3, r2
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    3a36:	4e3c      	ldr	r6, [pc, #240]	; (3b28 <rx_event+0x140>)
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    3a38:	bf88      	it	hi
    3a3a:	461a      	movhi	r2, r3
		rx_list[head] = i;
		rx_head = head;
    3a3c:	700b      	strb	r3, [r1, #0]
		rx_available += len;
    3a3e:	6833      	ldr	r3, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    3a40:	5485      	strb	r5, [r0, r2]
		rx_head = head;
		rx_available += len;
    3a42:	441c      	add	r4, r3
    3a44:	6034      	str	r4, [r6, #0]
    3a46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
    3a4a:	4b38      	ldr	r3, [pc, #224]	; (3b2c <rx_event+0x144>)
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    3a4c:	eb0a 204b 	add.w	r0, sl, fp, lsl #9
    3a50:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
    3a52:	eb03 2945 	add.w	r9, r3, r5, lsl #9
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    3a56:	4418      	add	r0, r3
    3a58:	4649      	mov	r1, r9
    3a5a:	f000 fa5b 	bl	3f14 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    3a5e:	4832      	ldr	r0, [pc, #200]	; (3b28 <rx_event+0x140>)
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3a60:	4933      	ldr	r1, [pc, #204]	; (3b30 <rx_event+0x148>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    3a62:	eb0a 0304 	add.w	r3, sl, r4
				rx_available += len;
    3a66:	6802      	ldr	r2, [r0, #0]
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3a68:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3a6c:	eb01 1a45 	add.w	sl, r1, r5, lsl #5
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3a70:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 3b3c <rx_event+0x154>
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    3a74:	4414      	add	r4, r2
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    3a76:	f828 301b 	strh.w	r3, [r8, fp, lsl #1]
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3a7a:	463a      	mov	r2, r7
    3a7c:	4649      	mov	r1, r9
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    3a7e:	6004      	str	r4, [r0, #0]
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3a80:	462b      	mov	r3, r5
    3a82:	4650      	mov	r0, sl
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3a84:	f8cc e000 	str.w	lr, [ip]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3a88:	f7ff fe62 	bl	3750 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    3a8c:	8832      	ldrh	r2, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3a8e:	f029 031f 	bic.w	r3, r9, #31
	uint32_t end_addr = (uint32_t)addr + size;
    3a92:	4491      	add	r9, r2
	asm volatile("": : :"memory");
	asm("dsb");
    3a94:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    3a98:	4a26      	ldr	r2, [pc, #152]	; (3b34 <rx_event+0x14c>)
    3a9a:	6013      	str	r3, [r2, #0]
		location += 32;
    3a9c:	3320      	adds	r3, #32
	} while (location < end_addr);
    3a9e:	4599      	cmp	r9, r3
    3aa0:	d8fb      	bhi.n	3a9a <rx_event+0xb2>
	asm("dsb");
    3aa2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3aa6:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    3aaa:	2003      	movs	r0, #3
    3aac:	4651      	mov	r1, sl
    3aae:	f7ff fead 	bl	380c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    3ab2:	4b21      	ldr	r3, [pc, #132]	; (3b38 <rx_event+0x150>)
    3ab4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3ab8:	601a      	str	r2, [r3, #0]
    3aba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    3abe:	491b      	ldr	r1, [pc, #108]	; (3b2c <rx_event+0x144>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3ac0:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3ac4:	4b1a      	ldr	r3, [pc, #104]	; (3b30 <rx_event+0x148>)
    3ac6:	463a      	mov	r2, r7

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    3ac8:	eb01 2445 	add.w	r4, r1, r5, lsl #9
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3acc:	481b      	ldr	r0, [pc, #108]	; (3b3c <rx_event+0x154>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3ace:	eb03 1745 	add.w	r7, r3, r5, lsl #5
    3ad2:	462b      	mov	r3, r5
    3ad4:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3ad6:	f8c0 e000 	str.w	lr, [r0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3ada:	4638      	mov	r0, r7
    3adc:	f7ff fe38 	bl	3750 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    3ae0:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3ae2:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    3ae6:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    3ae8:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    3aec:	4a11      	ldr	r2, [pc, #68]	; (3b34 <rx_event+0x14c>)
    3aee:	6013      	str	r3, [r2, #0]
		location += 32;
    3af0:	3320      	adds	r3, #32
	} while (location < end_addr);
    3af2:	4299      	cmp	r1, r3
    3af4:	d8fb      	bhi.n	3aee <rx_event+0x106>
	asm("dsb");
    3af6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3afa:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    3afe:	2003      	movs	r0, #3
    3b00:	4639      	mov	r1, r7
    3b02:	f7ff fe83 	bl	380c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    3b06:	4b0c      	ldr	r3, [pc, #48]	; (3b38 <rx_event+0x150>)
    3b08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3b0c:	601a      	str	r2, [r3, #0]
    3b0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b12:	bf00      	nop
    3b14:	20001bee 	.word	0x20001bee
    3b18:	20001ac0 	.word	0x20001ac0
    3b1c:	20001be0 	.word	0x20001be0
    3b20:	20001be4 	.word	0x20001be4
    3b24:	20001aac 	.word	0x20001aac
    3b28:	20001bf4 	.word	0x20001bf4
    3b2c:	20202060 	.word	0x20202060
    3b30:	20001ae0 	.word	0x20001ae0
    3b34:	e000ef5c 	.word	0xe000ef5c
    3b38:	e000e10c 	.word	0xe000e10c
    3b3c:	e000e18c 	.word	0xe000e18c
    3b40:	20001c80 	.word	0x20001c80

00003b44 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    3b44:	4770      	bx	lr
    3b46:	bf00      	nop

00003b48 <usb_serial_configure>:
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    3b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    3b4c:	4b45      	ldr	r3, [pc, #276]	; (3c64 <usb_serial_configure+0x11c>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3b4e:	2100      	movs	r1, #0
    3b50:	f8df a14c 	ldr.w	sl, [pc, #332]	; 3ca0 <usb_serial_configure+0x158>
    3b54:	2280      	movs	r2, #128	; 0x80
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    3b56:	781b      	ldrb	r3, [r3, #0]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    3b58:	460c      	mov	r4, r1
    3b5a:	f8df 8148 	ldr.w	r8, [pc, #328]	; 3ca4 <usb_serial_configure+0x15c>
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3b5e:	460f      	mov	r7, r1
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    3b60:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3b62:	4841      	ldr	r0, [pc, #260]	; (3c68 <usb_serial_configure+0x120>)
    3b64:	4e41      	ldr	r6, [pc, #260]	; (3c6c <usb_serial_configure+0x124>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3b66:	f44f 3900 	mov.w	r9, #131072	; 0x20000
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    3b6a:	bf14      	ite	ne
    3b6c:	f44f 7300 	movne.w	r3, #512	; 0x200
    3b70:	2340      	moveq	r3, #64	; 0x40
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    3b72:	4d3f      	ldr	r5, [pc, #252]	; (3c70 <usb_serial_configure+0x128>)
    3b74:	f8aa 3000 	strh.w	r3, [sl]
    3b78:	f8a8 3000 	strh.w	r3, [r8]
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3b7c:	f001 f814 	bl	4ba8 <memset>
	tx_head = 0;
    3b80:	483c      	ldr	r0, [pc, #240]	; (3c74 <usb_serial_configure+0x12c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3b82:	4621      	mov	r1, r4
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    3b84:	4b3c      	ldr	r3, [pc, #240]	; (3c78 <usb_serial_configure+0x130>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3b86:	f44f 7280 	mov.w	r2, #256	; 0x100
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    3b8a:	7004      	strb	r4, [r0, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3b8c:	4630      	mov	r0, r6
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    3b8e:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3b90:	f001 f80a 	bl	4ba8 <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    3b94:	4939      	ldr	r1, [pc, #228]	; (3c7c <usb_serial_configure+0x134>)
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3b96:	4623      	mov	r3, r4
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    3b98:	4839      	ldr	r0, [pc, #228]	; (3c80 <usb_serial_configure+0x138>)
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3b9a:	4622      	mov	r2, r4
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    3b9c:	f8df e108 	ldr.w	lr, [pc, #264]	; 3ca8 <usb_serial_configure+0x160>
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    3ba0:	700c      	strb	r4, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3ba2:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    3ba4:	7004      	strb	r4, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3ba6:	2002      	movs	r0, #2
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    3ba8:	602c      	str	r4, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    3baa:	4d36      	ldr	r5, [pc, #216]	; (3c84 <usb_serial_configure+0x13c>)
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    3bac:	f8ce 4000 	str.w	r4, [lr]
    3bb0:	f8ce 4004 	str.w	r4, [lr, #4]
    3bb4:	f8ce 4008 	str.w	r4, [lr, #8]
    3bb8:	f8ce 400c 	str.w	r4, [lr, #12]
	memset(rx_index, 0, sizeof(rx_index));
    3bbc:	602c      	str	r4, [r5, #0]
    3bbe:	606c      	str	r4, [r5, #4]
    3bc0:	60ac      	str	r4, [r5, #8]
    3bc2:	60ec      	str	r4, [r5, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3bc4:	f7ff fd90 	bl	36e8 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    3bc8:	4622      	mov	r2, r4
    3bca:	f8b8 1000 	ldrh.w	r1, [r8]
    3bce:	2003      	movs	r0, #3
    3bd0:	4b2d      	ldr	r3, [pc, #180]	; (3c88 <usb_serial_configure+0x140>)
    3bd2:	f7ff fd57 	bl	3684 <usb_config_rx>
    3bd6:	4d2d      	ldr	r5, [pc, #180]	; (3c8c <usb_serial_configure+0x144>)
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    3bd8:	4623      	mov	r3, r4
    3bda:	f8ba 1000 	ldrh.w	r1, [sl]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCIMVAC = location;
    3bde:	4c2c      	ldr	r4, [pc, #176]	; (3c90 <usb_serial_configure+0x148>)
    3be0:	2201      	movs	r2, #1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3be2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3cac <usb_serial_configure+0x164>
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    3be6:	2004      	movs	r0, #4
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
    3be8:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 3cb0 <usb_serial_configure+0x168>
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    3bec:	f7ff fd7c 	bl	36e8 <usb_config_tx>
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3bf4:	f8b8 2000 	ldrh.w	r2, [r8]
    3bf8:	4629      	mov	r1, r5
    3bfa:	4630      	mov	r0, r6
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3bfc:	f8ca 3000 	str.w	r3, [sl]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3c00:	463b      	mov	r3, r7
    3c02:	f7ff fda5 	bl	3750 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    3c06:	f8b8 2000 	ldrh.w	r2, [r8]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3c0a:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    3c0e:	442a      	add	r2, r5
	asm volatile("": : :"memory");
	asm("dsb");
    3c10:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    3c14:	6023      	str	r3, [r4, #0]
		location += 32;
    3c16:	3320      	adds	r3, #32
	} while (location < end_addr);
    3c18:	429a      	cmp	r2, r3
    3c1a:	d8fb      	bhi.n	3c14 <usb_serial_configure+0xcc>
	asm("dsb");
    3c1c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3c20:	f3bf 8f6f 	isb	sy
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3c24:	3701      	adds	r7, #1
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    3c26:	4631      	mov	r1, r6
    3c28:	2003      	movs	r0, #3
    3c2a:	f505 7500 	add.w	r5, r5, #512	; 0x200
    3c2e:	f7ff fded 	bl	380c <usb_receive>
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3c32:	2f08      	cmp	r7, #8
    3c34:	f106 0620 	add.w	r6, r6, #32
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
    3c38:	f8cb 9000 	str.w	r9, [fp]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3c3c:	d1d8      	bne.n	3bf0 <usb_serial_configure+0xa8>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    3c3e:	4b15      	ldr	r3, [pc, #84]	; (3c94 <usb_serial_configure+0x14c>)
	USB1_GPTIMER0LD = microseconds - 1;
    3c40:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    3c42:	4815      	ldr	r0, [pc, #84]	; (3c98 <usb_serial_configure+0x150>)
	USB1_GPTIMER0CTRL = 0;
    3c44:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    3c46:	4c15      	ldr	r4, [pc, #84]	; (3c9c <usb_serial_configure+0x154>)
    3c48:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    3c4a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    3c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    3c52:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    3c56:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    3c5a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    3c5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c62:	bf00      	nop
    3c64:	20001a84 	.word	0x20001a84
    3c68:	20001c00 	.word	0x20001c00
    3c6c:	20001ae0 	.word	0x20001ae0
    3c70:	20001bf4 	.word	0x20001bf4
    3c74:	20001abf 	.word	0x20001abf
    3c78:	20001bf0 	.word	0x20001bf0
    3c7c:	20001ac0 	.word	0x20001ac0
    3c80:	20001be0 	.word	0x20001be0
    3c84:	20001aac 	.word	0x20001aac
    3c88:	000039e9 	.word	0x000039e9
    3c8c:	20202060 	.word	0x20202060
    3c90:	e000ef5c 	.word	0xe000ef5c
    3c94:	402e0000 	.word	0x402e0000
    3c98:	20001a74 	.word	0x20001a74
    3c9c:	00003951 	.word	0x00003951
    3ca0:	20001abc 	.word	0x20001abc
    3ca4:	20001bee 	.word	0x20001bee
    3ca8:	20001c80 	.word	0x20001c80
    3cac:	e000e18c 	.word	0xe000e18c
    3cb0:	e000e10c 	.word	0xe000e10c

00003cb4 <usb_serial_available>:
}

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    3cb4:	4b01      	ldr	r3, [pc, #4]	; (3cbc <usb_serial_available+0x8>)
    3cb6:	6818      	ldr	r0, [r3, #0]
}
    3cb8:	4770      	bx	lr
    3cba:	bf00      	nop
    3cbc:	20001bf4 	.word	0x20001bf4

00003cc0 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    3cc0:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3cc2:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3cc6:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3cc8:	7f43      	ldrb	r3, [r0, #29]
    3cca:	b933      	cbnz	r3, 3cda <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3ccc:	7f01      	ldrb	r1, [r0, #28]
    3cce:	2901      	cmp	r1, #1
    3cd0:	d008      	beq.n	3ce4 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    3cd2:	2903      	cmp	r1, #3
    3cd4:	d010      	beq.n	3cf8 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    3cd6:	2301      	movs	r3, #1
    3cd8:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3cda:	b902      	cbnz	r2, 3cde <EventResponder::triggerEventNotImmediate()+0x1e>
    3cdc:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    3cde:	f85d 4b04 	ldr.w	r4, [sp], #4
    3ce2:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3ce4:	4c11      	ldr	r4, [pc, #68]	; (3d2c <EventResponder::triggerEventNotImmediate()+0x6c>)
    3ce6:	6821      	ldr	r1, [r4, #0]
    3ce8:	b1a1      	cbz	r1, 3d14 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3cea:	4911      	ldr	r1, [pc, #68]	; (3d30 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3cec:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    3cee:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    3cf0:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3cf2:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    3cf4:	6158      	str	r0, [r3, #20]
    3cf6:	e7ee      	b.n	3cd6 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3cf8:	4c0e      	ldr	r4, [pc, #56]	; (3d34 <EventResponder::triggerEventNotImmediate()+0x74>)
    3cfa:	6821      	ldr	r1, [r4, #0]
    3cfc:	b181      	cbz	r1, 3d20 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3cfe:	490e      	ldr	r1, [pc, #56]	; (3d38 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3d00:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3d02:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    3d04:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3d06:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    3d08:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3d0a:	4b0c      	ldr	r3, [pc, #48]	; (3d3c <EventResponder::triggerEventNotImmediate()+0x7c>)
    3d0c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3d10:	6019      	str	r1, [r3, #0]
    3d12:	e7e0      	b.n	3cd6 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3d14:	4b06      	ldr	r3, [pc, #24]	; (3d30 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3d16:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    3d18:	6181      	str	r1, [r0, #24]
				firstYield = this;
    3d1a:	6020      	str	r0, [r4, #0]
				lastYield = this;
    3d1c:	6018      	str	r0, [r3, #0]
    3d1e:	e7da      	b.n	3cd6 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3d20:	4b05      	ldr	r3, [pc, #20]	; (3d38 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3d22:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    3d24:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    3d26:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    3d28:	6018      	str	r0, [r3, #0]
    3d2a:	e7ee      	b.n	3d0a <EventResponder::triggerEventNotImmediate()+0x4a>
    3d2c:	20001ca0 	.word	0x20001ca0
    3d30:	20001c9c 	.word	0x20001c9c
    3d34:	20001c94 	.word	0x20001c94
    3d38:	20001c98 	.word	0x20001c98
    3d3c:	e000ed04 	.word	0xe000ed04

00003d40 <pendablesrvreq_isr>:
	}
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
    3d40:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3d42:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    3d46:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3d48:	4c0c      	ldr	r4, [pc, #48]	; (3d7c <pendablesrvreq_isr+0x3c>)
    3d4a:	6823      	ldr	r3, [r4, #0]
		if (first) {
    3d4c:	b18b      	cbz	r3, 3d72 <pendablesrvreq_isr+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3d4e:	4e0c      	ldr	r6, [pc, #48]	; (3d80 <pendablesrvreq_isr+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3d50:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3d52:	695a      	ldr	r2, [r3, #20]
    3d54:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    3d56:	b17a      	cbz	r2, 3d78 <pendablesrvreq_isr+0x38>
				firstInterrupt->_prev = nullptr;
    3d58:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3d5a:	b901      	cbnz	r1, 3d5e <pendablesrvreq_isr+0x1e>
    3d5c:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3d5e:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    3d60:	4618      	mov	r0, r3
    3d62:	689b      	ldr	r3, [r3, #8]
    3d64:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3d66:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    3d6a:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3d6c:	6823      	ldr	r3, [r4, #0]
		if (first) {
    3d6e:	2b00      	cmp	r3, #0
    3d70:	d1ef      	bne.n	3d52 <pendablesrvreq_isr+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3d72:	b901      	cbnz	r1, 3d76 <pendablesrvreq_isr+0x36>
    3d74:	b662      	cpsie	i
    3d76:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3d78:	6032      	str	r2, [r6, #0]
    3d7a:	e7ee      	b.n	3d5a <pendablesrvreq_isr+0x1a>
    3d7c:	20001c94 	.word	0x20001c94
    3d80:	20001c98 	.word	0x20001c98

00003d84 <EventResponder::detachNoInterrupts()>:
}

// this detach must be called with interrupts disabled
void EventResponder::detachNoInterrupts()
{
	if (_type == EventTypeYield) {
    3d84:	7f03      	ldrb	r3, [r0, #28]
    3d86:	2b01      	cmp	r3, #1
    3d88:	d00f      	beq.n	3daa <EventResponder::detachNoInterrupts()+0x26>
			} else {
				lastYield = _prev;
			}
		}
		_type = EventTypeDetached;
	} else if (_type == EventTypeInterrupt) {
    3d8a:	2b03      	cmp	r3, #3
    3d8c:	d000      	beq.n	3d90 <EventResponder::detachNoInterrupts()+0xc>
    3d8e:	4770      	bx	lr
		if (_triggered) {
    3d90:	7f43      	ldrb	r3, [r0, #29]
    3d92:	b13b      	cbz	r3, 3da4 <EventResponder::detachNoInterrupts()+0x20>
			if (_prev) {
    3d94:	6983      	ldr	r3, [r0, #24]
				_prev->_next = _next;
    3d96:	6942      	ldr	r2, [r0, #20]
			}
		}
		_type = EventTypeDetached;
	} else if (_type == EventTypeInterrupt) {
		if (_triggered) {
			if (_prev) {
    3d98:	b1d3      	cbz	r3, 3dd0 <EventResponder::detachNoInterrupts()+0x4c>
				_prev->_next = _next;
    3d9a:	615a      	str	r2, [r3, #20]
    3d9c:	6942      	ldr	r2, [r0, #20]
			} else {
				firstInterrupt = _next;
			}
			if (_next) {
    3d9e:	b96a      	cbnz	r2, 3dbc <EventResponder::detachNoInterrupts()+0x38>
				_next->_prev = _prev;
			} else {
				lastInterrupt = _prev;
    3da0:	4a0e      	ldr	r2, [pc, #56]	; (3ddc <EventResponder::detachNoInterrupts()+0x58>)
    3da2:	6013      	str	r3, [r2, #0]
				_next->_prev = _prev;
			} else {
				lastYield = _prev;
			}
		}
		_type = EventTypeDetached;
    3da4:	2300      	movs	r3, #0
    3da6:	7703      	strb	r3, [r0, #28]
    3da8:	4770      	bx	lr

// this detach must be called with interrupts disabled
void EventResponder::detachNoInterrupts()
{
	if (_type == EventTypeYield) {
		if (_triggered) {
    3daa:	7f43      	ldrb	r3, [r0, #29]
    3dac:	2b00      	cmp	r3, #0
    3dae:	d0f9      	beq.n	3da4 <EventResponder::detachNoInterrupts()+0x20>
			if (_prev) {
    3db0:	6983      	ldr	r3, [r0, #24]
				_prev->_next = _next;
    3db2:	6942      	ldr	r2, [r0, #20]
// this detach must be called with interrupts disabled
void EventResponder::detachNoInterrupts()
{
	if (_type == EventTypeYield) {
		if (_triggered) {
			if (_prev) {
    3db4:	b14b      	cbz	r3, 3dca <EventResponder::detachNoInterrupts()+0x46>
				_prev->_next = _next;
    3db6:	615a      	str	r2, [r3, #20]
    3db8:	6942      	ldr	r2, [r0, #20]
			} else {
				firstYield = _next;
			}
			if (_next) {
    3dba:	b11a      	cbz	r2, 3dc4 <EventResponder::detachNoInterrupts()+0x40>
				_prev->_next = _next;
			} else {
				firstInterrupt = _next;
			}
			if (_next) {
				_next->_prev = _prev;
    3dbc:	6193      	str	r3, [r2, #24]
				_next->_prev = _prev;
			} else {
				lastYield = _prev;
			}
		}
		_type = EventTypeDetached;
    3dbe:	2300      	movs	r3, #0
    3dc0:	7703      	strb	r3, [r0, #28]
    3dc2:	4770      	bx	lr
				firstYield = _next;
			}
			if (_next) {
				_next->_prev = _prev;
			} else {
				lastYield = _prev;
    3dc4:	4a06      	ldr	r2, [pc, #24]	; (3de0 <EventResponder::detachNoInterrupts()+0x5c>)
    3dc6:	6013      	str	r3, [r2, #0]
    3dc8:	e7ec      	b.n	3da4 <EventResponder::detachNoInterrupts()+0x20>
	if (_type == EventTypeYield) {
		if (_triggered) {
			if (_prev) {
				_prev->_next = _next;
			} else {
				firstYield = _next;
    3dca:	4906      	ldr	r1, [pc, #24]	; (3de4 <EventResponder::detachNoInterrupts()+0x60>)
    3dcc:	600a      	str	r2, [r1, #0]
    3dce:	e7f4      	b.n	3dba <EventResponder::detachNoInterrupts()+0x36>
	} else if (_type == EventTypeInterrupt) {
		if (_triggered) {
			if (_prev) {
				_prev->_next = _next;
			} else {
				firstInterrupt = _next;
    3dd0:	4905      	ldr	r1, [pc, #20]	; (3de8 <EventResponder::detachNoInterrupts()+0x64>)
    3dd2:	600a      	str	r2, [r1, #0]
			}
			if (_next) {
    3dd4:	2a00      	cmp	r2, #0
    3dd6:	d1f1      	bne.n	3dbc <EventResponder::detachNoInterrupts()+0x38>
    3dd8:	e7e2      	b.n	3da0 <EventResponder::detachNoInterrupts()+0x1c>
    3dda:	bf00      	nop
    3ddc:	20001c98 	.word	0x20001c98
    3de0:	20001c9c 	.word	0x20001c9c
    3de4:	20001ca0 	.word	0x20001ca0
    3de8:	20001c94 	.word	0x20001c94

00003dec <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3dec:	4a04      	ldr	r2, [pc, #16]	; (3e00 <systick_isr+0x14>)
    3dee:	4b05      	ldr	r3, [pc, #20]	; (3e04 <systick_isr+0x18>)
    3df0:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    3df2:	4a05      	ldr	r2, [pc, #20]	; (3e08 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3df4:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    3df6:	6813      	ldr	r3, [r2, #0]
    3df8:	3301      	adds	r3, #1
    3dfa:	6013      	str	r3, [r2, #0]
    3dfc:	4770      	bx	lr
    3dfe:	bf00      	nop
    3e00:	e0001004 	.word	0xe0001004
    3e04:	20001a54 	.word	0x20001a54
    3e08:	20001a5c 	.word	0x20001a5c

00003e0c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3e0c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3e0e:	f7fc f941 	bl	94 <setup>
	while (1) {
		loop();
    3e12:	f7fc f9d3 	bl	1bc <loop>
		yield();
    3e16:	f000 f805 	bl	3e24 <yield>
    3e1a:	e7fa      	b.n	3e12 <main+0x6>

00003e1c <operator new(unsigned int)>:
    3e1c:	f000 bbfc 	b.w	4618 <malloc>

00003e20 <operator delete(void*, unsigned int)>:
    3e20:	f000 bc02 	b.w	4628 <free>

00003e24 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    3e28:	4e32      	ldr	r6, [pc, #200]	; (3ef4 <yield+0xd0>)
    3e2a:	7833      	ldrb	r3, [r6, #0]
    3e2c:	b193      	cbz	r3, 3e54 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    3e2e:	4f32      	ldr	r7, [pc, #200]	; (3ef8 <yield+0xd4>)
    3e30:	783a      	ldrb	r2, [r7, #0]
    3e32:	b97a      	cbnz	r2, 3e54 <yield+0x30>
	running = 1;
    3e34:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    3e36:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    3e38:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    3e3a:	d437      	bmi.n	3eac <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    3e3c:	079a      	lsls	r2, r3, #30
    3e3e:	d419      	bmi.n	3e74 <yield+0x50>

	running = 0;
    3e40:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    3e42:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    3e44:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    3e46:	d505      	bpl.n	3e54 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    3e48:	4b2c      	ldr	r3, [pc, #176]	; (3efc <yield+0xd8>)
    3e4a:	681a      	ldr	r2, [r3, #0]
    3e4c:	b112      	cbz	r2, 3e54 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3e4e:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    3e52:	b10a      	cbz	r2, 3e58 <yield+0x34>
    3e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3e58:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    3e5c:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3e5e:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    3e60:	b11a      	cbz	r2, 3e6a <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    3e62:	4c27      	ldr	r4, [pc, #156]	; (3f00 <yield+0xdc>)
    3e64:	7821      	ldrb	r1, [r4, #0]
    3e66:	2900      	cmp	r1, #0
    3e68:	d02f      	beq.n	3eca <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3e6a:	2800      	cmp	r0, #0
    3e6c:	d1f2      	bne.n	3e54 <yield+0x30>
    3e6e:	b662      	cpsie	i
    3e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    3e74:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3f0c <yield+0xe8>
    3e78:	f898 2000 	ldrb.w	r2, [r8]
    3e7c:	2a00      	cmp	r2, #0
    3e7e:	d0df      	beq.n	3e40 <yield+0x1c>
    3e80:	2400      	movs	r4, #0
    3e82:	f8df 908c 	ldr.w	r9, [pc, #140]	; 3f10 <yield+0xec>
    3e86:	e005      	b.n	3e94 <yield+0x70>
    3e88:	3401      	adds	r4, #1
    3e8a:	f898 3000 	ldrb.w	r3, [r8]
    3e8e:	b2e4      	uxtb	r4, r4
    3e90:	42a3      	cmp	r3, r4
    3e92:	d913      	bls.n	3ebc <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    3e94:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    3e98:	682b      	ldr	r3, [r5, #0]
    3e9a:	4628      	mov	r0, r5
    3e9c:	691b      	ldr	r3, [r3, #16]
    3e9e:	4798      	blx	r3
    3ea0:	2800      	cmp	r0, #0
    3ea2:	d0f1      	beq.n	3e88 <yield+0x64>
    3ea4:	696b      	ldr	r3, [r5, #20]
    3ea6:	689b      	ldr	r3, [r3, #8]
    3ea8:	4798      	blx	r3
    3eaa:	e7ed      	b.n	3e88 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3eac:	f7ff ff02 	bl	3cb4 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    3eb0:	b9d0      	cbnz	r0, 3ee8 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    3eb2:	4b14      	ldr	r3, [pc, #80]	; (3f04 <yield+0xe0>)
    3eb4:	781b      	ldrb	r3, [r3, #0]
    3eb6:	b91b      	cbnz	r3, 3ec0 <yield+0x9c>
    3eb8:	7833      	ldrb	r3, [r6, #0]
    3eba:	e7bf      	b.n	3e3c <yield+0x18>
    3ebc:	7833      	ldrb	r3, [r6, #0]
    3ebe:	e7bf      	b.n	3e40 <yield+0x1c>
    3ec0:	7833      	ldrb	r3, [r6, #0]
    3ec2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    3ec6:	7033      	strb	r3, [r6, #0]
    3ec8:	e7b8      	b.n	3e3c <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3eca:	2601      	movs	r6, #1
		firstYield = first->_next;
    3ecc:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3ece:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    3ed0:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    3ed2:	b165      	cbz	r5, 3eee <yield+0xca>
			firstYield->_prev = nullptr;
    3ed4:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3ed6:	b900      	cbnz	r0, 3eda <yield+0xb6>
    3ed8:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3eda:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    3edc:	6893      	ldr	r3, [r2, #8]
    3ede:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3ee0:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    3ee2:	4798      	blx	r3
		runningFromYield = false;
    3ee4:	7025      	strb	r5, [r4, #0]
    3ee6:	e7b5      	b.n	3e54 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    3ee8:	f000 fb5a 	bl	45a0 <serialEvent()>
    3eec:	e7e1      	b.n	3eb2 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    3eee:	4b06      	ldr	r3, [pc, #24]	; (3f08 <yield+0xe4>)
    3ef0:	601d      	str	r5, [r3, #0]
    3ef2:	e7f0      	b.n	3ed6 <yield+0xb2>
    3ef4:	200006e2 	.word	0x200006e2
    3ef8:	20001ca5 	.word	0x20001ca5
    3efc:	20001ca0 	.word	0x20001ca0
    3f00:	20001ca4 	.word	0x20001ca4
    3f04:	60001aa6 	.word	0x60001aa6
    3f08:	20001c9c 	.word	0x20001c9c
    3f0c:	20001cc8 	.word	0x20001cc8
    3f10:	20001ca8 	.word	0x20001ca8

00003f14 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    3f14:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    3f16:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    3f1a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    3f1e:	d16d      	bne.n	3ffc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3f20:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    3f22:	d341      	bcc.n	3fa8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3f24:	f851 3b04 	ldr.w	r3, [r1], #4
    3f28:	f840 3b04 	str.w	r3, [r0], #4
    3f2c:	f851 3b04 	ldr.w	r3, [r1], #4
    3f30:	f840 3b04 	str.w	r3, [r0], #4
    3f34:	f851 3b04 	ldr.w	r3, [r1], #4
    3f38:	f840 3b04 	str.w	r3, [r0], #4
    3f3c:	f851 3b04 	ldr.w	r3, [r1], #4
    3f40:	f840 3b04 	str.w	r3, [r0], #4
    3f44:	f851 3b04 	ldr.w	r3, [r1], #4
    3f48:	f840 3b04 	str.w	r3, [r0], #4
    3f4c:	f851 3b04 	ldr.w	r3, [r1], #4
    3f50:	f840 3b04 	str.w	r3, [r0], #4
    3f54:	f851 3b04 	ldr.w	r3, [r1], #4
    3f58:	f840 3b04 	str.w	r3, [r0], #4
    3f5c:	f851 3b04 	ldr.w	r3, [r1], #4
    3f60:	f840 3b04 	str.w	r3, [r0], #4
    3f64:	f851 3b04 	ldr.w	r3, [r1], #4
    3f68:	f840 3b04 	str.w	r3, [r0], #4
    3f6c:	f851 3b04 	ldr.w	r3, [r1], #4
    3f70:	f840 3b04 	str.w	r3, [r0], #4
    3f74:	f851 3b04 	ldr.w	r3, [r1], #4
    3f78:	f840 3b04 	str.w	r3, [r0], #4
    3f7c:	f851 3b04 	ldr.w	r3, [r1], #4
    3f80:	f840 3b04 	str.w	r3, [r0], #4
    3f84:	f851 3b04 	ldr.w	r3, [r1], #4
    3f88:	f840 3b04 	str.w	r3, [r0], #4
    3f8c:	f851 3b04 	ldr.w	r3, [r1], #4
    3f90:	f840 3b04 	str.w	r3, [r0], #4
    3f94:	f851 3b04 	ldr.w	r3, [r1], #4
    3f98:	f840 3b04 	str.w	r3, [r0], #4
    3f9c:	f851 3b04 	ldr.w	r3, [r1], #4
    3fa0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3fa4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    3fa6:	d2bd      	bcs.n	3f24 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    3fa8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    3faa:	d311      	bcc.n	3fd0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3fac:	f851 3b04 	ldr.w	r3, [r1], #4
    3fb0:	f840 3b04 	str.w	r3, [r0], #4
    3fb4:	f851 3b04 	ldr.w	r3, [r1], #4
    3fb8:	f840 3b04 	str.w	r3, [r0], #4
    3fbc:	f851 3b04 	ldr.w	r3, [r1], #4
    3fc0:	f840 3b04 	str.w	r3, [r0], #4
    3fc4:	f851 3b04 	ldr.w	r3, [r1], #4
    3fc8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    3fcc:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    3fce:	d2ed      	bcs.n	3fac <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    3fd0:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    3fd2:	d305      	bcc.n	3fe0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    3fd4:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    3fd8:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    3fdc:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    3fde:	d2f9      	bcs.n	3fd4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    3fe0:	3204      	adds	r2, #4
	beq	.Ldone
    3fe2:	d008      	beq.n	3ff6 <memcpy+0xe2>

	lsls	r2, r2, #31
    3fe4:	07d2      	lsls	r2, r2, #31
	itt ne
    3fe6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3fe8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3fec:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    3ff0:	d301      	bcc.n	3ff6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    3ff2:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    3ff4:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3ff6:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3ff8:	4770      	bx	lr
    3ffa:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    3ffc:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    3ffe:	d313      	bcc.n	4028 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    4000:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    4002:	d08d      	beq.n	3f20 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    4004:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    4008:	d08a      	beq.n	3f20 <memcpy+0xc>

	rsb	r3, #4
    400a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    400e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    4010:	07db      	lsls	r3, r3, #31
	itt ne
    4012:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    4014:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    4018:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    401c:	d380      	bcc.n	3f20 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    401e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    4022:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    4026:	e77b      	b.n	3f20 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    4028:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    402a:	d3d9      	bcc.n	3fe0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    402c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    402e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    4032:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    4036:	d2f9      	bcs.n	402c <memcpy+0x118>

	ldrb	r3, [r1]
    4038:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    403a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    403c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    403e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    4040:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    4042:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    4044:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    4046:	4770      	bx	lr

00004048 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4048:	b4f0      	push	{r4, r5, r6, r7}
    404a:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    404c:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    404e:	4637      	mov	r7, r6
    4050:	e000      	b.n	4054 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    4052:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    4054:	fbb0 f3f2 	udiv	r3, r0, r2
    4058:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    405c:	f100 0437 	add.w	r4, r0, #55	; 0x37
    4060:	2809      	cmp	r0, #9
    4062:	f100 0030 	add.w	r0, r0, #48	; 0x30
    4066:	b2e4      	uxtb	r4, r4
    4068:	bf98      	it	ls
    406a:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    406c:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    406e:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    4072:	2b00      	cmp	r3, #0
    4074:	d1ed      	bne.n	4052 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    4076:	194a      	adds	r2, r1, r5
    4078:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    407a:	b14d      	cbz	r5, 4090 <ultoa+0x48>
    407c:	3301      	adds	r3, #1
		t = buf[j];
    407e:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    4082:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4084:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    4086:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4088:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    408a:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    408e:	dbf5      	blt.n	407c <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    4090:	4608      	mov	r0, r1
    4092:	bcf0      	pop	{r4, r5, r6, r7}
    4094:	4770      	bx	lr
    4096:	bf00      	nop

00004098 <pwm_init>:
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    4098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    409c:	4fdb      	ldr	r7, [pc, #876]	; (440c <pwm_init+0x374>)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    409e:	2300      	movs	r3, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    40a0:	f8df e380 	ldr.w	lr, [pc, #896]	; 4424 <pwm_init+0x38c>
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    40a4:	250f      	movs	r5, #15
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    40a6:	6fba      	ldr	r2, [r7, #120]	; 0x78

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    40a8:	f44f 4c70 	mov.w	ip, #61440	; 0xf000
    40ac:	49d8      	ldr	r1, [pc, #864]	; (4410 <pwm_init+0x378>)
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    40ae:	f44f 4660 	mov.w	r6, #57344	; 0xe000
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    40b2:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    40b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    40ba:	f248 20b8 	movw	r0, #33464	; 0x82b8
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    40be:	67ba      	str	r2, [r7, #120]	; 0x78
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    40c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    40c4:	ea42 0e0e 	orr.w	lr, r2, lr
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    40c8:	4ad2      	ldr	r2, [pc, #840]	; (4414 <pwm_init+0x37c>)
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    40ca:	f8c7 e080 	str.w	lr, [r7, #128]	; 0x80

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    40ce:	f241 0e01 	movw	lr, #4097	; 0x1001

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    40d2:	f8a1 c18c 	strh.w	ip, [r1, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    40d6:	f8a1 518e 	strh.w	r5, [r1, #398]	; 0x18e
	p->FFILT0 = 0;
    40da:	f8a1 3190 	strh.w	r3, [r1, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    40de:	f8b1 7188 	ldrh.w	r7, [r1, #392]	; 0x188
    40e2:	b2bf      	uxth	r7, r7
    40e4:	f047 07f0 	orr.w	r7, r7, #240	; 0xf0
    40e8:	f8a1 7188 	strh.w	r7, [r1, #392]	; 0x188
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    40ec:	f645 57c0 	movw	r7, #24000	; 0x5dc0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    40f0:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    40f2:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    40f4:	844b      	strh	r3, [r1, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    40f6:	860b      	strh	r3, [r1, #48]	; 0x30
		p->SM[i].INIT = 0;
    40f8:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    40fa:	814b      	strh	r3, [r1, #10]
		p->SM[i].VAL1 = 33464;
    40fc:	81c8      	strh	r0, [r1, #14]
		p->SM[i].VAL2 = 0;
    40fe:	824b      	strh	r3, [r1, #18]
		p->SM[i].VAL3 = 0;
    4100:	82cb      	strh	r3, [r1, #22]
		p->SM[i].VAL4 = 0;
    4102:	834b      	strh	r3, [r1, #26]
		p->SM[i].VAL5 = 0;
    4104:	83cb      	strh	r3, [r1, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4106:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4108:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    410a:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    410e:	f8a1 3090 	strh.w	r3, [r1, #144]	; 0x90
		p->SM[i].INIT = 0;
    4112:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    4114:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    4118:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    411c:	f8a1 3072 	strh.w	r3, [r1, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    4120:	f8a1 3076 	strh.w	r3, [r1, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    4124:	f8a1 307a 	strh.w	r3, [r1, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    4128:	f8a1 307e 	strh.w	r3, [r1, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    412c:	f8a2 6064 	strh.w	r6, [r2, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4130:	f8a2 4066 	strh.w	r4, [r2, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    4134:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    4138:	f8a1 30f0 	strh.w	r3, [r1, #240]	; 0xf0
		p->SM[i].INIT = 0;
    413c:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    4140:	f8a1 30ca 	strh.w	r3, [r1, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    4144:	f8a1 00ce 	strh.w	r0, [r1, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    4148:	f8a1 30d2 	strh.w	r3, [r1, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    414c:	f8a1 30d6 	strh.w	r3, [r1, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    4150:	f8a1 30da 	strh.w	r3, [r1, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    4154:	f8a1 30de 	strh.w	r3, [r1, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4158:	f8a2 60c4 	strh.w	r6, [r2, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    415c:	f8a2 40c6 	strh.w	r4, [r2, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    4160:	f8a1 3142 	strh.w	r3, [r1, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    4164:	f8a1 3150 	strh.w	r3, [r1, #336]	; 0x150
		p->SM[i].INIT = 0;
    4168:	f8a2 30c2 	strh.w	r3, [r2, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    416c:	f8a1 312a 	strh.w	r3, [r1, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    4170:	f8a1 012e 	strh.w	r0, [r1, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    4174:	f8a1 3132 	strh.w	r3, [r1, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    4178:	f8a1 3136 	strh.w	r3, [r1, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    417c:	f8a1 313a 	strh.w	r3, [r1, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    4180:	f8a1 313e 	strh.w	r3, [r1, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4184:	f8b1 2188 	ldrh.w	r2, [r1, #392]	; 0x188
    4188:	b292      	uxth	r2, r2
    418a:	432a      	orrs	r2, r5
    418c:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    4190:	f8b1 8188 	ldrh.w	r8, [r1, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4194:	4aa0      	ldr	r2, [pc, #640]	; (4418 <pwm_init+0x380>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    4196:	fa1f f888 	uxth.w	r8, r8
    419a:	f448 6870 	orr.w	r8, r8, #3840	; 0xf00
    419e:	f8a1 8188 	strh.w	r8, [r1, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    41a2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    41a6:	f8a2 c18c 	strh.w	ip, [r2, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    41aa:	f8a2 518e 	strh.w	r5, [r2, #398]	; 0x18e
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    41ae:	3160      	adds	r1, #96	; 0x60
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    41b0:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    41b4:	f8b2 8188 	ldrh.w	r8, [r2, #392]	; 0x188
    41b8:	fa1f f888 	uxth.w	r8, r8
    41bc:	f048 08f0 	orr.w	r8, r8, #240	; 0xf0
    41c0:	f8a2 8188 	strh.w	r8, [r2, #392]	; 0x188
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    41c4:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    41c6:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    41c8:	8453      	strh	r3, [r2, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    41ca:	8613      	strh	r3, [r2, #48]	; 0x30
		p->SM[i].INIT = 0;
    41cc:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    41ce:	8153      	strh	r3, [r2, #10]
		p->SM[i].VAL1 = 33464;
    41d0:	81d0      	strh	r0, [r2, #14]
		p->SM[i].VAL2 = 0;
    41d2:	8253      	strh	r3, [r2, #18]
		p->SM[i].VAL3 = 0;
    41d4:	82d3      	strh	r3, [r2, #22]
		p->SM[i].VAL4 = 0;
    41d6:	8353      	strh	r3, [r2, #26]
		p->SM[i].VAL5 = 0;
    41d8:	83d3      	strh	r3, [r2, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    41da:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    41dc:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    41de:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    41e2:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
		p->SM[i].INIT = 0;
    41e6:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    41e8:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    41ec:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    41f0:	f8a2 3072 	strh.w	r3, [r2, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    41f4:	f8a2 3076 	strh.w	r3, [r2, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    41f8:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    41fc:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4200:	f8a1 6064 	strh.w	r6, [r1, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4204:	f8a1 4066 	strh.w	r4, [r1, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    4208:	f8a2 30e2 	strh.w	r3, [r2, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    420c:	f8a2 30f0 	strh.w	r3, [r2, #240]	; 0xf0
		p->SM[i].INIT = 0;
    4210:	f8a1 3062 	strh.w	r3, [r1, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    4214:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    4218:	f8a2 00ce 	strh.w	r0, [r2, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    421c:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    4220:	f8a2 30d6 	strh.w	r3, [r2, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    4224:	f8a2 30da 	strh.w	r3, [r2, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    4228:	f8a2 30de 	strh.w	r3, [r2, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    422c:	f8a1 60c4 	strh.w	r6, [r1, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4230:	f8a1 40c6 	strh.w	r4, [r1, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    4234:	f8a2 3142 	strh.w	r3, [r2, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    4238:	f8a2 3150 	strh.w	r3, [r2, #336]	; 0x150
		p->SM[i].INIT = 0;
    423c:	f8a1 30c2 	strh.w	r3, [r1, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    4240:	f8a2 312a 	strh.w	r3, [r2, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    4244:	f8a2 012e 	strh.w	r0, [r2, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    4248:	f8a2 3132 	strh.w	r3, [r2, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    424c:	f8a2 3136 	strh.w	r3, [r2, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    4250:	f8a2 313a 	strh.w	r3, [r2, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    4254:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4258:	f8b2 1188 	ldrh.w	r1, [r2, #392]	; 0x188
    425c:	b289      	uxth	r1, r1
    425e:	4329      	orrs	r1, r5
    4260:	f8a2 1188 	strh.w	r1, [r2, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    4264:	f8b2 8188 	ldrh.w	r8, [r2, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4268:	496c      	ldr	r1, [pc, #432]	; (441c <pwm_init+0x384>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    426a:	fa1f f888 	uxth.w	r8, r8
    426e:	f448 6870 	orr.w	r8, r8, #3840	; 0xf00
    4272:	f8a2 8188 	strh.w	r8, [r2, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4276:	f502 4280 	add.w	r2, r2, #16384	; 0x4000

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    427a:	f8a1 c18c 	strh.w	ip, [r1, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    427e:	f8a1 518e 	strh.w	r5, [r1, #398]	; 0x18e
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4282:	3260      	adds	r2, #96	; 0x60
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    4284:	f8a1 3190 	strh.w	r3, [r1, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    4288:	f8b1 8188 	ldrh.w	r8, [r1, #392]	; 0x188
    428c:	fa1f f888 	uxth.w	r8, r8
    4290:	f048 08f0 	orr.w	r8, r8, #240	; 0xf0
    4294:	f8a1 8188 	strh.w	r8, [r1, #392]	; 0x188
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4298:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    429a:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    429c:	844b      	strh	r3, [r1, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    429e:	860b      	strh	r3, [r1, #48]	; 0x30
		p->SM[i].INIT = 0;
    42a0:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    42a2:	814b      	strh	r3, [r1, #10]
		p->SM[i].VAL1 = 33464;
    42a4:	81c8      	strh	r0, [r1, #14]
		p->SM[i].VAL2 = 0;
    42a6:	824b      	strh	r3, [r1, #18]
		p->SM[i].VAL3 = 0;
    42a8:	82cb      	strh	r3, [r1, #22]
		p->SM[i].VAL4 = 0;
    42aa:	834b      	strh	r3, [r1, #26]
		p->SM[i].VAL5 = 0;
    42ac:	83cb      	strh	r3, [r1, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    42ae:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    42b0:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    42b2:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    42b6:	f8a1 3090 	strh.w	r3, [r1, #144]	; 0x90
		p->SM[i].INIT = 0;
    42ba:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    42bc:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    42c0:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    42c4:	f8a1 3072 	strh.w	r3, [r1, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    42c8:	f8a1 3076 	strh.w	r3, [r1, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    42cc:	f8a1 307a 	strh.w	r3, [r1, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    42d0:	f8a1 307e 	strh.w	r3, [r1, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    42d4:	f8a2 6064 	strh.w	r6, [r2, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    42d8:	f8a2 4066 	strh.w	r4, [r2, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    42dc:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    42e0:	f8a1 30f0 	strh.w	r3, [r1, #240]	; 0xf0
		p->SM[i].INIT = 0;
    42e4:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    42e8:	f8a1 30ca 	strh.w	r3, [r1, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    42ec:	f8a1 00ce 	strh.w	r0, [r1, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    42f0:	f8a1 30d2 	strh.w	r3, [r1, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    42f4:	f8a1 30d6 	strh.w	r3, [r1, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    42f8:	f8a1 30da 	strh.w	r3, [r1, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    42fc:	f8a1 30de 	strh.w	r3, [r1, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4300:	f8a2 60c4 	strh.w	r6, [r2, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4304:	f8a2 40c6 	strh.w	r4, [r2, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    4308:	f8a1 3142 	strh.w	r3, [r1, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    430c:	f8a1 3150 	strh.w	r3, [r1, #336]	; 0x150
		p->SM[i].INIT = 0;
    4310:	f8a2 30c2 	strh.w	r3, [r2, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    4314:	f8a1 312a 	strh.w	r3, [r1, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    4318:	f8a1 012e 	strh.w	r0, [r1, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    431c:	f8a1 3132 	strh.w	r3, [r1, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    4320:	f8a1 3136 	strh.w	r3, [r1, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    4324:	f8a1 313a 	strh.w	r3, [r1, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    4328:	f8a1 313e 	strh.w	r3, [r1, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    432c:	f8b1 2188 	ldrh.w	r2, [r1, #392]	; 0x188
    4330:	b292      	uxth	r2, r2
    4332:	432a      	orrs	r2, r5
    4334:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    4338:	f8b1 8188 	ldrh.w	r8, [r1, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    433c:	4a38      	ldr	r2, [pc, #224]	; (4420 <pwm_init+0x388>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    433e:	fa1f f888 	uxth.w	r8, r8
    4342:	f448 6870 	orr.w	r8, r8, #3840	; 0xf00
    4346:	f8a1 8188 	strh.w	r8, [r1, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    434a:	f501 4180 	add.w	r1, r1, #16384	; 0x4000

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    434e:	f8a2 c18c 	strh.w	ip, [r2, #396]	; 0x18c
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4352:	f243 0c26 	movw	ip, #12326	; 0x3026
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    4356:	f8a2 518e 	strh.w	r5, [r2, #398]	; 0x18e
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    435a:	3160      	adds	r1, #96	; 0x60
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    435c:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    4360:	f8b2 8188 	ldrh.w	r8, [r2, #392]	; 0x188
    4364:	fa1f f888 	uxth.w	r8, r8
    4368:	f048 08f0 	orr.w	r8, r8, #240	; 0xf0
    436c:	f8a2 8188 	strh.w	r8, [r2, #392]	; 0x188
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4370:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4372:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    4374:	8453      	strh	r3, [r2, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    4376:	8613      	strh	r3, [r2, #48]	; 0x30
		p->SM[i].INIT = 0;
    4378:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    437a:	8153      	strh	r3, [r2, #10]
		p->SM[i].VAL1 = 33464;
    437c:	81d0      	strh	r0, [r2, #14]
		p->SM[i].VAL2 = 0;
    437e:	8253      	strh	r3, [r2, #18]
		p->SM[i].VAL3 = 0;
    4380:	82d3      	strh	r3, [r2, #22]
		p->SM[i].VAL4 = 0;
    4382:	8353      	strh	r3, [r2, #26]
		p->SM[i].VAL5 = 0;
    4384:	83d3      	strh	r3, [r2, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4386:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4388:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    438a:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    438e:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
		p->SM[i].INIT = 0;
    4392:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    4394:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    4398:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    439c:	f8a2 3072 	strh.w	r3, [r2, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    43a0:	f8a2 3076 	strh.w	r3, [r2, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    43a4:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    43a8:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    43ac:	f8a1 6064 	strh.w	r6, [r1, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    43b0:	f8a1 4066 	strh.w	r4, [r1, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    43b4:	f8a2 30e2 	strh.w	r3, [r2, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    43b8:	f8a2 30f0 	strh.w	r3, [r2, #240]	; 0xf0
		p->SM[i].INIT = 0;
    43bc:	f8a1 3062 	strh.w	r3, [r1, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    43c0:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    43c4:	f8a2 00ce 	strh.w	r0, [r2, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    43c8:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    43cc:	f8a2 30d6 	strh.w	r3, [r2, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    43d0:	f8a2 30da 	strh.w	r3, [r2, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    43d4:	f8a2 30de 	strh.w	r3, [r2, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    43d8:	f8a1 60c4 	strh.w	r6, [r1, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    43dc:	f8a1 40c6 	strh.w	r4, [r1, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    43e0:	f8a2 3142 	strh.w	r3, [r2, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    43e4:	f8a2 3150 	strh.w	r3, [r2, #336]	; 0x150
		p->SM[i].INIT = 0;
    43e8:	f8a1 30c2 	strh.w	r3, [r1, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    43ec:	f8a2 312a 	strh.w	r3, [r2, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    43f0:	f8a2 012e 	strh.w	r0, [r2, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    43f4:	f8a2 3132 	strh.w	r3, [r2, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    43f8:	f8a2 3136 	strh.w	r3, [r2, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    43fc:	f8a2 313a 	strh.w	r3, [r2, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    4400:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4404:	f8b2 1188 	ldrh.w	r1, [r2, #392]	; 0x188
    4408:	e00e      	b.n	4428 <pwm_init+0x390>
    440a:	bf00      	nop
    440c:	400fc000 	.word	0x400fc000
    4410:	403dc000 	.word	0x403dc000
    4414:	403dc060 	.word	0x403dc060
    4418:	403e0000 	.word	0x403e0000
    441c:	403e4000 	.word	0x403e4000
    4420:	403e8000 	.word	0x403e8000
    4424:	fc030000 	.word	0xfc030000
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4428:	4c57      	ldr	r4, [pc, #348]	; (4588 <pwm_init+0x4f0>)
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    442a:	b289      	uxth	r1, r1
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    442c:	4857      	ldr	r0, [pc, #348]	; (458c <pwm_init+0x4f4>)
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    442e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 459c <pwm_init+0x504>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4432:	4329      	orrs	r1, r5
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4434:	4e56      	ldr	r6, [pc, #344]	; (4590 <pwm_init+0x4f8>)
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4436:	f8a2 1188 	strh.w	r1, [r2, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    443a:	f8b2 9188 	ldrh.w	r9, [r2, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    443e:	4955      	ldr	r1, [pc, #340]	; (4594 <pwm_init+0x4fc>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    4440:	fa1f f989 	uxth.w	r9, r9
    4444:	f449 6970 	orr.w	r9, r9, #3840	; 0xf00
    4448:	f8a2 9188 	strh.w	r9, [r2, #392]	; 0x188
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    444c:	4a52      	ldr	r2, [pc, #328]	; (4598 <pwm_init+0x500>)
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    444e:	81a3      	strh	r3, [r4, #12]
		p->CH[i].CNTR = 0;
    4450:	8163      	strh	r3, [r4, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4452:	81e5      	strh	r5, [r4, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4454:	f8a4 e014 	strh.w	lr, [r4, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4458:	80e7      	strh	r7, [r4, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    445a:	8023      	strh	r3, [r4, #0]
		p->CH[i].CMPLD1 = 0;
    445c:	8223      	strh	r3, [r4, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    445e:	f8a4 c00c 	strh.w	ip, [r4, #12]
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4462:	85a3      	strh	r3, [r4, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    4464:	8563      	strh	r3, [r4, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4466:	85e5      	strh	r5, [r4, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4468:	f8a4 e034 	strh.w	lr, [r4, #52]	; 0x34
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    446c:	f8a8 7006 	strh.w	r7, [r8, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4470:	f8a8 3000 	strh.w	r3, [r8]
		p->CH[i].CMPLD1 = 0;
    4474:	8623      	strh	r3, [r4, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4476:	f8a4 c02c 	strh.w	ip, [r4, #44]	; 0x2c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    447a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    447e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4482:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4486:	f8a4 e054 	strh.w	lr, [r4, #84]	; 0x54
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    448a:	f8a8 7026 	strh.w	r7, [r8, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    448e:	f8a8 3020 	strh.w	r3, [r8, #32]
		p->CH[i].CMPLD1 = 0;
    4492:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4496:	f8a4 c04c 	strh.w	ip, [r4, #76]	; 0x4c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    449a:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    449e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    44a2:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    44a6:	f8a4 e074 	strh.w	lr, [r4, #116]	; 0x74
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    44aa:	f8a8 7046 	strh.w	r7, [r8, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    44ae:	f8a8 3040 	strh.w	r3, [r8, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    44b2:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    44b6:	f8a4 c06c 	strh.w	ip, [r4, #108]	; 0x6c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    44ba:	8183      	strh	r3, [r0, #12]
		p->CH[i].CNTR = 0;
    44bc:	8143      	strh	r3, [r0, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    44be:	81c5      	strh	r5, [r0, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    44c0:	f8a0 e014 	strh.w	lr, [r0, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    44c4:	80c7      	strh	r7, [r0, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    44c6:	8003      	strh	r3, [r0, #0]
		p->CH[i].CMPLD1 = 0;
    44c8:	8203      	strh	r3, [r0, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    44ca:	f8a0 c00c 	strh.w	ip, [r0, #12]
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    44ce:	8583      	strh	r3, [r0, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    44d0:	8543      	strh	r3, [r0, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    44d2:	85c5      	strh	r5, [r0, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    44d4:	f8a0 e034 	strh.w	lr, [r0, #52]	; 0x34
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    44d8:	80f7      	strh	r7, [r6, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    44da:	8033      	strh	r3, [r6, #0]
		p->CH[i].CMPLD1 = 0;
    44dc:	8603      	strh	r3, [r0, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    44de:	f8a0 c02c 	strh.w	ip, [r0, #44]	; 0x2c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    44e2:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    44e6:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    44ea:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    44ee:	f8a0 e054 	strh.w	lr, [r0, #84]	; 0x54
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    44f2:	84f7      	strh	r7, [r6, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    44f4:	8433      	strh	r3, [r6, #32]
		p->CH[i].CMPLD1 = 0;
    44f6:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    44fa:	f8a0 c04c 	strh.w	ip, [r0, #76]	; 0x4c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    44fe:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    4502:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4506:	f8a0 506e 	strh.w	r5, [r0, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    450a:	f8a0 e074 	strh.w	lr, [r0, #116]	; 0x74
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    450e:	f8a6 7046 	strh.w	r7, [r6, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4512:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    4516:	f8a0 3070 	strh.w	r3, [r0, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    451a:	f8a0 c06c 	strh.w	ip, [r0, #108]	; 0x6c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    451e:	818b      	strh	r3, [r1, #12]
		p->CH[i].CNTR = 0;
    4520:	814b      	strh	r3, [r1, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4522:	81cd      	strh	r5, [r1, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4524:	f8a1 e014 	strh.w	lr, [r1, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4528:	80cf      	strh	r7, [r1, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    452a:	800b      	strh	r3, [r1, #0]
		p->CH[i].CMPLD1 = 0;
    452c:	820b      	strh	r3, [r1, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    452e:	f8a1 c00c 	strh.w	ip, [r1, #12]
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4532:	858b      	strh	r3, [r1, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    4534:	854b      	strh	r3, [r1, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4536:	85cd      	strh	r5, [r1, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4538:	f8a1 e034 	strh.w	lr, [r1, #52]	; 0x34
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    453c:	80d7      	strh	r7, [r2, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    453e:	8013      	strh	r3, [r2, #0]
		p->CH[i].CMPLD1 = 0;
    4540:	860b      	strh	r3, [r1, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4542:	f8a1 c02c 	strh.w	ip, [r1, #44]	; 0x2c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4546:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    454a:	f8a1 304a 	strh.w	r3, [r1, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    454e:	f8a1 504e 	strh.w	r5, [r1, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4552:	f8a1 e054 	strh.w	lr, [r1, #84]	; 0x54
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4556:	84d7      	strh	r7, [r2, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4558:	8413      	strh	r3, [r2, #32]
		p->CH[i].CMPLD1 = 0;
    455a:	f8a1 3050 	strh.w	r3, [r1, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    455e:	f8a1 c04c 	strh.w	ip, [r1, #76]	; 0x4c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4562:	f8a1 306c 	strh.w	r3, [r1, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    4566:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    456a:	f8a1 506e 	strh.w	r5, [r1, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    456e:	f8a1 e074 	strh.w	lr, [r1, #116]	; 0x74
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4572:	f8a2 7046 	strh.w	r7, [r2, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4576:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    457a:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    457e:	f8a1 c06c 	strh.w	ip, [r1, #108]	; 0x6c
    4582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4586:	bf00      	nop
    4588:	401dc000 	.word	0x401dc000
    458c:	401e0000 	.word	0x401e0000
    4590:	401e0020 	.word	0x401e0020
    4594:	401e4000 	.word	0x401e4000
    4598:	401e4020 	.word	0x401e4020
    459c:	401dc020 	.word	0x401dc020

000045a0 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    45a0:	4770      	bx	lr
    45a2:	bf00      	nop

000045a4 <__aeabi_atexit>:
    45a4:	460b      	mov	r3, r1
    45a6:	4601      	mov	r1, r0
    45a8:	4618      	mov	r0, r3
    45aa:	f000 b801 	b.w	45b0 <__cxa_atexit>
    45ae:	bf00      	nop

000045b0 <__cxa_atexit>:
    45b0:	4613      	mov	r3, r2
    45b2:	460a      	mov	r2, r1
    45b4:	4601      	mov	r1, r0
    45b6:	2002      	movs	r0, #2
    45b8:	f000 bbd0 	b.w	4d5c <__register_exitproc>

000045bc <__errno>:
    45bc:	4b01      	ldr	r3, [pc, #4]	; (45c4 <__errno+0x8>)
    45be:	6818      	ldr	r0, [r3, #0]
    45c0:	4770      	bx	lr
    45c2:	bf00      	nop
    45c4:	20000b10 	.word	0x20000b10

000045c8 <__libc_init_array>:
    45c8:	b570      	push	{r4, r5, r6, lr}
    45ca:	4e0f      	ldr	r6, [pc, #60]	; (4608 <__libc_init_array+0x40>)
    45cc:	4d0f      	ldr	r5, [pc, #60]	; (460c <__libc_init_array+0x44>)
    45ce:	1b76      	subs	r6, r6, r5
    45d0:	10b6      	asrs	r6, r6, #2
    45d2:	bf18      	it	ne
    45d4:	2400      	movne	r4, #0
    45d6:	d005      	beq.n	45e4 <__libc_init_array+0x1c>
    45d8:	3401      	adds	r4, #1
    45da:	f855 3b04 	ldr.w	r3, [r5], #4
    45de:	4798      	blx	r3
    45e0:	42a6      	cmp	r6, r4
    45e2:	d1f9      	bne.n	45d8 <__libc_init_array+0x10>
    45e4:	4e0a      	ldr	r6, [pc, #40]	; (4610 <__libc_init_array+0x48>)
    45e6:	4d0b      	ldr	r5, [pc, #44]	; (4614 <__libc_init_array+0x4c>)
    45e8:	1b76      	subs	r6, r6, r5
    45ea:	f000 fd41 	bl	5070 <___init_veneer>
    45ee:	10b6      	asrs	r6, r6, #2
    45f0:	bf18      	it	ne
    45f2:	2400      	movne	r4, #0
    45f4:	d006      	beq.n	4604 <__libc_init_array+0x3c>
    45f6:	3401      	adds	r4, #1
    45f8:	f855 3b04 	ldr.w	r3, [r5], #4
    45fc:	4798      	blx	r3
    45fe:	42a6      	cmp	r6, r4
    4600:	d1f9      	bne.n	45f6 <__libc_init_array+0x2e>
    4602:	bd70      	pop	{r4, r5, r6, pc}
    4604:	bd70      	pop	{r4, r5, r6, pc}
    4606:	bf00      	nop
    4608:	60001b00 	.word	0x60001b00
    460c:	60001b00 	.word	0x60001b00
    4610:	60001b18 	.word	0x60001b18
    4614:	60001b00 	.word	0x60001b00

00004618 <malloc>:
    4618:	4b02      	ldr	r3, [pc, #8]	; (4624 <malloc+0xc>)
    461a:	4601      	mov	r1, r0
    461c:	6818      	ldr	r0, [r3, #0]
    461e:	f000 b80b 	b.w	4638 <_malloc_r>
    4622:	bf00      	nop
    4624:	20000b10 	.word	0x20000b10

00004628 <free>:
    4628:	4b02      	ldr	r3, [pc, #8]	; (4634 <free+0xc>)
    462a:	4601      	mov	r1, r0
    462c:	6818      	ldr	r0, [r3, #0]
    462e:	f000 bc35 	b.w	4e9c <_free_r>
    4632:	bf00      	nop
    4634:	20000b10 	.word	0x20000b10

00004638 <_malloc_r>:
    4638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    463c:	f101 050b 	add.w	r5, r1, #11
    4640:	2d16      	cmp	r5, #22
    4642:	b083      	sub	sp, #12
    4644:	4606      	mov	r6, r0
    4646:	f240 809f 	bls.w	4788 <_malloc_r+0x150>
    464a:	f035 0507 	bics.w	r5, r5, #7
    464e:	f100 80bf 	bmi.w	47d0 <_malloc_r+0x198>
    4652:	42a9      	cmp	r1, r5
    4654:	f200 80bc 	bhi.w	47d0 <_malloc_r+0x198>
    4658:	f000 faf4 	bl	4c44 <__malloc_lock>
    465c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    4660:	f0c0 829c 	bcc.w	4b9c <_malloc_r+0x564>
    4664:	0a6b      	lsrs	r3, r5, #9
    4666:	f000 80ba 	beq.w	47de <_malloc_r+0x1a6>
    466a:	2b04      	cmp	r3, #4
    466c:	f200 8183 	bhi.w	4976 <_malloc_r+0x33e>
    4670:	09a8      	lsrs	r0, r5, #6
    4672:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    4676:	ea4f 034e 	mov.w	r3, lr, lsl #1
    467a:	3038      	adds	r0, #56	; 0x38
    467c:	4fc4      	ldr	r7, [pc, #784]	; (4990 <_malloc_r+0x358>)
    467e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4682:	f1a3 0108 	sub.w	r1, r3, #8
    4686:	685c      	ldr	r4, [r3, #4]
    4688:	42a1      	cmp	r1, r4
    468a:	d107      	bne.n	469c <_malloc_r+0x64>
    468c:	e0ac      	b.n	47e8 <_malloc_r+0x1b0>
    468e:	2a00      	cmp	r2, #0
    4690:	f280 80ac 	bge.w	47ec <_malloc_r+0x1b4>
    4694:	68e4      	ldr	r4, [r4, #12]
    4696:	42a1      	cmp	r1, r4
    4698:	f000 80a6 	beq.w	47e8 <_malloc_r+0x1b0>
    469c:	6863      	ldr	r3, [r4, #4]
    469e:	f023 0303 	bic.w	r3, r3, #3
    46a2:	1b5a      	subs	r2, r3, r5
    46a4:	2a0f      	cmp	r2, #15
    46a6:	ddf2      	ble.n	468e <_malloc_r+0x56>
    46a8:	49b9      	ldr	r1, [pc, #740]	; (4990 <_malloc_r+0x358>)
    46aa:	693c      	ldr	r4, [r7, #16]
    46ac:	f101 0e08 	add.w	lr, r1, #8
    46b0:	4574      	cmp	r4, lr
    46b2:	f000 81b3 	beq.w	4a1c <_malloc_r+0x3e4>
    46b6:	6863      	ldr	r3, [r4, #4]
    46b8:	f023 0303 	bic.w	r3, r3, #3
    46bc:	1b5a      	subs	r2, r3, r5
    46be:	2a0f      	cmp	r2, #15
    46c0:	f300 8199 	bgt.w	49f6 <_malloc_r+0x3be>
    46c4:	2a00      	cmp	r2, #0
    46c6:	f8c1 e014 	str.w	lr, [r1, #20]
    46ca:	f8c1 e010 	str.w	lr, [r1, #16]
    46ce:	f280 809e 	bge.w	480e <_malloc_r+0x1d6>
    46d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    46d6:	f080 8167 	bcs.w	49a8 <_malloc_r+0x370>
    46da:	08db      	lsrs	r3, r3, #3
    46dc:	f103 0c01 	add.w	ip, r3, #1
    46e0:	2201      	movs	r2, #1
    46e2:	109b      	asrs	r3, r3, #2
    46e4:	fa02 f303 	lsl.w	r3, r2, r3
    46e8:	684a      	ldr	r2, [r1, #4]
    46ea:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    46ee:	f8c4 8008 	str.w	r8, [r4, #8]
    46f2:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    46f6:	431a      	orrs	r2, r3
    46f8:	f1a9 0308 	sub.w	r3, r9, #8
    46fc:	60e3      	str	r3, [r4, #12]
    46fe:	604a      	str	r2, [r1, #4]
    4700:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    4704:	f8c8 400c 	str.w	r4, [r8, #12]
    4708:	1083      	asrs	r3, r0, #2
    470a:	2401      	movs	r4, #1
    470c:	409c      	lsls	r4, r3
    470e:	4294      	cmp	r4, r2
    4710:	f200 808a 	bhi.w	4828 <_malloc_r+0x1f0>
    4714:	4214      	tst	r4, r2
    4716:	d106      	bne.n	4726 <_malloc_r+0xee>
    4718:	f020 0003 	bic.w	r0, r0, #3
    471c:	0064      	lsls	r4, r4, #1
    471e:	4214      	tst	r4, r2
    4720:	f100 0004 	add.w	r0, r0, #4
    4724:	d0fa      	beq.n	471c <_malloc_r+0xe4>
    4726:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    472a:	46cc      	mov	ip, r9
    472c:	4680      	mov	r8, r0
    472e:	f8dc 100c 	ldr.w	r1, [ip, #12]
    4732:	458c      	cmp	ip, r1
    4734:	d107      	bne.n	4746 <_malloc_r+0x10e>
    4736:	e173      	b.n	4a20 <_malloc_r+0x3e8>
    4738:	2a00      	cmp	r2, #0
    473a:	f280 8181 	bge.w	4a40 <_malloc_r+0x408>
    473e:	68c9      	ldr	r1, [r1, #12]
    4740:	458c      	cmp	ip, r1
    4742:	f000 816d 	beq.w	4a20 <_malloc_r+0x3e8>
    4746:	684b      	ldr	r3, [r1, #4]
    4748:	f023 0303 	bic.w	r3, r3, #3
    474c:	1b5a      	subs	r2, r3, r5
    474e:	2a0f      	cmp	r2, #15
    4750:	ddf2      	ble.n	4738 <_malloc_r+0x100>
    4752:	460c      	mov	r4, r1
    4754:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    4758:	f854 8f08 	ldr.w	r8, [r4, #8]!
    475c:	194b      	adds	r3, r1, r5
    475e:	f045 0501 	orr.w	r5, r5, #1
    4762:	604d      	str	r5, [r1, #4]
    4764:	f042 0101 	orr.w	r1, r2, #1
    4768:	f8c8 c00c 	str.w	ip, [r8, #12]
    476c:	4630      	mov	r0, r6
    476e:	f8cc 8008 	str.w	r8, [ip, #8]
    4772:	617b      	str	r3, [r7, #20]
    4774:	613b      	str	r3, [r7, #16]
    4776:	f8c3 e00c 	str.w	lr, [r3, #12]
    477a:	f8c3 e008 	str.w	lr, [r3, #8]
    477e:	6059      	str	r1, [r3, #4]
    4780:	509a      	str	r2, [r3, r2]
    4782:	f000 fa61 	bl	4c48 <__malloc_unlock>
    4786:	e01f      	b.n	47c8 <_malloc_r+0x190>
    4788:	2910      	cmp	r1, #16
    478a:	d821      	bhi.n	47d0 <_malloc_r+0x198>
    478c:	f000 fa5a 	bl	4c44 <__malloc_lock>
    4790:	2510      	movs	r5, #16
    4792:	2306      	movs	r3, #6
    4794:	2002      	movs	r0, #2
    4796:	4f7e      	ldr	r7, [pc, #504]	; (4990 <_malloc_r+0x358>)
    4798:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    479c:	f1a3 0208 	sub.w	r2, r3, #8
    47a0:	685c      	ldr	r4, [r3, #4]
    47a2:	4294      	cmp	r4, r2
    47a4:	f000 8145 	beq.w	4a32 <_malloc_r+0x3fa>
    47a8:	6863      	ldr	r3, [r4, #4]
    47aa:	68e1      	ldr	r1, [r4, #12]
    47ac:	68a5      	ldr	r5, [r4, #8]
    47ae:	f023 0303 	bic.w	r3, r3, #3
    47b2:	4423      	add	r3, r4
    47b4:	4630      	mov	r0, r6
    47b6:	685a      	ldr	r2, [r3, #4]
    47b8:	60e9      	str	r1, [r5, #12]
    47ba:	f042 0201 	orr.w	r2, r2, #1
    47be:	608d      	str	r5, [r1, #8]
    47c0:	605a      	str	r2, [r3, #4]
    47c2:	f000 fa41 	bl	4c48 <__malloc_unlock>
    47c6:	3408      	adds	r4, #8
    47c8:	4620      	mov	r0, r4
    47ca:	b003      	add	sp, #12
    47cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    47d0:	2400      	movs	r4, #0
    47d2:	230c      	movs	r3, #12
    47d4:	4620      	mov	r0, r4
    47d6:	6033      	str	r3, [r6, #0]
    47d8:	b003      	add	sp, #12
    47da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    47de:	2380      	movs	r3, #128	; 0x80
    47e0:	f04f 0e40 	mov.w	lr, #64	; 0x40
    47e4:	203f      	movs	r0, #63	; 0x3f
    47e6:	e749      	b.n	467c <_malloc_r+0x44>
    47e8:	4670      	mov	r0, lr
    47ea:	e75d      	b.n	46a8 <_malloc_r+0x70>
    47ec:	4423      	add	r3, r4
    47ee:	68e1      	ldr	r1, [r4, #12]
    47f0:	685a      	ldr	r2, [r3, #4]
    47f2:	68a5      	ldr	r5, [r4, #8]
    47f4:	f042 0201 	orr.w	r2, r2, #1
    47f8:	60e9      	str	r1, [r5, #12]
    47fa:	4630      	mov	r0, r6
    47fc:	608d      	str	r5, [r1, #8]
    47fe:	605a      	str	r2, [r3, #4]
    4800:	f000 fa22 	bl	4c48 <__malloc_unlock>
    4804:	3408      	adds	r4, #8
    4806:	4620      	mov	r0, r4
    4808:	b003      	add	sp, #12
    480a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    480e:	4423      	add	r3, r4
    4810:	4630      	mov	r0, r6
    4812:	685a      	ldr	r2, [r3, #4]
    4814:	f042 0201 	orr.w	r2, r2, #1
    4818:	605a      	str	r2, [r3, #4]
    481a:	f000 fa15 	bl	4c48 <__malloc_unlock>
    481e:	3408      	adds	r4, #8
    4820:	4620      	mov	r0, r4
    4822:	b003      	add	sp, #12
    4824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4828:	68bc      	ldr	r4, [r7, #8]
    482a:	6863      	ldr	r3, [r4, #4]
    482c:	f023 0803 	bic.w	r8, r3, #3
    4830:	45a8      	cmp	r8, r5
    4832:	d304      	bcc.n	483e <_malloc_r+0x206>
    4834:	ebc5 0308 	rsb	r3, r5, r8
    4838:	2b0f      	cmp	r3, #15
    483a:	f300 808c 	bgt.w	4956 <_malloc_r+0x31e>
    483e:	4b55      	ldr	r3, [pc, #340]	; (4994 <_malloc_r+0x35c>)
    4840:	f8df 9160 	ldr.w	r9, [pc, #352]	; 49a4 <_malloc_r+0x36c>
    4844:	681a      	ldr	r2, [r3, #0]
    4846:	f8d9 3000 	ldr.w	r3, [r9]
    484a:	3301      	adds	r3, #1
    484c:	442a      	add	r2, r5
    484e:	eb04 0a08 	add.w	sl, r4, r8
    4852:	f000 8160 	beq.w	4b16 <_malloc_r+0x4de>
    4856:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    485a:	320f      	adds	r2, #15
    485c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    4860:	f022 020f 	bic.w	r2, r2, #15
    4864:	4611      	mov	r1, r2
    4866:	4630      	mov	r0, r6
    4868:	9201      	str	r2, [sp, #4]
    486a:	f000 f9ef 	bl	4c4c <_sbrk_r>
    486e:	f1b0 3fff 	cmp.w	r0, #4294967295
    4872:	4683      	mov	fp, r0
    4874:	9a01      	ldr	r2, [sp, #4]
    4876:	f000 8158 	beq.w	4b2a <_malloc_r+0x4f2>
    487a:	4582      	cmp	sl, r0
    487c:	f200 80fc 	bhi.w	4a78 <_malloc_r+0x440>
    4880:	4b45      	ldr	r3, [pc, #276]	; (4998 <_malloc_r+0x360>)
    4882:	6819      	ldr	r1, [r3, #0]
    4884:	45da      	cmp	sl, fp
    4886:	4411      	add	r1, r2
    4888:	6019      	str	r1, [r3, #0]
    488a:	f000 8153 	beq.w	4b34 <_malloc_r+0x4fc>
    488e:	f8d9 0000 	ldr.w	r0, [r9]
    4892:	f8df e110 	ldr.w	lr, [pc, #272]	; 49a4 <_malloc_r+0x36c>
    4896:	3001      	adds	r0, #1
    4898:	bf1b      	ittet	ne
    489a:	ebca 0a0b 	rsbne	sl, sl, fp
    489e:	4451      	addne	r1, sl
    48a0:	f8ce b000 	streq.w	fp, [lr]
    48a4:	6019      	strne	r1, [r3, #0]
    48a6:	f01b 0107 	ands.w	r1, fp, #7
    48aa:	f000 8117 	beq.w	4adc <_malloc_r+0x4a4>
    48ae:	f1c1 0008 	rsb	r0, r1, #8
    48b2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    48b6:	4483      	add	fp, r0
    48b8:	3108      	adds	r1, #8
    48ba:	445a      	add	r2, fp
    48bc:	f3c2 020b 	ubfx	r2, r2, #0, #12
    48c0:	ebc2 0901 	rsb	r9, r2, r1
    48c4:	4649      	mov	r1, r9
    48c6:	4630      	mov	r0, r6
    48c8:	9301      	str	r3, [sp, #4]
    48ca:	f000 f9bf 	bl	4c4c <_sbrk_r>
    48ce:	1c43      	adds	r3, r0, #1
    48d0:	9b01      	ldr	r3, [sp, #4]
    48d2:	f000 813f 	beq.w	4b54 <_malloc_r+0x51c>
    48d6:	ebcb 0200 	rsb	r2, fp, r0
    48da:	444a      	add	r2, r9
    48dc:	f042 0201 	orr.w	r2, r2, #1
    48e0:	6819      	ldr	r1, [r3, #0]
    48e2:	f8c7 b008 	str.w	fp, [r7, #8]
    48e6:	4449      	add	r1, r9
    48e8:	42bc      	cmp	r4, r7
    48ea:	f8cb 2004 	str.w	r2, [fp, #4]
    48ee:	6019      	str	r1, [r3, #0]
    48f0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4998 <_malloc_r+0x360>
    48f4:	d016      	beq.n	4924 <_malloc_r+0x2ec>
    48f6:	f1b8 0f0f 	cmp.w	r8, #15
    48fa:	f240 80fd 	bls.w	4af8 <_malloc_r+0x4c0>
    48fe:	6862      	ldr	r2, [r4, #4]
    4900:	f1a8 030c 	sub.w	r3, r8, #12
    4904:	f023 0307 	bic.w	r3, r3, #7
    4908:	18e0      	adds	r0, r4, r3
    490a:	f002 0201 	and.w	r2, r2, #1
    490e:	f04f 0e05 	mov.w	lr, #5
    4912:	431a      	orrs	r2, r3
    4914:	2b0f      	cmp	r3, #15
    4916:	6062      	str	r2, [r4, #4]
    4918:	f8c0 e004 	str.w	lr, [r0, #4]
    491c:	f8c0 e008 	str.w	lr, [r0, #8]
    4920:	f200 811c 	bhi.w	4b5c <_malloc_r+0x524>
    4924:	4b1d      	ldr	r3, [pc, #116]	; (499c <_malloc_r+0x364>)
    4926:	68bc      	ldr	r4, [r7, #8]
    4928:	681a      	ldr	r2, [r3, #0]
    492a:	4291      	cmp	r1, r2
    492c:	bf88      	it	hi
    492e:	6019      	strhi	r1, [r3, #0]
    4930:	4b1b      	ldr	r3, [pc, #108]	; (49a0 <_malloc_r+0x368>)
    4932:	681a      	ldr	r2, [r3, #0]
    4934:	4291      	cmp	r1, r2
    4936:	6862      	ldr	r2, [r4, #4]
    4938:	bf88      	it	hi
    493a:	6019      	strhi	r1, [r3, #0]
    493c:	f022 0203 	bic.w	r2, r2, #3
    4940:	4295      	cmp	r5, r2
    4942:	eba2 0305 	sub.w	r3, r2, r5
    4946:	d801      	bhi.n	494c <_malloc_r+0x314>
    4948:	2b0f      	cmp	r3, #15
    494a:	dc04      	bgt.n	4956 <_malloc_r+0x31e>
    494c:	4630      	mov	r0, r6
    494e:	f000 f97b 	bl	4c48 <__malloc_unlock>
    4952:	2400      	movs	r4, #0
    4954:	e738      	b.n	47c8 <_malloc_r+0x190>
    4956:	1962      	adds	r2, r4, r5
    4958:	f043 0301 	orr.w	r3, r3, #1
    495c:	f045 0501 	orr.w	r5, r5, #1
    4960:	6065      	str	r5, [r4, #4]
    4962:	4630      	mov	r0, r6
    4964:	60ba      	str	r2, [r7, #8]
    4966:	6053      	str	r3, [r2, #4]
    4968:	f000 f96e 	bl	4c48 <__malloc_unlock>
    496c:	3408      	adds	r4, #8
    496e:	4620      	mov	r0, r4
    4970:	b003      	add	sp, #12
    4972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4976:	2b14      	cmp	r3, #20
    4978:	d971      	bls.n	4a5e <_malloc_r+0x426>
    497a:	2b54      	cmp	r3, #84	; 0x54
    497c:	f200 80a4 	bhi.w	4ac8 <_malloc_r+0x490>
    4980:	0b28      	lsrs	r0, r5, #12
    4982:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    4986:	ea4f 034e 	mov.w	r3, lr, lsl #1
    498a:	306e      	adds	r0, #110	; 0x6e
    498c:	e676      	b.n	467c <_malloc_r+0x44>
    498e:	bf00      	nop
    4990:	20000b14 	.word	0x20000b14
    4994:	20001cd4 	.word	0x20001cd4
    4998:	20001cd8 	.word	0x20001cd8
    499c:	20001cd0 	.word	0x20001cd0
    49a0:	20001ccc 	.word	0x20001ccc
    49a4:	20000f20 	.word	0x20000f20
    49a8:	0a5a      	lsrs	r2, r3, #9
    49aa:	2a04      	cmp	r2, #4
    49ac:	d95e      	bls.n	4a6c <_malloc_r+0x434>
    49ae:	2a14      	cmp	r2, #20
    49b0:	f200 80b3 	bhi.w	4b1a <_malloc_r+0x4e2>
    49b4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    49b8:	0049      	lsls	r1, r1, #1
    49ba:	325b      	adds	r2, #91	; 0x5b
    49bc:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    49c0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    49c4:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4ba4 <_malloc_r+0x56c>
    49c8:	f1ac 0c08 	sub.w	ip, ip, #8
    49cc:	458c      	cmp	ip, r1
    49ce:	f000 8088 	beq.w	4ae2 <_malloc_r+0x4aa>
    49d2:	684a      	ldr	r2, [r1, #4]
    49d4:	f022 0203 	bic.w	r2, r2, #3
    49d8:	4293      	cmp	r3, r2
    49da:	d202      	bcs.n	49e2 <_malloc_r+0x3aa>
    49dc:	6889      	ldr	r1, [r1, #8]
    49de:	458c      	cmp	ip, r1
    49e0:	d1f7      	bne.n	49d2 <_malloc_r+0x39a>
    49e2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    49e6:	687a      	ldr	r2, [r7, #4]
    49e8:	f8c4 c00c 	str.w	ip, [r4, #12]
    49ec:	60a1      	str	r1, [r4, #8]
    49ee:	f8cc 4008 	str.w	r4, [ip, #8]
    49f2:	60cc      	str	r4, [r1, #12]
    49f4:	e688      	b.n	4708 <_malloc_r+0xd0>
    49f6:	1963      	adds	r3, r4, r5
    49f8:	f042 0701 	orr.w	r7, r2, #1
    49fc:	f045 0501 	orr.w	r5, r5, #1
    4a00:	6065      	str	r5, [r4, #4]
    4a02:	4630      	mov	r0, r6
    4a04:	614b      	str	r3, [r1, #20]
    4a06:	610b      	str	r3, [r1, #16]
    4a08:	f8c3 e00c 	str.w	lr, [r3, #12]
    4a0c:	f8c3 e008 	str.w	lr, [r3, #8]
    4a10:	605f      	str	r7, [r3, #4]
    4a12:	509a      	str	r2, [r3, r2]
    4a14:	3408      	adds	r4, #8
    4a16:	f000 f917 	bl	4c48 <__malloc_unlock>
    4a1a:	e6d5      	b.n	47c8 <_malloc_r+0x190>
    4a1c:	684a      	ldr	r2, [r1, #4]
    4a1e:	e673      	b.n	4708 <_malloc_r+0xd0>
    4a20:	f108 0801 	add.w	r8, r8, #1
    4a24:	f018 0f03 	tst.w	r8, #3
    4a28:	f10c 0c08 	add.w	ip, ip, #8
    4a2c:	f47f ae7f 	bne.w	472e <_malloc_r+0xf6>
    4a30:	e030      	b.n	4a94 <_malloc_r+0x45c>
    4a32:	68dc      	ldr	r4, [r3, #12]
    4a34:	42a3      	cmp	r3, r4
    4a36:	bf08      	it	eq
    4a38:	3002      	addeq	r0, #2
    4a3a:	f43f ae35 	beq.w	46a8 <_malloc_r+0x70>
    4a3e:	e6b3      	b.n	47a8 <_malloc_r+0x170>
    4a40:	440b      	add	r3, r1
    4a42:	460c      	mov	r4, r1
    4a44:	685a      	ldr	r2, [r3, #4]
    4a46:	68c9      	ldr	r1, [r1, #12]
    4a48:	f854 5f08 	ldr.w	r5, [r4, #8]!
    4a4c:	f042 0201 	orr.w	r2, r2, #1
    4a50:	605a      	str	r2, [r3, #4]
    4a52:	4630      	mov	r0, r6
    4a54:	60e9      	str	r1, [r5, #12]
    4a56:	608d      	str	r5, [r1, #8]
    4a58:	f000 f8f6 	bl	4c48 <__malloc_unlock>
    4a5c:	e6b4      	b.n	47c8 <_malloc_r+0x190>
    4a5e:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    4a62:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    4a66:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4a6a:	e607      	b.n	467c <_malloc_r+0x44>
    4a6c:	099a      	lsrs	r2, r3, #6
    4a6e:	f102 0139 	add.w	r1, r2, #57	; 0x39
    4a72:	0049      	lsls	r1, r1, #1
    4a74:	3238      	adds	r2, #56	; 0x38
    4a76:	e7a1      	b.n	49bc <_malloc_r+0x384>
    4a78:	42bc      	cmp	r4, r7
    4a7a:	4b4a      	ldr	r3, [pc, #296]	; (4ba4 <_malloc_r+0x56c>)
    4a7c:	f43f af00 	beq.w	4880 <_malloc_r+0x248>
    4a80:	689c      	ldr	r4, [r3, #8]
    4a82:	6862      	ldr	r2, [r4, #4]
    4a84:	f022 0203 	bic.w	r2, r2, #3
    4a88:	e75a      	b.n	4940 <_malloc_r+0x308>
    4a8a:	f859 3908 	ldr.w	r3, [r9], #-8
    4a8e:	4599      	cmp	r9, r3
    4a90:	f040 8082 	bne.w	4b98 <_malloc_r+0x560>
    4a94:	f010 0f03 	tst.w	r0, #3
    4a98:	f100 30ff 	add.w	r0, r0, #4294967295
    4a9c:	d1f5      	bne.n	4a8a <_malloc_r+0x452>
    4a9e:	687b      	ldr	r3, [r7, #4]
    4aa0:	ea23 0304 	bic.w	r3, r3, r4
    4aa4:	607b      	str	r3, [r7, #4]
    4aa6:	0064      	lsls	r4, r4, #1
    4aa8:	429c      	cmp	r4, r3
    4aaa:	f63f aebd 	bhi.w	4828 <_malloc_r+0x1f0>
    4aae:	2c00      	cmp	r4, #0
    4ab0:	f43f aeba 	beq.w	4828 <_malloc_r+0x1f0>
    4ab4:	421c      	tst	r4, r3
    4ab6:	4640      	mov	r0, r8
    4ab8:	f47f ae35 	bne.w	4726 <_malloc_r+0xee>
    4abc:	0064      	lsls	r4, r4, #1
    4abe:	421c      	tst	r4, r3
    4ac0:	f100 0004 	add.w	r0, r0, #4
    4ac4:	d0fa      	beq.n	4abc <_malloc_r+0x484>
    4ac6:	e62e      	b.n	4726 <_malloc_r+0xee>
    4ac8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    4acc:	d818      	bhi.n	4b00 <_malloc_r+0x4c8>
    4ace:	0be8      	lsrs	r0, r5, #15
    4ad0:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    4ad4:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4ad8:	3077      	adds	r0, #119	; 0x77
    4ada:	e5cf      	b.n	467c <_malloc_r+0x44>
    4adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    4ae0:	e6eb      	b.n	48ba <_malloc_r+0x282>
    4ae2:	2101      	movs	r1, #1
    4ae4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4ae8:	1092      	asrs	r2, r2, #2
    4aea:	fa01 f202 	lsl.w	r2, r1, r2
    4aee:	431a      	orrs	r2, r3
    4af0:	f8c8 2004 	str.w	r2, [r8, #4]
    4af4:	4661      	mov	r1, ip
    4af6:	e777      	b.n	49e8 <_malloc_r+0x3b0>
    4af8:	2301      	movs	r3, #1
    4afa:	f8cb 3004 	str.w	r3, [fp, #4]
    4afe:	e725      	b.n	494c <_malloc_r+0x314>
    4b00:	f240 5254 	movw	r2, #1364	; 0x554
    4b04:	4293      	cmp	r3, r2
    4b06:	d820      	bhi.n	4b4a <_malloc_r+0x512>
    4b08:	0ca8      	lsrs	r0, r5, #18
    4b0a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    4b0e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4b12:	307c      	adds	r0, #124	; 0x7c
    4b14:	e5b2      	b.n	467c <_malloc_r+0x44>
    4b16:	3210      	adds	r2, #16
    4b18:	e6a4      	b.n	4864 <_malloc_r+0x22c>
    4b1a:	2a54      	cmp	r2, #84	; 0x54
    4b1c:	d826      	bhi.n	4b6c <_malloc_r+0x534>
    4b1e:	0b1a      	lsrs	r2, r3, #12
    4b20:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    4b24:	0049      	lsls	r1, r1, #1
    4b26:	326e      	adds	r2, #110	; 0x6e
    4b28:	e748      	b.n	49bc <_malloc_r+0x384>
    4b2a:	68bc      	ldr	r4, [r7, #8]
    4b2c:	6862      	ldr	r2, [r4, #4]
    4b2e:	f022 0203 	bic.w	r2, r2, #3
    4b32:	e705      	b.n	4940 <_malloc_r+0x308>
    4b34:	f3ca 000b 	ubfx	r0, sl, #0, #12
    4b38:	2800      	cmp	r0, #0
    4b3a:	f47f aea8 	bne.w	488e <_malloc_r+0x256>
    4b3e:	4442      	add	r2, r8
    4b40:	68bb      	ldr	r3, [r7, #8]
    4b42:	f042 0201 	orr.w	r2, r2, #1
    4b46:	605a      	str	r2, [r3, #4]
    4b48:	e6ec      	b.n	4924 <_malloc_r+0x2ec>
    4b4a:	23fe      	movs	r3, #254	; 0xfe
    4b4c:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    4b50:	207e      	movs	r0, #126	; 0x7e
    4b52:	e593      	b.n	467c <_malloc_r+0x44>
    4b54:	2201      	movs	r2, #1
    4b56:	f04f 0900 	mov.w	r9, #0
    4b5a:	e6c1      	b.n	48e0 <_malloc_r+0x2a8>
    4b5c:	f104 0108 	add.w	r1, r4, #8
    4b60:	4630      	mov	r0, r6
    4b62:	f000 f99b 	bl	4e9c <_free_r>
    4b66:	f8d9 1000 	ldr.w	r1, [r9]
    4b6a:	e6db      	b.n	4924 <_malloc_r+0x2ec>
    4b6c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    4b70:	d805      	bhi.n	4b7e <_malloc_r+0x546>
    4b72:	0bda      	lsrs	r2, r3, #15
    4b74:	f102 0178 	add.w	r1, r2, #120	; 0x78
    4b78:	0049      	lsls	r1, r1, #1
    4b7a:	3277      	adds	r2, #119	; 0x77
    4b7c:	e71e      	b.n	49bc <_malloc_r+0x384>
    4b7e:	f240 5154 	movw	r1, #1364	; 0x554
    4b82:	428a      	cmp	r2, r1
    4b84:	d805      	bhi.n	4b92 <_malloc_r+0x55a>
    4b86:	0c9a      	lsrs	r2, r3, #18
    4b88:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    4b8c:	0049      	lsls	r1, r1, #1
    4b8e:	327c      	adds	r2, #124	; 0x7c
    4b90:	e714      	b.n	49bc <_malloc_r+0x384>
    4b92:	21fe      	movs	r1, #254	; 0xfe
    4b94:	227e      	movs	r2, #126	; 0x7e
    4b96:	e711      	b.n	49bc <_malloc_r+0x384>
    4b98:	687b      	ldr	r3, [r7, #4]
    4b9a:	e784      	b.n	4aa6 <_malloc_r+0x46e>
    4b9c:	08e8      	lsrs	r0, r5, #3
    4b9e:	1c43      	adds	r3, r0, #1
    4ba0:	005b      	lsls	r3, r3, #1
    4ba2:	e5f8      	b.n	4796 <_malloc_r+0x15e>
    4ba4:	20000b14 	.word	0x20000b14

00004ba8 <memset>:
    4ba8:	b470      	push	{r4, r5, r6}
    4baa:	0784      	lsls	r4, r0, #30
    4bac:	d046      	beq.n	4c3c <memset+0x94>
    4bae:	1e54      	subs	r4, r2, #1
    4bb0:	2a00      	cmp	r2, #0
    4bb2:	d041      	beq.n	4c38 <memset+0x90>
    4bb4:	b2cd      	uxtb	r5, r1
    4bb6:	4603      	mov	r3, r0
    4bb8:	e002      	b.n	4bc0 <memset+0x18>
    4bba:	1e62      	subs	r2, r4, #1
    4bbc:	b3e4      	cbz	r4, 4c38 <memset+0x90>
    4bbe:	4614      	mov	r4, r2
    4bc0:	f803 5b01 	strb.w	r5, [r3], #1
    4bc4:	079a      	lsls	r2, r3, #30
    4bc6:	d1f8      	bne.n	4bba <memset+0x12>
    4bc8:	2c03      	cmp	r4, #3
    4bca:	d92e      	bls.n	4c2a <memset+0x82>
    4bcc:	b2cd      	uxtb	r5, r1
    4bce:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    4bd2:	2c0f      	cmp	r4, #15
    4bd4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4bd8:	d919      	bls.n	4c0e <memset+0x66>
    4bda:	f103 0210 	add.w	r2, r3, #16
    4bde:	4626      	mov	r6, r4
    4be0:	3e10      	subs	r6, #16
    4be2:	2e0f      	cmp	r6, #15
    4be4:	f842 5c10 	str.w	r5, [r2, #-16]
    4be8:	f842 5c0c 	str.w	r5, [r2, #-12]
    4bec:	f842 5c08 	str.w	r5, [r2, #-8]
    4bf0:	f842 5c04 	str.w	r5, [r2, #-4]
    4bf4:	f102 0210 	add.w	r2, r2, #16
    4bf8:	d8f2      	bhi.n	4be0 <memset+0x38>
    4bfa:	f1a4 0210 	sub.w	r2, r4, #16
    4bfe:	f022 020f 	bic.w	r2, r2, #15
    4c02:	f004 040f 	and.w	r4, r4, #15
    4c06:	3210      	adds	r2, #16
    4c08:	2c03      	cmp	r4, #3
    4c0a:	4413      	add	r3, r2
    4c0c:	d90d      	bls.n	4c2a <memset+0x82>
    4c0e:	461e      	mov	r6, r3
    4c10:	4622      	mov	r2, r4
    4c12:	3a04      	subs	r2, #4
    4c14:	2a03      	cmp	r2, #3
    4c16:	f846 5b04 	str.w	r5, [r6], #4
    4c1a:	d8fa      	bhi.n	4c12 <memset+0x6a>
    4c1c:	1f22      	subs	r2, r4, #4
    4c1e:	f022 0203 	bic.w	r2, r2, #3
    4c22:	3204      	adds	r2, #4
    4c24:	4413      	add	r3, r2
    4c26:	f004 0403 	and.w	r4, r4, #3
    4c2a:	b12c      	cbz	r4, 4c38 <memset+0x90>
    4c2c:	b2c9      	uxtb	r1, r1
    4c2e:	441c      	add	r4, r3
    4c30:	f803 1b01 	strb.w	r1, [r3], #1
    4c34:	42a3      	cmp	r3, r4
    4c36:	d1fb      	bne.n	4c30 <memset+0x88>
    4c38:	bc70      	pop	{r4, r5, r6}
    4c3a:	4770      	bx	lr
    4c3c:	4614      	mov	r4, r2
    4c3e:	4603      	mov	r3, r0
    4c40:	e7c2      	b.n	4bc8 <memset+0x20>
    4c42:	bf00      	nop

00004c44 <__malloc_lock>:
    4c44:	4770      	bx	lr
    4c46:	bf00      	nop

00004c48 <__malloc_unlock>:
    4c48:	4770      	bx	lr
    4c4a:	bf00      	nop

00004c4c <_sbrk_r>:
    4c4c:	b538      	push	{r3, r4, r5, lr}
    4c4e:	4c07      	ldr	r4, [pc, #28]	; (4c6c <_sbrk_r+0x20>)
    4c50:	2300      	movs	r3, #0
    4c52:	4605      	mov	r5, r0
    4c54:	4608      	mov	r0, r1
    4c56:	6023      	str	r3, [r4, #0]
    4c58:	f7fe f8b0 	bl	2dbc <_sbrk>
    4c5c:	1c43      	adds	r3, r0, #1
    4c5e:	d000      	beq.n	4c62 <_sbrk_r+0x16>
    4c60:	bd38      	pop	{r3, r4, r5, pc}
    4c62:	6823      	ldr	r3, [r4, #0]
    4c64:	2b00      	cmp	r3, #0
    4c66:	d0fb      	beq.n	4c60 <_sbrk_r+0x14>
    4c68:	602b      	str	r3, [r5, #0]
    4c6a:	bd38      	pop	{r3, r4, r5, pc}
    4c6c:	2000428c 	.word	0x2000428c
	...

00004c80 <strlen>:
    4c80:	f890 f000 	pld	[r0]
    4c84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    4c88:	f020 0107 	bic.w	r1, r0, #7
    4c8c:	f06f 0c00 	mvn.w	ip, #0
    4c90:	f010 0407 	ands.w	r4, r0, #7
    4c94:	f891 f020 	pld	[r1, #32]
    4c98:	f040 8049 	bne.w	4d2e <strlen+0xae>
    4c9c:	f04f 0400 	mov.w	r4, #0
    4ca0:	f06f 0007 	mvn.w	r0, #7
    4ca4:	e9d1 2300 	ldrd	r2, r3, [r1]
    4ca8:	f891 f040 	pld	[r1, #64]	; 0x40
    4cac:	f100 0008 	add.w	r0, r0, #8
    4cb0:	fa82 f24c 	uadd8	r2, r2, ip
    4cb4:	faa4 f28c 	sel	r2, r4, ip
    4cb8:	fa83 f34c 	uadd8	r3, r3, ip
    4cbc:	faa2 f38c 	sel	r3, r2, ip
    4cc0:	bb4b      	cbnz	r3, 4d16 <strlen+0x96>
    4cc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    4cc6:	fa82 f24c 	uadd8	r2, r2, ip
    4cca:	f100 0008 	add.w	r0, r0, #8
    4cce:	faa4 f28c 	sel	r2, r4, ip
    4cd2:	fa83 f34c 	uadd8	r3, r3, ip
    4cd6:	faa2 f38c 	sel	r3, r2, ip
    4cda:	b9e3      	cbnz	r3, 4d16 <strlen+0x96>
    4cdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    4ce0:	fa82 f24c 	uadd8	r2, r2, ip
    4ce4:	f100 0008 	add.w	r0, r0, #8
    4ce8:	faa4 f28c 	sel	r2, r4, ip
    4cec:	fa83 f34c 	uadd8	r3, r3, ip
    4cf0:	faa2 f38c 	sel	r3, r2, ip
    4cf4:	b97b      	cbnz	r3, 4d16 <strlen+0x96>
    4cf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    4cfa:	f101 0120 	add.w	r1, r1, #32
    4cfe:	fa82 f24c 	uadd8	r2, r2, ip
    4d02:	f100 0008 	add.w	r0, r0, #8
    4d06:	faa4 f28c 	sel	r2, r4, ip
    4d0a:	fa83 f34c 	uadd8	r3, r3, ip
    4d0e:	faa2 f38c 	sel	r3, r2, ip
    4d12:	2b00      	cmp	r3, #0
    4d14:	d0c6      	beq.n	4ca4 <strlen+0x24>
    4d16:	2a00      	cmp	r2, #0
    4d18:	bf04      	itt	eq
    4d1a:	3004      	addeq	r0, #4
    4d1c:	461a      	moveq	r2, r3
    4d1e:	ba12      	rev	r2, r2
    4d20:	fab2 f282 	clz	r2, r2
    4d24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    4d28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    4d2c:	4770      	bx	lr
    4d2e:	e9d1 2300 	ldrd	r2, r3, [r1]
    4d32:	f004 0503 	and.w	r5, r4, #3
    4d36:	f1c4 0000 	rsb	r0, r4, #0
    4d3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    4d3e:	f014 0f04 	tst.w	r4, #4
    4d42:	f891 f040 	pld	[r1, #64]	; 0x40
    4d46:	fa0c f505 	lsl.w	r5, ip, r5
    4d4a:	ea62 0205 	orn	r2, r2, r5
    4d4e:	bf1c      	itt	ne
    4d50:	ea63 0305 	ornne	r3, r3, r5
    4d54:	4662      	movne	r2, ip
    4d56:	f04f 0400 	mov.w	r4, #0
    4d5a:	e7a9      	b.n	4cb0 <strlen+0x30>

00004d5c <__register_exitproc>:
    4d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d60:	4c25      	ldr	r4, [pc, #148]	; (4df8 <__register_exitproc+0x9c>)
    4d62:	6825      	ldr	r5, [r4, #0]
    4d64:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    4d68:	4606      	mov	r6, r0
    4d6a:	4688      	mov	r8, r1
    4d6c:	4692      	mov	sl, r2
    4d6e:	4699      	mov	r9, r3
    4d70:	b3c4      	cbz	r4, 4de4 <__register_exitproc+0x88>
    4d72:	6860      	ldr	r0, [r4, #4]
    4d74:	281f      	cmp	r0, #31
    4d76:	dc17      	bgt.n	4da8 <__register_exitproc+0x4c>
    4d78:	1c43      	adds	r3, r0, #1
    4d7a:	b176      	cbz	r6, 4d9a <__register_exitproc+0x3e>
    4d7c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    4d80:	2201      	movs	r2, #1
    4d82:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    4d86:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    4d8a:	4082      	lsls	r2, r0
    4d8c:	4311      	orrs	r1, r2
    4d8e:	2e02      	cmp	r6, #2
    4d90:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    4d94:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    4d98:	d01e      	beq.n	4dd8 <__register_exitproc+0x7c>
    4d9a:	3002      	adds	r0, #2
    4d9c:	6063      	str	r3, [r4, #4]
    4d9e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    4da2:	2000      	movs	r0, #0
    4da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4da8:	4b14      	ldr	r3, [pc, #80]	; (4dfc <__register_exitproc+0xa0>)
    4daa:	b303      	cbz	r3, 4dee <__register_exitproc+0x92>
    4dac:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4db0:	f7ff fc32 	bl	4618 <malloc>
    4db4:	4604      	mov	r4, r0
    4db6:	b1d0      	cbz	r0, 4dee <__register_exitproc+0x92>
    4db8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    4dbc:	2700      	movs	r7, #0
    4dbe:	e880 0088 	stmia.w	r0, {r3, r7}
    4dc2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    4dc6:	4638      	mov	r0, r7
    4dc8:	2301      	movs	r3, #1
    4dca:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    4dce:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    4dd2:	2e00      	cmp	r6, #0
    4dd4:	d0e1      	beq.n	4d9a <__register_exitproc+0x3e>
    4dd6:	e7d1      	b.n	4d7c <__register_exitproc+0x20>
    4dd8:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    4ddc:	430a      	orrs	r2, r1
    4dde:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    4de2:	e7da      	b.n	4d9a <__register_exitproc+0x3e>
    4de4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    4de8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    4dec:	e7c1      	b.n	4d72 <__register_exitproc+0x16>
    4dee:	f04f 30ff 	mov.w	r0, #4294967295
    4df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4df6:	bf00      	nop
    4df8:	20000670 	.word	0x20000670
    4dfc:	00004619 	.word	0x00004619

00004e00 <_malloc_trim_r>:
    4e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e02:	4f23      	ldr	r7, [pc, #140]	; (4e90 <_malloc_trim_r+0x90>)
    4e04:	460c      	mov	r4, r1
    4e06:	4606      	mov	r6, r0
    4e08:	f7ff ff1c 	bl	4c44 <__malloc_lock>
    4e0c:	68bb      	ldr	r3, [r7, #8]
    4e0e:	685d      	ldr	r5, [r3, #4]
    4e10:	f025 0503 	bic.w	r5, r5, #3
    4e14:	1b29      	subs	r1, r5, r4
    4e16:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    4e1a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    4e1e:	f021 010f 	bic.w	r1, r1, #15
    4e22:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    4e26:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    4e2a:	db07      	blt.n	4e3c <_malloc_trim_r+0x3c>
    4e2c:	2100      	movs	r1, #0
    4e2e:	4630      	mov	r0, r6
    4e30:	f7ff ff0c 	bl	4c4c <_sbrk_r>
    4e34:	68bb      	ldr	r3, [r7, #8]
    4e36:	442b      	add	r3, r5
    4e38:	4298      	cmp	r0, r3
    4e3a:	d004      	beq.n	4e46 <_malloc_trim_r+0x46>
    4e3c:	4630      	mov	r0, r6
    4e3e:	f7ff ff03 	bl	4c48 <__malloc_unlock>
    4e42:	2000      	movs	r0, #0
    4e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e46:	4261      	negs	r1, r4
    4e48:	4630      	mov	r0, r6
    4e4a:	f7ff feff 	bl	4c4c <_sbrk_r>
    4e4e:	3001      	adds	r0, #1
    4e50:	d00d      	beq.n	4e6e <_malloc_trim_r+0x6e>
    4e52:	4b10      	ldr	r3, [pc, #64]	; (4e94 <_malloc_trim_r+0x94>)
    4e54:	68ba      	ldr	r2, [r7, #8]
    4e56:	6819      	ldr	r1, [r3, #0]
    4e58:	1b2d      	subs	r5, r5, r4
    4e5a:	f045 0501 	orr.w	r5, r5, #1
    4e5e:	4630      	mov	r0, r6
    4e60:	1b09      	subs	r1, r1, r4
    4e62:	6055      	str	r5, [r2, #4]
    4e64:	6019      	str	r1, [r3, #0]
    4e66:	f7ff feef 	bl	4c48 <__malloc_unlock>
    4e6a:	2001      	movs	r0, #1
    4e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e6e:	2100      	movs	r1, #0
    4e70:	4630      	mov	r0, r6
    4e72:	f7ff feeb 	bl	4c4c <_sbrk_r>
    4e76:	68ba      	ldr	r2, [r7, #8]
    4e78:	1a83      	subs	r3, r0, r2
    4e7a:	2b0f      	cmp	r3, #15
    4e7c:	ddde      	ble.n	4e3c <_malloc_trim_r+0x3c>
    4e7e:	4c06      	ldr	r4, [pc, #24]	; (4e98 <_malloc_trim_r+0x98>)
    4e80:	4904      	ldr	r1, [pc, #16]	; (4e94 <_malloc_trim_r+0x94>)
    4e82:	6824      	ldr	r4, [r4, #0]
    4e84:	f043 0301 	orr.w	r3, r3, #1
    4e88:	1b00      	subs	r0, r0, r4
    4e8a:	6053      	str	r3, [r2, #4]
    4e8c:	6008      	str	r0, [r1, #0]
    4e8e:	e7d5      	b.n	4e3c <_malloc_trim_r+0x3c>
    4e90:	20000b14 	.word	0x20000b14
    4e94:	20001cd8 	.word	0x20001cd8
    4e98:	20000f20 	.word	0x20000f20

00004e9c <_free_r>:
    4e9c:	2900      	cmp	r1, #0
    4e9e:	d045      	beq.n	4f2c <_free_r+0x90>
    4ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ea4:	460d      	mov	r5, r1
    4ea6:	4680      	mov	r8, r0
    4ea8:	f7ff fecc 	bl	4c44 <__malloc_lock>
    4eac:	f855 7c04 	ldr.w	r7, [r5, #-4]
    4eb0:	496a      	ldr	r1, [pc, #424]	; (505c <_free_r+0x1c0>)
    4eb2:	f027 0301 	bic.w	r3, r7, #1
    4eb6:	f1a5 0408 	sub.w	r4, r5, #8
    4eba:	18e2      	adds	r2, r4, r3
    4ebc:	688e      	ldr	r6, [r1, #8]
    4ebe:	6850      	ldr	r0, [r2, #4]
    4ec0:	42b2      	cmp	r2, r6
    4ec2:	f020 0003 	bic.w	r0, r0, #3
    4ec6:	d062      	beq.n	4f8e <_free_r+0xf2>
    4ec8:	07fe      	lsls	r6, r7, #31
    4eca:	6050      	str	r0, [r2, #4]
    4ecc:	d40b      	bmi.n	4ee6 <_free_r+0x4a>
    4ece:	f855 7c08 	ldr.w	r7, [r5, #-8]
    4ed2:	1be4      	subs	r4, r4, r7
    4ed4:	f101 0e08 	add.w	lr, r1, #8
    4ed8:	68a5      	ldr	r5, [r4, #8]
    4eda:	4575      	cmp	r5, lr
    4edc:	443b      	add	r3, r7
    4ede:	d06f      	beq.n	4fc0 <_free_r+0x124>
    4ee0:	68e7      	ldr	r7, [r4, #12]
    4ee2:	60ef      	str	r7, [r5, #12]
    4ee4:	60bd      	str	r5, [r7, #8]
    4ee6:	1815      	adds	r5, r2, r0
    4ee8:	686d      	ldr	r5, [r5, #4]
    4eea:	07ed      	lsls	r5, r5, #31
    4eec:	d542      	bpl.n	4f74 <_free_r+0xd8>
    4eee:	f043 0201 	orr.w	r2, r3, #1
    4ef2:	6062      	str	r2, [r4, #4]
    4ef4:	50e3      	str	r3, [r4, r3]
    4ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4efa:	d218      	bcs.n	4f2e <_free_r+0x92>
    4efc:	08db      	lsrs	r3, r3, #3
    4efe:	1c5a      	adds	r2, r3, #1
    4f00:	684d      	ldr	r5, [r1, #4]
    4f02:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    4f06:	60a7      	str	r7, [r4, #8]
    4f08:	2001      	movs	r0, #1
    4f0a:	109b      	asrs	r3, r3, #2
    4f0c:	fa00 f303 	lsl.w	r3, r0, r3
    4f10:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    4f14:	431d      	orrs	r5, r3
    4f16:	3808      	subs	r0, #8
    4f18:	60e0      	str	r0, [r4, #12]
    4f1a:	604d      	str	r5, [r1, #4]
    4f1c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    4f20:	60fc      	str	r4, [r7, #12]
    4f22:	4640      	mov	r0, r8
    4f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4f28:	f7ff be8e 	b.w	4c48 <__malloc_unlock>
    4f2c:	4770      	bx	lr
    4f2e:	0a5a      	lsrs	r2, r3, #9
    4f30:	2a04      	cmp	r2, #4
    4f32:	d853      	bhi.n	4fdc <_free_r+0x140>
    4f34:	099a      	lsrs	r2, r3, #6
    4f36:	f102 0739 	add.w	r7, r2, #57	; 0x39
    4f3a:	007f      	lsls	r7, r7, #1
    4f3c:	f102 0538 	add.w	r5, r2, #56	; 0x38
    4f40:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    4f44:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    4f48:	4944      	ldr	r1, [pc, #272]	; (505c <_free_r+0x1c0>)
    4f4a:	3808      	subs	r0, #8
    4f4c:	4290      	cmp	r0, r2
    4f4e:	d04d      	beq.n	4fec <_free_r+0x150>
    4f50:	6851      	ldr	r1, [r2, #4]
    4f52:	f021 0103 	bic.w	r1, r1, #3
    4f56:	428b      	cmp	r3, r1
    4f58:	d202      	bcs.n	4f60 <_free_r+0xc4>
    4f5a:	6892      	ldr	r2, [r2, #8]
    4f5c:	4290      	cmp	r0, r2
    4f5e:	d1f7      	bne.n	4f50 <_free_r+0xb4>
    4f60:	68d0      	ldr	r0, [r2, #12]
    4f62:	60e0      	str	r0, [r4, #12]
    4f64:	60a2      	str	r2, [r4, #8]
    4f66:	6084      	str	r4, [r0, #8]
    4f68:	60d4      	str	r4, [r2, #12]
    4f6a:	4640      	mov	r0, r8
    4f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4f70:	f7ff be6a 	b.w	4c48 <__malloc_unlock>
    4f74:	6895      	ldr	r5, [r2, #8]
    4f76:	4f3a      	ldr	r7, [pc, #232]	; (5060 <_free_r+0x1c4>)
    4f78:	42bd      	cmp	r5, r7
    4f7a:	4403      	add	r3, r0
    4f7c:	d03f      	beq.n	4ffe <_free_r+0x162>
    4f7e:	68d0      	ldr	r0, [r2, #12]
    4f80:	60e8      	str	r0, [r5, #12]
    4f82:	f043 0201 	orr.w	r2, r3, #1
    4f86:	6085      	str	r5, [r0, #8]
    4f88:	6062      	str	r2, [r4, #4]
    4f8a:	50e3      	str	r3, [r4, r3]
    4f8c:	e7b3      	b.n	4ef6 <_free_r+0x5a>
    4f8e:	07ff      	lsls	r7, r7, #31
    4f90:	4403      	add	r3, r0
    4f92:	d407      	bmi.n	4fa4 <_free_r+0x108>
    4f94:	f855 2c08 	ldr.w	r2, [r5, #-8]
    4f98:	1aa4      	subs	r4, r4, r2
    4f9a:	4413      	add	r3, r2
    4f9c:	68a0      	ldr	r0, [r4, #8]
    4f9e:	68e2      	ldr	r2, [r4, #12]
    4fa0:	60c2      	str	r2, [r0, #12]
    4fa2:	6090      	str	r0, [r2, #8]
    4fa4:	4a2f      	ldr	r2, [pc, #188]	; (5064 <_free_r+0x1c8>)
    4fa6:	6812      	ldr	r2, [r2, #0]
    4fa8:	f043 0001 	orr.w	r0, r3, #1
    4fac:	4293      	cmp	r3, r2
    4fae:	6060      	str	r0, [r4, #4]
    4fb0:	608c      	str	r4, [r1, #8]
    4fb2:	d3b6      	bcc.n	4f22 <_free_r+0x86>
    4fb4:	4b2c      	ldr	r3, [pc, #176]	; (5068 <_free_r+0x1cc>)
    4fb6:	4640      	mov	r0, r8
    4fb8:	6819      	ldr	r1, [r3, #0]
    4fba:	f7ff ff21 	bl	4e00 <_malloc_trim_r>
    4fbe:	e7b0      	b.n	4f22 <_free_r+0x86>
    4fc0:	1811      	adds	r1, r2, r0
    4fc2:	6849      	ldr	r1, [r1, #4]
    4fc4:	07c9      	lsls	r1, r1, #31
    4fc6:	d444      	bmi.n	5052 <_free_r+0x1b6>
    4fc8:	6891      	ldr	r1, [r2, #8]
    4fca:	68d2      	ldr	r2, [r2, #12]
    4fcc:	60ca      	str	r2, [r1, #12]
    4fce:	4403      	add	r3, r0
    4fd0:	f043 0001 	orr.w	r0, r3, #1
    4fd4:	6091      	str	r1, [r2, #8]
    4fd6:	6060      	str	r0, [r4, #4]
    4fd8:	50e3      	str	r3, [r4, r3]
    4fda:	e7a2      	b.n	4f22 <_free_r+0x86>
    4fdc:	2a14      	cmp	r2, #20
    4fde:	d817      	bhi.n	5010 <_free_r+0x174>
    4fe0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    4fe4:	007f      	lsls	r7, r7, #1
    4fe6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    4fea:	e7a9      	b.n	4f40 <_free_r+0xa4>
    4fec:	10aa      	asrs	r2, r5, #2
    4fee:	684b      	ldr	r3, [r1, #4]
    4ff0:	2501      	movs	r5, #1
    4ff2:	fa05 f202 	lsl.w	r2, r5, r2
    4ff6:	4313      	orrs	r3, r2
    4ff8:	604b      	str	r3, [r1, #4]
    4ffa:	4602      	mov	r2, r0
    4ffc:	e7b1      	b.n	4f62 <_free_r+0xc6>
    4ffe:	f043 0201 	orr.w	r2, r3, #1
    5002:	614c      	str	r4, [r1, #20]
    5004:	610c      	str	r4, [r1, #16]
    5006:	60e5      	str	r5, [r4, #12]
    5008:	60a5      	str	r5, [r4, #8]
    500a:	6062      	str	r2, [r4, #4]
    500c:	50e3      	str	r3, [r4, r3]
    500e:	e788      	b.n	4f22 <_free_r+0x86>
    5010:	2a54      	cmp	r2, #84	; 0x54
    5012:	d806      	bhi.n	5022 <_free_r+0x186>
    5014:	0b1a      	lsrs	r2, r3, #12
    5016:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    501a:	007f      	lsls	r7, r7, #1
    501c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    5020:	e78e      	b.n	4f40 <_free_r+0xa4>
    5022:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    5026:	d806      	bhi.n	5036 <_free_r+0x19a>
    5028:	0bda      	lsrs	r2, r3, #15
    502a:	f102 0778 	add.w	r7, r2, #120	; 0x78
    502e:	007f      	lsls	r7, r7, #1
    5030:	f102 0577 	add.w	r5, r2, #119	; 0x77
    5034:	e784      	b.n	4f40 <_free_r+0xa4>
    5036:	f240 5054 	movw	r0, #1364	; 0x554
    503a:	4282      	cmp	r2, r0
    503c:	d806      	bhi.n	504c <_free_r+0x1b0>
    503e:	0c9a      	lsrs	r2, r3, #18
    5040:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    5044:	007f      	lsls	r7, r7, #1
    5046:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    504a:	e779      	b.n	4f40 <_free_r+0xa4>
    504c:	27fe      	movs	r7, #254	; 0xfe
    504e:	257e      	movs	r5, #126	; 0x7e
    5050:	e776      	b.n	4f40 <_free_r+0xa4>
    5052:	f043 0201 	orr.w	r2, r3, #1
    5056:	6062      	str	r2, [r4, #4]
    5058:	50e3      	str	r3, [r4, r3]
    505a:	e762      	b.n	4f22 <_free_r+0x86>
    505c:	20000b14 	.word	0x20000b14
    5060:	20000b1c 	.word	0x20000b1c
    5064:	20000f1c 	.word	0x20000f1c
    5068:	20001cd4 	.word	0x20001cd4
    506c:	00000000 	.word	0x00000000

00005070 <___init_veneer>:
    5070:	f85f f000 	ldr.w	pc, [pc]	; 5074 <___init_veneer+0x4>
    5074:	60001aa9 	.word	0x60001aa9
	...

Disassembly of section .fini:

00005080 <_fini>:
    5080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5082:	bf00      	nop
