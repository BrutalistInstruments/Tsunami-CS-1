
C:\Users\OurBl\AppData\Local\Temp\VMBuilds\Teensy4.1Port\teensy41\Release/Teensy4.1Port.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 80 00     ................
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 b8 88 00 00 00 00 00 00                 ...`........

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b77      	ldr	r3, [pc, #476]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a77      	ldr	r2, [pc, #476]	; (60001218 <ResetHandler+0x1e4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4877      	ldr	r0, [pc, #476]	; (6000121c <ResetHandler+0x1e8>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a77      	ldr	r2, [pc, #476]	; (60001220 <ResetHandler+0x1ec>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a76      	ldr	r2, [pc, #472]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4976      	ldr	r1, [pc, #472]	; (60001228 <ResetHandler+0x1f4>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b74      	ldr	r3, [pc, #464]	; (6000122c <ResetHandler+0x1f8>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6d      	ldr	r2, [pc, #436]	; (60001230 <ResetHandler+0x1fc>)
6000107c:	496d      	ldr	r1, [pc, #436]	; (60001234 <ResetHandler+0x200>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6d      	ldr	r3, [pc, #436]	; (60001238 <ResetHandler+0x204>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a66      	ldr	r2, [pc, #408]	; (6000123c <ResetHandler+0x208>)
600010a4:	4b66      	ldr	r3, [pc, #408]	; (60001240 <ResetHandler+0x20c>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	4299      	cmp	r1, r3
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a60      	ldr	r2, [pc, #384]	; (60001244 <ResetHandler+0x210>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5f      	ldr	r3, [pc, #380]	; (60001248 <ResetHandler+0x214>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5e      	ldr	r2, [pc, #376]	; (6000124c <ResetHandler+0x218>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	428b      	cmp	r3, r1
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5d      	ldr	r3, [pc, #372]	; (60001250 <ResetHandler+0x21c>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5d      	ldr	r2, [pc, #372]	; (60001254 <ResetHandler+0x220>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5b      	ldr	r4, [pc, #364]	; (60001258 <ResetHandler+0x224>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5b      	ldr	r6, [pc, #364]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 6000129c <ResetHandler+0x268>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 600012a0 <ResetHandler+0x26c>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 600012a4 <ResetHandler+0x270>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b57      	ldr	r3, [pc, #348]	; (60001260 <ResetHandler+0x22c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4943      	ldr	r1, [pc, #268]	; (60001214 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8b5 	bl	600012a8 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a49      	ldr	r2, [pc, #292]	; (60001264 <ResetHandler+0x230>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b49      	ldr	r3, [pc, #292]	; (60001268 <ResetHandler+0x234>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4949      	ldr	r1, [pc, #292]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4946      	ldr	r1, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a47      	ldr	r2, [pc, #284]	; (60001274 <ResetHandler+0x240>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4847      	ldr	r0, [pc, #284]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a46      	ldr	r2, [pc, #280]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4845      	ldr	r0, [pc, #276]	; (60001280 <ResetHandler+0x24c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4944      	ldr	r1, [pc, #272]	; (60001284 <ResetHandler+0x250>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 face 	bl	6000171c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	4840      	ldr	r0, [pc, #256]	; (60001288 <ResetHandler+0x254>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fcad 	bl	60001af0 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a3a      	ldr	r2, [pc, #232]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b3a      	ldr	r3, [pc, #232]	; (60001290 <ResetHandler+0x25c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4933      	ldr	r1, [pc, #204]	; (60001294 <ResetHandler+0x260>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2e      	ldr	r2, [pc, #184]	; (60001290 <ResetHandler+0x25c>)
600011d6:	4c30      	ldr	r4, [pc, #192]	; (60001298 <ResetHandler+0x264>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
600011e0:	f000 f8de 	bl	600013a0 <configure_external_ram>
#endif
	startup_early_hook();
600011e4:	f000 fc6c 	bl	60001ac0 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e8:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011ea:	2b13      	cmp	r3, #19
600011ec:	d9fc      	bls.n	600011e8 <ResetHandler+0x1b4>
	usb_init();
600011ee:	f000 fb55 	bl	6000189c <usb_init>
	analog_init();
600011f2:	f000 fbc9 	bl	60001988 <analog_init>
	pwm_init();
600011f6:	f000 fc67 	bl	60001ac8 <__pwm_init_veneer>
	tempmon_init();
600011fa:	f000 fac1 	bl	60001780 <tempmon_init>

	startup_late_hook();
600011fe:	f000 fc6f 	bl	60001ae0 <__startup_late_hook_veneer>
60001202:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001204:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001208:	d3fb      	bcc.n	60001202 <ResetHandler+0x1ce>
	//printf("before C++ constructors\n");
	__libc_init_array();
6000120a:	f000 fc6d 	bl	60001ae8 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120e:	f000 fc73 	bl	60001af8 <__main_veneer>
60001212:	e7fe      	b.n	60001212 <ResetHandler+0x1de>
60001214:	400ac000 	.word	0x400ac000
60001218:	aaaaaaab 	.word	0xaaaaaaab
6000121c:	00200007 	.word	0x00200007
60001220:	20078000 	.word	0x20078000
60001224:	00000000 	.word	0x00000000
60001228:	60001b20 	.word	0x60001b20
6000122c:	00005e48 	.word	0x00005e48
60001230:	20000000 	.word	0x20000000
60001234:	6000796c 	.word	0x6000796c
60001238:	20000f50 	.word	0x20000f50
6000123c:	20000f50 	.word	0x20000f50
60001240:	200042c0 	.word	0x200042c0
60001244:	e000ed88 	.word	0xe000ed88
60001248:	20001ffc 	.word	0x20001ffc
6000124c:	00003aad 	.word	0x00003aad
60001250:	e000e400 	.word	0xe000e400
60001254:	e000e4a0 	.word	0xe000e4a0
60001258:	400d8000 	.word	0x400d8000
6000125c:	400fc000 	.word	0x400fc000
60001260:	e000ed08 	.word	0xe000ed08
60001264:	e000e014 	.word	0xe000e014
60001268:	e000e018 	.word	0xe000e018
6000126c:	00004add 	.word	0x00004add
60001270:	e000edfc 	.word	0xe000edfc
60001274:	20200000 	.word	0x20200000
60001278:	00004b89 	.word	0x00004b89
6000127c:	e0001000 	.word	0xe0001000
60001280:	e0001004 	.word	0xe0001004
60001284:	20001aa8 	.word	0x20001aa8
60001288:	23c34600 	.word	0x23c34600
6000128c:	40084000 	.word	0x40084000
60001290:	400d4000 	.word	0x400d4000
60001294:	56c00000 	.word	0x56c00000
60001298:	20001ab0 	.word	0x20001ab0
6000129c:	20002000 	.word	0x20002000
600012a0:	2018101b 	.word	0x2018101b
600012a4:	13110d0c 	.word	0x13110d0c

600012a8 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012aa:	4a28      	ldr	r2, [pc, #160]	; (6000134c <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012ac:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012ae:	4b28      	ldr	r3, [pc, #160]	; (60001350 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012b0:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b4:	4c27      	ldr	r4, [pc, #156]	; (60001354 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012b6:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012b8:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 60001394 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012bc:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012be:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012c0:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012c2:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012c6:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012ca:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012cc:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 60001398 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d0:	4f21      	ldr	r7, [pc, #132]	; (60001358 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012d2:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012d6:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d8:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012da:	4e20      	ldr	r6, [pc, #128]	; (6000135c <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012dc:	4f20      	ldr	r7, [pc, #128]	; (60001360 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012de:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e0:	4920      	ldr	r1, [pc, #128]	; (60001364 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012e2:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e4:	4e20      	ldr	r6, [pc, #128]	; (60001368 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e6:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ea:	4f20      	ldr	r7, [pc, #128]	; (6000136c <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012ec:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ee:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f0:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f4:	4e1e      	ldr	r6, [pc, #120]	; (60001370 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012f6:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f8:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012fa:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600012fc:	f8df e09c 	ldr.w	lr, [pc, #156]	; 6000139c <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001300:	4e1c      	ldr	r6, [pc, #112]	; (60001374 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001302:	491d      	ldr	r1, [pc, #116]	; (60001378 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001304:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001308:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000130a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000130c:	4f1b      	ldr	r7, [pc, #108]	; (6000137c <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000130e:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001310:	4e1b      	ldr	r6, [pc, #108]	; (60001380 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001312:	491c      	ldr	r1, [pc, #112]	; (60001384 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001314:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001316:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001318:	4f1b      	ldr	r7, [pc, #108]	; (60001388 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131a:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131c:	4e1b      	ldr	r6, [pc, #108]	; (6000138c <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000131e:	491c      	ldr	r1, [pc, #112]	; (60001390 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001320:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001322:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001324:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001326:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001328:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000132c:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001330:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001334:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001338:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000133c:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001340:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001344:	f842 3c88 	str.w	r3, [r2, #-136]
60001348:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000134a:	bf00      	nop
6000134c:	e000ed9c 	.word	0xe000ed9c
60001350:	e000eda0 	.word	0xe000eda0
60001354:	e000ed94 	.word	0xe000ed94
60001358:	00100009 	.word	0x00100009
6000135c:	00200013 	.word	0x00200013
60001360:	07020021 	.word	0x07020021
60001364:	200042c0 	.word	0x200042c0
60001368:	20000014 	.word	0x20000014
6000136c:	13080025 	.word	0x13080025
60001370:	10000009 	.word	0x10000009
60001374:	40000017 	.word	0x40000017
60001378:	13100033 	.word	0x13100033
6000137c:	60000018 	.word	0x60000018
60001380:	070b002f 	.word	0x070b002f
60001384:	70000019 	.word	0x70000019
60001388:	170b0037 	.word	0x170b0037
6000138c:	7000001a 	.word	0x7000001a
60001390:	130b002f 	.word	0x130b002f
60001394:	1000003f 	.word	0x1000003f
60001398:	03080025 	.word	0x03080025
6000139c:	20200016 	.word	0x20200016

600013a0 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
600013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013a2:	4bb8      	ldr	r3, [pc, #736]	; (60001684 <configure_external_ram+0x2e4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600013a4:	2218      	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013a6:	4eb8      	ldr	r6, [pc, #736]	; (60001688 <configure_external_ram+0x2e8>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013a8:	2001      	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013aa:	49b8      	ldr	r1, [pc, #736]	; (6000168c <configure_external_ram+0x2ec>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600013ac:	f248 7e0c 	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600013b0:	4db7      	ldr	r5, [pc, #732]	; (60001690 <configure_external_ram+0x2f0>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600013b2:	f04f 37ff 	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600013b6:	4cb7      	ldr	r4, [pc, #732]	; (60001694 <configure_external_ram+0x2f4>)
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013b8:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600013bc:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600013c0:	2500      	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013c2:	f8c3 1264 	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600013c6:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600013ca:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013ce:	f8c3 626c 	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013d2:	49b1      	ldr	r1, [pc, #708]	; (60001698 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013d4:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013d8:	f8c3 6274 	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013dc:	f8c3 6278 	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600013e0:	4eae      	ldr	r6, [pc, #696]	; (6000169c <configure_external_ram+0x2fc>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600013e2:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600013e4:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600013e6:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600013e8:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600013ea:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600013ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600013f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600013f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600013f8:	f240 6205 	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013fc:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001400:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001404:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001408:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000140c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001410:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001414:	4629      	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001416:	69b3      	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001418:	48a1      	ldr	r0, [pc, #644]	; (600016a0 <configure_external_ram+0x300>)
6000141a:	4018      	ands	r0, r3
6000141c:	4ba1      	ldr	r3, [pc, #644]	; (600016a4 <configure_external_ram+0x304>)
6000141e:	4303      	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001420:	48a1      	ldr	r0, [pc, #644]	; (600016a8 <configure_external_ram+0x308>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001422:	61b3      	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001424:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
60001428:	f043 030c 	orr.w	r3, r3, #12
6000142c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001430:	2602      	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001432:	6803      	ldr	r3, [r0, #0]
60001434:	4333      	orrs	r3, r6
60001436:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001438:	6803      	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000143a:	ea03 0e0e 	and.w	lr, r3, lr
6000143e:	4b9b      	ldr	r3, [pc, #620]	; (600016ac <configure_external_ram+0x30c>)
60001440:	ea4e 0303 	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001444:	f8df e29c 	ldr.w	lr, [pc, #668]	; 600016e4 <configure_external_ram+0x344>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001448:	6003      	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000144a:	4b99      	ldr	r3, [pc, #612]	; (600016b0 <configure_external_ram+0x310>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000144c:	6047      	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000144e:	f8de 7008 	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001452:	403b      	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001454:	4f97      	ldr	r7, [pc, #604]	; (600016b4 <configure_external_ram+0x314>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001456:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000145a:	6083      	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000145c:	68c3      	ldr	r3, [r0, #12]
6000145e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001462:	60c3      	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001464:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001466:	401f      	ands	r7, r3
60001468:	4b93      	ldr	r3, [pc, #588]	; (600016b8 <configure_external_ram+0x318>)
6000146a:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000146c:	4f91      	ldr	r7, [pc, #580]	; (600016b4 <configure_external_ram+0x314>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000146e:	6203      	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001470:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001472:	401f      	ands	r7, r3
60001474:	4b90      	ldr	r3, [pc, #576]	; (600016b8 <configure_external_ram+0x318>)
60001476:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001478:	4f90      	ldr	r7, [pc, #576]	; (600016bc <configure_external_ram+0x31c>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000147a:	6243      	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000147c:	6287      	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000147e:	62c7      	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001480:	f8de 30b8 	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001484:	4f8e      	ldr	r7, [pc, #568]	; (600016c0 <configure_external_ram+0x320>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001486:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000148a:	f043 0301 	orr.w	r3, r3, #1
6000148e:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001492:	f8de 30bc 	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001496:	f8df e234 	ldr.w	lr, [pc, #564]	; 600016cc <configure_external_ram+0x32c>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000149a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000149e:	f043 0301 	orr.w	r3, r3, #1
600014a2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
600014a6:	6105      	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600014a8:	6604      	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600014aa:	6707      	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014ac:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600014b0:	6644      	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600014b2:	6747      	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014b4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014b8:	6804      	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014ba:	4b82      	ldr	r3, [pc, #520]	; (600016c4 <configure_external_ram+0x324>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014bc:	f024 0402 	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014c0:	4a81      	ldr	r2, [pc, #516]	; (600016c8 <configure_external_ram+0x328>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014c2:	6004      	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014c4:	f8c0 e018 	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014c8:	61c6      	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014ca:	f843 1b04 	str.w	r1, [r3], #4
600014ce:	4293      	cmp	r3, r2
600014d0:	d1fb      	bne.n	600014ca <configure_external_ram+0x12a>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600014d2:	4b75      	ldr	r3, [pc, #468]	; (600016a8 <configure_external_ram+0x308>)
600014d4:	681a      	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600014d6:	4619      	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600014d8:	f042 0201 	orr.w	r2, r2, #1
600014dc:	601a      	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600014de:	680b      	ldr	r3, [r1, #0]
600014e0:	4a71      	ldr	r2, [pc, #452]	; (600016a8 <configure_external_ram+0x308>)
600014e2:	f013 0301 	ands.w	r3, r3, #1
600014e6:	d1fa      	bne.n	600014de <configure_external_ram+0x13e>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014e8:	4e78      	ldr	r6, [pc, #480]	; (600016cc <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014ea:	2502      	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600014ec:	f240 64f5 	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600014f0:	f240 4066 	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600014f4:	f240 4199 	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600014f8:	4f75      	ldr	r7, [pc, #468]	; (600016d0 <configure_external_ram+0x330>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014fa:	6196      	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600014fc:	f242 4601 	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001500:	61d5      	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001502:	f240 4535 	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001506:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000150a:	f242 2401 	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000150e:	f8c2 0210 	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001512:	2001      	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001514:	f8c2 1220 	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001518:	4611      	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
6000151a:	f8c2 7230 	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000151e:	f107 475a 	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001522:	f8c2 6234 	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001526:	f507 7713 	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000152a:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000152e:	4e69      	ldr	r6, [pc, #420]	; (600016d4 <configure_external_ram+0x334>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001530:	4d69      	ldr	r5, [pc, #420]	; (600016d8 <configure_external_ram+0x338>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001532:	f8c2 7250 	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001536:	f8c2 6254 	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000153a:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000153e:	f8c2 4264 	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001542:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001546:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000154a:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000154e:	694b      	ldr	r3, [r1, #20]
60001550:	4a55      	ldr	r2, [pc, #340]	; (600016a8 <configure_external_ram+0x308>)
60001552:	07dd      	lsls	r5, r3, #31
60001554:	d5fb      	bpl.n	6000154e <configure_external_ram+0x1ae>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001556:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001558:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000155a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000155e:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001560:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001562:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001566:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000156a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000156e:	694b      	ldr	r3, [r1, #20]
60001570:	4a4d      	ldr	r2, [pc, #308]	; (600016a8 <configure_external_ram+0x308>)
60001572:	07dc      	lsls	r4, r3, #31
60001574:	d5fb      	bpl.n	6000156e <configure_external_ram+0x1ce>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001576:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001578:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000157a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000157e:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001580:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001582:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001586:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000158a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000158e:	694b      	ldr	r3, [r1, #20]
60001590:	4a45      	ldr	r2, [pc, #276]	; (600016a8 <configure_external_ram+0x308>)
60001592:	07d8      	lsls	r0, r3, #31
60001594:	d5fb      	bpl.n	6000158e <configure_external_ram+0x1ee>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001596:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001598:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000159a:	4850      	ldr	r0, [pc, #320]	; (600016dc <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000159c:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000159e:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015a0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600015a4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015a8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015ac:	694b      	ldr	r3, [r1, #20]
600015ae:	4a3e      	ldr	r2, [pc, #248]	; (600016a8 <configure_external_ram+0x308>)
600015b0:	07db      	lsls	r3, r3, #31
600015b2:	d5fb      	bpl.n	600015ac <configure_external_ram+0x20c>
	uint32_t id = FLEXSPI2_RFDR0;
600015b4:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015b8:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600015bc:	2021      	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015be:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600015c0:	6150      	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015c2:	428b      	cmp	r3, r1
600015c4:	d000      	beq.n	600015c8 <configure_external_ram+0x228>
600015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015c8:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015ce:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015d0:	4611      	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015d2:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015d6:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015da:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015de:	694b      	ldr	r3, [r1, #20]
600015e0:	4a31      	ldr	r2, [pc, #196]	; (600016a8 <configure_external_ram+0x308>)
600015e2:	07df      	lsls	r7, r3, #31
600015e4:	d5fb      	bpl.n	600015de <configure_external_ram+0x23e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600015e6:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015e8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015ec:	2000      	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015ee:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600015f0:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015f2:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015f6:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015fa:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015fe:	694b      	ldr	r3, [r1, #20]
60001600:	4a29      	ldr	r2, [pc, #164]	; (600016a8 <configure_external_ram+0x308>)
60001602:	07de      	lsls	r6, r3, #31
60001604:	d5fb      	bpl.n	600015fe <configure_external_ram+0x25e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001606:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001608:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000160c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001610:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001612:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001614:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001618:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000161c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001620:	694b      	ldr	r3, [r1, #20]
60001622:	4a21      	ldr	r2, [pc, #132]	; (600016a8 <configure_external_ram+0x308>)
60001624:	07dd      	lsls	r5, r3, #31
60001626:	d5fb      	bpl.n	60001620 <configure_external_ram+0x280>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001628:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000162a:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000162e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001632:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001634:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001636:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000163a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000163e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001642:	694b      	ldr	r3, [r1, #20]
60001644:	4a18      	ldr	r2, [pc, #96]	; (600016a8 <configure_external_ram+0x308>)
60001646:	07dc      	lsls	r4, r3, #31
60001648:	d5fb      	bpl.n	60001642 <configure_external_ram+0x2a2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000164a:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000164c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001650:	4822      	ldr	r0, [pc, #136]	; (600016dc <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001652:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001654:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001656:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000165a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000165e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001662:	694b      	ldr	r3, [r1, #20]
60001664:	4a10      	ldr	r2, [pc, #64]	; (600016a8 <configure_external_ram+0x308>)
60001666:	07d8      	lsls	r0, r3, #31
60001668:	d5fb      	bpl.n	60001662 <configure_external_ram+0x2c2>
	uint32_t id = FLEXSPI2_RFDR0;
6000166a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
6000166e:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001672:	2021      	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001674:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001676:	6150      	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001678:	428b      	cmp	r3, r1
6000167a:	d035      	beq.n	600016e8 <configure_external_ram+0x348>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
6000167c:	4b18      	ldr	r3, [pc, #96]	; (600016e0 <configure_external_ram+0x340>)
6000167e:	2208      	movs	r2, #8
60001680:	701a      	strb	r2, [r3, #0]
60001682:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001684:	401f8000 	.word	0x401f8000
60001688:	000170f9 	.word	0x000170f9
6000168c:	0001b0f9 	.word	0x0001b0f9
60001690:	000110f9 	.word	0x000110f9
60001694:	000100f9 	.word	0x000100f9
60001698:	401f8400 	.word	0x401f8400
6000169c:	400fc000 	.word	0x400fc000
600016a0:	1ffffcff 	.word	0x1ffffcff
600016a4:	a0000300 	.word	0xa0000300
600016a8:	402a4000 	.word	0x402a4000
600016ac:	ffff0012 	.word	0xffff0012
600016b0:	00f737ff 	.word	0x00f737ff
600016b4:	7cf0ff00 	.word	0x7cf0ff00
600016b8:	80000040 	.word	0x80000040
600016bc:	830f00ff 	.word	0x830f00ff
600016c0:	00020063 	.word	0x00020063
600016c4:	402a4200 	.word	0x402a4200
600016c8:	402a4300 	.word	0x402a4300
600016cc:	5af05af0 	.word	0x5af05af0
600016d0:	3018049f 	.word	0x3018049f
600016d4:	26013206 	.word	0x26013206
600016d8:	0a180638 	.word	0x0a180638
600016dc:	00030004 	.word	0x00030004
600016e0:	20001ab4 	.word	0x20001ab4
600016e4:	402a8000 	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016e8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016ec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016f0:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016f2:	4611      	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016f4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016f8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016fc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001700:	694b      	ldr	r3, [r1, #20]
60001702:	4a04      	ldr	r2, [pc, #16]	; (60001714 <configure_external_ram+0x374>)
60001704:	07db      	lsls	r3, r3, #31
60001706:	d5fb      	bpl.n	60001700 <configure_external_ram+0x360>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001708:	2001      	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
6000170a:	4b03      	ldr	r3, [pc, #12]	; (60001718 <configure_external_ram+0x378>)
6000170c:	2110      	movs	r1, #16
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000170e:	6150      	str	r0, [r2, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001710:	7019      	strb	r1, [r3, #0]
60001712:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001714:	402a4000 	.word	0x402a4000
60001718:	20001ab4 	.word	0x20001ab4

6000171c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000171c:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000171e:	4a17      	ldr	r2, [pc, #92]	; (6000177c <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001720:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001722:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001726:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000172a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000172e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001732:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001736:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001738:	f013 0f02 	tst.w	r3, #2
6000173c:	d006      	beq.n	6000174c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000173e:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001740:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001742:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001744:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001746:	f013 0f02 	tst.w	r3, #2
6000174a:	d1f8      	bne.n	6000173e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000174c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001750:	d101      	bne.n	60001756 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001752:	6155      	str	r5, [r2, #20]
			continue;
60001754:	e7ef      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001756:	f413 5f80 	tst.w	r3, #4096	; 0x1000
6000175a:	d101      	bne.n	60001760 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000175c:	6156      	str	r6, [r2, #20]
			continue;
6000175e:	e7ea      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001760:	2b00      	cmp	r3, #0
60001762:	dae8      	bge.n	60001736 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001764:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001768:	d001      	beq.n	6000176e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000176a:	6191      	str	r1, [r2, #24]
			continue;
6000176c:	e7e3      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000176e:	065b      	lsls	r3, r3, #25
60001770:	d401      	bmi.n	60001776 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001772:	6157      	str	r7, [r2, #20]
			continue;
60001774:	e7df      	b.n	60001736 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001776:	bcf0      	pop	{r4, r5, r6, r7}
60001778:	4770      	bx	lr
6000177a:	bf00      	nop
6000177c:	400d8000 	.word	0x400d8000

60001780 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001780:	4a3b      	ldr	r2, [pc, #236]	; (60001870 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001782:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001786:	493b      	ldr	r1, [pc, #236]	; (60001874 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001788:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000178a:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
6000178c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000178e:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001792:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001794:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001898 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001798:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000179a:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000179e:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017a2:	4f35      	ldr	r7, [pc, #212]	; (60001878 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600017a4:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600017a6:	f3c3 240b 	ubfx	r4, r3, #8, #12
600017aa:	4e34      	ldr	r6, [pc, #208]	; (6000187c <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017ac:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017b0:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017b4:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600017b8:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017c0:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017c4:	ee07 4a90 	vmov	s15, r4
600017c8:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017cc:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600017ce:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017d2:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017d6:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017da:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017dc:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017e4:	4d26      	ldr	r5, [pc, #152]	; (60001880 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017e6:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600017ea:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017ec:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600017f4:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017f6:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600017fa:	4e22      	ldr	r6, [pc, #136]	; (60001884 <tempmon_init+0x104>)
600017fc:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017fe:	4922      	ldr	r1, [pc, #136]	; (60001888 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001800:	4c22      	ldr	r4, [pc, #136]	; (6000188c <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001802:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001806:	ee07 3a90 	vmov	s15, r3
6000180a:	4b21      	ldr	r3, [pc, #132]	; (60001890 <tempmon_init+0x110>)
6000180c:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
60001810:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001814:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001818:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000181c:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001820:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001824:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001828:	ee15 3a90 	vmov	r3, s11
6000182c:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001830:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001834:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001838:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000183a:	ea01 4105 	and.w	r1, r1, r5, lsl #16
6000183e:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001846:	430b      	orrs	r3, r1
60001848:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000184c:	ee17 3a90 	vmov	r3, s15
60001850:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
60001854:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001858:	430b      	orrs	r3, r1
6000185a:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000185e:	6813      	ldr	r3, [r2, #0]
60001860:	f043 0302 	orr.w	r3, r3, #2
60001864:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001866:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001868:	4b0a      	ldr	r3, [pc, #40]	; (60001894 <tempmon_init+0x114>)
6000186a:	2201      	movs	r2, #1
6000186c:	601a      	str	r2, [r3, #0]
6000186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001870:	400d8180 	.word	0x400d8180
60001874:	401f4400 	.word	0x401f4400
60001878:	20001ac0 	.word	0x20001ac0
6000187c:	20001ac4 	.word	0x20001ac4
60001880:	20001abc 	.word	0x20001abc
60001884:	20002000 	.word	0x20002000
60001888:	0fff0000 	.word	0x0fff0000
6000188c:	e000e440 	.word	0xe000e440
60001890:	00003b89 	.word	0x00003b89
60001894:	e000e108 	.word	0xe000e108
60001898:	20001ab8 	.word	0x20001ab8

6000189c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000189c:	4b30      	ldr	r3, [pc, #192]	; (60001960 <usb_init+0xc4>)
6000189e:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600018a2:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600018a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018a8:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600018ac:	f000 f910 	bl	60001ad0 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018b0:	492c      	ldr	r1, [pc, #176]	; (60001964 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018b2:	482d      	ldr	r0, [pc, #180]	; (60001968 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018b4:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018b8:	4c2c      	ldr	r4, [pc, #176]	; (6000196c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018ba:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018be:	4b2c      	ldr	r3, [pc, #176]	; (60001970 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018c0:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018c4:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018c8:	6822      	ldr	r2, [r4, #0]
600018ca:	4013      	ands	r3, r2
600018cc:	b91b      	cbnz	r3, 600018d6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600018ce:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
600018d2:	079a      	lsls	r2, r3, #30
600018d4:	d01a      	beq.n	6000190c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600018d6:	4b24      	ldr	r3, [pc, #144]	; (60001968 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600018d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600018dc:	4a23      	ldr	r2, [pc, #140]	; (6000196c <usb_init+0xd0>)
600018de:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600018e0:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600018e2:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
600018e6:	f041 0102 	orr.w	r1, r1, #2
600018ea:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600018ee:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600018f2:	079b      	lsls	r3, r3, #30
600018f4:	d4fb      	bmi.n	600018ee <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600018f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600018fa:	491e      	ldr	r1, [pc, #120]	; (60001974 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600018fc:	4b1b      	ldr	r3, [pc, #108]	; (6000196c <usb_init+0xd0>)
600018fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001902:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001904:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001906:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001908:	f000 f8e6 	bl	60001ad8 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000190c:	4d1a      	ldr	r5, [pc, #104]	; (60001978 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000190e:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001910:	4b16      	ldr	r3, [pc, #88]	; (6000196c <usb_init+0xd0>)
60001912:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001916:	4c14      	ldr	r4, [pc, #80]	; (60001968 <usb_init+0xcc>)
60001918:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000191a:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000191c:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000191e:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001920:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001922:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001926:	f44f 7220 	mov.w	r2, #640	; 0x280
6000192a:	f000 f8c5 	bl	60001ab8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000192e:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001932:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001936:	f240 1343 	movw	r3, #323	; 0x143
6000193a:	4a10      	ldr	r2, [pc, #64]	; (6000197c <usb_init+0xe0>)
6000193c:	4910      	ldr	r1, [pc, #64]	; (60001980 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000193e:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001940:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001942:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
60001946:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000194a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000194e:	4a0d      	ldr	r2, [pc, #52]	; (60001984 <usb_init+0xe8>)
60001950:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001954:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001956:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001958:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
6000195c:	bd70      	pop	{r4, r5, r6, pc}
6000195e:	bf00      	nop
60001960:	400d8000 	.word	0x400d8000
60001964:	400fc000 	.word	0x400fc000
60001968:	402e0000 	.word	0x402e0000
6000196c:	400d9000 	.word	0x400d9000
60001970:	001e1c00 	.word	0x001e1c00
60001974:	e000e28c 	.word	0xe000e28c
60001978:	20004000 	.word	0x20004000
6000197c:	20002000 	.word	0x20002000
60001980:	00003bad 	.word	0x00003bad
60001984:	e000e10c 	.word	0xe000e10c

60001988 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001988:	4b11      	ldr	r3, [pc, #68]	; (600019d0 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000198a:	4912      	ldr	r1, [pc, #72]	; (600019d4 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000198c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000198e:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001990:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001994:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001996:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001998:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000199c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000199e:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600019a0:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600019a4:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019a6:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600019a8:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600019aa:	6c93      	ldr	r3, [r2, #72]	; 0x48
600019ac:	061b      	lsls	r3, r3, #24
600019ae:	d4fc      	bmi.n	600019aa <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019b0:	4b09      	ldr	r3, [pc, #36]	; (600019d8 <analog_init+0x50>)
600019b2:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019b6:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019b8:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019ba:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019bc:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019be:	6c93      	ldr	r3, [r2, #72]	; 0x48
600019c0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600019c4:	d1fb      	bne.n	600019be <analog_init+0x36>
	calibrating = 0;
600019c6:	4a05      	ldr	r2, [pc, #20]	; (600019dc <analog_init+0x54>)
600019c8:	7013      	strb	r3, [r2, #0]
}
600019ca:	bc30      	pop	{r4, r5}
600019cc:	4770      	bx	lr
600019ce:	bf00      	nop
600019d0:	400fc000 	.word	0x400fc000
600019d4:	400c4000 	.word	0x400c4000
600019d8:	400c8000 	.word	0x400c8000
600019dc:	20001ce6 	.word	0x20001ce6

600019e0 <usb_string_product_name_default>:
600019e0:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
600019f0:	00610069 0000006c                       i.a.l...

600019f8 <usb_string_manufacturer_name_default>:
600019f8:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001a08:	00690075 006f006e                       u.i.n.o.

60001a10 <string0>:
60001a10:	04090304                                ....

60001a14 <usb_config_descriptor_12>:
60001a14:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001a24:	24050001 05011000 01010124 06022404     ...$....$....$..
60001a34:	00062405 82050701 10001003 00010409     .$..............
60001a44:	00000a02 03050700 00004002 02840507     .........@......
60001a54:	00000040                                @...

60001a58 <usb_config_descriptor_480>:
60001a58:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001a68:	24050001 05011000 01010124 06022404     ...$....$....$..
60001a78:	00062405 82050701 05001003 00010409     .$..............
60001a88:	00000a02 03050700 00020002 02840507     ................
60001a98:	00000200                                ....

60001a9c <qualifier_descriptor>:
60001a9c:	0200060a 40000002 ff010001                       .......@..

60001aa6 <_serialEvent_default>:
60001aa6:	b5f8ff01                                         ..

60001aa8 <_init>:
60001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001aaa:	bf00      	nop
60001aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001aae:	bc08      	pop	{r3}
60001ab0:	469e      	mov	lr, r3
60001ab2:	4770      	bx	lr
60001ab4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

60001ab8 <__memset_veneer>:
60001ab8:	f85f f000 	ldr.w	pc, [pc]	; 60001abc <__memset_veneer+0x4>
60001abc:	00005945 	.word	0x00005945

60001ac0 <__startup_early_hook_veneer>:
60001ac0:	f85f f000 	ldr.w	pc, [pc]	; 60001ac4 <__startup_early_hook_veneer+0x4>
60001ac4:	00003ac5 	.word	0x00003ac5

60001ac8 <__pwm_init_veneer>:
60001ac8:	f85f f000 	ldr.w	pc, [pc]	; 60001acc <__pwm_init_veneer+0x4>
60001acc:	00004e35 	.word	0x00004e35

60001ad0 <__usb_init_serialnumber_veneer>:
60001ad0:	f85f f000 	ldr.w	pc, [pc]	; 60001ad4 <__usb_init_serialnumber_veneer+0x4>
60001ad4:	00004631 	.word	0x00004631

60001ad8 <__delay_veneer>:
60001ad8:	f85f f000 	ldr.w	pc, [pc]	; 60001adc <__delay_veneer+0x4>
60001adc:	00003961 	.word	0x00003961

60001ae0 <__startup_late_hook_veneer>:
60001ae0:	f85f f000 	ldr.w	pc, [pc]	; 60001ae4 <__startup_late_hook_veneer+0x4>
60001ae4:	00003ac9 	.word	0x00003ac9

60001ae8 <____libc_init_array_veneer>:
60001ae8:	f85f f000 	ldr.w	pc, [pc]	; 60001aec <____libc_init_array_veneer+0x4>
60001aec:	00005365 	.word	0x00005365

60001af0 <__set_arm_clock_veneer>:
60001af0:	f85f f000 	ldr.w	pc, [pc]	; 60001af4 <__set_arm_clock_veneer+0x4>
60001af4:	000036a1 	.word	0x000036a1

60001af8 <__main_veneer>:
60001af8:	f85f f000 	ldr.w	pc, [pc]	; 60001afc <__main_veneer+0x4>
60001afc:	00004ba9 	.word	0x00004ba9

60001b00 <__init_array_start>:
60001b00:	00000045 	.word	0x00000045
60001b04:	00000411 	.word	0x00000411
60001b08:	00002f51 	.word	0x00002f51
60001b0c:	00003289 	.word	0x00003289
60001b10:	000034f1 	.word	0x000034f1
60001b14:	00003689 	.word	0x00003689

60001b18 <__init_array_end>:
60001b18:	ffffffff 	.word	0xffffffff
60001b1c:	ffffffff 	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	.short	0xb933

    return tmeas;
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x17>)
      2a:	b113      	.short	0xb113
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1b>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	movs	r3, #1
      34:	bd107023 	.word	0xbd107023
      38:	0f50      	lsrs	r0, r2, #29
      3a:	2000      	movs	r0, #0
      3c:	0000      	movs	r0, r0
      3e:	0000      	movs	r0, r0
}
      40:	00005e44 	.word	0x00005e44

00000044 <frame_dummy>:
      44:	4b08      	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	b510      	.short	0xb510
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	2b00      	cmp	r3, #0
      5e:	d0fb      	beq.n	58 <frame_dummy+0x14>
      60:	4010e8bd 	.word	0x4010e8bd
      64:	4718      	bx	r3
      66:	bf00      	.short	0xbf00
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	0f54      	lsrs	r4, r2, #29
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2000      	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	5e44      	ldrsh	r4, [r0, r1]
  ADC2_CFG = mode1;
      72:	0000      	movs	r0, r0
  
  if(num >= 4){
      74:	0f50      	lsrs	r0, r2, #29
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	movs	r0, #0
      78:	00000000 	.word	0x00000000

0000007c <std::_Function_base::_Base_manager<setup::{lambda()#3}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<setup::{lambda()#3}> const&, std::_Manager_operation)>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
      7c:	2a01      	cmp	r2, #1
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
      7e:	bf08      	.short	0xbf08
      80:	6001      	streq	r1, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
      82:	2000      	.short	0x2000
      84:	4770      	bx	lr
	while (1) {
		volatile uint32_t n;
		GPIO2_DR_SET = (1<<3); //digitalWrite(13, HIGH);
		for (n=0; n < 2000000/6; n++) ;
		GPIO2_DR_CLEAR = (1<<3); //digitalWrite(13, LOW);
		for (n=0; n < 1500000/6; n++) ;
      86:	bf00      	.short	0xbf00

00000088 <std::_Function_handler<void (), setup::{lambda()#1}>::_M_invoke(std::_Any_data const&)>:
void setup() {
	initBank(&currentPattern); //set bank to factory defaults
	initGlobals(&currentGlobals, 0); //set globals to factory defaults. both of these will change once the eeprom is implemented. 
	///for current testing, these will stay in here. 
	initPins();
	OLEDTimer.beginPeriodic([] {enableCycle(&currentGlobals); }, 10);
      88:	4801      	ldr	r0, [pc, #4]	; (90 <std::_Function_handler<void (), setup::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x8>)
      8a:	f001      	.short	0xf001
      8c:	b99d      	cbnz	r5, b6 <std::_Function_base::_Base_manager<setup::{lambda()#2}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<setup::{lambda()#2}> const&, std::_Manager_operation)+0xa>
      8e:	bf00      	.short	0xbf00
      90:	0f6c      	lsrs	r4, r5, #29
      92:	2000      	movs	r0, #0

00000094 <std::_Function_handler<void (), setup::{lambda()#2}>::_M_invoke(std::_Any_data const&)>:
	initScreen(&currentGlobals);
	//outputS("Working Screen     ", 1, &currentGlobals);
	initMenu(&screenBank, &currentPattern, &currentGlobals);
	initEncoders();
	EncoderTimer.beginPeriodic([] {listenEncoders(&currentGlobals); }, 1000);
      94:	f0004801 	.word	0xf0004801
      98:	ba61      	rev16	r1, r4
      9a:	bf00      	.short	0xbf00
      9c:	0f6c      	lsrs	r4, r5, #29
      9e:	2000      	.short	0x2000

000000a0 <std::_Function_handler<void (), setup::{lambda()#3}>::_M_invoke(std::_Any_data const&)>:
	ButtonTimer.beginPeriodic([] {listenButton(&currentGlobals); }, 100); //might want to make this go slower, check for response times on the buttons
      a0:	4801      	ldr	r0, [pc, #4]	; (a8 <std::_Function_handler<void (), setup::{lambda()#3}>::_M_invoke(std::_Any_data const&)+0x8>)
      a2:	f000      	.short	0xf000
      a4:	b9f3      	cbnz	r3, e4 <setup+0x20>
      a6:	bf00      	.short	0xbf00
      a8:	0f6c      	lsrs	r4, r5, #29
      aa:	2000      	movs	r0, #0

000000ac <std::_Function_base::_Base_manager<setup::{lambda()#2}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<setup::{lambda()#2}> const&, std::_Manager_operation)>:
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
      ac:	bf082a01 	.word	0xbf082a01
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
      b0:	6001      	streq	r1, [r0, #0]
      b2:	2000      	.short	0x2000
      b4:	4770      	bx	lr
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
      b6:	bf00      	.short	0xbf00

000000b8 <std::_Function_base::_Base_manager<setup::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<setup::{lambda()#1}> const&, std::_Manager_operation)>:
      b8:	2a01      	cmp	r2, #1
      ba:	bf08      	.short	0xbf08
      bc:	6001      	streq	r1, [r0, #0]
      be:	2000      	.short	0x2000
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
      c0:	4770      	bx	lr
      c2:	bf00      	.short	0xbf00

000000c4 <setup>:
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
      c4:	b5f0      	push	{r4, r5, r6, r7, lr}
				newhead = head + 1;
      c6:	488f      	.short	0x488f

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
      c8:	b08d      	sub	sp, #52	; 0x34
      ca:	f000      	.short	0xf000
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
      cc:	faf3 2100 			; <UNDEFINED> instruction: 0xfaf32100
      d0:	488d      	ldr	r0, [pc, #564]	; (308 <setup+0x244>)
      d2:	2400      	movs	r4, #0
      d4:	f000 fbb8 	bl	848 <initGlobals(Globals volatile*, unsigned char)>
				if (newhead != rx_buffer_tail_) {
      d8:	f0014d8c 	.word	0xf0014d8c
					head = newhead;
					if (newhead < rx_buffer_size_) {
      dc:	fadd 4b8c 			; <UNDEFINED> instruction: 0xfadd4b8c
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
      e0:	22022601 	.word	0x22022601
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
      e4:	9303      	str	r3, [sp, #12]
      e6:	4669      	.short	0x4669
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
      e8:	4b8a      	ldr	r3, [pc, #552]	; (314 <setup+0x250>)
      ea:	a804      	.short	0xa804
      ec:	722e      	strb	r6, [r5, #8]
      ee:	9302      	.short	0x9302
      f0:	9406      	str	r4, [sp, #24]
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
      f2:	f7ff      	.short	0xf7ff
      f4:	ffe1 9a03 	vmlsl.u32	<illegal reg q12.5>, d1, d3
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
      f8:	9b02      	ldr	r3, [sp, #8]
				newhead = head + 1;
      fa:	9207      	.short	0x9207

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
      fc:	9306      	str	r3, [sp, #24]
      fe:	2b00      	.short	0x2b00
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
     100:	f000 8131 	beq.w	366 <setup+0x2a2>
     104:	2e00686e 	.word	0x2e00686e
     108:	f000 80e9 	beq.w	2de <setup+0x21a>
				if (newhead != rx_buffer_tail_) {
     10c:	68176832 	.word	0x68176832
					head = newhead;
					if (newhead < rx_buffer_size_) {
     110:	940a      	str	r4, [sp, #40]	; 0x28
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     112:	ac08      	.short	0xac08
     114:	2202      	movs	r2, #2
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
     116:	a904      	.short	0xa904
     118:	4620      	mov	r0, r4
     11a:	4798      	.short	0x4798
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
     11c:	9a07      	ldr	r2, [sp, #28]
     11e:	9b06      	.short	0x9b06
     120:	920b      	str	r2, [sp, #44]	; 0x2c
     122:	930a      	.short	0x930a
     124:	4630      	mov	r0, r6
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
     126:	7a2a      	.short	0x7a2a
     128:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
				newhead = head + 1;
     12c:	47b84621 	.word	0x47b84621

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
     130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
     132:	4606      	.short	0x4606
				if (newhead != rx_buffer_tail_) {
     134:	b11b      	cbz	r3, 13e <setup+0x7a>
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
     136:	2203      	movs	r2, #3
     138:	4621      	mov	r1, r4
     13a:	4620      	.short	0x4620
				if (newhead != rx_buffer_tail_) {
     13c:	4798      	blx	r3
     13e:	2e00      	.short	0x2e00
     140:	f000 80b1 	beq.w	2a6 <setup+0x1e2>
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     144:	f0034630 	.word	0xf0034630
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
     148:	f88d 9b06 	strb.w	r9, [sp, #2822]	; 0xb06
     14c:	a904b11b 	.word	0xa904b11b
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
     150:	2203      	movs	r2, #3
     152:	4608      	.short	0x4608
     154:	4798      	blx	r3
     156:	9b02      	.short	0x9b02
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
     158:	b11b      	cbz	r3, 162 <setup+0x9e>
     15a:	2203      	.short	0x2203
     15c:	4669      	mov	r1, sp
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     15e:	4668      	.short	0x4668
				newhead = head + 1;
     160:	4798      	blx	r3

				if (newhead >= rx_buffer_total_size_) newhead = 0;
     162:	4869      	.short	0x4869
				if (newhead != rx_buffer_tail_) {
     164:	2400      	movs	r4, #0
     166:	f001      	.short	0xf001
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
     168:	fb17 4a67 			; <UNDEFINED> instruction: 0xfb174a67
     16c:	486a4965 	.word	0x486a4965
				if (newhead != rx_buffer_tail_) {
     170:	f000 fbd6 	bl	920 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)>
					head = newhead;
					if (newhead < rx_buffer_size_) {
     174:	f0004d69 	.word	0xf0004d69
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     178:	f9dd 4969 	ldr??.w	r4, [sp, #2409]	; 0x969
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
     17c:	23014869 	.word	0x23014869
						rx_buffer_[head] = n;
     180:	2202      	movs	r2, #2
     182:	9103      	.short	0x9103
     184:	9002      	str	r0, [sp, #8]
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
					}
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
     186:	4669      	.short	0x4669
			if (rts_pin_baseReg_) {
     188:	a804      	add	r0, sp, #16
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
					}
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
     18a:	722b      	strb	r3, [r5, #8]
     18c:	9406      	str	r4, [sp, #24]
			if (rts_pin_baseReg_) {
     18e:	f7ff ff8d 	bl	ac <std::_Function_base::_Base_manager<setup::{lambda()#2}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<setup::{lambda()#2}> const&, std::_Manager_operation)>
				uint32_t avail;
				if (head >= tail) avail = head - tail;
     192:	9a03      	ldr	r2, [sp, #12]
     194:	9b02      	ldr	r3, [sp, #8]
     196:	9207      	str	r2, [sp, #28]
				else avail = rx_buffer_total_size_ + head - tail;
				if (avail >= rts_high_watermark_) rts_deassert();
     198:	9306      	str	r3, [sp, #24]
     19a:	2b00      	cmp	r3, #0
     19c:	80dff000 	.word	0x80dff000
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
}

inline void HardwareSerial::rts_deassert()
{
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
     1a0:	686e      	ldr	r6, [r5, #4]
     1a2:	2e00      	cmp	r6, #0
				if (avail >= rts_high_watermark_) rts_deassert();
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
     1a4:	80caf000 	.word	0x80caf000
     1a8:	6832      	ldr	r2, [r6, #0]
		//digitalWrite(5, LOW);

	}

	// See if we are transmitting and room in buffer. 
	ctrl = port->CTRL;
     1aa:	6817      	.short	0x6817
     1ac:	940a      	str	r4, [sp, #40]	; 0x28
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
     1ae:	ac08      	.short	0xac08
     1b0:	2202      	movs	r2, #2
     1b2:	a904      	.short	0xa904
     1b4:	4620      	mov	r0, r4
     1b6:	4798      	.short	0x4798
     1b8:	9a07      	ldr	r2, [sp, #28]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
     1ba:	9b06      	ldr	r3, [sp, #24]
     1bc:	930a920b 	.word	0x930a920b
     1c0:	4630      	mov	r0, r6
     1c2:	7a2a      	.short	0x7a2a
     1c4:	ed9f 0a58 	vldr	s0, [pc, #352]	; 328 <setup+0x264>
	{
		transmitting_ = 0;
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
     1c8:	47b84621 	.word	0x47b84621
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
	{
		transmitting_ = 0;
     1cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
     1ce:	4606      	.short	0x4606
     1d0:	b11b      	cbz	r3, 1da <setup+0x116>
     1d2:	2203      	.short	0x2203
     1d4:	4621      	mov	r1, r4

		port->CTRL &= ~LPUART_CTRL_TCIE;
     1d6:	4620      	.short	0x4620
     1d8:	4798      	blx	r3
     1da:	2e00      	.short	0x2e00
     1dc:	d05a      	beq.n	294 <setup+0x1d0>
	}
	//digitalWrite(4, LOW);
}
     1de:	4630      	.short	0x4630
	ctrl = port->CTRL;
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
     1e0:	f003 f840 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
		tail = tx_buffer_tail_;
     1e4:	b11b9b06 	.word	0xb11b9b06
	ctrl = port->CTRL;
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
     1e8:	a904      	add	r1, sp, #16
		tail = tx_buffer_tail_;
     1ea:	2203      	.short	0x2203
		do {
			if (head == tail) break;
     1ec:	4608      	mov	r0, r1
     1ee:	4798      	.short	0x4798
     1f0:	9b02      	ldr	r3, [sp, #8]
     1f2:	b11b      	.short	0xb11b
     1f4:	2203      	movs	r2, #3
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
				n = tx_buffer_[tail];
     1f6:	4669      	mov	r1, sp
     1f8:	4668      	mov	r0, sp
     1fa:	4798      	blx	r3
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
     1fc:	2301494b 	.word	0x2301494b
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
     200:	484b      	ldr	r0, [pc, #300]	; (330 <setup+0x26c>)
     202:	2400      	.short	0x2400
     204:	4d4b      	ldr	r5, [pc, #300]	; (334 <setup+0x270>)
     206:	2202      	.short	0x2202
			if (head == tail) break;
     208:	9103      	str	r1, [sp, #12]
     20a:	4669      	.short	0x4669
			if (++tail >= tx_buffer_total_size_) tail = 0;
     20c:	9002      	str	r0, [sp, #8]
     20e:	a804      	.short	0xa804
     210:	722b      	strb	r3, [r5, #8]
     212:	9406      	.short	0x9406
			if (tail < tx_buffer_size_) {
     214:	f7ff ff32 	bl	7c <std::_Function_base::_Base_manager<setup::{lambda()#3}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<setup::{lambda()#3}> const&, std::_Manager_operation)>
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
     218:	9a03      	ldr	r2, [sp, #12]
		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
			if (head == tail) break;
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
     21a:	9b02      	ldr	r3, [sp, #8]
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
     21c:	9207      	str	r2, [sp, #28]
     21e:	9306      	str	r3, [sp, #24]
     220:	2b00      	cmp	r3, #0
			}
			port->DATA = n;
     222:	f000 80a4 	beq.w	36e <setup+0x2aa>
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
     226:	686e      	.short	0x686e
     228:	2e00      	cmp	r6, #0
     22a:	d046      	.short	0xd046
     22c:	6832      	ldr	r2, [r6, #0]
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
     22e:	6817      	.short	0x6817
		if (head == tail) {
     230:	ac08940a 	.word	0xac08940a
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
     234:	2202      	movs	r2, #2
		if (head == tail) {
     236:	a904      	.short	0xa904
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
     238:	4620      	mov	r0, r4
     23a:	4798      	blx	r3
     23c:	9b069a07 	.word	0x9b069a07
     240:	920b      	str	r2, [sp, #44]	; 0x2c
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
     242:	930a      	.short	0x930a
     244:	4630      	mov	r0, r6
     246:	7a2a      	ldrb	r2, [r5, #8]
     248:	0a3bed9f 	.word	0x0a3bed9f
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
     24c:	4621      	mov	r1, r4
     24e:	47b8      	.short	0x47b8
     250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		if (head == tail) {
			port->CTRL &= ~LPUART_CTRL_TIE; 
     252:	4606      	.short	0x4606
     254:	b11b      	cbz	r3, 25e <setup+0x19a>
     256:	2203      	.short	0x2203
     258:	4621      	mov	r1, r4
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
     25a:	4620      	.short	0x4620
     25c:	4798      	blx	r3
     25e:	b186      	cbz	r6, 282 <setup+0x1be>
     260:	4630      	mov	r0, r6
     262:	f002 ffff 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
     266:	9b06      	.short	0x9b06
			tail = rx_buffer_tail_;
			do {
     268:	b11b      	cbz	r3, 272 <setup+0x1ae>
     26a:	a904      	add	r1, sp, #16
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
			if (rts_pin_baseReg_) {
				uint32_t avail;
				if (head >= tail) avail = head - tail;
				else avail = rx_buffer_total_size_ + head - tail;
     26c:	46082203 	.word	0x46082203
     270:	4798      	blx	r3
     272:	9b02      	.short	0x9b02
     274:	b11b      	cbz	r3, 27e <setup+0x1ba>
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
     276:	2203      	.short	0x2203
     278:	4669      	mov	r1, sp
     27a:	4668      	.short	0x4668
     27c:	4798      	blx	r3
     27e:	b00d      	.short	0xb00d
     280:	bdf0      	pop	{r4, r5, r6, r7, pc}

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
						rx_buffer_[head] = n;
     282:	7a2b      	ldrb	r3, [r5, #8]
     284:	4a2b      	ldr	r2, [pc, #172]	; (334 <setup+0x270>)
     286:	2b00      	cmp	r3, #0
     288:	d0ea      	beq.n	260 <setup+0x19c>
     28a:	6850      	ldr	r0, [r2, #4]
     28c:	6803      	ldr	r3, [r0, #0]
     28e:	699b      	ldr	r3, [r3, #24]
     290:	4798      	blx	r3
     292:	e7e5      	b.n	260 <setup+0x19c>
     294:	7a2b      	ldrb	r3, [r5, #8]
     296:	4a21      	ldr	r2, [pc, #132]	; (31c <setup+0x258>)
     298:	2b00      	cmp	r3, #0
     29a:	d0a0      	beq.n	1de <setup+0x11a>
     29c:	6850      	ldr	r0, [r2, #4]
     29e:	6803      	ldr	r3, [r0, #0]
     2a0:	699b      	ldr	r3, [r3, #24]
     2a2:	4798      	blx	r3
     2a4:	e79b      	b.n	1de <setup+0x11a>
     2a6:	7a2b      	ldrb	r3, [r5, #8]
     2a8:	4a18      	ldr	r2, [pc, #96]	; (30c <setup+0x248>)
     2aa:	2b00      	cmp	r3, #0
     2ac:	f43f af4a 	beq.w	144 <setup+0x80>
     2b0:	6850      	ldr	r0, [r2, #4]
     2b2:	6803      	ldr	r3, [r0, #0]
     2b4:	699b      	ldr	r3, [r3, #24]
     2b6:	4798      	blx	r3
     2b8:	e744      	b.n	144 <setup+0x80>
     2ba:	682c      	ldr	r4, [r5, #0]
     2bc:	2c00      	cmp	r4, #0
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
     2be:	d05a      	beq.n	376 <setup+0x2b2>
     2c0:	47a0      	blx	r4
     2c2:	4606      	mov	r6, r0
     2c4:	6068      	str	r0, [r5, #4]
     2c6:	2800      	cmp	r0, #0
     2c8:	f000 808b 	beq.w	3e2 <setup+0x31e>
     2cc:	6831      	ldr	r1, [r6, #0]
     2ce:	2200      	movs	r2, #0
     2d0:	9b06      	ldr	r3, [sp, #24]
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
        }

        errorCode result = timerChannel->begin(callback, period, isPeriodic);
     2d2:	680f      	ldr	r7, [r1, #0]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     2d4:	920a      	str	r2, [sp, #40]	; 0x28
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     2d6:	2b00      	cmp	r3, #0
     2d8:	d1ab      	bne.n	232 <setup+0x16e>
     2da:	ac08      	add	r4, sp, #32
     2dc:	e7b2      	b.n	244 <setup+0x180>
        if (callback == nullptr) return postError(errorCode::callback);
        if (isPeriodic && period == 0) return postError(errorCode::reload);

        if (timerChannel == nullptr)
        {
            if (timerGenerator != nullptr) // use timer passed in during construction
     2de:	682c      	ldr	r4, [r5, #0]
     2e0:	2c00      	cmp	r4, #0
     2e2:	d069      	beq.n	3b8 <setup+0x2f4>
            {
                timerChannel = timerGenerator();
     2e4:	47a0      	blx	r4
     2e6:	4606      	mov	r6, r0
     2e8:	6068      	str	r0, [r5, #4]
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
     2ea:	2800      	cmp	r0, #0
     2ec:	d075      	beq.n	3da <setup+0x316>
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
        }

        errorCode result = timerChannel->begin(callback, period, isPeriodic);
     2ee:	6831      	ldr	r1, [r6, #0]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     2f0:	2200      	movs	r2, #0
     2f2:	9b06      	ldr	r3, [sp, #24]
     2f4:	680f      	ldr	r7, [r1, #0]
     2f6:	920a      	str	r2, [sp, #40]	; 0x28
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     2f8:	2b00      	cmp	r3, #0
     2fa:	f47f af0a 	bne.w	112 <setup+0x4e>
     2fe:	ac08      	add	r4, sp, #32
     300:	e710      	b.n	124 <setup+0x60>
     302:	bf00      	nop
     304:	200012b4 	.word	0x200012b4
     308:	20000f6c 	.word	0x20000f6c
     30c:	20001278 	.word	0x20001278
     310:	00000089 	.word	0x00000089
     314:	000000b9 	.word	0x000000b9
     318:	20001430 	.word	0x20001430
     31c:	20001268 	.word	0x20001268
     320:	00000095 	.word	0x00000095
     324:	000000ad 	.word	0x000000ad
     328:	447a0000 	.word	0x447a0000
     32c:	000000a1 	.word	0x000000a1
     330:	0000007d 	.word	0x0000007d
     334:	20001288 	.word	0x20001288
     338:	42c80000 	.word	0x42c80000
        if (callback == nullptr) return postError(errorCode::callback);
        if (isPeriodic && period == 0) return postError(errorCode::reload);

        if (timerChannel == nullptr)
        {
            if (timerGenerator != nullptr) // use timer passed in during construction
     33c:	682c      	ldr	r4, [r5, #0]
     33e:	b354      	cbz	r4, 396 <setup+0x2d2>
            {
                timerChannel = timerGenerator();
     340:	47a0      	blx	r4
     342:	4606      	mov	r6, r0
     344:	6068      	str	r0, [r5, #4]
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
     346:	2800      	cmp	r0, #0
     348:	d04f      	beq.n	3ea <setup+0x326>
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
        }

        errorCode result = timerChannel->begin(callback, period, isPeriodic);
     34a:	6831      	ldr	r1, [r6, #0]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     34c:	2200      	movs	r2, #0
     34e:	9b06      	ldr	r3, [sp, #24]
     350:	680f      	ldr	r7, [r1, #0]
     352:	920a      	str	r2, [sp, #40]	; 0x28
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     354:	2b00      	cmp	r3, #0
     356:	f47f af2a 	bne.w	1ae <setup+0xea>
     35a:	ac08      	add	r4, sp, #32
     35c:	e730      	b.n	1c0 <setup+0xfc>
    template <typename T>
    errorCode BaseTimer::begin(callback_t callback, T p, bool start)
    {
        auto period = getPeriod(p);

        if (callback == nullptr) return postError(errorCode::callback);
     35e:	2065      	movs	r0, #101	; 0x65
     360:	f002 ff80 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     364:	e73e      	b.n	1e4 <setup+0x120>
     366:	2065      	movs	r0, #101	; 0x65
     368:	f002 ff7c 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     36c:	e6ed      	b.n	14a <setup+0x86>
     36e:	2065      	movs	r0, #101	; 0x65
     370:	f002 ff78 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     374:	e777      	b.n	266 <setup+0x1a2>
     376:	4f1f      	ldr	r7, [pc, #124]	; (3f4 <setup+0x330>)
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
                {
                    timerChannel = timerPool[i]();
     378:	f857 3f04 	ldr.w	r3, [r7, #4]!
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
     37c:	3401      	adds	r4, #1
                {
                    timerChannel = timerPool[i]();
     37e:	4798      	blx	r3
     380:	4606      	mov	r6, r0
     382:	6068      	str	r0, [r5, #4]
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
     384:	b908      	cbnz	r0, 38a <setup+0x2c6>
     386:	2c07      	cmp	r4, #7
     388:	d1f6      	bne.n	378 <setup+0x2b4>
                {
                    timerChannel = timerPool[i]();
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
     38a:	2e00      	cmp	r6, #0
     38c:	d19e      	bne.n	2cc <setup+0x208>
     38e:	2067      	movs	r0, #103	; 0x67
     390:	f002 ff68 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     394:	e767      	b.n	266 <setup+0x1a2>
     396:	4f17      	ldr	r7, [pc, #92]	; (3f4 <setup+0x330>)
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
     398:	3401      	adds	r4, #1
                {
                    timerChannel = timerPool[i]();
     39a:	f857 3f04 	ldr.w	r3, [r7, #4]!
     39e:	4798      	blx	r3
     3a0:	4606      	mov	r6, r0
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
     3a2:	2c07      	cmp	r4, #7
                {
                    timerChannel = timerPool[i]();
     3a4:	6068      	str	r0, [r5, #4]
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
     3a6:	d001      	beq.n	3ac <setup+0x2e8>
     3a8:	2800      	cmp	r0, #0
     3aa:	d0f5      	beq.n	398 <setup+0x2d4>
                {
                    timerChannel = timerPool[i]();
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
     3ac:	2e00      	cmp	r6, #0
     3ae:	d1cc      	bne.n	34a <setup+0x286>
     3b0:	2067      	movs	r0, #103	; 0x67
     3b2:	f002 ff57 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     3b6:	e715      	b.n	1e4 <setup+0x120>
     3b8:	4f0e      	ldr	r7, [pc, #56]	; (3f4 <setup+0x330>)
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
     3ba:	3401      	adds	r4, #1
                {
                    timerChannel = timerPool[i]();
     3bc:	f857 3f04 	ldr.w	r3, [r7, #4]!
     3c0:	4798      	blx	r3
     3c2:	4606      	mov	r6, r0
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
     3c4:	2c07      	cmp	r4, #7
                {
                    timerChannel = timerPool[i]();
     3c6:	6068      	str	r0, [r5, #4]
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
     3c8:	d001      	beq.n	3ce <setup+0x30a>
     3ca:	2800      	cmp	r0, #0
     3cc:	d0f5      	beq.n	3ba <setup+0x2f6>
                {
                    timerChannel = timerPool[i]();
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
     3ce:	2e00      	cmp	r6, #0
     3d0:	d18d      	bne.n	2ee <setup+0x22a>
     3d2:	2067      	movs	r0, #103	; 0x67
     3d4:	f002 ff46 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     3d8:	e6b7      	b.n	14a <setup+0x86>
        if (timerChannel == nullptr)
        {
            if (timerGenerator != nullptr) // use timer passed in during construction
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
     3da:	2068      	movs	r0, #104	; 0x68
     3dc:	f002 ff42 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     3e0:	e6b3      	b.n	14a <setup+0x86>
     3e2:	2068      	movs	r0, #104	; 0x68
     3e4:	f002 ff3e 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     3e8:	e73d      	b.n	266 <setup+0x1a2>
     3ea:	2068      	movs	r0, #104	; 0x68
     3ec:	f002 ff3a 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     3f0:	e6f8      	b.n	1e4 <setup+0x120>
     3f2:	bf00      	nop
     3f4:	20001294 	.word	0x20001294

000003f8 <loop>:
	Serial.begin(9600);
}

// the loop function runs over and over again until power down or reset
void loop() {
	updateScreen(&screenBank, &currentPattern, &currentGlobals);
     3f8:	4a02      	ldr	r2, [pc, #8]	; (404 <loop+0xc>)
     3fa:	4903      	ldr	r1, [pc, #12]	; (408 <loop+0x10>)
     3fc:	4803      	ldr	r0, [pc, #12]	; (40c <loop+0x14>)
     3fe:	f000 bb79 	b.w	af4 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)>
     402:	bf00      	nop
     404:	20000f6c 	.word	0x20000f6c
     408:	200012b4 	.word	0x200012b4
     40c:	20001430 	.word	0x20001430

00000410 <_GLOBAL__sub_I_currentPattern>:

     410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if defined(ARDUINO_TEENSY40)
    TimerGenerator* const timerPool[] = {GPT1, GPT2, TMR1, TMR2, TMR3, TMR4, TCK};

#elif defined(ARDUINO_TEENSY41)
    TimerGenerator* const timerPool[] = {GPT1, GPT2, TMR1, TMR2, TMR3, TMR4, TCK};
     412:	4813      	ldr	r0, [pc, #76]	; (460 <_GLOBAL__sub_I_currentPattern+0x50>)
#include <Encoder.h>
//initialize our global structs. 
volatile Pattern currentPattern;
volatile Globals currentGlobals;
volatile Screen screenBank;
TeensyTimerTool::Timer OLEDTimer;
     414:	2100      	movs	r1, #0
     416:	4b13      	ldr	r3, [pc, #76]	; (464 <_GLOBAL__sub_I_currentPattern+0x54>)
     418:	4f13      	ldr	r7, [pc, #76]	; (468 <_GLOBAL__sub_I_currentPattern+0x58>)
     41a:	4e14      	ldr	r6, [pc, #80]	; (46c <_GLOBAL__sub_I_currentPattern+0x5c>)
     41c:	4d14      	ldr	r5, [pc, #80]	; (470 <_GLOBAL__sub_I_currentPattern+0x60>)
     41e:	4c15      	ldr	r4, [pc, #84]	; (474 <_GLOBAL__sub_I_currentPattern+0x64>)
     420:	4a15      	ldr	r2, [pc, #84]	; (478 <_GLOBAL__sub_I_currentPattern+0x68>)
     422:	f8d3 e000 	ldr.w	lr, [r3]
     426:	6800      	ldr	r0, [r0, #0]
     428:	4b14      	ldr	r3, [pc, #80]	; (47c <_GLOBAL__sub_I_currentPattern+0x6c>)
     42a:	683f      	ldr	r7, [r7, #0]
     42c:	6836      	ldr	r6, [r6, #0]
     42e:	682d      	ldr	r5, [r5, #0]
     430:	6824      	ldr	r4, [r4, #0]
     432:	6812      	ldr	r2, [r2, #0]
     434:	6058      	str	r0, [r3, #4]
     436:	4812      	ldr	r0, [pc, #72]	; (480 <_GLOBAL__sub_I_currentPattern+0x70>)
     438:	f8c3 e000 	str.w	lr, [r3]
     43c:	609f      	str	r7, [r3, #8]
     43e:	60de      	str	r6, [r3, #12]
     440:	611d      	str	r5, [r3, #16]
     442:	615c      	str	r4, [r3, #20]
     444:	619a      	str	r2, [r3, #24]
     446:	f002 fefb 	bl	3240 <TeensyTimerTool::Timer::Timer(TeensyTimerTool::ITimerChannel* (*)())>
TeensyTimerTool::Timer EncoderTimer;
     44a:	2100      	movs	r1, #0
     44c:	480d      	ldr	r0, [pc, #52]	; (484 <_GLOBAL__sub_I_currentPattern+0x74>)
     44e:	f002 fef7 	bl	3240 <TeensyTimerTool::Timer::Timer(TeensyTimerTool::ITimerChannel* (*)())>
TeensyTimerTool::Timer ButtonTimer;
     452:	2100      	movs	r1, #0
     454:	480c      	ldr	r0, [pc, #48]	; (488 <_GLOBAL__sub_I_currentPattern+0x78>)

// the loop function runs over and over again until power down or reset
void loop() {
	updateScreen(&screenBank, &currentPattern, &currentGlobals);

     456:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
volatile Pattern currentPattern;
volatile Globals currentGlobals;
volatile Screen screenBank;
TeensyTimerTool::Timer OLEDTimer;
TeensyTimerTool::Timer EncoderTimer;
TeensyTimerTool::Timer ButtonTimer;
     45a:	f002 bef1 	b.w	3240 <TeensyTimerTool::Timer::Timer(TeensyTimerTool::ITimerChannel* (*)())>
     45e:	bf00      	nop
     460:	20000250 	.word	0x20000250
     464:	2000024c 	.word	0x2000024c
     468:	20000254 	.word	0x20000254
     46c:	20000258 	.word	0x20000258
     470:	2000025c 	.word	0x2000025c
     474:	20000264 	.word	0x20000264
     478:	20000260 	.word	0x20000260
     47c:	20001298 	.word	0x20001298
     480:	20001278 	.word	0x20001278
     484:	20001268 	.word	0x20001268
     488:	20001288 	.word	0x20001288

0000048c <listenButton(Globals volatile*)>:
	//do we need to do anything else?
}

void listenButton(volatile Globals* buttonGlobals) 
{
	if (clockState) 
     48c:	4a23      	ldr	r2, [pc, #140]	; (51c <listenButton(Globals volatile*)+0x90>)

	//do we need to do anything else?
}

void listenButton(volatile Globals* buttonGlobals) 
{
     48e:	b430      	push	{r4, r5}
	if (clockState) 
     490:	7813      	ldrb	r3, [r2, #0]
			} else if (pin == 33) {
				CORE_PIN33_PORTCLEAR = CORE_PIN33_BITMASK;
			} else if (pin == 34) {
				CORE_PIN34_PORTCLEAR = CORE_PIN34_BITMASK;
			} else if (pin == 35) {
				CORE_PIN35_PORTCLEAR = CORE_PIN35_BITMASK;
     492:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     496:	4c22      	ldr	r4, [pc, #136]	; (520 <listenButton(Globals volatile*)+0x94>)
     498:	2b00      	cmp	r3, #0
     49a:	d035      	beq.n	508 <listenButton(Globals volatile*)+0x7c>
	{
		digitalWriteFast(buttonClock, LOW);
		clockState = 0;
     49c:	2100      	movs	r1, #0
     49e:	4b21      	ldr	r3, [pc, #132]	; (524 <listenButton(Globals volatile*)+0x98>)
     4a0:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
     4a4:	7011      	strb	r1, [r2, #0]
	{
		digitalWriteFast(buttonClock, HIGH);
		clockState = 1;
		clockCounter++;
	}
	if (clockCounter = readTime) 
     4a6:	240a      	movs	r4, #10
			} else if (pin == 31) {
				CORE_PIN31_PORTSET = CORE_PIN31_BITMASK;
			} else if (pin == 32) {
				CORE_PIN32_PORTSET = CORE_PIN32_BITMASK;
			} else if (pin == 33) {
				CORE_PIN33_PORTSET = CORE_PIN33_BITMASK;
     4a8:	4a1f      	ldr	r2, [pc, #124]	; (528 <listenButton(Globals volatile*)+0x9c>)
     4aa:	2180      	movs	r1, #128	; 0x80
     4ac:	701c      	strb	r4, [r3, #0]
     4ae:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
	{
		digitalWriteFast(buttonLatch, HIGH);
		
	}
	if (clockCounter > readTime) 
     4b2:	781a      	ldrb	r2, [r3, #0]
     4b4:	42a2      	cmp	r2, r4
     4b6:	d90a      	bls.n	4ce <listenButton(Globals volatile*)+0x42>
		} else if (pin == 32) {
			return (CORE_PIN32_PINREG & CORE_PIN32_BITMASK) ? 1 : 0;
		} else if (pin == 33) {
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else if (pin == 34) {
			return (CORE_PIN34_PINREG & CORE_PIN34_BITMASK) ? 1 : 0;
     4b8:	4919      	ldr	r1, [pc, #100]	; (520 <listenButton(Globals volatile*)+0x94>)
	{
		//read stuff here
		rawButtoninput |= digitalReadFast(buttonData); //returns 00000001 or 00000000
     4ba:	4a1c      	ldr	r2, [pc, #112]	; (52c <listenButton(Globals volatile*)+0xa0>)
     4bc:	6889      	ldr	r1, [r1, #8]
     4be:	6814      	ldr	r4, [r2, #0]
     4c0:	f3c1 7140 	ubfx	r1, r1, #29, #1
     4c4:	4321      	orrs	r1, r4
     4c6:	6011      	str	r1, [r2, #0]
		rawButtoninput = rawButtoninput << 1; //this should end up being a 24 bit number, where bit 23-16 are GP buttons and two encoder buttons, and Bits 
     4c8:	6811      	ldr	r1, [r2, #0]
     4ca:	0049      	lsls	r1, r1, #1
     4cc:	6011      	str	r1, [r2, #0]
		//0-15 are our 16 trigger inputs. this is probably backwards.
	}

	if (clockCounter > numButtons+readTime) 
     4ce:	781b      	ldrb	r3, [r3, #0]
     4d0:	4a14      	ldr	r2, [pc, #80]	; (524 <listenButton(Globals volatile*)+0x98>)
     4d2:	2b22      	cmp	r3, #34	; 0x22
     4d4:	d916      	bls.n	504 <listenButton(Globals volatile*)+0x78>
	{
		clockCounter = 0;
     4d6:	2100      	movs	r1, #0
		digitalWriteFast(buttonLatch, LOW);
		buttonGlobals->currentTrigButtons = rawButtoninput & triggerMask;
     4d8:	4b14      	ldr	r3, [pc, #80]	; (52c <listenButton(Globals volatile*)+0xa0>)
			} else if (pin == 31) {
				CORE_PIN31_PORTCLEAR = CORE_PIN31_BITMASK;
			} else if (pin == 32) {
				CORE_PIN32_PORTCLEAR = CORE_PIN32_BITMASK;
			} else if (pin == 33) {
				CORE_PIN33_PORTCLEAR = CORE_PIN33_BITMASK;
     4da:	4c13      	ldr	r4, [pc, #76]	; (528 <listenButton(Globals volatile*)+0x9c>)
     4dc:	2580      	movs	r5, #128	; 0x80
		//0-15 are our 16 trigger inputs. this is probably backwards.
	}

	if (clockCounter > numButtons+readTime) 
	{
		clockCounter = 0;
     4de:	7011      	strb	r1, [r2, #0]
     4e0:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
		digitalWriteFast(buttonLatch, LOW);
		buttonGlobals->currentTrigButtons = rawButtoninput & triggerMask;
     4e4:	681a      	ldr	r2, [r3, #0]
		buttonGlobals->currentGPButtons = rawButtoninput & GPMask;
		if (rawButtoninput!=previousRawButtonRead) 
     4e6:	4c12      	ldr	r4, [pc, #72]	; (530 <listenButton(Globals volatile*)+0xa4>)

	if (clockCounter > numButtons+readTime) 
	{
		clockCounter = 0;
		digitalWriteFast(buttonLatch, LOW);
		buttonGlobals->currentTrigButtons = rawButtoninput & triggerMask;
     4e8:	b292      	uxth	r2, r2
     4ea:	8002      	strh	r2, [r0, #0]
		buttonGlobals->currentGPButtons = rawButtoninput & GPMask;
     4ec:	681a      	ldr	r2, [r3, #0]
     4ee:	7081      	strb	r1, [r0, #2]
		if (rawButtoninput!=previousRawButtonRead) 
     4f0:	6819      	ldr	r1, [r3, #0]
     4f2:	6822      	ldr	r2, [r4, #0]
     4f4:	4291      	cmp	r1, r2
     4f6:	d005      	beq.n	504 <listenButton(Globals volatile*)+0x78>
		{
			buttonGlobals->valueChangeFlag |= (1 << triggerChange);
     4f8:	7bc2      	ldrb	r2, [r0, #15]
     4fa:	f042 0202 	orr.w	r2, r2, #2
     4fe:	73c2      	strb	r2, [r0, #15]
			previousRawButtonRead = rawButtoninput;	
     500:	681b      	ldr	r3, [r3, #0]
     502:	6023      	str	r3, [r4, #0]
		}

	}
     504:	bc30      	pop	{r4, r5}
     506:	4770      	bx	lr
		clockState = 0;
	}
	else 
	{
		digitalWriteFast(buttonClock, HIGH);
		clockState = 1;
     508:	2101      	movs	r1, #1
		clockCounter++;
     50a:	4b06      	ldr	r3, [pc, #24]	; (524 <listenButton(Globals volatile*)+0x98>)
			} else if (pin == 33) {
				CORE_PIN33_PORTSET = CORE_PIN33_BITMASK;
			} else if (pin == 34) {
				CORE_PIN34_PORTSET = CORE_PIN34_BITMASK;
			} else if (pin == 35) {
				CORE_PIN35_PORTSET = CORE_PIN35_BITMASK;
     50c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		clockState = 0;
	}
	else 
	{
		digitalWriteFast(buttonClock, HIGH);
		clockState = 1;
     510:	7011      	strb	r1, [r2, #0]
		clockCounter++;
     512:	781a      	ldrb	r2, [r3, #0]
     514:	440a      	add	r2, r1
     516:	b2d2      	uxtb	r2, r2
     518:	701a      	strb	r2, [r3, #0]
     51a:	e7c4      	b.n	4a6 <listenButton(Globals volatile*)+0x1a>
     51c:	200017e8 	.word	0x200017e8
     520:	42004000 	.word	0x42004000
     524:	200017e9 	.word	0x200017e9
     528:	4200c000 	.word	0x4200c000
     52c:	200017ec 	.word	0x200017ec
     530:	200017e4 	.word	0x200017e4

00000534 <initEncoders()>:
uint8_t topEncoderLastValue = 0;
uint8_t bottomEncoderLastValue = 0;

void initEncoders() 
{
	pinMode(2, INPUT_PULLUP);
     534:	2102      	movs	r1, #2
//volatile uint8_t bottomEncoderValue;
uint8_t topEncoderLastValue = 0;
uint8_t bottomEncoderLastValue = 0;

void initEncoders() 
{
     536:	b508      	push	{r3, lr}
	pinMode(2, INPUT_PULLUP);
     538:	4608      	mov	r0, r1
     53a:	f003 fa77 	bl	3a2c <pinMode>
	pinMode(3, INPUT_PULLUP);
     53e:	2102      	movs	r1, #2
     540:	2003      	movs	r0, #3
     542:	f003 fa73 	bl	3a2c <pinMode>
	pinMode(4, INPUT_PULLUP);
     546:	2102      	movs	r1, #2
     548:	2004      	movs	r0, #4
     54a:	f003 fa6f 	bl	3a2c <pinMode>
	pinMode(5, INPUT_PULLUP);
     54e:	2102      	movs	r1, #2
     550:	2005      	movs	r0, #5

}
     552:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void initEncoders() 
{
	pinMode(2, INPUT_PULLUP);
	pinMode(3, INPUT_PULLUP);
	pinMode(4, INPUT_PULLUP);
	pinMode(5, INPUT_PULLUP);
     556:	f003 ba69 	b.w	3a2c <pinMode>
     55a:	bf00      	nop

0000055c <listenEncoders(Globals volatile*)>:

void listenEncoders(volatile Globals *encoderGlobals) 
{
	//we'll be calling this every millisecond. 
	//still need to implement bottom encoder. 
	prevNextCodeTop = prevNextCodeTop << 1;
     55c:	4b4f      	ldr	r3, [pc, #316]	; (69c <listenEncoders(Globals volatile*)+0x140>)
	prevNextCodeTop |= digitalReadFast(3);
	prevNextCodeTop = prevNextCodeTop << 1;
	prevNextCodeTop |= digitalReadFast(2);
	prevNextCodeTop &= 0x0F;

	prevNextCodeBottom = prevNextCodeBottom << 1;
     55e:	4a50      	ldr	r2, [pc, #320]	; (6a0 <listenEncoders(Globals volatile*)+0x144>)
	pinMode(5, INPUT_PULLUP);

}

void listenEncoders(volatile Globals *encoderGlobals) 
{
     560:	b470      	push	{r4, r5, r6}
	//we'll be calling this every millisecond. 
	//still need to implement bottom encoder. 
	prevNextCodeTop = prevNextCodeTop << 1;
     562:	7819      	ldrb	r1, [r3, #0]
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
     564:	4d4f      	ldr	r5, [pc, #316]	; (6a4 <listenEncoders(Globals volatile*)+0x148>)
     566:	0049      	lsls	r1, r1, #1
	prevNextCodeBottom |= digitalReadFast(4);
	prevNextCodeBottom &= 0x0F;



	if (rotEncTable[prevNextCodeTop])
     568:	4c4f      	ldr	r4, [pc, #316]	; (6a8 <listenEncoders(Globals volatile*)+0x14c>)

void listenEncoders(volatile Globals *encoderGlobals) 
{
	//we'll be calling this every millisecond. 
	//still need to implement bottom encoder. 
	prevNextCodeTop = prevNextCodeTop << 1;
     56a:	b2c9      	uxtb	r1, r1
     56c:	7019      	strb	r1, [r3, #0]
     56e:	68a9      	ldr	r1, [r5, #8]
	prevNextCodeTop |= digitalReadFast(3);
     570:	781e      	ldrb	r6, [r3, #0]
     572:	f3c1 1140 	ubfx	r1, r1, #5, #1
     576:	4331      	orrs	r1, r6
     578:	7019      	strb	r1, [r3, #0]
	prevNextCodeTop = prevNextCodeTop << 1;
     57a:	7819      	ldrb	r1, [r3, #0]
     57c:	0049      	lsls	r1, r1, #1
     57e:	b2c9      	uxtb	r1, r1
     580:	7019      	strb	r1, [r3, #0]
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
     582:	68a9      	ldr	r1, [r5, #8]
	prevNextCodeTop |= digitalReadFast(2);
     584:	781e      	ldrb	r6, [r3, #0]
     586:	f3c1 1100 	ubfx	r1, r1, #4, #1
     58a:	4331      	orrs	r1, r6
     58c:	7019      	strb	r1, [r3, #0]
	prevNextCodeTop &= 0x0F;
     58e:	7819      	ldrb	r1, [r3, #0]
     590:	f001 010f 	and.w	r1, r1, #15
     594:	7019      	strb	r1, [r3, #0]

	prevNextCodeBottom = prevNextCodeBottom << 1;
     596:	7811      	ldrb	r1, [r2, #0]
     598:	0049      	lsls	r1, r1, #1
     59a:	b2c9      	uxtb	r1, r1
     59c:	7011      	strb	r1, [r2, #0]
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
		} else if (pin == 4) {
			return (CORE_PIN4_PINREG & CORE_PIN4_BITMASK) ? 1 : 0;
		} else if (pin == 5) {
			return (CORE_PIN5_PINREG & CORE_PIN5_BITMASK) ? 1 : 0;
     59e:	68a9      	ldr	r1, [r5, #8]
	prevNextCodeBottom |= digitalReadFast(5);
     5a0:	7816      	ldrb	r6, [r2, #0]
     5a2:	f3c1 2100 	ubfx	r1, r1, #8, #1
     5a6:	4331      	orrs	r1, r6
     5a8:	7011      	strb	r1, [r2, #0]
	prevNextCodeBottom = prevNextCodeBottom << 1;
     5aa:	7811      	ldrb	r1, [r2, #0]
     5ac:	0049      	lsls	r1, r1, #1
     5ae:	b2c9      	uxtb	r1, r1
     5b0:	7011      	strb	r1, [r2, #0]
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
		} else if (pin == 4) {
			return (CORE_PIN4_PINREG & CORE_PIN4_BITMASK) ? 1 : 0;
     5b2:	68a9      	ldr	r1, [r5, #8]
	prevNextCodeBottom |= digitalReadFast(4);
     5b4:	7815      	ldrb	r5, [r2, #0]
     5b6:	f3c1 1180 	ubfx	r1, r1, #6, #1
     5ba:	4329      	orrs	r1, r5
     5bc:	7011      	strb	r1, [r2, #0]
	prevNextCodeBottom &= 0x0F;
     5be:	7811      	ldrb	r1, [r2, #0]
     5c0:	f001 010f 	and.w	r1, r1, #15
     5c4:	7011      	strb	r1, [r2, #0]



	if (rotEncTable[prevNextCodeTop])
     5c6:	7819      	ldrb	r1, [r3, #0]
     5c8:	5661      	ldrsb	r1, [r4, r1]
     5ca:	b171      	cbz	r1, 5ea <listenEncoders(Globals volatile*)+0x8e>
	{
		storeTop = storeTop << 4;
     5cc:	4937      	ldr	r1, [pc, #220]	; (6ac <listenEncoders(Globals volatile*)+0x150>)
     5ce:	780d      	ldrb	r5, [r1, #0]
     5d0:	012d      	lsls	r5, r5, #4
     5d2:	b2ed      	uxtb	r5, r5
     5d4:	700d      	strb	r5, [r1, #0]
		storeTop |= prevNextCodeTop;
     5d6:	781d      	ldrb	r5, [r3, #0]
     5d8:	780b      	ldrb	r3, [r1, #0]
     5da:	432b      	orrs	r3, r5
     5dc:	700b      	strb	r3, [r1, #0]
		if ((storeTop&0xFF)==0x2B) 
     5de:	780b      	ldrb	r3, [r1, #0]
     5e0:	2b2b      	cmp	r3, #43	; 0x2b
     5e2:	d038      	beq.n	656 <listenEncoders(Globals volatile*)+0xfa>
			currentTopEncoderMenu = currentTopEncoderMenu << 4;
			currentTopEncoderMenu = currentTopEncoderMenu & 0b01110000; //stay in range, we don't want to trigger a click
			encoderGlobals->menuState = currentTopEncoderMenu; //assign the new menustate
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
		}
		if ((storeTop & 0xFF) == 0x17) 
     5e4:	780b      	ldrb	r3, [r1, #0]
     5e6:	2b17      	cmp	r3, #23
     5e8:	d046      	beq.n	678 <listenEncoders(Globals volatile*)+0x11c>
			encoderGlobals->menuState = currentTopEncoderMenu; //assign the new menustate
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
		}
	}

	if (rotEncTable[prevNextCodeBottom])
     5ea:	7813      	ldrb	r3, [r2, #0]
     5ec:	4d2c      	ldr	r5, [pc, #176]	; (6a0 <listenEncoders(Globals volatile*)+0x144>)
     5ee:	56e3      	ldrsb	r3, [r4, r3]
     5f0:	b17b      	cbz	r3, 612 <listenEncoders(Globals volatile*)+0xb6>
	{
		storeBottom = storeBottom << 4;
     5f2:	4a2f      	ldr	r2, [pc, #188]	; (6b0 <listenEncoders(Globals volatile*)+0x154>)
		storeBottom |= prevNextCodeBottom; //This whole thing should probably be handled differently
		if ((storeTop & 0xFF) == 0x2B)
     5f4:	492d      	ldr	r1, [pc, #180]	; (6ac <listenEncoders(Globals volatile*)+0x150>)
		}
	}

	if (rotEncTable[prevNextCodeBottom])
	{
		storeBottom = storeBottom << 4;
     5f6:	7813      	ldrb	r3, [r2, #0]
     5f8:	011b      	lsls	r3, r3, #4
     5fa:	b2db      	uxtb	r3, r3
     5fc:	7013      	strb	r3, [r2, #0]
		storeBottom |= prevNextCodeBottom; //This whole thing should probably be handled differently
     5fe:	782c      	ldrb	r4, [r5, #0]
     600:	7813      	ldrb	r3, [r2, #0]
     602:	4323      	orrs	r3, r4
     604:	7013      	strb	r3, [r2, #0]
		if ((storeTop & 0xFF) == 0x2B)
     606:	780b      	ldrb	r3, [r1, #0]
     608:	2b2b      	cmp	r3, #43	; 0x2b
     60a:	d013      	beq.n	634 <listenEncoders(Globals volatile*)+0xd8>
			currentBottomEncoderMenu++;
			currentBottomEncoderMenu = currentBottomEncoderMenu & 0b00000111; 
			encoderGlobals->menuState = (encoderGlobals->menuState & 0b11111000) | currentBottomEncoderMenu;
			encoderGlobals->valueChangeFlag |= (1 << encoderChange); 
		}
		if ((storeTop & 0xFF) == 0x17)
     60c:	780b      	ldrb	r3, [r1, #0]
     60e:	2b17      	cmp	r3, #23
     610:	d001      	beq.n	616 <listenEncoders(Globals volatile*)+0xba>
			currentBottomEncoderMenu = currentBottomEncoderMenu & 0b00000111;
			encoderGlobals->menuState = (encoderGlobals->menuState & 0b11111000) | currentBottomEncoderMenu;
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
		}
	}
     612:	bc70      	pop	{r4, r5, r6}
     614:	4770      	bx	lr
			encoderGlobals->menuState = (encoderGlobals->menuState & 0b11111000) | currentBottomEncoderMenu;
			encoderGlobals->valueChangeFlag |= (1 << encoderChange); 
		}
		if ((storeTop & 0xFF) == 0x17)
		{
			uint8_t currentBottomEncoderMenu = (encoderGlobals->menuState) & 0b00000111; //we only use the bottom 3 bits to make menu changes;
     616:	7ac3      	ldrb	r3, [r0, #11]
			currentBottomEncoderMenu--;
			currentBottomEncoderMenu = currentBottomEncoderMenu & 0b00000111;
			encoderGlobals->menuState = (encoderGlobals->menuState & 0b11111000) | currentBottomEncoderMenu;
     618:	7ac2      	ldrb	r2, [r0, #11]
			encoderGlobals->valueChangeFlag |= (1 << encoderChange); 
		}
		if ((storeTop & 0xFF) == 0x17)
		{
			uint8_t currentBottomEncoderMenu = (encoderGlobals->menuState) & 0b00000111; //we only use the bottom 3 bits to make menu changes;
			currentBottomEncoderMenu--;
     61a:	3307      	adds	r3, #7
			currentBottomEncoderMenu = currentBottomEncoderMenu & 0b00000111;
			encoderGlobals->menuState = (encoderGlobals->menuState & 0b11111000) | currentBottomEncoderMenu;
     61c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
     620:	f003 0307 	and.w	r3, r3, #7
     624:	4313      	orrs	r3, r2
     626:	72c3      	strb	r3, [r0, #11]
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
     628:	7bc3      	ldrb	r3, [r0, #15]
     62a:	f043 0301 	orr.w	r3, r3, #1
		}
	}
     62e:	bc70      	pop	{r4, r5, r6}
		{
			uint8_t currentBottomEncoderMenu = (encoderGlobals->menuState) & 0b00000111; //we only use the bottom 3 bits to make menu changes;
			currentBottomEncoderMenu--;
			currentBottomEncoderMenu = currentBottomEncoderMenu & 0b00000111;
			encoderGlobals->menuState = (encoderGlobals->menuState & 0b11111000) | currentBottomEncoderMenu;
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
     630:	73c3      	strb	r3, [r0, #15]
		}
	}
     632:	4770      	bx	lr
	{
		storeBottom = storeBottom << 4;
		storeBottom |= prevNextCodeBottom; //This whole thing should probably be handled differently
		if ((storeTop & 0xFF) == 0x2B)
		{
			uint8_t currentBottomEncoderMenu = (encoderGlobals->menuState) & 0b00000111; //we only use the bottom 3 bits to make menu changes;
     634:	7ac3      	ldrb	r3, [r0, #11]
			currentBottomEncoderMenu++;
			currentBottomEncoderMenu = currentBottomEncoderMenu & 0b00000111; 
			encoderGlobals->menuState = (encoderGlobals->menuState & 0b11111000) | currentBottomEncoderMenu;
     636:	7ac2      	ldrb	r2, [r0, #11]
		storeBottom = storeBottom << 4;
		storeBottom |= prevNextCodeBottom; //This whole thing should probably be handled differently
		if ((storeTop & 0xFF) == 0x2B)
		{
			uint8_t currentBottomEncoderMenu = (encoderGlobals->menuState) & 0b00000111; //we only use the bottom 3 bits to make menu changes;
			currentBottomEncoderMenu++;
     638:	3301      	adds	r3, #1
			currentBottomEncoderMenu = currentBottomEncoderMenu & 0b00000111; 
			encoderGlobals->menuState = (encoderGlobals->menuState & 0b11111000) | currentBottomEncoderMenu;
     63a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
     63e:	f003 0307 	and.w	r3, r3, #7
     642:	4313      	orrs	r3, r2
     644:	72c3      	strb	r3, [r0, #11]
			encoderGlobals->valueChangeFlag |= (1 << encoderChange); 
     646:	7bc3      	ldrb	r3, [r0, #15]
     648:	f043 0301 	orr.w	r3, r3, #1
     64c:	73c3      	strb	r3, [r0, #15]
		}
		if ((storeTop & 0xFF) == 0x17)
     64e:	780b      	ldrb	r3, [r1, #0]
     650:	2b17      	cmp	r3, #23
     652:	d1de      	bne.n	612 <listenEncoders(Globals volatile*)+0xb6>
     654:	e7df      	b.n	616 <listenEncoders(Globals volatile*)+0xba>
	{
		storeTop = storeTop << 4;
		storeTop |= prevNextCodeTop;
		if ((storeTop&0xFF)==0x2B) 
		{
			uint8_t currentTopEncoderMenu = (encoderGlobals->menuState)&0b01110000;
     656:	7ac3      	ldrb	r3, [r0, #11]
			currentTopEncoderMenu = currentTopEncoderMenu >> 4; 
     658:	f3c3 1302 	ubfx	r3, r3, #4, #3
			currentTopEncoderMenu++;
     65c:	3301      	adds	r3, #1
			if (currentTopEncoderMenu > 3) 
     65e:	2b03      	cmp	r3, #3
     660:	d818      	bhi.n	694 <listenEncoders(Globals volatile*)+0x138>
     662:	011b      	lsls	r3, r3, #4
     664:	f003 0370 	and.w	r3, r3, #112	; 0x70
			{
				currentTopEncoderMenu = 0;
			}
			currentTopEncoderMenu = currentTopEncoderMenu << 4;
			currentTopEncoderMenu = currentTopEncoderMenu & 0b01110000; //stay in range, we don't want to trigger a click
			encoderGlobals->menuState = currentTopEncoderMenu; //assign the new menustate
     668:	72c3      	strb	r3, [r0, #11]
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
     66a:	7bc3      	ldrb	r3, [r0, #15]
     66c:	f043 0301 	orr.w	r3, r3, #1
     670:	73c3      	strb	r3, [r0, #15]
		}
		if ((storeTop & 0xFF) == 0x17) 
     672:	780b      	ldrb	r3, [r1, #0]
     674:	2b17      	cmp	r3, #23
     676:	d1b8      	bne.n	5ea <listenEncoders(Globals volatile*)+0x8e>
		{
			uint8_t currentTopEncoderMenu = (encoderGlobals->menuState) & 0b01110000;
     678:	7ac3      	ldrb	r3, [r0, #11]
			currentTopEncoderMenu = currentTopEncoderMenu >> 4;
     67a:	f3c3 1302 	ubfx	r3, r3, #4, #3
			if (currentTopEncoderMenu == 0) 
     67e:	b15b      	cbz	r3, 698 <listenEncoders(Globals volatile*)+0x13c>
     680:	3b01      	subs	r3, #1
     682:	011b      	lsls	r3, r3, #4
     684:	f003 0370 	and.w	r3, r3, #112	; 0x70
				currentTopEncoderMenu = 4; //set this to 1 higher than the last menu option. 
			}
			currentTopEncoderMenu--;
			currentTopEncoderMenu = currentTopEncoderMenu << 4;
			currentTopEncoderMenu = currentTopEncoderMenu & 0b01110000; //stay in range, we don't want to trigger a click
			encoderGlobals->menuState = currentTopEncoderMenu; //assign the new menustate
     688:	72c3      	strb	r3, [r0, #11]
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
     68a:	7bc3      	ldrb	r3, [r0, #15]
     68c:	f043 0301 	orr.w	r3, r3, #1
     690:	73c3      	strb	r3, [r0, #15]
     692:	e7aa      	b.n	5ea <listenEncoders(Globals volatile*)+0x8e>
     694:	2300      	movs	r3, #0
     696:	e7e7      	b.n	668 <listenEncoders(Globals volatile*)+0x10c>
     698:	2330      	movs	r3, #48	; 0x30
     69a:	e7f5      	b.n	688 <listenEncoders(Globals volatile*)+0x12c>
     69c:	200017f3 	.word	0x200017f3
     6a0:	200017f1 	.word	0x200017f1
     6a4:	4200c000 	.word	0x4200c000
     6a8:	20000000 	.word	0x20000000
     6ac:	200017f0 	.word	0x200017f0
     6b0:	200017f2 	.word	0x200017f2

000006b4 <initBank(Pattern volatile*)>:
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
		currentInitPattern->trackPlayMode[i] = 0x01;
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     6b4:	2200      	movs	r2, #0

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     6b6:	f04f 0c02 	mov.w	ip, #2
     6ba:	2107      	movs	r1, #7
		currentInitPattern->trackPlayMode[i] = 0x01;
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     6bc:	4613      	mov	r3, r2
// 

#include "globalVariables.h"

void initBank(volatile Pattern* currentInitPattern)
{
     6be:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     6c0:	2501      	movs	r5, #1
		currentInitPattern->trackPlayMode[i] = 0x01;
		currentInitPattern->envelopeType[i] = 3;
     6c2:	2403      	movs	r4, #3

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     6c4:	f04f 0e04 	mov.w	lr, #4
     6c8:	2705      	movs	r7, #5
     6ca:	2606      	movs	r6, #6
     6cc:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
		currentInitPattern->trackPlayMode[i] = 0x01;
     6d0:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		currentInitPattern->envelopeType[i] = 3;
     6d4:	f880 40eb 	strb.w	r4, [r0, #235]	; 0xeb
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     6d8:	f880 20db 	strb.w	r2, [r0, #219]	; 0xdb
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     6dc:	f880 20cb 	strb.w	r2, [r0, #203]	; 0xcb

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     6e0:	f880 c0a9 	strb.w	ip, [r0, #169]	; 0xa9
     6e4:	f04f 0c08 	mov.w	ip, #8
		currentInitPattern->trackPlayMode[i] = 0x01;
     6e8:	f880 5089 	strb.w	r5, [r0, #137]	; 0x89
		currentInitPattern->envelopeType[i] = 3;
     6ec:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     6f0:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     6f4:	f880 20cc 	strb.w	r2, [r0, #204]	; 0xcc

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     6f8:	f880 40aa 	strb.w	r4, [r0, #170]	; 0xaa
		currentInitPattern->trackPlayMode[i] = 0x01;
     6fc:	f880 508a 	strb.w	r5, [r0, #138]	; 0x8a
		currentInitPattern->envelopeType[i] = 3;
     700:	f880 40ed 	strb.w	r4, [r0, #237]	; 0xed
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     704:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     708:	f880 20cd 	strb.w	r2, [r0, #205]	; 0xcd

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     70c:	f880 e0ab 	strb.w	lr, [r0, #171]	; 0xab
     710:	f04f 0e09 	mov.w	lr, #9
		currentInitPattern->trackPlayMode[i] = 0x01;
     714:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
		currentInitPattern->envelopeType[i] = 3;
     718:	f880 40ee 	strb.w	r4, [r0, #238]	; 0xee
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     71c:	f880 20de 	strb.w	r2, [r0, #222]	; 0xde
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     720:	f880 20ce 	strb.w	r2, [r0, #206]	; 0xce

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     724:	f880 70ac 	strb.w	r7, [r0, #172]	; 0xac
     728:	270a      	movs	r7, #10
		currentInitPattern->trackPlayMode[i] = 0x01;
     72a:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
		currentInitPattern->envelopeType[i] = 3;
     72e:	f880 40ef 	strb.w	r4, [r0, #239]	; 0xef
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     732:	f880 20df 	strb.w	r2, [r0, #223]	; 0xdf
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     736:	f880 20cf 	strb.w	r2, [r0, #207]	; 0xcf

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     73a:	f880 60ad 	strb.w	r6, [r0, #173]	; 0xad
     73e:	260b      	movs	r6, #11
		currentInitPattern->trackPlayMode[i] = 0x01;
     740:	f880 508d 	strb.w	r5, [r0, #141]	; 0x8d
		currentInitPattern->envelopeType[i] = 3;
     744:	f880 40f0 	strb.w	r4, [r0, #240]	; 0xf0
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     748:	f880 20e0 	strb.w	r2, [r0, #224]	; 0xe0
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     74c:	f880 20d0 	strb.w	r2, [r0, #208]	; 0xd0

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     750:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
     754:	210c      	movs	r1, #12
		currentInitPattern->trackPlayMode[i] = 0x01;
     756:	f880 508e 	strb.w	r5, [r0, #142]	; 0x8e
		currentInitPattern->envelopeType[i] = 3;
     75a:	f880 40f1 	strb.w	r4, [r0, #241]	; 0xf1
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     75e:	f880 20e1 	strb.w	r2, [r0, #225]	; 0xe1
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     762:	f880 20d1 	strb.w	r2, [r0, #209]	; 0xd1

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     766:	f880 c0af 	strb.w	ip, [r0, #175]	; 0xaf
     76a:	f04f 0c0d 	mov.w	ip, #13
		currentInitPattern->trackPlayMode[i] = 0x01;
     76e:	f880 508f 	strb.w	r5, [r0, #143]	; 0x8f
		currentInitPattern->envelopeType[i] = 3;
     772:	f880 40f2 	strb.w	r4, [r0, #242]	; 0xf2
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     776:	f880 20e2 	strb.w	r2, [r0, #226]	; 0xe2
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     77a:	f880 20d2 	strb.w	r2, [r0, #210]	; 0xd2

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     77e:	f880 e0b0 	strb.w	lr, [r0, #176]	; 0xb0
     782:	f04f 0e0e 	mov.w	lr, #14
		currentInitPattern->trackPlayMode[i] = 0x01;
     786:	f880 5090 	strb.w	r5, [r0, #144]	; 0x90
		currentInitPattern->envelopeType[i] = 3;
     78a:	f880 40f3 	strb.w	r4, [r0, #243]	; 0xf3
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     78e:	f880 20e3 	strb.w	r2, [r0, #227]	; 0xe3
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     792:	f880 20d3 	strb.w	r2, [r0, #211]	; 0xd3

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     796:	f880 70b1 	strb.w	r7, [r0, #177]	; 0xb1
     79a:	270f      	movs	r7, #15
		currentInitPattern->trackPlayMode[i] = 0x01;
     79c:	f880 5091 	strb.w	r5, [r0, #145]	; 0x91
		currentInitPattern->envelopeType[i] = 3;
     7a0:	f880 40f4 	strb.w	r4, [r0, #244]	; 0xf4
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     7a4:	f880 20e4 	strb.w	r2, [r0, #228]	; 0xe4
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     7a8:	f880 20d4 	strb.w	r2, [r0, #212]	; 0xd4

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     7ac:	f880 60b2 	strb.w	r6, [r0, #178]	; 0xb2
     7b0:	2610      	movs	r6, #16
		currentInitPattern->trackPlayMode[i] = 0x01;
     7b2:	f880 5092 	strb.w	r5, [r0, #146]	; 0x92
		currentInitPattern->envelopeType[i] = 3;
     7b6:	f880 40f5 	strb.w	r4, [r0, #245]	; 0xf5
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     7ba:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     7be:	f880 20d5 	strb.w	r2, [r0, #213]	; 0xd5

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     7c2:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
		currentInitPattern->trackSustainTimeMSB[i] = 0;
	}

	for (uint8_t j = 0; j < 64; j++)
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     7c6:	4611      	mov	r1, r2
void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
		currentInitPattern->trackPlayMode[i] = 0x01;
     7c8:	f880 5093 	strb.w	r5, [r0, #147]	; 0x93
		currentInitPattern->envelopeType[i] = 3;
     7cc:	f880 40f6 	strb.w	r4, [r0, #246]	; 0xf6
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     7d0:	f880 20e6 	strb.w	r2, [r0, #230]	; 0xe6
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     7d4:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     7d8:	f880 c0b4 	strb.w	ip, [r0, #180]	; 0xb4
		currentInitPattern->trackPlayMode[i] = 0x01;
     7dc:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
		currentInitPattern->envelopeType[i] = 3;
     7e0:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     7e4:	f880 20e7 	strb.w	r2, [r0, #231]	; 0xe7
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     7e8:	f880 20d7 	strb.w	r2, [r0, #215]	; 0xd7

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     7ec:	f880 e0b5 	strb.w	lr, [r0, #181]	; 0xb5
		currentInitPattern->trackPlayMode[i] = 0x01;
     7f0:	f880 5095 	strb.w	r5, [r0, #149]	; 0x95
		currentInitPattern->envelopeType[i] = 3;
     7f4:	f880 40f8 	strb.w	r4, [r0, #248]	; 0xf8
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     7f8:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     7fc:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     800:	f880 70b6 	strb.w	r7, [r0, #182]	; 0xb6
		currentInitPattern->trackPlayMode[i] = 0x01;
     804:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
		currentInitPattern->envelopeType[i] = 3;
     808:	f880 40f9 	strb.w	r4, [r0, #249]	; 0xf9
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     80c:	f880 20e9 	strb.w	r2, [r0, #233]	; 0xe9
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     810:	f880 20d9 	strb.w	r2, [r0, #217]	; 0xd9

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     814:	f880 60b7 	strb.w	r6, [r0, #183]	; 0xb7
		currentInitPattern->trackPlayMode[i] = 0x01;
     818:	f880 5097 	strb.w	r5, [r0, #151]	; 0x97
		currentInitPattern->envelopeType[i] = 3;
     81c:	f880 40fa 	strb.w	r4, [r0, #250]	; 0xfa
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     820:	f880 20ea 	strb.w	r2, [r0, #234]	; 0xea
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     824:	f880 20da 	strb.w	r2, [r0, #218]	; 0xda
	}

	for (uint8_t j = 0; j < 64; j++)
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     828:	f103 027c 	add.w	r2, r3, #124	; 0x7c
     82c:	3301      	adds	r3, #1
     82e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
		currentInitPattern->trackSustainTimeMSB[i] = 0;
	}

	for (uint8_t j = 0; j < 64; j++)
     832:	2b40      	cmp	r3, #64	; 0x40
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     834:	8091      	strh	r1, [r2, #4]
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
		currentInitPattern->trackSustainTimeMSB[i] = 0;
	}

	for (uint8_t j = 0; j < 64; j++)
     836:	d1f7      	bne.n	828 <initBank(Pattern volatile*)+0x174>
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 

	}
	//We need to take these and put them in global. 
	currentInitPattern->patternBPM = 120;
     838:	2278      	movs	r2, #120	; 0x78
	currentInitPattern->numSteps = 16;
     83a:	2310      	movs	r3, #16
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 

	}
	//We need to take these and put them in global. 
	currentInitPattern->patternBPM = 120;
     83c:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
	currentInitPattern->numSteps = 16;
     840:	f880 30ca 	strb.w	r3, [r0, #202]	; 0xca
     844:	bdf0      	pop	{r4, r5, r6, r7, pc}
     846:	bf00      	nop

00000848 <initGlobals(Globals volatile*, unsigned char)>:
}
void initGlobals(volatile Globals* currentGlobals, uint8_t factoryReset)
{
	currentGlobals->currentTrigButtons = 0; //current state of Trig buttons.
     848:	2300      	movs	r3, #0
	currentGlobals->currentTrigSequencer = 0;
	currentGlobals->currentTrigMidi = 0;
	currentGlobals->oledReadIndex = 0;
	currentGlobals->oledWriteIndex = 0;

	if (factoryReset == 1)
     84a:	2901      	cmp	r1, #1
	currentInitPattern->patternBPM = 120;
	currentInitPattern->numSteps = 16;
}
void initGlobals(volatile Globals* currentGlobals, uint8_t factoryReset)
{
	currentGlobals->currentTrigButtons = 0; //current state of Trig buttons.
     84c:	8003      	strh	r3, [r0, #0]
	currentGlobals->currentGPButtons = 0; //current state of GP buttons
     84e:	7083      	strb	r3, [r0, #2]
	currentGlobals->currentPatternNumber = 0; //current pattern, between 1 and 256
     850:	7203      	strb	r3, [r0, #8]
	currentGlobals->currentStep = 0; // current step in the sequencer
     852:	7243      	strb	r3, [r0, #9]
	currentGlobals->currentTrack = 0; //current track being edited
     854:	7283      	strb	r3, [r0, #10]
	currentGlobals->menuState = 0; //where the menu is currently
     856:	72c3      	strb	r3, [r0, #11]
	currentGlobals->playState = 0; //whether the sequencer is playing, stopped, or paused.
     858:	7303      	strb	r3, [r0, #12]
	currentGlobals->factoryReset = 0; //we may not need this in this struct, but good to have for now.
     85a:	7343      	strb	r3, [r0, #13]
	currentGlobals->buttonSwitchFlag = 0; // could be rolled into value bits.
     85c:	7383      	strb	r3, [r0, #14]
	currentGlobals->valueChangeFlag = 0; //bit 0 -> changes in encoders, bit 1-> changes in buttons, bit2 -> changes in knobs
     85e:	73c3      	strb	r3, [r0, #15]
	currentGlobals->knobStatus = 0; //top 4 bits: knob type, bottom 4 bits: knob location.
     860:	7403      	strb	r3, [r0, #16]
	currentGlobals->releaseCounter = 0;
     862:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	currentGlobals->lastGlobalTimer = 0;
     866:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
	currentGlobals->clockCounter = 0;
     86a:	f8a0 30f0 	strh.w	r3, [r0, #240]	; 0xf0
	currentGlobals->currentTrigSequencer = 0;
     86e:	8083      	strh	r3, [r0, #4]
	currentGlobals->currentTrigMidi = 0;
     870:	80c3      	strh	r3, [r0, #6]
	currentGlobals->oledReadIndex = 0;
     872:	f880 32fa 	strb.w	r3, [r0, #762]	; 0x2fa
	currentGlobals->oledWriteIndex = 0;
     876:	f880 32fb 	strb.w	r3, [r0, #763]	; 0x2fb

	if (factoryReset == 1)
     87a:	d000      	beq.n	87e <initGlobals(Globals volatile*, unsigned char)+0x36>
     87c:	4770      	bx	lr
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
     87e:	2224      	movs	r2, #36	; 0x24
	currentGlobals->oledReadIndex = 0;
	currentGlobals->oledWriteIndex = 0;

	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
     880:	7443      	strb	r3, [r0, #17]
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
     882:	212a      	movs	r1, #42	; 0x2a
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
     884:	232c      	movs	r3, #44	; 0x2c
	currentGlobals->oledWriteIndex = 0;

	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
     886:	7482      	strb	r2, [r0, #18]
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
     888:	222b      	movs	r2, #43	; 0x2b
	//We need to take these and put them in global. 
	currentInitPattern->patternBPM = 120;
	currentInitPattern->numSteps = 16;
}
void initGlobals(volatile Globals* currentGlobals, uint8_t factoryReset)
{
     88a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
     88c:	2726      	movs	r7, #38	; 0x26
		currentGlobals->midiTrackNote[3] = 0x27;
     88e:	2627      	movs	r6, #39	; 0x27
		currentGlobals->midiTrackNote[4] = 0x28;
     890:	2528      	movs	r5, #40	; 0x28
		currentGlobals->midiTrackNote[5] = 0x29;
     892:	2429      	movs	r4, #41	; 0x29

	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
     894:	f04f 0e25 	mov.w	lr, #37	; 0x25
     898:	f880 e013 	strb.w	lr, [r0, #19]
		currentGlobals->midiTrackNote[2] = 0x26;
     89c:	7507      	strb	r7, [r0, #20]
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
     89e:	272d      	movs	r7, #45	; 0x2d
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
     8a0:	7546      	strb	r6, [r0, #21]
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
     8a2:	262e      	movs	r6, #46	; 0x2e
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
     8a4:	7585      	strb	r5, [r0, #22]
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
     8a6:	252f      	movs	r5, #47	; 0x2f
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
     8a8:	75c4      	strb	r4, [r0, #23]
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
     8aa:	2430      	movs	r4, #48	; 0x30
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
     8ac:	7601      	strb	r1, [r0, #24]
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
		currentGlobals->midiTrackNote[13] = 0x31;
     8ae:	2131      	movs	r1, #49	; 0x31
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
     8b0:	7642      	strb	r2, [r0, #25]
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
		currentGlobals->midiTrackNote[13] = 0x31;
		currentGlobals->midiTrackNote[14] = 0x32;
     8b2:	2232      	movs	r2, #50	; 0x32
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
     8b4:	7683      	strb	r3, [r0, #26]
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
		currentGlobals->midiTrackNote[13] = 0x31;
		currentGlobals->midiTrackNote[14] = 0x32;
		currentGlobals->midiTrackNote[15] = 0x33;
     8b6:	2333      	movs	r3, #51	; 0x33
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
     8b8:	76c7      	strb	r7, [r0, #27]
		currentGlobals->midiTrackNote[10] = 0x2e;
     8ba:	7706      	strb	r6, [r0, #28]
		currentGlobals->midiTrackNote[11] = 0x2f;
     8bc:	7745      	strb	r5, [r0, #29]
		currentGlobals->midiTrackNote[12] = 0x30;
     8be:	7784      	strb	r4, [r0, #30]
		currentGlobals->midiTrackNote[13] = 0x31;
     8c0:	77c1      	strb	r1, [r0, #31]
		currentGlobals->midiTrackNote[14] = 0x32;
     8c2:	f880 2020 	strb.w	r2, [r0, #32]
		currentGlobals->midiTrackNote[15] = 0x33;
     8c6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
     8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000008cc <initArrays(char volatile (*) [21], int, char*)>:
	}
}

void initArrays(volatile char myArray[9][21], int stringNumber, char* myString)
{
     8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8ce:	4606      	mov	r6, r0
	uint8_t lengthOfString = strlen(myString);
     8d0:	4610      	mov	r0, r2
		currentGlobals->midiTrackNote[15] = 0x33;
	}
}

void initArrays(volatile char myArray[9][21], int stringNumber, char* myString)
{
     8d2:	460f      	mov	r7, r1
     8d4:	4614      	mov	r4, r2
	uint8_t lengthOfString = strlen(myString);
     8d6:	f005 f8b3 	bl	5a40 <strlen>
     8da:	b2c0      	uxtb	r0, r0
	uint8_t charLeft = 20 - lengthOfString;
     8dc:	f1c0 0114 	rsb	r1, r0, #20
     8e0:	b2c9      	uxtb	r1, r1
	uint8_t currentIndex = 0;
	for (currentIndex; currentIndex < lengthOfString; currentIndex++)
     8e2:	b168      	cbz	r0, 900 <initArrays(char volatile (*) [21], int, char*)+0x34>
     8e4:	eb07 0547 	add.w	r5, r7, r7, lsl #1
     8e8:	1e62      	subs	r2, r4, #1
     8ea:	2300      	movs	r3, #0
     8ec:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
     8f0:	4435      	add	r5, r6
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     8f2:	f812 4f01 	ldrb.w	r4, [r2, #1]!
     8f6:	54ec      	strb	r4, [r5, r3]
     8f8:	3301      	adds	r3, #1
void initArrays(volatile char myArray[9][21], int stringNumber, char* myString)
{
	uint8_t lengthOfString = strlen(myString);
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for (currentIndex; currentIndex < lengthOfString; currentIndex++)
     8fa:	b2dc      	uxtb	r4, r3
     8fc:	4284      	cmp	r4, r0
     8fe:	d3f8      	bcc.n	8f2 <initArrays(char volatile (*) [21], int, char*)+0x26>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for (charLeft; charLeft > 0; charLeft--)
     900:	b169      	cbz	r1, 91e <initArrays(char volatile (*) [21], int, char*)+0x52>
     902:	eb07 0747 	add.w	r7, r7, r7, lsl #1
     906:	180a      	adds	r2, r1, r0
	{
		myArray[stringNumber][currentIndex] = ' ';
     908:	2120      	movs	r1, #32
     90a:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
     90e:	b2d2      	uxtb	r2, r2
     910:	443e      	add	r6, r7
		currentIndex++;
     912:	1c43      	adds	r3, r0, #1
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for (charLeft; charLeft > 0; charLeft--)
	{
		myArray[stringNumber][currentIndex] = ' ';
     914:	5431      	strb	r1, [r6, r0]
		currentIndex++;
     916:	b2d8      	uxtb	r0, r3
	for (currentIndex; currentIndex < lengthOfString; currentIndex++)
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for (charLeft; charLeft > 0; charLeft--)
     918:	4290      	cmp	r0, r2
     91a:	d1fa      	bne.n	912 <initArrays(char volatile (*) [21], int, char*)+0x46>
     91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000920 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)>:

uint8_t prevMenuState; //do we need this anymore?


void initMenu(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
     920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     924:	4605      	mov	r5, r0
     926:	4617      	mov	r7, r2
     928:	4688      	mov	r8, r1

	//screen0
	initArrays(initTheScreen->screen0, 0, "Performance Mode");
     92a:	4a5c      	ldr	r2, [pc, #368]	; (a9c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x17c>)
     92c:	2100      	movs	r1, #0
	initArrays(initTheScreen->screen0, 1, "Pattern:");
	initArrays(initTheScreen->screen0, 2, "BPM:");
	initArrays(initTheScreen->screen0, 3, "Stop");

	//screen1
	initArrays(initTheScreen->screen1, 0, "Sequence Edit");
     92e:	f100 06bd 	add.w	r6, r0, #189	; 0xbd

void initMenu(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{

	//screen0
	initArrays(initTheScreen->screen0, 0, "Performance Mode");
     932:	f7ff ffcb 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen0, 1, "Pattern:");
     936:	4628      	mov	r0, r5
     938:	4a59      	ldr	r2, [pc, #356]	; (aa0 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x180>)
     93a:	2101      	movs	r1, #1
     93c:	f7ff ffc6 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen0, 2, "BPM:");
     940:	4628      	mov	r0, r5
     942:	4a58      	ldr	r2, [pc, #352]	; (aa4 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x184>)
     944:	2102      	movs	r1, #2
     946:	f7ff ffc1 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen0, 3, "Stop");
     94a:	4628      	mov	r0, r5
     94c:	4a56      	ldr	r2, [pc, #344]	; (aa8 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x188>)
     94e:	2103      	movs	r1, #3
     950:	f7ff ffbc 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>

	//screen1
	initArrays(initTheScreen->screen1, 0, "Sequence Edit");
     954:	4630      	mov	r0, r6
     956:	4a55      	ldr	r2, [pc, #340]	; (aac <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x18c>)
     958:	2100      	movs	r1, #0
     95a:	f7ff ffb7 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen1, 1, "Pattern:");
     95e:	4630      	mov	r0, r6
     960:	4a4f      	ldr	r2, [pc, #316]	; (aa0 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x180>)
     962:	2101      	movs	r1, #1
	initArrays(initTheScreen->screen1, 2, "Steps:");
	initArrays(initTheScreen->screen1, 3, "Step number:");

	//screen2
	initArrays(initTheScreen->screen2, 0, "Track Settings");
     964:	f505 74bd 	add.w	r4, r5, #378	; 0x17a
	initArrays(initTheScreen->screen0, 2, "BPM:");
	initArrays(initTheScreen->screen0, 3, "Stop");

	//screen1
	initArrays(initTheScreen->screen1, 0, "Sequence Edit");
	initArrays(initTheScreen->screen1, 1, "Pattern:");
     968:	f7ff ffb0 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen1, 2, "Steps:");
     96c:	4630      	mov	r0, r6
     96e:	4a50      	ldr	r2, [pc, #320]	; (ab0 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x190>)
     970:	2102      	movs	r1, #2
     972:	f7ff ffab 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen1, 3, "Step number:");
     976:	4630      	mov	r0, r6
     978:	4a4e      	ldr	r2, [pc, #312]	; (ab4 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x194>)
     97a:	2103      	movs	r1, #3
     97c:	f7ff ffa6 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>

	//screen2
	initArrays(initTheScreen->screen2, 0, "Track Settings");
     980:	4620      	mov	r0, r4
     982:	4a4d      	ldr	r2, [pc, #308]	; (ab8 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x198>)
     984:	2100      	movs	r1, #0
     986:	f7ff ffa1 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen2, 1, "Track:");
     98a:	4620      	mov	r0, r4
     98c:	4a4b      	ldr	r2, [pc, #300]	; (abc <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x19c>)
     98e:	2101      	movs	r1, #1
     990:	f7ff ff9c 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen2, 2, "PlayMode:");
     994:	4620      	mov	r0, r4
     996:	4a4a      	ldr	r2, [pc, #296]	; (ac0 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1a0>)
     998:	2102      	movs	r1, #2
     99a:	f7ff ff97 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen2, 3, "OutRoute:");
     99e:	4620      	mov	r0, r4
     9a0:	4a48      	ldr	r2, [pc, #288]	; (ac4 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1a4>)
     9a2:	2103      	movs	r1, #3
	initArrays(initTheScreen->screen2, 4, "EnvelopeMode:");
	initArrays(initTheScreen->screen2, 5, "SustainTime:      S");

	//screen3
	initArrays(initTheScreen->screen3, 0, "Global Settings");
     9a4:	f205 2637 	addw	r6, r5, #567	; 0x237

	//screen2
	initArrays(initTheScreen->screen2, 0, "Track Settings");
	initArrays(initTheScreen->screen2, 1, "Track:");
	initArrays(initTheScreen->screen2, 2, "PlayMode:");
	initArrays(initTheScreen->screen2, 3, "OutRoute:");
     9a8:	f7ff ff90 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen2, 4, "EnvelopeMode:");
     9ac:	4620      	mov	r0, r4
     9ae:	4a46      	ldr	r2, [pc, #280]	; (ac8 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1a8>)
     9b0:	2104      	movs	r1, #4
     9b2:	f7ff ff8b 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen2, 5, "SustainTime:      S");
     9b6:	4620      	mov	r0, r4
     9b8:	4a44      	ldr	r2, [pc, #272]	; (acc <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1ac>)
     9ba:	2105      	movs	r1, #5
     9bc:	f7ff ff86 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>

	//screen3
	initArrays(initTheScreen->screen3, 0, "Global Settings");
     9c0:	4630      	mov	r0, r6
     9c2:	4a43      	ldr	r2, [pc, #268]	; (ad0 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1b0>)
     9c4:	2100      	movs	r1, #0
     9c6:	f7ff ff81 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen3, 1, "Midi Channel:");
     9ca:	4630      	mov	r0, r6
     9cc:	4a41      	ldr	r2, [pc, #260]	; (ad4 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1b4>)
     9ce:	2101      	movs	r1, #1
	initArrays(initTheScreen->screen3, 2, "Midi trig   :");
	initArrays(initTheScreen->screen3, 3, " ");
	

	//init all of the knob arrays:
	initArrays(initTheScreen->knobScreen, 0, "OutVolume x : xxxdb");//string 0 is outVolume
     9d0:	f505 743d 	add.w	r4, r5, #756	; 0x2f4
	initArrays(initTheScreen->screen2, 4, "EnvelopeMode:");
	initArrays(initTheScreen->screen2, 5, "SustainTime:      S");

	//screen3
	initArrays(initTheScreen->screen3, 0, "Global Settings");
	initArrays(initTheScreen->screen3, 1, "Midi Channel:");
     9d4:	f7ff ff7a 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen3, 2, "Midi trig   :");
     9d8:	4630      	mov	r0, r6
     9da:	4a3f      	ldr	r2, [pc, #252]	; (ad8 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1b8>)
     9dc:	2102      	movs	r1, #2
     9de:	f7ff ff75 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen3, 3, " ");
     9e2:	4630      	mov	r0, r6
     9e4:	4a3d      	ldr	r2, [pc, #244]	; (adc <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1bc>)
     9e6:	2103      	movs	r1, #3
     9e8:	f7ff ff70 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	

	//init all of the knob arrays:
	initArrays(initTheScreen->knobScreen, 0, "OutVolume x : xxxdb");//string 0 is outVolume
     9ec:	4620      	mov	r0, r4
     9ee:	4a3c      	ldr	r2, [pc, #240]	; (ae0 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1c0>)
     9f0:	2100      	movs	r1, #0
     9f2:	f7ff ff6b 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->knobScreen, 1, "Pitch : xxx");//string 1 is pitch
     9f6:	4620      	mov	r0, r4
     9f8:	4a3a      	ldr	r2, [pc, #232]	; (ae4 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1c4>)
     9fa:	2101      	movs	r1, #1
     9fc:	f7ff ff66 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->knobScreen, 2, "AttackTime  :      S"); //string 2 is Envelope gain
     a00:	4620      	mov	r0, r4
     a02:	4a39      	ldr	r2, [pc, #228]	; (ae8 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1c8>)
     a04:	2102      	movs	r1, #2
     a06:	f7ff ff61 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->knobScreen, 3, "ReleaseTimexx:xx xxx"); //string 3 is Envelop Time
     a0a:	4620      	mov	r0, r4
     a0c:	4a37      	ldr	r2, [pc, #220]	; (aec <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1cc>)
     a0e:	2103      	movs	r1, #3
     a10:	f7ff ff5c 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->knobScreen, 4, "TrackVolume xx:xxxdb"); //string 4 is track Level.
     a14:	4620      	mov	r0, r4
     a16:	4a36      	ldr	r2, [pc, #216]	; (af0 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1d0>)
     a18:	2104      	movs	r1, #4
     a1a:	f7ff ff57 	bl	8cc <initArrays(char volatile (*) [21], int, char*)>
	//initArrays(initTheScreen->knobScreen,5,"BPM: ");
	//we might want to put in one of these for BPM, but I'm not sure. 

	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
     a1e:	f8b8 30c8 	ldrh.w	r3, [r8, #200]	; 0xc8
     a22:	f105 002a 	add.w	r0, r5, #42	; 0x2a
     a26:	2203      	movs	r2, #3
     a28:	b29b      	uxth	r3, r3
     a2a:	2105      	movs	r1, #5
     a2c:	f001 f876 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
	numPrinter(initTheScreen->screen3[1], 14, 2, (currentGlobals->midiChannel) + 1);
     a30:	7c7b      	ldrb	r3, [r7, #17]
     a32:	f505 7013 	add.w	r0, r5, #588	; 0x24c
     a36:	2202      	movs	r2, #2
     a38:	3301      	adds	r3, #1
     a3a:	210e      	movs	r1, #14
     a3c:	f001 f86e 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     a40:	7a3b      	ldrb	r3, [r7, #8]
     a42:	f105 0015 	add.w	r0, r5, #21
     a46:	2203      	movs	r2, #3
     a48:	3301      	adds	r3, #1
     a4a:	2109      	movs	r1, #9
     a4c:	f001 f866 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     a50:	7a3b      	ldrb	r3, [r7, #8]
     a52:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
     a56:	2203      	movs	r2, #3
     a58:	3301      	adds	r3, #1
     a5a:	2109      	movs	r1, #9
     a5c:	f001 f85e 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
     a60:	f898 30ca 	ldrb.w	r3, [r8, #202]	; 0xca
     a64:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
     a68:	2202      	movs	r2, #2
     a6a:	2107      	movs	r1, #7
     a6c:	462e      	mov	r6, r5
     a6e:	f001 f855 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
	numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals->currentStep) + 1);
     a72:	7a7b      	ldrb	r3, [r7, #9]
     a74:	f105 00fc 	add.w	r0, r5, #252	; 0xfc
     a78:	2202      	movs	r2, #2
     a7a:	3301      	adds	r3, #1
     a7c:	210d      	movs	r1, #13
     a7e:	2400      	movs	r4, #0
     a80:	f001 f84c 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>

	for (uint8_t i = 0; i < 4; i++)
	{
		outputS(initTheScreen->screen0[i], i, currentGlobals);
     a84:	4621      	mov	r1, r4
     a86:	3401      	adds	r4, #1
     a88:	4630      	mov	r0, r6
     a8a:	463a      	mov	r2, r7
     a8c:	f001 f81a 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
	numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals->currentStep) + 1);

	for (uint8_t i = 0; i < 4; i++)
     a90:	2c04      	cmp	r4, #4
     a92:	f106 0615 	add.w	r6, r6, #21
     a96:	d1f5      	bne.n	a84 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x164>
	{
		outputS(initTheScreen->screen0[i], i, currentGlobals);
	}
}
     a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a9c:	20000010 	.word	0x20000010
     aa0:	20000024 	.word	0x20000024
     aa4:	20000030 	.word	0x20000030
     aa8:	20000038 	.word	0x20000038
     aac:	20000040 	.word	0x20000040
     ab0:	20000050 	.word	0x20000050
     ab4:	20000058 	.word	0x20000058
     ab8:	20000068 	.word	0x20000068
     abc:	20000078 	.word	0x20000078
     ac0:	20000080 	.word	0x20000080
     ac4:	2000008c 	.word	0x2000008c
     ac8:	20000098 	.word	0x20000098
     acc:	200000a8 	.word	0x200000a8
     ad0:	200000bc 	.word	0x200000bc
     ad4:	200000cc 	.word	0x200000cc
     ad8:	200000dc 	.word	0x200000dc
     adc:	200000ec 	.word	0x200000ec
     ae0:	200000f0 	.word	0x200000f0
     ae4:	20000104 	.word	0x20000104
     ae8:	20000110 	.word	0x20000110
     aec:	20000128 	.word	0x20000128
     af0:	20000140 	.word	0x20000140

00000af4 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)>:
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
}

void updateScreen(volatile Screen* menuScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
     af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	if ((currentGlobals->valueChangeFlag) & (1 << encoderChange))//check if encoder bit is high
     af8:	7bd3      	ldrb	r3, [r2, #15]
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
}

void updateScreen(volatile Screen* menuScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
     afa:	460e      	mov	r6, r1
     afc:	4614      	mov	r4, r2
     afe:	4605      	mov	r5, r0

	if ((currentGlobals->valueChangeFlag) & (1 << encoderChange))//check if encoder bit is high
     b00:	07d9      	lsls	r1, r3, #31
     b02:	d577      	bpl.n	bf4 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x100>
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag & (0xFF & (0 << encoderChange));//set encoder bit low, and carry our whatever encoder change has occurred. 
     b04:	2300      	movs	r3, #0
     b06:	7be2      	ldrb	r2, [r4, #15]
     b08:	73e3      	strb	r3, [r4, #15]
		//we need to debug this to make sure it's doing what we think it's doing.
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] | ((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack]) << 8);
     b0a:	7aa3      	ldrb	r3, [r4, #10]
     b0c:	4433      	add	r3, r6
     b0e:	f893 10db 	ldrb.w	r1, [r3, #219]	; 0xdb
     b12:	7aa2      	ldrb	r2, [r4, #10]
     b14:	b2c9      	uxtb	r1, r1
     b16:	4432      	add	r2, r6
     b18:	f892 30cb 	ldrb.w	r3, [r2, #203]	; 0xcb
		uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     b1c:	7aa2      	ldrb	r2, [r4, #10]

	if ((currentGlobals->valueChangeFlag) & (1 << encoderChange))//check if encoder bit is high
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag & (0xFF & (0 << encoderChange));//set encoder bit low, and carry our whatever encoder change has occurred. 
		//we need to debug this to make sure it's doing what we think it's doing.
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] | ((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack]) << 8);
     b1e:	fa5f fe83 	uxtb.w	lr, r3
		uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     b22:	4432      	add	r2, r6
     b24:	f892 3098 	ldrb.w	r3, [r2, #152]	; 0x98
     b28:	7aa2      	ldrb	r2, [r4, #10]
     b2a:	b2df      	uxtb	r7, r3
     b2c:	4432      	add	r2, r6
     b2e:	f892 30a8 	ldrb.w	r3, [r2, #168]	; 0xa8

		switch (currentGlobals->menuState)
     b32:	7ae2      	ldrb	r2, [r4, #11]
	if ((currentGlobals->valueChangeFlag) & (1 << encoderChange))//check if encoder bit is high
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag & (0xFF & (0 << encoderChange));//set encoder bit low, and carry our whatever encoder change has occurred. 
		//we need to debug this to make sure it's doing what we think it's doing.
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] | ((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack]) << 8);
		uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     b34:	b2db      	uxtb	r3, r3

		switch (currentGlobals->menuState)
     b36:	2a3a      	cmp	r2, #58	; 0x3a
     b38:	d859      	bhi.n	bee <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xfa>
     b3a:	e8df f012 	tbh	[pc, r2, lsl #1]
     b3e:	031e      	.short	0x031e
     b40:	00580058 	.word	0x00580058
     b44:	00580058 	.word	0x00580058
     b48:	00580058 	.word	0x00580058
     b4c:	00580058 	.word	0x00580058
     b50:	00580058 	.word	0x00580058
     b54:	00580058 	.word	0x00580058
     b58:	00580058 	.word	0x00580058
     b5c:	03000058 	.word	0x03000058
     b60:	02d302ee 	.word	0x02d302ee
     b64:	005803e6 	.word	0x005803e6
     b68:	00580058 	.word	0x00580058
     b6c:	00580058 	.word	0x00580058
     b70:	03b603c5 	.word	0x03b603c5
     b74:	005803af 	.word	0x005803af
     b78:	00580058 	.word	0x00580058
     b7c:	03910058 	.word	0x03910058
     b80:	0372037f 	.word	0x0372037f
     b84:	02810357 	.word	0x02810357
     b88:	00580266 	.word	0x00580266
     b8c:	00580058 	.word	0x00580058
     b90:	003b0257 	.word	0x003b0257
     b94:	02390246 	.word	0x02390246
     b98:	0058021c 	.word	0x0058021c
     b9c:	01e70058 	.word	0x01e70058
     ba0:	02bf02cc 	.word	0x02bf02cc
     ba4:	005802a4 	.word	0x005802a4
     ba8:	00580058 	.word	0x00580058
     bac:	00580058 	.word	0x00580058
     bb0:	01d1029c 	.word	0x01d1029c
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			break;

		case TrackMenuArrow2Select:
			//we need some serious button code in these two cases. 
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
     bb4:	7aa3      	ldrb	r3, [r4, #10]
     bb6:	4433      	add	r3, r6
     bb8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
     bbc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
     bc0:	2b00      	cmp	r3, #0
     bc2:	f000 83f4 	beq.w	13ae <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x8ba>
     bc6:	2a01      	cmp	r2, #1
     bc8:	d10b      	bne.n	be2 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xee>
				menuScreen->screen2[2][12] = 'l';
				menuScreen->screen2[2][13] = 'o';
				break;

			case 1:
				menuScreen->screen2[2][10] = 'P';
     bca:	2050      	movs	r0, #80	; 0x50
				menuScreen->screen2[2][11] = 'o';
     bcc:	216f      	movs	r1, #111	; 0x6f
				menuScreen->screen2[2][12] = 'l';
     bce:	226c      	movs	r2, #108	; 0x6c
				menuScreen->screen2[2][13] = 'y';
     bd0:	2379      	movs	r3, #121	; 0x79
				menuScreen->screen2[2][12] = 'l';
				menuScreen->screen2[2][13] = 'o';
				break;

			case 1:
				menuScreen->screen2[2][10] = 'P';
     bd2:	f885 01ae 	strb.w	r0, [r5, #430]	; 0x1ae
				menuScreen->screen2[2][11] = 'o';
     bd6:	f885 11af 	strb.w	r1, [r5, #431]	; 0x1af
				menuScreen->screen2[2][12] = 'l';
     bda:	f885 21b0 	strb.w	r2, [r5, #432]	; 0x1b0
				menuScreen->screen2[2][13] = 'y';
     bde:	f885 31b1 	strb.w	r3, [r5, #433]	; 0x1b1

			case 3:
				break;
			}

			outputS(menuScreen->screen2[2], 2, currentGlobals);
     be2:	4622      	mov	r2, r4
     be4:	2102      	movs	r1, #2
     be6:	f505 70d2 	add.w	r0, r5, #420	; 0x1a4
     bea:	f000 ff6b 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen3[1], 1, currentGlobals);
			outputS(menuScreen->screen3[2], 2, currentGlobals);
			outputS(menuScreen->screen3[3], 3, currentGlobals);
			break;
		}
		prevMenuState = currentGlobals->menuState;
     bee:	7ae2      	ldrb	r2, [r4, #11]
     bf0:	4bc3      	ldr	r3, [pc, #780]	; (f00 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x40c>)
     bf2:	701a      	strb	r2, [r3, #0]
	}
	//We should only reach this in track selection and global settings for setting midi notes. 
	if (currentGlobals->valueChangeFlag & (1 << triggerChange))
     bf4:	7be3      	ldrb	r3, [r4, #15]
     bf6:	079a      	lsls	r2, r3, #30
     bf8:	d506      	bpl.n	c08 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x114>
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag & (0 << triggerChange); //this is wrong. Will erase all of valueChange Flag. 
     bfa:	2300      	movs	r3, #0
     bfc:	7be2      	ldrb	r2, [r4, #15]
     bfe:	73e3      	strb	r3, [r4, #15]
		switch ((currentGlobals->menuState) >> 4) //we don't need to worry about what the bottom encoder is doing.  
     c00:	7ae7      	ldrb	r7, [r4, #11]
     c02:	093f      	lsrs	r7, r7, #4
     c04:	2f02      	cmp	r7, #2
     c06:	d03b      	beq.n	c80 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x18c>
			outputS(menuScreen->screen3[2], 2, currentGlobals);
			break;

		}
	}
	if (currentGlobals->valueChangeFlag & (1 << knobChange))
     c08:	7be3      	ldrb	r3, [r4, #15]
     c0a:	075b      	lsls	r3, r3, #29
     c0c:	d51a      	bpl.n	c44 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x150>
	{
		uint8_t positionSelect = currentGlobals->knobStatus & 0x0F; //this is the bottom 4 bits, for the track location
     c0e:	f894 8010 	ldrb.w	r8, [r4, #16]
		uint8_t positionSelectUpper = 0;
		if ((currentGlobals->buttonSwitchFlag) & 0x01)
     c12:	7ba2      	ldrb	r2, [r4, #14]
		{
			positionSelectUpper = 8;
		}


		switch ((currentGlobals->knobStatus) >> 4)
     c14:	f894 9010 	ldrb.w	r9, [r4, #16]

		}
	}
	if (currentGlobals->valueChangeFlag & (1 << knobChange))
	{
		uint8_t positionSelect = currentGlobals->knobStatus & 0x0F; //this is the bottom 4 bits, for the track location
     c18:	f008 080f 	and.w	r8, r8, #15
		uint8_t positionSelectUpper = 0;
		if ((currentGlobals->buttonSwitchFlag) & 0x01)
     c1c:	f012 0701 	ands.w	r7, r2, #1
		{
			positionSelectUpper = 8;
		}


		switch ((currentGlobals->knobStatus) >> 4)
     c20:	ea4f 1919 	mov.w	r9, r9, lsr #4
     c24:	bf18      	it	ne
     c26:	2708      	movne	r7, #8
     c28:	f1b9 0f01 	cmp.w	r9, #1
     c2c:	463b      	mov	r3, r7
     c2e:	d00b      	beq.n	c48 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x154>
     c30:	f1b9 0f02 	cmp.w	r9, #2
     c34:	f000 80a9 	beq.w	d8a <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x296>
     c38:	f1b9 0f00 	cmp.w	r9, #0
     c3c:	d068      	beq.n	d10 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x21c>
			{
				outputS(menuScreen->screen0[2], 2, currentGlobals);
			}
			break;
		}
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag & (0xFF & (0 << knobChange));
     c3e:	2300      	movs	r3, #0
     c40:	7be2      	ldrb	r2, [r4, #15]
     c42:	73e3      	strb	r3, [r4, #15]
     c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			outputS(menuScreen->knobScreen[0], 3, currentGlobals);
			break;

		case 1: //pitch
			menuScreen->knobScreen[1][5] = positionSelect + 49;
			if (currentPattern->outputPitch[positionSelect] >> 7)
     c48:	4446      	add	r6, r8
			menuScreen->knobScreen[0][10] = positionSelect + 49;
			outputS(menuScreen->knobScreen[0], 3, currentGlobals);
			break;

		case 1: //pitch
			menuScreen->knobScreen[1][5] = positionSelect + 49;
     c4a:	f108 0831 	add.w	r8, r8, #49	; 0x31
     c4e:	f885 830e 	strb.w	r8, [r5, #782]	; 0x30e
			if (currentPattern->outputPitch[positionSelect] >> 7)
     c52:	7c33      	ldrb	r3, [r6, #16]
     c54:	09db      	lsrs	r3, r3, #7
     c56:	f000 811b 	beq.w	e90 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x39c>
			{
				menuScreen->knobScreen[1][7] = '-';
     c5a:	232d      	movs	r3, #45	; 0x2d
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect]) ^ 255);
     c5c:	f205 3709 	addw	r7, r5, #777	; 0x309
     c60:	2203      	movs	r2, #3
     c62:	2108      	movs	r1, #8

		case 1: //pitch
			menuScreen->knobScreen[1][5] = positionSelect + 49;
			if (currentPattern->outputPitch[positionSelect] >> 7)
			{
				menuScreen->knobScreen[1][7] = '-';
     c64:	f885 3310 	strb.w	r3, [r5, #784]	; 0x310
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect]) ^ 255);
     c68:	4638      	mov	r0, r7
     c6a:	7c33      	ldrb	r3, [r6, #16]
     c6c:	43db      	mvns	r3, r3
     c6e:	b2db      	uxtb	r3, r3
     c70:	f000 ff54 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
			else
			{
				menuScreen->knobScreen[1][7] = '+';
				numPrinter(menuScreen->knobScreen[1], 8, 3, currentPattern->outputPitch[positionSelect]);
			}
			outputS(menuScreen->knobScreen[1], 3, currentGlobals);
     c74:	4638      	mov	r0, r7
     c76:	4622      	mov	r2, r4
     c78:	2103      	movs	r1, #3
     c7a:	f000 ff23 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			break;
     c7e:	e7de      	b.n	c3e <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x14a>
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag & (0 << triggerChange); //this is wrong. Will erase all of valueChange Flag. 
		switch ((currentGlobals->menuState) >> 4) //we don't need to worry about what the bottom encoder is doing.  
		{
		case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     c80:	7aa3      	ldrb	r3, [r4, #10]
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack) + 1);
     c82:	f205 198f 	addw	r9, r5, #399	; 0x18f
     c86:	463a      	mov	r2, r7
     c88:	2107      	movs	r1, #7
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag & (0 << triggerChange); //this is wrong. Will erase all of valueChange Flag. 
		switch ((currentGlobals->menuState) >> 4) //we don't need to worry about what the bottom encoder is doing.  
		{
		case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     c8a:	4433      	add	r3, r6
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack) + 1);
     c8c:	4648      	mov	r0, r9
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag & (0 << triggerChange); //this is wrong. Will erase all of valueChange Flag. 
		switch ((currentGlobals->menuState) >> 4) //we don't need to worry about what the bottom encoder is doing.  
		{
		case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     c8e:	f893 a098 	ldrb.w	sl, [r3, #152]	; 0x98
     c92:	7aa3      	ldrb	r3, [r4, #10]
     c94:	fa5f fa8a 	uxtb.w	sl, sl
     c98:	4433      	add	r3, r6
     c9a:	f893 80a8 	ldrb.w	r8, [r3, #168]	; 0xa8
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack) + 1);
     c9e:	7aa3      	ldrb	r3, [r4, #10]
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag & (0 << triggerChange); //this is wrong. Will erase all of valueChange Flag. 
		switch ((currentGlobals->menuState) >> 4) //we don't need to worry about what the bottom encoder is doing.  
		{
		case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     ca0:	fa5f f888 	uxtb.w	r8, r8
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack) + 1);
     ca4:	3301      	adds	r3, #1
     ca6:	f000 ff39 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
     caa:	2204      	movs	r2, #4
     cac:	ea48 230a 	orr.w	r3, r8, sl, lsl #8
     cb0:	4648      	mov	r0, r9
     cb2:	210a      	movs	r1, #10
     cb4:	f000 ff32 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
     cb8:	7aa3      	ldrb	r3, [r4, #10]
     cba:	4433      	add	r3, r6
     cbc:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
     cc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
     cc4:	2b00      	cmp	r3, #0
     cc6:	f000 835a 	beq.w	137e <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x88a>
     cca:	2a01      	cmp	r2, #1
     ccc:	d10b      	bne.n	ce6 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1f2>
				menuScreen->screen2[2][12] = 'l';
				menuScreen->screen2[2][13] = 'o';
				break;

			case 1:
				menuScreen->screen2[2][10] = 'P';
     cce:	2050      	movs	r0, #80	; 0x50
				menuScreen->screen2[2][11] = 'o';
     cd0:	216f      	movs	r1, #111	; 0x6f
				menuScreen->screen2[2][12] = 'l';
     cd2:	226c      	movs	r2, #108	; 0x6c
				menuScreen->screen2[2][13] = 'y';
     cd4:	2379      	movs	r3, #121	; 0x79
				menuScreen->screen2[2][12] = 'l';
				menuScreen->screen2[2][13] = 'o';
				break;

			case 1:
				menuScreen->screen2[2][10] = 'P';
     cd6:	f885 01ae 	strb.w	r0, [r5, #430]	; 0x1ae
				menuScreen->screen2[2][11] = 'o';
     cda:	f885 11af 	strb.w	r1, [r5, #431]	; 0x1af
				menuScreen->screen2[2][12] = 'l';
     cde:	f885 21b0 	strb.w	r2, [r5, #432]	; 0x1b0
				menuScreen->screen2[2][13] = 'y';
     ce2:	f885 31b1 	strb.w	r3, [r5, #433]	; 0x1b1

			case 3:
				break;
			}

			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack] + 1));
     ce6:	7aa3      	ldrb	r3, [r4, #10]
     ce8:	f205 18b9 	addw	r8, r5, #441	; 0x1b9
     cec:	2202      	movs	r2, #2
     cee:	210a      	movs	r1, #10
     cf0:	4433      	add	r3, r6
     cf2:	4640      	mov	r0, r8
     cf4:	7e1b      	ldrb	r3, [r3, #24]
     cf6:	3301      	adds	r3, #1
     cf8:	f000 ff10 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
			switch (currentPattern->envelopeType[currentGlobals->currentTrack])
     cfc:	7aa3      	ldrb	r3, [r4, #10]
     cfe:	4433      	add	r3, r6
     d00:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
     d04:	2b03      	cmp	r3, #3
     d06:	d874      	bhi.n	df2 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x2fe>
     d08:	e8df f003 	tbb	[pc, r3]
     d0c:	ce69dbdd 	.word	0xce69dbdd


		switch ((currentGlobals->knobStatus) >> 4)
		{
		case 0: //output volume
			if ((currentPattern->outputLevelMSB[positionSelect]) == 0)
     d10:	f816 3008 	ldrb.w	r3, [r6, r8]
			{ //value is positive
				menuScreen->knobScreen[0][14] = ' ';
				numPrinter(menuScreen->knobScreen[0], 15, 2, currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
     d14:	4446      	add	r6, r8


		switch ((currentGlobals->knobStatus) >> 4)
		{
		case 0: //output volume
			if ((currentPattern->outputLevelMSB[positionSelect]) == 0)
     d16:	2b00      	cmp	r3, #0
     d18:	f000 833d 	beq.w	1396 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x8a2>
				menuScreen->knobScreen[0][14] = ' ';
				numPrinter(menuScreen->knobScreen[0], 15, 2, currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
			}
			else
			{
				menuScreen->knobScreen[0][14] = '-';
     d1c:	222d      	movs	r2, #45	; 0x2d
				menuScreen->knobScreen[0][15] = ((((currentPattern->outputLevelLSB[positionSelect] ^ 255) + 1) % 100) / 10) + 48; //negative 8 bit numbers: flip every bit and add 1.
     d1e:	4979      	ldr	r1, [pc, #484]	; (f04 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x410>)
     d20:	2364      	movs	r3, #100	; 0x64
     d22:	f505 793d 	add.w	r9, r5, #756	; 0x2f4
				menuScreen->knobScreen[0][14] = ' ';
				numPrinter(menuScreen->knobScreen[0], 15, 2, currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
			}
			else
			{
				menuScreen->knobScreen[0][14] = '-';
     d26:	f885 2302 	strb.w	r2, [r5, #770]	; 0x302
				menuScreen->knobScreen[0][15] = ((((currentPattern->outputLevelLSB[positionSelect] ^ 255) + 1) % 100) / 10) + 48; //negative 8 bit numbers: flip every bit and add 1.
     d2a:	7a30      	ldrb	r0, [r6, #8]
     d2c:	43c0      	mvns	r0, r0
     d2e:	b2c0      	uxtb	r0, r0
     d30:	3001      	adds	r0, #1
     d32:	fb81 2100 	smull	r2, r1, r1, r0
     d36:	17c2      	asrs	r2, r0, #31
     d38:	ebc2 1161 	rsb	r1, r2, r1, asr #5
     d3c:	4a72      	ldr	r2, [pc, #456]	; (f08 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x414>)
     d3e:	fb03 0311 	mls	r3, r3, r1, r0
     d42:	fb82 0103 	smull	r0, r1, r2, r3
     d46:	17db      	asrs	r3, r3, #31
     d48:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
     d4c:	3330      	adds	r3, #48	; 0x30
     d4e:	b2db      	uxtb	r3, r3
     d50:	f885 3303 	strb.w	r3, [r5, #771]	; 0x303
				menuScreen->knobScreen[0][16] = (((currentPattern->outputLevelLSB[positionSelect] ^ 255) + 1) % 10) + 48;
     d54:	7a33      	ldrb	r3, [r6, #8]
     d56:	43db      	mvns	r3, r3
     d58:	b2db      	uxtb	r3, r3
     d5a:	3301      	adds	r3, #1
     d5c:	fb82 1203 	smull	r1, r2, r2, r3
     d60:	17d9      	asrs	r1, r3, #31
     d62:	ebc1 02a2 	rsb	r2, r1, r2, asr #2
     d66:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     d6a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
     d6e:	3330      	adds	r3, #48	; 0x30
     d70:	b2db      	uxtb	r3, r3
     d72:	f885 3304 	strb.w	r3, [r5, #772]	; 0x304
			}

			menuScreen->knobScreen[0][10] = positionSelect + 49;
     d76:	f108 0831 	add.w	r8, r8, #49	; 0x31
			outputS(menuScreen->knobScreen[0], 3, currentGlobals);
     d7a:	4648      	mov	r0, r9
     d7c:	4622      	mov	r2, r4
     d7e:	2103      	movs	r1, #3
				menuScreen->knobScreen[0][14] = '-';
				menuScreen->knobScreen[0][15] = ((((currentPattern->outputLevelLSB[positionSelect] ^ 255) + 1) % 100) / 10) + 48; //negative 8 bit numbers: flip every bit and add 1.
				menuScreen->knobScreen[0][16] = (((currentPattern->outputLevelLSB[positionSelect] ^ 255) + 1) % 10) + 48;
			}

			menuScreen->knobScreen[0][10] = positionSelect + 49;
     d80:	f885 82fe 	strb.w	r8, [r5, #766]	; 0x2fe
			outputS(menuScreen->knobScreen[0], 3, currentGlobals);
     d84:	f000 fe9e 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			break;
     d88:	e759      	b.n	c3e <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x14a>
			}
			outputS(menuScreen->knobScreen[1], 3, currentGlobals);
			break;

		case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect + positionSelectUpper] | ((currentPattern->trackAttackTimeMSB[positionSelect + positionSelectUpper]) << 8);
     d8a:	4443      	add	r3, r8
			numPrinter(menuScreen->knobScreen[2], 14, 5, totalAttackTime);
     d8c:	f205 3a1e 	addw	sl, r5, #798	; 0x31e
     d90:	2205      	movs	r2, #5
     d92:	210e      	movs	r1, #14
			}
			outputS(menuScreen->knobScreen[1], 3, currentGlobals);
			break;

		case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect + positionSelectUpper] | ((currentPattern->trackAttackTimeMSB[positionSelect + positionSelectUpper]) << 8);
     d94:	441e      	add	r6, r3
			numPrinter(menuScreen->knobScreen[2], 14, 5, totalAttackTime);
     d96:	4650      	mov	r0, sl
			}
			outputS(menuScreen->knobScreen[1], 3, currentGlobals);
			break;

		case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect + positionSelectUpper] | ((currentPattern->trackAttackTimeMSB[positionSelect + positionSelectUpper]) << 8);
     d98:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
     d9c:	f896 6048 	ldrb.w	r6, [r6, #72]	; 0x48
			numPrinter(menuScreen->knobScreen[2], 14, 5, totalAttackTime);
     da0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
     da4:	f000 feba 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
     da8:	f895 132c 	ldrb.w	r1, [r5, #812]	; 0x32c
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
			menuScreen->knobScreen[2][15] = '.';
			numPrinter(menuScreen->knobScreen[2], 10, 2, (positionSelect + 1 + positionSelectUpper));
     dac:	eb08 0307 	add.w	r3, r8, r7
		case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect + positionSelectUpper] | ((currentPattern->trackAttackTimeMSB[positionSelect + positionSelectUpper]) << 8);
			numPrinter(menuScreen->knobScreen[2], 14, 5, totalAttackTime);
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
			menuScreen->knobScreen[2][15] = '.';
     db0:	272e      	movs	r7, #46	; 0x2e
			break;

		case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect + positionSelectUpper] | ((currentPattern->trackAttackTimeMSB[positionSelect + positionSelectUpper]) << 8);
			numPrinter(menuScreen->knobScreen[2], 14, 5, totalAttackTime);
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
     db2:	b2c9      	uxtb	r1, r1
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
			menuScreen->knobScreen[2][15] = '.';
			numPrinter(menuScreen->knobScreen[2], 10, 2, (positionSelect + 1 + positionSelectUpper));
     db4:	464a      	mov	r2, r9
     db6:	4650      	mov	r0, sl
     db8:	3301      	adds	r3, #1
			break;

		case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect + positionSelectUpper] | ((currentPattern->trackAttackTimeMSB[positionSelect + positionSelectUpper]) << 8);
			numPrinter(menuScreen->knobScreen[2], 14, 5, totalAttackTime);
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
     dba:	f885 132b 	strb.w	r1, [r5, #811]	; 0x32b
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
			menuScreen->knobScreen[2][15] = '.';
			numPrinter(menuScreen->knobScreen[2], 10, 2, (positionSelect + 1 + positionSelectUpper));
     dbe:	210a      	movs	r1, #10

		case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect + positionSelectUpper] | ((currentPattern->trackAttackTimeMSB[positionSelect + positionSelectUpper]) << 8);
			numPrinter(menuScreen->knobScreen[2], 14, 5, totalAttackTime);
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
     dc0:	f895 632d 	ldrb.w	r6, [r5, #813]	; 0x32d
     dc4:	b2f6      	uxtb	r6, r6
     dc6:	f885 632c 	strb.w	r6, [r5, #812]	; 0x32c
			menuScreen->knobScreen[2][15] = '.';
     dca:	f885 732d 	strb.w	r7, [r5, #813]	; 0x32d
			numPrinter(menuScreen->knobScreen[2], 10, 2, (positionSelect + 1 + positionSelectUpper));
     dce:	f000 fea5 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
			outputS(menuScreen->knobScreen[2], 3, currentGlobals); //This is not MS, but ideal for testing it Attack really works. 
     dd2:	4622      	mov	r2, r4
     dd4:	4650      	mov	r0, sl
     dd6:	2103      	movs	r1, #3
     dd8:	f000 fe74 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			break;
     ddc:	e72f      	b.n	c3e <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x14a>
				menuScreen->screen2[4][16] = ' ';
				menuScreen->screen2[4][17] = ' ';
				break;

			case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
     dde:	2241      	movs	r2, #65	; 0x41
				menuScreen->screen2[4][15] = ' ';
     de0:	2320      	movs	r3, #32
				menuScreen->screen2[4][16] = ' ';
				menuScreen->screen2[4][17] = ' ';
				break;

			case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
     de2:	f885 21dc 	strb.w	r2, [r5, #476]	; 0x1dc
				menuScreen->screen2[4][15] = ' ';
     de6:	f885 31dd 	strb.w	r3, [r5, #477]	; 0x1dd
				menuScreen->screen2[4][16] = ' ';
     dea:	f885 31de 	strb.w	r3, [r5, #478]	; 0x1de
				menuScreen->screen2[4][17] = ' ';
     dee:	f885 31df 	strb.w	r3, [r5, #479]	; 0x1df
				menuScreen->screen2[4][15] = 'o';
				menuScreen->screen2[4][16] = 'n';
				menuScreen->screen2[4][17] = 'e';
				break;
			}
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] | ((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack]) << 8);
     df2:	7aa3      	ldrb	r3, [r4, #10]
			numPrinter(menuScreen->screen2[5], 13, 5, totalSustainTime);
     df4:	2205      	movs	r2, #5
     df6:	210d      	movs	r1, #13
     df8:	f205 10e3 	addw	r0, r5, #483	; 0x1e3
				menuScreen->screen2[4][15] = 'o';
				menuScreen->screen2[4][16] = 'n';
				menuScreen->screen2[4][17] = 'e';
				break;
			}
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] | ((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack]) << 8);
     dfc:	4433      	add	r3, r6
     dfe:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
     e02:	f894 e00a 	ldrb.w	lr, [r4, #10]
     e06:	44b6      	add	lr, r6
     e08:	f89e e0cb 	ldrb.w	lr, [lr, #203]	; 0xcb
			numPrinter(menuScreen->screen2[5], 13, 5, totalSustainTime);
     e0c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
     e10:	f000 fe84 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
			menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
     e14:	f895 31f0 	ldrb.w	r3, [r5, #496]	; 0x1f0
			menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
			menuScreen->screen2[5][14] = '.';
     e18:	222e      	movs	r2, #46	; 0x2e
				menuScreen->screen2[4][17] = 'e';
				break;
			}
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] | ((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack]) << 8);
			numPrinter(menuScreen->screen2[5], 13, 5, totalSustainTime);
			menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
     e1a:	b2db      	uxtb	r3, r3
     e1c:	f885 31ef 	strb.w	r3, [r5, #495]	; 0x1ef
			menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
     e20:	f895 31f1 	ldrb.w	r3, [r5, #497]	; 0x1f1
     e24:	b2db      	uxtb	r3, r3
     e26:	f885 31f0 	strb.w	r3, [r5, #496]	; 0x1f0
			menuScreen->screen2[5][14] = '.';
     e2a:	f885 21f1 	strb.w	r2, [r5, #497]	; 0x1f1


			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;

			if (((currentGlobals->menuState) & selectBit) > 35) //this accounts for menu stats 36,37,44, and 45
     e2e:	7ae3      	ldrb	r3, [r4, #11]
     e30:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
     e34:	2b23      	cmp	r3, #35	; 0x23
     e36:	d915      	bls.n	e64 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x370>
			{
				triggerChangeScreen = ((currentGlobals->menuState) & selectBit) - 34; //mask to get rid of encoder B pushed state. 
     e38:	7ae7      	ldrb	r7, [r4, #11]
     e3a:	f007 07f7 	and.w	r7, r7, #247	; 0xf7
     e3e:	3f22      	subs	r7, #34	; 0x22
     e40:	b2ff      	uxtb	r7, r7
     e42:	f107 0802 	add.w	r8, r7, #2
     e46:	eb07 0947 	add.w	r9, r7, r7, lsl #1
     e4a:	3701      	adds	r7, #1
     e4c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
     e50:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
     e54:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
     e58:	44a9      	add	r9, r5
     e5a:	44a8      	add	r8, r5
     e5c:	f509 79bd 	add.w	r9, r9, #378	; 0x17a
     e60:	f508 78bd 	add.w	r8, r8, #378	; 0x17a
			}

			outputS(menuScreen->screen2[triggerChangeScreen], 1, currentGlobals);
			outputS(menuScreen->screen2[triggerChangeScreen + 1], 2, currentGlobals);
     e64:	eb07 0747 	add.w	r7, r7, r7, lsl #1
			if (((currentGlobals->menuState) & selectBit) > 35) //this accounts for menu stats 36,37,44, and 45
			{
				triggerChangeScreen = ((currentGlobals->menuState) & selectBit) - 34; //mask to get rid of encoder B pushed state. 
			}

			outputS(menuScreen->screen2[triggerChangeScreen], 1, currentGlobals);
     e68:	4648      	mov	r0, r9
     e6a:	4622      	mov	r2, r4
     e6c:	2101      	movs	r1, #1
			outputS(menuScreen->screen2[triggerChangeScreen + 1], 2, currentGlobals);
     e6e:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
			if (((currentGlobals->menuState) & selectBit) > 35) //this accounts for menu stats 36,37,44, and 45
			{
				triggerChangeScreen = ((currentGlobals->menuState) & selectBit) - 34; //mask to get rid of encoder B pushed state. 
			}

			outputS(menuScreen->screen2[triggerChangeScreen], 1, currentGlobals);
     e72:	f000 fe27 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen2[triggerChangeScreen + 1], 2, currentGlobals);
     e76:	4622      	mov	r2, r4
     e78:	19e8      	adds	r0, r5, r7
     e7a:	2102      	movs	r1, #2
     e7c:	f500 70bd 	add.w	r0, r0, #378	; 0x17a
     e80:	f000 fe20 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen2[triggerChangeScreen + 2], 3, currentGlobals);
     e84:	4622      	mov	r2, r4
     e86:	4640      	mov	r0, r8
     e88:	2103      	movs	r1, #3
     e8a:	f000 fe1b 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>

			break;
     e8e:	e6bb      	b.n	c08 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x114>
				menuScreen->knobScreen[1][7] = '-';
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect]) ^ 255);
			}
			else
			{
				menuScreen->knobScreen[1][7] = '+';
     e90:	232b      	movs	r3, #43	; 0x2b
				numPrinter(menuScreen->knobScreen[1], 8, 3, currentPattern->outputPitch[positionSelect]);
     e92:	f205 3709 	addw	r7, r5, #777	; 0x309
     e96:	2203      	movs	r2, #3
     e98:	2108      	movs	r1, #8
				menuScreen->knobScreen[1][7] = '-';
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect]) ^ 255);
			}
			else
			{
				menuScreen->knobScreen[1][7] = '+';
     e9a:	f885 3310 	strb.w	r3, [r5, #784]	; 0x310
				numPrinter(menuScreen->knobScreen[1], 8, 3, currentPattern->outputPitch[positionSelect]);
     e9e:	4638      	mov	r0, r7
     ea0:	7c33      	ldrb	r3, [r6, #16]
     ea2:	f000 fe3b 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
     ea6:	e6e5      	b.n	c74 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x180>
				menuScreen->screen2[4][16] = ' ';
				menuScreen->screen2[4][17] = ' ';
				break;

			case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
     ea8:	204e      	movs	r0, #78	; 0x4e
				menuScreen->screen2[4][15] = 'o';
     eaa:	216f      	movs	r1, #111	; 0x6f
				menuScreen->screen2[4][16] = 'n';
     eac:	226e      	movs	r2, #110	; 0x6e
				menuScreen->screen2[4][17] = 'e';
     eae:	2365      	movs	r3, #101	; 0x65
				menuScreen->screen2[4][16] = ' ';
				menuScreen->screen2[4][17] = ' ';
				break;

			case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
     eb0:	f885 01dc 	strb.w	r0, [r5, #476]	; 0x1dc
				menuScreen->screen2[4][15] = 'o';
     eb4:	f885 11dd 	strb.w	r1, [r5, #477]	; 0x1dd
				menuScreen->screen2[4][16] = 'n';
     eb8:	f885 21de 	strb.w	r2, [r5, #478]	; 0x1de
				menuScreen->screen2[4][17] = 'e';
     ebc:	f885 31df 	strb.w	r3, [r5, #479]	; 0x1df
				break;
     ec0:	e797      	b.n	df2 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x2fe>
				menuScreen->screen2[4][16] = 'R';
				menuScreen->screen2[4][17] = ' ';
				break;

			case 1: //only release
				menuScreen->screen2[4][14] = 'R';
     ec2:	2252      	movs	r2, #82	; 0x52
     ec4:	e78c      	b.n	de0 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x2ec>

			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack] + 1));
			switch (currentPattern->envelopeType[currentGlobals->currentTrack])
			{
			case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
     ec6:	2041      	movs	r0, #65	; 0x41
				menuScreen->screen2[4][15] = '-';
     ec8:	212d      	movs	r1, #45	; 0x2d
				menuScreen->screen2[4][16] = 'R';
     eca:	2252      	movs	r2, #82	; 0x52
				menuScreen->screen2[4][17] = ' ';
     ecc:	2320      	movs	r3, #32

			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack] + 1));
			switch (currentPattern->envelopeType[currentGlobals->currentTrack])
			{
			case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
     ece:	f885 01dc 	strb.w	r0, [r5, #476]	; 0x1dc
				menuScreen->screen2[4][15] = '-';
     ed2:	f885 11dd 	strb.w	r1, [r5, #477]	; 0x1dd
				menuScreen->screen2[4][16] = 'R';
     ed6:	f885 21de 	strb.w	r2, [r5, #478]	; 0x1de
				menuScreen->screen2[4][17] = ' ';
     eda:	f885 31df 	strb.w	r3, [r5, #479]	; 0x1df
				break;
     ede:	e788      	b.n	df2 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x2fe>
			outputS(menuScreen->screen3[2], 2, currentGlobals);
			outputS(menuScreen->screen3[3], 3, currentGlobals);
			break;

		case GlobalMenuArrow2Select:
			midiNotePrinter(menuScreen->screen3[2], 14, currentGlobals->midiTrackNote[currentGlobals->currentTrack]);
     ee0:	7aa3      	ldrb	r3, [r4, #10]
     ee2:	f205 2761 	addw	r7, r5, #609	; 0x261
     ee6:	210e      	movs	r1, #14
     ee8:	4423      	add	r3, r4
     eea:	4638      	mov	r0, r7
     eec:	7c9a      	ldrb	r2, [r3, #18]
     eee:	f000 fedf 	bl	1cb0 <midiNotePrinter(char volatile*, unsigned char, unsigned char)>
			outputS(menuScreen->screen3[2], 2, currentGlobals);
     ef2:	4622      	mov	r2, r4
     ef4:	4638      	mov	r0, r7
     ef6:	2102      	movs	r1, #2
     ef8:	f000 fde4 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			break;
     efc:	e677      	b.n	bee <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xfa>
     efe:	bf00      	nop
     f00:	200017f4 	.word	0x200017f4
     f04:	51eb851f 	.word	0x51eb851f
     f08:	66666667 	.word	0x66666667
			break;
			

		case GlobalMenuInit:
			outputS(menuScreen->screen3[0], 0, currentGlobals);
			outputS(menuScreen->screen3[1], 1, currentGlobals);
     f0c:	f505 7913 	add.w	r9, r5, #588	; 0x24c
			outputS(menuScreen->screen2[5], 3, currentGlobals);
			break;
			

		case GlobalMenuInit:
			outputS(menuScreen->screen3[0], 0, currentGlobals);
     f10:	4622      	mov	r2, r4
     f12:	2100      	movs	r1, #0
     f14:	f205 2037 	addw	r0, r5, #567	; 0x237
			outputS(menuScreen->screen3[1], 1, currentGlobals);
			outputS(menuScreen->screen3[2], 2, currentGlobals);
     f18:	f205 2861 	addw	r8, r5, #609	; 0x261
			outputS(menuScreen->screen2[5], 3, currentGlobals);
			break;
			

		case GlobalMenuInit:
			outputS(menuScreen->screen3[0], 0, currentGlobals);
     f1c:	f000 fdd2 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen3[1], 1, currentGlobals);
			outputS(menuScreen->screen3[2], 2, currentGlobals);
			outputS(menuScreen->screen3[3], 3, currentGlobals);
     f20:	f205 2776 	addw	r7, r5, #630	; 0x276
			break;
			

		case GlobalMenuInit:
			outputS(menuScreen->screen3[0], 0, currentGlobals);
			outputS(menuScreen->screen3[1], 1, currentGlobals);
     f24:	4648      	mov	r0, r9
     f26:	4622      	mov	r2, r4
     f28:	2101      	movs	r1, #1
     f2a:	f000 fdcb 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen3[2], 2, currentGlobals);
     f2e:	4640      	mov	r0, r8
     f30:	4622      	mov	r2, r4
     f32:	2102      	movs	r1, #2
     f34:	f000 fdc6 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen3[3], 3, currentGlobals);
     f38:	4638      	mov	r0, r7
     f3a:	4622      	mov	r2, r4
     f3c:	2103      	movs	r1, #3
     f3e:	f000 fdc1 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			currentGlobals->menuState = GlobalMenuArrow1;
     f42:	2331      	movs	r3, #49	; 0x31
     f44:	72e3      	strb	r3, [r4, #11]

		case GlobalMenuArrow1:
			menuScreen->screen3[1][19] = 8;
     f46:	2108      	movs	r1, #8
			menuScreen->screen3[2][19] = ' ';
     f48:	2320      	movs	r3, #32
			menuScreen->screen3[3][19] = ' ';
			outputS(menuScreen->screen3[1], 1, currentGlobals);
     f4a:	4648      	mov	r0, r9
     f4c:	4622      	mov	r2, r4
			outputS(menuScreen->screen3[2], 2, currentGlobals);
			outputS(menuScreen->screen3[3], 3, currentGlobals);
			currentGlobals->menuState = GlobalMenuArrow1;

		case GlobalMenuArrow1:
			menuScreen->screen3[1][19] = 8;
     f4e:	f885 125f 	strb.w	r1, [r5, #607]	; 0x25f
			menuScreen->screen3[2][19] = ' ';
			menuScreen->screen3[3][19] = ' ';
			outputS(menuScreen->screen3[1], 1, currentGlobals);
     f52:	2101      	movs	r1, #1
			outputS(menuScreen->screen3[3], 3, currentGlobals);
			currentGlobals->menuState = GlobalMenuArrow1;

		case GlobalMenuArrow1:
			menuScreen->screen3[1][19] = 8;
			menuScreen->screen3[2][19] = ' ';
     f54:	f885 3274 	strb.w	r3, [r5, #628]	; 0x274
			menuScreen->screen3[3][19] = ' ';
     f58:	f885 3289 	strb.w	r3, [r5, #649]	; 0x289

		case TrackMenuArrow1:
			menuScreen->screen2[1][19] = 8;
			menuScreen->screen2[2][19] = ' ';
			menuScreen->screen2[3][19] = ' ';
			outputS(menuScreen->screen2[1], 1, currentGlobals);
     f5c:	f000 fdb2 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen2[2], 2, currentGlobals);
     f60:	4622      	mov	r2, r4
     f62:	4640      	mov	r0, r8
     f64:	2102      	movs	r1, #2
     f66:	f000 fdad 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen2[3], 3, currentGlobals);
     f6a:	4622      	mov	r2, r4
     f6c:	4638      	mov	r0, r7
     f6e:	2103      	movs	r1, #3
     f70:	f000 fda8 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			break;
     f74:	e63b      	b.n	bee <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xfa>
			outputS(menuScreen->screen2[4], 2, currentGlobals);
			outputS(menuScreen->screen2[5], 3, currentGlobals);
			break;
			
		case TrackMenuArrow5Select: 
			numPrinter(menuScreen->screen2[5], 13, 5, totalSustainTime);
     f76:	f205 17e3 	addw	r7, r5, #483	; 0x1e3
     f7a:	ea41 230e 	orr.w	r3, r1, lr, lsl #8
     f7e:	2205      	movs	r2, #5
     f80:	210d      	movs	r1, #13
     f82:	4638      	mov	r0, r7
     f84:	f000 fdca 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
			menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
     f88:	f895 31f0 	ldrb.w	r3, [r5, #496]	; 0x1f0
			menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
			menuScreen->screen2[5][14] = '.';
     f8c:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
			outputS(menuScreen->screen2[5], 3, currentGlobals);
     f90:	4638      	mov	r0, r7
			outputS(menuScreen->screen2[5], 3, currentGlobals);
			break;
			
		case TrackMenuArrow5Select: 
			numPrinter(menuScreen->screen2[5], 13, 5, totalSustainTime);
			menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
     f92:	b2db      	uxtb	r3, r3
			menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
			menuScreen->screen2[5][14] = '.';
			outputS(menuScreen->screen2[5], 3, currentGlobals);
     f94:	4622      	mov	r2, r4
     f96:	2103      	movs	r1, #3
			outputS(menuScreen->screen2[5], 3, currentGlobals);
			break;
			
		case TrackMenuArrow5Select: 
			numPrinter(menuScreen->screen2[5], 13, 5, totalSustainTime);
			menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
     f98:	f885 31ef 	strb.w	r3, [r5, #495]	; 0x1ef
			menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
     f9c:	f895 31f1 	ldrb.w	r3, [r5, #497]	; 0x1f1
     fa0:	b2db      	uxtb	r3, r3
     fa2:	f885 31f0 	strb.w	r3, [r5, #496]	; 0x1f0
			menuScreen->screen2[5][14] = '.';
     fa6:	f885 e1f1 	strb.w	lr, [r5, #497]	; 0x1f1
			outputS(menuScreen->screen2[5], 3, currentGlobals);
     faa:	f000 fd8b 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			break;
     fae:	e61e      	b.n	bee <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xfa>
			outputS(menuScreen->screen2[3], 2, currentGlobals);
			outputS(menuScreen->screen2[4], 3, currentGlobals);
			break;

		case TrackMenuArrow4Select:
			switch (currentPattern->envelopeType[currentGlobals->currentTrack])
     fb0:	7aa3      	ldrb	r3, [r4, #10]
     fb2:	4433      	add	r3, r6
     fb4:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
     fb8:	2b03      	cmp	r3, #3
     fba:	f200 81bd 	bhi.w	1338 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x844>
     fbe:	e8df f013 	tbh	[pc, r3, lsl #1]
     fc2:	01c4      	.short	0x01c4
     fc4:	01b101c2 	.word	0x01b101c2
     fc8:	01d1      	.short	0x01d1
			outputS(menuScreen->screen2[2], 2, currentGlobals);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			break;

		case TrackMenuArrow3Select:
			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack]) + 1);
     fca:	7aa3      	ldrb	r3, [r4, #10]
     fcc:	f205 17b9 	addw	r7, r5, #441	; 0x1b9
     fd0:	2202      	movs	r2, #2
     fd2:	210a      	movs	r1, #10
     fd4:	4433      	add	r3, r6
     fd6:	4638      	mov	r0, r7
     fd8:	7e1b      	ldrb	r3, [r3, #24]
     fda:	3301      	adds	r3, #1
     fdc:	f000 fd9e 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
			outputS(menuScreen->screen2[3], 3, currentGlobals);
     fe0:	4622      	mov	r2, r4
     fe2:	4638      	mov	r0, r7
     fe4:	2103      	movs	r1, #3
     fe6:	f000 fd6d 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			break;
     fea:	e600      	b.n	bee <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xfa>
			outputS(menuScreen->screen2[2], 2, currentGlobals);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			break;
			
		case TrackMenuArrow1Select:
			numPrinter(menuScreen->screen2[1], 10, 4, (trackSample));
     fec:	f205 108f 	addw	r0, r5, #399	; 0x18f
     ff0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
     ff4:	2204      	movs	r2, #4
     ff6:	210a      	movs	r1, #10
     ff8:	4607      	mov	r7, r0
     ffa:	f000 fd8f 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
			outputS(menuScreen->screen2[1], 1, currentGlobals);
     ffe:	4622      	mov	r2, r4
    1000:	4638      	mov	r0, r7
    1002:	2101      	movs	r1, #1
    1004:	f000 fd5e 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			break;
    1008:	e5f1      	b.n	bee <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xfa>
			}
			outputS(menuScreen->screen2[4], 3, currentGlobals);
			break;

		case TrackMenuArrow5:
			menuScreen->screen2[3][19] = ' ';
    100a:	2320      	movs	r3, #32
			menuScreen->screen2[4][19] = ' ';
			menuScreen->screen2[5][19] = 8;
    100c:	2708      	movs	r7, #8
			outputS(menuScreen->screen2[3], 1, currentGlobals);
    100e:	4622      	mov	r2, r4
    1010:	f205 10b9 	addw	r0, r5, #441	; 0x1b9
			}
			outputS(menuScreen->screen2[4], 3, currentGlobals);
			break;

		case TrackMenuArrow5:
			menuScreen->screen2[3][19] = ' ';
    1014:	f885 31cc 	strb.w	r3, [r5, #460]	; 0x1cc
			menuScreen->screen2[4][19] = ' ';
			menuScreen->screen2[5][19] = 8;
			outputS(menuScreen->screen2[3], 1, currentGlobals);
    1018:	2101      	movs	r1, #1
			outputS(menuScreen->screen2[4], 3, currentGlobals);
			break;

		case TrackMenuArrow5:
			menuScreen->screen2[3][19] = ' ';
			menuScreen->screen2[4][19] = ' ';
    101a:	f885 31e1 	strb.w	r3, [r5, #481]	; 0x1e1
			menuScreen->screen2[5][19] = 8;
    101e:	f885 71f6 	strb.w	r7, [r5, #502]	; 0x1f6
			outputS(menuScreen->screen2[3], 1, currentGlobals);
    1022:	f000 fd4f 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen2[4], 2, currentGlobals);
    1026:	4622      	mov	r2, r4
    1028:	f505 70e7 	add.w	r0, r5, #462	; 0x1ce
    102c:	2102      	movs	r1, #2
    102e:	f000 fd49 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen2[5], 3, currentGlobals);
    1032:	4622      	mov	r2, r4
    1034:	2103      	movs	r1, #3
    1036:	f205 10e3 	addw	r0, r5, #483	; 0x1e3
    103a:	f000 fd43 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			break;
    103e:	e5d6      	b.n	bee <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xfa>
			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack]) + 1);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			break;

		case TrackMenuArrow4:
			menuScreen->screen2[2][19] = ' ';
    1040:	2320      	movs	r3, #32
			menuScreen->screen2[3][19] = ' ';
			menuScreen->screen2[4][19] = 8;
    1042:	2708      	movs	r7, #8
			outputS(menuScreen->screen2[2], 1, currentGlobals);
    1044:	4622      	mov	r2, r4
    1046:	f505 70d2 	add.w	r0, r5, #420	; 0x1a4
			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack]) + 1);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			break;

		case TrackMenuArrow4:
			menuScreen->screen2[2][19] = ' ';
    104a:	f885 31b7 	strb.w	r3, [r5, #439]	; 0x1b7
			menuScreen->screen2[3][19] = ' ';
			menuScreen->screen2[4][19] = 8;
			outputS(menuScreen->screen2[2], 1, currentGlobals);
    104e:	2101      	movs	r1, #1
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			break;

		case TrackMenuArrow4:
			menuScreen->screen2[2][19] = ' ';
			menuScreen->screen2[3][19] = ' ';
    1050:	f885 31cc 	strb.w	r3, [r5, #460]	; 0x1cc
			menuScreen->screen2[4][19] = 8;
    1054:	f885 71e1 	strb.w	r7, [r5, #481]	; 0x1e1
			outputS(menuScreen->screen2[2], 1, currentGlobals);
    1058:	f000 fd34 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen2[3], 2, currentGlobals);
    105c:	4622      	mov	r2, r4
    105e:	f205 10b9 	addw	r0, r5, #441	; 0x1b9
    1062:	2102      	movs	r1, #2
    1064:	f000 fd2e 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen2[4], 3, currentGlobals);
    1068:	4622      	mov	r2, r4
    106a:	2103      	movs	r1, #3
    106c:	f505 70e7 	add.w	r0, r5, #462	; 0x1ce
    1070:	f000 fd28 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			break;
    1074:	e5bb      	b.n	bee <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xfa>
			outputS(menuScreen->screen3[2], 2, currentGlobals);
			outputS(menuScreen->screen3[3], 3, currentGlobals);
			break;

		case GlobalMenuArrow1Select:
			numPrinter(menuScreen->screen3[1], 14, 2, (currentGlobals->midiChannel) + 1);
    1076:	f505 7713 	add.w	r7, r5, #588	; 0x24c
    107a:	7c63      	ldrb	r3, [r4, #17]
    107c:	2202      	movs	r2, #2
    107e:	210e      	movs	r1, #14
    1080:	4638      	mov	r0, r7
    1082:	3301      	adds	r3, #1
    1084:	e7b9      	b.n	ffa <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x506>
			midiNotePrinter(menuScreen->screen3[2], 14, currentGlobals->midiTrackNote[currentGlobals->currentTrack]);
			outputS(menuScreen->screen3[2], 2, currentGlobals);
			break;

		case GlobalMenuArrow3:
			menuScreen->screen3[1][19] = ' ';
    1086:	2320      	movs	r3, #32
			menuScreen->screen3[2][19] = ' ';
			menuScreen->screen3[3][19] = 8;
    1088:	2708      	movs	r7, #8
			outputS(menuScreen->screen3[1], 1, currentGlobals);
    108a:	4622      	mov	r2, r4
    108c:	2101      	movs	r1, #1
    108e:	f505 7013 	add.w	r0, r5, #588	; 0x24c
			midiNotePrinter(menuScreen->screen3[2], 14, currentGlobals->midiTrackNote[currentGlobals->currentTrack]);
			outputS(menuScreen->screen3[2], 2, currentGlobals);
			break;

		case GlobalMenuArrow3:
			menuScreen->screen3[1][19] = ' ';
    1092:	f885 325f 	strb.w	r3, [r5, #607]	; 0x25f
			menuScreen->screen3[2][19] = ' ';
    1096:	f885 3274 	strb.w	r3, [r5, #628]	; 0x274
			menuScreen->screen3[3][19] = 8;
    109a:	f885 7289 	strb.w	r7, [r5, #649]	; 0x289
			outputS(menuScreen->screen3[1], 1, currentGlobals);
    109e:	f000 fd11 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen3[2], 2, currentGlobals);
    10a2:	4622      	mov	r2, r4
    10a4:	f205 2061 	addw	r0, r5, #609	; 0x261
    10a8:	2102      	movs	r1, #2
    10aa:	f000 fd0b 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen3[3], 3, currentGlobals);
    10ae:	4622      	mov	r2, r4
    10b0:	2103      	movs	r1, #3
    10b2:	f205 2076 	addw	r0, r5, #630	; 0x276
    10b6:	f000 fd05 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			break;
    10ba:	e598      	b.n	bee <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xfa>
			numPrinter(menuScreen->screen3[1], 14, 2, (currentGlobals->midiChannel) + 1);
			outputS(menuScreen->screen3[1], 1, currentGlobals);
			break;

		case GlobalMenuArrow2:
			menuScreen->screen3[1][19] = ' ';
    10bc:	2320      	movs	r3, #32
			menuScreen->screen3[2][19] = 8;
    10be:	2708      	movs	r7, #8
			menuScreen->screen3[3][19] = ' ';
			outputS(menuScreen->screen3[1], 1, currentGlobals);
    10c0:	4622      	mov	r2, r4
    10c2:	2101      	movs	r1, #1
			numPrinter(menuScreen->screen3[1], 14, 2, (currentGlobals->midiChannel) + 1);
			outputS(menuScreen->screen3[1], 1, currentGlobals);
			break;

		case GlobalMenuArrow2:
			menuScreen->screen3[1][19] = ' ';
    10c4:	f885 325f 	strb.w	r3, [r5, #607]	; 0x25f
			menuScreen->screen3[2][19] = 8;
			menuScreen->screen3[3][19] = ' ';
			outputS(menuScreen->screen3[1], 1, currentGlobals);
    10c8:	f505 7013 	add.w	r0, r5, #588	; 0x24c
			outputS(menuScreen->screen3[1], 1, currentGlobals);
			break;

		case GlobalMenuArrow2:
			menuScreen->screen3[1][19] = ' ';
			menuScreen->screen3[2][19] = 8;
    10cc:	f885 7274 	strb.w	r7, [r5, #628]	; 0x274
			menuScreen->screen3[3][19] = ' ';
    10d0:	f885 3289 	strb.w	r3, [r5, #649]	; 0x289
    10d4:	e7e3      	b.n	109e <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x5aa>
    10d6:	f505 7913 	add.w	r9, r5, #588	; 0x24c
    10da:	f205 2861 	addw	r8, r5, #609	; 0x261
    10de:	f205 2776 	addw	r7, r5, #630	; 0x276
    10e2:	e730      	b.n	f46 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x452>
			outputS(menuScreen->screen1[1], 1, currentGlobals);
			break;


		case SequencerMenuArrow2:
			menuScreen->screen1[1][19] = ' ';
    10e4:	2320      	movs	r3, #32
			menuScreen->screen1[2][19] = 8;
    10e6:	2708      	movs	r7, #8
			menuScreen->screen1[3][19] = ' ';
			outputS(menuScreen->screen1[1], 1, currentGlobals);
    10e8:	4622      	mov	r2, r4
    10ea:	2101      	movs	r1, #1
    10ec:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
			outputS(menuScreen->screen1[1], 1, currentGlobals);
			break;


		case SequencerMenuArrow2:
			menuScreen->screen1[1][19] = ' ';
    10f0:	f885 30e5 	strb.w	r3, [r5, #229]	; 0xe5
			menuScreen->screen1[2][19] = 8;
    10f4:	f885 70fa 	strb.w	r7, [r5, #250]	; 0xfa
			menuScreen->screen1[3][19] = ' ';
    10f8:	f885 310f 	strb.w	r3, [r5, #271]	; 0x10f

		case SequencerMenuArrow3:
			menuScreen->screen1[1][19] = ' ';
			menuScreen->screen1[2][19] = ' ';
			menuScreen->screen1[3][19] = 8;
			outputS(menuScreen->screen1[1], 1, currentGlobals);
    10fc:	f000 fce2 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen1[2], 2, currentGlobals);
    1100:	4622      	mov	r2, r4
    1102:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
    1106:	2102      	movs	r1, #2
    1108:	f000 fcdc 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen1[3], 3, currentGlobals);
    110c:	4622      	mov	r2, r4
    110e:	2103      	movs	r1, #3
    1110:	f105 00fc 	add.w	r0, r5, #252	; 0xfc
    1114:	f000 fcd6 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			break;
    1118:	e569      	b.n	bee <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xfa>
    111a:	f105 07fc 	add.w	r7, r5, #252	; 0xfc
    111e:	f105 08e7 	add.w	r8, r5, #231	; 0xe7
    1122:	f105 09d2 	add.w	r9, r5, #210	; 0xd2
			outputS(menuScreen->screen1[3], 3, currentGlobals);
			currentGlobals->menuState = SequencerMenuArrow1;


		case SequencerMenuArrow1:
			menuScreen->screen1[1][19] = 8;
    1126:	2108      	movs	r1, #8
			menuScreen->screen1[2][19] = ' ';
    1128:	2320      	movs	r3, #32
			menuScreen->screen1[3][19] = ' ';
			outputS(menuScreen->screen1[1], 1, currentGlobals);
    112a:	4648      	mov	r0, r9
    112c:	4622      	mov	r2, r4
			outputS(menuScreen->screen1[3], 3, currentGlobals);
			currentGlobals->menuState = SequencerMenuArrow1;


		case SequencerMenuArrow1:
			menuScreen->screen1[1][19] = 8;
    112e:	f885 10e5 	strb.w	r1, [r5, #229]	; 0xe5
			menuScreen->screen1[2][19] = ' ';
			menuScreen->screen1[3][19] = ' ';
			outputS(menuScreen->screen1[1], 1, currentGlobals);
    1132:	2101      	movs	r1, #1
			currentGlobals->menuState = SequencerMenuArrow1;


		case SequencerMenuArrow1:
			menuScreen->screen1[1][19] = 8;
			menuScreen->screen1[2][19] = ' ';
    1134:	f885 30fa 	strb.w	r3, [r5, #250]	; 0xfa
			menuScreen->screen1[3][19] = ' ';
    1138:	f885 310f 	strb.w	r3, [r5, #271]	; 0x10f
    113c:	e70e      	b.n	f5c <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x468>
			outputS(menuScreen->screen0[3], 3, currentGlobals);
			break;

		case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0, currentGlobals);
			outputS(menuScreen->screen1[1], 1, currentGlobals);
    113e:	f105 09d2 	add.w	r9, r5, #210	; 0xd2
			outputS(menuScreen->screen0[2], 2, currentGlobals);
			outputS(menuScreen->screen0[3], 3, currentGlobals);
			break;

		case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0, currentGlobals);
    1142:	4622      	mov	r2, r4
    1144:	2100      	movs	r1, #0
    1146:	f105 00bd 	add.w	r0, r5, #189	; 0xbd
			outputS(menuScreen->screen1[1], 1, currentGlobals);
			outputS(menuScreen->screen1[2], 2, currentGlobals);
    114a:	f105 08e7 	add.w	r8, r5, #231	; 0xe7
			outputS(menuScreen->screen0[2], 2, currentGlobals);
			outputS(menuScreen->screen0[3], 3, currentGlobals);
			break;

		case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0, currentGlobals);
    114e:	f000 fcb9 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen1[1], 1, currentGlobals);
			outputS(menuScreen->screen1[2], 2, currentGlobals);
			outputS(menuScreen->screen1[3], 3, currentGlobals);
    1152:	f105 07fc 	add.w	r7, r5, #252	; 0xfc
			outputS(menuScreen->screen0[3], 3, currentGlobals);
			break;

		case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0, currentGlobals);
			outputS(menuScreen->screen1[1], 1, currentGlobals);
    1156:	4648      	mov	r0, r9
    1158:	4622      	mov	r2, r4
    115a:	2101      	movs	r1, #1
    115c:	f000 fcb2 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen1[2], 2, currentGlobals);
    1160:	4640      	mov	r0, r8
    1162:	4622      	mov	r2, r4
    1164:	2102      	movs	r1, #2
    1166:	f000 fcad 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen1[3], 3, currentGlobals);
    116a:	4638      	mov	r0, r7
    116c:	4622      	mov	r2, r4
    116e:	2103      	movs	r1, #3
    1170:	f000 fca8 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			currentGlobals->menuState = SequencerMenuArrow1;
    1174:	2311      	movs	r3, #17
    1176:	72e3      	strb	r3, [r4, #11]
    1178:	e7d5      	b.n	1126 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x632>
}

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
    117a:	f105 072a 	add.w	r7, r5, #42	; 0x2a
    117e:	f8b6 30c8 	ldrh.w	r3, [r6, #200]	; 0xc8
    1182:	2203      	movs	r2, #3
    1184:	2105      	movs	r1, #5
    1186:	4638      	mov	r0, r7
    1188:	b29b      	uxth	r3, r3
    118a:	f000 fcc7 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
    118e:	f896 30ca 	ldrb.w	r3, [r6, #202]	; 0xca
    1192:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
    1196:	2202      	movs	r2, #2
    1198:	2107      	movs	r1, #7
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
    119a:	f105 0815 	add.w	r8, r5, #21

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
    119e:	f000 fcbd 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
    11a2:	7a23      	ldrb	r3, [r4, #8]
    11a4:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
    11a8:	2203      	movs	r2, #3
    11aa:	2109      	movs	r1, #9
    11ac:	3301      	adds	r3, #1
    11ae:	f000 fcb5 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
    11b2:	7a23      	ldrb	r3, [r4, #8]
    11b4:	4640      	mov	r0, r8
    11b6:	2203      	movs	r2, #3
    11b8:	3301      	adds	r3, #1
    11ba:	2109      	movs	r1, #9
    11bc:	f000 fcae 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>

		switch (currentGlobals->menuState)
		{
		case PreformanceModeInit: //initial state
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
			outputS(menuScreen->screen0[0], 0, currentGlobals);
    11c0:	4622      	mov	r2, r4
    11c2:	4628      	mov	r0, r5
    11c4:	2100      	movs	r1, #0
    11c6:	f000 fc7d 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen0[1], 1, currentGlobals);
    11ca:	4622      	mov	r2, r4
    11cc:	4640      	mov	r0, r8
    11ce:	2101      	movs	r1, #1
    11d0:	f000 fc78 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen0[2], 2, currentGlobals);
    11d4:	4622      	mov	r2, r4
    11d6:	4638      	mov	r0, r7
    11d8:	2102      	movs	r1, #2
    11da:	f000 fc73 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen0[3], 3, currentGlobals);
    11de:	4622      	mov	r2, r4
    11e0:	2103      	movs	r1, #3
    11e2:	f105 003f 	add.w	r0, r5, #63	; 0x3f
    11e6:	f000 fc6d 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			break;
    11ea:	e500      	b.n	bee <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xfa>

			outputS(menuScreen->screen2[2], 2, currentGlobals);
			break;

		case TrackMenuArrow3:
			menuScreen->screen2[1][19] = ' ';
    11ec:	2320      	movs	r3, #32
			menuScreen->screen2[2][19] = ' ';
			menuScreen->screen2[3][19] = 8;
    11ee:	2708      	movs	r7, #8
			outputS(menuScreen->screen2[1], 1, currentGlobals);
    11f0:	4622      	mov	r2, r4
    11f2:	2101      	movs	r1, #1
    11f4:	f205 108f 	addw	r0, r5, #399	; 0x18f

			outputS(menuScreen->screen2[2], 2, currentGlobals);
			break;

		case TrackMenuArrow3:
			menuScreen->screen2[1][19] = ' ';
    11f8:	f885 31a2 	strb.w	r3, [r5, #418]	; 0x1a2
			menuScreen->screen2[2][19] = ' ';
    11fc:	f885 31b7 	strb.w	r3, [r5, #439]	; 0x1b7
			menuScreen->screen2[3][19] = 8;
    1200:	f885 71cc 	strb.w	r7, [r5, #460]	; 0x1cc
			outputS(menuScreen->screen2[1], 1, currentGlobals);
    1204:	f000 fc5e 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen2[2], 2, currentGlobals);
    1208:	4622      	mov	r2, r4
    120a:	f505 70d2 	add.w	r0, r5, #420	; 0x1a4
    120e:	2102      	movs	r1, #2
    1210:	f000 fc58 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen2[3], 3, currentGlobals);
    1214:	4622      	mov	r2, r4
    1216:	2103      	movs	r1, #3
    1218:	f205 10b9 	addw	r0, r5, #441	; 0x1b9
    121c:	f000 fc52 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			break;
    1220:	e4e5      	b.n	bee <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xfa>
			numPrinter(menuScreen->screen2[1], 10, 4, (trackSample));
			outputS(menuScreen->screen2[1], 1, currentGlobals);
			break;
			
		case TrackMenuArrow2:
			menuScreen->screen2[1][19] = ' ';
    1222:	2320      	movs	r3, #32
			menuScreen->screen2[2][19] = 8;
    1224:	2708      	movs	r7, #8
			menuScreen->screen2[3][19] = ' ';
			outputS(menuScreen->screen2[1], 1, currentGlobals);
    1226:	4622      	mov	r2, r4
    1228:	2101      	movs	r1, #1
			numPrinter(menuScreen->screen2[1], 10, 4, (trackSample));
			outputS(menuScreen->screen2[1], 1, currentGlobals);
			break;
			
		case TrackMenuArrow2:
			menuScreen->screen2[1][19] = ' ';
    122a:	f885 31a2 	strb.w	r3, [r5, #418]	; 0x1a2
			menuScreen->screen2[2][19] = 8;
			menuScreen->screen2[3][19] = ' ';
			outputS(menuScreen->screen2[1], 1, currentGlobals);
    122e:	f205 108f 	addw	r0, r5, #399	; 0x18f
			outputS(menuScreen->screen2[1], 1, currentGlobals);
			break;
			
		case TrackMenuArrow2:
			menuScreen->screen2[1][19] = ' ';
			menuScreen->screen2[2][19] = 8;
    1232:	f885 71b7 	strb.w	r7, [r5, #439]	; 0x1b7
			menuScreen->screen2[3][19] = ' ';
    1236:	f885 31cc 	strb.w	r3, [r5, #460]	; 0x1cc
    123a:	e7e3      	b.n	1204 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x710>
    123c:	f205 198f 	addw	r9, r5, #399	; 0x18f
    1240:	f505 78d2 	add.w	r8, r5, #420	; 0x1a4
    1244:	f205 17b9 	addw	r7, r5, #441	; 0x1b9
			outputS(menuScreen->screen2[2], 2, currentGlobals);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			currentGlobals->menuState = TrackMenuArrow1;

		case TrackMenuArrow1:
			menuScreen->screen2[1][19] = 8;
    1248:	2108      	movs	r1, #8
			menuScreen->screen2[2][19] = ' ';
    124a:	2320      	movs	r3, #32
			menuScreen->screen2[3][19] = ' ';
			outputS(menuScreen->screen2[1], 1, currentGlobals);
    124c:	4648      	mov	r0, r9
    124e:	4622      	mov	r2, r4
			outputS(menuScreen->screen2[2], 2, currentGlobals);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			currentGlobals->menuState = TrackMenuArrow1;

		case TrackMenuArrow1:
			menuScreen->screen2[1][19] = 8;
    1250:	f885 11a2 	strb.w	r1, [r5, #418]	; 0x1a2
			menuScreen->screen2[2][19] = ' ';
			menuScreen->screen2[3][19] = ' ';
			outputS(menuScreen->screen2[1], 1, currentGlobals);
    1254:	2101      	movs	r1, #1
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			currentGlobals->menuState = TrackMenuArrow1;

		case TrackMenuArrow1:
			menuScreen->screen2[1][19] = 8;
			menuScreen->screen2[2][19] = ' ';
    1256:	f885 31b7 	strb.w	r3, [r5, #439]	; 0x1b7
			menuScreen->screen2[3][19] = ' ';
    125a:	f885 31cc 	strb.w	r3, [r5, #460]	; 0x1cc
    125e:	e67d      	b.n	f5c <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x468>
			break;


		case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0, currentGlobals);
			outputS(menuScreen->screen2[1], 1, currentGlobals);
    1260:	f205 198f 	addw	r9, r5, #399	; 0x18f
			outputS(menuScreen->screen1[3], 3, currentGlobals);
			break;


		case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0, currentGlobals);
    1264:	4622      	mov	r2, r4
    1266:	2100      	movs	r1, #0
    1268:	f505 70bd 	add.w	r0, r5, #378	; 0x17a
			outputS(menuScreen->screen2[1], 1, currentGlobals);
			outputS(menuScreen->screen2[2], 2, currentGlobals);
    126c:	f505 78d2 	add.w	r8, r5, #420	; 0x1a4
			outputS(menuScreen->screen1[3], 3, currentGlobals);
			break;


		case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0, currentGlobals);
    1270:	f000 fc28 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen2[1], 1, currentGlobals);
			outputS(menuScreen->screen2[2], 2, currentGlobals);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
    1274:	f205 17b9 	addw	r7, r5, #441	; 0x1b9
			break;


		case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0, currentGlobals);
			outputS(menuScreen->screen2[1], 1, currentGlobals);
    1278:	4648      	mov	r0, r9
    127a:	4622      	mov	r2, r4
    127c:	2101      	movs	r1, #1
    127e:	f000 fc21 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen2[2], 2, currentGlobals);
    1282:	4640      	mov	r0, r8
    1284:	4622      	mov	r2, r4
    1286:	2102      	movs	r1, #2
    1288:	f000 fc1c 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen2[3], 3, currentGlobals);
    128c:	4638      	mov	r0, r7
    128e:	4622      	mov	r2, r4
    1290:	2103      	movs	r1, #3
    1292:	f000 fc17 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			currentGlobals->menuState = TrackMenuArrow1;
    1296:	2321      	movs	r3, #33	; 0x21
    1298:	72e3      	strb	r3, [r4, #11]
    129a:	e7d5      	b.n	1248 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x754>
			outputS(menuScreen->screen1[2], 2, currentGlobals);
			outputS(menuScreen->screen1[3], 3, currentGlobals);
			break;

		case SequencerMenuArrow3Select:
			numPrinter(menuScreen->screen1[3], 14, 2, (currentGlobals->currentStep) + 1); //these are 0 indexed, so we need to add 1 to the display.
    129c:	f105 07fc 	add.w	r7, r5, #252	; 0xfc
    12a0:	7a63      	ldrb	r3, [r4, #9]
    12a2:	2202      	movs	r2, #2
    12a4:	210e      	movs	r1, #14
    12a6:	4638      	mov	r0, r7
    12a8:	e697      	b.n	fda <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x4e6>
			outputS(menuScreen->screen1[2], 2, currentGlobals);
			outputS(menuScreen->screen1[3], 3, currentGlobals);
			break;

		case SequencerMenuArrow2Select:
			numPrinter(menuScreen->screen1[2], 7, 2, currentPattern->numSteps);
    12aa:	f105 07e7 	add.w	r7, r5, #231	; 0xe7
    12ae:	f896 30ca 	ldrb.w	r3, [r6, #202]	; 0xca
    12b2:	2202      	movs	r2, #2
    12b4:	2107      	movs	r1, #7
    12b6:	4638      	mov	r0, r7
    12b8:	f000 fc30 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
			outputS(menuScreen->screen1[2], 2, currentGlobals);
    12bc:	4622      	mov	r2, r4
    12be:	4638      	mov	r0, r7
    12c0:	2102      	movs	r1, #2
    12c2:	f000 fbff 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			break;
    12c6:	e492      	b.n	bee <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xfa>
}

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
    12c8:	f8b6 30c8 	ldrh.w	r3, [r6, #200]	; 0xc8
    12cc:	2203      	movs	r2, #3
    12ce:	2105      	movs	r1, #5
    12d0:	f105 002a 	add.w	r0, r5, #42	; 0x2a
    12d4:	b29b      	uxth	r3, r3
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
    12d6:	f105 07d2 	add.w	r7, r5, #210	; 0xd2
}

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
    12da:	f000 fc1f 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
    12de:	f896 30ca 	ldrb.w	r3, [r6, #202]	; 0xca
    12e2:	2202      	movs	r2, #2
    12e4:	2107      	movs	r1, #7
    12e6:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
    12ea:	f000 fc17 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
    12ee:	7a23      	ldrb	r3, [r4, #8]
    12f0:	4638      	mov	r0, r7
    12f2:	2203      	movs	r2, #3
    12f4:	3301      	adds	r3, #1
    12f6:	2109      	movs	r1, #9
    12f8:	f000 fc10 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
    12fc:	7a23      	ldrb	r3, [r4, #8]
    12fe:	2203      	movs	r2, #3
    1300:	2109      	movs	r1, #9
    1302:	3301      	adds	r3, #1
    1304:	f105 0015 	add.w	r0, r5, #21
    1308:	e677      	b.n	ffa <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x506>
			numPrinter(menuScreen->screen1[2], 7, 2, currentPattern->numSteps);
			outputS(menuScreen->screen1[2], 2, currentGlobals);
			break;

		case SequencerMenuArrow3:
			menuScreen->screen1[1][19] = ' ';
    130a:	2320      	movs	r3, #32
			menuScreen->screen1[2][19] = ' ';
			menuScreen->screen1[3][19] = 8;
    130c:	2708      	movs	r7, #8
			outputS(menuScreen->screen1[1], 1, currentGlobals);
    130e:	4622      	mov	r2, r4
    1310:	2101      	movs	r1, #1
			numPrinter(menuScreen->screen1[2], 7, 2, currentPattern->numSteps);
			outputS(menuScreen->screen1[2], 2, currentGlobals);
			break;

		case SequencerMenuArrow3:
			menuScreen->screen1[1][19] = ' ';
    1312:	f885 30e5 	strb.w	r3, [r5, #229]	; 0xe5
			menuScreen->screen1[2][19] = ' ';
			menuScreen->screen1[3][19] = 8;
			outputS(menuScreen->screen1[1], 1, currentGlobals);
    1316:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
			outputS(menuScreen->screen1[2], 2, currentGlobals);
			break;

		case SequencerMenuArrow3:
			menuScreen->screen1[1][19] = ' ';
			menuScreen->screen1[2][19] = ' ';
    131a:	f885 30fa 	strb.w	r3, [r5, #250]	; 0xfa
			menuScreen->screen1[3][19] = 8;
    131e:	f885 710f 	strb.w	r7, [r5, #271]	; 0x10f
    1322:	e6eb      	b.n	10fc <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x608>
				menuScreen->screen2[4][16] = ' ';
				menuScreen->screen2[4][17] = ' ';
				break;

			case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1324:	2241      	movs	r2, #65	; 0x41
				menuScreen->screen2[4][15] = ' ';
    1326:	2320      	movs	r3, #32
				menuScreen->screen2[4][16] = ' ';
				menuScreen->screen2[4][17] = ' ';
				break;

			case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1328:	f885 21dc 	strb.w	r2, [r5, #476]	; 0x1dc
				menuScreen->screen2[4][15] = ' ';
    132c:	f885 31dd 	strb.w	r3, [r5, #477]	; 0x1dd
				menuScreen->screen2[4][16] = ' ';
    1330:	f885 31de 	strb.w	r3, [r5, #478]	; 0x1de
				menuScreen->screen2[4][17] = ' ';
    1334:	f885 31df 	strb.w	r3, [r5, #479]	; 0x1df
				menuScreen->screen2[4][15] = 'o';
				menuScreen->screen2[4][16] = 'n';
				menuScreen->screen2[4][17] = 'e';
				break;
			}
			outputS(menuScreen->screen2[4], 3, currentGlobals);
    1338:	4622      	mov	r2, r4
    133a:	2103      	movs	r1, #3
    133c:	f505 70e7 	add.w	r0, r5, #462	; 0x1ce
    1340:	f000 fbc0 	bl	1ac4 <outputS(char volatile*, int, Globals volatile*)>
			break;
    1344:	e453      	b.n	bee <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xfa>
				menuScreen->screen2[4][16] = 'R';
				menuScreen->screen2[4][17] = ' ';
				break;

			case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1346:	2252      	movs	r2, #82	; 0x52
    1348:	e7ed      	b.n	1326 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x832>

		case TrackMenuArrow4Select:
			switch (currentPattern->envelopeType[currentGlobals->currentTrack])
			{
			case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    134a:	2041      	movs	r0, #65	; 0x41
				menuScreen->screen2[4][15] = '-';
    134c:	212d      	movs	r1, #45	; 0x2d
				menuScreen->screen2[4][16] = 'R';
    134e:	2252      	movs	r2, #82	; 0x52
				menuScreen->screen2[4][17] = ' ';
    1350:	2320      	movs	r3, #32

		case TrackMenuArrow4Select:
			switch (currentPattern->envelopeType[currentGlobals->currentTrack])
			{
			case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1352:	f885 01dc 	strb.w	r0, [r5, #476]	; 0x1dc
				menuScreen->screen2[4][15] = '-';
    1356:	f885 11dd 	strb.w	r1, [r5, #477]	; 0x1dd
				menuScreen->screen2[4][16] = 'R';
    135a:	f885 21de 	strb.w	r2, [r5, #478]	; 0x1de
				menuScreen->screen2[4][17] = ' ';
    135e:	f885 31df 	strb.w	r3, [r5, #479]	; 0x1df
				break;
    1362:	e7e9      	b.n	1338 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x844>
				menuScreen->screen2[4][16] = ' ';
				menuScreen->screen2[4][17] = ' ';
				break;

			case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1364:	204e      	movs	r0, #78	; 0x4e
				menuScreen->screen2[4][15] = 'o';
    1366:	216f      	movs	r1, #111	; 0x6f
				menuScreen->screen2[4][16] = 'n';
    1368:	226e      	movs	r2, #110	; 0x6e
				menuScreen->screen2[4][17] = 'e';
    136a:	2365      	movs	r3, #101	; 0x65
				menuScreen->screen2[4][16] = ' ';
				menuScreen->screen2[4][17] = ' ';
				break;

			case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    136c:	f885 01dc 	strb.w	r0, [r5, #476]	; 0x1dc
				menuScreen->screen2[4][15] = 'o';
    1370:	f885 11dd 	strb.w	r1, [r5, #477]	; 0x1dd
				menuScreen->screen2[4][16] = 'n';
    1374:	f885 21de 	strb.w	r2, [r5, #478]	; 0x1de
				menuScreen->screen2[4][17] = 'e';
    1378:	f885 31df 	strb.w	r3, [r5, #479]	; 0x1df
				break;
    137c:	e7dc      	b.n	1338 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x844>
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
			{
			case 0:
				menuScreen->screen2[2][10] = 'S';
				menuScreen->screen2[2][11] = 'o';
    137e:	236f      	movs	r3, #111	; 0x6f
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
			{
			case 0:
				menuScreen->screen2[2][10] = 'S';
    1380:	2153      	movs	r1, #83	; 0x53
				menuScreen->screen2[2][11] = 'o';
				menuScreen->screen2[2][12] = 'l';
    1382:	226c      	movs	r2, #108	; 0x6c
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
			{
			case 0:
				menuScreen->screen2[2][10] = 'S';
    1384:	f885 11ae 	strb.w	r1, [r5, #430]	; 0x1ae
				menuScreen->screen2[2][11] = 'o';
    1388:	f885 31af 	strb.w	r3, [r5, #431]	; 0x1af
				menuScreen->screen2[2][12] = 'l';
    138c:	f885 21b0 	strb.w	r2, [r5, #432]	; 0x1b0
				menuScreen->screen2[2][13] = 'o';
    1390:	f885 31b1 	strb.w	r3, [r5, #433]	; 0x1b1
				break;
    1394:	e4a7      	b.n	ce6 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1f2>
		switch ((currentGlobals->knobStatus) >> 4)
		{
		case 0: //output volume
			if ((currentPattern->outputLevelMSB[positionSelect]) == 0)
			{ //value is positive
				menuScreen->knobScreen[0][14] = ' ';
    1396:	2320      	movs	r3, #32
				numPrinter(menuScreen->knobScreen[0], 15, 2, currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
    1398:	f505 793d 	add.w	r9, r5, #756	; 0x2f4
    139c:	2202      	movs	r2, #2
    139e:	210f      	movs	r1, #15
		switch ((currentGlobals->knobStatus) >> 4)
		{
		case 0: //output volume
			if ((currentPattern->outputLevelMSB[positionSelect]) == 0)
			{ //value is positive
				menuScreen->knobScreen[0][14] = ' ';
    13a0:	f885 3302 	strb.w	r3, [r5, #770]	; 0x302
				numPrinter(menuScreen->knobScreen[0], 15, 2, currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
    13a4:	4648      	mov	r0, r9
    13a6:	7a33      	ldrb	r3, [r6, #8]
    13a8:	f000 fbb8 	bl	1b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
    13ac:	e4e3      	b.n	d76 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x282>
			//we need some serious button code in these two cases. 
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
			{
			case 0:
				menuScreen->screen2[2][10] = 'S';
				menuScreen->screen2[2][11] = 'o';
    13ae:	236f      	movs	r3, #111	; 0x6f
		case TrackMenuArrow2Select:
			//we need some serious button code in these two cases. 
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
			{
			case 0:
				menuScreen->screen2[2][10] = 'S';
    13b0:	2153      	movs	r1, #83	; 0x53
				menuScreen->screen2[2][11] = 'o';
				menuScreen->screen2[2][12] = 'l';
    13b2:	226c      	movs	r2, #108	; 0x6c
		case TrackMenuArrow2Select:
			//we need some serious button code in these two cases. 
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
			{
			case 0:
				menuScreen->screen2[2][10] = 'S';
    13b4:	f885 11ae 	strb.w	r1, [r5, #430]	; 0x1ae
				menuScreen->screen2[2][11] = 'o';
    13b8:	f885 31af 	strb.w	r3, [r5, #431]	; 0x1af
				menuScreen->screen2[2][12] = 'l';
    13bc:	f885 21b0 	strb.w	r2, [r5, #432]	; 0x1b0
				menuScreen->screen2[2][13] = 'o';
    13c0:	f885 31b1 	strb.w	r3, [r5, #433]	; 0x1b1
				break;
    13c4:	e40d      	b.n	be2 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xee>
    13c6:	bf00      	nop

000013c8 <enableCycle(Globals volatile*)>:
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    13c8:	f890 22fa 	ldrb.w	r2, [r0, #762]	; 0x2fa
    13cc:	4bac      	ldr	r3, [pc, #688]	; (1680 <enableCycle(Globals volatile*)+0x2b8>)
    13ce:	327c      	adds	r2, #124	; 0x7c
    13d0:	eb00 0242 	add.w	r2, r0, r2, lsl #1

uint8_t new_line[4] = { 0x80, 0xA0, 0xC0, 0xE0 };
uint8_t OLEDPinArray[9] = {OLEDData0,OLEDData1,OLEDData2,OLEDData3,OLEDData4,OLEDData5, OLEDData6, OLEDData7, OLEDDataCommand};

void enableCycle(volatile Globals *OLEDGlobals) //called on by interval timer.
{
    13d4:	b5f0      	push	{r4, r5, r6, r7, lr}
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    13d6:	8852      	ldrh	r2, [r2, #2]
    13d8:	7819      	ldrb	r1, [r3, #0]
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    13da:	f012 0f01 	tst.w	r2, #1
    13de:	4aa9      	ldr	r2, [pc, #676]	; (1684 <enableCycle(Globals volatile*)+0x2bc>)
    13e0:	ea4f 1101 	mov.w	r1, r1, lsl #4
    13e4:	eb02 0401 	add.w	r4, r2, r1
    13e8:	5851      	ldr	r1, [r2, r1]
    13ea:	68e4      	ldr	r4, [r4, #12]
    13ec:	f040 8130 	bne.w	1650 <enableCycle(Globals volatile*)+0x288>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    13f0:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    13f4:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    13f8:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
    13fc:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    13fe:	785d      	ldrb	r5, [r3, #1]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    1400:	347c      	adds	r4, #124	; 0x7c
    1402:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    1406:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    140a:	012d      	lsls	r5, r5, #4
    140c:	8864      	ldrh	r4, [r4, #2]
    140e:	f3c4 044e 	ubfx	r4, r4, #1, #15
    1412:	804c      	strh	r4, [r1, #2]
    1414:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    1416:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    141a:	68e4      	ldr	r4, [r4, #12]
    141c:	317c      	adds	r1, #124	; 0x7c
    141e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    1422:	8849      	ldrh	r1, [r1, #2]
    1424:	f011 0f01 	tst.w	r1, #1
    1428:	5951      	ldr	r1, [r2, r5]
    142a:	f040 8114 	bne.w	1656 <enableCycle(Globals volatile*)+0x28e>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    142e:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    1432:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    1436:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
    143a:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    143c:	789d      	ldrb	r5, [r3, #2]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    143e:	347c      	adds	r4, #124	; 0x7c
    1440:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    1444:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    1448:	012d      	lsls	r5, r5, #4
    144a:	8864      	ldrh	r4, [r4, #2]
    144c:	f3c4 044e 	ubfx	r4, r4, #1, #15
    1450:	804c      	strh	r4, [r1, #2]
    1452:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    1454:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    1458:	68e4      	ldr	r4, [r4, #12]
    145a:	317c      	adds	r1, #124	; 0x7c
    145c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    1460:	8849      	ldrh	r1, [r1, #2]
    1462:	f011 0f01 	tst.w	r1, #1
    1466:	5951      	ldr	r1, [r2, r5]
    1468:	f040 80f8 	bne.w	165c <enableCycle(Globals volatile*)+0x294>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    146c:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    1470:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    1474:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
    1478:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    147a:	78dd      	ldrb	r5, [r3, #3]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    147c:	347c      	adds	r4, #124	; 0x7c
    147e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    1482:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    1486:	012d      	lsls	r5, r5, #4
    1488:	8864      	ldrh	r4, [r4, #2]
    148a:	f3c4 044e 	ubfx	r4, r4, #1, #15
    148e:	804c      	strh	r4, [r1, #2]
    1490:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    1492:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    1496:	68e4      	ldr	r4, [r4, #12]
    1498:	317c      	adds	r1, #124	; 0x7c
    149a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    149e:	8849      	ldrh	r1, [r1, #2]
    14a0:	f011 0f01 	tst.w	r1, #1
    14a4:	5951      	ldr	r1, [r2, r5]
    14a6:	f040 80dc 	bne.w	1662 <enableCycle(Globals volatile*)+0x29a>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    14aa:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    14ae:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    14b2:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
    14b6:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    14b8:	791d      	ldrb	r5, [r3, #4]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    14ba:	347c      	adds	r4, #124	; 0x7c
    14bc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    14c0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    14c4:	012d      	lsls	r5, r5, #4
    14c6:	8864      	ldrh	r4, [r4, #2]
    14c8:	f3c4 044e 	ubfx	r4, r4, #1, #15
    14cc:	804c      	strh	r4, [r1, #2]
    14ce:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    14d0:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    14d4:	68e4      	ldr	r4, [r4, #12]
    14d6:	317c      	adds	r1, #124	; 0x7c
    14d8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    14dc:	8849      	ldrh	r1, [r1, #2]
    14de:	f011 0f01 	tst.w	r1, #1
    14e2:	5951      	ldr	r1, [r2, r5]
    14e4:	f040 80c0 	bne.w	1668 <enableCycle(Globals volatile*)+0x2a0>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    14e8:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    14ec:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    14f0:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
    14f4:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    14f6:	795d      	ldrb	r5, [r3, #5]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    14f8:	347c      	adds	r4, #124	; 0x7c
    14fa:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    14fe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    1502:	012d      	lsls	r5, r5, #4
    1504:	8864      	ldrh	r4, [r4, #2]
    1506:	f3c4 044e 	ubfx	r4, r4, #1, #15
    150a:	804c      	strh	r4, [r1, #2]
    150c:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    150e:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    1512:	68e4      	ldr	r4, [r4, #12]
    1514:	317c      	adds	r1, #124	; 0x7c
    1516:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    151a:	8849      	ldrh	r1, [r1, #2]
    151c:	f011 0f01 	tst.w	r1, #1
    1520:	5951      	ldr	r1, [r2, r5]
    1522:	f040 80a4 	bne.w	166e <enableCycle(Globals volatile*)+0x2a6>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1526:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    152a:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    152e:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
    1532:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    1534:	799d      	ldrb	r5, [r3, #6]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    1536:	347c      	adds	r4, #124	; 0x7c
    1538:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    153c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    1540:	012d      	lsls	r5, r5, #4
    1542:	8864      	ldrh	r4, [r4, #2]
    1544:	f3c4 044e 	ubfx	r4, r4, #1, #15
    1548:	804c      	strh	r4, [r1, #2]
    154a:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    154c:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    1550:	68e4      	ldr	r4, [r4, #12]
    1552:	317c      	adds	r1, #124	; 0x7c
    1554:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    1558:	8849      	ldrh	r1, [r1, #2]
    155a:	f011 0f01 	tst.w	r1, #1
    155e:	5951      	ldr	r1, [r2, r5]
    1560:	f040 8088 	bne.w	1674 <enableCycle(Globals volatile*)+0x2ac>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1564:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    1568:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    156c:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
    1570:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    1572:	79dd      	ldrb	r5, [r3, #7]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    1574:	347c      	adds	r4, #124	; 0x7c
    1576:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    157a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    157e:	012d      	lsls	r5, r5, #4
    1580:	8864      	ldrh	r4, [r4, #2]
    1582:	f3c4 044e 	ubfx	r4, r4, #1, #15
    1586:	804c      	strh	r4, [r1, #2]
    1588:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    158a:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    158e:	68e4      	ldr	r4, [r4, #12]
    1590:	317c      	adds	r1, #124	; 0x7c
    1592:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    1596:	8849      	ldrh	r1, [r1, #2]
    1598:	f011 0f01 	tst.w	r1, #1
    159c:	5951      	ldr	r1, [r2, r5]
    159e:	d16c      	bne.n	167a <enableCycle(Globals volatile*)+0x2b2>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    15a0:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    15a4:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    15a8:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
    15ac:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    15ae:	7a1d      	ldrb	r5, [r3, #8]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    15b0:	347c      	adds	r4, #124	; 0x7c
    15b2:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    15b6:	eb00 0144 	add.w	r1, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    15ba:	012d      	lsls	r5, r5, #4
    15bc:	8849      	ldrh	r1, [r1, #2]
    15be:	f3c1 014e 	ubfx	r1, r1, #1, #15
    15c2:	8059      	strh	r1, [r3, #2]
    15c4:	1951      	adds	r1, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    15c6:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
    15ca:	337c      	adds	r3, #124	; 0x7c
    15cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    15d0:	885b      	ldrh	r3, [r3, #2]
    15d2:	f013 0f01 	tst.w	r3, #1
    15d6:	5953      	ldr	r3, [r2, r5]
    15d8:	68ca      	ldr	r2, [r1, #12]
    15da:	d036      	beq.n	164a <enableCycle(Globals volatile*)+0x282>
    15dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    15e0:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
		}
		OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = 0; //reset buffer to 0, now that we have shifted out the data. This might be un-necessary? 
    15e4:	f04f 0e00 	mov.w	lr, #0
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    15e8:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
			} else if (pin == 4) {
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    15ec:	f44f 6780 	mov.w	r7, #1024	; 0x400
    15f0:	337c      	adds	r3, #124	; 0x7c
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    15f2:	4925      	ldr	r1, [pc, #148]	; (1688 <enableCycle(Globals volatile*)+0x2c0>)
    15f4:	347c      	adds	r4, #124	; 0x7c
			} else if (pin == 4) {
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    15f6:	4e25      	ldr	r6, [pc, #148]	; (168c <enableCycle(Globals volatile*)+0x2c4>)
    15f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    15fc:	4d24      	ldr	r5, [pc, #144]	; (1690 <enableCycle(Globals volatile*)+0x2c8>)
    15fe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    1602:	4a24      	ldr	r2, [pc, #144]	; (1694 <enableCycle(Globals volatile*)+0x2cc>)
    1604:	8864      	ldrh	r4, [r4, #2]
    1606:	f3c4 044e 	ubfx	r4, r4, #1, #15
    160a:	805c      	strh	r4, [r3, #2]
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    160c:	460c      	mov	r4, r1
		}
		OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = 0; //reset buffer to 0, now that we have shifted out the data. This might be un-necessary? 
    160e:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
    1612:	337c      	adds	r3, #124	; 0x7c
    1614:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    1618:	f8a3 e002 	strh.w	lr, [r3, #2]
		OLEDGlobals->oledReadIndex++; //increment read Index
    161c:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
    1620:	3301      	adds	r3, #1
    1622:	b2db      	uxtb	r3, r3
    1624:	f880 32fa 	strb.w	r3, [r0, #762]	; 0x2fa
			} else if (pin == 4) {
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    1628:	f8c6 7084 	str.w	r7, [r6, #132]	; 0x84
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    162c:	6809      	ldr	r1, [r1, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    162e:	682b      	ldr	r3, [r5, #0]
    1630:	fba2 3203 	umull	r3, r2, r2, r3
    1634:	0c92      	lsrs	r2, r2, #18
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1636:	6823      	ldr	r3, [r4, #0]
    1638:	1a5b      	subs	r3, r3, r1
    163a:	429a      	cmp	r2, r3
    163c:	d8fb      	bhi.n	1636 <enableCycle(Globals volatile*)+0x26e>
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
    163e:	4b13      	ldr	r3, [pc, #76]	; (168c <enableCycle(Globals volatile*)+0x2c4>)
    1640:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1648:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    164a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    164e:	e7c7      	b.n	15e0 <enableCycle(Globals volatile*)+0x218>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    1650:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    1654:	e6ce      	b.n	13f4 <enableCycle(Globals volatile*)+0x2c>
    1656:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    165a:	e6ea      	b.n	1432 <enableCycle(Globals volatile*)+0x6a>
    165c:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    1660:	e706      	b.n	1470 <enableCycle(Globals volatile*)+0xa8>
    1662:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    1666:	e722      	b.n	14ae <enableCycle(Globals volatile*)+0xe6>
    1668:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    166c:	e73e      	b.n	14ec <enableCycle(Globals volatile*)+0x124>
    166e:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    1672:	e75a      	b.n	152a <enableCycle(Globals volatile*)+0x162>
    1674:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    1678:	e776      	b.n	1568 <enableCycle(Globals volatile*)+0x1a0>
    167a:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    167e:	e791      	b.n	15a4 <enableCycle(Globals volatile*)+0x1dc>
    1680:	200006a4 	.word	0x200006a4
    1684:	200002bc 	.word	0x200002bc
    1688:	e0001004 	.word	0xe0001004
    168c:	42004000 	.word	0x42004000
    1690:	200006d8 	.word	0x200006d8
    1694:	431bde83 	.word	0x431bde83

00001698 <initPins()>:
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
}

void initPins() 
{
    1698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    169a:	4c38      	ldr	r4, [pc, #224]	; (177c <initPins()+0xe4>)
    169c:	f104 0509 	add.w	r5, r4, #9
	for (int i = 0; i < 9; i++)
	{
		pinMode(OLEDPinArray[i], OUTPUT);
    16a0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    16a4:	2101      	movs	r1, #1
    16a6:	f002 f9c1 	bl	3a2c <pinMode>
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
}

void initPins() 
{
	for (int i = 0; i < 9; i++)
    16aa:	42ac      	cmp	r4, r5
    16ac:	d1f8      	bne.n	16a0 <initPins()+0x8>
	{
		pinMode(OLEDPinArray[i], OUTPUT);
	}
	pinMode(OLEDEnable, OUTPUT);
    16ae:	2101      	movs	r1, #1
    16b0:	2006      	movs	r0, #6
    16b2:	f002 f9bb 	bl	3a2c <pinMode>

	for (int j = 0; j < 9; j++) 
	{
		digitalWriteFast(OLEDPinArray[j], LOW);
    16b6:	4a32      	ldr	r2, [pc, #200]	; (1780 <initPins()+0xe8>)
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    16b8:	4b32      	ldr	r3, [pc, #200]	; (1784 <initPins()+0xec>)
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
    16ba:	f44f 6580 	mov.w	r5, #1024	; 0x400
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    16be:	7816      	ldrb	r6, [r2, #0]

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    16c0:	21c8      	movs	r1, #200	; 0xc8
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    16c2:	7850      	ldrb	r0, [r2, #1]
    16c4:	0136      	lsls	r6, r6, #4
    16c6:	7894      	ldrb	r4, [r2, #2]
    16c8:	0100      	lsls	r0, r0, #4
    16ca:	199f      	adds	r7, r3, r6
    16cc:	0124      	lsls	r4, r4, #4
    16ce:	599e      	ldr	r6, [r3, r6]
    16d0:	eb03 0e00 	add.w	lr, r3, r0
    16d4:	f8d7 c00c 	ldr.w	ip, [r7, #12]
    16d8:	581f      	ldr	r7, [r3, r0]
    16da:	78d0      	ldrb	r0, [r2, #3]
    16dc:	f8c6 c088 	str.w	ip, [r6, #136]	; 0x88
    16e0:	191e      	adds	r6, r3, r4
    16e2:	f8de c00c 	ldr.w	ip, [lr, #12]
    16e6:	0100      	lsls	r0, r0, #4
    16e8:	f853 e004 	ldr.w	lr, [r3, r4]
    16ec:	7914      	ldrb	r4, [r2, #4]
    16ee:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
    16f2:	181f      	adds	r7, r3, r0
    16f4:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    16f8:	0124      	lsls	r4, r4, #4
    16fa:	581e      	ldr	r6, [r3, r0]
    16fc:	7950      	ldrb	r0, [r2, #5]
    16fe:	f8ce c088 	str.w	ip, [lr, #136]	; 0x88
    1702:	eb03 0e04 	add.w	lr, r3, r4
    1706:	f8d7 c00c 	ldr.w	ip, [r7, #12]
    170a:	0100      	lsls	r0, r0, #4
    170c:	591f      	ldr	r7, [r3, r4]
    170e:	7994      	ldrb	r4, [r2, #6]
    1710:	f8c6 c088 	str.w	ip, [r6, #136]	; 0x88
    1714:	181e      	adds	r6, r3, r0
    1716:	f8de c00c 	ldr.w	ip, [lr, #12]
    171a:	0124      	lsls	r4, r4, #4
    171c:	f853 e000 	ldr.w	lr, [r3, r0]
    1720:	79d0      	ldrb	r0, [r2, #7]
    1722:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
    1726:	191f      	adds	r7, r3, r4
    1728:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    172c:	0100      	lsls	r0, r0, #4
    172e:	591e      	ldr	r6, [r3, r4]
    1730:	f8ce c088 	str.w	ip, [lr, #136]	; 0x88
    1734:	181c      	adds	r4, r3, r0
    1736:	68ff      	ldr	r7, [r7, #12]
    1738:	5818      	ldr	r0, [r3, r0]
    173a:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
    173e:	68e4      	ldr	r4, [r4, #12]
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
    1740:	4f11      	ldr	r7, [pc, #68]	; (1788 <initPins()+0xf0>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1742:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    1746:	7a12      	ldrb	r2, [r2, #8]
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1748:	4810      	ldr	r0, [pc, #64]	; (178c <initPins()+0xf4>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    174a:	0112      	lsls	r2, r2, #4

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    174c:	4e10      	ldr	r6, [pc, #64]	; (1790 <initPins()+0xf8>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    174e:	189c      	adds	r4, r3, r2
    1750:	589b      	ldr	r3, [r3, r2]

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1752:	4a10      	ldr	r2, [pc, #64]	; (1794 <initPins()+0xfc>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1754:	f8d4 e00c 	ldr.w	lr, [r4, #12]
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1758:	4604      	mov	r4, r0
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    175a:	f8c3 e088 	str.w	lr, [r3, #136]	; 0x88
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
    175e:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1762:	6800      	ldr	r0, [r0, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1764:	6833      	ldr	r3, [r6, #0]
    1766:	fba2 3203 	umull	r3, r2, r2, r3
    176a:	0c92      	lsrs	r2, r2, #18
    176c:	fb01 f202 	mul.w	r2, r1, r2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1770:	6823      	ldr	r3, [r4, #0]
    1772:	1a1b      	subs	r3, r3, r0
    1774:	429a      	cmp	r2, r3
    1776:	d8fb      	bhi.n	1770 <initPins()+0xd8>
	}
	digitalWriteFast(OLEDEnable, LOW);
	delayMicroseconds(200);

}
    1778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    177a:	bf00      	nop
    177c:	200006a3 	.word	0x200006a3
    1780:	200006a4 	.word	0x200006a4
    1784:	200002bc 	.word	0x200002bc
    1788:	42004000 	.word	0x42004000
    178c:	e0001004 	.word	0xe0001004
    1790:	200006d8 	.word	0x200006d8
    1794:	431bde83 	.word	0x431bde83

00001798 <initScreen(Globals volatile*)>:

void initScreen(volatile Globals* OLEDGlobals)
{
    1798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    179a:	4604      	mov	r4, r0
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    179c:	202a      	movs	r0, #42	; 0x2a
    179e:	2771      	movs	r7, #113	; 0x71

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
    17a0:	f44f 7580 	mov.w	r5, #256	; 0x100
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    17a4:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    17a8:	2128      	movs	r1, #40	; 0x28
    17aa:	2208      	movs	r2, #8
    17ac:	2679      	movs	r6, #121	; 0x79
    17ae:	337c      	adds	r3, #124	; 0x7c
    17b0:	f04f 0ed5 	mov.w	lr, #213	; 0xd5
    17b4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    17b8:	8058      	strh	r0, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    17ba:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    17be:	3301      	adds	r3, #1
    17c0:	b2db      	uxtb	r3, r3
    17c2:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    17c6:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    17ca:	337c      	adds	r3, #124	; 0x7c
    17cc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    17d0:	805f      	strh	r7, [r3, #2]
    17d2:	2770      	movs	r7, #112	; 0x70
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    17d4:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    17d8:	3301      	adds	r3, #1
    17da:	b2db      	uxtb	r3, r3
    17dc:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
    17e0:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    17e4:	337c      	adds	r3, #124	; 0x7c
    17e6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    17ea:	805d      	strh	r5, [r3, #2]
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    17ec:	2578      	movs	r5, #120	; 0x78
void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    17ee:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    17f2:	3301      	adds	r3, #1
    17f4:	b2db      	uxtb	r3, r3
    17f6:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    17fa:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    17fe:	337c      	adds	r3, #124	; 0x7c
    1800:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1804:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1806:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    180a:	3301      	adds	r3, #1
    180c:	b2db      	uxtb	r3, r3
    180e:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1812:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1816:	337c      	adds	r3, #124	; 0x7c
    1818:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    181c:	805a      	strh	r2, [r3, #2]
    181e:	2209      	movs	r2, #9
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1820:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1824:	3301      	adds	r3, #1
    1826:	b2db      	uxtb	r3, r3
    1828:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    182c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1830:	337c      	adds	r3, #124	; 0x7c
    1832:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1836:	8058      	strh	r0, [r3, #2]
    1838:	2006      	movs	r0, #6
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    183a:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    183e:	3301      	adds	r3, #1
    1840:	b2db      	uxtb	r3, r3
    1842:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1846:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    184a:	337c      	adds	r3, #124	; 0x7c
    184c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1850:	805e      	strh	r6, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1852:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1856:	3301      	adds	r3, #1
    1858:	b2db      	uxtb	r3, r3
    185a:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    185e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1862:	337c      	adds	r3, #124	; 0x7c
    1864:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1868:	f8a3 e002 	strh.w	lr, [r3, #2]
    186c:	f04f 0e72 	mov.w	lr, #114	; 0x72
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1870:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1874:	3301      	adds	r3, #1
    1876:	b2db      	uxtb	r3, r3
    1878:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    187c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1880:	337c      	adds	r3, #124	; 0x7c
    1882:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1886:	805f      	strh	r7, [r3, #2]

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
    1888:	f44f 7785 	mov.w	r7, #266	; 0x10a

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    188c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1890:	3301      	adds	r3, #1
    1892:	b2db      	uxtb	r3, r3
    1894:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1898:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    189c:	337c      	adds	r3, #124	; 0x7c
    189e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    18a2:	805d      	strh	r5, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    18a4:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    18a8:	3301      	adds	r3, #1
    18aa:	b2db      	uxtb	r3, r3
    18ac:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    18b0:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    18b4:	337c      	adds	r3, #124	; 0x7c
    18b6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    18ba:	805a      	strh	r2, [r3, #2]
    18bc:	22da      	movs	r2, #218	; 0xda
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    18be:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    18c2:	3301      	adds	r3, #1
    18c4:	b2db      	uxtb	r3, r3
    18c6:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    18ca:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    18ce:	337c      	adds	r3, #124	; 0x7c
    18d0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    18d4:	8058      	strh	r0, [r3, #2]
    18d6:	2010      	movs	r0, #16
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    18d8:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    18dc:	3301      	adds	r3, #1
    18de:	b2db      	uxtb	r3, r3
    18e0:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    18e4:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    18e8:	337c      	adds	r3, #124	; 0x7c
    18ea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    18ee:	f8a3 e002 	strh.w	lr, [r3, #2]
    18f2:	f04f 0edc 	mov.w	lr, #220	; 0xdc
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    18f6:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    18fa:	3301      	adds	r3, #1
    18fc:	b2db      	uxtb	r3, r3
    18fe:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
    1902:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1906:	337c      	adds	r3, #124	; 0x7c
    1908:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    190c:	805f      	strh	r7, [r3, #2]
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    190e:	2700      	movs	r7, #0
void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1910:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1914:	3301      	adds	r3, #1
    1916:	b2db      	uxtb	r3, r3
    1918:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    191c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1920:	337c      	adds	r3, #124	; 0x7c
    1922:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1926:	805e      	strh	r6, [r3, #2]
    1928:	2681      	movs	r6, #129	; 0x81
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    192a:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    192e:	3301      	adds	r3, #1
    1930:	b2db      	uxtb	r3, r3
    1932:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1936:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    193a:	337c      	adds	r3, #124	; 0x7c
    193c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1940:	805a      	strh	r2, [r3, #2]
    1942:	227f      	movs	r2, #127	; 0x7f
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1944:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1948:	3301      	adds	r3, #1
    194a:	b2db      	uxtb	r3, r3
    194c:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1950:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1954:	337c      	adds	r3, #124	; 0x7c
    1956:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    195a:	8058      	strh	r0, [r3, #2]
    195c:	20d9      	movs	r0, #217	; 0xd9
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    195e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1962:	3301      	adds	r3, #1
    1964:	b2db      	uxtb	r3, r3
    1966:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    196a:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    196e:	337c      	adds	r3, #124	; 0x7c
    1970:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1974:	f8a3 e002 	strh.w	lr, [r3, #2]
    1978:	f04f 0ef1 	mov.w	lr, #241	; 0xf1
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    197c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1980:	3301      	adds	r3, #1
    1982:	b2db      	uxtb	r3, r3
    1984:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1988:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    198c:	337c      	adds	r3, #124	; 0x7c
    198e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1992:	805f      	strh	r7, [r3, #2]
    1994:	27db      	movs	r7, #219	; 0xdb
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1996:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    199a:	3301      	adds	r3, #1
    199c:	b2db      	uxtb	r3, r3
    199e:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    19a2:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    19a6:	337c      	adds	r3, #124	; 0x7c
    19a8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    19ac:	805e      	strh	r6, [r3, #2]
    19ae:	2640      	movs	r6, #64	; 0x40
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    19b0:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    19b4:	3301      	adds	r3, #1
    19b6:	b2db      	uxtb	r3, r3
    19b8:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    19bc:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    19c0:	337c      	adds	r3, #124	; 0x7c
    19c2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    19c6:	805a      	strh	r2, [r3, #2]
    19c8:	2201      	movs	r2, #1
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    19ca:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    19ce:	4413      	add	r3, r2
    19d0:	b2db      	uxtb	r3, r3
    19d2:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    19d6:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    19da:	337c      	adds	r3, #124	; 0x7c
    19dc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    19e0:	8058      	strh	r0, [r3, #2]
	command(0x40, OLEDGlobals);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
	command(0x78, OLEDGlobals);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
	command((0x20 | rows), OLEDGlobals); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
	command(0x01, OLEDGlobals);        // Clear display
	//_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	delay(2);
    19e2:	2002      	movs	r0, #2

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    19e4:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    19e8:	4413      	add	r3, r2
    19ea:	b2db      	uxtb	r3, r3
    19ec:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    19f0:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    19f4:	337c      	adds	r3, #124	; 0x7c
    19f6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    19fa:	f8a3 e002 	strh.w	lr, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    19fe:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1a02:	4413      	add	r3, r2
    1a04:	b2db      	uxtb	r3, r3
    1a06:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1a0a:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1a0e:	337c      	adds	r3, #124	; 0x7c
    1a10:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1a14:	805f      	strh	r7, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1a16:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1a1a:	4413      	add	r3, r2
    1a1c:	b2db      	uxtb	r3, r3
    1a1e:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1a22:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1a26:	337c      	adds	r3, #124	; 0x7c
    1a28:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1a2c:	805e      	strh	r6, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1a2e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1a32:	4413      	add	r3, r2
    1a34:	b2db      	uxtb	r3, r3
    1a36:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1a3a:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1a3e:	337c      	adds	r3, #124	; 0x7c
    1a40:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1a44:	805d      	strh	r5, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1a46:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1a4a:	4413      	add	r3, r2
    1a4c:	b2db      	uxtb	r3, r3
    1a4e:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1a52:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1a56:	337c      	adds	r3, #124	; 0x7c
    1a58:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1a5c:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1a5e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1a62:	4413      	add	r3, r2
    1a64:	b2db      	uxtb	r3, r3
    1a66:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1a6a:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1a6e:	337c      	adds	r3, #124	; 0x7c
    1a70:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1a74:	805a      	strh	r2, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1a76:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1a7a:	4413      	add	r3, r2
    1a7c:	b2db      	uxtb	r3, r3
    1a7e:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
	command(0x40, OLEDGlobals);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
	command(0x78, OLEDGlobals);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
	command((0x20 | rows), OLEDGlobals); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
	command(0x01, OLEDGlobals);        // Clear display
	//_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	delay(2);
    1a82:	f001 ff6d 	bl	3960 <delay>
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1a86:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1a8a:	2180      	movs	r1, #128	; 0x80
    1a8c:	220c      	movs	r2, #12
    1a8e:	337c      	adds	r3, #124	; 0x7c
	//_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	delay(2);
	command(0x80, OLEDGlobals);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
	command(0x0C, OLEDGlobals);        // Display ON/OFF control: display ON, cursor off, blink off
	//_delay_ms(250);           // Waits 250 ms for stabilization purpose after display on
	delay(250);
    1a90:	20fa      	movs	r0, #250	; 0xfa
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1a92:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1a96:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1a98:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1a9c:	3301      	adds	r3, #1
    1a9e:	b2db      	uxtb	r3, r3
    1aa0:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1aa4:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1aa8:	337c      	adds	r3, #124	; 0x7c
    1aaa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1aae:	805a      	strh	r2, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1ab0:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1ab4:	3301      	adds	r3, #1
    1ab6:	b2db      	uxtb	r3, r3
    1ab8:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
	command(0x80, OLEDGlobals);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
	command(0x0C, OLEDGlobals);        // Display ON/OFF control: display ON, cursor off, blink off
	//_delay_ms(250);           // Waits 250 ms for stabilization purpose after display on
	delay(250);

}
    1abc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	//_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	delay(2);
	command(0x80, OLEDGlobals);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
	command(0x0C, OLEDGlobals);        // Display ON/OFF control: display ON, cursor off, blink off
	//_delay_ms(250);           // Waits 250 ms for stabilization purpose after display on
	delay(250);
    1ac0:	f001 bf4e 	b.w	3960 <delay>

00001ac4 <outputS(char volatile*, int, Globals volatile*)>:
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1ac4:	f892 32fb 	ldrb.w	r3, [r2, #763]	; 0x2fb
void outputS(volatile char* lineIn, int row, volatile Globals* OLEDGlobals)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r], OLEDGlobals);
    1ac8:	b2c9      	uxtb	r1, r1
		data(lineIn[c],OLEDGlobals);
	}
}
//overloaded method with volatile keyword. 
void outputS(volatile char* lineIn, int row, volatile Globals* OLEDGlobals)
{
    1aca:	b410      	push	{r4}
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1acc:	337c      	adds	r3, #124	; 0x7c
void outputS(volatile char* lineIn, int row, volatile Globals* OLEDGlobals)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r], OLEDGlobals);
    1ace:	4c12      	ldr	r4, [pc, #72]	; (1b18 <outputS(char volatile*, int, Globals volatile*)+0x54>)
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1ad0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    1ad4:	5c61      	ldrb	r1, [r4, r1]
    1ad6:	f100 0414 	add.w	r4, r0, #20
    1ada:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1adc:	f892 32fb 	ldrb.w	r3, [r2, #763]	; 0x2fb
    1ae0:	3301      	adds	r3, #1
    1ae2:	b2db      	uxtb	r3, r3
    1ae4:	f882 32fb 	strb.w	r3, [r2, #763]	; 0x2fb

	command(new_line[r], OLEDGlobals);
	//20, because our display is 20x4.
	for (c = 0; c < 20; c++)
	{
		data(lineIn[c], OLEDGlobals);
    1ae8:	f810 1b01 	ldrb.w	r1, [r0], #1

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
    1aec:	f892 32fb 	ldrb.w	r3, [r2, #763]	; 0x2fb
}

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
    1af0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r], OLEDGlobals);
	//20, because our display is 20x4.
	for (c = 0; c < 20; c++)
    1af4:	42a0      	cmp	r0, r4

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
    1af6:	f103 037c 	add.w	r3, r3, #124	; 0x7c
    1afa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    1afe:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1b00:	f892 32fb 	ldrb.w	r3, [r2, #763]	; 0x2fb
    1b04:	f103 0301 	add.w	r3, r3, #1
    1b08:	b2db      	uxtb	r3, r3
    1b0a:	f882 32fb 	strb.w	r3, [r2, #763]	; 0x2fb
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r], OLEDGlobals);
	//20, because our display is 20x4.
	for (c = 0; c < 20; c++)
    1b0e:	d1eb      	bne.n	1ae8 <outputS(char volatile*, int, Globals volatile*)+0x24>
	{
		data(lineIn[c], OLEDGlobals);
	}
}
    1b10:	f85d 4b04 	ldr.w	r4, [sp], #4
    1b14:	4770      	bx	lr
    1b16:	bf00      	nop
    1b18:	200006a0 	.word	0x200006a0

00001b1c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>:
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch (numCharacters)
    1b1c:	3a01      	subs	r2, #1


}
//overloaded function with volatile keyword. 
void numPrinter(volatile char* charArray, uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    1b1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch (numCharacters)
    1b22:	2a04      	cmp	r2, #4
    1b24:	d848      	bhi.n	1bb8 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x9c>
    1b26:	e8df f002 	tbb	[pc, r2]
    1b2a:	887b      	.short	0x887b
    1b2c:	4999      	.short	0x4999
    1b2e:	03          	.byte	0x03
    1b2f:	00          	.byte	0x00
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1b30:	f8df e174 	ldr.w	lr, [pc, #372]	; 1ca8 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x18c>
    1b34:	f04f 0864 	mov.w	r8, #100	; 0x64
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1b38:	4e59      	ldr	r6, [pc, #356]	; (1ca0 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x184>)
    1b3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1b3e:	fbae 4703 	umull	r4, r7, lr, r3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    1b42:	4d58      	ldr	r5, [pc, #352]	; (1ca4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x188>)
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1b44:	fba6 c403 	umull	ip, r4, r6, r3
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    1b48:	fba5 c503 	umull	ip, r5, r5, r3
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1b4c:	097f      	lsrs	r7, r7, #5
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1b4e:	f8df c15c 	ldr.w	ip, [pc, #348]	; 1cac <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1b52:	09a4      	lsrs	r4, r4, #6
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1b54:	fb08 3717 	mls	r7, r8, r7, r3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    1b58:	0b6d      	lsrs	r5, r5, #13
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1b5a:	fbac 9803 	umull	r9, r8, ip, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1b5e:	fb02 3214 	mls	r2, r2, r4, r3
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    1b62:	f242 7410 	movw	r4, #10000	; 0x2710
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1b66:	ea4f 08d8 	mov.w	r8, r8, lsr #3
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    1b6a:	fb04 3415 	mls	r4, r4, r5, r3
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1b6e:	b2bf      	uxth	r7, r7
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1b70:	b292      	uxth	r2, r2
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
    1b72:	3530      	adds	r5, #48	; 0x30
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1b74:	eb08 0888 	add.w	r8, r8, r8, lsl #2
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1b78:	fbac c707 	umull	ip, r7, ip, r7
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1b7c:	fbae e202 	umull	lr, r2, lr, r2
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    1b80:	b2a4      	uxth	r4, r4
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1b82:	eba3 0348 	sub.w	r3, r3, r8, lsl #1
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
		charArray[(startingPos + 3)] = tensPlace;
    1b86:	f101 0c03 	add.w	ip, r1, #3

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    1b8a:	fba6 6404 	umull	r6, r4, r6, r4
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1b8e:	0952      	lsrs	r2, r2, #5
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1b90:	08ff      	lsrs	r7, r7, #3
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1b92:	3330      	adds	r3, #48	; 0x30
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
    1b94:	1d0e      	adds	r6, r1, #4
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1b96:	3230      	adds	r2, #48	; 0x30
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1b98:	b2db      	uxtb	r3, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1b9a:	3730      	adds	r7, #48	; 0x30
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    1b9c:	09a4      	lsrs	r4, r4, #6
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
		charArray[(startingPos + 3)] = tensPlace;
		charArray[(startingPos + 2)] = hunderedsPlace;
    1b9e:	f101 0e02 	add.w	lr, r1, #2
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
    1ba2:	5583      	strb	r3, [r0, r6]
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1ba4:	b2d2      	uxtb	r2, r2
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1ba6:	b2ff      	uxtb	r7, r7
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    1ba8:	3430      	adds	r4, #48	; 0x30
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
		charArray[(startingPos + 3)] = tensPlace;
		charArray[(startingPos + 2)] = hunderedsPlace;
		charArray[(startingPos + 1)] = thousandsPlace;
    1baa:	1c4b      	adds	r3, r1, #1
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
		charArray[(startingPos + 3)] = tensPlace;
    1bac:	f800 700c 	strb.w	r7, [r0, ip]
		charArray[(startingPos + 2)] = hunderedsPlace;
    1bb0:	f800 200e 	strb.w	r2, [r0, lr]
		charArray[(startingPos + 1)] = thousandsPlace;
    1bb4:	54c4      	strb	r4, [r0, r3]
		charArray[startingPos] = tenThousandsPlace;
    1bb6:	5445      	strb	r5, [r0, r1]
    1bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1bbc:	4f3a      	ldr	r7, [pc, #232]	; (1ca8 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x18c>)
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1bbe:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    1bc2:	4d37      	ldr	r5, [pc, #220]	; (1ca0 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x184>)
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1bc4:	2264      	movs	r2, #100	; 0x64
    1bc6:	fba7 e403 	umull	lr, r4, r7, r3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1bca:	fba5 e503 	umull	lr, r5, r5, r3
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1bce:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 1cac <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1bd2:	0964      	lsrs	r4, r4, #5
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1bd4:	09ad      	lsrs	r5, r5, #6
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1bd6:	fb02 3214 	mls	r2, r2, r4, r3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1bda:	fb06 3415 	mls	r4, r6, r5, r3
		thousandsPlace = (inputNumber / 1000) + 48;
    1bde:	3530      	adds	r5, #48	; 0x30
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1be0:	fbae c603 	umull	ip, r6, lr, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1be4:	b292      	uxth	r2, r2
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1be6:	b2a4      	uxth	r4, r4
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1be8:	08f6      	lsrs	r6, r6, #3
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1bea:	fbae e202 	umull	lr, r2, lr, r2
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1bee:	fba7 7404 	umull	r7, r4, r7, r4
		thousandsPlace = (inputNumber / 1000) + 48;
		charArray[(startingPos + 3)] = onesPlace;
		charArray[(startingPos + 2)] = tensPlace;
    1bf2:	f101 0e02 	add.w	lr, r1, #2
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1bf6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = (inputNumber / 1000) + 48;
		charArray[(startingPos + 3)] = onesPlace;
    1bfa:	1ccf      	adds	r7, r1, #3
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1bfc:	0964      	lsrs	r4, r4, #5
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1bfe:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = (inputNumber / 1000) + 48;
		charArray[(startingPos + 3)] = onesPlace;
		charArray[(startingPos + 2)] = tensPlace;
		charArray[(startingPos + 1)] = hunderedsPlace;
    1c02:	1c4e      	adds	r6, r1, #1
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1c04:	08d2      	lsrs	r2, r2, #3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1c06:	3430      	adds	r4, #48	; 0x30
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1c08:	3330      	adds	r3, #48	; 0x30
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1c0a:	3230      	adds	r2, #48	; 0x30
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1c0c:	b2e4      	uxtb	r4, r4
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1c0e:	b2db      	uxtb	r3, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1c10:	b2d2      	uxtb	r2, r2
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = (inputNumber / 1000) + 48;
		charArray[(startingPos + 3)] = onesPlace;
    1c12:	55c3      	strb	r3, [r0, r7]
		charArray[(startingPos + 2)] = tensPlace;
    1c14:	f800 200e 	strb.w	r2, [r0, lr]
		charArray[(startingPos + 1)] = hunderedsPlace;
    1c18:	5584      	strb	r4, [r0, r6]
		charArray[startingPos] = thousandsPlace;
    1c1a:	5445      	strb	r5, [r0, r1]
		break;
    1c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	{
	case 0:
		break;

	case 1:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1c20:	4a22      	ldr	r2, [pc, #136]	; (1cac <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>)
    1c22:	fba2 4203 	umull	r4, r2, r2, r3
    1c26:	08d2      	lsrs	r2, r2, #3
    1c28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1c2c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    1c30:	3330      	adds	r3, #48	; 0x30
    1c32:	b2db      	uxtb	r3, r3
		charArray[startingPos] = onesPlace;
    1c34:	5443      	strb	r3, [r0, r1]
		break;
    1c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	case 2:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1c3a:	4a1c      	ldr	r2, [pc, #112]	; (1cac <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>)
		tensPlace = (inputNumber / 10) + 48;
		charArray[(startingPos + 1)] = onesPlace;
    1c3c:	1c4d      	adds	r5, r1, #1
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
		break;

	case 2:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1c3e:	fba2 4203 	umull	r4, r2, r2, r3
    1c42:	08d2      	lsrs	r2, r2, #3
    1c44:	eb02 0482 	add.w	r4, r2, r2, lsl #2
		tensPlace = (inputNumber / 10) + 48;
    1c48:	3230      	adds	r2, #48	; 0x30
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
		break;

	case 2:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1c4a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
		tensPlace = (inputNumber / 10) + 48;
    1c4e:	b2d2      	uxtb	r2, r2
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
		break;

	case 2:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1c50:	3330      	adds	r3, #48	; 0x30
    1c52:	b2db      	uxtb	r3, r3
		tensPlace = (inputNumber / 10) + 48;
		charArray[(startingPos + 1)] = onesPlace;
    1c54:	5543      	strb	r3, [r0, r5]
		charArray[startingPos] = tensPlace;
    1c56:	5442      	strb	r2, [r0, r1]
		break;
    1c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1c5c:	4f12      	ldr	r7, [pc, #72]	; (1ca8 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x18c>)
    1c5e:	2264      	movs	r2, #100	; 0x64
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1c60:	f8df e048 	ldr.w	lr, [pc, #72]	; 1cac <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = (inputNumber / 100) + 48;
		charArray[(startingPos + 2)] = onesPlace;
    1c64:	1c8e      	adds	r6, r1, #2
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1c66:	fba7 4703 	umull	r4, r7, r7, r3
		hunderedsPlace = (inputNumber / 100) + 48;
		charArray[(startingPos + 2)] = onesPlace;
		charArray[(startingPos + 1)] = tensPlace;
    1c6a:	1c4d      	adds	r5, r1, #1
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1c6c:	fbae c403 	umull	ip, r4, lr, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1c70:	097f      	lsrs	r7, r7, #5
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1c72:	08e4      	lsrs	r4, r4, #3
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1c74:	fb02 3217 	mls	r2, r2, r7, r3
		hunderedsPlace = (inputNumber / 100) + 48;
    1c78:	3730      	adds	r7, #48	; 0x30
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1c7a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1c7e:	b292      	uxth	r2, r2
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1c80:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1c84:	fbae e202 	umull	lr, r2, lr, r2
		hunderedsPlace = (inputNumber / 100) + 48;
    1c88:	b2ff      	uxtb	r7, r7
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1c8a:	3330      	adds	r3, #48	; 0x30
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1c8c:	08d2      	lsrs	r2, r2, #3
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1c8e:	b2db      	uxtb	r3, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1c90:	3230      	adds	r2, #48	; 0x30
		hunderedsPlace = (inputNumber / 100) + 48;
		charArray[(startingPos + 2)] = onesPlace;
    1c92:	5583      	strb	r3, [r0, r6]
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1c94:	b2d2      	uxtb	r2, r2
		hunderedsPlace = (inputNumber / 100) + 48;
		charArray[(startingPos + 2)] = onesPlace;
		charArray[(startingPos + 1)] = tensPlace;
    1c96:	5542      	strb	r2, [r0, r5]
		charArray[startingPos] = hunderedsPlace;
    1c98:	5447      	strb	r7, [r0, r1]
		break;
    1c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1c9e:	bf00      	nop
    1ca0:	10624dd3 	.word	0x10624dd3
    1ca4:	d1b71759 	.word	0xd1b71759
    1ca8:	51eb851f 	.word	0x51eb851f
    1cac:	cccccccd 	.word	0xcccccccd

00001cb0 <midiNotePrinter(char volatile*, unsigned char, unsigned char)>:
	char printSharp = 0;
	uint8_t valueSwitch = 0;
	//numbers will always go from B to C, and have 12 distinct values. 
	//we can get our number from this with division. 
	//midi note C0 starts at 12. So, we'll need to do some math there. 
	printNumber = (noteNumber / 12) + 47;
    1cb0:	4b0a      	ldr	r3, [pc, #40]	; (1cdc <midiNotePrinter(char volatile*, unsigned char, unsigned char)+0x2c>)


}

void midiNotePrinter(volatile char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
    1cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
	char printSharp = 0;
	uint8_t valueSwitch = 0;
	//numbers will always go from B to C, and have 12 distinct values. 
	//we can get our number from this with division. 
	//midi note C0 starts at 12. So, we'll need to do some math there. 
	printNumber = (noteNumber / 12) + 47;
    1cb4:	fba3 4302 	umull	r4, r3, r3, r2
    1cb8:	4e09      	ldr	r6, [pc, #36]	; (1ce0 <midiNotePrinter(char volatile*, unsigned char, unsigned char)+0x30>)
    1cba:	4f0a      	ldr	r7, [pc, #40]	; (1ce4 <midiNotePrinter(char volatile*, unsigned char, unsigned char)+0x34>)
		printSharp = ' ';
		break;

	}
	charArray[startingPosition] = printLetter;
	charArray[startingPosition + 1] = printSharp;
    1cbc:	1c4d      	adds	r5, r1, #1
	char printSharp = 0;
	uint8_t valueSwitch = 0;
	//numbers will always go from B to C, and have 12 distinct values. 
	//we can get our number from this with division. 
	//midi note C0 starts at 12. So, we'll need to do some math there. 
	printNumber = (noteNumber / 12) + 47;
    1cbe:	08db      	lsrs	r3, r3, #3
		break;

	}
	charArray[startingPosition] = printLetter;
	charArray[startingPosition + 1] = printSharp;
	charArray[startingPosition + 2] = printNumber;
    1cc0:	1c8c      	adds	r4, r1, #2
	//we can get our number from this with division. 
	//midi note C0 starts at 12. So, we'll need to do some math there. 
	printNumber = (noteNumber / 12) + 47;

	//theres a weird wrap around with note numbers here. Since there isn't really an easy math patern we can take advantage of. 
	valueSwitch = noteNumber % 12; //this should give us a value between 0 and 11. 
    1cc2:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
	char printSharp = 0;
	uint8_t valueSwitch = 0;
	//numbers will always go from B to C, and have 12 distinct values. 
	//we can get our number from this with division. 
	//midi note C0 starts at 12. So, we'll need to do some math there. 
	printNumber = (noteNumber / 12) + 47;
    1cc6:	332f      	adds	r3, #47	; 0x2f

	//theres a weird wrap around with note numbers here. Since there isn't really an easy math patern we can take advantage of. 
	valueSwitch = noteNumber % 12; //this should give us a value between 0 and 11. 
    1cc8:	eba2 028e 	sub.w	r2, r2, lr, lsl #2
    1ccc:	b2d2      	uxtb	r2, r2
    1cce:	5cb6      	ldrb	r6, [r6, r2]
    1cd0:	5cba      	ldrb	r2, [r7, r2]
		printLetter = 'B';
		printSharp = ' ';
		break;

	}
	charArray[startingPosition] = printLetter;
    1cd2:	5446      	strb	r6, [r0, r1]
	charArray[startingPosition + 1] = printSharp;
    1cd4:	5542      	strb	r2, [r0, r5]
	charArray[startingPosition + 2] = printNumber;
    1cd6:	5503      	strb	r3, [r0, r4]
    1cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cda:	bf00      	nop
    1cdc:	aaaaaaab 	.word	0xaaaaaaab
    1ce0:	20000164 	.word	0x20000164
    1ce4:	20000158 	.word	0x20000158

00001ce8 <TeensyTimerTool::BaseTimer::BaseTimer(TeensyTimerTool::ITimerChannel* (*)(), bool)>:
#include "types.h"

namespace TeensyTimerTool
{

    BaseTimer::BaseTimer(TimerGenerator* generator, bool periodic)
    1ce8:	b410      	push	{r4}
        : timerGenerator(generator)
    1cea:	2400      	movs	r4, #0
    1cec:	6001      	str	r1, [r0, #0]
    {
        this->timerGenerator = generator;
        this->timerChannel = nullptr;
        this->isPeriodic = periodic;
    1cee:	7202      	strb	r2, [r0, #8]

namespace TeensyTimerTool
{

    BaseTimer::BaseTimer(TimerGenerator* generator, bool periodic)
        : timerGenerator(generator)
    1cf0:	60c4      	str	r4, [r0, #12]
    {
        this->timerGenerator = generator;
        this->timerChannel = nullptr;
    1cf2:	6044      	str	r4, [r0, #4]
        this->isPeriodic = periodic;
    }
    1cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
    1cf8:	4770      	bx	lr
    1cfa:	bf00      	nop

00001cfc <TeensyTimerTool::ITimerChannel::getPeriod()>:

        virtual float getMaxPeriod() const = 0;
        virtual errorCode setPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setCurrentPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setNextPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual uint32_t getPeriod() { return 0; }
    1cfc:	2000      	movs	r0, #0
    1cfe:	4770      	bx	lr

00001d00 <TeensyTimerTool::TMRChannel::~TMRChannel()>:
        setPrescaler(TMR_DEFAULT_PSC);
    }

    TMRChannel::~TMRChannel()
    {
    }
    1d00:	4770      	bx	lr
    1d02:	bf00      	nop

00001d04 <TeensyTimerTool::TMRChannel::start()>:

    errorCode TMRChannel::start()
    {
        regs->CNTR = 0x0000;
    1d04:	6882      	ldr	r2, [r0, #8]
    1d06:	2000      	movs	r0, #0
    1d08:	8150      	strh	r0, [r2, #10]
        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1d0a:	8a93      	ldrh	r3, [r2, #20]
    1d0c:	f023 0310 	bic.w	r3, r3, #16
    1d10:	041b      	lsls	r3, r3, #16
    1d12:	0c1b      	lsrs	r3, r3, #16
    1d14:	8293      	strh	r3, [r2, #20]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;
    1d16:	8a93      	ldrh	r3, [r2, #20]
    1d18:	b29b      	uxth	r3, r3
    1d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d1e:	8293      	strh	r3, [r2, #20]
        return errorCode::OK;
    }
    1d20:	4770      	bx	lr
    1d22:	bf00      	nop

00001d24 <TeensyTimerTool::TMRChannel::stop()>:

    errorCode TMRChannel::stop()
    {
        regs->CSCTRL &= ~TMR_CSCTRL_TCF1EN;
    1d24:	6882      	ldr	r2, [r0, #8]
        return errorCode::OK;
    }
    1d26:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode TMRChannel::stop()
    {
        regs->CSCTRL &= ~TMR_CSCTRL_TCF1EN;
    1d28:	8a93      	ldrh	r3, [r2, #20]
    1d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    1d2e:	041b      	lsls	r3, r3, #16
    1d30:	0c1b      	lsrs	r3, r3, #16
    1d32:	8293      	strh	r3, [r2, #20]
        return errorCode::OK;
    }
    1d34:	4770      	bx	lr
    1d36:	bf00      	nop

00001d38 <std::function<void ()>::~function()>:

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1d38:	6883      	ldr	r3, [r0, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    1d3a:	b510      	push	{r4, lr}
    1d3c:	4604      	mov	r4, r0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1d3e:	b113      	cbz	r3, 1d46 <std::function<void ()>::~function()+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1d40:	2203      	movs	r2, #3
    1d42:	4601      	mov	r1, r0
    1d44:	4798      	blx	r3
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    1d46:	4620      	mov	r0, r4
    1d48:	bd10      	pop	{r4, pc}
    1d4a:	bf00      	nop

00001d4c <TeensyTimerTool::TMRChannel::trigger(float)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1d4c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 1dbc <TeensyTimerTool::TMRChannel::trigger(float)+0x70>
    1d50:	edd0 6a04 	vldr	s13, [r0, #16]
    1d54:	ee20 0a27 	vmul.f32	s0, s0, s15
    // }

    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;
    1d58:	ed9f 7a19 	vldr	s14, [pc, #100]	; 1dc0 <TeensyTimerTool::TMRChannel::trigger(float)+0x74>
    // {
    //     return trigger((float)tcnt);
    // }

    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
    1d5c:	b430      	push	{r4, r5}
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1d5e:	eec0 7a26 	vdiv.f32	s15, s0, s13
    // {
    //     return trigger((float)tcnt);
    // }

    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
    1d62:	b082      	sub	sp, #8
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;
    1d64:	eef4 7ac7 	vcmpe.f32	s15, s14
    1d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1d6c:	dc23      	bgt.n	1db6 <TeensyTimerTool::TMRChannel::trigger(float)+0x6a>
    1d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1d72:	edcd 7a01 	vstr	s15, [sp, #4]
    1d76:	f8bd 4004 	ldrh.w	r4, [sp, #4]

        regs->CTRL = 0x0000;
    1d7a:	6883      	ldr	r3, [r0, #8]
    1d7c:	2200      	movs	r2, #0
        regs->CNTR = 0x0000;

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    1d7e:	6941      	ldr	r1, [r0, #20]
    1d80:	f242 0560 	movw	r5, #8288	; 0x2060
    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;

        regs->CTRL = 0x0000;
    1d84:	819a      	strh	r2, [r3, #12]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;

        return errorCode::OK;
    }
    1d86:	4610      	mov	r0, r2
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;

        regs->CTRL = 0x0000;
        regs->LOAD = 0x0000;
    1d88:	80da      	strh	r2, [r3, #6]
        regs->CNTR = 0x0000;

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    1d8a:	0249      	lsls	r1, r1, #9
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;

        regs->CTRL = 0x0000;
        regs->LOAD = 0x0000;
        regs->COMP1 = reload;
    1d8c:	801c      	strh	r4, [r3, #0]
        regs->CMPLD1 = reload;
    1d8e:	821c      	strh	r4, [r3, #16]
        regs->CNTR = 0x0000;

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    1d90:	f401 51f0 	and.w	r1, r1, #7680	; 0x1e00

        regs->CTRL = 0x0000;
        regs->LOAD = 0x0000;
        regs->COMP1 = reload;
        regs->CMPLD1 = reload;
        regs->CNTR = 0x0000;
    1d94:	815a      	strh	r2, [r3, #10]

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1d96:	8a9a      	ldrh	r2, [r3, #20]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    1d98:	430d      	orrs	r5, r1
        regs->LOAD = 0x0000;
        regs->COMP1 = reload;
        regs->CMPLD1 = reload;
        regs->CNTR = 0x0000;

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1d9a:	f022 0210 	bic.w	r2, r2, #16
    1d9e:	0412      	lsls	r2, r2, #16
    1da0:	0c12      	lsrs	r2, r2, #16
    1da2:	829a      	strh	r2, [r3, #20]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;
    1da4:	8a9a      	ldrh	r2, [r3, #20]
    1da6:	b292      	uxth	r2, r2
    1da8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1dac:	829a      	strh	r2, [r3, #20]

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    1dae:	819d      	strh	r5, [r3, #12]

        return errorCode::OK;
    }
    1db0:	b002      	add	sp, #8
    1db2:	bc30      	pop	{r4, r5}
    1db4:	4770      	bx	lr
    // }

    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;
    1db6:	f64f 74ff 	movw	r4, #65535	; 0xffff
    1dba:	e7de      	b.n	1d7a <TeensyTimerTool::TMRChannel::trigger(float)+0x2e>
    1dbc:	43160000 	.word	0x43160000
    1dc0:	477fff00 	.word	0x477fff00

00001dc4 <TeensyTimerTool::TMRChannel::getMaxPeriod() const>:
        pscBits = 0b1000 | (psc & 0b0111);
    }

    float TMRChannel::getMaxPeriod() const
    {
        return pscValue / 150'000'000.0f * 0xFFFE;
    1dc4:	edd0 6a04 	vldr	s13, [r0, #16]
    1dc8:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1ddc <TeensyTimerTool::TMRChannel::getMaxPeriod() const+0x18>
    1dcc:	eddf 7a04 	vldr	s15, [pc, #16]	; 1de0 <TeensyTimerTool::TMRChannel::getMaxPeriod() const+0x1c>
    1dd0:	ee86 0a87 	vdiv.f32	s0, s13, s14
    }
    1dd4:	ee20 0a27 	vmul.f32	s0, s0, s15
    1dd8:	4770      	bx	lr
    1dda:	bf00      	nop
    1ddc:	4d0f0d18 	.word	0x4d0f0d18
    1de0:	477ffe00 	.word	0x477ffe00

00001de4 <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1de4:	ee07 1a90 	vmov	s15, r1
    1de8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 1e3c <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)+0x58>
    1dec:	ed90 6a04 	vldr	s12, [r0, #16]
    1df0:	eef8 7a67 	vcvt.f32.u32	s15, s15

    errorCode TMRChannel::setCurrentPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    1df4:	eddf 6a12 	vldr	s13, [pc, #72]	; 1e40 <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)+0x5c>
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1df8:	ee67 7a87 	vmul.f32	s15, s15, s14
    1dfc:	ee87 7a86 	vdiv.f32	s14, s15, s12

    errorCode TMRChannel::setCurrentPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    1e00:	eeb4 7ae6 	vcmpe.f32	s14, s13
    1e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1e08:	d814      	bhi.n	1e34 <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)+0x50>
        {
            return _setCurrentPeriod(t);
    1e0a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
            return errorCode::OK;
        }
    }

    errorCode TMRChannel::setCurrentPeriod(uint32_t us)
    {
    1e0e:	b082      	sub	sp, #8
    1e10:	6881      	ldr	r1, [r0, #8]
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
        {
            return _setCurrentPeriod(t);
    1e12:	edcd 7a01 	vstr	s15, [sp, #4]
    1e16:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    }

    errorCode TMRChannel::_setCurrentPeriod(const uint16_t cnt)
    {

        regs->COMP1 = cnt;
    1e1a:	800b      	strh	r3, [r1, #0]

        //Do we need to wait some cycle for IP bus to update here / cache flush?
        //asm volatile("dsb");

        if (regs->CNTR > cnt)
    1e1c:	894a      	ldrh	r2, [r1, #10]
    1e1e:	b292      	uxth	r2, r2
    1e20:	4293      	cmp	r3, r2
    1e22:	d302      	bcc.n	1e2a <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)+0x46>
            return errorCode::triggeredLate;
        }

        else
        {
            return errorCode::OK;
    1e24:	2000      	movs	r0, #0
            return _setCurrentPeriod(t);
        } else
        {
            return errorCode::periodOverflow;
        }
    }
    1e26:	b002      	add	sp, #8
    1e28:	4770      	bx	lr

        if (regs->CNTR > cnt)
        {
            //if counter alrready went over setted value force a triggering
            regs->CNTR = cnt;
            return errorCode::triggeredLate;
    1e2a:	f06f 0065 	mvn.w	r0, #101	; 0x65
        //asm volatile("dsb");

        if (regs->CNTR > cnt)
        {
            //if counter alrready went over setted value force a triggering
            regs->CNTR = cnt;
    1e2e:	814b      	strh	r3, [r1, #10]
            return _setCurrentPeriod(t);
        } else
        {
            return errorCode::periodOverflow;
        }
    }
    1e30:	b002      	add	sp, #8
    1e32:	4770      	bx	lr
        if (t <= 0xFFFF)
        {
            return _setCurrentPeriod(t);
        } else
        {
            return errorCode::periodOverflow;
    1e34:	f06f 0063 	mvn.w	r0, #99	; 0x63
        }
    }
    1e38:	4770      	bx	lr
    1e3a:	bf00      	nop
    1e3c:	43160000 	.word	0x43160000
    1e40:	477fff00 	.word	0x477fff00

00001e44 <TeensyTimerTool::TMRChannel::setNextPeriod(unsigned long)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1e44:	ee07 1a90 	vmov	s15, r1
    1e48:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 1e88 <TeensyTimerTool::TMRChannel::setNextPeriod(unsigned long)+0x44>
    1e4c:	ed90 6a04 	vldr	s12, [r0, #16]
    1e50:	eef8 7a67 	vcvt.f32.u32	s15, s15

    errorCode TMRChannel::setNextPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    1e54:	eddf 6a0d 	vldr	s13, [pc, #52]	; 1e8c <TeensyTimerTool::TMRChannel::setNextPeriod(unsigned long)+0x48>
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1e58:	ee67 7a87 	vmul.f32	s15, s15, s14
    1e5c:	ee87 7a86 	vdiv.f32	s14, s15, s12

    errorCode TMRChannel::setNextPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    1e60:	eeb4 7ae6 	vcmpe.f32	s14, s13
    1e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1e68:	d80b      	bhi.n	1e82 <TeensyTimerTool::TMRChannel::setNextPeriod(unsigned long)+0x3e>
        {
            _setNextPeriod(t);
    1e6a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
            return errorCode::periodOverflow;
        }
    }

    errorCode TMRChannel::setNextPeriod(uint32_t us)
    {
    1e6e:	b082      	sub	sp, #8
    1e70:	6882      	ldr	r2, [r0, #8]
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
        {
            _setNextPeriod(t);
            return errorCode::OK;
    1e72:	2000      	movs	r0, #0
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
        {
            _setNextPeriod(t);
    1e74:	edcd 7a01 	vstr	s15, [sp, #4]
    1e78:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        return pscValue / 150'000'000.0f * 0xFFFE;
    }

    void TMRChannel::_setNextPeriod(const uint16_t cnt)
    {
        regs->CMPLD1 = cnt;
    1e7c:	8213      	strh	r3, [r2, #16]
            return errorCode::OK;
        } else
        {
            return errorCode::periodOverflow;
        }
    }
    1e7e:	b002      	add	sp, #8
    1e80:	4770      	bx	lr
        {
            _setNextPeriod(t);
            return errorCode::OK;
        } else
        {
            return errorCode::periodOverflow;
    1e82:	f06f 0063 	mvn.w	r0, #99	; 0x63
    1e86:	4770      	bx	lr
    1e88:	43160000 	.word	0x43160000
    1e8c:	477fff00 	.word	0x477fff00

00001e90 <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1e90:	ee07 1a90 	vmov	s15, r1
    1e94:	ed9f 7a14 	vldr	s14, [pc, #80]	; 1ee8 <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)+0x58>
    1e98:	ed90 6a04 	vldr	s12, [r0, #16]
    1e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15

    errorCode TMRChannel::setPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    1ea0:	eddf 6a12 	vldr	s13, [pc, #72]	; 1eec <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)+0x5c>
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
    1ea8:	ee87 7a86 	vdiv.f32	s14, s15, s12

    errorCode TMRChannel::setPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    1eac:	eeb4 7ae6 	vcmpe.f32	s14, s13
    1eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1eb4:	d815      	bhi.n	1ee2 <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)+0x52>
        {
            _setNextPeriod(t);
    1eb6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
            return errorCode::periodOverflow;
        }
    }

    errorCode TMRChannel::setPeriod(uint32_t us)
    {
    1eba:	b082      	sub	sp, #8
    1ebc:	6882      	ldr	r2, [r0, #8]
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
        {
            _setNextPeriod(t);
    1ebe:	edcd 7a01 	vstr	s15, [sp, #4]
    1ec2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        return pscValue / 150'000'000.0f * 0xFFFE;
    }

    void TMRChannel::_setNextPeriod(const uint16_t cnt)
    {
        regs->CMPLD1 = cnt;
    1ec6:	8213      	strh	r3, [r2, #16]
    }

    errorCode TMRChannel::_setCurrentPeriod(const uint16_t cnt)
    {

        regs->COMP1 = cnt;
    1ec8:	8013      	strh	r3, [r2, #0]

        //Do we need to wait some cycle for IP bus to update here / cache flush?
        //asm volatile("dsb");

        if (regs->CNTR > cnt)
    1eca:	8951      	ldrh	r1, [r2, #10]
    1ecc:	b289      	uxth	r1, r1
    1ece:	428b      	cmp	r3, r1
    1ed0:	d302      	bcc.n	1ed8 <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)+0x48>
            return errorCode::triggeredLate;
        }

        else
        {
            return errorCode::OK;
    1ed2:	2000      	movs	r0, #0

        } else
        {
            return errorCode::periodOverflow;
        }
    }
    1ed4:	b002      	add	sp, #8
    1ed6:	4770      	bx	lr

        if (regs->CNTR > cnt)
        {
            //if counter alrready went over setted value force a triggering
            regs->CNTR = cnt;
            return errorCode::triggeredLate;
    1ed8:	f06f 0065 	mvn.w	r0, #101	; 0x65
        //asm volatile("dsb");

        if (regs->CNTR > cnt)
        {
            //if counter alrready went over setted value force a triggering
            regs->CNTR = cnt;
    1edc:	8153      	strh	r3, [r2, #10]

        } else
        {
            return errorCode::periodOverflow;
        }
    }
    1ede:	b002      	add	sp, #8
    1ee0:	4770      	bx	lr
            _setNextPeriod(t);
            return _setCurrentPeriod(t);

        } else
        {
            return errorCode::periodOverflow;
    1ee2:	f06f 0063 	mvn.w	r0, #99	; 0x63
        }
    }
    1ee6:	4770      	bx	lr
    1ee8:	43160000 	.word	0x43160000
    1eec:	477fff00 	.word	0x477fff00

00001ef0 <TeensyTimerTool::GptChannel::getMaxPeriod() const>:

        inline errorCode trigger(float delay) override;
        inline errorCode triggerDirect(uint32_t delay) override;
        inline errorCode getTriggerReload(float delay, uint32_t* reload) override;

        inline float getMaxPeriod() const override { return getMaxMicros() / 1E6; }
    1ef0:	eddf 6a05 	vldr	s13, [pc, #20]	; 1f08 <TeensyTimerTool::GptChannel::getMaxPeriod() const+0x18>
    1ef4:	ed90 7a05 	vldr	s14, [r0, #20]
    1ef8:	eddf 7a04 	vldr	s15, [pc, #16]	; 1f0c <TeensyTimerTool::GptChannel::getMaxPeriod() const+0x1c>
    1efc:	ee86 0a87 	vdiv.f32	s0, s13, s14
    1f00:	ee80 0a27 	vdiv.f32	s0, s0, s15
    1f04:	4770      	bx	lr
    1f06:	bf00      	nop
    1f08:	4f800000 	.word	0x4f800000
    1f0c:	49742400 	.word	0x49742400

00001f10 <TeensyTimerTool::GptChannel::start()>:
        return errorCode::OK;
    }

    errorCode GptChannel::start()
    {
        regs->SR = 0x3F;         // clear all interupt flags
    1f10:	68c3      	ldr	r3, [r0, #12]
    1f12:	213f      	movs	r1, #63	; 0x3f
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    1f14:	2201      	movs	r2, #1
        regs->CR |= GPT_CR_EN;   // enable timer
        return errorCode::OK;
    }
    1f16:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode GptChannel::start()
    {
        regs->SR = 0x3F;         // clear all interupt flags
    1f18:	6099      	str	r1, [r3, #8]
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    1f1a:	60da      	str	r2, [r3, #12]
        regs->CR |= GPT_CR_EN;   // enable timer
    1f1c:	681a      	ldr	r2, [r3, #0]
    1f1e:	f042 0201 	orr.w	r2, r2, #1
    1f22:	601a      	str	r2, [r3, #0]
        return errorCode::OK;
    }
    1f24:	4770      	bx	lr
    1f26:	bf00      	nop

00001f28 <TeensyTimerTool::GptChannel::stop()>:

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1f28:	68c3      	ldr	r3, [r0, #12]
        regs->IR = 0;
    1f2a:	2100      	movs	r1, #0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1f2c:	681a      	ldr	r2, [r3, #0]
        regs->IR = 0;
        return errorCode::OK;
    }
    1f2e:	4608      	mov	r0, r1
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1f30:	f022 0201 	bic.w	r2, r2, #1
    1f34:	601a      	str	r2, [r3, #0]
        regs->IR = 0;
    1f36:	60d9      	str	r1, [r3, #12]
        return errorCode::OK;
    }
    1f38:	4770      	bx	lr
    1f3a:	bf00      	nop

00001f3c <TeensyTimerTool::GptChannel::triggerDirect(unsigned long)>:
    {
        return triggerDirect(microsecondToCycles(delay));
    }

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
    1f3c:	b410      	push	{r4}
        regs->SR = 0x3F;         // clear all interupt flags
    1f3e:	68c3      	ldr	r3, [r0, #12]
    1f40:	243f      	movs	r4, #63	; 0x3f
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    1f42:	2201      	movs	r2, #1
        regs->OCR1 = reload;     // set overflow value
        regs->CR |= GPT_CR_EN;   // enable timer

        return errorCode::OK;
    }
    1f44:	2000      	movs	r0, #0
        return triggerDirect(microsecondToCycles(delay));
    }

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
    1f46:	609c      	str	r4, [r3, #8]
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    1f48:	60da      	str	r2, [r3, #12]
        regs->OCR1 = reload;     // set overflow value
    1f4a:	6119      	str	r1, [r3, #16]
        regs->CR |= GPT_CR_EN;   // enable timer
    1f4c:	681a      	ldr	r2, [r3, #0]

        return errorCode::OK;
    }
    1f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
        regs->OCR1 = reload;     // set overflow value
        regs->CR |= GPT_CR_EN;   // enable timer
    1f52:	f042 0201 	orr.w	r2, r2, #1
    1f56:	601a      	str	r2, [r3, #0]

        return errorCode::OK;
    }
    1f58:	4770      	bx	lr
    1f5a:	bf00      	nop

00001f5c <TeensyTimerTool::TMR_t<0u>::isr()>:
        }
        return nullptr;
    }

    template <unsigned m>
    void TMR_t<m>::isr()
    1f5c:	b510      	push	{r4, lr}
    1f5e:	4c25      	ldr	r4, [pc, #148]	; (1ff4 <TeensyTimerTool::TMR_t<0u>::isr()+0x98>)
    {
        // no loop to gain some time by avoiding indirections and pointer calculations
        if (callbacks[0] != nullptr && pCH0->CSCTRL & TMR_CSCTRL_TCF1)
    1f60:	68a3      	ldr	r3, [r4, #8]
    1f62:	b16b      	cbz	r3, 1f80 <TeensyTimerTool::TMR_t<0u>::isr()+0x24>
    1f64:	4b24      	ldr	r3, [pc, #144]	; (1ff8 <TeensyTimerTool::TMR_t<0u>::isr()+0x9c>)
    1f66:	681a      	ldr	r2, [r3, #0]
    1f68:	8a93      	ldrh	r3, [r2, #20]
    1f6a:	06d9      	lsls	r1, r3, #27
    1f6c:	d508      	bpl.n	1f80 <TeensyTimerTool::TMR_t<0u>::isr()+0x24>
        {
            pCH0->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1f6e:	8a93      	ldrh	r3, [r2, #20]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    1f70:	4620      	mov	r0, r4
    1f72:	68e1      	ldr	r1, [r4, #12]
    1f74:	f023 0310 	bic.w	r3, r3, #16
    1f78:	041b      	lsls	r3, r3, #16
    1f7a:	0c1b      	lsrs	r3, r3, #16
    1f7c:	8293      	strh	r3, [r2, #20]
    1f7e:	4788      	blx	r1
            callbacks[0]();
        }

        if (callbacks[1] != nullptr && pCH1->CSCTRL & TMR_CSCTRL_TCF1)
    1f80:	69a3      	ldr	r3, [r4, #24]
    1f82:	491c      	ldr	r1, [pc, #112]	; (1ff4 <TeensyTimerTool::TMR_t<0u>::isr()+0x98>)
    1f84:	b173      	cbz	r3, 1fa4 <TeensyTimerTool::TMR_t<0u>::isr()+0x48>
    1f86:	4b1d      	ldr	r3, [pc, #116]	; (1ffc <TeensyTimerTool::TMR_t<0u>::isr()+0xa0>)
    1f88:	681a      	ldr	r2, [r3, #0]
    1f8a:	8a93      	ldrh	r3, [r2, #20]
    1f8c:	06db      	lsls	r3, r3, #27
    1f8e:	d509      	bpl.n	1fa4 <TeensyTimerTool::TMR_t<0u>::isr()+0x48>
        {
            pCH1->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1f90:	8a93      	ldrh	r3, [r2, #20]
    1f92:	f101 0010 	add.w	r0, r1, #16
    1f96:	69c9      	ldr	r1, [r1, #28]
    1f98:	f023 0310 	bic.w	r3, r3, #16
    1f9c:	041b      	lsls	r3, r3, #16
    1f9e:	0c1b      	lsrs	r3, r3, #16
    1fa0:	8293      	strh	r3, [r2, #20]
    1fa2:	4788      	blx	r1
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
    1fa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1fa6:	4913      	ldr	r1, [pc, #76]	; (1ff4 <TeensyTimerTool::TMR_t<0u>::isr()+0x98>)
    1fa8:	b123      	cbz	r3, 1fb4 <TeensyTimerTool::TMR_t<0u>::isr()+0x58>
    1faa:	4b15      	ldr	r3, [pc, #84]	; (2000 <TeensyTimerTool::TMR_t<0u>::isr()+0xa4>)
    1fac:	681a      	ldr	r2, [r3, #0]
    1fae:	8a93      	ldrh	r3, [r2, #20]
    1fb0:	06d8      	lsls	r0, r3, #27
    1fb2:	d414      	bmi.n	1fde <TeensyTimerTool::TMR_t<0u>::isr()+0x82>
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
            callbacks[2]();
        }

        if (callbacks[3] != nullptr && pCH3->CSCTRL & TMR_CSCTRL_TCF1)
    1fb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1fb6:	490f      	ldr	r1, [pc, #60]	; (1ff4 <TeensyTimerTool::TMR_t<0u>::isr()+0x98>)
    1fb8:	b173      	cbz	r3, 1fd8 <TeensyTimerTool::TMR_t<0u>::isr()+0x7c>
    1fba:	4b12      	ldr	r3, [pc, #72]	; (2004 <TeensyTimerTool::TMR_t<0u>::isr()+0xa8>)
    1fbc:	681a      	ldr	r2, [r3, #0]
    1fbe:	8a93      	ldrh	r3, [r2, #20]
    1fc0:	06db      	lsls	r3, r3, #27
    1fc2:	d509      	bpl.n	1fd8 <TeensyTimerTool::TMR_t<0u>::isr()+0x7c>
        {
            pCH3->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1fc4:	8a93      	ldrh	r3, [r2, #20]
    1fc6:	f101 0030 	add.w	r0, r1, #48	; 0x30
    1fca:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    1fcc:	f023 0310 	bic.w	r3, r3, #16
    1fd0:	041b      	lsls	r3, r3, #16
    1fd2:	0c1b      	lsrs	r3, r3, #16
    1fd4:	8293      	strh	r3, [r2, #20]
    1fd6:	4788      	blx	r1
            callbacks[3]();
        }
        asm volatile("dsb"); //wait until register changes propagated through the cache
    1fd8:	f3bf 8f4f 	dsb	sy
    }
    1fdc:	bd10      	pop	{r4, pc}
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1fde:	8a93      	ldrh	r3, [r2, #20]
    1fe0:	f101 0020 	add.w	r0, r1, #32
    1fe4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    1fe6:	f023 0310 	bic.w	r3, r3, #16
    1fea:	041b      	lsls	r3, r3, #16
    1fec:	0c1b      	lsrs	r3, r3, #16
    1fee:	8293      	strh	r3, [r2, #20]
    1ff0:	4788      	blx	r1
    1ff2:	e7df      	b.n	1fb4 <TeensyTimerTool::TMR_t<0u>::isr()+0x58>
    1ff4:	20001984 	.word	0x20001984
    1ff8:	20001980 	.word	0x20001980
    1ffc:	20001890 	.word	0x20001890
    2000:	2000188c 	.word	0x2000188c
    2004:	20001888 	.word	0x20001888

00002008 <TeensyTimerTool::TMR_t<1u>::isr()>:
        }
        return nullptr;
    }

    template <unsigned m>
    void TMR_t<m>::isr()
    2008:	b510      	push	{r4, lr}
    200a:	4c25      	ldr	r4, [pc, #148]	; (20a0 <TeensyTimerTool::TMR_t<1u>::isr()+0x98>)
    {
        // no loop to gain some time by avoiding indirections and pointer calculations
        if (callbacks[0] != nullptr && pCH0->CSCTRL & TMR_CSCTRL_TCF1)
    200c:	68a3      	ldr	r3, [r4, #8]
    200e:	b16b      	cbz	r3, 202c <TeensyTimerTool::TMR_t<1u>::isr()+0x24>
    2010:	4b24      	ldr	r3, [pc, #144]	; (20a4 <TeensyTimerTool::TMR_t<1u>::isr()+0x9c>)
    2012:	681a      	ldr	r2, [r3, #0]
    2014:	8a93      	ldrh	r3, [r2, #20]
    2016:	06d9      	lsls	r1, r3, #27
    2018:	d508      	bpl.n	202c <TeensyTimerTool::TMR_t<1u>::isr()+0x24>
        {
            pCH0->CSCTRL &= ~TMR_CSCTRL_TCF1;
    201a:	8a93      	ldrh	r3, [r2, #20]
    201c:	4620      	mov	r0, r4
    201e:	68e1      	ldr	r1, [r4, #12]
    2020:	f023 0310 	bic.w	r3, r3, #16
    2024:	041b      	lsls	r3, r3, #16
    2026:	0c1b      	lsrs	r3, r3, #16
    2028:	8293      	strh	r3, [r2, #20]
    202a:	4788      	blx	r1
            callbacks[0]();
        }

        if (callbacks[1] != nullptr && pCH1->CSCTRL & TMR_CSCTRL_TCF1)
    202c:	69a3      	ldr	r3, [r4, #24]
    202e:	491c      	ldr	r1, [pc, #112]	; (20a0 <TeensyTimerTool::TMR_t<1u>::isr()+0x98>)
    2030:	b173      	cbz	r3, 2050 <TeensyTimerTool::TMR_t<1u>::isr()+0x48>
    2032:	4b1d      	ldr	r3, [pc, #116]	; (20a8 <TeensyTimerTool::TMR_t<1u>::isr()+0xa0>)
    2034:	681a      	ldr	r2, [r3, #0]
    2036:	8a93      	ldrh	r3, [r2, #20]
    2038:	06db      	lsls	r3, r3, #27
    203a:	d509      	bpl.n	2050 <TeensyTimerTool::TMR_t<1u>::isr()+0x48>
        {
            pCH1->CSCTRL &= ~TMR_CSCTRL_TCF1;
    203c:	8a93      	ldrh	r3, [r2, #20]
    203e:	f101 0010 	add.w	r0, r1, #16
    2042:	69c9      	ldr	r1, [r1, #28]
    2044:	f023 0310 	bic.w	r3, r3, #16
    2048:	041b      	lsls	r3, r3, #16
    204a:	0c1b      	lsrs	r3, r3, #16
    204c:	8293      	strh	r3, [r2, #20]
    204e:	4788      	blx	r1
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
    2050:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2052:	4913      	ldr	r1, [pc, #76]	; (20a0 <TeensyTimerTool::TMR_t<1u>::isr()+0x98>)
    2054:	b123      	cbz	r3, 2060 <TeensyTimerTool::TMR_t<1u>::isr()+0x58>
    2056:	4b15      	ldr	r3, [pc, #84]	; (20ac <TeensyTimerTool::TMR_t<1u>::isr()+0xa4>)
    2058:	681a      	ldr	r2, [r3, #0]
    205a:	8a93      	ldrh	r3, [r2, #20]
    205c:	06d8      	lsls	r0, r3, #27
    205e:	d414      	bmi.n	208a <TeensyTimerTool::TMR_t<1u>::isr()+0x82>
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
            callbacks[2]();
        }

        if (callbacks[3] != nullptr && pCH3->CSCTRL & TMR_CSCTRL_TCF1)
    2060:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2062:	490f      	ldr	r1, [pc, #60]	; (20a0 <TeensyTimerTool::TMR_t<1u>::isr()+0x98>)
    2064:	b173      	cbz	r3, 2084 <TeensyTimerTool::TMR_t<1u>::isr()+0x7c>
    2066:	4b12      	ldr	r3, [pc, #72]	; (20b0 <TeensyTimerTool::TMR_t<1u>::isr()+0xa8>)
    2068:	681a      	ldr	r2, [r3, #0]
    206a:	8a93      	ldrh	r3, [r2, #20]
    206c:	06db      	lsls	r3, r3, #27
    206e:	d509      	bpl.n	2084 <TeensyTimerTool::TMR_t<1u>::isr()+0x7c>
        {
            pCH3->CSCTRL &= ~TMR_CSCTRL_TCF1;
    2070:	8a93      	ldrh	r3, [r2, #20]
    2072:	f101 0030 	add.w	r0, r1, #48	; 0x30
    2076:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    2078:	f023 0310 	bic.w	r3, r3, #16
    207c:	041b      	lsls	r3, r3, #16
    207e:	0c1b      	lsrs	r3, r3, #16
    2080:	8293      	strh	r3, [r2, #20]
    2082:	4788      	blx	r1
            callbacks[3]();
        }
        asm volatile("dsb"); //wait until register changes propagated through the cache
    2084:	f3bf 8f4f 	dsb	sy
    }
    2088:	bd10      	pop	{r4, pc}
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
    208a:	8a93      	ldrh	r3, [r2, #20]
    208c:	f101 0020 	add.w	r0, r1, #32
    2090:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    2092:	f023 0310 	bic.w	r3, r3, #16
    2096:	041b      	lsls	r3, r3, #16
    2098:	0c1b      	lsrs	r3, r3, #16
    209a:	8293      	strh	r3, [r2, #20]
    209c:	4788      	blx	r1
    209e:	e7df      	b.n	2060 <TeensyTimerTool::TMR_t<1u>::isr()+0x58>
    20a0:	20001940 	.word	0x20001940
    20a4:	2000193c 	.word	0x2000193c
    20a8:	20001884 	.word	0x20001884
    20ac:	20001880 	.word	0x20001880
    20b0:	2000187c 	.word	0x2000187c

000020b4 <TeensyTimerTool::TMR_t<2u>::isr()>:
        }
        return nullptr;
    }

    template <unsigned m>
    void TMR_t<m>::isr()
    20b4:	b510      	push	{r4, lr}
    20b6:	4c25      	ldr	r4, [pc, #148]	; (214c <TeensyTimerTool::TMR_t<2u>::isr()+0x98>)
    {
        // no loop to gain some time by avoiding indirections and pointer calculations
        if (callbacks[0] != nullptr && pCH0->CSCTRL & TMR_CSCTRL_TCF1)
    20b8:	68a3      	ldr	r3, [r4, #8]
    20ba:	b16b      	cbz	r3, 20d8 <TeensyTimerTool::TMR_t<2u>::isr()+0x24>
    20bc:	4b24      	ldr	r3, [pc, #144]	; (2150 <TeensyTimerTool::TMR_t<2u>::isr()+0x9c>)
    20be:	681a      	ldr	r2, [r3, #0]
    20c0:	8a93      	ldrh	r3, [r2, #20]
    20c2:	06d9      	lsls	r1, r3, #27
    20c4:	d508      	bpl.n	20d8 <TeensyTimerTool::TMR_t<2u>::isr()+0x24>
        {
            pCH0->CSCTRL &= ~TMR_CSCTRL_TCF1;
    20c6:	8a93      	ldrh	r3, [r2, #20]
    20c8:	4620      	mov	r0, r4
    20ca:	68e1      	ldr	r1, [r4, #12]
    20cc:	f023 0310 	bic.w	r3, r3, #16
    20d0:	041b      	lsls	r3, r3, #16
    20d2:	0c1b      	lsrs	r3, r3, #16
    20d4:	8293      	strh	r3, [r2, #20]
    20d6:	4788      	blx	r1
            callbacks[0]();
        }

        if (callbacks[1] != nullptr && pCH1->CSCTRL & TMR_CSCTRL_TCF1)
    20d8:	69a3      	ldr	r3, [r4, #24]
    20da:	491c      	ldr	r1, [pc, #112]	; (214c <TeensyTimerTool::TMR_t<2u>::isr()+0x98>)
    20dc:	b173      	cbz	r3, 20fc <TeensyTimerTool::TMR_t<2u>::isr()+0x48>
    20de:	4b1d      	ldr	r3, [pc, #116]	; (2154 <TeensyTimerTool::TMR_t<2u>::isr()+0xa0>)
    20e0:	681a      	ldr	r2, [r3, #0]
    20e2:	8a93      	ldrh	r3, [r2, #20]
    20e4:	06db      	lsls	r3, r3, #27
    20e6:	d509      	bpl.n	20fc <TeensyTimerTool::TMR_t<2u>::isr()+0x48>
        {
            pCH1->CSCTRL &= ~TMR_CSCTRL_TCF1;
    20e8:	8a93      	ldrh	r3, [r2, #20]
    20ea:	f101 0010 	add.w	r0, r1, #16
    20ee:	69c9      	ldr	r1, [r1, #28]
    20f0:	f023 0310 	bic.w	r3, r3, #16
    20f4:	041b      	lsls	r3, r3, #16
    20f6:	0c1b      	lsrs	r3, r3, #16
    20f8:	8293      	strh	r3, [r2, #20]
    20fa:	4788      	blx	r1
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
    20fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    20fe:	4913      	ldr	r1, [pc, #76]	; (214c <TeensyTimerTool::TMR_t<2u>::isr()+0x98>)
    2100:	b123      	cbz	r3, 210c <TeensyTimerTool::TMR_t<2u>::isr()+0x58>
    2102:	4b15      	ldr	r3, [pc, #84]	; (2158 <TeensyTimerTool::TMR_t<2u>::isr()+0xa4>)
    2104:	681a      	ldr	r2, [r3, #0]
    2106:	8a93      	ldrh	r3, [r2, #20]
    2108:	06d8      	lsls	r0, r3, #27
    210a:	d414      	bmi.n	2136 <TeensyTimerTool::TMR_t<2u>::isr()+0x82>
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
            callbacks[2]();
        }

        if (callbacks[3] != nullptr && pCH3->CSCTRL & TMR_CSCTRL_TCF1)
    210c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    210e:	490f      	ldr	r1, [pc, #60]	; (214c <TeensyTimerTool::TMR_t<2u>::isr()+0x98>)
    2110:	b173      	cbz	r3, 2130 <TeensyTimerTool::TMR_t<2u>::isr()+0x7c>
    2112:	4b12      	ldr	r3, [pc, #72]	; (215c <TeensyTimerTool::TMR_t<2u>::isr()+0xa8>)
    2114:	681a      	ldr	r2, [r3, #0]
    2116:	8a93      	ldrh	r3, [r2, #20]
    2118:	06db      	lsls	r3, r3, #27
    211a:	d509      	bpl.n	2130 <TeensyTimerTool::TMR_t<2u>::isr()+0x7c>
        {
            pCH3->CSCTRL &= ~TMR_CSCTRL_TCF1;
    211c:	8a93      	ldrh	r3, [r2, #20]
    211e:	f101 0030 	add.w	r0, r1, #48	; 0x30
    2122:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    2124:	f023 0310 	bic.w	r3, r3, #16
    2128:	041b      	lsls	r3, r3, #16
    212a:	0c1b      	lsrs	r3, r3, #16
    212c:	8293      	strh	r3, [r2, #20]
    212e:	4788      	blx	r1
            callbacks[3]();
        }
        asm volatile("dsb"); //wait until register changes propagated through the cache
    2130:	f3bf 8f4f 	dsb	sy
    }
    2134:	bd10      	pop	{r4, pc}
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
    2136:	8a93      	ldrh	r3, [r2, #20]
    2138:	f101 0020 	add.w	r0, r1, #32
    213c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    213e:	f023 0310 	bic.w	r3, r3, #16
    2142:	041b      	lsls	r3, r3, #16
    2144:	0c1b      	lsrs	r3, r3, #16
    2146:	8293      	strh	r3, [r2, #20]
    2148:	4788      	blx	r1
    214a:	e7df      	b.n	210c <TeensyTimerTool::TMR_t<2u>::isr()+0x58>
    214c:	200018fc 	.word	0x200018fc
    2150:	200018f8 	.word	0x200018f8
    2154:	20001878 	.word	0x20001878
    2158:	20001874 	.word	0x20001874
    215c:	20001870 	.word	0x20001870

00002160 <TeensyTimerTool::TMR_t<3u>::isr()>:
        }
        return nullptr;
    }

    template <unsigned m>
    void TMR_t<m>::isr()
    2160:	b510      	push	{r4, lr}
    2162:	4c25      	ldr	r4, [pc, #148]	; (21f8 <TeensyTimerTool::TMR_t<3u>::isr()+0x98>)
    {
        // no loop to gain some time by avoiding indirections and pointer calculations
        if (callbacks[0] != nullptr && pCH0->CSCTRL & TMR_CSCTRL_TCF1)
    2164:	68a3      	ldr	r3, [r4, #8]
    2166:	b16b      	cbz	r3, 2184 <TeensyTimerTool::TMR_t<3u>::isr()+0x24>
    2168:	4b24      	ldr	r3, [pc, #144]	; (21fc <TeensyTimerTool::TMR_t<3u>::isr()+0x9c>)
    216a:	681a      	ldr	r2, [r3, #0]
    216c:	8a93      	ldrh	r3, [r2, #20]
    216e:	06d9      	lsls	r1, r3, #27
    2170:	d508      	bpl.n	2184 <TeensyTimerTool::TMR_t<3u>::isr()+0x24>
        {
            pCH0->CSCTRL &= ~TMR_CSCTRL_TCF1;
    2172:	8a93      	ldrh	r3, [r2, #20]
    2174:	4620      	mov	r0, r4
    2176:	68e1      	ldr	r1, [r4, #12]
    2178:	f023 0310 	bic.w	r3, r3, #16
    217c:	041b      	lsls	r3, r3, #16
    217e:	0c1b      	lsrs	r3, r3, #16
    2180:	8293      	strh	r3, [r2, #20]
    2182:	4788      	blx	r1
            callbacks[0]();
        }

        if (callbacks[1] != nullptr && pCH1->CSCTRL & TMR_CSCTRL_TCF1)
    2184:	69a3      	ldr	r3, [r4, #24]
    2186:	491c      	ldr	r1, [pc, #112]	; (21f8 <TeensyTimerTool::TMR_t<3u>::isr()+0x98>)
    2188:	b173      	cbz	r3, 21a8 <TeensyTimerTool::TMR_t<3u>::isr()+0x48>
    218a:	4b1d      	ldr	r3, [pc, #116]	; (2200 <TeensyTimerTool::TMR_t<3u>::isr()+0xa0>)
    218c:	681a      	ldr	r2, [r3, #0]
    218e:	8a93      	ldrh	r3, [r2, #20]
    2190:	06db      	lsls	r3, r3, #27
    2192:	d509      	bpl.n	21a8 <TeensyTimerTool::TMR_t<3u>::isr()+0x48>
        {
            pCH1->CSCTRL &= ~TMR_CSCTRL_TCF1;
    2194:	8a93      	ldrh	r3, [r2, #20]
    2196:	f101 0010 	add.w	r0, r1, #16
    219a:	69c9      	ldr	r1, [r1, #28]
    219c:	f023 0310 	bic.w	r3, r3, #16
    21a0:	041b      	lsls	r3, r3, #16
    21a2:	0c1b      	lsrs	r3, r3, #16
    21a4:	8293      	strh	r3, [r2, #20]
    21a6:	4788      	blx	r1
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
    21a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    21aa:	4913      	ldr	r1, [pc, #76]	; (21f8 <TeensyTimerTool::TMR_t<3u>::isr()+0x98>)
    21ac:	b123      	cbz	r3, 21b8 <TeensyTimerTool::TMR_t<3u>::isr()+0x58>
    21ae:	4b15      	ldr	r3, [pc, #84]	; (2204 <TeensyTimerTool::TMR_t<3u>::isr()+0xa4>)
    21b0:	681a      	ldr	r2, [r3, #0]
    21b2:	8a93      	ldrh	r3, [r2, #20]
    21b4:	06d8      	lsls	r0, r3, #27
    21b6:	d414      	bmi.n	21e2 <TeensyTimerTool::TMR_t<3u>::isr()+0x82>
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
            callbacks[2]();
        }

        if (callbacks[3] != nullptr && pCH3->CSCTRL & TMR_CSCTRL_TCF1)
    21b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    21ba:	490f      	ldr	r1, [pc, #60]	; (21f8 <TeensyTimerTool::TMR_t<3u>::isr()+0x98>)
    21bc:	b173      	cbz	r3, 21dc <TeensyTimerTool::TMR_t<3u>::isr()+0x7c>
    21be:	4b12      	ldr	r3, [pc, #72]	; (2208 <TeensyTimerTool::TMR_t<3u>::isr()+0xa8>)
    21c0:	681a      	ldr	r2, [r3, #0]
    21c2:	8a93      	ldrh	r3, [r2, #20]
    21c4:	06db      	lsls	r3, r3, #27
    21c6:	d509      	bpl.n	21dc <TeensyTimerTool::TMR_t<3u>::isr()+0x7c>
        {
            pCH3->CSCTRL &= ~TMR_CSCTRL_TCF1;
    21c8:	8a93      	ldrh	r3, [r2, #20]
    21ca:	f101 0030 	add.w	r0, r1, #48	; 0x30
    21ce:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    21d0:	f023 0310 	bic.w	r3, r3, #16
    21d4:	041b      	lsls	r3, r3, #16
    21d6:	0c1b      	lsrs	r3, r3, #16
    21d8:	8293      	strh	r3, [r2, #20]
    21da:	4788      	blx	r1
            callbacks[3]();
        }
        asm volatile("dsb"); //wait until register changes propagated through the cache
    21dc:	f3bf 8f4f 	dsb	sy
    }
    21e0:	bd10      	pop	{r4, pc}
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
    21e2:	8a93      	ldrh	r3, [r2, #20]
    21e4:	f101 0020 	add.w	r0, r1, #32
    21e8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    21ea:	f023 0310 	bic.w	r3, r3, #16
    21ee:	041b      	lsls	r3, r3, #16
    21f0:	0c1b      	lsrs	r3, r3, #16
    21f2:	8293      	strh	r3, [r2, #20]
    21f4:	4788      	blx	r1
    21f6:	e7df      	b.n	21b8 <TeensyTimerTool::TMR_t<3u>::isr()+0x58>
    21f8:	200018b8 	.word	0x200018b8
    21fc:	200018b4 	.word	0x200018b4
    2200:	2000186c 	.word	0x2000186c
    2204:	20001868 	.word	0x20001868
    2208:	20001864 	.word	0x20001864

0000220c <TeensyTimerTool::GPT_t<0u>::isr()>:
    }

    template <unsigned tmoduleNr>
    void GPT_t<tmoduleNr>::isr()
    {
        if (!channel->periodic)
    220c:	4b0a      	ldr	r3, [pc, #40]	; (2238 <TeensyTimerTool::GPT_t<0u>::isr()+0x2c>)
    220e:	681b      	ldr	r3, [r3, #0]
    2210:	7a1b      	ldrb	r3, [r3, #8]
        }
        return nullptr;
    }

    template <unsigned tmoduleNr>
    void GPT_t<tmoduleNr>::isr()
    2212:	b510      	push	{r4, lr}
    {
        if (!channel->periodic)
    2214:	b923      	cbnz	r3, 2220 <TeensyTimerTool::GPT_t<0u>::isr()+0x14>
            pGPT->CR &= ~GPT_CR_EN; // stop timer in one shot mode
    2216:	4a09      	ldr	r2, [pc, #36]	; (223c <TeensyTimerTool::GPT_t<0u>::isr()+0x30>)
    2218:	6813      	ldr	r3, [r2, #0]
    221a:	f023 0301 	bic.w	r3, r3, #1
    221e:	6013      	str	r3, [r2, #0]
    2220:	4807      	ldr	r0, [pc, #28]	; (2240 <TeensyTimerTool::GPT_t<0u>::isr()+0x34>)

        pGPT->SR = 0x3F; // reset all interrupt flags
    2222:	223f      	movs	r2, #63	; 0x3f
    2224:	4c05      	ldr	r4, [pc, #20]	; (223c <TeensyTimerTool::GPT_t<0u>::isr()+0x30>)
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    2226:	6883      	ldr	r3, [r0, #8]
    2228:	60a2      	str	r2, [r4, #8]
    222a:	b11b      	cbz	r3, 2234 <TeensyTimerTool::GPT_t<0u>::isr()+0x28>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    222c:	68c3      	ldr	r3, [r0, #12]
    222e:	4798      	blx	r3
        callback();      // we only enabled the OF1 interrupt-> no need to find out which interrupt was actually called
        pGPT->SR;                 // re-read flag to prevent re entering, takes very long, seems to work without?
    2230:	68a3      	ldr	r3, [r4, #8]
    2232:	bd10      	pop	{r4, pc}
    2234:	e7fe      	b.n	2234 <TeensyTimerTool::GPT_t<0u>::isr()+0x28>
    2236:	bf00      	nop
    2238:	20001800 	.word	0x20001800
    223c:	401ec000 	.word	0x401ec000
    2240:	200018a4 	.word	0x200018a4

00002244 <TeensyTimerTool::GPT_t<1u>::isr()>:
    }

    template <unsigned tmoduleNr>
    void GPT_t<tmoduleNr>::isr()
    {
        if (!channel->periodic)
    2244:	4b0a      	ldr	r3, [pc, #40]	; (2270 <TeensyTimerTool::GPT_t<1u>::isr()+0x2c>)
    2246:	681b      	ldr	r3, [r3, #0]
    2248:	7a1b      	ldrb	r3, [r3, #8]
        }
        return nullptr;
    }

    template <unsigned tmoduleNr>
    void GPT_t<tmoduleNr>::isr()
    224a:	b510      	push	{r4, lr}
    {
        if (!channel->periodic)
    224c:	b923      	cbnz	r3, 2258 <TeensyTimerTool::GPT_t<1u>::isr()+0x14>
            pGPT->CR &= ~GPT_CR_EN; // stop timer in one shot mode
    224e:	4a09      	ldr	r2, [pc, #36]	; (2274 <TeensyTimerTool::GPT_t<1u>::isr()+0x30>)
    2250:	6813      	ldr	r3, [r2, #0]
    2252:	f023 0301 	bic.w	r3, r3, #1
    2256:	6013      	str	r3, [r2, #0]
    2258:	4807      	ldr	r0, [pc, #28]	; (2278 <TeensyTimerTool::GPT_t<1u>::isr()+0x34>)

        pGPT->SR = 0x3F; // reset all interrupt flags
    225a:	223f      	movs	r2, #63	; 0x3f
    225c:	4c05      	ldr	r4, [pc, #20]	; (2274 <TeensyTimerTool::GPT_t<1u>::isr()+0x30>)
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    225e:	6883      	ldr	r3, [r0, #8]
    2260:	60a2      	str	r2, [r4, #8]
    2262:	b11b      	cbz	r3, 226c <TeensyTimerTool::GPT_t<1u>::isr()+0x28>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    2264:	68c3      	ldr	r3, [r0, #12]
    2266:	4798      	blx	r3
        callback();      // we only enabled the OF1 interrupt-> no need to find out which interrupt was actually called
        pGPT->SR;                 // re-read flag to prevent re entering, takes very long, seems to work without?
    2268:	68a3      	ldr	r3, [r4, #8]
    226a:	bd10      	pop	{r4, pc}
    226c:	e7fe      	b.n	226c <TeensyTimerTool::GPT_t<1u>::isr()+0x28>
    226e:	bf00      	nop
    2270:	200017f8 	.word	0x200017f8
    2274:	401f0000 	.word	0x401f0000
    2278:	20001894 	.word	0x20001894

0000227c <__tcf_0>:

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    227c:	b538      	push	{r3, r4, r5, lr}
    227e:	4c06      	ldr	r4, [pc, #24]	; (2298 <__tcf_0+0x1c>)
    2280:	f1a4 0540 	sub.w	r5, r4, #64	; 0x40
    2284:	3c10      	subs	r4, #16

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2286:	68a3      	ldr	r3, [r4, #8]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2288:	2203      	movs	r2, #3
    228a:	4621      	mov	r1, r4
    228c:	4620      	mov	r0, r4

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    228e:	b103      	cbz	r3, 2292 <__tcf_0+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2290:	4798      	blx	r3
    2292:	42ac      	cmp	r4, r5
    2294:	d1f6      	bne.n	2284 <__tcf_0+0x8>
    2296:	bd38      	pop	{r3, r4, r5, pc}
    2298:	200019c4 	.word	0x200019c4

0000229c <__tcf_1>:
    229c:	b538      	push	{r3, r4, r5, lr}
    229e:	4c06      	ldr	r4, [pc, #24]	; (22b8 <__tcf_1+0x1c>)
    22a0:	f1a4 0540 	sub.w	r5, r4, #64	; 0x40
    22a4:	3c10      	subs	r4, #16

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    22a6:	68a3      	ldr	r3, [r4, #8]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    22a8:	2203      	movs	r2, #3
    22aa:	4621      	mov	r1, r4
    22ac:	4620      	mov	r0, r4

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    22ae:	b103      	cbz	r3, 22b2 <__tcf_1+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    22b0:	4798      	blx	r3
    22b2:	42ac      	cmp	r4, r5
    22b4:	d1f6      	bne.n	22a4 <__tcf_1+0x8>
    22b6:	bd38      	pop	{r3, r4, r5, pc}
    22b8:	20001980 	.word	0x20001980

000022bc <__tcf_2>:
    22bc:	b538      	push	{r3, r4, r5, lr}
    22be:	4c06      	ldr	r4, [pc, #24]	; (22d8 <__tcf_2+0x1c>)
    22c0:	f1a4 0540 	sub.w	r5, r4, #64	; 0x40
    22c4:	3c10      	subs	r4, #16

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    22c6:	68a3      	ldr	r3, [r4, #8]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    22c8:	2203      	movs	r2, #3
    22ca:	4621      	mov	r1, r4
    22cc:	4620      	mov	r0, r4

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    22ce:	b103      	cbz	r3, 22d2 <__tcf_2+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    22d0:	4798      	blx	r3
    22d2:	42ac      	cmp	r4, r5
    22d4:	d1f6      	bne.n	22c4 <__tcf_2+0x8>
    22d6:	bd38      	pop	{r3, r4, r5, pc}
    22d8:	2000193c 	.word	0x2000193c

000022dc <__tcf_3>:
    22dc:	b538      	push	{r3, r4, r5, lr}
    22de:	4c06      	ldr	r4, [pc, #24]	; (22f8 <__tcf_3+0x1c>)
    22e0:	f1a4 0540 	sub.w	r5, r4, #64	; 0x40
    22e4:	3c10      	subs	r4, #16

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    22e6:	68a3      	ldr	r3, [r4, #8]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    22e8:	2203      	movs	r2, #3
    22ea:	4621      	mov	r1, r4
    22ec:	4620      	mov	r0, r4

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    22ee:	b103      	cbz	r3, 22f2 <__tcf_3+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    22f0:	4798      	blx	r3
    22f2:	42ac      	cmp	r4, r5
    22f4:	d1f6      	bne.n	22e4 <__tcf_3+0x8>
    22f6:	bd38      	pop	{r3, r4, r5, pc}
    22f8:	200018f8 	.word	0x200018f8

000022fc <TeensyTimerTool::TckChannel<unsigned long>::triggerDirect(unsigned long)>:
        this->triggered = false;
        return errorCode::OK;
    }

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    22fc:	b410      	push	{r4}
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    22fe:	4c06      	ldr	r4, [pc, #24]	; (2318 <TeensyTimerTool::TckChannel<unsigned long>::triggerDirect(unsigned long)+0x1c>)
        this->triggered = false;
        return errorCode::OK;
    }

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    2300:	4603      	mov	r3, r0
    {
        this->startCnt = getCycleCounter();
        this->nextPeriod = reload;
        this->currentPeriod = this->nextPeriod;
        this->triggered = true;
    2302:	2201      	movs	r2, #1
        return errorCode::OK;
    }
    2304:	2000      	movs	r0, #0
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    2306:	6824      	ldr	r4, [r4, #0]

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
        this->nextPeriod = reload;
    2308:	6259      	str	r1, [r3, #36]	; 0x24
    }

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
    230a:	61dc      	str	r4, [r3, #28]
        this->nextPeriod = reload;
        this->currentPeriod = this->nextPeriod;
    230c:	6219      	str	r1, [r3, #32]
        this->triggered = true;
    230e:	765a      	strb	r2, [r3, #25]
        return errorCode::OK;
    }
    2310:	f85d 4b04 	ldr.w	r4, [sp], #4
    2314:	4770      	bx	lr
    2316:	bf00      	nop
    2318:	e0001004 	.word	0xe0001004

0000231c <TeensyTimerTool::TckChannel<unsigned long>::start()>:
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    231c:	4a03      	ldr	r2, [pc, #12]	; (232c <TeensyTimerTool::TckChannel<unsigned long>::start()+0x10>)

        return errorCode::OK;
    }

    template <typename T>
    errorCode TckChannel<T>::start()
    231e:	4603      	mov	r3, r0
    {
        this->startCnt = getCycleCounter();
        this->triggered = true;
    2320:	2101      	movs	r1, #1
        return errorCode::OK;
    }
    2322:	2000      	movs	r0, #0
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    2324:	6812      	ldr	r2, [r2, #0]

    template <typename T>
    errorCode TckChannel<T>::start()
    {
        this->startCnt = getCycleCounter();
        this->triggered = true;
    2326:	7659      	strb	r1, [r3, #25]
    }

    template <typename T>
    errorCode TckChannel<T>::start()
    {
        this->startCnt = getCycleCounter();
    2328:	61da      	str	r2, [r3, #28]
        this->triggered = true;
        return errorCode::OK;
    }
    232a:	4770      	bx	lr
    232c:	e0001004 	.word	0xe0001004

00002330 <TeensyTimerTool::TckChannel<unsigned long>::stop()>:

    template <typename T>
    errorCode TckChannel<T>::stop()
    {
        this->triggered = false;
    2330:	2300      	movs	r3, #0
    2332:	7643      	strb	r3, [r0, #25]
        return errorCode::OK;
    }
    2334:	4618      	mov	r0, r3
    2336:	4770      	bx	lr

00002338 <TeensyTimerTool::TckChannel<unsigned long>::getMaxPeriod() const>:
        {
            *reload = microsecondToCycles(delay);
            return errorCode::OK;
        }

        float getMaxPeriod() const override { return getMaxMicros() / 1E6; } // seconds
    2338:	eddf 6a05 	vldr	s13, [pc, #20]	; 2350 <TeensyTimerTool::TckChannel<unsigned long>::getMaxPeriod() const+0x18>
    233c:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
    2340:	eddf 7a04 	vldr	s15, [pc, #16]	; 2354 <TeensyTimerTool::TckChannel<unsigned long>::getMaxPeriod() const+0x1c>
    2344:	ee86 0a87 	vdiv.f32	s0, s13, s14
    2348:	ee80 0a27 	vdiv.f32	s0, s0, s15
    234c:	4770      	bx	lr
    234e:	bf00      	nop
    2350:	4f700000 	.word	0x4f700000
    2354:	49742400 	.word	0x49742400

00002358 <TeensyTimerTool::TckChannel<unsigned long>::tick()>:
    {
        return triggerDirect(microsecondToCycles(delay));
    }

    template <typename counter_t>
    bool TckChannel<counter_t>::tick()
    2358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
    235a:	4d10      	ldr	r5, [pc, #64]	; (239c <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x44>)
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    235c:	4b10      	ldr	r3, [pc, #64]	; (23a0 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x48>)
    template <typename counter_t>
    bool TckChannel<counter_t>::tick()
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
    235e:	782c      	ldrb	r4, [r5, #0]
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    2360:	681a      	ldr	r2, [r3, #0]
    template <typename counter_t>
    bool TckChannel<counter_t>::tick()
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
    2362:	b9b4      	cbnz	r4, 2392 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x3a>
    2364:	6a01      	ldr	r1, [r0, #32]
    2366:	b191      	cbz	r1, 238e <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x36>
    2368:	7e46      	ldrb	r6, [r0, #25]
    236a:	b186      	cbz	r6, 238e <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x36>
    236c:	69c3      	ldr	r3, [r0, #28]
    236e:	1ad2      	subs	r2, r2, r3
    2370:	4291      	cmp	r1, r2
    2372:	d80c      	bhi.n	238e <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x36>
        {
            lock = true;
            //this->startCnt = now;
            this->startCnt += currentPeriod;
    2374:	440b      	add	r3, r1
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
        {
            lock = true;
    2376:	2701      	movs	r7, #1
            //this->startCnt = now;
            this->startCnt += currentPeriod;
            this->triggered = this->periodic; // i.e., stays triggerd if periodic, stops if oneShot
    2378:	7e01      	ldrb	r1, [r0, #24]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    237a:	6902      	ldr	r2, [r0, #16]
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
        {
            lock = true;
            //this->startCnt = now;
            this->startCnt += currentPeriod;
    237c:	61c3      	str	r3, [r0, #28]
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
        {
            lock = true;
    237e:	702f      	strb	r7, [r5, #0]
            //this->startCnt = now;
            this->startCnt += currentPeriod;
            this->triggered = this->periodic; // i.e., stays triggerd if periodic, stops if oneShot
    2380:	7641      	strb	r1, [r0, #25]
    2382:	b14a      	cbz	r2, 2398 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x40>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    2384:	6943      	ldr	r3, [r0, #20]
    2386:	3008      	adds	r0, #8
    2388:	4798      	blx	r3
            callback();
            lock = false;
    238a:	702c      	strb	r4, [r5, #0]
            return true;
    238c:	4634      	mov	r4, r6
        } else
        {
            return false;
        }
    }
    238e:	4620      	mov	r0, r4
    2390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            callback();
            lock = false;
            return true;
        } else
        {
            return false;
    2392:	2400      	movs	r4, #0
        }
    }
    2394:	4620      	mov	r0, r4
    2396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2398:	e7fe      	b.n	2398 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x40>
    239a:	bf00      	nop
    239c:	200017f5 	.word	0x200017f5
    23a0:	e0001004 	.word	0xe0001004

000023a4 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()>:
    template <typename CounterType>
    class TckChannel : public TckChannelBase
    {
     public:
        TckChannel();
        virtual ~TckChannel(){}; //TBD
    23a4:	4a06      	ldr	r2, [pc, #24]	; (23c0 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()+0x1c>)

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    23a6:	6903      	ldr	r3, [r0, #16]
    23a8:	b510      	push	{r4, lr}
    23aa:	4604      	mov	r4, r0
    23ac:	6002      	str	r2, [r0, #0]
    23ae:	b123      	cbz	r3, 23ba <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    23b0:	f100 0108 	add.w	r1, r0, #8
    23b4:	2203      	movs	r2, #3
    23b6:	4608      	mov	r0, r1
    23b8:	4798      	blx	r3
    23ba:	4620      	mov	r0, r4
    23bc:	bd10      	pop	{r4, pc}
    23be:	bf00      	nop
    23c0:	20000208 	.word	0x20000208

000023c4 <TeensyTimerTool::GPT_t<0u>::getTimer()>:

    template <unsigned moduleNr>
    IMXRT_GPT_t* const GPT_t<moduleNr>::pGPT = reinterpret_cast<IMXRT_GPT_t*>(moduleNr == 0 ? &IMXRT_GPT1 : &IMXRT_GPT2);

    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    23c4:	b538      	push	{r3, r4, r5, lr}
    {
        if (!isInitialized)
    23c6:	4b1d      	ldr	r3, [pc, #116]	; (243c <TeensyTimerTool::GPT_t<0u>::getTimer()+0x78>)
    23c8:	781a      	ldrb	r2, [r3, #0]
    23ca:	2a00      	cmp	r2, #0
    23cc:	d133      	bne.n	2436 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x72>
        {
            isInitialized = true;

            if (moduleNr == 0) // GPT1 clock settings
                CCM_CCGR1 |= CCM_CCGR1_GPT1_BUS(CCM_CCGR_ON) | CCM_CCGR1_GPT1_SERIAL(CCM_CCGR_ON);
    23ce:	4c1c      	ldr	r4, [pc, #112]	; (2440 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x7c>)
    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            isInitialized = true;
    23d0:	2101      	movs	r1, #1
            if(USE_GPT_PIT_150MHz) // timer clock setting from config.h
                CCM_CSCMR1 &= ~CCM_CSCMR1_PERCLK_CLK_SEL; // 150MHz
            else
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock
    23d2:	4d1c      	ldr	r5, [pc, #112]	; (2444 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x80>)
    23d4:	2242      	movs	r2, #66	; 0x42
    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            isInitialized = true;
    23d6:	7019      	strb	r1, [r3, #0]

            if (moduleNr == 0) // GPT1 clock settings
                CCM_CCGR1 |= CCM_CCGR1_GPT1_BUS(CCM_CCGR_ON) | CCM_CCGR1_GPT1_SERIAL(CCM_CCGR_ON);
    23d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    23da:	491b      	ldr	r1, [pc, #108]	; (2448 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x84>)
    23dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    23e0:	481a      	ldr	r0, [pc, #104]	; (244c <TeensyTimerTool::GPT_t<0u>::getTimer()+0x88>)
    23e2:	66e3      	str	r3, [r4, #108]	; 0x6c
                CCM_CCGR0 |= CCM_CCGR0_GPT2_BUS(CCM_CCGR_ON) | CCM_CCGR0_GPT2_SERIAL(CCM_CCGR_ON);

            if(USE_GPT_PIT_150MHz) // timer clock setting from config.h
                CCM_CSCMR1 &= ~CCM_CSCMR1_PERCLK_CLK_SEL; // 150MHz
            else
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz
    23e4:	69e3      	ldr	r3, [r4, #28]
    23e6:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
    23ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    23ee:	61e3      	str	r3, [r4, #28]

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock
    23f0:	602a      	str	r2, [r5, #0]

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);
    23f2:	4b17      	ldr	r3, [pc, #92]	; (2450 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x8c>)
    23f4:	2210      	movs	r2, #16

            channel = new GptChannel(pGPT, &callback);
    23f6:	2018      	movs	r0, #24
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);
    23f8:	601a      	str	r2, [r3, #0]

            channel = new GptChannel(pGPT, &callback);
    23fa:	f002 fbdd 	bl	4bb8 <operator new(unsigned int)>
    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    23fe:	69e2      	ldr	r2, [r4, #28]
    2400:	4603      	mov	r3, r0
    };

    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    2402:	4914      	ldr	r1, [pc, #80]	; (2454 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x90>)

    // IMPLEMENTATION ====================================================

    ITimerChannel::ITimerChannel(callback_t* cbStorage)
    {
        this->pCallback = cbStorage;
    2404:	4814      	ldr	r0, [pc, #80]	; (2458 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x94>)
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    2406:	0652      	lsls	r2, r2, #25
    };

    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    2408:	60dd      	str	r5, [r3, #12]
    240a:	6058      	str	r0, [r3, #4]
    240c:	6019      	str	r1, [r3, #0]
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    240e:	d507      	bpl.n	2420 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x5c>
    2410:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    2414:	4a11      	ldr	r2, [pc, #68]	; (245c <TeensyTimerTool::GPT_t<0u>::getTimer()+0x98>)
            return channel;
    2416:	4618      	mov	r0, r3
    2418:	edc3 7a05 	vstr	s15, [r3, #20]
            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);

            channel = new GptChannel(pGPT, &callback);
    241c:	6013      	str	r3, [r2, #0]
            return channel;
    241e:	bd38      	pop	{r3, r4, r5, pc}
    2420:	4a0f      	ldr	r2, [pc, #60]	; (2460 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x9c>)
    2422:	4910      	ldr	r1, [pc, #64]	; (2464 <TeensyTimerTool::GPT_t<0u>::getTimer()+0xa0>)
    2424:	6812      	ldr	r2, [r2, #0]
    2426:	fba1 1202 	umull	r1, r2, r1, r2
    242a:	0c92      	lsrs	r2, r2, #18
    242c:	ee07 2a90 	vmov	s15, r2
    2430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2434:	e7ee      	b.n	2414 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x50>
        }
        return nullptr;
    2436:	2000      	movs	r0, #0
    }
    2438:	bd38      	pop	{r3, r4, r5, pc}
    243a:	bf00      	nop
    243c:	20001804 	.word	0x20001804
    2440:	400fc000 	.word	0x400fc000
    2444:	401ec000 	.word	0x401ec000
    2448:	20002000 	.word	0x20002000
    244c:	0000220d 	.word	0x0000220d
    2450:	e000e10c 	.word	0xe000e10c
    2454:	200001c0 	.word	0x200001c0
    2458:	200018a4 	.word	0x200018a4
    245c:	20001800 	.word	0x20001800
    2460:	200006d4 	.word	0x200006d4
    2464:	431bde83 	.word	0x431bde83

00002468 <TeensyTimerTool::GPT_t<1u>::getTimer()>:

    template <unsigned moduleNr>
    IMXRT_GPT_t* const GPT_t<moduleNr>::pGPT = reinterpret_cast<IMXRT_GPT_t*>(moduleNr == 0 ? &IMXRT_GPT1 : &IMXRT_GPT2);

    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    2468:	b538      	push	{r3, r4, r5, lr}
    {
        if (!isInitialized)
    246a:	4b1d      	ldr	r3, [pc, #116]	; (24e0 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x78>)
    246c:	781a      	ldrb	r2, [r3, #0]
    246e:	2a00      	cmp	r2, #0
    2470:	d133      	bne.n	24da <TeensyTimerTool::GPT_t<1u>::getTimer()+0x72>
            isInitialized = true;

            if (moduleNr == 0) // GPT1 clock settings
                CCM_CCGR1 |= CCM_CCGR1_GPT1_BUS(CCM_CCGR_ON) | CCM_CCGR1_GPT1_SERIAL(CCM_CCGR_ON);
            else // GPT2
                CCM_CCGR0 |= CCM_CCGR0_GPT2_BUS(CCM_CCGR_ON) | CCM_CCGR0_GPT2_SERIAL(CCM_CCGR_ON);
    2472:	4c1c      	ldr	r4, [pc, #112]	; (24e4 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x7c>)
    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            isInitialized = true;
    2474:	2101      	movs	r1, #1
            if(USE_GPT_PIT_150MHz) // timer clock setting from config.h
                CCM_CSCMR1 &= ~CCM_CSCMR1_PERCLK_CLK_SEL; // 150MHz
            else
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock
    2476:	4d1c      	ldr	r5, [pc, #112]	; (24e8 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x80>)
    2478:	2242      	movs	r2, #66	; 0x42
    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            isInitialized = true;
    247a:	7019      	strb	r1, [r3, #0]

            if (moduleNr == 0) // GPT1 clock settings
                CCM_CCGR1 |= CCM_CCGR1_GPT1_BUS(CCM_CCGR_ON) | CCM_CCGR1_GPT1_SERIAL(CCM_CCGR_ON);
            else // GPT2
                CCM_CCGR0 |= CCM_CCGR0_GPT2_BUS(CCM_CCGR_ON) | CCM_CCGR0_GPT2_SERIAL(CCM_CCGR_ON);
    247c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    247e:	491b      	ldr	r1, [pc, #108]	; (24ec <TeensyTimerTool::GPT_t<1u>::getTimer()+0x84>)
    2480:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    2484:	481a      	ldr	r0, [pc, #104]	; (24f0 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x88>)
    2486:	66a3      	str	r3, [r4, #104]	; 0x68

            if(USE_GPT_PIT_150MHz) // timer clock setting from config.h
                CCM_CSCMR1 &= ~CCM_CSCMR1_PERCLK_CLK_SEL; // 150MHz
            else
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz
    2488:	69e3      	ldr	r3, [r4, #28]
    248a:	f8c1 01d4 	str.w	r0, [r1, #468]	; 0x1d4
    248e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2492:	61e3      	str	r3, [r4, #28]

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock
    2494:	602a      	str	r2, [r5, #0]

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);
    2496:	4b17      	ldr	r3, [pc, #92]	; (24f4 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x8c>)
    2498:	2220      	movs	r2, #32

            channel = new GptChannel(pGPT, &callback);
    249a:	2018      	movs	r0, #24
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);
    249c:	601a      	str	r2, [r3, #0]

            channel = new GptChannel(pGPT, &callback);
    249e:	f002 fb8b 	bl	4bb8 <operator new(unsigned int)>
    24a2:	69e2      	ldr	r2, [r4, #28]
    24a4:	4603      	mov	r3, r0
    };

    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    24a6:	4914      	ldr	r1, [pc, #80]	; (24f8 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x90>)
    24a8:	4814      	ldr	r0, [pc, #80]	; (24fc <TeensyTimerTool::GPT_t<1u>::getTimer()+0x94>)
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    24aa:	0652      	lsls	r2, r2, #25
    };

    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    24ac:	60dd      	str	r5, [r3, #12]
    24ae:	6058      	str	r0, [r3, #4]
    24b0:	6019      	str	r1, [r3, #0]
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    24b2:	d507      	bpl.n	24c4 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x5c>
    24b4:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    24b8:	4a11      	ldr	r2, [pc, #68]	; (2500 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x98>)
            return channel;
    24ba:	4618      	mov	r0, r3
    24bc:	edc3 7a05 	vstr	s15, [r3, #20]
            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);

            channel = new GptChannel(pGPT, &callback);
    24c0:	6013      	str	r3, [r2, #0]
            return channel;
    24c2:	bd38      	pop	{r3, r4, r5, pc}
    24c4:	4a0f      	ldr	r2, [pc, #60]	; (2504 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x9c>)
    24c6:	4910      	ldr	r1, [pc, #64]	; (2508 <TeensyTimerTool::GPT_t<1u>::getTimer()+0xa0>)
    24c8:	6812      	ldr	r2, [r2, #0]
    24ca:	fba1 1202 	umull	r1, r2, r1, r2
    24ce:	0c92      	lsrs	r2, r2, #18
    24d0:	ee07 2a90 	vmov	s15, r2
    24d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    24d8:	e7ee      	b.n	24b8 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x50>
        }
        return nullptr;
    24da:	2000      	movs	r0, #0
    }
    24dc:	bd38      	pop	{r3, r4, r5, pc}
    24de:	bf00      	nop
    24e0:	200017fc 	.word	0x200017fc
    24e4:	400fc000 	.word	0x400fc000
    24e8:	401f0000 	.word	0x401f0000
    24ec:	20002000 	.word	0x20002000
    24f0:	00002245 	.word	0x00002245
    24f4:	e000e10c 	.word	0xe000e10c
    24f8:	200001c0 	.word	0x200001c0
    24fc:	20001894 	.word	0x20001894
    2500:	200017f8 	.word	0x200017f8
    2504:	200006d4 	.word	0x200006d4
    2508:	431bde83 	.word	0x431bde83

0000250c <TeensyTimerTool::TMRChannel::~TMRChannel()>:
    {
        this->regs = regs;
        setPrescaler(TMR_DEFAULT_PSC);
    }

    TMRChannel::~TMRChannel()
    250c:	b510      	push	{r4, lr}
    250e:	4604      	mov	r4, r0
    {
    }
    2510:	2118      	movs	r1, #24
    2512:	f002 fb53 	bl	4bbc <operator delete(void*, unsigned int)>
    2516:	4620      	mov	r0, r4
    2518:	bd10      	pop	{r4, pc}
    251a:	bf00      	nop

0000251c <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()>:
    251c:	4a08      	ldr	r2, [pc, #32]	; (2540 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()+0x24>)

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    251e:	6903      	ldr	r3, [r0, #16]
    2520:	b510      	push	{r4, lr}
    2522:	4604      	mov	r4, r0
    2524:	6002      	str	r2, [r0, #0]
    2526:	b123      	cbz	r3, 2532 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2528:	f100 0108 	add.w	r1, r0, #8
    252c:	2203      	movs	r2, #3
    252e:	4608      	mov	r0, r1
    2530:	4798      	blx	r3
    2532:	4620      	mov	r0, r4
    2534:	2134      	movs	r1, #52	; 0x34
    2536:	f002 fb41 	bl	4bbc <operator delete(void*, unsigned int)>
    253a:	4620      	mov	r0, r4
    253c:	bd10      	pop	{r4, pc}
    253e:	bf00      	nop
    2540:	20000208 	.word	0x20000208

00002544 <TeensyTimerTool::ITimerChannel::setPrescaler(int)>:
        virtual errorCode getTriggerReload(float delay, uint64_t* reload) {return postError(errorCode::notImplemented);};

        virtual errorCode start() = 0;
        virtual errorCode stop() = 0;

        virtual errorCode setPrescaler(int  psc) { return postError(errorCode::notImplemented); }
    2544:	2069      	movs	r0, #105	; 0x69
    2546:	f000 be8d 	b.w	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    254a:	bf00      	nop

0000254c <TeensyTimerTool::ITimerChannel::getTriggerReload(float, unsigned long long*)>:
        virtual errorCode begin(callback_t callback, float period, bool oneShot) = 0;
        virtual errorCode trigger(float delay) = 0;
        virtual errorCode triggerDirect(uint32_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode triggerDirect(uint64_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode getTriggerReload(float delay, uint32_t* reload) {return postError(errorCode::notImplemented);};
        virtual errorCode getTriggerReload(float delay, uint64_t* reload) {return postError(errorCode::notImplemented);};
    254c:	2069      	movs	r0, #105	; 0x69
    254e:	f000 be89 	b.w	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    2552:	bf00      	nop

00002554 <TeensyTimerTool::ITimerChannel::getTriggerReload(float, unsigned long*)>:
     public:
        virtual errorCode begin(callback_t callback, float period, bool oneShot) = 0;
        virtual errorCode trigger(float delay) = 0;
        virtual errorCode triggerDirect(uint32_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode triggerDirect(uint64_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode getTriggerReload(float delay, uint32_t* reload) {return postError(errorCode::notImplemented);};
    2554:	2069      	movs	r0, #105	; 0x69
    2556:	f000 be85 	b.w	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    255a:	bf00      	nop

0000255c <TeensyTimerTool::ITimerChannel::triggerDirect(unsigned long long)>:
    {
     public:
        virtual errorCode begin(callback_t callback, float period, bool oneShot) = 0;
        virtual errorCode trigger(float delay) = 0;
        virtual errorCode triggerDirect(uint32_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode triggerDirect(uint64_t reload){ return postError(errorCode::notImplemented); };
    255c:	2069      	movs	r0, #105	; 0x69
    255e:	f000 be81 	b.w	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    2562:	bf00      	nop

00002564 <TeensyTimerTool::ITimerChannel::triggerDirect(unsigned long)>:
    class ITimerChannel
    {
     public:
        virtual errorCode begin(callback_t callback, float period, bool oneShot) = 0;
        virtual errorCode trigger(float delay) = 0;
        virtual errorCode triggerDirect(uint32_t reload){ return postError(errorCode::notImplemented); };
    2564:	2069      	movs	r0, #105	; 0x69
    2566:	f000 be7d 	b.w	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    256a:	bf00      	nop

0000256c <TeensyTimerTool::ITimerChannel::setNextPeriod(unsigned long)>:
        virtual errorCode setPrescaler(int  psc) { return postError(errorCode::notImplemented); }

        virtual float getMaxPeriod() const = 0;
        virtual errorCode setPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setCurrentPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setNextPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
    256c:	2069      	movs	r0, #105	; 0x69
    256e:	f000 be79 	b.w	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    2572:	bf00      	nop

00002574 <TeensyTimerTool::ITimerChannel::setCurrentPeriod(unsigned long)>:

        virtual errorCode setPrescaler(int  psc) { return postError(errorCode::notImplemented); }

        virtual float getMaxPeriod() const = 0;
        virtual errorCode setPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setCurrentPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
    2574:	2069      	movs	r0, #105	; 0x69
    2576:	f000 be75 	b.w	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    257a:	bf00      	nop

0000257c <TeensyTimerTool::ITimerChannel::setPeriod(unsigned long)>:
        virtual errorCode stop() = 0;

        virtual errorCode setPrescaler(int  psc) { return postError(errorCode::notImplemented); }

        virtual float getMaxPeriod() const = 0;
        virtual errorCode setPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
    257c:	2069      	movs	r0, #105	; 0x69
    257e:	f000 be71 	b.w	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    2582:	bf00      	nop

00002584 <TeensyTimerTool::TckChannel<unsigned long>::getTriggerReload(float, unsigned long*)>:
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    2584:	ed9f 7a10 	vldr	s14, [pc, #64]	; 25c8 <TeensyTimerTool::TckChannel<unsigned long>::getTriggerReload(float, unsigned long*)+0x44>
    2588:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        inline errorCode start() override;
        inline errorCode stop() override;

        inline errorCode trigger(float delay_us) override;
        inline errorCode triggerDirect(CounterType reload) override;
        inline errorCode getTriggerReload(float delay, CounterType* reload) override
    258c:	b538      	push	{r3, r4, r5, lr}
    258e:	ed2d 8b02 	vpush	{d8}
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    2592:	ee87 8a27 	vdiv.f32	s16, s14, s15
        inline errorCode start() override;
        inline errorCode stop() override;

        inline errorCode trigger(float delay_us) override;
        inline errorCode triggerDirect(CounterType reload) override;
        inline errorCode getTriggerReload(float delay, CounterType* reload) override
    2596:	460d      	mov	r5, r1
    }

    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
    2598:	eeb4 0ac8 	vcmpe.f32	s0, s16
    259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    25a0:	dd08      	ble.n	25b4 <TeensyTimerTool::TckChannel<unsigned long>::getTriggerReload(float, unsigned long*)+0x30>
    25a2:	4604      	mov	r4, r0
        {
            microSecond = getMaxMicros();
            postError(errorCode::periodOverflow);
    25a4:	f06f 0063 	mvn.w	r0, #99	; 0x63
    25a8:	f000 fe5c 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
        {
            microSecond = getMaxMicros();
    25ac:	eeb0 0a48 	vmov.f32	s0, s16
    25b0:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30

        inline errorCode trigger(float delay_us) override;
        inline errorCode triggerDirect(CounterType reload) override;
        inline errorCode getTriggerReload(float delay, CounterType* reload) override
        {
            *reload = microsecondToCycles(delay);
    25b4:	ee20 0a27 	vmul.f32	s0, s0, s15
            return errorCode::OK;
        }
    25b8:	2000      	movs	r0, #0
    25ba:	ecbd 8b02 	vpop	{d8}

        inline errorCode trigger(float delay_us) override;
        inline errorCode triggerDirect(CounterType reload) override;
        inline errorCode getTriggerReload(float delay, CounterType* reload) override
        {
            *reload = microsecondToCycles(delay);
    25be:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    25c2:	ed85 0a00 	vstr	s0, [r5]
            return errorCode::OK;
        }
    25c6:	bd38      	pop	{r3, r4, r5, pc}
    25c8:	4f700000 	.word	0x4f700000

000025cc <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()>:
    };

    // IMPLEMENTATION ==================================================================

    template<typename counterType>
    ITimerChannel* TCK_t::getTimer()
    25cc:	b570      	push	{r4, r5, r6, lr}
    {
        if (!isInitialized)
    25ce:	4c16      	ldr	r4, [pc, #88]	; (2628 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x5c>)
    25d0:	7821      	ldrb	r1, [r4, #0]
    25d2:	b989      	cbnz	r1, 25f8 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x2c>
    25d4:	2250      	movs	r2, #80	; 0x50
    25d6:	4815      	ldr	r0, [pc, #84]	; (262c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x60>)
    25d8:	f003 f9b4 	bl	5944 <memset>
        {
            for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
            {
                channels[chNr] = nullptr;
            }
            isInitialized = true;
    25dc:	2301      	movs	r3, #1

            // enable the cycle counter
            ARM_DEMCR |= ARM_DEMCR_TRCENA;
    25de:	4914      	ldr	r1, [pc, #80]	; (2630 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x64>)
        {
            for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
            {
                channels[chNr] = nullptr;
            }
            isInitialized = true;
    25e0:	7023      	strb	r3, [r4, #0]

            // enable the cycle counter
            ARM_DEMCR |= ARM_DEMCR_TRCENA;
    25e2:	680b      	ldr	r3, [r1, #0]
            ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    25e4:	4a13      	ldr	r2, [pc, #76]	; (2634 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x68>)
                channels[chNr] = nullptr;
            }
            isInitialized = true;

            // enable the cycle counter
            ARM_DEMCR |= ARM_DEMCR_TRCENA;
    25e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    25ea:	600b      	str	r3, [r1, #0]
            ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    25ec:	6813      	ldr	r3, [r2, #0]
    25ee:	f043 0301 	orr.w	r3, r3, #1
    25f2:	6013      	str	r3, [r2, #0]

            // initialize the yield hook
           #if defined(TEENSYDUINO) && YIELD_TYPE == YIELD_STANDARD
              extern void initYieldHook();
              initYieldHook();
    25f4:	f001 f818 	bl	3628 <TeensyTimerTool::initYieldHook()>
    25f8:	4b0f      	ldr	r3, [pc, #60]	; (2638 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x6c>)
           #endif
        }

        for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
    25fa:	2400      	movs	r4, #0
        {
            if (channels[chNr] == nullptr)
    25fc:	f853 5f04 	ldr.w	r5, [r3, #4]!
    2600:	b125      	cbz	r5, 260c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x40>
              extern void initYieldHook();
              initYieldHook();
           #endif
        }

        for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
    2602:	3401      	adds	r4, #1
    2604:	2c14      	cmp	r4, #20
    2606:	d1f9      	bne.n	25fc <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x30>
                channels[chNr] = new TckChannel<counterType>();
                return channels[chNr];
            }
        }

        return nullptr;
    2608:	2000      	movs	r0, #0
    }
    260a:	bd70      	pop	{r4, r5, r6, pc}

        for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
        {
            if (channels[chNr] == nullptr)
            {
                channels[chNr] = new TckChannel<counterType>();
    260c:	2034      	movs	r0, #52	; 0x34
    };

    // IMPLEMENTATION ==============================================

    template <typename T>
    TckChannel<T>::TckChannel()
    260e:	4e0b      	ldr	r6, [pc, #44]	; (263c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x70>)
    2610:	f002 fad2 	bl	4bb8 <operator new(unsigned int)>
    {
        triggered = false;
        clock = F_CPU / 1'000'000.0f;
    2614:	490a      	ldr	r1, [pc, #40]	; (2640 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x74>)
    2616:	4a05      	ldr	r2, [pc, #20]	; (262c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x60>)

    // IMPLEMENTATION ====================================================

    ITimerChannel::ITimerChannel(callback_t* cbStorage)
    {
        this->pCallback = cbStorage;
    2618:	6045      	str	r5, [r0, #4]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    261a:	6105      	str	r5, [r0, #16]
    // IMPLEMENTATION ==============================================

    template <typename T>
    TckChannel<T>::TckChannel()
    {
        triggered = false;
    261c:	7645      	strb	r5, [r0, #25]
    };

    // IMPLEMENTATION ==============================================

    template <typename T>
    TckChannel<T>::TckChannel()
    261e:	6006      	str	r6, [r0, #0]
    {
        triggered = false;
        clock = F_CPU / 1'000'000.0f;
    2620:	6301      	str	r1, [r0, #48]	; 0x30
    2622:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
                return channels[chNr];
    2626:	bd70      	pop	{r4, r5, r6, pc}
    2628:	20001aa4 	.word	0x20001aa4
    262c:	20001a54 	.word	0x20001a54
    2630:	e000edfc 	.word	0xe000edfc
    2634:	e0001000 	.word	0xe0001000
    2638:	20001a50 	.word	0x20001a50
    263c:	20000208 	.word	0x20000208
    2640:	44160000 	.word	0x44160000

00002644 <TeensyTimerTool::TMR_t<0u>::getTimer()>:
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];

    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    2644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        if (!isInitialized)
    2648:	4e33      	ldr	r6, [pc, #204]	; (2718 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xd4>)
    264a:	7835      	ldrb	r5, [r6, #0]
    264c:	2d00      	cmp	r5, #0
    264e:	d131      	bne.n	26b4 <TeensyTimerTool::TMR_t<0u>::getTimer()+0x70>
    2650:	4f32      	ldr	r7, [pc, #200]	; (271c <TeensyTimerTool::TMR_t<0u>::getTimer()+0xd8>)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
            {
                pTMR->CH[chNr].CTRL = 0x0000;
    2652:	46a8      	mov	r8, r5
    2654:	463c      	mov	r4, r7
    2656:	016a      	lsls	r2, r5, #5
    2658:	4b31      	ldr	r3, [pc, #196]	; (2720 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xdc>)
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    265a:	4621      	mov	r1, r4
    265c:	3501      	adds	r5, #1
    265e:	4413      	add	r3, r2
    2660:	4620      	mov	r0, r4
    2662:	2203      	movs	r2, #3
    2664:	f8a3 800c 	strh.w	r8, [r3, #12]
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    2668:	68a3      	ldr	r3, [r4, #8]
    266a:	b123      	cbz	r3, 2676 <TeensyTimerTool::TMR_t<0u>::getTimer()+0x32>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    266c:	4798      	blx	r3
	    _M_manager = nullptr;
    266e:	f8c4 8008 	str.w	r8, [r4, #8]
	    _M_invoker = nullptr;
    2672:	f8c4 800c 	str.w	r8, [r4, #12]
    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
    2676:	2d04      	cmp	r5, #4
    2678:	f104 0410 	add.w	r4, r4, #16
    267c:	d1eb      	bne.n	2656 <TeensyTimerTool::TMR_t<0u>::getTimer()+0x12>
    267e:	4b29      	ldr	r3, [pc, #164]	; (2724 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xe0>)
    2680:	4a29      	ldr	r2, [pc, #164]	; (2728 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xe4>)
    2682:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    2686:	4a29      	ldr	r2, [pc, #164]	; (272c <TeensyTimerTool::TMR_t<0u>::getTimer()+0xe8>)
    2688:	2120      	movs	r1, #32
            isInitialized = true;
    268a:	2301      	movs	r3, #1
            return new TMRChannel(pCH0, &callbacks[0]);
    268c:	2018      	movs	r0, #24
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    268e:	6011      	str	r1, [r2, #0]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    2690:	2500      	movs	r5, #0
            isInitialized = true;
    2692:	7033      	strb	r3, [r6, #0]
            return new TMRChannel(pCH0, &callbacks[0]);
    2694:	f002 fa90 	bl	4bb8 <operator new(unsigned int)>
    2698:	4925      	ldr	r1, [pc, #148]	; (2730 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xec>)
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
        pscBits = 0b1000 | (psc & 0b0111);
    269a:	220f      	movs	r2, #15
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    269c:	4e25      	ldr	r6, [pc, #148]	; (2734 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xf0>)
    269e:	680c      	ldr	r4, [r1, #0]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    26a0:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    26a4:	60c5      	str	r5, [r0, #12]
    {
        this->regs = regs;
    26a6:	6084      	str	r4, [r0, #8]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    26a8:	6101      	str	r1, [r0, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    26aa:	6142      	str	r2, [r0, #20]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    26ac:	e880 00c0 	stmia.w	r0, {r6, r7}
    26b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    26b4:	4b1a      	ldr	r3, [pc, #104]	; (2720 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xdc>)
    26b6:	899a      	ldrh	r2, [r3, #12]
    26b8:	b292      	uxth	r2, r2
    26ba:	b16a      	cbz	r2, 26d8 <TeensyTimerTool::TMR_t<0u>::getTimer()+0x94>
    26bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    26be:	b292      	uxth	r2, r2
    26c0:	b31a      	cbz	r2, 270a <TeensyTimerTool::TMR_t<0u>::getTimer()+0xc6>
    26c2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    26c6:	b292      	uxth	r2, r2
    26c8:	b30a      	cbz	r2, 270e <TeensyTimerTool::TMR_t<0u>::getTimer()+0xca>
    26ca:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    26ce:	b29b      	uxth	r3, r3
    26d0:	b1fb      	cbz	r3, 2712 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xce>
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
            }
        }
        return nullptr;
    26d2:	2000      	movs	r0, #0
    }
    26d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    26d8:	4614      	mov	r4, r2
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    26da:	2018      	movs	r0, #24
    26dc:	2600      	movs	r6, #0
    26de:	f002 fa6b 	bl	4bb8 <operator new(unsigned int)>
    26e2:	4a0e      	ldr	r2, [pc, #56]	; (271c <TeensyTimerTool::TMR_t<0u>::getTimer()+0xd8>)
    26e4:	4603      	mov	r3, r0
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    26e6:	490e      	ldr	r1, [pc, #56]	; (2720 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xdc>)
    26e8:	0160      	lsls	r0, r4, #5
    26ea:	4f12      	ldr	r7, [pc, #72]	; (2734 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xf0>)
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    26ec:	eb02 1204 	add.w	r2, r2, r4, lsl #4
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    26f0:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    26f4:	4401      	add	r1, r0
        pscBits = 0b1000 | (psc & 0b0111);
    26f6:	240f      	movs	r4, #15
    26f8:	605a      	str	r2, [r3, #4]
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    26fa:	4618      	mov	r0, r3
    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    {
        this->regs = regs;
    26fc:	6099      	str	r1, [r3, #8]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    26fe:	601f      	str	r7, [r3, #0]
    2700:	60de      	str	r6, [r3, #12]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    2702:	611d      	str	r5, [r3, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    2704:	615c      	str	r4, [r3, #20]
    2706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NVIC_ENABLE_IRQ(irq);
            isInitialized = true;
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
    270a:	2401      	movs	r4, #1
    270c:	e7e5      	b.n	26da <TeensyTimerTool::TMR_t<0u>::getTimer()+0x96>
    270e:	2402      	movs	r4, #2
    2710:	e7e3      	b.n	26da <TeensyTimerTool::TMR_t<0u>::getTimer()+0x96>
    2712:	2403      	movs	r4, #3
    2714:	e7e1      	b.n	26da <TeensyTimerTool::TMR_t<0u>::getTimer()+0x96>
    2716:	bf00      	nop
    2718:	20001808 	.word	0x20001808
    271c:	20001984 	.word	0x20001984
    2720:	401dc000 	.word	0x401dc000
    2724:	20002000 	.word	0x20002000
    2728:	00001f5d 	.word	0x00001f5d
    272c:	e000e110 	.word	0xe000e110
    2730:	20001980 	.word	0x20001980
    2734:	20000178 	.word	0x20000178

00002738 <TeensyTimerTool::TMR_t<1u>::getTimer()>:
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];

    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    2738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        if (!isInitialized)
    273c:	4e33      	ldr	r6, [pc, #204]	; (280c <TeensyTimerTool::TMR_t<1u>::getTimer()+0xd4>)
    273e:	7835      	ldrb	r5, [r6, #0]
    2740:	2d00      	cmp	r5, #0
    2742:	d131      	bne.n	27a8 <TeensyTimerTool::TMR_t<1u>::getTimer()+0x70>
    2744:	4f32      	ldr	r7, [pc, #200]	; (2810 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xd8>)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
            {
                pTMR->CH[chNr].CTRL = 0x0000;
    2746:	46a8      	mov	r8, r5
    2748:	463c      	mov	r4, r7
    274a:	016a      	lsls	r2, r5, #5
    274c:	4b31      	ldr	r3, [pc, #196]	; (2814 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xdc>)
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    274e:	4621      	mov	r1, r4
    2750:	3501      	adds	r5, #1
    2752:	4413      	add	r3, r2
    2754:	4620      	mov	r0, r4
    2756:	2203      	movs	r2, #3
    2758:	f8a3 800c 	strh.w	r8, [r3, #12]
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    275c:	68a3      	ldr	r3, [r4, #8]
    275e:	b123      	cbz	r3, 276a <TeensyTimerTool::TMR_t<1u>::getTimer()+0x32>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    2760:	4798      	blx	r3
	    _M_manager = nullptr;
    2762:	f8c4 8008 	str.w	r8, [r4, #8]
	    _M_invoker = nullptr;
    2766:	f8c4 800c 	str.w	r8, [r4, #12]
    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
    276a:	2d04      	cmp	r5, #4
    276c:	f104 0410 	add.w	r4, r4, #16
    2770:	d1eb      	bne.n	274a <TeensyTimerTool::TMR_t<1u>::getTimer()+0x12>
    2772:	4b29      	ldr	r3, [pc, #164]	; (2818 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xe0>)
    2774:	4a29      	ldr	r2, [pc, #164]	; (281c <TeensyTimerTool::TMR_t<1u>::getTimer()+0xe4>)
    2776:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    277a:	4a29      	ldr	r2, [pc, #164]	; (2820 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xe8>)
    277c:	2140      	movs	r1, #64	; 0x40
            isInitialized = true;
    277e:	2301      	movs	r3, #1
            return new TMRChannel(pCH0, &callbacks[0]);
    2780:	2018      	movs	r0, #24
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    2782:	6011      	str	r1, [r2, #0]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    2784:	2500      	movs	r5, #0
            isInitialized = true;
    2786:	7033      	strb	r3, [r6, #0]
            return new TMRChannel(pCH0, &callbacks[0]);
    2788:	f002 fa16 	bl	4bb8 <operator new(unsigned int)>
    278c:	4925      	ldr	r1, [pc, #148]	; (2824 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xec>)
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
        pscBits = 0b1000 | (psc & 0b0111);
    278e:	220f      	movs	r2, #15
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    2790:	4e25      	ldr	r6, [pc, #148]	; (2828 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xf0>)
    2792:	680c      	ldr	r4, [r1, #0]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    2794:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    2798:	60c5      	str	r5, [r0, #12]
    {
        this->regs = regs;
    279a:	6084      	str	r4, [r0, #8]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    279c:	6101      	str	r1, [r0, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    279e:	6142      	str	r2, [r0, #20]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    27a0:	e880 00c0 	stmia.w	r0, {r6, r7}
    27a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    27a8:	4b1a      	ldr	r3, [pc, #104]	; (2814 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xdc>)
    27aa:	899a      	ldrh	r2, [r3, #12]
    27ac:	b292      	uxth	r2, r2
    27ae:	b16a      	cbz	r2, 27cc <TeensyTimerTool::TMR_t<1u>::getTimer()+0x94>
    27b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    27b2:	b292      	uxth	r2, r2
    27b4:	b31a      	cbz	r2, 27fe <TeensyTimerTool::TMR_t<1u>::getTimer()+0xc6>
    27b6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    27ba:	b292      	uxth	r2, r2
    27bc:	b30a      	cbz	r2, 2802 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xca>
    27be:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    27c2:	b29b      	uxth	r3, r3
    27c4:	b1fb      	cbz	r3, 2806 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xce>
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
            }
        }
        return nullptr;
    27c6:	2000      	movs	r0, #0
    }
    27c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    27cc:	4614      	mov	r4, r2
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    27ce:	2018      	movs	r0, #24
    27d0:	2600      	movs	r6, #0
    27d2:	f002 f9f1 	bl	4bb8 <operator new(unsigned int)>
    27d6:	4a0e      	ldr	r2, [pc, #56]	; (2810 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xd8>)
    27d8:	4603      	mov	r3, r0
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    27da:	490e      	ldr	r1, [pc, #56]	; (2814 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xdc>)
    27dc:	0160      	lsls	r0, r4, #5
    27de:	4f12      	ldr	r7, [pc, #72]	; (2828 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xf0>)
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    27e0:	eb02 1204 	add.w	r2, r2, r4, lsl #4
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    27e4:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    27e8:	4401      	add	r1, r0
        pscBits = 0b1000 | (psc & 0b0111);
    27ea:	240f      	movs	r4, #15
    27ec:	605a      	str	r2, [r3, #4]
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    27ee:	4618      	mov	r0, r3
    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    {
        this->regs = regs;
    27f0:	6099      	str	r1, [r3, #8]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    27f2:	601f      	str	r7, [r3, #0]
    27f4:	60de      	str	r6, [r3, #12]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    27f6:	611d      	str	r5, [r3, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    27f8:	615c      	str	r4, [r3, #20]
    27fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NVIC_ENABLE_IRQ(irq);
            isInitialized = true;
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
    27fe:	2401      	movs	r4, #1
    2800:	e7e5      	b.n	27ce <TeensyTimerTool::TMR_t<1u>::getTimer()+0x96>
    2802:	2402      	movs	r4, #2
    2804:	e7e3      	b.n	27ce <TeensyTimerTool::TMR_t<1u>::getTimer()+0x96>
    2806:	2403      	movs	r4, #3
    2808:	e7e1      	b.n	27ce <TeensyTimerTool::TMR_t<1u>::getTimer()+0x96>
    280a:	bf00      	nop
    280c:	20001807 	.word	0x20001807
    2810:	20001940 	.word	0x20001940
    2814:	401e0000 	.word	0x401e0000
    2818:	20002000 	.word	0x20002000
    281c:	00002009 	.word	0x00002009
    2820:	e000e110 	.word	0xe000e110
    2824:	2000193c 	.word	0x2000193c
    2828:	20000178 	.word	0x20000178

0000282c <TeensyTimerTool::TMR_t<2u>::getTimer()>:
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];

    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    282c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        if (!isInitialized)
    2830:	4e33      	ldr	r6, [pc, #204]	; (2900 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xd4>)
    2832:	7835      	ldrb	r5, [r6, #0]
    2834:	2d00      	cmp	r5, #0
    2836:	d131      	bne.n	289c <TeensyTimerTool::TMR_t<2u>::getTimer()+0x70>
    2838:	4f32      	ldr	r7, [pc, #200]	; (2904 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xd8>)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
            {
                pTMR->CH[chNr].CTRL = 0x0000;
    283a:	46a8      	mov	r8, r5
    283c:	463c      	mov	r4, r7
    283e:	016a      	lsls	r2, r5, #5
    2840:	4b31      	ldr	r3, [pc, #196]	; (2908 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xdc>)
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    2842:	4621      	mov	r1, r4
    2844:	3501      	adds	r5, #1
    2846:	4413      	add	r3, r2
    2848:	4620      	mov	r0, r4
    284a:	2203      	movs	r2, #3
    284c:	f8a3 800c 	strh.w	r8, [r3, #12]
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    2850:	68a3      	ldr	r3, [r4, #8]
    2852:	b123      	cbz	r3, 285e <TeensyTimerTool::TMR_t<2u>::getTimer()+0x32>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    2854:	4798      	blx	r3
	    _M_manager = nullptr;
    2856:	f8c4 8008 	str.w	r8, [r4, #8]
	    _M_invoker = nullptr;
    285a:	f8c4 800c 	str.w	r8, [r4, #12]
    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
    285e:	2d04      	cmp	r5, #4
    2860:	f104 0410 	add.w	r4, r4, #16
    2864:	d1eb      	bne.n	283e <TeensyTimerTool::TMR_t<2u>::getTimer()+0x12>
    2866:	4b29      	ldr	r3, [pc, #164]	; (290c <TeensyTimerTool::TMR_t<2u>::getTimer()+0xe0>)
    2868:	4a29      	ldr	r2, [pc, #164]	; (2910 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xe4>)
    286a:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    286e:	4a29      	ldr	r2, [pc, #164]	; (2914 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xe8>)
    2870:	2180      	movs	r1, #128	; 0x80
            isInitialized = true;
    2872:	2301      	movs	r3, #1
            return new TMRChannel(pCH0, &callbacks[0]);
    2874:	2018      	movs	r0, #24
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    2876:	6011      	str	r1, [r2, #0]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    2878:	2500      	movs	r5, #0
            isInitialized = true;
    287a:	7033      	strb	r3, [r6, #0]
            return new TMRChannel(pCH0, &callbacks[0]);
    287c:	f002 f99c 	bl	4bb8 <operator new(unsigned int)>
    2880:	4925      	ldr	r1, [pc, #148]	; (2918 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xec>)
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
        pscBits = 0b1000 | (psc & 0b0111);
    2882:	220f      	movs	r2, #15
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    2884:	4e25      	ldr	r6, [pc, #148]	; (291c <TeensyTimerTool::TMR_t<2u>::getTimer()+0xf0>)
    2886:	680c      	ldr	r4, [r1, #0]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    2888:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    288c:	60c5      	str	r5, [r0, #12]
    {
        this->regs = regs;
    288e:	6084      	str	r4, [r0, #8]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    2890:	6101      	str	r1, [r0, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    2892:	6142      	str	r2, [r0, #20]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    2894:	e880 00c0 	stmia.w	r0, {r6, r7}
    2898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    289c:	4b1a      	ldr	r3, [pc, #104]	; (2908 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xdc>)
    289e:	899a      	ldrh	r2, [r3, #12]
    28a0:	b292      	uxth	r2, r2
    28a2:	b16a      	cbz	r2, 28c0 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x94>
    28a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    28a6:	b292      	uxth	r2, r2
    28a8:	b31a      	cbz	r2, 28f2 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xc6>
    28aa:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    28ae:	b292      	uxth	r2, r2
    28b0:	b30a      	cbz	r2, 28f6 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xca>
    28b2:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    28b6:	b29b      	uxth	r3, r3
    28b8:	b1fb      	cbz	r3, 28fa <TeensyTimerTool::TMR_t<2u>::getTimer()+0xce>
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
            }
        }
        return nullptr;
    28ba:	2000      	movs	r0, #0
    }
    28bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    28c0:	4614      	mov	r4, r2
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    28c2:	2018      	movs	r0, #24
    28c4:	2600      	movs	r6, #0
    28c6:	f002 f977 	bl	4bb8 <operator new(unsigned int)>
    28ca:	4a0e      	ldr	r2, [pc, #56]	; (2904 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xd8>)
    28cc:	4603      	mov	r3, r0
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    28ce:	490e      	ldr	r1, [pc, #56]	; (2908 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xdc>)
    28d0:	0160      	lsls	r0, r4, #5
    28d2:	4f12      	ldr	r7, [pc, #72]	; (291c <TeensyTimerTool::TMR_t<2u>::getTimer()+0xf0>)
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    28d4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    28d8:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    28dc:	4401      	add	r1, r0
        pscBits = 0b1000 | (psc & 0b0111);
    28de:	240f      	movs	r4, #15
    28e0:	605a      	str	r2, [r3, #4]
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    28e2:	4618      	mov	r0, r3
    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    {
        this->regs = regs;
    28e4:	6099      	str	r1, [r3, #8]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    28e6:	601f      	str	r7, [r3, #0]
    28e8:	60de      	str	r6, [r3, #12]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    28ea:	611d      	str	r5, [r3, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    28ec:	615c      	str	r4, [r3, #20]
    28ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NVIC_ENABLE_IRQ(irq);
            isInitialized = true;
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
    28f2:	2401      	movs	r4, #1
    28f4:	e7e5      	b.n	28c2 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x96>
    28f6:	2402      	movs	r4, #2
    28f8:	e7e3      	b.n	28c2 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x96>
    28fa:	2403      	movs	r4, #3
    28fc:	e7e1      	b.n	28c2 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x96>
    28fe:	bf00      	nop
    2900:	20001806 	.word	0x20001806
    2904:	200018fc 	.word	0x200018fc
    2908:	401e4000 	.word	0x401e4000
    290c:	20002000 	.word	0x20002000
    2910:	000020b5 	.word	0x000020b5
    2914:	e000e110 	.word	0xe000e110
    2918:	200018f8 	.word	0x200018f8
    291c:	20000178 	.word	0x20000178

00002920 <TeensyTimerTool::TMR_t<3u>::getTimer()>:
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];

    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    2920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        if (!isInitialized)
    2924:	4e33      	ldr	r6, [pc, #204]	; (29f4 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xd4>)
    2926:	7835      	ldrb	r5, [r6, #0]
    2928:	2d00      	cmp	r5, #0
    292a:	d132      	bne.n	2992 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x72>
    292c:	4f32      	ldr	r7, [pc, #200]	; (29f8 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xd8>)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
            {
                pTMR->CH[chNr].CTRL = 0x0000;
    292e:	46a8      	mov	r8, r5
    2930:	463c      	mov	r4, r7
    2932:	016a      	lsls	r2, r5, #5
    2934:	4b31      	ldr	r3, [pc, #196]	; (29fc <TeensyTimerTool::TMR_t<3u>::getTimer()+0xdc>)
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    2936:	4621      	mov	r1, r4
    2938:	3501      	adds	r5, #1
    293a:	4413      	add	r3, r2
    293c:	4620      	mov	r0, r4
    293e:	2203      	movs	r2, #3
    2940:	f8a3 800c 	strh.w	r8, [r3, #12]
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    2944:	68a3      	ldr	r3, [r4, #8]
    2946:	b123      	cbz	r3, 2952 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x32>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    2948:	4798      	blx	r3
	    _M_manager = nullptr;
    294a:	f8c4 8008 	str.w	r8, [r4, #8]
	    _M_invoker = nullptr;
    294e:	f8c4 800c 	str.w	r8, [r4, #12]
    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
    2952:	2d04      	cmp	r5, #4
    2954:	f104 0410 	add.w	r4, r4, #16
    2958:	d1eb      	bne.n	2932 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x12>
    295a:	4b29      	ldr	r3, [pc, #164]	; (2a00 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xe0>)
    295c:	4a29      	ldr	r2, [pc, #164]	; (2a04 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xe4>)
    295e:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    2962:	4a29      	ldr	r2, [pc, #164]	; (2a08 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xe8>)
    2964:	f44f 7180 	mov.w	r1, #256	; 0x100
            isInitialized = true;
    2968:	2301      	movs	r3, #1
            return new TMRChannel(pCH0, &callbacks[0]);
    296a:	2018      	movs	r0, #24
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    296c:	6011      	str	r1, [r2, #0]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    296e:	2500      	movs	r5, #0
            isInitialized = true;
    2970:	7033      	strb	r3, [r6, #0]
            return new TMRChannel(pCH0, &callbacks[0]);
    2972:	f002 f921 	bl	4bb8 <operator new(unsigned int)>
    2976:	4925      	ldr	r1, [pc, #148]	; (2a0c <TeensyTimerTool::TMR_t<3u>::getTimer()+0xec>)
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
        pscBits = 0b1000 | (psc & 0b0111);
    2978:	220f      	movs	r2, #15
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    297a:	4e25      	ldr	r6, [pc, #148]	; (2a10 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xf0>)
    297c:	680c      	ldr	r4, [r1, #0]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    297e:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    2982:	60c5      	str	r5, [r0, #12]
    {
        this->regs = regs;
    2984:	6084      	str	r4, [r0, #8]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    2986:	6101      	str	r1, [r0, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    2988:	6142      	str	r2, [r0, #20]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    298a:	e880 00c0 	stmia.w	r0, {r6, r7}
    298e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    2992:	4b1a      	ldr	r3, [pc, #104]	; (29fc <TeensyTimerTool::TMR_t<3u>::getTimer()+0xdc>)
    2994:	899a      	ldrh	r2, [r3, #12]
    2996:	b292      	uxth	r2, r2
    2998:	b16a      	cbz	r2, 29b6 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x96>
    299a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    299c:	b292      	uxth	r2, r2
    299e:	b31a      	cbz	r2, 29e8 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xc8>
    29a0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    29a4:	b292      	uxth	r2, r2
    29a6:	b30a      	cbz	r2, 29ec <TeensyTimerTool::TMR_t<3u>::getTimer()+0xcc>
    29a8:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    29ac:	b29b      	uxth	r3, r3
    29ae:	b1fb      	cbz	r3, 29f0 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xd0>
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
            }
        }
        return nullptr;
    29b0:	2000      	movs	r0, #0
    }
    29b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    29b6:	4614      	mov	r4, r2
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    29b8:	2018      	movs	r0, #24
    29ba:	2600      	movs	r6, #0
    29bc:	f002 f8fc 	bl	4bb8 <operator new(unsigned int)>
    29c0:	4a0d      	ldr	r2, [pc, #52]	; (29f8 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xd8>)
    29c2:	4603      	mov	r3, r0
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    29c4:	490d      	ldr	r1, [pc, #52]	; (29fc <TeensyTimerTool::TMR_t<3u>::getTimer()+0xdc>)
    29c6:	0160      	lsls	r0, r4, #5
    29c8:	4f11      	ldr	r7, [pc, #68]	; (2a10 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xf0>)
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    29ca:	eb02 1204 	add.w	r2, r2, r4, lsl #4
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    29ce:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    29d2:	4401      	add	r1, r0
        pscBits = 0b1000 | (psc & 0b0111);
    29d4:	240f      	movs	r4, #15
    29d6:	605a      	str	r2, [r3, #4]
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    29d8:	4618      	mov	r0, r3
    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    {
        this->regs = regs;
    29da:	6099      	str	r1, [r3, #8]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    29dc:	601f      	str	r7, [r3, #0]
    29de:	60de      	str	r6, [r3, #12]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    29e0:	611d      	str	r5, [r3, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    29e2:	615c      	str	r4, [r3, #20]
    29e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NVIC_ENABLE_IRQ(irq);
            isInitialized = true;
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
    29e8:	2401      	movs	r4, #1
    29ea:	e7e5      	b.n	29b8 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x98>
    29ec:	2402      	movs	r4, #2
    29ee:	e7e3      	b.n	29b8 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x98>
    29f0:	2403      	movs	r4, #3
    29f2:	e7e1      	b.n	29b8 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x98>
    29f4:	20001805 	.word	0x20001805
    29f8:	200018b8 	.word	0x200018b8
    29fc:	401e8000 	.word	0x401e8000
    2a00:	20002000 	.word	0x20002000
    2a04:	00002161 	.word	0x00002161
    2a08:	e000e110 	.word	0xe000e110
    2a0c:	200018b4 	.word	0x200018b4
    2a10:	20000178 	.word	0x20000178

00002a14 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)>:
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    2a14:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 2a80 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x6c>
    2a18:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    2a1c:	6803      	ldr	r3, [r0, #0]
        this->triggered = true;
        return errorCode::OK;
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    2a1e:	b570      	push	{r4, r5, r6, lr}
    2a20:	ed2d 8b02 	vpush	{d8}
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    2a24:	ee87 8a27 	vdiv.f32	s16, s14, s15
        this->triggered = true;
        return errorCode::OK;
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    2a28:	4604      	mov	r4, r0
    {
        return triggerDirect(microsecondToCycles(delay));
    2a2a:	689d      	ldr	r5, [r3, #8]
    }

    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
    2a2c:	eeb4 0ac8 	vcmpe.f32	s0, s16
    2a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a34:	dd07      	ble.n	2a46 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x32>
        {
            microSecond = getMaxMicros();
            postError(errorCode::periodOverflow);
    2a36:	f06f 0063 	mvn.w	r0, #99	; 0x63
    2a3a:	f000 fc13 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
        {
            microSecond = getMaxMicros();
    2a3e:	eeb0 0a48 	vmov.f32	s0, s16
    2a42:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            postError(errorCode::periodOverflow);
        }
        return (CounterType)(microSecond * clock);
    2a46:	ee20 0a27 	vmul.f32	s0, s0, s15
    2a4a:	4b0e      	ldr	r3, [pc, #56]	; (2a84 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x70>)
    2a4c:	429d      	cmp	r5, r3
    2a4e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    2a52:	ee17 1a90 	vmov	r1, s15
    2a56:	d10c      	bne.n	2a72 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x5e>
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    2a58:	4a0b      	ldr	r2, [pc, #44]	; (2a88 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x74>)
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
        this->nextPeriod = reload;
        this->currentPeriod = this->nextPeriod;
        this->triggered = true;
    2a5a:	2301      	movs	r3, #1

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    2a5c:	2000      	movs	r0, #0
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    2a5e:	6812      	ldr	r2, [r2, #0]

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
        this->nextPeriod = reload;
    2a60:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    }

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
    2a64:	61e2      	str	r2, [r4, #28]
        this->nextPeriod = reload;
        this->currentPeriod = this->nextPeriod;
    2a66:	edc4 7a08 	vstr	s15, [r4, #32]
        this->triggered = true;
    2a6a:	7663      	strb	r3, [r4, #25]

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    2a6c:	ecbd 8b02 	vpop	{d8}
    2a70:	bd70      	pop	{r4, r5, r6, pc}
    2a72:	ecbd 8b02 	vpop	{d8}
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    2a76:	4620      	mov	r0, r4
    2a78:	462b      	mov	r3, r5
    }
    2a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    2a7e:	4718      	bx	r3
    2a80:	4f700000 	.word	0x4f700000
    2a84:	000022fd 	.word	0x000022fd
    2a88:	e0001004 	.word	0xe0001004

00002a8c <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    2a8c:	eddf 7a4c 	vldr	s15, [pc, #304]	; 2bc0 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x134>

    errorCode TMRChannel::begin(callback_t cb, float tcnt, bool periodic)
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload;
        if (t > 0xFFFF)
    2a90:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 2bc4 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x138>
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    2a94:	ee20 0a27 	vmul.f32	s0, s0, s15
    2a98:	edd0 7a04 	vldr	s15, [r0, #16]
    // {
    //     return begin(cb, (float)tcnt, periodic);
    // }

    errorCode TMRChannel::begin(callback_t cb, float tcnt, bool periodic)
    {
    2a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2aa0:	ed2d 8b02 	vpush	{d8}
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    2aa4:	ee80 8a27 	vdiv.f32	s16, s0, s15
    // {
    //     return begin(cb, (float)tcnt, periodic);
    // }

    errorCode TMRChannel::begin(callback_t cb, float tcnt, bool periodic)
    {
    2aa8:	b08a      	sub	sp, #40	; 0x28
    2aaa:	4605      	mov	r5, r0
    2aac:	460e      	mov	r6, r1
    2aae:	4617      	mov	r7, r2
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload;
        if (t > 0xFFFF)
    2ab0:	eeb4 8ac7 	vcmpe.f32	s16, s14
    2ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2ab8:	dc78      	bgt.n	2bac <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x120>
        {
            postError(errorCode::periodOverflow);
            reload = 0xFFFE;
        } else
        {
            reload = (uint16_t)t - 1;
    2aba:	eefc 7ac8 	vcvt.u32.f32	s15, s16
    2abe:	ee17 2a90 	vmov	r2, s15
    2ac2:	3a01      	subs	r2, #1
    2ac4:	b292      	uxth	r2, r2
        }

        regs->CTRL = 0x0000;
    2ac6:	68ab      	ldr	r3, [r5, #8]
    2ac8:	2400      	movs	r4, #0
    2aca:	f8d6 8008 	ldr.w	r8, [r6, #8]
    2ace:	819c      	strh	r4, [r3, #12]
        regs->LOAD = 0x0000;
    2ad0:	80dc      	strh	r4, [r3, #6]
        regs->COMP1 = reload;
    2ad2:	801a      	strh	r2, [r3, #0]
        regs->CMPLD1 = reload;
    2ad4:	821a      	strh	r2, [r3, #16]
        regs->CNTR = 0x0000;
    2ad6:	815c      	strh	r4, [r3, #10]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2ad8:	9404      	str	r4, [sp, #16]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    2ada:	f1b8 0f00 	cmp.w	r8, #0
    2ade:	d060      	beq.n	2ba2 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x116>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    2ae0:	2202      	movs	r2, #2
    2ae2:	4631      	mov	r1, r6
    2ae4:	a802      	add	r0, sp, #8
    2ae6:	47c0      	blx	r8
	  _M_invoker = __x._M_invoker;
    2ae8:	68f2      	ldr	r2, [r6, #12]
	  _M_manager = __x._M_manager;
    2aea:	68b3      	ldr	r3, [r6, #8]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    2aec:	ae06      	add	r6, sp, #24
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2aee:	9408      	str	r4, [sp, #32]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
    2af0:	9205      	str	r2, [sp, #20]
	  _M_manager = __x._M_manager;
    2af2:	9304      	str	r3, [sp, #16]
    2af4:	686c      	ldr	r4, [r5, #4]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    2af6:	b13b      	cbz	r3, 2b08 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x7c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    2af8:	2202      	movs	r2, #2
    2afa:	a902      	add	r1, sp, #8
    2afc:	4630      	mov	r0, r6
    2afe:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    2b00:	9a05      	ldr	r2, [sp, #20]
	  _M_manager = __x._M_manager;
    2b02:	9b04      	ldr	r3, [sp, #16]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
    2b04:	9209      	str	r2, [sp, #36]	; 0x24
	  _M_manager = __x._M_manager;
    2b06:	9308      	str	r3, [sp, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2b08:	68e2      	ldr	r2, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2b0a:	e896 0003 	ldmia.w	r6, {r0, r1}
    2b0e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    2b12:	e894 0003 	ldmia.w	r4, {r0, r1}
    2b16:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    2b1a:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2b1e:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    2b20:	e884 0003 	stmia.w	r4, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2b24:	9908      	ldr	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
    2b26:	9308      	str	r3, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
    2b28:	60a1      	str	r1, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2b2a:	9909      	ldr	r1, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
    2b2c:	9209      	str	r2, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
    2b2e:	60e1      	str	r1, [r4, #12]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2b30:	b11b      	cbz	r3, 2b3a <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0xae>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2b32:	2203      	movs	r2, #3
    2b34:	4631      	mov	r1, r6
    2b36:	4630      	mov	r0, r6
    2b38:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2b3a:	9b04      	ldr	r3, [sp, #16]
    2b3c:	b11b      	cbz	r3, 2b46 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0xba>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2b3e:	a902      	add	r1, sp, #8
    2b40:	2203      	movs	r2, #3
    2b42:	4608      	mov	r0, r1
    2b44:	4798      	blx	r3
        setCallback(cb);

        if (!periodic)
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    2b46:	696b      	ldr	r3, [r5, #20]
        regs->COMP1 = reload;
        regs->CMPLD1 = reload;
        regs->CNTR = 0x0000;
        setCallback(cb);

        if (!periodic)
    2b48:	bb47      	cbnz	r7, 2b9c <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x110>
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    2b4a:	f242 0160 	movw	r1, #8288	; 0x2060

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;
    2b4e:	025b      	lsls	r3, r3, #9
    2b50:	68aa      	ldr	r2, [r5, #8]
    2b52:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
    2b56:	4319      	orrs	r1, r3

        start();
    2b58:	682b      	ldr	r3, [r5, #0]

        if (!periodic)
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;
    2b5a:	8191      	strh	r1, [r2, #12]

        start();
    2b5c:	699b      	ldr	r3, [r3, #24]
    2b5e:	491a      	ldr	r1, [pc, #104]	; (2bc8 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x13c>)
    2b60:	428b      	cmp	r3, r1
    2b62:	d12a      	bne.n	2bba <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x12e>
    {
    }

    errorCode TMRChannel::start()
    {
        regs->CNTR = 0x0000;
    2b64:	2300      	movs	r3, #0
    2b66:	8153      	strh	r3, [r2, #10]
        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
    2b68:	8a93      	ldrh	r3, [r2, #20]
    2b6a:	f023 0310 	bic.w	r3, r3, #16
    2b6e:	041b      	lsls	r3, r3, #16
    2b70:	0c1b      	lsrs	r3, r3, #16
    2b72:	8293      	strh	r3, [r2, #20]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;
    2b74:	8a93      	ldrh	r3, [r2, #20]
    2b76:	b29b      	uxth	r3, r3
    2b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2b7c:	8293      	strh	r3, [r2, #20]

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;

        start();
        return t > 0xFFFF ? errorCode::periodOverflow : errorCode::OK;
    2b7e:	eddf 7a11 	vldr	s15, [pc, #68]	; 2bc4 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x138>
    2b82:	eeb4 8ae7 	vcmpe.f32	s16, s15
    2b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b8a:	bfcc      	ite	gt
    2b8c:	f06f 0063 	mvngt.w	r0, #99	; 0x63
    2b90:	2000      	movle	r0, #0
    }
    2b92:	b00a      	add	sp, #40	; 0x28
    2b94:	ecbd 8b02 	vpop	{d8}
    2b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        if (!periodic)
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;
    2b9c:	f242 0120 	movw	r1, #8224	; 0x2020
    2ba0:	e7d5      	b.n	2b4e <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0xc2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2ba2:	f8cd 8020 	str.w	r8, [sp, #32]
    2ba6:	ae06      	add	r6, sp, #24
    2ba8:	686c      	ldr	r4, [r5, #4]
    2baa:	e7ad      	b.n	2b08 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x7c>
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload;
        if (t > 0xFFFF)
        {
            postError(errorCode::periodOverflow);
    2bac:	f06f 0063 	mvn.w	r0, #99	; 0x63
    2bb0:	f000 fb58 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
            reload = 0xFFFE;
    2bb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    2bb8:	e785      	b.n	2ac6 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x3a>
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;

        start();
    2bba:	4628      	mov	r0, r5
    2bbc:	4798      	blx	r3
    2bbe:	e7de      	b.n	2b7e <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0xf2>
    2bc0:	43160000 	.word	0x43160000
    2bc4:	477fff00 	.word	0x477fff00
    2bc8:	00001d05 	.word	0x00001d05

00002bcc <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)>:

        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
    2bcc:	b538      	push	{r3, r4, r5, lr}
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    2bce:	ed9f 7a18 	vldr	s14, [pc, #96]	; 2c30 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x64>

        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
    2bd2:	460d      	mov	r5, r1
    2bd4:	ed2d 8b02 	vpush	{d8}
    2bd8:	eeb0 8a40 	vmov.f32	s16, s0
    2bdc:	ed90 0a05 	vldr	s0, [r0, #20]
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    2be0:	eec7 7a00 	vdiv.f32	s15, s14, s0
        return errorCode::OK;
    }

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
    2be4:	eeb4 8ae7 	vcmpe.f32	s16, s15
    2be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2bec:	dc0b      	bgt.n	2c06 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x3a>
        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
        *reload = microsecondToCycles(delay);
    2bee:	ee28 8a00 	vmul.f32	s16, s16, s0
        return errorCode::OK;
    }
    2bf2:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
        *reload = microsecondToCycles(delay);
    2bf4:	eebc 8ac8 	vcvt.u32.f32	s16, s16
    2bf8:	ee18 3a10 	vmov	r3, s16
        return errorCode::OK;
    }
    2bfc:	ecbd 8b02 	vpop	{d8}
        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
        *reload = microsecondToCycles(delay);
    2c00:	3b01      	subs	r3, #1
    2c02:	602b      	str	r3, [r5, #0]
        return errorCode::OK;
    }
    2c04:	bd38      	pop	{r3, r4, r5, pc}

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    2c06:	6803      	ldr	r3, [r0, #0]
    2c08:	4604      	mov	r4, r0
    2c0a:	4a0a      	ldr	r2, [pc, #40]	; (2c34 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x68>)
    2c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c0e:	4293      	cmp	r3, r2
    2c10:	d10a      	bne.n	2c28 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x5c>

        inline errorCode trigger(float delay) override;
        inline errorCode triggerDirect(uint32_t delay) override;
        inline errorCode getTriggerReload(float delay, uint32_t* reload) override;

        inline float getMaxPeriod() const override { return getMaxMicros() / 1E6; }
    2c12:	ed9f 7a09 	vldr	s14, [pc, #36]	; 2c38 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x6c>
    2c16:	ee87 8a87 	vdiv.f32	s16, s15, s14
    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
    2c1a:	f06f 0063 	mvn.w	r0, #99	; 0x63
    2c1e:	f000 fb21 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    2c22:	ed94 0a05 	vldr	s0, [r4, #20]
    2c26:	e7e2      	b.n	2bee <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x22>

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    2c28:	4798      	blx	r3
    2c2a:	eeb0 8a40 	vmov.f32	s16, s0
    2c2e:	e7f4      	b.n	2c1a <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x4e>
    2c30:	4f800000 	.word	0x4f800000
    2c34:	00001ef1 	.word	0x00001ef1
    2c38:	49742400 	.word	0x49742400

00002c3c <TeensyTimerTool::GptChannel::trigger(float)>:
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    2c3c:	eddf 6a22 	vldr	s13, [pc, #136]	; 2cc8 <TeensyTimerTool::GptChannel::trigger(float)+0x8c>
    2c40:	edd0 7a05 	vldr	s15, [r0, #20]
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    2c44:	6803      	ldr	r3, [r0, #0]
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    2c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        stop();
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
    2c4a:	b570      	push	{r4, r5, r6, lr}
    2c4c:	4604      	mov	r4, r0
        return triggerDirect(microsecondToCycles(delay));
    2c4e:	689d      	ldr	r5, [r3, #8]
        stop();
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
    2c50:	ed2d 8b02 	vpush	{d8}
        return errorCode::OK;
    }

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
    2c54:	eeb4 0ac7 	vcmpe.f32	s0, s14
    2c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c5c:	dc1a      	bgt.n	2c94 <TeensyTimerTool::GptChannel::trigger(float)+0x58>
    2c5e:	eeb0 8a40 	vmov.f32	s16, s0
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
        }
        return (uint32_t)(clock * micros) - 1;
    2c62:	ee67 7a88 	vmul.f32	s15, s15, s16
    2c66:	4b19      	ldr	r3, [pc, #100]	; (2ccc <TeensyTimerTool::GptChannel::trigger(float)+0x90>)
    2c68:	429d      	cmp	r5, r3
    2c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2c6e:	ee17 2a90 	vmov	r2, s15
    2c72:	f102 31ff 	add.w	r1, r2, #4294967295
    2c76:	d11c      	bne.n	2cb2 <TeensyTimerTool::GptChannel::trigger(float)+0x76>
        return triggerDirect(microsecondToCycles(delay));
    }

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
    2c78:	68e3      	ldr	r3, [r4, #12]
    2c7a:	203f      	movs	r0, #63	; 0x3f
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    2c7c:	2201      	movs	r2, #1
        return triggerDirect(microsecondToCycles(delay));
    }

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
    2c7e:	6098      	str	r0, [r3, #8]
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    2c80:	2000      	movs	r0, #0

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    2c82:	60da      	str	r2, [r3, #12]
        regs->OCR1 = reload;     // set overflow value
    2c84:	6119      	str	r1, [r3, #16]
        regs->CR |= GPT_CR_EN;   // enable timer
    2c86:	681a      	ldr	r2, [r3, #0]
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    2c88:	ecbd 8b02 	vpop	{d8}
    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
        regs->OCR1 = reload;     // set overflow value
        regs->CR |= GPT_CR_EN;   // enable timer
    2c8c:	f042 0201 	orr.w	r2, r2, #1
    2c90:	601a      	str	r2, [r3, #0]
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    2c92:	bd70      	pop	{r4, r5, r6, pc}

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    2c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c96:	4a0e      	ldr	r2, [pc, #56]	; (2cd0 <TeensyTimerTool::GptChannel::trigger(float)+0x94>)
    2c98:	4293      	cmp	r3, r2
    2c9a:	d111      	bne.n	2cc0 <TeensyTimerTool::GptChannel::trigger(float)+0x84>

        inline errorCode trigger(float delay) override;
        inline errorCode triggerDirect(uint32_t delay) override;
        inline errorCode getTriggerReload(float delay, uint32_t* reload) override;

        inline float getMaxPeriod() const override { return getMaxMicros() / 1E6; }
    2c9c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2cd4 <TeensyTimerTool::GptChannel::trigger(float)+0x98>
    2ca0:	ee87 8a27 	vdiv.f32	s16, s14, s15
    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
    2ca4:	f06f 0063 	mvn.w	r0, #99	; 0x63
    2ca8:	f000 fadc 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    2cac:	edd4 7a05 	vldr	s15, [r4, #20]
    2cb0:	e7d7      	b.n	2c62 <TeensyTimerTool::GptChannel::trigger(float)+0x26>
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    2cb2:	ecbd 8b02 	vpop	{d8}
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    2cb6:	4620      	mov	r0, r4
    2cb8:	462b      	mov	r3, r5
    }
    2cba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    2cbe:	4718      	bx	r3

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    2cc0:	4798      	blx	r3
    2cc2:	eeb0 8a40 	vmov.f32	s16, s0
    2cc6:	e7ed      	b.n	2ca4 <TeensyTimerTool::GptChannel::trigger(float)+0x68>
    2cc8:	4f800000 	.word	0x4f800000
    2ccc:	00001f3d 	.word	0x00001f3d
    2cd0:	00001ef1 	.word	0x00001ef1
    2cd4:	49742400 	.word	0x49742400

00002cd8 <TeensyTimerTool::GptChannel::~GptChannel()>:
        regs->CR &= ~GPT_CR_EN; // disable timer
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    2cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cda:	4604      	mov	r4, r0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2cdc:	68c0      	ldr	r0, [r0, #12]
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    2cde:	b08b      	sub	sp, #44	; 0x2c
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
        regs->IR = 0;
    2ce0:	2100      	movs	r1, #0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2ce2:	6806      	ldr	r6, [r0, #0]
    2ce4:	6863      	ldr	r3, [r4, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2ce6:	ad06      	add	r5, sp, #24
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    2ce8:	4f16      	ldr	r7, [pc, #88]	; (2d44 <TeensyTimerTool::GptChannel::~GptChannel()+0x6c>)
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2cea:	f026 0601 	bic.w	r6, r6, #1
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    2cee:	6027      	str	r7, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
    2cf0:	68df      	ldr	r7, [r3, #12]
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2cf2:	6006      	str	r6, [r0, #0]
    2cf4:	9108      	str	r1, [sp, #32]
        regs->IR = 0;
    2cf6:	60c1      	str	r1, [r0, #12]
    2cf8:	9104      	str	r1, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2cfa:	e895 0003 	ldmia.w	r5, {r0, r1}
    2cfe:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    2d02:	e893 0003 	ldmia.w	r3, {r0, r1}
    2d06:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    2d0a:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2d0e:	689e      	ldr	r6, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    2d10:	e883 0003 	stmia.w	r3, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2d14:	9a08      	ldr	r2, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
    2d16:	9608      	str	r6, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
    2d18:	609a      	str	r2, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
    2d1c:	9709      	str	r7, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
    2d1e:	60da      	str	r2, [r3, #12]

    ~_Function_base()
    {
      if (_M_manager)
    2d20:	b11e      	cbz	r6, 2d2a <TeensyTimerTool::GptChannel::~GptChannel()+0x52>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2d22:	2203      	movs	r2, #3
    2d24:	4629      	mov	r1, r5
    2d26:	4628      	mov	r0, r5
    2d28:	47b0      	blx	r6

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2d2a:	9b04      	ldr	r3, [sp, #16]
    2d2c:	b11b      	cbz	r3, 2d36 <TeensyTimerTool::GptChannel::~GptChannel()+0x5e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2d2e:	a902      	add	r1, sp, #8
    2d30:	2203      	movs	r2, #3
    2d32:	4608      	mov	r0, r1
    2d34:	4798      	blx	r3

    GptChannel::~GptChannel()
    {
        stop();
        setCallback(nullptr);
    }
    2d36:	4620      	mov	r0, r4
    2d38:	2118      	movs	r1, #24
    2d3a:	f001 ff3f 	bl	4bbc <operator delete(void*, unsigned int)>
    2d3e:	4620      	mov	r0, r4
    2d40:	b00b      	add	sp, #44	; 0x2c
    2d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d44:	200001c0 	.word	0x200001c0

00002d48 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)>:
    }

    template <typename T>
    errorCode TckChannel<T>::begin(callback_t cb, float period, bool periodic)
    {
        this->triggered = false;
    2d48:	2300      	movs	r3, #0
        triggered = false;
        clock = F_CPU / 1'000'000.0f;
    }

    template <typename T>
    errorCode TckChannel<T>::begin(callback_t cb, float period, bool periodic)
    2d4a:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d4c:	4604      	mov	r4, r0
    2d4e:	460e      	mov	r6, r1
    2d50:	ed2d 8b02 	vpush	{d8}
    {
        this->triggered = false;

        this->periodic = periodic;
    2d54:	7602      	strb	r2, [r0, #24]
        triggered = false;
        clock = F_CPU / 1'000'000.0f;
    }

    template <typename T>
    errorCode TckChannel<T>::begin(callback_t cb, float period, bool periodic)
    2d56:	b087      	sub	sp, #28
    {
        this->triggered = false;
    2d58:	7643      	strb	r3, [r0, #25]

        this->periodic = periodic;
        if (periodic)
    2d5a:	b192      	cbz	r2, 2d82 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x3a>
    2d5c:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    2d60:	ed9f 7a23 	vldr	s14, [pc, #140]	; 2df0 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0xa8>
    2d64:	ee87 8a27 	vdiv.f32	s16, s14, s15
    }

    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
    2d68:	eeb4 0ac8 	vcmpe.f32	s0, s16
    2d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2d70:	dc34      	bgt.n	2ddc <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x94>
        {
            microSecond = getMaxMicros();
            postError(errorCode::periodOverflow);
        }
        return (CounterType)(microSecond * clock);
    2d72:	ee20 0a27 	vmul.f32	s0, s0, s15
    2d76:	eefc 7ac0 	vcvt.u32.f32	s15, s0
        this->triggered = false;

        this->periodic = periodic;
        if (periodic)
        {
            this->currentPeriod = microsecondToCycles(period);
    2d7a:	edc4 7a08 	vstr	s15, [r4, #32]
            this->nextPeriod = this->currentPeriod;
    2d7e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2d82:	2200      	movs	r2, #0
    2d84:	68b3      	ldr	r3, [r6, #8]
    2d86:	9204      	str	r2, [sp, #16]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    2d88:	b323      	cbz	r3, 2dd4 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x8c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    2d8a:	ad02      	add	r5, sp, #8
    2d8c:	4631      	mov	r1, r6
    2d8e:	2202      	movs	r2, #2
    2d90:	4628      	mov	r0, r5
    2d92:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    2d94:	68f7      	ldr	r7, [r6, #12]
	  _M_manager = __x._M_manager;
    2d96:	68b6      	ldr	r6, [r6, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2d98:	f104 0308 	add.w	r3, r4, #8
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2d9c:	e895 0003 	ldmia.w	r5, {r0, r1}
    2da0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    2da4:	e893 0003 	ldmia.w	r3, {r0, r1}
    2da8:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    2dac:	e89d 0003 	ldmia.w	sp, {r0, r1}
    2db0:	e883 0003 	stmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2db4:	6923      	ldr	r3, [r4, #16]
    2db6:	6962      	ldr	r2, [r4, #20]
    2db8:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
    2dba:	6126      	str	r6, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2dbc:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
    2dbe:	6167      	str	r7, [r4, #20]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2dc0:	b11b      	cbz	r3, 2dca <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x82>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2dc2:	2203      	movs	r2, #3
    2dc4:	4629      	mov	r1, r5
    2dc6:	4628      	mov	r0, r5
    2dc8:	4798      	blx	r3
        }
        this->callback = cb;

        return errorCode::OK;
    }
    2dca:	2000      	movs	r0, #0
    2dcc:	b007      	add	sp, #28
    2dce:	ecbd 8b02 	vpop	{d8}
    2dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    2dd4:	461e      	mov	r6, r3
    2dd6:	9f05      	ldr	r7, [sp, #20]
    2dd8:	ad02      	add	r5, sp, #8
    2dda:	e7dd      	b.n	2d98 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x50>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
        {
            microSecond = getMaxMicros();
            postError(errorCode::periodOverflow);
    2ddc:	f06f 0063 	mvn.w	r0, #99	; 0x63
    2de0:	f000 fa40 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
        {
            microSecond = getMaxMicros();
    2de4:	eeb0 0a48 	vmov.f32	s0, s16
    2de8:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    2dec:	e7c1      	b.n	2d72 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x2a>
    2dee:	bf00      	nop
    2df0:	4f700000 	.word	0x4f700000

00002df4 <TeensyTimerTool::GptChannel::~GptChannel()>:
        regs->CR &= ~GPT_CR_EN; // disable timer
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    2df4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2df6:	4605      	mov	r5, r0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2df8:	68c0      	ldr	r0, [r0, #12]
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    2dfa:	b08b      	sub	sp, #44	; 0x2c
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
        regs->IR = 0;
    2dfc:	2100      	movs	r1, #0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2dfe:	6806      	ldr	r6, [r0, #0]
    2e00:	686b      	ldr	r3, [r5, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2e02:	ac06      	add	r4, sp, #24
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    2e04:	4f14      	ldr	r7, [pc, #80]	; (2e58 <TeensyTimerTool::GptChannel::~GptChannel()+0x64>)
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2e06:	f026 0601 	bic.w	r6, r6, #1
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    2e0a:	602f      	str	r7, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
    2e0c:	68df      	ldr	r7, [r3, #12]
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2e0e:	6006      	str	r6, [r0, #0]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2e10:	9108      	str	r1, [sp, #32]
        regs->IR = 0;
    2e12:	60c1      	str	r1, [r0, #12]
    2e14:	9104      	str	r1, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2e16:	e894 0003 	ldmia.w	r4, {r0, r1}
    2e1a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    2e1e:	e893 0003 	ldmia.w	r3, {r0, r1}
    2e22:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    2e26:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2e2a:	689e      	ldr	r6, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    2e2c:	e883 0003 	stmia.w	r3, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2e30:	9a08      	ldr	r2, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
    2e32:	9608      	str	r6, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
    2e34:	609a      	str	r2, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
    2e38:	9709      	str	r7, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
    2e3a:	60da      	str	r2, [r3, #12]

    ~_Function_base()
    {
      if (_M_manager)
    2e3c:	b11e      	cbz	r6, 2e46 <TeensyTimerTool::GptChannel::~GptChannel()+0x52>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2e3e:	2203      	movs	r2, #3
    2e40:	4621      	mov	r1, r4
    2e42:	4620      	mov	r0, r4
    2e44:	47b0      	blx	r6

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2e46:	9b04      	ldr	r3, [sp, #16]
    2e48:	b11b      	cbz	r3, 2e52 <TeensyTimerTool::GptChannel::~GptChannel()+0x5e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2e4a:	a902      	add	r1, sp, #8
    2e4c:	2203      	movs	r2, #3
    2e4e:	4608      	mov	r0, r1
    2e50:	4798      	blx	r3

    GptChannel::~GptChannel()
    {
        stop();
        setCallback(nullptr);
    }
    2e52:	4628      	mov	r0, r5
    2e54:	b00b      	add	sp, #44	; 0x2c
    2e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e58:	200001c0 	.word	0x200001c0

00002e5c <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)>:
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    }

    errorCode GptChannel::begin(callback_t cb, float period, bool periodic)
    {
    2e5c:	b570      	push	{r4, r5, r6, lr}
    2e5e:	4604      	mov	r4, r0
    2e60:	b08c      	sub	sp, #48	; 0x30
    2e62:	460d      	mov	r5, r1
        this->periodic = periodic;
    2e64:	7202      	strb	r2, [r0, #8]
        if (periodic)
    2e66:	2a00      	cmp	r2, #0
    2e68:	d13f      	bne.n	2eea <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x8e>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2e6a:	2600      	movs	r6, #0
    2e6c:	68ab      	ldr	r3, [r5, #8]
    2e6e:	9606      	str	r6, [sp, #24]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    2e70:	2b00      	cmp	r3, #0
    2e72:	d036      	beq.n	2ee2 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x86>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    2e74:	2202      	movs	r2, #2
    2e76:	4629      	mov	r1, r5
    2e78:	a804      	add	r0, sp, #16
    2e7a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    2e7c:	68ea      	ldr	r2, [r5, #12]
	  _M_manager = __x._M_manager;
    2e7e:	68ab      	ldr	r3, [r5, #8]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    2e80:	ad08      	add	r5, sp, #32
    2e82:	6864      	ldr	r4, [r4, #4]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2e84:	960a      	str	r6, [sp, #40]	; 0x28
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
    2e86:	9207      	str	r2, [sp, #28]
	  _M_manager = __x._M_manager;
    2e88:	9306      	str	r3, [sp, #24]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    2e8a:	b13b      	cbz	r3, 2e9c <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x40>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    2e8c:	2202      	movs	r2, #2
    2e8e:	a904      	add	r1, sp, #16
    2e90:	4628      	mov	r0, r5
    2e92:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    2e94:	9a07      	ldr	r2, [sp, #28]
	  _M_manager = __x._M_manager;
    2e96:	9b06      	ldr	r3, [sp, #24]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
    2e98:	920b      	str	r2, [sp, #44]	; 0x2c
	  _M_manager = __x._M_manager;
    2e9a:	930a      	str	r3, [sp, #40]	; 0x28
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2e9c:	ab02      	add	r3, sp, #8
      __a = _GLIBCXX_MOVE(__b);
    2e9e:	68e6      	ldr	r6, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2ea0:	e895 0003 	ldmia.w	r5, {r0, r1}
    2ea4:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    2ea8:	e894 0003 	ldmia.w	r4, {r0, r1}
    2eac:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    2eb0:	e893 0003 	ldmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2eb4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    2eb6:	e884 0003 	stmia.w	r4, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2eba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
    2ebc:	930a      	str	r3, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
    2ebe:	60a2      	str	r2, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2ec0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
    2ec2:	960b      	str	r6, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
    2ec4:	60e2      	str	r2, [r4, #12]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2ec6:	b11b      	cbz	r3, 2ed0 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x74>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2ec8:	2203      	movs	r2, #3
    2eca:	4629      	mov	r1, r5
    2ecc:	4628      	mov	r0, r5
    2ece:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2ed0:	9b06      	ldr	r3, [sp, #24]
    2ed2:	b11b      	cbz	r3, 2edc <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x80>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2ed4:	a904      	add	r1, sp, #16
    2ed6:	2203      	movs	r2, #3
    2ed8:	4608      	mov	r0, r1
    2eda:	4798      	blx	r3
            regs->OCR1 = reload;
        }
        setCallback(cb);

        return errorCode::OK;
    }
    2edc:	2000      	movs	r0, #0
    2ede:	b00c      	add	sp, #48	; 0x30
    2ee0:	bd70      	pop	{r4, r5, r6, pc}
    2ee2:	6864      	ldr	r4, [r4, #4]
    2ee4:	ad08      	add	r5, sp, #32
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2ee6:	930a      	str	r3, [sp, #40]	; 0x28
    2ee8:	e7d8      	b.n	2e9c <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x40>
    2eea:	edd0 7a05 	vldr	s15, [r0, #20]
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    2eee:	eddf 6a15 	vldr	s13, [pc, #84]	; 2f44 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xe8>
    2ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        return errorCode::OK;
    }

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
    2ef6:	eeb4 0ac7 	vcmpe.f32	s0, s14
    2efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2efe:	dc0a      	bgt.n	2f16 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xba>
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
        }
        return (uint32_t)(clock * micros) - 1;
    2f00:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        this->periodic = periodic;
        if (periodic)
        {
            reload = microsecondToCycles(period);
            regs->OCR1 = reload;
    2f04:	68e2      	ldr	r2, [r4, #12]
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
        }
        return (uint32_t)(clock * micros) - 1;
    2f06:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    2f0a:	ee10 3a10 	vmov	r3, s0
    2f0e:	3b01      	subs	r3, #1
    errorCode GptChannel::begin(callback_t cb, float period, bool periodic)
    {
        this->periodic = periodic;
        if (periodic)
        {
            reload = microsecondToCycles(period);
    2f10:	6123      	str	r3, [r4, #16]
            regs->OCR1 = reload;
    2f12:	6113      	str	r3, [r2, #16]
    2f14:	e7a9      	b.n	2e6a <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xe>

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    2f16:	6803      	ldr	r3, [r0, #0]
    2f18:	4a0b      	ldr	r2, [pc, #44]	; (2f48 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xec>)
    2f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f1c:	4293      	cmp	r3, r2
    2f1e:	d10e      	bne.n	2f3e <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xe2>

        inline errorCode trigger(float delay) override;
        inline errorCode triggerDirect(uint32_t delay) override;
        inline errorCode getTriggerReload(float delay, uint32_t* reload) override;

        inline float getMaxPeriod() const override { return getMaxMicros() / 1E6; }
    2f20:	eddf 7a0a 	vldr	s15, [pc, #40]	; 2f4c <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xf0>
    2f24:	ee87 0a27 	vdiv.f32	s0, s14, s15
    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
    2f28:	f06f 0063 	mvn.w	r0, #99	; 0x63
    2f2c:	ed8d 0a01 	vstr	s0, [sp, #4]
    2f30:	f000 f998 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    2f34:	edd4 7a05 	vldr	s15, [r4, #20]
    2f38:	ed9d 0a01 	vldr	s0, [sp, #4]
    2f3c:	e7e0      	b.n	2f00 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xa4>

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    2f3e:	4798      	blx	r3
    2f40:	e7f2      	b.n	2f28 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xcc>
    2f42:	bf00      	nop
    2f44:	4f800000 	.word	0x4f800000
    2f48:	00001ef1 	.word	0x00001ef1
    2f4c:	49742400 	.word	0x49742400

00002f50 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E>:
        TimerGenerator* const TCK = TCK_t::getTimer<uint32_t>;
        TimerGenerator* const TCK32 = TCK_t::getTimer<uint32_t>; // same as TCK
        TimerGenerator* const TCK64 = TCK_t::getTimer<uint64_t>;

        constexpr tick_t tick = &TCK_t::tick;
    }
    2f50:	b570      	push	{r4, r5, r6, lr}

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    2f52:	4d79      	ldr	r5, [pc, #484]	; (3138 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1e8>)
    2f54:	682b      	ldr	r3, [r5, #0]
    2f56:	f013 0301 	ands.w	r3, r3, #1
    2f5a:	d10b      	bne.n	2f74 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x24>
    2f5c:	4c77      	ldr	r4, [pc, #476]	; (313c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1ec>)
    2f5e:	2601      	movs	r6, #1
    2f60:	4618      	mov	r0, r3
    2f62:	4a77      	ldr	r2, [pc, #476]	; (3140 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    2f64:	4977      	ldr	r1, [pc, #476]	; (3144 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f4>)
    2f66:	60a3      	str	r3, [r4, #8]
    2f68:	61a3      	str	r3, [r4, #24]
    2f6a:	62a3      	str	r3, [r4, #40]	; 0x28
    2f6c:	63a3      	str	r3, [r4, #56]	; 0x38
    2f6e:	602e      	str	r6, [r5, #0]
    2f70:	f002 f9e6 	bl	5340 <__aeabi_atexit>
    };

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    2f74:	4b74      	ldr	r3, [pc, #464]	; (3148 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f8>)
    2f76:	681a      	ldr	r2, [r3, #0]
    2f78:	07d4      	lsls	r4, r2, #31
    2f7a:	d404      	bmi.n	2f86 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x36>
    2f7c:	2001      	movs	r0, #1
    2f7e:	4a73      	ldr	r2, [pc, #460]	; (314c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1fc>)
    2f80:	4973      	ldr	r1, [pc, #460]	; (3150 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x200>)
    2f82:	6018      	str	r0, [r3, #0]
    2f84:	6011      	str	r1, [r2, #0]

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    2f86:	4d73      	ldr	r5, [pc, #460]	; (3154 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x204>)
    2f88:	682b      	ldr	r3, [r5, #0]
    2f8a:	f013 0301 	ands.w	r3, r3, #1
    2f8e:	d10b      	bne.n	2fa8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x58>
    2f90:	4c71      	ldr	r4, [pc, #452]	; (3158 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x208>)
    2f92:	2601      	movs	r6, #1
    2f94:	4618      	mov	r0, r3
    2f96:	4a6a      	ldr	r2, [pc, #424]	; (3140 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    2f98:	4970      	ldr	r1, [pc, #448]	; (315c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x20c>)
    2f9a:	60a3      	str	r3, [r4, #8]
    2f9c:	61a3      	str	r3, [r4, #24]
    2f9e:	62a3      	str	r3, [r4, #40]	; 0x28
    2fa0:	63a3      	str	r3, [r4, #56]	; 0x38
    2fa2:	602e      	str	r6, [r5, #0]
    2fa4:	f002 f9cc 	bl	5340 <__aeabi_atexit>
    };

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    2fa8:	4b6d      	ldr	r3, [pc, #436]	; (3160 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x210>)
    2faa:	681a      	ldr	r2, [r3, #0]
    2fac:	07d0      	lsls	r0, r2, #31
    2fae:	d404      	bmi.n	2fba <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x6a>
    2fb0:	2001      	movs	r0, #1
    2fb2:	4a6c      	ldr	r2, [pc, #432]	; (3164 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x214>)
    2fb4:	496c      	ldr	r1, [pc, #432]	; (3168 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x218>)
    2fb6:	6018      	str	r0, [r3, #0]
    2fb8:	6011      	str	r1, [r2, #0]

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    2fba:	4d6c      	ldr	r5, [pc, #432]	; (316c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x21c>)
    2fbc:	682b      	ldr	r3, [r5, #0]
    2fbe:	f013 0301 	ands.w	r3, r3, #1
    2fc2:	d10b      	bne.n	2fdc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x8c>
    2fc4:	4c6a      	ldr	r4, [pc, #424]	; (3170 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x220>)
    2fc6:	2601      	movs	r6, #1
    2fc8:	4618      	mov	r0, r3
    2fca:	4a5d      	ldr	r2, [pc, #372]	; (3140 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    2fcc:	4969      	ldr	r1, [pc, #420]	; (3174 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x224>)
    2fce:	60a3      	str	r3, [r4, #8]
    2fd0:	61a3      	str	r3, [r4, #24]
    2fd2:	62a3      	str	r3, [r4, #40]	; 0x28
    2fd4:	63a3      	str	r3, [r4, #56]	; 0x38
    2fd6:	602e      	str	r6, [r5, #0]
    2fd8:	f002 f9b2 	bl	5340 <__aeabi_atexit>
    };

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    2fdc:	4b66      	ldr	r3, [pc, #408]	; (3178 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x228>)
    2fde:	681a      	ldr	r2, [r3, #0]
    2fe0:	07d1      	lsls	r1, r2, #31
    2fe2:	d404      	bmi.n	2fee <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x9e>
    2fe4:	2001      	movs	r0, #1
    2fe6:	4a65      	ldr	r2, [pc, #404]	; (317c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x22c>)
    2fe8:	4965      	ldr	r1, [pc, #404]	; (3180 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x230>)
    2fea:	6018      	str	r0, [r3, #0]
    2fec:	6011      	str	r1, [r2, #0]

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    2fee:	4d65      	ldr	r5, [pc, #404]	; (3184 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x234>)
    2ff0:	682b      	ldr	r3, [r5, #0]
    2ff2:	f013 0301 	ands.w	r3, r3, #1
    2ff6:	d10b      	bne.n	3010 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xc0>
    2ff8:	4c63      	ldr	r4, [pc, #396]	; (3188 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x238>)
    2ffa:	2601      	movs	r6, #1
    2ffc:	4618      	mov	r0, r3
    2ffe:	4a50      	ldr	r2, [pc, #320]	; (3140 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    3000:	4962      	ldr	r1, [pc, #392]	; (318c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x23c>)
    3002:	60a3      	str	r3, [r4, #8]
    3004:	61a3      	str	r3, [r4, #24]
    3006:	62a3      	str	r3, [r4, #40]	; 0x28
    3008:	63a3      	str	r3, [r4, #56]	; 0x38
    300a:	602e      	str	r6, [r5, #0]
    300c:	f002 f998 	bl	5340 <__aeabi_atexit>
    };

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    3010:	4b5f      	ldr	r3, [pc, #380]	; (3190 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x240>)
    3012:	681a      	ldr	r2, [r3, #0]
    3014:	07d2      	lsls	r2, r2, #31
    3016:	d404      	bmi.n	3022 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xd2>
    3018:	2001      	movs	r0, #1
    301a:	4a5e      	ldr	r2, [pc, #376]	; (3194 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x244>)
    301c:	495e      	ldr	r1, [pc, #376]	; (3198 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x248>)
    301e:	6018      	str	r0, [r3, #0]
    3020:	6011      	str	r1, [r2, #0]

    template <unsigned m>
    bool GPT_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t GPT_t<m>::callback = nullptr;
    3022:	4c5e      	ldr	r4, [pc, #376]	; (319c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x24c>)
    3024:	6823      	ldr	r3, [r4, #0]
    3026:	f013 0301 	ands.w	r3, r3, #1
    302a:	d071      	beq.n	3110 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1c0>
    302c:	4c5c      	ldr	r4, [pc, #368]	; (31a0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x250>)
    302e:	6823      	ldr	r3, [r4, #0]
    3030:	f013 0301 	ands.w	r3, r3, #1
    3034:	d076      	beq.n	3124 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1d4>
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    3036:	4b5b      	ldr	r3, [pc, #364]	; (31a4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x254>)
    3038:	681a      	ldr	r2, [r3, #0]
    303a:	07d6      	lsls	r6, r2, #31
    303c:	d404      	bmi.n	3048 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xf8>
    303e:	2001      	movs	r0, #1
    3040:	4a59      	ldr	r2, [pc, #356]	; (31a8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x258>)
    3042:	495a      	ldr	r1, [pc, #360]	; (31ac <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x25c>)
    3044:	6018      	str	r0, [r3, #0]
    3046:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    3048:	4b59      	ldr	r3, [pc, #356]	; (31b0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x260>)
    304a:	681a      	ldr	r2, [r3, #0]
    304c:	07d5      	lsls	r5, r2, #31
    304e:	d404      	bmi.n	305a <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x10a>
    3050:	2001      	movs	r0, #1
    3052:	4a58      	ldr	r2, [pc, #352]	; (31b4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x264>)
    3054:	4958      	ldr	r1, [pc, #352]	; (31b8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x268>)
    3056:	6018      	str	r0, [r3, #0]
    3058:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];
    305a:	4b58      	ldr	r3, [pc, #352]	; (31bc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x26c>)
    305c:	681a      	ldr	r2, [r3, #0]
    305e:	07d4      	lsls	r4, r2, #31
    3060:	d404      	bmi.n	306c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x11c>
    3062:	2001      	movs	r0, #1
    3064:	4a56      	ldr	r2, [pc, #344]	; (31c0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x270>)
    3066:	4957      	ldr	r1, [pc, #348]	; (31c4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x274>)
    3068:	6018      	str	r0, [r3, #0]
    306a:	6011      	str	r1, [r2, #0]

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    306c:	4b56      	ldr	r3, [pc, #344]	; (31c8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x278>)
    306e:	681a      	ldr	r2, [r3, #0]
    3070:	07d0      	lsls	r0, r2, #31
    3072:	d404      	bmi.n	307e <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x12e>
    3074:	2001      	movs	r0, #1
    3076:	4a55      	ldr	r2, [pc, #340]	; (31cc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x27c>)
    3078:	4955      	ldr	r1, [pc, #340]	; (31d0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x280>)
    307a:	6018      	str	r0, [r3, #0]
    307c:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    307e:	4b55      	ldr	r3, [pc, #340]	; (31d4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x284>)
    3080:	681a      	ldr	r2, [r3, #0]
    3082:	07d1      	lsls	r1, r2, #31
    3084:	d404      	bmi.n	3090 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x140>
    3086:	2001      	movs	r0, #1
    3088:	4a53      	ldr	r2, [pc, #332]	; (31d8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x288>)
    308a:	4954      	ldr	r1, [pc, #336]	; (31dc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x28c>)
    308c:	6018      	str	r0, [r3, #0]
    308e:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];
    3090:	4b53      	ldr	r3, [pc, #332]	; (31e0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x290>)
    3092:	681a      	ldr	r2, [r3, #0]
    3094:	07d2      	lsls	r2, r2, #31
    3096:	d404      	bmi.n	30a2 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x152>
    3098:	2001      	movs	r0, #1
    309a:	4a52      	ldr	r2, [pc, #328]	; (31e4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x294>)
    309c:	4952      	ldr	r1, [pc, #328]	; (31e8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x298>)
    309e:	6018      	str	r0, [r3, #0]
    30a0:	6011      	str	r1, [r2, #0]

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    30a2:	4b52      	ldr	r3, [pc, #328]	; (31ec <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x29c>)
    30a4:	681a      	ldr	r2, [r3, #0]
    30a6:	07d6      	lsls	r6, r2, #31
    30a8:	d404      	bmi.n	30b4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x164>
    30aa:	2001      	movs	r0, #1
    30ac:	4a50      	ldr	r2, [pc, #320]	; (31f0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2a0>)
    30ae:	4951      	ldr	r1, [pc, #324]	; (31f4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2a4>)
    30b0:	6018      	str	r0, [r3, #0]
    30b2:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    30b4:	4b50      	ldr	r3, [pc, #320]	; (31f8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2a8>)
    30b6:	681a      	ldr	r2, [r3, #0]
    30b8:	07d5      	lsls	r5, r2, #31
    30ba:	d404      	bmi.n	30c6 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x176>
    30bc:	2001      	movs	r0, #1
    30be:	4a4f      	ldr	r2, [pc, #316]	; (31fc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2ac>)
    30c0:	494f      	ldr	r1, [pc, #316]	; (3200 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2b0>)
    30c2:	6018      	str	r0, [r3, #0]
    30c4:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];
    30c6:	4b4f      	ldr	r3, [pc, #316]	; (3204 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2b4>)
    30c8:	681a      	ldr	r2, [r3, #0]
    30ca:	07d4      	lsls	r4, r2, #31
    30cc:	d404      	bmi.n	30d8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x188>
    30ce:	2001      	movs	r0, #1
    30d0:	4a4d      	ldr	r2, [pc, #308]	; (3208 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2b8>)
    30d2:	494e      	ldr	r1, [pc, #312]	; (320c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2bc>)
    30d4:	6018      	str	r0, [r3, #0]
    30d6:	6011      	str	r1, [r2, #0]

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    30d8:	4b4d      	ldr	r3, [pc, #308]	; (3210 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2c0>)
    30da:	681a      	ldr	r2, [r3, #0]
    30dc:	07d0      	lsls	r0, r2, #31
    30de:	d404      	bmi.n	30ea <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x19a>
    30e0:	2001      	movs	r0, #1
    30e2:	4a4c      	ldr	r2, [pc, #304]	; (3214 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2c4>)
    30e4:	494c      	ldr	r1, [pc, #304]	; (3218 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2c8>)
    30e6:	6018      	str	r0, [r3, #0]
    30e8:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    30ea:	4b4c      	ldr	r3, [pc, #304]	; (321c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2cc>)
    30ec:	681a      	ldr	r2, [r3, #0]
    30ee:	07d1      	lsls	r1, r2, #31
    30f0:	d404      	bmi.n	30fc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1ac>
    30f2:	2001      	movs	r0, #1
    30f4:	4a4a      	ldr	r2, [pc, #296]	; (3220 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2d0>)
    30f6:	494b      	ldr	r1, [pc, #300]	; (3224 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2d4>)
    30f8:	6018      	str	r0, [r3, #0]
    30fa:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];
    30fc:	4b4a      	ldr	r3, [pc, #296]	; (3228 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2d8>)
    30fe:	681a      	ldr	r2, [r3, #0]
    3100:	07d2      	lsls	r2, r2, #31
    3102:	d404      	bmi.n	310e <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1be>
    3104:	2001      	movs	r0, #1
    3106:	4a49      	ldr	r2, [pc, #292]	; (322c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2dc>)
    3108:	4949      	ldr	r1, [pc, #292]	; (3230 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2e0>)
    310a:	6018      	str	r0, [r3, #0]
    310c:	6011      	str	r1, [r2, #0]
    310e:	bd70      	pop	{r4, r5, r6, pc}
    3110:	4d48      	ldr	r5, [pc, #288]	; (3234 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2e4>)
    3112:	2601      	movs	r6, #1
    3114:	4a0a      	ldr	r2, [pc, #40]	; (3140 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    3116:	4628      	mov	r0, r5
    3118:	4947      	ldr	r1, [pc, #284]	; (3238 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2e8>)
    311a:	60ab      	str	r3, [r5, #8]
    311c:	6026      	str	r6, [r4, #0]
    311e:	f002 f90f 	bl	5340 <__aeabi_atexit>
    3122:	e783      	b.n	302c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xdc>
    3124:	4d45      	ldr	r5, [pc, #276]	; (323c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2ec>)
    3126:	2601      	movs	r6, #1
    3128:	4a05      	ldr	r2, [pc, #20]	; (3140 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    312a:	4628      	mov	r0, r5
    312c:	4942      	ldr	r1, [pc, #264]	; (3238 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2e8>)
    312e:	60ab      	str	r3, [r5, #8]
    3130:	6026      	str	r6, [r4, #0]
    3132:	f002 f905 	bl	5340 <__aeabi_atexit>
    3136:	e77e      	b.n	3036 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xe6>
    3138:	20001860 	.word	0x20001860
    313c:	20001984 	.word	0x20001984
    3140:	2000069c 	.word	0x2000069c
    3144:	0000227d 	.word	0x0000227d
    3148:	2000185c 	.word	0x2000185c
    314c:	20001980 	.word	0x20001980
    3150:	401dc000 	.word	0x401dc000
    3154:	20001858 	.word	0x20001858
    3158:	20001940 	.word	0x20001940
    315c:	0000229d 	.word	0x0000229d
    3160:	20001854 	.word	0x20001854
    3164:	2000193c 	.word	0x2000193c
    3168:	401e0000 	.word	0x401e0000
    316c:	20001850 	.word	0x20001850
    3170:	200018fc 	.word	0x200018fc
    3174:	000022bd 	.word	0x000022bd
    3178:	2000184c 	.word	0x2000184c
    317c:	200018f8 	.word	0x200018f8
    3180:	401e4000 	.word	0x401e4000
    3184:	20001848 	.word	0x20001848
    3188:	200018b8 	.word	0x200018b8
    318c:	000022dd 	.word	0x000022dd
    3190:	20001844 	.word	0x20001844
    3194:	200018b4 	.word	0x200018b4
    3198:	401e8000 	.word	0x401e8000
    319c:	20001840 	.word	0x20001840
    31a0:	2000183c 	.word	0x2000183c
    31a4:	20001838 	.word	0x20001838
    31a8:	20001890 	.word	0x20001890
    31ac:	401dc020 	.word	0x401dc020
    31b0:	20001834 	.word	0x20001834
    31b4:	2000188c 	.word	0x2000188c
    31b8:	401dc040 	.word	0x401dc040
    31bc:	20001830 	.word	0x20001830
    31c0:	20001888 	.word	0x20001888
    31c4:	401dc060 	.word	0x401dc060
    31c8:	2000182c 	.word	0x2000182c
    31cc:	20001884 	.word	0x20001884
    31d0:	401e0020 	.word	0x401e0020
    31d4:	20001828 	.word	0x20001828
    31d8:	20001880 	.word	0x20001880
    31dc:	401e0040 	.word	0x401e0040
    31e0:	20001824 	.word	0x20001824
    31e4:	2000187c 	.word	0x2000187c
    31e8:	401e0060 	.word	0x401e0060
    31ec:	20001820 	.word	0x20001820
    31f0:	20001878 	.word	0x20001878
    31f4:	401e4020 	.word	0x401e4020
    31f8:	2000181c 	.word	0x2000181c
    31fc:	20001874 	.word	0x20001874
    3200:	401e4040 	.word	0x401e4040
    3204:	20001818 	.word	0x20001818
    3208:	20001870 	.word	0x20001870
    320c:	401e4060 	.word	0x401e4060
    3210:	20001814 	.word	0x20001814
    3214:	2000186c 	.word	0x2000186c
    3218:	401e8020 	.word	0x401e8020
    321c:	20001810 	.word	0x20001810
    3220:	20001868 	.word	0x20001868
    3224:	401e8040 	.word	0x401e8040
    3228:	2000180c 	.word	0x2000180c
    322c:	20001864 	.word	0x20001864
    3230:	401e8060 	.word	0x401e8060
    3234:	200018a4 	.word	0x200018a4
    3238:	00001d39 	.word	0x00001d39
    323c:	20001894 	.word	0x20001894

00003240 <TeensyTimerTool::Timer::Timer(TeensyTimerTool::ITimerChannel* (*)())>:
#include "timer.h"
#include "config.h"

namespace TeensyTimerTool
{
    Timer::Timer(TimerGenerator* generator)
    3240:	b510      	push	{r4, lr}
    3242:	4604      	mov	r4, r0
    :BaseTimer(generator, true)
    3244:	2201      	movs	r2, #1
    3246:	f7fe fd4f 	bl	1ce8 <TeensyTimerTool::BaseTimer::BaseTimer(TeensyTimerTool::ITimerChannel* (*)(), bool)>
    {
    }
    324a:	4620      	mov	r0, r4
    324c:	bd10      	pop	{r4, pc}
    324e:	bf00      	nop

00003250 <std::function<void (TeensyTimerTool::errorCode)>::~function()>:

    ~_Function_base()
    {
      if (_M_manager)
    3250:	6883      	ldr	r3, [r0, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    3252:	b510      	push	{r4, lr}
    3254:	4604      	mov	r4, r0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    3256:	b113      	cbz	r3, 325e <std::function<void (TeensyTimerTool::errorCode)>::~function()+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    3258:	2203      	movs	r2, #3
    325a:	4601      	mov	r1, r0
    325c:	4798      	blx	r3
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    325e:	4620      	mov	r0, r4
    3260:	bd10      	pop	{r4, pc}
    3262:	bf00      	nop

00003264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>:
    }

    errorFunc_t errFunc;

    errorCode postError(errorCode e)
    {
    3264:	4b07      	ldr	r3, [pc, #28]	; (3284 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)+0x20>)
        if (errFunc != nullptr && e != errorCode::OK) errFunc(e);
    3266:	689a      	ldr	r2, [r3, #8]
    }

    errorFunc_t errFunc;

    errorCode postError(errorCode e)
    {
    3268:	b510      	push	{r4, lr}
    326a:	4604      	mov	r4, r0
    326c:	b082      	sub	sp, #8
        if (errFunc != nullptr && e != errorCode::OK) errFunc(e);
    326e:	b132      	cbz	r2, 327e <TeensyTimerTool::postError(TeensyTimerTool::errorCode)+0x1a>
    3270:	b128      	cbz	r0, 327e <TeensyTimerTool::postError(TeensyTimerTool::errorCode)+0x1a>
    3272:	a902      	add	r1, sp, #8
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    3274:	68da      	ldr	r2, [r3, #12]
    3276:	4618      	mov	r0, r3
    3278:	f841 4d04 	str.w	r4, [r1, #-4]!
    327c:	4790      	blx	r2
        return e;
    }
    327e:	4620      	mov	r0, r4
    3280:	b002      	add	sp, #8
    3282:	bd10      	pop	{r4, pc}
    3284:	200019c4 	.word	0x200019c4

00003288 <_GLOBAL__sub_I__ZN15TeensyTimerTool12ErrorHandlerC2ER6Stream>:
    void attachErrFunc(errorFunc_t _errFunc)
    {
        errFunc = _errFunc;
    }

    3288:	b410      	push	{r4}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    328a:	4b05      	ldr	r3, [pc, #20]	; (32a0 <_GLOBAL__sub_I__ZN15TeensyTimerTool12ErrorHandlerC2ER6Stream+0x18>)
    328c:	2400      	movs	r4, #0
            digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
            delay(50);
        }
    }

    errorFunc_t errFunc;
    328e:	4a05      	ldr	r2, [pc, #20]	; (32a4 <_GLOBAL__sub_I__ZN15TeensyTimerTool12ErrorHandlerC2ER6Stream+0x1c>)
    3290:	609c      	str	r4, [r3, #8]
    3292:	4618      	mov	r0, r3
    3294:	4904      	ldr	r1, [pc, #16]	; (32a8 <_GLOBAL__sub_I__ZN15TeensyTimerTool12ErrorHandlerC2ER6Stream+0x20>)
    void attachErrFunc(errorFunc_t _errFunc)
    {
        errFunc = _errFunc;
    }

    3296:	f85d 4b04 	ldr.w	r4, [sp], #4
            digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
            delay(50);
        }
    }

    errorFunc_t errFunc;
    329a:	f002 b851 	b.w	5340 <__aeabi_atexit>
    329e:	bf00      	nop
    32a0:	200019c4 	.word	0x200019c4
    32a4:	2000069c 	.word	0x2000069c
    32a8:	00003251 	.word	0x00003251

000032ac <TeensyTimerTool::PITChannel::start()>:
        return errorCode::OK;
    }

    errorCode PITChannel::start()
    {
       IMXRT_PIT_CHANNELS[chNr].TCTRL = PIT_TCTRL_TEN | PIT_TCTRL_TIE;
    32ac:	68c1      	ldr	r1, [r0, #12]
    32ae:	2203      	movs	r2, #3
    32b0:	4b02      	ldr	r3, [pc, #8]	; (32bc <TeensyTimerTool::PITChannel::start()+0x10>)
       return errorCode::OK;
    }
    32b2:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode PITChannel::start()
    {
       IMXRT_PIT_CHANNELS[chNr].TCTRL = PIT_TCTRL_TEN | PIT_TCTRL_TIE;
    32b4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    32b8:	609a      	str	r2, [r3, #8]
       return errorCode::OK;
    }
    32ba:	4770      	bx	lr
    32bc:	40084100 	.word	0x40084100

000032c0 <TeensyTimerTool::PITChannel::stop()>:

    errorCode PITChannel::stop()
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    32c0:	68c1      	ldr	r1, [r0, #12]
    32c2:	2200      	movs	r2, #0
    32c4:	4b02      	ldr	r3, [pc, #8]	; (32d0 <TeensyTimerTool::PITChannel::stop()+0x10>)
        return errorCode::OK;
    }
    32c6:	4610      	mov	r0, r2
       return errorCode::OK;
    }

    errorCode PITChannel::stop()
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    32c8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    32cc:	609a      	str	r2, [r3, #8]
        return errorCode::OK;
    }
    32ce:	4770      	bx	lr
    32d0:	40084100 	.word	0x40084100

000032d4 <TeensyTimerTool::PITChannel::~PITChannel()>:
            callback();
            if (!isPeriodic) IMXRT_PIT_CHANNELS[chNr].TCTRL = 0; // switch off timer
        }
    }

    PITChannel::~PITChannel()
    32d4:	4a06      	ldr	r2, [pc, #24]	; (32f0 <TeensyTimerTool::PITChannel::~PITChannel()+0x1c>)
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    32d6:	6983      	ldr	r3, [r0, #24]
    32d8:	b510      	push	{r4, lr}
    32da:	4604      	mov	r4, r0
    32dc:	6002      	str	r2, [r0, #0]
    32de:	b123      	cbz	r3, 32ea <TeensyTimerTool::PITChannel::~PITChannel()+0x16>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    32e0:	f100 0110 	add.w	r1, r0, #16
    32e4:	2203      	movs	r2, #3
    32e6:	4608      	mov	r0, r1
    32e8:	4798      	blx	r3
    {
        callback = nullptr;
    }
    32ea:	4620      	mov	r0, r4
    32ec:	bd10      	pop	{r4, pc}
    32ee:	bf00      	nop
    32f0:	20000270 	.word	0x20000270

000032f4 <TeensyTimerTool::PITChannel::getMaxPeriod() const>:
        return errorCode::OK;
    }

    float PITChannel::getMaxPeriod() const
    {
        return (float)0xFFFF'FFFE / clockFactor / 1'000'000;
    32f4:	4b06      	ldr	r3, [pc, #24]	; (3310 <TeensyTimerTool::PITChannel::getMaxPeriod() const+0x1c>)
    32f6:	eddf 6a07 	vldr	s13, [pc, #28]	; 3314 <TeensyTimerTool::PITChannel::getMaxPeriod() const+0x20>
    32fa:	edd3 7a00 	vldr	s15, [r3]
    32fe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 3318 <TeensyTimerTool::PITChannel::getMaxPeriod() const+0x24>
    3302:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3306:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    }
    330a:	ee80 0a07 	vdiv.f32	s0, s0, s14
    330e:	4770      	bx	lr
    3310:	200006b0 	.word	0x200006b0
    3314:	4f800000 	.word	0x4f800000
    3318:	49742400 	.word	0x49742400

0000331c <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)>:
    // {
    //     return begin(cb, (float)micros, periodic);
    // }

    errorCode PITChannel::begin(callback_t cb, float micros, bool periodic)
    {
    331c:	b5f0      	push	{r4, r5, r6, r7, lr}
    331e:	688b      	ldr	r3, [r1, #8]
    3320:	4604      	mov	r4, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    3322:	2000      	movs	r0, #0
    3324:	ed2d 8b02 	vpush	{d8}
    3328:	b087      	sub	sp, #28
    332a:	eeb0 8a40 	vmov.f32	s16, s0
        isPeriodic = periodic;
    332e:	7222      	strb	r2, [r4, #8]
    3330:	9004      	str	r0, [sp, #16]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    3332:	2b00      	cmp	r3, #0
    3334:	d043      	beq.n	33be <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xa2>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    3336:	ad02      	add	r5, sp, #8
    3338:	460e      	mov	r6, r1
    333a:	2202      	movs	r2, #2
    333c:	4628      	mov	r0, r5
    333e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    3340:	68f7      	ldr	r7, [r6, #12]
	  _M_manager = __x._M_manager;
    3342:	68b6      	ldr	r6, [r6, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    3344:	f104 0310 	add.w	r3, r4, #16
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    3348:	e895 0003 	ldmia.w	r5, {r0, r1}
    334c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    3350:	e893 0003 	ldmia.w	r3, {r0, r1}
    3354:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    3358:	e89d 0003 	ldmia.w	sp, {r0, r1}
    335c:	e883 0003 	stmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    3360:	69a3      	ldr	r3, [r4, #24]
    3362:	69e2      	ldr	r2, [r4, #28]
    3364:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
    3366:	61a6      	str	r6, [r4, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    3368:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
    336a:	61e7      	str	r7, [r4, #28]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    336c:	b11b      	cbz	r3, 3376 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0x5a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    336e:	2203      	movs	r2, #3
    3370:	4629      	mov	r1, r5
    3372:	4628      	mov	r0, r5
    3374:	4798      	blx	r3
        callback = cb;

        if (isPeriodic)
    3376:	7a23      	ldrb	r3, [r4, #8]
    3378:	b1e3      	cbz	r3, 33b4 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0x98>
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
    337a:	4b1a      	ldr	r3, [pc, #104]	; (33e4 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xc8>)
        isPeriodic = periodic;
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    337c:	2000      	movs	r0, #0
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
    337e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 33e8 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xcc>
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;
    3382:	2101      	movs	r1, #1

            float tmp = micros * clockFactor;
    3384:	ed93 0a00 	vldr	s0, [r3]
        isPeriodic = periodic;
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    3388:	68e2      	ldr	r2, [r4, #12]
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
    338a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
        isPeriodic = periodic;
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    338e:	4b17      	ldr	r3, [pc, #92]	; (33ec <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xd0>)
    3390:	0112      	lsls	r2, r2, #4
    3392:	4d16      	ldr	r5, [pc, #88]	; (33ec <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xd0>)
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
    3394:	ee20 0a08 	vmul.f32	s0, s0, s16
        isPeriodic = periodic;
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    3398:	4413      	add	r3, r2
    339a:	6098      	str	r0, [r3, #8]
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
    339c:	eeb4 0ae7 	vcmpe.f32	s0, s15
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;
    33a0:	60d9      	str	r1, [r3, #12]

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
    33a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    33a6:	dc0e      	bgt.n	33c6 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xaa>
            {
                postError(errorCode::periodOverflow);
                IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
            } else
            {
                IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;
    33a8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    33ac:	ee17 3a90 	vmov	r3, s15
    33b0:	3b01      	subs	r3, #1
    33b2:	5153      	str	r3, [r2, r5]
            }
        }
        return errorCode::OK;
    }
    33b4:	2000      	movs	r0, #0
    33b6:	b007      	add	sp, #28
    33b8:	ecbd 8b02 	vpop	{d8}
    33bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    33be:	461e      	mov	r6, r3
    33c0:	9f05      	ldr	r7, [sp, #20]
    33c2:	ad02      	add	r5, sp, #8
    33c4:	e7be      	b.n	3344 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0x28>
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
            {
                postError(errorCode::periodOverflow);
    33c6:	f06f 0063 	mvn.w	r0, #99	; 0x63
    33ca:	f7ff ff4b 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
                IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
    33ce:	68e3      	ldr	r3, [r4, #12]
    33d0:	f06f 0201 	mvn.w	r2, #1
            {
                IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;
            }
        }
        return errorCode::OK;
    }
    33d4:	2000      	movs	r0, #0

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
            {
                postError(errorCode::periodOverflow);
                IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
    33d6:	011b      	lsls	r3, r3, #4
    33d8:	515a      	str	r2, [r3, r5]
            {
                IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;
            }
        }
        return errorCode::OK;
    }
    33da:	b007      	add	sp, #28
    33dc:	ecbd 8b02 	vpop	{d8}
    33e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33e2:	bf00      	nop
    33e4:	200006b0 	.word	0x200006b0
    33e8:	4f800000 	.word	0x4f800000
    33ec:	40084100 	.word	0x40084100

000033f0 <TeensyTimerTool::PITChannel::trigger(float)>:
    // {
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
    33f0:	b538      	push	{r3, r4, r5, lr}
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
    33f2:	4b1d      	ldr	r3, [pc, #116]	; (3468 <TeensyTimerTool::PITChannel::trigger(float)+0x78>)
    // {
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
    33f4:	4604      	mov	r4, r0
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
        if (tmp > 0xFFFF'FFFF)
    33f6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 346c <TeensyTimerTool::PITChannel::trigger(float)+0x7c>
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    33fa:	2000      	movs	r0, #0
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
    33fc:	edd3 7a00 	vldr	s15, [r3]
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;
    3400:	2301      	movs	r3, #1
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    3402:	68e1      	ldr	r1, [r4, #12]
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
    3404:	eef8 7a67 	vcvt.f32.u32	s15, s15
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    3408:	4a19      	ldr	r2, [pc, #100]	; (3470 <TeensyTimerTool::PITChannel::trigger(float)+0x80>)
    340a:	0109      	lsls	r1, r1, #4
    340c:	4615      	mov	r5, r2
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
    340e:	ee27 0a80 	vmul.f32	s0, s15, s0
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    3412:	440a      	add	r2, r1
    3414:	6090      	str	r0, [r2, #8]
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
        if (tmp > 0xFFFF'FFFF)
    3416:	eeb4 0ac7 	vcmpe.f32	s0, s14
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;
    341a:	60d3      	str	r3, [r2, #12]

        float tmp = delay * clockFactor;
        if (tmp > 0xFFFF'FFFF)
    341c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3420:	dc0e      	bgt.n	3440 <TeensyTimerTool::PITChannel::trigger(float)+0x50>
        {
            postError(errorCode::periodOverflow);
            IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
        } else
            IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;
    3422:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    3426:	ee10 3a10 	vmov	r3, s0
    342a:	3b01      	subs	r3, #1
    342c:	514b      	str	r3, [r1, r5]

        start();
    342e:	6823      	ldr	r3, [r4, #0]
    3430:	4910      	ldr	r1, [pc, #64]	; (3474 <TeensyTimerTool::PITChannel::trigger(float)+0x84>)
    3432:	699b      	ldr	r3, [r3, #24]
    3434:	428b      	cmp	r3, r1
    3436:	d113      	bne.n	3460 <TeensyTimerTool::PITChannel::trigger(float)+0x70>
        return errorCode::OK;
    }

    errorCode PITChannel::start()
    {
       IMXRT_PIT_CHANNELS[chNr].TCTRL = PIT_TCTRL_TEN | PIT_TCTRL_TIE;
    3438:	2303      	movs	r3, #3
            IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;

        start();

        return errorCode::OK;
    }
    343a:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode PITChannel::start()
    {
       IMXRT_PIT_CHANNELS[chNr].TCTRL = PIT_TCTRL_TEN | PIT_TCTRL_TIE;
    343c:	6093      	str	r3, [r2, #8]
            IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;

        start();

        return errorCode::OK;
    }
    343e:	bd38      	pop	{r3, r4, r5, pc}
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
        if (tmp > 0xFFFF'FFFF)
        {
            postError(errorCode::periodOverflow);
    3440:	f06f 0063 	mvn.w	r0, #99	; 0x63
    3444:	f7ff ff0e 	bl	3264 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
            IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
    3448:	68e3      	ldr	r3, [r4, #12]
    344a:	f06f 0101 	mvn.w	r1, #1
    344e:	462a      	mov	r2, r5
    3450:	011b      	lsls	r3, r3, #4
    3452:	5159      	str	r1, [r3, r5]
    3454:	441a      	add	r2, r3
        } else
            IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;

        start();
    3456:	6823      	ldr	r3, [r4, #0]
    3458:	4906      	ldr	r1, [pc, #24]	; (3474 <TeensyTimerTool::PITChannel::trigger(float)+0x84>)
    345a:	699b      	ldr	r3, [r3, #24]
    345c:	428b      	cmp	r3, r1
    345e:	d0eb      	beq.n	3438 <TeensyTimerTool::PITChannel::trigger(float)+0x48>
    3460:	4620      	mov	r0, r4
    3462:	4798      	blx	r3

        return errorCode::OK;
    }
    3464:	2000      	movs	r0, #0
    3466:	bd38      	pop	{r3, r4, r5, pc}
    3468:	200006b0 	.word	0x200006b0
    346c:	4f800000 	.word	0x4f800000
    3470:	40084100 	.word	0x40084100
    3474:	000032ad 	.word	0x000032ad

00003478 <__tcf_0>:
#include "PIT.h"

namespace TeensyTimerTool
{
    bool PIT_t::isInitialized = false;
    PITChannel PIT_t::channel[4] = {{0}, {1}, {2}, {3}};
    3478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    347c:	4c0f      	ldr	r4, [pc, #60]	; (34bc <__tcf_0+0x44>)
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
	    _M_manager = nullptr;
    347e:	2500      	movs	r5, #0
    3480:	4f0f      	ldr	r7, [pc, #60]	; (34c0 <__tcf_0+0x48>)
    3482:	f1a4 0680 	sub.w	r6, r4, #128	; 0x80
            callback();
            if (!isPeriodic) IMXRT_PIT_CHANNELS[chNr].TCTRL = 0; // switch off timer
        }
    }

    PITChannel::~PITChannel()
    3486:	f8df 803c 	ldr.w	r8, [pc, #60]	; 34c4 <__tcf_0+0x4c>
    348a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    348e:	f1a4 0e10 	sub.w	lr, r4, #16
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    3492:	2203      	movs	r2, #3
    3494:	4621      	mov	r1, r4
    3496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3498:	4620      	mov	r0, r4
    349a:	42bb      	cmp	r3, r7
    349c:	d10b      	bne.n	34b6 <__tcf_0+0x3e>
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    349e:	68a3      	ldr	r3, [r4, #8]
    34a0:	f844 8c10 	str.w	r8, [r4, #-16]
    34a4:	b113      	cbz	r3, 34ac <__tcf_0+0x34>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    34a6:	4798      	blx	r3
	    _M_manager = nullptr;
    34a8:	60a5      	str	r5, [r4, #8]
	    _M_invoker = nullptr;
    34aa:	60e5      	str	r5, [r4, #12]
    34ac:	3c20      	subs	r4, #32
    34ae:	42b4      	cmp	r4, r6
    34b0:	d1eb      	bne.n	348a <__tcf_0+0x12>
    34b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34b6:	4670      	mov	r0, lr
    34b8:	4798      	blx	r3
    34ba:	e7f7      	b.n	34ac <__tcf_0+0x34>
    34bc:	20001a44 	.word	0x20001a44
    34c0:	000032d5 	.word	0x000032d5
    34c4:	20000270 	.word	0x20000270

000034c8 <TeensyTimerTool::PITChannel::~PITChannel()>:
    34c8:	4a08      	ldr	r2, [pc, #32]	; (34ec <TeensyTimerTool::PITChannel::~PITChannel()+0x24>)
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    34ca:	6983      	ldr	r3, [r0, #24]
    34cc:	b510      	push	{r4, lr}
    34ce:	4604      	mov	r4, r0
    34d0:	6002      	str	r2, [r0, #0]
    34d2:	b123      	cbz	r3, 34de <TeensyTimerTool::PITChannel::~PITChannel()+0x16>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    34d4:	f100 0110 	add.w	r1, r0, #16
    34d8:	2203      	movs	r2, #3
    34da:	4608      	mov	r0, r1
    34dc:	4798      	blx	r3
    {
        callback = nullptr;
    }
    34de:	4620      	mov	r0, r4
    34e0:	2120      	movs	r1, #32
    34e2:	f001 fb6b 	bl	4bbc <operator delete(void*, unsigned int)>
    34e6:	4620      	mov	r0, r4
    34e8:	bd10      	pop	{r4, pc}
    34ea:	bf00      	nop
    34ec:	20000270 	.word	0x20000270

000034f0 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE>:

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    34f0:	481f      	ldr	r0, [pc, #124]	; (3570 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x80>)
    34f2:	2100      	movs	r1, #0
    34f4:	4b1f      	ldr	r3, [pc, #124]	; (3574 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x84>)
    34f6:	69c0      	ldr	r0, [r0, #28]
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    34f8:	4a1f      	ldr	r2, [pc, #124]	; (3578 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x88>)

     uint32_t PITChannel::clockFactor = 1;
}
    34fa:	b410      	push	{r4}
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    34fc:	0644      	lsls	r4, r0, #25
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    34fe:	601a      	str	r2, [r3, #0]
    3500:	6059      	str	r1, [r3, #4]
    3502:	60d9      	str	r1, [r3, #12]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    3504:	6199      	str	r1, [r3, #24]
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    3506:	d401      	bmi.n	350c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x1c>
    3508:	491c      	ldr	r1, [pc, #112]	; (357c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x8c>)
    350a:	6809      	ldr	r1, [r1, #0]
    350c:	4818      	ldr	r0, [pc, #96]	; (3570 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x80>)
    350e:	2100      	movs	r1, #0
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    3510:	2401      	movs	r4, #1
    3512:	621a      	str	r2, [r3, #32]
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    3514:	69c0      	ldr	r0, [r0, #28]
    3516:	6259      	str	r1, [r3, #36]	; 0x24
    3518:	0640      	lsls	r0, r0, #25
    351a:	6399      	str	r1, [r3, #56]	; 0x38
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    351c:	62dc      	str	r4, [r3, #44]	; 0x2c
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    351e:	d401      	bmi.n	3524 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x34>
    3520:	4916      	ldr	r1, [pc, #88]	; (357c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x8c>)
    3522:	6809      	ldr	r1, [r1, #0]
    3524:	4812      	ldr	r0, [pc, #72]	; (3570 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x80>)
    3526:	2100      	movs	r1, #0
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    3528:	2402      	movs	r4, #2
    352a:	641a      	str	r2, [r3, #64]	; 0x40
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    352c:	69c0      	ldr	r0, [r0, #28]
    352e:	6459      	str	r1, [r3, #68]	; 0x44
    3530:	6599      	str	r1, [r3, #88]	; 0x58
    3532:	0641      	lsls	r1, r0, #25
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    3534:	64dc      	str	r4, [r3, #76]	; 0x4c
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    3536:	d401      	bmi.n	353c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x4c>
    3538:	4910      	ldr	r1, [pc, #64]	; (357c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x8c>)
    353a:	6809      	ldr	r1, [r1, #0]
    353c:	4c0c      	ldr	r4, [pc, #48]	; (3570 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x80>)
    353e:	2100      	movs	r1, #0
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    3540:	661a      	str	r2, [r3, #96]	; 0x60
    3542:	2003      	movs	r0, #3
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    3544:	69e2      	ldr	r2, [r4, #28]
    3546:	6659      	str	r1, [r3, #100]	; 0x64
    3548:	6799      	str	r1, [r3, #120]	; 0x78
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    354a:	66d8      	str	r0, [r3, #108]	; 0x6c
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    354c:	0653      	lsls	r3, r2, #25
    354e:	d40d      	bmi.n	356c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x7c>
    3550:	4b0a      	ldr	r3, [pc, #40]	; (357c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x8c>)
    3552:	4a0b      	ldr	r2, [pc, #44]	; (3580 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x90>)
    3554:	681b      	ldr	r3, [r3, #0]
    3556:	fbb3 f3f2 	udiv	r3, r3, r2
    355a:	4c0a      	ldr	r4, [pc, #40]	; (3584 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x94>)
#include "PIT.h"

namespace TeensyTimerTool
{
    bool PIT_t::isInitialized = false;
    PITChannel PIT_t::channel[4] = {{0}, {1}, {2}, {3}};
    355c:	2000      	movs	r0, #0
    355e:	4a0a      	ldr	r2, [pc, #40]	; (3588 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x98>)
    3560:	6023      	str	r3, [r4, #0]
    3562:	490a      	ldr	r1, [pc, #40]	; (358c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x9c>)

     uint32_t PITChannel::clockFactor = 1;
}
    3564:	f85d 4b04 	ldr.w	r4, [sp], #4
#include "PIT.h"

namespace TeensyTimerTool
{
    bool PIT_t::isInitialized = false;
    PITChannel PIT_t::channel[4] = {{0}, {1}, {2}, {3}};
    3568:	f001 beea 	b.w	5340 <__aeabi_atexit>
    356c:	2318      	movs	r3, #24
    356e:	e7f4      	b.n	355a <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x6a>
    3570:	400fc000 	.word	0x400fc000
    3574:	200019d4 	.word	0x200019d4
    3578:	20000270 	.word	0x20000270
    357c:	200006d4 	.word	0x200006d4
    3580:	000f4240 	.word	0x000f4240
    3584:	200006b0 	.word	0x200006b0
    3588:	2000069c 	.word	0x2000069c
    358c:	00003479 	.word	0x00003479

00003590 <EventResponder::~EventResponder()>:
class EventResponder
{
public:
	constexpr EventResponder() {
	}
	~EventResponder() {
    3590:	b538      	push	{r3, r4, r5, lr}
    3592:	4b06      	ldr	r3, [pc, #24]	; (35ac <EventResponder::~EventResponder()+0x1c>)
    3594:	4605      	mov	r5, r0
    3596:	6003      	str	r3, [r0, #0]
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3598:	f3ef 8410 	mrs	r4, PRIMASK
		__disable_irq();
    359c:	b672      	cpsid	i

	// Do not call any function.  The user's program must occasionally check
	// whether the event has occurred, or use one of the wait functions.
	void detach() {
		bool irq = disableInterrupts();
		detachNoInterrupts();
    359e:	f001 fabf 	bl	4b20 <EventResponder::detachNoInterrupts()>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    35a2:	b904      	cbnz	r4, 35a6 <EventResponder::~EventResponder()+0x16>
    35a4:	b662      	cpsie	i
public:
	constexpr EventResponder() {
	}
	~EventResponder() {
		detach();
	}
    35a6:	4628      	mov	r0, r5
    35a8:	bd38      	pop	{r3, r4, r5, pc}
    35aa:	bf00      	nop
    35ac:	200002b8 	.word	0x200002b8

000035b0 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    35b0:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    35b2:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    35b4:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    35b6:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    35b8:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    35ba:	d003      	beq.n	35c4 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    35bc:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    35c0:	f001 ba4c 	b.w	4a5c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    35c4:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    35c6:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    35ca:	4718      	bx	r3

000035cc <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)>:
    {
        static EventResponder er;

        void initYieldHook()
        {
            er.attach([](EventResponderRef r)
    35cc:	b570      	push	{r4, r5, r6, lr}
    35ce:	4c14      	ldr	r4, [pc, #80]	; (3620 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x54>)
    35d0:	4606      	mov	r6, r0
    35d2:	f104 0550 	add.w	r5, r4, #80	; 0x50

    void TCK_t::tick()
    {
        for (unsigned i = 0; i < NR_OF_TCK_TIMERS; i++)
        {
            if (channels[i] != nullptr)
    35d6:	f854 3f04 	ldr.w	r3, [r4, #4]!
            {
                channels[i]->tick();
    35da:	4618      	mov	r0, r3

    void TCK_t::tick()
    {
        for (unsigned i = 0; i < NR_OF_TCK_TIMERS; i++)
        {
            if (channels[i] != nullptr)
    35dc:	b113      	cbz	r3, 35e4 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x18>
            {
                channels[i]->tick();
    35de:	681b      	ldr	r3, [r3, #0]
    35e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    35e2:	4798      	blx	r3
        }
    }

    void TCK_t::tick()
    {
        for (unsigned i = 0; i < NR_OF_TCK_TIMERS; i++)
    35e4:	42ac      	cmp	r4, r5
    35e6:	d1f6      	bne.n	35d6 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0xa>
            {
                TeensyTimerTool::TCK_t::tick();
                r.triggerEvent();
    35e8:	6833      	ldr	r3, [r6, #0]
    35ea:	4a0e      	ldr	r2, [pc, #56]	; (3624 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x58>)
    35ec:	681b      	ldr	r3, [r3, #0]
    35ee:	4293      	cmp	r3, r2
    35f0:	d10a      	bne.n	3608 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x3c>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    35f2:	7f32      	ldrb	r2, [r6, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    35f4:	2300      	movs	r3, #0
		_data = data;
		if (_type == EventTypeImmediate) {
    35f6:	2a02      	cmp	r2, #2

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    35f8:	6073      	str	r3, [r6, #4]
		_data = data;
    35fa:	60f3      	str	r3, [r6, #12]
		if (_type == EventTypeImmediate) {
    35fc:	d00a      	beq.n	3614 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x48>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    35fe:	4630      	mov	r0, r6
            });
    3600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3604:	f001 ba2a 	b.w	4a5c <EventResponder::triggerEventNotImmediate()>
        void initYieldHook()
        {
            er.attach([](EventResponderRef r)
            {
                TeensyTimerTool::TCK_t::tick();
                r.triggerEvent();
    3608:	2200      	movs	r2, #0
    360a:	4630      	mov	r0, r6
    360c:	4611      	mov	r1, r2
            });
    360e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        void initYieldHook()
        {
            er.attach([](EventResponderRef r)
            {
                TeensyTimerTool::TCK_t::tick();
                r.triggerEvent();
    3612:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3614:	68b3      	ldr	r3, [r6, #8]
    3616:	4630      	mov	r0, r6
            });
    3618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    361c:	4718      	bx	r3
    361e:	bf00      	nop
    3620:	20001a50 	.word	0x20001a50
    3624:	000035b1 	.word	0x000035b1

00003628 <TeensyTimerTool::initYieldHook()>:
    namespace TeensyTimerTool
    {
        static EventResponder er;

        void initYieldHook()
        {
    3628:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    362a:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    362e:	b672      	cpsid	i
	// Attach a function to be called from yield().  This should be the
	// default way to use EventResponder.  Calls from yield() allow use
	// of Arduino libraries, String, Serial, etc.
	void attach(EventResponderFunction function, uint8_t priority=128) {
		bool irq = disableInterrupts();
		detachNoInterrupts();
    3630:	4c12      	ldr	r4, [pc, #72]	; (367c <TeensyTimerTool::initYieldHook()+0x54>)
    3632:	4620      	mov	r0, r4
    3634:	f001 fa74 	bl	4b20 <EventResponder::detachNoInterrupts()>
		_function = function;
		_type = EventTypeYield;
		yield_active_check_flags |= YIELD_CHECK_EVENT_RESPONDER; // user setup a yield type...
    3638:	4a11      	ldr	r2, [pc, #68]	; (3680 <TeensyTimerTool::initYieldHook()+0x58>)
	// default way to use EventResponder.  Calls from yield() allow use
	// of Arduino libraries, String, Serial, etc.
	void attach(EventResponderFunction function, uint8_t priority=128) {
		bool irq = disableInterrupts();
		detachNoInterrupts();
		_function = function;
    363a:	4812      	ldr	r0, [pc, #72]	; (3684 <TeensyTimerTool::initYieldHook()+0x5c>)
		_type = EventTypeYield;
    363c:	2101      	movs	r1, #1
		yield_active_check_flags |= YIELD_CHECK_EVENT_RESPONDER; // user setup a yield type...
    363e:	7813      	ldrb	r3, [r2, #0]
	// default way to use EventResponder.  Calls from yield() allow use
	// of Arduino libraries, String, Serial, etc.
	void attach(EventResponderFunction function, uint8_t priority=128) {
		bool irq = disableInterrupts();
		detachNoInterrupts();
		_function = function;
    3640:	60a0      	str	r0, [r4, #8]
		_type = EventTypeYield;
		yield_active_check_flags |= YIELD_CHECK_EVENT_RESPONDER; // user setup a yield type...
    3642:	f043 0304 	orr.w	r3, r3, #4
	// of Arduino libraries, String, Serial, etc.
	void attach(EventResponderFunction function, uint8_t priority=128) {
		bool irq = disableInterrupts();
		detachNoInterrupts();
		_function = function;
		_type = EventTypeYield;
    3646:	7721      	strb	r1, [r4, #28]
		yield_active_check_flags |= YIELD_CHECK_EVENT_RESPONDER; // user setup a yield type...
    3648:	7013      	strb	r3, [r2, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    364a:	b955      	cbnz	r5, 3662 <TeensyTimerTool::initYieldHook()+0x3a>
    364c:	b662      	cpsie	i
    364e:	7f23      	ldrb	r3, [r4, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3650:	6065      	str	r5, [r4, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3652:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3654:	60e5      	str	r5, [r4, #12]
		if (_type == EventTypeImmediate) {
    3656:	d00c      	beq.n	3672 <TeensyTimerTool::initYieldHook()+0x4a>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3658:	4808      	ldr	r0, [pc, #32]	; (367c <TeensyTimerTool::initYieldHook()+0x54>)
            {
                TeensyTimerTool::TCK_t::tick();
                r.triggerEvent();
            });
            er.triggerEvent();
        }
    365a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    365e:	f001 b9fd 	b.w	4a5c <EventResponder::triggerEventNotImmediate()>

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3662:	2300      	movs	r3, #0
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3664:	4805      	ldr	r0, [pc, #20]	; (367c <TeensyTimerTool::initYieldHook()+0x54>)

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3666:	6063      	str	r3, [r4, #4]
		_data = data;
    3668:	60e3      	str	r3, [r4, #12]
    366a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    366e:	f001 b9f5 	b.w	4a5c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3672:	68a3      	ldr	r3, [r4, #8]
    3674:	4620      	mov	r0, r4
    3676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    367a:	4718      	bx	r3
    367c:	200006b4 	.word	0x200006b4
    3680:	2000070a 	.word	0x2000070a
    3684:	000035cd 	.word	0x000035cd

00003688 <_GLOBAL__sub_I__ZN15TeensyTimerTool5TCK_t13isInitializedE>:

    #include "EventResponder.h"

    namespace TeensyTimerTool
    {
        static EventResponder er;
    3688:	4a02      	ldr	r2, [pc, #8]	; (3694 <_GLOBAL__sub_I__ZN15TeensyTimerTool5TCK_t13isInitializedE+0xc>)
    368a:	4903      	ldr	r1, [pc, #12]	; (3698 <_GLOBAL__sub_I__ZN15TeensyTimerTool5TCK_t13isInitializedE+0x10>)
    368c:	4803      	ldr	r0, [pc, #12]	; (369c <_GLOBAL__sub_I__ZN15TeensyTimerTool5TCK_t13isInitializedE+0x14>)
    368e:	f001 be57 	b.w	5340 <__aeabi_atexit>
    3692:	bf00      	nop
    3694:	2000069c 	.word	0x2000069c
    3698:	00003591 	.word	0x00003591
    369c:	200006b4 	.word	0x200006b4

000036a0 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    36a0:	4a95      	ldr	r2, [pc, #596]	; (38f8 <set_arm_clock+0x258>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    36a2:	4b96      	ldr	r3, [pc, #600]	; (38fc <set_arm_clock+0x25c>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    36a4:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    36a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    36aa:	4c95      	ldr	r4, [pc, #596]	; (3900 <set_arm_clock+0x260>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    36ac:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    36b0:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    36b2:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    36b4:	d91c      	bls.n	36f0 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    36b6:	4b93      	ldr	r3, [pc, #588]	; (3904 <set_arm_clock+0x264>)
    36b8:	4298      	cmp	r0, r3
    36ba:	f240 8113 	bls.w	38e4 <set_arm_clock+0x244>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    36be:	4b92      	ldr	r3, [pc, #584]	; (3908 <set_arm_clock+0x268>)
    36c0:	f240 6527 	movw	r5, #1575	; 0x627
    36c4:	4f91      	ldr	r7, [pc, #580]	; (390c <set_arm_clock+0x26c>)
    36c6:	4403      	add	r3, r0
    36c8:	4c91      	ldr	r4, [pc, #580]	; (3910 <set_arm_clock+0x270>)
    36ca:	0a1a      	lsrs	r2, r3, #8
    36cc:	fba7 3202 	umull	r3, r2, r7, r2
    36d0:	09d3      	lsrs	r3, r2, #7
    36d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    36d6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    36da:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    36de:	42ab      	cmp	r3, r5
    36e0:	bf28      	it	cs
    36e2:	462b      	movcs	r3, r5
    36e4:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    36e8:	fba4 3503 	umull	r3, r5, r4, r3
    36ec:	08ed      	lsrs	r5, r5, #3
    36ee:	e004      	b.n	36fa <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    36f0:	4d88      	ldr	r5, [pc, #544]	; (3914 <set_arm_clock+0x274>)
    36f2:	42a8      	cmp	r0, r5
    36f4:	bf94      	ite	ls
    36f6:	2506      	movls	r5, #6
    36f8:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    36fa:	4a80      	ldr	r2, [pc, #512]	; (38fc <set_arm_clock+0x25c>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    36fc:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3700:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3704:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3706:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    370a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    370e:	d20a      	bcs.n	3726 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    3710:	4b7b      	ldr	r3, [pc, #492]	; (3900 <set_arm_clock+0x260>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3712:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3716:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3718:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    371a:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    371c:	6813      	ldr	r3, [r2, #0]
    371e:	2b00      	cmp	r3, #0
    3720:	dafc      	bge.n	371c <set_arm_clock+0x7c>
    3722:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    3726:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    372a:	d12f      	bne.n	378c <set_arm_clock+0xec>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    372c:	4c7a      	ldr	r4, [pc, #488]	; (3918 <set_arm_clock+0x278>)
    372e:	4a7b      	ldr	r2, [pc, #492]	; (391c <set_arm_clock+0x27c>)
    3730:	f8d4 c010 	ldr.w	ip, [r4, #16]
    3734:	4614      	mov	r4, r2
    3736:	ea0c 0202 	and.w	r2, ip, r2
    373a:	42a2      	cmp	r2, r4
    373c:	bf0a      	itet	eq
    373e:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    3742:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    3746:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3748:	ea8e 0403 	eor.w	r4, lr, r3
    374c:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    3750:	d006      	beq.n	3760 <set_arm_clock+0xc0>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    3752:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    3756:	4c69      	ldr	r4, [pc, #420]	; (38fc <set_arm_clock+0x25c>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    3758:	ea4e 0e03 	orr.w	lr, lr, r3
			CCM_CBCDR = cbcdr;
    375c:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3760:	ea81 0302 	eor.w	r3, r1, r2
    3764:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    3768:	d008      	beq.n	377c <set_arm_clock+0xdc>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    376a:	4b64      	ldr	r3, [pc, #400]	; (38fc <set_arm_clock+0x25c>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    376c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    3770:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    3772:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    3774:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    3776:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3778:	071c      	lsls	r4, r3, #28
    377a:	d4fc      	bmi.n	3776 <set_arm_clock+0xd6>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    377c:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    3780:	4a5e      	ldr	r2, [pc, #376]	; (38fc <set_arm_clock+0x25c>)
    3782:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3786:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3788:	0699      	lsls	r1, r3, #26
    378a:	d4fc      	bmi.n	3786 <set_arm_clock+0xe6>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    378c:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    378e:	4c64      	ldr	r4, [pc, #400]	; (3920 <set_arm_clock+0x280>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    3790:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    3792:	fb01 f302 	mul.w	r3, r1, r2
    3796:	fb00 f303 	mul.w	r3, r0, r3
    379a:	42a3      	cmp	r3, r4
    379c:	d809      	bhi.n	37b2 <set_arm_clock+0x112>
		if (div_arm < 8) {
    379e:	2a07      	cmp	r2, #7
    37a0:	f200 8095 	bhi.w	38ce <set_arm_clock+0x22e>
			div_arm = div_arm + 1;
    37a4:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    37a6:	fb01 f302 	mul.w	r3, r1, r2
    37aa:	fb00 f303 	mul.w	r3, r0, r3
    37ae:	42a3      	cmp	r3, r4
    37b0:	d9f5      	bls.n	379e <set_arm_clock+0xfe>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    37b2:	485c      	ldr	r0, [pc, #368]	; (3924 <set_arm_clock+0x284>)
    37b4:	4c5c      	ldr	r4, [pc, #368]	; (3928 <set_arm_clock+0x288>)
    37b6:	4418      	add	r0, r3
    37b8:	fba4 0300 	umull	r0, r3, r4, r0
    37bc:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    37be:	2b6c      	cmp	r3, #108	; 0x6c
    37c0:	f200 808b 	bhi.w	38da <set_arm_clock+0x23a>
	if (mult < 54) mult = 54;
    37c4:	2b35      	cmp	r3, #53	; 0x35
    37c6:	f200 808f 	bhi.w	38e8 <set_arm_clock+0x248>
    37ca:	f8df 8188 	ldr.w	r8, [pc, #392]	; 3954 <set_arm_clock+0x2b4>
    37ce:	2336      	movs	r3, #54	; 0x36
    37d0:	4856      	ldr	r0, [pc, #344]	; (392c <set_arm_clock+0x28c>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    37d2:	f8df c144 	ldr.w	ip, [pc, #324]	; 3918 <set_arm_clock+0x278>
    37d6:	4c56      	ldr	r4, [pc, #344]	; (3930 <set_arm_clock+0x290>)
    37d8:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    37dc:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    37e0:	ea09 0404 	and.w	r4, r9, r4
    37e4:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    37e6:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    37ea:	d00b      	beq.n	3804 <set_arm_clock+0x164>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    37ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    37f0:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    37f4:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    37f6:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    37fa:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    37fe:	6823      	ldr	r3, [r4, #0]
    3800:	2b00      	cmp	r3, #0
    3802:	dafc      	bge.n	37fe <set_arm_clock+0x15e>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    3804:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 38fc <set_arm_clock+0x25c>
    3808:	3a01      	subs	r2, #1
    380a:	f8dc 3010 	ldr.w	r3, [ip, #16]
    380e:	f003 0307 	and.w	r3, r3, #7
    3812:	4293      	cmp	r3, r2
    3814:	d007      	beq.n	3826 <set_arm_clock+0x186>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    3816:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    381a:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    381c:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    3820:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3822:	03db      	lsls	r3, r3, #15
    3824:	d4fc      	bmi.n	3820 <set_arm_clock+0x180>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3826:	3901      	subs	r1, #1
    3828:	0289      	lsls	r1, r1, #10
    382a:	ea8e 0301 	eor.w	r3, lr, r1
    382e:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    3832:	d00c      	beq.n	384e <set_arm_clock+0x1ae>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    3834:	4b31      	ldr	r3, [pc, #196]	; (38fc <set_arm_clock+0x25c>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    3836:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    383a:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    383e:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    3840:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    3844:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    3848:	6c93      	ldr	r3, [r2, #72]	; 0x48
    384a:	0799      	lsls	r1, r3, #30
    384c:	d4fc      	bmi.n	3848 <set_arm_clock+0x1a8>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    384e:	4b39      	ldr	r3, [pc, #228]	; (3934 <set_arm_clock+0x294>)
    3850:	4939      	ldr	r1, [pc, #228]	; (3938 <set_arm_clock+0x298>)
    3852:	4403      	add	r3, r0
    3854:	09db      	lsrs	r3, r3, #7
    3856:	fba1 3103 	umull	r3, r1, r1, r3
    385a:	0b09      	lsrs	r1, r1, #12
    385c:	2904      	cmp	r1, #4
    385e:	bf28      	it	cs
    3860:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    3862:	1e4b      	subs	r3, r1, #1
    3864:	021b      	lsls	r3, r3, #8
    3866:	ea8e 0203 	eor.w	r2, lr, r3
    386a:	f412 7f40 	tst.w	r2, #768	; 0x300
    386e:	d007      	beq.n	3880 <set_arm_clock+0x1e0>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    3870:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3874:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    3878:	4a20      	ldr	r2, [pc, #128]	; (38fc <set_arm_clock+0x25c>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    387a:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    387e:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    3880:	4b1e      	ldr	r3, [pc, #120]	; (38fc <set_arm_clock+0x25c>)
    3882:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3884:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    3886:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    388a:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    388c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    388e:	069b      	lsls	r3, r3, #26
    3890:	d4fc      	bmi.n	388c <set_arm_clock+0x1ec>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3892:	4b2a      	ldr	r3, [pc, #168]	; (393c <set_arm_clock+0x29c>)
    3894:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    3898:	4c29      	ldr	r4, [pc, #164]	; (3940 <set_arm_clock+0x2a0>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    389a:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    389c:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    38a0:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    38a2:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    38a6:	4c27      	ldr	r4, [pc, #156]	; (3944 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    38a8:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    38ac:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    38b0:	4a25      	ldr	r2, [pc, #148]	; (3948 <set_arm_clock+0x2a8>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    38b2:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    38b4:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    38b6:	d208      	bcs.n	38ca <set_arm_clock+0x22a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    38b8:	4b11      	ldr	r3, [pc, #68]	; (3900 <set_arm_clock+0x260>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    38ba:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    38be:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    38c0:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    38c2:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    38c4:	6813      	ldr	r3, [r2, #0]
    38c6:	2b00      	cmp	r3, #0
    38c8:	dafc      	bge.n	38c4 <set_arm_clock+0x224>
	}

	return frequency;
}
    38ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    38ce:	2904      	cmp	r1, #4
    38d0:	f63f af6f 	bhi.w	37b2 <set_arm_clock+0x112>
				div_ahb = div_ahb + 1;
    38d4:	3101      	adds	r1, #1
				div_arm = 1;
    38d6:	2201      	movs	r2, #1
    38d8:	e75b      	b.n	3792 <set_arm_clock+0xf2>
    38da:	f8df 807c 	ldr.w	r8, [pc, #124]	; 3958 <set_arm_clock+0x2b8>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    38de:	236c      	movs	r3, #108	; 0x6c
    38e0:	481a      	ldr	r0, [pc, #104]	; (394c <set_arm_clock+0x2ac>)
    38e2:	e776      	b.n	37d2 <set_arm_clock+0x132>
    38e4:	2512      	movs	r5, #18
    38e6:	e708      	b.n	36fa <set_arm_clock+0x5a>
    38e8:	4819      	ldr	r0, [pc, #100]	; (3950 <set_arm_clock+0x2b0>)
    38ea:	f8df 8070 	ldr.w	r8, [pc, #112]	; 395c <set_arm_clock+0x2bc>
    38ee:	fb00 f003 	mul.w	r0, r0, r3
    38f2:	ea43 0808 	orr.w	r8, r3, r8
    38f6:	e76c      	b.n	37d2 <set_arm_clock+0x132>
    38f8:	1f78a400 	.word	0x1f78a400
    38fc:	400fc000 	.word	0x400fc000
    3900:	40080000 	.word	0x40080000
    3904:	23c34600 	.word	0x23c34600
    3908:	dc3cba00 	.word	0xdc3cba00
    390c:	004cb223 	.word	0x004cb223
    3910:	51eb851f 	.word	0x51eb851f
    3914:	016e3600 	.word	0x016e3600
    3918:	400d8000 	.word	0x400d8000
    391c:	80003040 	.word	0x80003040
    3920:	269fb1ff 	.word	0x269fb1ff
    3924:	005b8d80 	.word	0x005b8d80
    3928:	165e9f81 	.word	0x165e9f81
    392c:	269fb200 	.word	0x269fb200
    3930:	8001307f 	.word	0x8001307f
    3934:	08f0d17f 	.word	0x08f0d17f
    3938:	00e5109f 	.word	0x00e5109f
    393c:	431bde83 	.word	0x431bde83
    3940:	200006d8 	.word	0x200006d8
    3944:	200006d4 	.word	0x200006d4
    3948:	20001aac 	.word	0x20001aac
    394c:	4d3f6400 	.word	0x4d3f6400
    3950:	00b71b00 	.word	0x00b71b00
    3954:	80002036 	.word	0x80002036
    3958:	8000206c 	.word	0x8000206c
    395c:	80002000 	.word	0x80002000

00003960 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    3960:	2800      	cmp	r0, #0
    3962:	d057      	beq.n	3a14 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3964:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    3966:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    396a:	b085      	sub	sp, #20
    396c:	4683      	mov	fp, r0
    396e:	4c2a      	ldr	r4, [pc, #168]	; (3a18 <delay+0xb8>)
    3970:	4d2a      	ldr	r5, [pc, #168]	; (3a1c <delay+0xbc>)
    3972:	4e2b      	ldr	r6, [pc, #172]	; (3a20 <delay+0xc0>)
    3974:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3978:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    397c:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    397e:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3980:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    3984:	2900      	cmp	r1, #0
    3986:	d1f7      	bne.n	3978 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3988:	4f26      	ldr	r7, [pc, #152]	; (3a24 <delay+0xc4>)
    398a:	e9cd 8902 	strd	r8, r9, [sp, #8]
    398e:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    3990:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3992:	4a25      	ldr	r2, [pc, #148]	; (3a28 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    3994:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3998:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    399a:	6812      	ldr	r2, [r2, #0]
    399c:	2701      	movs	r7, #1
    399e:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    39a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    39a6:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    39a8:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    39aa:	428b      	cmp	r3, r1
    39ac:	bf08      	it	eq
    39ae:	4542      	cmpeq	r2, r8
    39b0:	bf2c      	ite	cs
    39b2:	46c2      	movcs	sl, r8
    39b4:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    39b6:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    39ba:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    39be:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    39c0:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    39c2:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    39c6:	2b00      	cmp	r3, #0
    39c8:	d1f7      	bne.n	39ba <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    39ca:	9801      	ldr	r0, [sp, #4]
    39cc:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    39ce:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    39d0:	4815      	ldr	r0, [pc, #84]	; (3a28 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    39d2:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    39d6:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    39d8:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    39dc:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    39e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    39e4:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    39e8:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    39ea:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    39ec:	4299      	cmp	r1, r3
    39ee:	bf08      	it	eq
    39f0:	4540      	cmpeq	r0, r8
    39f2:	bf2c      	ite	cs
    39f4:	4643      	movcs	r3, r8
    39f6:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    39f8:	441a      	add	r2, r3
    39fa:	4572      	cmp	r2, lr
    39fc:	d307      	bcc.n	3a0e <delay+0xae>
			if (--msec == 0) return;
    39fe:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    3a02:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    3a06:	d1d8      	bne.n	39ba <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    3a08:	b005      	add	sp, #20
    3a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    3a0e:	f001 f8d7 	bl	4bc0 <yield>
	}
    3a12:	e7d2      	b.n	39ba <delay+0x5a>
    3a14:	4770      	bx	lr
    3a16:	bf00      	nop
    3a18:	20001d40 	.word	0x20001d40
    3a1c:	20001ab0 	.word	0x20001ab0
    3a20:	20001aa8 	.word	0x20001aa8
    3a24:	e0001004 	.word	0xe0001004
    3a28:	20001aac 	.word	0x20001aac

00003a2c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    3a2c:	2836      	cmp	r0, #54	; 0x36
    3a2e:	d81c      	bhi.n	3a6a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    3a30:	0100      	lsls	r0, r0, #4
    3a32:	4a1a      	ldr	r2, [pc, #104]	; (3a9c <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3a34:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    3a36:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3a3a:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    3a3c:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3a3e:	d015      	beq.n	3a6c <pinMode+0x40>
    3a40:	2904      	cmp	r1, #4
    3a42:	d013      	beq.n	3a6c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3a44:	68dc      	ldr	r4, [r3, #12]
    3a46:	6842      	ldr	r2, [r0, #4]
    3a48:	ea22 0204 	bic.w	r2, r2, r4
    3a4c:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3a4e:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    3a50:	b1e9      	cbz	r1, 3a8e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    3a52:	2902      	cmp	r1, #2
    3a54:	d01e      	beq.n	3a94 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    3a56:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    3a58:	685b      	ldr	r3, [r3, #4]
}
    3a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3a5e:	bf0c      	ite	eq
    3a60:	490f      	ldreq	r1, [pc, #60]	; (3aa0 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    3a62:	4910      	ldrne	r1, [pc, #64]	; (3aa4 <pinMode+0x78>)
    3a64:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    3a66:	2215      	movs	r2, #21
    3a68:	601a      	str	r2, [r3, #0]
}
    3a6a:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    3a6c:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    3a6e:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    3a70:	6844      	ldr	r4, [r0, #4]
    3a72:	ea42 0204 	orr.w	r2, r2, r4
    3a76:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3a78:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    3a7a:	d008      	beq.n	3a8e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    3a7c:	f640 0138 	movw	r1, #2104	; 0x838
    3a80:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    3a82:	685b      	ldr	r3, [r3, #4]
    3a84:	2215      	movs	r2, #21
}
    3a86:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    3a8a:	601a      	str	r2, [r3, #0]
}
    3a8c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3a8e:	2138      	movs	r1, #56	; 0x38
    3a90:	6011      	str	r1, [r2, #0]
    3a92:	e7f6      	b.n	3a82 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3a94:	4904      	ldr	r1, [pc, #16]	; (3aa8 <pinMode+0x7c>)
    3a96:	6011      	str	r1, [r2, #0]
    3a98:	e7f3      	b.n	3a82 <pinMode+0x56>
    3a9a:	bf00      	nop
    3a9c:	200002bc 	.word	0x200002bc
    3aa0:	00013038 	.word	0x00013038
    3aa4:	00010038 	.word	0x00010038
    3aa8:	0001f038 	.word	0x0001f038

00003aac <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    3aac:	2004      	movs	r0, #4
    3aae:	4671      	mov	r1, lr
    3ab0:	4208      	tst	r0, r1
    3ab2:	d003      	beq.n	3abc <_MSP>
    3ab4:	f3ef 8009 	mrs	r0, PSP
    3ab8:	f000 b808 	b.w	3acc <HardFault_HandlerC>

00003abc <_MSP>:
    3abc:	f3ef 8008 	mrs	r0, MSP
    3ac0:	f000 b804 	b.w	3acc <HardFault_HandlerC>

00003ac4 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    3ac4:	4770      	bx	lr
    3ac6:	bf00      	nop

00003ac8 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    3ac8:	4770      	bx	lr
    3aca:	bf00      	nop

00003acc <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3acc:	4b1b      	ldr	r3, [pc, #108]	; (3b3c <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    3ace:	2105      	movs	r1, #5
    3ad0:	4a1b      	ldr	r2, [pc, #108]	; (3b40 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    3ad2:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    3ad4:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    3ad6:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    3ada:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    3adc:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    3ae0:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3ae2:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    3ae4:	4c17      	ldr	r4, [pc, #92]	; (3b44 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3ae6:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    3ae8:	4817      	ldr	r0, [pc, #92]	; (3b48 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3aea:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    3aec:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    3af0:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    3af4:	6823      	ldr	r3, [r4, #0]
    3af6:	4283      	cmp	r3, r0
    3af8:	d902      	bls.n	3b00 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    3afa:	4814      	ldr	r0, [pc, #80]	; (3b4c <HardFault_HandlerC+0x80>)
    3afc:	f7ff fdd0 	bl	36a0 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    3b00:	4d0e      	ldr	r5, [pc, #56]	; (3b3c <HardFault_HandlerC+0x70>)
    3b02:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    3b04:	2000      	movs	r0, #0
    3b06:	4a12      	ldr	r2, [pc, #72]	; (3b50 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    3b08:	4912      	ldr	r1, [pc, #72]	; (3b54 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    3b0a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    3b0e:	9001      	str	r0, [sp, #4]
    3b10:	9b01      	ldr	r3, [sp, #4]
    3b12:	4293      	cmp	r3, r2
    3b14:	d805      	bhi.n	3b22 <HardFault_HandlerC+0x56>
    3b16:	9b01      	ldr	r3, [sp, #4]
    3b18:	3301      	adds	r3, #1
    3b1a:	9301      	str	r3, [sp, #4]
    3b1c:	9b01      	ldr	r3, [sp, #4]
    3b1e:	4293      	cmp	r3, r2
    3b20:	d9f9      	bls.n	3b16 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    3b22:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    3b26:	9001      	str	r0, [sp, #4]
    3b28:	9b01      	ldr	r3, [sp, #4]
    3b2a:	428b      	cmp	r3, r1
    3b2c:	d8ed      	bhi.n	3b0a <HardFault_HandlerC+0x3e>
    3b2e:	9b01      	ldr	r3, [sp, #4]
    3b30:	3301      	adds	r3, #1
    3b32:	9301      	str	r3, [sp, #4]
    3b34:	9b01      	ldr	r3, [sp, #4]
    3b36:	428b      	cmp	r3, r1
    3b38:	d9f9      	bls.n	3b2e <HardFault_HandlerC+0x62>
    3b3a:	e7e6      	b.n	3b0a <HardFault_HandlerC+0x3e>
    3b3c:	401bc000 	.word	0x401bc000
    3b40:	401f8000 	.word	0x401f8000
    3b44:	200006d8 	.word	0x200006d8
    3b48:	23c345ff 	.word	0x23c345ff
    3b4c:	11e1a300 	.word	0x11e1a300
    3b50:	000f423f 	.word	0x000f423f
    3b54:	0089543f 	.word	0x0089543f

00003b58 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    3b58:	4a09      	ldr	r2, [pc, #36]	; (3b80 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    3b5a:	b508      	push	{r3, lr}
        char *prev = __brkval;
    3b5c:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
    3b5e:	b120      	cbz	r0, 3b6a <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    3b60:	4418      	add	r0, r3
    3b62:	4908      	ldr	r1, [pc, #32]	; (3b84 <_sbrk+0x2c>)
    3b64:	4288      	cmp	r0, r1
    3b66:	d802      	bhi.n	3b6e <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    3b68:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
    3b6a:	4618      	mov	r0, r3
    3b6c:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    3b6e:	f001 fbf3 	bl	5358 <__errno>
    3b72:	220c      	movs	r2, #12
                        return (void *)-1;
    3b74:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    3b78:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    3b7a:	4618      	mov	r0, r3
    3b7c:	bd08      	pop	{r3, pc}
    3b7e:	bf00      	nop
    3b80:	200006dc 	.word	0x200006dc
    3b84:	20280000 	.word	0x20280000

00003b88 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    3b88:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    3b8a:	4a06      	ldr	r2, [pc, #24]	; (3ba4 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    3b8c:	2107      	movs	r1, #7
    3b8e:	4b06      	ldr	r3, [pc, #24]	; (3ba8 <Panic_Temp_isr+0x20>)
    3b90:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    3b92:	6b93      	ldr	r3, [r2, #56]	; 0x38
    3b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3b98:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    3b9a:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    3b9e:	bf30      	wfi
    3ba0:	e7fd      	b.n	3b9e <Panic_Temp_isr+0x16>
    3ba2:	bf00      	nop
    3ba4:	400d4000 	.word	0x400d4000
    3ba8:	400ac000 	.word	0x400ac000

00003bac <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    3bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    3bb0:	4ca6      	ldr	r4, [pc, #664]	; (3e4c <isr+0x2a0>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    3bb2:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    3bb4:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    3bb8:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    3bbc:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    3bc0:	f000 808e 	beq.w	3ce0 <isr+0x134>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    3bc4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3bc8:	2b00      	cmp	r3, #0
    3bca:	f000 8084 	beq.w	3cd6 <isr+0x12a>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    3bce:	f04f 1a01 	mov.w	sl, #65537	; 0x10001
    3bd2:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 3e84 <isr+0x2d8>
    3bd6:	4e9e      	ldr	r6, [pc, #632]	; (3e50 <isr+0x2a4>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    3bd8:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    3bda:	46d3      	mov	fp, sl
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    3bdc:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    3be0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    3be2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    3be4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3be8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    3bec:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    3bf0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3bf4:	0499      	lsls	r1, r3, #18
    3bf6:	d5f5      	bpl.n	3be4 <isr+0x38>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    3bf8:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    3bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3c00:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    3c04:	f8c5 b1b4 	str.w	fp, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    3c08:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    3c0c:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    3c10:	d1fa      	bne.n	3c08 <isr+0x5c>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3c12:	b281      	uxth	r1, r0
    3c14:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    3c18:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3c1c:	42b9      	cmp	r1, r7
    3c1e:	f200 8133 	bhi.w	3e88 <isr+0x2dc>
    3c22:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    3c26:	f080 82a4 	bcs.w	4172 <isr+0x5c6>
    3c2a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    3c2e:	f000 81f7 	beq.w	4020 <isr+0x474>
    3c32:	f200 816e 	bhi.w	3f12 <isr+0x366>
    3c36:	2980      	cmp	r1, #128	; 0x80
    3c38:	f000 81b7 	beq.w	3faa <isr+0x3fe>
    3c3c:	2982      	cmp	r1, #130	; 0x82
    3c3e:	f040 8160 	bne.w	3f02 <isr+0x356>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    3c42:	b292      	uxth	r2, r2
    3c44:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    3c48:	2907      	cmp	r1, #7
    3c4a:	f200 815a 	bhi.w	3f02 <isr+0x356>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    3c4e:	0089      	lsls	r1, r1, #2
    3c50:	4f80      	ldr	r7, [pc, #512]	; (3e54 <isr+0x2a8>)
		reply_buffer[0] = 0;
    3c52:	4881      	ldr	r0, [pc, #516]	; (3e58 <isr+0x2ac>)
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    3c54:	0612      	lsls	r2, r2, #24
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    3c56:	440f      	add	r7, r1
    3c58:	6839      	ldr	r1, [r7, #0]
		reply_buffer[0] = 0;
    3c5a:	7003      	strb	r3, [r0, #0]
		reply_buffer[1] = 0;
    3c5c:	7043      	strb	r3, [r0, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    3c5e:	f140 831b 	bpl.w	4298 <isr+0x6ec>
    3c62:	03cb      	lsls	r3, r1, #15
    3c64:	d501      	bpl.n	3c6a <isr+0xbe>
			reply_buffer[0] = 1;
    3c66:	2301      	movs	r3, #1
    3c68:	7003      	strb	r3, [r0, #0]
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3c6a:	4a7c      	ldr	r2, [pc, #496]	; (3e5c <isr+0x2b0>)
    3c6c:	2701      	movs	r7, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3c6e:	4b7c      	ldr	r3, [pc, #496]	; (3e60 <isr+0x2b4>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    3c70:	2100      	movs	r1, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3c72:	6017      	str	r7, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3c74:	6053      	str	r3, [r2, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3c76:	64b2      	str	r2, [r6, #72]	; 0x48
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3c78:	4b7a      	ldr	r3, [pc, #488]	; (3e64 <isr+0x2b8>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    3c7a:	64f1      	str	r1, [r6, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    3c7c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3c80:	f503 5780 	add.w	r7, r3, #4096	; 0x1000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3c84:	6090      	str	r0, [r2, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3c86:	f503 5000 	add.w	r0, r3, #8192	; 0x2000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3c8a:	60d3      	str	r3, [r2, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3c8c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3c90:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3c94:	6117      	str	r7, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3c96:	6150      	str	r0, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3c98:	6193      	str	r3, [r2, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3c9a:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    3c9e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	d1fb      	bne.n	3c9e <isr+0xf2>
	}
	endpoint0_transfer_ack.next = 1;
    3ca6:	4a70      	ldr	r2, [pc, #448]	; (3e68 <isr+0x2bc>)
    3ca8:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3caa:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    3cac:	60f3      	str	r3, [r6, #12]
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    3cae:	60b2      	str	r2, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3cb0:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3cb2:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3cb4:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    3cb8:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3cbc:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    3cbe:	ea41 0300 	orr.w	r3, r1, r0
    3cc2:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    3cc6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3cca:	2b00      	cmp	r3, #0
    3ccc:	d1fb      	bne.n	3cc6 <isr+0x11a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3cce:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3cd2:	2b00      	cmp	r3, #0
    3cd4:	d182      	bne.n	3bdc <isr+0x30>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    3cd6:	4a5d      	ldr	r2, [pc, #372]	; (3e4c <isr+0x2a0>)
    3cd8:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    3cdc:	2b00      	cmp	r3, #0
    3cde:	d150      	bne.n	3d82 <isr+0x1d6>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    3ce0:	f018 0f40 	tst.w	r8, #64	; 0x40
    3ce4:	d018      	beq.n	3d18 <isr+0x16c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    3ce6:	4b59      	ldr	r3, [pc, #356]	; (3e4c <isr+0x2a0>)
    3ce8:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    3cec:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    3cee:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    3cf2:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    3cf6:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    3cfa:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    3cfe:	4b53      	ldr	r3, [pc, #332]	; (3e4c <isr+0x2a0>)
    3d00:	2c00      	cmp	r4, #0
    3d02:	d1fa      	bne.n	3cfa <isr+0x14e>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    3d04:	f04f 32ff 	mov.w	r2, #4294967295
    3d08:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    3d0c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    3d10:	f000 fde6 	bl	48e0 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    3d14:	4b55      	ldr	r3, [pc, #340]	; (3e6c <isr+0x2c0>)
    3d16:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    3d18:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    3d1c:	d003      	beq.n	3d26 <isr+0x17a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    3d1e:	4b54      	ldr	r3, [pc, #336]	; (3e70 <isr+0x2c4>)
    3d20:	681b      	ldr	r3, [r3, #0]
    3d22:	b103      	cbz	r3, 3d26 <isr+0x17a>
    3d24:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    3d26:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    3d2a:	d003      	beq.n	3d34 <isr+0x188>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    3d2c:	4b51      	ldr	r3, [pc, #324]	; (3e74 <isr+0x2c8>)
    3d2e:	681b      	ldr	r3, [r3, #0]
    3d30:	b103      	cbz	r3, 3d34 <isr+0x188>
    3d32:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    3d34:	f018 0f04 	tst.w	r8, #4
    3d38:	d008      	beq.n	3d4c <isr+0x1a0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    3d3a:	4b44      	ldr	r3, [pc, #272]	; (3e4c <isr+0x2a0>)
    3d3c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    3d40:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    3d44:	d07f      	beq.n	3e46 <isr+0x29a>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    3d46:	4b4c      	ldr	r3, [pc, #304]	; (3e78 <isr+0x2cc>)
    3d48:	2201      	movs	r2, #1
    3d4a:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    3d4c:	4b3f      	ldr	r3, [pc, #252]	; (3e4c <isr+0x2a0>)
    3d4e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    3d52:	0612      	lsls	r2, r2, #24
    3d54:	d512      	bpl.n	3d7c <isr+0x1d0>
    3d56:	f018 0f80 	tst.w	r8, #128	; 0x80
    3d5a:	d00f      	beq.n	3d7c <isr+0x1d0>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    3d5c:	4947      	ldr	r1, [pc, #284]	; (3e7c <isr+0x2d0>)
    3d5e:	780a      	ldrb	r2, [r1, #0]
    3d60:	b162      	cbz	r2, 3d7c <isr+0x1d0>
			if (--usb_reboot_timer == 0) {
    3d62:	3a01      	subs	r2, #1
    3d64:	b2d2      	uxtb	r2, r2
    3d66:	700a      	strb	r2, [r1, #0]
    3d68:	b942      	cbnz	r2, 3d7c <isr+0x1d0>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    3d6a:	4945      	ldr	r1, [pc, #276]	; (3e80 <isr+0x2d4>)
    3d6c:	780a      	ldrb	r2, [r1, #0]
    3d6e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    3d72:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    3d74:	2a00      	cmp	r2, #0
    3d76:	f000 831b 	beq.w	43b0 <isr+0x804>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    3d7a:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    3d7c:	b003      	add	sp, #12
    3d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    3d82:	4940      	ldr	r1, [pc, #256]	; (3e84 <isr+0x2d8>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    3d84:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    3d88:	6808      	ldr	r0, [r1, #0]
    3d8a:	4203      	tst	r3, r0
    3d8c:	f040 82c7 	bne.w	431e <isr+0x772>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    3d90:	4a36      	ldr	r2, [pc, #216]	; (3e6c <isr+0x2c0>)
    3d92:	6817      	ldr	r7, [r2, #0]
#if 1
			if (completestatus) {
    3d94:	403b      	ands	r3, r7
    3d96:	9301      	str	r3, [sp, #4]
    3d98:	d0a2      	beq.n	3ce0 <isr+0x134>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    3d9a:	ea5f 4913 	movs.w	r9, r3, lsr #16
    3d9e:	d025      	beq.n	3dec <isr+0x240>
    3da0:	4e2b      	ldr	r6, [pc, #172]	; (3e50 <isr+0x2a4>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    3da2:	f04f 0a01 	mov.w	sl, #1
    3da6:	46b3      	mov	fp, r6
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    3da8:	fa99 f5a9 	rbit	r5, r9
    3dac:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    3db0:	eb0b 17c5 	add.w	r7, fp, r5, lsl #7
    3db4:	3740      	adds	r7, #64	; 0x40
};*/

static void run_callbacks(endpoint_t *ep)
{
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    3db6:	6b38      	ldr	r0, [r7, #48]	; 0x30
	if (first == NULL) return;
    3db8:	b198      	cbz	r0, 3de2 <isr+0x236>
    3dba:	4602      	mov	r2, r0
    3dbc:	2400      	movs	r4, #0
    3dbe:	e004      	b.n	3dca <isr+0x21e>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    3dc0:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    3dc2:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    3dc4:	2a01      	cmp	r2, #1
    3dc6:	f000 82dd 	beq.w	4384 <isr+0x7d8>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    3dca:	6853      	ldr	r3, [r2, #4]
    3dcc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    3dd0:	d0f6      	beq.n	3dc0 <isr+0x214>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    3dd2:	633a      	str	r2, [r7, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3dd4:	b12c      	cbz	r4, 3de2 <isr+0x236>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    3dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    3dd8:	6806      	ldr	r6, [r0, #0]
		ep->callback_function(first);
    3dda:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3ddc:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    3dde:	4630      	mov	r0, r6
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3de0:	d1f9      	bne.n	3dd6 <isr+0x22a>
				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    3de2:	fa0a f505 	lsl.w	r5, sl, r5
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    3de6:	ea39 0905 	bics.w	r9, r9, r5
    3dea:	d1dd      	bne.n	3da8 <isr+0x1fc>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    3dec:	f8bd 7004 	ldrh.w	r7, [sp, #4]
				while(rx) {
    3df0:	2f00      	cmp	r7, #0
    3df2:	f43f af75 	beq.w	3ce0 <isr+0x134>
    3df6:	4e16      	ldr	r6, [pc, #88]	; (3e50 <isr+0x2a4>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    3df8:	f04f 0901 	mov.w	r9, #1
    3dfc:	46b3      	mov	fp, r6
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    3dfe:	fa97 f5a7 	rbit	r5, r7
    3e02:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    3e06:	eb0b 1ac5 	add.w	sl, fp, r5, lsl #7
};*/

static void run_callbacks(endpoint_t *ep)
{
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    3e0a:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
	if (first == NULL) return;
    3e0e:	b1a8      	cbz	r0, 3e3c <isr+0x290>
    3e10:	4602      	mov	r2, r0
    3e12:	2400      	movs	r4, #0
    3e14:	e004      	b.n	3e20 <isr+0x274>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    3e16:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    3e18:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    3e1a:	2a01      	cmp	r2, #1
    3e1c:	f000 82ad 	beq.w	437a <isr+0x7ce>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    3e20:	6853      	ldr	r3, [r2, #4]
    3e22:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    3e26:	d0f6      	beq.n	3e16 <isr+0x26a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    3e28:	f8ca 2030 	str.w	r2, [sl, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3e2c:	b134      	cbz	r4, 3e3c <isr+0x290>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    3e2e:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    3e32:	6806      	ldr	r6, [r0, #0]
		ep->callback_function(first);
    3e34:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3e36:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    3e38:	4630      	mov	r0, r6
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3e3a:	d1f8      	bne.n	3e2e <isr+0x282>
				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    3e3c:	fa09 f505 	lsl.w	r5, r9, r5
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    3e40:	43af      	bics	r7, r5
    3e42:	d1dc      	bne.n	3dfe <isr+0x252>
    3e44:	e74c      	b.n	3ce0 <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    3e46:	4a0c      	ldr	r2, [pc, #48]	; (3e78 <isr+0x2cc>)
    3e48:	7013      	strb	r3, [r2, #0]
    3e4a:	e77f      	b.n	3d4c <isr+0x1a0>
    3e4c:	402e0000 	.word	0x402e0000
    3e50:	20004000 	.word	0x20004000
    3e54:	402e01c0 	.word	0x402e01c0
    3e58:	20001af0 	.word	0x20001af0
    3e5c:	20003000 	.word	0x20003000
    3e60:	00020080 	.word	0x00020080
    3e64:	20002af0 	.word	0x20002af0
    3e68:	20003020 	.word	0x20003020
    3e6c:	20001acc 	.word	0x20001acc
    3e70:	20001ac8 	.word	0x20001ac8
    3e74:	20001ad4 	.word	0x20001ad4
    3e78:	20001ad8 	.word	0x20001ad8
    3e7c:	20001ae0 	.word	0x20001ae0
    3e80:	20001ad0 	.word	0x20001ad0
    3e84:	20001adc 	.word	0x20001adc
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3e88:	f242 0721 	movw	r7, #8225	; 0x2021
    3e8c:	42b9      	cmp	r1, r7
    3e8e:	d034      	beq.n	3efa <isr+0x34e>
    3e90:	d867      	bhi.n	3f62 <isr+0x3b6>
    3e92:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    3e96:	f000 8130 	beq.w	40fa <isr+0x54e>
    3e9a:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    3e9e:	d130      	bne.n	3f02 <isr+0x356>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    3ea0:	f3c0 4007 	ubfx	r0, r0, #16, #8
    3ea4:	4ab7      	ldr	r2, [pc, #732]	; (4184 <isr+0x5d8>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    3ea6:	49b8      	ldr	r1, [pc, #736]	; (4188 <isr+0x5dc>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    3ea8:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    3eaa:	4fb8      	ldr	r7, [pc, #736]	; (418c <isr+0x5e0>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    3eac:	4ab8      	ldr	r2, [pc, #736]	; (4190 <isr+0x5e4>)
    3eae:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    3eb0:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    3eb4:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    3eb8:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    3ebc:	f000 fd12 	bl	48e4 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3ec0:	4ab4      	ldr	r2, [pc, #720]	; (4194 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3ec2:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3ec4:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3ec6:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3ec8:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3eca:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3ecc:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3ece:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3ed0:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3ed4:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3ed8:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    3eda:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    3ede:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3ee2:	4aad      	ldr	r2, [pc, #692]	; (4198 <isr+0x5ec>)
    3ee4:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    3ee6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3eea:	2b00      	cmp	r3, #0
    3eec:	d1fb      	bne.n	3ee6 <isr+0x33a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3eee:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3ef2:	2b00      	cmp	r3, #0
    3ef4:	f47f ae72 	bne.w	3bdc <isr+0x30>
    3ef8:	e6ed      	b.n	3cd6 <isr+0x12a>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    3efa:	0c11      	lsrs	r1, r2, #16
    3efc:	2907      	cmp	r1, #7
    3efe:	f000 81cf 	beq.w	42a0 <isr+0x6f4>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    3f02:	f8c4 a1c0 	str.w	sl, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3f06:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3f0a:	2b00      	cmp	r3, #0
    3f0c:	f47f ae66 	bne.w	3bdc <isr+0x30>
    3f10:	e6e1      	b.n	3cd6 <isr+0x12a>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3f12:	f240 3702 	movw	r7, #770	; 0x302
    3f16:	42b9      	cmp	r1, r7
    3f18:	f000 80bf 	beq.w	409a <isr+0x4ee>
    3f1c:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    3f20:	d1ef      	bne.n	3f02 <isr+0x356>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3f22:	4a9c      	ldr	r2, [pc, #624]	; (4194 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3f24:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3f26:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3f28:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3f2a:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3f2c:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3f2e:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3f30:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3f34:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3f38:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    3f3a:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    3f3e:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    3f42:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3f46:	2b00      	cmp	r3, #0
    3f48:	d1fb      	bne.n	3f42 <isr+0x396>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    3f4a:	0c03      	lsrs	r3, r0, #16
    3f4c:	065b      	lsls	r3, r3, #25
    3f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3f52:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3f56:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3f5a:	2b00      	cmp	r3, #0
    3f5c:	f47f ae3e 	bne.w	3bdc <isr+0x30>
    3f60:	e6b9      	b.n	3cd6 <isr+0x12a>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3f62:	f242 2321 	movw	r3, #8737	; 0x2221
    3f66:	4299      	cmp	r1, r3
    3f68:	f000 808a 	beq.w	4080 <isr+0x4d4>
    3f6c:	f242 3321 	movw	r3, #8993	; 0x2321
    3f70:	4299      	cmp	r1, r3
    3f72:	d1c6      	bne.n	3f02 <isr+0x356>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3f74:	4b87      	ldr	r3, [pc, #540]	; (4194 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3f76:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    3f78:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3f7a:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3f7c:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3f7e:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3f80:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3f82:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3f84:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3f88:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3f8c:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    3f8e:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    3f92:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    3f96:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3f9a:	2b00      	cmp	r3, #0
    3f9c:	d1fb      	bne.n	3f96 <isr+0x3ea>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3f9e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	f47f ae1a 	bne.w	3bdc <isr+0x30>
    3fa8:	e695      	b.n	3cd6 <isr+0x12a>
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3faa:	487c      	ldr	r0, [pc, #496]	; (419c <isr+0x5f0>)
    3fac:	2701      	movs	r7, #1
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3fae:	497c      	ldr	r1, [pc, #496]	; (41a0 <isr+0x5f4>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3fb0:	4a7c      	ldr	r2, [pc, #496]	; (41a4 <isr+0x5f8>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    3fb2:	64f3      	str	r3, [r6, #76]	; 0x4c
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3fb4:	700b      	strb	r3, [r1, #0]
		reply_buffer[1] = 0;
    3fb6:	704b      	strb	r3, [r1, #1]
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3fb8:	f501 5300 	add.w	r3, r1, #8192	; 0x2000
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3fbc:	6007      	str	r7, [r0, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3fbe:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3fc2:	64b0      	str	r0, [r6, #72]	; 0x48
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3fc4:	6042      	str	r2, [r0, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3fc6:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3fca:	60c7      	str	r7, [r0, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3fcc:	f501 5740 	add.w	r7, r1, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3fd0:	6103      	str	r3, [r0, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3fd2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3fd6:	f501 4380 	add.w	r3, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3fda:	6081      	str	r1, [r0, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3fdc:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3fe0:	6147      	str	r7, [r0, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3fe2:	6183      	str	r3, [r0, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    3fe4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3fe8:	2b00      	cmp	r3, #0
    3fea:	d1fb      	bne.n	3fe4 <isr+0x438>
	}
	endpoint0_transfer_ack.next = 1;
    3fec:	4a69      	ldr	r2, [pc, #420]	; (4194 <isr+0x5e8>)
    3fee:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3ff0:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    3ff2:	60f3      	str	r3, [r6, #12]
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    3ff4:	60b2      	str	r2, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3ff6:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3ff8:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3ffa:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    3ffe:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4002:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    4004:	ea41 0300 	orr.w	r3, r1, r0
    4008:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    400c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4010:	2b00      	cmp	r3, #0
    4012:	d1fb      	bne.n	400c <isr+0x460>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    4014:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    4018:	2b00      	cmp	r3, #0
    401a:	f47f addf 	bne.w	3bdc <isr+0x30>
    401e:	e65a      	b.n	3cd6 <isr+0x12a>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    4020:	b292      	uxth	r2, r2
    4022:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    4026:	2b07      	cmp	r3, #7
    4028:	f63f af6b 	bhi.w	3f02 <isr+0x356>
		dir = setup.wIndex & 0x80;
		if (dir) {
    402c:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    4030:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4034:	4a5c      	ldr	r2, [pc, #368]	; (41a8 <isr+0x5fc>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4036:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    403a:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    403e:	441a      	add	r2, r3
    4040:	6813      	ldr	r3, [r2, #0]
    4042:	bf14      	ite	ne
    4044:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    4048:	f023 0301 	biceq.w	r3, r3, #1
    404c:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    404e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4050:	4b50      	ldr	r3, [pc, #320]	; (4194 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    4052:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4054:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4056:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4058:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    405a:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    405e:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4062:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    4064:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    4068:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    406c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4070:	2b00      	cmp	r3, #0
    4072:	d1fb      	bne.n	406c <isr+0x4c0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    4074:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    4078:	2b00      	cmp	r3, #0
    407a:	f47f adaf 	bne.w	3bdc <isr+0x30>
    407e:	e62a      	b.n	3cd6 <isr+0x12a>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    4080:	b292      	uxth	r2, r2
    4082:	2a00      	cmp	r2, #0
    4084:	f47f af76 	bne.w	3f74 <isr+0x3c8>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4088:	4b48      	ldr	r3, [pc, #288]	; (41ac <isr+0x600>)
			usb_cdc_line_rtsdtr = setup.wValue;
    408a:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    408e:	4a48      	ldr	r2, [pc, #288]	; (41b0 <isr+0x604>)
    4090:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    4092:	4b48      	ldr	r3, [pc, #288]	; (41b4 <isr+0x608>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4094:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    4096:	7018      	strb	r0, [r3, #0]
    4098:	e76c      	b.n	3f74 <isr+0x3c8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    409a:	b292      	uxth	r2, r2
    409c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    40a0:	2b07      	cmp	r3, #7
    40a2:	f63f af2e 	bhi.w	3f02 <isr+0x356>
		dir = setup.wIndex & 0x80;
		if (dir) {
    40a6:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    40aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    40ae:	4a3e      	ldr	r2, [pc, #248]	; (41a8 <isr+0x5fc>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    40b0:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    40b4:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    40b8:	441a      	add	r2, r3
    40ba:	6813      	ldr	r3, [r2, #0]
    40bc:	bf14      	ite	ne
    40be:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    40c2:	f043 0301 	orreq.w	r3, r3, #1
    40c6:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    40c8:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    40ca:	4b32      	ldr	r3, [pc, #200]	; (4194 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    40cc:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    40ce:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    40d0:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    40d2:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    40d4:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    40d8:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    40dc:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    40de:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    40e2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    40e6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    40ea:	2b00      	cmp	r3, #0
    40ec:	d1fb      	bne.n	40e6 <isr+0x53a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    40ee:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    40f2:	2b00      	cmp	r3, #0
    40f4:	f47f ad72 	bne.w	3bdc <isr+0x30>
    40f8:	e5ed      	b.n	3cd6 <isr+0x12a>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    40fa:	4922      	ldr	r1, [pc, #136]	; (4184 <isr+0x5d8>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    40fc:	2201      	movs	r2, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    40fe:	4828      	ldr	r0, [pc, #160]	; (41a0 <isr+0x5f4>)
    4100:	7809      	ldrb	r1, [r1, #0]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    4102:	64f3      	str	r3, [r6, #76]	; 0x4c
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    4104:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    4108:	7001      	strb	r1, [r0, #0]
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    410a:	4b2b      	ldr	r3, [pc, #172]	; (41b8 <isr+0x60c>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    410c:	4923      	ldr	r1, [pc, #140]	; (419c <isr+0x5f0>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    410e:	604b      	str	r3, [r1, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4110:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    4114:	64b1      	str	r1, [r6, #72]	; 0x48
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    4116:	600a      	str	r2, [r1, #0]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    4118:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    411c:	60cf      	str	r7, [r1, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    411e:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4122:	610b      	str	r3, [r1, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    4124:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4128:	f500 4380 	add.w	r3, r0, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    412c:	6088      	str	r0, [r1, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    412e:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4132:	614f      	str	r7, [r1, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4134:	618b      	str	r3, [r1, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    4136:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    413a:	2b00      	cmp	r3, #0
    413c:	d1fb      	bne.n	4136 <isr+0x58a>
	}
	endpoint0_transfer_ack.next = 1;
    413e:	4a15      	ldr	r2, [pc, #84]	; (4194 <isr+0x5e8>)
    4140:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4142:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    4144:	60f3      	str	r3, [r6, #12]
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    4146:	60b2      	str	r2, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4148:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    414a:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    414c:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    4150:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4154:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    4156:	ea41 0300 	orr.w	r3, r1, r0
    415a:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    415e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4162:	2b00      	cmp	r3, #0
    4164:	d1fb      	bne.n	415e <isr+0x5b2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    4166:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    416a:	2b00      	cmp	r3, #0
    416c:	f47f ad36 	bne.w	3bdc <isr+0x30>
    4170:	e5b1      	b.n	3cd6 <isr+0x12a>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    4172:	4b12      	ldr	r3, [pc, #72]	; (41bc <isr+0x610>)
    4174:	6859      	ldr	r1, [r3, #4]
    4176:	2900      	cmp	r1, #0
    4178:	f43f aec3 	beq.w	3f02 <isr+0x356>
    417c:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    417e:	fa1f fe82 	uxth.w	lr, r2
    4182:	e022      	b.n	41ca <isr+0x61e>
    4184:	20001b00 	.word	0x20001b00
    4188:	000200c8 	.word	0x000200c8
    418c:	00cc0002 	.word	0x00cc0002
    4190:	00c80002 	.word	0x00c80002
    4194:	20003020 	.word	0x20003020
    4198:	20001adc 	.word	0x20001adc
    419c:	20003000 	.word	0x20003000
    41a0:	20001af0 	.word	0x20001af0
    41a4:	00020080 	.word	0x00020080
    41a8:	402e01c0 	.word	0x402e01c0
    41ac:	20001ab0 	.word	0x20001ab0
    41b0:	20004288 	.word	0x20004288
    41b4:	20001cd0 	.word	0x20001cd0
    41b8:	00010080 	.word	0x00010080
    41bc:	2000062c 	.word	0x2000062c
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    41c0:	330c      	adds	r3, #12
    41c2:	6859      	ldr	r1, [r3, #4]
    41c4:	2900      	cmp	r1, #0
    41c6:	f43f ae9c 	beq.w	3f02 <isr+0x356>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    41ca:	881f      	ldrh	r7, [r3, #0]
    41cc:	4287      	cmp	r7, r0
    41ce:	d1f7      	bne.n	41c0 <isr+0x614>
    41d0:	885f      	ldrh	r7, [r3, #2]
    41d2:	4577      	cmp	r7, lr
    41d4:	d1f4      	bne.n	41c0 <isr+0x614>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    41d6:	0a07      	lsrs	r7, r0, #8
    41d8:	2f03      	cmp	r7, #3
    41da:	f000 80ff 	beq.w	43dc <isr+0x830>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    41de:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    41e0:	0c12      	lsrs	r2, r2, #16
    41e2:	4293      	cmp	r3, r2
    41e4:	bf28      	it	cs
    41e6:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    41e8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    41ec:	f000 80e7 	beq.w	43be <isr+0x812>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    41f0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    41f4:	f000 80c9 	beq.w	438a <isr+0x7de>
    41f8:	4f7b      	ldr	r7, [pc, #492]	; (43e8 <isr+0x83c>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    41fa:	461a      	mov	r2, r3
    41fc:	9301      	str	r3, [sp, #4]
    41fe:	4638      	mov	r0, r7
    4200:	f000 fd56 	bl	4cb0 <memcpy>
    4204:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    4206:	f027 021f 	bic.w	r2, r7, #31
    420a:	4977      	ldr	r1, [pc, #476]	; (43e8 <isr+0x83c>)
	uint32_t end_addr = (uint32_t)addr + size;
    420c:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    420e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    4212:	4876      	ldr	r0, [pc, #472]	; (43ec <isr+0x840>)
    4214:	6002      	str	r2, [r0, #0]
		location += 32;
    4216:	3220      	adds	r2, #32
	} while (location < end_addr);
    4218:	4297      	cmp	r7, r2
    421a:	d8fa      	bhi.n	4212 <isr+0x666>
	asm("dsb");
    421c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4220:	f3bf 8f6f 	isb	sy
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    4224:	b303      	cbz	r3, 4268 <isr+0x6bc>
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    4226:	041b      	lsls	r3, r3, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    4228:	4a71      	ldr	r2, [pc, #452]	; (43f0 <isr+0x844>)
    422a:	2701      	movs	r7, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    422c:	2000      	movs	r0, #0
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    422e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    4232:	64b2      	str	r2, [r6, #72]	; 0x48
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    4234:	6017      	str	r7, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    4236:	6053      	str	r3, [r2, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    4238:	64f0      	str	r0, [r6, #76]	; 0x4c
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    423a:	4b6e      	ldr	r3, [pc, #440]	; (43f4 <isr+0x848>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    423c:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4240:	f503 5780 	add.w	r7, r3, #4096	; 0x1000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    4244:	6091      	str	r1, [r2, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4246:	f503 5e00 	add.w	lr, r3, #8192	; 0x2000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    424a:	60d3      	str	r3, [r2, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    424c:	f440 3180 	orr.w	r1, r0, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4250:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4254:	6117      	str	r7, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4256:	f8c2 e014 	str.w	lr, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    425a:	6193      	str	r3, [r2, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    425c:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    4260:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4264:	2b00      	cmp	r3, #0
    4266:	d1fb      	bne.n	4260 <isr+0x6b4>
	}
	endpoint0_transfer_ack.next = 1;
    4268:	4b63      	ldr	r3, [pc, #396]	; (43f8 <isr+0x84c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    426a:	2200      	movs	r2, #0
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    426c:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    426e:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    4270:	60b3      	str	r3, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4272:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4274:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    4276:	60f2      	str	r2, [r6, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4278:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    427c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4280:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    4282:	ea41 0300 	orr.w	r3, r1, r0
    4286:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    428a:	f8c9 2000 	str.w	r2, [r9]
	while (USB1_ENDPTPRIME) ;
    428e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4292:	2b00      	cmp	r3, #0
    4294:	d1fb      	bne.n	428e <isr+0x6e2>
    4296:	e51a      	b.n	3cce <isr+0x122>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    4298:	07cf      	lsls	r7, r1, #31
    429a:	f57f ace6 	bpl.w	3c6a <isr+0xbe>
    429e:	e4e2      	b.n	3c66 <isr+0xba>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    42a0:	4f56      	ldr	r7, [pc, #344]	; (43fc <isr+0x850>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    42a2:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    42a6:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    42a8:	4955      	ldr	r1, [pc, #340]	; (4400 <isr+0x854>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    42aa:	4b51      	ldr	r3, [pc, #324]	; (43f0 <isr+0x844>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    42ac:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    42ae:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    42b2:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    42b4:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    42b6:	4953      	ldr	r1, [pc, #332]	; (4404 <isr+0x858>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    42b8:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    42bc:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    42be:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    42c2:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    42c6:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    42c8:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    42cc:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    42d0:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    42d4:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    42d8:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    42da:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    42de:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    42e0:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    42e2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    42e6:	2b00      	cmp	r3, #0
    42e8:	d1fb      	bne.n	42e2 <isr+0x736>
	}
	endpoint0_transfer_ack.next = 1;
    42ea:	4a43      	ldr	r2, [pc, #268]	; (43f8 <isr+0x84c>)
    42ec:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    42ee:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    42f2:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    42f4:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    42f6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    42fa:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    42fc:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    42fe:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4302:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4306:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    4308:	ea41 0300 	orr.w	r3, r1, r0
    430c:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    4310:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    4314:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4318:	2b00      	cmp	r3, #0
    431a:	d1fb      	bne.n	4314 <isr+0x768>
    431c:	e4d7      	b.n	3cce <isr+0x122>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    431e:	4837      	ldr	r0, [pc, #220]	; (43fc <isr+0x850>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    4320:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    4324:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    4326:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    4328:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    432a:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    432c:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    432e:	f47f ad2f 	bne.w	3d90 <isr+0x1e4>
    4332:	b281      	uxth	r1, r0
    4334:	2900      	cmp	r1, #0
    4336:	f47f ad2b 	bne.w	3d90 <isr+0x1e4>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    433a:	4932      	ldr	r1, [pc, #200]	; (4404 <isr+0x858>)
    433c:	4c32      	ldr	r4, [pc, #200]	; (4408 <isr+0x85c>)
    433e:	c903      	ldmia	r1, {r0, r1}
    4340:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    4342:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    4344:	6020      	str	r0, [r4, #0]
    4346:	80a1      	strh	r1, [r4, #4]
    4348:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    434a:	f47f ad21 	bne.w	3d90 <isr+0x1e4>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    434e:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    4350:	482e      	ldr	r0, [pc, #184]	; (440c <isr+0x860>)
    4352:	7801      	ldrb	r1, [r0, #0]
    4354:	f041 0104 	orr.w	r1, r1, #4
    4358:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    435a:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    435e:	0608      	lsls	r0, r1, #24
    4360:	d406      	bmi.n	4370 <isr+0x7c4>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    4362:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    4366:	2080      	movs	r0, #128	; 0x80
    4368:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    436c:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    4370:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    4372:	4a27      	ldr	r2, [pc, #156]	; (4410 <isr+0x864>)
    4374:	2150      	movs	r1, #80	; 0x50
    4376:	7011      	strb	r1, [r2, #0]
    4378:	e50a      	b.n	3d90 <isr+0x1e4>
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    437a:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
			ep->last_transfer = NULL;
    437e:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
    4382:	e553      	b.n	3e2c <isr+0x280>
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    4384:	633b      	str	r3, [r7, #48]	; 0x30
			ep->last_transfer = NULL;
    4386:	637b      	str	r3, [r7, #52]	; 0x34
    4388:	e524      	b.n	3dd4 <isr+0x228>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    438a:	4822      	ldr	r0, [pc, #136]	; (4414 <isr+0x868>)
					memcpy(usb_descriptor_buffer, src, datalen);
    438c:	461a      	mov	r2, r3
    438e:	4f16      	ldr	r7, [pc, #88]	; (43e8 <isr+0x83c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    4390:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    4394:	4920      	ldr	r1, [pc, #128]	; (4418 <isr+0x86c>)
    4396:	4821      	ldr	r0, [pc, #132]	; (441c <isr+0x870>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    4398:	9301      	str	r3, [sp, #4]
    439a:	f1be 0f00 	cmp.w	lr, #0
    439e:	bf08      	it	eq
    43a0:	4601      	moveq	r1, r0
    43a2:	4638      	mov	r0, r7
    43a4:	f000 fc84 	bl	4cb0 <memcpy>
					usb_descriptor_buffer[1] = 7;
    43a8:	2207      	movs	r2, #7
    43aa:	9b01      	ldr	r3, [sp, #4]
    43ac:	707a      	strb	r2, [r7, #1]
    43ae:	e72a      	b.n	4206 <isr+0x65a>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    43b0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    43b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    43b8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    43bc:	e4dd      	b.n	3d7a <isr+0x1ce>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    43be:	4815      	ldr	r0, [pc, #84]	; (4414 <isr+0x868>)
					memcpy(usb_descriptor_buffer, src, datalen);
    43c0:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    43c2:	4916      	ldr	r1, [pc, #88]	; (441c <isr+0x870>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    43c4:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    43c6:	4814      	ldr	r0, [pc, #80]	; (4418 <isr+0x86c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    43c8:	9301      	str	r3, [sp, #4]
    43ca:	2f00      	cmp	r7, #0
    43cc:	bf08      	it	eq
    43ce:	4601      	moveq	r1, r0
    43d0:	4805      	ldr	r0, [pc, #20]	; (43e8 <isr+0x83c>)
    43d2:	f000 fc6d 	bl	4cb0 <memcpy>
    43d6:	4f04      	ldr	r7, [pc, #16]	; (43e8 <isr+0x83c>)
    43d8:	9b01      	ldr	r3, [sp, #4]
    43da:	e714      	b.n	4206 <isr+0x65a>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    43dc:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    43de:	780b      	ldrb	r3, [r1, #0]
    43e0:	4293      	cmp	r3, r2
    43e2:	bf28      	it	cs
    43e4:	4613      	movcs	r3, r2
    43e6:	e703      	b.n	41f0 <isr+0x644>
    43e8:	20200000 	.word	0x20200000
    43ec:	e000ef70 	.word	0xe000ef70
    43f0:	20003000 	.word	0x20003000
    43f4:	20201000 	.word	0x20201000
    43f8:	20003020 	.word	0x20003020
    43fc:	20001ae8 	.word	0x20001ae8
    4400:	00070080 	.word	0x00070080
    4404:	20001af8 	.word	0x20001af8
    4408:	20004280 	.word	0x20004280
    440c:	20001ad0 	.word	0x20001ad0
    4410:	20001ae0 	.word	0x20001ae0
    4414:	20001ad8 	.word	0x20001ad8
    4418:	60001a14 	.word	0x60001a14
    441c:	60001a58 	.word	0x60001a58

00004420 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4420:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    4422:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    4426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    442a:	bf14      	ite	ne
    442c:	2700      	movne	r7, #0
    442e:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    4432:	2a02      	cmp	r2, #2
    4434:	d901      	bls.n	443a <usb_config_rx+0x1a>
    4436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    443a:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    443e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 4480 <usb_config_rx+0x60>
    4442:	460d      	mov	r5, r1
    4444:	4604      	mov	r4, r0
    4446:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    444a:	2100      	movs	r1, #0
    444c:	2240      	movs	r2, #64	; 0x40
    444e:	4698      	mov	r8, r3
    4450:	4630      	mov	r0, r6
    4452:	f001 fa77 	bl	5944 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    4456:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    4458:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    445c:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    4460:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    4464:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    4466:	f1b8 0f00 	cmp.w	r8, #0
    446a:	d0e4      	beq.n	4436 <usb_config_rx+0x16>
    446c:	4b03      	ldr	r3, [pc, #12]	; (447c <usb_config_rx+0x5c>)
    446e:	40a0      	lsls	r0, r4
    4470:	681c      	ldr	r4, [r3, #0]
    4472:	4320      	orrs	r0, r4
    4474:	6018      	str	r0, [r3, #0]
    4476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    447a:	bf00      	nop
    447c:	20001acc 	.word	0x20001acc
    4480:	20004000 	.word	0x20004000

00004484 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4484:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    4486:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    448a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    448e:	bf14      	ite	ne
    4490:	2700      	movne	r7, #0
    4492:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    4496:	2a02      	cmp	r2, #2
    4498:	d901      	bls.n	449e <usb_config_tx+0x1a>
    449a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    449e:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    44a0:	01c5      	lsls	r5, r0, #7
    44a2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 44e8 <usb_config_tx+0x64>
    44a6:	4688      	mov	r8, r1
    44a8:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    44aa:	2100      	movs	r1, #0
    44ac:	4604      	mov	r4, r0
    44ae:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    44b0:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    44b4:	4650      	mov	r0, sl
    44b6:	f001 fa45 	bl	5944 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    44ba:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    44bc:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    44c0:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    44c4:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    44c8:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    44cc:	2e00      	cmp	r6, #0
    44ce:	d0e4      	beq.n	449a <usb_config_tx+0x16>
    44d0:	f104 0010 	add.w	r0, r4, #16
    44d4:	4b03      	ldr	r3, [pc, #12]	; (44e4 <usb_config_tx+0x60>)
    44d6:	4082      	lsls	r2, r0
    44d8:	6818      	ldr	r0, [r3, #0]
    44da:	4302      	orrs	r2, r0
    44dc:	601a      	str	r2, [r3, #0]
    44de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    44e2:	bf00      	nop
    44e4:	20001acc 	.word	0x20001acc
    44e8:	20004000 	.word	0x20004000

000044ec <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    44ec:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    44ee:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    44f0:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    44f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    44f6:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    44f8:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    44fa:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    44fc:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    4500:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    4504:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    4508:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    450c:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    450e:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    4510:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    4512:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    4514:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    4516:	bcf0      	pop	{r4, r5, r6, r7}
    4518:	4770      	bx	lr
    451a:	bf00      	nop

0000451c <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    451c:	1e83      	subs	r3, r0, #2
    451e:	2b02      	cmp	r3, #2
    4520:	d900      	bls.n	4524 <usb_transmit+0x8>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    4522:	4770      	bx	lr
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    4524:	4a1d      	ldr	r2, [pc, #116]	; (459c <usb_transmit+0x80>)
	uint32_t mask = 1 << (endpoint_number + 16);
    4526:	f100 0310 	add.w	r3, r0, #16
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    452a:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    452c:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
	uint32_t mask = 1 << (endpoint_number + 16);
    4530:	2701      	movs	r7, #1
    4532:	409f      	lsls	r7, r3
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    4534:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4536:	b11b      	cbz	r3, 4540 <usb_transmit+0x24>
		transfer->status |= (1<<15);
    4538:	684b      	ldr	r3, [r1, #4]
    453a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    453e:	604b      	str	r3, [r1, #4]
	}
	__disable_irq();
    4540:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    4542:	6b42      	ldr	r2, [r0, #52]	; 0x34
	if (last) {
    4544:	b1da      	cbz	r2, 457e <usb_transmit+0x62>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    4546:	4b16      	ldr	r3, [pc, #88]	; (45a0 <usb_transmit+0x84>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    4548:	6011      	str	r1, [r2, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    454a:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
    454e:	4217      	tst	r7, r2
    4550:	d11f      	bne.n	4592 <usb_transmit+0x76>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    4552:	4c14      	ldr	r4, [pc, #80]	; (45a4 <usb_transmit+0x88>)
    4554:	6826      	ldr	r6, [r4, #0]
    4556:	e004      	b.n	4562 <usb_transmit+0x46>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    4558:	6822      	ldr	r2, [r4, #0]
    455a:	1b92      	subs	r2, r2, r6
    455c:	f5b2 6f16 	cmp.w	r2, #2400	; 0x960
    4560:	d20b      	bcs.n	457a <usb_transmit+0x5e>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    4562:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    4566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    456a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    456e:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    4572:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    4576:	0452      	lsls	r2, r2, #17
    4578:	d5ee      	bpl.n	4558 <usb_transmit+0x3c>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    457a:	422f      	tst	r7, r5
    457c:	d109      	bne.n	4592 <usb_transmit+0x76>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    457e:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    4580:	4a07      	ldr	r2, [pc, #28]	; (45a0 <usb_transmit+0x84>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    4582:	6081      	str	r1, [r0, #8]
	endpoint->status = 0;
    4584:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    4586:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    458a:	431f      	orrs	r7, r3
    458c:	f8c2 71b0 	str.w	r7, [r2, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    4590:	6301      	str	r1, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    4592:	6341      	str	r1, [r0, #52]	; 0x34
	__enable_irq();
    4594:	b662      	cpsie	i
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    4596:	bcf0      	pop	{r4, r5, r6, r7}
    4598:	4770      	bx	lr
    459a:	bf00      	nop
    459c:	20004040 	.word	0x20004040
    45a0:	402e0000 	.word	0x402e0000
    45a4:	e0001004 	.word	0xe0001004

000045a8 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    45a8:	1e83      	subs	r3, r0, #2
    45aa:	2b02      	cmp	r3, #2
    45ac:	d900      	bls.n	45b0 <usb_receive+0x8>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    45ae:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    45b0:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    45b2:	4d1c      	ldr	r5, [pc, #112]	; (4624 <usb_receive+0x7c>)
	uint32_t mask = 1 << endpoint_number;
    45b4:	2301      	movs	r3, #1
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    45b6:	eb05 15c0 	add.w	r5, r5, r0, lsl #7
	uint32_t mask = 1 << endpoint_number;
    45ba:	fa03 f000 	lsl.w	r0, r3, r0
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    45be:	6bab      	ldr	r3, [r5, #56]	; 0x38
    45c0:	b11b      	cbz	r3, 45ca <usb_receive+0x22>
		transfer->status |= (1<<15);
    45c2:	684b      	ldr	r3, [r1, #4]
    45c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    45c8:	604b      	str	r3, [r1, #4]
	}
	__disable_irq();
    45ca:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    45cc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
	if (last) {
    45ce:	b1da      	cbz	r2, 4608 <usb_receive+0x60>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    45d0:	4b15      	ldr	r3, [pc, #84]	; (4628 <usb_receive+0x80>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    45d2:	6011      	str	r1, [r2, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    45d4:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
    45d8:	4210      	tst	r0, r2
    45da:	d11f      	bne.n	461c <usb_receive+0x74>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    45dc:	4c13      	ldr	r4, [pc, #76]	; (462c <usb_receive+0x84>)
    45de:	6827      	ldr	r7, [r4, #0]
    45e0:	e004      	b.n	45ec <usb_receive+0x44>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    45e2:	6822      	ldr	r2, [r4, #0]
    45e4:	1bd2      	subs	r2, r2, r7
    45e6:	f5b2 6f16 	cmp.w	r2, #2400	; 0x960
    45ea:	d20b      	bcs.n	4604 <usb_receive+0x5c>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    45ec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    45f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    45f4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    45f8:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    45fc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    4600:	0452      	lsls	r2, r2, #17
    4602:	d5ee      	bpl.n	45e2 <usb_receive+0x3a>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    4604:	4230      	tst	r0, r6
    4606:	d109      	bne.n	461c <usb_receive+0x74>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    4608:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    460a:	4a07      	ldr	r2, [pc, #28]	; (4628 <usb_receive+0x80>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    460c:	60a9      	str	r1, [r5, #8]
	endpoint->status = 0;
    460e:	60eb      	str	r3, [r5, #12]
	USB1_ENDPTPRIME |= epmask;
    4610:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    4614:	4318      	orrs	r0, r3
    4616:	f8c2 01b0 	str.w	r0, [r2, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    461a:	6329      	str	r1, [r5, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    461c:	6369      	str	r1, [r5, #52]	; 0x34
	__enable_irq();
    461e:	b662      	cpsie	i
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    4620:	bcf0      	pop	{r4, r5, r6, r7}
    4622:	4770      	bx	lr
    4624:	20004000 	.word	0x20004000
    4628:	402e0000 	.word	0x402e0000
    462c:	e0001004 	.word	0xe0001004

00004630 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    4630:	4a2b      	ldr	r2, [pc, #172]	; (46e0 <usb_init_serialnumber+0xb0>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4632:	4b2c      	ldr	r3, [pc, #176]	; (46e4 <usb_init_serialnumber+0xb4>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    4634:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    4638:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    463c:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    463e:	b500      	push	{lr}
    4640:	b085      	sub	sp, #20
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4642:	d802      	bhi.n	464a <usb_init_serialnumber+0x1a>
    4644:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4648:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    464a:	220a      	movs	r2, #10
    464c:	a901      	add	r1, sp, #4
    464e:	f000 fbc9 	bl	4de4 <ultoa>
	for (i=0; i<10; i++) {
		char c = buf[i];
    4652:	f89d 2004 	ldrb.w	r2, [sp, #4]
    4656:	4b24      	ldr	r3, [pc, #144]	; (46e8 <usb_init_serialnumber+0xb8>)
		if (!c) break;
    4658:	b352      	cbz	r2, 46b0 <usb_init_serialnumber+0x80>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    465a:	f89d 1005 	ldrb.w	r1, [sp, #5]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    465e:	805a      	strh	r2, [r3, #2]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    4660:	b369      	cbz	r1, 46be <usb_init_serialnumber+0x8e>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    4662:	f89d 2006 	ldrb.w	r2, [sp, #6]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4666:	8099      	strh	r1, [r3, #4]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    4668:	b35a      	cbz	r2, 46c2 <usb_init_serialnumber+0x92>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    466a:	f89d 1007 	ldrb.w	r1, [sp, #7]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    466e:	80da      	strh	r2, [r3, #6]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    4670:	b349      	cbz	r1, 46c6 <usb_init_serialnumber+0x96>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    4672:	f89d 2008 	ldrb.w	r2, [sp, #8]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4676:	8119      	strh	r1, [r3, #8]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    4678:	b33a      	cbz	r2, 46ca <usb_init_serialnumber+0x9a>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    467a:	f89d 1009 	ldrb.w	r1, [sp, #9]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    467e:	815a      	strh	r2, [r3, #10]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    4680:	b329      	cbz	r1, 46ce <usb_init_serialnumber+0x9e>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    4682:	f89d 200a 	ldrb.w	r2, [sp, #10]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4686:	8199      	strh	r1, [r3, #12]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    4688:	b31a      	cbz	r2, 46d2 <usb_init_serialnumber+0xa2>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    468a:	f89d 100b 	ldrb.w	r1, [sp, #11]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    468e:	81da      	strh	r2, [r3, #14]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    4690:	b309      	cbz	r1, 46d6 <usb_init_serialnumber+0xa6>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    4692:	f89d 200c 	ldrb.w	r2, [sp, #12]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4696:	8219      	strh	r1, [r3, #16]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    4698:	b14a      	cbz	r2, 46ae <usb_init_serialnumber+0x7e>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    469a:	f89d 100d 	ldrb.w	r1, [sp, #13]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    469e:	825a      	strh	r2, [r3, #18]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    46a0:	b1d9      	cbz	r1, 46da <usb_init_serialnumber+0xaa>
    46a2:	2216      	movs	r2, #22
		usb_string_serial_number_default.wString[i] = c;
    46a4:	8299      	strh	r1, [r3, #20]
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    46a6:	701a      	strb	r2, [r3, #0]
}
    46a8:	b005      	add	sp, #20
    46aa:	f85d fb04 	ldr.w	pc, [sp], #4

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    46ae:	2208      	movs	r2, #8
    46b0:	3201      	adds	r2, #1
    46b2:	0052      	lsls	r2, r2, #1
    46b4:	b2d2      	uxtb	r2, r2
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    46b6:	701a      	strb	r2, [r3, #0]
}
    46b8:	b005      	add	sp, #20
    46ba:	f85d fb04 	ldr.w	pc, [sp], #4

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    46be:	2201      	movs	r2, #1
    46c0:	e7f6      	b.n	46b0 <usb_init_serialnumber+0x80>
    46c2:	2202      	movs	r2, #2
    46c4:	e7f4      	b.n	46b0 <usb_init_serialnumber+0x80>
    46c6:	2203      	movs	r2, #3
    46c8:	e7f2      	b.n	46b0 <usb_init_serialnumber+0x80>
    46ca:	2204      	movs	r2, #4
    46cc:	e7f0      	b.n	46b0 <usb_init_serialnumber+0x80>
    46ce:	2205      	movs	r2, #5
    46d0:	e7ee      	b.n	46b0 <usb_init_serialnumber+0x80>
    46d2:	2206      	movs	r2, #6
    46d4:	e7ec      	b.n	46b0 <usb_init_serialnumber+0x80>
    46d6:	2207      	movs	r2, #7
    46d8:	e7ea      	b.n	46b0 <usb_init_serialnumber+0x80>
    46da:	2209      	movs	r2, #9
    46dc:	e7e8      	b.n	46b0 <usb_init_serialnumber+0x80>
    46de:	bf00      	nop
    46e0:	401f4400 	.word	0x401f4400
    46e4:	0098967f 	.word	0x0098967f
    46e8:	200006f4 	.word	0x200006f4

000046ec <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    46ec:	4b1e      	ldr	r3, [pc, #120]	; (4768 <usb_serial_flush_callback+0x7c>)
    46ee:	781a      	ldrb	r2, [r3, #0]
    46f0:	b95a      	cbnz	r2, 470a <usb_serial_flush_callback+0x1e>
    46f2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    46f6:	4a1d      	ldr	r2, [pc, #116]	; (476c <usb_serial_flush_callback+0x80>)
    46f8:	7812      	ldrb	r2, [r2, #0]
    46fa:	b132      	cbz	r2, 470a <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    46fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    4700:	4d1b      	ldr	r5, [pc, #108]	; (4770 <usb_serial_flush_callback+0x84>)
    4702:	882a      	ldrh	r2, [r5, #0]
    4704:	b912      	cbnz	r2, 470c <usb_serial_flush_callback+0x20>
    4706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    470a:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    470c:	4e19      	ldr	r6, [pc, #100]	; (4774 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    470e:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    4712:	4f19      	ldr	r7, [pc, #100]	; (4778 <usb_serial_flush_callback+0x8c>)
    4714:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4716:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4718:	4c18      	ldr	r4, [pc, #96]	; (477c <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    471a:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    471e:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4722:	4638      	mov	r0, r7
    4724:	4621      	mov	r1, r4
    4726:	f7ff fee1 	bl	44ec <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    472a:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    472e:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    4732:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    4736:	4b12      	ldr	r3, [pc, #72]	; (4780 <usb_serial_flush_callback+0x94>)
    4738:	6019      	str	r1, [r3, #0]
		location += 32;
    473a:	3120      	adds	r1, #32
	} while (location < end_addr);
    473c:	428a      	cmp	r2, r1
    473e:	d8fb      	bhi.n	4738 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    4740:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4744:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    4748:	2004      	movs	r0, #4
    474a:	4639      	mov	r1, r7
    474c:	f7ff fee6 	bl	451c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    4750:	7833      	ldrb	r3, [r6, #0]
    4752:	4a08      	ldr	r2, [pc, #32]	; (4774 <usb_serial_flush_callback+0x88>)
    4754:	3301      	adds	r3, #1
    4756:	b2db      	uxtb	r3, r3
    4758:	2b03      	cmp	r3, #3
    475a:	bf88      	it	hi
    475c:	2300      	movhi	r3, #0
    475e:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    4760:	2300      	movs	r3, #0
    4762:	802b      	strh	r3, [r5, #0]
    4764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4768:	20001b16 	.word	0x20001b16
    476c:	20001b00 	.word	0x20001b00
    4770:	20001c30 	.word	0x20001c30
    4774:	20001b17 	.word	0x20001b17
    4778:	20001c40 	.word	0x20001c40
    477c:	20200060 	.word	0x20200060
    4780:	e000ef70 	.word	0xe000ef70

00004784 <rx_event>:
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    4784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    4788:	4e49      	ldr	r6, [pc, #292]	; (48b0 <rx_event+0x12c>)
    478a:	6844      	ldr	r4, [r0, #4]
    478c:	8837      	ldrh	r7, [r6, #0]
    478e:	f3c4 440e 	ubfx	r4, r4, #16, #15
	int i = t->callback_param;
    4792:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    4794:	1b3c      	subs	r4, r7, r4
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    4796:	2c00      	cmp	r4, #0
    4798:	dd5f      	ble.n	485a <rx_event+0xd6>
		// received a packet with data
		uint32_t head = rx_head;
    479a:	4946      	ldr	r1, [pc, #280]	; (48b4 <rx_event+0x130>)
		if (head != rx_tail) {
    479c:	4b46      	ldr	r3, [pc, #280]	; (48b8 <rx_event+0x134>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    479e:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    47a0:	781b      	ldrb	r3, [r3, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    47a2:	b2d2      	uxtb	r2, r2
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    47a4:	4845      	ldr	r0, [pc, #276]	; (48bc <rx_event+0x138>)
			uint32_t count = rx_count[ii];
    47a6:	f8df 8134 	ldr.w	r8, [pc, #308]	; 48dc <rx_event+0x158>
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    47aa:	429a      	cmp	r2, r3
    47ac:	d007      	beq.n	47be <rx_event+0x3a>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    47ae:	f810 b002 	ldrb.w	fp, [r0, r2]
			uint32_t count = rx_count[ii];
    47b2:	f838 a01b 	ldrh.w	sl, [r8, fp, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    47b6:	f5ca 7300 	rsb	r3, sl, #512	; 0x200
    47ba:	429c      	cmp	r4, r3
    47bc:	d913      	bls.n	47e6 <rx_event+0x62>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    47be:	3201      	adds	r2, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    47c0:	2300      	movs	r3, #0
    47c2:	4e3f      	ldr	r6, [pc, #252]	; (48c0 <rx_event+0x13c>)
		if (++head > RX_NUM) head = 0;
    47c4:	2a08      	cmp	r2, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    47c6:	f828 4015 	strh.w	r4, [r8, r5, lsl #1]
		rx_index[i] = 0;
    47ca:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
    47ce:	bf98      	it	ls
    47d0:	b2d3      	uxtbls	r3, r2
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    47d2:	4e3c      	ldr	r6, [pc, #240]	; (48c4 <rx_event+0x140>)
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    47d4:	bf88      	it	hi
    47d6:	461a      	movhi	r2, r3
		rx_list[head] = i;
		rx_head = head;
    47d8:	700b      	strb	r3, [r1, #0]
		rx_available += len;
    47da:	6833      	ldr	r3, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    47dc:	5485      	strb	r5, [r0, r2]
		rx_head = head;
		rx_available += len;
    47de:	441c      	add	r4, r3
    47e0:	6034      	str	r4, [r6, #0]
    47e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
    47e6:	4b38      	ldr	r3, [pc, #224]	; (48c8 <rx_event+0x144>)
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    47e8:	eb0a 204b 	add.w	r0, sl, fp, lsl #9
    47ec:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
    47ee:	eb03 2945 	add.w	r9, r3, r5, lsl #9
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    47f2:	4418      	add	r0, r3
    47f4:	4649      	mov	r1, r9
    47f6:	f000 fa5b 	bl	4cb0 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    47fa:	4832      	ldr	r0, [pc, #200]	; (48c4 <rx_event+0x140>)
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    47fc:	4933      	ldr	r1, [pc, #204]	; (48cc <rx_event+0x148>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    47fe:	eb0a 0304 	add.w	r3, sl, r4
				rx_available += len;
    4802:	6802      	ldr	r2, [r0, #0]
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4804:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4808:	eb01 1a45 	add.w	sl, r1, r5, lsl #5
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    480c:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 48d8 <rx_event+0x154>
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    4810:	4414      	add	r4, r2
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    4812:	f828 301b 	strh.w	r3, [r8, fp, lsl #1]
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4816:	463a      	mov	r2, r7
    4818:	4649      	mov	r1, r9
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    481a:	6004      	str	r4, [r0, #0]
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    481c:	462b      	mov	r3, r5
    481e:	4650      	mov	r0, sl
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4820:	f8cc e000 	str.w	lr, [ip]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4824:	f7ff fe62 	bl	44ec <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    4828:	8832      	ldrh	r2, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    482a:	f029 031f 	bic.w	r3, r9, #31
	uint32_t end_addr = (uint32_t)addr + size;
    482e:	4491      	add	r9, r2
	asm volatile("": : :"memory");
	asm("dsb");
    4830:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    4834:	4a26      	ldr	r2, [pc, #152]	; (48d0 <rx_event+0x14c>)
    4836:	6013      	str	r3, [r2, #0]
		location += 32;
    4838:	3320      	adds	r3, #32
	} while (location < end_addr);
    483a:	4599      	cmp	r9, r3
    483c:	d8fb      	bhi.n	4836 <rx_event+0xb2>
	asm("dsb");
    483e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4842:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    4846:	2003      	movs	r0, #3
    4848:	4651      	mov	r1, sl
    484a:	f7ff fead 	bl	45a8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    484e:	4b21      	ldr	r3, [pc, #132]	; (48d4 <rx_event+0x150>)
    4850:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4854:	601a      	str	r2, [r3, #0]
    4856:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    485a:	491b      	ldr	r1, [pc, #108]	; (48c8 <rx_event+0x144>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    485c:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4860:	4b1a      	ldr	r3, [pc, #104]	; (48cc <rx_event+0x148>)
    4862:	463a      	mov	r2, r7

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    4864:	eb01 2445 	add.w	r4, r1, r5, lsl #9
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4868:	481b      	ldr	r0, [pc, #108]	; (48d8 <rx_event+0x154>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    486a:	eb03 1745 	add.w	r7, r3, r5, lsl #5
    486e:	462b      	mov	r3, r5
    4870:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4872:	f8c0 e000 	str.w	lr, [r0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4876:	4638      	mov	r0, r7
    4878:	f7ff fe38 	bl	44ec <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    487c:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    487e:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    4882:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    4884:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    4888:	4a11      	ldr	r2, [pc, #68]	; (48d0 <rx_event+0x14c>)
    488a:	6013      	str	r3, [r2, #0]
		location += 32;
    488c:	3320      	adds	r3, #32
	} while (location < end_addr);
    488e:	4299      	cmp	r1, r3
    4890:	d8fb      	bhi.n	488a <rx_event+0x106>
	asm("dsb");
    4892:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4896:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    489a:	2003      	movs	r0, #3
    489c:	4639      	mov	r1, r7
    489e:	f7ff fe83 	bl	45a8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    48a2:	4b0c      	ldr	r3, [pc, #48]	; (48d4 <rx_event+0x150>)
    48a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    48a8:	601a      	str	r2, [r3, #0]
    48aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48ae:	bf00      	nop
    48b0:	20001c2e 	.word	0x20001c2e
    48b4:	20001b18 	.word	0x20001b18
    48b8:	20001c20 	.word	0x20001c20
    48bc:	20001c24 	.word	0x20001c24
    48c0:	20001b04 	.word	0x20001b04
    48c4:	20001c34 	.word	0x20001c34
    48c8:	20202060 	.word	0x20202060
    48cc:	20001b20 	.word	0x20001b20
    48d0:	e000ef5c 	.word	0xe000ef5c
    48d4:	e000e10c 	.word	0xe000e10c
    48d8:	e000e18c 	.word	0xe000e18c
    48dc:	20001cc0 	.word	0x20001cc0

000048e0 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    48e0:	4770      	bx	lr
    48e2:	bf00      	nop

000048e4 <usb_serial_configure>:
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    48e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    48e8:	4b45      	ldr	r3, [pc, #276]	; (4a00 <usb_serial_configure+0x11c>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    48ea:	2100      	movs	r1, #0
    48ec:	f8df a14c 	ldr.w	sl, [pc, #332]	; 4a3c <usb_serial_configure+0x158>
    48f0:	2280      	movs	r2, #128	; 0x80
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    48f2:	781b      	ldrb	r3, [r3, #0]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    48f4:	460c      	mov	r4, r1
    48f6:	f8df 8148 	ldr.w	r8, [pc, #328]	; 4a40 <usb_serial_configure+0x15c>
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    48fa:	460f      	mov	r7, r1
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    48fc:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    48fe:	4841      	ldr	r0, [pc, #260]	; (4a04 <usb_serial_configure+0x120>)
    4900:	4e41      	ldr	r6, [pc, #260]	; (4a08 <usb_serial_configure+0x124>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4902:	f44f 3900 	mov.w	r9, #131072	; 0x20000
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    4906:	bf14      	ite	ne
    4908:	f44f 7300 	movne.w	r3, #512	; 0x200
    490c:	2340      	moveq	r3, #64	; 0x40
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    490e:	4d3f      	ldr	r5, [pc, #252]	; (4a0c <usb_serial_configure+0x128>)
    4910:	f8aa 3000 	strh.w	r3, [sl]
    4914:	f8a8 3000 	strh.w	r3, [r8]
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    4918:	f001 f814 	bl	5944 <memset>
	tx_head = 0;
    491c:	483c      	ldr	r0, [pc, #240]	; (4a10 <usb_serial_configure+0x12c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    491e:	4621      	mov	r1, r4
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    4920:	4b3c      	ldr	r3, [pc, #240]	; (4a14 <usb_serial_configure+0x130>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4922:	f44f 7280 	mov.w	r2, #256	; 0x100
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    4926:	7004      	strb	r4, [r0, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4928:	4630      	mov	r0, r6
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    492a:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    492c:	f001 f80a 	bl	5944 <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    4930:	4939      	ldr	r1, [pc, #228]	; (4a18 <usb_serial_configure+0x134>)
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4932:	4623      	mov	r3, r4
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    4934:	4839      	ldr	r0, [pc, #228]	; (4a1c <usb_serial_configure+0x138>)
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4936:	4622      	mov	r2, r4
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    4938:	f8df e108 	ldr.w	lr, [pc, #264]	; 4a44 <usb_serial_configure+0x160>
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    493c:	700c      	strb	r4, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    493e:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    4940:	7004      	strb	r4, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4942:	2002      	movs	r0, #2
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    4944:	602c      	str	r4, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    4946:	4d36      	ldr	r5, [pc, #216]	; (4a20 <usb_serial_configure+0x13c>)
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    4948:	f8ce 4000 	str.w	r4, [lr]
    494c:	f8ce 4004 	str.w	r4, [lr, #4]
    4950:	f8ce 4008 	str.w	r4, [lr, #8]
    4954:	f8ce 400c 	str.w	r4, [lr, #12]
	memset(rx_index, 0, sizeof(rx_index));
    4958:	602c      	str	r4, [r5, #0]
    495a:	606c      	str	r4, [r5, #4]
    495c:	60ac      	str	r4, [r5, #8]
    495e:	60ec      	str	r4, [r5, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4960:	f7ff fd90 	bl	4484 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    4964:	4622      	mov	r2, r4
    4966:	f8b8 1000 	ldrh.w	r1, [r8]
    496a:	2003      	movs	r0, #3
    496c:	4b2d      	ldr	r3, [pc, #180]	; (4a24 <usb_serial_configure+0x140>)
    496e:	f7ff fd57 	bl	4420 <usb_config_rx>
    4972:	4d2d      	ldr	r5, [pc, #180]	; (4a28 <usb_serial_configure+0x144>)
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    4974:	4623      	mov	r3, r4
    4976:	f8ba 1000 	ldrh.w	r1, [sl]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCIMVAC = location;
    497a:	4c2c      	ldr	r4, [pc, #176]	; (4a2c <usb_serial_configure+0x148>)
    497c:	2201      	movs	r2, #1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    497e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 4a48 <usb_serial_configure+0x164>
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    4982:	2004      	movs	r0, #4
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4984:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 4a4c <usb_serial_configure+0x168>
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    4988:	f7ff fd7c 	bl	4484 <usb_config_tx>
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    498c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4990:	f8b8 2000 	ldrh.w	r2, [r8]
    4994:	4629      	mov	r1, r5
    4996:	4630      	mov	r0, r6
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4998:	f8ca 3000 	str.w	r3, [sl]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    499c:	463b      	mov	r3, r7
    499e:	f7ff fda5 	bl	44ec <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    49a2:	f8b8 2000 	ldrh.w	r2, [r8]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    49a6:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    49aa:	442a      	add	r2, r5
	asm volatile("": : :"memory");
	asm("dsb");
    49ac:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    49b0:	6023      	str	r3, [r4, #0]
		location += 32;
    49b2:	3320      	adds	r3, #32
	} while (location < end_addr);
    49b4:	429a      	cmp	r2, r3
    49b6:	d8fb      	bhi.n	49b0 <usb_serial_configure+0xcc>
	asm("dsb");
    49b8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    49bc:	f3bf 8f6f 	isb	sy
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    49c0:	3701      	adds	r7, #1
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    49c2:	4631      	mov	r1, r6
    49c4:	2003      	movs	r0, #3
    49c6:	f505 7500 	add.w	r5, r5, #512	; 0x200
    49ca:	f7ff fded 	bl	45a8 <usb_receive>
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    49ce:	2f08      	cmp	r7, #8
    49d0:	f106 0620 	add.w	r6, r6, #32
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
    49d4:	f8cb 9000 	str.w	r9, [fp]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    49d8:	d1d8      	bne.n	498c <usb_serial_configure+0xa8>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    49da:	4b15      	ldr	r3, [pc, #84]	; (4a30 <usb_serial_configure+0x14c>)
	USB1_GPTIMER0LD = microseconds - 1;
    49dc:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    49de:	4815      	ldr	r0, [pc, #84]	; (4a34 <usb_serial_configure+0x150>)
	USB1_GPTIMER0CTRL = 0;
    49e0:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    49e2:	4c15      	ldr	r4, [pc, #84]	; (4a38 <usb_serial_configure+0x154>)
    49e4:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    49e6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    49ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    49ee:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    49f2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    49f6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    49fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49fe:	bf00      	nop
    4a00:	20001ad8 	.word	0x20001ad8
    4a04:	20001c40 	.word	0x20001c40
    4a08:	20001b20 	.word	0x20001b20
    4a0c:	20001c34 	.word	0x20001c34
    4a10:	20001b17 	.word	0x20001b17
    4a14:	20001c30 	.word	0x20001c30
    4a18:	20001b18 	.word	0x20001b18
    4a1c:	20001c20 	.word	0x20001c20
    4a20:	20001b04 	.word	0x20001b04
    4a24:	00004785 	.word	0x00004785
    4a28:	20202060 	.word	0x20202060
    4a2c:	e000ef5c 	.word	0xe000ef5c
    4a30:	402e0000 	.word	0x402e0000
    4a34:	20001ac8 	.word	0x20001ac8
    4a38:	000046ed 	.word	0x000046ed
    4a3c:	20001b14 	.word	0x20001b14
    4a40:	20001c2e 	.word	0x20001c2e
    4a44:	20001cc0 	.word	0x20001cc0
    4a48:	e000e18c 	.word	0xe000e18c
    4a4c:	e000e10c 	.word	0xe000e10c

00004a50 <usb_serial_available>:
}

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    4a50:	4b01      	ldr	r3, [pc, #4]	; (4a58 <usb_serial_available+0x8>)
    4a52:	6818      	ldr	r0, [r3, #0]
}
    4a54:	4770      	bx	lr
    4a56:	bf00      	nop
    4a58:	20001c34 	.word	0x20001c34

00004a5c <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    4a5c:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4a5e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    4a62:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    4a64:	7f43      	ldrb	r3, [r0, #29]
    4a66:	b933      	cbnz	r3, 4a76 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4a68:	7f01      	ldrb	r1, [r0, #28]
    4a6a:	2901      	cmp	r1, #1
    4a6c:	d008      	beq.n	4a80 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4a6e:	2903      	cmp	r1, #3
    4a70:	d010      	beq.n	4a94 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    4a72:	2301      	movs	r3, #1
    4a74:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4a76:	b902      	cbnz	r2, 4a7a <EventResponder::triggerEventNotImmediate()+0x1e>
    4a78:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    4a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
    4a7e:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4a80:	4c11      	ldr	r4, [pc, #68]	; (4ac8 <EventResponder::triggerEventNotImmediate()+0x6c>)
    4a82:	6821      	ldr	r1, [r4, #0]
    4a84:	b1a1      	cbz	r1, 4ab0 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    4a86:	4911      	ldr	r1, [pc, #68]	; (4acc <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    4a88:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    4a8a:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    4a8c:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    4a8e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    4a90:	6158      	str	r0, [r3, #20]
    4a92:	e7ee      	b.n	4a72 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    4a94:	4c0e      	ldr	r4, [pc, #56]	; (4ad0 <EventResponder::triggerEventNotImmediate()+0x74>)
    4a96:	6821      	ldr	r1, [r4, #0]
    4a98:	b181      	cbz	r1, 4abc <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4a9a:	490e      	ldr	r1, [pc, #56]	; (4ad4 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    4a9c:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    4a9e:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    4aa0:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4aa2:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    4aa4:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    4aa6:	4b0c      	ldr	r3, [pc, #48]	; (4ad8 <EventResponder::triggerEventNotImmediate()+0x7c>)
    4aa8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    4aac:	6019      	str	r1, [r3, #0]
    4aae:	e7e0      	b.n	4a72 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4ab0:	4b06      	ldr	r3, [pc, #24]	; (4acc <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    4ab2:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    4ab4:	6181      	str	r1, [r0, #24]
				firstYield = this;
    4ab6:	6020      	str	r0, [r4, #0]
				lastYield = this;
    4ab8:	6018      	str	r0, [r3, #0]
    4aba:	e7da      	b.n	4a72 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    4abc:	4b05      	ldr	r3, [pc, #20]	; (4ad4 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    4abe:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    4ac0:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    4ac2:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    4ac4:	6018      	str	r0, [r3, #0]
    4ac6:	e7ee      	b.n	4aa6 <EventResponder::triggerEventNotImmediate()+0x4a>
    4ac8:	20001ce0 	.word	0x20001ce0
    4acc:	20001cdc 	.word	0x20001cdc
    4ad0:	20001cd4 	.word	0x20001cd4
    4ad4:	20001cd8 	.word	0x20001cd8
    4ad8:	e000ed04 	.word	0xe000ed04

00004adc <pendablesrvreq_isr>:
	}
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
    4adc:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4ade:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    4ae2:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4ae4:	4c0c      	ldr	r4, [pc, #48]	; (4b18 <pendablesrvreq_isr+0x3c>)
    4ae6:	6823      	ldr	r3, [r4, #0]
		if (first) {
    4ae8:	b18b      	cbz	r3, 4b0e <pendablesrvreq_isr+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4aea:	4e0c      	ldr	r6, [pc, #48]	; (4b1c <pendablesrvreq_isr+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4aec:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    4aee:	695a      	ldr	r2, [r3, #20]
    4af0:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    4af2:	b17a      	cbz	r2, 4b14 <pendablesrvreq_isr+0x38>
				firstInterrupt->_prev = nullptr;
    4af4:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4af6:	b901      	cbnz	r1, 4afa <pendablesrvreq_isr+0x1e>
    4af8:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    4afa:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    4afc:	4618      	mov	r0, r3
    4afe:	689b      	ldr	r3, [r3, #8]
    4b00:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4b02:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    4b06:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4b08:	6823      	ldr	r3, [r4, #0]
		if (first) {
    4b0a:	2b00      	cmp	r3, #0
    4b0c:	d1ef      	bne.n	4aee <pendablesrvreq_isr+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4b0e:	b901      	cbnz	r1, 4b12 <pendablesrvreq_isr+0x36>
    4b10:	b662      	cpsie	i
    4b12:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4b14:	6032      	str	r2, [r6, #0]
    4b16:	e7ee      	b.n	4af6 <pendablesrvreq_isr+0x1a>
    4b18:	20001cd4 	.word	0x20001cd4
    4b1c:	20001cd8 	.word	0x20001cd8

00004b20 <EventResponder::detachNoInterrupts()>:
}

// this detach must be called with interrupts disabled
void EventResponder::detachNoInterrupts()
{
	if (_type == EventTypeYield) {
    4b20:	7f03      	ldrb	r3, [r0, #28]
    4b22:	2b01      	cmp	r3, #1
    4b24:	d00f      	beq.n	4b46 <EventResponder::detachNoInterrupts()+0x26>
			} else {
				lastYield = _prev;
			}
		}
		_type = EventTypeDetached;
	} else if (_type == EventTypeInterrupt) {
    4b26:	2b03      	cmp	r3, #3
    4b28:	d000      	beq.n	4b2c <EventResponder::detachNoInterrupts()+0xc>
    4b2a:	4770      	bx	lr
		if (_triggered) {
    4b2c:	7f43      	ldrb	r3, [r0, #29]
    4b2e:	b13b      	cbz	r3, 4b40 <EventResponder::detachNoInterrupts()+0x20>
			if (_prev) {
    4b30:	6983      	ldr	r3, [r0, #24]
				_prev->_next = _next;
    4b32:	6942      	ldr	r2, [r0, #20]
			}
		}
		_type = EventTypeDetached;
	} else if (_type == EventTypeInterrupt) {
		if (_triggered) {
			if (_prev) {
    4b34:	b1d3      	cbz	r3, 4b6c <EventResponder::detachNoInterrupts()+0x4c>
				_prev->_next = _next;
    4b36:	615a      	str	r2, [r3, #20]
    4b38:	6942      	ldr	r2, [r0, #20]
			} else {
				firstInterrupt = _next;
			}
			if (_next) {
    4b3a:	b96a      	cbnz	r2, 4b58 <EventResponder::detachNoInterrupts()+0x38>
				_next->_prev = _prev;
			} else {
				lastInterrupt = _prev;
    4b3c:	4a0e      	ldr	r2, [pc, #56]	; (4b78 <EventResponder::detachNoInterrupts()+0x58>)
    4b3e:	6013      	str	r3, [r2, #0]
				_next->_prev = _prev;
			} else {
				lastYield = _prev;
			}
		}
		_type = EventTypeDetached;
    4b40:	2300      	movs	r3, #0
    4b42:	7703      	strb	r3, [r0, #28]
    4b44:	4770      	bx	lr

// this detach must be called with interrupts disabled
void EventResponder::detachNoInterrupts()
{
	if (_type == EventTypeYield) {
		if (_triggered) {
    4b46:	7f43      	ldrb	r3, [r0, #29]
    4b48:	2b00      	cmp	r3, #0
    4b4a:	d0f9      	beq.n	4b40 <EventResponder::detachNoInterrupts()+0x20>
			if (_prev) {
    4b4c:	6983      	ldr	r3, [r0, #24]
				_prev->_next = _next;
    4b4e:	6942      	ldr	r2, [r0, #20]
// this detach must be called with interrupts disabled
void EventResponder::detachNoInterrupts()
{
	if (_type == EventTypeYield) {
		if (_triggered) {
			if (_prev) {
    4b50:	b14b      	cbz	r3, 4b66 <EventResponder::detachNoInterrupts()+0x46>
				_prev->_next = _next;
    4b52:	615a      	str	r2, [r3, #20]
    4b54:	6942      	ldr	r2, [r0, #20]
			} else {
				firstYield = _next;
			}
			if (_next) {
    4b56:	b11a      	cbz	r2, 4b60 <EventResponder::detachNoInterrupts()+0x40>
				_prev->_next = _next;
			} else {
				firstInterrupt = _next;
			}
			if (_next) {
				_next->_prev = _prev;
    4b58:	6193      	str	r3, [r2, #24]
				_next->_prev = _prev;
			} else {
				lastYield = _prev;
			}
		}
		_type = EventTypeDetached;
    4b5a:	2300      	movs	r3, #0
    4b5c:	7703      	strb	r3, [r0, #28]
    4b5e:	4770      	bx	lr
				firstYield = _next;
			}
			if (_next) {
				_next->_prev = _prev;
			} else {
				lastYield = _prev;
    4b60:	4a06      	ldr	r2, [pc, #24]	; (4b7c <EventResponder::detachNoInterrupts()+0x5c>)
    4b62:	6013      	str	r3, [r2, #0]
    4b64:	e7ec      	b.n	4b40 <EventResponder::detachNoInterrupts()+0x20>
	if (_type == EventTypeYield) {
		if (_triggered) {
			if (_prev) {
				_prev->_next = _next;
			} else {
				firstYield = _next;
    4b66:	4906      	ldr	r1, [pc, #24]	; (4b80 <EventResponder::detachNoInterrupts()+0x60>)
    4b68:	600a      	str	r2, [r1, #0]
    4b6a:	e7f4      	b.n	4b56 <EventResponder::detachNoInterrupts()+0x36>
	} else if (_type == EventTypeInterrupt) {
		if (_triggered) {
			if (_prev) {
				_prev->_next = _next;
			} else {
				firstInterrupt = _next;
    4b6c:	4905      	ldr	r1, [pc, #20]	; (4b84 <EventResponder::detachNoInterrupts()+0x64>)
    4b6e:	600a      	str	r2, [r1, #0]
			}
			if (_next) {
    4b70:	2a00      	cmp	r2, #0
    4b72:	d1f1      	bne.n	4b58 <EventResponder::detachNoInterrupts()+0x38>
    4b74:	e7e2      	b.n	4b3c <EventResponder::detachNoInterrupts()+0x1c>
    4b76:	bf00      	nop
    4b78:	20001cd8 	.word	0x20001cd8
    4b7c:	20001cdc 	.word	0x20001cdc
    4b80:	20001ce0 	.word	0x20001ce0
    4b84:	20001cd4 	.word	0x20001cd4

00004b88 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    4b88:	4a04      	ldr	r2, [pc, #16]	; (4b9c <systick_isr+0x14>)
    4b8a:	4b05      	ldr	r3, [pc, #20]	; (4ba0 <systick_isr+0x18>)
    4b8c:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    4b8e:	4a05      	ldr	r2, [pc, #20]	; (4ba4 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    4b90:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    4b92:	6813      	ldr	r3, [r2, #0]
    4b94:	3301      	adds	r3, #1
    4b96:	6013      	str	r3, [r2, #0]
    4b98:	4770      	bx	lr
    4b9a:	bf00      	nop
    4b9c:	e0001004 	.word	0xe0001004
    4ba0:	20001aa8 	.word	0x20001aa8
    4ba4:	20001ab0 	.word	0x20001ab0

00004ba8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    4ba8:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    4baa:	f7fb fa8b 	bl	c4 <setup>
	while (1) {
		loop();
    4bae:	f7fb fc23 	bl	3f8 <loop>
		yield();
    4bb2:	f000 f805 	bl	4bc0 <yield>
    4bb6:	e7fa      	b.n	4bae <main+0x6>

00004bb8 <operator new(unsigned int)>:
    4bb8:	f000 bbfc 	b.w	53b4 <malloc>

00004bbc <operator delete(void*, unsigned int)>:
    4bbc:	f000 bc02 	b.w	53c4 <free>

00004bc0 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    4bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    4bc4:	4e32      	ldr	r6, [pc, #200]	; (4c90 <yield+0xd0>)
    4bc6:	7833      	ldrb	r3, [r6, #0]
    4bc8:	b193      	cbz	r3, 4bf0 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    4bca:	4f32      	ldr	r7, [pc, #200]	; (4c94 <yield+0xd4>)
    4bcc:	783a      	ldrb	r2, [r7, #0]
    4bce:	b97a      	cbnz	r2, 4bf0 <yield+0x30>
	running = 1;
    4bd0:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    4bd2:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    4bd4:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    4bd6:	d437      	bmi.n	4c48 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    4bd8:	079a      	lsls	r2, r3, #30
    4bda:	d419      	bmi.n	4c10 <yield+0x50>

	running = 0;
    4bdc:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    4bde:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    4be0:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    4be2:	d505      	bpl.n	4bf0 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    4be4:	4b2c      	ldr	r3, [pc, #176]	; (4c98 <yield+0xd8>)
    4be6:	681a      	ldr	r2, [r3, #0]
    4be8:	b112      	cbz	r2, 4bf0 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    4bea:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    4bee:	b10a      	cbz	r2, 4bf4 <yield+0x34>
    4bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4bf4:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    4bf8:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    4bfa:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    4bfc:	b11a      	cbz	r2, 4c06 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    4bfe:	4c27      	ldr	r4, [pc, #156]	; (4c9c <yield+0xdc>)
    4c00:	7821      	ldrb	r1, [r4, #0]
    4c02:	2900      	cmp	r1, #0
    4c04:	d02f      	beq.n	4c66 <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4c06:	2800      	cmp	r0, #0
    4c08:	d1f2      	bne.n	4bf0 <yield+0x30>
    4c0a:	b662      	cpsie	i
    4c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4c10:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4ca8 <yield+0xe8>
    4c14:	f898 2000 	ldrb.w	r2, [r8]
    4c18:	2a00      	cmp	r2, #0
    4c1a:	d0df      	beq.n	4bdc <yield+0x1c>
    4c1c:	2400      	movs	r4, #0
    4c1e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4cac <yield+0xec>
    4c22:	e005      	b.n	4c30 <yield+0x70>
    4c24:	3401      	adds	r4, #1
    4c26:	f898 3000 	ldrb.w	r3, [r8]
    4c2a:	b2e4      	uxtb	r4, r4
    4c2c:	42a3      	cmp	r3, r4
    4c2e:	d913      	bls.n	4c58 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    4c30:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    4c34:	682b      	ldr	r3, [r5, #0]
    4c36:	4628      	mov	r0, r5
    4c38:	691b      	ldr	r3, [r3, #16]
    4c3a:	4798      	blx	r3
    4c3c:	2800      	cmp	r0, #0
    4c3e:	d0f1      	beq.n	4c24 <yield+0x64>
    4c40:	696b      	ldr	r3, [r5, #20]
    4c42:	689b      	ldr	r3, [r3, #8]
    4c44:	4798      	blx	r3
    4c46:	e7ed      	b.n	4c24 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4c48:	f7ff ff02 	bl	4a50 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    4c4c:	b9d0      	cbnz	r0, 4c84 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    4c4e:	4b14      	ldr	r3, [pc, #80]	; (4ca0 <yield+0xe0>)
    4c50:	781b      	ldrb	r3, [r3, #0]
    4c52:	b91b      	cbnz	r3, 4c5c <yield+0x9c>
    4c54:	7833      	ldrb	r3, [r6, #0]
    4c56:	e7bf      	b.n	4bd8 <yield+0x18>
    4c58:	7833      	ldrb	r3, [r6, #0]
    4c5a:	e7bf      	b.n	4bdc <yield+0x1c>
    4c5c:	7833      	ldrb	r3, [r6, #0]
    4c5e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4c62:	7033      	strb	r3, [r6, #0]
    4c64:	e7b8      	b.n	4bd8 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    4c66:	2601      	movs	r6, #1
		firstYield = first->_next;
    4c68:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    4c6a:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    4c6c:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    4c6e:	b165      	cbz	r5, 4c8a <yield+0xca>
			firstYield->_prev = nullptr;
    4c70:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4c72:	b900      	cbnz	r0, 4c76 <yield+0xb6>
    4c74:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    4c76:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    4c78:	6893      	ldr	r3, [r2, #8]
    4c7a:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    4c7c:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    4c7e:	4798      	blx	r3
		runningFromYield = false;
    4c80:	7025      	strb	r5, [r4, #0]
    4c82:	e7b5      	b.n	4bf0 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    4c84:	f000 fb5a 	bl	533c <serialEvent()>
    4c88:	e7e1      	b.n	4c4e <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    4c8a:	4b06      	ldr	r3, [pc, #24]	; (4ca4 <yield+0xe4>)
    4c8c:	601d      	str	r5, [r3, #0]
    4c8e:	e7f0      	b.n	4c72 <yield+0xb2>
    4c90:	2000070a 	.word	0x2000070a
    4c94:	20001ce5 	.word	0x20001ce5
    4c98:	20001ce0 	.word	0x20001ce0
    4c9c:	20001ce4 	.word	0x20001ce4
    4ca0:	60001aa6 	.word	0x60001aa6
    4ca4:	20001cdc 	.word	0x20001cdc
    4ca8:	20001d08 	.word	0x20001d08
    4cac:	20001ce8 	.word	0x20001ce8

00004cb0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    4cb0:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    4cb2:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    4cb6:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    4cba:	d16d      	bne.n	4d98 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    4cbc:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    4cbe:	d341      	bcc.n	4d44 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    4cc0:	f851 3b04 	ldr.w	r3, [r1], #4
    4cc4:	f840 3b04 	str.w	r3, [r0], #4
    4cc8:	f851 3b04 	ldr.w	r3, [r1], #4
    4ccc:	f840 3b04 	str.w	r3, [r0], #4
    4cd0:	f851 3b04 	ldr.w	r3, [r1], #4
    4cd4:	f840 3b04 	str.w	r3, [r0], #4
    4cd8:	f851 3b04 	ldr.w	r3, [r1], #4
    4cdc:	f840 3b04 	str.w	r3, [r0], #4
    4ce0:	f851 3b04 	ldr.w	r3, [r1], #4
    4ce4:	f840 3b04 	str.w	r3, [r0], #4
    4ce8:	f851 3b04 	ldr.w	r3, [r1], #4
    4cec:	f840 3b04 	str.w	r3, [r0], #4
    4cf0:	f851 3b04 	ldr.w	r3, [r1], #4
    4cf4:	f840 3b04 	str.w	r3, [r0], #4
    4cf8:	f851 3b04 	ldr.w	r3, [r1], #4
    4cfc:	f840 3b04 	str.w	r3, [r0], #4
    4d00:	f851 3b04 	ldr.w	r3, [r1], #4
    4d04:	f840 3b04 	str.w	r3, [r0], #4
    4d08:	f851 3b04 	ldr.w	r3, [r1], #4
    4d0c:	f840 3b04 	str.w	r3, [r0], #4
    4d10:	f851 3b04 	ldr.w	r3, [r1], #4
    4d14:	f840 3b04 	str.w	r3, [r0], #4
    4d18:	f851 3b04 	ldr.w	r3, [r1], #4
    4d1c:	f840 3b04 	str.w	r3, [r0], #4
    4d20:	f851 3b04 	ldr.w	r3, [r1], #4
    4d24:	f840 3b04 	str.w	r3, [r0], #4
    4d28:	f851 3b04 	ldr.w	r3, [r1], #4
    4d2c:	f840 3b04 	str.w	r3, [r0], #4
    4d30:	f851 3b04 	ldr.w	r3, [r1], #4
    4d34:	f840 3b04 	str.w	r3, [r0], #4
    4d38:	f851 3b04 	ldr.w	r3, [r1], #4
    4d3c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    4d40:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    4d42:	d2bd      	bcs.n	4cc0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    4d44:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    4d46:	d311      	bcc.n	4d6c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    4d48:	f851 3b04 	ldr.w	r3, [r1], #4
    4d4c:	f840 3b04 	str.w	r3, [r0], #4
    4d50:	f851 3b04 	ldr.w	r3, [r1], #4
    4d54:	f840 3b04 	str.w	r3, [r0], #4
    4d58:	f851 3b04 	ldr.w	r3, [r1], #4
    4d5c:	f840 3b04 	str.w	r3, [r0], #4
    4d60:	f851 3b04 	ldr.w	r3, [r1], #4
    4d64:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    4d68:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    4d6a:	d2ed      	bcs.n	4d48 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    4d6c:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    4d6e:	d305      	bcc.n	4d7c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    4d70:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    4d74:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    4d78:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    4d7a:	d2f9      	bcs.n	4d70 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    4d7c:	3204      	adds	r2, #4
	beq	.Ldone
    4d7e:	d008      	beq.n	4d92 <memcpy+0xe2>

	lsls	r2, r2, #31
    4d80:	07d2      	lsls	r2, r2, #31
	itt ne
    4d82:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    4d84:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    4d88:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    4d8c:	d301      	bcc.n	4d92 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    4d8e:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    4d90:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    4d92:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    4d94:	4770      	bx	lr
    4d96:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    4d98:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    4d9a:	d313      	bcc.n	4dc4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    4d9c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    4d9e:	d08d      	beq.n	4cbc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    4da0:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    4da4:	d08a      	beq.n	4cbc <memcpy+0xc>

	rsb	r3, #4
    4da6:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    4daa:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    4dac:	07db      	lsls	r3, r3, #31
	itt ne
    4dae:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    4db0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    4db4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    4db8:	d380      	bcc.n	4cbc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    4dba:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    4dbe:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    4dc2:	e77b      	b.n	4cbc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    4dc4:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    4dc6:	d3d9      	bcc.n	4d7c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    4dc8:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    4dca:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    4dce:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    4dd2:	d2f9      	bcs.n	4dc8 <memcpy+0x118>

	ldrb	r3, [r1]
    4dd4:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    4dd6:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    4dd8:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    4dda:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    4ddc:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    4dde:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    4de0:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    4de2:	4770      	bx	lr

00004de4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4de4:	b4f0      	push	{r4, r5, r6, r7}
    4de6:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    4de8:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4dea:	4637      	mov	r7, r6
    4dec:	e000      	b.n	4df0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    4dee:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    4df0:	fbb0 f3f2 	udiv	r3, r0, r2
    4df4:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4df8:	f100 0437 	add.w	r4, r0, #55	; 0x37
    4dfc:	2809      	cmp	r0, #9
    4dfe:	f100 0030 	add.w	r0, r0, #48	; 0x30
    4e02:	b2e4      	uxtb	r4, r4
    4e04:	bf98      	it	ls
    4e06:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    4e08:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4e0a:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    4e0e:	2b00      	cmp	r3, #0
    4e10:	d1ed      	bne.n	4dee <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    4e12:	194a      	adds	r2, r1, r5
    4e14:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    4e16:	b14d      	cbz	r5, 4e2c <ultoa+0x48>
    4e18:	3301      	adds	r3, #1
		t = buf[j];
    4e1a:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    4e1e:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4e20:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    4e22:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4e24:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    4e26:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4e2a:	dbf5      	blt.n	4e18 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    4e2c:	4608      	mov	r0, r1
    4e2e:	bcf0      	pop	{r4, r5, r6, r7}
    4e30:	4770      	bx	lr
    4e32:	bf00      	nop

00004e34 <pwm_init>:
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    4e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4e38:	4fdb      	ldr	r7, [pc, #876]	; (51a8 <pwm_init+0x374>)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    4e3a:	2300      	movs	r3, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4e3c:	f8df e380 	ldr.w	lr, [pc, #896]	; 51c0 <pwm_init+0x38c>
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    4e40:	250f      	movs	r5, #15
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4e42:	6fba      	ldr	r2, [r7, #120]	; 0x78

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4e44:	f44f 4c70 	mov.w	ip, #61440	; 0xf000
    4e48:	49d8      	ldr	r1, [pc, #864]	; (51ac <pwm_init+0x378>)
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4e4a:	f44f 4660 	mov.w	r6, #57344	; 0xe000
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4e4e:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4e52:	f44f 6480 	mov.w	r4, #1024	; 0x400
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    4e56:	f248 20b8 	movw	r0, #33464	; 0x82b8
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4e5a:	67ba      	str	r2, [r7, #120]	; 0x78
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4e5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    4e60:	ea42 0e0e 	orr.w	lr, r2, lr
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4e64:	4ad2      	ldr	r2, [pc, #840]	; (51b0 <pwm_init+0x37c>)
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4e66:	f8c7 e080 	str.w	lr, [r7, #128]	; 0x80

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4e6a:	f241 0e01 	movw	lr, #4097	; 0x1001

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4e6e:	f8a1 c18c 	strh.w	ip, [r1, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    4e72:	f8a1 518e 	strh.w	r5, [r1, #398]	; 0x18e
	p->FFILT0 = 0;
    4e76:	f8a1 3190 	strh.w	r3, [r1, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    4e7a:	f8b1 7188 	ldrh.w	r7, [r1, #392]	; 0x188
    4e7e:	b2bf      	uxth	r7, r7
    4e80:	f047 07f0 	orr.w	r7, r7, #240	; 0xf0
    4e84:	f8a1 7188 	strh.w	r7, [r1, #392]	; 0x188
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4e88:	f645 57c0 	movw	r7, #24000	; 0x5dc0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4e8c:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4e8e:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    4e90:	844b      	strh	r3, [r1, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    4e92:	860b      	strh	r3, [r1, #48]	; 0x30
		p->SM[i].INIT = 0;
    4e94:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    4e96:	814b      	strh	r3, [r1, #10]
		p->SM[i].VAL1 = 33464;
    4e98:	81c8      	strh	r0, [r1, #14]
		p->SM[i].VAL2 = 0;
    4e9a:	824b      	strh	r3, [r1, #18]
		p->SM[i].VAL3 = 0;
    4e9c:	82cb      	strh	r3, [r1, #22]
		p->SM[i].VAL4 = 0;
    4e9e:	834b      	strh	r3, [r1, #26]
		p->SM[i].VAL5 = 0;
    4ea0:	83cb      	strh	r3, [r1, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4ea2:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4ea4:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    4ea6:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    4eaa:	f8a1 3090 	strh.w	r3, [r1, #144]	; 0x90
		p->SM[i].INIT = 0;
    4eae:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    4eb0:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    4eb4:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    4eb8:	f8a1 3072 	strh.w	r3, [r1, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    4ebc:	f8a1 3076 	strh.w	r3, [r1, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    4ec0:	f8a1 307a 	strh.w	r3, [r1, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    4ec4:	f8a1 307e 	strh.w	r3, [r1, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4ec8:	f8a2 6064 	strh.w	r6, [r2, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4ecc:	f8a2 4066 	strh.w	r4, [r2, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    4ed0:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    4ed4:	f8a1 30f0 	strh.w	r3, [r1, #240]	; 0xf0
		p->SM[i].INIT = 0;
    4ed8:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    4edc:	f8a1 30ca 	strh.w	r3, [r1, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    4ee0:	f8a1 00ce 	strh.w	r0, [r1, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    4ee4:	f8a1 30d2 	strh.w	r3, [r1, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    4ee8:	f8a1 30d6 	strh.w	r3, [r1, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    4eec:	f8a1 30da 	strh.w	r3, [r1, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    4ef0:	f8a1 30de 	strh.w	r3, [r1, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4ef4:	f8a2 60c4 	strh.w	r6, [r2, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4ef8:	f8a2 40c6 	strh.w	r4, [r2, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    4efc:	f8a1 3142 	strh.w	r3, [r1, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    4f00:	f8a1 3150 	strh.w	r3, [r1, #336]	; 0x150
		p->SM[i].INIT = 0;
    4f04:	f8a2 30c2 	strh.w	r3, [r2, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    4f08:	f8a1 312a 	strh.w	r3, [r1, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    4f0c:	f8a1 012e 	strh.w	r0, [r1, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    4f10:	f8a1 3132 	strh.w	r3, [r1, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    4f14:	f8a1 3136 	strh.w	r3, [r1, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    4f18:	f8a1 313a 	strh.w	r3, [r1, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    4f1c:	f8a1 313e 	strh.w	r3, [r1, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4f20:	f8b1 2188 	ldrh.w	r2, [r1, #392]	; 0x188
    4f24:	b292      	uxth	r2, r2
    4f26:	432a      	orrs	r2, r5
    4f28:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    4f2c:	f8b1 8188 	ldrh.w	r8, [r1, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4f30:	4aa0      	ldr	r2, [pc, #640]	; (51b4 <pwm_init+0x380>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    4f32:	fa1f f888 	uxth.w	r8, r8
    4f36:	f448 6870 	orr.w	r8, r8, #3840	; 0xf00
    4f3a:	f8a1 8188 	strh.w	r8, [r1, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4f3e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4f42:	f8a2 c18c 	strh.w	ip, [r2, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    4f46:	f8a2 518e 	strh.w	r5, [r2, #398]	; 0x18e
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4f4a:	3160      	adds	r1, #96	; 0x60
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    4f4c:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    4f50:	f8b2 8188 	ldrh.w	r8, [r2, #392]	; 0x188
    4f54:	fa1f f888 	uxth.w	r8, r8
    4f58:	f048 08f0 	orr.w	r8, r8, #240	; 0xf0
    4f5c:	f8a2 8188 	strh.w	r8, [r2, #392]	; 0x188
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4f60:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4f62:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    4f64:	8453      	strh	r3, [r2, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    4f66:	8613      	strh	r3, [r2, #48]	; 0x30
		p->SM[i].INIT = 0;
    4f68:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    4f6a:	8153      	strh	r3, [r2, #10]
		p->SM[i].VAL1 = 33464;
    4f6c:	81d0      	strh	r0, [r2, #14]
		p->SM[i].VAL2 = 0;
    4f6e:	8253      	strh	r3, [r2, #18]
		p->SM[i].VAL3 = 0;
    4f70:	82d3      	strh	r3, [r2, #22]
		p->SM[i].VAL4 = 0;
    4f72:	8353      	strh	r3, [r2, #26]
		p->SM[i].VAL5 = 0;
    4f74:	83d3      	strh	r3, [r2, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4f76:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4f78:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    4f7a:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    4f7e:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
		p->SM[i].INIT = 0;
    4f82:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    4f84:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    4f88:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    4f8c:	f8a2 3072 	strh.w	r3, [r2, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    4f90:	f8a2 3076 	strh.w	r3, [r2, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    4f94:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    4f98:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4f9c:	f8a1 6064 	strh.w	r6, [r1, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4fa0:	f8a1 4066 	strh.w	r4, [r1, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    4fa4:	f8a2 30e2 	strh.w	r3, [r2, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    4fa8:	f8a2 30f0 	strh.w	r3, [r2, #240]	; 0xf0
		p->SM[i].INIT = 0;
    4fac:	f8a1 3062 	strh.w	r3, [r1, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    4fb0:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    4fb4:	f8a2 00ce 	strh.w	r0, [r2, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    4fb8:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    4fbc:	f8a2 30d6 	strh.w	r3, [r2, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    4fc0:	f8a2 30da 	strh.w	r3, [r2, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    4fc4:	f8a2 30de 	strh.w	r3, [r2, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4fc8:	f8a1 60c4 	strh.w	r6, [r1, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4fcc:	f8a1 40c6 	strh.w	r4, [r1, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    4fd0:	f8a2 3142 	strh.w	r3, [r2, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    4fd4:	f8a2 3150 	strh.w	r3, [r2, #336]	; 0x150
		p->SM[i].INIT = 0;
    4fd8:	f8a1 30c2 	strh.w	r3, [r1, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    4fdc:	f8a2 312a 	strh.w	r3, [r2, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    4fe0:	f8a2 012e 	strh.w	r0, [r2, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    4fe4:	f8a2 3132 	strh.w	r3, [r2, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    4fe8:	f8a2 3136 	strh.w	r3, [r2, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    4fec:	f8a2 313a 	strh.w	r3, [r2, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    4ff0:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4ff4:	f8b2 1188 	ldrh.w	r1, [r2, #392]	; 0x188
    4ff8:	b289      	uxth	r1, r1
    4ffa:	4329      	orrs	r1, r5
    4ffc:	f8a2 1188 	strh.w	r1, [r2, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    5000:	f8b2 8188 	ldrh.w	r8, [r2, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    5004:	496c      	ldr	r1, [pc, #432]	; (51b8 <pwm_init+0x384>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    5006:	fa1f f888 	uxth.w	r8, r8
    500a:	f448 6870 	orr.w	r8, r8, #3840	; 0xf00
    500e:	f8a2 8188 	strh.w	r8, [r2, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5012:	f502 4280 	add.w	r2, r2, #16384	; 0x4000

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    5016:	f8a1 c18c 	strh.w	ip, [r1, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    501a:	f8a1 518e 	strh.w	r5, [r1, #398]	; 0x18e
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    501e:	3260      	adds	r2, #96	; 0x60
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    5020:	f8a1 3190 	strh.w	r3, [r1, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    5024:	f8b1 8188 	ldrh.w	r8, [r1, #392]	; 0x188
    5028:	fa1f f888 	uxth.w	r8, r8
    502c:	f048 08f0 	orr.w	r8, r8, #240	; 0xf0
    5030:	f8a1 8188 	strh.w	r8, [r1, #392]	; 0x188
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5034:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    5036:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    5038:	844b      	strh	r3, [r1, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    503a:	860b      	strh	r3, [r1, #48]	; 0x30
		p->SM[i].INIT = 0;
    503c:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    503e:	814b      	strh	r3, [r1, #10]
		p->SM[i].VAL1 = 33464;
    5040:	81c8      	strh	r0, [r1, #14]
		p->SM[i].VAL2 = 0;
    5042:	824b      	strh	r3, [r1, #18]
		p->SM[i].VAL3 = 0;
    5044:	82cb      	strh	r3, [r1, #22]
		p->SM[i].VAL4 = 0;
    5046:	834b      	strh	r3, [r1, #26]
		p->SM[i].VAL5 = 0;
    5048:	83cb      	strh	r3, [r1, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    504a:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    504c:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    504e:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    5052:	f8a1 3090 	strh.w	r3, [r1, #144]	; 0x90
		p->SM[i].INIT = 0;
    5056:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    5058:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    505c:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    5060:	f8a1 3072 	strh.w	r3, [r1, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    5064:	f8a1 3076 	strh.w	r3, [r1, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    5068:	f8a1 307a 	strh.w	r3, [r1, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    506c:	f8a1 307e 	strh.w	r3, [r1, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5070:	f8a2 6064 	strh.w	r6, [r2, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    5074:	f8a2 4066 	strh.w	r4, [r2, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    5078:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    507c:	f8a1 30f0 	strh.w	r3, [r1, #240]	; 0xf0
		p->SM[i].INIT = 0;
    5080:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    5084:	f8a1 30ca 	strh.w	r3, [r1, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    5088:	f8a1 00ce 	strh.w	r0, [r1, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    508c:	f8a1 30d2 	strh.w	r3, [r1, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    5090:	f8a1 30d6 	strh.w	r3, [r1, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    5094:	f8a1 30da 	strh.w	r3, [r1, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    5098:	f8a1 30de 	strh.w	r3, [r1, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    509c:	f8a2 60c4 	strh.w	r6, [r2, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    50a0:	f8a2 40c6 	strh.w	r4, [r2, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    50a4:	f8a1 3142 	strh.w	r3, [r1, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    50a8:	f8a1 3150 	strh.w	r3, [r1, #336]	; 0x150
		p->SM[i].INIT = 0;
    50ac:	f8a2 30c2 	strh.w	r3, [r2, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    50b0:	f8a1 312a 	strh.w	r3, [r1, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    50b4:	f8a1 012e 	strh.w	r0, [r1, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    50b8:	f8a1 3132 	strh.w	r3, [r1, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    50bc:	f8a1 3136 	strh.w	r3, [r1, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    50c0:	f8a1 313a 	strh.w	r3, [r1, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    50c4:	f8a1 313e 	strh.w	r3, [r1, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    50c8:	f8b1 2188 	ldrh.w	r2, [r1, #392]	; 0x188
    50cc:	b292      	uxth	r2, r2
    50ce:	432a      	orrs	r2, r5
    50d0:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    50d4:	f8b1 8188 	ldrh.w	r8, [r1, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    50d8:	4a38      	ldr	r2, [pc, #224]	; (51bc <pwm_init+0x388>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    50da:	fa1f f888 	uxth.w	r8, r8
    50de:	f448 6870 	orr.w	r8, r8, #3840	; 0xf00
    50e2:	f8a1 8188 	strh.w	r8, [r1, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    50e6:	f501 4180 	add.w	r1, r1, #16384	; 0x4000

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    50ea:	f8a2 c18c 	strh.w	ip, [r2, #396]	; 0x18c
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    50ee:	f243 0c26 	movw	ip, #12326	; 0x3026
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    50f2:	f8a2 518e 	strh.w	r5, [r2, #398]	; 0x18e
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    50f6:	3160      	adds	r1, #96	; 0x60
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    50f8:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    50fc:	f8b2 8188 	ldrh.w	r8, [r2, #392]	; 0x188
    5100:	fa1f f888 	uxth.w	r8, r8
    5104:	f048 08f0 	orr.w	r8, r8, #240	; 0xf0
    5108:	f8a2 8188 	strh.w	r8, [r2, #392]	; 0x188
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    510c:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    510e:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    5110:	8453      	strh	r3, [r2, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    5112:	8613      	strh	r3, [r2, #48]	; 0x30
		p->SM[i].INIT = 0;
    5114:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    5116:	8153      	strh	r3, [r2, #10]
		p->SM[i].VAL1 = 33464;
    5118:	81d0      	strh	r0, [r2, #14]
		p->SM[i].VAL2 = 0;
    511a:	8253      	strh	r3, [r2, #18]
		p->SM[i].VAL3 = 0;
    511c:	82d3      	strh	r3, [r2, #22]
		p->SM[i].VAL4 = 0;
    511e:	8353      	strh	r3, [r2, #26]
		p->SM[i].VAL5 = 0;
    5120:	83d3      	strh	r3, [r2, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5122:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    5124:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    5126:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    512a:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
		p->SM[i].INIT = 0;
    512e:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    5130:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    5134:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    5138:	f8a2 3072 	strh.w	r3, [r2, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    513c:	f8a2 3076 	strh.w	r3, [r2, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    5140:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    5144:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5148:	f8a1 6064 	strh.w	r6, [r1, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    514c:	f8a1 4066 	strh.w	r4, [r1, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    5150:	f8a2 30e2 	strh.w	r3, [r2, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    5154:	f8a2 30f0 	strh.w	r3, [r2, #240]	; 0xf0
		p->SM[i].INIT = 0;
    5158:	f8a1 3062 	strh.w	r3, [r1, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    515c:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    5160:	f8a2 00ce 	strh.w	r0, [r2, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    5164:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    5168:	f8a2 30d6 	strh.w	r3, [r2, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    516c:	f8a2 30da 	strh.w	r3, [r2, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    5170:	f8a2 30de 	strh.w	r3, [r2, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5174:	f8a1 60c4 	strh.w	r6, [r1, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    5178:	f8a1 40c6 	strh.w	r4, [r1, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    517c:	f8a2 3142 	strh.w	r3, [r2, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    5180:	f8a2 3150 	strh.w	r3, [r2, #336]	; 0x150
		p->SM[i].INIT = 0;
    5184:	f8a1 30c2 	strh.w	r3, [r1, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    5188:	f8a2 312a 	strh.w	r3, [r2, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    518c:	f8a2 012e 	strh.w	r0, [r2, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    5190:	f8a2 3132 	strh.w	r3, [r2, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    5194:	f8a2 3136 	strh.w	r3, [r2, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    5198:	f8a2 313a 	strh.w	r3, [r2, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    519c:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    51a0:	f8b2 1188 	ldrh.w	r1, [r2, #392]	; 0x188
    51a4:	e00e      	b.n	51c4 <pwm_init+0x390>
    51a6:	bf00      	nop
    51a8:	400fc000 	.word	0x400fc000
    51ac:	403dc000 	.word	0x403dc000
    51b0:	403dc060 	.word	0x403dc060
    51b4:	403e0000 	.word	0x403e0000
    51b8:	403e4000 	.word	0x403e4000
    51bc:	403e8000 	.word	0x403e8000
    51c0:	fc030000 	.word	0xfc030000
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    51c4:	4c57      	ldr	r4, [pc, #348]	; (5324 <pwm_init+0x4f0>)
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    51c6:	b289      	uxth	r1, r1
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    51c8:	4857      	ldr	r0, [pc, #348]	; (5328 <pwm_init+0x4f4>)
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    51ca:	f8df 816c 	ldr.w	r8, [pc, #364]	; 5338 <pwm_init+0x504>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    51ce:	4329      	orrs	r1, r5
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    51d0:	4e56      	ldr	r6, [pc, #344]	; (532c <pwm_init+0x4f8>)
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    51d2:	f8a2 1188 	strh.w	r1, [r2, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    51d6:	f8b2 9188 	ldrh.w	r9, [r2, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    51da:	4955      	ldr	r1, [pc, #340]	; (5330 <pwm_init+0x4fc>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    51dc:	fa1f f989 	uxth.w	r9, r9
    51e0:	f449 6970 	orr.w	r9, r9, #3840	; 0xf00
    51e4:	f8a2 9188 	strh.w	r9, [r2, #392]	; 0x188
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    51e8:	4a52      	ldr	r2, [pc, #328]	; (5334 <pwm_init+0x500>)
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    51ea:	81a3      	strh	r3, [r4, #12]
		p->CH[i].CNTR = 0;
    51ec:	8163      	strh	r3, [r4, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    51ee:	81e5      	strh	r5, [r4, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    51f0:	f8a4 e014 	strh.w	lr, [r4, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    51f4:	80e7      	strh	r7, [r4, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    51f6:	8023      	strh	r3, [r4, #0]
		p->CH[i].CMPLD1 = 0;
    51f8:	8223      	strh	r3, [r4, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    51fa:	f8a4 c00c 	strh.w	ip, [r4, #12]
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    51fe:	85a3      	strh	r3, [r4, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    5200:	8563      	strh	r3, [r4, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5202:	85e5      	strh	r5, [r4, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5204:	f8a4 e034 	strh.w	lr, [r4, #52]	; 0x34
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5208:	f8a8 7006 	strh.w	r7, [r8, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    520c:	f8a8 3000 	strh.w	r3, [r8]
		p->CH[i].CMPLD1 = 0;
    5210:	8623      	strh	r3, [r4, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5212:	f8a4 c02c 	strh.w	ip, [r4, #44]	; 0x2c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    5216:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    521a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    521e:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5222:	f8a4 e054 	strh.w	lr, [r4, #84]	; 0x54
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5226:	f8a8 7026 	strh.w	r7, [r8, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    522a:	f8a8 3020 	strh.w	r3, [r8, #32]
		p->CH[i].CMPLD1 = 0;
    522e:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5232:	f8a4 c04c 	strh.w	ip, [r4, #76]	; 0x4c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    5236:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    523a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    523e:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5242:	f8a4 e074 	strh.w	lr, [r4, #116]	; 0x74
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5246:	f8a8 7046 	strh.w	r7, [r8, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    524a:	f8a8 3040 	strh.w	r3, [r8, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    524e:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5252:	f8a4 c06c 	strh.w	ip, [r4, #108]	; 0x6c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    5256:	8183      	strh	r3, [r0, #12]
		p->CH[i].CNTR = 0;
    5258:	8143      	strh	r3, [r0, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    525a:	81c5      	strh	r5, [r0, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    525c:	f8a0 e014 	strh.w	lr, [r0, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5260:	80c7      	strh	r7, [r0, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    5262:	8003      	strh	r3, [r0, #0]
		p->CH[i].CMPLD1 = 0;
    5264:	8203      	strh	r3, [r0, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5266:	f8a0 c00c 	strh.w	ip, [r0, #12]
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    526a:	8583      	strh	r3, [r0, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    526c:	8543      	strh	r3, [r0, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    526e:	85c5      	strh	r5, [r0, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5270:	f8a0 e034 	strh.w	lr, [r0, #52]	; 0x34
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5274:	80f7      	strh	r7, [r6, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    5276:	8033      	strh	r3, [r6, #0]
		p->CH[i].CMPLD1 = 0;
    5278:	8603      	strh	r3, [r0, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    527a:	f8a0 c02c 	strh.w	ip, [r0, #44]	; 0x2c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    527e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    5282:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5286:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    528a:	f8a0 e054 	strh.w	lr, [r0, #84]	; 0x54
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    528e:	84f7      	strh	r7, [r6, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    5290:	8433      	strh	r3, [r6, #32]
		p->CH[i].CMPLD1 = 0;
    5292:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5296:	f8a0 c04c 	strh.w	ip, [r0, #76]	; 0x4c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    529a:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    529e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    52a2:	f8a0 506e 	strh.w	r5, [r0, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    52a6:	f8a0 e074 	strh.w	lr, [r0, #116]	; 0x74
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    52aa:	f8a6 7046 	strh.w	r7, [r6, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    52ae:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    52b2:	f8a0 3070 	strh.w	r3, [r0, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    52b6:	f8a0 c06c 	strh.w	ip, [r0, #108]	; 0x6c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    52ba:	818b      	strh	r3, [r1, #12]
		p->CH[i].CNTR = 0;
    52bc:	814b      	strh	r3, [r1, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    52be:	81cd      	strh	r5, [r1, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    52c0:	f8a1 e014 	strh.w	lr, [r1, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    52c4:	80cf      	strh	r7, [r1, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    52c6:	800b      	strh	r3, [r1, #0]
		p->CH[i].CMPLD1 = 0;
    52c8:	820b      	strh	r3, [r1, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    52ca:	f8a1 c00c 	strh.w	ip, [r1, #12]
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    52ce:	858b      	strh	r3, [r1, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    52d0:	854b      	strh	r3, [r1, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    52d2:	85cd      	strh	r5, [r1, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    52d4:	f8a1 e034 	strh.w	lr, [r1, #52]	; 0x34
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    52d8:	80d7      	strh	r7, [r2, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    52da:	8013      	strh	r3, [r2, #0]
		p->CH[i].CMPLD1 = 0;
    52dc:	860b      	strh	r3, [r1, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    52de:	f8a1 c02c 	strh.w	ip, [r1, #44]	; 0x2c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    52e2:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    52e6:	f8a1 304a 	strh.w	r3, [r1, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    52ea:	f8a1 504e 	strh.w	r5, [r1, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    52ee:	f8a1 e054 	strh.w	lr, [r1, #84]	; 0x54
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    52f2:	84d7      	strh	r7, [r2, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    52f4:	8413      	strh	r3, [r2, #32]
		p->CH[i].CMPLD1 = 0;
    52f6:	f8a1 3050 	strh.w	r3, [r1, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    52fa:	f8a1 c04c 	strh.w	ip, [r1, #76]	; 0x4c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    52fe:	f8a1 306c 	strh.w	r3, [r1, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    5302:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5306:	f8a1 506e 	strh.w	r5, [r1, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    530a:	f8a1 e074 	strh.w	lr, [r1, #116]	; 0x74
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    530e:	f8a2 7046 	strh.w	r7, [r2, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    5312:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    5316:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    531a:	f8a1 c06c 	strh.w	ip, [r1, #108]	; 0x6c
    531e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5322:	bf00      	nop
    5324:	401dc000 	.word	0x401dc000
    5328:	401e0000 	.word	0x401e0000
    532c:	401e0020 	.word	0x401e0020
    5330:	401e4000 	.word	0x401e4000
    5334:	401e4020 	.word	0x401e4020
    5338:	401dc020 	.word	0x401dc020

0000533c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    533c:	4770      	bx	lr
    533e:	bf00      	nop

00005340 <__aeabi_atexit>:
    5340:	460b      	mov	r3, r1
    5342:	4601      	mov	r1, r0
    5344:	4618      	mov	r0, r3
    5346:	f000 b801 	b.w	534c <__cxa_atexit>
    534a:	bf00      	nop

0000534c <__cxa_atexit>:
    534c:	4613      	mov	r3, r2
    534e:	460a      	mov	r2, r1
    5350:	4601      	mov	r1, r0
    5352:	2002      	movs	r0, #2
    5354:	f000 bbe2 	b.w	5b1c <__register_exitproc>

00005358 <__errno>:
    5358:	4b01      	ldr	r3, [pc, #4]	; (5360 <__errno+0x8>)
    535a:	6818      	ldr	r0, [r3, #0]
    535c:	4770      	bx	lr
    535e:	bf00      	nop
    5360:	20000b38 	.word	0x20000b38

00005364 <__libc_init_array>:
    5364:	b570      	push	{r4, r5, r6, lr}
    5366:	4e0f      	ldr	r6, [pc, #60]	; (53a4 <__libc_init_array+0x40>)
    5368:	4d0f      	ldr	r5, [pc, #60]	; (53a8 <__libc_init_array+0x44>)
    536a:	1b76      	subs	r6, r6, r5
    536c:	10b6      	asrs	r6, r6, #2
    536e:	bf18      	it	ne
    5370:	2400      	movne	r4, #0
    5372:	d005      	beq.n	5380 <__libc_init_array+0x1c>
    5374:	3401      	adds	r4, #1
    5376:	f855 3b04 	ldr.w	r3, [r5], #4
    537a:	4798      	blx	r3
    537c:	42a6      	cmp	r6, r4
    537e:	d1f9      	bne.n	5374 <__libc_init_array+0x10>
    5380:	4e0a      	ldr	r6, [pc, #40]	; (53ac <__libc_init_array+0x48>)
    5382:	4d0b      	ldr	r5, [pc, #44]	; (53b0 <__libc_init_array+0x4c>)
    5384:	1b76      	subs	r6, r6, r5
    5386:	f000 fd53 	bl	5e30 <___init_veneer>
    538a:	10b6      	asrs	r6, r6, #2
    538c:	bf18      	it	ne
    538e:	2400      	movne	r4, #0
    5390:	d006      	beq.n	53a0 <__libc_init_array+0x3c>
    5392:	3401      	adds	r4, #1
    5394:	f855 3b04 	ldr.w	r3, [r5], #4
    5398:	4798      	blx	r3
    539a:	42a6      	cmp	r6, r4
    539c:	d1f9      	bne.n	5392 <__libc_init_array+0x2e>
    539e:	bd70      	pop	{r4, r5, r6, pc}
    53a0:	bd70      	pop	{r4, r5, r6, pc}
    53a2:	bf00      	nop
    53a4:	60001b00 	.word	0x60001b00
    53a8:	60001b00 	.word	0x60001b00
    53ac:	60001b18 	.word	0x60001b18
    53b0:	60001b00 	.word	0x60001b00

000053b4 <malloc>:
    53b4:	4b02      	ldr	r3, [pc, #8]	; (53c0 <malloc+0xc>)
    53b6:	4601      	mov	r1, r0
    53b8:	6818      	ldr	r0, [r3, #0]
    53ba:	f000 b80b 	b.w	53d4 <_malloc_r>
    53be:	bf00      	nop
    53c0:	20000b38 	.word	0x20000b38

000053c4 <free>:
    53c4:	4b02      	ldr	r3, [pc, #8]	; (53d0 <free+0xc>)
    53c6:	4601      	mov	r1, r0
    53c8:	6818      	ldr	r0, [r3, #0]
    53ca:	f000 bc47 	b.w	5c5c <_free_r>
    53ce:	bf00      	nop
    53d0:	20000b38 	.word	0x20000b38

000053d4 <_malloc_r>:
    53d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53d8:	f101 050b 	add.w	r5, r1, #11
    53dc:	2d16      	cmp	r5, #22
    53de:	b083      	sub	sp, #12
    53e0:	4606      	mov	r6, r0
    53e2:	f240 809f 	bls.w	5524 <_malloc_r+0x150>
    53e6:	f035 0507 	bics.w	r5, r5, #7
    53ea:	f100 80bf 	bmi.w	556c <_malloc_r+0x198>
    53ee:	42a9      	cmp	r1, r5
    53f0:	f200 80bc 	bhi.w	556c <_malloc_r+0x198>
    53f4:	f000 faf4 	bl	59e0 <__malloc_lock>
    53f8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    53fc:	f0c0 829c 	bcc.w	5938 <_malloc_r+0x564>
    5400:	0a6b      	lsrs	r3, r5, #9
    5402:	f000 80ba 	beq.w	557a <_malloc_r+0x1a6>
    5406:	2b04      	cmp	r3, #4
    5408:	f200 8183 	bhi.w	5712 <_malloc_r+0x33e>
    540c:	09a8      	lsrs	r0, r5, #6
    540e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    5412:	ea4f 034e 	mov.w	r3, lr, lsl #1
    5416:	3038      	adds	r0, #56	; 0x38
    5418:	4fc4      	ldr	r7, [pc, #784]	; (572c <_malloc_r+0x358>)
    541a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    541e:	f1a3 0108 	sub.w	r1, r3, #8
    5422:	685c      	ldr	r4, [r3, #4]
    5424:	42a1      	cmp	r1, r4
    5426:	d107      	bne.n	5438 <_malloc_r+0x64>
    5428:	e0ac      	b.n	5584 <_malloc_r+0x1b0>
    542a:	2a00      	cmp	r2, #0
    542c:	f280 80ac 	bge.w	5588 <_malloc_r+0x1b4>
    5430:	68e4      	ldr	r4, [r4, #12]
    5432:	42a1      	cmp	r1, r4
    5434:	f000 80a6 	beq.w	5584 <_malloc_r+0x1b0>
    5438:	6863      	ldr	r3, [r4, #4]
    543a:	f023 0303 	bic.w	r3, r3, #3
    543e:	1b5a      	subs	r2, r3, r5
    5440:	2a0f      	cmp	r2, #15
    5442:	ddf2      	ble.n	542a <_malloc_r+0x56>
    5444:	49b9      	ldr	r1, [pc, #740]	; (572c <_malloc_r+0x358>)
    5446:	693c      	ldr	r4, [r7, #16]
    5448:	f101 0e08 	add.w	lr, r1, #8
    544c:	4574      	cmp	r4, lr
    544e:	f000 81b3 	beq.w	57b8 <_malloc_r+0x3e4>
    5452:	6863      	ldr	r3, [r4, #4]
    5454:	f023 0303 	bic.w	r3, r3, #3
    5458:	1b5a      	subs	r2, r3, r5
    545a:	2a0f      	cmp	r2, #15
    545c:	f300 8199 	bgt.w	5792 <_malloc_r+0x3be>
    5460:	2a00      	cmp	r2, #0
    5462:	f8c1 e014 	str.w	lr, [r1, #20]
    5466:	f8c1 e010 	str.w	lr, [r1, #16]
    546a:	f280 809e 	bge.w	55aa <_malloc_r+0x1d6>
    546e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5472:	f080 8167 	bcs.w	5744 <_malloc_r+0x370>
    5476:	08db      	lsrs	r3, r3, #3
    5478:	f103 0c01 	add.w	ip, r3, #1
    547c:	2201      	movs	r2, #1
    547e:	109b      	asrs	r3, r3, #2
    5480:	fa02 f303 	lsl.w	r3, r2, r3
    5484:	684a      	ldr	r2, [r1, #4]
    5486:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    548a:	f8c4 8008 	str.w	r8, [r4, #8]
    548e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    5492:	431a      	orrs	r2, r3
    5494:	f1a9 0308 	sub.w	r3, r9, #8
    5498:	60e3      	str	r3, [r4, #12]
    549a:	604a      	str	r2, [r1, #4]
    549c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    54a0:	f8c8 400c 	str.w	r4, [r8, #12]
    54a4:	1083      	asrs	r3, r0, #2
    54a6:	2401      	movs	r4, #1
    54a8:	409c      	lsls	r4, r3
    54aa:	4294      	cmp	r4, r2
    54ac:	f200 808a 	bhi.w	55c4 <_malloc_r+0x1f0>
    54b0:	4214      	tst	r4, r2
    54b2:	d106      	bne.n	54c2 <_malloc_r+0xee>
    54b4:	f020 0003 	bic.w	r0, r0, #3
    54b8:	0064      	lsls	r4, r4, #1
    54ba:	4214      	tst	r4, r2
    54bc:	f100 0004 	add.w	r0, r0, #4
    54c0:	d0fa      	beq.n	54b8 <_malloc_r+0xe4>
    54c2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    54c6:	46cc      	mov	ip, r9
    54c8:	4680      	mov	r8, r0
    54ca:	f8dc 100c 	ldr.w	r1, [ip, #12]
    54ce:	458c      	cmp	ip, r1
    54d0:	d107      	bne.n	54e2 <_malloc_r+0x10e>
    54d2:	e173      	b.n	57bc <_malloc_r+0x3e8>
    54d4:	2a00      	cmp	r2, #0
    54d6:	f280 8181 	bge.w	57dc <_malloc_r+0x408>
    54da:	68c9      	ldr	r1, [r1, #12]
    54dc:	458c      	cmp	ip, r1
    54de:	f000 816d 	beq.w	57bc <_malloc_r+0x3e8>
    54e2:	684b      	ldr	r3, [r1, #4]
    54e4:	f023 0303 	bic.w	r3, r3, #3
    54e8:	1b5a      	subs	r2, r3, r5
    54ea:	2a0f      	cmp	r2, #15
    54ec:	ddf2      	ble.n	54d4 <_malloc_r+0x100>
    54ee:	460c      	mov	r4, r1
    54f0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    54f4:	f854 8f08 	ldr.w	r8, [r4, #8]!
    54f8:	194b      	adds	r3, r1, r5
    54fa:	f045 0501 	orr.w	r5, r5, #1
    54fe:	604d      	str	r5, [r1, #4]
    5500:	f042 0101 	orr.w	r1, r2, #1
    5504:	f8c8 c00c 	str.w	ip, [r8, #12]
    5508:	4630      	mov	r0, r6
    550a:	f8cc 8008 	str.w	r8, [ip, #8]
    550e:	617b      	str	r3, [r7, #20]
    5510:	613b      	str	r3, [r7, #16]
    5512:	f8c3 e00c 	str.w	lr, [r3, #12]
    5516:	f8c3 e008 	str.w	lr, [r3, #8]
    551a:	6059      	str	r1, [r3, #4]
    551c:	509a      	str	r2, [r3, r2]
    551e:	f000 fa61 	bl	59e4 <__malloc_unlock>
    5522:	e01f      	b.n	5564 <_malloc_r+0x190>
    5524:	2910      	cmp	r1, #16
    5526:	d821      	bhi.n	556c <_malloc_r+0x198>
    5528:	f000 fa5a 	bl	59e0 <__malloc_lock>
    552c:	2510      	movs	r5, #16
    552e:	2306      	movs	r3, #6
    5530:	2002      	movs	r0, #2
    5532:	4f7e      	ldr	r7, [pc, #504]	; (572c <_malloc_r+0x358>)
    5534:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    5538:	f1a3 0208 	sub.w	r2, r3, #8
    553c:	685c      	ldr	r4, [r3, #4]
    553e:	4294      	cmp	r4, r2
    5540:	f000 8145 	beq.w	57ce <_malloc_r+0x3fa>
    5544:	6863      	ldr	r3, [r4, #4]
    5546:	68e1      	ldr	r1, [r4, #12]
    5548:	68a5      	ldr	r5, [r4, #8]
    554a:	f023 0303 	bic.w	r3, r3, #3
    554e:	4423      	add	r3, r4
    5550:	4630      	mov	r0, r6
    5552:	685a      	ldr	r2, [r3, #4]
    5554:	60e9      	str	r1, [r5, #12]
    5556:	f042 0201 	orr.w	r2, r2, #1
    555a:	608d      	str	r5, [r1, #8]
    555c:	605a      	str	r2, [r3, #4]
    555e:	f000 fa41 	bl	59e4 <__malloc_unlock>
    5562:	3408      	adds	r4, #8
    5564:	4620      	mov	r0, r4
    5566:	b003      	add	sp, #12
    5568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    556c:	2400      	movs	r4, #0
    556e:	230c      	movs	r3, #12
    5570:	4620      	mov	r0, r4
    5572:	6033      	str	r3, [r6, #0]
    5574:	b003      	add	sp, #12
    5576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    557a:	2380      	movs	r3, #128	; 0x80
    557c:	f04f 0e40 	mov.w	lr, #64	; 0x40
    5580:	203f      	movs	r0, #63	; 0x3f
    5582:	e749      	b.n	5418 <_malloc_r+0x44>
    5584:	4670      	mov	r0, lr
    5586:	e75d      	b.n	5444 <_malloc_r+0x70>
    5588:	4423      	add	r3, r4
    558a:	68e1      	ldr	r1, [r4, #12]
    558c:	685a      	ldr	r2, [r3, #4]
    558e:	68a5      	ldr	r5, [r4, #8]
    5590:	f042 0201 	orr.w	r2, r2, #1
    5594:	60e9      	str	r1, [r5, #12]
    5596:	4630      	mov	r0, r6
    5598:	608d      	str	r5, [r1, #8]
    559a:	605a      	str	r2, [r3, #4]
    559c:	f000 fa22 	bl	59e4 <__malloc_unlock>
    55a0:	3408      	adds	r4, #8
    55a2:	4620      	mov	r0, r4
    55a4:	b003      	add	sp, #12
    55a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55aa:	4423      	add	r3, r4
    55ac:	4630      	mov	r0, r6
    55ae:	685a      	ldr	r2, [r3, #4]
    55b0:	f042 0201 	orr.w	r2, r2, #1
    55b4:	605a      	str	r2, [r3, #4]
    55b6:	f000 fa15 	bl	59e4 <__malloc_unlock>
    55ba:	3408      	adds	r4, #8
    55bc:	4620      	mov	r0, r4
    55be:	b003      	add	sp, #12
    55c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55c4:	68bc      	ldr	r4, [r7, #8]
    55c6:	6863      	ldr	r3, [r4, #4]
    55c8:	f023 0803 	bic.w	r8, r3, #3
    55cc:	45a8      	cmp	r8, r5
    55ce:	d304      	bcc.n	55da <_malloc_r+0x206>
    55d0:	ebc5 0308 	rsb	r3, r5, r8
    55d4:	2b0f      	cmp	r3, #15
    55d6:	f300 808c 	bgt.w	56f2 <_malloc_r+0x31e>
    55da:	4b55      	ldr	r3, [pc, #340]	; (5730 <_malloc_r+0x35c>)
    55dc:	f8df 9160 	ldr.w	r9, [pc, #352]	; 5740 <_malloc_r+0x36c>
    55e0:	681a      	ldr	r2, [r3, #0]
    55e2:	f8d9 3000 	ldr.w	r3, [r9]
    55e6:	3301      	adds	r3, #1
    55e8:	442a      	add	r2, r5
    55ea:	eb04 0a08 	add.w	sl, r4, r8
    55ee:	f000 8160 	beq.w	58b2 <_malloc_r+0x4de>
    55f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    55f6:	320f      	adds	r2, #15
    55f8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    55fc:	f022 020f 	bic.w	r2, r2, #15
    5600:	4611      	mov	r1, r2
    5602:	4630      	mov	r0, r6
    5604:	9201      	str	r2, [sp, #4]
    5606:	f000 f9ef 	bl	59e8 <_sbrk_r>
    560a:	f1b0 3fff 	cmp.w	r0, #4294967295
    560e:	4683      	mov	fp, r0
    5610:	9a01      	ldr	r2, [sp, #4]
    5612:	f000 8158 	beq.w	58c6 <_malloc_r+0x4f2>
    5616:	4582      	cmp	sl, r0
    5618:	f200 80fc 	bhi.w	5814 <_malloc_r+0x440>
    561c:	4b45      	ldr	r3, [pc, #276]	; (5734 <_malloc_r+0x360>)
    561e:	6819      	ldr	r1, [r3, #0]
    5620:	45da      	cmp	sl, fp
    5622:	4411      	add	r1, r2
    5624:	6019      	str	r1, [r3, #0]
    5626:	f000 8153 	beq.w	58d0 <_malloc_r+0x4fc>
    562a:	f8d9 0000 	ldr.w	r0, [r9]
    562e:	f8df e110 	ldr.w	lr, [pc, #272]	; 5740 <_malloc_r+0x36c>
    5632:	3001      	adds	r0, #1
    5634:	bf1b      	ittet	ne
    5636:	ebca 0a0b 	rsbne	sl, sl, fp
    563a:	4451      	addne	r1, sl
    563c:	f8ce b000 	streq.w	fp, [lr]
    5640:	6019      	strne	r1, [r3, #0]
    5642:	f01b 0107 	ands.w	r1, fp, #7
    5646:	f000 8117 	beq.w	5878 <_malloc_r+0x4a4>
    564a:	f1c1 0008 	rsb	r0, r1, #8
    564e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    5652:	4483      	add	fp, r0
    5654:	3108      	adds	r1, #8
    5656:	445a      	add	r2, fp
    5658:	f3c2 020b 	ubfx	r2, r2, #0, #12
    565c:	ebc2 0901 	rsb	r9, r2, r1
    5660:	4649      	mov	r1, r9
    5662:	4630      	mov	r0, r6
    5664:	9301      	str	r3, [sp, #4]
    5666:	f000 f9bf 	bl	59e8 <_sbrk_r>
    566a:	1c43      	adds	r3, r0, #1
    566c:	9b01      	ldr	r3, [sp, #4]
    566e:	f000 813f 	beq.w	58f0 <_malloc_r+0x51c>
    5672:	ebcb 0200 	rsb	r2, fp, r0
    5676:	444a      	add	r2, r9
    5678:	f042 0201 	orr.w	r2, r2, #1
    567c:	6819      	ldr	r1, [r3, #0]
    567e:	f8c7 b008 	str.w	fp, [r7, #8]
    5682:	4449      	add	r1, r9
    5684:	42bc      	cmp	r4, r7
    5686:	f8cb 2004 	str.w	r2, [fp, #4]
    568a:	6019      	str	r1, [r3, #0]
    568c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 5734 <_malloc_r+0x360>
    5690:	d016      	beq.n	56c0 <_malloc_r+0x2ec>
    5692:	f1b8 0f0f 	cmp.w	r8, #15
    5696:	f240 80fd 	bls.w	5894 <_malloc_r+0x4c0>
    569a:	6862      	ldr	r2, [r4, #4]
    569c:	f1a8 030c 	sub.w	r3, r8, #12
    56a0:	f023 0307 	bic.w	r3, r3, #7
    56a4:	18e0      	adds	r0, r4, r3
    56a6:	f002 0201 	and.w	r2, r2, #1
    56aa:	f04f 0e05 	mov.w	lr, #5
    56ae:	431a      	orrs	r2, r3
    56b0:	2b0f      	cmp	r3, #15
    56b2:	6062      	str	r2, [r4, #4]
    56b4:	f8c0 e004 	str.w	lr, [r0, #4]
    56b8:	f8c0 e008 	str.w	lr, [r0, #8]
    56bc:	f200 811c 	bhi.w	58f8 <_malloc_r+0x524>
    56c0:	4b1d      	ldr	r3, [pc, #116]	; (5738 <_malloc_r+0x364>)
    56c2:	68bc      	ldr	r4, [r7, #8]
    56c4:	681a      	ldr	r2, [r3, #0]
    56c6:	4291      	cmp	r1, r2
    56c8:	bf88      	it	hi
    56ca:	6019      	strhi	r1, [r3, #0]
    56cc:	4b1b      	ldr	r3, [pc, #108]	; (573c <_malloc_r+0x368>)
    56ce:	681a      	ldr	r2, [r3, #0]
    56d0:	4291      	cmp	r1, r2
    56d2:	6862      	ldr	r2, [r4, #4]
    56d4:	bf88      	it	hi
    56d6:	6019      	strhi	r1, [r3, #0]
    56d8:	f022 0203 	bic.w	r2, r2, #3
    56dc:	4295      	cmp	r5, r2
    56de:	eba2 0305 	sub.w	r3, r2, r5
    56e2:	d801      	bhi.n	56e8 <_malloc_r+0x314>
    56e4:	2b0f      	cmp	r3, #15
    56e6:	dc04      	bgt.n	56f2 <_malloc_r+0x31e>
    56e8:	4630      	mov	r0, r6
    56ea:	f000 f97b 	bl	59e4 <__malloc_unlock>
    56ee:	2400      	movs	r4, #0
    56f0:	e738      	b.n	5564 <_malloc_r+0x190>
    56f2:	1962      	adds	r2, r4, r5
    56f4:	f043 0301 	orr.w	r3, r3, #1
    56f8:	f045 0501 	orr.w	r5, r5, #1
    56fc:	6065      	str	r5, [r4, #4]
    56fe:	4630      	mov	r0, r6
    5700:	60ba      	str	r2, [r7, #8]
    5702:	6053      	str	r3, [r2, #4]
    5704:	f000 f96e 	bl	59e4 <__malloc_unlock>
    5708:	3408      	adds	r4, #8
    570a:	4620      	mov	r0, r4
    570c:	b003      	add	sp, #12
    570e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5712:	2b14      	cmp	r3, #20
    5714:	d971      	bls.n	57fa <_malloc_r+0x426>
    5716:	2b54      	cmp	r3, #84	; 0x54
    5718:	f200 80a4 	bhi.w	5864 <_malloc_r+0x490>
    571c:	0b28      	lsrs	r0, r5, #12
    571e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    5722:	ea4f 034e 	mov.w	r3, lr, lsl #1
    5726:	306e      	adds	r0, #110	; 0x6e
    5728:	e676      	b.n	5418 <_malloc_r+0x44>
    572a:	bf00      	nop
    572c:	20000b3c 	.word	0x20000b3c
    5730:	20001d14 	.word	0x20001d14
    5734:	20001d18 	.word	0x20001d18
    5738:	20001d10 	.word	0x20001d10
    573c:	20001d0c 	.word	0x20001d0c
    5740:	20000f48 	.word	0x20000f48
    5744:	0a5a      	lsrs	r2, r3, #9
    5746:	2a04      	cmp	r2, #4
    5748:	d95e      	bls.n	5808 <_malloc_r+0x434>
    574a:	2a14      	cmp	r2, #20
    574c:	f200 80b3 	bhi.w	58b6 <_malloc_r+0x4e2>
    5750:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    5754:	0049      	lsls	r1, r1, #1
    5756:	325b      	adds	r2, #91	; 0x5b
    5758:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    575c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    5760:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 5940 <_malloc_r+0x56c>
    5764:	f1ac 0c08 	sub.w	ip, ip, #8
    5768:	458c      	cmp	ip, r1
    576a:	f000 8088 	beq.w	587e <_malloc_r+0x4aa>
    576e:	684a      	ldr	r2, [r1, #4]
    5770:	f022 0203 	bic.w	r2, r2, #3
    5774:	4293      	cmp	r3, r2
    5776:	d202      	bcs.n	577e <_malloc_r+0x3aa>
    5778:	6889      	ldr	r1, [r1, #8]
    577a:	458c      	cmp	ip, r1
    577c:	d1f7      	bne.n	576e <_malloc_r+0x39a>
    577e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    5782:	687a      	ldr	r2, [r7, #4]
    5784:	f8c4 c00c 	str.w	ip, [r4, #12]
    5788:	60a1      	str	r1, [r4, #8]
    578a:	f8cc 4008 	str.w	r4, [ip, #8]
    578e:	60cc      	str	r4, [r1, #12]
    5790:	e688      	b.n	54a4 <_malloc_r+0xd0>
    5792:	1963      	adds	r3, r4, r5
    5794:	f042 0701 	orr.w	r7, r2, #1
    5798:	f045 0501 	orr.w	r5, r5, #1
    579c:	6065      	str	r5, [r4, #4]
    579e:	4630      	mov	r0, r6
    57a0:	614b      	str	r3, [r1, #20]
    57a2:	610b      	str	r3, [r1, #16]
    57a4:	f8c3 e00c 	str.w	lr, [r3, #12]
    57a8:	f8c3 e008 	str.w	lr, [r3, #8]
    57ac:	605f      	str	r7, [r3, #4]
    57ae:	509a      	str	r2, [r3, r2]
    57b0:	3408      	adds	r4, #8
    57b2:	f000 f917 	bl	59e4 <__malloc_unlock>
    57b6:	e6d5      	b.n	5564 <_malloc_r+0x190>
    57b8:	684a      	ldr	r2, [r1, #4]
    57ba:	e673      	b.n	54a4 <_malloc_r+0xd0>
    57bc:	f108 0801 	add.w	r8, r8, #1
    57c0:	f018 0f03 	tst.w	r8, #3
    57c4:	f10c 0c08 	add.w	ip, ip, #8
    57c8:	f47f ae7f 	bne.w	54ca <_malloc_r+0xf6>
    57cc:	e030      	b.n	5830 <_malloc_r+0x45c>
    57ce:	68dc      	ldr	r4, [r3, #12]
    57d0:	42a3      	cmp	r3, r4
    57d2:	bf08      	it	eq
    57d4:	3002      	addeq	r0, #2
    57d6:	f43f ae35 	beq.w	5444 <_malloc_r+0x70>
    57da:	e6b3      	b.n	5544 <_malloc_r+0x170>
    57dc:	440b      	add	r3, r1
    57de:	460c      	mov	r4, r1
    57e0:	685a      	ldr	r2, [r3, #4]
    57e2:	68c9      	ldr	r1, [r1, #12]
    57e4:	f854 5f08 	ldr.w	r5, [r4, #8]!
    57e8:	f042 0201 	orr.w	r2, r2, #1
    57ec:	605a      	str	r2, [r3, #4]
    57ee:	4630      	mov	r0, r6
    57f0:	60e9      	str	r1, [r5, #12]
    57f2:	608d      	str	r5, [r1, #8]
    57f4:	f000 f8f6 	bl	59e4 <__malloc_unlock>
    57f8:	e6b4      	b.n	5564 <_malloc_r+0x190>
    57fa:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    57fe:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    5802:	ea4f 034e 	mov.w	r3, lr, lsl #1
    5806:	e607      	b.n	5418 <_malloc_r+0x44>
    5808:	099a      	lsrs	r2, r3, #6
    580a:	f102 0139 	add.w	r1, r2, #57	; 0x39
    580e:	0049      	lsls	r1, r1, #1
    5810:	3238      	adds	r2, #56	; 0x38
    5812:	e7a1      	b.n	5758 <_malloc_r+0x384>
    5814:	42bc      	cmp	r4, r7
    5816:	4b4a      	ldr	r3, [pc, #296]	; (5940 <_malloc_r+0x56c>)
    5818:	f43f af00 	beq.w	561c <_malloc_r+0x248>
    581c:	689c      	ldr	r4, [r3, #8]
    581e:	6862      	ldr	r2, [r4, #4]
    5820:	f022 0203 	bic.w	r2, r2, #3
    5824:	e75a      	b.n	56dc <_malloc_r+0x308>
    5826:	f859 3908 	ldr.w	r3, [r9], #-8
    582a:	4599      	cmp	r9, r3
    582c:	f040 8082 	bne.w	5934 <_malloc_r+0x560>
    5830:	f010 0f03 	tst.w	r0, #3
    5834:	f100 30ff 	add.w	r0, r0, #4294967295
    5838:	d1f5      	bne.n	5826 <_malloc_r+0x452>
    583a:	687b      	ldr	r3, [r7, #4]
    583c:	ea23 0304 	bic.w	r3, r3, r4
    5840:	607b      	str	r3, [r7, #4]
    5842:	0064      	lsls	r4, r4, #1
    5844:	429c      	cmp	r4, r3
    5846:	f63f aebd 	bhi.w	55c4 <_malloc_r+0x1f0>
    584a:	2c00      	cmp	r4, #0
    584c:	f43f aeba 	beq.w	55c4 <_malloc_r+0x1f0>
    5850:	421c      	tst	r4, r3
    5852:	4640      	mov	r0, r8
    5854:	f47f ae35 	bne.w	54c2 <_malloc_r+0xee>
    5858:	0064      	lsls	r4, r4, #1
    585a:	421c      	tst	r4, r3
    585c:	f100 0004 	add.w	r0, r0, #4
    5860:	d0fa      	beq.n	5858 <_malloc_r+0x484>
    5862:	e62e      	b.n	54c2 <_malloc_r+0xee>
    5864:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    5868:	d818      	bhi.n	589c <_malloc_r+0x4c8>
    586a:	0be8      	lsrs	r0, r5, #15
    586c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    5870:	ea4f 034e 	mov.w	r3, lr, lsl #1
    5874:	3077      	adds	r0, #119	; 0x77
    5876:	e5cf      	b.n	5418 <_malloc_r+0x44>
    5878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    587c:	e6eb      	b.n	5656 <_malloc_r+0x282>
    587e:	2101      	movs	r1, #1
    5880:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5884:	1092      	asrs	r2, r2, #2
    5886:	fa01 f202 	lsl.w	r2, r1, r2
    588a:	431a      	orrs	r2, r3
    588c:	f8c8 2004 	str.w	r2, [r8, #4]
    5890:	4661      	mov	r1, ip
    5892:	e777      	b.n	5784 <_malloc_r+0x3b0>
    5894:	2301      	movs	r3, #1
    5896:	f8cb 3004 	str.w	r3, [fp, #4]
    589a:	e725      	b.n	56e8 <_malloc_r+0x314>
    589c:	f240 5254 	movw	r2, #1364	; 0x554
    58a0:	4293      	cmp	r3, r2
    58a2:	d820      	bhi.n	58e6 <_malloc_r+0x512>
    58a4:	0ca8      	lsrs	r0, r5, #18
    58a6:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    58aa:	ea4f 034e 	mov.w	r3, lr, lsl #1
    58ae:	307c      	adds	r0, #124	; 0x7c
    58b0:	e5b2      	b.n	5418 <_malloc_r+0x44>
    58b2:	3210      	adds	r2, #16
    58b4:	e6a4      	b.n	5600 <_malloc_r+0x22c>
    58b6:	2a54      	cmp	r2, #84	; 0x54
    58b8:	d826      	bhi.n	5908 <_malloc_r+0x534>
    58ba:	0b1a      	lsrs	r2, r3, #12
    58bc:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    58c0:	0049      	lsls	r1, r1, #1
    58c2:	326e      	adds	r2, #110	; 0x6e
    58c4:	e748      	b.n	5758 <_malloc_r+0x384>
    58c6:	68bc      	ldr	r4, [r7, #8]
    58c8:	6862      	ldr	r2, [r4, #4]
    58ca:	f022 0203 	bic.w	r2, r2, #3
    58ce:	e705      	b.n	56dc <_malloc_r+0x308>
    58d0:	f3ca 000b 	ubfx	r0, sl, #0, #12
    58d4:	2800      	cmp	r0, #0
    58d6:	f47f aea8 	bne.w	562a <_malloc_r+0x256>
    58da:	4442      	add	r2, r8
    58dc:	68bb      	ldr	r3, [r7, #8]
    58de:	f042 0201 	orr.w	r2, r2, #1
    58e2:	605a      	str	r2, [r3, #4]
    58e4:	e6ec      	b.n	56c0 <_malloc_r+0x2ec>
    58e6:	23fe      	movs	r3, #254	; 0xfe
    58e8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    58ec:	207e      	movs	r0, #126	; 0x7e
    58ee:	e593      	b.n	5418 <_malloc_r+0x44>
    58f0:	2201      	movs	r2, #1
    58f2:	f04f 0900 	mov.w	r9, #0
    58f6:	e6c1      	b.n	567c <_malloc_r+0x2a8>
    58f8:	f104 0108 	add.w	r1, r4, #8
    58fc:	4630      	mov	r0, r6
    58fe:	f000 f9ad 	bl	5c5c <_free_r>
    5902:	f8d9 1000 	ldr.w	r1, [r9]
    5906:	e6db      	b.n	56c0 <_malloc_r+0x2ec>
    5908:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    590c:	d805      	bhi.n	591a <_malloc_r+0x546>
    590e:	0bda      	lsrs	r2, r3, #15
    5910:	f102 0178 	add.w	r1, r2, #120	; 0x78
    5914:	0049      	lsls	r1, r1, #1
    5916:	3277      	adds	r2, #119	; 0x77
    5918:	e71e      	b.n	5758 <_malloc_r+0x384>
    591a:	f240 5154 	movw	r1, #1364	; 0x554
    591e:	428a      	cmp	r2, r1
    5920:	d805      	bhi.n	592e <_malloc_r+0x55a>
    5922:	0c9a      	lsrs	r2, r3, #18
    5924:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    5928:	0049      	lsls	r1, r1, #1
    592a:	327c      	adds	r2, #124	; 0x7c
    592c:	e714      	b.n	5758 <_malloc_r+0x384>
    592e:	21fe      	movs	r1, #254	; 0xfe
    5930:	227e      	movs	r2, #126	; 0x7e
    5932:	e711      	b.n	5758 <_malloc_r+0x384>
    5934:	687b      	ldr	r3, [r7, #4]
    5936:	e784      	b.n	5842 <_malloc_r+0x46e>
    5938:	08e8      	lsrs	r0, r5, #3
    593a:	1c43      	adds	r3, r0, #1
    593c:	005b      	lsls	r3, r3, #1
    593e:	e5f8      	b.n	5532 <_malloc_r+0x15e>
    5940:	20000b3c 	.word	0x20000b3c

00005944 <memset>:
    5944:	b470      	push	{r4, r5, r6}
    5946:	0784      	lsls	r4, r0, #30
    5948:	d046      	beq.n	59d8 <memset+0x94>
    594a:	1e54      	subs	r4, r2, #1
    594c:	2a00      	cmp	r2, #0
    594e:	d041      	beq.n	59d4 <memset+0x90>
    5950:	b2cd      	uxtb	r5, r1
    5952:	4603      	mov	r3, r0
    5954:	e002      	b.n	595c <memset+0x18>
    5956:	1e62      	subs	r2, r4, #1
    5958:	b3e4      	cbz	r4, 59d4 <memset+0x90>
    595a:	4614      	mov	r4, r2
    595c:	f803 5b01 	strb.w	r5, [r3], #1
    5960:	079a      	lsls	r2, r3, #30
    5962:	d1f8      	bne.n	5956 <memset+0x12>
    5964:	2c03      	cmp	r4, #3
    5966:	d92e      	bls.n	59c6 <memset+0x82>
    5968:	b2cd      	uxtb	r5, r1
    596a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    596e:	2c0f      	cmp	r4, #15
    5970:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    5974:	d919      	bls.n	59aa <memset+0x66>
    5976:	f103 0210 	add.w	r2, r3, #16
    597a:	4626      	mov	r6, r4
    597c:	3e10      	subs	r6, #16
    597e:	2e0f      	cmp	r6, #15
    5980:	f842 5c10 	str.w	r5, [r2, #-16]
    5984:	f842 5c0c 	str.w	r5, [r2, #-12]
    5988:	f842 5c08 	str.w	r5, [r2, #-8]
    598c:	f842 5c04 	str.w	r5, [r2, #-4]
    5990:	f102 0210 	add.w	r2, r2, #16
    5994:	d8f2      	bhi.n	597c <memset+0x38>
    5996:	f1a4 0210 	sub.w	r2, r4, #16
    599a:	f022 020f 	bic.w	r2, r2, #15
    599e:	f004 040f 	and.w	r4, r4, #15
    59a2:	3210      	adds	r2, #16
    59a4:	2c03      	cmp	r4, #3
    59a6:	4413      	add	r3, r2
    59a8:	d90d      	bls.n	59c6 <memset+0x82>
    59aa:	461e      	mov	r6, r3
    59ac:	4622      	mov	r2, r4
    59ae:	3a04      	subs	r2, #4
    59b0:	2a03      	cmp	r2, #3
    59b2:	f846 5b04 	str.w	r5, [r6], #4
    59b6:	d8fa      	bhi.n	59ae <memset+0x6a>
    59b8:	1f22      	subs	r2, r4, #4
    59ba:	f022 0203 	bic.w	r2, r2, #3
    59be:	3204      	adds	r2, #4
    59c0:	4413      	add	r3, r2
    59c2:	f004 0403 	and.w	r4, r4, #3
    59c6:	b12c      	cbz	r4, 59d4 <memset+0x90>
    59c8:	b2c9      	uxtb	r1, r1
    59ca:	441c      	add	r4, r3
    59cc:	f803 1b01 	strb.w	r1, [r3], #1
    59d0:	42a3      	cmp	r3, r4
    59d2:	d1fb      	bne.n	59cc <memset+0x88>
    59d4:	bc70      	pop	{r4, r5, r6}
    59d6:	4770      	bx	lr
    59d8:	4614      	mov	r4, r2
    59da:	4603      	mov	r3, r0
    59dc:	e7c2      	b.n	5964 <memset+0x20>
    59de:	bf00      	nop

000059e0 <__malloc_lock>:
    59e0:	4770      	bx	lr
    59e2:	bf00      	nop

000059e4 <__malloc_unlock>:
    59e4:	4770      	bx	lr
    59e6:	bf00      	nop

000059e8 <_sbrk_r>:
    59e8:	b538      	push	{r3, r4, r5, lr}
    59ea:	4c07      	ldr	r4, [pc, #28]	; (5a08 <_sbrk_r+0x20>)
    59ec:	2300      	movs	r3, #0
    59ee:	4605      	mov	r5, r0
    59f0:	4608      	mov	r0, r1
    59f2:	6023      	str	r3, [r4, #0]
    59f4:	f7fe f8b0 	bl	3b58 <_sbrk>
    59f8:	1c43      	adds	r3, r0, #1
    59fa:	d000      	beq.n	59fe <_sbrk_r+0x16>
    59fc:	bd38      	pop	{r3, r4, r5, pc}
    59fe:	6823      	ldr	r3, [r4, #0]
    5a00:	2b00      	cmp	r3, #0
    5a02:	d0fb      	beq.n	59fc <_sbrk_r+0x14>
    5a04:	602b      	str	r3, [r5, #0]
    5a06:	bd38      	pop	{r3, r4, r5, pc}
    5a08:	2000428c 	.word	0x2000428c
	...

00005a40 <strlen>:
    5a40:	f890 f000 	pld	[r0]
    5a44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    5a48:	f020 0107 	bic.w	r1, r0, #7
    5a4c:	f06f 0c00 	mvn.w	ip, #0
    5a50:	f010 0407 	ands.w	r4, r0, #7
    5a54:	f891 f020 	pld	[r1, #32]
    5a58:	f040 8049 	bne.w	5aee <strlen+0xae>
    5a5c:	f04f 0400 	mov.w	r4, #0
    5a60:	f06f 0007 	mvn.w	r0, #7
    5a64:	e9d1 2300 	ldrd	r2, r3, [r1]
    5a68:	f891 f040 	pld	[r1, #64]	; 0x40
    5a6c:	f100 0008 	add.w	r0, r0, #8
    5a70:	fa82 f24c 	uadd8	r2, r2, ip
    5a74:	faa4 f28c 	sel	r2, r4, ip
    5a78:	fa83 f34c 	uadd8	r3, r3, ip
    5a7c:	faa2 f38c 	sel	r3, r2, ip
    5a80:	bb4b      	cbnz	r3, 5ad6 <strlen+0x96>
    5a82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    5a86:	fa82 f24c 	uadd8	r2, r2, ip
    5a8a:	f100 0008 	add.w	r0, r0, #8
    5a8e:	faa4 f28c 	sel	r2, r4, ip
    5a92:	fa83 f34c 	uadd8	r3, r3, ip
    5a96:	faa2 f38c 	sel	r3, r2, ip
    5a9a:	b9e3      	cbnz	r3, 5ad6 <strlen+0x96>
    5a9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    5aa0:	fa82 f24c 	uadd8	r2, r2, ip
    5aa4:	f100 0008 	add.w	r0, r0, #8
    5aa8:	faa4 f28c 	sel	r2, r4, ip
    5aac:	fa83 f34c 	uadd8	r3, r3, ip
    5ab0:	faa2 f38c 	sel	r3, r2, ip
    5ab4:	b97b      	cbnz	r3, 5ad6 <strlen+0x96>
    5ab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    5aba:	f101 0120 	add.w	r1, r1, #32
    5abe:	fa82 f24c 	uadd8	r2, r2, ip
    5ac2:	f100 0008 	add.w	r0, r0, #8
    5ac6:	faa4 f28c 	sel	r2, r4, ip
    5aca:	fa83 f34c 	uadd8	r3, r3, ip
    5ace:	faa2 f38c 	sel	r3, r2, ip
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	d0c6      	beq.n	5a64 <strlen+0x24>
    5ad6:	2a00      	cmp	r2, #0
    5ad8:	bf04      	itt	eq
    5ada:	3004      	addeq	r0, #4
    5adc:	461a      	moveq	r2, r3
    5ade:	ba12      	rev	r2, r2
    5ae0:	fab2 f282 	clz	r2, r2
    5ae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    5ae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    5aec:	4770      	bx	lr
    5aee:	e9d1 2300 	ldrd	r2, r3, [r1]
    5af2:	f004 0503 	and.w	r5, r4, #3
    5af6:	f1c4 0000 	rsb	r0, r4, #0
    5afa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    5afe:	f014 0f04 	tst.w	r4, #4
    5b02:	f891 f040 	pld	[r1, #64]	; 0x40
    5b06:	fa0c f505 	lsl.w	r5, ip, r5
    5b0a:	ea62 0205 	orn	r2, r2, r5
    5b0e:	bf1c      	itt	ne
    5b10:	ea63 0305 	ornne	r3, r3, r5
    5b14:	4662      	movne	r2, ip
    5b16:	f04f 0400 	mov.w	r4, #0
    5b1a:	e7a9      	b.n	5a70 <strlen+0x30>

00005b1c <__register_exitproc>:
    5b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b20:	4c25      	ldr	r4, [pc, #148]	; (5bb8 <__register_exitproc+0x9c>)
    5b22:	6825      	ldr	r5, [r4, #0]
    5b24:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    5b28:	4606      	mov	r6, r0
    5b2a:	4688      	mov	r8, r1
    5b2c:	4692      	mov	sl, r2
    5b2e:	4699      	mov	r9, r3
    5b30:	b3c4      	cbz	r4, 5ba4 <__register_exitproc+0x88>
    5b32:	6860      	ldr	r0, [r4, #4]
    5b34:	281f      	cmp	r0, #31
    5b36:	dc17      	bgt.n	5b68 <__register_exitproc+0x4c>
    5b38:	1c43      	adds	r3, r0, #1
    5b3a:	b176      	cbz	r6, 5b5a <__register_exitproc+0x3e>
    5b3c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    5b40:	2201      	movs	r2, #1
    5b42:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    5b46:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    5b4a:	4082      	lsls	r2, r0
    5b4c:	4311      	orrs	r1, r2
    5b4e:	2e02      	cmp	r6, #2
    5b50:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    5b54:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    5b58:	d01e      	beq.n	5b98 <__register_exitproc+0x7c>
    5b5a:	3002      	adds	r0, #2
    5b5c:	6063      	str	r3, [r4, #4]
    5b5e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    5b62:	2000      	movs	r0, #0
    5b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b68:	4b14      	ldr	r3, [pc, #80]	; (5bbc <__register_exitproc+0xa0>)
    5b6a:	b303      	cbz	r3, 5bae <__register_exitproc+0x92>
    5b6c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5b70:	f7ff fc20 	bl	53b4 <malloc>
    5b74:	4604      	mov	r4, r0
    5b76:	b1d0      	cbz	r0, 5bae <__register_exitproc+0x92>
    5b78:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    5b7c:	2700      	movs	r7, #0
    5b7e:	e880 0088 	stmia.w	r0, {r3, r7}
    5b82:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    5b86:	4638      	mov	r0, r7
    5b88:	2301      	movs	r3, #1
    5b8a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    5b8e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    5b92:	2e00      	cmp	r6, #0
    5b94:	d0e1      	beq.n	5b5a <__register_exitproc+0x3e>
    5b96:	e7d1      	b.n	5b3c <__register_exitproc+0x20>
    5b98:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    5b9c:	430a      	orrs	r2, r1
    5b9e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    5ba2:	e7da      	b.n	5b5a <__register_exitproc+0x3e>
    5ba4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    5ba8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    5bac:	e7c1      	b.n	5b32 <__register_exitproc+0x16>
    5bae:	f04f 30ff 	mov.w	r0, #4294967295
    5bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5bb6:	bf00      	nop
    5bb8:	20000698 	.word	0x20000698
    5bbc:	000053b5 	.word	0x000053b5

00005bc0 <_malloc_trim_r>:
    5bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bc2:	4f23      	ldr	r7, [pc, #140]	; (5c50 <_malloc_trim_r+0x90>)
    5bc4:	460c      	mov	r4, r1
    5bc6:	4606      	mov	r6, r0
    5bc8:	f7ff ff0a 	bl	59e0 <__malloc_lock>
    5bcc:	68bb      	ldr	r3, [r7, #8]
    5bce:	685d      	ldr	r5, [r3, #4]
    5bd0:	f025 0503 	bic.w	r5, r5, #3
    5bd4:	1b29      	subs	r1, r5, r4
    5bd6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    5bda:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    5bde:	f021 010f 	bic.w	r1, r1, #15
    5be2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    5be6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    5bea:	db07      	blt.n	5bfc <_malloc_trim_r+0x3c>
    5bec:	2100      	movs	r1, #0
    5bee:	4630      	mov	r0, r6
    5bf0:	f7ff fefa 	bl	59e8 <_sbrk_r>
    5bf4:	68bb      	ldr	r3, [r7, #8]
    5bf6:	442b      	add	r3, r5
    5bf8:	4298      	cmp	r0, r3
    5bfa:	d004      	beq.n	5c06 <_malloc_trim_r+0x46>
    5bfc:	4630      	mov	r0, r6
    5bfe:	f7ff fef1 	bl	59e4 <__malloc_unlock>
    5c02:	2000      	movs	r0, #0
    5c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c06:	4261      	negs	r1, r4
    5c08:	4630      	mov	r0, r6
    5c0a:	f7ff feed 	bl	59e8 <_sbrk_r>
    5c0e:	3001      	adds	r0, #1
    5c10:	d00d      	beq.n	5c2e <_malloc_trim_r+0x6e>
    5c12:	4b10      	ldr	r3, [pc, #64]	; (5c54 <_malloc_trim_r+0x94>)
    5c14:	68ba      	ldr	r2, [r7, #8]
    5c16:	6819      	ldr	r1, [r3, #0]
    5c18:	1b2d      	subs	r5, r5, r4
    5c1a:	f045 0501 	orr.w	r5, r5, #1
    5c1e:	4630      	mov	r0, r6
    5c20:	1b09      	subs	r1, r1, r4
    5c22:	6055      	str	r5, [r2, #4]
    5c24:	6019      	str	r1, [r3, #0]
    5c26:	f7ff fedd 	bl	59e4 <__malloc_unlock>
    5c2a:	2001      	movs	r0, #1
    5c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c2e:	2100      	movs	r1, #0
    5c30:	4630      	mov	r0, r6
    5c32:	f7ff fed9 	bl	59e8 <_sbrk_r>
    5c36:	68ba      	ldr	r2, [r7, #8]
    5c38:	1a83      	subs	r3, r0, r2
    5c3a:	2b0f      	cmp	r3, #15
    5c3c:	ddde      	ble.n	5bfc <_malloc_trim_r+0x3c>
    5c3e:	4c06      	ldr	r4, [pc, #24]	; (5c58 <_malloc_trim_r+0x98>)
    5c40:	4904      	ldr	r1, [pc, #16]	; (5c54 <_malloc_trim_r+0x94>)
    5c42:	6824      	ldr	r4, [r4, #0]
    5c44:	f043 0301 	orr.w	r3, r3, #1
    5c48:	1b00      	subs	r0, r0, r4
    5c4a:	6053      	str	r3, [r2, #4]
    5c4c:	6008      	str	r0, [r1, #0]
    5c4e:	e7d5      	b.n	5bfc <_malloc_trim_r+0x3c>
    5c50:	20000b3c 	.word	0x20000b3c
    5c54:	20001d18 	.word	0x20001d18
    5c58:	20000f48 	.word	0x20000f48

00005c5c <_free_r>:
    5c5c:	2900      	cmp	r1, #0
    5c5e:	d045      	beq.n	5cec <_free_r+0x90>
    5c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c64:	460d      	mov	r5, r1
    5c66:	4680      	mov	r8, r0
    5c68:	f7ff feba 	bl	59e0 <__malloc_lock>
    5c6c:	f855 7c04 	ldr.w	r7, [r5, #-4]
    5c70:	496a      	ldr	r1, [pc, #424]	; (5e1c <_free_r+0x1c0>)
    5c72:	f027 0301 	bic.w	r3, r7, #1
    5c76:	f1a5 0408 	sub.w	r4, r5, #8
    5c7a:	18e2      	adds	r2, r4, r3
    5c7c:	688e      	ldr	r6, [r1, #8]
    5c7e:	6850      	ldr	r0, [r2, #4]
    5c80:	42b2      	cmp	r2, r6
    5c82:	f020 0003 	bic.w	r0, r0, #3
    5c86:	d062      	beq.n	5d4e <_free_r+0xf2>
    5c88:	07fe      	lsls	r6, r7, #31
    5c8a:	6050      	str	r0, [r2, #4]
    5c8c:	d40b      	bmi.n	5ca6 <_free_r+0x4a>
    5c8e:	f855 7c08 	ldr.w	r7, [r5, #-8]
    5c92:	1be4      	subs	r4, r4, r7
    5c94:	f101 0e08 	add.w	lr, r1, #8
    5c98:	68a5      	ldr	r5, [r4, #8]
    5c9a:	4575      	cmp	r5, lr
    5c9c:	443b      	add	r3, r7
    5c9e:	d06f      	beq.n	5d80 <_free_r+0x124>
    5ca0:	68e7      	ldr	r7, [r4, #12]
    5ca2:	60ef      	str	r7, [r5, #12]
    5ca4:	60bd      	str	r5, [r7, #8]
    5ca6:	1815      	adds	r5, r2, r0
    5ca8:	686d      	ldr	r5, [r5, #4]
    5caa:	07ed      	lsls	r5, r5, #31
    5cac:	d542      	bpl.n	5d34 <_free_r+0xd8>
    5cae:	f043 0201 	orr.w	r2, r3, #1
    5cb2:	6062      	str	r2, [r4, #4]
    5cb4:	50e3      	str	r3, [r4, r3]
    5cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5cba:	d218      	bcs.n	5cee <_free_r+0x92>
    5cbc:	08db      	lsrs	r3, r3, #3
    5cbe:	1c5a      	adds	r2, r3, #1
    5cc0:	684d      	ldr	r5, [r1, #4]
    5cc2:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    5cc6:	60a7      	str	r7, [r4, #8]
    5cc8:	2001      	movs	r0, #1
    5cca:	109b      	asrs	r3, r3, #2
    5ccc:	fa00 f303 	lsl.w	r3, r0, r3
    5cd0:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    5cd4:	431d      	orrs	r5, r3
    5cd6:	3808      	subs	r0, #8
    5cd8:	60e0      	str	r0, [r4, #12]
    5cda:	604d      	str	r5, [r1, #4]
    5cdc:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    5ce0:	60fc      	str	r4, [r7, #12]
    5ce2:	4640      	mov	r0, r8
    5ce4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5ce8:	f7ff be7c 	b.w	59e4 <__malloc_unlock>
    5cec:	4770      	bx	lr
    5cee:	0a5a      	lsrs	r2, r3, #9
    5cf0:	2a04      	cmp	r2, #4
    5cf2:	d853      	bhi.n	5d9c <_free_r+0x140>
    5cf4:	099a      	lsrs	r2, r3, #6
    5cf6:	f102 0739 	add.w	r7, r2, #57	; 0x39
    5cfa:	007f      	lsls	r7, r7, #1
    5cfc:	f102 0538 	add.w	r5, r2, #56	; 0x38
    5d00:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    5d04:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    5d08:	4944      	ldr	r1, [pc, #272]	; (5e1c <_free_r+0x1c0>)
    5d0a:	3808      	subs	r0, #8
    5d0c:	4290      	cmp	r0, r2
    5d0e:	d04d      	beq.n	5dac <_free_r+0x150>
    5d10:	6851      	ldr	r1, [r2, #4]
    5d12:	f021 0103 	bic.w	r1, r1, #3
    5d16:	428b      	cmp	r3, r1
    5d18:	d202      	bcs.n	5d20 <_free_r+0xc4>
    5d1a:	6892      	ldr	r2, [r2, #8]
    5d1c:	4290      	cmp	r0, r2
    5d1e:	d1f7      	bne.n	5d10 <_free_r+0xb4>
    5d20:	68d0      	ldr	r0, [r2, #12]
    5d22:	60e0      	str	r0, [r4, #12]
    5d24:	60a2      	str	r2, [r4, #8]
    5d26:	6084      	str	r4, [r0, #8]
    5d28:	60d4      	str	r4, [r2, #12]
    5d2a:	4640      	mov	r0, r8
    5d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5d30:	f7ff be58 	b.w	59e4 <__malloc_unlock>
    5d34:	6895      	ldr	r5, [r2, #8]
    5d36:	4f3a      	ldr	r7, [pc, #232]	; (5e20 <_free_r+0x1c4>)
    5d38:	42bd      	cmp	r5, r7
    5d3a:	4403      	add	r3, r0
    5d3c:	d03f      	beq.n	5dbe <_free_r+0x162>
    5d3e:	68d0      	ldr	r0, [r2, #12]
    5d40:	60e8      	str	r0, [r5, #12]
    5d42:	f043 0201 	orr.w	r2, r3, #1
    5d46:	6085      	str	r5, [r0, #8]
    5d48:	6062      	str	r2, [r4, #4]
    5d4a:	50e3      	str	r3, [r4, r3]
    5d4c:	e7b3      	b.n	5cb6 <_free_r+0x5a>
    5d4e:	07ff      	lsls	r7, r7, #31
    5d50:	4403      	add	r3, r0
    5d52:	d407      	bmi.n	5d64 <_free_r+0x108>
    5d54:	f855 2c08 	ldr.w	r2, [r5, #-8]
    5d58:	1aa4      	subs	r4, r4, r2
    5d5a:	4413      	add	r3, r2
    5d5c:	68a0      	ldr	r0, [r4, #8]
    5d5e:	68e2      	ldr	r2, [r4, #12]
    5d60:	60c2      	str	r2, [r0, #12]
    5d62:	6090      	str	r0, [r2, #8]
    5d64:	4a2f      	ldr	r2, [pc, #188]	; (5e24 <_free_r+0x1c8>)
    5d66:	6812      	ldr	r2, [r2, #0]
    5d68:	f043 0001 	orr.w	r0, r3, #1
    5d6c:	4293      	cmp	r3, r2
    5d6e:	6060      	str	r0, [r4, #4]
    5d70:	608c      	str	r4, [r1, #8]
    5d72:	d3b6      	bcc.n	5ce2 <_free_r+0x86>
    5d74:	4b2c      	ldr	r3, [pc, #176]	; (5e28 <_free_r+0x1cc>)
    5d76:	4640      	mov	r0, r8
    5d78:	6819      	ldr	r1, [r3, #0]
    5d7a:	f7ff ff21 	bl	5bc0 <_malloc_trim_r>
    5d7e:	e7b0      	b.n	5ce2 <_free_r+0x86>
    5d80:	1811      	adds	r1, r2, r0
    5d82:	6849      	ldr	r1, [r1, #4]
    5d84:	07c9      	lsls	r1, r1, #31
    5d86:	d444      	bmi.n	5e12 <_free_r+0x1b6>
    5d88:	6891      	ldr	r1, [r2, #8]
    5d8a:	68d2      	ldr	r2, [r2, #12]
    5d8c:	60ca      	str	r2, [r1, #12]
    5d8e:	4403      	add	r3, r0
    5d90:	f043 0001 	orr.w	r0, r3, #1
    5d94:	6091      	str	r1, [r2, #8]
    5d96:	6060      	str	r0, [r4, #4]
    5d98:	50e3      	str	r3, [r4, r3]
    5d9a:	e7a2      	b.n	5ce2 <_free_r+0x86>
    5d9c:	2a14      	cmp	r2, #20
    5d9e:	d817      	bhi.n	5dd0 <_free_r+0x174>
    5da0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    5da4:	007f      	lsls	r7, r7, #1
    5da6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    5daa:	e7a9      	b.n	5d00 <_free_r+0xa4>
    5dac:	10aa      	asrs	r2, r5, #2
    5dae:	684b      	ldr	r3, [r1, #4]
    5db0:	2501      	movs	r5, #1
    5db2:	fa05 f202 	lsl.w	r2, r5, r2
    5db6:	4313      	orrs	r3, r2
    5db8:	604b      	str	r3, [r1, #4]
    5dba:	4602      	mov	r2, r0
    5dbc:	e7b1      	b.n	5d22 <_free_r+0xc6>
    5dbe:	f043 0201 	orr.w	r2, r3, #1
    5dc2:	614c      	str	r4, [r1, #20]
    5dc4:	610c      	str	r4, [r1, #16]
    5dc6:	60e5      	str	r5, [r4, #12]
    5dc8:	60a5      	str	r5, [r4, #8]
    5dca:	6062      	str	r2, [r4, #4]
    5dcc:	50e3      	str	r3, [r4, r3]
    5dce:	e788      	b.n	5ce2 <_free_r+0x86>
    5dd0:	2a54      	cmp	r2, #84	; 0x54
    5dd2:	d806      	bhi.n	5de2 <_free_r+0x186>
    5dd4:	0b1a      	lsrs	r2, r3, #12
    5dd6:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    5dda:	007f      	lsls	r7, r7, #1
    5ddc:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    5de0:	e78e      	b.n	5d00 <_free_r+0xa4>
    5de2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    5de6:	d806      	bhi.n	5df6 <_free_r+0x19a>
    5de8:	0bda      	lsrs	r2, r3, #15
    5dea:	f102 0778 	add.w	r7, r2, #120	; 0x78
    5dee:	007f      	lsls	r7, r7, #1
    5df0:	f102 0577 	add.w	r5, r2, #119	; 0x77
    5df4:	e784      	b.n	5d00 <_free_r+0xa4>
    5df6:	f240 5054 	movw	r0, #1364	; 0x554
    5dfa:	4282      	cmp	r2, r0
    5dfc:	d806      	bhi.n	5e0c <_free_r+0x1b0>
    5dfe:	0c9a      	lsrs	r2, r3, #18
    5e00:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    5e04:	007f      	lsls	r7, r7, #1
    5e06:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    5e0a:	e779      	b.n	5d00 <_free_r+0xa4>
    5e0c:	27fe      	movs	r7, #254	; 0xfe
    5e0e:	257e      	movs	r5, #126	; 0x7e
    5e10:	e776      	b.n	5d00 <_free_r+0xa4>
    5e12:	f043 0201 	orr.w	r2, r3, #1
    5e16:	6062      	str	r2, [r4, #4]
    5e18:	50e3      	str	r3, [r4, r3]
    5e1a:	e762      	b.n	5ce2 <_free_r+0x86>
    5e1c:	20000b3c 	.word	0x20000b3c
    5e20:	20000b44 	.word	0x20000b44
    5e24:	20000f44 	.word	0x20000f44
    5e28:	20001d14 	.word	0x20001d14
    5e2c:	00000000 	.word	0x00000000

00005e30 <___init_veneer>:
    5e30:	f85f f000 	ldr.w	pc, [pc]	; 5e34 <___init_veneer+0x4>
    5e34:	60001aa9 	.word	0x60001aa9
	...

Disassembly of section .fini:

00005e40 <_fini>:
    5e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e42:	bf00      	nop
