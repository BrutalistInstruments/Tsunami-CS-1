
C:\Users\OurBl\AppData\Local\Temp\VMBuilds\Teensy4.1Port\teensy41\Debug/Teensy4.1Port.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 80 00     ................
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 98 5f 00 00 00 00 00 00                 ...`._......

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b77      	ldr	r3, [pc, #476]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a77      	ldr	r2, [pc, #476]	; (60001218 <ResetHandler+0x1e4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4877      	ldr	r0, [pc, #476]	; (6000121c <ResetHandler+0x1e8>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a77      	ldr	r2, [pc, #476]	; (60001220 <ResetHandler+0x1ec>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a76      	ldr	r2, [pc, #472]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4976      	ldr	r1, [pc, #472]	; (60001228 <ResetHandler+0x1f4>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b74      	ldr	r3, [pc, #464]	; (6000122c <ResetHandler+0x1f8>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6d      	ldr	r2, [pc, #436]	; (60001230 <ResetHandler+0x1fc>)
6000107c:	496d      	ldr	r1, [pc, #436]	; (60001234 <ResetHandler+0x200>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6d      	ldr	r3, [pc, #436]	; (60001238 <ResetHandler+0x204>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a66      	ldr	r2, [pc, #408]	; (6000123c <ResetHandler+0x208>)
600010a4:	4b66      	ldr	r3, [pc, #408]	; (60001240 <ResetHandler+0x20c>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	4299      	cmp	r1, r3
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a60      	ldr	r2, [pc, #384]	; (60001244 <ResetHandler+0x210>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5f      	ldr	r3, [pc, #380]	; (60001248 <ResetHandler+0x214>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5e      	ldr	r2, [pc, #376]	; (6000124c <ResetHandler+0x218>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	428b      	cmp	r3, r1
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5d      	ldr	r3, [pc, #372]	; (60001250 <ResetHandler+0x21c>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5d      	ldr	r2, [pc, #372]	; (60001254 <ResetHandler+0x220>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5b      	ldr	r4, [pc, #364]	; (60001258 <ResetHandler+0x224>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5b      	ldr	r6, [pc, #364]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 6000129c <ResetHandler+0x268>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 600012a0 <ResetHandler+0x26c>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 600012a4 <ResetHandler+0x270>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b57      	ldr	r3, [pc, #348]	; (60001260 <ResetHandler+0x22c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4943      	ldr	r1, [pc, #268]	; (60001214 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8b5 	bl	600012a8 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a49      	ldr	r2, [pc, #292]	; (60001264 <ResetHandler+0x230>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b49      	ldr	r3, [pc, #292]	; (60001268 <ResetHandler+0x234>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4949      	ldr	r1, [pc, #292]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4946      	ldr	r1, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a47      	ldr	r2, [pc, #284]	; (60001274 <ResetHandler+0x240>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4847      	ldr	r0, [pc, #284]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a46      	ldr	r2, [pc, #280]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4845      	ldr	r0, [pc, #276]	; (60001280 <ResetHandler+0x24c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4944      	ldr	r1, [pc, #272]	; (60001284 <ResetHandler+0x250>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 face 	bl	6000171c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	4840      	ldr	r0, [pc, #256]	; (60001288 <ResetHandler+0x254>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fca9 	bl	60001ae8 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a3a      	ldr	r2, [pc, #232]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b3a      	ldr	r3, [pc, #232]	; (60001290 <ResetHandler+0x25c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4933      	ldr	r1, [pc, #204]	; (60001294 <ResetHandler+0x260>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2e      	ldr	r2, [pc, #184]	; (60001290 <ResetHandler+0x25c>)
600011d6:	4c30      	ldr	r4, [pc, #192]	; (60001298 <ResetHandler+0x264>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
600011e0:	f000 f8de 	bl	600013a0 <configure_external_ram>
#endif
	startup_early_hook();
600011e4:	f000 fc78 	bl	60001ad8 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e8:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011ea:	2b13      	cmp	r3, #19
600011ec:	d9fc      	bls.n	600011e8 <ResetHandler+0x1b4>
	usb_init();
600011ee:	f000 fb55 	bl	6000189c <usb_init>
	analog_init();
600011f2:	f000 fbc9 	bl	60001988 <analog_init>
	pwm_init();
600011f6:	f000 fc7f 	bl	60001af8 <__pwm_init_veneer>
	tempmon_init();
600011fa:	f000 fac1 	bl	60001780 <tempmon_init>

	startup_late_hook();
600011fe:	f000 fc63 	bl	60001ac8 <__startup_late_hook_veneer>
60001202:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001204:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001208:	d3fb      	bcc.n	60001202 <ResetHandler+0x1ce>
	//printf("before C++ constructors\n");
	__libc_init_array();
6000120a:	f000 fc59 	bl	60001ac0 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120e:	f000 fc5f 	bl	60001ad0 <__main_veneer>
60001212:	e7fe      	b.n	60001212 <ResetHandler+0x1de>
60001214:	400ac000 	.word	0x400ac000
60001218:	aaaaaaab 	.word	0xaaaaaaab
6000121c:	00200007 	.word	0x00200007
60001220:	20078000 	.word	0x20078000
60001224:	00000000 	.word	0x00000000
60001228:	60001b10 	.word	0x60001b10
6000122c:	000034c8 	.word	0x000034c8
60001230:	20000000 	.word	0x20000000
60001234:	60004fdc 	.word	0x60004fdc
60001238:	20000fc0 	.word	0x20000fc0
6000123c:	20000fc0 	.word	0x20000fc0
60001240:	200032c0 	.word	0x200032c0
60001244:	e000ed88 	.word	0xe000ed88
60001248:	200017fc 	.word	0x200017fc
6000124c:	00000849 	.word	0x00000849
60001250:	e000e400 	.word	0xe000e400
60001254:	e000e4a0 	.word	0xe000e4a0
60001258:	400d8000 	.word	0x400d8000
6000125c:	400fc000 	.word	0x400fc000
60001260:	e000ed08 	.word	0xe000ed08
60001264:	e000e014 	.word	0xe000e014
60001268:	e000e018 	.word	0xe000e018
6000126c:	00001d59 	.word	0x00001d59
60001270:	e000edfc 	.word	0xe000edfc
60001274:	20200000 	.word	0x20200000
60001278:	00001d9d 	.word	0x00001d9d
6000127c:	e0001000 	.word	0xe0001000
60001280:	e0001004 	.word	0xe0001004
60001284:	200012a4 	.word	0x200012a4
60001288:	23c34600 	.word	0x23c34600
6000128c:	40084000 	.word	0x40084000
60001290:	400d4000 	.word	0x400d4000
60001294:	56c00000 	.word	0x56c00000
60001298:	200012ac 	.word	0x200012ac
6000129c:	20001800 	.word	0x20001800
600012a0:	2018101b 	.word	0x2018101b
600012a4:	13110d0c 	.word	0x13110d0c

600012a8 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012aa:	4a28      	ldr	r2, [pc, #160]	; (6000134c <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012ac:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012ae:	4b28      	ldr	r3, [pc, #160]	; (60001350 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012b0:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b4:	4c27      	ldr	r4, [pc, #156]	; (60001354 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012b6:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012b8:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 60001394 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012bc:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012be:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012c0:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012c2:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012c6:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012ca:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012cc:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 60001398 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d0:	4f21      	ldr	r7, [pc, #132]	; (60001358 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012d2:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012d6:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d8:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012da:	4e20      	ldr	r6, [pc, #128]	; (6000135c <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012dc:	4f20      	ldr	r7, [pc, #128]	; (60001360 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012de:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e0:	4920      	ldr	r1, [pc, #128]	; (60001364 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012e2:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e4:	4e20      	ldr	r6, [pc, #128]	; (60001368 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e6:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ea:	4f20      	ldr	r7, [pc, #128]	; (6000136c <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012ec:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ee:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f0:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f4:	4e1e      	ldr	r6, [pc, #120]	; (60001370 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012f6:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f8:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012fa:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600012fc:	f8df e09c 	ldr.w	lr, [pc, #156]	; 6000139c <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001300:	4e1c      	ldr	r6, [pc, #112]	; (60001374 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001302:	491d      	ldr	r1, [pc, #116]	; (60001378 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001304:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001308:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000130a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000130c:	4f1b      	ldr	r7, [pc, #108]	; (6000137c <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000130e:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001310:	4e1b      	ldr	r6, [pc, #108]	; (60001380 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001312:	491c      	ldr	r1, [pc, #112]	; (60001384 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001314:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001316:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001318:	4f1b      	ldr	r7, [pc, #108]	; (60001388 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131a:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131c:	4e1b      	ldr	r6, [pc, #108]	; (6000138c <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000131e:	491c      	ldr	r1, [pc, #112]	; (60001390 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001320:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001322:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001324:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001326:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001328:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000132c:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001330:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001334:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001338:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000133c:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001340:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001344:	f842 3c88 	str.w	r3, [r2, #-136]
60001348:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000134a:	bf00      	nop
6000134c:	e000ed9c 	.word	0xe000ed9c
60001350:	e000eda0 	.word	0xe000eda0
60001354:	e000ed94 	.word	0xe000ed94
60001358:	00100009 	.word	0x00100009
6000135c:	00200013 	.word	0x00200013
60001360:	07020021 	.word	0x07020021
60001364:	200032c0 	.word	0x200032c0
60001368:	20000014 	.word	0x20000014
6000136c:	13080025 	.word	0x13080025
60001370:	10000009 	.word	0x10000009
60001374:	40000017 	.word	0x40000017
60001378:	13100033 	.word	0x13100033
6000137c:	60000018 	.word	0x60000018
60001380:	070b002f 	.word	0x070b002f
60001384:	70000019 	.word	0x70000019
60001388:	170b0037 	.word	0x170b0037
6000138c:	7000001a 	.word	0x7000001a
60001390:	130b002f 	.word	0x130b002f
60001394:	1000003f 	.word	0x1000003f
60001398:	03080025 	.word	0x03080025
6000139c:	20200016 	.word	0x20200016

600013a0 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
600013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013a2:	4bb8      	ldr	r3, [pc, #736]	; (60001684 <configure_external_ram+0x2e4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600013a4:	2218      	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013a6:	4eb8      	ldr	r6, [pc, #736]	; (60001688 <configure_external_ram+0x2e8>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013a8:	2001      	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013aa:	49b8      	ldr	r1, [pc, #736]	; (6000168c <configure_external_ram+0x2ec>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600013ac:	f248 7e0c 	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600013b0:	4db7      	ldr	r5, [pc, #732]	; (60001690 <configure_external_ram+0x2f0>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600013b2:	f04f 37ff 	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600013b6:	4cb7      	ldr	r4, [pc, #732]	; (60001694 <configure_external_ram+0x2f4>)
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013b8:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600013bc:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600013c0:	2500      	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013c2:	f8c3 1264 	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600013c6:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600013ca:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013ce:	f8c3 626c 	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013d2:	49b1      	ldr	r1, [pc, #708]	; (60001698 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013d4:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013d8:	f8c3 6274 	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013dc:	f8c3 6278 	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600013e0:	4eae      	ldr	r6, [pc, #696]	; (6000169c <configure_external_ram+0x2fc>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600013e2:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600013e4:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600013e6:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600013e8:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600013ea:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600013ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600013f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600013f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600013f8:	f240 6205 	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013fc:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001400:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001404:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001408:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000140c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001410:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001414:	4629      	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001416:	69b3      	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001418:	48a1      	ldr	r0, [pc, #644]	; (600016a0 <configure_external_ram+0x300>)
6000141a:	4018      	ands	r0, r3
6000141c:	4ba1      	ldr	r3, [pc, #644]	; (600016a4 <configure_external_ram+0x304>)
6000141e:	4303      	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001420:	48a1      	ldr	r0, [pc, #644]	; (600016a8 <configure_external_ram+0x308>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001422:	61b3      	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001424:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
60001428:	f043 030c 	orr.w	r3, r3, #12
6000142c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001430:	2602      	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001432:	6803      	ldr	r3, [r0, #0]
60001434:	4333      	orrs	r3, r6
60001436:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001438:	6803      	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000143a:	ea03 0e0e 	and.w	lr, r3, lr
6000143e:	4b9b      	ldr	r3, [pc, #620]	; (600016ac <configure_external_ram+0x30c>)
60001440:	ea4e 0303 	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001444:	f8df e29c 	ldr.w	lr, [pc, #668]	; 600016e4 <configure_external_ram+0x344>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001448:	6003      	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000144a:	4b99      	ldr	r3, [pc, #612]	; (600016b0 <configure_external_ram+0x310>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000144c:	6047      	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000144e:	f8de 7008 	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001452:	403b      	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001454:	4f97      	ldr	r7, [pc, #604]	; (600016b4 <configure_external_ram+0x314>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001456:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000145a:	6083      	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000145c:	68c3      	ldr	r3, [r0, #12]
6000145e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001462:	60c3      	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001464:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001466:	401f      	ands	r7, r3
60001468:	4b93      	ldr	r3, [pc, #588]	; (600016b8 <configure_external_ram+0x318>)
6000146a:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000146c:	4f91      	ldr	r7, [pc, #580]	; (600016b4 <configure_external_ram+0x314>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000146e:	6203      	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001470:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001472:	401f      	ands	r7, r3
60001474:	4b90      	ldr	r3, [pc, #576]	; (600016b8 <configure_external_ram+0x318>)
60001476:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001478:	4f90      	ldr	r7, [pc, #576]	; (600016bc <configure_external_ram+0x31c>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000147a:	6243      	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000147c:	6287      	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000147e:	62c7      	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001480:	f8de 30b8 	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001484:	4f8e      	ldr	r7, [pc, #568]	; (600016c0 <configure_external_ram+0x320>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001486:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000148a:	f043 0301 	orr.w	r3, r3, #1
6000148e:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001492:	f8de 30bc 	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001496:	f8df e234 	ldr.w	lr, [pc, #564]	; 600016cc <configure_external_ram+0x32c>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000149a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000149e:	f043 0301 	orr.w	r3, r3, #1
600014a2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
600014a6:	6105      	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600014a8:	6604      	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600014aa:	6707      	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014ac:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600014b0:	6644      	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600014b2:	6747      	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014b4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014b8:	6804      	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014ba:	4b82      	ldr	r3, [pc, #520]	; (600016c4 <configure_external_ram+0x324>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014bc:	f024 0402 	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014c0:	4a81      	ldr	r2, [pc, #516]	; (600016c8 <configure_external_ram+0x328>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014c2:	6004      	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014c4:	f8c0 e018 	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014c8:	61c6      	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014ca:	f843 1b04 	str.w	r1, [r3], #4
600014ce:	4293      	cmp	r3, r2
600014d0:	d1fb      	bne.n	600014ca <configure_external_ram+0x12a>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600014d2:	4b75      	ldr	r3, [pc, #468]	; (600016a8 <configure_external_ram+0x308>)
600014d4:	681a      	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600014d6:	4619      	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600014d8:	f042 0201 	orr.w	r2, r2, #1
600014dc:	601a      	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600014de:	680b      	ldr	r3, [r1, #0]
600014e0:	4a71      	ldr	r2, [pc, #452]	; (600016a8 <configure_external_ram+0x308>)
600014e2:	f013 0301 	ands.w	r3, r3, #1
600014e6:	d1fa      	bne.n	600014de <configure_external_ram+0x13e>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014e8:	4e78      	ldr	r6, [pc, #480]	; (600016cc <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014ea:	2502      	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600014ec:	f240 64f5 	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600014f0:	f240 4066 	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600014f4:	f240 4199 	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600014f8:	4f75      	ldr	r7, [pc, #468]	; (600016d0 <configure_external_ram+0x330>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014fa:	6196      	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600014fc:	f242 4601 	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001500:	61d5      	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001502:	f240 4535 	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001506:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000150a:	f242 2401 	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000150e:	f8c2 0210 	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001512:	2001      	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001514:	f8c2 1220 	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001518:	4611      	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
6000151a:	f8c2 7230 	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000151e:	f107 475a 	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001522:	f8c2 6234 	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001526:	f507 7713 	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000152a:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000152e:	4e69      	ldr	r6, [pc, #420]	; (600016d4 <configure_external_ram+0x334>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001530:	4d69      	ldr	r5, [pc, #420]	; (600016d8 <configure_external_ram+0x338>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001532:	f8c2 7250 	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001536:	f8c2 6254 	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000153a:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000153e:	f8c2 4264 	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001542:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001546:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000154a:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000154e:	694b      	ldr	r3, [r1, #20]
60001550:	4a55      	ldr	r2, [pc, #340]	; (600016a8 <configure_external_ram+0x308>)
60001552:	07dd      	lsls	r5, r3, #31
60001554:	d5fb      	bpl.n	6000154e <configure_external_ram+0x1ae>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001556:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001558:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000155a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000155e:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001560:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001562:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001566:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000156a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000156e:	694b      	ldr	r3, [r1, #20]
60001570:	4a4d      	ldr	r2, [pc, #308]	; (600016a8 <configure_external_ram+0x308>)
60001572:	07dc      	lsls	r4, r3, #31
60001574:	d5fb      	bpl.n	6000156e <configure_external_ram+0x1ce>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001576:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001578:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000157a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000157e:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001580:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001582:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001586:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000158a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000158e:	694b      	ldr	r3, [r1, #20]
60001590:	4a45      	ldr	r2, [pc, #276]	; (600016a8 <configure_external_ram+0x308>)
60001592:	07d8      	lsls	r0, r3, #31
60001594:	d5fb      	bpl.n	6000158e <configure_external_ram+0x1ee>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001596:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001598:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000159a:	4850      	ldr	r0, [pc, #320]	; (600016dc <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000159c:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000159e:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015a0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600015a4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015a8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015ac:	694b      	ldr	r3, [r1, #20]
600015ae:	4a3e      	ldr	r2, [pc, #248]	; (600016a8 <configure_external_ram+0x308>)
600015b0:	07db      	lsls	r3, r3, #31
600015b2:	d5fb      	bpl.n	600015ac <configure_external_ram+0x20c>
	uint32_t id = FLEXSPI2_RFDR0;
600015b4:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015b8:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600015bc:	2021      	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015be:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600015c0:	6150      	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015c2:	428b      	cmp	r3, r1
600015c4:	d000      	beq.n	600015c8 <configure_external_ram+0x228>
600015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015c8:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015ce:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015d0:	4611      	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015d2:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015d6:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015da:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015de:	694b      	ldr	r3, [r1, #20]
600015e0:	4a31      	ldr	r2, [pc, #196]	; (600016a8 <configure_external_ram+0x308>)
600015e2:	07df      	lsls	r7, r3, #31
600015e4:	d5fb      	bpl.n	600015de <configure_external_ram+0x23e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600015e6:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015e8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015ec:	2000      	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015ee:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600015f0:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015f2:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015f6:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015fa:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015fe:	694b      	ldr	r3, [r1, #20]
60001600:	4a29      	ldr	r2, [pc, #164]	; (600016a8 <configure_external_ram+0x308>)
60001602:	07de      	lsls	r6, r3, #31
60001604:	d5fb      	bpl.n	600015fe <configure_external_ram+0x25e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001606:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001608:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000160c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001610:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001612:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001614:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001618:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000161c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001620:	694b      	ldr	r3, [r1, #20]
60001622:	4a21      	ldr	r2, [pc, #132]	; (600016a8 <configure_external_ram+0x308>)
60001624:	07dd      	lsls	r5, r3, #31
60001626:	d5fb      	bpl.n	60001620 <configure_external_ram+0x280>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001628:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000162a:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000162e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001632:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001634:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001636:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000163a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000163e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001642:	694b      	ldr	r3, [r1, #20]
60001644:	4a18      	ldr	r2, [pc, #96]	; (600016a8 <configure_external_ram+0x308>)
60001646:	07dc      	lsls	r4, r3, #31
60001648:	d5fb      	bpl.n	60001642 <configure_external_ram+0x2a2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000164a:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000164c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001650:	4822      	ldr	r0, [pc, #136]	; (600016dc <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001652:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001654:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001656:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000165a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000165e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001662:	694b      	ldr	r3, [r1, #20]
60001664:	4a10      	ldr	r2, [pc, #64]	; (600016a8 <configure_external_ram+0x308>)
60001666:	07d8      	lsls	r0, r3, #31
60001668:	d5fb      	bpl.n	60001662 <configure_external_ram+0x2c2>
	uint32_t id = FLEXSPI2_RFDR0;
6000166a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
6000166e:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001672:	2021      	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001674:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001676:	6150      	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001678:	428b      	cmp	r3, r1
6000167a:	d035      	beq.n	600016e8 <configure_external_ram+0x348>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
6000167c:	4b18      	ldr	r3, [pc, #96]	; (600016e0 <configure_external_ram+0x340>)
6000167e:	2208      	movs	r2, #8
60001680:	701a      	strb	r2, [r3, #0]
60001682:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001684:	401f8000 	.word	0x401f8000
60001688:	000170f9 	.word	0x000170f9
6000168c:	0001b0f9 	.word	0x0001b0f9
60001690:	000110f9 	.word	0x000110f9
60001694:	000100f9 	.word	0x000100f9
60001698:	401f8400 	.word	0x401f8400
6000169c:	400fc000 	.word	0x400fc000
600016a0:	1ffffcff 	.word	0x1ffffcff
600016a4:	a0000300 	.word	0xa0000300
600016a8:	402a4000 	.word	0x402a4000
600016ac:	ffff0012 	.word	0xffff0012
600016b0:	00f737ff 	.word	0x00f737ff
600016b4:	7cf0ff00 	.word	0x7cf0ff00
600016b8:	80000040 	.word	0x80000040
600016bc:	830f00ff 	.word	0x830f00ff
600016c0:	00020063 	.word	0x00020063
600016c4:	402a4200 	.word	0x402a4200
600016c8:	402a4300 	.word	0x402a4300
600016cc:	5af05af0 	.word	0x5af05af0
600016d0:	3018049f 	.word	0x3018049f
600016d4:	26013206 	.word	0x26013206
600016d8:	0a180638 	.word	0x0a180638
600016dc:	00030004 	.word	0x00030004
600016e0:	200012b0 	.word	0x200012b0
600016e4:	402a8000 	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016e8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016ec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016f0:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016f2:	4611      	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016f4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016f8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016fc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001700:	694b      	ldr	r3, [r1, #20]
60001702:	4a04      	ldr	r2, [pc, #16]	; (60001714 <configure_external_ram+0x374>)
60001704:	07db      	lsls	r3, r3, #31
60001706:	d5fb      	bpl.n	60001700 <configure_external_ram+0x360>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001708:	2001      	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
6000170a:	4b03      	ldr	r3, [pc, #12]	; (60001718 <configure_external_ram+0x378>)
6000170c:	2110      	movs	r1, #16
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000170e:	6150      	str	r0, [r2, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001710:	7019      	strb	r1, [r3, #0]
60001712:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001714:	402a4000 	.word	0x402a4000
60001718:	200012b0 	.word	0x200012b0

6000171c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000171c:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000171e:	4a17      	ldr	r2, [pc, #92]	; (6000177c <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001720:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001722:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001726:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000172a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000172e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001732:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001736:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001738:	f013 0f02 	tst.w	r3, #2
6000173c:	d006      	beq.n	6000174c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000173e:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001740:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001742:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001744:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001746:	f013 0f02 	tst.w	r3, #2
6000174a:	d1f8      	bne.n	6000173e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000174c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001750:	d101      	bne.n	60001756 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001752:	6155      	str	r5, [r2, #20]
			continue;
60001754:	e7ef      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001756:	f413 5f80 	tst.w	r3, #4096	; 0x1000
6000175a:	d101      	bne.n	60001760 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000175c:	6156      	str	r6, [r2, #20]
			continue;
6000175e:	e7ea      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001760:	2b00      	cmp	r3, #0
60001762:	dae8      	bge.n	60001736 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001764:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001768:	d001      	beq.n	6000176e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000176a:	6191      	str	r1, [r2, #24]
			continue;
6000176c:	e7e3      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000176e:	065b      	lsls	r3, r3, #25
60001770:	d401      	bmi.n	60001776 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001772:	6157      	str	r7, [r2, #20]
			continue;
60001774:	e7df      	b.n	60001736 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001776:	bcf0      	pop	{r4, r5, r6, r7}
60001778:	4770      	bx	lr
6000177a:	bf00      	nop
6000177c:	400d8000 	.word	0x400d8000

60001780 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001780:	4a3b      	ldr	r2, [pc, #236]	; (60001870 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001782:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001786:	493b      	ldr	r1, [pc, #236]	; (60001874 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001788:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000178a:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
6000178c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000178e:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001792:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001794:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001898 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001798:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000179a:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000179e:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017a2:	4f35      	ldr	r7, [pc, #212]	; (60001878 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600017a4:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600017a6:	f3c3 240b 	ubfx	r4, r3, #8, #12
600017aa:	4e34      	ldr	r6, [pc, #208]	; (6000187c <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017ac:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017b0:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017b4:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600017b8:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017c0:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017c4:	ee07 4a90 	vmov	s15, r4
600017c8:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017cc:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600017ce:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017d2:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017d6:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017da:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017dc:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017e4:	4d26      	ldr	r5, [pc, #152]	; (60001880 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017e6:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600017ea:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017ec:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600017f4:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017f6:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600017fa:	4e22      	ldr	r6, [pc, #136]	; (60001884 <tempmon_init+0x104>)
600017fc:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017fe:	4922      	ldr	r1, [pc, #136]	; (60001888 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001800:	4c22      	ldr	r4, [pc, #136]	; (6000188c <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001802:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001806:	ee07 3a90 	vmov	s15, r3
6000180a:	4b21      	ldr	r3, [pc, #132]	; (60001890 <tempmon_init+0x110>)
6000180c:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
60001810:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001814:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001818:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000181c:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001820:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001824:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001828:	ee15 3a90 	vmov	r3, s11
6000182c:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001830:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001834:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001838:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000183a:	ea01 4105 	and.w	r1, r1, r5, lsl #16
6000183e:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001846:	430b      	orrs	r3, r1
60001848:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000184c:	ee17 3a90 	vmov	r3, s15
60001850:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
60001854:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001858:	430b      	orrs	r3, r1
6000185a:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000185e:	6813      	ldr	r3, [r2, #0]
60001860:	f043 0302 	orr.w	r3, r3, #2
60001864:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001866:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001868:	4b0a      	ldr	r3, [pc, #40]	; (60001894 <tempmon_init+0x114>)
6000186a:	2201      	movs	r2, #1
6000186c:	601a      	str	r2, [r3, #0]
6000186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001870:	400d8180 	.word	0x400d8180
60001874:	401f4400 	.word	0x401f4400
60001878:	200012bc 	.word	0x200012bc
6000187c:	200012c0 	.word	0x200012c0
60001880:	200012b8 	.word	0x200012b8
60001884:	20001800 	.word	0x20001800
60001888:	0fff0000 	.word	0x0fff0000
6000188c:	e000e440 	.word	0xe000e440
60001890:	00000925 	.word	0x00000925
60001894:	e000e108 	.word	0xe000e108
60001898:	200012b4 	.word	0x200012b4

6000189c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000189c:	4b30      	ldr	r3, [pc, #192]	; (60001960 <usb_init+0xc4>)
6000189e:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600018a2:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600018a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018a8:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600018ac:	f000 f904 	bl	60001ab8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018b0:	492c      	ldr	r1, [pc, #176]	; (60001964 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018b2:	482d      	ldr	r0, [pc, #180]	; (60001968 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018b4:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018b8:	4c2c      	ldr	r4, [pc, #176]	; (6000196c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018ba:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018be:	4b2c      	ldr	r3, [pc, #176]	; (60001970 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018c0:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018c4:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018c8:	6822      	ldr	r2, [r4, #0]
600018ca:	4013      	ands	r3, r2
600018cc:	b91b      	cbnz	r3, 600018d6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600018ce:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
600018d2:	079a      	lsls	r2, r3, #30
600018d4:	d01a      	beq.n	6000190c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600018d6:	4b24      	ldr	r3, [pc, #144]	; (60001968 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600018d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600018dc:	4a23      	ldr	r2, [pc, #140]	; (6000196c <usb_init+0xd0>)
600018de:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600018e0:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600018e2:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
600018e6:	f041 0102 	orr.w	r1, r1, #2
600018ea:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600018ee:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600018f2:	079b      	lsls	r3, r3, #30
600018f4:	d4fb      	bmi.n	600018ee <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600018f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600018fa:	491e      	ldr	r1, [pc, #120]	; (60001974 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600018fc:	4b1b      	ldr	r3, [pc, #108]	; (6000196c <usb_init+0xd0>)
600018fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001902:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001904:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001906:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001908:	f000 f8f2 	bl	60001af0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000190c:	4d1a      	ldr	r5, [pc, #104]	; (60001978 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000190e:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001910:	4b16      	ldr	r3, [pc, #88]	; (6000196c <usb_init+0xd0>)
60001912:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001916:	4c14      	ldr	r4, [pc, #80]	; (60001968 <usb_init+0xcc>)
60001918:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000191a:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000191c:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000191e:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001920:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001922:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001926:	f44f 7220 	mov.w	r2, #640	; 0x280
6000192a:	f000 f8d9 	bl	60001ae0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000192e:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001932:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001936:	f240 1343 	movw	r3, #323	; 0x143
6000193a:	4a10      	ldr	r2, [pc, #64]	; (6000197c <usb_init+0xe0>)
6000193c:	4910      	ldr	r1, [pc, #64]	; (60001980 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000193e:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001940:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001942:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
60001946:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000194a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000194e:	4a0d      	ldr	r2, [pc, #52]	; (60001984 <usb_init+0xe8>)
60001950:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001954:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001956:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001958:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
6000195c:	bd70      	pop	{r4, r5, r6, pc}
6000195e:	bf00      	nop
60001960:	400d8000 	.word	0x400d8000
60001964:	400fc000 	.word	0x400fc000
60001968:	402e0000 	.word	0x402e0000
6000196c:	400d9000 	.word	0x400d9000
60001970:	001e1c00 	.word	0x001e1c00
60001974:	e000e28c 	.word	0xe000e28c
60001978:	20003000 	.word	0x20003000
6000197c:	20001800 	.word	0x20001800
60001980:	00000949 	.word	0x00000949
60001984:	e000e10c 	.word	0xe000e10c

60001988 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001988:	4b11      	ldr	r3, [pc, #68]	; (600019d0 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000198a:	4912      	ldr	r1, [pc, #72]	; (600019d4 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000198c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000198e:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001990:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001994:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001996:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001998:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000199c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000199e:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600019a0:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600019a4:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019a6:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600019a8:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600019aa:	6c93      	ldr	r3, [r2, #72]	; 0x48
600019ac:	061b      	lsls	r3, r3, #24
600019ae:	d4fc      	bmi.n	600019aa <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019b0:	4b09      	ldr	r3, [pc, #36]	; (600019d8 <analog_init+0x50>)
600019b2:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019b6:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019b8:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019ba:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019bc:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019be:	6c93      	ldr	r3, [r2, #72]	; 0x48
600019c0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600019c4:	d1fb      	bne.n	600019be <analog_init+0x36>
	calibrating = 0;
600019c6:	4a05      	ldr	r2, [pc, #20]	; (600019dc <analog_init+0x54>)
600019c8:	7013      	strb	r3, [r2, #0]
}
600019ca:	bc30      	pop	{r4, r5}
600019cc:	4770      	bx	lr
600019ce:	bf00      	nop
600019d0:	400fc000 	.word	0x400fc000
600019d4:	400c4000 	.word	0x400c4000
600019d8:	400c8000 	.word	0x400c8000
600019dc:	20001511 	.word	0x20001511

600019e0 <usb_string_product_name_default>:
600019e0:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
600019f0:	00610069 0000006c                       i.a.l...

600019f8 <usb_string_manufacturer_name_default>:
600019f8:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001a08:	00690075 006f006e                       u.i.n.o.

60001a10 <string0>:
60001a10:	04090304                                ....

60001a14 <usb_config_descriptor_12>:
60001a14:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001a24:	24050001 05011000 01010124 06022404     ...$....$....$..
60001a34:	00062405 82050701 10001003 00010409     .$..............
60001a44:	00000a02 03050700 00004002 02840507     .........@......
60001a54:	00000040                                @...

60001a58 <usb_config_descriptor_480>:
60001a58:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001a68:	24050001 05011000 01010124 06022404     ...$....$....$..
60001a78:	00062405 82050701 05001003 00010409     .$..............
60001a88:	00000a02 03050700 00020002 02840507     ................
60001a98:	00000200                                ....

60001a9c <qualifier_descriptor>:
60001a9c:	0200060a 40000002 ff010001                       .......@..

60001aa6 <_serialEvent_default>:
60001aa6:	b5f8ff01                                         ..

60001aa8 <_init>:
60001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001aaa:	bf00      	nop
60001aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001aae:	bc08      	pop	{r3}
60001ab0:	469e      	mov	lr, r3
60001ab2:	4770      	bx	lr
60001ab4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

60001ab8 <__usb_init_serialnumber_veneer>:
60001ab8:	f85f f000 	ldr.w	pc, [pc]	; 60001abc <__usb_init_serialnumber_veneer+0x4>
60001abc:	000013d1 	.word	0x000013d1

60001ac0 <____libc_init_array_veneer>:
60001ac0:	f85f f000 	ldr.w	pc, [pc]	; 60001ac4 <____libc_init_array_veneer+0x4>
60001ac4:	0000295d 	.word	0x0000295d

60001ac8 <__startup_late_hook_veneer>:
60001ac8:	f85f f000 	ldr.w	pc, [pc]	; 60001acc <__startup_late_hook_veneer+0x4>
60001acc:	00000865 	.word	0x00000865

60001ad0 <__main_veneer>:
60001ad0:	f85f f000 	ldr.w	pc, [pc]	; 60001ad4 <__main_veneer+0x4>
60001ad4:	00001e19 	.word	0x00001e19

60001ad8 <__startup_early_hook_veneer>:
60001ad8:	f85f f000 	ldr.w	pc, [pc]	; 60001adc <__startup_early_hook_veneer+0x4>
60001adc:	00000861 	.word	0x00000861

60001ae0 <__memset_veneer>:
60001ae0:	f85f f000 	ldr.w	pc, [pc]	; 60001ae4 <__memset_veneer+0x4>
60001ae4:	00002f61 	.word	0x00002f61

60001ae8 <__set_arm_clock_veneer>:
60001ae8:	f85f f000 	ldr.w	pc, [pc]	; 60001aec <__set_arm_clock_veneer+0x4>
60001aec:	00002115 	.word	0x00002115

60001af0 <__delay_veneer>:
60001af0:	f85f f000 	ldr.w	pc, [pc]	; 60001af4 <__delay_veneer+0x4>
60001af4:	00000735 	.word	0x00000735

60001af8 <__pwm_init_veneer>:
60001af8:	f85f f000 	ldr.w	pc, [pc]	; 60001afc <__pwm_init_veneer+0x4>
60001afc:	00002425 	.word	0x00002425

60001b00 <__init_array_start>:
60001b00:	00000045 	.word	0x00000045
60001b04:	000001a5 	.word	0x000001a5
60001b08:	00000721 	.word	0x00000721

60001b0c <__init_array_end>:
60001b0c:	ffffffff 	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	.short	0xb933

    return tmeas;
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x17>)
      2a:	b113      	.short	0xb113
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1b>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	movs	r3, #1
      34:	bd107023 	.word	0xbd107023
      38:	0fc0      	lsrs	r0, r0, #31
      3a:	2000      	movs	r0, #0
      3c:	00000000 	.word	0x00000000
}
      40:	34c4      	adds	r4, #196	; 0xc4
	...

00000044 <frame_dummy>:
      44:	4b08      	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	b510      	push	{r4, lr}
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	f3af4808 	.word	0xf3af4808
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	d0fb2b00 	.word	0xd0fb2b00
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      64:	bf004718 	.word	0xbf004718
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	0fc4      	lsrs	r4, r0, #31
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2000      	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	34c4      	adds	r4, #196	; 0xc4
  ADC2_CFG = mode1;
      72:	0000      	.short	0x0000
  
  if(num >= 4){
      74:	0fc0      	lsrs	r0, r0, #31
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	.short	0x2000
      78:	0000      	movs	r0, r0
	...

0000007c <IntervalTimer::~IntervalTimer()>:
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
      7c:	b510      	push	{r4, lr}
      7e:	4604      	.short	0x4604
		end();
      80:	f001 fe9c 	bl	1dbc <IntervalTimer::end()>
	}
      84:	4620      	mov	r0, r4
      86:	bd10      	.short	0xbd10

00000088 <setup>:
}

// the loop function runs over and over again until power down or reset
void loop() {

      88:	b508      	push	{r3, lr}
      8a:	f640 31b8 	movw	r1, #3000	; 0xbb8
      8e:	4819      	ldr	r0, [pc, #100]	; (f4 <setup+0x6c>)
      90:	f000 faa6 	bl	5e0 <VisualMicroDebug::init(unsigned long)>
      94:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
      98:	4816      	ldr	r0, [pc, #88]	; (f4 <setup+0x6c>)
      9a:	f000 fa9d 	bl	5d8 <VisualMicroDebug::begin(unsigned long)>
      9e:	2101      	movs	r1, #1
      a0:	4814      	ldr	r0, [pc, #80]	; (f4 <setup+0x6c>)
      a2:	f000 fa7b 	bl	59c <VisualMicroDebug::outPacketStart(bool)>
      a6:	b9c8      	.short	0xb9c8
      a8:	2100      	movs	r1, #0
      aa:	4812      	ldr	r0, [pc, #72]	; (f4 <setup+0x6c>)
      ac:	f0002201 	.word	0xf0002201
      b0:	faa7 2101 			; <UNDEFINED> instruction: 0xfaa72101
      b4:	f000480f 	.word	0xf000480f
      b8:	fa71 b130 			; <UNDEFINED> instruction: 0xfa71b130
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      bc:	480e2106 	.word	0x480e2106
      c0:	f001 fdc8 	bl	1c54 <usb_serial_write>
      c4:	f000480b 	.word	0xf000480b
      c8:	fa85 480c 			; <UNDEFINED> instruction: 0xfa85480c
      cc:	f876f000 	.word	0xf876f000
      d0:	2100      	movs	r1, #0
      d2:	480b      	.short	0x480b
      d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// the loop function runs over and over again until power down or reset
void loop() {

      d8:	b93af000 	.word	0xb93af000
      dc:	2110      	movs	r1, #16
      de:	4809      	ldr	r0, [pc, #36]	; (104 <setup+0x7c>)
      e0:	fdb8f001 	.word	0xfdb8f001
}

// the loop function runs over and over again until power down or reset
void loop() {

      e4:	210a      	movs	r1, #10
      e6:	4803      	.short	0x4803
      e8:	f000 f970 	bl	3cc <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
      ec:	f0004801 	.word	0xf0004801
      f0:	fa71 e7d9 			; <UNDEFINED> instruction: 0xfa71e7d9
      f4:	2000125c 	.word	0x2000125c
      f8:	0014      	movs	r4, r2
      fa:	2000      	.short	0x2000
      fc:	10dc      	asrs	r4, r3, #3
      fe:	2000      	movs	r0, #0
     100:	20000fdc 	.word	0x20000fdc
     104:	0000      	movs	r0, r0
     106:	2000      	.short	0x2000

00000108 <loop>:
     108:	b538      	push	{r3, r4, r5, lr}
     10a:	4c20      	.short	0x4c20
     10c:	6823      	ldr	r3, [r4, #0]
     10e:	b913      	.short	0xb913
     110:	6823      	ldr	r3, [r4, #0]
     112:	2b01      	cmp	r3, #1
     114:	4d1ed922 	.word	0x4d1ed922
     118:	481e      	ldr	r0, [pc, #120]	; (194 <loop+0x8c>)
     11a:	f000      	.short	0xf000
     11c:	f963 682a 	vld2.8	{d22-d23}, [r3 :128], sl
     120:	491d      	ldr	r1, [pc, #116]	; (198 <loop+0x90>)
     122:	4603      	.short	0x4603
     124:	4290      	cmp	r0, r2
     126:	6008      	.short	0x6008
     128:	d316      	bcc.n	158 <loop+0x50>
     12a:	1a9a      	.short	0x1a9a
     12c:	2af9      	cmp	r2, #249	; 0xf9
     12e:	d916      	.short	0xd916
     130:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     134:	602b4817 	.word	0x602b4817
     138:	f000 f95a 	bl	3f0 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>
     13c:	48152101 	.word	0x48152101
     140:	f000 fa2c 	bl	59c <VisualMicroDebug::outPacketStart(bool)>
     144:	4813b960 	.word	0x4813b960
     148:	2102      	movs	r1, #2
     14a:	f000      	.short	0xf000
     14c:	f93f 4811 	ldrsh.w	r4, [pc, #-2065]	; fffff93f <_flexram_bank_config+0x55554e94>
     150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     154:	f000 b9e0 	b.w	518 <VisualMicroDebug::OnBreakPointEnd()>
     158:	602b      	str	r3, [r5, #0]
     15a:	bd38      	.short	0xbd38
     15c:	bd38      	pop	{r3, r4, r5, pc}
     15e:	bd38      	.short	0xbd38
     160:	2101      	movs	r1, #1
     162:	480c      	.short	0x480c
     164:	f000 f98a 	bl	47c <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>
     168:	480c2101 	.word	0x480c2101
     16c:	f001 fd72 	bl	1c54 <usb_serial_write>
     170:	23006821 	.word	0x23006821

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     174:	220a      	movs	r2, #10
     176:	480a      	.short	0x480a
     178:	f001 fe66 	bl	1e48 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     17c:	4805      	ldr	r0, [pc, #20]	; (194 <loop+0x8c>)
     17e:	f000 f9bd 	bl	4fc <VisualMicroDebug::OnBreakPointPrintEnd()>
     182:	4804      	.short	0x4804
     184:	f000 fa26 	bl	5d4 <VisualMicroDebug::outPacketEnd()>
     188:	bf00e7dd 	.word	0xbf00e7dd
     18c:	12ac      	asrs	r4, r5, #10
     18e:	2000      	.short	0x2000
     190:	10d8      	asrs	r0, r3, #3
     192:	2000      	.short	0x2000
     194:	125c      	asrs	r4, r3, #9
     196:	2000      	.short	0x2000
     198:	1258      	asrs	r0, r3, #9
     19a:	2000      	.short	0x2000
     19c:	001c      	movs	r4, r3
     19e:	2000      	.short	0x2000
     1a0:	05f0      	lsls	r0, r6, #23
     1a2:	2000      	movs	r0, #0

000001a4 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__>:
	initGlobals(&currentGlobals, 0); //set globals to factory defaults. both of these will change once the eeprom is implemented. 
	///for current testing, these will stay in here. 

}

// the loop function runs over and over again until power down or reset
     1a4:	4a02      	ldr	r2, [pc, #8]	; (1b0 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xc>)
     1a6:	4903      	.short	0x4903
     1a8:	4803      	ldr	r0, [pc, #12]	; (1b8 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0x14>)
     1aa:	f002 bbc1 	b.w	2930 <__aeabi_atexit>
     1ae:	bf00      	nop
     1b0:	200005b0 	.word	0x200005b0
     1b4:	0000007d 	.word	0x0000007d
     1b8:	200005b4 	.word	0x200005b4

000001bc <initBank(Pattern volatile*)>:
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
		currentInitPattern->trackPlayMode[i] = 0x01;
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     1bc:	2200      	movs	r2, #0

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     1be:	f04f 0c02 	mov.w	ip, #2
     1c2:	2107      	movs	r1, #7
		currentInitPattern->trackPlayMode[i] = 0x01;
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     1c4:	4613      	mov	r3, r2
// 

#include "globalVariables.h"

void initBank(volatile Pattern* currentInitPattern)
{
     1c6:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     1c8:	2501      	movs	r5, #1
		currentInitPattern->trackPlayMode[i] = 0x01;
		currentInitPattern->envelopeType[i] = 3;
     1ca:	2403      	movs	r4, #3

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     1cc:	f04f 0e04 	mov.w	lr, #4
     1d0:	2705      	movs	r7, #5
     1d2:	2606      	movs	r6, #6
     1d4:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
		currentInitPattern->trackPlayMode[i] = 0x01;
     1d8:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		currentInitPattern->envelopeType[i] = 3;
     1dc:	f880 40eb 	strb.w	r4, [r0, #235]	; 0xeb
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     1e0:	f880 20db 	strb.w	r2, [r0, #219]	; 0xdb
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     1e4:	f880 20cb 	strb.w	r2, [r0, #203]	; 0xcb

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     1e8:	f880 c0a9 	strb.w	ip, [r0, #169]	; 0xa9
     1ec:	f04f 0c08 	mov.w	ip, #8
		currentInitPattern->trackPlayMode[i] = 0x01;
     1f0:	f880 5089 	strb.w	r5, [r0, #137]	; 0x89
		currentInitPattern->envelopeType[i] = 3;
     1f4:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     1f8:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     1fc:	f880 20cc 	strb.w	r2, [r0, #204]	; 0xcc

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     200:	f880 40aa 	strb.w	r4, [r0, #170]	; 0xaa
		currentInitPattern->trackPlayMode[i] = 0x01;
     204:	f880 508a 	strb.w	r5, [r0, #138]	; 0x8a
		currentInitPattern->envelopeType[i] = 3;
     208:	f880 40ed 	strb.w	r4, [r0, #237]	; 0xed
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     20c:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     210:	f880 20cd 	strb.w	r2, [r0, #205]	; 0xcd

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     214:	f880 e0ab 	strb.w	lr, [r0, #171]	; 0xab
     218:	f04f 0e09 	mov.w	lr, #9
		currentInitPattern->trackPlayMode[i] = 0x01;
     21c:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
		currentInitPattern->envelopeType[i] = 3;
     220:	f880 40ee 	strb.w	r4, [r0, #238]	; 0xee
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     224:	f880 20de 	strb.w	r2, [r0, #222]	; 0xde
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     228:	f880 20ce 	strb.w	r2, [r0, #206]	; 0xce

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     22c:	f880 70ac 	strb.w	r7, [r0, #172]	; 0xac
     230:	270a      	movs	r7, #10
		currentInitPattern->trackPlayMode[i] = 0x01;
     232:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
		currentInitPattern->envelopeType[i] = 3;
     236:	f880 40ef 	strb.w	r4, [r0, #239]	; 0xef
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     23a:	f880 20df 	strb.w	r2, [r0, #223]	; 0xdf
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     23e:	f880 20cf 	strb.w	r2, [r0, #207]	; 0xcf

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     242:	f880 60ad 	strb.w	r6, [r0, #173]	; 0xad
     246:	260b      	movs	r6, #11
		currentInitPattern->trackPlayMode[i] = 0x01;
     248:	f880 508d 	strb.w	r5, [r0, #141]	; 0x8d
		currentInitPattern->envelopeType[i] = 3;
     24c:	f880 40f0 	strb.w	r4, [r0, #240]	; 0xf0
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     250:	f880 20e0 	strb.w	r2, [r0, #224]	; 0xe0
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     254:	f880 20d0 	strb.w	r2, [r0, #208]	; 0xd0

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     258:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
     25c:	210c      	movs	r1, #12
		currentInitPattern->trackPlayMode[i] = 0x01;
     25e:	f880 508e 	strb.w	r5, [r0, #142]	; 0x8e
		currentInitPattern->envelopeType[i] = 3;
     262:	f880 40f1 	strb.w	r4, [r0, #241]	; 0xf1
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     266:	f880 20e1 	strb.w	r2, [r0, #225]	; 0xe1
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     26a:	f880 20d1 	strb.w	r2, [r0, #209]	; 0xd1

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     26e:	f880 c0af 	strb.w	ip, [r0, #175]	; 0xaf
     272:	f04f 0c0d 	mov.w	ip, #13
		currentInitPattern->trackPlayMode[i] = 0x01;
     276:	f880 508f 	strb.w	r5, [r0, #143]	; 0x8f
		currentInitPattern->envelopeType[i] = 3;
     27a:	f880 40f2 	strb.w	r4, [r0, #242]	; 0xf2
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     27e:	f880 20e2 	strb.w	r2, [r0, #226]	; 0xe2
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     282:	f880 20d2 	strb.w	r2, [r0, #210]	; 0xd2

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     286:	f880 e0b0 	strb.w	lr, [r0, #176]	; 0xb0
     28a:	f04f 0e0e 	mov.w	lr, #14
		currentInitPattern->trackPlayMode[i] = 0x01;
     28e:	f880 5090 	strb.w	r5, [r0, #144]	; 0x90
		currentInitPattern->envelopeType[i] = 3;
     292:	f880 40f3 	strb.w	r4, [r0, #243]	; 0xf3
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     296:	f880 20e3 	strb.w	r2, [r0, #227]	; 0xe3
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     29a:	f880 20d3 	strb.w	r2, [r0, #211]	; 0xd3

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     29e:	f880 70b1 	strb.w	r7, [r0, #177]	; 0xb1
     2a2:	270f      	movs	r7, #15
		currentInitPattern->trackPlayMode[i] = 0x01;
     2a4:	f880 5091 	strb.w	r5, [r0, #145]	; 0x91
		currentInitPattern->envelopeType[i] = 3;
     2a8:	f880 40f4 	strb.w	r4, [r0, #244]	; 0xf4
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     2ac:	f880 20e4 	strb.w	r2, [r0, #228]	; 0xe4
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     2b0:	f880 20d4 	strb.w	r2, [r0, #212]	; 0xd4

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     2b4:	f880 60b2 	strb.w	r6, [r0, #178]	; 0xb2
     2b8:	2610      	movs	r6, #16
		currentInitPattern->trackPlayMode[i] = 0x01;
     2ba:	f880 5092 	strb.w	r5, [r0, #146]	; 0x92
		currentInitPattern->envelopeType[i] = 3;
     2be:	f880 40f5 	strb.w	r4, [r0, #245]	; 0xf5
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     2c2:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     2c6:	f880 20d5 	strb.w	r2, [r0, #213]	; 0xd5

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     2ca:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
		currentInitPattern->trackSustainTimeMSB[i] = 0;
	}

	for (uint8_t j = 0; j < 64; j++)
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     2ce:	4611      	mov	r1, r2
void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
		currentInitPattern->trackPlayMode[i] = 0x01;
     2d0:	f880 5093 	strb.w	r5, [r0, #147]	; 0x93
		currentInitPattern->envelopeType[i] = 3;
     2d4:	f880 40f6 	strb.w	r4, [r0, #246]	; 0xf6
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     2d8:	f880 20e6 	strb.w	r2, [r0, #230]	; 0xe6
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     2dc:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     2e0:	f880 c0b4 	strb.w	ip, [r0, #180]	; 0xb4
		currentInitPattern->trackPlayMode[i] = 0x01;
     2e4:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
		currentInitPattern->envelopeType[i] = 3;
     2e8:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     2ec:	f880 20e7 	strb.w	r2, [r0, #231]	; 0xe7
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     2f0:	f880 20d7 	strb.w	r2, [r0, #215]	; 0xd7

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     2f4:	f880 e0b5 	strb.w	lr, [r0, #181]	; 0xb5
		currentInitPattern->trackPlayMode[i] = 0x01;
     2f8:	f880 5095 	strb.w	r5, [r0, #149]	; 0x95
		currentInitPattern->envelopeType[i] = 3;
     2fc:	f880 40f8 	strb.w	r4, [r0, #248]	; 0xf8
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     300:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     304:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     308:	f880 70b6 	strb.w	r7, [r0, #182]	; 0xb6
		currentInitPattern->trackPlayMode[i] = 0x01;
     30c:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
		currentInitPattern->envelopeType[i] = 3;
     310:	f880 40f9 	strb.w	r4, [r0, #249]	; 0xf9
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     314:	f880 20e9 	strb.w	r2, [r0, #233]	; 0xe9
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     318:	f880 20d9 	strb.w	r2, [r0, #217]	; 0xd9

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     31c:	f880 60b7 	strb.w	r6, [r0, #183]	; 0xb7
		currentInitPattern->trackPlayMode[i] = 0x01;
     320:	f880 5097 	strb.w	r5, [r0, #151]	; 0x97
		currentInitPattern->envelopeType[i] = 3;
     324:	f880 40fa 	strb.w	r4, [r0, #250]	; 0xfa
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     328:	f880 20ea 	strb.w	r2, [r0, #234]	; 0xea
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     32c:	f880 20da 	strb.w	r2, [r0, #218]	; 0xda
	}

	for (uint8_t j = 0; j < 64; j++)
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     330:	f103 027c 	add.w	r2, r3, #124	; 0x7c
     334:	3301      	adds	r3, #1
     336:	eb00 0242 	add.w	r2, r0, r2, lsl #1
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
		currentInitPattern->trackSustainTimeMSB[i] = 0;
	}

	for (uint8_t j = 0; j < 64; j++)
     33a:	2b40      	cmp	r3, #64	; 0x40
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     33c:	8091      	strh	r1, [r2, #4]
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
		currentInitPattern->trackSustainTimeMSB[i] = 0;
	}

	for (uint8_t j = 0; j < 64; j++)
     33e:	d1f7      	bne.n	330 <initBank(Pattern volatile*)+0x174>
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 

	}
	//We need to take these and put them in global. 
	currentInitPattern->patternBPM = 120;
     340:	2278      	movs	r2, #120	; 0x78
	currentInitPattern->numSteps = 16;
     342:	2310      	movs	r3, #16
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 

	}
	//We need to take these and put them in global. 
	currentInitPattern->patternBPM = 120;
     344:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
	currentInitPattern->numSteps = 16;
     348:	f880 30ca 	strb.w	r3, [r0, #202]	; 0xca
     34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     34e:	bf00      	nop

00000350 <initGlobals(Globals volatile*, unsigned char)>:
}
void initGlobals(volatile Globals* currentGlobals, uint8_t factoryReset)
{
	currentGlobals->currentTrigButtons = 0; //current state of Trig buttons.
     350:	2300      	movs	r3, #0
	currentGlobals->releaseCounter = 0;
	currentGlobals->lastGlobalTimer = 0;
	currentGlobals->clockCounter = 0;
	currentGlobals->currentTrigSequencer = 0;
	currentGlobals->currentTrigMidi = 0;
	if (factoryReset == 1)
     352:	2901      	cmp	r1, #1
	currentInitPattern->patternBPM = 120;
	currentInitPattern->numSteps = 16;
}
void initGlobals(volatile Globals* currentGlobals, uint8_t factoryReset)
{
	currentGlobals->currentTrigButtons = 0; //current state of Trig buttons.
     354:	8003      	strh	r3, [r0, #0]
	currentGlobals->currentGPButtons = 0; //current state of GP buttons
     356:	7083      	strb	r3, [r0, #2]
	currentGlobals->currentPatternNumber = 0; //current pattern, between 1 and 256
     358:	7203      	strb	r3, [r0, #8]
	currentGlobals->currentStep = 0; // current step in the sequencer
     35a:	7243      	strb	r3, [r0, #9]
	currentGlobals->currentTrack = 0; //current track being edited
     35c:	7283      	strb	r3, [r0, #10]
	currentGlobals->menuState = 0; //where the menu is currently
     35e:	72c3      	strb	r3, [r0, #11]
	currentGlobals->playState = 0; //whether the sequencer is playing, stopped, or paused.
     360:	7303      	strb	r3, [r0, #12]
	currentGlobals->factoryReset = 0; //we may not need this in this struct, but good to have for now.
     362:	7343      	strb	r3, [r0, #13]
	currentGlobals->buttonSwitchFlag = 0; // could be rolled into value bits.
     364:	7383      	strb	r3, [r0, #14]
	currentGlobals->valueChangeFlag = 0; //bit 0 -> changes in encoders, bit 1-> changes in buttons, bit2 -> changes in knobs
     366:	73c3      	strb	r3, [r0, #15]
	currentGlobals->knobStatus = 0; //top 4 bits: knob type, bottom 4 bits: knob location.
     368:	7403      	strb	r3, [r0, #16]
	currentGlobals->releaseCounter = 0;
     36a:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	currentGlobals->lastGlobalTimer = 0;
     36e:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
	currentGlobals->clockCounter = 0;
     372:	f8a0 30f0 	strh.w	r3, [r0, #240]	; 0xf0
	currentGlobals->currentTrigSequencer = 0;
     376:	8083      	strh	r3, [r0, #4]
	currentGlobals->currentTrigMidi = 0;
     378:	80c3      	strh	r3, [r0, #6]
	if (factoryReset == 1)
     37a:	d000      	beq.n	37e <initGlobals(Globals volatile*, unsigned char)+0x2e>
     37c:	4770      	bx	lr
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
     37e:	2224      	movs	r2, #36	; 0x24
	currentGlobals->clockCounter = 0;
	currentGlobals->currentTrigSequencer = 0;
	currentGlobals->currentTrigMidi = 0;
	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
     380:	7443      	strb	r3, [r0, #17]
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
     382:	212a      	movs	r1, #42	; 0x2a
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
     384:	232c      	movs	r3, #44	; 0x2c
	currentGlobals->currentTrigSequencer = 0;
	currentGlobals->currentTrigMidi = 0;
	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
     386:	7482      	strb	r2, [r0, #18]
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
     388:	222b      	movs	r2, #43	; 0x2b
	//We need to take these and put them in global. 
	currentInitPattern->patternBPM = 120;
	currentInitPattern->numSteps = 16;
}
void initGlobals(volatile Globals* currentGlobals, uint8_t factoryReset)
{
     38a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
     38c:	2726      	movs	r7, #38	; 0x26
		currentGlobals->midiTrackNote[3] = 0x27;
     38e:	2627      	movs	r6, #39	; 0x27
		currentGlobals->midiTrackNote[4] = 0x28;
     390:	2528      	movs	r5, #40	; 0x28
		currentGlobals->midiTrackNote[5] = 0x29;
     392:	2429      	movs	r4, #41	; 0x29
	currentGlobals->currentTrigMidi = 0;
	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
     394:	f04f 0e25 	mov.w	lr, #37	; 0x25
     398:	f880 e013 	strb.w	lr, [r0, #19]
		currentGlobals->midiTrackNote[2] = 0x26;
     39c:	7507      	strb	r7, [r0, #20]
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
     39e:	272d      	movs	r7, #45	; 0x2d
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
     3a0:	7546      	strb	r6, [r0, #21]
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
     3a2:	262e      	movs	r6, #46	; 0x2e
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
     3a4:	7585      	strb	r5, [r0, #22]
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
     3a6:	252f      	movs	r5, #47	; 0x2f
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
     3a8:	75c4      	strb	r4, [r0, #23]
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
     3aa:	2430      	movs	r4, #48	; 0x30
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
     3ac:	7601      	strb	r1, [r0, #24]
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
		currentGlobals->midiTrackNote[13] = 0x31;
     3ae:	2131      	movs	r1, #49	; 0x31
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
     3b0:	7642      	strb	r2, [r0, #25]
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
		currentGlobals->midiTrackNote[13] = 0x31;
		currentGlobals->midiTrackNote[14] = 0x32;
     3b2:	2232      	movs	r2, #50	; 0x32
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
     3b4:	7683      	strb	r3, [r0, #26]
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
		currentGlobals->midiTrackNote[13] = 0x31;
		currentGlobals->midiTrackNote[14] = 0x32;
		currentGlobals->midiTrackNote[15] = 0x33;
     3b6:	2333      	movs	r3, #51	; 0x33
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
     3b8:	76c7      	strb	r7, [r0, #27]
		currentGlobals->midiTrackNote[10] = 0x2e;
     3ba:	7706      	strb	r6, [r0, #28]
		currentGlobals->midiTrackNote[11] = 0x2f;
     3bc:	7745      	strb	r5, [r0, #29]
		currentGlobals->midiTrackNote[12] = 0x30;
     3be:	7784      	strb	r4, [r0, #30]
		currentGlobals->midiTrackNote[13] = 0x31;
     3c0:	77c1      	strb	r1, [r0, #31]
		currentGlobals->midiTrackNote[14] = 0x32;
     3c2:	f880 2020 	strb.w	r2, [r0, #32]
		currentGlobals->midiTrackNote[15] = 0x33;
     3c6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
     3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000003cc <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
     3cc:	4804      	ldr	r0, [pc, #16]	; (3e0 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x14>)
     3ce:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     3d0:	4411      	add	r1, r2
     3d2:	e001      	b.n	3d8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xc>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     3d4:	4299      	cmp	r1, r3
     3d6:	d302      	bcc.n	3de <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>
     3d8:	6803      	ldr	r3, [r0, #0]
     3da:	429a      	cmp	r2, r3
     3dc:	d9fa      	bls.n	3d4 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x8>
     3de:	4770      	bx	lr
     3e0:	200012ac 	.word	0x200012ac

000003e4 <VisualMicroDebug::DBG_Millis()>:
     3e4:	4b01      	ldr	r3, [pc, #4]	; (3ec <VisualMicroDebug::DBG_Millis()+0x8>)
     3e6:	6818      	ldr	r0, [r3, #0]
}
#else
unsigned long VisualMicroDebug::DBG_Millis()
{
	return millis();
}
     3e8:	4770      	bx	lr
     3ea:	bf00      	nop
     3ec:	200012ac 	.word	0x200012ac

000003f0 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>:
     3f0:	4b21      	ldr	r3, [pc, #132]	; (478 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x88>)
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
     3f2:	6882      	ldr	r2, [r0, #8]
     3f4:	681b      	ldr	r3, [r3, #0]
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
     3f6:	b510      	push	{r4, lr}
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
     3f8:	2400      	movs	r4, #0
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
     3fa:	b082      	sub	sp, #8
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
     3fc:	6101      	str	r1, [r0, #16]
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
     3fe:	60c2      	str	r2, [r0, #12]
	BreakStartMillis = DBG_Millis();
     400:	6083      	str	r3, [r0, #8]
{
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
     402:	6144      	str	r4, [r0, #20]
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
     404:	f001 fb60 	bl	1ac8 <usb_serial_peekchar>
void VisualMicroDebug::digitalWriteMessageCheck()
{
	char nxtChar = peek();
	char pinStr[4];
	char pinCharRead = 0;
	if (nxtChar == 'd') {
     408:	b2c0      	uxtb	r0, r0
     40a:	2864      	cmp	r0, #100	; 0x64
     40c:	d001      	beq.n	412 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x22>
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
	BreakStartMillis = DBG_Millis();
	digitalWriteMessageCheck();
}
     40e:	b002      	add	sp, #8
     410:	bd10      	pop	{r4, pc}
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
     412:	f001 fbf9 	bl	1c08 <usb_serial_getchar>
     416:	f001 fbf7 	bl	1c08 <usb_serial_getchar>
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
     41a:	b2c0      	uxtb	r0, r0
	char pinCharRead = 0;
	if (nxtChar == 'd') {
		// Read Our message back -> dxxxx:1 where xxxxx is the pin number (must be a number!)
		read(); // Remove d
		char nxt = read();
		while (nxt != ':') {
     41c:	283a      	cmp	r0, #58	; 0x3a
     41e:	d00a      	beq.n	436 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x46>
			pinStr[pinCharRead] = nxt;
     420:	ab02      	add	r3, sp, #8
     422:	fa53 f384 	uxtab	r3, r3, r4
     426:	3401      	adds	r4, #1
     428:	f803 0c04 	strb.w	r0, [r3, #-4]
     42c:	f001 fbec 	bl	1c08 <usb_serial_getchar>
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
     430:	b2c0      	uxtb	r0, r0
	char pinCharRead = 0;
	if (nxtChar == 'd') {
		// Read Our message back -> dxxxx:1 where xxxxx is the pin number (must be a number!)
		read(); // Remove d
		char nxt = read();
		while (nxt != ':') {
     432:	283a      	cmp	r0, #58	; 0x3a
     434:	d1f4      	bne.n	420 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x30>
			pinStr[pinCharRead] = nxt;
			pinCharRead++;
			nxt = read();
		}
		int pin = atoi(pinStr);	// at : so skip and read state char
     436:	a801      	add	r0, sp, #4
     438:	f002 fa80 	bl	293c <atoi>
     43c:	4604      	mov	r4, r0
     43e:	f001 fbe3 	bl	1c08 <usb_serial_getchar>
		int state = read() - 48;
     442:	b2c0      	uxtb	r0, r0
     444:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
     448:	2901      	cmp	r1, #1
     44a:	d802      	bhi.n	452 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x62>
     44c:	e00e      	b.n	46c <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x7c>
			digitalWrite(pin, state);
		}
		while (nxt != '\n' && nxt != '\r') {
     44e:	280d      	cmp	r0, #13
     450:	d004      	beq.n	45c <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x6c>
     452:	f001 fbd9 	bl	1c08 <usb_serial_getchar>
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
     456:	b2c0      	uxtb	r0, r0
		int pin = atoi(pinStr);	// at : so skip and read state char
		int state = read() - 48;
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
			digitalWrite(pin, state);
		}
		while (nxt != '\n' && nxt != '\r') {
     458:	280a      	cmp	r0, #10
     45a:	d1f8      	bne.n	44e <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x5e>
        virtual int peek() { return usb_serial_peekchar(); }
     45c:	f001 fb34 	bl	1ac8 <usb_serial_peekchar>
			nxt = read();
		}
		if (peek() == '\n') {
     460:	b2c0      	uxtb	r0, r0
     462:	280a      	cmp	r0, #10
     464:	d1d3      	bne.n	40e <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x1e>
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
     466:	f001 fbcf 	bl	1c08 <usb_serial_getchar>
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
	BreakStartMillis = DBG_Millis();
	digitalWriteMessageCheck();
}
     46a:	e7d0      	b.n	40e <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x1e>
			nxt = read();
		}
		int pin = atoi(pinStr);	// at : so skip and read state char
		int state = read() - 48;
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
			digitalWrite(pin, state);
     46c:	b2c9      	uxtb	r1, r1
     46e:	b2e0      	uxtb	r0, r4
     470:	f000 f9c6 	bl	800 <digitalWrite>
     474:	e7ed      	b.n	452 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x62>
     476:	bf00      	nop
     478:	200012ac 	.word	0x200012ac

0000047c <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>:
		}
	}
}

void VisualMicroDebug::OnBreakPointPrintBegin(uint8_t breakpoint_id)
{
     47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     480:	4b19      	ldr	r3, [pc, #100]	; (4e8 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x6c>)
     482:	460e      	mov	r6, r1
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     484:	4c19      	ldr	r4, [pc, #100]	; (4ec <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x70>)
     486:	4605      	mov	r5, r0
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     488:	2106      	movs	r1, #6
     48a:	4819      	ldr	r0, [pc, #100]	; (4f0 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x74>)
     48c:	681f      	ldr	r7, [r3, #0]
     48e:	f001 fbe1 	bl	1c54 <usb_serial_write>
     492:	4631      	mov	r1, r6
     494:	2300      	movs	r3, #0
     496:	220a      	movs	r2, #10
     498:	4620      	mov	r0, r4
     49a:	f001 fcd5 	bl	1e48 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     49e:	4e15      	ldr	r6, [pc, #84]	; (4f4 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x78>)
     4a0:	2103      	movs	r1, #3
     4a2:	4815      	ldr	r0, [pc, #84]	; (4f8 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x7c>)
     4a4:	f001 fbd6 	bl	1c54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     4a8:	4639      	mov	r1, r7
     4aa:	2300      	movs	r3, #0
     4ac:	220a      	movs	r2, #10
     4ae:	4620      	mov	r0, r4
     4b0:	f001 fcca 	bl	1e48 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     4b4:	4630      	mov	r0, r6
     4b6:	2101      	movs	r1, #1
     4b8:	f001 fbcc 	bl	1c54 <usb_serial_write>
     4bc:	68a9      	ldr	r1, [r5, #8]
     4be:	2300      	movs	r3, #0
     4c0:	220a      	movs	r2, #10
     4c2:	1a79      	subs	r1, r7, r1
     4c4:	4620      	mov	r0, r4
     4c6:	f001 fcbf 	bl	1e48 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     4ca:	4630      	mov	r0, r6
     4cc:	2101      	movs	r1, #1
     4ce:	f001 fbc1 	bl	1c54 <usb_serial_write>
     4d2:	68ae      	ldr	r6, [r5, #8]
     4d4:	68e9      	ldr	r1, [r5, #12]
     4d6:	4620      	mov	r0, r4
     4d8:	2300      	movs	r3, #0
     4da:	220a      	movs	r2, #10
     4dc:	1a71      	subs	r1, r6, r1
	VM_DEBUGGER_SOFT_TRANSPORT.print((m - BreakStartMillis));
	VM_DEBUGGER_SOFT_TRANSPORT.print(":");
	//millis since last bp was hit
	VM_DEBUGGER_SOFT_TRANSPORT.print((BreakStartMillis - BreakPrevMillis));
#endif
}
     4de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     4e2:	f001 bcb1 	b.w	1e48 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     4e6:	bf00      	nop
     4e8:	200012ac 	.word	0x200012ac
     4ec:	200005f0 	.word	0x200005f0
     4f0:	20000020 	.word	0x20000020
     4f4:	2000002c 	.word	0x2000002c
     4f8:	20000028 	.word	0x20000028

000004fc <VisualMicroDebug::OnBreakPointPrintEnd()>:
void VisualMicroDebug::OnBreakPointPrintEnd()
{
     4fc:	b508      	push	{r3, lr}
     4fe:	2106      	movs	r1, #6
     500:	4803      	ldr	r0, [pc, #12]	; (510 <VisualMicroDebug::OnBreakPointPrintEnd()+0x14>)
     502:	f001 fba7 	bl	1c54 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     506:	4803      	ldr	r0, [pc, #12]	; (514 <VisualMicroDebug::OnBreakPointPrintEnd()+0x18>)
#else
	VM_DEBUGGER_SOFT_TRANSPORT.println("_VMDPE");
#endif

#endif
}
     508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     50c:	f001 bc8c 	b.w	1e28 <Print::println()>
     510:	20000030 	.word	0x20000030
     514:	200005f0 	.word	0x200005f0

00000518 <VisualMicroDebug::OnBreakPointEnd()>:

void VisualMicroDebug::OnBreakPointEnd()
{
     518:	b530      	push	{r4, r5, lr}
     51a:	b083      	sub	sp, #12
     51c:	4605      	mov	r5, r0
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
     51e:	f001 fad3 	bl	1ac8 <usb_serial_peekchar>
void VisualMicroDebug::digitalWriteMessageCheck()
{
	char nxtChar = peek();
	char pinStr[4];
	char pinCharRead = 0;
	if (nxtChar == 'd') {
     522:	b2c0      	uxtb	r0, r0
     524:	2864      	cmp	r0, #100	; 0x64
     526:	d004      	beq.n	532 <VisualMicroDebug::OnBreakPointEnd()+0x1a>
     528:	4b1b      	ldr	r3, [pc, #108]	; (598 <VisualMicroDebug::OnBreakPointEnd()+0x80>)
     52a:	681b      	ldr	r3, [r3, #0]

void VisualMicroDebug::OnBreakPointEnd()
{
	digitalWriteMessageCheck(); // Check for Digital Pin
	//update millis to now. ensure time taken for debug doesn't affect comparison of the time to the next point
	BreakStartMillis = DBG_Millis();
     52c:	60ab      	str	r3, [r5, #8]

}
     52e:	b003      	add	sp, #12
     530:	bd30      	pop	{r4, r5, pc}
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
     532:	f001 fb69 	bl	1c08 <usb_serial_getchar>
     536:	f001 fb67 	bl	1c08 <usb_serial_getchar>
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
     53a:	b2c0      	uxtb	r0, r0
	char pinCharRead = 0;
	if (nxtChar == 'd') {
		// Read Our message back -> dxxxx:1 where xxxxx is the pin number (must be a number!)
		read(); // Remove d
		char nxt = read();
		while (nxt != ':') {
     53c:	283a      	cmp	r0, #58	; 0x3a
     53e:	d00b      	beq.n	558 <VisualMicroDebug::OnBreakPointEnd()+0x40>
     540:	2400      	movs	r4, #0
			pinStr[pinCharRead] = nxt;
     542:	ab02      	add	r3, sp, #8
     544:	fa53 f384 	uxtab	r3, r3, r4
     548:	3401      	adds	r4, #1
     54a:	f803 0c04 	strb.w	r0, [r3, #-4]
     54e:	f001 fb5b 	bl	1c08 <usb_serial_getchar>
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
     552:	b2c0      	uxtb	r0, r0
	char pinCharRead = 0;
	if (nxtChar == 'd') {
		// Read Our message back -> dxxxx:1 where xxxxx is the pin number (must be a number!)
		read(); // Remove d
		char nxt = read();
		while (nxt != ':') {
     554:	283a      	cmp	r0, #58	; 0x3a
     556:	d1f4      	bne.n	542 <VisualMicroDebug::OnBreakPointEnd()+0x2a>
			pinStr[pinCharRead] = nxt;
			pinCharRead++;
			nxt = read();
		}
		int pin = atoi(pinStr);	// at : so skip and read state char
     558:	a801      	add	r0, sp, #4
     55a:	f002 f9ef 	bl	293c <atoi>
     55e:	4604      	mov	r4, r0
     560:	f001 fb52 	bl	1c08 <usb_serial_getchar>
		int state = read() - 48;
     564:	b2c0      	uxtb	r0, r0
     566:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
     56a:	2901      	cmp	r1, #1
     56c:	d802      	bhi.n	574 <VisualMicroDebug::OnBreakPointEnd()+0x5c>
     56e:	e00e      	b.n	58e <VisualMicroDebug::OnBreakPointEnd()+0x76>
			digitalWrite(pin, state);
		}
		while (nxt != '\n' && nxt != '\r') {
     570:	280d      	cmp	r0, #13
     572:	d004      	beq.n	57e <VisualMicroDebug::OnBreakPointEnd()+0x66>
     574:	f001 fb48 	bl	1c08 <usb_serial_getchar>
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
     578:	b2c0      	uxtb	r0, r0
		int pin = atoi(pinStr);	// at : so skip and read state char
		int state = read() - 48;
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
			digitalWrite(pin, state);
		}
		while (nxt != '\n' && nxt != '\r') {
     57a:	280a      	cmp	r0, #10
     57c:	d1f8      	bne.n	570 <VisualMicroDebug::OnBreakPointEnd()+0x58>
        virtual int peek() { return usb_serial_peekchar(); }
     57e:	f001 faa3 	bl	1ac8 <usb_serial_peekchar>
			nxt = read();
		}
		if (peek() == '\n') {
     582:	b2c0      	uxtb	r0, r0
     584:	280a      	cmp	r0, #10
     586:	d1cf      	bne.n	528 <VisualMicroDebug::OnBreakPointEnd()+0x10>
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
     588:	f001 fb3e 	bl	1c08 <usb_serial_getchar>
     58c:	e7cc      	b.n	528 <VisualMicroDebug::OnBreakPointEnd()+0x10>
			nxt = read();
		}
		int pin = atoi(pinStr);	// at : so skip and read state char
		int state = read() - 48;
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
			digitalWrite(pin, state);
     58e:	b2c9      	uxtb	r1, r1
     590:	b2e0      	uxtb	r0, r4
     592:	f000 f935 	bl	800 <digitalWrite>
     596:	e7ed      	b.n	574 <VisualMicroDebug::OnBreakPointEnd()+0x5c>
     598:	200012ac 	.word	0x200012ac

0000059c <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
     59c:	b410      	push	{r4}
     59e:	4a0c      	ldr	r2, [pc, #48]	; (5d0 <VisualMicroDebug::outPacketStart(bool)+0x34>)
     5a0:	4604      	mov	r4, r0
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DBT != VM_DBT_NET_UDP)
	if (!noWait)
     5a2:	b971      	cbnz	r1, 5c2 <VisualMicroDebug::outPacketStart(bool)+0x26>
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
     5a4:	6841      	ldr	r1, [r0, #4]
     5a6:	6813      	ldr	r3, [r2, #0]
     5a8:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
     5aa:	2920      	cmp	r1, #32
     5ac:	d809      	bhi.n	5c2 <VisualMicroDebug::outPacketStart(bool)+0x26>
     5ae:	6810      	ldr	r0, [r2, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     5b0:	f100 0321 	add.w	r3, r0, #33	; 0x21
     5b4:	1a59      	subs	r1, r3, r1
     5b6:	e001      	b.n	5bc <VisualMicroDebug::outPacketStart(bool)+0x20>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     5b8:	4299      	cmp	r1, r3
     5ba:	d302      	bcc.n	5c2 <VisualMicroDebug::outPacketStart(bool)+0x26>
     5bc:	6813      	ldr	r3, [r2, #0]
     5be:	4298      	cmp	r0, r3
     5c0:	d9fa      	bls.n	5b8 <VisualMicroDebug::outPacketStart(bool)+0x1c>
     5c2:	6813      	ldr	r3, [r2, #0]
	transport->beginPacket();
#endif
#endif

	return true;
}
     5c4:	2001      	movs	r0, #1
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
     5c6:	6063      	str	r3, [r4, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
     5c8:	f85d 4b04 	ldr.w	r4, [sp], #4
     5cc:	4770      	bx	lr
     5ce:	bf00      	nop
     5d0:	200012ac 	.word	0x200012ac

000005d4 <VisualMicroDebug::outPacketEnd()>:
     5d4:	4770      	bx	lr
     5d6:	bf00      	nop

000005d8 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
     5d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     5dc:	f000 b8aa 	b.w	734 <delay>

000005e0 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
     5e0:	2300      	movs	r3, #0
     5e2:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
     5e4:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
     5e6:	b141      	cbz	r1, 5fa <VisualMicroDebug::init(unsigned long)+0x1a>
     5e8:	4804      	ldr	r0, [pc, #16]	; (5fc <VisualMicroDebug::init(unsigned long)+0x1c>)
     5ea:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     5ec:	4411      	add	r1, r2
     5ee:	e001      	b.n	5f4 <VisualMicroDebug::init(unsigned long)+0x14>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     5f0:	4299      	cmp	r1, r3
     5f2:	d302      	bcc.n	5fa <VisualMicroDebug::init(unsigned long)+0x1a>
     5f4:	6803      	ldr	r3, [r0, #0]
     5f6:	429a      	cmp	r2, r3
     5f8:	d9fa      	bls.n	5f0 <VisualMicroDebug::init(unsigned long)+0x10>
     5fa:	4770      	bx	lr
     5fc:	200012ac 	.word	0x200012ac

00000600 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
     600:	b570      	push	{r4, r5, r6, lr}
     602:	4605      	mov	r5, r0
     604:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
     606:	b191      	cbz	r1, 62e <VisualMicroDebug::start(bool, bool)+0x2e>
	{
		alwaysBreak = true;
     608:	2301      	movs	r3, #1
     60a:	4c41      	ldr	r4, [pc, #260]	; (710 <VisualMicroDebug::start(bool, bool)+0x110>)
     60c:	7603      	strb	r3, [r0, #24]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     60e:	f001 fa7f 	bl	1b10 <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
     612:	f010 0fff 	tst.w	r0, #255	; 0xff
     616:	d10c      	bne.n	632 <VisualMicroDebug::start(bool, bool)+0x32>
     618:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     61a:	1c51      	adds	r1, r2, #1
     61c:	e001      	b.n	622 <VisualMicroDebug::start(bool, bool)+0x22>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     61e:	4299      	cmp	r1, r3
     620:	d302      	bcc.n	628 <VisualMicroDebug::start(bool, bool)+0x28>
     622:	6823      	ldr	r3, [r4, #0]
     624:	429a      	cmp	r2, r3
     626:	d9fa      	bls.n	61e <VisualMicroDebug::start(bool, bool)+0x1e>
	//console write not working yet
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
     628:	7e2b      	ldrb	r3, [r5, #24]
     62a:	2b00      	cmp	r3, #0
     62c:	d1ef      	bne.n	60e <VisualMicroDebug::start(bool, bool)+0xe>
		while (breakWait(0) != 'c') {
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
     62e:	762e      	strb	r6, [r5, #24]
#endif

}
     630:	bd70      	pop	{r4, r5, r6, pc}
     632:	f001 fa6d 	bl	1b10 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
     636:	f010 0fff 	tst.w	r0, #255	; 0xff
     63a:	d0ed      	beq.n	618 <VisualMicroDebug::start(bool, bool)+0x18>
        virtual int read() { return usb_serial_getchar(); }
     63c:	f001 fae4 	bl	1c08 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
     640:	b2c0      	uxtb	r0, r0
     642:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
     646:	2b1e      	cmp	r3, #30
     648:	d8f3      	bhi.n	632 <VisualMicroDebug::start(bool, bool)+0x32>
     64a:	a201      	add	r2, pc, #4	; (adr r2, 650 <VisualMicroDebug::start(bool, bool)+0x50>)
     64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     650:	0000062f 	.word	0x0000062f
     654:	00000633 	.word	0x00000633
     658:	00000633 	.word	0x00000633
     65c:	00000633 	.word	0x00000633
     660:	00000633 	.word	0x00000633
     664:	00000633 	.word	0x00000633
     668:	00000633 	.word	0x00000633
     66c:	00000633 	.word	0x00000633
     670:	00000633 	.word	0x00000633
     674:	00000633 	.word	0x00000633
     678:	00000633 	.word	0x00000633
     67c:	000006d3 	.word	0x000006d3
     680:	00000633 	.word	0x00000633
     684:	00000633 	.word	0x00000633
     688:	00000633 	.word	0x00000633
     68c:	00000633 	.word	0x00000633
     690:	0000062f 	.word	0x0000062f
     694:	00000633 	.word	0x00000633
     698:	00000633 	.word	0x00000633
     69c:	00000633 	.word	0x00000633
     6a0:	00000633 	.word	0x00000633
     6a4:	00000633 	.word	0x00000633
     6a8:	00000633 	.word	0x00000633
     6ac:	00000633 	.word	0x00000633
     6b0:	00000633 	.word	0x00000633
     6b4:	0000062f 	.word	0x0000062f
     6b8:	00000633 	.word	0x00000633
     6bc:	00000633 	.word	0x00000633
     6c0:	00000633 	.word	0x00000633
     6c4:	00000633 	.word	0x00000633
     6c8:	000006cd 	.word	0x000006cd
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
     6cc:	2863      	cmp	r0, #99	; 0x63
     6ce:	d1a3      	bne.n	618 <VisualMicroDebug::start(bool, bool)+0x18>
     6d0:	e7ad      	b.n	62e <VisualMicroDebug::start(bool, bool)+0x2e>
     6d2:	4c0f      	ldr	r4, [pc, #60]	; (710 <VisualMicroDebug::start(bool, bool)+0x110>)
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     6d4:	2106      	movs	r1, #6
     6d6:	480f      	ldr	r0, [pc, #60]	; (714 <VisualMicroDebug::start(bool, bool)+0x114>)
     6d8:	6823      	ldr	r3, [r4, #0]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
     6da:	606b      	str	r3, [r5, #4]
     6dc:	f001 faba 	bl	1c54 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     6e0:	2300      	movs	r3, #0
     6e2:	220a      	movs	r2, #10
     6e4:	480c      	ldr	r0, [pc, #48]	; (718 <VisualMicroDebug::start(bool, bool)+0x118>)
     6e6:	4619      	mov	r1, r3
     6e8:	f001 fbae 	bl	1e48 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     6ec:	2106      	movs	r1, #6
     6ee:	480b      	ldr	r0, [pc, #44]	; (71c <VisualMicroDebug::start(bool, bool)+0x11c>)
     6f0:	f001 fab0 	bl	1c54 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     6f4:	4808      	ldr	r0, [pc, #32]	; (718 <VisualMicroDebug::start(bool, bool)+0x118>)
     6f6:	f001 fb97 	bl	1e28 <Print::println()>
     6fa:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     6fc:	f102 0132 	add.w	r1, r2, #50	; 0x32
     700:	e001      	b.n	706 <VisualMicroDebug::start(bool, bool)+0x106>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     702:	4299      	cmp	r1, r3
     704:	d393      	bcc.n	62e <VisualMicroDebug::start(bool, bool)+0x2e>
     706:	6823      	ldr	r3, [r4, #0]
     708:	429a      	cmp	r2, r3
     70a:	d9fa      	bls.n	702 <VisualMicroDebug::start(bool, bool)+0x102>
     70c:	e78f      	b.n	62e <VisualMicroDebug::start(bool, bool)+0x2e>
     70e:	bf00      	nop
     710:	200012ac 	.word	0x200012ac
     714:	20000038 	.word	0x20000038
     718:	200005f0 	.word	0x200005f0
     71c:	20000040 	.word	0x20000040

00000720 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
     720:	4b03      	ldr	r3, [pc, #12]	; (730 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
     722:	2200      	movs	r2, #0
     724:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
     726:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
     728:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
     72a:	615a      	str	r2, [r3, #20]
     72c:	4770      	bx	lr
     72e:	bf00      	nop
     730:	2000125c 	.word	0x2000125c

00000734 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     734:	2800      	cmp	r0, #0
     736:	d057      	beq.n	7e8 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     738:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
     73a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     73e:	b085      	sub	sp, #20
     740:	4683      	mov	fp, r0
     742:	4c2a      	ldr	r4, [pc, #168]	; (7ec <delay+0xb8>)
     744:	4d2a      	ldr	r5, [pc, #168]	; (7f0 <delay+0xbc>)
     746:	4e2b      	ldr	r6, [pc, #172]	; (7f4 <delay+0xc0>)
     748:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     74c:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     750:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
     752:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     754:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     758:	2900      	cmp	r1, #0
     75a:	d1f7      	bne.n	74c <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     75c:	4f26      	ldr	r7, [pc, #152]	; (7f8 <delay+0xc4>)
     75e:	e9cd 8902 	strd	r8, r9, [sp, #8]
     762:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     764:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     766:	4a25      	ldr	r2, [pc, #148]	; (7fc <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     768:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     76c:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     76e:	6812      	ldr	r2, [r2, #0]
     770:	2701      	movs	r7, #1
     772:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
     776:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     77a:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
     77c:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     77e:	428b      	cmp	r3, r1
     780:	bf08      	it	eq
     782:	4542      	cmpeq	r2, r8
     784:	bf2c      	ite	cs
     786:	46c2      	movcs	sl, r8
     788:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     78a:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     78e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     792:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     794:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     796:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     79a:	2b00      	cmp	r3, #0
     79c:	d1f7      	bne.n	78e <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     79e:	9801      	ldr	r0, [sp, #4]
     7a0:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     7a2:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     7a4:	4815      	ldr	r0, [pc, #84]	; (7fc <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     7a6:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     7aa:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     7ac:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     7b0:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
     7b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     7b8:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     7bc:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
     7be:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     7c0:	4299      	cmp	r1, r3
     7c2:	bf08      	it	eq
     7c4:	4540      	cmpeq	r0, r8
     7c6:	bf2c      	ite	cs
     7c8:	4643      	movcs	r3, r8
     7ca:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     7cc:	441a      	add	r2, r3
     7ce:	4572      	cmp	r2, lr
     7d0:	d307      	bcc.n	7e2 <delay+0xae>
			if (--msec == 0) return;
     7d2:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
     7d6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
     7da:	d1d8      	bne.n	78e <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
     7dc:	b005      	add	sp, #20
     7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
     7e2:	f001 fb85 	bl	1ef0 <yield>
	}
     7e6:	e7d2      	b.n	78e <delay+0x5a>
     7e8:	4770      	bx	lr
     7ea:	bf00      	nop
     7ec:	2000156c 	.word	0x2000156c
     7f0:	200012ac 	.word	0x200012ac
     7f4:	200012a4 	.word	0x200012a4
     7f8:	e0001004 	.word	0xe0001004
     7fc:	200012a8 	.word	0x200012a8

00000800 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     800:	2836      	cmp	r0, #54	; 0x36
     802:	d80d      	bhi.n	820 <digitalWrite+0x20>
	p = digital_pin_to_info_PGM + pin;
     804:	0100      	lsls	r0, r0, #4
     806:	4b0d      	ldr	r3, [pc, #52]	; (83c <digitalWrite+0x3c>)
     808:	181a      	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
     80a:	581b      	ldr	r3, [r3, r0]
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
{
     80c:	b410      	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
     80e:	68d0      	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     810:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
     812:	4204      	tst	r4, r0
     814:	d005      	beq.n	822 <digitalWrite+0x22>
		// pin is configured for output mode
		if (val) {
     816:	b159      	cbz	r1, 830 <digitalWrite+0x30>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     818:	f85d 4b04 	ldr.w	r4, [sp], #4
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
     81c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     820:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     822:	6893      	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
     824:	b939      	cbnz	r1, 836 <digitalWrite+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     826:	4a06      	ldr	r2, [pc, #24]	; (840 <digitalWrite+0x40>)
     828:	601a      	str	r2, [r3, #0]
		}
	}
}
     82a:	f85d 4b04 	ldr.w	r4, [sp], #4
     82e:	4770      	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
     830:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
     834:	e7f9      	b.n	82a <digitalWrite+0x2a>
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     836:	4a03      	ldr	r2, [pc, #12]	; (844 <digitalWrite+0x44>)
     838:	601a      	str	r2, [r3, #0]
     83a:	e7f6      	b.n	82a <digitalWrite+0x2a>
     83c:	20000090 	.word	0x20000090
     840:	00013038 	.word	0x00013038
     844:	0001f038 	.word	0x0001f038

00000848 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
     848:	2004      	movs	r0, #4
     84a:	4671      	mov	r1, lr
     84c:	4208      	tst	r0, r1
     84e:	d003      	beq.n	858 <_MSP>
     850:	f3ef 8009 	mrs	r0, PSP
     854:	f000 b808 	b.w	868 <HardFault_HandlerC>

00000858 <_MSP>:
     858:	f3ef 8008 	mrs	r0, MSP
     85c:	f000 b804 	b.w	868 <HardFault_HandlerC>

00000860 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
     860:	4770      	bx	lr
     862:	bf00      	nop

00000864 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
     864:	4770      	bx	lr
     866:	bf00      	nop

00000868 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     868:	4b1b      	ldr	r3, [pc, #108]	; (8d8 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     86a:	2105      	movs	r1, #5
     86c:	4a1b      	ldr	r2, [pc, #108]	; (8dc <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     86e:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     870:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     872:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
     876:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     878:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     87c:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     87e:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     880:	4c17      	ldr	r4, [pc, #92]	; (8e0 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     882:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     884:	4817      	ldr	r0, [pc, #92]	; (8e4 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     886:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
     888:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     88c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
     890:	6823      	ldr	r3, [r4, #0]
     892:	4283      	cmp	r3, r0
     894:	d902      	bls.n	89c <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
     896:	4814      	ldr	r0, [pc, #80]	; (8e8 <HardFault_HandlerC+0x80>)
     898:	f001 fc3c 	bl	2114 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     89c:	4d0e      	ldr	r5, [pc, #56]	; (8d8 <HardFault_HandlerC+0x70>)
     89e:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     8a0:	2000      	movs	r0, #0
     8a2:	4a12      	ldr	r2, [pc, #72]	; (8ec <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     8a4:	4912      	ldr	r1, [pc, #72]	; (8f0 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     8a6:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     8aa:	9001      	str	r0, [sp, #4]
     8ac:	9b01      	ldr	r3, [sp, #4]
     8ae:	4293      	cmp	r3, r2
     8b0:	d805      	bhi.n	8be <HardFault_HandlerC+0x56>
     8b2:	9b01      	ldr	r3, [sp, #4]
     8b4:	3301      	adds	r3, #1
     8b6:	9301      	str	r3, [sp, #4]
     8b8:	9b01      	ldr	r3, [sp, #4]
     8ba:	4293      	cmp	r3, r2
     8bc:	d9f9      	bls.n	8b2 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     8be:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     8c2:	9001      	str	r0, [sp, #4]
     8c4:	9b01      	ldr	r3, [sp, #4]
     8c6:	428b      	cmp	r3, r1
     8c8:	d8ed      	bhi.n	8a6 <HardFault_HandlerC+0x3e>
     8ca:	9b01      	ldr	r3, [sp, #4]
     8cc:	3301      	adds	r3, #1
     8ce:	9301      	str	r3, [sp, #4]
     8d0:	9b01      	ldr	r3, [sp, #4]
     8d2:	428b      	cmp	r3, r1
     8d4:	d9f9      	bls.n	8ca <HardFault_HandlerC+0x62>
     8d6:	e7e6      	b.n	8a6 <HardFault_HandlerC+0x3e>
     8d8:	401bc000 	.word	0x401bc000
     8dc:	401f8000 	.word	0x401f8000
     8e0:	20000608 	.word	0x20000608
     8e4:	23c345ff 	.word	0x23c345ff
     8e8:	11e1a300 	.word	0x11e1a300
     8ec:	000f423f 	.word	0x000f423f
     8f0:	0089543f 	.word	0x0089543f

000008f4 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
     8f4:	4a09      	ldr	r2, [pc, #36]	; (91c <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
     8f6:	b508      	push	{r3, lr}
        char *prev = __brkval;
     8f8:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
     8fa:	b120      	cbz	r0, 906 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
     8fc:	4418      	add	r0, r3
     8fe:	4908      	ldr	r1, [pc, #32]	; (920 <_sbrk+0x2c>)
     900:	4288      	cmp	r0, r1
     902:	d802      	bhi.n	90a <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
     904:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
     906:	4618      	mov	r0, r3
     908:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
     90a:	f002 f821 	bl	2950 <__errno>
     90e:	220c      	movs	r2, #12
                        return (void *)-1;
     910:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
     914:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
     916:	4618      	mov	r0, r3
     918:	bd08      	pop	{r3, pc}
     91a:	bf00      	nop
     91c:	200005bc 	.word	0x200005bc
     920:	20280000 	.word	0x20280000

00000924 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
     924:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
     926:	4a06      	ldr	r2, [pc, #24]	; (940 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
     928:	2107      	movs	r1, #7
     92a:	4b06      	ldr	r3, [pc, #24]	; (944 <Panic_Temp_isr+0x20>)
     92c:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
     92e:	6b93      	ldr	r3, [r2, #56]	; 0x38
     930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     934:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
     936:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
     93a:	bf30      	wfi
     93c:	e7fd      	b.n	93a <Panic_Temp_isr+0x16>
     93e:	bf00      	nop
     940:	400d4000 	.word	0x400d4000
     944:	400ac000 	.word	0x400ac000

00000948 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
     948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
     94c:	4ca6      	ldr	r4, [pc, #664]	; (be8 <isr+0x2a0>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
     94e:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
     950:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
     954:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
     958:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
     95c:	f000 808e 	beq.w	a7c <isr+0x134>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
     960:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     964:	2b00      	cmp	r3, #0
     966:	f000 8084 	beq.w	a72 <isr+0x12a>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     96a:	f04f 1a01 	mov.w	sl, #65537	; 0x10001
     96e:	f8df 92b0 	ldr.w	r9, [pc, #688]	; c20 <isr+0x2d8>
     972:	4e9e      	ldr	r6, [pc, #632]	; (bec <isr+0x2a4>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
     974:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     976:	46d3      	mov	fp, sl
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     978:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
     97c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
     97e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
     980:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     984:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     988:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
     98c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     990:	0499      	lsls	r1, r3, #18
     992:	d5f5      	bpl.n	980 <isr+0x38>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
     994:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
     998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     99c:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     9a0:	f8c5 b1b4 	str.w	fp, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
     9a4:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
     9a8:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
     9ac:	d1fa      	bne.n	9a4 <isr+0x5c>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     9ae:	b281      	uxth	r1, r0
     9b0:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
     9b4:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     9b8:	42b9      	cmp	r1, r7
     9ba:	f200 8133 	bhi.w	c24 <isr+0x2dc>
     9be:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
     9c2:	f080 82a4 	bcs.w	f0e <isr+0x5c6>
     9c6:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
     9ca:	f000 81f7 	beq.w	dbc <isr+0x474>
     9ce:	f200 816e 	bhi.w	cae <isr+0x366>
     9d2:	2980      	cmp	r1, #128	; 0x80
     9d4:	f000 81b7 	beq.w	d46 <isr+0x3fe>
     9d8:	2982      	cmp	r1, #130	; 0x82
     9da:	f040 8160 	bne.w	c9e <isr+0x356>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
     9de:	b292      	uxth	r2, r2
     9e0:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
     9e4:	2907      	cmp	r1, #7
     9e6:	f200 815a 	bhi.w	c9e <isr+0x356>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     9ea:	0089      	lsls	r1, r1, #2
     9ec:	4f80      	ldr	r7, [pc, #512]	; (bf0 <isr+0x2a8>)
		reply_buffer[0] = 0;
     9ee:	4881      	ldr	r0, [pc, #516]	; (bf4 <isr+0x2ac>)
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     9f0:	0612      	lsls	r2, r2, #24
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     9f2:	440f      	add	r7, r1
     9f4:	6839      	ldr	r1, [r7, #0]
		reply_buffer[0] = 0;
     9f6:	7003      	strb	r3, [r0, #0]
		reply_buffer[1] = 0;
     9f8:	7043      	strb	r3, [r0, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     9fa:	f140 831b 	bpl.w	1034 <isr+0x6ec>
     9fe:	03cb      	lsls	r3, r1, #15
     a00:	d501      	bpl.n	a06 <isr+0xbe>
			reply_buffer[0] = 1;
     a02:	2301      	movs	r3, #1
     a04:	7003      	strb	r3, [r0, #0]
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     a06:	4a7c      	ldr	r2, [pc, #496]	; (bf8 <isr+0x2b0>)
     a08:	2701      	movs	r7, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     a0a:	4b7c      	ldr	r3, [pc, #496]	; (bfc <isr+0x2b4>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     a0c:	2100      	movs	r1, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     a0e:	6017      	str	r7, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     a10:	6053      	str	r3, [r2, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     a12:	64b2      	str	r2, [r6, #72]	; 0x48
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     a14:	4b7a      	ldr	r3, [pc, #488]	; (c00 <isr+0x2b8>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     a16:	64f1      	str	r1, [r6, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
     a18:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
     a1c:	f503 5780 	add.w	r7, r3, #4096	; 0x1000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     a20:	6090      	str	r0, [r2, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
     a22:	f503 5000 	add.w	r0, r3, #8192	; 0x2000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     a26:	60d3      	str	r3, [r2, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     a28:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
     a2c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
     a30:	6117      	str	r7, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     a32:	6150      	str	r0, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     a34:	6193      	str	r3, [r2, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     a36:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
     a3a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     a3e:	2b00      	cmp	r3, #0
     a40:	d1fb      	bne.n	a3a <isr+0xf2>
	}
	endpoint0_transfer_ack.next = 1;
     a42:	4a70      	ldr	r2, [pc, #448]	; (c04 <isr+0x2bc>)
     a44:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     a46:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
     a48:	60f3      	str	r3, [r6, #12]
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
     a4a:	60b2      	str	r2, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     a4c:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     a4e:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     a50:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
     a54:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     a58:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
     a5a:	ea41 0300 	orr.w	r3, r1, r0
     a5e:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
     a62:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     a66:	2b00      	cmp	r3, #0
     a68:	d1fb      	bne.n	a62 <isr+0x11a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     a6a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     a6e:	2b00      	cmp	r3, #0
     a70:	d182      	bne.n	978 <isr+0x30>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
     a72:	4a5d      	ldr	r2, [pc, #372]	; (be8 <isr+0x2a0>)
     a74:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
     a78:	2b00      	cmp	r3, #0
     a7a:	d150      	bne.n	b1e <isr+0x1d6>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
     a7c:	f018 0f40 	tst.w	r8, #64	; 0x40
     a80:	d018      	beq.n	ab4 <isr+0x16c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     a82:	4b59      	ldr	r3, [pc, #356]	; (be8 <isr+0x2a0>)
     a84:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     a88:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     a8a:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
     a8e:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
     a92:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     a96:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
     a9a:	4b53      	ldr	r3, [pc, #332]	; (be8 <isr+0x2a0>)
     a9c:	2c00      	cmp	r4, #0
     a9e:	d1fa      	bne.n	a96 <isr+0x14e>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
     aa0:	f04f 32ff 	mov.w	r2, #4294967295
     aa4:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
     aa8:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
     aac:	f000 fea8 	bl	1800 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
     ab0:	4b55      	ldr	r3, [pc, #340]	; (c08 <isr+0x2c0>)
     ab2:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
     ab4:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
     ab8:	d003      	beq.n	ac2 <isr+0x17a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
     aba:	4b54      	ldr	r3, [pc, #336]	; (c0c <isr+0x2c4>)
     abc:	681b      	ldr	r3, [r3, #0]
     abe:	b103      	cbz	r3, ac2 <isr+0x17a>
     ac0:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
     ac2:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
     ac6:	d003      	beq.n	ad0 <isr+0x188>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
     ac8:	4b51      	ldr	r3, [pc, #324]	; (c10 <isr+0x2c8>)
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	b103      	cbz	r3, ad0 <isr+0x188>
     ace:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
     ad0:	f018 0f04 	tst.w	r8, #4
     ad4:	d008      	beq.n	ae8 <isr+0x1a0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
     ad6:	4b44      	ldr	r3, [pc, #272]	; (be8 <isr+0x2a0>)
     ad8:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
     adc:	f413 7300 	ands.w	r3, r3, #512	; 0x200
     ae0:	d07f      	beq.n	be2 <isr+0x29a>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
     ae2:	4b4c      	ldr	r3, [pc, #304]	; (c14 <isr+0x2cc>)
     ae4:	2201      	movs	r2, #1
     ae6:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
     ae8:	4b3f      	ldr	r3, [pc, #252]	; (be8 <isr+0x2a0>)
     aea:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
     aee:	0612      	lsls	r2, r2, #24
     af0:	d512      	bpl.n	b18 <isr+0x1d0>
     af2:	f018 0f80 	tst.w	r8, #128	; 0x80
     af6:	d00f      	beq.n	b18 <isr+0x1d0>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
     af8:	4947      	ldr	r1, [pc, #284]	; (c18 <isr+0x2d0>)
     afa:	780a      	ldrb	r2, [r1, #0]
     afc:	b162      	cbz	r2, b18 <isr+0x1d0>
			if (--usb_reboot_timer == 0) {
     afe:	3a01      	subs	r2, #1
     b00:	b2d2      	uxtb	r2, r2
     b02:	700a      	strb	r2, [r1, #0]
     b04:	b942      	cbnz	r2, b18 <isr+0x1d0>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
     b06:	4945      	ldr	r1, [pc, #276]	; (c1c <isr+0x2d4>)
     b08:	780a      	ldrb	r2, [r1, #0]
     b0a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b0e:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
     b10:	2a00      	cmp	r2, #0
     b12:	f000 831b 	beq.w	114c <isr+0x804>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
     b16:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
     b18:	b003      	add	sp, #12
     b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
     b1e:	4940      	ldr	r1, [pc, #256]	; (c20 <isr+0x2d8>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
     b20:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
     b24:	6808      	ldr	r0, [r1, #0]
     b26:	4203      	tst	r3, r0
     b28:	f040 82c7 	bne.w	10ba <isr+0x772>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
     b2c:	4a36      	ldr	r2, [pc, #216]	; (c08 <isr+0x2c0>)
     b2e:	6817      	ldr	r7, [r2, #0]
#if 1
			if (completestatus) {
     b30:	403b      	ands	r3, r7
     b32:	9301      	str	r3, [sp, #4]
     b34:	d0a2      	beq.n	a7c <isr+0x134>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
     b36:	ea5f 4913 	movs.w	r9, r3, lsr #16
     b3a:	d025      	beq.n	b88 <isr+0x240>
     b3c:	4e2b      	ldr	r6, [pc, #172]	; (bec <isr+0x2a4>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
     b3e:	f04f 0a01 	mov.w	sl, #1
     b42:	46b3      	mov	fp, r6
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
     b44:	fa99 f5a9 	rbit	r5, r9
     b48:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
     b4c:	eb0b 17c5 	add.w	r7, fp, r5, lsl #7
     b50:	3740      	adds	r7, #64	; 0x40
};*/

static void run_callbacks(endpoint_t *ep)
{
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
     b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
	if (first == NULL) return;
     b54:	b198      	cbz	r0, b7e <isr+0x236>
     b56:	4602      	mov	r2, r0
     b58:	2400      	movs	r4, #0
     b5a:	e004      	b.n	b66 <isr+0x21e>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
     b5c:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
     b5e:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
     b60:	2a01      	cmp	r2, #1
     b62:	f000 82dd 	beq.w	1120 <isr+0x7d8>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
     b66:	6853      	ldr	r3, [r2, #4]
     b68:	f013 0380 	ands.w	r3, r3, #128	; 0x80
     b6c:	d0f6      	beq.n	b5c <isr+0x214>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
     b6e:	633a      	str	r2, [r7, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     b70:	b12c      	cbz	r4, b7e <isr+0x236>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
     b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
     b74:	6806      	ldr	r6, [r0, #0]
		ep->callback_function(first);
     b76:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     b78:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
     b7a:	4630      	mov	r0, r6
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     b7c:	d1f9      	bne.n	b72 <isr+0x22a>
				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
     b7e:	fa0a f505 	lsl.w	r5, sl, r5
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
     b82:	ea39 0905 	bics.w	r9, r9, r5
     b86:	d1dd      	bne.n	b44 <isr+0x1fc>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
     b88:	f8bd 7004 	ldrh.w	r7, [sp, #4]
				while(rx) {
     b8c:	2f00      	cmp	r7, #0
     b8e:	f43f af75 	beq.w	a7c <isr+0x134>
     b92:	4e16      	ldr	r6, [pc, #88]	; (bec <isr+0x2a4>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
     b94:	f04f 0901 	mov.w	r9, #1
     b98:	46b3      	mov	fp, r6
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
     b9a:	fa97 f5a7 	rbit	r5, r7
     b9e:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
     ba2:	eb0b 1ac5 	add.w	sl, fp, r5, lsl #7
};*/

static void run_callbacks(endpoint_t *ep)
{
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
     ba6:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
	if (first == NULL) return;
     baa:	b1a8      	cbz	r0, bd8 <isr+0x290>
     bac:	4602      	mov	r2, r0
     bae:	2400      	movs	r4, #0
     bb0:	e004      	b.n	bbc <isr+0x274>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
     bb2:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
     bb4:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
     bb6:	2a01      	cmp	r2, #1
     bb8:	f000 82ad 	beq.w	1116 <isr+0x7ce>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
     bbc:	6853      	ldr	r3, [r2, #4]
     bbe:	f013 0380 	ands.w	r3, r3, #128	; 0x80
     bc2:	d0f6      	beq.n	bb2 <isr+0x26a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
     bc4:	f8ca 2030 	str.w	r2, [sl, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     bc8:	b134      	cbz	r4, bd8 <isr+0x290>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
     bca:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
     bce:	6806      	ldr	r6, [r0, #0]
		ep->callback_function(first);
     bd0:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     bd2:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
     bd4:	4630      	mov	r0, r6
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     bd6:	d1f8      	bne.n	bca <isr+0x282>
				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
     bd8:	fa09 f505 	lsl.w	r5, r9, r5
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
     bdc:	43af      	bics	r7, r5
     bde:	d1dc      	bne.n	b9a <isr+0x252>
     be0:	e74c      	b.n	a7c <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
     be2:	4a0c      	ldr	r2, [pc, #48]	; (c14 <isr+0x2cc>)
     be4:	7013      	strb	r3, [r2, #0]
     be6:	e77f      	b.n	ae8 <isr+0x1a0>
     be8:	402e0000 	.word	0x402e0000
     bec:	20003000 	.word	0x20003000
     bf0:	402e01c0 	.word	0x402e01c0
     bf4:	200012e8 	.word	0x200012e8
     bf8:	20002000 	.word	0x20002000
     bfc:	00020080 	.word	0x00020080
     c00:	200022e8 	.word	0x200022e8
     c04:	20002020 	.word	0x20002020
     c08:	200012c8 	.word	0x200012c8
     c0c:	200012c4 	.word	0x200012c4
     c10:	200012d0 	.word	0x200012d0
     c14:	200012d4 	.word	0x200012d4
     c18:	200012dc 	.word	0x200012dc
     c1c:	200012cc 	.word	0x200012cc
     c20:	200012d8 	.word	0x200012d8
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     c24:	f242 0721 	movw	r7, #8225	; 0x2021
     c28:	42b9      	cmp	r1, r7
     c2a:	d034      	beq.n	c96 <isr+0x34e>
     c2c:	d867      	bhi.n	cfe <isr+0x3b6>
     c2e:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
     c32:	f000 8130 	beq.w	e96 <isr+0x54e>
     c36:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
     c3a:	d130      	bne.n	c9e <isr+0x356>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     c3c:	f3c0 4007 	ubfx	r0, r0, #16, #8
     c40:	4ab7      	ldr	r2, [pc, #732]	; (f20 <isr+0x5d8>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     c42:	49b8      	ldr	r1, [pc, #736]	; (f24 <isr+0x5dc>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     c44:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     c46:	4fb8      	ldr	r7, [pc, #736]	; (f28 <isr+0x5e0>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     c48:	4ab8      	ldr	r2, [pc, #736]	; (f2c <isr+0x5e4>)
     c4a:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     c4c:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     c50:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     c54:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
     c58:	f000 fdd4 	bl	1804 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     c5c:	4ab4      	ldr	r2, [pc, #720]	; (f30 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     c5e:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     c60:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     c62:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     c64:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     c66:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     c68:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     c6a:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     c6c:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     c70:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     c74:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
     c76:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
     c7a:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     c7e:	4aad      	ldr	r2, [pc, #692]	; (f34 <isr+0x5ec>)
     c80:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
     c82:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     c86:	2b00      	cmp	r3, #0
     c88:	d1fb      	bne.n	c82 <isr+0x33a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     c8a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     c8e:	2b00      	cmp	r3, #0
     c90:	f47f ae72 	bne.w	978 <isr+0x30>
     c94:	e6ed      	b.n	a72 <isr+0x12a>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
     c96:	0c11      	lsrs	r1, r2, #16
     c98:	2907      	cmp	r1, #7
     c9a:	f000 81cf 	beq.w	103c <isr+0x6f4>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
     c9e:	f8c4 a1c0 	str.w	sl, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     ca2:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     ca6:	2b00      	cmp	r3, #0
     ca8:	f47f ae66 	bne.w	978 <isr+0x30>
     cac:	e6e1      	b.n	a72 <isr+0x12a>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     cae:	f240 3702 	movw	r7, #770	; 0x302
     cb2:	42b9      	cmp	r1, r7
     cb4:	f000 80bf 	beq.w	e36 <isr+0x4ee>
     cb8:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
     cbc:	d1ef      	bne.n	c9e <isr+0x356>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     cbe:	4a9c      	ldr	r2, [pc, #624]	; (f30 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     cc0:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     cc2:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     cc4:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     cc6:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     cc8:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     cca:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     ccc:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     cd0:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     cd4:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
     cd6:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
     cda:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     cde:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     ce2:	2b00      	cmp	r3, #0
     ce4:	d1fb      	bne.n	cde <isr+0x396>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
     ce6:	0c03      	lsrs	r3, r0, #16
     ce8:	065b      	lsls	r3, r3, #25
     cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     cee:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     cf2:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     cf6:	2b00      	cmp	r3, #0
     cf8:	f47f ae3e 	bne.w	978 <isr+0x30>
     cfc:	e6b9      	b.n	a72 <isr+0x12a>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     cfe:	f242 2321 	movw	r3, #8737	; 0x2221
     d02:	4299      	cmp	r1, r3
     d04:	f000 808a 	beq.w	e1c <isr+0x4d4>
     d08:	f242 3321 	movw	r3, #8993	; 0x2321
     d0c:	4299      	cmp	r1, r3
     d0e:	d1c6      	bne.n	c9e <isr+0x356>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     d10:	4b87      	ldr	r3, [pc, #540]	; (f30 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     d12:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
     d14:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     d16:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     d18:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     d1a:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     d1c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     d1e:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     d20:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     d24:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     d28:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
     d2a:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
     d2e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     d32:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     d36:	2b00      	cmp	r3, #0
     d38:	d1fb      	bne.n	d32 <isr+0x3ea>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     d3a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     d3e:	2b00      	cmp	r3, #0
     d40:	f47f ae1a 	bne.w	978 <isr+0x30>
     d44:	e695      	b.n	a72 <isr+0x12a>
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     d46:	487c      	ldr	r0, [pc, #496]	; (f38 <isr+0x5f0>)
     d48:	2701      	movs	r7, #1
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
     d4a:	497c      	ldr	r1, [pc, #496]	; (f3c <isr+0x5f4>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     d4c:	4a7c      	ldr	r2, [pc, #496]	; (f40 <isr+0x5f8>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     d4e:	64f3      	str	r3, [r6, #76]	; 0x4c
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
     d50:	700b      	strb	r3, [r1, #0]
		reply_buffer[1] = 0;
     d52:	704b      	strb	r3, [r1, #1]
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
     d54:	f501 5300 	add.w	r3, r1, #8192	; 0x2000
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     d58:	6007      	str	r7, [r0, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     d5a:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     d5e:	64b0      	str	r0, [r6, #72]	; 0x48
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     d60:	6042      	str	r2, [r0, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     d62:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     d66:	60c7      	str	r7, [r0, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
     d68:	f501 5740 	add.w	r7, r1, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
     d6c:	6103      	str	r3, [r0, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     d6e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
     d72:	f501 4380 	add.w	r3, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     d76:	6081      	str	r1, [r0, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     d78:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
     d7c:	6147      	str	r7, [r0, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     d7e:	6183      	str	r3, [r0, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
     d80:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     d84:	2b00      	cmp	r3, #0
     d86:	d1fb      	bne.n	d80 <isr+0x438>
	}
	endpoint0_transfer_ack.next = 1;
     d88:	4a69      	ldr	r2, [pc, #420]	; (f30 <isr+0x5e8>)
     d8a:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     d8c:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
     d8e:	60f3      	str	r3, [r6, #12]
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
     d90:	60b2      	str	r2, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     d92:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     d94:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     d96:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
     d9a:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     d9e:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
     da0:	ea41 0300 	orr.w	r3, r1, r0
     da4:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
     da8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     dac:	2b00      	cmp	r3, #0
     dae:	d1fb      	bne.n	da8 <isr+0x460>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     db0:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     db4:	2b00      	cmp	r3, #0
     db6:	f47f addf 	bne.w	978 <isr+0x30>
     dba:	e65a      	b.n	a72 <isr+0x12a>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
     dbc:	b292      	uxth	r2, r2
     dbe:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
     dc2:	2b07      	cmp	r3, #7
     dc4:	f63f af6b 	bhi.w	c9e <isr+0x356>
		dir = setup.wIndex & 0x80;
		if (dir) {
     dc8:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
     dcc:	ea4f 0383 	mov.w	r3, r3, lsl #2
     dd0:	4a5c      	ldr	r2, [pc, #368]	; (f44 <isr+0x5fc>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     dd2:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     dd6:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
     dda:	441a      	add	r2, r3
     ddc:	6813      	ldr	r3, [r2, #0]
     dde:	bf14      	ite	ne
     de0:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
     de4:	f023 0301 	biceq.w	r3, r3, #1
     de8:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     dea:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     dec:	4b50      	ldr	r3, [pc, #320]	; (f30 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     dee:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     df0:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     df2:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     df4:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     df6:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     dfa:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     dfe:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
     e00:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
     e04:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     e08:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     e0c:	2b00      	cmp	r3, #0
     e0e:	d1fb      	bne.n	e08 <isr+0x4c0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     e10:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     e14:	2b00      	cmp	r3, #0
     e16:	f47f adaf 	bne.w	978 <isr+0x30>
     e1a:	e62a      	b.n	a72 <isr+0x12a>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
     e1c:	b292      	uxth	r2, r2
     e1e:	2a00      	cmp	r2, #0
     e20:	f47f af76 	bne.w	d10 <isr+0x3c8>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
     e24:	4b48      	ldr	r3, [pc, #288]	; (f48 <isr+0x600>)
			usb_cdc_line_rtsdtr = setup.wValue;
     e26:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
     e2a:	4a48      	ldr	r2, [pc, #288]	; (f4c <isr+0x604>)
     e2c:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
     e2e:	4b48      	ldr	r3, [pc, #288]	; (f50 <isr+0x608>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
     e30:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
     e32:	7018      	strb	r0, [r3, #0]
     e34:	e76c      	b.n	d10 <isr+0x3c8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
     e36:	b292      	uxth	r2, r2
     e38:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
     e3c:	2b07      	cmp	r3, #7
     e3e:	f63f af2e 	bhi.w	c9e <isr+0x356>
		dir = setup.wIndex & 0x80;
		if (dir) {
     e42:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
     e46:	ea4f 0383 	mov.w	r3, r3, lsl #2
     e4a:	4a3e      	ldr	r2, [pc, #248]	; (f44 <isr+0x5fc>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     e4c:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     e50:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
     e54:	441a      	add	r2, r3
     e56:	6813      	ldr	r3, [r2, #0]
     e58:	bf14      	ite	ne
     e5a:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
     e5e:	f043 0301 	orreq.w	r3, r3, #1
     e62:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     e64:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     e66:	4b32      	ldr	r3, [pc, #200]	; (f30 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     e68:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     e6a:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     e6c:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     e6e:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     e70:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     e74:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     e78:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
     e7a:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
     e7e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     e82:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     e86:	2b00      	cmp	r3, #0
     e88:	d1fb      	bne.n	e82 <isr+0x53a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     e8a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     e8e:	2b00      	cmp	r3, #0
     e90:	f47f ad72 	bne.w	978 <isr+0x30>
     e94:	e5ed      	b.n	a72 <isr+0x12a>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
     e96:	4922      	ldr	r1, [pc, #136]	; (f20 <isr+0x5d8>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     e98:	2201      	movs	r2, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
     e9a:	4828      	ldr	r0, [pc, #160]	; (f3c <isr+0x5f4>)
     e9c:	7809      	ldrb	r1, [r1, #0]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     e9e:	64f3      	str	r3, [r6, #76]	; 0x4c
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     ea0:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
     ea4:	7001      	strb	r1, [r0, #0]
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     ea6:	4b2b      	ldr	r3, [pc, #172]	; (f54 <isr+0x60c>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     ea8:	4923      	ldr	r1, [pc, #140]	; (f38 <isr+0x5f0>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     eaa:	604b      	str	r3, [r1, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
     eac:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     eb0:	64b1      	str	r1, [r6, #72]	; 0x48
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     eb2:	600a      	str	r2, [r1, #0]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     eb4:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     eb8:	60cf      	str	r7, [r1, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
     eba:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
     ebe:	610b      	str	r3, [r1, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     ec0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
     ec4:	f500 4380 	add.w	r3, r0, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     ec8:	6088      	str	r0, [r1, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     eca:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
     ece:	614f      	str	r7, [r1, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     ed0:	618b      	str	r3, [r1, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
     ed2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     ed6:	2b00      	cmp	r3, #0
     ed8:	d1fb      	bne.n	ed2 <isr+0x58a>
	}
	endpoint0_transfer_ack.next = 1;
     eda:	4a15      	ldr	r2, [pc, #84]	; (f30 <isr+0x5e8>)
     edc:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     ede:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
     ee0:	60f3      	str	r3, [r6, #12]
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
     ee2:	60b2      	str	r2, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     ee4:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     ee6:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     ee8:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
     eec:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     ef0:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
     ef2:	ea41 0300 	orr.w	r3, r1, r0
     ef6:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
     efa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     efe:	2b00      	cmp	r3, #0
     f00:	d1fb      	bne.n	efa <isr+0x5b2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     f02:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     f06:	2b00      	cmp	r3, #0
     f08:	f47f ad36 	bne.w	978 <isr+0x30>
     f0c:	e5b1      	b.n	a72 <isr+0x12a>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     f0e:	4b12      	ldr	r3, [pc, #72]	; (f58 <isr+0x610>)
     f10:	6859      	ldr	r1, [r3, #4]
     f12:	2900      	cmp	r1, #0
     f14:	f43f aec3 	beq.w	c9e <isr+0x356>
     f18:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
     f1a:	fa1f fe82 	uxth.w	lr, r2
     f1e:	e022      	b.n	f66 <isr+0x61e>
     f20:	200012f8 	.word	0x200012f8
     f24:	000200c8 	.word	0x000200c8
     f28:	00cc0002 	.word	0x00cc0002
     f2c:	00c80002 	.word	0x00c80002
     f30:	20002020 	.word	0x20002020
     f34:	200012d8 	.word	0x200012d8
     f38:	20002000 	.word	0x20002000
     f3c:	200012e8 	.word	0x200012e8
     f40:	00020080 	.word	0x00020080
     f44:	402e01c0 	.word	0x402e01c0
     f48:	200012ac 	.word	0x200012ac
     f4c:	20003288 	.word	0x20003288
     f50:	200014d4 	.word	0x200014d4
     f54:	00010080 	.word	0x00010080
     f58:	20000400 	.word	0x20000400
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     f5c:	330c      	adds	r3, #12
     f5e:	6859      	ldr	r1, [r3, #4]
     f60:	2900      	cmp	r1, #0
     f62:	f43f ae9c 	beq.w	c9e <isr+0x356>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
     f66:	881f      	ldrh	r7, [r3, #0]
     f68:	4287      	cmp	r7, r0
     f6a:	d1f7      	bne.n	f5c <isr+0x614>
     f6c:	885f      	ldrh	r7, [r3, #2]
     f6e:	4577      	cmp	r7, lr
     f70:	d1f4      	bne.n	f5c <isr+0x614>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
     f72:	0a07      	lsrs	r7, r0, #8
     f74:	2f03      	cmp	r7, #3
     f76:	f000 80ff 	beq.w	1178 <isr+0x830>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
     f7a:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
     f7c:	0c12      	lsrs	r2, r2, #16
     f7e:	4293      	cmp	r3, r2
     f80:	bf28      	it	cs
     f82:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
     f84:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     f88:	f000 80e7 	beq.w	115a <isr+0x812>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
     f8c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
     f90:	f000 80c9 	beq.w	1126 <isr+0x7de>
     f94:	4f7b      	ldr	r7, [pc, #492]	; (1184 <isr+0x83c>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
     f96:	461a      	mov	r2, r3
     f98:	9301      	str	r3, [sp, #4]
     f9a:	4638      	mov	r0, r7
     f9c:	f001 f820 	bl	1fe0 <memcpy>
     fa0:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     fa2:	f027 021f 	bic.w	r2, r7, #31
     fa6:	4977      	ldr	r1, [pc, #476]	; (1184 <isr+0x83c>)
	uint32_t end_addr = (uint32_t)addr + size;
     fa8:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
     faa:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     fae:	4876      	ldr	r0, [pc, #472]	; (1188 <isr+0x840>)
     fb0:	6002      	str	r2, [r0, #0]
		location += 32;
     fb2:	3220      	adds	r2, #32
	} while (location < end_addr);
     fb4:	4297      	cmp	r7, r2
     fb6:	d8fa      	bhi.n	fae <isr+0x666>
	asm("dsb");
     fb8:	f3bf 8f4f 	dsb	sy
	asm("isb");
     fbc:	f3bf 8f6f 	isb	sy
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
     fc0:	b303      	cbz	r3, 1004 <isr+0x6bc>
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     fc2:	041b      	lsls	r3, r3, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     fc4:	4a71      	ldr	r2, [pc, #452]	; (118c <isr+0x844>)
     fc6:	2701      	movs	r7, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     fc8:	2000      	movs	r0, #0
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     fce:	64b2      	str	r2, [r6, #72]	; 0x48
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     fd0:	6017      	str	r7, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     fd2:	6053      	str	r3, [r2, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     fd4:	64f0      	str	r0, [r6, #76]	; 0x4c
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     fd6:	4b6e      	ldr	r3, [pc, #440]	; (1190 <isr+0x848>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     fd8:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
     fdc:	f503 5780 	add.w	r7, r3, #4096	; 0x1000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     fe0:	6091      	str	r1, [r2, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
     fe2:	f503 5e00 	add.w	lr, r3, #8192	; 0x2000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     fe6:	60d3      	str	r3, [r2, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     fe8:	f440 3180 	orr.w	r1, r0, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
     fec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
     ff0:	6117      	str	r7, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     ff2:	f8c2 e014 	str.w	lr, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     ff6:	6193      	str	r3, [r2, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     ff8:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
     ffc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1000:	2b00      	cmp	r3, #0
    1002:	d1fb      	bne.n	ffc <isr+0x6b4>
	}
	endpoint0_transfer_ack.next = 1;
    1004:	4b63      	ldr	r3, [pc, #396]	; (1194 <isr+0x84c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1006:	2200      	movs	r2, #0
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1008:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    100a:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    100c:	60b3      	str	r3, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    100e:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1010:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    1012:	60f2      	str	r2, [r6, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1014:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    1018:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    101c:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    101e:	ea41 0300 	orr.w	r3, r1, r0
    1022:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1026:	f8c9 2000 	str.w	r2, [r9]
	while (USB1_ENDPTPRIME) ;
    102a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    102e:	2b00      	cmp	r3, #0
    1030:	d1fb      	bne.n	102a <isr+0x6e2>
    1032:	e51a      	b.n	a6a <isr+0x122>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1034:	07cf      	lsls	r7, r1, #31
    1036:	f57f ace6 	bpl.w	a06 <isr+0xbe>
    103a:	e4e2      	b.n	a02 <isr+0xba>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    103c:	4f56      	ldr	r7, [pc, #344]	; (1198 <isr+0x850>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    103e:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    1042:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1044:	4955      	ldr	r1, [pc, #340]	; (119c <isr+0x854>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1046:	4b51      	ldr	r3, [pc, #324]	; (118c <isr+0x844>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1048:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    104a:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    104e:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    1050:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    1052:	4953      	ldr	r1, [pc, #332]	; (11a0 <isr+0x858>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1054:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1058:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    105a:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    105e:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1062:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1064:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1068:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    106c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1070:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1074:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1076:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    107a:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    107c:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    107e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1082:	2b00      	cmp	r3, #0
    1084:	d1fb      	bne.n	107e <isr+0x736>
	}
	endpoint0_transfer_ack.next = 1;
    1086:	4a43      	ldr	r2, [pc, #268]	; (1194 <isr+0x84c>)
    1088:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    108a:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    108e:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1090:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1092:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1096:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1098:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    109a:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    109e:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    10a2:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    10a4:	ea41 0300 	orr.w	r3, r1, r0
    10a8:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    10ac:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    10b0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    10b4:	2b00      	cmp	r3, #0
    10b6:	d1fb      	bne.n	10b0 <isr+0x768>
    10b8:	e4d7      	b.n	a6a <isr+0x122>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    10ba:	4837      	ldr	r0, [pc, #220]	; (1198 <isr+0x850>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    10bc:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    10c0:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    10c2:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    10c4:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    10c6:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    10c8:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    10ca:	f47f ad2f 	bne.w	b2c <isr+0x1e4>
    10ce:	b281      	uxth	r1, r0
    10d0:	2900      	cmp	r1, #0
    10d2:	f47f ad2b 	bne.w	b2c <isr+0x1e4>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    10d6:	4932      	ldr	r1, [pc, #200]	; (11a0 <isr+0x858>)
    10d8:	4c32      	ldr	r4, [pc, #200]	; (11a4 <isr+0x85c>)
    10da:	c903      	ldmia	r1, {r0, r1}
    10dc:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    10de:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    10e0:	6020      	str	r0, [r4, #0]
    10e2:	80a1      	strh	r1, [r4, #4]
    10e4:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    10e6:	f47f ad21 	bne.w	b2c <isr+0x1e4>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    10ea:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    10ec:	482e      	ldr	r0, [pc, #184]	; (11a8 <isr+0x860>)
    10ee:	7801      	ldrb	r1, [r0, #0]
    10f0:	f041 0104 	orr.w	r1, r1, #4
    10f4:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    10f6:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    10fa:	0608      	lsls	r0, r1, #24
    10fc:	d406      	bmi.n	110c <isr+0x7c4>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    10fe:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1102:	2080      	movs	r0, #128	; 0x80
    1104:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1108:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    110c:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    110e:	4a27      	ldr	r2, [pc, #156]	; (11ac <isr+0x864>)
    1110:	2150      	movs	r1, #80	; 0x50
    1112:	7011      	strb	r1, [r2, #0]
    1114:	e50a      	b.n	b2c <isr+0x1e4>
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    1116:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
			ep->last_transfer = NULL;
    111a:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
    111e:	e553      	b.n	bc8 <isr+0x280>
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    1120:	633b      	str	r3, [r7, #48]	; 0x30
			ep->last_transfer = NULL;
    1122:	637b      	str	r3, [r7, #52]	; 0x34
    1124:	e524      	b.n	b70 <isr+0x228>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1126:	4822      	ldr	r0, [pc, #136]	; (11b0 <isr+0x868>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1128:	461a      	mov	r2, r3
    112a:	4f16      	ldr	r7, [pc, #88]	; (1184 <isr+0x83c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    112c:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    1130:	4920      	ldr	r1, [pc, #128]	; (11b4 <isr+0x86c>)
    1132:	4821      	ldr	r0, [pc, #132]	; (11b8 <isr+0x870>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    1134:	9301      	str	r3, [sp, #4]
    1136:	f1be 0f00 	cmp.w	lr, #0
    113a:	bf08      	it	eq
    113c:	4601      	moveq	r1, r0
    113e:	4638      	mov	r0, r7
    1140:	f000 ff4e 	bl	1fe0 <memcpy>
					usb_descriptor_buffer[1] = 7;
    1144:	2207      	movs	r2, #7
    1146:	9b01      	ldr	r3, [sp, #4]
    1148:	707a      	strb	r2, [r7, #1]
    114a:	e72a      	b.n	fa2 <isr+0x65a>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    114c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    1150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1154:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    1158:	e4dd      	b.n	b16 <isr+0x1ce>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    115a:	4815      	ldr	r0, [pc, #84]	; (11b0 <isr+0x868>)
					memcpy(usb_descriptor_buffer, src, datalen);
    115c:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    115e:	4916      	ldr	r1, [pc, #88]	; (11b8 <isr+0x870>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    1160:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1162:	4814      	ldr	r0, [pc, #80]	; (11b4 <isr+0x86c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    1164:	9301      	str	r3, [sp, #4]
    1166:	2f00      	cmp	r7, #0
    1168:	bf08      	it	eq
    116a:	4601      	moveq	r1, r0
    116c:	4805      	ldr	r0, [pc, #20]	; (1184 <isr+0x83c>)
    116e:	f000 ff37 	bl	1fe0 <memcpy>
    1172:	4f04      	ldr	r7, [pc, #16]	; (1184 <isr+0x83c>)
    1174:	9b01      	ldr	r3, [sp, #4]
    1176:	e714      	b.n	fa2 <isr+0x65a>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1178:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    117a:	780b      	ldrb	r3, [r1, #0]
    117c:	4293      	cmp	r3, r2
    117e:	bf28      	it	cs
    1180:	4613      	movcs	r3, r2
    1182:	e703      	b.n	f8c <isr+0x644>
    1184:	20200000 	.word	0x20200000
    1188:	e000ef70 	.word	0xe000ef70
    118c:	20002000 	.word	0x20002000
    1190:	20201000 	.word	0x20201000
    1194:	20002020 	.word	0x20002020
    1198:	200012e0 	.word	0x200012e0
    119c:	00070080 	.word	0x00070080
    11a0:	200012f0 	.word	0x200012f0
    11a4:	20003280 	.word	0x20003280
    11a8:	200012cc 	.word	0x200012cc
    11ac:	200012dc 	.word	0x200012dc
    11b0:	200012d4 	.word	0x200012d4
    11b4:	60001a14 	.word	0x60001a14
    11b8:	60001a58 	.word	0x60001a58

000011bc <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    11bc:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    11be:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    11c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    11c6:	bf14      	ite	ne
    11c8:	2700      	movne	r7, #0
    11ca:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    11ce:	2a02      	cmp	r2, #2
    11d0:	d901      	bls.n	11d6 <usb_config_rx+0x1a>
    11d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    11d6:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    11da:	f8df 9040 	ldr.w	r9, [pc, #64]	; 121c <usb_config_rx+0x60>
    11de:	460d      	mov	r5, r1
    11e0:	4604      	mov	r4, r0
    11e2:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    11e6:	2100      	movs	r1, #0
    11e8:	2240      	movs	r2, #64	; 0x40
    11ea:	4698      	mov	r8, r3
    11ec:	4630      	mov	r0, r6
    11ee:	f001 feb7 	bl	2f60 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    11f2:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    11f4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    11f8:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    11fc:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1200:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    1202:	f1b8 0f00 	cmp.w	r8, #0
    1206:	d0e4      	beq.n	11d2 <usb_config_rx+0x16>
    1208:	4b03      	ldr	r3, [pc, #12]	; (1218 <usb_config_rx+0x5c>)
    120a:	40a0      	lsls	r0, r4
    120c:	681c      	ldr	r4, [r3, #0]
    120e:	4320      	orrs	r0, r4
    1210:	6018      	str	r0, [r3, #0]
    1212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1216:	bf00      	nop
    1218:	200012c8 	.word	0x200012c8
    121c:	20003000 	.word	0x20003000

00001220 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1220:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1222:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1226:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    122a:	bf14      	ite	ne
    122c:	2700      	movne	r7, #0
    122e:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1232:	2a02      	cmp	r2, #2
    1234:	d901      	bls.n	123a <usb_config_tx+0x1a>
    1236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    123a:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    123c:	01c5      	lsls	r5, r0, #7
    123e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1284 <usb_config_tx+0x64>
    1242:	4688      	mov	r8, r1
    1244:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1246:	2100      	movs	r1, #0
    1248:	4604      	mov	r4, r0
    124a:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    124c:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1250:	4650      	mov	r0, sl
    1252:	f001 fe85 	bl	2f60 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1256:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1258:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    125c:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1260:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1264:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1268:	2e00      	cmp	r6, #0
    126a:	d0e4      	beq.n	1236 <usb_config_tx+0x16>
    126c:	f104 0010 	add.w	r0, r4, #16
    1270:	4b03      	ldr	r3, [pc, #12]	; (1280 <usb_config_tx+0x60>)
    1272:	4082      	lsls	r2, r0
    1274:	6818      	ldr	r0, [r3, #0]
    1276:	4302      	orrs	r2, r0
    1278:	601a      	str	r2, [r3, #0]
    127a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    127e:	bf00      	nop
    1280:	200012c8 	.word	0x200012c8
    1284:	20003000 	.word	0x20003000

00001288 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1288:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    128a:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    128c:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    128e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    1292:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1294:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1296:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1298:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    129c:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    12a0:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    12a4:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    12a8:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    12aa:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    12ac:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    12ae:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    12b0:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    12b2:	bcf0      	pop	{r4, r5, r6, r7}
    12b4:	4770      	bx	lr
    12b6:	bf00      	nop

000012b8 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    12b8:	1e83      	subs	r3, r0, #2
    12ba:	2b02      	cmp	r3, #2
    12bc:	d900      	bls.n	12c0 <usb_transmit+0x8>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    12be:	4770      	bx	lr
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    12c0:	4a1d      	ldr	r2, [pc, #116]	; (1338 <usb_transmit+0x80>)
	uint32_t mask = 1 << (endpoint_number + 16);
    12c2:	f100 0310 	add.w	r3, r0, #16
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    12c6:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    12c8:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
	uint32_t mask = 1 << (endpoint_number + 16);
    12cc:	2701      	movs	r7, #1
    12ce:	409f      	lsls	r7, r3
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    12d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    12d2:	b11b      	cbz	r3, 12dc <usb_transmit+0x24>
		transfer->status |= (1<<15);
    12d4:	684b      	ldr	r3, [r1, #4]
    12d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    12da:	604b      	str	r3, [r1, #4]
	}
	__disable_irq();
    12dc:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    12de:	6b42      	ldr	r2, [r0, #52]	; 0x34
	if (last) {
    12e0:	b1da      	cbz	r2, 131a <usb_transmit+0x62>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    12e2:	4b16      	ldr	r3, [pc, #88]	; (133c <usb_transmit+0x84>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    12e4:	6011      	str	r1, [r2, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    12e6:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
    12ea:	4217      	tst	r7, r2
    12ec:	d11f      	bne.n	132e <usb_transmit+0x76>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    12ee:	4c14      	ldr	r4, [pc, #80]	; (1340 <usb_transmit+0x88>)
    12f0:	6826      	ldr	r6, [r4, #0]
    12f2:	e004      	b.n	12fe <usb_transmit+0x46>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    12f4:	6822      	ldr	r2, [r4, #0]
    12f6:	1b92      	subs	r2, r2, r6
    12f8:	f5b2 6f16 	cmp.w	r2, #2400	; 0x960
    12fc:	d20b      	bcs.n	1316 <usb_transmit+0x5e>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    12fe:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    1302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1306:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    130a:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    130e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    1312:	0452      	lsls	r2, r2, #17
    1314:	d5ee      	bpl.n	12f4 <usb_transmit+0x3c>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1316:	422f      	tst	r7, r5
    1318:	d109      	bne.n	132e <usb_transmit+0x76>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    131a:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    131c:	4a07      	ldr	r2, [pc, #28]	; (133c <usb_transmit+0x84>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    131e:	6081      	str	r1, [r0, #8]
	endpoint->status = 0;
    1320:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    1322:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1326:	431f      	orrs	r7, r3
    1328:	f8c2 71b0 	str.w	r7, [r2, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    132c:	6301      	str	r1, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    132e:	6341      	str	r1, [r0, #52]	; 0x34
	__enable_irq();
    1330:	b662      	cpsie	i
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    1332:	bcf0      	pop	{r4, r5, r6, r7}
    1334:	4770      	bx	lr
    1336:	bf00      	nop
    1338:	20003040 	.word	0x20003040
    133c:	402e0000 	.word	0x402e0000
    1340:	e0001004 	.word	0xe0001004

00001344 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1344:	1e83      	subs	r3, r0, #2
    1346:	2b02      	cmp	r3, #2
    1348:	d900      	bls.n	134c <usb_receive+0x8>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    134a:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    134c:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    134e:	4d1c      	ldr	r5, [pc, #112]	; (13c0 <usb_receive+0x7c>)
	uint32_t mask = 1 << endpoint_number;
    1350:	2301      	movs	r3, #1
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    1352:	eb05 15c0 	add.w	r5, r5, r0, lsl #7
	uint32_t mask = 1 << endpoint_number;
    1356:	fa03 f000 	lsl.w	r0, r3, r0
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    135a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    135c:	b11b      	cbz	r3, 1366 <usb_receive+0x22>
		transfer->status |= (1<<15);
    135e:	684b      	ldr	r3, [r1, #4]
    1360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1364:	604b      	str	r3, [r1, #4]
	}
	__disable_irq();
    1366:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1368:	6b6a      	ldr	r2, [r5, #52]	; 0x34
	if (last) {
    136a:	b1da      	cbz	r2, 13a4 <usb_receive+0x60>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    136c:	4b15      	ldr	r3, [pc, #84]	; (13c4 <usb_receive+0x80>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    136e:	6011      	str	r1, [r2, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    1370:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
    1374:	4210      	tst	r0, r2
    1376:	d11f      	bne.n	13b8 <usb_receive+0x74>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    1378:	4c13      	ldr	r4, [pc, #76]	; (13c8 <usb_receive+0x84>)
    137a:	6827      	ldr	r7, [r4, #0]
    137c:	e004      	b.n	1388 <usb_receive+0x44>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    137e:	6822      	ldr	r2, [r4, #0]
    1380:	1bd2      	subs	r2, r2, r7
    1382:	f5b2 6f16 	cmp.w	r2, #2400	; 0x960
    1386:	d20b      	bcs.n	13a0 <usb_receive+0x5c>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1388:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    138c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1390:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1394:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1398:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    139c:	0452      	lsls	r2, r2, #17
    139e:	d5ee      	bpl.n	137e <usb_receive+0x3a>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    13a0:	4230      	tst	r0, r6
    13a2:	d109      	bne.n	13b8 <usb_receive+0x74>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    13a4:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    13a6:	4a07      	ldr	r2, [pc, #28]	; (13c4 <usb_receive+0x80>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    13a8:	60a9      	str	r1, [r5, #8]
	endpoint->status = 0;
    13aa:	60eb      	str	r3, [r5, #12]
	USB1_ENDPTPRIME |= epmask;
    13ac:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    13b0:	4318      	orrs	r0, r3
    13b2:	f8c2 01b0 	str.w	r0, [r2, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    13b6:	6329      	str	r1, [r5, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    13b8:	6369      	str	r1, [r5, #52]	; 0x34
	__enable_irq();
    13ba:	b662      	cpsie	i
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    13bc:	bcf0      	pop	{r4, r5, r6, r7}
    13be:	4770      	bx	lr
    13c0:	20003000 	.word	0x20003000
    13c4:	402e0000 	.word	0x402e0000
    13c8:	e0001004 	.word	0xe0001004

000013cc <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    13cc:	6840      	ldr	r0, [r0, #4]
#endif
}
    13ce:	4770      	bx	lr

000013d0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    13d0:	4a2b      	ldr	r2, [pc, #172]	; (1480 <usb_init_serialnumber+0xb0>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    13d2:	4b2c      	ldr	r3, [pc, #176]	; (1484 <usb_init_serialnumber+0xb4>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    13d4:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    13d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    13dc:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    13de:	b500      	push	{lr}
    13e0:	b085      	sub	sp, #20
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    13e2:	d802      	bhi.n	13ea <usb_init_serialnumber+0x1a>
    13e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    13e8:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    13ea:	220a      	movs	r2, #10
    13ec:	a901      	add	r1, sp, #4
    13ee:	f000 fff1 	bl	23d4 <ultoa>
	for (i=0; i<10; i++) {
		char c = buf[i];
    13f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
    13f6:	4b24      	ldr	r3, [pc, #144]	; (1488 <usb_init_serialnumber+0xb8>)
		if (!c) break;
    13f8:	b352      	cbz	r2, 1450 <usb_init_serialnumber+0x80>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    13fa:	f89d 1005 	ldrb.w	r1, [sp, #5]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    13fe:	805a      	strh	r2, [r3, #2]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    1400:	b369      	cbz	r1, 145e <usb_init_serialnumber+0x8e>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    1402:	f89d 2006 	ldrb.w	r2, [sp, #6]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    1406:	8099      	strh	r1, [r3, #4]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    1408:	b35a      	cbz	r2, 1462 <usb_init_serialnumber+0x92>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    140a:	f89d 1007 	ldrb.w	r1, [sp, #7]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    140e:	80da      	strh	r2, [r3, #6]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    1410:	b349      	cbz	r1, 1466 <usb_init_serialnumber+0x96>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    1412:	f89d 2008 	ldrb.w	r2, [sp, #8]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    1416:	8119      	strh	r1, [r3, #8]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    1418:	b33a      	cbz	r2, 146a <usb_init_serialnumber+0x9a>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    141a:	f89d 1009 	ldrb.w	r1, [sp, #9]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    141e:	815a      	strh	r2, [r3, #10]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    1420:	b329      	cbz	r1, 146e <usb_init_serialnumber+0x9e>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    1422:	f89d 200a 	ldrb.w	r2, [sp, #10]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    1426:	8199      	strh	r1, [r3, #12]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    1428:	b31a      	cbz	r2, 1472 <usb_init_serialnumber+0xa2>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    142a:	f89d 100b 	ldrb.w	r1, [sp, #11]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    142e:	81da      	strh	r2, [r3, #14]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    1430:	b309      	cbz	r1, 1476 <usb_init_serialnumber+0xa6>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    1432:	f89d 200c 	ldrb.w	r2, [sp, #12]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    1436:	8219      	strh	r1, [r3, #16]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    1438:	b14a      	cbz	r2, 144e <usb_init_serialnumber+0x7e>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    143a:	f89d 100d 	ldrb.w	r1, [sp, #13]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    143e:	825a      	strh	r2, [r3, #18]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    1440:	b1d9      	cbz	r1, 147a <usb_init_serialnumber+0xaa>
    1442:	2216      	movs	r2, #22
		usb_string_serial_number_default.wString[i] = c;
    1444:	8299      	strh	r1, [r3, #20]
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1446:	701a      	strb	r2, [r3, #0]
}
    1448:	b005      	add	sp, #20
    144a:	f85d fb04 	ldr.w	pc, [sp], #4

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    144e:	2208      	movs	r2, #8
    1450:	3201      	adds	r2, #1
    1452:	0052      	lsls	r2, r2, #1
    1454:	b2d2      	uxtb	r2, r2
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1456:	701a      	strb	r2, [r3, #0]
}
    1458:	b005      	add	sp, #20
    145a:	f85d fb04 	ldr.w	pc, [sp], #4

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    145e:	2201      	movs	r2, #1
    1460:	e7f6      	b.n	1450 <usb_init_serialnumber+0x80>
    1462:	2202      	movs	r2, #2
    1464:	e7f4      	b.n	1450 <usb_init_serialnumber+0x80>
    1466:	2203      	movs	r2, #3
    1468:	e7f2      	b.n	1450 <usb_init_serialnumber+0x80>
    146a:	2204      	movs	r2, #4
    146c:	e7f0      	b.n	1450 <usb_init_serialnumber+0x80>
    146e:	2205      	movs	r2, #5
    1470:	e7ee      	b.n	1450 <usb_init_serialnumber+0x80>
    1472:	2206      	movs	r2, #6
    1474:	e7ec      	b.n	1450 <usb_init_serialnumber+0x80>
    1476:	2207      	movs	r2, #7
    1478:	e7ea      	b.n	1450 <usb_init_serialnumber+0x80>
    147a:	2209      	movs	r2, #9
    147c:	e7e8      	b.n	1450 <usb_init_serialnumber+0x80>
    147e:	bf00      	nop
    1480:	401f4400 	.word	0x401f4400
    1484:	0098967f 	.word	0x0098967f
    1488:	200005d4 	.word	0x200005d4

0000148c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    148c:	4b1e      	ldr	r3, [pc, #120]	; (1508 <usb_serial_flush_callback+0x7c>)
    148e:	781a      	ldrb	r2, [r3, #0]
    1490:	b95a      	cbnz	r2, 14aa <usb_serial_flush_callback+0x1e>
    1492:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    1496:	4a1d      	ldr	r2, [pc, #116]	; (150c <usb_serial_flush_callback+0x80>)
    1498:	7812      	ldrb	r2, [r2, #0]
    149a:	b132      	cbz	r2, 14aa <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    149c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    14a0:	4d1b      	ldr	r5, [pc, #108]	; (1510 <usb_serial_flush_callback+0x84>)
    14a2:	882a      	ldrh	r2, [r5, #0]
    14a4:	b912      	cbnz	r2, 14ac <usb_serial_flush_callback+0x20>
    14a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14aa:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    14ac:	4e19      	ldr	r6, [pc, #100]	; (1514 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    14ae:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    14b2:	4f19      	ldr	r7, [pc, #100]	; (1518 <usb_serial_flush_callback+0x8c>)
    14b4:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    14b6:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    14b8:	4c18      	ldr	r4, [pc, #96]	; (151c <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    14ba:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    14be:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    14c2:	4638      	mov	r0, r7
    14c4:	4621      	mov	r1, r4
    14c6:	f7ff fedf 	bl	1288 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    14ca:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    14ce:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    14d2:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    14d6:	4b12      	ldr	r3, [pc, #72]	; (1520 <usb_serial_flush_callback+0x94>)
    14d8:	6019      	str	r1, [r3, #0]
		location += 32;
    14da:	3120      	adds	r1, #32
	} while (location < end_addr);
    14dc:	428a      	cmp	r2, r1
    14de:	d8fb      	bhi.n	14d8 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    14e0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    14e4:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    14e8:	2004      	movs	r0, #4
    14ea:	4639      	mov	r1, r7
    14ec:	f7ff fee4 	bl	12b8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    14f0:	7833      	ldrb	r3, [r6, #0]
    14f2:	4a08      	ldr	r2, [pc, #32]	; (1514 <usb_serial_flush_callback+0x88>)
    14f4:	3301      	adds	r3, #1
    14f6:	b2db      	uxtb	r3, r3
    14f8:	2b03      	cmp	r3, #3
    14fa:	bf88      	it	hi
    14fc:	2300      	movhi	r3, #0
    14fe:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    1500:	2300      	movs	r3, #0
    1502:	802b      	strh	r3, [r5, #0]
    1504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1508:	2000130e 	.word	0x2000130e
    150c:	200012f8 	.word	0x200012f8
    1510:	20001430 	.word	0x20001430
    1514:	2000130f 	.word	0x2000130f
    1518:	20001440 	.word	0x20001440
    151c:	20200060 	.word	0x20200060
    1520:	e000ef70 	.word	0xe000ef70

00001524 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    1524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1528:	b085      	sub	sp, #20
    152a:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    152c:	9101      	str	r1, [sp, #4]
    152e:	2900      	cmp	r1, #0
    1530:	f000 80a3 	beq.w	167a <usb_serial_write.part.1+0x156>
    1534:	2300      	movs	r3, #0
    1536:	f8df 8160 	ldr.w	r8, [pc, #352]	; 1698 <usb_serial_write.part.1+0x174>
    153a:	4a51      	ldr	r2, [pc, #324]	; (1680 <usb_serial_write.part.1+0x15c>)
    153c:	9300      	str	r3, [sp, #0]
    153e:	7814      	ldrb	r4, [r2, #0]
    1540:	f8b8 3000 	ldrh.w	r3, [r8]
    1544:	f8df 9144 	ldr.w	r9, [pc, #324]	; 168c <usb_serial_write.part.1+0x168>
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    1548:	4e4e      	ldr	r6, [pc, #312]	; (1684 <usb_serial_write.part.1+0x160>)
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    154a:	f8df a150 	ldr.w	sl, [pc, #336]	; 169c <usb_serial_write.part.1+0x178>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    154e:	f8df b150 	ldr.w	fp, [pc, #336]	; 16a0 <usb_serial_write.part.1+0x17c>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    1552:	4a4d      	ldr	r2, [pc, #308]	; (1688 <usb_serial_write.part.1+0x164>)
    1554:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    1558:	2b00      	cmp	r3, #0
    155a:	d16c      	bne.n	1636 <usb_serial_write.part.1+0x112>
    155c:	461d      	mov	r5, r3
    155e:	461c      	mov	r4, r3
    1560:	e014      	b.n	158c <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    1562:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    1566:	b904      	cbnz	r4, 156a <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    1568:	6835      	ldr	r5, [r6, #0]
    156a:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    156c:	2b00      	cmp	r3, #0
    156e:	d15c      	bne.n	162a <usb_serial_write.part.1+0x106>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    1570:	6833      	ldr	r3, [r6, #0]
    1572:	1b5b      	subs	r3, r3, r5
    1574:	2b78      	cmp	r3, #120	; 0x78
    1576:	d876      	bhi.n	1666 <usb_serial_write.part.1+0x142>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    1578:	f89a 3000 	ldrb.w	r3, [sl]
    157c:	2b00      	cmp	r3, #0
    157e:	d054      	beq.n	162a <usb_serial_write.part.1+0x106>
			yield();
    1580:	f000 fcb6 	bl	1ef0 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    1584:	f8b8 3000 	ldrh.w	r3, [r8]
    1588:	2b00      	cmp	r3, #0
    158a:	d152      	bne.n	1632 <usb_serial_write.part.1+0x10e>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    158c:	4638      	mov	r0, r7
    158e:	f7ff ff1d 	bl	13cc <usb_transfer_status>
			if (!(status & 0x80)) {
    1592:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    1596:	4a3d      	ldr	r2, [pc, #244]	; (168c <usb_serial_write.part.1+0x168>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    1598:	d1e3      	bne.n	1562 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    159a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    159e:	4a38      	ldr	r2, [pc, #224]	; (1680 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    15a0:	f889 0000 	strb.w	r0, [r9]
    15a4:	7814      	ldrb	r4, [r2, #0]
    15a6:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    15a8:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    15ac:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    15ae:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    15b0:	4937      	ldr	r1, [pc, #220]	; (1690 <usb_serial_write.part.1+0x16c>)
    15b2:	4420      	add	r0, r4
		if (size >= tx_available) {
    15b4:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    15b6:	4408      	add	r0, r1
		if (size >= tx_available) {
    15b8:	d341      	bcc.n	163e <usb_serial_write.part.1+0x11a>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    15ba:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    15bc:	9902      	ldr	r1, [sp, #8]
    15be:	f000 fd0f 	bl	1fe0 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    15c2:	2300      	movs	r3, #0
    15c4:	4621      	mov	r1, r4
    15c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    15ca:	4638      	mov	r0, r7
    15cc:	f7ff fe5c 	bl	1288 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    15d0:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    15d4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    15d8:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    15dc:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    15e0:	3320      	adds	r3, #32
	} while (location < end_addr);
    15e2:	429c      	cmp	r4, r3
    15e4:	d8fa      	bhi.n	15dc <usb_serial_write.part.1+0xb8>
	asm("dsb");
    15e6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    15ea:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    15ee:	2004      	movs	r0, #4
    15f0:	4639      	mov	r1, r7
    15f2:	f7ff fe61 	bl	12b8 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    15f6:	4b22      	ldr	r3, [pc, #136]	; (1680 <usb_serial_write.part.1+0x15c>)
    15f8:	781c      	ldrb	r4, [r3, #0]
    15fa:	3401      	adds	r4, #1
    15fc:	b2e4      	uxtb	r4, r4
    15fe:	2c03      	cmp	r4, #3
    1600:	d837      	bhi.n	1672 <usb_serial_write.part.1+0x14e>
    1602:	701c      	strb	r4, [r3, #0]
			size -= tx_available;
    1604:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    1608:	2100      	movs	r1, #0
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    160a:	9b00      	ldr	r3, [sp, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    160c:	4821      	ldr	r0, [pc, #132]	; (1694 <usb_serial_write.part.1+0x170>)
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    160e:	4413      	add	r3, r2
			data += tx_available;
			tx_available = 0;
    1610:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    1614:	9300      	str	r3, [sp, #0]
			data += tx_available;
    1616:	9b02      	ldr	r3, [sp, #8]
    1618:	4413      	add	r3, r2
    161a:	9302      	str	r3, [sp, #8]
    161c:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    161e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1622:	9901      	ldr	r1, [sp, #4]
    1624:	1a8a      	subs	r2, r1, r2
    1626:	9201      	str	r2, [sp, #4]
    1628:	d193      	bne.n	1552 <usb_serial_write.part.1+0x2e>
    162a:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    162c:	b005      	add	sp, #20
    162e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1632:	4a13      	ldr	r2, [pc, #76]	; (1680 <usb_serial_write.part.1+0x15c>)
    1634:	7814      	ldrb	r4, [r2, #0]
    1636:	461a      	mov	r2, r3
    1638:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    163c:	e7b6      	b.n	15ac <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    163e:	9902      	ldr	r1, [sp, #8]
    1640:	462a      	mov	r2, r5
    1642:	9303      	str	r3, [sp, #12]
    1644:	f000 fccc 	bl	1fe0 <memcpy>
			tx_available -= size;
    1648:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    164a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    164e:	4a11      	ldr	r2, [pc, #68]	; (1694 <usb_serial_write.part.1+0x170>)
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    1650:	1b5b      	subs	r3, r3, r5
    1652:	f8a8 3000 	strh.w	r3, [r8]
    1656:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1658:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    165c:	4618      	mov	r0, r3
    165e:	4428      	add	r0, r5
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1660:	b005      	add	sp, #20
    1662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    1666:	2301      	movs	r3, #1
				return sent;
    1668:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    166a:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    166c:	b005      	add	sp, #20
    166e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    1672:	2200      	movs	r2, #0
    1674:	4614      	mov	r4, r2
    1676:	701a      	strb	r2, [r3, #0]
    1678:	e7c4      	b.n	1604 <usb_serial_write.part.1+0xe0>
    167a:	4608      	mov	r0, r1
    167c:	e7d6      	b.n	162c <usb_serial_write.part.1+0x108>
    167e:	bf00      	nop
    1680:	2000130f 	.word	0x2000130f
    1684:	200012ac 	.word	0x200012ac
    1688:	20001440 	.word	0x20001440
    168c:	200014c0 	.word	0x200014c0
    1690:	20200060 	.word	0x20200060
    1694:	402e0000 	.word	0x402e0000
    1698:	20001430 	.word	0x20001430
    169c:	200012f8 	.word	0x200012f8
    16a0:	e000ef70 	.word	0xe000ef70

000016a4 <rx_event>:
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    16a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    16a8:	4e49      	ldr	r6, [pc, #292]	; (17d0 <rx_event+0x12c>)
    16aa:	6844      	ldr	r4, [r0, #4]
    16ac:	8837      	ldrh	r7, [r6, #0]
    16ae:	f3c4 440e 	ubfx	r4, r4, #16, #15
	int i = t->callback_param;
    16b2:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    16b4:	1b3c      	subs	r4, r7, r4
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    16b6:	2c00      	cmp	r4, #0
    16b8:	dd5f      	ble.n	177a <rx_event+0xd6>
		// received a packet with data
		uint32_t head = rx_head;
    16ba:	4946      	ldr	r1, [pc, #280]	; (17d4 <rx_event+0x130>)
		if (head != rx_tail) {
    16bc:	4b46      	ldr	r3, [pc, #280]	; (17d8 <rx_event+0x134>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    16be:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    16c0:	781b      	ldrb	r3, [r3, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    16c2:	b2d2      	uxtb	r2, r2
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    16c4:	4845      	ldr	r0, [pc, #276]	; (17dc <rx_event+0x138>)
			uint32_t count = rx_count[ii];
    16c6:	f8df 8134 	ldr.w	r8, [pc, #308]	; 17fc <rx_event+0x158>
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    16ca:	429a      	cmp	r2, r3
    16cc:	d007      	beq.n	16de <rx_event+0x3a>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    16ce:	f810 b002 	ldrb.w	fp, [r0, r2]
			uint32_t count = rx_count[ii];
    16d2:	f838 a01b 	ldrh.w	sl, [r8, fp, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    16d6:	f5ca 7300 	rsb	r3, sl, #512	; 0x200
    16da:	429c      	cmp	r4, r3
    16dc:	d913      	bls.n	1706 <rx_event+0x62>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    16de:	3201      	adds	r2, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    16e0:	2300      	movs	r3, #0
    16e2:	4e3f      	ldr	r6, [pc, #252]	; (17e0 <rx_event+0x13c>)
		if (++head > RX_NUM) head = 0;
    16e4:	2a08      	cmp	r2, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    16e6:	f828 4015 	strh.w	r4, [r8, r5, lsl #1]
		rx_index[i] = 0;
    16ea:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
    16ee:	bf98      	it	ls
    16f0:	b2d3      	uxtbls	r3, r2
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    16f2:	4e3c      	ldr	r6, [pc, #240]	; (17e4 <rx_event+0x140>)
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    16f4:	bf88      	it	hi
    16f6:	461a      	movhi	r2, r3
		rx_list[head] = i;
		rx_head = head;
    16f8:	700b      	strb	r3, [r1, #0]
		rx_available += len;
    16fa:	6833      	ldr	r3, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    16fc:	5485      	strb	r5, [r0, r2]
		rx_head = head;
		rx_available += len;
    16fe:	441c      	add	r4, r3
    1700:	6034      	str	r4, [r6, #0]
    1702:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
    1706:	4b38      	ldr	r3, [pc, #224]	; (17e8 <rx_event+0x144>)
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1708:	eb0a 204b 	add.w	r0, sl, fp, lsl #9
    170c:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
    170e:	eb03 2945 	add.w	r9, r3, r5, lsl #9
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1712:	4418      	add	r0, r3
    1714:	4649      	mov	r1, r9
    1716:	f000 fc63 	bl	1fe0 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    171a:	4832      	ldr	r0, [pc, #200]	; (17e4 <rx_event+0x140>)
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    171c:	4933      	ldr	r1, [pc, #204]	; (17ec <rx_event+0x148>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    171e:	eb0a 0304 	add.w	r3, sl, r4
				rx_available += len;
    1722:	6802      	ldr	r2, [r0, #0]
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1724:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1728:	eb01 1a45 	add.w	sl, r1, r5, lsl #5
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    172c:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 17f8 <rx_event+0x154>
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    1730:	4414      	add	r4, r2
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    1732:	f828 301b 	strh.w	r3, [r8, fp, lsl #1]
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1736:	463a      	mov	r2, r7
    1738:	4649      	mov	r1, r9
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    173a:	6004      	str	r4, [r0, #0]
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    173c:	462b      	mov	r3, r5
    173e:	4650      	mov	r0, sl
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1740:	f8cc e000 	str.w	lr, [ip]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1744:	f7ff fda0 	bl	1288 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    1748:	8832      	ldrh	r2, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    174a:	f029 031f 	bic.w	r3, r9, #31
	uint32_t end_addr = (uint32_t)addr + size;
    174e:	4491      	add	r9, r2
	asm volatile("": : :"memory");
	asm("dsb");
    1750:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    1754:	4a26      	ldr	r2, [pc, #152]	; (17f0 <rx_event+0x14c>)
    1756:	6013      	str	r3, [r2, #0]
		location += 32;
    1758:	3320      	adds	r3, #32
	} while (location < end_addr);
    175a:	4599      	cmp	r9, r3
    175c:	d8fb      	bhi.n	1756 <rx_event+0xb2>
	asm("dsb");
    175e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1762:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    1766:	2003      	movs	r0, #3
    1768:	4651      	mov	r1, sl
    176a:	f7ff fdeb 	bl	1344 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    176e:	4b21      	ldr	r3, [pc, #132]	; (17f4 <rx_event+0x150>)
    1770:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1774:	601a      	str	r2, [r3, #0]
    1776:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    177a:	491b      	ldr	r1, [pc, #108]	; (17e8 <rx_event+0x144>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    177c:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1780:	4b1a      	ldr	r3, [pc, #104]	; (17ec <rx_event+0x148>)
    1782:	463a      	mov	r2, r7

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1784:	eb01 2445 	add.w	r4, r1, r5, lsl #9
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1788:	481b      	ldr	r0, [pc, #108]	; (17f8 <rx_event+0x154>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    178a:	eb03 1745 	add.w	r7, r3, r5, lsl #5
    178e:	462b      	mov	r3, r5
    1790:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1792:	f8c0 e000 	str.w	lr, [r0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1796:	4638      	mov	r0, r7
    1798:	f7ff fd76 	bl	1288 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    179c:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    179e:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    17a2:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    17a4:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    17a8:	4a11      	ldr	r2, [pc, #68]	; (17f0 <rx_event+0x14c>)
    17aa:	6013      	str	r3, [r2, #0]
		location += 32;
    17ac:	3320      	adds	r3, #32
	} while (location < end_addr);
    17ae:	4299      	cmp	r1, r3
    17b0:	d8fb      	bhi.n	17aa <rx_event+0x106>
	asm("dsb");
    17b2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    17b6:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    17ba:	2003      	movs	r0, #3
    17bc:	4639      	mov	r1, r7
    17be:	f7ff fdc1 	bl	1344 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    17c2:	4b0c      	ldr	r3, [pc, #48]	; (17f4 <rx_event+0x150>)
    17c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    17c8:	601a      	str	r2, [r3, #0]
    17ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17ce:	bf00      	nop
    17d0:	2000142e 	.word	0x2000142e
    17d4:	20001310 	.word	0x20001310
    17d8:	20001420 	.word	0x20001420
    17dc:	20001424 	.word	0x20001424
    17e0:	200012fc 	.word	0x200012fc
    17e4:	20001434 	.word	0x20001434
    17e8:	20202060 	.word	0x20202060
    17ec:	20001320 	.word	0x20001320
    17f0:	e000ef5c 	.word	0xe000ef5c
    17f4:	e000e10c 	.word	0xe000e10c
    17f8:	e000e18c 	.word	0xe000e18c
    17fc:	200014c4 	.word	0x200014c4

00001800 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    1800:	4770      	bx	lr
    1802:	bf00      	nop

00001804 <usb_serial_configure>:
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    1804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    1808:	4b45      	ldr	r3, [pc, #276]	; (1920 <usb_serial_configure+0x11c>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    180a:	2100      	movs	r1, #0
    180c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 195c <usb_serial_configure+0x158>
    1810:	2280      	movs	r2, #128	; 0x80
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    1812:	781b      	ldrb	r3, [r3, #0]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    1814:	460c      	mov	r4, r1
    1816:	f8df 8148 	ldr.w	r8, [pc, #328]	; 1960 <usb_serial_configure+0x15c>
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    181a:	460f      	mov	r7, r1
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    181c:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    181e:	4841      	ldr	r0, [pc, #260]	; (1924 <usb_serial_configure+0x120>)
    1820:	4e41      	ldr	r6, [pc, #260]	; (1928 <usb_serial_configure+0x124>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1822:	f44f 3900 	mov.w	r9, #131072	; 0x20000
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    1826:	bf14      	ite	ne
    1828:	f44f 7300 	movne.w	r3, #512	; 0x200
    182c:	2340      	moveq	r3, #64	; 0x40
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    182e:	4d3f      	ldr	r5, [pc, #252]	; (192c <usb_serial_configure+0x128>)
    1830:	f8aa 3000 	strh.w	r3, [sl]
    1834:	f8a8 3000 	strh.w	r3, [r8]
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1838:	f001 fb92 	bl	2f60 <memset>
	tx_head = 0;
    183c:	483c      	ldr	r0, [pc, #240]	; (1930 <usb_serial_configure+0x12c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    183e:	4621      	mov	r1, r4
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    1840:	4b3c      	ldr	r3, [pc, #240]	; (1934 <usb_serial_configure+0x130>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1842:	f44f 7280 	mov.w	r2, #256	; 0x100
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    1846:	7004      	strb	r4, [r0, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1848:	4630      	mov	r0, r6
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    184a:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    184c:	f001 fb88 	bl	2f60 <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    1850:	4939      	ldr	r1, [pc, #228]	; (1938 <usb_serial_configure+0x134>)
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1852:	4623      	mov	r3, r4
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    1854:	4839      	ldr	r0, [pc, #228]	; (193c <usb_serial_configure+0x138>)
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1856:	4622      	mov	r2, r4
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1858:	f8df e108 	ldr.w	lr, [pc, #264]	; 1964 <usb_serial_configure+0x160>
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    185c:	700c      	strb	r4, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    185e:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    1860:	7004      	strb	r4, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1862:	2002      	movs	r0, #2
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    1864:	602c      	str	r4, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    1866:	4d36      	ldr	r5, [pc, #216]	; (1940 <usb_serial_configure+0x13c>)
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1868:	f8ce 4000 	str.w	r4, [lr]
    186c:	f8ce 4004 	str.w	r4, [lr, #4]
    1870:	f8ce 4008 	str.w	r4, [lr, #8]
    1874:	f8ce 400c 	str.w	r4, [lr, #12]
	memset(rx_index, 0, sizeof(rx_index));
    1878:	602c      	str	r4, [r5, #0]
    187a:	606c      	str	r4, [r5, #4]
    187c:	60ac      	str	r4, [r5, #8]
    187e:	60ec      	str	r4, [r5, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1880:	f7ff fcce 	bl	1220 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    1884:	4622      	mov	r2, r4
    1886:	f8b8 1000 	ldrh.w	r1, [r8]
    188a:	2003      	movs	r0, #3
    188c:	4b2d      	ldr	r3, [pc, #180]	; (1944 <usb_serial_configure+0x140>)
    188e:	f7ff fc95 	bl	11bc <usb_config_rx>
    1892:	4d2d      	ldr	r5, [pc, #180]	; (1948 <usb_serial_configure+0x144>)
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    1894:	4623      	mov	r3, r4
    1896:	f8ba 1000 	ldrh.w	r1, [sl]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCIMVAC = location;
    189a:	4c2c      	ldr	r4, [pc, #176]	; (194c <usb_serial_configure+0x148>)
    189c:	2201      	movs	r2, #1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    189e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1968 <usb_serial_configure+0x164>
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    18a2:	2004      	movs	r0, #4
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
    18a4:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 196c <usb_serial_configure+0x168>
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    18a8:	f7ff fcba 	bl	1220 <usb_config_tx>
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    18ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    18b0:	f8b8 2000 	ldrh.w	r2, [r8]
    18b4:	4629      	mov	r1, r5
    18b6:	4630      	mov	r0, r6
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    18b8:	f8ca 3000 	str.w	r3, [sl]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    18bc:	463b      	mov	r3, r7
    18be:	f7ff fce3 	bl	1288 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    18c2:	f8b8 2000 	ldrh.w	r2, [r8]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    18c6:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    18ca:	442a      	add	r2, r5
	asm volatile("": : :"memory");
	asm("dsb");
    18cc:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    18d0:	6023      	str	r3, [r4, #0]
		location += 32;
    18d2:	3320      	adds	r3, #32
	} while (location < end_addr);
    18d4:	429a      	cmp	r2, r3
    18d6:	d8fb      	bhi.n	18d0 <usb_serial_configure+0xcc>
	asm("dsb");
    18d8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    18dc:	f3bf 8f6f 	isb	sy
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    18e0:	3701      	adds	r7, #1
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    18e2:	4631      	mov	r1, r6
    18e4:	2003      	movs	r0, #3
    18e6:	f505 7500 	add.w	r5, r5, #512	; 0x200
    18ea:	f7ff fd2b 	bl	1344 <usb_receive>
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    18ee:	2f08      	cmp	r7, #8
    18f0:	f106 0620 	add.w	r6, r6, #32
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
    18f4:	f8cb 9000 	str.w	r9, [fp]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    18f8:	d1d8      	bne.n	18ac <usb_serial_configure+0xa8>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    18fa:	4b15      	ldr	r3, [pc, #84]	; (1950 <usb_serial_configure+0x14c>)
	USB1_GPTIMER0LD = microseconds - 1;
    18fc:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    18fe:	4815      	ldr	r0, [pc, #84]	; (1954 <usb_serial_configure+0x150>)
	USB1_GPTIMER0CTRL = 0;
    1900:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    1902:	4c15      	ldr	r4, [pc, #84]	; (1958 <usb_serial_configure+0x154>)
    1904:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    1906:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    190a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    190e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    1912:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1916:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    191a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    191e:	bf00      	nop
    1920:	200012d4 	.word	0x200012d4
    1924:	20001440 	.word	0x20001440
    1928:	20001320 	.word	0x20001320
    192c:	20001434 	.word	0x20001434
    1930:	2000130f 	.word	0x2000130f
    1934:	20001430 	.word	0x20001430
    1938:	20001310 	.word	0x20001310
    193c:	20001420 	.word	0x20001420
    1940:	200012fc 	.word	0x200012fc
    1944:	000016a5 	.word	0x000016a5
    1948:	20202060 	.word	0x20202060
    194c:	e000ef5c 	.word	0xe000ef5c
    1950:	402e0000 	.word	0x402e0000
    1954:	200012c4 	.word	0x200012c4
    1958:	0000148d 	.word	0x0000148d
    195c:	2000130c 	.word	0x2000130c
    1960:	2000142e 	.word	0x2000142e
    1964:	200014c4 	.word	0x200014c4
    1968:	e000e18c 	.word	0xe000e18c
    196c:	e000e10c 	.word	0xe000e10c

00001970 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    1970:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1974:	4b48      	ldr	r3, [pc, #288]	; (1a98 <usb_serial_read+0x128>)

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    1976:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    197a:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    197c:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    197e:	4a47      	ldr	r2, [pc, #284]	; (1a9c <usb_serial_read+0x12c>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1980:	4688      	mov	r8, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    1982:	7815      	ldrb	r5, [r2, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1984:	2900      	cmp	r1, #0
    1986:	f000 8083 	beq.w	1a90 <usb_serial_read+0x120>
    198a:	4a45      	ldr	r2, [pc, #276]	; (1aa0 <usb_serial_read+0x130>)
    198c:	b2ed      	uxtb	r5, r5
    198e:	7812      	ldrb	r2, [r2, #0]
    1990:	4295      	cmp	r5, r2
    1992:	d07f      	beq.n	1a94 <usb_serial_read+0x124>
    1994:	f04f 0b00 	mov.w	fp, #0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCIMVAC = location;
    1998:	4f42      	ldr	r7, [pc, #264]	; (1aa4 <usb_serial_read+0x134>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    199a:	9301      	str	r3, [sp, #4]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
    199c:	9000      	str	r0, [sp, #0]
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    199e:	3501      	adds	r5, #1
		uint32_t i = rx_list[tail];
    19a0:	4b41      	ldr	r3, [pc, #260]	; (1aa8 <usb_serial_read+0x138>)
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    19a2:	f8df a120 	ldr.w	sl, [pc, #288]	; 1ac4 <usb_serial_read+0x154>
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    19a6:	ebcb 0408 	rsb	r4, fp, r8
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    19aa:	2d09      	cmp	r5, #9
    19ac:	bf28      	it	cs
    19ae:	2500      	movcs	r5, #0
		uint32_t i = rx_list[tail];
    19b0:	f813 9005 	ldrb.w	r9, [r3, r5]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    19b4:	4b3d      	ldr	r3, [pc, #244]	; (1aac <usb_serial_read+0x13c>)
    19b6:	f83a 1019 	ldrh.w	r1, [sl, r9, lsl #1]
    19ba:	f833 6019 	ldrh.w	r6, [r3, r9, lsl #1]
    19be:	1a76      	subs	r6, r6, r1
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    19c0:	42b4      	cmp	r4, r6
    19c2:	d21e      	bcs.n	1a02 <usb_serial_read+0x92>
    19c4:	464b      	mov	r3, r9
    19c6:	f8dd 9000 	ldr.w	r9, [sp]
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    19ca:	4622      	mov	r2, r4
    19cc:	eb01 2143 	add.w	r1, r1, r3, lsl #9
    19d0:	9300      	str	r3, [sp, #0]
    19d2:	4b37      	ldr	r3, [pc, #220]	; (1ab0 <usb_serial_read+0x140>)
    19d4:	4648      	mov	r0, r9
    19d6:	4419      	add	r1, r3
    19d8:	f000 fb02 	bl	1fe0 <memcpy>
			rx_available -= len;
    19dc:	4b35      	ldr	r3, [pc, #212]	; (1ab4 <usb_serial_read+0x144>)
    19de:	4640      	mov	r0, r8
    19e0:	6819      	ldr	r1, [r3, #0]
			rx_index[i] += len;
    19e2:	9b00      	ldr	r3, [sp, #0]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    19e4:	1b09      	subs	r1, r1, r4
			rx_index[i] += len;
    19e6:	f83a 2013 	ldrh.w	r2, [sl, r3, lsl #1]
    19ea:	4414      	add	r4, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    19ec:	4a31      	ldr	r2, [pc, #196]	; (1ab4 <usb_serial_read+0x144>)
			rx_index[i] += len;
    19ee:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    19f2:	6011      	str	r1, [r2, #0]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    19f4:	4b30      	ldr	r3, [pc, #192]	; (1ab8 <usb_serial_read+0x148>)
    19f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    19fa:	601a      	str	r2, [r3, #0]
	return count;
}
    19fc:	b003      	add	sp, #12
    19fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1a02:	f8dd e000 	ldr.w	lr, [sp]
    1a06:	ea4f 2449 	mov.w	r4, r9, lsl #9

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1a0a:	4b29      	ldr	r3, [pc, #164]	; (1ab0 <usb_serial_read+0x140>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1a0c:	4632      	mov	r2, r6
    1a0e:	4421      	add	r1, r4
    1a10:	4670      	mov	r0, lr

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1a12:	441c      	add	r4, r3
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    1a14:	4673      	mov	r3, lr
			rx_available -= avail;
			count += avail;
    1a16:	44b3      	add	fp, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    1a18:	4433      	add	r3, r6
    1a1a:	9300      	str	r3, [sp, #0]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1a1c:	4b24      	ldr	r3, [pc, #144]	; (1ab0 <usb_serial_read+0x140>)
    1a1e:	4419      	add	r1, r3
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1a20:	4b26      	ldr	r3, [pc, #152]	; (1abc <usb_serial_read+0x14c>)
    1a22:	eb03 1a49 	add.w	sl, r3, r9, lsl #5
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1a26:	f000 fadb 	bl	1fe0 <memcpy>
			p += avail;
			rx_available -= avail;
    1a2a:	4b22      	ldr	r3, [pc, #136]	; (1ab4 <usb_serial_read+0x144>)
    1a2c:	4821      	ldr	r0, [pc, #132]	; (1ab4 <usb_serial_read+0x144>)
			count += avail;
			rx_tail = tail;
    1a2e:	b2ea      	uxtb	r2, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    1a30:	681b      	ldr	r3, [r3, #0]
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1a32:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1a36:	4621      	mov	r1, r4
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    1a38:	1b9e      	subs	r6, r3, r6
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1a3a:	464b      	mov	r3, r9
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    1a3c:	6006      	str	r6, [r0, #0]
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1a3e:	4650      	mov	r0, sl
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
			count += avail;
			rx_tail = tail;
    1a40:	4e16      	ldr	r6, [pc, #88]	; (1a9c <usb_serial_read+0x12c>)
    1a42:	7032      	strb	r2, [r6, #0]
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1a44:	9a01      	ldr	r2, [sp, #4]
    1a46:	f8c2 e000 	str.w	lr, [r2]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1a4a:	4a1d      	ldr	r2, [pc, #116]	; (1ac0 <usb_serial_read+0x150>)
    1a4c:	8812      	ldrh	r2, [r2, #0]
    1a4e:	f7ff fc1b 	bl	1288 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    1a52:	4b1b      	ldr	r3, [pc, #108]	; (1ac0 <usb_serial_read+0x150>)
    1a54:	881a      	ldrh	r2, [r3, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1a56:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1a5a:	4414      	add	r4, r2
	asm volatile("": : :"memory");
	asm("dsb");
    1a5c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    1a60:	603b      	str	r3, [r7, #0]
		location += 32;
    1a62:	3320      	adds	r3, #32
	} while (location < end_addr);
    1a64:	429c      	cmp	r4, r3
    1a66:	d8fb      	bhi.n	1a60 <usb_serial_read+0xf0>
	asm("dsb");
    1a68:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1a6c:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    1a70:	2003      	movs	r0, #3
    1a72:	4651      	mov	r1, sl
    1a74:	f7ff fc66 	bl	1344 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1a7c:	4a0e      	ldr	r2, [pc, #56]	; (1ab8 <usb_serial_read+0x148>)

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1a7e:	45d8      	cmp	r8, fp
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1a80:	6013      	str	r3, [r2, #0]

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1a82:	d903      	bls.n	1a8c <usb_serial_read+0x11c>
    1a84:	4b06      	ldr	r3, [pc, #24]	; (1aa0 <usb_serial_read+0x130>)
    1a86:	781b      	ldrb	r3, [r3, #0]
    1a88:	429d      	cmp	r5, r3
    1a8a:	d188      	bne.n	199e <usb_serial_read+0x2e>
    1a8c:	4658      	mov	r0, fp
    1a8e:	e7b1      	b.n	19f4 <usb_serial_read+0x84>
    1a90:	4608      	mov	r0, r1
    1a92:	e7af      	b.n	19f4 <usb_serial_read+0x84>
    1a94:	2000      	movs	r0, #0
    1a96:	e7ad      	b.n	19f4 <usb_serial_read+0x84>
    1a98:	e000e18c 	.word	0xe000e18c
    1a9c:	20001420 	.word	0x20001420
    1aa0:	20001310 	.word	0x20001310
    1aa4:	e000ef5c 	.word	0xe000ef5c
    1aa8:	20001424 	.word	0x20001424
    1aac:	200014c4 	.word	0x200014c4
    1ab0:	20202060 	.word	0x20202060
    1ab4:	20001434 	.word	0x20001434
    1ab8:	e000e10c 	.word	0xe000e10c
    1abc:	20001320 	.word	0x20001320
    1ac0:	2000142e 	.word	0x2000142e
    1ac4:	200012fc 	.word	0x200012fc

00001ac8 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1ac8:	4b0c      	ldr	r3, [pc, #48]	; (1afc <usb_serial_peekchar+0x34>)
	if (tail == rx_head) return -1;
    1aca:	4a0d      	ldr	r2, [pc, #52]	; (1b00 <usb_serial_peekchar+0x38>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1acc:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    1ace:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1ad0:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    1ad2:	4293      	cmp	r3, r2
    1ad4:	d00f      	beq.n	1af6 <usb_serial_peekchar+0x2e>
	if (++tail > RX_NUM) tail = 0;
    1ad6:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    1ad8:	480a      	ldr	r0, [pc, #40]	; (1b04 <usb_serial_peekchar+0x3c>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1ada:	490b      	ldr	r1, [pc, #44]	; (1b08 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1adc:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1ade:	4a0b      	ldr	r2, [pc, #44]	; (1b0c <usb_serial_peekchar+0x44>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1ae0:	bf28      	it	cs
    1ae2:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1ae4:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1ae6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    1aea:	eb01 2343 	add.w	r3, r1, r3, lsl #9
    1aee:	4413      	add	r3, r2
    1af0:	f893 0f08 	ldrb.w	r0, [r3, #3848]	; 0xf08
    1af4:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    1af6:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    1afa:	4770      	bx	lr
    1afc:	20001420 	.word	0x20001420
    1b00:	20001310 	.word	0x20001310
    1b04:	20001424 	.word	0x20001424
    1b08:	20201158 	.word	0x20201158
    1b0c:	200012fc 	.word	0x200012fc

00001b10 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    1b10:	4b01      	ldr	r3, [pc, #4]	; (1b18 <usb_serial_available+0x8>)
    1b12:	6818      	ldr	r0, [r3, #0]
}
    1b14:	4770      	bx	lr
    1b16:	bf00      	nop
    1b18:	20001434 	.word	0x20001434

00001b1c <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    1b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    1b20:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1bfc <usb_serial_flush_input+0xe0>
	return rx_available;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    1b24:	b083      	sub	sp, #12
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    1b26:	4b2c      	ldr	r3, [pc, #176]	; (1bd8 <usb_serial_flush_input+0xbc>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    1b28:	f89b 6000 	ldrb.w	r6, [fp]
	while (tail != rx_head) {
    1b2c:	781b      	ldrb	r3, [r3, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    1b2e:	b2f6      	uxtb	r6, r6
	while (tail != rx_head) {
    1b30:	429e      	cmp	r6, r3
    1b32:	d04a      	beq.n	1bca <usb_serial_flush_input+0xae>
    1b34:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 1c00 <usb_serial_flush_input+0xe4>
    1b38:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 1c04 <usb_serial_flush_input+0xe8>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCIMVAC = location;
    1b3c:	4d27      	ldr	r5, [pc, #156]	; (1bdc <usb_serial_flush_input+0xc0>)
		if (++tail > RX_NUM) tail = 0;
    1b3e:	3601      	adds	r6, #1
    1b40:	2e08      	cmp	r6, #8
    1b42:	d845      	bhi.n	1bd0 <usb_serial_flush_input+0xb4>
    1b44:	fa5f fa86 	uxtb.w	sl, r6
		uint32_t i = rx_list[tail];
    1b48:	4b25      	ldr	r3, [pc, #148]	; (1be0 <usb_serial_flush_input+0xc4>)
		rx_available -= rx_count[i] - rx_index[i];
    1b4a:	4926      	ldr	r1, [pc, #152]	; (1be4 <usb_serial_flush_input+0xc8>)
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    1b4c:	5d9b      	ldrb	r3, [r3, r6]
		rx_available -= rx_count[i] - rx_index[i];
    1b4e:	f8d9 2000 	ldr.w	r2, [r9]
    1b52:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1b56:	4924      	ldr	r1, [pc, #144]	; (1be8 <usb_serial_flush_input+0xcc>)
    1b58:	eb01 2143 	add.w	r1, r1, r3, lsl #9
    1b5c:	460c      	mov	r4, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    1b5e:	4923      	ldr	r1, [pc, #140]	; (1bec <usb_serial_flush_input+0xd0>)
    1b60:	f831 e013 	ldrh.w	lr, [r1, r3, lsl #1]
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1b64:	4922      	ldr	r1, [pc, #136]	; (1bf0 <usb_serial_flush_input+0xd4>)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    1b66:	ebce 0e00 	rsb	lr, lr, r0
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1b6a:	9401      	str	r4, [sp, #4]
    1b6c:	eb01 1743 	add.w	r7, r1, r3, lsl #5
    1b70:	4621      	mov	r1, r4
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    1b72:	ebce 0202 	rsb	r2, lr, r2
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1b76:	f44f 3400 	mov.w	r4, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1b7a:	4638      	mov	r0, r7
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    1b7c:	f8c9 2000 	str.w	r2, [r9]
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1b80:	4a1c      	ldr	r2, [pc, #112]	; (1bf4 <usb_serial_flush_input+0xd8>)
    1b82:	6014      	str	r4, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1b84:	f8b8 2000 	ldrh.w	r2, [r8]
    1b88:	f7ff fb7e 	bl	1288 <usb_prepare_transfer>
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1b8c:	9901      	ldr	r1, [sp, #4]
	uint32_t end_addr = (uint32_t)addr + size;
    1b8e:	f8b8 2000 	ldrh.w	r2, [r8]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1b92:	f021 031f 	bic.w	r3, r1, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1b96:	4411      	add	r1, r2
    1b98:	460c      	mov	r4, r1
	asm volatile("": : :"memory");
	asm("dsb");
    1b9a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    1b9e:	602b      	str	r3, [r5, #0]
		location += 32;
    1ba0:	3320      	adds	r3, #32
	} while (location < end_addr);
    1ba2:	429c      	cmp	r4, r3
    1ba4:	d8fb      	bhi.n	1b9e <usb_serial_flush_input+0x82>
	asm("dsb");
    1ba6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1baa:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    1bae:	2003      	movs	r0, #3
    1bb0:	4639      	mov	r1, r7
    1bb2:	f7ff fbc7 	bl	1344 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1bb6:	4b10      	ldr	r3, [pc, #64]	; (1bf8 <usb_serial_flush_input+0xdc>)
    1bb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1bbc:	601a      	str	r2, [r3, #0]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    1bbe:	4b06      	ldr	r3, [pc, #24]	; (1bd8 <usb_serial_flush_input+0xbc>)
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
		rx_queue_transfer(i);
		rx_tail = tail;
    1bc0:	f88b a000 	strb.w	sl, [fp]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    1bc4:	781b      	ldrb	r3, [r3, #0]
    1bc6:	429e      	cmp	r6, r3
    1bc8:	d1b9      	bne.n	1b3e <usb_serial_flush_input+0x22>
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
		rx_queue_transfer(i);
		rx_tail = tail;
	}
}
    1bca:	b003      	add	sp, #12
    1bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bd0:	2600      	movs	r6, #0
// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    1bd2:	46b2      	mov	sl, r6
    1bd4:	e7b8      	b.n	1b48 <usb_serial_flush_input+0x2c>
    1bd6:	bf00      	nop
    1bd8:	20001310 	.word	0x20001310
    1bdc:	e000ef5c 	.word	0xe000ef5c
    1be0:	20001424 	.word	0x20001424
    1be4:	200014c4 	.word	0x200014c4
    1be8:	20202060 	.word	0x20202060
    1bec:	200012fc 	.word	0x200012fc
    1bf0:	20001320 	.word	0x20001320
    1bf4:	e000e18c 	.word	0xe000e18c
    1bf8:	e000e10c 	.word	0xe000e10c
    1bfc:	20001420 	.word	0x20001420
    1c00:	20001434 	.word	0x20001434
    1c04:	2000142e 	.word	0x2000142e

00001c08 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1c08:	b500      	push	{lr}
    1c0a:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    1c0c:	2101      	movs	r1, #1
    1c0e:	f10d 0007 	add.w	r0, sp, #7
    1c12:	f7ff fead 	bl	1970 <usb_serial_read>
    1c16:	b120      	cbz	r0, 1c22 <usb_serial_getchar+0x1a>
    1c18:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    1c1c:	b003      	add	sp, #12
    1c1e:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    1c22:	f04f 30ff 	mov.w	r0, #4294967295
    1c26:	e7f9      	b.n	1c1c <usb_serial_getchar+0x14>

00001c28 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1c28:	4b09      	ldr	r3, [pc, #36]	; (1c50 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1c2a:	b500      	push	{lr}
    1c2c:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1c2e:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1c30:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1c34:	b923      	cbnz	r3, 1c40 <usb_serial_putchar+0x18>
    1c36:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    1c3a:	b003      	add	sp, #12
    1c3c:	f85d fb04 	ldr.w	pc, [sp], #4
    1c40:	2101      	movs	r1, #1
    1c42:	f10d 0007 	add.w	r0, sp, #7
    1c46:	f7ff fc6d 	bl	1524 <usb_serial_write.part.1>
    1c4a:	b003      	add	sp, #12
    1c4c:	f85d fb04 	ldr.w	pc, [sp], #4
    1c50:	200012f8 	.word	0x200012f8

00001c54 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1c54:	4b04      	ldr	r3, [pc, #16]	; (1c68 <usb_serial_write+0x14>)
    1c56:	781b      	ldrb	r3, [r3, #0]
    1c58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    1c5c:	b10b      	cbz	r3, 1c62 <usb_serial_write+0xe>
    1c5e:	f7ff bc61 	b.w	1524 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1c62:	4610      	mov	r0, r2
    1c64:	4770      	bx	lr
    1c66:	bf00      	nop
    1c68:	200012f8 	.word	0x200012f8

00001c6c <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    1c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1c70:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    1c72:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1cb4 <usb_serial_write_buffer_free+0x48>
    1c76:	2301      	movs	r3, #1
    1c78:	4d0c      	ldr	r5, [pc, #48]	; (1cac <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    1c7a:	4627      	mov	r7, r4
    1c7c:	4e0c      	ldr	r6, [pc, #48]	; (1cb0 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    1c7e:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    1c82:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1c84:	4628      	mov	r0, r5
    1c86:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    1c88:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1c8a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    1c8e:	d005      	beq.n	1c9c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1c90:	f7ff fb9c 	bl	13cc <usb_transfer_status>
    1c94:	0603      	lsls	r3, r0, #24
    1c96:	bf58      	it	pl
    1c98:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1c9c:	2c04      	cmp	r4, #4
    1c9e:	d1f0      	bne.n	1c82 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    1ca0:	2300      	movs	r3, #0
	return sum;
}
    1ca2:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    1ca4:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    1ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1cac:	20001440 	.word	0x20001440
    1cb0:	2000130f 	.word	0x2000130f
    1cb4:	2000130e 	.word	0x2000130e

00001cb8 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    1cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    1cbc:	4b1f      	ldr	r3, [pc, #124]	; (1d3c <usb_serial_flush_output+0x84>)
    1cbe:	781b      	ldrb	r3, [r3, #0]
    1cc0:	b113      	cbz	r3, 1cc8 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    1cc2:	4d1f      	ldr	r5, [pc, #124]	; (1d40 <usb_serial_flush_output+0x88>)
    1cc4:	882a      	ldrh	r2, [r5, #0]
    1cc6:	b90a      	cbnz	r2, 1ccc <usb_serial_flush_output+0x14>
    1cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    1ccc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1d54 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    1cd0:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    1cd4:	4e1b      	ldr	r6, [pc, #108]	; (1d44 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    1cd6:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    1cda:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1cde:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1ce0:	4c19      	ldr	r4, [pc, #100]	; (1d48 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1ce2:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    1ce4:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    1ce8:	4f18      	ldr	r7, [pc, #96]	; (1d4c <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1cea:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1cee:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    1cf0:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1cf4:	4621      	mov	r1, r4
    1cf6:	f7ff fac7 	bl	1288 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    1cfa:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1cfe:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    1d02:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1d06:	4b12      	ldr	r3, [pc, #72]	; (1d50 <usb_serial_flush_output+0x98>)
    1d08:	6019      	str	r1, [r3, #0]
		location += 32;
    1d0a:	3120      	adds	r1, #32
	} while (location < end_addr);
    1d0c:	428a      	cmp	r2, r1
    1d0e:	d8fb      	bhi.n	1d08 <usb_serial_flush_output+0x50>
	asm("dsb");
    1d10:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1d14:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    1d18:	2004      	movs	r0, #4
    1d1a:	4631      	mov	r1, r6
    1d1c:	f7ff facc 	bl	12b8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1d20:	f898 3000 	ldrb.w	r3, [r8]
    1d24:	4a0b      	ldr	r2, [pc, #44]	; (1d54 <usb_serial_flush_output+0x9c>)
    1d26:	3301      	adds	r3, #1
    1d28:	b2db      	uxtb	r3, r3
    1d2a:	2b03      	cmp	r3, #3
    1d2c:	bf88      	it	hi
    1d2e:	2300      	movhi	r3, #0
    1d30:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    1d32:	2300      	movs	r3, #0
    1d34:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    1d36:	703b      	strb	r3, [r7, #0]
    1d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d3c:	200012f8 	.word	0x200012f8
    1d40:	20001430 	.word	0x20001430
    1d44:	20001440 	.word	0x20001440
    1d48:	20200060 	.word	0x20200060
    1d4c:	2000130e 	.word	0x2000130e
    1d50:	e000ef70 	.word	0xe000ef70
    1d54:	2000130f 	.word	0x2000130f

00001d58 <pendablesrvreq_isr>:
	}
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
    1d58:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1d5a:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    1d5e:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1d60:	4c0c      	ldr	r4, [pc, #48]	; (1d94 <pendablesrvreq_isr+0x3c>)
    1d62:	6823      	ldr	r3, [r4, #0]
		if (first) {
    1d64:	b18b      	cbz	r3, 1d8a <pendablesrvreq_isr+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1d66:	4e0c      	ldr	r6, [pc, #48]	; (1d98 <pendablesrvreq_isr+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    1d68:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    1d6a:	695a      	ldr	r2, [r3, #20]
    1d6c:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    1d6e:	b17a      	cbz	r2, 1d90 <pendablesrvreq_isr+0x38>
				firstInterrupt->_prev = nullptr;
    1d70:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1d72:	b901      	cbnz	r1, 1d76 <pendablesrvreq_isr+0x1e>
    1d74:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    1d76:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    1d78:	4618      	mov	r0, r3
    1d7a:	689b      	ldr	r3, [r3, #8]
    1d7c:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1d7e:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    1d82:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1d84:	6823      	ldr	r3, [r4, #0]
		if (first) {
    1d86:	2b00      	cmp	r3, #0
    1d88:	d1ef      	bne.n	1d6a <pendablesrvreq_isr+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1d8a:	b901      	cbnz	r1, 1d8e <pendablesrvreq_isr+0x36>
    1d8c:	b662      	cpsie	i
    1d8e:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1d90:	6032      	str	r2, [r6, #0]
    1d92:	e7ee      	b.n	1d72 <pendablesrvreq_isr+0x1a>
    1d94:	200014d8 	.word	0x200014d8
    1d98:	200014dc 	.word	0x200014dc

00001d9c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1d9c:	4a04      	ldr	r2, [pc, #16]	; (1db0 <systick_isr+0x14>)
    1d9e:	4b05      	ldr	r3, [pc, #20]	; (1db4 <systick_isr+0x18>)
    1da0:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    1da2:	4a05      	ldr	r2, [pc, #20]	; (1db8 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1da4:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    1da6:	6813      	ldr	r3, [r2, #0]
    1da8:	3301      	adds	r3, #1
    1daa:	6013      	str	r3, [r2, #0]
    1dac:	4770      	bx	lr
    1dae:	bf00      	nop
    1db0:	e0001004 	.word	0xe0001004
    1db4:	200012a4 	.word	0x200012a4
    1db8:	200012ac 	.word	0x200012ac

00001dbc <IntervalTimer::end()>:
}


void IntervalTimer::end() {
#if 1
	if (channel) {
    1dbc:	6802      	ldr	r2, [r0, #0]
    1dbe:	b30a      	cbz	r2, 1e04 <IntervalTimer::end()+0x48>
		int index = channel - IMXRT_PIT_CHANNELS;
    1dc0:	4b11      	ldr	r3, [pc, #68]	; (1e08 <IntervalTimer::end()+0x4c>)
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    1dc2:	4912      	ldr	r1, [pc, #72]	; (1e0c <IntervalTimer::end()+0x50>)


void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
    1dc4:	4413      	add	r3, r2
	NVIC_ENABLE_IRQ(IRQ_PIT);
	return true;
}


void IntervalTimer::end() {
    1dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
    1dc8:	111b      	asrs	r3, r3, #4
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    1dca:	25ff      	movs	r5, #255	; 0xff
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
    1dcc:	2400      	movs	r4, #0
    1dce:	f8df e044 	ldr.w	lr, [pc, #68]	; 1e14 <IntervalTimer::end()+0x58>
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    1dd2:	54cd      	strb	r5, [r1, r3]
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    1dd4:	780e      	ldrb	r6, [r1, #0]
    1dd6:	784d      	ldrb	r5, [r1, #1]
    1dd8:	2eff      	cmp	r6, #255	; 0xff
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
    1dda:	6094      	str	r4, [r2, #8]
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
    1ddc:	f84e 4023 	str.w	r4, [lr, r3, lsl #2]
    1de0:	bf28      	it	cs
    1de2:	26ff      	movcs	r6, #255	; 0xff
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    1de4:	788a      	ldrb	r2, [r1, #2]
    1de6:	78c9      	ldrb	r1, [r1, #3]
    1de8:	42ae      	cmp	r6, r5
    1dea:	4633      	mov	r3, r6
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    1dec:	4f08      	ldr	r7, [pc, #32]	; (1e10 <IntervalTimer::end()+0x54>)
    1dee:	bf28      	it	cs
    1df0:	462b      	movcs	r3, r5
    1df2:	4293      	cmp	r3, r2
    1df4:	bf28      	it	cs
    1df6:	4613      	movcs	r3, r2
    1df8:	428b      	cmp	r3, r1
    1dfa:	bf28      	it	cs
    1dfc:	460b      	movcs	r3, r1
    1dfe:	703b      	strb	r3, [r7, #0]
		channel = 0;
    1e00:	6004      	str	r4, [r0, #0]
    1e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e04:	4770      	bx	lr
    1e06:	bf00      	nop
    1e08:	bff7bf00 	.word	0xbff7bf00
    1e0c:	200005ec 	.word	0x200005ec
    1e10:	e000e47a 	.word	0xe000e47a
    1e14:	20001500 	.word	0x20001500

00001e18 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    1e18:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    1e1a:	f7fe f935 	bl	88 <setup>
	while (1) {
		loop();
    1e1e:	f7fe f973 	bl	108 <loop>
		yield();
    1e22:	f000 f865 	bl	1ef0 <yield>
    1e26:	e7fa      	b.n	1e1e <main+0x6>

00001e28 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    1e28:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    1e2a:	4c06      	ldr	r4, [pc, #24]	; (1e44 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    1e2c:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    1e2e:	6803      	ldr	r3, [r0, #0]
    1e30:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    1e32:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    1e34:	a901      	add	r1, sp, #4
    1e36:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    1e38:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    1e3c:	4798      	blx	r3
}
    1e3e:	b002      	add	sp, #8
    1e40:	bd10      	pop	{r4, pc}
    1e42:	bf00      	nop
    1e44:	2000046c 	.word	0x2000046c

00001e48 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    1e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e4a:	4606      	mov	r6, r0
    1e4c:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    1e4e:	2a00      	cmp	r2, #0
    1e50:	d033      	beq.n	1eba <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    1e52:	2a01      	cmp	r2, #1
    1e54:	bf08      	it	eq
    1e56:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    1e58:	b351      	cbz	r1, 1eb0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    1e5a:	2521      	movs	r5, #33	; 0x21
    1e5c:	e000      	b.n	1e60 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    1e5e:	b2fd      	uxtb	r5, r7
    1e60:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    1e62:	fbb1 f4f2 	udiv	r4, r1, r2
    1e66:	fb02 1114 	mls	r1, r2, r4, r1
    1e6a:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1e6c:	2909      	cmp	r1, #9
    1e6e:	f100 0137 	add.w	r1, r0, #55	; 0x37
    1e72:	f100 0030 	add.w	r0, r0, #48	; 0x30
    1e76:	bf88      	it	hi
    1e78:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    1e7a:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1e7c:	ac0a      	add	r4, sp, #40	; 0x28
    1e7e:	bf98      	it	ls
    1e80:	b2c0      	uxtbls	r0, r0
    1e82:	442c      	add	r4, r5
    1e84:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    1e88:	2900      	cmp	r1, #0
    1e8a:	d1e8      	bne.n	1e5e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    1e8c:	b133      	cbz	r3, 1e9c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    1e8e:	3d01      	subs	r5, #1
		buf[i] = '-';
    1e90:	ab0a      	add	r3, sp, #40	; 0x28
    1e92:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    1e94:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    1e96:	442b      	add	r3, r5
    1e98:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    1e9c:	6833      	ldr	r3, [r6, #0]
    1e9e:	a901      	add	r1, sp, #4
    1ea0:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    1ea4:	4630      	mov	r0, r6
    1ea6:	4429      	add	r1, r5
    1ea8:	685b      	ldr	r3, [r3, #4]
    1eaa:	4798      	blx	r3
}
    1eac:	b00b      	add	sp, #44	; 0x2c
    1eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    1eb0:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    1eb2:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    1eb4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    1eb8:	e7e8      	b.n	1e8c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    1eba:	6803      	ldr	r3, [r0, #0]
    1ebc:	b2c9      	uxtb	r1, r1
    1ebe:	681b      	ldr	r3, [r3, #0]
    1ec0:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    1ec2:	b00b      	add	sp, #44	; 0x2c
    1ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ec6:	bf00      	nop

00001ec8 <usb_serial_class::clear()>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    1ec8:	f7ff be28 	b.w	1b1c <usb_serial_flush_input>

00001ecc <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    1ecc:	f7ff bdfc 	b.w	1ac8 <usb_serial_peekchar>

00001ed0 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    1ed0:	f7ff be9a 	b.w	1c08 <usb_serial_getchar>

00001ed4 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1ed4:	f7ff be1c 	b.w	1b10 <usb_serial_available>

00001ed8 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    1ed8:	f7ff beee 	b.w	1cb8 <usb_serial_flush_output>

00001edc <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    1edc:	f7ff bec6 	b.w	1c6c <usb_serial_write_buffer_free>

00001ee0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1ee0:	4608      	mov	r0, r1
    1ee2:	4611      	mov	r1, r2
    1ee4:	f7ff beb6 	b.w	1c54 <usb_serial_write>

00001ee8 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1ee8:	4608      	mov	r0, r1
    1eea:	f7ff be9d 	b.w	1c28 <usb_serial_putchar>
    1eee:	bf00      	nop

00001ef0 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    1ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    1ef4:	4e32      	ldr	r6, [pc, #200]	; (1fc0 <yield+0xd0>)
    1ef6:	7833      	ldrb	r3, [r6, #0]
    1ef8:	b193      	cbz	r3, 1f20 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    1efa:	4f32      	ldr	r7, [pc, #200]	; (1fc4 <yield+0xd4>)
    1efc:	783a      	ldrb	r2, [r7, #0]
    1efe:	b97a      	cbnz	r2, 1f20 <yield+0x30>
	running = 1;
    1f00:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    1f02:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    1f04:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    1f06:	d437      	bmi.n	1f78 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    1f08:	079a      	lsls	r2, r3, #30
    1f0a:	d419      	bmi.n	1f40 <yield+0x50>

	running = 0;
    1f0c:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    1f0e:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    1f10:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    1f12:	d505      	bpl.n	1f20 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    1f14:	4b2c      	ldr	r3, [pc, #176]	; (1fc8 <yield+0xd8>)
    1f16:	681a      	ldr	r2, [r3, #0]
    1f18:	b112      	cbz	r2, 1f20 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1f1a:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    1f1e:	b10a      	cbz	r2, 1f24 <yield+0x34>
    1f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1f24:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    1f28:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    1f2a:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    1f2c:	b11a      	cbz	r2, 1f36 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    1f2e:	4c27      	ldr	r4, [pc, #156]	; (1fcc <yield+0xdc>)
    1f30:	7821      	ldrb	r1, [r4, #0]
    1f32:	2900      	cmp	r1, #0
    1f34:	d02f      	beq.n	1f96 <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1f36:	2800      	cmp	r0, #0
    1f38:	d1f2      	bne.n	1f20 <yield+0x30>
    1f3a:	b662      	cpsie	i
    1f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    1f40:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1fd8 <yield+0xe8>
    1f44:	f898 2000 	ldrb.w	r2, [r8]
    1f48:	2a00      	cmp	r2, #0
    1f4a:	d0df      	beq.n	1f0c <yield+0x1c>
    1f4c:	2400      	movs	r4, #0
    1f4e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1fdc <yield+0xec>
    1f52:	e005      	b.n	1f60 <yield+0x70>
    1f54:	3401      	adds	r4, #1
    1f56:	f898 3000 	ldrb.w	r3, [r8]
    1f5a:	b2e4      	uxtb	r4, r4
    1f5c:	42a3      	cmp	r3, r4
    1f5e:	d913      	bls.n	1f88 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    1f60:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    1f64:	682b      	ldr	r3, [r5, #0]
    1f66:	4628      	mov	r0, r5
    1f68:	691b      	ldr	r3, [r3, #16]
    1f6a:	4798      	blx	r3
    1f6c:	2800      	cmp	r0, #0
    1f6e:	d0f1      	beq.n	1f54 <yield+0x64>
    1f70:	696b      	ldr	r3, [r5, #20]
    1f72:	689b      	ldr	r3, [r3, #8]
    1f74:	4798      	blx	r3
    1f76:	e7ed      	b.n	1f54 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1f78:	f7ff fdca 	bl	1b10 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    1f7c:	b9d0      	cbnz	r0, 1fb4 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    1f7e:	4b14      	ldr	r3, [pc, #80]	; (1fd0 <yield+0xe0>)
    1f80:	781b      	ldrb	r3, [r3, #0]
    1f82:	b91b      	cbnz	r3, 1f8c <yield+0x9c>
    1f84:	7833      	ldrb	r3, [r6, #0]
    1f86:	e7bf      	b.n	1f08 <yield+0x18>
    1f88:	7833      	ldrb	r3, [r6, #0]
    1f8a:	e7bf      	b.n	1f0c <yield+0x1c>
    1f8c:	7833      	ldrb	r3, [r6, #0]
    1f8e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1f92:	7033      	strb	r3, [r6, #0]
    1f94:	e7b8      	b.n	1f08 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1f96:	2601      	movs	r6, #1
		firstYield = first->_next;
    1f98:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1f9a:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    1f9c:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    1f9e:	b165      	cbz	r5, 1fba <yield+0xca>
			firstYield->_prev = nullptr;
    1fa0:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1fa2:	b900      	cbnz	r0, 1fa6 <yield+0xb6>
    1fa4:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    1fa6:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    1fa8:	6893      	ldr	r3, [r2, #8]
    1faa:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    1fac:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    1fae:	4798      	blx	r3
		runningFromYield = false;
    1fb0:	7025      	strb	r5, [r4, #0]
    1fb2:	e7b5      	b.n	1f20 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    1fb4:	f000 fcba 	bl	292c <serialEvent()>
    1fb8:	e7e1      	b.n	1f7e <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    1fba:	4b06      	ldr	r3, [pc, #24]	; (1fd4 <yield+0xe4>)
    1fbc:	601d      	str	r5, [r3, #0]
    1fbe:	e7f0      	b.n	1fa2 <yield+0xb2>
    1fc0:	20000600 	.word	0x20000600
    1fc4:	20001510 	.word	0x20001510
    1fc8:	200014e4 	.word	0x200014e4
    1fcc:	200014e8 	.word	0x200014e8
    1fd0:	60001aa6 	.word	0x60001aa6
    1fd4:	200014e0 	.word	0x200014e0
    1fd8:	20001534 	.word	0x20001534
    1fdc:	20001514 	.word	0x20001514

00001fe0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1fe0:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1fe2:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1fe6:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1fea:	d16d      	bne.n	20c8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1fec:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1fee:	d341      	bcc.n	2074 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1ff0:	f851 3b04 	ldr.w	r3, [r1], #4
    1ff4:	f840 3b04 	str.w	r3, [r0], #4
    1ff8:	f851 3b04 	ldr.w	r3, [r1], #4
    1ffc:	f840 3b04 	str.w	r3, [r0], #4
    2000:	f851 3b04 	ldr.w	r3, [r1], #4
    2004:	f840 3b04 	str.w	r3, [r0], #4
    2008:	f851 3b04 	ldr.w	r3, [r1], #4
    200c:	f840 3b04 	str.w	r3, [r0], #4
    2010:	f851 3b04 	ldr.w	r3, [r1], #4
    2014:	f840 3b04 	str.w	r3, [r0], #4
    2018:	f851 3b04 	ldr.w	r3, [r1], #4
    201c:	f840 3b04 	str.w	r3, [r0], #4
    2020:	f851 3b04 	ldr.w	r3, [r1], #4
    2024:	f840 3b04 	str.w	r3, [r0], #4
    2028:	f851 3b04 	ldr.w	r3, [r1], #4
    202c:	f840 3b04 	str.w	r3, [r0], #4
    2030:	f851 3b04 	ldr.w	r3, [r1], #4
    2034:	f840 3b04 	str.w	r3, [r0], #4
    2038:	f851 3b04 	ldr.w	r3, [r1], #4
    203c:	f840 3b04 	str.w	r3, [r0], #4
    2040:	f851 3b04 	ldr.w	r3, [r1], #4
    2044:	f840 3b04 	str.w	r3, [r0], #4
    2048:	f851 3b04 	ldr.w	r3, [r1], #4
    204c:	f840 3b04 	str.w	r3, [r0], #4
    2050:	f851 3b04 	ldr.w	r3, [r1], #4
    2054:	f840 3b04 	str.w	r3, [r0], #4
    2058:	f851 3b04 	ldr.w	r3, [r1], #4
    205c:	f840 3b04 	str.w	r3, [r0], #4
    2060:	f851 3b04 	ldr.w	r3, [r1], #4
    2064:	f840 3b04 	str.w	r3, [r0], #4
    2068:	f851 3b04 	ldr.w	r3, [r1], #4
    206c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2070:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    2072:	d2bd      	bcs.n	1ff0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2074:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2076:	d311      	bcc.n	209c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2078:	f851 3b04 	ldr.w	r3, [r1], #4
    207c:	f840 3b04 	str.w	r3, [r0], #4
    2080:	f851 3b04 	ldr.w	r3, [r1], #4
    2084:	f840 3b04 	str.w	r3, [r0], #4
    2088:	f851 3b04 	ldr.w	r3, [r1], #4
    208c:	f840 3b04 	str.w	r3, [r0], #4
    2090:	f851 3b04 	ldr.w	r3, [r1], #4
    2094:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2098:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    209a:	d2ed      	bcs.n	2078 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    209c:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    209e:	d305      	bcc.n	20ac <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    20a0:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    20a4:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    20a8:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    20aa:	d2f9      	bcs.n	20a0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    20ac:	3204      	adds	r2, #4
	beq	.Ldone
    20ae:	d008      	beq.n	20c2 <memcpy+0xe2>

	lsls	r2, r2, #31
    20b0:	07d2      	lsls	r2, r2, #31
	itt ne
    20b2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    20b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    20b8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    20bc:	d301      	bcc.n	20c2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    20be:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    20c0:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    20c2:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    20c4:	4770      	bx	lr
    20c6:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    20c8:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    20ca:	d313      	bcc.n	20f4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    20cc:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    20ce:	d08d      	beq.n	1fec <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    20d0:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    20d4:	d08a      	beq.n	1fec <memcpy+0xc>

	rsb	r3, #4
    20d6:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    20da:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    20dc:	07db      	lsls	r3, r3, #31
	itt ne
    20de:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    20e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    20e4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    20e8:	d380      	bcc.n	1fec <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    20ea:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    20ee:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    20f2:	e77b      	b.n	1fec <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    20f4:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    20f6:	d3d9      	bcc.n	20ac <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    20f8:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    20fa:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    20fe:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    2102:	d2f9      	bcs.n	20f8 <memcpy+0x118>

	ldrb	r3, [r1]
    2104:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    2106:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2108:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    210a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    210c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    210e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2110:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2112:	4770      	bx	lr

00002114 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2114:	4a95      	ldr	r2, [pc, #596]	; (236c <set_arm_clock+0x258>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2116:	4b96      	ldr	r3, [pc, #600]	; (2370 <set_arm_clock+0x25c>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2118:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    211a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    211e:	4c95      	ldr	r4, [pc, #596]	; (2374 <set_arm_clock+0x260>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2120:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    2124:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    2126:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2128:	d91c      	bls.n	2164 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    212a:	4b93      	ldr	r3, [pc, #588]	; (2378 <set_arm_clock+0x264>)
    212c:	4298      	cmp	r0, r3
    212e:	f240 8113 	bls.w	2358 <set_arm_clock+0x244>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2132:	4b92      	ldr	r3, [pc, #584]	; (237c <set_arm_clock+0x268>)
    2134:	f240 6527 	movw	r5, #1575	; 0x627
    2138:	4f91      	ldr	r7, [pc, #580]	; (2380 <set_arm_clock+0x26c>)
    213a:	4403      	add	r3, r0
    213c:	4c91      	ldr	r4, [pc, #580]	; (2384 <set_arm_clock+0x270>)
    213e:	0a1a      	lsrs	r2, r3, #8
    2140:	fba7 3202 	umull	r3, r2, r7, r2
    2144:	09d3      	lsrs	r3, r2, #7
    2146:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    214a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    214e:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    2152:	42ab      	cmp	r3, r5
    2154:	bf28      	it	cs
    2156:	462b      	movcs	r3, r5
    2158:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    215c:	fba4 3503 	umull	r3, r5, r4, r3
    2160:	08ed      	lsrs	r5, r5, #3
    2162:	e004      	b.n	216e <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    2164:	4d88      	ldr	r5, [pc, #544]	; (2388 <set_arm_clock+0x274>)
    2166:	42a8      	cmp	r0, r5
    2168:	bf94      	ite	ls
    216a:	2506      	movls	r5, #6
    216c:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    216e:	4a80      	ldr	r2, [pc, #512]	; (2370 <set_arm_clock+0x25c>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2170:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2174:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2178:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    217a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    217e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2182:	d20a      	bcs.n	219a <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2184:	4b7b      	ldr	r3, [pc, #492]	; (2374 <set_arm_clock+0x260>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2186:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    218a:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    218c:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    218e:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2190:	6813      	ldr	r3, [r2, #0]
    2192:	2b00      	cmp	r3, #0
    2194:	dafc      	bge.n	2190 <set_arm_clock+0x7c>
    2196:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    219a:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    219e:	d12f      	bne.n	2200 <set_arm_clock+0xec>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    21a0:	4c7a      	ldr	r4, [pc, #488]	; (238c <set_arm_clock+0x278>)
    21a2:	4a7b      	ldr	r2, [pc, #492]	; (2390 <set_arm_clock+0x27c>)
    21a4:	f8d4 c010 	ldr.w	ip, [r4, #16]
    21a8:	4614      	mov	r4, r2
    21aa:	ea0c 0202 	and.w	r2, ip, r2
    21ae:	42a2      	cmp	r2, r4
    21b0:	bf0a      	itet	eq
    21b2:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    21b6:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    21ba:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    21bc:	ea8e 0403 	eor.w	r4, lr, r3
    21c0:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    21c4:	d006      	beq.n	21d4 <set_arm_clock+0xc0>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    21c6:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    21ca:	4c69      	ldr	r4, [pc, #420]	; (2370 <set_arm_clock+0x25c>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    21cc:	ea4e 0e03 	orr.w	lr, lr, r3
			CCM_CBCDR = cbcdr;
    21d0:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    21d4:	ea81 0302 	eor.w	r3, r1, r2
    21d8:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    21dc:	d008      	beq.n	21f0 <set_arm_clock+0xdc>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    21de:	4b64      	ldr	r3, [pc, #400]	; (2370 <set_arm_clock+0x25c>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    21e0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    21e4:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    21e6:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    21e8:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    21ea:	6c93      	ldr	r3, [r2, #72]	; 0x48
    21ec:	071c      	lsls	r4, r3, #28
    21ee:	d4fc      	bmi.n	21ea <set_arm_clock+0xd6>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    21f0:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    21f4:	4a5e      	ldr	r2, [pc, #376]	; (2370 <set_arm_clock+0x25c>)
    21f6:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    21fa:	6c93      	ldr	r3, [r2, #72]	; 0x48
    21fc:	0699      	lsls	r1, r3, #26
    21fe:	d4fc      	bmi.n	21fa <set_arm_clock+0xe6>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    2200:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2202:	4c64      	ldr	r4, [pc, #400]	; (2394 <set_arm_clock+0x280>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    2204:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    2206:	fb01 f302 	mul.w	r3, r1, r2
    220a:	fb00 f303 	mul.w	r3, r0, r3
    220e:	42a3      	cmp	r3, r4
    2210:	d809      	bhi.n	2226 <set_arm_clock+0x112>
		if (div_arm < 8) {
    2212:	2a07      	cmp	r2, #7
    2214:	f200 8095 	bhi.w	2342 <set_arm_clock+0x22e>
			div_arm = div_arm + 1;
    2218:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    221a:	fb01 f302 	mul.w	r3, r1, r2
    221e:	fb00 f303 	mul.w	r3, r0, r3
    2222:	42a3      	cmp	r3, r4
    2224:	d9f5      	bls.n	2212 <set_arm_clock+0xfe>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2226:	485c      	ldr	r0, [pc, #368]	; (2398 <set_arm_clock+0x284>)
    2228:	4c5c      	ldr	r4, [pc, #368]	; (239c <set_arm_clock+0x288>)
    222a:	4418      	add	r0, r3
    222c:	fba4 0300 	umull	r0, r3, r4, r0
    2230:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    2232:	2b6c      	cmp	r3, #108	; 0x6c
    2234:	f200 808b 	bhi.w	234e <set_arm_clock+0x23a>
	if (mult < 54) mult = 54;
    2238:	2b35      	cmp	r3, #53	; 0x35
    223a:	f200 808f 	bhi.w	235c <set_arm_clock+0x248>
    223e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 23c8 <set_arm_clock+0x2b4>
    2242:	2336      	movs	r3, #54	; 0x36
    2244:	4856      	ldr	r0, [pc, #344]	; (23a0 <set_arm_clock+0x28c>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2246:	f8df c144 	ldr.w	ip, [pc, #324]	; 238c <set_arm_clock+0x278>
    224a:	4c56      	ldr	r4, [pc, #344]	; (23a4 <set_arm_clock+0x290>)
    224c:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    2250:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2254:	ea09 0404 	and.w	r4, r9, r4
    2258:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    225a:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    225e:	d00b      	beq.n	2278 <set_arm_clock+0x164>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    2260:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2264:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2268:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    226a:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    226e:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2272:	6823      	ldr	r3, [r4, #0]
    2274:	2b00      	cmp	r3, #0
    2276:	dafc      	bge.n	2272 <set_arm_clock+0x15e>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    2278:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 2370 <set_arm_clock+0x25c>
    227c:	3a01      	subs	r2, #1
    227e:	f8dc 3010 	ldr.w	r3, [ip, #16]
    2282:	f003 0307 	and.w	r3, r3, #7
    2286:	4293      	cmp	r3, r2
    2288:	d007      	beq.n	229a <set_arm_clock+0x186>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    228a:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    228e:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2290:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2294:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2296:	03db      	lsls	r3, r3, #15
    2298:	d4fc      	bmi.n	2294 <set_arm_clock+0x180>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    229a:	3901      	subs	r1, #1
    229c:	0289      	lsls	r1, r1, #10
    229e:	ea8e 0301 	eor.w	r3, lr, r1
    22a2:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    22a6:	d00c      	beq.n	22c2 <set_arm_clock+0x1ae>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    22a8:	4b31      	ldr	r3, [pc, #196]	; (2370 <set_arm_clock+0x25c>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    22aa:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    22ae:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    22b2:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    22b4:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    22b8:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    22bc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    22be:	0799      	lsls	r1, r3, #30
    22c0:	d4fc      	bmi.n	22bc <set_arm_clock+0x1a8>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    22c2:	4b39      	ldr	r3, [pc, #228]	; (23a8 <set_arm_clock+0x294>)
    22c4:	4939      	ldr	r1, [pc, #228]	; (23ac <set_arm_clock+0x298>)
    22c6:	4403      	add	r3, r0
    22c8:	09db      	lsrs	r3, r3, #7
    22ca:	fba1 3103 	umull	r3, r1, r1, r3
    22ce:	0b09      	lsrs	r1, r1, #12
    22d0:	2904      	cmp	r1, #4
    22d2:	bf28      	it	cs
    22d4:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    22d6:	1e4b      	subs	r3, r1, #1
    22d8:	021b      	lsls	r3, r3, #8
    22da:	ea8e 0203 	eor.w	r2, lr, r3
    22de:	f412 7f40 	tst.w	r2, #768	; 0x300
    22e2:	d007      	beq.n	22f4 <set_arm_clock+0x1e0>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    22e4:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    22e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    22ec:	4a20      	ldr	r2, [pc, #128]	; (2370 <set_arm_clock+0x25c>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    22ee:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    22f2:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    22f4:	4b1e      	ldr	r3, [pc, #120]	; (2370 <set_arm_clock+0x25c>)
    22f6:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    22f8:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    22fa:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    22fe:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2300:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2302:	069b      	lsls	r3, r3, #26
    2304:	d4fc      	bmi.n	2300 <set_arm_clock+0x1ec>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2306:	4b2a      	ldr	r3, [pc, #168]	; (23b0 <set_arm_clock+0x29c>)
    2308:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    230c:	4c29      	ldr	r4, [pc, #164]	; (23b4 <set_arm_clock+0x2a0>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    230e:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2310:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2314:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2316:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    231a:	4c27      	ldr	r4, [pc, #156]	; (23b8 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    231c:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2320:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2324:	4a25      	ldr	r2, [pc, #148]	; (23bc <set_arm_clock+0x2a8>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2326:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2328:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    232a:	d208      	bcs.n	233e <set_arm_clock+0x22a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    232c:	4b11      	ldr	r3, [pc, #68]	; (2374 <set_arm_clock+0x260>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    232e:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2332:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2334:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    2336:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2338:	6813      	ldr	r3, [r2, #0]
    233a:	2b00      	cmp	r3, #0
    233c:	dafc      	bge.n	2338 <set_arm_clock+0x224>
	}

	return frequency;
}
    233e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    2342:	2904      	cmp	r1, #4
    2344:	f63f af6f 	bhi.w	2226 <set_arm_clock+0x112>
				div_ahb = div_ahb + 1;
    2348:	3101      	adds	r1, #1
				div_arm = 1;
    234a:	2201      	movs	r2, #1
    234c:	e75b      	b.n	2206 <set_arm_clock+0xf2>
    234e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 23cc <set_arm_clock+0x2b8>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    2352:	236c      	movs	r3, #108	; 0x6c
    2354:	481a      	ldr	r0, [pc, #104]	; (23c0 <set_arm_clock+0x2ac>)
    2356:	e776      	b.n	2246 <set_arm_clock+0x132>
    2358:	2512      	movs	r5, #18
    235a:	e708      	b.n	216e <set_arm_clock+0x5a>
    235c:	4819      	ldr	r0, [pc, #100]	; (23c4 <set_arm_clock+0x2b0>)
    235e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 23d0 <set_arm_clock+0x2bc>
    2362:	fb00 f003 	mul.w	r0, r0, r3
    2366:	ea43 0808 	orr.w	r8, r3, r8
    236a:	e76c      	b.n	2246 <set_arm_clock+0x132>
    236c:	1f78a400 	.word	0x1f78a400
    2370:	400fc000 	.word	0x400fc000
    2374:	40080000 	.word	0x40080000
    2378:	23c34600 	.word	0x23c34600
    237c:	dc3cba00 	.word	0xdc3cba00
    2380:	004cb223 	.word	0x004cb223
    2384:	51eb851f 	.word	0x51eb851f
    2388:	016e3600 	.word	0x016e3600
    238c:	400d8000 	.word	0x400d8000
    2390:	80003040 	.word	0x80003040
    2394:	269fb1ff 	.word	0x269fb1ff
    2398:	005b8d80 	.word	0x005b8d80
    239c:	165e9f81 	.word	0x165e9f81
    23a0:	269fb200 	.word	0x269fb200
    23a4:	8001307f 	.word	0x8001307f
    23a8:	08f0d17f 	.word	0x08f0d17f
    23ac:	00e5109f 	.word	0x00e5109f
    23b0:	431bde83 	.word	0x431bde83
    23b4:	20000608 	.word	0x20000608
    23b8:	20000604 	.word	0x20000604
    23bc:	200012a8 	.word	0x200012a8
    23c0:	4d3f6400 	.word	0x4d3f6400
    23c4:	00b71b00 	.word	0x00b71b00
    23c8:	80002036 	.word	0x80002036
    23cc:	8000206c 	.word	0x8000206c
    23d0:	80002000 	.word	0x80002000

000023d4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    23d4:	b4f0      	push	{r4, r5, r6, r7}
    23d6:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    23d8:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    23da:	4637      	mov	r7, r6
    23dc:	e000      	b.n	23e0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    23de:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    23e0:	fbb0 f3f2 	udiv	r3, r0, r2
    23e4:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    23e8:	f100 0437 	add.w	r4, r0, #55	; 0x37
    23ec:	2809      	cmp	r0, #9
    23ee:	f100 0030 	add.w	r0, r0, #48	; 0x30
    23f2:	b2e4      	uxtb	r4, r4
    23f4:	bf98      	it	ls
    23f6:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    23f8:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    23fa:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    23fe:	2b00      	cmp	r3, #0
    2400:	d1ed      	bne.n	23de <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    2402:	194a      	adds	r2, r1, r5
    2404:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    2406:	b14d      	cbz	r5, 241c <ultoa+0x48>
    2408:	3301      	adds	r3, #1
		t = buf[j];
    240a:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    240e:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2410:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    2412:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2414:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    2416:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    241a:	dbf5      	blt.n	2408 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    241c:	4608      	mov	r0, r1
    241e:	bcf0      	pop	{r4, r5, r6, r7}
    2420:	4770      	bx	lr
    2422:	bf00      	nop

00002424 <pwm_init>:
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    2424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2428:	4fdb      	ldr	r7, [pc, #876]	; (2798 <pwm_init+0x374>)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    242a:	2300      	movs	r3, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    242c:	f8df e380 	ldr.w	lr, [pc, #896]	; 27b0 <pwm_init+0x38c>
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2430:	250f      	movs	r5, #15
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2432:	6fba      	ldr	r2, [r7, #120]	; 0x78

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2434:	f44f 4c70 	mov.w	ip, #61440	; 0xf000
    2438:	49d8      	ldr	r1, [pc, #864]	; (279c <pwm_init+0x378>)
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    243a:	f44f 4660 	mov.w	r6, #57344	; 0xe000
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    243e:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2442:	f44f 6480 	mov.w	r4, #1024	; 0x400
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2446:	f248 20b8 	movw	r0, #33464	; 0x82b8
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    244a:	67ba      	str	r2, [r7, #120]	; 0x78
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    244c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    2450:	ea42 0e0e 	orr.w	lr, r2, lr
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2454:	4ad2      	ldr	r2, [pc, #840]	; (27a0 <pwm_init+0x37c>)
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2456:	f8c7 e080 	str.w	lr, [r7, #128]	; 0x80

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    245a:	f241 0e01 	movw	lr, #4097	; 0x1001

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    245e:	f8a1 c18c 	strh.w	ip, [r1, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    2462:	f8a1 518e 	strh.w	r5, [r1, #398]	; 0x18e
	p->FFILT0 = 0;
    2466:	f8a1 3190 	strh.w	r3, [r1, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    246a:	f8b1 7188 	ldrh.w	r7, [r1, #392]	; 0x188
    246e:	b2bf      	uxth	r7, r7
    2470:	f047 07f0 	orr.w	r7, r7, #240	; 0xf0
    2474:	f8a1 7188 	strh.w	r7, [r1, #392]	; 0x188
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2478:	f645 57c0 	movw	r7, #24000	; 0x5dc0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    247c:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    247e:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    2480:	844b      	strh	r3, [r1, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2482:	860b      	strh	r3, [r1, #48]	; 0x30
		p->SM[i].INIT = 0;
    2484:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    2486:	814b      	strh	r3, [r1, #10]
		p->SM[i].VAL1 = 33464;
    2488:	81c8      	strh	r0, [r1, #14]
		p->SM[i].VAL2 = 0;
    248a:	824b      	strh	r3, [r1, #18]
		p->SM[i].VAL3 = 0;
    248c:	82cb      	strh	r3, [r1, #22]
		p->SM[i].VAL4 = 0;
    248e:	834b      	strh	r3, [r1, #26]
		p->SM[i].VAL5 = 0;
    2490:	83cb      	strh	r3, [r1, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2492:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2494:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    2496:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    249a:	f8a1 3090 	strh.w	r3, [r1, #144]	; 0x90
		p->SM[i].INIT = 0;
    249e:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    24a0:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    24a4:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    24a8:	f8a1 3072 	strh.w	r3, [r1, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    24ac:	f8a1 3076 	strh.w	r3, [r1, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    24b0:	f8a1 307a 	strh.w	r3, [r1, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    24b4:	f8a1 307e 	strh.w	r3, [r1, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    24b8:	f8a2 6064 	strh.w	r6, [r2, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    24bc:	f8a2 4066 	strh.w	r4, [r2, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    24c0:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    24c4:	f8a1 30f0 	strh.w	r3, [r1, #240]	; 0xf0
		p->SM[i].INIT = 0;
    24c8:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    24cc:	f8a1 30ca 	strh.w	r3, [r1, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    24d0:	f8a1 00ce 	strh.w	r0, [r1, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    24d4:	f8a1 30d2 	strh.w	r3, [r1, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    24d8:	f8a1 30d6 	strh.w	r3, [r1, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    24dc:	f8a1 30da 	strh.w	r3, [r1, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    24e0:	f8a1 30de 	strh.w	r3, [r1, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    24e4:	f8a2 60c4 	strh.w	r6, [r2, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    24e8:	f8a2 40c6 	strh.w	r4, [r2, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    24ec:	f8a1 3142 	strh.w	r3, [r1, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    24f0:	f8a1 3150 	strh.w	r3, [r1, #336]	; 0x150
		p->SM[i].INIT = 0;
    24f4:	f8a2 30c2 	strh.w	r3, [r2, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    24f8:	f8a1 312a 	strh.w	r3, [r1, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    24fc:	f8a1 012e 	strh.w	r0, [r1, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    2500:	f8a1 3132 	strh.w	r3, [r1, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    2504:	f8a1 3136 	strh.w	r3, [r1, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    2508:	f8a1 313a 	strh.w	r3, [r1, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    250c:	f8a1 313e 	strh.w	r3, [r1, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2510:	f8b1 2188 	ldrh.w	r2, [r1, #392]	; 0x188
    2514:	b292      	uxth	r2, r2
    2516:	432a      	orrs	r2, r5
    2518:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    251c:	f8b1 8188 	ldrh.w	r8, [r1, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2520:	4aa0      	ldr	r2, [pc, #640]	; (27a4 <pwm_init+0x380>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2522:	fa1f f888 	uxth.w	r8, r8
    2526:	f448 6870 	orr.w	r8, r8, #3840	; 0xf00
    252a:	f8a1 8188 	strh.w	r8, [r1, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    252e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2532:	f8a2 c18c 	strh.w	ip, [r2, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    2536:	f8a2 518e 	strh.w	r5, [r2, #398]	; 0x18e
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    253a:	3160      	adds	r1, #96	; 0x60
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    253c:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2540:	f8b2 8188 	ldrh.w	r8, [r2, #392]	; 0x188
    2544:	fa1f f888 	uxth.w	r8, r8
    2548:	f048 08f0 	orr.w	r8, r8, #240	; 0xf0
    254c:	f8a2 8188 	strh.w	r8, [r2, #392]	; 0x188
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2550:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2552:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    2554:	8453      	strh	r3, [r2, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2556:	8613      	strh	r3, [r2, #48]	; 0x30
		p->SM[i].INIT = 0;
    2558:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    255a:	8153      	strh	r3, [r2, #10]
		p->SM[i].VAL1 = 33464;
    255c:	81d0      	strh	r0, [r2, #14]
		p->SM[i].VAL2 = 0;
    255e:	8253      	strh	r3, [r2, #18]
		p->SM[i].VAL3 = 0;
    2560:	82d3      	strh	r3, [r2, #22]
		p->SM[i].VAL4 = 0;
    2562:	8353      	strh	r3, [r2, #26]
		p->SM[i].VAL5 = 0;
    2564:	83d3      	strh	r3, [r2, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2566:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2568:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    256a:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    256e:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
		p->SM[i].INIT = 0;
    2572:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    2574:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    2578:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    257c:	f8a2 3072 	strh.w	r3, [r2, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    2580:	f8a2 3076 	strh.w	r3, [r2, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    2584:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    2588:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    258c:	f8a1 6064 	strh.w	r6, [r1, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2590:	f8a1 4066 	strh.w	r4, [r1, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    2594:	f8a2 30e2 	strh.w	r3, [r2, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    2598:	f8a2 30f0 	strh.w	r3, [r2, #240]	; 0xf0
		p->SM[i].INIT = 0;
    259c:	f8a1 3062 	strh.w	r3, [r1, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    25a0:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    25a4:	f8a2 00ce 	strh.w	r0, [r2, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    25a8:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    25ac:	f8a2 30d6 	strh.w	r3, [r2, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    25b0:	f8a2 30da 	strh.w	r3, [r2, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    25b4:	f8a2 30de 	strh.w	r3, [r2, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    25b8:	f8a1 60c4 	strh.w	r6, [r1, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    25bc:	f8a1 40c6 	strh.w	r4, [r1, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    25c0:	f8a2 3142 	strh.w	r3, [r2, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    25c4:	f8a2 3150 	strh.w	r3, [r2, #336]	; 0x150
		p->SM[i].INIT = 0;
    25c8:	f8a1 30c2 	strh.w	r3, [r1, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    25cc:	f8a2 312a 	strh.w	r3, [r2, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    25d0:	f8a2 012e 	strh.w	r0, [r2, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    25d4:	f8a2 3132 	strh.w	r3, [r2, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    25d8:	f8a2 3136 	strh.w	r3, [r2, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    25dc:	f8a2 313a 	strh.w	r3, [r2, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    25e0:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    25e4:	f8b2 1188 	ldrh.w	r1, [r2, #392]	; 0x188
    25e8:	b289      	uxth	r1, r1
    25ea:	4329      	orrs	r1, r5
    25ec:	f8a2 1188 	strh.w	r1, [r2, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    25f0:	f8b2 8188 	ldrh.w	r8, [r2, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    25f4:	496c      	ldr	r1, [pc, #432]	; (27a8 <pwm_init+0x384>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    25f6:	fa1f f888 	uxth.w	r8, r8
    25fa:	f448 6870 	orr.w	r8, r8, #3840	; 0xf00
    25fe:	f8a2 8188 	strh.w	r8, [r2, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2602:	f502 4280 	add.w	r2, r2, #16384	; 0x4000

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2606:	f8a1 c18c 	strh.w	ip, [r1, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    260a:	f8a1 518e 	strh.w	r5, [r1, #398]	; 0x18e
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    260e:	3260      	adds	r2, #96	; 0x60
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    2610:	f8a1 3190 	strh.w	r3, [r1, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2614:	f8b1 8188 	ldrh.w	r8, [r1, #392]	; 0x188
    2618:	fa1f f888 	uxth.w	r8, r8
    261c:	f048 08f0 	orr.w	r8, r8, #240	; 0xf0
    2620:	f8a1 8188 	strh.w	r8, [r1, #392]	; 0x188
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2624:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2626:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    2628:	844b      	strh	r3, [r1, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    262a:	860b      	strh	r3, [r1, #48]	; 0x30
		p->SM[i].INIT = 0;
    262c:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    262e:	814b      	strh	r3, [r1, #10]
		p->SM[i].VAL1 = 33464;
    2630:	81c8      	strh	r0, [r1, #14]
		p->SM[i].VAL2 = 0;
    2632:	824b      	strh	r3, [r1, #18]
		p->SM[i].VAL3 = 0;
    2634:	82cb      	strh	r3, [r1, #22]
		p->SM[i].VAL4 = 0;
    2636:	834b      	strh	r3, [r1, #26]
		p->SM[i].VAL5 = 0;
    2638:	83cb      	strh	r3, [r1, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    263a:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    263c:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    263e:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    2642:	f8a1 3090 	strh.w	r3, [r1, #144]	; 0x90
		p->SM[i].INIT = 0;
    2646:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    2648:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    264c:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    2650:	f8a1 3072 	strh.w	r3, [r1, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    2654:	f8a1 3076 	strh.w	r3, [r1, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    2658:	f8a1 307a 	strh.w	r3, [r1, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    265c:	f8a1 307e 	strh.w	r3, [r1, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2660:	f8a2 6064 	strh.w	r6, [r2, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2664:	f8a2 4066 	strh.w	r4, [r2, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    2668:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    266c:	f8a1 30f0 	strh.w	r3, [r1, #240]	; 0xf0
		p->SM[i].INIT = 0;
    2670:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    2674:	f8a1 30ca 	strh.w	r3, [r1, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    2678:	f8a1 00ce 	strh.w	r0, [r1, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    267c:	f8a1 30d2 	strh.w	r3, [r1, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    2680:	f8a1 30d6 	strh.w	r3, [r1, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    2684:	f8a1 30da 	strh.w	r3, [r1, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    2688:	f8a1 30de 	strh.w	r3, [r1, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    268c:	f8a2 60c4 	strh.w	r6, [r2, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2690:	f8a2 40c6 	strh.w	r4, [r2, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    2694:	f8a1 3142 	strh.w	r3, [r1, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    2698:	f8a1 3150 	strh.w	r3, [r1, #336]	; 0x150
		p->SM[i].INIT = 0;
    269c:	f8a2 30c2 	strh.w	r3, [r2, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    26a0:	f8a1 312a 	strh.w	r3, [r1, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    26a4:	f8a1 012e 	strh.w	r0, [r1, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    26a8:	f8a1 3132 	strh.w	r3, [r1, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    26ac:	f8a1 3136 	strh.w	r3, [r1, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    26b0:	f8a1 313a 	strh.w	r3, [r1, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    26b4:	f8a1 313e 	strh.w	r3, [r1, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    26b8:	f8b1 2188 	ldrh.w	r2, [r1, #392]	; 0x188
    26bc:	b292      	uxth	r2, r2
    26be:	432a      	orrs	r2, r5
    26c0:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    26c4:	f8b1 8188 	ldrh.w	r8, [r1, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    26c8:	4a38      	ldr	r2, [pc, #224]	; (27ac <pwm_init+0x388>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    26ca:	fa1f f888 	uxth.w	r8, r8
    26ce:	f448 6870 	orr.w	r8, r8, #3840	; 0xf00
    26d2:	f8a1 8188 	strh.w	r8, [r1, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    26d6:	f501 4180 	add.w	r1, r1, #16384	; 0x4000

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    26da:	f8a2 c18c 	strh.w	ip, [r2, #396]	; 0x18c
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    26de:	f243 0c26 	movw	ip, #12326	; 0x3026
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    26e2:	f8a2 518e 	strh.w	r5, [r2, #398]	; 0x18e
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    26e6:	3160      	adds	r1, #96	; 0x60
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    26e8:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    26ec:	f8b2 8188 	ldrh.w	r8, [r2, #392]	; 0x188
    26f0:	fa1f f888 	uxth.w	r8, r8
    26f4:	f048 08f0 	orr.w	r8, r8, #240	; 0xf0
    26f8:	f8a2 8188 	strh.w	r8, [r2, #392]	; 0x188
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    26fc:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    26fe:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    2700:	8453      	strh	r3, [r2, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2702:	8613      	strh	r3, [r2, #48]	; 0x30
		p->SM[i].INIT = 0;
    2704:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    2706:	8153      	strh	r3, [r2, #10]
		p->SM[i].VAL1 = 33464;
    2708:	81d0      	strh	r0, [r2, #14]
		p->SM[i].VAL2 = 0;
    270a:	8253      	strh	r3, [r2, #18]
		p->SM[i].VAL3 = 0;
    270c:	82d3      	strh	r3, [r2, #22]
		p->SM[i].VAL4 = 0;
    270e:	8353      	strh	r3, [r2, #26]
		p->SM[i].VAL5 = 0;
    2710:	83d3      	strh	r3, [r2, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2712:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2714:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    2716:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    271a:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
		p->SM[i].INIT = 0;
    271e:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    2720:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    2724:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    2728:	f8a2 3072 	strh.w	r3, [r2, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    272c:	f8a2 3076 	strh.w	r3, [r2, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    2730:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    2734:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2738:	f8a1 6064 	strh.w	r6, [r1, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    273c:	f8a1 4066 	strh.w	r4, [r1, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    2740:	f8a2 30e2 	strh.w	r3, [r2, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    2744:	f8a2 30f0 	strh.w	r3, [r2, #240]	; 0xf0
		p->SM[i].INIT = 0;
    2748:	f8a1 3062 	strh.w	r3, [r1, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    274c:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    2750:	f8a2 00ce 	strh.w	r0, [r2, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    2754:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    2758:	f8a2 30d6 	strh.w	r3, [r2, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    275c:	f8a2 30da 	strh.w	r3, [r2, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    2760:	f8a2 30de 	strh.w	r3, [r2, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2764:	f8a1 60c4 	strh.w	r6, [r1, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2768:	f8a1 40c6 	strh.w	r4, [r1, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    276c:	f8a2 3142 	strh.w	r3, [r2, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    2770:	f8a2 3150 	strh.w	r3, [r2, #336]	; 0x150
		p->SM[i].INIT = 0;
    2774:	f8a1 30c2 	strh.w	r3, [r1, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    2778:	f8a2 312a 	strh.w	r3, [r2, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    277c:	f8a2 012e 	strh.w	r0, [r2, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    2780:	f8a2 3132 	strh.w	r3, [r2, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    2784:	f8a2 3136 	strh.w	r3, [r2, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    2788:	f8a2 313a 	strh.w	r3, [r2, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    278c:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2790:	f8b2 1188 	ldrh.w	r1, [r2, #392]	; 0x188
    2794:	e00e      	b.n	27b4 <pwm_init+0x390>
    2796:	bf00      	nop
    2798:	400fc000 	.word	0x400fc000
    279c:	403dc000 	.word	0x403dc000
    27a0:	403dc060 	.word	0x403dc060
    27a4:	403e0000 	.word	0x403e0000
    27a8:	403e4000 	.word	0x403e4000
    27ac:	403e8000 	.word	0x403e8000
    27b0:	fc030000 	.word	0xfc030000
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    27b4:	4c57      	ldr	r4, [pc, #348]	; (2914 <pwm_init+0x4f0>)
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    27b6:	b289      	uxth	r1, r1
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    27b8:	4857      	ldr	r0, [pc, #348]	; (2918 <pwm_init+0x4f4>)
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    27ba:	f8df 816c 	ldr.w	r8, [pc, #364]	; 2928 <pwm_init+0x504>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    27be:	4329      	orrs	r1, r5
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    27c0:	4e56      	ldr	r6, [pc, #344]	; (291c <pwm_init+0x4f8>)
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    27c2:	f8a2 1188 	strh.w	r1, [r2, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    27c6:	f8b2 9188 	ldrh.w	r9, [r2, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    27ca:	4955      	ldr	r1, [pc, #340]	; (2920 <pwm_init+0x4fc>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    27cc:	fa1f f989 	uxth.w	r9, r9
    27d0:	f449 6970 	orr.w	r9, r9, #3840	; 0xf00
    27d4:	f8a2 9188 	strh.w	r9, [r2, #392]	; 0x188
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    27d8:	4a52      	ldr	r2, [pc, #328]	; (2924 <pwm_init+0x500>)
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    27da:	81a3      	strh	r3, [r4, #12]
		p->CH[i].CNTR = 0;
    27dc:	8163      	strh	r3, [r4, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    27de:	81e5      	strh	r5, [r4, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    27e0:	f8a4 e014 	strh.w	lr, [r4, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    27e4:	80e7      	strh	r7, [r4, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    27e6:	8023      	strh	r3, [r4, #0]
		p->CH[i].CMPLD1 = 0;
    27e8:	8223      	strh	r3, [r4, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    27ea:	f8a4 c00c 	strh.w	ip, [r4, #12]
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    27ee:	85a3      	strh	r3, [r4, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    27f0:	8563      	strh	r3, [r4, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    27f2:	85e5      	strh	r5, [r4, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    27f4:	f8a4 e034 	strh.w	lr, [r4, #52]	; 0x34
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    27f8:	f8a8 7006 	strh.w	r7, [r8, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    27fc:	f8a8 3000 	strh.w	r3, [r8]
		p->CH[i].CMPLD1 = 0;
    2800:	8623      	strh	r3, [r4, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2802:	f8a4 c02c 	strh.w	ip, [r4, #44]	; 0x2c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2806:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    280a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    280e:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2812:	f8a4 e054 	strh.w	lr, [r4, #84]	; 0x54
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2816:	f8a8 7026 	strh.w	r7, [r8, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    281a:	f8a8 3020 	strh.w	r3, [r8, #32]
		p->CH[i].CMPLD1 = 0;
    281e:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2822:	f8a4 c04c 	strh.w	ip, [r4, #76]	; 0x4c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2826:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    282a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    282e:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2832:	f8a4 e074 	strh.w	lr, [r4, #116]	; 0x74
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2836:	f8a8 7046 	strh.w	r7, [r8, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    283a:	f8a8 3040 	strh.w	r3, [r8, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    283e:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2842:	f8a4 c06c 	strh.w	ip, [r4, #108]	; 0x6c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2846:	8183      	strh	r3, [r0, #12]
		p->CH[i].CNTR = 0;
    2848:	8143      	strh	r3, [r0, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    284a:	81c5      	strh	r5, [r0, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    284c:	f8a0 e014 	strh.w	lr, [r0, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2850:	80c7      	strh	r7, [r0, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2852:	8003      	strh	r3, [r0, #0]
		p->CH[i].CMPLD1 = 0;
    2854:	8203      	strh	r3, [r0, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2856:	f8a0 c00c 	strh.w	ip, [r0, #12]
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    285a:	8583      	strh	r3, [r0, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    285c:	8543      	strh	r3, [r0, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    285e:	85c5      	strh	r5, [r0, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2860:	f8a0 e034 	strh.w	lr, [r0, #52]	; 0x34
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2864:	80f7      	strh	r7, [r6, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2866:	8033      	strh	r3, [r6, #0]
		p->CH[i].CMPLD1 = 0;
    2868:	8603      	strh	r3, [r0, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    286a:	f8a0 c02c 	strh.w	ip, [r0, #44]	; 0x2c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    286e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    2872:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2876:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    287a:	f8a0 e054 	strh.w	lr, [r0, #84]	; 0x54
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    287e:	84f7      	strh	r7, [r6, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2880:	8433      	strh	r3, [r6, #32]
		p->CH[i].CMPLD1 = 0;
    2882:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2886:	f8a0 c04c 	strh.w	ip, [r0, #76]	; 0x4c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    288a:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    288e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2892:	f8a0 506e 	strh.w	r5, [r0, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2896:	f8a0 e074 	strh.w	lr, [r0, #116]	; 0x74
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    289a:	f8a6 7046 	strh.w	r7, [r6, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    289e:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    28a2:	f8a0 3070 	strh.w	r3, [r0, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    28a6:	f8a0 c06c 	strh.w	ip, [r0, #108]	; 0x6c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    28aa:	818b      	strh	r3, [r1, #12]
		p->CH[i].CNTR = 0;
    28ac:	814b      	strh	r3, [r1, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    28ae:	81cd      	strh	r5, [r1, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    28b0:	f8a1 e014 	strh.w	lr, [r1, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    28b4:	80cf      	strh	r7, [r1, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    28b6:	800b      	strh	r3, [r1, #0]
		p->CH[i].CMPLD1 = 0;
    28b8:	820b      	strh	r3, [r1, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    28ba:	f8a1 c00c 	strh.w	ip, [r1, #12]
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    28be:	858b      	strh	r3, [r1, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    28c0:	854b      	strh	r3, [r1, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    28c2:	85cd      	strh	r5, [r1, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    28c4:	f8a1 e034 	strh.w	lr, [r1, #52]	; 0x34
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    28c8:	80d7      	strh	r7, [r2, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    28ca:	8013      	strh	r3, [r2, #0]
		p->CH[i].CMPLD1 = 0;
    28cc:	860b      	strh	r3, [r1, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    28ce:	f8a1 c02c 	strh.w	ip, [r1, #44]	; 0x2c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    28d2:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    28d6:	f8a1 304a 	strh.w	r3, [r1, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    28da:	f8a1 504e 	strh.w	r5, [r1, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    28de:	f8a1 e054 	strh.w	lr, [r1, #84]	; 0x54
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    28e2:	84d7      	strh	r7, [r2, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    28e4:	8413      	strh	r3, [r2, #32]
		p->CH[i].CMPLD1 = 0;
    28e6:	f8a1 3050 	strh.w	r3, [r1, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    28ea:	f8a1 c04c 	strh.w	ip, [r1, #76]	; 0x4c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    28ee:	f8a1 306c 	strh.w	r3, [r1, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    28f2:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    28f6:	f8a1 506e 	strh.w	r5, [r1, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    28fa:	f8a1 e074 	strh.w	lr, [r1, #116]	; 0x74
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    28fe:	f8a2 7046 	strh.w	r7, [r2, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2902:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    2906:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    290a:	f8a1 c06c 	strh.w	ip, [r1, #108]	; 0x6c
    290e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2912:	bf00      	nop
    2914:	401dc000 	.word	0x401dc000
    2918:	401e0000 	.word	0x401e0000
    291c:	401e0020 	.word	0x401e0020
    2920:	401e4000 	.word	0x401e4000
    2924:	401e4020 	.word	0x401e4020
    2928:	401dc020 	.word	0x401dc020

0000292c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    292c:	4770      	bx	lr
    292e:	bf00      	nop

00002930 <__aeabi_atexit>:
    2930:	460b      	mov	r3, r1
    2932:	4601      	mov	r1, r0
    2934:	4618      	mov	r0, r3
    2936:	f000 b805 	b.w	2944 <__cxa_atexit>
    293a:	bf00      	nop

0000293c <atoi>:
    293c:	220a      	movs	r2, #10
    293e:	2100      	movs	r1, #0
    2940:	f000 bc0e 	b.w	3160 <strtol>

00002944 <__cxa_atexit>:
    2944:	4613      	mov	r3, r2
    2946:	460a      	mov	r2, r1
    2948:	4601      	mov	r1, r0
    294a:	2002      	movs	r0, #2
    294c:	f000 bc2c 	b.w	31a8 <__register_exitproc>

00002950 <__errno>:
    2950:	4b01      	ldr	r3, [pc, #4]	; (2958 <__errno+0x8>)
    2952:	6818      	ldr	r0, [r3, #0]
    2954:	4770      	bx	lr
    2956:	bf00      	nop
    2958:	20000a38 	.word	0x20000a38

0000295c <__libc_init_array>:
    295c:	b570      	push	{r4, r5, r6, lr}
    295e:	4e0f      	ldr	r6, [pc, #60]	; (299c <__libc_init_array+0x40>)
    2960:	4d0f      	ldr	r5, [pc, #60]	; (29a0 <__libc_init_array+0x44>)
    2962:	1b76      	subs	r6, r6, r5
    2964:	10b6      	asrs	r6, r6, #2
    2966:	bf18      	it	ne
    2968:	2400      	movne	r4, #0
    296a:	d005      	beq.n	2978 <__libc_init_array+0x1c>
    296c:	3401      	adds	r4, #1
    296e:	f855 3b04 	ldr.w	r3, [r5], #4
    2972:	4798      	blx	r3
    2974:	42a6      	cmp	r6, r4
    2976:	d1f9      	bne.n	296c <__libc_init_array+0x10>
    2978:	4e0a      	ldr	r6, [pc, #40]	; (29a4 <__libc_init_array+0x48>)
    297a:	4d0b      	ldr	r5, [pc, #44]	; (29a8 <__libc_init_array+0x4c>)
    297c:	1b76      	subs	r6, r6, r5
    297e:	f000 fd9b 	bl	34b8 <___init_veneer>
    2982:	10b6      	asrs	r6, r6, #2
    2984:	bf18      	it	ne
    2986:	2400      	movne	r4, #0
    2988:	d006      	beq.n	2998 <__libc_init_array+0x3c>
    298a:	3401      	adds	r4, #1
    298c:	f855 3b04 	ldr.w	r3, [r5], #4
    2990:	4798      	blx	r3
    2992:	42a6      	cmp	r6, r4
    2994:	d1f9      	bne.n	298a <__libc_init_array+0x2e>
    2996:	bd70      	pop	{r4, r5, r6, pc}
    2998:	bd70      	pop	{r4, r5, r6, pc}
    299a:	bf00      	nop
    299c:	60001b00 	.word	0x60001b00
    29a0:	60001b00 	.word	0x60001b00
    29a4:	60001b0c 	.word	0x60001b0c
    29a8:	60001b00 	.word	0x60001b00

000029ac <__locale_ctype_ptr_l>:
    29ac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    29b0:	4770      	bx	lr
    29b2:	bf00      	nop

000029b4 <malloc>:
    29b4:	4b02      	ldr	r3, [pc, #8]	; (29c0 <malloc+0xc>)
    29b6:	4601      	mov	r1, r0
    29b8:	6818      	ldr	r0, [r3, #0]
    29ba:	f000 b803 	b.w	29c4 <_malloc_r>
    29be:	bf00      	nop
    29c0:	20000a38 	.word	0x20000a38

000029c4 <_malloc_r>:
    29c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29c8:	f101 050b 	add.w	r5, r1, #11
    29cc:	2d16      	cmp	r5, #22
    29ce:	b083      	sub	sp, #12
    29d0:	4606      	mov	r6, r0
    29d2:	f240 809f 	bls.w	2b14 <_malloc_r+0x150>
    29d6:	f035 0507 	bics.w	r5, r5, #7
    29da:	f100 80bf 	bmi.w	2b5c <_malloc_r+0x198>
    29de:	42a9      	cmp	r1, r5
    29e0:	f200 80bc 	bhi.w	2b5c <_malloc_r+0x198>
    29e4:	f000 fb0a 	bl	2ffc <__malloc_lock>
    29e8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    29ec:	f0c0 829c 	bcc.w	2f28 <_malloc_r+0x564>
    29f0:	0a6b      	lsrs	r3, r5, #9
    29f2:	f000 80ba 	beq.w	2b6a <_malloc_r+0x1a6>
    29f6:	2b04      	cmp	r3, #4
    29f8:	f200 8183 	bhi.w	2d02 <_malloc_r+0x33e>
    29fc:	09a8      	lsrs	r0, r5, #6
    29fe:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    2a02:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2a06:	3038      	adds	r0, #56	; 0x38
    2a08:	4fc4      	ldr	r7, [pc, #784]	; (2d1c <_malloc_r+0x358>)
    2a0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    2a0e:	f1a3 0108 	sub.w	r1, r3, #8
    2a12:	685c      	ldr	r4, [r3, #4]
    2a14:	42a1      	cmp	r1, r4
    2a16:	d107      	bne.n	2a28 <_malloc_r+0x64>
    2a18:	e0ac      	b.n	2b74 <_malloc_r+0x1b0>
    2a1a:	2a00      	cmp	r2, #0
    2a1c:	f280 80ac 	bge.w	2b78 <_malloc_r+0x1b4>
    2a20:	68e4      	ldr	r4, [r4, #12]
    2a22:	42a1      	cmp	r1, r4
    2a24:	f000 80a6 	beq.w	2b74 <_malloc_r+0x1b0>
    2a28:	6863      	ldr	r3, [r4, #4]
    2a2a:	f023 0303 	bic.w	r3, r3, #3
    2a2e:	1b5a      	subs	r2, r3, r5
    2a30:	2a0f      	cmp	r2, #15
    2a32:	ddf2      	ble.n	2a1a <_malloc_r+0x56>
    2a34:	49b9      	ldr	r1, [pc, #740]	; (2d1c <_malloc_r+0x358>)
    2a36:	693c      	ldr	r4, [r7, #16]
    2a38:	f101 0e08 	add.w	lr, r1, #8
    2a3c:	4574      	cmp	r4, lr
    2a3e:	f000 81b3 	beq.w	2da8 <_malloc_r+0x3e4>
    2a42:	6863      	ldr	r3, [r4, #4]
    2a44:	f023 0303 	bic.w	r3, r3, #3
    2a48:	1b5a      	subs	r2, r3, r5
    2a4a:	2a0f      	cmp	r2, #15
    2a4c:	f300 8199 	bgt.w	2d82 <_malloc_r+0x3be>
    2a50:	2a00      	cmp	r2, #0
    2a52:	f8c1 e014 	str.w	lr, [r1, #20]
    2a56:	f8c1 e010 	str.w	lr, [r1, #16]
    2a5a:	f280 809e 	bge.w	2b9a <_malloc_r+0x1d6>
    2a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2a62:	f080 8167 	bcs.w	2d34 <_malloc_r+0x370>
    2a66:	08db      	lsrs	r3, r3, #3
    2a68:	f103 0c01 	add.w	ip, r3, #1
    2a6c:	2201      	movs	r2, #1
    2a6e:	109b      	asrs	r3, r3, #2
    2a70:	fa02 f303 	lsl.w	r3, r2, r3
    2a74:	684a      	ldr	r2, [r1, #4]
    2a76:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    2a7a:	f8c4 8008 	str.w	r8, [r4, #8]
    2a7e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    2a82:	431a      	orrs	r2, r3
    2a84:	f1a9 0308 	sub.w	r3, r9, #8
    2a88:	60e3      	str	r3, [r4, #12]
    2a8a:	604a      	str	r2, [r1, #4]
    2a8c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    2a90:	f8c8 400c 	str.w	r4, [r8, #12]
    2a94:	1083      	asrs	r3, r0, #2
    2a96:	2401      	movs	r4, #1
    2a98:	409c      	lsls	r4, r3
    2a9a:	4294      	cmp	r4, r2
    2a9c:	f200 808a 	bhi.w	2bb4 <_malloc_r+0x1f0>
    2aa0:	4214      	tst	r4, r2
    2aa2:	d106      	bne.n	2ab2 <_malloc_r+0xee>
    2aa4:	f020 0003 	bic.w	r0, r0, #3
    2aa8:	0064      	lsls	r4, r4, #1
    2aaa:	4214      	tst	r4, r2
    2aac:	f100 0004 	add.w	r0, r0, #4
    2ab0:	d0fa      	beq.n	2aa8 <_malloc_r+0xe4>
    2ab2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    2ab6:	46cc      	mov	ip, r9
    2ab8:	4680      	mov	r8, r0
    2aba:	f8dc 100c 	ldr.w	r1, [ip, #12]
    2abe:	458c      	cmp	ip, r1
    2ac0:	d107      	bne.n	2ad2 <_malloc_r+0x10e>
    2ac2:	e173      	b.n	2dac <_malloc_r+0x3e8>
    2ac4:	2a00      	cmp	r2, #0
    2ac6:	f280 8181 	bge.w	2dcc <_malloc_r+0x408>
    2aca:	68c9      	ldr	r1, [r1, #12]
    2acc:	458c      	cmp	ip, r1
    2ace:	f000 816d 	beq.w	2dac <_malloc_r+0x3e8>
    2ad2:	684b      	ldr	r3, [r1, #4]
    2ad4:	f023 0303 	bic.w	r3, r3, #3
    2ad8:	1b5a      	subs	r2, r3, r5
    2ada:	2a0f      	cmp	r2, #15
    2adc:	ddf2      	ble.n	2ac4 <_malloc_r+0x100>
    2ade:	460c      	mov	r4, r1
    2ae0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    2ae4:	f854 8f08 	ldr.w	r8, [r4, #8]!
    2ae8:	194b      	adds	r3, r1, r5
    2aea:	f045 0501 	orr.w	r5, r5, #1
    2aee:	604d      	str	r5, [r1, #4]
    2af0:	f042 0101 	orr.w	r1, r2, #1
    2af4:	f8c8 c00c 	str.w	ip, [r8, #12]
    2af8:	4630      	mov	r0, r6
    2afa:	f8cc 8008 	str.w	r8, [ip, #8]
    2afe:	617b      	str	r3, [r7, #20]
    2b00:	613b      	str	r3, [r7, #16]
    2b02:	f8c3 e00c 	str.w	lr, [r3, #12]
    2b06:	f8c3 e008 	str.w	lr, [r3, #8]
    2b0a:	6059      	str	r1, [r3, #4]
    2b0c:	509a      	str	r2, [r3, r2]
    2b0e:	f000 fa77 	bl	3000 <__malloc_unlock>
    2b12:	e01f      	b.n	2b54 <_malloc_r+0x190>
    2b14:	2910      	cmp	r1, #16
    2b16:	d821      	bhi.n	2b5c <_malloc_r+0x198>
    2b18:	f000 fa70 	bl	2ffc <__malloc_lock>
    2b1c:	2510      	movs	r5, #16
    2b1e:	2306      	movs	r3, #6
    2b20:	2002      	movs	r0, #2
    2b22:	4f7e      	ldr	r7, [pc, #504]	; (2d1c <_malloc_r+0x358>)
    2b24:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    2b28:	f1a3 0208 	sub.w	r2, r3, #8
    2b2c:	685c      	ldr	r4, [r3, #4]
    2b2e:	4294      	cmp	r4, r2
    2b30:	f000 8145 	beq.w	2dbe <_malloc_r+0x3fa>
    2b34:	6863      	ldr	r3, [r4, #4]
    2b36:	68e1      	ldr	r1, [r4, #12]
    2b38:	68a5      	ldr	r5, [r4, #8]
    2b3a:	f023 0303 	bic.w	r3, r3, #3
    2b3e:	4423      	add	r3, r4
    2b40:	4630      	mov	r0, r6
    2b42:	685a      	ldr	r2, [r3, #4]
    2b44:	60e9      	str	r1, [r5, #12]
    2b46:	f042 0201 	orr.w	r2, r2, #1
    2b4a:	608d      	str	r5, [r1, #8]
    2b4c:	605a      	str	r2, [r3, #4]
    2b4e:	f000 fa57 	bl	3000 <__malloc_unlock>
    2b52:	3408      	adds	r4, #8
    2b54:	4620      	mov	r0, r4
    2b56:	b003      	add	sp, #12
    2b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b5c:	2400      	movs	r4, #0
    2b5e:	230c      	movs	r3, #12
    2b60:	4620      	mov	r0, r4
    2b62:	6033      	str	r3, [r6, #0]
    2b64:	b003      	add	sp, #12
    2b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b6a:	2380      	movs	r3, #128	; 0x80
    2b6c:	f04f 0e40 	mov.w	lr, #64	; 0x40
    2b70:	203f      	movs	r0, #63	; 0x3f
    2b72:	e749      	b.n	2a08 <_malloc_r+0x44>
    2b74:	4670      	mov	r0, lr
    2b76:	e75d      	b.n	2a34 <_malloc_r+0x70>
    2b78:	4423      	add	r3, r4
    2b7a:	68e1      	ldr	r1, [r4, #12]
    2b7c:	685a      	ldr	r2, [r3, #4]
    2b7e:	68a5      	ldr	r5, [r4, #8]
    2b80:	f042 0201 	orr.w	r2, r2, #1
    2b84:	60e9      	str	r1, [r5, #12]
    2b86:	4630      	mov	r0, r6
    2b88:	608d      	str	r5, [r1, #8]
    2b8a:	605a      	str	r2, [r3, #4]
    2b8c:	f000 fa38 	bl	3000 <__malloc_unlock>
    2b90:	3408      	adds	r4, #8
    2b92:	4620      	mov	r0, r4
    2b94:	b003      	add	sp, #12
    2b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b9a:	4423      	add	r3, r4
    2b9c:	4630      	mov	r0, r6
    2b9e:	685a      	ldr	r2, [r3, #4]
    2ba0:	f042 0201 	orr.w	r2, r2, #1
    2ba4:	605a      	str	r2, [r3, #4]
    2ba6:	f000 fa2b 	bl	3000 <__malloc_unlock>
    2baa:	3408      	adds	r4, #8
    2bac:	4620      	mov	r0, r4
    2bae:	b003      	add	sp, #12
    2bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bb4:	68bc      	ldr	r4, [r7, #8]
    2bb6:	6863      	ldr	r3, [r4, #4]
    2bb8:	f023 0803 	bic.w	r8, r3, #3
    2bbc:	45a8      	cmp	r8, r5
    2bbe:	d304      	bcc.n	2bca <_malloc_r+0x206>
    2bc0:	ebc5 0308 	rsb	r3, r5, r8
    2bc4:	2b0f      	cmp	r3, #15
    2bc6:	f300 808c 	bgt.w	2ce2 <_malloc_r+0x31e>
    2bca:	4b55      	ldr	r3, [pc, #340]	; (2d20 <_malloc_r+0x35c>)
    2bcc:	f8df 9160 	ldr.w	r9, [pc, #352]	; 2d30 <_malloc_r+0x36c>
    2bd0:	681a      	ldr	r2, [r3, #0]
    2bd2:	f8d9 3000 	ldr.w	r3, [r9]
    2bd6:	3301      	adds	r3, #1
    2bd8:	442a      	add	r2, r5
    2bda:	eb04 0a08 	add.w	sl, r4, r8
    2bde:	f000 8160 	beq.w	2ea2 <_malloc_r+0x4de>
    2be2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2be6:	320f      	adds	r2, #15
    2be8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    2bec:	f022 020f 	bic.w	r2, r2, #15
    2bf0:	4611      	mov	r1, r2
    2bf2:	4630      	mov	r0, r6
    2bf4:	9201      	str	r2, [sp, #4]
    2bf6:	f000 fa05 	bl	3004 <_sbrk_r>
    2bfa:	f1b0 3fff 	cmp.w	r0, #4294967295
    2bfe:	4683      	mov	fp, r0
    2c00:	9a01      	ldr	r2, [sp, #4]
    2c02:	f000 8158 	beq.w	2eb6 <_malloc_r+0x4f2>
    2c06:	4582      	cmp	sl, r0
    2c08:	f200 80fc 	bhi.w	2e04 <_malloc_r+0x440>
    2c0c:	4b45      	ldr	r3, [pc, #276]	; (2d24 <_malloc_r+0x360>)
    2c0e:	6819      	ldr	r1, [r3, #0]
    2c10:	45da      	cmp	sl, fp
    2c12:	4411      	add	r1, r2
    2c14:	6019      	str	r1, [r3, #0]
    2c16:	f000 8153 	beq.w	2ec0 <_malloc_r+0x4fc>
    2c1a:	f8d9 0000 	ldr.w	r0, [r9]
    2c1e:	f8df e110 	ldr.w	lr, [pc, #272]	; 2d30 <_malloc_r+0x36c>
    2c22:	3001      	adds	r0, #1
    2c24:	bf1b      	ittet	ne
    2c26:	ebca 0a0b 	rsbne	sl, sl, fp
    2c2a:	4451      	addne	r1, sl
    2c2c:	f8ce b000 	streq.w	fp, [lr]
    2c30:	6019      	strne	r1, [r3, #0]
    2c32:	f01b 0107 	ands.w	r1, fp, #7
    2c36:	f000 8117 	beq.w	2e68 <_malloc_r+0x4a4>
    2c3a:	f1c1 0008 	rsb	r0, r1, #8
    2c3e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    2c42:	4483      	add	fp, r0
    2c44:	3108      	adds	r1, #8
    2c46:	445a      	add	r2, fp
    2c48:	f3c2 020b 	ubfx	r2, r2, #0, #12
    2c4c:	ebc2 0901 	rsb	r9, r2, r1
    2c50:	4649      	mov	r1, r9
    2c52:	4630      	mov	r0, r6
    2c54:	9301      	str	r3, [sp, #4]
    2c56:	f000 f9d5 	bl	3004 <_sbrk_r>
    2c5a:	1c43      	adds	r3, r0, #1
    2c5c:	9b01      	ldr	r3, [sp, #4]
    2c5e:	f000 813f 	beq.w	2ee0 <_malloc_r+0x51c>
    2c62:	ebcb 0200 	rsb	r2, fp, r0
    2c66:	444a      	add	r2, r9
    2c68:	f042 0201 	orr.w	r2, r2, #1
    2c6c:	6819      	ldr	r1, [r3, #0]
    2c6e:	f8c7 b008 	str.w	fp, [r7, #8]
    2c72:	4449      	add	r1, r9
    2c74:	42bc      	cmp	r4, r7
    2c76:	f8cb 2004 	str.w	r2, [fp, #4]
    2c7a:	6019      	str	r1, [r3, #0]
    2c7c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2d24 <_malloc_r+0x360>
    2c80:	d016      	beq.n	2cb0 <_malloc_r+0x2ec>
    2c82:	f1b8 0f0f 	cmp.w	r8, #15
    2c86:	f240 80fd 	bls.w	2e84 <_malloc_r+0x4c0>
    2c8a:	6862      	ldr	r2, [r4, #4]
    2c8c:	f1a8 030c 	sub.w	r3, r8, #12
    2c90:	f023 0307 	bic.w	r3, r3, #7
    2c94:	18e0      	adds	r0, r4, r3
    2c96:	f002 0201 	and.w	r2, r2, #1
    2c9a:	f04f 0e05 	mov.w	lr, #5
    2c9e:	431a      	orrs	r2, r3
    2ca0:	2b0f      	cmp	r3, #15
    2ca2:	6062      	str	r2, [r4, #4]
    2ca4:	f8c0 e004 	str.w	lr, [r0, #4]
    2ca8:	f8c0 e008 	str.w	lr, [r0, #8]
    2cac:	f200 811c 	bhi.w	2ee8 <_malloc_r+0x524>
    2cb0:	4b1d      	ldr	r3, [pc, #116]	; (2d28 <_malloc_r+0x364>)
    2cb2:	68bc      	ldr	r4, [r7, #8]
    2cb4:	681a      	ldr	r2, [r3, #0]
    2cb6:	4291      	cmp	r1, r2
    2cb8:	bf88      	it	hi
    2cba:	6019      	strhi	r1, [r3, #0]
    2cbc:	4b1b      	ldr	r3, [pc, #108]	; (2d2c <_malloc_r+0x368>)
    2cbe:	681a      	ldr	r2, [r3, #0]
    2cc0:	4291      	cmp	r1, r2
    2cc2:	6862      	ldr	r2, [r4, #4]
    2cc4:	bf88      	it	hi
    2cc6:	6019      	strhi	r1, [r3, #0]
    2cc8:	f022 0203 	bic.w	r2, r2, #3
    2ccc:	4295      	cmp	r5, r2
    2cce:	eba2 0305 	sub.w	r3, r2, r5
    2cd2:	d801      	bhi.n	2cd8 <_malloc_r+0x314>
    2cd4:	2b0f      	cmp	r3, #15
    2cd6:	dc04      	bgt.n	2ce2 <_malloc_r+0x31e>
    2cd8:	4630      	mov	r0, r6
    2cda:	f000 f991 	bl	3000 <__malloc_unlock>
    2cde:	2400      	movs	r4, #0
    2ce0:	e738      	b.n	2b54 <_malloc_r+0x190>
    2ce2:	1962      	adds	r2, r4, r5
    2ce4:	f043 0301 	orr.w	r3, r3, #1
    2ce8:	f045 0501 	orr.w	r5, r5, #1
    2cec:	6065      	str	r5, [r4, #4]
    2cee:	4630      	mov	r0, r6
    2cf0:	60ba      	str	r2, [r7, #8]
    2cf2:	6053      	str	r3, [r2, #4]
    2cf4:	f000 f984 	bl	3000 <__malloc_unlock>
    2cf8:	3408      	adds	r4, #8
    2cfa:	4620      	mov	r0, r4
    2cfc:	b003      	add	sp, #12
    2cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d02:	2b14      	cmp	r3, #20
    2d04:	d971      	bls.n	2dea <_malloc_r+0x426>
    2d06:	2b54      	cmp	r3, #84	; 0x54
    2d08:	f200 80a4 	bhi.w	2e54 <_malloc_r+0x490>
    2d0c:	0b28      	lsrs	r0, r5, #12
    2d0e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    2d12:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2d16:	306e      	adds	r0, #110	; 0x6e
    2d18:	e676      	b.n	2a08 <_malloc_r+0x44>
    2d1a:	bf00      	nop
    2d1c:	20000ba8 	.word	0x20000ba8
    2d20:	20001540 	.word	0x20001540
    2d24:	20001544 	.word	0x20001544
    2d28:	2000153c 	.word	0x2000153c
    2d2c:	20001538 	.word	0x20001538
    2d30:	20000fb4 	.word	0x20000fb4
    2d34:	0a5a      	lsrs	r2, r3, #9
    2d36:	2a04      	cmp	r2, #4
    2d38:	d95e      	bls.n	2df8 <_malloc_r+0x434>
    2d3a:	2a14      	cmp	r2, #20
    2d3c:	f200 80b3 	bhi.w	2ea6 <_malloc_r+0x4e2>
    2d40:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    2d44:	0049      	lsls	r1, r1, #1
    2d46:	325b      	adds	r2, #91	; 0x5b
    2d48:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    2d4c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    2d50:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 2f30 <_malloc_r+0x56c>
    2d54:	f1ac 0c08 	sub.w	ip, ip, #8
    2d58:	458c      	cmp	ip, r1
    2d5a:	f000 8088 	beq.w	2e6e <_malloc_r+0x4aa>
    2d5e:	684a      	ldr	r2, [r1, #4]
    2d60:	f022 0203 	bic.w	r2, r2, #3
    2d64:	4293      	cmp	r3, r2
    2d66:	d202      	bcs.n	2d6e <_malloc_r+0x3aa>
    2d68:	6889      	ldr	r1, [r1, #8]
    2d6a:	458c      	cmp	ip, r1
    2d6c:	d1f7      	bne.n	2d5e <_malloc_r+0x39a>
    2d6e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    2d72:	687a      	ldr	r2, [r7, #4]
    2d74:	f8c4 c00c 	str.w	ip, [r4, #12]
    2d78:	60a1      	str	r1, [r4, #8]
    2d7a:	f8cc 4008 	str.w	r4, [ip, #8]
    2d7e:	60cc      	str	r4, [r1, #12]
    2d80:	e688      	b.n	2a94 <_malloc_r+0xd0>
    2d82:	1963      	adds	r3, r4, r5
    2d84:	f042 0701 	orr.w	r7, r2, #1
    2d88:	f045 0501 	orr.w	r5, r5, #1
    2d8c:	6065      	str	r5, [r4, #4]
    2d8e:	4630      	mov	r0, r6
    2d90:	614b      	str	r3, [r1, #20]
    2d92:	610b      	str	r3, [r1, #16]
    2d94:	f8c3 e00c 	str.w	lr, [r3, #12]
    2d98:	f8c3 e008 	str.w	lr, [r3, #8]
    2d9c:	605f      	str	r7, [r3, #4]
    2d9e:	509a      	str	r2, [r3, r2]
    2da0:	3408      	adds	r4, #8
    2da2:	f000 f92d 	bl	3000 <__malloc_unlock>
    2da6:	e6d5      	b.n	2b54 <_malloc_r+0x190>
    2da8:	684a      	ldr	r2, [r1, #4]
    2daa:	e673      	b.n	2a94 <_malloc_r+0xd0>
    2dac:	f108 0801 	add.w	r8, r8, #1
    2db0:	f018 0f03 	tst.w	r8, #3
    2db4:	f10c 0c08 	add.w	ip, ip, #8
    2db8:	f47f ae7f 	bne.w	2aba <_malloc_r+0xf6>
    2dbc:	e030      	b.n	2e20 <_malloc_r+0x45c>
    2dbe:	68dc      	ldr	r4, [r3, #12]
    2dc0:	42a3      	cmp	r3, r4
    2dc2:	bf08      	it	eq
    2dc4:	3002      	addeq	r0, #2
    2dc6:	f43f ae35 	beq.w	2a34 <_malloc_r+0x70>
    2dca:	e6b3      	b.n	2b34 <_malloc_r+0x170>
    2dcc:	440b      	add	r3, r1
    2dce:	460c      	mov	r4, r1
    2dd0:	685a      	ldr	r2, [r3, #4]
    2dd2:	68c9      	ldr	r1, [r1, #12]
    2dd4:	f854 5f08 	ldr.w	r5, [r4, #8]!
    2dd8:	f042 0201 	orr.w	r2, r2, #1
    2ddc:	605a      	str	r2, [r3, #4]
    2dde:	4630      	mov	r0, r6
    2de0:	60e9      	str	r1, [r5, #12]
    2de2:	608d      	str	r5, [r1, #8]
    2de4:	f000 f90c 	bl	3000 <__malloc_unlock>
    2de8:	e6b4      	b.n	2b54 <_malloc_r+0x190>
    2dea:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    2dee:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    2df2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2df6:	e607      	b.n	2a08 <_malloc_r+0x44>
    2df8:	099a      	lsrs	r2, r3, #6
    2dfa:	f102 0139 	add.w	r1, r2, #57	; 0x39
    2dfe:	0049      	lsls	r1, r1, #1
    2e00:	3238      	adds	r2, #56	; 0x38
    2e02:	e7a1      	b.n	2d48 <_malloc_r+0x384>
    2e04:	42bc      	cmp	r4, r7
    2e06:	4b4a      	ldr	r3, [pc, #296]	; (2f30 <_malloc_r+0x56c>)
    2e08:	f43f af00 	beq.w	2c0c <_malloc_r+0x248>
    2e0c:	689c      	ldr	r4, [r3, #8]
    2e0e:	6862      	ldr	r2, [r4, #4]
    2e10:	f022 0203 	bic.w	r2, r2, #3
    2e14:	e75a      	b.n	2ccc <_malloc_r+0x308>
    2e16:	f859 3908 	ldr.w	r3, [r9], #-8
    2e1a:	4599      	cmp	r9, r3
    2e1c:	f040 8082 	bne.w	2f24 <_malloc_r+0x560>
    2e20:	f010 0f03 	tst.w	r0, #3
    2e24:	f100 30ff 	add.w	r0, r0, #4294967295
    2e28:	d1f5      	bne.n	2e16 <_malloc_r+0x452>
    2e2a:	687b      	ldr	r3, [r7, #4]
    2e2c:	ea23 0304 	bic.w	r3, r3, r4
    2e30:	607b      	str	r3, [r7, #4]
    2e32:	0064      	lsls	r4, r4, #1
    2e34:	429c      	cmp	r4, r3
    2e36:	f63f aebd 	bhi.w	2bb4 <_malloc_r+0x1f0>
    2e3a:	2c00      	cmp	r4, #0
    2e3c:	f43f aeba 	beq.w	2bb4 <_malloc_r+0x1f0>
    2e40:	421c      	tst	r4, r3
    2e42:	4640      	mov	r0, r8
    2e44:	f47f ae35 	bne.w	2ab2 <_malloc_r+0xee>
    2e48:	0064      	lsls	r4, r4, #1
    2e4a:	421c      	tst	r4, r3
    2e4c:	f100 0004 	add.w	r0, r0, #4
    2e50:	d0fa      	beq.n	2e48 <_malloc_r+0x484>
    2e52:	e62e      	b.n	2ab2 <_malloc_r+0xee>
    2e54:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    2e58:	d818      	bhi.n	2e8c <_malloc_r+0x4c8>
    2e5a:	0be8      	lsrs	r0, r5, #15
    2e5c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    2e60:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2e64:	3077      	adds	r0, #119	; 0x77
    2e66:	e5cf      	b.n	2a08 <_malloc_r+0x44>
    2e68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2e6c:	e6eb      	b.n	2c46 <_malloc_r+0x282>
    2e6e:	2101      	movs	r1, #1
    2e70:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2e74:	1092      	asrs	r2, r2, #2
    2e76:	fa01 f202 	lsl.w	r2, r1, r2
    2e7a:	431a      	orrs	r2, r3
    2e7c:	f8c8 2004 	str.w	r2, [r8, #4]
    2e80:	4661      	mov	r1, ip
    2e82:	e777      	b.n	2d74 <_malloc_r+0x3b0>
    2e84:	2301      	movs	r3, #1
    2e86:	f8cb 3004 	str.w	r3, [fp, #4]
    2e8a:	e725      	b.n	2cd8 <_malloc_r+0x314>
    2e8c:	f240 5254 	movw	r2, #1364	; 0x554
    2e90:	4293      	cmp	r3, r2
    2e92:	d820      	bhi.n	2ed6 <_malloc_r+0x512>
    2e94:	0ca8      	lsrs	r0, r5, #18
    2e96:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    2e9a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2e9e:	307c      	adds	r0, #124	; 0x7c
    2ea0:	e5b2      	b.n	2a08 <_malloc_r+0x44>
    2ea2:	3210      	adds	r2, #16
    2ea4:	e6a4      	b.n	2bf0 <_malloc_r+0x22c>
    2ea6:	2a54      	cmp	r2, #84	; 0x54
    2ea8:	d826      	bhi.n	2ef8 <_malloc_r+0x534>
    2eaa:	0b1a      	lsrs	r2, r3, #12
    2eac:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    2eb0:	0049      	lsls	r1, r1, #1
    2eb2:	326e      	adds	r2, #110	; 0x6e
    2eb4:	e748      	b.n	2d48 <_malloc_r+0x384>
    2eb6:	68bc      	ldr	r4, [r7, #8]
    2eb8:	6862      	ldr	r2, [r4, #4]
    2eba:	f022 0203 	bic.w	r2, r2, #3
    2ebe:	e705      	b.n	2ccc <_malloc_r+0x308>
    2ec0:	f3ca 000b 	ubfx	r0, sl, #0, #12
    2ec4:	2800      	cmp	r0, #0
    2ec6:	f47f aea8 	bne.w	2c1a <_malloc_r+0x256>
    2eca:	4442      	add	r2, r8
    2ecc:	68bb      	ldr	r3, [r7, #8]
    2ece:	f042 0201 	orr.w	r2, r2, #1
    2ed2:	605a      	str	r2, [r3, #4]
    2ed4:	e6ec      	b.n	2cb0 <_malloc_r+0x2ec>
    2ed6:	23fe      	movs	r3, #254	; 0xfe
    2ed8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    2edc:	207e      	movs	r0, #126	; 0x7e
    2ede:	e593      	b.n	2a08 <_malloc_r+0x44>
    2ee0:	2201      	movs	r2, #1
    2ee2:	f04f 0900 	mov.w	r9, #0
    2ee6:	e6c1      	b.n	2c6c <_malloc_r+0x2a8>
    2ee8:	f104 0108 	add.w	r1, r4, #8
    2eec:	4630      	mov	r0, r6
    2eee:	f000 f9fb 	bl	32e8 <_free_r>
    2ef2:	f8d9 1000 	ldr.w	r1, [r9]
    2ef6:	e6db      	b.n	2cb0 <_malloc_r+0x2ec>
    2ef8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    2efc:	d805      	bhi.n	2f0a <_malloc_r+0x546>
    2efe:	0bda      	lsrs	r2, r3, #15
    2f00:	f102 0178 	add.w	r1, r2, #120	; 0x78
    2f04:	0049      	lsls	r1, r1, #1
    2f06:	3277      	adds	r2, #119	; 0x77
    2f08:	e71e      	b.n	2d48 <_malloc_r+0x384>
    2f0a:	f240 5154 	movw	r1, #1364	; 0x554
    2f0e:	428a      	cmp	r2, r1
    2f10:	d805      	bhi.n	2f1e <_malloc_r+0x55a>
    2f12:	0c9a      	lsrs	r2, r3, #18
    2f14:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    2f18:	0049      	lsls	r1, r1, #1
    2f1a:	327c      	adds	r2, #124	; 0x7c
    2f1c:	e714      	b.n	2d48 <_malloc_r+0x384>
    2f1e:	21fe      	movs	r1, #254	; 0xfe
    2f20:	227e      	movs	r2, #126	; 0x7e
    2f22:	e711      	b.n	2d48 <_malloc_r+0x384>
    2f24:	687b      	ldr	r3, [r7, #4]
    2f26:	e784      	b.n	2e32 <_malloc_r+0x46e>
    2f28:	08e8      	lsrs	r0, r5, #3
    2f2a:	1c43      	adds	r3, r0, #1
    2f2c:	005b      	lsls	r3, r3, #1
    2f2e:	e5f8      	b.n	2b22 <_malloc_r+0x15e>
    2f30:	20000ba8 	.word	0x20000ba8

00002f34 <__ascii_mbtowc>:
    2f34:	b082      	sub	sp, #8
    2f36:	b149      	cbz	r1, 2f4c <__ascii_mbtowc+0x18>
    2f38:	b15a      	cbz	r2, 2f52 <__ascii_mbtowc+0x1e>
    2f3a:	b16b      	cbz	r3, 2f58 <__ascii_mbtowc+0x24>
    2f3c:	7813      	ldrb	r3, [r2, #0]
    2f3e:	600b      	str	r3, [r1, #0]
    2f40:	7812      	ldrb	r2, [r2, #0]
    2f42:	1c10      	adds	r0, r2, #0
    2f44:	bf18      	it	ne
    2f46:	2001      	movne	r0, #1
    2f48:	b002      	add	sp, #8
    2f4a:	4770      	bx	lr
    2f4c:	a901      	add	r1, sp, #4
    2f4e:	2a00      	cmp	r2, #0
    2f50:	d1f3      	bne.n	2f3a <__ascii_mbtowc+0x6>
    2f52:	4610      	mov	r0, r2
    2f54:	b002      	add	sp, #8
    2f56:	4770      	bx	lr
    2f58:	f06f 0001 	mvn.w	r0, #1
    2f5c:	e7f4      	b.n	2f48 <__ascii_mbtowc+0x14>
    2f5e:	bf00      	nop

00002f60 <memset>:
    2f60:	b470      	push	{r4, r5, r6}
    2f62:	0784      	lsls	r4, r0, #30
    2f64:	d046      	beq.n	2ff4 <memset+0x94>
    2f66:	1e54      	subs	r4, r2, #1
    2f68:	2a00      	cmp	r2, #0
    2f6a:	d041      	beq.n	2ff0 <memset+0x90>
    2f6c:	b2cd      	uxtb	r5, r1
    2f6e:	4603      	mov	r3, r0
    2f70:	e002      	b.n	2f78 <memset+0x18>
    2f72:	1e62      	subs	r2, r4, #1
    2f74:	b3e4      	cbz	r4, 2ff0 <memset+0x90>
    2f76:	4614      	mov	r4, r2
    2f78:	f803 5b01 	strb.w	r5, [r3], #1
    2f7c:	079a      	lsls	r2, r3, #30
    2f7e:	d1f8      	bne.n	2f72 <memset+0x12>
    2f80:	2c03      	cmp	r4, #3
    2f82:	d92e      	bls.n	2fe2 <memset+0x82>
    2f84:	b2cd      	uxtb	r5, r1
    2f86:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    2f8a:	2c0f      	cmp	r4, #15
    2f8c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    2f90:	d919      	bls.n	2fc6 <memset+0x66>
    2f92:	f103 0210 	add.w	r2, r3, #16
    2f96:	4626      	mov	r6, r4
    2f98:	3e10      	subs	r6, #16
    2f9a:	2e0f      	cmp	r6, #15
    2f9c:	f842 5c10 	str.w	r5, [r2, #-16]
    2fa0:	f842 5c0c 	str.w	r5, [r2, #-12]
    2fa4:	f842 5c08 	str.w	r5, [r2, #-8]
    2fa8:	f842 5c04 	str.w	r5, [r2, #-4]
    2fac:	f102 0210 	add.w	r2, r2, #16
    2fb0:	d8f2      	bhi.n	2f98 <memset+0x38>
    2fb2:	f1a4 0210 	sub.w	r2, r4, #16
    2fb6:	f022 020f 	bic.w	r2, r2, #15
    2fba:	f004 040f 	and.w	r4, r4, #15
    2fbe:	3210      	adds	r2, #16
    2fc0:	2c03      	cmp	r4, #3
    2fc2:	4413      	add	r3, r2
    2fc4:	d90d      	bls.n	2fe2 <memset+0x82>
    2fc6:	461e      	mov	r6, r3
    2fc8:	4622      	mov	r2, r4
    2fca:	3a04      	subs	r2, #4
    2fcc:	2a03      	cmp	r2, #3
    2fce:	f846 5b04 	str.w	r5, [r6], #4
    2fd2:	d8fa      	bhi.n	2fca <memset+0x6a>
    2fd4:	1f22      	subs	r2, r4, #4
    2fd6:	f022 0203 	bic.w	r2, r2, #3
    2fda:	3204      	adds	r2, #4
    2fdc:	4413      	add	r3, r2
    2fde:	f004 0403 	and.w	r4, r4, #3
    2fe2:	b12c      	cbz	r4, 2ff0 <memset+0x90>
    2fe4:	b2c9      	uxtb	r1, r1
    2fe6:	441c      	add	r4, r3
    2fe8:	f803 1b01 	strb.w	r1, [r3], #1
    2fec:	42a3      	cmp	r3, r4
    2fee:	d1fb      	bne.n	2fe8 <memset+0x88>
    2ff0:	bc70      	pop	{r4, r5, r6}
    2ff2:	4770      	bx	lr
    2ff4:	4614      	mov	r4, r2
    2ff6:	4603      	mov	r3, r0
    2ff8:	e7c2      	b.n	2f80 <memset+0x20>
    2ffa:	bf00      	nop

00002ffc <__malloc_lock>:
    2ffc:	4770      	bx	lr
    2ffe:	bf00      	nop

00003000 <__malloc_unlock>:
    3000:	4770      	bx	lr
    3002:	bf00      	nop

00003004 <_sbrk_r>:
    3004:	b538      	push	{r3, r4, r5, lr}
    3006:	4c07      	ldr	r4, [pc, #28]	; (3024 <_sbrk_r+0x20>)
    3008:	2300      	movs	r3, #0
    300a:	4605      	mov	r5, r0
    300c:	4608      	mov	r0, r1
    300e:	6023      	str	r3, [r4, #0]
    3010:	f7fd fc70 	bl	8f4 <_sbrk>
    3014:	1c43      	adds	r3, r0, #1
    3016:	d000      	beq.n	301a <_sbrk_r+0x16>
    3018:	bd38      	pop	{r3, r4, r5, pc}
    301a:	6823      	ldr	r3, [r4, #0]
    301c:	2b00      	cmp	r3, #0
    301e:	d0fb      	beq.n	3018 <_sbrk_r+0x14>
    3020:	602b      	str	r3, [r5, #0]
    3022:	bd38      	pop	{r3, r4, r5, pc}
    3024:	2000328c 	.word	0x2000328c

00003028 <_strtol_l.isra.0>:
    3028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    302c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    3030:	460f      	mov	r7, r1
    3032:	4680      	mov	r8, r0
    3034:	4616      	mov	r6, r2
    3036:	461d      	mov	r5, r3
    3038:	468b      	mov	fp, r1
    303a:	e000      	b.n	303e <_strtol_l.isra.0+0x16>
    303c:	46a3      	mov	fp, r4
    303e:	465c      	mov	r4, fp
    3040:	4648      	mov	r0, r9
    3042:	f814 ab01 	ldrb.w	sl, [r4], #1
    3046:	f7ff fcb1 	bl	29ac <__locale_ctype_ptr_l>
    304a:	4450      	add	r0, sl
    304c:	7841      	ldrb	r1, [r0, #1]
    304e:	f001 0108 	and.w	r1, r1, #8
    3052:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    3056:	2900      	cmp	r1, #0
    3058:	d1f0      	bne.n	303c <_strtol_l.isra.0+0x14>
    305a:	4652      	mov	r2, sl
    305c:	2a2d      	cmp	r2, #45	; 0x2d
    305e:	d061      	beq.n	3124 <_strtol_l.isra.0+0xfc>
    3060:	2a2b      	cmp	r2, #43	; 0x2b
    3062:	bf04      	itt	eq
    3064:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
    3068:	f10b 0402 	addeq.w	r4, fp, #2
    306c:	2d00      	cmp	r5, #0
    306e:	d043      	beq.n	30f8 <_strtol_l.isra.0+0xd0>
    3070:	2d10      	cmp	r5, #16
    3072:	d065      	beq.n	3140 <_strtol_l.isra.0+0x118>
    3074:	46a9      	mov	r9, r5
    3076:	f1bc 0f00 	cmp.w	ip, #0
    307a:	bf0c      	ite	eq
    307c:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
    3080:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
    3084:	2100      	movs	r1, #0
    3086:	fbba fef9 	udiv	lr, sl, r9
    308a:	4608      	mov	r0, r1
    308c:	fb09 aa1e 	mls	sl, r9, lr, sl
    3090:	e005      	b.n	309e <_strtol_l.isra.0+0x76>
    3092:	d029      	beq.n	30e8 <_strtol_l.isra.0+0xc0>
    3094:	fb09 3000 	mla	r0, r9, r0, r3
    3098:	2101      	movs	r1, #1
    309a:	f814 2b01 	ldrb.w	r2, [r4], #1
    309e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    30a2:	2b09      	cmp	r3, #9
    30a4:	d905      	bls.n	30b2 <_strtol_l.isra.0+0x8a>
    30a6:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    30aa:	2b19      	cmp	r3, #25
    30ac:	d80a      	bhi.n	30c4 <_strtol_l.isra.0+0x9c>
    30ae:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
    30b2:	429d      	cmp	r5, r3
    30b4:	dd0e      	ble.n	30d4 <_strtol_l.isra.0+0xac>
    30b6:	1c4a      	adds	r2, r1, #1
    30b8:	d0ef      	beq.n	309a <_strtol_l.isra.0+0x72>
    30ba:	4586      	cmp	lr, r0
    30bc:	d2e9      	bcs.n	3092 <_strtol_l.isra.0+0x6a>
    30be:	f04f 31ff 	mov.w	r1, #4294967295
    30c2:	e7ea      	b.n	309a <_strtol_l.isra.0+0x72>
    30c4:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    30c8:	2b19      	cmp	r3, #25
    30ca:	d803      	bhi.n	30d4 <_strtol_l.isra.0+0xac>
    30cc:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
    30d0:	429d      	cmp	r5, r3
    30d2:	dcf0      	bgt.n	30b6 <_strtol_l.isra.0+0x8e>
    30d4:	1c4b      	adds	r3, r1, #1
    30d6:	d015      	beq.n	3104 <_strtol_l.isra.0+0xdc>
    30d8:	f1bc 0f00 	cmp.w	ip, #0
    30dc:	d110      	bne.n	3100 <_strtol_l.isra.0+0xd8>
    30de:	b14e      	cbz	r6, 30f4 <_strtol_l.isra.0+0xcc>
    30e0:	b9e1      	cbnz	r1, 311c <_strtol_l.isra.0+0xf4>
    30e2:	6037      	str	r7, [r6, #0]
    30e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30e8:	459a      	cmp	sl, r3
    30ea:	dad3      	bge.n	3094 <_strtol_l.isra.0+0x6c>
    30ec:	4670      	mov	r0, lr
    30ee:	f04f 31ff 	mov.w	r1, #4294967295
    30f2:	e7d2      	b.n	309a <_strtol_l.isra.0+0x72>
    30f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30f8:	2a30      	cmp	r2, #48	; 0x30
    30fa:	d01a      	beq.n	3132 <_strtol_l.isra.0+0x10a>
    30fc:	250a      	movs	r5, #10
    30fe:	e7b9      	b.n	3074 <_strtol_l.isra.0+0x4c>
    3100:	4240      	negs	r0, r0
    3102:	e7ec      	b.n	30de <_strtol_l.isra.0+0xb6>
    3104:	f1bc 0f00 	cmp.w	ip, #0
    3108:	f04f 0322 	mov.w	r3, #34	; 0x22
    310c:	bf0c      	ite	eq
    310e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    3112:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    3116:	f8c8 3000 	str.w	r3, [r8]
    311a:	b1f6      	cbz	r6, 315a <_strtol_l.isra.0+0x132>
    311c:	1e67      	subs	r7, r4, #1
    311e:	6037      	str	r7, [r6, #0]
    3120:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3124:	f10b 0402 	add.w	r4, fp, #2
    3128:	f89b 2001 	ldrb.w	r2, [fp, #1]
    312c:	f04f 0c01 	mov.w	ip, #1
    3130:	e79c      	b.n	306c <_strtol_l.isra.0+0x44>
    3132:	7823      	ldrb	r3, [r4, #0]
    3134:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    3138:	2b58      	cmp	r3, #88	; 0x58
    313a:	d008      	beq.n	314e <_strtol_l.isra.0+0x126>
    313c:	2508      	movs	r5, #8
    313e:	e799      	b.n	3074 <_strtol_l.isra.0+0x4c>
    3140:	2a30      	cmp	r2, #48	; 0x30
    3142:	d197      	bne.n	3074 <_strtol_l.isra.0+0x4c>
    3144:	7823      	ldrb	r3, [r4, #0]
    3146:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    314a:	2b58      	cmp	r3, #88	; 0x58
    314c:	d192      	bne.n	3074 <_strtol_l.isra.0+0x4c>
    314e:	f04f 0910 	mov.w	r9, #16
    3152:	7862      	ldrb	r2, [r4, #1]
    3154:	464d      	mov	r5, r9
    3156:	3402      	adds	r4, #2
    3158:	e78d      	b.n	3076 <_strtol_l.isra.0+0x4e>
    315a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    315e:	bf00      	nop

00003160 <strtol>:
    3160:	b530      	push	{r4, r5, lr}
    3162:	4c08      	ldr	r4, [pc, #32]	; (3184 <strtol+0x24>)
    3164:	4b08      	ldr	r3, [pc, #32]	; (3188 <strtol+0x28>)
    3166:	6825      	ldr	r5, [r4, #0]
    3168:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    316a:	b083      	sub	sp, #12
    316c:	2c00      	cmp	r4, #0
    316e:	bf08      	it	eq
    3170:	461c      	moveq	r4, r3
    3172:	9400      	str	r4, [sp, #0]
    3174:	4613      	mov	r3, r2
    3176:	460a      	mov	r2, r1
    3178:	4601      	mov	r1, r0
    317a:	4628      	mov	r0, r5
    317c:	f7ff ff54 	bl	3028 <_strtol_l.isra.0>
    3180:	b003      	add	sp, #12
    3182:	bd30      	pop	{r4, r5, pc}
    3184:	20000a38 	.word	0x20000a38
    3188:	20000a3c 	.word	0x20000a3c

0000318c <__ascii_wctomb>:
    318c:	b121      	cbz	r1, 3198 <__ascii_wctomb+0xc>
    318e:	2aff      	cmp	r2, #255	; 0xff
    3190:	d804      	bhi.n	319c <__ascii_wctomb+0x10>
    3192:	700a      	strb	r2, [r1, #0]
    3194:	2001      	movs	r0, #1
    3196:	4770      	bx	lr
    3198:	4608      	mov	r0, r1
    319a:	4770      	bx	lr
    319c:	238a      	movs	r3, #138	; 0x8a
    319e:	6003      	str	r3, [r0, #0]
    31a0:	f04f 30ff 	mov.w	r0, #4294967295
    31a4:	4770      	bx	lr
    31a6:	bf00      	nop

000031a8 <__register_exitproc>:
    31a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31ac:	4c25      	ldr	r4, [pc, #148]	; (3244 <__register_exitproc+0x9c>)
    31ae:	6825      	ldr	r5, [r4, #0]
    31b0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    31b4:	4606      	mov	r6, r0
    31b6:	4688      	mov	r8, r1
    31b8:	4692      	mov	sl, r2
    31ba:	4699      	mov	r9, r3
    31bc:	b3c4      	cbz	r4, 3230 <__register_exitproc+0x88>
    31be:	6860      	ldr	r0, [r4, #4]
    31c0:	281f      	cmp	r0, #31
    31c2:	dc17      	bgt.n	31f4 <__register_exitproc+0x4c>
    31c4:	1c43      	adds	r3, r0, #1
    31c6:	b176      	cbz	r6, 31e6 <__register_exitproc+0x3e>
    31c8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    31cc:	2201      	movs	r2, #1
    31ce:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    31d2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    31d6:	4082      	lsls	r2, r0
    31d8:	4311      	orrs	r1, r2
    31da:	2e02      	cmp	r6, #2
    31dc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    31e0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    31e4:	d01e      	beq.n	3224 <__register_exitproc+0x7c>
    31e6:	3002      	adds	r0, #2
    31e8:	6063      	str	r3, [r4, #4]
    31ea:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    31ee:	2000      	movs	r0, #0
    31f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    31f4:	4b14      	ldr	r3, [pc, #80]	; (3248 <__register_exitproc+0xa0>)
    31f6:	b303      	cbz	r3, 323a <__register_exitproc+0x92>
    31f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    31fc:	f7ff fbda 	bl	29b4 <malloc>
    3200:	4604      	mov	r4, r0
    3202:	b1d0      	cbz	r0, 323a <__register_exitproc+0x92>
    3204:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    3208:	2700      	movs	r7, #0
    320a:	e880 0088 	stmia.w	r0, {r3, r7}
    320e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    3212:	4638      	mov	r0, r7
    3214:	2301      	movs	r3, #1
    3216:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    321a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    321e:	2e00      	cmp	r6, #0
    3220:	d0e1      	beq.n	31e6 <__register_exitproc+0x3e>
    3222:	e7d1      	b.n	31c8 <__register_exitproc+0x20>
    3224:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    3228:	430a      	orrs	r2, r1
    322a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    322e:	e7da      	b.n	31e6 <__register_exitproc+0x3e>
    3230:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    3234:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    3238:	e7c1      	b.n	31be <__register_exitproc+0x16>
    323a:	f04f 30ff 	mov.w	r0, #4294967295
    323e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3242:	bf00      	nop
    3244:	20000498 	.word	0x20000498
    3248:	000029b5 	.word	0x000029b5

0000324c <_malloc_trim_r>:
    324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    324e:	4f23      	ldr	r7, [pc, #140]	; (32dc <_malloc_trim_r+0x90>)
    3250:	460c      	mov	r4, r1
    3252:	4606      	mov	r6, r0
    3254:	f7ff fed2 	bl	2ffc <__malloc_lock>
    3258:	68bb      	ldr	r3, [r7, #8]
    325a:	685d      	ldr	r5, [r3, #4]
    325c:	f025 0503 	bic.w	r5, r5, #3
    3260:	1b29      	subs	r1, r5, r4
    3262:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    3266:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    326a:	f021 010f 	bic.w	r1, r1, #15
    326e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    3272:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    3276:	db07      	blt.n	3288 <_malloc_trim_r+0x3c>
    3278:	2100      	movs	r1, #0
    327a:	4630      	mov	r0, r6
    327c:	f7ff fec2 	bl	3004 <_sbrk_r>
    3280:	68bb      	ldr	r3, [r7, #8]
    3282:	442b      	add	r3, r5
    3284:	4298      	cmp	r0, r3
    3286:	d004      	beq.n	3292 <_malloc_trim_r+0x46>
    3288:	4630      	mov	r0, r6
    328a:	f7ff feb9 	bl	3000 <__malloc_unlock>
    328e:	2000      	movs	r0, #0
    3290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3292:	4261      	negs	r1, r4
    3294:	4630      	mov	r0, r6
    3296:	f7ff feb5 	bl	3004 <_sbrk_r>
    329a:	3001      	adds	r0, #1
    329c:	d00d      	beq.n	32ba <_malloc_trim_r+0x6e>
    329e:	4b10      	ldr	r3, [pc, #64]	; (32e0 <_malloc_trim_r+0x94>)
    32a0:	68ba      	ldr	r2, [r7, #8]
    32a2:	6819      	ldr	r1, [r3, #0]
    32a4:	1b2d      	subs	r5, r5, r4
    32a6:	f045 0501 	orr.w	r5, r5, #1
    32aa:	4630      	mov	r0, r6
    32ac:	1b09      	subs	r1, r1, r4
    32ae:	6055      	str	r5, [r2, #4]
    32b0:	6019      	str	r1, [r3, #0]
    32b2:	f7ff fea5 	bl	3000 <__malloc_unlock>
    32b6:	2001      	movs	r0, #1
    32b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32ba:	2100      	movs	r1, #0
    32bc:	4630      	mov	r0, r6
    32be:	f7ff fea1 	bl	3004 <_sbrk_r>
    32c2:	68ba      	ldr	r2, [r7, #8]
    32c4:	1a83      	subs	r3, r0, r2
    32c6:	2b0f      	cmp	r3, #15
    32c8:	ddde      	ble.n	3288 <_malloc_trim_r+0x3c>
    32ca:	4c06      	ldr	r4, [pc, #24]	; (32e4 <_malloc_trim_r+0x98>)
    32cc:	4904      	ldr	r1, [pc, #16]	; (32e0 <_malloc_trim_r+0x94>)
    32ce:	6824      	ldr	r4, [r4, #0]
    32d0:	f043 0301 	orr.w	r3, r3, #1
    32d4:	1b00      	subs	r0, r0, r4
    32d6:	6053      	str	r3, [r2, #4]
    32d8:	6008      	str	r0, [r1, #0]
    32da:	e7d5      	b.n	3288 <_malloc_trim_r+0x3c>
    32dc:	20000ba8 	.word	0x20000ba8
    32e0:	20001544 	.word	0x20001544
    32e4:	20000fb4 	.word	0x20000fb4

000032e8 <_free_r>:
    32e8:	2900      	cmp	r1, #0
    32ea:	d045      	beq.n	3378 <_free_r+0x90>
    32ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32f0:	460d      	mov	r5, r1
    32f2:	4680      	mov	r8, r0
    32f4:	f7ff fe82 	bl	2ffc <__malloc_lock>
    32f8:	f855 7c04 	ldr.w	r7, [r5, #-4]
    32fc:	496a      	ldr	r1, [pc, #424]	; (34a8 <_free_r+0x1c0>)
    32fe:	f027 0301 	bic.w	r3, r7, #1
    3302:	f1a5 0408 	sub.w	r4, r5, #8
    3306:	18e2      	adds	r2, r4, r3
    3308:	688e      	ldr	r6, [r1, #8]
    330a:	6850      	ldr	r0, [r2, #4]
    330c:	42b2      	cmp	r2, r6
    330e:	f020 0003 	bic.w	r0, r0, #3
    3312:	d062      	beq.n	33da <_free_r+0xf2>
    3314:	07fe      	lsls	r6, r7, #31
    3316:	6050      	str	r0, [r2, #4]
    3318:	d40b      	bmi.n	3332 <_free_r+0x4a>
    331a:	f855 7c08 	ldr.w	r7, [r5, #-8]
    331e:	1be4      	subs	r4, r4, r7
    3320:	f101 0e08 	add.w	lr, r1, #8
    3324:	68a5      	ldr	r5, [r4, #8]
    3326:	4575      	cmp	r5, lr
    3328:	443b      	add	r3, r7
    332a:	d06f      	beq.n	340c <_free_r+0x124>
    332c:	68e7      	ldr	r7, [r4, #12]
    332e:	60ef      	str	r7, [r5, #12]
    3330:	60bd      	str	r5, [r7, #8]
    3332:	1815      	adds	r5, r2, r0
    3334:	686d      	ldr	r5, [r5, #4]
    3336:	07ed      	lsls	r5, r5, #31
    3338:	d542      	bpl.n	33c0 <_free_r+0xd8>
    333a:	f043 0201 	orr.w	r2, r3, #1
    333e:	6062      	str	r2, [r4, #4]
    3340:	50e3      	str	r3, [r4, r3]
    3342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3346:	d218      	bcs.n	337a <_free_r+0x92>
    3348:	08db      	lsrs	r3, r3, #3
    334a:	1c5a      	adds	r2, r3, #1
    334c:	684d      	ldr	r5, [r1, #4]
    334e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    3352:	60a7      	str	r7, [r4, #8]
    3354:	2001      	movs	r0, #1
    3356:	109b      	asrs	r3, r3, #2
    3358:	fa00 f303 	lsl.w	r3, r0, r3
    335c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    3360:	431d      	orrs	r5, r3
    3362:	3808      	subs	r0, #8
    3364:	60e0      	str	r0, [r4, #12]
    3366:	604d      	str	r5, [r1, #4]
    3368:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    336c:	60fc      	str	r4, [r7, #12]
    336e:	4640      	mov	r0, r8
    3370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3374:	f7ff be44 	b.w	3000 <__malloc_unlock>
    3378:	4770      	bx	lr
    337a:	0a5a      	lsrs	r2, r3, #9
    337c:	2a04      	cmp	r2, #4
    337e:	d853      	bhi.n	3428 <_free_r+0x140>
    3380:	099a      	lsrs	r2, r3, #6
    3382:	f102 0739 	add.w	r7, r2, #57	; 0x39
    3386:	007f      	lsls	r7, r7, #1
    3388:	f102 0538 	add.w	r5, r2, #56	; 0x38
    338c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    3390:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    3394:	4944      	ldr	r1, [pc, #272]	; (34a8 <_free_r+0x1c0>)
    3396:	3808      	subs	r0, #8
    3398:	4290      	cmp	r0, r2
    339a:	d04d      	beq.n	3438 <_free_r+0x150>
    339c:	6851      	ldr	r1, [r2, #4]
    339e:	f021 0103 	bic.w	r1, r1, #3
    33a2:	428b      	cmp	r3, r1
    33a4:	d202      	bcs.n	33ac <_free_r+0xc4>
    33a6:	6892      	ldr	r2, [r2, #8]
    33a8:	4290      	cmp	r0, r2
    33aa:	d1f7      	bne.n	339c <_free_r+0xb4>
    33ac:	68d0      	ldr	r0, [r2, #12]
    33ae:	60e0      	str	r0, [r4, #12]
    33b0:	60a2      	str	r2, [r4, #8]
    33b2:	6084      	str	r4, [r0, #8]
    33b4:	60d4      	str	r4, [r2, #12]
    33b6:	4640      	mov	r0, r8
    33b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    33bc:	f7ff be20 	b.w	3000 <__malloc_unlock>
    33c0:	6895      	ldr	r5, [r2, #8]
    33c2:	4f3a      	ldr	r7, [pc, #232]	; (34ac <_free_r+0x1c4>)
    33c4:	42bd      	cmp	r5, r7
    33c6:	4403      	add	r3, r0
    33c8:	d03f      	beq.n	344a <_free_r+0x162>
    33ca:	68d0      	ldr	r0, [r2, #12]
    33cc:	60e8      	str	r0, [r5, #12]
    33ce:	f043 0201 	orr.w	r2, r3, #1
    33d2:	6085      	str	r5, [r0, #8]
    33d4:	6062      	str	r2, [r4, #4]
    33d6:	50e3      	str	r3, [r4, r3]
    33d8:	e7b3      	b.n	3342 <_free_r+0x5a>
    33da:	07ff      	lsls	r7, r7, #31
    33dc:	4403      	add	r3, r0
    33de:	d407      	bmi.n	33f0 <_free_r+0x108>
    33e0:	f855 2c08 	ldr.w	r2, [r5, #-8]
    33e4:	1aa4      	subs	r4, r4, r2
    33e6:	4413      	add	r3, r2
    33e8:	68a0      	ldr	r0, [r4, #8]
    33ea:	68e2      	ldr	r2, [r4, #12]
    33ec:	60c2      	str	r2, [r0, #12]
    33ee:	6090      	str	r0, [r2, #8]
    33f0:	4a2f      	ldr	r2, [pc, #188]	; (34b0 <_free_r+0x1c8>)
    33f2:	6812      	ldr	r2, [r2, #0]
    33f4:	f043 0001 	orr.w	r0, r3, #1
    33f8:	4293      	cmp	r3, r2
    33fa:	6060      	str	r0, [r4, #4]
    33fc:	608c      	str	r4, [r1, #8]
    33fe:	d3b6      	bcc.n	336e <_free_r+0x86>
    3400:	4b2c      	ldr	r3, [pc, #176]	; (34b4 <_free_r+0x1cc>)
    3402:	4640      	mov	r0, r8
    3404:	6819      	ldr	r1, [r3, #0]
    3406:	f7ff ff21 	bl	324c <_malloc_trim_r>
    340a:	e7b0      	b.n	336e <_free_r+0x86>
    340c:	1811      	adds	r1, r2, r0
    340e:	6849      	ldr	r1, [r1, #4]
    3410:	07c9      	lsls	r1, r1, #31
    3412:	d444      	bmi.n	349e <_free_r+0x1b6>
    3414:	6891      	ldr	r1, [r2, #8]
    3416:	68d2      	ldr	r2, [r2, #12]
    3418:	60ca      	str	r2, [r1, #12]
    341a:	4403      	add	r3, r0
    341c:	f043 0001 	orr.w	r0, r3, #1
    3420:	6091      	str	r1, [r2, #8]
    3422:	6060      	str	r0, [r4, #4]
    3424:	50e3      	str	r3, [r4, r3]
    3426:	e7a2      	b.n	336e <_free_r+0x86>
    3428:	2a14      	cmp	r2, #20
    342a:	d817      	bhi.n	345c <_free_r+0x174>
    342c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    3430:	007f      	lsls	r7, r7, #1
    3432:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    3436:	e7a9      	b.n	338c <_free_r+0xa4>
    3438:	10aa      	asrs	r2, r5, #2
    343a:	684b      	ldr	r3, [r1, #4]
    343c:	2501      	movs	r5, #1
    343e:	fa05 f202 	lsl.w	r2, r5, r2
    3442:	4313      	orrs	r3, r2
    3444:	604b      	str	r3, [r1, #4]
    3446:	4602      	mov	r2, r0
    3448:	e7b1      	b.n	33ae <_free_r+0xc6>
    344a:	f043 0201 	orr.w	r2, r3, #1
    344e:	614c      	str	r4, [r1, #20]
    3450:	610c      	str	r4, [r1, #16]
    3452:	60e5      	str	r5, [r4, #12]
    3454:	60a5      	str	r5, [r4, #8]
    3456:	6062      	str	r2, [r4, #4]
    3458:	50e3      	str	r3, [r4, r3]
    345a:	e788      	b.n	336e <_free_r+0x86>
    345c:	2a54      	cmp	r2, #84	; 0x54
    345e:	d806      	bhi.n	346e <_free_r+0x186>
    3460:	0b1a      	lsrs	r2, r3, #12
    3462:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    3466:	007f      	lsls	r7, r7, #1
    3468:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    346c:	e78e      	b.n	338c <_free_r+0xa4>
    346e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    3472:	d806      	bhi.n	3482 <_free_r+0x19a>
    3474:	0bda      	lsrs	r2, r3, #15
    3476:	f102 0778 	add.w	r7, r2, #120	; 0x78
    347a:	007f      	lsls	r7, r7, #1
    347c:	f102 0577 	add.w	r5, r2, #119	; 0x77
    3480:	e784      	b.n	338c <_free_r+0xa4>
    3482:	f240 5054 	movw	r0, #1364	; 0x554
    3486:	4282      	cmp	r2, r0
    3488:	d806      	bhi.n	3498 <_free_r+0x1b0>
    348a:	0c9a      	lsrs	r2, r3, #18
    348c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    3490:	007f      	lsls	r7, r7, #1
    3492:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    3496:	e779      	b.n	338c <_free_r+0xa4>
    3498:	27fe      	movs	r7, #254	; 0xfe
    349a:	257e      	movs	r5, #126	; 0x7e
    349c:	e776      	b.n	338c <_free_r+0xa4>
    349e:	f043 0201 	orr.w	r2, r3, #1
    34a2:	6062      	str	r2, [r4, #4]
    34a4:	50e3      	str	r3, [r4, r3]
    34a6:	e762      	b.n	336e <_free_r+0x86>
    34a8:	20000ba8 	.word	0x20000ba8
    34ac:	20000bb0 	.word	0x20000bb0
    34b0:	20000fb0 	.word	0x20000fb0
    34b4:	20001540 	.word	0x20001540

000034b8 <___init_veneer>:
    34b8:	f85f f000 	ldr.w	pc, [pc]	; 34bc <___init_veneer+0x4>
    34bc:	60001aa9 	.word	0x60001aa9

Disassembly of section .fini:

000034c0 <_fini>:
    34c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34c2:	bf00      	nop
