
C:\Users\OurBl\AppData\Local\Temp\VMBuilds\Teensy4.1Port\teensy41\Debug/Teensy4.1Port.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 80 00     ................
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 a8 8c 00 00 00 00 00 00                 ...`........

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b77      	ldr	r3, [pc, #476]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a77      	ldr	r2, [pc, #476]	; (60001218 <ResetHandler+0x1e4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4877      	ldr	r0, [pc, #476]	; (6000121c <ResetHandler+0x1e8>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a77      	ldr	r2, [pc, #476]	; (60001220 <ResetHandler+0x1ec>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a76      	ldr	r2, [pc, #472]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4976      	ldr	r1, [pc, #472]	; (60001228 <ResetHandler+0x1f4>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b74      	ldr	r3, [pc, #464]	; (6000122c <ResetHandler+0x1f8>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6d      	ldr	r2, [pc, #436]	; (60001230 <ResetHandler+0x1fc>)
6000107c:	496d      	ldr	r1, [pc, #436]	; (60001234 <ResetHandler+0x200>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6d      	ldr	r3, [pc, #436]	; (60001238 <ResetHandler+0x204>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a66      	ldr	r2, [pc, #408]	; (6000123c <ResetHandler+0x208>)
600010a4:	4b66      	ldr	r3, [pc, #408]	; (60001240 <ResetHandler+0x20c>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	4299      	cmp	r1, r3
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a60      	ldr	r2, [pc, #384]	; (60001244 <ResetHandler+0x210>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5f      	ldr	r3, [pc, #380]	; (60001248 <ResetHandler+0x214>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5e      	ldr	r2, [pc, #376]	; (6000124c <ResetHandler+0x218>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	428b      	cmp	r3, r1
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5d      	ldr	r3, [pc, #372]	; (60001250 <ResetHandler+0x21c>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5d      	ldr	r2, [pc, #372]	; (60001254 <ResetHandler+0x220>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5b      	ldr	r4, [pc, #364]	; (60001258 <ResetHandler+0x224>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5b      	ldr	r6, [pc, #364]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 6000129c <ResetHandler+0x268>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 600012a0 <ResetHandler+0x26c>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 600012a4 <ResetHandler+0x270>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b57      	ldr	r3, [pc, #348]	; (60001260 <ResetHandler+0x22c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4943      	ldr	r1, [pc, #268]	; (60001214 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8b5 	bl	600012a8 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a49      	ldr	r2, [pc, #292]	; (60001264 <ResetHandler+0x230>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b49      	ldr	r3, [pc, #292]	; (60001268 <ResetHandler+0x234>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4949      	ldr	r1, [pc, #292]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4946      	ldr	r1, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a47      	ldr	r2, [pc, #284]	; (60001274 <ResetHandler+0x240>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4847      	ldr	r0, [pc, #284]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a46      	ldr	r2, [pc, #280]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4845      	ldr	r0, [pc, #276]	; (60001280 <ResetHandler+0x24c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4944      	ldr	r1, [pc, #272]	; (60001284 <ResetHandler+0x250>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 face 	bl	6000171c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	4840      	ldr	r0, [pc, #256]	; (60001288 <ResetHandler+0x254>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fcb1 	bl	60001af8 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a3a      	ldr	r2, [pc, #232]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b3a      	ldr	r3, [pc, #232]	; (60001290 <ResetHandler+0x25c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4933      	ldr	r1, [pc, #204]	; (60001294 <ResetHandler+0x260>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2e      	ldr	r2, [pc, #184]	; (60001290 <ResetHandler+0x25c>)
600011d6:	4c30      	ldr	r4, [pc, #192]	; (60001298 <ResetHandler+0x264>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
600011e0:	f000 f8de 	bl	600013a0 <configure_external_ram>
#endif
	startup_early_hook();
600011e4:	f000 fc84 	bl	60001af0 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e8:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011ea:	2b13      	cmp	r3, #19
600011ec:	d9fc      	bls.n	600011e8 <ResetHandler+0x1b4>
	usb_init();
600011ee:	f000 fb55 	bl	6000189c <usb_init>
	analog_init();
600011f2:	f000 fbc9 	bl	60001988 <analog_init>
	pwm_init();
600011f6:	f000 fc63 	bl	60001ac0 <__pwm_init_veneer>
	tempmon_init();
600011fa:	f000 fac1 	bl	60001780 <tempmon_init>

	startup_late_hook();
600011fe:	f000 fc6b 	bl	60001ad8 <__startup_late_hook_veneer>
60001202:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001204:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001208:	d3fb      	bcc.n	60001202 <ResetHandler+0x1ce>
	//printf("before C++ constructors\n");
	__libc_init_array();
6000120a:	f000 fc55 	bl	60001ab8 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120e:	f000 fc5f 	bl	60001ad0 <__main_veneer>
60001212:	e7fe      	b.n	60001212 <ResetHandler+0x1de>
60001214:	400ac000 	.word	0x400ac000
60001218:	aaaaaaab 	.word	0xaaaaaaab
6000121c:	00200007 	.word	0x00200007
60001220:	20078000 	.word	0x20078000
60001224:	00000000 	.word	0x00000000
60001228:	60001b20 	.word	0x60001b20
6000122c:	00006188 	.word	0x00006188
60001230:	20000000 	.word	0x20000000
60001234:	60007cac 	.word	0x60007cac
60001238:	20001000 	.word	0x20001000
6000123c:	20001000 	.word	0x20001000
60001240:	200042c0 	.word	0x200042c0
60001244:	e000ed88 	.word	0xe000ed88
60001248:	20001ffc 	.word	0x20001ffc
6000124c:	000037cd 	.word	0x000037cd
60001250:	e000e400 	.word	0xe000e400
60001254:	e000e4a0 	.word	0xe000e4a0
60001258:	400d8000 	.word	0x400d8000
6000125c:	400fc000 	.word	0x400fc000
60001260:	e000ed08 	.word	0xe000ed08
60001264:	e000e014 	.word	0xe000e014
60001268:	e000e018 	.word	0xe000e018
6000126c:	00004d5d 	.word	0x00004d5d
60001270:	e000edfc 	.word	0xe000edfc
60001274:	20200000 	.word	0x20200000
60001278:	00004e09 	.word	0x00004e09
6000127c:	e0001000 	.word	0xe0001000
60001280:	e0001004 	.word	0xe0001004
60001284:	20001b84 	.word	0x20001b84
60001288:	23c34600 	.word	0x23c34600
6000128c:	40084000 	.word	0x40084000
60001290:	400d4000 	.word	0x400d4000
60001294:	56c00000 	.word	0x56c00000
60001298:	20001b8c 	.word	0x20001b8c
6000129c:	20002000 	.word	0x20002000
600012a0:	2018101b 	.word	0x2018101b
600012a4:	13110d0c 	.word	0x13110d0c

600012a8 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012aa:	4a28      	ldr	r2, [pc, #160]	; (6000134c <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012ac:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012ae:	4b28      	ldr	r3, [pc, #160]	; (60001350 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012b0:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b4:	4c27      	ldr	r4, [pc, #156]	; (60001354 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012b6:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012b8:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 60001394 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012bc:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012be:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012c0:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012c2:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012c6:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012ca:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012cc:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 60001398 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d0:	4f21      	ldr	r7, [pc, #132]	; (60001358 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012d2:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012d6:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d8:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012da:	4e20      	ldr	r6, [pc, #128]	; (6000135c <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012dc:	4f20      	ldr	r7, [pc, #128]	; (60001360 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012de:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e0:	4920      	ldr	r1, [pc, #128]	; (60001364 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012e2:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e4:	4e20      	ldr	r6, [pc, #128]	; (60001368 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e6:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ea:	4f20      	ldr	r7, [pc, #128]	; (6000136c <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012ec:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ee:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f0:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f4:	4e1e      	ldr	r6, [pc, #120]	; (60001370 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012f6:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f8:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012fa:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600012fc:	f8df e09c 	ldr.w	lr, [pc, #156]	; 6000139c <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001300:	4e1c      	ldr	r6, [pc, #112]	; (60001374 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001302:	491d      	ldr	r1, [pc, #116]	; (60001378 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001304:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001308:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000130a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000130c:	4f1b      	ldr	r7, [pc, #108]	; (6000137c <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000130e:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001310:	4e1b      	ldr	r6, [pc, #108]	; (60001380 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001312:	491c      	ldr	r1, [pc, #112]	; (60001384 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001314:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001316:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001318:	4f1b      	ldr	r7, [pc, #108]	; (60001388 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131a:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131c:	4e1b      	ldr	r6, [pc, #108]	; (6000138c <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000131e:	491c      	ldr	r1, [pc, #112]	; (60001390 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001320:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001322:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001324:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001326:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001328:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000132c:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001330:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001334:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001338:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000133c:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001340:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001344:	f842 3c88 	str.w	r3, [r2, #-136]
60001348:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000134a:	bf00      	nop
6000134c:	e000ed9c 	.word	0xe000ed9c
60001350:	e000eda0 	.word	0xe000eda0
60001354:	e000ed94 	.word	0xe000ed94
60001358:	00100009 	.word	0x00100009
6000135c:	00200013 	.word	0x00200013
60001360:	07020021 	.word	0x07020021
60001364:	200042c0 	.word	0x200042c0
60001368:	20000014 	.word	0x20000014
6000136c:	13080025 	.word	0x13080025
60001370:	10000009 	.word	0x10000009
60001374:	40000017 	.word	0x40000017
60001378:	13100033 	.word	0x13100033
6000137c:	60000018 	.word	0x60000018
60001380:	070b002f 	.word	0x070b002f
60001384:	70000019 	.word	0x70000019
60001388:	170b0037 	.word	0x170b0037
6000138c:	7000001a 	.word	0x7000001a
60001390:	130b002f 	.word	0x130b002f
60001394:	1000003f 	.word	0x1000003f
60001398:	03080025 	.word	0x03080025
6000139c:	20200016 	.word	0x20200016

600013a0 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
600013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013a2:	4bb8      	ldr	r3, [pc, #736]	; (60001684 <configure_external_ram+0x2e4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600013a4:	2218      	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013a6:	4eb8      	ldr	r6, [pc, #736]	; (60001688 <configure_external_ram+0x2e8>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013a8:	2001      	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013aa:	49b8      	ldr	r1, [pc, #736]	; (6000168c <configure_external_ram+0x2ec>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600013ac:	f248 7e0c 	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600013b0:	4db7      	ldr	r5, [pc, #732]	; (60001690 <configure_external_ram+0x2f0>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600013b2:	f04f 37ff 	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600013b6:	4cb7      	ldr	r4, [pc, #732]	; (60001694 <configure_external_ram+0x2f4>)
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013b8:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600013bc:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600013c0:	2500      	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013c2:	f8c3 1264 	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600013c6:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600013ca:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013ce:	f8c3 626c 	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013d2:	49b1      	ldr	r1, [pc, #708]	; (60001698 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013d4:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013d8:	f8c3 6274 	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013dc:	f8c3 6278 	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600013e0:	4eae      	ldr	r6, [pc, #696]	; (6000169c <configure_external_ram+0x2fc>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600013e2:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600013e4:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600013e6:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600013e8:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600013ea:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600013ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600013f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600013f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600013f8:	f240 6205 	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013fc:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001400:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001404:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001408:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000140c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001410:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001414:	4629      	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001416:	69b3      	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001418:	48a1      	ldr	r0, [pc, #644]	; (600016a0 <configure_external_ram+0x300>)
6000141a:	4018      	ands	r0, r3
6000141c:	4ba1      	ldr	r3, [pc, #644]	; (600016a4 <configure_external_ram+0x304>)
6000141e:	4303      	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001420:	48a1      	ldr	r0, [pc, #644]	; (600016a8 <configure_external_ram+0x308>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001422:	61b3      	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001424:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
60001428:	f043 030c 	orr.w	r3, r3, #12
6000142c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001430:	2602      	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001432:	6803      	ldr	r3, [r0, #0]
60001434:	4333      	orrs	r3, r6
60001436:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001438:	6803      	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000143a:	ea03 0e0e 	and.w	lr, r3, lr
6000143e:	4b9b      	ldr	r3, [pc, #620]	; (600016ac <configure_external_ram+0x30c>)
60001440:	ea4e 0303 	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001444:	f8df e29c 	ldr.w	lr, [pc, #668]	; 600016e4 <configure_external_ram+0x344>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001448:	6003      	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000144a:	4b99      	ldr	r3, [pc, #612]	; (600016b0 <configure_external_ram+0x310>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000144c:	6047      	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000144e:	f8de 7008 	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001452:	403b      	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001454:	4f97      	ldr	r7, [pc, #604]	; (600016b4 <configure_external_ram+0x314>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001456:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000145a:	6083      	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000145c:	68c3      	ldr	r3, [r0, #12]
6000145e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001462:	60c3      	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001464:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001466:	401f      	ands	r7, r3
60001468:	4b93      	ldr	r3, [pc, #588]	; (600016b8 <configure_external_ram+0x318>)
6000146a:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000146c:	4f91      	ldr	r7, [pc, #580]	; (600016b4 <configure_external_ram+0x314>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000146e:	6203      	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001470:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001472:	401f      	ands	r7, r3
60001474:	4b90      	ldr	r3, [pc, #576]	; (600016b8 <configure_external_ram+0x318>)
60001476:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001478:	4f90      	ldr	r7, [pc, #576]	; (600016bc <configure_external_ram+0x31c>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000147a:	6243      	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000147c:	6287      	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000147e:	62c7      	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001480:	f8de 30b8 	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001484:	4f8e      	ldr	r7, [pc, #568]	; (600016c0 <configure_external_ram+0x320>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001486:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000148a:	f043 0301 	orr.w	r3, r3, #1
6000148e:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001492:	f8de 30bc 	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001496:	f8df e234 	ldr.w	lr, [pc, #564]	; 600016cc <configure_external_ram+0x32c>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000149a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000149e:	f043 0301 	orr.w	r3, r3, #1
600014a2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
600014a6:	6105      	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600014a8:	6604      	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600014aa:	6707      	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014ac:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600014b0:	6644      	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600014b2:	6747      	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014b4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014b8:	6804      	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014ba:	4b82      	ldr	r3, [pc, #520]	; (600016c4 <configure_external_ram+0x324>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014bc:	f024 0402 	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014c0:	4a81      	ldr	r2, [pc, #516]	; (600016c8 <configure_external_ram+0x328>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014c2:	6004      	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014c4:	f8c0 e018 	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014c8:	61c6      	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014ca:	f843 1b04 	str.w	r1, [r3], #4
600014ce:	4293      	cmp	r3, r2
600014d0:	d1fb      	bne.n	600014ca <configure_external_ram+0x12a>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600014d2:	4b75      	ldr	r3, [pc, #468]	; (600016a8 <configure_external_ram+0x308>)
600014d4:	681a      	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600014d6:	4619      	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600014d8:	f042 0201 	orr.w	r2, r2, #1
600014dc:	601a      	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600014de:	680b      	ldr	r3, [r1, #0]
600014e0:	4a71      	ldr	r2, [pc, #452]	; (600016a8 <configure_external_ram+0x308>)
600014e2:	f013 0301 	ands.w	r3, r3, #1
600014e6:	d1fa      	bne.n	600014de <configure_external_ram+0x13e>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014e8:	4e78      	ldr	r6, [pc, #480]	; (600016cc <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014ea:	2502      	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600014ec:	f240 64f5 	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600014f0:	f240 4066 	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600014f4:	f240 4199 	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600014f8:	4f75      	ldr	r7, [pc, #468]	; (600016d0 <configure_external_ram+0x330>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014fa:	6196      	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600014fc:	f242 4601 	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001500:	61d5      	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001502:	f240 4535 	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001506:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000150a:	f242 2401 	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000150e:	f8c2 0210 	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001512:	2001      	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001514:	f8c2 1220 	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001518:	4611      	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
6000151a:	f8c2 7230 	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000151e:	f107 475a 	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001522:	f8c2 6234 	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001526:	f507 7713 	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000152a:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000152e:	4e69      	ldr	r6, [pc, #420]	; (600016d4 <configure_external_ram+0x334>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001530:	4d69      	ldr	r5, [pc, #420]	; (600016d8 <configure_external_ram+0x338>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001532:	f8c2 7250 	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001536:	f8c2 6254 	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000153a:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000153e:	f8c2 4264 	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001542:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001546:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000154a:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000154e:	694b      	ldr	r3, [r1, #20]
60001550:	4a55      	ldr	r2, [pc, #340]	; (600016a8 <configure_external_ram+0x308>)
60001552:	07dd      	lsls	r5, r3, #31
60001554:	d5fb      	bpl.n	6000154e <configure_external_ram+0x1ae>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001556:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001558:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000155a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000155e:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001560:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001562:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001566:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000156a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000156e:	694b      	ldr	r3, [r1, #20]
60001570:	4a4d      	ldr	r2, [pc, #308]	; (600016a8 <configure_external_ram+0x308>)
60001572:	07dc      	lsls	r4, r3, #31
60001574:	d5fb      	bpl.n	6000156e <configure_external_ram+0x1ce>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001576:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001578:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000157a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000157e:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001580:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001582:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001586:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000158a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000158e:	694b      	ldr	r3, [r1, #20]
60001590:	4a45      	ldr	r2, [pc, #276]	; (600016a8 <configure_external_ram+0x308>)
60001592:	07d8      	lsls	r0, r3, #31
60001594:	d5fb      	bpl.n	6000158e <configure_external_ram+0x1ee>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001596:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001598:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000159a:	4850      	ldr	r0, [pc, #320]	; (600016dc <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000159c:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000159e:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015a0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600015a4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015a8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015ac:	694b      	ldr	r3, [r1, #20]
600015ae:	4a3e      	ldr	r2, [pc, #248]	; (600016a8 <configure_external_ram+0x308>)
600015b0:	07db      	lsls	r3, r3, #31
600015b2:	d5fb      	bpl.n	600015ac <configure_external_ram+0x20c>
	uint32_t id = FLEXSPI2_RFDR0;
600015b4:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015b8:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600015bc:	2021      	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015be:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600015c0:	6150      	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015c2:	428b      	cmp	r3, r1
600015c4:	d000      	beq.n	600015c8 <configure_external_ram+0x228>
600015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015c8:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015ce:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015d0:	4611      	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015d2:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015d6:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015da:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015de:	694b      	ldr	r3, [r1, #20]
600015e0:	4a31      	ldr	r2, [pc, #196]	; (600016a8 <configure_external_ram+0x308>)
600015e2:	07df      	lsls	r7, r3, #31
600015e4:	d5fb      	bpl.n	600015de <configure_external_ram+0x23e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600015e6:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015e8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015ec:	2000      	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015ee:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600015f0:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015f2:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015f6:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015fa:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015fe:	694b      	ldr	r3, [r1, #20]
60001600:	4a29      	ldr	r2, [pc, #164]	; (600016a8 <configure_external_ram+0x308>)
60001602:	07de      	lsls	r6, r3, #31
60001604:	d5fb      	bpl.n	600015fe <configure_external_ram+0x25e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001606:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001608:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000160c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001610:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001612:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001614:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001618:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000161c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001620:	694b      	ldr	r3, [r1, #20]
60001622:	4a21      	ldr	r2, [pc, #132]	; (600016a8 <configure_external_ram+0x308>)
60001624:	07dd      	lsls	r5, r3, #31
60001626:	d5fb      	bpl.n	60001620 <configure_external_ram+0x280>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001628:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000162a:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000162e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001632:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001634:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001636:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000163a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000163e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001642:	694b      	ldr	r3, [r1, #20]
60001644:	4a18      	ldr	r2, [pc, #96]	; (600016a8 <configure_external_ram+0x308>)
60001646:	07dc      	lsls	r4, r3, #31
60001648:	d5fb      	bpl.n	60001642 <configure_external_ram+0x2a2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000164a:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000164c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001650:	4822      	ldr	r0, [pc, #136]	; (600016dc <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001652:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001654:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001656:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000165a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000165e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001662:	694b      	ldr	r3, [r1, #20]
60001664:	4a10      	ldr	r2, [pc, #64]	; (600016a8 <configure_external_ram+0x308>)
60001666:	07d8      	lsls	r0, r3, #31
60001668:	d5fb      	bpl.n	60001662 <configure_external_ram+0x2c2>
	uint32_t id = FLEXSPI2_RFDR0;
6000166a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
6000166e:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001672:	2021      	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001674:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001676:	6150      	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001678:	428b      	cmp	r3, r1
6000167a:	d035      	beq.n	600016e8 <configure_external_ram+0x348>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
6000167c:	4b18      	ldr	r3, [pc, #96]	; (600016e0 <configure_external_ram+0x340>)
6000167e:	2208      	movs	r2, #8
60001680:	701a      	strb	r2, [r3, #0]
60001682:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001684:	401f8000 	.word	0x401f8000
60001688:	000170f9 	.word	0x000170f9
6000168c:	0001b0f9 	.word	0x0001b0f9
60001690:	000110f9 	.word	0x000110f9
60001694:	000100f9 	.word	0x000100f9
60001698:	401f8400 	.word	0x401f8400
6000169c:	400fc000 	.word	0x400fc000
600016a0:	1ffffcff 	.word	0x1ffffcff
600016a4:	a0000300 	.word	0xa0000300
600016a8:	402a4000 	.word	0x402a4000
600016ac:	ffff0012 	.word	0xffff0012
600016b0:	00f737ff 	.word	0x00f737ff
600016b4:	7cf0ff00 	.word	0x7cf0ff00
600016b8:	80000040 	.word	0x80000040
600016bc:	830f00ff 	.word	0x830f00ff
600016c0:	00020063 	.word	0x00020063
600016c4:	402a4200 	.word	0x402a4200
600016c8:	402a4300 	.word	0x402a4300
600016cc:	5af05af0 	.word	0x5af05af0
600016d0:	3018049f 	.word	0x3018049f
600016d4:	26013206 	.word	0x26013206
600016d8:	0a180638 	.word	0x0a180638
600016dc:	00030004 	.word	0x00030004
600016e0:	20001b90 	.word	0x20001b90
600016e4:	402a8000 	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016e8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016ec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016f0:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016f2:	4611      	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016f4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016f8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016fc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001700:	694b      	ldr	r3, [r1, #20]
60001702:	4a04      	ldr	r2, [pc, #16]	; (60001714 <configure_external_ram+0x374>)
60001704:	07db      	lsls	r3, r3, #31
60001706:	d5fb      	bpl.n	60001700 <configure_external_ram+0x360>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001708:	2001      	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
6000170a:	4b03      	ldr	r3, [pc, #12]	; (60001718 <configure_external_ram+0x378>)
6000170c:	2110      	movs	r1, #16
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000170e:	6150      	str	r0, [r2, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001710:	7019      	strb	r1, [r3, #0]
60001712:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001714:	402a4000 	.word	0x402a4000
60001718:	20001b90 	.word	0x20001b90

6000171c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000171c:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000171e:	4a17      	ldr	r2, [pc, #92]	; (6000177c <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001720:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001722:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001726:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000172a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000172e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001732:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001736:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001738:	f013 0f02 	tst.w	r3, #2
6000173c:	d006      	beq.n	6000174c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000173e:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001740:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001742:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001744:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001746:	f013 0f02 	tst.w	r3, #2
6000174a:	d1f8      	bne.n	6000173e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000174c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001750:	d101      	bne.n	60001756 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001752:	6155      	str	r5, [r2, #20]
			continue;
60001754:	e7ef      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001756:	f413 5f80 	tst.w	r3, #4096	; 0x1000
6000175a:	d101      	bne.n	60001760 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000175c:	6156      	str	r6, [r2, #20]
			continue;
6000175e:	e7ea      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001760:	2b00      	cmp	r3, #0
60001762:	dae8      	bge.n	60001736 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001764:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001768:	d001      	beq.n	6000176e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000176a:	6191      	str	r1, [r2, #24]
			continue;
6000176c:	e7e3      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000176e:	065b      	lsls	r3, r3, #25
60001770:	d401      	bmi.n	60001776 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001772:	6157      	str	r7, [r2, #20]
			continue;
60001774:	e7df      	b.n	60001736 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001776:	bcf0      	pop	{r4, r5, r6, r7}
60001778:	4770      	bx	lr
6000177a:	bf00      	nop
6000177c:	400d8000 	.word	0x400d8000

60001780 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001780:	4a3b      	ldr	r2, [pc, #236]	; (60001870 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001782:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001786:	493b      	ldr	r1, [pc, #236]	; (60001874 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001788:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000178a:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
6000178c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000178e:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001792:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001794:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001898 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001798:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000179a:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000179e:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017a2:	4f35      	ldr	r7, [pc, #212]	; (60001878 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600017a4:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600017a6:	f3c3 240b 	ubfx	r4, r3, #8, #12
600017aa:	4e34      	ldr	r6, [pc, #208]	; (6000187c <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017ac:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017b0:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017b4:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600017b8:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017c0:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017c4:	ee07 4a90 	vmov	s15, r4
600017c8:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017cc:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600017ce:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017d2:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017d6:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017da:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017dc:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017e4:	4d26      	ldr	r5, [pc, #152]	; (60001880 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017e6:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600017ea:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017ec:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600017f4:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017f6:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600017fa:	4e22      	ldr	r6, [pc, #136]	; (60001884 <tempmon_init+0x104>)
600017fc:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017fe:	4922      	ldr	r1, [pc, #136]	; (60001888 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001800:	4c22      	ldr	r4, [pc, #136]	; (6000188c <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001802:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001806:	ee07 3a90 	vmov	s15, r3
6000180a:	4b21      	ldr	r3, [pc, #132]	; (60001890 <tempmon_init+0x110>)
6000180c:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
60001810:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001814:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001818:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000181c:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001820:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001824:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001828:	ee15 3a90 	vmov	r3, s11
6000182c:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001830:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001834:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001838:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000183a:	ea01 4105 	and.w	r1, r1, r5, lsl #16
6000183e:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001846:	430b      	orrs	r3, r1
60001848:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000184c:	ee17 3a90 	vmov	r3, s15
60001850:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
60001854:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001858:	430b      	orrs	r3, r1
6000185a:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000185e:	6813      	ldr	r3, [r2, #0]
60001860:	f043 0302 	orr.w	r3, r3, #2
60001864:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001866:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001868:	4b0a      	ldr	r3, [pc, #40]	; (60001894 <tempmon_init+0x114>)
6000186a:	2201      	movs	r2, #1
6000186c:	601a      	str	r2, [r3, #0]
6000186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001870:	400d8180 	.word	0x400d8180
60001874:	401f4400 	.word	0x401f4400
60001878:	20001b9c 	.word	0x20001b9c
6000187c:	20001ba0 	.word	0x20001ba0
60001880:	20001b98 	.word	0x20001b98
60001884:	20002000 	.word	0x20002000
60001888:	0fff0000 	.word	0x0fff0000
6000188c:	e000e440 	.word	0xe000e440
60001890:	000038a9 	.word	0x000038a9
60001894:	e000e108 	.word	0xe000e108
60001898:	20001b94 	.word	0x20001b94

6000189c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000189c:	4b30      	ldr	r3, [pc, #192]	; (60001960 <usb_init+0xc4>)
6000189e:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600018a2:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600018a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018a8:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600018ac:	f000 f90c 	bl	60001ac8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018b0:	492c      	ldr	r1, [pc, #176]	; (60001964 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018b2:	482d      	ldr	r0, [pc, #180]	; (60001968 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018b4:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018b8:	4c2c      	ldr	r4, [pc, #176]	; (6000196c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018ba:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018be:	4b2c      	ldr	r3, [pc, #176]	; (60001970 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018c0:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018c4:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018c8:	6822      	ldr	r2, [r4, #0]
600018ca:	4013      	ands	r3, r2
600018cc:	b91b      	cbnz	r3, 600018d6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600018ce:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
600018d2:	079a      	lsls	r2, r3, #30
600018d4:	d01a      	beq.n	6000190c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600018d6:	4b24      	ldr	r3, [pc, #144]	; (60001968 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600018d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600018dc:	4a23      	ldr	r2, [pc, #140]	; (6000196c <usb_init+0xd0>)
600018de:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600018e0:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600018e2:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
600018e6:	f041 0102 	orr.w	r1, r1, #2
600018ea:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600018ee:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600018f2:	079b      	lsls	r3, r3, #30
600018f4:	d4fb      	bmi.n	600018ee <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600018f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600018fa:	491e      	ldr	r1, [pc, #120]	; (60001974 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600018fc:	4b1b      	ldr	r3, [pc, #108]	; (6000196c <usb_init+0xd0>)
600018fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001902:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001904:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001906:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001908:	f000 f8ee 	bl	60001ae8 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000190c:	4d1a      	ldr	r5, [pc, #104]	; (60001978 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000190e:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001910:	4b16      	ldr	r3, [pc, #88]	; (6000196c <usb_init+0xd0>)
60001912:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001916:	4c14      	ldr	r4, [pc, #80]	; (60001968 <usb_init+0xcc>)
60001918:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000191a:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000191c:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000191e:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001920:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001922:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001926:	f44f 7220 	mov.w	r2, #640	; 0x280
6000192a:	f000 f8d9 	bl	60001ae0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000192e:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001932:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001936:	f240 1343 	movw	r3, #323	; 0x143
6000193a:	4a10      	ldr	r2, [pc, #64]	; (6000197c <usb_init+0xe0>)
6000193c:	4910      	ldr	r1, [pc, #64]	; (60001980 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000193e:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001940:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001942:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
60001946:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000194a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000194e:	4a0d      	ldr	r2, [pc, #52]	; (60001984 <usb_init+0xe8>)
60001950:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001954:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001956:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001958:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
6000195c:	bd70      	pop	{r4, r5, r6, pc}
6000195e:	bf00      	nop
60001960:	400d8000 	.word	0x400d8000
60001964:	400fc000 	.word	0x400fc000
60001968:	402e0000 	.word	0x402e0000
6000196c:	400d9000 	.word	0x400d9000
60001970:	001e1c00 	.word	0x001e1c00
60001974:	e000e28c 	.word	0xe000e28c
60001978:	20004000 	.word	0x20004000
6000197c:	20002000 	.word	0x20002000
60001980:	000038cd 	.word	0x000038cd
60001984:	e000e10c 	.word	0xe000e10c

60001988 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001988:	4b11      	ldr	r3, [pc, #68]	; (600019d0 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000198a:	4912      	ldr	r1, [pc, #72]	; (600019d4 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000198c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000198e:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001990:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001994:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001996:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001998:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000199c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000199e:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600019a0:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600019a4:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019a6:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600019a8:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600019aa:	6c93      	ldr	r3, [r2, #72]	; 0x48
600019ac:	061b      	lsls	r3, r3, #24
600019ae:	d4fc      	bmi.n	600019aa <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019b0:	4b09      	ldr	r3, [pc, #36]	; (600019d8 <analog_init+0x50>)
600019b2:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019b6:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019b8:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019ba:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019bc:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019be:	6c93      	ldr	r3, [r2, #72]	; 0x48
600019c0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600019c4:	d1fb      	bne.n	600019be <analog_init+0x36>
	calibrating = 0;
600019c6:	4a05      	ldr	r2, [pc, #20]	; (600019dc <analog_init+0x54>)
600019c8:	7013      	strb	r3, [r2, #0]
}
600019ca:	bc30      	pop	{r4, r5}
600019cc:	4770      	bx	lr
600019ce:	bf00      	nop
600019d0:	400fc000 	.word	0x400fc000
600019d4:	400c4000 	.word	0x400c4000
600019d8:	400c8000 	.word	0x400c8000
600019dc:	20001dca 	.word	0x20001dca

600019e0 <usb_string_product_name_default>:
600019e0:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
600019f0:	00610069 0000006c                       i.a.l...

600019f8 <usb_string_manufacturer_name_default>:
600019f8:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001a08:	00690075 006f006e                       u.i.n.o.

60001a10 <string0>:
60001a10:	04090304                                ....

60001a14 <usb_config_descriptor_12>:
60001a14:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001a24:	24050001 05011000 01010124 06022404     ...$....$....$..
60001a34:	00062405 82050701 10001003 00010409     .$..............
60001a44:	00000a02 03050700 00004002 02840507     .........@......
60001a54:	00000040                                @...

60001a58 <usb_config_descriptor_480>:
60001a58:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001a68:	24050001 05011000 01010124 06022404     ...$....$....$..
60001a78:	00062405 82050701 05001003 00010409     .$..............
60001a88:	00000a02 03050700 00020002 02840507     ................
60001a98:	00000200                                ....

60001a9c <qualifier_descriptor>:
60001a9c:	0200060a 40000002 ff010001                       .......@..

60001aa6 <_serialEvent_default>:
60001aa6:	b5f8ff01                                         ..

60001aa8 <_init>:
60001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001aaa:	bf00      	nop
60001aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001aae:	bc08      	pop	{r3}
60001ab0:	469e      	mov	lr, r3
60001ab2:	4770      	bx	lr
60001ab4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

60001ab8 <____libc_init_array_veneer>:
60001ab8:	f85f f000 	ldr.w	pc, [pc]	; 60001abc <____libc_init_array_veneer+0x4>
60001abc:	000056ad 	.word	0x000056ad

60001ac0 <__pwm_init_veneer>:
60001ac0:	f85f f000 	ldr.w	pc, [pc]	; 60001ac4 <__pwm_init_veneer+0x4>
60001ac4:	0000517d 	.word	0x0000517d

60001ac8 <__usb_init_serialnumber_veneer>:
60001ac8:	f85f f000 	ldr.w	pc, [pc]	; 60001acc <__usb_init_serialnumber_veneer+0x4>
60001acc:	00004355 	.word	0x00004355

60001ad0 <__main_veneer>:
60001ad0:	f85f f000 	ldr.w	pc, [pc]	; 60001ad4 <__main_veneer+0x4>
60001ad4:	00004e29 	.word	0x00004e29

60001ad8 <__startup_late_hook_veneer>:
60001ad8:	f85f f000 	ldr.w	pc, [pc]	; 60001adc <__startup_late_hook_veneer+0x4>
60001adc:	000037e9 	.word	0x000037e9

60001ae0 <__memset_veneer>:
60001ae0:	f85f f000 	ldr.w	pc, [pc]	; 60001ae4 <__memset_veneer+0x4>
60001ae4:	00005c8d 	.word	0x00005c8d

60001ae8 <__delay_veneer>:
60001ae8:	f85f f000 	ldr.w	pc, [pc]	; 60001aec <__delay_veneer+0x4>
60001aec:	00003681 	.word	0x00003681

60001af0 <__startup_early_hook_veneer>:
60001af0:	f85f f000 	ldr.w	pc, [pc]	; 60001af4 <__startup_early_hook_veneer+0x4>
60001af4:	000037e5 	.word	0x000037e5

60001af8 <__set_arm_clock_veneer>:
60001af8:	f85f f000 	ldr.w	pc, [pc]	; 60001afc <__set_arm_clock_veneer+0x4>
60001afc:	000033c1 	.word	0x000033c1

60001b00 <__init_array_start>:
60001b00:	00000045 	.word	0x00000045
60001b04:	00000359 	.word	0x00000359
60001b08:	000019f5 	.word	0x000019f5
60001b0c:	00002c71 	.word	0x00002c71
60001b10:	00002fa9 	.word	0x00002fa9
60001b14:	00003211 	.word	0x00003211
60001b18:	000033a9 	.word	0x000033a9

60001b1c <__init_array_end>:
60001b1c:	ffffffff 	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	.short	0xb933

    return tmeas;
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x17>)
      2a:	b113      	.short	0xb113
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1b>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	movs	r3, #1
      34:	bd107023 	.word	0xbd107023
      38:	1000      	asrs	r0, r0, #32
      3a:	2000      	movs	r0, #0
      3c:	0000      	movs	r0, r0
      3e:	0000      	movs	r0, r0
}
      40:	00006184 	.word	0x00006184

00000044 <frame_dummy>:
      44:	4b08      	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	b510      	.short	0xb510
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	2b00      	cmp	r3, #0
      5e:	d0fb      	beq.n	58 <frame_dummy+0x14>
      60:	4010e8bd 	.word	0x4010e8bd
      64:	4718      	bx	r3
      66:	bf00      	.short	0xbf00
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	1004      	asrs	r4, r0, #32
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2000      	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	6184      	str	r4, [r0, #24]
  ADC2_CFG = mode1;
      72:	0000      	movs	r0, r0
  
  if(num >= 4){
      74:	1000      	asrs	r0, r0, #32
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	movs	r0, #0
      78:	0000      	movs	r0, r0
	...

0000007c <std::_Function_base::_Base_manager<setup::{lambda()#2}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<setup::{lambda()#2}> const&, std::_Manager_operation)>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
      7c:	2a01      	cmp	r2, #1
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
      7e:	bf08      	it	eq
      80:	6001      	streq	r1, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
      82:	2000      	movs	r0, #0
      84:	4770      	bx	lr
	while (1) {
		volatile uint32_t n;
		GPIO2_DR_SET = (1<<3); //digitalWrite(13, HIGH);
		for (n=0; n < 2000000/6; n++) ;
		GPIO2_DR_CLEAR = (1<<3); //digitalWrite(13, LOW);
		for (n=0; n < 1500000/6; n++) ;
      86:	bf00      	.short	0xbf00

00000088 <std::_Function_handler<void (), setup::{lambda()#1}>::_M_invoke(std::_Any_data const&)>:

// the loop function runs over and over again until power down or reset
void loop() {
	updateScreen(&screenBank, &currentPattern, &currentGlobals);

      88:	4801      	ldr	r0, [pc, #4]	; (90 <std::_Function_handler<void (), setup::{lambda()#1}>::_M_invoke(std::_Any_data const&)+0x8>)
      8a:	f000 bf71 	b.w	f70 <enableCycle(Globals volatile*)>
      8e:	bf00      	nop
      90:	101c      	asrs	r4, r3, #32
      92:	2000      	.short	0x2000

00000094 <std::_Function_handler<void (), setup::{lambda()#2}>::_M_invoke(std::_Any_data const&)>:
      94:	4801      	ldr	r0, [pc, #4]	; (9c <std::_Function_handler<void (), setup::{lambda()#2}>::_M_invoke(std::_Any_data const&)+0x8>)
      96:	f000      	.short	0xf000
      98:	b9ab      	cbnz	r3, c6 <setup+0x1a>
      9a:	bf00      	.short	0xbf00
      9c:	101c      	asrs	r4, r3, #32
      9e:	2000      	.short	0x2000

000000a0 <std::_Function_base::_Base_manager<setup::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<setup::{lambda()#1}> const&, std::_Manager_operation)>:
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
      a0:	2a01      	cmp	r2, #1
      a2:	bf08      	.short	0xbf08
				if (newhead != rx_buffer_tail_) {
      a4:	6001      	streq	r1, [r0, #0]
      a6:	2000      	.short	0x2000
      a8:	4770      	bx	lr
					head = newhead;
					if (newhead < rx_buffer_size_) {
      aa:	bf00      	.short	0xbf00

000000ac <setup>:
	initMenu(&screenBank, &currentPattern, &currentGlobals);
	initEncoders();
	EncoderTimer.beginPeriodic([] {listenEncoders(&currentGlobals); }, 1000);
	Serial.begin(9600);
}

      ac:	b5f0      	push	{r4, r5, r6, r7, lr}
      ae:	f640      	.short	0xf640
      b0:	31b8      	adds	r1, #184	; 0xb8
      b2:	b08d      	sub	sp, #52	; 0x34
      b4:	f0014894 	.word	0xf0014894
      b8:	fbfd f44f 			; <UNDEFINED> instruction: 0xfbfdf44f
      bc:	48925116 	.word	0x48925116
      c0:	f001 fbf4 	bl	18ac <VisualMicroDebug::begin(unsigned long)>
      c4:	48902101 	.word	0x48902101
      c8:	f001 fbd2 	bl	1870 <VisualMicroDebug::outPacketStart(bool)>
      cc:	f0402800 	.word	0xf0402800
      d0:	80be      	strh	r6, [r7, #4]
      d2:	2100      	.short	0x2100
      d4:	488c      	ldr	r0, [pc, #560]	; (308 <setup+0x25c>)
      d6:	2201      	movs	r2, #1
      d8:	fbfcf001 	.word	0xfbfcf001
      dc:	2101      	movs	r1, #1
      de:	488a      	.short	0x488a
      e0:	f001 fbc6 	bl	1870 <VisualMicroDebug::outPacketStart(bool)>
      e4:	f0402800 	.word	0xf0402800
      e8:	80aa      	strh	r2, [r5, #4]
// the loop function runs over and over again until power down or reset
      ea:	4888      	.short	0x4888
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
      ec:	2400      	movs	r4, #0
      ee:	f000 fa2b 	bl	548 <initBank(Pattern volatile*)>
void loop() {
      f2:	2100      	.short	0x2100
      f4:	4886      	ldr	r0, [pc, #536]	; (310 <setup+0x264>)
     public:
        Timer(TimerGenerator* gen = nullptr);

        inline errorCode beginPeriodic(callback_t cb, uint32_t period)
        {
            isPeriodic = true;
      f6:	2601      	.short	0x2601
      f8:	f000 faf0 	bl	6dc <initGlobals(Globals volatile*, unsigned char)>
      fc:	4d85      	ldr	r5, [pc, #532]	; (314 <setup+0x268>)
	updateScreen(&screenBank, &currentPattern, &currentGlobals);

      fe:	f001      	.short	0xf001
     100:	f89f 4b85 	ldrb.w	r4, [pc, #2949]	; c89 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x301>
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     104:	46692202 	.word	0x46692202
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     108:	9303      	str	r3, [sp, #12]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     10a:	a804      	.short	0xa804

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
     10c:	4b83      	ldr	r3, [pc, #524]	; (31c <setup+0x270>)
     10e:	722e      	.short	0x722e
     110:	9302      	str	r3, [sp, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     112:	9406      	.short	0x9406
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     114:	f7ff ffc4 	bl	a0 <std::_Function_base::_Base_manager<setup::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<setup::{lambda()#1}> const&, std::_Manager_operation)>
	  _M_invoker = __x._M_invoker;
     118:	9b029a03 	.word	0x9b029a03
     11c:	9207      	str	r2, [sp, #28]
	  _M_manager = __x._M_manager;
     11e:	9306      	.short	0x9306
    template <typename T>
    errorCode BaseTimer::begin(callback_t callback, T p, bool start)
    {
        auto period = getPeriod(p);

        if (callback == nullptr) return postError(errorCode::callback);
     120:	2b00      	cmp	r3, #0
     122:	f000      	.short	0xf000
     124:	80c1      	strh	r1, [r0, #6]
        if (isPeriodic && period == 0) return postError(errorCode::reload);

        if (timerChannel == nullptr)
     126:	686e      	ldr	r6, [r5, #4]
     128:	2e00      	cmp	r6, #0
     12a:	f000 80ac 	beq.w	286 <setup+0x1da>
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
        }

        errorCode result = timerChannel->begin(callback, period, isPeriodic);
     12e:	6832      	.short	0x6832
     130:	6817      	ldr	r7, [r2, #0]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     132:	940a      	.short	0x940a
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     134:	ac08      	add	r4, sp, #32
     136:	2202      	.short	0x2202
     138:	a904      	add	r1, sp, #16
     13a:	4620      	.short	0x4620
     13c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
     13e:	9a07      	.short	0x9a07
	  _M_manager = __x._M_manager;
     140:	9b06      	ldr	r3, [sp, #24]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
     142:	920b      	.short	0x920b
	  _M_manager = __x._M_manager;
     144:	930a      	str	r3, [sp, #40]	; 0x28
     146:	4630      	mov	r0, r6
     148:	eeb27a2a 	.word	0xeeb27a2a
     14c:	0a04      	lsrs	r4, r0, #8
     14e:	4621      	.short	0x4621
     150:	47b8      	blx	r7

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     152:	9b0a      	.short	0x9b0a
     154:	4606      	mov	r6, r0
     156:	b11b      	.short	0xb11b
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     158:	2203      	movs	r2, #3
     15a:	4621      	.short	0x4621
     15c:	4620      	mov	r0, r4
     15e:	4798      	.short	0x4798

        if (result == errorCode::OK)
     160:	2e00      	cmp	r6, #0
     162:	d063      	.short	0xd063
        {
            if (isPeriodic && start) timerChannel->start();
        }
        return postError(result);
     164:	4630      	mov	r0, r6
     166:	f002      	.short	0xf002
     168:	ff0d 9b06 	vqrdmulh.s<illegal width 8>	d9, d13, d6

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     16c:	a904b11b 	.word	0xa904b11b
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     170:	2203      	movs	r2, #3
     172:	4608      	.short	0x4608
     174:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     176:	9b02      	.short	0x9b02
     178:	b11b      	cbz	r3, 182 <setup+0xd6>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     17a:	2203      	.short	0x2203
     17c:	4669      	mov	r1, sp
     17e:	4668      	mov	r0, sp
     180:	4798      	blx	r3
     182:	4863      	.short	0x4863
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     184:	2400      	movs	r4, #0
     186:	f001      	.short	0xf001
     188:	f8db 4a61 	ldr.w	r4, [fp, #2657]	; 0xa61
     18c:	4864495f 	.word	0x4864495f
     190:	f000 fb10 	bl	7b4 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)>
     194:	f0004d63 	.word	0xf0004d63
     198:	f917 4963 	ldrsb.w	r4, [r7], #-99

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
     19c:	23014863 	.word	0x23014863
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     1a0:	2202      	movs	r2, #2
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     1a2:	9103      	.short	0x9103
	    _M_manager = &_My_handler::_M_manager;
     1a4:	9002      	str	r0, [sp, #8]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     1a6:	4669      	.short	0x4669
     1a8:	a804      	add	r0, sp, #16
     1aa:	722b      	.short	0x722b
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     1ac:	9406      	str	r4, [sp, #24]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     1ae:	f7ff      	.short	0xf7ff
     1b0:	ff65 9a03 	vpmax.u32	d25, d5, d3
	  _M_invoker = __x._M_invoker;
	  _M_manager = __x._M_manager;
     1b4:	92079b02 	.word	0x92079b02
     1b8:	9306      	str	r3, [sp, #24]
    template <typename T>
    errorCode BaseTimer::begin(callback_t callback, T p, bool start)
    {
        auto period = getPeriod(p);

        if (callback == nullptr) return postError(errorCode::callback);
     1ba:	2b00      	.short	0x2b00
     1bc:	d078      	beq.n	2b0 <setup+0x204>
        if (isPeriodic && period == 0) return postError(errorCode::reload);

        if (timerChannel == nullptr)
     1be:	686e      	.short	0x686e
     1c0:	2e00      	cmp	r6, #0
     1c2:	d050      	.short	0xd050
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
        }

        errorCode result = timerChannel->begin(callback, period, isPeriodic);
     1c4:	6832      	ldr	r2, [r6, #0]
     1c6:	6817      	.short	0x6817
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     1c8:	940a      	str	r4, [sp, #40]	; 0x28
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     1ca:	ac08      	.short	0xac08
     1cc:	2202      	movs	r2, #2
     1ce:	a904      	add	r1, sp, #16
     1d0:	4620      	mov	r0, r4
     1d2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
     1d4:	9a07      	ldr	r2, [sp, #28]
	  _M_manager = __x._M_manager;
     1d6:	9b06      	ldr	r3, [sp, #24]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
     1d8:	920b      	str	r2, [sp, #44]	; 0x2c
	  _M_manager = __x._M_manager;
     1da:	930a      	str	r3, [sp, #40]	; 0x28
     1dc:	4630      	mov	r0, r6
     1de:	7a2a      	.short	0x7a2a
     1e0:	ed9f 0a53 	vldr	s0, [pc, #332]	; 330 <setup+0x284>
     1e4:	4621      	mov	r1, r4
     1e6:	47b8      	.short	0x47b8

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     1e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     1ea:	4606      	.short	0x4606
     1ec:	b11b      	cbz	r3, 1f6 <setup+0x14a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     1ee:	2203      	.short	0x2203
     1f0:	4621      	mov	r1, r4
     1f2:	4620      	.short	0x4620
     1f4:	4798      	blx	r3

        if (result == errorCode::OK)
     1f6:	b186      	.short	0xb186
        {
            if (isPeriodic && start) timerChannel->start();
        }
        return postError(result);
     1f8:	4630      	mov	r0, r6
     1fa:	f002 fec3 	bl	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     1fe:	9b06      	.short	0x9b06
     200:	b11b      	cbz	r3, 20a <setup+0x15e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     202:	a904      	.short	0xa904
     204:	2203      	movs	r2, #3
     206:	4608      	.short	0x4608
     208:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     20a:	9b02      	.short	0x9b02
     20c:	b11b      	cbz	r3, 216 <setup+0x16a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     20e:	2203      	.short	0x2203
     210:	4669      	mov	r1, sp
     212:	4668      	.short	0x4668
     214:	4798      	blx	r3
     216:	b00d      	.short	0xb00d
     218:	bdf0      	pop	{r4, r5, r6, r7, pc}

        errorCode result = timerChannel->begin(callback, period, isPeriodic);

        if (result == errorCode::OK)
        {
            if (isPeriodic && start) timerChannel->start();
     21a:	7a2b      	.short	0x7a2b
     21c:	4a41      	ldr	r2, [pc, #260]	; (324 <setup+0x278>)
     21e:	2b00      	.short	0x2b00
     220:	d0ea      	beq.n	1f8 <setup+0x14c>
     222:	6850      	.short	0x6850
     224:	6803      	ldr	r3, [r0, #0]
     226:	699b      	.short	0x699b
     228:	4798      	blx	r3
     22a:	e7e5      	.short	0xe7e5
     22c:	7a2b      	ldrb	r3, [r5, #8]
     22e:	4a39      	ldr	r2, [pc, #228]	; (314 <setup+0x268>)
     230:	2b00      	cmp	r3, #0
     232:	d097      	beq.n	164 <setup+0xb8>
     234:	68036850 	.word	0x68036850
     238:	699b      	ldr	r3, [r3, #24]
     23a:	4798      	.short	0x4798
     23c:	e792      	b.n	164 <setup+0xb8>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     23e:	2106      	.short	0x2106
     240:	483c      	ldr	r0, [pc, #240]	; (334 <setup+0x288>)
     242:	f004      	.short	0xf004
     244:	fcc9 4830 	stc2l	8, cr4, [r9], {48}	; 0x30
	initMenu(&screenBank, &currentPattern, &currentGlobals);
	initEncoders();
	EncoderTimer.beginPeriodic([] {listenEncoders(&currentGlobals); }, 1000);
	Serial.begin(9600);
}

     248:	fb2ef001 	.word	0xfb2ef001
     24c:	e74d      	b.n	ea <setup+0x3e>
     24e:	2110      	.short	0x2110
     250:	4839      	ldr	r0, [pc, #228]	; (338 <setup+0x28c>)
     252:	f004 fcc1 	bl	4bd8 <usb_serial_write>
     256:	210a      	movs	r1, #10
     258:	482b      	ldr	r0, [pc, #172]	; (308 <setup+0x25c>)
     25a:	f001 fafd 	bl	1858 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     25e:	482a      	ldr	r0, [pc, #168]	; (308 <setup+0x25c>)
     260:	f001 fb22 	bl	18a8 <VisualMicroDebug::outPacketEnd()>
     264:	682ce735 	.word	0x682ce735
        if (callback == nullptr) return postError(errorCode::callback);
        if (isPeriodic && period == 0) return postError(errorCode::reload);

        if (timerChannel == nullptr)
        {
            if (timerGenerator != nullptr) // use timer passed in during construction
     268:	b334      	cbz	r4, 2b8 <setup+0x20c>
            {
                timerChannel = timerGenerator();
     26a:	47a0      	.short	0x47a0
     26c:	4606      	mov	r6, r0
     26e:	6068      	.short	0x6068
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
     270:	2800      	cmp	r0, #0
     272:	d045      	.short	0xd045
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
        }

        errorCode result = timerChannel->begin(callback, period, isPeriodic);
     274:	6831      	ldr	r1, [r6, #0]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     276:	2200      	movs	r2, #0
     278:	9b06      	ldr	r3, [sp, #24]
     27a:	680f      	.short	0x680f
     27c:	920a      	str	r2, [sp, #40]	; 0x28
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     27e:	2b00      	.short	0x2b00
     280:	d1a3      	bne.n	1ca <setup+0x11e>
     282:	ac08      	.short	0xac08
     284:	e7aa      	b.n	1dc <setup+0x130>
        if (callback == nullptr) return postError(errorCode::callback);
        if (isPeriodic && period == 0) return postError(errorCode::reload);

        if (timerChannel == nullptr)
        {
            if (timerGenerator != nullptr) // use timer passed in during construction
     286:	682c      	.short	0x682c
     288:	47a0b334 	.word	0x47a0b334
            {
                timerChannel = timerGenerator();
     28c:	4606      	mov	r6, r0
     28e:	6068      	.short	0x6068
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
     290:	2800      	cmp	r0, #0
     292:	d031      	beq.n	2f8 <setup+0x24c>
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
        }

        errorCode result = timerChannel->begin(callback, period, isPeriodic);
     294:	22006831 	.word	0x22006831
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     298:	9b06      	ldr	r3, [sp, #24]
     29a:	680f      	.short	0x680f
     29c:	920a      	str	r2, [sp, #40]	; 0x28
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     29e:	2b00      	cmp	r3, #0
     2a0:	af48f47f 	.word	0xaf48f47f
     2a4:	ac08      	add	r4, sp, #32
     2a6:	e74e      	.short	0xe74e
    template <typename T>
    errorCode BaseTimer::begin(callback_t callback, T p, bool start)
    {
        auto period = getPeriod(p);

        if (callback == nullptr) return postError(errorCode::callback);
     2a8:	2065      	movs	r0, #101	; 0x65
     2aa:	f002      	.short	0xf002
     2ac:	fe6b e75c 	mcr2	7, 3, lr, cr11, cr12, {2}
     2b0:	f0022065 	.word	0xf0022065
     2b4:	fe67 e7a2 	cdp2	7, 6, cr14, cr7, cr2, {5}
     2b8:	4f20      	ldr	r7, [pc, #128]	; (33c <setup+0x290>)
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
                {
                    timerChannel = timerPool[i]();
     2ba:	f857 3f04 	ldr.w	r3, [r7, #4]!
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
     2be:	3401      	adds	r4, #1
                {
                    timerChannel = timerPool[i]();
     2c0:	46064798 	.word	0x46064798
     2c4:	6068      	str	r0, [r5, #4]
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
     2c6:	b908      	cbnz	r0, 2cc <setup+0x220>
     2c8:	d1f62c07 	.word	0xd1f62c07
                {
                    timerChannel = timerPool[i]();
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
     2cc:	2e00      	cmp	r6, #0
     2ce:	d1d1      	.short	0xd1d1
     2d0:	2067      	movs	r0, #103	; 0x67
     2d2:	f002      	.short	0xf002
     2d4:	fe57 e792 	mrc2	7, 2, lr, cr7, cr2, {4}
     2d8:	4f18      	ldr	r7, [pc, #96]	; (33c <setup+0x290>)
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
                {
                    timerChannel = timerPool[i]();
     2da:	f857 3f04 	ldr.w	r3, [r7, #4]!
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
     2de:	3401      	adds	r4, #1
                {
                    timerChannel = timerPool[i]();
     2e0:	4798      	blx	r3
     2e2:	4606      	mov	r6, r0
     2e4:	6068      	str	r0, [r5, #4]
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
            } else //find the next free timer
            {
                for (unsigned i = 0; timerChannel == nullptr && i < timerCnt; i++)
     2e6:	b908      	cbnz	r0, 2ec <setup+0x240>
     2e8:	2c07      	cmp	r4, #7
     2ea:	d1f6      	bne.n	2da <setup+0x22e>
                {
                    timerChannel = timerPool[i]();
                }
            }
            if (timerChannel == nullptr) return postError(errorCode::noFreeModule);
     2ec:	2e00      	cmp	r6, #0
     2ee:	d1d1      	bne.n	294 <setup+0x1e8>
     2f0:	2067      	movs	r0, #103	; 0x67
     2f2:	f002 fe47 	bl	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     2f6:	e738      	b.n	16a <setup+0xbe>
        if (timerChannel == nullptr)
        {
            if (timerGenerator != nullptr) // use timer passed in during construction
            {
                timerChannel = timerGenerator();
                if (timerChannel == nullptr) return postError(errorCode::noFreeChannel);
     2f8:	2068      	movs	r0, #104	; 0x68
     2fa:	f002 fe43 	bl	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     2fe:	e734      	b.n	16a <setup+0xbe>
     300:	2068      	movs	r0, #104	; 0x68
     302:	f002 fe3f 	bl	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
     306:	e77a      	b.n	1fe <setup+0x152>
     308:	20001888 	.word	0x20001888
     30c:	20001354 	.word	0x20001354
     310:	2000101c 	.word	0x2000101c
     314:	20001328 	.word	0x20001328
     318:	00000089 	.word	0x00000089
     31c:	000000a1 	.word	0x000000a1
     320:	200014d0 	.word	0x200014d0
     324:	20001318 	.word	0x20001318
     328:	00000095 	.word	0x00000095
     32c:	0000007d 	.word	0x0000007d
     330:	447a0000 	.word	0x447a0000
     334:	20000014 	.word	0x20000014
     338:	20000000 	.word	0x20000000
     33c:	20001334 	.word	0x20001334

00000340 <loop>:
     340:	4a02      	ldr	r2, [pc, #8]	; (34c <loop+0xc>)
     342:	4903      	ldr	r1, [pc, #12]	; (350 <loop+0x10>)
     344:	4803      	ldr	r0, [pc, #12]	; (354 <loop+0x14>)
     346:	f000 bb1f 	b.w	988 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)>
     34a:	bf00      	nop
     34c:	2000101c 	.word	0x2000101c
     350:	20001354 	.word	0x20001354
     354:	200014d0 	.word	0x200014d0

00000358 <_GLOBAL__sub_I_currentPattern>:
     358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if defined(ARDUINO_TEENSY40)
    TimerGenerator* const timerPool[] = {GPT1, GPT2, TMR1, TMR2, TMR3, TMR4, TCK};

#elif defined(ARDUINO_TEENSY41)
    TimerGenerator* const timerPool[] = {GPT1, GPT2, TMR1, TMR2, TMR3, TMR4, TCK};
     35a:	4811      	ldr	r0, [pc, #68]	; (3a0 <_GLOBAL__sub_I_currentPattern+0x48>)


void setup() {
	initBank(&currentPattern); //set bank to factory defaults
	initGlobals(&currentGlobals, 0); //set globals to factory defaults. both of these will change once the eeprom is implemented. 
	///for current testing, these will stay in here. 
     35c:	2100      	movs	r1, #0
     35e:	4b11      	ldr	r3, [pc, #68]	; (3a4 <_GLOBAL__sub_I_currentPattern+0x4c>)
     360:	4f11      	ldr	r7, [pc, #68]	; (3a8 <_GLOBAL__sub_I_currentPattern+0x50>)
     362:	4e12      	ldr	r6, [pc, #72]	; (3ac <_GLOBAL__sub_I_currentPattern+0x54>)
     364:	4d12      	ldr	r5, [pc, #72]	; (3b0 <_GLOBAL__sub_I_currentPattern+0x58>)
     366:	4c13      	ldr	r4, [pc, #76]	; (3b4 <_GLOBAL__sub_I_currentPattern+0x5c>)
     368:	4a13      	ldr	r2, [pc, #76]	; (3b8 <_GLOBAL__sub_I_currentPattern+0x60>)
     36a:	f8d3 e000 	ldr.w	lr, [r3]
     36e:	6800      	ldr	r0, [r0, #0]
     370:	4b12      	ldr	r3, [pc, #72]	; (3bc <_GLOBAL__sub_I_currentPattern+0x64>)
     372:	683f      	ldr	r7, [r7, #0]
     374:	6836      	ldr	r6, [r6, #0]
     376:	682d      	ldr	r5, [r5, #0]
     378:	6824      	ldr	r4, [r4, #0]
     37a:	6812      	ldr	r2, [r2, #0]
     37c:	6058      	str	r0, [r3, #4]
     37e:	4810      	ldr	r0, [pc, #64]	; (3c0 <_GLOBAL__sub_I_currentPattern+0x68>)
     380:	f8c3 e000 	str.w	lr, [r3]
     384:	609f      	str	r7, [r3, #8]
     386:	60de      	str	r6, [r3, #12]
     388:	611d      	str	r5, [r3, #16]
     38a:	615c      	str	r4, [r3, #20]
     38c:	619a      	str	r2, [r3, #24]
     38e:	f002 fde7 	bl	2f60 <TeensyTimerTool::Timer::Timer(TeensyTimerTool::ITimerChannel* (*)())>
	initPins();
     392:	2100      	movs	r1, #0
     394:	480b      	ldr	r0, [pc, #44]	; (3c4 <_GLOBAL__sub_I_currentPattern+0x6c>)
     396:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

void setup() {
	initBank(&currentPattern); //set bank to factory defaults
	initGlobals(&currentGlobals, 0); //set globals to factory defaults. both of these will change once the eeprom is implemented. 
	///for current testing, these will stay in here. 
	initPins();
     39a:	f002 bde1 	b.w	2f60 <TeensyTimerTool::Timer::Timer(TeensyTimerTool::ITimerChannel* (*)())>
     39e:	bf00      	nop
     3a0:	200002c0 	.word	0x200002c0
     3a4:	200002bc 	.word	0x200002bc
     3a8:	200002c4 	.word	0x200002c4
     3ac:	200002c8 	.word	0x200002c8
     3b0:	200002cc 	.word	0x200002cc
     3b4:	200002d4 	.word	0x200002d4
     3b8:	200002d0 	.word	0x200002d0
     3bc:	20001338 	.word	0x20001338
     3c0:	20001328 	.word	0x20001328
     3c4:	20001318 	.word	0x20001318

000003c8 <initEncoders()>:
uint8_t topEncoderLastValue = 0;
uint8_t bottomEncoderLastValue = 0;

void initEncoders() 
{
	pinMode(2, INPUT_PULLUP);
     3c8:	2102      	movs	r1, #2
//volatile uint8_t bottomEncoderValue;
uint8_t topEncoderLastValue = 0;
uint8_t bottomEncoderLastValue = 0;

void initEncoders() 
{
     3ca:	b508      	push	{r3, lr}
	pinMode(2, INPUT_PULLUP);
     3cc:	4608      	mov	r0, r1
     3ce:	f003 f9bd 	bl	374c <pinMode>
	pinMode(3, INPUT_PULLUP);
     3d2:	2102      	movs	r1, #2
     3d4:	2003      	movs	r0, #3
     3d6:	f003 f9b9 	bl	374c <pinMode>
	pinMode(4, INPUT_PULLUP);
     3da:	2102      	movs	r1, #2
     3dc:	2004      	movs	r0, #4
     3de:	f003 f9b5 	bl	374c <pinMode>
	pinMode(5, INPUT_PULLUP);
     3e2:	2102      	movs	r1, #2
     3e4:	2005      	movs	r0, #5

}
     3e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void initEncoders() 
{
	pinMode(2, INPUT_PULLUP);
	pinMode(3, INPUT_PULLUP);
	pinMode(4, INPUT_PULLUP);
	pinMode(5, INPUT_PULLUP);
     3ea:	f003 b9af 	b.w	374c <pinMode>
     3ee:	bf00      	nop

000003f0 <listenEncoders(Globals volatile*)>:

void listenEncoders(volatile Globals *encoderGlobals) 
{
	//we'll be calling this every millisecond. 
	//still need to implement bottom encoder. 
	prevNextCodeTop = prevNextCodeTop << 1;
     3f0:	4b4f      	ldr	r3, [pc, #316]	; (530 <listenEncoders(Globals volatile*)+0x140>)
	prevNextCodeTop |= digitalReadFast(3);
	prevNextCodeTop = prevNextCodeTop << 1;
	prevNextCodeTop |= digitalReadFast(2);
	prevNextCodeTop &= 0x0F;

	prevNextCodeBottom = prevNextCodeBottom << 1;
     3f2:	4a50      	ldr	r2, [pc, #320]	; (534 <listenEncoders(Globals volatile*)+0x144>)
	pinMode(5, INPUT_PULLUP);

}

void listenEncoders(volatile Globals *encoderGlobals) 
{
     3f4:	b470      	push	{r4, r5, r6}
	//we'll be calling this every millisecond. 
	//still need to implement bottom encoder. 
	prevNextCodeTop = prevNextCodeTop << 1;
     3f6:	7819      	ldrb	r1, [r3, #0]
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
     3f8:	4d4f      	ldr	r5, [pc, #316]	; (538 <listenEncoders(Globals volatile*)+0x148>)
     3fa:	0049      	lsls	r1, r1, #1
	prevNextCodeBottom |= digitalReadFast(4);
	prevNextCodeBottom &= 0x0F;



	if (rotEncTable[prevNextCodeTop])
     3fc:	4c4f      	ldr	r4, [pc, #316]	; (53c <listenEncoders(Globals volatile*)+0x14c>)

void listenEncoders(volatile Globals *encoderGlobals) 
{
	//we'll be calling this every millisecond. 
	//still need to implement bottom encoder. 
	prevNextCodeTop = prevNextCodeTop << 1;
     3fe:	b2c9      	uxtb	r1, r1
     400:	7019      	strb	r1, [r3, #0]
     402:	68a9      	ldr	r1, [r5, #8]
	prevNextCodeTop |= digitalReadFast(3);
     404:	781e      	ldrb	r6, [r3, #0]
     406:	f3c1 1140 	ubfx	r1, r1, #5, #1
     40a:	4331      	orrs	r1, r6
     40c:	7019      	strb	r1, [r3, #0]
	prevNextCodeTop = prevNextCodeTop << 1;
     40e:	7819      	ldrb	r1, [r3, #0]
     410:	0049      	lsls	r1, r1, #1
     412:	b2c9      	uxtb	r1, r1
     414:	7019      	strb	r1, [r3, #0]
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
     416:	68a9      	ldr	r1, [r5, #8]
	prevNextCodeTop |= digitalReadFast(2);
     418:	781e      	ldrb	r6, [r3, #0]
     41a:	f3c1 1100 	ubfx	r1, r1, #4, #1
     41e:	4331      	orrs	r1, r6
     420:	7019      	strb	r1, [r3, #0]
	prevNextCodeTop &= 0x0F;
     422:	7819      	ldrb	r1, [r3, #0]
     424:	f001 010f 	and.w	r1, r1, #15
     428:	7019      	strb	r1, [r3, #0]

	prevNextCodeBottom = prevNextCodeBottom << 1;
     42a:	7811      	ldrb	r1, [r2, #0]
     42c:	0049      	lsls	r1, r1, #1
     42e:	b2c9      	uxtb	r1, r1
     430:	7011      	strb	r1, [r2, #0]
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
		} else if (pin == 4) {
			return (CORE_PIN4_PINREG & CORE_PIN4_BITMASK) ? 1 : 0;
		} else if (pin == 5) {
			return (CORE_PIN5_PINREG & CORE_PIN5_BITMASK) ? 1 : 0;
     432:	68a9      	ldr	r1, [r5, #8]
	prevNextCodeBottom |= digitalReadFast(5);
     434:	7816      	ldrb	r6, [r2, #0]
     436:	f3c1 2100 	ubfx	r1, r1, #8, #1
     43a:	4331      	orrs	r1, r6
     43c:	7011      	strb	r1, [r2, #0]
	prevNextCodeBottom = prevNextCodeBottom << 1;
     43e:	7811      	ldrb	r1, [r2, #0]
     440:	0049      	lsls	r1, r1, #1
     442:	b2c9      	uxtb	r1, r1
     444:	7011      	strb	r1, [r2, #0]
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
		} else if (pin == 4) {
			return (CORE_PIN4_PINREG & CORE_PIN4_BITMASK) ? 1 : 0;
     446:	68a9      	ldr	r1, [r5, #8]
	prevNextCodeBottom |= digitalReadFast(4);
     448:	7815      	ldrb	r5, [r2, #0]
     44a:	f3c1 1180 	ubfx	r1, r1, #6, #1
     44e:	4329      	orrs	r1, r5
     450:	7011      	strb	r1, [r2, #0]
	prevNextCodeBottom &= 0x0F;
     452:	7811      	ldrb	r1, [r2, #0]
     454:	f001 010f 	and.w	r1, r1, #15
     458:	7011      	strb	r1, [r2, #0]



	if (rotEncTable[prevNextCodeTop])
     45a:	7819      	ldrb	r1, [r3, #0]
     45c:	5661      	ldrsb	r1, [r4, r1]
     45e:	b171      	cbz	r1, 47e <listenEncoders(Globals volatile*)+0x8e>
	{
		storeTop = storeTop << 4;
     460:	4937      	ldr	r1, [pc, #220]	; (540 <listenEncoders(Globals volatile*)+0x150>)
     462:	780d      	ldrb	r5, [r1, #0]
     464:	012d      	lsls	r5, r5, #4
     466:	b2ed      	uxtb	r5, r5
     468:	700d      	strb	r5, [r1, #0]
		storeTop |= prevNextCodeTop;
     46a:	781d      	ldrb	r5, [r3, #0]
     46c:	780b      	ldrb	r3, [r1, #0]
     46e:	432b      	orrs	r3, r5
     470:	700b      	strb	r3, [r1, #0]
		if ((storeTop&0xFF)==0x2B) 
     472:	780b      	ldrb	r3, [r1, #0]
     474:	2b2b      	cmp	r3, #43	; 0x2b
     476:	d038      	beq.n	4ea <listenEncoders(Globals volatile*)+0xfa>
			currentTopEncoderMenu = currentTopEncoderMenu << 4;
			currentTopEncoderMenu = currentTopEncoderMenu & 0b01110000; //stay in range, we don't want to trigger a click
			encoderGlobals->menuState = currentTopEncoderMenu; //assign the new menustate
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
		}
		if ((storeTop & 0xFF) == 0x17) 
     478:	780b      	ldrb	r3, [r1, #0]
     47a:	2b17      	cmp	r3, #23
     47c:	d046      	beq.n	50c <listenEncoders(Globals volatile*)+0x11c>
			encoderGlobals->menuState = currentTopEncoderMenu; //assign the new menustate
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
		}
	}

	if (rotEncTable[prevNextCodeBottom])
     47e:	7813      	ldrb	r3, [r2, #0]
     480:	4d2c      	ldr	r5, [pc, #176]	; (534 <listenEncoders(Globals volatile*)+0x144>)
     482:	56e3      	ldrsb	r3, [r4, r3]
     484:	b17b      	cbz	r3, 4a6 <listenEncoders(Globals volatile*)+0xb6>
	{
		storeBottom = storeBottom << 4;
     486:	4a2f      	ldr	r2, [pc, #188]	; (544 <listenEncoders(Globals volatile*)+0x154>)
		storeBottom |= prevNextCodeBottom;
		if ((storeTop & 0xFF) == 0x2B)
     488:	492d      	ldr	r1, [pc, #180]	; (540 <listenEncoders(Globals volatile*)+0x150>)
		}
	}

	if (rotEncTable[prevNextCodeBottom])
	{
		storeBottom = storeBottom << 4;
     48a:	7813      	ldrb	r3, [r2, #0]
     48c:	011b      	lsls	r3, r3, #4
     48e:	b2db      	uxtb	r3, r3
     490:	7013      	strb	r3, [r2, #0]
		storeBottom |= prevNextCodeBottom;
     492:	782c      	ldrb	r4, [r5, #0]
     494:	7813      	ldrb	r3, [r2, #0]
     496:	4323      	orrs	r3, r4
     498:	7013      	strb	r3, [r2, #0]
		if ((storeTop & 0xFF) == 0x2B)
     49a:	780b      	ldrb	r3, [r1, #0]
     49c:	2b2b      	cmp	r3, #43	; 0x2b
     49e:	d013      	beq.n	4c8 <listenEncoders(Globals volatile*)+0xd8>
			currentBottomEncoderMenu++;
			currentBottomEncoderMenu = currentBottomEncoderMenu & 0b00000111; 
			encoderGlobals->menuState = (encoderGlobals->menuState & 0b11111000) | currentBottomEncoderMenu;
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
		}
		if ((storeTop & 0xFF) == 0x17)
     4a0:	780b      	ldrb	r3, [r1, #0]
     4a2:	2b17      	cmp	r3, #23
     4a4:	d001      	beq.n	4aa <listenEncoders(Globals volatile*)+0xba>
			currentBottomEncoderMenu = currentBottomEncoderMenu & 0b00000111;
			encoderGlobals->menuState = (encoderGlobals->menuState & 0b11111000) | currentBottomEncoderMenu;
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
		}
	}
     4a6:	bc70      	pop	{r4, r5, r6}
     4a8:	4770      	bx	lr
			encoderGlobals->menuState = (encoderGlobals->menuState & 0b11111000) | currentBottomEncoderMenu;
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
		}
		if ((storeTop & 0xFF) == 0x17)
		{
			uint8_t currentBottomEncoderMenu = (encoderGlobals->menuState) & 0b00000111; //we only use the bottom 3 bits to make menu changes;
     4aa:	7ac3      	ldrb	r3, [r0, #11]
			currentBottomEncoderMenu--;
			currentBottomEncoderMenu = currentBottomEncoderMenu & 0b00000111;
			encoderGlobals->menuState = (encoderGlobals->menuState & 0b11111000) | currentBottomEncoderMenu;
     4ac:	7ac2      	ldrb	r2, [r0, #11]
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
		}
		if ((storeTop & 0xFF) == 0x17)
		{
			uint8_t currentBottomEncoderMenu = (encoderGlobals->menuState) & 0b00000111; //we only use the bottom 3 bits to make menu changes;
			currentBottomEncoderMenu--;
     4ae:	3307      	adds	r3, #7
			currentBottomEncoderMenu = currentBottomEncoderMenu & 0b00000111;
			encoderGlobals->menuState = (encoderGlobals->menuState & 0b11111000) | currentBottomEncoderMenu;
     4b0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
     4b4:	f003 0307 	and.w	r3, r3, #7
     4b8:	4313      	orrs	r3, r2
     4ba:	72c3      	strb	r3, [r0, #11]
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
     4bc:	7bc3      	ldrb	r3, [r0, #15]
     4be:	f043 0301 	orr.w	r3, r3, #1
		}
	}
     4c2:	bc70      	pop	{r4, r5, r6}
		{
			uint8_t currentBottomEncoderMenu = (encoderGlobals->menuState) & 0b00000111; //we only use the bottom 3 bits to make menu changes;
			currentBottomEncoderMenu--;
			currentBottomEncoderMenu = currentBottomEncoderMenu & 0b00000111;
			encoderGlobals->menuState = (encoderGlobals->menuState & 0b11111000) | currentBottomEncoderMenu;
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
     4c4:	73c3      	strb	r3, [r0, #15]
		}
	}
     4c6:	4770      	bx	lr
	{
		storeBottom = storeBottom << 4;
		storeBottom |= prevNextCodeBottom;
		if ((storeTop & 0xFF) == 0x2B)
		{
			uint8_t currentBottomEncoderMenu = (encoderGlobals->menuState) & 0b00000111; //we only use the bottom 3 bits to make menu changes;
     4c8:	7ac3      	ldrb	r3, [r0, #11]
			currentBottomEncoderMenu++;
			currentBottomEncoderMenu = currentBottomEncoderMenu & 0b00000111; 
			encoderGlobals->menuState = (encoderGlobals->menuState & 0b11111000) | currentBottomEncoderMenu;
     4ca:	7ac2      	ldrb	r2, [r0, #11]
		storeBottom = storeBottom << 4;
		storeBottom |= prevNextCodeBottom;
		if ((storeTop & 0xFF) == 0x2B)
		{
			uint8_t currentBottomEncoderMenu = (encoderGlobals->menuState) & 0b00000111; //we only use the bottom 3 bits to make menu changes;
			currentBottomEncoderMenu++;
     4cc:	3301      	adds	r3, #1
			currentBottomEncoderMenu = currentBottomEncoderMenu & 0b00000111; 
			encoderGlobals->menuState = (encoderGlobals->menuState & 0b11111000) | currentBottomEncoderMenu;
     4ce:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
     4d2:	f003 0307 	and.w	r3, r3, #7
     4d6:	4313      	orrs	r3, r2
     4d8:	72c3      	strb	r3, [r0, #11]
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
     4da:	7bc3      	ldrb	r3, [r0, #15]
     4dc:	f043 0301 	orr.w	r3, r3, #1
     4e0:	73c3      	strb	r3, [r0, #15]
		}
		if ((storeTop & 0xFF) == 0x17)
     4e2:	780b      	ldrb	r3, [r1, #0]
     4e4:	2b17      	cmp	r3, #23
     4e6:	d1de      	bne.n	4a6 <listenEncoders(Globals volatile*)+0xb6>
     4e8:	e7df      	b.n	4aa <listenEncoders(Globals volatile*)+0xba>
	{
		storeTop = storeTop << 4;
		storeTop |= prevNextCodeTop;
		if ((storeTop&0xFF)==0x2B) 
		{
			uint8_t currentTopEncoderMenu = (encoderGlobals->menuState)&0b01110000;
     4ea:	7ac3      	ldrb	r3, [r0, #11]
			currentTopEncoderMenu = currentTopEncoderMenu >> 4; 
     4ec:	f3c3 1302 	ubfx	r3, r3, #4, #3
			currentTopEncoderMenu++;
     4f0:	3301      	adds	r3, #1
			if (currentTopEncoderMenu > 3) 
     4f2:	2b03      	cmp	r3, #3
     4f4:	d818      	bhi.n	528 <listenEncoders(Globals volatile*)+0x138>
     4f6:	011b      	lsls	r3, r3, #4
     4f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
			{
				currentTopEncoderMenu = 0;
			}
			currentTopEncoderMenu = currentTopEncoderMenu << 4;
			currentTopEncoderMenu = currentTopEncoderMenu & 0b01110000; //stay in range, we don't want to trigger a click
			encoderGlobals->menuState = currentTopEncoderMenu; //assign the new menustate
     4fc:	72c3      	strb	r3, [r0, #11]
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
     4fe:	7bc3      	ldrb	r3, [r0, #15]
     500:	f043 0301 	orr.w	r3, r3, #1
     504:	73c3      	strb	r3, [r0, #15]
		}
		if ((storeTop & 0xFF) == 0x17) 
     506:	780b      	ldrb	r3, [r1, #0]
     508:	2b17      	cmp	r3, #23
     50a:	d1b8      	bne.n	47e <listenEncoders(Globals volatile*)+0x8e>
		{
			uint8_t currentTopEncoderMenu = (encoderGlobals->menuState) & 0b01110000;
     50c:	7ac3      	ldrb	r3, [r0, #11]
			currentTopEncoderMenu = currentTopEncoderMenu >> 4;
     50e:	f3c3 1302 	ubfx	r3, r3, #4, #3
			if (currentTopEncoderMenu == 0) 
     512:	b15b      	cbz	r3, 52c <listenEncoders(Globals volatile*)+0x13c>
     514:	3b01      	subs	r3, #1
     516:	011b      	lsls	r3, r3, #4
     518:	f003 0370 	and.w	r3, r3, #112	; 0x70
				currentTopEncoderMenu = 4; //set this to 1 higher than the last menu option. 
			}
			currentTopEncoderMenu--;
			currentTopEncoderMenu = currentTopEncoderMenu << 4;
			currentTopEncoderMenu = currentTopEncoderMenu & 0b01110000; //stay in range, we don't want to trigger a click
			encoderGlobals->menuState = currentTopEncoderMenu; //assign the new menustate
     51c:	72c3      	strb	r3, [r0, #11]
			encoderGlobals->valueChangeFlag |= (1 << encoderChange);
     51e:	7bc3      	ldrb	r3, [r0, #15]
     520:	f043 0301 	orr.w	r3, r3, #1
     524:	73c3      	strb	r3, [r0, #15]
     526:	e7aa      	b.n	47e <listenEncoders(Globals volatile*)+0x8e>
     528:	2300      	movs	r3, #0
     52a:	e7e7      	b.n	4fc <listenEncoders(Globals volatile*)+0x10c>
     52c:	2330      	movs	r3, #48	; 0x30
     52e:	e7f5      	b.n	51c <listenEncoders(Globals volatile*)+0x12c>
     530:	20001884 	.word	0x20001884
     534:	20001882 	.word	0x20001882
     538:	4200c000 	.word	0x4200c000
     53c:	2000001c 	.word	0x2000001c
     540:	20001881 	.word	0x20001881
     544:	20001883 	.word	0x20001883

00000548 <initBank(Pattern volatile*)>:
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
		currentInitPattern->trackPlayMode[i] = 0x01;
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     548:	2200      	movs	r2, #0

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     54a:	f04f 0c02 	mov.w	ip, #2
     54e:	2107      	movs	r1, #7
		currentInitPattern->trackPlayMode[i] = 0x01;
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     550:	4613      	mov	r3, r2
// 

#include "globalVariables.h"

void initBank(volatile Pattern* currentInitPattern)
{
     552:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     554:	2501      	movs	r5, #1
		currentInitPattern->trackPlayMode[i] = 0x01;
		currentInitPattern->envelopeType[i] = 3;
     556:	2403      	movs	r4, #3

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     558:	f04f 0e04 	mov.w	lr, #4
     55c:	2705      	movs	r7, #5
     55e:	2606      	movs	r6, #6
     560:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
		currentInitPattern->trackPlayMode[i] = 0x01;
     564:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		currentInitPattern->envelopeType[i] = 3;
     568:	f880 40eb 	strb.w	r4, [r0, #235]	; 0xeb
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     56c:	f880 20db 	strb.w	r2, [r0, #219]	; 0xdb
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     570:	f880 20cb 	strb.w	r2, [r0, #203]	; 0xcb

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     574:	f880 c0a9 	strb.w	ip, [r0, #169]	; 0xa9
     578:	f04f 0c08 	mov.w	ip, #8
		currentInitPattern->trackPlayMode[i] = 0x01;
     57c:	f880 5089 	strb.w	r5, [r0, #137]	; 0x89
		currentInitPattern->envelopeType[i] = 3;
     580:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     584:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     588:	f880 20cc 	strb.w	r2, [r0, #204]	; 0xcc

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     58c:	f880 40aa 	strb.w	r4, [r0, #170]	; 0xaa
		currentInitPattern->trackPlayMode[i] = 0x01;
     590:	f880 508a 	strb.w	r5, [r0, #138]	; 0x8a
		currentInitPattern->envelopeType[i] = 3;
     594:	f880 40ed 	strb.w	r4, [r0, #237]	; 0xed
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     598:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     59c:	f880 20cd 	strb.w	r2, [r0, #205]	; 0xcd

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     5a0:	f880 e0ab 	strb.w	lr, [r0, #171]	; 0xab
     5a4:	f04f 0e09 	mov.w	lr, #9
		currentInitPattern->trackPlayMode[i] = 0x01;
     5a8:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
		currentInitPattern->envelopeType[i] = 3;
     5ac:	f880 40ee 	strb.w	r4, [r0, #238]	; 0xee
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     5b0:	f880 20de 	strb.w	r2, [r0, #222]	; 0xde
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     5b4:	f880 20ce 	strb.w	r2, [r0, #206]	; 0xce

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     5b8:	f880 70ac 	strb.w	r7, [r0, #172]	; 0xac
     5bc:	270a      	movs	r7, #10
		currentInitPattern->trackPlayMode[i] = 0x01;
     5be:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
		currentInitPattern->envelopeType[i] = 3;
     5c2:	f880 40ef 	strb.w	r4, [r0, #239]	; 0xef
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     5c6:	f880 20df 	strb.w	r2, [r0, #223]	; 0xdf
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     5ca:	f880 20cf 	strb.w	r2, [r0, #207]	; 0xcf

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     5ce:	f880 60ad 	strb.w	r6, [r0, #173]	; 0xad
     5d2:	260b      	movs	r6, #11
		currentInitPattern->trackPlayMode[i] = 0x01;
     5d4:	f880 508d 	strb.w	r5, [r0, #141]	; 0x8d
		currentInitPattern->envelopeType[i] = 3;
     5d8:	f880 40f0 	strb.w	r4, [r0, #240]	; 0xf0
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     5dc:	f880 20e0 	strb.w	r2, [r0, #224]	; 0xe0
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     5e0:	f880 20d0 	strb.w	r2, [r0, #208]	; 0xd0

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     5e4:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
     5e8:	210c      	movs	r1, #12
		currentInitPattern->trackPlayMode[i] = 0x01;
     5ea:	f880 508e 	strb.w	r5, [r0, #142]	; 0x8e
		currentInitPattern->envelopeType[i] = 3;
     5ee:	f880 40f1 	strb.w	r4, [r0, #241]	; 0xf1
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     5f2:	f880 20e1 	strb.w	r2, [r0, #225]	; 0xe1
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     5f6:	f880 20d1 	strb.w	r2, [r0, #209]	; 0xd1

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     5fa:	f880 c0af 	strb.w	ip, [r0, #175]	; 0xaf
     5fe:	f04f 0c0d 	mov.w	ip, #13
		currentInitPattern->trackPlayMode[i] = 0x01;
     602:	f880 508f 	strb.w	r5, [r0, #143]	; 0x8f
		currentInitPattern->envelopeType[i] = 3;
     606:	f880 40f2 	strb.w	r4, [r0, #242]	; 0xf2
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     60a:	f880 20e2 	strb.w	r2, [r0, #226]	; 0xe2
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     60e:	f880 20d2 	strb.w	r2, [r0, #210]	; 0xd2

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     612:	f880 e0b0 	strb.w	lr, [r0, #176]	; 0xb0
     616:	f04f 0e0e 	mov.w	lr, #14
		currentInitPattern->trackPlayMode[i] = 0x01;
     61a:	f880 5090 	strb.w	r5, [r0, #144]	; 0x90
		currentInitPattern->envelopeType[i] = 3;
     61e:	f880 40f3 	strb.w	r4, [r0, #243]	; 0xf3
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     622:	f880 20e3 	strb.w	r2, [r0, #227]	; 0xe3
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     626:	f880 20d3 	strb.w	r2, [r0, #211]	; 0xd3

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     62a:	f880 70b1 	strb.w	r7, [r0, #177]	; 0xb1
     62e:	270f      	movs	r7, #15
		currentInitPattern->trackPlayMode[i] = 0x01;
     630:	f880 5091 	strb.w	r5, [r0, #145]	; 0x91
		currentInitPattern->envelopeType[i] = 3;
     634:	f880 40f4 	strb.w	r4, [r0, #244]	; 0xf4
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     638:	f880 20e4 	strb.w	r2, [r0, #228]	; 0xe4
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     63c:	f880 20d4 	strb.w	r2, [r0, #212]	; 0xd4

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     640:	f880 60b2 	strb.w	r6, [r0, #178]	; 0xb2
     644:	2610      	movs	r6, #16
		currentInitPattern->trackPlayMode[i] = 0x01;
     646:	f880 5092 	strb.w	r5, [r0, #146]	; 0x92
		currentInitPattern->envelopeType[i] = 3;
     64a:	f880 40f5 	strb.w	r4, [r0, #245]	; 0xf5
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     64e:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     652:	f880 20d5 	strb.w	r2, [r0, #213]	; 0xd5

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     656:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
		currentInitPattern->trackSustainTimeMSB[i] = 0;
	}

	for (uint8_t j = 0; j < 64; j++)
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     65a:	4611      	mov	r1, r2
void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
		currentInitPattern->trackPlayMode[i] = 0x01;
     65c:	f880 5093 	strb.w	r5, [r0, #147]	; 0x93
		currentInitPattern->envelopeType[i] = 3;
     660:	f880 40f6 	strb.w	r4, [r0, #246]	; 0xf6
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     664:	f880 20e6 	strb.w	r2, [r0, #230]	; 0xe6
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     668:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     66c:	f880 c0b4 	strb.w	ip, [r0, #180]	; 0xb4
		currentInitPattern->trackPlayMode[i] = 0x01;
     670:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
		currentInitPattern->envelopeType[i] = 3;
     674:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     678:	f880 20e7 	strb.w	r2, [r0, #231]	; 0xe7
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     67c:	f880 20d7 	strb.w	r2, [r0, #215]	; 0xd7

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     680:	f880 e0b5 	strb.w	lr, [r0, #181]	; 0xb5
		currentInitPattern->trackPlayMode[i] = 0x01;
     684:	f880 5095 	strb.w	r5, [r0, #149]	; 0x95
		currentInitPattern->envelopeType[i] = 3;
     688:	f880 40f8 	strb.w	r4, [r0, #248]	; 0xf8
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     68c:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     690:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     694:	f880 70b6 	strb.w	r7, [r0, #182]	; 0xb6
		currentInitPattern->trackPlayMode[i] = 0x01;
     698:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
		currentInitPattern->envelopeType[i] = 3;
     69c:	f880 40f9 	strb.w	r4, [r0, #249]	; 0xf9
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     6a0:	f880 20e9 	strb.w	r2, [r0, #233]	; 0xe9
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     6a4:	f880 20d9 	strb.w	r2, [r0, #217]	; 0xd9

void initBank(volatile Pattern* currentInitPattern)
{
	for (uint8_t i = 0; i < 16; i++)
	{
		currentInitPattern->trackSampleLSB[i] = i + 1;
     6a8:	f880 60b7 	strb.w	r6, [r0, #183]	; 0xb7
		currentInitPattern->trackPlayMode[i] = 0x01;
     6ac:	f880 5097 	strb.w	r5, [r0, #151]	; 0x97
		currentInitPattern->envelopeType[i] = 3;
     6b0:	f880 40fa 	strb.w	r4, [r0, #250]	; 0xfa
		currentInitPattern->trackSustainTimeLSB[i] = 0;
     6b4:	f880 20ea 	strb.w	r2, [r0, #234]	; 0xea
		currentInitPattern->trackSustainTimeMSB[i] = 0;
     6b8:	f880 20da 	strb.w	r2, [r0, #218]	; 0xda
	}

	for (uint8_t j = 0; j < 64; j++)
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     6bc:	f103 027c 	add.w	r2, r3, #124	; 0x7c
     6c0:	3301      	adds	r3, #1
     6c2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
		currentInitPattern->trackSustainTimeMSB[i] = 0;
	}

	for (uint8_t j = 0; j < 64; j++)
     6c6:	2b40      	cmp	r3, #64	; 0x40
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     6c8:	8091      	strh	r1, [r2, #4]
		currentInitPattern->envelopeType[i] = 3;
		currentInitPattern->trackSustainTimeLSB[i] = 0;
		currentInitPattern->trackSustainTimeMSB[i] = 0;
	}

	for (uint8_t j = 0; j < 64; j++)
     6ca:	d1f7      	bne.n	6bc <initBank(Pattern volatile*)+0x174>
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 

	}
	//We need to take these and put them in global. 
	currentInitPattern->patternBPM = 120;
     6cc:	2278      	movs	r2, #120	; 0x78
	currentInitPattern->numSteps = 16;
     6ce:	2310      	movs	r3, #16
	{
		currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 

	}
	//We need to take these and put them in global. 
	currentInitPattern->patternBPM = 120;
     6d0:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
	currentInitPattern->numSteps = 16;
     6d4:	f880 30ca 	strb.w	r3, [r0, #202]	; 0xca
     6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6da:	bf00      	nop

000006dc <initGlobals(Globals volatile*, unsigned char)>:
}
void initGlobals(volatile Globals* currentGlobals, uint8_t factoryReset)
{
	currentGlobals->currentTrigButtons = 0; //current state of Trig buttons.
     6dc:	2300      	movs	r3, #0
	currentGlobals->currentTrigSequencer = 0;
	currentGlobals->currentTrigMidi = 0;
	currentGlobals->oledReadIndex = 0;
	currentGlobals->oledWriteIndex = 0;

	if (factoryReset == 1)
     6de:	2901      	cmp	r1, #1
	currentInitPattern->patternBPM = 120;
	currentInitPattern->numSteps = 16;
}
void initGlobals(volatile Globals* currentGlobals, uint8_t factoryReset)
{
	currentGlobals->currentTrigButtons = 0; //current state of Trig buttons.
     6e0:	8003      	strh	r3, [r0, #0]
	currentGlobals->currentGPButtons = 0; //current state of GP buttons
     6e2:	7083      	strb	r3, [r0, #2]
	currentGlobals->currentPatternNumber = 0; //current pattern, between 1 and 256
     6e4:	7203      	strb	r3, [r0, #8]
	currentGlobals->currentStep = 0; // current step in the sequencer
     6e6:	7243      	strb	r3, [r0, #9]
	currentGlobals->currentTrack = 0; //current track being edited
     6e8:	7283      	strb	r3, [r0, #10]
	currentGlobals->menuState = 0; //where the menu is currently
     6ea:	72c3      	strb	r3, [r0, #11]
	currentGlobals->playState = 0; //whether the sequencer is playing, stopped, or paused.
     6ec:	7303      	strb	r3, [r0, #12]
	currentGlobals->factoryReset = 0; //we may not need this in this struct, but good to have for now.
     6ee:	7343      	strb	r3, [r0, #13]
	currentGlobals->buttonSwitchFlag = 0; // could be rolled into value bits.
     6f0:	7383      	strb	r3, [r0, #14]
	currentGlobals->valueChangeFlag = 0; //bit 0 -> changes in encoders, bit 1-> changes in buttons, bit2 -> changes in knobs
     6f2:	73c3      	strb	r3, [r0, #15]
	currentGlobals->knobStatus = 0; //top 4 bits: knob type, bottom 4 bits: knob location.
     6f4:	7403      	strb	r3, [r0, #16]
	currentGlobals->releaseCounter = 0;
     6f6:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	currentGlobals->lastGlobalTimer = 0;
     6fa:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
	currentGlobals->clockCounter = 0;
     6fe:	f8a0 30f0 	strh.w	r3, [r0, #240]	; 0xf0
	currentGlobals->currentTrigSequencer = 0;
     702:	8083      	strh	r3, [r0, #4]
	currentGlobals->currentTrigMidi = 0;
     704:	80c3      	strh	r3, [r0, #6]
	currentGlobals->oledReadIndex = 0;
     706:	f880 32fa 	strb.w	r3, [r0, #762]	; 0x2fa
	currentGlobals->oledWriteIndex = 0;
     70a:	f880 32fb 	strb.w	r3, [r0, #763]	; 0x2fb

	if (factoryReset == 1)
     70e:	d000      	beq.n	712 <initGlobals(Globals volatile*, unsigned char)+0x36>
     710:	4770      	bx	lr
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
     712:	2224      	movs	r2, #36	; 0x24
	currentGlobals->oledReadIndex = 0;
	currentGlobals->oledWriteIndex = 0;

	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
     714:	7443      	strb	r3, [r0, #17]
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
     716:	212a      	movs	r1, #42	; 0x2a
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
     718:	232c      	movs	r3, #44	; 0x2c
	currentGlobals->oledWriteIndex = 0;

	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
     71a:	7482      	strb	r2, [r0, #18]
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
     71c:	222b      	movs	r2, #43	; 0x2b
	//We need to take these and put them in global. 
	currentInitPattern->patternBPM = 120;
	currentInitPattern->numSteps = 16;
}
void initGlobals(volatile Globals* currentGlobals, uint8_t factoryReset)
{
     71e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
     720:	2726      	movs	r7, #38	; 0x26
		currentGlobals->midiTrackNote[3] = 0x27;
     722:	2627      	movs	r6, #39	; 0x27
		currentGlobals->midiTrackNote[4] = 0x28;
     724:	2528      	movs	r5, #40	; 0x28
		currentGlobals->midiTrackNote[5] = 0x29;
     726:	2429      	movs	r4, #41	; 0x29

	if (factoryReset == 1)
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
     728:	f04f 0e25 	mov.w	lr, #37	; 0x25
     72c:	f880 e013 	strb.w	lr, [r0, #19]
		currentGlobals->midiTrackNote[2] = 0x26;
     730:	7507      	strb	r7, [r0, #20]
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
     732:	272d      	movs	r7, #45	; 0x2d
	{
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
     734:	7546      	strb	r6, [r0, #21]
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
     736:	262e      	movs	r6, #46	; 0x2e
		currentGlobals->midiChannel = 0;
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
     738:	7585      	strb	r5, [r0, #22]
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
     73a:	252f      	movs	r5, #47	; 0x2f
		currentGlobals->midiTrackNote[0] = 0x24;
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
     73c:	75c4      	strb	r4, [r0, #23]
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
     73e:	2430      	movs	r4, #48	; 0x30
		currentGlobals->midiTrackNote[1] = 0x25;
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
     740:	7601      	strb	r1, [r0, #24]
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
		currentGlobals->midiTrackNote[13] = 0x31;
     742:	2131      	movs	r1, #49	; 0x31
		currentGlobals->midiTrackNote[2] = 0x26;
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
     744:	7642      	strb	r2, [r0, #25]
		currentGlobals->midiTrackNote[9] = 0x2d;
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
		currentGlobals->midiTrackNote[13] = 0x31;
		currentGlobals->midiTrackNote[14] = 0x32;
     746:	2232      	movs	r2, #50	; 0x32
		currentGlobals->midiTrackNote[3] = 0x27;
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
     748:	7683      	strb	r3, [r0, #26]
		currentGlobals->midiTrackNote[10] = 0x2e;
		currentGlobals->midiTrackNote[11] = 0x2f;
		currentGlobals->midiTrackNote[12] = 0x30;
		currentGlobals->midiTrackNote[13] = 0x31;
		currentGlobals->midiTrackNote[14] = 0x32;
		currentGlobals->midiTrackNote[15] = 0x33;
     74a:	2333      	movs	r3, #51	; 0x33
		currentGlobals->midiTrackNote[4] = 0x28;
		currentGlobals->midiTrackNote[5] = 0x29;
		currentGlobals->midiTrackNote[6] = 0x2a;
		currentGlobals->midiTrackNote[7] = 0x2b;
		currentGlobals->midiTrackNote[8] = 0x2c;
		currentGlobals->midiTrackNote[9] = 0x2d;
     74c:	76c7      	strb	r7, [r0, #27]
		currentGlobals->midiTrackNote[10] = 0x2e;
     74e:	7706      	strb	r6, [r0, #28]
		currentGlobals->midiTrackNote[11] = 0x2f;
     750:	7745      	strb	r5, [r0, #29]
		currentGlobals->midiTrackNote[12] = 0x30;
     752:	7784      	strb	r4, [r0, #30]
		currentGlobals->midiTrackNote[13] = 0x31;
     754:	77c1      	strb	r1, [r0, #31]
		currentGlobals->midiTrackNote[14] = 0x32;
     756:	f880 2020 	strb.w	r2, [r0, #32]
		currentGlobals->midiTrackNote[15] = 0x33;
     75a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
     75e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000760 <initArrays(char volatile (*) [21], int, char*)>:
	}
}

void initArrays(volatile char myArray[9][21], int stringNumber, char* myString)
{
     760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     762:	4606      	mov	r6, r0
	uint8_t lengthOfString = strlen(myString);
     764:	4610      	mov	r0, r2
		currentGlobals->midiTrackNote[15] = 0x33;
	}
}

void initArrays(volatile char myArray[9][21], int stringNumber, char* myString)
{
     766:	460f      	mov	r7, r1
     768:	4614      	mov	r4, r2
	uint8_t lengthOfString = strlen(myString);
     76a:	f005 fb09 	bl	5d80 <strlen>
     76e:	b2c0      	uxtb	r0, r0
	uint8_t charLeft = 20 - lengthOfString;
     770:	f1c0 0114 	rsb	r1, r0, #20
     774:	b2c9      	uxtb	r1, r1
	uint8_t currentIndex = 0;
	for (currentIndex; currentIndex < lengthOfString; currentIndex++)
     776:	b168      	cbz	r0, 794 <initArrays(char volatile (*) [21], int, char*)+0x34>
     778:	eb07 0547 	add.w	r5, r7, r7, lsl #1
     77c:	1e62      	subs	r2, r4, #1
     77e:	2300      	movs	r3, #0
     780:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
     784:	4435      	add	r5, r6
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     786:	f812 4f01 	ldrb.w	r4, [r2, #1]!
     78a:	54ec      	strb	r4, [r5, r3]
     78c:	3301      	adds	r3, #1
void initArrays(volatile char myArray[9][21], int stringNumber, char* myString)
{
	uint8_t lengthOfString = strlen(myString);
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for (currentIndex; currentIndex < lengthOfString; currentIndex++)
     78e:	b2dc      	uxtb	r4, r3
     790:	4284      	cmp	r4, r0
     792:	d3f8      	bcc.n	786 <initArrays(char volatile (*) [21], int, char*)+0x26>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for (charLeft; charLeft > 0; charLeft--)
     794:	b169      	cbz	r1, 7b2 <initArrays(char volatile (*) [21], int, char*)+0x52>
     796:	eb07 0747 	add.w	r7, r7, r7, lsl #1
     79a:	180a      	adds	r2, r1, r0
	{
		myArray[stringNumber][currentIndex] = ' ';
     79c:	2120      	movs	r1, #32
     79e:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
     7a2:	b2d2      	uxtb	r2, r2
     7a4:	443e      	add	r6, r7
		currentIndex++;
     7a6:	1c43      	adds	r3, r0, #1
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for (charLeft; charLeft > 0; charLeft--)
	{
		myArray[stringNumber][currentIndex] = ' ';
     7a8:	5431      	strb	r1, [r6, r0]
		currentIndex++;
     7aa:	b2d8      	uxtb	r0, r3
	for (currentIndex; currentIndex < lengthOfString; currentIndex++)
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for (charLeft; charLeft > 0; charLeft--)
     7ac:	4290      	cmp	r0, r2
     7ae:	d1fa      	bne.n	7a6 <initArrays(char volatile (*) [21], int, char*)+0x46>
     7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000007b4 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)>:

void initMenu(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{

	//screen0
	initArrays(initTheScreen->screen0, 0, "Performance Mode");
     7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     7b8:	4605      	mov	r5, r0
     7ba:	4617      	mov	r7, r2
     7bc:	4688      	mov	r8, r1
	initArrays(initTheScreen->screen0, 1, "Pattern:");
	initArrays(initTheScreen->screen0, 2, "BPM:");
	initArrays(initTheScreen->screen0, 3, "Stop");
     7be:	4a5c      	ldr	r2, [pc, #368]	; (930 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x17c>)
     7c0:	2100      	movs	r1, #0

	//screen1
	initArrays(initTheScreen->screen1, 0, "Sequence Edit");
	initArrays(initTheScreen->screen1, 1, "Pattern:");
	initArrays(initTheScreen->screen1, 2, "Steps:");
	initArrays(initTheScreen->screen1, 3, "Step number:");
     7c2:	f100 06bd 	add.w	r6, r0, #189	; 0xbd

	//screen0
	initArrays(initTheScreen->screen0, 0, "Performance Mode");
	initArrays(initTheScreen->screen0, 1, "Pattern:");
	initArrays(initTheScreen->screen0, 2, "BPM:");
	initArrays(initTheScreen->screen0, 3, "Stop");
     7c6:	f7ff ffcb 	bl	760 <initArrays(char volatile (*) [21], int, char*)>

     7ca:	4628      	mov	r0, r5
     7cc:	4a59      	ldr	r2, [pc, #356]	; (934 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x180>)
     7ce:	2101      	movs	r1, #1
     7d0:	f7ff ffc6 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	//screen1
     7d4:	4628      	mov	r0, r5
     7d6:	4a58      	ldr	r2, [pc, #352]	; (938 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x184>)
     7d8:	2102      	movs	r1, #2
     7da:	f7ff ffc1 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen1, 0, "Sequence Edit");
     7de:	4628      	mov	r0, r5
     7e0:	4a56      	ldr	r2, [pc, #344]	; (93c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x188>)
     7e2:	2103      	movs	r1, #3
     7e4:	f7ff ffbc 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen1, 1, "Pattern:");
	initArrays(initTheScreen->screen1, 2, "Steps:");
	initArrays(initTheScreen->screen1, 3, "Step number:");
     7e8:	4630      	mov	r0, r6
     7ea:	4a55      	ldr	r2, [pc, #340]	; (940 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x18c>)
     7ec:	2100      	movs	r1, #0
     7ee:	f7ff ffb7 	bl	760 <initArrays(char volatile (*) [21], int, char*)>

     7f2:	4630      	mov	r0, r6
     7f4:	4a4f      	ldr	r2, [pc, #316]	; (934 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x180>)
     7f6:	2101      	movs	r1, #1
	//screen2
	initArrays(initTheScreen->screen2, 0, "Track Settings");
	initArrays(initTheScreen->screen2, 1, "Track:");
	initArrays(initTheScreen->screen2, 2, "PlayMode:");
	initArrays(initTheScreen->screen2, 3, "OutRoute:");
     7f8:	f505 74bd 	add.w	r4, r5, #378	; 0x17a
	//screen1
	initArrays(initTheScreen->screen1, 0, "Sequence Edit");
	initArrays(initTheScreen->screen1, 1, "Pattern:");
	initArrays(initTheScreen->screen1, 2, "Steps:");
	initArrays(initTheScreen->screen1, 3, "Step number:");

     7fc:	f7ff ffb0 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	//screen2
     800:	4630      	mov	r0, r6
     802:	4a50      	ldr	r2, [pc, #320]	; (944 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x190>)
     804:	2102      	movs	r1, #2
     806:	f7ff ffab 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen2, 0, "Track Settings");
     80a:	4630      	mov	r0, r6
     80c:	4a4e      	ldr	r2, [pc, #312]	; (948 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x194>)
     80e:	2103      	movs	r1, #3
     810:	f7ff ffa6 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen2, 1, "Track:");
	initArrays(initTheScreen->screen2, 2, "PlayMode:");
	initArrays(initTheScreen->screen2, 3, "OutRoute:");
     814:	4620      	mov	r0, r4
     816:	4a4d      	ldr	r2, [pc, #308]	; (94c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x198>)
     818:	2100      	movs	r1, #0
     81a:	f7ff ffa1 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen2, 4, "EnvelopeMode:");
     81e:	4620      	mov	r0, r4
     820:	4a4b      	ldr	r2, [pc, #300]	; (950 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x19c>)
     822:	2101      	movs	r1, #1
     824:	f7ff ff9c 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen2, 5, "SustainTime:      S");
     828:	4620      	mov	r0, r4
     82a:	4a4a      	ldr	r2, [pc, #296]	; (954 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1a0>)
     82c:	2102      	movs	r1, #2
     82e:	f7ff ff97 	bl	760 <initArrays(char volatile (*) [21], int, char*)>

     832:	4620      	mov	r0, r4
     834:	4a48      	ldr	r2, [pc, #288]	; (958 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1a4>)
     836:	2103      	movs	r1, #3
	//screen3
	initArrays(initTheScreen->screen3, 0, "Global Settings");
	initArrays(initTheScreen->screen3, 1, "Midi Channel:");
	initArrays(initTheScreen->screen3, 2, "Midi trig   :");
	initArrays(initTheScreen->screen3, 3, " ");
     838:	f205 2637 	addw	r6, r5, #567	; 0x237
	initArrays(initTheScreen->screen2, 1, "Track:");
	initArrays(initTheScreen->screen2, 2, "PlayMode:");
	initArrays(initTheScreen->screen2, 3, "OutRoute:");
	initArrays(initTheScreen->screen2, 4, "EnvelopeMode:");
	initArrays(initTheScreen->screen2, 5, "SustainTime:      S");

     83c:	f7ff ff90 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	//screen3
     840:	4620      	mov	r0, r4
     842:	4a46      	ldr	r2, [pc, #280]	; (95c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1a8>)
     844:	2104      	movs	r1, #4
     846:	f7ff ff8b 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen3, 0, "Global Settings");
     84a:	4620      	mov	r0, r4
     84c:	4a44      	ldr	r2, [pc, #272]	; (960 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1ac>)
     84e:	2105      	movs	r1, #5
     850:	f7ff ff86 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->screen3, 1, "Midi Channel:");
	initArrays(initTheScreen->screen3, 2, "Midi trig   :");
	initArrays(initTheScreen->screen3, 3, " ");
     854:	4630      	mov	r0, r6
     856:	4a43      	ldr	r2, [pc, #268]	; (964 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1b0>)
     858:	2100      	movs	r1, #0
     85a:	f7ff ff81 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	
     85e:	4630      	mov	r0, r6
     860:	4a41      	ldr	r2, [pc, #260]	; (968 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1b4>)
     862:	2101      	movs	r1, #1

	//init all of the knob arrays:
	initArrays(initTheScreen->knobScreen, 0, "OutVolume x : xxxdb");//string 0 is outVolume
	initArrays(initTheScreen->knobScreen, 1, "Pitch : xxx");//string 1 is pitch
	initArrays(initTheScreen->knobScreen, 2, "AttackTime  :      S"); //string 2 is Envelope gain
	initArrays(initTheScreen->knobScreen, 3, "ReleaseTimexx:xx xxx"); //string 3 is Envelop Time
     864:	f505 743d 	add.w	r4, r5, #756	; 0x2f4
	//screen3
	initArrays(initTheScreen->screen3, 0, "Global Settings");
	initArrays(initTheScreen->screen3, 1, "Midi Channel:");
	initArrays(initTheScreen->screen3, 2, "Midi trig   :");
	initArrays(initTheScreen->screen3, 3, " ");
	
     868:	f7ff ff7a 	bl	760 <initArrays(char volatile (*) [21], int, char*)>

     86c:	4630      	mov	r0, r6
     86e:	4a3f      	ldr	r2, [pc, #252]	; (96c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1b8>)
     870:	2102      	movs	r1, #2
     872:	f7ff ff75 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	//init all of the knob arrays:
     876:	4630      	mov	r0, r6
     878:	4a3d      	ldr	r2, [pc, #244]	; (970 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1bc>)
     87a:	2103      	movs	r1, #3
     87c:	f7ff ff70 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->knobScreen, 0, "OutVolume x : xxxdb");//string 0 is outVolume
	initArrays(initTheScreen->knobScreen, 1, "Pitch : xxx");//string 1 is pitch
	initArrays(initTheScreen->knobScreen, 2, "AttackTime  :      S"); //string 2 is Envelope gain
	initArrays(initTheScreen->knobScreen, 3, "ReleaseTimexx:xx xxx"); //string 3 is Envelop Time
     880:	4620      	mov	r0, r4
     882:	4a3c      	ldr	r2, [pc, #240]	; (974 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1c0>)
     884:	2100      	movs	r1, #0
     886:	f7ff ff6b 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	initArrays(initTheScreen->knobScreen, 4, "TrackVolume xx:xxxdb"); //string 4 is track Level.
     88a:	4620      	mov	r0, r4
     88c:	4a3a      	ldr	r2, [pc, #232]	; (978 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1c4>)
     88e:	2101      	movs	r1, #1
     890:	f7ff ff66 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	//initArrays(initTheScreen->knobScreen,5,"BPM: ");
     894:	4620      	mov	r0, r4
     896:	4a39      	ldr	r2, [pc, #228]	; (97c <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1c8>)
     898:	2102      	movs	r1, #2
     89a:	f7ff ff61 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	//we might want to put in one of these for BPM, but I'm not sure. 
     89e:	4620      	mov	r0, r4
     8a0:	4a37      	ldr	r2, [pc, #220]	; (980 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1cc>)
     8a2:	2103      	movs	r1, #3
     8a4:	f7ff ff5c 	bl	760 <initArrays(char volatile (*) [21], int, char*)>

     8a8:	4620      	mov	r0, r4
     8aa:	4a36      	ldr	r2, [pc, #216]	; (984 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1d0>)
     8ac:	2104      	movs	r1, #4
     8ae:	f7ff ff57 	bl	760 <initArrays(char volatile (*) [21], int, char*)>
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
	numPrinter(initTheScreen->screen3[1], 14, 2, (currentGlobals->midiChannel) + 1);
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     8b2:	f8b8 30c8 	ldrh.w	r3, [r8, #200]	; 0xc8
     8b6:	f105 002a 	add.w	r0, r5, #42	; 0x2a
     8ba:	2203      	movs	r2, #3
     8bc:	b29b      	uxth	r3, r3
     8be:	2105      	movs	r1, #5
     8c0:	f000 ff00 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
     8c4:	7c7b      	ldrb	r3, [r7, #17]
     8c6:	f505 7013 	add.w	r0, r5, #588	; 0x24c
     8ca:	2202      	movs	r2, #2
     8cc:	3301      	adds	r3, #1
     8ce:	210e      	movs	r1, #14
     8d0:	f000 fef8 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
	numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals->currentStep) + 1);
     8d4:	7a3b      	ldrb	r3, [r7, #8]
     8d6:	f105 0015 	add.w	r0, r5, #21
     8da:	2203      	movs	r2, #3
     8dc:	3301      	adds	r3, #1
     8de:	2109      	movs	r1, #9
     8e0:	f000 fef0 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>

     8e4:	7a3b      	ldrb	r3, [r7, #8]
     8e6:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
     8ea:	2203      	movs	r2, #3
     8ec:	3301      	adds	r3, #1
     8ee:	2109      	movs	r1, #9
     8f0:	f000 fee8 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
	for (uint8_t i = 0; i < 4; i++)
     8f4:	f898 30ca 	ldrb.w	r3, [r8, #202]	; 0xca
     8f8:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
     8fc:	2202      	movs	r2, #2
     8fe:	2107      	movs	r1, #7
     900:	462e      	mov	r6, r5
     902:	f000 fedf 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
	{
     906:	7a7b      	ldrb	r3, [r7, #9]
     908:	f105 00fc 	add.w	r0, r5, #252	; 0xfc
     90c:	2202      	movs	r2, #2
     90e:	3301      	adds	r3, #1
     910:	210d      	movs	r1, #13
     912:	2400      	movs	r4, #0
     914:	f000 fed6 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
		outputS(initTheScreen->screen0[i], i, currentGlobals);
	}
}

     918:	4621      	mov	r1, r4
     91a:	3401      	adds	r4, #1
     91c:	4630      	mov	r0, r6
     91e:	463a      	mov	r2, r7
     920:	f000 fea4 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
	numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals->currentStep) + 1);

	for (uint8_t i = 0; i < 4; i++)
	{
		outputS(initTheScreen->screen0[i], i, currentGlobals);
	}
     924:	2c04      	cmp	r4, #4
     926:	f106 0615 	add.w	r6, r6, #21
     92a:	d1f5      	bne.n	918 <initMenu(Screen volatile*, Pattern volatile*, Globals volatile*)+0x164>
}

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
     92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     930:	2000002c 	.word	0x2000002c
     934:	20000040 	.word	0x20000040
     938:	2000004c 	.word	0x2000004c
     93c:	20000054 	.word	0x20000054
     940:	2000005c 	.word	0x2000005c
     944:	2000006c 	.word	0x2000006c
     948:	20000074 	.word	0x20000074
     94c:	20000084 	.word	0x20000084
     950:	20000094 	.word	0x20000094
     954:	2000009c 	.word	0x2000009c
     958:	200000a8 	.word	0x200000a8
     95c:	200000b4 	.word	0x200000b4
     960:	200000c4 	.word	0x200000c4
     964:	200000d8 	.word	0x200000d8
     968:	200000e8 	.word	0x200000e8
     96c:	200000f8 	.word	0x200000f8
     970:	20000108 	.word	0x20000108
     974:	2000010c 	.word	0x2000010c
     978:	20000120 	.word	0x20000120
     97c:	2000012c 	.word	0x2000012c
     980:	20000144 	.word	0x20000144
     984:	2000015c 	.word	0x2000015c

00000988 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)>:

void updateScreen(volatile Screen* menuScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{

	if ((currentGlobals->valueChangeFlag) & (1 << encoderChange))//check if encoder bit is high
	{
     988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag & (0xFF & (0 << encoderChange));//set encoder bit low, and carry our whatever encoder change has occurred. 
		//we need to debug this to make sure it's doing what we think it's doing.
     98c:	7bd3      	ldrb	r3, [r2, #15]

void updateScreen(volatile Screen* menuScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{

	if ((currentGlobals->valueChangeFlag) & (1 << encoderChange))//check if encoder bit is high
	{
     98e:	460f      	mov	r7, r1
     990:	4614      	mov	r4, r2
     992:	4605      	mov	r5, r0
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag & (0xFF & (0 << encoderChange));//set encoder bit low, and carry our whatever encoder change has occurred. 
		//we need to debug this to make sure it's doing what we think it's doing.
     994:	07d9      	lsls	r1, r3, #31
     996:	d551      	bpl.n	a3c <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xb4>
		switch (currentGlobals->menuState)
		{
     998:	2300      	movs	r3, #0
     99a:	7be2      	ldrb	r2, [r4, #15]
     99c:	73e3      	strb	r3, [r4, #15]
		case PreformanceModeInit: //initial state
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
     99e:	7ae3      	ldrb	r3, [r4, #11]
     9a0:	2b29      	cmp	r3, #41	; 0x29
     9a2:	d848      	bhi.n	a36 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xae>
     9a4:	e8df f013 	tbh	[pc, r3, lsl #1]
     9a8:	0047023e 	.word	0x0047023e
     9ac:	00470047 	.word	0x00470047
     9b0:	00470047 	.word	0x00470047
     9b4:	00470047 	.word	0x00470047
     9b8:	00470047 	.word	0x00470047
     9bc:	00470047 	.word	0x00470047
     9c0:	00470047 	.word	0x00470047
     9c4:	00470047 	.word	0x00470047
     9c8:	01a701d7 	.word	0x01a701d7
     9cc:	01fa0214 	.word	0x01fa0214
     9d0:	00470047 	.word	0x00470047
     9d4:	00470047 	.word	0x00470047
     9d8:	028f0047 	.word	0x028f0047
     9dc:	01b901c8 	.word	0x01b901c8
     9e0:	00470047 	.word	0x00470047
     9e4:	00470047 	.word	0x00470047
     9e8:	002a0220 	.word	0x002a0220
     9ec:	00470047 	.word	0x00470047
     9f0:	00470047 	.word	0x00470047
     9f4:	00470047 	.word	0x00470047
     9f8:	02770047 	.word	0x02770047
     9fc:	f500 78d2 	add.w	r8, r0, #420	; 0x1a4
     a00:	f200 16b9 	addw	r6, r0, #441	; 0x1b9
     a04:	f200 198f 	addw	r9, r0, #399	; 0x18f

		case TrackMenuArrow1:
			menuScreen->screen2[1][19] = 8;
			menuScreen->screen2[2][19] = ' ';
			menuScreen->screen2[3][19] = ' ';
			outputS(menuScreen->screen2[1], 1, currentGlobals);
     a08:	2108      	movs	r1, #8
			outputS(menuScreen->screen2[2], 2, currentGlobals);
     a0a:	2320      	movs	r3, #32
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			break;
     a0c:	4648      	mov	r0, r9
     a0e:	4622      	mov	r2, r4

		case TrackMenuArrow1:
			menuScreen->screen2[1][19] = 8;
			menuScreen->screen2[2][19] = ' ';
			menuScreen->screen2[3][19] = ' ';
			outputS(menuScreen->screen2[1], 1, currentGlobals);
     a10:	f885 11a2 	strb.w	r1, [r5, #418]	; 0x1a2
			outputS(menuScreen->screen2[2], 2, currentGlobals);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			break;
     a14:	2101      	movs	r1, #1
		case TrackMenuArrow1:
			menuScreen->screen2[1][19] = 8;
			menuScreen->screen2[2][19] = ' ';
			menuScreen->screen2[3][19] = ' ';
			outputS(menuScreen->screen2[1], 1, currentGlobals);
			outputS(menuScreen->screen2[2], 2, currentGlobals);
     a16:	f885 31b7 	strb.w	r3, [r5, #439]	; 0x1b7
			outputS(menuScreen->screen2[3], 3, currentGlobals);
     a1a:	f885 31cc 	strb.w	r3, [r5, #460]	; 0x1cc
			break;
     a1e:	f000 fe25 	bl	166c <outputS(char volatile*, int, Globals volatile*)>

     a22:	4622      	mov	r2, r4
     a24:	4640      	mov	r0, r8
     a26:	2102      	movs	r1, #2
     a28:	f000 fe20 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
		case TrackMenuArrow1Select:;
     a2c:	4622      	mov	r2, r4
     a2e:	4630      	mov	r0, r6
     a30:	2103      	movs	r1, #3
     a32:	f000 fe1b 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
			break;
		}
		prevMenuState = currentGlobals->menuState;
	}
	//We should only reach this in track selection and global settings for setting midi notes. 
	if (currentGlobals->valueChangeFlag & (1 << triggerChange))
     a36:	7ae2      	ldrb	r2, [r4, #11]
     a38:	4bd5      	ldr	r3, [pc, #852]	; (d90 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x408>)
     a3a:	701a      	strb	r2, [r3, #0]
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag & (0 << triggerChange); //this is wrong. Will erase all of valueChange Flag. 
		switch ((currentGlobals->menuState) >> 4) //we don't need to worry about what the bottom encoder is doing.  
     a3c:	7be3      	ldrb	r3, [r4, #15]
     a3e:	079a      	lsls	r2, r3, #30
     a40:	d41f      	bmi.n	a82 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xfa>
		}
	}
	if (currentGlobals->valueChangeFlag & (1 << knobChange))
	{
		uint8_t positionSelect = currentGlobals->knobStatus & 0x0F; //this is the bottom 4 bits, for the track location
		uint8_t positionSelectUpper = 0;
     a42:	7be3      	ldrb	r3, [r4, #15]
     a44:	075b      	lsls	r3, r3, #29
     a46:	d51a      	bpl.n	a7e <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xf6>
		if ((currentGlobals->buttonSwitchFlag) & 0x01)
		{
     a48:	f894 8010 	ldrb.w	r8, [r4, #16]
			positionSelectUpper = 8;
		}
     a4c:	7ba2      	ldrb	r2, [r4, #14]


		switch ((currentGlobals->knobStatus) >> 4)
		{
		case 0: //output volume
			if ((currentPattern->outputLevelMSB[positionSelect]) == 0)
     a4e:	f894 9010 	ldrb.w	r9, [r4, #16]
	if (currentGlobals->valueChangeFlag & (1 << knobChange))
	{
		uint8_t positionSelect = currentGlobals->knobStatus & 0x0F; //this is the bottom 4 bits, for the track location
		uint8_t positionSelectUpper = 0;
		if ((currentGlobals->buttonSwitchFlag) & 0x01)
		{
     a52:	f008 080f 	and.w	r8, r8, #15
			positionSelectUpper = 8;
		}
     a56:	f012 0601 	ands.w	r6, r2, #1


		switch ((currentGlobals->knobStatus) >> 4)
		{
		case 0: //output volume
			if ((currentPattern->outputLevelMSB[positionSelect]) == 0)
     a5a:	ea4f 1919 	mov.w	r9, r9, lsr #4
     a5e:	bf18      	it	ne
     a60:	2608      	movne	r6, #8
     a62:	f1b9 0f01 	cmp.w	r9, #1
     a66:	4633      	mov	r3, r6
     a68:	d05d      	beq.n	b26 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x19e>
     a6a:	f1b9 0f02 	cmp.w	r9, #2
     a6e:	f000 80b3 	beq.w	bd8 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x250>
     a72:	f1b9 0f00 	cmp.w	r9, #0
     a76:	d072      	beq.n	b5e <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1d6>
			break;
		}
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag & (0xFF & (0 << knobChange));
	}
}

     a78:	2300      	movs	r3, #0
     a7a:	7be2      	ldrb	r2, [r4, #15]
     a7c:	73e3      	strb	r3, [r4, #15]
     a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (currentGlobals->valueChangeFlag & (1 << triggerChange))
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag & (0 << triggerChange); //this is wrong. Will erase all of valueChange Flag. 
		switch ((currentGlobals->menuState) >> 4) //we don't need to worry about what the bottom encoder is doing.  
		{
		case 2:;
     a82:	2300      	movs	r3, #0
     a84:	7be2      	ldrb	r2, [r4, #15]
     a86:	73e3      	strb	r3, [r4, #15]
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     a88:	7ae6      	ldrb	r6, [r4, #11]
     a8a:	0936      	lsrs	r6, r6, #4
     a8c:	2e02      	cmp	r6, #2
     a8e:	d1d8      	bne.n	a42 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xba>
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack) + 1);
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
     a90:	7aa3      	ldrb	r3, [r4, #10]
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
     a92:	f205 198f 	addw	r9, r5, #399	; 0x18f
     a96:	4632      	mov	r2, r6
     a98:	2107      	movs	r1, #7
		{
		case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack) + 1);
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
     a9a:	443b      	add	r3, r7
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
     a9c:	4648      	mov	r0, r9
		{
		case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack) + 1);
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
     a9e:	f893 a098 	ldrb.w	sl, [r3, #152]	; 0x98
     aa2:	7aa3      	ldrb	r3, [r4, #10]
     aa4:	fa5f fa8a 	uxtb.w	sl, sl
     aa8:	443b      	add	r3, r7
     aaa:	f893 80a8 	ldrb.w	r8, [r3, #168]	; 0xa8
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
     aae:	7aa3      	ldrb	r3, [r4, #10]
		{
		case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack) + 1);
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
     ab0:	fa5f f888 	uxtb.w	r8, r8
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
     ab4:	3301      	adds	r3, #1
     ab6:	f000 fe05 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
			{
     aba:	2204      	movs	r2, #4
     abc:	ea48 230a 	orr.w	r3, r8, sl, lsl #8
     ac0:	4648      	mov	r0, r9
     ac2:	210a      	movs	r1, #10
     ac4:	f000 fdfe 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
			case 0:
				menuScreen->screen2[2][10] = 'S';
     ac8:	7aa3      	ldrb	r3, [r4, #10]
     aca:	443b      	add	r3, r7
     acc:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
     ad0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
     ad4:	2b00      	cmp	r3, #0
     ad6:	f000 8232 	beq.w	f3e <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x5b6>
     ada:	2a01      	cmp	r2, #1
     adc:	d10b      	bne.n	af6 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x16e>

			case 1:
				menuScreen->screen2[2][10] = 'P';
				menuScreen->screen2[2][11] = 'o';
				menuScreen->screen2[2][12] = 'l';
				menuScreen->screen2[2][13] = 'y';
     ade:	2050      	movs	r0, #80	; 0x50
				break;
     ae0:	216f      	movs	r1, #111	; 0x6f

     ae2:	226c      	movs	r2, #108	; 0x6c
				//these additional cases will be for loops and other stuff. have not decided on how to deal with them yet.
     ae4:	2379      	movs	r3, #121	; 0x79

			case 1:
				menuScreen->screen2[2][10] = 'P';
				menuScreen->screen2[2][11] = 'o';
				menuScreen->screen2[2][12] = 'l';
				menuScreen->screen2[2][13] = 'y';
     ae6:	f885 01ae 	strb.w	r0, [r5, #430]	; 0x1ae
				break;
     aea:	f885 11af 	strb.w	r1, [r5, #431]	; 0x1af

     aee:	f885 21b0 	strb.w	r2, [r5, #432]	; 0x1b0
				//these additional cases will be for loops and other stuff. have not decided on how to deal with them yet.
     af2:	f885 31b1 	strb.w	r3, [r5, #433]	; 0x1b1
			}

			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack] + 1));
			switch (currentPattern->envelopeType[currentGlobals->currentTrack])
			{
			case 0: //A/R
     af6:	7aa3      	ldrb	r3, [r4, #10]
     af8:	f205 18b9 	addw	r8, r5, #441	; 0x1b9
     afc:	2202      	movs	r2, #2
     afe:	210a      	movs	r1, #10
     b00:	443b      	add	r3, r7
     b02:	4640      	mov	r0, r8
     b04:	7e1b      	ldrb	r3, [r3, #24]
     b06:	3301      	adds	r3, #1
     b08:	f000 fddc 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
				menuScreen->screen2[4][14] = 'A';
     b0c:	7aa3      	ldrb	r3, [r4, #10]
     b0e:	443b      	add	r3, r7
     b10:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
     b14:	2b03      	cmp	r3, #3
     b16:	f200 8093 	bhi.w	c40 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x2b8>
     b1a:	e8df f013 	tbh	[pc, r3, lsl #1]
     b1e:	0203      	.short	0x0203
     b20:	00870201 	.word	0x00870201
     b24:	01f4      	.short	0x01f4
		case 1: //pitch
			menuScreen->knobScreen[1][5] = positionSelect + 49;
			if (currentPattern->outputPitch[positionSelect] >> 7)
			{
				menuScreen->knobScreen[1][7] = '-';
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect]) ^ 255);
     b26:	4447      	add	r7, r8

		case 1: //pitch
			menuScreen->knobScreen[1][5] = positionSelect + 49;
			if (currentPattern->outputPitch[positionSelect] >> 7)
			{
				menuScreen->knobScreen[1][7] = '-';
     b28:	f108 0831 	add.w	r8, r8, #49	; 0x31
     b2c:	f885 830e 	strb.w	r8, [r5, #782]	; 0x30e
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect]) ^ 255);
     b30:	7c3b      	ldrb	r3, [r7, #16]
     b32:	09db      	lsrs	r3, r3, #7
     b34:	f000 80d3 	beq.w	cde <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x356>
			}
			else
     b38:	232d      	movs	r3, #45	; 0x2d
			{
     b3a:	f205 3609 	addw	r6, r5, #777	; 0x309
     b3e:	2203      	movs	r2, #3
     b40:	2108      	movs	r1, #8
			if (currentPattern->outputPitch[positionSelect] >> 7)
			{
				menuScreen->knobScreen[1][7] = '-';
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect]) ^ 255);
			}
			else
     b42:	f885 3310 	strb.w	r3, [r5, #784]	; 0x310
			{
     b46:	4630      	mov	r0, r6
     b48:	7c3b      	ldrb	r3, [r7, #16]
     b4a:	43db      	mvns	r3, r3
     b4c:	b2db      	uxtb	r3, r3
     b4e:	f000 fdb9 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
				numPrinter(menuScreen->knobScreen[1], 8, 3, currentPattern->outputPitch[positionSelect]);
			}
			outputS(menuScreen->knobScreen[1], 3, currentGlobals);
			break;

		case 2:; //attack envelope 
     b52:	4630      	mov	r0, r6
     b54:	4622      	mov	r2, r4
     b56:	2103      	movs	r1, #3
     b58:	f000 fd88 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect + positionSelectUpper] | ((currentPattern->trackAttackTimeMSB[positionSelect + positionSelectUpper]) << 8);
     b5c:	e78c      	b.n	a78 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xf0>
		{
		case 0: //output volume
			if ((currentPattern->outputLevelMSB[positionSelect]) == 0)
			{ //value is positive
				menuScreen->knobScreen[0][14] = ' ';
				numPrinter(menuScreen->knobScreen[0], 15, 2, currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
     b5e:	f817 3008 	ldrb.w	r3, [r7, r8]
			}
			else
			{
     b62:	4447      	add	r7, r8
		{
		case 0: //output volume
			if ((currentPattern->outputLevelMSB[positionSelect]) == 0)
			{ //value is positive
				menuScreen->knobScreen[0][14] = ' ';
				numPrinter(menuScreen->knobScreen[0], 15, 2, currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
     b64:	2b00      	cmp	r3, #0
     b66:	f000 81f6 	beq.w	f56 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x5ce>
			else
			{
				menuScreen->knobScreen[0][14] = '-';
				menuScreen->knobScreen[0][15] = ((((currentPattern->outputLevelLSB[positionSelect] ^ 255) + 1) % 100) / 10) + 48; //negative 8 bit numbers: flip every bit and add 1.
				menuScreen->knobScreen[0][16] = (((currentPattern->outputLevelLSB[positionSelect] ^ 255) + 1) % 10) + 48;
			}
     b6a:	222d      	movs	r2, #45	; 0x2d

     b6c:	4989      	ldr	r1, [pc, #548]	; (d94 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x40c>)
     b6e:	2364      	movs	r3, #100	; 0x64
     b70:	f505 793d 	add.w	r9, r5, #756	; 0x2f4
			else
			{
				menuScreen->knobScreen[0][14] = '-';
				menuScreen->knobScreen[0][15] = ((((currentPattern->outputLevelLSB[positionSelect] ^ 255) + 1) % 100) / 10) + 48; //negative 8 bit numbers: flip every bit and add 1.
				menuScreen->knobScreen[0][16] = (((currentPattern->outputLevelLSB[positionSelect] ^ 255) + 1) % 10) + 48;
			}
     b74:	f885 2302 	strb.w	r2, [r5, #770]	; 0x302

     b78:	7a38      	ldrb	r0, [r7, #8]
     b7a:	43c0      	mvns	r0, r0
     b7c:	b2c0      	uxtb	r0, r0
     b7e:	3001      	adds	r0, #1
     b80:	fb81 2100 	smull	r2, r1, r1, r0
     b84:	17c2      	asrs	r2, r0, #31
     b86:	ebc2 1161 	rsb	r1, r2, r1, asr #5
     b8a:	4a83      	ldr	r2, [pc, #524]	; (d98 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x410>)
     b8c:	fb03 0311 	mls	r3, r3, r1, r0
     b90:	fb82 0103 	smull	r0, r1, r2, r3
     b94:	17db      	asrs	r3, r3, #31
     b96:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
     b9a:	3330      	adds	r3, #48	; 0x30
     b9c:	b2db      	uxtb	r3, r3
     b9e:	f885 3303 	strb.w	r3, [r5, #771]	; 0x303
			menuScreen->knobScreen[0][10] = positionSelect + 49;
     ba2:	7a3b      	ldrb	r3, [r7, #8]
     ba4:	43db      	mvns	r3, r3
     ba6:	b2db      	uxtb	r3, r3
     ba8:	3301      	adds	r3, #1
     baa:	fb82 1203 	smull	r1, r2, r2, r3
     bae:	17d9      	asrs	r1, r3, #31
     bb0:	ebc1 02a2 	rsb	r2, r1, r2, asr #2
     bb4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     bb8:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
     bbc:	3330      	adds	r3, #48	; 0x30
     bbe:	b2db      	uxtb	r3, r3
     bc0:	f885 3304 	strb.w	r3, [r5, #772]	; 0x304
			outputS(menuScreen->knobScreen[0], 3, currentGlobals);
			break;

     bc4:	f108 0831 	add.w	r8, r8, #49	; 0x31
		case 1: //pitch
     bc8:	4648      	mov	r0, r9
     bca:	4622      	mov	r2, r4
     bcc:	2103      	movs	r1, #3
			}

			menuScreen->knobScreen[0][10] = positionSelect + 49;
			outputS(menuScreen->knobScreen[0], 3, currentGlobals);
			break;

     bce:	f885 82fe 	strb.w	r8, [r5, #766]	; 0x2fe
		case 1: //pitch
     bd2:	f000 fd4b 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
			menuScreen->knobScreen[1][5] = positionSelect + 49;
     bd6:	e74f      	b.n	a78 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xf0>

		case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect + positionSelectUpper] | ((currentPattern->trackAttackTimeMSB[positionSelect + positionSelectUpper]) << 8);
			numPrinter(menuScreen->knobScreen[2], 14, 5, totalAttackTime);
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
     bd8:	4443      	add	r3, r8
			menuScreen->knobScreen[2][15] = '.';
     bda:	f205 3a1e 	addw	sl, r5, #798	; 0x31e
     bde:	2205      	movs	r2, #5
     be0:	210e      	movs	r1, #14

		case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect + positionSelectUpper] | ((currentPattern->trackAttackTimeMSB[positionSelect + positionSelectUpper]) << 8);
			numPrinter(menuScreen->knobScreen[2], 14, 5, totalAttackTime);
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
     be2:	441f      	add	r7, r3
			menuScreen->knobScreen[2][15] = '.';
     be4:	4650      	mov	r0, sl

		case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect + positionSelectUpper] | ((currentPattern->trackAttackTimeMSB[positionSelect + positionSelectUpper]) << 8);
			numPrinter(menuScreen->knobScreen[2], 14, 5, totalAttackTime);
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
     be6:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
     bea:	f897 7048 	ldrb.w	r7, [r7, #72]	; 0x48
			menuScreen->knobScreen[2][15] = '.';
     bee:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
			numPrinter(menuScreen->knobScreen[2], 10, 2, (positionSelect + 1 + positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3, currentGlobals); //This is not MS, but ideal for testing it Attack really works. 
			break;
     bf2:	272e      	movs	r7, #46	; 0x2e
		case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect + positionSelectUpper] | ((currentPattern->trackAttackTimeMSB[positionSelect + positionSelectUpper]) << 8);
			numPrinter(menuScreen->knobScreen[2], 14, 5, totalAttackTime);
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
			menuScreen->knobScreen[2][15] = '.';
     bf4:	f000 fd66 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
			numPrinter(menuScreen->knobScreen[2], 10, 2, (positionSelect + 1 + positionSelectUpper));
     bf8:	f895 132c 	ldrb.w	r1, [r5, #812]	; 0x32c
			outputS(menuScreen->knobScreen[2], 3, currentGlobals); //This is not MS, but ideal for testing it Attack really works. 
			break;

     bfc:	eb08 0306 	add.w	r3, r8, r6
     c00:	464a      	mov	r2, r9
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect + positionSelectUpper] | ((currentPattern->trackAttackTimeMSB[positionSelect + positionSelectUpper]) << 8);
			numPrinter(menuScreen->knobScreen[2], 14, 5, totalAttackTime);
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
			menuScreen->knobScreen[2][15] = '.';
			numPrinter(menuScreen->knobScreen[2], 10, 2, (positionSelect + 1 + positionSelectUpper));
     c02:	b2c9      	uxtb	r1, r1
			outputS(menuScreen->knobScreen[2], 3, currentGlobals); //This is not MS, but ideal for testing it Attack really works. 
			break;

     c04:	4650      	mov	r0, sl
     c06:	3301      	adds	r3, #1
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect + positionSelectUpper] | ((currentPattern->trackAttackTimeMSB[positionSelect + positionSelectUpper]) << 8);
			numPrinter(menuScreen->knobScreen[2], 14, 5, totalAttackTime);
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
			menuScreen->knobScreen[2][15] = '.';
			numPrinter(menuScreen->knobScreen[2], 10, 2, (positionSelect + 1 + positionSelectUpper));
     c08:	f885 132b 	strb.w	r1, [r5, #811]	; 0x32b
			outputS(menuScreen->knobScreen[2], 3, currentGlobals); //This is not MS, but ideal for testing it Attack really works. 
			break;

     c0c:	210a      	movs	r1, #10
			numPrinter(menuScreen->knobScreen[2], 14, 5, totalAttackTime);
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
			menuScreen->knobScreen[2][15] = '.';
			numPrinter(menuScreen->knobScreen[2], 10, 2, (positionSelect + 1 + positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3, currentGlobals); //This is not MS, but ideal for testing it Attack really works. 
     c0e:	f895 632d 	ldrb.w	r6, [r5, #813]	; 0x32d
     c12:	b2f6      	uxtb	r6, r6
     c14:	f885 632c 	strb.w	r6, [r5, #812]	; 0x32c
			break;
     c18:	f885 732d 	strb.w	r7, [r5, #813]	; 0x32d

     c1c:	f000 fd52 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
		case 3:; //release envelope
     c20:	4622      	mov	r2, r4
     c22:	4650      	mov	r0, sl
     c24:	2103      	movs	r1, #3
     c26:	f000 fd21 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect + positionSelectUpper] | ((currentPattern->trackReleaseTimeMSB[positionSelect + positionSelectUpper]) << 8);
     c2a:	e725      	b.n	a78 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xf0>

			case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
				menuScreen->screen2[4][15] = ' ';
				menuScreen->screen2[4][16] = ' ';
				menuScreen->screen2[4][17] = ' ';
     c2c:	2241      	movs	r2, #65	; 0x41
				break;
     c2e:	2320      	movs	r3, #32

			case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
				menuScreen->screen2[4][15] = ' ';
				menuScreen->screen2[4][16] = ' ';
				menuScreen->screen2[4][17] = ' ';
     c30:	f885 21dc 	strb.w	r2, [r5, #476]	; 0x1dc
				break;
     c34:	f885 31dd 	strb.w	r3, [r5, #477]	; 0x1dd

     c38:	f885 31de 	strb.w	r3, [r5, #478]	; 0x1de
			case 3: //No envelope
     c3c:	f885 31df 	strb.w	r3, [r5, #479]	; 0x1df
				break;
			}
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] | ((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack]) << 8);
			numPrinter(menuScreen->screen2[5], 13, 5, totalSustainTime);
			menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
			menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
     c40:	7aa3      	ldrb	r3, [r4, #10]
			menuScreen->screen2[5][14] = '.';
     c42:	2205      	movs	r2, #5
     c44:	210d      	movs	r1, #13
     c46:	f205 10e3 	addw	r0, r5, #483	; 0x1e3
				break;
			}
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] | ((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack]) << 8);
			numPrinter(menuScreen->screen2[5], 13, 5, totalSustainTime);
			menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
			menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
     c4a:	443b      	add	r3, r7
     c4c:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
     c50:	f894 e00a 	ldrb.w	lr, [r4, #10]
     c54:	44be      	add	lr, r7
     c56:	f89e e0cb 	ldrb.w	lr, [lr, #203]	; 0xcb
			menuScreen->screen2[5][14] = '.';
     c5a:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
     c5e:	f000 fd31 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
			//the track settings screens should now be populated
     c62:	f895 31f0 	ldrb.w	r3, [r5, #496]	; 0x1f0


     c66:	222e      	movs	r2, #46	; 0x2e
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] | ((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack]) << 8);
			numPrinter(menuScreen->screen2[5], 13, 5, totalSustainTime);
			menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
			menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
			menuScreen->screen2[5][14] = '.';
			//the track settings screens should now be populated
     c68:	b2db      	uxtb	r3, r3
     c6a:	f885 31ef 	strb.w	r3, [r5, #495]	; 0x1ef

     c6e:	f895 31f1 	ldrb.w	r3, [r5, #497]	; 0x1f1
     c72:	b2db      	uxtb	r3, r3
     c74:	f885 31f0 	strb.w	r3, [r5, #496]	; 0x1f0

     c78:	f885 21f1 	strb.w	r2, [r5, #497]	; 0x1f1
			uint8_t triggerChangeScreen = 1;

			if (((currentGlobals->menuState) & selectBit) > 35) //this accounts for menu stats 36,37,44, and 45
			{
				triggerChangeScreen = ((currentGlobals->menuState) & selectBit) - 34; //mask to get rid of encoder B pushed state. 
			}
     c7c:	7ae3      	ldrb	r3, [r4, #11]
     c7e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
     c82:	2b23      	cmp	r3, #35	; 0x23
     c84:	d915      	bls.n	cb2 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x32a>

			outputS(menuScreen->screen2[triggerChangeScreen], 1, currentGlobals);
     c86:	7ae6      	ldrb	r6, [r4, #11]
     c88:	f006 06f7 	and.w	r6, r6, #247	; 0xf7
     c8c:	3e22      	subs	r6, #34	; 0x22
     c8e:	b2f6      	uxtb	r6, r6
     c90:	f106 0802 	add.w	r8, r6, #2
     c94:	eb06 0946 	add.w	r9, r6, r6, lsl #1
     c98:	3601      	adds	r6, #1
     c9a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
     c9e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
     ca2:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
     ca6:	44a9      	add	r9, r5
     ca8:	44a8      	add	r8, r5
     caa:	f509 79bd 	add.w	r9, r9, #378	; 0x17a
     cae:	f508 78bd 	add.w	r8, r8, #378	; 0x17a
			outputS(menuScreen->screen2[triggerChangeScreen + 1], 2, currentGlobals);
			outputS(menuScreen->screen2[triggerChangeScreen + 2], 3, currentGlobals);

			break;
     cb2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
			}

			outputS(menuScreen->screen2[triggerChangeScreen], 1, currentGlobals);
			outputS(menuScreen->screen2[triggerChangeScreen + 1], 2, currentGlobals);
			outputS(menuScreen->screen2[triggerChangeScreen + 2], 3, currentGlobals);

     cb6:	4648      	mov	r0, r9
     cb8:	4622      	mov	r2, r4
     cba:	2101      	movs	r1, #1
			break;
     cbc:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
			}

			outputS(menuScreen->screen2[triggerChangeScreen], 1, currentGlobals);
			outputS(menuScreen->screen2[triggerChangeScreen + 1], 2, currentGlobals);
			outputS(menuScreen->screen2[triggerChangeScreen + 2], 3, currentGlobals);

     cc0:	f000 fcd4 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
			break;
     cc4:	4622      	mov	r2, r4
     cc6:	19a8      	adds	r0, r5, r6
     cc8:	2102      	movs	r1, #2
     cca:	f500 70bd 	add.w	r0, r0, #378	; 0x17a
     cce:	f000 fccd 	bl	166c <outputS(char volatile*, int, Globals volatile*)>

     cd2:	4622      	mov	r2, r4
     cd4:	4640      	mov	r0, r8
     cd6:	2103      	movs	r1, #3
     cd8:	f000 fcc8 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
		case 3:;
			//do we need this variable?
     cdc:	e6b1      	b.n	a42 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xba>
			else
			{
				menuScreen->knobScreen[1][7] = '+';
				numPrinter(menuScreen->knobScreen[1], 8, 3, currentPattern->outputPitch[positionSelect]);
			}
			outputS(menuScreen->knobScreen[1], 3, currentGlobals);
     cde:	232b      	movs	r3, #43	; 0x2b
			break;
     ce0:	f205 3609 	addw	r6, r5, #777	; 0x309
     ce4:	2203      	movs	r2, #3
     ce6:	2108      	movs	r1, #8
			else
			{
				menuScreen->knobScreen[1][7] = '+';
				numPrinter(menuScreen->knobScreen[1], 8, 3, currentPattern->outputPitch[positionSelect]);
			}
			outputS(menuScreen->knobScreen[1], 3, currentGlobals);
     ce8:	f885 3310 	strb.w	r3, [r5, #784]	; 0x310
			break;
     cec:	4630      	mov	r0, r6
     cee:	7c3b      	ldrb	r3, [r7, #16]
     cf0:	f000 fce8 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
     cf4:	e72d      	b.n	b52 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x1ca>
     cf6:	f100 09d2 	add.w	r9, r0, #210	; 0xd2
     cfa:	f100 08e7 	add.w	r8, r0, #231	; 0xe7
     cfe:	f100 06fc 	add.w	r6, r0, #252	; 0xfc

		case SequencerMenuArrow1:
			menuScreen->screen1[1][19] = 8;
			menuScreen->screen1[2][19] = ' ';
			menuScreen->screen1[3][19] = ' ';
			outputS(menuScreen->screen1[1], 1, currentGlobals);
     d02:	2108      	movs	r1, #8
			outputS(menuScreen->screen1[2], 2, currentGlobals);
     d04:	2320      	movs	r3, #32
			outputS(menuScreen->screen1[3], 3, currentGlobals);
			break;
     d06:	4648      	mov	r0, r9
     d08:	4622      	mov	r2, r4

		case SequencerMenuArrow1:
			menuScreen->screen1[1][19] = 8;
			menuScreen->screen1[2][19] = ' ';
			menuScreen->screen1[3][19] = ' ';
			outputS(menuScreen->screen1[1], 1, currentGlobals);
     d0a:	f885 10e5 	strb.w	r1, [r5, #229]	; 0xe5
			outputS(menuScreen->screen1[2], 2, currentGlobals);
			outputS(menuScreen->screen1[3], 3, currentGlobals);
			break;
     d0e:	2101      	movs	r1, #1
		case SequencerMenuArrow1:
			menuScreen->screen1[1][19] = 8;
			menuScreen->screen1[2][19] = ' ';
			menuScreen->screen1[3][19] = ' ';
			outputS(menuScreen->screen1[1], 1, currentGlobals);
			outputS(menuScreen->screen1[2], 2, currentGlobals);
     d10:	f885 30fa 	strb.w	r3, [r5, #250]	; 0xfa
			outputS(menuScreen->screen1[3], 3, currentGlobals);
     d14:	f885 310f 	strb.w	r3, [r5, #271]	; 0x10f
     d18:	e681      	b.n	a1e <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x96>

		case SequencerMenuArrow3Select:
			numPrinter(menuScreen->screen1[3], 14, 2, (currentGlobals->currentStep) + 1); //these are 0 indexed, so we need to add 1 to the display.
			outputS(menuScreen->screen1[3], 3, currentGlobals);
			break;

     d1a:	f100 06fc 	add.w	r6, r0, #252	; 0xfc
     d1e:	7a63      	ldrb	r3, [r4, #9]
     d20:	2202      	movs	r2, #2
     d22:	210e      	movs	r1, #14
     d24:	4630      	mov	r0, r6
     d26:	3301      	adds	r3, #1
     d28:	f000 fccc 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>

     d2c:	4622      	mov	r2, r4
     d2e:	4630      	mov	r0, r6
     d30:	2103      	movs	r1, #3
     d32:	f000 fc9b 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
		case TrackMenuInit:
     d36:	e67e      	b.n	a36 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xae>

		case SequencerMenuArrow2Select:
			numPrinter(menuScreen->screen1[2], 7, 2, currentPattern->numSteps);
			outputS(menuScreen->screen1[2], 2, currentGlobals);
			break;

     d38:	f100 06e7 	add.w	r6, r0, #231	; 0xe7
     d3c:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
     d40:	2202      	movs	r2, #2
     d42:	2107      	movs	r1, #7
     d44:	4630      	mov	r0, r6
     d46:	f000 fcbd 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
		case SequencerMenuArrow3:
     d4a:	4622      	mov	r2, r4
     d4c:	4630      	mov	r0, r6
     d4e:	2102      	movs	r1, #2
     d50:	f000 fc8c 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
			menuScreen->screen1[1][19] = ' ';
     d54:	e66f      	b.n	a36 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xae>
		case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0, currentGlobals);
			outputS(menuScreen->screen1[1], 1, currentGlobals);
			outputS(menuScreen->screen1[2], 2, currentGlobals);
			outputS(menuScreen->screen1[3], 3, currentGlobals);
			currentGlobals->menuState = SequencerMenuArrow1;
     d56:	f100 09d2 	add.w	r9, r0, #210	; 0xd2

		case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0, currentGlobals);
			outputS(menuScreen->screen1[1], 1, currentGlobals);
			outputS(menuScreen->screen1[2], 2, currentGlobals);
			outputS(menuScreen->screen1[3], 3, currentGlobals);
     d5a:	4622      	mov	r2, r4
     d5c:	2100      	movs	r1, #0
     d5e:	30bd      	adds	r0, #189	; 0xbd
			currentGlobals->menuState = SequencerMenuArrow1;

     d60:	f105 08e7 	add.w	r8, r5, #231	; 0xe7

		case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0, currentGlobals);
			outputS(menuScreen->screen1[1], 1, currentGlobals);
			outputS(menuScreen->screen1[2], 2, currentGlobals);
			outputS(menuScreen->screen1[3], 3, currentGlobals);
     d64:	f000 fc82 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
			currentGlobals->menuState = SequencerMenuArrow1;


     d68:	f105 06fc 	add.w	r6, r5, #252	; 0xfc
		case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0, currentGlobals);
			outputS(menuScreen->screen1[1], 1, currentGlobals);
			outputS(menuScreen->screen1[2], 2, currentGlobals);
			outputS(menuScreen->screen1[3], 3, currentGlobals);
			currentGlobals->menuState = SequencerMenuArrow1;
     d6c:	4648      	mov	r0, r9
     d6e:	4622      	mov	r2, r4
     d70:	2101      	movs	r1, #1
     d72:	f000 fc7b 	bl	166c <outputS(char volatile*, int, Globals volatile*)>

     d76:	4640      	mov	r0, r8
     d78:	4622      	mov	r2, r4
     d7a:	2102      	movs	r1, #2
     d7c:	f000 fc76 	bl	166c <outputS(char volatile*, int, Globals volatile*)>

     d80:	4630      	mov	r0, r6
     d82:	4622      	mov	r2, r4
     d84:	2103      	movs	r1, #3
     d86:	f000 fc71 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
		case SequencerMenuArrow1:
     d8a:	2311      	movs	r3, #17
     d8c:	72e3      	strb	r3, [r4, #11]
     d8e:	e7b8      	b.n	d02 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x37a>
     d90:	20001885 	.word	0x20001885
     d94:	51eb851f 	.word	0x51eb851f
     d98:	66666667 	.word	0x66666667

		case SequencerMenuArrow3:
			menuScreen->screen1[1][19] = ' ';
			menuScreen->screen1[2][19] = ' ';
			menuScreen->screen1[3][19] = 8;
			outputS(menuScreen->screen1[1], 1, currentGlobals);
     d9c:	2320      	movs	r3, #32
			outputS(menuScreen->screen1[2], 2, currentGlobals);
			outputS(menuScreen->screen1[3], 3, currentGlobals);
     d9e:	2608      	movs	r6, #8
			break;
     da0:	4622      	mov	r2, r4
     da2:	2101      	movs	r1, #1

		case SequencerMenuArrow3:
			menuScreen->screen1[1][19] = ' ';
			menuScreen->screen1[2][19] = ' ';
			menuScreen->screen1[3][19] = 8;
			outputS(menuScreen->screen1[1], 1, currentGlobals);
     da4:	f880 30e5 	strb.w	r3, [r0, #229]	; 0xe5
			outputS(menuScreen->screen1[2], 2, currentGlobals);
			outputS(menuScreen->screen1[3], 3, currentGlobals);
			break;
     da8:	30d2      	adds	r0, #210	; 0xd2
		case SequencerMenuArrow3:
			menuScreen->screen1[1][19] = ' ';
			menuScreen->screen1[2][19] = ' ';
			menuScreen->screen1[3][19] = 8;
			outputS(menuScreen->screen1[1], 1, currentGlobals);
			outputS(menuScreen->screen1[2], 2, currentGlobals);
     daa:	f885 30fa 	strb.w	r3, [r5, #250]	; 0xfa
			outputS(menuScreen->screen1[3], 3, currentGlobals);
     dae:	f885 610f 	strb.w	r6, [r5, #271]	; 0x10f
			break;
     db2:	f000 fc5b 	bl	166c <outputS(char volatile*, int, Globals volatile*)>

     db6:	4622      	mov	r2, r4
     db8:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
     dbc:	2102      	movs	r1, #2
     dbe:	f000 fc55 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
		case SequencerMenuArrow3Select:
     dc2:	4622      	mov	r2, r4
     dc4:	2103      	movs	r1, #3
     dc6:	f105 00fc 	add.w	r0, r5, #252	; 0xfc
     dca:	f000 fc4f 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
			numPrinter(menuScreen->screen1[3], 14, 2, (currentGlobals->currentStep) + 1); //these are 0 indexed, so we need to add 1 to the display.
     dce:	e632      	b.n	a36 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xae>

		case SequencerMenuArrow2:
			menuScreen->screen1[1][19] = ' ';
			menuScreen->screen1[2][19] = 8;
			menuScreen->screen1[3][19] = ' ';
			outputS(menuScreen->screen1[1], 1, currentGlobals);
     dd0:	2320      	movs	r3, #32
			outputS(menuScreen->screen1[2], 2, currentGlobals);
     dd2:	2608      	movs	r6, #8
			outputS(menuScreen->screen1[3], 3, currentGlobals);
			break;
     dd4:	4622      	mov	r2, r4
     dd6:	2101      	movs	r1, #1

		case SequencerMenuArrow2:
			menuScreen->screen1[1][19] = ' ';
			menuScreen->screen1[2][19] = 8;
			menuScreen->screen1[3][19] = ' ';
			outputS(menuScreen->screen1[1], 1, currentGlobals);
     dd8:	f880 30e5 	strb.w	r3, [r0, #229]	; 0xe5
			outputS(menuScreen->screen1[2], 2, currentGlobals);
			outputS(menuScreen->screen1[3], 3, currentGlobals);
			break;
     ddc:	30d2      	adds	r0, #210	; 0xd2
		case SequencerMenuArrow2:
			menuScreen->screen1[1][19] = ' ';
			menuScreen->screen1[2][19] = 8;
			menuScreen->screen1[3][19] = ' ';
			outputS(menuScreen->screen1[1], 1, currentGlobals);
			outputS(menuScreen->screen1[2], 2, currentGlobals);
     dde:	f885 60fa 	strb.w	r6, [r5, #250]	; 0xfa
			outputS(menuScreen->screen1[3], 3, currentGlobals);
     de2:	f885 310f 	strb.w	r3, [r5, #271]	; 0x10f
     de6:	e7e4      	b.n	db2 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x42a>
		case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0, currentGlobals);
			outputS(menuScreen->screen2[1], 1, currentGlobals);
			outputS(menuScreen->screen2[2], 2, currentGlobals);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			currentGlobals->menuState = TrackMenuArrow1;
     de8:	f200 198f 	addw	r9, r0, #399	; 0x18f

		case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0, currentGlobals);
			outputS(menuScreen->screen2[1], 1, currentGlobals);
			outputS(menuScreen->screen2[2], 2, currentGlobals);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
     dec:	4622      	mov	r2, r4
     dee:	2100      	movs	r1, #0
     df0:	f500 70bd 	add.w	r0, r0, #378	; 0x17a
			currentGlobals->menuState = TrackMenuArrow1;

     df4:	f505 78d2 	add.w	r8, r5, #420	; 0x1a4

		case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0, currentGlobals);
			outputS(menuScreen->screen2[1], 1, currentGlobals);
			outputS(menuScreen->screen2[2], 2, currentGlobals);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
     df8:	f000 fc38 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
			currentGlobals->menuState = TrackMenuArrow1;

		case TrackMenuArrow1:
     dfc:	f205 16b9 	addw	r6, r5, #441	; 0x1b9
		case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0, currentGlobals);
			outputS(menuScreen->screen2[1], 1, currentGlobals);
			outputS(menuScreen->screen2[2], 2, currentGlobals);
			outputS(menuScreen->screen2[3], 3, currentGlobals);
			currentGlobals->menuState = TrackMenuArrow1;
     e00:	4648      	mov	r0, r9
     e02:	4622      	mov	r2, r4
     e04:	2101      	movs	r1, #1
     e06:	f000 fc31 	bl	166c <outputS(char volatile*, int, Globals volatile*)>

     e0a:	4640      	mov	r0, r8
     e0c:	4622      	mov	r2, r4
     e0e:	2102      	movs	r1, #2
     e10:	f000 fc2c 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
		case TrackMenuArrow1:
     e14:	4630      	mov	r0, r6
     e16:	4622      	mov	r2, r4
     e18:	2103      	movs	r1, #3
     e1a:	f000 fc27 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
			menuScreen->screen2[1][19] = 8;
     e1e:	2321      	movs	r3, #33	; 0x21
     e20:	72e3      	strb	r3, [r4, #11]
     e22:	e5f1      	b.n	a08 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x80>
void reInitMenuOnLoad(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     e24:	f100 062a 	add.w	r6, r0, #42	; 0x2a
     e28:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
     e2c:	2203      	movs	r2, #3
     e2e:	2105      	movs	r1, #5
     e30:	4630      	mov	r0, r6
     e32:	b29b      	uxth	r3, r3
     e34:	f000 fc46 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
}
     e38:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
     e3c:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
     e40:	2202      	movs	r2, #2
     e42:	2107      	movs	r1, #7

void updateScreen(volatile Screen* menuScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
     e44:	f105 0815 	add.w	r8, r5, #21
{
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
}
     e48:	f000 fc3c 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>

     e4c:	7a23      	ldrb	r3, [r4, #8]
     e4e:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
     e52:	2203      	movs	r2, #3
     e54:	2109      	movs	r1, #9
     e56:	3301      	adds	r3, #1
     e58:	f000 fc34 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
void updateScreen(volatile Screen* menuScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
     e5c:	7a23      	ldrb	r3, [r4, #8]
     e5e:	4640      	mov	r0, r8
     e60:	2203      	movs	r2, #3
     e62:	3301      	adds	r3, #1
     e64:	2109      	movs	r1, #9
     e66:	f000 fc2d 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
		case PreformanceModeInit: //initial state
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
			outputS(menuScreen->screen0[0], 0, currentGlobals);
			outputS(menuScreen->screen0[1], 1, currentGlobals);
			outputS(menuScreen->screen0[2], 2, currentGlobals);
			outputS(menuScreen->screen0[3], 3, currentGlobals);
     e6a:	4622      	mov	r2, r4
     e6c:	4628      	mov	r0, r5
     e6e:	2100      	movs	r1, #0
     e70:	f000 fbfc 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
			break;
     e74:	4622      	mov	r2, r4
     e76:	4640      	mov	r0, r8
     e78:	2101      	movs	r1, #1
     e7a:	f000 fbf7 	bl	166c <outputS(char volatile*, int, Globals volatile*)>

     e7e:	4622      	mov	r2, r4
     e80:	4630      	mov	r0, r6
     e82:	2102      	movs	r1, #2
     e84:	f000 fbf2 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
		case SequencerMenuInit:
     e88:	4622      	mov	r2, r4
     e8a:	2103      	movs	r1, #3
     e8c:	f105 003f 	add.w	r0, r5, #63	; 0x3f
     e90:	f000 fbec 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
			outputS(menuScreen->screen1[0], 0, currentGlobals);
     e94:	e5cf      	b.n	a36 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xae>

		case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
			numPrinter(menuScreen->screen2[1], 10, 4, (trackSample));
			outputS(menuScreen->screen2[1], 1, currentGlobals);
			break;
     e96:	7aa3      	ldrb	r3, [r4, #10]

     e98:	f200 168f 	addw	r6, r0, #399	; 0x18f
     e9c:	2204      	movs	r2, #4
     e9e:	210a      	movs	r1, #10

		case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
			numPrinter(menuScreen->screen2[1], 10, 4, (trackSample));
			outputS(menuScreen->screen2[1], 1, currentGlobals);
			break;
     ea0:	443b      	add	r3, r7

     ea2:	4630      	mov	r0, r6

		case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack] << 8) | (currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
			numPrinter(menuScreen->screen2[1], 10, 4, (trackSample));
			outputS(menuScreen->screen2[1], 1, currentGlobals);
			break;
     ea4:	f893 c098 	ldrb.w	ip, [r3, #152]	; 0x98
     ea8:	f894 e00a 	ldrb.w	lr, [r4, #10]
     eac:	44be      	add	lr, r7
     eae:	f89e 30a8 	ldrb.w	r3, [lr, #168]	; 0xa8

     eb2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
     eb6:	f000 fc05 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
		case TrackMenuArrow2:
     eba:	4622      	mov	r2, r4
     ebc:	4630      	mov	r0, r6
     ebe:	2101      	movs	r1, #1
     ec0:	f000 fbd4 	bl	166c <outputS(char volatile*, int, Globals volatile*)>
			menuScreen->screen2[1][19] = ' ';
     ec4:	e5b7      	b.n	a36 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0xae>
void reInitMenuOnLoad(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     ec6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
     eca:	2203      	movs	r2, #3
     ecc:	2105      	movs	r1, #5
     ece:	302a      	adds	r0, #42	; 0x2a
     ed0:	b29b      	uxth	r3, r3
}

     ed2:	f105 06d2 	add.w	r6, r5, #210	; 0xd2
void reInitMenuOnLoad(volatile Screen* initTheScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
{
	numPrinter(initTheScreen->screen0[2], 5, 3, currentPattern->patternBPM);
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
	numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
	numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals->currentPatternNumber) + 1);
     ed6:	f000 fbf5 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
}
     eda:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
     ede:	2202      	movs	r2, #2
     ee0:	2107      	movs	r1, #7
     ee2:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
     ee6:	f000 fbed 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>

     eea:	7a23      	ldrb	r3, [r4, #8]
     eec:	4630      	mov	r0, r6
     eee:	2203      	movs	r2, #3
     ef0:	3301      	adds	r3, #1
     ef2:	2109      	movs	r1, #9
     ef4:	f000 fbe6 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
void updateScreen(volatile Screen* menuScreen, volatile Pattern* currentPattern, volatile Globals* currentGlobals)
     ef8:	7a23      	ldrb	r3, [r4, #8]
     efa:	2203      	movs	r2, #3
     efc:	2109      	movs	r1, #9
     efe:	3301      	adds	r3, #1
     f00:	f105 0015 	add.w	r0, r5, #21
     f04:	e7d7      	b.n	eb6 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x52e>

			case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
				menuScreen->screen2[4][15] = 'o';
				menuScreen->screen2[4][16] = 'n';
				menuScreen->screen2[4][17] = 'e';
     f06:	204e      	movs	r0, #78	; 0x4e
				break;
     f08:	216f      	movs	r1, #111	; 0x6f
			}
     f0a:	226e      	movs	r2, #110	; 0x6e
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] | ((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack]) << 8);
     f0c:	2365      	movs	r3, #101	; 0x65

			case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
				menuScreen->screen2[4][15] = 'o';
				menuScreen->screen2[4][16] = 'n';
				menuScreen->screen2[4][17] = 'e';
     f0e:	f885 01dc 	strb.w	r0, [r5, #476]	; 0x1dc
				break;
     f12:	f885 11dd 	strb.w	r1, [r5, #477]	; 0x1dd
			}
     f16:	f885 21de 	strb.w	r2, [r5, #478]	; 0x1de
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] | ((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack]) << 8);
     f1a:	f885 31df 	strb.w	r3, [r5, #479]	; 0x1df
			numPrinter(menuScreen->screen2[5], 13, 5, totalSustainTime);
     f1e:	e68f      	b.n	c40 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x2b8>

			case 1: //only release
				menuScreen->screen2[4][14] = 'R';
				menuScreen->screen2[4][15] = ' ';
				menuScreen->screen2[4][16] = ' ';
				menuScreen->screen2[4][17] = ' ';
     f20:	2252      	movs	r2, #82	; 0x52
     f22:	e684      	b.n	c2e <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x2a6>
			{
			case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
				menuScreen->screen2[4][15] = '-';
				menuScreen->screen2[4][16] = 'R';
				menuScreen->screen2[4][17] = ' ';
     f24:	2041      	movs	r0, #65	; 0x41
				break;
     f26:	212d      	movs	r1, #45	; 0x2d

     f28:	2252      	movs	r2, #82	; 0x52
			case 1: //only release
     f2a:	2320      	movs	r3, #32
			{
			case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
				menuScreen->screen2[4][15] = '-';
				menuScreen->screen2[4][16] = 'R';
				menuScreen->screen2[4][17] = ' ';
     f2c:	f885 01dc 	strb.w	r0, [r5, #476]	; 0x1dc
				break;
     f30:	f885 11dd 	strb.w	r1, [r5, #477]	; 0x1dd

     f34:	f885 21de 	strb.w	r2, [r5, #478]	; 0x1de
			case 1: //only release
     f38:	f885 31df 	strb.w	r3, [r5, #479]	; 0x1df
				menuScreen->screen2[4][14] = 'R';
     f3c:	e680      	b.n	c40 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x2b8>
			case 0:
				menuScreen->screen2[2][10] = 'S';
				menuScreen->screen2[2][11] = 'o';
				menuScreen->screen2[2][12] = 'l';
				menuScreen->screen2[2][13] = 'o';
				break;
     f3e:	236f      	movs	r3, #111	; 0x6f
			{
			case 0:
				menuScreen->screen2[2][10] = 'S';
				menuScreen->screen2[2][11] = 'o';
				menuScreen->screen2[2][12] = 'l';
				menuScreen->screen2[2][13] = 'o';
     f40:	2153      	movs	r1, #83	; 0x53
				break;

     f42:	226c      	movs	r2, #108	; 0x6c
			{
			case 0:
				menuScreen->screen2[2][10] = 'S';
				menuScreen->screen2[2][11] = 'o';
				menuScreen->screen2[2][12] = 'l';
				menuScreen->screen2[2][13] = 'o';
     f44:	f885 11ae 	strb.w	r1, [r5, #430]	; 0x1ae
				break;
     f48:	f885 31af 	strb.w	r3, [r5, #431]	; 0x1af

     f4c:	f885 21b0 	strb.w	r2, [r5, #432]	; 0x1b0
			case 1:
     f50:	f885 31b1 	strb.w	r3, [r5, #433]	; 0x1b1
				menuScreen->screen2[2][10] = 'P';
     f54:	e5cf      	b.n	af6 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x16e>
			if ((currentPattern->outputLevelMSB[positionSelect]) == 0)
			{ //value is positive
				menuScreen->knobScreen[0][14] = ' ';
				numPrinter(menuScreen->knobScreen[0], 15, 2, currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
			}
			else
     f56:	2320      	movs	r3, #32
			{
     f58:	f505 793d 	add.w	r9, r5, #756	; 0x2f4
     f5c:	2202      	movs	r2, #2
     f5e:	210f      	movs	r1, #15
			if ((currentPattern->outputLevelMSB[positionSelect]) == 0)
			{ //value is positive
				menuScreen->knobScreen[0][14] = ' ';
				numPrinter(menuScreen->knobScreen[0], 15, 2, currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
			}
			else
     f60:	f885 3302 	strb.w	r3, [r5, #770]	; 0x302
			{
     f64:	4648      	mov	r0, r9
     f66:	7a3b      	ldrb	r3, [r7, #8]
     f68:	f000 fbac 	bl	16c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>
     f6c:	e62a      	b.n	bc4 <updateScreen(Screen volatile*, Pattern volatile*, Globals volatile*)+0x23c>
     f6e:	bf00      	nop

00000f70 <enableCycle(Globals volatile*)>:
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     f70:	f890 22fa 	ldrb.w	r2, [r0, #762]	; 0x2fa
     f74:	4bac      	ldr	r3, [pc, #688]	; (1228 <enableCycle(Globals volatile*)+0x2b8>)
     f76:	327c      	adds	r2, #124	; 0x7c
     f78:	eb00 0242 	add.w	r2, r0, r2, lsl #1

uint8_t new_line[4] = { 0x80, 0xA0, 0xC0, 0xE0 };
uint8_t OLEDPinArray[9] = {OLEDData0,OLEDData1,OLEDData2,OLEDData3,OLEDData4,OLEDData5, OLEDData6, OLEDData7, OLEDDataCommand};

void enableCycle(volatile Globals *OLEDGlobals) //called on by interval timer.
{
     f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     f7e:	8852      	ldrh	r2, [r2, #2]
     f80:	7819      	ldrb	r1, [r3, #0]
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     f82:	f012 0f01 	tst.w	r2, #1
     f86:	4aa9      	ldr	r2, [pc, #676]	; (122c <enableCycle(Globals volatile*)+0x2bc>)
     f88:	ea4f 1101 	mov.w	r1, r1, lsl #4
     f8c:	eb02 0401 	add.w	r4, r2, r1
     f90:	5851      	ldr	r1, [r2, r1]
     f92:	68e4      	ldr	r4, [r4, #12]
     f94:	f040 8130 	bne.w	11f8 <enableCycle(Globals volatile*)+0x288>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     f98:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     f9c:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     fa0:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
     fa4:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     fa6:	785d      	ldrb	r5, [r3, #1]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     fa8:	347c      	adds	r4, #124	; 0x7c
     faa:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     fae:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     fb2:	012d      	lsls	r5, r5, #4
     fb4:	8864      	ldrh	r4, [r4, #2]
     fb6:	f3c4 044e 	ubfx	r4, r4, #1, #15
     fba:	804c      	strh	r4, [r1, #2]
     fbc:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     fbe:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     fc2:	68e4      	ldr	r4, [r4, #12]
     fc4:	317c      	adds	r1, #124	; 0x7c
     fc6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     fca:	8849      	ldrh	r1, [r1, #2]
     fcc:	f011 0f01 	tst.w	r1, #1
     fd0:	5951      	ldr	r1, [r2, r5]
     fd2:	f040 8114 	bne.w	11fe <enableCycle(Globals volatile*)+0x28e>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     fd6:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     fda:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
     fde:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
     fe2:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     fe4:	789d      	ldrb	r5, [r3, #2]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
     fe6:	347c      	adds	r4, #124	; 0x7c
     fe8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
     fec:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     ff0:	012d      	lsls	r5, r5, #4
     ff2:	8864      	ldrh	r4, [r4, #2]
     ff4:	f3c4 044e 	ubfx	r4, r4, #1, #15
     ff8:	804c      	strh	r4, [r1, #2]
     ffa:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
     ffc:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    1000:	68e4      	ldr	r4, [r4, #12]
    1002:	317c      	adds	r1, #124	; 0x7c
    1004:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    1008:	8849      	ldrh	r1, [r1, #2]
    100a:	f011 0f01 	tst.w	r1, #1
    100e:	5951      	ldr	r1, [r2, r5]
    1010:	f040 80f8 	bne.w	1204 <enableCycle(Globals volatile*)+0x294>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1014:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    1018:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    101c:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
    1020:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    1022:	78dd      	ldrb	r5, [r3, #3]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    1024:	347c      	adds	r4, #124	; 0x7c
    1026:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    102a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    102e:	012d      	lsls	r5, r5, #4
    1030:	8864      	ldrh	r4, [r4, #2]
    1032:	f3c4 044e 	ubfx	r4, r4, #1, #15
    1036:	804c      	strh	r4, [r1, #2]
    1038:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    103a:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    103e:	68e4      	ldr	r4, [r4, #12]
    1040:	317c      	adds	r1, #124	; 0x7c
    1042:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    1046:	8849      	ldrh	r1, [r1, #2]
    1048:	f011 0f01 	tst.w	r1, #1
    104c:	5951      	ldr	r1, [r2, r5]
    104e:	f040 80dc 	bne.w	120a <enableCycle(Globals volatile*)+0x29a>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1052:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    1056:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    105a:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
    105e:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    1060:	791d      	ldrb	r5, [r3, #4]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    1062:	347c      	adds	r4, #124	; 0x7c
    1064:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    1068:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    106c:	012d      	lsls	r5, r5, #4
    106e:	8864      	ldrh	r4, [r4, #2]
    1070:	f3c4 044e 	ubfx	r4, r4, #1, #15
    1074:	804c      	strh	r4, [r1, #2]
    1076:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    1078:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    107c:	68e4      	ldr	r4, [r4, #12]
    107e:	317c      	adds	r1, #124	; 0x7c
    1080:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    1084:	8849      	ldrh	r1, [r1, #2]
    1086:	f011 0f01 	tst.w	r1, #1
    108a:	5951      	ldr	r1, [r2, r5]
    108c:	f040 80c0 	bne.w	1210 <enableCycle(Globals volatile*)+0x2a0>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1090:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    1094:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    1098:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
    109c:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    109e:	795d      	ldrb	r5, [r3, #5]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    10a0:	347c      	adds	r4, #124	; 0x7c
    10a2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    10a6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    10aa:	012d      	lsls	r5, r5, #4
    10ac:	8864      	ldrh	r4, [r4, #2]
    10ae:	f3c4 044e 	ubfx	r4, r4, #1, #15
    10b2:	804c      	strh	r4, [r1, #2]
    10b4:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    10b6:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    10ba:	68e4      	ldr	r4, [r4, #12]
    10bc:	317c      	adds	r1, #124	; 0x7c
    10be:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    10c2:	8849      	ldrh	r1, [r1, #2]
    10c4:	f011 0f01 	tst.w	r1, #1
    10c8:	5951      	ldr	r1, [r2, r5]
    10ca:	f040 80a4 	bne.w	1216 <enableCycle(Globals volatile*)+0x2a6>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    10ce:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    10d2:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    10d6:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
    10da:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    10dc:	799d      	ldrb	r5, [r3, #6]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    10de:	347c      	adds	r4, #124	; 0x7c
    10e0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    10e4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    10e8:	012d      	lsls	r5, r5, #4
    10ea:	8864      	ldrh	r4, [r4, #2]
    10ec:	f3c4 044e 	ubfx	r4, r4, #1, #15
    10f0:	804c      	strh	r4, [r1, #2]
    10f2:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    10f4:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    10f8:	68e4      	ldr	r4, [r4, #12]
    10fa:	317c      	adds	r1, #124	; 0x7c
    10fc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    1100:	8849      	ldrh	r1, [r1, #2]
    1102:	f011 0f01 	tst.w	r1, #1
    1106:	5951      	ldr	r1, [r2, r5]
    1108:	f040 8088 	bne.w	121c <enableCycle(Globals volatile*)+0x2ac>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    110c:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    1110:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    1114:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
    1118:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    111a:	79dd      	ldrb	r5, [r3, #7]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    111c:	347c      	adds	r4, #124	; 0x7c
    111e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    1122:	eb00 0444 	add.w	r4, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    1126:	012d      	lsls	r5, r5, #4
    1128:	8864      	ldrh	r4, [r4, #2]
    112a:	f3c4 044e 	ubfx	r4, r4, #1, #15
    112e:	804c      	strh	r4, [r1, #2]
    1130:	1954      	adds	r4, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    1132:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    1136:	68e4      	ldr	r4, [r4, #12]
    1138:	317c      	adds	r1, #124	; 0x7c
    113a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    113e:	8849      	ldrh	r1, [r1, #2]
    1140:	f011 0f01 	tst.w	r1, #1
    1144:	5951      	ldr	r1, [r2, r5]
    1146:	d16c      	bne.n	1222 <enableCycle(Globals volatile*)+0x2b2>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1148:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    114c:	f890 12fa 	ldrb.w	r1, [r0, #762]	; 0x2fa
    1150:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
    1154:	317c      	adds	r1, #124	; 0x7c
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    1156:	7a1d      	ldrb	r5, [r3, #8]
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    1158:	347c      	adds	r4, #124	; 0x7c
    115a:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    115e:	eb00 0144 	add.w	r1, r0, r4, lsl #1
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    1162:	012d      	lsls	r5, r5, #4
    1164:	8849      	ldrh	r1, [r1, #2]
    1166:	f3c1 014e 	ubfx	r1, r1, #1, #15
    116a:	8059      	strh	r1, [r3, #2]
    116c:	1951      	adds	r1, r2, r5
{
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
    116e:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
    1172:	337c      	adds	r3, #124	; 0x7c
    1174:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    1178:	885b      	ldrh	r3, [r3, #2]
    117a:	f013 0f01 	tst.w	r3, #1
    117e:	5953      	ldr	r3, [r2, r5]
    1180:	68ca      	ldr	r2, [r1, #12]
    1182:	d036      	beq.n	11f2 <enableCycle(Globals volatile*)+0x282>
    1184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    1188:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
		}
		OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = 0; //reset buffer to 0, now that we have shifted out the data. This might be un-necessary? 
    118c:	f04f 0e00 	mov.w	lr, #0
		//this interupt will be happenign every 5 to 10 microseconds. We'll keep the delay in for now, and if it negativley impacts performance, we can get rid of it. 
	//if(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex]!=0){ //Not sure why this line doesn't work, but it seems to make this interupt fail. 
	for (int i= 0; i<9;i++ ) 
		{
			digitalWriteFast(OLEDPinArray[i],(OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] &1)); //mask toParse with 1, so we just get the first bit. 
			OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] >> 1; //shift toParse down one, so we can get the next bit to write.
    1190:	f890 42fa 	ldrb.w	r4, [r0, #762]	; 0x2fa
			} else if (pin == 4) {
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    1194:	f44f 6780 	mov.w	r7, #1024	; 0x400
    1198:	337c      	adds	r3, #124	; 0x7c
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    119a:	4925      	ldr	r1, [pc, #148]	; (1230 <enableCycle(Globals volatile*)+0x2c0>)
    119c:	347c      	adds	r4, #124	; 0x7c
			} else if (pin == 4) {
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    119e:	4e25      	ldr	r6, [pc, #148]	; (1234 <enableCycle(Globals volatile*)+0x2c4>)
    11a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    11a4:	4d24      	ldr	r5, [pc, #144]	; (1238 <enableCycle(Globals volatile*)+0x2c8>)
    11a6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    11aa:	4a24      	ldr	r2, [pc, #144]	; (123c <enableCycle(Globals volatile*)+0x2cc>)
    11ac:	8864      	ldrh	r4, [r4, #2]
    11ae:	f3c4 044e 	ubfx	r4, r4, #1, #15
    11b2:	805c      	strh	r4, [r3, #2]
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    11b4:	460c      	mov	r4, r1
		}
		OLEDGlobals->OLEDBuffer[OLEDGlobals->oledReadIndex] = 0; //reset buffer to 0, now that we have shifted out the data. This might be un-necessary? 
    11b6:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
    11ba:	337c      	adds	r3, #124	; 0x7c
    11bc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    11c0:	f8a3 e002 	strh.w	lr, [r3, #2]
		OLEDGlobals->oledReadIndex++; //increment read Index
    11c4:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
    11c8:	3301      	adds	r3, #1
    11ca:	b2db      	uxtb	r3, r3
    11cc:	f880 32fa 	strb.w	r3, [r0, #762]	; 0x2fa
			} else if (pin == 4) {
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    11d0:	f8c6 7084 	str.w	r7, [r6, #132]	; 0x84
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    11d4:	6809      	ldr	r1, [r1, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    11d6:	682b      	ldr	r3, [r5, #0]
    11d8:	fba2 3203 	umull	r3, r2, r2, r3
    11dc:	0c92      	lsrs	r2, r2, #18
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    11de:	6823      	ldr	r3, [r4, #0]
    11e0:	1a5b      	subs	r3, r3, r1
    11e2:	429a      	cmp	r2, r3
    11e4:	d8fb      	bhi.n	11de <enableCycle(Globals volatile*)+0x26e>
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
    11e6:	4b13      	ldr	r3, [pc, #76]	; (1234 <enableCycle(Globals volatile*)+0x2c4>)
    11e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    11ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    11f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    11f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    11f6:	e7c7      	b.n	1188 <enableCycle(Globals volatile*)+0x218>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    11f8:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    11fc:	e6ce      	b.n	f9c <enableCycle(Globals volatile*)+0x2c>
    11fe:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    1202:	e6ea      	b.n	fda <enableCycle(Globals volatile*)+0x6a>
    1204:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    1208:	e706      	b.n	1018 <enableCycle(Globals volatile*)+0xa8>
    120a:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    120e:	e722      	b.n	1056 <enableCycle(Globals volatile*)+0xe6>
    1210:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    1214:	e73e      	b.n	1094 <enableCycle(Globals volatile*)+0x124>
    1216:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    121a:	e75a      	b.n	10d2 <enableCycle(Globals volatile*)+0x162>
    121c:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    1220:	e776      	b.n	1110 <enableCycle(Globals volatile*)+0x1a0>
    1222:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    1226:	e791      	b.n	114c <enableCycle(Globals volatile*)+0x1dc>
    1228:	20000740 	.word	0x20000740
    122c:	2000032c 	.word	0x2000032c
    1230:	e0001004 	.word	0xe0001004
    1234:	42004000 	.word	0x42004000
    1238:	20000774 	.word	0x20000774
    123c:	431bde83 	.word	0x431bde83

00001240 <initPins()>:
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
}

void initPins() 
{
    1240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1242:	4c38      	ldr	r4, [pc, #224]	; (1324 <initPins()+0xe4>)
    1244:	f104 0509 	add.w	r5, r4, #9
	for (int i = 0; i < 9; i++)
	{
		pinMode(OLEDPinArray[i], OUTPUT);
    1248:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    124c:	2101      	movs	r1, #1
    124e:	f002 fa7d 	bl	374c <pinMode>
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
}

void initPins() 
{
	for (int i = 0; i < 9; i++)
    1252:	42ac      	cmp	r4, r5
    1254:	d1f8      	bne.n	1248 <initPins()+0x8>
	{
		pinMode(OLEDPinArray[i], OUTPUT);
	}
	pinMode(OLEDEnable, OUTPUT);
    1256:	2101      	movs	r1, #1
    1258:	2006      	movs	r0, #6
    125a:	f002 fa77 	bl	374c <pinMode>

	for (int j = 0; j < 9; j++) 
	{
		digitalWriteFast(OLEDPinArray[j], LOW);
    125e:	4a32      	ldr	r2, [pc, #200]	; (1328 <initPins()+0xe8>)
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1260:	4b32      	ldr	r3, [pc, #200]	; (132c <initPins()+0xec>)
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
    1262:	f44f 6580 	mov.w	r5, #1024	; 0x400
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1266:	7816      	ldrb	r6, [r2, #0]

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1268:	21c8      	movs	r1, #200	; 0xc8
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    126a:	7850      	ldrb	r0, [r2, #1]
    126c:	0136      	lsls	r6, r6, #4
    126e:	7894      	ldrb	r4, [r2, #2]
    1270:	0100      	lsls	r0, r0, #4
    1272:	199f      	adds	r7, r3, r6
    1274:	0124      	lsls	r4, r4, #4
    1276:	599e      	ldr	r6, [r3, r6]
    1278:	eb03 0e00 	add.w	lr, r3, r0
    127c:	f8d7 c00c 	ldr.w	ip, [r7, #12]
    1280:	581f      	ldr	r7, [r3, r0]
    1282:	78d0      	ldrb	r0, [r2, #3]
    1284:	f8c6 c088 	str.w	ip, [r6, #136]	; 0x88
    1288:	191e      	adds	r6, r3, r4
    128a:	f8de c00c 	ldr.w	ip, [lr, #12]
    128e:	0100      	lsls	r0, r0, #4
    1290:	f853 e004 	ldr.w	lr, [r3, r4]
    1294:	7914      	ldrb	r4, [r2, #4]
    1296:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
    129a:	181f      	adds	r7, r3, r0
    129c:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    12a0:	0124      	lsls	r4, r4, #4
    12a2:	581e      	ldr	r6, [r3, r0]
    12a4:	7950      	ldrb	r0, [r2, #5]
    12a6:	f8ce c088 	str.w	ip, [lr, #136]	; 0x88
    12aa:	eb03 0e04 	add.w	lr, r3, r4
    12ae:	f8d7 c00c 	ldr.w	ip, [r7, #12]
    12b2:	0100      	lsls	r0, r0, #4
    12b4:	591f      	ldr	r7, [r3, r4]
    12b6:	7994      	ldrb	r4, [r2, #6]
    12b8:	f8c6 c088 	str.w	ip, [r6, #136]	; 0x88
    12bc:	181e      	adds	r6, r3, r0
    12be:	f8de c00c 	ldr.w	ip, [lr, #12]
    12c2:	0124      	lsls	r4, r4, #4
    12c4:	f853 e000 	ldr.w	lr, [r3, r0]
    12c8:	79d0      	ldrb	r0, [r2, #7]
    12ca:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
    12ce:	191f      	adds	r7, r3, r4
    12d0:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    12d4:	0100      	lsls	r0, r0, #4
    12d6:	591e      	ldr	r6, [r3, r4]
    12d8:	f8ce c088 	str.w	ip, [lr, #136]	; 0x88
    12dc:	181c      	adds	r4, r3, r0
    12de:	68ff      	ldr	r7, [r7, #12]
    12e0:	5818      	ldr	r0, [r3, r0]
    12e2:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
    12e6:	68e4      	ldr	r4, [r4, #12]
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
    12e8:	4f11      	ldr	r7, [pc, #68]	; (1330 <initPins()+0xf0>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    12ea:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    12ee:	7a12      	ldrb	r2, [r2, #8]
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    12f0:	4810      	ldr	r0, [pc, #64]	; (1334 <initPins()+0xf4>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    12f2:	0112      	lsls	r2, r2, #4

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    12f4:	4e10      	ldr	r6, [pc, #64]	; (1338 <initPins()+0xf8>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    12f6:	189c      	adds	r4, r3, r2
    12f8:	589b      	ldr	r3, [r3, r2]

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    12fa:	4a10      	ldr	r2, [pc, #64]	; (133c <initPins()+0xfc>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    12fc:	f8d4 e00c 	ldr.w	lr, [r4, #12]
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1300:	4604      	mov	r4, r0
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1302:	f8c3 e088 	str.w	lr, [r3, #136]	; 0x88
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
    1306:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    130a:	6800      	ldr	r0, [r0, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    130c:	6833      	ldr	r3, [r6, #0]
    130e:	fba2 3203 	umull	r3, r2, r2, r3
    1312:	0c92      	lsrs	r2, r2, #18
    1314:	fb01 f202 	mul.w	r2, r1, r2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1318:	6823      	ldr	r3, [r4, #0]
    131a:	1a1b      	subs	r3, r3, r0
    131c:	429a      	cmp	r2, r3
    131e:	d8fb      	bhi.n	1318 <initPins()+0xd8>
	}
	digitalWriteFast(OLEDEnable, LOW);
	delayMicroseconds(200);

}
    1320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1322:	bf00      	nop
    1324:	2000073f 	.word	0x2000073f
    1328:	20000740 	.word	0x20000740
    132c:	2000032c 	.word	0x2000032c
    1330:	42004000 	.word	0x42004000
    1334:	e0001004 	.word	0xe0001004
    1338:	20000774 	.word	0x20000774
    133c:	431bde83 	.word	0x431bde83

00001340 <initScreen(Globals volatile*)>:

void initScreen(volatile Globals* OLEDGlobals)
{
    1340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1342:	4604      	mov	r4, r0
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1344:	202a      	movs	r0, #42	; 0x2a
    1346:	2771      	movs	r7, #113	; 0x71

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
    1348:	f44f 7580 	mov.w	r5, #256	; 0x100
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    134c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1350:	2128      	movs	r1, #40	; 0x28
    1352:	2208      	movs	r2, #8
    1354:	2679      	movs	r6, #121	; 0x79
    1356:	337c      	adds	r3, #124	; 0x7c
    1358:	f04f 0ed5 	mov.w	lr, #213	; 0xd5
    135c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1360:	8058      	strh	r0, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1362:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1366:	3301      	adds	r3, #1
    1368:	b2db      	uxtb	r3, r3
    136a:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    136e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1372:	337c      	adds	r3, #124	; 0x7c
    1374:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1378:	805f      	strh	r7, [r3, #2]
    137a:	2770      	movs	r7, #112	; 0x70
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    137c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1380:	3301      	adds	r3, #1
    1382:	b2db      	uxtb	r3, r3
    1384:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
    1388:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    138c:	337c      	adds	r3, #124	; 0x7c
    138e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1392:	805d      	strh	r5, [r3, #2]
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1394:	2578      	movs	r5, #120	; 0x78
void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1396:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    139a:	3301      	adds	r3, #1
    139c:	b2db      	uxtb	r3, r3
    139e:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    13a2:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    13a6:	337c      	adds	r3, #124	; 0x7c
    13a8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    13ac:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    13ae:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    13b2:	3301      	adds	r3, #1
    13b4:	b2db      	uxtb	r3, r3
    13b6:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    13ba:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    13be:	337c      	adds	r3, #124	; 0x7c
    13c0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    13c4:	805a      	strh	r2, [r3, #2]
    13c6:	2209      	movs	r2, #9
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    13c8:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    13cc:	3301      	adds	r3, #1
    13ce:	b2db      	uxtb	r3, r3
    13d0:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    13d4:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    13d8:	337c      	adds	r3, #124	; 0x7c
    13da:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    13de:	8058      	strh	r0, [r3, #2]
    13e0:	2006      	movs	r0, #6
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    13e2:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    13e6:	3301      	adds	r3, #1
    13e8:	b2db      	uxtb	r3, r3
    13ea:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    13ee:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    13f2:	337c      	adds	r3, #124	; 0x7c
    13f4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    13f8:	805e      	strh	r6, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    13fa:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    13fe:	3301      	adds	r3, #1
    1400:	b2db      	uxtb	r3, r3
    1402:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1406:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    140a:	337c      	adds	r3, #124	; 0x7c
    140c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1410:	f8a3 e002 	strh.w	lr, [r3, #2]
    1414:	f04f 0e72 	mov.w	lr, #114	; 0x72
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1418:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    141c:	3301      	adds	r3, #1
    141e:	b2db      	uxtb	r3, r3
    1420:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1424:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1428:	337c      	adds	r3, #124	; 0x7c
    142a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    142e:	805f      	strh	r7, [r3, #2]

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
    1430:	f44f 7785 	mov.w	r7, #266	; 0x10a

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1434:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1438:	3301      	adds	r3, #1
    143a:	b2db      	uxtb	r3, r3
    143c:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1440:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1444:	337c      	adds	r3, #124	; 0x7c
    1446:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    144a:	805d      	strh	r5, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    144c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1450:	3301      	adds	r3, #1
    1452:	b2db      	uxtb	r3, r3
    1454:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1458:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    145c:	337c      	adds	r3, #124	; 0x7c
    145e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1462:	805a      	strh	r2, [r3, #2]
    1464:	22da      	movs	r2, #218	; 0xda
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1466:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    146a:	3301      	adds	r3, #1
    146c:	b2db      	uxtb	r3, r3
    146e:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1472:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1476:	337c      	adds	r3, #124	; 0x7c
    1478:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    147c:	8058      	strh	r0, [r3, #2]
    147e:	2010      	movs	r0, #16
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1480:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1484:	3301      	adds	r3, #1
    1486:	b2db      	uxtb	r3, r3
    1488:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    148c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1490:	337c      	adds	r3, #124	; 0x7c
    1492:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1496:	f8a3 e002 	strh.w	lr, [r3, #2]
    149a:	f04f 0edc 	mov.w	lr, #220	; 0xdc
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    149e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    14a2:	3301      	adds	r3, #1
    14a4:	b2db      	uxtb	r3, r3
    14a6:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
    14aa:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    14ae:	337c      	adds	r3, #124	; 0x7c
    14b0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    14b4:	805f      	strh	r7, [r3, #2]
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    14b6:	2700      	movs	r7, #0
void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    14b8:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    14bc:	3301      	adds	r3, #1
    14be:	b2db      	uxtb	r3, r3
    14c0:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    14c4:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    14c8:	337c      	adds	r3, #124	; 0x7c
    14ca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    14ce:	805e      	strh	r6, [r3, #2]
    14d0:	2681      	movs	r6, #129	; 0x81
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    14d2:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    14d6:	3301      	adds	r3, #1
    14d8:	b2db      	uxtb	r3, r3
    14da:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    14de:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    14e2:	337c      	adds	r3, #124	; 0x7c
    14e4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    14e8:	805a      	strh	r2, [r3, #2]
    14ea:	227f      	movs	r2, #127	; 0x7f
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    14ec:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    14f0:	3301      	adds	r3, #1
    14f2:	b2db      	uxtb	r3, r3
    14f4:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    14f8:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    14fc:	337c      	adds	r3, #124	; 0x7c
    14fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1502:	8058      	strh	r0, [r3, #2]
    1504:	20d9      	movs	r0, #217	; 0xd9
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1506:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    150a:	3301      	adds	r3, #1
    150c:	b2db      	uxtb	r3, r3
    150e:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1512:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1516:	337c      	adds	r3, #124	; 0x7c
    1518:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    151c:	f8a3 e002 	strh.w	lr, [r3, #2]
    1520:	f04f 0ef1 	mov.w	lr, #241	; 0xf1
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1524:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1528:	3301      	adds	r3, #1
    152a:	b2db      	uxtb	r3, r3
    152c:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1530:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1534:	337c      	adds	r3, #124	; 0x7c
    1536:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    153a:	805f      	strh	r7, [r3, #2]
    153c:	27db      	movs	r7, #219	; 0xdb
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    153e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1542:	3301      	adds	r3, #1
    1544:	b2db      	uxtb	r3, r3
    1546:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    154a:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    154e:	337c      	adds	r3, #124	; 0x7c
    1550:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1554:	805e      	strh	r6, [r3, #2]
    1556:	2640      	movs	r6, #64	; 0x40
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1558:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    155c:	3301      	adds	r3, #1
    155e:	b2db      	uxtb	r3, r3
    1560:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1564:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1568:	337c      	adds	r3, #124	; 0x7c
    156a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    156e:	805a      	strh	r2, [r3, #2]
    1570:	2201      	movs	r2, #1
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1572:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1576:	4413      	add	r3, r2
    1578:	b2db      	uxtb	r3, r3
    157a:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    157e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1582:	337c      	adds	r3, #124	; 0x7c
    1584:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1588:	8058      	strh	r0, [r3, #2]
	command(0x40, OLEDGlobals);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
	command(0x78, OLEDGlobals);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
	command((0x20 | rows), OLEDGlobals); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
	command(0x01, OLEDGlobals);        // Clear display
	//_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	delay(2);
    158a:	2002      	movs	r0, #2

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    158c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1590:	4413      	add	r3, r2
    1592:	b2db      	uxtb	r3, r3
    1594:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1598:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    159c:	337c      	adds	r3, #124	; 0x7c
    159e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    15a2:	f8a3 e002 	strh.w	lr, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    15a6:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    15aa:	4413      	add	r3, r2
    15ac:	b2db      	uxtb	r3, r3
    15ae:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    15b2:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    15b6:	337c      	adds	r3, #124	; 0x7c
    15b8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    15bc:	805f      	strh	r7, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    15be:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    15c2:	4413      	add	r3, r2
    15c4:	b2db      	uxtb	r3, r3
    15c6:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    15ca:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    15ce:	337c      	adds	r3, #124	; 0x7c
    15d0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    15d4:	805e      	strh	r6, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    15d6:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    15da:	4413      	add	r3, r2
    15dc:	b2db      	uxtb	r3, r3
    15de:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    15e2:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    15e6:	337c      	adds	r3, #124	; 0x7c
    15e8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    15ec:	805d      	strh	r5, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    15ee:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    15f2:	4413      	add	r3, r2
    15f4:	b2db      	uxtb	r3, r3
    15f6:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    15fa:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    15fe:	337c      	adds	r3, #124	; 0x7c
    1600:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1604:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1606:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    160a:	4413      	add	r3, r2
    160c:	b2db      	uxtb	r3, r3
    160e:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1612:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1616:	337c      	adds	r3, #124	; 0x7c
    1618:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    161c:	805a      	strh	r2, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    161e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1622:	4413      	add	r3, r2
    1624:	b2db      	uxtb	r3, r3
    1626:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
	command(0x40, OLEDGlobals);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
	command(0x78, OLEDGlobals);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
	command((0x20 | rows), OLEDGlobals); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
	command(0x01, OLEDGlobals);        // Clear display
	//_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	delay(2);
    162a:	f002 f829 	bl	3680 <delay>
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    162e:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1632:	2180      	movs	r1, #128	; 0x80
    1634:	220c      	movs	r2, #12
    1636:	337c      	adds	r3, #124	; 0x7c
	//_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	delay(2);
	command(0x80, OLEDGlobals);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
	command(0x0C, OLEDGlobals);        // Display ON/OFF control: display ON, cursor off, blink off
	//_delay_ms(250);           // Waits 250 ms for stabilization purpose after display on
	delay(250);
    1638:	20fa      	movs	r0, #250	; 0xfa
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    163a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    163e:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1640:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1644:	3301      	adds	r3, #1
    1646:	b2db      	uxtb	r3, r3
    1648:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    164c:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    1650:	337c      	adds	r3, #124	; 0x7c
    1652:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1656:	805a      	strh	r2, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1658:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
    165c:	3301      	adds	r3, #1
    165e:	b2db      	uxtb	r3, r3
    1660:	f884 32fb 	strb.w	r3, [r4, #763]	; 0x2fb
	command(0x80, OLEDGlobals);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
	command(0x0C, OLEDGlobals);        // Display ON/OFF control: display ON, cursor off, blink off
	//_delay_ms(250);           // Waits 250 ms for stabilization purpose after display on
	delay(250);

}
    1664:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	//_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	delay(2);
	command(0x80, OLEDGlobals);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
	command(0x0C, OLEDGlobals);        // Display ON/OFF control: display ON, cursor off, blink off
	//_delay_ms(250);           // Waits 250 ms for stabilization purpose after display on
	delay(250);
    1668:	f002 b80a 	b.w	3680 <delay>

0000166c <outputS(char volatile*, int, Globals volatile*)>:
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    166c:	f892 32fb 	ldrb.w	r3, [r2, #763]	; 0x2fb
void outputS(volatile char* lineIn, int row, volatile Globals* OLEDGlobals)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r], OLEDGlobals);
    1670:	b2c9      	uxtb	r1, r1
		data(lineIn[c],OLEDGlobals);
	}
}
//overloaded method with volatile keyword. 
void outputS(volatile char* lineIn, int row, volatile Globals* OLEDGlobals)
{
    1672:	b410      	push	{r4}
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1674:	337c      	adds	r3, #124	; 0x7c
void outputS(volatile char* lineIn, int row, volatile Globals* OLEDGlobals)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r], OLEDGlobals);
    1676:	4c12      	ldr	r4, [pc, #72]	; (16c0 <outputS(char volatile*, int, Globals volatile*)+0x54>)
}

void command(uint8_t c, volatile Globals *OLEDGlobals)
{
// since D/C pin is 0, we don't need to shift anything in. bit #8 is just a 0.
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = c;
    1678:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    167c:	5c61      	ldrb	r1, [r4, r1]
    167e:	f100 0414 	add.w	r4, r0, #20
    1682:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    1684:	f892 32fb 	ldrb.w	r3, [r2, #763]	; 0x2fb
    1688:	3301      	adds	r3, #1
    168a:	b2db      	uxtb	r3, r3
    168c:	f882 32fb 	strb.w	r3, [r2, #763]	; 0x2fb

	command(new_line[r], OLEDGlobals);
	//20, because our display is 20x4.
	for (c = 0; c < 20; c++)
	{
		data(lineIn[c], OLEDGlobals);
    1690:	f810 1b01 	ldrb.w	r1, [r0], #1

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
    1694:	f892 32fb 	ldrb.w	r3, [r2, #763]	; 0x2fb
}

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
    1698:	f441 7180 	orr.w	r1, r1, #256	; 0x100
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r], OLEDGlobals);
	//20, because our display is 20x4.
	for (c = 0; c < 20; c++)
    169c:	42a0      	cmp	r0, r4

void data(uint8_t d, volatile Globals *OLEDGlobals)
{
	uint16_t toBuffer; //this number will be inserted into the buffer, at current buffer index. 
	toBuffer = d | (1 << 8); //this will be our "HIGH" message to the D/C pin
	OLEDGlobals->OLEDBuffer[OLEDGlobals->oledWriteIndex] = toBuffer;
    169e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
    16a2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    16a6:	8059      	strh	r1, [r3, #2]
	OLEDGlobals->oledWriteIndex = OLEDGlobals->oledWriteIndex + 1; //incriment write index. 
    16a8:	f892 32fb 	ldrb.w	r3, [r2, #763]	; 0x2fb
    16ac:	f103 0301 	add.w	r3, r3, #1
    16b0:	b2db      	uxtb	r3, r3
    16b2:	f882 32fb 	strb.w	r3, [r2, #763]	; 0x2fb
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r], OLEDGlobals);
	//20, because our display is 20x4.
	for (c = 0; c < 20; c++)
    16b6:	d1eb      	bne.n	1690 <outputS(char volatile*, int, Globals volatile*)+0x24>
	{
		data(lineIn[c], OLEDGlobals);
	}
}
    16b8:	f85d 4b04 	ldr.w	r4, [sp], #4
    16bc:	4770      	bx	lr
    16be:	bf00      	nop
    16c0:	2000073c 	.word	0x2000073c

000016c4 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)>:
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch (numCharacters)
    16c4:	3a01      	subs	r2, #1


}
//overloaded function with volatile keyword. 
void numPrinter(volatile char* charArray, uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    16c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch (numCharacters)
    16ca:	2a04      	cmp	r2, #4
    16cc:	d848      	bhi.n	1760 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x9c>
    16ce:	e8df f002 	tbb	[pc, r2]
    16d2:	887b      	.short	0x887b
    16d4:	4999      	.short	0x4999
    16d6:	03          	.byte	0x03
    16d7:	00          	.byte	0x00
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    16d8:	f8df e174 	ldr.w	lr, [pc, #372]	; 1850 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x18c>
    16dc:	f04f 0864 	mov.w	r8, #100	; 0x64
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    16e0:	4e59      	ldr	r6, [pc, #356]	; (1848 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x184>)
    16e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    16e6:	fbae 4703 	umull	r4, r7, lr, r3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    16ea:	4d58      	ldr	r5, [pc, #352]	; (184c <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x188>)
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    16ec:	fba6 c403 	umull	ip, r4, r6, r3
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    16f0:	fba5 c503 	umull	ip, r5, r5, r3
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    16f4:	097f      	lsrs	r7, r7, #5
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    16f6:	f8df c15c 	ldr.w	ip, [pc, #348]	; 1854 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    16fa:	09a4      	lsrs	r4, r4, #6
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    16fc:	fb08 3717 	mls	r7, r8, r7, r3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    1700:	0b6d      	lsrs	r5, r5, #13
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1702:	fbac 9803 	umull	r9, r8, ip, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1706:	fb02 3214 	mls	r2, r2, r4, r3
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    170a:	f242 7410 	movw	r4, #10000	; 0x2710
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    170e:	ea4f 08d8 	mov.w	r8, r8, lsr #3
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    1712:	fb04 3415 	mls	r4, r4, r5, r3
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1716:	b2bf      	uxth	r7, r7
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1718:	b292      	uxth	r2, r2
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
    171a:	3530      	adds	r5, #48	; 0x30
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    171c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1720:	fbac c707 	umull	ip, r7, ip, r7
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1724:	fbae e202 	umull	lr, r2, lr, r2
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    1728:	b2a4      	uxth	r4, r4
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    172a:	eba3 0348 	sub.w	r3, r3, r8, lsl #1
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
		charArray[(startingPos + 3)] = tensPlace;
    172e:	f101 0c03 	add.w	ip, r1, #3

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    1732:	fba6 6404 	umull	r6, r4, r6, r4
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1736:	0952      	lsrs	r2, r2, #5
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1738:	08ff      	lsrs	r7, r7, #3
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    173a:	3330      	adds	r3, #48	; 0x30
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
    173c:	1d0e      	adds	r6, r1, #4
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    173e:	3230      	adds	r2, #48	; 0x30
		charArray[(startingPos + 1)] = hunderedsPlace;
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1740:	b2db      	uxtb	r3, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1742:	3730      	adds	r7, #48	; 0x30
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    1744:	09a4      	lsrs	r4, r4, #6
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
		charArray[(startingPos + 3)] = tensPlace;
		charArray[(startingPos + 2)] = hunderedsPlace;
    1746:	f101 0e02 	add.w	lr, r1, #2
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
    174a:	5583      	strb	r3, [r0, r6]
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    174c:	b2d2      	uxtb	r2, r2
		charArray[startingPos] = thousandsPlace;
		break;

	case 5:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    174e:	b2ff      	uxtb	r7, r7
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
    1750:	3430      	adds	r4, #48	; 0x30
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
		charArray[(startingPos + 3)] = tensPlace;
		charArray[(startingPos + 2)] = hunderedsPlace;
		charArray[(startingPos + 1)] = thousandsPlace;
    1752:	1c4b      	adds	r3, r1, #1
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = ((inputNumber % 10000) / 1000) + 48;
		tenThousandsPlace = (inputNumber / 10000) + 48;
		charArray[(startingPos + 4)] = onesPlace;
		charArray[(startingPos + 3)] = tensPlace;
    1754:	f800 700c 	strb.w	r7, [r0, ip]
		charArray[(startingPos + 2)] = hunderedsPlace;
    1758:	f800 200e 	strb.w	r2, [r0, lr]
		charArray[(startingPos + 1)] = thousandsPlace;
    175c:	54c4      	strb	r4, [r0, r3]
		charArray[startingPos] = tenThousandsPlace;
    175e:	5445      	strb	r5, [r0, r1]
    1760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1764:	4f3a      	ldr	r7, [pc, #232]	; (1850 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x18c>)
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1766:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    176a:	4d37      	ldr	r5, [pc, #220]	; (1848 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x184>)
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    176c:	2264      	movs	r2, #100	; 0x64
    176e:	fba7 e403 	umull	lr, r4, r7, r3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1772:	fba5 e503 	umull	lr, r5, r5, r3
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1776:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 1854 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>
		tensPlace = ((inputNumber % 100) / 10) + 48;
    177a:	0964      	lsrs	r4, r4, #5
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    177c:	09ad      	lsrs	r5, r5, #6
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    177e:	fb02 3214 	mls	r2, r2, r4, r3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1782:	fb06 3415 	mls	r4, r6, r5, r3
		thousandsPlace = (inputNumber / 1000) + 48;
    1786:	3530      	adds	r5, #48	; 0x30
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1788:	fbae c603 	umull	ip, r6, lr, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
    178c:	b292      	uxth	r2, r2
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    178e:	b2a4      	uxth	r4, r4
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1790:	08f6      	lsrs	r6, r6, #3
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1792:	fbae e202 	umull	lr, r2, lr, r2
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    1796:	fba7 7404 	umull	r7, r4, r7, r4
		thousandsPlace = (inputNumber / 1000) + 48;
		charArray[(startingPos + 3)] = onesPlace;
		charArray[(startingPos + 2)] = tensPlace;
    179a:	f101 0e02 	add.w	lr, r1, #2
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    179e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = (inputNumber / 1000) + 48;
		charArray[(startingPos + 3)] = onesPlace;
    17a2:	1ccf      	adds	r7, r1, #3
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    17a4:	0964      	lsrs	r4, r4, #5
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    17a6:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = (inputNumber / 1000) + 48;
		charArray[(startingPos + 3)] = onesPlace;
		charArray[(startingPos + 2)] = tensPlace;
		charArray[(startingPos + 1)] = hunderedsPlace;
    17aa:	1c4e      	adds	r6, r1, #1
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    17ac:	08d2      	lsrs	r2, r2, #3
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    17ae:	3430      	adds	r4, #48	; 0x30
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    17b0:	3330      	adds	r3, #48	; 0x30
		tensPlace = ((inputNumber % 100) / 10) + 48;
    17b2:	3230      	adds	r2, #48	; 0x30
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
    17b4:	b2e4      	uxtb	r4, r4
		charArray[(startingPos + 1)] = tensPlace;
		charArray[startingPos] = hunderedsPlace;
		break;

	case 4:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    17b6:	b2db      	uxtb	r3, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
    17b8:	b2d2      	uxtb	r2, r2
		hunderedsPlace = ((inputNumber % 1000) / 100) + 48;
		thousandsPlace = (inputNumber / 1000) + 48;
		charArray[(startingPos + 3)] = onesPlace;
    17ba:	55c3      	strb	r3, [r0, r7]
		charArray[(startingPos + 2)] = tensPlace;
    17bc:	f800 200e 	strb.w	r2, [r0, lr]
		charArray[(startingPos + 1)] = hunderedsPlace;
    17c0:	5584      	strb	r4, [r0, r6]
		charArray[startingPos] = thousandsPlace;
    17c2:	5445      	strb	r5, [r0, r1]
		break;
    17c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	{
	case 0:
		break;

	case 1:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    17c8:	4a22      	ldr	r2, [pc, #136]	; (1854 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>)
    17ca:	fba2 4203 	umull	r4, r2, r2, r3
    17ce:	08d2      	lsrs	r2, r2, #3
    17d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    17d4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    17d8:	3330      	adds	r3, #48	; 0x30
    17da:	b2db      	uxtb	r3, r3
		charArray[startingPos] = onesPlace;
    17dc:	5443      	strb	r3, [r0, r1]
		break;
    17de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	case 2:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    17e2:	4a1c      	ldr	r2, [pc, #112]	; (1854 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>)
		tensPlace = (inputNumber / 10) + 48;
		charArray[(startingPos + 1)] = onesPlace;
    17e4:	1c4d      	adds	r5, r1, #1
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
		break;

	case 2:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    17e6:	fba2 4203 	umull	r4, r2, r2, r3
    17ea:	08d2      	lsrs	r2, r2, #3
    17ec:	eb02 0482 	add.w	r4, r2, r2, lsl #2
		tensPlace = (inputNumber / 10) + 48;
    17f0:	3230      	adds	r2, #48	; 0x30
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
		break;

	case 2:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    17f2:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
		tensPlace = (inputNumber / 10) + 48;
    17f6:	b2d2      	uxtb	r2, r2
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
		break;

	case 2:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    17f8:	3330      	adds	r3, #48	; 0x30
    17fa:	b2db      	uxtb	r3, r3
		tensPlace = (inputNumber / 10) + 48;
		charArray[(startingPos + 1)] = onesPlace;
    17fc:	5543      	strb	r3, [r0, r5]
		charArray[startingPos] = tensPlace;
    17fe:	5442      	strb	r2, [r0, r1]
		break;
    1800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1804:	4f12      	ldr	r7, [pc, #72]	; (1850 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x18c>)
    1806:	2264      	movs	r2, #100	; 0x64
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1808:	f8df e048 	ldr.w	lr, [pc, #72]	; 1854 <numPrinter(char volatile*, unsigned char, unsigned char, unsigned short)+0x190>
		tensPlace = ((inputNumber % 100) / 10) + 48;
		hunderedsPlace = (inputNumber / 100) + 48;
		charArray[(startingPos + 2)] = onesPlace;
    180c:	1c8e      	adds	r6, r1, #2
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    180e:	fba7 4703 	umull	r4, r7, r7, r3
		hunderedsPlace = (inputNumber / 100) + 48;
		charArray[(startingPos + 2)] = onesPlace;
		charArray[(startingPos + 1)] = tensPlace;
    1812:	1c4d      	adds	r5, r1, #1
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1814:	fbae c403 	umull	ip, r4, lr, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1818:	097f      	lsrs	r7, r7, #5
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    181a:	08e4      	lsrs	r4, r4, #3
		tensPlace = ((inputNumber % 100) / 10) + 48;
    181c:	fb02 3217 	mls	r2, r2, r7, r3
		hunderedsPlace = (inputNumber / 100) + 48;
    1820:	3730      	adds	r7, #48	; 0x30
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1822:	eb04 0484 	add.w	r4, r4, r4, lsl #2
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1826:	b292      	uxth	r2, r2
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1828:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
		tensPlace = ((inputNumber % 100) / 10) + 48;
    182c:	fbae e202 	umull	lr, r2, lr, r2
		hunderedsPlace = (inputNumber / 100) + 48;
    1830:	b2ff      	uxtb	r7, r7
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1832:	3330      	adds	r3, #48	; 0x30
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1834:	08d2      	lsrs	r2, r2, #3
		charArray[(startingPos + 1)] = onesPlace;
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
    1836:	b2db      	uxtb	r3, r3
		tensPlace = ((inputNumber % 100) / 10) + 48;
    1838:	3230      	adds	r2, #48	; 0x30
		hunderedsPlace = (inputNumber / 100) + 48;
		charArray[(startingPos + 2)] = onesPlace;
    183a:	5583      	strb	r3, [r0, r6]
		charArray[startingPos] = tensPlace;
		break;

	case 3:
		onesPlace = (inputNumber % 10) + 48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber % 100) / 10) + 48;
    183c:	b2d2      	uxtb	r2, r2
		hunderedsPlace = (inputNumber / 100) + 48;
		charArray[(startingPos + 2)] = onesPlace;
		charArray[(startingPos + 1)] = tensPlace;
    183e:	5542      	strb	r2, [r0, r5]
		charArray[startingPos] = hunderedsPlace;
    1840:	5447      	strb	r7, [r0, r1]
		break;
    1842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1846:	bf00      	nop
    1848:	10624dd3 	.word	0x10624dd3
    184c:	d1b71759 	.word	0xd1b71759
    1850:	51eb851f 	.word	0x51eb851f
    1854:	cccccccd 	.word	0xcccccccd

00001858 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    1858:	4804      	ldr	r0, [pc, #16]	; (186c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x14>)
    185a:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    185c:	4411      	add	r1, r2
    185e:	e001      	b.n	1864 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xc>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1860:	4299      	cmp	r1, r3
    1862:	d302      	bcc.n	186a <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>
    1864:	6803      	ldr	r3, [r0, #0]
    1866:	429a      	cmp	r2, r3
    1868:	d9fa      	bls.n	1860 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x8>
    186a:	4770      	bx	lr
    186c:	20001b8c 	.word	0x20001b8c

00001870 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    1870:	b410      	push	{r4}
    1872:	4a0c      	ldr	r2, [pc, #48]	; (18a4 <VisualMicroDebug::outPacketStart(bool)+0x34>)
    1874:	4604      	mov	r4, r0
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DBT != VM_DBT_NET_UDP)
	if (!noWait)
    1876:	b971      	cbnz	r1, 1896 <VisualMicroDebug::outPacketStart(bool)+0x26>
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    1878:	6841      	ldr	r1, [r0, #4]
    187a:	6813      	ldr	r3, [r2, #0]
    187c:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    187e:	2920      	cmp	r1, #32
    1880:	d809      	bhi.n	1896 <VisualMicroDebug::outPacketStart(bool)+0x26>
    1882:	6810      	ldr	r0, [r2, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1884:	f100 0321 	add.w	r3, r0, #33	; 0x21
    1888:	1a59      	subs	r1, r3, r1
    188a:	e001      	b.n	1890 <VisualMicroDebug::outPacketStart(bool)+0x20>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    188c:	4299      	cmp	r1, r3
    188e:	d302      	bcc.n	1896 <VisualMicroDebug::outPacketStart(bool)+0x26>
    1890:	6813      	ldr	r3, [r2, #0]
    1892:	4298      	cmp	r0, r3
    1894:	d9fa      	bls.n	188c <VisualMicroDebug::outPacketStart(bool)+0x1c>
    1896:	6813      	ldr	r3, [r2, #0]
	transport->beginPacket();
#endif
#endif

	return true;
}
    1898:	2001      	movs	r0, #1
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    189a:	6063      	str	r3, [r4, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
    189c:	f85d 4b04 	ldr.w	r4, [sp], #4
    18a0:	4770      	bx	lr
    18a2:	bf00      	nop
    18a4:	20001b8c 	.word	0x20001b8c

000018a8 <VisualMicroDebug::outPacketEnd()>:
    18a8:	4770      	bx	lr
    18aa:	bf00      	nop

000018ac <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    18ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    18b0:	f001 bee6 	b.w	3680 <delay>

000018b4 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    18b4:	2300      	movs	r3, #0
    18b6:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    18b8:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    18ba:	b141      	cbz	r1, 18ce <VisualMicroDebug::init(unsigned long)+0x1a>
    18bc:	4804      	ldr	r0, [pc, #16]	; (18d0 <VisualMicroDebug::init(unsigned long)+0x1c>)
    18be:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    18c0:	4411      	add	r1, r2
    18c2:	e001      	b.n	18c8 <VisualMicroDebug::init(unsigned long)+0x14>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    18c4:	4299      	cmp	r1, r3
    18c6:	d302      	bcc.n	18ce <VisualMicroDebug::init(unsigned long)+0x1a>
    18c8:	6803      	ldr	r3, [r0, #0]
    18ca:	429a      	cmp	r2, r3
    18cc:	d9fa      	bls.n	18c4 <VisualMicroDebug::init(unsigned long)+0x10>
    18ce:	4770      	bx	lr
    18d0:	20001b8c 	.word	0x20001b8c

000018d4 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    18d4:	b570      	push	{r4, r5, r6, lr}
    18d6:	4605      	mov	r5, r0
    18d8:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    18da:	b191      	cbz	r1, 1902 <VisualMicroDebug::start(bool, bool)+0x2e>
	{
		alwaysBreak = true;
    18dc:	2301      	movs	r3, #1
    18de:	4c41      	ldr	r4, [pc, #260]	; (19e4 <VisualMicroDebug::start(bool, bool)+0x110>)
    18e0:	7603      	strb	r3, [r0, #24]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    18e2:	f003 f8d7 	bl	4a94 <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
    18e6:	f010 0fff 	tst.w	r0, #255	; 0xff
    18ea:	d10c      	bne.n	1906 <VisualMicroDebug::start(bool, bool)+0x32>
    18ec:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    18ee:	1c51      	adds	r1, r2, #1
    18f0:	e001      	b.n	18f6 <VisualMicroDebug::start(bool, bool)+0x22>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    18f2:	4299      	cmp	r1, r3
    18f4:	d302      	bcc.n	18fc <VisualMicroDebug::start(bool, bool)+0x28>
    18f6:	6823      	ldr	r3, [r4, #0]
    18f8:	429a      	cmp	r2, r3
    18fa:	d9fa      	bls.n	18f2 <VisualMicroDebug::start(bool, bool)+0x1e>
	//console write not working yet
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    18fc:	7e2b      	ldrb	r3, [r5, #24]
    18fe:	2b00      	cmp	r3, #0
    1900:	d1ef      	bne.n	18e2 <VisualMicroDebug::start(bool, bool)+0xe>
		while (breakWait(0) != 'c') {
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    1902:	762e      	strb	r6, [r5, #24]
#endif

}
    1904:	bd70      	pop	{r4, r5, r6, pc}
    1906:	f003 f8c5 	bl	4a94 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    190a:	f010 0fff 	tst.w	r0, #255	; 0xff
    190e:	d0ed      	beq.n	18ec <VisualMicroDebug::start(bool, bool)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    1910:	f003 f93c 	bl	4b8c <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    1914:	b2c0      	uxtb	r0, r0
    1916:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    191a:	2b1e      	cmp	r3, #30
    191c:	d8f3      	bhi.n	1906 <VisualMicroDebug::start(bool, bool)+0x32>
    191e:	a201      	add	r2, pc, #4	; (adr r2, 1924 <VisualMicroDebug::start(bool, bool)+0x50>)
    1920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1924:	00001903 	.word	0x00001903
    1928:	00001907 	.word	0x00001907
    192c:	00001907 	.word	0x00001907
    1930:	00001907 	.word	0x00001907
    1934:	00001907 	.word	0x00001907
    1938:	00001907 	.word	0x00001907
    193c:	00001907 	.word	0x00001907
    1940:	00001907 	.word	0x00001907
    1944:	00001907 	.word	0x00001907
    1948:	00001907 	.word	0x00001907
    194c:	00001907 	.word	0x00001907
    1950:	000019a7 	.word	0x000019a7
    1954:	00001907 	.word	0x00001907
    1958:	00001907 	.word	0x00001907
    195c:	00001907 	.word	0x00001907
    1960:	00001907 	.word	0x00001907
    1964:	00001903 	.word	0x00001903
    1968:	00001907 	.word	0x00001907
    196c:	00001907 	.word	0x00001907
    1970:	00001907 	.word	0x00001907
    1974:	00001907 	.word	0x00001907
    1978:	00001907 	.word	0x00001907
    197c:	00001907 	.word	0x00001907
    1980:	00001907 	.word	0x00001907
    1984:	00001907 	.word	0x00001907
    1988:	00001903 	.word	0x00001903
    198c:	00001907 	.word	0x00001907
    1990:	00001907 	.word	0x00001907
    1994:	00001907 	.word	0x00001907
    1998:	00001907 	.word	0x00001907
    199c:	000019a1 	.word	0x000019a1
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    19a0:	2863      	cmp	r0, #99	; 0x63
    19a2:	d1a3      	bne.n	18ec <VisualMicroDebug::start(bool, bool)+0x18>
    19a4:	e7ad      	b.n	1902 <VisualMicroDebug::start(bool, bool)+0x2e>
    19a6:	4c0f      	ldr	r4, [pc, #60]	; (19e4 <VisualMicroDebug::start(bool, bool)+0x110>)
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    19a8:	2106      	movs	r1, #6
    19aa:	480f      	ldr	r0, [pc, #60]	; (19e8 <VisualMicroDebug::start(bool, bool)+0x114>)
    19ac:	6823      	ldr	r3, [r4, #0]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    19ae:	606b      	str	r3, [r5, #4]
    19b0:	f003 f912 	bl	4bd8 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    19b4:	2300      	movs	r3, #0
    19b6:	220a      	movs	r2, #10
    19b8:	480c      	ldr	r0, [pc, #48]	; (19ec <VisualMicroDebug::start(bool, bool)+0x118>)
    19ba:	4619      	mov	r1, r3
    19bc:	f003 fa50 	bl	4e60 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    19c0:	2106      	movs	r1, #6
    19c2:	480b      	ldr	r0, [pc, #44]	; (19f0 <VisualMicroDebug::start(bool, bool)+0x11c>)
    19c4:	f003 f908 	bl	4bd8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    19c8:	4808      	ldr	r0, [pc, #32]	; (19ec <VisualMicroDebug::start(bool, bool)+0x118>)
    19ca:	f003 fa39 	bl	4e40 <Print::println()>
    19ce:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    19d0:	f102 0132 	add.w	r1, r2, #50	; 0x32
    19d4:	e001      	b.n	19da <VisualMicroDebug::start(bool, bool)+0x106>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    19d6:	4299      	cmp	r1, r3
    19d8:	d393      	bcc.n	1902 <VisualMicroDebug::start(bool, bool)+0x2e>
    19da:	6823      	ldr	r3, [r4, #0]
    19dc:	429a      	cmp	r2, r3
    19de:	d9fa      	bls.n	19d6 <VisualMicroDebug::start(bool, bool)+0x102>
    19e0:	e78f      	b.n	1902 <VisualMicroDebug::start(bool, bool)+0x2e>
    19e2:	bf00      	nop
    19e4:	20001b8c 	.word	0x20001b8c
    19e8:	20000188 	.word	0x20000188
    19ec:	200007a8 	.word	0x200007a8
    19f0:	20000190 	.word	0x20000190

000019f4 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    19f4:	4b03      	ldr	r3, [pc, #12]	; (1a04 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    19f6:	2200      	movs	r2, #0
    19f8:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    19fa:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    19fc:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    19fe:	615a      	str	r2, [r3, #20]
    1a00:	4770      	bx	lr
    1a02:	bf00      	nop
    1a04:	20001888 	.word	0x20001888

00001a08 <TeensyTimerTool::BaseTimer::BaseTimer(TeensyTimerTool::ITimerChannel* (*)(), bool)>:
#include "types.h"

namespace TeensyTimerTool
{

    BaseTimer::BaseTimer(TimerGenerator* generator, bool periodic)
    1a08:	b410      	push	{r4}
        : timerGenerator(generator)
    1a0a:	2400      	movs	r4, #0
    1a0c:	6001      	str	r1, [r0, #0]
    {
        this->timerGenerator = generator;
        this->timerChannel = nullptr;
        this->isPeriodic = periodic;
    1a0e:	7202      	strb	r2, [r0, #8]

namespace TeensyTimerTool
{

    BaseTimer::BaseTimer(TimerGenerator* generator, bool periodic)
        : timerGenerator(generator)
    1a10:	60c4      	str	r4, [r0, #12]
    {
        this->timerGenerator = generator;
        this->timerChannel = nullptr;
    1a12:	6044      	str	r4, [r0, #4]
        this->isPeriodic = periodic;
    }
    1a14:	f85d 4b04 	ldr.w	r4, [sp], #4
    1a18:	4770      	bx	lr
    1a1a:	bf00      	nop

00001a1c <TeensyTimerTool::ITimerChannel::getPeriod()>:

        virtual float getMaxPeriod() const = 0;
        virtual errorCode setPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setCurrentPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setNextPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual uint32_t getPeriod() { return 0; }
    1a1c:	2000      	movs	r0, #0
    1a1e:	4770      	bx	lr

00001a20 <TeensyTimerTool::TMRChannel::~TMRChannel()>:
        setPrescaler(TMR_DEFAULT_PSC);
    }

    TMRChannel::~TMRChannel()
    {
    }
    1a20:	4770      	bx	lr
    1a22:	bf00      	nop

00001a24 <TeensyTimerTool::TMRChannel::start()>:

    errorCode TMRChannel::start()
    {
        regs->CNTR = 0x0000;
    1a24:	6882      	ldr	r2, [r0, #8]
    1a26:	2000      	movs	r0, #0
    1a28:	8150      	strh	r0, [r2, #10]
        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1a2a:	8a93      	ldrh	r3, [r2, #20]
    1a2c:	f023 0310 	bic.w	r3, r3, #16
    1a30:	041b      	lsls	r3, r3, #16
    1a32:	0c1b      	lsrs	r3, r3, #16
    1a34:	8293      	strh	r3, [r2, #20]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;
    1a36:	8a93      	ldrh	r3, [r2, #20]
    1a38:	b29b      	uxth	r3, r3
    1a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1a3e:	8293      	strh	r3, [r2, #20]
        return errorCode::OK;
    }
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <TeensyTimerTool::TMRChannel::stop()>:

    errorCode TMRChannel::stop()
    {
        regs->CSCTRL &= ~TMR_CSCTRL_TCF1EN;
    1a44:	6882      	ldr	r2, [r0, #8]
        return errorCode::OK;
    }
    1a46:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode TMRChannel::stop()
    {
        regs->CSCTRL &= ~TMR_CSCTRL_TCF1EN;
    1a48:	8a93      	ldrh	r3, [r2, #20]
    1a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    1a4e:	041b      	lsls	r3, r3, #16
    1a50:	0c1b      	lsrs	r3, r3, #16
    1a52:	8293      	strh	r3, [r2, #20]
        return errorCode::OK;
    }
    1a54:	4770      	bx	lr
    1a56:	bf00      	nop

00001a58 <std::function<void ()>::~function()>:

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1a58:	6883      	ldr	r3, [r0, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    1a5a:	b510      	push	{r4, lr}
    1a5c:	4604      	mov	r4, r0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1a5e:	b113      	cbz	r3, 1a66 <std::function<void ()>::~function()+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1a60:	2203      	movs	r2, #3
    1a62:	4601      	mov	r1, r0
    1a64:	4798      	blx	r3
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    1a66:	4620      	mov	r0, r4
    1a68:	bd10      	pop	{r4, pc}
    1a6a:	bf00      	nop

00001a6c <TeensyTimerTool::TMRChannel::trigger(float)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1a6c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 1adc <TeensyTimerTool::TMRChannel::trigger(float)+0x70>
    1a70:	edd0 6a04 	vldr	s13, [r0, #16]
    1a74:	ee20 0a27 	vmul.f32	s0, s0, s15
    // }

    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;
    1a78:	ed9f 7a19 	vldr	s14, [pc, #100]	; 1ae0 <TeensyTimerTool::TMRChannel::trigger(float)+0x74>
    // {
    //     return trigger((float)tcnt);
    // }

    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
    1a7c:	b430      	push	{r4, r5}
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1a7e:	eec0 7a26 	vdiv.f32	s15, s0, s13
    // {
    //     return trigger((float)tcnt);
    // }

    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
    1a82:	b082      	sub	sp, #8
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;
    1a84:	eef4 7ac7 	vcmpe.f32	s15, s14
    1a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1a8c:	dc23      	bgt.n	1ad6 <TeensyTimerTool::TMRChannel::trigger(float)+0x6a>
    1a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1a92:	edcd 7a01 	vstr	s15, [sp, #4]
    1a96:	f8bd 4004 	ldrh.w	r4, [sp, #4]

        regs->CTRL = 0x0000;
    1a9a:	6883      	ldr	r3, [r0, #8]
    1a9c:	2200      	movs	r2, #0
        regs->CNTR = 0x0000;

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    1a9e:	6941      	ldr	r1, [r0, #20]
    1aa0:	f242 0560 	movw	r5, #8288	; 0x2060
    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;

        regs->CTRL = 0x0000;
    1aa4:	819a      	strh	r2, [r3, #12]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;

        return errorCode::OK;
    }
    1aa6:	4610      	mov	r0, r2
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;

        regs->CTRL = 0x0000;
        regs->LOAD = 0x0000;
    1aa8:	80da      	strh	r2, [r3, #6]
        regs->CNTR = 0x0000;

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    1aaa:	0249      	lsls	r1, r1, #9
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;

        regs->CTRL = 0x0000;
        regs->LOAD = 0x0000;
        regs->COMP1 = reload;
    1aac:	801c      	strh	r4, [r3, #0]
        regs->CMPLD1 = reload;
    1aae:	821c      	strh	r4, [r3, #16]
        regs->CNTR = 0x0000;

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    1ab0:	f401 51f0 	and.w	r1, r1, #7680	; 0x1e00

        regs->CTRL = 0x0000;
        regs->LOAD = 0x0000;
        regs->COMP1 = reload;
        regs->CMPLD1 = reload;
        regs->CNTR = 0x0000;
    1ab4:	815a      	strh	r2, [r3, #10]

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1ab6:	8a9a      	ldrh	r2, [r3, #20]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    1ab8:	430d      	orrs	r5, r1
        regs->LOAD = 0x0000;
        regs->COMP1 = reload;
        regs->CMPLD1 = reload;
        regs->CNTR = 0x0000;

        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1aba:	f022 0210 	bic.w	r2, r2, #16
    1abe:	0412      	lsls	r2, r2, #16
    1ac0:	0c12      	lsrs	r2, r2, #16
    1ac2:	829a      	strh	r2, [r3, #20]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;
    1ac4:	8a9a      	ldrh	r2, [r3, #20]
    1ac6:	b292      	uxth	r2, r2
    1ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1acc:	829a      	strh	r2, [r3, #20]

        regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    1ace:	819d      	strh	r5, [r3, #12]

        return errorCode::OK;
    }
    1ad0:	b002      	add	sp, #8
    1ad2:	bc30      	pop	{r4, r5}
    1ad4:	4770      	bx	lr
    // }

    errorCode TMRChannel::trigger(float tcnt) // quick and dirty, should be optimized
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload = t > 0xFFFF ? 0xFFFF : (uint16_t)t;
    1ad6:	f64f 74ff 	movw	r4, #65535	; 0xffff
    1ada:	e7de      	b.n	1a9a <TeensyTimerTool::TMRChannel::trigger(float)+0x2e>
    1adc:	43160000 	.word	0x43160000
    1ae0:	477fff00 	.word	0x477fff00

00001ae4 <TeensyTimerTool::TMRChannel::getMaxPeriod() const>:
        pscBits = 0b1000 | (psc & 0b0111);
    }

    float TMRChannel::getMaxPeriod() const
    {
        return pscValue / 150'000'000.0f * 0xFFFE;
    1ae4:	edd0 6a04 	vldr	s13, [r0, #16]
    1ae8:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1afc <TeensyTimerTool::TMRChannel::getMaxPeriod() const+0x18>
    1aec:	eddf 7a04 	vldr	s15, [pc, #16]	; 1b00 <TeensyTimerTool::TMRChannel::getMaxPeriod() const+0x1c>
    1af0:	ee86 0a87 	vdiv.f32	s0, s13, s14
    }
    1af4:	ee20 0a27 	vmul.f32	s0, s0, s15
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop
    1afc:	4d0f0d18 	.word	0x4d0f0d18
    1b00:	477ffe00 	.word	0x477ffe00

00001b04 <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1b04:	ee07 1a90 	vmov	s15, r1
    1b08:	ed9f 7a14 	vldr	s14, [pc, #80]	; 1b5c <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)+0x58>
    1b0c:	ed90 6a04 	vldr	s12, [r0, #16]
    1b10:	eef8 7a67 	vcvt.f32.u32	s15, s15

    errorCode TMRChannel::setCurrentPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    1b14:	eddf 6a12 	vldr	s13, [pc, #72]	; 1b60 <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)+0x5c>
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1b18:	ee67 7a87 	vmul.f32	s15, s15, s14
    1b1c:	ee87 7a86 	vdiv.f32	s14, s15, s12

    errorCode TMRChannel::setCurrentPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    1b20:	eeb4 7ae6 	vcmpe.f32	s14, s13
    1b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1b28:	d814      	bhi.n	1b54 <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)+0x50>
        {
            return _setCurrentPeriod(t);
    1b2a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
            return errorCode::OK;
        }
    }

    errorCode TMRChannel::setCurrentPeriod(uint32_t us)
    {
    1b2e:	b082      	sub	sp, #8
    1b30:	6881      	ldr	r1, [r0, #8]
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
        {
            return _setCurrentPeriod(t);
    1b32:	edcd 7a01 	vstr	s15, [sp, #4]
    1b36:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    }

    errorCode TMRChannel::_setCurrentPeriod(const uint16_t cnt)
    {

        regs->COMP1 = cnt;
    1b3a:	800b      	strh	r3, [r1, #0]

        //Do we need to wait some cycle for IP bus to update here / cache flush?
        //asm volatile("dsb");

        if (regs->CNTR > cnt)
    1b3c:	894a      	ldrh	r2, [r1, #10]
    1b3e:	b292      	uxth	r2, r2
    1b40:	4293      	cmp	r3, r2
    1b42:	d302      	bcc.n	1b4a <TeensyTimerTool::TMRChannel::setCurrentPeriod(unsigned long)+0x46>
            return errorCode::triggeredLate;
        }

        else
        {
            return errorCode::OK;
    1b44:	2000      	movs	r0, #0
            return _setCurrentPeriod(t);
        } else
        {
            return errorCode::periodOverflow;
        }
    }
    1b46:	b002      	add	sp, #8
    1b48:	4770      	bx	lr

        if (regs->CNTR > cnt)
        {
            //if counter alrready went over setted value force a triggering
            regs->CNTR = cnt;
            return errorCode::triggeredLate;
    1b4a:	f06f 0065 	mvn.w	r0, #101	; 0x65
        //asm volatile("dsb");

        if (regs->CNTR > cnt)
        {
            //if counter alrready went over setted value force a triggering
            regs->CNTR = cnt;
    1b4e:	814b      	strh	r3, [r1, #10]
            return _setCurrentPeriod(t);
        } else
        {
            return errorCode::periodOverflow;
        }
    }
    1b50:	b002      	add	sp, #8
    1b52:	4770      	bx	lr
        if (t <= 0xFFFF)
        {
            return _setCurrentPeriod(t);
        } else
        {
            return errorCode::periodOverflow;
    1b54:	f06f 0063 	mvn.w	r0, #99	; 0x63
        }
    }
    1b58:	4770      	bx	lr
    1b5a:	bf00      	nop
    1b5c:	43160000 	.word	0x43160000
    1b60:	477fff00 	.word	0x477fff00

00001b64 <TeensyTimerTool::TMRChannel::setNextPeriod(unsigned long)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1b64:	ee07 1a90 	vmov	s15, r1
    1b68:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 1ba8 <TeensyTimerTool::TMRChannel::setNextPeriod(unsigned long)+0x44>
    1b6c:	ed90 6a04 	vldr	s12, [r0, #16]
    1b70:	eef8 7a67 	vcvt.f32.u32	s15, s15

    errorCode TMRChannel::setNextPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    1b74:	eddf 6a0d 	vldr	s13, [pc, #52]	; 1bac <TeensyTimerTool::TMRChannel::setNextPeriod(unsigned long)+0x48>
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1b78:	ee67 7a87 	vmul.f32	s15, s15, s14
    1b7c:	ee87 7a86 	vdiv.f32	s14, s15, s12

    errorCode TMRChannel::setNextPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    1b80:	eeb4 7ae6 	vcmpe.f32	s14, s13
    1b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1b88:	d80b      	bhi.n	1ba2 <TeensyTimerTool::TMRChannel::setNextPeriod(unsigned long)+0x3e>
        {
            _setNextPeriod(t);
    1b8a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
            return errorCode::periodOverflow;
        }
    }

    errorCode TMRChannel::setNextPeriod(uint32_t us)
    {
    1b8e:	b082      	sub	sp, #8
    1b90:	6882      	ldr	r2, [r0, #8]
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
        {
            _setNextPeriod(t);
            return errorCode::OK;
    1b92:	2000      	movs	r0, #0
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
        {
            _setNextPeriod(t);
    1b94:	edcd 7a01 	vstr	s15, [sp, #4]
    1b98:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        return pscValue / 150'000'000.0f * 0xFFFE;
    }

    void TMRChannel::_setNextPeriod(const uint16_t cnt)
    {
        regs->CMPLD1 = cnt;
    1b9c:	8213      	strh	r3, [r2, #16]
            return errorCode::OK;
        } else
        {
            return errorCode::periodOverflow;
        }
    }
    1b9e:	b002      	add	sp, #8
    1ba0:	4770      	bx	lr
        {
            _setNextPeriod(t);
            return errorCode::OK;
        } else
        {
            return errorCode::periodOverflow;
    1ba2:	f06f 0063 	mvn.w	r0, #99	; 0x63
    1ba6:	4770      	bx	lr
    1ba8:	43160000 	.word	0x43160000
    1bac:	477fff00 	.word	0x477fff00

00001bb0 <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1bb0:	ee07 1a90 	vmov	s15, r1
    1bb4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 1c08 <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)+0x58>
    1bb8:	ed90 6a04 	vldr	s12, [r0, #16]
    1bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15

    errorCode TMRChannel::setPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    1bc0:	eddf 6a12 	vldr	s13, [pc, #72]	; 1c0c <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)+0x5c>
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    1bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
    1bc8:	ee87 7a86 	vdiv.f32	s14, s15, s12

    errorCode TMRChannel::setPeriod(uint32_t us)
    {
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
    1bcc:	eeb4 7ae6 	vcmpe.f32	s14, s13
    1bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1bd4:	d815      	bhi.n	1c02 <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)+0x52>
        {
            _setNextPeriod(t);
    1bd6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
            return errorCode::periodOverflow;
        }
    }

    errorCode TMRChannel::setPeriod(uint32_t us)
    {
    1bda:	b082      	sub	sp, #8
    1bdc:	6882      	ldr	r2, [r0, #8]
        const float_t t = microsecondToCounter(us);

        if (t <= 0xFFFF)
        {
            _setNextPeriod(t);
    1bde:	edcd 7a01 	vstr	s15, [sp, #4]
    1be2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        return pscValue / 150'000'000.0f * 0xFFFE;
    }

    void TMRChannel::_setNextPeriod(const uint16_t cnt)
    {
        regs->CMPLD1 = cnt;
    1be6:	8213      	strh	r3, [r2, #16]
    }

    errorCode TMRChannel::_setCurrentPeriod(const uint16_t cnt)
    {

        regs->COMP1 = cnt;
    1be8:	8013      	strh	r3, [r2, #0]

        //Do we need to wait some cycle for IP bus to update here / cache flush?
        //asm volatile("dsb");

        if (regs->CNTR > cnt)
    1bea:	8951      	ldrh	r1, [r2, #10]
    1bec:	b289      	uxth	r1, r1
    1bee:	428b      	cmp	r3, r1
    1bf0:	d302      	bcc.n	1bf8 <TeensyTimerTool::TMRChannel::setPeriod(unsigned long)+0x48>
            return errorCode::triggeredLate;
        }

        else
        {
            return errorCode::OK;
    1bf2:	2000      	movs	r0, #0

        } else
        {
            return errorCode::periodOverflow;
        }
    }
    1bf4:	b002      	add	sp, #8
    1bf6:	4770      	bx	lr

        if (regs->CNTR > cnt)
        {
            //if counter alrready went over setted value force a triggering
            regs->CNTR = cnt;
            return errorCode::triggeredLate;
    1bf8:	f06f 0065 	mvn.w	r0, #101	; 0x65
        //asm volatile("dsb");

        if (regs->CNTR > cnt)
        {
            //if counter alrready went over setted value force a triggering
            regs->CNTR = cnt;
    1bfc:	8153      	strh	r3, [r2, #10]

        } else
        {
            return errorCode::periodOverflow;
        }
    }
    1bfe:	b002      	add	sp, #8
    1c00:	4770      	bx	lr
            _setNextPeriod(t);
            return _setCurrentPeriod(t);

        } else
        {
            return errorCode::periodOverflow;
    1c02:	f06f 0063 	mvn.w	r0, #99	; 0x63
        }
    }
    1c06:	4770      	bx	lr
    1c08:	43160000 	.word	0x43160000
    1c0c:	477fff00 	.word	0x477fff00

00001c10 <TeensyTimerTool::GptChannel::getMaxPeriod() const>:

        inline errorCode trigger(float delay) override;
        inline errorCode triggerDirect(uint32_t delay) override;
        inline errorCode getTriggerReload(float delay, uint32_t* reload) override;

        inline float getMaxPeriod() const override { return getMaxMicros() / 1E6; }
    1c10:	eddf 6a05 	vldr	s13, [pc, #20]	; 1c28 <TeensyTimerTool::GptChannel::getMaxPeriod() const+0x18>
    1c14:	ed90 7a05 	vldr	s14, [r0, #20]
    1c18:	eddf 7a04 	vldr	s15, [pc, #16]	; 1c2c <TeensyTimerTool::GptChannel::getMaxPeriod() const+0x1c>
    1c1c:	ee86 0a87 	vdiv.f32	s0, s13, s14
    1c20:	ee80 0a27 	vdiv.f32	s0, s0, s15
    1c24:	4770      	bx	lr
    1c26:	bf00      	nop
    1c28:	4f800000 	.word	0x4f800000
    1c2c:	49742400 	.word	0x49742400

00001c30 <TeensyTimerTool::GptChannel::start()>:
        return errorCode::OK;
    }

    errorCode GptChannel::start()
    {
        regs->SR = 0x3F;         // clear all interupt flags
    1c30:	68c3      	ldr	r3, [r0, #12]
    1c32:	213f      	movs	r1, #63	; 0x3f
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    1c34:	2201      	movs	r2, #1
        regs->CR |= GPT_CR_EN;   // enable timer
        return errorCode::OK;
    }
    1c36:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode GptChannel::start()
    {
        regs->SR = 0x3F;         // clear all interupt flags
    1c38:	6099      	str	r1, [r3, #8]
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    1c3a:	60da      	str	r2, [r3, #12]
        regs->CR |= GPT_CR_EN;   // enable timer
    1c3c:	681a      	ldr	r2, [r3, #0]
    1c3e:	f042 0201 	orr.w	r2, r2, #1
    1c42:	601a      	str	r2, [r3, #0]
        return errorCode::OK;
    }
    1c44:	4770      	bx	lr
    1c46:	bf00      	nop

00001c48 <TeensyTimerTool::GptChannel::stop()>:

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1c48:	68c3      	ldr	r3, [r0, #12]
        regs->IR = 0;
    1c4a:	2100      	movs	r1, #0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1c4c:	681a      	ldr	r2, [r3, #0]
        regs->IR = 0;
        return errorCode::OK;
    }
    1c4e:	4608      	mov	r0, r1
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    1c50:	f022 0201 	bic.w	r2, r2, #1
    1c54:	601a      	str	r2, [r3, #0]
        regs->IR = 0;
    1c56:	60d9      	str	r1, [r3, #12]
        return errorCode::OK;
    }
    1c58:	4770      	bx	lr
    1c5a:	bf00      	nop

00001c5c <TeensyTimerTool::GptChannel::triggerDirect(unsigned long)>:
    {
        return triggerDirect(microsecondToCycles(delay));
    }

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
    1c5c:	b410      	push	{r4}
        regs->SR = 0x3F;         // clear all interupt flags
    1c5e:	68c3      	ldr	r3, [r0, #12]
    1c60:	243f      	movs	r4, #63	; 0x3f
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    1c62:	2201      	movs	r2, #1
        regs->OCR1 = reload;     // set overflow value
        regs->CR |= GPT_CR_EN;   // enable timer

        return errorCode::OK;
    }
    1c64:	2000      	movs	r0, #0
        return triggerDirect(microsecondToCycles(delay));
    }

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
    1c66:	609c      	str	r4, [r3, #8]
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    1c68:	60da      	str	r2, [r3, #12]
        regs->OCR1 = reload;     // set overflow value
    1c6a:	6119      	str	r1, [r3, #16]
        regs->CR |= GPT_CR_EN;   // enable timer
    1c6c:	681a      	ldr	r2, [r3, #0]

        return errorCode::OK;
    }
    1c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
        regs->OCR1 = reload;     // set overflow value
        regs->CR |= GPT_CR_EN;   // enable timer
    1c72:	f042 0201 	orr.w	r2, r2, #1
    1c76:	601a      	str	r2, [r3, #0]

        return errorCode::OK;
    }
    1c78:	4770      	bx	lr
    1c7a:	bf00      	nop

00001c7c <TeensyTimerTool::TMR_t<0u>::isr()>:
        }
        return nullptr;
    }

    template <unsigned m>
    void TMR_t<m>::isr()
    1c7c:	b510      	push	{r4, lr}
    1c7e:	4c25      	ldr	r4, [pc, #148]	; (1d14 <TeensyTimerTool::TMR_t<0u>::isr()+0x98>)
    {
        // no loop to gain some time by avoiding indirections and pointer calculations
        if (callbacks[0] != nullptr && pCH0->CSCTRL & TMR_CSCTRL_TCF1)
    1c80:	68a3      	ldr	r3, [r4, #8]
    1c82:	b16b      	cbz	r3, 1ca0 <TeensyTimerTool::TMR_t<0u>::isr()+0x24>
    1c84:	4b24      	ldr	r3, [pc, #144]	; (1d18 <TeensyTimerTool::TMR_t<0u>::isr()+0x9c>)
    1c86:	681a      	ldr	r2, [r3, #0]
    1c88:	8a93      	ldrh	r3, [r2, #20]
    1c8a:	06d9      	lsls	r1, r3, #27
    1c8c:	d508      	bpl.n	1ca0 <TeensyTimerTool::TMR_t<0u>::isr()+0x24>
        {
            pCH0->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1c8e:	8a93      	ldrh	r3, [r2, #20]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    1c90:	4620      	mov	r0, r4
    1c92:	68e1      	ldr	r1, [r4, #12]
    1c94:	f023 0310 	bic.w	r3, r3, #16
    1c98:	041b      	lsls	r3, r3, #16
    1c9a:	0c1b      	lsrs	r3, r3, #16
    1c9c:	8293      	strh	r3, [r2, #20]
    1c9e:	4788      	blx	r1
            callbacks[0]();
        }

        if (callbacks[1] != nullptr && pCH1->CSCTRL & TMR_CSCTRL_TCF1)
    1ca0:	69a3      	ldr	r3, [r4, #24]
    1ca2:	491c      	ldr	r1, [pc, #112]	; (1d14 <TeensyTimerTool::TMR_t<0u>::isr()+0x98>)
    1ca4:	b173      	cbz	r3, 1cc4 <TeensyTimerTool::TMR_t<0u>::isr()+0x48>
    1ca6:	4b1d      	ldr	r3, [pc, #116]	; (1d1c <TeensyTimerTool::TMR_t<0u>::isr()+0xa0>)
    1ca8:	681a      	ldr	r2, [r3, #0]
    1caa:	8a93      	ldrh	r3, [r2, #20]
    1cac:	06db      	lsls	r3, r3, #27
    1cae:	d509      	bpl.n	1cc4 <TeensyTimerTool::TMR_t<0u>::isr()+0x48>
        {
            pCH1->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1cb0:	8a93      	ldrh	r3, [r2, #20]
    1cb2:	f101 0010 	add.w	r0, r1, #16
    1cb6:	69c9      	ldr	r1, [r1, #28]
    1cb8:	f023 0310 	bic.w	r3, r3, #16
    1cbc:	041b      	lsls	r3, r3, #16
    1cbe:	0c1b      	lsrs	r3, r3, #16
    1cc0:	8293      	strh	r3, [r2, #20]
    1cc2:	4788      	blx	r1
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
    1cc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1cc6:	4913      	ldr	r1, [pc, #76]	; (1d14 <TeensyTimerTool::TMR_t<0u>::isr()+0x98>)
    1cc8:	b123      	cbz	r3, 1cd4 <TeensyTimerTool::TMR_t<0u>::isr()+0x58>
    1cca:	4b15      	ldr	r3, [pc, #84]	; (1d20 <TeensyTimerTool::TMR_t<0u>::isr()+0xa4>)
    1ccc:	681a      	ldr	r2, [r3, #0]
    1cce:	8a93      	ldrh	r3, [r2, #20]
    1cd0:	06d8      	lsls	r0, r3, #27
    1cd2:	d414      	bmi.n	1cfe <TeensyTimerTool::TMR_t<0u>::isr()+0x82>
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
            callbacks[2]();
        }

        if (callbacks[3] != nullptr && pCH3->CSCTRL & TMR_CSCTRL_TCF1)
    1cd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1cd6:	490f      	ldr	r1, [pc, #60]	; (1d14 <TeensyTimerTool::TMR_t<0u>::isr()+0x98>)
    1cd8:	b173      	cbz	r3, 1cf8 <TeensyTimerTool::TMR_t<0u>::isr()+0x7c>
    1cda:	4b12      	ldr	r3, [pc, #72]	; (1d24 <TeensyTimerTool::TMR_t<0u>::isr()+0xa8>)
    1cdc:	681a      	ldr	r2, [r3, #0]
    1cde:	8a93      	ldrh	r3, [r2, #20]
    1ce0:	06db      	lsls	r3, r3, #27
    1ce2:	d509      	bpl.n	1cf8 <TeensyTimerTool::TMR_t<0u>::isr()+0x7c>
        {
            pCH3->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1ce4:	8a93      	ldrh	r3, [r2, #20]
    1ce6:	f101 0030 	add.w	r0, r1, #48	; 0x30
    1cea:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    1cec:	f023 0310 	bic.w	r3, r3, #16
    1cf0:	041b      	lsls	r3, r3, #16
    1cf2:	0c1b      	lsrs	r3, r3, #16
    1cf4:	8293      	strh	r3, [r2, #20]
    1cf6:	4788      	blx	r1
            callbacks[3]();
        }
        asm volatile("dsb"); //wait until register changes propagated through the cache
    1cf8:	f3bf 8f4f 	dsb	sy
    }
    1cfc:	bd10      	pop	{r4, pc}
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1cfe:	8a93      	ldrh	r3, [r2, #20]
    1d00:	f101 0020 	add.w	r0, r1, #32
    1d04:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    1d06:	f023 0310 	bic.w	r3, r3, #16
    1d0a:	041b      	lsls	r3, r3, #16
    1d0c:	0c1b      	lsrs	r3, r3, #16
    1d0e:	8293      	strh	r3, [r2, #20]
    1d10:	4788      	blx	r1
    1d12:	e7df      	b.n	1cd4 <TeensyTimerTool::TMR_t<0u>::isr()+0x58>
    1d14:	20001a60 	.word	0x20001a60
    1d18:	20001a5c 	.word	0x20001a5c
    1d1c:	2000196c 	.word	0x2000196c
    1d20:	20001968 	.word	0x20001968
    1d24:	20001964 	.word	0x20001964

00001d28 <TeensyTimerTool::TMR_t<1u>::isr()>:
        }
        return nullptr;
    }

    template <unsigned m>
    void TMR_t<m>::isr()
    1d28:	b510      	push	{r4, lr}
    1d2a:	4c25      	ldr	r4, [pc, #148]	; (1dc0 <TeensyTimerTool::TMR_t<1u>::isr()+0x98>)
    {
        // no loop to gain some time by avoiding indirections and pointer calculations
        if (callbacks[0] != nullptr && pCH0->CSCTRL & TMR_CSCTRL_TCF1)
    1d2c:	68a3      	ldr	r3, [r4, #8]
    1d2e:	b16b      	cbz	r3, 1d4c <TeensyTimerTool::TMR_t<1u>::isr()+0x24>
    1d30:	4b24      	ldr	r3, [pc, #144]	; (1dc4 <TeensyTimerTool::TMR_t<1u>::isr()+0x9c>)
    1d32:	681a      	ldr	r2, [r3, #0]
    1d34:	8a93      	ldrh	r3, [r2, #20]
    1d36:	06d9      	lsls	r1, r3, #27
    1d38:	d508      	bpl.n	1d4c <TeensyTimerTool::TMR_t<1u>::isr()+0x24>
        {
            pCH0->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1d3a:	8a93      	ldrh	r3, [r2, #20]
    1d3c:	4620      	mov	r0, r4
    1d3e:	68e1      	ldr	r1, [r4, #12]
    1d40:	f023 0310 	bic.w	r3, r3, #16
    1d44:	041b      	lsls	r3, r3, #16
    1d46:	0c1b      	lsrs	r3, r3, #16
    1d48:	8293      	strh	r3, [r2, #20]
    1d4a:	4788      	blx	r1
            callbacks[0]();
        }

        if (callbacks[1] != nullptr && pCH1->CSCTRL & TMR_CSCTRL_TCF1)
    1d4c:	69a3      	ldr	r3, [r4, #24]
    1d4e:	491c      	ldr	r1, [pc, #112]	; (1dc0 <TeensyTimerTool::TMR_t<1u>::isr()+0x98>)
    1d50:	b173      	cbz	r3, 1d70 <TeensyTimerTool::TMR_t<1u>::isr()+0x48>
    1d52:	4b1d      	ldr	r3, [pc, #116]	; (1dc8 <TeensyTimerTool::TMR_t<1u>::isr()+0xa0>)
    1d54:	681a      	ldr	r2, [r3, #0]
    1d56:	8a93      	ldrh	r3, [r2, #20]
    1d58:	06db      	lsls	r3, r3, #27
    1d5a:	d509      	bpl.n	1d70 <TeensyTimerTool::TMR_t<1u>::isr()+0x48>
        {
            pCH1->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1d5c:	8a93      	ldrh	r3, [r2, #20]
    1d5e:	f101 0010 	add.w	r0, r1, #16
    1d62:	69c9      	ldr	r1, [r1, #28]
    1d64:	f023 0310 	bic.w	r3, r3, #16
    1d68:	041b      	lsls	r3, r3, #16
    1d6a:	0c1b      	lsrs	r3, r3, #16
    1d6c:	8293      	strh	r3, [r2, #20]
    1d6e:	4788      	blx	r1
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
    1d70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d72:	4913      	ldr	r1, [pc, #76]	; (1dc0 <TeensyTimerTool::TMR_t<1u>::isr()+0x98>)
    1d74:	b123      	cbz	r3, 1d80 <TeensyTimerTool::TMR_t<1u>::isr()+0x58>
    1d76:	4b15      	ldr	r3, [pc, #84]	; (1dcc <TeensyTimerTool::TMR_t<1u>::isr()+0xa4>)
    1d78:	681a      	ldr	r2, [r3, #0]
    1d7a:	8a93      	ldrh	r3, [r2, #20]
    1d7c:	06d8      	lsls	r0, r3, #27
    1d7e:	d414      	bmi.n	1daa <TeensyTimerTool::TMR_t<1u>::isr()+0x82>
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
            callbacks[2]();
        }

        if (callbacks[3] != nullptr && pCH3->CSCTRL & TMR_CSCTRL_TCF1)
    1d80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1d82:	490f      	ldr	r1, [pc, #60]	; (1dc0 <TeensyTimerTool::TMR_t<1u>::isr()+0x98>)
    1d84:	b173      	cbz	r3, 1da4 <TeensyTimerTool::TMR_t<1u>::isr()+0x7c>
    1d86:	4b12      	ldr	r3, [pc, #72]	; (1dd0 <TeensyTimerTool::TMR_t<1u>::isr()+0xa8>)
    1d88:	681a      	ldr	r2, [r3, #0]
    1d8a:	8a93      	ldrh	r3, [r2, #20]
    1d8c:	06db      	lsls	r3, r3, #27
    1d8e:	d509      	bpl.n	1da4 <TeensyTimerTool::TMR_t<1u>::isr()+0x7c>
        {
            pCH3->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1d90:	8a93      	ldrh	r3, [r2, #20]
    1d92:	f101 0030 	add.w	r0, r1, #48	; 0x30
    1d96:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    1d98:	f023 0310 	bic.w	r3, r3, #16
    1d9c:	041b      	lsls	r3, r3, #16
    1d9e:	0c1b      	lsrs	r3, r3, #16
    1da0:	8293      	strh	r3, [r2, #20]
    1da2:	4788      	blx	r1
            callbacks[3]();
        }
        asm volatile("dsb"); //wait until register changes propagated through the cache
    1da4:	f3bf 8f4f 	dsb	sy
    }
    1da8:	bd10      	pop	{r4, pc}
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1daa:	8a93      	ldrh	r3, [r2, #20]
    1dac:	f101 0020 	add.w	r0, r1, #32
    1db0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    1db2:	f023 0310 	bic.w	r3, r3, #16
    1db6:	041b      	lsls	r3, r3, #16
    1db8:	0c1b      	lsrs	r3, r3, #16
    1dba:	8293      	strh	r3, [r2, #20]
    1dbc:	4788      	blx	r1
    1dbe:	e7df      	b.n	1d80 <TeensyTimerTool::TMR_t<1u>::isr()+0x58>
    1dc0:	20001a1c 	.word	0x20001a1c
    1dc4:	20001a18 	.word	0x20001a18
    1dc8:	20001960 	.word	0x20001960
    1dcc:	2000195c 	.word	0x2000195c
    1dd0:	20001958 	.word	0x20001958

00001dd4 <TeensyTimerTool::TMR_t<2u>::isr()>:
        }
        return nullptr;
    }

    template <unsigned m>
    void TMR_t<m>::isr()
    1dd4:	b510      	push	{r4, lr}
    1dd6:	4c25      	ldr	r4, [pc, #148]	; (1e6c <TeensyTimerTool::TMR_t<2u>::isr()+0x98>)
    {
        // no loop to gain some time by avoiding indirections and pointer calculations
        if (callbacks[0] != nullptr && pCH0->CSCTRL & TMR_CSCTRL_TCF1)
    1dd8:	68a3      	ldr	r3, [r4, #8]
    1dda:	b16b      	cbz	r3, 1df8 <TeensyTimerTool::TMR_t<2u>::isr()+0x24>
    1ddc:	4b24      	ldr	r3, [pc, #144]	; (1e70 <TeensyTimerTool::TMR_t<2u>::isr()+0x9c>)
    1dde:	681a      	ldr	r2, [r3, #0]
    1de0:	8a93      	ldrh	r3, [r2, #20]
    1de2:	06d9      	lsls	r1, r3, #27
    1de4:	d508      	bpl.n	1df8 <TeensyTimerTool::TMR_t<2u>::isr()+0x24>
        {
            pCH0->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1de6:	8a93      	ldrh	r3, [r2, #20]
    1de8:	4620      	mov	r0, r4
    1dea:	68e1      	ldr	r1, [r4, #12]
    1dec:	f023 0310 	bic.w	r3, r3, #16
    1df0:	041b      	lsls	r3, r3, #16
    1df2:	0c1b      	lsrs	r3, r3, #16
    1df4:	8293      	strh	r3, [r2, #20]
    1df6:	4788      	blx	r1
            callbacks[0]();
        }

        if (callbacks[1] != nullptr && pCH1->CSCTRL & TMR_CSCTRL_TCF1)
    1df8:	69a3      	ldr	r3, [r4, #24]
    1dfa:	491c      	ldr	r1, [pc, #112]	; (1e6c <TeensyTimerTool::TMR_t<2u>::isr()+0x98>)
    1dfc:	b173      	cbz	r3, 1e1c <TeensyTimerTool::TMR_t<2u>::isr()+0x48>
    1dfe:	4b1d      	ldr	r3, [pc, #116]	; (1e74 <TeensyTimerTool::TMR_t<2u>::isr()+0xa0>)
    1e00:	681a      	ldr	r2, [r3, #0]
    1e02:	8a93      	ldrh	r3, [r2, #20]
    1e04:	06db      	lsls	r3, r3, #27
    1e06:	d509      	bpl.n	1e1c <TeensyTimerTool::TMR_t<2u>::isr()+0x48>
        {
            pCH1->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1e08:	8a93      	ldrh	r3, [r2, #20]
    1e0a:	f101 0010 	add.w	r0, r1, #16
    1e0e:	69c9      	ldr	r1, [r1, #28]
    1e10:	f023 0310 	bic.w	r3, r3, #16
    1e14:	041b      	lsls	r3, r3, #16
    1e16:	0c1b      	lsrs	r3, r3, #16
    1e18:	8293      	strh	r3, [r2, #20]
    1e1a:	4788      	blx	r1
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
    1e1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e1e:	4913      	ldr	r1, [pc, #76]	; (1e6c <TeensyTimerTool::TMR_t<2u>::isr()+0x98>)
    1e20:	b123      	cbz	r3, 1e2c <TeensyTimerTool::TMR_t<2u>::isr()+0x58>
    1e22:	4b15      	ldr	r3, [pc, #84]	; (1e78 <TeensyTimerTool::TMR_t<2u>::isr()+0xa4>)
    1e24:	681a      	ldr	r2, [r3, #0]
    1e26:	8a93      	ldrh	r3, [r2, #20]
    1e28:	06d8      	lsls	r0, r3, #27
    1e2a:	d414      	bmi.n	1e56 <TeensyTimerTool::TMR_t<2u>::isr()+0x82>
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
            callbacks[2]();
        }

        if (callbacks[3] != nullptr && pCH3->CSCTRL & TMR_CSCTRL_TCF1)
    1e2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1e2e:	490f      	ldr	r1, [pc, #60]	; (1e6c <TeensyTimerTool::TMR_t<2u>::isr()+0x98>)
    1e30:	b173      	cbz	r3, 1e50 <TeensyTimerTool::TMR_t<2u>::isr()+0x7c>
    1e32:	4b12      	ldr	r3, [pc, #72]	; (1e7c <TeensyTimerTool::TMR_t<2u>::isr()+0xa8>)
    1e34:	681a      	ldr	r2, [r3, #0]
    1e36:	8a93      	ldrh	r3, [r2, #20]
    1e38:	06db      	lsls	r3, r3, #27
    1e3a:	d509      	bpl.n	1e50 <TeensyTimerTool::TMR_t<2u>::isr()+0x7c>
        {
            pCH3->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1e3c:	8a93      	ldrh	r3, [r2, #20]
    1e3e:	f101 0030 	add.w	r0, r1, #48	; 0x30
    1e42:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    1e44:	f023 0310 	bic.w	r3, r3, #16
    1e48:	041b      	lsls	r3, r3, #16
    1e4a:	0c1b      	lsrs	r3, r3, #16
    1e4c:	8293      	strh	r3, [r2, #20]
    1e4e:	4788      	blx	r1
            callbacks[3]();
        }
        asm volatile("dsb"); //wait until register changes propagated through the cache
    1e50:	f3bf 8f4f 	dsb	sy
    }
    1e54:	bd10      	pop	{r4, pc}
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1e56:	8a93      	ldrh	r3, [r2, #20]
    1e58:	f101 0020 	add.w	r0, r1, #32
    1e5c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    1e5e:	f023 0310 	bic.w	r3, r3, #16
    1e62:	041b      	lsls	r3, r3, #16
    1e64:	0c1b      	lsrs	r3, r3, #16
    1e66:	8293      	strh	r3, [r2, #20]
    1e68:	4788      	blx	r1
    1e6a:	e7df      	b.n	1e2c <TeensyTimerTool::TMR_t<2u>::isr()+0x58>
    1e6c:	200019d8 	.word	0x200019d8
    1e70:	200019d4 	.word	0x200019d4
    1e74:	20001954 	.word	0x20001954
    1e78:	20001950 	.word	0x20001950
    1e7c:	2000194c 	.word	0x2000194c

00001e80 <TeensyTimerTool::TMR_t<3u>::isr()>:
        }
        return nullptr;
    }

    template <unsigned m>
    void TMR_t<m>::isr()
    1e80:	b510      	push	{r4, lr}
    1e82:	4c25      	ldr	r4, [pc, #148]	; (1f18 <TeensyTimerTool::TMR_t<3u>::isr()+0x98>)
    {
        // no loop to gain some time by avoiding indirections and pointer calculations
        if (callbacks[0] != nullptr && pCH0->CSCTRL & TMR_CSCTRL_TCF1)
    1e84:	68a3      	ldr	r3, [r4, #8]
    1e86:	b16b      	cbz	r3, 1ea4 <TeensyTimerTool::TMR_t<3u>::isr()+0x24>
    1e88:	4b24      	ldr	r3, [pc, #144]	; (1f1c <TeensyTimerTool::TMR_t<3u>::isr()+0x9c>)
    1e8a:	681a      	ldr	r2, [r3, #0]
    1e8c:	8a93      	ldrh	r3, [r2, #20]
    1e8e:	06d9      	lsls	r1, r3, #27
    1e90:	d508      	bpl.n	1ea4 <TeensyTimerTool::TMR_t<3u>::isr()+0x24>
        {
            pCH0->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1e92:	8a93      	ldrh	r3, [r2, #20]
    1e94:	4620      	mov	r0, r4
    1e96:	68e1      	ldr	r1, [r4, #12]
    1e98:	f023 0310 	bic.w	r3, r3, #16
    1e9c:	041b      	lsls	r3, r3, #16
    1e9e:	0c1b      	lsrs	r3, r3, #16
    1ea0:	8293      	strh	r3, [r2, #20]
    1ea2:	4788      	blx	r1
            callbacks[0]();
        }

        if (callbacks[1] != nullptr && pCH1->CSCTRL & TMR_CSCTRL_TCF1)
    1ea4:	69a3      	ldr	r3, [r4, #24]
    1ea6:	491c      	ldr	r1, [pc, #112]	; (1f18 <TeensyTimerTool::TMR_t<3u>::isr()+0x98>)
    1ea8:	b173      	cbz	r3, 1ec8 <TeensyTimerTool::TMR_t<3u>::isr()+0x48>
    1eaa:	4b1d      	ldr	r3, [pc, #116]	; (1f20 <TeensyTimerTool::TMR_t<3u>::isr()+0xa0>)
    1eac:	681a      	ldr	r2, [r3, #0]
    1eae:	8a93      	ldrh	r3, [r2, #20]
    1eb0:	06db      	lsls	r3, r3, #27
    1eb2:	d509      	bpl.n	1ec8 <TeensyTimerTool::TMR_t<3u>::isr()+0x48>
        {
            pCH1->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1eb4:	8a93      	ldrh	r3, [r2, #20]
    1eb6:	f101 0010 	add.w	r0, r1, #16
    1eba:	69c9      	ldr	r1, [r1, #28]
    1ebc:	f023 0310 	bic.w	r3, r3, #16
    1ec0:	041b      	lsls	r3, r3, #16
    1ec2:	0c1b      	lsrs	r3, r3, #16
    1ec4:	8293      	strh	r3, [r2, #20]
    1ec6:	4788      	blx	r1
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
    1ec8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1eca:	4913      	ldr	r1, [pc, #76]	; (1f18 <TeensyTimerTool::TMR_t<3u>::isr()+0x98>)
    1ecc:	b123      	cbz	r3, 1ed8 <TeensyTimerTool::TMR_t<3u>::isr()+0x58>
    1ece:	4b15      	ldr	r3, [pc, #84]	; (1f24 <TeensyTimerTool::TMR_t<3u>::isr()+0xa4>)
    1ed0:	681a      	ldr	r2, [r3, #0]
    1ed2:	8a93      	ldrh	r3, [r2, #20]
    1ed4:	06d8      	lsls	r0, r3, #27
    1ed6:	d414      	bmi.n	1f02 <TeensyTimerTool::TMR_t<3u>::isr()+0x82>
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
            callbacks[2]();
        }

        if (callbacks[3] != nullptr && pCH3->CSCTRL & TMR_CSCTRL_TCF1)
    1ed8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1eda:	490f      	ldr	r1, [pc, #60]	; (1f18 <TeensyTimerTool::TMR_t<3u>::isr()+0x98>)
    1edc:	b173      	cbz	r3, 1efc <TeensyTimerTool::TMR_t<3u>::isr()+0x7c>
    1ede:	4b12      	ldr	r3, [pc, #72]	; (1f28 <TeensyTimerTool::TMR_t<3u>::isr()+0xa8>)
    1ee0:	681a      	ldr	r2, [r3, #0]
    1ee2:	8a93      	ldrh	r3, [r2, #20]
    1ee4:	06db      	lsls	r3, r3, #27
    1ee6:	d509      	bpl.n	1efc <TeensyTimerTool::TMR_t<3u>::isr()+0x7c>
        {
            pCH3->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1ee8:	8a93      	ldrh	r3, [r2, #20]
    1eea:	f101 0030 	add.w	r0, r1, #48	; 0x30
    1eee:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    1ef0:	f023 0310 	bic.w	r3, r3, #16
    1ef4:	041b      	lsls	r3, r3, #16
    1ef6:	0c1b      	lsrs	r3, r3, #16
    1ef8:	8293      	strh	r3, [r2, #20]
    1efa:	4788      	blx	r1
            callbacks[3]();
        }
        asm volatile("dsb"); //wait until register changes propagated through the cache
    1efc:	f3bf 8f4f 	dsb	sy
    }
    1f00:	bd10      	pop	{r4, pc}
            callbacks[1]();
        }

        if (callbacks[2] != nullptr && pCH2->CSCTRL & TMR_CSCTRL_TCF1)
        {
            pCH2->CSCTRL &= ~TMR_CSCTRL_TCF1;
    1f02:	8a93      	ldrh	r3, [r2, #20]
    1f04:	f101 0020 	add.w	r0, r1, #32
    1f08:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    1f0a:	f023 0310 	bic.w	r3, r3, #16
    1f0e:	041b      	lsls	r3, r3, #16
    1f10:	0c1b      	lsrs	r3, r3, #16
    1f12:	8293      	strh	r3, [r2, #20]
    1f14:	4788      	blx	r1
    1f16:	e7df      	b.n	1ed8 <TeensyTimerTool::TMR_t<3u>::isr()+0x58>
    1f18:	20001994 	.word	0x20001994
    1f1c:	20001990 	.word	0x20001990
    1f20:	20001948 	.word	0x20001948
    1f24:	20001944 	.word	0x20001944
    1f28:	20001940 	.word	0x20001940

00001f2c <TeensyTimerTool::GPT_t<0u>::isr()>:
    }

    template <unsigned tmoduleNr>
    void GPT_t<tmoduleNr>::isr()
    {
        if (!channel->periodic)
    1f2c:	4b0a      	ldr	r3, [pc, #40]	; (1f58 <TeensyTimerTool::GPT_t<0u>::isr()+0x2c>)
    1f2e:	681b      	ldr	r3, [r3, #0]
    1f30:	7a1b      	ldrb	r3, [r3, #8]
        }
        return nullptr;
    }

    template <unsigned tmoduleNr>
    void GPT_t<tmoduleNr>::isr()
    1f32:	b510      	push	{r4, lr}
    {
        if (!channel->periodic)
    1f34:	b923      	cbnz	r3, 1f40 <TeensyTimerTool::GPT_t<0u>::isr()+0x14>
            pGPT->CR &= ~GPT_CR_EN; // stop timer in one shot mode
    1f36:	4a09      	ldr	r2, [pc, #36]	; (1f5c <TeensyTimerTool::GPT_t<0u>::isr()+0x30>)
    1f38:	6813      	ldr	r3, [r2, #0]
    1f3a:	f023 0301 	bic.w	r3, r3, #1
    1f3e:	6013      	str	r3, [r2, #0]
    1f40:	4807      	ldr	r0, [pc, #28]	; (1f60 <TeensyTimerTool::GPT_t<0u>::isr()+0x34>)

        pGPT->SR = 0x3F; // reset all interrupt flags
    1f42:	223f      	movs	r2, #63	; 0x3f
    1f44:	4c05      	ldr	r4, [pc, #20]	; (1f5c <TeensyTimerTool::GPT_t<0u>::isr()+0x30>)
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    1f46:	6883      	ldr	r3, [r0, #8]
    1f48:	60a2      	str	r2, [r4, #8]
    1f4a:	b11b      	cbz	r3, 1f54 <TeensyTimerTool::GPT_t<0u>::isr()+0x28>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    1f4c:	68c3      	ldr	r3, [r0, #12]
    1f4e:	4798      	blx	r3
        callback();      // we only enabled the OF1 interrupt-> no need to find out which interrupt was actually called
        pGPT->SR;                 // re-read flag to prevent re entering, takes very long, seems to work without?
    1f50:	68a3      	ldr	r3, [r4, #8]
    1f52:	bd10      	pop	{r4, pc}
    1f54:	e7fe      	b.n	1f54 <TeensyTimerTool::GPT_t<0u>::isr()+0x28>
    1f56:	bf00      	nop
    1f58:	200018dc 	.word	0x200018dc
    1f5c:	401ec000 	.word	0x401ec000
    1f60:	20001980 	.word	0x20001980

00001f64 <TeensyTimerTool::GPT_t<1u>::isr()>:
    }

    template <unsigned tmoduleNr>
    void GPT_t<tmoduleNr>::isr()
    {
        if (!channel->periodic)
    1f64:	4b0a      	ldr	r3, [pc, #40]	; (1f90 <TeensyTimerTool::GPT_t<1u>::isr()+0x2c>)
    1f66:	681b      	ldr	r3, [r3, #0]
    1f68:	7a1b      	ldrb	r3, [r3, #8]
        }
        return nullptr;
    }

    template <unsigned tmoduleNr>
    void GPT_t<tmoduleNr>::isr()
    1f6a:	b510      	push	{r4, lr}
    {
        if (!channel->periodic)
    1f6c:	b923      	cbnz	r3, 1f78 <TeensyTimerTool::GPT_t<1u>::isr()+0x14>
            pGPT->CR &= ~GPT_CR_EN; // stop timer in one shot mode
    1f6e:	4a09      	ldr	r2, [pc, #36]	; (1f94 <TeensyTimerTool::GPT_t<1u>::isr()+0x30>)
    1f70:	6813      	ldr	r3, [r2, #0]
    1f72:	f023 0301 	bic.w	r3, r3, #1
    1f76:	6013      	str	r3, [r2, #0]
    1f78:	4807      	ldr	r0, [pc, #28]	; (1f98 <TeensyTimerTool::GPT_t<1u>::isr()+0x34>)

        pGPT->SR = 0x3F; // reset all interrupt flags
    1f7a:	223f      	movs	r2, #63	; 0x3f
    1f7c:	4c05      	ldr	r4, [pc, #20]	; (1f94 <TeensyTimerTool::GPT_t<1u>::isr()+0x30>)
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    1f7e:	6883      	ldr	r3, [r0, #8]
    1f80:	60a2      	str	r2, [r4, #8]
    1f82:	b11b      	cbz	r3, 1f8c <TeensyTimerTool::GPT_t<1u>::isr()+0x28>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    1f84:	68c3      	ldr	r3, [r0, #12]
    1f86:	4798      	blx	r3
        callback();      // we only enabled the OF1 interrupt-> no need to find out which interrupt was actually called
        pGPT->SR;                 // re-read flag to prevent re entering, takes very long, seems to work without?
    1f88:	68a3      	ldr	r3, [r4, #8]
    1f8a:	bd10      	pop	{r4, pc}
    1f8c:	e7fe      	b.n	1f8c <TeensyTimerTool::GPT_t<1u>::isr()+0x28>
    1f8e:	bf00      	nop
    1f90:	200018d4 	.word	0x200018d4
    1f94:	401f0000 	.word	0x401f0000
    1f98:	20001970 	.word	0x20001970

00001f9c <__tcf_0>:

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    1f9c:	b538      	push	{r3, r4, r5, lr}
    1f9e:	4c06      	ldr	r4, [pc, #24]	; (1fb8 <__tcf_0+0x1c>)
    1fa0:	f1a4 0540 	sub.w	r5, r4, #64	; 0x40
    1fa4:	3c10      	subs	r4, #16

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1fa6:	68a3      	ldr	r3, [r4, #8]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1fa8:	2203      	movs	r2, #3
    1faa:	4621      	mov	r1, r4
    1fac:	4620      	mov	r0, r4

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1fae:	b103      	cbz	r3, 1fb2 <__tcf_0+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1fb0:	4798      	blx	r3
    1fb2:	42ac      	cmp	r4, r5
    1fb4:	d1f6      	bne.n	1fa4 <__tcf_0+0x8>
    1fb6:	bd38      	pop	{r3, r4, r5, pc}
    1fb8:	20001aa0 	.word	0x20001aa0

00001fbc <__tcf_1>:
    1fbc:	b538      	push	{r3, r4, r5, lr}
    1fbe:	4c06      	ldr	r4, [pc, #24]	; (1fd8 <__tcf_1+0x1c>)
    1fc0:	f1a4 0540 	sub.w	r5, r4, #64	; 0x40
    1fc4:	3c10      	subs	r4, #16

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1fc6:	68a3      	ldr	r3, [r4, #8]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1fc8:	2203      	movs	r2, #3
    1fca:	4621      	mov	r1, r4
    1fcc:	4620      	mov	r0, r4

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1fce:	b103      	cbz	r3, 1fd2 <__tcf_1+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1fd0:	4798      	blx	r3
    1fd2:	42ac      	cmp	r4, r5
    1fd4:	d1f6      	bne.n	1fc4 <__tcf_1+0x8>
    1fd6:	bd38      	pop	{r3, r4, r5, pc}
    1fd8:	20001a5c 	.word	0x20001a5c

00001fdc <__tcf_2>:
    1fdc:	b538      	push	{r3, r4, r5, lr}
    1fde:	4c06      	ldr	r4, [pc, #24]	; (1ff8 <__tcf_2+0x1c>)
    1fe0:	f1a4 0540 	sub.w	r5, r4, #64	; 0x40
    1fe4:	3c10      	subs	r4, #16

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1fe6:	68a3      	ldr	r3, [r4, #8]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1fe8:	2203      	movs	r2, #3
    1fea:	4621      	mov	r1, r4
    1fec:	4620      	mov	r0, r4

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    1fee:	b103      	cbz	r3, 1ff2 <__tcf_2+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    1ff0:	4798      	blx	r3
    1ff2:	42ac      	cmp	r4, r5
    1ff4:	d1f6      	bne.n	1fe4 <__tcf_2+0x8>
    1ff6:	bd38      	pop	{r3, r4, r5, pc}
    1ff8:	20001a18 	.word	0x20001a18

00001ffc <__tcf_3>:
    1ffc:	b538      	push	{r3, r4, r5, lr}
    1ffe:	4c06      	ldr	r4, [pc, #24]	; (2018 <__tcf_3+0x1c>)
    2000:	f1a4 0540 	sub.w	r5, r4, #64	; 0x40
    2004:	3c10      	subs	r4, #16

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2006:	68a3      	ldr	r3, [r4, #8]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2008:	2203      	movs	r2, #3
    200a:	4621      	mov	r1, r4
    200c:	4620      	mov	r0, r4

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    200e:	b103      	cbz	r3, 2012 <__tcf_3+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2010:	4798      	blx	r3
    2012:	42ac      	cmp	r4, r5
    2014:	d1f6      	bne.n	2004 <__tcf_3+0x8>
    2016:	bd38      	pop	{r3, r4, r5, pc}
    2018:	200019d4 	.word	0x200019d4

0000201c <TeensyTimerTool::TckChannel<unsigned long>::triggerDirect(unsigned long)>:
        this->triggered = false;
        return errorCode::OK;
    }

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    201c:	b410      	push	{r4}
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    201e:	4c06      	ldr	r4, [pc, #24]	; (2038 <TeensyTimerTool::TckChannel<unsigned long>::triggerDirect(unsigned long)+0x1c>)
        this->triggered = false;
        return errorCode::OK;
    }

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    2020:	4603      	mov	r3, r0
    {
        this->startCnt = getCycleCounter();
        this->nextPeriod = reload;
        this->currentPeriod = this->nextPeriod;
        this->triggered = true;
    2022:	2201      	movs	r2, #1
        return errorCode::OK;
    }
    2024:	2000      	movs	r0, #0
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    2026:	6824      	ldr	r4, [r4, #0]

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
        this->nextPeriod = reload;
    2028:	6259      	str	r1, [r3, #36]	; 0x24
    }

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
    202a:	61dc      	str	r4, [r3, #28]
        this->nextPeriod = reload;
        this->currentPeriod = this->nextPeriod;
    202c:	6219      	str	r1, [r3, #32]
        this->triggered = true;
    202e:	765a      	strb	r2, [r3, #25]
        return errorCode::OK;
    }
    2030:	f85d 4b04 	ldr.w	r4, [sp], #4
    2034:	4770      	bx	lr
    2036:	bf00      	nop
    2038:	e0001004 	.word	0xe0001004

0000203c <TeensyTimerTool::TckChannel<unsigned long>::start()>:
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    203c:	4a03      	ldr	r2, [pc, #12]	; (204c <TeensyTimerTool::TckChannel<unsigned long>::start()+0x10>)

        return errorCode::OK;
    }

    template <typename T>
    errorCode TckChannel<T>::start()
    203e:	4603      	mov	r3, r0
    {
        this->startCnt = getCycleCounter();
        this->triggered = true;
    2040:	2101      	movs	r1, #1
        return errorCode::OK;
    }
    2042:	2000      	movs	r0, #0
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    2044:	6812      	ldr	r2, [r2, #0]

    template <typename T>
    errorCode TckChannel<T>::start()
    {
        this->startCnt = getCycleCounter();
        this->triggered = true;
    2046:	7659      	strb	r1, [r3, #25]
    }

    template <typename T>
    errorCode TckChannel<T>::start()
    {
        this->startCnt = getCycleCounter();
    2048:	61da      	str	r2, [r3, #28]
        this->triggered = true;
        return errorCode::OK;
    }
    204a:	4770      	bx	lr
    204c:	e0001004 	.word	0xe0001004

00002050 <TeensyTimerTool::TckChannel<unsigned long>::stop()>:

    template <typename T>
    errorCode TckChannel<T>::stop()
    {
        this->triggered = false;
    2050:	2300      	movs	r3, #0
    2052:	7643      	strb	r3, [r0, #25]
        return errorCode::OK;
    }
    2054:	4618      	mov	r0, r3
    2056:	4770      	bx	lr

00002058 <TeensyTimerTool::TckChannel<unsigned long>::getMaxPeriod() const>:
        {
            *reload = microsecondToCycles(delay);
            return errorCode::OK;
        }

        float getMaxPeriod() const override { return getMaxMicros() / 1E6; } // seconds
    2058:	eddf 6a05 	vldr	s13, [pc, #20]	; 2070 <TeensyTimerTool::TckChannel<unsigned long>::getMaxPeriod() const+0x18>
    205c:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
    2060:	eddf 7a04 	vldr	s15, [pc, #16]	; 2074 <TeensyTimerTool::TckChannel<unsigned long>::getMaxPeriod() const+0x1c>
    2064:	ee86 0a87 	vdiv.f32	s0, s13, s14
    2068:	ee80 0a27 	vdiv.f32	s0, s0, s15
    206c:	4770      	bx	lr
    206e:	bf00      	nop
    2070:	4f700000 	.word	0x4f700000
    2074:	49742400 	.word	0x49742400

00002078 <TeensyTimerTool::TckChannel<unsigned long>::tick()>:
    {
        return triggerDirect(microsecondToCycles(delay));
    }

    template <typename counter_t>
    bool TckChannel<counter_t>::tick()
    2078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
    207a:	4d10      	ldr	r5, [pc, #64]	; (20bc <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x44>)
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    207c:	4b10      	ldr	r3, [pc, #64]	; (20c0 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x48>)
    template <typename counter_t>
    bool TckChannel<counter_t>::tick()
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
    207e:	782c      	ldrb	r4, [r5, #0]
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    2080:	681a      	ldr	r2, [r3, #0]
    template <typename counter_t>
    bool TckChannel<counter_t>::tick()
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
    2082:	b9b4      	cbnz	r4, 20b2 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x3a>
    2084:	6a01      	ldr	r1, [r0, #32]
    2086:	b191      	cbz	r1, 20ae <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x36>
    2088:	7e46      	ldrb	r6, [r0, #25]
    208a:	b186      	cbz	r6, 20ae <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x36>
    208c:	69c3      	ldr	r3, [r0, #28]
    208e:	1ad2      	subs	r2, r2, r3
    2090:	4291      	cmp	r1, r2
    2092:	d80c      	bhi.n	20ae <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x36>
        {
            lock = true;
            //this->startCnt = now;
            this->startCnt += currentPeriod;
    2094:	440b      	add	r3, r1
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
        {
            lock = true;
    2096:	2701      	movs	r7, #1
            //this->startCnt = now;
            this->startCnt += currentPeriod;
            this->triggered = this->periodic; // i.e., stays triggerd if periodic, stops if oneShot
    2098:	7e01      	ldrb	r1, [r0, #24]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    209a:	6902      	ldr	r2, [r0, #16]
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
        {
            lock = true;
            //this->startCnt = now;
            this->startCnt += currentPeriod;
    209c:	61c3      	str	r3, [r0, #28]
    {
        static bool lock = false;
        counter_t now = getCycleCounter();
        if (!lock && this->currentPeriod != 0 && this->triggered && (now - this->startCnt) >= this->currentPeriod)
        {
            lock = true;
    209e:	702f      	strb	r7, [r5, #0]
            //this->startCnt = now;
            this->startCnt += currentPeriod;
            this->triggered = this->periodic; // i.e., stays triggerd if periodic, stops if oneShot
    20a0:	7641      	strb	r1, [r0, #25]
    20a2:	b14a      	cbz	r2, 20b8 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x40>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    20a4:	6943      	ldr	r3, [r0, #20]
    20a6:	3008      	adds	r0, #8
    20a8:	4798      	blx	r3
            callback();
            lock = false;
    20aa:	702c      	strb	r4, [r5, #0]
            return true;
    20ac:	4634      	mov	r4, r6
        } else
        {
            return false;
        }
    }
    20ae:	4620      	mov	r0, r4
    20b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            callback();
            lock = false;
            return true;
        } else
        {
            return false;
    20b2:	2400      	movs	r4, #0
        }
    }
    20b4:	4620      	mov	r0, r4
    20b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20b8:	e7fe      	b.n	20b8 <TeensyTimerTool::TckChannel<unsigned long>::tick()+0x40>
    20ba:	bf00      	nop
    20bc:	200018d0 	.word	0x200018d0
    20c0:	e0001004 	.word	0xe0001004

000020c4 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()>:
    template <typename CounterType>
    class TckChannel : public TckChannelBase
    {
     public:
        TckChannel();
        virtual ~TckChannel(){}; //TBD
    20c4:	4a06      	ldr	r2, [pc, #24]	; (20e0 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()+0x1c>)

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    20c6:	6903      	ldr	r3, [r0, #16]
    20c8:	b510      	push	{r4, lr}
    20ca:	4604      	mov	r4, r0
    20cc:	6002      	str	r2, [r0, #0]
    20ce:	b123      	cbz	r3, 20da <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    20d0:	f100 0108 	add.w	r1, r0, #8
    20d4:	2203      	movs	r2, #3
    20d6:	4608      	mov	r0, r1
    20d8:	4798      	blx	r3
    20da:	4620      	mov	r0, r4
    20dc:	bd10      	pop	{r4, pc}
    20de:	bf00      	nop
    20e0:	20000278 	.word	0x20000278

000020e4 <TeensyTimerTool::GPT_t<0u>::getTimer()>:

    template <unsigned moduleNr>
    IMXRT_GPT_t* const GPT_t<moduleNr>::pGPT = reinterpret_cast<IMXRT_GPT_t*>(moduleNr == 0 ? &IMXRT_GPT1 : &IMXRT_GPT2);

    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    20e4:	b538      	push	{r3, r4, r5, lr}
    {
        if (!isInitialized)
    20e6:	4b1d      	ldr	r3, [pc, #116]	; (215c <TeensyTimerTool::GPT_t<0u>::getTimer()+0x78>)
    20e8:	781a      	ldrb	r2, [r3, #0]
    20ea:	2a00      	cmp	r2, #0
    20ec:	d133      	bne.n	2156 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x72>
        {
            isInitialized = true;

            if (moduleNr == 0) // GPT1 clock settings
                CCM_CCGR1 |= CCM_CCGR1_GPT1_BUS(CCM_CCGR_ON) | CCM_CCGR1_GPT1_SERIAL(CCM_CCGR_ON);
    20ee:	4c1c      	ldr	r4, [pc, #112]	; (2160 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x7c>)
    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            isInitialized = true;
    20f0:	2101      	movs	r1, #1
            if(USE_GPT_PIT_150MHz) // timer clock setting from config.h
                CCM_CSCMR1 &= ~CCM_CSCMR1_PERCLK_CLK_SEL; // 150MHz
            else
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock
    20f2:	4d1c      	ldr	r5, [pc, #112]	; (2164 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x80>)
    20f4:	2242      	movs	r2, #66	; 0x42
    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            isInitialized = true;
    20f6:	7019      	strb	r1, [r3, #0]

            if (moduleNr == 0) // GPT1 clock settings
                CCM_CCGR1 |= CCM_CCGR1_GPT1_BUS(CCM_CCGR_ON) | CCM_CCGR1_GPT1_SERIAL(CCM_CCGR_ON);
    20f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    20fa:	491b      	ldr	r1, [pc, #108]	; (2168 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x84>)
    20fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    2100:	481a      	ldr	r0, [pc, #104]	; (216c <TeensyTimerTool::GPT_t<0u>::getTimer()+0x88>)
    2102:	66e3      	str	r3, [r4, #108]	; 0x6c
                CCM_CCGR0 |= CCM_CCGR0_GPT2_BUS(CCM_CCGR_ON) | CCM_CCGR0_GPT2_SERIAL(CCM_CCGR_ON);

            if(USE_GPT_PIT_150MHz) // timer clock setting from config.h
                CCM_CSCMR1 &= ~CCM_CSCMR1_PERCLK_CLK_SEL; // 150MHz
            else
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz
    2104:	69e3      	ldr	r3, [r4, #28]
    2106:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
    210a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    210e:	61e3      	str	r3, [r4, #28]

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock
    2110:	602a      	str	r2, [r5, #0]

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);
    2112:	4b17      	ldr	r3, [pc, #92]	; (2170 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x8c>)
    2114:	2210      	movs	r2, #16

            channel = new GptChannel(pGPT, &callback);
    2116:	2018      	movs	r0, #24
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);
    2118:	601a      	str	r2, [r3, #0]

            channel = new GptChannel(pGPT, &callback);
    211a:	f002 fe8d 	bl	4e38 <operator new(unsigned int)>
    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    211e:	69e2      	ldr	r2, [r4, #28]
    2120:	4603      	mov	r3, r0
    };

    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    2122:	4914      	ldr	r1, [pc, #80]	; (2174 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x90>)

    // IMPLEMENTATION ====================================================

    ITimerChannel::ITimerChannel(callback_t* cbStorage)
    {
        this->pCallback = cbStorage;
    2124:	4814      	ldr	r0, [pc, #80]	; (2178 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x94>)
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    2126:	0652      	lsls	r2, r2, #25
    };

    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    2128:	60dd      	str	r5, [r3, #12]
    212a:	6058      	str	r0, [r3, #4]
    212c:	6019      	str	r1, [r3, #0]
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    212e:	d507      	bpl.n	2140 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x5c>
    2130:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    2134:	4a11      	ldr	r2, [pc, #68]	; (217c <TeensyTimerTool::GPT_t<0u>::getTimer()+0x98>)
            return channel;
    2136:	4618      	mov	r0, r3
    2138:	edc3 7a05 	vstr	s15, [r3, #20]
            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);

            channel = new GptChannel(pGPT, &callback);
    213c:	6013      	str	r3, [r2, #0]
            return channel;
    213e:	bd38      	pop	{r3, r4, r5, pc}
    2140:	4a0f      	ldr	r2, [pc, #60]	; (2180 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x9c>)
    2142:	4910      	ldr	r1, [pc, #64]	; (2184 <TeensyTimerTool::GPT_t<0u>::getTimer()+0xa0>)
    2144:	6812      	ldr	r2, [r2, #0]
    2146:	fba1 1202 	umull	r1, r2, r1, r2
    214a:	0c92      	lsrs	r2, r2, #18
    214c:	ee07 2a90 	vmov	s15, r2
    2150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2154:	e7ee      	b.n	2134 <TeensyTimerTool::GPT_t<0u>::getTimer()+0x50>
        }
        return nullptr;
    2156:	2000      	movs	r0, #0
    }
    2158:	bd38      	pop	{r3, r4, r5, pc}
    215a:	bf00      	nop
    215c:	200018e0 	.word	0x200018e0
    2160:	400fc000 	.word	0x400fc000
    2164:	401ec000 	.word	0x401ec000
    2168:	20002000 	.word	0x20002000
    216c:	00001f2d 	.word	0x00001f2d
    2170:	e000e10c 	.word	0xe000e10c
    2174:	20000230 	.word	0x20000230
    2178:	20001980 	.word	0x20001980
    217c:	200018dc 	.word	0x200018dc
    2180:	20000770 	.word	0x20000770
    2184:	431bde83 	.word	0x431bde83

00002188 <TeensyTimerTool::GPT_t<1u>::getTimer()>:

    template <unsigned moduleNr>
    IMXRT_GPT_t* const GPT_t<moduleNr>::pGPT = reinterpret_cast<IMXRT_GPT_t*>(moduleNr == 0 ? &IMXRT_GPT1 : &IMXRT_GPT2);

    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    2188:	b538      	push	{r3, r4, r5, lr}
    {
        if (!isInitialized)
    218a:	4b1d      	ldr	r3, [pc, #116]	; (2200 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x78>)
    218c:	781a      	ldrb	r2, [r3, #0]
    218e:	2a00      	cmp	r2, #0
    2190:	d133      	bne.n	21fa <TeensyTimerTool::GPT_t<1u>::getTimer()+0x72>
            isInitialized = true;

            if (moduleNr == 0) // GPT1 clock settings
                CCM_CCGR1 |= CCM_CCGR1_GPT1_BUS(CCM_CCGR_ON) | CCM_CCGR1_GPT1_SERIAL(CCM_CCGR_ON);
            else // GPT2
                CCM_CCGR0 |= CCM_CCGR0_GPT2_BUS(CCM_CCGR_ON) | CCM_CCGR0_GPT2_SERIAL(CCM_CCGR_ON);
    2192:	4c1c      	ldr	r4, [pc, #112]	; (2204 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x7c>)
    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            isInitialized = true;
    2194:	2101      	movs	r1, #1
            if(USE_GPT_PIT_150MHz) // timer clock setting from config.h
                CCM_CSCMR1 &= ~CCM_CSCMR1_PERCLK_CLK_SEL; // 150MHz
            else
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock
    2196:	4d1c      	ldr	r5, [pc, #112]	; (2208 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x80>)
    2198:	2242      	movs	r2, #66	; 0x42
    template <unsigned moduleNr>
    ITimerChannel* GPT_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            isInitialized = true;
    219a:	7019      	strb	r1, [r3, #0]

            if (moduleNr == 0) // GPT1 clock settings
                CCM_CCGR1 |= CCM_CCGR1_GPT1_BUS(CCM_CCGR_ON) | CCM_CCGR1_GPT1_SERIAL(CCM_CCGR_ON);
            else // GPT2
                CCM_CCGR0 |= CCM_CCGR0_GPT2_BUS(CCM_CCGR_ON) | CCM_CCGR0_GPT2_SERIAL(CCM_CCGR_ON);
    219c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    219e:	491b      	ldr	r1, [pc, #108]	; (220c <TeensyTimerTool::GPT_t<1u>::getTimer()+0x84>)
    21a0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    21a4:	481a      	ldr	r0, [pc, #104]	; (2210 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x88>)
    21a6:	66a3      	str	r3, [r4, #104]	; 0x68

            if(USE_GPT_PIT_150MHz) // timer clock setting from config.h
                CCM_CSCMR1 &= ~CCM_CSCMR1_PERCLK_CLK_SEL; // 150MHz
            else
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz
    21a8:	69e3      	ldr	r3, [r4, #28]
    21aa:	f8c1 01d4 	str.w	r0, [r1, #468]	; 0x1d4
    21ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    21b2:	61e3      	str	r3, [r4, #28]

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock
    21b4:	602a      	str	r2, [r5, #0]

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);
    21b6:	4b17      	ldr	r3, [pc, #92]	; (2214 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x8c>)
    21b8:	2220      	movs	r2, #32

            channel = new GptChannel(pGPT, &callback);
    21ba:	2018      	movs	r0, #24
                CCM_CSCMR1 |= CCM_CSCMR1_PERCLK_CLK_SEL;  // 24MHz

            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);
    21bc:	601a      	str	r2, [r3, #0]

            channel = new GptChannel(pGPT, &callback);
    21be:	f002 fe3b 	bl	4e38 <operator new(unsigned int)>
    21c2:	69e2      	ldr	r2, [r4, #28]
    21c4:	4603      	mov	r3, r0
    };

    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    21c6:	4914      	ldr	r1, [pc, #80]	; (2218 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x90>)
    21c8:	4814      	ldr	r0, [pc, #80]	; (221c <TeensyTimerTool::GPT_t<1u>::getTimer()+0x94>)
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    21ca:	0652      	lsls	r2, r2, #25
    };

    // IMPLEMENTATION ==============================================

    GptChannel::GptChannel(IMXRT_GPT_t* registers, callback_t* cbStorage)
        : ITimerChannel(cbStorage), regs(registers)
    21cc:	60dd      	str	r5, [r3, #12]
    21ce:	6058      	str	r0, [r3, #4]
    21d0:	6019      	str	r1, [r3, #0]
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    21d2:	d507      	bpl.n	21e4 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x5c>
    21d4:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    21d8:	4a11      	ldr	r2, [pc, #68]	; (2220 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x98>)
            return channel;
    21da:	4618      	mov	r0, r3
    21dc:	edc3 7a05 	vstr	s15, [r3, #20]
            pGPT->CR = GPT_CR_CLKSRC(0x001) | GPT_CR_ENMOD; // stopped, restart mode and peripheral clock

            attachInterruptVector(irq, isr);
            NVIC_ENABLE_IRQ(irq);

            channel = new GptChannel(pGPT, &callback);
    21e0:	6013      	str	r3, [r2, #0]
            return channel;
    21e2:	bd38      	pop	{r3, r4, r5, pc}
    21e4:	4a0f      	ldr	r2, [pc, #60]	; (2224 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x9c>)
    21e6:	4910      	ldr	r1, [pc, #64]	; (2228 <TeensyTimerTool::GPT_t<1u>::getTimer()+0xa0>)
    21e8:	6812      	ldr	r2, [r2, #0]
    21ea:	fba1 1202 	umull	r1, r2, r1, r2
    21ee:	0c92      	lsrs	r2, r2, #18
    21f0:	ee07 2a90 	vmov	s15, r2
    21f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    21f8:	e7ee      	b.n	21d8 <TeensyTimerTool::GPT_t<1u>::getTimer()+0x50>
        }
        return nullptr;
    21fa:	2000      	movs	r0, #0
    }
    21fc:	bd38      	pop	{r3, r4, r5, pc}
    21fe:	bf00      	nop
    2200:	200018d8 	.word	0x200018d8
    2204:	400fc000 	.word	0x400fc000
    2208:	401f0000 	.word	0x401f0000
    220c:	20002000 	.word	0x20002000
    2210:	00001f65 	.word	0x00001f65
    2214:	e000e10c 	.word	0xe000e10c
    2218:	20000230 	.word	0x20000230
    221c:	20001970 	.word	0x20001970
    2220:	200018d4 	.word	0x200018d4
    2224:	20000770 	.word	0x20000770
    2228:	431bde83 	.word	0x431bde83

0000222c <TeensyTimerTool::TMRChannel::~TMRChannel()>:
    {
        this->regs = regs;
        setPrescaler(TMR_DEFAULT_PSC);
    }

    TMRChannel::~TMRChannel()
    222c:	b510      	push	{r4, lr}
    222e:	4604      	mov	r4, r0
    {
    }
    2230:	2118      	movs	r1, #24
    2232:	f002 fe03 	bl	4e3c <operator delete(void*, unsigned int)>
    2236:	4620      	mov	r0, r4
    2238:	bd10      	pop	{r4, pc}
    223a:	bf00      	nop

0000223c <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()>:
    223c:	4a08      	ldr	r2, [pc, #32]	; (2260 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()+0x24>)

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    223e:	6903      	ldr	r3, [r0, #16]
    2240:	b510      	push	{r4, lr}
    2242:	4604      	mov	r4, r0
    2244:	6002      	str	r2, [r0, #0]
    2246:	b123      	cbz	r3, 2252 <TeensyTimerTool::TckChannel<unsigned long>::~TckChannel()+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2248:	f100 0108 	add.w	r1, r0, #8
    224c:	2203      	movs	r2, #3
    224e:	4608      	mov	r0, r1
    2250:	4798      	blx	r3
    2252:	4620      	mov	r0, r4
    2254:	2134      	movs	r1, #52	; 0x34
    2256:	f002 fdf1 	bl	4e3c <operator delete(void*, unsigned int)>
    225a:	4620      	mov	r0, r4
    225c:	bd10      	pop	{r4, pc}
    225e:	bf00      	nop
    2260:	20000278 	.word	0x20000278

00002264 <TeensyTimerTool::ITimerChannel::setPrescaler(int)>:
        virtual errorCode getTriggerReload(float delay, uint64_t* reload) {return postError(errorCode::notImplemented);};

        virtual errorCode start() = 0;
        virtual errorCode stop() = 0;

        virtual errorCode setPrescaler(int  psc) { return postError(errorCode::notImplemented); }
    2264:	2069      	movs	r0, #105	; 0x69
    2266:	f000 be8d 	b.w	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    226a:	bf00      	nop

0000226c <TeensyTimerTool::ITimerChannel::getTriggerReload(float, unsigned long long*)>:
        virtual errorCode begin(callback_t callback, float period, bool oneShot) = 0;
        virtual errorCode trigger(float delay) = 0;
        virtual errorCode triggerDirect(uint32_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode triggerDirect(uint64_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode getTriggerReload(float delay, uint32_t* reload) {return postError(errorCode::notImplemented);};
        virtual errorCode getTriggerReload(float delay, uint64_t* reload) {return postError(errorCode::notImplemented);};
    226c:	2069      	movs	r0, #105	; 0x69
    226e:	f000 be89 	b.w	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    2272:	bf00      	nop

00002274 <TeensyTimerTool::ITimerChannel::getTriggerReload(float, unsigned long*)>:
     public:
        virtual errorCode begin(callback_t callback, float period, bool oneShot) = 0;
        virtual errorCode trigger(float delay) = 0;
        virtual errorCode triggerDirect(uint32_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode triggerDirect(uint64_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode getTriggerReload(float delay, uint32_t* reload) {return postError(errorCode::notImplemented);};
    2274:	2069      	movs	r0, #105	; 0x69
    2276:	f000 be85 	b.w	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    227a:	bf00      	nop

0000227c <TeensyTimerTool::ITimerChannel::triggerDirect(unsigned long long)>:
    {
     public:
        virtual errorCode begin(callback_t callback, float period, bool oneShot) = 0;
        virtual errorCode trigger(float delay) = 0;
        virtual errorCode triggerDirect(uint32_t reload){ return postError(errorCode::notImplemented); };
        virtual errorCode triggerDirect(uint64_t reload){ return postError(errorCode::notImplemented); };
    227c:	2069      	movs	r0, #105	; 0x69
    227e:	f000 be81 	b.w	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    2282:	bf00      	nop

00002284 <TeensyTimerTool::ITimerChannel::triggerDirect(unsigned long)>:
    class ITimerChannel
    {
     public:
        virtual errorCode begin(callback_t callback, float period, bool oneShot) = 0;
        virtual errorCode trigger(float delay) = 0;
        virtual errorCode triggerDirect(uint32_t reload){ return postError(errorCode::notImplemented); };
    2284:	2069      	movs	r0, #105	; 0x69
    2286:	f000 be7d 	b.w	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    228a:	bf00      	nop

0000228c <TeensyTimerTool::ITimerChannel::setNextPeriod(unsigned long)>:
        virtual errorCode setPrescaler(int  psc) { return postError(errorCode::notImplemented); }

        virtual float getMaxPeriod() const = 0;
        virtual errorCode setPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setCurrentPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setNextPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
    228c:	2069      	movs	r0, #105	; 0x69
    228e:	f000 be79 	b.w	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    2292:	bf00      	nop

00002294 <TeensyTimerTool::ITimerChannel::setCurrentPeriod(unsigned long)>:

        virtual errorCode setPrescaler(int  psc) { return postError(errorCode::notImplemented); }

        virtual float getMaxPeriod() const = 0;
        virtual errorCode setPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
        virtual errorCode setCurrentPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
    2294:	2069      	movs	r0, #105	; 0x69
    2296:	f000 be75 	b.w	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    229a:	bf00      	nop

0000229c <TeensyTimerTool::ITimerChannel::setPeriod(unsigned long)>:
        virtual errorCode stop() = 0;

        virtual errorCode setPrescaler(int  psc) { return postError(errorCode::notImplemented); }

        virtual float getMaxPeriod() const = 0;
        virtual errorCode setPeriod(uint32_t microSeconds) { return postError(errorCode::notImplemented); };
    229c:	2069      	movs	r0, #105	; 0x69
    229e:	f000 be71 	b.w	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    22a2:	bf00      	nop

000022a4 <TeensyTimerTool::TckChannel<unsigned long>::getTriggerReload(float, unsigned long*)>:
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    22a4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 22e8 <TeensyTimerTool::TckChannel<unsigned long>::getTriggerReload(float, unsigned long*)+0x44>
    22a8:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        inline errorCode start() override;
        inline errorCode stop() override;

        inline errorCode trigger(float delay_us) override;
        inline errorCode triggerDirect(CounterType reload) override;
        inline errorCode getTriggerReload(float delay, CounterType* reload) override
    22ac:	b538      	push	{r3, r4, r5, lr}
    22ae:	ed2d 8b02 	vpush	{d8}
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    22b2:	ee87 8a27 	vdiv.f32	s16, s14, s15
        inline errorCode start() override;
        inline errorCode stop() override;

        inline errorCode trigger(float delay_us) override;
        inline errorCode triggerDirect(CounterType reload) override;
        inline errorCode getTriggerReload(float delay, CounterType* reload) override
    22b6:	460d      	mov	r5, r1
    }

    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
    22b8:	eeb4 0ac8 	vcmpe.f32	s0, s16
    22bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    22c0:	dd08      	ble.n	22d4 <TeensyTimerTool::TckChannel<unsigned long>::getTriggerReload(float, unsigned long*)+0x30>
    22c2:	4604      	mov	r4, r0
        {
            microSecond = getMaxMicros();
            postError(errorCode::periodOverflow);
    22c4:	f06f 0063 	mvn.w	r0, #99	; 0x63
    22c8:	f000 fe5c 	bl	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
        {
            microSecond = getMaxMicros();
    22cc:	eeb0 0a48 	vmov.f32	s0, s16
    22d0:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30

        inline errorCode trigger(float delay_us) override;
        inline errorCode triggerDirect(CounterType reload) override;
        inline errorCode getTriggerReload(float delay, CounterType* reload) override
        {
            *reload = microsecondToCycles(delay);
    22d4:	ee20 0a27 	vmul.f32	s0, s0, s15
            return errorCode::OK;
        }
    22d8:	2000      	movs	r0, #0
    22da:	ecbd 8b02 	vpop	{d8}

        inline errorCode trigger(float delay_us) override;
        inline errorCode triggerDirect(CounterType reload) override;
        inline errorCode getTriggerReload(float delay, CounterType* reload) override
        {
            *reload = microsecondToCycles(delay);
    22de:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    22e2:	ed85 0a00 	vstr	s0, [r5]
            return errorCode::OK;
        }
    22e6:	bd38      	pop	{r3, r4, r5, pc}
    22e8:	4f700000 	.word	0x4f700000

000022ec <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()>:
    };

    // IMPLEMENTATION ==================================================================

    template<typename counterType>
    ITimerChannel* TCK_t::getTimer()
    22ec:	b570      	push	{r4, r5, r6, lr}
    {
        if (!isInitialized)
    22ee:	4c16      	ldr	r4, [pc, #88]	; (2348 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x5c>)
    22f0:	7821      	ldrb	r1, [r4, #0]
    22f2:	b989      	cbnz	r1, 2318 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x2c>
    22f4:	2250      	movs	r2, #80	; 0x50
    22f6:	4815      	ldr	r0, [pc, #84]	; (234c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x60>)
    22f8:	f003 fcc8 	bl	5c8c <memset>
        {
            for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
            {
                channels[chNr] = nullptr;
            }
            isInitialized = true;
    22fc:	2301      	movs	r3, #1

            // enable the cycle counter
            ARM_DEMCR |= ARM_DEMCR_TRCENA;
    22fe:	4914      	ldr	r1, [pc, #80]	; (2350 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x64>)
        {
            for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
            {
                channels[chNr] = nullptr;
            }
            isInitialized = true;
    2300:	7023      	strb	r3, [r4, #0]

            // enable the cycle counter
            ARM_DEMCR |= ARM_DEMCR_TRCENA;
    2302:	680b      	ldr	r3, [r1, #0]
            ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2304:	4a13      	ldr	r2, [pc, #76]	; (2354 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x68>)
                channels[chNr] = nullptr;
            }
            isInitialized = true;

            // enable the cycle counter
            ARM_DEMCR |= ARM_DEMCR_TRCENA;
    2306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    230a:	600b      	str	r3, [r1, #0]
            ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    230c:	6813      	ldr	r3, [r2, #0]
    230e:	f043 0301 	orr.w	r3, r3, #1
    2312:	6013      	str	r3, [r2, #0]

            // initialize the yield hook
           #if defined(TEENSYDUINO) && YIELD_TYPE == YIELD_STANDARD
              extern void initYieldHook();
              initYieldHook();
    2314:	f001 f818 	bl	3348 <TeensyTimerTool::initYieldHook()>
    2318:	4b0f      	ldr	r3, [pc, #60]	; (2358 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x6c>)
           #endif
        }

        for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
    231a:	2400      	movs	r4, #0
        {
            if (channels[chNr] == nullptr)
    231c:	f853 5f04 	ldr.w	r5, [r3, #4]!
    2320:	b125      	cbz	r5, 232c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x40>
              extern void initYieldHook();
              initYieldHook();
           #endif
        }

        for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
    2322:	3401      	adds	r4, #1
    2324:	2c14      	cmp	r4, #20
    2326:	d1f9      	bne.n	231c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x30>
                channels[chNr] = new TckChannel<counterType>();
                return channels[chNr];
            }
        }

        return nullptr;
    2328:	2000      	movs	r0, #0
    }
    232a:	bd70      	pop	{r4, r5, r6, pc}

        for (unsigned chNr = 0; chNr < NR_OF_TCK_TIMERS; chNr++)
        {
            if (channels[chNr] == nullptr)
            {
                channels[chNr] = new TckChannel<counterType>();
    232c:	2034      	movs	r0, #52	; 0x34
    };

    // IMPLEMENTATION ==============================================

    template <typename T>
    TckChannel<T>::TckChannel()
    232e:	4e0b      	ldr	r6, [pc, #44]	; (235c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x70>)
    2330:	f002 fd82 	bl	4e38 <operator new(unsigned int)>
    {
        triggered = false;
        clock = F_CPU / 1'000'000.0f;
    2334:	490a      	ldr	r1, [pc, #40]	; (2360 <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x74>)
    2336:	4a05      	ldr	r2, [pc, #20]	; (234c <TeensyTimerTool::ITimerChannel* TeensyTimerTool::TCK_t::getTimer<unsigned long>()+0x60>)

    // IMPLEMENTATION ====================================================

    ITimerChannel::ITimerChannel(callback_t* cbStorage)
    {
        this->pCallback = cbStorage;
    2338:	6045      	str	r5, [r0, #4]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    233a:	6105      	str	r5, [r0, #16]
    // IMPLEMENTATION ==============================================

    template <typename T>
    TckChannel<T>::TckChannel()
    {
        triggered = false;
    233c:	7645      	strb	r5, [r0, #25]
    };

    // IMPLEMENTATION ==============================================

    template <typename T>
    TckChannel<T>::TckChannel()
    233e:	6006      	str	r6, [r0, #0]
    {
        triggered = false;
        clock = F_CPU / 1'000'000.0f;
    2340:	6301      	str	r1, [r0, #48]	; 0x30
    2342:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
                return channels[chNr];
    2346:	bd70      	pop	{r4, r5, r6, pc}
    2348:	20001b80 	.word	0x20001b80
    234c:	20001b30 	.word	0x20001b30
    2350:	e000edfc 	.word	0xe000edfc
    2354:	e0001000 	.word	0xe0001000
    2358:	20001b2c 	.word	0x20001b2c
    235c:	20000278 	.word	0x20000278
    2360:	44160000 	.word	0x44160000

00002364 <TeensyTimerTool::TMR_t<0u>::getTimer()>:
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];

    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    2364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        if (!isInitialized)
    2368:	4e33      	ldr	r6, [pc, #204]	; (2438 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xd4>)
    236a:	7835      	ldrb	r5, [r6, #0]
    236c:	2d00      	cmp	r5, #0
    236e:	d131      	bne.n	23d4 <TeensyTimerTool::TMR_t<0u>::getTimer()+0x70>
    2370:	4f32      	ldr	r7, [pc, #200]	; (243c <TeensyTimerTool::TMR_t<0u>::getTimer()+0xd8>)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
            {
                pTMR->CH[chNr].CTRL = 0x0000;
    2372:	46a8      	mov	r8, r5
    2374:	463c      	mov	r4, r7
    2376:	016a      	lsls	r2, r5, #5
    2378:	4b31      	ldr	r3, [pc, #196]	; (2440 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xdc>)
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    237a:	4621      	mov	r1, r4
    237c:	3501      	adds	r5, #1
    237e:	4413      	add	r3, r2
    2380:	4620      	mov	r0, r4
    2382:	2203      	movs	r2, #3
    2384:	f8a3 800c 	strh.w	r8, [r3, #12]
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    2388:	68a3      	ldr	r3, [r4, #8]
    238a:	b123      	cbz	r3, 2396 <TeensyTimerTool::TMR_t<0u>::getTimer()+0x32>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    238c:	4798      	blx	r3
	    _M_manager = nullptr;
    238e:	f8c4 8008 	str.w	r8, [r4, #8]
	    _M_invoker = nullptr;
    2392:	f8c4 800c 	str.w	r8, [r4, #12]
    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
    2396:	2d04      	cmp	r5, #4
    2398:	f104 0410 	add.w	r4, r4, #16
    239c:	d1eb      	bne.n	2376 <TeensyTimerTool::TMR_t<0u>::getTimer()+0x12>
    239e:	4b29      	ldr	r3, [pc, #164]	; (2444 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xe0>)
    23a0:	4a29      	ldr	r2, [pc, #164]	; (2448 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xe4>)
    23a2:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    23a6:	4a29      	ldr	r2, [pc, #164]	; (244c <TeensyTimerTool::TMR_t<0u>::getTimer()+0xe8>)
    23a8:	2120      	movs	r1, #32
            isInitialized = true;
    23aa:	2301      	movs	r3, #1
            return new TMRChannel(pCH0, &callbacks[0]);
    23ac:	2018      	movs	r0, #24
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    23ae:	6011      	str	r1, [r2, #0]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    23b0:	2500      	movs	r5, #0
            isInitialized = true;
    23b2:	7033      	strb	r3, [r6, #0]
            return new TMRChannel(pCH0, &callbacks[0]);
    23b4:	f002 fd40 	bl	4e38 <operator new(unsigned int)>
    23b8:	4925      	ldr	r1, [pc, #148]	; (2450 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xec>)
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
        pscBits = 0b1000 | (psc & 0b0111);
    23ba:	220f      	movs	r2, #15
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    23bc:	4e25      	ldr	r6, [pc, #148]	; (2454 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xf0>)
    23be:	680c      	ldr	r4, [r1, #0]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    23c0:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    23c4:	60c5      	str	r5, [r0, #12]
    {
        this->regs = regs;
    23c6:	6084      	str	r4, [r0, #8]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    23c8:	6101      	str	r1, [r0, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    23ca:	6142      	str	r2, [r0, #20]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    23cc:	e880 00c0 	stmia.w	r0, {r6, r7}
    23d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    23d4:	4b1a      	ldr	r3, [pc, #104]	; (2440 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xdc>)
    23d6:	899a      	ldrh	r2, [r3, #12]
    23d8:	b292      	uxth	r2, r2
    23da:	b16a      	cbz	r2, 23f8 <TeensyTimerTool::TMR_t<0u>::getTimer()+0x94>
    23dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    23de:	b292      	uxth	r2, r2
    23e0:	b31a      	cbz	r2, 242a <TeensyTimerTool::TMR_t<0u>::getTimer()+0xc6>
    23e2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    23e6:	b292      	uxth	r2, r2
    23e8:	b30a      	cbz	r2, 242e <TeensyTimerTool::TMR_t<0u>::getTimer()+0xca>
    23ea:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    23ee:	b29b      	uxth	r3, r3
    23f0:	b1fb      	cbz	r3, 2432 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xce>
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
            }
        }
        return nullptr;
    23f2:	2000      	movs	r0, #0
    }
    23f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    23f8:	4614      	mov	r4, r2
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    23fa:	2018      	movs	r0, #24
    23fc:	2600      	movs	r6, #0
    23fe:	f002 fd1b 	bl	4e38 <operator new(unsigned int)>
    2402:	4a0e      	ldr	r2, [pc, #56]	; (243c <TeensyTimerTool::TMR_t<0u>::getTimer()+0xd8>)
    2404:	4603      	mov	r3, r0
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    2406:	490e      	ldr	r1, [pc, #56]	; (2440 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xdc>)
    2408:	0160      	lsls	r0, r4, #5
    240a:	4f12      	ldr	r7, [pc, #72]	; (2454 <TeensyTimerTool::TMR_t<0u>::getTimer()+0xf0>)
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    240c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    2410:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    2414:	4401      	add	r1, r0
        pscBits = 0b1000 | (psc & 0b0111);
    2416:	240f      	movs	r4, #15
    2418:	605a      	str	r2, [r3, #4]
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    241a:	4618      	mov	r0, r3
    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    {
        this->regs = regs;
    241c:	6099      	str	r1, [r3, #8]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    241e:	601f      	str	r7, [r3, #0]
    2420:	60de      	str	r6, [r3, #12]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    2422:	611d      	str	r5, [r3, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    2424:	615c      	str	r4, [r3, #20]
    2426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NVIC_ENABLE_IRQ(irq);
            isInitialized = true;
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
    242a:	2401      	movs	r4, #1
    242c:	e7e5      	b.n	23fa <TeensyTimerTool::TMR_t<0u>::getTimer()+0x96>
    242e:	2402      	movs	r4, #2
    2430:	e7e3      	b.n	23fa <TeensyTimerTool::TMR_t<0u>::getTimer()+0x96>
    2432:	2403      	movs	r4, #3
    2434:	e7e1      	b.n	23fa <TeensyTimerTool::TMR_t<0u>::getTimer()+0x96>
    2436:	bf00      	nop
    2438:	200018e4 	.word	0x200018e4
    243c:	20001a60 	.word	0x20001a60
    2440:	401dc000 	.word	0x401dc000
    2444:	20002000 	.word	0x20002000
    2448:	00001c7d 	.word	0x00001c7d
    244c:	e000e110 	.word	0xe000e110
    2450:	20001a5c 	.word	0x20001a5c
    2454:	200001e8 	.word	0x200001e8

00002458 <TeensyTimerTool::TMR_t<1u>::getTimer()>:
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];

    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    2458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        if (!isInitialized)
    245c:	4e33      	ldr	r6, [pc, #204]	; (252c <TeensyTimerTool::TMR_t<1u>::getTimer()+0xd4>)
    245e:	7835      	ldrb	r5, [r6, #0]
    2460:	2d00      	cmp	r5, #0
    2462:	d131      	bne.n	24c8 <TeensyTimerTool::TMR_t<1u>::getTimer()+0x70>
    2464:	4f32      	ldr	r7, [pc, #200]	; (2530 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xd8>)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
            {
                pTMR->CH[chNr].CTRL = 0x0000;
    2466:	46a8      	mov	r8, r5
    2468:	463c      	mov	r4, r7
    246a:	016a      	lsls	r2, r5, #5
    246c:	4b31      	ldr	r3, [pc, #196]	; (2534 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xdc>)
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    246e:	4621      	mov	r1, r4
    2470:	3501      	adds	r5, #1
    2472:	4413      	add	r3, r2
    2474:	4620      	mov	r0, r4
    2476:	2203      	movs	r2, #3
    2478:	f8a3 800c 	strh.w	r8, [r3, #12]
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    247c:	68a3      	ldr	r3, [r4, #8]
    247e:	b123      	cbz	r3, 248a <TeensyTimerTool::TMR_t<1u>::getTimer()+0x32>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    2480:	4798      	blx	r3
	    _M_manager = nullptr;
    2482:	f8c4 8008 	str.w	r8, [r4, #8]
	    _M_invoker = nullptr;
    2486:	f8c4 800c 	str.w	r8, [r4, #12]
    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
    248a:	2d04      	cmp	r5, #4
    248c:	f104 0410 	add.w	r4, r4, #16
    2490:	d1eb      	bne.n	246a <TeensyTimerTool::TMR_t<1u>::getTimer()+0x12>
    2492:	4b29      	ldr	r3, [pc, #164]	; (2538 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xe0>)
    2494:	4a29      	ldr	r2, [pc, #164]	; (253c <TeensyTimerTool::TMR_t<1u>::getTimer()+0xe4>)
    2496:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    249a:	4a29      	ldr	r2, [pc, #164]	; (2540 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xe8>)
    249c:	2140      	movs	r1, #64	; 0x40
            isInitialized = true;
    249e:	2301      	movs	r3, #1
            return new TMRChannel(pCH0, &callbacks[0]);
    24a0:	2018      	movs	r0, #24
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    24a2:	6011      	str	r1, [r2, #0]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    24a4:	2500      	movs	r5, #0
            isInitialized = true;
    24a6:	7033      	strb	r3, [r6, #0]
            return new TMRChannel(pCH0, &callbacks[0]);
    24a8:	f002 fcc6 	bl	4e38 <operator new(unsigned int)>
    24ac:	4925      	ldr	r1, [pc, #148]	; (2544 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xec>)
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
        pscBits = 0b1000 | (psc & 0b0111);
    24ae:	220f      	movs	r2, #15
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    24b0:	4e25      	ldr	r6, [pc, #148]	; (2548 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xf0>)
    24b2:	680c      	ldr	r4, [r1, #0]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    24b4:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    24b8:	60c5      	str	r5, [r0, #12]
    {
        this->regs = regs;
    24ba:	6084      	str	r4, [r0, #8]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    24bc:	6101      	str	r1, [r0, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    24be:	6142      	str	r2, [r0, #20]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    24c0:	e880 00c0 	stmia.w	r0, {r6, r7}
    24c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    24c8:	4b1a      	ldr	r3, [pc, #104]	; (2534 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xdc>)
    24ca:	899a      	ldrh	r2, [r3, #12]
    24cc:	b292      	uxth	r2, r2
    24ce:	b16a      	cbz	r2, 24ec <TeensyTimerTool::TMR_t<1u>::getTimer()+0x94>
    24d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    24d2:	b292      	uxth	r2, r2
    24d4:	b31a      	cbz	r2, 251e <TeensyTimerTool::TMR_t<1u>::getTimer()+0xc6>
    24d6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    24da:	b292      	uxth	r2, r2
    24dc:	b30a      	cbz	r2, 2522 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xca>
    24de:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    24e2:	b29b      	uxth	r3, r3
    24e4:	b1fb      	cbz	r3, 2526 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xce>
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
            }
        }
        return nullptr;
    24e6:	2000      	movs	r0, #0
    }
    24e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    24ec:	4614      	mov	r4, r2
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    24ee:	2018      	movs	r0, #24
    24f0:	2600      	movs	r6, #0
    24f2:	f002 fca1 	bl	4e38 <operator new(unsigned int)>
    24f6:	4a0e      	ldr	r2, [pc, #56]	; (2530 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xd8>)
    24f8:	4603      	mov	r3, r0
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    24fa:	490e      	ldr	r1, [pc, #56]	; (2534 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xdc>)
    24fc:	0160      	lsls	r0, r4, #5
    24fe:	4f12      	ldr	r7, [pc, #72]	; (2548 <TeensyTimerTool::TMR_t<1u>::getTimer()+0xf0>)
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    2500:	eb02 1204 	add.w	r2, r2, r4, lsl #4
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    2504:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    2508:	4401      	add	r1, r0
        pscBits = 0b1000 | (psc & 0b0111);
    250a:	240f      	movs	r4, #15
    250c:	605a      	str	r2, [r3, #4]
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    250e:	4618      	mov	r0, r3
    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    {
        this->regs = regs;
    2510:	6099      	str	r1, [r3, #8]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    2512:	601f      	str	r7, [r3, #0]
    2514:	60de      	str	r6, [r3, #12]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    2516:	611d      	str	r5, [r3, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    2518:	615c      	str	r4, [r3, #20]
    251a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NVIC_ENABLE_IRQ(irq);
            isInitialized = true;
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
    251e:	2401      	movs	r4, #1
    2520:	e7e5      	b.n	24ee <TeensyTimerTool::TMR_t<1u>::getTimer()+0x96>
    2522:	2402      	movs	r4, #2
    2524:	e7e3      	b.n	24ee <TeensyTimerTool::TMR_t<1u>::getTimer()+0x96>
    2526:	2403      	movs	r4, #3
    2528:	e7e1      	b.n	24ee <TeensyTimerTool::TMR_t<1u>::getTimer()+0x96>
    252a:	bf00      	nop
    252c:	200018e3 	.word	0x200018e3
    2530:	20001a1c 	.word	0x20001a1c
    2534:	401e0000 	.word	0x401e0000
    2538:	20002000 	.word	0x20002000
    253c:	00001d29 	.word	0x00001d29
    2540:	e000e110 	.word	0xe000e110
    2544:	20001a18 	.word	0x20001a18
    2548:	200001e8 	.word	0x200001e8

0000254c <TeensyTimerTool::TMR_t<2u>::getTimer()>:
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];

    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    254c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        if (!isInitialized)
    2550:	4e33      	ldr	r6, [pc, #204]	; (2620 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xd4>)
    2552:	7835      	ldrb	r5, [r6, #0]
    2554:	2d00      	cmp	r5, #0
    2556:	d131      	bne.n	25bc <TeensyTimerTool::TMR_t<2u>::getTimer()+0x70>
    2558:	4f32      	ldr	r7, [pc, #200]	; (2624 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xd8>)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
            {
                pTMR->CH[chNr].CTRL = 0x0000;
    255a:	46a8      	mov	r8, r5
    255c:	463c      	mov	r4, r7
    255e:	016a      	lsls	r2, r5, #5
    2560:	4b31      	ldr	r3, [pc, #196]	; (2628 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xdc>)
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    2562:	4621      	mov	r1, r4
    2564:	3501      	adds	r5, #1
    2566:	4413      	add	r3, r2
    2568:	4620      	mov	r0, r4
    256a:	2203      	movs	r2, #3
    256c:	f8a3 800c 	strh.w	r8, [r3, #12]
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    2570:	68a3      	ldr	r3, [r4, #8]
    2572:	b123      	cbz	r3, 257e <TeensyTimerTool::TMR_t<2u>::getTimer()+0x32>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    2574:	4798      	blx	r3
	    _M_manager = nullptr;
    2576:	f8c4 8008 	str.w	r8, [r4, #8]
	    _M_invoker = nullptr;
    257a:	f8c4 800c 	str.w	r8, [r4, #12]
    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
    257e:	2d04      	cmp	r5, #4
    2580:	f104 0410 	add.w	r4, r4, #16
    2584:	d1eb      	bne.n	255e <TeensyTimerTool::TMR_t<2u>::getTimer()+0x12>
    2586:	4b29      	ldr	r3, [pc, #164]	; (262c <TeensyTimerTool::TMR_t<2u>::getTimer()+0xe0>)
    2588:	4a29      	ldr	r2, [pc, #164]	; (2630 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xe4>)
    258a:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    258e:	4a29      	ldr	r2, [pc, #164]	; (2634 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xe8>)
    2590:	2180      	movs	r1, #128	; 0x80
            isInitialized = true;
    2592:	2301      	movs	r3, #1
            return new TMRChannel(pCH0, &callbacks[0]);
    2594:	2018      	movs	r0, #24
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    2596:	6011      	str	r1, [r2, #0]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    2598:	2500      	movs	r5, #0
            isInitialized = true;
    259a:	7033      	strb	r3, [r6, #0]
            return new TMRChannel(pCH0, &callbacks[0]);
    259c:	f002 fc4c 	bl	4e38 <operator new(unsigned int)>
    25a0:	4925      	ldr	r1, [pc, #148]	; (2638 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xec>)
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
        pscBits = 0b1000 | (psc & 0b0111);
    25a2:	220f      	movs	r2, #15
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    25a4:	4e25      	ldr	r6, [pc, #148]	; (263c <TeensyTimerTool::TMR_t<2u>::getTimer()+0xf0>)
    25a6:	680c      	ldr	r4, [r1, #0]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    25a8:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    25ac:	60c5      	str	r5, [r0, #12]
    {
        this->regs = regs;
    25ae:	6084      	str	r4, [r0, #8]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    25b0:	6101      	str	r1, [r0, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    25b2:	6142      	str	r2, [r0, #20]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    25b4:	e880 00c0 	stmia.w	r0, {r6, r7}
    25b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    25bc:	4b1a      	ldr	r3, [pc, #104]	; (2628 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xdc>)
    25be:	899a      	ldrh	r2, [r3, #12]
    25c0:	b292      	uxth	r2, r2
    25c2:	b16a      	cbz	r2, 25e0 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x94>
    25c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    25c6:	b292      	uxth	r2, r2
    25c8:	b31a      	cbz	r2, 2612 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xc6>
    25ca:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    25ce:	b292      	uxth	r2, r2
    25d0:	b30a      	cbz	r2, 2616 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xca>
    25d2:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    25d6:	b29b      	uxth	r3, r3
    25d8:	b1fb      	cbz	r3, 261a <TeensyTimerTool::TMR_t<2u>::getTimer()+0xce>
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
            }
        }
        return nullptr;
    25da:	2000      	movs	r0, #0
    }
    25dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    25e0:	4614      	mov	r4, r2
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    25e2:	2018      	movs	r0, #24
    25e4:	2600      	movs	r6, #0
    25e6:	f002 fc27 	bl	4e38 <operator new(unsigned int)>
    25ea:	4a0e      	ldr	r2, [pc, #56]	; (2624 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xd8>)
    25ec:	4603      	mov	r3, r0
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    25ee:	490e      	ldr	r1, [pc, #56]	; (2628 <TeensyTimerTool::TMR_t<2u>::getTimer()+0xdc>)
    25f0:	0160      	lsls	r0, r4, #5
    25f2:	4f12      	ldr	r7, [pc, #72]	; (263c <TeensyTimerTool::TMR_t<2u>::getTimer()+0xf0>)
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    25f4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    25f8:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    25fc:	4401      	add	r1, r0
        pscBits = 0b1000 | (psc & 0b0111);
    25fe:	240f      	movs	r4, #15
    2600:	605a      	str	r2, [r3, #4]
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    2602:	4618      	mov	r0, r3
    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    {
        this->regs = regs;
    2604:	6099      	str	r1, [r3, #8]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    2606:	601f      	str	r7, [r3, #0]
    2608:	60de      	str	r6, [r3, #12]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    260a:	611d      	str	r5, [r3, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    260c:	615c      	str	r4, [r3, #20]
    260e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NVIC_ENABLE_IRQ(irq);
            isInitialized = true;
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
    2612:	2401      	movs	r4, #1
    2614:	e7e5      	b.n	25e2 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x96>
    2616:	2402      	movs	r4, #2
    2618:	e7e3      	b.n	25e2 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x96>
    261a:	2403      	movs	r4, #3
    261c:	e7e1      	b.n	25e2 <TeensyTimerTool::TMR_t<2u>::getTimer()+0x96>
    261e:	bf00      	nop
    2620:	200018e2 	.word	0x200018e2
    2624:	200019d8 	.word	0x200019d8
    2628:	401e4000 	.word	0x401e4000
    262c:	20002000 	.word	0x20002000
    2630:	00001dd5 	.word	0x00001dd5
    2634:	e000e110 	.word	0xe000e110
    2638:	200019d4 	.word	0x200019d4
    263c:	200001e8 	.word	0x200001e8

00002640 <TeensyTimerTool::TMR_t<3u>::getTimer()>:
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];

    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    2640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        if (!isInitialized)
    2644:	4e33      	ldr	r6, [pc, #204]	; (2714 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xd4>)
    2646:	7835      	ldrb	r5, [r6, #0]
    2648:	2d00      	cmp	r5, #0
    264a:	d132      	bne.n	26b2 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x72>
    264c:	4f32      	ldr	r7, [pc, #200]	; (2718 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xd8>)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
            {
                pTMR->CH[chNr].CTRL = 0x0000;
    264e:	46a8      	mov	r8, r5
    2650:	463c      	mov	r4, r7
    2652:	016a      	lsls	r2, r5, #5
    2654:	4b31      	ldr	r3, [pc, #196]	; (271c <TeensyTimerTool::TMR_t<3u>::getTimer()+0xdc>)
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    2656:	4621      	mov	r1, r4
    2658:	3501      	adds	r5, #1
    265a:	4413      	add	r3, r2
    265c:	4620      	mov	r0, r4
    265e:	2203      	movs	r2, #3
    2660:	f8a3 800c 	strh.w	r8, [r3, #12]
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    2664:	68a3      	ldr	r3, [r4, #8]
    2666:	b123      	cbz	r3, 2672 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x32>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    2668:	4798      	blx	r3
	    _M_manager = nullptr;
    266a:	f8c4 8008 	str.w	r8, [r4, #8]
	    _M_invoker = nullptr;
    266e:	f8c4 800c 	str.w	r8, [r4, #12]
    template <unsigned moduleNr>
    ITimerChannel* TMR_t<moduleNr>::getTimer()
    {
        if (!isInitialized)
        {
            for (unsigned chNr = 0; chNr < 4; chNr++)
    2672:	2d04      	cmp	r5, #4
    2674:	f104 0410 	add.w	r4, r4, #16
    2678:	d1eb      	bne.n	2652 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x12>
    267a:	4b29      	ldr	r3, [pc, #164]	; (2720 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xe0>)
    267c:	4a29      	ldr	r2, [pc, #164]	; (2724 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xe4>)
    267e:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    2682:	4a29      	ldr	r2, [pc, #164]	; (2728 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xe8>)
    2684:	f44f 7180 	mov.w	r1, #256	; 0x100
            isInitialized = true;
    2688:	2301      	movs	r3, #1
            return new TMRChannel(pCH0, &callbacks[0]);
    268a:	2018      	movs	r0, #24
            {
                pTMR->CH[chNr].CTRL = 0x0000;
                callbacks[chNr] = nullptr;
            }
            attachInterruptVector(irq, isr); // start
            NVIC_ENABLE_IRQ(irq);
    268c:	6011      	str	r1, [r2, #0]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    268e:	2500      	movs	r5, #0
            isInitialized = true;
    2690:	7033      	strb	r3, [r6, #0]
            return new TMRChannel(pCH0, &callbacks[0]);
    2692:	f002 fbd1 	bl	4e38 <operator new(unsigned int)>
    2696:	4925      	ldr	r1, [pc, #148]	; (272c <TeensyTimerTool::TMR_t<3u>::getTimer()+0xec>)
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
        pscBits = 0b1000 | (psc & 0b0111);
    2698:	220f      	movs	r2, #15
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    269a:	4e25      	ldr	r6, [pc, #148]	; (2730 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xf0>)
    269c:	680c      	ldr	r4, [r1, #0]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    269e:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    26a2:	60c5      	str	r5, [r0, #12]
    {
        this->regs = regs;
    26a4:	6084      	str	r4, [r0, #8]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    26a6:	6101      	str	r1, [r0, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    26a8:	6142      	str	r2, [r0, #20]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    26aa:	e880 00c0 	stmia.w	r0, {r6, r7}
    26ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    26b2:	4b1a      	ldr	r3, [pc, #104]	; (271c <TeensyTimerTool::TMR_t<3u>::getTimer()+0xdc>)
    26b4:	899a      	ldrh	r2, [r3, #12]
    26b6:	b292      	uxth	r2, r2
    26b8:	b16a      	cbz	r2, 26d6 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x96>
    26ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    26bc:	b292      	uxth	r2, r2
    26be:	b31a      	cbz	r2, 2708 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xc8>
    26c0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    26c4:	b292      	uxth	r2, r2
    26c6:	b30a      	cbz	r2, 270c <TeensyTimerTool::TMR_t<3u>::getTimer()+0xcc>
    26c8:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    26cc:	b29b      	uxth	r3, r3
    26ce:	b1fb      	cbz	r3, 2710 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xd0>
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
            }
        }
        return nullptr;
    26d0:	2000      	movs	r0, #0
    }
    26d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
            if (pCh->CTRL == 0x0000)
    26d6:	4614      	mov	r4, r2
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    26d8:	2018      	movs	r0, #24
    26da:	2600      	movs	r6, #0
    26dc:	f002 fbac 	bl	4e38 <operator new(unsigned int)>
    26e0:	4a0d      	ldr	r2, [pc, #52]	; (2718 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xd8>)
    26e2:	4603      	mov	r3, r0
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    26e4:	490d      	ldr	r1, [pc, #52]	; (271c <TeensyTimerTool::TMR_t<3u>::getTimer()+0xdc>)
    26e6:	0160      	lsls	r0, r4, #5
    26e8:	4f11      	ldr	r7, [pc, #68]	; (2730 <TeensyTimerTool::TMR_t<3u>::getTimer()+0xf0>)
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    26ea:	eb02 1204 	add.w	r2, r2, r4, lsl #4
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    26ee:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
        {
            IMXRT_TMR_CH_t* pCh = &pTMR->CH[chNr];
    26f2:	4401      	add	r1, r0
        pscBits = 0b1000 | (psc & 0b0111);
    26f4:	240f      	movs	r4, #15
    26f6:	605a      	str	r2, [r3, #4]
            if (pCh->CTRL == 0x0000)
            {
                return new TMRChannel(pCh, &callbacks[chNr]);
    26f8:	4618      	mov	r0, r3
    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    {
        this->regs = regs;
    26fa:	6099      	str	r1, [r3, #8]
    };

    // IMPLEMENTATION ==============================================

    TMRChannel::TMRChannel(IMXRT_TMR_CH_t* regs, callback_t* cbStorage)
        : ITimerChannel(cbStorage)
    26fc:	601f      	str	r7, [r3, #0]
    26fe:	60de      	str	r6, [r3, #12]
        return errorCode::OK;
    }

    void TMRChannel::setPrescaler(uint32_t psc) // psc 0..7 -> prescaler: 1..128
    {
        pscValue = 1 << (psc & 0b0111);
    2700:	611d      	str	r5, [r3, #16]
        pscBits = 0b1000 | (psc & 0b0111);
    2702:	615c      	str	r4, [r3, #20]
    2704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NVIC_ENABLE_IRQ(irq);
            isInitialized = true;
            return new TMRChannel(pCH0, &callbacks[0]);
        }

        for (unsigned chNr = 0; chNr < 4; chNr++)
    2708:	2401      	movs	r4, #1
    270a:	e7e5      	b.n	26d8 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x98>
    270c:	2402      	movs	r4, #2
    270e:	e7e3      	b.n	26d8 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x98>
    2710:	2403      	movs	r4, #3
    2712:	e7e1      	b.n	26d8 <TeensyTimerTool::TMR_t<3u>::getTimer()+0x98>
    2714:	200018e1 	.word	0x200018e1
    2718:	20001994 	.word	0x20001994
    271c:	401e8000 	.word	0x401e8000
    2720:	20002000 	.word	0x20002000
    2724:	00001e81 	.word	0x00001e81
    2728:	e000e110 	.word	0xe000e110
    272c:	20001990 	.word	0x20001990
    2730:	200001e8 	.word	0x200001e8

00002734 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)>:
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    2734:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 27a0 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x6c>
    2738:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    273c:	6803      	ldr	r3, [r0, #0]
        this->triggered = true;
        return errorCode::OK;
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    273e:	b570      	push	{r4, r5, r6, lr}
    2740:	ed2d 8b02 	vpush	{d8}
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    2744:	ee87 8a27 	vdiv.f32	s16, s14, s15
        this->triggered = true;
        return errorCode::OK;
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    2748:	4604      	mov	r4, r0
    {
        return triggerDirect(microsecondToCycles(delay));
    274a:	689d      	ldr	r5, [r3, #8]
    }

    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
    274c:	eeb4 0ac8 	vcmpe.f32	s0, s16
    2750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2754:	dd07      	ble.n	2766 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x32>
        {
            microSecond = getMaxMicros();
            postError(errorCode::periodOverflow);
    2756:	f06f 0063 	mvn.w	r0, #99	; 0x63
    275a:	f000 fc13 	bl	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
        {
            microSecond = getMaxMicros();
    275e:	eeb0 0a48 	vmov.f32	s0, s16
    2762:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            postError(errorCode::periodOverflow);
        }
        return (CounterType)(microSecond * clock);
    2766:	ee20 0a27 	vmul.f32	s0, s0, s15
    276a:	4b0e      	ldr	r3, [pc, #56]	; (27a4 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x70>)
    276c:	429d      	cmp	r5, r3
    276e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    2772:	ee17 1a90 	vmov	r1, s15
    2776:	d10c      	bne.n	2792 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x5e>
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    2778:	4a0b      	ldr	r2, [pc, #44]	; (27a8 <TeensyTimerTool::TckChannel<unsigned long>::trigger(float)+0x74>)
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
        this->nextPeriod = reload;
        this->currentPeriod = this->nextPeriod;
        this->triggered = true;
    277a:	2301      	movs	r3, #1

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    277c:	2000      	movs	r0, #0
    // 32bit Counter -------------------------------------------------------------------------

    template <>
    inline uint32_t TckChannel<uint32_t>::getCycleCounter()
    {
        return ARM_DWT_CYCCNT; //directly use the cycle counter for uint32_t
    277e:	6812      	ldr	r2, [r2, #0]

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
        this->nextPeriod = reload;
    2780:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    }

    template <typename CounterType>
    errorCode TckChannel<CounterType>::triggerDirect(CounterType reload)
    {
        this->startCnt = getCycleCounter();
    2784:	61e2      	str	r2, [r4, #28]
        this->nextPeriod = reload;
        this->currentPeriod = this->nextPeriod;
    2786:	edc4 7a08 	vstr	s15, [r4, #32]
        this->triggered = true;
    278a:	7663      	strb	r3, [r4, #25]

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    278c:	ecbd 8b02 	vpop	{d8}
    2790:	bd70      	pop	{r4, r5, r6, pc}
    2792:	ecbd 8b02 	vpop	{d8}
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    2796:	4620      	mov	r0, r4
    2798:	462b      	mov	r3, r5
    }
    279a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    }

    template <typename T>
    errorCode TckChannel<T>::trigger(float delay) // µs
    {
        return triggerDirect(microsecondToCycles(delay));
    279e:	4718      	bx	r3
    27a0:	4f700000 	.word	0x4f700000
    27a4:	0000201d 	.word	0x0000201d
    27a8:	e0001004 	.word	0xe0001004

000027ac <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)>:
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    27ac:	eddf 7a4c 	vldr	s15, [pc, #304]	; 28e0 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x134>

    errorCode TMRChannel::begin(callback_t cb, float tcnt, bool periodic)
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload;
        if (t > 0xFFFF)
    27b0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 28e4 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x138>
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    27b4:	ee20 0a27 	vmul.f32	s0, s0, s15
    27b8:	edd0 7a04 	vldr	s15, [r0, #16]
    // {
    //     return begin(cb, (float)tcnt, periodic);
    // }

    errorCode TMRChannel::begin(callback_t cb, float tcnt, bool periodic)
    {
    27bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27c0:	ed2d 8b02 	vpush	{d8}
        }
    }

    float_t TMRChannel::microsecondToCounter(const float_t us) const
    {
        return us * 150.0f / pscValue;
    27c4:	ee80 8a27 	vdiv.f32	s16, s0, s15
    // {
    //     return begin(cb, (float)tcnt, periodic);
    // }

    errorCode TMRChannel::begin(callback_t cb, float tcnt, bool periodic)
    {
    27c8:	b08a      	sub	sp, #40	; 0x28
    27ca:	4605      	mov	r5, r0
    27cc:	460e      	mov	r6, r1
    27ce:	4617      	mov	r7, r2
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload;
        if (t > 0xFFFF)
    27d0:	eeb4 8ac7 	vcmpe.f32	s16, s14
    27d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    27d8:	dc78      	bgt.n	28cc <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x120>
        {
            postError(errorCode::periodOverflow);
            reload = 0xFFFE;
        } else
        {
            reload = (uint16_t)t - 1;
    27da:	eefc 7ac8 	vcvt.u32.f32	s15, s16
    27de:	ee17 2a90 	vmov	r2, s15
    27e2:	3a01      	subs	r2, #1
    27e4:	b292      	uxth	r2, r2
        }

        regs->CTRL = 0x0000;
    27e6:	68ab      	ldr	r3, [r5, #8]
    27e8:	2400      	movs	r4, #0
    27ea:	f8d6 8008 	ldr.w	r8, [r6, #8]
    27ee:	819c      	strh	r4, [r3, #12]
        regs->LOAD = 0x0000;
    27f0:	80dc      	strh	r4, [r3, #6]
        regs->COMP1 = reload;
    27f2:	801a      	strh	r2, [r3, #0]
        regs->CMPLD1 = reload;
    27f4:	821a      	strh	r2, [r3, #16]
        regs->CNTR = 0x0000;
    27f6:	815c      	strh	r4, [r3, #10]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    27f8:	9404      	str	r4, [sp, #16]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    27fa:	f1b8 0f00 	cmp.w	r8, #0
    27fe:	d060      	beq.n	28c2 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x116>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    2800:	2202      	movs	r2, #2
    2802:	4631      	mov	r1, r6
    2804:	a802      	add	r0, sp, #8
    2806:	47c0      	blx	r8
	  _M_invoker = __x._M_invoker;
    2808:	68f2      	ldr	r2, [r6, #12]
	  _M_manager = __x._M_manager;
    280a:	68b3      	ldr	r3, [r6, #8]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    280c:	ae06      	add	r6, sp, #24
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    280e:	9408      	str	r4, [sp, #32]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
    2810:	9205      	str	r2, [sp, #20]
	  _M_manager = __x._M_manager;
    2812:	9304      	str	r3, [sp, #16]
    2814:	686c      	ldr	r4, [r5, #4]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    2816:	b13b      	cbz	r3, 2828 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x7c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    2818:	2202      	movs	r2, #2
    281a:	a902      	add	r1, sp, #8
    281c:	4630      	mov	r0, r6
    281e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    2820:	9a05      	ldr	r2, [sp, #20]
	  _M_manager = __x._M_manager;
    2822:	9b04      	ldr	r3, [sp, #16]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
    2824:	9209      	str	r2, [sp, #36]	; 0x24
	  _M_manager = __x._M_manager;
    2826:	9308      	str	r3, [sp, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2828:	68e2      	ldr	r2, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    282a:	e896 0003 	ldmia.w	r6, {r0, r1}
    282e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    2832:	e894 0003 	ldmia.w	r4, {r0, r1}
    2836:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    283a:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    283e:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    2840:	e884 0003 	stmia.w	r4, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2844:	9908      	ldr	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
    2846:	9308      	str	r3, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
    2848:	60a1      	str	r1, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    284a:	9909      	ldr	r1, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
    284c:	9209      	str	r2, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
    284e:	60e1      	str	r1, [r4, #12]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2850:	b11b      	cbz	r3, 285a <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0xae>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2852:	2203      	movs	r2, #3
    2854:	4631      	mov	r1, r6
    2856:	4630      	mov	r0, r6
    2858:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    285a:	9b04      	ldr	r3, [sp, #16]
    285c:	b11b      	cbz	r3, 2866 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0xba>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    285e:	a902      	add	r1, sp, #8
    2860:	2203      	movs	r2, #3
    2862:	4608      	mov	r0, r1
    2864:	4798      	blx	r3
        setCallback(cb);

        if (!periodic)
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    2866:	696b      	ldr	r3, [r5, #20]
        regs->COMP1 = reload;
        regs->CMPLD1 = reload;
        regs->CNTR = 0x0000;
        setCallback(cb);

        if (!periodic)
    2868:	bb47      	cbnz	r7, 28bc <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x110>
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;
    286a:	f242 0160 	movw	r1, #8288	; 0x2060

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;
    286e:	025b      	lsls	r3, r3, #9
    2870:	68aa      	ldr	r2, [r5, #8]
    2872:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
    2876:	4319      	orrs	r1, r3

        start();
    2878:	682b      	ldr	r3, [r5, #0]

        if (!periodic)
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;
    287a:	8191      	strh	r1, [r2, #12]

        start();
    287c:	699b      	ldr	r3, [r3, #24]
    287e:	491a      	ldr	r1, [pc, #104]	; (28e8 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x13c>)
    2880:	428b      	cmp	r3, r1
    2882:	d12a      	bne.n	28da <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x12e>
    {
    }

    errorCode TMRChannel::start()
    {
        regs->CNTR = 0x0000;
    2884:	2300      	movs	r3, #0
    2886:	8153      	strh	r3, [r2, #10]
        regs->CSCTRL &= ~TMR_CSCTRL_TCF1;
    2888:	8a93      	ldrh	r3, [r2, #20]
    288a:	f023 0310 	bic.w	r3, r3, #16
    288e:	041b      	lsls	r3, r3, #16
    2890:	0c1b      	lsrs	r3, r3, #16
    2892:	8293      	strh	r3, [r2, #20]
        regs->CSCTRL |= TMR_CSCTRL_TCF1EN;
    2894:	8a93      	ldrh	r3, [r2, #20]
    2896:	b29b      	uxth	r3, r3
    2898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    289c:	8293      	strh	r3, [r2, #20]

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;

        start();
        return t > 0xFFFF ? errorCode::periodOverflow : errorCode::OK;
    289e:	eddf 7a11 	vldr	s15, [pc, #68]	; 28e4 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x138>
    28a2:	eeb4 8ae7 	vcmpe.f32	s16, s15
    28a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    28aa:	bfcc      	ite	gt
    28ac:	f06f 0063 	mvngt.w	r0, #99	; 0x63
    28b0:	2000      	movle	r0, #0
    }
    28b2:	b00a      	add	sp, #40	; 0x28
    28b4:	ecbd 8b02 	vpop	{d8}
    28b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        if (!periodic)
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;
    28bc:	f242 0120 	movw	r1, #8224	; 0x2020
    28c0:	e7d5      	b.n	286e <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0xc2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    28c2:	f8cd 8020 	str.w	r8, [sp, #32]
    28c6:	ae06      	add	r6, sp, #24
    28c8:	686c      	ldr	r4, [r5, #4]
    28ca:	e7ad      	b.n	2828 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x7c>
    {
        const float_t t = microsecondToCounter(tcnt);
        uint16_t reload;
        if (t > 0xFFFF)
        {
            postError(errorCode::periodOverflow);
    28cc:	f06f 0063 	mvn.w	r0, #99	; 0x63
    28d0:	f000 fb58 	bl	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
            reload = 0xFFFE;
    28d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    28d8:	e785      	b.n	27e6 <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0x3a>
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_ONCE | TMR_CTRL_LENGTH;

        else
            regs->CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(pscBits) | TMR_CTRL_LENGTH;

        start();
    28da:	4628      	mov	r0, r5
    28dc:	4798      	blx	r3
    28de:	e7de      	b.n	289e <TeensyTimerTool::TMRChannel::begin(std::function<void ()>, float, bool)+0xf2>
    28e0:	43160000 	.word	0x43160000
    28e4:	477fff00 	.word	0x477fff00
    28e8:	00001a25 	.word	0x00001a25

000028ec <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)>:

        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
    28ec:	b538      	push	{r3, r4, r5, lr}
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    28ee:	ed9f 7a18 	vldr	s14, [pc, #96]	; 2950 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x64>

        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
    28f2:	460d      	mov	r5, r1
    28f4:	ed2d 8b02 	vpush	{d8}
    28f8:	eeb0 8a40 	vmov.f32	s16, s0
    28fc:	ed90 0a05 	vldr	s0, [r0, #20]
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    2900:	eec7 7a00 	vdiv.f32	s15, s14, s0
        return errorCode::OK;
    }

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
    2904:	eeb4 8ae7 	vcmpe.f32	s16, s15
    2908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    290c:	dc0b      	bgt.n	2926 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x3a>
        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
        *reload = microsecondToCycles(delay);
    290e:	ee28 8a00 	vmul.f32	s16, s16, s0
        return errorCode::OK;
    }
    2912:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
        *reload = microsecondToCycles(delay);
    2914:	eebc 8ac8 	vcvt.u32.f32	s16, s16
    2918:	ee18 3a10 	vmov	r3, s16
        return errorCode::OK;
    }
    291c:	ecbd 8b02 	vpop	{d8}
        return errorCode::OK;
    }

    errorCode GptChannel::getTriggerReload(float delay, uint32_t* reload)
    {
        *reload = microsecondToCycles(delay);
    2920:	3b01      	subs	r3, #1
    2922:	602b      	str	r3, [r5, #0]
        return errorCode::OK;
    }
    2924:	bd38      	pop	{r3, r4, r5, pc}

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    2926:	6803      	ldr	r3, [r0, #0]
    2928:	4604      	mov	r4, r0
    292a:	4a0a      	ldr	r2, [pc, #40]	; (2954 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x68>)
    292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    292e:	4293      	cmp	r3, r2
    2930:	d10a      	bne.n	2948 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x5c>

        inline errorCode trigger(float delay) override;
        inline errorCode triggerDirect(uint32_t delay) override;
        inline errorCode getTriggerReload(float delay, uint32_t* reload) override;

        inline float getMaxPeriod() const override { return getMaxMicros() / 1E6; }
    2932:	ed9f 7a09 	vldr	s14, [pc, #36]	; 2958 <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x6c>
    2936:	ee87 8a87 	vdiv.f32	s16, s15, s14
    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
    293a:	f06f 0063 	mvn.w	r0, #99	; 0x63
    293e:	f000 fb21 	bl	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    2942:	ed94 0a05 	vldr	s0, [r4, #20]
    2946:	e7e2      	b.n	290e <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x22>

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    2948:	4798      	blx	r3
    294a:	eeb0 8a40 	vmov.f32	s16, s0
    294e:	e7f4      	b.n	293a <TeensyTimerTool::GptChannel::getTriggerReload(float, unsigned long*)+0x4e>
    2950:	4f800000 	.word	0x4f800000
    2954:	00001c11 	.word	0x00001c11
    2958:	49742400 	.word	0x49742400

0000295c <TeensyTimerTool::GptChannel::trigger(float)>:
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    295c:	eddf 6a22 	vldr	s13, [pc, #136]	; 29e8 <TeensyTimerTool::GptChannel::trigger(float)+0x8c>
    2960:	edd0 7a05 	vldr	s15, [r0, #20]
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    2964:	6803      	ldr	r3, [r0, #0]
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    2966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        stop();
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
    296a:	b570      	push	{r4, r5, r6, lr}
    296c:	4604      	mov	r4, r0
        return triggerDirect(microsecondToCycles(delay));
    296e:	689d      	ldr	r5, [r3, #8]
        stop();
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
    2970:	ed2d 8b02 	vpush	{d8}
        return errorCode::OK;
    }

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
    2974:	eeb4 0ac7 	vcmpe.f32	s0, s14
    2978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    297c:	dc1a      	bgt.n	29b4 <TeensyTimerTool::GptChannel::trigger(float)+0x58>
    297e:	eeb0 8a40 	vmov.f32	s16, s0
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
        }
        return (uint32_t)(clock * micros) - 1;
    2982:	ee67 7a88 	vmul.f32	s15, s15, s16
    2986:	4b19      	ldr	r3, [pc, #100]	; (29ec <TeensyTimerTool::GptChannel::trigger(float)+0x90>)
    2988:	429d      	cmp	r5, r3
    298a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    298e:	ee17 2a90 	vmov	r2, s15
    2992:	f102 31ff 	add.w	r1, r2, #4294967295
    2996:	d11c      	bne.n	29d2 <TeensyTimerTool::GptChannel::trigger(float)+0x76>
        return triggerDirect(microsecondToCycles(delay));
    }

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
    2998:	68e3      	ldr	r3, [r4, #12]
    299a:	203f      	movs	r0, #63	; 0x3f
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    299c:	2201      	movs	r2, #1
        return triggerDirect(microsecondToCycles(delay));
    }

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
    299e:	6098      	str	r0, [r3, #8]
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    29a0:	2000      	movs	r0, #0

    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
    29a2:	60da      	str	r2, [r3, #12]
        regs->OCR1 = reload;     // set overflow value
    29a4:	6119      	str	r1, [r3, #16]
        regs->CR |= GPT_CR_EN;   // enable timer
    29a6:	681a      	ldr	r2, [r3, #0]
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    29a8:	ecbd 8b02 	vpop	{d8}
    errorCode GptChannel::triggerDirect(uint32_t reload)
    {
        regs->SR = 0x3F;         // clear all interupt flags
        regs->IR = GPT_IR_OF1IE; // enable OF1 interrupt
        regs->OCR1 = reload;     // set overflow value
        regs->CR |= GPT_CR_EN;   // enable timer
    29ac:	f042 0201 	orr.w	r2, r2, #1
    29b0:	601a      	str	r2, [r3, #0]
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    29b2:	bd70      	pop	{r4, r5, r6, pc}

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    29b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    29b6:	4a0e      	ldr	r2, [pc, #56]	; (29f0 <TeensyTimerTool::GptChannel::trigger(float)+0x94>)
    29b8:	4293      	cmp	r3, r2
    29ba:	d111      	bne.n	29e0 <TeensyTimerTool::GptChannel::trigger(float)+0x84>

        inline errorCode trigger(float delay) override;
        inline errorCode triggerDirect(uint32_t delay) override;
        inline errorCode getTriggerReload(float delay, uint32_t* reload) override;

        inline float getMaxPeriod() const override { return getMaxMicros() / 1E6; }
    29bc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 29f4 <TeensyTimerTool::GptChannel::trigger(float)+0x98>
    29c0:	ee87 8a27 	vdiv.f32	s16, s14, s15
    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
    29c4:	f06f 0063 	mvn.w	r0, #99	; 0x63
    29c8:	f000 fadc 	bl	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    29cc:	edd4 7a05 	vldr	s15, [r4, #20]
    29d0:	e7d7      	b.n	2982 <TeensyTimerTool::GptChannel::trigger(float)+0x26>
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    }
    29d2:	ecbd 8b02 	vpop	{d8}
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    29d6:	4620      	mov	r0, r4
    29d8:	462b      	mov	r3, r5
    }
    29da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setCallback(nullptr);
    }

    errorCode GptChannel::trigger(float delay) //should be optimized somehow
    {
        return triggerDirect(microsecondToCycles(delay));
    29de:	4718      	bx	r3

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    29e0:	4798      	blx	r3
    29e2:	eeb0 8a40 	vmov.f32	s16, s0
    29e6:	e7ed      	b.n	29c4 <TeensyTimerTool::GptChannel::trigger(float)+0x68>
    29e8:	4f800000 	.word	0x4f800000
    29ec:	00001c5d 	.word	0x00001c5d
    29f0:	00001c11 	.word	0x00001c11
    29f4:	49742400 	.word	0x49742400

000029f8 <TeensyTimerTool::GptChannel::~GptChannel()>:
        regs->CR &= ~GPT_CR_EN; // disable timer
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    29f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29fa:	4604      	mov	r4, r0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    29fc:	68c0      	ldr	r0, [r0, #12]
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    29fe:	b08b      	sub	sp, #44	; 0x2c
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
        regs->IR = 0;
    2a00:	2100      	movs	r1, #0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2a02:	6806      	ldr	r6, [r0, #0]
    2a04:	6863      	ldr	r3, [r4, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2a06:	ad06      	add	r5, sp, #24
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    2a08:	4f16      	ldr	r7, [pc, #88]	; (2a64 <TeensyTimerTool::GptChannel::~GptChannel()+0x6c>)
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2a0a:	f026 0601 	bic.w	r6, r6, #1
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    2a0e:	6027      	str	r7, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
    2a10:	68df      	ldr	r7, [r3, #12]
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2a12:	6006      	str	r6, [r0, #0]
    2a14:	9108      	str	r1, [sp, #32]
        regs->IR = 0;
    2a16:	60c1      	str	r1, [r0, #12]
    2a18:	9104      	str	r1, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2a1a:	e895 0003 	ldmia.w	r5, {r0, r1}
    2a1e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    2a22:	e893 0003 	ldmia.w	r3, {r0, r1}
    2a26:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    2a2a:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2a2e:	689e      	ldr	r6, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    2a30:	e883 0003 	stmia.w	r3, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2a34:	9a08      	ldr	r2, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
    2a36:	9608      	str	r6, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
    2a38:	609a      	str	r2, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2a3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
    2a3c:	9709      	str	r7, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
    2a3e:	60da      	str	r2, [r3, #12]

    ~_Function_base()
    {
      if (_M_manager)
    2a40:	b11e      	cbz	r6, 2a4a <TeensyTimerTool::GptChannel::~GptChannel()+0x52>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2a42:	2203      	movs	r2, #3
    2a44:	4629      	mov	r1, r5
    2a46:	4628      	mov	r0, r5
    2a48:	47b0      	blx	r6

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2a4a:	9b04      	ldr	r3, [sp, #16]
    2a4c:	b11b      	cbz	r3, 2a56 <TeensyTimerTool::GptChannel::~GptChannel()+0x5e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2a4e:	a902      	add	r1, sp, #8
    2a50:	2203      	movs	r2, #3
    2a52:	4608      	mov	r0, r1
    2a54:	4798      	blx	r3

    GptChannel::~GptChannel()
    {
        stop();
        setCallback(nullptr);
    }
    2a56:	4620      	mov	r0, r4
    2a58:	2118      	movs	r1, #24
    2a5a:	f002 f9ef 	bl	4e3c <operator delete(void*, unsigned int)>
    2a5e:	4620      	mov	r0, r4
    2a60:	b00b      	add	sp, #44	; 0x2c
    2a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a64:	20000230 	.word	0x20000230

00002a68 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)>:
    }

    template <typename T>
    errorCode TckChannel<T>::begin(callback_t cb, float period, bool periodic)
    {
        this->triggered = false;
    2a68:	2300      	movs	r3, #0
        triggered = false;
        clock = F_CPU / 1'000'000.0f;
    }

    template <typename T>
    errorCode TckChannel<T>::begin(callback_t cb, float period, bool periodic)
    2a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a6c:	4604      	mov	r4, r0
    2a6e:	460e      	mov	r6, r1
    2a70:	ed2d 8b02 	vpush	{d8}
    {
        this->triggered = false;

        this->periodic = periodic;
    2a74:	7602      	strb	r2, [r0, #24]
        triggered = false;
        clock = F_CPU / 1'000'000.0f;
    }

    template <typename T>
    errorCode TckChannel<T>::begin(callback_t cb, float period, bool periodic)
    2a76:	b087      	sub	sp, #28
    {
        this->triggered = false;
    2a78:	7643      	strb	r3, [r0, #25]

        this->periodic = periodic;
        if (periodic)
    2a7a:	b192      	cbz	r2, 2aa2 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x3a>
    2a7c:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    }

    template <>
    inline float TckChannel<uint32_t>::getMaxMicros() const
    {
        return 0xF000'0000 / clock; // don't use full range otherwise tick might miss the turnover for large periods
    2a80:	ed9f 7a23 	vldr	s14, [pc, #140]	; 2b10 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0xa8>
    2a84:	ee87 8a27 	vdiv.f32	s16, s14, s15
    }

    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
    2a88:	eeb4 0ac8 	vcmpe.f32	s0, s16
    2a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a90:	dc34      	bgt.n	2afc <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x94>
        {
            microSecond = getMaxMicros();
            postError(errorCode::periodOverflow);
        }
        return (CounterType)(microSecond * clock);
    2a92:	ee20 0a27 	vmul.f32	s0, s0, s15
    2a96:	eefc 7ac0 	vcvt.u32.f32	s15, s0
        this->triggered = false;

        this->periodic = periodic;
        if (periodic)
        {
            this->currentPeriod = microsecondToCycles(period);
    2a9a:	edc4 7a08 	vstr	s15, [r4, #32]
            this->nextPeriod = this->currentPeriod;
    2a9e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2aa2:	2200      	movs	r2, #0
    2aa4:	68b3      	ldr	r3, [r6, #8]
    2aa6:	9204      	str	r2, [sp, #16]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    2aa8:	b323      	cbz	r3, 2af4 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x8c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    2aaa:	ad02      	add	r5, sp, #8
    2aac:	4631      	mov	r1, r6
    2aae:	2202      	movs	r2, #2
    2ab0:	4628      	mov	r0, r5
    2ab2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    2ab4:	68f7      	ldr	r7, [r6, #12]
	  _M_manager = __x._M_manager;
    2ab6:	68b6      	ldr	r6, [r6, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2ab8:	f104 0308 	add.w	r3, r4, #8
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2abc:	e895 0003 	ldmia.w	r5, {r0, r1}
    2ac0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    2ac4:	e893 0003 	ldmia.w	r3, {r0, r1}
    2ac8:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    2acc:	e89d 0003 	ldmia.w	sp, {r0, r1}
    2ad0:	e883 0003 	stmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2ad4:	6923      	ldr	r3, [r4, #16]
    2ad6:	6962      	ldr	r2, [r4, #20]
    2ad8:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
    2ada:	6126      	str	r6, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2adc:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
    2ade:	6167      	str	r7, [r4, #20]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2ae0:	b11b      	cbz	r3, 2aea <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x82>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2ae2:	2203      	movs	r2, #3
    2ae4:	4629      	mov	r1, r5
    2ae6:	4628      	mov	r0, r5
    2ae8:	4798      	blx	r3
        }
        this->callback = cb;

        return errorCode::OK;
    }
    2aea:	2000      	movs	r0, #0
    2aec:	b007      	add	sp, #28
    2aee:	ecbd 8b02 	vpop	{d8}
    2af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    2af4:	461e      	mov	r6, r3
    2af6:	9f05      	ldr	r7, [sp, #20]
    2af8:	ad02      	add	r5, sp, #8
    2afa:	e7dd      	b.n	2ab8 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x50>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
        {
            microSecond = getMaxMicros();
            postError(errorCode::periodOverflow);
    2afc:	f06f 0063 	mvn.w	r0, #99	; 0x63
    2b00:	f000 fa40 	bl	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    template <typename CounterType>
    CounterType TckChannel<CounterType>::microsecondToCycles(float microSecond) const
    {
        if (microSecond > getMaxMicros())
        {
            microSecond = getMaxMicros();
    2b04:	eeb0 0a48 	vmov.f32	s0, s16
    2b08:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    2b0c:	e7c1      	b.n	2a92 <TeensyTimerTool::TckChannel<unsigned long>::begin(std::function<void ()>, float, bool)+0x2a>
    2b0e:	bf00      	nop
    2b10:	4f700000 	.word	0x4f700000

00002b14 <TeensyTimerTool::GptChannel::~GptChannel()>:
        regs->CR &= ~GPT_CR_EN; // disable timer
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    2b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b16:	4605      	mov	r5, r0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2b18:	68c0      	ldr	r0, [r0, #12]
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    2b1a:	b08b      	sub	sp, #44	; 0x2c
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
        regs->IR = 0;
    2b1c:	2100      	movs	r1, #0
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2b1e:	6806      	ldr	r6, [r0, #0]
    2b20:	686b      	ldr	r3, [r5, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2b22:	ac06      	add	r4, sp, #24
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    2b24:	4f14      	ldr	r7, [pc, #80]	; (2b78 <TeensyTimerTool::GptChannel::~GptChannel()+0x64>)
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2b26:	f026 0601 	bic.w	r6, r6, #1
        regs->IR = 0;
        return errorCode::OK;
    }

    GptChannel::~GptChannel()
    2b2a:	602f      	str	r7, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
    2b2c:	68df      	ldr	r7, [r3, #12]
        return errorCode::OK;
    }

    errorCode GptChannel::stop()
    {
        regs->CR &= ~GPT_CR_EN; // disable timer
    2b2e:	6006      	str	r6, [r0, #0]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2b30:	9108      	str	r1, [sp, #32]
        regs->IR = 0;
    2b32:	60c1      	str	r1, [r0, #12]
    2b34:	9104      	str	r1, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2b36:	e894 0003 	ldmia.w	r4, {r0, r1}
    2b3a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    2b3e:	e893 0003 	ldmia.w	r3, {r0, r1}
    2b42:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    2b46:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2b4a:	689e      	ldr	r6, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    2b4c:	e883 0003 	stmia.w	r3, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2b50:	9a08      	ldr	r2, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
    2b52:	9608      	str	r6, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
    2b54:	609a      	str	r2, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
    2b58:	9709      	str	r7, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
    2b5a:	60da      	str	r2, [r3, #12]

    ~_Function_base()
    {
      if (_M_manager)
    2b5c:	b11e      	cbz	r6, 2b66 <TeensyTimerTool::GptChannel::~GptChannel()+0x52>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2b5e:	2203      	movs	r2, #3
    2b60:	4621      	mov	r1, r4
    2b62:	4620      	mov	r0, r4
    2b64:	47b0      	blx	r6

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2b66:	9b04      	ldr	r3, [sp, #16]
    2b68:	b11b      	cbz	r3, 2b72 <TeensyTimerTool::GptChannel::~GptChannel()+0x5e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2b6a:	a902      	add	r1, sp, #8
    2b6c:	2203      	movs	r2, #3
    2b6e:	4608      	mov	r0, r1
    2b70:	4798      	blx	r3

    GptChannel::~GptChannel()
    {
        stop();
        setCallback(nullptr);
    }
    2b72:	4628      	mov	r0, r5
    2b74:	b00b      	add	sp, #44	; 0x2c
    2b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b78:	20000230 	.word	0x20000230

00002b7c <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)>:
    {
        clock = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    }

    errorCode GptChannel::begin(callback_t cb, float period, bool periodic)
    {
    2b7c:	b570      	push	{r4, r5, r6, lr}
    2b7e:	4604      	mov	r4, r0
    2b80:	b08c      	sub	sp, #48	; 0x30
    2b82:	460d      	mov	r5, r1
        this->periodic = periodic;
    2b84:	7202      	strb	r2, [r0, #8]
        if (periodic)
    2b86:	2a00      	cmp	r2, #0
    2b88:	d13f      	bne.n	2c0a <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x8e>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2b8a:	2600      	movs	r6, #0
    2b8c:	68ab      	ldr	r3, [r5, #8]
    2b8e:	9606      	str	r6, [sp, #24]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    2b90:	2b00      	cmp	r3, #0
    2b92:	d036      	beq.n	2c02 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x86>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    2b94:	2202      	movs	r2, #2
    2b96:	4629      	mov	r1, r5
    2b98:	a804      	add	r0, sp, #16
    2b9a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    2b9c:	68ea      	ldr	r2, [r5, #12]
	  _M_manager = __x._M_manager;
    2b9e:	68ab      	ldr	r3, [r5, #8]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    2ba0:	ad08      	add	r5, sp, #32
    2ba2:	6864      	ldr	r4, [r4, #4]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2ba4:	960a      	str	r6, [sp, #40]	; 0x28
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
    2ba6:	9207      	str	r2, [sp, #28]
	  _M_manager = __x._M_manager;
    2ba8:	9306      	str	r3, [sp, #24]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    2baa:	b13b      	cbz	r3, 2bbc <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x40>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    2bac:	2202      	movs	r2, #2
    2bae:	a904      	add	r1, sp, #16
    2bb0:	4628      	mov	r0, r5
    2bb2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    2bb4:	9a07      	ldr	r2, [sp, #28]
	  _M_manager = __x._M_manager;
    2bb6:	9b06      	ldr	r3, [sp, #24]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
    2bb8:	920b      	str	r2, [sp, #44]	; 0x2c
	  _M_manager = __x._M_manager;
    2bba:	930a      	str	r3, [sp, #40]	; 0x28
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2bbc:	ab02      	add	r3, sp, #8
      __a = _GLIBCXX_MOVE(__b);
    2bbe:	68e6      	ldr	r6, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2bc0:	e895 0003 	ldmia.w	r5, {r0, r1}
    2bc4:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    2bc8:	e894 0003 	ldmia.w	r4, {r0, r1}
    2bcc:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    2bd0:	e893 0003 	ldmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    2bd4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    2bd6:	e884 0003 	stmia.w	r4, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2bda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
    2bdc:	930a      	str	r3, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
    2bde:	60a2      	str	r2, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2be0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
    2be2:	960b      	str	r6, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
    2be4:	60e2      	str	r2, [r4, #12]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2be6:	b11b      	cbz	r3, 2bf0 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x74>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2be8:	2203      	movs	r2, #3
    2bea:	4629      	mov	r1, r5
    2bec:	4628      	mov	r0, r5
    2bee:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2bf0:	9b06      	ldr	r3, [sp, #24]
    2bf2:	b11b      	cbz	r3, 2bfc <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x80>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2bf4:	a904      	add	r1, sp, #16
    2bf6:	2203      	movs	r2, #3
    2bf8:	4608      	mov	r0, r1
    2bfa:	4798      	blx	r3
            regs->OCR1 = reload;
        }
        setCallback(cb);

        return errorCode::OK;
    }
    2bfc:	2000      	movs	r0, #0
    2bfe:	b00c      	add	sp, #48	; 0x30
    2c00:	bd70      	pop	{r4, r5, r6, pc}
    2c02:	6864      	ldr	r4, [r4, #4]
    2c04:	ad08      	add	r5, sp, #32
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2c06:	930a      	str	r3, [sp, #40]	; 0x28
    2c08:	e7d8      	b.n	2bbc <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0x40>
    2c0a:	edd0 7a05 	vldr	s15, [r0, #20]
        return (uint32_t)(clock * micros) - 1;
    }

    float GptChannel::getMaxMicros() const
    {
        return (float)0xFFFF'FFFE / clock;
    2c0e:	eddf 6a15 	vldr	s13, [pc, #84]	; 2c64 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xe8>
    2c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        return errorCode::OK;
    }

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
    2c16:	eeb4 0ac7 	vcmpe.f32	s0, s14
    2c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c1e:	dc0a      	bgt.n	2c36 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xba>
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
        }
        return (uint32_t)(clock * micros) - 1;
    2c20:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        this->periodic = periodic;
        if (periodic)
        {
            reload = microsecondToCycles(period);
            regs->OCR1 = reload;
    2c24:	68e2      	ldr	r2, [r4, #12]
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
        }
        return (uint32_t)(clock * micros) - 1;
    2c26:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    2c2a:	ee10 3a10 	vmov	r3, s0
    2c2e:	3b01      	subs	r3, #1
    errorCode GptChannel::begin(callback_t cb, float period, bool periodic)
    {
        this->periodic = periodic;
        if (periodic)
        {
            reload = microsecondToCycles(period);
    2c30:	6123      	str	r3, [r4, #16]
            regs->OCR1 = reload;
    2c32:	6113      	str	r3, [r2, #16]
    2c34:	e7a9      	b.n	2b8a <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xe>

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    2c36:	6803      	ldr	r3, [r0, #0]
    2c38:	4a0b      	ldr	r2, [pc, #44]	; (2c68 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xec>)
    2c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c3c:	4293      	cmp	r3, r2
    2c3e:	d10e      	bne.n	2c5e <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xe2>

        inline errorCode trigger(float delay) override;
        inline errorCode triggerDirect(uint32_t delay) override;
        inline errorCode getTriggerReload(float delay, uint32_t* reload) override;

        inline float getMaxPeriod() const override { return getMaxMicros() / 1E6; }
    2c40:	eddf 7a0a 	vldr	s15, [pc, #40]	; 2c6c <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xf0>
    2c44:	ee87 0a27 	vdiv.f32	s0, s14, s15
    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
            postError(errorCode::periodOverflow);
    2c48:	f06f 0063 	mvn.w	r0, #99	; 0x63
    2c4c:	ed8d 0a01 	vstr	s0, [sp, #4]
    2c50:	f000 f998 	bl	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
    2c54:	edd4 7a05 	vldr	s15, [r4, #20]
    2c58:	ed9d 0a01 	vldr	s0, [sp, #4]
    2c5c:	e7e0      	b.n	2c20 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xa4>

    uint32_t GptChannel::microsecondToCycles(float micros) const
    {
        if (micros > getMaxMicros())
        {
            micros = getMaxPeriod();
    2c5e:	4798      	blx	r3
    2c60:	e7f2      	b.n	2c48 <TeensyTimerTool::GptChannel::begin(std::function<void ()>, float, bool)+0xcc>
    2c62:	bf00      	nop
    2c64:	4f800000 	.word	0x4f800000
    2c68:	00001c11 	.word	0x00001c11
    2c6c:	49742400 	.word	0x49742400

00002c70 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E>:
        TimerGenerator* const TCK = TCK_t::getTimer<uint32_t>;
        TimerGenerator* const TCK32 = TCK_t::getTimer<uint32_t>; // same as TCK
        TimerGenerator* const TCK64 = TCK_t::getTimer<uint64_t>;

        constexpr tick_t tick = &TCK_t::tick;
    }
    2c70:	b570      	push	{r4, r5, r6, lr}

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    2c72:	4d79      	ldr	r5, [pc, #484]	; (2e58 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1e8>)
    2c74:	682b      	ldr	r3, [r5, #0]
    2c76:	f013 0301 	ands.w	r3, r3, #1
    2c7a:	d10b      	bne.n	2c94 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x24>
    2c7c:	4c77      	ldr	r4, [pc, #476]	; (2e5c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1ec>)
    2c7e:	2601      	movs	r6, #1
    2c80:	4618      	mov	r0, r3
    2c82:	4a77      	ldr	r2, [pc, #476]	; (2e60 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    2c84:	4977      	ldr	r1, [pc, #476]	; (2e64 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f4>)
    2c86:	60a3      	str	r3, [r4, #8]
    2c88:	61a3      	str	r3, [r4, #24]
    2c8a:	62a3      	str	r3, [r4, #40]	; 0x28
    2c8c:	63a3      	str	r3, [r4, #56]	; 0x38
    2c8e:	602e      	str	r6, [r5, #0]
    2c90:	f002 fcfa 	bl	5688 <__aeabi_atexit>
    };

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    2c94:	4b74      	ldr	r3, [pc, #464]	; (2e68 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f8>)
    2c96:	681a      	ldr	r2, [r3, #0]
    2c98:	07d4      	lsls	r4, r2, #31
    2c9a:	d404      	bmi.n	2ca6 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x36>
    2c9c:	2001      	movs	r0, #1
    2c9e:	4a73      	ldr	r2, [pc, #460]	; (2e6c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1fc>)
    2ca0:	4973      	ldr	r1, [pc, #460]	; (2e70 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x200>)
    2ca2:	6018      	str	r0, [r3, #0]
    2ca4:	6011      	str	r1, [r2, #0]

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    2ca6:	4d73      	ldr	r5, [pc, #460]	; (2e74 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x204>)
    2ca8:	682b      	ldr	r3, [r5, #0]
    2caa:	f013 0301 	ands.w	r3, r3, #1
    2cae:	d10b      	bne.n	2cc8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x58>
    2cb0:	4c71      	ldr	r4, [pc, #452]	; (2e78 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x208>)
    2cb2:	2601      	movs	r6, #1
    2cb4:	4618      	mov	r0, r3
    2cb6:	4a6a      	ldr	r2, [pc, #424]	; (2e60 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    2cb8:	4970      	ldr	r1, [pc, #448]	; (2e7c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x20c>)
    2cba:	60a3      	str	r3, [r4, #8]
    2cbc:	61a3      	str	r3, [r4, #24]
    2cbe:	62a3      	str	r3, [r4, #40]	; 0x28
    2cc0:	63a3      	str	r3, [r4, #56]	; 0x38
    2cc2:	602e      	str	r6, [r5, #0]
    2cc4:	f002 fce0 	bl	5688 <__aeabi_atexit>
    };

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    2cc8:	4b6d      	ldr	r3, [pc, #436]	; (2e80 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x210>)
    2cca:	681a      	ldr	r2, [r3, #0]
    2ccc:	07d0      	lsls	r0, r2, #31
    2cce:	d404      	bmi.n	2cda <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x6a>
    2cd0:	2001      	movs	r0, #1
    2cd2:	4a6c      	ldr	r2, [pc, #432]	; (2e84 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x214>)
    2cd4:	496c      	ldr	r1, [pc, #432]	; (2e88 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x218>)
    2cd6:	6018      	str	r0, [r3, #0]
    2cd8:	6011      	str	r1, [r2, #0]

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    2cda:	4d6c      	ldr	r5, [pc, #432]	; (2e8c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x21c>)
    2cdc:	682b      	ldr	r3, [r5, #0]
    2cde:	f013 0301 	ands.w	r3, r3, #1
    2ce2:	d10b      	bne.n	2cfc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x8c>
    2ce4:	4c6a      	ldr	r4, [pc, #424]	; (2e90 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x220>)
    2ce6:	2601      	movs	r6, #1
    2ce8:	4618      	mov	r0, r3
    2cea:	4a5d      	ldr	r2, [pc, #372]	; (2e60 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    2cec:	4969      	ldr	r1, [pc, #420]	; (2e94 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x224>)
    2cee:	60a3      	str	r3, [r4, #8]
    2cf0:	61a3      	str	r3, [r4, #24]
    2cf2:	62a3      	str	r3, [r4, #40]	; 0x28
    2cf4:	63a3      	str	r3, [r4, #56]	; 0x38
    2cf6:	602e      	str	r6, [r5, #0]
    2cf8:	f002 fcc6 	bl	5688 <__aeabi_atexit>
    };

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    2cfc:	4b66      	ldr	r3, [pc, #408]	; (2e98 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x228>)
    2cfe:	681a      	ldr	r2, [r3, #0]
    2d00:	07d1      	lsls	r1, r2, #31
    2d02:	d404      	bmi.n	2d0e <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x9e>
    2d04:	2001      	movs	r0, #1
    2d06:	4a65      	ldr	r2, [pc, #404]	; (2e9c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x22c>)
    2d08:	4965      	ldr	r1, [pc, #404]	; (2ea0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x230>)
    2d0a:	6018      	str	r0, [r3, #0]
    2d0c:	6011      	str	r1, [r2, #0]

    template <unsigned m>
    bool TMR_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t TMR_t<m>::callbacks[4];
    2d0e:	4d65      	ldr	r5, [pc, #404]	; (2ea4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x234>)
    2d10:	682b      	ldr	r3, [r5, #0]
    2d12:	f013 0301 	ands.w	r3, r3, #1
    2d16:	d10b      	bne.n	2d30 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xc0>
    2d18:	4c63      	ldr	r4, [pc, #396]	; (2ea8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x238>)
    2d1a:	2601      	movs	r6, #1
    2d1c:	4618      	mov	r0, r3
    2d1e:	4a50      	ldr	r2, [pc, #320]	; (2e60 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    2d20:	4962      	ldr	r1, [pc, #392]	; (2eac <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x23c>)
    2d22:	60a3      	str	r3, [r4, #8]
    2d24:	61a3      	str	r3, [r4, #24]
    2d26:	62a3      	str	r3, [r4, #40]	; 0x28
    2d28:	63a3      	str	r3, [r4, #56]	; 0x38
    2d2a:	602e      	str	r6, [r5, #0]
    2d2c:	f002 fcac 	bl	5688 <__aeabi_atexit>
    };

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    2d30:	4b5f      	ldr	r3, [pc, #380]	; (2eb0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x240>)
    2d32:	681a      	ldr	r2, [r3, #0]
    2d34:	07d2      	lsls	r2, r2, #31
    2d36:	d404      	bmi.n	2d42 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xd2>
    2d38:	2001      	movs	r0, #1
    2d3a:	4a5e      	ldr	r2, [pc, #376]	; (2eb4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x244>)
    2d3c:	495e      	ldr	r1, [pc, #376]	; (2eb8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x248>)
    2d3e:	6018      	str	r0, [r3, #0]
    2d40:	6011      	str	r1, [r2, #0]

    template <unsigned m>
    bool GPT_t<m>::isInitialized = false;

    template <unsigned m>
    callback_t GPT_t<m>::callback = nullptr;
    2d42:	4c5e      	ldr	r4, [pc, #376]	; (2ebc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x24c>)
    2d44:	6823      	ldr	r3, [r4, #0]
    2d46:	f013 0301 	ands.w	r3, r3, #1
    2d4a:	d071      	beq.n	2e30 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1c0>
    2d4c:	4c5c      	ldr	r4, [pc, #368]	; (2ec0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x250>)
    2d4e:	6823      	ldr	r3, [r4, #0]
    2d50:	f013 0301 	ands.w	r3, r3, #1
    2d54:	d076      	beq.n	2e44 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1d4>
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    2d56:	4b5b      	ldr	r3, [pc, #364]	; (2ec4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x254>)
    2d58:	681a      	ldr	r2, [r3, #0]
    2d5a:	07d6      	lsls	r6, r2, #31
    2d5c:	d404      	bmi.n	2d68 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xf8>
    2d5e:	2001      	movs	r0, #1
    2d60:	4a59      	ldr	r2, [pc, #356]	; (2ec8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x258>)
    2d62:	495a      	ldr	r1, [pc, #360]	; (2ecc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x25c>)
    2d64:	6018      	str	r0, [r3, #0]
    2d66:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    2d68:	4b59      	ldr	r3, [pc, #356]	; (2ed0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x260>)
    2d6a:	681a      	ldr	r2, [r3, #0]
    2d6c:	07d5      	lsls	r5, r2, #31
    2d6e:	d404      	bmi.n	2d7a <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x10a>
    2d70:	2001      	movs	r0, #1
    2d72:	4a58      	ldr	r2, [pc, #352]	; (2ed4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x264>)
    2d74:	4958      	ldr	r1, [pc, #352]	; (2ed8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x268>)
    2d76:	6018      	str	r0, [r3, #0]
    2d78:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];
    2d7a:	4b58      	ldr	r3, [pc, #352]	; (2edc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x26c>)
    2d7c:	681a      	ldr	r2, [r3, #0]
    2d7e:	07d4      	lsls	r4, r2, #31
    2d80:	d404      	bmi.n	2d8c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x11c>
    2d82:	2001      	movs	r0, #1
    2d84:	4a56      	ldr	r2, [pc, #344]	; (2ee0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x270>)
    2d86:	4957      	ldr	r1, [pc, #348]	; (2ee4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x274>)
    2d88:	6018      	str	r0, [r3, #0]
    2d8a:	6011      	str	r1, [r2, #0]

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    2d8c:	4b56      	ldr	r3, [pc, #344]	; (2ee8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x278>)
    2d8e:	681a      	ldr	r2, [r3, #0]
    2d90:	07d0      	lsls	r0, r2, #31
    2d92:	d404      	bmi.n	2d9e <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x12e>
    2d94:	2001      	movs	r0, #1
    2d96:	4a55      	ldr	r2, [pc, #340]	; (2eec <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x27c>)
    2d98:	4955      	ldr	r1, [pc, #340]	; (2ef0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x280>)
    2d9a:	6018      	str	r0, [r3, #0]
    2d9c:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    2d9e:	4b55      	ldr	r3, [pc, #340]	; (2ef4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x284>)
    2da0:	681a      	ldr	r2, [r3, #0]
    2da2:	07d1      	lsls	r1, r2, #31
    2da4:	d404      	bmi.n	2db0 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x140>
    2da6:	2001      	movs	r0, #1
    2da8:	4a53      	ldr	r2, [pc, #332]	; (2ef8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x288>)
    2daa:	4954      	ldr	r1, [pc, #336]	; (2efc <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x28c>)
    2dac:	6018      	str	r0, [r3, #0]
    2dae:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];
    2db0:	4b53      	ldr	r3, [pc, #332]	; (2f00 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x290>)
    2db2:	681a      	ldr	r2, [r3, #0]
    2db4:	07d2      	lsls	r2, r2, #31
    2db6:	d404      	bmi.n	2dc2 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x152>
    2db8:	2001      	movs	r0, #1
    2dba:	4a52      	ldr	r2, [pc, #328]	; (2f04 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x294>)
    2dbc:	4952      	ldr	r1, [pc, #328]	; (2f08 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x298>)
    2dbe:	6018      	str	r0, [r3, #0]
    2dc0:	6011      	str	r1, [r2, #0]

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    2dc2:	4b52      	ldr	r3, [pc, #328]	; (2f0c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x29c>)
    2dc4:	681a      	ldr	r2, [r3, #0]
    2dc6:	07d6      	lsls	r6, r2, #31
    2dc8:	d404      	bmi.n	2dd4 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x164>
    2dca:	2001      	movs	r0, #1
    2dcc:	4a50      	ldr	r2, [pc, #320]	; (2f10 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2a0>)
    2dce:	4951      	ldr	r1, [pc, #324]	; (2f14 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2a4>)
    2dd0:	6018      	str	r0, [r3, #0]
    2dd2:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    2dd4:	4b50      	ldr	r3, [pc, #320]	; (2f18 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2a8>)
    2dd6:	681a      	ldr	r2, [r3, #0]
    2dd8:	07d5      	lsls	r5, r2, #31
    2dda:	d404      	bmi.n	2de6 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x176>
    2ddc:	2001      	movs	r0, #1
    2dde:	4a4f      	ldr	r2, [pc, #316]	; (2f1c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2ac>)
    2de0:	494f      	ldr	r1, [pc, #316]	; (2f20 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2b0>)
    2de2:	6018      	str	r0, [r3, #0]
    2de4:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];
    2de6:	4b4f      	ldr	r3, [pc, #316]	; (2f24 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2b4>)
    2de8:	681a      	ldr	r2, [r3, #0]
    2dea:	07d4      	lsls	r4, r2, #31
    2dec:	d404      	bmi.n	2df8 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x188>
    2dee:	2001      	movs	r0, #1
    2df0:	4a4d      	ldr	r2, [pc, #308]	; (2f28 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2b8>)
    2df2:	494e      	ldr	r1, [pc, #312]	; (2f2c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2bc>)
    2df4:	6018      	str	r0, [r3, #0]
    2df6:	6011      	str	r1, [r2, #0]

    // IMPLEMENTATION ==================================================================

    template <unsigned moduleNr> IMXRT_TMR_t*    const TMR_t<moduleNr>::pTMR = moduleNr == 0 ? &IMXRT_TMR1 : moduleNr == 1 ? &IMXRT_TMR2 : moduleNr == 2 ? &IMXRT_TMR3 : &IMXRT_TMR4;
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH0 = &pTMR->CH[0]; 
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH1 = &pTMR->CH[1];
    2df8:	4b4d      	ldr	r3, [pc, #308]	; (2f30 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2c0>)
    2dfa:	681a      	ldr	r2, [r3, #0]
    2dfc:	07d0      	lsls	r0, r2, #31
    2dfe:	d404      	bmi.n	2e0a <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x19a>
    2e00:	2001      	movs	r0, #1
    2e02:	4a4c      	ldr	r2, [pc, #304]	; (2f34 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2c4>)
    2e04:	494c      	ldr	r1, [pc, #304]	; (2f38 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2c8>)
    2e06:	6018      	str	r0, [r3, #0]
    2e08:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH2 = &pTMR->CH[2];
    2e0a:	4b4c      	ldr	r3, [pc, #304]	; (2f3c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2cc>)
    2e0c:	681a      	ldr	r2, [r3, #0]
    2e0e:	07d1      	lsls	r1, r2, #31
    2e10:	d404      	bmi.n	2e1c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1ac>
    2e12:	2001      	movs	r0, #1
    2e14:	4a4a      	ldr	r2, [pc, #296]	; (2f40 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2d0>)
    2e16:	494b      	ldr	r1, [pc, #300]	; (2f44 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2d4>)
    2e18:	6018      	str	r0, [r3, #0]
    2e1a:	6011      	str	r1, [r2, #0]
    template <unsigned moduleNr> IMXRT_TMR_CH_t* const TMR_t<moduleNr>::pCH3 = &pTMR->CH[3];
    2e1c:	4b4a      	ldr	r3, [pc, #296]	; (2f48 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2d8>)
    2e1e:	681a      	ldr	r2, [r3, #0]
    2e20:	07d2      	lsls	r2, r2, #31
    2e22:	d404      	bmi.n	2e2e <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1be>
    2e24:	2001      	movs	r0, #1
    2e26:	4a49      	ldr	r2, [pc, #292]	; (2f4c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2dc>)
    2e28:	4949      	ldr	r1, [pc, #292]	; (2f50 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2e0>)
    2e2a:	6018      	str	r0, [r3, #0]
    2e2c:	6011      	str	r1, [r2, #0]
    2e2e:	bd70      	pop	{r4, r5, r6, pc}
    2e30:	4d48      	ldr	r5, [pc, #288]	; (2f54 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2e4>)
    2e32:	2601      	movs	r6, #1
    2e34:	4a0a      	ldr	r2, [pc, #40]	; (2e60 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    2e36:	4628      	mov	r0, r5
    2e38:	4947      	ldr	r1, [pc, #284]	; (2f58 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2e8>)
    2e3a:	60ab      	str	r3, [r5, #8]
    2e3c:	6026      	str	r6, [r4, #0]
    2e3e:	f002 fc23 	bl	5688 <__aeabi_atexit>
    2e42:	e783      	b.n	2d4c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xdc>
    2e44:	4d45      	ldr	r5, [pc, #276]	; (2f5c <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2ec>)
    2e46:	2601      	movs	r6, #1
    2e48:	4a05      	ldr	r2, [pc, #20]	; (2e60 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x1f0>)
    2e4a:	4628      	mov	r0, r5
    2e4c:	4942      	ldr	r1, [pc, #264]	; (2f58 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0x2e8>)
    2e4e:	60ab      	str	r3, [r5, #8]
    2e50:	6026      	str	r6, [r4, #0]
    2e52:	f002 fc19 	bl	5688 <__aeabi_atexit>
    2e56:	e77e      	b.n	2d56 <_GLOBAL__sub_I__ZN15TeensyTimerTool4TMR1E+0xe6>
    2e58:	2000193c 	.word	0x2000193c
    2e5c:	20001a60 	.word	0x20001a60
    2e60:	20000738 	.word	0x20000738
    2e64:	00001f9d 	.word	0x00001f9d
    2e68:	20001938 	.word	0x20001938
    2e6c:	20001a5c 	.word	0x20001a5c
    2e70:	401dc000 	.word	0x401dc000
    2e74:	20001934 	.word	0x20001934
    2e78:	20001a1c 	.word	0x20001a1c
    2e7c:	00001fbd 	.word	0x00001fbd
    2e80:	20001930 	.word	0x20001930
    2e84:	20001a18 	.word	0x20001a18
    2e88:	401e0000 	.word	0x401e0000
    2e8c:	2000192c 	.word	0x2000192c
    2e90:	200019d8 	.word	0x200019d8
    2e94:	00001fdd 	.word	0x00001fdd
    2e98:	20001928 	.word	0x20001928
    2e9c:	200019d4 	.word	0x200019d4
    2ea0:	401e4000 	.word	0x401e4000
    2ea4:	20001924 	.word	0x20001924
    2ea8:	20001994 	.word	0x20001994
    2eac:	00001ffd 	.word	0x00001ffd
    2eb0:	20001920 	.word	0x20001920
    2eb4:	20001990 	.word	0x20001990
    2eb8:	401e8000 	.word	0x401e8000
    2ebc:	2000191c 	.word	0x2000191c
    2ec0:	20001918 	.word	0x20001918
    2ec4:	20001914 	.word	0x20001914
    2ec8:	2000196c 	.word	0x2000196c
    2ecc:	401dc020 	.word	0x401dc020
    2ed0:	20001910 	.word	0x20001910
    2ed4:	20001968 	.word	0x20001968
    2ed8:	401dc040 	.word	0x401dc040
    2edc:	2000190c 	.word	0x2000190c
    2ee0:	20001964 	.word	0x20001964
    2ee4:	401dc060 	.word	0x401dc060
    2ee8:	20001908 	.word	0x20001908
    2eec:	20001960 	.word	0x20001960
    2ef0:	401e0020 	.word	0x401e0020
    2ef4:	20001904 	.word	0x20001904
    2ef8:	2000195c 	.word	0x2000195c
    2efc:	401e0040 	.word	0x401e0040
    2f00:	20001900 	.word	0x20001900
    2f04:	20001958 	.word	0x20001958
    2f08:	401e0060 	.word	0x401e0060
    2f0c:	200018fc 	.word	0x200018fc
    2f10:	20001954 	.word	0x20001954
    2f14:	401e4020 	.word	0x401e4020
    2f18:	200018f8 	.word	0x200018f8
    2f1c:	20001950 	.word	0x20001950
    2f20:	401e4040 	.word	0x401e4040
    2f24:	200018f4 	.word	0x200018f4
    2f28:	2000194c 	.word	0x2000194c
    2f2c:	401e4060 	.word	0x401e4060
    2f30:	200018f0 	.word	0x200018f0
    2f34:	20001948 	.word	0x20001948
    2f38:	401e8020 	.word	0x401e8020
    2f3c:	200018ec 	.word	0x200018ec
    2f40:	20001944 	.word	0x20001944
    2f44:	401e8040 	.word	0x401e8040
    2f48:	200018e8 	.word	0x200018e8
    2f4c:	20001940 	.word	0x20001940
    2f50:	401e8060 	.word	0x401e8060
    2f54:	20001980 	.word	0x20001980
    2f58:	00001a59 	.word	0x00001a59
    2f5c:	20001970 	.word	0x20001970

00002f60 <TeensyTimerTool::Timer::Timer(TeensyTimerTool::ITimerChannel* (*)())>:
#include "timer.h"
#include "config.h"

namespace TeensyTimerTool
{
    Timer::Timer(TimerGenerator* generator)
    2f60:	b510      	push	{r4, lr}
    2f62:	4604      	mov	r4, r0
    :BaseTimer(generator, true)
    2f64:	2201      	movs	r2, #1
    2f66:	f7fe fd4f 	bl	1a08 <TeensyTimerTool::BaseTimer::BaseTimer(TeensyTimerTool::ITimerChannel* (*)(), bool)>
    {
    }
    2f6a:	4620      	mov	r0, r4
    2f6c:	bd10      	pop	{r4, pc}
    2f6e:	bf00      	nop

00002f70 <std::function<void (TeensyTimerTool::errorCode)>::~function()>:

    ~_Function_base()
    {
      if (_M_manager)
    2f70:	6883      	ldr	r3, [r0, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    2f72:	b510      	push	{r4, lr}
    2f74:	4604      	mov	r4, r0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    2f76:	b113      	cbz	r3, 2f7e <std::function<void (TeensyTimerTool::errorCode)>::~function()+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2f78:	2203      	movs	r2, #3
    2f7a:	4601      	mov	r1, r0
    2f7c:	4798      	blx	r3
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    2f7e:	4620      	mov	r0, r4
    2f80:	bd10      	pop	{r4, pc}
    2f82:	bf00      	nop

00002f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>:
    }

    errorFunc_t errFunc;

    errorCode postError(errorCode e)
    {
    2f84:	4b07      	ldr	r3, [pc, #28]	; (2fa4 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)+0x20>)
        if (errFunc != nullptr && e != errorCode::OK) errFunc(e);
    2f86:	689a      	ldr	r2, [r3, #8]
    }

    errorFunc_t errFunc;

    errorCode postError(errorCode e)
    {
    2f88:	b510      	push	{r4, lr}
    2f8a:	4604      	mov	r4, r0
    2f8c:	b082      	sub	sp, #8
        if (errFunc != nullptr && e != errorCode::OK) errFunc(e);
    2f8e:	b132      	cbz	r2, 2f9e <TeensyTimerTool::postError(TeensyTimerTool::errorCode)+0x1a>
    2f90:	b128      	cbz	r0, 2f9e <TeensyTimerTool::postError(TeensyTimerTool::errorCode)+0x1a>
    2f92:	a902      	add	r1, sp, #8
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    2f94:	68da      	ldr	r2, [r3, #12]
    2f96:	4618      	mov	r0, r3
    2f98:	f841 4d04 	str.w	r4, [r1, #-4]!
    2f9c:	4790      	blx	r2
        return e;
    }
    2f9e:	4620      	mov	r0, r4
    2fa0:	b002      	add	sp, #8
    2fa2:	bd10      	pop	{r4, pc}
    2fa4:	20001aa0 	.word	0x20001aa0

00002fa8 <_GLOBAL__sub_I__ZN15TeensyTimerTool12ErrorHandlerC2ER6Stream>:
    void attachErrFunc(errorFunc_t _errFunc)
    {
        errFunc = _errFunc;
    }

    2fa8:	b410      	push	{r4}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    2faa:	4b05      	ldr	r3, [pc, #20]	; (2fc0 <_GLOBAL__sub_I__ZN15TeensyTimerTool12ErrorHandlerC2ER6Stream+0x18>)
    2fac:	2400      	movs	r4, #0
            digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
            delay(50);
        }
    }

    errorFunc_t errFunc;
    2fae:	4a05      	ldr	r2, [pc, #20]	; (2fc4 <_GLOBAL__sub_I__ZN15TeensyTimerTool12ErrorHandlerC2ER6Stream+0x1c>)
    2fb0:	609c      	str	r4, [r3, #8]
    2fb2:	4618      	mov	r0, r3
    2fb4:	4904      	ldr	r1, [pc, #16]	; (2fc8 <_GLOBAL__sub_I__ZN15TeensyTimerTool12ErrorHandlerC2ER6Stream+0x20>)
    void attachErrFunc(errorFunc_t _errFunc)
    {
        errFunc = _errFunc;
    }

    2fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
            digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
            delay(50);
        }
    }

    errorFunc_t errFunc;
    2fba:	f002 bb65 	b.w	5688 <__aeabi_atexit>
    2fbe:	bf00      	nop
    2fc0:	20001aa0 	.word	0x20001aa0
    2fc4:	20000738 	.word	0x20000738
    2fc8:	00002f71 	.word	0x00002f71

00002fcc <TeensyTimerTool::PITChannel::start()>:
        return errorCode::OK;
    }

    errorCode PITChannel::start()
    {
       IMXRT_PIT_CHANNELS[chNr].TCTRL = PIT_TCTRL_TEN | PIT_TCTRL_TIE;
    2fcc:	68c1      	ldr	r1, [r0, #12]
    2fce:	2203      	movs	r2, #3
    2fd0:	4b02      	ldr	r3, [pc, #8]	; (2fdc <TeensyTimerTool::PITChannel::start()+0x10>)
       return errorCode::OK;
    }
    2fd2:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode PITChannel::start()
    {
       IMXRT_PIT_CHANNELS[chNr].TCTRL = PIT_TCTRL_TEN | PIT_TCTRL_TIE;
    2fd4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    2fd8:	609a      	str	r2, [r3, #8]
       return errorCode::OK;
    }
    2fda:	4770      	bx	lr
    2fdc:	40084100 	.word	0x40084100

00002fe0 <TeensyTimerTool::PITChannel::stop()>:

    errorCode PITChannel::stop()
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    2fe0:	68c1      	ldr	r1, [r0, #12]
    2fe2:	2200      	movs	r2, #0
    2fe4:	4b02      	ldr	r3, [pc, #8]	; (2ff0 <TeensyTimerTool::PITChannel::stop()+0x10>)
        return errorCode::OK;
    }
    2fe6:	4610      	mov	r0, r2
       return errorCode::OK;
    }

    errorCode PITChannel::stop()
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    2fe8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    2fec:	609a      	str	r2, [r3, #8]
        return errorCode::OK;
    }
    2fee:	4770      	bx	lr
    2ff0:	40084100 	.word	0x40084100

00002ff4 <TeensyTimerTool::PITChannel::~PITChannel()>:
            callback();
            if (!isPeriodic) IMXRT_PIT_CHANNELS[chNr].TCTRL = 0; // switch off timer
        }
    }

    PITChannel::~PITChannel()
    2ff4:	4a06      	ldr	r2, [pc, #24]	; (3010 <TeensyTimerTool::PITChannel::~PITChannel()+0x1c>)
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    2ff6:	6983      	ldr	r3, [r0, #24]
    2ff8:	b510      	push	{r4, lr}
    2ffa:	4604      	mov	r4, r0
    2ffc:	6002      	str	r2, [r0, #0]
    2ffe:	b123      	cbz	r3, 300a <TeensyTimerTool::PITChannel::~PITChannel()+0x16>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    3000:	f100 0110 	add.w	r1, r0, #16
    3004:	2203      	movs	r2, #3
    3006:	4608      	mov	r0, r1
    3008:	4798      	blx	r3
    {
        callback = nullptr;
    }
    300a:	4620      	mov	r0, r4
    300c:	bd10      	pop	{r4, pc}
    300e:	bf00      	nop
    3010:	200002e0 	.word	0x200002e0

00003014 <TeensyTimerTool::PITChannel::getMaxPeriod() const>:
        return errorCode::OK;
    }

    float PITChannel::getMaxPeriod() const
    {
        return (float)0xFFFF'FFFE / clockFactor / 1'000'000;
    3014:	4b06      	ldr	r3, [pc, #24]	; (3030 <TeensyTimerTool::PITChannel::getMaxPeriod() const+0x1c>)
    3016:	eddf 6a07 	vldr	s13, [pc, #28]	; 3034 <TeensyTimerTool::PITChannel::getMaxPeriod() const+0x20>
    301a:	edd3 7a00 	vldr	s15, [r3]
    301e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 3038 <TeensyTimerTool::PITChannel::getMaxPeriod() const+0x24>
    3022:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3026:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    }
    302a:	ee80 0a07 	vdiv.f32	s0, s0, s14
    302e:	4770      	bx	lr
    3030:	2000074c 	.word	0x2000074c
    3034:	4f800000 	.word	0x4f800000
    3038:	49742400 	.word	0x49742400

0000303c <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)>:
    // {
    //     return begin(cb, (float)micros, periodic);
    // }

    errorCode PITChannel::begin(callback_t cb, float micros, bool periodic)
    {
    303c:	b5f0      	push	{r4, r5, r6, r7, lr}
    303e:	688b      	ldr	r3, [r1, #8]
    3040:	4604      	mov	r4, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    3042:	2000      	movs	r0, #0
    3044:	ed2d 8b02 	vpush	{d8}
    3048:	b087      	sub	sp, #28
    304a:	eeb0 8a40 	vmov.f32	s16, s0
        isPeriodic = periodic;
    304e:	7222      	strb	r2, [r4, #8]
    3050:	9004      	str	r0, [sp, #16]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    3052:	2b00      	cmp	r3, #0
    3054:	d043      	beq.n	30de <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xa2>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    3056:	ad02      	add	r5, sp, #8
    3058:	460e      	mov	r6, r1
    305a:	2202      	movs	r2, #2
    305c:	4628      	mov	r0, r5
    305e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    3060:	68f7      	ldr	r7, [r6, #12]
	  _M_manager = __x._M_manager;
    3062:	68b6      	ldr	r6, [r6, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    3064:	f104 0310 	add.w	r3, r4, #16
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    3068:	e895 0003 	ldmia.w	r5, {r0, r1}
    306c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    3070:	e893 0003 	ldmia.w	r3, {r0, r1}
    3074:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    3078:	e89d 0003 	ldmia.w	sp, {r0, r1}
    307c:	e883 0003 	stmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    3080:	69a3      	ldr	r3, [r4, #24]
    3082:	69e2      	ldr	r2, [r4, #28]
    3084:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
    3086:	61a6      	str	r6, [r4, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    3088:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
    308a:	61e7      	str	r7, [r4, #28]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
    308c:	b11b      	cbz	r3, 3096 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0x5a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    308e:	2203      	movs	r2, #3
    3090:	4629      	mov	r1, r5
    3092:	4628      	mov	r0, r5
    3094:	4798      	blx	r3
        callback = cb;

        if (isPeriodic)
    3096:	7a23      	ldrb	r3, [r4, #8]
    3098:	b1e3      	cbz	r3, 30d4 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0x98>
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
    309a:	4b1a      	ldr	r3, [pc, #104]	; (3104 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xc8>)
        isPeriodic = periodic;
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    309c:	2000      	movs	r0, #0
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
    309e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 3108 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xcc>
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;
    30a2:	2101      	movs	r1, #1

            float tmp = micros * clockFactor;
    30a4:	ed93 0a00 	vldr	s0, [r3]
        isPeriodic = periodic;
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    30a8:	68e2      	ldr	r2, [r4, #12]
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
    30aa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
        isPeriodic = periodic;
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    30ae:	4b17      	ldr	r3, [pc, #92]	; (310c <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xd0>)
    30b0:	0112      	lsls	r2, r2, #4
    30b2:	4d16      	ldr	r5, [pc, #88]	; (310c <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xd0>)
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
    30b4:	ee20 0a08 	vmul.f32	s0, s0, s16
        isPeriodic = periodic;
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    30b8:	4413      	add	r3, r2
    30ba:	6098      	str	r0, [r3, #8]
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
    30bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
        callback = cb;

        if (isPeriodic)
        {
            IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;
    30c0:	60d9      	str	r1, [r3, #12]

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
    30c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    30c6:	dc0e      	bgt.n	30e6 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0xaa>
            {
                postError(errorCode::periodOverflow);
                IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
            } else
            {
                IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;
    30c8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    30cc:	ee17 3a90 	vmov	r3, s15
    30d0:	3b01      	subs	r3, #1
    30d2:	5153      	str	r3, [r2, r5]
            }
        }
        return errorCode::OK;
    }
    30d4:	2000      	movs	r0, #0
    30d6:	b007      	add	sp, #28
    30d8:	ecbd 8b02 	vpop	{d8}
    30dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
    30de:	461e      	mov	r6, r3
    30e0:	9f05      	ldr	r7, [sp, #20]
    30e2:	ad02      	add	r5, sp, #8
    30e4:	e7be      	b.n	3064 <TeensyTimerTool::PITChannel::begin(std::function<void ()>, float, bool)+0x28>
            IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
            {
                postError(errorCode::periodOverflow);
    30e6:	f06f 0063 	mvn.w	r0, #99	; 0x63
    30ea:	f7ff ff4b 	bl	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
                IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
    30ee:	68e3      	ldr	r3, [r4, #12]
    30f0:	f06f 0201 	mvn.w	r2, #1
            {
                IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;
            }
        }
        return errorCode::OK;
    }
    30f4:	2000      	movs	r0, #0

            float tmp = micros * clockFactor;
            if (tmp > 0xFFFF'FFFF)
            {
                postError(errorCode::periodOverflow);
                IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
    30f6:	011b      	lsls	r3, r3, #4
    30f8:	515a      	str	r2, [r3, r5]
            {
                IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;
            }
        }
        return errorCode::OK;
    }
    30fa:	b007      	add	sp, #28
    30fc:	ecbd 8b02 	vpop	{d8}
    3100:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3102:	bf00      	nop
    3104:	2000074c 	.word	0x2000074c
    3108:	4f800000 	.word	0x4f800000
    310c:	40084100 	.word	0x40084100

00003110 <TeensyTimerTool::PITChannel::trigger(float)>:
    // {
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
    3110:	b538      	push	{r3, r4, r5, lr}
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
    3112:	4b1d      	ldr	r3, [pc, #116]	; (3188 <TeensyTimerTool::PITChannel::trigger(float)+0x78>)
    // {
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
    3114:	4604      	mov	r4, r0
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
        if (tmp > 0xFFFF'FFFF)
    3116:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 318c <TeensyTimerTool::PITChannel::trigger(float)+0x7c>
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    311a:	2000      	movs	r0, #0
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
    311c:	edd3 7a00 	vldr	s15, [r3]
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;
    3120:	2301      	movs	r3, #1
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    3122:	68e1      	ldr	r1, [r4, #12]
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
    3124:	eef8 7a67 	vcvt.f32.u32	s15, s15
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    3128:	4a19      	ldr	r2, [pc, #100]	; (3190 <TeensyTimerTool::PITChannel::trigger(float)+0x80>)
    312a:	0109      	lsls	r1, r1, #4
    312c:	4615      	mov	r5, r2
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
    312e:	ee27 0a80 	vmul.f32	s0, s15, s0
    //     return trigger((float)delay);
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
    3132:	440a      	add	r2, r1
    3134:	6090      	str	r0, [r2, #8]
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
        if (tmp > 0xFFFF'FFFF)
    3136:	eeb4 0ac7 	vcmpe.f32	s0, s14
    // }

    errorCode PITChannel::trigger(float delay) //should be optimized somehow
    {
        IMXRT_PIT_CHANNELS[chNr].TCTRL = 0;
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;
    313a:	60d3      	str	r3, [r2, #12]

        float tmp = delay * clockFactor;
        if (tmp > 0xFFFF'FFFF)
    313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3140:	dc0e      	bgt.n	3160 <TeensyTimerTool::PITChannel::trigger(float)+0x50>
        {
            postError(errorCode::periodOverflow);
            IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
        } else
            IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;
    3142:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    3146:	ee10 3a10 	vmov	r3, s0
    314a:	3b01      	subs	r3, #1
    314c:	514b      	str	r3, [r1, r5]

        start();
    314e:	6823      	ldr	r3, [r4, #0]
    3150:	4910      	ldr	r1, [pc, #64]	; (3194 <TeensyTimerTool::PITChannel::trigger(float)+0x84>)
    3152:	699b      	ldr	r3, [r3, #24]
    3154:	428b      	cmp	r3, r1
    3156:	d113      	bne.n	3180 <TeensyTimerTool::PITChannel::trigger(float)+0x70>
        return errorCode::OK;
    }

    errorCode PITChannel::start()
    {
       IMXRT_PIT_CHANNELS[chNr].TCTRL = PIT_TCTRL_TEN | PIT_TCTRL_TIE;
    3158:	2303      	movs	r3, #3
            IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;

        start();

        return errorCode::OK;
    }
    315a:	2000      	movs	r0, #0
        return errorCode::OK;
    }

    errorCode PITChannel::start()
    {
       IMXRT_PIT_CHANNELS[chNr].TCTRL = PIT_TCTRL_TEN | PIT_TCTRL_TIE;
    315c:	6093      	str	r3, [r2, #8]
            IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;

        start();

        return errorCode::OK;
    }
    315e:	bd38      	pop	{r3, r4, r5, pc}
        IMXRT_PIT_CHANNELS[chNr].TFLG = 1;

        float tmp = delay * clockFactor;
        if (tmp > 0xFFFF'FFFF)
        {
            postError(errorCode::periodOverflow);
    3160:	f06f 0063 	mvn.w	r0, #99	; 0x63
    3164:	f7ff ff0e 	bl	2f84 <TeensyTimerTool::postError(TeensyTimerTool::errorCode)>
            IMXRT_PIT_CHANNELS[chNr].LDVAL = 0xFFFF'FFFE;
    3168:	68e3      	ldr	r3, [r4, #12]
    316a:	f06f 0101 	mvn.w	r1, #1
    316e:	462a      	mov	r2, r5
    3170:	011b      	lsls	r3, r3, #4
    3172:	5159      	str	r1, [r3, r5]
    3174:	441a      	add	r2, r3
        } else
            IMXRT_PIT_CHANNELS[chNr].LDVAL = (uint32_t)tmp - 1;

        start();
    3176:	6823      	ldr	r3, [r4, #0]
    3178:	4906      	ldr	r1, [pc, #24]	; (3194 <TeensyTimerTool::PITChannel::trigger(float)+0x84>)
    317a:	699b      	ldr	r3, [r3, #24]
    317c:	428b      	cmp	r3, r1
    317e:	d0eb      	beq.n	3158 <TeensyTimerTool::PITChannel::trigger(float)+0x48>
    3180:	4620      	mov	r0, r4
    3182:	4798      	blx	r3

        return errorCode::OK;
    }
    3184:	2000      	movs	r0, #0
    3186:	bd38      	pop	{r3, r4, r5, pc}
    3188:	2000074c 	.word	0x2000074c
    318c:	4f800000 	.word	0x4f800000
    3190:	40084100 	.word	0x40084100
    3194:	00002fcd 	.word	0x00002fcd

00003198 <__tcf_0>:
#include "PIT.h"

namespace TeensyTimerTool
{
    bool PIT_t::isInitialized = false;
    PITChannel PIT_t::channel[4] = {{0}, {1}, {2}, {3}};
    3198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    319c:	4c0f      	ldr	r4, [pc, #60]	; (31dc <__tcf_0+0x44>)
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
	    _M_manager = nullptr;
    319e:	2500      	movs	r5, #0
    31a0:	4f0f      	ldr	r7, [pc, #60]	; (31e0 <__tcf_0+0x48>)
    31a2:	f1a4 0680 	sub.w	r6, r4, #128	; 0x80
            callback();
            if (!isPeriodic) IMXRT_PIT_CHANNELS[chNr].TCTRL = 0; // switch off timer
        }
    }

    PITChannel::~PITChannel()
    31a6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 31e4 <__tcf_0+0x4c>
    31aa:	f854 3c10 	ldr.w	r3, [r4, #-16]
    31ae:	f1a4 0e10 	sub.w	lr, r4, #16
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    31b2:	2203      	movs	r2, #3
    31b4:	4621      	mov	r1, r4
    31b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    31b8:	4620      	mov	r0, r4
    31ba:	42bb      	cmp	r3, r7
    31bc:	d10b      	bne.n	31d6 <__tcf_0+0x3e>
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    31be:	68a3      	ldr	r3, [r4, #8]
    31c0:	f844 8c10 	str.w	r8, [r4, #-16]
    31c4:	b113      	cbz	r3, 31cc <__tcf_0+0x34>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    31c6:	4798      	blx	r3
	    _M_manager = nullptr;
    31c8:	60a5      	str	r5, [r4, #8]
	    _M_invoker = nullptr;
    31ca:	60e5      	str	r5, [r4, #12]
    31cc:	3c20      	subs	r4, #32
    31ce:	42b4      	cmp	r4, r6
    31d0:	d1eb      	bne.n	31aa <__tcf_0+0x12>
    31d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31d6:	4670      	mov	r0, lr
    31d8:	4798      	blx	r3
    31da:	e7f7      	b.n	31cc <__tcf_0+0x34>
    31dc:	20001b20 	.word	0x20001b20
    31e0:	00002ff5 	.word	0x00002ff5
    31e4:	200002e0 	.word	0x200002e0

000031e8 <TeensyTimerTool::PITChannel::~PITChannel()>:
    31e8:	4a08      	ldr	r2, [pc, #32]	; (320c <TeensyTimerTool::PITChannel::~PITChannel()+0x24>)
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
      {
	if (_M_manager)
    31ea:	6983      	ldr	r3, [r0, #24]
    31ec:	b510      	push	{r4, lr}
    31ee:	4604      	mov	r4, r0
    31f0:	6002      	str	r2, [r0, #0]
    31f2:	b123      	cbz	r3, 31fe <TeensyTimerTool::PITChannel::~PITChannel()+0x16>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    31f4:	f100 0110 	add.w	r1, r0, #16
    31f8:	2203      	movs	r2, #3
    31fa:	4608      	mov	r0, r1
    31fc:	4798      	blx	r3
    {
        callback = nullptr;
    }
    31fe:	4620      	mov	r0, r4
    3200:	2120      	movs	r1, #32
    3202:	f001 fe1b 	bl	4e3c <operator delete(void*, unsigned int)>
    3206:	4620      	mov	r0, r4
    3208:	bd10      	pop	{r4, pc}
    320a:	bf00      	nop
    320c:	200002e0 	.word	0x200002e0

00003210 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE>:

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    3210:	481f      	ldr	r0, [pc, #124]	; (3290 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x80>)
    3212:	2100      	movs	r1, #0
    3214:	4b1f      	ldr	r3, [pc, #124]	; (3294 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x84>)
    3216:	69c0      	ldr	r0, [r0, #28]
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    3218:	4a1f      	ldr	r2, [pc, #124]	; (3298 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x88>)

     uint32_t PITChannel::clockFactor = 1;
}
    321a:	b410      	push	{r4}
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    321c:	0644      	lsls	r4, r0, #25
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    321e:	601a      	str	r2, [r3, #0]
    3220:	6059      	str	r1, [r3, #4]
    3222:	60d9      	str	r1, [r3, #12]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
    3224:	6199      	str	r1, [r3, #24]
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    3226:	d401      	bmi.n	322c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x1c>
    3228:	491c      	ldr	r1, [pc, #112]	; (329c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x8c>)
    322a:	6809      	ldr	r1, [r1, #0]
    322c:	4818      	ldr	r0, [pc, #96]	; (3290 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x80>)
    322e:	2100      	movs	r1, #0
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    3230:	2401      	movs	r4, #1
    3232:	621a      	str	r2, [r3, #32]
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    3234:	69c0      	ldr	r0, [r0, #28]
    3236:	6259      	str	r1, [r3, #36]	; 0x24
    3238:	0640      	lsls	r0, r0, #25
    323a:	6399      	str	r1, [r3, #56]	; 0x38
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    323c:	62dc      	str	r4, [r3, #44]	; 0x2c
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    323e:	d401      	bmi.n	3244 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x34>
    3240:	4916      	ldr	r1, [pc, #88]	; (329c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x8c>)
    3242:	6809      	ldr	r1, [r1, #0]
    3244:	4812      	ldr	r0, [pc, #72]	; (3290 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x80>)
    3246:	2100      	movs	r1, #0
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    3248:	2402      	movs	r4, #2
    324a:	641a      	str	r2, [r3, #64]	; 0x40
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    324c:	69c0      	ldr	r0, [r0, #28]
    324e:	6459      	str	r1, [r3, #68]	; 0x44
    3250:	6599      	str	r1, [r3, #88]	; 0x58
    3252:	0641      	lsls	r1, r0, #25
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    3254:	64dc      	str	r4, [r3, #76]	; 0x4c
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    3256:	d401      	bmi.n	325c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x4c>
    3258:	4910      	ldr	r1, [pc, #64]	; (329c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x8c>)
    325a:	6809      	ldr	r1, [r1, #0]
    325c:	4c0c      	ldr	r4, [pc, #48]	; (3290 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x80>)
    325e:	2100      	movs	r1, #0
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    3260:	661a      	str	r2, [r3, #96]	; 0x60
    3262:	2003      	movs	r0, #3
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    3264:	69e2      	ldr	r2, [r4, #28]
    3266:	6659      	str	r1, [r3, #100]	; 0x64
    3268:	6799      	str	r1, [r3, #120]	; 0x78
    };

    // IMPLEMENTATION ==============================================

    PITChannel::PITChannel(unsigned nr)
        : ITimerChannel(nullptr), chNr(nr)
    326a:	66d8      	str	r0, [r3, #108]	; 0x6c
    {
        callback = nullptr;
        clockFactor = (CCM_CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL) ? 24 : (F_BUS_ACTUAL / 1000000);
    326c:	0653      	lsls	r3, r2, #25
    326e:	d40d      	bmi.n	328c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x7c>
    3270:	4b0a      	ldr	r3, [pc, #40]	; (329c <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x8c>)
    3272:	4a0b      	ldr	r2, [pc, #44]	; (32a0 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x90>)
    3274:	681b      	ldr	r3, [r3, #0]
    3276:	fbb3 f3f2 	udiv	r3, r3, r2
    327a:	4c0a      	ldr	r4, [pc, #40]	; (32a4 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x94>)
#include "PIT.h"

namespace TeensyTimerTool
{
    bool PIT_t::isInitialized = false;
    PITChannel PIT_t::channel[4] = {{0}, {1}, {2}, {3}};
    327c:	2000      	movs	r0, #0
    327e:	4a0a      	ldr	r2, [pc, #40]	; (32a8 <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x98>)
    3280:	6023      	str	r3, [r4, #0]
    3282:	490a      	ldr	r1, [pc, #40]	; (32ac <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x9c>)

     uint32_t PITChannel::clockFactor = 1;
}
    3284:	f85d 4b04 	ldr.w	r4, [sp], #4
#include "PIT.h"

namespace TeensyTimerTool
{
    bool PIT_t::isInitialized = false;
    PITChannel PIT_t::channel[4] = {{0}, {1}, {2}, {3}};
    3288:	f002 b9fe 	b.w	5688 <__aeabi_atexit>
    328c:	2318      	movs	r3, #24
    328e:	e7f4      	b.n	327a <_GLOBAL__sub_I__ZN15TeensyTimerTool5PIT_t13isInitializedE+0x6a>
    3290:	400fc000 	.word	0x400fc000
    3294:	20001ab0 	.word	0x20001ab0
    3298:	200002e0 	.word	0x200002e0
    329c:	20000770 	.word	0x20000770
    32a0:	000f4240 	.word	0x000f4240
    32a4:	2000074c 	.word	0x2000074c
    32a8:	20000738 	.word	0x20000738
    32ac:	00003199 	.word	0x00003199

000032b0 <EventResponder::~EventResponder()>:
class EventResponder
{
public:
	constexpr EventResponder() {
	}
	~EventResponder() {
    32b0:	b538      	push	{r3, r4, r5, lr}
    32b2:	4b06      	ldr	r3, [pc, #24]	; (32cc <EventResponder::~EventResponder()+0x1c>)
    32b4:	4605      	mov	r5, r0
    32b6:	6003      	str	r3, [r0, #0]
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    32b8:	f3ef 8410 	mrs	r4, PRIMASK
		__disable_irq();
    32bc:	b672      	cpsid	i

	// Do not call any function.  The user's program must occasionally check
	// whether the event has occurred, or use one of the wait functions.
	void detach() {
		bool irq = disableInterrupts();
		detachNoInterrupts();
    32be:	f001 fd6f 	bl	4da0 <EventResponder::detachNoInterrupts()>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    32c2:	b904      	cbnz	r4, 32c6 <EventResponder::~EventResponder()+0x16>
    32c4:	b662      	cpsie	i
public:
	constexpr EventResponder() {
	}
	~EventResponder() {
		detach();
	}
    32c6:	4628      	mov	r0, r5
    32c8:	bd38      	pop	{r3, r4, r5, pc}
    32ca:	bf00      	nop
    32cc:	20000328 	.word	0x20000328

000032d0 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    32d0:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    32d2:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    32d4:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    32d6:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    32d8:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    32da:	d003      	beq.n	32e4 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    32dc:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    32e0:	f001 bcfc 	b.w	4cdc <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    32e4:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    32e6:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    32ea:	4718      	bx	r3

000032ec <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)>:
    {
        static EventResponder er;

        void initYieldHook()
        {
            er.attach([](EventResponderRef r)
    32ec:	b570      	push	{r4, r5, r6, lr}
    32ee:	4c14      	ldr	r4, [pc, #80]	; (3340 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x54>)
    32f0:	4606      	mov	r6, r0
    32f2:	f104 0550 	add.w	r5, r4, #80	; 0x50

    void TCK_t::tick()
    {
        for (unsigned i = 0; i < NR_OF_TCK_TIMERS; i++)
        {
            if (channels[i] != nullptr)
    32f6:	f854 3f04 	ldr.w	r3, [r4, #4]!
            {
                channels[i]->tick();
    32fa:	4618      	mov	r0, r3

    void TCK_t::tick()
    {
        for (unsigned i = 0; i < NR_OF_TCK_TIMERS; i++)
        {
            if (channels[i] != nullptr)
    32fc:	b113      	cbz	r3, 3304 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x18>
            {
                channels[i]->tick();
    32fe:	681b      	ldr	r3, [r3, #0]
    3300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3302:	4798      	blx	r3
        }
    }

    void TCK_t::tick()
    {
        for (unsigned i = 0; i < NR_OF_TCK_TIMERS; i++)
    3304:	42ac      	cmp	r4, r5
    3306:	d1f6      	bne.n	32f6 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0xa>
            {
                TeensyTimerTool::TCK_t::tick();
                r.triggerEvent();
    3308:	6833      	ldr	r3, [r6, #0]
    330a:	4a0e      	ldr	r2, [pc, #56]	; (3344 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x58>)
    330c:	681b      	ldr	r3, [r3, #0]
    330e:	4293      	cmp	r3, r2
    3310:	d10a      	bne.n	3328 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x3c>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3312:	7f32      	ldrb	r2, [r6, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3314:	2300      	movs	r3, #0
		_data = data;
		if (_type == EventTypeImmediate) {
    3316:	2a02      	cmp	r2, #2

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3318:	6073      	str	r3, [r6, #4]
		_data = data;
    331a:	60f3      	str	r3, [r6, #12]
		if (_type == EventTypeImmediate) {
    331c:	d00a      	beq.n	3334 <TeensyTimerTool::initYieldHook()::{lambda(EventResponder&)#1}::_FUN(EventResponder&)+0x48>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    331e:	4630      	mov	r0, r6
            });
    3320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3324:	f001 bcda 	b.w	4cdc <EventResponder::triggerEventNotImmediate()>
        void initYieldHook()
        {
            er.attach([](EventResponderRef r)
            {
                TeensyTimerTool::TCK_t::tick();
                r.triggerEvent();
    3328:	2200      	movs	r2, #0
    332a:	4630      	mov	r0, r6
    332c:	4611      	mov	r1, r2
            });
    332e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        void initYieldHook()
        {
            er.attach([](EventResponderRef r)
            {
                TeensyTimerTool::TCK_t::tick();
                r.triggerEvent();
    3332:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3334:	68b3      	ldr	r3, [r6, #8]
    3336:	4630      	mov	r0, r6
            });
    3338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    333c:	4718      	bx	r3
    333e:	bf00      	nop
    3340:	20001b2c 	.word	0x20001b2c
    3344:	000032d1 	.word	0x000032d1

00003348 <TeensyTimerTool::initYieldHook()>:
    namespace TeensyTimerTool
    {
        static EventResponder er;

        void initYieldHook()
        {
    3348:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    334a:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    334e:	b672      	cpsid	i
	// Attach a function to be called from yield().  This should be the
	// default way to use EventResponder.  Calls from yield() allow use
	// of Arduino libraries, String, Serial, etc.
	void attach(EventResponderFunction function, uint8_t priority=128) {
		bool irq = disableInterrupts();
		detachNoInterrupts();
    3350:	4c12      	ldr	r4, [pc, #72]	; (339c <TeensyTimerTool::initYieldHook()+0x54>)
    3352:	4620      	mov	r0, r4
    3354:	f001 fd24 	bl	4da0 <EventResponder::detachNoInterrupts()>
		_function = function;
		_type = EventTypeYield;
		yield_active_check_flags |= YIELD_CHECK_EVENT_RESPONDER; // user setup a yield type...
    3358:	4a11      	ldr	r2, [pc, #68]	; (33a0 <TeensyTimerTool::initYieldHook()+0x58>)
	// default way to use EventResponder.  Calls from yield() allow use
	// of Arduino libraries, String, Serial, etc.
	void attach(EventResponderFunction function, uint8_t priority=128) {
		bool irq = disableInterrupts();
		detachNoInterrupts();
		_function = function;
    335a:	4812      	ldr	r0, [pc, #72]	; (33a4 <TeensyTimerTool::initYieldHook()+0x5c>)
		_type = EventTypeYield;
    335c:	2101      	movs	r1, #1
		yield_active_check_flags |= YIELD_CHECK_EVENT_RESPONDER; // user setup a yield type...
    335e:	7813      	ldrb	r3, [r2, #0]
	// default way to use EventResponder.  Calls from yield() allow use
	// of Arduino libraries, String, Serial, etc.
	void attach(EventResponderFunction function, uint8_t priority=128) {
		bool irq = disableInterrupts();
		detachNoInterrupts();
		_function = function;
    3360:	60a0      	str	r0, [r4, #8]
		_type = EventTypeYield;
		yield_active_check_flags |= YIELD_CHECK_EVENT_RESPONDER; // user setup a yield type...
    3362:	f043 0304 	orr.w	r3, r3, #4
	// of Arduino libraries, String, Serial, etc.
	void attach(EventResponderFunction function, uint8_t priority=128) {
		bool irq = disableInterrupts();
		detachNoInterrupts();
		_function = function;
		_type = EventTypeYield;
    3366:	7721      	strb	r1, [r4, #28]
		yield_active_check_flags |= YIELD_CHECK_EVENT_RESPONDER; // user setup a yield type...
    3368:	7013      	strb	r3, [r2, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    336a:	b955      	cbnz	r5, 3382 <TeensyTimerTool::initYieldHook()+0x3a>
    336c:	b662      	cpsie	i
    336e:	7f23      	ldrb	r3, [r4, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3370:	6065      	str	r5, [r4, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3372:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3374:	60e5      	str	r5, [r4, #12]
		if (_type == EventTypeImmediate) {
    3376:	d00c      	beq.n	3392 <TeensyTimerTool::initYieldHook()+0x4a>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3378:	4808      	ldr	r0, [pc, #32]	; (339c <TeensyTimerTool::initYieldHook()+0x54>)
            {
                TeensyTimerTool::TCK_t::tick();
                r.triggerEvent();
            });
            er.triggerEvent();
        }
    337a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    337e:	f001 bcad 	b.w	4cdc <EventResponder::triggerEventNotImmediate()>

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3382:	2300      	movs	r3, #0
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3384:	4805      	ldr	r0, [pc, #20]	; (339c <TeensyTimerTool::initYieldHook()+0x54>)

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3386:	6063      	str	r3, [r4, #4]
		_data = data;
    3388:	60e3      	str	r3, [r4, #12]
    338a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    338e:	f001 bca5 	b.w	4cdc <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3392:	68a3      	ldr	r3, [r4, #8]
    3394:	4620      	mov	r0, r4
    3396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    339a:	4718      	bx	r3
    339c:	20000750 	.word	0x20000750
    33a0:	200007b8 	.word	0x200007b8
    33a4:	000032ed 	.word	0x000032ed

000033a8 <_GLOBAL__sub_I__ZN15TeensyTimerTool5TCK_t13isInitializedE>:

    #include "EventResponder.h"

    namespace TeensyTimerTool
    {
        static EventResponder er;
    33a8:	4a02      	ldr	r2, [pc, #8]	; (33b4 <_GLOBAL__sub_I__ZN15TeensyTimerTool5TCK_t13isInitializedE+0xc>)
    33aa:	4903      	ldr	r1, [pc, #12]	; (33b8 <_GLOBAL__sub_I__ZN15TeensyTimerTool5TCK_t13isInitializedE+0x10>)
    33ac:	4803      	ldr	r0, [pc, #12]	; (33bc <_GLOBAL__sub_I__ZN15TeensyTimerTool5TCK_t13isInitializedE+0x14>)
    33ae:	f002 b96b 	b.w	5688 <__aeabi_atexit>
    33b2:	bf00      	nop
    33b4:	20000738 	.word	0x20000738
    33b8:	000032b1 	.word	0x000032b1
    33bc:	20000750 	.word	0x20000750

000033c0 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    33c0:	4a95      	ldr	r2, [pc, #596]	; (3618 <set_arm_clock+0x258>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    33c2:	4b96      	ldr	r3, [pc, #600]	; (361c <set_arm_clock+0x25c>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    33c4:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    33c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    33ca:	4c95      	ldr	r4, [pc, #596]	; (3620 <set_arm_clock+0x260>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    33cc:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    33d0:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    33d2:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    33d4:	d91c      	bls.n	3410 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    33d6:	4b93      	ldr	r3, [pc, #588]	; (3624 <set_arm_clock+0x264>)
    33d8:	4298      	cmp	r0, r3
    33da:	f240 8113 	bls.w	3604 <set_arm_clock+0x244>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    33de:	4b92      	ldr	r3, [pc, #584]	; (3628 <set_arm_clock+0x268>)
    33e0:	f240 6527 	movw	r5, #1575	; 0x627
    33e4:	4f91      	ldr	r7, [pc, #580]	; (362c <set_arm_clock+0x26c>)
    33e6:	4403      	add	r3, r0
    33e8:	4c91      	ldr	r4, [pc, #580]	; (3630 <set_arm_clock+0x270>)
    33ea:	0a1a      	lsrs	r2, r3, #8
    33ec:	fba7 3202 	umull	r3, r2, r7, r2
    33f0:	09d3      	lsrs	r3, r2, #7
    33f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    33f6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    33fa:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    33fe:	42ab      	cmp	r3, r5
    3400:	bf28      	it	cs
    3402:	462b      	movcs	r3, r5
    3404:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    3408:	fba4 3503 	umull	r3, r5, r4, r3
    340c:	08ed      	lsrs	r5, r5, #3
    340e:	e004      	b.n	341a <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    3410:	4d88      	ldr	r5, [pc, #544]	; (3634 <set_arm_clock+0x274>)
    3412:	42a8      	cmp	r0, r5
    3414:	bf94      	ite	ls
    3416:	2506      	movls	r5, #6
    3418:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    341a:	4a80      	ldr	r2, [pc, #512]	; (361c <set_arm_clock+0x25c>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    341c:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3420:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3424:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3426:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    342a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    342e:	d20a      	bcs.n	3446 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    3430:	4b7b      	ldr	r3, [pc, #492]	; (3620 <set_arm_clock+0x260>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3432:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3436:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3438:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    343a:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    343c:	6813      	ldr	r3, [r2, #0]
    343e:	2b00      	cmp	r3, #0
    3440:	dafc      	bge.n	343c <set_arm_clock+0x7c>
    3442:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    3446:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    344a:	d12f      	bne.n	34ac <set_arm_clock+0xec>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    344c:	4c7a      	ldr	r4, [pc, #488]	; (3638 <set_arm_clock+0x278>)
    344e:	4a7b      	ldr	r2, [pc, #492]	; (363c <set_arm_clock+0x27c>)
    3450:	f8d4 c010 	ldr.w	ip, [r4, #16]
    3454:	4614      	mov	r4, r2
    3456:	ea0c 0202 	and.w	r2, ip, r2
    345a:	42a2      	cmp	r2, r4
    345c:	bf0a      	itet	eq
    345e:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    3462:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    3466:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3468:	ea8e 0403 	eor.w	r4, lr, r3
    346c:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    3470:	d006      	beq.n	3480 <set_arm_clock+0xc0>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    3472:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    3476:	4c69      	ldr	r4, [pc, #420]	; (361c <set_arm_clock+0x25c>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    3478:	ea4e 0e03 	orr.w	lr, lr, r3
			CCM_CBCDR = cbcdr;
    347c:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3480:	ea81 0302 	eor.w	r3, r1, r2
    3484:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    3488:	d008      	beq.n	349c <set_arm_clock+0xdc>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    348a:	4b64      	ldr	r3, [pc, #400]	; (361c <set_arm_clock+0x25c>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    348c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    3490:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    3492:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    3494:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    3496:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3498:	071c      	lsls	r4, r3, #28
    349a:	d4fc      	bmi.n	3496 <set_arm_clock+0xd6>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    349c:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    34a0:	4a5e      	ldr	r2, [pc, #376]	; (361c <set_arm_clock+0x25c>)
    34a2:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    34a6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    34a8:	0699      	lsls	r1, r3, #26
    34aa:	d4fc      	bmi.n	34a6 <set_arm_clock+0xe6>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    34ac:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    34ae:	4c64      	ldr	r4, [pc, #400]	; (3640 <set_arm_clock+0x280>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    34b0:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    34b2:	fb01 f302 	mul.w	r3, r1, r2
    34b6:	fb00 f303 	mul.w	r3, r0, r3
    34ba:	42a3      	cmp	r3, r4
    34bc:	d809      	bhi.n	34d2 <set_arm_clock+0x112>
		if (div_arm < 8) {
    34be:	2a07      	cmp	r2, #7
    34c0:	f200 8095 	bhi.w	35ee <set_arm_clock+0x22e>
			div_arm = div_arm + 1;
    34c4:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    34c6:	fb01 f302 	mul.w	r3, r1, r2
    34ca:	fb00 f303 	mul.w	r3, r0, r3
    34ce:	42a3      	cmp	r3, r4
    34d0:	d9f5      	bls.n	34be <set_arm_clock+0xfe>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    34d2:	485c      	ldr	r0, [pc, #368]	; (3644 <set_arm_clock+0x284>)
    34d4:	4c5c      	ldr	r4, [pc, #368]	; (3648 <set_arm_clock+0x288>)
    34d6:	4418      	add	r0, r3
    34d8:	fba4 0300 	umull	r0, r3, r4, r0
    34dc:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    34de:	2b6c      	cmp	r3, #108	; 0x6c
    34e0:	f200 808b 	bhi.w	35fa <set_arm_clock+0x23a>
	if (mult < 54) mult = 54;
    34e4:	2b35      	cmp	r3, #53	; 0x35
    34e6:	f200 808f 	bhi.w	3608 <set_arm_clock+0x248>
    34ea:	f8df 8188 	ldr.w	r8, [pc, #392]	; 3674 <set_arm_clock+0x2b4>
    34ee:	2336      	movs	r3, #54	; 0x36
    34f0:	4856      	ldr	r0, [pc, #344]	; (364c <set_arm_clock+0x28c>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    34f2:	f8df c144 	ldr.w	ip, [pc, #324]	; 3638 <set_arm_clock+0x278>
    34f6:	4c56      	ldr	r4, [pc, #344]	; (3650 <set_arm_clock+0x290>)
    34f8:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    34fc:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3500:	ea09 0404 	and.w	r4, r9, r4
    3504:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    3506:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    350a:	d00b      	beq.n	3524 <set_arm_clock+0x164>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    350c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    3510:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    3514:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    3516:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    351a:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    351e:	6823      	ldr	r3, [r4, #0]
    3520:	2b00      	cmp	r3, #0
    3522:	dafc      	bge.n	351e <set_arm_clock+0x15e>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    3524:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 361c <set_arm_clock+0x25c>
    3528:	3a01      	subs	r2, #1
    352a:	f8dc 3010 	ldr.w	r3, [ip, #16]
    352e:	f003 0307 	and.w	r3, r3, #7
    3532:	4293      	cmp	r3, r2
    3534:	d007      	beq.n	3546 <set_arm_clock+0x186>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    3536:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    353a:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    353c:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    3540:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3542:	03db      	lsls	r3, r3, #15
    3544:	d4fc      	bmi.n	3540 <set_arm_clock+0x180>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3546:	3901      	subs	r1, #1
    3548:	0289      	lsls	r1, r1, #10
    354a:	ea8e 0301 	eor.w	r3, lr, r1
    354e:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    3552:	d00c      	beq.n	356e <set_arm_clock+0x1ae>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    3554:	4b31      	ldr	r3, [pc, #196]	; (361c <set_arm_clock+0x25c>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    3556:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    355a:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    355e:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    3560:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    3564:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    3568:	6c93      	ldr	r3, [r2, #72]	; 0x48
    356a:	0799      	lsls	r1, r3, #30
    356c:	d4fc      	bmi.n	3568 <set_arm_clock+0x1a8>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    356e:	4b39      	ldr	r3, [pc, #228]	; (3654 <set_arm_clock+0x294>)
    3570:	4939      	ldr	r1, [pc, #228]	; (3658 <set_arm_clock+0x298>)
    3572:	4403      	add	r3, r0
    3574:	09db      	lsrs	r3, r3, #7
    3576:	fba1 3103 	umull	r3, r1, r1, r3
    357a:	0b09      	lsrs	r1, r1, #12
    357c:	2904      	cmp	r1, #4
    357e:	bf28      	it	cs
    3580:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    3582:	1e4b      	subs	r3, r1, #1
    3584:	021b      	lsls	r3, r3, #8
    3586:	ea8e 0203 	eor.w	r2, lr, r3
    358a:	f412 7f40 	tst.w	r2, #768	; 0x300
    358e:	d007      	beq.n	35a0 <set_arm_clock+0x1e0>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    3590:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3594:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    3598:	4a20      	ldr	r2, [pc, #128]	; (361c <set_arm_clock+0x25c>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    359a:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    359e:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    35a0:	4b1e      	ldr	r3, [pc, #120]	; (361c <set_arm_clock+0x25c>)
    35a2:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    35a4:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    35a6:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    35aa:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    35ac:	6c93      	ldr	r3, [r2, #72]	; 0x48
    35ae:	069b      	lsls	r3, r3, #26
    35b0:	d4fc      	bmi.n	35ac <set_arm_clock+0x1ec>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    35b2:	4b2a      	ldr	r3, [pc, #168]	; (365c <set_arm_clock+0x29c>)
    35b4:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    35b8:	4c29      	ldr	r4, [pc, #164]	; (3660 <set_arm_clock+0x2a0>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    35ba:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    35bc:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    35c0:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    35c2:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    35c6:	4c27      	ldr	r4, [pc, #156]	; (3664 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    35c8:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    35cc:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    35d0:	4a25      	ldr	r2, [pc, #148]	; (3668 <set_arm_clock+0x2a8>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    35d2:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    35d4:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    35d6:	d208      	bcs.n	35ea <set_arm_clock+0x22a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    35d8:	4b11      	ldr	r3, [pc, #68]	; (3620 <set_arm_clock+0x260>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    35da:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    35de:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    35e0:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    35e2:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    35e4:	6813      	ldr	r3, [r2, #0]
    35e6:	2b00      	cmp	r3, #0
    35e8:	dafc      	bge.n	35e4 <set_arm_clock+0x224>
	}

	return frequency;
}
    35ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    35ee:	2904      	cmp	r1, #4
    35f0:	f63f af6f 	bhi.w	34d2 <set_arm_clock+0x112>
				div_ahb = div_ahb + 1;
    35f4:	3101      	adds	r1, #1
				div_arm = 1;
    35f6:	2201      	movs	r2, #1
    35f8:	e75b      	b.n	34b2 <set_arm_clock+0xf2>
    35fa:	f8df 807c 	ldr.w	r8, [pc, #124]	; 3678 <set_arm_clock+0x2b8>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    35fe:	236c      	movs	r3, #108	; 0x6c
    3600:	481a      	ldr	r0, [pc, #104]	; (366c <set_arm_clock+0x2ac>)
    3602:	e776      	b.n	34f2 <set_arm_clock+0x132>
    3604:	2512      	movs	r5, #18
    3606:	e708      	b.n	341a <set_arm_clock+0x5a>
    3608:	4819      	ldr	r0, [pc, #100]	; (3670 <set_arm_clock+0x2b0>)
    360a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 367c <set_arm_clock+0x2bc>
    360e:	fb00 f003 	mul.w	r0, r0, r3
    3612:	ea43 0808 	orr.w	r8, r3, r8
    3616:	e76c      	b.n	34f2 <set_arm_clock+0x132>
    3618:	1f78a400 	.word	0x1f78a400
    361c:	400fc000 	.word	0x400fc000
    3620:	40080000 	.word	0x40080000
    3624:	23c34600 	.word	0x23c34600
    3628:	dc3cba00 	.word	0xdc3cba00
    362c:	004cb223 	.word	0x004cb223
    3630:	51eb851f 	.word	0x51eb851f
    3634:	016e3600 	.word	0x016e3600
    3638:	400d8000 	.word	0x400d8000
    363c:	80003040 	.word	0x80003040
    3640:	269fb1ff 	.word	0x269fb1ff
    3644:	005b8d80 	.word	0x005b8d80
    3648:	165e9f81 	.word	0x165e9f81
    364c:	269fb200 	.word	0x269fb200
    3650:	8001307f 	.word	0x8001307f
    3654:	08f0d17f 	.word	0x08f0d17f
    3658:	00e5109f 	.word	0x00e5109f
    365c:	431bde83 	.word	0x431bde83
    3660:	20000774 	.word	0x20000774
    3664:	20000770 	.word	0x20000770
    3668:	20001b88 	.word	0x20001b88
    366c:	4d3f6400 	.word	0x4d3f6400
    3670:	00b71b00 	.word	0x00b71b00
    3674:	80002036 	.word	0x80002036
    3678:	8000206c 	.word	0x8000206c
    367c:	80002000 	.word	0x80002000

00003680 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    3680:	2800      	cmp	r0, #0
    3682:	d057      	beq.n	3734 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3684:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    3686:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    368a:	b085      	sub	sp, #20
    368c:	4683      	mov	fp, r0
    368e:	4c2a      	ldr	r4, [pc, #168]	; (3738 <delay+0xb8>)
    3690:	4d2a      	ldr	r5, [pc, #168]	; (373c <delay+0xbc>)
    3692:	4e2b      	ldr	r6, [pc, #172]	; (3740 <delay+0xc0>)
    3694:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3698:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    369c:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    369e:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    36a0:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    36a4:	2900      	cmp	r1, #0
    36a6:	d1f7      	bne.n	3698 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    36a8:	4f26      	ldr	r7, [pc, #152]	; (3744 <delay+0xc4>)
    36aa:	e9cd 8902 	strd	r8, r9, [sp, #8]
    36ae:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    36b0:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    36b2:	4a25      	ldr	r2, [pc, #148]	; (3748 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    36b4:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    36b8:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    36ba:	6812      	ldr	r2, [r2, #0]
    36bc:	2701      	movs	r7, #1
    36be:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    36c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    36c6:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    36c8:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    36ca:	428b      	cmp	r3, r1
    36cc:	bf08      	it	eq
    36ce:	4542      	cmpeq	r2, r8
    36d0:	bf2c      	ite	cs
    36d2:	46c2      	movcs	sl, r8
    36d4:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    36d6:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    36da:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    36de:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    36e0:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    36e2:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    36e6:	2b00      	cmp	r3, #0
    36e8:	d1f7      	bne.n	36da <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    36ea:	9801      	ldr	r0, [sp, #4]
    36ec:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    36ee:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    36f0:	4815      	ldr	r0, [pc, #84]	; (3748 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    36f2:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    36f6:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    36f8:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    36fc:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    3700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    3704:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3708:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    370a:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    370c:	4299      	cmp	r1, r3
    370e:	bf08      	it	eq
    3710:	4540      	cmpeq	r0, r8
    3712:	bf2c      	ite	cs
    3714:	4643      	movcs	r3, r8
    3716:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    3718:	441a      	add	r2, r3
    371a:	4572      	cmp	r2, lr
    371c:	d307      	bcc.n	372e <delay+0xae>
			if (--msec == 0) return;
    371e:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    3722:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    3726:	d1d8      	bne.n	36da <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    3728:	b005      	add	sp, #20
    372a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    372e:	f001 fbeb 	bl	4f08 <yield>
	}
    3732:	e7d2      	b.n	36da <delay+0x5a>
    3734:	4770      	bx	lr
    3736:	bf00      	nop
    3738:	20001e24 	.word	0x20001e24
    373c:	20001b8c 	.word	0x20001b8c
    3740:	20001b84 	.word	0x20001b84
    3744:	e0001004 	.word	0xe0001004
    3748:	20001b88 	.word	0x20001b88

0000374c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    374c:	2836      	cmp	r0, #54	; 0x36
    374e:	d81c      	bhi.n	378a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    3750:	0100      	lsls	r0, r0, #4
    3752:	4a1a      	ldr	r2, [pc, #104]	; (37bc <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3754:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    3756:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    375a:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    375c:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    375e:	d015      	beq.n	378c <pinMode+0x40>
    3760:	2904      	cmp	r1, #4
    3762:	d013      	beq.n	378c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3764:	68dc      	ldr	r4, [r3, #12]
    3766:	6842      	ldr	r2, [r0, #4]
    3768:	ea22 0204 	bic.w	r2, r2, r4
    376c:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    376e:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    3770:	b1e9      	cbz	r1, 37ae <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    3772:	2902      	cmp	r1, #2
    3774:	d01e      	beq.n	37b4 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    3776:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    3778:	685b      	ldr	r3, [r3, #4]
}
    377a:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    377e:	bf0c      	ite	eq
    3780:	490f      	ldreq	r1, [pc, #60]	; (37c0 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    3782:	4910      	ldrne	r1, [pc, #64]	; (37c4 <pinMode+0x78>)
    3784:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    3786:	2215      	movs	r2, #21
    3788:	601a      	str	r2, [r3, #0]
}
    378a:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    378c:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    378e:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    3790:	6844      	ldr	r4, [r0, #4]
    3792:	ea42 0204 	orr.w	r2, r2, r4
    3796:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3798:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    379a:	d008      	beq.n	37ae <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    379c:	f640 0138 	movw	r1, #2104	; 0x838
    37a0:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    37a2:	685b      	ldr	r3, [r3, #4]
    37a4:	2215      	movs	r2, #21
}
    37a6:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    37aa:	601a      	str	r2, [r3, #0]
}
    37ac:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    37ae:	2138      	movs	r1, #56	; 0x38
    37b0:	6011      	str	r1, [r2, #0]
    37b2:	e7f6      	b.n	37a2 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    37b4:	4904      	ldr	r1, [pc, #16]	; (37c8 <pinMode+0x7c>)
    37b6:	6011      	str	r1, [r2, #0]
    37b8:	e7f3      	b.n	37a2 <pinMode+0x56>
    37ba:	bf00      	nop
    37bc:	2000032c 	.word	0x2000032c
    37c0:	00013038 	.word	0x00013038
    37c4:	00010038 	.word	0x00010038
    37c8:	0001f038 	.word	0x0001f038

000037cc <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    37cc:	2004      	movs	r0, #4
    37ce:	4671      	mov	r1, lr
    37d0:	4208      	tst	r0, r1
    37d2:	d003      	beq.n	37dc <_MSP>
    37d4:	f3ef 8009 	mrs	r0, PSP
    37d8:	f000 b808 	b.w	37ec <HardFault_HandlerC>

000037dc <_MSP>:
    37dc:	f3ef 8008 	mrs	r0, MSP
    37e0:	f000 b804 	b.w	37ec <HardFault_HandlerC>

000037e4 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    37e4:	4770      	bx	lr
    37e6:	bf00      	nop

000037e8 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    37e8:	4770      	bx	lr
    37ea:	bf00      	nop

000037ec <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    37ec:	4b1b      	ldr	r3, [pc, #108]	; (385c <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    37ee:	2105      	movs	r1, #5
    37f0:	4a1b      	ldr	r2, [pc, #108]	; (3860 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    37f2:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    37f4:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    37f6:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    37fa:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    37fc:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    3800:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3802:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    3804:	4c17      	ldr	r4, [pc, #92]	; (3864 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3806:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    3808:	4817      	ldr	r0, [pc, #92]	; (3868 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    380a:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    380c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    3810:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    3814:	6823      	ldr	r3, [r4, #0]
    3816:	4283      	cmp	r3, r0
    3818:	d902      	bls.n	3820 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    381a:	4814      	ldr	r0, [pc, #80]	; (386c <HardFault_HandlerC+0x80>)
    381c:	f7ff fdd0 	bl	33c0 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    3820:	4d0e      	ldr	r5, [pc, #56]	; (385c <HardFault_HandlerC+0x70>)
    3822:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    3824:	2000      	movs	r0, #0
    3826:	4a12      	ldr	r2, [pc, #72]	; (3870 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    3828:	4912      	ldr	r1, [pc, #72]	; (3874 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    382a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    382e:	9001      	str	r0, [sp, #4]
    3830:	9b01      	ldr	r3, [sp, #4]
    3832:	4293      	cmp	r3, r2
    3834:	d805      	bhi.n	3842 <HardFault_HandlerC+0x56>
    3836:	9b01      	ldr	r3, [sp, #4]
    3838:	3301      	adds	r3, #1
    383a:	9301      	str	r3, [sp, #4]
    383c:	9b01      	ldr	r3, [sp, #4]
    383e:	4293      	cmp	r3, r2
    3840:	d9f9      	bls.n	3836 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    3842:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    3846:	9001      	str	r0, [sp, #4]
    3848:	9b01      	ldr	r3, [sp, #4]
    384a:	428b      	cmp	r3, r1
    384c:	d8ed      	bhi.n	382a <HardFault_HandlerC+0x3e>
    384e:	9b01      	ldr	r3, [sp, #4]
    3850:	3301      	adds	r3, #1
    3852:	9301      	str	r3, [sp, #4]
    3854:	9b01      	ldr	r3, [sp, #4]
    3856:	428b      	cmp	r3, r1
    3858:	d9f9      	bls.n	384e <HardFault_HandlerC+0x62>
    385a:	e7e6      	b.n	382a <HardFault_HandlerC+0x3e>
    385c:	401bc000 	.word	0x401bc000
    3860:	401f8000 	.word	0x401f8000
    3864:	20000774 	.word	0x20000774
    3868:	23c345ff 	.word	0x23c345ff
    386c:	11e1a300 	.word	0x11e1a300
    3870:	000f423f 	.word	0x000f423f
    3874:	0089543f 	.word	0x0089543f

00003878 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    3878:	4a09      	ldr	r2, [pc, #36]	; (38a0 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    387a:	b508      	push	{r3, lr}
        char *prev = __brkval;
    387c:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
    387e:	b120      	cbz	r0, 388a <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    3880:	4418      	add	r0, r3
    3882:	4908      	ldr	r1, [pc, #32]	; (38a4 <_sbrk+0x2c>)
    3884:	4288      	cmp	r0, r1
    3886:	d802      	bhi.n	388e <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    3888:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
    388a:	4618      	mov	r0, r3
    388c:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    388e:	f001 ff07 	bl	56a0 <__errno>
    3892:	220c      	movs	r2, #12
                        return (void *)-1;
    3894:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    3898:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    389a:	4618      	mov	r0, r3
    389c:	bd08      	pop	{r3, pc}
    389e:	bf00      	nop
    38a0:	20000778 	.word	0x20000778
    38a4:	20280000 	.word	0x20280000

000038a8 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    38a8:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    38aa:	4a06      	ldr	r2, [pc, #24]	; (38c4 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    38ac:	2107      	movs	r1, #7
    38ae:	4b06      	ldr	r3, [pc, #24]	; (38c8 <Panic_Temp_isr+0x20>)
    38b0:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    38b2:	6b93      	ldr	r3, [r2, #56]	; 0x38
    38b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    38b8:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    38ba:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    38be:	bf30      	wfi
    38c0:	e7fd      	b.n	38be <Panic_Temp_isr+0x16>
    38c2:	bf00      	nop
    38c4:	400d4000 	.word	0x400d4000
    38c8:	400ac000 	.word	0x400ac000

000038cc <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    38cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    38d0:	4ca6      	ldr	r4, [pc, #664]	; (3b6c <isr+0x2a0>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    38d2:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    38d4:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    38d8:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    38dc:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    38e0:	f000 808e 	beq.w	3a00 <isr+0x134>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    38e4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    38e8:	2b00      	cmp	r3, #0
    38ea:	f000 8084 	beq.w	39f6 <isr+0x12a>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    38ee:	f04f 1a01 	mov.w	sl, #65537	; 0x10001
    38f2:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 3ba4 <isr+0x2d8>
    38f6:	4e9e      	ldr	r6, [pc, #632]	; (3b70 <isr+0x2a4>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    38f8:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    38fa:	46d3      	mov	fp, sl
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    38fc:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    3900:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    3902:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    3904:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3908:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    390c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    3910:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3914:	0499      	lsls	r1, r3, #18
    3916:	d5f5      	bpl.n	3904 <isr+0x38>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    3918:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    391c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3920:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    3924:	f8c5 b1b4 	str.w	fp, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    3928:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    392c:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    3930:	d1fa      	bne.n	3928 <isr+0x5c>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3932:	b281      	uxth	r1, r0
    3934:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    3938:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    393c:	42b9      	cmp	r1, r7
    393e:	f200 8133 	bhi.w	3ba8 <isr+0x2dc>
    3942:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    3946:	f080 82a4 	bcs.w	3e92 <isr+0x5c6>
    394a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    394e:	f000 81f7 	beq.w	3d40 <isr+0x474>
    3952:	f200 816e 	bhi.w	3c32 <isr+0x366>
    3956:	2980      	cmp	r1, #128	; 0x80
    3958:	f000 81b7 	beq.w	3cca <isr+0x3fe>
    395c:	2982      	cmp	r1, #130	; 0x82
    395e:	f040 8160 	bne.w	3c22 <isr+0x356>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    3962:	b292      	uxth	r2, r2
    3964:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    3968:	2907      	cmp	r1, #7
    396a:	f200 815a 	bhi.w	3c22 <isr+0x356>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    396e:	0089      	lsls	r1, r1, #2
    3970:	4f80      	ldr	r7, [pc, #512]	; (3b74 <isr+0x2a8>)
		reply_buffer[0] = 0;
    3972:	4881      	ldr	r0, [pc, #516]	; (3b78 <isr+0x2ac>)
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    3974:	0612      	lsls	r2, r2, #24
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    3976:	440f      	add	r7, r1
    3978:	6839      	ldr	r1, [r7, #0]
		reply_buffer[0] = 0;
    397a:	7003      	strb	r3, [r0, #0]
		reply_buffer[1] = 0;
    397c:	7043      	strb	r3, [r0, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    397e:	f140 831b 	bpl.w	3fb8 <isr+0x6ec>
    3982:	03cb      	lsls	r3, r1, #15
    3984:	d501      	bpl.n	398a <isr+0xbe>
			reply_buffer[0] = 1;
    3986:	2301      	movs	r3, #1
    3988:	7003      	strb	r3, [r0, #0]
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    398a:	4a7c      	ldr	r2, [pc, #496]	; (3b7c <isr+0x2b0>)
    398c:	2701      	movs	r7, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    398e:	4b7c      	ldr	r3, [pc, #496]	; (3b80 <isr+0x2b4>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    3990:	2100      	movs	r1, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3992:	6017      	str	r7, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3994:	6053      	str	r3, [r2, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3996:	64b2      	str	r2, [r6, #72]	; 0x48
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3998:	4b7a      	ldr	r3, [pc, #488]	; (3b84 <isr+0x2b8>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    399a:	64f1      	str	r1, [r6, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    399c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    39a0:	f503 5780 	add.w	r7, r3, #4096	; 0x1000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    39a4:	6090      	str	r0, [r2, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    39a6:	f503 5000 	add.w	r0, r3, #8192	; 0x2000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    39aa:	60d3      	str	r3, [r2, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    39ac:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    39b0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    39b4:	6117      	str	r7, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    39b6:	6150      	str	r0, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    39b8:	6193      	str	r3, [r2, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    39ba:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    39be:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    39c2:	2b00      	cmp	r3, #0
    39c4:	d1fb      	bne.n	39be <isr+0xf2>
	}
	endpoint0_transfer_ack.next = 1;
    39c6:	4a70      	ldr	r2, [pc, #448]	; (3b88 <isr+0x2bc>)
    39c8:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    39ca:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    39cc:	60f3      	str	r3, [r6, #12]
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    39ce:	60b2      	str	r2, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    39d0:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    39d2:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    39d4:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    39d8:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    39dc:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    39de:	ea41 0300 	orr.w	r3, r1, r0
    39e2:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    39e6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    39ea:	2b00      	cmp	r3, #0
    39ec:	d1fb      	bne.n	39e6 <isr+0x11a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    39ee:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    39f2:	2b00      	cmp	r3, #0
    39f4:	d182      	bne.n	38fc <isr+0x30>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    39f6:	4a5d      	ldr	r2, [pc, #372]	; (3b6c <isr+0x2a0>)
    39f8:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    39fc:	2b00      	cmp	r3, #0
    39fe:	d150      	bne.n	3aa2 <isr+0x1d6>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    3a00:	f018 0f40 	tst.w	r8, #64	; 0x40
    3a04:	d018      	beq.n	3a38 <isr+0x16c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    3a06:	4b59      	ldr	r3, [pc, #356]	; (3b6c <isr+0x2a0>)
    3a08:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    3a0c:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    3a0e:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    3a12:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    3a16:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    3a1a:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    3a1e:	4b53      	ldr	r3, [pc, #332]	; (3b6c <isr+0x2a0>)
    3a20:	2c00      	cmp	r4, #0
    3a22:	d1fa      	bne.n	3a1a <isr+0x14e>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    3a24:	f04f 32ff 	mov.w	r2, #4294967295
    3a28:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    3a2c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    3a30:	f000 fea8 	bl	4784 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    3a34:	4b55      	ldr	r3, [pc, #340]	; (3b8c <isr+0x2c0>)
    3a36:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    3a38:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    3a3c:	d003      	beq.n	3a46 <isr+0x17a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    3a3e:	4b54      	ldr	r3, [pc, #336]	; (3b90 <isr+0x2c4>)
    3a40:	681b      	ldr	r3, [r3, #0]
    3a42:	b103      	cbz	r3, 3a46 <isr+0x17a>
    3a44:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    3a46:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    3a4a:	d003      	beq.n	3a54 <isr+0x188>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    3a4c:	4b51      	ldr	r3, [pc, #324]	; (3b94 <isr+0x2c8>)
    3a4e:	681b      	ldr	r3, [r3, #0]
    3a50:	b103      	cbz	r3, 3a54 <isr+0x188>
    3a52:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    3a54:	f018 0f04 	tst.w	r8, #4
    3a58:	d008      	beq.n	3a6c <isr+0x1a0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    3a5a:	4b44      	ldr	r3, [pc, #272]	; (3b6c <isr+0x2a0>)
    3a5c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    3a60:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    3a64:	d07f      	beq.n	3b66 <isr+0x29a>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    3a66:	4b4c      	ldr	r3, [pc, #304]	; (3b98 <isr+0x2cc>)
    3a68:	2201      	movs	r2, #1
    3a6a:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    3a6c:	4b3f      	ldr	r3, [pc, #252]	; (3b6c <isr+0x2a0>)
    3a6e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    3a72:	0612      	lsls	r2, r2, #24
    3a74:	d512      	bpl.n	3a9c <isr+0x1d0>
    3a76:	f018 0f80 	tst.w	r8, #128	; 0x80
    3a7a:	d00f      	beq.n	3a9c <isr+0x1d0>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    3a7c:	4947      	ldr	r1, [pc, #284]	; (3b9c <isr+0x2d0>)
    3a7e:	780a      	ldrb	r2, [r1, #0]
    3a80:	b162      	cbz	r2, 3a9c <isr+0x1d0>
			if (--usb_reboot_timer == 0) {
    3a82:	3a01      	subs	r2, #1
    3a84:	b2d2      	uxtb	r2, r2
    3a86:	700a      	strb	r2, [r1, #0]
    3a88:	b942      	cbnz	r2, 3a9c <isr+0x1d0>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    3a8a:	4945      	ldr	r1, [pc, #276]	; (3ba0 <isr+0x2d4>)
    3a8c:	780a      	ldrb	r2, [r1, #0]
    3a8e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    3a92:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    3a94:	2a00      	cmp	r2, #0
    3a96:	f000 831b 	beq.w	40d0 <isr+0x804>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    3a9a:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    3a9c:	b003      	add	sp, #12
    3a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    3aa2:	4940      	ldr	r1, [pc, #256]	; (3ba4 <isr+0x2d8>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    3aa4:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    3aa8:	6808      	ldr	r0, [r1, #0]
    3aaa:	4203      	tst	r3, r0
    3aac:	f040 82c7 	bne.w	403e <isr+0x772>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    3ab0:	4a36      	ldr	r2, [pc, #216]	; (3b8c <isr+0x2c0>)
    3ab2:	6817      	ldr	r7, [r2, #0]
#if 1
			if (completestatus) {
    3ab4:	403b      	ands	r3, r7
    3ab6:	9301      	str	r3, [sp, #4]
    3ab8:	d0a2      	beq.n	3a00 <isr+0x134>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    3aba:	ea5f 4913 	movs.w	r9, r3, lsr #16
    3abe:	d025      	beq.n	3b0c <isr+0x240>
    3ac0:	4e2b      	ldr	r6, [pc, #172]	; (3b70 <isr+0x2a4>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    3ac2:	f04f 0a01 	mov.w	sl, #1
    3ac6:	46b3      	mov	fp, r6
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    3ac8:	fa99 f5a9 	rbit	r5, r9
    3acc:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    3ad0:	eb0b 17c5 	add.w	r7, fp, r5, lsl #7
    3ad4:	3740      	adds	r7, #64	; 0x40
};*/

static void run_callbacks(endpoint_t *ep)
{
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    3ad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
	if (first == NULL) return;
    3ad8:	b198      	cbz	r0, 3b02 <isr+0x236>
    3ada:	4602      	mov	r2, r0
    3adc:	2400      	movs	r4, #0
    3ade:	e004      	b.n	3aea <isr+0x21e>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    3ae0:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    3ae2:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    3ae4:	2a01      	cmp	r2, #1
    3ae6:	f000 82dd 	beq.w	40a4 <isr+0x7d8>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    3aea:	6853      	ldr	r3, [r2, #4]
    3aec:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    3af0:	d0f6      	beq.n	3ae0 <isr+0x214>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    3af2:	633a      	str	r2, [r7, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3af4:	b12c      	cbz	r4, 3b02 <isr+0x236>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    3af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    3af8:	6806      	ldr	r6, [r0, #0]
		ep->callback_function(first);
    3afa:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3afc:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    3afe:	4630      	mov	r0, r6
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3b00:	d1f9      	bne.n	3af6 <isr+0x22a>
				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    3b02:	fa0a f505 	lsl.w	r5, sl, r5
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    3b06:	ea39 0905 	bics.w	r9, r9, r5
    3b0a:	d1dd      	bne.n	3ac8 <isr+0x1fc>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    3b0c:	f8bd 7004 	ldrh.w	r7, [sp, #4]
				while(rx) {
    3b10:	2f00      	cmp	r7, #0
    3b12:	f43f af75 	beq.w	3a00 <isr+0x134>
    3b16:	4e16      	ldr	r6, [pc, #88]	; (3b70 <isr+0x2a4>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    3b18:	f04f 0901 	mov.w	r9, #1
    3b1c:	46b3      	mov	fp, r6
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    3b1e:	fa97 f5a7 	rbit	r5, r7
    3b22:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    3b26:	eb0b 1ac5 	add.w	sl, fp, r5, lsl #7
};*/

static void run_callbacks(endpoint_t *ep)
{
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    3b2a:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
	if (first == NULL) return;
    3b2e:	b1a8      	cbz	r0, 3b5c <isr+0x290>
    3b30:	4602      	mov	r2, r0
    3b32:	2400      	movs	r4, #0
    3b34:	e004      	b.n	3b40 <isr+0x274>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    3b36:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    3b38:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    3b3a:	2a01      	cmp	r2, #1
    3b3c:	f000 82ad 	beq.w	409a <isr+0x7ce>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    3b40:	6853      	ldr	r3, [r2, #4]
    3b42:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    3b46:	d0f6      	beq.n	3b36 <isr+0x26a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    3b48:	f8ca 2030 	str.w	r2, [sl, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3b4c:	b134      	cbz	r4, 3b5c <isr+0x290>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    3b4e:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    3b52:	6806      	ldr	r6, [r0, #0]
		ep->callback_function(first);
    3b54:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3b56:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    3b58:	4630      	mov	r0, r6
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3b5a:	d1f8      	bne.n	3b4e <isr+0x282>
				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    3b5c:	fa09 f505 	lsl.w	r5, r9, r5
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    3b60:	43af      	bics	r7, r5
    3b62:	d1dc      	bne.n	3b1e <isr+0x252>
    3b64:	e74c      	b.n	3a00 <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    3b66:	4a0c      	ldr	r2, [pc, #48]	; (3b98 <isr+0x2cc>)
    3b68:	7013      	strb	r3, [r2, #0]
    3b6a:	e77f      	b.n	3a6c <isr+0x1a0>
    3b6c:	402e0000 	.word	0x402e0000
    3b70:	20004000 	.word	0x20004000
    3b74:	402e01c0 	.word	0x402e01c0
    3b78:	20001bc8 	.word	0x20001bc8
    3b7c:	20003000 	.word	0x20003000
    3b80:	00020080 	.word	0x00020080
    3b84:	20002bc8 	.word	0x20002bc8
    3b88:	20003020 	.word	0x20003020
    3b8c:	20001ba8 	.word	0x20001ba8
    3b90:	20001ba4 	.word	0x20001ba4
    3b94:	20001bb0 	.word	0x20001bb0
    3b98:	20001bb4 	.word	0x20001bb4
    3b9c:	20001bbc 	.word	0x20001bbc
    3ba0:	20001bac 	.word	0x20001bac
    3ba4:	20001bb8 	.word	0x20001bb8
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3ba8:	f242 0721 	movw	r7, #8225	; 0x2021
    3bac:	42b9      	cmp	r1, r7
    3bae:	d034      	beq.n	3c1a <isr+0x34e>
    3bb0:	d867      	bhi.n	3c82 <isr+0x3b6>
    3bb2:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    3bb6:	f000 8130 	beq.w	3e1a <isr+0x54e>
    3bba:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    3bbe:	d130      	bne.n	3c22 <isr+0x356>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    3bc0:	f3c0 4007 	ubfx	r0, r0, #16, #8
    3bc4:	4ab7      	ldr	r2, [pc, #732]	; (3ea4 <isr+0x5d8>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    3bc6:	49b8      	ldr	r1, [pc, #736]	; (3ea8 <isr+0x5dc>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    3bc8:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    3bca:	4fb8      	ldr	r7, [pc, #736]	; (3eac <isr+0x5e0>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    3bcc:	4ab8      	ldr	r2, [pc, #736]	; (3eb0 <isr+0x5e4>)
    3bce:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    3bd0:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    3bd4:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    3bd8:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    3bdc:	f000 fdd4 	bl	4788 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3be0:	4ab4      	ldr	r2, [pc, #720]	; (3eb4 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3be2:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3be4:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3be6:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3be8:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3bea:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3bec:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3bee:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3bf0:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3bf4:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3bf8:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    3bfa:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    3bfe:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3c02:	4aad      	ldr	r2, [pc, #692]	; (3eb8 <isr+0x5ec>)
    3c04:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    3c06:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3c0a:	2b00      	cmp	r3, #0
    3c0c:	d1fb      	bne.n	3c06 <isr+0x33a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3c0e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3c12:	2b00      	cmp	r3, #0
    3c14:	f47f ae72 	bne.w	38fc <isr+0x30>
    3c18:	e6ed      	b.n	39f6 <isr+0x12a>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    3c1a:	0c11      	lsrs	r1, r2, #16
    3c1c:	2907      	cmp	r1, #7
    3c1e:	f000 81cf 	beq.w	3fc0 <isr+0x6f4>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    3c22:	f8c4 a1c0 	str.w	sl, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3c26:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3c2a:	2b00      	cmp	r3, #0
    3c2c:	f47f ae66 	bne.w	38fc <isr+0x30>
    3c30:	e6e1      	b.n	39f6 <isr+0x12a>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3c32:	f240 3702 	movw	r7, #770	; 0x302
    3c36:	42b9      	cmp	r1, r7
    3c38:	f000 80bf 	beq.w	3dba <isr+0x4ee>
    3c3c:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    3c40:	d1ef      	bne.n	3c22 <isr+0x356>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3c42:	4a9c      	ldr	r2, [pc, #624]	; (3eb4 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3c44:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3c46:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3c48:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3c4a:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3c4c:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3c4e:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3c50:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3c54:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3c58:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    3c5a:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    3c5e:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    3c62:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3c66:	2b00      	cmp	r3, #0
    3c68:	d1fb      	bne.n	3c62 <isr+0x396>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    3c6a:	0c03      	lsrs	r3, r0, #16
    3c6c:	065b      	lsls	r3, r3, #25
    3c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3c72:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3c76:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3c7a:	2b00      	cmp	r3, #0
    3c7c:	f47f ae3e 	bne.w	38fc <isr+0x30>
    3c80:	e6b9      	b.n	39f6 <isr+0x12a>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3c82:	f242 2321 	movw	r3, #8737	; 0x2221
    3c86:	4299      	cmp	r1, r3
    3c88:	f000 808a 	beq.w	3da0 <isr+0x4d4>
    3c8c:	f242 3321 	movw	r3, #8993	; 0x2321
    3c90:	4299      	cmp	r1, r3
    3c92:	d1c6      	bne.n	3c22 <isr+0x356>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3c94:	4b87      	ldr	r3, [pc, #540]	; (3eb4 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3c96:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    3c98:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3c9a:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3c9c:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3c9e:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3ca0:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3ca2:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3ca4:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3ca8:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3cac:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    3cae:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    3cb2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    3cb6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3cba:	2b00      	cmp	r3, #0
    3cbc:	d1fb      	bne.n	3cb6 <isr+0x3ea>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3cbe:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	f47f ae1a 	bne.w	38fc <isr+0x30>
    3cc8:	e695      	b.n	39f6 <isr+0x12a>
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3cca:	487c      	ldr	r0, [pc, #496]	; (3ebc <isr+0x5f0>)
    3ccc:	2701      	movs	r7, #1
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3cce:	497c      	ldr	r1, [pc, #496]	; (3ec0 <isr+0x5f4>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3cd0:	4a7c      	ldr	r2, [pc, #496]	; (3ec4 <isr+0x5f8>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    3cd2:	64f3      	str	r3, [r6, #76]	; 0x4c
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3cd4:	700b      	strb	r3, [r1, #0]
		reply_buffer[1] = 0;
    3cd6:	704b      	strb	r3, [r1, #1]
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3cd8:	f501 5300 	add.w	r3, r1, #8192	; 0x2000
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3cdc:	6007      	str	r7, [r0, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3cde:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3ce2:	64b0      	str	r0, [r6, #72]	; 0x48
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3ce4:	6042      	str	r2, [r0, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3ce6:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3cea:	60c7      	str	r7, [r0, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3cec:	f501 5740 	add.w	r7, r1, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3cf0:	6103      	str	r3, [r0, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3cf2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3cf6:	f501 4380 	add.w	r3, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3cfa:	6081      	str	r1, [r0, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3cfc:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3d00:	6147      	str	r7, [r0, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3d02:	6183      	str	r3, [r0, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    3d04:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3d08:	2b00      	cmp	r3, #0
    3d0a:	d1fb      	bne.n	3d04 <isr+0x438>
	}
	endpoint0_transfer_ack.next = 1;
    3d0c:	4a69      	ldr	r2, [pc, #420]	; (3eb4 <isr+0x5e8>)
    3d0e:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3d10:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    3d12:	60f3      	str	r3, [r6, #12]
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    3d14:	60b2      	str	r2, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3d16:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3d18:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3d1a:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    3d1e:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3d22:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    3d24:	ea41 0300 	orr.w	r3, r1, r0
    3d28:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    3d2c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3d30:	2b00      	cmp	r3, #0
    3d32:	d1fb      	bne.n	3d2c <isr+0x460>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3d34:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3d38:	2b00      	cmp	r3, #0
    3d3a:	f47f addf 	bne.w	38fc <isr+0x30>
    3d3e:	e65a      	b.n	39f6 <isr+0x12a>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    3d40:	b292      	uxth	r2, r2
    3d42:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    3d46:	2b07      	cmp	r3, #7
    3d48:	f63f af6b 	bhi.w	3c22 <isr+0x356>
		dir = setup.wIndex & 0x80;
		if (dir) {
    3d4c:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    3d50:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3d54:	4a5c      	ldr	r2, [pc, #368]	; (3ec8 <isr+0x5fc>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3d56:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3d5a:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    3d5e:	441a      	add	r2, r3
    3d60:	6813      	ldr	r3, [r2, #0]
    3d62:	bf14      	ite	ne
    3d64:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    3d68:	f023 0301 	biceq.w	r3, r3, #1
    3d6c:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3d6e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3d70:	4b50      	ldr	r3, [pc, #320]	; (3eb4 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3d72:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3d74:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3d76:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3d78:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3d7a:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3d7e:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3d82:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    3d84:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    3d88:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    3d8c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3d90:	2b00      	cmp	r3, #0
    3d92:	d1fb      	bne.n	3d8c <isr+0x4c0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3d94:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3d98:	2b00      	cmp	r3, #0
    3d9a:	f47f adaf 	bne.w	38fc <isr+0x30>
    3d9e:	e62a      	b.n	39f6 <isr+0x12a>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    3da0:	b292      	uxth	r2, r2
    3da2:	2a00      	cmp	r2, #0
    3da4:	f47f af76 	bne.w	3c94 <isr+0x3c8>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3da8:	4b48      	ldr	r3, [pc, #288]	; (3ecc <isr+0x600>)
			usb_cdc_line_rtsdtr = setup.wValue;
    3daa:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3dae:	4a48      	ldr	r2, [pc, #288]	; (3ed0 <isr+0x604>)
    3db0:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    3db2:	4b48      	ldr	r3, [pc, #288]	; (3ed4 <isr+0x608>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3db4:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    3db6:	7018      	strb	r0, [r3, #0]
    3db8:	e76c      	b.n	3c94 <isr+0x3c8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    3dba:	b292      	uxth	r2, r2
    3dbc:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    3dc0:	2b07      	cmp	r3, #7
    3dc2:	f63f af2e 	bhi.w	3c22 <isr+0x356>
		dir = setup.wIndex & 0x80;
		if (dir) {
    3dc6:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    3dca:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3dce:	4a3e      	ldr	r2, [pc, #248]	; (3ec8 <isr+0x5fc>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3dd0:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3dd4:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    3dd8:	441a      	add	r2, r3
    3dda:	6813      	ldr	r3, [r2, #0]
    3ddc:	bf14      	ite	ne
    3dde:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    3de2:	f043 0301 	orreq.w	r3, r3, #1
    3de6:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3de8:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3dea:	4b32      	ldr	r3, [pc, #200]	; (3eb4 <isr+0x5e8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3dec:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3dee:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3df0:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3df2:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3df4:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3df8:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3dfc:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    3dfe:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    3e02:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    3e06:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d1fb      	bne.n	3e06 <isr+0x53a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3e0e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3e12:	2b00      	cmp	r3, #0
    3e14:	f47f ad72 	bne.w	38fc <isr+0x30>
    3e18:	e5ed      	b.n	39f6 <isr+0x12a>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3e1a:	4922      	ldr	r1, [pc, #136]	; (3ea4 <isr+0x5d8>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3e1c:	2201      	movs	r2, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3e1e:	4828      	ldr	r0, [pc, #160]	; (3ec0 <isr+0x5f4>)
    3e20:	7809      	ldrb	r1, [r1, #0]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    3e22:	64f3      	str	r3, [r6, #76]	; 0x4c
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3e24:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3e28:	7001      	strb	r1, [r0, #0]
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3e2a:	4b2b      	ldr	r3, [pc, #172]	; (3ed8 <isr+0x60c>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3e2c:	4923      	ldr	r1, [pc, #140]	; (3ebc <isr+0x5f0>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3e2e:	604b      	str	r3, [r1, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3e30:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3e34:	64b1      	str	r1, [r6, #72]	; 0x48
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3e36:	600a      	str	r2, [r1, #0]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3e38:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3e3c:	60cf      	str	r7, [r1, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3e3e:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3e42:	610b      	str	r3, [r1, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3e44:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3e48:	f500 4380 	add.w	r3, r0, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3e4c:	6088      	str	r0, [r1, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3e4e:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3e52:	614f      	str	r7, [r1, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3e54:	618b      	str	r3, [r1, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    3e56:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3e5a:	2b00      	cmp	r3, #0
    3e5c:	d1fb      	bne.n	3e56 <isr+0x58a>
	}
	endpoint0_transfer_ack.next = 1;
    3e5e:	4a15      	ldr	r2, [pc, #84]	; (3eb4 <isr+0x5e8>)
    3e60:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3e62:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    3e64:	60f3      	str	r3, [r6, #12]
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    3e66:	60b2      	str	r2, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3e68:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3e6a:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3e6c:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    3e70:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3e74:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    3e76:	ea41 0300 	orr.w	r3, r1, r0
    3e7a:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    3e7e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3e82:	2b00      	cmp	r3, #0
    3e84:	d1fb      	bne.n	3e7e <isr+0x5b2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3e86:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3e8a:	2b00      	cmp	r3, #0
    3e8c:	f47f ad36 	bne.w	38fc <isr+0x30>
    3e90:	e5b1      	b.n	39f6 <isr+0x12a>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    3e92:	4b12      	ldr	r3, [pc, #72]	; (3edc <isr+0x610>)
    3e94:	6859      	ldr	r1, [r3, #4]
    3e96:	2900      	cmp	r1, #0
    3e98:	f43f aec3 	beq.w	3c22 <isr+0x356>
    3e9c:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3e9e:	fa1f fe82 	uxth.w	lr, r2
    3ea2:	e022      	b.n	3eea <isr+0x61e>
    3ea4:	20001bd8 	.word	0x20001bd8
    3ea8:	000200c8 	.word	0x000200c8
    3eac:	00cc0002 	.word	0x00cc0002
    3eb0:	00c80002 	.word	0x00c80002
    3eb4:	20003020 	.word	0x20003020
    3eb8:	20001bb8 	.word	0x20001bb8
    3ebc:	20003000 	.word	0x20003000
    3ec0:	20001bc8 	.word	0x20001bc8
    3ec4:	00020080 	.word	0x00020080
    3ec8:	402e01c0 	.word	0x402e01c0
    3ecc:	20001b8c 	.word	0x20001b8c
    3ed0:	20004288 	.word	0x20004288
    3ed4:	20001db4 	.word	0x20001db4
    3ed8:	00010080 	.word	0x00010080
    3edc:	2000069c 	.word	0x2000069c
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    3ee0:	330c      	adds	r3, #12
    3ee2:	6859      	ldr	r1, [r3, #4]
    3ee4:	2900      	cmp	r1, #0
    3ee6:	f43f ae9c 	beq.w	3c22 <isr+0x356>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3eea:	881f      	ldrh	r7, [r3, #0]
    3eec:	4287      	cmp	r7, r0
    3eee:	d1f7      	bne.n	3ee0 <isr+0x614>
    3ef0:	885f      	ldrh	r7, [r3, #2]
    3ef2:	4577      	cmp	r7, lr
    3ef4:	d1f4      	bne.n	3ee0 <isr+0x614>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    3ef6:	0a07      	lsrs	r7, r0, #8
    3ef8:	2f03      	cmp	r7, #3
    3efa:	f000 80ff 	beq.w	40fc <isr+0x830>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    3efe:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    3f00:	0c12      	lsrs	r2, r2, #16
    3f02:	4293      	cmp	r3, r2
    3f04:	bf28      	it	cs
    3f06:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    3f08:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    3f0c:	f000 80e7 	beq.w	40de <isr+0x812>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    3f10:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    3f14:	f000 80c9 	beq.w	40aa <isr+0x7de>
    3f18:	4f7b      	ldr	r7, [pc, #492]	; (4108 <isr+0x83c>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    3f1a:	461a      	mov	r2, r3
    3f1c:	9301      	str	r3, [sp, #4]
    3f1e:	4638      	mov	r0, r7
    3f20:	f001 f86a 	bl	4ff8 <memcpy>
    3f24:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3f26:	f027 021f 	bic.w	r2, r7, #31
    3f2a:	4977      	ldr	r1, [pc, #476]	; (4108 <isr+0x83c>)
	uint32_t end_addr = (uint32_t)addr + size;
    3f2c:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    3f2e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    3f32:	4876      	ldr	r0, [pc, #472]	; (410c <isr+0x840>)
    3f34:	6002      	str	r2, [r0, #0]
		location += 32;
    3f36:	3220      	adds	r2, #32
	} while (location < end_addr);
    3f38:	4297      	cmp	r7, r2
    3f3a:	d8fa      	bhi.n	3f32 <isr+0x666>
	asm("dsb");
    3f3c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3f40:	f3bf 8f6f 	isb	sy
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    3f44:	b303      	cbz	r3, 3f88 <isr+0x6bc>
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3f46:	041b      	lsls	r3, r3, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3f48:	4a71      	ldr	r2, [pc, #452]	; (4110 <isr+0x844>)
    3f4a:	2701      	movs	r7, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    3f4c:	2000      	movs	r0, #0
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3f52:	64b2      	str	r2, [r6, #72]	; 0x48
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3f54:	6017      	str	r7, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3f56:	6053      	str	r3, [r2, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    3f58:	64f0      	str	r0, [r6, #76]	; 0x4c
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3f5a:	4b6e      	ldr	r3, [pc, #440]	; (4114 <isr+0x848>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3f5c:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3f60:	f503 5780 	add.w	r7, r3, #4096	; 0x1000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3f64:	6091      	str	r1, [r2, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3f66:	f503 5e00 	add.w	lr, r3, #8192	; 0x2000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3f6a:	60d3      	str	r3, [r2, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3f6c:	f440 3180 	orr.w	r1, r0, #65536	; 0x10000
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3f70:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3f74:	6117      	str	r7, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3f76:	f8c2 e014 	str.w	lr, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3f7a:	6193      	str	r3, [r2, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3f7c:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    3f80:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3f84:	2b00      	cmp	r3, #0
    3f86:	d1fb      	bne.n	3f80 <isr+0x6b4>
	}
	endpoint0_transfer_ack.next = 1;
    3f88:	4b63      	ldr	r3, [pc, #396]	; (4118 <isr+0x84c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3f8a:	2200      	movs	r2, #0
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3f8c:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3f8e:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    3f90:	60b3      	str	r3, [r6, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3f92:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3f94:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    3f96:	60f2      	str	r2, [r6, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3f98:	f8c4 a1bc 	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    3f9c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3fa0:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    3fa2:	ea41 0300 	orr.w	r3, r1, r0
    3fa6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    3faa:	f8c9 2000 	str.w	r2, [r9]
	while (USB1_ENDPTPRIME) ;
    3fae:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3fb2:	2b00      	cmp	r3, #0
    3fb4:	d1fb      	bne.n	3fae <isr+0x6e2>
    3fb6:	e51a      	b.n	39ee <isr+0x122>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    3fb8:	07cf      	lsls	r7, r1, #31
    3fba:	f57f ace6 	bpl.w	398a <isr+0xbe>
    3fbe:	e4e2      	b.n	3986 <isr+0xba>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    3fc0:	4f56      	ldr	r7, [pc, #344]	; (411c <isr+0x850>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3fc2:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    3fc6:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3fc8:	4955      	ldr	r1, [pc, #340]	; (4120 <isr+0x854>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3fca:	4b51      	ldr	r3, [pc, #324]	; (4110 <isr+0x844>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    3fcc:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3fce:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3fd2:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    3fd4:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    3fd6:	4953      	ldr	r1, [pc, #332]	; (4124 <isr+0x858>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    3fd8:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    3fdc:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3fde:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    3fe2:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3fe6:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3fe8:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3fec:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3ff0:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    3ff4:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3ff8:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3ffa:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3ffe:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4000:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    4002:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4006:	2b00      	cmp	r3, #0
    4008:	d1fb      	bne.n	4002 <isr+0x736>
	}
	endpoint0_transfer_ack.next = 1;
    400a:	4a43      	ldr	r2, [pc, #268]	; (4118 <isr+0x84c>)
    400c:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    400e:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    4012:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4014:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    4016:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    401a:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    401c:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    401e:	f8c5 a1bc 	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4022:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4026:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    4028:	ea41 0300 	orr.w	r3, r1, r0
    402c:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    4030:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    4034:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4038:	2b00      	cmp	r3, #0
    403a:	d1fb      	bne.n	4034 <isr+0x768>
    403c:	e4d7      	b.n	39ee <isr+0x122>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    403e:	4837      	ldr	r0, [pc, #220]	; (411c <isr+0x850>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    4040:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    4044:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    4046:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    4048:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    404a:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    404c:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    404e:	f47f ad2f 	bne.w	3ab0 <isr+0x1e4>
    4052:	b281      	uxth	r1, r0
    4054:	2900      	cmp	r1, #0
    4056:	f47f ad2b 	bne.w	3ab0 <isr+0x1e4>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    405a:	4932      	ldr	r1, [pc, #200]	; (4124 <isr+0x858>)
    405c:	4c32      	ldr	r4, [pc, #200]	; (4128 <isr+0x85c>)
    405e:	c903      	ldmia	r1, {r0, r1}
    4060:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    4062:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    4064:	6020      	str	r0, [r4, #0]
    4066:	80a1      	strh	r1, [r4, #4]
    4068:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    406a:	f47f ad21 	bne.w	3ab0 <isr+0x1e4>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    406e:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    4070:	482e      	ldr	r0, [pc, #184]	; (412c <isr+0x860>)
    4072:	7801      	ldrb	r1, [r0, #0]
    4074:	f041 0104 	orr.w	r1, r1, #4
    4078:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    407a:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    407e:	0608      	lsls	r0, r1, #24
    4080:	d406      	bmi.n	4090 <isr+0x7c4>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    4082:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    4086:	2080      	movs	r0, #128	; 0x80
    4088:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    408c:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    4090:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    4092:	4a27      	ldr	r2, [pc, #156]	; (4130 <isr+0x864>)
    4094:	2150      	movs	r1, #80	; 0x50
    4096:	7011      	strb	r1, [r2, #0]
    4098:	e50a      	b.n	3ab0 <isr+0x1e4>
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    409a:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
			ep->last_transfer = NULL;
    409e:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
    40a2:	e553      	b.n	3b4c <isr+0x280>
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    40a4:	633b      	str	r3, [r7, #48]	; 0x30
			ep->last_transfer = NULL;
    40a6:	637b      	str	r3, [r7, #52]	; 0x34
    40a8:	e524      	b.n	3af4 <isr+0x228>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    40aa:	4822      	ldr	r0, [pc, #136]	; (4134 <isr+0x868>)
					memcpy(usb_descriptor_buffer, src, datalen);
    40ac:	461a      	mov	r2, r3
    40ae:	4f16      	ldr	r7, [pc, #88]	; (4108 <isr+0x83c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    40b0:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    40b4:	4920      	ldr	r1, [pc, #128]	; (4138 <isr+0x86c>)
    40b6:	4821      	ldr	r0, [pc, #132]	; (413c <isr+0x870>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    40b8:	9301      	str	r3, [sp, #4]
    40ba:	f1be 0f00 	cmp.w	lr, #0
    40be:	bf08      	it	eq
    40c0:	4601      	moveq	r1, r0
    40c2:	4638      	mov	r0, r7
    40c4:	f000 ff98 	bl	4ff8 <memcpy>
					usb_descriptor_buffer[1] = 7;
    40c8:	2207      	movs	r2, #7
    40ca:	9b01      	ldr	r3, [sp, #4]
    40cc:	707a      	strb	r2, [r7, #1]
    40ce:	e72a      	b.n	3f26 <isr+0x65a>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    40d0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    40d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    40d8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    40dc:	e4dd      	b.n	3a9a <isr+0x1ce>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    40de:	4815      	ldr	r0, [pc, #84]	; (4134 <isr+0x868>)
					memcpy(usb_descriptor_buffer, src, datalen);
    40e0:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    40e2:	4916      	ldr	r1, [pc, #88]	; (413c <isr+0x870>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    40e4:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    40e6:	4814      	ldr	r0, [pc, #80]	; (4138 <isr+0x86c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    40e8:	9301      	str	r3, [sp, #4]
    40ea:	2f00      	cmp	r7, #0
    40ec:	bf08      	it	eq
    40ee:	4601      	moveq	r1, r0
    40f0:	4805      	ldr	r0, [pc, #20]	; (4108 <isr+0x83c>)
    40f2:	f000 ff81 	bl	4ff8 <memcpy>
    40f6:	4f04      	ldr	r7, [pc, #16]	; (4108 <isr+0x83c>)
    40f8:	9b01      	ldr	r3, [sp, #4]
    40fa:	e714      	b.n	3f26 <isr+0x65a>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    40fc:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    40fe:	780b      	ldrb	r3, [r1, #0]
    4100:	4293      	cmp	r3, r2
    4102:	bf28      	it	cs
    4104:	4613      	movcs	r3, r2
    4106:	e703      	b.n	3f10 <isr+0x644>
    4108:	20200000 	.word	0x20200000
    410c:	e000ef70 	.word	0xe000ef70
    4110:	20003000 	.word	0x20003000
    4114:	20201000 	.word	0x20201000
    4118:	20003020 	.word	0x20003020
    411c:	20001bc0 	.word	0x20001bc0
    4120:	00070080 	.word	0x00070080
    4124:	20001bd0 	.word	0x20001bd0
    4128:	20004280 	.word	0x20004280
    412c:	20001bac 	.word	0x20001bac
    4130:	20001bbc 	.word	0x20001bbc
    4134:	20001bb4 	.word	0x20001bb4
    4138:	60001a14 	.word	0x60001a14
    413c:	60001a58 	.word	0x60001a58

00004140 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4140:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    4142:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    4146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    414a:	bf14      	ite	ne
    414c:	2700      	movne	r7, #0
    414e:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    4152:	2a02      	cmp	r2, #2
    4154:	d901      	bls.n	415a <usb_config_rx+0x1a>
    4156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    415a:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    415e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 41a0 <usb_config_rx+0x60>
    4162:	460d      	mov	r5, r1
    4164:	4604      	mov	r4, r0
    4166:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    416a:	2100      	movs	r1, #0
    416c:	2240      	movs	r2, #64	; 0x40
    416e:	4698      	mov	r8, r3
    4170:	4630      	mov	r0, r6
    4172:	f001 fd8b 	bl	5c8c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    4176:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    4178:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    417c:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    4180:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    4184:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    4186:	f1b8 0f00 	cmp.w	r8, #0
    418a:	d0e4      	beq.n	4156 <usb_config_rx+0x16>
    418c:	4b03      	ldr	r3, [pc, #12]	; (419c <usb_config_rx+0x5c>)
    418e:	40a0      	lsls	r0, r4
    4190:	681c      	ldr	r4, [r3, #0]
    4192:	4320      	orrs	r0, r4
    4194:	6018      	str	r0, [r3, #0]
    4196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    419a:	bf00      	nop
    419c:	20001ba8 	.word	0x20001ba8
    41a0:	20004000 	.word	0x20004000

000041a4 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    41a4:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    41a6:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    41aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    41ae:	bf14      	ite	ne
    41b0:	2700      	movne	r7, #0
    41b2:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    41b6:	2a02      	cmp	r2, #2
    41b8:	d901      	bls.n	41be <usb_config_tx+0x1a>
    41ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    41be:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    41c0:	01c5      	lsls	r5, r0, #7
    41c2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 4208 <usb_config_tx+0x64>
    41c6:	4688      	mov	r8, r1
    41c8:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    41ca:	2100      	movs	r1, #0
    41cc:	4604      	mov	r4, r0
    41ce:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    41d0:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    41d4:	4650      	mov	r0, sl
    41d6:	f001 fd59 	bl	5c8c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    41da:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    41dc:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    41e0:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    41e4:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    41e8:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    41ec:	2e00      	cmp	r6, #0
    41ee:	d0e4      	beq.n	41ba <usb_config_tx+0x16>
    41f0:	f104 0010 	add.w	r0, r4, #16
    41f4:	4b03      	ldr	r3, [pc, #12]	; (4204 <usb_config_tx+0x60>)
    41f6:	4082      	lsls	r2, r0
    41f8:	6818      	ldr	r0, [r3, #0]
    41fa:	4302      	orrs	r2, r0
    41fc:	601a      	str	r2, [r3, #0]
    41fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4202:	bf00      	nop
    4204:	20001ba8 	.word	0x20001ba8
    4208:	20004000 	.word	0x20004000

0000420c <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    420c:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    420e:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    4210:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    4212:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    4216:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    4218:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    421a:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    421c:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    4220:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    4224:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    4228:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    422c:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    422e:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    4230:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    4232:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    4234:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    4236:	bcf0      	pop	{r4, r5, r6, r7}
    4238:	4770      	bx	lr
    423a:	bf00      	nop

0000423c <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    423c:	1e83      	subs	r3, r0, #2
    423e:	2b02      	cmp	r3, #2
    4240:	d900      	bls.n	4244 <usb_transmit+0x8>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    4242:	4770      	bx	lr
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    4244:	4a1d      	ldr	r2, [pc, #116]	; (42bc <usb_transmit+0x80>)
	uint32_t mask = 1 << (endpoint_number + 16);
    4246:	f100 0310 	add.w	r3, r0, #16
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    424a:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    424c:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
	uint32_t mask = 1 << (endpoint_number + 16);
    4250:	2701      	movs	r7, #1
    4252:	409f      	lsls	r7, r3
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    4254:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4256:	b11b      	cbz	r3, 4260 <usb_transmit+0x24>
		transfer->status |= (1<<15);
    4258:	684b      	ldr	r3, [r1, #4]
    425a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    425e:	604b      	str	r3, [r1, #4]
	}
	__disable_irq();
    4260:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    4262:	6b42      	ldr	r2, [r0, #52]	; 0x34
	if (last) {
    4264:	b1da      	cbz	r2, 429e <usb_transmit+0x62>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    4266:	4b16      	ldr	r3, [pc, #88]	; (42c0 <usb_transmit+0x84>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    4268:	6011      	str	r1, [r2, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    426a:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
    426e:	4217      	tst	r7, r2
    4270:	d11f      	bne.n	42b2 <usb_transmit+0x76>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    4272:	4c14      	ldr	r4, [pc, #80]	; (42c4 <usb_transmit+0x88>)
    4274:	6826      	ldr	r6, [r4, #0]
    4276:	e004      	b.n	4282 <usb_transmit+0x46>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    4278:	6822      	ldr	r2, [r4, #0]
    427a:	1b92      	subs	r2, r2, r6
    427c:	f5b2 6f16 	cmp.w	r2, #2400	; 0x960
    4280:	d20b      	bcs.n	429a <usb_transmit+0x5e>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    4282:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    4286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    428a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    428e:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    4292:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    4296:	0452      	lsls	r2, r2, #17
    4298:	d5ee      	bpl.n	4278 <usb_transmit+0x3c>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    429a:	422f      	tst	r7, r5
    429c:	d109      	bne.n	42b2 <usb_transmit+0x76>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    429e:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    42a0:	4a07      	ldr	r2, [pc, #28]	; (42c0 <usb_transmit+0x84>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    42a2:	6081      	str	r1, [r0, #8]
	endpoint->status = 0;
    42a4:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    42a6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    42aa:	431f      	orrs	r7, r3
    42ac:	f8c2 71b0 	str.w	r7, [r2, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    42b0:	6301      	str	r1, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    42b2:	6341      	str	r1, [r0, #52]	; 0x34
	__enable_irq();
    42b4:	b662      	cpsie	i
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    42b6:	bcf0      	pop	{r4, r5, r6, r7}
    42b8:	4770      	bx	lr
    42ba:	bf00      	nop
    42bc:	20004040 	.word	0x20004040
    42c0:	402e0000 	.word	0x402e0000
    42c4:	e0001004 	.word	0xe0001004

000042c8 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    42c8:	1e83      	subs	r3, r0, #2
    42ca:	2b02      	cmp	r3, #2
    42cc:	d900      	bls.n	42d0 <usb_receive+0x8>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    42ce:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    42d0:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    42d2:	4d1c      	ldr	r5, [pc, #112]	; (4344 <usb_receive+0x7c>)
	uint32_t mask = 1 << endpoint_number;
    42d4:	2301      	movs	r3, #1
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    42d6:	eb05 15c0 	add.w	r5, r5, r0, lsl #7
	uint32_t mask = 1 << endpoint_number;
    42da:	fa03 f000 	lsl.w	r0, r3, r0
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    42de:	6bab      	ldr	r3, [r5, #56]	; 0x38
    42e0:	b11b      	cbz	r3, 42ea <usb_receive+0x22>
		transfer->status |= (1<<15);
    42e2:	684b      	ldr	r3, [r1, #4]
    42e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    42e8:	604b      	str	r3, [r1, #4]
	}
	__disable_irq();
    42ea:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    42ec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
	if (last) {
    42ee:	b1da      	cbz	r2, 4328 <usb_receive+0x60>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    42f0:	4b15      	ldr	r3, [pc, #84]	; (4348 <usb_receive+0x80>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    42f2:	6011      	str	r1, [r2, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    42f4:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
    42f8:	4210      	tst	r0, r2
    42fa:	d11f      	bne.n	433c <usb_receive+0x74>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    42fc:	4c13      	ldr	r4, [pc, #76]	; (434c <usb_receive+0x84>)
    42fe:	6827      	ldr	r7, [r4, #0]
    4300:	e004      	b.n	430c <usb_receive+0x44>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    4302:	6822      	ldr	r2, [r4, #0]
    4304:	1bd2      	subs	r2, r2, r7
    4306:	f5b2 6f16 	cmp.w	r2, #2400	; 0x960
    430a:	d20b      	bcs.n	4324 <usb_receive+0x5c>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    430c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    4310:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    4314:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    4318:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    431c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    4320:	0452      	lsls	r2, r2, #17
    4322:	d5ee      	bpl.n	4302 <usb_receive+0x3a>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    4324:	4230      	tst	r0, r6
    4326:	d109      	bne.n	433c <usb_receive+0x74>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    4328:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    432a:	4a07      	ldr	r2, [pc, #28]	; (4348 <usb_receive+0x80>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    432c:	60a9      	str	r1, [r5, #8]
	endpoint->status = 0;
    432e:	60eb      	str	r3, [r5, #12]
	USB1_ENDPTPRIME |= epmask;
    4330:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    4334:	4318      	orrs	r0, r3
    4336:	f8c2 01b0 	str.w	r0, [r2, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    433a:	6329      	str	r1, [r5, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    433c:	6369      	str	r1, [r5, #52]	; 0x34
	__enable_irq();
    433e:	b662      	cpsie	i
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    4340:	bcf0      	pop	{r4, r5, r6, r7}
    4342:	4770      	bx	lr
    4344:	20004000 	.word	0x20004000
    4348:	402e0000 	.word	0x402e0000
    434c:	e0001004 	.word	0xe0001004

00004350 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    4350:	6840      	ldr	r0, [r0, #4]
#endif
}
    4352:	4770      	bx	lr

00004354 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    4354:	4a2b      	ldr	r2, [pc, #172]	; (4404 <usb_init_serialnumber+0xb0>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4356:	4b2c      	ldr	r3, [pc, #176]	; (4408 <usb_init_serialnumber+0xb4>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    4358:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    435c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4360:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    4362:	b500      	push	{lr}
    4364:	b085      	sub	sp, #20
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4366:	d802      	bhi.n	436e <usb_init_serialnumber+0x1a>
    4368:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    436c:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    436e:	220a      	movs	r2, #10
    4370:	a901      	add	r1, sp, #4
    4372:	f000 fedb 	bl	512c <ultoa>
	for (i=0; i<10; i++) {
		char c = buf[i];
    4376:	f89d 2004 	ldrb.w	r2, [sp, #4]
    437a:	4b24      	ldr	r3, [pc, #144]	; (440c <usb_init_serialnumber+0xb8>)
		if (!c) break;
    437c:	b352      	cbz	r2, 43d4 <usb_init_serialnumber+0x80>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    437e:	f89d 1005 	ldrb.w	r1, [sp, #5]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4382:	805a      	strh	r2, [r3, #2]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    4384:	b369      	cbz	r1, 43e2 <usb_init_serialnumber+0x8e>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    4386:	f89d 2006 	ldrb.w	r2, [sp, #6]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    438a:	8099      	strh	r1, [r3, #4]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    438c:	b35a      	cbz	r2, 43e6 <usb_init_serialnumber+0x92>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    438e:	f89d 1007 	ldrb.w	r1, [sp, #7]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4392:	80da      	strh	r2, [r3, #6]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    4394:	b349      	cbz	r1, 43ea <usb_init_serialnumber+0x96>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    4396:	f89d 2008 	ldrb.w	r2, [sp, #8]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    439a:	8119      	strh	r1, [r3, #8]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    439c:	b33a      	cbz	r2, 43ee <usb_init_serialnumber+0x9a>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    439e:	f89d 1009 	ldrb.w	r1, [sp, #9]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    43a2:	815a      	strh	r2, [r3, #10]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    43a4:	b329      	cbz	r1, 43f2 <usb_init_serialnumber+0x9e>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    43a6:	f89d 200a 	ldrb.w	r2, [sp, #10]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    43aa:	8199      	strh	r1, [r3, #12]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    43ac:	b31a      	cbz	r2, 43f6 <usb_init_serialnumber+0xa2>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    43ae:	f89d 100b 	ldrb.w	r1, [sp, #11]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    43b2:	81da      	strh	r2, [r3, #14]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    43b4:	b309      	cbz	r1, 43fa <usb_init_serialnumber+0xa6>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    43b6:	f89d 200c 	ldrb.w	r2, [sp, #12]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    43ba:	8219      	strh	r1, [r3, #16]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    43bc:	b14a      	cbz	r2, 43d2 <usb_init_serialnumber+0x7e>
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    43be:	f89d 100d 	ldrb.w	r1, [sp, #13]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    43c2:	825a      	strh	r2, [r3, #18]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
    43c4:	b1d9      	cbz	r1, 43fe <usb_init_serialnumber+0xaa>
    43c6:	2216      	movs	r2, #22
		usb_string_serial_number_default.wString[i] = c;
    43c8:	8299      	strh	r1, [r3, #20]
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    43ca:	701a      	strb	r2, [r3, #0]
}
    43cc:	b005      	add	sp, #20
    43ce:	f85d fb04 	ldr.w	pc, [sp], #4

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    43d2:	2208      	movs	r2, #8
    43d4:	3201      	adds	r2, #1
    43d6:	0052      	lsls	r2, r2, #1
    43d8:	b2d2      	uxtb	r2, r2
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    43da:	701a      	strb	r2, [r3, #0]
}
    43dc:	b005      	add	sp, #20
    43de:	f85d fb04 	ldr.w	pc, [sp], #4

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    43e2:	2201      	movs	r2, #1
    43e4:	e7f6      	b.n	43d4 <usb_init_serialnumber+0x80>
    43e6:	2202      	movs	r2, #2
    43e8:	e7f4      	b.n	43d4 <usb_init_serialnumber+0x80>
    43ea:	2203      	movs	r2, #3
    43ec:	e7f2      	b.n	43d4 <usb_init_serialnumber+0x80>
    43ee:	2204      	movs	r2, #4
    43f0:	e7f0      	b.n	43d4 <usb_init_serialnumber+0x80>
    43f2:	2205      	movs	r2, #5
    43f4:	e7ee      	b.n	43d4 <usb_init_serialnumber+0x80>
    43f6:	2206      	movs	r2, #6
    43f8:	e7ec      	b.n	43d4 <usb_init_serialnumber+0x80>
    43fa:	2207      	movs	r2, #7
    43fc:	e7ea      	b.n	43d4 <usb_init_serialnumber+0x80>
    43fe:	2209      	movs	r2, #9
    4400:	e7e8      	b.n	43d4 <usb_init_serialnumber+0x80>
    4402:	bf00      	nop
    4404:	401f4400 	.word	0x401f4400
    4408:	0098967f 	.word	0x0098967f
    440c:	20000790 	.word	0x20000790

00004410 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    4410:	4b1e      	ldr	r3, [pc, #120]	; (448c <usb_serial_flush_callback+0x7c>)
    4412:	781a      	ldrb	r2, [r3, #0]
    4414:	b95a      	cbnz	r2, 442e <usb_serial_flush_callback+0x1e>
    4416:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    441a:	4a1d      	ldr	r2, [pc, #116]	; (4490 <usb_serial_flush_callback+0x80>)
    441c:	7812      	ldrb	r2, [r2, #0]
    441e:	b132      	cbz	r2, 442e <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    4420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    4424:	4d1b      	ldr	r5, [pc, #108]	; (4494 <usb_serial_flush_callback+0x84>)
    4426:	882a      	ldrh	r2, [r5, #0]
    4428:	b912      	cbnz	r2, 4430 <usb_serial_flush_callback+0x20>
    442a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    442e:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    4430:	4e19      	ldr	r6, [pc, #100]	; (4498 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    4432:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    4436:	4f19      	ldr	r7, [pc, #100]	; (449c <usb_serial_flush_callback+0x8c>)
    4438:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    443a:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    443c:	4c18      	ldr	r4, [pc, #96]	; (44a0 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    443e:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4442:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4446:	4638      	mov	r0, r7
    4448:	4621      	mov	r1, r4
    444a:	f7ff fedf 	bl	420c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    444e:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    4452:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    4456:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    445a:	4b12      	ldr	r3, [pc, #72]	; (44a4 <usb_serial_flush_callback+0x94>)
    445c:	6019      	str	r1, [r3, #0]
		location += 32;
    445e:	3120      	adds	r1, #32
	} while (location < end_addr);
    4460:	428a      	cmp	r2, r1
    4462:	d8fb      	bhi.n	445c <usb_serial_flush_callback+0x4c>
	asm("dsb");
    4464:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4468:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    446c:	2004      	movs	r0, #4
    446e:	4639      	mov	r1, r7
    4470:	f7ff fee4 	bl	423c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    4474:	7833      	ldrb	r3, [r6, #0]
    4476:	4a08      	ldr	r2, [pc, #32]	; (4498 <usb_serial_flush_callback+0x88>)
    4478:	3301      	adds	r3, #1
    447a:	b2db      	uxtb	r3, r3
    447c:	2b03      	cmp	r3, #3
    447e:	bf88      	it	hi
    4480:	2300      	movhi	r3, #0
    4482:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    4484:	2300      	movs	r3, #0
    4486:	802b      	strh	r3, [r5, #0]
    4488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    448c:	20001bee 	.word	0x20001bee
    4490:	20001bd8 	.word	0x20001bd8
    4494:	20001d10 	.word	0x20001d10
    4498:	20001bef 	.word	0x20001bef
    449c:	20001d20 	.word	0x20001d20
    44a0:	20200060 	.word	0x20200060
    44a4:	e000ef70 	.word	0xe000ef70

000044a8 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    44a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44ac:	b085      	sub	sp, #20
    44ae:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    44b0:	9101      	str	r1, [sp, #4]
    44b2:	2900      	cmp	r1, #0
    44b4:	f000 80a3 	beq.w	45fe <usb_serial_write.part.1+0x156>
    44b8:	2300      	movs	r3, #0
    44ba:	f8df 8160 	ldr.w	r8, [pc, #352]	; 461c <usb_serial_write.part.1+0x174>
    44be:	4a51      	ldr	r2, [pc, #324]	; (4604 <usb_serial_write.part.1+0x15c>)
    44c0:	9300      	str	r3, [sp, #0]
    44c2:	7814      	ldrb	r4, [r2, #0]
    44c4:	f8b8 3000 	ldrh.w	r3, [r8]
    44c8:	f8df 9144 	ldr.w	r9, [pc, #324]	; 4610 <usb_serial_write.part.1+0x168>
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    44cc:	4e4e      	ldr	r6, [pc, #312]	; (4608 <usb_serial_write.part.1+0x160>)
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    44ce:	f8df a150 	ldr.w	sl, [pc, #336]	; 4620 <usb_serial_write.part.1+0x178>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    44d2:	f8df b150 	ldr.w	fp, [pc, #336]	; 4624 <usb_serial_write.part.1+0x17c>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    44d6:	4a4d      	ldr	r2, [pc, #308]	; (460c <usb_serial_write.part.1+0x164>)
    44d8:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    44dc:	2b00      	cmp	r3, #0
    44de:	d16c      	bne.n	45ba <usb_serial_write.part.1+0x112>
    44e0:	461d      	mov	r5, r3
    44e2:	461c      	mov	r4, r3
    44e4:	e014      	b.n	4510 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    44e6:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    44ea:	b904      	cbnz	r4, 44ee <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    44ec:	6835      	ldr	r5, [r6, #0]
    44ee:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    44f0:	2b00      	cmp	r3, #0
    44f2:	d15c      	bne.n	45ae <usb_serial_write.part.1+0x106>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    44f4:	6833      	ldr	r3, [r6, #0]
    44f6:	1b5b      	subs	r3, r3, r5
    44f8:	2b78      	cmp	r3, #120	; 0x78
    44fa:	d876      	bhi.n	45ea <usb_serial_write.part.1+0x142>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    44fc:	f89a 3000 	ldrb.w	r3, [sl]
    4500:	2b00      	cmp	r3, #0
    4502:	d054      	beq.n	45ae <usb_serial_write.part.1+0x106>
			yield();
    4504:	f000 fd00 	bl	4f08 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    4508:	f8b8 3000 	ldrh.w	r3, [r8]
    450c:	2b00      	cmp	r3, #0
    450e:	d152      	bne.n	45b6 <usb_serial_write.part.1+0x10e>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    4510:	4638      	mov	r0, r7
    4512:	f7ff ff1d 	bl	4350 <usb_transfer_status>
			if (!(status & 0x80)) {
    4516:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    451a:	4a3d      	ldr	r2, [pc, #244]	; (4610 <usb_serial_write.part.1+0x168>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    451c:	d1e3      	bne.n	44e6 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    451e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    4522:	4a38      	ldr	r2, [pc, #224]	; (4604 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    4524:	f889 0000 	strb.w	r0, [r9]
    4528:	7814      	ldrb	r4, [r2, #0]
    452a:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    452c:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4530:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    4532:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4534:	4937      	ldr	r1, [pc, #220]	; (4614 <usb_serial_write.part.1+0x16c>)
    4536:	4420      	add	r0, r4
		if (size >= tx_available) {
    4538:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    453a:	4408      	add	r0, r1
		if (size >= tx_available) {
    453c:	d341      	bcc.n	45c2 <usb_serial_write.part.1+0x11a>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    453e:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    4540:	9902      	ldr	r1, [sp, #8]
    4542:	f000 fd59 	bl	4ff8 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    4546:	2300      	movs	r3, #0
    4548:	4621      	mov	r1, r4
    454a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    454e:	4638      	mov	r0, r7
    4550:	f7ff fe5c 	bl	420c <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    4554:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    4558:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    455c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    4560:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    4564:	3320      	adds	r3, #32
	} while (location < end_addr);
    4566:	429c      	cmp	r4, r3
    4568:	d8fa      	bhi.n	4560 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    456a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    456e:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    4572:	2004      	movs	r0, #4
    4574:	4639      	mov	r1, r7
    4576:	f7ff fe61 	bl	423c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    457a:	4b22      	ldr	r3, [pc, #136]	; (4604 <usb_serial_write.part.1+0x15c>)
    457c:	781c      	ldrb	r4, [r3, #0]
    457e:	3401      	adds	r4, #1
    4580:	b2e4      	uxtb	r4, r4
    4582:	2c03      	cmp	r4, #3
    4584:	d837      	bhi.n	45f6 <usb_serial_write.part.1+0x14e>
    4586:	701c      	strb	r4, [r3, #0]
			size -= tx_available;
    4588:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    458c:	2100      	movs	r1, #0
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    458e:	9b00      	ldr	r3, [sp, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    4590:	4821      	ldr	r0, [pc, #132]	; (4618 <usb_serial_write.part.1+0x170>)
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    4592:	4413      	add	r3, r2
			data += tx_available;
			tx_available = 0;
    4594:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    4598:	9300      	str	r3, [sp, #0]
			data += tx_available;
    459a:	9b02      	ldr	r3, [sp, #8]
    459c:	4413      	add	r3, r2
    459e:	9302      	str	r3, [sp, #8]
    45a0:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    45a2:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    45a6:	9901      	ldr	r1, [sp, #4]
    45a8:	1a8a      	subs	r2, r1, r2
    45aa:	9201      	str	r2, [sp, #4]
    45ac:	d193      	bne.n	44d6 <usb_serial_write.part.1+0x2e>
    45ae:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    45b0:	b005      	add	sp, #20
    45b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    45b6:	4a13      	ldr	r2, [pc, #76]	; (4604 <usb_serial_write.part.1+0x15c>)
    45b8:	7814      	ldrb	r4, [r2, #0]
    45ba:	461a      	mov	r2, r3
    45bc:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    45c0:	e7b6      	b.n	4530 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    45c2:	9902      	ldr	r1, [sp, #8]
    45c4:	462a      	mov	r2, r5
    45c6:	9303      	str	r3, [sp, #12]
    45c8:	f000 fd16 	bl	4ff8 <memcpy>
			tx_available -= size;
    45cc:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    45ce:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    45d2:	4a11      	ldr	r2, [pc, #68]	; (4618 <usb_serial_write.part.1+0x170>)
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    45d4:	1b5b      	subs	r3, r3, r5
    45d6:	f8a8 3000 	strh.w	r3, [r8]
    45da:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    45dc:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    45e0:	4618      	mov	r0, r3
    45e2:	4428      	add	r0, r5
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    45e4:	b005      	add	sp, #20
    45e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    45ea:	2301      	movs	r3, #1
				return sent;
    45ec:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    45ee:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    45f0:	b005      	add	sp, #20
    45f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    45f6:	2200      	movs	r2, #0
    45f8:	4614      	mov	r4, r2
    45fa:	701a      	strb	r2, [r3, #0]
    45fc:	e7c4      	b.n	4588 <usb_serial_write.part.1+0xe0>
    45fe:	4608      	mov	r0, r1
    4600:	e7d6      	b.n	45b0 <usb_serial_write.part.1+0x108>
    4602:	bf00      	nop
    4604:	20001bef 	.word	0x20001bef
    4608:	20001b8c 	.word	0x20001b8c
    460c:	20001d20 	.word	0x20001d20
    4610:	20001da0 	.word	0x20001da0
    4614:	20200060 	.word	0x20200060
    4618:	402e0000 	.word	0x402e0000
    461c:	20001d10 	.word	0x20001d10
    4620:	20001bd8 	.word	0x20001bd8
    4624:	e000ef70 	.word	0xe000ef70

00004628 <rx_event>:
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    4628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    462c:	4e49      	ldr	r6, [pc, #292]	; (4754 <rx_event+0x12c>)
    462e:	6844      	ldr	r4, [r0, #4]
    4630:	8837      	ldrh	r7, [r6, #0]
    4632:	f3c4 440e 	ubfx	r4, r4, #16, #15
	int i = t->callback_param;
    4636:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    4638:	1b3c      	subs	r4, r7, r4
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    463a:	2c00      	cmp	r4, #0
    463c:	dd5f      	ble.n	46fe <rx_event+0xd6>
		// received a packet with data
		uint32_t head = rx_head;
    463e:	4946      	ldr	r1, [pc, #280]	; (4758 <rx_event+0x130>)
		if (head != rx_tail) {
    4640:	4b46      	ldr	r3, [pc, #280]	; (475c <rx_event+0x134>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    4642:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    4644:	781b      	ldrb	r3, [r3, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    4646:	b2d2      	uxtb	r2, r2
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    4648:	4845      	ldr	r0, [pc, #276]	; (4760 <rx_event+0x138>)
			uint32_t count = rx_count[ii];
    464a:	f8df 8134 	ldr.w	r8, [pc, #308]	; 4780 <rx_event+0x158>
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    464e:	429a      	cmp	r2, r3
    4650:	d007      	beq.n	4662 <rx_event+0x3a>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    4652:	f810 b002 	ldrb.w	fp, [r0, r2]
			uint32_t count = rx_count[ii];
    4656:	f838 a01b 	ldrh.w	sl, [r8, fp, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    465a:	f5ca 7300 	rsb	r3, sl, #512	; 0x200
    465e:	429c      	cmp	r4, r3
    4660:	d913      	bls.n	468a <rx_event+0x62>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    4662:	3201      	adds	r2, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    4664:	2300      	movs	r3, #0
    4666:	4e3f      	ldr	r6, [pc, #252]	; (4764 <rx_event+0x13c>)
		if (++head > RX_NUM) head = 0;
    4668:	2a08      	cmp	r2, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    466a:	f828 4015 	strh.w	r4, [r8, r5, lsl #1]
		rx_index[i] = 0;
    466e:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
    4672:	bf98      	it	ls
    4674:	b2d3      	uxtbls	r3, r2
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    4676:	4e3c      	ldr	r6, [pc, #240]	; (4768 <rx_event+0x140>)
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    4678:	bf88      	it	hi
    467a:	461a      	movhi	r2, r3
		rx_list[head] = i;
		rx_head = head;
    467c:	700b      	strb	r3, [r1, #0]
		rx_available += len;
    467e:	6833      	ldr	r3, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    4680:	5485      	strb	r5, [r0, r2]
		rx_head = head;
		rx_available += len;
    4682:	441c      	add	r4, r3
    4684:	6034      	str	r4, [r6, #0]
    4686:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
    468a:	4b38      	ldr	r3, [pc, #224]	; (476c <rx_event+0x144>)
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    468c:	eb0a 204b 	add.w	r0, sl, fp, lsl #9
    4690:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
    4692:	eb03 2945 	add.w	r9, r3, r5, lsl #9
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    4696:	4418      	add	r0, r3
    4698:	4649      	mov	r1, r9
    469a:	f000 fcad 	bl	4ff8 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    469e:	4832      	ldr	r0, [pc, #200]	; (4768 <rx_event+0x140>)
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    46a0:	4933      	ldr	r1, [pc, #204]	; (4770 <rx_event+0x148>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    46a2:	eb0a 0304 	add.w	r3, sl, r4
				rx_available += len;
    46a6:	6802      	ldr	r2, [r0, #0]
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    46a8:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    46ac:	eb01 1a45 	add.w	sl, r1, r5, lsl #5
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    46b0:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 477c <rx_event+0x154>
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    46b4:	4414      	add	r4, r2
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    46b6:	f828 301b 	strh.w	r3, [r8, fp, lsl #1]
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    46ba:	463a      	mov	r2, r7
    46bc:	4649      	mov	r1, r9
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    46be:	6004      	str	r4, [r0, #0]
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    46c0:	462b      	mov	r3, r5
    46c2:	4650      	mov	r0, sl
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    46c4:	f8cc e000 	str.w	lr, [ip]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    46c8:	f7ff fda0 	bl	420c <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    46cc:	8832      	ldrh	r2, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    46ce:	f029 031f 	bic.w	r3, r9, #31
	uint32_t end_addr = (uint32_t)addr + size;
    46d2:	4491      	add	r9, r2
	asm volatile("": : :"memory");
	asm("dsb");
    46d4:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    46d8:	4a26      	ldr	r2, [pc, #152]	; (4774 <rx_event+0x14c>)
    46da:	6013      	str	r3, [r2, #0]
		location += 32;
    46dc:	3320      	adds	r3, #32
	} while (location < end_addr);
    46de:	4599      	cmp	r9, r3
    46e0:	d8fb      	bhi.n	46da <rx_event+0xb2>
	asm("dsb");
    46e2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    46e6:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    46ea:	2003      	movs	r0, #3
    46ec:	4651      	mov	r1, sl
    46ee:	f7ff fdeb 	bl	42c8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    46f2:	4b21      	ldr	r3, [pc, #132]	; (4778 <rx_event+0x150>)
    46f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    46f8:	601a      	str	r2, [r3, #0]
    46fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    46fe:	491b      	ldr	r1, [pc, #108]	; (476c <rx_event+0x144>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4700:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4704:	4b1a      	ldr	r3, [pc, #104]	; (4770 <rx_event+0x148>)
    4706:	463a      	mov	r2, r7

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    4708:	eb01 2445 	add.w	r4, r1, r5, lsl #9
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    470c:	481b      	ldr	r0, [pc, #108]	; (477c <rx_event+0x154>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    470e:	eb03 1745 	add.w	r7, r3, r5, lsl #5
    4712:	462b      	mov	r3, r5
    4714:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4716:	f8c0 e000 	str.w	lr, [r0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    471a:	4638      	mov	r0, r7
    471c:	f7ff fd76 	bl	420c <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    4720:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    4722:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    4726:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    4728:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    472c:	4a11      	ldr	r2, [pc, #68]	; (4774 <rx_event+0x14c>)
    472e:	6013      	str	r3, [r2, #0]
		location += 32;
    4730:	3320      	adds	r3, #32
	} while (location < end_addr);
    4732:	4299      	cmp	r1, r3
    4734:	d8fb      	bhi.n	472e <rx_event+0x106>
	asm("dsb");
    4736:	f3bf 8f4f 	dsb	sy
	asm("isb");
    473a:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    473e:	2003      	movs	r0, #3
    4740:	4639      	mov	r1, r7
    4742:	f7ff fdc1 	bl	42c8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4746:	4b0c      	ldr	r3, [pc, #48]	; (4778 <rx_event+0x150>)
    4748:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    474c:	601a      	str	r2, [r3, #0]
    474e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4752:	bf00      	nop
    4754:	20001d0e 	.word	0x20001d0e
    4758:	20001bf0 	.word	0x20001bf0
    475c:	20001d00 	.word	0x20001d00
    4760:	20001d04 	.word	0x20001d04
    4764:	20001bdc 	.word	0x20001bdc
    4768:	20001d14 	.word	0x20001d14
    476c:	20202060 	.word	0x20202060
    4770:	20001c00 	.word	0x20001c00
    4774:	e000ef5c 	.word	0xe000ef5c
    4778:	e000e10c 	.word	0xe000e10c
    477c:	e000e18c 	.word	0xe000e18c
    4780:	20001da4 	.word	0x20001da4

00004784 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    4784:	4770      	bx	lr
    4786:	bf00      	nop

00004788 <usb_serial_configure>:
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    4788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    478c:	4b45      	ldr	r3, [pc, #276]	; (48a4 <usb_serial_configure+0x11c>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    478e:	2100      	movs	r1, #0
    4790:	f8df a14c 	ldr.w	sl, [pc, #332]	; 48e0 <usb_serial_configure+0x158>
    4794:	2280      	movs	r2, #128	; 0x80
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    4796:	781b      	ldrb	r3, [r3, #0]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    4798:	460c      	mov	r4, r1
    479a:	f8df 8148 	ldr.w	r8, [pc, #328]	; 48e4 <usb_serial_configure+0x15c>
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    479e:	460f      	mov	r7, r1
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    47a0:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    47a2:	4841      	ldr	r0, [pc, #260]	; (48a8 <usb_serial_configure+0x120>)
    47a4:	4e41      	ldr	r6, [pc, #260]	; (48ac <usb_serial_configure+0x124>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    47a6:	f44f 3900 	mov.w	r9, #131072	; 0x20000
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    47aa:	bf14      	ite	ne
    47ac:	f44f 7300 	movne.w	r3, #512	; 0x200
    47b0:	2340      	moveq	r3, #64	; 0x40
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    47b2:	4d3f      	ldr	r5, [pc, #252]	; (48b0 <usb_serial_configure+0x128>)
    47b4:	f8aa 3000 	strh.w	r3, [sl]
    47b8:	f8a8 3000 	strh.w	r3, [r8]
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    47bc:	f001 fa66 	bl	5c8c <memset>
	tx_head = 0;
    47c0:	483c      	ldr	r0, [pc, #240]	; (48b4 <usb_serial_configure+0x12c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    47c2:	4621      	mov	r1, r4
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    47c4:	4b3c      	ldr	r3, [pc, #240]	; (48b8 <usb_serial_configure+0x130>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    47c6:	f44f 7280 	mov.w	r2, #256	; 0x100
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    47ca:	7004      	strb	r4, [r0, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    47cc:	4630      	mov	r0, r6
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    47ce:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    47d0:	f001 fa5c 	bl	5c8c <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    47d4:	4939      	ldr	r1, [pc, #228]	; (48bc <usb_serial_configure+0x134>)
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    47d6:	4623      	mov	r3, r4
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    47d8:	4839      	ldr	r0, [pc, #228]	; (48c0 <usb_serial_configure+0x138>)
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    47da:	4622      	mov	r2, r4
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    47dc:	f8df e108 	ldr.w	lr, [pc, #264]	; 48e8 <usb_serial_configure+0x160>
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    47e0:	700c      	strb	r4, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    47e2:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    47e4:	7004      	strb	r4, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    47e6:	2002      	movs	r0, #2
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    47e8:	602c      	str	r4, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    47ea:	4d36      	ldr	r5, [pc, #216]	; (48c4 <usb_serial_configure+0x13c>)
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    47ec:	f8ce 4000 	str.w	r4, [lr]
    47f0:	f8ce 4004 	str.w	r4, [lr, #4]
    47f4:	f8ce 4008 	str.w	r4, [lr, #8]
    47f8:	f8ce 400c 	str.w	r4, [lr, #12]
	memset(rx_index, 0, sizeof(rx_index));
    47fc:	602c      	str	r4, [r5, #0]
    47fe:	606c      	str	r4, [r5, #4]
    4800:	60ac      	str	r4, [r5, #8]
    4802:	60ec      	str	r4, [r5, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4804:	f7ff fcce 	bl	41a4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    4808:	4622      	mov	r2, r4
    480a:	f8b8 1000 	ldrh.w	r1, [r8]
    480e:	2003      	movs	r0, #3
    4810:	4b2d      	ldr	r3, [pc, #180]	; (48c8 <usb_serial_configure+0x140>)
    4812:	f7ff fc95 	bl	4140 <usb_config_rx>
    4816:	4d2d      	ldr	r5, [pc, #180]	; (48cc <usb_serial_configure+0x144>)
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    4818:	4623      	mov	r3, r4
    481a:	f8ba 1000 	ldrh.w	r1, [sl]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCIMVAC = location;
    481e:	4c2c      	ldr	r4, [pc, #176]	; (48d0 <usb_serial_configure+0x148>)
    4820:	2201      	movs	r2, #1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4822:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 48ec <usb_serial_configure+0x164>
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    4826:	2004      	movs	r0, #4
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4828:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 48f0 <usb_serial_configure+0x168>
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    482c:	f7ff fcba 	bl	41a4 <usb_config_tx>
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4834:	f8b8 2000 	ldrh.w	r2, [r8]
    4838:	4629      	mov	r1, r5
    483a:	4630      	mov	r0, r6
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    483c:	f8ca 3000 	str.w	r3, [sl]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4840:	463b      	mov	r3, r7
    4842:	f7ff fce3 	bl	420c <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    4846:	f8b8 2000 	ldrh.w	r2, [r8]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    484a:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    484e:	442a      	add	r2, r5
	asm volatile("": : :"memory");
	asm("dsb");
    4850:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    4854:	6023      	str	r3, [r4, #0]
		location += 32;
    4856:	3320      	adds	r3, #32
	} while (location < end_addr);
    4858:	429a      	cmp	r2, r3
    485a:	d8fb      	bhi.n	4854 <usb_serial_configure+0xcc>
	asm("dsb");
    485c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4860:	f3bf 8f6f 	isb	sy
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    4864:	3701      	adds	r7, #1
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    4866:	4631      	mov	r1, r6
    4868:	2003      	movs	r0, #3
    486a:	f505 7500 	add.w	r5, r5, #512	; 0x200
    486e:	f7ff fd2b 	bl	42c8 <usb_receive>
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    4872:	2f08      	cmp	r7, #8
    4874:	f106 0620 	add.w	r6, r6, #32
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4878:	f8cb 9000 	str.w	r9, [fp]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    487c:	d1d8      	bne.n	4830 <usb_serial_configure+0xa8>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    487e:	4b15      	ldr	r3, [pc, #84]	; (48d4 <usb_serial_configure+0x14c>)
	USB1_GPTIMER0LD = microseconds - 1;
    4880:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    4882:	4815      	ldr	r0, [pc, #84]	; (48d8 <usb_serial_configure+0x150>)
	USB1_GPTIMER0CTRL = 0;
    4884:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    4886:	4c15      	ldr	r4, [pc, #84]	; (48dc <usb_serial_configure+0x154>)
    4888:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    488a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    488e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    4892:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    4896:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    489a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    489e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48a2:	bf00      	nop
    48a4:	20001bb4 	.word	0x20001bb4
    48a8:	20001d20 	.word	0x20001d20
    48ac:	20001c00 	.word	0x20001c00
    48b0:	20001d14 	.word	0x20001d14
    48b4:	20001bef 	.word	0x20001bef
    48b8:	20001d10 	.word	0x20001d10
    48bc:	20001bf0 	.word	0x20001bf0
    48c0:	20001d00 	.word	0x20001d00
    48c4:	20001bdc 	.word	0x20001bdc
    48c8:	00004629 	.word	0x00004629
    48cc:	20202060 	.word	0x20202060
    48d0:	e000ef5c 	.word	0xe000ef5c
    48d4:	402e0000 	.word	0x402e0000
    48d8:	20001ba4 	.word	0x20001ba4
    48dc:	00004411 	.word	0x00004411
    48e0:	20001bec 	.word	0x20001bec
    48e4:	20001d0e 	.word	0x20001d0e
    48e8:	20001da4 	.word	0x20001da4
    48ec:	e000e18c 	.word	0xe000e18c
    48f0:	e000e10c 	.word	0xe000e10c

000048f4 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    48f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    48f8:	4b48      	ldr	r3, [pc, #288]	; (4a1c <usb_serial_read+0x128>)

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    48fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    48fe:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    4900:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    4902:	4a47      	ldr	r2, [pc, #284]	; (4a20 <usb_serial_read+0x12c>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    4904:	4688      	mov	r8, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    4906:	7815      	ldrb	r5, [r2, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    4908:	2900      	cmp	r1, #0
    490a:	f000 8083 	beq.w	4a14 <usb_serial_read+0x120>
    490e:	4a45      	ldr	r2, [pc, #276]	; (4a24 <usb_serial_read+0x130>)
    4910:	b2ed      	uxtb	r5, r5
    4912:	7812      	ldrb	r2, [r2, #0]
    4914:	4295      	cmp	r5, r2
    4916:	d07f      	beq.n	4a18 <usb_serial_read+0x124>
    4918:	f04f 0b00 	mov.w	fp, #0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCIMVAC = location;
    491c:	4f42      	ldr	r7, [pc, #264]	; (4a28 <usb_serial_read+0x134>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    491e:	9301      	str	r3, [sp, #4]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4920:	9000      	str	r0, [sp, #0]
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    4922:	3501      	adds	r5, #1
		uint32_t i = rx_list[tail];
    4924:	4b41      	ldr	r3, [pc, #260]	; (4a2c <usb_serial_read+0x138>)
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    4926:	f8df a120 	ldr.w	sl, [pc, #288]	; 4a48 <usb_serial_read+0x154>
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    492a:	ebcb 0408 	rsb	r4, fp, r8
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    492e:	2d09      	cmp	r5, #9
    4930:	bf28      	it	cs
    4932:	2500      	movcs	r5, #0
		uint32_t i = rx_list[tail];
    4934:	f813 9005 	ldrb.w	r9, [r3, r5]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    4938:	4b3d      	ldr	r3, [pc, #244]	; (4a30 <usb_serial_read+0x13c>)
    493a:	f83a 1019 	ldrh.w	r1, [sl, r9, lsl #1]
    493e:	f833 6019 	ldrh.w	r6, [r3, r9, lsl #1]
    4942:	1a76      	subs	r6, r6, r1
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    4944:	42b4      	cmp	r4, r6
    4946:	d21e      	bcs.n	4986 <usb_serial_read+0x92>
    4948:	464b      	mov	r3, r9
    494a:	f8dd 9000 	ldr.w	r9, [sp]
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    494e:	4622      	mov	r2, r4
    4950:	eb01 2143 	add.w	r1, r1, r3, lsl #9
    4954:	9300      	str	r3, [sp, #0]
    4956:	4b37      	ldr	r3, [pc, #220]	; (4a34 <usb_serial_read+0x140>)
    4958:	4648      	mov	r0, r9
    495a:	4419      	add	r1, r3
    495c:	f000 fb4c 	bl	4ff8 <memcpy>
			rx_available -= len;
    4960:	4b35      	ldr	r3, [pc, #212]	; (4a38 <usb_serial_read+0x144>)
    4962:	4640      	mov	r0, r8
    4964:	6819      	ldr	r1, [r3, #0]
			rx_index[i] += len;
    4966:	9b00      	ldr	r3, [sp, #0]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    4968:	1b09      	subs	r1, r1, r4
			rx_index[i] += len;
    496a:	f83a 2013 	ldrh.w	r2, [sl, r3, lsl #1]
    496e:	4414      	add	r4, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    4970:	4a31      	ldr	r2, [pc, #196]	; (4a38 <usb_serial_read+0x144>)
			rx_index[i] += len;
    4972:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    4976:	6011      	str	r1, [r2, #0]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4978:	4b30      	ldr	r3, [pc, #192]	; (4a3c <usb_serial_read+0x148>)
    497a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    497e:	601a      	str	r2, [r3, #0]
	return count;
}
    4980:	b003      	add	sp, #12
    4982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4986:	f8dd e000 	ldr.w	lr, [sp]
    498a:	ea4f 2449 	mov.w	r4, r9, lsl #9

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    498e:	4b29      	ldr	r3, [pc, #164]	; (4a34 <usb_serial_read+0x140>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4990:	4632      	mov	r2, r6
    4992:	4421      	add	r1, r4
    4994:	4670      	mov	r0, lr

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    4996:	441c      	add	r4, r3
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    4998:	4673      	mov	r3, lr
			rx_available -= avail;
			count += avail;
    499a:	44b3      	add	fp, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    499c:	4433      	add	r3, r6
    499e:	9300      	str	r3, [sp, #0]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    49a0:	4b24      	ldr	r3, [pc, #144]	; (4a34 <usb_serial_read+0x140>)
    49a2:	4419      	add	r1, r3
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    49a4:	4b26      	ldr	r3, [pc, #152]	; (4a40 <usb_serial_read+0x14c>)
    49a6:	eb03 1a49 	add.w	sl, r3, r9, lsl #5
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    49aa:	f000 fb25 	bl	4ff8 <memcpy>
			p += avail;
			rx_available -= avail;
    49ae:	4b22      	ldr	r3, [pc, #136]	; (4a38 <usb_serial_read+0x144>)
    49b0:	4821      	ldr	r0, [pc, #132]	; (4a38 <usb_serial_read+0x144>)
			count += avail;
			rx_tail = tail;
    49b2:	b2ea      	uxtb	r2, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    49b4:	681b      	ldr	r3, [r3, #0]
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    49b6:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    49ba:	4621      	mov	r1, r4
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    49bc:	1b9e      	subs	r6, r3, r6
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    49be:	464b      	mov	r3, r9
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    49c0:	6006      	str	r6, [r0, #0]
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    49c2:	4650      	mov	r0, sl
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
			count += avail;
			rx_tail = tail;
    49c4:	4e16      	ldr	r6, [pc, #88]	; (4a20 <usb_serial_read+0x12c>)
    49c6:	7032      	strb	r2, [r6, #0]
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    49c8:	9a01      	ldr	r2, [sp, #4]
    49ca:	f8c2 e000 	str.w	lr, [r2]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    49ce:	4a1d      	ldr	r2, [pc, #116]	; (4a44 <usb_serial_read+0x150>)
    49d0:	8812      	ldrh	r2, [r2, #0]
    49d2:	f7ff fc1b 	bl	420c <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    49d6:	4b1b      	ldr	r3, [pc, #108]	; (4a44 <usb_serial_read+0x150>)
    49d8:	881a      	ldrh	r2, [r3, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    49da:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    49de:	4414      	add	r4, r2
	asm volatile("": : :"memory");
	asm("dsb");
    49e0:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    49e4:	603b      	str	r3, [r7, #0]
		location += 32;
    49e6:	3320      	adds	r3, #32
	} while (location < end_addr);
    49e8:	429c      	cmp	r4, r3
    49ea:	d8fb      	bhi.n	49e4 <usb_serial_read+0xf0>
	asm("dsb");
    49ec:	f3bf 8f4f 	dsb	sy
	asm("isb");
    49f0:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    49f4:	2003      	movs	r0, #3
    49f6:	4651      	mov	r1, sl
    49f8:	f7ff fc66 	bl	42c8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    49fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    4a00:	4a0e      	ldr	r2, [pc, #56]	; (4a3c <usb_serial_read+0x148>)

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    4a02:	45d8      	cmp	r8, fp
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4a04:	6013      	str	r3, [r2, #0]

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    4a06:	d903      	bls.n	4a10 <usb_serial_read+0x11c>
    4a08:	4b06      	ldr	r3, [pc, #24]	; (4a24 <usb_serial_read+0x130>)
    4a0a:	781b      	ldrb	r3, [r3, #0]
    4a0c:	429d      	cmp	r5, r3
    4a0e:	d188      	bne.n	4922 <usb_serial_read+0x2e>
    4a10:	4658      	mov	r0, fp
    4a12:	e7b1      	b.n	4978 <usb_serial_read+0x84>
    4a14:	4608      	mov	r0, r1
    4a16:	e7af      	b.n	4978 <usb_serial_read+0x84>
    4a18:	2000      	movs	r0, #0
    4a1a:	e7ad      	b.n	4978 <usb_serial_read+0x84>
    4a1c:	e000e18c 	.word	0xe000e18c
    4a20:	20001d00 	.word	0x20001d00
    4a24:	20001bf0 	.word	0x20001bf0
    4a28:	e000ef5c 	.word	0xe000ef5c
    4a2c:	20001d04 	.word	0x20001d04
    4a30:	20001da4 	.word	0x20001da4
    4a34:	20202060 	.word	0x20202060
    4a38:	20001d14 	.word	0x20001d14
    4a3c:	e000e10c 	.word	0xe000e10c
    4a40:	20001c00 	.word	0x20001c00
    4a44:	20001d0e 	.word	0x20001d0e
    4a48:	20001bdc 	.word	0x20001bdc

00004a4c <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    4a4c:	4b0c      	ldr	r3, [pc, #48]	; (4a80 <usb_serial_peekchar+0x34>)
	if (tail == rx_head) return -1;
    4a4e:	4a0d      	ldr	r2, [pc, #52]	; (4a84 <usb_serial_peekchar+0x38>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    4a50:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    4a52:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    4a54:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    4a56:	4293      	cmp	r3, r2
    4a58:	d00f      	beq.n	4a7a <usb_serial_peekchar+0x2e>
	if (++tail > RX_NUM) tail = 0;
    4a5a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    4a5c:	480a      	ldr	r0, [pc, #40]	; (4a88 <usb_serial_peekchar+0x3c>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4a5e:	490b      	ldr	r1, [pc, #44]	; (4a8c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    4a60:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4a62:	4a0b      	ldr	r2, [pc, #44]	; (4a90 <usb_serial_peekchar+0x44>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    4a64:	bf28      	it	cs
    4a66:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    4a68:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4a6a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    4a6e:	eb01 2343 	add.w	r3, r1, r3, lsl #9
    4a72:	4413      	add	r3, r2
    4a74:	f893 0f08 	ldrb.w	r0, [r3, #3848]	; 0xf08
    4a78:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    4a7a:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    4a7e:	4770      	bx	lr
    4a80:	20001d00 	.word	0x20001d00
    4a84:	20001bf0 	.word	0x20001bf0
    4a88:	20001d04 	.word	0x20001d04
    4a8c:	20201158 	.word	0x20201158
    4a90:	20001bdc 	.word	0x20001bdc

00004a94 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    4a94:	4b01      	ldr	r3, [pc, #4]	; (4a9c <usb_serial_available+0x8>)
    4a96:	6818      	ldr	r0, [r3, #0]
}
    4a98:	4770      	bx	lr
    4a9a:	bf00      	nop
    4a9c:	20001d14 	.word	0x20001d14

00004aa0 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    4aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    4aa4:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 4b80 <usb_serial_flush_input+0xe0>
	return rx_available;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    4aa8:	b083      	sub	sp, #12
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    4aaa:	4b2c      	ldr	r3, [pc, #176]	; (4b5c <usb_serial_flush_input+0xbc>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    4aac:	f89b 6000 	ldrb.w	r6, [fp]
	while (tail != rx_head) {
    4ab0:	781b      	ldrb	r3, [r3, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    4ab2:	b2f6      	uxtb	r6, r6
	while (tail != rx_head) {
    4ab4:	429e      	cmp	r6, r3
    4ab6:	d04a      	beq.n	4b4e <usb_serial_flush_input+0xae>
    4ab8:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 4b84 <usb_serial_flush_input+0xe4>
    4abc:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 4b88 <usb_serial_flush_input+0xe8>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCIMVAC = location;
    4ac0:	4d27      	ldr	r5, [pc, #156]	; (4b60 <usb_serial_flush_input+0xc0>)
		if (++tail > RX_NUM) tail = 0;
    4ac2:	3601      	adds	r6, #1
    4ac4:	2e08      	cmp	r6, #8
    4ac6:	d845      	bhi.n	4b54 <usb_serial_flush_input+0xb4>
    4ac8:	fa5f fa86 	uxtb.w	sl, r6
		uint32_t i = rx_list[tail];
    4acc:	4b25      	ldr	r3, [pc, #148]	; (4b64 <usb_serial_flush_input+0xc4>)
		rx_available -= rx_count[i] - rx_index[i];
    4ace:	4926      	ldr	r1, [pc, #152]	; (4b68 <usb_serial_flush_input+0xc8>)
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    4ad0:	5d9b      	ldrb	r3, [r3, r6]
		rx_available -= rx_count[i] - rx_index[i];
    4ad2:	f8d9 2000 	ldr.w	r2, [r9]
    4ad6:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    4ada:	4924      	ldr	r1, [pc, #144]	; (4b6c <usb_serial_flush_input+0xcc>)
    4adc:	eb01 2143 	add.w	r1, r1, r3, lsl #9
    4ae0:	460c      	mov	r4, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    4ae2:	4923      	ldr	r1, [pc, #140]	; (4b70 <usb_serial_flush_input+0xd0>)
    4ae4:	f831 e013 	ldrh.w	lr, [r1, r3, lsl #1]
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4ae8:	4922      	ldr	r1, [pc, #136]	; (4b74 <usb_serial_flush_input+0xd4>)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    4aea:	ebce 0e00 	rsb	lr, lr, r0
static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4aee:	9401      	str	r4, [sp, #4]
    4af0:	eb01 1743 	add.w	r7, r1, r3, lsl #5
    4af4:	4621      	mov	r1, r4
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    4af6:	ebce 0202 	rsb	r2, lr, r2
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4afa:	f44f 3400 	mov.w	r4, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4afe:	4638      	mov	r0, r7
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    4b00:	f8c9 2000 	str.w	r2, [r9]
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4b04:	4a1c      	ldr	r2, [pc, #112]	; (4b78 <usb_serial_flush_input+0xd8>)
    4b06:	6014      	str	r4, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4b08:	f8b8 2000 	ldrh.w	r2, [r8]
    4b0c:	f7ff fb7e 	bl	420c <usb_prepare_transfer>
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    4b10:	9901      	ldr	r1, [sp, #4]
	uint32_t end_addr = (uint32_t)addr + size;
    4b12:	f8b8 2000 	ldrh.w	r2, [r8]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    4b16:	f021 031f 	bic.w	r3, r1, #31
	uint32_t end_addr = (uint32_t)addr + size;
    4b1a:	4411      	add	r1, r2
    4b1c:	460c      	mov	r4, r1
	asm volatile("": : :"memory");
	asm("dsb");
    4b1e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    4b22:	602b      	str	r3, [r5, #0]
		location += 32;
    4b24:	3320      	adds	r3, #32
	} while (location < end_addr);
    4b26:	429c      	cmp	r4, r3
    4b28:	d8fb      	bhi.n	4b22 <usb_serial_flush_input+0x82>
	asm("dsb");
    4b2a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4b2e:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    4b32:	2003      	movs	r0, #3
    4b34:	4639      	mov	r1, r7
    4b36:	f7ff fbc7 	bl	42c8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4b3a:	4b10      	ldr	r3, [pc, #64]	; (4b7c <usb_serial_flush_input+0xdc>)
    4b3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4b40:	601a      	str	r2, [r3, #0]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    4b42:	4b06      	ldr	r3, [pc, #24]	; (4b5c <usb_serial_flush_input+0xbc>)
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
		rx_queue_transfer(i);
		rx_tail = tail;
    4b44:	f88b a000 	strb.w	sl, [fp]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    4b48:	781b      	ldrb	r3, [r3, #0]
    4b4a:	429e      	cmp	r6, r3
    4b4c:	d1b9      	bne.n	4ac2 <usb_serial_flush_input+0x22>
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
		rx_queue_transfer(i);
		rx_tail = tail;
	}
}
    4b4e:	b003      	add	sp, #12
    4b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b54:	2600      	movs	r6, #0
// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    4b56:	46b2      	mov	sl, r6
    4b58:	e7b8      	b.n	4acc <usb_serial_flush_input+0x2c>
    4b5a:	bf00      	nop
    4b5c:	20001bf0 	.word	0x20001bf0
    4b60:	e000ef5c 	.word	0xe000ef5c
    4b64:	20001d04 	.word	0x20001d04
    4b68:	20001da4 	.word	0x20001da4
    4b6c:	20202060 	.word	0x20202060
    4b70:	20001bdc 	.word	0x20001bdc
    4b74:	20001c00 	.word	0x20001c00
    4b78:	e000e18c 	.word	0xe000e18c
    4b7c:	e000e10c 	.word	0xe000e10c
    4b80:	20001d00 	.word	0x20001d00
    4b84:	20001d14 	.word	0x20001d14
    4b88:	20001d0e 	.word	0x20001d0e

00004b8c <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    4b8c:	b500      	push	{lr}
    4b8e:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    4b90:	2101      	movs	r1, #1
    4b92:	f10d 0007 	add.w	r0, sp, #7
    4b96:	f7ff fead 	bl	48f4 <usb_serial_read>
    4b9a:	b120      	cbz	r0, 4ba6 <usb_serial_getchar+0x1a>
    4b9c:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    4ba0:	b003      	add	sp, #12
    4ba2:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    4ba6:	f04f 30ff 	mov.w	r0, #4294967295
    4baa:	e7f9      	b.n	4ba0 <usb_serial_getchar+0x14>

00004bac <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    4bac:	4b09      	ldr	r3, [pc, #36]	; (4bd4 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    4bae:	b500      	push	{lr}
    4bb0:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    4bb2:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    4bb4:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    4bb8:	b923      	cbnz	r3, 4bc4 <usb_serial_putchar+0x18>
    4bba:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    4bbe:	b003      	add	sp, #12
    4bc0:	f85d fb04 	ldr.w	pc, [sp], #4
    4bc4:	2101      	movs	r1, #1
    4bc6:	f10d 0007 	add.w	r0, sp, #7
    4bca:	f7ff fc6d 	bl	44a8 <usb_serial_write.part.1>
    4bce:	b003      	add	sp, #12
    4bd0:	f85d fb04 	ldr.w	pc, [sp], #4
    4bd4:	20001bd8 	.word	0x20001bd8

00004bd8 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    4bd8:	4b04      	ldr	r3, [pc, #16]	; (4bec <usb_serial_write+0x14>)
    4bda:	781b      	ldrb	r3, [r3, #0]
    4bdc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4be0:	b10b      	cbz	r3, 4be6 <usb_serial_write+0xe>
    4be2:	f7ff bc61 	b.w	44a8 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    4be6:	4610      	mov	r0, r2
    4be8:	4770      	bx	lr
    4bea:	bf00      	nop
    4bec:	20001bd8 	.word	0x20001bd8

00004bf0 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    4bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    4bf4:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    4bf6:	f8df 8040 	ldr.w	r8, [pc, #64]	; 4c38 <usb_serial_write_buffer_free+0x48>
    4bfa:	2301      	movs	r3, #1
    4bfc:	4d0c      	ldr	r5, [pc, #48]	; (4c30 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    4bfe:	4627      	mov	r7, r4
    4c00:	4e0c      	ldr	r6, [pc, #48]	; (4c34 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    4c02:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    4c06:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    4c08:	4628      	mov	r0, r5
    4c0a:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    4c0c:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    4c0e:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    4c12:	d005      	beq.n	4c20 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    4c14:	f7ff fb9c 	bl	4350 <usb_transfer_status>
    4c18:	0603      	lsls	r3, r0, #24
    4c1a:	bf58      	it	pl
    4c1c:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    4c20:	2c04      	cmp	r4, #4
    4c22:	d1f0      	bne.n	4c06 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    4c24:	2300      	movs	r3, #0
	return sum;
}
    4c26:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    4c28:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    4c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c30:	20001d20 	.word	0x20001d20
    4c34:	20001bef 	.word	0x20001bef
    4c38:	20001bee 	.word	0x20001bee

00004c3c <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    4c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    4c40:	4b1f      	ldr	r3, [pc, #124]	; (4cc0 <usb_serial_flush_output+0x84>)
    4c42:	781b      	ldrb	r3, [r3, #0]
    4c44:	b113      	cbz	r3, 4c4c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    4c46:	4d1f      	ldr	r5, [pc, #124]	; (4cc4 <usb_serial_flush_output+0x88>)
    4c48:	882a      	ldrh	r2, [r5, #0]
    4c4a:	b90a      	cbnz	r2, 4c50 <usb_serial_flush_output+0x14>
    4c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    4c50:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4cd8 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    4c54:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    4c58:	4e1b      	ldr	r6, [pc, #108]	; (4cc8 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    4c5a:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    4c5e:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4c62:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4c64:	4c19      	ldr	r4, [pc, #100]	; (4ccc <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4c66:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    4c68:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    4c6c:	4f18      	ldr	r7, [pc, #96]	; (4cd0 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4c6e:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4c72:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    4c74:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4c78:	4621      	mov	r1, r4
    4c7a:	f7ff fac7 	bl	420c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    4c7e:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    4c82:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    4c86:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    4c8a:	4b12      	ldr	r3, [pc, #72]	; (4cd4 <usb_serial_flush_output+0x98>)
    4c8c:	6019      	str	r1, [r3, #0]
		location += 32;
    4c8e:	3120      	adds	r1, #32
	} while (location < end_addr);
    4c90:	428a      	cmp	r2, r1
    4c92:	d8fb      	bhi.n	4c8c <usb_serial_flush_output+0x50>
	asm("dsb");
    4c94:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4c98:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    4c9c:	2004      	movs	r0, #4
    4c9e:	4631      	mov	r1, r6
    4ca0:	f7ff facc 	bl	423c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    4ca4:	f898 3000 	ldrb.w	r3, [r8]
    4ca8:	4a0b      	ldr	r2, [pc, #44]	; (4cd8 <usb_serial_flush_output+0x9c>)
    4caa:	3301      	adds	r3, #1
    4cac:	b2db      	uxtb	r3, r3
    4cae:	2b03      	cmp	r3, #3
    4cb0:	bf88      	it	hi
    4cb2:	2300      	movhi	r3, #0
    4cb4:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    4cb6:	2300      	movs	r3, #0
    4cb8:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    4cba:	703b      	strb	r3, [r7, #0]
    4cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4cc0:	20001bd8 	.word	0x20001bd8
    4cc4:	20001d10 	.word	0x20001d10
    4cc8:	20001d20 	.word	0x20001d20
    4ccc:	20200060 	.word	0x20200060
    4cd0:	20001bee 	.word	0x20001bee
    4cd4:	e000ef70 	.word	0xe000ef70
    4cd8:	20001bef 	.word	0x20001bef

00004cdc <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    4cdc:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4cde:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    4ce2:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    4ce4:	7f43      	ldrb	r3, [r0, #29]
    4ce6:	b933      	cbnz	r3, 4cf6 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4ce8:	7f01      	ldrb	r1, [r0, #28]
    4cea:	2901      	cmp	r1, #1
    4cec:	d008      	beq.n	4d00 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4cee:	2903      	cmp	r1, #3
    4cf0:	d010      	beq.n	4d14 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    4cf2:	2301      	movs	r3, #1
    4cf4:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4cf6:	b902      	cbnz	r2, 4cfa <EventResponder::triggerEventNotImmediate()+0x1e>
    4cf8:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    4cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
    4cfe:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4d00:	4c11      	ldr	r4, [pc, #68]	; (4d48 <EventResponder::triggerEventNotImmediate()+0x6c>)
    4d02:	6821      	ldr	r1, [r4, #0]
    4d04:	b1a1      	cbz	r1, 4d30 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    4d06:	4911      	ldr	r1, [pc, #68]	; (4d4c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    4d08:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    4d0a:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    4d0c:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    4d0e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    4d10:	6158      	str	r0, [r3, #20]
    4d12:	e7ee      	b.n	4cf2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    4d14:	4c0e      	ldr	r4, [pc, #56]	; (4d50 <EventResponder::triggerEventNotImmediate()+0x74>)
    4d16:	6821      	ldr	r1, [r4, #0]
    4d18:	b181      	cbz	r1, 4d3c <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4d1a:	490e      	ldr	r1, [pc, #56]	; (4d54 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    4d1c:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    4d1e:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    4d20:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4d22:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    4d24:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    4d26:	4b0c      	ldr	r3, [pc, #48]	; (4d58 <EventResponder::triggerEventNotImmediate()+0x7c>)
    4d28:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    4d2c:	6019      	str	r1, [r3, #0]
    4d2e:	e7e0      	b.n	4cf2 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4d30:	4b06      	ldr	r3, [pc, #24]	; (4d4c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    4d32:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    4d34:	6181      	str	r1, [r0, #24]
				firstYield = this;
    4d36:	6020      	str	r0, [r4, #0]
				lastYield = this;
    4d38:	6018      	str	r0, [r3, #0]
    4d3a:	e7da      	b.n	4cf2 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    4d3c:	4b05      	ldr	r3, [pc, #20]	; (4d54 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    4d3e:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    4d40:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    4d42:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    4d44:	6018      	str	r0, [r3, #0]
    4d46:	e7ee      	b.n	4d26 <EventResponder::triggerEventNotImmediate()+0x4a>
    4d48:	20001dc4 	.word	0x20001dc4
    4d4c:	20001dc0 	.word	0x20001dc0
    4d50:	20001db8 	.word	0x20001db8
    4d54:	20001dbc 	.word	0x20001dbc
    4d58:	e000ed04 	.word	0xe000ed04

00004d5c <pendablesrvreq_isr>:
	}
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
    4d5c:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4d5e:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    4d62:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4d64:	4c0c      	ldr	r4, [pc, #48]	; (4d98 <pendablesrvreq_isr+0x3c>)
    4d66:	6823      	ldr	r3, [r4, #0]
		if (first) {
    4d68:	b18b      	cbz	r3, 4d8e <pendablesrvreq_isr+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4d6a:	4e0c      	ldr	r6, [pc, #48]	; (4d9c <pendablesrvreq_isr+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4d6c:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    4d6e:	695a      	ldr	r2, [r3, #20]
    4d70:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    4d72:	b17a      	cbz	r2, 4d94 <pendablesrvreq_isr+0x38>
				firstInterrupt->_prev = nullptr;
    4d74:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4d76:	b901      	cbnz	r1, 4d7a <pendablesrvreq_isr+0x1e>
    4d78:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    4d7a:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    4d7c:	4618      	mov	r0, r3
    4d7e:	689b      	ldr	r3, [r3, #8]
    4d80:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4d82:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    4d86:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4d88:	6823      	ldr	r3, [r4, #0]
		if (first) {
    4d8a:	2b00      	cmp	r3, #0
    4d8c:	d1ef      	bne.n	4d6e <pendablesrvreq_isr+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4d8e:	b901      	cbnz	r1, 4d92 <pendablesrvreq_isr+0x36>
    4d90:	b662      	cpsie	i
    4d92:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4d94:	6032      	str	r2, [r6, #0]
    4d96:	e7ee      	b.n	4d76 <pendablesrvreq_isr+0x1a>
    4d98:	20001db8 	.word	0x20001db8
    4d9c:	20001dbc 	.word	0x20001dbc

00004da0 <EventResponder::detachNoInterrupts()>:
}

// this detach must be called with interrupts disabled
void EventResponder::detachNoInterrupts()
{
	if (_type == EventTypeYield) {
    4da0:	7f03      	ldrb	r3, [r0, #28]
    4da2:	2b01      	cmp	r3, #1
    4da4:	d00f      	beq.n	4dc6 <EventResponder::detachNoInterrupts()+0x26>
			} else {
				lastYield = _prev;
			}
		}
		_type = EventTypeDetached;
	} else if (_type == EventTypeInterrupt) {
    4da6:	2b03      	cmp	r3, #3
    4da8:	d000      	beq.n	4dac <EventResponder::detachNoInterrupts()+0xc>
    4daa:	4770      	bx	lr
		if (_triggered) {
    4dac:	7f43      	ldrb	r3, [r0, #29]
    4dae:	b13b      	cbz	r3, 4dc0 <EventResponder::detachNoInterrupts()+0x20>
			if (_prev) {
    4db0:	6983      	ldr	r3, [r0, #24]
				_prev->_next = _next;
    4db2:	6942      	ldr	r2, [r0, #20]
			}
		}
		_type = EventTypeDetached;
	} else if (_type == EventTypeInterrupt) {
		if (_triggered) {
			if (_prev) {
    4db4:	b1d3      	cbz	r3, 4dec <EventResponder::detachNoInterrupts()+0x4c>
				_prev->_next = _next;
    4db6:	615a      	str	r2, [r3, #20]
    4db8:	6942      	ldr	r2, [r0, #20]
			} else {
				firstInterrupt = _next;
			}
			if (_next) {
    4dba:	b96a      	cbnz	r2, 4dd8 <EventResponder::detachNoInterrupts()+0x38>
				_next->_prev = _prev;
			} else {
				lastInterrupt = _prev;
    4dbc:	4a0e      	ldr	r2, [pc, #56]	; (4df8 <EventResponder::detachNoInterrupts()+0x58>)
    4dbe:	6013      	str	r3, [r2, #0]
				_next->_prev = _prev;
			} else {
				lastYield = _prev;
			}
		}
		_type = EventTypeDetached;
    4dc0:	2300      	movs	r3, #0
    4dc2:	7703      	strb	r3, [r0, #28]
    4dc4:	4770      	bx	lr

// this detach must be called with interrupts disabled
void EventResponder::detachNoInterrupts()
{
	if (_type == EventTypeYield) {
		if (_triggered) {
    4dc6:	7f43      	ldrb	r3, [r0, #29]
    4dc8:	2b00      	cmp	r3, #0
    4dca:	d0f9      	beq.n	4dc0 <EventResponder::detachNoInterrupts()+0x20>
			if (_prev) {
    4dcc:	6983      	ldr	r3, [r0, #24]
				_prev->_next = _next;
    4dce:	6942      	ldr	r2, [r0, #20]
// this detach must be called with interrupts disabled
void EventResponder::detachNoInterrupts()
{
	if (_type == EventTypeYield) {
		if (_triggered) {
			if (_prev) {
    4dd0:	b14b      	cbz	r3, 4de6 <EventResponder::detachNoInterrupts()+0x46>
				_prev->_next = _next;
    4dd2:	615a      	str	r2, [r3, #20]
    4dd4:	6942      	ldr	r2, [r0, #20]
			} else {
				firstYield = _next;
			}
			if (_next) {
    4dd6:	b11a      	cbz	r2, 4de0 <EventResponder::detachNoInterrupts()+0x40>
				_prev->_next = _next;
			} else {
				firstInterrupt = _next;
			}
			if (_next) {
				_next->_prev = _prev;
    4dd8:	6193      	str	r3, [r2, #24]
				_next->_prev = _prev;
			} else {
				lastYield = _prev;
			}
		}
		_type = EventTypeDetached;
    4dda:	2300      	movs	r3, #0
    4ddc:	7703      	strb	r3, [r0, #28]
    4dde:	4770      	bx	lr
				firstYield = _next;
			}
			if (_next) {
				_next->_prev = _prev;
			} else {
				lastYield = _prev;
    4de0:	4a06      	ldr	r2, [pc, #24]	; (4dfc <EventResponder::detachNoInterrupts()+0x5c>)
    4de2:	6013      	str	r3, [r2, #0]
    4de4:	e7ec      	b.n	4dc0 <EventResponder::detachNoInterrupts()+0x20>
	if (_type == EventTypeYield) {
		if (_triggered) {
			if (_prev) {
				_prev->_next = _next;
			} else {
				firstYield = _next;
    4de6:	4906      	ldr	r1, [pc, #24]	; (4e00 <EventResponder::detachNoInterrupts()+0x60>)
    4de8:	600a      	str	r2, [r1, #0]
    4dea:	e7f4      	b.n	4dd6 <EventResponder::detachNoInterrupts()+0x36>
	} else if (_type == EventTypeInterrupt) {
		if (_triggered) {
			if (_prev) {
				_prev->_next = _next;
			} else {
				firstInterrupt = _next;
    4dec:	4905      	ldr	r1, [pc, #20]	; (4e04 <EventResponder::detachNoInterrupts()+0x64>)
    4dee:	600a      	str	r2, [r1, #0]
			}
			if (_next) {
    4df0:	2a00      	cmp	r2, #0
    4df2:	d1f1      	bne.n	4dd8 <EventResponder::detachNoInterrupts()+0x38>
    4df4:	e7e2      	b.n	4dbc <EventResponder::detachNoInterrupts()+0x1c>
    4df6:	bf00      	nop
    4df8:	20001dbc 	.word	0x20001dbc
    4dfc:	20001dc0 	.word	0x20001dc0
    4e00:	20001dc4 	.word	0x20001dc4
    4e04:	20001db8 	.word	0x20001db8

00004e08 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    4e08:	4a04      	ldr	r2, [pc, #16]	; (4e1c <systick_isr+0x14>)
    4e0a:	4b05      	ldr	r3, [pc, #20]	; (4e20 <systick_isr+0x18>)
    4e0c:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    4e0e:	4a05      	ldr	r2, [pc, #20]	; (4e24 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    4e10:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    4e12:	6813      	ldr	r3, [r2, #0]
    4e14:	3301      	adds	r3, #1
    4e16:	6013      	str	r3, [r2, #0]
    4e18:	4770      	bx	lr
    4e1a:	bf00      	nop
    4e1c:	e0001004 	.word	0xe0001004
    4e20:	20001b84 	.word	0x20001b84
    4e24:	20001b8c 	.word	0x20001b8c

00004e28 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    4e28:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    4e2a:	f7fb f93f 	bl	ac <setup>
	while (1) {
		loop();
    4e2e:	f7fb fa87 	bl	340 <loop>
		yield();
    4e32:	f000 f869 	bl	4f08 <yield>
    4e36:	e7fa      	b.n	4e2e <main+0x6>

00004e38 <operator new(unsigned int)>:
    4e38:	f000 bc60 	b.w	56fc <malloc>

00004e3c <operator delete(void*, unsigned int)>:
    4e3c:	f000 bc66 	b.w	570c <free>

00004e40 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4e40:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    4e42:	4c06      	ldr	r4, [pc, #24]	; (4e5c <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4e44:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    4e46:	6803      	ldr	r3, [r0, #0]
    4e48:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    4e4a:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    4e4c:	a901      	add	r1, sp, #4
    4e4e:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    4e50:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    4e54:	4798      	blx	r3
}
    4e56:	b002      	add	sp, #8
    4e58:	bd10      	pop	{r4, pc}
    4e5a:	bf00      	nop
    4e5c:	20000708 	.word	0x20000708

00004e60 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    4e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e62:	4606      	mov	r6, r0
    4e64:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    4e66:	2a00      	cmp	r2, #0
    4e68:	d033      	beq.n	4ed2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    4e6a:	2a01      	cmp	r2, #1
    4e6c:	bf08      	it	eq
    4e6e:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    4e70:	b351      	cbz	r1, 4ec8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    4e72:	2521      	movs	r5, #33	; 0x21
    4e74:	e000      	b.n	4e78 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    4e76:	b2fd      	uxtb	r5, r7
    4e78:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    4e7a:	fbb1 f4f2 	udiv	r4, r1, r2
    4e7e:	fb02 1114 	mls	r1, r2, r4, r1
    4e82:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4e84:	2909      	cmp	r1, #9
    4e86:	f100 0137 	add.w	r1, r0, #55	; 0x37
    4e8a:	f100 0030 	add.w	r0, r0, #48	; 0x30
    4e8e:	bf88      	it	hi
    4e90:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    4e92:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4e94:	ac0a      	add	r4, sp, #40	; 0x28
    4e96:	bf98      	it	ls
    4e98:	b2c0      	uxtbls	r0, r0
    4e9a:	442c      	add	r4, r5
    4e9c:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    4ea0:	2900      	cmp	r1, #0
    4ea2:	d1e8      	bne.n	4e76 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    4ea4:	b133      	cbz	r3, 4eb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    4ea6:	3d01      	subs	r5, #1
		buf[i] = '-';
    4ea8:	ab0a      	add	r3, sp, #40	; 0x28
    4eaa:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    4eac:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    4eae:	442b      	add	r3, r5
    4eb0:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    4eb4:	6833      	ldr	r3, [r6, #0]
    4eb6:	a901      	add	r1, sp, #4
    4eb8:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    4ebc:	4630      	mov	r0, r6
    4ebe:	4429      	add	r1, r5
    4ec0:	685b      	ldr	r3, [r3, #4]
    4ec2:	4798      	blx	r3
}
    4ec4:	b00b      	add	sp, #44	; 0x2c
    4ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    4ec8:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    4eca:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    4ecc:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    4ed0:	e7e8      	b.n	4ea4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    4ed2:	6803      	ldr	r3, [r0, #0]
    4ed4:	b2c9      	uxtb	r1, r1
    4ed6:	681b      	ldr	r3, [r3, #0]
    4ed8:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    4eda:	b00b      	add	sp, #44	; 0x2c
    4edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ede:	bf00      	nop

00004ee0 <usb_serial_class::clear()>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    4ee0:	f7ff bdde 	b.w	4aa0 <usb_serial_flush_input>

00004ee4 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    4ee4:	f7ff bdb2 	b.w	4a4c <usb_serial_peekchar>

00004ee8 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    4ee8:	f7ff be50 	b.w	4b8c <usb_serial_getchar>

00004eec <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4eec:	f7ff bdd2 	b.w	4a94 <usb_serial_available>

00004ef0 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    4ef0:	f7ff bea4 	b.w	4c3c <usb_serial_flush_output>

00004ef4 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    4ef4:	f7ff be7c 	b.w	4bf0 <usb_serial_write_buffer_free>

00004ef8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4ef8:	4608      	mov	r0, r1
    4efa:	4611      	mov	r1, r2
    4efc:	f7ff be6c 	b.w	4bd8 <usb_serial_write>

00004f00 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4f00:	4608      	mov	r0, r1
    4f02:	f7ff be53 	b.w	4bac <usb_serial_putchar>
    4f06:	bf00      	nop

00004f08 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    4f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    4f0c:	4e32      	ldr	r6, [pc, #200]	; (4fd8 <yield+0xd0>)
    4f0e:	7833      	ldrb	r3, [r6, #0]
    4f10:	b193      	cbz	r3, 4f38 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    4f12:	4f32      	ldr	r7, [pc, #200]	; (4fdc <yield+0xd4>)
    4f14:	783a      	ldrb	r2, [r7, #0]
    4f16:	b97a      	cbnz	r2, 4f38 <yield+0x30>
	running = 1;
    4f18:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    4f1a:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    4f1c:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    4f1e:	d437      	bmi.n	4f90 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    4f20:	079a      	lsls	r2, r3, #30
    4f22:	d419      	bmi.n	4f58 <yield+0x50>

	running = 0;
    4f24:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    4f26:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    4f28:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    4f2a:	d505      	bpl.n	4f38 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    4f2c:	4b2c      	ldr	r3, [pc, #176]	; (4fe0 <yield+0xd8>)
    4f2e:	681a      	ldr	r2, [r3, #0]
    4f30:	b112      	cbz	r2, 4f38 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    4f32:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    4f36:	b10a      	cbz	r2, 4f3c <yield+0x34>
    4f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4f3c:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    4f40:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    4f42:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    4f44:	b11a      	cbz	r2, 4f4e <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    4f46:	4c27      	ldr	r4, [pc, #156]	; (4fe4 <yield+0xdc>)
    4f48:	7821      	ldrb	r1, [r4, #0]
    4f4a:	2900      	cmp	r1, #0
    4f4c:	d02f      	beq.n	4fae <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4f4e:	2800      	cmp	r0, #0
    4f50:	d1f2      	bne.n	4f38 <yield+0x30>
    4f52:	b662      	cpsie	i
    4f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4f58:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4ff0 <yield+0xe8>
    4f5c:	f898 2000 	ldrb.w	r2, [r8]
    4f60:	2a00      	cmp	r2, #0
    4f62:	d0df      	beq.n	4f24 <yield+0x1c>
    4f64:	2400      	movs	r4, #0
    4f66:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4ff4 <yield+0xec>
    4f6a:	e005      	b.n	4f78 <yield+0x70>
    4f6c:	3401      	adds	r4, #1
    4f6e:	f898 3000 	ldrb.w	r3, [r8]
    4f72:	b2e4      	uxtb	r4, r4
    4f74:	42a3      	cmp	r3, r4
    4f76:	d913      	bls.n	4fa0 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    4f78:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    4f7c:	682b      	ldr	r3, [r5, #0]
    4f7e:	4628      	mov	r0, r5
    4f80:	691b      	ldr	r3, [r3, #16]
    4f82:	4798      	blx	r3
    4f84:	2800      	cmp	r0, #0
    4f86:	d0f1      	beq.n	4f6c <yield+0x64>
    4f88:	696b      	ldr	r3, [r5, #20]
    4f8a:	689b      	ldr	r3, [r3, #8]
    4f8c:	4798      	blx	r3
    4f8e:	e7ed      	b.n	4f6c <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4f90:	f7ff fd80 	bl	4a94 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    4f94:	b9d0      	cbnz	r0, 4fcc <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    4f96:	4b14      	ldr	r3, [pc, #80]	; (4fe8 <yield+0xe0>)
    4f98:	781b      	ldrb	r3, [r3, #0]
    4f9a:	b91b      	cbnz	r3, 4fa4 <yield+0x9c>
    4f9c:	7833      	ldrb	r3, [r6, #0]
    4f9e:	e7bf      	b.n	4f20 <yield+0x18>
    4fa0:	7833      	ldrb	r3, [r6, #0]
    4fa2:	e7bf      	b.n	4f24 <yield+0x1c>
    4fa4:	7833      	ldrb	r3, [r6, #0]
    4fa6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4faa:	7033      	strb	r3, [r6, #0]
    4fac:	e7b8      	b.n	4f20 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    4fae:	2601      	movs	r6, #1
		firstYield = first->_next;
    4fb0:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    4fb2:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    4fb4:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    4fb6:	b165      	cbz	r5, 4fd2 <yield+0xca>
			firstYield->_prev = nullptr;
    4fb8:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4fba:	b900      	cbnz	r0, 4fbe <yield+0xb6>
    4fbc:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    4fbe:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    4fc0:	6893      	ldr	r3, [r2, #8]
    4fc2:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    4fc4:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    4fc6:	4798      	blx	r3
		runningFromYield = false;
    4fc8:	7025      	strb	r5, [r4, #0]
    4fca:	e7b5      	b.n	4f38 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    4fcc:	f000 fb5a 	bl	5684 <serialEvent()>
    4fd0:	e7e1      	b.n	4f96 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    4fd2:	4b06      	ldr	r3, [pc, #24]	; (4fec <yield+0xe4>)
    4fd4:	601d      	str	r5, [r3, #0]
    4fd6:	e7f0      	b.n	4fba <yield+0xb2>
    4fd8:	200007b8 	.word	0x200007b8
    4fdc:	20001dc9 	.word	0x20001dc9
    4fe0:	20001dc4 	.word	0x20001dc4
    4fe4:	20001dc8 	.word	0x20001dc8
    4fe8:	60001aa6 	.word	0x60001aa6
    4fec:	20001dc0 	.word	0x20001dc0
    4ff0:	20001dec 	.word	0x20001dec
    4ff4:	20001dcc 	.word	0x20001dcc

00004ff8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    4ff8:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    4ffa:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    4ffe:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    5002:	d16d      	bne.n	50e0 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    5004:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    5006:	d341      	bcc.n	508c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    5008:	f851 3b04 	ldr.w	r3, [r1], #4
    500c:	f840 3b04 	str.w	r3, [r0], #4
    5010:	f851 3b04 	ldr.w	r3, [r1], #4
    5014:	f840 3b04 	str.w	r3, [r0], #4
    5018:	f851 3b04 	ldr.w	r3, [r1], #4
    501c:	f840 3b04 	str.w	r3, [r0], #4
    5020:	f851 3b04 	ldr.w	r3, [r1], #4
    5024:	f840 3b04 	str.w	r3, [r0], #4
    5028:	f851 3b04 	ldr.w	r3, [r1], #4
    502c:	f840 3b04 	str.w	r3, [r0], #4
    5030:	f851 3b04 	ldr.w	r3, [r1], #4
    5034:	f840 3b04 	str.w	r3, [r0], #4
    5038:	f851 3b04 	ldr.w	r3, [r1], #4
    503c:	f840 3b04 	str.w	r3, [r0], #4
    5040:	f851 3b04 	ldr.w	r3, [r1], #4
    5044:	f840 3b04 	str.w	r3, [r0], #4
    5048:	f851 3b04 	ldr.w	r3, [r1], #4
    504c:	f840 3b04 	str.w	r3, [r0], #4
    5050:	f851 3b04 	ldr.w	r3, [r1], #4
    5054:	f840 3b04 	str.w	r3, [r0], #4
    5058:	f851 3b04 	ldr.w	r3, [r1], #4
    505c:	f840 3b04 	str.w	r3, [r0], #4
    5060:	f851 3b04 	ldr.w	r3, [r1], #4
    5064:	f840 3b04 	str.w	r3, [r0], #4
    5068:	f851 3b04 	ldr.w	r3, [r1], #4
    506c:	f840 3b04 	str.w	r3, [r0], #4
    5070:	f851 3b04 	ldr.w	r3, [r1], #4
    5074:	f840 3b04 	str.w	r3, [r0], #4
    5078:	f851 3b04 	ldr.w	r3, [r1], #4
    507c:	f840 3b04 	str.w	r3, [r0], #4
    5080:	f851 3b04 	ldr.w	r3, [r1], #4
    5084:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    5088:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    508a:	d2bd      	bcs.n	5008 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    508c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    508e:	d311      	bcc.n	50b4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    5090:	f851 3b04 	ldr.w	r3, [r1], #4
    5094:	f840 3b04 	str.w	r3, [r0], #4
    5098:	f851 3b04 	ldr.w	r3, [r1], #4
    509c:	f840 3b04 	str.w	r3, [r0], #4
    50a0:	f851 3b04 	ldr.w	r3, [r1], #4
    50a4:	f840 3b04 	str.w	r3, [r0], #4
    50a8:	f851 3b04 	ldr.w	r3, [r1], #4
    50ac:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    50b0:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    50b2:	d2ed      	bcs.n	5090 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    50b4:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    50b6:	d305      	bcc.n	50c4 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    50b8:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    50bc:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    50c0:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    50c2:	d2f9      	bcs.n	50b8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    50c4:	3204      	adds	r2, #4
	beq	.Ldone
    50c6:	d008      	beq.n	50da <memcpy+0xe2>

	lsls	r2, r2, #31
    50c8:	07d2      	lsls	r2, r2, #31
	itt ne
    50ca:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    50cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    50d0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    50d4:	d301      	bcc.n	50da <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    50d6:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    50d8:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    50da:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    50dc:	4770      	bx	lr
    50de:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    50e0:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    50e2:	d313      	bcc.n	510c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    50e4:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    50e6:	d08d      	beq.n	5004 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    50e8:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    50ec:	d08a      	beq.n	5004 <memcpy+0xc>

	rsb	r3, #4
    50ee:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    50f2:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    50f4:	07db      	lsls	r3, r3, #31
	itt ne
    50f6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    50f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    50fc:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    5100:	d380      	bcc.n	5004 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    5102:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    5106:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    510a:	e77b      	b.n	5004 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    510c:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    510e:	d3d9      	bcc.n	50c4 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    5110:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    5112:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    5116:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    511a:	d2f9      	bcs.n	5110 <memcpy+0x118>

	ldrb	r3, [r1]
    511c:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    511e:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    5120:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    5122:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    5124:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    5126:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    5128:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    512a:	4770      	bx	lr

0000512c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    512c:	b4f0      	push	{r4, r5, r6, r7}
    512e:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    5130:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    5132:	4637      	mov	r7, r6
    5134:	e000      	b.n	5138 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    5136:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    5138:	fbb0 f3f2 	udiv	r3, r0, r2
    513c:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    5140:	f100 0437 	add.w	r4, r0, #55	; 0x37
    5144:	2809      	cmp	r0, #9
    5146:	f100 0030 	add.w	r0, r0, #48	; 0x30
    514a:	b2e4      	uxtb	r4, r4
    514c:	bf98      	it	ls
    514e:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    5150:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    5152:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    5156:	2b00      	cmp	r3, #0
    5158:	d1ed      	bne.n	5136 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    515a:	194a      	adds	r2, r1, r5
    515c:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    515e:	b14d      	cbz	r5, 5174 <ultoa+0x48>
    5160:	3301      	adds	r3, #1
		t = buf[j];
    5162:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    5166:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    5168:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    516a:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    516c:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    516e:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    5172:	dbf5      	blt.n	5160 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    5174:	4608      	mov	r0, r1
    5176:	bcf0      	pop	{r4, r5, r6, r7}
    5178:	4770      	bx	lr
    517a:	bf00      	nop

0000517c <pwm_init>:
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    517c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    5180:	4fdb      	ldr	r7, [pc, #876]	; (54f0 <pwm_init+0x374>)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    5182:	2300      	movs	r3, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    5184:	f8df e380 	ldr.w	lr, [pc, #896]	; 5508 <pwm_init+0x38c>
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    5188:	250f      	movs	r5, #15
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    518a:	6fba      	ldr	r2, [r7, #120]	; 0x78

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    518c:	f44f 4c70 	mov.w	ip, #61440	; 0xf000
    5190:	49d8      	ldr	r1, [pc, #864]	; (54f4 <pwm_init+0x378>)
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5192:	f44f 4660 	mov.w	r6, #57344	; 0xe000
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    5196:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    519a:	f44f 6480 	mov.w	r4, #1024	; 0x400
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    519e:	f248 20b8 	movw	r0, #33464	; 0x82b8
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    51a2:	67ba      	str	r2, [r7, #120]	; 0x78
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    51a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    51a8:	ea42 0e0e 	orr.w	lr, r2, lr
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    51ac:	4ad2      	ldr	r2, [pc, #840]	; (54f8 <pwm_init+0x37c>)
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    51ae:	f8c7 e080 	str.w	lr, [r7, #128]	; 0x80

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    51b2:	f241 0e01 	movw	lr, #4097	; 0x1001

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    51b6:	f8a1 c18c 	strh.w	ip, [r1, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    51ba:	f8a1 518e 	strh.w	r5, [r1, #398]	; 0x18e
	p->FFILT0 = 0;
    51be:	f8a1 3190 	strh.w	r3, [r1, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    51c2:	f8b1 7188 	ldrh.w	r7, [r1, #392]	; 0x188
    51c6:	b2bf      	uxth	r7, r7
    51c8:	f047 07f0 	orr.w	r7, r7, #240	; 0xf0
    51cc:	f8a1 7188 	strh.w	r7, [r1, #392]	; 0x188
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    51d0:	f645 57c0 	movw	r7, #24000	; 0x5dc0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    51d4:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    51d6:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    51d8:	844b      	strh	r3, [r1, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    51da:	860b      	strh	r3, [r1, #48]	; 0x30
		p->SM[i].INIT = 0;
    51dc:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    51de:	814b      	strh	r3, [r1, #10]
		p->SM[i].VAL1 = 33464;
    51e0:	81c8      	strh	r0, [r1, #14]
		p->SM[i].VAL2 = 0;
    51e2:	824b      	strh	r3, [r1, #18]
		p->SM[i].VAL3 = 0;
    51e4:	82cb      	strh	r3, [r1, #22]
		p->SM[i].VAL4 = 0;
    51e6:	834b      	strh	r3, [r1, #26]
		p->SM[i].VAL5 = 0;
    51e8:	83cb      	strh	r3, [r1, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    51ea:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    51ec:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    51ee:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    51f2:	f8a1 3090 	strh.w	r3, [r1, #144]	; 0x90
		p->SM[i].INIT = 0;
    51f6:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    51f8:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    51fc:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    5200:	f8a1 3072 	strh.w	r3, [r1, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    5204:	f8a1 3076 	strh.w	r3, [r1, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    5208:	f8a1 307a 	strh.w	r3, [r1, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    520c:	f8a1 307e 	strh.w	r3, [r1, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5210:	f8a2 6064 	strh.w	r6, [r2, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    5214:	f8a2 4066 	strh.w	r4, [r2, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    5218:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    521c:	f8a1 30f0 	strh.w	r3, [r1, #240]	; 0xf0
		p->SM[i].INIT = 0;
    5220:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    5224:	f8a1 30ca 	strh.w	r3, [r1, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    5228:	f8a1 00ce 	strh.w	r0, [r1, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    522c:	f8a1 30d2 	strh.w	r3, [r1, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    5230:	f8a1 30d6 	strh.w	r3, [r1, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    5234:	f8a1 30da 	strh.w	r3, [r1, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    5238:	f8a1 30de 	strh.w	r3, [r1, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    523c:	f8a2 60c4 	strh.w	r6, [r2, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    5240:	f8a2 40c6 	strh.w	r4, [r2, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    5244:	f8a1 3142 	strh.w	r3, [r1, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    5248:	f8a1 3150 	strh.w	r3, [r1, #336]	; 0x150
		p->SM[i].INIT = 0;
    524c:	f8a2 30c2 	strh.w	r3, [r2, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    5250:	f8a1 312a 	strh.w	r3, [r1, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    5254:	f8a1 012e 	strh.w	r0, [r1, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    5258:	f8a1 3132 	strh.w	r3, [r1, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    525c:	f8a1 3136 	strh.w	r3, [r1, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    5260:	f8a1 313a 	strh.w	r3, [r1, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    5264:	f8a1 313e 	strh.w	r3, [r1, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    5268:	f8b1 2188 	ldrh.w	r2, [r1, #392]	; 0x188
    526c:	b292      	uxth	r2, r2
    526e:	432a      	orrs	r2, r5
    5270:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    5274:	f8b1 8188 	ldrh.w	r8, [r1, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    5278:	4aa0      	ldr	r2, [pc, #640]	; (54fc <pwm_init+0x380>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    527a:	fa1f f888 	uxth.w	r8, r8
    527e:	f448 6870 	orr.w	r8, r8, #3840	; 0xf00
    5282:	f8a1 8188 	strh.w	r8, [r1, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5286:	f501 4180 	add.w	r1, r1, #16384	; 0x4000

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    528a:	f8a2 c18c 	strh.w	ip, [r2, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    528e:	f8a2 518e 	strh.w	r5, [r2, #398]	; 0x18e
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5292:	3160      	adds	r1, #96	; 0x60
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    5294:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    5298:	f8b2 8188 	ldrh.w	r8, [r2, #392]	; 0x188
    529c:	fa1f f888 	uxth.w	r8, r8
    52a0:	f048 08f0 	orr.w	r8, r8, #240	; 0xf0
    52a4:	f8a2 8188 	strh.w	r8, [r2, #392]	; 0x188
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    52a8:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    52aa:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    52ac:	8453      	strh	r3, [r2, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    52ae:	8613      	strh	r3, [r2, #48]	; 0x30
		p->SM[i].INIT = 0;
    52b0:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    52b2:	8153      	strh	r3, [r2, #10]
		p->SM[i].VAL1 = 33464;
    52b4:	81d0      	strh	r0, [r2, #14]
		p->SM[i].VAL2 = 0;
    52b6:	8253      	strh	r3, [r2, #18]
		p->SM[i].VAL3 = 0;
    52b8:	82d3      	strh	r3, [r2, #22]
		p->SM[i].VAL4 = 0;
    52ba:	8353      	strh	r3, [r2, #26]
		p->SM[i].VAL5 = 0;
    52bc:	83d3      	strh	r3, [r2, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    52be:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    52c0:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    52c2:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    52c6:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
		p->SM[i].INIT = 0;
    52ca:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    52cc:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    52d0:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    52d4:	f8a2 3072 	strh.w	r3, [r2, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    52d8:	f8a2 3076 	strh.w	r3, [r2, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    52dc:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    52e0:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    52e4:	f8a1 6064 	strh.w	r6, [r1, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    52e8:	f8a1 4066 	strh.w	r4, [r1, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    52ec:	f8a2 30e2 	strh.w	r3, [r2, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    52f0:	f8a2 30f0 	strh.w	r3, [r2, #240]	; 0xf0
		p->SM[i].INIT = 0;
    52f4:	f8a1 3062 	strh.w	r3, [r1, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    52f8:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    52fc:	f8a2 00ce 	strh.w	r0, [r2, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    5300:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    5304:	f8a2 30d6 	strh.w	r3, [r2, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    5308:	f8a2 30da 	strh.w	r3, [r2, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    530c:	f8a2 30de 	strh.w	r3, [r2, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5310:	f8a1 60c4 	strh.w	r6, [r1, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    5314:	f8a1 40c6 	strh.w	r4, [r1, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    5318:	f8a2 3142 	strh.w	r3, [r2, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    531c:	f8a2 3150 	strh.w	r3, [r2, #336]	; 0x150
		p->SM[i].INIT = 0;
    5320:	f8a1 30c2 	strh.w	r3, [r1, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    5324:	f8a2 312a 	strh.w	r3, [r2, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    5328:	f8a2 012e 	strh.w	r0, [r2, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    532c:	f8a2 3132 	strh.w	r3, [r2, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    5330:	f8a2 3136 	strh.w	r3, [r2, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    5334:	f8a2 313a 	strh.w	r3, [r2, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    5338:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    533c:	f8b2 1188 	ldrh.w	r1, [r2, #392]	; 0x188
    5340:	b289      	uxth	r1, r1
    5342:	4329      	orrs	r1, r5
    5344:	f8a2 1188 	strh.w	r1, [r2, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    5348:	f8b2 8188 	ldrh.w	r8, [r2, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    534c:	496c      	ldr	r1, [pc, #432]	; (5500 <pwm_init+0x384>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    534e:	fa1f f888 	uxth.w	r8, r8
    5352:	f448 6870 	orr.w	r8, r8, #3840	; 0xf00
    5356:	f8a2 8188 	strh.w	r8, [r2, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    535a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    535e:	f8a1 c18c 	strh.w	ip, [r1, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    5362:	f8a1 518e 	strh.w	r5, [r1, #398]	; 0x18e
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5366:	3260      	adds	r2, #96	; 0x60
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    5368:	f8a1 3190 	strh.w	r3, [r1, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    536c:	f8b1 8188 	ldrh.w	r8, [r1, #392]	; 0x188
    5370:	fa1f f888 	uxth.w	r8, r8
    5374:	f048 08f0 	orr.w	r8, r8, #240	; 0xf0
    5378:	f8a1 8188 	strh.w	r8, [r1, #392]	; 0x188
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    537c:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    537e:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    5380:	844b      	strh	r3, [r1, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    5382:	860b      	strh	r3, [r1, #48]	; 0x30
		p->SM[i].INIT = 0;
    5384:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    5386:	814b      	strh	r3, [r1, #10]
		p->SM[i].VAL1 = 33464;
    5388:	81c8      	strh	r0, [r1, #14]
		p->SM[i].VAL2 = 0;
    538a:	824b      	strh	r3, [r1, #18]
		p->SM[i].VAL3 = 0;
    538c:	82cb      	strh	r3, [r1, #22]
		p->SM[i].VAL4 = 0;
    538e:	834b      	strh	r3, [r1, #26]
		p->SM[i].VAL5 = 0;
    5390:	83cb      	strh	r3, [r1, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5392:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    5394:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    5396:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    539a:	f8a1 3090 	strh.w	r3, [r1, #144]	; 0x90
		p->SM[i].INIT = 0;
    539e:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    53a0:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    53a4:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    53a8:	f8a1 3072 	strh.w	r3, [r1, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    53ac:	f8a1 3076 	strh.w	r3, [r1, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    53b0:	f8a1 307a 	strh.w	r3, [r1, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    53b4:	f8a1 307e 	strh.w	r3, [r1, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    53b8:	f8a2 6064 	strh.w	r6, [r2, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    53bc:	f8a2 4066 	strh.w	r4, [r2, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    53c0:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    53c4:	f8a1 30f0 	strh.w	r3, [r1, #240]	; 0xf0
		p->SM[i].INIT = 0;
    53c8:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    53cc:	f8a1 30ca 	strh.w	r3, [r1, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    53d0:	f8a1 00ce 	strh.w	r0, [r1, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    53d4:	f8a1 30d2 	strh.w	r3, [r1, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    53d8:	f8a1 30d6 	strh.w	r3, [r1, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    53dc:	f8a1 30da 	strh.w	r3, [r1, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    53e0:	f8a1 30de 	strh.w	r3, [r1, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    53e4:	f8a2 60c4 	strh.w	r6, [r2, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    53e8:	f8a2 40c6 	strh.w	r4, [r2, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    53ec:	f8a1 3142 	strh.w	r3, [r1, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    53f0:	f8a1 3150 	strh.w	r3, [r1, #336]	; 0x150
		p->SM[i].INIT = 0;
    53f4:	f8a2 30c2 	strh.w	r3, [r2, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    53f8:	f8a1 312a 	strh.w	r3, [r1, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    53fc:	f8a1 012e 	strh.w	r0, [r1, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    5400:	f8a1 3132 	strh.w	r3, [r1, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    5404:	f8a1 3136 	strh.w	r3, [r1, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    5408:	f8a1 313a 	strh.w	r3, [r1, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    540c:	f8a1 313e 	strh.w	r3, [r1, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    5410:	f8b1 2188 	ldrh.w	r2, [r1, #392]	; 0x188
    5414:	b292      	uxth	r2, r2
    5416:	432a      	orrs	r2, r5
    5418:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    541c:	f8b1 8188 	ldrh.w	r8, [r1, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    5420:	4a38      	ldr	r2, [pc, #224]	; (5504 <pwm_init+0x388>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    5422:	fa1f f888 	uxth.w	r8, r8
    5426:	f448 6870 	orr.w	r8, r8, #3840	; 0xf00
    542a:	f8a1 8188 	strh.w	r8, [r1, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    542e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    5432:	f8a2 c18c 	strh.w	ip, [r2, #396]	; 0x18c
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5436:	f243 0c26 	movw	ip, #12326	; 0x3026
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    543a:	f8a2 518e 	strh.w	r5, [r2, #398]	; 0x18e
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    543e:	3160      	adds	r1, #96	; 0x60
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    5440:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    5444:	f8b2 8188 	ldrh.w	r8, [r2, #392]	; 0x188
    5448:	fa1f f888 	uxth.w	r8, r8
    544c:	f048 08f0 	orr.w	r8, r8, #240	; 0xf0
    5450:	f8a2 8188 	strh.w	r8, [r2, #392]	; 0x188
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5454:	8096      	strh	r6, [r2, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    5456:	80d4      	strh	r4, [r2, #6]
		p->SM[i].OCTRL = 0;
    5458:	8453      	strh	r3, [r2, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    545a:	8613      	strh	r3, [r2, #48]	; 0x30
		p->SM[i].INIT = 0;
    545c:	8053      	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    545e:	8153      	strh	r3, [r2, #10]
		p->SM[i].VAL1 = 33464;
    5460:	81d0      	strh	r0, [r2, #14]
		p->SM[i].VAL2 = 0;
    5462:	8253      	strh	r3, [r2, #18]
		p->SM[i].VAL3 = 0;
    5464:	82d3      	strh	r3, [r2, #22]
		p->SM[i].VAL4 = 0;
    5466:	8353      	strh	r3, [r2, #26]
		p->SM[i].VAL5 = 0;
    5468:	83d3      	strh	r3, [r2, #30]
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    546a:	808e      	strh	r6, [r1, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    546c:	80cc      	strh	r4, [r1, #6]
		p->SM[i].OCTRL = 0;
    546e:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    5472:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
		p->SM[i].INIT = 0;
    5476:	804b      	strh	r3, [r1, #2]
		p->SM[i].VAL0 = 0;
    5478:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    547c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    5480:	f8a2 3072 	strh.w	r3, [r2, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    5484:	f8a2 3076 	strh.w	r3, [r2, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    5488:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    548c:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5490:	f8a1 6064 	strh.w	r6, [r1, #100]	; 0x64
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    5494:	f8a1 4066 	strh.w	r4, [r1, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    5498:	f8a2 30e2 	strh.w	r3, [r2, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    549c:	f8a2 30f0 	strh.w	r3, [r2, #240]	; 0xf0
		p->SM[i].INIT = 0;
    54a0:	f8a1 3062 	strh.w	r3, [r1, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    54a4:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    54a8:	f8a2 00ce 	strh.w	r0, [r2, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    54ac:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    54b0:	f8a2 30d6 	strh.w	r3, [r2, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    54b4:	f8a2 30da 	strh.w	r3, [r2, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    54b8:	f8a2 30de 	strh.w	r3, [r2, #222]	; 0xde
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    54bc:	f8a1 60c4 	strh.w	r6, [r1, #196]	; 0xc4
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    54c0:	f8a1 40c6 	strh.w	r4, [r1, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    54c4:	f8a2 3142 	strh.w	r3, [r2, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    54c8:	f8a2 3150 	strh.w	r3, [r2, #336]	; 0x150
		p->SM[i].INIT = 0;
    54cc:	f8a1 30c2 	strh.w	r3, [r1, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    54d0:	f8a2 312a 	strh.w	r3, [r2, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    54d4:	f8a2 012e 	strh.w	r0, [r2, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    54d8:	f8a2 3132 	strh.w	r3, [r2, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    54dc:	f8a2 3136 	strh.w	r3, [r2, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    54e0:	f8a2 313a 	strh.w	r3, [r2, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    54e4:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    54e8:	f8b2 1188 	ldrh.w	r1, [r2, #392]	; 0x188
    54ec:	e00e      	b.n	550c <pwm_init+0x390>
    54ee:	bf00      	nop
    54f0:	400fc000 	.word	0x400fc000
    54f4:	403dc000 	.word	0x403dc000
    54f8:	403dc060 	.word	0x403dc060
    54fc:	403e0000 	.word	0x403e0000
    5500:	403e4000 	.word	0x403e4000
    5504:	403e8000 	.word	0x403e8000
    5508:	fc030000 	.word	0xfc030000
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    550c:	4c57      	ldr	r4, [pc, #348]	; (566c <pwm_init+0x4f0>)
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    550e:	b289      	uxth	r1, r1
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    5510:	4857      	ldr	r0, [pc, #348]	; (5670 <pwm_init+0x4f4>)
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5512:	f8df 816c 	ldr.w	r8, [pc, #364]	; 5680 <pwm_init+0x504>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    5516:	4329      	orrs	r1, r5
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5518:	4e56      	ldr	r6, [pc, #344]	; (5674 <pwm_init+0x4f8>)
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    551a:	f8a2 1188 	strh.w	r1, [r2, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    551e:	f8b2 9188 	ldrh.w	r9, [r2, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    5522:	4955      	ldr	r1, [pc, #340]	; (5678 <pwm_init+0x4fc>)
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    5524:	fa1f f989 	uxth.w	r9, r9
    5528:	f449 6970 	orr.w	r9, r9, #3840	; 0xf00
    552c:	f8a2 9188 	strh.w	r9, [r2, #392]	; 0x188
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5530:	4a52      	ldr	r2, [pc, #328]	; (567c <pwm_init+0x500>)
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    5532:	81a3      	strh	r3, [r4, #12]
		p->CH[i].CNTR = 0;
    5534:	8163      	strh	r3, [r4, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5536:	81e5      	strh	r5, [r4, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5538:	f8a4 e014 	strh.w	lr, [r4, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    553c:	80e7      	strh	r7, [r4, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    553e:	8023      	strh	r3, [r4, #0]
		p->CH[i].CMPLD1 = 0;
    5540:	8223      	strh	r3, [r4, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5542:	f8a4 c00c 	strh.w	ip, [r4, #12]
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    5546:	85a3      	strh	r3, [r4, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    5548:	8563      	strh	r3, [r4, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    554a:	85e5      	strh	r5, [r4, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    554c:	f8a4 e034 	strh.w	lr, [r4, #52]	; 0x34
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5550:	f8a8 7006 	strh.w	r7, [r8, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    5554:	f8a8 3000 	strh.w	r3, [r8]
		p->CH[i].CMPLD1 = 0;
    5558:	8623      	strh	r3, [r4, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    555a:	f8a4 c02c 	strh.w	ip, [r4, #44]	; 0x2c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    555e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    5562:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5566:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    556a:	f8a4 e054 	strh.w	lr, [r4, #84]	; 0x54
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    556e:	f8a8 7026 	strh.w	r7, [r8, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    5572:	f8a8 3020 	strh.w	r3, [r8, #32]
		p->CH[i].CMPLD1 = 0;
    5576:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    557a:	f8a4 c04c 	strh.w	ip, [r4, #76]	; 0x4c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    557e:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    5582:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5586:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    558a:	f8a4 e074 	strh.w	lr, [r4, #116]	; 0x74
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    558e:	f8a8 7046 	strh.w	r7, [r8, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    5592:	f8a8 3040 	strh.w	r3, [r8, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    5596:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    559a:	f8a4 c06c 	strh.w	ip, [r4, #108]	; 0x6c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    559e:	8183      	strh	r3, [r0, #12]
		p->CH[i].CNTR = 0;
    55a0:	8143      	strh	r3, [r0, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    55a2:	81c5      	strh	r5, [r0, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    55a4:	f8a0 e014 	strh.w	lr, [r0, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    55a8:	80c7      	strh	r7, [r0, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    55aa:	8003      	strh	r3, [r0, #0]
		p->CH[i].CMPLD1 = 0;
    55ac:	8203      	strh	r3, [r0, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    55ae:	f8a0 c00c 	strh.w	ip, [r0, #12]
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    55b2:	8583      	strh	r3, [r0, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    55b4:	8543      	strh	r3, [r0, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    55b6:	85c5      	strh	r5, [r0, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    55b8:	f8a0 e034 	strh.w	lr, [r0, #52]	; 0x34
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    55bc:	80f7      	strh	r7, [r6, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    55be:	8033      	strh	r3, [r6, #0]
		p->CH[i].CMPLD1 = 0;
    55c0:	8603      	strh	r3, [r0, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    55c2:	f8a0 c02c 	strh.w	ip, [r0, #44]	; 0x2c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    55c6:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    55ca:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    55ce:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    55d2:	f8a0 e054 	strh.w	lr, [r0, #84]	; 0x54
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    55d6:	84f7      	strh	r7, [r6, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    55d8:	8433      	strh	r3, [r6, #32]
		p->CH[i].CMPLD1 = 0;
    55da:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    55de:	f8a0 c04c 	strh.w	ip, [r0, #76]	; 0x4c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    55e2:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    55e6:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    55ea:	f8a0 506e 	strh.w	r5, [r0, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    55ee:	f8a0 e074 	strh.w	lr, [r0, #116]	; 0x74
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    55f2:	f8a6 7046 	strh.w	r7, [r6, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    55f6:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    55fa:	f8a0 3070 	strh.w	r3, [r0, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    55fe:	f8a0 c06c 	strh.w	ip, [r0, #108]	; 0x6c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    5602:	818b      	strh	r3, [r1, #12]
		p->CH[i].CNTR = 0;
    5604:	814b      	strh	r3, [r1, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5606:	81cd      	strh	r5, [r1, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5608:	f8a1 e014 	strh.w	lr, [r1, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    560c:	80cf      	strh	r7, [r1, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    560e:	800b      	strh	r3, [r1, #0]
		p->CH[i].CMPLD1 = 0;
    5610:	820b      	strh	r3, [r1, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5612:	f8a1 c00c 	strh.w	ip, [r1, #12]
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    5616:	858b      	strh	r3, [r1, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    5618:	854b      	strh	r3, [r1, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    561a:	85cd      	strh	r5, [r1, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    561c:	f8a1 e034 	strh.w	lr, [r1, #52]	; 0x34
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5620:	80d7      	strh	r7, [r2, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    5622:	8013      	strh	r3, [r2, #0]
		p->CH[i].CMPLD1 = 0;
    5624:	860b      	strh	r3, [r1, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5626:	f8a1 c02c 	strh.w	ip, [r1, #44]	; 0x2c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    562a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    562e:	f8a1 304a 	strh.w	r3, [r1, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5632:	f8a1 504e 	strh.w	r5, [r1, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5636:	f8a1 e054 	strh.w	lr, [r1, #84]	; 0x54
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    563a:	84d7      	strh	r7, [r2, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    563c:	8413      	strh	r3, [r2, #32]
		p->CH[i].CMPLD1 = 0;
    563e:	f8a1 3050 	strh.w	r3, [r1, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5642:	f8a1 c04c 	strh.w	ip, [r1, #76]	; 0x4c
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    5646:	f8a1 306c 	strh.w	r3, [r1, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    564a:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    564e:	f8a1 506e 	strh.w	r5, [r1, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5652:	f8a1 e074 	strh.w	lr, [r1, #116]	; 0x74
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5656:	f8a2 7046 	strh.w	r7, [r2, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    565a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    565e:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5662:	f8a1 c06c 	strh.w	ip, [r1, #108]	; 0x6c
    5666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    566a:	bf00      	nop
    566c:	401dc000 	.word	0x401dc000
    5670:	401e0000 	.word	0x401e0000
    5674:	401e0020 	.word	0x401e0020
    5678:	401e4000 	.word	0x401e4000
    567c:	401e4020 	.word	0x401e4020
    5680:	401dc020 	.word	0x401dc020

00005684 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    5684:	4770      	bx	lr
    5686:	bf00      	nop

00005688 <__aeabi_atexit>:
    5688:	460b      	mov	r3, r1
    568a:	4601      	mov	r1, r0
    568c:	4618      	mov	r0, r3
    568e:	f000 b801 	b.w	5694 <__cxa_atexit>
    5692:	bf00      	nop

00005694 <__cxa_atexit>:
    5694:	4613      	mov	r3, r2
    5696:	460a      	mov	r2, r1
    5698:	4601      	mov	r1, r0
    569a:	2002      	movs	r0, #2
    569c:	f000 bbde 	b.w	5e5c <__register_exitproc>

000056a0 <__errno>:
    56a0:	4b01      	ldr	r3, [pc, #4]	; (56a8 <__errno+0x8>)
    56a2:	6818      	ldr	r0, [r3, #0]
    56a4:	4770      	bx	lr
    56a6:	bf00      	nop
    56a8:	20000be8 	.word	0x20000be8

000056ac <__libc_init_array>:
    56ac:	b570      	push	{r4, r5, r6, lr}
    56ae:	4e0f      	ldr	r6, [pc, #60]	; (56ec <__libc_init_array+0x40>)
    56b0:	4d0f      	ldr	r5, [pc, #60]	; (56f0 <__libc_init_array+0x44>)
    56b2:	1b76      	subs	r6, r6, r5
    56b4:	10b6      	asrs	r6, r6, #2
    56b6:	bf18      	it	ne
    56b8:	2400      	movne	r4, #0
    56ba:	d005      	beq.n	56c8 <__libc_init_array+0x1c>
    56bc:	3401      	adds	r4, #1
    56be:	f855 3b04 	ldr.w	r3, [r5], #4
    56c2:	4798      	blx	r3
    56c4:	42a6      	cmp	r6, r4
    56c6:	d1f9      	bne.n	56bc <__libc_init_array+0x10>
    56c8:	4e0a      	ldr	r6, [pc, #40]	; (56f4 <__libc_init_array+0x48>)
    56ca:	4d0b      	ldr	r5, [pc, #44]	; (56f8 <__libc_init_array+0x4c>)
    56cc:	1b76      	subs	r6, r6, r5
    56ce:	f000 fd4f 	bl	6170 <___init_veneer>
    56d2:	10b6      	asrs	r6, r6, #2
    56d4:	bf18      	it	ne
    56d6:	2400      	movne	r4, #0
    56d8:	d006      	beq.n	56e8 <__libc_init_array+0x3c>
    56da:	3401      	adds	r4, #1
    56dc:	f855 3b04 	ldr.w	r3, [r5], #4
    56e0:	4798      	blx	r3
    56e2:	42a6      	cmp	r6, r4
    56e4:	d1f9      	bne.n	56da <__libc_init_array+0x2e>
    56e6:	bd70      	pop	{r4, r5, r6, pc}
    56e8:	bd70      	pop	{r4, r5, r6, pc}
    56ea:	bf00      	nop
    56ec:	60001b00 	.word	0x60001b00
    56f0:	60001b00 	.word	0x60001b00
    56f4:	60001b1c 	.word	0x60001b1c
    56f8:	60001b00 	.word	0x60001b00

000056fc <malloc>:
    56fc:	4b02      	ldr	r3, [pc, #8]	; (5708 <malloc+0xc>)
    56fe:	4601      	mov	r1, r0
    5700:	6818      	ldr	r0, [r3, #0]
    5702:	f000 b80b 	b.w	571c <_malloc_r>
    5706:	bf00      	nop
    5708:	20000be8 	.word	0x20000be8

0000570c <free>:
    570c:	4b02      	ldr	r3, [pc, #8]	; (5718 <free+0xc>)
    570e:	4601      	mov	r1, r0
    5710:	6818      	ldr	r0, [r3, #0]
    5712:	f000 bc43 	b.w	5f9c <_free_r>
    5716:	bf00      	nop
    5718:	20000be8 	.word	0x20000be8

0000571c <_malloc_r>:
    571c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5720:	f101 050b 	add.w	r5, r1, #11
    5724:	2d16      	cmp	r5, #22
    5726:	b083      	sub	sp, #12
    5728:	4606      	mov	r6, r0
    572a:	f240 809f 	bls.w	586c <_malloc_r+0x150>
    572e:	f035 0507 	bics.w	r5, r5, #7
    5732:	f100 80bf 	bmi.w	58b4 <_malloc_r+0x198>
    5736:	42a9      	cmp	r1, r5
    5738:	f200 80bc 	bhi.w	58b4 <_malloc_r+0x198>
    573c:	f000 faf4 	bl	5d28 <__malloc_lock>
    5740:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    5744:	f0c0 829c 	bcc.w	5c80 <_malloc_r+0x564>
    5748:	0a6b      	lsrs	r3, r5, #9
    574a:	f000 80ba 	beq.w	58c2 <_malloc_r+0x1a6>
    574e:	2b04      	cmp	r3, #4
    5750:	f200 8183 	bhi.w	5a5a <_malloc_r+0x33e>
    5754:	09a8      	lsrs	r0, r5, #6
    5756:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    575a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    575e:	3038      	adds	r0, #56	; 0x38
    5760:	4fc4      	ldr	r7, [pc, #784]	; (5a74 <_malloc_r+0x358>)
    5762:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    5766:	f1a3 0108 	sub.w	r1, r3, #8
    576a:	685c      	ldr	r4, [r3, #4]
    576c:	42a1      	cmp	r1, r4
    576e:	d107      	bne.n	5780 <_malloc_r+0x64>
    5770:	e0ac      	b.n	58cc <_malloc_r+0x1b0>
    5772:	2a00      	cmp	r2, #0
    5774:	f280 80ac 	bge.w	58d0 <_malloc_r+0x1b4>
    5778:	68e4      	ldr	r4, [r4, #12]
    577a:	42a1      	cmp	r1, r4
    577c:	f000 80a6 	beq.w	58cc <_malloc_r+0x1b0>
    5780:	6863      	ldr	r3, [r4, #4]
    5782:	f023 0303 	bic.w	r3, r3, #3
    5786:	1b5a      	subs	r2, r3, r5
    5788:	2a0f      	cmp	r2, #15
    578a:	ddf2      	ble.n	5772 <_malloc_r+0x56>
    578c:	49b9      	ldr	r1, [pc, #740]	; (5a74 <_malloc_r+0x358>)
    578e:	693c      	ldr	r4, [r7, #16]
    5790:	f101 0e08 	add.w	lr, r1, #8
    5794:	4574      	cmp	r4, lr
    5796:	f000 81b3 	beq.w	5b00 <_malloc_r+0x3e4>
    579a:	6863      	ldr	r3, [r4, #4]
    579c:	f023 0303 	bic.w	r3, r3, #3
    57a0:	1b5a      	subs	r2, r3, r5
    57a2:	2a0f      	cmp	r2, #15
    57a4:	f300 8199 	bgt.w	5ada <_malloc_r+0x3be>
    57a8:	2a00      	cmp	r2, #0
    57aa:	f8c1 e014 	str.w	lr, [r1, #20]
    57ae:	f8c1 e010 	str.w	lr, [r1, #16]
    57b2:	f280 809e 	bge.w	58f2 <_malloc_r+0x1d6>
    57b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    57ba:	f080 8167 	bcs.w	5a8c <_malloc_r+0x370>
    57be:	08db      	lsrs	r3, r3, #3
    57c0:	f103 0c01 	add.w	ip, r3, #1
    57c4:	2201      	movs	r2, #1
    57c6:	109b      	asrs	r3, r3, #2
    57c8:	fa02 f303 	lsl.w	r3, r2, r3
    57cc:	684a      	ldr	r2, [r1, #4]
    57ce:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    57d2:	f8c4 8008 	str.w	r8, [r4, #8]
    57d6:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    57da:	431a      	orrs	r2, r3
    57dc:	f1a9 0308 	sub.w	r3, r9, #8
    57e0:	60e3      	str	r3, [r4, #12]
    57e2:	604a      	str	r2, [r1, #4]
    57e4:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    57e8:	f8c8 400c 	str.w	r4, [r8, #12]
    57ec:	1083      	asrs	r3, r0, #2
    57ee:	2401      	movs	r4, #1
    57f0:	409c      	lsls	r4, r3
    57f2:	4294      	cmp	r4, r2
    57f4:	f200 808a 	bhi.w	590c <_malloc_r+0x1f0>
    57f8:	4214      	tst	r4, r2
    57fa:	d106      	bne.n	580a <_malloc_r+0xee>
    57fc:	f020 0003 	bic.w	r0, r0, #3
    5800:	0064      	lsls	r4, r4, #1
    5802:	4214      	tst	r4, r2
    5804:	f100 0004 	add.w	r0, r0, #4
    5808:	d0fa      	beq.n	5800 <_malloc_r+0xe4>
    580a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    580e:	46cc      	mov	ip, r9
    5810:	4680      	mov	r8, r0
    5812:	f8dc 100c 	ldr.w	r1, [ip, #12]
    5816:	458c      	cmp	ip, r1
    5818:	d107      	bne.n	582a <_malloc_r+0x10e>
    581a:	e173      	b.n	5b04 <_malloc_r+0x3e8>
    581c:	2a00      	cmp	r2, #0
    581e:	f280 8181 	bge.w	5b24 <_malloc_r+0x408>
    5822:	68c9      	ldr	r1, [r1, #12]
    5824:	458c      	cmp	ip, r1
    5826:	f000 816d 	beq.w	5b04 <_malloc_r+0x3e8>
    582a:	684b      	ldr	r3, [r1, #4]
    582c:	f023 0303 	bic.w	r3, r3, #3
    5830:	1b5a      	subs	r2, r3, r5
    5832:	2a0f      	cmp	r2, #15
    5834:	ddf2      	ble.n	581c <_malloc_r+0x100>
    5836:	460c      	mov	r4, r1
    5838:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    583c:	f854 8f08 	ldr.w	r8, [r4, #8]!
    5840:	194b      	adds	r3, r1, r5
    5842:	f045 0501 	orr.w	r5, r5, #1
    5846:	604d      	str	r5, [r1, #4]
    5848:	f042 0101 	orr.w	r1, r2, #1
    584c:	f8c8 c00c 	str.w	ip, [r8, #12]
    5850:	4630      	mov	r0, r6
    5852:	f8cc 8008 	str.w	r8, [ip, #8]
    5856:	617b      	str	r3, [r7, #20]
    5858:	613b      	str	r3, [r7, #16]
    585a:	f8c3 e00c 	str.w	lr, [r3, #12]
    585e:	f8c3 e008 	str.w	lr, [r3, #8]
    5862:	6059      	str	r1, [r3, #4]
    5864:	509a      	str	r2, [r3, r2]
    5866:	f000 fa61 	bl	5d2c <__malloc_unlock>
    586a:	e01f      	b.n	58ac <_malloc_r+0x190>
    586c:	2910      	cmp	r1, #16
    586e:	d821      	bhi.n	58b4 <_malloc_r+0x198>
    5870:	f000 fa5a 	bl	5d28 <__malloc_lock>
    5874:	2510      	movs	r5, #16
    5876:	2306      	movs	r3, #6
    5878:	2002      	movs	r0, #2
    587a:	4f7e      	ldr	r7, [pc, #504]	; (5a74 <_malloc_r+0x358>)
    587c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    5880:	f1a3 0208 	sub.w	r2, r3, #8
    5884:	685c      	ldr	r4, [r3, #4]
    5886:	4294      	cmp	r4, r2
    5888:	f000 8145 	beq.w	5b16 <_malloc_r+0x3fa>
    588c:	6863      	ldr	r3, [r4, #4]
    588e:	68e1      	ldr	r1, [r4, #12]
    5890:	68a5      	ldr	r5, [r4, #8]
    5892:	f023 0303 	bic.w	r3, r3, #3
    5896:	4423      	add	r3, r4
    5898:	4630      	mov	r0, r6
    589a:	685a      	ldr	r2, [r3, #4]
    589c:	60e9      	str	r1, [r5, #12]
    589e:	f042 0201 	orr.w	r2, r2, #1
    58a2:	608d      	str	r5, [r1, #8]
    58a4:	605a      	str	r2, [r3, #4]
    58a6:	f000 fa41 	bl	5d2c <__malloc_unlock>
    58aa:	3408      	adds	r4, #8
    58ac:	4620      	mov	r0, r4
    58ae:	b003      	add	sp, #12
    58b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58b4:	2400      	movs	r4, #0
    58b6:	230c      	movs	r3, #12
    58b8:	4620      	mov	r0, r4
    58ba:	6033      	str	r3, [r6, #0]
    58bc:	b003      	add	sp, #12
    58be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58c2:	2380      	movs	r3, #128	; 0x80
    58c4:	f04f 0e40 	mov.w	lr, #64	; 0x40
    58c8:	203f      	movs	r0, #63	; 0x3f
    58ca:	e749      	b.n	5760 <_malloc_r+0x44>
    58cc:	4670      	mov	r0, lr
    58ce:	e75d      	b.n	578c <_malloc_r+0x70>
    58d0:	4423      	add	r3, r4
    58d2:	68e1      	ldr	r1, [r4, #12]
    58d4:	685a      	ldr	r2, [r3, #4]
    58d6:	68a5      	ldr	r5, [r4, #8]
    58d8:	f042 0201 	orr.w	r2, r2, #1
    58dc:	60e9      	str	r1, [r5, #12]
    58de:	4630      	mov	r0, r6
    58e0:	608d      	str	r5, [r1, #8]
    58e2:	605a      	str	r2, [r3, #4]
    58e4:	f000 fa22 	bl	5d2c <__malloc_unlock>
    58e8:	3408      	adds	r4, #8
    58ea:	4620      	mov	r0, r4
    58ec:	b003      	add	sp, #12
    58ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58f2:	4423      	add	r3, r4
    58f4:	4630      	mov	r0, r6
    58f6:	685a      	ldr	r2, [r3, #4]
    58f8:	f042 0201 	orr.w	r2, r2, #1
    58fc:	605a      	str	r2, [r3, #4]
    58fe:	f000 fa15 	bl	5d2c <__malloc_unlock>
    5902:	3408      	adds	r4, #8
    5904:	4620      	mov	r0, r4
    5906:	b003      	add	sp, #12
    5908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    590c:	68bc      	ldr	r4, [r7, #8]
    590e:	6863      	ldr	r3, [r4, #4]
    5910:	f023 0803 	bic.w	r8, r3, #3
    5914:	45a8      	cmp	r8, r5
    5916:	d304      	bcc.n	5922 <_malloc_r+0x206>
    5918:	ebc5 0308 	rsb	r3, r5, r8
    591c:	2b0f      	cmp	r3, #15
    591e:	f300 808c 	bgt.w	5a3a <_malloc_r+0x31e>
    5922:	4b55      	ldr	r3, [pc, #340]	; (5a78 <_malloc_r+0x35c>)
    5924:	f8df 9160 	ldr.w	r9, [pc, #352]	; 5a88 <_malloc_r+0x36c>
    5928:	681a      	ldr	r2, [r3, #0]
    592a:	f8d9 3000 	ldr.w	r3, [r9]
    592e:	3301      	adds	r3, #1
    5930:	442a      	add	r2, r5
    5932:	eb04 0a08 	add.w	sl, r4, r8
    5936:	f000 8160 	beq.w	5bfa <_malloc_r+0x4de>
    593a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    593e:	320f      	adds	r2, #15
    5940:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    5944:	f022 020f 	bic.w	r2, r2, #15
    5948:	4611      	mov	r1, r2
    594a:	4630      	mov	r0, r6
    594c:	9201      	str	r2, [sp, #4]
    594e:	f000 f9ef 	bl	5d30 <_sbrk_r>
    5952:	f1b0 3fff 	cmp.w	r0, #4294967295
    5956:	4683      	mov	fp, r0
    5958:	9a01      	ldr	r2, [sp, #4]
    595a:	f000 8158 	beq.w	5c0e <_malloc_r+0x4f2>
    595e:	4582      	cmp	sl, r0
    5960:	f200 80fc 	bhi.w	5b5c <_malloc_r+0x440>
    5964:	4b45      	ldr	r3, [pc, #276]	; (5a7c <_malloc_r+0x360>)
    5966:	6819      	ldr	r1, [r3, #0]
    5968:	45da      	cmp	sl, fp
    596a:	4411      	add	r1, r2
    596c:	6019      	str	r1, [r3, #0]
    596e:	f000 8153 	beq.w	5c18 <_malloc_r+0x4fc>
    5972:	f8d9 0000 	ldr.w	r0, [r9]
    5976:	f8df e110 	ldr.w	lr, [pc, #272]	; 5a88 <_malloc_r+0x36c>
    597a:	3001      	adds	r0, #1
    597c:	bf1b      	ittet	ne
    597e:	ebca 0a0b 	rsbne	sl, sl, fp
    5982:	4451      	addne	r1, sl
    5984:	f8ce b000 	streq.w	fp, [lr]
    5988:	6019      	strne	r1, [r3, #0]
    598a:	f01b 0107 	ands.w	r1, fp, #7
    598e:	f000 8117 	beq.w	5bc0 <_malloc_r+0x4a4>
    5992:	f1c1 0008 	rsb	r0, r1, #8
    5996:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    599a:	4483      	add	fp, r0
    599c:	3108      	adds	r1, #8
    599e:	445a      	add	r2, fp
    59a0:	f3c2 020b 	ubfx	r2, r2, #0, #12
    59a4:	ebc2 0901 	rsb	r9, r2, r1
    59a8:	4649      	mov	r1, r9
    59aa:	4630      	mov	r0, r6
    59ac:	9301      	str	r3, [sp, #4]
    59ae:	f000 f9bf 	bl	5d30 <_sbrk_r>
    59b2:	1c43      	adds	r3, r0, #1
    59b4:	9b01      	ldr	r3, [sp, #4]
    59b6:	f000 813f 	beq.w	5c38 <_malloc_r+0x51c>
    59ba:	ebcb 0200 	rsb	r2, fp, r0
    59be:	444a      	add	r2, r9
    59c0:	f042 0201 	orr.w	r2, r2, #1
    59c4:	6819      	ldr	r1, [r3, #0]
    59c6:	f8c7 b008 	str.w	fp, [r7, #8]
    59ca:	4449      	add	r1, r9
    59cc:	42bc      	cmp	r4, r7
    59ce:	f8cb 2004 	str.w	r2, [fp, #4]
    59d2:	6019      	str	r1, [r3, #0]
    59d4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 5a7c <_malloc_r+0x360>
    59d8:	d016      	beq.n	5a08 <_malloc_r+0x2ec>
    59da:	f1b8 0f0f 	cmp.w	r8, #15
    59de:	f240 80fd 	bls.w	5bdc <_malloc_r+0x4c0>
    59e2:	6862      	ldr	r2, [r4, #4]
    59e4:	f1a8 030c 	sub.w	r3, r8, #12
    59e8:	f023 0307 	bic.w	r3, r3, #7
    59ec:	18e0      	adds	r0, r4, r3
    59ee:	f002 0201 	and.w	r2, r2, #1
    59f2:	f04f 0e05 	mov.w	lr, #5
    59f6:	431a      	orrs	r2, r3
    59f8:	2b0f      	cmp	r3, #15
    59fa:	6062      	str	r2, [r4, #4]
    59fc:	f8c0 e004 	str.w	lr, [r0, #4]
    5a00:	f8c0 e008 	str.w	lr, [r0, #8]
    5a04:	f200 811c 	bhi.w	5c40 <_malloc_r+0x524>
    5a08:	4b1d      	ldr	r3, [pc, #116]	; (5a80 <_malloc_r+0x364>)
    5a0a:	68bc      	ldr	r4, [r7, #8]
    5a0c:	681a      	ldr	r2, [r3, #0]
    5a0e:	4291      	cmp	r1, r2
    5a10:	bf88      	it	hi
    5a12:	6019      	strhi	r1, [r3, #0]
    5a14:	4b1b      	ldr	r3, [pc, #108]	; (5a84 <_malloc_r+0x368>)
    5a16:	681a      	ldr	r2, [r3, #0]
    5a18:	4291      	cmp	r1, r2
    5a1a:	6862      	ldr	r2, [r4, #4]
    5a1c:	bf88      	it	hi
    5a1e:	6019      	strhi	r1, [r3, #0]
    5a20:	f022 0203 	bic.w	r2, r2, #3
    5a24:	4295      	cmp	r5, r2
    5a26:	eba2 0305 	sub.w	r3, r2, r5
    5a2a:	d801      	bhi.n	5a30 <_malloc_r+0x314>
    5a2c:	2b0f      	cmp	r3, #15
    5a2e:	dc04      	bgt.n	5a3a <_malloc_r+0x31e>
    5a30:	4630      	mov	r0, r6
    5a32:	f000 f97b 	bl	5d2c <__malloc_unlock>
    5a36:	2400      	movs	r4, #0
    5a38:	e738      	b.n	58ac <_malloc_r+0x190>
    5a3a:	1962      	adds	r2, r4, r5
    5a3c:	f043 0301 	orr.w	r3, r3, #1
    5a40:	f045 0501 	orr.w	r5, r5, #1
    5a44:	6065      	str	r5, [r4, #4]
    5a46:	4630      	mov	r0, r6
    5a48:	60ba      	str	r2, [r7, #8]
    5a4a:	6053      	str	r3, [r2, #4]
    5a4c:	f000 f96e 	bl	5d2c <__malloc_unlock>
    5a50:	3408      	adds	r4, #8
    5a52:	4620      	mov	r0, r4
    5a54:	b003      	add	sp, #12
    5a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a5a:	2b14      	cmp	r3, #20
    5a5c:	d971      	bls.n	5b42 <_malloc_r+0x426>
    5a5e:	2b54      	cmp	r3, #84	; 0x54
    5a60:	f200 80a4 	bhi.w	5bac <_malloc_r+0x490>
    5a64:	0b28      	lsrs	r0, r5, #12
    5a66:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    5a6a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    5a6e:	306e      	adds	r0, #110	; 0x6e
    5a70:	e676      	b.n	5760 <_malloc_r+0x44>
    5a72:	bf00      	nop
    5a74:	20000bec 	.word	0x20000bec
    5a78:	20001df8 	.word	0x20001df8
    5a7c:	20001dfc 	.word	0x20001dfc
    5a80:	20001df4 	.word	0x20001df4
    5a84:	20001df0 	.word	0x20001df0
    5a88:	20000ff8 	.word	0x20000ff8
    5a8c:	0a5a      	lsrs	r2, r3, #9
    5a8e:	2a04      	cmp	r2, #4
    5a90:	d95e      	bls.n	5b50 <_malloc_r+0x434>
    5a92:	2a14      	cmp	r2, #20
    5a94:	f200 80b3 	bhi.w	5bfe <_malloc_r+0x4e2>
    5a98:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    5a9c:	0049      	lsls	r1, r1, #1
    5a9e:	325b      	adds	r2, #91	; 0x5b
    5aa0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    5aa4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    5aa8:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 5c88 <_malloc_r+0x56c>
    5aac:	f1ac 0c08 	sub.w	ip, ip, #8
    5ab0:	458c      	cmp	ip, r1
    5ab2:	f000 8088 	beq.w	5bc6 <_malloc_r+0x4aa>
    5ab6:	684a      	ldr	r2, [r1, #4]
    5ab8:	f022 0203 	bic.w	r2, r2, #3
    5abc:	4293      	cmp	r3, r2
    5abe:	d202      	bcs.n	5ac6 <_malloc_r+0x3aa>
    5ac0:	6889      	ldr	r1, [r1, #8]
    5ac2:	458c      	cmp	ip, r1
    5ac4:	d1f7      	bne.n	5ab6 <_malloc_r+0x39a>
    5ac6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    5aca:	687a      	ldr	r2, [r7, #4]
    5acc:	f8c4 c00c 	str.w	ip, [r4, #12]
    5ad0:	60a1      	str	r1, [r4, #8]
    5ad2:	f8cc 4008 	str.w	r4, [ip, #8]
    5ad6:	60cc      	str	r4, [r1, #12]
    5ad8:	e688      	b.n	57ec <_malloc_r+0xd0>
    5ada:	1963      	adds	r3, r4, r5
    5adc:	f042 0701 	orr.w	r7, r2, #1
    5ae0:	f045 0501 	orr.w	r5, r5, #1
    5ae4:	6065      	str	r5, [r4, #4]
    5ae6:	4630      	mov	r0, r6
    5ae8:	614b      	str	r3, [r1, #20]
    5aea:	610b      	str	r3, [r1, #16]
    5aec:	f8c3 e00c 	str.w	lr, [r3, #12]
    5af0:	f8c3 e008 	str.w	lr, [r3, #8]
    5af4:	605f      	str	r7, [r3, #4]
    5af6:	509a      	str	r2, [r3, r2]
    5af8:	3408      	adds	r4, #8
    5afa:	f000 f917 	bl	5d2c <__malloc_unlock>
    5afe:	e6d5      	b.n	58ac <_malloc_r+0x190>
    5b00:	684a      	ldr	r2, [r1, #4]
    5b02:	e673      	b.n	57ec <_malloc_r+0xd0>
    5b04:	f108 0801 	add.w	r8, r8, #1
    5b08:	f018 0f03 	tst.w	r8, #3
    5b0c:	f10c 0c08 	add.w	ip, ip, #8
    5b10:	f47f ae7f 	bne.w	5812 <_malloc_r+0xf6>
    5b14:	e030      	b.n	5b78 <_malloc_r+0x45c>
    5b16:	68dc      	ldr	r4, [r3, #12]
    5b18:	42a3      	cmp	r3, r4
    5b1a:	bf08      	it	eq
    5b1c:	3002      	addeq	r0, #2
    5b1e:	f43f ae35 	beq.w	578c <_malloc_r+0x70>
    5b22:	e6b3      	b.n	588c <_malloc_r+0x170>
    5b24:	440b      	add	r3, r1
    5b26:	460c      	mov	r4, r1
    5b28:	685a      	ldr	r2, [r3, #4]
    5b2a:	68c9      	ldr	r1, [r1, #12]
    5b2c:	f854 5f08 	ldr.w	r5, [r4, #8]!
    5b30:	f042 0201 	orr.w	r2, r2, #1
    5b34:	605a      	str	r2, [r3, #4]
    5b36:	4630      	mov	r0, r6
    5b38:	60e9      	str	r1, [r5, #12]
    5b3a:	608d      	str	r5, [r1, #8]
    5b3c:	f000 f8f6 	bl	5d2c <__malloc_unlock>
    5b40:	e6b4      	b.n	58ac <_malloc_r+0x190>
    5b42:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    5b46:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    5b4a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    5b4e:	e607      	b.n	5760 <_malloc_r+0x44>
    5b50:	099a      	lsrs	r2, r3, #6
    5b52:	f102 0139 	add.w	r1, r2, #57	; 0x39
    5b56:	0049      	lsls	r1, r1, #1
    5b58:	3238      	adds	r2, #56	; 0x38
    5b5a:	e7a1      	b.n	5aa0 <_malloc_r+0x384>
    5b5c:	42bc      	cmp	r4, r7
    5b5e:	4b4a      	ldr	r3, [pc, #296]	; (5c88 <_malloc_r+0x56c>)
    5b60:	f43f af00 	beq.w	5964 <_malloc_r+0x248>
    5b64:	689c      	ldr	r4, [r3, #8]
    5b66:	6862      	ldr	r2, [r4, #4]
    5b68:	f022 0203 	bic.w	r2, r2, #3
    5b6c:	e75a      	b.n	5a24 <_malloc_r+0x308>
    5b6e:	f859 3908 	ldr.w	r3, [r9], #-8
    5b72:	4599      	cmp	r9, r3
    5b74:	f040 8082 	bne.w	5c7c <_malloc_r+0x560>
    5b78:	f010 0f03 	tst.w	r0, #3
    5b7c:	f100 30ff 	add.w	r0, r0, #4294967295
    5b80:	d1f5      	bne.n	5b6e <_malloc_r+0x452>
    5b82:	687b      	ldr	r3, [r7, #4]
    5b84:	ea23 0304 	bic.w	r3, r3, r4
    5b88:	607b      	str	r3, [r7, #4]
    5b8a:	0064      	lsls	r4, r4, #1
    5b8c:	429c      	cmp	r4, r3
    5b8e:	f63f aebd 	bhi.w	590c <_malloc_r+0x1f0>
    5b92:	2c00      	cmp	r4, #0
    5b94:	f43f aeba 	beq.w	590c <_malloc_r+0x1f0>
    5b98:	421c      	tst	r4, r3
    5b9a:	4640      	mov	r0, r8
    5b9c:	f47f ae35 	bne.w	580a <_malloc_r+0xee>
    5ba0:	0064      	lsls	r4, r4, #1
    5ba2:	421c      	tst	r4, r3
    5ba4:	f100 0004 	add.w	r0, r0, #4
    5ba8:	d0fa      	beq.n	5ba0 <_malloc_r+0x484>
    5baa:	e62e      	b.n	580a <_malloc_r+0xee>
    5bac:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    5bb0:	d818      	bhi.n	5be4 <_malloc_r+0x4c8>
    5bb2:	0be8      	lsrs	r0, r5, #15
    5bb4:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    5bb8:	ea4f 034e 	mov.w	r3, lr, lsl #1
    5bbc:	3077      	adds	r0, #119	; 0x77
    5bbe:	e5cf      	b.n	5760 <_malloc_r+0x44>
    5bc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5bc4:	e6eb      	b.n	599e <_malloc_r+0x282>
    5bc6:	2101      	movs	r1, #1
    5bc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5bcc:	1092      	asrs	r2, r2, #2
    5bce:	fa01 f202 	lsl.w	r2, r1, r2
    5bd2:	431a      	orrs	r2, r3
    5bd4:	f8c8 2004 	str.w	r2, [r8, #4]
    5bd8:	4661      	mov	r1, ip
    5bda:	e777      	b.n	5acc <_malloc_r+0x3b0>
    5bdc:	2301      	movs	r3, #1
    5bde:	f8cb 3004 	str.w	r3, [fp, #4]
    5be2:	e725      	b.n	5a30 <_malloc_r+0x314>
    5be4:	f240 5254 	movw	r2, #1364	; 0x554
    5be8:	4293      	cmp	r3, r2
    5bea:	d820      	bhi.n	5c2e <_malloc_r+0x512>
    5bec:	0ca8      	lsrs	r0, r5, #18
    5bee:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    5bf2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    5bf6:	307c      	adds	r0, #124	; 0x7c
    5bf8:	e5b2      	b.n	5760 <_malloc_r+0x44>
    5bfa:	3210      	adds	r2, #16
    5bfc:	e6a4      	b.n	5948 <_malloc_r+0x22c>
    5bfe:	2a54      	cmp	r2, #84	; 0x54
    5c00:	d826      	bhi.n	5c50 <_malloc_r+0x534>
    5c02:	0b1a      	lsrs	r2, r3, #12
    5c04:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    5c08:	0049      	lsls	r1, r1, #1
    5c0a:	326e      	adds	r2, #110	; 0x6e
    5c0c:	e748      	b.n	5aa0 <_malloc_r+0x384>
    5c0e:	68bc      	ldr	r4, [r7, #8]
    5c10:	6862      	ldr	r2, [r4, #4]
    5c12:	f022 0203 	bic.w	r2, r2, #3
    5c16:	e705      	b.n	5a24 <_malloc_r+0x308>
    5c18:	f3ca 000b 	ubfx	r0, sl, #0, #12
    5c1c:	2800      	cmp	r0, #0
    5c1e:	f47f aea8 	bne.w	5972 <_malloc_r+0x256>
    5c22:	4442      	add	r2, r8
    5c24:	68bb      	ldr	r3, [r7, #8]
    5c26:	f042 0201 	orr.w	r2, r2, #1
    5c2a:	605a      	str	r2, [r3, #4]
    5c2c:	e6ec      	b.n	5a08 <_malloc_r+0x2ec>
    5c2e:	23fe      	movs	r3, #254	; 0xfe
    5c30:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    5c34:	207e      	movs	r0, #126	; 0x7e
    5c36:	e593      	b.n	5760 <_malloc_r+0x44>
    5c38:	2201      	movs	r2, #1
    5c3a:	f04f 0900 	mov.w	r9, #0
    5c3e:	e6c1      	b.n	59c4 <_malloc_r+0x2a8>
    5c40:	f104 0108 	add.w	r1, r4, #8
    5c44:	4630      	mov	r0, r6
    5c46:	f000 f9a9 	bl	5f9c <_free_r>
    5c4a:	f8d9 1000 	ldr.w	r1, [r9]
    5c4e:	e6db      	b.n	5a08 <_malloc_r+0x2ec>
    5c50:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    5c54:	d805      	bhi.n	5c62 <_malloc_r+0x546>
    5c56:	0bda      	lsrs	r2, r3, #15
    5c58:	f102 0178 	add.w	r1, r2, #120	; 0x78
    5c5c:	0049      	lsls	r1, r1, #1
    5c5e:	3277      	adds	r2, #119	; 0x77
    5c60:	e71e      	b.n	5aa0 <_malloc_r+0x384>
    5c62:	f240 5154 	movw	r1, #1364	; 0x554
    5c66:	428a      	cmp	r2, r1
    5c68:	d805      	bhi.n	5c76 <_malloc_r+0x55a>
    5c6a:	0c9a      	lsrs	r2, r3, #18
    5c6c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    5c70:	0049      	lsls	r1, r1, #1
    5c72:	327c      	adds	r2, #124	; 0x7c
    5c74:	e714      	b.n	5aa0 <_malloc_r+0x384>
    5c76:	21fe      	movs	r1, #254	; 0xfe
    5c78:	227e      	movs	r2, #126	; 0x7e
    5c7a:	e711      	b.n	5aa0 <_malloc_r+0x384>
    5c7c:	687b      	ldr	r3, [r7, #4]
    5c7e:	e784      	b.n	5b8a <_malloc_r+0x46e>
    5c80:	08e8      	lsrs	r0, r5, #3
    5c82:	1c43      	adds	r3, r0, #1
    5c84:	005b      	lsls	r3, r3, #1
    5c86:	e5f8      	b.n	587a <_malloc_r+0x15e>
    5c88:	20000bec 	.word	0x20000bec

00005c8c <memset>:
    5c8c:	b470      	push	{r4, r5, r6}
    5c8e:	0784      	lsls	r4, r0, #30
    5c90:	d046      	beq.n	5d20 <memset+0x94>
    5c92:	1e54      	subs	r4, r2, #1
    5c94:	2a00      	cmp	r2, #0
    5c96:	d041      	beq.n	5d1c <memset+0x90>
    5c98:	b2cd      	uxtb	r5, r1
    5c9a:	4603      	mov	r3, r0
    5c9c:	e002      	b.n	5ca4 <memset+0x18>
    5c9e:	1e62      	subs	r2, r4, #1
    5ca0:	b3e4      	cbz	r4, 5d1c <memset+0x90>
    5ca2:	4614      	mov	r4, r2
    5ca4:	f803 5b01 	strb.w	r5, [r3], #1
    5ca8:	079a      	lsls	r2, r3, #30
    5caa:	d1f8      	bne.n	5c9e <memset+0x12>
    5cac:	2c03      	cmp	r4, #3
    5cae:	d92e      	bls.n	5d0e <memset+0x82>
    5cb0:	b2cd      	uxtb	r5, r1
    5cb2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    5cb6:	2c0f      	cmp	r4, #15
    5cb8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    5cbc:	d919      	bls.n	5cf2 <memset+0x66>
    5cbe:	f103 0210 	add.w	r2, r3, #16
    5cc2:	4626      	mov	r6, r4
    5cc4:	3e10      	subs	r6, #16
    5cc6:	2e0f      	cmp	r6, #15
    5cc8:	f842 5c10 	str.w	r5, [r2, #-16]
    5ccc:	f842 5c0c 	str.w	r5, [r2, #-12]
    5cd0:	f842 5c08 	str.w	r5, [r2, #-8]
    5cd4:	f842 5c04 	str.w	r5, [r2, #-4]
    5cd8:	f102 0210 	add.w	r2, r2, #16
    5cdc:	d8f2      	bhi.n	5cc4 <memset+0x38>
    5cde:	f1a4 0210 	sub.w	r2, r4, #16
    5ce2:	f022 020f 	bic.w	r2, r2, #15
    5ce6:	f004 040f 	and.w	r4, r4, #15
    5cea:	3210      	adds	r2, #16
    5cec:	2c03      	cmp	r4, #3
    5cee:	4413      	add	r3, r2
    5cf0:	d90d      	bls.n	5d0e <memset+0x82>
    5cf2:	461e      	mov	r6, r3
    5cf4:	4622      	mov	r2, r4
    5cf6:	3a04      	subs	r2, #4
    5cf8:	2a03      	cmp	r2, #3
    5cfa:	f846 5b04 	str.w	r5, [r6], #4
    5cfe:	d8fa      	bhi.n	5cf6 <memset+0x6a>
    5d00:	1f22      	subs	r2, r4, #4
    5d02:	f022 0203 	bic.w	r2, r2, #3
    5d06:	3204      	adds	r2, #4
    5d08:	4413      	add	r3, r2
    5d0a:	f004 0403 	and.w	r4, r4, #3
    5d0e:	b12c      	cbz	r4, 5d1c <memset+0x90>
    5d10:	b2c9      	uxtb	r1, r1
    5d12:	441c      	add	r4, r3
    5d14:	f803 1b01 	strb.w	r1, [r3], #1
    5d18:	42a3      	cmp	r3, r4
    5d1a:	d1fb      	bne.n	5d14 <memset+0x88>
    5d1c:	bc70      	pop	{r4, r5, r6}
    5d1e:	4770      	bx	lr
    5d20:	4614      	mov	r4, r2
    5d22:	4603      	mov	r3, r0
    5d24:	e7c2      	b.n	5cac <memset+0x20>
    5d26:	bf00      	nop

00005d28 <__malloc_lock>:
    5d28:	4770      	bx	lr
    5d2a:	bf00      	nop

00005d2c <__malloc_unlock>:
    5d2c:	4770      	bx	lr
    5d2e:	bf00      	nop

00005d30 <_sbrk_r>:
    5d30:	b538      	push	{r3, r4, r5, lr}
    5d32:	4c07      	ldr	r4, [pc, #28]	; (5d50 <_sbrk_r+0x20>)
    5d34:	2300      	movs	r3, #0
    5d36:	4605      	mov	r5, r0
    5d38:	4608      	mov	r0, r1
    5d3a:	6023      	str	r3, [r4, #0]
    5d3c:	f7fd fd9c 	bl	3878 <_sbrk>
    5d40:	1c43      	adds	r3, r0, #1
    5d42:	d000      	beq.n	5d46 <_sbrk_r+0x16>
    5d44:	bd38      	pop	{r3, r4, r5, pc}
    5d46:	6823      	ldr	r3, [r4, #0]
    5d48:	2b00      	cmp	r3, #0
    5d4a:	d0fb      	beq.n	5d44 <_sbrk_r+0x14>
    5d4c:	602b      	str	r3, [r5, #0]
    5d4e:	bd38      	pop	{r3, r4, r5, pc}
    5d50:	2000428c 	.word	0x2000428c
	...

00005d80 <strlen>:
    5d80:	f890 f000 	pld	[r0]
    5d84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    5d88:	f020 0107 	bic.w	r1, r0, #7
    5d8c:	f06f 0c00 	mvn.w	ip, #0
    5d90:	f010 0407 	ands.w	r4, r0, #7
    5d94:	f891 f020 	pld	[r1, #32]
    5d98:	f040 8049 	bne.w	5e2e <strlen+0xae>
    5d9c:	f04f 0400 	mov.w	r4, #0
    5da0:	f06f 0007 	mvn.w	r0, #7
    5da4:	e9d1 2300 	ldrd	r2, r3, [r1]
    5da8:	f891 f040 	pld	[r1, #64]	; 0x40
    5dac:	f100 0008 	add.w	r0, r0, #8
    5db0:	fa82 f24c 	uadd8	r2, r2, ip
    5db4:	faa4 f28c 	sel	r2, r4, ip
    5db8:	fa83 f34c 	uadd8	r3, r3, ip
    5dbc:	faa2 f38c 	sel	r3, r2, ip
    5dc0:	bb4b      	cbnz	r3, 5e16 <strlen+0x96>
    5dc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    5dc6:	fa82 f24c 	uadd8	r2, r2, ip
    5dca:	f100 0008 	add.w	r0, r0, #8
    5dce:	faa4 f28c 	sel	r2, r4, ip
    5dd2:	fa83 f34c 	uadd8	r3, r3, ip
    5dd6:	faa2 f38c 	sel	r3, r2, ip
    5dda:	b9e3      	cbnz	r3, 5e16 <strlen+0x96>
    5ddc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    5de0:	fa82 f24c 	uadd8	r2, r2, ip
    5de4:	f100 0008 	add.w	r0, r0, #8
    5de8:	faa4 f28c 	sel	r2, r4, ip
    5dec:	fa83 f34c 	uadd8	r3, r3, ip
    5df0:	faa2 f38c 	sel	r3, r2, ip
    5df4:	b97b      	cbnz	r3, 5e16 <strlen+0x96>
    5df6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    5dfa:	f101 0120 	add.w	r1, r1, #32
    5dfe:	fa82 f24c 	uadd8	r2, r2, ip
    5e02:	f100 0008 	add.w	r0, r0, #8
    5e06:	faa4 f28c 	sel	r2, r4, ip
    5e0a:	fa83 f34c 	uadd8	r3, r3, ip
    5e0e:	faa2 f38c 	sel	r3, r2, ip
    5e12:	2b00      	cmp	r3, #0
    5e14:	d0c6      	beq.n	5da4 <strlen+0x24>
    5e16:	2a00      	cmp	r2, #0
    5e18:	bf04      	itt	eq
    5e1a:	3004      	addeq	r0, #4
    5e1c:	461a      	moveq	r2, r3
    5e1e:	ba12      	rev	r2, r2
    5e20:	fab2 f282 	clz	r2, r2
    5e24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    5e28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    5e2c:	4770      	bx	lr
    5e2e:	e9d1 2300 	ldrd	r2, r3, [r1]
    5e32:	f004 0503 	and.w	r5, r4, #3
    5e36:	f1c4 0000 	rsb	r0, r4, #0
    5e3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    5e3e:	f014 0f04 	tst.w	r4, #4
    5e42:	f891 f040 	pld	[r1, #64]	; 0x40
    5e46:	fa0c f505 	lsl.w	r5, ip, r5
    5e4a:	ea62 0205 	orn	r2, r2, r5
    5e4e:	bf1c      	itt	ne
    5e50:	ea63 0305 	ornne	r3, r3, r5
    5e54:	4662      	movne	r2, ip
    5e56:	f04f 0400 	mov.w	r4, #0
    5e5a:	e7a9      	b.n	5db0 <strlen+0x30>

00005e5c <__register_exitproc>:
    5e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e60:	4c25      	ldr	r4, [pc, #148]	; (5ef8 <__register_exitproc+0x9c>)
    5e62:	6825      	ldr	r5, [r4, #0]
    5e64:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    5e68:	4606      	mov	r6, r0
    5e6a:	4688      	mov	r8, r1
    5e6c:	4692      	mov	sl, r2
    5e6e:	4699      	mov	r9, r3
    5e70:	b3c4      	cbz	r4, 5ee4 <__register_exitproc+0x88>
    5e72:	6860      	ldr	r0, [r4, #4]
    5e74:	281f      	cmp	r0, #31
    5e76:	dc17      	bgt.n	5ea8 <__register_exitproc+0x4c>
    5e78:	1c43      	adds	r3, r0, #1
    5e7a:	b176      	cbz	r6, 5e9a <__register_exitproc+0x3e>
    5e7c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    5e80:	2201      	movs	r2, #1
    5e82:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    5e86:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    5e8a:	4082      	lsls	r2, r0
    5e8c:	4311      	orrs	r1, r2
    5e8e:	2e02      	cmp	r6, #2
    5e90:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    5e94:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    5e98:	d01e      	beq.n	5ed8 <__register_exitproc+0x7c>
    5e9a:	3002      	adds	r0, #2
    5e9c:	6063      	str	r3, [r4, #4]
    5e9e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    5ea2:	2000      	movs	r0, #0
    5ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ea8:	4b14      	ldr	r3, [pc, #80]	; (5efc <__register_exitproc+0xa0>)
    5eaa:	b303      	cbz	r3, 5eee <__register_exitproc+0x92>
    5eac:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5eb0:	f7ff fc24 	bl	56fc <malloc>
    5eb4:	4604      	mov	r4, r0
    5eb6:	b1d0      	cbz	r0, 5eee <__register_exitproc+0x92>
    5eb8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    5ebc:	2700      	movs	r7, #0
    5ebe:	e880 0088 	stmia.w	r0, {r3, r7}
    5ec2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    5ec6:	4638      	mov	r0, r7
    5ec8:	2301      	movs	r3, #1
    5eca:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    5ece:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    5ed2:	2e00      	cmp	r6, #0
    5ed4:	d0e1      	beq.n	5e9a <__register_exitproc+0x3e>
    5ed6:	e7d1      	b.n	5e7c <__register_exitproc+0x20>
    5ed8:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    5edc:	430a      	orrs	r2, r1
    5ede:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    5ee2:	e7da      	b.n	5e9a <__register_exitproc+0x3e>
    5ee4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    5ee8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    5eec:	e7c1      	b.n	5e72 <__register_exitproc+0x16>
    5eee:	f04f 30ff 	mov.w	r0, #4294967295
    5ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ef6:	bf00      	nop
    5ef8:	20000734 	.word	0x20000734
    5efc:	000056fd 	.word	0x000056fd

00005f00 <_malloc_trim_r>:
    5f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f02:	4f23      	ldr	r7, [pc, #140]	; (5f90 <_malloc_trim_r+0x90>)
    5f04:	460c      	mov	r4, r1
    5f06:	4606      	mov	r6, r0
    5f08:	f7ff ff0e 	bl	5d28 <__malloc_lock>
    5f0c:	68bb      	ldr	r3, [r7, #8]
    5f0e:	685d      	ldr	r5, [r3, #4]
    5f10:	f025 0503 	bic.w	r5, r5, #3
    5f14:	1b29      	subs	r1, r5, r4
    5f16:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    5f1a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    5f1e:	f021 010f 	bic.w	r1, r1, #15
    5f22:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    5f26:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    5f2a:	db07      	blt.n	5f3c <_malloc_trim_r+0x3c>
    5f2c:	2100      	movs	r1, #0
    5f2e:	4630      	mov	r0, r6
    5f30:	f7ff fefe 	bl	5d30 <_sbrk_r>
    5f34:	68bb      	ldr	r3, [r7, #8]
    5f36:	442b      	add	r3, r5
    5f38:	4298      	cmp	r0, r3
    5f3a:	d004      	beq.n	5f46 <_malloc_trim_r+0x46>
    5f3c:	4630      	mov	r0, r6
    5f3e:	f7ff fef5 	bl	5d2c <__malloc_unlock>
    5f42:	2000      	movs	r0, #0
    5f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f46:	4261      	negs	r1, r4
    5f48:	4630      	mov	r0, r6
    5f4a:	f7ff fef1 	bl	5d30 <_sbrk_r>
    5f4e:	3001      	adds	r0, #1
    5f50:	d00d      	beq.n	5f6e <_malloc_trim_r+0x6e>
    5f52:	4b10      	ldr	r3, [pc, #64]	; (5f94 <_malloc_trim_r+0x94>)
    5f54:	68ba      	ldr	r2, [r7, #8]
    5f56:	6819      	ldr	r1, [r3, #0]
    5f58:	1b2d      	subs	r5, r5, r4
    5f5a:	f045 0501 	orr.w	r5, r5, #1
    5f5e:	4630      	mov	r0, r6
    5f60:	1b09      	subs	r1, r1, r4
    5f62:	6055      	str	r5, [r2, #4]
    5f64:	6019      	str	r1, [r3, #0]
    5f66:	f7ff fee1 	bl	5d2c <__malloc_unlock>
    5f6a:	2001      	movs	r0, #1
    5f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f6e:	2100      	movs	r1, #0
    5f70:	4630      	mov	r0, r6
    5f72:	f7ff fedd 	bl	5d30 <_sbrk_r>
    5f76:	68ba      	ldr	r2, [r7, #8]
    5f78:	1a83      	subs	r3, r0, r2
    5f7a:	2b0f      	cmp	r3, #15
    5f7c:	ddde      	ble.n	5f3c <_malloc_trim_r+0x3c>
    5f7e:	4c06      	ldr	r4, [pc, #24]	; (5f98 <_malloc_trim_r+0x98>)
    5f80:	4904      	ldr	r1, [pc, #16]	; (5f94 <_malloc_trim_r+0x94>)
    5f82:	6824      	ldr	r4, [r4, #0]
    5f84:	f043 0301 	orr.w	r3, r3, #1
    5f88:	1b00      	subs	r0, r0, r4
    5f8a:	6053      	str	r3, [r2, #4]
    5f8c:	6008      	str	r0, [r1, #0]
    5f8e:	e7d5      	b.n	5f3c <_malloc_trim_r+0x3c>
    5f90:	20000bec 	.word	0x20000bec
    5f94:	20001dfc 	.word	0x20001dfc
    5f98:	20000ff8 	.word	0x20000ff8

00005f9c <_free_r>:
    5f9c:	2900      	cmp	r1, #0
    5f9e:	d045      	beq.n	602c <_free_r+0x90>
    5fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fa4:	460d      	mov	r5, r1
    5fa6:	4680      	mov	r8, r0
    5fa8:	f7ff febe 	bl	5d28 <__malloc_lock>
    5fac:	f855 7c04 	ldr.w	r7, [r5, #-4]
    5fb0:	496a      	ldr	r1, [pc, #424]	; (615c <_free_r+0x1c0>)
    5fb2:	f027 0301 	bic.w	r3, r7, #1
    5fb6:	f1a5 0408 	sub.w	r4, r5, #8
    5fba:	18e2      	adds	r2, r4, r3
    5fbc:	688e      	ldr	r6, [r1, #8]
    5fbe:	6850      	ldr	r0, [r2, #4]
    5fc0:	42b2      	cmp	r2, r6
    5fc2:	f020 0003 	bic.w	r0, r0, #3
    5fc6:	d062      	beq.n	608e <_free_r+0xf2>
    5fc8:	07fe      	lsls	r6, r7, #31
    5fca:	6050      	str	r0, [r2, #4]
    5fcc:	d40b      	bmi.n	5fe6 <_free_r+0x4a>
    5fce:	f855 7c08 	ldr.w	r7, [r5, #-8]
    5fd2:	1be4      	subs	r4, r4, r7
    5fd4:	f101 0e08 	add.w	lr, r1, #8
    5fd8:	68a5      	ldr	r5, [r4, #8]
    5fda:	4575      	cmp	r5, lr
    5fdc:	443b      	add	r3, r7
    5fde:	d06f      	beq.n	60c0 <_free_r+0x124>
    5fe0:	68e7      	ldr	r7, [r4, #12]
    5fe2:	60ef      	str	r7, [r5, #12]
    5fe4:	60bd      	str	r5, [r7, #8]
    5fe6:	1815      	adds	r5, r2, r0
    5fe8:	686d      	ldr	r5, [r5, #4]
    5fea:	07ed      	lsls	r5, r5, #31
    5fec:	d542      	bpl.n	6074 <_free_r+0xd8>
    5fee:	f043 0201 	orr.w	r2, r3, #1
    5ff2:	6062      	str	r2, [r4, #4]
    5ff4:	50e3      	str	r3, [r4, r3]
    5ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5ffa:	d218      	bcs.n	602e <_free_r+0x92>
    5ffc:	08db      	lsrs	r3, r3, #3
    5ffe:	1c5a      	adds	r2, r3, #1
    6000:	684d      	ldr	r5, [r1, #4]
    6002:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    6006:	60a7      	str	r7, [r4, #8]
    6008:	2001      	movs	r0, #1
    600a:	109b      	asrs	r3, r3, #2
    600c:	fa00 f303 	lsl.w	r3, r0, r3
    6010:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    6014:	431d      	orrs	r5, r3
    6016:	3808      	subs	r0, #8
    6018:	60e0      	str	r0, [r4, #12]
    601a:	604d      	str	r5, [r1, #4]
    601c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    6020:	60fc      	str	r4, [r7, #12]
    6022:	4640      	mov	r0, r8
    6024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6028:	f7ff be80 	b.w	5d2c <__malloc_unlock>
    602c:	4770      	bx	lr
    602e:	0a5a      	lsrs	r2, r3, #9
    6030:	2a04      	cmp	r2, #4
    6032:	d853      	bhi.n	60dc <_free_r+0x140>
    6034:	099a      	lsrs	r2, r3, #6
    6036:	f102 0739 	add.w	r7, r2, #57	; 0x39
    603a:	007f      	lsls	r7, r7, #1
    603c:	f102 0538 	add.w	r5, r2, #56	; 0x38
    6040:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    6044:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    6048:	4944      	ldr	r1, [pc, #272]	; (615c <_free_r+0x1c0>)
    604a:	3808      	subs	r0, #8
    604c:	4290      	cmp	r0, r2
    604e:	d04d      	beq.n	60ec <_free_r+0x150>
    6050:	6851      	ldr	r1, [r2, #4]
    6052:	f021 0103 	bic.w	r1, r1, #3
    6056:	428b      	cmp	r3, r1
    6058:	d202      	bcs.n	6060 <_free_r+0xc4>
    605a:	6892      	ldr	r2, [r2, #8]
    605c:	4290      	cmp	r0, r2
    605e:	d1f7      	bne.n	6050 <_free_r+0xb4>
    6060:	68d0      	ldr	r0, [r2, #12]
    6062:	60e0      	str	r0, [r4, #12]
    6064:	60a2      	str	r2, [r4, #8]
    6066:	6084      	str	r4, [r0, #8]
    6068:	60d4      	str	r4, [r2, #12]
    606a:	4640      	mov	r0, r8
    606c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6070:	f7ff be5c 	b.w	5d2c <__malloc_unlock>
    6074:	6895      	ldr	r5, [r2, #8]
    6076:	4f3a      	ldr	r7, [pc, #232]	; (6160 <_free_r+0x1c4>)
    6078:	42bd      	cmp	r5, r7
    607a:	4403      	add	r3, r0
    607c:	d03f      	beq.n	60fe <_free_r+0x162>
    607e:	68d0      	ldr	r0, [r2, #12]
    6080:	60e8      	str	r0, [r5, #12]
    6082:	f043 0201 	orr.w	r2, r3, #1
    6086:	6085      	str	r5, [r0, #8]
    6088:	6062      	str	r2, [r4, #4]
    608a:	50e3      	str	r3, [r4, r3]
    608c:	e7b3      	b.n	5ff6 <_free_r+0x5a>
    608e:	07ff      	lsls	r7, r7, #31
    6090:	4403      	add	r3, r0
    6092:	d407      	bmi.n	60a4 <_free_r+0x108>
    6094:	f855 2c08 	ldr.w	r2, [r5, #-8]
    6098:	1aa4      	subs	r4, r4, r2
    609a:	4413      	add	r3, r2
    609c:	68a0      	ldr	r0, [r4, #8]
    609e:	68e2      	ldr	r2, [r4, #12]
    60a0:	60c2      	str	r2, [r0, #12]
    60a2:	6090      	str	r0, [r2, #8]
    60a4:	4a2f      	ldr	r2, [pc, #188]	; (6164 <_free_r+0x1c8>)
    60a6:	6812      	ldr	r2, [r2, #0]
    60a8:	f043 0001 	orr.w	r0, r3, #1
    60ac:	4293      	cmp	r3, r2
    60ae:	6060      	str	r0, [r4, #4]
    60b0:	608c      	str	r4, [r1, #8]
    60b2:	d3b6      	bcc.n	6022 <_free_r+0x86>
    60b4:	4b2c      	ldr	r3, [pc, #176]	; (6168 <_free_r+0x1cc>)
    60b6:	4640      	mov	r0, r8
    60b8:	6819      	ldr	r1, [r3, #0]
    60ba:	f7ff ff21 	bl	5f00 <_malloc_trim_r>
    60be:	e7b0      	b.n	6022 <_free_r+0x86>
    60c0:	1811      	adds	r1, r2, r0
    60c2:	6849      	ldr	r1, [r1, #4]
    60c4:	07c9      	lsls	r1, r1, #31
    60c6:	d444      	bmi.n	6152 <_free_r+0x1b6>
    60c8:	6891      	ldr	r1, [r2, #8]
    60ca:	68d2      	ldr	r2, [r2, #12]
    60cc:	60ca      	str	r2, [r1, #12]
    60ce:	4403      	add	r3, r0
    60d0:	f043 0001 	orr.w	r0, r3, #1
    60d4:	6091      	str	r1, [r2, #8]
    60d6:	6060      	str	r0, [r4, #4]
    60d8:	50e3      	str	r3, [r4, r3]
    60da:	e7a2      	b.n	6022 <_free_r+0x86>
    60dc:	2a14      	cmp	r2, #20
    60de:	d817      	bhi.n	6110 <_free_r+0x174>
    60e0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    60e4:	007f      	lsls	r7, r7, #1
    60e6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    60ea:	e7a9      	b.n	6040 <_free_r+0xa4>
    60ec:	10aa      	asrs	r2, r5, #2
    60ee:	684b      	ldr	r3, [r1, #4]
    60f0:	2501      	movs	r5, #1
    60f2:	fa05 f202 	lsl.w	r2, r5, r2
    60f6:	4313      	orrs	r3, r2
    60f8:	604b      	str	r3, [r1, #4]
    60fa:	4602      	mov	r2, r0
    60fc:	e7b1      	b.n	6062 <_free_r+0xc6>
    60fe:	f043 0201 	orr.w	r2, r3, #1
    6102:	614c      	str	r4, [r1, #20]
    6104:	610c      	str	r4, [r1, #16]
    6106:	60e5      	str	r5, [r4, #12]
    6108:	60a5      	str	r5, [r4, #8]
    610a:	6062      	str	r2, [r4, #4]
    610c:	50e3      	str	r3, [r4, r3]
    610e:	e788      	b.n	6022 <_free_r+0x86>
    6110:	2a54      	cmp	r2, #84	; 0x54
    6112:	d806      	bhi.n	6122 <_free_r+0x186>
    6114:	0b1a      	lsrs	r2, r3, #12
    6116:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    611a:	007f      	lsls	r7, r7, #1
    611c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    6120:	e78e      	b.n	6040 <_free_r+0xa4>
    6122:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    6126:	d806      	bhi.n	6136 <_free_r+0x19a>
    6128:	0bda      	lsrs	r2, r3, #15
    612a:	f102 0778 	add.w	r7, r2, #120	; 0x78
    612e:	007f      	lsls	r7, r7, #1
    6130:	f102 0577 	add.w	r5, r2, #119	; 0x77
    6134:	e784      	b.n	6040 <_free_r+0xa4>
    6136:	f240 5054 	movw	r0, #1364	; 0x554
    613a:	4282      	cmp	r2, r0
    613c:	d806      	bhi.n	614c <_free_r+0x1b0>
    613e:	0c9a      	lsrs	r2, r3, #18
    6140:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    6144:	007f      	lsls	r7, r7, #1
    6146:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    614a:	e779      	b.n	6040 <_free_r+0xa4>
    614c:	27fe      	movs	r7, #254	; 0xfe
    614e:	257e      	movs	r5, #126	; 0x7e
    6150:	e776      	b.n	6040 <_free_r+0xa4>
    6152:	f043 0201 	orr.w	r2, r3, #1
    6156:	6062      	str	r2, [r4, #4]
    6158:	50e3      	str	r3, [r4, r3]
    615a:	e762      	b.n	6022 <_free_r+0x86>
    615c:	20000bec 	.word	0x20000bec
    6160:	20000bf4 	.word	0x20000bf4
    6164:	20000ff4 	.word	0x20000ff4
    6168:	20001df8 	.word	0x20001df8
    616c:	00000000 	.word	0x00000000

00006170 <___init_veneer>:
    6170:	f85f f000 	ldr.w	pc, [pc]	; 6174 <___init_veneer+0x4>
    6174:	60001aa9 	.word	0x60001aa9
	...

Disassembly of section .fini:

00006180 <_fini>:
    6180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6182:	bf00      	nop
