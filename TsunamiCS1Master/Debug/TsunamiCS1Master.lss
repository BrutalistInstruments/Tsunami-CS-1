
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000192  00800200  00003d52  00003de6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000416  00800392  00800392  00003f78  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003f78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003fa8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00003fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007940  00000000  00000000  00004428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000208c  00000000  00000000  0000bd68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003587  00000000  00000000  0000ddf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bb0  00000000  00000000  0001137c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001502  00000000  00000000  00011f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000052bb  00000000  00000000  0001342e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  000186e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
       2:	00 00       	nop
       4:	11 c1       	rjmp	.+546    	; 0x228 <__bad_interrupt>
       6:	00 00       	nop
       8:	0f c1       	rjmp	.+542    	; 0x228 <__bad_interrupt>
       a:	00 00       	nop
       c:	4f c2       	rjmp	.+1182   	; 0x4ac <__vector_3>
       e:	00 00       	nop
      10:	6b c2       	rjmp	.+1238   	; 0x4e8 <__vector_4>
      12:	00 00       	nop
      14:	87 c2       	rjmp	.+1294   	; 0x524 <__vector_5>
      16:	00 00       	nop
      18:	a3 c2       	rjmp	.+1350   	; 0x560 <__vector_6>
      1a:	00 00       	nop
      1c:	05 c1       	rjmp	.+522    	; 0x228 <__bad_interrupt>
      1e:	00 00       	nop
      20:	03 c1       	rjmp	.+518    	; 0x228 <__bad_interrupt>
      22:	00 00       	nop
      24:	01 c1       	rjmp	.+514    	; 0x228 <__bad_interrupt>
      26:	00 00       	nop
      28:	ff c0       	rjmp	.+510    	; 0x228 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fd c0       	rjmp	.+506    	; 0x228 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fb c0       	rjmp	.+502    	; 0x228 <__bad_interrupt>
      32:	00 00       	nop
      34:	f9 c0       	rjmp	.+498    	; 0x228 <__bad_interrupt>
      36:	00 00       	nop
      38:	f7 c0       	rjmp	.+494    	; 0x228 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__vector_15>
      3e:	00 00       	nop
      40:	f3 c0       	rjmp	.+486    	; 0x228 <__bad_interrupt>
      42:	00 00       	nop
      44:	f1 c0       	rjmp	.+482    	; 0x228 <__bad_interrupt>
      46:	00 00       	nop
      48:	ef c0       	rjmp	.+478    	; 0x228 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ed c0       	rjmp	.+474    	; 0x228 <__bad_interrupt>
      4e:	00 00       	nop
      50:	eb c0       	rjmp	.+470    	; 0x228 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__vector_21>
      58:	e7 c0       	rjmp	.+462    	; 0x228 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e5 c0       	rjmp	.+458    	; 0x228 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e3 c0       	rjmp	.+454    	; 0x228 <__bad_interrupt>
      62:	00 00       	nop
      64:	e1 c0       	rjmp	.+450    	; 0x228 <__bad_interrupt>
      66:	00 00       	nop
      68:	df c0       	rjmp	.+446    	; 0x228 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__vector_27>
      70:	db c0       	rjmp	.+438    	; 0x228 <__bad_interrupt>
      72:	00 00       	nop
      74:	d9 c0       	rjmp	.+434    	; 0x228 <__bad_interrupt>
      76:	00 00       	nop
      78:	d7 c0       	rjmp	.+430    	; 0x228 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d5 c0       	rjmp	.+426    	; 0x228 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__vector_32>
      84:	d1 c0       	rjmp	.+418    	; 0x228 <__bad_interrupt>
      86:	00 00       	nop
      88:	cf c0       	rjmp	.+414    	; 0x228 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cd c0       	rjmp	.+410    	; 0x228 <__bad_interrupt>
      8e:	00 00       	nop
      90:	cb c0       	rjmp	.+406    	; 0x228 <__bad_interrupt>
      92:	00 00       	nop
      94:	c9 c0       	rjmp	.+402    	; 0x228 <__bad_interrupt>
      96:	00 00       	nop
      98:	c7 c0       	rjmp	.+398    	; 0x228 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c5 c0       	rjmp	.+394    	; 0x228 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c3 c0       	rjmp	.+390    	; 0x228 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c1 c0       	rjmp	.+386    	; 0x228 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bf c0       	rjmp	.+382    	; 0x228 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	bd c0       	rjmp	.+378    	; 0x228 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bb c0       	rjmp	.+374    	; 0x228 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b9 c0       	rjmp	.+370    	; 0x228 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b7 c0       	rjmp	.+366    	; 0x228 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b5 c0       	rjmp	.+362    	; 0x228 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b3 c0       	rjmp	.+358    	; 0x228 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b1 c0       	rjmp	.+354    	; 0x228 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	af c0       	rjmp	.+350    	; 0x228 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ad c0       	rjmp	.+346    	; 0x228 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ab c0       	rjmp	.+342    	; 0x228 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a9 c0       	rjmp	.+338    	; 0x228 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 37 11 	jmp	0x226e	; 0x226e <__vector_54>
      dc:	a5 c0       	rjmp	.+330    	; 0x228 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a3 c0       	rjmp	.+326    	; 0x228 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0a 03       	fmul	r16, r18
      e6:	56 05       	cpc	r21, r6
      e8:	56 05       	cpc	r21, r6
      ea:	56 05       	cpc	r21, r6
      ec:	56 05       	cpc	r21, r6
      ee:	56 05       	cpc	r21, r6
      f0:	56 05       	cpc	r21, r6
      f2:	56 05       	cpc	r21, r6
      f4:	56 05       	cpc	r21, r6
      f6:	56 05       	cpc	r21, r6
      f8:	56 05       	cpc	r21, r6
      fa:	56 05       	cpc	r21, r6
      fc:	56 05       	cpc	r21, r6
      fe:	56 05       	cpc	r21, r6
     100:	56 05       	cpc	r21, r6
     102:	56 05       	cpc	r21, r6
     104:	56 05       	cpc	r21, r6
     106:	2e 03       	fmul	r18, r22
     108:	5a 03       	fmul	r21, r18
     10a:	83 03       	fmuls	r16, r19
     10c:	56 05       	cpc	r21, r6
     10e:	56 05       	cpc	r21, r6
     110:	56 05       	cpc	r21, r6
     112:	56 05       	cpc	r21, r6
     114:	56 05       	cpc	r21, r6
     116:	38 03       	fmul	r19, r16
     118:	64 03       	mulsu	r22, r20
     11a:	8d 03       	fmulsu	r16, r21
     11c:	56 05       	cpc	r21, r6
     11e:	56 05       	cpc	r21, r6
     120:	56 05       	cpc	r21, r6
     122:	56 05       	cpc	r21, r6
     124:	56 05       	cpc	r21, r6
     126:	b2 03       	fmuls	r19, r18
     128:	ed 03       	fmulsu	r22, r21
     12a:	04 04       	cpc	r0, r4
     12c:	41 04       	cpc	r4, r1
     12e:	b8 04       	cpc	r11, r8
     130:	56 05       	cpc	r21, r6
     132:	56 05       	cpc	r21, r6
     134:	56 05       	cpc	r21, r6
     136:	bc 03       	fmulsu	r19, r20
     138:	f7 03       	fmuls	r23, r23
     13a:	0e 04       	cpc	r0, r14
     13c:	4b 04       	cpc	r4, r11
     13e:	c2 04       	cpc	r12, r2
     140:	56 05       	cpc	r21, r6
     142:	56 05       	cpc	r21, r6
     144:	56 05       	cpc	r21, r6
     146:	08 05       	cpc	r16, r8
     148:	2c 05       	cpc	r18, r12
     14a:	4d 05       	cpc	r20, r13
     14c:	56 05       	cpc	r21, r6
     14e:	56 05       	cpc	r21, r6
     150:	56 05       	cpc	r21, r6
     152:	56 05       	cpc	r21, r6
     154:	56 05       	cpc	r21, r6
     156:	12 05       	cpc	r17, r2
     158:	36 05       	cpc	r19, r6
     15a:	da 0b       	sbc	r29, r26
     15c:	a3 0e       	add	r10, r19
     15e:	a3 0e       	add	r10, r19
     160:	a3 0e       	add	r10, r19
     162:	a3 0e       	add	r10, r19
     164:	a3 0e       	add	r10, r19
     166:	a3 0e       	add	r10, r19
     168:	a3 0e       	add	r10, r19
     16a:	a3 0e       	add	r10, r19
     16c:	a3 0e       	add	r10, r19
     16e:	a3 0e       	add	r10, r19
     170:	a3 0e       	add	r10, r19
     172:	a3 0e       	add	r10, r19
     174:	a3 0e       	add	r10, r19
     176:	a3 0e       	add	r10, r19
     178:	a3 0e       	add	r10, r19
     17a:	f0 0b       	sbc	r31, r16
     17c:	0a 0c       	add	r0, r10
     17e:	30 0c       	add	r3, r0
     180:	5f 0c       	add	r5, r15
     182:	a3 0e       	add	r10, r19
     184:	a3 0e       	add	r10, r19
     186:	a3 0e       	add	r10, r19
     188:	a3 0e       	add	r10, r19
     18a:	a3 0e       	add	r10, r19
     18c:	27 0c       	add	r2, r7
     18e:	4d 0c       	add	r4, r13
     190:	7c 0c       	add	r7, r12
     192:	a3 0e       	add	r10, r19
     194:	a3 0e       	add	r10, r19
     196:	a3 0e       	add	r10, r19
     198:	a3 0e       	add	r10, r19
     19a:	8d 0c       	add	r8, r13
     19c:	a7 0c       	add	r10, r7
     19e:	e0 0c       	add	r14, r0
     1a0:	2c 0d       	add	r18, r12
     1a2:	5f 0d       	add	r21, r15
     1a4:	c9 0d       	add	r28, r9
     1a6:	a3 0e       	add	r10, r19
     1a8:	a3 0e       	add	r10, r19
     1aa:	a3 0e       	add	r10, r19
     1ac:	c4 0c       	add	r12, r4
     1ae:	fd 0c       	add	r15, r13
     1b0:	49 0d       	add	r20, r9
     1b2:	7c 0d       	add	r23, r12
     1b4:	e6 0d       	add	r30, r6
     1b6:	a3 0e       	add	r10, r19
     1b8:	a3 0e       	add	r10, r19
     1ba:	0f 0e       	add	r0, r31
     1bc:	29 0e       	add	r2, r25
     1be:	58 0e       	add	r5, r24
     1c0:	87 0e       	add	r8, r23
     1c2:	a3 0e       	add	r10, r19
     1c4:	a3 0e       	add	r10, r19
     1c6:	a3 0e       	add	r10, r19
     1c8:	a3 0e       	add	r10, r19
     1ca:	a3 0e       	add	r10, r19
     1cc:	46 0e       	add	r4, r22
     1ce:	75 0e       	add	r7, r21
     1d0:	c0 14       	cp	r12, r0
     1d2:	c3 14       	cp	r12, r3
     1d4:	c6 14       	cp	r12, r6
     1d6:	c9 14       	cp	r12, r9
     1d8:	cc 14       	cp	r12, r12
     1da:	cf 14       	cp	r12, r15
     1dc:	d2 14       	cp	r13, r2
     1de:	d5 14       	cp	r13, r5
     1e0:	d8 14       	cp	r13, r8
     1e2:	db 14       	cp	r13, r11
     1e4:	de 14       	cp	r13, r14
     1e6:	e1 14       	cp	r14, r1

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d1 e2       	ldi	r29, 0x21	; 33
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	13 e0       	ldi	r17, 0x03	; 3
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b2 e0       	ldi	r27, 0x02	; 2
     1fe:	e2 e5       	ldi	r30, 0x52	; 82
     200:	fd e3       	ldi	r31, 0x3D	; 61
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a2 39       	cpi	r26, 0x92	; 146
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	27 e0       	ldi	r18, 0x07	; 7
     214:	a2 e9       	ldi	r26, 0x92	; 146
     216:	b3 e0       	ldi	r27, 0x03	; 3
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a8 3a       	cpi	r26, 0xA8	; 168
     21e:	b2 07       	cpc	r27, r18
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	ee d7       	rcall	.+4060   	; 0x1200 <main>
     224:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <_exit>

00000228 <__bad_interrupt>:
     228:	eb ce       	rjmp	.-554    	; 0x0 <__vectors>

0000022a <__vector_15>:
uint8_t buttonsCurrentCycle;
uint16_t lastFullBits = 0;
uint8_t currentTrig;

ISR(TIMER2_OVF_vect)
{
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	2f 93       	push	r18
     236:	3f 93       	push	r19
     238:	8f 93       	push	r24
     23a:	9f 93       	push	r25

static inline void debounce()
{
	static uint8_t vcount_low = 0xFF, vcount_high = 0xFF;
	static uint8_t button_state = 0;
	uint8_t state_changed = ~BUTTON_PIN ^ button_state;
     23c:	83 b1       	in	r24, 0x03	; 3
     23e:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <__data_end>
     242:	80 95       	com	r24
     244:	38 2f       	mov	r19, r24
     246:	32 27       	eor	r19, r18
	VC_DEC_OR_SET(vcount_high, vcount_low, state_changed);
     248:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <vcount_low.1745>
     24c:	93 23       	and	r25, r19
     24e:	89 2f       	mov	r24, r25
     250:	80 95       	com	r24
     252:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <vcount_low.1745>
     256:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     25a:	93 23       	and	r25, r19
     25c:	98 27       	eor	r25, r24
     25e:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
     262:	83 23       	and	r24, r19
	state_changed &= vcount_low & vcount_high;
     264:	89 23       	and	r24, r25
	button_state ^= state_changed;
     266:	92 2f       	mov	r25, r18
     268:	98 27       	eor	r25, r24
     26a:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <__data_end>
	buttons_down |= button_state&state_changed;
     26e:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <buttons_down>
     272:	89 23       	and	r24, r25
     274:	82 2b       	or	r24, r18
     276:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <buttons_down>
	debounce();
}
     27a:	9f 91       	pop	r25
     27c:	8f 91       	pop	r24
     27e:	3f 91       	pop	r19
     280:	2f 91       	pop	r18
     282:	0f 90       	pop	r0
     284:	0f be       	out	0x3f, r0	; 63
     286:	0f 90       	pop	r0
     288:	1f 90       	pop	r1
     28a:	18 95       	reti

0000028c <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     28c:	8f ef       	ldi	r24, 0xFF	; 255
     28e:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     290:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons and Encoder buttons
	PORTB = 0B01111111;
     294:	8f e7       	ldi	r24, 0x7F	; 127
     296:	85 b9       	out	0x05, r24	; 5
     298:	08 95       	ret

0000029a <listenTrigButtons>:

}

void listenTrigButtons(Pattern *buttonCurrentPattern, Globals *currentGlobals)
{
     29a:	cf 92       	push	r12
     29c:	df 92       	push	r13
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	6c 01       	movw	r12, r24
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     2aa:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     2ae:	20 95       	com	r18
     2b0:	20 93 a3 03 	sts	0x03A3, r18	; 0x8003a3 <buttonsCurrentCycle>
	(currentGlobals->currentTrigButtons) = (buttonsCurrentCycle << 8) | (PINA^255);
     2b4:	90 b1       	in	r25, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	32 2f       	mov	r19, r18
     2ba:	22 27       	eor	r18, r18
     2bc:	90 95       	com	r25
     2be:	29 2b       	or	r18, r25
     2c0:	db 01       	movw	r26, r22
     2c2:	2d 93       	st	X+, r18
     2c4:	3c 93       	st	X, r19
	if(currentGlobals->currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     2c6:	40 91 93 03 	lds	r20, 0x0393	; 0x800393 <lastFullBits>
     2ca:	50 91 94 03 	lds	r21, 0x0394	; 0x800394 <lastFullBits+0x1>
     2ce:	24 17       	cp	r18, r20
     2d0:	35 07       	cpc	r19, r21
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <listenTrigButtons+0x3c>
     2d4:	43 c0       	rjmp	.+134    	; 0x35c <listenTrigButtons+0xc2>
     2d6:	7b 01       	movw	r14, r22
	{
		lastFullBits = currentGlobals->currentTrigButtons;
     2d8:	30 93 94 03 	sts	0x0394, r19	; 0x800394 <lastFullBits+0x1>
     2dc:	20 93 93 03 	sts	0x0393, r18	; 0x800393 <lastFullBits>
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
     2e0:	fb 01       	movw	r30, r22
     2e2:	00 81       	ld	r16, Z
     2e4:	11 81       	ldd	r17, Z+1	; 0x01
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     2e6:	c0 e0       	ldi	r28, 0x00	; 0
		{
			currentTrig = (fullBitsParse&1);
     2e8:	90 2f       	mov	r25, r16
     2ea:	91 70       	andi	r25, 0x01	; 1
     2ec:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <currentTrig>
			if(currentTrig)
     2f0:	99 23       	and	r25, r25
     2f2:	79 f1       	breq	.+94     	; 0x352 <listenTrigButtons+0xb8>
			{
				uint8_t encoderAstate = currentGlobals->menuState >> 4;
				switch (encoderAstate)
     2f4:	d7 01       	movw	r26, r14
     2f6:	16 96       	adiw	r26, 0x06	; 6
     2f8:	9c 91       	ld	r25, X
     2fa:	92 95       	swap	r25
     2fc:	9f 70       	andi	r25, 0x0F	; 15
     2fe:	91 30       	cpi	r25, 0x01	; 1
     300:	51 f0       	breq	.+20     	; 0x316 <listenTrigButtons+0x7c>
     302:	18 f0       	brcs	.+6      	; 0x30a <listenTrigButtons+0x70>
     304:	94 30       	cpi	r25, 0x04	; 4
     306:	28 f5       	brcc	.+74     	; 0x352 <listenTrigButtons+0xb8>
     308:	1a c0       	rjmp	.+52     	; 0x33e <listenTrigButtons+0xa4>
				{
	
					//for "performance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
					case 0: //performance mode
					//we trigger a sound here based on the location of bc
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     30a:	4c 2f       	mov	r20, r28
     30c:	b7 01       	movw	r22, r14
     30e:	c6 01       	movw	r24, r12
     310:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <playTrack>
					break;
     314:	1e c0       	rjmp	.+60     	; 0x352 <listenTrigButtons+0xb8>

					case 1:
					buttonCurrentPattern->trackSequence[currentGlobals->currentStep] ^=currentGlobals->currentTrigButtons;
     316:	d7 01       	movw	r26, r14
     318:	14 96       	adiw	r26, 0x04	; 4
     31a:	ec 91       	ld	r30, X
     31c:	14 97       	sbiw	r26, 0x04	; 4
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	ee 0f       	add	r30, r30
     322:	ff 1f       	adc	r31, r31
     324:	ec 0d       	add	r30, r12
     326:	fd 1d       	adc	r31, r13
     328:	e5 50       	subi	r30, 0x05	; 5
     32a:	ff 4f       	sbci	r31, 0xFF	; 255
     32c:	20 81       	ld	r18, Z
     32e:	31 81       	ldd	r19, Z+1	; 0x01
     330:	8d 91       	ld	r24, X+
     332:	9c 91       	ld	r25, X
     334:	82 27       	eor	r24, r18
     336:	93 27       	eor	r25, r19
     338:	91 83       	std	Z+1, r25	; 0x01
     33a:	80 83       	st	Z, r24
					//turn on step number, or turn off step number.
					//step sequencer mode.
					break;
     33c:	0a c0       	rjmp	.+20     	; 0x352 <listenTrigButtons+0xb8>
					//we want this functionality for both case 2 and case 3
					case 2:
					case 3:;
					//select track for sample assignment
					//uint16_t currentSample = (buttonCurrentPattern->trackSampleMSB[bc]<<8)|(buttonCurrentPattern->trackSampleLSB[bc]);
					currentGlobals->currentTrack = bc;
     33e:	f7 01       	movw	r30, r14
     340:	c5 83       	std	Z+5, r28	; 0x05
					currentGlobals->valueChangeFlag |=(1<<triggerChange);
     342:	82 85       	ldd	r24, Z+10	; 0x0a
     344:	82 60       	ori	r24, 0x02	; 2
     346:	82 87       	std	Z+10, r24	; 0x0a
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     348:	4c 2f       	mov	r20, r28
     34a:	b7 01       	movw	r22, r14
     34c:	c6 01       	movw	r24, r12
     34e:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <playTrack>
					default:
					//this should be the same as case 0;
					break;
				}
			}
			fullBitsParse = fullBitsParse>>1;
     352:	16 95       	lsr	r17
     354:	07 95       	ror	r16
	{
		lastFullBits = currentGlobals->currentTrigButtons;
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     356:	cf 5f       	subi	r28, 0xFF	; 255
     358:	c0 31       	cpi	r28, 0x10	; 16
     35a:	31 f6       	brne	.-116    	; 0x2e8 <listenTrigButtons+0x4e>
				}
			}
			fullBitsParse = fullBitsParse>>1;
		}
	}
}
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	ff 90       	pop	r15
     364:	ef 90       	pop	r14
     366:	df 90       	pop	r13
     368:	cf 90       	pop	r12
     36a:	08 95       	ret

0000036c <listenGPButtons>:

void listenGPButtons(Pattern currentPattern, Globals *currentGlobals) //may need to be a pointer
{
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	cc 57       	subi	r28, 0x7C	; 124
     37c:	de 4f       	sbci	r29, 0xFE	; 254
     37e:	08 81       	ld	r16, Y
     380:	19 81       	ldd	r17, Y+1	; 0x01
     382:	c4 58       	subi	r28, 0x84	; 132
     384:	d1 40       	sbci	r29, 0x01	; 1

	if(button_down(1 << PB5))
     386:	80 e2       	ldi	r24, 0x20	; 32
     388:	77 d0       	rcall	.+238    	; 0x478 <button_down>
     38a:	88 23       	and	r24, r24
     38c:	41 f1       	breq	.+80     	; 0x3de <listenGPButtons+0x72>
	{ //top encoder button
		if(currentGlobals->menuState>>4==3)
     38e:	f8 01       	movw	r30, r16
     390:	86 81       	ldd	r24, Z+6	; 0x06
     392:	82 95       	swap	r24
     394:	8f 70       	andi	r24, 0x0F	; 15
     396:	83 30       	cpi	r24, 0x03	; 3
     398:	21 f4       	brne	.+8      	; 0x3a2 <listenGPButtons+0x36>
		{
			globalWrite(currentGlobals);
     39a:	c8 01       	movw	r24, r16
     39c:	0e 94 4c 1c 	call	0x3898	; 0x3898 <globalWrite>
     3a0:	1e c0       	rjmp	.+60     	; 0x3de <listenGPButtons+0x72>
		}else
		{
			eepromSavePattern(currentPattern, currentGlobals->currentPatternNumber);
     3a2:	f8 01       	movw	r30, r16
     3a4:	83 81       	ldd	r24, Z+3	; 0x03
     3a6:	8f 93       	push	r24
     3a8:	8d b7       	in	r24, 0x3d	; 61
     3aa:	9e b7       	in	r25, 0x3e	; 62
     3ac:	8b 57       	subi	r24, 0x7B	; 123
     3ae:	91 40       	sbci	r25, 0x01	; 1
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	9e bf       	out	0x3e, r25	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	8d bf       	out	0x3d, r24	; 61
     3ba:	ad b7       	in	r26, 0x3d	; 61
     3bc:	be b7       	in	r27, 0x3e	; 62
     3be:	11 96       	adiw	r26, 0x01	; 1
     3c0:	8b e7       	ldi	r24, 0x7B	; 123
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	fe 01       	movw	r30, r28
     3c6:	39 96       	adiw	r30, 0x09	; 9
     3c8:	01 90       	ld	r0, Z+
     3ca:	0d 92       	st	X+, r0
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <listenGPButtons+0x5c>
     3d0:	0e 94 ad 18 	call	0x315a	; 0x315a <eepromSavePattern>
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	de bf       	out	0x3e, r29	; 62
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	cd bf       	out	0x3d, r28	; 61
		}
		
	}

	uint8_t encoderSwitchMask = 0b00001000;
	if(button_down(1<<PB6))
     3de:	80 e4       	ldi	r24, 0x40	; 64
     3e0:	4b d0       	rcall	.+150    	; 0x478 <button_down>
     3e2:	88 23       	and	r24, r24
     3e4:	51 f0       	breq	.+20     	; 0x3fa <listenGPButtons+0x8e>
		{//bottom encoder button
			uint8_t encoderBCheck = currentGlobals->menuState&encoderSwitchMask;
     3e6:	f8 01       	movw	r30, r16
     3e8:	86 81       	ldd	r24, Z+6	; 0x06
			if(encoderBCheck)
     3ea:	83 ff       	sbrs	r24, 3
     3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <listenGPButtons+0x88>
			{
				currentGlobals->menuState &=0b11110111;//turn off the encoderBFlag
     3ee:	87 7f       	andi	r24, 0xF7	; 247
     3f0:	86 83       	std	Z+6, r24	; 0x06
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <listenGPButtons+0x8e>

			}else
			{
				currentGlobals->menuState |=0b00001000; //turn on the encoderBFlag bit
     3f4:	88 60       	ori	r24, 0x08	; 8
     3f6:	f8 01       	movw	r30, r16
     3f8:	86 83       	std	Z+6, r24	; 0x06
			}
		}
	uint8_t playButtonMask = 0b0000001; //we could probably make a define for both of these masks.
	uint8_t playStateCheck = currentGlobals->playState & playButtonMask;
     3fa:	f8 01       	movw	r30, r16
	if(button_down(1<<PB4))
     3fc:	f7 80       	ldd	r15, Z+7	; 0x07
     3fe:	80 e1       	ldi	r24, 0x10	; 16
     400:	3b d0       	rcall	.+118    	; 0x478 <button_down>
     402:	88 23       	and	r24, r24
     404:	71 f0       	breq	.+28     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	{
		if(playStateCheck)
     406:	f0 fe       	sbrs	r15, 0
     408:	06 c0       	rjmp	.+12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		{
			currentGlobals->playState=0; //playstate is on, turn it off
     40a:	f8 01       	movw	r30, r16
     40c:	17 82       	std	Z+7, r1	; 0x07
			currentGlobals->currentGPButtons &=(~0x20); //turn the first bit
     40e:	82 81       	ldd	r24, Z+2	; 0x02
     410:	8f 7d       	andi	r24, 0xDF	; 223
     412:	82 83       	std	Z+2, r24	; 0x02
     414:	06 c0       	rjmp	.+12     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			
		}else
		{
			currentGlobals->playState=1;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	f8 01       	movw	r30, r16
     41a:	87 83       	std	Z+7, r24	; 0x07
			currentGlobals->currentGPButtons |= 0x20; //turn on the first bit
     41c:	82 81       	ldd	r24, Z+2	; 0x02
     41e:	80 62       	ori	r24, 0x20	; 32
     420:	82 83       	std	Z+2, r24	; 0x02
		}

	} //not sure which button this is
	uint8_t trackButtonMask = 0b00000001;
	uint8_t trackStateCheck = (currentGlobals->buttonSwitchFlag) & trackButtonMask;
     422:	f8 01       	movw	r30, r16
	if(button_down(1<<PB0))
     424:	f1 84       	ldd	r15, Z+9	; 0x09
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	27 d0       	rcall	.+78     	; 0x478 <button_down>
     42a:	88 23       	and	r24, r24
     42c:	71 f0       	breq	.+28     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	{
		if(trackStateCheck)
     42e:	f0 fe       	sbrs	r15, 0
     430:	06 c0       	rjmp	.+12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		{
			currentGlobals->buttonSwitchFlag = 0;
     432:	f8 01       	movw	r30, r16
     434:	11 86       	std	Z+9, r1	; 0x09
			currentGlobals->currentGPButtons &=(~0x02);
     436:	82 81       	ldd	r24, Z+2	; 0x02
     438:	8d 7f       	andi	r24, 0xFD	; 253
     43a:	82 83       	std	Z+2, r24	; 0x02
     43c:	06 c0       	rjmp	.+12     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		}else
		{
			currentGlobals->buttonSwitchFlag = 1;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	f8 01       	movw	r30, r16
     442:	81 87       	std	Z+9, r24	; 0x09
			currentGlobals->currentGPButtons |=0x02;
     444:	82 81       	ldd	r24, Z+2	; 0x02
     446:	82 60       	ori	r24, 0x02	; 2
		}
	}
	uint8_t fineButtonMask = 4;
	uint8_t fineStateCheck = (currentGlobals->currentGPButtons) & fineButtonMask;
     448:	82 83       	std	Z+2, r24	; 0x02
     44a:	f8 01       	movw	r30, r16
	if(button_down(1<<PB1))
     44c:	f2 80       	ldd	r15, Z+2	; 0x02
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	13 d0       	rcall	.+38     	; 0x478 <button_down>
     452:	88 23       	and	r24, r24
     454:	59 f0       	breq	.+22     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	{		
		if(fineStateCheck)
     456:	f2 fe       	sbrs	r15, 2
     458:	05 c0       	rjmp	.+10     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		{
			
			currentGlobals->currentGPButtons &=(~0x04);
     45a:	f8 01       	movw	r30, r16
     45c:	82 81       	ldd	r24, Z+2	; 0x02
     45e:	8b 7f       	andi	r24, 0xFB	; 251
     460:	82 83       	std	Z+2, r24	; 0x02
     462:	04 c0       	rjmp	.+8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		}else
		{
			currentGlobals->currentGPButtons |=0x04;
     464:	f8 01       	movw	r30, r16
     466:	82 81       	ldd	r24, Z+2	; 0x02
     468:	84 60       	ori	r24, 0x04	; 4
     46a:	82 83       	std	Z+2, r24	; 0x02
		}
		
	}
}
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	ff 90       	pop	r15
     476:	08 95       	ret

00000478 <button_down>:

volatile uint8_t buttons_down;
uint8_t button_down(uint8_t button_mask)
{
	//I should probably check out what this is.
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     478:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     47a:	f8 94       	cli
	{
		button_mask &= buttons_down;
     47c:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <buttons_down>
     480:	89 23       	and	r24, r25
		buttons_down ^= button_mask;
     482:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <buttons_down>
     486:	98 27       	eor	r25, r24
     488:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <buttons_down>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     48c:	2f bf       	out	0x3f, r18	; 63
	}
	
	return button_mask;
     48e:	08 95       	ret

00000490 <initEncoders>:
	
	//Interrupt pins - 2,3,4,5
	
	
	//setup rising edge detection on Int pins 2 and 3 (would maybe want all pin states if this doesn't work).
	EICRA |=(1<<ISC31)|(1<<ISC30)|(1 << ISC21)|(1 << ISC20); 
     490:	e9 e6       	ldi	r30, 0x69	; 105
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	80 81       	ld	r24, Z
     496:	80 6f       	ori	r24, 0xF0	; 240
     498:	80 83       	st	Z, r24
	
	//same setup on pins 4 and 5
	EICRB |=(1<<ISC51)|(1<<ISC50)|(1 << ISC41)|(1 << ISC40);
     49a:	ea e6       	ldi	r30, 0x6A	; 106
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	8f 60       	ori	r24, 0x0F	; 15
     4a2:	80 83       	st	Z, r24
	
	//enable all 4 interrupts through masking
	EIMSK |=(1<<INT2)|(1<<INT3)|(1<<INT4)|(1<<INT5);
     4a4:	8d b3       	in	r24, 0x1d	; 29
     4a6:	8c 63       	ori	r24, 0x3C	; 60
     4a8:	8d bb       	out	0x1d, r24	; 29
     4aa:	08 95       	ret

000004ac <__vector_3>:


}
 
ISR(INT2_vect)
{
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1
     4b6:	8f 93       	push	r24
     4b8:	9f 93       	push	r25
	if(0b00000010&encoderPortStates)//this means Pin 2 is coming after pin 3
     4ba:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <encoderPortStates>
     4be:	81 ff       	sbrs	r24, 1
     4c0:	09 c0       	rjmp	.+18     	; 0x4d4 <__vector_3+0x28>
	{
		bottomEncoderValue--;
     4c2:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <bottomEncoderValue>
     4c6:	91 50       	subi	r25, 0x01	; 1
     4c8:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <bottomEncoderValue>
		encoderPortStates&=0b00001100; //reset our two pins to low. 
     4cc:	8c 70       	andi	r24, 0x0C	; 12
     4ce:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <encoderPortStates>
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <__vector_3+0x2e>
	}
	else
	{
		encoderPortStates|=0b00001101; //we want to set bit 1. 
     4d4:	8d 60       	ori	r24, 0x0D	; 13
     4d6:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <encoderPortStates>
	}
}
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <__vector_4>:

ISR(INT3_vect)
{
     4e8:	1f 92       	push	r1
     4ea:	0f 92       	push	r0
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	0f 92       	push	r0
     4f0:	11 24       	eor	r1, r1
     4f2:	8f 93       	push	r24
     4f4:	9f 93       	push	r25
	if(0b00000001&encoderPortStates)//this means Pin 3 is coming after pin 2
     4f6:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <encoderPortStates>
     4fa:	80 ff       	sbrs	r24, 0
     4fc:	09 c0       	rjmp	.+18     	; 0x510 <__vector_4+0x28>
	{
		bottomEncoderValue++;
     4fe:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <bottomEncoderValue>
     502:	9f 5f       	subi	r25, 0xFF	; 255
     504:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <bottomEncoderValue>
		encoderPortStates&=0b00001100; //reset our two pins to low.
     508:	8c 70       	andi	r24, 0x0C	; 12
     50a:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <encoderPortStates>
     50e:	03 c0       	rjmp	.+6      	; 0x516 <__vector_4+0x2e>
	}
	else
	{
		encoderPortStates|=0b00001110; //we want to set bit 2.
     510:	8e 60       	ori	r24, 0x0E	; 14
     512:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <encoderPortStates>
	}
}
     516:	9f 91       	pop	r25
     518:	8f 91       	pop	r24
     51a:	0f 90       	pop	r0
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	0f 90       	pop	r0
     520:	1f 90       	pop	r1
     522:	18 95       	reti

00000524 <__vector_5>:

ISR(INT4_vect)
{
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
	if(0b00001000&encoderPortStates)//this means Pin 4 is coming after pin 5
     532:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <encoderPortStates>
     536:	83 ff       	sbrs	r24, 3
     538:	09 c0       	rjmp	.+18     	; 0x54c <__vector_5+0x28>
	{
		topEncoderValue++;
     53a:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <topEncoderValue>
     53e:	9f 5f       	subi	r25, 0xFF	; 255
     540:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <topEncoderValue>
		encoderPortStates&=0b00000011; //reset our two pins to low.
     544:	83 70       	andi	r24, 0x03	; 3
     546:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <encoderPortStates>
     54a:	03 c0       	rjmp	.+6      	; 0x552 <__vector_5+0x2e>
	}
	else
	{
		encoderPortStates|=0b00000111; //we want to set bit three.
     54c:	87 60       	ori	r24, 0x07	; 7
     54e:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <encoderPortStates>
	}
}
     552:	9f 91       	pop	r25
     554:	8f 91       	pop	r24
     556:	0f 90       	pop	r0
     558:	0f be       	out	0x3f, r0	; 63
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <__vector_6>:

ISR(INT5_vect)
{
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	8f 93       	push	r24
     56c:	9f 93       	push	r25
	if(0b00000100&encoderPortStates)//this means Pin 3 is coming after pin 2
     56e:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <encoderPortStates>
     572:	82 ff       	sbrs	r24, 2
     574:	09 c0       	rjmp	.+18     	; 0x588 <__vector_6+0x28>
	{
		topEncoderValue--;
     576:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <topEncoderValue>
     57a:	91 50       	subi	r25, 0x01	; 1
     57c:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <topEncoderValue>
		encoderPortStates&=0b00000011; //reset our two pins to low.
     580:	83 70       	andi	r24, 0x03	; 3
     582:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <encoderPortStates>
     586:	03 c0       	rjmp	.+6      	; 0x58e <__vector_6+0x2e>
	}
	else
	{
		encoderPortStates|=0b00001011; //we want to set bit two.
     588:	8b 60       	ori	r24, 0x0B	; 11
     58a:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <encoderPortStates>
	}
}
     58e:	9f 91       	pop	r25
     590:	8f 91       	pop	r24
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti

0000059c <listenEncoders>:


void listenEncoders(Pattern *currentPattern, Globals *currentGlobals)
{
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	ac 01       	movw	r20, r24
     5a6:	db 01       	movw	r26, r22
	if(topEncoderValue!=topEncoderLastValue)
     5a8:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <topEncoderValue>
     5ac:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <topEncoderLastValue>
     5b0:	92 17       	cp	r25, r18
     5b2:	91 f0       	breq	.+36     	; 0x5d8 <listenEncoders+0x3c>
	{
		currentGlobals->menuState = ((topEncoderValue%4)<<4);
     5b4:	89 2f       	mov	r24, r25
     5b6:	83 70       	andi	r24, 0x03	; 3
     5b8:	82 95       	swap	r24
     5ba:	80 7f       	andi	r24, 0xF0	; 240
     5bc:	16 96       	adiw	r26, 0x06	; 6
     5be:	8c 93       	st	X, r24
     5c0:	16 97       	sbiw	r26, 0x06	; 6
		bottomEncoderValue = 0;
     5c2:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <bottomEncoderValue>
		currentGlobals->valueChangeFlag |= (1<<encoderChange);
     5c6:	1a 96       	adiw	r26, 0x0a	; 10
     5c8:	8c 91       	ld	r24, X
     5ca:	1a 97       	sbiw	r26, 0x0a	; 10
     5cc:	81 60       	ori	r24, 0x01	; 1
     5ce:	1a 96       	adiw	r26, 0x0a	; 10
     5d0:	8c 93       	st	X, r24
		topEncoderLastValue = topEncoderValue;
     5d2:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <topEncoderLastValue>
		
		//This seems to fix a bug where when going into performance mode, patternNumber is decremented.
		//may not be the best solution.
		return; 
     5d6:	6e c2       	rjmp	.+1244   	; 0xab4 <listenEncoders+0x518>
	}
	
	if(bottomEncoderValue!=bottomEncoderLastValue)
     5d8:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <bottomEncoderValue>
     5dc:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <bottomEncoderLastValue>
     5e0:	98 17       	cp	r25, r24
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <listenEncoders+0x4a>
     5e4:	67 c2       	rjmp	.+1230   	; 0xab4 <listenEncoders+0x518>
	{
		 uint8_t menuSub = bottomEncoderValue - bottomEncoderLastValue;
     5e6:	98 1b       	sub	r25, r24
		 currentGlobals->valueChangeFlag |= (1<<encoderChange);
     5e8:	1a 96       	adiw	r26, 0x0a	; 10
     5ea:	8c 91       	ld	r24, X
     5ec:	1a 97       	sbiw	r26, 0x0a	; 10
     5ee:	81 60       	ori	r24, 0x01	; 1
     5f0:	1a 96       	adiw	r26, 0x0a	; 10
     5f2:	8c 93       	st	X, r24
     5f4:	1a 97       	sbiw	r26, 0x0a	; 10
		 			//if this value is negative, we increase the menu.
		 			//if positive, we decrement the menu.
		switch(currentGlobals->menuState)
     5f6:	16 96       	adiw	r26, 0x06	; 6
     5f8:	0c 91       	ld	r16, X
     5fa:	16 97       	sbiw	r26, 0x06	; 6
     5fc:	10 e0       	ldi	r17, 0x00	; 0
     5fe:	0b 33       	cpi	r16, 0x3B	; 59
     600:	11 05       	cpc	r17, r1
     602:	08 f0       	brcs	.+2      	; 0x606 <listenEncoders+0x6a>
     604:	53 c2       	rjmp	.+1190   	; 0xaac <listenEncoders+0x510>
     606:	f8 01       	movw	r30, r16
     608:	88 27       	eor	r24, r24
     60a:	ee 58       	subi	r30, 0x8E	; 142
     60c:	ff 4f       	sbci	r31, 0xFF	; 255
     60e:	8f 4f       	sbci	r24, 0xFF	; 255
     610:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__tablejump2__>
		{
			case PreformanceModeInit:
			if(menuSub==1)
     614:	91 30       	cpi	r25, 0x01	; 1
     616:	71 f4       	brne	.+28     	; 0x634 <listenEncoders+0x98>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     618:	13 96       	adiw	r26, 0x03	; 3
     61a:	8c 91       	ld	r24, X
     61c:	13 97       	sbiw	r26, 0x03	; 3
     61e:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     620:	21 f0       	breq	.+8      	; 0x62a <listenEncoders+0x8e>
		switch(currentGlobals->menuState)
		{
			case PreformanceModeInit:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     622:	13 96       	adiw	r26, 0x03	; 3
     624:	8c 93       	st	X, r24
     626:	13 97       	sbiw	r26, 0x03	; 3
     628:	13 c0       	rjmp	.+38     	; 0x650 <listenEncoders+0xb4>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     62a:	8f ef       	ldi	r24, 0xFF	; 255
     62c:	13 96       	adiw	r26, 0x03	; 3
     62e:	8c 93       	st	X, r24
     630:	13 97       	sbiw	r26, 0x03	; 3
     632:	0e c0       	rjmp	.+28     	; 0x650 <listenEncoders+0xb4>
				}
				
			}else if(menuSub==255) //we don't want to hit this when switching menus after changing from the sequencer. 
     634:	9f 3f       	cpi	r25, 0xFF	; 255
     636:	61 f4       	brne	.+24     	; 0x650 <listenEncoders+0xb4>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     638:	13 96       	adiw	r26, 0x03	; 3
     63a:	8c 91       	ld	r24, X
     63c:	13 97       	sbiw	r26, 0x03	; 3
     63e:	81 50       	subi	r24, 0x01	; 1
     640:	20 f0       	brcs	.+8      	; 0x64a <listenEncoders+0xae>
     642:	13 96       	adiw	r26, 0x03	; 3
     644:	8c 93       	st	X, r24
     646:	13 97       	sbiw	r26, 0x03	; 3
     648:	03 c0       	rjmp	.+6      	; 0x650 <listenEncoders+0xb4>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     64a:	13 96       	adiw	r26, 0x03	; 3
     64c:	1c 92       	st	X, r1
     64e:	13 97       	sbiw	r26, 0x03	; 3
				}
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     650:	13 96       	adiw	r26, 0x03	; 3
     652:	6c 91       	ld	r22, X
     654:	ca 01       	movw	r24, r20
     656:	0e 94 9a 1a 	call	0x3534	; 0x3534 <eepromLoadPattern>
			break;
     65a:	28 c2       	rjmp	.+1104   	; 0xaac <listenEncoders+0x510>
			
			case SequencerMenuArrow1:			
			if(menuSub==1)
     65c:	91 30       	cpi	r25, 0x01	; 1
     65e:	21 f4       	brne	.+8      	; 0x668 <listenEncoders+0xcc>
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     660:	83 e1       	ldi	r24, 0x13	; 19
     662:	16 96       	adiw	r26, 0x06	; 6
     664:	8c 93       	st	X, r24
     666:	22 c2       	rjmp	.+1092   	; 0xaac <listenEncoders+0x510>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     668:	82 e1       	ldi	r24, 0x12	; 18
     66a:	16 96       	adiw	r26, 0x06	; 6
     66c:	8c 93       	st	X, r24
     66e:	1e c2       	rjmp	.+1084   	; 0xaac <listenEncoders+0x510>
			}
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
     670:	91 30       	cpi	r25, 0x01	; 1
     672:	71 f4       	brne	.+28     	; 0x690 <listenEncoders+0xf4>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     674:	13 96       	adiw	r26, 0x03	; 3
     676:	8c 91       	ld	r24, X
     678:	13 97       	sbiw	r26, 0x03	; 3
     67a:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     67c:	21 f0       	breq	.+8      	; 0x686 <listenEncoders+0xea>
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     67e:	13 96       	adiw	r26, 0x03	; 3
     680:	8c 93       	st	X, r24
     682:	13 97       	sbiw	r26, 0x03	; 3
     684:	11 c0       	rjmp	.+34     	; 0x6a8 <listenEncoders+0x10c>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     686:	8f ef       	ldi	r24, 0xFF	; 255
     688:	13 96       	adiw	r26, 0x03	; 3
     68a:	8c 93       	st	X, r24
     68c:	13 97       	sbiw	r26, 0x03	; 3
     68e:	0c c0       	rjmp	.+24     	; 0x6a8 <listenEncoders+0x10c>
				}
		
			}else
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     690:	13 96       	adiw	r26, 0x03	; 3
     692:	8c 91       	ld	r24, X
     694:	13 97       	sbiw	r26, 0x03	; 3
     696:	81 50       	subi	r24, 0x01	; 1
     698:	20 f0       	brcs	.+8      	; 0x6a2 <listenEncoders+0x106>
     69a:	13 96       	adiw	r26, 0x03	; 3
     69c:	8c 93       	st	X, r24
     69e:	13 97       	sbiw	r26, 0x03	; 3
     6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <listenEncoders+0x10c>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     6a2:	13 96       	adiw	r26, 0x03	; 3
     6a4:	1c 92       	st	X, r1
     6a6:	13 97       	sbiw	r26, 0x03	; 3
				}	
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     6a8:	13 96       	adiw	r26, 0x03	; 3
     6aa:	6c 91       	ld	r22, X
     6ac:	ca 01       	movw	r24, r20
     6ae:	0e 94 9a 1a 	call	0x3534	; 0x3534 <eepromLoadPattern>
			//this keeps the knob reads that will happen right after the eeprom load to write over the loaded values.
			//Now when you load a pattern, the saved positions of the knobs are unchanged until you turn a knob. 
			break;
     6b2:	fc c1       	rjmp	.+1016   	; 0xaac <listenEncoders+0x510>
			
			case SequencerMenuArrow2:
			if(menuSub==1)
     6b4:	91 30       	cpi	r25, 0x01	; 1
     6b6:	21 f4       	brne	.+8      	; 0x6c0 <listenEncoders+0x124>
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     6b8:	81 e1       	ldi	r24, 0x11	; 17
     6ba:	16 96       	adiw	r26, 0x06	; 6
     6bc:	8c 93       	st	X, r24
     6be:	f6 c1       	rjmp	.+1004   	; 0xaac <listenEncoders+0x510>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     6c0:	83 e1       	ldi	r24, 0x13	; 19
     6c2:	16 96       	adiw	r26, 0x06	; 6
     6c4:	8c 93       	st	X, r24
     6c6:	f2 c1       	rjmp	.+996    	; 0xaac <listenEncoders+0x510>
			}
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
     6c8:	91 30       	cpi	r25, 0x01	; 1
     6ca:	79 f4       	brne	.+30     	; 0x6ea <listenEncoders+0x14e>
			{
				currentPattern->numSteps++;
     6cc:	fa 01       	movw	r30, r20
     6ce:	e6 53       	subi	r30, 0x36	; 54
     6d0:	ff 4f       	sbci	r31, 0xFF	; 255
     6d2:	80 81       	ld	r24, Z
     6d4:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentPattern->numSteps>64)
     6d6:	81 34       	cpi	r24, 0x41	; 65
     6d8:	10 f4       	brcc	.+4      	; 0x6de <listenEncoders+0x142>
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
			{
				currentPattern->numSteps++;
     6da:	80 83       	st	Z, r24
     6dc:	e7 c1       	rjmp	.+974    	; 0xaac <listenEncoders+0x510>
				if(currentPattern->numSteps>64)
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
     6de:	fa 01       	movw	r30, r20
     6e0:	e6 53       	subi	r30, 0x36	; 54
     6e2:	ff 4f       	sbci	r31, 0xFF	; 255
     6e4:	80 e4       	ldi	r24, 0x40	; 64
     6e6:	80 83       	st	Z, r24
     6e8:	e1 c1       	rjmp	.+962    	; 0xaac <listenEncoders+0x510>
				}
			}else
			{
				currentPattern->numSteps--;
     6ea:	fa 01       	movw	r30, r20
     6ec:	e6 53       	subi	r30, 0x36	; 54
     6ee:	ff 4f       	sbci	r31, 0xFF	; 255
     6f0:	90 81       	ld	r25, Z
     6f2:	91 50       	subi	r25, 0x01	; 1
				if(currentPattern->numSteps<1)
     6f4:	11 f0       	breq	.+4      	; 0x6fa <listenEncoders+0x15e>
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
				}
			}else
			{
				currentPattern->numSteps--;
     6f6:	90 83       	st	Z, r25
     6f8:	d9 c1       	rjmp	.+946    	; 0xaac <listenEncoders+0x510>
				if(currentPattern->numSteps<1)
				{//we can't have a 0 step pattern. 
					currentPattern->numSteps=1;
     6fa:	fa 01       	movw	r30, r20
     6fc:	e6 53       	subi	r30, 0x36	; 54
     6fe:	ff 4f       	sbci	r31, 0xFF	; 255
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	80 83       	st	Z, r24
     704:	d3 c1       	rjmp	.+934    	; 0xaac <listenEncoders+0x510>
				}
			}
			break;
			
			case SequencerMenuArrow3:;
			if(menuSub==1)
     706:	91 30       	cpi	r25, 0x01	; 1
     708:	21 f4       	brne	.+8      	; 0x712 <listenEncoders+0x176>
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     70a:	82 e1       	ldi	r24, 0x12	; 18
     70c:	16 96       	adiw	r26, 0x06	; 6
     70e:	8c 93       	st	X, r24
     710:	cd c1       	rjmp	.+922    	; 0xaac <listenEncoders+0x510>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     712:	81 e1       	ldi	r24, 0x11	; 17
     714:	16 96       	adiw	r26, 0x06	; 6
     716:	8c 93       	st	X, r24
     718:	c9 c1       	rjmp	.+914    	; 0xaac <listenEncoders+0x510>
			}
			break;
			
			case SequencerMenuArrow3Select:
			//change current step number
			if(menuSub==1)
     71a:	91 30       	cpi	r25, 0x01	; 1
     71c:	91 f4       	brne	.+36     	; 0x742 <listenEncoders+0x1a6>
			{
				currentGlobals->currentStep++;
     71e:	14 96       	adiw	r26, 0x04	; 4
     720:	9c 91       	ld	r25, X
     722:	14 97       	sbiw	r26, 0x04	; 4
     724:	9f 5f       	subi	r25, 0xFF	; 255
     726:	14 96       	adiw	r26, 0x04	; 4
     728:	9c 93       	st	X, r25
     72a:	14 97       	sbiw	r26, 0x04	; 4
				if(currentGlobals->currentStep>=currentPattern->numSteps)
     72c:	fa 01       	movw	r30, r20
     72e:	e6 53       	subi	r30, 0x36	; 54
     730:	ff 4f       	sbci	r31, 0xFF	; 255
     732:	80 81       	ld	r24, Z
     734:	98 17       	cp	r25, r24
     736:	08 f4       	brcc	.+2      	; 0x73a <listenEncoders+0x19e>
     738:	b9 c1       	rjmp	.+882    	; 0xaac <listenEncoders+0x510>
				{//our ceiling is the maximum number of steps.
					currentGlobals->currentStep=(currentPattern->numSteps)-1;
     73a:	81 50       	subi	r24, 0x01	; 1
     73c:	14 96       	adiw	r26, 0x04	; 4
     73e:	8c 93       	st	X, r24
     740:	b5 c1       	rjmp	.+874    	; 0xaac <listenEncoders+0x510>
				}
			}else
			{
				currentGlobals->currentStep--;
     742:	14 96       	adiw	r26, 0x04	; 4
     744:	9c 91       	ld	r25, X
     746:	14 97       	sbiw	r26, 0x04	; 4
     748:	91 50       	subi	r25, 0x01	; 1
     74a:	14 96       	adiw	r26, 0x04	; 4
     74c:	9c 93       	st	X, r25
     74e:	14 97       	sbiw	r26, 0x04	; 4
				if(currentGlobals->currentStep>currentPattern->numSteps)
     750:	fa 01       	movw	r30, r20
     752:	e6 53       	subi	r30, 0x36	; 54
     754:	ff 4f       	sbci	r31, 0xFF	; 255
     756:	80 81       	ld	r24, Z
     758:	89 17       	cp	r24, r25
     75a:	08 f0       	brcs	.+2      	; 0x75e <listenEncoders+0x1c2>
     75c:	a7 c1       	rjmp	.+846    	; 0xaac <listenEncoders+0x510>
				{//do no write notes to step 0.
					currentGlobals->currentStep=0;
     75e:	14 96       	adiw	r26, 0x04	; 4
     760:	1c 92       	st	X, r1
     762:	a4 c1       	rjmp	.+840    	; 0xaac <listenEncoders+0x510>
				}				
			}
			break;
			
			case TrackMenuArrow1:;
			if(menuSub==1)
     764:	91 30       	cpi	r25, 0x01	; 1
     766:	21 f4       	brne	.+8      	; 0x770 <listenEncoders+0x1d4>
			{
				currentGlobals->menuState = TrackMenuArrow5;
     768:	85 e2       	ldi	r24, 0x25	; 37
     76a:	16 96       	adiw	r26, 0x06	; 6
     76c:	8c 93       	st	X, r24
     76e:	9e c1       	rjmp	.+828    	; 0xaac <listenEncoders+0x510>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow2;
     770:	82 e2       	ldi	r24, 0x22	; 34
     772:	16 96       	adiw	r26, 0x06	; 6
     774:	8c 93       	st	X, r24
     776:	9a c1       	rjmp	.+820    	; 0xaac <listenEncoders+0x510>
			}
			break;
			
			case TrackMenuArrow1Select:;
			uint16_t currentSample = ((currentPattern->trackSampleMSB[currentGlobals->currentTrack])<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     778:	15 96       	adiw	r26, 0x05	; 5
     77a:	6c 91       	ld	r22, X
     77c:	15 97       	sbiw	r26, 0x05	; 5
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	fa 01       	movw	r30, r20
     782:	e6 0f       	add	r30, r22
     784:	f7 1f       	adc	r31, r23
     786:	ef 01       	movw	r28, r30
     788:	c8 56       	subi	r28, 0x68	; 104
     78a:	df 4f       	sbci	r29, 0xFF	; 255
     78c:	28 81       	ld	r18, Y
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	32 2f       	mov	r19, r18
     792:	22 27       	eor	r18, r18
     794:	e8 55       	subi	r30, 0x58	; 88
     796:	ff 4f       	sbci	r31, 0xFF	; 255
     798:	80 81       	ld	r24, Z
     79a:	28 2b       	or	r18, r24
			if(menuSub==1)
     79c:	91 30       	cpi	r25, 0x01	; 1
     79e:	49 f4       	brne	.+18     	; 0x7b2 <listenEncoders+0x216>
     7a0:	2f 5f       	subi	r18, 0xFF	; 255
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	21 30       	cpi	r18, 0x01	; 1
     7a6:	80 e1       	ldi	r24, 0x10	; 16
     7a8:	38 07       	cpc	r19, r24
     7aa:	40 f0       	brcs	.+16     	; 0x7bc <listenEncoders+0x220>
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e1       	ldi	r19, 0x10	; 16
     7b0:	05 c0       	rjmp	.+10     	; 0x7bc <listenEncoders+0x220>
				{//maximum number of indexable samples.
					currentSample=4096;
				}
			}else
			{//no samples in space 0.
				currentSample--;
     7b2:	21 50       	subi	r18, 0x01	; 1
     7b4:	31 09       	sbc	r19, r1
				if(currentSample<1)
     7b6:	11 f4       	brne	.+4      	; 0x7bc <listenEncoders+0x220>
				{
					currentSample=1;
     7b8:	21 e0       	ldi	r18, 0x01	; 1
     7ba:	30 e0       	ldi	r19, 0x00	; 0
				}
			}
			currentPattern->trackSampleLSB[currentGlobals->currentTrack] = (currentSample&0x00FF);//we want to lob off the top 8 bits, just in case. May be unnecessary.
     7bc:	64 0f       	add	r22, r20
     7be:	75 1f       	adc	r23, r21
     7c0:	fb 01       	movw	r30, r22
     7c2:	e8 55       	subi	r30, 0x58	; 88
     7c4:	ff 4f       	sbci	r31, 0xFF	; 255
     7c6:	20 83       	st	Z, r18
			currentPattern->trackSampleMSB[currentGlobals->currentTrack] = (currentSample>>8); 
     7c8:	15 96       	adiw	r26, 0x05	; 5
     7ca:	8c 91       	ld	r24, X
     7cc:	48 0f       	add	r20, r24
     7ce:	51 1d       	adc	r21, r1
     7d0:	fa 01       	movw	r30, r20
     7d2:	e8 56       	subi	r30, 0x68	; 104
     7d4:	ff 4f       	sbci	r31, 0xFF	; 255
     7d6:	30 83       	st	Z, r19
			break;
     7d8:	69 c1       	rjmp	.+722    	; 0xaac <listenEncoders+0x510>
			
			case TrackMenuArrow2:
			if(menuSub==1)
     7da:	91 30       	cpi	r25, 0x01	; 1
     7dc:	21 f4       	brne	.+8      	; 0x7e6 <listenEncoders+0x24a>
			{
				currentGlobals->menuState = TrackMenuArrow1;
     7de:	81 e2       	ldi	r24, 0x21	; 33
     7e0:	16 96       	adiw	r26, 0x06	; 6
     7e2:	8c 93       	st	X, r24
     7e4:	63 c1       	rjmp	.+710    	; 0xaac <listenEncoders+0x510>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow3;
     7e6:	83 e2       	ldi	r24, 0x23	; 35
     7e8:	16 96       	adiw	r26, 0x06	; 6
     7ea:	8c 93       	st	X, r24
     7ec:	5f c1       	rjmp	.+702    	; 0xaac <listenEncoders+0x510>
			
			case TrackMenuArrow2Select:
			//change play mode of currently selected track
			//since we only have two play modes currently,
			//we only need to flip the play mode.
			currentPattern->trackPlayMode[currentGlobals->currentTrack] = (!(currentPattern->trackPlayMode[currentGlobals->currentTrack]))&(0b00000001);
     7ee:	15 96       	adiw	r26, 0x05	; 5
     7f0:	8c 91       	ld	r24, X
     7f2:	48 0f       	add	r20, r24
     7f4:	51 1d       	adc	r21, r1
     7f6:	fa 01       	movw	r30, r20
     7f8:	e8 57       	subi	r30, 0x78	; 120
     7fa:	ff 4f       	sbci	r31, 0xFF	; 255
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	90 81       	ld	r25, Z
     800:	91 11       	cpse	r25, r1
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	80 83       	st	Z, r24
			//flip all bits, mask for first bit. 
			break;
     806:	52 c1       	rjmp	.+676    	; 0xaac <listenEncoders+0x510>
			
			case TrackMenuArrow3:
			if(menuSub==1)
     808:	91 30       	cpi	r25, 0x01	; 1
     80a:	21 f4       	brne	.+8      	; 0x814 <listenEncoders+0x278>
			{
				currentGlobals->menuState = TrackMenuArrow2;
     80c:	82 e2       	ldi	r24, 0x22	; 34
     80e:	16 96       	adiw	r26, 0x06	; 6
     810:	8c 93       	st	X, r24
     812:	4c c1       	rjmp	.+664    	; 0xaac <listenEncoders+0x510>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow4;
     814:	84 e2       	ldi	r24, 0x24	; 36
     816:	16 96       	adiw	r26, 0x06	; 6
     818:	8c 93       	st	X, r24
     81a:	48 c1       	rjmp	.+656    	; 0xaac <listenEncoders+0x510>
			}
			break;
			
			case TrackMenuArrow3Select:
			
			if(menuSub==1)
     81c:	91 30       	cpi	r25, 0x01	; 1
     81e:	c9 f4       	brne	.+50     	; 0x852 <listenEncoders+0x2b6>
			{
				//indexing might be an issue here, don't remember if this is 0 indexed or not. 
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1 ;
     820:	15 96       	adiw	r26, 0x05	; 5
     822:	8c 91       	ld	r24, X
     824:	15 97       	sbiw	r26, 0x05	; 5
     826:	fa 01       	movw	r30, r20
     828:	e8 0f       	add	r30, r24
     82a:	f1 1d       	adc	r31, r1
     82c:	80 8d       	ldd	r24, Z+24	; 0x18
     82e:	8f 5f       	subi	r24, 0xFF	; 255
     830:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     832:	15 96       	adiw	r26, 0x05	; 5
     834:	8c 91       	ld	r24, X
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	fa 01       	movw	r30, r20
     83a:	e8 0f       	add	r30, r24
     83c:	f9 1f       	adc	r31, r25
     83e:	20 8d       	ldd	r18, Z+24	; 0x18
     840:	28 30       	cpi	r18, 0x08	; 8
     842:	08 f4       	brcc	.+2      	; 0x846 <listenEncoders+0x2aa>
     844:	33 c1       	rjmp	.+614    	; 0xaac <listenEncoders+0x510>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=7;
     846:	fa 01       	movw	r30, r20
     848:	e8 0f       	add	r30, r24
     84a:	f9 1f       	adc	r31, r25
     84c:	87 e0       	ldi	r24, 0x07	; 7
     84e:	80 8f       	std	Z+24, r24	; 0x18
     850:	2d c1       	rjmp	.+602    	; 0xaac <listenEncoders+0x510>
				}
			}else
			{
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])-1;
     852:	15 96       	adiw	r26, 0x05	; 5
     854:	8c 91       	ld	r24, X
     856:	15 97       	sbiw	r26, 0x05	; 5
     858:	fa 01       	movw	r30, r20
     85a:	e8 0f       	add	r30, r24
     85c:	f1 1d       	adc	r31, r1
     85e:	80 8d       	ldd	r24, Z+24	; 0x18
     860:	81 50       	subi	r24, 0x01	; 1
     862:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     864:	15 96       	adiw	r26, 0x05	; 5
     866:	8c 91       	ld	r24, X
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	fa 01       	movw	r30, r20
     86c:	e8 0f       	add	r30, r24
     86e:	f9 1f       	adc	r31, r25
     870:	20 8d       	ldd	r18, Z+24	; 0x18
     872:	28 30       	cpi	r18, 0x08	; 8
     874:	08 f4       	brcc	.+2      	; 0x878 <listenEncoders+0x2dc>
     876:	1a c1       	rjmp	.+564    	; 0xaac <listenEncoders+0x510>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=0;
     878:	fa 01       	movw	r30, r20
     87a:	e8 0f       	add	r30, r24
     87c:	f9 1f       	adc	r31, r25
     87e:	10 8e       	std	Z+24, r1	; 0x18
     880:	15 c1       	rjmp	.+554    	; 0xaac <listenEncoders+0x510>
				}
			}
			break;
			
			case TrackMenuArrow4:
			if(menuSub==1)
     882:	91 30       	cpi	r25, 0x01	; 1
     884:	21 f4       	brne	.+8      	; 0x88e <listenEncoders+0x2f2>
			{
				currentGlobals->menuState = TrackMenuArrow3;
     886:	83 e2       	ldi	r24, 0x23	; 35
     888:	16 96       	adiw	r26, 0x06	; 6
     88a:	8c 93       	st	X, r24
     88c:	0f c1       	rjmp	.+542    	; 0xaac <listenEncoders+0x510>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow5;
     88e:	85 e2       	ldi	r24, 0x25	; 37
     890:	16 96       	adiw	r26, 0x06	; 6
     892:	8c 93       	st	X, r24
     894:	0b c1       	rjmp	.+534    	; 0xaac <listenEncoders+0x510>
			}
			break;
			
			case TrackMenuArrow4Select:
			if(menuSub==1)
     896:	91 30       	cpi	r25, 0x01	; 1
     898:	f9 f4       	brne	.+62     	; 0x8d8 <listenEncoders+0x33c>
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])++;
     89a:	15 96       	adiw	r26, 0x05	; 5
     89c:	8c 91       	ld	r24, X
     89e:	15 97       	sbiw	r26, 0x05	; 5
     8a0:	fa 01       	movw	r30, r20
     8a2:	e8 0f       	add	r30, r24
     8a4:	f1 1d       	adc	r31, r1
     8a6:	e5 51       	subi	r30, 0x15	; 21
     8a8:	ff 4f       	sbci	r31, 0xFF	; 255
     8aa:	80 81       	ld	r24, Z
     8ac:	8f 5f       	subi	r24, 0xFF	; 255
     8ae:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>3)
     8b0:	15 96       	adiw	r26, 0x05	; 5
     8b2:	8c 91       	ld	r24, X
     8b4:	15 97       	sbiw	r26, 0x05	; 5
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	fa 01       	movw	r30, r20
     8ba:	e8 0f       	add	r30, r24
     8bc:	f9 1f       	adc	r31, r25
     8be:	e5 51       	subi	r30, 0x15	; 21
     8c0:	ff 4f       	sbci	r31, 0xFF	; 255
     8c2:	20 81       	ld	r18, Z
     8c4:	24 30       	cpi	r18, 0x04	; 4
     8c6:	28 f1       	brcs	.+74     	; 0x912 <listenEncoders+0x376>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=3;
     8c8:	84 0f       	add	r24, r20
     8ca:	95 1f       	adc	r25, r21
     8cc:	fc 01       	movw	r30, r24
     8ce:	e5 51       	subi	r30, 0x15	; 21
     8d0:	ff 4f       	sbci	r31, 0xFF	; 255
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	80 83       	st	Z, r24
     8d6:	1d c0       	rjmp	.+58     	; 0x912 <listenEncoders+0x376>
				}
			}else
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])--;
     8d8:	15 96       	adiw	r26, 0x05	; 5
     8da:	8c 91       	ld	r24, X
     8dc:	15 97       	sbiw	r26, 0x05	; 5
     8de:	fa 01       	movw	r30, r20
     8e0:	e8 0f       	add	r30, r24
     8e2:	f1 1d       	adc	r31, r1
     8e4:	e5 51       	subi	r30, 0x15	; 21
     8e6:	ff 4f       	sbci	r31, 0xFF	; 255
     8e8:	80 81       	ld	r24, Z
     8ea:	81 50       	subi	r24, 0x01	; 1
     8ec:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>3)
     8ee:	15 96       	adiw	r26, 0x05	; 5
     8f0:	8c 91       	ld	r24, X
     8f2:	15 97       	sbiw	r26, 0x05	; 5
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	fa 01       	movw	r30, r20
     8f8:	e8 0f       	add	r30, r24
     8fa:	f9 1f       	adc	r31, r25
     8fc:	e5 51       	subi	r30, 0x15	; 21
     8fe:	ff 4f       	sbci	r31, 0xFF	; 255
     900:	20 81       	ld	r18, Z
     902:	24 30       	cpi	r18, 0x04	; 4
     904:	30 f0       	brcs	.+12     	; 0x912 <listenEncoders+0x376>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=0;
     906:	84 0f       	add	r24, r20
     908:	95 1f       	adc	r25, r21
     90a:	fc 01       	movw	r30, r24
     90c:	e5 51       	subi	r30, 0x15	; 21
     90e:	ff 4f       	sbci	r31, 0xFF	; 255
     910:	10 82       	st	Z, r1
				}
			}
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
     912:	15 96       	adiw	r26, 0x05	; 5
     914:	8c 91       	ld	r24, X
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	fa 01       	movw	r30, r20
     91a:	e8 0f       	add	r30, r24
     91c:	f9 1f       	adc	r31, r25
     91e:	e5 51       	subi	r30, 0x15	; 21
     920:	ff 4f       	sbci	r31, 0xFF	; 255
     922:	20 81       	ld	r18, Z
     924:	2d 7f       	andi	r18, 0xFD	; 253
     926:	89 f4       	brne	.+34     	; 0x94a <listenEncoders+0x3ae>
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
     928:	48 0f       	add	r20, r24
     92a:	59 1f       	adc	r21, r25
     92c:	fa 01       	movw	r30, r20
     92e:	e8 56       	subi	r30, 0x68	; 104
     930:	ff 4f       	sbci	r31, 0xFF	; 255
     932:	60 81       	ld	r22, Z
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	70 96       	adiw	r30, 0x10	; 16
     938:	80 81       	ld	r24, Z
     93a:	2a eb       	ldi	r18, 0xBA	; 186
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	4f ef       	ldi	r20, 0xFF	; 255
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <setTrackVolume>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=0;
				}
			}
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
			{
     948:	b1 c0       	rjmp	.+354    	; 0xaac <listenEncoders+0x510>
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
			}else
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],
				currentPattern->trackMainVolumeLSB[currentGlobals->currentTrack],currentPattern->trackMainVolumeMSB[currentGlobals->currentTrack]);		
     94a:	fa 01       	movw	r30, r20
     94c:	e8 0f       	add	r30, r24
     94e:	f9 1f       	adc	r31, r25
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
			}else
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],
     950:	20 a5       	ldd	r18, Z+40	; 0x28
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 ad       	ldd	r20, Z+56	; 0x38
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	df 01       	movw	r26, r30
     95a:	a8 56       	subi	r26, 0x68	; 104
     95c:	bf 4f       	sbci	r27, 0xFF	; 255
     95e:	6c 91       	ld	r22, X
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	e8 55       	subi	r30, 0x58	; 88
     964:	ff 4f       	sbci	r31, 0xFF	; 255
     966:	80 81       	ld	r24, Z
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <setTrackVolume>
     96e:	9e c0       	rjmp	.+316    	; 0xaac <listenEncoders+0x510>
				currentPattern->trackMainVolumeLSB[currentGlobals->currentTrack],currentPattern->trackMainVolumeMSB[currentGlobals->currentTrack]);		
			}
			break;
			
			case TrackMenuArrow5:
			if(menuSub==1)
     970:	91 30       	cpi	r25, 0x01	; 1
     972:	21 f4       	brne	.+8      	; 0x97c <listenEncoders+0x3e0>
			{
				currentGlobals->menuState = TrackMenuArrow4;
     974:	84 e2       	ldi	r24, 0x24	; 36
     976:	16 96       	adiw	r26, 0x06	; 6
     978:	8c 93       	st	X, r24
     97a:	98 c0       	rjmp	.+304    	; 0xaac <listenEncoders+0x510>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow1;
     97c:	81 e2       	ldi	r24, 0x21	; 33
     97e:	16 96       	adiw	r26, 0x06	; 6
     980:	8c 93       	st	X, r24
     982:	94 c0       	rjmp	.+296    	; 0xaac <listenEncoders+0x510>
			}
			break;
			
			case TrackMenuArrow5Select:;
			uint16_t sustainTime = (currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack])|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);	
     984:	15 96       	adiw	r26, 0x05	; 5
     986:	6c 91       	ld	r22, X
     988:	15 97       	sbiw	r26, 0x05	; 5
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	fa 01       	movw	r30, r20
     98e:	e6 0f       	add	r30, r22
     990:	f7 1f       	adc	r31, r23
     992:	ef 01       	movw	r28, r30
     994:	c5 53       	subi	r28, 0x35	; 53
     996:	df 4f       	sbci	r29, 0xFF	; 255
     998:	28 81       	ld	r18, Y
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	32 2f       	mov	r19, r18
     99e:	22 27       	eor	r18, r18
     9a0:	e5 52       	subi	r30, 0x25	; 37
     9a2:	ff 4f       	sbci	r31, 0xFF	; 255
     9a4:	80 81       	ld	r24, Z
     9a6:	28 2b       	or	r18, r24
			if(menuSub==1)
     9a8:	91 30       	cpi	r25, 0x01	; 1
     9aa:	91 f4       	brne	.+36     	; 0x9d0 <listenEncoders+0x434>
			{
				if((currentGlobals->currentGPButtons)&(0x04))
     9ac:	12 96       	adiw	r26, 0x02	; 2
     9ae:	8c 91       	ld	r24, X
     9b0:	12 97       	sbiw	r26, 0x02	; 2
     9b2:	82 ff       	sbrs	r24, 2
     9b4:	03 c0       	rjmp	.+6      	; 0x9bc <listenEncoders+0x420>
				{
					sustainTime++;
     9b6:	c9 01       	movw	r24, r18
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <listenEncoders+0x426>
				}
				else
				{
					sustainTime = sustainTime+236;
     9bc:	c9 01       	movw	r24, r18
     9be:	84 51       	subi	r24, 0x14	; 20
     9c0:	9f 4f       	sbci	r25, 0xFF	; 255
     9c2:	81 36       	cpi	r24, 0x61	; 97
     9c4:	2a ee       	ldi	r18, 0xEA	; 234
     9c6:	92 07       	cpc	r25, r18
     9c8:	a0 f0       	brcs	.+40     	; 0x9f2 <listenEncoders+0x456>
     9ca:	80 e6       	ldi	r24, 0x60	; 96
     9cc:	9a ee       	ldi	r25, 0xEA	; 234
     9ce:	11 c0       	rjmp	.+34     	; 0x9f2 <listenEncoders+0x456>
				{
					sustainTime = 60000;
				}
			}else
			{
				if((currentGlobals->currentGPButtons)&(0x04))
     9d0:	12 96       	adiw	r26, 0x02	; 2
     9d2:	8c 91       	ld	r24, X
     9d4:	12 97       	sbiw	r26, 0x02	; 2
     9d6:	82 ff       	sbrs	r24, 2
     9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <listenEncoders+0x444>
				{
					sustainTime--;
     9da:	c9 01       	movw	r24, r18
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	03 c0       	rjmp	.+6      	; 0x9e6 <listenEncoders+0x44a>
				}else
				{	
					sustainTime = sustainTime - 236;
     9e0:	c9 01       	movw	r24, r18
     9e2:	8c 5e       	subi	r24, 0xEC	; 236
     9e4:	91 09       	sbc	r25, r1
				}
				
				if(sustainTime>60000)
     9e6:	81 36       	cpi	r24, 0x61	; 97
     9e8:	2a ee       	ldi	r18, 0xEA	; 234
     9ea:	92 07       	cpc	r25, r18
     9ec:	10 f0       	brcs	.+4      	; 0x9f2 <listenEncoders+0x456>
				{
					sustainTime = 0;
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
			currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack] = (sustainTime>>8);
     9f2:	64 0f       	add	r22, r20
     9f4:	75 1f       	adc	r23, r21
     9f6:	fb 01       	movw	r30, r22
     9f8:	e5 53       	subi	r30, 0x35	; 53
     9fa:	ff 4f       	sbci	r31, 0xFF	; 255
     9fc:	90 83       	st	Z, r25
			currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] = sustainTime; //upper bits will be truncated.
     9fe:	15 96       	adiw	r26, 0x05	; 5
     a00:	9c 91       	ld	r25, X
     a02:	49 0f       	add	r20, r25
     a04:	51 1d       	adc	r21, r1
     a06:	fa 01       	movw	r30, r20
     a08:	e5 52       	subi	r30, 0x25	; 37
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 83       	st	Z, r24

			break;
     a0e:	4e c0       	rjmp	.+156    	; 0xaac <listenEncoders+0x510>
			
			case GlobalMenuArrow1:
			if(menuSub==1)
     a10:	91 30       	cpi	r25, 0x01	; 1
     a12:	21 f4       	brne	.+8      	; 0xa1c <listenEncoders+0x480>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     a14:	81 e3       	ldi	r24, 0x31	; 49
     a16:	16 96       	adiw	r26, 0x06	; 6
     a18:	8c 93       	st	X, r24
     a1a:	48 c0       	rjmp	.+144    	; 0xaac <listenEncoders+0x510>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     a1c:	82 e3       	ldi	r24, 0x32	; 50
     a1e:	16 96       	adiw	r26, 0x06	; 6
     a20:	8c 93       	st	X, r24
     a22:	44 c0       	rjmp	.+136    	; 0xaac <listenEncoders+0x510>
			}
			break;
			
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
     a24:	91 30       	cpi	r25, 0x01	; 1
     a26:	69 f4       	brne	.+26     	; 0xa42 <listenEncoders+0x4a6>
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     a28:	1c 96       	adiw	r26, 0x0c	; 12
     a2a:	8c 91       	ld	r24, X
     a2c:	1c 97       	sbiw	r26, 0x0c	; 12
     a2e:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->midiChannel>15)
     a30:	80 31       	cpi	r24, 0x10	; 16
     a32:	18 f4       	brcc	.+6      	; 0xa3a <listenEncoders+0x49e>
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     a34:	1c 96       	adiw	r26, 0x0c	; 12
     a36:	8c 93       	st	X, r24
     a38:	39 c0       	rjmp	.+114    	; 0xaac <listenEncoders+0x510>
				if(currentGlobals->midiChannel>15)
				{
					currentGlobals->midiChannel=15;
     a3a:	8f e0       	ldi	r24, 0x0F	; 15
     a3c:	1c 96       	adiw	r26, 0x0c	; 12
     a3e:	8c 93       	st	X, r24
     a40:	35 c0       	rjmp	.+106    	; 0xaac <listenEncoders+0x510>
				}
			}
			else
			{
				//decrement midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)-1;
     a42:	1c 96       	adiw	r26, 0x0c	; 12
     a44:	8c 91       	ld	r24, X
     a46:	1c 97       	sbiw	r26, 0x0c	; 12
     a48:	81 50       	subi	r24, 0x01	; 1
     a4a:	18 f0       	brcs	.+6      	; 0xa52 <listenEncoders+0x4b6>
     a4c:	1c 96       	adiw	r26, 0x0c	; 12
     a4e:	8c 93       	st	X, r24
     a50:	2d c0       	rjmp	.+90     	; 0xaac <listenEncoders+0x510>
				if(currentGlobals->midiChannel>254)
				{
					currentGlobals->midiChannel=0;
     a52:	1c 96       	adiw	r26, 0x0c	; 12
     a54:	1c 92       	st	X, r1
     a56:	2a c0       	rjmp	.+84     	; 0xaac <listenEncoders+0x510>
				}
			}
			break;
			
			case GlobalMenuArrow2:
			if(menuSub==1)
     a58:	91 30       	cpi	r25, 0x01	; 1
     a5a:	21 f4       	brne	.+8      	; 0xa64 <listenEncoders+0x4c8>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     a5c:	81 e3       	ldi	r24, 0x31	; 49
     a5e:	16 96       	adiw	r26, 0x06	; 6
     a60:	8c 93       	st	X, r24
     a62:	24 c0       	rjmp	.+72     	; 0xaac <listenEncoders+0x510>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     a64:	82 e3       	ldi	r24, 0x32	; 50
     a66:	16 96       	adiw	r26, 0x06	; 6
     a68:	8c 93       	st	X, r24
     a6a:	20 c0       	rjmp	.+64     	; 0xaac <listenEncoders+0x510>
			break;
			
			case GlobalMenuArrow2Select:;
			//change midi note for selected track.
			//midi range is 0 to 127.
			uint8_t currentMidiNote = currentGlobals->midiTrackNote[currentGlobals->currentTrack];
     a6c:	15 96       	adiw	r26, 0x05	; 5
     a6e:	2c 91       	ld	r18, X
     a70:	15 97       	sbiw	r26, 0x05	; 5
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	fb 01       	movw	r30, r22
     a76:	e2 0f       	add	r30, r18
     a78:	f3 1f       	adc	r31, r19
     a7a:	85 85       	ldd	r24, Z+13	; 0x0d
			if(menuSub==1)
     a7c:	91 30       	cpi	r25, 0x01	; 1
     a7e:	21 f4       	brne	.+8      	; 0xa88 <listenEncoders+0x4ec>
			{
				//not 100% sure how to set this up.
				currentMidiNote++;
     a80:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentMidiNote>127)
     a82:	32 f4       	brpl	.+12     	; 0xa90 <listenEncoders+0x4f4>
				{
					currentMidiNote = 127;
     a84:	8f e7       	ldi	r24, 0x7F	; 127
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <listenEncoders+0x4f4>
				}
			}else
			{
				currentMidiNote--;
     a88:	81 50       	subi	r24, 0x01	; 1
				if(currentMidiNote>128)
     a8a:	81 38       	cpi	r24, 0x81	; 129
     a8c:	08 f0       	brcs	.+2      	; 0xa90 <listenEncoders+0x4f4>
				{
					currentMidiNote = 0;
     a8e:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			currentGlobals->midiTrackNote[currentGlobals->currentTrack] = currentMidiNote;
     a90:	a2 0f       	add	r26, r18
     a92:	b3 1f       	adc	r27, r19
     a94:	1d 96       	adiw	r26, 0x0d	; 13
     a96:	8c 93       	st	X, r24
			break;
     a98:	09 c0       	rjmp	.+18     	; 0xaac <listenEncoders+0x510>
			
			case GlobalMenuArrow3:
			//currently unreachable, no settings live here atm		
			if(menuSub==1)
     a9a:	91 30       	cpi	r25, 0x01	; 1
     a9c:	21 f4       	brne	.+8      	; 0xaa6 <listenEncoders+0x50a>
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     a9e:	82 e3       	ldi	r24, 0x32	; 50
     aa0:	16 96       	adiw	r26, 0x06	; 6
     aa2:	8c 93       	st	X, r24
     aa4:	03 c0       	rjmp	.+6      	; 0xaac <listenEncoders+0x510>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     aa6:	81 e3       	ldi	r24, 0x31	; 49
     aa8:	16 96       	adiw	r26, 0x06	; 6
     aaa:	8c 93       	st	X, r24
			
			case GlobalMenuArrow3Select:
			//nothing to put here yet.
			break;
		}
		bottomEncoderLastValue = bottomEncoderValue;
     aac:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <bottomEncoderValue>
     ab0:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <bottomEncoderLastValue>
		//menuSub=0;
	}
}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	08 95       	ret

00000abe <initArrays>:
#include "globalVariables.h"
#include <string.h>

//takes an array less than 20 and fills it with blank characters
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	ec 01       	movw	r28, r24
	uint8_t lengthOfString = strlen(myString);
     ac8:	fa 01       	movw	r30, r20
     aca:	01 90       	ld	r0, Z+
     acc:	00 20       	and	r0, r0
     ace:	e9 f7       	brne	.-6      	; 0xaca <initArrays+0xc>
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	8f 01       	movw	r16, r30
     ad4:	04 1b       	sub	r16, r20
     ad6:	15 0b       	sbc	r17, r21
     ad8:	90 2f       	mov	r25, r16
	uint8_t charLeft = 20 - lengthOfString;
     ada:	84 e1       	ldi	r24, 0x14	; 20
     adc:	80 1b       	sub	r24, r16
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     ade:	00 23       	and	r16, r16
     ae0:	a9 f0       	breq	.+42     	; 0xb0c <initArrays+0x4e>
     ae2:	fa 01       	movw	r30, r20
     ae4:	25 e1       	ldi	r18, 0x15	; 21
     ae6:	26 9f       	mul	r18, r22
     ae8:	d0 01       	movw	r26, r0
     aea:	27 9f       	mul	r18, r23
     aec:	b0 0d       	add	r27, r0
     aee:	11 24       	eor	r1, r1
     af0:	ac 0f       	add	r26, r28
     af2:	bd 1f       	adc	r27, r29
     af4:	2f ef       	ldi	r18, 0xFF	; 255
     af6:	20 0f       	add	r18, r16
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	2f 5f       	subi	r18, 0xFF	; 255
     afc:	3f 4f       	sbci	r19, 0xFF	; 255
     afe:	42 0f       	add	r20, r18
     b00:	53 1f       	adc	r21, r19
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     b02:	21 91       	ld	r18, Z+
     b04:	2d 93       	st	X+, r18
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
	uint8_t lengthOfString = strlen(myString);
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     b06:	e4 17       	cp	r30, r20
     b08:	f5 07       	cpc	r31, r21
     b0a:	d9 f7       	brne	.-10     	; 0xb02 <initArrays+0x44>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     b0c:	88 23       	and	r24, r24
     b0e:	89 f0       	breq	.+34     	; 0xb32 <initArrays+0x74>
	{
		myArray[stringNumber][currentIndex] = ' ';
     b10:	45 e1       	ldi	r20, 0x15	; 21
     b12:	46 9f       	mul	r20, r22
     b14:	90 01       	movw	r18, r0
     b16:	47 9f       	mul	r20, r23
     b18:	30 0d       	add	r19, r0
     b1a:	11 24       	eor	r1, r1
     b1c:	c2 0f       	add	r28, r18
     b1e:	d3 1f       	adc	r29, r19
     b20:	08 0f       	add	r16, r24
     b22:	80 e2       	ldi	r24, 0x20	; 32
     b24:	fe 01       	movw	r30, r28
     b26:	e9 0f       	add	r30, r25
     b28:	f1 1d       	adc	r31, r1
     b2a:	80 83       	st	Z, r24
		currentIndex++;
     b2c:	9f 5f       	subi	r25, 0xFF	; 255
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     b2e:	90 13       	cpse	r25, r16
     b30:	f9 cf       	rjmp	.-14     	; 0xb24 <initArrays+0x66>
	{
		myArray[stringNumber][currentIndex] = ' ';
		currentIndex++;
	}
}
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	08 95       	ret

00000b3c <initBank>:

void initBank(Pattern *currentInitPattern)
{
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	ac 01       	movw	r20, r24
     b42:	fc 01       	movw	r30, r24
     b44:	e8 55       	subi	r30, 0x58	; 88
     b46:	ff 4f       	sbci	r31, 0xFF	; 255
     b48:	ec 01       	movw	r28, r24
     b4a:	c8 57       	subi	r28, 0x78	; 120
     b4c:	df 4f       	sbci	r29, 0xFF	; 255
     b4e:	dc 01       	movw	r26, r24
     b50:	a5 51       	subi	r26, 0x15	; 21
     b52:	bf 4f       	sbci	r27, 0xFF	; 255
	for(uint8_t i = 0; i<16; i++)
     b54:	90 e0       	ldi	r25, 0x00	; 0
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
    currentInitPattern->trackPlayMode[i] = 0x01;
     b56:	31 e0       	ldi	r19, 0x01	; 1
	currentInitPattern->envelopeType[i] = 3;
     b58:	23 e0       	ldi	r18, 0x03	; 3

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
     b5a:	9f 5f       	subi	r25, 0xFF	; 255
     b5c:	91 93       	st	Z+, r25
    currentInitPattern->trackPlayMode[i] = 0x01;
     b5e:	39 93       	st	Y+, r19
	currentInitPattern->envelopeType[i] = 3;
     b60:	2d 93       	st	X+, r18
	currentInitPattern->trackSustainTimeLSB[i] = 0;
     b62:	12 aa       	std	Z+50, r1	; 0x32
	currentInitPattern->trackSustainTimeMSB[i] = 0;
     b64:	12 a2       	std	Z+34, r1	; 0x22
	}
}

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
     b66:	90 31       	cpi	r25, 0x10	; 16
     b68:	c1 f7       	brne	.-16     	; 0xb5a <initBank+0x1e>
     b6a:	fa 01       	movw	r30, r20
     b6c:	e5 50       	subi	r30, 0x05	; 5
     b6e:	ff 4f       	sbci	r31, 0xFF	; 255
     b70:	9a 01       	movw	r18, r20
     b72:	25 58       	subi	r18, 0x85	; 133
     b74:	3e 4f       	sbci	r19, 0xFE	; 254
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     b76:	11 92       	st	Z+, r1
     b78:	11 92       	st	Z+, r1
	currentInitPattern->envelopeType[i] = 3;
	currentInitPattern->trackSustainTimeLSB[i] = 0;
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
     b7a:	e2 17       	cp	r30, r18
     b7c:	f3 07       	cpc	r31, r19
     b7e:	d9 f7       	brne	.-10     	; 0xb76 <initBank+0x3a>
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
 
  }
  //We need to take these and put them in global. 
  currentInitPattern->patternBPM = 120;
     b80:	fa 01       	movw	r30, r20
     b82:	e8 53       	subi	r30, 0x38	; 56
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	88 e7       	ldi	r24, 0x78	; 120
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	91 83       	std	Z+1, r25	; 0x01
     b8c:	80 83       	st	Z, r24
  currentInitPattern->numSteps = 16;
     b8e:	32 96       	adiw	r30, 0x02	; 2
     b90:	80 e1       	ldi	r24, 0x10	; 16
     b92:	80 83       	st	Z, r24
}
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	08 95       	ret

00000b9a <initGlobals>:

void initGlobals(Globals *currentGlobals, uint8_t factoryReset)
{
     b9a:	fc 01       	movw	r30, r24
		currentGlobals->currentTrigButtons=0; //current state of Trig buttons.
     b9c:	11 82       	std	Z+1, r1	; 0x01
     b9e:	10 82       	st	Z, r1
		currentGlobals->currentGPButtons=0; //current state of GP buttons
     ba0:	12 82       	std	Z+2, r1	; 0x02
		currentGlobals->currentPatternNumber=0; //current pattern, between 1 and 256
     ba2:	13 82       	std	Z+3, r1	; 0x03
		currentGlobals->currentStep=0; // current step in the sequencer
     ba4:	14 82       	std	Z+4, r1	; 0x04
		currentGlobals->currentTrack=0; //current track being edited
     ba6:	15 82       	std	Z+5, r1	; 0x05
		currentGlobals->menuState=0; //where the menu is currently
     ba8:	16 82       	std	Z+6, r1	; 0x06
		currentGlobals->playState=0; //whether the sequencer is playing, stopped, or paused.
     baa:	17 82       	std	Z+7, r1	; 0x07
		currentGlobals->factoryReset=0; //we may not need this in this struct, but good to have for now.
     bac:	10 86       	std	Z+8, r1	; 0x08
		currentGlobals->buttonSwitchFlag=0; // could be rolled into value bits.
     bae:	11 86       	std	Z+9, r1	; 0x09
		currentGlobals->valueChangeFlag=0; //bit 0 -> changes in encoders, bit 1-> changes in buttons, bit2 -> changes in knobs
     bb0:	12 86       	std	Z+10, r1	; 0x0a
		currentGlobals->knobStatus=0; //top 4 bits: knob type, bottom 4 bits: knob location.
     bb2:	13 86       	std	Z+11, r1	; 0x0b
		
		if(factoryReset==1)
     bb4:	61 30       	cpi	r22, 0x01	; 1
     bb6:	09 f5       	brne	.+66     	; 0xbfa <initGlobals+0x60>
		{
			currentGlobals->midiChannel=0;
     bb8:	14 86       	std	Z+12, r1	; 0x0c
			currentGlobals->midiTrackNote[0] = 0x24;
     bba:	84 e2       	ldi	r24, 0x24	; 36
     bbc:	85 87       	std	Z+13, r24	; 0x0d
			currentGlobals->midiTrackNote[1] = 0x25;
     bbe:	85 e2       	ldi	r24, 0x25	; 37
     bc0:	86 87       	std	Z+14, r24	; 0x0e
			currentGlobals->midiTrackNote[2] = 0x26;
     bc2:	86 e2       	ldi	r24, 0x26	; 38
     bc4:	87 87       	std	Z+15, r24	; 0x0f
			currentGlobals->midiTrackNote[3] = 0x27;
     bc6:	87 e2       	ldi	r24, 0x27	; 39
     bc8:	80 8b       	std	Z+16, r24	; 0x10
			currentGlobals->midiTrackNote[4] = 0x28;
     bca:	88 e2       	ldi	r24, 0x28	; 40
     bcc:	81 8b       	std	Z+17, r24	; 0x11
			currentGlobals->midiTrackNote[5] = 0x29;
     bce:	89 e2       	ldi	r24, 0x29	; 41
     bd0:	82 8b       	std	Z+18, r24	; 0x12
			currentGlobals->midiTrackNote[6] = 0x2a;
     bd2:	8a e2       	ldi	r24, 0x2A	; 42
     bd4:	83 8b       	std	Z+19, r24	; 0x13
			currentGlobals->midiTrackNote[7] = 0x2b;
     bd6:	8b e2       	ldi	r24, 0x2B	; 43
     bd8:	84 8b       	std	Z+20, r24	; 0x14
			currentGlobals->midiTrackNote[8] = 0x2c;
     bda:	8c e2       	ldi	r24, 0x2C	; 44
     bdc:	85 8b       	std	Z+21, r24	; 0x15
			currentGlobals->midiTrackNote[9] = 0x2d;
     bde:	8d e2       	ldi	r24, 0x2D	; 45
     be0:	86 8b       	std	Z+22, r24	; 0x16
			currentGlobals->midiTrackNote[10] = 0x2e;
     be2:	8e e2       	ldi	r24, 0x2E	; 46
     be4:	87 8b       	std	Z+23, r24	; 0x17
			currentGlobals->midiTrackNote[11] = 0x2f;
     be6:	8f e2       	ldi	r24, 0x2F	; 47
     be8:	80 8f       	std	Z+24, r24	; 0x18
			currentGlobals->midiTrackNote[12] = 0x30;
     bea:	80 e3       	ldi	r24, 0x30	; 48
     bec:	81 8f       	std	Z+25, r24	; 0x19
			currentGlobals->midiTrackNote[13] = 0x31;
     bee:	81 e3       	ldi	r24, 0x31	; 49
     bf0:	82 8f       	std	Z+26, r24	; 0x1a
			currentGlobals->midiTrackNote[14] = 0x32;
     bf2:	82 e3       	ldi	r24, 0x32	; 50
     bf4:	83 8f       	std	Z+27, r24	; 0x1b
			currentGlobals->midiTrackNote[15] = 0x33;
     bf6:	83 e3       	ldi	r24, 0x33	; 51
     bf8:	84 8f       	std	Z+28, r24	; 0x1c
     bfa:	08 95       	ret

00000bfc <startADCConversion>:



uint8_t startADCConversion()
{
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     bfc:	ea e7       	ldi	r30, 0x7A	; 122
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	80 64       	ori	r24, 0x40	; 64
     c04:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     c06:	80 81       	ld	r24, Z
     c08:	86 fd       	sbrc	r24, 6
     c0a:	fd cf       	rjmp	.-6      	; 0xc06 <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.	
     c0c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
     c10:	08 95       	ret

00000c12 <initADC>:

void initADC()
{
	DDRF |= 0B00000111; //init pins F2, 1, and 0 as select pins on the external mux.
     c12:	80 b3       	in	r24, 0x10	; 16
     c14:	87 60       	ori	r24, 0x07	; 7
     c16:	80 bb       	out	0x10, r24	; 16
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     c18:	80 e2       	ldi	r24, 0x20	; 32
     c1a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     c1e:	87 e8       	ldi	r24, 0x87	; 135
     c20:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     c24:	88 e0       	ldi	r24, 0x08	; 8
     c26:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     c2a:	8f ef       	ldi	r24, 0xFF	; 255
     c2c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     c30:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     c34:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <knobBufferCounter>
	startADCConversion();
     c38:	e1 cf       	rjmp	.-62     	; 0xbfc <startADCConversion>
     c3a:	08 95       	ret

00000c3c <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     c3c:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     c3e:	98 2f       	mov	r25, r24
     c40:	96 95       	lsr	r25
     c42:	96 95       	lsr	r25
     c44:	2f e2       	ldi	r18, 0x2F	; 47
     c46:	92 9f       	mul	r25, r18
     c48:	91 2d       	mov	r25, r1
     c4a:	11 24       	eor	r1, r1
     c4c:	96 95       	lsr	r25
     c4e:	2c e2       	ldi	r18, 0x2C	; 44
     c50:	92 9f       	mul	r25, r18
     c52:	80 19       	sub	r24, r0
     c54:	11 24       	eor	r1, r1
     c56:	98 2f       	mov	r25, r24
	if(select<40)
     c58:	88 32       	cpi	r24, 0x28	; 40
     c5a:	70 f4       	brcc	.+28     	; 0xc78 <selectKnob+0x3c>
	{
		ADCSRB = (1 << MUX5);
     c5c:	88 e0       	ldi	r24, 0x08	; 8
     c5e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     c62:	c9 2f       	mov	r28, r25
     c64:	c7 70       	andi	r28, 0x07	; 7
		//uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     c66:	96 95       	lsr	r25
     c68:	96 95       	lsr	r25
     c6a:	96 95       	lsr	r25
     c6c:	90 62       	ori	r25, 0x20	; 32
     c6e:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     c72:	c4 df       	rcall	.-120    	; 0xbfc <startADCConversion>
		

		//then the external multiplexer
		PORTF = muxSelect;
     c74:	c1 bb       	out	0x11, r28	; 17
     c76:	20 c0       	rjmp	.+64     	; 0xcb8 <selectKnob+0x7c>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     c78:	89 32       	cpi	r24, 0x29	; 41
     c7a:	71 f0       	breq	.+28     	; 0xc98 <selectKnob+0x5c>
     c7c:	18 f4       	brcc	.+6      	; 0xc84 <selectKnob+0x48>
     c7e:	88 32       	cpi	r24, 0x28	; 40
     c80:	31 f0       	breq	.+12     	; 0xc8e <selectKnob+0x52>
     c82:	1a c0       	rjmp	.+52     	; 0xcb8 <selectKnob+0x7c>
     c84:	8a 32       	cpi	r24, 0x2A	; 42
     c86:	69 f0       	breq	.+26     	; 0xca2 <selectKnob+0x66>
     c88:	8b 32       	cpi	r24, 0x2B	; 43
     c8a:	81 f0       	breq	.+32     	; 0xcac <selectKnob+0x70>
     c8c:	15 c0       	rjmp	.+42     	; 0xcb8 <selectKnob+0x7c>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     c8e:	85 e2       	ldi	r24, 0x25	; 37
     c90:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     c94:	b3 df       	rcall	.-154    	; 0xbfc <startADCConversion>
		break;
     c96:	10 c0       	rjmp	.+32     	; 0xcb8 <selectKnob+0x7c>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     c98:	86 e2       	ldi	r24, 0x26	; 38
     c9a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     c9e:	ae df       	rcall	.-164    	; 0xbfc <startADCConversion>
		break;
     ca0:	0b c0       	rjmp	.+22     	; 0xcb8 <selectKnob+0x7c>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     ca2:	87 e2       	ldi	r24, 0x27	; 39
     ca4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     ca8:	a9 df       	rcall	.-174    	; 0xbfc <startADCConversion>
		break;
     caa:	06 c0       	rjmp	.+12     	; 0xcb8 <selectKnob+0x7c>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     cac:	80 e2       	ldi	r24, 0x20	; 32
     cae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     cb2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     cb6:	a2 df       	rcall	.-188    	; 0xbfc <startADCConversion>
		break;
		}
	
	}
	
}
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <updateKnob>:

void updateKnob(uint8_t select, Globals *currentGlobals)
{
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	8b 01       	movw	r16, r22
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
     cc6:	c8 2f       	mov	r28, r24
     cc8:	d0 e0       	ldi	r29, 0x00	; 0
     cca:	98 df       	rcall	.-208    	; 0xbfc <startADCConversion>
     ccc:	f8 01       	movw	r30, r16
     cce:	ec 0f       	add	r30, r28
     cd0:	fd 1f       	adc	r31, r29
     cd2:	85 8f       	std	Z+29, r24	; 0x1d
		currentGlobals->filteredKnobBuffer[select] = 
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
     cd4:	e7 5b       	subi	r30, 0xB7	; 183
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	40 81       	ld	r20, Z

void updateKnob(uint8_t select, Globals *currentGlobals)
{
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
		currentGlobals->filteredKnobBuffer[select] = 
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	84 1b       	sub	r24, r20
     cde:	91 09       	sbc	r25, r1
     ce0:	9c 01       	movw	r18, r24
     ce2:	12 f4       	brpl	.+4      	; 0xce8 <updateKnob+0x2c>
     ce4:	2f 5f       	subi	r18, 0xFF	; 255
     ce6:	3f 4f       	sbci	r19, 0xFF	; 255
     ce8:	35 95       	asr	r19
     cea:	27 95       	ror	r18
     cec:	24 0f       	add	r18, r20
     cee:	20 83       	st	Z, r18
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	08 95       	ret

00000cfa <initializeKnob>:
void initializeKnob(Globals *currentGlobals)
{
     cfa:	fc 01       	movw	r30, r24
     cfc:	e7 5b       	subi	r30, 0xB7	; 183
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
     d00:	9c 01       	movw	r18, r24
     d02:	2b 58       	subi	r18, 0x8B	; 139
     d04:	3f 4f       	sbci	r19, 0xFF	; 255
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
     d06:	91 91       	ld	r25, Z+
     d08:	93 a7       	std	Z+43, r25	; 0x2b
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
void initializeKnob(Globals *currentGlobals)
{
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
     d0a:	e2 17       	cp	r30, r18
     d0c:	f3 07       	cpc	r31, r19
     d0e:	d9 f7       	brne	.-10     	; 0xd06 <initializeKnob+0xc>
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
	}
}
     d10:	08 95       	ret

00000d12 <interperetKnob>:

void interperetKnob(uint8_t select, Pattern *currentKnobPattern, Globals *currentGlobals)
{//this function will compare outputs, and write to our struct.
     d12:	4f 92       	push	r4
     d14:	5f 92       	push	r5
     d16:	6f 92       	push	r6
     d18:	7f 92       	push	r7
     d1a:	8f 92       	push	r8
     d1c:	9f 92       	push	r9
     d1e:	af 92       	push	r10
     d20:	bf 92       	push	r11
     d22:	cf 92       	push	r12
     d24:	df 92       	push	r13
     d26:	ef 92       	push	r14
     d28:	ff 92       	push	r15
     d2a:	0f 93       	push	r16
     d2c:	1f 93       	push	r17
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	ea 01       	movw	r28, r20
	select = select%44;
     d34:	98 2f       	mov	r25, r24
     d36:	96 95       	lsr	r25
     d38:	96 95       	lsr	r25
     d3a:	2f e2       	ldi	r18, 0x2F	; 47
     d3c:	92 9f       	mul	r25, r18
     d3e:	91 2d       	mov	r25, r1
     d40:	11 24       	eor	r1, r1
     d42:	96 95       	lsr	r25
     d44:	2c e2       	ldi	r18, 0x2C	; 44
     d46:	92 9f       	mul	r25, r18
     d48:	80 19       	sub	r24, r0
     d4a:	11 24       	eor	r1, r1
     d4c:	98 2f       	mov	r25, r24
	
	if (select<40)
     d4e:	88 32       	cpi	r24, 0x28	; 40
     d50:	08 f0       	brcs	.+2      	; 0xd54 <interperetKnob+0x42>
     d52:	b4 c1       	rjmp	.+872    	; 0x10bc <interperetKnob+0x3aa>
	{
		uint8_t positionSelect = select%8;
     d54:	18 2f       	mov	r17, r24
     d56:	17 70       	andi	r17, 0x07	; 7
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
		uint8_t bankSwitch = select/8;
     d58:	86 95       	lsr	r24
     d5a:	86 95       	lsr	r24
     d5c:	86 95       	lsr	r24
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
     d5e:	29 85       	ldd	r18, Y+9	; 0x09
     d60:	20 ff       	sbrs	r18, 0
     d62:	05 c0       	rjmp	.+10     	; 0xd6e <interperetKnob+0x5c>
		{
			positionSelectTracks=positionSelectTracks+8;
     d64:	68 94       	set
     d66:	aa 24       	eor	r10, r10
     d68:	a3 f8       	bld	r10, 3
     d6a:	a1 0e       	add	r10, r17
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <interperetKnob+0x5e>
	select = select%44;
	
	if (select<40)
	{
		uint8_t positionSelect = select%8;
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
     d6e:	a1 2e       	mov	r10, r17
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
		{
			positionSelectTracks=positionSelectTracks+8;
		}
		
		switch (bankSwitch){
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	09 f4       	brne	.+2      	; 0xd76 <interperetKnob+0x64>
     d74:	9f c0       	rjmp	.+318    	; 0xeb4 <interperetKnob+0x1a2>
     d76:	7e 01       	movw	r14, r28
     d78:	6b 01       	movw	r12, r22
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	30 f4       	brcc	.+12     	; 0xd8a <interperetKnob+0x78>
     d7e:	88 23       	and	r24, r24
     d80:	59 f0       	breq	.+22     	; 0xd98 <interperetKnob+0x86>
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	09 f4       	brne	.+2      	; 0xd88 <interperetKnob+0x76>
     d86:	6d c0       	rjmp	.+218    	; 0xe62 <interperetKnob+0x150>
     d88:	b6 c1       	rjmp	.+876    	; 0x10f6 <interperetKnob+0x3e4>
     d8a:	83 30       	cpi	r24, 0x03	; 3
     d8c:	09 f4       	brne	.+2      	; 0xd90 <interperetKnob+0x7e>
     d8e:	db c0       	rjmp	.+438    	; 0xf46 <interperetKnob+0x234>
     d90:	84 30       	cpi	r24, 0x04	; 4
     d92:	09 f4       	brne	.+2      	; 0xd96 <interperetKnob+0x84>
     d94:	1f c1       	rjmp	.+574    	; 0xfd4 <interperetKnob+0x2c2>
     d96:	af c1       	rjmp	.+862    	; 0x10f6 <interperetKnob+0x3e4>
			uint8_t newRead = 0;
			case 0:; //outputVolume
			
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
     d98:	c9 2f       	mov	r28, r25
     d9a:	d0 e0       	ldi	r29, 0x00	; 0
     d9c:	c7 01       	movw	r24, r14
     d9e:	8c 0f       	add	r24, r28
     da0:	9d 1f       	adc	r25, r29
     da2:	fc 01       	movw	r30, r24
     da4:	eb 58       	subi	r30, 0x8B	; 139
     da6:	ff 4f       	sbci	r31, 0xFF	; 255
     da8:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
     daa:	bc 97       	sbiw	r30, 0x2c	; 44
     dac:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
     dae:	26 17       	cp	r18, r22
     db0:	20 f4       	brcc	.+8      	; 0xdba <interperetKnob+0xa8>
	{
		returnMe = v1-v2;
     db2:	86 2f       	mov	r24, r22
     db4:	82 1b       	sub	r24, r18
     db6:	28 2f       	mov	r18, r24
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <interperetKnob+0xaa>
	}
	else
	{
		returnMe = v2-v1;
     dba:	26 1b       	sub	r18, r22
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];

			if(checkVariation(newRead,prevRead)>2)
     dbc:	23 30       	cpi	r18, 0x03	; 3
     dbe:	08 f4       	brcc	.+2      	; 0xdc2 <interperetKnob+0xb0>
     dc0:	9a c1       	rjmp	.+820    	; 0x10f6 <interperetKnob+0x3e4>
			{
				
				int16_t negCheckValue = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__floatsisf>
     dcc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <volumeDivisor>
     dd0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <volumeDivisor+0x1>
     dd4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <volumeDivisor+0x2>
     dd8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <volumeDivisor+0x3>
     ddc:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <__divsf3>
     de0:	2b 01       	movw	r4, r22
     de2:	3c 01       	movw	r6, r24
     de4:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <NegativeOffset>
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__floatsisf>
     df2:	9b 01       	movw	r18, r22
     df4:	ac 01       	movw	r20, r24
     df6:	c3 01       	movw	r24, r6
     df8:	b2 01       	movw	r22, r4
     dfa:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__subsf3>
     dfe:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__fixsfsi>
     e02:	86 2f       	mov	r24, r22
     e04:	26 2f       	mov	r18, r22
     e06:	37 2f       	mov	r19, r23
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     e08:	d7 01       	movw	r26, r14
     e0a:	1a 96       	adiw	r26, 0x0a	; 10
     e0c:	9c 91       	ld	r25, X
     e0e:	1a 97       	sbiw	r26, 0x0a	; 10
     e10:	94 60       	ori	r25, 0x04	; 4
     e12:	1a 96       	adiw	r26, 0x0a	; 10
     e14:	9c 93       	st	X, r25
     e16:	1a 97       	sbiw	r26, 0x0a	; 10
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value 
     e18:	1b 96       	adiw	r26, 0x0b	; 11
     e1a:	1c 93       	st	X, r17
				
				currentKnobPattern->outputLevelLSB[positionSelect] = (negCheckValue);
     e1c:	61 2f       	mov	r22, r17
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	f6 01       	movw	r30, r12
     e22:	e6 0f       	add	r30, r22
     e24:	f7 1f       	adc	r31, r23
     e26:	80 87       	std	Z+8, r24	; 0x08
				if(negCheckValue>(-1))
     e28:	33 23       	and	r19, r19
     e2a:	2c f0       	brlt	.+10     	; 0xe36 <interperetKnob+0x124>
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 0;	
     e2c:	f6 01       	movw	r30, r12
     e2e:	e6 0f       	add	r30, r22
     e30:	f7 1f       	adc	r31, r23
     e32:	10 82       	st	Z, r1
     e34:	05 c0       	rjmp	.+10     	; 0xe40 <interperetKnob+0x12e>
				}else
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 255;
     e36:	9f ef       	ldi	r25, 0xFF	; 255
     e38:	f6 01       	movw	r30, r12
     e3a:	e6 0f       	add	r30, r22
     e3c:	f7 1f       	adc	r31, r23
     e3e:	90 83       	st	Z, r25
				}
				setOutputVolume(currentKnobPattern->outputLevelLSB[positionSelect], currentKnobPattern->outputLevelMSB[positionSelect], positionSelect);
     e40:	f6 01       	movw	r30, r12
     e42:	e6 0f       	add	r30, r22
     e44:	f7 1f       	adc	r31, r23
     e46:	41 2f       	mov	r20, r17
     e48:	60 81       	ld	r22, Z
     e4a:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <setOutputVolume>
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     e4e:	ce 0d       	add	r28, r14
     e50:	df 1d       	adc	r29, r15
     e52:	fe 01       	movw	r30, r28
     e54:	eb 58       	subi	r30, 0x8B	; 139
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	c7 5b       	subi	r28, 0xB7	; 183
     e5a:	df 4f       	sbci	r29, 0xFF	; 255
     e5c:	88 81       	ld	r24, Y
     e5e:	80 83       	st	Z, r24
     e60:	4a c1       	rjmp	.+660    	; 0x10f6 <interperetKnob+0x3e4>
			}
			break;
			
 			case 1: //pitch
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
     e62:	89 2f       	mov	r24, r25
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	9e 01       	movw	r18, r28
     e68:	28 0f       	add	r18, r24
     e6a:	39 1f       	adc	r19, r25
     e6c:	f9 01       	movw	r30, r18
     e6e:	e7 5b       	subi	r30, 0xB7	; 183
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	40 81       	ld	r20, Z
     e74:	bc 96       	adiw	r30, 0x2c	; 44
     e76:	20 81       	ld	r18, Z
     e78:	24 17       	cp	r18, r20
     e7a:	09 f4       	brne	.+2      	; 0xe7e <interperetKnob+0x16c>
     e7c:	3c c1       	rjmp	.+632    	; 0x10f6 <interperetKnob+0x3e4>
 			{
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     e7e:	2a 85       	ldd	r18, Y+10	; 0x0a
     e80:	24 60       	ori	r18, 0x04	; 4
     e82:	2a 87       	std	Y+10, r18	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     e84:	21 2f       	mov	r18, r17
     e86:	20 61       	ori	r18, 0x10	; 16
     e88:	2b 87       	std	Y+11, r18	; 0x0b
 				currentKnobPattern->outputPitch[positionSelect] = (currentGlobals->filteredKnobBuffer[select]^128);
     e8a:	fb 01       	movw	r30, r22
     e8c:	e1 0f       	add	r30, r17
     e8e:	f1 1d       	adc	r31, r1
     e90:	40 58       	subi	r20, 0x80	; 128
     e92:	40 8b       	std	Z+16, r20	; 0x10
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     e94:	8c 0f       	add	r24, r28
     e96:	9d 1f       	adc	r25, r29
     e98:	dc 01       	movw	r26, r24
     e9a:	ab 58       	subi	r26, 0x8B	; 139
     e9c:	bf 4f       	sbci	r27, 0xFF	; 255
     e9e:	ec 01       	movw	r28, r24
     ea0:	c7 5b       	subi	r28, 0xB7	; 183
     ea2:	df 4f       	sbci	r29, 0xFF	; 255
     ea4:	88 81       	ld	r24, Y
     ea6:	8c 93       	st	X, r24
				outputSampleRate(positionSelect, 0, currentKnobPattern->outputPitch[positionSelect]);
     ea8:	40 89       	ldd	r20, Z+16	; 0x10
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	81 2f       	mov	r24, r17
     eae:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <outputSampleRate>
     eb2:	21 c1       	rjmp	.+578    	; 0x10f6 <interperetKnob+0x3e4>
 			}
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
     eb4:	e9 2f       	mov	r30, r25
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	ce 01       	movw	r24, r28
     eba:	8e 0f       	add	r24, r30
     ebc:	9f 1f       	adc	r25, r31
     ebe:	dc 01       	movw	r26, r24
     ec0:	ab 58       	subi	r26, 0x8B	; 139
     ec2:	bf 4f       	sbci	r27, 0xFF	; 255
     ec4:	0c 91       	ld	r16, X
     ec6:	87 5b       	subi	r24, 0xB7	; 183
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	dc 01       	movw	r26, r24
     ecc:	8c 91       	ld	r24, X
     ece:	08 17       	cp	r16, r24
     ed0:	09 f4       	brne	.+2      	; 0xed4 <interperetKnob+0x1c2>
     ed2:	11 c1       	rjmp	.+546    	; 0x10f6 <interperetKnob+0x3e4>
			{
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     ed4:	ca 2c       	mov	r12, r10
     ed6:	d1 2c       	mov	r13, r1
     ed8:	ab 01       	movw	r20, r22
     eda:	4c 0d       	add	r20, r12
     edc:	5d 1d       	adc	r21, r13
     ede:	9a 01       	movw	r18, r20
     ee0:	28 5a       	subi	r18, 0xA8	; 168
     ee2:	3f 4f       	sbci	r19, 0xFF	; 255
     ee4:	d9 01       	movw	r26, r18
     ee6:	2c 91       	ld	r18, X
     ee8:	48 5b       	subi	r20, 0xB8	; 184
     eea:	5f 4f       	sbci	r21, 0xFF	; 255
     eec:	da 01       	movw	r26, r20
     eee:	4c 91       	ld	r20, X
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef2:	94 60       	ori	r25, 0x04	; 4
     ef4:	9a 87       	std	Y+10, r25	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
     ef6:	91 2f       	mov	r25, r17
     ef8:	90 62       	ori	r25, 0x20	; 32
     efa:	9b 87       	std	Y+11, r25	; 0x0b
				
				if(currentGlobals->currentGPButtons&0x04) 
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	92 ff       	sbrs	r25, 2
     f00:	08 c0       	rjmp	.+16     	; 0xf12 <interperetKnob+0x200>
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
			{
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	34 2b       	or	r19, r20
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
				
				if(currentGlobals->currentGPButtons&0x04) 
				{ //if "fine" is on:
					totalAttackTime = totalAttackTime+((currentGlobals->filteredKnobBuffer[select])-(currentGlobals->lastFilteredKnobBuffer[select])); 
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	80 1b       	sub	r24, r16
     f0a:	91 09       	sbc	r25, r1
     f0c:	28 0f       	add	r18, r24
     f0e:	39 1f       	adc	r19, r25
     f10:	08 c0       	rjmp	.+16     	; 0xf22 <interperetKnob+0x210>
					//this algorithm needs work. We need to not write to Attack time if attack time is less than 20ms. 
					//maybe this algorithm is fine, we just don't print/attack stage for values under 20MS?
				}else
				{
					totalAttackTime = ((currentGlobals->filteredKnobBuffer[select])-1)*238;
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	4e ee       	ldi	r20, 0xEE	; 238
     f18:	48 9f       	mul	r20, r24
     f1a:	90 01       	movw	r18, r0
     f1c:	49 9f       	mul	r20, r25
     f1e:	30 0d       	add	r19, r0
     f20:	11 24       	eor	r1, r1
				}
				currentKnobPattern->trackAttackTimeMSB[positionSelectTracks] = ((totalAttackTime)>>8);
     f22:	6c 0d       	add	r22, r12
     f24:	7d 1d       	adc	r23, r13
     f26:	db 01       	movw	r26, r22
     f28:	a8 5b       	subi	r26, 0xB8	; 184
     f2a:	bf 4f       	sbci	r27, 0xFF	; 255
     f2c:	3c 93       	st	X, r19
				currentKnobPattern->trackAttackTimeLSB[positionSelectTracks] = (totalAttackTime); //this should truncate the top 8 bits. 
     f2e:	50 96       	adiw	r26, 0x10	; 16
     f30:	2c 93       	st	X, r18

				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     f32:	ec 0f       	add	r30, r28
     f34:	fd 1f       	adc	r31, r29
     f36:	df 01       	movw	r26, r30
     f38:	ab 58       	subi	r26, 0x8B	; 139
     f3a:	bf 4f       	sbci	r27, 0xFF	; 255
     f3c:	e7 5b       	subi	r30, 0xB7	; 183
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	80 81       	ld	r24, Z
     f42:	8c 93       	st	X, r24
     f44:	d8 c0       	rjmp	.+432    	; 0x10f6 <interperetKnob+0x3e4>
			}
			break;
 			
 			case 3: //release Envelope
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
     f46:	29 2f       	mov	r18, r25
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	ce 01       	movw	r24, r28
     f4c:	82 0f       	add	r24, r18
     f4e:	93 1f       	adc	r25, r19
     f50:	fc 01       	movw	r30, r24
     f52:	eb 58       	subi	r30, 0x8B	; 139
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	a0 81       	ld	r26, Z
     f58:	bc 97       	sbiw	r30, 0x2c	; 44
     f5a:	80 81       	ld	r24, Z
     f5c:	a8 17       	cp	r26, r24
     f5e:	09 f4       	brne	.+2      	; 0xf62 <interperetKnob+0x250>
     f60:	ca c0       	rjmp	.+404    	; 0x10f6 <interperetKnob+0x3e4>
 			{
				 uint16_t totalReleaseTime = currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks]|((currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks])<<8);
     f62:	6a 2d       	mov	r22, r10
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	f6 01       	movw	r30, r12
     f68:	e6 0f       	add	r30, r22
     f6a:	f7 1f       	adc	r31, r23
     f6c:	ef 01       	movw	r28, r30
     f6e:	c8 58       	subi	r28, 0x88	; 136
     f70:	df 4f       	sbci	r29, 0xFF	; 255
     f72:	48 81       	ld	r20, Y
     f74:	e8 59       	subi	r30, 0x98	; 152
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	e0 81       	ld	r30, Z
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     f7a:	e7 01       	movw	r28, r14
     f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7e:	94 60       	ori	r25, 0x04	; 4
     f80:	9a 87       	std	Y+10, r25	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     f82:	91 2f       	mov	r25, r17
     f84:	90 63       	ori	r25, 0x30	; 48
     f86:	9b 87       	std	Y+11, r25	; 0x0b
				if(currentGlobals->currentGPButtons&0x04)
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	92 ff       	sbrs	r25, 2
     f8c:	08 c0       	rjmp	.+16     	; 0xf9e <interperetKnob+0x28c>
			break;
 			
 			case 3: //release Envelope
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
 			{
				 uint16_t totalReleaseTime = currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks]|((currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks])<<8);
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	5e 2b       	or	r21, r30
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
				if(currentGlobals->currentGPButtons&0x04)
				{ //if "fine" is on:
					totalReleaseTime = totalReleaseTime+((currentGlobals->filteredKnobBuffer[select])-(currentGlobals->lastFilteredKnobBuffer[select]));
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	8a 1b       	sub	r24, r26
     f96:	91 09       	sbc	r25, r1
     f98:	48 0f       	add	r20, r24
     f9a:	59 1f       	adc	r21, r25
     f9c:	08 c0       	rjmp	.+16     	; 0xfae <interperetKnob+0x29c>
				}else
				{
					totalReleaseTime = ((currentGlobals->filteredKnobBuffer[select])-1)*238;
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	ee ee       	ldi	r30, 0xEE	; 238
     fa4:	e8 9f       	mul	r30, r24
     fa6:	a0 01       	movw	r20, r0
     fa8:	e9 9f       	mul	r30, r25
     faa:	50 0d       	add	r21, r0
     fac:	11 24       	eor	r1, r1
				}
				currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks] = ((totalReleaseTime)>>8);
     fae:	c6 0e       	add	r12, r22
     fb0:	d7 1e       	adc	r13, r23
     fb2:	f6 01       	movw	r30, r12
     fb4:	e8 59       	subi	r30, 0x98	; 152
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	50 83       	st	Z, r21
				currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks] = (totalReleaseTime);	
     fba:	70 96       	adiw	r30, 0x10	; 16
     fbc:	40 83       	st	Z, r20
				
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     fbe:	2e 0d       	add	r18, r14
     fc0:	3f 1d       	adc	r19, r15
     fc2:	f9 01       	movw	r30, r18
     fc4:	eb 58       	subi	r30, 0x8B	; 139
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	d9 01       	movw	r26, r18
     fca:	a7 5b       	subi	r26, 0xB7	; 183
     fcc:	bf 4f       	sbci	r27, 0xFF	; 255
     fce:	8c 91       	ld	r24, X
     fd0:	80 83       	st	Z, r24
     fd2:	91 c0       	rjmp	.+290    	; 0x10f6 <interperetKnob+0x3e4>
 			}
 			break;
 			
 			case 4:;
 			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
     fd4:	89 2e       	mov	r8, r25
     fd6:	91 2c       	mov	r9, r1
     fd8:	ce 01       	movw	r24, r28
     fda:	88 0d       	add	r24, r8
     fdc:	99 1d       	adc	r25, r9
     fde:	fc 01       	movw	r30, r24
     fe0:	eb 58       	subi	r30, 0x8B	; 139
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
     fe6:	bc 97       	sbiw	r30, 0x2c	; 44
     fe8:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
     fea:	26 17       	cp	r18, r22
     fec:	20 f4       	brcc	.+8      	; 0xff6 <interperetKnob+0x2e4>
	{
		returnMe = v1-v2;
     fee:	d6 2f       	mov	r29, r22
     ff0:	d2 1b       	sub	r29, r18
     ff2:	2d 2f       	mov	r18, r29
     ff4:	01 c0       	rjmp	.+2      	; 0xff8 <interperetKnob+0x2e6>
	}
	else
	{
		returnMe = v2-v1;
     ff6:	26 1b       	sub	r18, r22
 			break;
 			
 			case 4:;
 			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];
 			if(checkVariation(newRead,prevRead)>2)
     ff8:	23 30       	cpi	r18, 0x03	; 3
     ffa:	08 f4       	brcc	.+2      	; 0xffe <interperetKnob+0x2ec>
     ffc:	7c c0       	rjmp	.+248    	; 0x10f6 <interperetKnob+0x3e4>
 			{
				int16_t negCheckValueTrack = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__floatsisf>
    1008:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <volumeDivisor>
    100c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <volumeDivisor+0x1>
    1010:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <volumeDivisor+0x2>
    1014:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <volumeDivisor+0x3>
    1018:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <__divsf3>
    101c:	2b 01       	movw	r4, r22
    101e:	3c 01       	movw	r6, r24
    1020:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <NegativeOffset>
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__floatsisf>
    102e:	9b 01       	movw	r18, r22
    1030:	ac 01       	movw	r20, r24
    1032:	c3 01       	movw	r24, r6
    1034:	b2 01       	movw	r22, r4
    1036:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__subsf3>
    103a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__fixsfsi>
    103e:	86 2f       	mov	r24, r22
    1040:	97 2f       	mov	r25, r23
    1042:	9c 01       	movw	r18, r24
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
    1044:	f7 01       	movw	r30, r14
    1046:	82 85       	ldd	r24, Z+10	; 0x0a
    1048:	84 60       	ori	r24, 0x04	; 4
    104a:	82 87       	std	Z+10, r24	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
    104c:	81 2f       	mov	r24, r17
    104e:	80 64       	ori	r24, 0x40	; 64
    1050:	83 87       	std	Z+11, r24	; 0x0b
				
	 			currentKnobPattern->trackMainVolumeLSB[positionSelectTracks] = (negCheckValueTrack);
    1052:	b1 2c       	mov	r11, r1
    1054:	f6 01       	movw	r30, r12
    1056:	ea 0d       	add	r30, r10
    1058:	fb 1d       	adc	r31, r11
    105a:	60 af       	std	Z+56, r22	; 0x38
	 			if(negCheckValueTrack>(-1))
    105c:	33 23       	and	r19, r19
    105e:	2c f0       	brlt	.+10     	; 0x106a <interperetKnob+0x358>
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 0;
    1060:	f6 01       	movw	r30, r12
    1062:	ea 0d       	add	r30, r10
    1064:	fb 1d       	adc	r31, r11
    1066:	10 a6       	std	Z+40, r1	; 0x28
    1068:	05 c0       	rjmp	.+10     	; 0x1074 <interperetKnob+0x362>
	 			}else
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 255;
    106a:	8f ef       	ldi	r24, 0xFF	; 255
    106c:	f6 01       	movw	r30, r12
    106e:	ea 0d       	add	r30, r10
    1070:	fb 1d       	adc	r31, r11
    1072:	80 a7       	std	Z+40, r24	; 0x28
	 			}

				
				if(currentKnobPattern->envelopeType[positionSelectTracks]==1||currentKnobPattern->envelopeType[positionSelectTracks]==3) //set track volume directly if Envelope mode is only release, or none. 
    1074:	f6 01       	movw	r30, r12
    1076:	ea 0d       	add	r30, r10
    1078:	fb 1d       	adc	r31, r11
    107a:	e5 51       	subi	r30, 0x15	; 21
    107c:	ff 4f       	sbci	r31, 0xFF	; 255
    107e:	80 81       	ld	r24, Z
    1080:	8d 7f       	andi	r24, 0xFD	; 253
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	79 f4       	brne	.+30     	; 0x10a4 <interperetKnob+0x392>
				{
	 				setTrackVolume(currentKnobPattern->trackSampleLSB[positionSelectTracks], currentKnobPattern->trackSampleMSB[positionSelectTracks],
    1086:	e6 01       	movw	r28, r12
    1088:	ca 0d       	add	r28, r10
    108a:	db 1d       	adc	r29, r11
    108c:	de 01       	movw	r26, r28
    108e:	a8 56       	subi	r26, 0x68	; 104
    1090:	bf 4f       	sbci	r27, 0xFF	; 255
    1092:	fe 01       	movw	r30, r28
    1094:	e8 55       	subi	r30, 0x58	; 88
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	28 a5       	ldd	r18, Y+40	; 0x28
    109a:	46 2f       	mov	r20, r22
    109c:	6c 91       	ld	r22, X
    109e:	80 81       	ld	r24, Z
    10a0:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <setTrackVolume>
					currentKnobPattern->trackMainVolumeLSB[positionSelectTracks], currentKnobPattern->trackMainVolumeMSB[positionSelectTracks]);
				}
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select]; 
    10a4:	87 01       	movw	r16, r14
    10a6:	08 0d       	add	r16, r8
    10a8:	19 1d       	adc	r17, r9
    10aa:	f8 01       	movw	r30, r16
    10ac:	eb 58       	subi	r30, 0x8B	; 139
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	d8 01       	movw	r26, r16
    10b2:	a7 5b       	subi	r26, 0xB7	; 183
    10b4:	bf 4f       	sbci	r27, 0xFF	; 255
    10b6:	8c 91       	ld	r24, X
    10b8:	80 83       	st	Z, r24
    10ba:	1d c0       	rjmp	.+58     	; 0x10f6 <interperetKnob+0x3e4>
		}
		
		
	}else
	{
		switch (select)
    10bc:	8a 32       	cpi	r24, 0x2A	; 42
    10be:	d9 f4       	brne	.+54     	; 0x10f6 <interperetKnob+0x3e4>
// 			break;
// 			
 			case 42:
			 
			 //we need to do a bit more filtering here. Not sure if that's happening here, or in the actual knob read.
			 if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
    10c0:	fa 01       	movw	r30, r20
    10c2:	ed 58       	subi	r30, 0x8D	; 141
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	80 81       	ld	r24, Z
    10c8:	bc 96       	adiw	r30, 0x2c	; 44
    10ca:	90 81       	ld	r25, Z
    10cc:	98 17       	cp	r25, r24
    10ce:	99 f0       	breq	.+38     	; 0x10f6 <interperetKnob+0x3e4>
			{//not sure if this works here, but we're going to try it. 
				
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
    10d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d2:	94 60       	ori	r25, 0x04	; 4
    10d4:	9a 87       	std	Y+10, r25	; 0x0a
				currentGlobals->knobStatus = (5<<4); //since all other pot banks are 0-4, the next ones will be 5-8. We should maybe figure out a better system for this, 
    10d6:	90 e5       	ldi	r25, 0x50	; 80
    10d8:	9b 87       	std	Y+11, r25	; 0x0b
				//maybe some defines?				
 				currentKnobPattern->patternBPM = currentGlobals->filteredKnobBuffer[select];
    10da:	fb 01       	movw	r30, r22
    10dc:	e8 53       	subi	r30, 0x38	; 56
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	91 83       	std	Z+1, r25	; 0x01
    10e4:	80 83       	st	Z, r24
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
    10e6:	da 01       	movw	r26, r20
    10e8:	a1 56       	subi	r26, 0x61	; 97
    10ea:	bf 4f       	sbci	r27, 0xFF	; 255
    10ec:	fa 01       	movw	r30, r20
    10ee:	ed 58       	subi	r30, 0x8D	; 141
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	80 81       	ld	r24, Z
    10f4:	8c 93       	st	X, r24
// 			break;
		}
		
	}

}
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
    1106:	bf 90       	pop	r11
    1108:	af 90       	pop	r10
    110a:	9f 90       	pop	r9
    110c:	8f 90       	pop	r8
    110e:	7f 90       	pop	r7
    1110:	6f 90       	pop	r6
    1112:	5f 90       	pop	r5
    1114:	4f 90       	pop	r4
    1116:	08 95       	ret

00001118 <listenKnobs>:

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	7c 01       	movw	r14, r24
    1124:	8b 01       	movw	r16, r22
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    1126:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
    1128:	8c 2f       	mov	r24, r28
    112a:	88 dd       	rcall	.-1264   	; 0xc3c <selectKnob>
		updateKnob(loopCounter, currentGlobals);
    112c:	b8 01       	movw	r22, r16
    112e:	8c 2f       	mov	r24, r28
    1130:	c5 dd       	rcall	.-1142   	; 0xcbc <updateKnob>
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
    1132:	a8 01       	movw	r20, r16
    1134:	b7 01       	movw	r22, r14
    1136:	8c 2f       	mov	r24, r28
    1138:	ec dd       	rcall	.-1064   	; 0xd12 <interperetKnob>

}

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    113a:	cf 5f       	subi	r28, 0xFF	; 255
    113c:	cc 32       	cpi	r28, 0x2C	; 44
    113e:	a1 f7       	brne	.-24     	; 0x1128 <listenKnobs+0x10>
	{
		selectKnob(loopCounter);
		updateKnob(loopCounter, currentGlobals);
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
	}
}
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	ef 90       	pop	r14
    114a:	08 95       	ret

0000114c <initLEDs>:
extern Pattern currentPattern;
extern uint8_t currentStep;

void initLEDs()
{
	DDRG = 0B00000111; //outputs on G5,2, and 0.
    114c:	87 e0       	ldi	r24, 0x07	; 7
    114e:	83 bb       	out	0x13, r24	; 19
    1150:	08 95       	ret

00001152 <parseLEDs>:
}
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
    1152:	a2 98       	cbi	0x14, 2	; 20
    1154:	27 e0       	ldi	r18, 0x07	; 7
	for(uint8_t j=0; j<7; j++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    1156:	a0 9a       	sbi	0x14, 0	; 20
		if(gpParse&0x80)
    1158:	66 23       	and	r22, r22
    115a:	14 f4       	brge	.+4      	; 0x1160 <parseLEDs+0xe>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    115c:	a1 9a       	sbi	0x14, 1	; 20
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <parseLEDs+0x10>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    1160:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    1162:	a0 98       	cbi	0x14, 0	; 20
		gpParse = gpParse << 1;
    1164:	66 0f       	add	r22, r22
    1166:	21 50       	subi	r18, 0x01	; 1
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t j=0; j<7; j++)
    1168:	b1 f7       	brne	.-20     	; 0x1156 <parseLEDs+0x4>
    116a:	21 e1       	ldi	r18, 0x11	; 17
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    116c:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
    116e:	99 23       	and	r25, r25
    1170:	14 f4       	brge	.+4      	; 0x1176 <parseLEDs+0x24>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    1172:	a1 9a       	sbi	0x14, 1	; 20
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <parseLEDs+0x26>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    1176:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    1178:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	21 50       	subi	r18, 0x01	; 1
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
    1180:	a9 f7       	brne	.-22     	; 0x116c <parseLEDs+0x1a>
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	
	
	PORTG |= (1 << PG2); //latch pin high
    1182:	a2 9a       	sbi	0x14, 2	; 20
    1184:	08 95       	ret

00001186 <updateLEDs>:
}

void updateLEDs(Pattern ledCurrentPattern, Globals currentGlobals)
{
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	cf 57       	subi	r28, 0x7F	; 127
    1190:	de 4f       	sbci	r29, 0xFE	; 254
    1192:	28 81       	ld	r18, Y
    1194:	39 81       	ldd	r19, Y+1	; 0x01
    1196:	c1 58       	subi	r28, 0x81	; 129
    1198:	d1 40       	sbci	r29, 0x01	; 1
    119a:	cd 57       	subi	r28, 0x7D	; 125
    119c:	de 4f       	sbci	r29, 0xFE	; 254
    119e:	68 81       	ld	r22, Y
    11a0:	c3 58       	subi	r28, 0x83	; 131
    11a2:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t shiftedState = currentGlobals.menuState >> 4; //this will get rid of EncoderB
	switch(shiftedState)
    11a4:	c9 57       	subi	r28, 0x79	; 121
    11a6:	de 4f       	sbci	r29, 0xFE	; 254
    11a8:	98 81       	ld	r25, Y
    11aa:	c7 58       	subi	r28, 0x87	; 135
    11ac:	d1 40       	sbci	r29, 0x01	; 1
    11ae:	92 95       	swap	r25
    11b0:	9f 70       	andi	r25, 0x0F	; 15
    11b2:	91 30       	cpi	r25, 0x01	; 1
    11b4:	49 f0       	breq	.+18     	; 0x11c8 <updateLEDs+0x42>
    11b6:	28 f0       	brcs	.+10     	; 0x11c2 <updateLEDs+0x3c>
    11b8:	92 30       	cpi	r25, 0x02	; 2
    11ba:	d1 f0       	breq	.+52     	; 0x11f0 <updateLEDs+0x6a>
    11bc:	93 30       	cpi	r25, 0x03	; 3
    11be:	d9 f0       	breq	.+54     	; 0x11f6 <updateLEDs+0x70>
    11c0:	1c c0       	rjmp	.+56     	; 0x11fa <updateLEDs+0x74>
	{
		case 0:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    11c2:	c9 01       	movw	r24, r18
    11c4:	c6 df       	rcall	.-116    	; 0x1152 <parseLEDs>
		break;
    11c6:	19 c0       	rjmp	.+50     	; 0x11fa <updateLEDs+0x74>

		case 1:
		parseLEDs(ledCurrentPattern.trackSequence[currentGlobals.currentStep], currentGlobals.currentGPButtons);
    11c8:	cb 57       	subi	r28, 0x7B	; 123
    11ca:	de 4f       	sbci	r29, 0xFE	; 254
    11cc:	e8 81       	ld	r30, Y
    11ce:	c5 58       	subi	r28, 0x85	; 133
    11d0:	d1 40       	sbci	r29, 0x01	; 1
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	ee 0f       	add	r30, r30
    11d6:	ff 1f       	adc	r31, r31
    11d8:	86 e0       	ldi	r24, 0x06	; 6
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	8c 0f       	add	r24, r28
    11de:	9d 1f       	adc	r25, r29
    11e0:	e8 0f       	add	r30, r24
    11e2:	f9 1f       	adc	r31, r25
    11e4:	e5 50       	subi	r30, 0x05	; 5
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	80 81       	ld	r24, Z
    11ea:	91 81       	ldd	r25, Z+1	; 0x01
    11ec:	b2 df       	rcall	.-156    	; 0x1152 <parseLEDs>
		break;

		case 2:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    11ee:	05 c0       	rjmp	.+10     	; 0x11fa <updateLEDs+0x74>
    11f0:	c9 01       	movw	r24, r18
		break;
    11f2:	af df       	rcall	.-162    	; 0x1152 <parseLEDs>

		case 3:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <updateLEDs+0x74>
    11f6:	c9 01       	movw	r24, r18
    11f8:	ac df       	rcall	.-168    	; 0x1152 <parseLEDs>
		break;
	}

}
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <main>:
//Pattern may not need to be volatile, but I'd like to keep it around. 
volatile Pattern currentPattern;
volatile Globals currentGlobals;


int main(){
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	c1 5b       	subi	r28, 0xB1	; 177
    120a:	d3 40       	sbci	r29, 0x03	; 3
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
	uint8_t factoryReset=0; // set this to 1 if you would like to fill the eeprom with Factory data, and erase all user data.
	Screen screenBank;
	
	initScreen();
    1216:	0e 94 69 12 	call	0x24d2	; 0x24d2 <initScreen>
	initGlobals(&currentGlobals, factoryReset);  
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	82 e2       	ldi	r24, 0x22	; 34
    121e:	95 e0       	ldi	r25, 0x05	; 5
    1220:	bc dc       	rcall	.-1672   	; 0xb9a <initGlobals>
	initButtons();
    1222:	34 d8       	rcall	.-3992   	; 0x28c <initButtons>
	initLEDs();
    1224:	93 df       	rcall	.-218    	; 0x114c <initLEDs>
	initEncoders();
    1226:	34 d9       	rcall	.-3480   	; 0x490 <initEncoders>
    1228:	f4 dc       	rcall	.-1560   	; 0xc12 <initADC>
	initADC();
    122a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <serialInit0>
	serialInit0();
    122e:	0e 94 c2 11 	call	0x2384	; 0x2384 <initMidi>
	initMidi();
    1232:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <initEnvelopes>
	initEnvelopes();
    1236:	0e 94 ed 14 	call	0x29da	; 0x29da <initSequencer>
	initSequencer();
    123a:	0e 94 4f 18 	call	0x309e	; 0x309e <twi_init>
	twi_init();
    123e:	87 ea       	ldi	r24, 0xA7	; 167
	initBank(&currentPattern);
    1240:	93 e0       	ldi	r25, 0x03	; 3
    1242:	7c dc       	rcall	.-1800   	; 0xb3c <initBank>
    1244:	60 91 25 05 	lds	r22, 0x0525	; 0x800525 <currentGlobals+0x3>
		//do factory reset here.
		factoryResetEeprom(currentPattern);
		globalWrite(&currentGlobals);
	}

	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
    1248:	87 ea       	ldi	r24, 0xA7	; 167
    124a:	93 e0       	ldi	r25, 0x03	; 3
    124c:	0e 94 9a 1a 	call	0x3534	; 0x3534 <eepromLoadPattern>
    1250:	00 e0       	ldi	r16, 0x00	; 0
    1252:	10 e0       	ldi	r17, 0x00	; 0
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    1254:	0f 2e       	mov	r0, r31
    1256:	fc e2       	ldi	r31, 0x2C	; 44
	{
		uint8_t loadSelect = i%44;
    1258:	df 2e       	mov	r13, r31
    125a:	f0 2d       	mov	r31, r0
    125c:	98 01       	movw	r18, r16
    125e:	af e2       	ldi	r26, 0x2F	; 47
    1260:	ba eb       	ldi	r27, 0xBA	; 186
    1262:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    1266:	96 95       	lsr	r25
    1268:	87 95       	ror	r24
    126a:	92 95       	swap	r25
    126c:	82 95       	swap	r24
    126e:	8f 70       	andi	r24, 0x0F	; 15
    1270:	89 27       	eor	r24, r25
    1272:	9f 70       	andi	r25, 0x0F	; 15
    1274:	89 27       	eor	r24, r25
    1276:	d8 9e       	mul	r13, r24
    1278:	90 01       	movw	r18, r0
    127a:	d9 9e       	mul	r13, r25
    127c:	30 0d       	add	r19, r0
    127e:	11 24       	eor	r1, r1
    1280:	78 01       	movw	r14, r16
    1282:	e2 1a       	sub	r14, r18
    1284:	f3 0a       	sbc	r15, r19
    1286:	8e 2d       	mov	r24, r14
		selectKnob(loadSelect);
    1288:	d9 dc       	rcall	.-1614   	; 0xc3c <selectKnob>
    128a:	62 e2       	ldi	r22, 0x22	; 34
		updateKnob(loadSelect, &currentGlobals);
    128c:	75 e0       	ldi	r23, 0x05	; 5
    128e:	8e 2d       	mov	r24, r14
    1290:	15 dd       	rcall	.-1494   	; 0xcbc <updateKnob>
    1292:	0f 5f       	subi	r16, 0xFF	; 255
    1294:	1f 4f       	sbci	r17, 0xFF	; 255
		factoryResetEeprom(currentPattern);
		globalWrite(&currentGlobals);
	}

	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    1296:	08 3b       	cpi	r16, 0xB8	; 184
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	18 07       	cpc	r17, r24
    129c:	f9 f6       	brne	.-66     	; 0x125c <main+0x5c>
    129e:	82 e2       	ldi	r24, 0x22	; 34
	{
		uint8_t loadSelect = i%44;
		selectKnob(loadSelect);
		updateKnob(loadSelect, &currentGlobals);
	}
	initializeKnob(&currentGlobals); //then copy it to the lastFilteredKnobBuffer. 
    12a0:	95 e0       	ldi	r25, 0x05	; 5
    12a2:	2b dd       	rcall	.-1450   	; 0xcfa <initializeKnob>
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	82 e2       	ldi	r24, 0x22	; 34
	globalLoad(&currentGlobals, factoryReset);
    12a8:	95 e0       	ldi	r25, 0x05	; 5
    12aa:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <globalLoad>
    12ae:	8d b7       	in	r24, 0x3d	; 61
    12b0:	9e b7       	in	r25, 0x3e	; 62
	initMenu(&screenBank, currentPattern, currentGlobals); //fills screenBank with menu strings
    12b2:	87 5e       	subi	r24, 0xE7	; 231
    12b4:	91 09       	sbc	r25, r1
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	9e bf       	out	0x3e, r25	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	8d bf       	out	0x3d, r24	; 61
    12c0:	ad b7       	in	r26, 0x3d	; 61
    12c2:	be b7       	in	r27, 0x3e	; 62
    12c4:	11 96       	adiw	r26, 0x01	; 1
    12c6:	87 ee       	ldi	r24, 0xE7	; 231
    12c8:	e2 e2       	ldi	r30, 0x22	; 34
    12ca:	f5 e0       	ldi	r31, 0x05	; 5
    12cc:	01 90       	ld	r0, Z+
    12ce:	0d 92       	st	X+, r0
    12d0:	8a 95       	dec	r24
    12d2:	e1 f7       	brne	.-8      	; 0x12cc <main+0xcc>
    12d4:	8d b7       	in	r24, 0x3d	; 61
    12d6:	9e b7       	in	r25, 0x3e	; 62
    12d8:	8b 57       	subi	r24, 0x7B	; 123
    12da:	91 40       	sbci	r25, 0x01	; 1
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	9e bf       	out	0x3e, r25	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	8d bf       	out	0x3d, r24	; 61
    12e6:	ad b7       	in	r26, 0x3d	; 61
    12e8:	be b7       	in	r27, 0x3e	; 62
    12ea:	11 96       	adiw	r26, 0x01	; 1
    12ec:	8b e7       	ldi	r24, 0x7B	; 123
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	e7 ea       	ldi	r30, 0xA7	; 167
    12f2:	f3 e0       	ldi	r31, 0x03	; 3
    12f4:	01 90       	ld	r0, Z+
    12f6:	0d 92       	st	X+, r0
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	e1 f7       	brne	.-8      	; 0x12f4 <main+0xf4>
    12fc:	ce 01       	movw	r24, r28
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	f9 d0       	rcall	.+498    	; 0x14f4 <initMenu>
    1302:	84 e0       	ldi	r24, 0x04	; 4
    1304:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>

	//this ISR is used for Button De-Bouncing. Maybe we could put it somewhere else. 
	TCCR2B = 1<<CS22;//using 64 from pre-scaler
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
	TIMSK2 = 1<<TOIE2;
    130e:	78 94       	sei
    1310:	0f b6       	in	r0, 0x3f	; 63


	sei();	
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	62 e2       	ldi	r22, 0x22	; 34
    131c:	75 e0       	ldi	r23, 0x05	; 5


while(1) {
	
	
	listenTrigButtons(&currentPattern, &currentGlobals);
    131e:	87 ea       	ldi	r24, 0xA7	; 167
    1320:	93 e0       	ldi	r25, 0x03	; 3
    1322:	0e 94 4d 01 	call	0x29a	; 0x29a <listenTrigButtons>
    1326:	82 e2       	ldi	r24, 0x22	; 34
    1328:	95 e0       	ldi	r25, 0x05	; 5
	listenGPButtons(currentPattern, &currentGlobals);
    132a:	9f 93       	push	r25
    132c:	8f 93       	push	r24
    132e:	8d b7       	in	r24, 0x3d	; 61
    1330:	9e b7       	in	r25, 0x3e	; 62
    1332:	8b 57       	subi	r24, 0x7B	; 123
    1334:	91 40       	sbci	r25, 0x01	; 1
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	9e bf       	out	0x3e, r25	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	8d bf       	out	0x3d, r24	; 61
    1340:	ad b7       	in	r26, 0x3d	; 61
    1342:	be b7       	in	r27, 0x3e	; 62
    1344:	11 96       	adiw	r26, 0x01	; 1
    1346:	8b e7       	ldi	r24, 0x7B	; 123
    1348:	91 e0       	ldi	r25, 0x01	; 1
    134a:	e7 ea       	ldi	r30, 0xA7	; 167
    134c:	f3 e0       	ldi	r31, 0x03	; 3
    134e:	01 90       	ld	r0, Z+
    1350:	0d 92       	st	X+, r0
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	e1 f7       	brne	.-8      	; 0x134e <main+0x14e>
    1356:	0a d8       	rcall	.-4076   	; 0x36c <listenGPButtons>
    1358:	8d b7       	in	r24, 0x3d	; 61
    135a:	9e b7       	in	r25, 0x3e	; 62
	updateLEDs(currentPattern, currentGlobals);
    135c:	83 58       	subi	r24, 0x83	; 131
    135e:	9e 4f       	sbci	r25, 0xFE	; 254
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	87 5e       	subi	r24, 0xE7	; 231
    136c:	91 09       	sbc	r25, r1
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	9e bf       	out	0x3e, r25	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	8d bf       	out	0x3d, r24	; 61
    1378:	ad b7       	in	r26, 0x3d	; 61
    137a:	be b7       	in	r27, 0x3e	; 62
    137c:	11 96       	adiw	r26, 0x01	; 1
    137e:	87 ee       	ldi	r24, 0xE7	; 231
    1380:	e2 e2       	ldi	r30, 0x22	; 34
    1382:	f5 e0       	ldi	r31, 0x05	; 5
    1384:	01 90       	ld	r0, Z+
    1386:	0d 92       	st	X+, r0
    1388:	8a 95       	dec	r24
    138a:	e1 f7       	brne	.-8      	; 0x1384 <main+0x184>
    138c:	8d b7       	in	r24, 0x3d	; 61
    138e:	9e b7       	in	r25, 0x3e	; 62
    1390:	8b 57       	subi	r24, 0x7B	; 123
    1392:	91 40       	sbci	r25, 0x01	; 1
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	9e bf       	out	0x3e, r25	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	8d bf       	out	0x3d, r24	; 61
    139e:	ad b7       	in	r26, 0x3d	; 61
    13a0:	be b7       	in	r27, 0x3e	; 62
    13a2:	11 96       	adiw	r26, 0x01	; 1
    13a4:	8b e7       	ldi	r24, 0x7B	; 123
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	e7 ea       	ldi	r30, 0xA7	; 167
    13aa:	f3 e0       	ldi	r31, 0x03	; 3
    13ac:	01 90       	ld	r0, Z+
    13ae:	0d 92       	st	X+, r0
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	e1 f7       	brne	.-8      	; 0x13ac <main+0x1ac>
    13b4:	e8 de       	rcall	.-560    	; 0x1186 <updateLEDs>
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
	listenEncoders(&currentPattern, &currentGlobals);
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	62 e2       	ldi	r22, 0x22	; 34
    13c2:	75 e0       	ldi	r23, 0x05	; 5
    13c4:	87 ea       	ldi	r24, 0xA7	; 167
    13c6:	93 e0       	ldi	r25, 0x03	; 3
    13c8:	e9 d8       	rcall	.-3630   	; 0x59c <listenEncoders>
    13ca:	62 e2       	ldi	r22, 0x22	; 34
    13cc:	75 e0       	ldi	r23, 0x05	; 5
	listenKnobs(&currentPattern, &currentGlobals);
    13ce:	87 ea       	ldi	r24, 0xA7	; 167
    13d0:	93 e0       	ldi	r25, 0x03	; 3
    13d2:	a2 de       	rcall	.-700    	; 0x1118 <listenKnobs>
    13d4:	8d b7       	in	r24, 0x3d	; 61
    13d6:	9e b7       	in	r25, 0x3e	; 62
    13d8:	87 5e       	subi	r24, 0xE7	; 231
	updateSequencer(currentPattern, currentGlobals);
    13da:	91 09       	sbc	r25, r1
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	9e bf       	out	0x3e, r25	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	8d bf       	out	0x3d, r24	; 61
    13e6:	ad b7       	in	r26, 0x3d	; 61
    13e8:	be b7       	in	r27, 0x3e	; 62
    13ea:	11 96       	adiw	r26, 0x01	; 1
    13ec:	87 ee       	ldi	r24, 0xE7	; 231
    13ee:	e2 e2       	ldi	r30, 0x22	; 34
    13f0:	f5 e0       	ldi	r31, 0x05	; 5
    13f2:	01 90       	ld	r0, Z+
    13f4:	0d 92       	st	X+, r0
    13f6:	8a 95       	dec	r24
    13f8:	e1 f7       	brne	.-8      	; 0x13f2 <main+0x1f2>
    13fa:	8d b7       	in	r24, 0x3d	; 61
    13fc:	9e b7       	in	r25, 0x3e	; 62
    13fe:	8b 57       	subi	r24, 0x7B	; 123
    1400:	91 40       	sbci	r25, 0x01	; 1
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	9e bf       	out	0x3e, r25	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	8d bf       	out	0x3d, r24	; 61
    140c:	ad b7       	in	r26, 0x3d	; 61
    140e:	be b7       	in	r27, 0x3e	; 62
    1410:	11 96       	adiw	r26, 0x01	; 1
    1412:	8b e7       	ldi	r24, 0x7B	; 123
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	e7 ea       	ldi	r30, 0xA7	; 167
    1418:	f3 e0       	ldi	r31, 0x03	; 3
    141a:	01 90       	ld	r0, Z+
    141c:	0d 92       	st	X+, r0
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	e1 f7       	brne	.-8      	; 0x141a <main+0x21a>
    1422:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <updateSequencer>
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
	updateScreen(&screenBank, &currentPattern, &currentGlobals);
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	42 e2       	ldi	r20, 0x22	; 34
    1432:	55 e0       	ldi	r21, 0x05	; 5
    1434:	67 ea       	ldi	r22, 0xA7	; 167
    1436:	73 e0       	ldi	r23, 0x03	; 3
    1438:	ce 01       	movw	r24, r28
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	9b d1       	rcall	.+822    	; 0x1774 <updateScreen>
    143e:	8d b7       	in	r24, 0x3d	; 61
    1440:	9e b7       	in	r25, 0x3e	; 62
    1442:	87 5e       	subi	r24, 0xE7	; 231
	midiRead(currentPattern, currentGlobals);
    1444:	91 09       	sbc	r25, r1
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	9e bf       	out	0x3e, r25	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	8d bf       	out	0x3d, r24	; 61
    1450:	ad b7       	in	r26, 0x3d	; 61
    1452:	be b7       	in	r27, 0x3e	; 62
    1454:	11 96       	adiw	r26, 0x01	; 1
    1456:	87 ee       	ldi	r24, 0xE7	; 231
    1458:	e2 e2       	ldi	r30, 0x22	; 34
    145a:	f5 e0       	ldi	r31, 0x05	; 5
    145c:	01 90       	ld	r0, Z+
    145e:	0d 92       	st	X+, r0
    1460:	8a 95       	dec	r24
    1462:	e1 f7       	brne	.-8      	; 0x145c <main+0x25c>
    1464:	8d b7       	in	r24, 0x3d	; 61
    1466:	9e b7       	in	r25, 0x3e	; 62
    1468:	8b 57       	subi	r24, 0x7B	; 123
    146a:	91 40       	sbci	r25, 0x01	; 1
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	9e bf       	out	0x3e, r25	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	8d bf       	out	0x3d, r24	; 61
    1476:	ad b7       	in	r26, 0x3d	; 61
    1478:	be b7       	in	r27, 0x3e	; 62
    147a:	11 96       	adiw	r26, 0x01	; 1
    147c:	8b e7       	ldi	r24, 0x7B	; 123
    147e:	91 e0       	ldi	r25, 0x01	; 1
    1480:	e7 ea       	ldi	r30, 0xA7	; 167
    1482:	f3 e0       	ldi	r31, 0x03	; 3
    1484:	01 90       	ld	r0, Z+
    1486:	0d 92       	st	X+, r0
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	e1 f7       	brne	.-8      	; 0x1484 <main+0x284>
    148c:	8b d7       	rcall	.+3862   	; 0x23a4 <midiRead>
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
	releaseUpdate(&currentPattern, &currentGlobals);
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	62 e2       	ldi	r22, 0x22	; 34
    149a:	75 e0       	ldi	r23, 0x05	; 5
    149c:	87 ea       	ldi	r24, 0xA7	; 167
    149e:	93 e0       	ldi	r25, 0x03	; 3
    14a0:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <releaseUpdate>
    14a4:	3a cf       	rjmp	.-396    	; 0x131a <main+0x11a>

000014a6 <__vector_32>:
    14a6:	1f 92       	push	r1
    14a8:	0f 92       	push	r0
    14aa:	0f b6       	in	r0, 0x3f	; 63

	}
}

ISR(TIMER3_COMPA_vect)
{
    14ac:	0f 92       	push	r0
    14ae:	11 24       	eor	r1, r1
    14b0:	0b b6       	in	r0, 0x3b	; 59
    14b2:	0f 92       	push	r0
    14b4:	8f 93       	push	r24
    14b6:	9f 93       	push	r25
    14b8:	af 93       	push	r26
    14ba:	bf 93       	push	r27
    14bc:	ef 93       	push	r30
    14be:	ff 93       	push	r31
	currentGlobals.releaseCounter++; //this will increase every millisecond.
    14c0:	e3 ec       	ldi	r30, 0xC3	; 195
    14c2:	f5 e0       	ldi	r31, 0x05	; 5
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	a2 81       	ldd	r26, Z+2	; 0x02
    14ca:	b3 81       	ldd	r27, Z+3	; 0x03
    14cc:	01 96       	adiw	r24, 0x01	; 1
    14ce:	a1 1d       	adc	r26, r1
    14d0:	b1 1d       	adc	r27, r1
    14d2:	80 83       	st	Z, r24
    14d4:	91 83       	std	Z+1, r25	; 0x01
    14d6:	a2 83       	std	Z+2, r26	; 0x02
    14d8:	b3 83       	std	Z+3, r27	; 0x03
	//should run for about 1000 hours before overflow, so not something we really have to worry about.
    14da:	ff 91       	pop	r31
    14dc:	ef 91       	pop	r30
    14de:	bf 91       	pop	r27
    14e0:	af 91       	pop	r26
    14e2:	9f 91       	pop	r25
    14e4:	8f 91       	pop	r24
    14e6:	0f 90       	pop	r0
    14e8:	0b be       	out	0x3b, r0	; 59
    14ea:	0f 90       	pop	r0
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	0f 90       	pop	r0
    14f0:	1f 90       	pop	r1
    14f2:	18 95       	reti

000014f4 <initMenu>:
uint8_t prevMenuState; //do we need this anymore?

//I don't like using a global extern here, instead of a passed pointer,
//but I can't seem to get the struct to stay in scope.
void initMenu(Screen *initTheScreen, Pattern currentPattern, Globals currentGlobals)
{
    14f4:	cf 92       	push	r12
    14f6:	df 92       	push	r13
    14f8:	ef 92       	push	r14
    14fa:	ff 92       	push	r15
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	8c 01       	movw	r16, r24
    150a:	c6 57       	subi	r28, 0x76	; 118
    150c:	de 4f       	sbci	r29, 0xFE	; 254
    150e:	e8 80       	ld	r14, Y
    1510:	ca 58       	subi	r28, 0x8A	; 138
    1512:	d1 40       	sbci	r29, 0x01	; 1

//screen0
initArrays(initTheScreen->screen0,0,"Performance Mode");
    1514:	40 e6       	ldi	r20, 0x60	; 96
    1516:	52 e0       	ldi	r21, 0x02	; 2
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	d0 da       	rcall	.-2656   	; 0xabe <initArrays>
initArrays(initTheScreen->screen0,1,"Pattern:");
    151e:	41 e7       	ldi	r20, 0x71	; 113
    1520:	52 e0       	ldi	r21, 0x02	; 2
    1522:	61 e0       	ldi	r22, 0x01	; 1
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	c8 01       	movw	r24, r16
    1528:	ca da       	rcall	.-2668   	; 0xabe <initArrays>
initArrays(initTheScreen->screen0,2,"BPM:");
    152a:	4a e7       	ldi	r20, 0x7A	; 122
    152c:	52 e0       	ldi	r21, 0x02	; 2
    152e:	62 e0       	ldi	r22, 0x02	; 2
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	c8 01       	movw	r24, r16
    1534:	c4 da       	rcall	.-2680   	; 0xabe <initArrays>
initArrays(initTheScreen->screen0,3,"Stop");
    1536:	4f e7       	ldi	r20, 0x7F	; 127
    1538:	52 e0       	ldi	r21, 0x02	; 2
    153a:	63 e0       	ldi	r22, 0x03	; 3
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	c8 01       	movw	r24, r16
    1540:	be da       	rcall	.-2692   	; 0xabe <initArrays>

//screen1
initArrays(initTheScreen->screen1,0,"Sequence Edit");
    1542:	68 01       	movw	r12, r16
    1544:	8d eb       	ldi	r24, 0xBD	; 189
    1546:	c8 0e       	add	r12, r24
    1548:	d1 1c       	adc	r13, r1
    154a:	44 e8       	ldi	r20, 0x84	; 132
    154c:	52 e0       	ldi	r21, 0x02	; 2
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	c6 01       	movw	r24, r12
    1554:	b4 da       	rcall	.-2712   	; 0xabe <initArrays>
initArrays(initTheScreen->screen1,1,"Pattern:");
    1556:	41 e7       	ldi	r20, 0x71	; 113
    1558:	52 e0       	ldi	r21, 0x02	; 2
    155a:	61 e0       	ldi	r22, 0x01	; 1
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	c6 01       	movw	r24, r12
    1560:	ae da       	rcall	.-2724   	; 0xabe <initArrays>
initArrays(initTheScreen->screen1,2,"Steps:");
    1562:	42 e9       	ldi	r20, 0x92	; 146
    1564:	52 e0       	ldi	r21, 0x02	; 2
    1566:	62 e0       	ldi	r22, 0x02	; 2
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	c6 01       	movw	r24, r12
    156c:	a8 da       	rcall	.-2736   	; 0xabe <initArrays>
initArrays(initTheScreen->screen1,3,"Step number:");
    156e:	49 e9       	ldi	r20, 0x99	; 153
    1570:	52 e0       	ldi	r21, 0x02	; 2
    1572:	63 e0       	ldi	r22, 0x03	; 3
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	c6 01       	movw	r24, r12
    1578:	a2 da       	rcall	.-2748   	; 0xabe <initArrays>
    157a:	68 01       	movw	r12, r16

//screen2
initArrays(initTheScreen->screen2,0,"Track Settings");
    157c:	86 e8       	ldi	r24, 0x86	; 134
    157e:	c8 1a       	sub	r12, r24
    1580:	8e ef       	ldi	r24, 0xFE	; 254
    1582:	d8 0a       	sbc	r13, r24
    1584:	46 ea       	ldi	r20, 0xA6	; 166
    1586:	52 e0       	ldi	r21, 0x02	; 2
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	c6 01       	movw	r24, r12
    158e:	97 da       	rcall	.-2770   	; 0xabe <initArrays>
initArrays(initTheScreen->screen2,1,"Track:");
    1590:	45 eb       	ldi	r20, 0xB5	; 181
    1592:	52 e0       	ldi	r21, 0x02	; 2
    1594:	61 e0       	ldi	r22, 0x01	; 1
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	c6 01       	movw	r24, r12
    159a:	91 da       	rcall	.-2782   	; 0xabe <initArrays>
initArrays(initTheScreen->screen2,2,"PlayMode:");
    159c:	4c eb       	ldi	r20, 0xBC	; 188
    159e:	52 e0       	ldi	r21, 0x02	; 2
    15a0:	62 e0       	ldi	r22, 0x02	; 2
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	c6 01       	movw	r24, r12
    15a6:	8b da       	rcall	.-2794   	; 0xabe <initArrays>
initArrays(initTheScreen->screen2,3,"OutRoute:");
    15a8:	46 ec       	ldi	r20, 0xC6	; 198
    15aa:	52 e0       	ldi	r21, 0x02	; 2
    15ac:	63 e0       	ldi	r22, 0x03	; 3
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	c6 01       	movw	r24, r12
    15b2:	85 da       	rcall	.-2806   	; 0xabe <initArrays>
initArrays(initTheScreen->screen2,4,"EnvelopeMode:");
    15b4:	40 ed       	ldi	r20, 0xD0	; 208
    15b6:	52 e0       	ldi	r21, 0x02	; 2
    15b8:	64 e0       	ldi	r22, 0x04	; 4
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	c6 01       	movw	r24, r12
    15be:	7f da       	rcall	.-2818   	; 0xabe <initArrays>
    15c0:	4e ed       	ldi	r20, 0xDE	; 222
initArrays(initTheScreen->screen2,5,"SustainTime:      S");
    15c2:	52 e0       	ldi	r21, 0x02	; 2
    15c4:	65 e0       	ldi	r22, 0x05	; 5
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	c6 01       	movw	r24, r12
    15ca:	79 da       	rcall	.-2830   	; 0xabe <initArrays>
    15cc:	68 01       	movw	r12, r16

//screen3
initArrays(initTheScreen->screen3,1,"Midi Channel:");
    15ce:	89 ec       	ldi	r24, 0xC9	; 201
    15d0:	c8 1a       	sub	r12, r24
    15d2:	8d ef       	ldi	r24, 0xFD	; 253
    15d4:	d8 0a       	sbc	r13, r24
    15d6:	42 ef       	ldi	r20, 0xF2	; 242
    15d8:	52 e0       	ldi	r21, 0x02	; 2
    15da:	61 e0       	ldi	r22, 0x01	; 1
    15dc:	70 e0       	ldi	r23, 0x00	; 0
    15de:	c6 01       	movw	r24, r12
    15e0:	6e da       	rcall	.-2852   	; 0xabe <initArrays>
initArrays(initTheScreen->screen3,2,"Midi trig   :");
    15e2:	40 e0       	ldi	r20, 0x00	; 0
    15e4:	53 e0       	ldi	r21, 0x03	; 3
    15e6:	62 e0       	ldi	r22, 0x02	; 2
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	c6 01       	movw	r24, r12
    15ec:	68 da       	rcall	.-2864   	; 0xabe <initArrays>
initArrays(initTheScreen->screen3,3," ");
    15ee:	40 e9       	ldi	r20, 0x90	; 144
    15f0:	53 e0       	ldi	r21, 0x03	; 3
    15f2:	63 e0       	ldi	r22, 0x03	; 3
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	c6 01       	movw	r24, r12
    15f8:	62 da       	rcall	.-2876   	; 0xabe <initArrays>
initArrays(initTheScreen->screen3,0,"Global Settings");
    15fa:	4e e0       	ldi	r20, 0x0E	; 14
    15fc:	53 e0       	ldi	r21, 0x03	; 3
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	c6 01       	movw	r24, r12
    1604:	5c da       	rcall	.-2888   	; 0xabe <initArrays>

//init all of the knob arrays:
initArrays(initTheScreen->knobScreen,0,"OutVolume x : xxxdb");//string 0 is outVolume
    1606:	68 01       	movw	r12, r16
    1608:	8c e0       	ldi	r24, 0x0C	; 12
    160a:	c8 1a       	sub	r12, r24
    160c:	8d ef       	ldi	r24, 0xFD	; 253
    160e:	d8 0a       	sbc	r13, r24
    1610:	4e e1       	ldi	r20, 0x1E	; 30
    1612:	53 e0       	ldi	r21, 0x03	; 3
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,1,"Pitch : xxx");//string 1 is pitch
    161a:	51 da       	rcall	.-2910   	; 0xabe <initArrays>
    161c:	42 e3       	ldi	r20, 0x32	; 50
    161e:	53 e0       	ldi	r21, 0x03	; 3
    1620:	61 e0       	ldi	r22, 0x01	; 1
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,2,"AttackTime  :      S"); //string 2 is Envelope gain
    1626:	4b da       	rcall	.-2922   	; 0xabe <initArrays>
    1628:	4e e3       	ldi	r20, 0x3E	; 62
    162a:	53 e0       	ldi	r21, 0x03	; 3
    162c:	62 e0       	ldi	r22, 0x02	; 2
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	c6 01       	movw	r24, r12
    1632:	45 da       	rcall	.-2934   	; 0xabe <initArrays>
initArrays(initTheScreen->knobScreen,3,"ReleaseTimexx:xx xxx"); //string 3 is Envelop Time
    1634:	43 e5       	ldi	r20, 0x53	; 83
    1636:	53 e0       	ldi	r21, 0x03	; 3
    1638:	63 e0       	ldi	r22, 0x03	; 3
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	c6 01       	movw	r24, r12
    163e:	3f da       	rcall	.-2946   	; 0xabe <initArrays>
initArrays(initTheScreen->knobScreen,4,"TrackVolume xx:xxxdb"); //string 4 is track Level.
    1640:	48 e6       	ldi	r20, 0x68	; 104
    1642:	53 e0       	ldi	r21, 0x03	; 3
    1644:	64 e0       	ldi	r22, 0x04	; 4
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	c6 01       	movw	r24, r12
    164a:	39 da       	rcall	.-2958   	; 0xabe <initArrays>
    164c:	cc 52       	subi	r28, 0x2C	; 44
//initArrays(initTheScreen->knobScreen,5,"BPM: ");
//we might want to put in one of these for BPM, but I'm not sure. 

numPrinter(initTheScreen->screen0[2],5,3, currentPattern.patternBPM);
    164e:	df 4f       	sbci	r29, 0xFF	; 255
    1650:	28 81       	ld	r18, Y
    1652:	39 81       	ldd	r19, Y+1	; 0x01
    1654:	c4 5d       	subi	r28, 0xD4	; 212
    1656:	d0 40       	sbci	r29, 0x00	; 0
    1658:	43 e0       	ldi	r20, 0x03	; 3
    165a:	65 e0       	ldi	r22, 0x05	; 5
    165c:	c8 01       	movw	r24, r16
    165e:	8a 96       	adiw	r24, 0x2a	; 42
    1660:	ad d7       	rcall	.+3930   	; 0x25bc <numPrinter>
    1662:	cd 56       	subi	r28, 0x6D	; 109
numPrinter(initTheScreen->screen3[1],14,2, (currentGlobals.midiChannel)+1);
    1664:	de 4f       	sbci	r29, 0xFE	; 254
    1666:	28 81       	ld	r18, Y
    1668:	c3 59       	subi	r28, 0x93	; 147
    166a:	d1 40       	sbci	r29, 0x01	; 1
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	2f 5f       	subi	r18, 0xFF	; 255
    1670:	3f 4f       	sbci	r19, 0xFF	; 255
    1672:	42 e0       	ldi	r20, 0x02	; 2
    1674:	6e e0       	ldi	r22, 0x0E	; 14
    1676:	c8 01       	movw	r24, r16
    1678:	84 5b       	subi	r24, 0xB4	; 180
    167a:	9d 4f       	sbci	r25, 0xFD	; 253
    167c:	9f d7       	rcall	.+3902   	; 0x25bc <numPrinter>
    167e:	f1 2c       	mov	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	e8 1a       	sub	r14, r24
    1684:	f8 0a       	sbc	r15, r24
    1686:	97 01       	movw	r18, r14
    1688:	43 e0       	ldi	r20, 0x03	; 3
    168a:	69 e0       	ldi	r22, 0x09	; 9
    168c:	c8 01       	movw	r24, r16
    168e:	45 96       	adiw	r24, 0x15	; 21
    1690:	95 d7       	rcall	.+3882   	; 0x25bc <numPrinter>
    1692:	97 01       	movw	r18, r14
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    1694:	43 e0       	ldi	r20, 0x03	; 3
    1696:	69 e0       	ldi	r22, 0x09	; 9
    1698:	c8 01       	movw	r24, r16
    169a:	8e 52       	subi	r24, 0x2E	; 46
    169c:	9f 4f       	sbci	r25, 0xFF	; 255
    169e:	8e d7       	rcall	.+3868   	; 0x25bc <numPrinter>
    16a0:	ca 52       	subi	r28, 0x2A	; 42
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
    16a2:	df 4f       	sbci	r29, 0xFF	; 255
    16a4:	28 81       	ld	r18, Y
    16a6:	c6 5d       	subi	r28, 0xD6	; 214
    16a8:	d0 40       	sbci	r29, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	42 e0       	ldi	r20, 0x02	; 2
    16ae:	67 e0       	ldi	r22, 0x07	; 7
    16b0:	c8 01       	movw	r24, r16
    16b2:	89 51       	subi	r24, 0x19	; 25
    16b4:	9f 4f       	sbci	r25, 0xFF	; 255
    16b6:	82 d7       	rcall	.+3844   	; 0x25bc <numPrinter>
    16b8:	c5 57       	subi	r28, 0x75	; 117
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
    16ba:	de 4f       	sbci	r29, 0xFE	; 254
    16bc:	28 81       	ld	r18, Y
    16be:	cb 58       	subi	r28, 0x8B	; 139
    16c0:	d1 40       	sbci	r29, 0x01	; 1
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	2f 5f       	subi	r18, 0xFF	; 255
    16c6:	3f 4f       	sbci	r19, 0xFF	; 255
    16c8:	42 e0       	ldi	r20, 0x02	; 2
    16ca:	6d e0       	ldi	r22, 0x0D	; 13
    16cc:	c8 01       	movw	r24, r16
    16ce:	84 50       	subi	r24, 0x04	; 4
    16d0:	9f 4f       	sbci	r25, 0xFF	; 255
    16d2:	74 d7       	rcall	.+3816   	; 0x25bc <numPrinter>
    16d4:	e1 2c       	mov	r14, r1
    16d6:	f1 2c       	mov	r15, r1
    16d8:	b7 01       	movw	r22, r14
    16da:	c8 01       	movw	r24, r16
 
	for(uint8_t i=0;i<4; i++ )
	{
		outputS(initTheScreen->screen0[i],i);
    16dc:	57 d7       	rcall	.+3758   	; 0x258c <outputS>
    16de:	8f ef       	ldi	r24, 0xFF	; 255
    16e0:	e8 1a       	sub	r14, r24
    16e2:	f8 0a       	sbc	r15, r24
    16e4:	0b 5e       	subi	r16, 0xEB	; 235
    16e6:	1f 4f       	sbci	r17, 0xFF	; 255
    16e8:	84 e0       	ldi	r24, 0x04	; 4
    16ea:	e8 16       	cp	r14, r24
    16ec:	f1 04       	cpc	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
 
	for(uint8_t i=0;i<4; i++ )
    16ee:	a1 f7       	brne	.-24     	; 0x16d8 <initMenu+0x1e4>
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	1f 91       	pop	r17
	{
		outputS(initTheScreen->screen0[i],i);
	}
}
    16f6:	0f 91       	pop	r16
    16f8:	ff 90       	pop	r15
    16fa:	ef 90       	pop	r14
    16fc:	df 90       	pop	r13
    16fe:	cf 90       	pop	r12
    1700:	08 95       	ret

00001702 <reInitMenuOnLoad>:
    1702:	ef 92       	push	r14
    1704:	ff 92       	push	r15
    1706:	0f 93       	push	r16

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(Screen *initTheScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    1708:	1f 93       	push	r17
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	ec 01       	movw	r28, r24
    1710:	8b 01       	movw	r16, r22
    1712:	7a 01       	movw	r14, r20
	numPrinter(initTheScreen->screen0[2],5,3, currentPattern->patternBPM);
    1714:	fb 01       	movw	r30, r22
    1716:	e8 53       	subi	r30, 0x38	; 56
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	20 81       	ld	r18, Z
    171c:	31 81       	ldd	r19, Z+1	; 0x01
    171e:	43 e0       	ldi	r20, 0x03	; 3
    1720:	65 e0       	ldi	r22, 0x05	; 5
    1722:	8a 96       	adiw	r24, 0x2a	; 42
    1724:	4b d7       	rcall	.+3734   	; 0x25bc <numPrinter>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
    1726:	f8 01       	movw	r30, r16
    1728:	e6 53       	subi	r30, 0x36	; 54
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	20 81       	ld	r18, Z
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	42 e0       	ldi	r20, 0x02	; 2
    1732:	67 e0       	ldi	r22, 0x07	; 7
    1734:	ce 01       	movw	r24, r28
    1736:	89 51       	subi	r24, 0x19	; 25
    1738:	9f 4f       	sbci	r25, 0xFF	; 255
    173a:	40 d7       	rcall	.+3712   	; 0x25bc <numPrinter>
	numPrinter(initTheScreen->screen1[1],9,3,(currentGlobals->currentPatternNumber)+1);
    173c:	f7 01       	movw	r30, r14
    173e:	23 81       	ldd	r18, Z+3	; 0x03
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	2f 5f       	subi	r18, 0xFF	; 255
    1744:	3f 4f       	sbci	r19, 0xFF	; 255
    1746:	43 e0       	ldi	r20, 0x03	; 3
    1748:	69 e0       	ldi	r22, 0x09	; 9
    174a:	ce 01       	movw	r24, r28
    174c:	8e 52       	subi	r24, 0x2E	; 46
    174e:	9f 4f       	sbci	r25, 0xFF	; 255
    1750:	35 d7       	rcall	.+3690   	; 0x25bc <numPrinter>
	numPrinter(initTheScreen->screen0[1],9,3,(currentGlobals->currentPatternNumber)+1);
    1752:	f7 01       	movw	r30, r14
    1754:	23 81       	ldd	r18, Z+3	; 0x03
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	2f 5f       	subi	r18, 0xFF	; 255
    175a:	3f 4f       	sbci	r19, 0xFF	; 255
    175c:	43 e0       	ldi	r20, 0x03	; 3
    175e:	69 e0       	ldi	r22, 0x09	; 9
    1760:	ce 01       	movw	r24, r28
    1762:	45 96       	adiw	r24, 0x15	; 21
    1764:	2b d7       	rcall	.+3670   	; 0x25bc <numPrinter>
}
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	ff 90       	pop	r15
    1770:	ef 90       	pop	r14
    1772:	08 95       	ret

00001774 <updateScreen>:

void updateScreen(Screen *menuScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    1774:	8f 92       	push	r8
    1776:	9f 92       	push	r9
    1778:	af 92       	push	r10
    177a:	bf 92       	push	r11
    177c:	cf 92       	push	r12
    177e:	df 92       	push	r13
    1780:	ef 92       	push	r14
    1782:	ff 92       	push	r15
    1784:	0f 93       	push	r16
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	8c 01       	movw	r16, r24
    178e:	7b 01       	movw	r14, r22
    1790:	ea 01       	movw	r28, r20
	
	if((currentGlobals->valueChangeFlag)&(1<<encoderChange))//check if encoder bit is high
    1792:	8a 85       	ldd	r24, Y+10	; 0x0a
    1794:	80 ff       	sbrs	r24, 0
    1796:	da c2       	rjmp	.+1460   	; 0x1d4c <updateScreen+0x5d8>
	{ 
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<encoderChange));//set encoder bit low, and carry our whatever encoder change has occurred. 
    1798:	1a 86       	std	Y+10, r1	; 0x0a
		//we need to debug this to make sure it's doing what we think it's doing.
		switch(currentGlobals->menuState)
    179a:	8e 81       	ldd	r24, Y+6	; 0x06
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	8b 33       	cpi	r24, 0x3B	; 59
    17a0:	91 05       	cpc	r25, r1
    17a2:	08 f0       	brcs	.+2      	; 0x17a6 <updateScreen+0x32>
    17a4:	d0 c2       	rjmp	.+1440   	; 0x1d46 <updateScreen+0x5d2>
    17a6:	fc 01       	movw	r30, r24
    17a8:	88 27       	eor	r24, r24
    17aa:	e3 55       	subi	r30, 0x53	; 83
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	8f 4f       	sbci	r24, 0xFF	; 255
    17b0:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__tablejump2__>
		{
			case PreformanceModeInit: //initial state
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    17b4:	c8 01       	movw	r24, r16
    17b6:	a5 df       	rcall	.-182    	; 0x1702 <reInitMenuOnLoad>
			outputS(menuScreen->screen0[0], 0);
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	c8 01       	movw	r24, r16
    17be:	e6 d6       	rcall	.+3532   	; 0x258c <outputS>
			outputS(menuScreen->screen0[1], 1);
    17c0:	61 e0       	ldi	r22, 0x01	; 1
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	c8 01       	movw	r24, r16
    17c6:	45 96       	adiw	r24, 0x15	; 21
    17c8:	e1 d6       	rcall	.+3522   	; 0x258c <outputS>
			outputS(menuScreen->screen0[2], 2);
    17ca:	62 e0       	ldi	r22, 0x02	; 2
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	c8 01       	movw	r24, r16
    17d0:	8a 96       	adiw	r24, 0x2a	; 42
    17d2:	dc d6       	rcall	.+3512   	; 0x258c <outputS>
			outputS(menuScreen->screen0[3], 3);
    17d4:	63 e0       	ldi	r22, 0x03	; 3
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	c8 01       	movw	r24, r16
    17da:	cf 96       	adiw	r24, 0x3f	; 63
    17dc:	d7 d6       	rcall	.+3502   	; 0x258c <outputS>
			break;
    17de:	b3 c2       	rjmp	.+1382   	; 0x1d46 <updateScreen+0x5d2>

			case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0);
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	c8 01       	movw	r24, r16
    17e6:	83 54       	subi	r24, 0x43	; 67
    17e8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ea:	d0 d6       	rcall	.+3488   	; 0x258c <outputS>
			outputS(menuScreen->screen1[1], 1);
    17ec:	61 e0       	ldi	r22, 0x01	; 1
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	c8 01       	movw	r24, r16
    17f2:	8e 52       	subi	r24, 0x2E	; 46
    17f4:	9f 4f       	sbci	r25, 0xFF	; 255
    17f6:	ca d6       	rcall	.+3476   	; 0x258c <outputS>
			outputS(menuScreen->screen1[2], 2);
    17f8:	62 e0       	ldi	r22, 0x02	; 2
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	c8 01       	movw	r24, r16
    17fe:	89 51       	subi	r24, 0x19	; 25
    1800:	9f 4f       	sbci	r25, 0xFF	; 255
    1802:	c4 d6       	rcall	.+3464   	; 0x258c <outputS>
			outputS(menuScreen->screen1[3], 3);
    1804:	63 e0       	ldi	r22, 0x03	; 3
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	c8 01       	movw	r24, r16
    180a:	84 50       	subi	r24, 0x04	; 4
    180c:	9f 4f       	sbci	r25, 0xFF	; 255
    180e:	be d6       	rcall	.+3452   	; 0x258c <outputS>
    1810:	81 e1       	ldi	r24, 0x11	; 17
			currentGlobals->menuState = SequencerMenuArrow1; 
    1812:	8e 83       	std	Y+6, r24	; 0x06
    1814:	88 e0       	ldi	r24, 0x08	; 8
			
			
			case SequencerMenuArrow1:
			menuScreen->screen1[1][19]= 8;
    1816:	f8 01       	movw	r30, r16
    1818:	eb 51       	subi	r30, 0x1B	; 27
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	80 83       	st	Z, r24
    181e:	80 e2       	ldi	r24, 0x20	; 32
			menuScreen->screen1[2][19] = ' ';
    1820:	75 96       	adiw	r30, 0x15	; 21
    1822:	80 83       	st	Z, r24
			menuScreen->screen1[3][19] = ' ';
    1824:	75 96       	adiw	r30, 0x15	; 21
    1826:	80 83       	st	Z, r24
			outputS(menuScreen->screen1[1], 1);
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	c8 01       	movw	r24, r16
    182e:	8e 52       	subi	r24, 0x2E	; 46
    1830:	9f 4f       	sbci	r25, 0xFF	; 255
    1832:	ac d6       	rcall	.+3416   	; 0x258c <outputS>
			outputS(menuScreen->screen1[2], 2);
    1834:	62 e0       	ldi	r22, 0x02	; 2
    1836:	70 e0       	ldi	r23, 0x00	; 0
    1838:	c8 01       	movw	r24, r16
    183a:	89 51       	subi	r24, 0x19	; 25
    183c:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    183e:	a6 d6       	rcall	.+3404   	; 0x258c <outputS>
    1840:	63 e0       	ldi	r22, 0x03	; 3
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	c8 01       	movw	r24, r16
    1846:	84 50       	subi	r24, 0x04	; 4
    1848:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    184a:	a0 d6       	rcall	.+3392   	; 0x258c <outputS>
			
			case SequencerMenuArrow1Select:
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    184c:	7c c2       	rjmp	.+1272   	; 0x1d46 <updateScreen+0x5d2>
    184e:	c8 01       	movw	r24, r16
    1850:	58 df       	rcall	.-336    	; 0x1702 <reInitMenuOnLoad>
			outputS(menuScreen->screen1[1],1);
    1852:	61 e0       	ldi	r22, 0x01	; 1
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	c8 01       	movw	r24, r16
    1858:	8e 52       	subi	r24, 0x2E	; 46
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
    185c:	97 d6       	rcall	.+3374   	; 0x258c <outputS>
    185e:	73 c2       	rjmp	.+1254   	; 0x1d46 <updateScreen+0x5d2>
			break;
    1860:	80 e2       	ldi	r24, 0x20	; 32
	
	
			case SequencerMenuArrow2:
			menuScreen->screen1[1][19]= ' ';
    1862:	f8 01       	movw	r30, r16
    1864:	eb 51       	subi	r30, 0x1B	; 27
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	80 83       	st	Z, r24
			menuScreen->screen1[2][19] = 8;
    186a:	98 e0       	ldi	r25, 0x08	; 8
    186c:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = ' ';
    186e:	90 83       	st	Z, r25
    1870:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen1[1], 1);
    1872:	80 83       	st	Z, r24
    1874:	61 e0       	ldi	r22, 0x01	; 1
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	c8 01       	movw	r24, r16
    187a:	8e 52       	subi	r24, 0x2E	; 46
    187c:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    187e:	86 d6       	rcall	.+3340   	; 0x258c <outputS>
    1880:	62 e0       	ldi	r22, 0x02	; 2
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	c8 01       	movw	r24, r16
    1886:	89 51       	subi	r24, 0x19	; 25
    1888:	9f 4f       	sbci	r25, 0xFF	; 255
    188a:	80 d6       	rcall	.+3328   	; 0x258c <outputS>
			outputS(menuScreen->screen1[3], 3);
    188c:	63 e0       	ldi	r22, 0x03	; 3
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	c8 01       	movw	r24, r16
    1892:	84 50       	subi	r24, 0x04	; 4
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	7a d6       	rcall	.+3316   	; 0x258c <outputS>
			break;
	
			case SequencerMenuArrow2Select:
			numPrinter(menuScreen->screen1[2],7,2,currentPattern->numSteps);
    1898:	56 c2       	rjmp	.+1196   	; 0x1d46 <updateScreen+0x5d2>
    189a:	fb 01       	movw	r30, r22
    189c:	e6 53       	subi	r30, 0x36	; 54
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	20 81       	ld	r18, Z
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	42 e0       	ldi	r20, 0x02	; 2
    18a6:	67 e0       	ldi	r22, 0x07	; 7
    18a8:	68 01       	movw	r12, r16
    18aa:	87 ee       	ldi	r24, 0xE7	; 231
    18ac:	c8 0e       	add	r12, r24
    18ae:	d1 1c       	adc	r13, r1
    18b0:	c6 01       	movw	r24, r12
    18b2:	84 d6       	rcall	.+3336   	; 0x25bc <numPrinter>
			outputS(menuScreen->screen1[2],2);
    18b4:	62 e0       	ldi	r22, 0x02	; 2
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	c6 01       	movw	r24, r12
    18ba:	68 d6       	rcall	.+3280   	; 0x258c <outputS>
			break;
    18bc:	44 c2       	rjmp	.+1160   	; 0x1d46 <updateScreen+0x5d2>
	
			case SequencerMenuArrow3:
			menuScreen->screen1[1][19]= ' ';
    18be:	80 e2       	ldi	r24, 0x20	; 32
    18c0:	f8 01       	movw	r30, r16
    18c2:	eb 51       	subi	r30, 0x1B	; 27
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
			menuScreen->screen1[2][19] = ' ';
    18c6:	80 83       	st	Z, r24
    18c8:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = 8;
    18ca:	80 83       	st	Z, r24
    18cc:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen1[1], 1);
    18ce:	75 96       	adiw	r30, 0x15	; 21
    18d0:	80 83       	st	Z, r24
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	c8 01       	movw	r24, r16
    18d8:	8e 52       	subi	r24, 0x2E	; 46
    18da:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    18dc:	57 d6       	rcall	.+3246   	; 0x258c <outputS>
    18de:	62 e0       	ldi	r22, 0x02	; 2
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	c8 01       	movw	r24, r16
    18e4:	89 51       	subi	r24, 0x19	; 25
    18e6:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    18e8:	51 d6       	rcall	.+3234   	; 0x258c <outputS>
    18ea:	63 e0       	ldi	r22, 0x03	; 3
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	c8 01       	movw	r24, r16
    18f0:	84 50       	subi	r24, 0x04	; 4
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    18f4:	4b d6       	rcall	.+3222   	; 0x258c <outputS>
		
			case SequencerMenuArrow3Select:
			numPrinter(menuScreen->screen1[3],14,2,(currentGlobals->currentStep)+1); //these are 0 indexed, so we need to add 1 to the display.
    18f6:	27 c2       	rjmp	.+1102   	; 0x1d46 <updateScreen+0x5d2>
    18f8:	2c 81       	ldd	r18, Y+4	; 0x04
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	2f 5f       	subi	r18, 0xFF	; 255
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	42 e0       	ldi	r20, 0x02	; 2
    1902:	6e e0       	ldi	r22, 0x0E	; 14
    1904:	68 01       	movw	r12, r16
    1906:	9c ef       	ldi	r25, 0xFC	; 252
    1908:	c9 0e       	add	r12, r25
    190a:	d1 1c       	adc	r13, r1
			outputS(menuScreen->screen1[3],3);
    190c:	c6 01       	movw	r24, r12
    190e:	56 d6       	rcall	.+3244   	; 0x25bc <numPrinter>
    1910:	63 e0       	ldi	r22, 0x03	; 3
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	c6 01       	movw	r24, r12
			break;
	

			case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0);
    1916:	3a d6       	rcall	.+3188   	; 0x258c <outputS>
    1918:	16 c2       	rjmp	.+1068   	; 0x1d46 <updateScreen+0x5d2>
    191a:	60 e0       	ldi	r22, 0x00	; 0
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	c8 01       	movw	r24, r16
    1920:	86 58       	subi	r24, 0x86	; 134
    1922:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[1], 1);
    1924:	33 d6       	rcall	.+3174   	; 0x258c <outputS>
    1926:	61 e0       	ldi	r22, 0x01	; 1
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	c8 01       	movw	r24, r16
    192c:	81 57       	subi	r24, 0x71	; 113
    192e:	9e 4f       	sbci	r25, 0xFE	; 254
    1930:	2d d6       	rcall	.+3162   	; 0x258c <outputS>
			outputS(menuScreen->screen2[2], 2);
    1932:	62 e0       	ldi	r22, 0x02	; 2
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	c8 01       	movw	r24, r16
    1938:	8c 55       	subi	r24, 0x5C	; 92
    193a:	9e 4f       	sbci	r25, 0xFE	; 254
    193c:	27 d6       	rcall	.+3150   	; 0x258c <outputS>
			outputS(menuScreen->screen2[3], 3);
    193e:	63 e0       	ldi	r22, 0x03	; 3
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	c8 01       	movw	r24, r16
    1944:	87 54       	subi	r24, 0x47	; 71
    1946:	9e 4f       	sbci	r25, 0xFE	; 254
    1948:	21 d6       	rcall	.+3138   	; 0x258c <outputS>
			currentGlobals->menuState = TrackMenuArrow1;
    194a:	81 e2       	ldi	r24, 0x21	; 33
		
			case TrackMenuArrow1:
			menuScreen->screen2[1][19]= 8;
    194c:	8e 83       	std	Y+6, r24	; 0x06
    194e:	88 e0       	ldi	r24, 0x08	; 8
    1950:	f8 01       	movw	r30, r16
    1952:	ee 55       	subi	r30, 0x5E	; 94
    1954:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    1956:	80 83       	st	Z, r24
    1958:	80 e2       	ldi	r24, 0x20	; 32
    195a:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    195c:	80 83       	st	Z, r24
    195e:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    1960:	80 83       	st	Z, r24
    1962:	61 e0       	ldi	r22, 0x01	; 1
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	c8 01       	movw	r24, r16
    1968:	81 57       	subi	r24, 0x71	; 113
    196a:	9e 4f       	sbci	r25, 0xFE	; 254
    196c:	0f d6       	rcall	.+3102   	; 0x258c <outputS>
			outputS(menuScreen->screen2[2], 2);
    196e:	62 e0       	ldi	r22, 0x02	; 2
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	c8 01       	movw	r24, r16
    1974:	8c 55       	subi	r24, 0x5C	; 92
    1976:	9e 4f       	sbci	r25, 0xFE	; 254
    1978:	09 d6       	rcall	.+3090   	; 0x258c <outputS>
			outputS(menuScreen->screen2[3], 3);
    197a:	63 e0       	ldi	r22, 0x03	; 3
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	c8 01       	movw	r24, r16
    1980:	87 54       	subi	r24, 0x47	; 71
    1982:	9e 4f       	sbci	r25, 0xFE	; 254
    1984:	03 d6       	rcall	.+3078   	; 0x258c <outputS>
			break;
    1986:	df c1       	rjmp	.+958    	; 0x1d46 <updateScreen+0x5d2>
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1988:	8d 81       	ldd	r24, Y+5	; 0x05
    198a:	db 01       	movw	r26, r22
    198c:	a8 0f       	add	r26, r24
    198e:	b1 1d       	adc	r27, r1
    1990:	fd 01       	movw	r30, r26
    1992:	e8 56       	subi	r30, 0x68	; 104
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    1996:	20 81       	ld	r18, Z
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	32 2f       	mov	r19, r18
    199c:	22 27       	eor	r18, r18
			outputS(menuScreen->screen2[2], 2);
			outputS(menuScreen->screen2[3], 3);
			break;
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    199e:	70 96       	adiw	r30, 0x10	; 16
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    19a0:	80 81       	ld	r24, Z
    19a2:	28 2b       	or	r18, r24
    19a4:	44 e0       	ldi	r20, 0x04	; 4
    19a6:	6a e0       	ldi	r22, 0x0A	; 10
    19a8:	68 01       	movw	r12, r16
    19aa:	b1 e7       	ldi	r27, 0x71	; 113
    19ac:	cb 1a       	sub	r12, r27
    19ae:	be ef       	ldi	r27, 0xFE	; 254
    19b0:	db 0a       	sbc	r13, r27
    19b2:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen2[1],1);
    19b4:	03 d6       	rcall	.+3078   	; 0x25bc <numPrinter>
    19b6:	61 e0       	ldi	r22, 0x01	; 1
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	c6 01       	movw	r24, r12
			break;
    19bc:	e7 d5       	rcall	.+3022   	; 0x258c <outputS>
	
			case TrackMenuArrow2:
			menuScreen->screen2[1][19]= ' ';
    19be:	c3 c1       	rjmp	.+902    	; 0x1d46 <updateScreen+0x5d2>
    19c0:	80 e2       	ldi	r24, 0x20	; 32
    19c2:	f8 01       	movw	r30, r16
    19c4:	ee 55       	subi	r30, 0x5E	; 94
    19c6:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = 8;
    19c8:	80 83       	st	Z, r24
    19ca:	98 e0       	ldi	r25, 0x08	; 8
    19cc:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    19ce:	90 83       	st	Z, r25
    19d0:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    19d2:	80 83       	st	Z, r24
    19d4:	61 e0       	ldi	r22, 0x01	; 1
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	c8 01       	movw	r24, r16
    19da:	81 57       	subi	r24, 0x71	; 113
    19dc:	9e 4f       	sbci	r25, 0xFE	; 254
    19de:	d6 d5       	rcall	.+2988   	; 0x258c <outputS>
			outputS(menuScreen->screen2[2], 2);
    19e0:	62 e0       	ldi	r22, 0x02	; 2
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	c8 01       	movw	r24, r16
    19e6:	8c 55       	subi	r24, 0x5C	; 92
    19e8:	9e 4f       	sbci	r25, 0xFE	; 254
    19ea:	d0 d5       	rcall	.+2976   	; 0x258c <outputS>
    19ec:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[3], 3);
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	c8 01       	movw	r24, r16
    19f2:	87 54       	subi	r24, 0x47	; 71
    19f4:	9e 4f       	sbci	r25, 0xFE	; 254
    19f6:	ca d5       	rcall	.+2964   	; 0x258c <outputS>
    19f8:	a6 c1       	rjmp	.+844    	; 0x1d46 <updateScreen+0x5d2>
    19fa:	8d 81       	ldd	r24, Y+5	; 0x05
			break;
    19fc:	fb 01       	movw	r30, r22
		
			case TrackMenuArrow2Select:
			//we need some serious button code in these two cases. 
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    19fe:	e8 0f       	add	r30, r24
    1a00:	f1 1d       	adc	r31, r1
    1a02:	e8 57       	subi	r30, 0x78	; 120
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 81       	ld	r24, Z
    1a08:	88 23       	and	r24, r24
    1a0a:	19 f0       	breq	.+6      	; 0x1a12 <updateScreen+0x29e>
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	79 f0       	breq	.+30     	; 0x1a2e <updateScreen+0x2ba>
    1a10:	1c c0       	rjmp	.+56     	; 0x1a4a <updateScreen+0x2d6>
    1a12:	83 e5       	ldi	r24, 0x53	; 83
			{
				case 0:
				menuScreen->screen2[2][10] = 'S';
    1a14:	f8 01       	movw	r30, r16
    1a16:	e2 55       	subi	r30, 0x52	; 82
    1a18:	fe 4f       	sbci	r31, 0xFE	; 254
    1a1a:	80 83       	st	Z, r24
    1a1c:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[2][11] = 'o';
    1a1e:	31 96       	adiw	r30, 0x01	; 1
    1a20:	80 83       	st	Z, r24
    1a22:	9c e6       	ldi	r25, 0x6C	; 108
				menuScreen->screen2[2][12] = 'l';
    1a24:	31 96       	adiw	r30, 0x01	; 1
    1a26:	90 83       	st	Z, r25
    1a28:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'o';
    1a2a:	80 83       	st	Z, r24
    1a2c:	0e c0       	rjmp	.+28     	; 0x1a4a <updateScreen+0x2d6>
				break;
    1a2e:	80 e5       	ldi	r24, 0x50	; 80

				case 1:
				menuScreen->screen2[2][10] = 'P';
    1a30:	f8 01       	movw	r30, r16
    1a32:	e2 55       	subi	r30, 0x52	; 82
    1a34:	fe 4f       	sbci	r31, 0xFE	; 254
    1a36:	80 83       	st	Z, r24
				menuScreen->screen2[2][11] = 'o';
    1a38:	8f e6       	ldi	r24, 0x6F	; 111
    1a3a:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][12] = 'l';
    1a3c:	80 83       	st	Z, r24
    1a3e:	8c e6       	ldi	r24, 0x6C	; 108
    1a40:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'y';
    1a42:	80 83       	st	Z, r24
    1a44:	89 e7       	ldi	r24, 0x79	; 121
	
				case 3:
				break;
			}
			
			outputS(menuScreen->screen2[2], 2);
    1a46:	31 96       	adiw	r30, 0x01	; 1
    1a48:	80 83       	st	Z, r24
    1a4a:	62 e0       	ldi	r22, 0x02	; 2
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	c8 01       	movw	r24, r16
    1a50:	8c 55       	subi	r24, 0x5C	; 92
    1a52:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1a54:	9b d5       	rcall	.+2870   	; 0x258c <outputS>

			case TrackMenuArrow3:
			menuScreen->screen2[1][19]= ' ';
    1a56:	77 c1       	rjmp	.+750    	; 0x1d46 <updateScreen+0x5d2>
    1a58:	80 e2       	ldi	r24, 0x20	; 32
    1a5a:	f8 01       	movw	r30, r16
    1a5c:	ee 55       	subi	r30, 0x5E	; 94
    1a5e:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    1a60:	80 83       	st	Z, r24
    1a62:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = 8;
    1a64:	80 83       	st	Z, r24
    1a66:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[1], 1);
    1a68:	75 96       	adiw	r30, 0x15	; 21
    1a6a:	80 83       	st	Z, r24
    1a6c:	61 e0       	ldi	r22, 0x01	; 1
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	c8 01       	movw	r24, r16
    1a72:	81 57       	subi	r24, 0x71	; 113
			outputS(menuScreen->screen2[2], 2);
    1a74:	9e 4f       	sbci	r25, 0xFE	; 254
    1a76:	8a d5       	rcall	.+2836   	; 0x258c <outputS>
    1a78:	62 e0       	ldi	r22, 0x02	; 2
    1a7a:	70 e0       	ldi	r23, 0x00	; 0
    1a7c:	c8 01       	movw	r24, r16
    1a7e:	8c 55       	subi	r24, 0x5C	; 92
    1a80:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[3], 3);
    1a82:	84 d5       	rcall	.+2824   	; 0x258c <outputS>
    1a84:	63 e0       	ldi	r22, 0x03	; 3
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	c8 01       	movw	r24, r16
    1a8a:	87 54       	subi	r24, 0x47	; 71
    1a8c:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1a8e:	7e d5       	rcall	.+2812   	; 0x258c <outputS>
		
			case TrackMenuArrow3Select:
			numPrinter(menuScreen->screen2[3],10,2,(currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1);
    1a90:	5a c1       	rjmp	.+692    	; 0x1d46 <updateScreen+0x5d2>
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	fb 01       	movw	r30, r22
    1a96:	e8 0f       	add	r30, r24
    1a98:	f1 1d       	adc	r31, r1
    1a9a:	20 8d       	ldd	r18, Z+24	; 0x18
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	2f 5f       	subi	r18, 0xFF	; 255
    1aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa2:	42 e0       	ldi	r20, 0x02	; 2
    1aa4:	6a e0       	ldi	r22, 0x0A	; 10
    1aa6:	68 01       	movw	r12, r16
    1aa8:	e7 e4       	ldi	r30, 0x47	; 71
    1aaa:	ce 1a       	sub	r12, r30
    1aac:	ee ef       	ldi	r30, 0xFE	; 254
    1aae:	de 0a       	sbc	r13, r30
			outputS(menuScreen->screen2[3],3);
    1ab0:	c6 01       	movw	r24, r12
    1ab2:	84 d5       	rcall	.+2824   	; 0x25bc <numPrinter>
    1ab4:	63 e0       	ldi	r22, 0x03	; 3
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	c6 01       	movw	r24, r12
			break;
    1aba:	68 d5       	rcall	.+2768   	; 0x258c <outputS>
			
			case TrackMenuArrow4:
			menuScreen->screen2[2][19]= ' ';
    1abc:	44 c1       	rjmp	.+648    	; 0x1d46 <updateScreen+0x5d2>
    1abe:	80 e2       	ldi	r24, 0x20	; 32
    1ac0:	f8 01       	movw	r30, r16
    1ac2:	e9 54       	subi	r30, 0x49	; 73
    1ac4:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[3][19] = ' ';
    1ac6:	80 83       	st	Z, r24
    1ac8:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[4][19] = 8;
    1aca:	80 83       	st	Z, r24
    1acc:	88 e0       	ldi	r24, 0x08	; 8
    1ace:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[2], 1);
    1ad0:	80 83       	st	Z, r24
    1ad2:	61 e0       	ldi	r22, 0x01	; 1
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	c8 01       	movw	r24, r16
    1ad8:	8c 55       	subi	r24, 0x5C	; 92
    1ada:	9e 4f       	sbci	r25, 0xFE	; 254
    1adc:	57 d5       	rcall	.+2734   	; 0x258c <outputS>
			outputS(menuScreen->screen2[3], 2);
    1ade:	62 e0       	ldi	r22, 0x02	; 2
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	c8 01       	movw	r24, r16
    1ae4:	87 54       	subi	r24, 0x47	; 71
    1ae6:	9e 4f       	sbci	r25, 0xFE	; 254
    1ae8:	51 d5       	rcall	.+2722   	; 0x258c <outputS>
    1aea:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[4], 3);
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	c8 01       	movw	r24, r16
    1af0:	82 53       	subi	r24, 0x32	; 50
    1af2:	9e 4f       	sbci	r25, 0xFE	; 254
    1af4:	4b d5       	rcall	.+2710   	; 0x258c <outputS>
    1af6:	27 c1       	rjmp	.+590    	; 0x1d46 <updateScreen+0x5d2>
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
			break;
    1afa:	fb 01       	movw	r30, r22
			
			case TrackMenuArrow4Select:
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1afc:	e8 0f       	add	r30, r24
    1afe:	f1 1d       	adc	r31, r1
    1b00:	e5 51       	subi	r30, 0x15	; 21
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	80 81       	ld	r24, Z
    1b06:	81 30       	cpi	r24, 0x01	; 1
    1b08:	a9 f0       	breq	.+42     	; 0x1b34 <updateScreen+0x3c0>
    1b0a:	28 f0       	brcs	.+10     	; 0x1b16 <updateScreen+0x3a2>
    1b0c:	82 30       	cpi	r24, 0x02	; 2
    1b0e:	f9 f0       	breq	.+62     	; 0x1b4e <updateScreen+0x3da>
    1b10:	83 30       	cpi	r24, 0x03	; 3
    1b12:	51 f1       	breq	.+84     	; 0x1b68 <updateScreen+0x3f4>
    1b14:	37 c0       	rjmp	.+110    	; 0x1b84 <updateScreen+0x410>
    1b16:	81 e4       	ldi	r24, 0x41	; 65
    1b18:	f8 01       	movw	r30, r16
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1b1a:	e4 52       	subi	r30, 0x24	; 36
    1b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b1e:	80 83       	st	Z, r24
    1b20:	8d e2       	ldi	r24, 0x2D	; 45
    1b22:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1b24:	80 83       	st	Z, r24
    1b26:	82 e5       	ldi	r24, 0x52	; 82
    1b28:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1b2a:	80 83       	st	Z, r24
    1b2c:	80 e2       	ldi	r24, 0x20	; 32
    1b2e:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1b30:	80 83       	st	Z, r24
    1b32:	28 c0       	rjmp	.+80     	; 0x1b84 <updateScreen+0x410>
    1b34:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1b36:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1b38:	e4 52       	subi	r30, 0x24	; 36
    1b3a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b3c:	80 83       	st	Z, r24
    1b3e:	80 e2       	ldi	r24, 0x20	; 32
				menuScreen->screen2[4][15] = ' ';
    1b40:	31 96       	adiw	r30, 0x01	; 1
    1b42:	80 83       	st	Z, r24
    1b44:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = ' ';
    1b46:	80 83       	st	Z, r24
    1b48:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1b4a:	80 83       	st	Z, r24
    1b4c:	1b c0       	rjmp	.+54     	; 0x1b84 <updateScreen+0x410>
				break;
    1b4e:	81 e4       	ldi	r24, 0x41	; 65
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1b50:	f8 01       	movw	r30, r16
    1b52:	e4 52       	subi	r30, 0x24	; 36
    1b54:	fe 4f       	sbci	r31, 0xFE	; 254
    1b56:	80 83       	st	Z, r24
				menuScreen->screen2[4][15] = ' ';
    1b58:	80 e2       	ldi	r24, 0x20	; 32
    1b5a:	31 96       	adiw	r30, 0x01	; 1
    1b5c:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1b5e:	31 96       	adiw	r30, 0x01	; 1
    1b60:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1b62:	31 96       	adiw	r30, 0x01	; 1
				break;
    1b64:	80 83       	st	Z, r24
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1b66:	0e c0       	rjmp	.+28     	; 0x1b84 <updateScreen+0x410>
    1b68:	8e e4       	ldi	r24, 0x4E	; 78
    1b6a:	f8 01       	movw	r30, r16
    1b6c:	e4 52       	subi	r30, 0x24	; 36
				menuScreen->screen2[4][15] = 'o';
    1b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b70:	80 83       	st	Z, r24
    1b72:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][16] = 'n';
    1b74:	31 96       	adiw	r30, 0x01	; 1
    1b76:	80 83       	st	Z, r24
    1b78:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][17] = 'e';
    1b7a:	31 96       	adiw	r30, 0x01	; 1
    1b7c:	80 83       	st	Z, r24
    1b7e:	85 e6       	ldi	r24, 0x65	; 101
				break;
			}
			outputS(menuScreen->screen2[4],3);
    1b80:	31 96       	adiw	r30, 0x01	; 1
    1b82:	80 83       	st	Z, r24
    1b84:	63 e0       	ldi	r22, 0x03	; 3
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	c8 01       	movw	r24, r16
    1b8a:	82 53       	subi	r24, 0x32	; 50
    1b8c:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1b8e:	fe d4       	rcall	.+2556   	; 0x258c <outputS>
			
			case TrackMenuArrow5:
			menuScreen->screen2[3][19]= ' ';
    1b90:	da c0       	rjmp	.+436    	; 0x1d46 <updateScreen+0x5d2>
    1b92:	80 e2       	ldi	r24, 0x20	; 32
    1b94:	f8 01       	movw	r30, r16
    1b96:	e4 53       	subi	r30, 0x34	; 52
    1b98:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[4][19] = ' ';
    1b9a:	80 83       	st	Z, r24
			menuScreen->screen2[5][19] = 8;
    1b9c:	75 96       	adiw	r30, 0x15	; 21
    1b9e:	80 83       	st	Z, r24
    1ba0:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[3], 1);
    1ba2:	75 96       	adiw	r30, 0x15	; 21
    1ba4:	80 83       	st	Z, r24
    1ba6:	61 e0       	ldi	r22, 0x01	; 1
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	c8 01       	movw	r24, r16
    1bac:	87 54       	subi	r24, 0x47	; 71
    1bae:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[4], 2);
    1bb0:	ed d4       	rcall	.+2522   	; 0x258c <outputS>
    1bb2:	62 e0       	ldi	r22, 0x02	; 2
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	c8 01       	movw	r24, r16
    1bb8:	82 53       	subi	r24, 0x32	; 50
    1bba:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[5], 3);
    1bbc:	e7 d4       	rcall	.+2510   	; 0x258c <outputS>
    1bbe:	63 e0       	ldi	r22, 0x03	; 3
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	c8 01       	movw	r24, r16
    1bc4:	8d 51       	subi	r24, 0x1D	; 29
    1bc6:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1bc8:	e1 d4       	rcall	.+2498   	; 0x258c <outputS>

			case TrackMenuArrow5Select:;
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1bca:	bd c0       	rjmp	.+378    	; 0x1d46 <updateScreen+0x5d2>
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9b 01       	movw	r18, r22
    1bd0:	28 0f       	add	r18, r24
    1bd2:	31 1d       	adc	r19, r1
    1bd4:	f9 01       	movw	r30, r18
			numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1bd6:	e5 53       	subi	r30, 0x35	; 53
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	20 81       	ld	r18, Z
			outputS(menuScreen->screen2[4], 2);
			outputS(menuScreen->screen2[5], 3);
			break;

			case TrackMenuArrow5Select:;
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
			numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1bde:	32 2f       	mov	r19, r18
    1be0:	22 27       	eor	r18, r18
    1be2:	70 96       	adiw	r30, 0x10	; 16
    1be4:	80 81       	ld	r24, Z
    1be6:	28 2b       	or	r18, r24
    1be8:	45 e0       	ldi	r20, 0x05	; 5
    1bea:	6d e0       	ldi	r22, 0x0D	; 13
    1bec:	68 01       	movw	r12, r16
    1bee:	8d e1       	ldi	r24, 0x1D	; 29
    1bf0:	c8 1a       	sub	r12, r24
    1bf2:	8e ef       	ldi	r24, 0xFE	; 254
			menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
    1bf4:	d8 0a       	sbc	r13, r24
    1bf6:	c6 01       	movw	r24, r12
    1bf8:	e1 d4       	rcall	.+2498   	; 0x25bc <numPrinter>
    1bfa:	d8 01       	movw	r26, r16
    1bfc:	a0 51       	subi	r26, 0x10	; 16
    1bfe:	be 4f       	sbci	r27, 0xFE	; 254
    1c00:	8c 91       	ld	r24, X
    1c02:	f8 01       	movw	r30, r16
			menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
    1c04:	e1 51       	subi	r30, 0x11	; 17
    1c06:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[5][14] = '.';
    1c08:	80 83       	st	Z, r24
    1c0a:	32 96       	adiw	r30, 0x02	; 2
			outputS(menuScreen->screen2[5],3);
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8c 93       	st	X, r24
    1c10:	8e e2       	ldi	r24, 0x2E	; 46
    1c12:	80 83       	st	Z, r24
			break;
    1c14:	63 e0       	ldi	r22, 0x03	; 3

			case GlobalMenuInit:
			outputS(menuScreen->screen3[0], 0);
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	c6 01       	movw	r24, r12
    1c1a:	b8 d4       	rcall	.+2416   	; 0x258c <outputS>
    1c1c:	94 c0       	rjmp	.+296    	; 0x1d46 <updateScreen+0x5d2>
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[1], 1);
    1c22:	c8 01       	movw	r24, r16
    1c24:	89 5c       	subi	r24, 0xC9	; 201
    1c26:	9d 4f       	sbci	r25, 0xFD	; 253
    1c28:	b1 d4       	rcall	.+2402   	; 0x258c <outputS>
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1c30:	84 5b       	subi	r24, 0xB4	; 180
    1c32:	9d 4f       	sbci	r25, 0xFD	; 253
    1c34:	ab d4       	rcall	.+2390   	; 0x258c <outputS>
    1c36:	62 e0       	ldi	r22, 0x02	; 2
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1c3c:	8f 59       	subi	r24, 0x9F	; 159
    1c3e:	9d 4f       	sbci	r25, 0xFD	; 253
    1c40:	a5 d4       	rcall	.+2378   	; 0x258c <outputS>
    1c42:	63 e0       	ldi	r22, 0x03	; 3
    1c44:	70 e0       	ldi	r23, 0x00	; 0
    1c46:	c8 01       	movw	r24, r16
    1c48:	8a 58       	subi	r24, 0x8A	; 138
			currentGlobals->menuState = GlobalMenuArrow1;
    1c4a:	9d 4f       	sbci	r25, 0xFD	; 253
    1c4c:	9f d4       	rcall	.+2366   	; 0x258c <outputS>

			case GlobalMenuArrow1:
			menuScreen->screen3[1][19]= 8;
    1c4e:	81 e3       	ldi	r24, 0x31	; 49
    1c50:	8e 83       	std	Y+6, r24	; 0x06
    1c52:	88 e0       	ldi	r24, 0x08	; 8
    1c54:	f8 01       	movw	r30, r16
    1c56:	e1 5a       	subi	r30, 0xA1	; 161
			menuScreen->screen3[2][19] = ' ';
    1c58:	fd 4f       	sbci	r31, 0xFD	; 253
    1c5a:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    1c5c:	80 e2       	ldi	r24, 0x20	; 32
    1c5e:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen3[1], 1);
    1c60:	80 83       	st	Z, r24
    1c62:	75 96       	adiw	r30, 0x15	; 21
    1c64:	80 83       	st	Z, r24
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	70 e0       	ldi	r23, 0x00	; 0
    1c6a:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1c6c:	84 5b       	subi	r24, 0xB4	; 180
    1c6e:	9d 4f       	sbci	r25, 0xFD	; 253
    1c70:	8d d4       	rcall	.+2330   	; 0x258c <outputS>
    1c72:	62 e0       	ldi	r22, 0x02	; 2
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1c78:	8f 59       	subi	r24, 0x9F	; 159
    1c7a:	9d 4f       	sbci	r25, 0xFD	; 253
    1c7c:	87 d4       	rcall	.+2318   	; 0x258c <outputS>
    1c7e:	63 e0       	ldi	r22, 0x03	; 3
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	c8 01       	movw	r24, r16
    1c84:	8a 58       	subi	r24, 0x8A	; 138
			break;
    1c86:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow1Select:
			numPrinter(menuScreen->screen3[1],14,2,(currentGlobals->midiChannel)+1);
    1c88:	81 d4       	rcall	.+2306   	; 0x258c <outputS>
    1c8a:	5d c0       	rjmp	.+186    	; 0x1d46 <updateScreen+0x5d2>
    1c8c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	2f 5f       	subi	r18, 0xFF	; 255
    1c92:	3f 4f       	sbci	r19, 0xFF	; 255
    1c94:	42 e0       	ldi	r20, 0x02	; 2
    1c96:	6e e0       	ldi	r22, 0x0E	; 14
    1c98:	68 01       	movw	r12, r16
    1c9a:	94 eb       	ldi	r25, 0xB4	; 180
    1c9c:	c9 1a       	sub	r12, r25
    1c9e:	9d ef       	ldi	r25, 0xFD	; 253
			outputS(menuScreen->screen3[1],1);
    1ca0:	d9 0a       	sbc	r13, r25
    1ca2:	c6 01       	movw	r24, r12
    1ca4:	8b d4       	rcall	.+2326   	; 0x25bc <numPrinter>
    1ca6:	61 e0       	ldi	r22, 0x01	; 1
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
			break;
    1caa:	c6 01       	movw	r24, r12

			case GlobalMenuArrow2:
			menuScreen->screen3[1][19]= ' ';
    1cac:	6f d4       	rcall	.+2270   	; 0x258c <outputS>
    1cae:	4b c0       	rjmp	.+150    	; 0x1d46 <updateScreen+0x5d2>
    1cb0:	80 e2       	ldi	r24, 0x20	; 32
    1cb2:	f8 01       	movw	r30, r16
			menuScreen->screen3[2][19] = 8;
    1cb4:	e1 5a       	subi	r30, 0xA1	; 161
    1cb6:	fd 4f       	sbci	r31, 0xFD	; 253
    1cb8:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    1cba:	98 e0       	ldi	r25, 0x08	; 8
			outputS(menuScreen->screen3[1], 1);
    1cbc:	75 96       	adiw	r30, 0x15	; 21
    1cbe:	90 83       	st	Z, r25
    1cc0:	75 96       	adiw	r30, 0x15	; 21
    1cc2:	80 83       	st	Z, r24
    1cc4:	61 e0       	ldi	r22, 0x01	; 1
    1cc6:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[2], 2);
    1cc8:	c8 01       	movw	r24, r16
    1cca:	84 5b       	subi	r24, 0xB4	; 180
    1ccc:	9d 4f       	sbci	r25, 0xFD	; 253
    1cce:	5e d4       	rcall	.+2236   	; 0x258c <outputS>
    1cd0:	62 e0       	ldi	r22, 0x02	; 2
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1cd6:	8f 59       	subi	r24, 0x9F	; 159
    1cd8:	9d 4f       	sbci	r25, 0xFD	; 253
    1cda:	58 d4       	rcall	.+2224   	; 0x258c <outputS>
    1cdc:	63 e0       	ldi	r22, 0x03	; 3
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	c8 01       	movw	r24, r16
    1ce2:	8a 58       	subi	r24, 0x8A	; 138
			break;
    1ce4:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow2Select:
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1ce6:	52 d4       	rcall	.+2212   	; 0x258c <outputS>
    1ce8:	2e c0       	rjmp	.+92     	; 0x1d46 <updateScreen+0x5d2>
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	fa 01       	movw	r30, r20
    1cee:	e8 0f       	add	r30, r24
    1cf0:	f1 1d       	adc	r31, r1
    1cf2:	45 85       	ldd	r20, Z+13	; 0x0d
    1cf4:	6e e0       	ldi	r22, 0x0E	; 14
    1cf6:	68 01       	movw	r12, r16
    1cf8:	af e9       	ldi	r26, 0x9F	; 159
    1cfa:	ca 1a       	sub	r12, r26
    1cfc:	ad ef       	ldi	r26, 0xFD	; 253
    1cfe:	da 0a       	sbc	r13, r26
    1d00:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen3[2],2);
    1d02:	22 d6       	rcall	.+3140   	; 0x2948 <midiNotePrinter>
    1d04:	62 e0       	ldi	r22, 0x02	; 2
    1d06:	70 e0       	ldi	r23, 0x00	; 0
    1d08:	c6 01       	movw	r24, r12
    1d0a:	40 d4       	rcall	.+2176   	; 0x258c <outputS>
			break;
    1d0c:	1c c0       	rjmp	.+56     	; 0x1d46 <updateScreen+0x5d2>

			case GlobalMenuArrow3:
			menuScreen->screen3[1][19]= ' ';
    1d0e:	80 e2       	ldi	r24, 0x20	; 32
    1d10:	f8 01       	movw	r30, r16
    1d12:	e1 5a       	subi	r30, 0xA1	; 161
    1d14:	fd 4f       	sbci	r31, 0xFD	; 253
			menuScreen->screen3[2][19] = ' ';
    1d16:	80 83       	st	Z, r24
    1d18:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen3[3][19] = 8;
    1d1a:	80 83       	st	Z, r24
    1d1c:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen3[1], 1);
    1d1e:	75 96       	adiw	r30, 0x15	; 21
    1d20:	80 83       	st	Z, r24
    1d22:	61 e0       	ldi	r22, 0x01	; 1
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	c8 01       	movw	r24, r16
    1d28:	84 5b       	subi	r24, 0xB4	; 180
    1d2a:	9d 4f       	sbci	r25, 0xFD	; 253
			outputS(menuScreen->screen3[2], 2);
    1d2c:	2f d4       	rcall	.+2142   	; 0x258c <outputS>
    1d2e:	62 e0       	ldi	r22, 0x02	; 2
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	c8 01       	movw	r24, r16
    1d34:	8f 59       	subi	r24, 0x9F	; 159
    1d36:	9d 4f       	sbci	r25, 0xFD	; 253
    1d38:	29 d4       	rcall	.+2130   	; 0x258c <outputS>
			outputS(menuScreen->screen3[3], 3);
    1d3a:	63 e0       	ldi	r22, 0x03	; 3
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
    1d3e:	c8 01       	movw	r24, r16
    1d40:	8a 58       	subi	r24, 0x8A	; 138
    1d42:	9d 4f       	sbci	r25, 0xFD	; 253
    1d44:	23 d4       	rcall	.+2118   	; 0x258c <outputS>
    1d46:	8e 81       	ldd	r24, Y+6	; 0x06
			break;
		}
		prevMenuState = currentGlobals->menuState;
    1d48:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <prevMenuState>
    1d4c:	8a 85       	ldd	r24, Y+10	; 0x0a
	}
	//We should only reach this in track selection and global settings for setting midi notes. 
	if(currentGlobals->valueChangeFlag&(1<<triggerChange))
    1d4e:	81 ff       	sbrs	r24, 1
    1d50:	19 c1       	rjmp	.+562    	; 0x1f84 <updateScreen+0x810>
    1d52:	1a 86       	std	Y+10, r1	; 0x0a
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0<<triggerChange); //this is wrong. Will erase all of valueChange Flag. 
    1d54:	8e 81       	ldd	r24, Y+6	; 0x06
		switch((currentGlobals->menuState)>>4) //we don't need to worry about what the bottom encoder is doing.  
    1d56:	82 95       	swap	r24
    1d58:	8f 70       	andi	r24, 0x0F	; 15
    1d5a:	82 30       	cpi	r24, 0x02	; 2
    1d5c:	21 f0       	breq	.+8      	; 0x1d66 <updateScreen+0x5f2>
    1d5e:	83 30       	cpi	r24, 0x03	; 3
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <updateScreen+0x5f0>
    1d62:	f7 c0       	rjmp	.+494    	; 0x1f52 <updateScreen+0x7de>
    1d64:	0f c1       	rjmp	.+542    	; 0x1f84 <updateScreen+0x810>
    1d66:	2d 81       	ldd	r18, Y+5	; 0x05
		{
			case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	c7 01       	movw	r24, r14
    1d6c:	82 0f       	add	r24, r18
    1d6e:	93 1f       	adc	r25, r19
    1d70:	fc 01       	movw	r30, r24
    1d72:	e8 56       	subi	r30, 0x68	; 104
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	c0 80       	ld	r12, Z
    1d78:	d1 2c       	mov	r13, r1
    1d7a:	dc 2c       	mov	r13, r12
    1d7c:	cc 24       	eor	r12, r12
    1d7e:	70 96       	adiw	r30, 0x10	; 16
    1d80:	80 81       	ld	r24, Z
    1d82:	c8 2a       	or	r12, r24
    1d84:	2f 5f       	subi	r18, 0xFF	; 255
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack)+1);
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	42 e0       	ldi	r20, 0x02	; 2
    1d8a:	67 e0       	ldi	r22, 0x07	; 7
    1d8c:	58 01       	movw	r10, r16
    1d8e:	b1 e7       	ldi	r27, 0x71	; 113
    1d90:	ab 1a       	sub	r10, r27
    1d92:	be ef       	ldi	r27, 0xFE	; 254
    1d94:	bb 0a       	sbc	r11, r27
    1d96:	c5 01       	movw	r24, r10
    1d98:	11 d4       	rcall	.+2082   	; 0x25bc <numPrinter>
    1d9a:	96 01       	movw	r18, r12
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
    1d9c:	44 e0       	ldi	r20, 0x04	; 4
    1d9e:	6a e0       	ldi	r22, 0x0A	; 10
    1da0:	c5 01       	movw	r24, r10
    1da2:	0c d4       	rcall	.+2072   	; 0x25bc <numPrinter>
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
    1da6:	f7 01       	movw	r30, r14
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
					switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1da8:	e8 0f       	add	r30, r24
    1daa:	f1 1d       	adc	r31, r1
    1dac:	e8 57       	subi	r30, 0x78	; 120
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	80 81       	ld	r24, Z
    1db2:	88 23       	and	r24, r24
    1db4:	19 f0       	breq	.+6      	; 0x1dbc <updateScreen+0x648>
    1db6:	81 30       	cpi	r24, 0x01	; 1
    1db8:	79 f0       	breq	.+30     	; 0x1dd8 <updateScreen+0x664>
    1dba:	1c c0       	rjmp	.+56     	; 0x1df4 <updateScreen+0x680>
    1dbc:	83 e5       	ldi	r24, 0x53	; 83
    1dbe:	f8 01       	movw	r30, r16
					{
						case 0:
						menuScreen->screen2[2][10] = 'S';
    1dc0:	e2 55       	subi	r30, 0x52	; 82
    1dc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc4:	80 83       	st	Z, r24
    1dc6:	8f e6       	ldi	r24, 0x6F	; 111
    1dc8:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][11] = 'o';
    1dca:	80 83       	st	Z, r24
    1dcc:	9c e6       	ldi	r25, 0x6C	; 108
    1dce:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][12] = 'l';
    1dd0:	90 83       	st	Z, r25
    1dd2:	31 96       	adiw	r30, 0x01	; 1
    1dd4:	80 83       	st	Z, r24
						menuScreen->screen2[2][13] = 'o';
    1dd6:	0e c0       	rjmp	.+28     	; 0x1df4 <updateScreen+0x680>
    1dd8:	80 e5       	ldi	r24, 0x50	; 80
						break;
    1dda:	f8 01       	movw	r30, r16

						case 1:
						menuScreen->screen2[2][10] = 'P';
    1ddc:	e2 55       	subi	r30, 0x52	; 82
    1dde:	fe 4f       	sbci	r31, 0xFE	; 254
    1de0:	80 83       	st	Z, r24
    1de2:	8f e6       	ldi	r24, 0x6F	; 111
    1de4:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][11] = 'o';
    1de6:	80 83       	st	Z, r24
    1de8:	8c e6       	ldi	r24, 0x6C	; 108
    1dea:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][12] = 'l';
    1dec:	80 83       	st	Z, r24
    1dee:	89 e7       	ldi	r24, 0x79	; 121
    1df0:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][13] = 'y';
    1df2:	80 83       	st	Z, r24
    1df4:	8d 81       	ldd	r24, Y+5	; 0x05
    1df6:	f7 01       	movw	r30, r14

						case 3:
						break;
					}
					
			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack]+1));
    1df8:	e8 0f       	add	r30, r24
    1dfa:	f1 1d       	adc	r31, r1
    1dfc:	20 8d       	ldd	r18, Z+24	; 0x18
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	2f 5f       	subi	r18, 0xFF	; 255
    1e02:	3f 4f       	sbci	r19, 0xFF	; 255
    1e04:	42 e0       	ldi	r20, 0x02	; 2
    1e06:	6a e0       	ldi	r22, 0x0A	; 10
    1e08:	c8 01       	movw	r24, r16
    1e0a:	87 54       	subi	r24, 0x47	; 71
    1e0c:	9e 4f       	sbci	r25, 0xFE	; 254
    1e0e:	d6 d3       	rcall	.+1964   	; 0x25bc <numPrinter>
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	f7 01       	movw	r30, r14
    1e14:	e8 0f       	add	r30, r24
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1e16:	f1 1d       	adc	r31, r1
    1e18:	e5 51       	subi	r30, 0x15	; 21
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	a9 f0       	breq	.+42     	; 0x1e4c <updateScreen+0x6d8>
    1e22:	28 f0       	brcs	.+10     	; 0x1e2e <updateScreen+0x6ba>
    1e24:	82 30       	cpi	r24, 0x02	; 2
    1e26:	f9 f0       	breq	.+62     	; 0x1e66 <updateScreen+0x6f2>
    1e28:	83 30       	cpi	r24, 0x03	; 3
    1e2a:	51 f1       	breq	.+84     	; 0x1e80 <updateScreen+0x70c>
    1e2c:	37 c0       	rjmp	.+110    	; 0x1e9c <updateScreen+0x728>
    1e2e:	81 e4       	ldi	r24, 0x41	; 65
    1e30:	f8 01       	movw	r30, r16
    1e32:	e4 52       	subi	r30, 0x24	; 36
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1e34:	fe 4f       	sbci	r31, 0xFE	; 254
    1e36:	80 83       	st	Z, r24
    1e38:	8d e2       	ldi	r24, 0x2D	; 45
    1e3a:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1e3c:	80 83       	st	Z, r24
    1e3e:	82 e5       	ldi	r24, 0x52	; 82
    1e40:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1e42:	80 83       	st	Z, r24
    1e44:	80 e2       	ldi	r24, 0x20	; 32
    1e46:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1e48:	80 83       	st	Z, r24
    1e4a:	28 c0       	rjmp	.+80     	; 0x1e9c <updateScreen+0x728>
    1e4c:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1e4e:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1e50:	e4 52       	subi	r30, 0x24	; 36
    1e52:	fe 4f       	sbci	r31, 0xFE	; 254
    1e54:	80 83       	st	Z, r24
    1e56:	80 e2       	ldi	r24, 0x20	; 32
    1e58:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    1e5a:	80 83       	st	Z, r24
    1e5c:	31 96       	adiw	r30, 0x01	; 1
    1e5e:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1e60:	31 96       	adiw	r30, 0x01	; 1
    1e62:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1e64:	1b c0       	rjmp	.+54     	; 0x1e9c <updateScreen+0x728>
    1e66:	81 e4       	ldi	r24, 0x41	; 65
				break;
    1e68:	f8 01       	movw	r30, r16
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1e6a:	e4 52       	subi	r30, 0x24	; 36
    1e6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e6e:	80 83       	st	Z, r24
    1e70:	80 e2       	ldi	r24, 0x20	; 32
    1e72:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    1e74:	80 83       	st	Z, r24
    1e76:	31 96       	adiw	r30, 0x01	; 1
    1e78:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1e7a:	31 96       	adiw	r30, 0x01	; 1
    1e7c:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1e7e:	0e c0       	rjmp	.+28     	; 0x1e9c <updateScreen+0x728>
    1e80:	8e e4       	ldi	r24, 0x4E	; 78
				break;
    1e82:	f8 01       	movw	r30, r16
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1e84:	e4 52       	subi	r30, 0x24	; 36
    1e86:	fe 4f       	sbci	r31, 0xFE	; 254
    1e88:	80 83       	st	Z, r24
    1e8a:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][15] = 'o';
    1e8c:	31 96       	adiw	r30, 0x01	; 1
    1e8e:	80 83       	st	Z, r24
    1e90:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][16] = 'n';
    1e92:	31 96       	adiw	r30, 0x01	; 1
    1e94:	80 83       	st	Z, r24
    1e96:	85 e6       	ldi	r24, 0x65	; 101
				menuScreen->screen2[4][17] = 'e';
    1e98:	31 96       	adiw	r30, 0x01	; 1
    1e9a:	80 83       	st	Z, r24
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
				break;
			}
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1e9e:	f7 01       	movw	r30, r14
    1ea0:	e8 0f       	add	r30, r24
    1ea2:	f1 1d       	adc	r31, r1
    1ea4:	e5 53       	subi	r30, 0x35	; 53
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
		numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1ea8:	20 81       	ld	r18, Z
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	32 2f       	mov	r19, r18
    1eae:	22 27       	eor	r18, r18
				menuScreen->screen2[4][15] = 'o';
				menuScreen->screen2[4][16] = 'n';
				menuScreen->screen2[4][17] = 'e';
				break;
			}
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1eb0:	70 96       	adiw	r30, 0x10	; 16
		numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1eb2:	80 81       	ld	r24, Z
    1eb4:	28 2b       	or	r18, r24
    1eb6:	45 e0       	ldi	r20, 0x05	; 5
    1eb8:	6d e0       	ldi	r22, 0x0D	; 13
    1eba:	c8 01       	movw	r24, r16
    1ebc:	8d 51       	subi	r24, 0x1D	; 29
    1ebe:	9e 4f       	sbci	r25, 0xFE	; 254
    1ec0:	7d d3       	rcall	.+1786   	; 0x25bc <numPrinter>
		menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
    1ec2:	d8 01       	movw	r26, r16
    1ec4:	a0 51       	subi	r26, 0x10	; 16
    1ec6:	be 4f       	sbci	r27, 0xFE	; 254
    1ec8:	8c 91       	ld	r24, X
    1eca:	f8 01       	movw	r30, r16
    1ecc:	e1 51       	subi	r30, 0x11	; 17
    1ece:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed0:	80 83       	st	Z, r24
		menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
    1ed2:	32 96       	adiw	r30, 0x02	; 2
    1ed4:	80 81       	ld	r24, Z
    1ed6:	8c 93       	st	X, r24
		menuScreen->screen2[5][14] = '.';
    1ed8:	8e e2       	ldi	r24, 0x2E	; 46
    1eda:	80 83       	st	Z, r24
    1edc:	8e 81       	ldd	r24, Y+6	; 0x06
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
			//value 0xF7 should probably be a define. 
			if(((currentGlobals->menuState)&0xF7)>35) //this accounts for menu stats 36,37,44, and 45
    1ede:	87 7f       	andi	r24, 0xF7	; 247
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	24 32       	cpi	r18, 0x24	; 36
    1ee6:	31 05       	cpc	r19, r1
			{
				triggerChangeScreen = ((currentGlobals->menuState)&0xF7) - 34; //mask to get rid of encoder B pushed state. 
    1ee8:	14 f0       	brlt	.+4      	; 0x1eee <updateScreen+0x77a>
		menuScreen->screen2[5][14] = '.';
			//the track settings screens should now be populated
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
    1eea:	82 52       	subi	r24, 0x22	; 34
			if(((currentGlobals->menuState)&0xF7)>35) //this accounts for menu stats 36,37,44, and 45
			{
				triggerChangeScreen = ((currentGlobals->menuState)&0xF7) - 34; //mask to get rid of encoder B pushed state. 
			}
			
			outputS(menuScreen->screen2[triggerChangeScreen], 1); 
    1eec:	01 c0       	rjmp	.+2      	; 0x1ef0 <updateScreen+0x77c>
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	c8 2e       	mov	r12, r24
    1ef2:	d1 2c       	mov	r13, r1
    1ef4:	0f 2e       	mov	r0, r31
    1ef6:	f5 e1       	ldi	r31, 0x15	; 21
    1ef8:	bf 2e       	mov	r11, r31
    1efa:	f0 2d       	mov	r31, r0
    1efc:	bc 9c       	mul	r11, r12
    1efe:	c0 01       	movw	r24, r0
    1f00:	bd 9c       	mul	r11, r13
    1f02:	90 0d       	add	r25, r0
    1f04:	11 24       	eor	r1, r1
    1f06:	86 58       	subi	r24, 0x86	; 134
    1f08:	9e 4f       	sbci	r25, 0xFE	; 254
    1f0a:	61 e0       	ldi	r22, 0x01	; 1
    1f0c:	70 e0       	ldi	r23, 0x00	; 0
    1f0e:	80 0f       	add	r24, r16
			outputS(menuScreen->screen2[triggerChangeScreen+1], 2); 
    1f10:	91 1f       	adc	r25, r17
    1f12:	3c d3       	rcall	.+1656   	; 0x258c <outputS>
    1f14:	96 01       	movw	r18, r12
    1f16:	2f 5f       	subi	r18, 0xFF	; 255
    1f18:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1a:	b2 9e       	mul	r11, r18
    1f1c:	c0 01       	movw	r24, r0
    1f1e:	b3 9e       	mul	r11, r19
    1f20:	90 0d       	add	r25, r0
    1f22:	11 24       	eor	r1, r1
    1f24:	86 58       	subi	r24, 0x86	; 134
    1f26:	9e 4f       	sbci	r25, 0xFE	; 254
    1f28:	62 e0       	ldi	r22, 0x02	; 2
    1f2a:	70 e0       	ldi	r23, 0x00	; 0
    1f2c:	80 0f       	add	r24, r16
    1f2e:	91 1f       	adc	r25, r17
			outputS(menuScreen->screen2[triggerChangeScreen+2], 3);
    1f30:	2d d3       	rcall	.+1626   	; 0x258c <outputS>
    1f32:	f2 e0       	ldi	r31, 0x02	; 2
    1f34:	cf 0e       	add	r12, r31
    1f36:	d1 1c       	adc	r13, r1
    1f38:	bc 9c       	mul	r11, r12
    1f3a:	c0 01       	movw	r24, r0
    1f3c:	bd 9c       	mul	r11, r13
    1f3e:	90 0d       	add	r25, r0
    1f40:	11 24       	eor	r1, r1
    1f42:	86 58       	subi	r24, 0x86	; 134
    1f44:	9e 4f       	sbci	r25, 0xFE	; 254
    1f46:	63 e0       	ldi	r22, 0x03	; 3
    1f48:	70 e0       	ldi	r23, 0x00	; 0
    1f4a:	80 0f       	add	r24, r16
    1f4c:	91 1f       	adc	r25, r17
    1f4e:	1e d3       	rcall	.+1596   	; 0x258c <outputS>
			
			break;
    1f50:	19 c0       	rjmp	.+50     	; 0x1f84 <updateScreen+0x810>
			
			case 3:;
			//do we need this variable?
			numPrinter(menuScreen->screen3[2],10,2,(currentGlobals->currentTrack)+1);
    1f52:	2d 81       	ldd	r18, Y+5	; 0x05
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	2f 5f       	subi	r18, 0xFF	; 255
    1f58:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5a:	42 e0       	ldi	r20, 0x02	; 2
    1f5c:	6a e0       	ldi	r22, 0x0A	; 10
    1f5e:	68 01       	movw	r12, r16
    1f60:	8f e9       	ldi	r24, 0x9F	; 159
    1f62:	c8 1a       	sub	r12, r24
    1f64:	8d ef       	ldi	r24, 0xFD	; 253
    1f66:	d8 0a       	sbc	r13, r24
    1f68:	c6 01       	movw	r24, r12
    1f6a:	28 d3       	rcall	.+1616   	; 0x25bc <numPrinter>
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e8 0f       	add	r30, r24
    1f72:	f1 1d       	adc	r31, r1
    1f74:	45 85       	ldd	r20, Z+13	; 0x0d
    1f76:	6e e0       	ldi	r22, 0x0E	; 14
    1f78:	c6 01       	movw	r24, r12
    1f7a:	e6 d4       	rcall	.+2508   	; 0x2948 <midiNotePrinter>
    1f7c:	62 e0       	ldi	r22, 0x02	; 2
			outputS(menuScreen->screen3[2],2);
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	c6 01       	movw	r24, r12
    1f82:	04 d3       	rcall	.+1544   	; 0x258c <outputS>
    1f84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f86:	82 ff       	sbrs	r24, 2
			break;
			
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
    1f88:	65 c1       	rjmp	.+714    	; 0x2254 <__stack+0x55>
    1f8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f8c:	98 2f       	mov	r25, r24
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
    1f8e:	9f 70       	andi	r25, 0x0F	; 15
    1f90:	89 2e       	mov	r8, r25
    1f92:	99 85       	ldd	r25, Y+9	; 0x09
    1f94:	90 ff       	sbrs	r25, 0
		uint8_t positionSelectUpper = 0;
		if((currentGlobals->buttonSwitchFlag)&0x01)
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <updateScreen+0x828>
    1f98:	28 e0       	ldi	r18, 0x08	; 8
    1f9a:	01 c0       	rjmp	.+2      	; 0x1f9e <updateScreen+0x82a>
		{
			positionSelectUpper = 8;
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	82 95       	swap	r24
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
		uint8_t positionSelectUpper = 0;
    1fa0:	8f 70       	andi	r24, 0x0F	; 15
		{
			positionSelectUpper = 8;
		}
		

		switch((currentGlobals->knobStatus)>>4)
    1fa2:	82 30       	cpi	r24, 0x02	; 2
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <updateScreen+0x834>
    1fa6:	8e c0       	rjmp	.+284    	; 0x20c4 <updateScreen+0x950>
    1fa8:	30 f4       	brcc	.+12     	; 0x1fb6 <updateScreen+0x842>
    1faa:	88 23       	and	r24, r24
    1fac:	69 f0       	breq	.+26     	; 0x1fc8 <updateScreen+0x854>
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <updateScreen+0x840>
    1fb2:	52 c0       	rjmp	.+164    	; 0x2058 <updateScreen+0x8e4>
    1fb4:	4e c1       	rjmp	.+668    	; 0x2252 <__stack+0x53>
    1fb6:	84 30       	cpi	r24, 0x04	; 4
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <updateScreen+0x848>
    1fba:	f0 c0       	rjmp	.+480    	; 0x219c <updateScreen+0xa28>
    1fbc:	08 f4       	brcc	.+2      	; 0x1fc0 <updateScreen+0x84c>
    1fbe:	b8 c0       	rjmp	.+368    	; 0x2130 <updateScreen+0x9bc>
    1fc0:	85 30       	cpi	r24, 0x05	; 5
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <updateScreen+0x852>
    1fc4:	34 c1       	rjmp	.+616    	; 0x222e <__stack+0x2f>
    1fc6:	45 c1       	rjmp	.+650    	; 0x2252 <__stack+0x53>
    1fc8:	e8 2d       	mov	r30, r8
		{
			case 0: //output volume
			if((currentPattern->outputLevelMSB[positionSelect])==0)
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	d7 01       	movw	r26, r14
    1fce:	ae 0f       	add	r26, r30
    1fd0:	bf 1f       	adc	r27, r31
    1fd2:	8c 91       	ld	r24, X
    1fd4:	81 11       	cpse	r24, r1
    1fd6:	0a c0       	rjmp	.+20     	; 0x1fec <updateScreen+0x878>
    1fd8:	fd 01       	movw	r30, r26
			{ //value is positive
				numPrinter(menuScreen->knobScreen[0],14,3,currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
    1fda:	20 85       	ldd	r18, Z+8	; 0x08
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	43 e0       	ldi	r20, 0x03	; 3
    1fe0:	6e e0       	ldi	r22, 0x0E	; 14
    1fe2:	c8 01       	movw	r24, r16
    1fe4:	8c 50       	subi	r24, 0x0C	; 12
    1fe6:	9d 4f       	sbci	r25, 0xFD	; 253
    1fe8:	e9 d2       	rcall	.+1490   	; 0x25bc <numPrinter>
    1fea:	29 c0       	rjmp	.+82     	; 0x203e <updateScreen+0x8ca>
    1fec:	8d e2       	ldi	r24, 0x2D	; 45
    1fee:	d8 01       	movw	r26, r16
			}else
			{
				menuScreen->knobScreen[0][14] = '-';
    1ff0:	ae 5f       	subi	r26, 0xFE	; 254
    1ff2:	bc 4f       	sbci	r27, 0xFC	; 252
    1ff4:	8c 93       	st	X, r24
    1ff6:	68 01       	movw	r12, r16
				menuScreen->knobScreen[0][15] = ((((currentPattern->outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    1ff8:	a3 e0       	ldi	r26, 0x03	; 3
    1ffa:	ca 0e       	add	r12, r26
    1ffc:	da 1e       	adc	r13, r26
    1ffe:	ee 0d       	add	r30, r14
    2000:	ff 1d       	adc	r31, r15
    2002:	80 85       	ldd	r24, Z+8	; 0x08
    2004:	80 95       	com	r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	64 e6       	ldi	r22, 0x64	; 100
    200c:	70 e0       	ldi	r23, 0x00	; 0
    200e:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divmodhi4>
    2012:	2a e0       	ldi	r18, 0x0A	; 10
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	b9 01       	movw	r22, r18
    2018:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divmodhi4>
    201c:	60 5d       	subi	r22, 0xD0	; 208
    201e:	d6 01       	movw	r26, r12
    2020:	6c 93       	st	X, r22
				menuScreen->knobScreen[0][16] = (((currentPattern->outputLevelLSB[positionSelect]^255)+1)%10)+48;
    2022:	78 01       	movw	r14, r16
    2024:	bc ef       	ldi	r27, 0xFC	; 252
    2026:	eb 1a       	sub	r14, r27
    2028:	fb 0a       	sbc	r15, r27
    202a:	80 85       	ldd	r24, Z+8	; 0x08
    202c:	80 95       	com	r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	01 96       	adiw	r24, 0x01	; 1
    2032:	b9 01       	movw	r22, r18
    2034:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divmodhi4>
    2038:	80 5d       	subi	r24, 0xD0	; 208
    203a:	f7 01       	movw	r30, r14
			}
				
			menuScreen->knobScreen[0][10] = positionSelect + 49;
    203c:	80 83       	st	Z, r24
    203e:	f8 01       	movw	r30, r16
    2040:	e2 50       	subi	r30, 0x02	; 2
    2042:	fd 4f       	sbci	r31, 0xFD	; 253
    2044:	81 e3       	ldi	r24, 0x31	; 49
    2046:	88 0d       	add	r24, r8
			outputS(menuScreen->knobScreen[0], 3);
    2048:	80 83       	st	Z, r24
    204a:	63 e0       	ldi	r22, 0x03	; 3
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	c8 01       	movw	r24, r16
    2050:	8c 50       	subi	r24, 0x0C	; 12
    2052:	9d 4f       	sbci	r25, 0xFD	; 253
    2054:	9b d2       	rcall	.+1334   	; 0x258c <outputS>
			break;
    2056:	fd c0       	rjmp	.+506    	; 0x2252 <__stack+0x53>
				
			case 1: //pitch
			menuScreen->knobScreen[1][5] = positionSelect+49; 
    2058:	f8 01       	movw	r30, r16
    205a:	e2 5f       	subi	r30, 0xF2	; 242
    205c:	fc 4f       	sbci	r31, 0xFC	; 252
    205e:	81 e3       	ldi	r24, 0x31	; 49
    2060:	88 0d       	add	r24, r8
			if(currentPattern->outputPitch[positionSelect]>>7)
    2062:	80 83       	st	Z, r24
    2064:	91 2c       	mov	r9, r1
    2066:	f7 01       	movw	r30, r14
    2068:	e8 0d       	add	r30, r8
    206a:	f9 1d       	adc	r31, r9
    206c:	80 89       	ldd	r24, Z+16	; 0x10
    206e:	88 23       	and	r24, r24
			{
				menuScreen->knobScreen[1][7] = '-';
    2070:	94 f4       	brge	.+36     	; 0x2096 <updateScreen+0x922>
    2072:	8d e2       	ldi	r24, 0x2D	; 45
    2074:	f8 01       	movw	r30, r16
    2076:	e0 5f       	subi	r30, 0xF0	; 240
    2078:	fc 4f       	sbci	r31, 0xFC	; 252
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect])^255);
    207a:	80 83       	st	Z, r24
    207c:	f7 01       	movw	r30, r14
    207e:	e8 0d       	add	r30, r8
    2080:	f9 1d       	adc	r31, r9
    2082:	20 89       	ldd	r18, Z+16	; 0x10
    2084:	20 95       	com	r18
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	43 e0       	ldi	r20, 0x03	; 3
    208a:	68 e0       	ldi	r22, 0x08	; 8
    208c:	c8 01       	movw	r24, r16
    208e:	87 5f       	subi	r24, 0xF7	; 247
    2090:	9c 4f       	sbci	r25, 0xFC	; 252
			}else
			{
				menuScreen->knobScreen[1][7] = '+';
    2092:	94 d2       	rcall	.+1320   	; 0x25bc <numPrinter>
    2094:	10 c0       	rjmp	.+32     	; 0x20b6 <updateScreen+0x942>
    2096:	8b e2       	ldi	r24, 0x2B	; 43
    2098:	f8 01       	movw	r30, r16
    209a:	e0 5f       	subi	r30, 0xF0	; 240
				numPrinter(menuScreen->knobScreen[1],8,3,currentPattern->outputPitch[positionSelect]);
    209c:	fc 4f       	sbci	r31, 0xFC	; 252
    209e:	80 83       	st	Z, r24
    20a0:	f7 01       	movw	r30, r14
    20a2:	e8 0d       	add	r30, r8
    20a4:	f9 1d       	adc	r31, r9
    20a6:	20 89       	ldd	r18, Z+16	; 0x10
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	43 e0       	ldi	r20, 0x03	; 3
    20ac:	68 e0       	ldi	r22, 0x08	; 8
    20ae:	c8 01       	movw	r24, r16
    20b0:	87 5f       	subi	r24, 0xF7	; 247
    20b2:	9c 4f       	sbci	r25, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
    20b4:	83 d2       	rcall	.+1286   	; 0x25bc <numPrinter>
    20b6:	63 e0       	ldi	r22, 0x03	; 3
    20b8:	70 e0       	ldi	r23, 0x00	; 0
    20ba:	c8 01       	movw	r24, r16
    20bc:	87 5f       	subi	r24, 0xF7	; 247
    20be:	9c 4f       	sbci	r25, 0xFC	; 252
			break;
    20c0:	65 d2       	rcall	.+1226   	; 0x258c <outputS>
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    20c2:	c7 c0       	rjmp	.+398    	; 0x2252 <__stack+0x53>
    20c4:	91 2c       	mov	r9, r1
    20c6:	c2 2e       	mov	r12, r18
    20c8:	d1 2c       	mov	r13, r1
    20ca:	c4 01       	movw	r24, r8
    20cc:	8c 0d       	add	r24, r12
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    20ce:	9d 1d       	adc	r25, r13
    20d0:	58 01       	movw	r10, r16
    20d2:	f2 ee       	ldi	r31, 0xE2	; 226
    20d4:	af 1a       	sub	r10, r31
    20d6:	fc ef       	ldi	r31, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    20d8:	bf 0a       	sbc	r11, r31
    20da:	e8 0e       	add	r14, r24
    20dc:	f9 1e       	adc	r15, r25
    20de:	f7 01       	movw	r30, r14
    20e0:	e8 5b       	subi	r30, 0xB8	; 184
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	20 81       	ld	r18, Z
    20e6:	30 e0       	ldi	r19, 0x00	; 0
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    20e8:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    20ea:	22 27       	eor	r18, r18
    20ec:	70 96       	adiw	r30, 0x10	; 16
    20ee:	80 81       	ld	r24, Z
    20f0:	28 2b       	or	r18, r24
    20f2:	45 e0       	ldi	r20, 0x05	; 5
    20f4:	6e e0       	ldi	r22, 0x0E	; 14
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
    20f6:	c5 01       	movw	r24, r10
    20f8:	61 d2       	rcall	.+1218   	; 0x25bc <numPrinter>
    20fa:	f8 01       	movw	r30, r16
    20fc:	e5 5d       	subi	r30, 0xD5	; 213
    20fe:	fc 4f       	sbci	r31, 0xFC	; 252
    2100:	d8 01       	movw	r26, r16
    2102:	a4 5d       	subi	r26, 0xD4	; 212
    2104:	bc 4f       	sbci	r27, 0xFC	; 252
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
    2106:	8c 91       	ld	r24, X
    2108:	80 83       	st	Z, r24
    210a:	32 96       	adiw	r30, 0x02	; 2
			menuScreen->knobScreen[2][15] = '.';	
    210c:	80 81       	ld	r24, Z
    210e:	8c 93       	st	X, r24
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
    2110:	8e e2       	ldi	r24, 0x2E	; 46
    2112:	80 83       	st	Z, r24
    2114:	94 01       	movw	r18, r8
    2116:	2f 5f       	subi	r18, 0xFF	; 255
    2118:	3f 4f       	sbci	r19, 0xFF	; 255
    211a:	2c 0d       	add	r18, r12
    211c:	3d 1d       	adc	r19, r13
    211e:	42 e0       	ldi	r20, 0x02	; 2
    2120:	6a e0       	ldi	r22, 0x0A	; 10
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
    2122:	c5 01       	movw	r24, r10
    2124:	4b d2       	rcall	.+1174   	; 0x25bc <numPrinter>
    2126:	63 e0       	ldi	r22, 0x03	; 3
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	c5 01       	movw	r24, r10
			break;
    212c:	2f d2       	rcall	.+1118   	; 0x258c <outputS>
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    212e:	91 c0       	rjmp	.+290    	; 0x2252 <__stack+0x53>
    2130:	91 2c       	mov	r9, r1
    2132:	c2 2e       	mov	r12, r18
    2134:	d1 2c       	mov	r13, r1
    2136:	c4 01       	movw	r24, r8
    2138:	8c 0d       	add	r24, r12
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    213a:	9d 1d       	adc	r25, r13
    213c:	58 01       	movw	r10, r16
    213e:	2d ec       	ldi	r18, 0xCD	; 205
    2140:	a2 1a       	sub	r10, r18
    2142:	2c ef       	ldi	r18, 0xFC	; 252
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
			break;
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    2144:	b2 0a       	sbc	r11, r18
    2146:	e8 0e       	add	r14, r24
    2148:	f9 1e       	adc	r15, r25
    214a:	f7 01       	movw	r30, r14
    214c:	e8 59       	subi	r30, 0x98	; 152
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	20 81       	ld	r18, Z
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
			break;
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    2156:	22 27       	eor	r18, r18
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    2158:	70 96       	adiw	r30, 0x10	; 16
    215a:	80 81       	ld	r24, Z
    215c:	28 2b       	or	r18, r24
    215e:	45 e0       	ldi	r20, 0x05	; 5
    2160:	6f e0       	ldi	r22, 0x0F	; 15
    2162:	c5 01       	movw	r24, r10
    2164:	2b d2       	rcall	.+1110   	; 0x25bc <numPrinter>
			menuScreen->knobScreen[3][14] = menuScreen->knobScreen[3][15];
    2166:	f8 01       	movw	r30, r16
    2168:	ef 5b       	subi	r30, 0xBF	; 191
    216a:	fc 4f       	sbci	r31, 0xFC	; 252
    216c:	d8 01       	movw	r26, r16
    216e:	ae 5b       	subi	r26, 0xBE	; 190
    2170:	bc 4f       	sbci	r27, 0xFC	; 252
    2172:	8c 91       	ld	r24, X
			menuScreen->knobScreen[3][15] = menuScreen->knobScreen[3][16];
    2174:	80 83       	st	Z, r24
    2176:	32 96       	adiw	r30, 0x02	; 2
    2178:	80 81       	ld	r24, Z
			menuScreen->knobScreen[3][16] = '.';
    217a:	8c 93       	st	X, r24
			numPrinter(menuScreen->knobScreen[3],11,2,(positionSelect+1+positionSelectUpper));
    217c:	8e e2       	ldi	r24, 0x2E	; 46
    217e:	80 83       	st	Z, r24
    2180:	94 01       	movw	r18, r8
    2182:	2f 5f       	subi	r18, 0xFF	; 255
    2184:	3f 4f       	sbci	r19, 0xFF	; 255
    2186:	2c 0d       	add	r18, r12
    2188:	3d 1d       	adc	r19, r13
    218a:	42 e0       	ldi	r20, 0x02	; 2
    218c:	6b e0       	ldi	r22, 0x0B	; 11
    218e:	c5 01       	movw	r24, r10
			outputS(menuScreen->knobScreen[3], 3);
    2190:	15 d2       	rcall	.+1066   	; 0x25bc <numPrinter>
    2192:	63 e0       	ldi	r22, 0x03	; 3
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	c5 01       	movw	r24, r10
			break;
    2198:	f9 d1       	rcall	.+1010   	; 0x258c <outputS>
				
			case 4: //track volume
			if(currentPattern->trackMainVolumeMSB[(positionSelect+positionSelectUpper)]==0)
    219a:	5b c0       	rjmp	.+182    	; 0x2252 <__stack+0x53>
    219c:	c2 2e       	mov	r12, r18
    219e:	d1 2c       	mov	r13, r1
    21a0:	c8 0c       	add	r12, r8
    21a2:	d1 1c       	adc	r13, r1
    21a4:	f7 01       	movw	r30, r14
    21a6:	ec 0d       	add	r30, r12
    21a8:	fd 1d       	adc	r31, r13
    21aa:	80 a5       	ldd	r24, Z+40	; 0x28
			{
				numPrinter(menuScreen->knobScreen[4],15, 2, currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]);
    21ac:	81 11       	cpse	r24, r1
    21ae:	0c c0       	rjmp	.+24     	; 0x21c8 <updateScreen+0xa54>
    21b0:	f7 01       	movw	r30, r14
    21b2:	ec 0d       	add	r30, r12
    21b4:	fd 1d       	adc	r31, r13
    21b6:	20 ad       	ldd	r18, Z+56	; 0x38
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	42 e0       	ldi	r20, 0x02	; 2
    21bc:	6f e0       	ldi	r22, 0x0F	; 15
    21be:	c8 01       	movw	r24, r16
    21c0:	88 5b       	subi	r24, 0xB8	; 184
    21c2:	9c 4f       	sbci	r25, 0xFC	; 252
    21c4:	fb d1       	rcall	.+1014   	; 0x25bc <numPrinter>
			}else
			{
				menuScreen->knobScreen[4][15] = '-';
    21c6:	25 c0       	rjmp	.+74     	; 0x2212 <__stack+0x13>
    21c8:	8d e2       	ldi	r24, 0x2D	; 45
    21ca:	f8 01       	movw	r30, r16
    21cc:	e9 5a       	subi	r30, 0xA9	; 169
    21ce:	fc 4f       	sbci	r31, 0xFC	; 252
				menuScreen->knobScreen[4][16] = ((((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    21d0:	80 83       	st	Z, r24
    21d2:	31 96       	adiw	r30, 0x01	; 1
    21d4:	ec 0c       	add	r14, r12
    21d6:	fd 1c       	adc	r15, r13
    21d8:	d7 01       	movw	r26, r14
    21da:	d8 96       	adiw	r26, 0x38	; 56
    21dc:	8c 91       	ld	r24, X
    21de:	80 95       	com	r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	64 e6       	ldi	r22, 0x64	; 100
    21e6:	70 e0       	ldi	r23, 0x00	; 0
    21e8:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divmodhi4>
    21ec:	2a e0       	ldi	r18, 0x0A	; 10
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	b9 01       	movw	r22, r18
    21f2:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divmodhi4>
    21f6:	60 5d       	subi	r22, 0xD0	; 208
				menuScreen->knobScreen[4][17] = (((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%10)+48;
    21f8:	60 83       	st	Z, r22
    21fa:	31 96       	adiw	r30, 0x01	; 1
    21fc:	d7 01       	movw	r26, r14
    21fe:	d8 96       	adiw	r26, 0x38	; 56
    2200:	8c 91       	ld	r24, X
    2202:	80 95       	com	r24
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	01 96       	adiw	r24, 0x01	; 1
    2208:	b9 01       	movw	r22, r18
    220a:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divmodhi4>
    220e:	80 5d       	subi	r24, 0xD0	; 208
			}
				 numPrinter(menuScreen->knobScreen[4],12,2,(positionSelect+positionSelectUpper+1));
    2210:	80 83       	st	Z, r24
    2212:	08 5b       	subi	r16, 0xB8	; 184
    2214:	1c 4f       	sbci	r17, 0xFC	; 252
    2216:	96 01       	movw	r18, r12
    2218:	2f 5f       	subi	r18, 0xFF	; 255
    221a:	3f 4f       	sbci	r19, 0xFF	; 255
    221c:	42 e0       	ldi	r20, 0x02	; 2
    221e:	6c e0       	ldi	r22, 0x0C	; 12
    2220:	c8 01       	movw	r24, r16
    2222:	cc d1       	rcall	.+920    	; 0x25bc <numPrinter>
				 outputS(menuScreen->knobScreen[4], 3);
    2224:	63 e0       	ldi	r22, 0x03	; 3
    2226:	70 e0       	ldi	r23, 0x00	; 0
    2228:	c8 01       	movw	r24, r16
    222a:	b0 d1       	rcall	.+864    	; 0x258c <outputS>
    222c:	12 c0       	rjmp	.+36     	; 0x2252 <__stack+0x53>
			break;
    222e:	06 5d       	subi	r16, 0xD6	; 214
			
			case 5:
			numPrinter(menuScreen->screen0[2],5,3,currentPattern->patternBPM);
    2230:	1f 4f       	sbci	r17, 0xFF	; 255
    2232:	f7 01       	movw	r30, r14
    2234:	e8 53       	subi	r30, 0x38	; 56
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	20 81       	ld	r18, Z
    223a:	31 81       	ldd	r19, Z+1	; 0x01
    223c:	43 e0       	ldi	r20, 0x03	; 3
    223e:	65 e0       	ldi	r22, 0x05	; 5
    2240:	c8 01       	movw	r24, r16
    2242:	bc d1       	rcall	.+888    	; 0x25bc <numPrinter>
    2244:	8e 81       	ldd	r24, Y+6	; 0x06
    2246:	81 11       	cpse	r24, r1
			if(currentGlobals->menuState==PreformanceModeInit)
    2248:	04 c0       	rjmp	.+8      	; 0x2252 <__stack+0x53>
    224a:	62 e0       	ldi	r22, 0x02	; 2
    224c:	70 e0       	ldi	r23, 0x00	; 0
			{
				outputS(menuScreen->screen0[2],2);
    224e:	c8 01       	movw	r24, r16
    2250:	9d d1       	rcall	.+826    	; 0x258c <outputS>
    2252:	1a 86       	std	Y+10, r1	; 0x0a
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
			}
			break;
		}
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<knobChange));			
    2258:	1f 91       	pop	r17
	}
    225a:	0f 91       	pop	r16
    225c:	ff 90       	pop	r15
    225e:	ef 90       	pop	r14
    2260:	df 90       	pop	r13
    2262:	cf 90       	pop	r12
    2264:	bf 90       	pop	r11
    2266:	af 90       	pop	r10
    2268:	9f 90       	pop	r9
    226a:	8f 90       	pop	r8
    226c:	08 95       	ret

0000226e <__vector_54>:
    226e:	1f 92       	push	r1
    2270:	0f 92       	push	r0
    2272:	0f b6       	in	r0, 0x3f	; 63
}

void midiTransmit(uint8_t data)
{
  while (!(UCSR3A & (1 << UDRE3)));
  UDR3 = data;
    2274:	0f 92       	push	r0
    2276:	11 24       	eor	r1, r1
    2278:	0b b6       	in	r0, 0x3b	; 59
    227a:	0f 92       	push	r0
    227c:	2f 93       	push	r18
    227e:	3f 93       	push	r19
    2280:	5f 93       	push	r21
    2282:	6f 93       	push	r22
    2284:	7f 93       	push	r23
    2286:	8f 93       	push	r24
    2288:	9f 93       	push	r25
    228a:	af 93       	push	r26
    228c:	bf 93       	push	r27
    228e:	ef 93       	push	r30
    2290:	ff 93       	push	r31
    2292:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2296:	82 2f       	mov	r24, r18
    2298:	82 95       	swap	r24
    229a:	8f 70       	andi	r24, 0x0F	; 15
    229c:	88 50       	subi	r24, 0x08	; 8
    229e:	82 30       	cpi	r24, 0x02	; 2
    22a0:	78 f4       	brcc	.+30     	; 0x22c0 <__vector_54+0x52>
    22a2:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <midiWriteIndex>
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	fc 01       	movw	r30, r24
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	8e 0f       	add	r24, r30
    22b0:	9f 1f       	adc	r25, r31
    22b2:	fc 01       	movw	r30, r24
    22b4:	e6 5f       	subi	r30, 0xF6	; 246
    22b6:	f9 4f       	sbci	r31, 0xF9	; 249
    22b8:	20 83       	st	Z, r18
    22ba:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    22be:	50 c0       	rjmp	.+160    	; 0x2360 <__vector_54+0xf2>
    22c0:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    22c4:	81 11       	cpse	r24, r1
    22c6:	15 c0       	rjmp	.+42     	; 0x22f2 <__vector_54+0x84>
    22c8:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <midiWriteIndex>
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    22d2:	fc 01       	movw	r30, r24
    22d4:	ee 0f       	add	r30, r30
    22d6:	ff 1f       	adc	r31, r31
    22d8:	e8 0f       	add	r30, r24
    22da:	f9 1f       	adc	r31, r25
    22dc:	e6 5f       	subi	r30, 0xF6	; 246
    22de:	f9 4f       	sbci	r31, 0xF9	; 249
    22e0:	e3 0f       	add	r30, r19
    22e2:	f1 1d       	adc	r31, r1
    22e4:	21 83       	std	Z+1, r18	; 0x01
    22e6:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    22ea:	8f 5f       	subi	r24, 0xFF	; 255
    22ec:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <midiWriteFlag>
    22f0:	37 c0       	rjmp	.+110    	; 0x2360 <__vector_54+0xf2>
    22f2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    22f6:	8f 3f       	cpi	r24, 0xFF	; 255
    22f8:	99 f1       	breq	.+102    	; 0x2360 <__vector_54+0xf2>
    22fa:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <midiWriteIndex>
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    2304:	fc 01       	movw	r30, r24
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	e8 0f       	add	r30, r24
    230c:	f9 1f       	adc	r31, r25
    230e:	e6 5f       	subi	r30, 0xF6	; 246
    2310:	f9 4f       	sbci	r31, 0xF9	; 249
    2312:	e3 0f       	add	r30, r19
    2314:	f1 1d       	adc	r31, r1
    2316:	21 83       	std	Z+1, r18	; 0x01
    2318:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <midiWriteIndex>
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	fc 01       	movw	r30, r24
    2320:	ee 0f       	add	r30, r30
    2322:	ff 1f       	adc	r31, r31
    2324:	8e 0f       	add	r24, r30
    2326:	9f 1f       	adc	r25, r31
    2328:	fc 01       	movw	r30, r24
    232a:	e6 5f       	subi	r30, 0xF6	; 246
    232c:	f9 4f       	sbci	r31, 0xF9	; 249
    232e:	20 81       	ld	r18, Z
    2330:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <midiWriteIndex>
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	01 96       	adiw	r24, 0x01	; 1
    2338:	6a e0       	ldi	r22, 0x0A	; 10
    233a:	70 e0       	ldi	r23, 0x00	; 0
    233c:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divmodhi4>
    2340:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <midiWriteIndex>
    2344:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <midiWriteIndex>
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	fc 01       	movw	r30, r24
    234c:	ee 0f       	add	r30, r30
    234e:	ff 1f       	adc	r31, r31
    2350:	8e 0f       	add	r24, r30
    2352:	9f 1f       	adc	r25, r31
    2354:	fc 01       	movw	r30, r24
    2356:	e6 5f       	subi	r30, 0xF6	; 246
    2358:	f9 4f       	sbci	r31, 0xF9	; 249
    235a:	20 83       	st	Z, r18
    235c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    2360:	ff 91       	pop	r31
    2362:	ef 91       	pop	r30
    2364:	bf 91       	pop	r27
    2366:	af 91       	pop	r26
    2368:	9f 91       	pop	r25
    236a:	8f 91       	pop	r24
    236c:	7f 91       	pop	r23
    236e:	6f 91       	pop	r22
    2370:	5f 91       	pop	r21
    2372:	3f 91       	pop	r19
    2374:	2f 91       	pop	r18
    2376:	0f 90       	pop	r0
    2378:	0b be       	out	0x3b, r0	; 59
    237a:	0f 90       	pop	r0
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	0f 90       	pop	r0
    2380:	1f 90       	pop	r1
    2382:	18 95       	reti

00002384 <initMidi>:
    2384:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    2388:	8f e1       	ldi	r24, 0x1F	; 31
    238a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    238e:	e1 e3       	ldi	r30, 0x31	; 49
    2390:	f1 e0       	ldi	r31, 0x01	; 1
    2392:	80 81       	ld	r24, Z
    2394:	88 69       	ori	r24, 0x98	; 152
    2396:	80 83       	st	Z, r24
    2398:	e2 e3       	ldi	r30, 0x32	; 50
    239a:	f1 e0       	ldi	r31, 0x01	; 1
    239c:	80 81       	ld	r24, Z
    239e:	86 60       	ori	r24, 0x06	; 6
    23a0:	80 83       	st	Z, r24
    23a2:	08 95       	ret

000023a4 <midiRead>:
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
    23a4:	af 92       	push	r10
    23a6:	bf 92       	push	r11
    23a8:	cf 92       	push	r12
    23aa:	df 92       	push	r13
    23ac:	ef 92       	push	r14
    23ae:	ff 92       	push	r15
    23b0:	0f 93       	push	r16
    23b2:	1f 93       	push	r17
    23b4:	cf 93       	push	r28
    23b6:	df 93       	push	r29
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
  while (midiReadIndex != midiWriteIndex)
    23bc:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <midiReadIndex>
    23c0:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <midiWriteIndex>
    23c4:	e8 17       	cp	r30, r24
    23c6:	09 f4       	brne	.+2      	; 0x23ca <midiRead+0x26>
    23c8:	5c c0       	rjmp	.+184    	; 0x2482 <midiRead+0xde>
    23ca:	7e 01       	movw	r14, r28
    23cc:	86 ea       	ldi	r24, 0xA6	; 166
    23ce:	e8 0e       	add	r14, r24
    23d0:	f1 1c       	adc	r15, r1
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    23d2:	0a e0       	ldi	r16, 0x0A	; 10
    23d4:	10 e0       	ldi	r17, 0x00	; 0

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
  {
    uint8_t midiMessageType = ((midiEventBuffer[midiReadIndex].statusByte)>>4);
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	cf 01       	movw	r24, r30
    23da:	88 0f       	add	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	e8 0f       	add	r30, r24
    23e0:	f9 1f       	adc	r31, r25
    23e2:	e6 5f       	subi	r30, 0xF6	; 246
    23e4:	f9 4f       	sbci	r31, 0xF9	; 249
    23e6:	80 81       	ld	r24, Z
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    23e8:	22 81       	ldd	r18, Z+2	; 0x02
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    23ea:	90 81       	ld	r25, Z
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    23ec:	82 95       	swap	r24
    23ee:	8f 70       	andi	r24, 0x0F	; 15
    23f0:	89 30       	cpi	r24, 0x09	; 9
    23f2:	c9 f5       	brne	.+114    	; 0x2466 <midiRead+0xc2>
    23f4:	22 23       	and	r18, r18
    23f6:	b9 f1       	breq	.+110    	; 0x2466 <midiRead+0xc2>
    23f8:	9f 70       	andi	r25, 0x0F	; 15
    23fa:	cb 56       	subi	r28, 0x6B	; 107
    23fc:	de 4f       	sbci	r29, 0xFE	; 254
    23fe:	88 81       	ld	r24, Y
    2400:	c5 59       	subi	r28, 0x95	; 149
    2402:	d1 40       	sbci	r29, 0x01	; 1
    2404:	98 13       	cpse	r25, r24
    2406:	2f c0       	rjmp	.+94     	; 0x2466 <midiRead+0xc2>
    2408:	0f 2e       	mov	r0, r31
    240a:	f9 e8       	ldi	r31, 0x89	; 137
    240c:	af 2e       	mov	r10, r31
    240e:	bb 24       	eor	r11, r11
    2410:	b3 94       	inc	r11
    2412:	f0 2d       	mov	r31, r0
    2414:	ac 0e       	add	r10, r28
    2416:	bd 1e       	adc	r11, r29
    2418:	ed e0       	ldi	r30, 0x0D	; 13
    241a:	ae 0e       	add	r10, r30
    241c:	b1 1c       	adc	r11, r1
    241e:	6e 01       	movw	r12, r28
    2420:	f6 e9       	ldi	r31, 0x96	; 150
    2422:	cf 0e       	add	r12, r31
    2424:	d1 1c       	adc	r13, r1
    {
        for (int i=0; i<16; i++)
        {
          if(midiEventBuffer[midiReadIndex].dataByte[0]==currentGlobals.midiTrackNote[i])
    2426:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <midiReadIndex>
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	fc 01       	movw	r30, r24
    242e:	ee 0f       	add	r30, r30
    2430:	ff 1f       	adc	r31, r31
    2432:	8e 0f       	add	r24, r30
    2434:	9f 1f       	adc	r25, r31
    2436:	fc 01       	movw	r30, r24
    2438:	e6 5f       	subi	r30, 0xF6	; 246
    243a:	f9 4f       	sbci	r31, 0xF9	; 249
    243c:	91 81       	ldd	r25, Z+1	; 0x01
    243e:	f5 01       	movw	r30, r10
    2440:	81 91       	ld	r24, Z+
    2442:	5f 01       	movw	r10, r30
    2444:	98 13       	cpse	r25, r24
    2446:	09 c0       	rjmp	.+18     	; 0x245a <midiRead+0xb6>
          { //we don't care about velocity, at least not yet.
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
    2448:	f6 01       	movw	r30, r12
    244a:	20 81       	ld	r18, Z
    244c:	e0 57       	subi	r30, 0x70	; 112
    244e:	f1 09       	sbc	r31, r1
    2450:	40 81       	ld	r20, Z
    2452:	f6 01       	movw	r30, r12
    2454:	60 89       	ldd	r22, Z+16	; 0x10
    2456:	80 a1       	ldd	r24, Z+32	; 0x20
    2458:	d3 d3       	rcall	.+1958   	; 0x2c00 <trackControl>
    245a:	ff ef       	ldi	r31, 0xFF	; 255
    245c:	cf 1a       	sub	r12, r31
    245e:	df 0a       	sbc	r13, r31
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    {
        for (int i=0; i<16; i++)
    2460:	ce 14       	cp	r12, r14
    2462:	df 04       	cpc	r13, r15
    2464:	01 f7       	brne	.-64     	; 0x2426 <midiRead+0x82>
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    2466:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <midiReadIndex>
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	01 96       	adiw	r24, 0x01	; 1
    246e:	b8 01       	movw	r22, r16
    2470:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divmodhi4>
    2474:	e8 2f       	mov	r30, r24
    2476:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <midiReadIndex>
  UDR3 = data;
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
    247a:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <midiWriteIndex>
    247e:	8e 13       	cpse	r24, r30
    2480:	aa cf       	rjmp	.-172    	; 0x23d6 <midiRead+0x32>
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
  }
}
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	1f 91       	pop	r17
    2488:	0f 91       	pop	r16
    248a:	ff 90       	pop	r15
    248c:	ef 90       	pop	r14
    248e:	df 90       	pop	r13
    2490:	cf 90       	pop	r12
    2492:	bf 90       	pop	r11
    2494:	af 90       	pop	r10
    2496:	08 95       	ret

00002498 <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    2498:	e2 e0       	ldi	r30, 0x02	; 2
    249a:	f1 e0       	ldi	r31, 0x01	; 1
    249c:	80 81       	ld	r24, Z
    249e:	80 62       	ori	r24, 0x20	; 32
    24a0:	80 83       	st	Z, r24
    24a2:	85 e0       	ldi	r24, 0x05	; 5
    24a4:	8a 95       	dec	r24
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <enableCycle+0xc>
    24a8:	00 00       	nop
    24aa:	80 81       	ld	r24, Z
    24ac:	8f 7d       	andi	r24, 0xDF	; 223
    24ae:	80 83       	st	Z, r24
    24b0:	08 95       	ret

000024b2 <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
    24b2:	e2 e0       	ldi	r30, 0x02	; 2
    24b4:	f1 e0       	ldi	r31, 0x01	; 1
    24b6:	90 81       	ld	r25, Z
    24b8:	9f 7b       	andi	r25, 0xBF	; 191
    24ba:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    24bc:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
    24be:	ec cf       	rjmp	.-40     	; 0x2498 <enableCycle>
    24c0:	08 95       	ret

000024c2 <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
    24c2:	e2 e0       	ldi	r30, 0x02	; 2
    24c4:	f1 e0       	ldi	r31, 0x01	; 1
    24c6:	90 81       	ld	r25, Z
    24c8:	90 64       	ori	r25, 0x40	; 64
    24ca:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    24cc:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
    24ce:	e4 cf       	rjmp	.-56     	; 0x2498 <enableCycle>
    24d0:	08 95       	ret

000024d2 <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRH = 0x60; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
    24d2:	80 e6       	ldi	r24, 0x60	; 96
    24d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	DDRC =0xFF; //all pins on the LCD Data Bus.
    24d8:	8f ef       	ldi	r24, 0xFF	; 255
    24da:	87 b9       	out	0x07, r24	; 7


	PORTH &= 0B10011111;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
    24dc:	e2 e0       	ldi	r30, 0x02	; 2
    24de:	f1 e0       	ldi	r31, 0x01	; 1
    24e0:	80 81       	ld	r24, Z
    24e2:	8f 79       	andi	r24, 0x9F	; 159
    24e4:	80 83       	st	Z, r24

	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
    24e6:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24e8:	8f e1       	ldi	r24, 0x1F	; 31
    24ea:	93 e0       	ldi	r25, 0x03	; 3
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	f1 f7       	brne	.-4      	; 0x24ec <initScreen+0x1a>
    24f0:	00 c0       	rjmp	.+0      	; 0x24f2 <initScreen+0x20>
    24f2:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose


	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    24f4:	8a e2       	ldi	r24, 0x2A	; 42
    24f6:	dd df       	rcall	.-70     	; 0x24b2 <command>
	command(0x71);        // Function selection A:
    24f8:	81 e7       	ldi	r24, 0x71	; 113
    24fa:	db df       	rcall	.-74     	; 0x24b2 <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
    24fc:	8c e5       	ldi	r24, 0x5C	; 92
    24fe:	e1 df       	rcall	.-62     	; 0x24c2 <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    2500:	88 e2       	ldi	r24, 0x28	; 40
    2502:	d7 df       	rcall	.-82     	; 0x24b2 <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
    2504:	88 e0       	ldi	r24, 0x08	; 8
    2506:	d5 df       	rcall	.-86     	; 0x24b2 <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    2508:	8a e2       	ldi	r24, 0x2A	; 42
    250a:	d3 df       	rcall	.-90     	; 0x24b2 <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    250c:	89 e7       	ldi	r24, 0x79	; 121
    250e:	d1 df       	rcall	.-94     	; 0x24b2 <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
    2510:	85 ed       	ldi	r24, 0xD5	; 213
    2512:	cf df       	rcall	.-98     	; 0x24b2 <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
    2514:	80 e7       	ldi	r24, 0x70	; 112
    2516:	cd df       	rcall	.-102    	; 0x24b2 <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    2518:	88 e7       	ldi	r24, 0x78	; 120
    251a:	cb df       	rcall	.-106    	; 0x24b2 <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
    251c:	89 e0       	ldi	r24, 0x09	; 9
    251e:	c9 df       	rcall	.-110    	; 0x24b2 <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
    2520:	86 e0       	ldi	r24, 0x06	; 6
    2522:	c7 df       	rcall	.-114    	; 0x24b2 <command>
	command(0x72);        // Function selection B:
    2524:	82 e7       	ldi	r24, 0x72	; 114
    2526:	c5 df       	rcall	.-118    	; 0x24b2 <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
    2528:	8a e0       	ldi	r24, 0x0A	; 10
    252a:	cb df       	rcall	.-106    	; 0x24c2 <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    252c:	89 e7       	ldi	r24, 0x79	; 121
    252e:	c1 df       	rcall	.-126    	; 0x24b2 <command>
	command(0xDA);        // Set SEG pins hardware configuration:
    2530:	8a ed       	ldi	r24, 0xDA	; 218
    2532:	bf df       	rcall	.-130    	; 0x24b2 <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
    2534:	80 e1       	ldi	r24, 0x10	; 16
    2536:	bd df       	rcall	.-134    	; 0x24b2 <command>
	command(0xDC);        // Function selection C:
    2538:	8c ed       	ldi	r24, 0xDC	; 220
    253a:	bb df       	rcall	.-138    	; 0x24b2 <command>
	command(0x00);        //  internal VSL, GPIO input disable
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	b9 df       	rcall	.-142    	; 0x24b2 <command>
	command(0x81);        // Set contrast control:
    2540:	81 e8       	ldi	r24, 0x81	; 129
    2542:	b7 df       	rcall	.-146    	; 0x24b2 <command>
    2544:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
    2546:	b5 df       	rcall	.-150    	; 0x24b2 <command>
    2548:	89 ed       	ldi	r24, 0xD9	; 217
    254a:	b3 df       	rcall	.-154    	; 0x24b2 <command>
	command(0xD9);        // Set phase length:
    254c:	81 ef       	ldi	r24, 0xF1	; 241
    254e:	b1 df       	rcall	.-158    	; 0x24b2 <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
    2550:	8b ed       	ldi	r24, 0xDB	; 219
    2552:	af df       	rcall	.-162    	; 0x24b2 <command>
    2554:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
    2556:	ad df       	rcall	.-166    	; 0x24b2 <command>
    2558:	88 e7       	ldi	r24, 0x78	; 120
    255a:	ab df       	rcall	.-170    	; 0x24b2 <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
    255c:	88 e2       	ldi	r24, 0x28	; 40
    255e:	a9 df       	rcall	.-174    	; 0x24b2 <command>
    2560:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    2562:	a7 df       	rcall	.-178    	; 0x24b2 <command>
    2564:	8f e3       	ldi	r24, 0x3F	; 63
    2566:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <initScreen+0x96>
    256c:	00 c0       	rjmp	.+0      	; 0x256e <initScreen+0x9c>
	command(0x01);        // Clear display
    256e:	00 00       	nop
    2570:	80 e8       	ldi	r24, 0x80	; 128
    2572:	9f df       	rcall	.-194    	; 0x24b2 <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2574:	8c e0       	ldi	r24, 0x0C	; 12
    2576:	9d df       	rcall	.-198    	; 0x24b2 <command>
    2578:	9f ef       	ldi	r25, 0xFF	; 255
    257a:	24 e3       	ldi	r18, 0x34	; 52
    257c:	8c e0       	ldi	r24, 0x0C	; 12
    257e:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required

	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
    2580:	20 40       	sbci	r18, 0x00	; 0
    2582:	80 40       	sbci	r24, 0x00	; 0
    2584:	e1 f7       	brne	.-8      	; 0x257e <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
    2586:	00 c0       	rjmp	.+0      	; 0x2588 <initScreen+0xb6>
    2588:	00 00       	nop
    258a:	08 95       	ret

0000258c <outputS>:
    258c:	0f 93       	push	r16
    258e:	1f 93       	push	r17
    2590:	cf 93       	push	r28
    2592:	df 93       	push	r29
    2594:	8c 01       	movw	r16, r24
    2596:	fb 01       	movw	r30, r22
    2598:	ff 27       	eor	r31, r31
    259a:	e8 5f       	subi	r30, 0xF8	; 248
    259c:	fd 4f       	sbci	r31, 0xFD	; 253
    259e:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
    25a0:	88 df       	rcall	.-240    	; 0x24b2 <command>
    25a2:	e8 01       	movw	r28, r16
    25a4:	0c 5e       	subi	r16, 0xEC	; 236
    25a6:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
    25a8:	89 91       	ld	r24, Y+
    25aa:	8b df       	rcall	.-234    	; 0x24c2 <data>
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
    25ac:	c0 17       	cp	r28, r16
    25ae:	d1 07       	cpc	r29, r17
    25b0:	d9 f7       	brne	.-10     	; 0x25a8 <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	1f 91       	pop	r17
    25b8:	0f 91       	pop	r16
    25ba:	08 95       	ret

000025bc <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch(numCharacters)
    25c2:	43 30       	cpi	r20, 0x03	; 3
    25c4:	09 f4       	brne	.+2      	; 0x25c8 <numPrinter+0xc>
    25c6:	54 c0       	rjmp	.+168    	; 0x2670 <numPrinter+0xb4>
    25c8:	28 f4       	brcc	.+10     	; 0x25d4 <numPrinter+0x18>
    25ca:	41 30       	cpi	r20, 0x01	; 1
    25cc:	51 f0       	breq	.+20     	; 0x25e2 <numPrinter+0x26>
    25ce:	42 30       	cpi	r20, 0x02	; 2
    25d0:	29 f1       	breq	.+74     	; 0x261c <numPrinter+0x60>
    25d2:	b7 c1       	rjmp	.+878    	; 0x2942 <numPrinter+0x386>
    25d4:	44 30       	cpi	r20, 0x04	; 4
    25d6:	09 f4       	brne	.+2      	; 0x25da <numPrinter+0x1e>
    25d8:	95 c0       	rjmp	.+298    	; 0x2704 <numPrinter+0x148>
    25da:	45 30       	cpi	r20, 0x05	; 5
    25dc:	09 f4       	brne	.+2      	; 0x25e0 <numPrinter+0x24>
    25de:	0a c1       	rjmp	.+532    	; 0x27f4 <numPrinter+0x238>
    25e0:	b0 c1       	rjmp	.+864    	; 0x2942 <numPrinter+0x386>
		case 0:
		break;

		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
    25e2:	ec 01       	movw	r28, r24
    25e4:	c6 0f       	add	r28, r22
    25e6:	d1 1d       	adc	r29, r1
    25e8:	ad ec       	ldi	r26, 0xCD	; 205
    25ea:	bc ec       	ldi	r27, 0xCC	; 204
    25ec:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    25f0:	96 95       	lsr	r25
    25f2:	87 95       	ror	r24
    25f4:	96 95       	lsr	r25
    25f6:	87 95       	ror	r24
    25f8:	96 95       	lsr	r25
    25fa:	87 95       	ror	r24
    25fc:	9c 01       	movw	r18, r24
    25fe:	22 0f       	add	r18, r18
    2600:	33 1f       	adc	r19, r19
    2602:	88 0f       	add	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	88 0f       	add	r24, r24
    2608:	99 1f       	adc	r25, r25
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	82 0f       	add	r24, r18
    2610:	93 1f       	adc	r25, r19
    2612:	e8 1b       	sub	r30, r24
    2614:	f9 0b       	sbc	r31, r25
    2616:	e0 5d       	subi	r30, 0xD0	; 208
    2618:	e8 83       	st	Y, r30
		break;
    261a:	93 c1       	rjmp	.+806    	; 0x2942 <numPrinter+0x386>

		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
    261c:	ec 01       	movw	r28, r24
    261e:	c6 0f       	add	r28, r22
    2620:	d1 1d       	adc	r29, r1
    2622:	ad ec       	ldi	r26, 0xCD	; 205
    2624:	bc ec       	ldi	r27, 0xCC	; 204
    2626:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    262a:	96 95       	lsr	r25
    262c:	87 95       	ror	r24
    262e:	96 95       	lsr	r25
    2630:	87 95       	ror	r24
    2632:	96 95       	lsr	r25
    2634:	87 95       	ror	r24
    2636:	9c 01       	movw	r18, r24
    2638:	22 0f       	add	r18, r18
    263a:	33 1f       	adc	r19, r19
    263c:	88 0f       	add	r24, r24
    263e:	99 1f       	adc	r25, r25
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	82 0f       	add	r24, r18
    264a:	93 1f       	adc	r25, r19
    264c:	9f 01       	movw	r18, r30
    264e:	28 1b       	sub	r18, r24
    2650:	39 0b       	sbc	r19, r25
    2652:	c9 01       	movw	r24, r18
    2654:	80 5d       	subi	r24, 0xD0	; 208
    2656:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
    2658:	9f 01       	movw	r18, r30
    265a:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    265e:	96 95       	lsr	r25
    2660:	87 95       	ror	r24
    2662:	96 95       	lsr	r25
    2664:	87 95       	ror	r24
    2666:	96 95       	lsr	r25
    2668:	87 95       	ror	r24
    266a:	80 5d       	subi	r24, 0xD0	; 208
    266c:	88 83       	st	Y, r24
		break;
    266e:	69 c1       	rjmp	.+722    	; 0x2942 <numPrinter+0x386>

		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
    2670:	ec 01       	movw	r28, r24
    2672:	c6 0f       	add	r28, r22
    2674:	d1 1d       	adc	r29, r1
    2676:	ad ec       	ldi	r26, 0xCD	; 205
    2678:	bc ec       	ldi	r27, 0xCC	; 204
    267a:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    267e:	96 95       	lsr	r25
    2680:	87 95       	ror	r24
    2682:	96 95       	lsr	r25
    2684:	87 95       	ror	r24
    2686:	96 95       	lsr	r25
    2688:	87 95       	ror	r24
    268a:	9c 01       	movw	r18, r24
    268c:	22 0f       	add	r18, r18
    268e:	33 1f       	adc	r19, r19
    2690:	88 0f       	add	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	82 0f       	add	r24, r18
    269e:	93 1f       	adc	r25, r19
    26a0:	9f 01       	movw	r18, r30
    26a2:	28 1b       	sub	r18, r24
    26a4:	39 0b       	sbc	r19, r25
    26a6:	c9 01       	movw	r24, r18
    26a8:	80 5d       	subi	r24, 0xD0	; 208
    26aa:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = tensPlace;
    26ac:	af 01       	movw	r20, r30
    26ae:	56 95       	lsr	r21
    26b0:	47 95       	ror	r20
    26b2:	56 95       	lsr	r21
    26b4:	47 95       	ror	r20
    26b6:	9a 01       	movw	r18, r20
    26b8:	ab e7       	ldi	r26, 0x7B	; 123
    26ba:	b4 e1       	ldi	r27, 0x14	; 20
    26bc:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    26c0:	96 95       	lsr	r25
    26c2:	87 95       	ror	r24
    26c4:	64 e6       	ldi	r22, 0x64	; 100
    26c6:	68 9f       	mul	r22, r24
    26c8:	90 01       	movw	r18, r0
    26ca:	69 9f       	mul	r22, r25
    26cc:	30 0d       	add	r19, r0
    26ce:	11 24       	eor	r1, r1
    26d0:	cf 01       	movw	r24, r30
    26d2:	82 1b       	sub	r24, r18
    26d4:	93 0b       	sbc	r25, r19
    26d6:	9c 01       	movw	r18, r24
    26d8:	ad ec       	ldi	r26, 0xCD	; 205
    26da:	bc ec       	ldi	r27, 0xCC	; 204
    26dc:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    26e0:	96 95       	lsr	r25
    26e2:	87 95       	ror	r24
    26e4:	96 95       	lsr	r25
    26e6:	87 95       	ror	r24
    26e8:	96 95       	lsr	r25
    26ea:	87 95       	ror	r24
    26ec:	80 5d       	subi	r24, 0xD0	; 208
    26ee:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
    26f0:	9a 01       	movw	r18, r20
    26f2:	ab e7       	ldi	r26, 0x7B	; 123
    26f4:	b4 e1       	ldi	r27, 0x14	; 20
    26f6:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    26fa:	96 95       	lsr	r25
    26fc:	87 95       	ror	r24
    26fe:	80 5d       	subi	r24, 0xD0	; 208
    2700:	88 83       	st	Y, r24
		break;
    2702:	1f c1       	rjmp	.+574    	; 0x2942 <numPrinter+0x386>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
    2704:	ec 01       	movw	r28, r24
    2706:	c6 0f       	add	r28, r22
    2708:	d1 1d       	adc	r29, r1
    270a:	ad ec       	ldi	r26, 0xCD	; 205
    270c:	bc ec       	ldi	r27, 0xCC	; 204
    270e:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    2712:	96 95       	lsr	r25
    2714:	87 95       	ror	r24
    2716:	96 95       	lsr	r25
    2718:	87 95       	ror	r24
    271a:	96 95       	lsr	r25
    271c:	87 95       	ror	r24
    271e:	9c 01       	movw	r18, r24
    2720:	22 0f       	add	r18, r18
    2722:	33 1f       	adc	r19, r19
    2724:	88 0f       	add	r24, r24
    2726:	99 1f       	adc	r25, r25
    2728:	88 0f       	add	r24, r24
    272a:	99 1f       	adc	r25, r25
    272c:	88 0f       	add	r24, r24
    272e:	99 1f       	adc	r25, r25
    2730:	82 0f       	add	r24, r18
    2732:	93 1f       	adc	r25, r19
    2734:	9f 01       	movw	r18, r30
    2736:	28 1b       	sub	r18, r24
    2738:	39 0b       	sbc	r19, r25
    273a:	c9 01       	movw	r24, r18
    273c:	80 5d       	subi	r24, 0xD0	; 208
    273e:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
    2740:	9f 01       	movw	r18, r30
    2742:	36 95       	lsr	r19
    2744:	27 95       	ror	r18
    2746:	36 95       	lsr	r19
    2748:	27 95       	ror	r18
    274a:	ab e7       	ldi	r26, 0x7B	; 123
    274c:	b4 e1       	ldi	r27, 0x14	; 20
    274e:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    2752:	96 95       	lsr	r25
    2754:	87 95       	ror	r24
    2756:	44 e6       	ldi	r20, 0x64	; 100
    2758:	48 9f       	mul	r20, r24
    275a:	90 01       	movw	r18, r0
    275c:	49 9f       	mul	r20, r25
    275e:	30 0d       	add	r19, r0
    2760:	11 24       	eor	r1, r1
    2762:	cf 01       	movw	r24, r30
    2764:	82 1b       	sub	r24, r18
    2766:	93 0b       	sbc	r25, r19
    2768:	9c 01       	movw	r18, r24
    276a:	ad ec       	ldi	r26, 0xCD	; 205
    276c:	bc ec       	ldi	r27, 0xCC	; 204
    276e:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    2772:	96 95       	lsr	r25
    2774:	87 95       	ror	r24
    2776:	96 95       	lsr	r25
    2778:	87 95       	ror	r24
    277a:	96 95       	lsr	r25
    277c:	87 95       	ror	r24
    277e:	80 5d       	subi	r24, 0xD0	; 208
    2780:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = hunderedsPlace;
    2782:	af 01       	movw	r20, r30
    2784:	56 95       	lsr	r21
    2786:	47 95       	ror	r20
    2788:	56 95       	lsr	r21
    278a:	47 95       	ror	r20
    278c:	56 95       	lsr	r21
    278e:	47 95       	ror	r20
    2790:	9a 01       	movw	r18, r20
    2792:	a5 ec       	ldi	r26, 0xC5	; 197
    2794:	b0 e2       	ldi	r27, 0x20	; 32
    2796:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    279a:	92 95       	swap	r25
    279c:	82 95       	swap	r24
    279e:	8f 70       	andi	r24, 0x0F	; 15
    27a0:	89 27       	eor	r24, r25
    27a2:	9f 70       	andi	r25, 0x0F	; 15
    27a4:	89 27       	eor	r24, r25
    27a6:	68 ee       	ldi	r22, 0xE8	; 232
    27a8:	73 e0       	ldi	r23, 0x03	; 3
    27aa:	86 9f       	mul	r24, r22
    27ac:	90 01       	movw	r18, r0
    27ae:	87 9f       	mul	r24, r23
    27b0:	30 0d       	add	r19, r0
    27b2:	96 9f       	mul	r25, r22
    27b4:	30 0d       	add	r19, r0
    27b6:	11 24       	eor	r1, r1
    27b8:	cf 01       	movw	r24, r30
    27ba:	82 1b       	sub	r24, r18
    27bc:	93 0b       	sbc	r25, r19
    27be:	9c 01       	movw	r18, r24
    27c0:	36 95       	lsr	r19
    27c2:	27 95       	ror	r18
    27c4:	36 95       	lsr	r19
    27c6:	27 95       	ror	r18
    27c8:	ab e7       	ldi	r26, 0x7B	; 123
    27ca:	b4 e1       	ldi	r27, 0x14	; 20
    27cc:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    27d0:	96 95       	lsr	r25
    27d2:	87 95       	ror	r24
    27d4:	80 5d       	subi	r24, 0xD0	; 208
    27d6:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
    27d8:	9a 01       	movw	r18, r20
    27da:	a5 ec       	ldi	r26, 0xC5	; 197
    27dc:	b0 e2       	ldi	r27, 0x20	; 32
    27de:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    27e2:	92 95       	swap	r25
    27e4:	82 95       	swap	r24
    27e6:	8f 70       	andi	r24, 0x0F	; 15
    27e8:	89 27       	eor	r24, r25
    27ea:	9f 70       	andi	r25, 0x0F	; 15
    27ec:	89 27       	eor	r24, r25
    27ee:	80 5d       	subi	r24, 0xD0	; 208
    27f0:	88 83       	st	Y, r24
		break;
    27f2:	a7 c0       	rjmp	.+334    	; 0x2942 <numPrinter+0x386>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
    27f4:	ec 01       	movw	r28, r24
    27f6:	c6 0f       	add	r28, r22
    27f8:	d1 1d       	adc	r29, r1
    27fa:	ad ec       	ldi	r26, 0xCD	; 205
    27fc:	bc ec       	ldi	r27, 0xCC	; 204
    27fe:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    2802:	96 95       	lsr	r25
    2804:	87 95       	ror	r24
    2806:	96 95       	lsr	r25
    2808:	87 95       	ror	r24
    280a:	96 95       	lsr	r25
    280c:	87 95       	ror	r24
    280e:	9c 01       	movw	r18, r24
    2810:	22 0f       	add	r18, r18
    2812:	33 1f       	adc	r19, r19
    2814:	88 0f       	add	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	88 0f       	add	r24, r24
    281a:	99 1f       	adc	r25, r25
    281c:	88 0f       	add	r24, r24
    281e:	99 1f       	adc	r25, r25
    2820:	82 0f       	add	r24, r18
    2822:	93 1f       	adc	r25, r19
    2824:	9f 01       	movw	r18, r30
    2826:	28 1b       	sub	r18, r24
    2828:	39 0b       	sbc	r19, r25
    282a:	c9 01       	movw	r24, r18
    282c:	80 5d       	subi	r24, 0xD0	; 208
    282e:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
    2830:	9f 01       	movw	r18, r30
    2832:	36 95       	lsr	r19
    2834:	27 95       	ror	r18
    2836:	36 95       	lsr	r19
    2838:	27 95       	ror	r18
    283a:	ab e7       	ldi	r26, 0x7B	; 123
    283c:	b4 e1       	ldi	r27, 0x14	; 20
    283e:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    2842:	96 95       	lsr	r25
    2844:	87 95       	ror	r24
    2846:	44 e6       	ldi	r20, 0x64	; 100
    2848:	48 9f       	mul	r20, r24
    284a:	90 01       	movw	r18, r0
    284c:	49 9f       	mul	r20, r25
    284e:	30 0d       	add	r19, r0
    2850:	11 24       	eor	r1, r1
    2852:	cf 01       	movw	r24, r30
    2854:	82 1b       	sub	r24, r18
    2856:	93 0b       	sbc	r25, r19
    2858:	9c 01       	movw	r18, r24
    285a:	ad ec       	ldi	r26, 0xCD	; 205
    285c:	bc ec       	ldi	r27, 0xCC	; 204
    285e:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    2862:	96 95       	lsr	r25
    2864:	87 95       	ror	r24
    2866:	96 95       	lsr	r25
    2868:	87 95       	ror	r24
    286a:	96 95       	lsr	r25
    286c:	87 95       	ror	r24
    286e:	80 5d       	subi	r24, 0xD0	; 208
    2870:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
    2872:	9f 01       	movw	r18, r30
    2874:	36 95       	lsr	r19
    2876:	27 95       	ror	r18
    2878:	36 95       	lsr	r19
    287a:	27 95       	ror	r18
    287c:	36 95       	lsr	r19
    287e:	27 95       	ror	r18
    2880:	a5 ec       	ldi	r26, 0xC5	; 197
    2882:	b0 e2       	ldi	r27, 0x20	; 32
    2884:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    2888:	92 95       	swap	r25
    288a:	82 95       	swap	r24
    288c:	8f 70       	andi	r24, 0x0F	; 15
    288e:	89 27       	eor	r24, r25
    2890:	9f 70       	andi	r25, 0x0F	; 15
    2892:	89 27       	eor	r24, r25
    2894:	48 ee       	ldi	r20, 0xE8	; 232
    2896:	53 e0       	ldi	r21, 0x03	; 3
    2898:	84 9f       	mul	r24, r20
    289a:	90 01       	movw	r18, r0
    289c:	85 9f       	mul	r24, r21
    289e:	30 0d       	add	r19, r0
    28a0:	94 9f       	mul	r25, r20
    28a2:	30 0d       	add	r19, r0
    28a4:	11 24       	eor	r1, r1
    28a6:	cf 01       	movw	r24, r30
    28a8:	82 1b       	sub	r24, r18
    28aa:	93 0b       	sbc	r25, r19
    28ac:	9c 01       	movw	r18, r24
    28ae:	36 95       	lsr	r19
    28b0:	27 95       	ror	r18
    28b2:	36 95       	lsr	r19
    28b4:	27 95       	ror	r18
    28b6:	ab e7       	ldi	r26, 0x7B	; 123
    28b8:	b4 e1       	ldi	r27, 0x14	; 20
    28ba:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    28be:	96 95       	lsr	r25
    28c0:	87 95       	ror	r24
    28c2:	80 5d       	subi	r24, 0xD0	; 208
    28c4:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
    28c6:	af 01       	movw	r20, r30
    28c8:	52 95       	swap	r21
    28ca:	42 95       	swap	r20
    28cc:	4f 70       	andi	r20, 0x0F	; 15
    28ce:	45 27       	eor	r20, r21
    28d0:	5f 70       	andi	r21, 0x0F	; 15
    28d2:	45 27       	eor	r20, r21
    28d4:	9a 01       	movw	r18, r20
    28d6:	a7 e4       	ldi	r26, 0x47	; 71
    28d8:	b3 e0       	ldi	r27, 0x03	; 3
    28da:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    28de:	96 95       	lsr	r25
    28e0:	87 95       	ror	r24
    28e2:	96 95       	lsr	r25
    28e4:	87 95       	ror	r24
    28e6:	96 95       	lsr	r25
    28e8:	87 95       	ror	r24
    28ea:	60 e1       	ldi	r22, 0x10	; 16
    28ec:	77 e2       	ldi	r23, 0x27	; 39
    28ee:	86 9f       	mul	r24, r22
    28f0:	90 01       	movw	r18, r0
    28f2:	87 9f       	mul	r24, r23
    28f4:	30 0d       	add	r19, r0
    28f6:	96 9f       	mul	r25, r22
    28f8:	30 0d       	add	r19, r0
    28fa:	11 24       	eor	r1, r1
    28fc:	cf 01       	movw	r24, r30
    28fe:	82 1b       	sub	r24, r18
    2900:	93 0b       	sbc	r25, r19
    2902:	9c 01       	movw	r18, r24
    2904:	36 95       	lsr	r19
    2906:	27 95       	ror	r18
    2908:	36 95       	lsr	r19
    290a:	27 95       	ror	r18
    290c:	36 95       	lsr	r19
    290e:	27 95       	ror	r18
    2910:	a5 ec       	ldi	r26, 0xC5	; 197
    2912:	b0 e2       	ldi	r27, 0x20	; 32
    2914:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    2918:	92 95       	swap	r25
    291a:	82 95       	swap	r24
    291c:	8f 70       	andi	r24, 0x0F	; 15
    291e:	89 27       	eor	r24, r25
    2920:	9f 70       	andi	r25, 0x0F	; 15
    2922:	89 27       	eor	r24, r25
    2924:	80 5d       	subi	r24, 0xD0	; 208
    2926:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
    2928:	9a 01       	movw	r18, r20
    292a:	a7 e4       	ldi	r26, 0x47	; 71
    292c:	b3 e0       	ldi	r27, 0x03	; 3
    292e:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__umulhisi3>
    2932:	96 95       	lsr	r25
    2934:	87 95       	ror	r24
    2936:	96 95       	lsr	r25
    2938:	87 95       	ror	r24
    293a:	96 95       	lsr	r25
    293c:	87 95       	ror	r24
    293e:	80 5d       	subi	r24, 0xD0	; 208
    2940:	88 83       	st	Y, r24
		break;

	}


}
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	08 95       	ret

00002948 <midiNotePrinter>:

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
    2948:	9c 01       	movw	r18, r24
    294a:	a6 2f       	mov	r26, r22
	char printSharp = 0;
	uint8_t valueSwitch = 0;
	//numbers will always go from B to C, and have 12 distinct values. 
	//we can get our number from this with division. 
	//midi note C0 starts at 12. So, we'll need to do some math there. 
	printNumber = (noteNumber/12)+47; 
    294c:	eb ea       	ldi	r30, 0xAB	; 171
    294e:	4e 9f       	mul	r20, r30
    2950:	e1 2d       	mov	r30, r1
    2952:	11 24       	eor	r1, r1
    2954:	e6 95       	lsr	r30
    2956:	e6 95       	lsr	r30
    2958:	e6 95       	lsr	r30
    295a:	9f e2       	ldi	r25, 0x2F	; 47
    295c:	9e 0f       	add	r25, r30
	
	//theres a weird wrap around with note numbers here. Since there isn't really an easy math patern we can take advantage of. 
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
    295e:	8e 2f       	mov	r24, r30
    2960:	88 0f       	add	r24, r24
    2962:	e8 0f       	add	r30, r24
    2964:	ee 0f       	add	r30, r30
    2966:	ee 0f       	add	r30, r30
    2968:	4e 1b       	sub	r20, r30
    296a:	50 e0       	ldi	r21, 0x00	; 0
    296c:	4c 30       	cpi	r20, 0x0C	; 12
    296e:	51 05       	cpc	r21, r1
    2970:	58 f5       	brcc	.+86     	; 0x29c8 <midiNotePrinter+0x80>
    2972:	fa 01       	movw	r30, r20
    2974:	88 27       	eor	r24, r24
    2976:	e8 51       	subi	r30, 0x18	; 24
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	8f 4f       	sbci	r24, 0xFF	; 255
    297c:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__tablejump2__>
	{
		
		case 0:
		printLetter = 'C';
		printSharp = ' ';
    2980:	80 e2       	ldi	r24, 0x20	; 32
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
	{
		
		case 0:
		printLetter = 'C';
    2982:	43 e4       	ldi	r20, 0x43	; 67
    2984:	23 c0       	rjmp	.+70     	; 0x29cc <midiNotePrinter+0x84>
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
		printSharp = '#';
    2986:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'C';
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
    2988:	43 e4       	ldi	r20, 0x43	; 67
		printSharp = '#';
		break;
    298a:	20 c0       	rjmp	.+64     	; 0x29cc <midiNotePrinter+0x84>
		
		case 2:
		printLetter = 'D';
		printSharp = ' ';
    298c:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'C';
		printSharp = '#';
		break;
		
		case 2:
		printLetter = 'D';
    298e:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = ' ';
		break;
    2990:	1d c0       	rjmp	.+58     	; 0x29cc <midiNotePrinter+0x84>
		
		case 3:
		printLetter = 'D';
		printSharp = '#';
    2992:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'D';
		printSharp = ' ';
		break;
		
		case 3:
		printLetter = 'D';
    2994:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = '#';
		break;
    2996:	1a c0       	rjmp	.+52     	; 0x29cc <midiNotePrinter+0x84>
		
		case 4:
		printLetter = 'E';
		printSharp = ' ';
    2998:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'D';
		printSharp = '#';
		break;
		
		case 4:
		printLetter = 'E';
    299a:	45 e4       	ldi	r20, 0x45	; 69
		printSharp = ' ';
		break;
    299c:	17 c0       	rjmp	.+46     	; 0x29cc <midiNotePrinter+0x84>
		
		case 5:
		printLetter = 'F';
		printSharp = ' ';
    299e:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'E';
		printSharp = ' ';
		break;
		
		case 5:
		printLetter = 'F';
    29a0:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = ' ';
		break;
    29a2:	14 c0       	rjmp	.+40     	; 0x29cc <midiNotePrinter+0x84>
		
		case 6:
		printLetter = 'F';
		printSharp = '#';
    29a4:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'F';
		printSharp = ' ';
		break;
		
		case 6:
		printLetter = 'F';
    29a6:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = '#';
		break;
    29a8:	11 c0       	rjmp	.+34     	; 0x29cc <midiNotePrinter+0x84>
		
		case 7:
		printLetter = 'G';
		printSharp = ' ';
    29aa:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'F';
		printSharp = '#';
		break;
		
		case 7:
		printLetter = 'G';
    29ac:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = ' ';
		break;
    29ae:	0e c0       	rjmp	.+28     	; 0x29cc <midiNotePrinter+0x84>
		
		case 8:
		printLetter = 'G';
		printSharp = '#';
    29b0:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'G';
		printSharp = ' ';
		break;
		
		case 8:
		printLetter = 'G';
    29b2:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = '#';
		break;
    29b4:	0b c0       	rjmp	.+22     	; 0x29cc <midiNotePrinter+0x84>
		
		case 9:
		printLetter = 'A';
		printSharp = ' ';
    29b6:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'G';
		printSharp = '#';
		break;
		
		case 9:
		printLetter = 'A';
    29b8:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = ' ';
		break;
    29ba:	08 c0       	rjmp	.+16     	; 0x29cc <midiNotePrinter+0x84>
		
		case 10:
		printLetter = 'A';
		printSharp = '#';
    29bc:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'A';
		printSharp = ' ';
		break;
		
		case 10:
		printLetter = 'A';
    29be:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = '#';
		break;
    29c0:	05 c0       	rjmp	.+10     	; 0x29cc <midiNotePrinter+0x84>
		
		case 11:
		printLetter = 'B';
		printSharp = ' ';
    29c2:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'A';
		printSharp = '#';
		break;
		
		case 11:
		printLetter = 'B';
    29c4:	42 e4       	ldi	r20, 0x42	; 66
		printSharp = ' ';
		break;
    29c6:	02 c0       	rjmp	.+4      	; 0x29cc <midiNotePrinter+0x84>
void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
	char printNumber = 0;
	char printSharp = 0;
    29c8:	80 e0       	ldi	r24, 0x00	; 0
}

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
    29ca:	40 e0       	ldi	r20, 0x00	; 0
		printLetter = 'B';
		printSharp = ' ';
		break;
		
	}
	charArray[startingPosition] = printLetter;
    29cc:	f9 01       	movw	r30, r18
    29ce:	ea 0f       	add	r30, r26
    29d0:	f1 1d       	adc	r31, r1
    29d2:	40 83       	st	Z, r20
	charArray[startingPosition+1]= printSharp;
    29d4:	81 83       	std	Z+1, r24	; 0x01
	charArray[startingPosition+2]= printNumber;
    29d6:	92 83       	std	Z+2, r25	; 0x02
    29d8:	08 95       	ret

000029da <initSequencer>:
//if a real-time sequencer is implemented, they will end up being the same thing.

void initSequencer()
{
	//here we need to setup our timer interrupt
	TCCR0A = (1 << WGM01); //set to clear on correct compare
    29da:	82 e0       	ldi	r24, 0x02	; 2
    29dc:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00); // set pre-scaler to 64
    29de:	93 e0       	ldi	r25, 0x03	; 3
    29e0:	95 bd       	out	0x25, r25	; 37
	OCR0A = 25; // every 25 ticks will be 0.0001 seconds at this prescale.
    29e2:	99 e1       	ldi	r25, 0x19	; 25
    29e4:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1 << OCIE0A); // Enable OCR0A compare interrupt
    29e6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    29ea:	08 95       	ret

000029ec <__vector_21>:
	//interrupts should now be good to go.
}

ISR(TIMER0_COMPA_vect)
{
    29ec:	1f 92       	push	r1
    29ee:	0f 92       	push	r0
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	0f 92       	push	r0
    29f4:	11 24       	eor	r1, r1
    29f6:	8f 93       	push	r24
    29f8:	9f 93       	push	r25
	clockCounter++;
    29fa:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <clockCounter>
    29fe:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <clockCounter+0x1>
    2a02:	01 96       	adiw	r24, 0x01	; 1
    2a04:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <clockCounter+0x1>
    2a08:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <clockCounter>
	//we don't want to do anything else here.
}
    2a0c:	9f 91       	pop	r25
    2a0e:	8f 91       	pop	r24
    2a10:	0f 90       	pop	r0
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	0f 90       	pop	r0
    2a16:	1f 90       	pop	r1
    2a18:	18 95       	reti

00002a1a <updateSequencer>:

void updateSequencer(Pattern sequencerPattern, Globals currentGlobals)
{
    2a1a:	ef 92       	push	r14
    2a1c:	ff 92       	push	r15
    2a1e:	1f 93       	push	r17
    2a20:	cf 93       	push	r28
    2a22:	df 93       	push	r29
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
	uint16_t BPMvar = 150000/(sequencerPattern.patternBPM);

	if(clockCounter>=BPMvar && currentGlobals.playState) //if playstate is on, play next note in sequence.
    2a28:	cf 52       	subi	r28, 0x2F	; 47
    2a2a:	df 4f       	sbci	r29, 0xFF	; 255
    2a2c:	28 81       	ld	r18, Y
    2a2e:	39 81       	ldd	r19, Y+1	; 0x01
    2a30:	c1 5d       	subi	r28, 0xD1	; 209
    2a32:	d0 40       	sbci	r29, 0x00	; 0
    2a34:	40 e0       	ldi	r20, 0x00	; 0
    2a36:	50 e0       	ldi	r21, 0x00	; 0
    2a38:	60 ef       	ldi	r22, 0xF0	; 240
    2a3a:	79 e4       	ldi	r23, 0x49	; 73
    2a3c:	82 e0       	ldi	r24, 0x02	; 2
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__divmodsi4>
    2a44:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <clockCounter>
    2a48:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <clockCounter+0x1>
    2a4c:	82 17       	cp	r24, r18
    2a4e:	93 07       	cpc	r25, r19
    2a50:	08 f4       	brcc	.+2      	; 0x2a54 <updateSequencer+0x3a>
    2a52:	43 c0       	rjmp	.+134    	; 0x2ada <updateSequencer+0xc0>
    2a54:	c5 57       	subi	r28, 0x75	; 117
    2a56:	de 4f       	sbci	r29, 0xFE	; 254
    2a58:	88 81       	ld	r24, Y
    2a5a:	cb 58       	subi	r28, 0x8B	; 139
    2a5c:	d1 40       	sbci	r29, 0x01	; 1
    2a5e:	88 23       	and	r24, r24
    2a60:	b1 f1       	breq	.+108    	; 0x2ace <updateSequencer+0xb4>
	{
		//this will be where we play samples
		clockCounter=0; //clear before the loop, so we can continue counting while the sequencer plays notes.
    2a62:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <clockCounter+0x1>
    2a66:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <clockCounter>
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
    2a6a:	e0 91 9c 03 	lds	r30, 0x039C	; 0x80039c <currentPlayStep>
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	ee 0f       	add	r30, r30
    2a72:	ff 1f       	adc	r31, r31
    2a74:	89 e0       	ldi	r24, 0x09	; 9
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	8c 0f       	add	r24, r28
    2a7a:	9d 1f       	adc	r25, r29
    2a7c:	e8 0f       	add	r30, r24
    2a7e:	f9 1f       	adc	r31, r25
    2a80:	e5 50       	subi	r30, 0x05	; 5
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	e0 80       	ld	r14, Z
    2a86:	f1 80       	ldd	r15, Z+1	; 0x01
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
    2a88:	10 e0       	ldi	r17, 0x00	; 0
		{//we're going to loop through all of the possible tracks, and trigger them
			if((parseStep&1)==1)
    2a8a:	e0 fe       	sbrs	r14, 0
    2a8c:	07 c0       	rjmp	.+14     	; 0x2a9c <updateSequencer+0x82>
			{
				//trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
				playTrack(&sequencerPattern, &currentGlobals, sc);
    2a8e:	41 2f       	mov	r20, r17
    2a90:	be 01       	movw	r22, r28
    2a92:	6c 57       	subi	r22, 0x7C	; 124
    2a94:	7e 4f       	sbci	r23, 0xFE	; 254
    2a96:	ce 01       	movw	r24, r28
    2a98:	09 96       	adiw	r24, 0x09	; 9
    2a9a:	73 d1       	rcall	.+742    	; 0x2d82 <playTrack>
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
    2a9c:	f6 94       	lsr	r15
    2a9e:	e7 94       	ror	r14
	if(clockCounter>=BPMvar && currentGlobals.playState) //if playstate is on, play next note in sequence.
	{
		//this will be where we play samples
		clockCounter=0; //clear before the loop, so we can continue counting while the sequencer plays notes.
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
    2aa0:	1f 5f       	subi	r17, 0xFF	; 255
    2aa2:	10 31       	cpi	r17, 0x10	; 16
    2aa4:	91 f7       	brne	.-28     	; 0x2a8a <updateSequencer+0x70>
				//trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
				playTrack(&sequencerPattern, &currentGlobals, sc);
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
		}
		currentPlayStep = currentPlayStep+1;
    2aa6:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <currentPlayStep>
    2aaa:	8f 5f       	subi	r24, 0xFF	; 255
    2aac:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <currentPlayStep>
		if(currentPlayStep>(sequencerPattern.numSteps-1))
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	cd 52       	subi	r28, 0x2D	; 45
    2ab4:	df 4f       	sbci	r29, 0xFF	; 255
    2ab6:	28 81       	ld	r18, Y
    2ab8:	c3 5d       	subi	r28, 0xD3	; 211
    2aba:	d0 40       	sbci	r29, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	21 50       	subi	r18, 0x01	; 1
    2ac0:	31 09       	sbc	r19, r1
    2ac2:	28 17       	cp	r18, r24
    2ac4:	39 07       	cpc	r19, r25
    2ac6:	4c f4       	brge	.+18     	; 0x2ada <updateSequencer+0xc0>
		{
			currentPlayStep=0; // don't play more steps than are in the sequence.
    2ac8:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <currentPlayStep>
    2acc:	06 c0       	rjmp	.+12     	; 0x2ada <updateSequencer+0xc0>
		}
		
	}else if(clockCounter>=BPMvar && !currentGlobals.playState)
	{ currentPlayStep=0;
    2ace:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <currentPlayStep>
		clockCounter = 0;
    2ad2:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <clockCounter+0x1>
    2ad6:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <clockCounter>
	}
}
    2ada:	df 91       	pop	r29
    2adc:	cf 91       	pop	r28
    2ade:	1f 91       	pop	r17
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	08 95       	ret

00002ae6 <__vector_27>:
char serial0Buffer[TX_BUFFER_SIZE];
int serialReadPos = 0;
int serialWritePos = 0;

ISR (USART0_TX_vect)
{
    2ae6:	1f 92       	push	r1
    2ae8:	0f 92       	push	r0
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	0f 92       	push	r0
    2aee:	11 24       	eor	r1, r1
    2af0:	0b b6       	in	r0, 0x3b	; 59
    2af2:	0f 92       	push	r0
    2af4:	2f 93       	push	r18
    2af6:	3f 93       	push	r19
    2af8:	8f 93       	push	r24
    2afa:	9f 93       	push	r25
    2afc:	ef 93       	push	r30
    2afe:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
    2b00:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <serialReadPos>
    2b04:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <serialReadPos+0x1>
    2b08:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <serialWritePos>
    2b0c:	30 91 a0 03 	lds	r19, 0x03A0	; 0x8003a0 <serialWritePos+0x1>
    2b10:	82 17       	cp	r24, r18
    2b12:	93 07       	cpc	r25, r19
    2b14:	c1 f0       	breq	.+48     	; 0x2b46 <__vector_27+0x60>
	{
		UDR0 = serial0Buffer[serialReadPos];
    2b16:	fc 01       	movw	r30, r24
    2b18:	e8 5d       	subi	r30, 0xD8	; 216
    2b1a:	f9 4f       	sbci	r31, 0xF9	; 249
    2b1c:	80 81       	ld	r24, Z
    2b1e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
    2b22:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <serialReadPos>
    2b26:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <serialReadPos+0x1>
    2b2a:	01 96       	adiw	r24, 0x01	; 1

		if(serialReadPos >= TX_BUFFER_SIZE)
    2b2c:	80 38       	cpi	r24, 0x80	; 128
    2b2e:	21 e0       	ldi	r18, 0x01	; 1
    2b30:	92 07       	cpc	r25, r18
    2b32:	2c f4       	brge	.+10     	; 0x2b3e <__vector_27+0x58>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
    2b34:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <serialReadPos+0x1>
    2b38:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <serialReadPos>
    2b3c:	04 c0       	rjmp	.+8      	; 0x2b46 <__vector_27+0x60>

		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
    2b3e:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <serialReadPos+0x1>
    2b42:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <serialReadPos>
		}
	}
}
    2b46:	ff 91       	pop	r31
    2b48:	ef 91       	pop	r30
    2b4a:	9f 91       	pop	r25
    2b4c:	8f 91       	pop	r24
    2b4e:	3f 91       	pop	r19
    2b50:	2f 91       	pop	r18
    2b52:	0f 90       	pop	r0
    2b54:	0b be       	out	0x3b, r0	; 59
    2b56:	0f 90       	pop	r0
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	0f 90       	pop	r0
    2b5c:	1f 90       	pop	r1
    2b5e:	18 95       	reti

00002b60 <appendSerial0>:

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
    2b60:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <serialWritePos>
    2b64:	30 91 a0 03 	lds	r19, 0x03A0	; 0x8003a0 <serialWritePos+0x1>
    2b68:	f9 01       	movw	r30, r18
    2b6a:	e8 5d       	subi	r30, 0xD8	; 216
    2b6c:	f9 4f       	sbci	r31, 0xF9	; 249
    2b6e:	80 83       	st	Z, r24
	serialWritePos++;
    2b70:	2f 5f       	subi	r18, 0xFF	; 255
    2b72:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    2b74:	20 38       	cpi	r18, 0x80	; 128
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	38 07       	cpc	r19, r24
    2b7a:	2c f4       	brge	.+10     	; 0x2b86 <appendSerial0+0x26>
}

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    2b7c:	30 93 a0 03 	sts	0x03A0, r19	; 0x8003a0 <serialWritePos+0x1>
    2b80:	20 93 9f 03 	sts	0x039F, r18	; 0x80039f <serialWritePos>
    2b84:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    2b86:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <serialWritePos+0x1>
    2b8a:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <serialWritePos>
    2b8e:	08 95       	ret

00002b90 <serialWrite0>:
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
    2b90:	0f 93       	push	r16
    2b92:	1f 93       	push	r17
    2b94:	cf 93       	push	r28
    2b96:	df 93       	push	r29
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2b98:	66 23       	and	r22, r22
    2b9a:	69 f0       	breq	.+26     	; 0x2bb6 <serialWrite0+0x26>
    2b9c:	ec 01       	movw	r28, r24
    2b9e:	61 50       	subi	r22, 0x01	; 1
    2ba0:	06 2f       	mov	r16, r22
    2ba2:	10 e0       	ldi	r17, 0x00	; 0
    2ba4:	0f 5f       	subi	r16, 0xFF	; 255
    2ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba8:	08 0f       	add	r16, r24
    2baa:	19 1f       	adc	r17, r25
	{
		appendSerial0(c[i]);
    2bac:	89 91       	ld	r24, Y+
    2bae:	d8 df       	rcall	.-80     	; 0x2b60 <appendSerial0>
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2bb0:	c0 17       	cp	r28, r16
    2bb2:	d1 07       	cpc	r29, r17
    2bb4:	d9 f7       	brne	.-10     	; 0x2bac <serialWrite0+0x1c>
	{
		appendSerial0(c[i]);

	}

	if(UCSR0A & (1 << UDRE0))
    2bb6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2bba:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    2bbc:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	1f 91       	pop	r17
    2bc6:	0f 91       	pop	r16
    2bc8:	08 95       	ret

00002bca <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    2bca:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    2bce:	80 e1       	ldi	r24, 0x10	; 16
    2bd0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>


UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    2bd4:	88 e4       	ldi	r24, 0x48	; 72
    2bd6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    2bda:	86 e0       	ldi	r24, 0x06	; 6
    2bdc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    2be0:	08 95       	ret

00002be2 <initEnvelopes>:
		//this should be fine for now though. 
			//set track volume
			setTrackVolume(currentPattern->trackSampleLSB[i], currentPattern->trackSampleMSB[i], currentPattern->trackMainVolumeLSB[i], currentPattern->trackMainVolumeMSB[i]);
	}
	
}
    2be2:	88 e0       	ldi	r24, 0x08	; 8
    2be4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2be8:	83 e0       	ldi	r24, 0x03	; 3
    2bea:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2bee:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    2bf2:	8a ef       	ldi	r24, 0xFA	; 250
    2bf4:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    2bf8:	82 e0       	ldi	r24, 0x02	; 2
    2bfa:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2bfe:	08 95       	ret

00002c00 <trackControl>:
    2c00:	cf 93       	push	r28
    2c02:	df 93       	push	r29
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
    2c08:	2a 97       	sbiw	r28, 0x0a	; 10
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	90 ef       	ldi	r25, 0xF0	; 240
    2c16:	99 83       	std	Y+1, r25	; 0x01
    2c18:	9a ea       	ldi	r25, 0xAA	; 170
    2c1a:	9a 83       	std	Y+2, r25	; 0x02
    2c1c:	9a e0       	ldi	r25, 0x0A	; 10
    2c1e:	9b 83       	std	Y+3, r25	; 0x03
    2c20:	93 e0       	ldi	r25, 0x03	; 3
    2c22:	9c 83       	std	Y+4, r25	; 0x04
    2c24:	2d 83       	std	Y+5, r18	; 0x05
    2c26:	8e 83       	std	Y+6, r24	; 0x06
    2c28:	6f 83       	std	Y+7, r22	; 0x07
    2c2a:	48 87       	std	Y+8, r20	; 0x08
    2c2c:	19 86       	std	Y+9, r1	; 0x09
    2c2e:	85 e5       	ldi	r24, 0x55	; 85
    2c30:	8a 87       	std	Y+10, r24	; 0x0a
    2c32:	6a e0       	ldi	r22, 0x0A	; 10
    2c34:	ce 01       	movw	r24, r28
    2c36:	01 96       	adiw	r24, 0x01	; 1
    2c38:	ab df       	rcall	.-170    	; 0x2b90 <serialWrite0>
    2c3a:	2a 96       	adiw	r28, 0x0a	; 10
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	cd bf       	out	0x3d, r28	; 61
    2c46:	df 91       	pop	r29
    2c48:	cf 91       	pop	r28
    2c4a:	08 95       	ret

00002c4c <setOutputVolume>:
    2c4c:	cf 93       	push	r28
    2c4e:	df 93       	push	r29
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	28 97       	sbiw	r28, 0x08	; 8
    2c56:	0f b6       	in	r0, 0x3f	; 63
    2c58:	f8 94       	cli
    2c5a:	de bf       	out	0x3e, r29	; 62
    2c5c:	0f be       	out	0x3f, r0	; 63
    2c5e:	cd bf       	out	0x3d, r28	; 61
    2c60:	90 ef       	ldi	r25, 0xF0	; 240
    2c62:	99 83       	std	Y+1, r25	; 0x01
    2c64:	9a ea       	ldi	r25, 0xAA	; 170
    2c66:	9a 83       	std	Y+2, r25	; 0x02
    2c68:	98 e0       	ldi	r25, 0x08	; 8
    2c6a:	9b 83       	std	Y+3, r25	; 0x03
    2c6c:	95 e0       	ldi	r25, 0x05	; 5
    2c6e:	9c 83       	std	Y+4, r25	; 0x04
    2c70:	4d 83       	std	Y+5, r20	; 0x05
    2c72:	8e 83       	std	Y+6, r24	; 0x06
    2c74:	6f 83       	std	Y+7, r22	; 0x07
    2c76:	85 e5       	ldi	r24, 0x55	; 85
    2c78:	88 87       	std	Y+8, r24	; 0x08
    2c7a:	68 e0       	ldi	r22, 0x08	; 8
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	01 96       	adiw	r24, 0x01	; 1
    2c80:	87 df       	rcall	.-242    	; 0x2b90 <serialWrite0>
    2c82:	28 96       	adiw	r28, 0x08	; 8
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	08 95       	ret

00002c94 <setTrackVolume>:
    2c94:	cf 93       	push	r28
    2c96:	df 93       	push	r29
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	29 97       	sbiw	r28, 0x09	; 9
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	de bf       	out	0x3e, r29	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	cd bf       	out	0x3d, r28	; 61
    2ca8:	90 ef       	ldi	r25, 0xF0	; 240
    2caa:	99 83       	std	Y+1, r25	; 0x01
    2cac:	9a ea       	ldi	r25, 0xAA	; 170
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	99 e0       	ldi	r25, 0x09	; 9
    2cb2:	9b 83       	std	Y+3, r25	; 0x03
    2cb4:	98 e0       	ldi	r25, 0x08	; 8
    2cb6:	9c 83       	std	Y+4, r25	; 0x04
    2cb8:	8d 83       	std	Y+5, r24	; 0x05
    2cba:	6e 83       	std	Y+6, r22	; 0x06
    2cbc:	4f 83       	std	Y+7, r20	; 0x07
    2cbe:	28 87       	std	Y+8, r18	; 0x08
    2cc0:	85 e5       	ldi	r24, 0x55	; 85
    2cc2:	89 87       	std	Y+9, r24	; 0x09
    2cc4:	69 e0       	ldi	r22, 0x09	; 9
    2cc6:	ce 01       	movw	r24, r28
    2cc8:	01 96       	adiw	r24, 0x01	; 1
    2cca:	62 df       	rcall	.-316    	; 0x2b90 <serialWrite0>
    2ccc:	29 96       	adiw	r28, 0x09	; 9
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	08 95       	ret

00002cde <setTrackFade>:
    2cde:	cf 92       	push	r12
    2ce0:	ef 92       	push	r14
    2ce2:	0f 93       	push	r16
    2ce4:	cf 93       	push	r28
    2ce6:	df 93       	push	r29
    2ce8:	cd b7       	in	r28, 0x3d	; 61
    2cea:	de b7       	in	r29, 0x3e	; 62
    2cec:	2c 97       	sbiw	r28, 0x0c	; 12
    2cee:	0f b6       	in	r0, 0x3f	; 63
    2cf0:	f8 94       	cli
    2cf2:	de bf       	out	0x3e, r29	; 62
    2cf4:	0f be       	out	0x3f, r0	; 63
    2cf6:	cd bf       	out	0x3d, r28	; 61
    2cf8:	90 ef       	ldi	r25, 0xF0	; 240
    2cfa:	99 83       	std	Y+1, r25	; 0x01
    2cfc:	9a ea       	ldi	r25, 0xAA	; 170
    2cfe:	9a 83       	std	Y+2, r25	; 0x02
    2d00:	9c e0       	ldi	r25, 0x0C	; 12
    2d02:	9b 83       	std	Y+3, r25	; 0x03
    2d04:	9a e0       	ldi	r25, 0x0A	; 10
    2d06:	9c 83       	std	Y+4, r25	; 0x04
    2d08:	8d 83       	std	Y+5, r24	; 0x05
    2d0a:	6e 83       	std	Y+6, r22	; 0x06
    2d0c:	4f 83       	std	Y+7, r20	; 0x07
    2d0e:	28 87       	std	Y+8, r18	; 0x08
    2d10:	09 87       	std	Y+9, r16	; 0x09
    2d12:	ea 86       	std	Y+10, r14	; 0x0a
    2d14:	cb 86       	std	Y+11, r12	; 0x0b
    2d16:	85 e5       	ldi	r24, 0x55	; 85
    2d18:	8c 87       	std	Y+12, r24	; 0x0c
    2d1a:	6c e0       	ldi	r22, 0x0C	; 12
    2d1c:	ce 01       	movw	r24, r28
    2d1e:	01 96       	adiw	r24, 0x01	; 1
    2d20:	37 df       	rcall	.-402    	; 0x2b90 <serialWrite0>
    2d22:	2c 96       	adiw	r28, 0x0c	; 12
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	f8 94       	cli
    2d28:	de bf       	out	0x3e, r29	; 62
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	cd bf       	out	0x3d, r28	; 61
    2d2e:	df 91       	pop	r29
    2d30:	cf 91       	pop	r28
    2d32:	0f 91       	pop	r16
    2d34:	ef 90       	pop	r14
    2d36:	cf 90       	pop	r12
    2d38:	08 95       	ret

00002d3a <outputSampleRate>:
    2d3a:	cf 93       	push	r28
    2d3c:	df 93       	push	r29
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
    2d42:	28 97       	sbiw	r28, 0x08	; 8
    2d44:	0f b6       	in	r0, 0x3f	; 63
    2d46:	f8 94       	cli
    2d48:	de bf       	out	0x3e, r29	; 62
    2d4a:	0f be       	out	0x3f, r0	; 63
    2d4c:	cd bf       	out	0x3d, r28	; 61
    2d4e:	90 ef       	ldi	r25, 0xF0	; 240
    2d50:	99 83       	std	Y+1, r25	; 0x01
    2d52:	9a ea       	ldi	r25, 0xAA	; 170
    2d54:	9a 83       	std	Y+2, r25	; 0x02
    2d56:	98 e0       	ldi	r25, 0x08	; 8
    2d58:	9b 83       	std	Y+3, r25	; 0x03
    2d5a:	9c e0       	ldi	r25, 0x0C	; 12
    2d5c:	9c 83       	std	Y+4, r25	; 0x04
    2d5e:	8d 83       	std	Y+5, r24	; 0x05
    2d60:	6e 83       	std	Y+6, r22	; 0x06
    2d62:	4f 83       	std	Y+7, r20	; 0x07
    2d64:	85 e5       	ldi	r24, 0x55	; 85
    2d66:	88 87       	std	Y+8, r24	; 0x08
    2d68:	68 e0       	ldi	r22, 0x08	; 8
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	01 96       	adiw	r24, 0x01	; 1
    2d6e:	10 df       	rcall	.-480    	; 0x2b90 <serialWrite0>
    2d70:	28 96       	adiw	r28, 0x08	; 8
    2d72:	0f b6       	in	r0, 0x3f	; 63
    2d74:	f8 94       	cli
    2d76:	de bf       	out	0x3e, r29	; 62
    2d78:	0f be       	out	0x3f, r0	; 63
    2d7a:	cd bf       	out	0x3d, r28	; 61
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	08 95       	ret

00002d82 <playTrack>:
    2d82:	2f 92       	push	r2
    2d84:	3f 92       	push	r3
    2d86:	4f 92       	push	r4
    2d88:	5f 92       	push	r5
    2d8a:	6f 92       	push	r6
    2d8c:	7f 92       	push	r7
    2d8e:	8f 92       	push	r8
    2d90:	9f 92       	push	r9
    2d92:	af 92       	push	r10
    2d94:	bf 92       	push	r11
    2d96:	cf 92       	push	r12
    2d98:	df 92       	push	r13
    2d9a:	ef 92       	push	r14
    2d9c:	ff 92       	push	r15
    2d9e:	0f 93       	push	r16
    2da0:	1f 93       	push	r17
    2da2:	cf 93       	push	r28
    2da4:	df 93       	push	r29
    2da6:	00 d0       	rcall	.+0      	; 0x2da8 <playTrack+0x26>
    2da8:	1f 92       	push	r1
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	2b 01       	movw	r4, r22
    2db0:	d4 2e       	mov	r13, r20
    2db2:	a4 2e       	mov	r10, r20
    2db4:	b1 2c       	mov	r11, r1
    2db6:	9c 01       	movw	r18, r24
    2db8:	2a 0d       	add	r18, r10
    2dba:	3b 1d       	adc	r19, r11
    2dbc:	f9 01       	movw	r30, r18
    2dbe:	e5 53       	subi	r30, 0x35	; 53
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	20 80       	ld	r2, Z
    2dc4:	31 2c       	mov	r3, r1
    2dc6:	32 2c       	mov	r3, r2
    2dc8:	22 24       	eor	r2, r2
    2dca:	70 96       	adiw	r30, 0x10	; 16
    2dcc:	40 81       	ld	r20, Z
    2dce:	24 2a       	or	r2, r20
    2dd0:	70 96       	adiw	r30, 0x10	; 16
    2dd2:	20 81       	ld	r18, Z
    2dd4:	21 30       	cpi	r18, 0x01	; 1
    2dd6:	09 f4       	brne	.+2      	; 0x2dda <playTrack+0x58>
    2dd8:	78 c0       	rjmp	.+240    	; 0x2eca <playTrack+0x148>
    2dda:	38 f0       	brcs	.+14     	; 0x2dea <playTrack+0x68>
    2ddc:	22 30       	cpi	r18, 0x02	; 2
    2dde:	09 f4       	brne	.+2      	; 0x2de2 <playTrack+0x60>
    2de0:	b0 c0       	rjmp	.+352    	; 0x2f42 <playTrack+0x1c0>
    2de2:	23 30       	cpi	r18, 0x03	; 3
    2de4:	09 f4       	brne	.+2      	; 0x2de8 <playTrack+0x66>
    2de6:	dc c0       	rjmp	.+440    	; 0x2fa0 <playTrack+0x21e>
    2de8:	ee c0       	rjmp	.+476    	; 0x2fc6 <playTrack+0x244>
    2dea:	9c 01       	movw	r18, r24
    2dec:	2a 0d       	add	r18, r10
    2dee:	3b 1d       	adc	r19, r11
    2df0:	3c 83       	std	Y+4, r19	; 0x04
    2df2:	2b 83       	std	Y+3, r18	; 0x03
    2df4:	89 01       	movw	r16, r18
    2df6:	08 5a       	subi	r16, 0xA8	; 168
    2df8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfa:	f8 01       	movw	r30, r16
    2dfc:	f0 81       	ld	r31, Z
    2dfe:	f9 83       	std	Y+1, r31	; 0x01
    2e00:	79 01       	movw	r14, r18
    2e02:	28 e4       	ldi	r18, 0x48	; 72
    2e04:	e2 0e       	add	r14, r18
    2e06:	f1 1c       	adc	r15, r1
    2e08:	f7 01       	movw	r30, r14
    2e0a:	f0 81       	ld	r31, Z
    2e0c:	fa 83       	std	Y+2, r31	; 0x02
    2e0e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e10:	fc 81       	ldd	r31, Y+4	; 0x04
    2e12:	e8 57       	subi	r30, 0x78	; 120
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	6b 80       	ldd	r6, Y+3	; 0x03
    2e18:	7c 80       	ldd	r7, Y+4	; 0x04
    2e1a:	28 e9       	ldi	r18, 0x98	; 152
    2e1c:	62 0e       	add	r6, r18
    2e1e:	71 1c       	adc	r7, r1
    2e20:	8b 80       	ldd	r8, Y+3	; 0x03
    2e22:	9c 80       	ldd	r9, Y+4	; 0x04
    2e24:	38 ea       	ldi	r19, 0xA8	; 168
    2e26:	83 0e       	add	r8, r19
    2e28:	91 1c       	adc	r9, r1
    2e2a:	20 81       	ld	r18, Z
    2e2c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e2e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e30:	40 8d       	ldd	r20, Z+24	; 0x18
    2e32:	f3 01       	movw	r30, r6
    2e34:	60 81       	ld	r22, Z
    2e36:	f4 01       	movw	r30, r8
    2e38:	80 81       	ld	r24, Z
    2e3a:	e2 de       	rcall	.-572    	; 0x2c00 <trackControl>
    2e3c:	c1 2c       	mov	r12, r1
    2e3e:	f7 01       	movw	r30, r14
    2e40:	e0 80       	ld	r14, Z
    2e42:	f8 01       	movw	r30, r16
    2e44:	00 81       	ld	r16, Z
    2e46:	eb 81       	ldd	r30, Y+3	; 0x03
    2e48:	fc 81       	ldd	r31, Y+4	; 0x04
    2e4a:	20 a5       	ldd	r18, Z+40	; 0x28
    2e4c:	40 ad       	ldd	r20, Z+56	; 0x38
    2e4e:	f3 01       	movw	r30, r6
    2e50:	60 81       	ld	r22, Z
    2e52:	f4 01       	movw	r30, r8
    2e54:	80 81       	ld	r24, Z
    2e56:	43 df       	rcall	.-378    	; 0x2cde <setTrackFade>
    2e58:	f2 01       	movw	r30, r4
    2e5a:	eb 55       	subi	r30, 0x5B	; 91
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	02 c0       	rjmp	.+4      	; 0x2e68 <playTrack+0xe6>
    2e64:	88 0f       	add	r24, r24
    2e66:	99 1f       	adc	r25, r25
    2e68:	da 94       	dec	r13
    2e6a:	e2 f7       	brpl	.-8      	; 0x2e64 <playTrack+0xe2>
    2e6c:	20 81       	ld	r18, Z
    2e6e:	31 81       	ldd	r19, Z+1	; 0x01
    2e70:	82 2b       	or	r24, r18
    2e72:	93 2b       	or	r25, r19
    2e74:	91 83       	std	Z+1, r25	; 0x01
    2e76:	80 83       	st	Z, r24
    2e78:	95 01       	movw	r18, r10
    2e7a:	22 0f       	add	r18, r18
    2e7c:	33 1f       	adc	r19, r19
    2e7e:	22 0f       	add	r18, r18
    2e80:	33 1f       	adc	r19, r19
    2e82:	24 0d       	add	r18, r4
    2e84:	35 1d       	adc	r19, r5
    2e86:	29 55       	subi	r18, 0x59	; 89
    2e88:	3f 4f       	sbci	r19, 0xFF	; 255
    2e8a:	3c 83       	std	Y+4, r19	; 0x04
    2e8c:	2b 83       	std	Y+3, r18	; 0x03
    2e8e:	39 81       	ldd	r19, Y+1	; 0x01
    2e90:	83 2f       	mov	r24, r19
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	ea 81       	ldd	r30, Y+2	; 0x02
    2e96:	9e 2b       	or	r25, r30
    2e98:	a1 01       	movw	r20, r2
    2e9a:	60 e0       	ldi	r22, 0x00	; 0
    2e9c:	70 e0       	ldi	r23, 0x00	; 0
    2e9e:	48 0f       	add	r20, r24
    2ea0:	59 1f       	adc	r21, r25
    2ea2:	61 1d       	adc	r22, r1
    2ea4:	71 1d       	adc	r23, r1
    2ea6:	f2 01       	movw	r30, r4
    2ea8:	ef 55       	subi	r30, 0x5F	; 95
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	80 81       	ld	r24, Z
    2eae:	91 81       	ldd	r25, Z+1	; 0x01
    2eb0:	a2 81       	ldd	r26, Z+2	; 0x02
    2eb2:	b3 81       	ldd	r27, Z+3	; 0x03
    2eb4:	84 0f       	add	r24, r20
    2eb6:	95 1f       	adc	r25, r21
    2eb8:	a6 1f       	adc	r26, r22
    2eba:	b7 1f       	adc	r27, r23
    2ebc:	eb 81       	ldd	r30, Y+3	; 0x03
    2ebe:	fc 81       	ldd	r31, Y+4	; 0x04
    2ec0:	80 83       	st	Z, r24
    2ec2:	91 83       	std	Z+1, r25	; 0x01
    2ec4:	a2 83       	std	Z+2, r26	; 0x02
    2ec6:	b3 83       	std	Z+3, r27	; 0x03
    2ec8:	7e c0       	rjmp	.+252    	; 0x2fc6 <playTrack+0x244>
    2eca:	ac 01       	movw	r20, r24
    2ecc:	4a 0d       	add	r20, r10
    2ece:	5b 1d       	adc	r21, r11
    2ed0:	ca 01       	movw	r24, r20
    2ed2:	88 57       	subi	r24, 0x78	; 120
    2ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed6:	da 01       	movw	r26, r20
    2ed8:	a8 56       	subi	r26, 0x68	; 104
    2eda:	bf 4f       	sbci	r27, 0xFF	; 255
    2edc:	8a 01       	movw	r16, r20
    2ede:	08 55       	subi	r16, 0x58	; 88
    2ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	20 81       	ld	r18, Z
    2ee6:	fa 01       	movw	r30, r20
    2ee8:	40 8d       	ldd	r20, Z+24	; 0x18
    2eea:	6c 91       	ld	r22, X
    2eec:	f8 01       	movw	r30, r16
    2eee:	80 81       	ld	r24, Z
    2ef0:	87 de       	rcall	.-754    	; 0x2c00 <trackControl>
    2ef2:	f2 01       	movw	r30, r4
    2ef4:	eb 55       	subi	r30, 0x5B	; 91
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <playTrack+0x180>
    2efe:	88 0f       	add	r24, r24
    2f00:	99 1f       	adc	r25, r25
    2f02:	da 94       	dec	r13
    2f04:	e2 f7       	brpl	.-8      	; 0x2efe <playTrack+0x17c>
    2f06:	20 81       	ld	r18, Z
    2f08:	31 81       	ldd	r19, Z+1	; 0x01
    2f0a:	82 2b       	or	r24, r18
    2f0c:	93 2b       	or	r25, r19
    2f0e:	91 83       	std	Z+1, r25	; 0x01
    2f10:	80 83       	st	Z, r24
    2f12:	95 01       	movw	r18, r10
    2f14:	22 0f       	add	r18, r18
    2f16:	33 1f       	adc	r19, r19
    2f18:	22 0f       	add	r18, r18
    2f1a:	33 1f       	adc	r19, r19
    2f1c:	24 0d       	add	r18, r4
    2f1e:	35 1d       	adc	r19, r5
    2f20:	29 55       	subi	r18, 0x59	; 89
    2f22:	3f 4f       	sbci	r19, 0xFF	; 255
    2f24:	34 97       	sbiw	r30, 0x04	; 4
    2f26:	80 81       	ld	r24, Z
    2f28:	91 81       	ldd	r25, Z+1	; 0x01
    2f2a:	a2 81       	ldd	r26, Z+2	; 0x02
    2f2c:	b3 81       	ldd	r27, Z+3	; 0x03
    2f2e:	82 0d       	add	r24, r2
    2f30:	93 1d       	adc	r25, r3
    2f32:	a1 1d       	adc	r26, r1
    2f34:	b1 1d       	adc	r27, r1
    2f36:	f9 01       	movw	r30, r18
    2f38:	80 83       	st	Z, r24
    2f3a:	91 83       	std	Z+1, r25	; 0x01
    2f3c:	a2 83       	std	Z+2, r26	; 0x02
    2f3e:	b3 83       	std	Z+3, r27	; 0x03
    2f40:	42 c0       	rjmp	.+132    	; 0x2fc6 <playTrack+0x244>
    2f42:	9c 01       	movw	r18, r24
    2f44:	2a 0d       	add	r18, r10
    2f46:	3b 1d       	adc	r19, r11
    2f48:	3c 83       	std	Y+4, r19	; 0x04
    2f4a:	2b 83       	std	Y+3, r18	; 0x03
    2f4c:	f9 01       	movw	r30, r18
    2f4e:	e8 57       	subi	r30, 0x78	; 120
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	49 01       	movw	r8, r18
    2f54:	38 e9       	ldi	r19, 0x98	; 152
    2f56:	83 0e       	add	r8, r19
    2f58:	91 1c       	adc	r9, r1
    2f5a:	ab 80       	ldd	r10, Y+3	; 0x03
    2f5c:	bc 80       	ldd	r11, Y+4	; 0x04
    2f5e:	88 ea       	ldi	r24, 0xA8	; 168
    2f60:	a8 0e       	add	r10, r24
    2f62:	b1 1c       	adc	r11, r1
    2f64:	20 81       	ld	r18, Z
    2f66:	eb 81       	ldd	r30, Y+3	; 0x03
    2f68:	fc 81       	ldd	r31, Y+4	; 0x04
    2f6a:	40 8d       	ldd	r20, Z+24	; 0x18
    2f6c:	f4 01       	movw	r30, r8
    2f6e:	60 81       	ld	r22, Z
    2f70:	f5 01       	movw	r30, r10
    2f72:	80 81       	ld	r24, Z
    2f74:	45 de       	rcall	.-886    	; 0x2c00 <trackControl>
    2f76:	ab 81       	ldd	r26, Y+3	; 0x03
    2f78:	bc 81       	ldd	r27, Y+4	; 0x04
    2f7a:	a8 5b       	subi	r26, 0xB8	; 184
    2f7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f7e:	eb 81       	ldd	r30, Y+3	; 0x03
    2f80:	fc 81       	ldd	r31, Y+4	; 0x04
    2f82:	e8 5a       	subi	r30, 0xA8	; 168
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	c1 2c       	mov	r12, r1
    2f88:	ec 90       	ld	r14, X
    2f8a:	00 81       	ld	r16, Z
    2f8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f90:	20 a5       	ldd	r18, Z+40	; 0x28
    2f92:	40 ad       	ldd	r20, Z+56	; 0x38
    2f94:	f4 01       	movw	r30, r8
    2f96:	60 81       	ld	r22, Z
    2f98:	f5 01       	movw	r30, r10
    2f9a:	80 81       	ld	r24, Z
    2f9c:	a0 de       	rcall	.-704    	; 0x2cde <setTrackFade>
    2f9e:	13 c0       	rjmp	.+38     	; 0x2fc6 <playTrack+0x244>
    2fa0:	a8 0e       	add	r10, r24
    2fa2:	b9 1e       	adc	r11, r25
    2fa4:	c5 01       	movw	r24, r10
    2fa6:	88 57       	subi	r24, 0x78	; 120
    2fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    2faa:	d5 01       	movw	r26, r10
    2fac:	a8 56       	subi	r26, 0x68	; 104
    2fae:	bf 4f       	sbci	r27, 0xFF	; 255
    2fb0:	85 01       	movw	r16, r10
    2fb2:	08 55       	subi	r16, 0x58	; 88
    2fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	20 81       	ld	r18, Z
    2fba:	f5 01       	movw	r30, r10
    2fbc:	40 8d       	ldd	r20, Z+24	; 0x18
    2fbe:	6c 91       	ld	r22, X
    2fc0:	f8 01       	movw	r30, r16
    2fc2:	80 81       	ld	r24, Z
    2fc4:	1d de       	rcall	.-966    	; 0x2c00 <trackControl>
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	df 90       	pop	r13
    2fdc:	cf 90       	pop	r12
    2fde:	bf 90       	pop	r11
    2fe0:	af 90       	pop	r10
    2fe2:	9f 90       	pop	r9
    2fe4:	8f 90       	pop	r8
    2fe6:	7f 90       	pop	r7
    2fe8:	6f 90       	pop	r6
    2fea:	5f 90       	pop	r5
    2fec:	4f 90       	pop	r4
    2fee:	3f 90       	pop	r3
    2ff0:	2f 90       	pop	r2
    2ff2:	08 95       	ret

00002ff4 <releaseUpdate>:

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
    2ff4:	4f 92       	push	r4
    2ff6:	5f 92       	push	r5
    2ff8:	6f 92       	push	r6
    2ffa:	7f 92       	push	r7
    2ffc:	8f 92       	push	r8
    2ffe:	9f 92       	push	r9
    3000:	af 92       	push	r10
    3002:	bf 92       	push	r11
    3004:	cf 92       	push	r12
    3006:	ef 92       	push	r14
    3008:	0f 93       	push	r16
    300a:	cf 93       	push	r28
    300c:	df 93       	push	r29
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
    300e:	fb 01       	movw	r30, r22
    3010:	eb 55       	subi	r30, 0x5B	; 91
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	80 80       	ld	r8, Z
    3016:	91 80       	ldd	r9, Z+1	; 0x01
    3018:	eb 01       	movw	r28, r22
    301a:	c9 55       	subi	r28, 0x59	; 89
    301c:	df 4f       	sbci	r29, 0xFF	; 255
    301e:	88 58       	subi	r24, 0x88	; 136
    3020:	9f 4f       	sbci	r25, 0xFF	; 255
    3022:	5c 01       	movw	r10, r24
    3024:	3b 01       	movw	r6, r22
    3026:	87 ee       	ldi	r24, 0xE7	; 231
    3028:	68 0e       	add	r6, r24
    302a:	71 1c       	adc	r7, r1
	
	for(int i = 0; i<16; i++)
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
    302c:	e1 e0       	ldi	r30, 0x01	; 1
    302e:	8e 22       	and	r8, r30
    3030:	99 24       	eor	r9, r9
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])>=(currentGlobals->releaseCounter))
    3032:	2b 01       	movw	r4, r22
    3034:	f1 ea       	ldi	r31, 0xA1	; 161
    3036:	4f 0e       	add	r4, r31
    3038:	51 1c       	adc	r5, r1
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
    303a:	81 14       	cp	r8, r1
    303c:	91 04       	cpc	r9, r1
    303e:	d1 f0       	breq	.+52     	; 0x3074 <releaseUpdate+0x80>
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])>=(currentGlobals->releaseCounter))
    3040:	48 81       	ld	r20, Y
    3042:	59 81       	ldd	r21, Y+1	; 0x01
    3044:	6a 81       	ldd	r22, Y+2	; 0x02
    3046:	7b 81       	ldd	r23, Y+3	; 0x03
    3048:	f2 01       	movw	r30, r4
    304a:	80 81       	ld	r24, Z
    304c:	91 81       	ldd	r25, Z+1	; 0x01
    304e:	a2 81       	ldd	r26, Z+2	; 0x02
    3050:	b3 81       	ldd	r27, Z+3	; 0x03
    3052:	48 17       	cp	r20, r24
    3054:	59 07       	cpc	r21, r25
    3056:	6a 07       	cpc	r22, r26
    3058:	7b 07       	cpc	r23, r27
    305a:	60 f0       	brcs	.+24     	; 0x3074 <releaseUpdate+0x80>
			{
				//we need to do the release state here.
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],255,186,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
    305c:	cc 24       	eor	r12, r12
    305e:	c3 94       	inc	r12
    3060:	f5 01       	movw	r30, r10
    3062:	70 97       	sbiw	r30, 0x10	; 16
    3064:	e0 80       	ld	r14, Z
    3066:	f5 01       	movw	r30, r10
    3068:	00 81       	ld	r16, Z
    306a:	2a eb       	ldi	r18, 0xBA	; 186
    306c:	4f ef       	ldi	r20, 0xFF	; 255
    306e:	60 a1       	ldd	r22, Z+32	; 0x20
    3070:	80 a9       	ldd	r24, Z+48	; 0x30
    3072:	35 de       	rcall	.-918    	; 0x2cde <setTrackFade>
    3074:	24 96       	adiw	r28, 0x04	; 4
    3076:	ff ef       	ldi	r31, 0xFF	; 255
    3078:	af 1a       	sub	r10, r31
    307a:	bf 0a       	sbc	r11, r31

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
    307c:	c6 15       	cp	r28, r6
    307e:	d7 05       	cpc	r29, r7
    3080:	e1 f6       	brne	.-72     	; 0x303a <releaseUpdate+0x46>
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],255,186,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
			} //1 makes the stop flag active, so sample will end after the release envelope is done triggering. 
		}
	}
	
    3082:	df 91       	pop	r29
    3084:	cf 91       	pop	r28
    3086:	0f 91       	pop	r16
    3088:	ef 90       	pop	r14
    308a:	cf 90       	pop	r12
    308c:	bf 90       	pop	r11
    308e:	af 90       	pop	r10
    3090:	9f 90       	pop	r9
    3092:	8f 90       	pop	r8
    3094:	7f 90       	pop	r7
    3096:	6f 90       	pop	r6
    3098:	5f 90       	pop	r5
    309a:	4f 90       	pop	r4
    309c:	08 95       	ret

0000309e <twi_init>:
		}

		returnNum=twi_readNak();

	return returnNum;
}
    309e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    30a2:	88 e4       	ldi	r24, 0x48	; 72
    30a4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    30a8:	08 95       	ret

000030aa <twi_start>:
    30aa:	94 ea       	ldi	r25, 0xA4	; 164
    30ac:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    30b0:	ec eb       	ldi	r30, 0xBC	; 188
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	90 81       	ld	r25, Z
    30b6:	99 23       	and	r25, r25
    30b8:	ec f7       	brge	.-6      	; 0x30b4 <twi_start+0xa>
    30ba:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    30be:	98 7f       	andi	r25, 0xF8	; 248
    30c0:	98 30       	cpi	r25, 0x08	; 8
    30c2:	11 f0       	breq	.+4      	; 0x30c8 <twi_start+0x1e>
    30c4:	90 31       	cpi	r25, 0x10	; 16
    30c6:	a1 f4       	brne	.+40     	; 0x30f0 <twi_start+0x46>
    30c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    30cc:	84 e8       	ldi	r24, 0x84	; 132
    30ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    30d2:	ec eb       	ldi	r30, 0xBC	; 188
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	88 23       	and	r24, r24
    30da:	ec f7       	brge	.-6      	; 0x30d6 <twi_start+0x2c>
    30dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    30e0:	98 7f       	andi	r25, 0xF8	; 248
    30e2:	98 31       	cpi	r25, 0x18	; 24
    30e4:	39 f0       	breq	.+14     	; 0x30f4 <twi_start+0x4a>
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	90 34       	cpi	r25, 0x40	; 64
    30ea:	29 f4       	brne	.+10     	; 0x30f6 <twi_start+0x4c>
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	08 95       	ret
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	08 95       	ret
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	08 95       	ret

000030f8 <twi_stop>:
    30f8:	84 e9       	ldi	r24, 0x94	; 148
    30fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    30fe:	ec eb       	ldi	r30, 0xBC	; 188
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	84 fd       	sbrc	r24, 4
    3106:	fd cf       	rjmp	.-6      	; 0x3102 <twi_stop+0xa>
    3108:	08 95       	ret

0000310a <twi_write>:
    310a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    310e:	84 e8       	ldi	r24, 0x84	; 132
    3110:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3114:	ec eb       	ldi	r30, 0xBC	; 188
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	80 81       	ld	r24, Z
    311a:	88 23       	and	r24, r24
    311c:	ec f7       	brge	.-6      	; 0x3118 <twi_write+0xe>
    311e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3122:	98 7f       	andi	r25, 0xF8	; 248
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	98 32       	cpi	r25, 0x28	; 40
    3128:	09 f4       	brne	.+2      	; 0x312c <twi_write+0x22>
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	08 95       	ret

0000312e <twi_readAck>:
    312e:	84 ec       	ldi	r24, 0xC4	; 196
    3130:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3134:	ec eb       	ldi	r30, 0xBC	; 188
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	80 81       	ld	r24, Z
    313a:	88 23       	and	r24, r24
    313c:	ec f7       	brge	.-6      	; 0x3138 <twi_readAck+0xa>
    313e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3142:	08 95       	ret

00003144 <twi_readNak>:
    3144:	84 e8       	ldi	r24, 0x84	; 132
    3146:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    314a:	ec eb       	ldi	r30, 0xBC	; 188
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	80 81       	ld	r24, Z
    3150:	88 23       	and	r24, r24
    3152:	ec f7       	brge	.-6      	; 0x314e <twi_readNak+0xa>
    3154:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3158:	08 95       	ret

0000315a <eepromSavePattern>:
    315a:	4f 92       	push	r4
    315c:	5f 92       	push	r5
    315e:	6f 92       	push	r6
    3160:	7f 92       	push	r7
    3162:	8f 92       	push	r8
    3164:	9f 92       	push	r9
    3166:	af 92       	push	r10
    3168:	bf 92       	push	r11
    316a:	cf 92       	push	r12
    316c:	df 92       	push	r13
    316e:	ef 92       	push	r14
    3170:	ff 92       	push	r15
    3172:	0f 93       	push	r16
    3174:	1f 93       	push	r17
    3176:	cf 93       	push	r28
    3178:	df 93       	push	r29
    317a:	cd b7       	in	r28, 0x3d	; 61
    317c:	de b7       	in	r29, 0x3e	; 62
    317e:	c4 59       	subi	r28, 0x94	; 148
    3180:	d1 09       	sbc	r29, r1
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	f8 94       	cli
    3186:	de bf       	out	0x3e, r29	; 62
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	cd bf       	out	0x3d, r28	; 61
    318c:	cd 5d       	subi	r28, 0xDD	; 221
    318e:	dd 4f       	sbci	r29, 0xFD	; 253
    3190:	48 81       	ld	r20, Y
    3192:	c3 52       	subi	r28, 0x23	; 35
    3194:	d2 40       	sbci	r29, 0x02	; 2
    3196:	c0 59       	subi	r28, 0x90	; 144
    3198:	de 4f       	sbci	r29, 0xFE	; 254
    319a:	88 81       	ld	r24, Y
    319c:	c0 57       	subi	r28, 0x70	; 112
    319e:	d1 40       	sbci	r29, 0x01	; 1
    31a0:	cf 58       	subi	r28, 0x8F	; 143
    31a2:	de 4f       	sbci	r29, 0xFE	; 254
    31a4:	98 81       	ld	r25, Y
    31a6:	c1 57       	subi	r28, 0x71	; 113
    31a8:	d1 40       	sbci	r29, 0x01	; 1
    31aa:	24 2f       	mov	r18, r20
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	44 23       	and	r20, r20
    31b0:	8c f0       	brlt	.+34     	; 0x31d4 <eepromSavePattern+0x7a>
    31b2:	21 50       	subi	r18, 0x01	; 1
    31b4:	31 09       	sbc	r19, r1
    31b6:	39 01       	movw	r6, r18
    31b8:	66 0c       	add	r6, r6
    31ba:	77 1c       	adc	r7, r7
    31bc:	62 0e       	add	r6, r18
    31be:	73 1e       	adc	r7, r19
    31c0:	76 94       	lsr	r7
    31c2:	76 2c       	mov	r7, r6
    31c4:	66 24       	eor	r6, r6
    31c6:	77 94       	ror	r7
    31c8:	67 94       	ror	r6
    31ca:	0f 2e       	mov	r0, r31
    31cc:	f0 ea       	ldi	r31, 0xA0	; 160
    31ce:	5f 2e       	mov	r5, r31
    31d0:	f0 2d       	mov	r31, r0
    31d2:	11 c0       	rjmp	.+34     	; 0x31f6 <eepromSavePattern+0x9c>
    31d4:	20 58       	subi	r18, 0x80	; 128
    31d6:	31 09       	sbc	r19, r1
    31d8:	39 01       	movw	r6, r18
    31da:	66 0c       	add	r6, r6
    31dc:	77 1c       	adc	r7, r7
    31de:	26 0d       	add	r18, r6
    31e0:	37 1d       	adc	r19, r7
    31e2:	39 01       	movw	r6, r18
    31e4:	76 94       	lsr	r7
    31e6:	76 2c       	mov	r7, r6
    31e8:	66 24       	eor	r6, r6
    31ea:	77 94       	ror	r7
    31ec:	67 94       	ror	r6
    31ee:	0f 2e       	mov	r0, r31
    31f0:	f8 ea       	ldi	r31, 0xA8	; 168
    31f2:	5f 2e       	mov	r5, r31
    31f4:	f0 2d       	mov	r31, r0
    31f6:	be 01       	movw	r22, r28
    31f8:	68 55       	subi	r22, 0x58	; 88
    31fa:	7f 4f       	sbci	r23, 0xFF	; 255
    31fc:	8e 01       	movw	r16, r28
    31fe:	0f 5f       	subi	r16, 0xFF	; 255
    3200:	1f 4f       	sbci	r17, 0xFF	; 255
    3202:	fe 01       	movw	r30, r28
    3204:	e0 55       	subi	r30, 0x50	; 80
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	98 01       	movw	r18, r16
    320a:	db 01       	movw	r26, r22
    320c:	4d 91       	ld	r20, X+
    320e:	bd 01       	movw	r22, r26
    3210:	d9 01       	movw	r26, r18
    3212:	4d 93       	st	X+, r20
    3214:	9d 01       	movw	r18, r26
    3216:	6e 17       	cp	r22, r30
    3218:	7f 07       	cpc	r23, r31
    321a:	b9 f7       	brne	.-18     	; 0x320a <eepromSavePattern+0xb0>
    321c:	de 01       	movw	r26, r28
    321e:	19 96       	adiw	r26, 0x09	; 9
    3220:	9e 01       	movw	r18, r28
    3222:	28 54       	subi	r18, 0x48	; 72
    3224:	3f 4f       	sbci	r19, 0xFF	; 255
    3226:	41 91       	ld	r20, Z+
    3228:	4d 93       	st	X+, r20
    322a:	e2 17       	cp	r30, r18
    322c:	f3 07       	cpc	r31, r19
    322e:	d9 f7       	brne	.-10     	; 0x3226 <eepromSavePattern+0xcc>
    3230:	4e 01       	movw	r8, r28
    3232:	b1 e1       	ldi	r27, 0x11	; 17
    3234:	8b 0e       	add	r8, r27
    3236:	91 1c       	adc	r9, r1
    3238:	7e 01       	movw	r14, r28
    323a:	e0 ec       	ldi	r30, 0xC0	; 192
    323c:	ee 0e       	add	r14, r30
    323e:	f1 1c       	adc	r15, r1
    3240:	d4 01       	movw	r26, r8
    3242:	f9 01       	movw	r30, r18
    3244:	41 91       	ld	r20, Z+
    3246:	9f 01       	movw	r18, r30
    3248:	4d 93       	st	X+, r20
    324a:	ee 15       	cp	r30, r14
    324c:	ff 05       	cpc	r31, r15
    324e:	c9 f7       	brne	.-14     	; 0x3242 <eepromSavePattern+0xe8>
    3250:	9e 01       	movw	r18, r28
    3252:	27 5e       	subi	r18, 0xE7	; 231
    3254:	3f 4f       	sbci	r19, 0xFF	; 255
    3256:	be 01       	movw	r22, r28
    3258:	60 53       	subi	r22, 0x30	; 48
    325a:	7f 4f       	sbci	r23, 0xFF	; 255
    325c:	d7 01       	movw	r26, r14
    325e:	4d 91       	ld	r20, X+
    3260:	7d 01       	movw	r14, r26
    3262:	f9 01       	movw	r30, r18
    3264:	41 93       	st	Z+, r20
    3266:	9f 01       	movw	r18, r30
    3268:	a6 17       	cp	r26, r22
    326a:	b7 07       	cpc	r27, r23
    326c:	b9 f7       	brne	.-18     	; 0x325c <eepromSavePattern+0x102>
    326e:	9e 01       	movw	r18, r28
    3270:	27 5d       	subi	r18, 0xD7	; 215
    3272:	3f 4f       	sbci	r19, 0xFF	; 255
    3274:	de 01       	movw	r26, r28
    3276:	a0 52       	subi	r26, 0x20	; 32
    3278:	bf 4f       	sbci	r27, 0xFF	; 255
    327a:	fb 01       	movw	r30, r22
    327c:	41 91       	ld	r20, Z+
    327e:	bf 01       	movw	r22, r30
    3280:	f9 01       	movw	r30, r18
    3282:	41 93       	st	Z+, r20
    3284:	9f 01       	movw	r18, r30
    3286:	6a 17       	cp	r22, r26
    3288:	7b 07       	cpc	r23, r27
    328a:	b9 f7       	brne	.-18     	; 0x327a <eepromSavePattern+0x120>
    328c:	9e 01       	movw	r18, r28
    328e:	27 5c       	subi	r18, 0xC7	; 199
    3290:	3f 4f       	sbci	r19, 0xFF	; 255
    3292:	be 01       	movw	r22, r28
    3294:	60 51       	subi	r22, 0x10	; 16
    3296:	7f 4f       	sbci	r23, 0xFF	; 255
    3298:	4d 91       	ld	r20, X+
    329a:	f9 01       	movw	r30, r18
    329c:	41 93       	st	Z+, r20
    329e:	9f 01       	movw	r18, r30
    32a0:	a6 17       	cp	r26, r22
    32a2:	b7 07       	cpc	r27, r23
    32a4:	c9 f7       	brne	.-14     	; 0x3298 <eepromSavePattern+0x13e>
    32a6:	9e 01       	movw	r18, r28
    32a8:	27 5b       	subi	r18, 0xB7	; 183
    32aa:	3f 4f       	sbci	r19, 0xFF	; 255
    32ac:	de 01       	movw	r26, r28
    32ae:	b3 95       	inc	r27
    32b0:	fb 01       	movw	r30, r22
    32b2:	41 91       	ld	r20, Z+
    32b4:	bf 01       	movw	r22, r30
    32b6:	f9 01       	movw	r30, r18
    32b8:	41 93       	st	Z+, r20
    32ba:	9f 01       	movw	r18, r30
    32bc:	6a 17       	cp	r22, r26
    32be:	7b 07       	cpc	r23, r27
    32c0:	b9 f7       	brne	.-18     	; 0x32b0 <eepromSavePattern+0x156>
    32c2:	9e 01       	movw	r18, r28
    32c4:	27 5a       	subi	r18, 0xA7	; 167
    32c6:	3f 4f       	sbci	r19, 0xFF	; 255
    32c8:	be 01       	movw	r22, r28
    32ca:	60 5f       	subi	r22, 0xF0	; 240
    32cc:	7e 4f       	sbci	r23, 0xFE	; 254
    32ce:	4d 91       	ld	r20, X+
    32d0:	f9 01       	movw	r30, r18
    32d2:	41 93       	st	Z+, r20
    32d4:	9f 01       	movw	r18, r30
    32d6:	a6 17       	cp	r26, r22
    32d8:	b7 07       	cpc	r27, r23
    32da:	c9 f7       	brne	.-14     	; 0x32ce <eepromSavePattern+0x174>
    32dc:	de 01       	movw	r26, r28
    32de:	a7 59       	subi	r26, 0x97	; 151
    32e0:	bf 4f       	sbci	r27, 0xFF	; 255
    32e2:	5e 01       	movw	r10, r28
    32e4:	f0 ee       	ldi	r31, 0xE0	; 224
    32e6:	af 1a       	sub	r10, r31
    32e8:	fe ef       	ldi	r31, 0xFE	; 254
    32ea:	bf 0a       	sbc	r11, r31
    32ec:	fb 01       	movw	r30, r22
    32ee:	21 91       	ld	r18, Z+
    32f0:	bf 01       	movw	r22, r30
    32f2:	2d 93       	st	X+, r18
    32f4:	ea 15       	cp	r30, r10
    32f6:	fb 05       	cpc	r31, r11
    32f8:	c9 f7       	brne	.-14     	; 0x32ec <eepromSavePattern+0x192>
    32fa:	eb 96       	adiw	r28, 0x3b	; 59
    32fc:	9f af       	std	Y+63, r25	; 0x3f
    32fe:	eb 97       	sbiw	r28, 0x3b	; 59
    3300:	ec 96       	adiw	r28, 0x3c	; 60
    3302:	8f af       	std	Y+63, r24	; 0x3f
    3304:	ec 97       	sbiw	r28, 0x3c	; 60
    3306:	ce 58       	subi	r28, 0x8E	; 142
    3308:	de 4f       	sbci	r29, 0xFE	; 254
    330a:	88 81       	ld	r24, Y
    330c:	c2 57       	subi	r28, 0x72	; 114
    330e:	d1 40       	sbci	r29, 0x01	; 1
    3310:	ed 96       	adiw	r28, 0x3d	; 61
    3312:	8f af       	std	Y+63, r24	; 0x3f
    3314:	ed 97       	sbiw	r28, 0x3d	; 61
    3316:	85 2d       	mov	r24, r5
    3318:	c8 de       	rcall	.-624    	; 0x30aa <twi_start>
    331a:	81 30       	cpi	r24, 0x01	; 1
    331c:	81 f4       	brne	.+32     	; 0x333e <eepromSavePattern+0x1e4>
    331e:	84 e1       	ldi	r24, 0x14	; 20
    3320:	ec e0       	ldi	r30, 0x0C	; 12
    3322:	f2 e0       	ldi	r31, 0x02	; 2
    3324:	de 01       	movw	r26, r28
    3326:	af 57       	subi	r26, 0x7F	; 127
    3328:	bf 4f       	sbci	r27, 0xFF	; 255
    332a:	01 90       	ld	r0, Z+
    332c:	0d 92       	st	X+, r0
    332e:	8a 95       	dec	r24
    3330:	e1 f7       	brne	.-8      	; 0x332a <eepromSavePattern+0x1d0>
    3332:	63 e0       	ldi	r22, 0x03	; 3
    3334:	70 e0       	ldi	r23, 0x00	; 0
    3336:	ce 01       	movw	r24, r28
    3338:	8f 57       	subi	r24, 0x7F	; 127
    333a:	9f 4f       	sbci	r25, 0xFF	; 255
    333c:	27 d9       	rcall	.-3506   	; 0x258c <outputS>
    333e:	87 2d       	mov	r24, r7
    3340:	e4 de       	rcall	.-568    	; 0x310a <twi_write>
    3342:	46 2c       	mov	r4, r6
    3344:	86 2d       	mov	r24, r6
    3346:	e1 de       	rcall	.-574    	; 0x310a <twi_write>
    3348:	6e 01       	movw	r12, r28
    334a:	fd e7       	ldi	r31, 0x7D	; 125
    334c:	cf 0e       	add	r12, r31
    334e:	d1 1c       	adc	r13, r1
    3350:	78 01       	movw	r14, r16
    3352:	d7 01       	movw	r26, r14
    3354:	8d 91       	ld	r24, X+
    3356:	7d 01       	movw	r14, r26
    3358:	d8 de       	rcall	.-592    	; 0x310a <twi_write>
    335a:	ce 14       	cp	r12, r14
    335c:	df 04       	cpc	r13, r15
    335e:	c9 f7       	brne	.-14     	; 0x3352 <eepromSavePattern+0x1f8>
    3360:	cb de       	rcall	.-618    	; 0x30f8 <twi_stop>
    3362:	ef e1       	ldi	r30, 0x1F	; 31
    3364:	fe e4       	ldi	r31, 0x4E	; 78
    3366:	31 97       	sbiw	r30, 0x01	; 1
    3368:	f1 f7       	brne	.-4      	; 0x3366 <eepromSavePattern+0x20c>
    336a:	00 c0       	rjmp	.+0      	; 0x336c <eepromSavePattern+0x212>
    336c:	00 00       	nop
    336e:	9e 01       	movw	r18, r28
    3370:	20 5d       	subi	r18, 0xD0	; 208
    3372:	3e 4f       	sbci	r19, 0xFE	; 254
    3374:	f8 01       	movw	r30, r16
    3376:	d5 01       	movw	r26, r10
    3378:	8d 91       	ld	r24, X+
    337a:	5d 01       	movw	r10, r26
    337c:	81 93       	st	Z+, r24
    337e:	2a 17       	cp	r18, r26
    3380:	3b 07       	cpc	r19, r27
    3382:	c9 f7       	brne	.-14     	; 0x3376 <eepromSavePattern+0x21c>
    3384:	de 01       	movw	r26, r28
    3386:	91 96       	adiw	r26, 0x21	; 33
    3388:	f9 01       	movw	r30, r18
    338a:	81 91       	ld	r24, Z+
    338c:	9f 01       	movw	r18, r30
    338e:	f4 01       	movw	r30, r8
    3390:	81 93       	st	Z+, r24
    3392:	4f 01       	movw	r8, r30
    3394:	ae 17       	cp	r26, r30
    3396:	bf 07       	cpc	r27, r31
    3398:	b9 f7       	brne	.-18     	; 0x3388 <eepromSavePattern+0x22e>
    339a:	ce 01       	movw	r24, r28
    339c:	80 5c       	subi	r24, 0xC0	; 192
    339e:	9e 4f       	sbci	r25, 0xFE	; 254
    33a0:	ae 01       	movw	r20, r28
    33a2:	4f 5c       	subi	r20, 0xCF	; 207
    33a4:	5f 4f       	sbci	r21, 0xFF	; 255
    33a6:	fc 01       	movw	r30, r24
    33a8:	21 91       	ld	r18, Z+
    33aa:	cf 01       	movw	r24, r30
    33ac:	2d 93       	st	X+, r18
    33ae:	a4 17       	cp	r26, r20
    33b0:	b5 07       	cpc	r27, r21
    33b2:	c9 f7       	brne	.-14     	; 0x33a6 <eepromSavePattern+0x24c>
    33b4:	ce 01       	movw	r24, r28
    33b6:	80 5b       	subi	r24, 0xB0	; 176
    33b8:	9e 4f       	sbci	r25, 0xFE	; 254
    33ba:	de 01       	movw	r26, r28
    33bc:	af 5b       	subi	r26, 0xBF	; 191
    33be:	bf 4f       	sbci	r27, 0xFF	; 255
    33c0:	fc 01       	movw	r30, r24
    33c2:	21 91       	ld	r18, Z+
    33c4:	cf 01       	movw	r24, r30
    33c6:	fa 01       	movw	r30, r20
    33c8:	21 93       	st	Z+, r18
    33ca:	af 01       	movw	r20, r30
    33cc:	ea 17       	cp	r30, r26
    33ce:	fb 07       	cpc	r31, r27
    33d0:	b9 f7       	brne	.-18     	; 0x33c0 <eepromSavePattern+0x266>
    33d2:	fe 01       	movw	r30, r28
    33d4:	e0 5a       	subi	r30, 0xA0	; 160
    33d6:	fe 4f       	sbci	r31, 0xFE	; 254
    33d8:	9e 01       	movw	r18, r28
    33da:	20 59       	subi	r18, 0x90	; 144
    33dc:	3e 4f       	sbci	r19, 0xFE	; 254
    33de:	81 91       	ld	r24, Z+
    33e0:	8d 93       	st	X+, r24
    33e2:	2e 17       	cp	r18, r30
    33e4:	3f 07       	cpc	r19, r31
    33e6:	d9 f7       	brne	.-10     	; 0x33de <eepromSavePattern+0x284>
    33e8:	ae 01       	movw	r20, r28
    33ea:	4d 58       	subi	r20, 0x8D	; 141
    33ec:	5e 4f       	sbci	r21, 0xFE	; 254
    33ee:	ce 01       	movw	r24, r28
    33f0:	8f 5a       	subi	r24, 0xAF	; 175
    33f2:	9f 4f       	sbci	r25, 0xFF	; 255
    33f4:	de 01       	movw	r26, r28
    33f6:	ad 57       	subi	r26, 0x7D	; 125
    33f8:	be 4f       	sbci	r27, 0xFE	; 254
    33fa:	fa 01       	movw	r30, r20
    33fc:	21 91       	ld	r18, Z+
    33fe:	af 01       	movw	r20, r30
    3400:	fc 01       	movw	r30, r24
    3402:	21 93       	st	Z+, r18
    3404:	cf 01       	movw	r24, r30
    3406:	a4 17       	cp	r26, r20
    3408:	b5 07       	cpc	r27, r21
    340a:	b9 f7       	brne	.-18     	; 0x33fa <eepromSavePattern+0x2a0>
    340c:	ce 01       	movw	r24, r28
    340e:	8f 59       	subi	r24, 0x9F	; 159
    3410:	9f 4f       	sbci	r25, 0xFF	; 255
    3412:	ae 01       	movw	r20, r28
    3414:	4d 56       	subi	r20, 0x6D	; 109
    3416:	5e 4f       	sbci	r21, 0xFE	; 254
    3418:	2d 91       	ld	r18, X+
    341a:	fc 01       	movw	r30, r24
    341c:	21 93       	st	Z+, r18
    341e:	cf 01       	movw	r24, r30
    3420:	a4 17       	cp	r26, r20
    3422:	b5 07       	cpc	r27, r21
    3424:	c9 f7       	brne	.-14     	; 0x3418 <eepromSavePattern+0x2be>
    3426:	de 01       	movw	r26, r28
    3428:	af 58       	subi	r26, 0x8F	; 143
    342a:	bf 4f       	sbci	r27, 0xFF	; 255
    342c:	7e 01       	movw	r14, r28
    342e:	fd e5       	ldi	r31, 0x5D	; 93
    3430:	ef 1a       	sub	r14, r31
    3432:	fe ef       	ldi	r31, 0xFE	; 254
    3434:	ff 0a       	sbc	r15, r31
    3436:	fa 01       	movw	r30, r20
    3438:	81 91       	ld	r24, Z+
    343a:	af 01       	movw	r20, r30
    343c:	8d 93       	st	X+, r24
    343e:	ee 16       	cp	r14, r30
    3440:	ff 06       	cpc	r15, r31
    3442:	c9 f7       	brne	.-14     	; 0x3436 <eepromSavePattern+0x2dc>
    3444:	85 2d       	mov	r24, r5
    3446:	31 de       	rcall	.-926    	; 0x30aa <twi_start>
    3448:	81 30       	cpi	r24, 0x01	; 1
    344a:	81 f4       	brne	.+32     	; 0x346c <eepromSavePattern+0x312>
    344c:	84 e1       	ldi	r24, 0x14	; 20
    344e:	e1 e2       	ldi	r30, 0x21	; 33
    3450:	f2 e0       	ldi	r31, 0x02	; 2
    3452:	de 01       	movw	r26, r28
    3454:	af 57       	subi	r26, 0x7F	; 127
    3456:	bf 4f       	sbci	r27, 0xFF	; 255
    3458:	01 90       	ld	r0, Z+
    345a:	0d 92       	st	X+, r0
    345c:	8a 95       	dec	r24
    345e:	e1 f7       	brne	.-8      	; 0x3458 <eepromSavePattern+0x2fe>
    3460:	63 e0       	ldi	r22, 0x03	; 3
    3462:	70 e0       	ldi	r23, 0x00	; 0
    3464:	ce 01       	movw	r24, r28
    3466:	8f 57       	subi	r24, 0x7F	; 127
    3468:	9f 4f       	sbci	r25, 0xFF	; 255
    346a:	90 d8       	rcall	.-3808   	; 0x258c <outputS>
    346c:	c3 01       	movw	r24, r6
    346e:	80 58       	subi	r24, 0x80	; 128
    3470:	9f 4f       	sbci	r25, 0xFF	; 255
    3472:	89 2f       	mov	r24, r25
    3474:	4a de       	rcall	.-876    	; 0x310a <twi_write>
    3476:	80 e8       	ldi	r24, 0x80	; 128
    3478:	84 0d       	add	r24, r4
    347a:	47 de       	rcall	.-882    	; 0x310a <twi_write>
    347c:	6e 01       	movw	r12, r28
    347e:	f1 e8       	ldi	r31, 0x81	; 129
    3480:	cf 0e       	add	r12, r31
    3482:	d1 1c       	adc	r13, r1
    3484:	d8 01       	movw	r26, r16
    3486:	8d 91       	ld	r24, X+
    3488:	8d 01       	movw	r16, r26
    348a:	3f de       	rcall	.-898    	; 0x310a <twi_write>
    348c:	c0 16       	cp	r12, r16
    348e:	d1 06       	cpc	r13, r17
    3490:	c9 f7       	brne	.-14     	; 0x3484 <eepromSavePattern+0x32a>
    3492:	32 de       	rcall	.-924    	; 0x30f8 <twi_stop>
    3494:	ef e1       	ldi	r30, 0x1F	; 31
    3496:	fe e4       	ldi	r31, 0x4E	; 78
    3498:	31 97       	sbiw	r30, 0x01	; 1
    349a:	f1 f7       	brne	.-4      	; 0x3498 <eepromSavePattern+0x33e>
    349c:	00 c0       	rjmp	.+0      	; 0x349e <eepromSavePattern+0x344>
    349e:	00 00       	nop
    34a0:	85 2d       	mov	r24, r5
    34a2:	03 de       	rcall	.-1018   	; 0x30aa <twi_start>
    34a4:	81 30       	cpi	r24, 0x01	; 1
    34a6:	81 f4       	brne	.+32     	; 0x34c8 <eepromSavePattern+0x36e>
    34a8:	84 e1       	ldi	r24, 0x14	; 20
    34aa:	e6 e3       	ldi	r30, 0x36	; 54
    34ac:	f2 e0       	ldi	r31, 0x02	; 2
    34ae:	de 01       	movw	r26, r28
    34b0:	af 57       	subi	r26, 0x7F	; 127
    34b2:	bf 4f       	sbci	r27, 0xFF	; 255
    34b4:	01 90       	ld	r0, Z+
    34b6:	0d 92       	st	X+, r0
    34b8:	8a 95       	dec	r24
    34ba:	e1 f7       	brne	.-8      	; 0x34b4 <eepromSavePattern+0x35a>
    34bc:	63 e0       	ldi	r22, 0x03	; 3
    34be:	70 e0       	ldi	r23, 0x00	; 0
    34c0:	ce 01       	movw	r24, r28
    34c2:	8f 57       	subi	r24, 0x7F	; 127
    34c4:	9f 4f       	sbci	r25, 0xFF	; 255
    34c6:	62 d8       	rcall	.-3900   	; 0x258c <outputS>
    34c8:	73 94       	inc	r7
    34ca:	87 2d       	mov	r24, r7
    34cc:	1e de       	rcall	.-964    	; 0x310a <twi_write>
    34ce:	84 2d       	mov	r24, r4
    34d0:	1c de       	rcall	.-968    	; 0x310a <twi_write>
    34d2:	6e 01       	movw	r12, r28
    34d4:	2d ed       	ldi	r18, 0xDD	; 221
    34d6:	c2 1a       	sub	r12, r18
    34d8:	2d ef       	ldi	r18, 0xFD	; 253
    34da:	d2 0a       	sbc	r13, r18
    34dc:	d7 01       	movw	r26, r14
    34de:	1c 91       	ld	r17, X
    34e0:	11 96       	adiw	r26, 0x01	; 1
    34e2:	8c 91       	ld	r24, X
    34e4:	b2 e0       	ldi	r27, 0x02	; 2
    34e6:	eb 0e       	add	r14, r27
    34e8:	f1 1c       	adc	r15, r1
    34ea:	0f de       	rcall	.-994    	; 0x310a <twi_write>
    34ec:	81 2f       	mov	r24, r17
    34ee:	0d de       	rcall	.-998    	; 0x310a <twi_write>
    34f0:	ce 14       	cp	r12, r14
    34f2:	df 04       	cpc	r13, r15
    34f4:	99 f7       	brne	.-26     	; 0x34dc <eepromSavePattern+0x382>
    34f6:	00 de       	rcall	.-1024   	; 0x30f8 <twi_stop>
    34f8:	ef e1       	ldi	r30, 0x1F	; 31
    34fa:	fe e4       	ldi	r31, 0x4E	; 78
    34fc:	31 97       	sbiw	r30, 0x01	; 1
    34fe:	f1 f7       	brne	.-4      	; 0x34fc <eepromSavePattern+0x3a2>
    3500:	00 c0       	rjmp	.+0      	; 0x3502 <eepromSavePattern+0x3a8>
    3502:	00 00       	nop
    3504:	cc 56       	subi	r28, 0x6C	; 108
    3506:	df 4f       	sbci	r29, 0xFF	; 255
    3508:	0f b6       	in	r0, 0x3f	; 63
    350a:	f8 94       	cli
    350c:	de bf       	out	0x3e, r29	; 62
    350e:	0f be       	out	0x3f, r0	; 63
    3510:	cd bf       	out	0x3d, r28	; 61
    3512:	df 91       	pop	r29
    3514:	cf 91       	pop	r28
    3516:	1f 91       	pop	r17
    3518:	0f 91       	pop	r16
    351a:	ff 90       	pop	r15
    351c:	ef 90       	pop	r14
    351e:	df 90       	pop	r13
    3520:	cf 90       	pop	r12
    3522:	bf 90       	pop	r11
    3524:	af 90       	pop	r10
    3526:	9f 90       	pop	r9
    3528:	8f 90       	pop	r8
    352a:	7f 90       	pop	r7
    352c:	6f 90       	pop	r6
    352e:	5f 90       	pop	r5
    3530:	4f 90       	pop	r4
    3532:	08 95       	ret

00003534 <eepromLoadPattern>:
    3534:	8f 92       	push	r8
    3536:	9f 92       	push	r9
    3538:	af 92       	push	r10
    353a:	bf 92       	push	r11
    353c:	cf 92       	push	r12
    353e:	df 92       	push	r13
    3540:	ef 92       	push	r14
    3542:	ff 92       	push	r15
    3544:	0f 93       	push	r16
    3546:	1f 93       	push	r17
    3548:	cf 93       	push	r28
    354a:	df 93       	push	r29
    354c:	cd b7       	in	r28, 0x3d	; 61
    354e:	de b7       	in	r29, 0x3e	; 62
    3550:	c4 59       	subi	r28, 0x94	; 148
    3552:	d1 40       	sbci	r29, 0x01	; 1
    3554:	0f b6       	in	r0, 0x3f	; 63
    3556:	f8 94       	cli
    3558:	de bf       	out	0x3e, r29	; 62
    355a:	0f be       	out	0x3f, r0	; 63
    355c:	cd bf       	out	0x3d, r28	; 61
    355e:	7c 01       	movw	r14, r24
    3560:	86 2f       	mov	r24, r22
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	66 23       	and	r22, r22
    3566:	84 f0       	brlt	.+32     	; 0x3588 <eepromLoadPattern+0x54>
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	9c 01       	movw	r18, r24
    356c:	22 0f       	add	r18, r18
    356e:	33 1f       	adc	r19, r19
    3570:	82 0f       	add	r24, r18
    3572:	93 1f       	adc	r25, r19
    3574:	96 95       	lsr	r25
    3576:	98 2f       	mov	r25, r24
    3578:	88 27       	eor	r24, r24
    357a:	97 95       	ror	r25
    357c:	87 95       	ror	r24
    357e:	08 2f       	mov	r16, r24
    3580:	d9 2e       	mov	r13, r25
    3582:	80 ea       	ldi	r24, 0xA0	; 160
    3584:	11 ea       	ldi	r17, 0xA1	; 161
    3586:	10 c0       	rjmp	.+32     	; 0x35a8 <eepromLoadPattern+0x74>
    3588:	80 58       	subi	r24, 0x80	; 128
    358a:	91 09       	sbc	r25, r1
    358c:	9c 01       	movw	r18, r24
    358e:	22 0f       	add	r18, r18
    3590:	33 1f       	adc	r19, r19
    3592:	82 0f       	add	r24, r18
    3594:	93 1f       	adc	r25, r19
    3596:	96 95       	lsr	r25
    3598:	98 2f       	mov	r25, r24
    359a:	88 27       	eor	r24, r24
    359c:	97 95       	ror	r25
    359e:	87 95       	ror	r24
    35a0:	08 2f       	mov	r16, r24
    35a2:	d9 2e       	mov	r13, r25
    35a4:	88 ea       	ldi	r24, 0xA8	; 168
    35a6:	19 ea       	ldi	r17, 0xA9	; 169
    35a8:	80 dd       	rcall	.-1280   	; 0x30aa <twi_start>
    35aa:	81 30       	cpi	r24, 0x01	; 1
    35ac:	31 f4       	brne	.+12     	; 0x35ba <eepromLoadPattern+0x86>
    35ae:	63 e0       	ldi	r22, 0x03	; 3
    35b0:	70 e0       	ldi	r23, 0x00	; 0
    35b2:	8d e7       	ldi	r24, 0x7D	; 125
    35b4:	93 e0       	ldi	r25, 0x03	; 3
    35b6:	0e 94 c6 12 	call	0x258c	; 0x258c <outputS>
    35ba:	8d 2d       	mov	r24, r13
    35bc:	a6 dd       	rcall	.-1204   	; 0x310a <twi_write>
    35be:	80 2f       	mov	r24, r16
    35c0:	a4 dd       	rcall	.-1208   	; 0x310a <twi_write>
    35c2:	81 2f       	mov	r24, r17
    35c4:	72 dd       	rcall	.-1308   	; 0x30aa <twi_start>
    35c6:	81 30       	cpi	r24, 0x01	; 1
    35c8:	09 f0       	breq	.+2      	; 0x35cc <eepromLoadPattern+0x98>
    35ca:	48 c1       	rjmp	.+656    	; 0x385c <eepromLoadPattern+0x328>
    35cc:	84 e1       	ldi	r24, 0x14	; 20
    35ce:	eb e4       	ldi	r30, 0x4B	; 75
    35d0:	f2 e0       	ldi	r31, 0x02	; 2
    35d2:	de 01       	movw	r26, r28
    35d4:	af 57       	subi	r26, 0x7F	; 127
    35d6:	be 4f       	sbci	r27, 0xFE	; 254
    35d8:	01 90       	ld	r0, Z+
    35da:	0d 92       	st	X+, r0
    35dc:	8a 95       	dec	r24
    35de:	e1 f7       	brne	.-8      	; 0x35d8 <eepromLoadPattern+0xa4>
    35e0:	63 e0       	ldi	r22, 0x03	; 3
    35e2:	70 e0       	ldi	r23, 0x00	; 0
    35e4:	ce 01       	movw	r24, r28
    35e6:	8f 57       	subi	r24, 0x7F	; 127
    35e8:	9e 4f       	sbci	r25, 0xFE	; 254
    35ea:	0e 94 c6 12 	call	0x258c	; 0x258c <outputS>
    35ee:	36 c1       	rjmp	.+620    	; 0x385c <eepromLoadPattern+0x328>
    35f0:	9e dd       	rcall	.-1220   	; 0x312e <twi_readAck>
    35f2:	d8 01       	movw	r26, r16
    35f4:	8d 93       	st	X+, r24
    35f6:	8d 01       	movw	r16, r26
    35f8:	ac 15       	cp	r26, r12
    35fa:	bd 05       	cpc	r27, r13
    35fc:	c9 f7       	brne	.-14     	; 0x35f0 <eepromLoadPattern+0xbc>
    35fe:	a2 dd       	rcall	.-1212   	; 0x3144 <twi_readNak>
    3600:	c0 58       	subi	r28, 0x80	; 128
    3602:	de 4f       	sbci	r29, 0xFE	; 254
    3604:	88 83       	st	Y, r24
    3606:	c0 58       	subi	r28, 0x80	; 128
    3608:	d1 40       	sbci	r29, 0x01	; 1
    360a:	76 dd       	rcall	.-1300   	; 0x30f8 <twi_stop>
    360c:	87 01       	movw	r16, r14
    360e:	4e 01       	movw	r8, r28
    3610:	b9 e0       	ldi	r27, 0x09	; 9
    3612:	8b 0e       	add	r8, r27
    3614:	91 1c       	adc	r9, r1
    3616:	f7 01       	movw	r30, r14
    3618:	d5 01       	movw	r26, r10
    361a:	8d 91       	ld	r24, X+
    361c:	5d 01       	movw	r10, r26
    361e:	81 93       	st	Z+, r24
    3620:	a8 15       	cp	r26, r8
    3622:	b9 05       	cpc	r27, r9
    3624:	c9 f7       	brne	.-14     	; 0x3618 <eepromLoadPattern+0xe4>
    3626:	d1 2c       	mov	r13, r1
    3628:	f4 01       	movw	r30, r8
    362a:	81 91       	ld	r24, Z+
    362c:	4f 01       	movw	r8, r30
    362e:	f8 01       	movw	r30, r16
    3630:	80 87       	std	Z+8, r24	; 0x08
    3632:	4d 2d       	mov	r20, r13
    3634:	60 81       	ld	r22, Z
    3636:	0f 5f       	subi	r16, 0xFF	; 255
    3638:	1f 4f       	sbci	r17, 0xFF	; 255
    363a:	08 db       	rcall	.-2544   	; 0x2c4c <setOutputVolume>
    363c:	d3 94       	inc	r13
    363e:	f8 e0       	ldi	r31, 0x08	; 8
    3640:	df 12       	cpse	r13, r31
    3642:	f2 cf       	rjmp	.-28     	; 0x3628 <eepromLoadPattern+0xf4>
    3644:	5e 01       	movw	r10, r28
    3646:	81 e1       	ldi	r24, 0x11	; 17
    3648:	a8 0e       	add	r10, r24
    364a:	b1 1c       	adc	r11, r1
    364c:	67 01       	movw	r12, r14
    364e:	90 e1       	ldi	r25, 0x10	; 16
    3650:	c9 0e       	add	r12, r25
    3652:	d1 1c       	adc	r13, r1
    3654:	10 e0       	ldi	r17, 0x00	; 0
    3656:	d5 01       	movw	r26, r10
    3658:	4d 91       	ld	r20, X+
    365a:	5d 01       	movw	r10, r26
    365c:	f6 01       	movw	r30, r12
    365e:	41 93       	st	Z+, r20
    3660:	6f 01       	movw	r12, r30
    3662:	60 e0       	ldi	r22, 0x00	; 0
    3664:	81 2f       	mov	r24, r17
    3666:	69 db       	rcall	.-2350   	; 0x2d3a <outputSampleRate>
    3668:	1f 5f       	subi	r17, 0xFF	; 255
    366a:	18 30       	cpi	r17, 0x08	; 8
    366c:	a1 f7       	brne	.-24     	; 0x3656 <eepromLoadPattern+0x122>
    366e:	fe 01       	movw	r30, r28
    3670:	79 96       	adiw	r30, 0x19	; 25
    3672:	c7 01       	movw	r24, r14
    3674:	48 96       	adiw	r24, 0x18	; 24
    3676:	ae 01       	movw	r20, r28
    3678:	47 5d       	subi	r20, 0xD7	; 215
    367a:	5f 4f       	sbci	r21, 0xFF	; 255
    367c:	21 91       	ld	r18, Z+
    367e:	dc 01       	movw	r26, r24
    3680:	2d 93       	st	X+, r18
    3682:	cd 01       	movw	r24, r26
    3684:	e4 17       	cp	r30, r20
    3686:	f5 07       	cpc	r31, r21
    3688:	c9 f7       	brne	.-14     	; 0x367c <eepromLoadPattern+0x148>
    368a:	57 01       	movw	r10, r14
    368c:	b8 e2       	ldi	r27, 0x28	; 40
    368e:	ab 0e       	add	r10, r27
    3690:	b1 1c       	adc	r11, r1
    3692:	de 01       	movw	r26, r28
    3694:	d9 96       	adiw	r26, 0x39	; 57
    3696:	c5 01       	movw	r24, r10
    3698:	fa 01       	movw	r30, r20
    369a:	21 91       	ld	r18, Z+
    369c:	af 01       	movw	r20, r30
    369e:	fc 01       	movw	r30, r24
    36a0:	21 93       	st	Z+, r18
    36a2:	cf 01       	movw	r24, r30
    36a4:	4a 17       	cp	r20, r26
    36a6:	5b 07       	cpc	r21, r27
    36a8:	b9 f7       	brne	.-18     	; 0x3698 <eepromLoadPattern+0x164>
    36aa:	c7 01       	movw	r24, r14
    36ac:	c8 96       	adiw	r24, 0x38	; 56
    36ae:	ae 01       	movw	r20, r28
    36b0:	47 5b       	subi	r20, 0xB7	; 183
    36b2:	5f 4f       	sbci	r21, 0xFF	; 255
    36b4:	2d 91       	ld	r18, X+
    36b6:	fc 01       	movw	r30, r24
    36b8:	21 93       	st	Z+, r18
    36ba:	cf 01       	movw	r24, r30
    36bc:	a4 17       	cp	r26, r20
    36be:	b5 07       	cpc	r27, r21
    36c0:	c9 f7       	brne	.-14     	; 0x36b4 <eepromLoadPattern+0x180>
    36c2:	c7 01       	movw	r24, r14
    36c4:	88 5b       	subi	r24, 0xB8	; 184
    36c6:	9f 4f       	sbci	r25, 0xFF	; 255
    36c8:	de 01       	movw	r26, r28
    36ca:	a7 5a       	subi	r26, 0xA7	; 167
    36cc:	bf 4f       	sbci	r27, 0xFF	; 255
    36ce:	fa 01       	movw	r30, r20
    36d0:	21 91       	ld	r18, Z+
    36d2:	af 01       	movw	r20, r30
    36d4:	fc 01       	movw	r30, r24
    36d6:	21 93       	st	Z+, r18
    36d8:	cf 01       	movw	r24, r30
    36da:	4a 17       	cp	r20, r26
    36dc:	5b 07       	cpc	r21, r27
    36de:	b9 f7       	brne	.-18     	; 0x36ce <eepromLoadPattern+0x19a>
    36e0:	c7 01       	movw	r24, r14
    36e2:	88 5a       	subi	r24, 0xA8	; 168
    36e4:	9f 4f       	sbci	r25, 0xFF	; 255
    36e6:	ae 01       	movw	r20, r28
    36e8:	47 59       	subi	r20, 0x97	; 151
    36ea:	5f 4f       	sbci	r21, 0xFF	; 255
    36ec:	2d 91       	ld	r18, X+
    36ee:	fc 01       	movw	r30, r24
    36f0:	21 93       	st	Z+, r18
    36f2:	cf 01       	movw	r24, r30
    36f4:	a4 17       	cp	r26, r20
    36f6:	b5 07       	cpc	r27, r21
    36f8:	c9 f7       	brne	.-14     	; 0x36ec <eepromLoadPattern+0x1b8>
    36fa:	d7 01       	movw	r26, r14
    36fc:	a8 59       	subi	r26, 0x98	; 152
    36fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3700:	9e 01       	movw	r18, r28
    3702:	27 58       	subi	r18, 0x87	; 135
    3704:	3f 4f       	sbci	r19, 0xFF	; 255
    3706:	fa 01       	movw	r30, r20
    3708:	81 91       	ld	r24, Z+
    370a:	af 01       	movw	r20, r30
    370c:	8d 93       	st	X+, r24
    370e:	e2 17       	cp	r30, r18
    3710:	f3 07       	cpc	r31, r19
    3712:	c9 f7       	brne	.-14     	; 0x3706 <eepromLoadPattern+0x1d2>
    3714:	f7 01       	movw	r30, r14
    3716:	e8 53       	subi	r30, 0x38	; 56
    3718:	ff 4f       	sbci	r31, 0xFF	; 255
    371a:	eb 96       	adiw	r28, 0x3b	; 59
    371c:	8f ad       	ldd	r24, Y+63	; 0x3f
    371e:	eb 97       	sbiw	r28, 0x3b	; 59
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	98 2f       	mov	r25, r24
    3724:	88 27       	eor	r24, r24
    3726:	ec 96       	adiw	r28, 0x3c	; 60
    3728:	2f ad       	ldd	r18, Y+63	; 0x3f
    372a:	ec 97       	sbiw	r28, 0x3c	; 60
    372c:	82 2b       	or	r24, r18
    372e:	91 83       	std	Z+1, r25	; 0x01
    3730:	80 83       	st	Z, r24
    3732:	ed 96       	adiw	r28, 0x3d	; 61
    3734:	8f ad       	ldd	r24, Y+63	; 0x3f
    3736:	ed 97       	sbiw	r28, 0x3d	; 61
    3738:	32 96       	adiw	r30, 0x02	; 2
    373a:	80 83       	st	Z, r24
    373c:	ae 01       	movw	r20, r28
    373e:	4f 57       	subi	r20, 0x7F	; 127
    3740:	5f 4f       	sbci	r21, 0xFF	; 255
    3742:	c7 01       	movw	r24, r14
    3744:	88 58       	subi	r24, 0x88	; 136
    3746:	9f 4f       	sbci	r25, 0xFF	; 255
    3748:	fe 01       	movw	r30, r28
    374a:	ef 56       	subi	r30, 0x6F	; 111
    374c:	ff 4f       	sbci	r31, 0xFF	; 255
    374e:	da 01       	movw	r26, r20
    3750:	2d 91       	ld	r18, X+
    3752:	ad 01       	movw	r20, r26
    3754:	dc 01       	movw	r26, r24
    3756:	2d 93       	st	X+, r18
    3758:	cd 01       	movw	r24, r26
    375a:	e4 17       	cp	r30, r20
    375c:	f5 07       	cpc	r31, r21
    375e:	b9 f7       	brne	.-18     	; 0x374e <eepromLoadPattern+0x21a>
    3760:	c7 01       	movw	r24, r14
    3762:	88 57       	subi	r24, 0x78	; 120
    3764:	9f 4f       	sbci	r25, 0xFF	; 255
    3766:	ae 01       	movw	r20, r28
    3768:	4f 55       	subi	r20, 0x5F	; 95
    376a:	5f 4f       	sbci	r21, 0xFF	; 255
    376c:	21 91       	ld	r18, Z+
    376e:	dc 01       	movw	r26, r24
    3770:	2d 93       	st	X+, r18
    3772:	cd 01       	movw	r24, r26
    3774:	4e 17       	cp	r20, r30
    3776:	5f 07       	cpc	r21, r31
    3778:	c9 f7       	brne	.-14     	; 0x376c <eepromLoadPattern+0x238>
    377a:	87 01       	movw	r16, r14
    377c:	08 56       	subi	r16, 0x68	; 104
    377e:	1f 4f       	sbci	r17, 0xFF	; 255
    3780:	4e 01       	movw	r8, r28
    3782:	b1 eb       	ldi	r27, 0xB1	; 177
    3784:	8b 0e       	add	r8, r27
    3786:	91 1c       	adc	r9, r1
    3788:	f8 01       	movw	r30, r16
    378a:	da 01       	movw	r26, r20
    378c:	8d 91       	ld	r24, X+
    378e:	ad 01       	movw	r20, r26
    3790:	81 93       	st	Z+, r24
    3792:	8a 16       	cp	r8, r26
    3794:	9b 06       	cpc	r9, r27
    3796:	c9 f7       	brne	.-14     	; 0x378a <eepromLoadPattern+0x256>
    3798:	6e 01       	movw	r12, r28
    379a:	b1 ec       	ldi	r27, 0xC1	; 193
    379c:	cb 0e       	add	r12, r27
    379e:	d1 1c       	adc	r13, r1
    37a0:	f4 01       	movw	r30, r8
    37a2:	81 91       	ld	r24, Z+
    37a4:	4f 01       	movw	r8, r30
    37a6:	f8 01       	movw	r30, r16
    37a8:	80 8b       	std	Z+16, r24	; 0x10
    37aa:	d5 01       	movw	r26, r10
    37ac:	2d 91       	ld	r18, X+
    37ae:	5d 01       	movw	r10, r26
    37b0:	1f 96       	adiw	r26, 0x0f	; 15
    37b2:	4c 91       	ld	r20, X
    37b4:	60 81       	ld	r22, Z
    37b6:	0f 5f       	subi	r16, 0xFF	; 255
    37b8:	1f 4f       	sbci	r17, 0xFF	; 255
    37ba:	6c da       	rcall	.-2856   	; 0x2c94 <setTrackVolume>
    37bc:	c8 14       	cp	r12, r8
    37be:	d9 04       	cpc	r13, r9
    37c0:	79 f7       	brne	.-34     	; 0x37a0 <eepromLoadPattern+0x26c>
    37c2:	97 01       	movw	r18, r14
    37c4:	28 54       	subi	r18, 0x48	; 72
    37c6:	3f 4f       	sbci	r19, 0xFF	; 255
    37c8:	de 01       	movw	r26, r28
    37ca:	af 52       	subi	r26, 0x2F	; 47
    37cc:	bf 4f       	sbci	r27, 0xFF	; 255
    37ce:	f6 01       	movw	r30, r12
    37d0:	81 91       	ld	r24, Z+
    37d2:	6f 01       	movw	r12, r30
    37d4:	f9 01       	movw	r30, r18
    37d6:	81 93       	st	Z+, r24
    37d8:	9f 01       	movw	r18, r30
    37da:	ca 16       	cp	r12, r26
    37dc:	db 06       	cpc	r13, r27
    37de:	b9 f7       	brne	.-18     	; 0x37ce <eepromLoadPattern+0x29a>
    37e0:	c7 01       	movw	r24, r14
    37e2:	85 53       	subi	r24, 0x35	; 53
    37e4:	9f 4f       	sbci	r25, 0xFF	; 255
    37e6:	ae 01       	movw	r20, r28
    37e8:	4f 51       	subi	r20, 0x1F	; 31
    37ea:	5f 4f       	sbci	r21, 0xFF	; 255
    37ec:	2d 91       	ld	r18, X+
    37ee:	fc 01       	movw	r30, r24
    37f0:	21 93       	st	Z+, r18
    37f2:	cf 01       	movw	r24, r30
    37f4:	4a 17       	cp	r20, r26
    37f6:	5b 07       	cpc	r21, r27
    37f8:	c9 f7       	brne	.-14     	; 0x37ec <eepromLoadPattern+0x2b8>
    37fa:	c7 01       	movw	r24, r14
    37fc:	85 52       	subi	r24, 0x25	; 37
    37fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3800:	be 01       	movw	r22, r28
    3802:	6f 50       	subi	r22, 0x0F	; 15
    3804:	7f 4f       	sbci	r23, 0xFF	; 255
    3806:	da 01       	movw	r26, r20
    3808:	2d 91       	ld	r18, X+
    380a:	ad 01       	movw	r20, r26
    380c:	fc 01       	movw	r30, r24
    380e:	21 93       	st	Z+, r18
    3810:	cf 01       	movw	r24, r30
    3812:	a6 17       	cp	r26, r22
    3814:	b7 07       	cpc	r27, r23
    3816:	b9 f7       	brne	.-18     	; 0x3806 <eepromLoadPattern+0x2d2>
    3818:	c7 01       	movw	r24, r14
    381a:	85 51       	subi	r24, 0x15	; 21
    381c:	9f 4f       	sbci	r25, 0xFF	; 255
    381e:	fe 01       	movw	r30, r28
    3820:	ef 5f       	subi	r30, 0xFF	; 255
    3822:	fe 4f       	sbci	r31, 0xFE	; 254
    3824:	db 01       	movw	r26, r22
    3826:	2d 91       	ld	r18, X+
    3828:	bd 01       	movw	r22, r26
    382a:	dc 01       	movw	r26, r24
    382c:	2d 93       	st	X+, r18
    382e:	cd 01       	movw	r24, r26
    3830:	e6 17       	cp	r30, r22
    3832:	f7 07       	cpc	r31, r23
    3834:	b9 f7       	brne	.-18     	; 0x3824 <eepromLoadPattern+0x2f0>
    3836:	d7 01       	movw	r26, r14
    3838:	a5 50       	subi	r26, 0x05	; 5
    383a:	bf 4f       	sbci	r27, 0xFF	; 255
    383c:	ae 01       	movw	r20, r28
    383e:	4f 57       	subi	r20, 0x7F	; 127
    3840:	5e 4f       	sbci	r21, 0xFE	; 254
    3842:	80 81       	ld	r24, Z
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	98 2f       	mov	r25, r24
    3848:	88 27       	eor	r24, r24
    384a:	21 81       	ldd	r18, Z+1	; 0x01
    384c:	82 2b       	or	r24, r18
    384e:	8d 93       	st	X+, r24
    3850:	9d 93       	st	X+, r25
    3852:	32 96       	adiw	r30, 0x02	; 2
    3854:	4e 17       	cp	r20, r30
    3856:	5f 07       	cpc	r21, r31
    3858:	a1 f7       	brne	.-24     	; 0x3842 <eepromLoadPattern+0x30e>
    385a:	0a c0       	rjmp	.+20     	; 0x3870 <eepromLoadPattern+0x33c>
    385c:	fe 01       	movw	r30, r28
    385e:	31 96       	adiw	r30, 0x01	; 1
    3860:	5f 01       	movw	r10, r30
    3862:	6e 01       	movw	r12, r28
    3864:	f0 e8       	ldi	r31, 0x80	; 128
    3866:	cf 1a       	sub	r12, r31
    3868:	fe ef       	ldi	r31, 0xFE	; 254
    386a:	df 0a       	sbc	r13, r31
    386c:	85 01       	movw	r16, r10
    386e:	c0 ce       	rjmp	.-640    	; 0x35f0 <eepromLoadPattern+0xbc>
    3870:	cc 56       	subi	r28, 0x6C	; 108
    3872:	de 4f       	sbci	r29, 0xFE	; 254
    3874:	0f b6       	in	r0, 0x3f	; 63
    3876:	f8 94       	cli
    3878:	de bf       	out	0x3e, r29	; 62
    387a:	0f be       	out	0x3f, r0	; 63
    387c:	cd bf       	out	0x3d, r28	; 61
    387e:	df 91       	pop	r29
    3880:	cf 91       	pop	r28
    3882:	1f 91       	pop	r17
    3884:	0f 91       	pop	r16
    3886:	ff 90       	pop	r15
    3888:	ef 90       	pop	r14
    388a:	df 90       	pop	r13
    388c:	cf 90       	pop	r12
    388e:	bf 90       	pop	r11
    3890:	af 90       	pop	r10
    3892:	9f 90       	pop	r9
    3894:	8f 90       	pop	r8
    3896:	08 95       	ret

00003898 <globalWrite>:

//this happens when save button is pressed on global menu. 
void globalWrite(Globals *currentGlobals)
{
    3898:	cf 93       	push	r28
    389a:	df 93       	push	r29
    389c:	ec 01       	movw	r28, r24
	eeprom_write_byte(0,currentGlobals->midiChannel); //this may be wrong, but it does get rid of the warning. 
    389e:	6c 85       	ldd	r22, Y+12	; 0x0c
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	46 d2       	rcall	.+1164   	; 0x3d32 <eeprom_write_byte>
	eeprom_write_block(currentGlobals->midiTrackNote,1,16);
    38a6:	40 e1       	ldi	r20, 0x10	; 16
    38a8:	50 e0       	ldi	r21, 0x00	; 0
    38aa:	61 e0       	ldi	r22, 0x01	; 1
    38ac:	70 e0       	ldi	r23, 0x00	; 0
    38ae:	ce 01       	movw	r24, r28
    38b0:	0d 96       	adiw	r24, 0x0d	; 13
    38b2:	36 d2       	rcall	.+1132   	; 0x3d20 <eeprom_write_block>
}
    38b4:	df 91       	pop	r29
    38b6:	cf 91       	pop	r28
    38b8:	08 95       	ret

000038ba <globalLoad>:
//This happens at startup only, in function "initGlobals"

void globalLoad(Globals *currentGlobals, uint8_t factoryReset)
{
    38ba:	cf 93       	push	r28
    38bc:	df 93       	push	r29
	//we need to load all of the global midi settings here. 
	//we can also check the factory reset bit here. 
	//if the program has not gone through the initial state, and had the internal eeprom formatted, then this will return garbage. 
	if(factoryReset==0)
    38be:	61 11       	cpse	r22, r1
    38c0:	0c c0       	rjmp	.+24     	; 0x38da <globalLoad+0x20>
    38c2:	ec 01       	movw	r28, r24
	{
		currentGlobals->midiChannel = eeprom_read_byte(0);
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	23 d2       	rcall	.+1094   	; 0x3d10 <eeprom_read_byte>
    38ca:	8c 87       	std	Y+12, r24	; 0x0c
		eeprom_read_block(currentGlobals->midiTrackNote,1,16);
    38cc:	40 e1       	ldi	r20, 0x10	; 16
    38ce:	50 e0       	ldi	r21, 0x00	; 0
    38d0:	61 e0       	ldi	r22, 0x01	; 1
    38d2:	70 e0       	ldi	r23, 0x00	; 0
    38d4:	ce 01       	movw	r24, r28
    38d6:	0d 96       	adiw	r24, 0x0d	; 13
    38d8:	0b d2       	rcall	.+1046   	; 0x3cf0 <eeprom_read_block>
	}
}
    38da:	df 91       	pop	r29
    38dc:	cf 91       	pop	r28
    38de:	08 95       	ret

000038e0 <__subsf3>:
    38e0:	50 58       	subi	r21, 0x80	; 128

000038e2 <__addsf3>:
    38e2:	bb 27       	eor	r27, r27
    38e4:	aa 27       	eor	r26, r26
    38e6:	0e d0       	rcall	.+28     	; 0x3904 <__addsf3x>
    38e8:	4d c1       	rjmp	.+666    	; 0x3b84 <__fp_round>
    38ea:	3e d1       	rcall	.+636    	; 0x3b68 <__fp_pscA>
    38ec:	30 f0       	brcs	.+12     	; 0x38fa <__addsf3+0x18>
    38ee:	43 d1       	rcall	.+646    	; 0x3b76 <__fp_pscB>
    38f0:	20 f0       	brcs	.+8      	; 0x38fa <__addsf3+0x18>
    38f2:	31 f4       	brne	.+12     	; 0x3900 <__addsf3+0x1e>
    38f4:	9f 3f       	cpi	r25, 0xFF	; 255
    38f6:	11 f4       	brne	.+4      	; 0x38fc <__addsf3+0x1a>
    38f8:	1e f4       	brtc	.+6      	; 0x3900 <__addsf3+0x1e>
    38fa:	33 c1       	rjmp	.+614    	; 0x3b62 <__fp_nan>
    38fc:	0e f4       	brtc	.+2      	; 0x3900 <__addsf3+0x1e>
    38fe:	e0 95       	com	r30
    3900:	e7 fb       	bst	r30, 7
    3902:	29 c1       	rjmp	.+594    	; 0x3b56 <__fp_inf>

00003904 <__addsf3x>:
    3904:	e9 2f       	mov	r30, r25
    3906:	4f d1       	rcall	.+670    	; 0x3ba6 <__fp_split3>
    3908:	80 f3       	brcs	.-32     	; 0x38ea <__addsf3+0x8>
    390a:	ba 17       	cp	r27, r26
    390c:	62 07       	cpc	r22, r18
    390e:	73 07       	cpc	r23, r19
    3910:	84 07       	cpc	r24, r20
    3912:	95 07       	cpc	r25, r21
    3914:	18 f0       	brcs	.+6      	; 0x391c <__addsf3x+0x18>
    3916:	71 f4       	brne	.+28     	; 0x3934 <__addsf3x+0x30>
    3918:	9e f5       	brtc	.+102    	; 0x3980 <__addsf3x+0x7c>
    391a:	67 c1       	rjmp	.+718    	; 0x3bea <__fp_zero>
    391c:	0e f4       	brtc	.+2      	; 0x3920 <__addsf3x+0x1c>
    391e:	e0 95       	com	r30
    3920:	0b 2e       	mov	r0, r27
    3922:	ba 2f       	mov	r27, r26
    3924:	a0 2d       	mov	r26, r0
    3926:	0b 01       	movw	r0, r22
    3928:	b9 01       	movw	r22, r18
    392a:	90 01       	movw	r18, r0
    392c:	0c 01       	movw	r0, r24
    392e:	ca 01       	movw	r24, r20
    3930:	a0 01       	movw	r20, r0
    3932:	11 24       	eor	r1, r1
    3934:	ff 27       	eor	r31, r31
    3936:	59 1b       	sub	r21, r25
    3938:	99 f0       	breq	.+38     	; 0x3960 <__addsf3x+0x5c>
    393a:	59 3f       	cpi	r21, 0xF9	; 249
    393c:	50 f4       	brcc	.+20     	; 0x3952 <__addsf3x+0x4e>
    393e:	50 3e       	cpi	r21, 0xE0	; 224
    3940:	68 f1       	brcs	.+90     	; 0x399c <__addsf3x+0x98>
    3942:	1a 16       	cp	r1, r26
    3944:	f0 40       	sbci	r31, 0x00	; 0
    3946:	a2 2f       	mov	r26, r18
    3948:	23 2f       	mov	r18, r19
    394a:	34 2f       	mov	r19, r20
    394c:	44 27       	eor	r20, r20
    394e:	58 5f       	subi	r21, 0xF8	; 248
    3950:	f3 cf       	rjmp	.-26     	; 0x3938 <__addsf3x+0x34>
    3952:	46 95       	lsr	r20
    3954:	37 95       	ror	r19
    3956:	27 95       	ror	r18
    3958:	a7 95       	ror	r26
    395a:	f0 40       	sbci	r31, 0x00	; 0
    395c:	53 95       	inc	r21
    395e:	c9 f7       	brne	.-14     	; 0x3952 <__addsf3x+0x4e>
    3960:	7e f4       	brtc	.+30     	; 0x3980 <__addsf3x+0x7c>
    3962:	1f 16       	cp	r1, r31
    3964:	ba 0b       	sbc	r27, r26
    3966:	62 0b       	sbc	r22, r18
    3968:	73 0b       	sbc	r23, r19
    396a:	84 0b       	sbc	r24, r20
    396c:	ba f0       	brmi	.+46     	; 0x399c <__addsf3x+0x98>
    396e:	91 50       	subi	r25, 0x01	; 1
    3970:	a1 f0       	breq	.+40     	; 0x399a <__addsf3x+0x96>
    3972:	ff 0f       	add	r31, r31
    3974:	bb 1f       	adc	r27, r27
    3976:	66 1f       	adc	r22, r22
    3978:	77 1f       	adc	r23, r23
    397a:	88 1f       	adc	r24, r24
    397c:	c2 f7       	brpl	.-16     	; 0x396e <__addsf3x+0x6a>
    397e:	0e c0       	rjmp	.+28     	; 0x399c <__addsf3x+0x98>
    3980:	ba 0f       	add	r27, r26
    3982:	62 1f       	adc	r22, r18
    3984:	73 1f       	adc	r23, r19
    3986:	84 1f       	adc	r24, r20
    3988:	48 f4       	brcc	.+18     	; 0x399c <__addsf3x+0x98>
    398a:	87 95       	ror	r24
    398c:	77 95       	ror	r23
    398e:	67 95       	ror	r22
    3990:	b7 95       	ror	r27
    3992:	f7 95       	ror	r31
    3994:	9e 3f       	cpi	r25, 0xFE	; 254
    3996:	08 f0       	brcs	.+2      	; 0x399a <__addsf3x+0x96>
    3998:	b3 cf       	rjmp	.-154    	; 0x3900 <__addsf3+0x1e>
    399a:	93 95       	inc	r25
    399c:	88 0f       	add	r24, r24
    399e:	08 f0       	brcs	.+2      	; 0x39a2 <__addsf3x+0x9e>
    39a0:	99 27       	eor	r25, r25
    39a2:	ee 0f       	add	r30, r30
    39a4:	97 95       	ror	r25
    39a6:	87 95       	ror	r24
    39a8:	08 95       	ret

000039aa <__divsf3>:
    39aa:	0c d0       	rcall	.+24     	; 0x39c4 <__divsf3x>
    39ac:	eb c0       	rjmp	.+470    	; 0x3b84 <__fp_round>
    39ae:	e3 d0       	rcall	.+454    	; 0x3b76 <__fp_pscB>
    39b0:	40 f0       	brcs	.+16     	; 0x39c2 <__divsf3+0x18>
    39b2:	da d0       	rcall	.+436    	; 0x3b68 <__fp_pscA>
    39b4:	30 f0       	brcs	.+12     	; 0x39c2 <__divsf3+0x18>
    39b6:	21 f4       	brne	.+8      	; 0x39c0 <__divsf3+0x16>
    39b8:	5f 3f       	cpi	r21, 0xFF	; 255
    39ba:	19 f0       	breq	.+6      	; 0x39c2 <__divsf3+0x18>
    39bc:	cc c0       	rjmp	.+408    	; 0x3b56 <__fp_inf>
    39be:	51 11       	cpse	r21, r1
    39c0:	15 c1       	rjmp	.+554    	; 0x3bec <__fp_szero>
    39c2:	cf c0       	rjmp	.+414    	; 0x3b62 <__fp_nan>

000039c4 <__divsf3x>:
    39c4:	f0 d0       	rcall	.+480    	; 0x3ba6 <__fp_split3>
    39c6:	98 f3       	brcs	.-26     	; 0x39ae <__divsf3+0x4>

000039c8 <__divsf3_pse>:
    39c8:	99 23       	and	r25, r25
    39ca:	c9 f3       	breq	.-14     	; 0x39be <__divsf3+0x14>
    39cc:	55 23       	and	r21, r21
    39ce:	b1 f3       	breq	.-20     	; 0x39bc <__divsf3+0x12>
    39d0:	95 1b       	sub	r25, r21
    39d2:	55 0b       	sbc	r21, r21
    39d4:	bb 27       	eor	r27, r27
    39d6:	aa 27       	eor	r26, r26
    39d8:	62 17       	cp	r22, r18
    39da:	73 07       	cpc	r23, r19
    39dc:	84 07       	cpc	r24, r20
    39de:	38 f0       	brcs	.+14     	; 0x39ee <__divsf3_pse+0x26>
    39e0:	9f 5f       	subi	r25, 0xFF	; 255
    39e2:	5f 4f       	sbci	r21, 0xFF	; 255
    39e4:	22 0f       	add	r18, r18
    39e6:	33 1f       	adc	r19, r19
    39e8:	44 1f       	adc	r20, r20
    39ea:	aa 1f       	adc	r26, r26
    39ec:	a9 f3       	breq	.-22     	; 0x39d8 <__divsf3_pse+0x10>
    39ee:	33 d0       	rcall	.+102    	; 0x3a56 <__divsf3_pse+0x8e>
    39f0:	0e 2e       	mov	r0, r30
    39f2:	3a f0       	brmi	.+14     	; 0x3a02 <__divsf3_pse+0x3a>
    39f4:	e0 e8       	ldi	r30, 0x80	; 128
    39f6:	30 d0       	rcall	.+96     	; 0x3a58 <__divsf3_pse+0x90>
    39f8:	91 50       	subi	r25, 0x01	; 1
    39fa:	50 40       	sbci	r21, 0x00	; 0
    39fc:	e6 95       	lsr	r30
    39fe:	00 1c       	adc	r0, r0
    3a00:	ca f7       	brpl	.-14     	; 0x39f4 <__divsf3_pse+0x2c>
    3a02:	29 d0       	rcall	.+82     	; 0x3a56 <__divsf3_pse+0x8e>
    3a04:	fe 2f       	mov	r31, r30
    3a06:	27 d0       	rcall	.+78     	; 0x3a56 <__divsf3_pse+0x8e>
    3a08:	66 0f       	add	r22, r22
    3a0a:	77 1f       	adc	r23, r23
    3a0c:	88 1f       	adc	r24, r24
    3a0e:	bb 1f       	adc	r27, r27
    3a10:	26 17       	cp	r18, r22
    3a12:	37 07       	cpc	r19, r23
    3a14:	48 07       	cpc	r20, r24
    3a16:	ab 07       	cpc	r26, r27
    3a18:	b0 e8       	ldi	r27, 0x80	; 128
    3a1a:	09 f0       	breq	.+2      	; 0x3a1e <__divsf3_pse+0x56>
    3a1c:	bb 0b       	sbc	r27, r27
    3a1e:	80 2d       	mov	r24, r0
    3a20:	bf 01       	movw	r22, r30
    3a22:	ff 27       	eor	r31, r31
    3a24:	93 58       	subi	r25, 0x83	; 131
    3a26:	5f 4f       	sbci	r21, 0xFF	; 255
    3a28:	2a f0       	brmi	.+10     	; 0x3a34 <__divsf3_pse+0x6c>
    3a2a:	9e 3f       	cpi	r25, 0xFE	; 254
    3a2c:	51 05       	cpc	r21, r1
    3a2e:	68 f0       	brcs	.+26     	; 0x3a4a <__divsf3_pse+0x82>
    3a30:	92 c0       	rjmp	.+292    	; 0x3b56 <__fp_inf>
    3a32:	dc c0       	rjmp	.+440    	; 0x3bec <__fp_szero>
    3a34:	5f 3f       	cpi	r21, 0xFF	; 255
    3a36:	ec f3       	brlt	.-6      	; 0x3a32 <__divsf3_pse+0x6a>
    3a38:	98 3e       	cpi	r25, 0xE8	; 232
    3a3a:	dc f3       	brlt	.-10     	; 0x3a32 <__divsf3_pse+0x6a>
    3a3c:	86 95       	lsr	r24
    3a3e:	77 95       	ror	r23
    3a40:	67 95       	ror	r22
    3a42:	b7 95       	ror	r27
    3a44:	f7 95       	ror	r31
    3a46:	9f 5f       	subi	r25, 0xFF	; 255
    3a48:	c9 f7       	brne	.-14     	; 0x3a3c <__divsf3_pse+0x74>
    3a4a:	88 0f       	add	r24, r24
    3a4c:	91 1d       	adc	r25, r1
    3a4e:	96 95       	lsr	r25
    3a50:	87 95       	ror	r24
    3a52:	97 f9       	bld	r25, 7
    3a54:	08 95       	ret
    3a56:	e1 e0       	ldi	r30, 0x01	; 1
    3a58:	66 0f       	add	r22, r22
    3a5a:	77 1f       	adc	r23, r23
    3a5c:	88 1f       	adc	r24, r24
    3a5e:	bb 1f       	adc	r27, r27
    3a60:	62 17       	cp	r22, r18
    3a62:	73 07       	cpc	r23, r19
    3a64:	84 07       	cpc	r24, r20
    3a66:	ba 07       	cpc	r27, r26
    3a68:	20 f0       	brcs	.+8      	; 0x3a72 <__divsf3_pse+0xaa>
    3a6a:	62 1b       	sub	r22, r18
    3a6c:	73 0b       	sbc	r23, r19
    3a6e:	84 0b       	sbc	r24, r20
    3a70:	ba 0b       	sbc	r27, r26
    3a72:	ee 1f       	adc	r30, r30
    3a74:	88 f7       	brcc	.-30     	; 0x3a58 <__divsf3_pse+0x90>
    3a76:	e0 95       	com	r30
    3a78:	08 95       	ret

00003a7a <__fixsfsi>:
    3a7a:	04 d0       	rcall	.+8      	; 0x3a84 <__fixunssfsi>
    3a7c:	68 94       	set
    3a7e:	b1 11       	cpse	r27, r1
    3a80:	b5 c0       	rjmp	.+362    	; 0x3bec <__fp_szero>
    3a82:	08 95       	ret

00003a84 <__fixunssfsi>:
    3a84:	98 d0       	rcall	.+304    	; 0x3bb6 <__fp_splitA>
    3a86:	88 f0       	brcs	.+34     	; 0x3aaa <__fixunssfsi+0x26>
    3a88:	9f 57       	subi	r25, 0x7F	; 127
    3a8a:	90 f0       	brcs	.+36     	; 0x3ab0 <__fixunssfsi+0x2c>
    3a8c:	b9 2f       	mov	r27, r25
    3a8e:	99 27       	eor	r25, r25
    3a90:	b7 51       	subi	r27, 0x17	; 23
    3a92:	a0 f0       	brcs	.+40     	; 0x3abc <__fixunssfsi+0x38>
    3a94:	d1 f0       	breq	.+52     	; 0x3aca <__fixunssfsi+0x46>
    3a96:	66 0f       	add	r22, r22
    3a98:	77 1f       	adc	r23, r23
    3a9a:	88 1f       	adc	r24, r24
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	1a f0       	brmi	.+6      	; 0x3aa6 <__fixunssfsi+0x22>
    3aa0:	ba 95       	dec	r27
    3aa2:	c9 f7       	brne	.-14     	; 0x3a96 <__fixunssfsi+0x12>
    3aa4:	12 c0       	rjmp	.+36     	; 0x3aca <__fixunssfsi+0x46>
    3aa6:	b1 30       	cpi	r27, 0x01	; 1
    3aa8:	81 f0       	breq	.+32     	; 0x3aca <__fixunssfsi+0x46>
    3aaa:	9f d0       	rcall	.+318    	; 0x3bea <__fp_zero>
    3aac:	b1 e0       	ldi	r27, 0x01	; 1
    3aae:	08 95       	ret
    3ab0:	9c c0       	rjmp	.+312    	; 0x3bea <__fp_zero>
    3ab2:	67 2f       	mov	r22, r23
    3ab4:	78 2f       	mov	r23, r24
    3ab6:	88 27       	eor	r24, r24
    3ab8:	b8 5f       	subi	r27, 0xF8	; 248
    3aba:	39 f0       	breq	.+14     	; 0x3aca <__fixunssfsi+0x46>
    3abc:	b9 3f       	cpi	r27, 0xF9	; 249
    3abe:	cc f3       	brlt	.-14     	; 0x3ab2 <__fixunssfsi+0x2e>
    3ac0:	86 95       	lsr	r24
    3ac2:	77 95       	ror	r23
    3ac4:	67 95       	ror	r22
    3ac6:	b3 95       	inc	r27
    3ac8:	d9 f7       	brne	.-10     	; 0x3ac0 <__fixunssfsi+0x3c>
    3aca:	3e f4       	brtc	.+14     	; 0x3ada <__fixunssfsi+0x56>
    3acc:	90 95       	com	r25
    3ace:	80 95       	com	r24
    3ad0:	70 95       	com	r23
    3ad2:	61 95       	neg	r22
    3ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    3ada:	08 95       	ret

00003adc <__floatunsisf>:
    3adc:	e8 94       	clt
    3ade:	09 c0       	rjmp	.+18     	; 0x3af2 <__floatsisf+0x12>

00003ae0 <__floatsisf>:
    3ae0:	97 fb       	bst	r25, 7
    3ae2:	3e f4       	brtc	.+14     	; 0x3af2 <__floatsisf+0x12>
    3ae4:	90 95       	com	r25
    3ae6:	80 95       	com	r24
    3ae8:	70 95       	com	r23
    3aea:	61 95       	neg	r22
    3aec:	7f 4f       	sbci	r23, 0xFF	; 255
    3aee:	8f 4f       	sbci	r24, 0xFF	; 255
    3af0:	9f 4f       	sbci	r25, 0xFF	; 255
    3af2:	99 23       	and	r25, r25
    3af4:	a9 f0       	breq	.+42     	; 0x3b20 <__floatsisf+0x40>
    3af6:	f9 2f       	mov	r31, r25
    3af8:	96 e9       	ldi	r25, 0x96	; 150
    3afa:	bb 27       	eor	r27, r27
    3afc:	93 95       	inc	r25
    3afe:	f6 95       	lsr	r31
    3b00:	87 95       	ror	r24
    3b02:	77 95       	ror	r23
    3b04:	67 95       	ror	r22
    3b06:	b7 95       	ror	r27
    3b08:	f1 11       	cpse	r31, r1
    3b0a:	f8 cf       	rjmp	.-16     	; 0x3afc <__floatsisf+0x1c>
    3b0c:	fa f4       	brpl	.+62     	; 0x3b4c <__floatsisf+0x6c>
    3b0e:	bb 0f       	add	r27, r27
    3b10:	11 f4       	brne	.+4      	; 0x3b16 <__floatsisf+0x36>
    3b12:	60 ff       	sbrs	r22, 0
    3b14:	1b c0       	rjmp	.+54     	; 0x3b4c <__floatsisf+0x6c>
    3b16:	6f 5f       	subi	r22, 0xFF	; 255
    3b18:	7f 4f       	sbci	r23, 0xFF	; 255
    3b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b1e:	16 c0       	rjmp	.+44     	; 0x3b4c <__floatsisf+0x6c>
    3b20:	88 23       	and	r24, r24
    3b22:	11 f0       	breq	.+4      	; 0x3b28 <__floatsisf+0x48>
    3b24:	96 e9       	ldi	r25, 0x96	; 150
    3b26:	11 c0       	rjmp	.+34     	; 0x3b4a <__floatsisf+0x6a>
    3b28:	77 23       	and	r23, r23
    3b2a:	21 f0       	breq	.+8      	; 0x3b34 <__floatsisf+0x54>
    3b2c:	9e e8       	ldi	r25, 0x8E	; 142
    3b2e:	87 2f       	mov	r24, r23
    3b30:	76 2f       	mov	r23, r22
    3b32:	05 c0       	rjmp	.+10     	; 0x3b3e <__floatsisf+0x5e>
    3b34:	66 23       	and	r22, r22
    3b36:	71 f0       	breq	.+28     	; 0x3b54 <__floatsisf+0x74>
    3b38:	96 e8       	ldi	r25, 0x86	; 134
    3b3a:	86 2f       	mov	r24, r22
    3b3c:	70 e0       	ldi	r23, 0x00	; 0
    3b3e:	60 e0       	ldi	r22, 0x00	; 0
    3b40:	2a f0       	brmi	.+10     	; 0x3b4c <__floatsisf+0x6c>
    3b42:	9a 95       	dec	r25
    3b44:	66 0f       	add	r22, r22
    3b46:	77 1f       	adc	r23, r23
    3b48:	88 1f       	adc	r24, r24
    3b4a:	da f7       	brpl	.-10     	; 0x3b42 <__floatsisf+0x62>
    3b4c:	88 0f       	add	r24, r24
    3b4e:	96 95       	lsr	r25
    3b50:	87 95       	ror	r24
    3b52:	97 f9       	bld	r25, 7
    3b54:	08 95       	ret

00003b56 <__fp_inf>:
    3b56:	97 f9       	bld	r25, 7
    3b58:	9f 67       	ori	r25, 0x7F	; 127
    3b5a:	80 e8       	ldi	r24, 0x80	; 128
    3b5c:	70 e0       	ldi	r23, 0x00	; 0
    3b5e:	60 e0       	ldi	r22, 0x00	; 0
    3b60:	08 95       	ret

00003b62 <__fp_nan>:
    3b62:	9f ef       	ldi	r25, 0xFF	; 255
    3b64:	80 ec       	ldi	r24, 0xC0	; 192
    3b66:	08 95       	ret

00003b68 <__fp_pscA>:
    3b68:	00 24       	eor	r0, r0
    3b6a:	0a 94       	dec	r0
    3b6c:	16 16       	cp	r1, r22
    3b6e:	17 06       	cpc	r1, r23
    3b70:	18 06       	cpc	r1, r24
    3b72:	09 06       	cpc	r0, r25
    3b74:	08 95       	ret

00003b76 <__fp_pscB>:
    3b76:	00 24       	eor	r0, r0
    3b78:	0a 94       	dec	r0
    3b7a:	12 16       	cp	r1, r18
    3b7c:	13 06       	cpc	r1, r19
    3b7e:	14 06       	cpc	r1, r20
    3b80:	05 06       	cpc	r0, r21
    3b82:	08 95       	ret

00003b84 <__fp_round>:
    3b84:	09 2e       	mov	r0, r25
    3b86:	03 94       	inc	r0
    3b88:	00 0c       	add	r0, r0
    3b8a:	11 f4       	brne	.+4      	; 0x3b90 <__fp_round+0xc>
    3b8c:	88 23       	and	r24, r24
    3b8e:	52 f0       	brmi	.+20     	; 0x3ba4 <__fp_round+0x20>
    3b90:	bb 0f       	add	r27, r27
    3b92:	40 f4       	brcc	.+16     	; 0x3ba4 <__fp_round+0x20>
    3b94:	bf 2b       	or	r27, r31
    3b96:	11 f4       	brne	.+4      	; 0x3b9c <__fp_round+0x18>
    3b98:	60 ff       	sbrs	r22, 0
    3b9a:	04 c0       	rjmp	.+8      	; 0x3ba4 <__fp_round+0x20>
    3b9c:	6f 5f       	subi	r22, 0xFF	; 255
    3b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3ba0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba4:	08 95       	ret

00003ba6 <__fp_split3>:
    3ba6:	57 fd       	sbrc	r21, 7
    3ba8:	90 58       	subi	r25, 0x80	; 128
    3baa:	44 0f       	add	r20, r20
    3bac:	55 1f       	adc	r21, r21
    3bae:	59 f0       	breq	.+22     	; 0x3bc6 <__fp_splitA+0x10>
    3bb0:	5f 3f       	cpi	r21, 0xFF	; 255
    3bb2:	71 f0       	breq	.+28     	; 0x3bd0 <__fp_splitA+0x1a>
    3bb4:	47 95       	ror	r20

00003bb6 <__fp_splitA>:
    3bb6:	88 0f       	add	r24, r24
    3bb8:	97 fb       	bst	r25, 7
    3bba:	99 1f       	adc	r25, r25
    3bbc:	61 f0       	breq	.+24     	; 0x3bd6 <__fp_splitA+0x20>
    3bbe:	9f 3f       	cpi	r25, 0xFF	; 255
    3bc0:	79 f0       	breq	.+30     	; 0x3be0 <__fp_splitA+0x2a>
    3bc2:	87 95       	ror	r24
    3bc4:	08 95       	ret
    3bc6:	12 16       	cp	r1, r18
    3bc8:	13 06       	cpc	r1, r19
    3bca:	14 06       	cpc	r1, r20
    3bcc:	55 1f       	adc	r21, r21
    3bce:	f2 cf       	rjmp	.-28     	; 0x3bb4 <__fp_split3+0xe>
    3bd0:	46 95       	lsr	r20
    3bd2:	f1 df       	rcall	.-30     	; 0x3bb6 <__fp_splitA>
    3bd4:	08 c0       	rjmp	.+16     	; 0x3be6 <__fp_splitA+0x30>
    3bd6:	16 16       	cp	r1, r22
    3bd8:	17 06       	cpc	r1, r23
    3bda:	18 06       	cpc	r1, r24
    3bdc:	99 1f       	adc	r25, r25
    3bde:	f1 cf       	rjmp	.-30     	; 0x3bc2 <__fp_splitA+0xc>
    3be0:	86 95       	lsr	r24
    3be2:	71 05       	cpc	r23, r1
    3be4:	61 05       	cpc	r22, r1
    3be6:	08 94       	sec
    3be8:	08 95       	ret

00003bea <__fp_zero>:
    3bea:	e8 94       	clt

00003bec <__fp_szero>:
    3bec:	bb 27       	eor	r27, r27
    3bee:	66 27       	eor	r22, r22
    3bf0:	77 27       	eor	r23, r23
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	97 f9       	bld	r25, 7
    3bf6:	08 95       	ret

00003bf8 <__divmodhi4>:
    3bf8:	97 fb       	bst	r25, 7
    3bfa:	07 2e       	mov	r0, r23
    3bfc:	16 f4       	brtc	.+4      	; 0x3c02 <__divmodhi4+0xa>
    3bfe:	00 94       	com	r0
    3c00:	06 d0       	rcall	.+12     	; 0x3c0e <__divmodhi4_neg1>
    3c02:	77 fd       	sbrc	r23, 7
    3c04:	08 d0       	rcall	.+16     	; 0x3c16 <__divmodhi4_neg2>
    3c06:	3e d0       	rcall	.+124    	; 0x3c84 <__udivmodhi4>
    3c08:	07 fc       	sbrc	r0, 7
    3c0a:	05 d0       	rcall	.+10     	; 0x3c16 <__divmodhi4_neg2>
    3c0c:	3e f4       	brtc	.+14     	; 0x3c1c <__divmodhi4_exit>

00003c0e <__divmodhi4_neg1>:
    3c0e:	90 95       	com	r25
    3c10:	81 95       	neg	r24
    3c12:	9f 4f       	sbci	r25, 0xFF	; 255
    3c14:	08 95       	ret

00003c16 <__divmodhi4_neg2>:
    3c16:	70 95       	com	r23
    3c18:	61 95       	neg	r22
    3c1a:	7f 4f       	sbci	r23, 0xFF	; 255

00003c1c <__divmodhi4_exit>:
    3c1c:	08 95       	ret

00003c1e <__divmodsi4>:
    3c1e:	05 2e       	mov	r0, r21
    3c20:	97 fb       	bst	r25, 7
    3c22:	16 f4       	brtc	.+4      	; 0x3c28 <__divmodsi4+0xa>
    3c24:	00 94       	com	r0
    3c26:	0f d0       	rcall	.+30     	; 0x3c46 <__negsi2>
    3c28:	57 fd       	sbrc	r21, 7
    3c2a:	05 d0       	rcall	.+10     	; 0x3c36 <__divmodsi4_neg2>
    3c2c:	3f d0       	rcall	.+126    	; 0x3cac <__udivmodsi4>
    3c2e:	07 fc       	sbrc	r0, 7
    3c30:	02 d0       	rcall	.+4      	; 0x3c36 <__divmodsi4_neg2>
    3c32:	46 f4       	brtc	.+16     	; 0x3c44 <__divmodsi4_exit>
    3c34:	08 c0       	rjmp	.+16     	; 0x3c46 <__negsi2>

00003c36 <__divmodsi4_neg2>:
    3c36:	50 95       	com	r21
    3c38:	40 95       	com	r20
    3c3a:	30 95       	com	r19
    3c3c:	21 95       	neg	r18
    3c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c40:	4f 4f       	sbci	r20, 0xFF	; 255
    3c42:	5f 4f       	sbci	r21, 0xFF	; 255

00003c44 <__divmodsi4_exit>:
    3c44:	08 95       	ret

00003c46 <__negsi2>:
    3c46:	90 95       	com	r25
    3c48:	80 95       	com	r24
    3c4a:	70 95       	com	r23
    3c4c:	61 95       	neg	r22
    3c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c50:	8f 4f       	sbci	r24, 0xFF	; 255
    3c52:	9f 4f       	sbci	r25, 0xFF	; 255
    3c54:	08 95       	ret

00003c56 <__tablejump2__>:
    3c56:	ee 0f       	add	r30, r30
    3c58:	ff 1f       	adc	r31, r31
    3c5a:	88 1f       	adc	r24, r24
    3c5c:	8b bf       	out	0x3b, r24	; 59
    3c5e:	07 90       	elpm	r0, Z+
    3c60:	f6 91       	elpm	r31, Z
    3c62:	e0 2d       	mov	r30, r0
    3c64:	19 94       	eijmp

00003c66 <__umulhisi3>:
    3c66:	a2 9f       	mul	r26, r18
    3c68:	b0 01       	movw	r22, r0
    3c6a:	b3 9f       	mul	r27, r19
    3c6c:	c0 01       	movw	r24, r0
    3c6e:	a3 9f       	mul	r26, r19
    3c70:	70 0d       	add	r23, r0
    3c72:	81 1d       	adc	r24, r1
    3c74:	11 24       	eor	r1, r1
    3c76:	91 1d       	adc	r25, r1
    3c78:	b2 9f       	mul	r27, r18
    3c7a:	70 0d       	add	r23, r0
    3c7c:	81 1d       	adc	r24, r1
    3c7e:	11 24       	eor	r1, r1
    3c80:	91 1d       	adc	r25, r1
    3c82:	08 95       	ret

00003c84 <__udivmodhi4>:
    3c84:	aa 1b       	sub	r26, r26
    3c86:	bb 1b       	sub	r27, r27
    3c88:	51 e1       	ldi	r21, 0x11	; 17
    3c8a:	07 c0       	rjmp	.+14     	; 0x3c9a <__udivmodhi4_ep>

00003c8c <__udivmodhi4_loop>:
    3c8c:	aa 1f       	adc	r26, r26
    3c8e:	bb 1f       	adc	r27, r27
    3c90:	a6 17       	cp	r26, r22
    3c92:	b7 07       	cpc	r27, r23
    3c94:	10 f0       	brcs	.+4      	; 0x3c9a <__udivmodhi4_ep>
    3c96:	a6 1b       	sub	r26, r22
    3c98:	b7 0b       	sbc	r27, r23

00003c9a <__udivmodhi4_ep>:
    3c9a:	88 1f       	adc	r24, r24
    3c9c:	99 1f       	adc	r25, r25
    3c9e:	5a 95       	dec	r21
    3ca0:	a9 f7       	brne	.-22     	; 0x3c8c <__udivmodhi4_loop>
    3ca2:	80 95       	com	r24
    3ca4:	90 95       	com	r25
    3ca6:	bc 01       	movw	r22, r24
    3ca8:	cd 01       	movw	r24, r26
    3caa:	08 95       	ret

00003cac <__udivmodsi4>:
    3cac:	a1 e2       	ldi	r26, 0x21	; 33
    3cae:	1a 2e       	mov	r1, r26
    3cb0:	aa 1b       	sub	r26, r26
    3cb2:	bb 1b       	sub	r27, r27
    3cb4:	fd 01       	movw	r30, r26
    3cb6:	0d c0       	rjmp	.+26     	; 0x3cd2 <__udivmodsi4_ep>

00003cb8 <__udivmodsi4_loop>:
    3cb8:	aa 1f       	adc	r26, r26
    3cba:	bb 1f       	adc	r27, r27
    3cbc:	ee 1f       	adc	r30, r30
    3cbe:	ff 1f       	adc	r31, r31
    3cc0:	a2 17       	cp	r26, r18
    3cc2:	b3 07       	cpc	r27, r19
    3cc4:	e4 07       	cpc	r30, r20
    3cc6:	f5 07       	cpc	r31, r21
    3cc8:	20 f0       	brcs	.+8      	; 0x3cd2 <__udivmodsi4_ep>
    3cca:	a2 1b       	sub	r26, r18
    3ccc:	b3 0b       	sbc	r27, r19
    3cce:	e4 0b       	sbc	r30, r20
    3cd0:	f5 0b       	sbc	r31, r21

00003cd2 <__udivmodsi4_ep>:
    3cd2:	66 1f       	adc	r22, r22
    3cd4:	77 1f       	adc	r23, r23
    3cd6:	88 1f       	adc	r24, r24
    3cd8:	99 1f       	adc	r25, r25
    3cda:	1a 94       	dec	r1
    3cdc:	69 f7       	brne	.-38     	; 0x3cb8 <__udivmodsi4_loop>
    3cde:	60 95       	com	r22
    3ce0:	70 95       	com	r23
    3ce2:	80 95       	com	r24
    3ce4:	90 95       	com	r25
    3ce6:	9b 01       	movw	r18, r22
    3ce8:	ac 01       	movw	r20, r24
    3cea:	bd 01       	movw	r22, r26
    3cec:	cf 01       	movw	r24, r30
    3cee:	08 95       	ret

00003cf0 <eeprom_read_block>:
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22

00003cf4 <eeprom_read_blraw>:
    3cf4:	fc 01       	movw	r30, r24
    3cf6:	f9 99       	sbic	0x1f, 1	; 31
    3cf8:	fe cf       	rjmp	.-4      	; 0x3cf6 <eeprom_read_blraw+0x2>
    3cfa:	06 c0       	rjmp	.+12     	; 0x3d08 <eeprom_read_blraw+0x14>
    3cfc:	f2 bd       	out	0x22, r31	; 34
    3cfe:	e1 bd       	out	0x21, r30	; 33
    3d00:	f8 9a       	sbi	0x1f, 0	; 31
    3d02:	31 96       	adiw	r30, 0x01	; 1
    3d04:	00 b4       	in	r0, 0x20	; 32
    3d06:	0d 92       	st	X+, r0
    3d08:	41 50       	subi	r20, 0x01	; 1
    3d0a:	50 40       	sbci	r21, 0x00	; 0
    3d0c:	b8 f7       	brcc	.-18     	; 0x3cfc <eeprom_read_blraw+0x8>
    3d0e:	08 95       	ret

00003d10 <eeprom_read_byte>:
    3d10:	f9 99       	sbic	0x1f, 1	; 31
    3d12:	fe cf       	rjmp	.-4      	; 0x3d10 <eeprom_read_byte>
    3d14:	92 bd       	out	0x22, r25	; 34
    3d16:	81 bd       	out	0x21, r24	; 33
    3d18:	f8 9a       	sbi	0x1f, 0	; 31
    3d1a:	99 27       	eor	r25, r25
    3d1c:	80 b5       	in	r24, 0x20	; 32
    3d1e:	08 95       	ret

00003d20 <eeprom_write_block>:
    3d20:	dc 01       	movw	r26, r24
    3d22:	cb 01       	movw	r24, r22
    3d24:	02 c0       	rjmp	.+4      	; 0x3d2a <eeprom_write_block+0xa>
    3d26:	2d 91       	ld	r18, X+
    3d28:	05 d0       	rcall	.+10     	; 0x3d34 <eeprom_write_r18>
    3d2a:	41 50       	subi	r20, 0x01	; 1
    3d2c:	50 40       	sbci	r21, 0x00	; 0
    3d2e:	d8 f7       	brcc	.-10     	; 0x3d26 <eeprom_write_block+0x6>
    3d30:	08 95       	ret

00003d32 <eeprom_write_byte>:
    3d32:	26 2f       	mov	r18, r22

00003d34 <eeprom_write_r18>:
    3d34:	f9 99       	sbic	0x1f, 1	; 31
    3d36:	fe cf       	rjmp	.-4      	; 0x3d34 <eeprom_write_r18>
    3d38:	1f ba       	out	0x1f, r1	; 31
    3d3a:	92 bd       	out	0x22, r25	; 34
    3d3c:	81 bd       	out	0x21, r24	; 33
    3d3e:	20 bd       	out	0x20, r18	; 32
    3d40:	0f b6       	in	r0, 0x3f	; 63
    3d42:	f8 94       	cli
    3d44:	fa 9a       	sbi	0x1f, 2	; 31
    3d46:	f9 9a       	sbi	0x1f, 1	; 31
    3d48:	0f be       	out	0x3f, r0	; 63
    3d4a:	01 96       	adiw	r24, 0x01	; 1
    3d4c:	08 95       	ret

00003d4e <_exit>:
    3d4e:	f8 94       	cli

00003d50 <__stop_program>:
    3d50:	ff cf       	rjmp	.-2      	; 0x3d50 <__stop_program>
