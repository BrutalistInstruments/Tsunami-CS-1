
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018c  00800200  00003a7e  00003b12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007c8  0080038c  0080038c  00003c9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003c9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003cd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00003d10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000073fe  00000000  00000000  00004150  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ffd  00000000  00000000  0000b54e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000334c  00000000  00000000  0000d54b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b6c  00000000  00000000  00010898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014a2  00000000  00000000  00011404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004db1  00000000  00000000  000128a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  00017657  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
       2:	00 00       	nop
       4:	11 c1       	rjmp	.+546    	; 0x228 <__bad_interrupt>
       6:	00 00       	nop
       8:	0f c1       	rjmp	.+542    	; 0x228 <__bad_interrupt>
       a:	00 00       	nop
       c:	50 c2       	rjmp	.+1184   	; 0x4ae <__vector_3>
       e:	00 00       	nop
      10:	6c c2       	rjmp	.+1240   	; 0x4ea <__vector_4>
      12:	00 00       	nop
      14:	88 c2       	rjmp	.+1296   	; 0x526 <__vector_5>
      16:	00 00       	nop
      18:	a4 c2       	rjmp	.+1352   	; 0x562 <__vector_6>
      1a:	00 00       	nop
      1c:	05 c1       	rjmp	.+522    	; 0x228 <__bad_interrupt>
      1e:	00 00       	nop
      20:	03 c1       	rjmp	.+518    	; 0x228 <__bad_interrupt>
      22:	00 00       	nop
      24:	01 c1       	rjmp	.+514    	; 0x228 <__bad_interrupt>
      26:	00 00       	nop
      28:	ff c0       	rjmp	.+510    	; 0x228 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fd c0       	rjmp	.+506    	; 0x228 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fb c0       	rjmp	.+502    	; 0x228 <__bad_interrupt>
      32:	00 00       	nop
      34:	f9 c0       	rjmp	.+498    	; 0x228 <__bad_interrupt>
      36:	00 00       	nop
      38:	f7 c0       	rjmp	.+494    	; 0x228 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__vector_15>
      3e:	00 00       	nop
      40:	f3 c0       	rjmp	.+486    	; 0x228 <__bad_interrupt>
      42:	00 00       	nop
      44:	f1 c0       	rjmp	.+482    	; 0x228 <__bad_interrupt>
      46:	00 00       	nop
      48:	ef c0       	rjmp	.+478    	; 0x228 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ed c0       	rjmp	.+474    	; 0x228 <__bad_interrupt>
      4e:	00 00       	nop
      50:	eb c0       	rjmp	.+470    	; 0x228 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__vector_21>
      58:	e7 c0       	rjmp	.+462    	; 0x228 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e5 c0       	rjmp	.+458    	; 0x228 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e3 c0       	rjmp	.+454    	; 0x228 <__bad_interrupt>
      62:	00 00       	nop
      64:	e1 c0       	rjmp	.+450    	; 0x228 <__bad_interrupt>
      66:	00 00       	nop
      68:	df c0       	rjmp	.+446    	; 0x228 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__vector_27>
      70:	db c0       	rjmp	.+438    	; 0x228 <__bad_interrupt>
      72:	00 00       	nop
      74:	d9 c0       	rjmp	.+434    	; 0x228 <__bad_interrupt>
      76:	00 00       	nop
      78:	d7 c0       	rjmp	.+430    	; 0x228 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d5 c0       	rjmp	.+426    	; 0x228 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__vector_32>
      84:	d1 c0       	rjmp	.+418    	; 0x228 <__bad_interrupt>
      86:	00 00       	nop
      88:	cf c0       	rjmp	.+414    	; 0x228 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cd c0       	rjmp	.+410    	; 0x228 <__bad_interrupt>
      8e:	00 00       	nop
      90:	cb c0       	rjmp	.+406    	; 0x228 <__bad_interrupt>
      92:	00 00       	nop
      94:	c9 c0       	rjmp	.+402    	; 0x228 <__bad_interrupt>
      96:	00 00       	nop
      98:	c7 c0       	rjmp	.+398    	; 0x228 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c5 c0       	rjmp	.+394    	; 0x228 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c3 c0       	rjmp	.+390    	; 0x228 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c1 c0       	rjmp	.+386    	; 0x228 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bf c0       	rjmp	.+382    	; 0x228 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	bd c0       	rjmp	.+378    	; 0x228 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bb c0       	rjmp	.+374    	; 0x228 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b9 c0       	rjmp	.+370    	; 0x228 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b7 c0       	rjmp	.+366    	; 0x228 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b5 c0       	rjmp	.+362    	; 0x228 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b3 c0       	rjmp	.+358    	; 0x228 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b1 c0       	rjmp	.+354    	; 0x228 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	af c0       	rjmp	.+350    	; 0x228 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ad c0       	rjmp	.+346    	; 0x228 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ab c0       	rjmp	.+342    	; 0x228 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a9 c0       	rjmp	.+338    	; 0x228 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 99 10 	jmp	0x2132	; 0x2132 <__vector_54>
      dc:	a5 c0       	rjmp	.+330    	; 0x228 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a3 c0       	rjmp	.+326    	; 0x228 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0b 03       	fmul	r16, r19
      e6:	22 05       	cpc	r18, r2
      e8:	22 05       	cpc	r18, r2
      ea:	22 05       	cpc	r18, r2
      ec:	22 05       	cpc	r18, r2
      ee:	22 05       	cpc	r18, r2
      f0:	22 05       	cpc	r18, r2
      f2:	22 05       	cpc	r18, r2
      f4:	22 05       	cpc	r18, r2
      f6:	22 05       	cpc	r18, r2
      f8:	22 05       	cpc	r18, r2
      fa:	22 05       	cpc	r18, r2
      fc:	22 05       	cpc	r18, r2
      fe:	22 05       	cpc	r18, r2
     100:	22 05       	cpc	r18, r2
     102:	22 05       	cpc	r18, r2
     104:	22 05       	cpc	r18, r2
     106:	2f 03       	fmul	r18, r23
     108:	5b 03       	fmul	r21, r19
     10a:	84 03       	fmuls	r16, r20
     10c:	22 05       	cpc	r18, r2
     10e:	22 05       	cpc	r18, r2
     110:	22 05       	cpc	r18, r2
     112:	22 05       	cpc	r18, r2
     114:	22 05       	cpc	r18, r2
     116:	39 03       	fmul	r19, r17
     118:	65 03       	mulsu	r22, r21
     11a:	8e 03       	fmulsu	r16, r22
     11c:	22 05       	cpc	r18, r2
     11e:	22 05       	cpc	r18, r2
     120:	22 05       	cpc	r18, r2
     122:	22 05       	cpc	r18, r2
     124:	22 05       	cpc	r18, r2
     126:	b3 03       	fmuls	r19, r19
     128:	ee 03       	fmulsu	r22, r22
     12a:	05 04       	cpc	r0, r5
     12c:	42 04       	cpc	r4, r2
     12e:	8b 04       	cpc	r8, r11
     130:	22 05       	cpc	r18, r2
     132:	22 05       	cpc	r18, r2
     134:	22 05       	cpc	r18, r2
     136:	bd 03       	fmulsu	r19, r21
     138:	f8 03       	fmulsu	r23, r16
     13a:	0f 04       	cpc	r0, r15
     13c:	4c 04       	cpc	r4, r12
     13e:	95 04       	cpc	r9, r5
     140:	22 05       	cpc	r18, r2
     142:	22 05       	cpc	r18, r2
     144:	22 05       	cpc	r18, r2
     146:	d4 04       	cpc	r13, r4
     148:	f8 04       	cpc	r15, r8
     14a:	19 05       	cpc	r17, r9
     14c:	22 05       	cpc	r18, r2
     14e:	22 05       	cpc	r18, r2
     150:	22 05       	cpc	r18, r2
     152:	22 05       	cpc	r18, r2
     154:	22 05       	cpc	r18, r2
     156:	de 04       	cpc	r13, r14
     158:	02 05       	cpc	r16, r2
     15a:	8e 0b       	sbc	r24, r30
     15c:	44 0e       	add	r4, r20
     15e:	44 0e       	add	r4, r20
     160:	44 0e       	add	r4, r20
     162:	44 0e       	add	r4, r20
     164:	44 0e       	add	r4, r20
     166:	44 0e       	add	r4, r20
     168:	44 0e       	add	r4, r20
     16a:	44 0e       	add	r4, r20
     16c:	44 0e       	add	r4, r20
     16e:	44 0e       	add	r4, r20
     170:	44 0e       	add	r4, r20
     172:	44 0e       	add	r4, r20
     174:	44 0e       	add	r4, r20
     176:	44 0e       	add	r4, r20
     178:	44 0e       	add	r4, r20
     17a:	a4 0b       	sbc	r26, r20
     17c:	be 0b       	sbc	r27, r30
     17e:	e4 0b       	sbc	r30, r20
     180:	13 0c       	add	r1, r3
     182:	44 0e       	add	r4, r20
     184:	44 0e       	add	r4, r20
     186:	44 0e       	add	r4, r20
     188:	44 0e       	add	r4, r20
     18a:	44 0e       	add	r4, r20
     18c:	db 0b       	sbc	r29, r27
     18e:	01 0c       	add	r0, r1
     190:	30 0c       	add	r3, r0
     192:	44 0e       	add	r4, r20
     194:	44 0e       	add	r4, r20
     196:	44 0e       	add	r4, r20
     198:	44 0e       	add	r4, r20
     19a:	41 0c       	add	r4, r1
     19c:	5b 0c       	add	r5, r11
     19e:	94 0c       	add	r9, r4
     1a0:	e0 0c       	add	r14, r0
     1a2:	13 0d       	add	r17, r3
     1a4:	7d 0d       	add	r23, r13
     1a6:	44 0e       	add	r4, r20
     1a8:	44 0e       	add	r4, r20
     1aa:	44 0e       	add	r4, r20
     1ac:	78 0c       	add	r7, r8
     1ae:	b1 0c       	add	r11, r1
     1b0:	fd 0c       	add	r15, r13
     1b2:	30 0d       	add	r19, r0
     1b4:	9a 0d       	add	r25, r10
     1b6:	44 0e       	add	r4, r20
     1b8:	44 0e       	add	r4, r20
     1ba:	b0 0d       	add	r27, r0
     1bc:	ca 0d       	add	r28, r10
     1be:	f9 0d       	add	r31, r9
     1c0:	28 0e       	add	r2, r24
     1c2:	44 0e       	add	r4, r20
     1c4:	44 0e       	add	r4, r20
     1c6:	44 0e       	add	r4, r20
     1c8:	44 0e       	add	r4, r20
     1ca:	44 0e       	add	r4, r20
     1cc:	e7 0d       	add	r30, r7
     1ce:	16 0e       	add	r1, r22
     1d0:	22 14       	cp	r2, r2
     1d2:	25 14       	cp	r2, r5
     1d4:	28 14       	cp	r2, r8
     1d6:	2b 14       	cp	r2, r11
     1d8:	2e 14       	cp	r2, r14
     1da:	31 14       	cp	r3, r1
     1dc:	34 14       	cp	r3, r4
     1de:	37 14       	cp	r3, r7
     1e0:	3a 14       	cp	r3, r10
     1e2:	3d 14       	cp	r3, r13
     1e4:	40 14       	cp	r4, r0
     1e6:	43 14       	cp	r4, r3

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d1 e2       	ldi	r29, 0x21	; 33
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	13 e0       	ldi	r17, 0x03	; 3
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b2 e0       	ldi	r27, 0x02	; 2
     1fe:	ee e7       	ldi	r30, 0x7E	; 126
     200:	fa e3       	ldi	r31, 0x3A	; 58
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	ac 38       	cpi	r26, 0x8C	; 140
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	2b e0       	ldi	r18, 0x0B	; 11
     214:	ac e8       	ldi	r26, 0x8C	; 140
     216:	b3 e0       	ldi	r27, 0x03	; 3
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a4 35       	cpi	r26, 0x54	; 84
     21e:	b2 07       	cpc	r27, r18
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	7e d7       	rcall	.+3836   	; 0x1120 <main>
     224:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <_exit>

00000228 <__bad_interrupt>:
     228:	eb ce       	rjmp	.-554    	; 0x0 <__vectors>

0000022a <__vector_15>:
uint8_t buttonsCurrentCycle;
uint16_t lastFullBits = 0;
uint8_t currentTrig;

ISR(TIMER2_OVF_vect)
{
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	2f 93       	push	r18
     236:	3f 93       	push	r19
     238:	8f 93       	push	r24
     23a:	9f 93       	push	r25

static inline void debounce()
{
	static uint8_t vcount_low = 0xFF, vcount_high = 0xFF;
	static uint8_t button_state = 0;
	uint8_t state_changed = ~BUTTON_PIN ^ button_state;
     23c:	83 b1       	in	r24, 0x03	; 3
     23e:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <__data_end>
     242:	80 95       	com	r24
     244:	38 2f       	mov	r19, r24
     246:	32 27       	eor	r19, r18
	VC_DEC_OR_SET(vcount_high, vcount_low, state_changed);
     248:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <vcount_low.1742>
     24c:	93 23       	and	r25, r19
     24e:	89 2f       	mov	r24, r25
     250:	80 95       	com	r24
     252:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <vcount_low.1742>
     256:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     25a:	93 23       	and	r25, r19
     25c:	98 27       	eor	r25, r24
     25e:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
     262:	83 23       	and	r24, r19
	state_changed &= vcount_low & vcount_high;
     264:	89 23       	and	r24, r25
	button_state ^= state_changed;
     266:	92 2f       	mov	r25, r18
     268:	98 27       	eor	r25, r24
     26a:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <__data_end>
	buttons_down |= button_state&state_changed;
     26e:	20 91 a0 03 	lds	r18, 0x03A0	; 0x8003a0 <buttons_down>
     272:	89 23       	and	r24, r25
     274:	82 2b       	or	r24, r18
     276:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <buttons_down>
	debounce();
}
     27a:	9f 91       	pop	r25
     27c:	8f 91       	pop	r24
     27e:	3f 91       	pop	r19
     280:	2f 91       	pop	r18
     282:	0f 90       	pop	r0
     284:	0f be       	out	0x3f, r0	; 63
     286:	0f 90       	pop	r0
     288:	1f 90       	pop	r1
     28a:	18 95       	reti

0000028c <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     28c:	8f ef       	ldi	r24, 0xFF	; 255
     28e:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     290:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons and Encoder buttons
	PORTB = 0B01111111;
     294:	8f e7       	ldi	r24, 0x7F	; 127
     296:	85 b9       	out	0x05, r24	; 5
     298:	08 95       	ret

0000029a <listenTrigButtons>:

}

void listenTrigButtons(Pattern *buttonCurrentPattern, Globals *currentGlobals)
{
     29a:	af 92       	push	r10
     29c:	bf 92       	push	r11
     29e:	cf 92       	push	r12
     2a0:	df 92       	push	r13
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	5c 01       	movw	r10, r24
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     2ae:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     2b2:	20 95       	com	r18
     2b4:	20 93 9e 03 	sts	0x039E, r18	; 0x80039e <buttonsCurrentCycle>
	(currentGlobals->currentTrigButtons) = (buttonsCurrentCycle << 8) | (PINA^255);
     2b8:	90 b1       	in	r25, 0x00	; 0
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	32 2f       	mov	r19, r18
     2be:	22 27       	eor	r18, r18
     2c0:	90 95       	com	r25
     2c2:	29 2b       	or	r18, r25
     2c4:	db 01       	movw	r26, r22
     2c6:	2d 93       	st	X+, r18
     2c8:	3c 93       	st	X, r19
	if(currentGlobals->currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     2ca:	40 91 8d 03 	lds	r20, 0x038D	; 0x80038d <lastFullBits>
     2ce:	50 91 8e 03 	lds	r21, 0x038E	; 0x80038e <lastFullBits+0x1>
     2d2:	24 17       	cp	r18, r20
     2d4:	35 07       	cpc	r19, r21
     2d6:	09 f4       	brne	.+2      	; 0x2da <listenTrigButtons+0x40>
     2d8:	51 c0       	rjmp	.+162    	; 0x37c <listenTrigButtons+0xe2>
     2da:	6b 01       	movw	r12, r22
	{
		lastFullBits = currentGlobals->currentTrigButtons;
     2dc:	30 93 8e 03 	sts	0x038E, r19	; 0x80038e <lastFullBits+0x1>
     2e0:	20 93 8d 03 	sts	0x038D, r18	; 0x80038d <lastFullBits>
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
     2e4:	fb 01       	movw	r30, r22
     2e6:	00 81       	ld	r16, Z
     2e8:	11 81       	ldd	r17, Z+1	; 0x01
     2ea:	75 01       	movw	r14, r10
     2ec:	f8 e8       	ldi	r31, 0x88	; 136
     2ee:	ef 0e       	add	r14, r31
     2f0:	f1 1c       	adc	r15, r1
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     2f2:	c0 e0       	ldi	r28, 0x00	; 0
		{
			currentTrig = (fullBitsParse&1);
     2f4:	90 2f       	mov	r25, r16
     2f6:	91 70       	andi	r25, 0x01	; 1
     2f8:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <currentTrig>
			if(currentTrig)
     2fc:	99 23       	and	r25, r25
     2fe:	a9 f1       	breq	.+106    	; 0x36a <listenTrigButtons+0xd0>
			{
				uint8_t encoderAstate = currentGlobals->menuState >> 4;
				switch (encoderAstate)
     300:	d6 01       	movw	r26, r12
     302:	16 96       	adiw	r26, 0x06	; 6
     304:	9c 91       	ld	r25, X
     306:	92 95       	swap	r25
     308:	9f 70       	andi	r25, 0x0F	; 15
     30a:	91 30       	cpi	r25, 0x01	; 1
     30c:	51 f0       	breq	.+20     	; 0x322 <listenTrigButtons+0x88>
     30e:	18 f0       	brcs	.+6      	; 0x316 <listenTrigButtons+0x7c>
     310:	94 30       	cpi	r25, 0x04	; 4
     312:	58 f5       	brcc	.+86     	; 0x36a <listenTrigButtons+0xd0>
     314:	1a c0       	rjmp	.+52     	; 0x34a <listenTrigButtons+0xb0>
				{
	
					//for "performance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
					case 0: //performance mode
					//we trigger a sound here based on the location of bc
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     316:	4c 2f       	mov	r20, r28
     318:	b6 01       	movw	r22, r12
     31a:	c5 01       	movw	r24, r10
     31c:	0e 94 34 16 	call	0x2c68	; 0x2c68 <playTrack>
					//trackControl(buttonCurrentPattern->trackSampleLSB[bc], buttonCurrentPattern->trackSampleMSB[bc], buttonCurrentPattern->trackOutputRoute[bc], buttonCurrentPattern->trackPlayMode[bc]);
					// void trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand);
					break;
     320:	24 c0       	rjmp	.+72     	; 0x36a <listenTrigButtons+0xd0>

					case 1:
					buttonCurrentPattern->trackSequence[currentGlobals->currentStep] ^=currentGlobals->currentTrigButtons;
     322:	d6 01       	movw	r26, r12
     324:	14 96       	adiw	r26, 0x04	; 4
     326:	ec 91       	ld	r30, X
     328:	14 97       	sbiw	r26, 0x04	; 4
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	ee 0f       	add	r30, r30
     32e:	ff 1f       	adc	r31, r31
     330:	ea 0d       	add	r30, r10
     332:	fb 1d       	adc	r31, r11
     334:	e5 50       	subi	r30, 0x05	; 5
     336:	ff 4f       	sbci	r31, 0xFF	; 255
     338:	20 81       	ld	r18, Z
     33a:	31 81       	ldd	r19, Z+1	; 0x01
     33c:	8d 91       	ld	r24, X+
     33e:	9c 91       	ld	r25, X
     340:	82 27       	eor	r24, r18
     342:	93 27       	eor	r25, r19
     344:	91 83       	std	Z+1, r25	; 0x01
     346:	80 83       	st	Z, r24
					//turn on step number, or turn off step number.
					//step sequencer mode.
					break;
     348:	10 c0       	rjmp	.+32     	; 0x36a <listenTrigButtons+0xd0>
					//we want this functionality for both case 2 and case 3
					case 2:
					case 3:;
					//select track for sample assignment
					//uint16_t currentSample = (buttonCurrentPattern->trackSampleMSB[bc]<<8)|(buttonCurrentPattern->trackSampleLSB[bc]);
					currentGlobals->currentTrack = bc;
     34a:	f6 01       	movw	r30, r12
     34c:	c5 83       	std	Z+5, r28	; 0x05
					currentGlobals->valueChangeFlag |=(1<<triggerChange);
     34e:	82 85       	ldd	r24, Z+10	; 0x0a
     350:	82 60       	ori	r24, 0x02	; 2
     352:	82 87       	std	Z+10, r24	; 0x0a
					trackControl(buttonCurrentPattern->trackSampleLSB[bc], buttonCurrentPattern->trackSampleMSB[bc], buttonCurrentPattern->trackOutputRoute[bc], buttonCurrentPattern->trackPlayMode[bc]);
     354:	d7 01       	movw	r26, r14
     356:	2c 91       	ld	r18, X
     358:	f7 01       	movw	r30, r14
     35a:	e0 57       	subi	r30, 0x70	; 112
     35c:	f1 09       	sbc	r31, r1
     35e:	40 81       	ld	r20, Z
     360:	f7 01       	movw	r30, r14
     362:	60 89       	ldd	r22, Z+16	; 0x10
     364:	80 a1       	ldd	r24, Z+32	; 0x20
     366:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <trackControl>
					default:
					//this should be the same as case 0;
					break;
				}
			}
			fullBitsParse = fullBitsParse>>1;
     36a:	16 95       	lsr	r17
     36c:	07 95       	ror	r16
	{
		lastFullBits = currentGlobals->currentTrigButtons;
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     36e:	cf 5f       	subi	r28, 0xFF	; 255
     370:	ff ef       	ldi	r31, 0xFF	; 255
     372:	ef 1a       	sub	r14, r31
     374:	ff 0a       	sbc	r15, r31
     376:	c0 31       	cpi	r28, 0x10	; 16
     378:	09 f0       	breq	.+2      	; 0x37c <listenTrigButtons+0xe2>
     37a:	bc cf       	rjmp	.-136    	; 0x2f4 <listenTrigButtons+0x5a>
				}
			}
			fullBitsParse = fullBitsParse>>1;
		}
	}
}
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	df 90       	pop	r13
     388:	cf 90       	pop	r12
     38a:	bf 90       	pop	r11
     38c:	af 90       	pop	r10
     38e:	08 95       	ret

00000390 <listenGPButtons>:

void listenGPButtons(Pattern currentPattern, Globals *currentGlobals) //may need to be a pointer
{
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	cc 57       	subi	r28, 0x7C	; 124
     3a0:	de 4f       	sbci	r29, 0xFE	; 254
     3a2:	08 81       	ld	r16, Y
     3a4:	19 81       	ldd	r17, Y+1	; 0x01
     3a6:	c4 58       	subi	r28, 0x84	; 132
     3a8:	d1 40       	sbci	r29, 0x01	; 1

	if(button_down(1 << PB5))
     3aa:	80 e2       	ldi	r24, 0x20	; 32
     3ac:	66 d0       	rcall	.+204    	; 0x47a <button_down>
     3ae:	88 23       	and	r24, r24
     3b0:	41 f1       	breq	.+80     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{ //top encoder button
		if(currentGlobals->menuState>>4==3)
     3b2:	f8 01       	movw	r30, r16
     3b4:	86 81       	ldd	r24, Z+6	; 0x06
     3b6:	82 95       	swap	r24
     3b8:	8f 70       	andi	r24, 0x0F	; 15
     3ba:	83 30       	cpi	r24, 0x03	; 3
     3bc:	21 f4       	brne	.+8      	; 0x3c6 <listenGPButtons+0x36>
		{
			globalWrite(currentGlobals);
     3be:	c8 01       	movw	r24, r16
     3c0:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <globalWrite>
     3c4:	1e c0       	rjmp	.+60     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		}else
		{
			eepromSavePattern(currentPattern, currentGlobals->currentPatternNumber);
     3c6:	f8 01       	movw	r30, r16
     3c8:	83 81       	ldd	r24, Z+3	; 0x03
     3ca:	8f 93       	push	r24
     3cc:	8d b7       	in	r24, 0x3d	; 61
     3ce:	9e b7       	in	r25, 0x3e	; 62
     3d0:	8b 57       	subi	r24, 0x7B	; 123
     3d2:	91 40       	sbci	r25, 0x01	; 1
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	9e bf       	out	0x3e, r25	; 62
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	8d bf       	out	0x3d, r24	; 61
     3de:	ad b7       	in	r26, 0x3d	; 61
     3e0:	be b7       	in	r27, 0x3e	; 62
     3e2:	11 96       	adiw	r26, 0x01	; 1
     3e4:	8b e7       	ldi	r24, 0x7B	; 123
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	fe 01       	movw	r30, r28
     3ea:	39 96       	adiw	r30, 0x09	; 9
     3ec:	01 90       	ld	r0, Z+
     3ee:	0d 92       	st	X+, r0
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <listenGPButtons+0x5c>
     3f4:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <eepromSavePattern>
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	f8 94       	cli
     3fc:	de bf       	out	0x3e, r29	; 62
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	cd bf       	out	0x3d, r28	; 61
		}
		
	}

	uint8_t encoderSwitchMask = 0b00001000;
	if(button_down(1<<PB6))
     402:	80 e4       	ldi	r24, 0x40	; 64
     404:	3a d0       	rcall	.+116    	; 0x47a <button_down>
     406:	88 23       	and	r24, r24
     408:	51 f0       	breq	.+20     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		{//bottom encoder button
			uint8_t encoderBCheck = currentGlobals->menuState&encoderSwitchMask;
     40a:	f8 01       	movw	r30, r16
     40c:	86 81       	ldd	r24, Z+6	; 0x06
			if(encoderBCheck)
     40e:	83 ff       	sbrs	r24, 3
     410:	03 c0       	rjmp	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			{
				currentGlobals->menuState &=0b11110111;//turn off the encoderBFlag
     412:	87 7f       	andi	r24, 0xF7	; 247
     414:	86 83       	std	Z+6, r24	; 0x06
     416:	03 c0       	rjmp	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>

			}else
			{
				currentGlobals->menuState |=0b00001000; //turn on the encoderBFlag bit
     418:	88 60       	ori	r24, 0x08	; 8
     41a:	f8 01       	movw	r30, r16
     41c:	86 83       	std	Z+6, r24	; 0x06
			}
		}
	uint8_t playButtonMask = 0b0000001; //we could probably make a define for both of these masks.
	uint8_t playStateCheck = currentGlobals->playState & playButtonMask;
     41e:	f8 01       	movw	r30, r16
	if(button_down(1<<PB4))
     420:	f7 80       	ldd	r15, Z+7	; 0x07
     422:	80 e1       	ldi	r24, 0x10	; 16
     424:	2a d0       	rcall	.+84     	; 0x47a <button_down>
     426:	88 23       	and	r24, r24
     428:	71 f0       	breq	.+28     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	{
		if(playStateCheck)
     42a:	f0 fe       	sbrs	r15, 0
     42c:	06 c0       	rjmp	.+12     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		{
			currentGlobals->playState=0; //playstate is on, turn it off
     42e:	f8 01       	movw	r30, r16
     430:	17 82       	std	Z+7, r1	; 0x07
			currentGlobals->currentGPButtons &=(~0x20); //turn the first bit
     432:	82 81       	ldd	r24, Z+2	; 0x02
     434:	8f 7d       	andi	r24, 0xDF	; 223
     436:	82 83       	std	Z+2, r24	; 0x02
     438:	06 c0       	rjmp	.+12     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			
		}else
		{
			currentGlobals->playState=1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	f8 01       	movw	r30, r16
     43e:	87 83       	std	Z+7, r24	; 0x07
			currentGlobals->currentGPButtons |= 0x20; //turn on the first bit
     440:	82 81       	ldd	r24, Z+2	; 0x02
     442:	80 62       	ori	r24, 0x20	; 32
     444:	82 83       	std	Z+2, r24	; 0x02
		}

	} //not sure which button this is
	uint8_t trackButtonMask = 0b00000001;
	uint8_t trackStateCheck = (currentGlobals->buttonSwitchFlag) & trackButtonMask;
     446:	f8 01       	movw	r30, r16
	if(button_down(1<<PB0))
     448:	f1 84       	ldd	r15, Z+9	; 0x09
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	16 d0       	rcall	.+44     	; 0x47a <button_down>
     44e:	88 23       	and	r24, r24
     450:	71 f0       	breq	.+28     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
	{
		if(trackStateCheck)
     452:	f0 fe       	sbrs	r15, 0
     454:	06 c0       	rjmp	.+12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		{
			currentGlobals->buttonSwitchFlag = 0;
     456:	f8 01       	movw	r30, r16
     458:	11 86       	std	Z+9, r1	; 0x09
			currentGlobals->currentGPButtons &=(~0x02);
     45a:	82 81       	ldd	r24, Z+2	; 0x02
     45c:	8d 7f       	andi	r24, 0xFD	; 253
     45e:	82 83       	std	Z+2, r24	; 0x02
     460:	06 c0       	rjmp	.+12     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
		}else
		{
			currentGlobals->buttonSwitchFlag = 1;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	f8 01       	movw	r30, r16
     466:	81 87       	std	Z+9, r24	; 0x09
			currentGlobals->currentGPButtons |=0x02;
     468:	82 81       	ldd	r24, Z+2	; 0x02
     46a:	82 60       	ori	r24, 0x02	; 2
     46c:	82 83       	std	Z+2, r24	; 0x02
		}
	}
}
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	1f 91       	pop	r17
     474:	0f 91       	pop	r16
     476:	ff 90       	pop	r15
     478:	08 95       	ret

0000047a <button_down>:

volatile uint8_t buttons_down;
uint8_t button_down(uint8_t button_mask)
{
	//I should probably check out what this is.
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     47a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     47c:	f8 94       	cli
	{
		button_mask &= buttons_down;
     47e:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <buttons_down>
     482:	89 23       	and	r24, r25
		buttons_down ^= button_mask;
     484:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <buttons_down>
     488:	98 27       	eor	r25, r24
     48a:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <buttons_down>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     48e:	2f bf       	out	0x3f, r18	; 63
	}
	
	return button_mask;
     490:	08 95       	ret

00000492 <initEncoders>:
	
	//Interrupt pins - 2,3,4,5
	
	
	//setup rising edge detection on Int pins 2 and 3 (would maybe want all pin states if this doesn't work).
	EICRA |=(1<<ISC31)|(1<<ISC30)|(1 << ISC21)|(1 << ISC20); 
     492:	e9 e6       	ldi	r30, 0x69	; 105
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	80 6f       	ori	r24, 0xF0	; 240
     49a:	80 83       	st	Z, r24
	
	//same setup on pins 4 and 5
	EICRB |=(1<<ISC51)|(1<<ISC50)|(1 << ISC41)|(1 << ISC40);
     49c:	ea e6       	ldi	r30, 0x6A	; 106
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	8f 60       	ori	r24, 0x0F	; 15
     4a4:	80 83       	st	Z, r24
	
	//enable all 4 interrupts through masking
	EIMSK |=(1<<INT2)|(1<<INT3)|(1<<INT4)|(1<<INT5);
     4a6:	8d b3       	in	r24, 0x1d	; 29
     4a8:	8c 63       	ori	r24, 0x3C	; 60
     4aa:	8d bb       	out	0x1d, r24	; 29
     4ac:	08 95       	ret

000004ae <__vector_3>:


}
 
ISR(INT2_vect)
{
     4ae:	1f 92       	push	r1
     4b0:	0f 92       	push	r0
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	0f 92       	push	r0
     4b6:	11 24       	eor	r1, r1
     4b8:	8f 93       	push	r24
     4ba:	9f 93       	push	r25
	if(0b00000010&encoderPortStates)//this means Pin 2 is coming after pin 3
     4bc:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <encoderPortStates>
     4c0:	81 ff       	sbrs	r24, 1
     4c2:	09 c0       	rjmp	.+18     	; 0x4d6 <__vector_3+0x28>
	{
		bottomEncoderValue--;
     4c4:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <bottomEncoderValue>
     4c8:	91 50       	subi	r25, 0x01	; 1
     4ca:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <bottomEncoderValue>
		encoderPortStates&=0b00001100; //reset our two pins to low. 
     4ce:	8c 70       	andi	r24, 0x0C	; 12
     4d0:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <encoderPortStates>
     4d4:	03 c0       	rjmp	.+6      	; 0x4dc <__vector_3+0x2e>
	}
	else
	{
		encoderPortStates|=0b00001101; //we want to set bit 1. 
     4d6:	8d 60       	ori	r24, 0x0D	; 13
     4d8:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <encoderPortStates>
	}
}
     4dc:	9f 91       	pop	r25
     4de:	8f 91       	pop	r24
     4e0:	0f 90       	pop	r0
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	0f 90       	pop	r0
     4e6:	1f 90       	pop	r1
     4e8:	18 95       	reti

000004ea <__vector_4>:

ISR(INT3_vect)
{
     4ea:	1f 92       	push	r1
     4ec:	0f 92       	push	r0
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	0f 92       	push	r0
     4f2:	11 24       	eor	r1, r1
     4f4:	8f 93       	push	r24
     4f6:	9f 93       	push	r25
	if(0b00000001&encoderPortStates)//this means Pin 3 is coming after pin 2
     4f8:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <encoderPortStates>
     4fc:	80 ff       	sbrs	r24, 0
     4fe:	09 c0       	rjmp	.+18     	; 0x512 <__vector_4+0x28>
	{
		bottomEncoderValue++;
     500:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <bottomEncoderValue>
     504:	9f 5f       	subi	r25, 0xFF	; 255
     506:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <bottomEncoderValue>
		encoderPortStates&=0b00001100; //reset our two pins to low.
     50a:	8c 70       	andi	r24, 0x0C	; 12
     50c:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <encoderPortStates>
     510:	03 c0       	rjmp	.+6      	; 0x518 <__vector_4+0x2e>
	}
	else
	{
		encoderPortStates|=0b00001110; //we want to set bit 2.
     512:	8e 60       	ori	r24, 0x0E	; 14
     514:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <encoderPortStates>
	}
}
     518:	9f 91       	pop	r25
     51a:	8f 91       	pop	r24
     51c:	0f 90       	pop	r0
     51e:	0f be       	out	0x3f, r0	; 63
     520:	0f 90       	pop	r0
     522:	1f 90       	pop	r1
     524:	18 95       	reti

00000526 <__vector_5>:

ISR(INT4_vect)
{
     526:	1f 92       	push	r1
     528:	0f 92       	push	r0
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	0f 92       	push	r0
     52e:	11 24       	eor	r1, r1
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
	if(0b00001000&encoderPortStates)//this means Pin 4 is coming after pin 5
     534:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <encoderPortStates>
     538:	83 ff       	sbrs	r24, 3
     53a:	09 c0       	rjmp	.+18     	; 0x54e <__vector_5+0x28>
	{
		topEncoderValue++;
     53c:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <topEncoderValue>
     540:	9f 5f       	subi	r25, 0xFF	; 255
     542:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <topEncoderValue>
		encoderPortStates&=0b00000011; //reset our two pins to low.
     546:	83 70       	andi	r24, 0x03	; 3
     548:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <encoderPortStates>
     54c:	03 c0       	rjmp	.+6      	; 0x554 <__vector_5+0x2e>
	}
	else
	{
		encoderPortStates|=0b00000111; //we want to set bit three.
     54e:	87 60       	ori	r24, 0x07	; 7
     550:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <encoderPortStates>
	}
}
     554:	9f 91       	pop	r25
     556:	8f 91       	pop	r24
     558:	0f 90       	pop	r0
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	0f 90       	pop	r0
     55e:	1f 90       	pop	r1
     560:	18 95       	reti

00000562 <__vector_6>:

ISR(INT5_vect)
{
     562:	1f 92       	push	r1
     564:	0f 92       	push	r0
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	0f 92       	push	r0
     56a:	11 24       	eor	r1, r1
     56c:	8f 93       	push	r24
     56e:	9f 93       	push	r25
	if(0b00000100&encoderPortStates)//this means Pin 3 is coming after pin 2
     570:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <encoderPortStates>
     574:	82 ff       	sbrs	r24, 2
     576:	09 c0       	rjmp	.+18     	; 0x58a <__vector_6+0x28>
	{
		topEncoderValue--;
     578:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <topEncoderValue>
     57c:	91 50       	subi	r25, 0x01	; 1
     57e:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <topEncoderValue>
		encoderPortStates&=0b00000011; //reset our two pins to low.
     582:	83 70       	andi	r24, 0x03	; 3
     584:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <encoderPortStates>
     588:	03 c0       	rjmp	.+6      	; 0x590 <__vector_6+0x2e>
	}
	else
	{
		encoderPortStates|=0b00001011; //we want to set bit two.
     58a:	8b 60       	ori	r24, 0x0B	; 11
     58c:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <encoderPortStates>
	}
}
     590:	9f 91       	pop	r25
     592:	8f 91       	pop	r24
     594:	0f 90       	pop	r0
     596:	0f be       	out	0x3f, r0	; 63
     598:	0f 90       	pop	r0
     59a:	1f 90       	pop	r1
     59c:	18 95       	reti

0000059e <listenEncoders>:


void listenEncoders(Pattern *currentPattern, Globals *currentGlobals)
{
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	ac 01       	movw	r20, r24
     5a8:	db 01       	movw	r26, r22
	if(topEncoderValue!=topEncoderLastValue)
     5aa:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <topEncoderValue>
     5ae:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <topEncoderLastValue>
     5b2:	92 17       	cp	r25, r18
     5b4:	91 f0       	breq	.+36     	; 0x5da <listenEncoders+0x3c>
	{
		currentGlobals->menuState = ((topEncoderValue%4)<<4);
     5b6:	89 2f       	mov	r24, r25
     5b8:	83 70       	andi	r24, 0x03	; 3
     5ba:	82 95       	swap	r24
     5bc:	80 7f       	andi	r24, 0xF0	; 240
     5be:	16 96       	adiw	r26, 0x06	; 6
     5c0:	8c 93       	st	X, r24
     5c2:	16 97       	sbiw	r26, 0x06	; 6
		bottomEncoderValue = 0;
     5c4:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <bottomEncoderValue>
		currentGlobals->valueChangeFlag |= (1<<encoderChange);
     5c8:	1a 96       	adiw	r26, 0x0a	; 10
     5ca:	8c 91       	ld	r24, X
     5cc:	1a 97       	sbiw	r26, 0x0a	; 10
     5ce:	81 60       	ori	r24, 0x01	; 1
     5d0:	1a 96       	adiw	r26, 0x0a	; 10
     5d2:	8c 93       	st	X, r24
		topEncoderLastValue = topEncoderValue;
     5d4:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <topEncoderLastValue>
		
		//This seems to fix a bug where when going into performance mode, patternNumber is decremented.
		//may not be the best solution.
		return; 
     5d8:	39 c2       	rjmp	.+1138   	; 0xa4c <listenEncoders+0x4ae>
	}
	
	if(bottomEncoderValue!=bottomEncoderLastValue)
     5da:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <bottomEncoderValue>
     5de:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <bottomEncoderLastValue>
     5e2:	98 17       	cp	r25, r24
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <listenEncoders+0x4a>
     5e6:	32 c2       	rjmp	.+1124   	; 0xa4c <listenEncoders+0x4ae>
	{
		 uint8_t menuSub = bottomEncoderValue - bottomEncoderLastValue;
     5e8:	98 1b       	sub	r25, r24
		 currentGlobals->valueChangeFlag |= (1<<encoderChange);
     5ea:	1a 96       	adiw	r26, 0x0a	; 10
     5ec:	8c 91       	ld	r24, X
     5ee:	1a 97       	sbiw	r26, 0x0a	; 10
     5f0:	81 60       	ori	r24, 0x01	; 1
     5f2:	1a 96       	adiw	r26, 0x0a	; 10
     5f4:	8c 93       	st	X, r24
     5f6:	1a 97       	sbiw	r26, 0x0a	; 10
		 			//if this value is negative, we increase the menu.
		 			//if positive, we decrement the menu.
		switch(currentGlobals->menuState)
     5f8:	16 96       	adiw	r26, 0x06	; 6
     5fa:	0c 91       	ld	r16, X
     5fc:	16 97       	sbiw	r26, 0x06	; 6
     5fe:	10 e0       	ldi	r17, 0x00	; 0
     600:	0b 33       	cpi	r16, 0x3B	; 59
     602:	11 05       	cpc	r17, r1
     604:	08 f0       	brcs	.+2      	; 0x608 <listenEncoders+0x6a>
     606:	1e c2       	rjmp	.+1084   	; 0xa44 <listenEncoders+0x4a6>
     608:	f8 01       	movw	r30, r16
     60a:	88 27       	eor	r24, r24
     60c:	ee 58       	subi	r30, 0x8E	; 142
     60e:	ff 4f       	sbci	r31, 0xFF	; 255
     610:	8f 4f       	sbci	r24, 0xFF	; 255
     612:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__tablejump2__>
		{
			case PreformanceModeInit:
			if(menuSub==1)
     616:	91 30       	cpi	r25, 0x01	; 1
     618:	71 f4       	brne	.+28     	; 0x636 <listenEncoders+0x98>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     61a:	13 96       	adiw	r26, 0x03	; 3
     61c:	8c 91       	ld	r24, X
     61e:	13 97       	sbiw	r26, 0x03	; 3
     620:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     622:	21 f0       	breq	.+8      	; 0x62c <listenEncoders+0x8e>
		switch(currentGlobals->menuState)
		{
			case PreformanceModeInit:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     624:	13 96       	adiw	r26, 0x03	; 3
     626:	8c 93       	st	X, r24
     628:	13 97       	sbiw	r26, 0x03	; 3
     62a:	13 c0       	rjmp	.+38     	; 0x652 <listenEncoders+0xb4>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     62c:	8f ef       	ldi	r24, 0xFF	; 255
     62e:	13 96       	adiw	r26, 0x03	; 3
     630:	8c 93       	st	X, r24
     632:	13 97       	sbiw	r26, 0x03	; 3
     634:	0e c0       	rjmp	.+28     	; 0x652 <listenEncoders+0xb4>
				}
				
			}else if(menuSub==255) //we don't want to hit this when switching menus after changing from the sequencer. 
     636:	9f 3f       	cpi	r25, 0xFF	; 255
     638:	61 f4       	brne	.+24     	; 0x652 <listenEncoders+0xb4>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     63a:	13 96       	adiw	r26, 0x03	; 3
     63c:	8c 91       	ld	r24, X
     63e:	13 97       	sbiw	r26, 0x03	; 3
     640:	81 50       	subi	r24, 0x01	; 1
     642:	20 f0       	brcs	.+8      	; 0x64c <listenEncoders+0xae>
     644:	13 96       	adiw	r26, 0x03	; 3
     646:	8c 93       	st	X, r24
     648:	13 97       	sbiw	r26, 0x03	; 3
     64a:	03 c0       	rjmp	.+6      	; 0x652 <listenEncoders+0xb4>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     64c:	13 96       	adiw	r26, 0x03	; 3
     64e:	1c 92       	st	X, r1
     650:	13 97       	sbiw	r26, 0x03	; 3
				}
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     652:	13 96       	adiw	r26, 0x03	; 3
     654:	6c 91       	ld	r22, X
     656:	ca 01       	movw	r24, r20
     658:	0e 94 04 19 	call	0x3208	; 0x3208 <eepromLoadPattern>
			break;
     65c:	f3 c1       	rjmp	.+998    	; 0xa44 <listenEncoders+0x4a6>
			
			case SequencerMenuArrow1:			
			if(menuSub==1)
     65e:	91 30       	cpi	r25, 0x01	; 1
     660:	21 f4       	brne	.+8      	; 0x66a <listenEncoders+0xcc>
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     662:	83 e1       	ldi	r24, 0x13	; 19
     664:	16 96       	adiw	r26, 0x06	; 6
     666:	8c 93       	st	X, r24
     668:	ed c1       	rjmp	.+986    	; 0xa44 <listenEncoders+0x4a6>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     66a:	82 e1       	ldi	r24, 0x12	; 18
     66c:	16 96       	adiw	r26, 0x06	; 6
     66e:	8c 93       	st	X, r24
     670:	e9 c1       	rjmp	.+978    	; 0xa44 <listenEncoders+0x4a6>
			}
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
     672:	91 30       	cpi	r25, 0x01	; 1
     674:	71 f4       	brne	.+28     	; 0x692 <listenEncoders+0xf4>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     676:	13 96       	adiw	r26, 0x03	; 3
     678:	8c 91       	ld	r24, X
     67a:	13 97       	sbiw	r26, 0x03	; 3
     67c:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     67e:	21 f0       	breq	.+8      	; 0x688 <listenEncoders+0xea>
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     680:	13 96       	adiw	r26, 0x03	; 3
     682:	8c 93       	st	X, r24
     684:	13 97       	sbiw	r26, 0x03	; 3
     686:	11 c0       	rjmp	.+34     	; 0x6aa <listenEncoders+0x10c>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	13 96       	adiw	r26, 0x03	; 3
     68c:	8c 93       	st	X, r24
     68e:	13 97       	sbiw	r26, 0x03	; 3
     690:	0c c0       	rjmp	.+24     	; 0x6aa <listenEncoders+0x10c>
				}
		
			}else
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     692:	13 96       	adiw	r26, 0x03	; 3
     694:	8c 91       	ld	r24, X
     696:	13 97       	sbiw	r26, 0x03	; 3
     698:	81 50       	subi	r24, 0x01	; 1
     69a:	20 f0       	brcs	.+8      	; 0x6a4 <listenEncoders+0x106>
     69c:	13 96       	adiw	r26, 0x03	; 3
     69e:	8c 93       	st	X, r24
     6a0:	13 97       	sbiw	r26, 0x03	; 3
     6a2:	03 c0       	rjmp	.+6      	; 0x6aa <listenEncoders+0x10c>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     6a4:	13 96       	adiw	r26, 0x03	; 3
     6a6:	1c 92       	st	X, r1
     6a8:	13 97       	sbiw	r26, 0x03	; 3
				}	
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     6aa:	13 96       	adiw	r26, 0x03	; 3
     6ac:	6c 91       	ld	r22, X
     6ae:	ca 01       	movw	r24, r20
     6b0:	0e 94 04 19 	call	0x3208	; 0x3208 <eepromLoadPattern>
			//this keeps the knob reads that will happen right after the eeprom load to write over the loaded values.
			//Now when you load a pattern, the saved positions of the knobs are unchanged until you turn a knob. 
			break;
     6b4:	c7 c1       	rjmp	.+910    	; 0xa44 <listenEncoders+0x4a6>
			
			case SequencerMenuArrow2:
			if(menuSub==1)
     6b6:	91 30       	cpi	r25, 0x01	; 1
     6b8:	21 f4       	brne	.+8      	; 0x6c2 <listenEncoders+0x124>
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     6ba:	81 e1       	ldi	r24, 0x11	; 17
     6bc:	16 96       	adiw	r26, 0x06	; 6
     6be:	8c 93       	st	X, r24
     6c0:	c1 c1       	rjmp	.+898    	; 0xa44 <listenEncoders+0x4a6>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     6c2:	83 e1       	ldi	r24, 0x13	; 19
     6c4:	16 96       	adiw	r26, 0x06	; 6
     6c6:	8c 93       	st	X, r24
     6c8:	bd c1       	rjmp	.+890    	; 0xa44 <listenEncoders+0x4a6>
			}
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
     6ca:	91 30       	cpi	r25, 0x01	; 1
     6cc:	79 f4       	brne	.+30     	; 0x6ec <listenEncoders+0x14e>
			{
				currentPattern->numSteps++;
     6ce:	fa 01       	movw	r30, r20
     6d0:	e6 53       	subi	r30, 0x36	; 54
     6d2:	ff 4f       	sbci	r31, 0xFF	; 255
     6d4:	80 81       	ld	r24, Z
     6d6:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentPattern->numSteps>64)
     6d8:	81 34       	cpi	r24, 0x41	; 65
     6da:	10 f4       	brcc	.+4      	; 0x6e0 <listenEncoders+0x142>
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
			{
				currentPattern->numSteps++;
     6dc:	80 83       	st	Z, r24
     6de:	b2 c1       	rjmp	.+868    	; 0xa44 <listenEncoders+0x4a6>
				if(currentPattern->numSteps>64)
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
     6e0:	fa 01       	movw	r30, r20
     6e2:	e6 53       	subi	r30, 0x36	; 54
     6e4:	ff 4f       	sbci	r31, 0xFF	; 255
     6e6:	80 e4       	ldi	r24, 0x40	; 64
     6e8:	80 83       	st	Z, r24
     6ea:	ac c1       	rjmp	.+856    	; 0xa44 <listenEncoders+0x4a6>
				}
			}else
			{
				currentPattern->numSteps--;
     6ec:	fa 01       	movw	r30, r20
     6ee:	e6 53       	subi	r30, 0x36	; 54
     6f0:	ff 4f       	sbci	r31, 0xFF	; 255
     6f2:	90 81       	ld	r25, Z
     6f4:	91 50       	subi	r25, 0x01	; 1
				if(currentPattern->numSteps<1)
     6f6:	11 f0       	breq	.+4      	; 0x6fc <listenEncoders+0x15e>
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
				}
			}else
			{
				currentPattern->numSteps--;
     6f8:	90 83       	st	Z, r25
     6fa:	a4 c1       	rjmp	.+840    	; 0xa44 <listenEncoders+0x4a6>
				if(currentPattern->numSteps<1)
				{//we can't have a 0 step pattern. 
					currentPattern->numSteps=1;
     6fc:	fa 01       	movw	r30, r20
     6fe:	e6 53       	subi	r30, 0x36	; 54
     700:	ff 4f       	sbci	r31, 0xFF	; 255
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	80 83       	st	Z, r24
     706:	9e c1       	rjmp	.+828    	; 0xa44 <listenEncoders+0x4a6>
				}
			}
			break;
			
			case SequencerMenuArrow3:;
			if(menuSub==1)
     708:	91 30       	cpi	r25, 0x01	; 1
     70a:	21 f4       	brne	.+8      	; 0x714 <listenEncoders+0x176>
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     70c:	82 e1       	ldi	r24, 0x12	; 18
     70e:	16 96       	adiw	r26, 0x06	; 6
     710:	8c 93       	st	X, r24
     712:	98 c1       	rjmp	.+816    	; 0xa44 <listenEncoders+0x4a6>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     714:	81 e1       	ldi	r24, 0x11	; 17
     716:	16 96       	adiw	r26, 0x06	; 6
     718:	8c 93       	st	X, r24
     71a:	94 c1       	rjmp	.+808    	; 0xa44 <listenEncoders+0x4a6>
			}
			break;
			
			case SequencerMenuArrow3Select:
			//change current step number
			if(menuSub==1)
     71c:	91 30       	cpi	r25, 0x01	; 1
     71e:	91 f4       	brne	.+36     	; 0x744 <listenEncoders+0x1a6>
			{
				currentGlobals->currentStep++;
     720:	14 96       	adiw	r26, 0x04	; 4
     722:	9c 91       	ld	r25, X
     724:	14 97       	sbiw	r26, 0x04	; 4
     726:	9f 5f       	subi	r25, 0xFF	; 255
     728:	14 96       	adiw	r26, 0x04	; 4
     72a:	9c 93       	st	X, r25
     72c:	14 97       	sbiw	r26, 0x04	; 4
				if(currentGlobals->currentStep>=currentPattern->numSteps)
     72e:	fa 01       	movw	r30, r20
     730:	e6 53       	subi	r30, 0x36	; 54
     732:	ff 4f       	sbci	r31, 0xFF	; 255
     734:	80 81       	ld	r24, Z
     736:	98 17       	cp	r25, r24
     738:	08 f4       	brcc	.+2      	; 0x73c <listenEncoders+0x19e>
     73a:	84 c1       	rjmp	.+776    	; 0xa44 <listenEncoders+0x4a6>
				{//our ceiling is the maximum number of steps.
					currentGlobals->currentStep=(currentPattern->numSteps)-1;
     73c:	81 50       	subi	r24, 0x01	; 1
     73e:	14 96       	adiw	r26, 0x04	; 4
     740:	8c 93       	st	X, r24
     742:	80 c1       	rjmp	.+768    	; 0xa44 <listenEncoders+0x4a6>
				}
			}else
			{
				currentGlobals->currentStep--;
     744:	14 96       	adiw	r26, 0x04	; 4
     746:	9c 91       	ld	r25, X
     748:	14 97       	sbiw	r26, 0x04	; 4
     74a:	91 50       	subi	r25, 0x01	; 1
     74c:	14 96       	adiw	r26, 0x04	; 4
     74e:	9c 93       	st	X, r25
     750:	14 97       	sbiw	r26, 0x04	; 4
				if(currentGlobals->currentStep>currentPattern->numSteps)
     752:	fa 01       	movw	r30, r20
     754:	e6 53       	subi	r30, 0x36	; 54
     756:	ff 4f       	sbci	r31, 0xFF	; 255
     758:	80 81       	ld	r24, Z
     75a:	89 17       	cp	r24, r25
     75c:	08 f0       	brcs	.+2      	; 0x760 <listenEncoders+0x1c2>
     75e:	72 c1       	rjmp	.+740    	; 0xa44 <listenEncoders+0x4a6>
				{//do no write notes to step 0.
					currentGlobals->currentStep=0;
     760:	14 96       	adiw	r26, 0x04	; 4
     762:	1c 92       	st	X, r1
     764:	6f c1       	rjmp	.+734    	; 0xa44 <listenEncoders+0x4a6>
				}				
			}
			break;
			
			case TrackMenuArrow1:;
			if(menuSub==1)
     766:	91 30       	cpi	r25, 0x01	; 1
     768:	21 f4       	brne	.+8      	; 0x772 <listenEncoders+0x1d4>
			{
				currentGlobals->menuState = TrackMenuArrow5;
     76a:	85 e2       	ldi	r24, 0x25	; 37
     76c:	16 96       	adiw	r26, 0x06	; 6
     76e:	8c 93       	st	X, r24
     770:	69 c1       	rjmp	.+722    	; 0xa44 <listenEncoders+0x4a6>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow2;
     772:	82 e2       	ldi	r24, 0x22	; 34
     774:	16 96       	adiw	r26, 0x06	; 6
     776:	8c 93       	st	X, r24
     778:	65 c1       	rjmp	.+714    	; 0xa44 <listenEncoders+0x4a6>
			}
			break;
			
			case TrackMenuArrow1Select:;
			uint16_t currentSample = ((currentPattern->trackSampleMSB[currentGlobals->currentTrack])<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     77a:	15 96       	adiw	r26, 0x05	; 5
     77c:	6c 91       	ld	r22, X
     77e:	15 97       	sbiw	r26, 0x05	; 5
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	fa 01       	movw	r30, r20
     784:	e6 0f       	add	r30, r22
     786:	f7 1f       	adc	r31, r23
     788:	ef 01       	movw	r28, r30
     78a:	c8 56       	subi	r28, 0x68	; 104
     78c:	df 4f       	sbci	r29, 0xFF	; 255
     78e:	28 81       	ld	r18, Y
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	32 2f       	mov	r19, r18
     794:	22 27       	eor	r18, r18
     796:	e8 55       	subi	r30, 0x58	; 88
     798:	ff 4f       	sbci	r31, 0xFF	; 255
     79a:	80 81       	ld	r24, Z
     79c:	28 2b       	or	r18, r24
			if(menuSub==1)
     79e:	91 30       	cpi	r25, 0x01	; 1
     7a0:	49 f4       	brne	.+18     	; 0x7b4 <listenEncoders+0x216>
     7a2:	2f 5f       	subi	r18, 0xFF	; 255
     7a4:	3f 4f       	sbci	r19, 0xFF	; 255
     7a6:	21 30       	cpi	r18, 0x01	; 1
     7a8:	80 e1       	ldi	r24, 0x10	; 16
     7aa:	38 07       	cpc	r19, r24
     7ac:	40 f0       	brcs	.+16     	; 0x7be <listenEncoders+0x220>
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e1       	ldi	r19, 0x10	; 16
     7b2:	05 c0       	rjmp	.+10     	; 0x7be <listenEncoders+0x220>
				{//maximum number of indexable samples.
					currentSample=4096;
				}
			}else
			{//no samples in space 0.
				currentSample--;
     7b4:	21 50       	subi	r18, 0x01	; 1
     7b6:	31 09       	sbc	r19, r1
				if(currentSample<1)
     7b8:	11 f4       	brne	.+4      	; 0x7be <listenEncoders+0x220>
				{
					currentSample=1;
     7ba:	21 e0       	ldi	r18, 0x01	; 1
     7bc:	30 e0       	ldi	r19, 0x00	; 0
				}
			}
			currentPattern->trackSampleLSB[currentGlobals->currentTrack] = (currentSample&0x00FF);//we want to lob off the top 8 bits, just in case. May be unnecessary.
     7be:	64 0f       	add	r22, r20
     7c0:	75 1f       	adc	r23, r21
     7c2:	fb 01       	movw	r30, r22
     7c4:	e8 55       	subi	r30, 0x58	; 88
     7c6:	ff 4f       	sbci	r31, 0xFF	; 255
     7c8:	20 83       	st	Z, r18
			currentPattern->trackSampleMSB[currentGlobals->currentTrack] = (currentSample>>8); 
     7ca:	15 96       	adiw	r26, 0x05	; 5
     7cc:	8c 91       	ld	r24, X
     7ce:	48 0f       	add	r20, r24
     7d0:	51 1d       	adc	r21, r1
     7d2:	fa 01       	movw	r30, r20
     7d4:	e8 56       	subi	r30, 0x68	; 104
     7d6:	ff 4f       	sbci	r31, 0xFF	; 255
     7d8:	30 83       	st	Z, r19
			break;
     7da:	34 c1       	rjmp	.+616    	; 0xa44 <listenEncoders+0x4a6>
			
			case TrackMenuArrow2:
			if(menuSub==1)
     7dc:	91 30       	cpi	r25, 0x01	; 1
     7de:	21 f4       	brne	.+8      	; 0x7e8 <listenEncoders+0x24a>
			{
				currentGlobals->menuState = TrackMenuArrow1;
     7e0:	81 e2       	ldi	r24, 0x21	; 33
     7e2:	16 96       	adiw	r26, 0x06	; 6
     7e4:	8c 93       	st	X, r24
     7e6:	2e c1       	rjmp	.+604    	; 0xa44 <listenEncoders+0x4a6>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow3;
     7e8:	83 e2       	ldi	r24, 0x23	; 35
     7ea:	16 96       	adiw	r26, 0x06	; 6
     7ec:	8c 93       	st	X, r24
     7ee:	2a c1       	rjmp	.+596    	; 0xa44 <listenEncoders+0x4a6>
			
			case TrackMenuArrow2Select:
			//change play mode of currently selected track
			//since we only have two play modes currently,
			//we only need to flip the play mode.
			currentPattern->trackPlayMode[currentGlobals->currentTrack] = (!(currentPattern->trackPlayMode[currentGlobals->currentTrack]))&(0b00000001);
     7f0:	15 96       	adiw	r26, 0x05	; 5
     7f2:	8c 91       	ld	r24, X
     7f4:	48 0f       	add	r20, r24
     7f6:	51 1d       	adc	r21, r1
     7f8:	fa 01       	movw	r30, r20
     7fa:	e8 57       	subi	r30, 0x78	; 120
     7fc:	ff 4f       	sbci	r31, 0xFF	; 255
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	90 81       	ld	r25, Z
     802:	91 11       	cpse	r25, r1
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	80 83       	st	Z, r24
			//flip all bits, mask for first bit. 
			break;
     808:	1d c1       	rjmp	.+570    	; 0xa44 <listenEncoders+0x4a6>
			
			case TrackMenuArrow3:
			if(menuSub==1)
     80a:	91 30       	cpi	r25, 0x01	; 1
     80c:	21 f4       	brne	.+8      	; 0x816 <listenEncoders+0x278>
			{
				currentGlobals->menuState = TrackMenuArrow2;
     80e:	82 e2       	ldi	r24, 0x22	; 34
     810:	16 96       	adiw	r26, 0x06	; 6
     812:	8c 93       	st	X, r24
     814:	17 c1       	rjmp	.+558    	; 0xa44 <listenEncoders+0x4a6>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow4;
     816:	84 e2       	ldi	r24, 0x24	; 36
     818:	16 96       	adiw	r26, 0x06	; 6
     81a:	8c 93       	st	X, r24
     81c:	13 c1       	rjmp	.+550    	; 0xa44 <listenEncoders+0x4a6>
			}
			break;
			
			case TrackMenuArrow3Select:
			
			if(menuSub==1)
     81e:	91 30       	cpi	r25, 0x01	; 1
     820:	c9 f4       	brne	.+50     	; 0x854 <listenEncoders+0x2b6>
			{
				//indexing might be an issue here, don't remember if this is 0 indexed or not. 
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1 ;
     822:	15 96       	adiw	r26, 0x05	; 5
     824:	8c 91       	ld	r24, X
     826:	15 97       	sbiw	r26, 0x05	; 5
     828:	fa 01       	movw	r30, r20
     82a:	e8 0f       	add	r30, r24
     82c:	f1 1d       	adc	r31, r1
     82e:	80 8d       	ldd	r24, Z+24	; 0x18
     830:	8f 5f       	subi	r24, 0xFF	; 255
     832:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     834:	15 96       	adiw	r26, 0x05	; 5
     836:	8c 91       	ld	r24, X
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	fa 01       	movw	r30, r20
     83c:	e8 0f       	add	r30, r24
     83e:	f9 1f       	adc	r31, r25
     840:	20 8d       	ldd	r18, Z+24	; 0x18
     842:	28 30       	cpi	r18, 0x08	; 8
     844:	08 f4       	brcc	.+2      	; 0x848 <listenEncoders+0x2aa>
     846:	fe c0       	rjmp	.+508    	; 0xa44 <listenEncoders+0x4a6>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=7;
     848:	fa 01       	movw	r30, r20
     84a:	e8 0f       	add	r30, r24
     84c:	f9 1f       	adc	r31, r25
     84e:	87 e0       	ldi	r24, 0x07	; 7
     850:	80 8f       	std	Z+24, r24	; 0x18
     852:	f8 c0       	rjmp	.+496    	; 0xa44 <listenEncoders+0x4a6>
				}
			}else
			{
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])-1;
     854:	15 96       	adiw	r26, 0x05	; 5
     856:	8c 91       	ld	r24, X
     858:	15 97       	sbiw	r26, 0x05	; 5
     85a:	fa 01       	movw	r30, r20
     85c:	e8 0f       	add	r30, r24
     85e:	f1 1d       	adc	r31, r1
     860:	80 8d       	ldd	r24, Z+24	; 0x18
     862:	81 50       	subi	r24, 0x01	; 1
     864:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     866:	15 96       	adiw	r26, 0x05	; 5
     868:	8c 91       	ld	r24, X
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	fa 01       	movw	r30, r20
     86e:	e8 0f       	add	r30, r24
     870:	f9 1f       	adc	r31, r25
     872:	20 8d       	ldd	r18, Z+24	; 0x18
     874:	28 30       	cpi	r18, 0x08	; 8
     876:	08 f4       	brcc	.+2      	; 0x87a <listenEncoders+0x2dc>
     878:	e5 c0       	rjmp	.+458    	; 0xa44 <listenEncoders+0x4a6>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=0;
     87a:	fa 01       	movw	r30, r20
     87c:	e8 0f       	add	r30, r24
     87e:	f9 1f       	adc	r31, r25
     880:	10 8e       	std	Z+24, r1	; 0x18
     882:	e0 c0       	rjmp	.+448    	; 0xa44 <listenEncoders+0x4a6>
				}
			}
			break;
			
			case TrackMenuArrow4:
			if(menuSub==1)
     884:	91 30       	cpi	r25, 0x01	; 1
     886:	21 f4       	brne	.+8      	; 0x890 <listenEncoders+0x2f2>
			{
				currentGlobals->menuState = TrackMenuArrow3;
     888:	83 e2       	ldi	r24, 0x23	; 35
     88a:	16 96       	adiw	r26, 0x06	; 6
     88c:	8c 93       	st	X, r24
     88e:	da c0       	rjmp	.+436    	; 0xa44 <listenEncoders+0x4a6>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow5;
     890:	85 e2       	ldi	r24, 0x25	; 37
     892:	16 96       	adiw	r26, 0x06	; 6
     894:	8c 93       	st	X, r24
     896:	d6 c0       	rjmp	.+428    	; 0xa44 <listenEncoders+0x4a6>
			}
			break;
			
			case TrackMenuArrow4Select:
			if(menuSub==1)
     898:	91 30       	cpi	r25, 0x01	; 1
     89a:	f9 f4       	brne	.+62     	; 0x8da <listenEncoders+0x33c>
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])++;
     89c:	15 96       	adiw	r26, 0x05	; 5
     89e:	8c 91       	ld	r24, X
     8a0:	15 97       	sbiw	r26, 0x05	; 5
     8a2:	fa 01       	movw	r30, r20
     8a4:	e8 0f       	add	r30, r24
     8a6:	f1 1d       	adc	r31, r1
     8a8:	e5 51       	subi	r30, 0x15	; 21
     8aa:	ff 4f       	sbci	r31, 0xFF	; 255
     8ac:	80 81       	ld	r24, Z
     8ae:	8f 5f       	subi	r24, 0xFF	; 255
     8b0:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>4)
     8b2:	15 96       	adiw	r26, 0x05	; 5
     8b4:	8c 91       	ld	r24, X
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	fa 01       	movw	r30, r20
     8ba:	e8 0f       	add	r30, r24
     8bc:	f9 1f       	adc	r31, r25
     8be:	e5 51       	subi	r30, 0x15	; 21
     8c0:	ff 4f       	sbci	r31, 0xFF	; 255
     8c2:	20 81       	ld	r18, Z
     8c4:	25 30       	cpi	r18, 0x05	; 5
     8c6:	08 f4       	brcc	.+2      	; 0x8ca <listenEncoders+0x32c>
     8c8:	bd c0       	rjmp	.+378    	; 0xa44 <listenEncoders+0x4a6>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=4;
     8ca:	48 0f       	add	r20, r24
     8cc:	59 1f       	adc	r21, r25
     8ce:	fa 01       	movw	r30, r20
     8d0:	e5 51       	subi	r30, 0x15	; 21
     8d2:	ff 4f       	sbci	r31, 0xFF	; 255
     8d4:	84 e0       	ldi	r24, 0x04	; 4
     8d6:	80 83       	st	Z, r24
     8d8:	b5 c0       	rjmp	.+362    	; 0xa44 <listenEncoders+0x4a6>
				}
			}else
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])--;
     8da:	15 96       	adiw	r26, 0x05	; 5
     8dc:	8c 91       	ld	r24, X
     8de:	15 97       	sbiw	r26, 0x05	; 5
     8e0:	fa 01       	movw	r30, r20
     8e2:	e8 0f       	add	r30, r24
     8e4:	f1 1d       	adc	r31, r1
     8e6:	e5 51       	subi	r30, 0x15	; 21
     8e8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ea:	80 81       	ld	r24, Z
     8ec:	81 50       	subi	r24, 0x01	; 1
     8ee:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>4)
     8f0:	15 96       	adiw	r26, 0x05	; 5
     8f2:	8c 91       	ld	r24, X
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	fa 01       	movw	r30, r20
     8f8:	e8 0f       	add	r30, r24
     8fa:	f9 1f       	adc	r31, r25
     8fc:	e5 51       	subi	r30, 0x15	; 21
     8fe:	ff 4f       	sbci	r31, 0xFF	; 255
     900:	20 81       	ld	r18, Z
     902:	25 30       	cpi	r18, 0x05	; 5
     904:	08 f4       	brcc	.+2      	; 0x908 <listenEncoders+0x36a>
     906:	9e c0       	rjmp	.+316    	; 0xa44 <listenEncoders+0x4a6>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=0;
     908:	48 0f       	add	r20, r24
     90a:	59 1f       	adc	r21, r25
     90c:	fa 01       	movw	r30, r20
     90e:	e5 51       	subi	r30, 0x15	; 21
     910:	ff 4f       	sbci	r31, 0xFF	; 255
     912:	10 82       	st	Z, r1
     914:	97 c0       	rjmp	.+302    	; 0xa44 <listenEncoders+0x4a6>
				}
			}
			break;
			
			case TrackMenuArrow5:
			if(menuSub==1)
     916:	91 30       	cpi	r25, 0x01	; 1
     918:	21 f4       	brne	.+8      	; 0x922 <listenEncoders+0x384>
			{
				currentGlobals->menuState = TrackMenuArrow4;
     91a:	84 e2       	ldi	r24, 0x24	; 36
     91c:	16 96       	adiw	r26, 0x06	; 6
     91e:	8c 93       	st	X, r24
     920:	91 c0       	rjmp	.+290    	; 0xa44 <listenEncoders+0x4a6>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow1;
     922:	81 e2       	ldi	r24, 0x21	; 33
     924:	16 96       	adiw	r26, 0x06	; 6
     926:	8c 93       	st	X, r24
     928:	8d c0       	rjmp	.+282    	; 0xa44 <listenEncoders+0x4a6>
			}
			break;
			
			case TrackMenuArrow5Select:
			if(menuSub==1)
     92a:	91 30       	cpi	r25, 0x01	; 1
     92c:	f9 f4       	brne	.+62     	; 0x96c <listenEncoders+0x3ce>
			{
				currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]++;
     92e:	15 96       	adiw	r26, 0x05	; 5
     930:	8c 91       	ld	r24, X
     932:	15 97       	sbiw	r26, 0x05	; 5
     934:	fa 01       	movw	r30, r20
     936:	e8 0f       	add	r30, r24
     938:	f1 1d       	adc	r31, r1
     93a:	e5 52       	subi	r30, 0x25	; 37
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	8f 5f       	subi	r24, 0xFF	; 255
     942:	80 83       	st	Z, r24
				if(currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]>254)
     944:	15 96       	adiw	r26, 0x05	; 5
     946:	8c 91       	ld	r24, X
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	fa 01       	movw	r30, r20
     94c:	e8 0f       	add	r30, r24
     94e:	f9 1f       	adc	r31, r25
     950:	e5 52       	subi	r30, 0x25	; 37
     952:	ff 4f       	sbci	r31, 0xFF	; 255
     954:	20 81       	ld	r18, Z
     956:	2f 3f       	cpi	r18, 0xFF	; 255
     958:	09 f0       	breq	.+2      	; 0x95c <listenEncoders+0x3be>
     95a:	74 c0       	rjmp	.+232    	; 0xa44 <listenEncoders+0x4a6>
				{
					currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] = 254;
     95c:	48 0f       	add	r20, r24
     95e:	59 1f       	adc	r21, r25
     960:	fa 01       	movw	r30, r20
     962:	e5 52       	subi	r30, 0x25	; 37
     964:	ff 4f       	sbci	r31, 0xFF	; 255
     966:	8e ef       	ldi	r24, 0xFE	; 254
     968:	80 83       	st	Z, r24
     96a:	6c c0       	rjmp	.+216    	; 0xa44 <listenEncoders+0x4a6>
				}
			}else
			{
				currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]--;
     96c:	15 96       	adiw	r26, 0x05	; 5
     96e:	8c 91       	ld	r24, X
     970:	15 97       	sbiw	r26, 0x05	; 5
     972:	fa 01       	movw	r30, r20
     974:	e8 0f       	add	r30, r24
     976:	f1 1d       	adc	r31, r1
     978:	e5 52       	subi	r30, 0x25	; 37
     97a:	ff 4f       	sbci	r31, 0xFF	; 255
     97c:	80 81       	ld	r24, Z
     97e:	81 50       	subi	r24, 0x01	; 1
     980:	80 83       	st	Z, r24
				if(currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]>254)
     982:	15 96       	adiw	r26, 0x05	; 5
     984:	8c 91       	ld	r24, X
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	fa 01       	movw	r30, r20
     98a:	e8 0f       	add	r30, r24
     98c:	f9 1f       	adc	r31, r25
     98e:	e5 52       	subi	r30, 0x25	; 37
     990:	ff 4f       	sbci	r31, 0xFF	; 255
     992:	20 81       	ld	r18, Z
     994:	2f 3f       	cpi	r18, 0xFF	; 255
     996:	09 f0       	breq	.+2      	; 0x99a <listenEncoders+0x3fc>
     998:	55 c0       	rjmp	.+170    	; 0xa44 <listenEncoders+0x4a6>
				{
					currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] = 0;
     99a:	48 0f       	add	r20, r24
     99c:	59 1f       	adc	r21, r25
     99e:	fa 01       	movw	r30, r20
     9a0:	e5 52       	subi	r30, 0x25	; 37
     9a2:	ff 4f       	sbci	r31, 0xFF	; 255
     9a4:	10 82       	st	Z, r1
     9a6:	4e c0       	rjmp	.+156    	; 0xa44 <listenEncoders+0x4a6>
				}
			}
			break;
			
			case GlobalMenuArrow1:
			if(menuSub==1)
     9a8:	91 30       	cpi	r25, 0x01	; 1
     9aa:	21 f4       	brne	.+8      	; 0x9b4 <listenEncoders+0x416>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     9ac:	81 e3       	ldi	r24, 0x31	; 49
     9ae:	16 96       	adiw	r26, 0x06	; 6
     9b0:	8c 93       	st	X, r24
     9b2:	48 c0       	rjmp	.+144    	; 0xa44 <listenEncoders+0x4a6>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     9b4:	82 e3       	ldi	r24, 0x32	; 50
     9b6:	16 96       	adiw	r26, 0x06	; 6
     9b8:	8c 93       	st	X, r24
     9ba:	44 c0       	rjmp	.+136    	; 0xa44 <listenEncoders+0x4a6>
			}
			break;
			
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
     9bc:	91 30       	cpi	r25, 0x01	; 1
     9be:	69 f4       	brne	.+26     	; 0x9da <listenEncoders+0x43c>
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     9c0:	1c 96       	adiw	r26, 0x0c	; 12
     9c2:	8c 91       	ld	r24, X
     9c4:	1c 97       	sbiw	r26, 0x0c	; 12
     9c6:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->midiChannel>15)
     9c8:	80 31       	cpi	r24, 0x10	; 16
     9ca:	18 f4       	brcc	.+6      	; 0x9d2 <listenEncoders+0x434>
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     9cc:	1c 96       	adiw	r26, 0x0c	; 12
     9ce:	8c 93       	st	X, r24
     9d0:	39 c0       	rjmp	.+114    	; 0xa44 <listenEncoders+0x4a6>
				if(currentGlobals->midiChannel>15)
				{
					currentGlobals->midiChannel=15;
     9d2:	8f e0       	ldi	r24, 0x0F	; 15
     9d4:	1c 96       	adiw	r26, 0x0c	; 12
     9d6:	8c 93       	st	X, r24
     9d8:	35 c0       	rjmp	.+106    	; 0xa44 <listenEncoders+0x4a6>
				}
			}
			else
			{
				//decrement midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)-1;
     9da:	1c 96       	adiw	r26, 0x0c	; 12
     9dc:	8c 91       	ld	r24, X
     9de:	1c 97       	sbiw	r26, 0x0c	; 12
     9e0:	81 50       	subi	r24, 0x01	; 1
     9e2:	18 f0       	brcs	.+6      	; 0x9ea <listenEncoders+0x44c>
     9e4:	1c 96       	adiw	r26, 0x0c	; 12
     9e6:	8c 93       	st	X, r24
     9e8:	2d c0       	rjmp	.+90     	; 0xa44 <listenEncoders+0x4a6>
				if(currentGlobals->midiChannel>254)
				{
					currentGlobals->midiChannel=0;
     9ea:	1c 96       	adiw	r26, 0x0c	; 12
     9ec:	1c 92       	st	X, r1
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <listenEncoders+0x4a6>
				}
			}
			break;
			
			case GlobalMenuArrow2:
			if(menuSub==1)
     9f0:	91 30       	cpi	r25, 0x01	; 1
     9f2:	21 f4       	brne	.+8      	; 0x9fc <listenEncoders+0x45e>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     9f4:	81 e3       	ldi	r24, 0x31	; 49
     9f6:	16 96       	adiw	r26, 0x06	; 6
     9f8:	8c 93       	st	X, r24
     9fa:	24 c0       	rjmp	.+72     	; 0xa44 <listenEncoders+0x4a6>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     9fc:	82 e3       	ldi	r24, 0x32	; 50
     9fe:	16 96       	adiw	r26, 0x06	; 6
     a00:	8c 93       	st	X, r24
     a02:	20 c0       	rjmp	.+64     	; 0xa44 <listenEncoders+0x4a6>
			break;
			
			case GlobalMenuArrow2Select:;
			//change midi note for selected track.
			//midi range is 0 to 127.
			uint8_t currentMidiNote = currentGlobals->midiTrackNote[currentGlobals->currentTrack];
     a04:	15 96       	adiw	r26, 0x05	; 5
     a06:	2c 91       	ld	r18, X
     a08:	15 97       	sbiw	r26, 0x05	; 5
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	fb 01       	movw	r30, r22
     a0e:	e2 0f       	add	r30, r18
     a10:	f3 1f       	adc	r31, r19
     a12:	85 85       	ldd	r24, Z+13	; 0x0d
			if(menuSub==1)
     a14:	91 30       	cpi	r25, 0x01	; 1
     a16:	21 f4       	brne	.+8      	; 0xa20 <listenEncoders+0x482>
			{
				//not 100% sure how to set this up.
				currentMidiNote++;
     a18:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentMidiNote>127)
     a1a:	32 f4       	brpl	.+12     	; 0xa28 <listenEncoders+0x48a>
				{
					currentMidiNote = 127;
     a1c:	8f e7       	ldi	r24, 0x7F	; 127
     a1e:	04 c0       	rjmp	.+8      	; 0xa28 <listenEncoders+0x48a>
				}
			}else
			{
				currentMidiNote--;
     a20:	81 50       	subi	r24, 0x01	; 1
				if(currentMidiNote>128)
     a22:	81 38       	cpi	r24, 0x81	; 129
     a24:	08 f0       	brcs	.+2      	; 0xa28 <listenEncoders+0x48a>
				{
					currentMidiNote = 0;
     a26:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			currentGlobals->midiTrackNote[currentGlobals->currentTrack] = currentMidiNote;
     a28:	a2 0f       	add	r26, r18
     a2a:	b3 1f       	adc	r27, r19
     a2c:	1d 96       	adiw	r26, 0x0d	; 13
     a2e:	8c 93       	st	X, r24
			break;
     a30:	09 c0       	rjmp	.+18     	; 0xa44 <listenEncoders+0x4a6>
			
			case GlobalMenuArrow3:
			//currently unreachable, no settings live here atm		
			if(menuSub==1)
     a32:	91 30       	cpi	r25, 0x01	; 1
     a34:	21 f4       	brne	.+8      	; 0xa3e <listenEncoders+0x4a0>
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     a36:	82 e3       	ldi	r24, 0x32	; 50
     a38:	16 96       	adiw	r26, 0x06	; 6
     a3a:	8c 93       	st	X, r24
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <listenEncoders+0x4a6>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     a3e:	81 e3       	ldi	r24, 0x31	; 49
     a40:	16 96       	adiw	r26, 0x06	; 6
     a42:	8c 93       	st	X, r24
			
			case GlobalMenuArrow3Select:
			//nothing to put here yet.
			break;
		}
		bottomEncoderLastValue = bottomEncoderValue;
     a44:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <bottomEncoderValue>
     a48:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <bottomEncoderLastValue>
		//menuSub=0;
	}
}
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	08 95       	ret

00000a56 <initArrays>:
#include "globalVariables.h"
#include <string.h>

//takes an array less than 20 and fills it with blank characters
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	ec 01       	movw	r28, r24
	uint8_t lengthOfString = strlen(myString);
     a60:	fa 01       	movw	r30, r20
     a62:	01 90       	ld	r0, Z+
     a64:	00 20       	and	r0, r0
     a66:	e9 f7       	brne	.-6      	; 0xa62 <initArrays+0xc>
     a68:	31 97       	sbiw	r30, 0x01	; 1
     a6a:	8f 01       	movw	r16, r30
     a6c:	04 1b       	sub	r16, r20
     a6e:	15 0b       	sbc	r17, r21
     a70:	90 2f       	mov	r25, r16
	uint8_t charLeft = 20 - lengthOfString;
     a72:	84 e1       	ldi	r24, 0x14	; 20
     a74:	80 1b       	sub	r24, r16
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     a76:	00 23       	and	r16, r16
     a78:	a9 f0       	breq	.+42     	; 0xaa4 <initArrays+0x4e>
     a7a:	fa 01       	movw	r30, r20
     a7c:	25 e1       	ldi	r18, 0x15	; 21
     a7e:	26 9f       	mul	r18, r22
     a80:	d0 01       	movw	r26, r0
     a82:	27 9f       	mul	r18, r23
     a84:	b0 0d       	add	r27, r0
     a86:	11 24       	eor	r1, r1
     a88:	ac 0f       	add	r26, r28
     a8a:	bd 1f       	adc	r27, r29
     a8c:	2f ef       	ldi	r18, 0xFF	; 255
     a8e:	20 0f       	add	r18, r16
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	2f 5f       	subi	r18, 0xFF	; 255
     a94:	3f 4f       	sbci	r19, 0xFF	; 255
     a96:	42 0f       	add	r20, r18
     a98:	53 1f       	adc	r21, r19
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     a9a:	21 91       	ld	r18, Z+
     a9c:	2d 93       	st	X+, r18
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
	uint8_t lengthOfString = strlen(myString);
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     a9e:	e4 17       	cp	r30, r20
     aa0:	f5 07       	cpc	r31, r21
     aa2:	d9 f7       	brne	.-10     	; 0xa9a <initArrays+0x44>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     aa4:	88 23       	and	r24, r24
     aa6:	89 f0       	breq	.+34     	; 0xaca <initArrays+0x74>
	{
		myArray[stringNumber][currentIndex] = ' ';
     aa8:	45 e1       	ldi	r20, 0x15	; 21
     aaa:	46 9f       	mul	r20, r22
     aac:	90 01       	movw	r18, r0
     aae:	47 9f       	mul	r20, r23
     ab0:	30 0d       	add	r19, r0
     ab2:	11 24       	eor	r1, r1
     ab4:	c2 0f       	add	r28, r18
     ab6:	d3 1f       	adc	r29, r19
     ab8:	08 0f       	add	r16, r24
     aba:	80 e2       	ldi	r24, 0x20	; 32
     abc:	fe 01       	movw	r30, r28
     abe:	e9 0f       	add	r30, r25
     ac0:	f1 1d       	adc	r31, r1
     ac2:	80 83       	st	Z, r24
		currentIndex++;
     ac4:	9f 5f       	subi	r25, 0xFF	; 255
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     ac6:	90 13       	cpse	r25, r16
     ac8:	f9 cf       	rjmp	.-14     	; 0xabc <initArrays+0x66>
	{
		myArray[stringNumber][currentIndex] = ' ';
		currentIndex++;
	}
}
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	08 95       	ret

00000ad4 <initBank>:

void initBank(Pattern *currentInitPattern)
{
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	ac 01       	movw	r20, r24
     ada:	fc 01       	movw	r30, r24
     adc:	e8 55       	subi	r30, 0x58	; 88
     ade:	ff 4f       	sbci	r31, 0xFF	; 255
     ae0:	ec 01       	movw	r28, r24
     ae2:	c8 57       	subi	r28, 0x78	; 120
     ae4:	df 4f       	sbci	r29, 0xFF	; 255
     ae6:	dc 01       	movw	r26, r24
     ae8:	a5 51       	subi	r26, 0x15	; 21
     aea:	bf 4f       	sbci	r27, 0xFF	; 255
	for(uint8_t i = 0; i<16; i++)
     aec:	90 e0       	ldi	r25, 0x00	; 0
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
    currentInitPattern->trackPlayMode[i] = 0x01;
     aee:	21 e0       	ldi	r18, 0x01	; 1

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
     af0:	9f 5f       	subi	r25, 0xFF	; 255
     af2:	91 93       	st	Z+, r25
    currentInitPattern->trackPlayMode[i] = 0x01;
     af4:	29 93       	st	Y+, r18
	currentInitPattern->envelopeType[i] = 0;
     af6:	1d 92       	st	X+, r1
	currentInitPattern->trackSustainTimeLSB[i] = 0;
     af8:	12 aa       	std	Z+50, r1	; 0x32
	currentInitPattern->trackSustainTimeMSB[i] = 0;
     afa:	12 a2       	std	Z+34, r1	; 0x22
	}
}

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
     afc:	90 31       	cpi	r25, 0x10	; 16
     afe:	c1 f7       	brne	.-16     	; 0xaf0 <initBank+0x1c>
     b00:	fa 01       	movw	r30, r20
     b02:	e5 50       	subi	r30, 0x05	; 5
     b04:	ff 4f       	sbci	r31, 0xFF	; 255
     b06:	9a 01       	movw	r18, r20
     b08:	25 58       	subi	r18, 0x85	; 133
     b0a:	3e 4f       	sbci	r19, 0xFE	; 254
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     b0c:	11 92       	st	Z+, r1
     b0e:	11 92       	st	Z+, r1
	currentInitPattern->envelopeType[i] = 0;
	currentInitPattern->trackSustainTimeLSB[i] = 0;
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
     b10:	e2 17       	cp	r30, r18
     b12:	f3 07       	cpc	r31, r19
     b14:	d9 f7       	brne	.-10     	; 0xb0c <initBank+0x38>
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
 
  }
  //We need to take these and put them in global. 
  currentInitPattern->patternBPM = 120;
     b16:	fa 01       	movw	r30, r20
     b18:	e8 53       	subi	r30, 0x38	; 56
     b1a:	ff 4f       	sbci	r31, 0xFF	; 255
     b1c:	88 e7       	ldi	r24, 0x78	; 120
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	91 83       	std	Z+1, r25	; 0x01
     b22:	80 83       	st	Z, r24
  currentInitPattern->numSteps = 16;
     b24:	32 96       	adiw	r30, 0x02	; 2
     b26:	80 e1       	ldi	r24, 0x10	; 16
     b28:	80 83       	st	Z, r24
}
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <initGlobals>:

void initGlobals(Globals *currentGlobals, uint8_t factoryReset)
{
     b30:	fc 01       	movw	r30, r24
		currentGlobals->currentTrigButtons=0; //current state of Trig buttons.
     b32:	11 82       	std	Z+1, r1	; 0x01
     b34:	10 82       	st	Z, r1
		currentGlobals->currentGPButtons=0; //current state of GP buttons
     b36:	12 82       	std	Z+2, r1	; 0x02
		currentGlobals->currentPatternNumber=0; //current pattern, between 1 and 256
     b38:	13 82       	std	Z+3, r1	; 0x03
		currentGlobals->currentStep=0; // current step in the sequencer
     b3a:	14 82       	std	Z+4, r1	; 0x04
		currentGlobals->currentTrack=0; //current track being edited
     b3c:	15 82       	std	Z+5, r1	; 0x05
		currentGlobals->menuState=0; //where the menu is currently
     b3e:	16 82       	std	Z+6, r1	; 0x06
		currentGlobals->playState=0; //whether the sequencer is playing, stopped, or paused.
     b40:	17 82       	std	Z+7, r1	; 0x07
		currentGlobals->factoryReset=0; //we may not need this in this struct, but good to have for now.
     b42:	10 86       	std	Z+8, r1	; 0x08
		currentGlobals->buttonSwitchFlag=0; // could be rolled into value bits.
     b44:	11 86       	std	Z+9, r1	; 0x09
		currentGlobals->valueChangeFlag=0; //bit 0 -> changes in encoders, bit 1-> changes in buttons, bit2 -> changes in knobs
     b46:	12 86       	std	Z+10, r1	; 0x0a
		currentGlobals->knobStatus=0; //top 4 bits: knob type, bottom 4 bits: knob location.
     b48:	13 86       	std	Z+11, r1	; 0x0b
		
		if(factoryReset==1)
     b4a:	61 30       	cpi	r22, 0x01	; 1
     b4c:	09 f5       	brne	.+66     	; 0xb90 <initGlobals+0x60>
		{
			currentGlobals->midiChannel=0;
     b4e:	14 86       	std	Z+12, r1	; 0x0c
			currentGlobals->midiTrackNote[0] = 0x24;
     b50:	84 e2       	ldi	r24, 0x24	; 36
     b52:	85 87       	std	Z+13, r24	; 0x0d
			currentGlobals->midiTrackNote[1] = 0x25;
     b54:	85 e2       	ldi	r24, 0x25	; 37
     b56:	86 87       	std	Z+14, r24	; 0x0e
			currentGlobals->midiTrackNote[2] = 0x26;
     b58:	86 e2       	ldi	r24, 0x26	; 38
     b5a:	87 87       	std	Z+15, r24	; 0x0f
			currentGlobals->midiTrackNote[3] = 0x27;
     b5c:	87 e2       	ldi	r24, 0x27	; 39
     b5e:	80 8b       	std	Z+16, r24	; 0x10
			currentGlobals->midiTrackNote[4] = 0x28;
     b60:	88 e2       	ldi	r24, 0x28	; 40
     b62:	81 8b       	std	Z+17, r24	; 0x11
			currentGlobals->midiTrackNote[5] = 0x29;
     b64:	89 e2       	ldi	r24, 0x29	; 41
     b66:	82 8b       	std	Z+18, r24	; 0x12
			currentGlobals->midiTrackNote[6] = 0x2a;
     b68:	8a e2       	ldi	r24, 0x2A	; 42
     b6a:	83 8b       	std	Z+19, r24	; 0x13
			currentGlobals->midiTrackNote[7] = 0x2b;
     b6c:	8b e2       	ldi	r24, 0x2B	; 43
     b6e:	84 8b       	std	Z+20, r24	; 0x14
			currentGlobals->midiTrackNote[8] = 0x2c;
     b70:	8c e2       	ldi	r24, 0x2C	; 44
     b72:	85 8b       	std	Z+21, r24	; 0x15
			currentGlobals->midiTrackNote[9] = 0x2d;
     b74:	8d e2       	ldi	r24, 0x2D	; 45
     b76:	86 8b       	std	Z+22, r24	; 0x16
			currentGlobals->midiTrackNote[10] = 0x2e;
     b78:	8e e2       	ldi	r24, 0x2E	; 46
     b7a:	87 8b       	std	Z+23, r24	; 0x17
			currentGlobals->midiTrackNote[11] = 0x2f;
     b7c:	8f e2       	ldi	r24, 0x2F	; 47
     b7e:	80 8f       	std	Z+24, r24	; 0x18
			currentGlobals->midiTrackNote[12] = 0x30;
     b80:	80 e3       	ldi	r24, 0x30	; 48
     b82:	81 8f       	std	Z+25, r24	; 0x19
			currentGlobals->midiTrackNote[13] = 0x31;
     b84:	81 e3       	ldi	r24, 0x31	; 49
     b86:	82 8f       	std	Z+26, r24	; 0x1a
			currentGlobals->midiTrackNote[14] = 0x32;
     b88:	82 e3       	ldi	r24, 0x32	; 50
     b8a:	83 8f       	std	Z+27, r24	; 0x1b
			currentGlobals->midiTrackNote[15] = 0x33;
     b8c:	83 e3       	ldi	r24, 0x33	; 51
     b8e:	84 8f       	std	Z+28, r24	; 0x1c
     b90:	08 95       	ret

00000b92 <startADCConversion>:



uint8_t startADCConversion()
{
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     b92:	ea e7       	ldi	r30, 0x7A	; 122
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	80 64       	ori	r24, 0x40	; 64
     b9a:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     b9c:	80 81       	ld	r24, Z
     b9e:	86 fd       	sbrc	r24, 6
     ba0:	fd cf       	rjmp	.-6      	; 0xb9c <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.	
     ba2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
     ba6:	08 95       	ret

00000ba8 <initADC>:

void initADC()
{
	DDRF |= 0B00000111; //init pins F2, 1, and 0 as select pins on the external mux.
     ba8:	80 b3       	in	r24, 0x10	; 16
     baa:	87 60       	ori	r24, 0x07	; 7
     bac:	80 bb       	out	0x10, r24	; 16
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     bae:	80 e2       	ldi	r24, 0x20	; 32
     bb0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     bb4:	87 e8       	ldi	r24, 0x87	; 135
     bb6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     bba:	88 e0       	ldi	r24, 0x08	; 8
     bbc:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     bc0:	8f ef       	ldi	r24, 0xFF	; 255
     bc2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     bc6:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     bca:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <knobBufferCounter>
	startADCConversion();
     bce:	e1 cf       	rjmp	.-62     	; 0xb92 <startADCConversion>
     bd0:	08 95       	ret

00000bd2 <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     bd2:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     bd4:	98 2f       	mov	r25, r24
     bd6:	96 95       	lsr	r25
     bd8:	96 95       	lsr	r25
     bda:	2f e2       	ldi	r18, 0x2F	; 47
     bdc:	92 9f       	mul	r25, r18
     bde:	91 2d       	mov	r25, r1
     be0:	11 24       	eor	r1, r1
     be2:	96 95       	lsr	r25
     be4:	2c e2       	ldi	r18, 0x2C	; 44
     be6:	92 9f       	mul	r25, r18
     be8:	80 19       	sub	r24, r0
     bea:	11 24       	eor	r1, r1
     bec:	98 2f       	mov	r25, r24
	if(select<40)
     bee:	88 32       	cpi	r24, 0x28	; 40
     bf0:	70 f4       	brcc	.+28     	; 0xc0e <selectKnob+0x3c>
	{
		ADCSRB = (1 << MUX5);
     bf2:	88 e0       	ldi	r24, 0x08	; 8
     bf4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     bf8:	c9 2f       	mov	r28, r25
     bfa:	c7 70       	andi	r28, 0x07	; 7
		//uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     bfc:	96 95       	lsr	r25
     bfe:	96 95       	lsr	r25
     c00:	96 95       	lsr	r25
     c02:	90 62       	ori	r25, 0x20	; 32
     c04:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     c08:	c4 df       	rcall	.-120    	; 0xb92 <startADCConversion>
		

		//then the external multiplexer
		PORTF = muxSelect;
     c0a:	c1 bb       	out	0x11, r28	; 17
     c0c:	20 c0       	rjmp	.+64     	; 0xc4e <selectKnob+0x7c>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     c0e:	89 32       	cpi	r24, 0x29	; 41
     c10:	71 f0       	breq	.+28     	; 0xc2e <selectKnob+0x5c>
     c12:	18 f4       	brcc	.+6      	; 0xc1a <selectKnob+0x48>
     c14:	88 32       	cpi	r24, 0x28	; 40
     c16:	31 f0       	breq	.+12     	; 0xc24 <selectKnob+0x52>
     c18:	1a c0       	rjmp	.+52     	; 0xc4e <selectKnob+0x7c>
     c1a:	8a 32       	cpi	r24, 0x2A	; 42
     c1c:	69 f0       	breq	.+26     	; 0xc38 <selectKnob+0x66>
     c1e:	8b 32       	cpi	r24, 0x2B	; 43
     c20:	81 f0       	breq	.+32     	; 0xc42 <selectKnob+0x70>
     c22:	15 c0       	rjmp	.+42     	; 0xc4e <selectKnob+0x7c>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     c24:	85 e2       	ldi	r24, 0x25	; 37
     c26:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     c2a:	b3 df       	rcall	.-154    	; 0xb92 <startADCConversion>
		break;
     c2c:	10 c0       	rjmp	.+32     	; 0xc4e <selectKnob+0x7c>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     c2e:	86 e2       	ldi	r24, 0x26	; 38
     c30:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     c34:	ae df       	rcall	.-164    	; 0xb92 <startADCConversion>
		break;
     c36:	0b c0       	rjmp	.+22     	; 0xc4e <selectKnob+0x7c>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     c38:	87 e2       	ldi	r24, 0x27	; 39
     c3a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     c3e:	a9 df       	rcall	.-174    	; 0xb92 <startADCConversion>
		break;
     c40:	06 c0       	rjmp	.+12     	; 0xc4e <selectKnob+0x7c>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     c42:	80 e2       	ldi	r24, 0x20	; 32
     c44:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     c48:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     c4c:	a2 df       	rcall	.-188    	; 0xb92 <startADCConversion>
		break;
		}
	
	}
	
}
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <updateKnob>:

void updateKnob(uint8_t select, Globals *currentGlobals)
{
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	8b 01       	movw	r16, r22
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
     c5c:	c8 2f       	mov	r28, r24
     c5e:	d0 e0       	ldi	r29, 0x00	; 0
     c60:	98 df       	rcall	.-208    	; 0xb92 <startADCConversion>
     c62:	f8 01       	movw	r30, r16
     c64:	ec 0f       	add	r30, r28
     c66:	fd 1f       	adc	r31, r29
     c68:	85 8f       	std	Z+29, r24	; 0x1d
		currentGlobals->filteredKnobBuffer[select] = 
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
     c6a:	e7 5b       	subi	r30, 0xB7	; 183
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	40 81       	ld	r20, Z

void updateKnob(uint8_t select, Globals *currentGlobals)
{
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
		currentGlobals->filteredKnobBuffer[select] = 
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	84 1b       	sub	r24, r20
     c74:	91 09       	sbc	r25, r1
     c76:	9c 01       	movw	r18, r24
     c78:	12 f4       	brpl	.+4      	; 0xc7e <updateKnob+0x2c>
     c7a:	2f 5f       	subi	r18, 0xFF	; 255
     c7c:	3f 4f       	sbci	r19, 0xFF	; 255
     c7e:	35 95       	asr	r19
     c80:	27 95       	ror	r18
     c82:	24 0f       	add	r18, r20
     c84:	20 83       	st	Z, r18
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	08 95       	ret

00000c90 <initializeKnob>:
void initializeKnob(Globals *currentGlobals)
{
     c90:	fc 01       	movw	r30, r24
     c92:	e7 5b       	subi	r30, 0xB7	; 183
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	9c 01       	movw	r18, r24
     c98:	2b 58       	subi	r18, 0x8B	; 139
     c9a:	3f 4f       	sbci	r19, 0xFF	; 255
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
     c9c:	91 91       	ld	r25, Z+
     c9e:	93 a7       	std	Z+43, r25	; 0x2b
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
void initializeKnob(Globals *currentGlobals)
{
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
     ca0:	e2 17       	cp	r30, r18
     ca2:	f3 07       	cpc	r31, r19
     ca4:	d9 f7       	brne	.-10     	; 0xc9c <initializeKnob+0xc>
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
	}
}
     ca6:	08 95       	ret

00000ca8 <interperetKnob>:

void interperetKnob(uint8_t select, Pattern *currentKnobPattern, Globals *currentGlobals)
{//this function will compare outputs, and write to our struct.
     ca8:	4f 92       	push	r4
     caa:	5f 92       	push	r5
     cac:	6f 92       	push	r6
     cae:	7f 92       	push	r7
     cb0:	cf 92       	push	r12
     cb2:	df 92       	push	r13
     cb4:	ef 92       	push	r14
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
	select = select%44;
     cc0:	98 2f       	mov	r25, r24
     cc2:	96 95       	lsr	r25
     cc4:	96 95       	lsr	r25
     cc6:	ef e2       	ldi	r30, 0x2F	; 47
     cc8:	9e 9f       	mul	r25, r30
     cca:	e1 2d       	mov	r30, r1
     ccc:	11 24       	eor	r1, r1
     cce:	9e 2f       	mov	r25, r30
     cd0:	96 95       	lsr	r25
     cd2:	2c e2       	ldi	r18, 0x2C	; 44
     cd4:	92 9f       	mul	r25, r18
     cd6:	80 19       	sub	r24, r0
     cd8:	11 24       	eor	r1, r1
     cda:	98 2f       	mov	r25, r24
	
	if (select<40)
     cdc:	88 32       	cpi	r24, 0x28	; 40
     cde:	08 f0       	brcs	.+2      	; 0xce2 <interperetKnob+0x3a>
     ce0:	80 c1       	rjmp	.+768    	; 0xfe2 <interperetKnob+0x33a>
	{
		uint8_t positionSelect = select%8;
     ce2:	d8 2f       	mov	r29, r24
     ce4:	d7 70       	andi	r29, 0x07	; 7
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
		uint8_t bankSwitch = select/8;
     ce6:	86 95       	lsr	r24
     ce8:	86 95       	lsr	r24
     cea:	86 95       	lsr	r24
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
     cec:	da 01       	movw	r26, r20
     cee:	19 96       	adiw	r26, 0x09	; 9
     cf0:	2c 91       	ld	r18, X
     cf2:	20 ff       	sbrs	r18, 0
     cf4:	03 c0       	rjmp	.+6      	; 0xcfc <interperetKnob+0x54>
		{
			positionSelectTracks=positionSelectTracks+8;
     cf6:	c8 e0       	ldi	r28, 0x08	; 8
     cf8:	cd 0f       	add	r28, r29
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <interperetKnob+0x56>
	select = select%44;
	
	if (select<40)
	{
		uint8_t positionSelect = select%8;
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
     cfc:	cd 2f       	mov	r28, r29
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
		{
			positionSelectTracks=positionSelectTracks+8;
		}
		
		switch (bankSwitch){
     cfe:	82 30       	cpi	r24, 0x02	; 2
     d00:	09 f4       	brne	.+2      	; 0xd04 <interperetKnob+0x5c>
     d02:	a2 c0       	rjmp	.+324    	; 0xe48 <interperetKnob+0x1a0>
     d04:	7a 01       	movw	r14, r20
     d06:	6b 01       	movw	r12, r22
     d08:	83 30       	cpi	r24, 0x03	; 3
     d0a:	30 f4       	brcc	.+12     	; 0xd18 <interperetKnob+0x70>
     d0c:	88 23       	and	r24, r24
     d0e:	59 f0       	breq	.+22     	; 0xd26 <interperetKnob+0x7e>
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	09 f4       	brne	.+2      	; 0xd16 <interperetKnob+0x6e>
     d14:	69 c0       	rjmp	.+210    	; 0xde8 <interperetKnob+0x140>
     d16:	83 c1       	rjmp	.+774    	; 0x101e <interperetKnob+0x376>
     d18:	83 30       	cpi	r24, 0x03	; 3
     d1a:	09 f4       	brne	.+2      	; 0xd1e <interperetKnob+0x76>
     d1c:	bf c0       	rjmp	.+382    	; 0xe9c <interperetKnob+0x1f4>
     d1e:	84 30       	cpi	r24, 0x04	; 4
     d20:	09 f4       	brne	.+2      	; 0xd24 <interperetKnob+0x7c>
     d22:	e2 c0       	rjmp	.+452    	; 0xee8 <interperetKnob+0x240>
     d24:	7c c1       	rjmp	.+760    	; 0x101e <interperetKnob+0x376>
			uint8_t newRead = 0;
			case 0:; //outputVolume
			
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
     d26:	09 2f       	mov	r16, r25
     d28:	10 e0       	ldi	r17, 0x00	; 0
     d2a:	ca 01       	movw	r24, r20
     d2c:	80 0f       	add	r24, r16
     d2e:	91 1f       	adc	r25, r17
     d30:	fc 01       	movw	r30, r24
     d32:	eb 58       	subi	r30, 0x8B	; 139
     d34:	ff 4f       	sbci	r31, 0xFF	; 255
     d36:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
     d38:	bc 97       	sbiw	r30, 0x2c	; 44
     d3a:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
     d3c:	26 17       	cp	r18, r22
     d3e:	20 f4       	brcc	.+8      	; 0xd48 <interperetKnob+0xa0>
	{
		returnMe = v1-v2;
     d40:	b6 2f       	mov	r27, r22
     d42:	b2 1b       	sub	r27, r18
     d44:	2b 2f       	mov	r18, r27
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <interperetKnob+0xa2>
	}
	else
	{
		returnMe = v2-v1;
     d48:	26 1b       	sub	r18, r22
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];

			if(checkVariation(newRead,prevRead)>2)
     d4a:	23 30       	cpi	r18, 0x03	; 3
     d4c:	08 f4       	brcc	.+2      	; 0xd50 <interperetKnob+0xa8>
     d4e:	67 c1       	rjmp	.+718    	; 0x101e <interperetKnob+0x376>
			{
				
				int16_t negCheckValue = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 06 1c 	call	0x380c	; 0x380c <__floatsisf>
     d5a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <volumeDivisor>
     d5e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <volumeDivisor+0x1>
     d62:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <volumeDivisor+0x2>
     d66:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <volumeDivisor+0x3>
     d6a:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <__divsf3>
     d6e:	2b 01       	movw	r4, r22
     d70:	3c 01       	movw	r6, r24
     d72:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <NegativeOffset>
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 06 1c 	call	0x380c	; 0x380c <__floatsisf>
     d80:	9b 01       	movw	r18, r22
     d82:	ac 01       	movw	r20, r24
     d84:	c3 01       	movw	r24, r6
     d86:	b2 01       	movw	r22, r4
     d88:	0e 94 06 1b 	call	0x360c	; 0x360c <__subsf3>
     d8c:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <__fixsfsi>
     d90:	86 2f       	mov	r24, r22
     d92:	26 2f       	mov	r18, r22
     d94:	37 2f       	mov	r19, r23
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     d96:	f7 01       	movw	r30, r14
     d98:	92 85       	ldd	r25, Z+10	; 0x0a
     d9a:	94 60       	ori	r25, 0x04	; 4
     d9c:	92 87       	std	Z+10, r25	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value 
     d9e:	d3 87       	std	Z+11, r29	; 0x0b
				
				currentKnobPattern->outputLevelLSB[positionSelect] = (negCheckValue);
     da0:	6d 2f       	mov	r22, r29
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	f6 01       	movw	r30, r12
     da6:	e6 0f       	add	r30, r22
     da8:	f7 1f       	adc	r31, r23
     daa:	80 87       	std	Z+8, r24	; 0x08
				if(negCheckValue>(-1))
     dac:	33 23       	and	r19, r19
     dae:	2c f0       	brlt	.+10     	; 0xdba <interperetKnob+0x112>
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 0;	
     db0:	f6 01       	movw	r30, r12
     db2:	e6 0f       	add	r30, r22
     db4:	f7 1f       	adc	r31, r23
     db6:	10 82       	st	Z, r1
     db8:	05 c0       	rjmp	.+10     	; 0xdc4 <interperetKnob+0x11c>
				}else
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 255;
     dba:	9f ef       	ldi	r25, 0xFF	; 255
     dbc:	f6 01       	movw	r30, r12
     dbe:	e6 0f       	add	r30, r22
     dc0:	f7 1f       	adc	r31, r23
     dc2:	90 83       	st	Z, r25
				}
				setOutputVolume(currentKnobPattern->outputLevelLSB[positionSelect], currentKnobPattern->outputLevelMSB[positionSelect], positionSelect);
     dc4:	f6 01       	movw	r30, r12
     dc6:	e6 0f       	add	r30, r22
     dc8:	f7 1f       	adc	r31, r23
     dca:	4d 2f       	mov	r20, r29
     dcc:	60 81       	ld	r22, Z
     dce:	0e 94 99 15 	call	0x2b32	; 0x2b32 <setOutputVolume>
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     dd2:	e7 01       	movw	r28, r14
     dd4:	c0 0f       	add	r28, r16
     dd6:	d1 1f       	adc	r29, r17
     dd8:	fe 01       	movw	r30, r28
     dda:	eb 58       	subi	r30, 0x8B	; 139
     ddc:	ff 4f       	sbci	r31, 0xFF	; 255
     dde:	c7 5b       	subi	r28, 0xB7	; 183
     de0:	df 4f       	sbci	r29, 0xFF	; 255
     de2:	88 81       	ld	r24, Y
     de4:	80 83       	st	Z, r24
     de6:	1b c1       	rjmp	.+566    	; 0x101e <interperetKnob+0x376>
			}
			break;
			
 			case 1: //pitch
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
     de8:	89 2f       	mov	r24, r25
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	9a 01       	movw	r18, r20
     dee:	28 0f       	add	r18, r24
     df0:	39 1f       	adc	r19, r25
     df2:	f9 01       	movw	r30, r18
     df4:	e7 5b       	subi	r30, 0xB7	; 183
     df6:	ff 4f       	sbci	r31, 0xFF	; 255
     df8:	40 81       	ld	r20, Z
     dfa:	bc 96       	adiw	r30, 0x2c	; 44
     dfc:	20 81       	ld	r18, Z
     dfe:	24 17       	cp	r18, r20
     e00:	09 f4       	brne	.+2      	; 0xe04 <interperetKnob+0x15c>
     e02:	0d c1       	rjmp	.+538    	; 0x101e <interperetKnob+0x376>
 			{
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     e04:	d7 01       	movw	r26, r14
     e06:	1a 96       	adiw	r26, 0x0a	; 10
     e08:	2c 91       	ld	r18, X
     e0a:	1a 97       	sbiw	r26, 0x0a	; 10
     e0c:	24 60       	ori	r18, 0x04	; 4
     e0e:	1a 96       	adiw	r26, 0x0a	; 10
     e10:	2c 93       	st	X, r18
     e12:	1a 97       	sbiw	r26, 0x0a	; 10
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     e14:	2d 2f       	mov	r18, r29
     e16:	20 61       	ori	r18, 0x10	; 16
     e18:	1b 96       	adiw	r26, 0x0b	; 11
     e1a:	2c 93       	st	X, r18
 				currentKnobPattern->outputPitch[positionSelect] = (currentGlobals->filteredKnobBuffer[select]^128);
     e1c:	fb 01       	movw	r30, r22
     e1e:	ed 0f       	add	r30, r29
     e20:	f1 1d       	adc	r31, r1
     e22:	40 58       	subi	r20, 0x80	; 128
     e24:	40 8b       	std	Z+16, r20	; 0x10
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     e26:	8e 0d       	add	r24, r14
     e28:	9f 1d       	adc	r25, r15
     e2a:	9c 01       	movw	r18, r24
     e2c:	2b 58       	subi	r18, 0x8B	; 139
     e2e:	3f 4f       	sbci	r19, 0xFF	; 255
     e30:	87 5b       	subi	r24, 0xB7	; 183
     e32:	9f 4f       	sbci	r25, 0xFF	; 255
     e34:	dc 01       	movw	r26, r24
     e36:	8c 91       	ld	r24, X
     e38:	d9 01       	movw	r26, r18
     e3a:	8c 93       	st	X, r24
				outputSampleRate(positionSelect, 0, currentKnobPattern->outputPitch[positionSelect]);
     e3c:	40 89       	ldd	r20, Z+16	; 0x10
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	8d 2f       	mov	r24, r29
     e42:	0e 94 10 16 	call	0x2c20	; 0x2c20 <outputSampleRate>
     e46:	eb c0       	rjmp	.+470    	; 0x101e <interperetKnob+0x376>
 			}
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
     e48:	e9 2f       	mov	r30, r25
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	ca 01       	movw	r24, r20
     e4e:	8e 0f       	add	r24, r30
     e50:	9f 1f       	adc	r25, r31
     e52:	dc 01       	movw	r26, r24
     e54:	a7 5b       	subi	r26, 0xB7	; 183
     e56:	bf 4f       	sbci	r27, 0xFF	; 255
     e58:	2c 91       	ld	r18, X
     e5a:	9c 96       	adiw	r26, 0x2c	; 44
     e5c:	8c 91       	ld	r24, X
     e5e:	82 17       	cp	r24, r18
     e60:	09 f4       	brne	.+2      	; 0xe64 <interperetKnob+0x1bc>
     e62:	dd c0       	rjmp	.+442    	; 0x101e <interperetKnob+0x376>
			{
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     e64:	da 01       	movw	r26, r20
     e66:	1a 96       	adiw	r26, 0x0a	; 10
     e68:	8c 91       	ld	r24, X
     e6a:	1a 97       	sbiw	r26, 0x0a	; 10
     e6c:	84 60       	ori	r24, 0x04	; 4
     e6e:	1a 96       	adiw	r26, 0x0a	; 10
     e70:	8c 93       	st	X, r24
     e72:	1a 97       	sbiw	r26, 0x0a	; 10
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
     e74:	8d 2f       	mov	r24, r29
     e76:	80 62       	ori	r24, 0x20	; 32
     e78:	1b 96       	adiw	r26, 0x0b	; 11
     e7a:	8c 93       	st	X, r24
				
				//we will eventually need a switch to write to the MSB also, for both attack and release.
				currentKnobPattern->trackAttackTimeLSB[positionSelectTracks] = (currentGlobals->filteredKnobBuffer[select]);
     e7c:	6c 0f       	add	r22, r28
     e7e:	71 1d       	adc	r23, r1
     e80:	db 01       	movw	r26, r22
     e82:	a8 5a       	subi	r26, 0xA8	; 168
     e84:	bf 4f       	sbci	r27, 0xFF	; 255
     e86:	2c 93       	st	X, r18
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     e88:	e4 0f       	add	r30, r20
     e8a:	f5 1f       	adc	r31, r21
     e8c:	df 01       	movw	r26, r30
     e8e:	ab 58       	subi	r26, 0x8B	; 139
     e90:	bf 4f       	sbci	r27, 0xFF	; 255
     e92:	e7 5b       	subi	r30, 0xB7	; 183
     e94:	ff 4f       	sbci	r31, 0xFF	; 255
     e96:	80 81       	ld	r24, Z
     e98:	8c 93       	st	X, r24
     e9a:	c1 c0       	rjmp	.+386    	; 0x101e <interperetKnob+0x376>
			}
			break;
 			
 			case 3:
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
     e9c:	29 2f       	mov	r18, r25
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	ca 01       	movw	r24, r20
     ea2:	82 0f       	add	r24, r18
     ea4:	93 1f       	adc	r25, r19
     ea6:	fc 01       	movw	r30, r24
     ea8:	e7 5b       	subi	r30, 0xB7	; 183
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	40 81       	ld	r20, Z
     eae:	bc 96       	adiw	r30, 0x2c	; 44
     eb0:	80 81       	ld	r24, Z
     eb2:	84 17       	cp	r24, r20
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <interperetKnob+0x210>
     eb6:	b3 c0       	rjmp	.+358    	; 0x101e <interperetKnob+0x376>
 			{
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     eb8:	f7 01       	movw	r30, r14
     eba:	82 85       	ldd	r24, Z+10	; 0x0a
     ebc:	84 60       	ori	r24, 0x04	; 4
     ebe:	82 87       	std	Z+10, r24	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     ec0:	8d 2f       	mov	r24, r29
     ec2:	80 63       	ori	r24, 0x30	; 48
     ec4:	83 87       	std	Z+11, r24	; 0x0b
 				currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks] = currentGlobals->filteredKnobBuffer[select];
     ec6:	cc 0e       	add	r12, r28
     ec8:	d1 1c       	adc	r13, r1
     eca:	f6 01       	movw	r30, r12
     ecc:	e8 58       	subi	r30, 0x88	; 136
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	40 83       	st	Z, r20
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     ed2:	2e 0d       	add	r18, r14
     ed4:	3f 1d       	adc	r19, r15
     ed6:	f9 01       	movw	r30, r18
     ed8:	eb 58       	subi	r30, 0x8B	; 139
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	d9 01       	movw	r26, r18
     ede:	a7 5b       	subi	r26, 0xB7	; 183
     ee0:	bf 4f       	sbci	r27, 0xFF	; 255
     ee2:	8c 91       	ld	r24, X
     ee4:	80 83       	st	Z, r24
     ee6:	9b c0       	rjmp	.+310    	; 0x101e <interperetKnob+0x376>
 			}
 			break;
 			
 			case 4:;
 			//int16_t currentTrackValue = ((currentKnobPattern->trackMainVolumeMSB[positionSelectTracks]<<8)|(currentKnobPattern->trackMainVolumeLSB[positionSelectTracks]));
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
     ee8:	09 2f       	mov	r16, r25
     eea:	10 e0       	ldi	r17, 0x00	; 0
     eec:	ca 01       	movw	r24, r20
     eee:	80 0f       	add	r24, r16
     ef0:	91 1f       	adc	r25, r17
     ef2:	fc 01       	movw	r30, r24
     ef4:	eb 58       	subi	r30, 0x8B	; 139
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
     efa:	bc 97       	sbiw	r30, 0x2c	; 44
     efc:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
     efe:	26 17       	cp	r18, r22
     f00:	20 f4       	brcc	.+8      	; 0xf0a <interperetKnob+0x262>
	{
		returnMe = v1-v2;
     f02:	f6 2f       	mov	r31, r22
     f04:	f2 1b       	sub	r31, r18
     f06:	2f 2f       	mov	r18, r31
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <interperetKnob+0x264>
	}
	else
	{
		returnMe = v2-v1;
     f0a:	26 1b       	sub	r18, r22
 			
 			case 4:;
 			//int16_t currentTrackValue = ((currentKnobPattern->trackMainVolumeMSB[positionSelectTracks]<<8)|(currentKnobPattern->trackMainVolumeLSB[positionSelectTracks]));
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];
 			if(checkVariation(newRead,prevRead)>2)
     f0c:	23 30       	cpi	r18, 0x03	; 3
     f0e:	08 f4       	brcc	.+2      	; 0xf12 <interperetKnob+0x26a>
     f10:	86 c0       	rjmp	.+268    	; 0x101e <interperetKnob+0x376>
 			{
				int16_t negCheckValueTrack = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 06 1c 	call	0x380c	; 0x380c <__floatsisf>
     f1c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <volumeDivisor>
     f20:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <volumeDivisor+0x1>
     f24:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <volumeDivisor+0x2>
     f28:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <volumeDivisor+0x3>
     f2c:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <__divsf3>
     f30:	2b 01       	movw	r4, r22
     f32:	3c 01       	movw	r6, r24
     f34:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <NegativeOffset>
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 06 1c 	call	0x380c	; 0x380c <__floatsisf>
     f42:	9b 01       	movw	r18, r22
     f44:	ac 01       	movw	r20, r24
     f46:	c3 01       	movw	r24, r6
     f48:	b2 01       	movw	r22, r4
     f4a:	0e 94 06 1b 	call	0x360c	; 0x360c <__subsf3>
     f4e:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <__fixsfsi>
     f52:	86 2f       	mov	r24, r22
     f54:	97 2f       	mov	r25, r23
     f56:	9c 01       	movw	r18, r24
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     f58:	d7 01       	movw	r26, r14
     f5a:	1a 96       	adiw	r26, 0x0a	; 10
     f5c:	8c 91       	ld	r24, X
     f5e:	1a 97       	sbiw	r26, 0x0a	; 10
     f60:	84 60       	ori	r24, 0x04	; 4
     f62:	1a 96       	adiw	r26, 0x0a	; 10
     f64:	8c 93       	st	X, r24
     f66:	1a 97       	sbiw	r26, 0x0a	; 10
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     f68:	8d 2f       	mov	r24, r29
     f6a:	80 64       	ori	r24, 0x40	; 64
     f6c:	1b 96       	adiw	r26, 0x0b	; 11
     f6e:	8c 93       	st	X, r24
				
	 			currentKnobPattern->trackMainVolumeLSB[positionSelectTracks] = (negCheckValueTrack);
     f70:	d0 e0       	ldi	r29, 0x00	; 0
     f72:	f6 01       	movw	r30, r12
     f74:	ec 0f       	add	r30, r28
     f76:	fd 1f       	adc	r31, r29
     f78:	60 af       	std	Z+56, r22	; 0x38
	 			if(negCheckValueTrack>(-1))
     f7a:	33 23       	and	r19, r19
     f7c:	2c f0       	brlt	.+10     	; 0xf88 <interperetKnob+0x2e0>
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 0;
     f7e:	f6 01       	movw	r30, r12
     f80:	ec 0f       	add	r30, r28
     f82:	fd 1f       	adc	r31, r29
     f84:	10 a6       	std	Z+40, r1	; 0x28
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <interperetKnob+0x2ea>
	 			}else
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 255;
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	f6 01       	movw	r30, r12
     f8c:	ec 0f       	add	r30, r28
     f8e:	fd 1f       	adc	r31, r29
     f90:	80 a7       	std	Z+40, r24	; 0x28
	 			}

				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     f92:	96 01       	movw	r18, r12
     f94:	2c 0f       	add	r18, r28
     f96:	3d 1f       	adc	r19, r29
     f98:	f9 01       	movw	r30, r18
     f9a:	e8 5b       	subi	r30, 0xB8	; 184
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
				if(totalAttackTime==0) //we only want to set the track volume if the attack time is 0. otherwise, we have an envelope. 
     f9e:	80 81       	ld	r24, Z
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	98 2f       	mov	r25, r24
     fa4:	88 27       	eor	r24, r24
	 			}else
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 255;
	 			}

				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     fa6:	70 96       	adiw	r30, 0x10	; 16
				if(totalAttackTime==0) //we only want to set the track volume if the attack time is 0. otherwise, we have an envelope. 
     fa8:	20 81       	ld	r18, Z
     faa:	82 2b       	or	r24, r18
     fac:	89 2b       	or	r24, r25
     fae:	71 f4       	brne	.+28     	; 0xfcc <interperetKnob+0x324>
				{
	 				setTrackVolume(currentKnobPattern->trackSampleLSB[positionSelectTracks], currentKnobPattern->trackSampleMSB[positionSelectTracks],
     fb0:	cc 0d       	add	r28, r12
     fb2:	dd 1d       	adc	r29, r13
     fb4:	de 01       	movw	r26, r28
     fb6:	a8 56       	subi	r26, 0x68	; 104
     fb8:	bf 4f       	sbci	r27, 0xFF	; 255
     fba:	fe 01       	movw	r30, r28
     fbc:	e8 55       	subi	r30, 0x58	; 88
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	28 a5       	ldd	r18, Y+40	; 0x28
     fc2:	46 2f       	mov	r20, r22
     fc4:	6c 91       	ld	r22, X
     fc6:	80 81       	ld	r24, Z
     fc8:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <setTrackVolume>
					currentKnobPattern->trackMainVolumeLSB[positionSelectTracks], currentKnobPattern->trackMainVolumeMSB[positionSelectTracks]);
				}
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select]; 
     fcc:	0e 0d       	add	r16, r14
     fce:	1f 1d       	adc	r17, r15
     fd0:	f8 01       	movw	r30, r16
     fd2:	eb 58       	subi	r30, 0x8B	; 139
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	d8 01       	movw	r26, r16
     fd8:	a7 5b       	subi	r26, 0xB7	; 183
     fda:	bf 4f       	sbci	r27, 0xFF	; 255
     fdc:	8c 91       	ld	r24, X
     fde:	80 83       	st	Z, r24
     fe0:	1e c0       	rjmp	.+60     	; 0x101e <interperetKnob+0x376>
		}
		
		
	}else
	{
		switch (select)
     fe2:	8a 32       	cpi	r24, 0x2A	; 42
     fe4:	e1 f4       	brne	.+56     	; 0x101e <interperetKnob+0x376>
// 			break;
// 			
 			case 42:
			 
			 //we need to do a bit more filtering here. Not sure if that's happening here, or in the actual knob read.
			 if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
     fe6:	fa 01       	movw	r30, r20
     fe8:	ed 58       	subi	r30, 0x8D	; 141
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	80 81       	ld	r24, Z
     fee:	bc 96       	adiw	r30, 0x2c	; 44
     ff0:	90 81       	ld	r25, Z
     ff2:	98 17       	cp	r25, r24
     ff4:	a1 f0       	breq	.+40     	; 0x101e <interperetKnob+0x376>
			{//not sure if this works here, but we're going to try it. 
				
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     ff6:	fa 01       	movw	r30, r20
     ff8:	92 85       	ldd	r25, Z+10	; 0x0a
     ffa:	94 60       	ori	r25, 0x04	; 4
     ffc:	92 87       	std	Z+10, r25	; 0x0a
				currentGlobals->knobStatus = (5<<4); //since all other pot banks are 0-4, the next ones will be 5-8. We should maybe figure out a better system for this, 
     ffe:	90 e5       	ldi	r25, 0x50	; 80
    1000:	93 87       	std	Z+11, r25	; 0x0b
				//maybe some defines?				
 				currentKnobPattern->patternBPM = currentGlobals->filteredKnobBuffer[select];
    1002:	fb 01       	movw	r30, r22
    1004:	e8 53       	subi	r30, 0x38	; 56
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	91 83       	std	Z+1, r25	; 0x01
    100c:	80 83       	st	Z, r24
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
    100e:	da 01       	movw	r26, r20
    1010:	a1 56       	subi	r26, 0x61	; 97
    1012:	bf 4f       	sbci	r27, 0xFF	; 255
    1014:	fa 01       	movw	r30, r20
    1016:	ed 58       	subi	r30, 0x8D	; 141
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	80 81       	ld	r24, Z
    101c:	8c 93       	st	X, r24
// 			break;
		}
		
	}

}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	cf 90       	pop	r12
    102e:	7f 90       	pop	r7
    1030:	6f 90       	pop	r6
    1032:	5f 90       	pop	r5
    1034:	4f 90       	pop	r4
    1036:	08 95       	ret

00001038 <listenKnobs>:

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	7c 01       	movw	r14, r24
    1044:	8b 01       	movw	r16, r22
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    1046:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
    1048:	8c 2f       	mov	r24, r28
    104a:	c3 dd       	rcall	.-1146   	; 0xbd2 <selectKnob>
		updateKnob(loopCounter, currentGlobals);
    104c:	b8 01       	movw	r22, r16
    104e:	8c 2f       	mov	r24, r28
    1050:	00 de       	rcall	.-1024   	; 0xc52 <updateKnob>
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
    1052:	a8 01       	movw	r20, r16
    1054:	b7 01       	movw	r22, r14
    1056:	8c 2f       	mov	r24, r28
    1058:	27 de       	rcall	.-946    	; 0xca8 <interperetKnob>

}

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    105a:	cf 5f       	subi	r28, 0xFF	; 255
    105c:	cc 32       	cpi	r28, 0x2C	; 44
    105e:	a1 f7       	brne	.-24     	; 0x1048 <listenKnobs+0x10>
	{
		selectKnob(loopCounter);
		updateKnob(loopCounter, currentGlobals);
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
	}
}
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	ff 90       	pop	r15
    1068:	ef 90       	pop	r14
    106a:	08 95       	ret

0000106c <initLEDs>:
extern Pattern currentPattern;
extern uint8_t currentStep;

void initLEDs()
{
	DDRG = 0B00000111; //outputs on G5,2, and 0.
    106c:	87 e0       	ldi	r24, 0x07	; 7
    106e:	83 bb       	out	0x13, r24	; 19
    1070:	08 95       	ret

00001072 <parseLEDs>:
}
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
    1072:	a2 98       	cbi	0x14, 2	; 20
    1074:	27 e0       	ldi	r18, 0x07	; 7
	for(uint8_t j=0; j<7; j++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    1076:	a0 9a       	sbi	0x14, 0	; 20
		if(gpParse&0x80)
    1078:	66 23       	and	r22, r22
    107a:	14 f4       	brge	.+4      	; 0x1080 <parseLEDs+0xe>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    107c:	a1 9a       	sbi	0x14, 1	; 20
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <parseLEDs+0x10>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    1080:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    1082:	a0 98       	cbi	0x14, 0	; 20
		gpParse = gpParse << 1;
    1084:	66 0f       	add	r22, r22
    1086:	21 50       	subi	r18, 0x01	; 1
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t j=0; j<7; j++)
    1088:	b1 f7       	brne	.-20     	; 0x1076 <parseLEDs+0x4>
    108a:	21 e1       	ldi	r18, 0x11	; 17
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    108c:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
    108e:	99 23       	and	r25, r25
    1090:	14 f4       	brge	.+4      	; 0x1096 <parseLEDs+0x24>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    1092:	a1 9a       	sbi	0x14, 1	; 20
    1094:	01 c0       	rjmp	.+2      	; 0x1098 <parseLEDs+0x26>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    1096:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    1098:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	21 50       	subi	r18, 0x01	; 1
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
    10a0:	a9 f7       	brne	.-22     	; 0x108c <parseLEDs+0x1a>
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	
	
	PORTG |= (1 << PG2); //latch pin high
    10a2:	a2 9a       	sbi	0x14, 2	; 20
    10a4:	08 95       	ret

000010a6 <updateLEDs>:
}

void updateLEDs(Pattern ledCurrentPattern, Globals currentGlobals)
{
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	cf 57       	subi	r28, 0x7F	; 127
    10b0:	de 4f       	sbci	r29, 0xFE	; 254
    10b2:	28 81       	ld	r18, Y
    10b4:	39 81       	ldd	r19, Y+1	; 0x01
    10b6:	c1 58       	subi	r28, 0x81	; 129
    10b8:	d1 40       	sbci	r29, 0x01	; 1
    10ba:	cd 57       	subi	r28, 0x7D	; 125
    10bc:	de 4f       	sbci	r29, 0xFE	; 254
    10be:	68 81       	ld	r22, Y
    10c0:	c3 58       	subi	r28, 0x83	; 131
    10c2:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t shiftedState = currentGlobals.menuState >> 4; //this will get rid of EncoderB
	switch(shiftedState)
    10c4:	c9 57       	subi	r28, 0x79	; 121
    10c6:	de 4f       	sbci	r29, 0xFE	; 254
    10c8:	98 81       	ld	r25, Y
    10ca:	c7 58       	subi	r28, 0x87	; 135
    10cc:	d1 40       	sbci	r29, 0x01	; 1
    10ce:	92 95       	swap	r25
    10d0:	9f 70       	andi	r25, 0x0F	; 15
    10d2:	91 30       	cpi	r25, 0x01	; 1
    10d4:	49 f0       	breq	.+18     	; 0x10e8 <updateLEDs+0x42>
    10d6:	28 f0       	brcs	.+10     	; 0x10e2 <updateLEDs+0x3c>
    10d8:	92 30       	cpi	r25, 0x02	; 2
    10da:	d1 f0       	breq	.+52     	; 0x1110 <updateLEDs+0x6a>
    10dc:	93 30       	cpi	r25, 0x03	; 3
    10de:	d9 f0       	breq	.+54     	; 0x1116 <updateLEDs+0x70>
    10e0:	1c c0       	rjmp	.+56     	; 0x111a <updateLEDs+0x74>
	{
		case 0:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    10e2:	c9 01       	movw	r24, r18
    10e4:	c6 df       	rcall	.-116    	; 0x1072 <parseLEDs>
		break;
    10e6:	19 c0       	rjmp	.+50     	; 0x111a <updateLEDs+0x74>

		case 1:
		parseLEDs(ledCurrentPattern.trackSequence[currentGlobals.currentStep], currentGlobals.currentGPButtons);
    10e8:	cb 57       	subi	r28, 0x7B	; 123
    10ea:	de 4f       	sbci	r29, 0xFE	; 254
    10ec:	e8 81       	ld	r30, Y
    10ee:	c5 58       	subi	r28, 0x85	; 133
    10f0:	d1 40       	sbci	r29, 0x01	; 1
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	86 e0       	ldi	r24, 0x06	; 6
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	8c 0f       	add	r24, r28
    10fe:	9d 1f       	adc	r25, r29
    1100:	e8 0f       	add	r30, r24
    1102:	f9 1f       	adc	r31, r25
    1104:	e5 50       	subi	r30, 0x05	; 5
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	80 81       	ld	r24, Z
    110a:	91 81       	ldd	r25, Z+1	; 0x01
    110c:	b2 df       	rcall	.-156    	; 0x1072 <parseLEDs>
		break;

		case 2:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    110e:	05 c0       	rjmp	.+10     	; 0x111a <updateLEDs+0x74>
    1110:	c9 01       	movw	r24, r18
		break;
    1112:	af df       	rcall	.-162    	; 0x1072 <parseLEDs>

		case 3:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    1114:	02 c0       	rjmp	.+4      	; 0x111a <updateLEDs+0x74>
    1116:	c9 01       	movw	r24, r18
    1118:	ac df       	rcall	.-168    	; 0x1072 <parseLEDs>
		break;
	}

}
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <main>:

int main(){


	
	initScreen();
    1120:	0e 94 cb 11 	call	0x2396	; 0x2396 <initScreen>
	initGlobals(&currentGlobals, factoryReset);  
    1124:	60 91 94 03 	lds	r22, 0x0394	; 0x800394 <factoryReset>
    1128:	8d e1       	ldi	r24, 0x1D	; 29
    112a:	95 e0       	ldi	r25, 0x05	; 5
    112c:	01 dd       	rcall	.-1534   	; 0xb30 <initGlobals>
	initButtons();
    112e:	ae d8       	rcall	.-3748   	; 0x28c <initButtons>
	initLEDs();
    1130:	9d df       	rcall	.-198    	; 0x106c <initLEDs>
	initEncoders();
    1132:	af d9       	rcall	.-3234   	; 0x492 <initEncoders>
    1134:	39 dd       	rcall	.-1422   	; 0xba8 <initADC>
	initADC();
    1136:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <serialInit0>
	serialInit0();
    113a:	0e 94 24 11 	call	0x2248	; 0x2248 <initMidi>
	initMidi();
    113e:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <initEnvelopes>
	initEnvelopes();
    1142:	0e 94 4f 14 	call	0x289e	; 0x289e <initSequencer>
	initSequencer();
    1146:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi_init>
	twi_init();
    114a:	82 ea       	ldi	r24, 0xA2	; 162
	initBank(&currentPattern);
    114c:	93 e0       	ldi	r25, 0x03	; 3
    114e:	c2 dc       	rcall	.-1660   	; 0xad4 <initBank>
    1150:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <factoryReset>
	
	//this should be a global function. 
	if(factoryReset==1)
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	19 f5       	brne	.+70     	; 0x119e <main+0x7e>
    1158:	8d b7       	in	r24, 0x3d	; 61
    115a:	9e b7       	in	r25, 0x3e	; 62
	{
		//do factory reset here.
		factoryResetEeprom(currentPattern);
    115c:	8b 57       	subi	r24, 0x7B	; 123
    115e:	91 40       	sbci	r25, 0x01	; 1
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	9e bf       	out	0x3e, r25	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	8d bf       	out	0x3d, r24	; 61
    116a:	ad b7       	in	r26, 0x3d	; 61
    116c:	be b7       	in	r27, 0x3e	; 62
    116e:	11 96       	adiw	r26, 0x01	; 1
    1170:	8b e7       	ldi	r24, 0x7B	; 123
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	e2 ea       	ldi	r30, 0xA2	; 162
    1176:	f3 e0       	ldi	r31, 0x03	; 3
    1178:	01 90       	ld	r0, Z+
    117a:	0d 92       	st	X+, r0
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	e1 f7       	brne	.-8      	; 0x1178 <main+0x58>
    1180:	0e 94 b4 1a 	call	0x3568	; 0x3568 <factoryResetEeprom>
    1184:	8d b7       	in	r24, 0x3d	; 61
    1186:	9e b7       	in	r25, 0x3e	; 62
		globalWrite(&currentGlobals);
    1188:	85 58       	subi	r24, 0x85	; 133
    118a:	9e 4f       	sbci	r25, 0xFE	; 254
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	9e bf       	out	0x3e, r25	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	8d bf       	out	0x3d, r24	; 61
    1196:	8d e1       	ldi	r24, 0x1D	; 29
    1198:	95 e0       	ldi	r25, 0x05	; 5
    119a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <globalWrite>
    119e:	60 91 20 05 	lds	r22, 0x0520	; 0x800520 <currentGlobals+0x3>
	}

	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
    11a2:	82 ea       	ldi	r24, 0xA2	; 162
    11a4:	93 e0       	ldi	r25, 0x03	; 3
    11a6:	0e 94 04 19 	call	0x3208	; 0x3208 <eepromLoadPattern>
    11aa:	c0 e0       	ldi	r28, 0x00	; 0
    11ac:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    11ae:	0f 2e       	mov	r0, r31
    11b0:	fc e2       	ldi	r31, 0x2C	; 44
	{
		uint8_t loadSelect = i%44;
    11b2:	ff 2e       	mov	r15, r31
    11b4:	f0 2d       	mov	r31, r0
    11b6:	9e 01       	movw	r18, r28
    11b8:	af e2       	ldi	r26, 0x2F	; 47
    11ba:	ba eb       	ldi	r27, 0xBA	; 186
    11bc:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    11c0:	96 95       	lsr	r25
    11c2:	87 95       	ror	r24
    11c4:	92 95       	swap	r25
    11c6:	82 95       	swap	r24
    11c8:	8f 70       	andi	r24, 0x0F	; 15
    11ca:	89 27       	eor	r24, r25
    11cc:	9f 70       	andi	r25, 0x0F	; 15
    11ce:	89 27       	eor	r24, r25
    11d0:	f8 9e       	mul	r15, r24
    11d2:	90 01       	movw	r18, r0
    11d4:	f9 9e       	mul	r15, r25
    11d6:	30 0d       	add	r19, r0
    11d8:	11 24       	eor	r1, r1
    11da:	8e 01       	movw	r16, r28
    11dc:	02 1b       	sub	r16, r18
    11de:	13 0b       	sbc	r17, r19
    11e0:	80 2f       	mov	r24, r16
		selectKnob(loadSelect);
    11e2:	f7 dc       	rcall	.-1554   	; 0xbd2 <selectKnob>
    11e4:	6d e1       	ldi	r22, 0x1D	; 29
    11e6:	75 e0       	ldi	r23, 0x05	; 5
		updateKnob(loadSelect, &currentGlobals);
    11e8:	80 2f       	mov	r24, r16
    11ea:	33 dd       	rcall	.-1434   	; 0xc52 <updateKnob>
    11ec:	21 96       	adiw	r28, 0x01	; 1
    11ee:	c8 3b       	cpi	r28, 0xB8	; 184
		factoryResetEeprom(currentPattern);
		globalWrite(&currentGlobals);
	}

	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	d9 07       	cpc	r29, r25
    11f4:	01 f7       	brne	.-64     	; 0x11b6 <main+0x96>
    11f6:	8d e1       	ldi	r24, 0x1D	; 29
    11f8:	95 e0       	ldi	r25, 0x05	; 5
	{
		uint8_t loadSelect = i%44;
		selectKnob(loadSelect);
		updateKnob(loadSelect, &currentGlobals);
	}
	initializeKnob(&currentGlobals); //then copy it to the lastFilteredKnobBuffer. 
    11fa:	4a dd       	rcall	.-1388   	; 0xc90 <initializeKnob>
    11fc:	60 91 94 03 	lds	r22, 0x0394	; 0x800394 <factoryReset>
    1200:	8d e1       	ldi	r24, 0x1D	; 29
	globalLoad(&currentGlobals, factoryReset);
    1202:	95 e0       	ldi	r25, 0x05	; 5
    1204:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <globalLoad>
    1208:	8d b7       	in	r24, 0x3d	; 61
    120a:	9e b7       	in	r25, 0x3e	; 62
    120c:	87 5e       	subi	r24, 0xE7	; 231
	initMenu(&screenBank, currentPattern, currentGlobals); //fills screenBank with menu strings
    120e:	91 09       	sbc	r25, r1
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	9e bf       	out	0x3e, r25	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	8d bf       	out	0x3d, r24	; 61
    121a:	ad b7       	in	r26, 0x3d	; 61
    121c:	be b7       	in	r27, 0x3e	; 62
    121e:	11 96       	adiw	r26, 0x01	; 1
    1220:	87 ee       	ldi	r24, 0xE7	; 231
    1222:	ed e1       	ldi	r30, 0x1D	; 29
    1224:	f5 e0       	ldi	r31, 0x05	; 5
    1226:	01 90       	ld	r0, Z+
    1228:	0d 92       	st	X+, r0
    122a:	8a 95       	dec	r24
    122c:	e1 f7       	brne	.-8      	; 0x1226 <main+0x106>
    122e:	8d b7       	in	r24, 0x3d	; 61
    1230:	9e b7       	in	r25, 0x3e	; 62
    1232:	8b 57       	subi	r24, 0x7B	; 123
    1234:	91 40       	sbci	r25, 0x01	; 1
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	9e bf       	out	0x3e, r25	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	8d bf       	out	0x3d, r24	; 61
    1240:	ad b7       	in	r26, 0x3d	; 61
    1242:	be b7       	in	r27, 0x3e	; 62
    1244:	11 96       	adiw	r26, 0x01	; 1
    1246:	8b e7       	ldi	r24, 0x7B	; 123
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	e2 ea       	ldi	r30, 0xA2	; 162
    124c:	f3 e0       	ldi	r31, 0x03	; 3
    124e:	01 90       	ld	r0, Z+
    1250:	0d 92       	st	X+, r0
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	e1 f7       	brne	.-8      	; 0x124e <main+0x12e>
    1256:	84 e0       	ldi	r24, 0x04	; 4
    1258:	96 e0       	ldi	r25, 0x06	; 6
    125a:	02 d1       	rcall	.+516    	; 0x1460 <initMenu>
    125c:	84 e0       	ldi	r24, 0x04	; 4
    125e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>

	//this ISR is used for Button De-Bouncing. Maybe we could put it somewhere else. 
	TCCR2B = 1<<CS22;//using 64 from pre-scaler
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
	TIMSK2 = 1<<TOIE2;
    1268:	78 94       	sei
    126a:	8d b7       	in	r24, 0x3d	; 61
    126c:	9e b7       	in	r25, 0x3e	; 62


	sei();	
    126e:	8e 59       	subi	r24, 0x9E	; 158
    1270:	9d 4f       	sbci	r25, 0xFD	; 253
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	9e bf       	out	0x3e, r25	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	8d bf       	out	0x3d, r24	; 61
    127c:	6d e1       	ldi	r22, 0x1D	; 29
    127e:	75 e0       	ldi	r23, 0x05	; 5


while(1) {
	
	
	listenTrigButtons(&currentPattern, &currentGlobals);
    1280:	82 ea       	ldi	r24, 0xA2	; 162
    1282:	93 e0       	ldi	r25, 0x03	; 3
    1284:	0a d8       	rcall	.-4076   	; 0x29a <listenTrigButtons>
    1286:	8d e1       	ldi	r24, 0x1D	; 29
    1288:	95 e0       	ldi	r25, 0x05	; 5
    128a:	9f 93       	push	r25
	listenGPButtons(currentPattern, &currentGlobals);
    128c:	8f 93       	push	r24
    128e:	8d b7       	in	r24, 0x3d	; 61
    1290:	9e b7       	in	r25, 0x3e	; 62
    1292:	8b 57       	subi	r24, 0x7B	; 123
    1294:	91 40       	sbci	r25, 0x01	; 1
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	9e bf       	out	0x3e, r25	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	8d bf       	out	0x3d, r24	; 61
    12a0:	ad b7       	in	r26, 0x3d	; 61
    12a2:	be b7       	in	r27, 0x3e	; 62
    12a4:	11 96       	adiw	r26, 0x01	; 1
    12a6:	8b e7       	ldi	r24, 0x7B	; 123
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	e2 ea       	ldi	r30, 0xA2	; 162
    12ac:	f3 e0       	ldi	r31, 0x03	; 3
    12ae:	01 90       	ld	r0, Z+
    12b0:	0d 92       	st	X+, r0
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	e1 f7       	brne	.-8      	; 0x12ae <main+0x18e>
    12b6:	6c d8       	rcall	.-3880   	; 0x390 <listenGPButtons>
    12b8:	8d b7       	in	r24, 0x3d	; 61
    12ba:	9e b7       	in	r25, 0x3e	; 62
    12bc:	83 58       	subi	r24, 0x83	; 131
	updateLEDs(currentPattern, currentGlobals);
    12be:	9e 4f       	sbci	r25, 0xFE	; 254
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	9e bf       	out	0x3e, r25	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	8d bf       	out	0x3d, r24	; 61
    12ca:	87 5e       	subi	r24, 0xE7	; 231
    12cc:	91 09       	sbc	r25, r1
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	9e bf       	out	0x3e, r25	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	8d bf       	out	0x3d, r24	; 61
    12d8:	ad b7       	in	r26, 0x3d	; 61
    12da:	be b7       	in	r27, 0x3e	; 62
    12dc:	11 96       	adiw	r26, 0x01	; 1
    12de:	87 ee       	ldi	r24, 0xE7	; 231
    12e0:	ed e1       	ldi	r30, 0x1D	; 29
    12e2:	f5 e0       	ldi	r31, 0x05	; 5
    12e4:	01 90       	ld	r0, Z+
    12e6:	0d 92       	st	X+, r0
    12e8:	8a 95       	dec	r24
    12ea:	e1 f7       	brne	.-8      	; 0x12e4 <main+0x1c4>
    12ec:	8d b7       	in	r24, 0x3d	; 61
    12ee:	9e b7       	in	r25, 0x3e	; 62
    12f0:	8b 57       	subi	r24, 0x7B	; 123
    12f2:	91 40       	sbci	r25, 0x01	; 1
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	9e bf       	out	0x3e, r25	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	8d bf       	out	0x3d, r24	; 61
    12fe:	ad b7       	in	r26, 0x3d	; 61
    1300:	be b7       	in	r27, 0x3e	; 62
    1302:	11 96       	adiw	r26, 0x01	; 1
    1304:	8b e7       	ldi	r24, 0x7B	; 123
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	e2 ea       	ldi	r30, 0xA2	; 162
    130a:	f3 e0       	ldi	r31, 0x03	; 3
    130c:	01 90       	ld	r0, Z+
    130e:	0d 92       	st	X+, r0
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	e1 f7       	brne	.-8      	; 0x130c <main+0x1ec>
    1314:	c8 de       	rcall	.-624    	; 0x10a6 <updateLEDs>
    1316:	8d b7       	in	r24, 0x3d	; 61
    1318:	9e b7       	in	r25, 0x3e	; 62
    131a:	8e 59       	subi	r24, 0x9E	; 158
	listenEncoders(&currentPattern, &currentGlobals);
    131c:	9d 4f       	sbci	r25, 0xFD	; 253
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	9e bf       	out	0x3e, r25	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	8d bf       	out	0x3d, r24	; 61
    1328:	6d e1       	ldi	r22, 0x1D	; 29
    132a:	75 e0       	ldi	r23, 0x05	; 5
    132c:	82 ea       	ldi	r24, 0xA2	; 162
    132e:	93 e0       	ldi	r25, 0x03	; 3
    1330:	36 d9       	rcall	.-3476   	; 0x59e <listenEncoders>
    1332:	6d e1       	ldi	r22, 0x1D	; 29
    1334:	75 e0       	ldi	r23, 0x05	; 5
	listenKnobs(&currentPattern, &currentGlobals);
    1336:	82 ea       	ldi	r24, 0xA2	; 162
    1338:	93 e0       	ldi	r25, 0x03	; 3
    133a:	7e de       	rcall	.-772    	; 0x1038 <listenKnobs>
    133c:	8d b7       	in	r24, 0x3d	; 61
    133e:	9e b7       	in	r25, 0x3e	; 62
    1340:	87 5e       	subi	r24, 0xE7	; 231
	updateSequencer(currentPattern, currentGlobals);
    1342:	91 09       	sbc	r25, r1
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	9e bf       	out	0x3e, r25	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	8d bf       	out	0x3d, r24	; 61
    134e:	ad b7       	in	r26, 0x3d	; 61
    1350:	be b7       	in	r27, 0x3e	; 62
    1352:	11 96       	adiw	r26, 0x01	; 1
    1354:	87 ee       	ldi	r24, 0xE7	; 231
    1356:	ed e1       	ldi	r30, 0x1D	; 29
    1358:	f5 e0       	ldi	r31, 0x05	; 5
    135a:	01 90       	ld	r0, Z+
    135c:	0d 92       	st	X+, r0
    135e:	8a 95       	dec	r24
    1360:	e1 f7       	brne	.-8      	; 0x135a <main+0x23a>
    1362:	8d b7       	in	r24, 0x3d	; 61
    1364:	9e b7       	in	r25, 0x3e	; 62
    1366:	8b 57       	subi	r24, 0x7B	; 123
    1368:	91 40       	sbci	r25, 0x01	; 1
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	9e bf       	out	0x3e, r25	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	8d bf       	out	0x3d, r24	; 61
    1374:	ad b7       	in	r26, 0x3d	; 61
    1376:	be b7       	in	r27, 0x3e	; 62
    1378:	11 96       	adiw	r26, 0x01	; 1
    137a:	8b e7       	ldi	r24, 0x7B	; 123
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	e2 ea       	ldi	r30, 0xA2	; 162
    1380:	f3 e0       	ldi	r31, 0x03	; 3
    1382:	01 90       	ld	r0, Z+
    1384:	0d 92       	st	X+, r0
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	e1 f7       	brne	.-8      	; 0x1382 <main+0x262>
    138a:	0e 94 6f 14 	call	0x28de	; 0x28de <updateSequencer>
    138e:	8d b7       	in	r24, 0x3d	; 61
    1390:	9e b7       	in	r25, 0x3e	; 62
    1392:	8e 59       	subi	r24, 0x9E	; 158
	updateScreen(&screenBank, &currentPattern, &currentGlobals);
    1394:	9d 4f       	sbci	r25, 0xFD	; 253
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	9e bf       	out	0x3e, r25	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	8d bf       	out	0x3d, r24	; 61
    13a0:	4d e1       	ldi	r20, 0x1D	; 29
    13a2:	55 e0       	ldi	r21, 0x05	; 5
    13a4:	62 ea       	ldi	r22, 0xA2	; 162
    13a6:	73 e0       	ldi	r23, 0x03	; 3
    13a8:	84 e0       	ldi	r24, 0x04	; 4
    13aa:	96 e0       	ldi	r25, 0x06	; 6
    13ac:	99 d1       	rcall	.+818    	; 0x16e0 <updateScreen>
    13ae:	8d b7       	in	r24, 0x3d	; 61
    13b0:	9e b7       	in	r25, 0x3e	; 62
    13b2:	87 5e       	subi	r24, 0xE7	; 231
	midiRead(currentPattern, currentGlobals);
    13b4:	91 09       	sbc	r25, r1
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	9e bf       	out	0x3e, r25	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	8d bf       	out	0x3d, r24	; 61
    13c0:	ad b7       	in	r26, 0x3d	; 61
    13c2:	be b7       	in	r27, 0x3e	; 62
    13c4:	11 96       	adiw	r26, 0x01	; 1
    13c6:	87 ee       	ldi	r24, 0xE7	; 231
    13c8:	ed e1       	ldi	r30, 0x1D	; 29
    13ca:	f5 e0       	ldi	r31, 0x05	; 5
    13cc:	01 90       	ld	r0, Z+
    13ce:	0d 92       	st	X+, r0
    13d0:	8a 95       	dec	r24
    13d2:	e1 f7       	brne	.-8      	; 0x13cc <main+0x2ac>
    13d4:	8d b7       	in	r24, 0x3d	; 61
    13d6:	9e b7       	in	r25, 0x3e	; 62
    13d8:	8b 57       	subi	r24, 0x7B	; 123
    13da:	91 40       	sbci	r25, 0x01	; 1
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	9e bf       	out	0x3e, r25	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	8d bf       	out	0x3d, r24	; 61
    13e6:	ad b7       	in	r26, 0x3d	; 61
    13e8:	be b7       	in	r27, 0x3e	; 62
    13ea:	11 96       	adiw	r26, 0x01	; 1
    13ec:	8b e7       	ldi	r24, 0x7B	; 123
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	e2 ea       	ldi	r30, 0xA2	; 162
    13f2:	f3 e0       	ldi	r31, 0x03	; 3
    13f4:	01 90       	ld	r0, Z+
    13f6:	0d 92       	st	X+, r0
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	e1 f7       	brne	.-8      	; 0x13f4 <main+0x2d4>
    13fc:	35 d7       	rcall	.+3690   	; 0x2268 <midiRead>
    13fe:	8d b7       	in	r24, 0x3d	; 61
    1400:	9e b7       	in	r25, 0x3e	; 62
    1402:	8e 59       	subi	r24, 0x9E	; 158
    1404:	9d 4f       	sbci	r25, 0xFD	; 253
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	9e bf       	out	0x3e, r25	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	8d bf       	out	0x3d, r24	; 61
    1410:	35 cf       	rjmp	.-406    	; 0x127c <main+0x15c>

00001412 <__vector_32>:
    1412:	1f 92       	push	r1
    1414:	0f 92       	push	r0
    1416:	0f b6       	in	r0, 0x3f	; 63

	}
}

ISR(TIMER3_COMPA_vect)
{
    1418:	0f 92       	push	r0
    141a:	11 24       	eor	r1, r1
    141c:	0b b6       	in	r0, 0x3b	; 59
    141e:	0f 92       	push	r0
    1420:	8f 93       	push	r24
    1422:	9f 93       	push	r25
    1424:	af 93       	push	r26
    1426:	bf 93       	push	r27
    1428:	ef 93       	push	r30
    142a:	ff 93       	push	r31
	currentGlobals.releaseCounter++; //this will increase every millisecond.
    142c:	ee eb       	ldi	r30, 0xBE	; 190
    142e:	f5 e0       	ldi	r31, 0x05	; 5
    1430:	80 81       	ld	r24, Z
    1432:	91 81       	ldd	r25, Z+1	; 0x01
    1434:	a2 81       	ldd	r26, Z+2	; 0x02
    1436:	b3 81       	ldd	r27, Z+3	; 0x03
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	a1 1d       	adc	r26, r1
    143c:	b1 1d       	adc	r27, r1
    143e:	80 83       	st	Z, r24
    1440:	91 83       	std	Z+1, r25	; 0x01
    1442:	a2 83       	std	Z+2, r26	; 0x02
    1444:	b3 83       	std	Z+3, r27	; 0x03
	//should run for about 1000 hours before overflow, so not something we really have to worry about.
    1446:	ff 91       	pop	r31
    1448:	ef 91       	pop	r30
    144a:	bf 91       	pop	r27
    144c:	af 91       	pop	r26
    144e:	9f 91       	pop	r25
    1450:	8f 91       	pop	r24
    1452:	0f 90       	pop	r0
    1454:	0b be       	out	0x3b, r0	; 59
    1456:	0f 90       	pop	r0
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	0f 90       	pop	r0
    145c:	1f 90       	pop	r1
    145e:	18 95       	reti

00001460 <initMenu>:
uint8_t prevMenuState; //do we need this anymore?

//I don't like using a global extern here, instead of a passed pointer,
//but I can't seem to get the struct to stay in scope.
void initMenu(Screen *initTheScreen, Pattern currentPattern, Globals currentGlobals)
{
    1460:	cf 92       	push	r12
    1462:	df 92       	push	r13
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	8c 01       	movw	r16, r24
    1476:	c6 57       	subi	r28, 0x76	; 118
    1478:	de 4f       	sbci	r29, 0xFE	; 254
    147a:	e8 80       	ld	r14, Y
    147c:	ca 58       	subi	r28, 0x8A	; 138
    147e:	d1 40       	sbci	r29, 0x01	; 1

//screen0
initArrays(initTheScreen->screen0,0,"Performance Mode");
    1480:	40 e6       	ldi	r20, 0x60	; 96
    1482:	52 e0       	ldi	r21, 0x02	; 2
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	e6 da       	rcall	.-2612   	; 0xa56 <initArrays>
initArrays(initTheScreen->screen0,1,"Pattern:");
    148a:	41 e7       	ldi	r20, 0x71	; 113
    148c:	52 e0       	ldi	r21, 0x02	; 2
    148e:	61 e0       	ldi	r22, 0x01	; 1
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	c8 01       	movw	r24, r16
    1494:	e0 da       	rcall	.-2624   	; 0xa56 <initArrays>
initArrays(initTheScreen->screen0,2,"BPM:");
    1496:	4a e7       	ldi	r20, 0x7A	; 122
    1498:	52 e0       	ldi	r21, 0x02	; 2
    149a:	62 e0       	ldi	r22, 0x02	; 2
    149c:	70 e0       	ldi	r23, 0x00	; 0
    149e:	c8 01       	movw	r24, r16
    14a0:	da da       	rcall	.-2636   	; 0xa56 <initArrays>
initArrays(initTheScreen->screen0,3,"Stop");
    14a2:	4f e7       	ldi	r20, 0x7F	; 127
    14a4:	52 e0       	ldi	r21, 0x02	; 2
    14a6:	63 e0       	ldi	r22, 0x03	; 3
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	c8 01       	movw	r24, r16
    14ac:	d4 da       	rcall	.-2648   	; 0xa56 <initArrays>

//screen1
initArrays(initTheScreen->screen1,0,"Sequence Edit");
    14ae:	68 01       	movw	r12, r16
    14b0:	8d eb       	ldi	r24, 0xBD	; 189
    14b2:	c8 0e       	add	r12, r24
    14b4:	d1 1c       	adc	r13, r1
    14b6:	44 e8       	ldi	r20, 0x84	; 132
    14b8:	52 e0       	ldi	r21, 0x02	; 2
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	c6 01       	movw	r24, r12
    14c0:	ca da       	rcall	.-2668   	; 0xa56 <initArrays>
initArrays(initTheScreen->screen1,1,"Pattern:");
    14c2:	41 e7       	ldi	r20, 0x71	; 113
    14c4:	52 e0       	ldi	r21, 0x02	; 2
    14c6:	61 e0       	ldi	r22, 0x01	; 1
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	c6 01       	movw	r24, r12
    14cc:	c4 da       	rcall	.-2680   	; 0xa56 <initArrays>
initArrays(initTheScreen->screen1,2,"Steps:");
    14ce:	42 e9       	ldi	r20, 0x92	; 146
    14d0:	52 e0       	ldi	r21, 0x02	; 2
    14d2:	62 e0       	ldi	r22, 0x02	; 2
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	c6 01       	movw	r24, r12
    14d8:	be da       	rcall	.-2692   	; 0xa56 <initArrays>
initArrays(initTheScreen->screen1,3,"Step number:");
    14da:	49 e9       	ldi	r20, 0x99	; 153
    14dc:	52 e0       	ldi	r21, 0x02	; 2
    14de:	63 e0       	ldi	r22, 0x03	; 3
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	c6 01       	movw	r24, r12
    14e4:	b8 da       	rcall	.-2704   	; 0xa56 <initArrays>
    14e6:	68 01       	movw	r12, r16

//screen2
initArrays(initTheScreen->screen2,0,"Track Settings");
    14e8:	86 e8       	ldi	r24, 0x86	; 134
    14ea:	c8 1a       	sub	r12, r24
    14ec:	8e ef       	ldi	r24, 0xFE	; 254
    14ee:	d8 0a       	sbc	r13, r24
    14f0:	46 ea       	ldi	r20, 0xA6	; 166
    14f2:	52 e0       	ldi	r21, 0x02	; 2
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	c6 01       	movw	r24, r12
    14fa:	ad da       	rcall	.-2726   	; 0xa56 <initArrays>
initArrays(initTheScreen->screen2,1,"Track:");
    14fc:	45 eb       	ldi	r20, 0xB5	; 181
    14fe:	52 e0       	ldi	r21, 0x02	; 2
    1500:	61 e0       	ldi	r22, 0x01	; 1
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	c6 01       	movw	r24, r12
    1506:	a7 da       	rcall	.-2738   	; 0xa56 <initArrays>
initArrays(initTheScreen->screen2,2,"PlayMode:");
    1508:	4c eb       	ldi	r20, 0xBC	; 188
    150a:	52 e0       	ldi	r21, 0x02	; 2
    150c:	62 e0       	ldi	r22, 0x02	; 2
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	c6 01       	movw	r24, r12
    1512:	a1 da       	rcall	.-2750   	; 0xa56 <initArrays>
initArrays(initTheScreen->screen2,3,"OutRoute:");
    1514:	46 ec       	ldi	r20, 0xC6	; 198
    1516:	52 e0       	ldi	r21, 0x02	; 2
    1518:	63 e0       	ldi	r22, 0x03	; 3
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	c6 01       	movw	r24, r12
    151e:	9b da       	rcall	.-2762   	; 0xa56 <initArrays>
initArrays(initTheScreen->screen2,4,"EnvelopeMode:");
    1520:	40 ed       	ldi	r20, 0xD0	; 208
    1522:	52 e0       	ldi	r21, 0x02	; 2
    1524:	64 e0       	ldi	r22, 0x04	; 4
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	c6 01       	movw	r24, r12
    152a:	95 da       	rcall	.-2774   	; 0xa56 <initArrays>
    152c:	4e ed       	ldi	r20, 0xDE	; 222
initArrays(initTheScreen->screen2,5,"SustainTime: ");
    152e:	52 e0       	ldi	r21, 0x02	; 2
    1530:	65 e0       	ldi	r22, 0x05	; 5
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	c6 01       	movw	r24, r12
    1536:	8f da       	rcall	.-2786   	; 0xa56 <initArrays>
    1538:	68 01       	movw	r12, r16

//screen3
initArrays(initTheScreen->screen3,1,"Midi Channel:");
    153a:	89 ec       	ldi	r24, 0xC9	; 201
    153c:	c8 1a       	sub	r12, r24
    153e:	8d ef       	ldi	r24, 0xFD	; 253
    1540:	d8 0a       	sbc	r13, r24
    1542:	4c ee       	ldi	r20, 0xEC	; 236
    1544:	52 e0       	ldi	r21, 0x02	; 2
    1546:	61 e0       	ldi	r22, 0x01	; 1
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	c6 01       	movw	r24, r12
    154c:	84 da       	rcall	.-2808   	; 0xa56 <initArrays>
initArrays(initTheScreen->screen3,2,"Midi trig   :");
    154e:	4a ef       	ldi	r20, 0xFA	; 250
    1550:	52 e0       	ldi	r21, 0x02	; 2
    1552:	62 e0       	ldi	r22, 0x02	; 2
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	c6 01       	movw	r24, r12
    1558:	7e da       	rcall	.-2820   	; 0xa56 <initArrays>
initArrays(initTheScreen->screen3,3," ");
    155a:	4a e8       	ldi	r20, 0x8A	; 138
    155c:	53 e0       	ldi	r21, 0x03	; 3
    155e:	63 e0       	ldi	r22, 0x03	; 3
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	c6 01       	movw	r24, r12
    1564:	78 da       	rcall	.-2832   	; 0xa56 <initArrays>
initArrays(initTheScreen->screen3,0,"Global Settings");
    1566:	48 e0       	ldi	r20, 0x08	; 8
    1568:	53 e0       	ldi	r21, 0x03	; 3
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	c6 01       	movw	r24, r12
    1570:	72 da       	rcall	.-2844   	; 0xa56 <initArrays>

//init all of the knob arrays:
initArrays(initTheScreen->knobScreen,0,"OutVolume x : xxxdb");//string 0 is outVolume
    1572:	68 01       	movw	r12, r16
    1574:	8c e0       	ldi	r24, 0x0C	; 12
    1576:	c8 1a       	sub	r12, r24
    1578:	8d ef       	ldi	r24, 0xFD	; 253
    157a:	d8 0a       	sbc	r13, r24
    157c:	48 e1       	ldi	r20, 0x18	; 24
    157e:	53 e0       	ldi	r21, 0x03	; 3
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,1,"Pitch : xxx");//string 1 is pitch
    1586:	67 da       	rcall	.-2866   	; 0xa56 <initArrays>
    1588:	4c e2       	ldi	r20, 0x2C	; 44
    158a:	53 e0       	ldi	r21, 0x03	; 3
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,2,"AttackTime  : xxx MS"); //string 2 is Envelope gain
    1592:	61 da       	rcall	.-2878   	; 0xa56 <initArrays>
    1594:	48 e3       	ldi	r20, 0x38	; 56
    1596:	53 e0       	ldi	r21, 0x03	; 3
    1598:	62 e0       	ldi	r22, 0x02	; 2
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	c6 01       	movw	r24, r12
    159e:	5b da       	rcall	.-2890   	; 0xa56 <initArrays>
initArrays(initTheScreen->knobScreen,3,"ReleaseTimexx:xxxxMS"); //string 3 is Envelop Time
    15a0:	4d e4       	ldi	r20, 0x4D	; 77
    15a2:	53 e0       	ldi	r21, 0x03	; 3
    15a4:	63 e0       	ldi	r22, 0x03	; 3
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	c6 01       	movw	r24, r12
    15aa:	55 da       	rcall	.-2902   	; 0xa56 <initArrays>
initArrays(initTheScreen->knobScreen,4,"TrackVolume xx:xxxdb"); //string 4 is track Level.
    15ac:	42 e6       	ldi	r20, 0x62	; 98
    15ae:	53 e0       	ldi	r21, 0x03	; 3
    15b0:	64 e0       	ldi	r22, 0x04	; 4
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	c6 01       	movw	r24, r12
    15b6:	4f da       	rcall	.-2914   	; 0xa56 <initArrays>
    15b8:	cc 52       	subi	r28, 0x2C	; 44
//initArrays(initTheScreen->knobScreen,5,"BPM: ");
//we might want to put in one of these for BPM, but I'm not sure. 

numPrinter(initTheScreen->screen0[2],5,3, currentPattern.patternBPM);
    15ba:	df 4f       	sbci	r29, 0xFF	; 255
    15bc:	28 81       	ld	r18, Y
    15be:	39 81       	ldd	r19, Y+1	; 0x01
    15c0:	c4 5d       	subi	r28, 0xD4	; 212
    15c2:	d0 40       	sbci	r29, 0x00	; 0
    15c4:	43 e0       	ldi	r20, 0x03	; 3
    15c6:	65 e0       	ldi	r22, 0x05	; 5
    15c8:	c8 01       	movw	r24, r16
    15ca:	8a 96       	adiw	r24, 0x2a	; 42
    15cc:	59 d7       	rcall	.+3762   	; 0x2480 <numPrinter>
    15ce:	cd 56       	subi	r28, 0x6D	; 109
numPrinter(initTheScreen->screen3[1],14,2, (currentGlobals.midiChannel)+1);
    15d0:	de 4f       	sbci	r29, 0xFE	; 254
    15d2:	28 81       	ld	r18, Y
    15d4:	c3 59       	subi	r28, 0x93	; 147
    15d6:	d1 40       	sbci	r29, 0x01	; 1
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	2f 5f       	subi	r18, 0xFF	; 255
    15dc:	3f 4f       	sbci	r19, 0xFF	; 255
    15de:	42 e0       	ldi	r20, 0x02	; 2
    15e0:	6e e0       	ldi	r22, 0x0E	; 14
    15e2:	c8 01       	movw	r24, r16
    15e4:	84 5b       	subi	r24, 0xB4	; 180
    15e6:	9d 4f       	sbci	r25, 0xFD	; 253
    15e8:	4b d7       	rcall	.+3734   	; 0x2480 <numPrinter>
    15ea:	f1 2c       	mov	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	e8 1a       	sub	r14, r24
    15f0:	f8 0a       	sbc	r15, r24
    15f2:	97 01       	movw	r18, r14
    15f4:	43 e0       	ldi	r20, 0x03	; 3
    15f6:	69 e0       	ldi	r22, 0x09	; 9
    15f8:	c8 01       	movw	r24, r16
    15fa:	45 96       	adiw	r24, 0x15	; 21
    15fc:	41 d7       	rcall	.+3714   	; 0x2480 <numPrinter>
    15fe:	97 01       	movw	r18, r14
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    1600:	43 e0       	ldi	r20, 0x03	; 3
    1602:	69 e0       	ldi	r22, 0x09	; 9
    1604:	c8 01       	movw	r24, r16
    1606:	8e 52       	subi	r24, 0x2E	; 46
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	3a d7       	rcall	.+3700   	; 0x2480 <numPrinter>
    160c:	ca 52       	subi	r28, 0x2A	; 42
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
    160e:	df 4f       	sbci	r29, 0xFF	; 255
    1610:	28 81       	ld	r18, Y
    1612:	c6 5d       	subi	r28, 0xD6	; 214
    1614:	d0 40       	sbci	r29, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	42 e0       	ldi	r20, 0x02	; 2
    161a:	67 e0       	ldi	r22, 0x07	; 7
    161c:	c8 01       	movw	r24, r16
    161e:	89 51       	subi	r24, 0x19	; 25
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	2e d7       	rcall	.+3676   	; 0x2480 <numPrinter>
    1624:	c5 57       	subi	r28, 0x75	; 117
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
    1626:	de 4f       	sbci	r29, 0xFE	; 254
    1628:	28 81       	ld	r18, Y
    162a:	cb 58       	subi	r28, 0x8B	; 139
    162c:	d1 40       	sbci	r29, 0x01	; 1
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	2f 5f       	subi	r18, 0xFF	; 255
    1632:	3f 4f       	sbci	r19, 0xFF	; 255
    1634:	42 e0       	ldi	r20, 0x02	; 2
    1636:	6d e0       	ldi	r22, 0x0D	; 13
    1638:	c8 01       	movw	r24, r16
    163a:	84 50       	subi	r24, 0x04	; 4
    163c:	9f 4f       	sbci	r25, 0xFF	; 255
    163e:	20 d7       	rcall	.+3648   	; 0x2480 <numPrinter>
    1640:	e1 2c       	mov	r14, r1
    1642:	f1 2c       	mov	r15, r1
    1644:	b7 01       	movw	r22, r14
    1646:	c8 01       	movw	r24, r16
 
	for(uint8_t i=0;i<4; i++ )
	{
		outputS(initTheScreen->screen0[i],i);
    1648:	03 d7       	rcall	.+3590   	; 0x2450 <outputS>
    164a:	8f ef       	ldi	r24, 0xFF	; 255
    164c:	e8 1a       	sub	r14, r24
    164e:	f8 0a       	sbc	r15, r24
    1650:	0b 5e       	subi	r16, 0xEB	; 235
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	84 e0       	ldi	r24, 0x04	; 4
    1656:	e8 16       	cp	r14, r24
    1658:	f1 04       	cpc	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
 
	for(uint8_t i=0;i<4; i++ )
    165a:	a1 f7       	brne	.-24     	; 0x1644 <initMenu+0x1e4>
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	1f 91       	pop	r17
	{
		outputS(initTheScreen->screen0[i],i);
	}
}
    1662:	0f 91       	pop	r16
    1664:	ff 90       	pop	r15
    1666:	ef 90       	pop	r14
    1668:	df 90       	pop	r13
    166a:	cf 90       	pop	r12
    166c:	08 95       	ret

0000166e <reInitMenuOnLoad>:
    166e:	ef 92       	push	r14
    1670:	ff 92       	push	r15
    1672:	0f 93       	push	r16

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(Screen *initTheScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    1674:	1f 93       	push	r17
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	ec 01       	movw	r28, r24
    167c:	8b 01       	movw	r16, r22
    167e:	7a 01       	movw	r14, r20
	numPrinter(initTheScreen->screen0[2],5,3, currentPattern->patternBPM);
    1680:	fb 01       	movw	r30, r22
    1682:	e8 53       	subi	r30, 0x38	; 56
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	20 81       	ld	r18, Z
    1688:	31 81       	ldd	r19, Z+1	; 0x01
    168a:	43 e0       	ldi	r20, 0x03	; 3
    168c:	65 e0       	ldi	r22, 0x05	; 5
    168e:	8a 96       	adiw	r24, 0x2a	; 42
    1690:	f7 d6       	rcall	.+3566   	; 0x2480 <numPrinter>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
    1692:	f8 01       	movw	r30, r16
    1694:	e6 53       	subi	r30, 0x36	; 54
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	20 81       	ld	r18, Z
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	42 e0       	ldi	r20, 0x02	; 2
    169e:	67 e0       	ldi	r22, 0x07	; 7
    16a0:	ce 01       	movw	r24, r28
    16a2:	89 51       	subi	r24, 0x19	; 25
    16a4:	9f 4f       	sbci	r25, 0xFF	; 255
    16a6:	ec d6       	rcall	.+3544   	; 0x2480 <numPrinter>
	numPrinter(initTheScreen->screen1[1],9,3,(currentGlobals->currentPatternNumber)+1);
    16a8:	f7 01       	movw	r30, r14
    16aa:	23 81       	ldd	r18, Z+3	; 0x03
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	2f 5f       	subi	r18, 0xFF	; 255
    16b0:	3f 4f       	sbci	r19, 0xFF	; 255
    16b2:	43 e0       	ldi	r20, 0x03	; 3
    16b4:	69 e0       	ldi	r22, 0x09	; 9
    16b6:	ce 01       	movw	r24, r28
    16b8:	8e 52       	subi	r24, 0x2E	; 46
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	e1 d6       	rcall	.+3522   	; 0x2480 <numPrinter>
	numPrinter(initTheScreen->screen0[1],9,3,(currentGlobals->currentPatternNumber)+1);
    16be:	f7 01       	movw	r30, r14
    16c0:	23 81       	ldd	r18, Z+3	; 0x03
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	2f 5f       	subi	r18, 0xFF	; 255
    16c6:	3f 4f       	sbci	r19, 0xFF	; 255
    16c8:	43 e0       	ldi	r20, 0x03	; 3
    16ca:	69 e0       	ldi	r22, 0x09	; 9
    16cc:	ce 01       	movw	r24, r28
    16ce:	45 96       	adiw	r24, 0x15	; 21
    16d0:	d7 d6       	rcall	.+3502   	; 0x2480 <numPrinter>
}
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	08 95       	ret

000016e0 <updateScreen>:

void updateScreen(Screen *menuScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    16e0:	af 92       	push	r10
    16e2:	bf 92       	push	r11
    16e4:	cf 92       	push	r12
    16e6:	df 92       	push	r13
    16e8:	ef 92       	push	r14
    16ea:	ff 92       	push	r15
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	8c 01       	movw	r16, r24
    16f6:	7b 01       	movw	r14, r22
    16f8:	ea 01       	movw	r28, r20
	
	if((currentGlobals->valueChangeFlag)&(1<<encoderChange))//check if encoder bit is high
    16fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    16fc:	80 ff       	sbrs	r24, 0
    16fe:	c7 c2       	rjmp	.+1422   	; 0x1c8e <updateScreen+0x5ae>
	{ 
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<encoderChange));//set encoder bit low, and carry our whatever encoder change has occurred. 
    1700:	1a 86       	std	Y+10, r1	; 0x0a
		//we need to debug this to make sure it's doing what we think it's doing.
		switch(currentGlobals->menuState)
    1702:	8e 81       	ldd	r24, Y+6	; 0x06
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	8b 33       	cpi	r24, 0x3B	; 59
    1708:	91 05       	cpc	r25, r1
    170a:	08 f0       	brcs	.+2      	; 0x170e <updateScreen+0x2e>
    170c:	bd c2       	rjmp	.+1402   	; 0x1c88 <updateScreen+0x5a8>
    170e:	fc 01       	movw	r30, r24
    1710:	88 27       	eor	r24, r24
    1712:	e3 55       	subi	r30, 0x53	; 83
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	8f 4f       	sbci	r24, 0xFF	; 255
    1718:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__tablejump2__>
		{
			case PreformanceModeInit: //initial state
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    171c:	c8 01       	movw	r24, r16
    171e:	a7 df       	rcall	.-178    	; 0x166e <reInitMenuOnLoad>
			outputS(menuScreen->screen0[0], 0);
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	c8 01       	movw	r24, r16
    1726:	94 d6       	rcall	.+3368   	; 0x2450 <outputS>
			outputS(menuScreen->screen0[1], 1);
    1728:	61 e0       	ldi	r22, 0x01	; 1
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	c8 01       	movw	r24, r16
    172e:	45 96       	adiw	r24, 0x15	; 21
    1730:	8f d6       	rcall	.+3358   	; 0x2450 <outputS>
			outputS(menuScreen->screen0[2], 2);
    1732:	62 e0       	ldi	r22, 0x02	; 2
    1734:	70 e0       	ldi	r23, 0x00	; 0
    1736:	c8 01       	movw	r24, r16
    1738:	8a 96       	adiw	r24, 0x2a	; 42
    173a:	8a d6       	rcall	.+3348   	; 0x2450 <outputS>
			outputS(menuScreen->screen0[3], 3);
    173c:	63 e0       	ldi	r22, 0x03	; 3
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	c8 01       	movw	r24, r16
    1742:	cf 96       	adiw	r24, 0x3f	; 63
    1744:	85 d6       	rcall	.+3338   	; 0x2450 <outputS>
			break;
    1746:	a0 c2       	rjmp	.+1344   	; 0x1c88 <updateScreen+0x5a8>

			case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0);
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	c8 01       	movw	r24, r16
    174e:	83 54       	subi	r24, 0x43	; 67
    1750:	9f 4f       	sbci	r25, 0xFF	; 255
    1752:	7e d6       	rcall	.+3324   	; 0x2450 <outputS>
			outputS(menuScreen->screen1[1], 1);
    1754:	61 e0       	ldi	r22, 0x01	; 1
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	c8 01       	movw	r24, r16
    175a:	8e 52       	subi	r24, 0x2E	; 46
    175c:	9f 4f       	sbci	r25, 0xFF	; 255
    175e:	78 d6       	rcall	.+3312   	; 0x2450 <outputS>
			outputS(menuScreen->screen1[2], 2);
    1760:	62 e0       	ldi	r22, 0x02	; 2
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	c8 01       	movw	r24, r16
    1766:	89 51       	subi	r24, 0x19	; 25
    1768:	9f 4f       	sbci	r25, 0xFF	; 255
    176a:	72 d6       	rcall	.+3300   	; 0x2450 <outputS>
			outputS(menuScreen->screen1[3], 3);
    176c:	63 e0       	ldi	r22, 0x03	; 3
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	c8 01       	movw	r24, r16
    1772:	84 50       	subi	r24, 0x04	; 4
    1774:	9f 4f       	sbci	r25, 0xFF	; 255
    1776:	6c d6       	rcall	.+3288   	; 0x2450 <outputS>
    1778:	81 e1       	ldi	r24, 0x11	; 17
			currentGlobals->menuState = SequencerMenuArrow1; 
    177a:	8e 83       	std	Y+6, r24	; 0x06
    177c:	88 e0       	ldi	r24, 0x08	; 8
			
			
			case SequencerMenuArrow1:
			menuScreen->screen1[1][19]= 8;
    177e:	f8 01       	movw	r30, r16
    1780:	eb 51       	subi	r30, 0x1B	; 27
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	80 83       	st	Z, r24
    1786:	80 e2       	ldi	r24, 0x20	; 32
			menuScreen->screen1[2][19] = ' ';
    1788:	75 96       	adiw	r30, 0x15	; 21
    178a:	80 83       	st	Z, r24
			menuScreen->screen1[3][19] = ' ';
    178c:	75 96       	adiw	r30, 0x15	; 21
    178e:	80 83       	st	Z, r24
			outputS(menuScreen->screen1[1], 1);
    1790:	61 e0       	ldi	r22, 0x01	; 1
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	c8 01       	movw	r24, r16
    1796:	8e 52       	subi	r24, 0x2E	; 46
    1798:	9f 4f       	sbci	r25, 0xFF	; 255
    179a:	5a d6       	rcall	.+3252   	; 0x2450 <outputS>
			outputS(menuScreen->screen1[2], 2);
    179c:	62 e0       	ldi	r22, 0x02	; 2
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	c8 01       	movw	r24, r16
    17a2:	89 51       	subi	r24, 0x19	; 25
    17a4:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    17a6:	54 d6       	rcall	.+3240   	; 0x2450 <outputS>
    17a8:	63 e0       	ldi	r22, 0x03	; 3
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	c8 01       	movw	r24, r16
    17ae:	84 50       	subi	r24, 0x04	; 4
    17b0:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    17b2:	4e d6       	rcall	.+3228   	; 0x2450 <outputS>
			
			case SequencerMenuArrow1Select:
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    17b4:	69 c2       	rjmp	.+1234   	; 0x1c88 <updateScreen+0x5a8>
    17b6:	c8 01       	movw	r24, r16
    17b8:	5a df       	rcall	.-332    	; 0x166e <reInitMenuOnLoad>
			outputS(menuScreen->screen1[1],1);
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	c8 01       	movw	r24, r16
    17c0:	8e 52       	subi	r24, 0x2E	; 46
    17c2:	9f 4f       	sbci	r25, 0xFF	; 255
    17c4:	45 d6       	rcall	.+3210   	; 0x2450 <outputS>
    17c6:	60 c2       	rjmp	.+1216   	; 0x1c88 <updateScreen+0x5a8>
			break;
    17c8:	80 e2       	ldi	r24, 0x20	; 32
	
	
			case SequencerMenuArrow2:
			menuScreen->screen1[1][19]= ' ';
    17ca:	f8 01       	movw	r30, r16
    17cc:	eb 51       	subi	r30, 0x1B	; 27
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 83       	st	Z, r24
			menuScreen->screen1[2][19] = 8;
    17d2:	98 e0       	ldi	r25, 0x08	; 8
    17d4:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = ' ';
    17d6:	90 83       	st	Z, r25
    17d8:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen1[1], 1);
    17da:	80 83       	st	Z, r24
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	c8 01       	movw	r24, r16
    17e2:	8e 52       	subi	r24, 0x2E	; 46
    17e4:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    17e6:	34 d6       	rcall	.+3176   	; 0x2450 <outputS>
    17e8:	62 e0       	ldi	r22, 0x02	; 2
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	c8 01       	movw	r24, r16
    17ee:	89 51       	subi	r24, 0x19	; 25
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	2e d6       	rcall	.+3164   	; 0x2450 <outputS>
			outputS(menuScreen->screen1[3], 3);
    17f4:	63 e0       	ldi	r22, 0x03	; 3
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	c8 01       	movw	r24, r16
    17fa:	84 50       	subi	r24, 0x04	; 4
    17fc:	9f 4f       	sbci	r25, 0xFF	; 255
    17fe:	28 d6       	rcall	.+3152   	; 0x2450 <outputS>
			break;
	
			case SequencerMenuArrow2Select:
			numPrinter(menuScreen->screen1[2],7,2,currentPattern->numSteps);
    1800:	43 c2       	rjmp	.+1158   	; 0x1c88 <updateScreen+0x5a8>
    1802:	fb 01       	movw	r30, r22
    1804:	e6 53       	subi	r30, 0x36	; 54
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	20 81       	ld	r18, Z
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	42 e0       	ldi	r20, 0x02	; 2
    180e:	67 e0       	ldi	r22, 0x07	; 7
    1810:	68 01       	movw	r12, r16
    1812:	87 ee       	ldi	r24, 0xE7	; 231
    1814:	c8 0e       	add	r12, r24
    1816:	d1 1c       	adc	r13, r1
    1818:	c6 01       	movw	r24, r12
    181a:	32 d6       	rcall	.+3172   	; 0x2480 <numPrinter>
			outputS(menuScreen->screen1[2],2);
    181c:	62 e0       	ldi	r22, 0x02	; 2
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	c6 01       	movw	r24, r12
    1822:	16 d6       	rcall	.+3116   	; 0x2450 <outputS>
			break;
    1824:	31 c2       	rjmp	.+1122   	; 0x1c88 <updateScreen+0x5a8>
	
			case SequencerMenuArrow3:
			menuScreen->screen1[1][19]= ' ';
    1826:	80 e2       	ldi	r24, 0x20	; 32
    1828:	f8 01       	movw	r30, r16
    182a:	eb 51       	subi	r30, 0x1B	; 27
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
			menuScreen->screen1[2][19] = ' ';
    182e:	80 83       	st	Z, r24
    1830:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = 8;
    1832:	80 83       	st	Z, r24
    1834:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen1[1], 1);
    1836:	75 96       	adiw	r30, 0x15	; 21
    1838:	80 83       	st	Z, r24
    183a:	61 e0       	ldi	r22, 0x01	; 1
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	c8 01       	movw	r24, r16
    1840:	8e 52       	subi	r24, 0x2E	; 46
    1842:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    1844:	05 d6       	rcall	.+3082   	; 0x2450 <outputS>
    1846:	62 e0       	ldi	r22, 0x02	; 2
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	c8 01       	movw	r24, r16
    184c:	89 51       	subi	r24, 0x19	; 25
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    1850:	ff d5       	rcall	.+3070   	; 0x2450 <outputS>
    1852:	63 e0       	ldi	r22, 0x03	; 3
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	c8 01       	movw	r24, r16
    1858:	84 50       	subi	r24, 0x04	; 4
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    185c:	f9 d5       	rcall	.+3058   	; 0x2450 <outputS>
		
			case SequencerMenuArrow3Select:
			numPrinter(menuScreen->screen1[3],14,2,(currentGlobals->currentStep)+1); //these are 0 indexed, so we need to add 1 to the display.
    185e:	14 c2       	rjmp	.+1064   	; 0x1c88 <updateScreen+0x5a8>
    1860:	2c 81       	ldd	r18, Y+4	; 0x04
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	2f 5f       	subi	r18, 0xFF	; 255
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	42 e0       	ldi	r20, 0x02	; 2
    186a:	6e e0       	ldi	r22, 0x0E	; 14
    186c:	68 01       	movw	r12, r16
    186e:	9c ef       	ldi	r25, 0xFC	; 252
    1870:	c9 0e       	add	r12, r25
    1872:	d1 1c       	adc	r13, r1
			outputS(menuScreen->screen1[3],3);
    1874:	c6 01       	movw	r24, r12
    1876:	04 d6       	rcall	.+3080   	; 0x2480 <numPrinter>
    1878:	63 e0       	ldi	r22, 0x03	; 3
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	c6 01       	movw	r24, r12
			break;
	

			case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0);
    187e:	e8 d5       	rcall	.+3024   	; 0x2450 <outputS>
    1880:	03 c2       	rjmp	.+1030   	; 0x1c88 <updateScreen+0x5a8>
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	c8 01       	movw	r24, r16
    1888:	86 58       	subi	r24, 0x86	; 134
    188a:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[1], 1);
    188c:	e1 d5       	rcall	.+3010   	; 0x2450 <outputS>
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	c8 01       	movw	r24, r16
    1894:	81 57       	subi	r24, 0x71	; 113
    1896:	9e 4f       	sbci	r25, 0xFE	; 254
    1898:	db d5       	rcall	.+2998   	; 0x2450 <outputS>
			outputS(menuScreen->screen2[2], 2);
    189a:	62 e0       	ldi	r22, 0x02	; 2
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	c8 01       	movw	r24, r16
    18a0:	8c 55       	subi	r24, 0x5C	; 92
    18a2:	9e 4f       	sbci	r25, 0xFE	; 254
    18a4:	d5 d5       	rcall	.+2986   	; 0x2450 <outputS>
			outputS(menuScreen->screen2[3], 3);
    18a6:	63 e0       	ldi	r22, 0x03	; 3
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	c8 01       	movw	r24, r16
    18ac:	87 54       	subi	r24, 0x47	; 71
    18ae:	9e 4f       	sbci	r25, 0xFE	; 254
    18b0:	cf d5       	rcall	.+2974   	; 0x2450 <outputS>
			currentGlobals->menuState = TrackMenuArrow1;
    18b2:	81 e2       	ldi	r24, 0x21	; 33
		
			case TrackMenuArrow1:
			menuScreen->screen2[1][19]= 8;
    18b4:	8e 83       	std	Y+6, r24	; 0x06
    18b6:	88 e0       	ldi	r24, 0x08	; 8
    18b8:	f8 01       	movw	r30, r16
    18ba:	ee 55       	subi	r30, 0x5E	; 94
    18bc:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    18be:	80 83       	st	Z, r24
    18c0:	80 e2       	ldi	r24, 0x20	; 32
    18c2:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    18c4:	80 83       	st	Z, r24
    18c6:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    18c8:	80 83       	st	Z, r24
    18ca:	61 e0       	ldi	r22, 0x01	; 1
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	c8 01       	movw	r24, r16
    18d0:	81 57       	subi	r24, 0x71	; 113
    18d2:	9e 4f       	sbci	r25, 0xFE	; 254
    18d4:	bd d5       	rcall	.+2938   	; 0x2450 <outputS>
			outputS(menuScreen->screen2[2], 2);
    18d6:	62 e0       	ldi	r22, 0x02	; 2
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	c8 01       	movw	r24, r16
    18dc:	8c 55       	subi	r24, 0x5C	; 92
    18de:	9e 4f       	sbci	r25, 0xFE	; 254
    18e0:	b7 d5       	rcall	.+2926   	; 0x2450 <outputS>
			outputS(menuScreen->screen2[3], 3);
    18e2:	63 e0       	ldi	r22, 0x03	; 3
    18e4:	70 e0       	ldi	r23, 0x00	; 0
    18e6:	c8 01       	movw	r24, r16
    18e8:	87 54       	subi	r24, 0x47	; 71
    18ea:	9e 4f       	sbci	r25, 0xFE	; 254
    18ec:	b1 d5       	rcall	.+2914   	; 0x2450 <outputS>
			break;
    18ee:	cc c1       	rjmp	.+920    	; 0x1c88 <updateScreen+0x5a8>
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    18f0:	8d 81       	ldd	r24, Y+5	; 0x05
    18f2:	db 01       	movw	r26, r22
    18f4:	a8 0f       	add	r26, r24
    18f6:	b1 1d       	adc	r27, r1
    18f8:	fd 01       	movw	r30, r26
    18fa:	e8 56       	subi	r30, 0x68	; 104
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    18fe:	20 81       	ld	r18, Z
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	32 2f       	mov	r19, r18
    1904:	22 27       	eor	r18, r18
			outputS(menuScreen->screen2[2], 2);
			outputS(menuScreen->screen2[3], 3);
			break;
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1906:	70 96       	adiw	r30, 0x10	; 16
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    1908:	80 81       	ld	r24, Z
    190a:	28 2b       	or	r18, r24
    190c:	44 e0       	ldi	r20, 0x04	; 4
    190e:	6a e0       	ldi	r22, 0x0A	; 10
    1910:	68 01       	movw	r12, r16
    1912:	b1 e7       	ldi	r27, 0x71	; 113
    1914:	cb 1a       	sub	r12, r27
    1916:	be ef       	ldi	r27, 0xFE	; 254
    1918:	db 0a       	sbc	r13, r27
    191a:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen2[1],1);
    191c:	b1 d5       	rcall	.+2914   	; 0x2480 <numPrinter>
    191e:	61 e0       	ldi	r22, 0x01	; 1
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	c6 01       	movw	r24, r12
			break;
    1924:	95 d5       	rcall	.+2858   	; 0x2450 <outputS>
	
			case TrackMenuArrow2:
			menuScreen->screen2[1][19]= ' ';
    1926:	b0 c1       	rjmp	.+864    	; 0x1c88 <updateScreen+0x5a8>
    1928:	80 e2       	ldi	r24, 0x20	; 32
    192a:	f8 01       	movw	r30, r16
    192c:	ee 55       	subi	r30, 0x5E	; 94
    192e:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = 8;
    1930:	80 83       	st	Z, r24
    1932:	98 e0       	ldi	r25, 0x08	; 8
    1934:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    1936:	90 83       	st	Z, r25
    1938:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    193a:	80 83       	st	Z, r24
    193c:	61 e0       	ldi	r22, 0x01	; 1
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	c8 01       	movw	r24, r16
    1942:	81 57       	subi	r24, 0x71	; 113
    1944:	9e 4f       	sbci	r25, 0xFE	; 254
    1946:	84 d5       	rcall	.+2824   	; 0x2450 <outputS>
			outputS(menuScreen->screen2[2], 2);
    1948:	62 e0       	ldi	r22, 0x02	; 2
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	c8 01       	movw	r24, r16
    194e:	8c 55       	subi	r24, 0x5C	; 92
    1950:	9e 4f       	sbci	r25, 0xFE	; 254
    1952:	7e d5       	rcall	.+2812   	; 0x2450 <outputS>
    1954:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[3], 3);
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	c8 01       	movw	r24, r16
    195a:	87 54       	subi	r24, 0x47	; 71
    195c:	9e 4f       	sbci	r25, 0xFE	; 254
    195e:	78 d5       	rcall	.+2800   	; 0x2450 <outputS>
    1960:	93 c1       	rjmp	.+806    	; 0x1c88 <updateScreen+0x5a8>
    1962:	8d 81       	ldd	r24, Y+5	; 0x05
			break;
    1964:	fb 01       	movw	r30, r22
		
			case TrackMenuArrow2Select:
			//we need some serious button code in these two cases. 
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1966:	e8 0f       	add	r30, r24
    1968:	f1 1d       	adc	r31, r1
    196a:	e8 57       	subi	r30, 0x78	; 120
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	80 81       	ld	r24, Z
    1970:	88 23       	and	r24, r24
    1972:	19 f0       	breq	.+6      	; 0x197a <updateScreen+0x29a>
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	79 f0       	breq	.+30     	; 0x1996 <updateScreen+0x2b6>
    1978:	1c c0       	rjmp	.+56     	; 0x19b2 <updateScreen+0x2d2>
    197a:	83 e5       	ldi	r24, 0x53	; 83
			{
				case 0:
				menuScreen->screen2[2][10] = 'S';
    197c:	f8 01       	movw	r30, r16
    197e:	e2 55       	subi	r30, 0x52	; 82
    1980:	fe 4f       	sbci	r31, 0xFE	; 254
    1982:	80 83       	st	Z, r24
    1984:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[2][11] = 'o';
    1986:	31 96       	adiw	r30, 0x01	; 1
    1988:	80 83       	st	Z, r24
    198a:	9c e6       	ldi	r25, 0x6C	; 108
				menuScreen->screen2[2][12] = 'l';
    198c:	31 96       	adiw	r30, 0x01	; 1
    198e:	90 83       	st	Z, r25
    1990:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'o';
    1992:	80 83       	st	Z, r24
    1994:	0e c0       	rjmp	.+28     	; 0x19b2 <updateScreen+0x2d2>
				break;
    1996:	80 e5       	ldi	r24, 0x50	; 80

				case 1:
				menuScreen->screen2[2][10] = 'P';
    1998:	f8 01       	movw	r30, r16
    199a:	e2 55       	subi	r30, 0x52	; 82
    199c:	fe 4f       	sbci	r31, 0xFE	; 254
    199e:	80 83       	st	Z, r24
				menuScreen->screen2[2][11] = 'o';
    19a0:	8f e6       	ldi	r24, 0x6F	; 111
    19a2:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][12] = 'l';
    19a4:	80 83       	st	Z, r24
    19a6:	8c e6       	ldi	r24, 0x6C	; 108
    19a8:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'y';
    19aa:	80 83       	st	Z, r24
    19ac:	89 e7       	ldi	r24, 0x79	; 121
	
				case 3:
				break;
			}
			
			outputS(menuScreen->screen2[2], 2);
    19ae:	31 96       	adiw	r30, 0x01	; 1
    19b0:	80 83       	st	Z, r24
    19b2:	62 e0       	ldi	r22, 0x02	; 2
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	c8 01       	movw	r24, r16
    19b8:	8c 55       	subi	r24, 0x5C	; 92
    19ba:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    19bc:	49 d5       	rcall	.+2706   	; 0x2450 <outputS>

			case TrackMenuArrow3:
			menuScreen->screen2[1][19]= ' ';
    19be:	64 c1       	rjmp	.+712    	; 0x1c88 <updateScreen+0x5a8>
    19c0:	80 e2       	ldi	r24, 0x20	; 32
    19c2:	f8 01       	movw	r30, r16
    19c4:	ee 55       	subi	r30, 0x5E	; 94
    19c6:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    19c8:	80 83       	st	Z, r24
    19ca:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = 8;
    19cc:	80 83       	st	Z, r24
    19ce:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[1], 1);
    19d0:	75 96       	adiw	r30, 0x15	; 21
    19d2:	80 83       	st	Z, r24
    19d4:	61 e0       	ldi	r22, 0x01	; 1
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	c8 01       	movw	r24, r16
    19da:	81 57       	subi	r24, 0x71	; 113
			outputS(menuScreen->screen2[2], 2);
    19dc:	9e 4f       	sbci	r25, 0xFE	; 254
    19de:	38 d5       	rcall	.+2672   	; 0x2450 <outputS>
    19e0:	62 e0       	ldi	r22, 0x02	; 2
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	c8 01       	movw	r24, r16
    19e6:	8c 55       	subi	r24, 0x5C	; 92
    19e8:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[3], 3);
    19ea:	32 d5       	rcall	.+2660   	; 0x2450 <outputS>
    19ec:	63 e0       	ldi	r22, 0x03	; 3
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	c8 01       	movw	r24, r16
    19f2:	87 54       	subi	r24, 0x47	; 71
    19f4:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    19f6:	2c d5       	rcall	.+2648   	; 0x2450 <outputS>
		
			case TrackMenuArrow3Select:
			numPrinter(menuScreen->screen2[3],10,2,(currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1);
    19f8:	47 c1       	rjmp	.+654    	; 0x1c88 <updateScreen+0x5a8>
    19fa:	8d 81       	ldd	r24, Y+5	; 0x05
    19fc:	fb 01       	movw	r30, r22
    19fe:	e8 0f       	add	r30, r24
    1a00:	f1 1d       	adc	r31, r1
    1a02:	20 8d       	ldd	r18, Z+24	; 0x18
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	2f 5f       	subi	r18, 0xFF	; 255
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0a:	42 e0       	ldi	r20, 0x02	; 2
    1a0c:	6a e0       	ldi	r22, 0x0A	; 10
    1a0e:	68 01       	movw	r12, r16
    1a10:	e7 e4       	ldi	r30, 0x47	; 71
    1a12:	ce 1a       	sub	r12, r30
    1a14:	ee ef       	ldi	r30, 0xFE	; 254
    1a16:	de 0a       	sbc	r13, r30
			outputS(menuScreen->screen2[3],3);
    1a18:	c6 01       	movw	r24, r12
    1a1a:	32 d5       	rcall	.+2660   	; 0x2480 <numPrinter>
    1a1c:	63 e0       	ldi	r22, 0x03	; 3
    1a1e:	70 e0       	ldi	r23, 0x00	; 0
    1a20:	c6 01       	movw	r24, r12
			break;
    1a22:	16 d5       	rcall	.+2604   	; 0x2450 <outputS>
			
			case TrackMenuArrow4:
			menuScreen->screen2[2][19]= ' ';
    1a24:	31 c1       	rjmp	.+610    	; 0x1c88 <updateScreen+0x5a8>
    1a26:	80 e2       	ldi	r24, 0x20	; 32
    1a28:	f8 01       	movw	r30, r16
    1a2a:	e9 54       	subi	r30, 0x49	; 73
    1a2c:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[3][19] = ' ';
    1a2e:	80 83       	st	Z, r24
    1a30:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[4][19] = 8;
    1a32:	80 83       	st	Z, r24
    1a34:	88 e0       	ldi	r24, 0x08	; 8
    1a36:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[2], 1);
    1a38:	80 83       	st	Z, r24
    1a3a:	61 e0       	ldi	r22, 0x01	; 1
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	c8 01       	movw	r24, r16
    1a40:	8c 55       	subi	r24, 0x5C	; 92
    1a42:	9e 4f       	sbci	r25, 0xFE	; 254
    1a44:	05 d5       	rcall	.+2570   	; 0x2450 <outputS>
			outputS(menuScreen->screen2[3], 2);
    1a46:	62 e0       	ldi	r22, 0x02	; 2
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	c8 01       	movw	r24, r16
    1a4c:	87 54       	subi	r24, 0x47	; 71
    1a4e:	9e 4f       	sbci	r25, 0xFE	; 254
    1a50:	ff d4       	rcall	.+2558   	; 0x2450 <outputS>
    1a52:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[4], 3);
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	c8 01       	movw	r24, r16
    1a58:	82 53       	subi	r24, 0x32	; 50
    1a5a:	9e 4f       	sbci	r25, 0xFE	; 254
    1a5c:	f9 d4       	rcall	.+2546   	; 0x2450 <outputS>
    1a5e:	14 c1       	rjmp	.+552    	; 0x1c88 <updateScreen+0x5a8>
    1a60:	8d 81       	ldd	r24, Y+5	; 0x05
			break;
    1a62:	fb 01       	movw	r30, r22
			
			case TrackMenuArrow4Select:
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1a64:	e8 0f       	add	r30, r24
    1a66:	f1 1d       	adc	r31, r1
    1a68:	e5 51       	subi	r30, 0x15	; 21
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	80 81       	ld	r24, Z
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	a9 f0       	breq	.+42     	; 0x1a9c <updateScreen+0x3bc>
    1a72:	28 f0       	brcs	.+10     	; 0x1a7e <updateScreen+0x39e>
    1a74:	82 30       	cpi	r24, 0x02	; 2
    1a76:	f9 f0       	breq	.+62     	; 0x1ab6 <updateScreen+0x3d6>
    1a78:	83 30       	cpi	r24, 0x03	; 3
    1a7a:	51 f1       	breq	.+84     	; 0x1ad0 <updateScreen+0x3f0>
    1a7c:	37 c0       	rjmp	.+110    	; 0x1aec <updateScreen+0x40c>
    1a7e:	81 e4       	ldi	r24, 0x41	; 65
    1a80:	f8 01       	movw	r30, r16
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1a82:	e4 52       	subi	r30, 0x24	; 36
    1a84:	fe 4f       	sbci	r31, 0xFE	; 254
    1a86:	80 83       	st	Z, r24
    1a88:	8d e2       	ldi	r24, 0x2D	; 45
    1a8a:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1a8c:	80 83       	st	Z, r24
    1a8e:	82 e5       	ldi	r24, 0x52	; 82
    1a90:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1a92:	80 83       	st	Z, r24
    1a94:	80 e2       	ldi	r24, 0x20	; 32
    1a96:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1a98:	80 83       	st	Z, r24
    1a9a:	28 c0       	rjmp	.+80     	; 0x1aec <updateScreen+0x40c>
    1a9c:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1a9e:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1aa0:	e4 52       	subi	r30, 0x24	; 36
    1aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa4:	80 83       	st	Z, r24
    1aa6:	80 e2       	ldi	r24, 0x20	; 32
				menuScreen->screen2[4][15] = ' ';
    1aa8:	31 96       	adiw	r30, 0x01	; 1
    1aaa:	80 83       	st	Z, r24
    1aac:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = ' ';
    1aae:	80 83       	st	Z, r24
    1ab0:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1ab2:	80 83       	st	Z, r24
    1ab4:	1b c0       	rjmp	.+54     	; 0x1aec <updateScreen+0x40c>
				break;
    1ab6:	81 e4       	ldi	r24, 0x41	; 65
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1ab8:	f8 01       	movw	r30, r16
    1aba:	e4 52       	subi	r30, 0x24	; 36
    1abc:	fe 4f       	sbci	r31, 0xFE	; 254
    1abe:	80 83       	st	Z, r24
				menuScreen->screen2[4][15] = ' ';
    1ac0:	80 e2       	ldi	r24, 0x20	; 32
    1ac2:	31 96       	adiw	r30, 0x01	; 1
    1ac4:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1ac6:	31 96       	adiw	r30, 0x01	; 1
    1ac8:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1aca:	31 96       	adiw	r30, 0x01	; 1
				break;
    1acc:	80 83       	st	Z, r24
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1ace:	0e c0       	rjmp	.+28     	; 0x1aec <updateScreen+0x40c>
    1ad0:	8e e4       	ldi	r24, 0x4E	; 78
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	e4 52       	subi	r30, 0x24	; 36
				menuScreen->screen2[4][15] = 'o';
    1ad6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ad8:	80 83       	st	Z, r24
    1ada:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][16] = 'n';
    1adc:	31 96       	adiw	r30, 0x01	; 1
    1ade:	80 83       	st	Z, r24
    1ae0:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][17] = 'e';
    1ae2:	31 96       	adiw	r30, 0x01	; 1
    1ae4:	80 83       	st	Z, r24
    1ae6:	85 e6       	ldi	r24, 0x65	; 101
				break;
			}
			outputS(menuScreen->screen2[4],3);
    1ae8:	31 96       	adiw	r30, 0x01	; 1
    1aea:	80 83       	st	Z, r24
    1aec:	63 e0       	ldi	r22, 0x03	; 3
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	c8 01       	movw	r24, r16
    1af2:	82 53       	subi	r24, 0x32	; 50
    1af4:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			
			case TrackMenuArrow5:
			menuScreen->screen2[3][19]= ' ';
    1af6:	ac d4       	rcall	.+2392   	; 0x2450 <outputS>
    1af8:	c7 c0       	rjmp	.+398    	; 0x1c88 <updateScreen+0x5a8>
    1afa:	80 e2       	ldi	r24, 0x20	; 32
    1afc:	f8 01       	movw	r30, r16
			menuScreen->screen2[4][19] = ' ';
    1afe:	e4 53       	subi	r30, 0x34	; 52
    1b00:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[5][19] = 8;
    1b02:	80 83       	st	Z, r24
    1b04:	75 96       	adiw	r30, 0x15	; 21
    1b06:	80 83       	st	Z, r24
			outputS(menuScreen->screen2[3], 1);
    1b08:	88 e0       	ldi	r24, 0x08	; 8
    1b0a:	75 96       	adiw	r30, 0x15	; 21
    1b0c:	80 83       	st	Z, r24
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen2[4], 2);
    1b14:	87 54       	subi	r24, 0x47	; 71
    1b16:	9e 4f       	sbci	r25, 0xFE	; 254
    1b18:	9b d4       	rcall	.+2358   	; 0x2450 <outputS>
    1b1a:	62 e0       	ldi	r22, 0x02	; 2
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen2[5], 3);
    1b20:	82 53       	subi	r24, 0x32	; 50
    1b22:	9e 4f       	sbci	r25, 0xFE	; 254
    1b24:	95 d4       	rcall	.+2346   	; 0x2450 <outputS>
    1b26:	63 e0       	ldi	r22, 0x03	; 3
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	c8 01       	movw	r24, r16
			break;
    1b2c:	8d 51       	subi	r24, 0x1D	; 29

			case TrackMenuArrow5Select:
			numPrinter(menuScreen->screen2[5],13,3,(currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]));
    1b2e:	9e 4f       	sbci	r25, 0xFE	; 254
    1b30:	8f d4       	rcall	.+2334   	; 0x2450 <outputS>
    1b32:	aa c0       	rjmp	.+340    	; 0x1c88 <updateScreen+0x5a8>
    1b34:	8d 81       	ldd	r24, Y+5	; 0x05
    1b36:	fb 01       	movw	r30, r22
    1b38:	e8 0f       	add	r30, r24
    1b3a:	f1 1d       	adc	r31, r1
    1b3c:	e5 52       	subi	r30, 0x25	; 37
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	20 81       	ld	r18, Z
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	43 e0       	ldi	r20, 0x03	; 3
    1b46:	6d e0       	ldi	r22, 0x0D	; 13
    1b48:	68 01       	movw	r12, r16
    1b4a:	fd e1       	ldi	r31, 0x1D	; 29
    1b4c:	cf 1a       	sub	r12, r31
    1b4e:	fe ef       	ldi	r31, 0xFE	; 254
			outputS(menuScreen->screen2[5],3);
    1b50:	df 0a       	sbc	r13, r31
    1b52:	c6 01       	movw	r24, r12
    1b54:	95 d4       	rcall	.+2346   	; 0x2480 <numPrinter>
    1b56:	63 e0       	ldi	r22, 0x03	; 3
			break;
    1b58:	70 e0       	ldi	r23, 0x00	; 0

			case GlobalMenuInit:
			outputS(menuScreen->screen3[0], 0);
    1b5a:	c6 01       	movw	r24, r12
    1b5c:	79 d4       	rcall	.+2290   	; 0x2450 <outputS>
    1b5e:	94 c0       	rjmp	.+296    	; 0x1c88 <updateScreen+0x5a8>
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[1], 1);
    1b66:	89 5c       	subi	r24, 0xC9	; 201
    1b68:	9d 4f       	sbci	r25, 0xFD	; 253
    1b6a:	72 d4       	rcall	.+2276   	; 0x2450 <outputS>
    1b6c:	61 e0       	ldi	r22, 0x01	; 1
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	c8 01       	movw	r24, r16
    1b72:	84 5b       	subi	r24, 0xB4	; 180
			outputS(menuScreen->screen3[2], 2);
    1b74:	9d 4f       	sbci	r25, 0xFD	; 253
    1b76:	6c d4       	rcall	.+2264   	; 0x2450 <outputS>
    1b78:	62 e0       	ldi	r22, 0x02	; 2
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	c8 01       	movw	r24, r16
    1b7e:	8f 59       	subi	r24, 0x9F	; 159
			outputS(menuScreen->screen3[3], 3);
    1b80:	9d 4f       	sbci	r25, 0xFD	; 253
    1b82:	66 d4       	rcall	.+2252   	; 0x2450 <outputS>
    1b84:	63 e0       	ldi	r22, 0x03	; 3
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	c8 01       	movw	r24, r16
    1b8a:	8a 58       	subi	r24, 0x8A	; 138
    1b8c:	9d 4f       	sbci	r25, 0xFD	; 253
			currentGlobals->menuState = GlobalMenuArrow1;
    1b8e:	60 d4       	rcall	.+2240   	; 0x2450 <outputS>
    1b90:	81 e3       	ldi	r24, 0x31	; 49

			case GlobalMenuArrow1:
			menuScreen->screen3[1][19]= 8;
    1b92:	8e 83       	std	Y+6, r24	; 0x06
    1b94:	88 e0       	ldi	r24, 0x08	; 8
    1b96:	f8 01       	movw	r30, r16
    1b98:	e1 5a       	subi	r30, 0xA1	; 161
    1b9a:	fd 4f       	sbci	r31, 0xFD	; 253
			menuScreen->screen3[2][19] = ' ';
    1b9c:	80 83       	st	Z, r24
    1b9e:	80 e2       	ldi	r24, 0x20	; 32
			menuScreen->screen3[3][19] = ' ';
    1ba0:	75 96       	adiw	r30, 0x15	; 21
    1ba2:	80 83       	st	Z, r24
			outputS(menuScreen->screen3[1], 1);
    1ba4:	75 96       	adiw	r30, 0x15	; 21
    1ba6:	80 83       	st	Z, r24
    1ba8:	61 e0       	ldi	r22, 0x01	; 1
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	c8 01       	movw	r24, r16
    1bae:	84 5b       	subi	r24, 0xB4	; 180
			outputS(menuScreen->screen3[2], 2);
    1bb0:	9d 4f       	sbci	r25, 0xFD	; 253
    1bb2:	4e d4       	rcall	.+2204   	; 0x2450 <outputS>
    1bb4:	62 e0       	ldi	r22, 0x02	; 2
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	c8 01       	movw	r24, r16
    1bba:	8f 59       	subi	r24, 0x9F	; 159
			outputS(menuScreen->screen3[3], 3);
    1bbc:	9d 4f       	sbci	r25, 0xFD	; 253
    1bbe:	48 d4       	rcall	.+2192   	; 0x2450 <outputS>
    1bc0:	63 e0       	ldi	r22, 0x03	; 3
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	c8 01       	movw	r24, r16
    1bc6:	8a 58       	subi	r24, 0x8A	; 138
    1bc8:	9d 4f       	sbci	r25, 0xFD	; 253
			break;
    1bca:	42 d4       	rcall	.+2180   	; 0x2450 <outputS>
			
			case GlobalMenuArrow1Select:
			numPrinter(menuScreen->screen3[1],14,2,(currentGlobals->midiChannel)+1);
    1bcc:	5d c0       	rjmp	.+186    	; 0x1c88 <updateScreen+0x5a8>
    1bce:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	2f 5f       	subi	r18, 0xFF	; 255
    1bd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd6:	42 e0       	ldi	r20, 0x02	; 2
    1bd8:	6e e0       	ldi	r22, 0x0E	; 14
    1bda:	68 01       	movw	r12, r16
    1bdc:	84 eb       	ldi	r24, 0xB4	; 180
    1bde:	c8 1a       	sub	r12, r24
    1be0:	8d ef       	ldi	r24, 0xFD	; 253
    1be2:	d8 0a       	sbc	r13, r24
			outputS(menuScreen->screen3[1],1);
    1be4:	c6 01       	movw	r24, r12
    1be6:	4c d4       	rcall	.+2200   	; 0x2480 <numPrinter>
    1be8:	61 e0       	ldi	r22, 0x01	; 1
    1bea:	70 e0       	ldi	r23, 0x00	; 0
    1bec:	c6 01       	movw	r24, r12
			break;
    1bee:	30 d4       	rcall	.+2144   	; 0x2450 <outputS>

			case GlobalMenuArrow2:
			menuScreen->screen3[1][19]= ' ';
    1bf0:	4b c0       	rjmp	.+150    	; 0x1c88 <updateScreen+0x5a8>
    1bf2:	80 e2       	ldi	r24, 0x20	; 32
    1bf4:	f8 01       	movw	r30, r16
    1bf6:	e1 5a       	subi	r30, 0xA1	; 161
			menuScreen->screen3[2][19] = 8;
    1bf8:	fd 4f       	sbci	r31, 0xFD	; 253
    1bfa:	80 83       	st	Z, r24
    1bfc:	98 e0       	ldi	r25, 0x08	; 8
			menuScreen->screen3[3][19] = ' ';
    1bfe:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen3[1], 1);
    1c00:	90 83       	st	Z, r25
    1c02:	75 96       	adiw	r30, 0x15	; 21
    1c04:	80 83       	st	Z, r24
    1c06:	61 e0       	ldi	r22, 0x01	; 1
    1c08:	70 e0       	ldi	r23, 0x00	; 0
    1c0a:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1c0c:	84 5b       	subi	r24, 0xB4	; 180
    1c0e:	9d 4f       	sbci	r25, 0xFD	; 253
    1c10:	1f d4       	rcall	.+2110   	; 0x2450 <outputS>
    1c12:	62 e0       	ldi	r22, 0x02	; 2
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	c8 01       	movw	r24, r16
    1c18:	8f 59       	subi	r24, 0x9F	; 159
			outputS(menuScreen->screen3[3], 3);
    1c1a:	9d 4f       	sbci	r25, 0xFD	; 253
    1c1c:	19 d4       	rcall	.+2098   	; 0x2450 <outputS>
    1c1e:	63 e0       	ldi	r22, 0x03	; 3
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	c8 01       	movw	r24, r16
    1c24:	8a 58       	subi	r24, 0x8A	; 138
    1c26:	9d 4f       	sbci	r25, 0xFD	; 253
			break;
    1c28:	13 d4       	rcall	.+2086   	; 0x2450 <outputS>
			
			case GlobalMenuArrow2Select:
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1c2a:	2e c0       	rjmp	.+92     	; 0x1c88 <updateScreen+0x5a8>
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	fa 01       	movw	r30, r20
    1c30:	e8 0f       	add	r30, r24
    1c32:	f1 1d       	adc	r31, r1
    1c34:	45 85       	ldd	r20, Z+13	; 0x0d
    1c36:	6e e0       	ldi	r22, 0x0E	; 14
    1c38:	68 01       	movw	r12, r16
    1c3a:	9f e9       	ldi	r25, 0x9F	; 159
    1c3c:	c9 1a       	sub	r12, r25
    1c3e:	9d ef       	ldi	r25, 0xFD	; 253
    1c40:	d9 0a       	sbc	r13, r25
    1c42:	c6 01       	movw	r24, r12
    1c44:	e3 d5       	rcall	.+3014   	; 0x280c <midiNotePrinter>
			outputS(menuScreen->screen3[2],2);
    1c46:	62 e0       	ldi	r22, 0x02	; 2
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	c6 01       	movw	r24, r12
    1c4c:	01 d4       	rcall	.+2050   	; 0x2450 <outputS>
    1c4e:	1c c0       	rjmp	.+56     	; 0x1c88 <updateScreen+0x5a8>
			break;
    1c50:	80 e2       	ldi	r24, 0x20	; 32

			case GlobalMenuArrow3:
			menuScreen->screen3[1][19]= ' ';
    1c52:	f8 01       	movw	r30, r16
    1c54:	e1 5a       	subi	r30, 0xA1	; 161
    1c56:	fd 4f       	sbci	r31, 0xFD	; 253
    1c58:	80 83       	st	Z, r24
    1c5a:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen3[2][19] = ' ';
    1c5c:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = 8;
    1c5e:	88 e0       	ldi	r24, 0x08	; 8
    1c60:	75 96       	adiw	r30, 0x15	; 21
    1c62:	80 83       	st	Z, r24
			outputS(menuScreen->screen3[1], 1);
    1c64:	61 e0       	ldi	r22, 0x01	; 1
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	c8 01       	movw	r24, r16
    1c6a:	84 5b       	subi	r24, 0xB4	; 180
    1c6c:	9d 4f       	sbci	r25, 0xFD	; 253
    1c6e:	f0 d3       	rcall	.+2016   	; 0x2450 <outputS>
			outputS(menuScreen->screen3[2], 2);
    1c70:	62 e0       	ldi	r22, 0x02	; 2
    1c72:	70 e0       	ldi	r23, 0x00	; 0
    1c74:	c8 01       	movw	r24, r16
    1c76:	8f 59       	subi	r24, 0x9F	; 159
    1c78:	9d 4f       	sbci	r25, 0xFD	; 253
    1c7a:	ea d3       	rcall	.+2004   	; 0x2450 <outputS>
    1c7c:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen3[3], 3);
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	c8 01       	movw	r24, r16
    1c82:	8a 58       	subi	r24, 0x8A	; 138
    1c84:	9d 4f       	sbci	r25, 0xFD	; 253
    1c86:	e4 d3       	rcall	.+1992   	; 0x2450 <outputS>
    1c88:	8e 81       	ldd	r24, Y+6	; 0x06
    1c8a:	80 93 b5 09 	sts	0x09B5, r24	; 0x8009b5 <prevMenuState>
			break;
		}
		prevMenuState = currentGlobals->menuState;
    1c8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c90:	81 ff       	sbrs	r24, 1
	}
	//We should only reach this in track selection and global settings for setting midi notes. 
	if(currentGlobals->valueChangeFlag&(1<<triggerChange))
    1c92:	05 c1       	rjmp	.+522    	; 0x1e9e <updateScreen+0x7be>
    1c94:	1a 86       	std	Y+10, r1	; 0x0a
    1c96:	8e 81       	ldd	r24, Y+6	; 0x06
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0<<triggerChange); //this is wrong. Will erase all of valueChange Flag. 
    1c98:	82 95       	swap	r24
		switch((currentGlobals->menuState)>>4) //we don't need to worry about what the bottom encoder is doing.  
    1c9a:	8f 70       	andi	r24, 0x0F	; 15
    1c9c:	82 30       	cpi	r24, 0x02	; 2
    1c9e:	21 f0       	breq	.+8      	; 0x1ca8 <updateScreen+0x5c8>
    1ca0:	83 30       	cpi	r24, 0x03	; 3
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <updateScreen+0x5c6>
    1ca4:	e3 c0       	rjmp	.+454    	; 0x1e6c <updateScreen+0x78c>
    1ca6:	fb c0       	rjmp	.+502    	; 0x1e9e <updateScreen+0x7be>
    1ca8:	2d 81       	ldd	r18, Y+5	; 0x05
    1caa:	30 e0       	ldi	r19, 0x00	; 0
		{
			case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1cac:	a7 01       	movw	r20, r14
    1cae:	42 0f       	add	r20, r18
    1cb0:	53 1f       	adc	r21, r19
    1cb2:	fa 01       	movw	r30, r20
    1cb4:	e8 56       	subi	r30, 0x68	; 104
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	80 81       	ld	r24, Z
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	98 2f       	mov	r25, r24
    1cbe:	88 27       	eor	r24, r24
    1cc0:	70 96       	adiw	r30, 0x10	; 16
    1cc2:	40 81       	ld	r20, Z
    1cc4:	6c 01       	movw	r12, r24
    1cc6:	c4 2a       	or	r12, r20
    1cc8:	2f 5f       	subi	r18, 0xFF	; 255
    1cca:	3f 4f       	sbci	r19, 0xFF	; 255
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack)+1);
    1ccc:	42 e0       	ldi	r20, 0x02	; 2
    1cce:	67 e0       	ldi	r22, 0x07	; 7
    1cd0:	58 01       	movw	r10, r16
    1cd2:	a1 e7       	ldi	r26, 0x71	; 113
    1cd4:	aa 1a       	sub	r10, r26
    1cd6:	ae ef       	ldi	r26, 0xFE	; 254
    1cd8:	ba 0a       	sbc	r11, r26
    1cda:	c5 01       	movw	r24, r10
    1cdc:	d1 d3       	rcall	.+1954   	; 0x2480 <numPrinter>
    1cde:	96 01       	movw	r18, r12
    1ce0:	44 e0       	ldi	r20, 0x04	; 4
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
    1ce2:	6a e0       	ldi	r22, 0x0A	; 10
    1ce4:	c5 01       	movw	r24, r10
    1ce6:	cc d3       	rcall	.+1944   	; 0x2480 <numPrinter>
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	f7 01       	movw	r30, r14
    1cec:	e8 0f       	add	r30, r24
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
					switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1cee:	f1 1d       	adc	r31, r1
    1cf0:	e8 57       	subi	r30, 0x78	; 120
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	88 23       	and	r24, r24
    1cf8:	19 f0       	breq	.+6      	; 0x1d00 <updateScreen+0x620>
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	79 f0       	breq	.+30     	; 0x1d1c <updateScreen+0x63c>
    1cfe:	1c c0       	rjmp	.+56     	; 0x1d38 <updateScreen+0x658>
    1d00:	83 e5       	ldi	r24, 0x53	; 83
    1d02:	f8 01       	movw	r30, r16
    1d04:	e2 55       	subi	r30, 0x52	; 82
					{
						case 0:
						menuScreen->screen2[2][10] = 'S';
    1d06:	fe 4f       	sbci	r31, 0xFE	; 254
    1d08:	80 83       	st	Z, r24
    1d0a:	8f e6       	ldi	r24, 0x6F	; 111
    1d0c:	31 96       	adiw	r30, 0x01	; 1
    1d0e:	80 83       	st	Z, r24
						menuScreen->screen2[2][11] = 'o';
    1d10:	9c e6       	ldi	r25, 0x6C	; 108
    1d12:	31 96       	adiw	r30, 0x01	; 1
    1d14:	90 83       	st	Z, r25
						menuScreen->screen2[2][12] = 'l';
    1d16:	31 96       	adiw	r30, 0x01	; 1
    1d18:	80 83       	st	Z, r24
    1d1a:	0e c0       	rjmp	.+28     	; 0x1d38 <updateScreen+0x658>
						menuScreen->screen2[2][13] = 'o';
    1d1c:	80 e5       	ldi	r24, 0x50	; 80
    1d1e:	f8 01       	movw	r30, r16
						break;
    1d20:	e2 55       	subi	r30, 0x52	; 82

						case 1:
						menuScreen->screen2[2][10] = 'P';
    1d22:	fe 4f       	sbci	r31, 0xFE	; 254
    1d24:	80 83       	st	Z, r24
    1d26:	8f e6       	ldi	r24, 0x6F	; 111
    1d28:	31 96       	adiw	r30, 0x01	; 1
    1d2a:	80 83       	st	Z, r24
						menuScreen->screen2[2][11] = 'o';
    1d2c:	8c e6       	ldi	r24, 0x6C	; 108
    1d2e:	31 96       	adiw	r30, 0x01	; 1
    1d30:	80 83       	st	Z, r24
						menuScreen->screen2[2][12] = 'l';
    1d32:	89 e7       	ldi	r24, 0x79	; 121
    1d34:	31 96       	adiw	r30, 0x01	; 1
    1d36:	80 83       	st	Z, r24
						menuScreen->screen2[2][13] = 'y';
    1d38:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3a:	f7 01       	movw	r30, r14
    1d3c:	e8 0f       	add	r30, r24

						case 3:
						break;
					}
					
			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack]+1));
    1d3e:	f1 1d       	adc	r31, r1
    1d40:	20 8d       	ldd	r18, Z+24	; 0x18
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	2f 5f       	subi	r18, 0xFF	; 255
    1d46:	3f 4f       	sbci	r19, 0xFF	; 255
    1d48:	42 e0       	ldi	r20, 0x02	; 2
    1d4a:	6a e0       	ldi	r22, 0x0A	; 10
    1d4c:	c8 01       	movw	r24, r16
    1d4e:	87 54       	subi	r24, 0x47	; 71
    1d50:	9e 4f       	sbci	r25, 0xFE	; 254
    1d52:	96 d3       	rcall	.+1836   	; 0x2480 <numPrinter>
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	f7 01       	movw	r30, r14
    1d58:	e8 0f       	add	r30, r24
    1d5a:	f1 1d       	adc	r31, r1
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1d5c:	e5 51       	subi	r30, 0x15	; 21
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	80 81       	ld	r24, Z
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	a9 f0       	breq	.+42     	; 0x1d90 <updateScreen+0x6b0>
    1d66:	28 f0       	brcs	.+10     	; 0x1d72 <updateScreen+0x692>
    1d68:	82 30       	cpi	r24, 0x02	; 2
    1d6a:	f9 f0       	breq	.+62     	; 0x1daa <updateScreen+0x6ca>
    1d6c:	83 30       	cpi	r24, 0x03	; 3
    1d6e:	51 f1       	breq	.+84     	; 0x1dc4 <updateScreen+0x6e4>
    1d70:	37 c0       	rjmp	.+110    	; 0x1de0 <updateScreen+0x700>
    1d72:	81 e4       	ldi	r24, 0x41	; 65
    1d74:	f8 01       	movw	r30, r16
    1d76:	e4 52       	subi	r30, 0x24	; 36
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1d78:	fe 4f       	sbci	r31, 0xFE	; 254
    1d7a:	80 83       	st	Z, r24
    1d7c:	8d e2       	ldi	r24, 0x2D	; 45
    1d7e:	31 96       	adiw	r30, 0x01	; 1
    1d80:	80 83       	st	Z, r24
				menuScreen->screen2[4][15] = '-';
    1d82:	82 e5       	ldi	r24, 0x52	; 82
    1d84:	31 96       	adiw	r30, 0x01	; 1
    1d86:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = 'R';
    1d88:	80 e2       	ldi	r24, 0x20	; 32
    1d8a:	31 96       	adiw	r30, 0x01	; 1
    1d8c:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1d8e:	28 c0       	rjmp	.+80     	; 0x1de0 <updateScreen+0x700>
    1d90:	82 e5       	ldi	r24, 0x52	; 82
    1d92:	f8 01       	movw	r30, r16
				break;
    1d94:	e4 52       	subi	r30, 0x24	; 36
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1d96:	fe 4f       	sbci	r31, 0xFE	; 254
    1d98:	80 83       	st	Z, r24
    1d9a:	80 e2       	ldi	r24, 0x20	; 32
    1d9c:	31 96       	adiw	r30, 0x01	; 1
    1d9e:	80 83       	st	Z, r24
				menuScreen->screen2[4][15] = ' ';
    1da0:	31 96       	adiw	r30, 0x01	; 1
    1da2:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1da4:	31 96       	adiw	r30, 0x01	; 1
    1da6:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1da8:	1b c0       	rjmp	.+54     	; 0x1de0 <updateScreen+0x700>
    1daa:	81 e4       	ldi	r24, 0x41	; 65
				break;
    1dac:	f8 01       	movw	r30, r16
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1dae:	e4 52       	subi	r30, 0x24	; 36
    1db0:	fe 4f       	sbci	r31, 0xFE	; 254
    1db2:	80 83       	st	Z, r24
    1db4:	80 e2       	ldi	r24, 0x20	; 32
    1db6:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    1db8:	80 83       	st	Z, r24
    1dba:	31 96       	adiw	r30, 0x01	; 1
    1dbc:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1dbe:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1dc0:	80 83       	st	Z, r24
    1dc2:	0e c0       	rjmp	.+28     	; 0x1de0 <updateScreen+0x700>
				break;
    1dc4:	8e e4       	ldi	r24, 0x4E	; 78
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	e4 52       	subi	r30, 0x24	; 36
    1dca:	fe 4f       	sbci	r31, 0xFE	; 254
    1dcc:	80 83       	st	Z, r24
    1dce:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][15] = 'o';
    1dd0:	31 96       	adiw	r30, 0x01	; 1
    1dd2:	80 83       	st	Z, r24
    1dd4:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][16] = 'n';
    1dd6:	31 96       	adiw	r30, 0x01	; 1
    1dd8:	80 83       	st	Z, r24
    1dda:	85 e6       	ldi	r24, 0x65	; 101
				menuScreen->screen2[4][17] = 'e';
    1ddc:	31 96       	adiw	r30, 0x01	; 1
    1dde:	80 83       	st	Z, r24
				break;
			}
			numPrinter(menuScreen->screen2[5],13,3,(currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]));
    1de0:	8d 81       	ldd	r24, Y+5	; 0x05
    1de2:	f7 01       	movw	r30, r14
    1de4:	e8 0f       	add	r30, r24
    1de6:	f1 1d       	adc	r31, r1
    1de8:	e5 52       	subi	r30, 0x25	; 37
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	20 81       	ld	r18, Z
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	43 e0       	ldi	r20, 0x03	; 3
    1df2:	6d e0       	ldi	r22, 0x0D	; 13
    1df4:	c8 01       	movw	r24, r16
    1df6:	8d 51       	subi	r24, 0x1D	; 29
    1df8:	9e 4f       	sbci	r25, 0xFE	; 254
    1dfa:	42 d3       	rcall	.+1668   	; 0x2480 <numPrinter>
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;

			if(currentGlobals->menuState>35) //this accounts for menu stats 36,37,44, and 45
    1dfc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dfe:	84 32       	cpi	r24, 0x24	; 36
    1e00:	18 f0       	brcs	.+6      	; 0x1e08 <updateScreen+0x728>
			{
				triggerChangeScreen = (currentGlobals->menuState&0xF7) - 34; //mask to get rid of encoder B pushed state. 
    1e02:	87 7f       	andi	r24, 0xF7	; 247
    1e04:	82 52       	subi	r24, 0x22	; 34
			numPrinter(menuScreen->screen2[5],13,3,(currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]));
			//the track settings screens should now be populated
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <updateScreen+0x72a>

			if(currentGlobals->menuState>35) //this accounts for menu stats 36,37,44, and 45
			{
				triggerChangeScreen = (currentGlobals->menuState&0xF7) - 34; //mask to get rid of encoder B pushed state. 
			}
			outputS(menuScreen->screen2[triggerChangeScreen], 1); 
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	c8 2e       	mov	r12, r24
    1e0c:	d1 2c       	mov	r13, r1
    1e0e:	0f 2e       	mov	r0, r31
    1e10:	f5 e1       	ldi	r31, 0x15	; 21
    1e12:	bf 2e       	mov	r11, r31
    1e14:	f0 2d       	mov	r31, r0
    1e16:	bc 9c       	mul	r11, r12
    1e18:	c0 01       	movw	r24, r0
    1e1a:	bd 9c       	mul	r11, r13
    1e1c:	90 0d       	add	r25, r0
    1e1e:	11 24       	eor	r1, r1
    1e20:	86 58       	subi	r24, 0x86	; 134
    1e22:	9e 4f       	sbci	r25, 0xFE	; 254
    1e24:	61 e0       	ldi	r22, 0x01	; 1
    1e26:	70 e0       	ldi	r23, 0x00	; 0
    1e28:	80 0f       	add	r24, r16
    1e2a:	91 1f       	adc	r25, r17
			outputS(menuScreen->screen2[triggerChangeScreen+1], 2); 
    1e2c:	11 d3       	rcall	.+1570   	; 0x2450 <outputS>
    1e2e:	96 01       	movw	r18, r12
    1e30:	2f 5f       	subi	r18, 0xFF	; 255
    1e32:	3f 4f       	sbci	r19, 0xFF	; 255
    1e34:	b2 9e       	mul	r11, r18
    1e36:	c0 01       	movw	r24, r0
    1e38:	b3 9e       	mul	r11, r19
    1e3a:	90 0d       	add	r25, r0
    1e3c:	11 24       	eor	r1, r1
    1e3e:	86 58       	subi	r24, 0x86	; 134
    1e40:	9e 4f       	sbci	r25, 0xFE	; 254
    1e42:	62 e0       	ldi	r22, 0x02	; 2
    1e44:	70 e0       	ldi	r23, 0x00	; 0
    1e46:	80 0f       	add	r24, r16
    1e48:	91 1f       	adc	r25, r17
    1e4a:	02 d3       	rcall	.+1540   	; 0x2450 <outputS>
			outputS(menuScreen->screen2[triggerChangeScreen+2], 3);
    1e4c:	b2 e0       	ldi	r27, 0x02	; 2
    1e4e:	cb 0e       	add	r12, r27
    1e50:	d1 1c       	adc	r13, r1
    1e52:	bc 9c       	mul	r11, r12
    1e54:	c0 01       	movw	r24, r0
    1e56:	bd 9c       	mul	r11, r13
    1e58:	90 0d       	add	r25, r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	86 58       	subi	r24, 0x86	; 134
    1e5e:	9e 4f       	sbci	r25, 0xFE	; 254
    1e60:	63 e0       	ldi	r22, 0x03	; 3
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	80 0f       	add	r24, r16
    1e66:	91 1f       	adc	r25, r17
    1e68:	f3 d2       	rcall	.+1510   	; 0x2450 <outputS>
    1e6a:	19 c0       	rjmp	.+50     	; 0x1e9e <updateScreen+0x7be>
			break;
    1e6c:	2d 81       	ldd	r18, Y+5	; 0x05
			
			case 3:;
			//do we need this variable?
			numPrinter(menuScreen->screen3[2],10,2,(currentGlobals->currentTrack)+1);
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	2f 5f       	subi	r18, 0xFF	; 255
    1e72:	3f 4f       	sbci	r19, 0xFF	; 255
    1e74:	42 e0       	ldi	r20, 0x02	; 2
    1e76:	6a e0       	ldi	r22, 0x0A	; 10
    1e78:	68 01       	movw	r12, r16
    1e7a:	ef e9       	ldi	r30, 0x9F	; 159
    1e7c:	ce 1a       	sub	r12, r30
    1e7e:	ed ef       	ldi	r30, 0xFD	; 253
    1e80:	de 0a       	sbc	r13, r30
    1e82:	c6 01       	movw	r24, r12
    1e84:	fd d2       	rcall	.+1530   	; 0x2480 <numPrinter>
    1e86:	8d 81       	ldd	r24, Y+5	; 0x05
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1e88:	fe 01       	movw	r30, r28
    1e8a:	e8 0f       	add	r30, r24
    1e8c:	f1 1d       	adc	r31, r1
    1e8e:	45 85       	ldd	r20, Z+13	; 0x0d
    1e90:	6e e0       	ldi	r22, 0x0E	; 14
    1e92:	c6 01       	movw	r24, r12
    1e94:	bb d4       	rcall	.+2422   	; 0x280c <midiNotePrinter>
    1e96:	62 e0       	ldi	r22, 0x02	; 2
    1e98:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[2],2);
    1e9a:	c6 01       	movw	r24, r12
    1e9c:	d9 d2       	rcall	.+1458   	; 0x2450 <outputS>
    1e9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ea0:	82 ff       	sbrs	r24, 2
    1ea2:	3c c1       	rjmp	.+632    	; 0x211c <updateScreen+0xa3c>
			break;
			
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
    1ea4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ea6:	f8 2f       	mov	r31, r24
    1ea8:	ff 70       	andi	r31, 0x0F	; 15
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
    1eaa:	af 2e       	mov	r10, r31
    1eac:	99 85       	ldd	r25, Y+9	; 0x09
    1eae:	90 ff       	sbrs	r25, 0
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <updateScreen+0x7d6>
		uint8_t positionSelectUpper = 0;
		if((currentGlobals->buttonSwitchFlag)&0x01)
    1eb2:	98 e0       	ldi	r25, 0x08	; 8
    1eb4:	01 c0       	rjmp	.+2      	; 0x1eb8 <updateScreen+0x7d8>
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
		{
			positionSelectUpper = 8;
    1eb8:	82 95       	swap	r24
    1eba:	8f 70       	andi	r24, 0x0F	; 15
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
		uint8_t positionSelectUpper = 0;
    1ebc:	82 30       	cpi	r24, 0x02	; 2
		{
			positionSelectUpper = 8;
		}
		

		switch((currentGlobals->knobStatus)>>4)
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <updateScreen+0x7e2>
    1ec0:	8f c0       	rjmp	.+286    	; 0x1fe0 <updateScreen+0x900>
    1ec2:	30 f4       	brcc	.+12     	; 0x1ed0 <updateScreen+0x7f0>
    1ec4:	88 23       	and	r24, r24
    1ec6:	69 f0       	breq	.+26     	; 0x1ee2 <updateScreen+0x802>
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	09 f4       	brne	.+2      	; 0x1ece <updateScreen+0x7ee>
    1ecc:	52 c0       	rjmp	.+164    	; 0x1f72 <updateScreen+0x892>
    1ece:	25 c1       	rjmp	.+586    	; 0x211a <updateScreen+0xa3a>
    1ed0:	84 30       	cpi	r24, 0x04	; 4
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <updateScreen+0x7f6>
    1ed4:	c7 c0       	rjmp	.+398    	; 0x2064 <updateScreen+0x984>
    1ed6:	08 f4       	brcc	.+2      	; 0x1eda <updateScreen+0x7fa>
    1ed8:	a4 c0       	rjmp	.+328    	; 0x2022 <updateScreen+0x942>
    1eda:	85 30       	cpi	r24, 0x05	; 5
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <updateScreen+0x800>
    1ede:	0b c1       	rjmp	.+534    	; 0x20f6 <updateScreen+0xa16>
    1ee0:	1c c1       	rjmp	.+568    	; 0x211a <updateScreen+0xa3a>
    1ee2:	ea 2d       	mov	r30, r10
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
		{
			case 0: //output volume
			if((currentPattern->outputLevelMSB[positionSelect])==0)
    1ee6:	d7 01       	movw	r26, r14
    1ee8:	ae 0f       	add	r26, r30
    1eea:	bf 1f       	adc	r27, r31
    1eec:	8c 91       	ld	r24, X
    1eee:	81 11       	cpse	r24, r1
    1ef0:	0a c0       	rjmp	.+20     	; 0x1f06 <updateScreen+0x826>
    1ef2:	fd 01       	movw	r30, r26
    1ef4:	20 85       	ldd	r18, Z+8	; 0x08
			{ //value is positive
				numPrinter(menuScreen->knobScreen[0],14,3,currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	43 e0       	ldi	r20, 0x03	; 3
    1efa:	6e e0       	ldi	r22, 0x0E	; 14
    1efc:	c8 01       	movw	r24, r16
    1efe:	8c 50       	subi	r24, 0x0C	; 12
    1f00:	9d 4f       	sbci	r25, 0xFD	; 253
    1f02:	be d2       	rcall	.+1404   	; 0x2480 <numPrinter>
    1f04:	29 c0       	rjmp	.+82     	; 0x1f58 <updateScreen+0x878>
    1f06:	8d e2       	ldi	r24, 0x2D	; 45
    1f08:	d8 01       	movw	r26, r16
    1f0a:	ae 5f       	subi	r26, 0xFE	; 254
			}else
			{
				menuScreen->knobScreen[0][14] = '-';
    1f0c:	bc 4f       	sbci	r27, 0xFC	; 252
    1f0e:	8c 93       	st	X, r24
    1f10:	68 01       	movw	r12, r16
    1f12:	23 e0       	ldi	r18, 0x03	; 3
    1f14:	c2 0e       	add	r12, r18
				menuScreen->knobScreen[0][15] = ((((currentPattern->outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    1f16:	d2 1e       	adc	r13, r18
    1f18:	ee 0d       	add	r30, r14
    1f1a:	ff 1d       	adc	r31, r15
    1f1c:	80 85       	ldd	r24, Z+8	; 0x08
    1f1e:	80 95       	com	r24
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	01 96       	adiw	r24, 0x01	; 1
    1f24:	64 e6       	ldi	r22, 0x64	; 100
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	0e 94 92 1c 	call	0x3924	; 0x3924 <__divmodhi4>
    1f2c:	2a e0       	ldi	r18, 0x0A	; 10
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	b9 01       	movw	r22, r18
    1f32:	0e 94 92 1c 	call	0x3924	; 0x3924 <__divmodhi4>
    1f36:	60 5d       	subi	r22, 0xD0	; 208
    1f38:	d6 01       	movw	r26, r12
    1f3a:	6c 93       	st	X, r22
    1f3c:	78 01       	movw	r14, r16
				menuScreen->knobScreen[0][16] = (((currentPattern->outputLevelLSB[positionSelect]^255)+1)%10)+48;
    1f3e:	bc ef       	ldi	r27, 0xFC	; 252
    1f40:	eb 1a       	sub	r14, r27
    1f42:	fb 0a       	sbc	r15, r27
    1f44:	80 85       	ldd	r24, Z+8	; 0x08
    1f46:	80 95       	com	r24
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	01 96       	adiw	r24, 0x01	; 1
    1f4c:	b9 01       	movw	r22, r18
    1f4e:	0e 94 92 1c 	call	0x3924	; 0x3924 <__divmodhi4>
    1f52:	80 5d       	subi	r24, 0xD0	; 208
    1f54:	f7 01       	movw	r30, r14
    1f56:	80 83       	st	Z, r24
			}
				
			menuScreen->knobScreen[0][10] = positionSelect + 49;
    1f58:	f8 01       	movw	r30, r16
    1f5a:	e2 50       	subi	r30, 0x02	; 2
    1f5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f5e:	81 e3       	ldi	r24, 0x31	; 49
    1f60:	8a 0d       	add	r24, r10
    1f62:	80 83       	st	Z, r24
			outputS(menuScreen->knobScreen[0], 3);
    1f64:	63 e0       	ldi	r22, 0x03	; 3
    1f66:	70 e0       	ldi	r23, 0x00	; 0
    1f68:	c8 01       	movw	r24, r16
    1f6a:	8c 50       	subi	r24, 0x0C	; 12
    1f6c:	9d 4f       	sbci	r25, 0xFD	; 253
    1f6e:	70 d2       	rcall	.+1248   	; 0x2450 <outputS>
			break;
    1f70:	d4 c0       	rjmp	.+424    	; 0x211a <updateScreen+0xa3a>
				
			case 1: //pitch
			menuScreen->knobScreen[1][5] = positionSelect+49; 
    1f72:	f8 01       	movw	r30, r16
    1f74:	e2 5f       	subi	r30, 0xF2	; 242
    1f76:	fc 4f       	sbci	r31, 0xFC	; 252
    1f78:	81 e3       	ldi	r24, 0x31	; 49
    1f7a:	8a 0d       	add	r24, r10
			if(currentPattern->outputPitch[positionSelect]>>7)
    1f7c:	80 83       	st	Z, r24
    1f7e:	ca 2c       	mov	r12, r10
    1f80:	d1 2c       	mov	r13, r1
    1f82:	f7 01       	movw	r30, r14
    1f84:	ec 0d       	add	r30, r12
    1f86:	fd 1d       	adc	r31, r13
    1f88:	80 89       	ldd	r24, Z+16	; 0x10
			{
				menuScreen->knobScreen[1][7] = '-';
    1f8a:	88 23       	and	r24, r24
    1f8c:	94 f4       	brge	.+36     	; 0x1fb2 <updateScreen+0x8d2>
    1f8e:	8d e2       	ldi	r24, 0x2D	; 45
    1f90:	f8 01       	movw	r30, r16
    1f92:	e0 5f       	subi	r30, 0xF0	; 240
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect])^255);
    1f94:	fc 4f       	sbci	r31, 0xFC	; 252
    1f96:	80 83       	st	Z, r24
    1f98:	f7 01       	movw	r30, r14
    1f9a:	ec 0d       	add	r30, r12
    1f9c:	fd 1d       	adc	r31, r13
    1f9e:	20 89       	ldd	r18, Z+16	; 0x10
    1fa0:	20 95       	com	r18
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	43 e0       	ldi	r20, 0x03	; 3
    1fa6:	68 e0       	ldi	r22, 0x08	; 8
    1fa8:	c8 01       	movw	r24, r16
    1faa:	87 5f       	subi	r24, 0xF7	; 247
    1fac:	9c 4f       	sbci	r25, 0xFC	; 252
			}else
			{
				menuScreen->knobScreen[1][7] = '+';
    1fae:	68 d2       	rcall	.+1232   	; 0x2480 <numPrinter>
    1fb0:	10 c0       	rjmp	.+32     	; 0x1fd2 <updateScreen+0x8f2>
    1fb2:	8b e2       	ldi	r24, 0x2B	; 43
    1fb4:	f8 01       	movw	r30, r16
				numPrinter(menuScreen->knobScreen[1],8,3,currentPattern->outputPitch[positionSelect]);
    1fb6:	e0 5f       	subi	r30, 0xF0	; 240
    1fb8:	fc 4f       	sbci	r31, 0xFC	; 252
    1fba:	80 83       	st	Z, r24
    1fbc:	f7 01       	movw	r30, r14
    1fbe:	ec 0d       	add	r30, r12
    1fc0:	fd 1d       	adc	r31, r13
    1fc2:	20 89       	ldd	r18, Z+16	; 0x10
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	43 e0       	ldi	r20, 0x03	; 3
    1fc8:	68 e0       	ldi	r22, 0x08	; 8
    1fca:	c8 01       	movw	r24, r16
			}
			outputS(menuScreen->knobScreen[1],3);
    1fcc:	87 5f       	subi	r24, 0xF7	; 247
    1fce:	9c 4f       	sbci	r25, 0xFC	; 252
    1fd0:	57 d2       	rcall	.+1198   	; 0x2480 <numPrinter>
    1fd2:	63 e0       	ldi	r22, 0x03	; 3
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	c8 01       	movw	r24, r16
    1fd8:	87 5f       	subi	r24, 0xF7	; 247
			break;
    1fda:	9c 4f       	sbci	r25, 0xFC	; 252
				
			case 2: //attack envelope 				
			numPrinter(menuScreen->knobScreen[2],14, 4, currentPattern->trackAttackTimeLSB[(positionSelect+positionSelectUpper)]);	
    1fdc:	39 d2       	rcall	.+1138   	; 0x2450 <outputS>
    1fde:	9d c0       	rjmp	.+314    	; 0x211a <updateScreen+0xa3a>
    1fe0:	ca 2c       	mov	r12, r10
    1fe2:	d1 2c       	mov	r13, r1
    1fe4:	a9 2e       	mov	r10, r25
    1fe6:	b1 2c       	mov	r11, r1
    1fe8:	02 5e       	subi	r16, 0xE2	; 226
    1fea:	1c 4f       	sbci	r17, 0xFC	; 252
    1fec:	f7 01       	movw	r30, r14
    1fee:	ec 0d       	add	r30, r12
    1ff0:	fd 1d       	adc	r31, r13
    1ff2:	ea 0d       	add	r30, r10
    1ff4:	fb 1d       	adc	r31, r11
    1ff6:	e8 5a       	subi	r30, 0xA8	; 168
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	20 81       	ld	r18, Z
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	44 e0       	ldi	r20, 0x04	; 4
    2000:	6e e0       	ldi	r22, 0x0E	; 14
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
    2002:	c8 01       	movw	r24, r16
    2004:	3d d2       	rcall	.+1146   	; 0x2480 <numPrinter>
    2006:	96 01       	movw	r18, r12
    2008:	2f 5f       	subi	r18, 0xFF	; 255
    200a:	3f 4f       	sbci	r19, 0xFF	; 255
    200c:	2a 0d       	add	r18, r10
    200e:	3b 1d       	adc	r19, r11
    2010:	42 e0       	ldi	r20, 0x02	; 2
    2012:	6a e0       	ldi	r22, 0x0A	; 10
    2014:	c8 01       	movw	r24, r16
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
    2016:	34 d2       	rcall	.+1128   	; 0x2480 <numPrinter>
    2018:	63 e0       	ldi	r22, 0x03	; 3
    201a:	70 e0       	ldi	r23, 0x00	; 0
    201c:	c8 01       	movw	r24, r16
    201e:	18 d2       	rcall	.+1072   	; 0x2450 <outputS>
			break;
    2020:	7c c0       	rjmp	.+248    	; 0x211a <updateScreen+0xa3a>
				
			case 3: //envelope bottom knob
			numPrinter(menuScreen->knobScreen[3],14,4,currentPattern->trackReleaseTimeLSB[(positionSelect+positionSelectUpper)]);
    2022:	ca 2c       	mov	r12, r10
    2024:	d1 2c       	mov	r13, r1
    2026:	a9 2e       	mov	r10, r25
    2028:	b1 2c       	mov	r11, r1
    202a:	0d 5c       	subi	r16, 0xCD	; 205
    202c:	1c 4f       	sbci	r17, 0xFC	; 252
    202e:	f7 01       	movw	r30, r14
    2030:	ec 0d       	add	r30, r12
    2032:	fd 1d       	adc	r31, r13
    2034:	ea 0d       	add	r30, r10
    2036:	fb 1d       	adc	r31, r11
    2038:	e8 58       	subi	r30, 0x88	; 136
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	20 81       	ld	r18, Z
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	44 e0       	ldi	r20, 0x04	; 4
    2042:	6e e0       	ldi	r22, 0x0E	; 14
    2044:	c8 01       	movw	r24, r16
			numPrinter(menuScreen->knobScreen[3],11,2,(positionSelect+1+positionSelectUpper));
    2046:	1c d2       	rcall	.+1080   	; 0x2480 <numPrinter>
    2048:	96 01       	movw	r18, r12
    204a:	2f 5f       	subi	r18, 0xFF	; 255
    204c:	3f 4f       	sbci	r19, 0xFF	; 255
    204e:	2a 0d       	add	r18, r10
    2050:	3b 1d       	adc	r19, r11
    2052:	42 e0       	ldi	r20, 0x02	; 2
    2054:	6b e0       	ldi	r22, 0x0B	; 11
    2056:	c8 01       	movw	r24, r16
    2058:	13 d2       	rcall	.+1062   	; 0x2480 <numPrinter>
			outputS(menuScreen->knobScreen[3], 3);
    205a:	63 e0       	ldi	r22, 0x03	; 3
    205c:	70 e0       	ldi	r23, 0x00	; 0
    205e:	c8 01       	movw	r24, r16
    2060:	f7 d1       	rcall	.+1006   	; 0x2450 <outputS>
			break;
    2062:	5b c0       	rjmp	.+182    	; 0x211a <updateScreen+0xa3a>
				
			case 4: //track volume
			if(currentPattern->trackMainVolumeMSB[(positionSelect+positionSelectUpper)]==0)
    2064:	c9 2e       	mov	r12, r25
    2066:	d1 2c       	mov	r13, r1
    2068:	ca 0c       	add	r12, r10
    206a:	d1 1c       	adc	r13, r1
    206c:	f7 01       	movw	r30, r14
    206e:	ec 0d       	add	r30, r12
    2070:	fd 1d       	adc	r31, r13
    2072:	80 a5       	ldd	r24, Z+40	; 0x28
    2074:	81 11       	cpse	r24, r1
			{
				numPrinter(menuScreen->knobScreen[4],15, 2, currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]);
    2076:	0c c0       	rjmp	.+24     	; 0x2090 <updateScreen+0x9b0>
    2078:	f7 01       	movw	r30, r14
    207a:	ec 0d       	add	r30, r12
    207c:	fd 1d       	adc	r31, r13
    207e:	20 ad       	ldd	r18, Z+56	; 0x38
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	42 e0       	ldi	r20, 0x02	; 2
    2084:	6f e0       	ldi	r22, 0x0F	; 15
    2086:	c8 01       	movw	r24, r16
    2088:	88 5b       	subi	r24, 0xB8	; 184
    208a:	9c 4f       	sbci	r25, 0xFC	; 252
    208c:	f9 d1       	rcall	.+1010   	; 0x2480 <numPrinter>
    208e:	25 c0       	rjmp	.+74     	; 0x20da <updateScreen+0x9fa>
			}else
			{
				menuScreen->knobScreen[4][15] = '-';
    2090:	8d e2       	ldi	r24, 0x2D	; 45
    2092:	f8 01       	movw	r30, r16
    2094:	e9 5a       	subi	r30, 0xA9	; 169
    2096:	fc 4f       	sbci	r31, 0xFC	; 252
    2098:	80 83       	st	Z, r24
				menuScreen->knobScreen[4][16] = ((((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    209a:	31 96       	adiw	r30, 0x01	; 1
    209c:	ec 0c       	add	r14, r12
    209e:	fd 1c       	adc	r15, r13
    20a0:	d7 01       	movw	r26, r14
    20a2:	d8 96       	adiw	r26, 0x38	; 56
    20a4:	8c 91       	ld	r24, X
    20a6:	80 95       	com	r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	01 96       	adiw	r24, 0x01	; 1
    20ac:	64 e6       	ldi	r22, 0x64	; 100
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	0e 94 92 1c 	call	0x3924	; 0x3924 <__divmodhi4>
    20b4:	2a e0       	ldi	r18, 0x0A	; 10
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	b9 01       	movw	r22, r18
    20ba:	0e 94 92 1c 	call	0x3924	; 0x3924 <__divmodhi4>
    20be:	60 5d       	subi	r22, 0xD0	; 208
    20c0:	60 83       	st	Z, r22
				menuScreen->knobScreen[4][17] = (((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%10)+48;
    20c2:	31 96       	adiw	r30, 0x01	; 1
    20c4:	d7 01       	movw	r26, r14
    20c6:	d8 96       	adiw	r26, 0x38	; 56
    20c8:	8c 91       	ld	r24, X
    20ca:	80 95       	com	r24
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	01 96       	adiw	r24, 0x01	; 1
    20d0:	b9 01       	movw	r22, r18
    20d2:	0e 94 92 1c 	call	0x3924	; 0x3924 <__divmodhi4>
    20d6:	80 5d       	subi	r24, 0xD0	; 208
    20d8:	80 83       	st	Z, r24
			}
				 numPrinter(menuScreen->knobScreen[4],12,2,(positionSelect+positionSelectUpper+1));
    20da:	08 5b       	subi	r16, 0xB8	; 184
    20dc:	1c 4f       	sbci	r17, 0xFC	; 252
    20de:	96 01       	movw	r18, r12
    20e0:	2f 5f       	subi	r18, 0xFF	; 255
    20e2:	3f 4f       	sbci	r19, 0xFF	; 255
    20e4:	42 e0       	ldi	r20, 0x02	; 2
    20e6:	6c e0       	ldi	r22, 0x0C	; 12
    20e8:	c8 01       	movw	r24, r16
    20ea:	ca d1       	rcall	.+916    	; 0x2480 <numPrinter>
    20ec:	63 e0       	ldi	r22, 0x03	; 3
				 outputS(menuScreen->knobScreen[4], 3);
    20ee:	70 e0       	ldi	r23, 0x00	; 0
    20f0:	c8 01       	movw	r24, r16
    20f2:	ae d1       	rcall	.+860    	; 0x2450 <outputS>
    20f4:	12 c0       	rjmp	.+36     	; 0x211a <updateScreen+0xa3a>
    20f6:	06 5d       	subi	r16, 0xD6	; 214
			break;
    20f8:	1f 4f       	sbci	r17, 0xFF	; 255
			
			case 5:
			numPrinter(menuScreen->screen0[2],5,3,currentPattern->patternBPM);
    20fa:	f7 01       	movw	r30, r14
    20fc:	e8 53       	subi	r30, 0x38	; 56
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	20 81       	ld	r18, Z
    2102:	31 81       	ldd	r19, Z+1	; 0x01
    2104:	43 e0       	ldi	r20, 0x03	; 3
    2106:	65 e0       	ldi	r22, 0x05	; 5
    2108:	c8 01       	movw	r24, r16
    210a:	ba d1       	rcall	.+884    	; 0x2480 <numPrinter>
    210c:	8e 81       	ldd	r24, Y+6	; 0x06
    210e:	81 11       	cpse	r24, r1
    2110:	04 c0       	rjmp	.+8      	; 0x211a <updateScreen+0xa3a>
			if(currentGlobals->menuState==PreformanceModeInit)
    2112:	62 e0       	ldi	r22, 0x02	; 2
    2114:	70 e0       	ldi	r23, 0x00	; 0
    2116:	c8 01       	movw	r24, r16
			{
				outputS(menuScreen->screen0[2],2);
    2118:	9b d1       	rcall	.+822    	; 0x2450 <outputS>
    211a:	1a 86       	std	Y+10, r1	; 0x0a
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	1f 91       	pop	r17
			}
			break;
		}
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<knobChange));			
    2122:	0f 91       	pop	r16
	}
    2124:	ff 90       	pop	r15
    2126:	ef 90       	pop	r14
    2128:	df 90       	pop	r13
    212a:	cf 90       	pop	r12
    212c:	bf 90       	pop	r11
    212e:	af 90       	pop	r10
    2130:	08 95       	ret

00002132 <__vector_54>:
    2132:	1f 92       	push	r1
    2134:	0f 92       	push	r0
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	0f 92       	push	r0
}

void midiTransmit(uint8_t data)
{
  while (!(UCSR3A & (1 << UDRE3)));
  UDR3 = data;
    213a:	11 24       	eor	r1, r1
    213c:	0b b6       	in	r0, 0x3b	; 59
    213e:	0f 92       	push	r0
    2140:	2f 93       	push	r18
    2142:	3f 93       	push	r19
    2144:	5f 93       	push	r21
    2146:	6f 93       	push	r22
    2148:	7f 93       	push	r23
    214a:	8f 93       	push	r24
    214c:	9f 93       	push	r25
    214e:	af 93       	push	r26
    2150:	bf 93       	push	r27
    2152:	ef 93       	push	r30
    2154:	ff 93       	push	r31
    2156:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    215a:	82 2f       	mov	r24, r18
    215c:	82 95       	swap	r24
    215e:	8f 70       	andi	r24, 0x0F	; 15
    2160:	88 50       	subi	r24, 0x08	; 8
    2162:	82 30       	cpi	r24, 0x02	; 2
    2164:	78 f4       	brcc	.+30     	; 0x2184 <__vector_54+0x52>
    2166:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <midiWriteIndex>
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	fc 01       	movw	r30, r24
    216e:	ee 0f       	add	r30, r30
    2170:	ff 1f       	adc	r31, r31
    2172:	8e 0f       	add	r24, r30
    2174:	9f 1f       	adc	r25, r31
    2176:	fc 01       	movw	r30, r24
    2178:	ea 54       	subi	r30, 0x4A	; 74
    217a:	f6 4f       	sbci	r31, 0xF6	; 246
    217c:	20 83       	st	Z, r18
    217e:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    2182:	50 c0       	rjmp	.+160    	; 0x2224 <__stack+0x25>
    2184:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    2188:	81 11       	cpse	r24, r1
    218a:	15 c0       	rjmp	.+42     	; 0x21b6 <__vector_54+0x84>
    218c:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <midiWriteIndex>
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    2196:	fc 01       	movw	r30, r24
    2198:	ee 0f       	add	r30, r30
    219a:	ff 1f       	adc	r31, r31
    219c:	e8 0f       	add	r30, r24
    219e:	f9 1f       	adc	r31, r25
    21a0:	ea 54       	subi	r30, 0x4A	; 74
    21a2:	f6 4f       	sbci	r31, 0xF6	; 246
    21a4:	e3 0f       	add	r30, r19
    21a6:	f1 1d       	adc	r31, r1
    21a8:	21 83       	std	Z+1, r18	; 0x01
    21aa:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    21ae:	8f 5f       	subi	r24, 0xFF	; 255
    21b0:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <midiWriteFlag>
    21b4:	37 c0       	rjmp	.+110    	; 0x2224 <__stack+0x25>
    21b6:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    21ba:	8f 3f       	cpi	r24, 0xFF	; 255
    21bc:	99 f1       	breq	.+102    	; 0x2224 <__stack+0x25>
    21be:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <midiWriteIndex>
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    21c8:	fc 01       	movw	r30, r24
    21ca:	ee 0f       	add	r30, r30
    21cc:	ff 1f       	adc	r31, r31
    21ce:	e8 0f       	add	r30, r24
    21d0:	f9 1f       	adc	r31, r25
    21d2:	ea 54       	subi	r30, 0x4A	; 74
    21d4:	f6 4f       	sbci	r31, 0xF6	; 246
    21d6:	e3 0f       	add	r30, r19
    21d8:	f1 1d       	adc	r31, r1
    21da:	21 83       	std	Z+1, r18	; 0x01
    21dc:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <midiWriteIndex>
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	fc 01       	movw	r30, r24
    21e4:	ee 0f       	add	r30, r30
    21e6:	ff 1f       	adc	r31, r31
    21e8:	8e 0f       	add	r24, r30
    21ea:	9f 1f       	adc	r25, r31
    21ec:	fc 01       	movw	r30, r24
    21ee:	ea 54       	subi	r30, 0x4A	; 74
    21f0:	f6 4f       	sbci	r31, 0xF6	; 246
    21f2:	20 81       	ld	r18, Z
    21f4:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <midiWriteIndex>
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	01 96       	adiw	r24, 0x01	; 1
    21fc:	6a e0       	ldi	r22, 0x0A	; 10
    21fe:	70 e0       	ldi	r23, 0x00	; 0
    2200:	0e 94 92 1c 	call	0x3924	; 0x3924 <__divmodhi4>
    2204:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <midiWriteIndex>
    2208:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <midiWriteIndex>
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	fc 01       	movw	r30, r24
    2210:	ee 0f       	add	r30, r30
    2212:	ff 1f       	adc	r31, r31
    2214:	8e 0f       	add	r24, r30
    2216:	9f 1f       	adc	r25, r31
    2218:	fc 01       	movw	r30, r24
    221a:	ea 54       	subi	r30, 0x4A	; 74
    221c:	f6 4f       	sbci	r31, 0xF6	; 246
    221e:	20 83       	st	Z, r18
    2220:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    2224:	ff 91       	pop	r31
    2226:	ef 91       	pop	r30
    2228:	bf 91       	pop	r27
    222a:	af 91       	pop	r26
    222c:	9f 91       	pop	r25
    222e:	8f 91       	pop	r24
    2230:	7f 91       	pop	r23
    2232:	6f 91       	pop	r22
    2234:	5f 91       	pop	r21
    2236:	3f 91       	pop	r19
    2238:	2f 91       	pop	r18
    223a:	0f 90       	pop	r0
    223c:	0b be       	out	0x3b, r0	; 59
    223e:	0f 90       	pop	r0
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	0f 90       	pop	r0
    2244:	1f 90       	pop	r1
    2246:	18 95       	reti

00002248 <initMidi>:
    2248:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    224c:	8f e1       	ldi	r24, 0x1F	; 31
    224e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    2252:	e1 e3       	ldi	r30, 0x31	; 49
    2254:	f1 e0       	ldi	r31, 0x01	; 1
    2256:	80 81       	ld	r24, Z
    2258:	88 69       	ori	r24, 0x98	; 152
    225a:	80 83       	st	Z, r24
    225c:	e2 e3       	ldi	r30, 0x32	; 50
    225e:	f1 e0       	ldi	r31, 0x01	; 1
    2260:	80 81       	ld	r24, Z
    2262:	86 60       	ori	r24, 0x06	; 6
    2264:	80 83       	st	Z, r24
    2266:	08 95       	ret

00002268 <midiRead>:
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
    2268:	af 92       	push	r10
    226a:	bf 92       	push	r11
    226c:	cf 92       	push	r12
    226e:	df 92       	push	r13
    2270:	ef 92       	push	r14
    2272:	ff 92       	push	r15
    2274:	0f 93       	push	r16
    2276:	1f 93       	push	r17
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
  while (midiReadIndex != midiWriteIndex)
    2280:	e0 91 95 03 	lds	r30, 0x0395	; 0x800395 <midiReadIndex>
    2284:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <midiWriteIndex>
    2288:	e8 17       	cp	r30, r24
    228a:	09 f4       	brne	.+2      	; 0x228e <midiRead+0x26>
    228c:	5c c0       	rjmp	.+184    	; 0x2346 <midiRead+0xde>
    228e:	7e 01       	movw	r14, r28
    2290:	86 ea       	ldi	r24, 0xA6	; 166
    2292:	e8 0e       	add	r14, r24
    2294:	f1 1c       	adc	r15, r1
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    2296:	0a e0       	ldi	r16, 0x0A	; 10
    2298:	10 e0       	ldi	r17, 0x00	; 0

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
  {
    uint8_t midiMessageType = ((midiEventBuffer[midiReadIndex].statusByte)>>4);
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	cf 01       	movw	r24, r30
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	e8 0f       	add	r30, r24
    22a4:	f9 1f       	adc	r31, r25
    22a6:	ea 54       	subi	r30, 0x4A	; 74
    22a8:	f6 4f       	sbci	r31, 0xF6	; 246
    22aa:	80 81       	ld	r24, Z
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    22ac:	22 81       	ldd	r18, Z+2	; 0x02
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    22ae:	90 81       	ld	r25, Z
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    22b0:	82 95       	swap	r24
    22b2:	8f 70       	andi	r24, 0x0F	; 15
    22b4:	89 30       	cpi	r24, 0x09	; 9
    22b6:	c9 f5       	brne	.+114    	; 0x232a <midiRead+0xc2>
    22b8:	22 23       	and	r18, r18
    22ba:	b9 f1       	breq	.+110    	; 0x232a <midiRead+0xc2>
    22bc:	9f 70       	andi	r25, 0x0F	; 15
    22be:	cb 56       	subi	r28, 0x6B	; 107
    22c0:	de 4f       	sbci	r29, 0xFE	; 254
    22c2:	88 81       	ld	r24, Y
    22c4:	c5 59       	subi	r28, 0x95	; 149
    22c6:	d1 40       	sbci	r29, 0x01	; 1
    22c8:	98 13       	cpse	r25, r24
    22ca:	2f c0       	rjmp	.+94     	; 0x232a <midiRead+0xc2>
    22cc:	0f 2e       	mov	r0, r31
    22ce:	f9 e8       	ldi	r31, 0x89	; 137
    22d0:	af 2e       	mov	r10, r31
    22d2:	bb 24       	eor	r11, r11
    22d4:	b3 94       	inc	r11
    22d6:	f0 2d       	mov	r31, r0
    22d8:	ac 0e       	add	r10, r28
    22da:	bd 1e       	adc	r11, r29
    22dc:	ed e0       	ldi	r30, 0x0D	; 13
    22de:	ae 0e       	add	r10, r30
    22e0:	b1 1c       	adc	r11, r1
    22e2:	6e 01       	movw	r12, r28
    22e4:	f6 e9       	ldi	r31, 0x96	; 150
    22e6:	cf 0e       	add	r12, r31
    22e8:	d1 1c       	adc	r13, r1
    {
        for (int i=0; i<16; i++)
        {
          if(midiEventBuffer[midiReadIndex].dataByte[0]==currentGlobals.midiTrackNote[i])
    22ea:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <midiReadIndex>
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	fc 01       	movw	r30, r24
    22f2:	ee 0f       	add	r30, r30
    22f4:	ff 1f       	adc	r31, r31
    22f6:	8e 0f       	add	r24, r30
    22f8:	9f 1f       	adc	r25, r31
    22fa:	fc 01       	movw	r30, r24
    22fc:	ea 54       	subi	r30, 0x4A	; 74
    22fe:	f6 4f       	sbci	r31, 0xF6	; 246
    2300:	91 81       	ldd	r25, Z+1	; 0x01
    2302:	f5 01       	movw	r30, r10
    2304:	81 91       	ld	r24, Z+
    2306:	5f 01       	movw	r10, r30
    2308:	98 13       	cpse	r25, r24
    230a:	09 c0       	rjmp	.+18     	; 0x231e <midiRead+0xb6>
          { //we don't care about velocity, at least not yet.
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
    230c:	f6 01       	movw	r30, r12
    230e:	20 81       	ld	r18, Z
    2310:	e0 57       	subi	r30, 0x70	; 112
    2312:	f1 09       	sbc	r31, r1
    2314:	40 81       	ld	r20, Z
    2316:	f6 01       	movw	r30, r12
    2318:	60 89       	ldd	r22, Z+16	; 0x10
    231a:	80 a1       	ldd	r24, Z+32	; 0x20
    231c:	e4 d3       	rcall	.+1992   	; 0x2ae6 <trackControl>
    231e:	ff ef       	ldi	r31, 0xFF	; 255
    2320:	cf 1a       	sub	r12, r31
    2322:	df 0a       	sbc	r13, r31
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    {
        for (int i=0; i<16; i++)
    2324:	ce 14       	cp	r12, r14
    2326:	df 04       	cpc	r13, r15
    2328:	01 f7       	brne	.-64     	; 0x22ea <midiRead+0x82>
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    232a:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <midiReadIndex>
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	01 96       	adiw	r24, 0x01	; 1
    2332:	b8 01       	movw	r22, r16
    2334:	0e 94 92 1c 	call	0x3924	; 0x3924 <__divmodhi4>
    2338:	e8 2f       	mov	r30, r24
    233a:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <midiReadIndex>
  UDR3 = data;
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
    233e:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <midiWriteIndex>
    2342:	8e 13       	cpse	r24, r30
    2344:	aa cf       	rjmp	.-172    	; 0x229a <midiRead+0x32>
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
  }
}
    2346:	df 91       	pop	r29
    2348:	cf 91       	pop	r28
    234a:	1f 91       	pop	r17
    234c:	0f 91       	pop	r16
    234e:	ff 90       	pop	r15
    2350:	ef 90       	pop	r14
    2352:	df 90       	pop	r13
    2354:	cf 90       	pop	r12
    2356:	bf 90       	pop	r11
    2358:	af 90       	pop	r10
    235a:	08 95       	ret

0000235c <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    235c:	e2 e0       	ldi	r30, 0x02	; 2
    235e:	f1 e0       	ldi	r31, 0x01	; 1
    2360:	80 81       	ld	r24, Z
    2362:	80 62       	ori	r24, 0x20	; 32
    2364:	80 83       	st	Z, r24
    2366:	85 e0       	ldi	r24, 0x05	; 5
    2368:	8a 95       	dec	r24
    236a:	f1 f7       	brne	.-4      	; 0x2368 <enableCycle+0xc>
    236c:	00 00       	nop
    236e:	80 81       	ld	r24, Z
    2370:	8f 7d       	andi	r24, 0xDF	; 223
    2372:	80 83       	st	Z, r24
    2374:	08 95       	ret

00002376 <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
    2376:	e2 e0       	ldi	r30, 0x02	; 2
    2378:	f1 e0       	ldi	r31, 0x01	; 1
    237a:	90 81       	ld	r25, Z
    237c:	9f 7b       	andi	r25, 0xBF	; 191
    237e:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    2380:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
    2382:	ec cf       	rjmp	.-40     	; 0x235c <enableCycle>
    2384:	08 95       	ret

00002386 <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
    2386:	e2 e0       	ldi	r30, 0x02	; 2
    2388:	f1 e0       	ldi	r31, 0x01	; 1
    238a:	90 81       	ld	r25, Z
    238c:	90 64       	ori	r25, 0x40	; 64
    238e:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    2390:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
    2392:	e4 cf       	rjmp	.-56     	; 0x235c <enableCycle>
    2394:	08 95       	ret

00002396 <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRH = 0x60; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
    2396:	80 e6       	ldi	r24, 0x60	; 96
    2398:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	DDRC =0xFF; //all pins on the LCD Data Bus.
    239c:	8f ef       	ldi	r24, 0xFF	; 255
    239e:	87 b9       	out	0x07, r24	; 7


	PORTH &= 0B10011111;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
    23a0:	e2 e0       	ldi	r30, 0x02	; 2
    23a2:	f1 e0       	ldi	r31, 0x01	; 1
    23a4:	80 81       	ld	r24, Z
    23a6:	8f 79       	andi	r24, 0x9F	; 159
    23a8:	80 83       	st	Z, r24

	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
    23aa:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23ac:	8f e1       	ldi	r24, 0x1F	; 31
    23ae:	93 e0       	ldi	r25, 0x03	; 3
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	f1 f7       	brne	.-4      	; 0x23b0 <initScreen+0x1a>
    23b4:	00 c0       	rjmp	.+0      	; 0x23b6 <initScreen+0x20>
    23b6:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose


	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    23b8:	8a e2       	ldi	r24, 0x2A	; 42
    23ba:	dd df       	rcall	.-70     	; 0x2376 <command>
	command(0x71);        // Function selection A:
    23bc:	81 e7       	ldi	r24, 0x71	; 113
    23be:	db df       	rcall	.-74     	; 0x2376 <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
    23c0:	8c e5       	ldi	r24, 0x5C	; 92
    23c2:	e1 df       	rcall	.-62     	; 0x2386 <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    23c4:	88 e2       	ldi	r24, 0x28	; 40
    23c6:	d7 df       	rcall	.-82     	; 0x2376 <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
    23c8:	88 e0       	ldi	r24, 0x08	; 8
    23ca:	d5 df       	rcall	.-86     	; 0x2376 <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    23cc:	8a e2       	ldi	r24, 0x2A	; 42
    23ce:	d3 df       	rcall	.-90     	; 0x2376 <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    23d0:	89 e7       	ldi	r24, 0x79	; 121
    23d2:	d1 df       	rcall	.-94     	; 0x2376 <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
    23d4:	85 ed       	ldi	r24, 0xD5	; 213
    23d6:	cf df       	rcall	.-98     	; 0x2376 <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
    23d8:	80 e7       	ldi	r24, 0x70	; 112
    23da:	cd df       	rcall	.-102    	; 0x2376 <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    23dc:	88 e7       	ldi	r24, 0x78	; 120
    23de:	cb df       	rcall	.-106    	; 0x2376 <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
    23e0:	89 e0       	ldi	r24, 0x09	; 9
    23e2:	c9 df       	rcall	.-110    	; 0x2376 <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
    23e4:	86 e0       	ldi	r24, 0x06	; 6
    23e6:	c7 df       	rcall	.-114    	; 0x2376 <command>
	command(0x72);        // Function selection B:
    23e8:	82 e7       	ldi	r24, 0x72	; 114
    23ea:	c5 df       	rcall	.-118    	; 0x2376 <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
    23ec:	8a e0       	ldi	r24, 0x0A	; 10
    23ee:	cb df       	rcall	.-106    	; 0x2386 <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    23f0:	89 e7       	ldi	r24, 0x79	; 121
    23f2:	c1 df       	rcall	.-126    	; 0x2376 <command>
	command(0xDA);        // Set SEG pins hardware configuration:
    23f4:	8a ed       	ldi	r24, 0xDA	; 218
    23f6:	bf df       	rcall	.-130    	; 0x2376 <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
    23f8:	80 e1       	ldi	r24, 0x10	; 16
    23fa:	bd df       	rcall	.-134    	; 0x2376 <command>
	command(0xDC);        // Function selection C:
    23fc:	8c ed       	ldi	r24, 0xDC	; 220
    23fe:	bb df       	rcall	.-138    	; 0x2376 <command>
	command(0x00);        //  internal VSL, GPIO input disable
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	b9 df       	rcall	.-142    	; 0x2376 <command>
	command(0x81);        // Set contrast control:
    2404:	81 e8       	ldi	r24, 0x81	; 129
    2406:	b7 df       	rcall	.-146    	; 0x2376 <command>
    2408:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
    240a:	b5 df       	rcall	.-150    	; 0x2376 <command>
    240c:	89 ed       	ldi	r24, 0xD9	; 217
    240e:	b3 df       	rcall	.-154    	; 0x2376 <command>
	command(0xD9);        // Set phase length:
    2410:	81 ef       	ldi	r24, 0xF1	; 241
    2412:	b1 df       	rcall	.-158    	; 0x2376 <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
    2414:	8b ed       	ldi	r24, 0xDB	; 219
    2416:	af df       	rcall	.-162    	; 0x2376 <command>
    2418:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
    241a:	ad df       	rcall	.-166    	; 0x2376 <command>
    241c:	88 e7       	ldi	r24, 0x78	; 120
    241e:	ab df       	rcall	.-170    	; 0x2376 <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
    2420:	88 e2       	ldi	r24, 0x28	; 40
    2422:	a9 df       	rcall	.-174    	; 0x2376 <command>
    2424:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    2426:	a7 df       	rcall	.-178    	; 0x2376 <command>
    2428:	8f e3       	ldi	r24, 0x3F	; 63
    242a:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <initScreen+0x96>
    2430:	00 c0       	rjmp	.+0      	; 0x2432 <initScreen+0x9c>
	command(0x01);        // Clear display
    2432:	00 00       	nop
    2434:	80 e8       	ldi	r24, 0x80	; 128
    2436:	9f df       	rcall	.-194    	; 0x2376 <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2438:	8c e0       	ldi	r24, 0x0C	; 12
    243a:	9d df       	rcall	.-198    	; 0x2376 <command>
    243c:	9f ef       	ldi	r25, 0xFF	; 255
    243e:	24 e3       	ldi	r18, 0x34	; 52
    2440:	8c e0       	ldi	r24, 0x0C	; 12
    2442:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required

	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
    2444:	20 40       	sbci	r18, 0x00	; 0
    2446:	80 40       	sbci	r24, 0x00	; 0
    2448:	e1 f7       	brne	.-8      	; 0x2442 <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
    244a:	00 c0       	rjmp	.+0      	; 0x244c <initScreen+0xb6>
    244c:	00 00       	nop
    244e:	08 95       	ret

00002450 <outputS>:
    2450:	0f 93       	push	r16
    2452:	1f 93       	push	r17
    2454:	cf 93       	push	r28
    2456:	df 93       	push	r29
    2458:	8c 01       	movw	r16, r24
    245a:	fb 01       	movw	r30, r22
    245c:	ff 27       	eor	r31, r31
    245e:	e8 5f       	subi	r30, 0xF8	; 248
    2460:	fd 4f       	sbci	r31, 0xFD	; 253
    2462:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
    2464:	88 df       	rcall	.-240    	; 0x2376 <command>
    2466:	e8 01       	movw	r28, r16
    2468:	0c 5e       	subi	r16, 0xEC	; 236
    246a:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
    246c:	89 91       	ld	r24, Y+
    246e:	8b df       	rcall	.-234    	; 0x2386 <data>
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
    2470:	c0 17       	cp	r28, r16
    2472:	d1 07       	cpc	r29, r17
    2474:	d9 f7       	brne	.-10     	; 0x246c <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
    2476:	df 91       	pop	r29
    2478:	cf 91       	pop	r28
    247a:	1f 91       	pop	r17
    247c:	0f 91       	pop	r16
    247e:	08 95       	ret

00002480 <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch(numCharacters)
    2486:	43 30       	cpi	r20, 0x03	; 3
    2488:	09 f4       	brne	.+2      	; 0x248c <numPrinter+0xc>
    248a:	54 c0       	rjmp	.+168    	; 0x2534 <numPrinter+0xb4>
    248c:	28 f4       	brcc	.+10     	; 0x2498 <numPrinter+0x18>
    248e:	41 30       	cpi	r20, 0x01	; 1
    2490:	51 f0       	breq	.+20     	; 0x24a6 <numPrinter+0x26>
    2492:	42 30       	cpi	r20, 0x02	; 2
    2494:	29 f1       	breq	.+74     	; 0x24e0 <numPrinter+0x60>
    2496:	b7 c1       	rjmp	.+878    	; 0x2806 <numPrinter+0x386>
    2498:	44 30       	cpi	r20, 0x04	; 4
    249a:	09 f4       	brne	.+2      	; 0x249e <numPrinter+0x1e>
    249c:	95 c0       	rjmp	.+298    	; 0x25c8 <numPrinter+0x148>
    249e:	45 30       	cpi	r20, 0x05	; 5
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <numPrinter+0x24>
    24a2:	0a c1       	rjmp	.+532    	; 0x26b8 <numPrinter+0x238>
    24a4:	b0 c1       	rjmp	.+864    	; 0x2806 <numPrinter+0x386>
		case 0:
		break;

		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
    24a6:	ec 01       	movw	r28, r24
    24a8:	c6 0f       	add	r28, r22
    24aa:	d1 1d       	adc	r29, r1
    24ac:	ad ec       	ldi	r26, 0xCD	; 205
    24ae:	bc ec       	ldi	r27, 0xCC	; 204
    24b0:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    24b4:	96 95       	lsr	r25
    24b6:	87 95       	ror	r24
    24b8:	96 95       	lsr	r25
    24ba:	87 95       	ror	r24
    24bc:	96 95       	lsr	r25
    24be:	87 95       	ror	r24
    24c0:	9c 01       	movw	r18, r24
    24c2:	22 0f       	add	r18, r18
    24c4:	33 1f       	adc	r19, r19
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	88 0f       	add	r24, r24
    24cc:	99 1f       	adc	r25, r25
    24ce:	88 0f       	add	r24, r24
    24d0:	99 1f       	adc	r25, r25
    24d2:	82 0f       	add	r24, r18
    24d4:	93 1f       	adc	r25, r19
    24d6:	e8 1b       	sub	r30, r24
    24d8:	f9 0b       	sbc	r31, r25
    24da:	e0 5d       	subi	r30, 0xD0	; 208
    24dc:	e8 83       	st	Y, r30
		break;
    24de:	93 c1       	rjmp	.+806    	; 0x2806 <numPrinter+0x386>

		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
    24e0:	ec 01       	movw	r28, r24
    24e2:	c6 0f       	add	r28, r22
    24e4:	d1 1d       	adc	r29, r1
    24e6:	ad ec       	ldi	r26, 0xCD	; 205
    24e8:	bc ec       	ldi	r27, 0xCC	; 204
    24ea:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    24ee:	96 95       	lsr	r25
    24f0:	87 95       	ror	r24
    24f2:	96 95       	lsr	r25
    24f4:	87 95       	ror	r24
    24f6:	96 95       	lsr	r25
    24f8:	87 95       	ror	r24
    24fa:	9c 01       	movw	r18, r24
    24fc:	22 0f       	add	r18, r18
    24fe:	33 1f       	adc	r19, r19
    2500:	88 0f       	add	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	82 0f       	add	r24, r18
    250e:	93 1f       	adc	r25, r19
    2510:	9f 01       	movw	r18, r30
    2512:	28 1b       	sub	r18, r24
    2514:	39 0b       	sbc	r19, r25
    2516:	c9 01       	movw	r24, r18
    2518:	80 5d       	subi	r24, 0xD0	; 208
    251a:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
    251c:	9f 01       	movw	r18, r30
    251e:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    2522:	96 95       	lsr	r25
    2524:	87 95       	ror	r24
    2526:	96 95       	lsr	r25
    2528:	87 95       	ror	r24
    252a:	96 95       	lsr	r25
    252c:	87 95       	ror	r24
    252e:	80 5d       	subi	r24, 0xD0	; 208
    2530:	88 83       	st	Y, r24
		break;
    2532:	69 c1       	rjmp	.+722    	; 0x2806 <numPrinter+0x386>

		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
    2534:	ec 01       	movw	r28, r24
    2536:	c6 0f       	add	r28, r22
    2538:	d1 1d       	adc	r29, r1
    253a:	ad ec       	ldi	r26, 0xCD	; 205
    253c:	bc ec       	ldi	r27, 0xCC	; 204
    253e:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    2542:	96 95       	lsr	r25
    2544:	87 95       	ror	r24
    2546:	96 95       	lsr	r25
    2548:	87 95       	ror	r24
    254a:	96 95       	lsr	r25
    254c:	87 95       	ror	r24
    254e:	9c 01       	movw	r18, r24
    2550:	22 0f       	add	r18, r18
    2552:	33 1f       	adc	r19, r19
    2554:	88 0f       	add	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	82 0f       	add	r24, r18
    2562:	93 1f       	adc	r25, r19
    2564:	9f 01       	movw	r18, r30
    2566:	28 1b       	sub	r18, r24
    2568:	39 0b       	sbc	r19, r25
    256a:	c9 01       	movw	r24, r18
    256c:	80 5d       	subi	r24, 0xD0	; 208
    256e:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = tensPlace;
    2570:	af 01       	movw	r20, r30
    2572:	56 95       	lsr	r21
    2574:	47 95       	ror	r20
    2576:	56 95       	lsr	r21
    2578:	47 95       	ror	r20
    257a:	9a 01       	movw	r18, r20
    257c:	ab e7       	ldi	r26, 0x7B	; 123
    257e:	b4 e1       	ldi	r27, 0x14	; 20
    2580:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    2584:	96 95       	lsr	r25
    2586:	87 95       	ror	r24
    2588:	64 e6       	ldi	r22, 0x64	; 100
    258a:	68 9f       	mul	r22, r24
    258c:	90 01       	movw	r18, r0
    258e:	69 9f       	mul	r22, r25
    2590:	30 0d       	add	r19, r0
    2592:	11 24       	eor	r1, r1
    2594:	cf 01       	movw	r24, r30
    2596:	82 1b       	sub	r24, r18
    2598:	93 0b       	sbc	r25, r19
    259a:	9c 01       	movw	r18, r24
    259c:	ad ec       	ldi	r26, 0xCD	; 205
    259e:	bc ec       	ldi	r27, 0xCC	; 204
    25a0:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    25a4:	96 95       	lsr	r25
    25a6:	87 95       	ror	r24
    25a8:	96 95       	lsr	r25
    25aa:	87 95       	ror	r24
    25ac:	96 95       	lsr	r25
    25ae:	87 95       	ror	r24
    25b0:	80 5d       	subi	r24, 0xD0	; 208
    25b2:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
    25b4:	9a 01       	movw	r18, r20
    25b6:	ab e7       	ldi	r26, 0x7B	; 123
    25b8:	b4 e1       	ldi	r27, 0x14	; 20
    25ba:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    25be:	96 95       	lsr	r25
    25c0:	87 95       	ror	r24
    25c2:	80 5d       	subi	r24, 0xD0	; 208
    25c4:	88 83       	st	Y, r24
		break;
    25c6:	1f c1       	rjmp	.+574    	; 0x2806 <numPrinter+0x386>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
    25c8:	ec 01       	movw	r28, r24
    25ca:	c6 0f       	add	r28, r22
    25cc:	d1 1d       	adc	r29, r1
    25ce:	ad ec       	ldi	r26, 0xCD	; 205
    25d0:	bc ec       	ldi	r27, 0xCC	; 204
    25d2:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    25d6:	96 95       	lsr	r25
    25d8:	87 95       	ror	r24
    25da:	96 95       	lsr	r25
    25dc:	87 95       	ror	r24
    25de:	96 95       	lsr	r25
    25e0:	87 95       	ror	r24
    25e2:	9c 01       	movw	r18, r24
    25e4:	22 0f       	add	r18, r18
    25e6:	33 1f       	adc	r19, r19
    25e8:	88 0f       	add	r24, r24
    25ea:	99 1f       	adc	r25, r25
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	88 0f       	add	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	82 0f       	add	r24, r18
    25f6:	93 1f       	adc	r25, r19
    25f8:	9f 01       	movw	r18, r30
    25fa:	28 1b       	sub	r18, r24
    25fc:	39 0b       	sbc	r19, r25
    25fe:	c9 01       	movw	r24, r18
    2600:	80 5d       	subi	r24, 0xD0	; 208
    2602:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
    2604:	9f 01       	movw	r18, r30
    2606:	36 95       	lsr	r19
    2608:	27 95       	ror	r18
    260a:	36 95       	lsr	r19
    260c:	27 95       	ror	r18
    260e:	ab e7       	ldi	r26, 0x7B	; 123
    2610:	b4 e1       	ldi	r27, 0x14	; 20
    2612:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    2616:	96 95       	lsr	r25
    2618:	87 95       	ror	r24
    261a:	44 e6       	ldi	r20, 0x64	; 100
    261c:	48 9f       	mul	r20, r24
    261e:	90 01       	movw	r18, r0
    2620:	49 9f       	mul	r20, r25
    2622:	30 0d       	add	r19, r0
    2624:	11 24       	eor	r1, r1
    2626:	cf 01       	movw	r24, r30
    2628:	82 1b       	sub	r24, r18
    262a:	93 0b       	sbc	r25, r19
    262c:	9c 01       	movw	r18, r24
    262e:	ad ec       	ldi	r26, 0xCD	; 205
    2630:	bc ec       	ldi	r27, 0xCC	; 204
    2632:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    2636:	96 95       	lsr	r25
    2638:	87 95       	ror	r24
    263a:	96 95       	lsr	r25
    263c:	87 95       	ror	r24
    263e:	96 95       	lsr	r25
    2640:	87 95       	ror	r24
    2642:	80 5d       	subi	r24, 0xD0	; 208
    2644:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = hunderedsPlace;
    2646:	af 01       	movw	r20, r30
    2648:	56 95       	lsr	r21
    264a:	47 95       	ror	r20
    264c:	56 95       	lsr	r21
    264e:	47 95       	ror	r20
    2650:	56 95       	lsr	r21
    2652:	47 95       	ror	r20
    2654:	9a 01       	movw	r18, r20
    2656:	a5 ec       	ldi	r26, 0xC5	; 197
    2658:	b0 e2       	ldi	r27, 0x20	; 32
    265a:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    265e:	92 95       	swap	r25
    2660:	82 95       	swap	r24
    2662:	8f 70       	andi	r24, 0x0F	; 15
    2664:	89 27       	eor	r24, r25
    2666:	9f 70       	andi	r25, 0x0F	; 15
    2668:	89 27       	eor	r24, r25
    266a:	68 ee       	ldi	r22, 0xE8	; 232
    266c:	73 e0       	ldi	r23, 0x03	; 3
    266e:	86 9f       	mul	r24, r22
    2670:	90 01       	movw	r18, r0
    2672:	87 9f       	mul	r24, r23
    2674:	30 0d       	add	r19, r0
    2676:	96 9f       	mul	r25, r22
    2678:	30 0d       	add	r19, r0
    267a:	11 24       	eor	r1, r1
    267c:	cf 01       	movw	r24, r30
    267e:	82 1b       	sub	r24, r18
    2680:	93 0b       	sbc	r25, r19
    2682:	9c 01       	movw	r18, r24
    2684:	36 95       	lsr	r19
    2686:	27 95       	ror	r18
    2688:	36 95       	lsr	r19
    268a:	27 95       	ror	r18
    268c:	ab e7       	ldi	r26, 0x7B	; 123
    268e:	b4 e1       	ldi	r27, 0x14	; 20
    2690:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    2694:	96 95       	lsr	r25
    2696:	87 95       	ror	r24
    2698:	80 5d       	subi	r24, 0xD0	; 208
    269a:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
    269c:	9a 01       	movw	r18, r20
    269e:	a5 ec       	ldi	r26, 0xC5	; 197
    26a0:	b0 e2       	ldi	r27, 0x20	; 32
    26a2:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    26a6:	92 95       	swap	r25
    26a8:	82 95       	swap	r24
    26aa:	8f 70       	andi	r24, 0x0F	; 15
    26ac:	89 27       	eor	r24, r25
    26ae:	9f 70       	andi	r25, 0x0F	; 15
    26b0:	89 27       	eor	r24, r25
    26b2:	80 5d       	subi	r24, 0xD0	; 208
    26b4:	88 83       	st	Y, r24
		break;
    26b6:	a7 c0       	rjmp	.+334    	; 0x2806 <numPrinter+0x386>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
    26b8:	ec 01       	movw	r28, r24
    26ba:	c6 0f       	add	r28, r22
    26bc:	d1 1d       	adc	r29, r1
    26be:	ad ec       	ldi	r26, 0xCD	; 205
    26c0:	bc ec       	ldi	r27, 0xCC	; 204
    26c2:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    26c6:	96 95       	lsr	r25
    26c8:	87 95       	ror	r24
    26ca:	96 95       	lsr	r25
    26cc:	87 95       	ror	r24
    26ce:	96 95       	lsr	r25
    26d0:	87 95       	ror	r24
    26d2:	9c 01       	movw	r18, r24
    26d4:	22 0f       	add	r18, r18
    26d6:	33 1f       	adc	r19, r19
    26d8:	88 0f       	add	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	88 0f       	add	r24, r24
    26e2:	99 1f       	adc	r25, r25
    26e4:	82 0f       	add	r24, r18
    26e6:	93 1f       	adc	r25, r19
    26e8:	9f 01       	movw	r18, r30
    26ea:	28 1b       	sub	r18, r24
    26ec:	39 0b       	sbc	r19, r25
    26ee:	c9 01       	movw	r24, r18
    26f0:	80 5d       	subi	r24, 0xD0	; 208
    26f2:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
    26f4:	9f 01       	movw	r18, r30
    26f6:	36 95       	lsr	r19
    26f8:	27 95       	ror	r18
    26fa:	36 95       	lsr	r19
    26fc:	27 95       	ror	r18
    26fe:	ab e7       	ldi	r26, 0x7B	; 123
    2700:	b4 e1       	ldi	r27, 0x14	; 20
    2702:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    2706:	96 95       	lsr	r25
    2708:	87 95       	ror	r24
    270a:	44 e6       	ldi	r20, 0x64	; 100
    270c:	48 9f       	mul	r20, r24
    270e:	90 01       	movw	r18, r0
    2710:	49 9f       	mul	r20, r25
    2712:	30 0d       	add	r19, r0
    2714:	11 24       	eor	r1, r1
    2716:	cf 01       	movw	r24, r30
    2718:	82 1b       	sub	r24, r18
    271a:	93 0b       	sbc	r25, r19
    271c:	9c 01       	movw	r18, r24
    271e:	ad ec       	ldi	r26, 0xCD	; 205
    2720:	bc ec       	ldi	r27, 0xCC	; 204
    2722:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    2726:	96 95       	lsr	r25
    2728:	87 95       	ror	r24
    272a:	96 95       	lsr	r25
    272c:	87 95       	ror	r24
    272e:	96 95       	lsr	r25
    2730:	87 95       	ror	r24
    2732:	80 5d       	subi	r24, 0xD0	; 208
    2734:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
    2736:	9f 01       	movw	r18, r30
    2738:	36 95       	lsr	r19
    273a:	27 95       	ror	r18
    273c:	36 95       	lsr	r19
    273e:	27 95       	ror	r18
    2740:	36 95       	lsr	r19
    2742:	27 95       	ror	r18
    2744:	a5 ec       	ldi	r26, 0xC5	; 197
    2746:	b0 e2       	ldi	r27, 0x20	; 32
    2748:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    274c:	92 95       	swap	r25
    274e:	82 95       	swap	r24
    2750:	8f 70       	andi	r24, 0x0F	; 15
    2752:	89 27       	eor	r24, r25
    2754:	9f 70       	andi	r25, 0x0F	; 15
    2756:	89 27       	eor	r24, r25
    2758:	48 ee       	ldi	r20, 0xE8	; 232
    275a:	53 e0       	ldi	r21, 0x03	; 3
    275c:	84 9f       	mul	r24, r20
    275e:	90 01       	movw	r18, r0
    2760:	85 9f       	mul	r24, r21
    2762:	30 0d       	add	r19, r0
    2764:	94 9f       	mul	r25, r20
    2766:	30 0d       	add	r19, r0
    2768:	11 24       	eor	r1, r1
    276a:	cf 01       	movw	r24, r30
    276c:	82 1b       	sub	r24, r18
    276e:	93 0b       	sbc	r25, r19
    2770:	9c 01       	movw	r18, r24
    2772:	36 95       	lsr	r19
    2774:	27 95       	ror	r18
    2776:	36 95       	lsr	r19
    2778:	27 95       	ror	r18
    277a:	ab e7       	ldi	r26, 0x7B	; 123
    277c:	b4 e1       	ldi	r27, 0x14	; 20
    277e:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    2782:	96 95       	lsr	r25
    2784:	87 95       	ror	r24
    2786:	80 5d       	subi	r24, 0xD0	; 208
    2788:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
    278a:	af 01       	movw	r20, r30
    278c:	52 95       	swap	r21
    278e:	42 95       	swap	r20
    2790:	4f 70       	andi	r20, 0x0F	; 15
    2792:	45 27       	eor	r20, r21
    2794:	5f 70       	andi	r21, 0x0F	; 15
    2796:	45 27       	eor	r20, r21
    2798:	9a 01       	movw	r18, r20
    279a:	a7 e4       	ldi	r26, 0x47	; 71
    279c:	b3 e0       	ldi	r27, 0x03	; 3
    279e:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    27a2:	96 95       	lsr	r25
    27a4:	87 95       	ror	r24
    27a6:	96 95       	lsr	r25
    27a8:	87 95       	ror	r24
    27aa:	96 95       	lsr	r25
    27ac:	87 95       	ror	r24
    27ae:	60 e1       	ldi	r22, 0x10	; 16
    27b0:	77 e2       	ldi	r23, 0x27	; 39
    27b2:	86 9f       	mul	r24, r22
    27b4:	90 01       	movw	r18, r0
    27b6:	87 9f       	mul	r24, r23
    27b8:	30 0d       	add	r19, r0
    27ba:	96 9f       	mul	r25, r22
    27bc:	30 0d       	add	r19, r0
    27be:	11 24       	eor	r1, r1
    27c0:	cf 01       	movw	r24, r30
    27c2:	82 1b       	sub	r24, r18
    27c4:	93 0b       	sbc	r25, r19
    27c6:	9c 01       	movw	r18, r24
    27c8:	36 95       	lsr	r19
    27ca:	27 95       	ror	r18
    27cc:	36 95       	lsr	r19
    27ce:	27 95       	ror	r18
    27d0:	36 95       	lsr	r19
    27d2:	27 95       	ror	r18
    27d4:	a5 ec       	ldi	r26, 0xC5	; 197
    27d6:	b0 e2       	ldi	r27, 0x20	; 32
    27d8:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    27dc:	92 95       	swap	r25
    27de:	82 95       	swap	r24
    27e0:	8f 70       	andi	r24, 0x0F	; 15
    27e2:	89 27       	eor	r24, r25
    27e4:	9f 70       	andi	r25, 0x0F	; 15
    27e6:	89 27       	eor	r24, r25
    27e8:	80 5d       	subi	r24, 0xD0	; 208
    27ea:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
    27ec:	9a 01       	movw	r18, r20
    27ee:	a7 e4       	ldi	r26, 0x47	; 71
    27f0:	b3 e0       	ldi	r27, 0x03	; 3
    27f2:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__umulhisi3>
    27f6:	96 95       	lsr	r25
    27f8:	87 95       	ror	r24
    27fa:	96 95       	lsr	r25
    27fc:	87 95       	ror	r24
    27fe:	96 95       	lsr	r25
    2800:	87 95       	ror	r24
    2802:	80 5d       	subi	r24, 0xD0	; 208
    2804:	88 83       	st	Y, r24
		break;

	}


}
    2806:	df 91       	pop	r29
    2808:	cf 91       	pop	r28
    280a:	08 95       	ret

0000280c <midiNotePrinter>:

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
    280c:	9c 01       	movw	r18, r24
    280e:	a6 2f       	mov	r26, r22
	char printSharp = 0;
	uint8_t valueSwitch = 0;
	//numbers will always go from B to C, and have 12 distinct values. 
	//we can get our number from this with division. 
	//midi note C0 starts at 12. So, we'll need to do some math there. 
	printNumber = (noteNumber/12)+47; 
    2810:	eb ea       	ldi	r30, 0xAB	; 171
    2812:	4e 9f       	mul	r20, r30
    2814:	e1 2d       	mov	r30, r1
    2816:	11 24       	eor	r1, r1
    2818:	e6 95       	lsr	r30
    281a:	e6 95       	lsr	r30
    281c:	e6 95       	lsr	r30
    281e:	9f e2       	ldi	r25, 0x2F	; 47
    2820:	9e 0f       	add	r25, r30
	
	//theres a weird wrap around with note numbers here. Since there isn't really an easy math patern we can take advantage of. 
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
    2822:	8e 2f       	mov	r24, r30
    2824:	88 0f       	add	r24, r24
    2826:	e8 0f       	add	r30, r24
    2828:	ee 0f       	add	r30, r30
    282a:	ee 0f       	add	r30, r30
    282c:	4e 1b       	sub	r20, r30
    282e:	50 e0       	ldi	r21, 0x00	; 0
    2830:	4c 30       	cpi	r20, 0x0C	; 12
    2832:	51 05       	cpc	r21, r1
    2834:	58 f5       	brcc	.+86     	; 0x288c <midiNotePrinter+0x80>
    2836:	fa 01       	movw	r30, r20
    2838:	88 27       	eor	r24, r24
    283a:	e8 51       	subi	r30, 0x18	; 24
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	8f 4f       	sbci	r24, 0xFF	; 255
    2840:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__tablejump2__>
	{
		
		case 0:
		printLetter = 'C';
		printSharp = ' ';
    2844:	80 e2       	ldi	r24, 0x20	; 32
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
	{
		
		case 0:
		printLetter = 'C';
    2846:	43 e4       	ldi	r20, 0x43	; 67
    2848:	23 c0       	rjmp	.+70     	; 0x2890 <midiNotePrinter+0x84>
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
		printSharp = '#';
    284a:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'C';
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
    284c:	43 e4       	ldi	r20, 0x43	; 67
		printSharp = '#';
		break;
    284e:	20 c0       	rjmp	.+64     	; 0x2890 <midiNotePrinter+0x84>
		
		case 2:
		printLetter = 'D';
		printSharp = ' ';
    2850:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'C';
		printSharp = '#';
		break;
		
		case 2:
		printLetter = 'D';
    2852:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = ' ';
		break;
    2854:	1d c0       	rjmp	.+58     	; 0x2890 <midiNotePrinter+0x84>
		
		case 3:
		printLetter = 'D';
		printSharp = '#';
    2856:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'D';
		printSharp = ' ';
		break;
		
		case 3:
		printLetter = 'D';
    2858:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = '#';
		break;
    285a:	1a c0       	rjmp	.+52     	; 0x2890 <midiNotePrinter+0x84>
		
		case 4:
		printLetter = 'E';
		printSharp = ' ';
    285c:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'D';
		printSharp = '#';
		break;
		
		case 4:
		printLetter = 'E';
    285e:	45 e4       	ldi	r20, 0x45	; 69
		printSharp = ' ';
		break;
    2860:	17 c0       	rjmp	.+46     	; 0x2890 <midiNotePrinter+0x84>
		
		case 5:
		printLetter = 'F';
		printSharp = ' ';
    2862:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'E';
		printSharp = ' ';
		break;
		
		case 5:
		printLetter = 'F';
    2864:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = ' ';
		break;
    2866:	14 c0       	rjmp	.+40     	; 0x2890 <midiNotePrinter+0x84>
		
		case 6:
		printLetter = 'F';
		printSharp = '#';
    2868:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'F';
		printSharp = ' ';
		break;
		
		case 6:
		printLetter = 'F';
    286a:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = '#';
		break;
    286c:	11 c0       	rjmp	.+34     	; 0x2890 <midiNotePrinter+0x84>
		
		case 7:
		printLetter = 'G';
		printSharp = ' ';
    286e:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'F';
		printSharp = '#';
		break;
		
		case 7:
		printLetter = 'G';
    2870:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = ' ';
		break;
    2872:	0e c0       	rjmp	.+28     	; 0x2890 <midiNotePrinter+0x84>
		
		case 8:
		printLetter = 'G';
		printSharp = '#';
    2874:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'G';
		printSharp = ' ';
		break;
		
		case 8:
		printLetter = 'G';
    2876:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = '#';
		break;
    2878:	0b c0       	rjmp	.+22     	; 0x2890 <midiNotePrinter+0x84>
		
		case 9:
		printLetter = 'A';
		printSharp = ' ';
    287a:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'G';
		printSharp = '#';
		break;
		
		case 9:
		printLetter = 'A';
    287c:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = ' ';
		break;
    287e:	08 c0       	rjmp	.+16     	; 0x2890 <midiNotePrinter+0x84>
		
		case 10:
		printLetter = 'A';
		printSharp = '#';
    2880:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'A';
		printSharp = ' ';
		break;
		
		case 10:
		printLetter = 'A';
    2882:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = '#';
		break;
    2884:	05 c0       	rjmp	.+10     	; 0x2890 <midiNotePrinter+0x84>
		
		case 11:
		printLetter = 'B';
		printSharp = ' ';
    2886:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'A';
		printSharp = '#';
		break;
		
		case 11:
		printLetter = 'B';
    2888:	42 e4       	ldi	r20, 0x42	; 66
		printSharp = ' ';
		break;
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <midiNotePrinter+0x84>
void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
	char printNumber = 0;
	char printSharp = 0;
    288c:	80 e0       	ldi	r24, 0x00	; 0
}

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
    288e:	40 e0       	ldi	r20, 0x00	; 0
		printLetter = 'B';
		printSharp = ' ';
		break;
		
	}
	charArray[startingPosition] = printLetter;
    2890:	f9 01       	movw	r30, r18
    2892:	ea 0f       	add	r30, r26
    2894:	f1 1d       	adc	r31, r1
    2896:	40 83       	st	Z, r20
	charArray[startingPosition+1]= printSharp;
    2898:	81 83       	std	Z+1, r24	; 0x01
	charArray[startingPosition+2]= printNumber;
    289a:	92 83       	std	Z+2, r25	; 0x02
    289c:	08 95       	ret

0000289e <initSequencer>:
//if a real-time sequencer is implemented, they will end up being the same thing.

void initSequencer()
{
	//here we need to setup our timer interrupt
	TCCR0A = (1 << WGM01); //set to clear on correct compare
    289e:	82 e0       	ldi	r24, 0x02	; 2
    28a0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00); // set pre-scaler to 64
    28a2:	93 e0       	ldi	r25, 0x03	; 3
    28a4:	95 bd       	out	0x25, r25	; 37
	OCR0A = 25; // every 25 ticks will be 0.0001 seconds at this prescale.
    28a6:	99 e1       	ldi	r25, 0x19	; 25
    28a8:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1 << OCIE0A); // Enable OCR0A compare interrupt
    28aa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    28ae:	08 95       	ret

000028b0 <__vector_21>:
	//interrupts should now be good to go.
}

ISR(TIMER0_COMPA_vect)
{
    28b0:	1f 92       	push	r1
    28b2:	0f 92       	push	r0
    28b4:	0f b6       	in	r0, 0x3f	; 63
    28b6:	0f 92       	push	r0
    28b8:	11 24       	eor	r1, r1
    28ba:	8f 93       	push	r24
    28bc:	9f 93       	push	r25
	clockCounter++;
    28be:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <clockCounter>
    28c2:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <clockCounter+0x1>
    28c6:	01 96       	adiw	r24, 0x01	; 1
    28c8:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <clockCounter+0x1>
    28cc:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <clockCounter>
	//we don't want to do anything else here.
}
    28d0:	9f 91       	pop	r25
    28d2:	8f 91       	pop	r24
    28d4:	0f 90       	pop	r0
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	0f 90       	pop	r0
    28da:	1f 90       	pop	r1
    28dc:	18 95       	reti

000028de <updateSequencer>:

void updateSequencer(Pattern sequencerPattern, Globals currentGlobals)
{
    28de:	cf 92       	push	r12
    28e0:	df 92       	push	r13
    28e2:	ef 92       	push	r14
    28e4:	ff 92       	push	r15
    28e6:	0f 93       	push	r16
    28e8:	1f 93       	push	r17
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
	uint16_t BPMvar = 150000/(sequencerPattern.patternBPM);

	if(clockCounter>=BPMvar && currentGlobals.playState) //if playstate is on, play next note in sequence.
    28f2:	cc 52       	subi	r28, 0x2C	; 44
    28f4:	df 4f       	sbci	r29, 0xFF	; 255
    28f6:	28 81       	ld	r18, Y
    28f8:	39 81       	ldd	r19, Y+1	; 0x01
    28fa:	c4 5d       	subi	r28, 0xD4	; 212
    28fc:	d0 40       	sbci	r29, 0x00	; 0
    28fe:	40 e0       	ldi	r20, 0x00	; 0
    2900:	50 e0       	ldi	r21, 0x00	; 0
    2902:	60 ef       	ldi	r22, 0xF0	; 240
    2904:	79 e4       	ldi	r23, 0x49	; 73
    2906:	82 e0       	ldi	r24, 0x02	; 2
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	0e 94 a5 1c 	call	0x394a	; 0x394a <__divmodsi4>
    290e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <clockCounter>
    2912:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <clockCounter+0x1>
    2916:	82 17       	cp	r24, r18
    2918:	93 07       	cpc	r25, r19
    291a:	08 f4       	brcc	.+2      	; 0x291e <updateSequencer+0x40>
    291c:	4e c0       	rjmp	.+156    	; 0x29ba <updateSequencer+0xdc>
    291e:	c2 57       	subi	r28, 0x72	; 114
    2920:	de 4f       	sbci	r29, 0xFE	; 254
    2922:	88 81       	ld	r24, Y
    2924:	ce 58       	subi	r28, 0x8E	; 142
    2926:	d1 40       	sbci	r29, 0x01	; 1
    2928:	88 23       	and	r24, r24
    292a:	09 f4       	brne	.+2      	; 0x292e <updateSequencer+0x50>
    292c:	40 c0       	rjmp	.+128    	; 0x29ae <updateSequencer+0xd0>
	{
		//this will be where we play samples
		clockCounter=0; //clear before the loop, so we can continue counting while the sequencer plays notes.
    292e:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <clockCounter+0x1>
    2932:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <clockCounter>
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
    2936:	e0 91 97 03 	lds	r30, 0x0397	; 0x800397 <currentPlayStep>
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	ee 0f       	add	r30, r30
    293e:	ff 1f       	adc	r31, r31
    2940:	8c e0       	ldi	r24, 0x0C	; 12
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	8c 0f       	add	r24, r28
    2946:	9d 1f       	adc	r25, r29
    2948:	e8 0f       	add	r30, r24
    294a:	f9 1f       	adc	r31, r25
    294c:	e5 50       	subi	r30, 0x05	; 5
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	e0 80       	ld	r14, Z
    2952:	f1 80       	ldd	r15, Z+1	; 0x01
    2954:	8e 01       	movw	r16, r28
    2956:	0c 56       	subi	r16, 0x6C	; 108
    2958:	1f 4f       	sbci	r17, 0xFF	; 255
    295a:	6e 01       	movw	r12, r28
    295c:	94 ea       	ldi	r25, 0xA4	; 164
    295e:	c9 0e       	add	r12, r25
    2960:	d1 1c       	adc	r13, r1
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
		{//we're going to loop through all of the possible tracks, and trigger them
			if((parseStep&1)==1)
    2962:	e0 fe       	sbrs	r14, 0
    2964:	09 c0       	rjmp	.+18     	; 0x2978 <updateSequencer+0x9a>
			{
				trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
    2966:	f8 01       	movw	r30, r16
    2968:	20 81       	ld	r18, Z
    296a:	e0 57       	subi	r30, 0x70	; 112
    296c:	f1 09       	sbc	r31, r1
    296e:	40 81       	ld	r20, Z
    2970:	f8 01       	movw	r30, r16
    2972:	60 89       	ldd	r22, Z+16	; 0x10
    2974:	80 a1       	ldd	r24, Z+32	; 0x20
    2976:	b7 d0       	rcall	.+366    	; 0x2ae6 <trackControl>
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
    2978:	f6 94       	lsr	r15
    297a:	e7 94       	ror	r14
    297c:	0f 5f       	subi	r16, 0xFF	; 255
    297e:	1f 4f       	sbci	r17, 0xFF	; 255
	if(clockCounter>=BPMvar && currentGlobals.playState) //if playstate is on, play next note in sequence.
	{
		//this will be where we play samples
		clockCounter=0; //clear before the loop, so we can continue counting while the sequencer plays notes.
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
    2980:	0c 15       	cp	r16, r12
    2982:	1d 05       	cpc	r17, r13
    2984:	71 f7       	brne	.-36     	; 0x2962 <updateSequencer+0x84>
			{
				trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
		}
		currentPlayStep = currentPlayStep+1;
    2986:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <currentPlayStep>
    298a:	8f 5f       	subi	r24, 0xFF	; 255
    298c:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <currentPlayStep>
		if(currentPlayStep>(sequencerPattern.numSteps-1))
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	ca 52       	subi	r28, 0x2A	; 42
    2994:	df 4f       	sbci	r29, 0xFF	; 255
    2996:	28 81       	ld	r18, Y
    2998:	c6 5d       	subi	r28, 0xD6	; 214
    299a:	d0 40       	sbci	r29, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	21 50       	subi	r18, 0x01	; 1
    29a0:	31 09       	sbc	r19, r1
    29a2:	28 17       	cp	r18, r24
    29a4:	39 07       	cpc	r19, r25
    29a6:	4c f4       	brge	.+18     	; 0x29ba <updateSequencer+0xdc>
		{
			currentPlayStep=0; // don't play more steps than are in the sequence.
    29a8:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <currentPlayStep>
    29ac:	06 c0       	rjmp	.+12     	; 0x29ba <updateSequencer+0xdc>
		}

	}else if(clockCounter>=BPMvar && !currentGlobals.playState)
	{ currentPlayStep=0;
    29ae:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <currentPlayStep>
		clockCounter = 0;
    29b2:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <clockCounter+0x1>
    29b6:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <clockCounter>
	}

}
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	1f 91       	pop	r17
    29c0:	0f 91       	pop	r16
    29c2:	ff 90       	pop	r15
    29c4:	ef 90       	pop	r14
    29c6:	df 90       	pop	r13
    29c8:	cf 90       	pop	r12
    29ca:	08 95       	ret

000029cc <__vector_27>:
char serial0Buffer[TX_BUFFER_SIZE];
int serialReadPos = 0;
int serialWritePos = 0;

ISR (USART0_TX_vect)
{
    29cc:	1f 92       	push	r1
    29ce:	0f 92       	push	r0
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	0f 92       	push	r0
    29d4:	11 24       	eor	r1, r1
    29d6:	0b b6       	in	r0, 0x3b	; 59
    29d8:	0f 92       	push	r0
    29da:	2f 93       	push	r18
    29dc:	3f 93       	push	r19
    29de:	8f 93       	push	r24
    29e0:	9f 93       	push	r25
    29e2:	ef 93       	push	r30
    29e4:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
    29e6:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <serialReadPos>
    29ea:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <serialReadPos+0x1>
    29ee:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <serialWritePos>
    29f2:	30 91 9b 03 	lds	r19, 0x039B	; 0x80039b <serialWritePos+0x1>
    29f6:	82 17       	cp	r24, r18
    29f8:	93 07       	cpc	r25, r19
    29fa:	c1 f0       	breq	.+48     	; 0x2a2c <__vector_27+0x60>
	{
		UDR0 = serial0Buffer[serialReadPos];
    29fc:	fc 01       	movw	r30, r24
    29fe:	ec 52       	subi	r30, 0x2C	; 44
    2a00:	f6 4f       	sbci	r31, 0xF6	; 246
    2a02:	80 81       	ld	r24, Z
    2a04:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
    2a08:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <serialReadPos>
    2a0c:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <serialReadPos+0x1>
    2a10:	01 96       	adiw	r24, 0x01	; 1

		if(serialReadPos >= TX_BUFFER_SIZE)
    2a12:	80 38       	cpi	r24, 0x80	; 128
    2a14:	21 e0       	ldi	r18, 0x01	; 1
    2a16:	92 07       	cpc	r25, r18
    2a18:	2c f4       	brge	.+10     	; 0x2a24 <__vector_27+0x58>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
    2a1a:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <serialReadPos+0x1>
    2a1e:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <serialReadPos>
    2a22:	04 c0       	rjmp	.+8      	; 0x2a2c <__vector_27+0x60>

		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
    2a24:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <serialReadPos+0x1>
    2a28:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <serialReadPos>
		}
	}
}
    2a2c:	ff 91       	pop	r31
    2a2e:	ef 91       	pop	r30
    2a30:	9f 91       	pop	r25
    2a32:	8f 91       	pop	r24
    2a34:	3f 91       	pop	r19
    2a36:	2f 91       	pop	r18
    2a38:	0f 90       	pop	r0
    2a3a:	0b be       	out	0x3b, r0	; 59
    2a3c:	0f 90       	pop	r0
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	0f 90       	pop	r0
    2a42:	1f 90       	pop	r1
    2a44:	18 95       	reti

00002a46 <appendSerial0>:

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
    2a46:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <serialWritePos>
    2a4a:	30 91 9b 03 	lds	r19, 0x039B	; 0x80039b <serialWritePos+0x1>
    2a4e:	f9 01       	movw	r30, r18
    2a50:	ec 52       	subi	r30, 0x2C	; 44
    2a52:	f6 4f       	sbci	r31, 0xF6	; 246
    2a54:	80 83       	st	Z, r24
	serialWritePos++;
    2a56:	2f 5f       	subi	r18, 0xFF	; 255
    2a58:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    2a5a:	20 38       	cpi	r18, 0x80	; 128
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	38 07       	cpc	r19, r24
    2a60:	2c f4       	brge	.+10     	; 0x2a6c <appendSerial0+0x26>
}

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    2a62:	30 93 9b 03 	sts	0x039B, r19	; 0x80039b <serialWritePos+0x1>
    2a66:	20 93 9a 03 	sts	0x039A, r18	; 0x80039a <serialWritePos>
    2a6a:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    2a6c:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <serialWritePos+0x1>
    2a70:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <serialWritePos>
    2a74:	08 95       	ret

00002a76 <serialWrite0>:
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
    2a76:	0f 93       	push	r16
    2a78:	1f 93       	push	r17
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2a7e:	66 23       	and	r22, r22
    2a80:	69 f0       	breq	.+26     	; 0x2a9c <serialWrite0+0x26>
    2a82:	ec 01       	movw	r28, r24
    2a84:	61 50       	subi	r22, 0x01	; 1
    2a86:	06 2f       	mov	r16, r22
    2a88:	10 e0       	ldi	r17, 0x00	; 0
    2a8a:	0f 5f       	subi	r16, 0xFF	; 255
    2a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8e:	08 0f       	add	r16, r24
    2a90:	19 1f       	adc	r17, r25
	{
		appendSerial0(c[i]);
    2a92:	89 91       	ld	r24, Y+
    2a94:	d8 df       	rcall	.-80     	; 0x2a46 <appendSerial0>
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2a96:	c0 17       	cp	r28, r16
    2a98:	d1 07       	cpc	r29, r17
    2a9a:	d9 f7       	brne	.-10     	; 0x2a92 <serialWrite0+0x1c>
	{
		appendSerial0(c[i]);

	}

	if(UCSR0A & (1 << UDRE0))
    2a9c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2aa0:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    2aa2:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    2aa6:	df 91       	pop	r29
    2aa8:	cf 91       	pop	r28
    2aaa:	1f 91       	pop	r17
    2aac:	0f 91       	pop	r16
    2aae:	08 95       	ret

00002ab0 <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    2ab0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    2ab4:	80 e1       	ldi	r24, 0x10	; 16
    2ab6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>


UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    2aba:	88 e4       	ldi	r24, 0x48	; 72
    2abc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    2ac0:	86 e0       	ldi	r24, 0x06	; 6
    2ac2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    2ac6:	08 95       	ret

00002ac8 <initEnvelopes>:
void setInPutMix(uint8_t outputMask)
{
	unsigned char inMix[6] = {0xf0, 0xaa, 0x06, 0x0f, outputMask, 0x55};
	serialWrite0(inMix,6);

}
    2ac8:	88 e0       	ldi	r24, 0x08	; 8
    2aca:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2ace:	83 e0       	ldi	r24, 0x03	; 3
    2ad0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2ad4:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    2ad8:	8a ef       	ldi	r24, 0xFA	; 250
    2ada:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    2ade:	82 e0       	ldi	r24, 0x02	; 2
    2ae0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2ae4:	08 95       	ret

00002ae6 <trackControl>:
    2ae6:	cf 93       	push	r28
    2ae8:	df 93       	push	r29
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
    2aee:	2a 97       	sbiw	r28, 0x0a	; 10
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	f8 94       	cli
    2af4:	de bf       	out	0x3e, r29	; 62
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	cd bf       	out	0x3d, r28	; 61
    2afa:	90 ef       	ldi	r25, 0xF0	; 240
    2afc:	99 83       	std	Y+1, r25	; 0x01
    2afe:	9a ea       	ldi	r25, 0xAA	; 170
    2b00:	9a 83       	std	Y+2, r25	; 0x02
    2b02:	9a e0       	ldi	r25, 0x0A	; 10
    2b04:	9b 83       	std	Y+3, r25	; 0x03
    2b06:	93 e0       	ldi	r25, 0x03	; 3
    2b08:	9c 83       	std	Y+4, r25	; 0x04
    2b0a:	2d 83       	std	Y+5, r18	; 0x05
    2b0c:	8e 83       	std	Y+6, r24	; 0x06
    2b0e:	6f 83       	std	Y+7, r22	; 0x07
    2b10:	48 87       	std	Y+8, r20	; 0x08
    2b12:	19 86       	std	Y+9, r1	; 0x09
    2b14:	85 e5       	ldi	r24, 0x55	; 85
    2b16:	8a 87       	std	Y+10, r24	; 0x0a
    2b18:	6a e0       	ldi	r22, 0x0A	; 10
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	01 96       	adiw	r24, 0x01	; 1
    2b1e:	ab df       	rcall	.-170    	; 0x2a76 <serialWrite0>
    2b20:	2a 96       	adiw	r28, 0x0a	; 10
    2b22:	0f b6       	in	r0, 0x3f	; 63
    2b24:	f8 94       	cli
    2b26:	de bf       	out	0x3e, r29	; 62
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	cd bf       	out	0x3d, r28	; 61
    2b2c:	df 91       	pop	r29
    2b2e:	cf 91       	pop	r28
    2b30:	08 95       	ret

00002b32 <setOutputVolume>:
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	28 97       	sbiw	r28, 0x08	; 8
    2b3c:	0f b6       	in	r0, 0x3f	; 63
    2b3e:	f8 94       	cli
    2b40:	de bf       	out	0x3e, r29	; 62
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	90 ef       	ldi	r25, 0xF0	; 240
    2b48:	99 83       	std	Y+1, r25	; 0x01
    2b4a:	9a ea       	ldi	r25, 0xAA	; 170
    2b4c:	9a 83       	std	Y+2, r25	; 0x02
    2b4e:	98 e0       	ldi	r25, 0x08	; 8
    2b50:	9b 83       	std	Y+3, r25	; 0x03
    2b52:	95 e0       	ldi	r25, 0x05	; 5
    2b54:	9c 83       	std	Y+4, r25	; 0x04
    2b56:	4d 83       	std	Y+5, r20	; 0x05
    2b58:	8e 83       	std	Y+6, r24	; 0x06
    2b5a:	6f 83       	std	Y+7, r22	; 0x07
    2b5c:	85 e5       	ldi	r24, 0x55	; 85
    2b5e:	88 87       	std	Y+8, r24	; 0x08
    2b60:	68 e0       	ldi	r22, 0x08	; 8
    2b62:	ce 01       	movw	r24, r28
    2b64:	01 96       	adiw	r24, 0x01	; 1
    2b66:	87 df       	rcall	.-242    	; 0x2a76 <serialWrite0>
    2b68:	28 96       	adiw	r28, 0x08	; 8
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	08 95       	ret

00002b7a <setTrackVolume>:
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	29 97       	sbiw	r28, 0x09	; 9
    2b84:	0f b6       	in	r0, 0x3f	; 63
    2b86:	f8 94       	cli
    2b88:	de bf       	out	0x3e, r29	; 62
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	cd bf       	out	0x3d, r28	; 61
    2b8e:	90 ef       	ldi	r25, 0xF0	; 240
    2b90:	99 83       	std	Y+1, r25	; 0x01
    2b92:	9a ea       	ldi	r25, 0xAA	; 170
    2b94:	9a 83       	std	Y+2, r25	; 0x02
    2b96:	99 e0       	ldi	r25, 0x09	; 9
    2b98:	9b 83       	std	Y+3, r25	; 0x03
    2b9a:	98 e0       	ldi	r25, 0x08	; 8
    2b9c:	9c 83       	std	Y+4, r25	; 0x04
    2b9e:	8d 83       	std	Y+5, r24	; 0x05
    2ba0:	6e 83       	std	Y+6, r22	; 0x06
    2ba2:	4f 83       	std	Y+7, r20	; 0x07
    2ba4:	28 87       	std	Y+8, r18	; 0x08
    2ba6:	85 e5       	ldi	r24, 0x55	; 85
    2ba8:	89 87       	std	Y+9, r24	; 0x09
    2baa:	69 e0       	ldi	r22, 0x09	; 9
    2bac:	ce 01       	movw	r24, r28
    2bae:	01 96       	adiw	r24, 0x01	; 1
    2bb0:	62 df       	rcall	.-316    	; 0x2a76 <serialWrite0>
    2bb2:	29 96       	adiw	r28, 0x09	; 9
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	f8 94       	cli
    2bb8:	de bf       	out	0x3e, r29	; 62
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	cd bf       	out	0x3d, r28	; 61
    2bbe:	df 91       	pop	r29
    2bc0:	cf 91       	pop	r28
    2bc2:	08 95       	ret

00002bc4 <setTrackFade>:
    2bc4:	cf 92       	push	r12
    2bc6:	ef 92       	push	r14
    2bc8:	0f 93       	push	r16
    2bca:	cf 93       	push	r28
    2bcc:	df 93       	push	r29
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
    2bd2:	2c 97       	sbiw	r28, 0x0c	; 12
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	f8 94       	cli
    2bd8:	de bf       	out	0x3e, r29	; 62
    2bda:	0f be       	out	0x3f, r0	; 63
    2bdc:	cd bf       	out	0x3d, r28	; 61
    2bde:	90 ef       	ldi	r25, 0xF0	; 240
    2be0:	99 83       	std	Y+1, r25	; 0x01
    2be2:	9a ea       	ldi	r25, 0xAA	; 170
    2be4:	9a 83       	std	Y+2, r25	; 0x02
    2be6:	9c e0       	ldi	r25, 0x0C	; 12
    2be8:	9b 83       	std	Y+3, r25	; 0x03
    2bea:	9a e0       	ldi	r25, 0x0A	; 10
    2bec:	9c 83       	std	Y+4, r25	; 0x04
    2bee:	8d 83       	std	Y+5, r24	; 0x05
    2bf0:	6e 83       	std	Y+6, r22	; 0x06
    2bf2:	4f 83       	std	Y+7, r20	; 0x07
    2bf4:	28 87       	std	Y+8, r18	; 0x08
    2bf6:	09 87       	std	Y+9, r16	; 0x09
    2bf8:	ea 86       	std	Y+10, r14	; 0x0a
    2bfa:	cb 86       	std	Y+11, r12	; 0x0b
    2bfc:	85 e5       	ldi	r24, 0x55	; 85
    2bfe:	8c 87       	std	Y+12, r24	; 0x0c
    2c00:	6c e0       	ldi	r22, 0x0C	; 12
    2c02:	ce 01       	movw	r24, r28
    2c04:	01 96       	adiw	r24, 0x01	; 1
    2c06:	37 df       	rcall	.-402    	; 0x2a76 <serialWrite0>
    2c08:	2c 96       	adiw	r28, 0x0c	; 12
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	0f 91       	pop	r16
    2c1a:	ef 90       	pop	r14
    2c1c:	cf 90       	pop	r12
    2c1e:	08 95       	ret

00002c20 <outputSampleRate>:
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	28 97       	sbiw	r28, 0x08	; 8
    2c2a:	0f b6       	in	r0, 0x3f	; 63
    2c2c:	f8 94       	cli
    2c2e:	de bf       	out	0x3e, r29	; 62
    2c30:	0f be       	out	0x3f, r0	; 63
    2c32:	cd bf       	out	0x3d, r28	; 61
    2c34:	90 ef       	ldi	r25, 0xF0	; 240
    2c36:	99 83       	std	Y+1, r25	; 0x01
    2c38:	9a ea       	ldi	r25, 0xAA	; 170
    2c3a:	9a 83       	std	Y+2, r25	; 0x02
    2c3c:	98 e0       	ldi	r25, 0x08	; 8
    2c3e:	9b 83       	std	Y+3, r25	; 0x03
    2c40:	9c e0       	ldi	r25, 0x0C	; 12
    2c42:	9c 83       	std	Y+4, r25	; 0x04
    2c44:	8d 83       	std	Y+5, r24	; 0x05
    2c46:	6e 83       	std	Y+6, r22	; 0x06
    2c48:	4f 83       	std	Y+7, r20	; 0x07
    2c4a:	85 e5       	ldi	r24, 0x55	; 85
    2c4c:	88 87       	std	Y+8, r24	; 0x08
    2c4e:	68 e0       	ldi	r22, 0x08	; 8
    2c50:	ce 01       	movw	r24, r28
    2c52:	01 96       	adiw	r24, 0x01	; 1
    2c54:	10 df       	rcall	.-480    	; 0x2a76 <serialWrite0>
    2c56:	28 96       	adiw	r28, 0x08	; 8
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	df 91       	pop	r29
    2c64:	cf 91       	pop	r28
    2c66:	08 95       	ret

00002c68 <playTrack>:
void playTrack(Pattern *currentPattern, Globals *currentGlobals, uint8_t trigInput) //most of these params are just getting passed through.
{ //4 cases:
    2c68:	8f 92       	push	r8
    2c6a:	9f 92       	push	r9
    2c6c:	af 92       	push	r10
    2c6e:	bf 92       	push	r11
    2c70:	cf 92       	push	r12
    2c72:	ef 92       	push	r14
    2c74:	0f 93       	push	r16
    2c76:	cf 93       	push	r28
    2c78:	df 93       	push	r29
    2c7a:	ec 01       	movw	r28, r24
	//3:only release envelopes
	//4:both sides of the envelope
	//we could maybe streamline this by playing the sample in every case, before checking any if statements?
	//don't know if these would cause any more latency between the if statement.
	
	switch(currentPattern->envelopeType[trigInput])
    2c7c:	50 e0       	ldi	r21, 0x00	; 0
    2c7e:	fc 01       	movw	r30, r24
    2c80:	e4 0f       	add	r30, r20
    2c82:	f5 1f       	adc	r31, r21
    2c84:	e5 51       	subi	r30, 0x15	; 21
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	90 81       	ld	r25, Z
    2c8a:	91 30       	cpi	r25, 0x01	; 1
    2c8c:	c9 f0       	breq	.+50     	; 0x2cc0 <playTrack+0x58>
    2c8e:	30 f0       	brcs	.+12     	; 0x2c9c <playTrack+0x34>
    2c90:	92 30       	cpi	r25, 0x02	; 2
    2c92:	41 f1       	breq	.+80     	; 0x2ce4 <playTrack+0x7c>
    2c94:	93 30       	cpi	r25, 0x03	; 3
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <playTrack+0x32>
    2c98:	51 c0       	rjmp	.+162    	; 0x2d3c <playTrack+0xd4>
    2c9a:	61 c0       	rjmp	.+194    	; 0x2d5e <playTrack+0xf6>
	{
		case 0: //A-R //not currently implemented
			trackControl(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput],
			currentPattern->trackOutputRoute[trigInput], currentPattern->trackPlayMode[trigInput]);
    2c9c:	4c 0f       	add	r20, r28
    2c9e:	5d 1f       	adc	r21, r29
    2ca0:	ea 01       	movw	r28, r20
    2ca2:	c8 57       	subi	r28, 0x78	; 120
    2ca4:	df 4f       	sbci	r29, 0xFF	; 255
	//don't know if these would cause any more latency between the if statement.
	
	switch(currentPattern->envelopeType[trigInput])
	{
		case 0: //A-R //not currently implemented
			trackControl(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput],
    2ca6:	da 01       	movw	r26, r20
    2ca8:	a8 56       	subi	r26, 0x68	; 104
    2caa:	bf 4f       	sbci	r27, 0xFF	; 255
    2cac:	fa 01       	movw	r30, r20
    2cae:	e8 55       	subi	r30, 0x58	; 88
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	28 81       	ld	r18, Y
    2cb4:	ea 01       	movw	r28, r20
    2cb6:	48 8d       	ldd	r20, Y+24	; 0x18
    2cb8:	6c 91       	ld	r22, X
    2cba:	80 81       	ld	r24, Z
    2cbc:	14 df       	rcall	.-472    	; 0x2ae6 <trackControl>
			currentPattern->trackOutputRoute[trigInput], currentPattern->trackPlayMode[trigInput]);
		break;
    2cbe:	4f c0       	rjmp	.+158    	; 0x2d5e <playTrack+0xf6>
		
		case 1: //R //not currently implemented. 
		trackControl(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput],
		currentPattern->trackOutputRoute[trigInput], currentPattern->trackPlayMode[trigInput]);
    2cc0:	4c 0f       	add	r20, r28
    2cc2:	5d 1f       	adc	r21, r29
    2cc4:	ea 01       	movw	r28, r20
    2cc6:	c8 57       	subi	r28, 0x78	; 120
    2cc8:	df 4f       	sbci	r29, 0xFF	; 255
			trackControl(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput],
			currentPattern->trackOutputRoute[trigInput], currentPattern->trackPlayMode[trigInput]);
		break;
		
		case 1: //R //not currently implemented. 
		trackControl(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput],
    2cca:	da 01       	movw	r26, r20
    2ccc:	a8 56       	subi	r26, 0x68	; 104
    2cce:	bf 4f       	sbci	r27, 0xFF	; 255
    2cd0:	fa 01       	movw	r30, r20
    2cd2:	e8 55       	subi	r30, 0x58	; 88
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	28 81       	ld	r18, Y
    2cd8:	ea 01       	movw	r28, r20
    2cda:	48 8d       	ldd	r20, Y+24	; 0x18
    2cdc:	6c 91       	ld	r22, X
    2cde:	80 81       	ld	r24, Z
    2ce0:	02 df       	rcall	.-508    	; 0x2ae6 <trackControl>
		currentPattern->trackOutputRoute[trigInput], currentPattern->trackPlayMode[trigInput]);
		break;
    2ce2:	3d c0       	rjmp	.+122    	; 0x2d5e <playTrack+0xf6>
		
		case 2: //A 
		setTrackVolume(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput],255,186);
    2ce4:	c4 0f       	add	r28, r20
    2ce6:	d5 1f       	adc	r29, r21
    2ce8:	4e 01       	movw	r8, r28
    2cea:	e8 e9       	ldi	r30, 0x98	; 152
    2cec:	8e 0e       	add	r8, r30
    2cee:	91 1c       	adc	r9, r1
    2cf0:	5e 01       	movw	r10, r28
    2cf2:	f8 ea       	ldi	r31, 0xA8	; 168
    2cf4:	af 0e       	add	r10, r31
    2cf6:	b1 1c       	adc	r11, r1
    2cf8:	2a eb       	ldi	r18, 0xBA	; 186
    2cfa:	4f ef       	ldi	r20, 0xFF	; 255
    2cfc:	f4 01       	movw	r30, r8
    2cfe:	60 81       	ld	r22, Z
    2d00:	f5 01       	movw	r30, r10
    2d02:	80 81       	ld	r24, Z
    2d04:	3a df       	rcall	.-396    	; 0x2b7a <setTrackVolume>
		trackControl(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput],
		currentPattern->trackOutputRoute[trigInput], currentPattern->trackPlayMode[trigInput]);
    2d06:	fe 01       	movw	r30, r28
    2d08:	e8 57       	subi	r30, 0x78	; 120
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
		currentPattern->trackOutputRoute[trigInput], currentPattern->trackPlayMode[trigInput]);
		break;
		
		case 2: //A 
		setTrackVolume(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput],255,186);
		trackControl(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput],
    2d0c:	20 81       	ld	r18, Z
    2d0e:	48 8d       	ldd	r20, Y+24	; 0x18
    2d10:	f4 01       	movw	r30, r8
    2d12:	60 81       	ld	r22, Z
    2d14:	f5 01       	movw	r30, r10
    2d16:	80 81       	ld	r24, Z
    2d18:	e6 de       	rcall	.-564    	; 0x2ae6 <trackControl>
		currentPattern->trackOutputRoute[trigInput], currentPattern->trackPlayMode[trigInput]);
		setTrackFade(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput],
    2d1a:	de 01       	movw	r26, r28
    2d1c:	a8 5b       	subi	r26, 0xB8	; 184
    2d1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d20:	fe 01       	movw	r30, r28
    2d22:	e8 5a       	subi	r30, 0xA8	; 168
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	c1 2c       	mov	r12, r1
    2d28:	ec 90       	ld	r14, X
    2d2a:	00 81       	ld	r16, Z
    2d2c:	28 a5       	ldd	r18, Y+40	; 0x28
    2d2e:	48 ad       	ldd	r20, Y+56	; 0x38
    2d30:	e4 01       	movw	r28, r8
    2d32:	68 81       	ld	r22, Y
    2d34:	f5 01       	movw	r30, r10
    2d36:	80 81       	ld	r24, Z
    2d38:	45 df       	rcall	.-374    	; 0x2bc4 <setTrackFade>
		currentPattern->trackMainVolumeLSB[trigInput], currentPattern->trackMainVolumeMSB[trigInput],
		currentPattern->trackAttackTimeLSB[trigInput], currentPattern->trackAttackTimeMSB[trigInput], 0);
		break;
    2d3a:	11 c0       	rjmp	.+34     	; 0x2d5e <playTrack+0xf6>
		
		case 3: //none
		trackControl(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput],
		currentPattern->trackOutputRoute[trigInput], currentPattern->trackPlayMode[trigInput]);
    2d3c:	4c 0f       	add	r20, r28
    2d3e:	5d 1f       	adc	r21, r29
    2d40:	ea 01       	movw	r28, r20
    2d42:	c8 57       	subi	r28, 0x78	; 120
    2d44:	df 4f       	sbci	r29, 0xFF	; 255
		currentPattern->trackMainVolumeLSB[trigInput], currentPattern->trackMainVolumeMSB[trigInput],
		currentPattern->trackAttackTimeLSB[trigInput], currentPattern->trackAttackTimeMSB[trigInput], 0);
		break;
		
		case 3: //none
		trackControl(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput],
    2d46:	da 01       	movw	r26, r20
    2d48:	a8 56       	subi	r26, 0x68	; 104
    2d4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d4c:	fa 01       	movw	r30, r20
    2d4e:	e8 55       	subi	r30, 0x58	; 88
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	28 81       	ld	r18, Y
    2d54:	ea 01       	movw	r28, r20
    2d56:	48 8d       	ldd	r20, Y+24	; 0x18
    2d58:	6c 91       	ld	r22, X
    2d5a:	80 81       	ld	r24, Z
    2d5c:	c4 de       	rcall	.-632    	; 0x2ae6 <trackControl>
		currentPattern->trackOutputRoute[trigInput], currentPattern->trackPlayMode[trigInput]);
		break;
	}
}
    2d5e:	df 91       	pop	r29
    2d60:	cf 91       	pop	r28
    2d62:	0f 91       	pop	r16
    2d64:	ef 90       	pop	r14
    2d66:	cf 90       	pop	r12
    2d68:	bf 90       	pop	r11
    2d6a:	af 90       	pop	r10
    2d6c:	9f 90       	pop	r9
    2d6e:	8f 90       	pop	r8
    2d70:	08 95       	ret

00002d72 <twi_init>:
		}

		returnNum=twi_readNak();

	return returnNum;
}
    2d72:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2d76:	88 e4       	ldi	r24, 0x48	; 72
    2d78:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2d7c:	08 95       	ret

00002d7e <twi_start>:
    2d7e:	94 ea       	ldi	r25, 0xA4	; 164
    2d80:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2d84:	ec eb       	ldi	r30, 0xBC	; 188
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	90 81       	ld	r25, Z
    2d8a:	99 23       	and	r25, r25
    2d8c:	ec f7       	brge	.-6      	; 0x2d88 <twi_start+0xa>
    2d8e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2d92:	98 7f       	andi	r25, 0xF8	; 248
    2d94:	98 30       	cpi	r25, 0x08	; 8
    2d96:	11 f0       	breq	.+4      	; 0x2d9c <twi_start+0x1e>
    2d98:	90 31       	cpi	r25, 0x10	; 16
    2d9a:	a1 f4       	brne	.+40     	; 0x2dc4 <twi_start+0x46>
    2d9c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2da0:	84 e8       	ldi	r24, 0x84	; 132
    2da2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2da6:	ec eb       	ldi	r30, 0xBC	; 188
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	88 23       	and	r24, r24
    2dae:	ec f7       	brge	.-6      	; 0x2daa <twi_start+0x2c>
    2db0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2db4:	98 7f       	andi	r25, 0xF8	; 248
    2db6:	98 31       	cpi	r25, 0x18	; 24
    2db8:	39 f0       	breq	.+14     	; 0x2dc8 <twi_start+0x4a>
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	90 34       	cpi	r25, 0x40	; 64
    2dbe:	29 f4       	brne	.+10     	; 0x2dca <twi_start+0x4c>
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	08 95       	ret
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	08 95       	ret
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	08 95       	ret

00002dcc <twi_stop>:
    2dcc:	84 e9       	ldi	r24, 0x94	; 148
    2dce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2dd2:	ec eb       	ldi	r30, 0xBC	; 188
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 81       	ld	r24, Z
    2dd8:	84 fd       	sbrc	r24, 4
    2dda:	fd cf       	rjmp	.-6      	; 0x2dd6 <twi_stop+0xa>
    2ddc:	08 95       	ret

00002dde <twi_write>:
    2dde:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2de2:	84 e8       	ldi	r24, 0x84	; 132
    2de4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2de8:	ec eb       	ldi	r30, 0xBC	; 188
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	88 23       	and	r24, r24
    2df0:	ec f7       	brge	.-6      	; 0x2dec <twi_write+0xe>
    2df2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2df6:	98 7f       	andi	r25, 0xF8	; 248
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	98 32       	cpi	r25, 0x28	; 40
    2dfc:	09 f4       	brne	.+2      	; 0x2e00 <twi_write+0x22>
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	08 95       	ret

00002e02 <twi_readAck>:
    2e02:	84 ec       	ldi	r24, 0xC4	; 196
    2e04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e08:	ec eb       	ldi	r30, 0xBC	; 188
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	88 23       	and	r24, r24
    2e10:	ec f7       	brge	.-6      	; 0x2e0c <twi_readAck+0xa>
    2e12:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2e16:	08 95       	ret

00002e18 <twi_readNak>:
    2e18:	84 e8       	ldi	r24, 0x84	; 132
    2e1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e1e:	ec eb       	ldi	r30, 0xBC	; 188
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	80 81       	ld	r24, Z
    2e24:	88 23       	and	r24, r24
    2e26:	ec f7       	brge	.-6      	; 0x2e22 <twi_readNak+0xa>
    2e28:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2e2c:	08 95       	ret

00002e2e <eepromSavePattern>:
    2e2e:	4f 92       	push	r4
    2e30:	5f 92       	push	r5
    2e32:	6f 92       	push	r6
    2e34:	7f 92       	push	r7
    2e36:	8f 92       	push	r8
    2e38:	9f 92       	push	r9
    2e3a:	af 92       	push	r10
    2e3c:	bf 92       	push	r11
    2e3e:	cf 92       	push	r12
    2e40:	df 92       	push	r13
    2e42:	ef 92       	push	r14
    2e44:	ff 92       	push	r15
    2e46:	0f 93       	push	r16
    2e48:	1f 93       	push	r17
    2e4a:	cf 93       	push	r28
    2e4c:	df 93       	push	r29
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
    2e52:	c4 59       	subi	r28, 0x94	; 148
    2e54:	d1 09       	sbc	r29, r1
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	0f be       	out	0x3f, r0	; 63
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	cd 5d       	subi	r28, 0xDD	; 221
    2e62:	dd 4f       	sbci	r29, 0xFD	; 253
    2e64:	48 81       	ld	r20, Y
    2e66:	c3 52       	subi	r28, 0x23	; 35
    2e68:	d2 40       	sbci	r29, 0x02	; 2
    2e6a:	c0 59       	subi	r28, 0x90	; 144
    2e6c:	de 4f       	sbci	r29, 0xFE	; 254
    2e6e:	88 81       	ld	r24, Y
    2e70:	c0 57       	subi	r28, 0x70	; 112
    2e72:	d1 40       	sbci	r29, 0x01	; 1
    2e74:	cf 58       	subi	r28, 0x8F	; 143
    2e76:	de 4f       	sbci	r29, 0xFE	; 254
    2e78:	98 81       	ld	r25, Y
    2e7a:	c1 57       	subi	r28, 0x71	; 113
    2e7c:	d1 40       	sbci	r29, 0x01	; 1
    2e7e:	24 2f       	mov	r18, r20
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	44 23       	and	r20, r20
    2e84:	8c f0       	brlt	.+34     	; 0x2ea8 <eepromSavePattern+0x7a>
    2e86:	21 50       	subi	r18, 0x01	; 1
    2e88:	31 09       	sbc	r19, r1
    2e8a:	39 01       	movw	r6, r18
    2e8c:	66 0c       	add	r6, r6
    2e8e:	77 1c       	adc	r7, r7
    2e90:	62 0e       	add	r6, r18
    2e92:	73 1e       	adc	r7, r19
    2e94:	76 94       	lsr	r7
    2e96:	76 2c       	mov	r7, r6
    2e98:	66 24       	eor	r6, r6
    2e9a:	77 94       	ror	r7
    2e9c:	67 94       	ror	r6
    2e9e:	0f 2e       	mov	r0, r31
    2ea0:	f0 ea       	ldi	r31, 0xA0	; 160
    2ea2:	5f 2e       	mov	r5, r31
    2ea4:	f0 2d       	mov	r31, r0
    2ea6:	11 c0       	rjmp	.+34     	; 0x2eca <eepromSavePattern+0x9c>
    2ea8:	20 58       	subi	r18, 0x80	; 128
    2eaa:	31 09       	sbc	r19, r1
    2eac:	39 01       	movw	r6, r18
    2eae:	66 0c       	add	r6, r6
    2eb0:	77 1c       	adc	r7, r7
    2eb2:	26 0d       	add	r18, r6
    2eb4:	37 1d       	adc	r19, r7
    2eb6:	39 01       	movw	r6, r18
    2eb8:	76 94       	lsr	r7
    2eba:	76 2c       	mov	r7, r6
    2ebc:	66 24       	eor	r6, r6
    2ebe:	77 94       	ror	r7
    2ec0:	67 94       	ror	r6
    2ec2:	0f 2e       	mov	r0, r31
    2ec4:	f8 ea       	ldi	r31, 0xA8	; 168
    2ec6:	5f 2e       	mov	r5, r31
    2ec8:	f0 2d       	mov	r31, r0
    2eca:	be 01       	movw	r22, r28
    2ecc:	68 55       	subi	r22, 0x58	; 88
    2ece:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed0:	8e 01       	movw	r16, r28
    2ed2:	0f 5f       	subi	r16, 0xFF	; 255
    2ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	e0 55       	subi	r30, 0x50	; 80
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	98 01       	movw	r18, r16
    2ede:	db 01       	movw	r26, r22
    2ee0:	4d 91       	ld	r20, X+
    2ee2:	bd 01       	movw	r22, r26
    2ee4:	d9 01       	movw	r26, r18
    2ee6:	4d 93       	st	X+, r20
    2ee8:	9d 01       	movw	r18, r26
    2eea:	6e 17       	cp	r22, r30
    2eec:	7f 07       	cpc	r23, r31
    2eee:	b9 f7       	brne	.-18     	; 0x2ede <eepromSavePattern+0xb0>
    2ef0:	de 01       	movw	r26, r28
    2ef2:	19 96       	adiw	r26, 0x09	; 9
    2ef4:	9e 01       	movw	r18, r28
    2ef6:	28 54       	subi	r18, 0x48	; 72
    2ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    2efa:	41 91       	ld	r20, Z+
    2efc:	4d 93       	st	X+, r20
    2efe:	e2 17       	cp	r30, r18
    2f00:	f3 07       	cpc	r31, r19
    2f02:	d9 f7       	brne	.-10     	; 0x2efa <eepromSavePattern+0xcc>
    2f04:	4e 01       	movw	r8, r28
    2f06:	b1 e1       	ldi	r27, 0x11	; 17
    2f08:	8b 0e       	add	r8, r27
    2f0a:	91 1c       	adc	r9, r1
    2f0c:	7e 01       	movw	r14, r28
    2f0e:	e0 ec       	ldi	r30, 0xC0	; 192
    2f10:	ee 0e       	add	r14, r30
    2f12:	f1 1c       	adc	r15, r1
    2f14:	d4 01       	movw	r26, r8
    2f16:	f9 01       	movw	r30, r18
    2f18:	41 91       	ld	r20, Z+
    2f1a:	9f 01       	movw	r18, r30
    2f1c:	4d 93       	st	X+, r20
    2f1e:	ee 15       	cp	r30, r14
    2f20:	ff 05       	cpc	r31, r15
    2f22:	c9 f7       	brne	.-14     	; 0x2f16 <eepromSavePattern+0xe8>
    2f24:	9e 01       	movw	r18, r28
    2f26:	27 5e       	subi	r18, 0xE7	; 231
    2f28:	3f 4f       	sbci	r19, 0xFF	; 255
    2f2a:	be 01       	movw	r22, r28
    2f2c:	60 53       	subi	r22, 0x30	; 48
    2f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f30:	d7 01       	movw	r26, r14
    2f32:	4d 91       	ld	r20, X+
    2f34:	7d 01       	movw	r14, r26
    2f36:	f9 01       	movw	r30, r18
    2f38:	41 93       	st	Z+, r20
    2f3a:	9f 01       	movw	r18, r30
    2f3c:	a6 17       	cp	r26, r22
    2f3e:	b7 07       	cpc	r27, r23
    2f40:	b9 f7       	brne	.-18     	; 0x2f30 <eepromSavePattern+0x102>
    2f42:	9e 01       	movw	r18, r28
    2f44:	27 5d       	subi	r18, 0xD7	; 215
    2f46:	3f 4f       	sbci	r19, 0xFF	; 255
    2f48:	de 01       	movw	r26, r28
    2f4a:	a0 52       	subi	r26, 0x20	; 32
    2f4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f4e:	fb 01       	movw	r30, r22
    2f50:	41 91       	ld	r20, Z+
    2f52:	bf 01       	movw	r22, r30
    2f54:	f9 01       	movw	r30, r18
    2f56:	41 93       	st	Z+, r20
    2f58:	9f 01       	movw	r18, r30
    2f5a:	6a 17       	cp	r22, r26
    2f5c:	7b 07       	cpc	r23, r27
    2f5e:	b9 f7       	brne	.-18     	; 0x2f4e <eepromSavePattern+0x120>
    2f60:	9e 01       	movw	r18, r28
    2f62:	27 5c       	subi	r18, 0xC7	; 199
    2f64:	3f 4f       	sbci	r19, 0xFF	; 255
    2f66:	be 01       	movw	r22, r28
    2f68:	60 51       	subi	r22, 0x10	; 16
    2f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f6c:	4d 91       	ld	r20, X+
    2f6e:	f9 01       	movw	r30, r18
    2f70:	41 93       	st	Z+, r20
    2f72:	9f 01       	movw	r18, r30
    2f74:	a6 17       	cp	r26, r22
    2f76:	b7 07       	cpc	r27, r23
    2f78:	c9 f7       	brne	.-14     	; 0x2f6c <eepromSavePattern+0x13e>
    2f7a:	9e 01       	movw	r18, r28
    2f7c:	27 5b       	subi	r18, 0xB7	; 183
    2f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f80:	de 01       	movw	r26, r28
    2f82:	b3 95       	inc	r27
    2f84:	fb 01       	movw	r30, r22
    2f86:	41 91       	ld	r20, Z+
    2f88:	bf 01       	movw	r22, r30
    2f8a:	f9 01       	movw	r30, r18
    2f8c:	41 93       	st	Z+, r20
    2f8e:	9f 01       	movw	r18, r30
    2f90:	6a 17       	cp	r22, r26
    2f92:	7b 07       	cpc	r23, r27
    2f94:	b9 f7       	brne	.-18     	; 0x2f84 <eepromSavePattern+0x156>
    2f96:	9e 01       	movw	r18, r28
    2f98:	27 5a       	subi	r18, 0xA7	; 167
    2f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f9c:	be 01       	movw	r22, r28
    2f9e:	60 5f       	subi	r22, 0xF0	; 240
    2fa0:	7e 4f       	sbci	r23, 0xFE	; 254
    2fa2:	4d 91       	ld	r20, X+
    2fa4:	f9 01       	movw	r30, r18
    2fa6:	41 93       	st	Z+, r20
    2fa8:	9f 01       	movw	r18, r30
    2faa:	a6 17       	cp	r26, r22
    2fac:	b7 07       	cpc	r27, r23
    2fae:	c9 f7       	brne	.-14     	; 0x2fa2 <eepromSavePattern+0x174>
    2fb0:	de 01       	movw	r26, r28
    2fb2:	a7 59       	subi	r26, 0x97	; 151
    2fb4:	bf 4f       	sbci	r27, 0xFF	; 255
    2fb6:	5e 01       	movw	r10, r28
    2fb8:	f0 ee       	ldi	r31, 0xE0	; 224
    2fba:	af 1a       	sub	r10, r31
    2fbc:	fe ef       	ldi	r31, 0xFE	; 254
    2fbe:	bf 0a       	sbc	r11, r31
    2fc0:	fb 01       	movw	r30, r22
    2fc2:	21 91       	ld	r18, Z+
    2fc4:	bf 01       	movw	r22, r30
    2fc6:	2d 93       	st	X+, r18
    2fc8:	ea 15       	cp	r30, r10
    2fca:	fb 05       	cpc	r31, r11
    2fcc:	c9 f7       	brne	.-14     	; 0x2fc0 <eepromSavePattern+0x192>
    2fce:	eb 96       	adiw	r28, 0x3b	; 59
    2fd0:	9f af       	std	Y+63, r25	; 0x3f
    2fd2:	eb 97       	sbiw	r28, 0x3b	; 59
    2fd4:	ec 96       	adiw	r28, 0x3c	; 60
    2fd6:	8f af       	std	Y+63, r24	; 0x3f
    2fd8:	ec 97       	sbiw	r28, 0x3c	; 60
    2fda:	ce 58       	subi	r28, 0x8E	; 142
    2fdc:	de 4f       	sbci	r29, 0xFE	; 254
    2fde:	88 81       	ld	r24, Y
    2fe0:	c2 57       	subi	r28, 0x72	; 114
    2fe2:	d1 40       	sbci	r29, 0x01	; 1
    2fe4:	ed 96       	adiw	r28, 0x3d	; 61
    2fe6:	8f af       	std	Y+63, r24	; 0x3f
    2fe8:	ed 97       	sbiw	r28, 0x3d	; 61
    2fea:	85 2d       	mov	r24, r5
    2fec:	c8 de       	rcall	.-624    	; 0x2d7e <twi_start>
    2fee:	81 30       	cpi	r24, 0x01	; 1
    2ff0:	81 f4       	brne	.+32     	; 0x3012 <eepromSavePattern+0x1e4>
    2ff2:	84 e1       	ldi	r24, 0x14	; 20
    2ff4:	ec e0       	ldi	r30, 0x0C	; 12
    2ff6:	f2 e0       	ldi	r31, 0x02	; 2
    2ff8:	de 01       	movw	r26, r28
    2ffa:	af 57       	subi	r26, 0x7F	; 127
    2ffc:	bf 4f       	sbci	r27, 0xFF	; 255
    2ffe:	01 90       	ld	r0, Z+
    3000:	0d 92       	st	X+, r0
    3002:	8a 95       	dec	r24
    3004:	e1 f7       	brne	.-8      	; 0x2ffe <eepromSavePattern+0x1d0>
    3006:	63 e0       	ldi	r22, 0x03	; 3
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	ce 01       	movw	r24, r28
    300c:	8f 57       	subi	r24, 0x7F	; 127
    300e:	9f 4f       	sbci	r25, 0xFF	; 255
    3010:	1f da       	rcall	.-3010   	; 0x2450 <outputS>
    3012:	87 2d       	mov	r24, r7
    3014:	e4 de       	rcall	.-568    	; 0x2dde <twi_write>
    3016:	46 2c       	mov	r4, r6
    3018:	86 2d       	mov	r24, r6
    301a:	e1 de       	rcall	.-574    	; 0x2dde <twi_write>
    301c:	6e 01       	movw	r12, r28
    301e:	fc e7       	ldi	r31, 0x7C	; 124
    3020:	cf 0e       	add	r12, r31
    3022:	d1 1c       	adc	r13, r1
    3024:	78 01       	movw	r14, r16
    3026:	d7 01       	movw	r26, r14
    3028:	8d 91       	ld	r24, X+
    302a:	7d 01       	movw	r14, r26
    302c:	d8 de       	rcall	.-592    	; 0x2dde <twi_write>
    302e:	ce 14       	cp	r12, r14
    3030:	df 04       	cpc	r13, r15
    3032:	c9 f7       	brne	.-14     	; 0x3026 <eepromSavePattern+0x1f8>
    3034:	cb de       	rcall	.-618    	; 0x2dcc <twi_stop>
    3036:	ef e1       	ldi	r30, 0x1F	; 31
    3038:	fe e4       	ldi	r31, 0x4E	; 78
    303a:	31 97       	sbiw	r30, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <eepromSavePattern+0x20c>
    303e:	00 c0       	rjmp	.+0      	; 0x3040 <eepromSavePattern+0x212>
    3040:	00 00       	nop
    3042:	9e 01       	movw	r18, r28
    3044:	20 5d       	subi	r18, 0xD0	; 208
    3046:	3e 4f       	sbci	r19, 0xFE	; 254
    3048:	f8 01       	movw	r30, r16
    304a:	d5 01       	movw	r26, r10
    304c:	8d 91       	ld	r24, X+
    304e:	5d 01       	movw	r10, r26
    3050:	81 93       	st	Z+, r24
    3052:	2a 17       	cp	r18, r26
    3054:	3b 07       	cpc	r19, r27
    3056:	c9 f7       	brne	.-14     	; 0x304a <eepromSavePattern+0x21c>
    3058:	de 01       	movw	r26, r28
    305a:	91 96       	adiw	r26, 0x21	; 33
    305c:	f9 01       	movw	r30, r18
    305e:	81 91       	ld	r24, Z+
    3060:	9f 01       	movw	r18, r30
    3062:	f4 01       	movw	r30, r8
    3064:	81 93       	st	Z+, r24
    3066:	4f 01       	movw	r8, r30
    3068:	ae 17       	cp	r26, r30
    306a:	bf 07       	cpc	r27, r31
    306c:	b9 f7       	brne	.-18     	; 0x305c <eepromSavePattern+0x22e>
    306e:	ce 01       	movw	r24, r28
    3070:	80 5c       	subi	r24, 0xC0	; 192
    3072:	9e 4f       	sbci	r25, 0xFE	; 254
    3074:	ae 01       	movw	r20, r28
    3076:	4f 5c       	subi	r20, 0xCF	; 207
    3078:	5f 4f       	sbci	r21, 0xFF	; 255
    307a:	fc 01       	movw	r30, r24
    307c:	21 91       	ld	r18, Z+
    307e:	cf 01       	movw	r24, r30
    3080:	2d 93       	st	X+, r18
    3082:	a4 17       	cp	r26, r20
    3084:	b5 07       	cpc	r27, r21
    3086:	c9 f7       	brne	.-14     	; 0x307a <eepromSavePattern+0x24c>
    3088:	ce 01       	movw	r24, r28
    308a:	80 5b       	subi	r24, 0xB0	; 176
    308c:	9e 4f       	sbci	r25, 0xFE	; 254
    308e:	de 01       	movw	r26, r28
    3090:	af 5b       	subi	r26, 0xBF	; 191
    3092:	bf 4f       	sbci	r27, 0xFF	; 255
    3094:	fc 01       	movw	r30, r24
    3096:	21 91       	ld	r18, Z+
    3098:	cf 01       	movw	r24, r30
    309a:	fa 01       	movw	r30, r20
    309c:	21 93       	st	Z+, r18
    309e:	af 01       	movw	r20, r30
    30a0:	ea 17       	cp	r30, r26
    30a2:	fb 07       	cpc	r31, r27
    30a4:	b9 f7       	brne	.-18     	; 0x3094 <eepromSavePattern+0x266>
    30a6:	fe 01       	movw	r30, r28
    30a8:	e0 5a       	subi	r30, 0xA0	; 160
    30aa:	fe 4f       	sbci	r31, 0xFE	; 254
    30ac:	9e 01       	movw	r18, r28
    30ae:	20 59       	subi	r18, 0x90	; 144
    30b0:	3e 4f       	sbci	r19, 0xFE	; 254
    30b2:	81 91       	ld	r24, Z+
    30b4:	8d 93       	st	X+, r24
    30b6:	2e 17       	cp	r18, r30
    30b8:	3f 07       	cpc	r19, r31
    30ba:	d9 f7       	brne	.-10     	; 0x30b2 <eepromSavePattern+0x284>
    30bc:	ae 01       	movw	r20, r28
    30be:	4d 58       	subi	r20, 0x8D	; 141
    30c0:	5e 4f       	sbci	r21, 0xFE	; 254
    30c2:	ce 01       	movw	r24, r28
    30c4:	8f 5a       	subi	r24, 0xAF	; 175
    30c6:	9f 4f       	sbci	r25, 0xFF	; 255
    30c8:	de 01       	movw	r26, r28
    30ca:	ad 57       	subi	r26, 0x7D	; 125
    30cc:	be 4f       	sbci	r27, 0xFE	; 254
    30ce:	fa 01       	movw	r30, r20
    30d0:	21 91       	ld	r18, Z+
    30d2:	af 01       	movw	r20, r30
    30d4:	fc 01       	movw	r30, r24
    30d6:	21 93       	st	Z+, r18
    30d8:	cf 01       	movw	r24, r30
    30da:	a4 17       	cp	r26, r20
    30dc:	b5 07       	cpc	r27, r21
    30de:	b9 f7       	brne	.-18     	; 0x30ce <eepromSavePattern+0x2a0>
    30e0:	ce 01       	movw	r24, r28
    30e2:	8f 59       	subi	r24, 0x9F	; 159
    30e4:	9f 4f       	sbci	r25, 0xFF	; 255
    30e6:	ae 01       	movw	r20, r28
    30e8:	4d 56       	subi	r20, 0x6D	; 109
    30ea:	5e 4f       	sbci	r21, 0xFE	; 254
    30ec:	2d 91       	ld	r18, X+
    30ee:	fc 01       	movw	r30, r24
    30f0:	21 93       	st	Z+, r18
    30f2:	cf 01       	movw	r24, r30
    30f4:	a4 17       	cp	r26, r20
    30f6:	b5 07       	cpc	r27, r21
    30f8:	c9 f7       	brne	.-14     	; 0x30ec <eepromSavePattern+0x2be>
    30fa:	de 01       	movw	r26, r28
    30fc:	af 58       	subi	r26, 0x8F	; 143
    30fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3100:	7e 01       	movw	r14, r28
    3102:	fd e5       	ldi	r31, 0x5D	; 93
    3104:	ef 1a       	sub	r14, r31
    3106:	fe ef       	ldi	r31, 0xFE	; 254
    3108:	ff 0a       	sbc	r15, r31
    310a:	fa 01       	movw	r30, r20
    310c:	81 91       	ld	r24, Z+
    310e:	af 01       	movw	r20, r30
    3110:	8d 93       	st	X+, r24
    3112:	ee 16       	cp	r14, r30
    3114:	ff 06       	cpc	r15, r31
    3116:	c9 f7       	brne	.-14     	; 0x310a <eepromSavePattern+0x2dc>
    3118:	85 2d       	mov	r24, r5
    311a:	31 de       	rcall	.-926    	; 0x2d7e <twi_start>
    311c:	81 30       	cpi	r24, 0x01	; 1
    311e:	81 f4       	brne	.+32     	; 0x3140 <eepromSavePattern+0x312>
    3120:	84 e1       	ldi	r24, 0x14	; 20
    3122:	e1 e2       	ldi	r30, 0x21	; 33
    3124:	f2 e0       	ldi	r31, 0x02	; 2
    3126:	de 01       	movw	r26, r28
    3128:	af 57       	subi	r26, 0x7F	; 127
    312a:	bf 4f       	sbci	r27, 0xFF	; 255
    312c:	01 90       	ld	r0, Z+
    312e:	0d 92       	st	X+, r0
    3130:	8a 95       	dec	r24
    3132:	e1 f7       	brne	.-8      	; 0x312c <eepromSavePattern+0x2fe>
    3134:	63 e0       	ldi	r22, 0x03	; 3
    3136:	70 e0       	ldi	r23, 0x00	; 0
    3138:	ce 01       	movw	r24, r28
    313a:	8f 57       	subi	r24, 0x7F	; 127
    313c:	9f 4f       	sbci	r25, 0xFF	; 255
    313e:	88 d9       	rcall	.-3312   	; 0x2450 <outputS>
    3140:	c3 01       	movw	r24, r6
    3142:	80 58       	subi	r24, 0x80	; 128
    3144:	9f 4f       	sbci	r25, 0xFF	; 255
    3146:	89 2f       	mov	r24, r25
    3148:	4a de       	rcall	.-876    	; 0x2dde <twi_write>
    314a:	80 e8       	ldi	r24, 0x80	; 128
    314c:	84 0d       	add	r24, r4
    314e:	47 de       	rcall	.-882    	; 0x2dde <twi_write>
    3150:	6e 01       	movw	r12, r28
    3152:	f1 e8       	ldi	r31, 0x81	; 129
    3154:	cf 0e       	add	r12, r31
    3156:	d1 1c       	adc	r13, r1
    3158:	d8 01       	movw	r26, r16
    315a:	8d 91       	ld	r24, X+
    315c:	8d 01       	movw	r16, r26
    315e:	3f de       	rcall	.-898    	; 0x2dde <twi_write>
    3160:	c0 16       	cp	r12, r16
    3162:	d1 06       	cpc	r13, r17
    3164:	c9 f7       	brne	.-14     	; 0x3158 <eepromSavePattern+0x32a>
    3166:	32 de       	rcall	.-924    	; 0x2dcc <twi_stop>
    3168:	ef e1       	ldi	r30, 0x1F	; 31
    316a:	fe e4       	ldi	r31, 0x4E	; 78
    316c:	31 97       	sbiw	r30, 0x01	; 1
    316e:	f1 f7       	brne	.-4      	; 0x316c <eepromSavePattern+0x33e>
    3170:	00 c0       	rjmp	.+0      	; 0x3172 <eepromSavePattern+0x344>
    3172:	00 00       	nop
    3174:	85 2d       	mov	r24, r5
    3176:	03 de       	rcall	.-1018   	; 0x2d7e <twi_start>
    3178:	81 30       	cpi	r24, 0x01	; 1
    317a:	81 f4       	brne	.+32     	; 0x319c <eepromSavePattern+0x36e>
    317c:	84 e1       	ldi	r24, 0x14	; 20
    317e:	e6 e3       	ldi	r30, 0x36	; 54
    3180:	f2 e0       	ldi	r31, 0x02	; 2
    3182:	de 01       	movw	r26, r28
    3184:	af 57       	subi	r26, 0x7F	; 127
    3186:	bf 4f       	sbci	r27, 0xFF	; 255
    3188:	01 90       	ld	r0, Z+
    318a:	0d 92       	st	X+, r0
    318c:	8a 95       	dec	r24
    318e:	e1 f7       	brne	.-8      	; 0x3188 <eepromSavePattern+0x35a>
    3190:	63 e0       	ldi	r22, 0x03	; 3
    3192:	70 e0       	ldi	r23, 0x00	; 0
    3194:	ce 01       	movw	r24, r28
    3196:	8f 57       	subi	r24, 0x7F	; 127
    3198:	9f 4f       	sbci	r25, 0xFF	; 255
    319a:	5a d9       	rcall	.-3404   	; 0x2450 <outputS>
    319c:	73 94       	inc	r7
    319e:	87 2d       	mov	r24, r7
    31a0:	1e de       	rcall	.-964    	; 0x2dde <twi_write>
    31a2:	84 2d       	mov	r24, r4
    31a4:	1c de       	rcall	.-968    	; 0x2dde <twi_write>
    31a6:	6e 01       	movw	r12, r28
    31a8:	2d ed       	ldi	r18, 0xDD	; 221
    31aa:	c2 1a       	sub	r12, r18
    31ac:	2d ef       	ldi	r18, 0xFD	; 253
    31ae:	d2 0a       	sbc	r13, r18
    31b0:	d7 01       	movw	r26, r14
    31b2:	1c 91       	ld	r17, X
    31b4:	11 96       	adiw	r26, 0x01	; 1
    31b6:	8c 91       	ld	r24, X
    31b8:	b2 e0       	ldi	r27, 0x02	; 2
    31ba:	eb 0e       	add	r14, r27
    31bc:	f1 1c       	adc	r15, r1
    31be:	0f de       	rcall	.-994    	; 0x2dde <twi_write>
    31c0:	81 2f       	mov	r24, r17
    31c2:	0d de       	rcall	.-998    	; 0x2dde <twi_write>
    31c4:	ce 14       	cp	r12, r14
    31c6:	df 04       	cpc	r13, r15
    31c8:	99 f7       	brne	.-26     	; 0x31b0 <eepromSavePattern+0x382>
    31ca:	00 de       	rcall	.-1024   	; 0x2dcc <twi_stop>
    31cc:	ef e1       	ldi	r30, 0x1F	; 31
    31ce:	fe e4       	ldi	r31, 0x4E	; 78
    31d0:	31 97       	sbiw	r30, 0x01	; 1
    31d2:	f1 f7       	brne	.-4      	; 0x31d0 <eepromSavePattern+0x3a2>
    31d4:	00 c0       	rjmp	.+0      	; 0x31d6 <eepromSavePattern+0x3a8>
    31d6:	00 00       	nop
    31d8:	cc 56       	subi	r28, 0x6C	; 108
    31da:	df 4f       	sbci	r29, 0xFF	; 255
    31dc:	0f b6       	in	r0, 0x3f	; 63
    31de:	f8 94       	cli
    31e0:	de bf       	out	0x3e, r29	; 62
    31e2:	0f be       	out	0x3f, r0	; 63
    31e4:	cd bf       	out	0x3d, r28	; 61
    31e6:	df 91       	pop	r29
    31e8:	cf 91       	pop	r28
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	ff 90       	pop	r15
    31f0:	ef 90       	pop	r14
    31f2:	df 90       	pop	r13
    31f4:	cf 90       	pop	r12
    31f6:	bf 90       	pop	r11
    31f8:	af 90       	pop	r10
    31fa:	9f 90       	pop	r9
    31fc:	8f 90       	pop	r8
    31fe:	7f 90       	pop	r7
    3200:	6f 90       	pop	r6
    3202:	5f 90       	pop	r5
    3204:	4f 90       	pop	r4
    3206:	08 95       	ret

00003208 <eepromLoadPattern>:
    3208:	8f 92       	push	r8
    320a:	9f 92       	push	r9
    320c:	af 92       	push	r10
    320e:	bf 92       	push	r11
    3210:	cf 92       	push	r12
    3212:	df 92       	push	r13
    3214:	ef 92       	push	r14
    3216:	ff 92       	push	r15
    3218:	0f 93       	push	r16
    321a:	1f 93       	push	r17
    321c:	cf 93       	push	r28
    321e:	df 93       	push	r29
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
    3224:	c4 59       	subi	r28, 0x94	; 148
    3226:	d1 40       	sbci	r29, 0x01	; 1
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	f8 94       	cli
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	cd bf       	out	0x3d, r28	; 61
    3232:	7c 01       	movw	r14, r24
    3234:	86 2f       	mov	r24, r22
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	66 23       	and	r22, r22
    323a:	84 f0       	brlt	.+32     	; 0x325c <eepromLoadPattern+0x54>
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	9c 01       	movw	r18, r24
    3240:	22 0f       	add	r18, r18
    3242:	33 1f       	adc	r19, r19
    3244:	82 0f       	add	r24, r18
    3246:	93 1f       	adc	r25, r19
    3248:	96 95       	lsr	r25
    324a:	98 2f       	mov	r25, r24
    324c:	88 27       	eor	r24, r24
    324e:	97 95       	ror	r25
    3250:	87 95       	ror	r24
    3252:	08 2f       	mov	r16, r24
    3254:	d9 2e       	mov	r13, r25
    3256:	80 ea       	ldi	r24, 0xA0	; 160
    3258:	11 ea       	ldi	r17, 0xA1	; 161
    325a:	10 c0       	rjmp	.+32     	; 0x327c <eepromLoadPattern+0x74>
    325c:	80 58       	subi	r24, 0x80	; 128
    325e:	91 09       	sbc	r25, r1
    3260:	9c 01       	movw	r18, r24
    3262:	22 0f       	add	r18, r18
    3264:	33 1f       	adc	r19, r19
    3266:	82 0f       	add	r24, r18
    3268:	93 1f       	adc	r25, r19
    326a:	96 95       	lsr	r25
    326c:	98 2f       	mov	r25, r24
    326e:	88 27       	eor	r24, r24
    3270:	97 95       	ror	r25
    3272:	87 95       	ror	r24
    3274:	08 2f       	mov	r16, r24
    3276:	d9 2e       	mov	r13, r25
    3278:	88 ea       	ldi	r24, 0xA8	; 168
    327a:	19 ea       	ldi	r17, 0xA9	; 169
    327c:	80 dd       	rcall	.-1280   	; 0x2d7e <twi_start>
    327e:	81 30       	cpi	r24, 0x01	; 1
    3280:	29 f4       	brne	.+10     	; 0x328c <eepromLoadPattern+0x84>
    3282:	63 e0       	ldi	r22, 0x03	; 3
    3284:	70 e0       	ldi	r23, 0x00	; 0
    3286:	87 e7       	ldi	r24, 0x77	; 119
    3288:	93 e0       	ldi	r25, 0x03	; 3
    328a:	e2 d8       	rcall	.-3644   	; 0x2450 <outputS>
    328c:	8d 2d       	mov	r24, r13
    328e:	a7 dd       	rcall	.-1202   	; 0x2dde <twi_write>
    3290:	80 2f       	mov	r24, r16
    3292:	a5 dd       	rcall	.-1206   	; 0x2dde <twi_write>
    3294:	81 2f       	mov	r24, r17
    3296:	73 dd       	rcall	.-1306   	; 0x2d7e <twi_start>
    3298:	81 30       	cpi	r24, 0x01	; 1
    329a:	09 f0       	breq	.+2      	; 0x329e <eepromLoadPattern+0x96>
    329c:	47 c1       	rjmp	.+654    	; 0x352c <eepromLoadPattern+0x324>
    329e:	84 e1       	ldi	r24, 0x14	; 20
    32a0:	eb e4       	ldi	r30, 0x4B	; 75
    32a2:	f2 e0       	ldi	r31, 0x02	; 2
    32a4:	de 01       	movw	r26, r28
    32a6:	af 57       	subi	r26, 0x7F	; 127
    32a8:	be 4f       	sbci	r27, 0xFE	; 254
    32aa:	01 90       	ld	r0, Z+
    32ac:	0d 92       	st	X+, r0
    32ae:	8a 95       	dec	r24
    32b0:	e1 f7       	brne	.-8      	; 0x32aa <eepromLoadPattern+0xa2>
    32b2:	63 e0       	ldi	r22, 0x03	; 3
    32b4:	70 e0       	ldi	r23, 0x00	; 0
    32b6:	ce 01       	movw	r24, r28
    32b8:	8f 57       	subi	r24, 0x7F	; 127
    32ba:	9e 4f       	sbci	r25, 0xFE	; 254
    32bc:	c9 d8       	rcall	.-3694   	; 0x2450 <outputS>
    32be:	36 c1       	rjmp	.+620    	; 0x352c <eepromLoadPattern+0x324>
    32c0:	a0 dd       	rcall	.-1216   	; 0x2e02 <twi_readAck>
    32c2:	d8 01       	movw	r26, r16
    32c4:	8d 93       	st	X+, r24
    32c6:	8d 01       	movw	r16, r26
    32c8:	ac 15       	cp	r26, r12
    32ca:	bd 05       	cpc	r27, r13
    32cc:	c9 f7       	brne	.-14     	; 0x32c0 <eepromLoadPattern+0xb8>
    32ce:	a4 dd       	rcall	.-1208   	; 0x2e18 <twi_readNak>
    32d0:	c0 58       	subi	r28, 0x80	; 128
    32d2:	de 4f       	sbci	r29, 0xFE	; 254
    32d4:	88 83       	st	Y, r24
    32d6:	c0 58       	subi	r28, 0x80	; 128
    32d8:	d1 40       	sbci	r29, 0x01	; 1
    32da:	78 dd       	rcall	.-1296   	; 0x2dcc <twi_stop>
    32dc:	87 01       	movw	r16, r14
    32de:	4e 01       	movw	r8, r28
    32e0:	b9 e0       	ldi	r27, 0x09	; 9
    32e2:	8b 0e       	add	r8, r27
    32e4:	91 1c       	adc	r9, r1
    32e6:	f7 01       	movw	r30, r14
    32e8:	d5 01       	movw	r26, r10
    32ea:	8d 91       	ld	r24, X+
    32ec:	5d 01       	movw	r10, r26
    32ee:	81 93       	st	Z+, r24
    32f0:	a8 15       	cp	r26, r8
    32f2:	b9 05       	cpc	r27, r9
    32f4:	c9 f7       	brne	.-14     	; 0x32e8 <eepromLoadPattern+0xe0>
    32f6:	d1 2c       	mov	r13, r1
    32f8:	f4 01       	movw	r30, r8
    32fa:	81 91       	ld	r24, Z+
    32fc:	4f 01       	movw	r8, r30
    32fe:	f8 01       	movw	r30, r16
    3300:	80 87       	std	Z+8, r24	; 0x08
    3302:	4d 2d       	mov	r20, r13
    3304:	60 81       	ld	r22, Z
    3306:	0f 5f       	subi	r16, 0xFF	; 255
    3308:	1f 4f       	sbci	r17, 0xFF	; 255
    330a:	13 dc       	rcall	.-2010   	; 0x2b32 <setOutputVolume>
    330c:	d3 94       	inc	r13
    330e:	f8 e0       	ldi	r31, 0x08	; 8
    3310:	df 12       	cpse	r13, r31
    3312:	f2 cf       	rjmp	.-28     	; 0x32f8 <eepromLoadPattern+0xf0>
    3314:	5e 01       	movw	r10, r28
    3316:	81 e1       	ldi	r24, 0x11	; 17
    3318:	a8 0e       	add	r10, r24
    331a:	b1 1c       	adc	r11, r1
    331c:	67 01       	movw	r12, r14
    331e:	90 e1       	ldi	r25, 0x10	; 16
    3320:	c9 0e       	add	r12, r25
    3322:	d1 1c       	adc	r13, r1
    3324:	10 e0       	ldi	r17, 0x00	; 0
    3326:	d5 01       	movw	r26, r10
    3328:	4d 91       	ld	r20, X+
    332a:	5d 01       	movw	r10, r26
    332c:	f6 01       	movw	r30, r12
    332e:	41 93       	st	Z+, r20
    3330:	6f 01       	movw	r12, r30
    3332:	60 e0       	ldi	r22, 0x00	; 0
    3334:	81 2f       	mov	r24, r17
    3336:	74 dc       	rcall	.-1816   	; 0x2c20 <outputSampleRate>
    3338:	1f 5f       	subi	r17, 0xFF	; 255
    333a:	18 30       	cpi	r17, 0x08	; 8
    333c:	a1 f7       	brne	.-24     	; 0x3326 <eepromLoadPattern+0x11e>
    333e:	fe 01       	movw	r30, r28
    3340:	79 96       	adiw	r30, 0x19	; 25
    3342:	c7 01       	movw	r24, r14
    3344:	48 96       	adiw	r24, 0x18	; 24
    3346:	ae 01       	movw	r20, r28
    3348:	47 5d       	subi	r20, 0xD7	; 215
    334a:	5f 4f       	sbci	r21, 0xFF	; 255
    334c:	21 91       	ld	r18, Z+
    334e:	dc 01       	movw	r26, r24
    3350:	2d 93       	st	X+, r18
    3352:	cd 01       	movw	r24, r26
    3354:	e4 17       	cp	r30, r20
    3356:	f5 07       	cpc	r31, r21
    3358:	c9 f7       	brne	.-14     	; 0x334c <eepromLoadPattern+0x144>
    335a:	57 01       	movw	r10, r14
    335c:	b8 e2       	ldi	r27, 0x28	; 40
    335e:	ab 0e       	add	r10, r27
    3360:	b1 1c       	adc	r11, r1
    3362:	de 01       	movw	r26, r28
    3364:	d9 96       	adiw	r26, 0x39	; 57
    3366:	c5 01       	movw	r24, r10
    3368:	fa 01       	movw	r30, r20
    336a:	21 91       	ld	r18, Z+
    336c:	af 01       	movw	r20, r30
    336e:	fc 01       	movw	r30, r24
    3370:	21 93       	st	Z+, r18
    3372:	cf 01       	movw	r24, r30
    3374:	4a 17       	cp	r20, r26
    3376:	5b 07       	cpc	r21, r27
    3378:	b9 f7       	brne	.-18     	; 0x3368 <eepromLoadPattern+0x160>
    337a:	c7 01       	movw	r24, r14
    337c:	c8 96       	adiw	r24, 0x38	; 56
    337e:	ae 01       	movw	r20, r28
    3380:	47 5b       	subi	r20, 0xB7	; 183
    3382:	5f 4f       	sbci	r21, 0xFF	; 255
    3384:	2d 91       	ld	r18, X+
    3386:	fc 01       	movw	r30, r24
    3388:	21 93       	st	Z+, r18
    338a:	cf 01       	movw	r24, r30
    338c:	a4 17       	cp	r26, r20
    338e:	b5 07       	cpc	r27, r21
    3390:	c9 f7       	brne	.-14     	; 0x3384 <eepromLoadPattern+0x17c>
    3392:	c7 01       	movw	r24, r14
    3394:	88 5b       	subi	r24, 0xB8	; 184
    3396:	9f 4f       	sbci	r25, 0xFF	; 255
    3398:	de 01       	movw	r26, r28
    339a:	a7 5a       	subi	r26, 0xA7	; 167
    339c:	bf 4f       	sbci	r27, 0xFF	; 255
    339e:	fa 01       	movw	r30, r20
    33a0:	21 91       	ld	r18, Z+
    33a2:	af 01       	movw	r20, r30
    33a4:	fc 01       	movw	r30, r24
    33a6:	21 93       	st	Z+, r18
    33a8:	cf 01       	movw	r24, r30
    33aa:	4a 17       	cp	r20, r26
    33ac:	5b 07       	cpc	r21, r27
    33ae:	b9 f7       	brne	.-18     	; 0x339e <eepromLoadPattern+0x196>
    33b0:	c7 01       	movw	r24, r14
    33b2:	88 5a       	subi	r24, 0xA8	; 168
    33b4:	9f 4f       	sbci	r25, 0xFF	; 255
    33b6:	ae 01       	movw	r20, r28
    33b8:	47 59       	subi	r20, 0x97	; 151
    33ba:	5f 4f       	sbci	r21, 0xFF	; 255
    33bc:	2d 91       	ld	r18, X+
    33be:	fc 01       	movw	r30, r24
    33c0:	21 93       	st	Z+, r18
    33c2:	cf 01       	movw	r24, r30
    33c4:	a4 17       	cp	r26, r20
    33c6:	b5 07       	cpc	r27, r21
    33c8:	c9 f7       	brne	.-14     	; 0x33bc <eepromLoadPattern+0x1b4>
    33ca:	d7 01       	movw	r26, r14
    33cc:	a8 59       	subi	r26, 0x98	; 152
    33ce:	bf 4f       	sbci	r27, 0xFF	; 255
    33d0:	9e 01       	movw	r18, r28
    33d2:	27 58       	subi	r18, 0x87	; 135
    33d4:	3f 4f       	sbci	r19, 0xFF	; 255
    33d6:	fa 01       	movw	r30, r20
    33d8:	81 91       	ld	r24, Z+
    33da:	af 01       	movw	r20, r30
    33dc:	8d 93       	st	X+, r24
    33de:	e2 17       	cp	r30, r18
    33e0:	f3 07       	cpc	r31, r19
    33e2:	c9 f7       	brne	.-14     	; 0x33d6 <eepromLoadPattern+0x1ce>
    33e4:	f7 01       	movw	r30, r14
    33e6:	e8 53       	subi	r30, 0x38	; 56
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	eb 96       	adiw	r28, 0x3b	; 59
    33ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    33ee:	eb 97       	sbiw	r28, 0x3b	; 59
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	98 2f       	mov	r25, r24
    33f4:	88 27       	eor	r24, r24
    33f6:	ec 96       	adiw	r28, 0x3c	; 60
    33f8:	2f ad       	ldd	r18, Y+63	; 0x3f
    33fa:	ec 97       	sbiw	r28, 0x3c	; 60
    33fc:	82 2b       	or	r24, r18
    33fe:	91 83       	std	Z+1, r25	; 0x01
    3400:	80 83       	st	Z, r24
    3402:	ed 96       	adiw	r28, 0x3d	; 61
    3404:	8f ad       	ldd	r24, Y+63	; 0x3f
    3406:	ed 97       	sbiw	r28, 0x3d	; 61
    3408:	32 96       	adiw	r30, 0x02	; 2
    340a:	80 83       	st	Z, r24
    340c:	ae 01       	movw	r20, r28
    340e:	4f 57       	subi	r20, 0x7F	; 127
    3410:	5f 4f       	sbci	r21, 0xFF	; 255
    3412:	c7 01       	movw	r24, r14
    3414:	88 58       	subi	r24, 0x88	; 136
    3416:	9f 4f       	sbci	r25, 0xFF	; 255
    3418:	fe 01       	movw	r30, r28
    341a:	ef 56       	subi	r30, 0x6F	; 111
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	da 01       	movw	r26, r20
    3420:	2d 91       	ld	r18, X+
    3422:	ad 01       	movw	r20, r26
    3424:	dc 01       	movw	r26, r24
    3426:	2d 93       	st	X+, r18
    3428:	cd 01       	movw	r24, r26
    342a:	e4 17       	cp	r30, r20
    342c:	f5 07       	cpc	r31, r21
    342e:	b9 f7       	brne	.-18     	; 0x341e <eepromLoadPattern+0x216>
    3430:	c7 01       	movw	r24, r14
    3432:	88 57       	subi	r24, 0x78	; 120
    3434:	9f 4f       	sbci	r25, 0xFF	; 255
    3436:	ae 01       	movw	r20, r28
    3438:	4f 55       	subi	r20, 0x5F	; 95
    343a:	5f 4f       	sbci	r21, 0xFF	; 255
    343c:	21 91       	ld	r18, Z+
    343e:	dc 01       	movw	r26, r24
    3440:	2d 93       	st	X+, r18
    3442:	cd 01       	movw	r24, r26
    3444:	4e 17       	cp	r20, r30
    3446:	5f 07       	cpc	r21, r31
    3448:	c9 f7       	brne	.-14     	; 0x343c <eepromLoadPattern+0x234>
    344a:	87 01       	movw	r16, r14
    344c:	08 56       	subi	r16, 0x68	; 104
    344e:	1f 4f       	sbci	r17, 0xFF	; 255
    3450:	4e 01       	movw	r8, r28
    3452:	b1 eb       	ldi	r27, 0xB1	; 177
    3454:	8b 0e       	add	r8, r27
    3456:	91 1c       	adc	r9, r1
    3458:	f8 01       	movw	r30, r16
    345a:	da 01       	movw	r26, r20
    345c:	8d 91       	ld	r24, X+
    345e:	ad 01       	movw	r20, r26
    3460:	81 93       	st	Z+, r24
    3462:	8a 16       	cp	r8, r26
    3464:	9b 06       	cpc	r9, r27
    3466:	c9 f7       	brne	.-14     	; 0x345a <eepromLoadPattern+0x252>
    3468:	6e 01       	movw	r12, r28
    346a:	b1 ec       	ldi	r27, 0xC1	; 193
    346c:	cb 0e       	add	r12, r27
    346e:	d1 1c       	adc	r13, r1
    3470:	f4 01       	movw	r30, r8
    3472:	81 91       	ld	r24, Z+
    3474:	4f 01       	movw	r8, r30
    3476:	f8 01       	movw	r30, r16
    3478:	80 8b       	std	Z+16, r24	; 0x10
    347a:	d5 01       	movw	r26, r10
    347c:	2d 91       	ld	r18, X+
    347e:	5d 01       	movw	r10, r26
    3480:	1f 96       	adiw	r26, 0x0f	; 15
    3482:	4c 91       	ld	r20, X
    3484:	60 81       	ld	r22, Z
    3486:	0f 5f       	subi	r16, 0xFF	; 255
    3488:	1f 4f       	sbci	r17, 0xFF	; 255
    348a:	77 db       	rcall	.-2322   	; 0x2b7a <setTrackVolume>
    348c:	c8 14       	cp	r12, r8
    348e:	d9 04       	cpc	r13, r9
    3490:	79 f7       	brne	.-34     	; 0x3470 <eepromLoadPattern+0x268>
    3492:	97 01       	movw	r18, r14
    3494:	28 54       	subi	r18, 0x48	; 72
    3496:	3f 4f       	sbci	r19, 0xFF	; 255
    3498:	de 01       	movw	r26, r28
    349a:	af 52       	subi	r26, 0x2F	; 47
    349c:	bf 4f       	sbci	r27, 0xFF	; 255
    349e:	f6 01       	movw	r30, r12
    34a0:	81 91       	ld	r24, Z+
    34a2:	6f 01       	movw	r12, r30
    34a4:	f9 01       	movw	r30, r18
    34a6:	81 93       	st	Z+, r24
    34a8:	9f 01       	movw	r18, r30
    34aa:	ca 16       	cp	r12, r26
    34ac:	db 06       	cpc	r13, r27
    34ae:	b9 f7       	brne	.-18     	; 0x349e <eepromLoadPattern+0x296>
    34b0:	c7 01       	movw	r24, r14
    34b2:	85 53       	subi	r24, 0x35	; 53
    34b4:	9f 4f       	sbci	r25, 0xFF	; 255
    34b6:	ae 01       	movw	r20, r28
    34b8:	4f 51       	subi	r20, 0x1F	; 31
    34ba:	5f 4f       	sbci	r21, 0xFF	; 255
    34bc:	2d 91       	ld	r18, X+
    34be:	fc 01       	movw	r30, r24
    34c0:	21 93       	st	Z+, r18
    34c2:	cf 01       	movw	r24, r30
    34c4:	4a 17       	cp	r20, r26
    34c6:	5b 07       	cpc	r21, r27
    34c8:	c9 f7       	brne	.-14     	; 0x34bc <eepromLoadPattern+0x2b4>
    34ca:	c7 01       	movw	r24, r14
    34cc:	85 52       	subi	r24, 0x25	; 37
    34ce:	9f 4f       	sbci	r25, 0xFF	; 255
    34d0:	be 01       	movw	r22, r28
    34d2:	6f 50       	subi	r22, 0x0F	; 15
    34d4:	7f 4f       	sbci	r23, 0xFF	; 255
    34d6:	da 01       	movw	r26, r20
    34d8:	2d 91       	ld	r18, X+
    34da:	ad 01       	movw	r20, r26
    34dc:	fc 01       	movw	r30, r24
    34de:	21 93       	st	Z+, r18
    34e0:	cf 01       	movw	r24, r30
    34e2:	a6 17       	cp	r26, r22
    34e4:	b7 07       	cpc	r27, r23
    34e6:	b9 f7       	brne	.-18     	; 0x34d6 <eepromLoadPattern+0x2ce>
    34e8:	c7 01       	movw	r24, r14
    34ea:	85 51       	subi	r24, 0x15	; 21
    34ec:	9f 4f       	sbci	r25, 0xFF	; 255
    34ee:	fe 01       	movw	r30, r28
    34f0:	ef 5f       	subi	r30, 0xFF	; 255
    34f2:	fe 4f       	sbci	r31, 0xFE	; 254
    34f4:	db 01       	movw	r26, r22
    34f6:	2d 91       	ld	r18, X+
    34f8:	bd 01       	movw	r22, r26
    34fa:	dc 01       	movw	r26, r24
    34fc:	2d 93       	st	X+, r18
    34fe:	cd 01       	movw	r24, r26
    3500:	e6 17       	cp	r30, r22
    3502:	f7 07       	cpc	r31, r23
    3504:	b9 f7       	brne	.-18     	; 0x34f4 <eepromLoadPattern+0x2ec>
    3506:	d7 01       	movw	r26, r14
    3508:	a5 50       	subi	r26, 0x05	; 5
    350a:	bf 4f       	sbci	r27, 0xFF	; 255
    350c:	ae 01       	movw	r20, r28
    350e:	4f 57       	subi	r20, 0x7F	; 127
    3510:	5e 4f       	sbci	r21, 0xFE	; 254
    3512:	80 81       	ld	r24, Z
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	98 2f       	mov	r25, r24
    3518:	88 27       	eor	r24, r24
    351a:	21 81       	ldd	r18, Z+1	; 0x01
    351c:	82 2b       	or	r24, r18
    351e:	8d 93       	st	X+, r24
    3520:	9d 93       	st	X+, r25
    3522:	32 96       	adiw	r30, 0x02	; 2
    3524:	4e 17       	cp	r20, r30
    3526:	5f 07       	cpc	r21, r31
    3528:	a1 f7       	brne	.-24     	; 0x3512 <eepromLoadPattern+0x30a>
    352a:	0a c0       	rjmp	.+20     	; 0x3540 <eepromLoadPattern+0x338>
    352c:	fe 01       	movw	r30, r28
    352e:	31 96       	adiw	r30, 0x01	; 1
    3530:	5f 01       	movw	r10, r30
    3532:	6e 01       	movw	r12, r28
    3534:	f0 e8       	ldi	r31, 0x80	; 128
    3536:	cf 1a       	sub	r12, r31
    3538:	fe ef       	ldi	r31, 0xFE	; 254
    353a:	df 0a       	sbc	r13, r31
    353c:	85 01       	movw	r16, r10
    353e:	c0 ce       	rjmp	.-640    	; 0x32c0 <eepromLoadPattern+0xb8>
    3540:	cc 56       	subi	r28, 0x6C	; 108
    3542:	de 4f       	sbci	r29, 0xFE	; 254
    3544:	0f b6       	in	r0, 0x3f	; 63
    3546:	f8 94       	cli
    3548:	de bf       	out	0x3e, r29	; 62
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	cd bf       	out	0x3d, r28	; 61
    354e:	df 91       	pop	r29
    3550:	cf 91       	pop	r28
    3552:	1f 91       	pop	r17
    3554:	0f 91       	pop	r16
    3556:	ff 90       	pop	r15
    3558:	ef 90       	pop	r14
    355a:	df 90       	pop	r13
    355c:	cf 90       	pop	r12
    355e:	bf 90       	pop	r11
    3560:	af 90       	pop	r10
    3562:	9f 90       	pop	r9
    3564:	8f 90       	pop	r8
    3566:	08 95       	ret

00003568 <factoryResetEeprom>:
    3568:	1f 93       	push	r17
    356a:	cf 93       	push	r28
    356c:	df 93       	push	r29
    356e:	cd b7       	in	r28, 0x3d	; 61
    3570:	de b7       	in	r29, 0x3e	; 62
    3572:	10 e0       	ldi	r17, 0x00	; 0
    3574:	1f 93       	push	r17
    3576:	8d b7       	in	r24, 0x3d	; 61
    3578:	9e b7       	in	r25, 0x3e	; 62
    357a:	8b 57       	subi	r24, 0x7B	; 123
    357c:	91 40       	sbci	r25, 0x01	; 1
    357e:	0f b6       	in	r0, 0x3f	; 63
    3580:	f8 94       	cli
    3582:	9e bf       	out	0x3e, r25	; 62
    3584:	0f be       	out	0x3f, r0	; 63
    3586:	8d bf       	out	0x3d, r24	; 61
    3588:	ad b7       	in	r26, 0x3d	; 61
    358a:	be b7       	in	r27, 0x3e	; 62
    358c:	11 96       	adiw	r26, 0x01	; 1
    358e:	8b e7       	ldi	r24, 0x7B	; 123
    3590:	91 e0       	ldi	r25, 0x01	; 1
    3592:	fe 01       	movw	r30, r28
    3594:	37 96       	adiw	r30, 0x07	; 7
    3596:	01 90       	ld	r0, Z+
    3598:	0d 92       	st	X+, r0
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	e1 f7       	brne	.-8      	; 0x3596 <factoryResetEeprom+0x2e>
    359e:	47 dc       	rcall	.-1906   	; 0x2e2e <eepromSavePattern>
    35a0:	8f e1       	ldi	r24, 0x1F	; 31
    35a2:	9e e4       	ldi	r25, 0x4E	; 78
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	f1 f7       	brne	.-4      	; 0x35a4 <factoryResetEeprom+0x3c>
    35a8:	00 c0       	rjmp	.+0      	; 0x35aa <factoryResetEeprom+0x42>
    35aa:	00 00       	nop
    35ac:	1f 5f       	subi	r17, 0xFF	; 255
    35ae:	0f b6       	in	r0, 0x3f	; 63
    35b0:	f8 94       	cli
    35b2:	de bf       	out	0x3e, r29	; 62
    35b4:	0f be       	out	0x3f, r0	; 63
    35b6:	cd bf       	out	0x3d, r28	; 61
    35b8:	1f 3f       	cpi	r17, 0xFF	; 255
    35ba:	e1 f6       	brne	.-72     	; 0x3574 <factoryResetEeprom+0xc>
    35bc:	df 91       	pop	r29
    35be:	cf 91       	pop	r28
    35c0:	1f 91       	pop	r17
    35c2:	08 95       	ret

000035c4 <globalWrite>:

//this happens when save button is pressed on global menu. 
void globalWrite(Globals *currentGlobals)
{
    35c4:	cf 93       	push	r28
    35c6:	df 93       	push	r29
    35c8:	ec 01       	movw	r28, r24
	eeprom_write_byte(0,currentGlobals->midiChannel); //this may be wrong, but it does get rid of the warning. 
    35ca:	6c 85       	ldd	r22, Y+12	; 0x0c
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	46 d2       	rcall	.+1164   	; 0x3a5e <eeprom_write_byte>
	eeprom_write_block(currentGlobals->midiTrackNote,1,16);
    35d2:	40 e1       	ldi	r20, 0x10	; 16
    35d4:	50 e0       	ldi	r21, 0x00	; 0
    35d6:	61 e0       	ldi	r22, 0x01	; 1
    35d8:	70 e0       	ldi	r23, 0x00	; 0
    35da:	ce 01       	movw	r24, r28
    35dc:	0d 96       	adiw	r24, 0x0d	; 13
    35de:	36 d2       	rcall	.+1132   	; 0x3a4c <eeprom_write_block>
}
    35e0:	df 91       	pop	r29
    35e2:	cf 91       	pop	r28
    35e4:	08 95       	ret

000035e6 <globalLoad>:
//This happens at startup only, in function "initGlobals"

void globalLoad(Globals *currentGlobals, uint8_t factoryReset)
{
    35e6:	cf 93       	push	r28
    35e8:	df 93       	push	r29
	//we need to load all of the global midi settings here. 
	//we can also check the factory reset bit here. 
	//if the program has not gone through the initial state, and had the internal eeprom formatted, then this will return garbage. 
	if(factoryReset==0)
    35ea:	61 11       	cpse	r22, r1
    35ec:	0c c0       	rjmp	.+24     	; 0x3606 <globalLoad+0x20>
    35ee:	ec 01       	movw	r28, r24
	{
		currentGlobals->midiChannel = eeprom_read_byte(0);
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	23 d2       	rcall	.+1094   	; 0x3a3c <eeprom_read_byte>
    35f6:	8c 87       	std	Y+12, r24	; 0x0c
		eeprom_read_block(currentGlobals->midiTrackNote,1,16);
    35f8:	40 e1       	ldi	r20, 0x10	; 16
    35fa:	50 e0       	ldi	r21, 0x00	; 0
    35fc:	61 e0       	ldi	r22, 0x01	; 1
    35fe:	70 e0       	ldi	r23, 0x00	; 0
    3600:	ce 01       	movw	r24, r28
    3602:	0d 96       	adiw	r24, 0x0d	; 13
    3604:	0b d2       	rcall	.+1046   	; 0x3a1c <eeprom_read_block>
	}
}
    3606:	df 91       	pop	r29
    3608:	cf 91       	pop	r28
    360a:	08 95       	ret

0000360c <__subsf3>:
    360c:	50 58       	subi	r21, 0x80	; 128

0000360e <__addsf3>:
    360e:	bb 27       	eor	r27, r27
    3610:	aa 27       	eor	r26, r26
    3612:	0e d0       	rcall	.+28     	; 0x3630 <__addsf3x>
    3614:	4d c1       	rjmp	.+666    	; 0x38b0 <__fp_round>
    3616:	3e d1       	rcall	.+636    	; 0x3894 <__fp_pscA>
    3618:	30 f0       	brcs	.+12     	; 0x3626 <__addsf3+0x18>
    361a:	43 d1       	rcall	.+646    	; 0x38a2 <__fp_pscB>
    361c:	20 f0       	brcs	.+8      	; 0x3626 <__addsf3+0x18>
    361e:	31 f4       	brne	.+12     	; 0x362c <__addsf3+0x1e>
    3620:	9f 3f       	cpi	r25, 0xFF	; 255
    3622:	11 f4       	brne	.+4      	; 0x3628 <__addsf3+0x1a>
    3624:	1e f4       	brtc	.+6      	; 0x362c <__addsf3+0x1e>
    3626:	33 c1       	rjmp	.+614    	; 0x388e <__fp_nan>
    3628:	0e f4       	brtc	.+2      	; 0x362c <__addsf3+0x1e>
    362a:	e0 95       	com	r30
    362c:	e7 fb       	bst	r30, 7
    362e:	29 c1       	rjmp	.+594    	; 0x3882 <__fp_inf>

00003630 <__addsf3x>:
    3630:	e9 2f       	mov	r30, r25
    3632:	4f d1       	rcall	.+670    	; 0x38d2 <__fp_split3>
    3634:	80 f3       	brcs	.-32     	; 0x3616 <__addsf3+0x8>
    3636:	ba 17       	cp	r27, r26
    3638:	62 07       	cpc	r22, r18
    363a:	73 07       	cpc	r23, r19
    363c:	84 07       	cpc	r24, r20
    363e:	95 07       	cpc	r25, r21
    3640:	18 f0       	brcs	.+6      	; 0x3648 <__addsf3x+0x18>
    3642:	71 f4       	brne	.+28     	; 0x3660 <__addsf3x+0x30>
    3644:	9e f5       	brtc	.+102    	; 0x36ac <__addsf3x+0x7c>
    3646:	67 c1       	rjmp	.+718    	; 0x3916 <__fp_zero>
    3648:	0e f4       	brtc	.+2      	; 0x364c <__addsf3x+0x1c>
    364a:	e0 95       	com	r30
    364c:	0b 2e       	mov	r0, r27
    364e:	ba 2f       	mov	r27, r26
    3650:	a0 2d       	mov	r26, r0
    3652:	0b 01       	movw	r0, r22
    3654:	b9 01       	movw	r22, r18
    3656:	90 01       	movw	r18, r0
    3658:	0c 01       	movw	r0, r24
    365a:	ca 01       	movw	r24, r20
    365c:	a0 01       	movw	r20, r0
    365e:	11 24       	eor	r1, r1
    3660:	ff 27       	eor	r31, r31
    3662:	59 1b       	sub	r21, r25
    3664:	99 f0       	breq	.+38     	; 0x368c <__addsf3x+0x5c>
    3666:	59 3f       	cpi	r21, 0xF9	; 249
    3668:	50 f4       	brcc	.+20     	; 0x367e <__addsf3x+0x4e>
    366a:	50 3e       	cpi	r21, 0xE0	; 224
    366c:	68 f1       	brcs	.+90     	; 0x36c8 <__addsf3x+0x98>
    366e:	1a 16       	cp	r1, r26
    3670:	f0 40       	sbci	r31, 0x00	; 0
    3672:	a2 2f       	mov	r26, r18
    3674:	23 2f       	mov	r18, r19
    3676:	34 2f       	mov	r19, r20
    3678:	44 27       	eor	r20, r20
    367a:	58 5f       	subi	r21, 0xF8	; 248
    367c:	f3 cf       	rjmp	.-26     	; 0x3664 <__addsf3x+0x34>
    367e:	46 95       	lsr	r20
    3680:	37 95       	ror	r19
    3682:	27 95       	ror	r18
    3684:	a7 95       	ror	r26
    3686:	f0 40       	sbci	r31, 0x00	; 0
    3688:	53 95       	inc	r21
    368a:	c9 f7       	brne	.-14     	; 0x367e <__addsf3x+0x4e>
    368c:	7e f4       	brtc	.+30     	; 0x36ac <__addsf3x+0x7c>
    368e:	1f 16       	cp	r1, r31
    3690:	ba 0b       	sbc	r27, r26
    3692:	62 0b       	sbc	r22, r18
    3694:	73 0b       	sbc	r23, r19
    3696:	84 0b       	sbc	r24, r20
    3698:	ba f0       	brmi	.+46     	; 0x36c8 <__addsf3x+0x98>
    369a:	91 50       	subi	r25, 0x01	; 1
    369c:	a1 f0       	breq	.+40     	; 0x36c6 <__addsf3x+0x96>
    369e:	ff 0f       	add	r31, r31
    36a0:	bb 1f       	adc	r27, r27
    36a2:	66 1f       	adc	r22, r22
    36a4:	77 1f       	adc	r23, r23
    36a6:	88 1f       	adc	r24, r24
    36a8:	c2 f7       	brpl	.-16     	; 0x369a <__addsf3x+0x6a>
    36aa:	0e c0       	rjmp	.+28     	; 0x36c8 <__addsf3x+0x98>
    36ac:	ba 0f       	add	r27, r26
    36ae:	62 1f       	adc	r22, r18
    36b0:	73 1f       	adc	r23, r19
    36b2:	84 1f       	adc	r24, r20
    36b4:	48 f4       	brcc	.+18     	; 0x36c8 <__addsf3x+0x98>
    36b6:	87 95       	ror	r24
    36b8:	77 95       	ror	r23
    36ba:	67 95       	ror	r22
    36bc:	b7 95       	ror	r27
    36be:	f7 95       	ror	r31
    36c0:	9e 3f       	cpi	r25, 0xFE	; 254
    36c2:	08 f0       	brcs	.+2      	; 0x36c6 <__addsf3x+0x96>
    36c4:	b3 cf       	rjmp	.-154    	; 0x362c <__addsf3+0x1e>
    36c6:	93 95       	inc	r25
    36c8:	88 0f       	add	r24, r24
    36ca:	08 f0       	brcs	.+2      	; 0x36ce <__addsf3x+0x9e>
    36cc:	99 27       	eor	r25, r25
    36ce:	ee 0f       	add	r30, r30
    36d0:	97 95       	ror	r25
    36d2:	87 95       	ror	r24
    36d4:	08 95       	ret

000036d6 <__divsf3>:
    36d6:	0c d0       	rcall	.+24     	; 0x36f0 <__divsf3x>
    36d8:	eb c0       	rjmp	.+470    	; 0x38b0 <__fp_round>
    36da:	e3 d0       	rcall	.+454    	; 0x38a2 <__fp_pscB>
    36dc:	40 f0       	brcs	.+16     	; 0x36ee <__divsf3+0x18>
    36de:	da d0       	rcall	.+436    	; 0x3894 <__fp_pscA>
    36e0:	30 f0       	brcs	.+12     	; 0x36ee <__divsf3+0x18>
    36e2:	21 f4       	brne	.+8      	; 0x36ec <__divsf3+0x16>
    36e4:	5f 3f       	cpi	r21, 0xFF	; 255
    36e6:	19 f0       	breq	.+6      	; 0x36ee <__divsf3+0x18>
    36e8:	cc c0       	rjmp	.+408    	; 0x3882 <__fp_inf>
    36ea:	51 11       	cpse	r21, r1
    36ec:	15 c1       	rjmp	.+554    	; 0x3918 <__fp_szero>
    36ee:	cf c0       	rjmp	.+414    	; 0x388e <__fp_nan>

000036f0 <__divsf3x>:
    36f0:	f0 d0       	rcall	.+480    	; 0x38d2 <__fp_split3>
    36f2:	98 f3       	brcs	.-26     	; 0x36da <__divsf3+0x4>

000036f4 <__divsf3_pse>:
    36f4:	99 23       	and	r25, r25
    36f6:	c9 f3       	breq	.-14     	; 0x36ea <__divsf3+0x14>
    36f8:	55 23       	and	r21, r21
    36fa:	b1 f3       	breq	.-20     	; 0x36e8 <__divsf3+0x12>
    36fc:	95 1b       	sub	r25, r21
    36fe:	55 0b       	sbc	r21, r21
    3700:	bb 27       	eor	r27, r27
    3702:	aa 27       	eor	r26, r26
    3704:	62 17       	cp	r22, r18
    3706:	73 07       	cpc	r23, r19
    3708:	84 07       	cpc	r24, r20
    370a:	38 f0       	brcs	.+14     	; 0x371a <__divsf3_pse+0x26>
    370c:	9f 5f       	subi	r25, 0xFF	; 255
    370e:	5f 4f       	sbci	r21, 0xFF	; 255
    3710:	22 0f       	add	r18, r18
    3712:	33 1f       	adc	r19, r19
    3714:	44 1f       	adc	r20, r20
    3716:	aa 1f       	adc	r26, r26
    3718:	a9 f3       	breq	.-22     	; 0x3704 <__divsf3_pse+0x10>
    371a:	33 d0       	rcall	.+102    	; 0x3782 <__divsf3_pse+0x8e>
    371c:	0e 2e       	mov	r0, r30
    371e:	3a f0       	brmi	.+14     	; 0x372e <__divsf3_pse+0x3a>
    3720:	e0 e8       	ldi	r30, 0x80	; 128
    3722:	30 d0       	rcall	.+96     	; 0x3784 <__divsf3_pse+0x90>
    3724:	91 50       	subi	r25, 0x01	; 1
    3726:	50 40       	sbci	r21, 0x00	; 0
    3728:	e6 95       	lsr	r30
    372a:	00 1c       	adc	r0, r0
    372c:	ca f7       	brpl	.-14     	; 0x3720 <__divsf3_pse+0x2c>
    372e:	29 d0       	rcall	.+82     	; 0x3782 <__divsf3_pse+0x8e>
    3730:	fe 2f       	mov	r31, r30
    3732:	27 d0       	rcall	.+78     	; 0x3782 <__divsf3_pse+0x8e>
    3734:	66 0f       	add	r22, r22
    3736:	77 1f       	adc	r23, r23
    3738:	88 1f       	adc	r24, r24
    373a:	bb 1f       	adc	r27, r27
    373c:	26 17       	cp	r18, r22
    373e:	37 07       	cpc	r19, r23
    3740:	48 07       	cpc	r20, r24
    3742:	ab 07       	cpc	r26, r27
    3744:	b0 e8       	ldi	r27, 0x80	; 128
    3746:	09 f0       	breq	.+2      	; 0x374a <__divsf3_pse+0x56>
    3748:	bb 0b       	sbc	r27, r27
    374a:	80 2d       	mov	r24, r0
    374c:	bf 01       	movw	r22, r30
    374e:	ff 27       	eor	r31, r31
    3750:	93 58       	subi	r25, 0x83	; 131
    3752:	5f 4f       	sbci	r21, 0xFF	; 255
    3754:	2a f0       	brmi	.+10     	; 0x3760 <__divsf3_pse+0x6c>
    3756:	9e 3f       	cpi	r25, 0xFE	; 254
    3758:	51 05       	cpc	r21, r1
    375a:	68 f0       	brcs	.+26     	; 0x3776 <__divsf3_pse+0x82>
    375c:	92 c0       	rjmp	.+292    	; 0x3882 <__fp_inf>
    375e:	dc c0       	rjmp	.+440    	; 0x3918 <__fp_szero>
    3760:	5f 3f       	cpi	r21, 0xFF	; 255
    3762:	ec f3       	brlt	.-6      	; 0x375e <__divsf3_pse+0x6a>
    3764:	98 3e       	cpi	r25, 0xE8	; 232
    3766:	dc f3       	brlt	.-10     	; 0x375e <__divsf3_pse+0x6a>
    3768:	86 95       	lsr	r24
    376a:	77 95       	ror	r23
    376c:	67 95       	ror	r22
    376e:	b7 95       	ror	r27
    3770:	f7 95       	ror	r31
    3772:	9f 5f       	subi	r25, 0xFF	; 255
    3774:	c9 f7       	brne	.-14     	; 0x3768 <__divsf3_pse+0x74>
    3776:	88 0f       	add	r24, r24
    3778:	91 1d       	adc	r25, r1
    377a:	96 95       	lsr	r25
    377c:	87 95       	ror	r24
    377e:	97 f9       	bld	r25, 7
    3780:	08 95       	ret
    3782:	e1 e0       	ldi	r30, 0x01	; 1
    3784:	66 0f       	add	r22, r22
    3786:	77 1f       	adc	r23, r23
    3788:	88 1f       	adc	r24, r24
    378a:	bb 1f       	adc	r27, r27
    378c:	62 17       	cp	r22, r18
    378e:	73 07       	cpc	r23, r19
    3790:	84 07       	cpc	r24, r20
    3792:	ba 07       	cpc	r27, r26
    3794:	20 f0       	brcs	.+8      	; 0x379e <__divsf3_pse+0xaa>
    3796:	62 1b       	sub	r22, r18
    3798:	73 0b       	sbc	r23, r19
    379a:	84 0b       	sbc	r24, r20
    379c:	ba 0b       	sbc	r27, r26
    379e:	ee 1f       	adc	r30, r30
    37a0:	88 f7       	brcc	.-30     	; 0x3784 <__divsf3_pse+0x90>
    37a2:	e0 95       	com	r30
    37a4:	08 95       	ret

000037a6 <__fixsfsi>:
    37a6:	04 d0       	rcall	.+8      	; 0x37b0 <__fixunssfsi>
    37a8:	68 94       	set
    37aa:	b1 11       	cpse	r27, r1
    37ac:	b5 c0       	rjmp	.+362    	; 0x3918 <__fp_szero>
    37ae:	08 95       	ret

000037b0 <__fixunssfsi>:
    37b0:	98 d0       	rcall	.+304    	; 0x38e2 <__fp_splitA>
    37b2:	88 f0       	brcs	.+34     	; 0x37d6 <__fixunssfsi+0x26>
    37b4:	9f 57       	subi	r25, 0x7F	; 127
    37b6:	90 f0       	brcs	.+36     	; 0x37dc <__fixunssfsi+0x2c>
    37b8:	b9 2f       	mov	r27, r25
    37ba:	99 27       	eor	r25, r25
    37bc:	b7 51       	subi	r27, 0x17	; 23
    37be:	a0 f0       	brcs	.+40     	; 0x37e8 <__fixunssfsi+0x38>
    37c0:	d1 f0       	breq	.+52     	; 0x37f6 <__fixunssfsi+0x46>
    37c2:	66 0f       	add	r22, r22
    37c4:	77 1f       	adc	r23, r23
    37c6:	88 1f       	adc	r24, r24
    37c8:	99 1f       	adc	r25, r25
    37ca:	1a f0       	brmi	.+6      	; 0x37d2 <__fixunssfsi+0x22>
    37cc:	ba 95       	dec	r27
    37ce:	c9 f7       	brne	.-14     	; 0x37c2 <__fixunssfsi+0x12>
    37d0:	12 c0       	rjmp	.+36     	; 0x37f6 <__fixunssfsi+0x46>
    37d2:	b1 30       	cpi	r27, 0x01	; 1
    37d4:	81 f0       	breq	.+32     	; 0x37f6 <__fixunssfsi+0x46>
    37d6:	9f d0       	rcall	.+318    	; 0x3916 <__fp_zero>
    37d8:	b1 e0       	ldi	r27, 0x01	; 1
    37da:	08 95       	ret
    37dc:	9c c0       	rjmp	.+312    	; 0x3916 <__fp_zero>
    37de:	67 2f       	mov	r22, r23
    37e0:	78 2f       	mov	r23, r24
    37e2:	88 27       	eor	r24, r24
    37e4:	b8 5f       	subi	r27, 0xF8	; 248
    37e6:	39 f0       	breq	.+14     	; 0x37f6 <__fixunssfsi+0x46>
    37e8:	b9 3f       	cpi	r27, 0xF9	; 249
    37ea:	cc f3       	brlt	.-14     	; 0x37de <__fixunssfsi+0x2e>
    37ec:	86 95       	lsr	r24
    37ee:	77 95       	ror	r23
    37f0:	67 95       	ror	r22
    37f2:	b3 95       	inc	r27
    37f4:	d9 f7       	brne	.-10     	; 0x37ec <__fixunssfsi+0x3c>
    37f6:	3e f4       	brtc	.+14     	; 0x3806 <__fixunssfsi+0x56>
    37f8:	90 95       	com	r25
    37fa:	80 95       	com	r24
    37fc:	70 95       	com	r23
    37fe:	61 95       	neg	r22
    3800:	7f 4f       	sbci	r23, 0xFF	; 255
    3802:	8f 4f       	sbci	r24, 0xFF	; 255
    3804:	9f 4f       	sbci	r25, 0xFF	; 255
    3806:	08 95       	ret

00003808 <__floatunsisf>:
    3808:	e8 94       	clt
    380a:	09 c0       	rjmp	.+18     	; 0x381e <__floatsisf+0x12>

0000380c <__floatsisf>:
    380c:	97 fb       	bst	r25, 7
    380e:	3e f4       	brtc	.+14     	; 0x381e <__floatsisf+0x12>
    3810:	90 95       	com	r25
    3812:	80 95       	com	r24
    3814:	70 95       	com	r23
    3816:	61 95       	neg	r22
    3818:	7f 4f       	sbci	r23, 0xFF	; 255
    381a:	8f 4f       	sbci	r24, 0xFF	; 255
    381c:	9f 4f       	sbci	r25, 0xFF	; 255
    381e:	99 23       	and	r25, r25
    3820:	a9 f0       	breq	.+42     	; 0x384c <__floatsisf+0x40>
    3822:	f9 2f       	mov	r31, r25
    3824:	96 e9       	ldi	r25, 0x96	; 150
    3826:	bb 27       	eor	r27, r27
    3828:	93 95       	inc	r25
    382a:	f6 95       	lsr	r31
    382c:	87 95       	ror	r24
    382e:	77 95       	ror	r23
    3830:	67 95       	ror	r22
    3832:	b7 95       	ror	r27
    3834:	f1 11       	cpse	r31, r1
    3836:	f8 cf       	rjmp	.-16     	; 0x3828 <__floatsisf+0x1c>
    3838:	fa f4       	brpl	.+62     	; 0x3878 <__floatsisf+0x6c>
    383a:	bb 0f       	add	r27, r27
    383c:	11 f4       	brne	.+4      	; 0x3842 <__floatsisf+0x36>
    383e:	60 ff       	sbrs	r22, 0
    3840:	1b c0       	rjmp	.+54     	; 0x3878 <__floatsisf+0x6c>
    3842:	6f 5f       	subi	r22, 0xFF	; 255
    3844:	7f 4f       	sbci	r23, 0xFF	; 255
    3846:	8f 4f       	sbci	r24, 0xFF	; 255
    3848:	9f 4f       	sbci	r25, 0xFF	; 255
    384a:	16 c0       	rjmp	.+44     	; 0x3878 <__floatsisf+0x6c>
    384c:	88 23       	and	r24, r24
    384e:	11 f0       	breq	.+4      	; 0x3854 <__floatsisf+0x48>
    3850:	96 e9       	ldi	r25, 0x96	; 150
    3852:	11 c0       	rjmp	.+34     	; 0x3876 <__floatsisf+0x6a>
    3854:	77 23       	and	r23, r23
    3856:	21 f0       	breq	.+8      	; 0x3860 <__floatsisf+0x54>
    3858:	9e e8       	ldi	r25, 0x8E	; 142
    385a:	87 2f       	mov	r24, r23
    385c:	76 2f       	mov	r23, r22
    385e:	05 c0       	rjmp	.+10     	; 0x386a <__floatsisf+0x5e>
    3860:	66 23       	and	r22, r22
    3862:	71 f0       	breq	.+28     	; 0x3880 <__floatsisf+0x74>
    3864:	96 e8       	ldi	r25, 0x86	; 134
    3866:	86 2f       	mov	r24, r22
    3868:	70 e0       	ldi	r23, 0x00	; 0
    386a:	60 e0       	ldi	r22, 0x00	; 0
    386c:	2a f0       	brmi	.+10     	; 0x3878 <__floatsisf+0x6c>
    386e:	9a 95       	dec	r25
    3870:	66 0f       	add	r22, r22
    3872:	77 1f       	adc	r23, r23
    3874:	88 1f       	adc	r24, r24
    3876:	da f7       	brpl	.-10     	; 0x386e <__floatsisf+0x62>
    3878:	88 0f       	add	r24, r24
    387a:	96 95       	lsr	r25
    387c:	87 95       	ror	r24
    387e:	97 f9       	bld	r25, 7
    3880:	08 95       	ret

00003882 <__fp_inf>:
    3882:	97 f9       	bld	r25, 7
    3884:	9f 67       	ori	r25, 0x7F	; 127
    3886:	80 e8       	ldi	r24, 0x80	; 128
    3888:	70 e0       	ldi	r23, 0x00	; 0
    388a:	60 e0       	ldi	r22, 0x00	; 0
    388c:	08 95       	ret

0000388e <__fp_nan>:
    388e:	9f ef       	ldi	r25, 0xFF	; 255
    3890:	80 ec       	ldi	r24, 0xC0	; 192
    3892:	08 95       	ret

00003894 <__fp_pscA>:
    3894:	00 24       	eor	r0, r0
    3896:	0a 94       	dec	r0
    3898:	16 16       	cp	r1, r22
    389a:	17 06       	cpc	r1, r23
    389c:	18 06       	cpc	r1, r24
    389e:	09 06       	cpc	r0, r25
    38a0:	08 95       	ret

000038a2 <__fp_pscB>:
    38a2:	00 24       	eor	r0, r0
    38a4:	0a 94       	dec	r0
    38a6:	12 16       	cp	r1, r18
    38a8:	13 06       	cpc	r1, r19
    38aa:	14 06       	cpc	r1, r20
    38ac:	05 06       	cpc	r0, r21
    38ae:	08 95       	ret

000038b0 <__fp_round>:
    38b0:	09 2e       	mov	r0, r25
    38b2:	03 94       	inc	r0
    38b4:	00 0c       	add	r0, r0
    38b6:	11 f4       	brne	.+4      	; 0x38bc <__fp_round+0xc>
    38b8:	88 23       	and	r24, r24
    38ba:	52 f0       	brmi	.+20     	; 0x38d0 <__fp_round+0x20>
    38bc:	bb 0f       	add	r27, r27
    38be:	40 f4       	brcc	.+16     	; 0x38d0 <__fp_round+0x20>
    38c0:	bf 2b       	or	r27, r31
    38c2:	11 f4       	brne	.+4      	; 0x38c8 <__fp_round+0x18>
    38c4:	60 ff       	sbrs	r22, 0
    38c6:	04 c0       	rjmp	.+8      	; 0x38d0 <__fp_round+0x20>
    38c8:	6f 5f       	subi	r22, 0xFF	; 255
    38ca:	7f 4f       	sbci	r23, 0xFF	; 255
    38cc:	8f 4f       	sbci	r24, 0xFF	; 255
    38ce:	9f 4f       	sbci	r25, 0xFF	; 255
    38d0:	08 95       	ret

000038d2 <__fp_split3>:
    38d2:	57 fd       	sbrc	r21, 7
    38d4:	90 58       	subi	r25, 0x80	; 128
    38d6:	44 0f       	add	r20, r20
    38d8:	55 1f       	adc	r21, r21
    38da:	59 f0       	breq	.+22     	; 0x38f2 <__fp_splitA+0x10>
    38dc:	5f 3f       	cpi	r21, 0xFF	; 255
    38de:	71 f0       	breq	.+28     	; 0x38fc <__fp_splitA+0x1a>
    38e0:	47 95       	ror	r20

000038e2 <__fp_splitA>:
    38e2:	88 0f       	add	r24, r24
    38e4:	97 fb       	bst	r25, 7
    38e6:	99 1f       	adc	r25, r25
    38e8:	61 f0       	breq	.+24     	; 0x3902 <__fp_splitA+0x20>
    38ea:	9f 3f       	cpi	r25, 0xFF	; 255
    38ec:	79 f0       	breq	.+30     	; 0x390c <__fp_splitA+0x2a>
    38ee:	87 95       	ror	r24
    38f0:	08 95       	ret
    38f2:	12 16       	cp	r1, r18
    38f4:	13 06       	cpc	r1, r19
    38f6:	14 06       	cpc	r1, r20
    38f8:	55 1f       	adc	r21, r21
    38fa:	f2 cf       	rjmp	.-28     	; 0x38e0 <__fp_split3+0xe>
    38fc:	46 95       	lsr	r20
    38fe:	f1 df       	rcall	.-30     	; 0x38e2 <__fp_splitA>
    3900:	08 c0       	rjmp	.+16     	; 0x3912 <__fp_splitA+0x30>
    3902:	16 16       	cp	r1, r22
    3904:	17 06       	cpc	r1, r23
    3906:	18 06       	cpc	r1, r24
    3908:	99 1f       	adc	r25, r25
    390a:	f1 cf       	rjmp	.-30     	; 0x38ee <__fp_splitA+0xc>
    390c:	86 95       	lsr	r24
    390e:	71 05       	cpc	r23, r1
    3910:	61 05       	cpc	r22, r1
    3912:	08 94       	sec
    3914:	08 95       	ret

00003916 <__fp_zero>:
    3916:	e8 94       	clt

00003918 <__fp_szero>:
    3918:	bb 27       	eor	r27, r27
    391a:	66 27       	eor	r22, r22
    391c:	77 27       	eor	r23, r23
    391e:	cb 01       	movw	r24, r22
    3920:	97 f9       	bld	r25, 7
    3922:	08 95       	ret

00003924 <__divmodhi4>:
    3924:	97 fb       	bst	r25, 7
    3926:	07 2e       	mov	r0, r23
    3928:	16 f4       	brtc	.+4      	; 0x392e <__divmodhi4+0xa>
    392a:	00 94       	com	r0
    392c:	06 d0       	rcall	.+12     	; 0x393a <__divmodhi4_neg1>
    392e:	77 fd       	sbrc	r23, 7
    3930:	08 d0       	rcall	.+16     	; 0x3942 <__divmodhi4_neg2>
    3932:	3e d0       	rcall	.+124    	; 0x39b0 <__udivmodhi4>
    3934:	07 fc       	sbrc	r0, 7
    3936:	05 d0       	rcall	.+10     	; 0x3942 <__divmodhi4_neg2>
    3938:	3e f4       	brtc	.+14     	; 0x3948 <__divmodhi4_exit>

0000393a <__divmodhi4_neg1>:
    393a:	90 95       	com	r25
    393c:	81 95       	neg	r24
    393e:	9f 4f       	sbci	r25, 0xFF	; 255
    3940:	08 95       	ret

00003942 <__divmodhi4_neg2>:
    3942:	70 95       	com	r23
    3944:	61 95       	neg	r22
    3946:	7f 4f       	sbci	r23, 0xFF	; 255

00003948 <__divmodhi4_exit>:
    3948:	08 95       	ret

0000394a <__divmodsi4>:
    394a:	05 2e       	mov	r0, r21
    394c:	97 fb       	bst	r25, 7
    394e:	16 f4       	brtc	.+4      	; 0x3954 <__divmodsi4+0xa>
    3950:	00 94       	com	r0
    3952:	0f d0       	rcall	.+30     	; 0x3972 <__negsi2>
    3954:	57 fd       	sbrc	r21, 7
    3956:	05 d0       	rcall	.+10     	; 0x3962 <__divmodsi4_neg2>
    3958:	3f d0       	rcall	.+126    	; 0x39d8 <__udivmodsi4>
    395a:	07 fc       	sbrc	r0, 7
    395c:	02 d0       	rcall	.+4      	; 0x3962 <__divmodsi4_neg2>
    395e:	46 f4       	brtc	.+16     	; 0x3970 <__divmodsi4_exit>
    3960:	08 c0       	rjmp	.+16     	; 0x3972 <__negsi2>

00003962 <__divmodsi4_neg2>:
    3962:	50 95       	com	r21
    3964:	40 95       	com	r20
    3966:	30 95       	com	r19
    3968:	21 95       	neg	r18
    396a:	3f 4f       	sbci	r19, 0xFF	; 255
    396c:	4f 4f       	sbci	r20, 0xFF	; 255
    396e:	5f 4f       	sbci	r21, 0xFF	; 255

00003970 <__divmodsi4_exit>:
    3970:	08 95       	ret

00003972 <__negsi2>:
    3972:	90 95       	com	r25
    3974:	80 95       	com	r24
    3976:	70 95       	com	r23
    3978:	61 95       	neg	r22
    397a:	7f 4f       	sbci	r23, 0xFF	; 255
    397c:	8f 4f       	sbci	r24, 0xFF	; 255
    397e:	9f 4f       	sbci	r25, 0xFF	; 255
    3980:	08 95       	ret

00003982 <__tablejump2__>:
    3982:	ee 0f       	add	r30, r30
    3984:	ff 1f       	adc	r31, r31
    3986:	88 1f       	adc	r24, r24
    3988:	8b bf       	out	0x3b, r24	; 59
    398a:	07 90       	elpm	r0, Z+
    398c:	f6 91       	elpm	r31, Z
    398e:	e0 2d       	mov	r30, r0
    3990:	19 94       	eijmp

00003992 <__umulhisi3>:
    3992:	a2 9f       	mul	r26, r18
    3994:	b0 01       	movw	r22, r0
    3996:	b3 9f       	mul	r27, r19
    3998:	c0 01       	movw	r24, r0
    399a:	a3 9f       	mul	r26, r19
    399c:	70 0d       	add	r23, r0
    399e:	81 1d       	adc	r24, r1
    39a0:	11 24       	eor	r1, r1
    39a2:	91 1d       	adc	r25, r1
    39a4:	b2 9f       	mul	r27, r18
    39a6:	70 0d       	add	r23, r0
    39a8:	81 1d       	adc	r24, r1
    39aa:	11 24       	eor	r1, r1
    39ac:	91 1d       	adc	r25, r1
    39ae:	08 95       	ret

000039b0 <__udivmodhi4>:
    39b0:	aa 1b       	sub	r26, r26
    39b2:	bb 1b       	sub	r27, r27
    39b4:	51 e1       	ldi	r21, 0x11	; 17
    39b6:	07 c0       	rjmp	.+14     	; 0x39c6 <__udivmodhi4_ep>

000039b8 <__udivmodhi4_loop>:
    39b8:	aa 1f       	adc	r26, r26
    39ba:	bb 1f       	adc	r27, r27
    39bc:	a6 17       	cp	r26, r22
    39be:	b7 07       	cpc	r27, r23
    39c0:	10 f0       	brcs	.+4      	; 0x39c6 <__udivmodhi4_ep>
    39c2:	a6 1b       	sub	r26, r22
    39c4:	b7 0b       	sbc	r27, r23

000039c6 <__udivmodhi4_ep>:
    39c6:	88 1f       	adc	r24, r24
    39c8:	99 1f       	adc	r25, r25
    39ca:	5a 95       	dec	r21
    39cc:	a9 f7       	brne	.-22     	; 0x39b8 <__udivmodhi4_loop>
    39ce:	80 95       	com	r24
    39d0:	90 95       	com	r25
    39d2:	bc 01       	movw	r22, r24
    39d4:	cd 01       	movw	r24, r26
    39d6:	08 95       	ret

000039d8 <__udivmodsi4>:
    39d8:	a1 e2       	ldi	r26, 0x21	; 33
    39da:	1a 2e       	mov	r1, r26
    39dc:	aa 1b       	sub	r26, r26
    39de:	bb 1b       	sub	r27, r27
    39e0:	fd 01       	movw	r30, r26
    39e2:	0d c0       	rjmp	.+26     	; 0x39fe <__udivmodsi4_ep>

000039e4 <__udivmodsi4_loop>:
    39e4:	aa 1f       	adc	r26, r26
    39e6:	bb 1f       	adc	r27, r27
    39e8:	ee 1f       	adc	r30, r30
    39ea:	ff 1f       	adc	r31, r31
    39ec:	a2 17       	cp	r26, r18
    39ee:	b3 07       	cpc	r27, r19
    39f0:	e4 07       	cpc	r30, r20
    39f2:	f5 07       	cpc	r31, r21
    39f4:	20 f0       	brcs	.+8      	; 0x39fe <__udivmodsi4_ep>
    39f6:	a2 1b       	sub	r26, r18
    39f8:	b3 0b       	sbc	r27, r19
    39fa:	e4 0b       	sbc	r30, r20
    39fc:	f5 0b       	sbc	r31, r21

000039fe <__udivmodsi4_ep>:
    39fe:	66 1f       	adc	r22, r22
    3a00:	77 1f       	adc	r23, r23
    3a02:	88 1f       	adc	r24, r24
    3a04:	99 1f       	adc	r25, r25
    3a06:	1a 94       	dec	r1
    3a08:	69 f7       	brne	.-38     	; 0x39e4 <__udivmodsi4_loop>
    3a0a:	60 95       	com	r22
    3a0c:	70 95       	com	r23
    3a0e:	80 95       	com	r24
    3a10:	90 95       	com	r25
    3a12:	9b 01       	movw	r18, r22
    3a14:	ac 01       	movw	r20, r24
    3a16:	bd 01       	movw	r22, r26
    3a18:	cf 01       	movw	r24, r30
    3a1a:	08 95       	ret

00003a1c <eeprom_read_block>:
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22

00003a20 <eeprom_read_blraw>:
    3a20:	fc 01       	movw	r30, r24
    3a22:	f9 99       	sbic	0x1f, 1	; 31
    3a24:	fe cf       	rjmp	.-4      	; 0x3a22 <eeprom_read_blraw+0x2>
    3a26:	06 c0       	rjmp	.+12     	; 0x3a34 <eeprom_read_blraw+0x14>
    3a28:	f2 bd       	out	0x22, r31	; 34
    3a2a:	e1 bd       	out	0x21, r30	; 33
    3a2c:	f8 9a       	sbi	0x1f, 0	; 31
    3a2e:	31 96       	adiw	r30, 0x01	; 1
    3a30:	00 b4       	in	r0, 0x20	; 32
    3a32:	0d 92       	st	X+, r0
    3a34:	41 50       	subi	r20, 0x01	; 1
    3a36:	50 40       	sbci	r21, 0x00	; 0
    3a38:	b8 f7       	brcc	.-18     	; 0x3a28 <eeprom_read_blraw+0x8>
    3a3a:	08 95       	ret

00003a3c <eeprom_read_byte>:
    3a3c:	f9 99       	sbic	0x1f, 1	; 31
    3a3e:	fe cf       	rjmp	.-4      	; 0x3a3c <eeprom_read_byte>
    3a40:	92 bd       	out	0x22, r25	; 34
    3a42:	81 bd       	out	0x21, r24	; 33
    3a44:	f8 9a       	sbi	0x1f, 0	; 31
    3a46:	99 27       	eor	r25, r25
    3a48:	80 b5       	in	r24, 0x20	; 32
    3a4a:	08 95       	ret

00003a4c <eeprom_write_block>:
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	02 c0       	rjmp	.+4      	; 0x3a56 <eeprom_write_block+0xa>
    3a52:	2d 91       	ld	r18, X+
    3a54:	05 d0       	rcall	.+10     	; 0x3a60 <eeprom_write_r18>
    3a56:	41 50       	subi	r20, 0x01	; 1
    3a58:	50 40       	sbci	r21, 0x00	; 0
    3a5a:	d8 f7       	brcc	.-10     	; 0x3a52 <eeprom_write_block+0x6>
    3a5c:	08 95       	ret

00003a5e <eeprom_write_byte>:
    3a5e:	26 2f       	mov	r18, r22

00003a60 <eeprom_write_r18>:
    3a60:	f9 99       	sbic	0x1f, 1	; 31
    3a62:	fe cf       	rjmp	.-4      	; 0x3a60 <eeprom_write_r18>
    3a64:	1f ba       	out	0x1f, r1	; 31
    3a66:	92 bd       	out	0x22, r25	; 34
    3a68:	81 bd       	out	0x21, r24	; 33
    3a6a:	20 bd       	out	0x20, r18	; 32
    3a6c:	0f b6       	in	r0, 0x3f	; 63
    3a6e:	f8 94       	cli
    3a70:	fa 9a       	sbi	0x1f, 2	; 31
    3a72:	f9 9a       	sbi	0x1f, 1	; 31
    3a74:	0f be       	out	0x3f, r0	; 63
    3a76:	01 96       	adiw	r24, 0x01	; 1
    3a78:	08 95       	ret

00003a7a <_exit>:
    3a7a:	f8 94       	cli

00003a7c <__stop_program>:
    3a7c:	ff cf       	rjmp	.-2      	; 0x3a7c <__stop_program>
