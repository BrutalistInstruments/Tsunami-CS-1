
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e6  00800200  0000403c  000040d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000403c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000422  008003e6  008003e6  000042b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000042b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000042e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000450  00000000  00000000  00004328  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007f0e  00000000  00000000  00004778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002154  00000000  00000000  0000c686  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037cd  00000000  00000000  0000e7da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c38  00000000  00000000  00011fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015ba  00000000  00000000  00012be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000543d  00000000  00000000  0001419a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  000195d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
       2:	00 00       	nop
       4:	12 c1       	rjmp	.+548    	; 0x22a <__bad_interrupt>
       6:	00 00       	nop
       8:	10 c1       	rjmp	.+544    	; 0x22a <__bad_interrupt>
       a:	00 00       	nop
       c:	1f c2       	rjmp	.+1086   	; 0x44c <__vector_3>
       e:	00 00       	nop
      10:	3d c2       	rjmp	.+1146   	; 0x48c <__vector_4>
      12:	00 00       	nop
      14:	5b c2       	rjmp	.+1206   	; 0x4cc <__vector_5>
      16:	00 00       	nop
      18:	79 c2       	rjmp	.+1266   	; 0x50c <__vector_6>
      1a:	00 00       	nop
      1c:	06 c1       	rjmp	.+524    	; 0x22a <__bad_interrupt>
      1e:	00 00       	nop
      20:	04 c1       	rjmp	.+520    	; 0x22a <__bad_interrupt>
      22:	00 00       	nop
      24:	02 c1       	rjmp	.+516    	; 0x22a <__bad_interrupt>
      26:	00 00       	nop
      28:	00 c1       	rjmp	.+512    	; 0x22a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fe c0       	rjmp	.+508    	; 0x22a <__bad_interrupt>
      2e:	00 00       	nop
      30:	fc c0       	rjmp	.+504    	; 0x22a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__vector_13>
      38:	f8 c0       	rjmp	.+496    	; 0x22a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__bad_interrupt>
      3e:	00 00       	nop
      40:	f4 c0       	rjmp	.+488    	; 0x22a <__bad_interrupt>
      42:	00 00       	nop
      44:	f2 c0       	rjmp	.+484    	; 0x22a <__bad_interrupt>
      46:	00 00       	nop
      48:	f0 c0       	rjmp	.+480    	; 0x22a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ee c0       	rjmp	.+476    	; 0x22a <__bad_interrupt>
      4e:	00 00       	nop
      50:	ec c0       	rjmp	.+472    	; 0x22a <__bad_interrupt>
      52:	00 00       	nop
      54:	ea c0       	rjmp	.+468    	; 0x22a <__bad_interrupt>
      56:	00 00       	nop
      58:	e8 c0       	rjmp	.+464    	; 0x22a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e6 c0       	rjmp	.+460    	; 0x22a <__bad_interrupt>
      5e:	00 00       	nop
      60:	e4 c0       	rjmp	.+456    	; 0x22a <__bad_interrupt>
      62:	00 00       	nop
      64:	e2 c0       	rjmp	.+452    	; 0x22a <__bad_interrupt>
      66:	00 00       	nop
      68:	e0 c0       	rjmp	.+448    	; 0x22a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__vector_27>
      70:	dc c0       	rjmp	.+440    	; 0x22a <__bad_interrupt>
      72:	00 00       	nop
      74:	da c0       	rjmp	.+436    	; 0x22a <__bad_interrupt>
      76:	00 00       	nop
      78:	d8 c0       	rjmp	.+432    	; 0x22a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d6 c0       	rjmp	.+428    	; 0x22a <__bad_interrupt>
      7e:	00 00       	nop
      80:	d4 c0       	rjmp	.+424    	; 0x22a <__bad_interrupt>
      82:	00 00       	nop
      84:	d2 c0       	rjmp	.+420    	; 0x22a <__bad_interrupt>
      86:	00 00       	nop
      88:	d0 c0       	rjmp	.+416    	; 0x22a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ce c0       	rjmp	.+412    	; 0x22a <__bad_interrupt>
      8e:	00 00       	nop
      90:	cc c0       	rjmp	.+408    	; 0x22a <__bad_interrupt>
      92:	00 00       	nop
      94:	ca c0       	rjmp	.+404    	; 0x22a <__bad_interrupt>
      96:	00 00       	nop
      98:	c8 c0       	rjmp	.+400    	; 0x22a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c6 c0       	rjmp	.+396    	; 0x22a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c4 c0       	rjmp	.+392    	; 0x22a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c2 c0       	rjmp	.+388    	; 0x22a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c0 c0       	rjmp	.+384    	; 0x22a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	be c0       	rjmp	.+380    	; 0x22a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bc c0       	rjmp	.+376    	; 0x22a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ba c0       	rjmp	.+372    	; 0x22a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b8 c0       	rjmp	.+368    	; 0x22a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b6 c0       	rjmp	.+364    	; 0x22a <__bad_interrupt>
      be:	00 00       	nop
      c0:	b4 c0       	rjmp	.+360    	; 0x22a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b2 c0       	rjmp	.+356    	; 0x22a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b0 c0       	rjmp	.+352    	; 0x22a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ae c0       	rjmp	.+348    	; 0x22a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ac c0       	rjmp	.+344    	; 0x22a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	aa c0       	rjmp	.+340    	; 0x22a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_54>
      dc:	a6 c0       	rjmp	.+332    	; 0x22a <__bad_interrupt>
      de:	00 00       	nop
      e0:	a4 c0       	rjmp	.+328    	; 0x22a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	dd 02       	muls	r29, r29
      e6:	c7 04       	cpc	r12, r7
      e8:	c7 04       	cpc	r12, r7
      ea:	c7 04       	cpc	r12, r7
      ec:	c7 04       	cpc	r12, r7
      ee:	c7 04       	cpc	r12, r7
      f0:	c7 04       	cpc	r12, r7
      f2:	c7 04       	cpc	r12, r7
      f4:	c7 04       	cpc	r12, r7
      f6:	c7 04       	cpc	r12, r7
      f8:	c7 04       	cpc	r12, r7
      fa:	c7 04       	cpc	r12, r7
      fc:	c7 04       	cpc	r12, r7
      fe:	c7 04       	cpc	r12, r7
     100:	c7 04       	cpc	r12, r7
     102:	c7 04       	cpc	r12, r7
     104:	c7 04       	cpc	r12, r7
     106:	f4 02       	muls	r31, r20
     108:	11 03       	mulsu	r17, r17
     10a:	38 03       	fmul	r19, r16
     10c:	c7 04       	cpc	r12, r7
     10e:	c7 04       	cpc	r12, r7
     110:	c7 04       	cpc	r12, r7
     112:	c7 04       	cpc	r12, r7
     114:	c7 04       	cpc	r12, r7
     116:	fc 02       	muls	r31, r28
     118:	19 03       	fmul	r17, r17
     11a:	40 03       	mulsu	r20, r16
     11c:	c7 04       	cpc	r12, r7
     11e:	c7 04       	cpc	r12, r7
     120:	c7 04       	cpc	r12, r7
     122:	c7 04       	cpc	r12, r7
     124:	c7 04       	cpc	r12, r7
     126:	5b 03       	fmul	r21, r19
     128:	90 03       	fmuls	r17, r16
     12a:	a4 03       	fmuls	r18, r20
     12c:	d9 03       	fmulsu	r21, r17
     12e:	45 04       	cpc	r4, r5
     130:	c7 04       	cpc	r12, r7
     132:	c7 04       	cpc	r12, r7
     134:	c7 04       	cpc	r12, r7
     136:	63 03       	mulsu	r22, r19
     138:	98 03       	fmulsu	r17, r16
     13a:	ac 03       	fmulsu	r18, r20
     13c:	e1 03       	fmuls	r22, r17
     13e:	4d 04       	cpc	r4, r13
     140:	c7 04       	cpc	r12, r7
     142:	c7 04       	cpc	r12, r7
     144:	c7 04       	cpc	r12, r7
     146:	87 04       	cpc	r8, r7
     148:	a1 04       	cpc	r10, r1
     14a:	c0 04       	cpc	r12, r0
     14c:	c7 04       	cpc	r12, r7
     14e:	c7 04       	cpc	r12, r7
     150:	c7 04       	cpc	r12, r7
     152:	c7 04       	cpc	r12, r7
     154:	c7 04       	cpc	r12, r7
     156:	8f 04       	cpc	r8, r15
     158:	a9 04       	cpc	r10, r9
     15a:	a0 0c       	add	r10, r0
     15c:	69 0f       	add	r22, r25
     15e:	69 0f       	add	r22, r25
     160:	69 0f       	add	r22, r25
     162:	69 0f       	add	r22, r25
     164:	69 0f       	add	r22, r25
     166:	69 0f       	add	r22, r25
     168:	69 0f       	add	r22, r25
     16a:	69 0f       	add	r22, r25
     16c:	69 0f       	add	r22, r25
     16e:	69 0f       	add	r22, r25
     170:	69 0f       	add	r22, r25
     172:	69 0f       	add	r22, r25
     174:	69 0f       	add	r22, r25
     176:	69 0f       	add	r22, r25
     178:	69 0f       	add	r22, r25
     17a:	b6 0c       	add	r11, r6
     17c:	d0 0c       	add	r13, r0
     17e:	f6 0c       	add	r15, r6
     180:	25 0d       	add	r18, r5
     182:	69 0f       	add	r22, r25
     184:	69 0f       	add	r22, r25
     186:	69 0f       	add	r22, r25
     188:	69 0f       	add	r22, r25
     18a:	69 0f       	add	r22, r25
     18c:	ed 0c       	add	r14, r13
     18e:	13 0d       	add	r17, r3
     190:	42 0d       	add	r20, r2
     192:	69 0f       	add	r22, r25
     194:	69 0f       	add	r22, r25
     196:	69 0f       	add	r22, r25
     198:	69 0f       	add	r22, r25
     19a:	53 0d       	add	r21, r3
     19c:	6d 0d       	add	r22, r13
     19e:	a6 0d       	add	r26, r6
     1a0:	f2 0d       	add	r31, r2
     1a2:	25 0e       	add	r2, r21
     1a4:	8f 0e       	add	r8, r31
     1a6:	69 0f       	add	r22, r25
     1a8:	69 0f       	add	r22, r25
     1aa:	69 0f       	add	r22, r25
     1ac:	8a 0d       	add	r24, r10
     1ae:	c3 0d       	add	r28, r3
     1b0:	0f 0e       	add	r0, r31
     1b2:	42 0e       	add	r4, r18
     1b4:	ac 0e       	add	r10, r28
     1b6:	69 0f       	add	r22, r25
     1b8:	69 0f       	add	r22, r25
     1ba:	d5 0e       	add	r13, r21
     1bc:	ef 0e       	add	r14, r31
     1be:	1e 0f       	add	r17, r30
     1c0:	4d 0f       	add	r20, r29
     1c2:	69 0f       	add	r22, r25
     1c4:	69 0f       	add	r22, r25
     1c6:	69 0f       	add	r22, r25
     1c8:	69 0f       	add	r22, r25
     1ca:	69 0f       	add	r22, r25
     1cc:	0c 0f       	add	r16, r28
     1ce:	3b 0f       	add	r19, r27
     1d0:	91 15       	cp	r25, r1
     1d2:	94 15       	cp	r25, r4
     1d4:	97 15       	cp	r25, r7
     1d6:	9a 15       	cp	r25, r10
     1d8:	9d 15       	cp	r25, r13
     1da:	a0 15       	cp	r26, r0
     1dc:	a3 15       	cp	r26, r3
     1de:	a6 15       	cp	r26, r6
     1e0:	a9 15       	cp	r26, r9
     1e2:	ac 15       	cp	r26, r12
     1e4:	af 15       	cp	r26, r15
     1e6:	b2 15       	cp	r27, r2

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d1 e2       	ldi	r29, 0x21	; 33
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	13 e0       	ldi	r17, 0x03	; 3
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b2 e0       	ldi	r27, 0x02	; 2
     1fe:	ec e3       	ldi	r30, 0x3C	; 60
     200:	f0 e4       	ldi	r31, 0x40	; 64
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a6 3e       	cpi	r26, 0xE6	; 230
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	28 e0       	ldi	r18, 0x08	; 8
     214:	a6 ee       	ldi	r26, 0xE6	; 230
     216:	b3 e0       	ldi	r27, 0x03	; 3
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a8 30       	cpi	r26, 0x08	; 8
     21e:	b2 07       	cpc	r27, r18
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 8c 09 	call	0x1318	; 0x1318 <main>
     226:	0c 94 1c 20 	jmp	0x4038	; 0x4038 <_exit>

0000022a <__bad_interrupt>:
     22a:	ea ce       	rjmp	.-556    	; 0x0 <__vectors>

0000022c <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     22c:	8f ef       	ldi	r24, 0xFF	; 255
     22e:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     230:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons and Encoder buttons
	PORTB = 0B01111111; //lets see if we can read these without debouncing
     234:	8f e7       	ldi	r24, 0x7F	; 127
     236:	85 b9       	out	0x05, r24	; 5
     238:	08 95       	ret

0000023a <listenTrigButtons>:

}

void listenTrigButtons(Pattern *buttonCurrentPattern, Globals *currentGlobals)
{
     23a:	cf 92       	push	r12
     23c:	df 92       	push	r13
     23e:	ef 92       	push	r14
     240:	ff 92       	push	r15
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	6c 01       	movw	r12, r24
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     24a:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     24e:	20 95       	com	r18
     250:	20 93 f9 03 	sts	0x03F9, r18	; 0x8003f9 <buttonsCurrentCycle>
	(currentGlobals->currentTrigButtons) = (buttonsCurrentCycle << 8) | (PINA^255);
     254:	90 b1       	in	r25, 0x00	; 0
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	32 2f       	mov	r19, r18
     25a:	22 27       	eor	r18, r18
     25c:	90 95       	com	r25
     25e:	29 2b       	or	r18, r25
     260:	db 01       	movw	r26, r22
     262:	2d 93       	st	X+, r18
     264:	3c 93       	st	X, r19
	if(currentGlobals->currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     266:	40 91 e6 03 	lds	r20, 0x03E6	; 0x8003e6 <__data_end>
     26a:	50 91 e7 03 	lds	r21, 0x03E7	; 0x8003e7 <__data_end+0x1>
     26e:	24 17       	cp	r18, r20
     270:	35 07       	cpc	r19, r21
     272:	09 f4       	brne	.+2      	; 0x276 <listenTrigButtons+0x3c>
     274:	43 c0       	rjmp	.+134    	; 0x2fc <listenTrigButtons+0xc2>
     276:	7b 01       	movw	r14, r22
	{
		lastFullBits = currentGlobals->currentTrigButtons;
     278:	30 93 e7 03 	sts	0x03E7, r19	; 0x8003e7 <__data_end+0x1>
     27c:	20 93 e6 03 	sts	0x03E6, r18	; 0x8003e6 <__data_end>
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
     280:	fb 01       	movw	r30, r22
     282:	00 81       	ld	r16, Z
     284:	11 81       	ldd	r17, Z+1	; 0x01
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     286:	c0 e0       	ldi	r28, 0x00	; 0
		{
			currentTrig = (fullBitsParse&1);
     288:	90 2f       	mov	r25, r16
     28a:	91 70       	andi	r25, 0x01	; 1
     28c:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <currentTrig>
			if(currentTrig)
     290:	99 23       	and	r25, r25
     292:	79 f1       	breq	.+94     	; 0x2f2 <listenTrigButtons+0xb8>
			{
				uint8_t encoderAstate = currentGlobals->menuState >> 4;
				switch (encoderAstate)
     294:	d7 01       	movw	r26, r14
     296:	1a 96       	adiw	r26, 0x0a	; 10
     298:	9c 91       	ld	r25, X
     29a:	92 95       	swap	r25
     29c:	9f 70       	andi	r25, 0x0F	; 15
     29e:	91 30       	cpi	r25, 0x01	; 1
     2a0:	51 f0       	breq	.+20     	; 0x2b6 <listenTrigButtons+0x7c>
     2a2:	18 f0       	brcs	.+6      	; 0x2aa <listenTrigButtons+0x70>
     2a4:	94 30       	cpi	r25, 0x04	; 4
     2a6:	28 f5       	brcc	.+74     	; 0x2f2 <listenTrigButtons+0xb8>
     2a8:	1a c0       	rjmp	.+52     	; 0x2de <listenTrigButtons+0xa4>
				{
	
					//for "performance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
					case 0: //performance mode
					//we trigger a sound here based on the location of bc
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     2aa:	4c 2f       	mov	r20, r28
     2ac:	b7 01       	movw	r22, r14
     2ae:	c6 01       	movw	r24, r12
     2b0:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <playTrack>
					break;
     2b4:	1e c0       	rjmp	.+60     	; 0x2f2 <listenTrigButtons+0xb8>

					case 1:
					buttonCurrentPattern->trackSequence[currentGlobals->currentStep] ^= currentGlobals->currentTrigButtons;
     2b6:	d7 01       	movw	r26, r14
     2b8:	18 96       	adiw	r26, 0x08	; 8
     2ba:	ec 91       	ld	r30, X
     2bc:	18 97       	sbiw	r26, 0x08	; 8
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	ee 0f       	add	r30, r30
     2c2:	ff 1f       	adc	r31, r31
     2c4:	ec 0d       	add	r30, r12
     2c6:	fd 1d       	adc	r31, r13
     2c8:	e5 50       	subi	r30, 0x05	; 5
     2ca:	ff 4f       	sbci	r31, 0xFF	; 255
     2cc:	20 81       	ld	r18, Z
     2ce:	31 81       	ldd	r19, Z+1	; 0x01
     2d0:	8d 91       	ld	r24, X+
     2d2:	9c 91       	ld	r25, X
     2d4:	82 27       	eor	r24, r18
     2d6:	93 27       	eor	r25, r19
     2d8:	91 83       	std	Z+1, r25	; 0x01
     2da:	80 83       	st	Z, r24
					//turn on step number, or turn off step number.
					//step sequencer mode.
					break;
     2dc:	0a c0       	rjmp	.+20     	; 0x2f2 <listenTrigButtons+0xb8>
					//we want this functionality for both case 2 and case 3
					case 2:
					case 3:;
					//select track for sample assignment
					//uint16_t currentSample = (buttonCurrentPattern->trackSampleMSB[bc]<<8)|(buttonCurrentPattern->trackSampleLSB[bc]);
					currentGlobals->currentTrack = bc;
     2de:	f7 01       	movw	r30, r14
     2e0:	c1 87       	std	Z+9, r28	; 0x09
					currentGlobals->valueChangeFlag |=(1<<triggerChange);
     2e2:	86 85       	ldd	r24, Z+14	; 0x0e
     2e4:	82 60       	ori	r24, 0x02	; 2
     2e6:	86 87       	std	Z+14, r24	; 0x0e
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     2e8:	4c 2f       	mov	r20, r28
     2ea:	b7 01       	movw	r22, r14
     2ec:	c6 01       	movw	r24, r12
     2ee:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <playTrack>
					default:
					//this should be the same as case 0;
					break;
				}
			}
			fullBitsParse = fullBitsParse>>1;
     2f2:	16 95       	lsr	r17
     2f4:	07 95       	ror	r16
	{
		lastFullBits = currentGlobals->currentTrigButtons;
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     2f6:	cf 5f       	subi	r28, 0xFF	; 255
     2f8:	c0 31       	cpi	r28, 0x10	; 16
     2fa:	31 f6       	brne	.-116    	; 0x288 <listenTrigButtons+0x4e>
				}
			}
			fullBitsParse = fullBitsParse>>1;
		}
	}
}
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	ff 90       	pop	r15
     304:	ef 90       	pop	r14
     306:	df 90       	pop	r13
     308:	cf 90       	pop	r12
     30a:	08 95       	ret

0000030c <listenGPButtons>:

void listenGPButtons(Pattern currentPattern, Globals *currentGlobals) //may need to be a pointer
{
     30c:	ff 92       	push	r15
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	cc 57       	subi	r28, 0x7C	; 124
     31c:	de 4f       	sbci	r29, 0xFE	; 254
     31e:	08 81       	ld	r16, Y
     320:	19 81       	ldd	r17, Y+1	; 0x01
     322:	c4 58       	subi	r28, 0x84	; 132
     324:	d1 40       	sbci	r29, 0x01	; 1

	if(button_down(1 << PB5))
     326:	80 e2       	ldi	r24, 0x20	; 32
     328:	77 d0       	rcall	.+238    	; 0x418 <button_down>
     32a:	88 23       	and	r24, r24
     32c:	41 f1       	breq	.+80     	; 0x37e <listenGPButtons+0x72>
	{ //top encoder button
		if(currentGlobals->menuState>>4==3)
     32e:	f8 01       	movw	r30, r16
     330:	82 85       	ldd	r24, Z+10	; 0x0a
     332:	82 95       	swap	r24
     334:	8f 70       	andi	r24, 0x0F	; 15
     336:	83 30       	cpi	r24, 0x03	; 3
     338:	21 f4       	brne	.+8      	; 0x342 <listenGPButtons+0x36>
		{
			globalWrite(currentGlobals);
     33a:	c8 01       	movw	r24, r16
     33c:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <globalWrite>
     340:	1e c0       	rjmp	.+60     	; 0x37e <listenGPButtons+0x72>
		}else
		{
			eepromSavePattern(currentPattern, currentGlobals->currentPatternNumber);
     342:	f8 01       	movw	r30, r16
     344:	87 81       	ldd	r24, Z+7	; 0x07
     346:	8f 93       	push	r24
     348:	8d b7       	in	r24, 0x3d	; 61
     34a:	9e b7       	in	r25, 0x3e	; 62
     34c:	8b 57       	subi	r24, 0x7B	; 123
     34e:	91 40       	sbci	r25, 0x01	; 1
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	f8 94       	cli
     354:	9e bf       	out	0x3e, r25	; 62
     356:	0f be       	out	0x3f, r0	; 63
     358:	8d bf       	out	0x3d, r24	; 61
     35a:	ad b7       	in	r26, 0x3d	; 61
     35c:	be b7       	in	r27, 0x3e	; 62
     35e:	11 96       	adiw	r26, 0x01	; 1
     360:	8b e7       	ldi	r24, 0x7B	; 123
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	fe 01       	movw	r30, r28
     366:	39 96       	adiw	r30, 0x09	; 9
     368:	01 90       	ld	r0, Z+
     36a:	0d 92       	st	X+, r0
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	e1 f7       	brne	.-8      	; 0x368 <listenGPButtons+0x5c>
     370:	0e 94 c4 19 	call	0x3388	; 0x3388 <eepromSavePattern>
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
		}
		
	}

	uint8_t encoderSwitchMask = 0b00001000;
	if(button_down(1<<PB6))
     37e:	80 e4       	ldi	r24, 0x40	; 64
     380:	4b d0       	rcall	.+150    	; 0x418 <button_down>
     382:	88 23       	and	r24, r24
     384:	51 f0       	breq	.+20     	; 0x39a <listenGPButtons+0x8e>
		{//bottom encoder button
			uint8_t encoderBCheck = currentGlobals->menuState&encoderSwitchMask;
     386:	f8 01       	movw	r30, r16
     388:	82 85       	ldd	r24, Z+10	; 0x0a
			if(encoderBCheck)
     38a:	83 ff       	sbrs	r24, 3
     38c:	03 c0       	rjmp	.+6      	; 0x394 <listenGPButtons+0x88>
			{
				currentGlobals->menuState &=0b11110111;//turn off the encoderBFlag
     38e:	87 7f       	andi	r24, 0xF7	; 247
     390:	82 87       	std	Z+10, r24	; 0x0a
     392:	03 c0       	rjmp	.+6      	; 0x39a <listenGPButtons+0x8e>

			}else
			{
				currentGlobals->menuState |=0b00001000; //turn on the encoderBFlag bit
     394:	88 60       	ori	r24, 0x08	; 8
     396:	f8 01       	movw	r30, r16
     398:	82 87       	std	Z+10, r24	; 0x0a
			}
		}
	uint8_t playButtonMask = 0b0000001; //we could probably make a define for both of these masks.
	uint8_t playStateCheck = currentGlobals->playState & playButtonMask;
     39a:	f8 01       	movw	r30, r16
	if(button_down(1<<PB4))
     39c:	f3 84       	ldd	r15, Z+11	; 0x0b
     39e:	80 e1       	ldi	r24, 0x10	; 16
     3a0:	3b d0       	rcall	.+118    	; 0x418 <button_down>
     3a2:	88 23       	and	r24, r24
     3a4:	71 f0       	breq	.+28     	; 0x3c2 <listenGPButtons+0xb6>
	{
		if(playStateCheck)
     3a6:	f0 fe       	sbrs	r15, 0
     3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <listenGPButtons+0xaa>
		{
			currentGlobals->playState=0; //playstate is on, turn it off
     3aa:	f8 01       	movw	r30, r16
     3ac:	13 86       	std	Z+11, r1	; 0x0b
			currentGlobals->currentGPButtons &=(~0x20); //turn the first bit
     3ae:	82 81       	ldd	r24, Z+2	; 0x02
     3b0:	8f 7d       	andi	r24, 0xDF	; 223
     3b2:	82 83       	std	Z+2, r24	; 0x02
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <listenGPButtons+0xb6>
			
		}else
		{
			currentGlobals->playState=1;
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	f8 01       	movw	r30, r16
     3ba:	83 87       	std	Z+11, r24	; 0x0b
			currentGlobals->currentGPButtons |= 0x20; //turn on the first bit
     3bc:	82 81       	ldd	r24, Z+2	; 0x02
     3be:	80 62       	ori	r24, 0x20	; 32
     3c0:	82 83       	std	Z+2, r24	; 0x02
		}

	} //not sure which button this is
	uint8_t trackButtonMask = 0b00000001;
	uint8_t trackStateCheck = (currentGlobals->buttonSwitchFlag) & trackButtonMask;
     3c2:	f8 01       	movw	r30, r16
	if(button_down(1<<PB0))
     3c4:	f5 84       	ldd	r15, Z+13	; 0x0d
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	27 d0       	rcall	.+78     	; 0x418 <button_down>
     3ca:	88 23       	and	r24, r24
     3cc:	71 f0       	breq	.+28     	; 0x3ea <listenGPButtons+0xde>
	{
		if(trackStateCheck)
     3ce:	f0 fe       	sbrs	r15, 0
     3d0:	06 c0       	rjmp	.+12     	; 0x3de <listenGPButtons+0xd2>
		{
			currentGlobals->buttonSwitchFlag = 0;
     3d2:	f8 01       	movw	r30, r16
     3d4:	15 86       	std	Z+13, r1	; 0x0d
			currentGlobals->currentGPButtons &=(~0x02);
     3d6:	82 81       	ldd	r24, Z+2	; 0x02
     3d8:	8d 7f       	andi	r24, 0xFD	; 253
     3da:	82 83       	std	Z+2, r24	; 0x02
     3dc:	06 c0       	rjmp	.+12     	; 0x3ea <listenGPButtons+0xde>
		}else
		{
			currentGlobals->buttonSwitchFlag = 1;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	f8 01       	movw	r30, r16
     3e2:	85 87       	std	Z+13, r24	; 0x0d
			currentGlobals->currentGPButtons |=0x02;
     3e4:	82 81       	ldd	r24, Z+2	; 0x02
     3e6:	82 60       	ori	r24, 0x02	; 2
		}
	}
	uint8_t fineButtonMask = 4;
	uint8_t fineStateCheck = (currentGlobals->currentGPButtons) & fineButtonMask;
     3e8:	82 83       	std	Z+2, r24	; 0x02
     3ea:	f8 01       	movw	r30, r16
	if(button_down(1<<PB1))
     3ec:	f2 80       	ldd	r15, Z+2	; 0x02
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	13 d0       	rcall	.+38     	; 0x418 <button_down>
     3f2:	88 23       	and	r24, r24
     3f4:	59 f0       	breq	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	{		
		if(fineStateCheck)
     3f6:	f2 fe       	sbrs	r15, 2
     3f8:	05 c0       	rjmp	.+10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		{
			
			currentGlobals->currentGPButtons &=(~0x04);
     3fa:	f8 01       	movw	r30, r16
     3fc:	82 81       	ldd	r24, Z+2	; 0x02
     3fe:	8b 7f       	andi	r24, 0xFB	; 251
     400:	82 83       	std	Z+2, r24	; 0x02
     402:	04 c0       	rjmp	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		}else
		{
			currentGlobals->currentGPButtons |=0x04;
     404:	f8 01       	movw	r30, r16
     406:	82 81       	ldd	r24, Z+2	; 0x02
     408:	84 60       	ori	r24, 0x04	; 4
     40a:	82 83       	std	Z+2, r24	; 0x02
		}
		
	}
}
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	08 95       	ret

00000418 <button_down>:

volatile uint8_t buttons_down;
uint8_t button_down(uint8_t button_mask)
{
	//I should probably check out what this is.
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     418:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     41a:	f8 94       	cli
	{
		button_mask &= buttons_down;
     41c:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <buttons_down>
     420:	89 23       	and	r24, r25
		buttons_down ^= button_mask;
     422:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <buttons_down>
     426:	98 27       	eor	r25, r24
     428:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <buttons_down>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     42c:	2f bf       	out	0x3f, r18	; 63
	}
	
	return button_mask;
     42e:	08 95       	ret

00000430 <initEncoders>:
{
	
	//Interrupt pins - 2,3,4,5
		
	//setup rising edge detection on Int pins 2 and 3 (would maybe want all pin states if this doesn't work).
	EICRA |=(1<<ISC31)|(1<<ISC30)|(1 << ISC21)|(1 << ISC20); 
     430:	e9 e6       	ldi	r30, 0x69	; 105
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	80 6f       	ori	r24, 0xF0	; 240
     438:	80 83       	st	Z, r24
	
	//same setup on pins 4 and 5
	EICRB |=(1<<ISC51)|(1<<ISC50)|(1 << ISC41)|(1 << ISC40);
     43a:	ea e6       	ldi	r30, 0x6A	; 106
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	8f 60       	ori	r24, 0x0F	; 15
     442:	80 83       	st	Z, r24
	
	//enable all 4 interrupts through masking
	EIMSK |=(1<<INT2)|(1<<INT3)|(1<<INT4)|(1<<INT5);
     444:	8d b3       	in	r24, 0x1d	; 29
     446:	8c 63       	ori	r24, 0x3C	; 60
     448:	8d bb       	out	0x1d, r24	; 29
     44a:	08 95       	ret

0000044c <__vector_3>:


}
 
ISR(INT2_vect)
{
     44c:	1f 92       	push	r1
     44e:	0f 92       	push	r0
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	0f 92       	push	r0
     454:	11 24       	eor	r1, r1
     456:	8f 93       	push	r24
	
	if((1<<topEncoderPinB)&encoderPortStates)//this means Pin 2 is coming after pin 3
     458:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     45c:	81 ff       	sbrs	r24, 1
     45e:	0b c0       	rjmp	.+22     	; 0x476 <__vector_3+0x2a>
	{
		bottomEncoderValue--;
     460:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <bottomEncoderValue>
     464:	81 50       	subi	r24, 0x01	; 1
     466:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <bottomEncoderValue>
		encoderPortStates&=(1<<bottomEncoderPinB)|(1<<bottomEncoderPinA);//reset our two pins to low. 
     46a:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     46e:	8c 70       	andi	r24, 0x0C	; 12
     470:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <encoderPortStates>
     474:	05 c0       	rjmp	.+10     	; 0x480 <__vector_3+0x34>
	}
	else
	{
		encoderPortStates|=(1<<topEncoderPinA); //we want to set bit 0. 
     476:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     47a:	81 60       	ori	r24, 0x01	; 1
     47c:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <encoderPortStates>
	}
}
     480:	8f 91       	pop	r24
     482:	0f 90       	pop	r0
     484:	0f be       	out	0x3f, r0	; 63
     486:	0f 90       	pop	r0
     488:	1f 90       	pop	r1
     48a:	18 95       	reti

0000048c <__vector_4>:

ISR(INT3_vect)
{
     48c:	1f 92       	push	r1
     48e:	0f 92       	push	r0
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	0f 92       	push	r0
     494:	11 24       	eor	r1, r1
     496:	8f 93       	push	r24

	if((1<<topEncoderPinA)&encoderPortStates)//this means Pin 3 is coming after pin 2
     498:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     49c:	80 ff       	sbrs	r24, 0
     49e:	0b c0       	rjmp	.+22     	; 0x4b6 <__vector_4+0x2a>
	{
		bottomEncoderValue++;
     4a0:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <bottomEncoderValue>
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <bottomEncoderValue>
		encoderPortStates&=(1<<bottomEncoderPinA)|(1<<bottomEncoderPinB); //reset our two pins to low.
     4aa:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     4ae:	8c 70       	andi	r24, 0x0C	; 12
     4b0:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <encoderPortStates>
     4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <__vector_4+0x34>
	}
	else
	{
		encoderPortStates|=(1<<topEncoderPinB); //we want to set bit 1.
     4b6:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     4ba:	82 60       	ori	r24, 0x02	; 2
     4bc:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <encoderPortStates>
	}
}
     4c0:	8f 91       	pop	r24
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <__vector_5>:

ISR(INT4_vect)
{
     4cc:	1f 92       	push	r1
     4ce:	0f 92       	push	r0
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	0f 92       	push	r0
     4d4:	11 24       	eor	r1, r1
     4d6:	8f 93       	push	r24
	
	if((1<<bottomEncoderPinB)&encoderPortStates)//this means Pin 4 is coming after pin 5
     4d8:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     4dc:	83 ff       	sbrs	r24, 3
     4de:	0b c0       	rjmp	.+22     	; 0x4f6 <__vector_5+0x2a>
	{
		topEncoderValue++;
     4e0:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <topEncoderValue>
     4e4:	8f 5f       	subi	r24, 0xFF	; 255
     4e6:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <topEncoderValue>
		encoderPortStates&=(1<<topEncoderPinA)|(1<<topEncoderPinB); //reset our two pins to low.
     4ea:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     4ee:	83 70       	andi	r24, 0x03	; 3
     4f0:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <encoderPortStates>
     4f4:	05 c0       	rjmp	.+10     	; 0x500 <__vector_5+0x34>
	}
	else
	{
		encoderPortStates|=(1<<bottomEncoderPinA); //we want to set bit 2.
     4f6:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     4fa:	84 60       	ori	r24, 0x04	; 4
     4fc:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <encoderPortStates>
	}
}
     500:	8f 91       	pop	r24
     502:	0f 90       	pop	r0
     504:	0f be       	out	0x3f, r0	; 63
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <__vector_6>:

ISR(INT5_vect)
{
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	8f 93       	push	r24
	
	if((1<<bottomEncoderPinA)&encoderPortStates)//this means Pin 3 is coming after pin 2
     518:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     51c:	82 ff       	sbrs	r24, 2
     51e:	0b c0       	rjmp	.+22     	; 0x536 <__vector_6+0x2a>
	{
		topEncoderValue--;
     520:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <topEncoderValue>
     524:	81 50       	subi	r24, 0x01	; 1
     526:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <topEncoderValue>
		encoderPortStates&=(1<<topEncoderPinA)|(1<<topEncoderPinB); //reset our two pins to low.
     52a:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     52e:	83 70       	andi	r24, 0x03	; 3
     530:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <encoderPortStates>
     534:	05 c0       	rjmp	.+10     	; 0x540 <__vector_6+0x34>
	}
	else
	{
		encoderPortStates|=(1<<bottomEncoderPinB); //we want to set bit 3.
     536:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     53a:	88 60       	ori	r24, 0x08	; 8
     53c:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <encoderPortStates>
	}
}
     540:	8f 91       	pop	r24
     542:	0f 90       	pop	r0
     544:	0f be       	out	0x3f, r0	; 63
     546:	0f 90       	pop	r0
     548:	1f 90       	pop	r1
     54a:	18 95       	reti

0000054c <listenEncoders>:


void listenEncoders(Pattern *currentPattern, Globals *currentGlobals)
{
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	9c 01       	movw	r18, r24
     552:	fb 01       	movw	r30, r22
	if(topEncoderValue!=topEncoderLastValue)
     554:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <topEncoderValue>
     558:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <topEncoderLastValue>
     55c:	98 17       	cp	r25, r24
     55e:	89 f0       	breq	.+34     	; 0x582 <listenEncoders+0x36>
	{
		currentGlobals->menuState = ((topEncoderValue%4)<<4);
     560:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <topEncoderValue>
     564:	93 70       	andi	r25, 0x03	; 3
     566:	92 95       	swap	r25
     568:	90 7f       	andi	r25, 0xF0	; 240
     56a:	92 87       	std	Z+10, r25	; 0x0a
		bottomEncoderValue = 0; 
     56c:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <bottomEncoderValue>
		bottomEncoderLastValue = 0; 
     570:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <bottomEncoderLastValue>
		currentGlobals->valueChangeFlag |= (1<<encoderChange);
     574:	86 85       	ldd	r24, Z+14	; 0x0e
     576:	81 60       	ori	r24, 0x01	; 1
     578:	86 87       	std	Z+14, r24	; 0x0e
		topEncoderLastValue = topEncoderValue;
     57a:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <topEncoderValue>
     57e:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <topEncoderLastValue>
	}
	
	if(bottomEncoderValue!=bottomEncoderLastValue)
     582:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <bottomEncoderValue>
     586:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <bottomEncoderLastValue>
     58a:	98 17       	cp	r25, r24
     58c:	09 f4       	brne	.+2      	; 0x590 <listenEncoders+0x44>
     58e:	03 c2       	rjmp	.+1030   	; 0x996 <listenEncoders+0x44a>
	{
		 uint8_t menuSub = bottomEncoderValue - bottomEncoderLastValue;
     590:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <bottomEncoderValue>
     594:	a9 2f       	mov	r26, r25
     596:	a8 1b       	sub	r26, r24
		 currentGlobals->valueChangeFlag |= (1<<encoderChange);
     598:	96 85       	ldd	r25, Z+14	; 0x0e
     59a:	91 60       	ori	r25, 0x01	; 1
     59c:	96 87       	std	Z+14, r25	; 0x0e
		 			//if this value is negative, we increase the menu.
		 			//if positive, we decrement the menu.
		switch(currentGlobals->menuState)
     59e:	42 85       	ldd	r20, Z+10	; 0x0a
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	4b 33       	cpi	r20, 0x3B	; 59
     5a4:	51 05       	cpc	r21, r1
     5a6:	08 f0       	brcs	.+2      	; 0x5aa <listenEncoders+0x5e>
     5a8:	f2 c1       	rjmp	.+996    	; 0x98e <listenEncoders+0x442>
     5aa:	ef 01       	movw	r28, r30
     5ac:	fa 01       	movw	r30, r20
     5ae:	88 27       	eor	r24, r24
     5b0:	ee 58       	subi	r30, 0x8E	; 142
     5b2:	ff 4f       	sbci	r31, 0xFF	; 255
     5b4:	8f 4f       	sbci	r24, 0xFF	; 255
     5b6:	0c 94 c2 1f 	jmp	0x3f84	; 0x3f84 <__tablejump2__>
		{
			case PreformanceModeInit:
			if(menuSub==1)
     5ba:	a1 30       	cpi	r26, 0x01	; 1
     5bc:	41 f4       	brne	.+16     	; 0x5ce <listenEncoders+0x82>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     5be:	8f 81       	ldd	r24, Y+7	; 0x07
     5c0:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     5c2:	11 f0       	breq	.+4      	; 0x5c8 <listenEncoders+0x7c>
		switch(currentGlobals->menuState)
		{
			case PreformanceModeInit:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     5c4:	8f 83       	std	Y+7, r24	; 0x07
     5c6:	0b c0       	rjmp	.+22     	; 0x5de <listenEncoders+0x92>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     5c8:	8f ef       	ldi	r24, 0xFF	; 255
     5ca:	8f 83       	std	Y+7, r24	; 0x07
     5cc:	08 c0       	rjmp	.+16     	; 0x5de <listenEncoders+0x92>
				}
				
			}else if(menuSub==255) //we don't want to hit this when switching menus after changing from the sequencer. 
     5ce:	af 3f       	cpi	r26, 0xFF	; 255
     5d0:	31 f4       	brne	.+12     	; 0x5de <listenEncoders+0x92>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     5d2:	8f 81       	ldd	r24, Y+7	; 0x07
     5d4:	81 50       	subi	r24, 0x01	; 1
     5d6:	10 f0       	brcs	.+4      	; 0x5dc <listenEncoders+0x90>
     5d8:	8f 83       	std	Y+7, r24	; 0x07
     5da:	01 c0       	rjmp	.+2      	; 0x5de <listenEncoders+0x92>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     5dc:	1f 82       	std	Y+7, r1	; 0x07
				}
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     5de:	6f 81       	ldd	r22, Y+7	; 0x07
     5e0:	c9 01       	movw	r24, r18
     5e2:	0e 94 b1 1b 	call	0x3762	; 0x3762 <eepromLoadPattern>
			break;
     5e6:	d3 c1       	rjmp	.+934    	; 0x98e <listenEncoders+0x442>
			
			case SequencerMenuArrow1:			
			if(menuSub==1)
     5e8:	a1 30       	cpi	r26, 0x01	; 1
     5ea:	19 f4       	brne	.+6      	; 0x5f2 <listenEncoders+0xa6>
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     5ec:	83 e1       	ldi	r24, 0x13	; 19
     5ee:	8a 87       	std	Y+10, r24	; 0x0a
     5f0:	ce c1       	rjmp	.+924    	; 0x98e <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     5f2:	82 e1       	ldi	r24, 0x12	; 18
     5f4:	8a 87       	std	Y+10, r24	; 0x0a
     5f6:	cb c1       	rjmp	.+918    	; 0x98e <listenEncoders+0x442>
			}
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
     5f8:	a1 30       	cpi	r26, 0x01	; 1
     5fa:	41 f4       	brne	.+16     	; 0x60c <listenEncoders+0xc0>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     5fc:	8f 81       	ldd	r24, Y+7	; 0x07
     5fe:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     600:	11 f0       	breq	.+4      	; 0x606 <listenEncoders+0xba>
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     602:	8f 83       	std	Y+7, r24	; 0x07
     604:	09 c0       	rjmp	.+18     	; 0x618 <listenEncoders+0xcc>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     606:	8f ef       	ldi	r24, 0xFF	; 255
     608:	8f 83       	std	Y+7, r24	; 0x07
     60a:	06 c0       	rjmp	.+12     	; 0x618 <listenEncoders+0xcc>
				}
		
			}else
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     60c:	8f 81       	ldd	r24, Y+7	; 0x07
     60e:	81 50       	subi	r24, 0x01	; 1
     610:	10 f0       	brcs	.+4      	; 0x616 <listenEncoders+0xca>
     612:	8f 83       	std	Y+7, r24	; 0x07
     614:	01 c0       	rjmp	.+2      	; 0x618 <listenEncoders+0xcc>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     616:	1f 82       	std	Y+7, r1	; 0x07
				}	
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     618:	6f 81       	ldd	r22, Y+7	; 0x07
     61a:	c9 01       	movw	r24, r18
     61c:	0e 94 b1 1b 	call	0x3762	; 0x3762 <eepromLoadPattern>
			//this keeps the knob reads that will happen right after the eeprom load to write over the loaded values.
			//Now when you load a pattern, the saved positions of the knobs are unchanged until you turn a knob. 
			break;
     620:	b6 c1       	rjmp	.+876    	; 0x98e <listenEncoders+0x442>
			
			case SequencerMenuArrow2:
			if(menuSub==1)
     622:	a1 30       	cpi	r26, 0x01	; 1
     624:	19 f4       	brne	.+6      	; 0x62c <listenEncoders+0xe0>
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     626:	81 e1       	ldi	r24, 0x11	; 17
     628:	8a 87       	std	Y+10, r24	; 0x0a
     62a:	b1 c1       	rjmp	.+866    	; 0x98e <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     62c:	83 e1       	ldi	r24, 0x13	; 19
     62e:	8a 87       	std	Y+10, r24	; 0x0a
     630:	ae c1       	rjmp	.+860    	; 0x98e <listenEncoders+0x442>
			}
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
     632:	a1 30       	cpi	r26, 0x01	; 1
     634:	79 f4       	brne	.+30     	; 0x654 <listenEncoders+0x108>
			{
				currentPattern->numSteps++;
     636:	f9 01       	movw	r30, r18
     638:	e6 53       	subi	r30, 0x36	; 54
     63a:	ff 4f       	sbci	r31, 0xFF	; 255
     63c:	90 81       	ld	r25, Z
     63e:	9f 5f       	subi	r25, 0xFF	; 255
				if(currentPattern->numSteps>64)
     640:	91 34       	cpi	r25, 0x41	; 65
     642:	10 f4       	brcc	.+4      	; 0x648 <listenEncoders+0xfc>
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
			{
				currentPattern->numSteps++;
     644:	90 83       	st	Z, r25
     646:	a3 c1       	rjmp	.+838    	; 0x98e <listenEncoders+0x442>
				if(currentPattern->numSteps>64)
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
     648:	f9 01       	movw	r30, r18
     64a:	e6 53       	subi	r30, 0x36	; 54
     64c:	ff 4f       	sbci	r31, 0xFF	; 255
     64e:	80 e4       	ldi	r24, 0x40	; 64
     650:	80 83       	st	Z, r24
     652:	9d c1       	rjmp	.+826    	; 0x98e <listenEncoders+0x442>
				}
			}else
			{
				currentPattern->numSteps--;
     654:	f9 01       	movw	r30, r18
     656:	e6 53       	subi	r30, 0x36	; 54
     658:	ff 4f       	sbci	r31, 0xFF	; 255
     65a:	90 81       	ld	r25, Z
     65c:	91 50       	subi	r25, 0x01	; 1
				if(currentPattern->numSteps<1)
     65e:	11 f0       	breq	.+4      	; 0x664 <listenEncoders+0x118>
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
				}
			}else
			{
				currentPattern->numSteps--;
     660:	90 83       	st	Z, r25
     662:	95 c1       	rjmp	.+810    	; 0x98e <listenEncoders+0x442>
				if(currentPattern->numSteps<1)
				{//we can't have a 0 step pattern. 
					currentPattern->numSteps=1;
     664:	f9 01       	movw	r30, r18
     666:	e6 53       	subi	r30, 0x36	; 54
     668:	ff 4f       	sbci	r31, 0xFF	; 255
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	80 83       	st	Z, r24
     66e:	8f c1       	rjmp	.+798    	; 0x98e <listenEncoders+0x442>
				}
			}
			break;
			
			case SequencerMenuArrow3:;
			if(menuSub==1)
     670:	a1 30       	cpi	r26, 0x01	; 1
     672:	19 f4       	brne	.+6      	; 0x67a <listenEncoders+0x12e>
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     674:	82 e1       	ldi	r24, 0x12	; 18
     676:	8a 87       	std	Y+10, r24	; 0x0a
     678:	8a c1       	rjmp	.+788    	; 0x98e <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     67a:	81 e1       	ldi	r24, 0x11	; 17
     67c:	8a 87       	std	Y+10, r24	; 0x0a
     67e:	87 c1       	rjmp	.+782    	; 0x98e <listenEncoders+0x442>
			}
			break;
			
			case SequencerMenuArrow3Select:
			//change current step number
			if(menuSub==1)
     680:	a1 30       	cpi	r26, 0x01	; 1
     682:	69 f4       	brne	.+26     	; 0x69e <listenEncoders+0x152>
			{
				currentGlobals->currentStep++;
     684:	98 85       	ldd	r25, Y+8	; 0x08
     686:	9f 5f       	subi	r25, 0xFF	; 255
     688:	98 87       	std	Y+8, r25	; 0x08
				if(currentGlobals->currentStep>=currentPattern->numSteps)
     68a:	f9 01       	movw	r30, r18
     68c:	e6 53       	subi	r30, 0x36	; 54
     68e:	ff 4f       	sbci	r31, 0xFF	; 255
     690:	80 81       	ld	r24, Z
     692:	98 17       	cp	r25, r24
     694:	08 f4       	brcc	.+2      	; 0x698 <listenEncoders+0x14c>
     696:	7b c1       	rjmp	.+758    	; 0x98e <listenEncoders+0x442>
				{//our ceiling is the maximum number of steps.
					currentGlobals->currentStep=(currentPattern->numSteps)-1;
     698:	81 50       	subi	r24, 0x01	; 1
     69a:	88 87       	std	Y+8, r24	; 0x08
     69c:	78 c1       	rjmp	.+752    	; 0x98e <listenEncoders+0x442>
				}
			}else
			{
				currentGlobals->currentStep--;
     69e:	98 85       	ldd	r25, Y+8	; 0x08
     6a0:	91 50       	subi	r25, 0x01	; 1
     6a2:	98 87       	std	Y+8, r25	; 0x08
				if(currentGlobals->currentStep>currentPattern->numSteps)
     6a4:	f9 01       	movw	r30, r18
     6a6:	e6 53       	subi	r30, 0x36	; 54
     6a8:	ff 4f       	sbci	r31, 0xFF	; 255
     6aa:	80 81       	ld	r24, Z
     6ac:	89 17       	cp	r24, r25
     6ae:	08 f0       	brcs	.+2      	; 0x6b2 <listenEncoders+0x166>
     6b0:	6e c1       	rjmp	.+732    	; 0x98e <listenEncoders+0x442>
				{//do no write notes to step 0.
					currentGlobals->currentStep=0;
     6b2:	18 86       	std	Y+8, r1	; 0x08
     6b4:	6c c1       	rjmp	.+728    	; 0x98e <listenEncoders+0x442>
				}				
			}
			break;
			
			case TrackMenuArrow1:;
			if(menuSub==1)
     6b6:	a1 30       	cpi	r26, 0x01	; 1
     6b8:	19 f4       	brne	.+6      	; 0x6c0 <listenEncoders+0x174>
			{
				currentGlobals->menuState = TrackMenuArrow5;
     6ba:	85 e2       	ldi	r24, 0x25	; 37
     6bc:	8a 87       	std	Y+10, r24	; 0x0a
     6be:	67 c1       	rjmp	.+718    	; 0x98e <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow2;
     6c0:	82 e2       	ldi	r24, 0x22	; 34
     6c2:	8a 87       	std	Y+10, r24	; 0x0a
     6c4:	64 c1       	rjmp	.+712    	; 0x98e <listenEncoders+0x442>
			}
			break;
			
			case TrackMenuArrow1Select:;
			uint16_t currentSample = ((currentPattern->trackSampleMSB[currentGlobals->currentTrack])<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     6c6:	89 85       	ldd	r24, Y+9	; 0x09
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	b9 01       	movw	r22, r18
     6cc:	68 0f       	add	r22, r24
     6ce:	79 1f       	adc	r23, r25
     6d0:	fb 01       	movw	r30, r22
     6d2:	e8 56       	subi	r30, 0x68	; 104
     6d4:	ff 4f       	sbci	r31, 0xFF	; 255
     6d6:	40 81       	ld	r20, Z
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	54 2f       	mov	r21, r20
     6dc:	44 27       	eor	r20, r20
     6de:	70 96       	adiw	r30, 0x10	; 16
     6e0:	60 81       	ld	r22, Z
     6e2:	46 2b       	or	r20, r22
			if(menuSub==1)
     6e4:	a1 30       	cpi	r26, 0x01	; 1
     6e6:	49 f4       	brne	.+18     	; 0x6fa <listenEncoders+0x1ae>
     6e8:	4f 5f       	subi	r20, 0xFF	; 255
     6ea:	5f 4f       	sbci	r21, 0xFF	; 255
     6ec:	41 30       	cpi	r20, 0x01	; 1
     6ee:	60 e1       	ldi	r22, 0x10	; 16
     6f0:	56 07       	cpc	r21, r22
     6f2:	40 f0       	brcs	.+16     	; 0x704 <listenEncoders+0x1b8>
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	50 e1       	ldi	r21, 0x10	; 16
     6f8:	05 c0       	rjmp	.+10     	; 0x704 <listenEncoders+0x1b8>
				{//maximum number of indexable samples.
					currentSample=4096;
				}
			}else
			{//no samples in space 0.
				currentSample--;
     6fa:	41 50       	subi	r20, 0x01	; 1
     6fc:	51 09       	sbc	r21, r1
				if(currentSample<1)
     6fe:	11 f4       	brne	.+4      	; 0x704 <listenEncoders+0x1b8>
				{
					currentSample=1;
     700:	41 e0       	ldi	r20, 0x01	; 1
     702:	50 e0       	ldi	r21, 0x00	; 0
				}
			}
			currentPattern->trackSampleLSB[currentGlobals->currentTrack] = (currentSample&0x00FF);//we want to lob off the top 8 bits, just in case. May be unnecessary.
     704:	82 0f       	add	r24, r18
     706:	93 1f       	adc	r25, r19
     708:	fc 01       	movw	r30, r24
     70a:	e8 55       	subi	r30, 0x58	; 88
     70c:	ff 4f       	sbci	r31, 0xFF	; 255
     70e:	40 83       	st	Z, r20
			currentPattern->trackSampleMSB[currentGlobals->currentTrack] = (currentSample>>8); 
     710:	89 85       	ldd	r24, Y+9	; 0x09
     712:	28 0f       	add	r18, r24
     714:	31 1d       	adc	r19, r1
     716:	f9 01       	movw	r30, r18
     718:	e8 56       	subi	r30, 0x68	; 104
     71a:	ff 4f       	sbci	r31, 0xFF	; 255
     71c:	50 83       	st	Z, r21
			break;
     71e:	37 c1       	rjmp	.+622    	; 0x98e <listenEncoders+0x442>
			
			case TrackMenuArrow2:
			if(menuSub==1)
     720:	a1 30       	cpi	r26, 0x01	; 1
     722:	19 f4       	brne	.+6      	; 0x72a <listenEncoders+0x1de>
			{
				currentGlobals->menuState = TrackMenuArrow1;
     724:	81 e2       	ldi	r24, 0x21	; 33
     726:	8a 87       	std	Y+10, r24	; 0x0a
     728:	32 c1       	rjmp	.+612    	; 0x98e <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow3;
     72a:	83 e2       	ldi	r24, 0x23	; 35
     72c:	8a 87       	std	Y+10, r24	; 0x0a
     72e:	2f c1       	rjmp	.+606    	; 0x98e <listenEncoders+0x442>
			
			case TrackMenuArrow2Select:
			//change play mode of currently selected track
			//since we only have two play modes currently,
			//we only need to flip the play mode.
			currentPattern->trackPlayMode[currentGlobals->currentTrack] = (!(currentPattern->trackPlayMode[currentGlobals->currentTrack]))&(0b00000001);
     730:	89 85       	ldd	r24, Y+9	; 0x09
     732:	28 0f       	add	r18, r24
     734:	31 1d       	adc	r19, r1
     736:	f9 01       	movw	r30, r18
     738:	e8 57       	subi	r30, 0x78	; 120
     73a:	ff 4f       	sbci	r31, 0xFF	; 255
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	90 81       	ld	r25, Z
     740:	91 11       	cpse	r25, r1
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	80 83       	st	Z, r24
			//flip all bits, mask for first bit. 
			break;
     746:	23 c1       	rjmp	.+582    	; 0x98e <listenEncoders+0x442>
			
			case TrackMenuArrow3:
			if(menuSub==1)
     748:	a1 30       	cpi	r26, 0x01	; 1
     74a:	19 f4       	brne	.+6      	; 0x752 <listenEncoders+0x206>
			{
				currentGlobals->menuState = TrackMenuArrow2;
     74c:	82 e2       	ldi	r24, 0x22	; 34
     74e:	8a 87       	std	Y+10, r24	; 0x0a
     750:	1e c1       	rjmp	.+572    	; 0x98e <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow4;
     752:	84 e2       	ldi	r24, 0x24	; 36
     754:	8a 87       	std	Y+10, r24	; 0x0a
     756:	1b c1       	rjmp	.+566    	; 0x98e <listenEncoders+0x442>
			}
			break;
			
			case TrackMenuArrow3Select:
			
			if(menuSub==1)
     758:	a1 30       	cpi	r26, 0x01	; 1
     75a:	b1 f4       	brne	.+44     	; 0x788 <listenEncoders+0x23c>
			{
				//indexing might be an issue here, don't remember if this is 0 indexed or not. 
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1 ;
     75c:	89 85       	ldd	r24, Y+9	; 0x09
     75e:	f9 01       	movw	r30, r18
     760:	e8 0f       	add	r30, r24
     762:	f1 1d       	adc	r31, r1
     764:	80 8d       	ldd	r24, Z+24	; 0x18
     766:	8f 5f       	subi	r24, 0xFF	; 255
     768:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     76a:	89 85       	ldd	r24, Y+9	; 0x09
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	f9 01       	movw	r30, r18
     770:	e8 0f       	add	r30, r24
     772:	f9 1f       	adc	r31, r25
     774:	40 8d       	ldd	r20, Z+24	; 0x18
     776:	48 30       	cpi	r20, 0x08	; 8
     778:	08 f4       	brcc	.+2      	; 0x77c <listenEncoders+0x230>
     77a:	09 c1       	rjmp	.+530    	; 0x98e <listenEncoders+0x442>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=7;
     77c:	f9 01       	movw	r30, r18
     77e:	e8 0f       	add	r30, r24
     780:	f9 1f       	adc	r31, r25
     782:	87 e0       	ldi	r24, 0x07	; 7
     784:	80 8f       	std	Z+24, r24	; 0x18
     786:	03 c1       	rjmp	.+518    	; 0x98e <listenEncoders+0x442>
				}
			}else
			{
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])-1;
     788:	89 85       	ldd	r24, Y+9	; 0x09
     78a:	f9 01       	movw	r30, r18
     78c:	e8 0f       	add	r30, r24
     78e:	f1 1d       	adc	r31, r1
     790:	80 8d       	ldd	r24, Z+24	; 0x18
     792:	81 50       	subi	r24, 0x01	; 1
     794:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     796:	89 85       	ldd	r24, Y+9	; 0x09
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	f9 01       	movw	r30, r18
     79c:	e8 0f       	add	r30, r24
     79e:	f9 1f       	adc	r31, r25
     7a0:	40 8d       	ldd	r20, Z+24	; 0x18
     7a2:	48 30       	cpi	r20, 0x08	; 8
     7a4:	08 f4       	brcc	.+2      	; 0x7a8 <listenEncoders+0x25c>
     7a6:	f3 c0       	rjmp	.+486    	; 0x98e <listenEncoders+0x442>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=0;
     7a8:	f9 01       	movw	r30, r18
     7aa:	e8 0f       	add	r30, r24
     7ac:	f9 1f       	adc	r31, r25
     7ae:	10 8e       	std	Z+24, r1	; 0x18
     7b0:	ee c0       	rjmp	.+476    	; 0x98e <listenEncoders+0x442>
				}
			}
			break;
			
			case TrackMenuArrow4:
			if(menuSub==1)
     7b2:	a1 30       	cpi	r26, 0x01	; 1
     7b4:	19 f4       	brne	.+6      	; 0x7bc <listenEncoders+0x270>
			{
				currentGlobals->menuState = TrackMenuArrow3;
     7b6:	83 e2       	ldi	r24, 0x23	; 35
     7b8:	8a 87       	std	Y+10, r24	; 0x0a
     7ba:	e9 c0       	rjmp	.+466    	; 0x98e <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow5;
     7bc:	85 e2       	ldi	r24, 0x25	; 37
     7be:	8a 87       	std	Y+10, r24	; 0x0a
     7c0:	e6 c0       	rjmp	.+460    	; 0x98e <listenEncoders+0x442>
			}
			break;
			
			case TrackMenuArrow4Select:
			if(menuSub==1)
     7c2:	a1 30       	cpi	r26, 0x01	; 1
     7c4:	d9 f4       	brne	.+54     	; 0x7fc <listenEncoders+0x2b0>
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])++;
     7c6:	89 85       	ldd	r24, Y+9	; 0x09
     7c8:	f9 01       	movw	r30, r18
     7ca:	e8 0f       	add	r30, r24
     7cc:	f1 1d       	adc	r31, r1
     7ce:	e5 51       	subi	r30, 0x15	; 21
     7d0:	ff 4f       	sbci	r31, 0xFF	; 255
     7d2:	80 81       	ld	r24, Z
     7d4:	8f 5f       	subi	r24, 0xFF	; 255
     7d6:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>3)
     7d8:	89 85       	ldd	r24, Y+9	; 0x09
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	f9 01       	movw	r30, r18
     7de:	e8 0f       	add	r30, r24
     7e0:	f9 1f       	adc	r31, r25
     7e2:	e5 51       	subi	r30, 0x15	; 21
     7e4:	ff 4f       	sbci	r31, 0xFF	; 255
     7e6:	40 81       	ld	r20, Z
     7e8:	44 30       	cpi	r20, 0x04	; 4
     7ea:	08 f1       	brcs	.+66     	; 0x82e <listenEncoders+0x2e2>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=3;
     7ec:	82 0f       	add	r24, r18
     7ee:	93 1f       	adc	r25, r19
     7f0:	fc 01       	movw	r30, r24
     7f2:	e5 51       	subi	r30, 0x15	; 21
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	80 83       	st	Z, r24
     7fa:	19 c0       	rjmp	.+50     	; 0x82e <listenEncoders+0x2e2>
				}
			}else
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])--;
     7fc:	89 85       	ldd	r24, Y+9	; 0x09
     7fe:	f9 01       	movw	r30, r18
     800:	e8 0f       	add	r30, r24
     802:	f1 1d       	adc	r31, r1
     804:	e5 51       	subi	r30, 0x15	; 21
     806:	ff 4f       	sbci	r31, 0xFF	; 255
     808:	80 81       	ld	r24, Z
     80a:	81 50       	subi	r24, 0x01	; 1
     80c:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>3)
     80e:	89 85       	ldd	r24, Y+9	; 0x09
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	f9 01       	movw	r30, r18
     814:	e8 0f       	add	r30, r24
     816:	f9 1f       	adc	r31, r25
     818:	e5 51       	subi	r30, 0x15	; 21
     81a:	ff 4f       	sbci	r31, 0xFF	; 255
     81c:	40 81       	ld	r20, Z
     81e:	44 30       	cpi	r20, 0x04	; 4
     820:	30 f0       	brcs	.+12     	; 0x82e <listenEncoders+0x2e2>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=0;
     822:	82 0f       	add	r24, r18
     824:	93 1f       	adc	r25, r19
     826:	fc 01       	movw	r30, r24
     828:	e5 51       	subi	r30, 0x15	; 21
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	10 82       	st	Z, r1
				}
			}
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
     82e:	89 85       	ldd	r24, Y+9	; 0x09
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	f9 01       	movw	r30, r18
     834:	e8 0f       	add	r30, r24
     836:	f9 1f       	adc	r31, r25
     838:	e5 51       	subi	r30, 0x15	; 21
     83a:	ff 4f       	sbci	r31, 0xFF	; 255
     83c:	40 81       	ld	r20, Z
     83e:	4d 7f       	andi	r20, 0xFD	; 253
     840:	89 f4       	brne	.+34     	; 0x864 <listenEncoders+0x318>
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
     842:	28 0f       	add	r18, r24
     844:	39 1f       	adc	r19, r25
     846:	f9 01       	movw	r30, r18
     848:	e8 56       	subi	r30, 0x68	; 104
     84a:	ff 4f       	sbci	r31, 0xFF	; 255
     84c:	60 81       	ld	r22, Z
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	70 96       	adiw	r30, 0x10	; 16
     852:	80 81       	ld	r24, Z
     854:	2a eb       	ldi	r18, 0xBA	; 186
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	4f ef       	ldi	r20, 0xFF	; 255
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	0e 94 14 17 	call	0x2e28	; 0x2e28 <setTrackVolume>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=0;
				}
			}
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
			{
     862:	95 c0       	rjmp	.+298    	; 0x98e <listenEncoders+0x442>
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
			}else
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],
				currentPattern->trackMainVolumeLSB[currentGlobals->currentTrack],currentPattern->trackMainVolumeMSB[currentGlobals->currentTrack]);		
     864:	f9 01       	movw	r30, r18
     866:	e8 0f       	add	r30, r24
     868:	f9 1f       	adc	r31, r25
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
			}else
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],
     86a:	20 a5       	ldd	r18, Z+40	; 0x28
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 ad       	ldd	r20, Z+56	; 0x38
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	df 01       	movw	r26, r30
     874:	a8 56       	subi	r26, 0x68	; 104
     876:	bf 4f       	sbci	r27, 0xFF	; 255
     878:	6c 91       	ld	r22, X
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	e8 55       	subi	r30, 0x58	; 88
     87e:	ff 4f       	sbci	r31, 0xFF	; 255
     880:	80 81       	ld	r24, Z
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 14 17 	call	0x2e28	; 0x2e28 <setTrackVolume>
     888:	82 c0       	rjmp	.+260    	; 0x98e <listenEncoders+0x442>
				currentPattern->trackMainVolumeLSB[currentGlobals->currentTrack],currentPattern->trackMainVolumeMSB[currentGlobals->currentTrack]);		
			}
			break;
			
			case TrackMenuArrow5:
			if(menuSub==1)
     88a:	a1 30       	cpi	r26, 0x01	; 1
     88c:	19 f4       	brne	.+6      	; 0x894 <listenEncoders+0x348>
			{
				currentGlobals->menuState = TrackMenuArrow4;
     88e:	84 e2       	ldi	r24, 0x24	; 36
     890:	8a 87       	std	Y+10, r24	; 0x0a
     892:	7d c0       	rjmp	.+250    	; 0x98e <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow1;
     894:	81 e2       	ldi	r24, 0x21	; 33
     896:	8a 87       	std	Y+10, r24	; 0x0a
     898:	7a c0       	rjmp	.+244    	; 0x98e <listenEncoders+0x442>
			}
			break;
			
			case TrackMenuArrow5Select:;
			uint16_t sustainTime = (currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack])|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);	
     89a:	49 85       	ldd	r20, Y+9	; 0x09
     89c:	50 e0       	ldi	r21, 0x00	; 0
     89e:	b9 01       	movw	r22, r18
     8a0:	64 0f       	add	r22, r20
     8a2:	75 1f       	adc	r23, r21
     8a4:	fb 01       	movw	r30, r22
     8a6:	e5 53       	subi	r30, 0x35	; 53
     8a8:	ff 4f       	sbci	r31, 0xFF	; 255
     8aa:	80 81       	ld	r24, Z
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	98 2f       	mov	r25, r24
     8b0:	88 27       	eor	r24, r24
     8b2:	70 96       	adiw	r30, 0x10	; 16
     8b4:	60 81       	ld	r22, Z
     8b6:	86 2b       	or	r24, r22
			if(menuSub==1)
     8b8:	a1 30       	cpi	r26, 0x01	; 1
     8ba:	71 f4       	brne	.+28     	; 0x8d8 <listenEncoders+0x38c>
			{
				if((currentGlobals->currentGPButtons)&(0x04))
     8bc:	6a 81       	ldd	r22, Y+2	; 0x02
     8be:	62 ff       	sbrs	r22, 2
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <listenEncoders+0x37a>
				{
					sustainTime++;
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <listenEncoders+0x37e>
				}
				else
				{
					sustainTime = sustainTime+236;
     8c6:	84 51       	subi	r24, 0x14	; 20
     8c8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ca:	81 36       	cpi	r24, 0x61	; 97
     8cc:	ea ee       	ldi	r30, 0xEA	; 234
     8ce:	9e 07       	cpc	r25, r30
     8d0:	80 f0       	brcs	.+32     	; 0x8f2 <listenEncoders+0x3a6>
     8d2:	80 e6       	ldi	r24, 0x60	; 96
     8d4:	9a ee       	ldi	r25, 0xEA	; 234
     8d6:	0d c0       	rjmp	.+26     	; 0x8f2 <listenEncoders+0x3a6>
				{
					sustainTime = 60000;
				}
			}else
			{
				if((currentGlobals->currentGPButtons)&(0x04))
     8d8:	6a 81       	ldd	r22, Y+2	; 0x02
     8da:	62 ff       	sbrs	r22, 2
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <listenEncoders+0x396>
				{
					sustainTime--;
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <listenEncoders+0x39a>
				}else
				{	
					sustainTime = sustainTime - 236;
     8e2:	8c 5e       	subi	r24, 0xEC	; 236
     8e4:	91 09       	sbc	r25, r1
				}
				
				if(sustainTime>60000)
     8e6:	81 36       	cpi	r24, 0x61	; 97
     8e8:	fa ee       	ldi	r31, 0xEA	; 234
     8ea:	9f 07       	cpc	r25, r31
     8ec:	10 f0       	brcs	.+4      	; 0x8f2 <listenEncoders+0x3a6>
				{
					sustainTime = 0;
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
			currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack] = (sustainTime>>8);
     8f2:	42 0f       	add	r20, r18
     8f4:	53 1f       	adc	r21, r19
     8f6:	fa 01       	movw	r30, r20
     8f8:	e5 53       	subi	r30, 0x35	; 53
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	90 83       	st	Z, r25
			currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] = sustainTime; //upper bits will be truncated.
     8fe:	99 85       	ldd	r25, Y+9	; 0x09
     900:	29 0f       	add	r18, r25
     902:	31 1d       	adc	r19, r1
     904:	f9 01       	movw	r30, r18
     906:	e5 52       	subi	r30, 0x25	; 37
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	80 83       	st	Z, r24

			break;
     90c:	40 c0       	rjmp	.+128    	; 0x98e <listenEncoders+0x442>
			
			case GlobalMenuArrow1:
			if(menuSub==1)
     90e:	a1 30       	cpi	r26, 0x01	; 1
     910:	19 f4       	brne	.+6      	; 0x918 <listenEncoders+0x3cc>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     912:	81 e3       	ldi	r24, 0x31	; 49
     914:	8a 87       	std	Y+10, r24	; 0x0a
     916:	3b c0       	rjmp	.+118    	; 0x98e <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     918:	82 e3       	ldi	r24, 0x32	; 50
     91a:	8a 87       	std	Y+10, r24	; 0x0a
     91c:	38 c0       	rjmp	.+112    	; 0x98e <listenEncoders+0x442>
			}
			break;
			
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
     91e:	a1 30       	cpi	r26, 0x01	; 1
     920:	49 f4       	brne	.+18     	; 0x934 <listenEncoders+0x3e8>
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     922:	88 89       	ldd	r24, Y+16	; 0x10
     924:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->midiChannel>15)
     926:	80 31       	cpi	r24, 0x10	; 16
     928:	10 f4       	brcc	.+4      	; 0x92e <listenEncoders+0x3e2>
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     92a:	88 8b       	std	Y+16, r24	; 0x10
     92c:	30 c0       	rjmp	.+96     	; 0x98e <listenEncoders+0x442>
				if(currentGlobals->midiChannel>15)
				{
					currentGlobals->midiChannel=15;
     92e:	8f e0       	ldi	r24, 0x0F	; 15
     930:	88 8b       	std	Y+16, r24	; 0x10
     932:	2d c0       	rjmp	.+90     	; 0x98e <listenEncoders+0x442>
				}
			}
			else
			{
				//decrement midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)-1;
     934:	88 89       	ldd	r24, Y+16	; 0x10
     936:	81 50       	subi	r24, 0x01	; 1
     938:	10 f0       	brcs	.+4      	; 0x93e <listenEncoders+0x3f2>
     93a:	88 8b       	std	Y+16, r24	; 0x10
     93c:	28 c0       	rjmp	.+80     	; 0x98e <listenEncoders+0x442>
				if(currentGlobals->midiChannel>254)
				{
					currentGlobals->midiChannel=0;
     93e:	18 8a       	std	Y+16, r1	; 0x10
     940:	26 c0       	rjmp	.+76     	; 0x98e <listenEncoders+0x442>
				}
			}
			break;
			
			case GlobalMenuArrow2:
			if(menuSub==1)
     942:	a1 30       	cpi	r26, 0x01	; 1
     944:	19 f4       	brne	.+6      	; 0x94c <listenEncoders+0x400>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     946:	81 e3       	ldi	r24, 0x31	; 49
     948:	8a 87       	std	Y+10, r24	; 0x0a
     94a:	21 c0       	rjmp	.+66     	; 0x98e <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     94c:	82 e3       	ldi	r24, 0x32	; 50
     94e:	8a 87       	std	Y+10, r24	; 0x0a
     950:	1e c0       	rjmp	.+60     	; 0x98e <listenEncoders+0x442>
			break;
			
			case GlobalMenuArrow2Select:;
			//change midi note for selected track.
			//midi range is 0 to 127.
			uint8_t currentMidiNote = currentGlobals->midiTrackNote[currentGlobals->currentTrack];
     952:	e9 85       	ldd	r30, Y+9	; 0x09
     954:	2e 2f       	mov	r18, r30
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	ce 01       	movw	r24, r28
     95a:	82 0f       	add	r24, r18
     95c:	93 1f       	adc	r25, r19
     95e:	fc 01       	movw	r30, r24
     960:	81 89       	ldd	r24, Z+17	; 0x11
			if(menuSub==1)
     962:	a1 30       	cpi	r26, 0x01	; 1
     964:	21 f4       	brne	.+8      	; 0x96e <listenEncoders+0x422>
			{
				//not 100% sure how to set this up.
				currentMidiNote++;
     966:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentMidiNote>127)
     968:	32 f4       	brpl	.+12     	; 0x976 <listenEncoders+0x42a>
				{
					currentMidiNote = 127;
     96a:	8f e7       	ldi	r24, 0x7F	; 127
     96c:	04 c0       	rjmp	.+8      	; 0x976 <listenEncoders+0x42a>
				}
			}else
			{
				currentMidiNote--;
     96e:	81 50       	subi	r24, 0x01	; 1
				if(currentMidiNote>128)
     970:	81 38       	cpi	r24, 0x81	; 129
     972:	08 f0       	brcs	.+2      	; 0x976 <listenEncoders+0x42a>
				{
					currentMidiNote = 0;
     974:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			currentGlobals->midiTrackNote[currentGlobals->currentTrack] = currentMidiNote;
     976:	f9 01       	movw	r30, r18
     978:	ec 0f       	add	r30, r28
     97a:	fd 1f       	adc	r31, r29
     97c:	81 8b       	std	Z+17, r24	; 0x11
			break;
     97e:	07 c0       	rjmp	.+14     	; 0x98e <listenEncoders+0x442>
			
			case GlobalMenuArrow3:
			//currently unreachable, no settings live here atm		
			if(menuSub==1)
     980:	a1 30       	cpi	r26, 0x01	; 1
     982:	19 f4       	brne	.+6      	; 0x98a <listenEncoders+0x43e>
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     984:	82 e3       	ldi	r24, 0x32	; 50
     986:	8a 87       	std	Y+10, r24	; 0x0a
     988:	02 c0       	rjmp	.+4      	; 0x98e <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     98a:	81 e3       	ldi	r24, 0x31	; 49
     98c:	8a 87       	std	Y+10, r24	; 0x0a
			
			case GlobalMenuArrow3Select:
			//nothing to put here yet.
			break;
		}
		bottomEncoderLastValue = bottomEncoderValue;
     98e:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <bottomEncoderValue>
     992:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <bottomEncoderLastValue>
		//menuSub=0;
	}
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <listenEnoderReset>:
uint8_t listenEnoderReset()
{
	uint8_t returnMe = 2;
	if(topEncoderValue!=topEncoderLastValue){
     99c:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <topEncoderValue>
     9a0:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <topEncoderLastValue>
     9a4:	98 17       	cp	r25, r24
     9a6:	21 f0       	breq	.+8      	; 0x9b0 <listenEnoderReset+0x14>
	returnMe = topEncoderValue%2; //should be 0 or 1.
     9a8:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <topEncoderValue>
     9ac:	81 70       	andi	r24, 0x01	; 1
     9ae:	08 95       	ret
		//menuSub=0;
	}
}
uint8_t listenEnoderReset()
{
	uint8_t returnMe = 2;
     9b0:	82 e0       	ldi	r24, 0x02	; 2
	if(topEncoderValue!=topEncoderLastValue){
	returnMe = topEncoderValue%2; //should be 0 or 1.
	}
	return returnMe;
}
     9b2:	08 95       	ret

000009b4 <initArrays>:
#define F_CPU 16000000UL


//takes an array less than 20 and fills it with blank characters
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	ec 01       	movw	r28, r24
	uint8_t lengthOfString = strlen(myString);
     9be:	fa 01       	movw	r30, r20
     9c0:	01 90       	ld	r0, Z+
     9c2:	00 20       	and	r0, r0
     9c4:	e9 f7       	brne	.-6      	; 0x9c0 <initArrays+0xc>
     9c6:	31 97       	sbiw	r30, 0x01	; 1
     9c8:	8f 01       	movw	r16, r30
     9ca:	04 1b       	sub	r16, r20
     9cc:	15 0b       	sbc	r17, r21
     9ce:	90 2f       	mov	r25, r16
	uint8_t charLeft = 20 - lengthOfString;
     9d0:	84 e1       	ldi	r24, 0x14	; 20
     9d2:	80 1b       	sub	r24, r16
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     9d4:	00 23       	and	r16, r16
     9d6:	a9 f0       	breq	.+42     	; 0xa02 <initArrays+0x4e>
     9d8:	fa 01       	movw	r30, r20
     9da:	25 e1       	ldi	r18, 0x15	; 21
     9dc:	26 9f       	mul	r18, r22
     9de:	d0 01       	movw	r26, r0
     9e0:	27 9f       	mul	r18, r23
     9e2:	b0 0d       	add	r27, r0
     9e4:	11 24       	eor	r1, r1
     9e6:	ac 0f       	add	r26, r28
     9e8:	bd 1f       	adc	r27, r29
     9ea:	2f ef       	ldi	r18, 0xFF	; 255
     9ec:	20 0f       	add	r18, r16
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	2f 5f       	subi	r18, 0xFF	; 255
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	42 0f       	add	r20, r18
     9f6:	53 1f       	adc	r21, r19
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     9f8:	21 91       	ld	r18, Z+
     9fa:	2d 93       	st	X+, r18
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
	uint8_t lengthOfString = strlen(myString);
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     9fc:	e4 17       	cp	r30, r20
     9fe:	f5 07       	cpc	r31, r21
     a00:	d9 f7       	brne	.-10     	; 0x9f8 <initArrays+0x44>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     a02:	88 23       	and	r24, r24
     a04:	89 f0       	breq	.+34     	; 0xa28 <initArrays+0x74>
	{
		myArray[stringNumber][currentIndex] = ' ';
     a06:	45 e1       	ldi	r20, 0x15	; 21
     a08:	46 9f       	mul	r20, r22
     a0a:	90 01       	movw	r18, r0
     a0c:	47 9f       	mul	r20, r23
     a0e:	30 0d       	add	r19, r0
     a10:	11 24       	eor	r1, r1
     a12:	c2 0f       	add	r28, r18
     a14:	d3 1f       	adc	r29, r19
     a16:	08 0f       	add	r16, r24
     a18:	80 e2       	ldi	r24, 0x20	; 32
     a1a:	fe 01       	movw	r30, r28
     a1c:	e9 0f       	add	r30, r25
     a1e:	f1 1d       	adc	r31, r1
     a20:	80 83       	st	Z, r24
		currentIndex++;
     a22:	9f 5f       	subi	r25, 0xFF	; 255
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     a24:	90 13       	cpse	r25, r16
     a26:	f9 cf       	rjmp	.-14     	; 0xa1a <initArrays+0x66>
	{
		myArray[stringNumber][currentIndex] = ' ';
		currentIndex++;
	}
}
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	08 95       	ret

00000a32 <initBank>:

void initBank(Pattern *currentInitPattern)
{
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	ac 01       	movw	r20, r24
     a38:	fc 01       	movw	r30, r24
     a3a:	e8 55       	subi	r30, 0x58	; 88
     a3c:	ff 4f       	sbci	r31, 0xFF	; 255
     a3e:	ec 01       	movw	r28, r24
     a40:	c8 57       	subi	r28, 0x78	; 120
     a42:	df 4f       	sbci	r29, 0xFF	; 255
     a44:	dc 01       	movw	r26, r24
     a46:	a5 51       	subi	r26, 0x15	; 21
     a48:	bf 4f       	sbci	r27, 0xFF	; 255
	for(uint8_t i = 0; i<16; i++)
     a4a:	90 e0       	ldi	r25, 0x00	; 0
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
    currentInitPattern->trackPlayMode[i] = 0x01;
     a4c:	31 e0       	ldi	r19, 0x01	; 1
	currentInitPattern->envelopeType[i] = 3;
     a4e:	23 e0       	ldi	r18, 0x03	; 3

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
     a50:	9f 5f       	subi	r25, 0xFF	; 255
     a52:	91 93       	st	Z+, r25
    currentInitPattern->trackPlayMode[i] = 0x01;
     a54:	39 93       	st	Y+, r19
	currentInitPattern->envelopeType[i] = 3;
     a56:	2d 93       	st	X+, r18
	currentInitPattern->trackSustainTimeLSB[i] = 0;
     a58:	12 aa       	std	Z+50, r1	; 0x32
	currentInitPattern->trackSustainTimeMSB[i] = 0;
     a5a:	12 a2       	std	Z+34, r1	; 0x22
	}
}

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
     a5c:	90 31       	cpi	r25, 0x10	; 16
     a5e:	c1 f7       	brne	.-16     	; 0xa50 <initBank+0x1e>
     a60:	fa 01       	movw	r30, r20
     a62:	e5 50       	subi	r30, 0x05	; 5
     a64:	ff 4f       	sbci	r31, 0xFF	; 255
     a66:	9a 01       	movw	r18, r20
     a68:	25 58       	subi	r18, 0x85	; 133
     a6a:	3e 4f       	sbci	r19, 0xFE	; 254
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     a6c:	11 92       	st	Z+, r1
     a6e:	11 92       	st	Z+, r1
	currentInitPattern->envelopeType[i] = 3;
	currentInitPattern->trackSustainTimeLSB[i] = 0;
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
     a70:	e2 17       	cp	r30, r18
     a72:	f3 07       	cpc	r31, r19
     a74:	d9 f7       	brne	.-10     	; 0xa6c <initBank+0x3a>
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
 
  }
  //We need to take these and put them in global. 
  currentInitPattern->patternBPM = 120;
     a76:	fa 01       	movw	r30, r20
     a78:	e8 53       	subi	r30, 0x38	; 56
     a7a:	ff 4f       	sbci	r31, 0xFF	; 255
     a7c:	88 e7       	ldi	r24, 0x78	; 120
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	91 83       	std	Z+1, r25	; 0x01
     a82:	80 83       	st	Z, r24
  currentInitPattern->numSteps = 16;
     a84:	32 96       	adiw	r30, 0x02	; 2
     a86:	80 e1       	ldi	r24, 0x10	; 16
     a88:	80 83       	st	Z, r24
}
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	08 95       	ret

00000a90 <initGlobals>:

void initGlobals(Globals *currentGlobals, uint8_t factoryReset)
{
     a90:	fc 01       	movw	r30, r24
		currentGlobals->currentTrigButtons=0; //current state of Trig buttons.
     a92:	11 82       	std	Z+1, r1	; 0x01
     a94:	10 82       	st	Z, r1
		currentGlobals->currentGPButtons=0; //current state of GP buttons
     a96:	12 82       	std	Z+2, r1	; 0x02
		currentGlobals->currentPatternNumber=0; //current pattern, between 1 and 256
     a98:	17 82       	std	Z+7, r1	; 0x07
		currentGlobals->currentStep=0; // current step in the sequencer
     a9a:	10 86       	std	Z+8, r1	; 0x08
		currentGlobals->currentTrack=0; //current track being edited
     a9c:	11 86       	std	Z+9, r1	; 0x09
		currentGlobals->menuState=0; //where the menu is currently
     a9e:	12 86       	std	Z+10, r1	; 0x0a
		currentGlobals->playState=0; //whether the sequencer is playing, stopped, or paused.
     aa0:	13 86       	std	Z+11, r1	; 0x0b
		currentGlobals->factoryReset=0; //we may not need this in this struct, but good to have for now.
     aa2:	14 86       	std	Z+12, r1	; 0x0c
		currentGlobals->buttonSwitchFlag=0; // could be rolled into value bits.
     aa4:	15 86       	std	Z+13, r1	; 0x0d
		currentGlobals->valueChangeFlag=0; //bit 0 -> changes in encoders, bit 1-> changes in buttons, bit2 -> changes in knobs
     aa6:	16 86       	std	Z+14, r1	; 0x0e
		currentGlobals->knobStatus=0; //top 4 bits: knob type, bottom 4 bits: knob location.
     aa8:	17 86       	std	Z+15, r1	; 0x0f
		currentGlobals->releaseCounter = 0;
     aaa:	dc 01       	movw	r26, r24
     aac:	ab 55       	subi	r26, 0x5B	; 91
     aae:	bf 4f       	sbci	r27, 0xFF	; 255
     ab0:	1d 92       	st	X+, r1
     ab2:	1d 92       	st	X+, r1
     ab4:	1d 92       	st	X+, r1
     ab6:	1c 92       	st	X, r1
     ab8:	13 97       	sbiw	r26, 0x03	; 3
		currentGlobals->lastGlobalTimer = 0;
     aba:	a8 5b       	subi	r26, 0xB8	; 184
     abc:	bf 4f       	sbci	r27, 0xFF	; 255
     abe:	1d 92       	st	X+, r1
     ac0:	1d 92       	st	X+, r1
     ac2:	1d 92       	st	X+, r1
     ac4:	1c 92       	st	X, r1
     ac6:	13 97       	sbiw	r26, 0x03	; 3
		currentGlobals->clockCounter = 0;
     ac8:	12 97       	sbiw	r26, 0x02	; 2
     aca:	1d 92       	st	X+, r1
     acc:	1c 92       	st	X, r1
		currentGlobals->currentTrigSequencer = 0;
     ace:	14 82       	std	Z+4, r1	; 0x04
     ad0:	13 82       	std	Z+3, r1	; 0x03
		currentGlobals->currentTrigMidi = 0;
     ad2:	16 82       	std	Z+6, r1	; 0x06
     ad4:	15 82       	std	Z+5, r1	; 0x05
		if(factoryReset==1)
     ad6:	61 30       	cpi	r22, 0x01	; 1
     ad8:	09 f5       	brne	.+66     	; 0xb1c <initGlobals+0x8c>
		{
			currentGlobals->midiChannel=0;
     ada:	10 8a       	std	Z+16, r1	; 0x10
			currentGlobals->midiTrackNote[0] = 0x24;
     adc:	84 e2       	ldi	r24, 0x24	; 36
     ade:	81 8b       	std	Z+17, r24	; 0x11
			currentGlobals->midiTrackNote[1] = 0x25;
     ae0:	85 e2       	ldi	r24, 0x25	; 37
     ae2:	82 8b       	std	Z+18, r24	; 0x12
			currentGlobals->midiTrackNote[2] = 0x26;
     ae4:	86 e2       	ldi	r24, 0x26	; 38
     ae6:	83 8b       	std	Z+19, r24	; 0x13
			currentGlobals->midiTrackNote[3] = 0x27;
     ae8:	87 e2       	ldi	r24, 0x27	; 39
     aea:	84 8b       	std	Z+20, r24	; 0x14
			currentGlobals->midiTrackNote[4] = 0x28;
     aec:	88 e2       	ldi	r24, 0x28	; 40
     aee:	85 8b       	std	Z+21, r24	; 0x15
			currentGlobals->midiTrackNote[5] = 0x29;
     af0:	89 e2       	ldi	r24, 0x29	; 41
     af2:	86 8b       	std	Z+22, r24	; 0x16
			currentGlobals->midiTrackNote[6] = 0x2a;
     af4:	8a e2       	ldi	r24, 0x2A	; 42
     af6:	87 8b       	std	Z+23, r24	; 0x17
			currentGlobals->midiTrackNote[7] = 0x2b;
     af8:	8b e2       	ldi	r24, 0x2B	; 43
     afa:	80 8f       	std	Z+24, r24	; 0x18
			currentGlobals->midiTrackNote[8] = 0x2c;
     afc:	8c e2       	ldi	r24, 0x2C	; 44
     afe:	81 8f       	std	Z+25, r24	; 0x19
			currentGlobals->midiTrackNote[9] = 0x2d;
     b00:	8d e2       	ldi	r24, 0x2D	; 45
     b02:	82 8f       	std	Z+26, r24	; 0x1a
			currentGlobals->midiTrackNote[10] = 0x2e;
     b04:	8e e2       	ldi	r24, 0x2E	; 46
     b06:	83 8f       	std	Z+27, r24	; 0x1b
			currentGlobals->midiTrackNote[11] = 0x2f;
     b08:	8f e2       	ldi	r24, 0x2F	; 47
     b0a:	84 8f       	std	Z+28, r24	; 0x1c
			currentGlobals->midiTrackNote[12] = 0x30;
     b0c:	80 e3       	ldi	r24, 0x30	; 48
     b0e:	85 8f       	std	Z+29, r24	; 0x1d
			currentGlobals->midiTrackNote[13] = 0x31;
     b10:	81 e3       	ldi	r24, 0x31	; 49
     b12:	86 8f       	std	Z+30, r24	; 0x1e
			currentGlobals->midiTrackNote[14] = 0x32;
     b14:	82 e3       	ldi	r24, 0x32	; 50
     b16:	87 8f       	std	Z+31, r24	; 0x1f
			currentGlobals->midiTrackNote[15] = 0x33;
     b18:	83 e3       	ldi	r24, 0x33	; 51
     b1a:	80 a3       	std	Z+32, r24	; 0x20
     b1c:	08 95       	ret

00000b1e <initTimer>:
void initTimer() //we only need to use 1 timer, and Use ISRs for that. 
{
	//we're using timer 2, because it's the highest priority 8 bit timer interupt. 
	
		//here we need to setup our timer interrupt
		TCCR2A = (1 << WGM21); //set to clear on correct compare
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
		TCCR2B = (1 << CS21) | (1 << CS20); // set pre-scaler to 64
     b24:	93 e0       	ldi	r25, 0x03	; 3
     b26:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
		OCR2A = 50; // every 25 ticks will be 0.0001 seconds at this pre scale.
     b2a:	92 e3       	ldi	r25, 0x32	; 50
     b2c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
		TIMSK2 = (1 << OCIE2A); // Enable OCR0A compare interrupt
     b30:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     b34:	08 95       	ret

00000b36 <updateTimers>:
		//interrupts should now be good to go.
}
void updateTimers(Globals *currentGlobals, uint32_t currentTime)
{
     b36:	8f 92       	push	r8
     b38:	9f 92       	push	r9
     b3a:	af 92       	push	r10
     b3c:	bf 92       	push	r11
     b3e:	cf 92       	push	r12
     b40:	df 92       	push	r13
     b42:	ef 92       	push	r14
     b44:	ff 92       	push	r15
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
	uint8_t change = 0;
	if(change=currentTime-(currentGlobals->lastGlobalTimer))
     b4a:	fc 01       	movw	r30, r24
     b4c:	e3 51       	subi	r30, 0x13	; 19
     b4e:	ff 4f       	sbci	r31, 0xFF	; 255
     b50:	20 81       	ld	r18, Z
     b52:	84 2e       	mov	r8, r20
     b54:	82 1a       	sub	r8, r18
     b56:	28 2d       	mov	r18, r8
     b58:	09 f1       	breq	.+66     	; 0xb9c <updateTimers+0x66>
	{
		currentGlobals->clockCounter = (currentGlobals->clockCounter)+change;
     b5a:	dc 01       	movw	r26, r24
     b5c:	a5 51       	subi	r26, 0x15	; 21
     b5e:	bf 4f       	sbci	r27, 0xFF	; 255
     b60:	ed 91       	ld	r30, X+
     b62:	fc 91       	ld	r31, X
     b64:	11 97       	sbiw	r26, 0x01	; 1
     b66:	e8 0d       	add	r30, r8
     b68:	f1 1d       	adc	r31, r1
     b6a:	ed 93       	st	X+, r30
     b6c:	fc 93       	st	X, r31
		currentGlobals->releaseCounter = (currentGlobals->releaseCounter)+change;
     b6e:	fc 01       	movw	r30, r24
     b70:	eb 55       	subi	r30, 0x5B	; 91
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	c0 80       	ld	r12, Z
     b76:	d1 80       	ldd	r13, Z+1	; 0x01
     b78:	e2 80       	ldd	r14, Z+2	; 0x02
     b7a:	f3 80       	ldd	r15, Z+3	; 0x03
     b7c:	46 01       	movw	r8, r12
     b7e:	57 01       	movw	r10, r14
     b80:	82 0e       	add	r8, r18
     b82:	91 1c       	adc	r9, r1
     b84:	a1 1c       	adc	r10, r1
     b86:	b1 1c       	adc	r11, r1
     b88:	80 82       	st	Z, r8
     b8a:	91 82       	std	Z+1, r9	; 0x01
     b8c:	a2 82       	std	Z+2, r10	; 0x02
     b8e:	b3 82       	std	Z+3, r11	; 0x03
		currentGlobals->lastGlobalTimer = currentTime;
     b90:	e8 5b       	subi	r30, 0xB8	; 184
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	40 83       	st	Z, r20
     b96:	51 83       	std	Z+1, r21	; 0x01
     b98:	62 83       	std	Z+2, r22	; 0x02
     b9a:	73 83       	std	Z+3, r23	; 0x03
	}
	
}
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
     ba8:	bf 90       	pop	r11
     baa:	af 90       	pop	r10
     bac:	9f 90       	pop	r9
     bae:	8f 90       	pop	r8
     bb0:	08 95       	ret

00000bb2 <factoryResetCheck>:
void factoryResetCheck(uint8_t *factoryReset, Pattern *currentPattern, Globals *currentGlobals)
{
     bb2:	af 92       	push	r10
     bb4:	bf 92       	push	r11
     bb6:	cf 92       	push	r12
     bb8:	df 92       	push	r13
     bba:	ef 92       	push	r14
     bbc:	ff 92       	push	r15
     bbe:	0f 93       	push	r16
     bc0:	1f 93       	push	r17
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	65 97       	sbiw	r28, 0x15	; 21
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	cd bf       	out	0x3d, r28	; 61
	if(((~PINA)&0x01)&&((~PINL)&0x01))
     bd6:	00 99       	sbic	0x00, 0	; 0
     bd8:	6f c0       	rjmp	.+222    	; 0xcb8 <factoryResetCheck+0x106>
     bda:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     bde:	20 fd       	sbrc	r18, 0
     be0:	6b c0       	rjmp	.+214    	; 0xcb8 <factoryResetCheck+0x106>
     be2:	8a 01       	movw	r16, r20
     be4:	6b 01       	movw	r12, r22
     be6:	7c 01       	movw	r14, r24
	{//if both buttons are pressed on startup, wait 4 seconds
		outputS("FactoryReset?       ",0);
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	80 e6       	ldi	r24, 0x60	; 96
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	0e 94 97 13 	call	0x272e	; 0x272e <outputS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bf4:	2f ef       	ldi	r18, 0xFF	; 255
     bf6:	84 e3       	ldi	r24, 0x34	; 52
     bf8:	9c e0       	ldi	r25, 0x0C	; 12
     bfa:	21 50       	subi	r18, 0x01	; 1
     bfc:	80 40       	sbci	r24, 0x00	; 0
     bfe:	90 40       	sbci	r25, 0x00	; 0
     c00:	e1 f7       	brne	.-8      	; 0xbfa <factoryResetCheck+0x48>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <factoryResetCheck+0x52>
     c04:	00 00       	nop
		_delay_ms(4000);

		if(((~PINA)&0x01)&&((~PINL)&0x01))
     c06:	00 99       	sbic	0x00, 0	; 0
     c08:	57 c0       	rjmp	.+174    	; 0xcb8 <factoryResetCheck+0x106>
     c0a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     c0e:	80 fd       	sbrc	r24, 0
     c10:	53 c0       	rjmp	.+166    	; 0xcb8 <factoryResetCheck+0x106>
		{
			
			uint8_t choice = 2;
			uint8_t select = 0;
			char resetArray[21] = "yes?        no?     ";
     c12:	85 e1       	ldi	r24, 0x15	; 21
     c14:	ea e8       	ldi	r30, 0x8A	; 138
     c16:	f2 e0       	ldi	r31, 0x02	; 2
     c18:	de 01       	movw	r26, r28
     c1a:	11 96       	adiw	r26, 0x01	; 1
     c1c:	01 90       	ld	r0, Z+
     c1e:	0d 92       	st	X+, r0
     c20:	8a 95       	dec	r24
     c22:	e1 f7       	brne	.-8      	; 0xc1c <factoryResetCheck+0x6a>
			while(choice==2){
				outputS(resetArray,1);
				select = listenEnoderReset();
				if(select==0)
				{
					resetArray[4] = 8;
     c24:	68 94       	set
     c26:	aa 24       	eor	r10, r10
     c28:	a3 f8       	bld	r10, 3
					resetArray[15] = ' ';
     c2a:	68 94       	set
     c2c:	bb 24       	eor	r11, r11
     c2e:	b5 f8       	bld	r11, 5
			
			uint8_t choice = 2;
			uint8_t select = 0;
			char resetArray[21] = "yes?        no?     ";
			while(choice==2){
				outputS(resetArray,1);
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	0e 94 97 13 	call	0x272e	; 0x272e <outputS>
				select = listenEnoderReset();
     c3c:	af de       	rcall	.-674    	; 0x99c <listenEnoderReset>
				if(select==0)
     c3e:	81 11       	cpse	r24, r1
     c40:	05 c0       	rjmp	.+10     	; 0xc4c <factoryResetCheck+0x9a>
				{
					resetArray[4] = 8;
     c42:	ad 82       	std	Y+5, r10	; 0x05
					resetArray[15] = ' ';
     c44:	b8 8a       	std	Y+16, r11	; 0x10
				if(select==1)
				{
					resetArray[4] = ' ';
					resetArray[15] = 8;
				}
				if((~PINB)&(1<<5))
     c46:	1d 99       	sbic	0x03, 5	; 3
     c48:	f3 cf       	rjmp	.-26     	; 0xc30 <factoryResetCheck+0x7e>
     c4a:	0b c0       	rjmp	.+22     	; 0xc62 <factoryResetCheck+0xb0>
				if(select==0)
				{
					resetArray[4] = 8;
					resetArray[15] = ' ';
				}
				if(select==1)
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	29 f4       	brne	.+10     	; 0xc5a <factoryResetCheck+0xa8>
				{
					resetArray[4] = ' ';
     c50:	bd 82       	std	Y+5, r11	; 0x05
					resetArray[15] = 8;
     c52:	a8 8a       	std	Y+16, r10	; 0x10
				}
				if((~PINB)&(1<<5))
     c54:	1d 99       	sbic	0x03, 5	; 3
     c56:	ec cf       	rjmp	.-40     	; 0xc30 <factoryResetCheck+0x7e>
     c58:	2f c0       	rjmp	.+94     	; 0xcb8 <factoryResetCheck+0x106>
     c5a:	1d 99       	sbic	0x03, 5	; 3
     c5c:	e9 cf       	rjmp	.-46     	; 0xc30 <factoryResetCheck+0x7e>
		{
			
			uint8_t choice = 2;
			uint8_t select = 0;
			char resetArray[21] = "yes?        no?     ";
			while(choice==2){
     c5e:	82 30       	cpi	r24, 0x02	; 2
     c60:	39 f3       	breq	.-50     	; 0xc30 <factoryResetCheck+0x7e>
				{
					choice = select; //break out of while loop, and reset, or not.
				}
			}
			
			if(select==0) //yes was selected.
     c62:	81 11       	cpse	r24, r1
     c64:	29 c0       	rjmp	.+82     	; 0xcb8 <factoryResetCheck+0x106>
			{
				outputS("Progress:           ",2);
     c66:	62 e0       	ldi	r22, 0x02	; 2
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	85 e7       	ldi	r24, 0x75	; 117
     c6c:	92 e0       	ldi	r25, 0x02	; 2
     c6e:	0e 94 97 13 	call	0x272e	; 0x272e <outputS>
				(*factoryReset)=1;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	f7 01       	movw	r30, r14
     c76:	80 83       	st	Z, r24
				initGlobals(currentGlobals, *factoryReset);
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	c8 01       	movw	r24, r16
     c7c:	09 df       	rcall	.-494    	; 0xa90 <initGlobals>
				factoryResetEeprom(*currentPattern);
     c7e:	8d b7       	in	r24, 0x3d	; 61
     c80:	9e b7       	in	r25, 0x3e	; 62
     c82:	8b 57       	subi	r24, 0x7B	; 123
     c84:	91 40       	sbci	r25, 0x01	; 1
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	9e bf       	out	0x3e, r25	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	8d bf       	out	0x3d, r24	; 61
     c90:	ad b7       	in	r26, 0x3d	; 61
     c92:	be b7       	in	r27, 0x3e	; 62
     c94:	11 96       	adiw	r26, 0x01	; 1
     c96:	8b e7       	ldi	r24, 0x7B	; 123
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	f6 01       	movw	r30, r12
     c9c:	01 90       	ld	r0, Z+
     c9e:	0d 92       	st	X+, r0
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <factoryResetCheck+0xea>
     ca4:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <factoryResetEeprom>
				globalWrite(currentGlobals);
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	c8 01       	movw	r24, r16
     cb4:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <globalWrite>
		}
		
	}
	
	
     cb8:	65 96       	adiw	r28, 0x15	; 21
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	df 90       	pop	r13
     cd2:	cf 90       	pop	r12
     cd4:	bf 90       	pop	r11
     cd6:	af 90       	pop	r10
     cd8:	08 95       	ret

00000cda <startADCConversion>:



uint8_t startADCConversion()
{
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     cda:	ea e7       	ldi	r30, 0x7A	; 122
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	80 64       	ori	r24, 0x40	; 64
     ce2:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     ce4:	80 81       	ld	r24, Z
     ce6:	86 fd       	sbrc	r24, 6
     ce8:	fd cf       	rjmp	.-6      	; 0xce4 <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.	
     cea:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
     cee:	08 95       	ret

00000cf0 <initADC>:

void initADC()
{
	DDRF |= 0B00000111; //init pins F2, 1, and 0 as select pins on the external mux.
     cf0:	80 b3       	in	r24, 0x10	; 16
     cf2:	87 60       	ori	r24, 0x07	; 7
     cf4:	80 bb       	out	0x10, r24	; 16
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     cf6:	80 e2       	ldi	r24, 0x20	; 32
     cf8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     cfc:	87 e8       	ldi	r24, 0x87	; 135
     cfe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     d02:	88 e0       	ldi	r24, 0x08	; 8
     d04:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     d08:	8f ef       	ldi	r24, 0xFF	; 255
     d0a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     d0e:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     d12:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <knobBufferCounter>
	startADCConversion();
     d16:	e1 cf       	rjmp	.-62     	; 0xcda <startADCConversion>
     d18:	08 95       	ret

00000d1a <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     d1a:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     d1c:	98 2f       	mov	r25, r24
     d1e:	96 95       	lsr	r25
     d20:	96 95       	lsr	r25
     d22:	2f e2       	ldi	r18, 0x2F	; 47
     d24:	92 9f       	mul	r25, r18
     d26:	91 2d       	mov	r25, r1
     d28:	11 24       	eor	r1, r1
     d2a:	96 95       	lsr	r25
     d2c:	2c e2       	ldi	r18, 0x2C	; 44
     d2e:	92 9f       	mul	r25, r18
     d30:	80 19       	sub	r24, r0
     d32:	11 24       	eor	r1, r1
     d34:	98 2f       	mov	r25, r24
	if(select<40)
     d36:	88 32       	cpi	r24, 0x28	; 40
     d38:	70 f4       	brcc	.+28     	; 0xd56 <selectKnob+0x3c>
	{
		ADCSRB = (1 << MUX5);
     d3a:	88 e0       	ldi	r24, 0x08	; 8
     d3c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     d40:	c9 2f       	mov	r28, r25
     d42:	c7 70       	andi	r28, 0x07	; 7
		//uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     d44:	96 95       	lsr	r25
     d46:	96 95       	lsr	r25
     d48:	96 95       	lsr	r25
     d4a:	90 62       	ori	r25, 0x20	; 32
     d4c:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     d50:	c4 df       	rcall	.-120    	; 0xcda <startADCConversion>
		

		//then the external multiplexer
		PORTF = muxSelect;
     d52:	c1 bb       	out	0x11, r28	; 17
     d54:	20 c0       	rjmp	.+64     	; 0xd96 <selectKnob+0x7c>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     d56:	89 32       	cpi	r24, 0x29	; 41
     d58:	71 f0       	breq	.+28     	; 0xd76 <selectKnob+0x5c>
     d5a:	18 f4       	brcc	.+6      	; 0xd62 <selectKnob+0x48>
     d5c:	88 32       	cpi	r24, 0x28	; 40
     d5e:	31 f0       	breq	.+12     	; 0xd6c <selectKnob+0x52>
     d60:	1a c0       	rjmp	.+52     	; 0xd96 <selectKnob+0x7c>
     d62:	8a 32       	cpi	r24, 0x2A	; 42
     d64:	69 f0       	breq	.+26     	; 0xd80 <selectKnob+0x66>
     d66:	8b 32       	cpi	r24, 0x2B	; 43
     d68:	81 f0       	breq	.+32     	; 0xd8a <selectKnob+0x70>
     d6a:	15 c0       	rjmp	.+42     	; 0xd96 <selectKnob+0x7c>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     d6c:	85 e2       	ldi	r24, 0x25	; 37
     d6e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     d72:	b3 df       	rcall	.-154    	; 0xcda <startADCConversion>
		break;
     d74:	10 c0       	rjmp	.+32     	; 0xd96 <selectKnob+0x7c>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     d76:	86 e2       	ldi	r24, 0x26	; 38
     d78:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     d7c:	ae df       	rcall	.-164    	; 0xcda <startADCConversion>
		break;
     d7e:	0b c0       	rjmp	.+22     	; 0xd96 <selectKnob+0x7c>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     d80:	87 e2       	ldi	r24, 0x27	; 39
     d82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     d86:	a9 df       	rcall	.-174    	; 0xcda <startADCConversion>
		break;
     d88:	06 c0       	rjmp	.+12     	; 0xd96 <selectKnob+0x7c>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     d8a:	80 e2       	ldi	r24, 0x20	; 32
     d8c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     d90:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     d94:	a2 df       	rcall	.-188    	; 0xcda <startADCConversion>
		break;
		}
	
	}
	
}
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <updateKnob>:

void updateKnob(uint8_t select, Globals *currentGlobals)
{
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	8b 01       	movw	r16, r22
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
     da4:	c8 2f       	mov	r28, r24
     da6:	d0 e0       	ldi	r29, 0x00	; 0
     da8:	98 df       	rcall	.-208    	; 0xcda <startADCConversion>
     daa:	f8 01       	movw	r30, r16
     dac:	ec 0f       	add	r30, r28
     dae:	fd 1f       	adc	r31, r29
     db0:	81 a3       	std	Z+33, r24	; 0x21
		currentGlobals->filteredKnobBuffer[select] = 
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
     db2:	e3 5b       	subi	r30, 0xB3	; 179
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	40 81       	ld	r20, Z

void updateKnob(uint8_t select, Globals *currentGlobals)
{
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
		currentGlobals->filteredKnobBuffer[select] = 
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	84 1b       	sub	r24, r20
     dbc:	91 09       	sbc	r25, r1
     dbe:	9c 01       	movw	r18, r24
     dc0:	12 f4       	brpl	.+4      	; 0xdc6 <updateKnob+0x2c>
     dc2:	2f 5f       	subi	r18, 0xFF	; 255
     dc4:	3f 4f       	sbci	r19, 0xFF	; 255
     dc6:	35 95       	asr	r19
     dc8:	27 95       	ror	r18
     dca:	24 0f       	add	r18, r20
     dcc:	20 83       	st	Z, r18
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	08 95       	ret

00000dd8 <initializeKnob>:
void initializeKnob(Globals *currentGlobals)
{
     dd8:	fc 01       	movw	r30, r24
     dda:	e3 5b       	subi	r30, 0xB3	; 179
     ddc:	ff 4f       	sbci	r31, 0xFF	; 255
     dde:	9c 01       	movw	r18, r24
     de0:	27 58       	subi	r18, 0x87	; 135
     de2:	3f 4f       	sbci	r19, 0xFF	; 255
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
     de4:	91 91       	ld	r25, Z+
     de6:	93 a7       	std	Z+43, r25	; 0x2b
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
void initializeKnob(Globals *currentGlobals)
{
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
     de8:	e2 17       	cp	r30, r18
     dea:	f3 07       	cpc	r31, r19
     dec:	d9 f7       	brne	.-10     	; 0xde4 <initializeKnob+0xc>
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
	}
}
     dee:	08 95       	ret

00000df0 <interperetKnob>:

void interperetKnob(uint8_t select, Pattern *currentKnobPattern, Globals *currentGlobals)
{//this function will compare outputs, and write to our struct.
     df0:	4f 92       	push	r4
     df2:	5f 92       	push	r5
     df4:	6f 92       	push	r6
     df6:	7f 92       	push	r7
     df8:	af 92       	push	r10
     dfa:	bf 92       	push	r11
     dfc:	cf 92       	push	r12
     dfe:	df 92       	push	r13
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
	select = select%44;
     e0c:	98 2f       	mov	r25, r24
     e0e:	96 95       	lsr	r25
     e10:	96 95       	lsr	r25
     e12:	2f e2       	ldi	r18, 0x2F	; 47
     e14:	92 9f       	mul	r25, r18
     e16:	91 2d       	mov	r25, r1
     e18:	11 24       	eor	r1, r1
     e1a:	96 95       	lsr	r25
     e1c:	2c e2       	ldi	r18, 0x2C	; 44
     e1e:	92 9f       	mul	r25, r18
     e20:	80 19       	sub	r24, r0
     e22:	11 24       	eor	r1, r1
     e24:	98 2f       	mov	r25, r24
	
	if (select<40)
     e26:	88 32       	cpi	r24, 0x28	; 40
     e28:	08 f0       	brcs	.+2      	; 0xe2c <interperetKnob+0x3c>
     e2a:	c5 c1       	rjmp	.+906    	; 0x11b6 <interperetKnob+0x3c6>
	{
		uint8_t positionSelect = select%8;
     e2c:	18 2f       	mov	r17, r24
     e2e:	17 70       	andi	r17, 0x07	; 7
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
		uint8_t bankSwitch = select/8;
     e30:	86 95       	lsr	r24
     e32:	86 95       	lsr	r24
     e34:	86 95       	lsr	r24
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
     e36:	da 01       	movw	r26, r20
     e38:	1d 96       	adiw	r26, 0x0d	; 13
     e3a:	2c 91       	ld	r18, X
     e3c:	20 ff       	sbrs	r18, 0
     e3e:	05 c0       	rjmp	.+10     	; 0xe4a <interperetKnob+0x5a>
		{
			positionSelectTracks=positionSelectTracks+8;
     e40:	68 94       	set
     e42:	aa 24       	eor	r10, r10
     e44:	a3 f8       	bld	r10, 3
     e46:	a1 0e       	add	r10, r17
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <interperetKnob+0x5c>
	select = select%44;
	
	if (select<40)
	{
		uint8_t positionSelect = select%8;
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
     e4a:	a1 2e       	mov	r10, r17
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
		{
			positionSelectTracks=positionSelectTracks+8;
		}
		
		switch (bankSwitch){
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	09 f4       	brne	.+2      	; 0xe52 <interperetKnob+0x62>
     e50:	99 c0       	rjmp	.+306    	; 0xf84 <interperetKnob+0x194>
     e52:	ea 01       	movw	r28, r20
     e54:	6b 01       	movw	r12, r22
     e56:	83 30       	cpi	r24, 0x03	; 3
     e58:	30 f4       	brcc	.+12     	; 0xe66 <interperetKnob+0x76>
     e5a:	88 23       	and	r24, r24
     e5c:	59 f0       	breq	.+22     	; 0xe74 <interperetKnob+0x84>
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	09 f4       	brne	.+2      	; 0xe64 <interperetKnob+0x74>
     e62:	67 c0       	rjmp	.+206    	; 0xf32 <interperetKnob+0x142>
     e64:	c6 c1       	rjmp	.+908    	; 0x11f2 <interperetKnob+0x402>
     e66:	83 30       	cpi	r24, 0x03	; 3
     e68:	09 f4       	brne	.+2      	; 0xe6c <interperetKnob+0x7c>
     e6a:	e1 c0       	rjmp	.+450    	; 0x102e <interperetKnob+0x23e>
     e6c:	84 30       	cpi	r24, 0x04	; 4
     e6e:	09 f4       	brne	.+2      	; 0xe72 <interperetKnob+0x82>
     e70:	2e c1       	rjmp	.+604    	; 0x10ce <interperetKnob+0x2de>
     e72:	bf c1       	rjmp	.+894    	; 0x11f2 <interperetKnob+0x402>
			uint8_t newRead = 0;
			case 0:; //outputVolume
			
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
     e74:	e9 2e       	mov	r14, r25
     e76:	f1 2c       	mov	r15, r1
     e78:	ca 01       	movw	r24, r20
     e7a:	8e 0d       	add	r24, r14
     e7c:	9f 1d       	adc	r25, r15
     e7e:	fc 01       	movw	r30, r24
     e80:	e7 58       	subi	r30, 0x87	; 135
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
     e86:	bc 97       	sbiw	r30, 0x2c	; 44
     e88:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
     e8a:	26 17       	cp	r18, r22
     e8c:	20 f4       	brcc	.+8      	; 0xe96 <interperetKnob+0xa6>
	{
		returnMe = v1-v2;
     e8e:	b6 2f       	mov	r27, r22
     e90:	b2 1b       	sub	r27, r18
     e92:	2b 2f       	mov	r18, r27
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <interperetKnob+0xa8>
	}
	else
	{
		returnMe = v2-v1;
     e96:	26 1b       	sub	r18, r22
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];

			if(checkVariation(newRead,prevRead)>2)
     e98:	23 30       	cpi	r18, 0x03	; 3
     e9a:	08 f4       	brcc	.+2      	; 0xe9e <interperetKnob+0xae>
     e9c:	aa c1       	rjmp	.+852    	; 0x11f2 <interperetKnob+0x402>
			{
				
				int16_t negCheckValue = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <__floatsisf>
     ea8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     eac:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
     eb0:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <__data_start+0x2>
     eb4:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <__data_start+0x3>
     eb8:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__divsf3>
     ebc:	2b 01       	movw	r4, r22
     ebe:	3c 01       	movw	r6, r24
     ec0:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <NegativeOffset>
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <__floatsisf>
     ece:	9b 01       	movw	r18, r22
     ed0:	ac 01       	movw	r20, r24
     ed2:	c3 01       	movw	r24, r6
     ed4:	b2 01       	movw	r22, r4
     ed6:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <__subsf3>
     eda:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__fixsfsi>
     ede:	86 2f       	mov	r24, r22
     ee0:	26 2f       	mov	r18, r22
     ee2:	37 2f       	mov	r19, r23
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee6:	94 60       	ori	r25, 0x04	; 4
     ee8:	9e 87       	std	Y+14, r25	; 0x0e
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value 
     eea:	1f 87       	std	Y+15, r17	; 0x0f
				
				currentKnobPattern->outputLevelLSB[positionSelect] = (negCheckValue);
     eec:	61 2f       	mov	r22, r17
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	f6 01       	movw	r30, r12
     ef2:	e6 0f       	add	r30, r22
     ef4:	f7 1f       	adc	r31, r23
     ef6:	80 87       	std	Z+8, r24	; 0x08
				if(negCheckValue>(-1))
     ef8:	33 23       	and	r19, r19
     efa:	2c f0       	brlt	.+10     	; 0xf06 <interperetKnob+0x116>
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 0;	
     efc:	f6 01       	movw	r30, r12
     efe:	e6 0f       	add	r30, r22
     f00:	f7 1f       	adc	r31, r23
     f02:	10 82       	st	Z, r1
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <interperetKnob+0x120>
				}else
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 255;
     f06:	9f ef       	ldi	r25, 0xFF	; 255
     f08:	f6 01       	movw	r30, r12
     f0a:	e6 0f       	add	r30, r22
     f0c:	f7 1f       	adc	r31, r23
     f0e:	90 83       	st	Z, r25
				}
				setOutputVolume(currentKnobPattern->outputLevelLSB[positionSelect], currentKnobPattern->outputLevelMSB[positionSelect], positionSelect);
     f10:	f6 01       	movw	r30, r12
     f12:	e6 0f       	add	r30, r22
     f14:	f7 1f       	adc	r31, r23
     f16:	41 2f       	mov	r20, r17
     f18:	60 81       	ld	r22, Z
     f1a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <setOutputVolume>
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     f1e:	ce 0d       	add	r28, r14
     f20:	df 1d       	adc	r29, r15
     f22:	fe 01       	movw	r30, r28
     f24:	e7 58       	subi	r30, 0x87	; 135
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	c3 5b       	subi	r28, 0xB3	; 179
     f2a:	df 4f       	sbci	r29, 0xFF	; 255
     f2c:	88 81       	ld	r24, Y
     f2e:	80 83       	st	Z, r24
     f30:	60 c1       	rjmp	.+704    	; 0x11f2 <interperetKnob+0x402>
			}
			break;
			
 			case 1: //pitch
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
     f32:	89 2f       	mov	r24, r25
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	9a 01       	movw	r18, r20
     f38:	28 0f       	add	r18, r24
     f3a:	39 1f       	adc	r19, r25
     f3c:	f9 01       	movw	r30, r18
     f3e:	e3 5b       	subi	r30, 0xB3	; 179
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	40 81       	ld	r20, Z
     f44:	bc 96       	adiw	r30, 0x2c	; 44
     f46:	20 81       	ld	r18, Z
     f48:	24 17       	cp	r18, r20
     f4a:	09 f4       	brne	.+2      	; 0xf4e <interperetKnob+0x15e>
     f4c:	52 c1       	rjmp	.+676    	; 0x11f2 <interperetKnob+0x402>
 			{
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     f4e:	2e 85       	ldd	r18, Y+14	; 0x0e
     f50:	24 60       	ori	r18, 0x04	; 4
     f52:	2e 87       	std	Y+14, r18	; 0x0e
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     f54:	21 2f       	mov	r18, r17
     f56:	20 61       	ori	r18, 0x10	; 16
     f58:	2f 87       	std	Y+15, r18	; 0x0f
 				currentKnobPattern->outputPitch[positionSelect] = (currentGlobals->filteredKnobBuffer[select]^128);
     f5a:	fb 01       	movw	r30, r22
     f5c:	e1 0f       	add	r30, r17
     f5e:	f1 1d       	adc	r31, r1
     f60:	40 58       	subi	r20, 0x80	; 128
     f62:	40 8b       	std	Z+16, r20	; 0x10
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     f64:	8c 0f       	add	r24, r28
     f66:	9d 1f       	adc	r25, r29
     f68:	dc 01       	movw	r26, r24
     f6a:	a7 58       	subi	r26, 0x87	; 135
     f6c:	bf 4f       	sbci	r27, 0xFF	; 255
     f6e:	ec 01       	movw	r28, r24
     f70:	c3 5b       	subi	r28, 0xB3	; 179
     f72:	df 4f       	sbci	r29, 0xFF	; 255
     f74:	88 81       	ld	r24, Y
     f76:	8c 93       	st	X, r24
				outputSampleRate(positionSelect, 0, currentKnobPattern->outputPitch[positionSelect]);
     f78:	40 89       	ldd	r20, Z+16	; 0x10
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	81 2f       	mov	r24, r17
     f7e:	0e 94 67 17 	call	0x2ece	; 0x2ece <outputSampleRate>
     f82:	37 c1       	rjmp	.+622    	; 0x11f2 <interperetKnob+0x402>
 			}
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
     f84:	e9 2f       	mov	r30, r25
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	ca 01       	movw	r24, r20
     f8a:	8e 0f       	add	r24, r30
     f8c:	9f 1f       	adc	r25, r31
     f8e:	dc 01       	movw	r26, r24
     f90:	a7 58       	subi	r26, 0x87	; 135
     f92:	bf 4f       	sbci	r27, 0xFF	; 255
     f94:	dc 91       	ld	r29, X
     f96:	9c 97       	sbiw	r26, 0x2c	; 44
     f98:	cc 91       	ld	r28, X
     f9a:	dc 17       	cp	r29, r28
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <interperetKnob+0x1b0>
     f9e:	29 c1       	rjmp	.+594    	; 0x11f2 <interperetKnob+0x402>
			{
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     fa0:	ca 2c       	mov	r12, r10
     fa2:	d1 2c       	mov	r13, r1
     fa4:	9b 01       	movw	r18, r22
     fa6:	2c 0d       	add	r18, r12
     fa8:	3d 1d       	adc	r19, r13
     faa:	d9 01       	movw	r26, r18
     fac:	a8 5a       	subi	r26, 0xA8	; 168
     fae:	bf 4f       	sbci	r27, 0xFF	; 255
     fb0:	8c 91       	ld	r24, X
     fb2:	50 97       	sbiw	r26, 0x10	; 16
     fb4:	2c 91       	ld	r18, X
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     fb6:	da 01       	movw	r26, r20
     fb8:	1e 96       	adiw	r26, 0x0e	; 14
     fba:	9c 91       	ld	r25, X
     fbc:	1e 97       	sbiw	r26, 0x0e	; 14
     fbe:	94 60       	ori	r25, 0x04	; 4
     fc0:	1e 96       	adiw	r26, 0x0e	; 14
     fc2:	9c 93       	st	X, r25
     fc4:	1e 97       	sbiw	r26, 0x0e	; 14
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
     fc6:	91 2f       	mov	r25, r17
     fc8:	90 62       	ori	r25, 0x20	; 32
     fca:	1f 96       	adiw	r26, 0x0f	; 15
     fcc:	9c 93       	st	X, r25
     fce:	1f 97       	sbiw	r26, 0x0f	; 15
				
				if(currentGlobals->currentGPButtons&0x04) 
     fd0:	12 96       	adiw	r26, 0x02	; 2
     fd2:	9c 91       	ld	r25, X
     fd4:	92 ff       	sbrs	r25, 2
     fd6:	0a c0       	rjmp	.+20     	; 0xfec <interperetKnob+0x1fc>
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
			{
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	dc 01       	movw	r26, r24
     fdc:	b2 2b       	or	r27, r18
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
				
				if(currentGlobals->currentGPButtons&0x04) 
				{ //if "fine" is on:
						totalAttackTime = totalAttackTime+((currentGlobals->filteredKnobBuffer[select])-(currentGlobals->lastFilteredKnobBuffer[select])); 
     fde:	8c 2f       	mov	r24, r28
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	8d 1b       	sub	r24, r29
     fe4:	91 09       	sbc	r25, r1
     fe6:	8a 0f       	add	r24, r26
     fe8:	9b 1f       	adc	r25, r27
     fea:	0a c0       	rjmp	.+20     	; 0x1000 <interperetKnob+0x210>
				}else
				{
					totalAttackTime = ((currentGlobals->filteredKnobBuffer[select])-1)*238;
     fec:	2c 2f       	mov	r18, r28
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	21 50       	subi	r18, 0x01	; 1
     ff2:	31 09       	sbc	r19, r1
     ff4:	ae ee       	ldi	r26, 0xEE	; 238
     ff6:	a2 9f       	mul	r26, r18
     ff8:	c0 01       	movw	r24, r0
     ffa:	a3 9f       	mul	r26, r19
     ffc:	90 0d       	add	r25, r0
     ffe:	11 24       	eor	r1, r1
				}
				if(totalAttackTime<20)
    1000:	84 31       	cpi	r24, 0x14	; 20
    1002:	91 05       	cpc	r25, r1
    1004:	10 f4       	brcc	.+4      	; 0x100a <interperetKnob+0x21a>
				{
					totalAttackTime = 20; 
    1006:	84 e1       	ldi	r24, 0x14	; 20
    1008:	90 e0       	ldi	r25, 0x00	; 0
				}
				currentKnobPattern->trackAttackTimeMSB[positionSelectTracks] = ((totalAttackTime)>>8);
    100a:	6c 0d       	add	r22, r12
    100c:	7d 1d       	adc	r23, r13
    100e:	db 01       	movw	r26, r22
    1010:	a8 5b       	subi	r26, 0xB8	; 184
    1012:	bf 4f       	sbci	r27, 0xFF	; 255
    1014:	9c 93       	st	X, r25
				currentKnobPattern->trackAttackTimeLSB[positionSelectTracks] = (totalAttackTime); //this should truncate the top 8 bits. 
    1016:	50 96       	adiw	r26, 0x10	; 16
    1018:	8c 93       	st	X, r24

				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
    101a:	e4 0f       	add	r30, r20
    101c:	f5 1f       	adc	r31, r21
    101e:	df 01       	movw	r26, r30
    1020:	a7 58       	subi	r26, 0x87	; 135
    1022:	bf 4f       	sbci	r27, 0xFF	; 255
    1024:	e3 5b       	subi	r30, 0xB3	; 179
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	80 81       	ld	r24, Z
    102a:	8c 93       	st	X, r24
    102c:	e2 c0       	rjmp	.+452    	; 0x11f2 <interperetKnob+0x402>
			}
			break;
 			
 			case 3: //release Envelope
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
    102e:	29 2f       	mov	r18, r25
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	ca 01       	movw	r24, r20
    1034:	82 0f       	add	r24, r18
    1036:	93 1f       	adc	r25, r19
    1038:	fc 01       	movw	r30, r24
    103a:	e7 58       	subi	r30, 0x87	; 135
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	f0 81       	ld	r31, Z
    1040:	dc 01       	movw	r26, r24
    1042:	a3 5b       	subi	r26, 0xB3	; 179
    1044:	bf 4f       	sbci	r27, 0xFF	; 255
    1046:	ec 91       	ld	r30, X
    1048:	fe 17       	cp	r31, r30
    104a:	09 f4       	brne	.+2      	; 0x104e <interperetKnob+0x25e>
    104c:	d2 c0       	rjmp	.+420    	; 0x11f2 <interperetKnob+0x402>
 			{
				 uint16_t totalReleaseTime = currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks]|((currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks])<<8);
    104e:	6a 2d       	mov	r22, r10
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	a6 01       	movw	r20, r12
    1054:	46 0f       	add	r20, r22
    1056:	57 1f       	adc	r21, r23
    1058:	da 01       	movw	r26, r20
    105a:	a8 58       	subi	r26, 0x88	; 136
    105c:	bf 4f       	sbci	r27, 0xFF	; 255
    105e:	8c 91       	ld	r24, X
    1060:	50 97       	sbiw	r26, 0x10	; 16
    1062:	4c 91       	ld	r20, X
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
    1064:	9e 85       	ldd	r25, Y+14	; 0x0e
    1066:	94 60       	ori	r25, 0x04	; 4
    1068:	9e 87       	std	Y+14, r25	; 0x0e
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
    106a:	91 2f       	mov	r25, r17
    106c:	90 63       	ori	r25, 0x30	; 48
    106e:	9f 87       	std	Y+15, r25	; 0x0f
				if(currentGlobals->currentGPButtons&0x04)
    1070:	9a 81       	ldd	r25, Y+2	; 0x02
    1072:	92 ff       	sbrs	r25, 2
    1074:	0a c0       	rjmp	.+20     	; 0x108a <interperetKnob+0x29a>
			break;
 			
 			case 3: //release Envelope
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
 			{
				 uint16_t totalReleaseTime = currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks]|((currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks])<<8);
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	dc 01       	movw	r26, r24
    107a:	b4 2b       	or	r27, r20
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
				if(currentGlobals->currentGPButtons&0x04)
				{ //if "fine" is on:
					totalReleaseTime = totalReleaseTime+((currentGlobals->filteredKnobBuffer[select])-(currentGlobals->lastFilteredKnobBuffer[select]));
    107c:	8e 2f       	mov	r24, r30
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	8f 1b       	sub	r24, r31
    1082:	91 09       	sbc	r25, r1
    1084:	8a 0f       	add	r24, r26
    1086:	9b 1f       	adc	r25, r27
    1088:	0a c0       	rjmp	.+20     	; 0x109e <interperetKnob+0x2ae>
				}else
				{
					totalReleaseTime = ((currentGlobals->filteredKnobBuffer[select])-1)*238;
    108a:	4e 2f       	mov	r20, r30
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	41 50       	subi	r20, 0x01	; 1
    1090:	51 09       	sbc	r21, r1
    1092:	ee ee       	ldi	r30, 0xEE	; 238
    1094:	e4 9f       	mul	r30, r20
    1096:	c0 01       	movw	r24, r0
    1098:	e5 9f       	mul	r30, r21
    109a:	90 0d       	add	r25, r0
    109c:	11 24       	eor	r1, r1
				}
				if(totalReleaseTime<20)
    109e:	84 31       	cpi	r24, 0x14	; 20
    10a0:	91 05       	cpc	r25, r1
    10a2:	10 f4       	brcc	.+4      	; 0x10a8 <interperetKnob+0x2b8>
				{
					totalReleaseTime = 220;
    10a4:	8c ed       	ldi	r24, 0xDC	; 220
    10a6:	90 e0       	ldi	r25, 0x00	; 0
				}
				currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks] = ((totalReleaseTime)>>8);
    10a8:	c6 0e       	add	r12, r22
    10aa:	d7 1e       	adc	r13, r23
    10ac:	f6 01       	movw	r30, r12
    10ae:	e8 59       	subi	r30, 0x98	; 152
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	90 83       	st	Z, r25
				currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks] = (totalReleaseTime);	
    10b4:	70 96       	adiw	r30, 0x10	; 16
    10b6:	80 83       	st	Z, r24
				
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
    10b8:	2c 0f       	add	r18, r28
    10ba:	3d 1f       	adc	r19, r29
    10bc:	f9 01       	movw	r30, r18
    10be:	e7 58       	subi	r30, 0x87	; 135
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	d9 01       	movw	r26, r18
    10c4:	a3 5b       	subi	r26, 0xB3	; 179
    10c6:	bf 4f       	sbci	r27, 0xFF	; 255
    10c8:	8c 91       	ld	r24, X
    10ca:	80 83       	st	Z, r24
    10cc:	92 c0       	rjmp	.+292    	; 0x11f2 <interperetKnob+0x402>
 			}
 			break;
 			
 			case 4:;
 			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
    10ce:	e9 2e       	mov	r14, r25
    10d0:	f1 2c       	mov	r15, r1
    10d2:	ca 01       	movw	r24, r20
    10d4:	8e 0d       	add	r24, r14
    10d6:	9f 1d       	adc	r25, r15
    10d8:	fc 01       	movw	r30, r24
    10da:	e7 58       	subi	r30, 0x87	; 135
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
    10e0:	bc 97       	sbiw	r30, 0x2c	; 44
    10e2:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
    10e4:	26 17       	cp	r18, r22
    10e6:	20 f4       	brcc	.+8      	; 0x10f0 <interperetKnob+0x300>
	{
		returnMe = v1-v2;
    10e8:	b6 2f       	mov	r27, r22
    10ea:	b2 1b       	sub	r27, r18
    10ec:	2b 2f       	mov	r18, r27
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <interperetKnob+0x302>
	}
	else
	{
		returnMe = v2-v1;
    10f0:	26 1b       	sub	r18, r22
 			break;
 			
 			case 4:;
 			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];
 			if(checkVariation(newRead,prevRead)>2)
    10f2:	23 30       	cpi	r18, 0x03	; 3
    10f4:	08 f4       	brcc	.+2      	; 0x10f8 <interperetKnob+0x308>
    10f6:	7d c0       	rjmp	.+250    	; 0x11f2 <interperetKnob+0x402>
 			{
				int16_t negCheckValueTrack = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <__floatsisf>
    1102:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1106:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    110a:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <__data_start+0x2>
    110e:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <__data_start+0x3>
    1112:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__divsf3>
    1116:	2b 01       	movw	r4, r22
    1118:	3c 01       	movw	r6, r24
    111a:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <NegativeOffset>
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <__floatsisf>
    1128:	9b 01       	movw	r18, r22
    112a:	ac 01       	movw	r20, r24
    112c:	c3 01       	movw	r24, r6
    112e:	b2 01       	movw	r22, r4
    1130:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <__subsf3>
    1134:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__fixsfsi>
    1138:	86 2f       	mov	r24, r22
    113a:	97 2f       	mov	r25, r23
    113c:	9c 01       	movw	r18, r24
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
    113e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1140:	84 60       	ori	r24, 0x04	; 4
    1142:	8e 87       	std	Y+14, r24	; 0x0e
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
    1144:	81 2f       	mov	r24, r17
    1146:	80 64       	ori	r24, 0x40	; 64
    1148:	8f 87       	std	Y+15, r24	; 0x0f
				
	 			currentKnobPattern->trackMainVolumeLSB[positionSelectTracks] = (negCheckValueTrack);
    114a:	b1 2c       	mov	r11, r1
    114c:	f6 01       	movw	r30, r12
    114e:	ea 0d       	add	r30, r10
    1150:	fb 1d       	adc	r31, r11
    1152:	60 af       	std	Z+56, r22	; 0x38
	 			if(negCheckValueTrack>(-1))
    1154:	33 23       	and	r19, r19
    1156:	2c f0       	brlt	.+10     	; 0x1162 <interperetKnob+0x372>
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 0;
    1158:	f6 01       	movw	r30, r12
    115a:	ea 0d       	add	r30, r10
    115c:	fb 1d       	adc	r31, r11
    115e:	10 a6       	std	Z+40, r1	; 0x28
    1160:	05 c0       	rjmp	.+10     	; 0x116c <interperetKnob+0x37c>
	 			}else
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 255;
    1162:	8f ef       	ldi	r24, 0xFF	; 255
    1164:	f6 01       	movw	r30, r12
    1166:	ea 0d       	add	r30, r10
    1168:	fb 1d       	adc	r31, r11
    116a:	80 a7       	std	Z+40, r24	; 0x28
	 			}

				
				if(currentKnobPattern->envelopeType[positionSelectTracks]==1||currentKnobPattern->envelopeType[positionSelectTracks]==3) //set track volume directly if Envelope mode is only release, or none. 
    116c:	f6 01       	movw	r30, r12
    116e:	ea 0d       	add	r30, r10
    1170:	fb 1d       	adc	r31, r11
    1172:	e5 51       	subi	r30, 0x15	; 21
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	80 81       	ld	r24, Z
    1178:	8d 7f       	andi	r24, 0xFD	; 253
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	81 f4       	brne	.+32     	; 0x119e <interperetKnob+0x3ae>
				{
	 				setTrackVolume(currentKnobPattern->trackSampleLSB[positionSelectTracks], currentKnobPattern->trackSampleMSB[positionSelectTracks],
    117e:	ac 0c       	add	r10, r12
    1180:	bd 1c       	adc	r11, r13
    1182:	d5 01       	movw	r26, r10
    1184:	a8 56       	subi	r26, 0x68	; 104
    1186:	bf 4f       	sbci	r27, 0xFF	; 255
    1188:	c5 01       	movw	r24, r10
    118a:	88 55       	subi	r24, 0x58	; 88
    118c:	9f 4f       	sbci	r25, 0xFF	; 255
    118e:	f5 01       	movw	r30, r10
    1190:	20 a5       	ldd	r18, Z+40	; 0x28
    1192:	46 2f       	mov	r20, r22
    1194:	6c 91       	ld	r22, X
    1196:	dc 01       	movw	r26, r24
    1198:	8c 91       	ld	r24, X
    119a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <setTrackVolume>
					currentKnobPattern->trackMainVolumeLSB[positionSelectTracks], currentKnobPattern->trackMainVolumeMSB[positionSelectTracks]);
				}
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select]; 
    119e:	8e 01       	movw	r16, r28
    11a0:	0e 0d       	add	r16, r14
    11a2:	1f 1d       	adc	r17, r15
    11a4:	f8 01       	movw	r30, r16
    11a6:	e7 58       	subi	r30, 0x87	; 135
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	d8 01       	movw	r26, r16
    11ac:	a3 5b       	subi	r26, 0xB3	; 179
    11ae:	bf 4f       	sbci	r27, 0xFF	; 255
    11b0:	8c 91       	ld	r24, X
    11b2:	80 83       	st	Z, r24
    11b4:	1e c0       	rjmp	.+60     	; 0x11f2 <interperetKnob+0x402>
		}
		
		
	}else
	{
		switch (select)
    11b6:	8a 32       	cpi	r24, 0x2A	; 42
    11b8:	e1 f4       	brne	.+56     	; 0x11f2 <interperetKnob+0x402>
// 			break;
// 			
 			case 42:
			 
			 //we need to do a bit more filtering here. Not sure if that's happening here, or in the actual knob read.
			 if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
    11ba:	fa 01       	movw	r30, r20
    11bc:	e9 58       	subi	r30, 0x89	; 137
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	80 81       	ld	r24, Z
    11c2:	bc 96       	adiw	r30, 0x2c	; 44
    11c4:	90 81       	ld	r25, Z
    11c6:	98 17       	cp	r25, r24
    11c8:	a1 f0       	breq	.+40     	; 0x11f2 <interperetKnob+0x402>
			{//not sure if this works here, but we're going to try it. 
				
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
    11ca:	fa 01       	movw	r30, r20
    11cc:	96 85       	ldd	r25, Z+14	; 0x0e
    11ce:	94 60       	ori	r25, 0x04	; 4
    11d0:	96 87       	std	Z+14, r25	; 0x0e
				currentGlobals->knobStatus = (5<<4); //since all other pot banks are 0-4, the next ones will be 5-8. We should maybe figure out a better system for this, 
    11d2:	90 e5       	ldi	r25, 0x50	; 80
    11d4:	97 87       	std	Z+15, r25	; 0x0f
				//maybe some defines?				
 				currentKnobPattern->patternBPM = currentGlobals->filteredKnobBuffer[select];
    11d6:	fb 01       	movw	r30, r22
    11d8:	e8 53       	subi	r30, 0x38	; 56
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	91 83       	std	Z+1, r25	; 0x01
    11e0:	80 83       	st	Z, r24
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
    11e2:	da 01       	movw	r26, r20
    11e4:	ad 55       	subi	r26, 0x5D	; 93
    11e6:	bf 4f       	sbci	r27, 0xFF	; 255
    11e8:	fa 01       	movw	r30, r20
    11ea:	e9 58       	subi	r30, 0x89	; 137
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	80 81       	ld	r24, Z
    11f0:	8c 93       	st	X, r24
// 			break;
		}
		
	}

}
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	ff 90       	pop	r15
    11fc:	ef 90       	pop	r14
    11fe:	df 90       	pop	r13
    1200:	cf 90       	pop	r12
    1202:	bf 90       	pop	r11
    1204:	af 90       	pop	r10
    1206:	7f 90       	pop	r7
    1208:	6f 90       	pop	r6
    120a:	5f 90       	pop	r5
    120c:	4f 90       	pop	r4
    120e:	08 95       	ret

00001210 <listenKnobs>:

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
    1210:	ef 92       	push	r14
    1212:	ff 92       	push	r15
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	7c 01       	movw	r14, r24
    121c:	8b 01       	movw	r16, r22
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    121e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
    1220:	8c 2f       	mov	r24, r28
    1222:	7b dd       	rcall	.-1290   	; 0xd1a <selectKnob>
		updateKnob(loopCounter, currentGlobals);
    1224:	b8 01       	movw	r22, r16
    1226:	8c 2f       	mov	r24, r28
    1228:	b8 dd       	rcall	.-1168   	; 0xd9a <updateKnob>
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
    122a:	a8 01       	movw	r20, r16
    122c:	b7 01       	movw	r22, r14
    122e:	8c 2f       	mov	r24, r28
    1230:	df dd       	rcall	.-1090   	; 0xdf0 <interperetKnob>

}

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    1232:	cf 5f       	subi	r28, 0xFF	; 255
    1234:	cc 32       	cpi	r28, 0x2C	; 44
    1236:	a1 f7       	brne	.-24     	; 0x1220 <listenKnobs+0x10>
	{
		selectKnob(loopCounter);
		updateKnob(loopCounter, currentGlobals);
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
	}
}
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	08 95       	ret

00001244 <initLEDs>:
extern Pattern currentPattern;
extern uint8_t currentStep;

void initLEDs()
{
	DDRG = 0B00000111; //outputs on G5,2, and 0.
    1244:	87 e0       	ldi	r24, 0x07	; 7
    1246:	83 bb       	out	0x13, r24	; 19
    1248:	08 95       	ret

0000124a <parseLEDs>:
}
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
    124a:	a2 98       	cbi	0x14, 2	; 20
    124c:	27 e0       	ldi	r18, 0x07	; 7
	for(uint8_t j=0; j<7; j++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    124e:	a0 9a       	sbi	0x14, 0	; 20
		if(gpParse&0x80)
    1250:	66 23       	and	r22, r22
    1252:	14 f4       	brge	.+4      	; 0x1258 <parseLEDs+0xe>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    1254:	a1 9a       	sbi	0x14, 1	; 20
    1256:	01 c0       	rjmp	.+2      	; 0x125a <parseLEDs+0x10>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    1258:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    125a:	a0 98       	cbi	0x14, 0	; 20
		gpParse = gpParse << 1;
    125c:	66 0f       	add	r22, r22
    125e:	21 50       	subi	r18, 0x01	; 1
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t j=0; j<7; j++)
    1260:	b1 f7       	brne	.-20     	; 0x124e <parseLEDs+0x4>
    1262:	21 e1       	ldi	r18, 0x11	; 17
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    1264:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
    1266:	99 23       	and	r25, r25
    1268:	14 f4       	brge	.+4      	; 0x126e <parseLEDs+0x24>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    126a:	a1 9a       	sbi	0x14, 1	; 20
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <parseLEDs+0x26>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    126e:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    1270:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	21 50       	subi	r18, 0x01	; 1
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
    1278:	a9 f7       	brne	.-22     	; 0x1264 <parseLEDs+0x1a>
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	
	
	PORTG |= (1 << PG2); //latch pin high
    127a:	a2 9a       	sbi	0x14, 2	; 20
    127c:	08 95       	ret

0000127e <updateLEDs>:
}

void updateLEDs(Pattern ledCurrentPattern, Globals currentGlobals)
{
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	cd 57       	subi	r28, 0x7D	; 125
    1288:	de 4f       	sbci	r29, 0xFE	; 254
    128a:	68 81       	ld	r22, Y
    128c:	c3 58       	subi	r28, 0x83	; 131
    128e:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t shiftedState = currentGlobals.menuState >> 4; //this will get rid of EncoderB
	uint16_t totalLights = currentGlobals.currentTrigButtons|currentGlobals.currentTrigMidi|currentGlobals.currentTrigSequencer; //we want lights from all sources. 
    1290:	cf 57       	subi	r28, 0x7F	; 127
    1292:	de 4f       	sbci	r29, 0xFE	; 254
    1294:	28 81       	ld	r18, Y
    1296:	39 81       	ldd	r19, Y+1	; 0x01
    1298:	c1 58       	subi	r28, 0x81	; 129
    129a:	d1 40       	sbci	r29, 0x01	; 1
    129c:	ca 57       	subi	r28, 0x7A	; 122
    129e:	de 4f       	sbci	r29, 0xFE	; 254
    12a0:	88 81       	ld	r24, Y
    12a2:	99 81       	ldd	r25, Y+1	; 0x01
    12a4:	c6 58       	subi	r28, 0x86	; 134
    12a6:	d1 40       	sbci	r29, 0x01	; 1
    12a8:	82 2b       	or	r24, r18
    12aa:	93 2b       	or	r25, r19
    12ac:	cc 57       	subi	r28, 0x7C	; 124
    12ae:	de 4f       	sbci	r29, 0xFE	; 254
    12b0:	28 81       	ld	r18, Y
    12b2:	39 81       	ldd	r19, Y+1	; 0x01
    12b4:	c4 58       	subi	r28, 0x84	; 132
    12b6:	d1 40       	sbci	r29, 0x01	; 1
    12b8:	28 2b       	or	r18, r24
    12ba:	39 2b       	or	r19, r25
	//no input from midi yet, but we will have that eventually. 
	switch(shiftedState)
    12bc:	c5 57       	subi	r28, 0x75	; 117
    12be:	de 4f       	sbci	r29, 0xFE	; 254
    12c0:	98 81       	ld	r25, Y
    12c2:	cb 58       	subi	r28, 0x8B	; 139
    12c4:	d1 40       	sbci	r29, 0x01	; 1
    12c6:	92 95       	swap	r25
    12c8:	9f 70       	andi	r25, 0x0F	; 15
    12ca:	91 30       	cpi	r25, 0x01	; 1
    12cc:	49 f0       	breq	.+18     	; 0x12e0 <updateLEDs+0x62>
    12ce:	28 f0       	brcs	.+10     	; 0x12da <updateLEDs+0x5c>
    12d0:	92 30       	cpi	r25, 0x02	; 2
    12d2:	d1 f0       	breq	.+52     	; 0x1308 <updateLEDs+0x8a>
    12d4:	93 30       	cpi	r25, 0x03	; 3
    12d6:	d9 f0       	breq	.+54     	; 0x130e <updateLEDs+0x90>
    12d8:	1c c0       	rjmp	.+56     	; 0x1312 <updateLEDs+0x94>
	{
		case 0:
		parseLEDs(totalLights, currentGlobals.currentGPButtons);
    12da:	c9 01       	movw	r24, r18
    12dc:	b6 df       	rcall	.-148    	; 0x124a <parseLEDs>
		break;
    12de:	19 c0       	rjmp	.+50     	; 0x1312 <updateLEDs+0x94>

		case 1:
		parseLEDs(ledCurrentPattern.trackSequence[currentGlobals.currentStep], currentGlobals.currentGPButtons);
    12e0:	c7 57       	subi	r28, 0x77	; 119
    12e2:	de 4f       	sbci	r29, 0xFE	; 254
    12e4:	e8 81       	ld	r30, Y
    12e6:	c9 58       	subi	r28, 0x89	; 137
    12e8:	d1 40       	sbci	r29, 0x01	; 1
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	ee 0f       	add	r30, r30
    12ee:	ff 1f       	adc	r31, r31
    12f0:	86 e0       	ldi	r24, 0x06	; 6
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	8c 0f       	add	r24, r28
    12f6:	9d 1f       	adc	r25, r29
    12f8:	e8 0f       	add	r30, r24
    12fa:	f9 1f       	adc	r31, r25
    12fc:	e5 50       	subi	r30, 0x05	; 5
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	80 81       	ld	r24, Z
    1302:	91 81       	ldd	r25, Z+1	; 0x01
    1304:	a2 df       	rcall	.-188    	; 0x124a <parseLEDs>
		break;

		case 2:
		parseLEDs(totalLights, currentGlobals.currentGPButtons);
    1306:	05 c0       	rjmp	.+10     	; 0x1312 <updateLEDs+0x94>
    1308:	c9 01       	movw	r24, r18
		break;
    130a:	9f df       	rcall	.-194    	; 0x124a <parseLEDs>

		case 3:
		parseLEDs(totalLights, currentGlobals.currentGPButtons);
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <updateLEDs+0x94>
    130e:	c9 01       	movw	r24, r18
    1310:	9c df       	rcall	.-200    	; 0x124a <parseLEDs>
		break;
	}

}
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	08 95       	ret

00001318 <main>:
//Pattern may not need to be volatile, but I'd like to keep it around. 
volatile Pattern currentPattern;
volatile Globals currentGlobals;
volatile uint32_t globalTimer = 0;

int main(){
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	c2 5b       	subi	r28, 0xB2	; 178
    1322:	d3 40       	sbci	r29, 0x03	; 3
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
	uint8_t factoryReset=0; // set this to 1 if you would like to fill the eeprom with Factory data, and erase all user data.
    132e:	19 82       	std	Y+1, r1	; 0x01
	Screen screenBank;
	char testArray[21] = "CurrentTime:         ";
	
	initScreen();
    1330:	0e 94 3a 13 	call	0x2674	; 0x2674 <initScreen>
	initButtons();
    1334:	0e 94 16 01 	call	0x22c	; 0x22c <initButtons>
	initEncoders();
    1338:	7b d8       	rcall	.-3850   	; 0x430 <initEncoders>
	initBank(&currentPattern);
    133a:	8d ef       	ldi	r24, 0xFD	; 253
    133c:	93 e0       	ldi	r25, 0x03	; 3
    133e:	79 db       	rcall	.-2318   	; 0xa32 <initBank>
	twi_init();
    1340:	0e 94 66 19 	call	0x32cc	; 0x32cc <twi_init>
	sei();
    1344:	78 94       	sei
	//factory Reset, we should turn this into a global function. 
	factoryResetCheck(&factoryReset,&currentPattern, &currentGlobals);
    1346:	48 e7       	ldi	r20, 0x78	; 120
    1348:	55 e0       	ldi	r21, 0x05	; 5
    134a:	6d ef       	ldi	r22, 0xFD	; 253
    134c:	73 e0       	ldi	r23, 0x03	; 3
    134e:	ce 01       	movw	r24, r28
    1350:	01 96       	adiw	r24, 0x01	; 1
	
	initTimer();
    1352:	2f dc       	rcall	.-1954   	; 0xbb2 <factoryResetCheck>
    1354:	e4 db       	rcall	.-2104   	; 0xb1e <initTimer>
	initGlobals(&currentGlobals, factoryReset);
    1356:	69 81       	ldd	r22, Y+1	; 0x01
    1358:	88 e7       	ldi	r24, 0x78	; 120
	initLEDs();
    135a:	95 e0       	ldi	r25, 0x05	; 5
    135c:	99 db       	rcall	.-2254   	; 0xa90 <initGlobals>
	initADC();
    135e:	72 df       	rcall	.-284    	; 0x1244 <initLEDs>
    1360:	c7 dc       	rcall	.-1650   	; 0xcf0 <initADC>
	serialInit0();
    1362:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <serialInit0>
	initMidi();
    1366:	0e 94 93 12 	call	0x2526	; 0x2526 <initMidi>
	//initEnvelopes();
	//initSequencer();
	
	
	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
    136a:	60 91 7f 05 	lds	r22, 0x057F	; 0x80057f <currentGlobals+0x7>
    136e:	8d ef       	ldi	r24, 0xFD	; 253
    1370:	93 e0       	ldi	r25, 0x03	; 3
    1372:	0e 94 b1 1b 	call	0x3762	; 0x3762 <eepromLoadPattern>
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    1376:	00 e0       	ldi	r16, 0x00	; 0
    1378:	10 e0       	ldi	r17, 0x00	; 0
	{
		uint8_t loadSelect = i%44;
    137a:	0f 2e       	mov	r0, r31
    137c:	fc e2       	ldi	r31, 0x2C	; 44
    137e:	df 2e       	mov	r13, r31
    1380:	f0 2d       	mov	r31, r0
    1382:	98 01       	movw	r18, r16
    1384:	af e2       	ldi	r26, 0x2F	; 47
    1386:	ba eb       	ldi	r27, 0xBA	; 186
    1388:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    138c:	96 95       	lsr	r25
    138e:	87 95       	ror	r24
    1390:	92 95       	swap	r25
    1392:	82 95       	swap	r24
    1394:	8f 70       	andi	r24, 0x0F	; 15
    1396:	89 27       	eor	r24, r25
    1398:	9f 70       	andi	r25, 0x0F	; 15
    139a:	89 27       	eor	r24, r25
    139c:	d8 9e       	mul	r13, r24
    139e:	90 01       	movw	r18, r0
    13a0:	d9 9e       	mul	r13, r25
    13a2:	30 0d       	add	r19, r0
    13a4:	11 24       	eor	r1, r1
    13a6:	78 01       	movw	r14, r16
    13a8:	e2 1a       	sub	r14, r18
		selectKnob(loadSelect);
    13aa:	f3 0a       	sbc	r15, r19
    13ac:	8e 2d       	mov	r24, r14
    13ae:	b5 dc       	rcall	.-1686   	; 0xd1a <selectKnob>
		updateKnob(loadSelect, &currentGlobals);
    13b0:	68 e7       	ldi	r22, 0x78	; 120
    13b2:	75 e0       	ldi	r23, 0x05	; 5
    13b4:	8e 2d       	mov	r24, r14
    13b6:	f1 dc       	rcall	.-1566   	; 0xd9a <updateKnob>
    13b8:	0f 5f       	subi	r16, 0xFF	; 255
	//initEnvelopes();
	//initSequencer();
	
	
	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    13ba:	1f 4f       	sbci	r17, 0xFF	; 255
    13bc:	08 3b       	cpi	r16, 0xB8	; 184
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	18 07       	cpc	r17, r24
    13c2:	f9 f6       	brne	.-66     	; 0x1382 <main+0x6a>
	{
		uint8_t loadSelect = i%44;
		selectKnob(loadSelect);
		updateKnob(loadSelect, &currentGlobals);
	}
	initializeKnob(&currentGlobals); //then copy it to the lastFilteredKnobBuffer. 
    13c4:	88 e7       	ldi	r24, 0x78	; 120
    13c6:	95 e0       	ldi	r25, 0x05	; 5
    13c8:	07 dd       	rcall	.-1522   	; 0xdd8 <initializeKnob>
    13ca:	69 81       	ldd	r22, Y+1	; 0x01
	globalLoad(&currentGlobals, factoryReset);
    13cc:	88 e7       	ldi	r24, 0x78	; 120
    13ce:	95 e0       	ldi	r25, 0x05	; 5
    13d0:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <globalLoad>
    13d4:	8d b7       	in	r24, 0x3d	; 61
	initMenu(&screenBank, currentPattern, currentGlobals); //fills screenBank with menu strings
    13d6:	9e b7       	in	r25, 0x3e	; 62
    13d8:	81 5f       	subi	r24, 0xF1	; 241
    13da:	91 09       	sbc	r25, r1
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	9e bf       	out	0x3e, r25	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	8d bf       	out	0x3d, r24	; 61
    13e6:	ad b7       	in	r26, 0x3d	; 61
    13e8:	be b7       	in	r27, 0x3e	; 62
    13ea:	11 96       	adiw	r26, 0x01	; 1
    13ec:	81 ef       	ldi	r24, 0xF1	; 241
    13ee:	e8 e7       	ldi	r30, 0x78	; 120
    13f0:	f5 e0       	ldi	r31, 0x05	; 5
    13f2:	01 90       	ld	r0, Z+
    13f4:	0d 92       	st	X+, r0
    13f6:	8a 95       	dec	r24
    13f8:	e1 f7       	brne	.-8      	; 0x13f2 <main+0xda>
    13fa:	8d b7       	in	r24, 0x3d	; 61
    13fc:	9e b7       	in	r25, 0x3e	; 62
    13fe:	8b 57       	subi	r24, 0x7B	; 123
    1400:	91 40       	sbci	r25, 0x01	; 1
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	9e bf       	out	0x3e, r25	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	8d bf       	out	0x3d, r24	; 61
    140c:	ad b7       	in	r26, 0x3d	; 61
    140e:	be b7       	in	r27, 0x3e	; 62
    1410:	11 96       	adiw	r26, 0x01	; 1
    1412:	8b e7       	ldi	r24, 0x7B	; 123
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	ed ef       	ldi	r30, 0xFD	; 253
    1418:	f3 e0       	ldi	r31, 0x03	; 3
    141a:	01 90       	ld	r0, Z+
    141c:	0d 92       	st	X+, r0
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	e1 f7       	brne	.-8      	; 0x141a <main+0x102>
    1422:	ce 01       	movw	r24, r28
    1424:	02 96       	adiw	r24, 0x02	; 2
    1426:	2c d1       	rcall	.+600    	; 0x1680 <initMenu>
    1428:	f8 94       	cli
	//this ISR is used for Button De-Bouncing. Maybe we could put it somewhere else. 
	//TCCR2B = 1<<CS22;//using 256 from pre-scaler
	//TIMSK2 = 1<<TOIE2; //interupt on counter overflow. since we're interupting on value 256 of with a 256 pre-scaler, we're calling this function every 65,536
	//clock cycles. at 16MHz, that equates to every 0.004096, seconds, or every 4 milliseconds. We ~~~should be able to do the same thing from our global counter.

	cli(); //this may not be needed, but also may be effecting things since we're setting interrupt registers after sei has already happened. 
    142a:	78 94       	sei
	sei();
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	40 91 ee 03 	lds	r20, 0x03EE	; 0x8003ee <globalTimer>


while(1) {
	
	
	updateTimers(&currentGlobals, globalTimer); //we update our global timers here. 
    143a:	50 91 ef 03 	lds	r21, 0x03EF	; 0x8003ef <globalTimer+0x1>
    143e:	60 91 f0 03 	lds	r22, 0x03F0	; 0x8003f0 <globalTimer+0x2>
    1442:	70 91 f1 03 	lds	r23, 0x03F1	; 0x8003f1 <globalTimer+0x3>
    1446:	88 e7       	ldi	r24, 0x78	; 120
    1448:	95 e0       	ldi	r25, 0x05	; 5
    144a:	75 db       	rcall	.-2326   	; 0xb36 <updateTimers>
    144c:	68 e7       	ldi	r22, 0x78	; 120
	
	listenTrigButtons(&currentPattern, &currentGlobals);
    144e:	75 e0       	ldi	r23, 0x05	; 5
    1450:	8d ef       	ldi	r24, 0xFD	; 253
    1452:	93 e0       	ldi	r25, 0x03	; 3
    1454:	0e 94 1d 01 	call	0x23a	; 0x23a <listenTrigButtons>
    1458:	08 e7       	ldi	r16, 0x78	; 120
	listenGPButtons(currentPattern, &currentGlobals);
    145a:	15 e0       	ldi	r17, 0x05	; 5
    145c:	1f 93       	push	r17
    145e:	0f 93       	push	r16
    1460:	8d b7       	in	r24, 0x3d	; 61
    1462:	9e b7       	in	r25, 0x3e	; 62
    1464:	8b 57       	subi	r24, 0x7B	; 123
    1466:	91 40       	sbci	r25, 0x01	; 1
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	9e bf       	out	0x3e, r25	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	8d bf       	out	0x3d, r24	; 61
    1472:	ad b7       	in	r26, 0x3d	; 61
    1474:	be b7       	in	r27, 0x3e	; 62
    1476:	11 96       	adiw	r26, 0x01	; 1
    1478:	8b e7       	ldi	r24, 0x7B	; 123
    147a:	91 e0       	ldi	r25, 0x01	; 1
    147c:	ed ef       	ldi	r30, 0xFD	; 253
    147e:	f3 e0       	ldi	r31, 0x03	; 3
    1480:	01 90       	ld	r0, Z+
    1482:	0d 92       	st	X+, r0
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	e1 f7       	brne	.-8      	; 0x1480 <main+0x168>
    1488:	0e 94 86 01 	call	0x30c	; 0x30c <listenGPButtons>
    148c:	8d b7       	in	r24, 0x3d	; 61
	updateLEDs(currentPattern, currentGlobals);
    148e:	9e b7       	in	r25, 0x3e	; 62
    1490:	83 58       	subi	r24, 0x83	; 131
    1492:	9e 4f       	sbci	r25, 0xFE	; 254
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	81 5f       	subi	r24, 0xF1	; 241
    14a0:	91 09       	sbc	r25, r1
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	9e bf       	out	0x3e, r25	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	8d bf       	out	0x3d, r24	; 61
    14ac:	ad b7       	in	r26, 0x3d	; 61
    14ae:	be b7       	in	r27, 0x3e	; 62
    14b0:	11 96       	adiw	r26, 0x01	; 1
    14b2:	81 ef       	ldi	r24, 0xF1	; 241
    14b4:	f8 01       	movw	r30, r16
    14b6:	01 90       	ld	r0, Z+
    14b8:	0d 92       	st	X+, r0
    14ba:	8a 95       	dec	r24
    14bc:	e1 f7       	brne	.-8      	; 0x14b6 <main+0x19e>
    14be:	8d b7       	in	r24, 0x3d	; 61
    14c0:	9e b7       	in	r25, 0x3e	; 62
    14c2:	8b 57       	subi	r24, 0x7B	; 123
    14c4:	91 40       	sbci	r25, 0x01	; 1
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	9e bf       	out	0x3e, r25	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	8d bf       	out	0x3d, r24	; 61
    14d0:	ad b7       	in	r26, 0x3d	; 61
    14d2:	be b7       	in	r27, 0x3e	; 62
    14d4:	11 96       	adiw	r26, 0x01	; 1
    14d6:	8b e7       	ldi	r24, 0x7B	; 123
    14d8:	91 e0       	ldi	r25, 0x01	; 1
    14da:	ed ef       	ldi	r30, 0xFD	; 253
    14dc:	f3 e0       	ldi	r31, 0x03	; 3
    14de:	01 90       	ld	r0, Z+
    14e0:	0d 92       	st	X+, r0
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	e1 f7       	brne	.-8      	; 0x14de <main+0x1c6>
    14e6:	cb de       	rcall	.-618    	; 0x127e <updateLEDs>
	listenEncoders(&currentPattern, &currentGlobals);
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	b8 01       	movw	r22, r16
    14f4:	8d ef       	ldi	r24, 0xFD	; 253
    14f6:	93 e0       	ldi	r25, 0x03	; 3
    14f8:	29 d8       	rcall	.-4014   	; 0x54c <listenEncoders>
	listenKnobs(&currentPattern, &currentGlobals);
    14fa:	b8 01       	movw	r22, r16
    14fc:	8d ef       	ldi	r24, 0xFD	; 253
    14fe:	93 e0       	ldi	r25, 0x03	; 3
    1500:	87 de       	rcall	.-754    	; 0x1210 <listenKnobs>
    1502:	1f 93       	push	r17
	updateSequencer(currentPattern, &currentGlobals);
    1504:	0f 93       	push	r16
    1506:	8d b7       	in	r24, 0x3d	; 61
    1508:	9e b7       	in	r25, 0x3e	; 62
    150a:	8b 57       	subi	r24, 0x7B	; 123
    150c:	91 40       	sbci	r25, 0x01	; 1
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	9e bf       	out	0x3e, r25	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	8d bf       	out	0x3d, r24	; 61
    1518:	ad b7       	in	r26, 0x3d	; 61
    151a:	be b7       	in	r27, 0x3e	; 62
    151c:	11 96       	adiw	r26, 0x01	; 1
    151e:	8b e7       	ldi	r24, 0x7B	; 123
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	ed ef       	ldi	r30, 0xFD	; 253
    1524:	f3 e0       	ldi	r31, 0x03	; 3
    1526:	01 90       	ld	r0, Z+
    1528:	0d 92       	st	X+, r0
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	e1 f7       	brne	.-8      	; 0x1526 <main+0x20e>
    152e:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <updateSequencer>
	updateScreen(&screenBank, &currentPattern, &currentGlobals);
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	a8 01       	movw	r20, r16
    153e:	6d ef       	ldi	r22, 0xFD	; 253
    1540:	73 e0       	ldi	r23, 0x03	; 3
    1542:	ce 01       	movw	r24, r28
    1544:	02 96       	adiw	r24, 0x02	; 2
    1546:	dc d1       	rcall	.+952    	; 0x1900 <updateScreen>
    1548:	8d b7       	in	r24, 0x3d	; 61
	midiRead(currentPattern, currentGlobals);
    154a:	9e b7       	in	r25, 0x3e	; 62
    154c:	81 5f       	subi	r24, 0xF1	; 241
    154e:	91 09       	sbc	r25, r1
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	9e bf       	out	0x3e, r25	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	8d bf       	out	0x3d, r24	; 61
    155a:	ad b7       	in	r26, 0x3d	; 61
    155c:	be b7       	in	r27, 0x3e	; 62
    155e:	11 96       	adiw	r26, 0x01	; 1
    1560:	81 ef       	ldi	r24, 0xF1	; 241
    1562:	f8 01       	movw	r30, r16
    1564:	01 90       	ld	r0, Z+
    1566:	0d 92       	st	X+, r0
    1568:	8a 95       	dec	r24
    156a:	e1 f7       	brne	.-8      	; 0x1564 <main+0x24c>
    156c:	8d b7       	in	r24, 0x3d	; 61
    156e:	9e b7       	in	r25, 0x3e	; 62
    1570:	8b 57       	subi	r24, 0x7B	; 123
    1572:	91 40       	sbci	r25, 0x01	; 1
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	9e bf       	out	0x3e, r25	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	8d bf       	out	0x3d, r24	; 61
    157e:	ad b7       	in	r26, 0x3d	; 61
    1580:	be b7       	in	r27, 0x3e	; 62
    1582:	11 96       	adiw	r26, 0x01	; 1
    1584:	8b e7       	ldi	r24, 0x7B	; 123
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	ed ef       	ldi	r30, 0xFD	; 253
    158a:	f3 e0       	ldi	r31, 0x03	; 3
    158c:	01 90       	ld	r0, Z+
    158e:	0d 92       	st	X+, r0
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	e1 f7       	brne	.-8      	; 0x158c <main+0x274>
    1594:	d8 d7       	rcall	.+4016   	; 0x2546 <midiRead>
    1596:	0f b6       	in	r0, 0x3f	; 63
	releaseUpdate(&currentPattern, &currentGlobals);
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	b8 01       	movw	r22, r16
    15a2:	8d ef       	ldi	r24, 0xFD	; 253
    15a4:	93 e0       	ldi	r25, 0x03	; 3
    15a6:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <releaseUpdate>
    15aa:	45 cf       	rjmp	.-374    	; 0x1436 <main+0x11e>

000015ac <__vector_13>:
    15ac:	1f 92       	push	r1
	//outputS(testArray,0);
	}
}

ISR(TIMER2_COMPA_vect)
{
    15ae:	0f 92       	push	r0
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	0f 92       	push	r0
    15b4:	11 24       	eor	r1, r1
    15b6:	0b b6       	in	r0, 0x3b	; 59
    15b8:	0f 92       	push	r0
    15ba:	2f 93       	push	r18
    15bc:	3f 93       	push	r19
    15be:	4f 93       	push	r20
    15c0:	5f 93       	push	r21
    15c2:	6f 93       	push	r22
    15c4:	7f 93       	push	r23
    15c6:	8f 93       	push	r24
    15c8:	9f 93       	push	r25
    15ca:	af 93       	push	r26
    15cc:	bf 93       	push	r27
    15ce:	ef 93       	push	r30
    15d0:	ff 93       	push	r31
	globalTimer++; //this counts in one order of magnitude smaller than millis : 0.0001 seconds. 
    15d2:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <globalTimer>
    15d6:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <globalTimer+0x1>
    15da:	a0 91 f0 03 	lds	r26, 0x03F0	; 0x8003f0 <globalTimer+0x2>
    15de:	b0 91 f1 03 	lds	r27, 0x03F1	; 0x8003f1 <globalTimer+0x3>
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	a1 1d       	adc	r26, r1
    15e6:	b1 1d       	adc	r27, r1
    15e8:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <globalTimer>
    15ec:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <globalTimer+0x1>
    15f0:	a0 93 f0 03 	sts	0x03F0, r26	; 0x8003f0 <globalTimer+0x2>
    15f4:	b0 93 f1 03 	sts	0x03F1, r27	; 0x8003f1 <globalTimer+0x3>
	//we don't want to do anything else here.
	if(globalTimer%40==0) //every 40 ticks, we want to call Debounce
    15f8:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <globalTimer>
    15fc:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <globalTimer+0x1>
    1600:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <globalTimer+0x2>
    1604:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <globalTimer+0x3>
    1608:	28 e2       	ldi	r18, 0x28	; 40
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e0       	ldi	r20, 0x00	; 0
    160e:	50 e0       	ldi	r21, 0x00	; 0
    1610:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__udivmodsi4>
    1614:	67 2b       	or	r22, r23
    1616:	68 2b       	or	r22, r24
    1618:	69 2b       	or	r22, r25
    161a:	f9 f4       	brne	.+62     	; 0x165a <__vector_13+0xae>

static inline void debounce() //is this Timer interrupt too long?
{
	static uint8_t vcount_low = 0xFF, vcount_high = 0xFF;
	static uint8_t button_state = 0;
	uint8_t state_changed = ~BUTTON_PIN ^ button_state;
    161c:	83 b1       	in	r24, 0x03	; 3
    161e:	20 91 ed 03 	lds	r18, 0x03ED	; 0x8003ed <button_state.1745>
    1622:	80 95       	com	r24
    1624:	38 2f       	mov	r19, r24
    1626:	32 27       	eor	r19, r18
	VC_DEC_OR_SET(vcount_high, vcount_low, state_changed);
    1628:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <vcount_low.1743>
    162c:	93 23       	and	r25, r19
    162e:	89 2f       	mov	r24, r25
    1630:	80 95       	com	r24
    1632:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <vcount_low.1743>
    1636:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <vcount_high.1744>
    163a:	93 23       	and	r25, r19
    163c:	98 27       	eor	r25, r24
    163e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <vcount_high.1744>
    1642:	83 23       	and	r24, r19
	state_changed &= vcount_low & vcount_high;
    1644:	89 23       	and	r24, r25
	button_state ^= state_changed;
    1646:	92 2f       	mov	r25, r18
    1648:	98 27       	eor	r25, r24
    164a:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <button_state.1745>
	buttons_down |= button_state&state_changed;
    164e:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <buttons_down>
    1652:	89 23       	and	r24, r25
    1654:	82 2b       	or	r24, r18
    1656:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <buttons_down>
	{
		debounce();
	}
    165a:	ff 91       	pop	r31
    165c:	ef 91       	pop	r30
    165e:	bf 91       	pop	r27
    1660:	af 91       	pop	r26
    1662:	9f 91       	pop	r25
    1664:	8f 91       	pop	r24
    1666:	7f 91       	pop	r23
    1668:	6f 91       	pop	r22
    166a:	5f 91       	pop	r21
    166c:	4f 91       	pop	r20
    166e:	3f 91       	pop	r19
    1670:	2f 91       	pop	r18
    1672:	0f 90       	pop	r0
    1674:	0b be       	out	0x3b, r0	; 59
    1676:	0f 90       	pop	r0
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	0f 90       	pop	r0
    167c:	1f 90       	pop	r1
    167e:	18 95       	reti

00001680 <initMenu>:
uint8_t prevMenuState; //do we need this anymore?

//I don't like using a global extern here, instead of a passed pointer,
//but I can't seem to get the struct to stay in scope.
void initMenu(Screen *initTheScreen, Pattern currentPattern, Globals currentGlobals)
{
    1680:	cf 92       	push	r12
    1682:	df 92       	push	r13
    1684:	ef 92       	push	r14
    1686:	ff 92       	push	r15
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	8c 01       	movw	r16, r24
    1696:	c2 57       	subi	r28, 0x72	; 114
    1698:	de 4f       	sbci	r29, 0xFE	; 254
    169a:	e8 80       	ld	r14, Y
    169c:	ce 58       	subi	r28, 0x8E	; 142
    169e:	d1 40       	sbci	r29, 0x01	; 1

//screen0
initArrays(initTheScreen->screen0,0,"Performance Mode");
    16a0:	4f e9       	ldi	r20, 0x9F	; 159
    16a2:	52 e0       	ldi	r21, 0x02	; 2
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	85 d9       	rcall	.-3318   	; 0x9b4 <initArrays>
initArrays(initTheScreen->screen0,1,"Pattern:");
    16aa:	40 eb       	ldi	r20, 0xB0	; 176
    16ac:	52 e0       	ldi	r21, 0x02	; 2
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	c8 01       	movw	r24, r16
    16b4:	7f d9       	rcall	.-3330   	; 0x9b4 <initArrays>
initArrays(initTheScreen->screen0,2,"BPM:");
    16b6:	49 eb       	ldi	r20, 0xB9	; 185
    16b8:	52 e0       	ldi	r21, 0x02	; 2
    16ba:	62 e0       	ldi	r22, 0x02	; 2
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	c8 01       	movw	r24, r16
    16c0:	79 d9       	rcall	.-3342   	; 0x9b4 <initArrays>
initArrays(initTheScreen->screen0,3,"Stop");
    16c2:	4e eb       	ldi	r20, 0xBE	; 190
    16c4:	52 e0       	ldi	r21, 0x02	; 2
    16c6:	63 e0       	ldi	r22, 0x03	; 3
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	c8 01       	movw	r24, r16
    16cc:	73 d9       	rcall	.-3354   	; 0x9b4 <initArrays>

//screen1
initArrays(initTheScreen->screen1,0,"Sequence Edit");
    16ce:	68 01       	movw	r12, r16
    16d0:	8d eb       	ldi	r24, 0xBD	; 189
    16d2:	c8 0e       	add	r12, r24
    16d4:	d1 1c       	adc	r13, r1
    16d6:	43 ec       	ldi	r20, 0xC3	; 195
    16d8:	52 e0       	ldi	r21, 0x02	; 2
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	c6 01       	movw	r24, r12
    16e0:	69 d9       	rcall	.-3374   	; 0x9b4 <initArrays>
initArrays(initTheScreen->screen1,1,"Pattern:");
    16e2:	40 eb       	ldi	r20, 0xB0	; 176
    16e4:	52 e0       	ldi	r21, 0x02	; 2
    16e6:	61 e0       	ldi	r22, 0x01	; 1
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	c6 01       	movw	r24, r12
    16ec:	63 d9       	rcall	.-3386   	; 0x9b4 <initArrays>
initArrays(initTheScreen->screen1,2,"Steps:");
    16ee:	41 ed       	ldi	r20, 0xD1	; 209
    16f0:	52 e0       	ldi	r21, 0x02	; 2
    16f2:	62 e0       	ldi	r22, 0x02	; 2
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	c6 01       	movw	r24, r12
    16f8:	5d d9       	rcall	.-3398   	; 0x9b4 <initArrays>
initArrays(initTheScreen->screen1,3,"Step number:");
    16fa:	48 ed       	ldi	r20, 0xD8	; 216
    16fc:	52 e0       	ldi	r21, 0x02	; 2
    16fe:	63 e0       	ldi	r22, 0x03	; 3
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	c6 01       	movw	r24, r12
    1704:	57 d9       	rcall	.-3410   	; 0x9b4 <initArrays>
    1706:	68 01       	movw	r12, r16

//screen2
initArrays(initTheScreen->screen2,0,"Track Settings");
    1708:	86 e8       	ldi	r24, 0x86	; 134
    170a:	c8 1a       	sub	r12, r24
    170c:	8e ef       	ldi	r24, 0xFE	; 254
    170e:	d8 0a       	sbc	r13, r24
    1710:	45 ee       	ldi	r20, 0xE5	; 229
    1712:	52 e0       	ldi	r21, 0x02	; 2
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	c6 01       	movw	r24, r12
    171a:	4c d9       	rcall	.-3432   	; 0x9b4 <initArrays>
initArrays(initTheScreen->screen2,1,"Track:");
    171c:	44 ef       	ldi	r20, 0xF4	; 244
    171e:	52 e0       	ldi	r21, 0x02	; 2
    1720:	61 e0       	ldi	r22, 0x01	; 1
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	c6 01       	movw	r24, r12
    1726:	46 d9       	rcall	.-3444   	; 0x9b4 <initArrays>
initArrays(initTheScreen->screen2,2,"PlayMode:");
    1728:	4b ef       	ldi	r20, 0xFB	; 251
    172a:	52 e0       	ldi	r21, 0x02	; 2
    172c:	62 e0       	ldi	r22, 0x02	; 2
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	c6 01       	movw	r24, r12
    1732:	40 d9       	rcall	.-3456   	; 0x9b4 <initArrays>
initArrays(initTheScreen->screen2,3,"OutRoute:");
    1734:	45 e0       	ldi	r20, 0x05	; 5
    1736:	53 e0       	ldi	r21, 0x03	; 3
    1738:	63 e0       	ldi	r22, 0x03	; 3
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	c6 01       	movw	r24, r12
    173e:	3a d9       	rcall	.-3468   	; 0x9b4 <initArrays>
initArrays(initTheScreen->screen2,4,"EnvelopeMode:");
    1740:	4f e0       	ldi	r20, 0x0F	; 15
    1742:	53 e0       	ldi	r21, 0x03	; 3
    1744:	64 e0       	ldi	r22, 0x04	; 4
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	c6 01       	movw	r24, r12
    174a:	34 d9       	rcall	.-3480   	; 0x9b4 <initArrays>
    174c:	4d e1       	ldi	r20, 0x1D	; 29
initArrays(initTheScreen->screen2,5,"SustainTime:      S");
    174e:	53 e0       	ldi	r21, 0x03	; 3
    1750:	65 e0       	ldi	r22, 0x05	; 5
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	c6 01       	movw	r24, r12
    1756:	2e d9       	rcall	.-3492   	; 0x9b4 <initArrays>
    1758:	68 01       	movw	r12, r16

//screen3
initArrays(initTheScreen->screen3,1,"Midi Channel:");
    175a:	89 ec       	ldi	r24, 0xC9	; 201
    175c:	c8 1a       	sub	r12, r24
    175e:	8d ef       	ldi	r24, 0xFD	; 253
    1760:	d8 0a       	sbc	r13, r24
    1762:	41 e3       	ldi	r20, 0x31	; 49
    1764:	53 e0       	ldi	r21, 0x03	; 3
    1766:	61 e0       	ldi	r22, 0x01	; 1
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	c6 01       	movw	r24, r12
    176c:	23 d9       	rcall	.-3514   	; 0x9b4 <initArrays>
initArrays(initTheScreen->screen3,2,"Midi trig   :");
    176e:	4f e3       	ldi	r20, 0x3F	; 63
    1770:	53 e0       	ldi	r21, 0x03	; 3
    1772:	62 e0       	ldi	r22, 0x02	; 2
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	c6 01       	movw	r24, r12
    1778:	1d d9       	rcall	.-3526   	; 0x9b4 <initArrays>
initArrays(initTheScreen->screen3,3," ");
    177a:	44 ee       	ldi	r20, 0xE4	; 228
    177c:	53 e0       	ldi	r21, 0x03	; 3
    177e:	63 e0       	ldi	r22, 0x03	; 3
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	c6 01       	movw	r24, r12
    1784:	17 d9       	rcall	.-3538   	; 0x9b4 <initArrays>
initArrays(initTheScreen->screen3,0,"Global Settings");
    1786:	4d e4       	ldi	r20, 0x4D	; 77
    1788:	53 e0       	ldi	r21, 0x03	; 3
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	c6 01       	movw	r24, r12
    1790:	11 d9       	rcall	.-3550   	; 0x9b4 <initArrays>

//init all of the knob arrays:
initArrays(initTheScreen->knobScreen,0,"OutVolume x : xxxdb");//string 0 is outVolume
    1792:	68 01       	movw	r12, r16
    1794:	8c e0       	ldi	r24, 0x0C	; 12
    1796:	c8 1a       	sub	r12, r24
    1798:	8d ef       	ldi	r24, 0xFD	; 253
    179a:	d8 0a       	sbc	r13, r24
    179c:	4d e5       	ldi	r20, 0x5D	; 93
    179e:	53 e0       	ldi	r21, 0x03	; 3
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,1,"Pitch : xxx");//string 1 is pitch
    17a6:	06 d9       	rcall	.-3572   	; 0x9b4 <initArrays>
    17a8:	41 e7       	ldi	r20, 0x71	; 113
    17aa:	53 e0       	ldi	r21, 0x03	; 3
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,2,"AttackTime  :      S"); //string 2 is Envelope gain
    17b2:	00 d9       	rcall	.-3584   	; 0x9b4 <initArrays>
    17b4:	4d e7       	ldi	r20, 0x7D	; 125
    17b6:	53 e0       	ldi	r21, 0x03	; 3
    17b8:	62 e0       	ldi	r22, 0x02	; 2
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	c6 01       	movw	r24, r12
    17be:	fa d8       	rcall	.-3596   	; 0x9b4 <initArrays>
initArrays(initTheScreen->knobScreen,3,"ReleaseTimexx:xx xxx"); //string 3 is Envelop Time
    17c0:	42 e9       	ldi	r20, 0x92	; 146
    17c2:	53 e0       	ldi	r21, 0x03	; 3
    17c4:	63 e0       	ldi	r22, 0x03	; 3
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	c6 01       	movw	r24, r12
    17ca:	f4 d8       	rcall	.-3608   	; 0x9b4 <initArrays>
initArrays(initTheScreen->knobScreen,4,"TrackVolume xx:xxxdb"); //string 4 is track Level.
    17cc:	47 ea       	ldi	r20, 0xA7	; 167
    17ce:	53 e0       	ldi	r21, 0x03	; 3
    17d0:	64 e0       	ldi	r22, 0x04	; 4
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	c6 01       	movw	r24, r12
    17d6:	ee d8       	rcall	.-3620   	; 0x9b4 <initArrays>
    17d8:	cc 52       	subi	r28, 0x2C	; 44
//initArrays(initTheScreen->knobScreen,5,"BPM: ");
//we might want to put in one of these for BPM, but I'm not sure. 

numPrinter(initTheScreen->screen0[2],5,3, currentPattern.patternBPM);
    17da:	df 4f       	sbci	r29, 0xFF	; 255
    17dc:	28 81       	ld	r18, Y
    17de:	39 81       	ldd	r19, Y+1	; 0x01
    17e0:	c4 5d       	subi	r28, 0xD4	; 212
    17e2:	d0 40       	sbci	r29, 0x00	; 0
    17e4:	43 e0       	ldi	r20, 0x03	; 3
    17e6:	65 e0       	ldi	r22, 0x05	; 5
    17e8:	c8 01       	movw	r24, r16
    17ea:	8a 96       	adiw	r24, 0x2a	; 42
    17ec:	b8 d7       	rcall	.+3952   	; 0x275e <numPrinter>
    17ee:	c9 56       	subi	r28, 0x69	; 105
numPrinter(initTheScreen->screen3[1],14,2, (currentGlobals.midiChannel)+1);
    17f0:	de 4f       	sbci	r29, 0xFE	; 254
    17f2:	28 81       	ld	r18, Y
    17f4:	c7 59       	subi	r28, 0x97	; 151
    17f6:	d1 40       	sbci	r29, 0x01	; 1
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	2f 5f       	subi	r18, 0xFF	; 255
    17fc:	3f 4f       	sbci	r19, 0xFF	; 255
    17fe:	42 e0       	ldi	r20, 0x02	; 2
    1800:	6e e0       	ldi	r22, 0x0E	; 14
    1802:	c8 01       	movw	r24, r16
    1804:	84 5b       	subi	r24, 0xB4	; 180
    1806:	9d 4f       	sbci	r25, 0xFD	; 253
    1808:	aa d7       	rcall	.+3924   	; 0x275e <numPrinter>
    180a:	f1 2c       	mov	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    180c:	8f ef       	ldi	r24, 0xFF	; 255
    180e:	e8 1a       	sub	r14, r24
    1810:	f8 0a       	sbc	r15, r24
    1812:	97 01       	movw	r18, r14
    1814:	43 e0       	ldi	r20, 0x03	; 3
    1816:	69 e0       	ldi	r22, 0x09	; 9
    1818:	c8 01       	movw	r24, r16
    181a:	45 96       	adiw	r24, 0x15	; 21
    181c:	a0 d7       	rcall	.+3904   	; 0x275e <numPrinter>
    181e:	97 01       	movw	r18, r14
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    1820:	43 e0       	ldi	r20, 0x03	; 3
    1822:	69 e0       	ldi	r22, 0x09	; 9
    1824:	c8 01       	movw	r24, r16
    1826:	8e 52       	subi	r24, 0x2E	; 46
    1828:	9f 4f       	sbci	r25, 0xFF	; 255
    182a:	99 d7       	rcall	.+3890   	; 0x275e <numPrinter>
    182c:	ca 52       	subi	r28, 0x2A	; 42
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
    182e:	df 4f       	sbci	r29, 0xFF	; 255
    1830:	28 81       	ld	r18, Y
    1832:	c6 5d       	subi	r28, 0xD6	; 214
    1834:	d0 40       	sbci	r29, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	42 e0       	ldi	r20, 0x02	; 2
    183a:	67 e0       	ldi	r22, 0x07	; 7
    183c:	c8 01       	movw	r24, r16
    183e:	89 51       	subi	r24, 0x19	; 25
    1840:	9f 4f       	sbci	r25, 0xFF	; 255
    1842:	8d d7       	rcall	.+3866   	; 0x275e <numPrinter>
    1844:	c1 57       	subi	r28, 0x71	; 113
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
    1846:	de 4f       	sbci	r29, 0xFE	; 254
    1848:	28 81       	ld	r18, Y
    184a:	cf 58       	subi	r28, 0x8F	; 143
    184c:	d1 40       	sbci	r29, 0x01	; 1
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	2f 5f       	subi	r18, 0xFF	; 255
    1852:	3f 4f       	sbci	r19, 0xFF	; 255
    1854:	42 e0       	ldi	r20, 0x02	; 2
    1856:	6d e0       	ldi	r22, 0x0D	; 13
    1858:	c8 01       	movw	r24, r16
    185a:	84 50       	subi	r24, 0x04	; 4
    185c:	9f 4f       	sbci	r25, 0xFF	; 255
    185e:	7f d7       	rcall	.+3838   	; 0x275e <numPrinter>
    1860:	e1 2c       	mov	r14, r1
    1862:	f1 2c       	mov	r15, r1
    1864:	b7 01       	movw	r22, r14
    1866:	c8 01       	movw	r24, r16
 
	for(uint8_t i=0;i<4; i++ )
	{
		outputS(initTheScreen->screen0[i],i);
    1868:	62 d7       	rcall	.+3780   	; 0x272e <outputS>
    186a:	8f ef       	ldi	r24, 0xFF	; 255
    186c:	e8 1a       	sub	r14, r24
    186e:	f8 0a       	sbc	r15, r24
    1870:	0b 5e       	subi	r16, 0xEB	; 235
    1872:	1f 4f       	sbci	r17, 0xFF	; 255
    1874:	84 e0       	ldi	r24, 0x04	; 4
    1876:	e8 16       	cp	r14, r24
    1878:	f1 04       	cpc	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
 
	for(uint8_t i=0;i<4; i++ )
    187a:	a1 f7       	brne	.-24     	; 0x1864 <initMenu+0x1e4>
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
	{
		outputS(initTheScreen->screen0[i],i);
	}
}
    1882:	0f 91       	pop	r16
    1884:	ff 90       	pop	r15
    1886:	ef 90       	pop	r14
    1888:	df 90       	pop	r13
    188a:	cf 90       	pop	r12
    188c:	08 95       	ret

0000188e <reInitMenuOnLoad>:
    188e:	ef 92       	push	r14
    1890:	ff 92       	push	r15
    1892:	0f 93       	push	r16

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(Screen *initTheScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    1894:	1f 93       	push	r17
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	ec 01       	movw	r28, r24
    189c:	8b 01       	movw	r16, r22
    189e:	7a 01       	movw	r14, r20
	numPrinter(initTheScreen->screen0[2],5,3, currentPattern->patternBPM);
    18a0:	fb 01       	movw	r30, r22
    18a2:	e8 53       	subi	r30, 0x38	; 56
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	20 81       	ld	r18, Z
    18a8:	31 81       	ldd	r19, Z+1	; 0x01
    18aa:	43 e0       	ldi	r20, 0x03	; 3
    18ac:	65 e0       	ldi	r22, 0x05	; 5
    18ae:	8a 96       	adiw	r24, 0x2a	; 42
    18b0:	56 d7       	rcall	.+3756   	; 0x275e <numPrinter>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
    18b2:	f8 01       	movw	r30, r16
    18b4:	e6 53       	subi	r30, 0x36	; 54
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	20 81       	ld	r18, Z
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	42 e0       	ldi	r20, 0x02	; 2
    18be:	67 e0       	ldi	r22, 0x07	; 7
    18c0:	ce 01       	movw	r24, r28
    18c2:	89 51       	subi	r24, 0x19	; 25
    18c4:	9f 4f       	sbci	r25, 0xFF	; 255
    18c6:	4b d7       	rcall	.+3734   	; 0x275e <numPrinter>
	numPrinter(initTheScreen->screen1[1],9,3,(currentGlobals->currentPatternNumber)+1);
    18c8:	f7 01       	movw	r30, r14
    18ca:	27 81       	ldd	r18, Z+7	; 0x07
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	2f 5f       	subi	r18, 0xFF	; 255
    18d0:	3f 4f       	sbci	r19, 0xFF	; 255
    18d2:	43 e0       	ldi	r20, 0x03	; 3
    18d4:	69 e0       	ldi	r22, 0x09	; 9
    18d6:	ce 01       	movw	r24, r28
    18d8:	8e 52       	subi	r24, 0x2E	; 46
    18da:	9f 4f       	sbci	r25, 0xFF	; 255
    18dc:	40 d7       	rcall	.+3712   	; 0x275e <numPrinter>
	numPrinter(initTheScreen->screen0[1],9,3,(currentGlobals->currentPatternNumber)+1);
    18de:	f7 01       	movw	r30, r14
    18e0:	27 81       	ldd	r18, Z+7	; 0x07
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	2f 5f       	subi	r18, 0xFF	; 255
    18e6:	3f 4f       	sbci	r19, 0xFF	; 255
    18e8:	43 e0       	ldi	r20, 0x03	; 3
    18ea:	69 e0       	ldi	r22, 0x09	; 9
    18ec:	ce 01       	movw	r24, r28
    18ee:	45 96       	adiw	r24, 0x15	; 21
    18f0:	36 d7       	rcall	.+3692   	; 0x275e <numPrinter>
}
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	08 95       	ret

00001900 <updateScreen>:

void updateScreen(Screen *menuScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    1900:	8f 92       	push	r8
    1902:	9f 92       	push	r9
    1904:	af 92       	push	r10
    1906:	bf 92       	push	r11
    1908:	cf 92       	push	r12
    190a:	df 92       	push	r13
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	8c 01       	movw	r16, r24
    191a:	7b 01       	movw	r14, r22
    191c:	ea 01       	movw	r28, r20
	
	if((currentGlobals->valueChangeFlag)&(1<<encoderChange))//check if encoder bit is high
    191e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1920:	80 ff       	sbrs	r24, 0
    1922:	da c2       	rjmp	.+1460   	; 0x1ed8 <updateScreen+0x5d8>
	{ 
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<encoderChange));//set encoder bit low, and carry our whatever encoder change has occurred. 
    1924:	1e 86       	std	Y+14, r1	; 0x0e
		//we need to debug this to make sure it's doing what we think it's doing.
		switch(currentGlobals->menuState)
    1926:	8a 85       	ldd	r24, Y+10	; 0x0a
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	8b 33       	cpi	r24, 0x3B	; 59
    192c:	91 05       	cpc	r25, r1
    192e:	08 f0       	brcs	.+2      	; 0x1932 <updateScreen+0x32>
    1930:	d0 c2       	rjmp	.+1440   	; 0x1ed2 <updateScreen+0x5d2>
    1932:	fc 01       	movw	r30, r24
    1934:	88 27       	eor	r24, r24
    1936:	e3 55       	subi	r30, 0x53	; 83
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	8f 4f       	sbci	r24, 0xFF	; 255
    193c:	0c 94 c2 1f 	jmp	0x3f84	; 0x3f84 <__tablejump2__>
		{
			case PreformanceModeInit: //initial state
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    1940:	c8 01       	movw	r24, r16
    1942:	a5 df       	rcall	.-182    	; 0x188e <reInitMenuOnLoad>
			outputS(menuScreen->screen0[0], 0);
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	c8 01       	movw	r24, r16
    194a:	f1 d6       	rcall	.+3554   	; 0x272e <outputS>
			outputS(menuScreen->screen0[1], 1);
    194c:	61 e0       	ldi	r22, 0x01	; 1
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	c8 01       	movw	r24, r16
    1952:	45 96       	adiw	r24, 0x15	; 21
    1954:	ec d6       	rcall	.+3544   	; 0x272e <outputS>
			outputS(menuScreen->screen0[2], 2);
    1956:	62 e0       	ldi	r22, 0x02	; 2
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	c8 01       	movw	r24, r16
    195c:	8a 96       	adiw	r24, 0x2a	; 42
    195e:	e7 d6       	rcall	.+3534   	; 0x272e <outputS>
			outputS(menuScreen->screen0[3], 3);
    1960:	63 e0       	ldi	r22, 0x03	; 3
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	c8 01       	movw	r24, r16
    1966:	cf 96       	adiw	r24, 0x3f	; 63
    1968:	e2 d6       	rcall	.+3524   	; 0x272e <outputS>
			break;
    196a:	b3 c2       	rjmp	.+1382   	; 0x1ed2 <updateScreen+0x5d2>

			case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0);
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	c8 01       	movw	r24, r16
    1972:	83 54       	subi	r24, 0x43	; 67
    1974:	9f 4f       	sbci	r25, 0xFF	; 255
    1976:	db d6       	rcall	.+3510   	; 0x272e <outputS>
			outputS(menuScreen->screen1[1], 1);
    1978:	61 e0       	ldi	r22, 0x01	; 1
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	c8 01       	movw	r24, r16
    197e:	8e 52       	subi	r24, 0x2E	; 46
    1980:	9f 4f       	sbci	r25, 0xFF	; 255
    1982:	d5 d6       	rcall	.+3498   	; 0x272e <outputS>
			outputS(menuScreen->screen1[2], 2);
    1984:	62 e0       	ldi	r22, 0x02	; 2
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	c8 01       	movw	r24, r16
    198a:	89 51       	subi	r24, 0x19	; 25
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	cf d6       	rcall	.+3486   	; 0x272e <outputS>
			outputS(menuScreen->screen1[3], 3);
    1990:	63 e0       	ldi	r22, 0x03	; 3
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	c8 01       	movw	r24, r16
    1996:	84 50       	subi	r24, 0x04	; 4
    1998:	9f 4f       	sbci	r25, 0xFF	; 255
    199a:	c9 d6       	rcall	.+3474   	; 0x272e <outputS>
    199c:	81 e1       	ldi	r24, 0x11	; 17
			currentGlobals->menuState = SequencerMenuArrow1; 
    199e:	8a 87       	std	Y+10, r24	; 0x0a
    19a0:	88 e0       	ldi	r24, 0x08	; 8
			
			
			case SequencerMenuArrow1:
			menuScreen->screen1[1][19]= 8;
    19a2:	f8 01       	movw	r30, r16
    19a4:	eb 51       	subi	r30, 0x1B	; 27
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	80 83       	st	Z, r24
    19aa:	80 e2       	ldi	r24, 0x20	; 32
			menuScreen->screen1[2][19] = ' ';
    19ac:	75 96       	adiw	r30, 0x15	; 21
    19ae:	80 83       	st	Z, r24
			menuScreen->screen1[3][19] = ' ';
    19b0:	75 96       	adiw	r30, 0x15	; 21
    19b2:	80 83       	st	Z, r24
			outputS(menuScreen->screen1[1], 1);
    19b4:	61 e0       	ldi	r22, 0x01	; 1
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	c8 01       	movw	r24, r16
    19ba:	8e 52       	subi	r24, 0x2E	; 46
    19bc:	9f 4f       	sbci	r25, 0xFF	; 255
    19be:	b7 d6       	rcall	.+3438   	; 0x272e <outputS>
			outputS(menuScreen->screen1[2], 2);
    19c0:	62 e0       	ldi	r22, 0x02	; 2
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	c8 01       	movw	r24, r16
    19c6:	89 51       	subi	r24, 0x19	; 25
    19c8:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    19ca:	b1 d6       	rcall	.+3426   	; 0x272e <outputS>
    19cc:	63 e0       	ldi	r22, 0x03	; 3
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	c8 01       	movw	r24, r16
    19d2:	84 50       	subi	r24, 0x04	; 4
    19d4:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    19d6:	ab d6       	rcall	.+3414   	; 0x272e <outputS>
			
			case SequencerMenuArrow1Select:
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    19d8:	7c c2       	rjmp	.+1272   	; 0x1ed2 <updateScreen+0x5d2>
    19da:	c8 01       	movw	r24, r16
    19dc:	58 df       	rcall	.-336    	; 0x188e <reInitMenuOnLoad>
			outputS(menuScreen->screen1[1],1);
    19de:	61 e0       	ldi	r22, 0x01	; 1
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	c8 01       	movw	r24, r16
    19e4:	8e 52       	subi	r24, 0x2E	; 46
    19e6:	9f 4f       	sbci	r25, 0xFF	; 255
    19e8:	a2 d6       	rcall	.+3396   	; 0x272e <outputS>
    19ea:	73 c2       	rjmp	.+1254   	; 0x1ed2 <updateScreen+0x5d2>
			break;
    19ec:	80 e2       	ldi	r24, 0x20	; 32
	
	
			case SequencerMenuArrow2:
			menuScreen->screen1[1][19]= ' ';
    19ee:	f8 01       	movw	r30, r16
    19f0:	eb 51       	subi	r30, 0x1B	; 27
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 83       	st	Z, r24
			menuScreen->screen1[2][19] = 8;
    19f6:	98 e0       	ldi	r25, 0x08	; 8
    19f8:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = ' ';
    19fa:	90 83       	st	Z, r25
    19fc:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen1[1], 1);
    19fe:	80 83       	st	Z, r24
    1a00:	61 e0       	ldi	r22, 0x01	; 1
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	c8 01       	movw	r24, r16
    1a06:	8e 52       	subi	r24, 0x2E	; 46
    1a08:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    1a0a:	91 d6       	rcall	.+3362   	; 0x272e <outputS>
    1a0c:	62 e0       	ldi	r22, 0x02	; 2
    1a0e:	70 e0       	ldi	r23, 0x00	; 0
    1a10:	c8 01       	movw	r24, r16
    1a12:	89 51       	subi	r24, 0x19	; 25
    1a14:	9f 4f       	sbci	r25, 0xFF	; 255
    1a16:	8b d6       	rcall	.+3350   	; 0x272e <outputS>
			outputS(menuScreen->screen1[3], 3);
    1a18:	63 e0       	ldi	r22, 0x03	; 3
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	c8 01       	movw	r24, r16
    1a1e:	84 50       	subi	r24, 0x04	; 4
    1a20:	9f 4f       	sbci	r25, 0xFF	; 255
    1a22:	85 d6       	rcall	.+3338   	; 0x272e <outputS>
			break;
	
			case SequencerMenuArrow2Select:
			numPrinter(menuScreen->screen1[2],7,2,currentPattern->numSteps);
    1a24:	56 c2       	rjmp	.+1196   	; 0x1ed2 <updateScreen+0x5d2>
    1a26:	fb 01       	movw	r30, r22
    1a28:	e6 53       	subi	r30, 0x36	; 54
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	20 81       	ld	r18, Z
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	42 e0       	ldi	r20, 0x02	; 2
    1a32:	67 e0       	ldi	r22, 0x07	; 7
    1a34:	68 01       	movw	r12, r16
    1a36:	87 ee       	ldi	r24, 0xE7	; 231
    1a38:	c8 0e       	add	r12, r24
    1a3a:	d1 1c       	adc	r13, r1
    1a3c:	c6 01       	movw	r24, r12
    1a3e:	8f d6       	rcall	.+3358   	; 0x275e <numPrinter>
			outputS(menuScreen->screen1[2],2);
    1a40:	62 e0       	ldi	r22, 0x02	; 2
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	c6 01       	movw	r24, r12
    1a46:	73 d6       	rcall	.+3302   	; 0x272e <outputS>
			break;
    1a48:	44 c2       	rjmp	.+1160   	; 0x1ed2 <updateScreen+0x5d2>
	
			case SequencerMenuArrow3:
			menuScreen->screen1[1][19]= ' ';
    1a4a:	80 e2       	ldi	r24, 0x20	; 32
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	eb 51       	subi	r30, 0x1B	; 27
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
			menuScreen->screen1[2][19] = ' ';
    1a52:	80 83       	st	Z, r24
    1a54:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = 8;
    1a56:	80 83       	st	Z, r24
    1a58:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen1[1], 1);
    1a5a:	75 96       	adiw	r30, 0x15	; 21
    1a5c:	80 83       	st	Z, r24
    1a5e:	61 e0       	ldi	r22, 0x01	; 1
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    1a62:	c8 01       	movw	r24, r16
    1a64:	8e 52       	subi	r24, 0x2E	; 46
    1a66:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    1a68:	62 d6       	rcall	.+3268   	; 0x272e <outputS>
    1a6a:	62 e0       	ldi	r22, 0x02	; 2
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	c8 01       	movw	r24, r16
    1a70:	89 51       	subi	r24, 0x19	; 25
    1a72:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    1a74:	5c d6       	rcall	.+3256   	; 0x272e <outputS>
    1a76:	63 e0       	ldi	r22, 0x03	; 3
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	c8 01       	movw	r24, r16
    1a7c:	84 50       	subi	r24, 0x04	; 4
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    1a80:	56 d6       	rcall	.+3244   	; 0x272e <outputS>
		
			case SequencerMenuArrow3Select:
			numPrinter(menuScreen->screen1[3],14,2,(currentGlobals->currentStep)+1); //these are 0 indexed, so we need to add 1 to the display.
    1a82:	27 c2       	rjmp	.+1102   	; 0x1ed2 <updateScreen+0x5d2>
    1a84:	28 85       	ldd	r18, Y+8	; 0x08
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	2f 5f       	subi	r18, 0xFF	; 255
    1a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8c:	42 e0       	ldi	r20, 0x02	; 2
    1a8e:	6e e0       	ldi	r22, 0x0E	; 14
    1a90:	68 01       	movw	r12, r16
    1a92:	9c ef       	ldi	r25, 0xFC	; 252
    1a94:	c9 0e       	add	r12, r25
    1a96:	d1 1c       	adc	r13, r1
			outputS(menuScreen->screen1[3],3);
    1a98:	c6 01       	movw	r24, r12
    1a9a:	61 d6       	rcall	.+3266   	; 0x275e <numPrinter>
    1a9c:	63 e0       	ldi	r22, 0x03	; 3
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	c6 01       	movw	r24, r12
			break;
	

			case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0);
    1aa2:	45 d6       	rcall	.+3210   	; 0x272e <outputS>
    1aa4:	16 c2       	rjmp	.+1068   	; 0x1ed2 <updateScreen+0x5d2>
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	c8 01       	movw	r24, r16
    1aac:	86 58       	subi	r24, 0x86	; 134
    1aae:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[1], 1);
    1ab0:	3e d6       	rcall	.+3196   	; 0x272e <outputS>
    1ab2:	61 e0       	ldi	r22, 0x01	; 1
    1ab4:	70 e0       	ldi	r23, 0x00	; 0
    1ab6:	c8 01       	movw	r24, r16
    1ab8:	81 57       	subi	r24, 0x71	; 113
    1aba:	9e 4f       	sbci	r25, 0xFE	; 254
    1abc:	38 d6       	rcall	.+3184   	; 0x272e <outputS>
			outputS(menuScreen->screen2[2], 2);
    1abe:	62 e0       	ldi	r22, 0x02	; 2
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	c8 01       	movw	r24, r16
    1ac4:	8c 55       	subi	r24, 0x5C	; 92
    1ac6:	9e 4f       	sbci	r25, 0xFE	; 254
    1ac8:	32 d6       	rcall	.+3172   	; 0x272e <outputS>
			outputS(menuScreen->screen2[3], 3);
    1aca:	63 e0       	ldi	r22, 0x03	; 3
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	c8 01       	movw	r24, r16
    1ad0:	87 54       	subi	r24, 0x47	; 71
    1ad2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ad4:	2c d6       	rcall	.+3160   	; 0x272e <outputS>
			currentGlobals->menuState = TrackMenuArrow1;
    1ad6:	81 e2       	ldi	r24, 0x21	; 33
		
			case TrackMenuArrow1:
			menuScreen->screen2[1][19]= 8;
    1ad8:	8a 87       	std	Y+10, r24	; 0x0a
    1ada:	88 e0       	ldi	r24, 0x08	; 8
    1adc:	f8 01       	movw	r30, r16
    1ade:	ee 55       	subi	r30, 0x5E	; 94
    1ae0:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    1ae2:	80 83       	st	Z, r24
    1ae4:	80 e2       	ldi	r24, 0x20	; 32
    1ae6:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    1ae8:	80 83       	st	Z, r24
    1aea:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    1aec:	80 83       	st	Z, r24
    1aee:	61 e0       	ldi	r22, 0x01	; 1
    1af0:	70 e0       	ldi	r23, 0x00	; 0
    1af2:	c8 01       	movw	r24, r16
    1af4:	81 57       	subi	r24, 0x71	; 113
    1af6:	9e 4f       	sbci	r25, 0xFE	; 254
    1af8:	1a d6       	rcall	.+3124   	; 0x272e <outputS>
			outputS(menuScreen->screen2[2], 2);
    1afa:	62 e0       	ldi	r22, 0x02	; 2
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	c8 01       	movw	r24, r16
    1b00:	8c 55       	subi	r24, 0x5C	; 92
    1b02:	9e 4f       	sbci	r25, 0xFE	; 254
    1b04:	14 d6       	rcall	.+3112   	; 0x272e <outputS>
			outputS(menuScreen->screen2[3], 3);
    1b06:	63 e0       	ldi	r22, 0x03	; 3
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	c8 01       	movw	r24, r16
    1b0c:	87 54       	subi	r24, 0x47	; 71
    1b0e:	9e 4f       	sbci	r25, 0xFE	; 254
    1b10:	0e d6       	rcall	.+3100   	; 0x272e <outputS>
			break;
    1b12:	df c1       	rjmp	.+958    	; 0x1ed2 <updateScreen+0x5d2>
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1b14:	89 85       	ldd	r24, Y+9	; 0x09
    1b16:	db 01       	movw	r26, r22
    1b18:	a8 0f       	add	r26, r24
    1b1a:	b1 1d       	adc	r27, r1
    1b1c:	fd 01       	movw	r30, r26
    1b1e:	e8 56       	subi	r30, 0x68	; 104
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    1b22:	20 81       	ld	r18, Z
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	32 2f       	mov	r19, r18
    1b28:	22 27       	eor	r18, r18
			outputS(menuScreen->screen2[2], 2);
			outputS(menuScreen->screen2[3], 3);
			break;
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1b2a:	70 96       	adiw	r30, 0x10	; 16
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    1b2c:	80 81       	ld	r24, Z
    1b2e:	28 2b       	or	r18, r24
    1b30:	44 e0       	ldi	r20, 0x04	; 4
    1b32:	6a e0       	ldi	r22, 0x0A	; 10
    1b34:	68 01       	movw	r12, r16
    1b36:	b1 e7       	ldi	r27, 0x71	; 113
    1b38:	cb 1a       	sub	r12, r27
    1b3a:	be ef       	ldi	r27, 0xFE	; 254
    1b3c:	db 0a       	sbc	r13, r27
    1b3e:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen2[1],1);
    1b40:	0e d6       	rcall	.+3100   	; 0x275e <numPrinter>
    1b42:	61 e0       	ldi	r22, 0x01	; 1
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	c6 01       	movw	r24, r12
			break;
    1b48:	f2 d5       	rcall	.+3044   	; 0x272e <outputS>
	
			case TrackMenuArrow2:
			menuScreen->screen2[1][19]= ' ';
    1b4a:	c3 c1       	rjmp	.+902    	; 0x1ed2 <updateScreen+0x5d2>
    1b4c:	80 e2       	ldi	r24, 0x20	; 32
    1b4e:	f8 01       	movw	r30, r16
    1b50:	ee 55       	subi	r30, 0x5E	; 94
    1b52:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = 8;
    1b54:	80 83       	st	Z, r24
    1b56:	98 e0       	ldi	r25, 0x08	; 8
    1b58:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    1b5a:	90 83       	st	Z, r25
    1b5c:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    1b5e:	80 83       	st	Z, r24
    1b60:	61 e0       	ldi	r22, 0x01	; 1
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	c8 01       	movw	r24, r16
    1b66:	81 57       	subi	r24, 0x71	; 113
    1b68:	9e 4f       	sbci	r25, 0xFE	; 254
    1b6a:	e1 d5       	rcall	.+3010   	; 0x272e <outputS>
			outputS(menuScreen->screen2[2], 2);
    1b6c:	62 e0       	ldi	r22, 0x02	; 2
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	c8 01       	movw	r24, r16
    1b72:	8c 55       	subi	r24, 0x5C	; 92
    1b74:	9e 4f       	sbci	r25, 0xFE	; 254
    1b76:	db d5       	rcall	.+2998   	; 0x272e <outputS>
    1b78:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[3], 3);
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	c8 01       	movw	r24, r16
    1b7e:	87 54       	subi	r24, 0x47	; 71
    1b80:	9e 4f       	sbci	r25, 0xFE	; 254
    1b82:	d5 d5       	rcall	.+2986   	; 0x272e <outputS>
    1b84:	a6 c1       	rjmp	.+844    	; 0x1ed2 <updateScreen+0x5d2>
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
			break;
    1b88:	fb 01       	movw	r30, r22
		
			case TrackMenuArrow2Select:
			//we need some serious button code in these two cases. 
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1b8a:	e8 0f       	add	r30, r24
    1b8c:	f1 1d       	adc	r31, r1
    1b8e:	e8 57       	subi	r30, 0x78	; 120
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	80 81       	ld	r24, Z
    1b94:	88 23       	and	r24, r24
    1b96:	19 f0       	breq	.+6      	; 0x1b9e <updateScreen+0x29e>
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	79 f0       	breq	.+30     	; 0x1bba <updateScreen+0x2ba>
    1b9c:	1c c0       	rjmp	.+56     	; 0x1bd6 <updateScreen+0x2d6>
    1b9e:	83 e5       	ldi	r24, 0x53	; 83
			{
				case 0:
				menuScreen->screen2[2][10] = 'S';
    1ba0:	f8 01       	movw	r30, r16
    1ba2:	e2 55       	subi	r30, 0x52	; 82
    1ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba6:	80 83       	st	Z, r24
    1ba8:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[2][11] = 'o';
    1baa:	31 96       	adiw	r30, 0x01	; 1
    1bac:	80 83       	st	Z, r24
    1bae:	9c e6       	ldi	r25, 0x6C	; 108
				menuScreen->screen2[2][12] = 'l';
    1bb0:	31 96       	adiw	r30, 0x01	; 1
    1bb2:	90 83       	st	Z, r25
    1bb4:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'o';
    1bb6:	80 83       	st	Z, r24
    1bb8:	0e c0       	rjmp	.+28     	; 0x1bd6 <updateScreen+0x2d6>
				break;
    1bba:	80 e5       	ldi	r24, 0x50	; 80

				case 1:
				menuScreen->screen2[2][10] = 'P';
    1bbc:	f8 01       	movw	r30, r16
    1bbe:	e2 55       	subi	r30, 0x52	; 82
    1bc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc2:	80 83       	st	Z, r24
				menuScreen->screen2[2][11] = 'o';
    1bc4:	8f e6       	ldi	r24, 0x6F	; 111
    1bc6:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][12] = 'l';
    1bc8:	80 83       	st	Z, r24
    1bca:	8c e6       	ldi	r24, 0x6C	; 108
    1bcc:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'y';
    1bce:	80 83       	st	Z, r24
    1bd0:	89 e7       	ldi	r24, 0x79	; 121
	
				case 3:
				break;
			}
			
			outputS(menuScreen->screen2[2], 2);
    1bd2:	31 96       	adiw	r30, 0x01	; 1
    1bd4:	80 83       	st	Z, r24
    1bd6:	62 e0       	ldi	r22, 0x02	; 2
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	c8 01       	movw	r24, r16
    1bdc:	8c 55       	subi	r24, 0x5C	; 92
    1bde:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1be0:	a6 d5       	rcall	.+2892   	; 0x272e <outputS>

			case TrackMenuArrow3:
			menuScreen->screen2[1][19]= ' ';
    1be2:	77 c1       	rjmp	.+750    	; 0x1ed2 <updateScreen+0x5d2>
    1be4:	80 e2       	ldi	r24, 0x20	; 32
    1be6:	f8 01       	movw	r30, r16
    1be8:	ee 55       	subi	r30, 0x5E	; 94
    1bea:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    1bec:	80 83       	st	Z, r24
    1bee:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = 8;
    1bf0:	80 83       	st	Z, r24
    1bf2:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[1], 1);
    1bf4:	75 96       	adiw	r30, 0x15	; 21
    1bf6:	80 83       	st	Z, r24
    1bf8:	61 e0       	ldi	r22, 0x01	; 1
    1bfa:	70 e0       	ldi	r23, 0x00	; 0
    1bfc:	c8 01       	movw	r24, r16
    1bfe:	81 57       	subi	r24, 0x71	; 113
			outputS(menuScreen->screen2[2], 2);
    1c00:	9e 4f       	sbci	r25, 0xFE	; 254
    1c02:	95 d5       	rcall	.+2858   	; 0x272e <outputS>
    1c04:	62 e0       	ldi	r22, 0x02	; 2
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	c8 01       	movw	r24, r16
    1c0a:	8c 55       	subi	r24, 0x5C	; 92
    1c0c:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[3], 3);
    1c0e:	8f d5       	rcall	.+2846   	; 0x272e <outputS>
    1c10:	63 e0       	ldi	r22, 0x03	; 3
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	c8 01       	movw	r24, r16
    1c16:	87 54       	subi	r24, 0x47	; 71
    1c18:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1c1a:	89 d5       	rcall	.+2834   	; 0x272e <outputS>
		
			case TrackMenuArrow3Select:
			numPrinter(menuScreen->screen2[3],10,2,(currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1);
    1c1c:	5a c1       	rjmp	.+692    	; 0x1ed2 <updateScreen+0x5d2>
    1c1e:	89 85       	ldd	r24, Y+9	; 0x09
    1c20:	fb 01       	movw	r30, r22
    1c22:	e8 0f       	add	r30, r24
    1c24:	f1 1d       	adc	r31, r1
    1c26:	20 8d       	ldd	r18, Z+24	; 0x18
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	2f 5f       	subi	r18, 0xFF	; 255
    1c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2e:	42 e0       	ldi	r20, 0x02	; 2
    1c30:	6a e0       	ldi	r22, 0x0A	; 10
    1c32:	68 01       	movw	r12, r16
    1c34:	e7 e4       	ldi	r30, 0x47	; 71
    1c36:	ce 1a       	sub	r12, r30
    1c38:	ee ef       	ldi	r30, 0xFE	; 254
    1c3a:	de 0a       	sbc	r13, r30
			outputS(menuScreen->screen2[3],3);
    1c3c:	c6 01       	movw	r24, r12
    1c3e:	8f d5       	rcall	.+2846   	; 0x275e <numPrinter>
    1c40:	63 e0       	ldi	r22, 0x03	; 3
    1c42:	70 e0       	ldi	r23, 0x00	; 0
    1c44:	c6 01       	movw	r24, r12
			break;
    1c46:	73 d5       	rcall	.+2790   	; 0x272e <outputS>
			
			case TrackMenuArrow4:
			menuScreen->screen2[2][19]= ' ';
    1c48:	44 c1       	rjmp	.+648    	; 0x1ed2 <updateScreen+0x5d2>
    1c4a:	80 e2       	ldi	r24, 0x20	; 32
    1c4c:	f8 01       	movw	r30, r16
    1c4e:	e9 54       	subi	r30, 0x49	; 73
    1c50:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[3][19] = ' ';
    1c52:	80 83       	st	Z, r24
    1c54:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[4][19] = 8;
    1c56:	80 83       	st	Z, r24
    1c58:	88 e0       	ldi	r24, 0x08	; 8
    1c5a:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[2], 1);
    1c5c:	80 83       	st	Z, r24
    1c5e:	61 e0       	ldi	r22, 0x01	; 1
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	c8 01       	movw	r24, r16
    1c64:	8c 55       	subi	r24, 0x5C	; 92
    1c66:	9e 4f       	sbci	r25, 0xFE	; 254
    1c68:	62 d5       	rcall	.+2756   	; 0x272e <outputS>
			outputS(menuScreen->screen2[3], 2);
    1c6a:	62 e0       	ldi	r22, 0x02	; 2
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	c8 01       	movw	r24, r16
    1c70:	87 54       	subi	r24, 0x47	; 71
    1c72:	9e 4f       	sbci	r25, 0xFE	; 254
    1c74:	5c d5       	rcall	.+2744   	; 0x272e <outputS>
    1c76:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[4], 3);
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	c8 01       	movw	r24, r16
    1c7c:	82 53       	subi	r24, 0x32	; 50
    1c7e:	9e 4f       	sbci	r25, 0xFE	; 254
    1c80:	56 d5       	rcall	.+2732   	; 0x272e <outputS>
    1c82:	27 c1       	rjmp	.+590    	; 0x1ed2 <updateScreen+0x5d2>
    1c84:	89 85       	ldd	r24, Y+9	; 0x09
			break;
    1c86:	fb 01       	movw	r30, r22
			
			case TrackMenuArrow4Select:
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1c88:	e8 0f       	add	r30, r24
    1c8a:	f1 1d       	adc	r31, r1
    1c8c:	e5 51       	subi	r30, 0x15	; 21
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 81       	ld	r24, Z
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	a9 f0       	breq	.+42     	; 0x1cc0 <updateScreen+0x3c0>
    1c96:	28 f0       	brcs	.+10     	; 0x1ca2 <updateScreen+0x3a2>
    1c98:	82 30       	cpi	r24, 0x02	; 2
    1c9a:	f9 f0       	breq	.+62     	; 0x1cda <updateScreen+0x3da>
    1c9c:	83 30       	cpi	r24, 0x03	; 3
    1c9e:	51 f1       	breq	.+84     	; 0x1cf4 <updateScreen+0x3f4>
    1ca0:	37 c0       	rjmp	.+110    	; 0x1d10 <updateScreen+0x410>
    1ca2:	81 e4       	ldi	r24, 0x41	; 65
    1ca4:	f8 01       	movw	r30, r16
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1ca6:	e4 52       	subi	r30, 0x24	; 36
    1ca8:	fe 4f       	sbci	r31, 0xFE	; 254
    1caa:	80 83       	st	Z, r24
    1cac:	8d e2       	ldi	r24, 0x2D	; 45
    1cae:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1cb0:	80 83       	st	Z, r24
    1cb2:	82 e5       	ldi	r24, 0x52	; 82
    1cb4:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1cb6:	80 83       	st	Z, r24
    1cb8:	80 e2       	ldi	r24, 0x20	; 32
    1cba:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1cbc:	80 83       	st	Z, r24
    1cbe:	28 c0       	rjmp	.+80     	; 0x1d10 <updateScreen+0x410>
    1cc0:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1cc2:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1cc4:	e4 52       	subi	r30, 0x24	; 36
    1cc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc8:	80 83       	st	Z, r24
    1cca:	80 e2       	ldi	r24, 0x20	; 32
				menuScreen->screen2[4][15] = ' ';
    1ccc:	31 96       	adiw	r30, 0x01	; 1
    1cce:	80 83       	st	Z, r24
    1cd0:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = ' ';
    1cd2:	80 83       	st	Z, r24
    1cd4:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1cd6:	80 83       	st	Z, r24
    1cd8:	1b c0       	rjmp	.+54     	; 0x1d10 <updateScreen+0x410>
				break;
    1cda:	81 e4       	ldi	r24, 0x41	; 65
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1cdc:	f8 01       	movw	r30, r16
    1cde:	e4 52       	subi	r30, 0x24	; 36
    1ce0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce2:	80 83       	st	Z, r24
				menuScreen->screen2[4][15] = ' ';
    1ce4:	80 e2       	ldi	r24, 0x20	; 32
    1ce6:	31 96       	adiw	r30, 0x01	; 1
    1ce8:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1cea:	31 96       	adiw	r30, 0x01	; 1
    1cec:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1cee:	31 96       	adiw	r30, 0x01	; 1
				break;
    1cf0:	80 83       	st	Z, r24
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1cf2:	0e c0       	rjmp	.+28     	; 0x1d10 <updateScreen+0x410>
    1cf4:	8e e4       	ldi	r24, 0x4E	; 78
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	e4 52       	subi	r30, 0x24	; 36
				menuScreen->screen2[4][15] = 'o';
    1cfa:	fe 4f       	sbci	r31, 0xFE	; 254
    1cfc:	80 83       	st	Z, r24
    1cfe:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][16] = 'n';
    1d00:	31 96       	adiw	r30, 0x01	; 1
    1d02:	80 83       	st	Z, r24
    1d04:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][17] = 'e';
    1d06:	31 96       	adiw	r30, 0x01	; 1
    1d08:	80 83       	st	Z, r24
    1d0a:	85 e6       	ldi	r24, 0x65	; 101
				break;
			}
			outputS(menuScreen->screen2[4],3);
    1d0c:	31 96       	adiw	r30, 0x01	; 1
    1d0e:	80 83       	st	Z, r24
    1d10:	63 e0       	ldi	r22, 0x03	; 3
    1d12:	70 e0       	ldi	r23, 0x00	; 0
    1d14:	c8 01       	movw	r24, r16
    1d16:	82 53       	subi	r24, 0x32	; 50
    1d18:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1d1a:	09 d5       	rcall	.+2578   	; 0x272e <outputS>
			
			case TrackMenuArrow5:
			menuScreen->screen2[3][19]= ' ';
    1d1c:	da c0       	rjmp	.+436    	; 0x1ed2 <updateScreen+0x5d2>
    1d1e:	80 e2       	ldi	r24, 0x20	; 32
    1d20:	f8 01       	movw	r30, r16
    1d22:	e4 53       	subi	r30, 0x34	; 52
    1d24:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[4][19] = ' ';
    1d26:	80 83       	st	Z, r24
			menuScreen->screen2[5][19] = 8;
    1d28:	75 96       	adiw	r30, 0x15	; 21
    1d2a:	80 83       	st	Z, r24
    1d2c:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[3], 1);
    1d2e:	75 96       	adiw	r30, 0x15	; 21
    1d30:	80 83       	st	Z, r24
    1d32:	61 e0       	ldi	r22, 0x01	; 1
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	c8 01       	movw	r24, r16
    1d38:	87 54       	subi	r24, 0x47	; 71
    1d3a:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[4], 2);
    1d3c:	f8 d4       	rcall	.+2544   	; 0x272e <outputS>
    1d3e:	62 e0       	ldi	r22, 0x02	; 2
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	c8 01       	movw	r24, r16
    1d44:	82 53       	subi	r24, 0x32	; 50
    1d46:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[5], 3);
    1d48:	f2 d4       	rcall	.+2532   	; 0x272e <outputS>
    1d4a:	63 e0       	ldi	r22, 0x03	; 3
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	c8 01       	movw	r24, r16
    1d50:	8d 51       	subi	r24, 0x1D	; 29
    1d52:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1d54:	ec d4       	rcall	.+2520   	; 0x272e <outputS>

			case TrackMenuArrow5Select:;
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1d56:	bd c0       	rjmp	.+378    	; 0x1ed2 <updateScreen+0x5d2>
    1d58:	89 85       	ldd	r24, Y+9	; 0x09
    1d5a:	9b 01       	movw	r18, r22
    1d5c:	28 0f       	add	r18, r24
    1d5e:	31 1d       	adc	r19, r1
    1d60:	f9 01       	movw	r30, r18
			numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1d62:	e5 53       	subi	r30, 0x35	; 53
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	20 81       	ld	r18, Z
			outputS(menuScreen->screen2[4], 2);
			outputS(menuScreen->screen2[5], 3);
			break;

			case TrackMenuArrow5Select:;
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1d68:	30 e0       	ldi	r19, 0x00	; 0
			numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1d6a:	32 2f       	mov	r19, r18
    1d6c:	22 27       	eor	r18, r18
    1d6e:	70 96       	adiw	r30, 0x10	; 16
    1d70:	80 81       	ld	r24, Z
    1d72:	28 2b       	or	r18, r24
    1d74:	45 e0       	ldi	r20, 0x05	; 5
    1d76:	6d e0       	ldi	r22, 0x0D	; 13
    1d78:	68 01       	movw	r12, r16
    1d7a:	8d e1       	ldi	r24, 0x1D	; 29
    1d7c:	c8 1a       	sub	r12, r24
    1d7e:	8e ef       	ldi	r24, 0xFE	; 254
			menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
    1d80:	d8 0a       	sbc	r13, r24
    1d82:	c6 01       	movw	r24, r12
    1d84:	ec d4       	rcall	.+2520   	; 0x275e <numPrinter>
    1d86:	d8 01       	movw	r26, r16
    1d88:	a0 51       	subi	r26, 0x10	; 16
    1d8a:	be 4f       	sbci	r27, 0xFE	; 254
    1d8c:	8c 91       	ld	r24, X
    1d8e:	f8 01       	movw	r30, r16
			menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
    1d90:	e1 51       	subi	r30, 0x11	; 17
    1d92:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[5][14] = '.';
    1d94:	80 83       	st	Z, r24
    1d96:	32 96       	adiw	r30, 0x02	; 2
			outputS(menuScreen->screen2[5],3);
    1d98:	80 81       	ld	r24, Z
    1d9a:	8c 93       	st	X, r24
    1d9c:	8e e2       	ldi	r24, 0x2E	; 46
    1d9e:	80 83       	st	Z, r24
			break;
    1da0:	63 e0       	ldi	r22, 0x03	; 3

			case GlobalMenuInit:
			outputS(menuScreen->screen3[0], 0);
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	c6 01       	movw	r24, r12
    1da6:	c3 d4       	rcall	.+2438   	; 0x272e <outputS>
    1da8:	94 c0       	rjmp	.+296    	; 0x1ed2 <updateScreen+0x5d2>
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[1], 1);
    1dae:	c8 01       	movw	r24, r16
    1db0:	89 5c       	subi	r24, 0xC9	; 201
    1db2:	9d 4f       	sbci	r25, 0xFD	; 253
    1db4:	bc d4       	rcall	.+2424   	; 0x272e <outputS>
    1db6:	61 e0       	ldi	r22, 0x01	; 1
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1dbc:	84 5b       	subi	r24, 0xB4	; 180
    1dbe:	9d 4f       	sbci	r25, 0xFD	; 253
    1dc0:	b6 d4       	rcall	.+2412   	; 0x272e <outputS>
    1dc2:	62 e0       	ldi	r22, 0x02	; 2
    1dc4:	70 e0       	ldi	r23, 0x00	; 0
    1dc6:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1dc8:	8f 59       	subi	r24, 0x9F	; 159
    1dca:	9d 4f       	sbci	r25, 0xFD	; 253
    1dcc:	b0 d4       	rcall	.+2400   	; 0x272e <outputS>
    1dce:	63 e0       	ldi	r22, 0x03	; 3
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	c8 01       	movw	r24, r16
    1dd4:	8a 58       	subi	r24, 0x8A	; 138
			currentGlobals->menuState = GlobalMenuArrow1;
    1dd6:	9d 4f       	sbci	r25, 0xFD	; 253
    1dd8:	aa d4       	rcall	.+2388   	; 0x272e <outputS>

			case GlobalMenuArrow1:
			menuScreen->screen3[1][19]= 8;
    1dda:	81 e3       	ldi	r24, 0x31	; 49
    1ddc:	8a 87       	std	Y+10, r24	; 0x0a
    1dde:	88 e0       	ldi	r24, 0x08	; 8
    1de0:	f8 01       	movw	r30, r16
    1de2:	e1 5a       	subi	r30, 0xA1	; 161
			menuScreen->screen3[2][19] = ' ';
    1de4:	fd 4f       	sbci	r31, 0xFD	; 253
    1de6:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    1de8:	80 e2       	ldi	r24, 0x20	; 32
    1dea:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen3[1], 1);
    1dec:	80 83       	st	Z, r24
    1dee:	75 96       	adiw	r30, 0x15	; 21
    1df0:	80 83       	st	Z, r24
    1df2:	61 e0       	ldi	r22, 0x01	; 1
    1df4:	70 e0       	ldi	r23, 0x00	; 0
    1df6:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1df8:	84 5b       	subi	r24, 0xB4	; 180
    1dfa:	9d 4f       	sbci	r25, 0xFD	; 253
    1dfc:	98 d4       	rcall	.+2352   	; 0x272e <outputS>
    1dfe:	62 e0       	ldi	r22, 0x02	; 2
    1e00:	70 e0       	ldi	r23, 0x00	; 0
    1e02:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1e04:	8f 59       	subi	r24, 0x9F	; 159
    1e06:	9d 4f       	sbci	r25, 0xFD	; 253
    1e08:	92 d4       	rcall	.+2340   	; 0x272e <outputS>
    1e0a:	63 e0       	ldi	r22, 0x03	; 3
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	c8 01       	movw	r24, r16
    1e10:	8a 58       	subi	r24, 0x8A	; 138
			break;
    1e12:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow1Select:
			numPrinter(menuScreen->screen3[1],14,2,(currentGlobals->midiChannel)+1);
    1e14:	8c d4       	rcall	.+2328   	; 0x272e <outputS>
    1e16:	5d c0       	rjmp	.+186    	; 0x1ed2 <updateScreen+0x5d2>
    1e18:	28 89       	ldd	r18, Y+16	; 0x10
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	2f 5f       	subi	r18, 0xFF	; 255
    1e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e20:	42 e0       	ldi	r20, 0x02	; 2
    1e22:	6e e0       	ldi	r22, 0x0E	; 14
    1e24:	68 01       	movw	r12, r16
    1e26:	94 eb       	ldi	r25, 0xB4	; 180
    1e28:	c9 1a       	sub	r12, r25
    1e2a:	9d ef       	ldi	r25, 0xFD	; 253
			outputS(menuScreen->screen3[1],1);
    1e2c:	d9 0a       	sbc	r13, r25
    1e2e:	c6 01       	movw	r24, r12
    1e30:	96 d4       	rcall	.+2348   	; 0x275e <numPrinter>
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	70 e0       	ldi	r23, 0x00	; 0
			break;
    1e36:	c6 01       	movw	r24, r12

			case GlobalMenuArrow2:
			menuScreen->screen3[1][19]= ' ';
    1e38:	7a d4       	rcall	.+2292   	; 0x272e <outputS>
    1e3a:	4b c0       	rjmp	.+150    	; 0x1ed2 <updateScreen+0x5d2>
    1e3c:	80 e2       	ldi	r24, 0x20	; 32
    1e3e:	f8 01       	movw	r30, r16
			menuScreen->screen3[2][19] = 8;
    1e40:	e1 5a       	subi	r30, 0xA1	; 161
    1e42:	fd 4f       	sbci	r31, 0xFD	; 253
    1e44:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    1e46:	98 e0       	ldi	r25, 0x08	; 8
			outputS(menuScreen->screen3[1], 1);
    1e48:	75 96       	adiw	r30, 0x15	; 21
    1e4a:	90 83       	st	Z, r25
    1e4c:	75 96       	adiw	r30, 0x15	; 21
    1e4e:	80 83       	st	Z, r24
    1e50:	61 e0       	ldi	r22, 0x01	; 1
    1e52:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[2], 2);
    1e54:	c8 01       	movw	r24, r16
    1e56:	84 5b       	subi	r24, 0xB4	; 180
    1e58:	9d 4f       	sbci	r25, 0xFD	; 253
    1e5a:	69 d4       	rcall	.+2258   	; 0x272e <outputS>
    1e5c:	62 e0       	ldi	r22, 0x02	; 2
    1e5e:	70 e0       	ldi	r23, 0x00	; 0
    1e60:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1e62:	8f 59       	subi	r24, 0x9F	; 159
    1e64:	9d 4f       	sbci	r25, 0xFD	; 253
    1e66:	63 d4       	rcall	.+2246   	; 0x272e <outputS>
    1e68:	63 e0       	ldi	r22, 0x03	; 3
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	c8 01       	movw	r24, r16
    1e6e:	8a 58       	subi	r24, 0x8A	; 138
			break;
    1e70:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow2Select:
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1e72:	5d d4       	rcall	.+2234   	; 0x272e <outputS>
    1e74:	2e c0       	rjmp	.+92     	; 0x1ed2 <updateScreen+0x5d2>
    1e76:	89 85       	ldd	r24, Y+9	; 0x09
    1e78:	fa 01       	movw	r30, r20
    1e7a:	e8 0f       	add	r30, r24
    1e7c:	f1 1d       	adc	r31, r1
    1e7e:	41 89       	ldd	r20, Z+17	; 0x11
    1e80:	6e e0       	ldi	r22, 0x0E	; 14
    1e82:	68 01       	movw	r12, r16
    1e84:	af e9       	ldi	r26, 0x9F	; 159
    1e86:	ca 1a       	sub	r12, r26
    1e88:	ad ef       	ldi	r26, 0xFD	; 253
    1e8a:	da 0a       	sbc	r13, r26
    1e8c:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen3[2],2);
    1e8e:	2d d6       	rcall	.+3162   	; 0x2aea <midiNotePrinter>
    1e90:	62 e0       	ldi	r22, 0x02	; 2
    1e92:	70 e0       	ldi	r23, 0x00	; 0
    1e94:	c6 01       	movw	r24, r12
    1e96:	4b d4       	rcall	.+2198   	; 0x272e <outputS>
			break;
    1e98:	1c c0       	rjmp	.+56     	; 0x1ed2 <updateScreen+0x5d2>

			case GlobalMenuArrow3:
			menuScreen->screen3[1][19]= ' ';
    1e9a:	80 e2       	ldi	r24, 0x20	; 32
    1e9c:	f8 01       	movw	r30, r16
    1e9e:	e1 5a       	subi	r30, 0xA1	; 161
    1ea0:	fd 4f       	sbci	r31, 0xFD	; 253
			menuScreen->screen3[2][19] = ' ';
    1ea2:	80 83       	st	Z, r24
    1ea4:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen3[3][19] = 8;
    1ea6:	80 83       	st	Z, r24
    1ea8:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen3[1], 1);
    1eaa:	75 96       	adiw	r30, 0x15	; 21
    1eac:	80 83       	st	Z, r24
    1eae:	61 e0       	ldi	r22, 0x01	; 1
    1eb0:	70 e0       	ldi	r23, 0x00	; 0
    1eb2:	c8 01       	movw	r24, r16
    1eb4:	84 5b       	subi	r24, 0xB4	; 180
    1eb6:	9d 4f       	sbci	r25, 0xFD	; 253
			outputS(menuScreen->screen3[2], 2);
    1eb8:	3a d4       	rcall	.+2164   	; 0x272e <outputS>
    1eba:	62 e0       	ldi	r22, 0x02	; 2
    1ebc:	70 e0       	ldi	r23, 0x00	; 0
    1ebe:	c8 01       	movw	r24, r16
    1ec0:	8f 59       	subi	r24, 0x9F	; 159
    1ec2:	9d 4f       	sbci	r25, 0xFD	; 253
    1ec4:	34 d4       	rcall	.+2152   	; 0x272e <outputS>
			outputS(menuScreen->screen3[3], 3);
    1ec6:	63 e0       	ldi	r22, 0x03	; 3
    1ec8:	70 e0       	ldi	r23, 0x00	; 0
    1eca:	c8 01       	movw	r24, r16
    1ecc:	8a 58       	subi	r24, 0x8A	; 138
    1ece:	9d 4f       	sbci	r25, 0xFD	; 253
    1ed0:	2e d4       	rcall	.+2140   	; 0x272e <outputS>
    1ed2:	8a 85       	ldd	r24, Y+10	; 0x0a
			break;
		}
		prevMenuState = currentGlobals->menuState;
    1ed4:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <prevMenuState>
    1ed8:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
	//We should only reach this in track selection and global settings for setting midi notes. 
	if(currentGlobals->valueChangeFlag&(1<<triggerChange))
    1eda:	81 ff       	sbrs	r24, 1
    1edc:	19 c1       	rjmp	.+562    	; 0x2110 <updateScreen+0x810>
    1ede:	1e 86       	std	Y+14, r1	; 0x0e
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0<<triggerChange); //this is wrong. Will erase all of valueChange Flag. 
    1ee0:	8a 85       	ldd	r24, Y+10	; 0x0a
		switch((currentGlobals->menuState)>>4) //we don't need to worry about what the bottom encoder is doing.  
    1ee2:	82 95       	swap	r24
    1ee4:	8f 70       	andi	r24, 0x0F	; 15
    1ee6:	82 30       	cpi	r24, 0x02	; 2
    1ee8:	21 f0       	breq	.+8      	; 0x1ef2 <updateScreen+0x5f2>
    1eea:	83 30       	cpi	r24, 0x03	; 3
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <updateScreen+0x5f0>
    1eee:	f7 c0       	rjmp	.+494    	; 0x20de <updateScreen+0x7de>
    1ef0:	0f c1       	rjmp	.+542    	; 0x2110 <updateScreen+0x810>
    1ef2:	29 85       	ldd	r18, Y+9	; 0x09
		{
			case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	c7 01       	movw	r24, r14
    1ef8:	82 0f       	add	r24, r18
    1efa:	93 1f       	adc	r25, r19
    1efc:	fc 01       	movw	r30, r24
    1efe:	e8 56       	subi	r30, 0x68	; 104
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	c0 80       	ld	r12, Z
    1f04:	d1 2c       	mov	r13, r1
    1f06:	dc 2c       	mov	r13, r12
    1f08:	cc 24       	eor	r12, r12
    1f0a:	70 96       	adiw	r30, 0x10	; 16
    1f0c:	80 81       	ld	r24, Z
    1f0e:	c8 2a       	or	r12, r24
    1f10:	2f 5f       	subi	r18, 0xFF	; 255
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack)+1);
    1f12:	3f 4f       	sbci	r19, 0xFF	; 255
    1f14:	42 e0       	ldi	r20, 0x02	; 2
    1f16:	67 e0       	ldi	r22, 0x07	; 7
    1f18:	58 01       	movw	r10, r16
    1f1a:	b1 e7       	ldi	r27, 0x71	; 113
    1f1c:	ab 1a       	sub	r10, r27
    1f1e:	be ef       	ldi	r27, 0xFE	; 254
    1f20:	bb 0a       	sbc	r11, r27
    1f22:	c5 01       	movw	r24, r10
    1f24:	1c d4       	rcall	.+2104   	; 0x275e <numPrinter>
    1f26:	96 01       	movw	r18, r12
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
    1f28:	44 e0       	ldi	r20, 0x04	; 4
    1f2a:	6a e0       	ldi	r22, 0x0A	; 10
    1f2c:	c5 01       	movw	r24, r10
    1f2e:	17 d4       	rcall	.+2094   	; 0x275e <numPrinter>
    1f30:	89 85       	ldd	r24, Y+9	; 0x09
    1f32:	f7 01       	movw	r30, r14
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
					switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1f34:	e8 0f       	add	r30, r24
    1f36:	f1 1d       	adc	r31, r1
    1f38:	e8 57       	subi	r30, 0x78	; 120
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	80 81       	ld	r24, Z
    1f3e:	88 23       	and	r24, r24
    1f40:	19 f0       	breq	.+6      	; 0x1f48 <updateScreen+0x648>
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	79 f0       	breq	.+30     	; 0x1f64 <updateScreen+0x664>
    1f46:	1c c0       	rjmp	.+56     	; 0x1f80 <updateScreen+0x680>
    1f48:	83 e5       	ldi	r24, 0x53	; 83
    1f4a:	f8 01       	movw	r30, r16
					{
						case 0:
						menuScreen->screen2[2][10] = 'S';
    1f4c:	e2 55       	subi	r30, 0x52	; 82
    1f4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f50:	80 83       	st	Z, r24
    1f52:	8f e6       	ldi	r24, 0x6F	; 111
    1f54:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][11] = 'o';
    1f56:	80 83       	st	Z, r24
    1f58:	9c e6       	ldi	r25, 0x6C	; 108
    1f5a:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][12] = 'l';
    1f5c:	90 83       	st	Z, r25
    1f5e:	31 96       	adiw	r30, 0x01	; 1
    1f60:	80 83       	st	Z, r24
						menuScreen->screen2[2][13] = 'o';
    1f62:	0e c0       	rjmp	.+28     	; 0x1f80 <updateScreen+0x680>
    1f64:	80 e5       	ldi	r24, 0x50	; 80
						break;
    1f66:	f8 01       	movw	r30, r16

						case 1:
						menuScreen->screen2[2][10] = 'P';
    1f68:	e2 55       	subi	r30, 0x52	; 82
    1f6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f6c:	80 83       	st	Z, r24
    1f6e:	8f e6       	ldi	r24, 0x6F	; 111
    1f70:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][11] = 'o';
    1f72:	80 83       	st	Z, r24
    1f74:	8c e6       	ldi	r24, 0x6C	; 108
    1f76:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][12] = 'l';
    1f78:	80 83       	st	Z, r24
    1f7a:	89 e7       	ldi	r24, 0x79	; 121
    1f7c:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][13] = 'y';
    1f7e:	80 83       	st	Z, r24
    1f80:	89 85       	ldd	r24, Y+9	; 0x09
    1f82:	f7 01       	movw	r30, r14

						case 3:
						break;
					}
					
			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack]+1));
    1f84:	e8 0f       	add	r30, r24
    1f86:	f1 1d       	adc	r31, r1
    1f88:	20 8d       	ldd	r18, Z+24	; 0x18
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	2f 5f       	subi	r18, 0xFF	; 255
    1f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f90:	42 e0       	ldi	r20, 0x02	; 2
    1f92:	6a e0       	ldi	r22, 0x0A	; 10
    1f94:	c8 01       	movw	r24, r16
    1f96:	87 54       	subi	r24, 0x47	; 71
    1f98:	9e 4f       	sbci	r25, 0xFE	; 254
    1f9a:	e1 d3       	rcall	.+1986   	; 0x275e <numPrinter>
    1f9c:	89 85       	ldd	r24, Y+9	; 0x09
    1f9e:	f7 01       	movw	r30, r14
    1fa0:	e8 0f       	add	r30, r24
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1fa2:	f1 1d       	adc	r31, r1
    1fa4:	e5 51       	subi	r30, 0x15	; 21
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 81       	ld	r24, Z
    1faa:	81 30       	cpi	r24, 0x01	; 1
    1fac:	a9 f0       	breq	.+42     	; 0x1fd8 <updateScreen+0x6d8>
    1fae:	28 f0       	brcs	.+10     	; 0x1fba <updateScreen+0x6ba>
    1fb0:	82 30       	cpi	r24, 0x02	; 2
    1fb2:	f9 f0       	breq	.+62     	; 0x1ff2 <updateScreen+0x6f2>
    1fb4:	83 30       	cpi	r24, 0x03	; 3
    1fb6:	51 f1       	breq	.+84     	; 0x200c <updateScreen+0x70c>
    1fb8:	37 c0       	rjmp	.+110    	; 0x2028 <updateScreen+0x728>
    1fba:	81 e4       	ldi	r24, 0x41	; 65
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	e4 52       	subi	r30, 0x24	; 36
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc2:	80 83       	st	Z, r24
    1fc4:	8d e2       	ldi	r24, 0x2D	; 45
    1fc6:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1fc8:	80 83       	st	Z, r24
    1fca:	82 e5       	ldi	r24, 0x52	; 82
    1fcc:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1fce:	80 83       	st	Z, r24
    1fd0:	80 e2       	ldi	r24, 0x20	; 32
    1fd2:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1fd4:	80 83       	st	Z, r24
    1fd6:	28 c0       	rjmp	.+80     	; 0x2028 <updateScreen+0x728>
    1fd8:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1fda:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1fdc:	e4 52       	subi	r30, 0x24	; 36
    1fde:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe0:	80 83       	st	Z, r24
    1fe2:	80 e2       	ldi	r24, 0x20	; 32
    1fe4:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    1fe6:	80 83       	st	Z, r24
    1fe8:	31 96       	adiw	r30, 0x01	; 1
    1fea:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1fec:	31 96       	adiw	r30, 0x01	; 1
    1fee:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1ff0:	1b c0       	rjmp	.+54     	; 0x2028 <updateScreen+0x728>
    1ff2:	81 e4       	ldi	r24, 0x41	; 65
				break;
    1ff4:	f8 01       	movw	r30, r16
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1ff6:	e4 52       	subi	r30, 0x24	; 36
    1ff8:	fe 4f       	sbci	r31, 0xFE	; 254
    1ffa:	80 83       	st	Z, r24
    1ffc:	80 e2       	ldi	r24, 0x20	; 32
    1ffe:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    2000:	80 83       	st	Z, r24
    2002:	31 96       	adiw	r30, 0x01	; 1
    2004:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    2006:	31 96       	adiw	r30, 0x01	; 1
    2008:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    200a:	0e c0       	rjmp	.+28     	; 0x2028 <updateScreen+0x728>
    200c:	8e e4       	ldi	r24, 0x4E	; 78
				break;
    200e:	f8 01       	movw	r30, r16
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    2010:	e4 52       	subi	r30, 0x24	; 36
    2012:	fe 4f       	sbci	r31, 0xFE	; 254
    2014:	80 83       	st	Z, r24
    2016:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][15] = 'o';
    2018:	31 96       	adiw	r30, 0x01	; 1
    201a:	80 83       	st	Z, r24
    201c:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][16] = 'n';
    201e:	31 96       	adiw	r30, 0x01	; 1
    2020:	80 83       	st	Z, r24
    2022:	85 e6       	ldi	r24, 0x65	; 101
				menuScreen->screen2[4][17] = 'e';
    2024:	31 96       	adiw	r30, 0x01	; 1
    2026:	80 83       	st	Z, r24
    2028:	89 85       	ldd	r24, Y+9	; 0x09
				break;
			}
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    202a:	f7 01       	movw	r30, r14
    202c:	e8 0f       	add	r30, r24
    202e:	f1 1d       	adc	r31, r1
    2030:	e5 53       	subi	r30, 0x35	; 53
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
		numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    2034:	20 81       	ld	r18, Z
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	32 2f       	mov	r19, r18
    203a:	22 27       	eor	r18, r18
				menuScreen->screen2[4][15] = 'o';
				menuScreen->screen2[4][16] = 'n';
				menuScreen->screen2[4][17] = 'e';
				break;
			}
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    203c:	70 96       	adiw	r30, 0x10	; 16
		numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    203e:	80 81       	ld	r24, Z
    2040:	28 2b       	or	r18, r24
    2042:	45 e0       	ldi	r20, 0x05	; 5
    2044:	6d e0       	ldi	r22, 0x0D	; 13
    2046:	c8 01       	movw	r24, r16
    2048:	8d 51       	subi	r24, 0x1D	; 29
    204a:	9e 4f       	sbci	r25, 0xFE	; 254
    204c:	88 d3       	rcall	.+1808   	; 0x275e <numPrinter>
		menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
    204e:	d8 01       	movw	r26, r16
    2050:	a0 51       	subi	r26, 0x10	; 16
    2052:	be 4f       	sbci	r27, 0xFE	; 254
    2054:	8c 91       	ld	r24, X
    2056:	f8 01       	movw	r30, r16
    2058:	e1 51       	subi	r30, 0x11	; 17
    205a:	fe 4f       	sbci	r31, 0xFE	; 254
    205c:	80 83       	st	Z, r24
		menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
    205e:	32 96       	adiw	r30, 0x02	; 2
    2060:	80 81       	ld	r24, Z
    2062:	8c 93       	st	X, r24
		menuScreen->screen2[5][14] = '.';
    2064:	8e e2       	ldi	r24, 0x2E	; 46
    2066:	80 83       	st	Z, r24
    2068:	8a 85       	ldd	r24, Y+10	; 0x0a
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
			
			if(((currentGlobals->menuState)&selectBit)>35) //this accounts for menu stats 36,37,44, and 45
    206a:	87 7f       	andi	r24, 0xF7	; 247
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	24 32       	cpi	r18, 0x24	; 36
    2072:	31 05       	cpc	r19, r1
			{
				triggerChangeScreen = ((currentGlobals->menuState)&selectBit) - 34; //mask to get rid of encoder B pushed state. 
    2074:	14 f0       	brlt	.+4      	; 0x207a <updateScreen+0x77a>
		menuScreen->screen2[5][14] = '.';
			//the track settings screens should now be populated
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
    2076:	82 52       	subi	r24, 0x22	; 34
			if(((currentGlobals->menuState)&selectBit)>35) //this accounts for menu stats 36,37,44, and 45
			{
				triggerChangeScreen = ((currentGlobals->menuState)&selectBit) - 34; //mask to get rid of encoder B pushed state. 
			}
			
			outputS(menuScreen->screen2[triggerChangeScreen], 1); 
    2078:	01 c0       	rjmp	.+2      	; 0x207c <updateScreen+0x77c>
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	c8 2e       	mov	r12, r24
    207e:	d1 2c       	mov	r13, r1
    2080:	0f 2e       	mov	r0, r31
    2082:	f5 e1       	ldi	r31, 0x15	; 21
    2084:	bf 2e       	mov	r11, r31
    2086:	f0 2d       	mov	r31, r0
    2088:	bc 9c       	mul	r11, r12
    208a:	c0 01       	movw	r24, r0
    208c:	bd 9c       	mul	r11, r13
    208e:	90 0d       	add	r25, r0
    2090:	11 24       	eor	r1, r1
    2092:	86 58       	subi	r24, 0x86	; 134
    2094:	9e 4f       	sbci	r25, 0xFE	; 254
    2096:	61 e0       	ldi	r22, 0x01	; 1
    2098:	70 e0       	ldi	r23, 0x00	; 0
    209a:	80 0f       	add	r24, r16
			outputS(menuScreen->screen2[triggerChangeScreen+1], 2); 
    209c:	91 1f       	adc	r25, r17
    209e:	47 d3       	rcall	.+1678   	; 0x272e <outputS>
    20a0:	96 01       	movw	r18, r12
    20a2:	2f 5f       	subi	r18, 0xFF	; 255
    20a4:	3f 4f       	sbci	r19, 0xFF	; 255
    20a6:	b2 9e       	mul	r11, r18
    20a8:	c0 01       	movw	r24, r0
    20aa:	b3 9e       	mul	r11, r19
    20ac:	90 0d       	add	r25, r0
    20ae:	11 24       	eor	r1, r1
    20b0:	86 58       	subi	r24, 0x86	; 134
    20b2:	9e 4f       	sbci	r25, 0xFE	; 254
    20b4:	62 e0       	ldi	r22, 0x02	; 2
    20b6:	70 e0       	ldi	r23, 0x00	; 0
    20b8:	80 0f       	add	r24, r16
    20ba:	91 1f       	adc	r25, r17
			outputS(menuScreen->screen2[triggerChangeScreen+2], 3);
    20bc:	38 d3       	rcall	.+1648   	; 0x272e <outputS>
    20be:	f2 e0       	ldi	r31, 0x02	; 2
    20c0:	cf 0e       	add	r12, r31
    20c2:	d1 1c       	adc	r13, r1
    20c4:	bc 9c       	mul	r11, r12
    20c6:	c0 01       	movw	r24, r0
    20c8:	bd 9c       	mul	r11, r13
    20ca:	90 0d       	add	r25, r0
    20cc:	11 24       	eor	r1, r1
    20ce:	86 58       	subi	r24, 0x86	; 134
    20d0:	9e 4f       	sbci	r25, 0xFE	; 254
    20d2:	63 e0       	ldi	r22, 0x03	; 3
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	80 0f       	add	r24, r16
    20d8:	91 1f       	adc	r25, r17
    20da:	29 d3       	rcall	.+1618   	; 0x272e <outputS>
			
			break;
    20dc:	19 c0       	rjmp	.+50     	; 0x2110 <updateScreen+0x810>
			
			case 3:;
			//do we need this variable?
			numPrinter(menuScreen->screen3[2],10,2,(currentGlobals->currentTrack)+1);
    20de:	29 85       	ldd	r18, Y+9	; 0x09
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	2f 5f       	subi	r18, 0xFF	; 255
    20e4:	3f 4f       	sbci	r19, 0xFF	; 255
    20e6:	42 e0       	ldi	r20, 0x02	; 2
    20e8:	6a e0       	ldi	r22, 0x0A	; 10
    20ea:	68 01       	movw	r12, r16
    20ec:	8f e9       	ldi	r24, 0x9F	; 159
    20ee:	c8 1a       	sub	r12, r24
    20f0:	8d ef       	ldi	r24, 0xFD	; 253
    20f2:	d8 0a       	sbc	r13, r24
    20f4:	c6 01       	movw	r24, r12
    20f6:	33 d3       	rcall	.+1638   	; 0x275e <numPrinter>
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    20f8:	89 85       	ldd	r24, Y+9	; 0x09
    20fa:	fe 01       	movw	r30, r28
    20fc:	e8 0f       	add	r30, r24
    20fe:	f1 1d       	adc	r31, r1
    2100:	41 89       	ldd	r20, Z+17	; 0x11
    2102:	6e e0       	ldi	r22, 0x0E	; 14
    2104:	c6 01       	movw	r24, r12
    2106:	f1 d4       	rcall	.+2530   	; 0x2aea <midiNotePrinter>
    2108:	62 e0       	ldi	r22, 0x02	; 2
			outputS(menuScreen->screen3[2],2);
    210a:	70 e0       	ldi	r23, 0x00	; 0
    210c:	c6 01       	movw	r24, r12
    210e:	0f d3       	rcall	.+1566   	; 0x272e <outputS>
    2110:	8e 85       	ldd	r24, Y+14	; 0x0e
    2112:	82 ff       	sbrs	r24, 2
			break;
			
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
    2114:	70 c1       	rjmp	.+736    	; 0x23f6 <__stack+0x1f7>
    2116:	8f 85       	ldd	r24, Y+15	; 0x0f
    2118:	98 2f       	mov	r25, r24
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
    211a:	9f 70       	andi	r25, 0x0F	; 15
    211c:	89 2e       	mov	r8, r25
    211e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2120:	90 ff       	sbrs	r25, 0
		uint8_t positionSelectUpper = 0;
		if((currentGlobals->buttonSwitchFlag)&0x01)
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <updateScreen+0x828>
    2124:	28 e0       	ldi	r18, 0x08	; 8
    2126:	01 c0       	rjmp	.+2      	; 0x212a <updateScreen+0x82a>
		{
			positionSelectUpper = 8;
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	82 95       	swap	r24
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
		uint8_t positionSelectUpper = 0;
    212c:	8f 70       	andi	r24, 0x0F	; 15
		{
			positionSelectUpper = 8;
		}
		

		switch((currentGlobals->knobStatus)>>4)
    212e:	82 30       	cpi	r24, 0x02	; 2
    2130:	09 f4       	brne	.+2      	; 0x2134 <updateScreen+0x834>
    2132:	94 c0       	rjmp	.+296    	; 0x225c <__stack+0x5d>
    2134:	30 f4       	brcc	.+12     	; 0x2142 <updateScreen+0x842>
    2136:	88 23       	and	r24, r24
    2138:	69 f0       	breq	.+26     	; 0x2154 <updateScreen+0x854>
    213a:	81 30       	cpi	r24, 0x01	; 1
    213c:	09 f4       	brne	.+2      	; 0x2140 <updateScreen+0x840>
    213e:	58 c0       	rjmp	.+176    	; 0x21f0 <updateScreen+0x8f0>
    2140:	59 c1       	rjmp	.+690    	; 0x23f4 <__stack+0x1f5>
    2142:	84 30       	cpi	r24, 0x04	; 4
    2144:	09 f4       	brne	.+2      	; 0x2148 <updateScreen+0x848>
    2146:	f6 c0       	rjmp	.+492    	; 0x2334 <__stack+0x135>
    2148:	08 f4       	brcc	.+2      	; 0x214c <updateScreen+0x84c>
    214a:	be c0       	rjmp	.+380    	; 0x22c8 <__stack+0xc9>
    214c:	85 30       	cpi	r24, 0x05	; 5
    214e:	09 f4       	brne	.+2      	; 0x2152 <updateScreen+0x852>
    2150:	3f c1       	rjmp	.+638    	; 0x23d0 <__stack+0x1d1>
    2152:	50 c1       	rjmp	.+672    	; 0x23f4 <__stack+0x1f5>
    2154:	e8 2d       	mov	r30, r8
		{
			case 0: //output volume
			if((currentPattern->outputLevelMSB[positionSelect])==0)
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	d7 01       	movw	r26, r14
    215a:	ae 0f       	add	r26, r30
    215c:	bf 1f       	adc	r27, r31
    215e:	8c 91       	ld	r24, X
    2160:	81 11       	cpse	r24, r1
    2162:	10 c0       	rjmp	.+32     	; 0x2184 <updateScreen+0x884>
    2164:	80 e2       	ldi	r24, 0x20	; 32
			{ //value is positive
				menuScreen->knobScreen[0][14] = ' ';
    2166:	d8 01       	movw	r26, r16
    2168:	ae 5f       	subi	r26, 0xFE	; 254
    216a:	bc 4f       	sbci	r27, 0xFC	; 252
    216c:	8c 93       	st	X, r24
    216e:	ee 0d       	add	r30, r14
				numPrinter(menuScreen->knobScreen[0],15,2,currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
    2170:	ff 1d       	adc	r31, r15
    2172:	20 85       	ldd	r18, Z+8	; 0x08
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	42 e0       	ldi	r20, 0x02	; 2
    2178:	6f e0       	ldi	r22, 0x0F	; 15
    217a:	c8 01       	movw	r24, r16
    217c:	8c 50       	subi	r24, 0x0C	; 12
    217e:	9d 4f       	sbci	r25, 0xFD	; 253
    2180:	ee d2       	rcall	.+1500   	; 0x275e <numPrinter>
    2182:	29 c0       	rjmp	.+82     	; 0x21d6 <updateScreen+0x8d6>
    2184:	8d e2       	ldi	r24, 0x2D	; 45
    2186:	d8 01       	movw	r26, r16
			}else
			{
				menuScreen->knobScreen[0][14] = '-';
    2188:	ae 5f       	subi	r26, 0xFE	; 254
    218a:	bc 4f       	sbci	r27, 0xFC	; 252
    218c:	8c 93       	st	X, r24
    218e:	68 01       	movw	r12, r16
				menuScreen->knobScreen[0][15] = ((((currentPattern->outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    2190:	a3 e0       	ldi	r26, 0x03	; 3
    2192:	ca 0e       	add	r12, r26
    2194:	da 1e       	adc	r13, r26
    2196:	ee 0d       	add	r30, r14
    2198:	ff 1d       	adc	r31, r15
    219a:	80 85       	ldd	r24, Z+8	; 0x08
    219c:	80 95       	com	r24
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	01 96       	adiw	r24, 0x01	; 1
    21a2:	64 e6       	ldi	r22, 0x64	; 100
    21a4:	70 e0       	ldi	r23, 0x00	; 0
    21a6:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__divmodhi4>
    21aa:	2a e0       	ldi	r18, 0x0A	; 10
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	b9 01       	movw	r22, r18
    21b0:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__divmodhi4>
    21b4:	60 5d       	subi	r22, 0xD0	; 208
    21b6:	d6 01       	movw	r26, r12
    21b8:	6c 93       	st	X, r22
				menuScreen->knobScreen[0][16] = (((currentPattern->outputLevelLSB[positionSelect]^255)+1)%10)+48;
    21ba:	78 01       	movw	r14, r16
    21bc:	bc ef       	ldi	r27, 0xFC	; 252
    21be:	eb 1a       	sub	r14, r27
    21c0:	fb 0a       	sbc	r15, r27
    21c2:	80 85       	ldd	r24, Z+8	; 0x08
    21c4:	80 95       	com	r24
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	01 96       	adiw	r24, 0x01	; 1
    21ca:	b9 01       	movw	r22, r18
    21cc:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__divmodhi4>
    21d0:	80 5d       	subi	r24, 0xD0	; 208
    21d2:	f7 01       	movw	r30, r14
			}
				
			menuScreen->knobScreen[0][10] = positionSelect + 49;
    21d4:	80 83       	st	Z, r24
    21d6:	f8 01       	movw	r30, r16
    21d8:	e2 50       	subi	r30, 0x02	; 2
    21da:	fd 4f       	sbci	r31, 0xFD	; 253
    21dc:	81 e3       	ldi	r24, 0x31	; 49
    21de:	88 0d       	add	r24, r8
			outputS(menuScreen->knobScreen[0], 3);
    21e0:	80 83       	st	Z, r24
    21e2:	63 e0       	ldi	r22, 0x03	; 3
    21e4:	70 e0       	ldi	r23, 0x00	; 0
    21e6:	c8 01       	movw	r24, r16
    21e8:	8c 50       	subi	r24, 0x0C	; 12
    21ea:	9d 4f       	sbci	r25, 0xFD	; 253
    21ec:	a0 d2       	rcall	.+1344   	; 0x272e <outputS>
			break;
    21ee:	02 c1       	rjmp	.+516    	; 0x23f4 <__stack+0x1f5>
				
			case 1: //pitch
			menuScreen->knobScreen[1][5] = positionSelect+49; 
    21f0:	f8 01       	movw	r30, r16
    21f2:	e2 5f       	subi	r30, 0xF2	; 242
    21f4:	fc 4f       	sbci	r31, 0xFC	; 252
    21f6:	81 e3       	ldi	r24, 0x31	; 49
    21f8:	88 0d       	add	r24, r8
			if(currentPattern->outputPitch[positionSelect]>>7)
    21fa:	80 83       	st	Z, r24
    21fc:	91 2c       	mov	r9, r1
    21fe:	f7 01       	movw	r30, r14
    2200:	e8 0d       	add	r30, r8
    2202:	f9 1d       	adc	r31, r9
    2204:	80 89       	ldd	r24, Z+16	; 0x10
    2206:	88 23       	and	r24, r24
			{
				menuScreen->knobScreen[1][7] = '-';
    2208:	94 f4       	brge	.+36     	; 0x222e <__stack+0x2f>
    220a:	8d e2       	ldi	r24, 0x2D	; 45
    220c:	f8 01       	movw	r30, r16
    220e:	e0 5f       	subi	r30, 0xF0	; 240
    2210:	fc 4f       	sbci	r31, 0xFC	; 252
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect])^255);
    2212:	80 83       	st	Z, r24
    2214:	f7 01       	movw	r30, r14
    2216:	e8 0d       	add	r30, r8
    2218:	f9 1d       	adc	r31, r9
    221a:	20 89       	ldd	r18, Z+16	; 0x10
    221c:	20 95       	com	r18
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	43 e0       	ldi	r20, 0x03	; 3
    2222:	68 e0       	ldi	r22, 0x08	; 8
    2224:	c8 01       	movw	r24, r16
    2226:	87 5f       	subi	r24, 0xF7	; 247
    2228:	9c 4f       	sbci	r25, 0xFC	; 252
			}else
			{
				menuScreen->knobScreen[1][7] = '+';
    222a:	99 d2       	rcall	.+1330   	; 0x275e <numPrinter>
    222c:	10 c0       	rjmp	.+32     	; 0x224e <__stack+0x4f>
    222e:	8b e2       	ldi	r24, 0x2B	; 43
    2230:	f8 01       	movw	r30, r16
    2232:	e0 5f       	subi	r30, 0xF0	; 240
				numPrinter(menuScreen->knobScreen[1],8,3,currentPattern->outputPitch[positionSelect]);
    2234:	fc 4f       	sbci	r31, 0xFC	; 252
    2236:	80 83       	st	Z, r24
    2238:	f7 01       	movw	r30, r14
    223a:	e8 0d       	add	r30, r8
    223c:	f9 1d       	adc	r31, r9
    223e:	20 89       	ldd	r18, Z+16	; 0x10
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	43 e0       	ldi	r20, 0x03	; 3
    2244:	68 e0       	ldi	r22, 0x08	; 8
    2246:	c8 01       	movw	r24, r16
    2248:	87 5f       	subi	r24, 0xF7	; 247
    224a:	9c 4f       	sbci	r25, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
    224c:	88 d2       	rcall	.+1296   	; 0x275e <numPrinter>
    224e:	63 e0       	ldi	r22, 0x03	; 3
    2250:	70 e0       	ldi	r23, 0x00	; 0
    2252:	c8 01       	movw	r24, r16
    2254:	87 5f       	subi	r24, 0xF7	; 247
    2256:	9c 4f       	sbci	r25, 0xFC	; 252
			break;
    2258:	6a d2       	rcall	.+1236   	; 0x272e <outputS>
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    225a:	cc c0       	rjmp	.+408    	; 0x23f4 <__stack+0x1f5>
    225c:	91 2c       	mov	r9, r1
    225e:	c2 2e       	mov	r12, r18
    2260:	d1 2c       	mov	r13, r1
    2262:	c4 01       	movw	r24, r8
    2264:	8c 0d       	add	r24, r12
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    2266:	9d 1d       	adc	r25, r13
    2268:	58 01       	movw	r10, r16
    226a:	f2 ee       	ldi	r31, 0xE2	; 226
    226c:	af 1a       	sub	r10, r31
    226e:	fc ef       	ldi	r31, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    2270:	bf 0a       	sbc	r11, r31
    2272:	e8 0e       	add	r14, r24
    2274:	f9 1e       	adc	r15, r25
    2276:	f7 01       	movw	r30, r14
    2278:	e8 5b       	subi	r30, 0xB8	; 184
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	20 81       	ld	r18, Z
    227e:	30 e0       	ldi	r19, 0x00	; 0
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    2280:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    2282:	22 27       	eor	r18, r18
    2284:	70 96       	adiw	r30, 0x10	; 16
    2286:	80 81       	ld	r24, Z
    2288:	28 2b       	or	r18, r24
    228a:	45 e0       	ldi	r20, 0x05	; 5
    228c:	6e e0       	ldi	r22, 0x0E	; 14
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
    228e:	c5 01       	movw	r24, r10
    2290:	66 d2       	rcall	.+1228   	; 0x275e <numPrinter>
    2292:	f8 01       	movw	r30, r16
    2294:	e5 5d       	subi	r30, 0xD5	; 213
    2296:	fc 4f       	sbci	r31, 0xFC	; 252
    2298:	d8 01       	movw	r26, r16
    229a:	a4 5d       	subi	r26, 0xD4	; 212
    229c:	bc 4f       	sbci	r27, 0xFC	; 252
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
    229e:	8c 91       	ld	r24, X
    22a0:	80 83       	st	Z, r24
    22a2:	32 96       	adiw	r30, 0x02	; 2
			menuScreen->knobScreen[2][15] = '.';	
    22a4:	80 81       	ld	r24, Z
    22a6:	8c 93       	st	X, r24
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
    22a8:	8e e2       	ldi	r24, 0x2E	; 46
    22aa:	80 83       	st	Z, r24
    22ac:	94 01       	movw	r18, r8
    22ae:	2f 5f       	subi	r18, 0xFF	; 255
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
    22b2:	2c 0d       	add	r18, r12
    22b4:	3d 1d       	adc	r19, r13
    22b6:	42 e0       	ldi	r20, 0x02	; 2
    22b8:	6a e0       	ldi	r22, 0x0A	; 10
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
    22ba:	c5 01       	movw	r24, r10
    22bc:	50 d2       	rcall	.+1184   	; 0x275e <numPrinter>
    22be:	63 e0       	ldi	r22, 0x03	; 3
    22c0:	70 e0       	ldi	r23, 0x00	; 0
    22c2:	c5 01       	movw	r24, r10
			break;
    22c4:	34 d2       	rcall	.+1128   	; 0x272e <outputS>
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    22c6:	96 c0       	rjmp	.+300    	; 0x23f4 <__stack+0x1f5>
    22c8:	91 2c       	mov	r9, r1
    22ca:	c2 2e       	mov	r12, r18
    22cc:	d1 2c       	mov	r13, r1
    22ce:	c4 01       	movw	r24, r8
    22d0:	8c 0d       	add	r24, r12
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    22d2:	9d 1d       	adc	r25, r13
    22d4:	58 01       	movw	r10, r16
    22d6:	2d ec       	ldi	r18, 0xCD	; 205
    22d8:	a2 1a       	sub	r10, r18
    22da:	2c ef       	ldi	r18, 0xFC	; 252
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
			break;
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    22dc:	b2 0a       	sbc	r11, r18
    22de:	e8 0e       	add	r14, r24
    22e0:	f9 1e       	adc	r15, r25
    22e2:	f7 01       	movw	r30, r14
    22e4:	e8 59       	subi	r30, 0x98	; 152
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	20 81       	ld	r18, Z
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
			break;
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    22ee:	22 27       	eor	r18, r18
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    22f0:	70 96       	adiw	r30, 0x10	; 16
    22f2:	80 81       	ld	r24, Z
    22f4:	28 2b       	or	r18, r24
    22f6:	45 e0       	ldi	r20, 0x05	; 5
    22f8:	6f e0       	ldi	r22, 0x0F	; 15
    22fa:	c5 01       	movw	r24, r10
    22fc:	30 d2       	rcall	.+1120   	; 0x275e <numPrinter>
			menuScreen->knobScreen[3][14] = menuScreen->knobScreen[3][15];
    22fe:	f8 01       	movw	r30, r16
    2300:	ef 5b       	subi	r30, 0xBF	; 191
    2302:	fc 4f       	sbci	r31, 0xFC	; 252
    2304:	d8 01       	movw	r26, r16
    2306:	ae 5b       	subi	r26, 0xBE	; 190
    2308:	bc 4f       	sbci	r27, 0xFC	; 252
    230a:	8c 91       	ld	r24, X
    230c:	80 83       	st	Z, r24
			menuScreen->knobScreen[3][15] = menuScreen->knobScreen[3][16];
    230e:	32 96       	adiw	r30, 0x02	; 2
    2310:	80 81       	ld	r24, Z
    2312:	8c 93       	st	X, r24
			menuScreen->knobScreen[3][16] = '.';
    2314:	8e e2       	ldi	r24, 0x2E	; 46
			numPrinter(menuScreen->knobScreen[3],11,2,(positionSelect+1+positionSelectUpper));
    2316:	80 83       	st	Z, r24
    2318:	94 01       	movw	r18, r8
    231a:	2f 5f       	subi	r18, 0xFF	; 255
    231c:	3f 4f       	sbci	r19, 0xFF	; 255
    231e:	2c 0d       	add	r18, r12
    2320:	3d 1d       	adc	r19, r13
    2322:	42 e0       	ldi	r20, 0x02	; 2
    2324:	6b e0       	ldi	r22, 0x0B	; 11
    2326:	c5 01       	movw	r24, r10
			outputS(menuScreen->knobScreen[3], 3);
    2328:	1a d2       	rcall	.+1076   	; 0x275e <numPrinter>
    232a:	63 e0       	ldi	r22, 0x03	; 3
    232c:	70 e0       	ldi	r23, 0x00	; 0
    232e:	c5 01       	movw	r24, r10
    2330:	fe d1       	rcall	.+1020   	; 0x272e <outputS>
			break;
				
			case 4: //track volume
			if(currentPattern->trackMainVolumeMSB[(positionSelect+positionSelectUpper)]==0)
    2332:	60 c0       	rjmp	.+192    	; 0x23f4 <__stack+0x1f5>
    2334:	c2 2e       	mov	r12, r18
    2336:	d1 2c       	mov	r13, r1
    2338:	c8 0c       	add	r12, r8
    233a:	d1 1c       	adc	r13, r1
    233c:	f7 01       	movw	r30, r14
    233e:	ec 0d       	add	r30, r12
    2340:	fd 1d       	adc	r31, r13
    2342:	80 a5       	ldd	r24, Z+40	; 0x28
			{
				menuScreen->knobScreen[4][15] = ' ';
    2344:	81 11       	cpse	r24, r1
    2346:	11 c0       	rjmp	.+34     	; 0x236a <__stack+0x16b>
    2348:	80 e2       	ldi	r24, 0x20	; 32
    234a:	f8 01       	movw	r30, r16
    234c:	e9 5a       	subi	r30, 0xA9	; 169
 				numPrinter(menuScreen->knobScreen[4],16, 2, currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]);
    234e:	fc 4f       	sbci	r31, 0xFC	; 252
    2350:	80 83       	st	Z, r24
    2352:	f7 01       	movw	r30, r14
    2354:	ec 0d       	add	r30, r12
    2356:	fd 1d       	adc	r31, r13
    2358:	20 ad       	ldd	r18, Z+56	; 0x38
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	42 e0       	ldi	r20, 0x02	; 2
    235e:	60 e1       	ldi	r22, 0x10	; 16
    2360:	c8 01       	movw	r24, r16
    2362:	88 5b       	subi	r24, 0xB8	; 184
    2364:	9c 4f       	sbci	r25, 0xFC	; 252
    2366:	fb d1       	rcall	.+1014   	; 0x275e <numPrinter>
			}else
			{
				menuScreen->knobScreen[4][15] = '-';
    2368:	25 c0       	rjmp	.+74     	; 0x23b4 <__stack+0x1b5>
    236a:	8d e2       	ldi	r24, 0x2D	; 45
    236c:	f8 01       	movw	r30, r16
    236e:	e9 5a       	subi	r30, 0xA9	; 169
    2370:	fc 4f       	sbci	r31, 0xFC	; 252
				menuScreen->knobScreen[4][16] = ((((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    2372:	80 83       	st	Z, r24
    2374:	31 96       	adiw	r30, 0x01	; 1
    2376:	ec 0c       	add	r14, r12
    2378:	fd 1c       	adc	r15, r13
    237a:	d7 01       	movw	r26, r14
    237c:	d8 96       	adiw	r26, 0x38	; 56
    237e:	8c 91       	ld	r24, X
    2380:	80 95       	com	r24
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	01 96       	adiw	r24, 0x01	; 1
    2386:	64 e6       	ldi	r22, 0x64	; 100
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__divmodhi4>
    238e:	2a e0       	ldi	r18, 0x0A	; 10
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	b9 01       	movw	r22, r18
    2394:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__divmodhi4>
    2398:	60 5d       	subi	r22, 0xD0	; 208
				menuScreen->knobScreen[4][17] = (((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%10)+48;
    239a:	60 83       	st	Z, r22
    239c:	31 96       	adiw	r30, 0x01	; 1
    239e:	d7 01       	movw	r26, r14
    23a0:	d8 96       	adiw	r26, 0x38	; 56
    23a2:	8c 91       	ld	r24, X
    23a4:	80 95       	com	r24
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	01 96       	adiw	r24, 0x01	; 1
    23aa:	b9 01       	movw	r22, r18
    23ac:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__divmodhi4>
    23b0:	80 5d       	subi	r24, 0xD0	; 208
			}
				 numPrinter(menuScreen->knobScreen[4],12,2,(positionSelect+positionSelectUpper+1));
    23b2:	80 83       	st	Z, r24
    23b4:	08 5b       	subi	r16, 0xB8	; 184
    23b6:	1c 4f       	sbci	r17, 0xFC	; 252
    23b8:	96 01       	movw	r18, r12
    23ba:	2f 5f       	subi	r18, 0xFF	; 255
    23bc:	3f 4f       	sbci	r19, 0xFF	; 255
    23be:	42 e0       	ldi	r20, 0x02	; 2
    23c0:	6c e0       	ldi	r22, 0x0C	; 12
    23c2:	c8 01       	movw	r24, r16
    23c4:	cc d1       	rcall	.+920    	; 0x275e <numPrinter>
				 outputS(menuScreen->knobScreen[4], 3);
    23c6:	63 e0       	ldi	r22, 0x03	; 3
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	c8 01       	movw	r24, r16
    23cc:	b0 d1       	rcall	.+864    	; 0x272e <outputS>
    23ce:	12 c0       	rjmp	.+36     	; 0x23f4 <__stack+0x1f5>
			break;
    23d0:	06 5d       	subi	r16, 0xD6	; 214
			
			case 5:
			numPrinter(menuScreen->screen0[2],5,3,currentPattern->patternBPM);
    23d2:	1f 4f       	sbci	r17, 0xFF	; 255
    23d4:	f7 01       	movw	r30, r14
    23d6:	e8 53       	subi	r30, 0x38	; 56
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	20 81       	ld	r18, Z
    23dc:	31 81       	ldd	r19, Z+1	; 0x01
    23de:	43 e0       	ldi	r20, 0x03	; 3
    23e0:	65 e0       	ldi	r22, 0x05	; 5
    23e2:	c8 01       	movw	r24, r16
    23e4:	bc d1       	rcall	.+888    	; 0x275e <numPrinter>
    23e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    23e8:	81 11       	cpse	r24, r1
			if(currentGlobals->menuState==PreformanceModeInit)
    23ea:	04 c0       	rjmp	.+8      	; 0x23f4 <__stack+0x1f5>
    23ec:	62 e0       	ldi	r22, 0x02	; 2
    23ee:	70 e0       	ldi	r23, 0x00	; 0
			{
				outputS(menuScreen->screen0[2],2);
    23f0:	c8 01       	movw	r24, r16
    23f2:	9d d1       	rcall	.+826    	; 0x272e <outputS>
    23f4:	1e 86       	std	Y+14, r1	; 0x0e
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
			}
			break;
		}
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<knobChange));			
    23fa:	1f 91       	pop	r17
	}
    23fc:	0f 91       	pop	r16
    23fe:	ff 90       	pop	r15
    2400:	ef 90       	pop	r14
    2402:	df 90       	pop	r13
    2404:	cf 90       	pop	r12
    2406:	bf 90       	pop	r11
    2408:	af 90       	pop	r10
    240a:	9f 90       	pop	r9
    240c:	8f 90       	pop	r8
    240e:	08 95       	ret

00002410 <__vector_54>:
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	0f b6       	in	r0, 0x3f	; 63
}

void midiTransmit(uint8_t data)
{
  while (!(UCSR3A & (1 << UDRE3)));
  UDR3 = data;
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	0b b6       	in	r0, 0x3b	; 59
    241c:	0f 92       	push	r0
    241e:	2f 93       	push	r18
    2420:	3f 93       	push	r19
    2422:	5f 93       	push	r21
    2424:	6f 93       	push	r22
    2426:	7f 93       	push	r23
    2428:	8f 93       	push	r24
    242a:	9f 93       	push	r25
    242c:	af 93       	push	r26
    242e:	bf 93       	push	r27
    2430:	ef 93       	push	r30
    2432:	ff 93       	push	r31
    2434:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2438:	82 2f       	mov	r24, r18
    243a:	82 95       	swap	r24
    243c:	8f 70       	andi	r24, 0x0F	; 15
    243e:	88 50       	subi	r24, 0x08	; 8
    2440:	82 30       	cpi	r24, 0x02	; 2
    2442:	78 f4       	brcc	.+30     	; 0x2462 <__vector_54+0x52>
    2444:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <midiWriteIndex>
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	fc 01       	movw	r30, r24
    244c:	ee 0f       	add	r30, r30
    244e:	ff 1f       	adc	r31, r31
    2450:	8e 0f       	add	r24, r30
    2452:	9f 1f       	adc	r25, r31
    2454:	fc 01       	movw	r30, r24
    2456:	e6 59       	subi	r30, 0x96	; 150
    2458:	f9 4f       	sbci	r31, 0xF9	; 249
    245a:	20 83       	st	Z, r18
    245c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    2460:	50 c0       	rjmp	.+160    	; 0x2502 <__vector_54+0xf2>
    2462:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    2466:	81 11       	cpse	r24, r1
    2468:	15 c0       	rjmp	.+42     	; 0x2494 <__vector_54+0x84>
    246a:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <midiWriteIndex>
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    2474:	fc 01       	movw	r30, r24
    2476:	ee 0f       	add	r30, r30
    2478:	ff 1f       	adc	r31, r31
    247a:	e8 0f       	add	r30, r24
    247c:	f9 1f       	adc	r31, r25
    247e:	e6 59       	subi	r30, 0x96	; 150
    2480:	f9 4f       	sbci	r31, 0xF9	; 249
    2482:	e3 0f       	add	r30, r19
    2484:	f1 1d       	adc	r31, r1
    2486:	21 83       	std	Z+1, r18	; 0x01
    2488:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    248c:	8f 5f       	subi	r24, 0xFF	; 255
    248e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <midiWriteFlag>
    2492:	37 c0       	rjmp	.+110    	; 0x2502 <__vector_54+0xf2>
    2494:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    2498:	8f 3f       	cpi	r24, 0xFF	; 255
    249a:	99 f1       	breq	.+102    	; 0x2502 <__vector_54+0xf2>
    249c:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <midiWriteIndex>
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    24a6:	fc 01       	movw	r30, r24
    24a8:	ee 0f       	add	r30, r30
    24aa:	ff 1f       	adc	r31, r31
    24ac:	e8 0f       	add	r30, r24
    24ae:	f9 1f       	adc	r31, r25
    24b0:	e6 59       	subi	r30, 0x96	; 150
    24b2:	f9 4f       	sbci	r31, 0xF9	; 249
    24b4:	e3 0f       	add	r30, r19
    24b6:	f1 1d       	adc	r31, r1
    24b8:	21 83       	std	Z+1, r18	; 0x01
    24ba:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <midiWriteIndex>
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	fc 01       	movw	r30, r24
    24c2:	ee 0f       	add	r30, r30
    24c4:	ff 1f       	adc	r31, r31
    24c6:	8e 0f       	add	r24, r30
    24c8:	9f 1f       	adc	r25, r31
    24ca:	fc 01       	movw	r30, r24
    24cc:	e6 59       	subi	r30, 0x96	; 150
    24ce:	f9 4f       	sbci	r31, 0xF9	; 249
    24d0:	20 81       	ld	r18, Z
    24d2:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <midiWriteIndex>
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	01 96       	adiw	r24, 0x01	; 1
    24da:	6a e0       	ldi	r22, 0x0A	; 10
    24dc:	70 e0       	ldi	r23, 0x00	; 0
    24de:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__divmodhi4>
    24e2:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <midiWriteIndex>
    24e6:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <midiWriteIndex>
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	fc 01       	movw	r30, r24
    24ee:	ee 0f       	add	r30, r30
    24f0:	ff 1f       	adc	r31, r31
    24f2:	8e 0f       	add	r24, r30
    24f4:	9f 1f       	adc	r25, r31
    24f6:	fc 01       	movw	r30, r24
    24f8:	e6 59       	subi	r30, 0x96	; 150
    24fa:	f9 4f       	sbci	r31, 0xF9	; 249
    24fc:	20 83       	st	Z, r18
    24fe:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    2502:	ff 91       	pop	r31
    2504:	ef 91       	pop	r30
    2506:	bf 91       	pop	r27
    2508:	af 91       	pop	r26
    250a:	9f 91       	pop	r25
    250c:	8f 91       	pop	r24
    250e:	7f 91       	pop	r23
    2510:	6f 91       	pop	r22
    2512:	5f 91       	pop	r21
    2514:	3f 91       	pop	r19
    2516:	2f 91       	pop	r18
    2518:	0f 90       	pop	r0
    251a:	0b be       	out	0x3b, r0	; 59
    251c:	0f 90       	pop	r0
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	0f 90       	pop	r0
    2522:	1f 90       	pop	r1
    2524:	18 95       	reti

00002526 <initMidi>:
    2526:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    252a:	8f e1       	ldi	r24, 0x1F	; 31
    252c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    2530:	e1 e3       	ldi	r30, 0x31	; 49
    2532:	f1 e0       	ldi	r31, 0x01	; 1
    2534:	80 81       	ld	r24, Z
    2536:	88 69       	ori	r24, 0x98	; 152
    2538:	80 83       	st	Z, r24
    253a:	e2 e3       	ldi	r30, 0x32	; 50
    253c:	f1 e0       	ldi	r31, 0x01	; 1
    253e:	80 81       	ld	r24, Z
    2540:	86 60       	ori	r24, 0x06	; 6
    2542:	80 83       	st	Z, r24
    2544:	08 95       	ret

00002546 <midiRead>:
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
    2546:	af 92       	push	r10
    2548:	bf 92       	push	r11
    254a:	cf 92       	push	r12
    254c:	df 92       	push	r13
    254e:	ef 92       	push	r14
    2550:	ff 92       	push	r15
    2552:	0f 93       	push	r16
    2554:	1f 93       	push	r17
    2556:	cf 93       	push	r28
    2558:	df 93       	push	r29
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
  while (midiReadIndex != midiWriteIndex)
    255e:	e0 91 f2 03 	lds	r30, 0x03F2	; 0x8003f2 <midiReadIndex>
    2562:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <midiWriteIndex>
    2566:	e8 17       	cp	r30, r24
    2568:	09 f4       	brne	.+2      	; 0x256c <midiRead+0x26>
    256a:	5c c0       	rjmp	.+184    	; 0x2624 <midiRead+0xde>
    256c:	7e 01       	movw	r14, r28
    256e:	86 ea       	ldi	r24, 0xA6	; 166
    2570:	e8 0e       	add	r14, r24
    2572:	f1 1c       	adc	r15, r1
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    2574:	0a e0       	ldi	r16, 0x0A	; 10
    2576:	10 e0       	ldi	r17, 0x00	; 0

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
  {
    uint8_t midiMessageType = ((midiEventBuffer[midiReadIndex].statusByte)>>4);
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	cf 01       	movw	r24, r30
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	e8 0f       	add	r30, r24
    2582:	f9 1f       	adc	r31, r25
    2584:	e6 59       	subi	r30, 0x96	; 150
    2586:	f9 4f       	sbci	r31, 0xF9	; 249
    2588:	80 81       	ld	r24, Z
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    258a:	22 81       	ldd	r18, Z+2	; 0x02
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    258c:	90 81       	ld	r25, Z
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    258e:	82 95       	swap	r24
    2590:	8f 70       	andi	r24, 0x0F	; 15
    2592:	89 30       	cpi	r24, 0x09	; 9
    2594:	c9 f5       	brne	.+114    	; 0x2608 <midiRead+0xc2>
    2596:	22 23       	and	r18, r18
    2598:	b9 f1       	breq	.+110    	; 0x2608 <midiRead+0xc2>
    259a:	9f 70       	andi	r25, 0x0F	; 15
    259c:	c7 56       	subi	r28, 0x67	; 103
    259e:	de 4f       	sbci	r29, 0xFE	; 254
    25a0:	88 81       	ld	r24, Y
    25a2:	c9 59       	subi	r28, 0x99	; 153
    25a4:	d1 40       	sbci	r29, 0x01	; 1
    25a6:	98 13       	cpse	r25, r24
    25a8:	2f c0       	rjmp	.+94     	; 0x2608 <midiRead+0xc2>
    25aa:	0f 2e       	mov	r0, r31
    25ac:	f9 e8       	ldi	r31, 0x89	; 137
    25ae:	af 2e       	mov	r10, r31
    25b0:	bb 24       	eor	r11, r11
    25b2:	b3 94       	inc	r11
    25b4:	f0 2d       	mov	r31, r0
    25b6:	ac 0e       	add	r10, r28
    25b8:	bd 1e       	adc	r11, r29
    25ba:	e1 e1       	ldi	r30, 0x11	; 17
    25bc:	ae 0e       	add	r10, r30
    25be:	b1 1c       	adc	r11, r1
    25c0:	6e 01       	movw	r12, r28
    25c2:	f6 e9       	ldi	r31, 0x96	; 150
    25c4:	cf 0e       	add	r12, r31
    25c6:	d1 1c       	adc	r13, r1
    {
        for (int i=0; i<16; i++)
        {
          if(midiEventBuffer[midiReadIndex].dataByte[0]==currentGlobals.midiTrackNote[i])
    25c8:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <midiReadIndex>
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	fc 01       	movw	r30, r24
    25d0:	ee 0f       	add	r30, r30
    25d2:	ff 1f       	adc	r31, r31
    25d4:	8e 0f       	add	r24, r30
    25d6:	9f 1f       	adc	r25, r31
    25d8:	fc 01       	movw	r30, r24
    25da:	e6 59       	subi	r30, 0x96	; 150
    25dc:	f9 4f       	sbci	r31, 0xF9	; 249
    25de:	91 81       	ldd	r25, Z+1	; 0x01
    25e0:	f5 01       	movw	r30, r10
    25e2:	81 91       	ld	r24, Z+
    25e4:	5f 01       	movw	r10, r30
    25e6:	98 13       	cpse	r25, r24
    25e8:	09 c0       	rjmp	.+18     	; 0x25fc <midiRead+0xb6>
          { //we don't care about velocity, at least not yet.
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
    25ea:	f6 01       	movw	r30, r12
    25ec:	20 81       	ld	r18, Z
    25ee:	e0 57       	subi	r30, 0x70	; 112
    25f0:	f1 09       	sbc	r31, r1
    25f2:	40 81       	ld	r20, Z
    25f4:	f6 01       	movw	r30, r12
    25f6:	60 89       	ldd	r22, Z+16	; 0x10
    25f8:	80 a1       	ldd	r24, Z+32	; 0x20
    25fa:	cc d3       	rcall	.+1944   	; 0x2d94 <trackControl>
    25fc:	ff ef       	ldi	r31, 0xFF	; 255
    25fe:	cf 1a       	sub	r12, r31
    2600:	df 0a       	sbc	r13, r31
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    {
        for (int i=0; i<16; i++)
    2602:	ce 14       	cp	r12, r14
    2604:	df 04       	cpc	r13, r15
    2606:	01 f7       	brne	.-64     	; 0x25c8 <midiRead+0x82>
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    2608:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <midiReadIndex>
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	01 96       	adiw	r24, 0x01	; 1
    2610:	b8 01       	movw	r22, r16
    2612:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__divmodhi4>
    2616:	e8 2f       	mov	r30, r24
    2618:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <midiReadIndex>
  UDR3 = data;
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
    261c:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <midiWriteIndex>
    2620:	8e 13       	cpse	r24, r30
    2622:	aa cf       	rjmp	.-172    	; 0x2578 <midiRead+0x32>
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
  }
}
    2624:	df 91       	pop	r29
    2626:	cf 91       	pop	r28
    2628:	1f 91       	pop	r17
    262a:	0f 91       	pop	r16
    262c:	ff 90       	pop	r15
    262e:	ef 90       	pop	r14
    2630:	df 90       	pop	r13
    2632:	cf 90       	pop	r12
    2634:	bf 90       	pop	r11
    2636:	af 90       	pop	r10
    2638:	08 95       	ret

0000263a <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    263a:	e2 e0       	ldi	r30, 0x02	; 2
    263c:	f1 e0       	ldi	r31, 0x01	; 1
    263e:	80 81       	ld	r24, Z
    2640:	80 62       	ori	r24, 0x20	; 32
    2642:	80 83       	st	Z, r24
    2644:	85 e0       	ldi	r24, 0x05	; 5
    2646:	8a 95       	dec	r24
    2648:	f1 f7       	brne	.-4      	; 0x2646 <enableCycle+0xc>
    264a:	00 00       	nop
    264c:	80 81       	ld	r24, Z
    264e:	8f 7d       	andi	r24, 0xDF	; 223
    2650:	80 83       	st	Z, r24
    2652:	08 95       	ret

00002654 <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
    2654:	e2 e0       	ldi	r30, 0x02	; 2
    2656:	f1 e0       	ldi	r31, 0x01	; 1
    2658:	90 81       	ld	r25, Z
    265a:	9f 7b       	andi	r25, 0xBF	; 191
    265c:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    265e:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
    2660:	ec cf       	rjmp	.-40     	; 0x263a <enableCycle>
    2662:	08 95       	ret

00002664 <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
    2664:	e2 e0       	ldi	r30, 0x02	; 2
    2666:	f1 e0       	ldi	r31, 0x01	; 1
    2668:	90 81       	ld	r25, Z
    266a:	90 64       	ori	r25, 0x40	; 64
    266c:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    266e:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
    2670:	e4 cf       	rjmp	.-56     	; 0x263a <enableCycle>
    2672:	08 95       	ret

00002674 <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRH = 0x60; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
    2674:	80 e6       	ldi	r24, 0x60	; 96
    2676:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	DDRC =0xFF; //all pins on the LCD Data Bus.
    267a:	8f ef       	ldi	r24, 0xFF	; 255
    267c:	87 b9       	out	0x07, r24	; 7


	PORTH &= 0B10011111;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
    267e:	e2 e0       	ldi	r30, 0x02	; 2
    2680:	f1 e0       	ldi	r31, 0x01	; 1
    2682:	80 81       	ld	r24, Z
    2684:	8f 79       	andi	r24, 0x9F	; 159
    2686:	80 83       	st	Z, r24

	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
    2688:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    268a:	8f e1       	ldi	r24, 0x1F	; 31
    268c:	93 e0       	ldi	r25, 0x03	; 3
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <initScreen+0x1a>
    2692:	00 c0       	rjmp	.+0      	; 0x2694 <initScreen+0x20>
    2694:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose


	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    2696:	8a e2       	ldi	r24, 0x2A	; 42
    2698:	dd df       	rcall	.-70     	; 0x2654 <command>
	command(0x71);        // Function selection A:
    269a:	81 e7       	ldi	r24, 0x71	; 113
    269c:	db df       	rcall	.-74     	; 0x2654 <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
    269e:	8c e5       	ldi	r24, 0x5C	; 92
    26a0:	e1 df       	rcall	.-62     	; 0x2664 <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    26a2:	88 e2       	ldi	r24, 0x28	; 40
    26a4:	d7 df       	rcall	.-82     	; 0x2654 <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
    26a6:	88 e0       	ldi	r24, 0x08	; 8
    26a8:	d5 df       	rcall	.-86     	; 0x2654 <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    26aa:	8a e2       	ldi	r24, 0x2A	; 42
    26ac:	d3 df       	rcall	.-90     	; 0x2654 <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    26ae:	89 e7       	ldi	r24, 0x79	; 121
    26b0:	d1 df       	rcall	.-94     	; 0x2654 <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
    26b2:	85 ed       	ldi	r24, 0xD5	; 213
    26b4:	cf df       	rcall	.-98     	; 0x2654 <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
    26b6:	80 e7       	ldi	r24, 0x70	; 112
    26b8:	cd df       	rcall	.-102    	; 0x2654 <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    26ba:	88 e7       	ldi	r24, 0x78	; 120
    26bc:	cb df       	rcall	.-106    	; 0x2654 <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
    26be:	89 e0       	ldi	r24, 0x09	; 9
    26c0:	c9 df       	rcall	.-110    	; 0x2654 <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
    26c2:	86 e0       	ldi	r24, 0x06	; 6
    26c4:	c7 df       	rcall	.-114    	; 0x2654 <command>
	command(0x72);        // Function selection B:
    26c6:	82 e7       	ldi	r24, 0x72	; 114
    26c8:	c5 df       	rcall	.-118    	; 0x2654 <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
    26ca:	8a e0       	ldi	r24, 0x0A	; 10
    26cc:	cb df       	rcall	.-106    	; 0x2664 <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    26ce:	89 e7       	ldi	r24, 0x79	; 121
    26d0:	c1 df       	rcall	.-126    	; 0x2654 <command>
	command(0xDA);        // Set SEG pins hardware configuration:
    26d2:	8a ed       	ldi	r24, 0xDA	; 218
    26d4:	bf df       	rcall	.-130    	; 0x2654 <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
    26d6:	80 e1       	ldi	r24, 0x10	; 16
    26d8:	bd df       	rcall	.-134    	; 0x2654 <command>
	command(0xDC);        // Function selection C:
    26da:	8c ed       	ldi	r24, 0xDC	; 220
    26dc:	bb df       	rcall	.-138    	; 0x2654 <command>
	command(0x00);        //  internal VSL, GPIO input disable
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	b9 df       	rcall	.-142    	; 0x2654 <command>
	command(0x81);        // Set contrast control:
    26e2:	81 e8       	ldi	r24, 0x81	; 129
    26e4:	b7 df       	rcall	.-146    	; 0x2654 <command>
    26e6:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
    26e8:	b5 df       	rcall	.-150    	; 0x2654 <command>
    26ea:	89 ed       	ldi	r24, 0xD9	; 217
    26ec:	b3 df       	rcall	.-154    	; 0x2654 <command>
	command(0xD9);        // Set phase length:
    26ee:	81 ef       	ldi	r24, 0xF1	; 241
    26f0:	b1 df       	rcall	.-158    	; 0x2654 <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
    26f2:	8b ed       	ldi	r24, 0xDB	; 219
    26f4:	af df       	rcall	.-162    	; 0x2654 <command>
    26f6:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
    26f8:	ad df       	rcall	.-166    	; 0x2654 <command>
    26fa:	88 e7       	ldi	r24, 0x78	; 120
    26fc:	ab df       	rcall	.-170    	; 0x2654 <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
    26fe:	88 e2       	ldi	r24, 0x28	; 40
    2700:	a9 df       	rcall	.-174    	; 0x2654 <command>
    2702:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    2704:	a7 df       	rcall	.-178    	; 0x2654 <command>
    2706:	8f e3       	ldi	r24, 0x3F	; 63
    2708:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <initScreen+0x96>
    270e:	00 c0       	rjmp	.+0      	; 0x2710 <initScreen+0x9c>
	command(0x01);        // Clear display
    2710:	00 00       	nop
    2712:	80 e8       	ldi	r24, 0x80	; 128
    2714:	9f df       	rcall	.-194    	; 0x2654 <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2716:	8c e0       	ldi	r24, 0x0C	; 12
    2718:	9d df       	rcall	.-198    	; 0x2654 <command>
    271a:	9f ef       	ldi	r25, 0xFF	; 255
    271c:	24 e3       	ldi	r18, 0x34	; 52
    271e:	8c e0       	ldi	r24, 0x0C	; 12
    2720:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required

	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
    2722:	20 40       	sbci	r18, 0x00	; 0
    2724:	80 40       	sbci	r24, 0x00	; 0
    2726:	e1 f7       	brne	.-8      	; 0x2720 <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
    2728:	00 c0       	rjmp	.+0      	; 0x272a <initScreen+0xb6>
    272a:	00 00       	nop
    272c:	08 95       	ret

0000272e <outputS>:
    272e:	0f 93       	push	r16
    2730:	1f 93       	push	r17
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	8c 01       	movw	r16, r24
    2738:	fb 01       	movw	r30, r22
    273a:	ff 27       	eor	r31, r31
    273c:	e8 5f       	subi	r30, 0xF8	; 248
    273e:	fd 4f       	sbci	r31, 0xFD	; 253
    2740:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
    2742:	88 df       	rcall	.-240    	; 0x2654 <command>
    2744:	e8 01       	movw	r28, r16
    2746:	0c 5e       	subi	r16, 0xEC	; 236
    2748:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
    274a:	89 91       	ld	r24, Y+
    274c:	8b df       	rcall	.-234    	; 0x2664 <data>
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
    274e:	c0 17       	cp	r28, r16
    2750:	d1 07       	cpc	r29, r17
    2752:	d9 f7       	brne	.-10     	; 0x274a <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
    2754:	df 91       	pop	r29
    2756:	cf 91       	pop	r28
    2758:	1f 91       	pop	r17
    275a:	0f 91       	pop	r16
    275c:	08 95       	ret

0000275e <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch(numCharacters)
    2764:	43 30       	cpi	r20, 0x03	; 3
    2766:	09 f4       	brne	.+2      	; 0x276a <numPrinter+0xc>
    2768:	54 c0       	rjmp	.+168    	; 0x2812 <numPrinter+0xb4>
    276a:	28 f4       	brcc	.+10     	; 0x2776 <numPrinter+0x18>
    276c:	41 30       	cpi	r20, 0x01	; 1
    276e:	51 f0       	breq	.+20     	; 0x2784 <numPrinter+0x26>
    2770:	42 30       	cpi	r20, 0x02	; 2
    2772:	29 f1       	breq	.+74     	; 0x27be <numPrinter+0x60>
    2774:	b7 c1       	rjmp	.+878    	; 0x2ae4 <numPrinter+0x386>
    2776:	44 30       	cpi	r20, 0x04	; 4
    2778:	09 f4       	brne	.+2      	; 0x277c <numPrinter+0x1e>
    277a:	95 c0       	rjmp	.+298    	; 0x28a6 <numPrinter+0x148>
    277c:	45 30       	cpi	r20, 0x05	; 5
    277e:	09 f4       	brne	.+2      	; 0x2782 <numPrinter+0x24>
    2780:	0a c1       	rjmp	.+532    	; 0x2996 <numPrinter+0x238>
    2782:	b0 c1       	rjmp	.+864    	; 0x2ae4 <numPrinter+0x386>
		case 0:
		break;

		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
    2784:	ec 01       	movw	r28, r24
    2786:	c6 0f       	add	r28, r22
    2788:	d1 1d       	adc	r29, r1
    278a:	ad ec       	ldi	r26, 0xCD	; 205
    278c:	bc ec       	ldi	r27, 0xCC	; 204
    278e:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    2792:	96 95       	lsr	r25
    2794:	87 95       	ror	r24
    2796:	96 95       	lsr	r25
    2798:	87 95       	ror	r24
    279a:	96 95       	lsr	r25
    279c:	87 95       	ror	r24
    279e:	9c 01       	movw	r18, r24
    27a0:	22 0f       	add	r18, r18
    27a2:	33 1f       	adc	r19, r19
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	88 0f       	add	r24, r24
    27aa:	99 1f       	adc	r25, r25
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	82 0f       	add	r24, r18
    27b2:	93 1f       	adc	r25, r19
    27b4:	e8 1b       	sub	r30, r24
    27b6:	f9 0b       	sbc	r31, r25
    27b8:	e0 5d       	subi	r30, 0xD0	; 208
    27ba:	e8 83       	st	Y, r30
		break;
    27bc:	93 c1       	rjmp	.+806    	; 0x2ae4 <numPrinter+0x386>

		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
    27be:	ec 01       	movw	r28, r24
    27c0:	c6 0f       	add	r28, r22
    27c2:	d1 1d       	adc	r29, r1
    27c4:	ad ec       	ldi	r26, 0xCD	; 205
    27c6:	bc ec       	ldi	r27, 0xCC	; 204
    27c8:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    27cc:	96 95       	lsr	r25
    27ce:	87 95       	ror	r24
    27d0:	96 95       	lsr	r25
    27d2:	87 95       	ror	r24
    27d4:	96 95       	lsr	r25
    27d6:	87 95       	ror	r24
    27d8:	9c 01       	movw	r18, r24
    27da:	22 0f       	add	r18, r18
    27dc:	33 1f       	adc	r19, r19
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	82 0f       	add	r24, r18
    27ec:	93 1f       	adc	r25, r19
    27ee:	9f 01       	movw	r18, r30
    27f0:	28 1b       	sub	r18, r24
    27f2:	39 0b       	sbc	r19, r25
    27f4:	c9 01       	movw	r24, r18
    27f6:	80 5d       	subi	r24, 0xD0	; 208
    27f8:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
    27fa:	9f 01       	movw	r18, r30
    27fc:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    2800:	96 95       	lsr	r25
    2802:	87 95       	ror	r24
    2804:	96 95       	lsr	r25
    2806:	87 95       	ror	r24
    2808:	96 95       	lsr	r25
    280a:	87 95       	ror	r24
    280c:	80 5d       	subi	r24, 0xD0	; 208
    280e:	88 83       	st	Y, r24
		break;
    2810:	69 c1       	rjmp	.+722    	; 0x2ae4 <numPrinter+0x386>

		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
    2812:	ec 01       	movw	r28, r24
    2814:	c6 0f       	add	r28, r22
    2816:	d1 1d       	adc	r29, r1
    2818:	ad ec       	ldi	r26, 0xCD	; 205
    281a:	bc ec       	ldi	r27, 0xCC	; 204
    281c:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    2820:	96 95       	lsr	r25
    2822:	87 95       	ror	r24
    2824:	96 95       	lsr	r25
    2826:	87 95       	ror	r24
    2828:	96 95       	lsr	r25
    282a:	87 95       	ror	r24
    282c:	9c 01       	movw	r18, r24
    282e:	22 0f       	add	r18, r18
    2830:	33 1f       	adc	r19, r19
    2832:	88 0f       	add	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	88 0f       	add	r24, r24
    2838:	99 1f       	adc	r25, r25
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	82 0f       	add	r24, r18
    2840:	93 1f       	adc	r25, r19
    2842:	9f 01       	movw	r18, r30
    2844:	28 1b       	sub	r18, r24
    2846:	39 0b       	sbc	r19, r25
    2848:	c9 01       	movw	r24, r18
    284a:	80 5d       	subi	r24, 0xD0	; 208
    284c:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = tensPlace;
    284e:	af 01       	movw	r20, r30
    2850:	56 95       	lsr	r21
    2852:	47 95       	ror	r20
    2854:	56 95       	lsr	r21
    2856:	47 95       	ror	r20
    2858:	9a 01       	movw	r18, r20
    285a:	ab e7       	ldi	r26, 0x7B	; 123
    285c:	b4 e1       	ldi	r27, 0x14	; 20
    285e:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    2862:	96 95       	lsr	r25
    2864:	87 95       	ror	r24
    2866:	64 e6       	ldi	r22, 0x64	; 100
    2868:	68 9f       	mul	r22, r24
    286a:	90 01       	movw	r18, r0
    286c:	69 9f       	mul	r22, r25
    286e:	30 0d       	add	r19, r0
    2870:	11 24       	eor	r1, r1
    2872:	cf 01       	movw	r24, r30
    2874:	82 1b       	sub	r24, r18
    2876:	93 0b       	sbc	r25, r19
    2878:	9c 01       	movw	r18, r24
    287a:	ad ec       	ldi	r26, 0xCD	; 205
    287c:	bc ec       	ldi	r27, 0xCC	; 204
    287e:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    2882:	96 95       	lsr	r25
    2884:	87 95       	ror	r24
    2886:	96 95       	lsr	r25
    2888:	87 95       	ror	r24
    288a:	96 95       	lsr	r25
    288c:	87 95       	ror	r24
    288e:	80 5d       	subi	r24, 0xD0	; 208
    2890:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
    2892:	9a 01       	movw	r18, r20
    2894:	ab e7       	ldi	r26, 0x7B	; 123
    2896:	b4 e1       	ldi	r27, 0x14	; 20
    2898:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    289c:	96 95       	lsr	r25
    289e:	87 95       	ror	r24
    28a0:	80 5d       	subi	r24, 0xD0	; 208
    28a2:	88 83       	st	Y, r24
		break;
    28a4:	1f c1       	rjmp	.+574    	; 0x2ae4 <numPrinter+0x386>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
    28a6:	ec 01       	movw	r28, r24
    28a8:	c6 0f       	add	r28, r22
    28aa:	d1 1d       	adc	r29, r1
    28ac:	ad ec       	ldi	r26, 0xCD	; 205
    28ae:	bc ec       	ldi	r27, 0xCC	; 204
    28b0:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    28b4:	96 95       	lsr	r25
    28b6:	87 95       	ror	r24
    28b8:	96 95       	lsr	r25
    28ba:	87 95       	ror	r24
    28bc:	96 95       	lsr	r25
    28be:	87 95       	ror	r24
    28c0:	9c 01       	movw	r18, r24
    28c2:	22 0f       	add	r18, r18
    28c4:	33 1f       	adc	r19, r19
    28c6:	88 0f       	add	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	88 0f       	add	r24, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	88 0f       	add	r24, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	82 0f       	add	r24, r18
    28d4:	93 1f       	adc	r25, r19
    28d6:	9f 01       	movw	r18, r30
    28d8:	28 1b       	sub	r18, r24
    28da:	39 0b       	sbc	r19, r25
    28dc:	c9 01       	movw	r24, r18
    28de:	80 5d       	subi	r24, 0xD0	; 208
    28e0:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
    28e2:	9f 01       	movw	r18, r30
    28e4:	36 95       	lsr	r19
    28e6:	27 95       	ror	r18
    28e8:	36 95       	lsr	r19
    28ea:	27 95       	ror	r18
    28ec:	ab e7       	ldi	r26, 0x7B	; 123
    28ee:	b4 e1       	ldi	r27, 0x14	; 20
    28f0:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    28f4:	96 95       	lsr	r25
    28f6:	87 95       	ror	r24
    28f8:	44 e6       	ldi	r20, 0x64	; 100
    28fa:	48 9f       	mul	r20, r24
    28fc:	90 01       	movw	r18, r0
    28fe:	49 9f       	mul	r20, r25
    2900:	30 0d       	add	r19, r0
    2902:	11 24       	eor	r1, r1
    2904:	cf 01       	movw	r24, r30
    2906:	82 1b       	sub	r24, r18
    2908:	93 0b       	sbc	r25, r19
    290a:	9c 01       	movw	r18, r24
    290c:	ad ec       	ldi	r26, 0xCD	; 205
    290e:	bc ec       	ldi	r27, 0xCC	; 204
    2910:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    2914:	96 95       	lsr	r25
    2916:	87 95       	ror	r24
    2918:	96 95       	lsr	r25
    291a:	87 95       	ror	r24
    291c:	96 95       	lsr	r25
    291e:	87 95       	ror	r24
    2920:	80 5d       	subi	r24, 0xD0	; 208
    2922:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = hunderedsPlace;
    2924:	af 01       	movw	r20, r30
    2926:	56 95       	lsr	r21
    2928:	47 95       	ror	r20
    292a:	56 95       	lsr	r21
    292c:	47 95       	ror	r20
    292e:	56 95       	lsr	r21
    2930:	47 95       	ror	r20
    2932:	9a 01       	movw	r18, r20
    2934:	a5 ec       	ldi	r26, 0xC5	; 197
    2936:	b0 e2       	ldi	r27, 0x20	; 32
    2938:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    293c:	92 95       	swap	r25
    293e:	82 95       	swap	r24
    2940:	8f 70       	andi	r24, 0x0F	; 15
    2942:	89 27       	eor	r24, r25
    2944:	9f 70       	andi	r25, 0x0F	; 15
    2946:	89 27       	eor	r24, r25
    2948:	68 ee       	ldi	r22, 0xE8	; 232
    294a:	73 e0       	ldi	r23, 0x03	; 3
    294c:	86 9f       	mul	r24, r22
    294e:	90 01       	movw	r18, r0
    2950:	87 9f       	mul	r24, r23
    2952:	30 0d       	add	r19, r0
    2954:	96 9f       	mul	r25, r22
    2956:	30 0d       	add	r19, r0
    2958:	11 24       	eor	r1, r1
    295a:	cf 01       	movw	r24, r30
    295c:	82 1b       	sub	r24, r18
    295e:	93 0b       	sbc	r25, r19
    2960:	9c 01       	movw	r18, r24
    2962:	36 95       	lsr	r19
    2964:	27 95       	ror	r18
    2966:	36 95       	lsr	r19
    2968:	27 95       	ror	r18
    296a:	ab e7       	ldi	r26, 0x7B	; 123
    296c:	b4 e1       	ldi	r27, 0x14	; 20
    296e:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    2972:	96 95       	lsr	r25
    2974:	87 95       	ror	r24
    2976:	80 5d       	subi	r24, 0xD0	; 208
    2978:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
    297a:	9a 01       	movw	r18, r20
    297c:	a5 ec       	ldi	r26, 0xC5	; 197
    297e:	b0 e2       	ldi	r27, 0x20	; 32
    2980:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    2984:	92 95       	swap	r25
    2986:	82 95       	swap	r24
    2988:	8f 70       	andi	r24, 0x0F	; 15
    298a:	89 27       	eor	r24, r25
    298c:	9f 70       	andi	r25, 0x0F	; 15
    298e:	89 27       	eor	r24, r25
    2990:	80 5d       	subi	r24, 0xD0	; 208
    2992:	88 83       	st	Y, r24
		break;
    2994:	a7 c0       	rjmp	.+334    	; 0x2ae4 <numPrinter+0x386>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
    2996:	ec 01       	movw	r28, r24
    2998:	c6 0f       	add	r28, r22
    299a:	d1 1d       	adc	r29, r1
    299c:	ad ec       	ldi	r26, 0xCD	; 205
    299e:	bc ec       	ldi	r27, 0xCC	; 204
    29a0:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    29a4:	96 95       	lsr	r25
    29a6:	87 95       	ror	r24
    29a8:	96 95       	lsr	r25
    29aa:	87 95       	ror	r24
    29ac:	96 95       	lsr	r25
    29ae:	87 95       	ror	r24
    29b0:	9c 01       	movw	r18, r24
    29b2:	22 0f       	add	r18, r18
    29b4:	33 1f       	adc	r19, r19
    29b6:	88 0f       	add	r24, r24
    29b8:	99 1f       	adc	r25, r25
    29ba:	88 0f       	add	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	88 0f       	add	r24, r24
    29c0:	99 1f       	adc	r25, r25
    29c2:	82 0f       	add	r24, r18
    29c4:	93 1f       	adc	r25, r19
    29c6:	9f 01       	movw	r18, r30
    29c8:	28 1b       	sub	r18, r24
    29ca:	39 0b       	sbc	r19, r25
    29cc:	c9 01       	movw	r24, r18
    29ce:	80 5d       	subi	r24, 0xD0	; 208
    29d0:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
    29d2:	9f 01       	movw	r18, r30
    29d4:	36 95       	lsr	r19
    29d6:	27 95       	ror	r18
    29d8:	36 95       	lsr	r19
    29da:	27 95       	ror	r18
    29dc:	ab e7       	ldi	r26, 0x7B	; 123
    29de:	b4 e1       	ldi	r27, 0x14	; 20
    29e0:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    29e4:	96 95       	lsr	r25
    29e6:	87 95       	ror	r24
    29e8:	44 e6       	ldi	r20, 0x64	; 100
    29ea:	48 9f       	mul	r20, r24
    29ec:	90 01       	movw	r18, r0
    29ee:	49 9f       	mul	r20, r25
    29f0:	30 0d       	add	r19, r0
    29f2:	11 24       	eor	r1, r1
    29f4:	cf 01       	movw	r24, r30
    29f6:	82 1b       	sub	r24, r18
    29f8:	93 0b       	sbc	r25, r19
    29fa:	9c 01       	movw	r18, r24
    29fc:	ad ec       	ldi	r26, 0xCD	; 205
    29fe:	bc ec       	ldi	r27, 0xCC	; 204
    2a00:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    2a04:	96 95       	lsr	r25
    2a06:	87 95       	ror	r24
    2a08:	96 95       	lsr	r25
    2a0a:	87 95       	ror	r24
    2a0c:	96 95       	lsr	r25
    2a0e:	87 95       	ror	r24
    2a10:	80 5d       	subi	r24, 0xD0	; 208
    2a12:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
    2a14:	9f 01       	movw	r18, r30
    2a16:	36 95       	lsr	r19
    2a18:	27 95       	ror	r18
    2a1a:	36 95       	lsr	r19
    2a1c:	27 95       	ror	r18
    2a1e:	36 95       	lsr	r19
    2a20:	27 95       	ror	r18
    2a22:	a5 ec       	ldi	r26, 0xC5	; 197
    2a24:	b0 e2       	ldi	r27, 0x20	; 32
    2a26:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    2a2a:	92 95       	swap	r25
    2a2c:	82 95       	swap	r24
    2a2e:	8f 70       	andi	r24, 0x0F	; 15
    2a30:	89 27       	eor	r24, r25
    2a32:	9f 70       	andi	r25, 0x0F	; 15
    2a34:	89 27       	eor	r24, r25
    2a36:	48 ee       	ldi	r20, 0xE8	; 232
    2a38:	53 e0       	ldi	r21, 0x03	; 3
    2a3a:	84 9f       	mul	r24, r20
    2a3c:	90 01       	movw	r18, r0
    2a3e:	85 9f       	mul	r24, r21
    2a40:	30 0d       	add	r19, r0
    2a42:	94 9f       	mul	r25, r20
    2a44:	30 0d       	add	r19, r0
    2a46:	11 24       	eor	r1, r1
    2a48:	cf 01       	movw	r24, r30
    2a4a:	82 1b       	sub	r24, r18
    2a4c:	93 0b       	sbc	r25, r19
    2a4e:	9c 01       	movw	r18, r24
    2a50:	36 95       	lsr	r19
    2a52:	27 95       	ror	r18
    2a54:	36 95       	lsr	r19
    2a56:	27 95       	ror	r18
    2a58:	ab e7       	ldi	r26, 0x7B	; 123
    2a5a:	b4 e1       	ldi	r27, 0x14	; 20
    2a5c:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    2a60:	96 95       	lsr	r25
    2a62:	87 95       	ror	r24
    2a64:	80 5d       	subi	r24, 0xD0	; 208
    2a66:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
    2a68:	af 01       	movw	r20, r30
    2a6a:	52 95       	swap	r21
    2a6c:	42 95       	swap	r20
    2a6e:	4f 70       	andi	r20, 0x0F	; 15
    2a70:	45 27       	eor	r20, r21
    2a72:	5f 70       	andi	r21, 0x0F	; 15
    2a74:	45 27       	eor	r20, r21
    2a76:	9a 01       	movw	r18, r20
    2a78:	a7 e4       	ldi	r26, 0x47	; 71
    2a7a:	b3 e0       	ldi	r27, 0x03	; 3
    2a7c:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    2a80:	96 95       	lsr	r25
    2a82:	87 95       	ror	r24
    2a84:	96 95       	lsr	r25
    2a86:	87 95       	ror	r24
    2a88:	96 95       	lsr	r25
    2a8a:	87 95       	ror	r24
    2a8c:	60 e1       	ldi	r22, 0x10	; 16
    2a8e:	77 e2       	ldi	r23, 0x27	; 39
    2a90:	86 9f       	mul	r24, r22
    2a92:	90 01       	movw	r18, r0
    2a94:	87 9f       	mul	r24, r23
    2a96:	30 0d       	add	r19, r0
    2a98:	96 9f       	mul	r25, r22
    2a9a:	30 0d       	add	r19, r0
    2a9c:	11 24       	eor	r1, r1
    2a9e:	cf 01       	movw	r24, r30
    2aa0:	82 1b       	sub	r24, r18
    2aa2:	93 0b       	sbc	r25, r19
    2aa4:	9c 01       	movw	r18, r24
    2aa6:	36 95       	lsr	r19
    2aa8:	27 95       	ror	r18
    2aaa:	36 95       	lsr	r19
    2aac:	27 95       	ror	r18
    2aae:	36 95       	lsr	r19
    2ab0:	27 95       	ror	r18
    2ab2:	a5 ec       	ldi	r26, 0xC5	; 197
    2ab4:	b0 e2       	ldi	r27, 0x20	; 32
    2ab6:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    2aba:	92 95       	swap	r25
    2abc:	82 95       	swap	r24
    2abe:	8f 70       	andi	r24, 0x0F	; 15
    2ac0:	89 27       	eor	r24, r25
    2ac2:	9f 70       	andi	r25, 0x0F	; 15
    2ac4:	89 27       	eor	r24, r25
    2ac6:	80 5d       	subi	r24, 0xD0	; 208
    2ac8:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
    2aca:	9a 01       	movw	r18, r20
    2acc:	a7 e4       	ldi	r26, 0x47	; 71
    2ace:	b3 e0       	ldi	r27, 0x03	; 3
    2ad0:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__umulhisi3>
    2ad4:	96 95       	lsr	r25
    2ad6:	87 95       	ror	r24
    2ad8:	96 95       	lsr	r25
    2ada:	87 95       	ror	r24
    2adc:	96 95       	lsr	r25
    2ade:	87 95       	ror	r24
    2ae0:	80 5d       	subi	r24, 0xD0	; 208
    2ae2:	88 83       	st	Y, r24
		break;

	}


}
    2ae4:	df 91       	pop	r29
    2ae6:	cf 91       	pop	r28
    2ae8:	08 95       	ret

00002aea <midiNotePrinter>:

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
    2aea:	9c 01       	movw	r18, r24
    2aec:	a6 2f       	mov	r26, r22
	char printSharp = 0;
	uint8_t valueSwitch = 0;
	//numbers will always go from B to C, and have 12 distinct values. 
	//we can get our number from this with division. 
	//midi note C0 starts at 12. So, we'll need to do some math there. 
	printNumber = (noteNumber/12)+47; 
    2aee:	eb ea       	ldi	r30, 0xAB	; 171
    2af0:	4e 9f       	mul	r20, r30
    2af2:	e1 2d       	mov	r30, r1
    2af4:	11 24       	eor	r1, r1
    2af6:	e6 95       	lsr	r30
    2af8:	e6 95       	lsr	r30
    2afa:	e6 95       	lsr	r30
    2afc:	9f e2       	ldi	r25, 0x2F	; 47
    2afe:	9e 0f       	add	r25, r30
	
	//theres a weird wrap around with note numbers here. Since there isn't really an easy math patern we can take advantage of. 
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
    2b00:	8e 2f       	mov	r24, r30
    2b02:	88 0f       	add	r24, r24
    2b04:	e8 0f       	add	r30, r24
    2b06:	ee 0f       	add	r30, r30
    2b08:	ee 0f       	add	r30, r30
    2b0a:	4e 1b       	sub	r20, r30
    2b0c:	50 e0       	ldi	r21, 0x00	; 0
    2b0e:	4c 30       	cpi	r20, 0x0C	; 12
    2b10:	51 05       	cpc	r21, r1
    2b12:	58 f5       	brcc	.+86     	; 0x2b6a <midiNotePrinter+0x80>
    2b14:	fa 01       	movw	r30, r20
    2b16:	88 27       	eor	r24, r24
    2b18:	e8 51       	subi	r30, 0x18	; 24
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b1e:	0c 94 c2 1f 	jmp	0x3f84	; 0x3f84 <__tablejump2__>
	{
		
		case 0:
		printLetter = 'C';
		printSharp = ' ';
    2b22:	80 e2       	ldi	r24, 0x20	; 32
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
	{
		
		case 0:
		printLetter = 'C';
    2b24:	43 e4       	ldi	r20, 0x43	; 67
    2b26:	23 c0       	rjmp	.+70     	; 0x2b6e <midiNotePrinter+0x84>
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
		printSharp = '#';
    2b28:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'C';
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
    2b2a:	43 e4       	ldi	r20, 0x43	; 67
		printSharp = '#';
		break;
    2b2c:	20 c0       	rjmp	.+64     	; 0x2b6e <midiNotePrinter+0x84>
		
		case 2:
		printLetter = 'D';
		printSharp = ' ';
    2b2e:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'C';
		printSharp = '#';
		break;
		
		case 2:
		printLetter = 'D';
    2b30:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = ' ';
		break;
    2b32:	1d c0       	rjmp	.+58     	; 0x2b6e <midiNotePrinter+0x84>
		
		case 3:
		printLetter = 'D';
		printSharp = '#';
    2b34:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'D';
		printSharp = ' ';
		break;
		
		case 3:
		printLetter = 'D';
    2b36:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = '#';
		break;
    2b38:	1a c0       	rjmp	.+52     	; 0x2b6e <midiNotePrinter+0x84>
		
		case 4:
		printLetter = 'E';
		printSharp = ' ';
    2b3a:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'D';
		printSharp = '#';
		break;
		
		case 4:
		printLetter = 'E';
    2b3c:	45 e4       	ldi	r20, 0x45	; 69
		printSharp = ' ';
		break;
    2b3e:	17 c0       	rjmp	.+46     	; 0x2b6e <midiNotePrinter+0x84>
		
		case 5:
		printLetter = 'F';
		printSharp = ' ';
    2b40:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'E';
		printSharp = ' ';
		break;
		
		case 5:
		printLetter = 'F';
    2b42:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = ' ';
		break;
    2b44:	14 c0       	rjmp	.+40     	; 0x2b6e <midiNotePrinter+0x84>
		
		case 6:
		printLetter = 'F';
		printSharp = '#';
    2b46:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'F';
		printSharp = ' ';
		break;
		
		case 6:
		printLetter = 'F';
    2b48:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = '#';
		break;
    2b4a:	11 c0       	rjmp	.+34     	; 0x2b6e <midiNotePrinter+0x84>
		
		case 7:
		printLetter = 'G';
		printSharp = ' ';
    2b4c:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'F';
		printSharp = '#';
		break;
		
		case 7:
		printLetter = 'G';
    2b4e:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = ' ';
		break;
    2b50:	0e c0       	rjmp	.+28     	; 0x2b6e <midiNotePrinter+0x84>
		
		case 8:
		printLetter = 'G';
		printSharp = '#';
    2b52:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'G';
		printSharp = ' ';
		break;
		
		case 8:
		printLetter = 'G';
    2b54:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = '#';
		break;
    2b56:	0b c0       	rjmp	.+22     	; 0x2b6e <midiNotePrinter+0x84>
		
		case 9:
		printLetter = 'A';
		printSharp = ' ';
    2b58:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'G';
		printSharp = '#';
		break;
		
		case 9:
		printLetter = 'A';
    2b5a:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = ' ';
		break;
    2b5c:	08 c0       	rjmp	.+16     	; 0x2b6e <midiNotePrinter+0x84>
		
		case 10:
		printLetter = 'A';
		printSharp = '#';
    2b5e:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'A';
		printSharp = ' ';
		break;
		
		case 10:
		printLetter = 'A';
    2b60:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = '#';
		break;
    2b62:	05 c0       	rjmp	.+10     	; 0x2b6e <midiNotePrinter+0x84>
		
		case 11:
		printLetter = 'B';
		printSharp = ' ';
    2b64:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'A';
		printSharp = '#';
		break;
		
		case 11:
		printLetter = 'B';
    2b66:	42 e4       	ldi	r20, 0x42	; 66
		printSharp = ' ';
		break;
    2b68:	02 c0       	rjmp	.+4      	; 0x2b6e <midiNotePrinter+0x84>
void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
	char printNumber = 0;
	char printSharp = 0;
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
}

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
    2b6c:	40 e0       	ldi	r20, 0x00	; 0
		printLetter = 'B';
		printSharp = ' ';
		break;
		
	}
	charArray[startingPosition] = printLetter;
    2b6e:	f9 01       	movw	r30, r18
    2b70:	ea 0f       	add	r30, r26
    2b72:	f1 1d       	adc	r31, r1
    2b74:	40 83       	st	Z, r20
	charArray[startingPosition+1]= printSharp;
    2b76:	81 83       	std	Z+1, r24	; 0x01
	charArray[startingPosition+2]= printNumber;
    2b78:	92 83       	std	Z+2, r25	; 0x02
    2b7a:	08 95       	ret

00002b7c <updateSequencer>:
//	clockCounter++;
	//we don't want to do anything else here.
//}

void updateSequencer(Pattern sequencerPattern, Globals *currentGlobals)
{
    2b7c:	af 92       	push	r10
    2b7e:	bf 92       	push	r11
    2b80:	cf 92       	push	r12
    2b82:	df 92       	push	r13
    2b84:	ef 92       	push	r14
    2b86:	ff 92       	push	r15
    2b88:	0f 93       	push	r16
    2b8a:	1f 93       	push	r17
    2b8c:	cf 93       	push	r28
    2b8e:	df 93       	push	r29
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
    2b94:	c7 57       	subi	r28, 0x77	; 119
    2b96:	de 4f       	sbci	r29, 0xFE	; 254
    2b98:	c8 80       	ld	r12, Y
    2b9a:	d9 80       	ldd	r13, Y+1	; 0x01
    2b9c:	c9 58       	subi	r28, 0x89	; 137
    2b9e:	d1 40       	sbci	r29, 0x01	; 1
	uint16_t BPMvar = 150000/(sequencerPattern.patternBPM);

	if(currentGlobals->clockCounter>=BPMvar && currentGlobals->playState) //if playstate is on, play next note in sequence.
    2ba0:	ca 52       	subi	r28, 0x2A	; 42
    2ba2:	df 4f       	sbci	r29, 0xFF	; 255
    2ba4:	28 81       	ld	r18, Y
    2ba6:	39 81       	ldd	r19, Y+1	; 0x01
    2ba8:	c6 5d       	subi	r28, 0xD6	; 214
    2baa:	d0 40       	sbci	r29, 0x00	; 0
    2bac:	40 e0       	ldi	r20, 0x00	; 0
    2bae:	50 e0       	ldi	r21, 0x00	; 0
    2bb0:	60 ef       	ldi	r22, 0xF0	; 240
    2bb2:	79 e4       	ldi	r23, 0x49	; 73
    2bb4:	82 e0       	ldi	r24, 0x02	; 2
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <__divmodsi4>
    2bbc:	f6 01       	movw	r30, r12
    2bbe:	e5 51       	subi	r30, 0x15	; 21
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	80 81       	ld	r24, Z
    2bc4:	91 81       	ldd	r25, Z+1	; 0x01
    2bc6:	82 17       	cp	r24, r18
    2bc8:	93 07       	cpc	r25, r19
    2bca:	08 f4       	brcc	.+2      	; 0x2bce <updateSequencer+0x52>
    2bcc:	5a c0       	rjmp	.+180    	; 0x2c82 <updateSequencer+0x106>
    2bce:	f6 01       	movw	r30, r12
    2bd0:	83 85       	ldd	r24, Z+11	; 0x0b
    2bd2:	88 23       	and	r24, r24
    2bd4:	09 f4       	brne	.+2      	; 0x2bd8 <updateSequencer+0x5c>
    2bd6:	4b c0       	rjmp	.+150    	; 0x2c6e <updateSequencer+0xf2>
	{
		//this will be where we play samples
		currentGlobals->clockCounter = 0;
    2bd8:	e5 51       	subi	r30, 0x15	; 21
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	11 82       	std	Z+1, r1	; 0x01
    2bde:	10 82       	st	Z, r1
		currentGlobals->currentTrigSequencer = 0; //we want to re-set this every time. 
    2be0:	f6 01       	movw	r30, r12
    2be2:	14 82       	std	Z+4, r1	; 0x04
    2be4:	13 82       	std	Z+3, r1	; 0x03
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
    2be6:	e0 91 f4 03 	lds	r30, 0x03F4	; 0x8003f4 <currentPlayStep>
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	ee 0f       	add	r30, r30
    2bee:	ff 1f       	adc	r31, r31
    2bf0:	8e e0       	ldi	r24, 0x0E	; 14
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	8c 0f       	add	r24, r28
    2bf6:	9d 1f       	adc	r25, r29
    2bf8:	e8 0f       	add	r30, r24
    2bfa:	f9 1f       	adc	r31, r25
    2bfc:	e5 50       	subi	r30, 0x05	; 5
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	e0 80       	ld	r14, Z
    2c02:	f1 80       	ldd	r15, Z+1	; 0x01
    2c04:	00 e0       	ldi	r16, 0x00	; 0
    2c06:	10 e0       	ldi	r17, 0x00	; 0
		{//we're going to loop through all of the possible tracks, and trigger them
			if((parseStep&1)==1)
			{
				//trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
				playTrack(&sequencerPattern, currentGlobals, sc);
				currentGlobals->currentTrigSequencer |= (1<<sc); //start to fill our lighting buffer. 
    2c08:	aa 24       	eor	r10, r10
    2c0a:	a3 94       	inc	r10
    2c0c:	b1 2c       	mov	r11, r1
		currentGlobals->clockCounter = 0;
		currentGlobals->currentTrigSequencer = 0; //we want to re-set this every time. 
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
		{//we're going to loop through all of the possible tracks, and trigger them
			if((parseStep&1)==1)
    2c0e:	e0 fe       	sbrs	r14, 0
    2c10:	13 c0       	rjmp	.+38     	; 0x2c38 <updateSequencer+0xbc>
			{
				//trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
				playTrack(&sequencerPattern, currentGlobals, sc);
    2c12:	40 2f       	mov	r20, r16
    2c14:	b6 01       	movw	r22, r12
    2c16:	ce 01       	movw	r24, r28
    2c18:	0e 96       	adiw	r24, 0x0e	; 14
    2c1a:	7d d1       	rcall	.+762    	; 0x2f16 <playTrack>
				currentGlobals->currentTrigSequencer |= (1<<sc); //start to fill our lighting buffer. 
    2c1c:	f6 01       	movw	r30, r12
    2c1e:	23 81       	ldd	r18, Z+3	; 0x03
    2c20:	34 81       	ldd	r19, Z+4	; 0x04
    2c22:	c5 01       	movw	r24, r10
    2c24:	00 2e       	mov	r0, r16
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <updateSequencer+0xb0>
    2c28:	88 0f       	add	r24, r24
    2c2a:	99 1f       	adc	r25, r25
    2c2c:	0a 94       	dec	r0
    2c2e:	e2 f7       	brpl	.-8      	; 0x2c28 <updateSequencer+0xac>
    2c30:	82 2b       	or	r24, r18
    2c32:	93 2b       	or	r25, r19
    2c34:	94 83       	std	Z+4, r25	; 0x04
    2c36:	83 83       	std	Z+3, r24	; 0x03
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
    2c38:	f6 94       	lsr	r15
    2c3a:	e7 94       	ror	r14
    2c3c:	0f 5f       	subi	r16, 0xFF	; 255
    2c3e:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		//this will be where we play samples
		currentGlobals->clockCounter = 0;
		currentGlobals->currentTrigSequencer = 0; //we want to re-set this every time. 
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
    2c40:	00 31       	cpi	r16, 0x10	; 16
    2c42:	11 05       	cpc	r17, r1
    2c44:	21 f7       	brne	.-56     	; 0x2c0e <updateSequencer+0x92>
				playTrack(&sequencerPattern, currentGlobals, sc);
				currentGlobals->currentTrigSequencer |= (1<<sc); //start to fill our lighting buffer. 
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
		}
		currentPlayStep = currentPlayStep+1;
    2c46:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <currentPlayStep>
    2c4a:	8f 5f       	subi	r24, 0xFF	; 255
    2c4c:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <currentPlayStep>
		if(currentPlayStep>(sequencerPattern.numSteps-1))
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	c8 52       	subi	r28, 0x28	; 40
    2c54:	df 4f       	sbci	r29, 0xFF	; 255
    2c56:	28 81       	ld	r18, Y
    2c58:	c8 5d       	subi	r28, 0xD8	; 216
    2c5a:	d0 40       	sbci	r29, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	21 50       	subi	r18, 0x01	; 1
    2c60:	31 09       	sbc	r19, r1
    2c62:	28 17       	cp	r18, r24
    2c64:	39 07       	cpc	r19, r25
    2c66:	6c f4       	brge	.+26     	; 0x2c82 <updateSequencer+0x106>
		{
			currentPlayStep=0; // don't play more steps than are in the sequence.
    2c68:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <currentPlayStep>
    2c6c:	0a c0       	rjmp	.+20     	; 0x2c82 <updateSequencer+0x106>
		}
		
	}else if(currentGlobals->clockCounter>=BPMvar && !currentGlobals->playState)
	{ 
		currentPlayStep=0;
    2c6e:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <currentPlayStep>
		currentGlobals->clockCounter = 0;
    2c72:	f6 01       	movw	r30, r12
    2c74:	e5 51       	subi	r30, 0x15	; 21
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	11 82       	std	Z+1, r1	; 0x01
    2c7a:	10 82       	st	Z, r1
		currentGlobals->currentTrigSequencer=0;
    2c7c:	f6 01       	movw	r30, r12
    2c7e:	14 82       	std	Z+4, r1	; 0x04
    2c80:	13 82       	std	Z+3, r1	; 0x03
	}
	
}
    2c82:	df 91       	pop	r29
    2c84:	cf 91       	pop	r28
    2c86:	1f 91       	pop	r17
    2c88:	0f 91       	pop	r16
    2c8a:	ff 90       	pop	r15
    2c8c:	ef 90       	pop	r14
    2c8e:	df 90       	pop	r13
    2c90:	cf 90       	pop	r12
    2c92:	bf 90       	pop	r11
    2c94:	af 90       	pop	r10
    2c96:	08 95       	ret

00002c98 <__vector_27>:
char serial0Buffer[TX_BUFFER_SIZE];
int serialReadPos = 0;
int serialWritePos = 0;

ISR (USART0_TX_vect)
{
    2c98:	1f 92       	push	r1
    2c9a:	0f 92       	push	r0
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	0f 92       	push	r0
    2ca0:	11 24       	eor	r1, r1
    2ca2:	0b b6       	in	r0, 0x3b	; 59
    2ca4:	0f 92       	push	r0
    2ca6:	2f 93       	push	r18
    2ca8:	3f 93       	push	r19
    2caa:	8f 93       	push	r24
    2cac:	9f 93       	push	r25
    2cae:	ef 93       	push	r30
    2cb0:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
    2cb2:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <serialReadPos>
    2cb6:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <serialReadPos+0x1>
    2cba:	20 91 f5 03 	lds	r18, 0x03F5	; 0x8003f5 <serialWritePos>
    2cbe:	30 91 f6 03 	lds	r19, 0x03F6	; 0x8003f6 <serialWritePos+0x1>
    2cc2:	82 17       	cp	r24, r18
    2cc4:	93 07       	cpc	r25, r19
    2cc6:	c1 f0       	breq	.+48     	; 0x2cf8 <__vector_27+0x60>
	{
		UDR0 = serial0Buffer[serialReadPos];
    2cc8:	fc 01       	movw	r30, r24
    2cca:	e8 57       	subi	r30, 0x78	; 120
    2ccc:	f9 4f       	sbci	r31, 0xF9	; 249
    2cce:	80 81       	ld	r24, Z
    2cd0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
    2cd4:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <serialReadPos>
    2cd8:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <serialReadPos+0x1>
    2cdc:	01 96       	adiw	r24, 0x01	; 1

		if(serialReadPos >= TX_BUFFER_SIZE)
    2cde:	80 38       	cpi	r24, 0x80	; 128
    2ce0:	21 e0       	ldi	r18, 0x01	; 1
    2ce2:	92 07       	cpc	r25, r18
    2ce4:	2c f4       	brge	.+10     	; 0x2cf0 <__vector_27+0x58>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
    2ce6:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <serialReadPos+0x1>
    2cea:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <serialReadPos>
    2cee:	04 c0       	rjmp	.+8      	; 0x2cf8 <__vector_27+0x60>

		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
    2cf0:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <serialReadPos+0x1>
    2cf4:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <serialReadPos>
		}
	}
}
    2cf8:	ff 91       	pop	r31
    2cfa:	ef 91       	pop	r30
    2cfc:	9f 91       	pop	r25
    2cfe:	8f 91       	pop	r24
    2d00:	3f 91       	pop	r19
    2d02:	2f 91       	pop	r18
    2d04:	0f 90       	pop	r0
    2d06:	0b be       	out	0x3b, r0	; 59
    2d08:	0f 90       	pop	r0
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	0f 90       	pop	r0
    2d0e:	1f 90       	pop	r1
    2d10:	18 95       	reti

00002d12 <appendSerial0>:

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
    2d12:	20 91 f5 03 	lds	r18, 0x03F5	; 0x8003f5 <serialWritePos>
    2d16:	30 91 f6 03 	lds	r19, 0x03F6	; 0x8003f6 <serialWritePos+0x1>
    2d1a:	f9 01       	movw	r30, r18
    2d1c:	e8 57       	subi	r30, 0x78	; 120
    2d1e:	f9 4f       	sbci	r31, 0xF9	; 249
    2d20:	80 83       	st	Z, r24
	serialWritePos++;
    2d22:	2f 5f       	subi	r18, 0xFF	; 255
    2d24:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    2d26:	20 38       	cpi	r18, 0x80	; 128
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	38 07       	cpc	r19, r24
    2d2c:	2c f4       	brge	.+10     	; 0x2d38 <appendSerial0+0x26>
}

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    2d2e:	30 93 f6 03 	sts	0x03F6, r19	; 0x8003f6 <serialWritePos+0x1>
    2d32:	20 93 f5 03 	sts	0x03F5, r18	; 0x8003f5 <serialWritePos>
    2d36:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    2d38:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <serialWritePos+0x1>
    2d3c:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <serialWritePos>
    2d40:	08 95       	ret

00002d42 <serialWrite0>:
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
    2d42:	0f 93       	push	r16
    2d44:	1f 93       	push	r17
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2d4a:	66 23       	and	r22, r22
    2d4c:	69 f0       	breq	.+26     	; 0x2d68 <serialWrite0+0x26>
    2d4e:	ec 01       	movw	r28, r24
    2d50:	61 50       	subi	r22, 0x01	; 1
    2d52:	06 2f       	mov	r16, r22
    2d54:	10 e0       	ldi	r17, 0x00	; 0
    2d56:	0f 5f       	subi	r16, 0xFF	; 255
    2d58:	1f 4f       	sbci	r17, 0xFF	; 255
    2d5a:	08 0f       	add	r16, r24
    2d5c:	19 1f       	adc	r17, r25
	{
		appendSerial0(c[i]);
    2d5e:	89 91       	ld	r24, Y+
    2d60:	d8 df       	rcall	.-80     	; 0x2d12 <appendSerial0>
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2d62:	c0 17       	cp	r28, r16
    2d64:	d1 07       	cpc	r29, r17
    2d66:	d9 f7       	brne	.-10     	; 0x2d5e <serialWrite0+0x1c>
	{
		appendSerial0(c[i]);

	}

	if(UCSR0A & (1 << UDRE0))
    2d68:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2d6c:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    2d6e:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    2d72:	df 91       	pop	r29
    2d74:	cf 91       	pop	r28
    2d76:	1f 91       	pop	r17
    2d78:	0f 91       	pop	r16
    2d7a:	08 95       	ret

00002d7c <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    2d7c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    2d80:	80 e1       	ldi	r24, 0x10	; 16
    2d82:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>


UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    2d86:	88 e4       	ldi	r24, 0x48	; 72
    2d88:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    2d8c:	86 e0       	ldi	r24, 0x06	; 6
    2d8e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    2d92:	08 95       	ret

00002d94 <trackControl>:
		//this should be fine for now though. 
			//set track volume
			setTrackVolume(currentPattern->trackSampleLSB[i], currentPattern->trackSampleMSB[i], currentPattern->trackMainVolumeLSB[i], currentPattern->trackMainVolumeMSB[i]);
	}
	
}
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
    2d9c:	2a 97       	sbiw	r28, 0x0a	; 10
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	90 ef       	ldi	r25, 0xF0	; 240
    2daa:	99 83       	std	Y+1, r25	; 0x01
    2dac:	9a ea       	ldi	r25, 0xAA	; 170
    2dae:	9a 83       	std	Y+2, r25	; 0x02
    2db0:	9a e0       	ldi	r25, 0x0A	; 10
    2db2:	9b 83       	std	Y+3, r25	; 0x03
    2db4:	93 e0       	ldi	r25, 0x03	; 3
    2db6:	9c 83       	std	Y+4, r25	; 0x04
    2db8:	2d 83       	std	Y+5, r18	; 0x05
    2dba:	8e 83       	std	Y+6, r24	; 0x06
    2dbc:	6f 83       	std	Y+7, r22	; 0x07
    2dbe:	48 87       	std	Y+8, r20	; 0x08
    2dc0:	19 86       	std	Y+9, r1	; 0x09
    2dc2:	85 e5       	ldi	r24, 0x55	; 85
    2dc4:	8a 87       	std	Y+10, r24	; 0x0a
    2dc6:	6a e0       	ldi	r22, 0x0A	; 10
    2dc8:	ce 01       	movw	r24, r28
    2dca:	01 96       	adiw	r24, 0x01	; 1
    2dcc:	ba df       	rcall	.-140    	; 0x2d42 <serialWrite0>
    2dce:	2a 96       	adiw	r28, 0x0a	; 10
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	df 91       	pop	r29
    2ddc:	cf 91       	pop	r28
    2dde:	08 95       	ret

00002de0 <setOutputVolume>:
    2de0:	cf 93       	push	r28
    2de2:	df 93       	push	r29
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	28 97       	sbiw	r28, 0x08	; 8
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	90 ef       	ldi	r25, 0xF0	; 240
    2df6:	99 83       	std	Y+1, r25	; 0x01
    2df8:	9a ea       	ldi	r25, 0xAA	; 170
    2dfa:	9a 83       	std	Y+2, r25	; 0x02
    2dfc:	98 e0       	ldi	r25, 0x08	; 8
    2dfe:	9b 83       	std	Y+3, r25	; 0x03
    2e00:	95 e0       	ldi	r25, 0x05	; 5
    2e02:	9c 83       	std	Y+4, r25	; 0x04
    2e04:	4d 83       	std	Y+5, r20	; 0x05
    2e06:	8e 83       	std	Y+6, r24	; 0x06
    2e08:	6f 83       	std	Y+7, r22	; 0x07
    2e0a:	85 e5       	ldi	r24, 0x55	; 85
    2e0c:	88 87       	std	Y+8, r24	; 0x08
    2e0e:	68 e0       	ldi	r22, 0x08	; 8
    2e10:	ce 01       	movw	r24, r28
    2e12:	01 96       	adiw	r24, 0x01	; 1
    2e14:	96 df       	rcall	.-212    	; 0x2d42 <serialWrite0>
    2e16:	28 96       	adiw	r28, 0x08	; 8
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	de bf       	out	0x3e, r29	; 62
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	cd bf       	out	0x3d, r28	; 61
    2e22:	df 91       	pop	r29
    2e24:	cf 91       	pop	r28
    2e26:	08 95       	ret

00002e28 <setTrackVolume>:
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
    2e30:	29 97       	sbiw	r28, 0x09	; 9
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	90 ef       	ldi	r25, 0xF0	; 240
    2e3e:	99 83       	std	Y+1, r25	; 0x01
    2e40:	9a ea       	ldi	r25, 0xAA	; 170
    2e42:	9a 83       	std	Y+2, r25	; 0x02
    2e44:	99 e0       	ldi	r25, 0x09	; 9
    2e46:	9b 83       	std	Y+3, r25	; 0x03
    2e48:	98 e0       	ldi	r25, 0x08	; 8
    2e4a:	9c 83       	std	Y+4, r25	; 0x04
    2e4c:	8d 83       	std	Y+5, r24	; 0x05
    2e4e:	6e 83       	std	Y+6, r22	; 0x06
    2e50:	4f 83       	std	Y+7, r20	; 0x07
    2e52:	28 87       	std	Y+8, r18	; 0x08
    2e54:	85 e5       	ldi	r24, 0x55	; 85
    2e56:	89 87       	std	Y+9, r24	; 0x09
    2e58:	69 e0       	ldi	r22, 0x09	; 9
    2e5a:	ce 01       	movw	r24, r28
    2e5c:	01 96       	adiw	r24, 0x01	; 1
    2e5e:	71 df       	rcall	.-286    	; 0x2d42 <serialWrite0>
    2e60:	29 96       	adiw	r28, 0x09	; 9
    2e62:	0f b6       	in	r0, 0x3f	; 63
    2e64:	f8 94       	cli
    2e66:	de bf       	out	0x3e, r29	; 62
    2e68:	0f be       	out	0x3f, r0	; 63
    2e6a:	cd bf       	out	0x3d, r28	; 61
    2e6c:	df 91       	pop	r29
    2e6e:	cf 91       	pop	r28
    2e70:	08 95       	ret

00002e72 <setTrackFade>:
    2e72:	cf 92       	push	r12
    2e74:	ef 92       	push	r14
    2e76:	0f 93       	push	r16
    2e78:	cf 93       	push	r28
    2e7a:	df 93       	push	r29
    2e7c:	cd b7       	in	r28, 0x3d	; 61
    2e7e:	de b7       	in	r29, 0x3e	; 62
    2e80:	2c 97       	sbiw	r28, 0x0c	; 12
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	de bf       	out	0x3e, r29	; 62
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	cd bf       	out	0x3d, r28	; 61
    2e8c:	90 ef       	ldi	r25, 0xF0	; 240
    2e8e:	99 83       	std	Y+1, r25	; 0x01
    2e90:	9a ea       	ldi	r25, 0xAA	; 170
    2e92:	9a 83       	std	Y+2, r25	; 0x02
    2e94:	9c e0       	ldi	r25, 0x0C	; 12
    2e96:	9b 83       	std	Y+3, r25	; 0x03
    2e98:	9a e0       	ldi	r25, 0x0A	; 10
    2e9a:	9c 83       	std	Y+4, r25	; 0x04
    2e9c:	8d 83       	std	Y+5, r24	; 0x05
    2e9e:	6e 83       	std	Y+6, r22	; 0x06
    2ea0:	4f 83       	std	Y+7, r20	; 0x07
    2ea2:	28 87       	std	Y+8, r18	; 0x08
    2ea4:	09 87       	std	Y+9, r16	; 0x09
    2ea6:	ea 86       	std	Y+10, r14	; 0x0a
    2ea8:	cb 86       	std	Y+11, r12	; 0x0b
    2eaa:	85 e5       	ldi	r24, 0x55	; 85
    2eac:	8c 87       	std	Y+12, r24	; 0x0c
    2eae:	6c e0       	ldi	r22, 0x0C	; 12
    2eb0:	ce 01       	movw	r24, r28
    2eb2:	01 96       	adiw	r24, 0x01	; 1
    2eb4:	46 df       	rcall	.-372    	; 0x2d42 <serialWrite0>
    2eb6:	2c 96       	adiw	r28, 0x0c	; 12
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	0f 91       	pop	r16
    2ec8:	ef 90       	pop	r14
    2eca:	cf 90       	pop	r12
    2ecc:	08 95       	ret

00002ece <outputSampleRate>:
    2ece:	cf 93       	push	r28
    2ed0:	df 93       	push	r29
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
    2ed6:	28 97       	sbiw	r28, 0x08	; 8
    2ed8:	0f b6       	in	r0, 0x3f	; 63
    2eda:	f8 94       	cli
    2edc:	de bf       	out	0x3e, r29	; 62
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	cd bf       	out	0x3d, r28	; 61
    2ee2:	90 ef       	ldi	r25, 0xF0	; 240
    2ee4:	99 83       	std	Y+1, r25	; 0x01
    2ee6:	9a ea       	ldi	r25, 0xAA	; 170
    2ee8:	9a 83       	std	Y+2, r25	; 0x02
    2eea:	98 e0       	ldi	r25, 0x08	; 8
    2eec:	9b 83       	std	Y+3, r25	; 0x03
    2eee:	9c e0       	ldi	r25, 0x0C	; 12
    2ef0:	9c 83       	std	Y+4, r25	; 0x04
    2ef2:	8d 83       	std	Y+5, r24	; 0x05
    2ef4:	6e 83       	std	Y+6, r22	; 0x06
    2ef6:	4f 83       	std	Y+7, r20	; 0x07
    2ef8:	85 e5       	ldi	r24, 0x55	; 85
    2efa:	88 87       	std	Y+8, r24	; 0x08
    2efc:	68 e0       	ldi	r22, 0x08	; 8
    2efe:	ce 01       	movw	r24, r28
    2f00:	01 96       	adiw	r24, 0x01	; 1
    2f02:	1f df       	rcall	.-450    	; 0x2d42 <serialWrite0>
    2f04:	28 96       	adiw	r28, 0x08	; 8
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	f8 94       	cli
    2f0a:	de bf       	out	0x3e, r29	; 62
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	cd bf       	out	0x3d, r28	; 61
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	08 95       	ret

00002f16 <playTrack>:
    2f16:	2f 92       	push	r2
    2f18:	3f 92       	push	r3
    2f1a:	4f 92       	push	r4
    2f1c:	5f 92       	push	r5
    2f1e:	6f 92       	push	r6
    2f20:	7f 92       	push	r7
    2f22:	8f 92       	push	r8
    2f24:	9f 92       	push	r9
    2f26:	af 92       	push	r10
    2f28:	bf 92       	push	r11
    2f2a:	cf 92       	push	r12
    2f2c:	ef 92       	push	r14
    2f2e:	0f 93       	push	r16
    2f30:	1f 93       	push	r17
    2f32:	cf 93       	push	r28
    2f34:	df 93       	push	r29
    2f36:	00 d0       	rcall	.+0      	; 0x2f38 <playTrack+0x22>
    2f38:	1f 92       	push	r1
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
    2f3e:	4b 01       	movw	r8, r22
    2f40:	14 2f       	mov	r17, r20
    2f42:	a4 2e       	mov	r10, r20
    2f44:	b1 2c       	mov	r11, r1
    2f46:	fc 01       	movw	r30, r24
    2f48:	ea 0d       	add	r30, r10
    2f4a:	fb 1d       	adc	r31, r11
    2f4c:	e5 51       	subi	r30, 0x15	; 21
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	20 81       	ld	r18, Z
    2f52:	21 30       	cpi	r18, 0x01	; 1
    2f54:	09 f4       	brne	.+2      	; 0x2f58 <playTrack+0x42>
    2f56:	8c c0       	rjmp	.+280    	; 0x3070 <playTrack+0x15a>
    2f58:	38 f0       	brcs	.+14     	; 0x2f68 <playTrack+0x52>
    2f5a:	22 30       	cpi	r18, 0x02	; 2
    2f5c:	09 f4       	brne	.+2      	; 0x2f60 <playTrack+0x4a>
    2f5e:	df c0       	rjmp	.+446    	; 0x311e <playTrack+0x208>
    2f60:	23 30       	cpi	r18, 0x03	; 3
    2f62:	09 f4       	brne	.+2      	; 0x2f66 <playTrack+0x50>
    2f64:	0c c1       	rjmp	.+536    	; 0x317e <playTrack+0x268>
    2f66:	1f c1       	rjmp	.+574    	; 0x31a6 <playTrack+0x290>
    2f68:	9c 01       	movw	r18, r24
    2f6a:	2a 0d       	add	r18, r10
    2f6c:	3b 1d       	adc	r19, r11
    2f6e:	3c 83       	std	Y+4, r19	; 0x04
    2f70:	2b 83       	std	Y+3, r18	; 0x03
    2f72:	f9 01       	movw	r30, r18
    2f74:	e8 57       	subi	r30, 0x78	; 120
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	29 01       	movw	r4, r18
    2f7a:	38 e9       	ldi	r19, 0x98	; 152
    2f7c:	43 0e       	add	r4, r19
    2f7e:	51 1c       	adc	r5, r1
    2f80:	6b 80       	ldd	r6, Y+3	; 0x03
    2f82:	7c 80       	ldd	r7, Y+4	; 0x04
    2f84:	88 ea       	ldi	r24, 0xA8	; 168
    2f86:	68 0e       	add	r6, r24
    2f88:	71 1c       	adc	r7, r1
    2f8a:	20 81       	ld	r18, Z
    2f8c:	ab 81       	ldd	r26, Y+3	; 0x03
    2f8e:	bc 81       	ldd	r27, Y+4	; 0x04
    2f90:	58 96       	adiw	r26, 0x18	; 24
    2f92:	4c 91       	ld	r20, X
    2f94:	f2 01       	movw	r30, r4
    2f96:	60 81       	ld	r22, Z
    2f98:	d3 01       	movw	r26, r6
    2f9a:	8c 91       	ld	r24, X
    2f9c:	fb de       	rcall	.-522    	; 0x2d94 <trackControl>
    2f9e:	2b 80       	ldd	r2, Y+3	; 0x03
    2fa0:	3c 80       	ldd	r3, Y+4	; 0x04
    2fa2:	b8 e4       	ldi	r27, 0x48	; 72
    2fa4:	2b 0e       	add	r2, r27
    2fa6:	31 1c       	adc	r3, r1
    2fa8:	eb 81       	ldd	r30, Y+3	; 0x03
    2faa:	fc 81       	ldd	r31, Y+4	; 0x04
    2fac:	e8 5a       	subi	r30, 0xA8	; 168
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	fa 83       	std	Y+2, r31	; 0x02
    2fb2:	e9 83       	std	Y+1, r30	; 0x01
    2fb4:	c1 2c       	mov	r12, r1
    2fb6:	d1 01       	movw	r26, r2
    2fb8:	ec 90       	ld	r14, X
    2fba:	00 81       	ld	r16, Z
    2fbc:	eb 81       	ldd	r30, Y+3	; 0x03
    2fbe:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc0:	20 a5       	ldd	r18, Z+40	; 0x28
    2fc2:	40 ad       	ldd	r20, Z+56	; 0x38
    2fc4:	d2 01       	movw	r26, r4
    2fc6:	6c 91       	ld	r22, X
    2fc8:	f3 01       	movw	r30, r6
    2fca:	80 81       	ld	r24, Z
    2fcc:	52 df       	rcall	.-348    	; 0x2e72 <setTrackFade>
    2fce:	f4 01       	movw	r30, r8
    2fd0:	e7 55       	subi	r30, 0x57	; 87
    2fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	02 c0       	rjmp	.+4      	; 0x2fde <playTrack+0xc8>
    2fda:	88 0f       	add	r24, r24
    2fdc:	99 1f       	adc	r25, r25
    2fde:	1a 95       	dec	r17
    2fe0:	e2 f7       	brpl	.-8      	; 0x2fda <playTrack+0xc4>
    2fe2:	20 81       	ld	r18, Z
    2fe4:	31 81       	ldd	r19, Z+1	; 0x01
    2fe6:	82 2b       	or	r24, r18
    2fe8:	93 2b       	or	r25, r19
    2fea:	91 83       	std	Z+1, r25	; 0x01
    2fec:	80 83       	st	Z, r24
    2fee:	f5 01       	movw	r30, r10
    2ff0:	ee 0f       	add	r30, r30
    2ff2:	ff 1f       	adc	r31, r31
    2ff4:	ee 0f       	add	r30, r30
    2ff6:	ff 1f       	adc	r31, r31
    2ff8:	e8 0d       	add	r30, r8
    2ffa:	f9 1d       	adc	r31, r9
    2ffc:	e5 55       	subi	r30, 0x55	; 85
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	ab 81       	ldd	r26, Y+3	; 0x03
    3002:	bc 81       	ldd	r27, Y+4	; 0x04
    3004:	a5 53       	subi	r26, 0x35	; 53
    3006:	bf 4f       	sbci	r27, 0xFF	; 255
    3008:	2c 91       	ld	r18, X
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	32 2f       	mov	r19, r18
    300e:	22 27       	eor	r18, r18
    3010:	8b 81       	ldd	r24, Y+3	; 0x03
    3012:	9c 81       	ldd	r25, Y+4	; 0x04
    3014:	85 52       	subi	r24, 0x25	; 37
    3016:	9f 4f       	sbci	r25, 0xFF	; 255
    3018:	dc 01       	movw	r26, r24
    301a:	8c 91       	ld	r24, X
    301c:	a9 01       	movw	r20, r18
    301e:	48 2b       	or	r20, r24
    3020:	d1 01       	movw	r26, r2
    3022:	8c 91       	ld	r24, X
    3024:	28 2f       	mov	r18, r24
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	32 2f       	mov	r19, r18
    302a:	22 27       	eor	r18, r18
    302c:	a9 81       	ldd	r26, Y+1	; 0x01
    302e:	ba 81       	ldd	r27, Y+2	; 0x02
    3030:	8c 91       	ld	r24, X
    3032:	28 2b       	or	r18, r24
    3034:	24 0f       	add	r18, r20
    3036:	35 1f       	adc	r19, r21
    3038:	c9 01       	movw	r24, r18
    303a:	88 0f       	add	r24, r24
    303c:	99 1f       	adc	r25, r25
    303e:	22 0f       	add	r18, r18
    3040:	33 1f       	adc	r19, r19
    3042:	22 0f       	add	r18, r18
    3044:	33 1f       	adc	r19, r19
    3046:	22 0f       	add	r18, r18
    3048:	33 1f       	adc	r19, r19
    304a:	28 0f       	add	r18, r24
    304c:	39 1f       	adc	r19, r25
    304e:	d4 01       	movw	r26, r8
    3050:	ab 55       	subi	r26, 0x5B	; 91
    3052:	bf 4f       	sbci	r27, 0xFF	; 255
    3054:	8d 91       	ld	r24, X+
    3056:	9d 91       	ld	r25, X+
    3058:	0d 90       	ld	r0, X+
    305a:	bc 91       	ld	r27, X
    305c:	a0 2d       	mov	r26, r0
    305e:	82 0f       	add	r24, r18
    3060:	93 1f       	adc	r25, r19
    3062:	a1 1d       	adc	r26, r1
    3064:	b1 1d       	adc	r27, r1
    3066:	80 83       	st	Z, r24
    3068:	91 83       	std	Z+1, r25	; 0x01
    306a:	a2 83       	std	Z+2, r26	; 0x02
    306c:	b3 83       	std	Z+3, r27	; 0x03
    306e:	9b c0       	rjmp	.+310    	; 0x31a6 <playTrack+0x290>
    3070:	3c 01       	movw	r6, r24
    3072:	6a 0c       	add	r6, r10
    3074:	7b 1c       	adc	r7, r11
    3076:	c3 01       	movw	r24, r6
    3078:	88 57       	subi	r24, 0x78	; 120
    307a:	9f 4f       	sbci	r25, 0xFF	; 255
    307c:	d3 01       	movw	r26, r6
    307e:	a8 56       	subi	r26, 0x68	; 104
    3080:	bf 4f       	sbci	r27, 0xFF	; 255
    3082:	23 01       	movw	r4, r6
    3084:	e8 ea       	ldi	r30, 0xA8	; 168
    3086:	4e 0e       	add	r4, r30
    3088:	51 1c       	adc	r5, r1
    308a:	fc 01       	movw	r30, r24
    308c:	20 81       	ld	r18, Z
    308e:	f3 01       	movw	r30, r6
    3090:	40 8d       	ldd	r20, Z+24	; 0x18
    3092:	6c 91       	ld	r22, X
    3094:	d2 01       	movw	r26, r4
    3096:	8c 91       	ld	r24, X
    3098:	7d de       	rcall	.-774    	; 0x2d94 <trackControl>
    309a:	f4 01       	movw	r30, r8
    309c:	e7 55       	subi	r30, 0x57	; 87
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <playTrack+0x194>
    30a6:	88 0f       	add	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	1a 95       	dec	r17
    30ac:	e2 f7       	brpl	.-8      	; 0x30a6 <playTrack+0x190>
    30ae:	20 81       	ld	r18, Z
    30b0:	31 81       	ldd	r19, Z+1	; 0x01
    30b2:	82 2b       	or	r24, r18
    30b4:	93 2b       	or	r25, r19
    30b6:	91 83       	std	Z+1, r25	; 0x01
    30b8:	80 83       	st	Z, r24
    30ba:	f5 01       	movw	r30, r10
    30bc:	ee 0f       	add	r30, r30
    30be:	ff 1f       	adc	r31, r31
    30c0:	ee 0f       	add	r30, r30
    30c2:	ff 1f       	adc	r31, r31
    30c4:	e8 0d       	add	r30, r8
    30c6:	f9 1d       	adc	r31, r9
    30c8:	e5 55       	subi	r30, 0x55	; 85
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	d3 01       	movw	r26, r6
    30ce:	a5 53       	subi	r26, 0x35	; 53
    30d0:	bf 4f       	sbci	r27, 0xFF	; 255
    30d2:	2c 91       	ld	r18, X
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	32 2f       	mov	r19, r18
    30d8:	22 27       	eor	r18, r18
    30da:	c3 01       	movw	r24, r6
    30dc:	85 52       	subi	r24, 0x25	; 37
    30de:	9f 4f       	sbci	r25, 0xFF	; 255
    30e0:	dc 01       	movw	r26, r24
    30e2:	8c 91       	ld	r24, X
    30e4:	28 2b       	or	r18, r24
    30e6:	c9 01       	movw	r24, r18
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	22 0f       	add	r18, r18
    30ee:	33 1f       	adc	r19, r19
    30f0:	22 0f       	add	r18, r18
    30f2:	33 1f       	adc	r19, r19
    30f4:	22 0f       	add	r18, r18
    30f6:	33 1f       	adc	r19, r19
    30f8:	28 0f       	add	r18, r24
    30fa:	39 1f       	adc	r19, r25
    30fc:	d4 01       	movw	r26, r8
    30fe:	ab 55       	subi	r26, 0x5B	; 91
    3100:	bf 4f       	sbci	r27, 0xFF	; 255
    3102:	8d 91       	ld	r24, X+
    3104:	9d 91       	ld	r25, X+
    3106:	0d 90       	ld	r0, X+
    3108:	bc 91       	ld	r27, X
    310a:	a0 2d       	mov	r26, r0
    310c:	82 0f       	add	r24, r18
    310e:	93 1f       	adc	r25, r19
    3110:	a1 1d       	adc	r26, r1
    3112:	b1 1d       	adc	r27, r1
    3114:	80 83       	st	Z, r24
    3116:	91 83       	std	Z+1, r25	; 0x01
    3118:	a2 83       	std	Z+2, r26	; 0x02
    311a:	b3 83       	std	Z+3, r27	; 0x03
    311c:	44 c0       	rjmp	.+136    	; 0x31a6 <playTrack+0x290>
    311e:	fc 01       	movw	r30, r24
    3120:	ea 0d       	add	r30, r10
    3122:	fb 1d       	adc	r31, r11
    3124:	fa 83       	std	Y+2, r31	; 0x02
    3126:	e9 83       	std	Y+1, r30	; 0x01
    3128:	e8 57       	subi	r30, 0x78	; 120
    312a:	ff 4f       	sbci	r31, 0xFF	; 255
    312c:	89 80       	ldd	r8, Y+1	; 0x01
    312e:	9a 80       	ldd	r9, Y+2	; 0x02
    3130:	28 e9       	ldi	r18, 0x98	; 152
    3132:	82 0e       	add	r8, r18
    3134:	91 1c       	adc	r9, r1
    3136:	a9 80       	ldd	r10, Y+1	; 0x01
    3138:	ba 80       	ldd	r11, Y+2	; 0x02
    313a:	38 ea       	ldi	r19, 0xA8	; 168
    313c:	a3 0e       	add	r10, r19
    313e:	b1 1c       	adc	r11, r1
    3140:	20 81       	ld	r18, Z
    3142:	a9 81       	ldd	r26, Y+1	; 0x01
    3144:	ba 81       	ldd	r27, Y+2	; 0x02
    3146:	58 96       	adiw	r26, 0x18	; 24
    3148:	4c 91       	ld	r20, X
    314a:	f4 01       	movw	r30, r8
    314c:	60 81       	ld	r22, Z
    314e:	d5 01       	movw	r26, r10
    3150:	8c 91       	ld	r24, X
    3152:	20 de       	rcall	.-960    	; 0x2d94 <trackControl>
    3154:	a9 81       	ldd	r26, Y+1	; 0x01
    3156:	ba 81       	ldd	r27, Y+2	; 0x02
    3158:	a8 5b       	subi	r26, 0xB8	; 184
    315a:	bf 4f       	sbci	r27, 0xFF	; 255
    315c:	e9 81       	ldd	r30, Y+1	; 0x01
    315e:	fa 81       	ldd	r31, Y+2	; 0x02
    3160:	e8 5a       	subi	r30, 0xA8	; 168
    3162:	ff 4f       	sbci	r31, 0xFF	; 255
    3164:	c1 2c       	mov	r12, r1
    3166:	ec 90       	ld	r14, X
    3168:	00 81       	ld	r16, Z
    316a:	e9 81       	ldd	r30, Y+1	; 0x01
    316c:	fa 81       	ldd	r31, Y+2	; 0x02
    316e:	20 a5       	ldd	r18, Z+40	; 0x28
    3170:	40 ad       	ldd	r20, Z+56	; 0x38
    3172:	d4 01       	movw	r26, r8
    3174:	6c 91       	ld	r22, X
    3176:	f5 01       	movw	r30, r10
    3178:	80 81       	ld	r24, Z
    317a:	7b de       	rcall	.-778    	; 0x2e72 <setTrackFade>
    317c:	14 c0       	rjmp	.+40     	; 0x31a6 <playTrack+0x290>
    317e:	a8 0e       	add	r10, r24
    3180:	b9 1e       	adc	r11, r25
    3182:	c5 01       	movw	r24, r10
    3184:	88 57       	subi	r24, 0x78	; 120
    3186:	9f 4f       	sbci	r25, 0xFF	; 255
    3188:	d5 01       	movw	r26, r10
    318a:	a8 56       	subi	r26, 0x68	; 104
    318c:	bf 4f       	sbci	r27, 0xFF	; 255
    318e:	45 01       	movw	r8, r10
    3190:	f8 ea       	ldi	r31, 0xA8	; 168
    3192:	8f 0e       	add	r8, r31
    3194:	91 1c       	adc	r9, r1
    3196:	fc 01       	movw	r30, r24
    3198:	20 81       	ld	r18, Z
    319a:	f5 01       	movw	r30, r10
    319c:	40 8d       	ldd	r20, Z+24	; 0x18
    319e:	6c 91       	ld	r22, X
    31a0:	d4 01       	movw	r26, r8
    31a2:	8c 91       	ld	r24, X
    31a4:	f7 dd       	rcall	.-1042   	; 0x2d94 <trackControl>
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	df 91       	pop	r29
    31b0:	cf 91       	pop	r28
    31b2:	1f 91       	pop	r17
    31b4:	0f 91       	pop	r16
    31b6:	ef 90       	pop	r14
    31b8:	cf 90       	pop	r12
    31ba:	bf 90       	pop	r11
    31bc:	af 90       	pop	r10
    31be:	9f 90       	pop	r9
    31c0:	8f 90       	pop	r8
    31c2:	7f 90       	pop	r7
    31c4:	6f 90       	pop	r6
    31c6:	5f 90       	pop	r5
    31c8:	4f 90       	pop	r4
    31ca:	3f 90       	pop	r3
    31cc:	2f 90       	pop	r2
    31ce:	08 95       	ret

000031d0 <releaseUpdate>:

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
    31d0:	2f 92       	push	r2
    31d2:	3f 92       	push	r3
    31d4:	4f 92       	push	r4
    31d6:	5f 92       	push	r5
    31d8:	6f 92       	push	r6
    31da:	7f 92       	push	r7
    31dc:	8f 92       	push	r8
    31de:	9f 92       	push	r9
    31e0:	af 92       	push	r10
    31e2:	bf 92       	push	r11
    31e4:	cf 92       	push	r12
    31e6:	ef 92       	push	r14
    31e8:	0f 93       	push	r16
    31ea:	cf 93       	push	r28
    31ec:	df 93       	push	r29
    31ee:	00 d0       	rcall	.+0      	; 0x31f0 <releaseUpdate+0x20>
    31f0:	1f 92       	push	r1
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
    31f6:	fb 01       	movw	r30, r22
    31f8:	e7 55       	subi	r30, 0x57	; 87
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	a0 80       	ld	r10, Z
    31fe:	b1 80       	ldd	r11, Z+1	; 0x01
    3200:	3b 01       	movw	r6, r22
    3202:	2b ea       	ldi	r18, 0xAB	; 171
    3204:	62 0e       	add	r6, r18
    3206:	71 1c       	adc	r7, r1
    3208:	88 59       	subi	r24, 0x98	; 152
    320a:	9f 4f       	sbci	r25, 0xFF	; 255
    320c:	4c 01       	movw	r8, r24
	
	for(int i = 0; i<16; i++)
    320e:	1c 82       	std	Y+4, r1	; 0x04
    3210:	1b 82       	std	Y+3, r1	; 0x03
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])<=(currentGlobals->releaseCounter))
    3212:	2b 01       	movw	r4, r22
    3214:	85 ea       	ldi	r24, 0xA5	; 165
    3216:	48 0e       	add	r4, r24
    3218:	51 1c       	adc	r5, r1
			{
				//we need to do the release state here.
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],186,255,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
				currentGlobals->releaseTracker = currentGlobals->releaseTracker&(~(1<<i)); //turn off that track, so release stage does not play again. 
    321a:	fa 83       	std	Y+2, r31	; 0x02
    321c:	e9 83       	std	Y+1, r30	; 0x01
    321e:	22 24       	eor	r2, r2
    3220:	23 94       	inc	r2
    3222:	31 2c       	mov	r3, r1
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
    3224:	a0 fe       	sbrs	r10, 0
    3226:	2c c0       	rjmp	.+88     	; 0x3280 <releaseUpdate+0xb0>
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])<=(currentGlobals->releaseCounter))
    3228:	f3 01       	movw	r30, r6
    322a:	40 81       	ld	r20, Z
    322c:	51 81       	ldd	r21, Z+1	; 0x01
    322e:	62 81       	ldd	r22, Z+2	; 0x02
    3230:	73 81       	ldd	r23, Z+3	; 0x03
    3232:	f2 01       	movw	r30, r4
    3234:	80 81       	ld	r24, Z
    3236:	91 81       	ldd	r25, Z+1	; 0x01
    3238:	a2 81       	ldd	r26, Z+2	; 0x02
    323a:	b3 81       	ldd	r27, Z+3	; 0x03
    323c:	84 17       	cp	r24, r20
    323e:	95 07       	cpc	r25, r21
    3240:	a6 07       	cpc	r26, r22
    3242:	b7 07       	cpc	r27, r23
    3244:	e8 f0       	brcs	.+58     	; 0x3280 <releaseUpdate+0xb0>
			{
				//we need to do the release state here.
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],186,255,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
    3246:	cc 24       	eor	r12, r12
    3248:	c3 94       	inc	r12
    324a:	f4 01       	movw	r30, r8
    324c:	e0 80       	ld	r14, Z
    324e:	00 89       	ldd	r16, Z+16	; 0x10
    3250:	2f ef       	ldi	r18, 0xFF	; 255
    3252:	4a eb       	ldi	r20, 0xBA	; 186
    3254:	60 a9       	ldd	r22, Z+48	; 0x30
    3256:	e0 5c       	subi	r30, 0xC0	; 192
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	80 81       	ld	r24, Z
    325c:	0a de       	rcall	.-1004   	; 0x2e72 <setTrackFade>
				currentGlobals->releaseTracker = currentGlobals->releaseTracker&(~(1<<i)); //turn off that track, so release stage does not play again. 
    325e:	c1 01       	movw	r24, r2
    3260:	0b 80       	ldd	r0, Y+3	; 0x03
    3262:	02 c0       	rjmp	.+4      	; 0x3268 <releaseUpdate+0x98>
    3264:	88 0f       	add	r24, r24
    3266:	99 1f       	adc	r25, r25
    3268:	0a 94       	dec	r0
    326a:	e2 f7       	brpl	.-8      	; 0x3264 <releaseUpdate+0x94>
    326c:	80 95       	com	r24
    326e:	90 95       	com	r25
    3270:	e9 81       	ldd	r30, Y+1	; 0x01
    3272:	fa 81       	ldd	r31, Y+2	; 0x02
    3274:	20 81       	ld	r18, Z
    3276:	31 81       	ldd	r19, Z+1	; 0x01
    3278:	82 23       	and	r24, r18
    327a:	93 23       	and	r25, r19
    327c:	91 83       	std	Z+1, r25	; 0x01
    327e:	80 83       	st	Z, r24
			}
		}
		releaseTrackerParse = releaseTrackerParse>>1;
    3280:	b6 94       	lsr	r11
    3282:	a7 94       	ror	r10

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
    3284:	8b 81       	ldd	r24, Y+3	; 0x03
    3286:	9c 81       	ldd	r25, Y+4	; 0x04
    3288:	01 96       	adiw	r24, 0x01	; 1
    328a:	9c 83       	std	Y+4, r25	; 0x04
    328c:	8b 83       	std	Y+3, r24	; 0x03
    328e:	94 e0       	ldi	r25, 0x04	; 4
    3290:	69 0e       	add	r6, r25
    3292:	71 1c       	adc	r7, r1
    3294:	ef ef       	ldi	r30, 0xFF	; 255
    3296:	8e 1a       	sub	r8, r30
    3298:	9e 0a       	sbc	r9, r30
    329a:	8b 81       	ldd	r24, Y+3	; 0x03
    329c:	9c 81       	ldd	r25, Y+4	; 0x04
    329e:	40 97       	sbiw	r24, 0x10	; 16
    32a0:	09 f0       	breq	.+2      	; 0x32a4 <releaseUpdate+0xd4>
    32a2:	c0 cf       	rjmp	.-128    	; 0x3224 <releaseUpdate+0x54>
			}
		}
		releaseTrackerParse = releaseTrackerParse>>1;
	}
	
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	df 91       	pop	r29
    32ae:	cf 91       	pop	r28
    32b0:	0f 91       	pop	r16
    32b2:	ef 90       	pop	r14
    32b4:	cf 90       	pop	r12
    32b6:	bf 90       	pop	r11
    32b8:	af 90       	pop	r10
    32ba:	9f 90       	pop	r9
    32bc:	8f 90       	pop	r8
    32be:	7f 90       	pop	r7
    32c0:	6f 90       	pop	r6
    32c2:	5f 90       	pop	r5
    32c4:	4f 90       	pop	r4
    32c6:	3f 90       	pop	r3
    32c8:	2f 90       	pop	r2
    32ca:	08 95       	ret

000032cc <twi_init>:
		}

		returnNum=twi_readNak();

	return returnNum;
}
    32cc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    32d0:	88 e4       	ldi	r24, 0x48	; 72
    32d2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    32d6:	08 95       	ret

000032d8 <twi_start>:
    32d8:	94 ea       	ldi	r25, 0xA4	; 164
    32da:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    32de:	ec eb       	ldi	r30, 0xBC	; 188
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	90 81       	ld	r25, Z
    32e4:	99 23       	and	r25, r25
    32e6:	ec f7       	brge	.-6      	; 0x32e2 <twi_start+0xa>
    32e8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    32ec:	98 7f       	andi	r25, 0xF8	; 248
    32ee:	98 30       	cpi	r25, 0x08	; 8
    32f0:	11 f0       	breq	.+4      	; 0x32f6 <twi_start+0x1e>
    32f2:	90 31       	cpi	r25, 0x10	; 16
    32f4:	a1 f4       	brne	.+40     	; 0x331e <twi_start+0x46>
    32f6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    32fa:	84 e8       	ldi	r24, 0x84	; 132
    32fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3300:	ec eb       	ldi	r30, 0xBC	; 188
    3302:	f0 e0       	ldi	r31, 0x00	; 0
    3304:	80 81       	ld	r24, Z
    3306:	88 23       	and	r24, r24
    3308:	ec f7       	brge	.-6      	; 0x3304 <twi_start+0x2c>
    330a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    330e:	98 7f       	andi	r25, 0xF8	; 248
    3310:	98 31       	cpi	r25, 0x18	; 24
    3312:	39 f0       	breq	.+14     	; 0x3322 <twi_start+0x4a>
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	90 34       	cpi	r25, 0x40	; 64
    3318:	29 f4       	brne	.+10     	; 0x3324 <twi_start+0x4c>
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	08 95       	ret
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	08 95       	ret
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	08 95       	ret

00003326 <twi_stop>:
    3326:	84 e9       	ldi	r24, 0x94	; 148
    3328:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    332c:	ec eb       	ldi	r30, 0xBC	; 188
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	80 81       	ld	r24, Z
    3332:	84 fd       	sbrc	r24, 4
    3334:	fd cf       	rjmp	.-6      	; 0x3330 <twi_stop+0xa>
    3336:	08 95       	ret

00003338 <twi_write>:
    3338:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    333c:	84 e8       	ldi	r24, 0x84	; 132
    333e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3342:	ec eb       	ldi	r30, 0xBC	; 188
    3344:	f0 e0       	ldi	r31, 0x00	; 0
    3346:	80 81       	ld	r24, Z
    3348:	88 23       	and	r24, r24
    334a:	ec f7       	brge	.-6      	; 0x3346 <twi_write+0xe>
    334c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3350:	98 7f       	andi	r25, 0xF8	; 248
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	98 32       	cpi	r25, 0x28	; 40
    3356:	09 f4       	brne	.+2      	; 0x335a <twi_write+0x22>
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	08 95       	ret

0000335c <twi_readAck>:
    335c:	84 ec       	ldi	r24, 0xC4	; 196
    335e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3362:	ec eb       	ldi	r30, 0xBC	; 188
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	80 81       	ld	r24, Z
    3368:	88 23       	and	r24, r24
    336a:	ec f7       	brge	.-6      	; 0x3366 <twi_readAck+0xa>
    336c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3370:	08 95       	ret

00003372 <twi_readNak>:
    3372:	84 e8       	ldi	r24, 0x84	; 132
    3374:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3378:	ec eb       	ldi	r30, 0xBC	; 188
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	80 81       	ld	r24, Z
    337e:	88 23       	and	r24, r24
    3380:	ec f7       	brge	.-6      	; 0x337c <twi_readNak+0xa>
    3382:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3386:	08 95       	ret

00003388 <eepromSavePattern>:
    3388:	4f 92       	push	r4
    338a:	5f 92       	push	r5
    338c:	6f 92       	push	r6
    338e:	7f 92       	push	r7
    3390:	8f 92       	push	r8
    3392:	9f 92       	push	r9
    3394:	af 92       	push	r10
    3396:	bf 92       	push	r11
    3398:	cf 92       	push	r12
    339a:	df 92       	push	r13
    339c:	ef 92       	push	r14
    339e:	ff 92       	push	r15
    33a0:	0f 93       	push	r16
    33a2:	1f 93       	push	r17
    33a4:	cf 93       	push	r28
    33a6:	df 93       	push	r29
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    33ac:	c4 59       	subi	r28, 0x94	; 148
    33ae:	d1 09       	sbc	r29, r1
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	f8 94       	cli
    33b4:	de bf       	out	0x3e, r29	; 62
    33b6:	0f be       	out	0x3f, r0	; 63
    33b8:	cd bf       	out	0x3d, r28	; 61
    33ba:	cd 5d       	subi	r28, 0xDD	; 221
    33bc:	dd 4f       	sbci	r29, 0xFD	; 253
    33be:	48 81       	ld	r20, Y
    33c0:	c3 52       	subi	r28, 0x23	; 35
    33c2:	d2 40       	sbci	r29, 0x02	; 2
    33c4:	c0 59       	subi	r28, 0x90	; 144
    33c6:	de 4f       	sbci	r29, 0xFE	; 254
    33c8:	88 81       	ld	r24, Y
    33ca:	c0 57       	subi	r28, 0x70	; 112
    33cc:	d1 40       	sbci	r29, 0x01	; 1
    33ce:	cf 58       	subi	r28, 0x8F	; 143
    33d0:	de 4f       	sbci	r29, 0xFE	; 254
    33d2:	98 81       	ld	r25, Y
    33d4:	c1 57       	subi	r28, 0x71	; 113
    33d6:	d1 40       	sbci	r29, 0x01	; 1
    33d8:	24 2f       	mov	r18, r20
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	44 23       	and	r20, r20
    33de:	8c f0       	brlt	.+34     	; 0x3402 <eepromSavePattern+0x7a>
    33e0:	21 50       	subi	r18, 0x01	; 1
    33e2:	31 09       	sbc	r19, r1
    33e4:	39 01       	movw	r6, r18
    33e6:	66 0c       	add	r6, r6
    33e8:	77 1c       	adc	r7, r7
    33ea:	62 0e       	add	r6, r18
    33ec:	73 1e       	adc	r7, r19
    33ee:	76 94       	lsr	r7
    33f0:	76 2c       	mov	r7, r6
    33f2:	66 24       	eor	r6, r6
    33f4:	77 94       	ror	r7
    33f6:	67 94       	ror	r6
    33f8:	0f 2e       	mov	r0, r31
    33fa:	f0 ea       	ldi	r31, 0xA0	; 160
    33fc:	5f 2e       	mov	r5, r31
    33fe:	f0 2d       	mov	r31, r0
    3400:	11 c0       	rjmp	.+34     	; 0x3424 <eepromSavePattern+0x9c>
    3402:	20 58       	subi	r18, 0x80	; 128
    3404:	31 09       	sbc	r19, r1
    3406:	39 01       	movw	r6, r18
    3408:	66 0c       	add	r6, r6
    340a:	77 1c       	adc	r7, r7
    340c:	26 0d       	add	r18, r6
    340e:	37 1d       	adc	r19, r7
    3410:	39 01       	movw	r6, r18
    3412:	76 94       	lsr	r7
    3414:	76 2c       	mov	r7, r6
    3416:	66 24       	eor	r6, r6
    3418:	77 94       	ror	r7
    341a:	67 94       	ror	r6
    341c:	0f 2e       	mov	r0, r31
    341e:	f8 ea       	ldi	r31, 0xA8	; 168
    3420:	5f 2e       	mov	r5, r31
    3422:	f0 2d       	mov	r31, r0
    3424:	be 01       	movw	r22, r28
    3426:	68 55       	subi	r22, 0x58	; 88
    3428:	7f 4f       	sbci	r23, 0xFF	; 255
    342a:	8e 01       	movw	r16, r28
    342c:	0f 5f       	subi	r16, 0xFF	; 255
    342e:	1f 4f       	sbci	r17, 0xFF	; 255
    3430:	fe 01       	movw	r30, r28
    3432:	e0 55       	subi	r30, 0x50	; 80
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	98 01       	movw	r18, r16
    3438:	db 01       	movw	r26, r22
    343a:	4d 91       	ld	r20, X+
    343c:	bd 01       	movw	r22, r26
    343e:	d9 01       	movw	r26, r18
    3440:	4d 93       	st	X+, r20
    3442:	9d 01       	movw	r18, r26
    3444:	6e 17       	cp	r22, r30
    3446:	7f 07       	cpc	r23, r31
    3448:	b9 f7       	brne	.-18     	; 0x3438 <eepromSavePattern+0xb0>
    344a:	de 01       	movw	r26, r28
    344c:	19 96       	adiw	r26, 0x09	; 9
    344e:	9e 01       	movw	r18, r28
    3450:	28 54       	subi	r18, 0x48	; 72
    3452:	3f 4f       	sbci	r19, 0xFF	; 255
    3454:	41 91       	ld	r20, Z+
    3456:	4d 93       	st	X+, r20
    3458:	e2 17       	cp	r30, r18
    345a:	f3 07       	cpc	r31, r19
    345c:	d9 f7       	brne	.-10     	; 0x3454 <eepromSavePattern+0xcc>
    345e:	4e 01       	movw	r8, r28
    3460:	b1 e1       	ldi	r27, 0x11	; 17
    3462:	8b 0e       	add	r8, r27
    3464:	91 1c       	adc	r9, r1
    3466:	7e 01       	movw	r14, r28
    3468:	e0 ec       	ldi	r30, 0xC0	; 192
    346a:	ee 0e       	add	r14, r30
    346c:	f1 1c       	adc	r15, r1
    346e:	d4 01       	movw	r26, r8
    3470:	f9 01       	movw	r30, r18
    3472:	41 91       	ld	r20, Z+
    3474:	9f 01       	movw	r18, r30
    3476:	4d 93       	st	X+, r20
    3478:	ee 15       	cp	r30, r14
    347a:	ff 05       	cpc	r31, r15
    347c:	c9 f7       	brne	.-14     	; 0x3470 <eepromSavePattern+0xe8>
    347e:	9e 01       	movw	r18, r28
    3480:	27 5e       	subi	r18, 0xE7	; 231
    3482:	3f 4f       	sbci	r19, 0xFF	; 255
    3484:	be 01       	movw	r22, r28
    3486:	60 53       	subi	r22, 0x30	; 48
    3488:	7f 4f       	sbci	r23, 0xFF	; 255
    348a:	d7 01       	movw	r26, r14
    348c:	4d 91       	ld	r20, X+
    348e:	7d 01       	movw	r14, r26
    3490:	f9 01       	movw	r30, r18
    3492:	41 93       	st	Z+, r20
    3494:	9f 01       	movw	r18, r30
    3496:	a6 17       	cp	r26, r22
    3498:	b7 07       	cpc	r27, r23
    349a:	b9 f7       	brne	.-18     	; 0x348a <eepromSavePattern+0x102>
    349c:	9e 01       	movw	r18, r28
    349e:	27 5d       	subi	r18, 0xD7	; 215
    34a0:	3f 4f       	sbci	r19, 0xFF	; 255
    34a2:	de 01       	movw	r26, r28
    34a4:	a0 52       	subi	r26, 0x20	; 32
    34a6:	bf 4f       	sbci	r27, 0xFF	; 255
    34a8:	fb 01       	movw	r30, r22
    34aa:	41 91       	ld	r20, Z+
    34ac:	bf 01       	movw	r22, r30
    34ae:	f9 01       	movw	r30, r18
    34b0:	41 93       	st	Z+, r20
    34b2:	9f 01       	movw	r18, r30
    34b4:	6a 17       	cp	r22, r26
    34b6:	7b 07       	cpc	r23, r27
    34b8:	b9 f7       	brne	.-18     	; 0x34a8 <eepromSavePattern+0x120>
    34ba:	9e 01       	movw	r18, r28
    34bc:	27 5c       	subi	r18, 0xC7	; 199
    34be:	3f 4f       	sbci	r19, 0xFF	; 255
    34c0:	be 01       	movw	r22, r28
    34c2:	60 51       	subi	r22, 0x10	; 16
    34c4:	7f 4f       	sbci	r23, 0xFF	; 255
    34c6:	4d 91       	ld	r20, X+
    34c8:	f9 01       	movw	r30, r18
    34ca:	41 93       	st	Z+, r20
    34cc:	9f 01       	movw	r18, r30
    34ce:	a6 17       	cp	r26, r22
    34d0:	b7 07       	cpc	r27, r23
    34d2:	c9 f7       	brne	.-14     	; 0x34c6 <eepromSavePattern+0x13e>
    34d4:	9e 01       	movw	r18, r28
    34d6:	27 5b       	subi	r18, 0xB7	; 183
    34d8:	3f 4f       	sbci	r19, 0xFF	; 255
    34da:	de 01       	movw	r26, r28
    34dc:	b3 95       	inc	r27
    34de:	fb 01       	movw	r30, r22
    34e0:	41 91       	ld	r20, Z+
    34e2:	bf 01       	movw	r22, r30
    34e4:	f9 01       	movw	r30, r18
    34e6:	41 93       	st	Z+, r20
    34e8:	9f 01       	movw	r18, r30
    34ea:	6a 17       	cp	r22, r26
    34ec:	7b 07       	cpc	r23, r27
    34ee:	b9 f7       	brne	.-18     	; 0x34de <eepromSavePattern+0x156>
    34f0:	9e 01       	movw	r18, r28
    34f2:	27 5a       	subi	r18, 0xA7	; 167
    34f4:	3f 4f       	sbci	r19, 0xFF	; 255
    34f6:	be 01       	movw	r22, r28
    34f8:	60 5f       	subi	r22, 0xF0	; 240
    34fa:	7e 4f       	sbci	r23, 0xFE	; 254
    34fc:	4d 91       	ld	r20, X+
    34fe:	f9 01       	movw	r30, r18
    3500:	41 93       	st	Z+, r20
    3502:	9f 01       	movw	r18, r30
    3504:	a6 17       	cp	r26, r22
    3506:	b7 07       	cpc	r27, r23
    3508:	c9 f7       	brne	.-14     	; 0x34fc <eepromSavePattern+0x174>
    350a:	de 01       	movw	r26, r28
    350c:	a7 59       	subi	r26, 0x97	; 151
    350e:	bf 4f       	sbci	r27, 0xFF	; 255
    3510:	5e 01       	movw	r10, r28
    3512:	f0 ee       	ldi	r31, 0xE0	; 224
    3514:	af 1a       	sub	r10, r31
    3516:	fe ef       	ldi	r31, 0xFE	; 254
    3518:	bf 0a       	sbc	r11, r31
    351a:	fb 01       	movw	r30, r22
    351c:	21 91       	ld	r18, Z+
    351e:	bf 01       	movw	r22, r30
    3520:	2d 93       	st	X+, r18
    3522:	ea 15       	cp	r30, r10
    3524:	fb 05       	cpc	r31, r11
    3526:	c9 f7       	brne	.-14     	; 0x351a <eepromSavePattern+0x192>
    3528:	eb 96       	adiw	r28, 0x3b	; 59
    352a:	9f af       	std	Y+63, r25	; 0x3f
    352c:	eb 97       	sbiw	r28, 0x3b	; 59
    352e:	ec 96       	adiw	r28, 0x3c	; 60
    3530:	8f af       	std	Y+63, r24	; 0x3f
    3532:	ec 97       	sbiw	r28, 0x3c	; 60
    3534:	ce 58       	subi	r28, 0x8E	; 142
    3536:	de 4f       	sbci	r29, 0xFE	; 254
    3538:	88 81       	ld	r24, Y
    353a:	c2 57       	subi	r28, 0x72	; 114
    353c:	d1 40       	sbci	r29, 0x01	; 1
    353e:	ed 96       	adiw	r28, 0x3d	; 61
    3540:	8f af       	std	Y+63, r24	; 0x3f
    3542:	ed 97       	sbiw	r28, 0x3d	; 61
    3544:	85 2d       	mov	r24, r5
    3546:	c8 de       	rcall	.-624    	; 0x32d8 <twi_start>
    3548:	81 30       	cpi	r24, 0x01	; 1
    354a:	81 f4       	brne	.+32     	; 0x356c <eepromSavePattern+0x1e4>
    354c:	84 e1       	ldi	r24, 0x14	; 20
    354e:	ec e0       	ldi	r30, 0x0C	; 12
    3550:	f2 e0       	ldi	r31, 0x02	; 2
    3552:	de 01       	movw	r26, r28
    3554:	af 57       	subi	r26, 0x7F	; 127
    3556:	bf 4f       	sbci	r27, 0xFF	; 255
    3558:	01 90       	ld	r0, Z+
    355a:	0d 92       	st	X+, r0
    355c:	8a 95       	dec	r24
    355e:	e1 f7       	brne	.-8      	; 0x3558 <eepromSavePattern+0x1d0>
    3560:	63 e0       	ldi	r22, 0x03	; 3
    3562:	70 e0       	ldi	r23, 0x00	; 0
    3564:	ce 01       	movw	r24, r28
    3566:	8f 57       	subi	r24, 0x7F	; 127
    3568:	9f 4f       	sbci	r25, 0xFF	; 255
    356a:	e1 d8       	rcall	.-3646   	; 0x272e <outputS>
    356c:	87 2d       	mov	r24, r7
    356e:	e4 de       	rcall	.-568    	; 0x3338 <twi_write>
    3570:	46 2c       	mov	r4, r6
    3572:	86 2d       	mov	r24, r6
    3574:	e1 de       	rcall	.-574    	; 0x3338 <twi_write>
    3576:	6e 01       	movw	r12, r28
    3578:	fd e7       	ldi	r31, 0x7D	; 125
    357a:	cf 0e       	add	r12, r31
    357c:	d1 1c       	adc	r13, r1
    357e:	78 01       	movw	r14, r16
    3580:	d7 01       	movw	r26, r14
    3582:	8d 91       	ld	r24, X+
    3584:	7d 01       	movw	r14, r26
    3586:	d8 de       	rcall	.-592    	; 0x3338 <twi_write>
    3588:	ce 14       	cp	r12, r14
    358a:	df 04       	cpc	r13, r15
    358c:	c9 f7       	brne	.-14     	; 0x3580 <eepromSavePattern+0x1f8>
    358e:	cb de       	rcall	.-618    	; 0x3326 <twi_stop>
    3590:	ef e1       	ldi	r30, 0x1F	; 31
    3592:	fe e4       	ldi	r31, 0x4E	; 78
    3594:	31 97       	sbiw	r30, 0x01	; 1
    3596:	f1 f7       	brne	.-4      	; 0x3594 <eepromSavePattern+0x20c>
    3598:	00 c0       	rjmp	.+0      	; 0x359a <eepromSavePattern+0x212>
    359a:	00 00       	nop
    359c:	9e 01       	movw	r18, r28
    359e:	20 5d       	subi	r18, 0xD0	; 208
    35a0:	3e 4f       	sbci	r19, 0xFE	; 254
    35a2:	f8 01       	movw	r30, r16
    35a4:	d5 01       	movw	r26, r10
    35a6:	8d 91       	ld	r24, X+
    35a8:	5d 01       	movw	r10, r26
    35aa:	81 93       	st	Z+, r24
    35ac:	2a 17       	cp	r18, r26
    35ae:	3b 07       	cpc	r19, r27
    35b0:	c9 f7       	brne	.-14     	; 0x35a4 <eepromSavePattern+0x21c>
    35b2:	de 01       	movw	r26, r28
    35b4:	91 96       	adiw	r26, 0x21	; 33
    35b6:	f9 01       	movw	r30, r18
    35b8:	81 91       	ld	r24, Z+
    35ba:	9f 01       	movw	r18, r30
    35bc:	f4 01       	movw	r30, r8
    35be:	81 93       	st	Z+, r24
    35c0:	4f 01       	movw	r8, r30
    35c2:	ae 17       	cp	r26, r30
    35c4:	bf 07       	cpc	r27, r31
    35c6:	b9 f7       	brne	.-18     	; 0x35b6 <eepromSavePattern+0x22e>
    35c8:	ce 01       	movw	r24, r28
    35ca:	80 5c       	subi	r24, 0xC0	; 192
    35cc:	9e 4f       	sbci	r25, 0xFE	; 254
    35ce:	ae 01       	movw	r20, r28
    35d0:	4f 5c       	subi	r20, 0xCF	; 207
    35d2:	5f 4f       	sbci	r21, 0xFF	; 255
    35d4:	fc 01       	movw	r30, r24
    35d6:	21 91       	ld	r18, Z+
    35d8:	cf 01       	movw	r24, r30
    35da:	2d 93       	st	X+, r18
    35dc:	a4 17       	cp	r26, r20
    35de:	b5 07       	cpc	r27, r21
    35e0:	c9 f7       	brne	.-14     	; 0x35d4 <eepromSavePattern+0x24c>
    35e2:	ce 01       	movw	r24, r28
    35e4:	80 5b       	subi	r24, 0xB0	; 176
    35e6:	9e 4f       	sbci	r25, 0xFE	; 254
    35e8:	de 01       	movw	r26, r28
    35ea:	af 5b       	subi	r26, 0xBF	; 191
    35ec:	bf 4f       	sbci	r27, 0xFF	; 255
    35ee:	fc 01       	movw	r30, r24
    35f0:	21 91       	ld	r18, Z+
    35f2:	cf 01       	movw	r24, r30
    35f4:	fa 01       	movw	r30, r20
    35f6:	21 93       	st	Z+, r18
    35f8:	af 01       	movw	r20, r30
    35fa:	ea 17       	cp	r30, r26
    35fc:	fb 07       	cpc	r31, r27
    35fe:	b9 f7       	brne	.-18     	; 0x35ee <eepromSavePattern+0x266>
    3600:	fe 01       	movw	r30, r28
    3602:	e0 5a       	subi	r30, 0xA0	; 160
    3604:	fe 4f       	sbci	r31, 0xFE	; 254
    3606:	9e 01       	movw	r18, r28
    3608:	20 59       	subi	r18, 0x90	; 144
    360a:	3e 4f       	sbci	r19, 0xFE	; 254
    360c:	81 91       	ld	r24, Z+
    360e:	8d 93       	st	X+, r24
    3610:	2e 17       	cp	r18, r30
    3612:	3f 07       	cpc	r19, r31
    3614:	d9 f7       	brne	.-10     	; 0x360c <eepromSavePattern+0x284>
    3616:	ae 01       	movw	r20, r28
    3618:	4d 58       	subi	r20, 0x8D	; 141
    361a:	5e 4f       	sbci	r21, 0xFE	; 254
    361c:	ce 01       	movw	r24, r28
    361e:	8f 5a       	subi	r24, 0xAF	; 175
    3620:	9f 4f       	sbci	r25, 0xFF	; 255
    3622:	de 01       	movw	r26, r28
    3624:	ad 57       	subi	r26, 0x7D	; 125
    3626:	be 4f       	sbci	r27, 0xFE	; 254
    3628:	fa 01       	movw	r30, r20
    362a:	21 91       	ld	r18, Z+
    362c:	af 01       	movw	r20, r30
    362e:	fc 01       	movw	r30, r24
    3630:	21 93       	st	Z+, r18
    3632:	cf 01       	movw	r24, r30
    3634:	a4 17       	cp	r26, r20
    3636:	b5 07       	cpc	r27, r21
    3638:	b9 f7       	brne	.-18     	; 0x3628 <eepromSavePattern+0x2a0>
    363a:	ce 01       	movw	r24, r28
    363c:	8f 59       	subi	r24, 0x9F	; 159
    363e:	9f 4f       	sbci	r25, 0xFF	; 255
    3640:	ae 01       	movw	r20, r28
    3642:	4d 56       	subi	r20, 0x6D	; 109
    3644:	5e 4f       	sbci	r21, 0xFE	; 254
    3646:	2d 91       	ld	r18, X+
    3648:	fc 01       	movw	r30, r24
    364a:	21 93       	st	Z+, r18
    364c:	cf 01       	movw	r24, r30
    364e:	a4 17       	cp	r26, r20
    3650:	b5 07       	cpc	r27, r21
    3652:	c9 f7       	brne	.-14     	; 0x3646 <eepromSavePattern+0x2be>
    3654:	de 01       	movw	r26, r28
    3656:	af 58       	subi	r26, 0x8F	; 143
    3658:	bf 4f       	sbci	r27, 0xFF	; 255
    365a:	7e 01       	movw	r14, r28
    365c:	fd e5       	ldi	r31, 0x5D	; 93
    365e:	ef 1a       	sub	r14, r31
    3660:	fe ef       	ldi	r31, 0xFE	; 254
    3662:	ff 0a       	sbc	r15, r31
    3664:	fa 01       	movw	r30, r20
    3666:	81 91       	ld	r24, Z+
    3668:	af 01       	movw	r20, r30
    366a:	8d 93       	st	X+, r24
    366c:	ee 16       	cp	r14, r30
    366e:	ff 06       	cpc	r15, r31
    3670:	c9 f7       	brne	.-14     	; 0x3664 <eepromSavePattern+0x2dc>
    3672:	85 2d       	mov	r24, r5
    3674:	31 de       	rcall	.-926    	; 0x32d8 <twi_start>
    3676:	81 30       	cpi	r24, 0x01	; 1
    3678:	81 f4       	brne	.+32     	; 0x369a <eepromSavePattern+0x312>
    367a:	84 e1       	ldi	r24, 0x14	; 20
    367c:	e1 e2       	ldi	r30, 0x21	; 33
    367e:	f2 e0       	ldi	r31, 0x02	; 2
    3680:	de 01       	movw	r26, r28
    3682:	af 57       	subi	r26, 0x7F	; 127
    3684:	bf 4f       	sbci	r27, 0xFF	; 255
    3686:	01 90       	ld	r0, Z+
    3688:	0d 92       	st	X+, r0
    368a:	8a 95       	dec	r24
    368c:	e1 f7       	brne	.-8      	; 0x3686 <eepromSavePattern+0x2fe>
    368e:	63 e0       	ldi	r22, 0x03	; 3
    3690:	70 e0       	ldi	r23, 0x00	; 0
    3692:	ce 01       	movw	r24, r28
    3694:	8f 57       	subi	r24, 0x7F	; 127
    3696:	9f 4f       	sbci	r25, 0xFF	; 255
    3698:	4a d8       	rcall	.-3948   	; 0x272e <outputS>
    369a:	c3 01       	movw	r24, r6
    369c:	80 58       	subi	r24, 0x80	; 128
    369e:	9f 4f       	sbci	r25, 0xFF	; 255
    36a0:	89 2f       	mov	r24, r25
    36a2:	4a de       	rcall	.-876    	; 0x3338 <twi_write>
    36a4:	80 e8       	ldi	r24, 0x80	; 128
    36a6:	84 0d       	add	r24, r4
    36a8:	47 de       	rcall	.-882    	; 0x3338 <twi_write>
    36aa:	6e 01       	movw	r12, r28
    36ac:	f1 e8       	ldi	r31, 0x81	; 129
    36ae:	cf 0e       	add	r12, r31
    36b0:	d1 1c       	adc	r13, r1
    36b2:	d8 01       	movw	r26, r16
    36b4:	8d 91       	ld	r24, X+
    36b6:	8d 01       	movw	r16, r26
    36b8:	3f de       	rcall	.-898    	; 0x3338 <twi_write>
    36ba:	c0 16       	cp	r12, r16
    36bc:	d1 06       	cpc	r13, r17
    36be:	c9 f7       	brne	.-14     	; 0x36b2 <eepromSavePattern+0x32a>
    36c0:	32 de       	rcall	.-924    	; 0x3326 <twi_stop>
    36c2:	ef e1       	ldi	r30, 0x1F	; 31
    36c4:	fe e4       	ldi	r31, 0x4E	; 78
    36c6:	31 97       	sbiw	r30, 0x01	; 1
    36c8:	f1 f7       	brne	.-4      	; 0x36c6 <eepromSavePattern+0x33e>
    36ca:	00 c0       	rjmp	.+0      	; 0x36cc <eepromSavePattern+0x344>
    36cc:	00 00       	nop
    36ce:	85 2d       	mov	r24, r5
    36d0:	03 de       	rcall	.-1018   	; 0x32d8 <twi_start>
    36d2:	81 30       	cpi	r24, 0x01	; 1
    36d4:	81 f4       	brne	.+32     	; 0x36f6 <eepromSavePattern+0x36e>
    36d6:	84 e1       	ldi	r24, 0x14	; 20
    36d8:	e6 e3       	ldi	r30, 0x36	; 54
    36da:	f2 e0       	ldi	r31, 0x02	; 2
    36dc:	de 01       	movw	r26, r28
    36de:	af 57       	subi	r26, 0x7F	; 127
    36e0:	bf 4f       	sbci	r27, 0xFF	; 255
    36e2:	01 90       	ld	r0, Z+
    36e4:	0d 92       	st	X+, r0
    36e6:	8a 95       	dec	r24
    36e8:	e1 f7       	brne	.-8      	; 0x36e2 <eepromSavePattern+0x35a>
    36ea:	63 e0       	ldi	r22, 0x03	; 3
    36ec:	70 e0       	ldi	r23, 0x00	; 0
    36ee:	ce 01       	movw	r24, r28
    36f0:	8f 57       	subi	r24, 0x7F	; 127
    36f2:	9f 4f       	sbci	r25, 0xFF	; 255
    36f4:	1c d8       	rcall	.-4040   	; 0x272e <outputS>
    36f6:	73 94       	inc	r7
    36f8:	87 2d       	mov	r24, r7
    36fa:	1e de       	rcall	.-964    	; 0x3338 <twi_write>
    36fc:	84 2d       	mov	r24, r4
    36fe:	1c de       	rcall	.-968    	; 0x3338 <twi_write>
    3700:	6e 01       	movw	r12, r28
    3702:	2d ed       	ldi	r18, 0xDD	; 221
    3704:	c2 1a       	sub	r12, r18
    3706:	2d ef       	ldi	r18, 0xFD	; 253
    3708:	d2 0a       	sbc	r13, r18
    370a:	d7 01       	movw	r26, r14
    370c:	1c 91       	ld	r17, X
    370e:	11 96       	adiw	r26, 0x01	; 1
    3710:	8c 91       	ld	r24, X
    3712:	b2 e0       	ldi	r27, 0x02	; 2
    3714:	eb 0e       	add	r14, r27
    3716:	f1 1c       	adc	r15, r1
    3718:	0f de       	rcall	.-994    	; 0x3338 <twi_write>
    371a:	81 2f       	mov	r24, r17
    371c:	0d de       	rcall	.-998    	; 0x3338 <twi_write>
    371e:	ce 14       	cp	r12, r14
    3720:	df 04       	cpc	r13, r15
    3722:	99 f7       	brne	.-26     	; 0x370a <eepromSavePattern+0x382>
    3724:	00 de       	rcall	.-1024   	; 0x3326 <twi_stop>
    3726:	ef e1       	ldi	r30, 0x1F	; 31
    3728:	fe e4       	ldi	r31, 0x4E	; 78
    372a:	31 97       	sbiw	r30, 0x01	; 1
    372c:	f1 f7       	brne	.-4      	; 0x372a <eepromSavePattern+0x3a2>
    372e:	00 c0       	rjmp	.+0      	; 0x3730 <eepromSavePattern+0x3a8>
    3730:	00 00       	nop
    3732:	cc 56       	subi	r28, 0x6C	; 108
    3734:	df 4f       	sbci	r29, 0xFF	; 255
    3736:	0f b6       	in	r0, 0x3f	; 63
    3738:	f8 94       	cli
    373a:	de bf       	out	0x3e, r29	; 62
    373c:	0f be       	out	0x3f, r0	; 63
    373e:	cd bf       	out	0x3d, r28	; 61
    3740:	df 91       	pop	r29
    3742:	cf 91       	pop	r28
    3744:	1f 91       	pop	r17
    3746:	0f 91       	pop	r16
    3748:	ff 90       	pop	r15
    374a:	ef 90       	pop	r14
    374c:	df 90       	pop	r13
    374e:	cf 90       	pop	r12
    3750:	bf 90       	pop	r11
    3752:	af 90       	pop	r10
    3754:	9f 90       	pop	r9
    3756:	8f 90       	pop	r8
    3758:	7f 90       	pop	r7
    375a:	6f 90       	pop	r6
    375c:	5f 90       	pop	r5
    375e:	4f 90       	pop	r4
    3760:	08 95       	ret

00003762 <eepromLoadPattern>:
    3762:	8f 92       	push	r8
    3764:	9f 92       	push	r9
    3766:	af 92       	push	r10
    3768:	bf 92       	push	r11
    376a:	cf 92       	push	r12
    376c:	df 92       	push	r13
    376e:	ef 92       	push	r14
    3770:	ff 92       	push	r15
    3772:	0f 93       	push	r16
    3774:	1f 93       	push	r17
    3776:	cf 93       	push	r28
    3778:	df 93       	push	r29
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
    377e:	c4 59       	subi	r28, 0x94	; 148
    3780:	d1 40       	sbci	r29, 0x01	; 1
    3782:	0f b6       	in	r0, 0x3f	; 63
    3784:	f8 94       	cli
    3786:	de bf       	out	0x3e, r29	; 62
    3788:	0f be       	out	0x3f, r0	; 63
    378a:	cd bf       	out	0x3d, r28	; 61
    378c:	7c 01       	movw	r14, r24
    378e:	86 2f       	mov	r24, r22
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	66 23       	and	r22, r22
    3794:	84 f0       	brlt	.+32     	; 0x37b6 <eepromLoadPattern+0x54>
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	9c 01       	movw	r18, r24
    379a:	22 0f       	add	r18, r18
    379c:	33 1f       	adc	r19, r19
    379e:	82 0f       	add	r24, r18
    37a0:	93 1f       	adc	r25, r19
    37a2:	96 95       	lsr	r25
    37a4:	98 2f       	mov	r25, r24
    37a6:	88 27       	eor	r24, r24
    37a8:	97 95       	ror	r25
    37aa:	87 95       	ror	r24
    37ac:	08 2f       	mov	r16, r24
    37ae:	d9 2e       	mov	r13, r25
    37b0:	80 ea       	ldi	r24, 0xA0	; 160
    37b2:	11 ea       	ldi	r17, 0xA1	; 161
    37b4:	10 c0       	rjmp	.+32     	; 0x37d6 <eepromLoadPattern+0x74>
    37b6:	80 58       	subi	r24, 0x80	; 128
    37b8:	91 09       	sbc	r25, r1
    37ba:	9c 01       	movw	r18, r24
    37bc:	22 0f       	add	r18, r18
    37be:	33 1f       	adc	r19, r19
    37c0:	82 0f       	add	r24, r18
    37c2:	93 1f       	adc	r25, r19
    37c4:	96 95       	lsr	r25
    37c6:	98 2f       	mov	r25, r24
    37c8:	88 27       	eor	r24, r24
    37ca:	97 95       	ror	r25
    37cc:	87 95       	ror	r24
    37ce:	08 2f       	mov	r16, r24
    37d0:	d9 2e       	mov	r13, r25
    37d2:	88 ea       	ldi	r24, 0xA8	; 168
    37d4:	19 ea       	ldi	r17, 0xA9	; 169
    37d6:	80 dd       	rcall	.-1280   	; 0x32d8 <twi_start>
    37d8:	81 30       	cpi	r24, 0x01	; 1
    37da:	31 f4       	brne	.+12     	; 0x37e8 <eepromLoadPattern+0x86>
    37dc:	63 e0       	ldi	r22, 0x03	; 3
    37de:	70 e0       	ldi	r23, 0x00	; 0
    37e0:	8c eb       	ldi	r24, 0xBC	; 188
    37e2:	93 e0       	ldi	r25, 0x03	; 3
    37e4:	0e 94 97 13 	call	0x272e	; 0x272e <outputS>
    37e8:	8d 2d       	mov	r24, r13
    37ea:	a6 dd       	rcall	.-1204   	; 0x3338 <twi_write>
    37ec:	80 2f       	mov	r24, r16
    37ee:	a4 dd       	rcall	.-1208   	; 0x3338 <twi_write>
    37f0:	81 2f       	mov	r24, r17
    37f2:	72 dd       	rcall	.-1308   	; 0x32d8 <twi_start>
    37f4:	81 30       	cpi	r24, 0x01	; 1
    37f6:	09 f0       	breq	.+2      	; 0x37fa <eepromLoadPattern+0x98>
    37f8:	48 c1       	rjmp	.+656    	; 0x3a8a <eepromLoadPattern+0x328>
    37fa:	84 e1       	ldi	r24, 0x14	; 20
    37fc:	eb e4       	ldi	r30, 0x4B	; 75
    37fe:	f2 e0       	ldi	r31, 0x02	; 2
    3800:	de 01       	movw	r26, r28
    3802:	af 57       	subi	r26, 0x7F	; 127
    3804:	be 4f       	sbci	r27, 0xFE	; 254
    3806:	01 90       	ld	r0, Z+
    3808:	0d 92       	st	X+, r0
    380a:	8a 95       	dec	r24
    380c:	e1 f7       	brne	.-8      	; 0x3806 <eepromLoadPattern+0xa4>
    380e:	63 e0       	ldi	r22, 0x03	; 3
    3810:	70 e0       	ldi	r23, 0x00	; 0
    3812:	ce 01       	movw	r24, r28
    3814:	8f 57       	subi	r24, 0x7F	; 127
    3816:	9e 4f       	sbci	r25, 0xFE	; 254
    3818:	0e 94 97 13 	call	0x272e	; 0x272e <outputS>
    381c:	36 c1       	rjmp	.+620    	; 0x3a8a <eepromLoadPattern+0x328>
    381e:	9e dd       	rcall	.-1220   	; 0x335c <twi_readAck>
    3820:	d8 01       	movw	r26, r16
    3822:	8d 93       	st	X+, r24
    3824:	8d 01       	movw	r16, r26
    3826:	ac 15       	cp	r26, r12
    3828:	bd 05       	cpc	r27, r13
    382a:	c9 f7       	brne	.-14     	; 0x381e <eepromLoadPattern+0xbc>
    382c:	a2 dd       	rcall	.-1212   	; 0x3372 <twi_readNak>
    382e:	c0 58       	subi	r28, 0x80	; 128
    3830:	de 4f       	sbci	r29, 0xFE	; 254
    3832:	88 83       	st	Y, r24
    3834:	c0 58       	subi	r28, 0x80	; 128
    3836:	d1 40       	sbci	r29, 0x01	; 1
    3838:	76 dd       	rcall	.-1300   	; 0x3326 <twi_stop>
    383a:	87 01       	movw	r16, r14
    383c:	4e 01       	movw	r8, r28
    383e:	b9 e0       	ldi	r27, 0x09	; 9
    3840:	8b 0e       	add	r8, r27
    3842:	91 1c       	adc	r9, r1
    3844:	f7 01       	movw	r30, r14
    3846:	d5 01       	movw	r26, r10
    3848:	8d 91       	ld	r24, X+
    384a:	5d 01       	movw	r10, r26
    384c:	81 93       	st	Z+, r24
    384e:	a8 15       	cp	r26, r8
    3850:	b9 05       	cpc	r27, r9
    3852:	c9 f7       	brne	.-14     	; 0x3846 <eepromLoadPattern+0xe4>
    3854:	d1 2c       	mov	r13, r1
    3856:	f4 01       	movw	r30, r8
    3858:	81 91       	ld	r24, Z+
    385a:	4f 01       	movw	r8, r30
    385c:	f8 01       	movw	r30, r16
    385e:	80 87       	std	Z+8, r24	; 0x08
    3860:	4d 2d       	mov	r20, r13
    3862:	60 81       	ld	r22, Z
    3864:	0f 5f       	subi	r16, 0xFF	; 255
    3866:	1f 4f       	sbci	r17, 0xFF	; 255
    3868:	bb da       	rcall	.-2698   	; 0x2de0 <setOutputVolume>
    386a:	d3 94       	inc	r13
    386c:	f8 e0       	ldi	r31, 0x08	; 8
    386e:	df 12       	cpse	r13, r31
    3870:	f2 cf       	rjmp	.-28     	; 0x3856 <eepromLoadPattern+0xf4>
    3872:	5e 01       	movw	r10, r28
    3874:	81 e1       	ldi	r24, 0x11	; 17
    3876:	a8 0e       	add	r10, r24
    3878:	b1 1c       	adc	r11, r1
    387a:	67 01       	movw	r12, r14
    387c:	90 e1       	ldi	r25, 0x10	; 16
    387e:	c9 0e       	add	r12, r25
    3880:	d1 1c       	adc	r13, r1
    3882:	10 e0       	ldi	r17, 0x00	; 0
    3884:	d5 01       	movw	r26, r10
    3886:	4d 91       	ld	r20, X+
    3888:	5d 01       	movw	r10, r26
    388a:	f6 01       	movw	r30, r12
    388c:	41 93       	st	Z+, r20
    388e:	6f 01       	movw	r12, r30
    3890:	60 e0       	ldi	r22, 0x00	; 0
    3892:	81 2f       	mov	r24, r17
    3894:	1c db       	rcall	.-2504   	; 0x2ece <outputSampleRate>
    3896:	1f 5f       	subi	r17, 0xFF	; 255
    3898:	18 30       	cpi	r17, 0x08	; 8
    389a:	a1 f7       	brne	.-24     	; 0x3884 <eepromLoadPattern+0x122>
    389c:	fe 01       	movw	r30, r28
    389e:	79 96       	adiw	r30, 0x19	; 25
    38a0:	c7 01       	movw	r24, r14
    38a2:	48 96       	adiw	r24, 0x18	; 24
    38a4:	ae 01       	movw	r20, r28
    38a6:	47 5d       	subi	r20, 0xD7	; 215
    38a8:	5f 4f       	sbci	r21, 0xFF	; 255
    38aa:	21 91       	ld	r18, Z+
    38ac:	dc 01       	movw	r26, r24
    38ae:	2d 93       	st	X+, r18
    38b0:	cd 01       	movw	r24, r26
    38b2:	e4 17       	cp	r30, r20
    38b4:	f5 07       	cpc	r31, r21
    38b6:	c9 f7       	brne	.-14     	; 0x38aa <eepromLoadPattern+0x148>
    38b8:	57 01       	movw	r10, r14
    38ba:	b8 e2       	ldi	r27, 0x28	; 40
    38bc:	ab 0e       	add	r10, r27
    38be:	b1 1c       	adc	r11, r1
    38c0:	de 01       	movw	r26, r28
    38c2:	d9 96       	adiw	r26, 0x39	; 57
    38c4:	c5 01       	movw	r24, r10
    38c6:	fa 01       	movw	r30, r20
    38c8:	21 91       	ld	r18, Z+
    38ca:	af 01       	movw	r20, r30
    38cc:	fc 01       	movw	r30, r24
    38ce:	21 93       	st	Z+, r18
    38d0:	cf 01       	movw	r24, r30
    38d2:	4a 17       	cp	r20, r26
    38d4:	5b 07       	cpc	r21, r27
    38d6:	b9 f7       	brne	.-18     	; 0x38c6 <eepromLoadPattern+0x164>
    38d8:	c7 01       	movw	r24, r14
    38da:	c8 96       	adiw	r24, 0x38	; 56
    38dc:	ae 01       	movw	r20, r28
    38de:	47 5b       	subi	r20, 0xB7	; 183
    38e0:	5f 4f       	sbci	r21, 0xFF	; 255
    38e2:	2d 91       	ld	r18, X+
    38e4:	fc 01       	movw	r30, r24
    38e6:	21 93       	st	Z+, r18
    38e8:	cf 01       	movw	r24, r30
    38ea:	a4 17       	cp	r26, r20
    38ec:	b5 07       	cpc	r27, r21
    38ee:	c9 f7       	brne	.-14     	; 0x38e2 <eepromLoadPattern+0x180>
    38f0:	c7 01       	movw	r24, r14
    38f2:	88 5b       	subi	r24, 0xB8	; 184
    38f4:	9f 4f       	sbci	r25, 0xFF	; 255
    38f6:	de 01       	movw	r26, r28
    38f8:	a7 5a       	subi	r26, 0xA7	; 167
    38fa:	bf 4f       	sbci	r27, 0xFF	; 255
    38fc:	fa 01       	movw	r30, r20
    38fe:	21 91       	ld	r18, Z+
    3900:	af 01       	movw	r20, r30
    3902:	fc 01       	movw	r30, r24
    3904:	21 93       	st	Z+, r18
    3906:	cf 01       	movw	r24, r30
    3908:	4a 17       	cp	r20, r26
    390a:	5b 07       	cpc	r21, r27
    390c:	b9 f7       	brne	.-18     	; 0x38fc <eepromLoadPattern+0x19a>
    390e:	c7 01       	movw	r24, r14
    3910:	88 5a       	subi	r24, 0xA8	; 168
    3912:	9f 4f       	sbci	r25, 0xFF	; 255
    3914:	ae 01       	movw	r20, r28
    3916:	47 59       	subi	r20, 0x97	; 151
    3918:	5f 4f       	sbci	r21, 0xFF	; 255
    391a:	2d 91       	ld	r18, X+
    391c:	fc 01       	movw	r30, r24
    391e:	21 93       	st	Z+, r18
    3920:	cf 01       	movw	r24, r30
    3922:	a4 17       	cp	r26, r20
    3924:	b5 07       	cpc	r27, r21
    3926:	c9 f7       	brne	.-14     	; 0x391a <eepromLoadPattern+0x1b8>
    3928:	d7 01       	movw	r26, r14
    392a:	a8 59       	subi	r26, 0x98	; 152
    392c:	bf 4f       	sbci	r27, 0xFF	; 255
    392e:	9e 01       	movw	r18, r28
    3930:	27 58       	subi	r18, 0x87	; 135
    3932:	3f 4f       	sbci	r19, 0xFF	; 255
    3934:	fa 01       	movw	r30, r20
    3936:	81 91       	ld	r24, Z+
    3938:	af 01       	movw	r20, r30
    393a:	8d 93       	st	X+, r24
    393c:	e2 17       	cp	r30, r18
    393e:	f3 07       	cpc	r31, r19
    3940:	c9 f7       	brne	.-14     	; 0x3934 <eepromLoadPattern+0x1d2>
    3942:	f7 01       	movw	r30, r14
    3944:	e8 53       	subi	r30, 0x38	; 56
    3946:	ff 4f       	sbci	r31, 0xFF	; 255
    3948:	eb 96       	adiw	r28, 0x3b	; 59
    394a:	8f ad       	ldd	r24, Y+63	; 0x3f
    394c:	eb 97       	sbiw	r28, 0x3b	; 59
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	98 2f       	mov	r25, r24
    3952:	88 27       	eor	r24, r24
    3954:	ec 96       	adiw	r28, 0x3c	; 60
    3956:	2f ad       	ldd	r18, Y+63	; 0x3f
    3958:	ec 97       	sbiw	r28, 0x3c	; 60
    395a:	82 2b       	or	r24, r18
    395c:	91 83       	std	Z+1, r25	; 0x01
    395e:	80 83       	st	Z, r24
    3960:	ed 96       	adiw	r28, 0x3d	; 61
    3962:	8f ad       	ldd	r24, Y+63	; 0x3f
    3964:	ed 97       	sbiw	r28, 0x3d	; 61
    3966:	32 96       	adiw	r30, 0x02	; 2
    3968:	80 83       	st	Z, r24
    396a:	ae 01       	movw	r20, r28
    396c:	4f 57       	subi	r20, 0x7F	; 127
    396e:	5f 4f       	sbci	r21, 0xFF	; 255
    3970:	c7 01       	movw	r24, r14
    3972:	88 58       	subi	r24, 0x88	; 136
    3974:	9f 4f       	sbci	r25, 0xFF	; 255
    3976:	fe 01       	movw	r30, r28
    3978:	ef 56       	subi	r30, 0x6F	; 111
    397a:	ff 4f       	sbci	r31, 0xFF	; 255
    397c:	da 01       	movw	r26, r20
    397e:	2d 91       	ld	r18, X+
    3980:	ad 01       	movw	r20, r26
    3982:	dc 01       	movw	r26, r24
    3984:	2d 93       	st	X+, r18
    3986:	cd 01       	movw	r24, r26
    3988:	e4 17       	cp	r30, r20
    398a:	f5 07       	cpc	r31, r21
    398c:	b9 f7       	brne	.-18     	; 0x397c <eepromLoadPattern+0x21a>
    398e:	c7 01       	movw	r24, r14
    3990:	88 57       	subi	r24, 0x78	; 120
    3992:	9f 4f       	sbci	r25, 0xFF	; 255
    3994:	ae 01       	movw	r20, r28
    3996:	4f 55       	subi	r20, 0x5F	; 95
    3998:	5f 4f       	sbci	r21, 0xFF	; 255
    399a:	21 91       	ld	r18, Z+
    399c:	dc 01       	movw	r26, r24
    399e:	2d 93       	st	X+, r18
    39a0:	cd 01       	movw	r24, r26
    39a2:	4e 17       	cp	r20, r30
    39a4:	5f 07       	cpc	r21, r31
    39a6:	c9 f7       	brne	.-14     	; 0x399a <eepromLoadPattern+0x238>
    39a8:	87 01       	movw	r16, r14
    39aa:	08 56       	subi	r16, 0x68	; 104
    39ac:	1f 4f       	sbci	r17, 0xFF	; 255
    39ae:	4e 01       	movw	r8, r28
    39b0:	b1 eb       	ldi	r27, 0xB1	; 177
    39b2:	8b 0e       	add	r8, r27
    39b4:	91 1c       	adc	r9, r1
    39b6:	f8 01       	movw	r30, r16
    39b8:	da 01       	movw	r26, r20
    39ba:	8d 91       	ld	r24, X+
    39bc:	ad 01       	movw	r20, r26
    39be:	81 93       	st	Z+, r24
    39c0:	8a 16       	cp	r8, r26
    39c2:	9b 06       	cpc	r9, r27
    39c4:	c9 f7       	brne	.-14     	; 0x39b8 <eepromLoadPattern+0x256>
    39c6:	6e 01       	movw	r12, r28
    39c8:	b1 ec       	ldi	r27, 0xC1	; 193
    39ca:	cb 0e       	add	r12, r27
    39cc:	d1 1c       	adc	r13, r1
    39ce:	f4 01       	movw	r30, r8
    39d0:	81 91       	ld	r24, Z+
    39d2:	4f 01       	movw	r8, r30
    39d4:	f8 01       	movw	r30, r16
    39d6:	80 8b       	std	Z+16, r24	; 0x10
    39d8:	d5 01       	movw	r26, r10
    39da:	2d 91       	ld	r18, X+
    39dc:	5d 01       	movw	r10, r26
    39de:	1f 96       	adiw	r26, 0x0f	; 15
    39e0:	4c 91       	ld	r20, X
    39e2:	60 81       	ld	r22, Z
    39e4:	0f 5f       	subi	r16, 0xFF	; 255
    39e6:	1f 4f       	sbci	r17, 0xFF	; 255
    39e8:	1f da       	rcall	.-3010   	; 0x2e28 <setTrackVolume>
    39ea:	c8 14       	cp	r12, r8
    39ec:	d9 04       	cpc	r13, r9
    39ee:	79 f7       	brne	.-34     	; 0x39ce <eepromLoadPattern+0x26c>
    39f0:	97 01       	movw	r18, r14
    39f2:	28 54       	subi	r18, 0x48	; 72
    39f4:	3f 4f       	sbci	r19, 0xFF	; 255
    39f6:	de 01       	movw	r26, r28
    39f8:	af 52       	subi	r26, 0x2F	; 47
    39fa:	bf 4f       	sbci	r27, 0xFF	; 255
    39fc:	f6 01       	movw	r30, r12
    39fe:	81 91       	ld	r24, Z+
    3a00:	6f 01       	movw	r12, r30
    3a02:	f9 01       	movw	r30, r18
    3a04:	81 93       	st	Z+, r24
    3a06:	9f 01       	movw	r18, r30
    3a08:	ca 16       	cp	r12, r26
    3a0a:	db 06       	cpc	r13, r27
    3a0c:	b9 f7       	brne	.-18     	; 0x39fc <eepromLoadPattern+0x29a>
    3a0e:	c7 01       	movw	r24, r14
    3a10:	85 53       	subi	r24, 0x35	; 53
    3a12:	9f 4f       	sbci	r25, 0xFF	; 255
    3a14:	ae 01       	movw	r20, r28
    3a16:	4f 51       	subi	r20, 0x1F	; 31
    3a18:	5f 4f       	sbci	r21, 0xFF	; 255
    3a1a:	2d 91       	ld	r18, X+
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	21 93       	st	Z+, r18
    3a20:	cf 01       	movw	r24, r30
    3a22:	4a 17       	cp	r20, r26
    3a24:	5b 07       	cpc	r21, r27
    3a26:	c9 f7       	brne	.-14     	; 0x3a1a <eepromLoadPattern+0x2b8>
    3a28:	c7 01       	movw	r24, r14
    3a2a:	85 52       	subi	r24, 0x25	; 37
    3a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a2e:	be 01       	movw	r22, r28
    3a30:	6f 50       	subi	r22, 0x0F	; 15
    3a32:	7f 4f       	sbci	r23, 0xFF	; 255
    3a34:	da 01       	movw	r26, r20
    3a36:	2d 91       	ld	r18, X+
    3a38:	ad 01       	movw	r20, r26
    3a3a:	fc 01       	movw	r30, r24
    3a3c:	21 93       	st	Z+, r18
    3a3e:	cf 01       	movw	r24, r30
    3a40:	a6 17       	cp	r26, r22
    3a42:	b7 07       	cpc	r27, r23
    3a44:	b9 f7       	brne	.-18     	; 0x3a34 <eepromLoadPattern+0x2d2>
    3a46:	c7 01       	movw	r24, r14
    3a48:	85 51       	subi	r24, 0x15	; 21
    3a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4c:	fe 01       	movw	r30, r28
    3a4e:	ef 5f       	subi	r30, 0xFF	; 255
    3a50:	fe 4f       	sbci	r31, 0xFE	; 254
    3a52:	db 01       	movw	r26, r22
    3a54:	2d 91       	ld	r18, X+
    3a56:	bd 01       	movw	r22, r26
    3a58:	dc 01       	movw	r26, r24
    3a5a:	2d 93       	st	X+, r18
    3a5c:	cd 01       	movw	r24, r26
    3a5e:	e6 17       	cp	r30, r22
    3a60:	f7 07       	cpc	r31, r23
    3a62:	b9 f7       	brne	.-18     	; 0x3a52 <eepromLoadPattern+0x2f0>
    3a64:	d7 01       	movw	r26, r14
    3a66:	a5 50       	subi	r26, 0x05	; 5
    3a68:	bf 4f       	sbci	r27, 0xFF	; 255
    3a6a:	ae 01       	movw	r20, r28
    3a6c:	4f 57       	subi	r20, 0x7F	; 127
    3a6e:	5e 4f       	sbci	r21, 0xFE	; 254
    3a70:	80 81       	ld	r24, Z
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	98 2f       	mov	r25, r24
    3a76:	88 27       	eor	r24, r24
    3a78:	21 81       	ldd	r18, Z+1	; 0x01
    3a7a:	82 2b       	or	r24, r18
    3a7c:	8d 93       	st	X+, r24
    3a7e:	9d 93       	st	X+, r25
    3a80:	32 96       	adiw	r30, 0x02	; 2
    3a82:	4e 17       	cp	r20, r30
    3a84:	5f 07       	cpc	r21, r31
    3a86:	a1 f7       	brne	.-24     	; 0x3a70 <eepromLoadPattern+0x30e>
    3a88:	0a c0       	rjmp	.+20     	; 0x3a9e <eepromLoadPattern+0x33c>
    3a8a:	fe 01       	movw	r30, r28
    3a8c:	31 96       	adiw	r30, 0x01	; 1
    3a8e:	5f 01       	movw	r10, r30
    3a90:	6e 01       	movw	r12, r28
    3a92:	f0 e8       	ldi	r31, 0x80	; 128
    3a94:	cf 1a       	sub	r12, r31
    3a96:	fe ef       	ldi	r31, 0xFE	; 254
    3a98:	df 0a       	sbc	r13, r31
    3a9a:	85 01       	movw	r16, r10
    3a9c:	c0 ce       	rjmp	.-640    	; 0x381e <eepromLoadPattern+0xbc>
    3a9e:	cc 56       	subi	r28, 0x6C	; 108
    3aa0:	de 4f       	sbci	r29, 0xFE	; 254
    3aa2:	0f b6       	in	r0, 0x3f	; 63
    3aa4:	f8 94       	cli
    3aa6:	de bf       	out	0x3e, r29	; 62
    3aa8:	0f be       	out	0x3f, r0	; 63
    3aaa:	cd bf       	out	0x3d, r28	; 61
    3aac:	df 91       	pop	r29
    3aae:	cf 91       	pop	r28
    3ab0:	1f 91       	pop	r17
    3ab2:	0f 91       	pop	r16
    3ab4:	ff 90       	pop	r15
    3ab6:	ef 90       	pop	r14
    3ab8:	df 90       	pop	r13
    3aba:	cf 90       	pop	r12
    3abc:	bf 90       	pop	r11
    3abe:	af 90       	pop	r10
    3ac0:	9f 90       	pop	r9
    3ac2:	8f 90       	pop	r8
    3ac4:	08 95       	ret

00003ac6 <factoryResetEeprom>:
    3ac6:	ff 92       	push	r15
    3ac8:	0f 93       	push	r16
    3aca:	1f 93       	push	r17
    3acc:	cf 93       	push	r28
    3ace:	df 93       	push	r29
    3ad0:	cd b7       	in	r28, 0x3d	; 61
    3ad2:	de b7       	in	r29, 0x3e	; 62
    3ad4:	65 97       	sbiw	r28, 0x15	; 21
    3ad6:	0f b6       	in	r0, 0x3f	; 63
    3ad8:	f8 94       	cli
    3ada:	de bf       	out	0x3e, r29	; 62
    3adc:	0f be       	out	0x3f, r0	; 63
    3ade:	cd bf       	out	0x3d, r28	; 61
    3ae0:	85 e1       	ldi	r24, 0x15	; 21
    3ae2:	e1 ed       	ldi	r30, 0xD1	; 209
    3ae4:	f3 e0       	ldi	r31, 0x03	; 3
    3ae6:	de 01       	movw	r26, r28
    3ae8:	11 96       	adiw	r26, 0x01	; 1
    3aea:	01 90       	ld	r0, Z+
    3aec:	0d 92       	st	X+, r0
    3aee:	8a 95       	dec	r24
    3af0:	e1 f7       	brne	.-8      	; 0x3aea <factoryResetEeprom+0x24>
    3af2:	10 e0       	ldi	r17, 0x00	; 0
    3af4:	0f 2e       	mov	r0, r31
    3af6:	ff e4       	ldi	r31, 0x4F	; 79
    3af8:	ff 2e       	mov	r15, r31
    3afa:	f0 2d       	mov	r31, r0
    3afc:	0b ed       	ldi	r16, 0xDB	; 219
    3afe:	1f 93       	push	r17
    3b00:	8d b7       	in	r24, 0x3d	; 61
    3b02:	9e b7       	in	r25, 0x3e	; 62
    3b04:	8b 57       	subi	r24, 0x7B	; 123
    3b06:	91 40       	sbci	r25, 0x01	; 1
    3b08:	0f b6       	in	r0, 0x3f	; 63
    3b0a:	f8 94       	cli
    3b0c:	9e bf       	out	0x3e, r25	; 62
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	8d bf       	out	0x3d, r24	; 61
    3b12:	ad b7       	in	r26, 0x3d	; 61
    3b14:	be b7       	in	r27, 0x3e	; 62
    3b16:	11 96       	adiw	r26, 0x01	; 1
    3b18:	8b e7       	ldi	r24, 0x7B	; 123
    3b1a:	91 e0       	ldi	r25, 0x01	; 1
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	7e 96       	adiw	r30, 0x1e	; 30
    3b20:	01 90       	ld	r0, Z+
    3b22:	0d 92       	st	X+, r0
    3b24:	01 97       	sbiw	r24, 0x01	; 1
    3b26:	e1 f7       	brne	.-8      	; 0x3b20 <factoryResetEeprom+0x5a>
    3b28:	2f dc       	rcall	.-1954   	; 0x3388 <eepromSavePattern>
    3b2a:	8f e1       	ldi	r24, 0x1F	; 31
    3b2c:	9e e4       	ldi	r25, 0x4E	; 78
    3b2e:	01 97       	sbiw	r24, 0x01	; 1
    3b30:	f1 f7       	brne	.-4      	; 0x3b2e <factoryResetEeprom+0x68>
    3b32:	00 c0       	rjmp	.+0      	; 0x3b34 <factoryResetEeprom+0x6e>
    3b34:	00 00       	nop
    3b36:	1f 9d       	mul	r17, r15
    3b38:	81 2d       	mov	r24, r1
    3b3a:	11 24       	eor	r1, r1
    3b3c:	86 95       	lsr	r24
    3b3e:	86 95       	lsr	r24
    3b40:	e1 e0       	ldi	r30, 0x01	; 1
    3b42:	f0 e0       	ldi	r31, 0x00	; 0
    3b44:	ec 0f       	add	r30, r28
    3b46:	fd 1f       	adc	r31, r29
    3b48:	e8 0f       	add	r30, r24
    3b4a:	f1 1d       	adc	r31, r1
    3b4c:	00 83       	st	Z, r16
    3b4e:	0f b6       	in	r0, 0x3f	; 63
    3b50:	f8 94       	cli
    3b52:	de bf       	out	0x3e, r29	; 62
    3b54:	0f be       	out	0x3f, r0	; 63
    3b56:	cd bf       	out	0x3d, r28	; 61
    3b58:	63 e0       	ldi	r22, 0x03	; 3
    3b5a:	70 e0       	ldi	r23, 0x00	; 0
    3b5c:	ce 01       	movw	r24, r28
    3b5e:	01 96       	adiw	r24, 0x01	; 1
    3b60:	0e 94 97 13 	call	0x272e	; 0x272e <outputS>
    3b64:	1f 5f       	subi	r17, 0xFF	; 255
    3b66:	1f 3f       	cpi	r17, 0xFF	; 255
    3b68:	51 f6       	brne	.-108    	; 0x3afe <factoryResetEeprom+0x38>
    3b6a:	65 96       	adiw	r28, 0x15	; 21
    3b6c:	0f b6       	in	r0, 0x3f	; 63
    3b6e:	f8 94       	cli
    3b70:	de bf       	out	0x3e, r29	; 62
    3b72:	0f be       	out	0x3f, r0	; 63
    3b74:	cd bf       	out	0x3d, r28	; 61
    3b76:	df 91       	pop	r29
    3b78:	cf 91       	pop	r28
    3b7a:	1f 91       	pop	r17
    3b7c:	0f 91       	pop	r16
    3b7e:	ff 90       	pop	r15
    3b80:	08 95       	ret

00003b82 <globalWrite>:

//this happens when save button is pressed on global menu. 
void globalWrite(Globals *currentGlobals)
{
    3b82:	cf 93       	push	r28
    3b84:	df 93       	push	r29
    3b86:	ec 01       	movw	r28, r24
	eeprom_write_byte(0,currentGlobals->midiChannel); //this may be wrong, but it does get rid of the warning. 
    3b88:	68 89       	ldd	r22, Y+16	; 0x10
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	46 d2       	rcall	.+1164   	; 0x401c <eeprom_write_byte>
	eeprom_write_block(currentGlobals->midiTrackNote,1,16);
    3b90:	40 e1       	ldi	r20, 0x10	; 16
    3b92:	50 e0       	ldi	r21, 0x00	; 0
    3b94:	61 e0       	ldi	r22, 0x01	; 1
    3b96:	70 e0       	ldi	r23, 0x00	; 0
    3b98:	ce 01       	movw	r24, r28
    3b9a:	41 96       	adiw	r24, 0x11	; 17
    3b9c:	36 d2       	rcall	.+1132   	; 0x400a <eeprom_write_block>
}
    3b9e:	df 91       	pop	r29
    3ba0:	cf 91       	pop	r28
    3ba2:	08 95       	ret

00003ba4 <globalLoad>:
//This happens at startup only, in function "initGlobals"

void globalLoad(Globals *currentGlobals, uint8_t factoryReset)
{
    3ba4:	cf 93       	push	r28
    3ba6:	df 93       	push	r29
	//we need to load all of the global midi settings here. 
	//we can also check the factory reset bit here. 
	//if the program has not gone through the initial state, and had the internal eeprom formatted, then this will return garbage. 
	if(factoryReset==0)
    3ba8:	61 11       	cpse	r22, r1
    3baa:	0c c0       	rjmp	.+24     	; 0x3bc4 <globalLoad+0x20>
    3bac:	ec 01       	movw	r28, r24
	{
		currentGlobals->midiChannel = eeprom_read_byte(0);
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	23 d2       	rcall	.+1094   	; 0x3ffa <eeprom_read_byte>
    3bb4:	88 8b       	std	Y+16, r24	; 0x10
		eeprom_read_block(currentGlobals->midiTrackNote,1,16);
    3bb6:	40 e1       	ldi	r20, 0x10	; 16
    3bb8:	50 e0       	ldi	r21, 0x00	; 0
    3bba:	61 e0       	ldi	r22, 0x01	; 1
    3bbc:	70 e0       	ldi	r23, 0x00	; 0
    3bbe:	ce 01       	movw	r24, r28
    3bc0:	41 96       	adiw	r24, 0x11	; 17
    3bc2:	0b d2       	rcall	.+1046   	; 0x3fda <eeprom_read_block>
	}
}
    3bc4:	df 91       	pop	r29
    3bc6:	cf 91       	pop	r28
    3bc8:	08 95       	ret

00003bca <__subsf3>:
    3bca:	50 58       	subi	r21, 0x80	; 128

00003bcc <__addsf3>:
    3bcc:	bb 27       	eor	r27, r27
    3bce:	aa 27       	eor	r26, r26
    3bd0:	0e d0       	rcall	.+28     	; 0x3bee <__addsf3x>
    3bd2:	4d c1       	rjmp	.+666    	; 0x3e6e <__fp_round>
    3bd4:	3e d1       	rcall	.+636    	; 0x3e52 <__fp_pscA>
    3bd6:	30 f0       	brcs	.+12     	; 0x3be4 <__addsf3+0x18>
    3bd8:	43 d1       	rcall	.+646    	; 0x3e60 <__fp_pscB>
    3bda:	20 f0       	brcs	.+8      	; 0x3be4 <__addsf3+0x18>
    3bdc:	31 f4       	brne	.+12     	; 0x3bea <__addsf3+0x1e>
    3bde:	9f 3f       	cpi	r25, 0xFF	; 255
    3be0:	11 f4       	brne	.+4      	; 0x3be6 <__addsf3+0x1a>
    3be2:	1e f4       	brtc	.+6      	; 0x3bea <__addsf3+0x1e>
    3be4:	33 c1       	rjmp	.+614    	; 0x3e4c <__fp_nan>
    3be6:	0e f4       	brtc	.+2      	; 0x3bea <__addsf3+0x1e>
    3be8:	e0 95       	com	r30
    3bea:	e7 fb       	bst	r30, 7
    3bec:	29 c1       	rjmp	.+594    	; 0x3e40 <__fp_inf>

00003bee <__addsf3x>:
    3bee:	e9 2f       	mov	r30, r25
    3bf0:	4f d1       	rcall	.+670    	; 0x3e90 <__fp_split3>
    3bf2:	80 f3       	brcs	.-32     	; 0x3bd4 <__addsf3+0x8>
    3bf4:	ba 17       	cp	r27, r26
    3bf6:	62 07       	cpc	r22, r18
    3bf8:	73 07       	cpc	r23, r19
    3bfa:	84 07       	cpc	r24, r20
    3bfc:	95 07       	cpc	r25, r21
    3bfe:	18 f0       	brcs	.+6      	; 0x3c06 <__addsf3x+0x18>
    3c00:	71 f4       	brne	.+28     	; 0x3c1e <__addsf3x+0x30>
    3c02:	9e f5       	brtc	.+102    	; 0x3c6a <__addsf3x+0x7c>
    3c04:	67 c1       	rjmp	.+718    	; 0x3ed4 <__fp_zero>
    3c06:	0e f4       	brtc	.+2      	; 0x3c0a <__addsf3x+0x1c>
    3c08:	e0 95       	com	r30
    3c0a:	0b 2e       	mov	r0, r27
    3c0c:	ba 2f       	mov	r27, r26
    3c0e:	a0 2d       	mov	r26, r0
    3c10:	0b 01       	movw	r0, r22
    3c12:	b9 01       	movw	r22, r18
    3c14:	90 01       	movw	r18, r0
    3c16:	0c 01       	movw	r0, r24
    3c18:	ca 01       	movw	r24, r20
    3c1a:	a0 01       	movw	r20, r0
    3c1c:	11 24       	eor	r1, r1
    3c1e:	ff 27       	eor	r31, r31
    3c20:	59 1b       	sub	r21, r25
    3c22:	99 f0       	breq	.+38     	; 0x3c4a <__addsf3x+0x5c>
    3c24:	59 3f       	cpi	r21, 0xF9	; 249
    3c26:	50 f4       	brcc	.+20     	; 0x3c3c <__addsf3x+0x4e>
    3c28:	50 3e       	cpi	r21, 0xE0	; 224
    3c2a:	68 f1       	brcs	.+90     	; 0x3c86 <__addsf3x+0x98>
    3c2c:	1a 16       	cp	r1, r26
    3c2e:	f0 40       	sbci	r31, 0x00	; 0
    3c30:	a2 2f       	mov	r26, r18
    3c32:	23 2f       	mov	r18, r19
    3c34:	34 2f       	mov	r19, r20
    3c36:	44 27       	eor	r20, r20
    3c38:	58 5f       	subi	r21, 0xF8	; 248
    3c3a:	f3 cf       	rjmp	.-26     	; 0x3c22 <__addsf3x+0x34>
    3c3c:	46 95       	lsr	r20
    3c3e:	37 95       	ror	r19
    3c40:	27 95       	ror	r18
    3c42:	a7 95       	ror	r26
    3c44:	f0 40       	sbci	r31, 0x00	; 0
    3c46:	53 95       	inc	r21
    3c48:	c9 f7       	brne	.-14     	; 0x3c3c <__addsf3x+0x4e>
    3c4a:	7e f4       	brtc	.+30     	; 0x3c6a <__addsf3x+0x7c>
    3c4c:	1f 16       	cp	r1, r31
    3c4e:	ba 0b       	sbc	r27, r26
    3c50:	62 0b       	sbc	r22, r18
    3c52:	73 0b       	sbc	r23, r19
    3c54:	84 0b       	sbc	r24, r20
    3c56:	ba f0       	brmi	.+46     	; 0x3c86 <__addsf3x+0x98>
    3c58:	91 50       	subi	r25, 0x01	; 1
    3c5a:	a1 f0       	breq	.+40     	; 0x3c84 <__addsf3x+0x96>
    3c5c:	ff 0f       	add	r31, r31
    3c5e:	bb 1f       	adc	r27, r27
    3c60:	66 1f       	adc	r22, r22
    3c62:	77 1f       	adc	r23, r23
    3c64:	88 1f       	adc	r24, r24
    3c66:	c2 f7       	brpl	.-16     	; 0x3c58 <__addsf3x+0x6a>
    3c68:	0e c0       	rjmp	.+28     	; 0x3c86 <__addsf3x+0x98>
    3c6a:	ba 0f       	add	r27, r26
    3c6c:	62 1f       	adc	r22, r18
    3c6e:	73 1f       	adc	r23, r19
    3c70:	84 1f       	adc	r24, r20
    3c72:	48 f4       	brcc	.+18     	; 0x3c86 <__addsf3x+0x98>
    3c74:	87 95       	ror	r24
    3c76:	77 95       	ror	r23
    3c78:	67 95       	ror	r22
    3c7a:	b7 95       	ror	r27
    3c7c:	f7 95       	ror	r31
    3c7e:	9e 3f       	cpi	r25, 0xFE	; 254
    3c80:	08 f0       	brcs	.+2      	; 0x3c84 <__addsf3x+0x96>
    3c82:	b3 cf       	rjmp	.-154    	; 0x3bea <__addsf3+0x1e>
    3c84:	93 95       	inc	r25
    3c86:	88 0f       	add	r24, r24
    3c88:	08 f0       	brcs	.+2      	; 0x3c8c <__addsf3x+0x9e>
    3c8a:	99 27       	eor	r25, r25
    3c8c:	ee 0f       	add	r30, r30
    3c8e:	97 95       	ror	r25
    3c90:	87 95       	ror	r24
    3c92:	08 95       	ret

00003c94 <__divsf3>:
    3c94:	0c d0       	rcall	.+24     	; 0x3cae <__divsf3x>
    3c96:	eb c0       	rjmp	.+470    	; 0x3e6e <__fp_round>
    3c98:	e3 d0       	rcall	.+454    	; 0x3e60 <__fp_pscB>
    3c9a:	40 f0       	brcs	.+16     	; 0x3cac <__divsf3+0x18>
    3c9c:	da d0       	rcall	.+436    	; 0x3e52 <__fp_pscA>
    3c9e:	30 f0       	brcs	.+12     	; 0x3cac <__divsf3+0x18>
    3ca0:	21 f4       	brne	.+8      	; 0x3caa <__divsf3+0x16>
    3ca2:	5f 3f       	cpi	r21, 0xFF	; 255
    3ca4:	19 f0       	breq	.+6      	; 0x3cac <__divsf3+0x18>
    3ca6:	cc c0       	rjmp	.+408    	; 0x3e40 <__fp_inf>
    3ca8:	51 11       	cpse	r21, r1
    3caa:	15 c1       	rjmp	.+554    	; 0x3ed6 <__fp_szero>
    3cac:	cf c0       	rjmp	.+414    	; 0x3e4c <__fp_nan>

00003cae <__divsf3x>:
    3cae:	f0 d0       	rcall	.+480    	; 0x3e90 <__fp_split3>
    3cb0:	98 f3       	brcs	.-26     	; 0x3c98 <__divsf3+0x4>

00003cb2 <__divsf3_pse>:
    3cb2:	99 23       	and	r25, r25
    3cb4:	c9 f3       	breq	.-14     	; 0x3ca8 <__divsf3+0x14>
    3cb6:	55 23       	and	r21, r21
    3cb8:	b1 f3       	breq	.-20     	; 0x3ca6 <__divsf3+0x12>
    3cba:	95 1b       	sub	r25, r21
    3cbc:	55 0b       	sbc	r21, r21
    3cbe:	bb 27       	eor	r27, r27
    3cc0:	aa 27       	eor	r26, r26
    3cc2:	62 17       	cp	r22, r18
    3cc4:	73 07       	cpc	r23, r19
    3cc6:	84 07       	cpc	r24, r20
    3cc8:	38 f0       	brcs	.+14     	; 0x3cd8 <__divsf3_pse+0x26>
    3cca:	9f 5f       	subi	r25, 0xFF	; 255
    3ccc:	5f 4f       	sbci	r21, 0xFF	; 255
    3cce:	22 0f       	add	r18, r18
    3cd0:	33 1f       	adc	r19, r19
    3cd2:	44 1f       	adc	r20, r20
    3cd4:	aa 1f       	adc	r26, r26
    3cd6:	a9 f3       	breq	.-22     	; 0x3cc2 <__divsf3_pse+0x10>
    3cd8:	33 d0       	rcall	.+102    	; 0x3d40 <__divsf3_pse+0x8e>
    3cda:	0e 2e       	mov	r0, r30
    3cdc:	3a f0       	brmi	.+14     	; 0x3cec <__divsf3_pse+0x3a>
    3cde:	e0 e8       	ldi	r30, 0x80	; 128
    3ce0:	30 d0       	rcall	.+96     	; 0x3d42 <__divsf3_pse+0x90>
    3ce2:	91 50       	subi	r25, 0x01	; 1
    3ce4:	50 40       	sbci	r21, 0x00	; 0
    3ce6:	e6 95       	lsr	r30
    3ce8:	00 1c       	adc	r0, r0
    3cea:	ca f7       	brpl	.-14     	; 0x3cde <__divsf3_pse+0x2c>
    3cec:	29 d0       	rcall	.+82     	; 0x3d40 <__divsf3_pse+0x8e>
    3cee:	fe 2f       	mov	r31, r30
    3cf0:	27 d0       	rcall	.+78     	; 0x3d40 <__divsf3_pse+0x8e>
    3cf2:	66 0f       	add	r22, r22
    3cf4:	77 1f       	adc	r23, r23
    3cf6:	88 1f       	adc	r24, r24
    3cf8:	bb 1f       	adc	r27, r27
    3cfa:	26 17       	cp	r18, r22
    3cfc:	37 07       	cpc	r19, r23
    3cfe:	48 07       	cpc	r20, r24
    3d00:	ab 07       	cpc	r26, r27
    3d02:	b0 e8       	ldi	r27, 0x80	; 128
    3d04:	09 f0       	breq	.+2      	; 0x3d08 <__divsf3_pse+0x56>
    3d06:	bb 0b       	sbc	r27, r27
    3d08:	80 2d       	mov	r24, r0
    3d0a:	bf 01       	movw	r22, r30
    3d0c:	ff 27       	eor	r31, r31
    3d0e:	93 58       	subi	r25, 0x83	; 131
    3d10:	5f 4f       	sbci	r21, 0xFF	; 255
    3d12:	2a f0       	brmi	.+10     	; 0x3d1e <__divsf3_pse+0x6c>
    3d14:	9e 3f       	cpi	r25, 0xFE	; 254
    3d16:	51 05       	cpc	r21, r1
    3d18:	68 f0       	brcs	.+26     	; 0x3d34 <__divsf3_pse+0x82>
    3d1a:	92 c0       	rjmp	.+292    	; 0x3e40 <__fp_inf>
    3d1c:	dc c0       	rjmp	.+440    	; 0x3ed6 <__fp_szero>
    3d1e:	5f 3f       	cpi	r21, 0xFF	; 255
    3d20:	ec f3       	brlt	.-6      	; 0x3d1c <__divsf3_pse+0x6a>
    3d22:	98 3e       	cpi	r25, 0xE8	; 232
    3d24:	dc f3       	brlt	.-10     	; 0x3d1c <__divsf3_pse+0x6a>
    3d26:	86 95       	lsr	r24
    3d28:	77 95       	ror	r23
    3d2a:	67 95       	ror	r22
    3d2c:	b7 95       	ror	r27
    3d2e:	f7 95       	ror	r31
    3d30:	9f 5f       	subi	r25, 0xFF	; 255
    3d32:	c9 f7       	brne	.-14     	; 0x3d26 <__divsf3_pse+0x74>
    3d34:	88 0f       	add	r24, r24
    3d36:	91 1d       	adc	r25, r1
    3d38:	96 95       	lsr	r25
    3d3a:	87 95       	ror	r24
    3d3c:	97 f9       	bld	r25, 7
    3d3e:	08 95       	ret
    3d40:	e1 e0       	ldi	r30, 0x01	; 1
    3d42:	66 0f       	add	r22, r22
    3d44:	77 1f       	adc	r23, r23
    3d46:	88 1f       	adc	r24, r24
    3d48:	bb 1f       	adc	r27, r27
    3d4a:	62 17       	cp	r22, r18
    3d4c:	73 07       	cpc	r23, r19
    3d4e:	84 07       	cpc	r24, r20
    3d50:	ba 07       	cpc	r27, r26
    3d52:	20 f0       	brcs	.+8      	; 0x3d5c <__divsf3_pse+0xaa>
    3d54:	62 1b       	sub	r22, r18
    3d56:	73 0b       	sbc	r23, r19
    3d58:	84 0b       	sbc	r24, r20
    3d5a:	ba 0b       	sbc	r27, r26
    3d5c:	ee 1f       	adc	r30, r30
    3d5e:	88 f7       	brcc	.-30     	; 0x3d42 <__divsf3_pse+0x90>
    3d60:	e0 95       	com	r30
    3d62:	08 95       	ret

00003d64 <__fixsfsi>:
    3d64:	04 d0       	rcall	.+8      	; 0x3d6e <__fixunssfsi>
    3d66:	68 94       	set
    3d68:	b1 11       	cpse	r27, r1
    3d6a:	b5 c0       	rjmp	.+362    	; 0x3ed6 <__fp_szero>
    3d6c:	08 95       	ret

00003d6e <__fixunssfsi>:
    3d6e:	98 d0       	rcall	.+304    	; 0x3ea0 <__fp_splitA>
    3d70:	88 f0       	brcs	.+34     	; 0x3d94 <__fixunssfsi+0x26>
    3d72:	9f 57       	subi	r25, 0x7F	; 127
    3d74:	90 f0       	brcs	.+36     	; 0x3d9a <__fixunssfsi+0x2c>
    3d76:	b9 2f       	mov	r27, r25
    3d78:	99 27       	eor	r25, r25
    3d7a:	b7 51       	subi	r27, 0x17	; 23
    3d7c:	a0 f0       	brcs	.+40     	; 0x3da6 <__fixunssfsi+0x38>
    3d7e:	d1 f0       	breq	.+52     	; 0x3db4 <__fixunssfsi+0x46>
    3d80:	66 0f       	add	r22, r22
    3d82:	77 1f       	adc	r23, r23
    3d84:	88 1f       	adc	r24, r24
    3d86:	99 1f       	adc	r25, r25
    3d88:	1a f0       	brmi	.+6      	; 0x3d90 <__fixunssfsi+0x22>
    3d8a:	ba 95       	dec	r27
    3d8c:	c9 f7       	brne	.-14     	; 0x3d80 <__fixunssfsi+0x12>
    3d8e:	12 c0       	rjmp	.+36     	; 0x3db4 <__fixunssfsi+0x46>
    3d90:	b1 30       	cpi	r27, 0x01	; 1
    3d92:	81 f0       	breq	.+32     	; 0x3db4 <__fixunssfsi+0x46>
    3d94:	9f d0       	rcall	.+318    	; 0x3ed4 <__fp_zero>
    3d96:	b1 e0       	ldi	r27, 0x01	; 1
    3d98:	08 95       	ret
    3d9a:	9c c0       	rjmp	.+312    	; 0x3ed4 <__fp_zero>
    3d9c:	67 2f       	mov	r22, r23
    3d9e:	78 2f       	mov	r23, r24
    3da0:	88 27       	eor	r24, r24
    3da2:	b8 5f       	subi	r27, 0xF8	; 248
    3da4:	39 f0       	breq	.+14     	; 0x3db4 <__fixunssfsi+0x46>
    3da6:	b9 3f       	cpi	r27, 0xF9	; 249
    3da8:	cc f3       	brlt	.-14     	; 0x3d9c <__fixunssfsi+0x2e>
    3daa:	86 95       	lsr	r24
    3dac:	77 95       	ror	r23
    3dae:	67 95       	ror	r22
    3db0:	b3 95       	inc	r27
    3db2:	d9 f7       	brne	.-10     	; 0x3daa <__fixunssfsi+0x3c>
    3db4:	3e f4       	brtc	.+14     	; 0x3dc4 <__fixunssfsi+0x56>
    3db6:	90 95       	com	r25
    3db8:	80 95       	com	r24
    3dba:	70 95       	com	r23
    3dbc:	61 95       	neg	r22
    3dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc0:	8f 4f       	sbci	r24, 0xFF	; 255
    3dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc4:	08 95       	ret

00003dc6 <__floatunsisf>:
    3dc6:	e8 94       	clt
    3dc8:	09 c0       	rjmp	.+18     	; 0x3ddc <__floatsisf+0x12>

00003dca <__floatsisf>:
    3dca:	97 fb       	bst	r25, 7
    3dcc:	3e f4       	brtc	.+14     	; 0x3ddc <__floatsisf+0x12>
    3dce:	90 95       	com	r25
    3dd0:	80 95       	com	r24
    3dd2:	70 95       	com	r23
    3dd4:	61 95       	neg	r22
    3dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd8:	8f 4f       	sbci	r24, 0xFF	; 255
    3dda:	9f 4f       	sbci	r25, 0xFF	; 255
    3ddc:	99 23       	and	r25, r25
    3dde:	a9 f0       	breq	.+42     	; 0x3e0a <__floatsisf+0x40>
    3de0:	f9 2f       	mov	r31, r25
    3de2:	96 e9       	ldi	r25, 0x96	; 150
    3de4:	bb 27       	eor	r27, r27
    3de6:	93 95       	inc	r25
    3de8:	f6 95       	lsr	r31
    3dea:	87 95       	ror	r24
    3dec:	77 95       	ror	r23
    3dee:	67 95       	ror	r22
    3df0:	b7 95       	ror	r27
    3df2:	f1 11       	cpse	r31, r1
    3df4:	f8 cf       	rjmp	.-16     	; 0x3de6 <__floatsisf+0x1c>
    3df6:	fa f4       	brpl	.+62     	; 0x3e36 <__floatsisf+0x6c>
    3df8:	bb 0f       	add	r27, r27
    3dfa:	11 f4       	brne	.+4      	; 0x3e00 <__floatsisf+0x36>
    3dfc:	60 ff       	sbrs	r22, 0
    3dfe:	1b c0       	rjmp	.+54     	; 0x3e36 <__floatsisf+0x6c>
    3e00:	6f 5f       	subi	r22, 0xFF	; 255
    3e02:	7f 4f       	sbci	r23, 0xFF	; 255
    3e04:	8f 4f       	sbci	r24, 0xFF	; 255
    3e06:	9f 4f       	sbci	r25, 0xFF	; 255
    3e08:	16 c0       	rjmp	.+44     	; 0x3e36 <__floatsisf+0x6c>
    3e0a:	88 23       	and	r24, r24
    3e0c:	11 f0       	breq	.+4      	; 0x3e12 <__floatsisf+0x48>
    3e0e:	96 e9       	ldi	r25, 0x96	; 150
    3e10:	11 c0       	rjmp	.+34     	; 0x3e34 <__floatsisf+0x6a>
    3e12:	77 23       	and	r23, r23
    3e14:	21 f0       	breq	.+8      	; 0x3e1e <__floatsisf+0x54>
    3e16:	9e e8       	ldi	r25, 0x8E	; 142
    3e18:	87 2f       	mov	r24, r23
    3e1a:	76 2f       	mov	r23, r22
    3e1c:	05 c0       	rjmp	.+10     	; 0x3e28 <__floatsisf+0x5e>
    3e1e:	66 23       	and	r22, r22
    3e20:	71 f0       	breq	.+28     	; 0x3e3e <__floatsisf+0x74>
    3e22:	96 e8       	ldi	r25, 0x86	; 134
    3e24:	86 2f       	mov	r24, r22
    3e26:	70 e0       	ldi	r23, 0x00	; 0
    3e28:	60 e0       	ldi	r22, 0x00	; 0
    3e2a:	2a f0       	brmi	.+10     	; 0x3e36 <__floatsisf+0x6c>
    3e2c:	9a 95       	dec	r25
    3e2e:	66 0f       	add	r22, r22
    3e30:	77 1f       	adc	r23, r23
    3e32:	88 1f       	adc	r24, r24
    3e34:	da f7       	brpl	.-10     	; 0x3e2c <__floatsisf+0x62>
    3e36:	88 0f       	add	r24, r24
    3e38:	96 95       	lsr	r25
    3e3a:	87 95       	ror	r24
    3e3c:	97 f9       	bld	r25, 7
    3e3e:	08 95       	ret

00003e40 <__fp_inf>:
    3e40:	97 f9       	bld	r25, 7
    3e42:	9f 67       	ori	r25, 0x7F	; 127
    3e44:	80 e8       	ldi	r24, 0x80	; 128
    3e46:	70 e0       	ldi	r23, 0x00	; 0
    3e48:	60 e0       	ldi	r22, 0x00	; 0
    3e4a:	08 95       	ret

00003e4c <__fp_nan>:
    3e4c:	9f ef       	ldi	r25, 0xFF	; 255
    3e4e:	80 ec       	ldi	r24, 0xC0	; 192
    3e50:	08 95       	ret

00003e52 <__fp_pscA>:
    3e52:	00 24       	eor	r0, r0
    3e54:	0a 94       	dec	r0
    3e56:	16 16       	cp	r1, r22
    3e58:	17 06       	cpc	r1, r23
    3e5a:	18 06       	cpc	r1, r24
    3e5c:	09 06       	cpc	r0, r25
    3e5e:	08 95       	ret

00003e60 <__fp_pscB>:
    3e60:	00 24       	eor	r0, r0
    3e62:	0a 94       	dec	r0
    3e64:	12 16       	cp	r1, r18
    3e66:	13 06       	cpc	r1, r19
    3e68:	14 06       	cpc	r1, r20
    3e6a:	05 06       	cpc	r0, r21
    3e6c:	08 95       	ret

00003e6e <__fp_round>:
    3e6e:	09 2e       	mov	r0, r25
    3e70:	03 94       	inc	r0
    3e72:	00 0c       	add	r0, r0
    3e74:	11 f4       	brne	.+4      	; 0x3e7a <__fp_round+0xc>
    3e76:	88 23       	and	r24, r24
    3e78:	52 f0       	brmi	.+20     	; 0x3e8e <__fp_round+0x20>
    3e7a:	bb 0f       	add	r27, r27
    3e7c:	40 f4       	brcc	.+16     	; 0x3e8e <__fp_round+0x20>
    3e7e:	bf 2b       	or	r27, r31
    3e80:	11 f4       	brne	.+4      	; 0x3e86 <__fp_round+0x18>
    3e82:	60 ff       	sbrs	r22, 0
    3e84:	04 c0       	rjmp	.+8      	; 0x3e8e <__fp_round+0x20>
    3e86:	6f 5f       	subi	r22, 0xFF	; 255
    3e88:	7f 4f       	sbci	r23, 0xFF	; 255
    3e8a:	8f 4f       	sbci	r24, 0xFF	; 255
    3e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e8e:	08 95       	ret

00003e90 <__fp_split3>:
    3e90:	57 fd       	sbrc	r21, 7
    3e92:	90 58       	subi	r25, 0x80	; 128
    3e94:	44 0f       	add	r20, r20
    3e96:	55 1f       	adc	r21, r21
    3e98:	59 f0       	breq	.+22     	; 0x3eb0 <__fp_splitA+0x10>
    3e9a:	5f 3f       	cpi	r21, 0xFF	; 255
    3e9c:	71 f0       	breq	.+28     	; 0x3eba <__fp_splitA+0x1a>
    3e9e:	47 95       	ror	r20

00003ea0 <__fp_splitA>:
    3ea0:	88 0f       	add	r24, r24
    3ea2:	97 fb       	bst	r25, 7
    3ea4:	99 1f       	adc	r25, r25
    3ea6:	61 f0       	breq	.+24     	; 0x3ec0 <__fp_splitA+0x20>
    3ea8:	9f 3f       	cpi	r25, 0xFF	; 255
    3eaa:	79 f0       	breq	.+30     	; 0x3eca <__fp_splitA+0x2a>
    3eac:	87 95       	ror	r24
    3eae:	08 95       	ret
    3eb0:	12 16       	cp	r1, r18
    3eb2:	13 06       	cpc	r1, r19
    3eb4:	14 06       	cpc	r1, r20
    3eb6:	55 1f       	adc	r21, r21
    3eb8:	f2 cf       	rjmp	.-28     	; 0x3e9e <__fp_split3+0xe>
    3eba:	46 95       	lsr	r20
    3ebc:	f1 df       	rcall	.-30     	; 0x3ea0 <__fp_splitA>
    3ebe:	08 c0       	rjmp	.+16     	; 0x3ed0 <__fp_splitA+0x30>
    3ec0:	16 16       	cp	r1, r22
    3ec2:	17 06       	cpc	r1, r23
    3ec4:	18 06       	cpc	r1, r24
    3ec6:	99 1f       	adc	r25, r25
    3ec8:	f1 cf       	rjmp	.-30     	; 0x3eac <__fp_splitA+0xc>
    3eca:	86 95       	lsr	r24
    3ecc:	71 05       	cpc	r23, r1
    3ece:	61 05       	cpc	r22, r1
    3ed0:	08 94       	sec
    3ed2:	08 95       	ret

00003ed4 <__fp_zero>:
    3ed4:	e8 94       	clt

00003ed6 <__fp_szero>:
    3ed6:	bb 27       	eor	r27, r27
    3ed8:	66 27       	eor	r22, r22
    3eda:	77 27       	eor	r23, r23
    3edc:	cb 01       	movw	r24, r22
    3ede:	97 f9       	bld	r25, 7
    3ee0:	08 95       	ret

00003ee2 <__divmodhi4>:
    3ee2:	97 fb       	bst	r25, 7
    3ee4:	07 2e       	mov	r0, r23
    3ee6:	16 f4       	brtc	.+4      	; 0x3eec <__divmodhi4+0xa>
    3ee8:	00 94       	com	r0
    3eea:	06 d0       	rcall	.+12     	; 0x3ef8 <__divmodhi4_neg1>
    3eec:	77 fd       	sbrc	r23, 7
    3eee:	08 d0       	rcall	.+16     	; 0x3f00 <__divmodhi4_neg2>
    3ef0:	60 d0       	rcall	.+192    	; 0x3fb2 <__udivmodhi4>
    3ef2:	07 fc       	sbrc	r0, 7
    3ef4:	05 d0       	rcall	.+10     	; 0x3f00 <__divmodhi4_neg2>
    3ef6:	3e f4       	brtc	.+14     	; 0x3f06 <__divmodhi4_exit>

00003ef8 <__divmodhi4_neg1>:
    3ef8:	90 95       	com	r25
    3efa:	81 95       	neg	r24
    3efc:	9f 4f       	sbci	r25, 0xFF	; 255
    3efe:	08 95       	ret

00003f00 <__divmodhi4_neg2>:
    3f00:	70 95       	com	r23
    3f02:	61 95       	neg	r22
    3f04:	7f 4f       	sbci	r23, 0xFF	; 255

00003f06 <__divmodhi4_exit>:
    3f06:	08 95       	ret

00003f08 <__udivmodsi4>:
    3f08:	a1 e2       	ldi	r26, 0x21	; 33
    3f0a:	1a 2e       	mov	r1, r26
    3f0c:	aa 1b       	sub	r26, r26
    3f0e:	bb 1b       	sub	r27, r27
    3f10:	fd 01       	movw	r30, r26
    3f12:	0d c0       	rjmp	.+26     	; 0x3f2e <__udivmodsi4_ep>

00003f14 <__udivmodsi4_loop>:
    3f14:	aa 1f       	adc	r26, r26
    3f16:	bb 1f       	adc	r27, r27
    3f18:	ee 1f       	adc	r30, r30
    3f1a:	ff 1f       	adc	r31, r31
    3f1c:	a2 17       	cp	r26, r18
    3f1e:	b3 07       	cpc	r27, r19
    3f20:	e4 07       	cpc	r30, r20
    3f22:	f5 07       	cpc	r31, r21
    3f24:	20 f0       	brcs	.+8      	; 0x3f2e <__udivmodsi4_ep>
    3f26:	a2 1b       	sub	r26, r18
    3f28:	b3 0b       	sbc	r27, r19
    3f2a:	e4 0b       	sbc	r30, r20
    3f2c:	f5 0b       	sbc	r31, r21

00003f2e <__udivmodsi4_ep>:
    3f2e:	66 1f       	adc	r22, r22
    3f30:	77 1f       	adc	r23, r23
    3f32:	88 1f       	adc	r24, r24
    3f34:	99 1f       	adc	r25, r25
    3f36:	1a 94       	dec	r1
    3f38:	69 f7       	brne	.-38     	; 0x3f14 <__udivmodsi4_loop>
    3f3a:	60 95       	com	r22
    3f3c:	70 95       	com	r23
    3f3e:	80 95       	com	r24
    3f40:	90 95       	com	r25
    3f42:	9b 01       	movw	r18, r22
    3f44:	ac 01       	movw	r20, r24
    3f46:	bd 01       	movw	r22, r26
    3f48:	cf 01       	movw	r24, r30
    3f4a:	08 95       	ret

00003f4c <__divmodsi4>:
    3f4c:	05 2e       	mov	r0, r21
    3f4e:	97 fb       	bst	r25, 7
    3f50:	16 f4       	brtc	.+4      	; 0x3f56 <__divmodsi4+0xa>
    3f52:	00 94       	com	r0
    3f54:	0f d0       	rcall	.+30     	; 0x3f74 <__negsi2>
    3f56:	57 fd       	sbrc	r21, 7
    3f58:	05 d0       	rcall	.+10     	; 0x3f64 <__divmodsi4_neg2>
    3f5a:	d6 df       	rcall	.-84     	; 0x3f08 <__udivmodsi4>
    3f5c:	07 fc       	sbrc	r0, 7
    3f5e:	02 d0       	rcall	.+4      	; 0x3f64 <__divmodsi4_neg2>
    3f60:	46 f4       	brtc	.+16     	; 0x3f72 <__divmodsi4_exit>
    3f62:	08 c0       	rjmp	.+16     	; 0x3f74 <__negsi2>

00003f64 <__divmodsi4_neg2>:
    3f64:	50 95       	com	r21
    3f66:	40 95       	com	r20
    3f68:	30 95       	com	r19
    3f6a:	21 95       	neg	r18
    3f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f6e:	4f 4f       	sbci	r20, 0xFF	; 255
    3f70:	5f 4f       	sbci	r21, 0xFF	; 255

00003f72 <__divmodsi4_exit>:
    3f72:	08 95       	ret

00003f74 <__negsi2>:
    3f74:	90 95       	com	r25
    3f76:	80 95       	com	r24
    3f78:	70 95       	com	r23
    3f7a:	61 95       	neg	r22
    3f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f7e:	8f 4f       	sbci	r24, 0xFF	; 255
    3f80:	9f 4f       	sbci	r25, 0xFF	; 255
    3f82:	08 95       	ret

00003f84 <__tablejump2__>:
    3f84:	ee 0f       	add	r30, r30
    3f86:	ff 1f       	adc	r31, r31
    3f88:	88 1f       	adc	r24, r24
    3f8a:	8b bf       	out	0x3b, r24	; 59
    3f8c:	07 90       	elpm	r0, Z+
    3f8e:	f6 91       	elpm	r31, Z
    3f90:	e0 2d       	mov	r30, r0
    3f92:	19 94       	eijmp

00003f94 <__umulhisi3>:
    3f94:	a2 9f       	mul	r26, r18
    3f96:	b0 01       	movw	r22, r0
    3f98:	b3 9f       	mul	r27, r19
    3f9a:	c0 01       	movw	r24, r0
    3f9c:	a3 9f       	mul	r26, r19
    3f9e:	70 0d       	add	r23, r0
    3fa0:	81 1d       	adc	r24, r1
    3fa2:	11 24       	eor	r1, r1
    3fa4:	91 1d       	adc	r25, r1
    3fa6:	b2 9f       	mul	r27, r18
    3fa8:	70 0d       	add	r23, r0
    3faa:	81 1d       	adc	r24, r1
    3fac:	11 24       	eor	r1, r1
    3fae:	91 1d       	adc	r25, r1
    3fb0:	08 95       	ret

00003fb2 <__udivmodhi4>:
    3fb2:	aa 1b       	sub	r26, r26
    3fb4:	bb 1b       	sub	r27, r27
    3fb6:	51 e1       	ldi	r21, 0x11	; 17
    3fb8:	07 c0       	rjmp	.+14     	; 0x3fc8 <__udivmodhi4_ep>

00003fba <__udivmodhi4_loop>:
    3fba:	aa 1f       	adc	r26, r26
    3fbc:	bb 1f       	adc	r27, r27
    3fbe:	a6 17       	cp	r26, r22
    3fc0:	b7 07       	cpc	r27, r23
    3fc2:	10 f0       	brcs	.+4      	; 0x3fc8 <__udivmodhi4_ep>
    3fc4:	a6 1b       	sub	r26, r22
    3fc6:	b7 0b       	sbc	r27, r23

00003fc8 <__udivmodhi4_ep>:
    3fc8:	88 1f       	adc	r24, r24
    3fca:	99 1f       	adc	r25, r25
    3fcc:	5a 95       	dec	r21
    3fce:	a9 f7       	brne	.-22     	; 0x3fba <__udivmodhi4_loop>
    3fd0:	80 95       	com	r24
    3fd2:	90 95       	com	r25
    3fd4:	bc 01       	movw	r22, r24
    3fd6:	cd 01       	movw	r24, r26
    3fd8:	08 95       	ret

00003fda <eeprom_read_block>:
    3fda:	dc 01       	movw	r26, r24
    3fdc:	cb 01       	movw	r24, r22

00003fde <eeprom_read_blraw>:
    3fde:	fc 01       	movw	r30, r24
    3fe0:	f9 99       	sbic	0x1f, 1	; 31
    3fe2:	fe cf       	rjmp	.-4      	; 0x3fe0 <eeprom_read_blraw+0x2>
    3fe4:	06 c0       	rjmp	.+12     	; 0x3ff2 <eeprom_read_blraw+0x14>
    3fe6:	f2 bd       	out	0x22, r31	; 34
    3fe8:	e1 bd       	out	0x21, r30	; 33
    3fea:	f8 9a       	sbi	0x1f, 0	; 31
    3fec:	31 96       	adiw	r30, 0x01	; 1
    3fee:	00 b4       	in	r0, 0x20	; 32
    3ff0:	0d 92       	st	X+, r0
    3ff2:	41 50       	subi	r20, 0x01	; 1
    3ff4:	50 40       	sbci	r21, 0x00	; 0
    3ff6:	b8 f7       	brcc	.-18     	; 0x3fe6 <eeprom_read_blraw+0x8>
    3ff8:	08 95       	ret

00003ffa <eeprom_read_byte>:
    3ffa:	f9 99       	sbic	0x1f, 1	; 31
    3ffc:	fe cf       	rjmp	.-4      	; 0x3ffa <eeprom_read_byte>
    3ffe:	92 bd       	out	0x22, r25	; 34
    4000:	81 bd       	out	0x21, r24	; 33
    4002:	f8 9a       	sbi	0x1f, 0	; 31
    4004:	99 27       	eor	r25, r25
    4006:	80 b5       	in	r24, 0x20	; 32
    4008:	08 95       	ret

0000400a <eeprom_write_block>:
    400a:	dc 01       	movw	r26, r24
    400c:	cb 01       	movw	r24, r22
    400e:	02 c0       	rjmp	.+4      	; 0x4014 <eeprom_write_block+0xa>
    4010:	2d 91       	ld	r18, X+
    4012:	05 d0       	rcall	.+10     	; 0x401e <eeprom_write_r18>
    4014:	41 50       	subi	r20, 0x01	; 1
    4016:	50 40       	sbci	r21, 0x00	; 0
    4018:	d8 f7       	brcc	.-10     	; 0x4010 <eeprom_write_block+0x6>
    401a:	08 95       	ret

0000401c <eeprom_write_byte>:
    401c:	26 2f       	mov	r18, r22

0000401e <eeprom_write_r18>:
    401e:	f9 99       	sbic	0x1f, 1	; 31
    4020:	fe cf       	rjmp	.-4      	; 0x401e <eeprom_write_r18>
    4022:	1f ba       	out	0x1f, r1	; 31
    4024:	92 bd       	out	0x22, r25	; 34
    4026:	81 bd       	out	0x21, r24	; 33
    4028:	20 bd       	out	0x20, r18	; 32
    402a:	0f b6       	in	r0, 0x3f	; 63
    402c:	f8 94       	cli
    402e:	fa 9a       	sbi	0x1f, 2	; 31
    4030:	f9 9a       	sbi	0x1f, 1	; 31
    4032:	0f be       	out	0x3f, r0	; 63
    4034:	01 96       	adiw	r24, 0x01	; 1
    4036:	08 95       	ret

00004038 <_exit>:
    4038:	f8 94       	cli

0000403a <__stop_program>:
    403a:	ff cf       	rjmp	.-2      	; 0x403a <__stop_program>
