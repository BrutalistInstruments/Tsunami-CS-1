
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015e  00800200  00002040  000020d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002040  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000416  0080035e  0080035e  00002232  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002232  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f96  00000000  00000000  00002524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000179a  00000000  00000000  000074ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001caa  00000000  00000000  00008c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000608  00000000  00000000  0000a900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fcd  00000000  00000000  0000af08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000229c  00000000  00000000  0000bed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000e171  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <__vector_27>
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <__vector_36>
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e4       	ldi	r30, 0x40	; 64
      fc:	f0 e2       	ldi	r31, 0x20	; 32
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 35       	cpi	r26, 0x5E	; 94
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	27 e0       	ldi	r18, 0x07	; 7
     110:	ae e5       	ldi	r26, 0x5E	; 94
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 37       	cpi	r26, 0x74	; 116
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	9a d5       	rcall	.+2868   	; 0xc54 <main>
     120:	0c 94 1e 10 	jmp	0x203c	; 0x203c <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     126:	8f ef       	ldi	r24, 0xFF	; 255
     128:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     12a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons and Encoder buttons
	PORTB = 0B01111111;
     12e:	8f e7       	ldi	r24, 0x7F	; 127
     130:	85 b9       	out	0x05, r24	; 5
     132:	08 95       	ret

00000134 <listenTrigButtons>:
	
}


void listenTrigButtons()
{
     134:	2f 92       	push	r2
     136:	3f 92       	push	r3
     138:	4f 92       	push	r4
     13a:	5f 92       	push	r5
     13c:	6f 92       	push	r6
     13e:	7f 92       	push	r7
     140:	8f 92       	push	r8
     142:	9f 92       	push	r9
     144:	af 92       	push	r10
     146:	bf 92       	push	r11
     148:	cf 92       	push	r12
     14a:	df 92       	push	r13
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     158:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     15c:	00 95       	com	r16
     15e:	00 93 c9 04 	sts	0x04C9, r16	; 0x8004c9 <buttonsCurrentCycle>
	currentTrigButtons = (buttonsCurrentCycle << 8) | (PINA^255);
     162:	80 b1       	in	r24, 0x00	; 0
     164:	10 e0       	ldi	r17, 0x00	; 0
     166:	10 2f       	mov	r17, r16
     168:	00 27       	eor	r16, r16
     16a:	80 95       	com	r24
     16c:	08 2b       	or	r16, r24
     16e:	10 93 98 05 	sts	0x0598, r17	; 0x800598 <currentTrigButtons+0x1>
     172:	00 93 97 05 	sts	0x0597, r16	; 0x800597 <currentTrigButtons>
	if(currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     176:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <__data_end>
     17a:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <__data_end+0x1>
     17e:	08 17       	cp	r16, r24
     180:	19 07       	cpc	r17, r25
     182:	09 f4       	brne	.+2      	; 0x186 <listenTrigButtons+0x52>
     184:	d6 c0       	rjmp	.+428    	; 0x332 <listenTrigButtons+0x1fe>
	{
		lastFullBits = currentTrigButtons;
     186:	10 93 5f 03 	sts	0x035F, r17	; 0x80035f <__data_end+0x1>
     18a:	00 93 5e 03 	sts	0x035E, r16	; 0x80035e <__data_end>
     18e:	0f 2e       	mov	r0, r31
     190:	f6 e8       	ldi	r31, 0x86	; 134
     192:	cf 2e       	mov	r12, r31
     194:	f3 e0       	ldi	r31, 0x03	; 3
     196:	df 2e       	mov	r13, r31
     198:	f0 2d       	mov	r31, r0
     19a:	0f 2e       	mov	r0, r31
     19c:	f6 ef       	ldi	r31, 0xF6	; 246
     19e:	ef 2e       	mov	r14, r31
     1a0:	f3 e0       	ldi	r31, 0x03	; 3
     1a2:	ff 2e       	mov	r15, r31
     1a4:	f0 2d       	mov	r31, r0
     1a6:	c0 e0       	ldi	r28, 0x00	; 0
     1a8:	d0 e0       	ldi	r29, 0x00	; 0
				numPrinter(screen2[1], 10, 4, currentSample);
				outputS(screen2[1], 1);
				switch (currentPattern.trackPlayMode[bc])
				{
					case 0:
					screen2[2][10] = 'P';
     1aa:	0f 2e       	mov	r0, r31
     1ac:	fb e9       	ldi	r31, 0x9B	; 155
     1ae:	8f 2e       	mov	r8, r31
     1b0:	f5 e0       	ldi	r31, 0x05	; 5
     1b2:	9f 2e       	mov	r9, r31
     1b4:	f0 2d       	mov	r31, r0
     1b6:	0f 2e       	mov	r0, r31
     1b8:	f0 e5       	ldi	r31, 0x50	; 80
     1ba:	3f 2e       	mov	r3, r31
     1bc:	f0 2d       	mov	r31, r0
					screen2[2][11] = 'o';
     1be:	0f 2e       	mov	r0, r31
     1c0:	ff e6       	ldi	r31, 0x6F	; 111
     1c2:	5f 2e       	mov	r5, r31
     1c4:	f0 2d       	mov	r31, r0
					screen2[2][12] = 'l';
     1c6:	0f 2e       	mov	r0, r31
     1c8:	fc e6       	ldi	r31, 0x6C	; 108
     1ca:	4f 2e       	mov	r4, r31
     1cc:	f0 2d       	mov	r31, r0
					screen2[2][13] = 'y';
     1ce:	0f 2e       	mov	r0, r31
     1d0:	f9 e7       	ldi	r31, 0x79	; 121
     1d2:	2f 2e       	mov	r2, r31
     1d4:	f0 2d       	mov	r31, r0
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
	{
		currentTrig = (fullBitsParse&1);
     1d6:	80 2f       	mov	r24, r16
     1d8:	81 70       	andi	r24, 0x01	; 1
     1da:	80 93 ef 05 	sts	0x05EF, r24	; 0x8005ef <currentTrig>
		if(currentTrig)
     1de:	88 23       	and	r24, r24
     1e0:	09 f4       	brne	.+2      	; 0x1e4 <listenTrigButtons+0xb0>
     1e2:	9a c0       	rjmp	.+308    	; 0x318 <listenTrigButtons+0x1e4>
		{
			switch (encoderAValue)
     1e4:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <encoderAValue>
     1e8:	81 30       	cpi	r24, 0x01	; 1
     1ea:	99 f0       	breq	.+38     	; 0x212 <listenTrigButtons+0xde>
     1ec:	30 f0       	brcs	.+12     	; 0x1fa <listenTrigButtons+0xc6>
     1ee:	82 30       	cpi	r24, 0x02	; 2
     1f0:	11 f1       	breq	.+68     	; 0x236 <listenTrigButtons+0x102>
     1f2:	83 30       	cpi	r24, 0x03	; 3
     1f4:	09 f4       	brne	.+2      	; 0x1f8 <listenTrigButtons+0xc4>
     1f6:	75 c0       	rjmp	.+234    	; 0x2e2 <listenTrigButtons+0x1ae>
     1f8:	8f c0       	rjmp	.+286    	; 0x318 <listenTrigButtons+0x1e4>
			{
				
				//for "perfrmance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
				case 0: //performance mode
				//we trigger a sound here based on the location of bc
				trackControl(currentPattern.trackSampleLSB[bc], currentPattern.trackSampleMSB[bc], currentPattern.trackOutputRoute[bc], currentPattern.trackOutputRoute[bc]);
     1fa:	f6 01       	movw	r30, r12
     1fc:	40 81       	ld	r20, Z
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	f7 01       	movw	r30, r14
     202:	60 89       	ldd	r22, Z+16	; 0x10
     204:	70 e0       	ldi	r23, 0x00	; 0
     206:	80 a1       	ldd	r24, Z+32	; 0x20
     208:	9a 01       	movw	r18, r20
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <trackControl>
				break;
     210:	83 c0       	rjmp	.+262    	; 0x318 <listenTrigButtons+0x1e4>
				
				case 1:
				currentPattern.trackSequence[currentStep] ^=currentTrigButtons;
     212:	e0 91 73 06 	lds	r30, 0x0673	; 0x800673 <currentStep>
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	ee 0f       	add	r30, r30
     21a:	ff 1f       	adc	r31, r31
     21c:	ea 5c       	subi	r30, 0xCA	; 202
     21e:	fb 4f       	sbci	r31, 0xFB	; 251
     220:	20 81       	ld	r18, Z
     222:	31 81       	ldd	r19, Z+1	; 0x01
     224:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <currentTrigButtons>
     228:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <currentTrigButtons+0x1>
     22c:	82 27       	eor	r24, r18
     22e:	93 27       	eor	r25, r19
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
				//turn on step number, or turn off step number.
				//step sequencer mode.
				break;
     234:	71 c0       	rjmp	.+226    	; 0x318 <listenTrigButtons+0x1e4>
     236:	37 01       	movw	r6, r14
				
				case 2: ;
				//select track for sample assignment
				uint16_t currentSample = (currentPattern.trackSampleMSB[bc]<<8)|(currentPattern.trackSampleLSB[bc]);
     238:	f7 01       	movw	r30, r14
     23a:	a0 88       	ldd	r10, Z+16	; 0x10
     23c:	b1 2c       	mov	r11, r1
     23e:	ba 2c       	mov	r11, r10
     240:	aa 24       	eor	r10, r10
     242:	80 a1       	ldd	r24, Z+32	; 0x20
     244:	a8 2a       	or	r10, r24
				currentTrack = bc;
     246:	c0 93 1e 06 	sts	0x061E, r28	; 0x80061e <currentTrack>
				numPrinter(screen2[1], 7, 2, (bc+1));
     24a:	9e 01       	movw	r18, r28
     24c:	2f 5f       	subi	r18, 0xFF	; 255
     24e:	3f 4f       	sbci	r19, 0xFF	; 255
     250:	42 e0       	ldi	r20, 0x02	; 2
     252:	67 e0       	ldi	r22, 0x07	; 7
     254:	8f ea       	ldi	r24, 0xAF	; 175
     256:	95 e0       	ldi	r25, 0x05	; 5
     258:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <numPrinter>
				numPrinter(screen2[1], 10, 4, currentSample);
     25c:	95 01       	movw	r18, r10
     25e:	44 e0       	ldi	r20, 0x04	; 4
     260:	6a e0       	ldi	r22, 0x0A	; 10
     262:	8f ea       	ldi	r24, 0xAF	; 175
     264:	95 e0       	ldi	r25, 0x05	; 5
     266:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <numPrinter>
				outputS(screen2[1], 1);
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	8f ea       	ldi	r24, 0xAF	; 175
     270:	95 e0       	ldi	r25, 0x05	; 5
     272:	0e 94 49 0b 	call	0x1692	; 0x1692 <outputS>
				switch (currentPattern.trackPlayMode[bc])
     276:	f7 01       	movw	r30, r14
     278:	80 81       	ld	r24, Z
     27a:	88 23       	and	r24, r24
     27c:	19 f0       	breq	.+6      	; 0x284 <listenTrigButtons+0x150>
     27e:	81 30       	cpi	r24, 0x01	; 1
     280:	39 f0       	breq	.+14     	; 0x290 <listenTrigButtons+0x15c>
     282:	0c c0       	rjmp	.+24     	; 0x29c <listenTrigButtons+0x168>
				{
					case 0:
					screen2[2][10] = 'P';
     284:	f4 01       	movw	r30, r8
     286:	32 aa       	std	Z+50, r3	; 0x32
					screen2[2][11] = 'o';
     288:	53 aa       	std	Z+51, r5	; 0x33
					screen2[2][12] = 'l';
     28a:	44 aa       	std	Z+52, r4	; 0x34
					screen2[2][13] = 'y';
     28c:	25 aa       	std	Z+53, r2	; 0x35
					break;
     28e:	06 c0       	rjmp	.+12     	; 0x29c <listenTrigButtons+0x168>
					
					case 1:
					screen2[2][10] = 'S';
     290:	83 e5       	ldi	r24, 0x53	; 83
     292:	f4 01       	movw	r30, r8
     294:	82 ab       	std	Z+50, r24	; 0x32
					screen2[2][11] = 'o';
     296:	53 aa       	std	Z+51, r5	; 0x33
					screen2[2][12] = 'l';
     298:	44 aa       	std	Z+52, r4	; 0x34
					screen2[2][13] = 'o';
     29a:	55 aa       	std	Z+53, r5	; 0x35
					break;
					
					case 3:
					break;
				}
				outputS(screen2[2], 2);
     29c:	62 e0       	ldi	r22, 0x02	; 2
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	83 ec       	ldi	r24, 0xC3	; 195
     2a2:	95 e0       	ldi	r25, 0x05	; 5
     2a4:	0e 94 49 0b 	call	0x1692	; 0x1692 <outputS>
				numPrinter(screen2[3], 10, 2, (currentPattern.trackOutputRoute[bc]+1));
     2a8:	f6 01       	movw	r30, r12
     2aa:	20 81       	ld	r18, Z
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	2f 5f       	subi	r18, 0xFF	; 255
     2b0:	3f 4f       	sbci	r19, 0xFF	; 255
     2b2:	42 e0       	ldi	r20, 0x02	; 2
     2b4:	6a e0       	ldi	r22, 0x0A	; 10
     2b6:	87 ed       	ldi	r24, 0xD7	; 215
     2b8:	95 e0       	ldi	r25, 0x05	; 5
     2ba:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <numPrinter>
				outputS(screen2[3], 3);
     2be:	63 e0       	ldi	r22, 0x03	; 3
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	87 ed       	ldi	r24, 0xD7	; 215
     2c4:	95 e0       	ldi	r25, 0x05	; 5
     2c6:	0e 94 49 0b 	call	0x1692	; 0x1692 <outputS>
				
				
				trackControl(currentPattern.trackSampleLSB[bc], currentPattern.trackSampleMSB[bc], currentPattern.trackOutputRoute[bc], currentPattern.trackOutputRoute[bc]);
     2ca:	f6 01       	movw	r30, r12
     2cc:	40 81       	ld	r20, Z
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	f3 01       	movw	r30, r6
     2d2:	60 89       	ldd	r22, Z+16	; 0x10
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	80 a1       	ldd	r24, Z+32	; 0x20
     2d8:	9a 01       	movw	r18, r20
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <trackControl>
				break;
     2e0:	1b c0       	rjmp	.+54     	; 0x318 <listenTrigButtons+0x1e4>
				
				case 3:; 
				uint16_t currentMidiNote = currentPattern.midiTrackNote[bc];
     2e2:	f7 01       	movw	r30, r14
     2e4:	e0 54       	subi	r30, 0x40	; 64
     2e6:	ff 4f       	sbci	r31, 0xFF	; 255
     2e8:	a0 80       	ld	r10, Z
     2ea:	b1 2c       	mov	r11, r1
				currentTrack = bc;
     2ec:	c0 93 1e 06 	sts	0x061E, r28	; 0x80061e <currentTrack>
				numPrinter(screen3[2], 11, 2, currentTrack);
     2f0:	9e 01       	movw	r18, r28
     2f2:	42 e0       	ldi	r20, 0x02	; 2
     2f4:	6b e0       	ldi	r22, 0x0B	; 11
     2f6:	87 e4       	ldi	r24, 0x47	; 71
     2f8:	96 e0       	ldi	r25, 0x06	; 6
     2fa:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <numPrinter>
				numPrinter(screen3[2], 14, 2, currentMidiNote);
     2fe:	95 01       	movw	r18, r10
     300:	42 e0       	ldi	r20, 0x02	; 2
     302:	6e e0       	ldi	r22, 0x0E	; 14
     304:	87 e4       	ldi	r24, 0x47	; 71
     306:	96 e0       	ldi	r25, 0x06	; 6
     308:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <numPrinter>
				outputS(screen3[2], 2);
     30c:	62 e0       	ldi	r22, 0x02	; 2
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	87 e4       	ldi	r24, 0x47	; 71
     312:	96 e0       	ldi	r25, 0x06	; 6
     314:	0e 94 49 0b 	call	0x1692	; 0x1692 <outputS>
			}
		
		
		}
		
		fullBitsParse = fullBitsParse>>1;
     318:	16 95       	lsr	r17
     31a:	07 95       	ror	r16
     31c:	21 96       	adiw	r28, 0x01	; 1
     31e:	ff ef       	ldi	r31, 0xFF	; 255
     320:	cf 1a       	sub	r12, r31
     322:	df 0a       	sbc	r13, r31
     324:	8f ef       	ldi	r24, 0xFF	; 255
     326:	e8 1a       	sub	r14, r24
     328:	f8 0a       	sbc	r15, r24
	{
		lastFullBits = currentTrigButtons;
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     32a:	c0 31       	cpi	r28, 0x10	; 16
     32c:	d1 05       	cpc	r29, r1
     32e:	09 f0       	breq	.+2      	; 0x332 <listenTrigButtons+0x1fe>
     330:	52 cf       	rjmp	.-348    	; 0x1d6 <listenTrigButtons+0xa2>
		fullBitsParse = fullBitsParse>>1;
	}
	}


}
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	ff 90       	pop	r15
     33c:	ef 90       	pop	r14
     33e:	df 90       	pop	r13
     340:	cf 90       	pop	r12
     342:	bf 90       	pop	r11
     344:	af 90       	pop	r10
     346:	9f 90       	pop	r9
     348:	8f 90       	pop	r8
     34a:	7f 90       	pop	r7
     34c:	6f 90       	pop	r6
     34e:	5f 90       	pop	r5
     350:	4f 90       	pop	r4
     352:	3f 90       	pop	r3
     354:	2f 90       	pop	r2
     356:	08 95       	ret

00000358 <listenGPButtons>:

void listenGPButtons() // are the encoder buttons here also?
{
	currentGPButtons = PINB;
     358:	83 b1       	in	r24, 0x03	; 3
     35a:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <currentGPButtons>
	if((currentGPButtons^255)&(1 << PB5))
     35e:	80 95       	com	r24
     360:	85 ff       	sbrs	r24, 5
     362:	05 c0       	rjmp	.+10     	; 0x36e <listenGPButtons+0x16>
	{ //top encoder button
	//	outputS(testEncoderButton, 3);
	encoderAFlag = ~encoderAFlag;
     364:	90 91 eb 05 	lds	r25, 0x05EB	; 0x8005eb <encoderAFlag>
     368:	90 95       	com	r25
     36a:	90 93 eb 05 	sts	0x05EB, r25	; 0x8005eb <encoderAFlag>
		
	}
	if((currentGPButtons^255)&(1 << PB6))
     36e:	86 ff       	sbrs	r24, 6
     370:	05 c0       	rjmp	.+10     	; 0x37c <listenGPButtons+0x24>
	{//botton encoder button
		
		//outputS(testEncoderButton, 3);
		encoderBFlag = ~encoderBFlag;
     372:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <encoderBFlag>
     376:	80 95       	com	r24
     378:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <encoderBFlag>
     37c:	08 95       	ret

0000037e <initEncoders>:
#include <avr/interrupt.h>

void initEncoders()
{
	//this is where we set the encoder pins to where they need to be
PORTH = 0B01111000; // enable internal pullup resistors.
     37e:	88 e7       	ldi	r24, 0x78	; 120
     380:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     384:	08 95       	ret

00000386 <pollEncoder0>:

}

void pollEncoder0(uint8_t *encoderC0)
{
	if(~PINH&(1<<PH6))
     386:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     38a:	26 fd       	sbrc	r18, 6
     38c:	12 c0       	rjmp	.+36     	; 0x3b2 <pollEncoder0+0x2c>
	{
		if(~PINH&(1<<PH5))
     38e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     392:	25 fd       	sbrc	r18, 5
     394:	05 c0       	rjmp	.+10     	; 0x3a0 <pollEncoder0+0x1a>
		{
			//left turn?
			*encoderC0= (*encoderC0)+1;
     396:	fc 01       	movw	r30, r24
     398:	20 81       	ld	r18, Z
     39a:	2f 5f       	subi	r18, 0xFF	; 255
     39c:	20 83       	st	Z, r18
     39e:	04 c0       	rjmp	.+8      	; 0x3a8 <pollEncoder0+0x22>
		}
		else
		{
			*encoderC0= (*encoderC0)-1;
     3a0:	fc 01       	movw	r30, r24
     3a2:	20 81       	ld	r18, Z
     3a4:	21 50       	subi	r18, 0x01	; 1
     3a6:	20 83       	st	Z, r18
		}
		//_delay_ms(2); // seems un-necesary with while loop
		while(~PINH&(1<<PH6)){} // this does make things smoother, but we need to be sure we have interupts for important things.
     3a8:	e0 e0       	ldi	r30, 0x00	; 0
     3aa:	f1 e0       	ldi	r31, 0x01	; 1
     3ac:	80 81       	ld	r24, Z
     3ae:	86 ff       	sbrs	r24, 6
     3b0:	fd cf       	rjmp	.-6      	; 0x3ac <pollEncoder0+0x26>
     3b2:	08 95       	ret

000003b4 <pollEncoder1>:

}

void pollEncoder1(uint8_t *encoderC1)
{
	if(~PINH&(1<<PH3))
     3b4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     3b8:	23 fd       	sbrc	r18, 3
     3ba:	12 c0       	rjmp	.+36     	; 0x3e0 <pollEncoder1+0x2c>
	{
		if(~PINH&(1<<PH4))
     3bc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     3c0:	24 fd       	sbrc	r18, 4
     3c2:	05 c0       	rjmp	.+10     	; 0x3ce <pollEncoder1+0x1a>
		{
			//left turn?
			*encoderC1=(*encoderC1)-1;
     3c4:	fc 01       	movw	r30, r24
     3c6:	20 81       	ld	r18, Z
     3c8:	21 50       	subi	r18, 0x01	; 1
     3ca:	20 83       	st	Z, r18
     3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <pollEncoder1+0x22>
		}
		else
		{
			*encoderC1=(*encoderC1)+1;
     3ce:	fc 01       	movw	r30, r24
     3d0:	20 81       	ld	r18, Z
     3d2:	2f 5f       	subi	r18, 0xFF	; 255
     3d4:	20 83       	st	Z, r18
		}
		//_delay_ms(2); // seems un-necesary with while loop
		while(~PINH&(1<<PH3)){} // this does make things smoother, but we need to be sure we have interupts for important things.
     3d6:	e0 e0       	ldi	r30, 0x00	; 0
     3d8:	f1 e0       	ldi	r31, 0x01	; 1
     3da:	80 81       	ld	r24, Z
     3dc:	83 ff       	sbrs	r24, 3
     3de:	fd cf       	rjmp	.-6      	; 0x3da <pollEncoder1+0x26>
     3e0:	08 95       	ret

000003e2 <listenEncoders>:


void listenEncoders()
{
	//this is where we update the encoder variables.
	pollEncoder0(&encoderAValue); //we're going to try using and interurt for encoderA's trigger, instead of polling. still need to debounce though? maybe?
     3e2:	8d e6       	ldi	r24, 0x6D	; 109
     3e4:	93 e0       	ldi	r25, 0x03	; 3
     3e6:	cf df       	rcall	.-98     	; 0x386 <pollEncoder0>
	pollEncoder1(&encoderBValue);
     3e8:	82 e7       	ldi	r24, 0x72	; 114
     3ea:	96 e0       	ldi	r25, 0x06	; 6
     3ec:	e3 cf       	rjmp	.-58     	; 0x3b4 <pollEncoder1>
     3ee:	08 95       	ret

000003f0 <initArrays>:

#include <avr/io.h>
#include "globalVariables.h"

void initArrays(char myArray[4][20], uint8_t lengthOfString, int stringNumber, char* myString)
{
     3f0:	ef 92       	push	r14
     3f2:	ff 92       	push	r15
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	8c 01       	movw	r16, r24
     3fe:	7a 01       	movw	r14, r20
	uint8_t charLeft = 20 - lengthOfString;
     400:	94 e1       	ldi	r25, 0x14	; 20
     402:	59 2f       	mov	r21, r25
     404:	56 1b       	sub	r21, r22
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     406:	66 23       	and	r22, r22
     408:	a1 f0       	breq	.+40     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     40a:	f9 01       	movw	r30, r18
     40c:	84 e1       	ldi	r24, 0x14	; 20
     40e:	8e 9d       	mul	r24, r14
     410:	d0 01       	movw	r26, r0
     412:	8f 9d       	mul	r24, r15
     414:	b0 0d       	add	r27, r0
     416:	11 24       	eor	r1, r1
     418:	a0 0f       	add	r26, r16
     41a:	b1 1f       	adc	r27, r17
     41c:	cf ef       	ldi	r28, 0xFF	; 255
     41e:	c6 0f       	add	r28, r22
     420:	d0 e0       	ldi	r29, 0x00	; 0
     422:	21 96       	adiw	r28, 0x01	; 1
     424:	2c 0f       	add	r18, r28
     426:	3d 1f       	adc	r19, r29
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     428:	91 91       	ld	r25, Z+
     42a:	9d 93       	st	X+, r25

void initArrays(char myArray[4][20], uint8_t lengthOfString, int stringNumber, char* myString)
{
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     42c:	e2 17       	cp	r30, r18
     42e:	f3 07       	cpc	r31, r19
     430:	d9 f7       	brne	.-10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
		
	}
	
	for(charLeft; charLeft>0; charLeft--)
     432:	55 23       	and	r21, r21
     434:	91 f0       	breq	.+36     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	{
		
		myArray[stringNumber][currentIndex] = ' ';
     436:	24 e1       	ldi	r18, 0x14	; 20
     438:	2e 9d       	mul	r18, r14
     43a:	c0 01       	movw	r24, r0
     43c:	2f 9d       	mul	r18, r15
     43e:	90 0d       	add	r25, r0
     440:	11 24       	eor	r1, r1
     442:	08 0f       	add	r16, r24
     444:	19 1f       	adc	r17, r25
     446:	95 2f       	mov	r25, r21
     448:	96 0f       	add	r25, r22
     44a:	80 e2       	ldi	r24, 0x20	; 32
     44c:	f8 01       	movw	r30, r16
     44e:	e6 0f       	add	r30, r22
     450:	f1 1d       	adc	r31, r1
     452:	80 83       	st	Z, r24
		currentIndex++;
     454:	6f 5f       	subi	r22, 0xFF	; 255
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
		
	}
	
	for(charLeft; charLeft>0; charLeft--)
     456:	69 13       	cpse	r22, r25
     458:	f9 cf       	rjmp	.-14     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		
		myArray[stringNumber][currentIndex] = ' ';
		currentIndex++;
	}

}
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	08 95       	ret

00000468 <initBank>:

void initBank()
{
     468:	e6 e1       	ldi	r30, 0x16	; 22
     46a:	f4 e0       	ldi	r31, 0x04	; 4
	for(uint8_t i = 0; i<16; i++)
     46c:	80 e0       	ldi	r24, 0x00	; 0
	{
		currentPattern.trackSampleLSB[i] = i+1;
     46e:	8f 5f       	subi	r24, 0xFF	; 255
     470:	81 93       	st	Z+, r24

}

void initBank()
{
	for(uint8_t i = 0; i<16; i++)
     472:	80 31       	cpi	r24, 0x10	; 16
     474:	e1 f7       	brne	.-8      	; 0x46e <initBank+0x6>
	{
		currentPattern.trackSampleLSB[i] = i+1;
	}
	
	//assign midi notes C3 to E4
	currentPattern.midiTrackNote[0] = 0x30;
     476:	80 e3       	ldi	r24, 0x30	; 48
     478:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <currentPattern+0x148>
	currentPattern.midiTrackNote[1] = 0x31;
     47c:	81 e3       	ldi	r24, 0x31	; 49
     47e:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <currentPattern+0x149>
	currentPattern.midiTrackNote[2] = 0x32;
     482:	82 e3       	ldi	r24, 0x32	; 50
     484:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <currentPattern+0x14a>
	currentPattern.midiTrackNote[3] = 0x33;
     488:	83 e3       	ldi	r24, 0x33	; 51
     48a:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <currentPattern+0x14b>
	currentPattern.midiTrackNote[4] = 0x34;
     48e:	84 e3       	ldi	r24, 0x34	; 52
     490:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <currentPattern+0x14c>
	currentPattern.midiTrackNote[5] = 0x35;
     494:	85 e3       	ldi	r24, 0x35	; 53
     496:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <currentPattern+0x14d>
	currentPattern.midiTrackNote[6] = 0x36;
     49a:	86 e3       	ldi	r24, 0x36	; 54
     49c:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <currentPattern+0x14e>
	currentPattern.midiTrackNote[7] = 0x37;
     4a0:	87 e3       	ldi	r24, 0x37	; 55
     4a2:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <currentPattern+0x14f>
	currentPattern.midiTrackNote[8] = 0x38;
     4a6:	88 e3       	ldi	r24, 0x38	; 56
     4a8:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <currentPattern+0x150>
	currentPattern.midiTrackNote[9] = 0x39;
     4ac:	89 e3       	ldi	r24, 0x39	; 57
     4ae:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <currentPattern+0x151>
	currentPattern.midiTrackNote[10] = 0x3a;
     4b2:	8a e3       	ldi	r24, 0x3A	; 58
     4b4:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <currentPattern+0x152>
	currentPattern.midiTrackNote[11] = 0x3b;
     4b8:	8b e3       	ldi	r24, 0x3B	; 59
     4ba:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <currentPattern+0x153>
	currentPattern.midiTrackNote[12] = 0x3c;
     4be:	8c e3       	ldi	r24, 0x3C	; 60
     4c0:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <currentPattern+0x154>
	currentPattern.midiTrackNote[13] = 0x3d;
     4c4:	8d e3       	ldi	r24, 0x3D	; 61
     4c6:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <currentPattern+0x155>
	currentPattern.midiTrackNote[14] = 0x3e;
     4ca:	8e e3       	ldi	r24, 0x3E	; 62
     4cc:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <currentPattern+0x156>
	currentPattern.midiTrackNote[15] = 0x3f;
     4d0:	8f e3       	ldi	r24, 0x3F	; 63
     4d2:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <currentPattern+0x157>
	currentPattern.patternBPM = 120;
     4d6:	88 e7       	ldi	r24, 0x78	; 120
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <currentPattern+0x159>
     4de:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <currentPattern+0x158>
	currentPatternNumber = 1;
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <currentPatternNumber>
	currentStep = 0;
     4e8:	10 92 73 06 	sts	0x0673, r1	; 0x800673 <currentStep>
	currentPattern.numSteps = 16;
     4ec:	80 e1       	ldi	r24, 0x10	; 16
     4ee:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <currentPattern+0x15a>
	//screen0
	// = {"Performance Mode    ","Pattern:            ","BPM: xxx            ","Stop                "}
	initArrays(screen0,8,1,"Pattern:");
     4f2:	24 ea       	ldi	r18, 0xA4	; 164
     4f4:	32 e0       	ldi	r19, 0x02	; 2
     4f6:	41 e0       	ldi	r20, 0x01	; 1
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	68 e0       	ldi	r22, 0x08	; 8
     4fc:	87 e4       	ldi	r24, 0x47	; 71
     4fe:	95 e0       	ldi	r25, 0x05	; 5
     500:	77 df       	rcall	.-274    	; 0x3f0 <initArrays>
	initArrays(screen0,4,2,"BPM:");
     502:	2d ea       	ldi	r18, 0xAD	; 173
     504:	32 e0       	ldi	r19, 0x02	; 2
     506:	42 e0       	ldi	r20, 0x02	; 2
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	64 e0       	ldi	r22, 0x04	; 4
     50c:	87 e4       	ldi	r24, 0x47	; 71
     50e:	95 e0       	ldi	r25, 0x05	; 5
     510:	6f df       	rcall	.-290    	; 0x3f0 <initArrays>
	initArrays(screen0,4,3,"Stop");
     512:	22 eb       	ldi	r18, 0xB2	; 178
     514:	32 e0       	ldi	r19, 0x02	; 2
     516:	43 e0       	ldi	r20, 0x03	; 3
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	64 e0       	ldi	r22, 0x04	; 4
     51c:	87 e4       	ldi	r24, 0x47	; 71
     51e:	95 e0       	ldi	r25, 0x05	; 5
     520:	67 df       	rcall	.-306    	; 0x3f0 <initArrays>
	initArrays(screen0,16,0,"Performance Mode");
     522:	27 eb       	ldi	r18, 0xB7	; 183
     524:	32 e0       	ldi	r19, 0x02	; 2
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	60 e1       	ldi	r22, 0x10	; 16
     52c:	87 e4       	ldi	r24, 0x47	; 71
     52e:	95 e0       	ldi	r25, 0x05	; 5
     530:	5f df       	rcall	.-322    	; 0x3f0 <initArrays>
	//screen1
	// = {"Sequence Edit       ","Pattern:            ","Steps:              ","Step number:        "}; //this will eventually be 5 once we implement naming of samples.
	initArrays(screen1,8,1,"Pattern:");
     532:	24 ea       	ldi	r18, 0xA4	; 164
     534:	32 e0       	ldi	r19, 0x02	; 2
     536:	41 e0       	ldi	r20, 0x01	; 1
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	68 e0       	ldi	r22, 0x08	; 8
     53c:	8b ec       	ldi	r24, 0xCB	; 203
     53e:	94 e0       	ldi	r25, 0x04	; 4
     540:	57 df       	rcall	.-338    	; 0x3f0 <initArrays>
	initArrays(screen1,6,2,"Steps:");
     542:	28 ec       	ldi	r18, 0xC8	; 200
     544:	32 e0       	ldi	r19, 0x02	; 2
     546:	42 e0       	ldi	r20, 0x02	; 2
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	66 e0       	ldi	r22, 0x06	; 6
     54c:	8b ec       	ldi	r24, 0xCB	; 203
     54e:	94 e0       	ldi	r25, 0x04	; 4
     550:	4f df       	rcall	.-354    	; 0x3f0 <initArrays>
	initArrays(screen1,12,3,"Step number:");
     552:	2f ec       	ldi	r18, 0xCF	; 207
     554:	32 e0       	ldi	r19, 0x02	; 2
     556:	43 e0       	ldi	r20, 0x03	; 3
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	6c e0       	ldi	r22, 0x0C	; 12
     55c:	8b ec       	ldi	r24, 0xCB	; 203
     55e:	94 e0       	ldi	r25, 0x04	; 4
     560:	47 df       	rcall	.-370    	; 0x3f0 <initArrays>
	initArrays(screen1,13,0,"Sequence Edit");
     562:	2c ed       	ldi	r18, 0xDC	; 220
     564:	32 e0       	ldi	r19, 0x02	; 2
     566:	40 e0       	ldi	r20, 0x00	; 0
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	6d e0       	ldi	r22, 0x0D	; 13
     56c:	8b ec       	ldi	r24, 0xCB	; 203
     56e:	94 e0       	ldi	r25, 0x04	; 4
     570:	3f df       	rcall	.-386    	; 0x3f0 <initArrays>
	//screen2
	//= {"Track Settings      ","Track:              ","Play Mode           ","OutRoute            "};
	initArrays(screen2,6,1,"Track:");
     572:	2a ee       	ldi	r18, 0xEA	; 234
     574:	32 e0       	ldi	r19, 0x02	; 2
     576:	41 e0       	ldi	r20, 0x01	; 1
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	66 e0       	ldi	r22, 0x06	; 6
     57c:	8b e9       	ldi	r24, 0x9B	; 155
     57e:	95 e0       	ldi	r25, 0x05	; 5
     580:	37 df       	rcall	.-402    	; 0x3f0 <initArrays>
	initArrays(screen2,9,2,"PlayMode:");
     582:	21 ef       	ldi	r18, 0xF1	; 241
     584:	32 e0       	ldi	r19, 0x02	; 2
     586:	42 e0       	ldi	r20, 0x02	; 2
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	69 e0       	ldi	r22, 0x09	; 9
     58c:	8b e9       	ldi	r24, 0x9B	; 155
     58e:	95 e0       	ldi	r25, 0x05	; 5
     590:	2f df       	rcall	.-418    	; 0x3f0 <initArrays>
	initArrays(screen2,9,3,"OutRoute:");
     592:	2b ef       	ldi	r18, 0xFB	; 251
     594:	32 e0       	ldi	r19, 0x02	; 2
     596:	43 e0       	ldi	r20, 0x03	; 3
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	69 e0       	ldi	r22, 0x09	; 9
     59c:	8b e9       	ldi	r24, 0x9B	; 155
     59e:	95 e0       	ldi	r25, 0x05	; 5
     5a0:	27 df       	rcall	.-434    	; 0x3f0 <initArrays>
	initArrays(screen2,14,0,"Track Settings");
     5a2:	25 e0       	ldi	r18, 0x05	; 5
     5a4:	33 e0       	ldi	r19, 0x03	; 3
     5a6:	40 e0       	ldi	r20, 0x00	; 0
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	6e e0       	ldi	r22, 0x0E	; 14
     5ac:	8b e9       	ldi	r24, 0x9B	; 155
     5ae:	95 e0       	ldi	r25, 0x05	; 5
     5b0:	1f df       	rcall	.-450    	; 0x3f0 <initArrays>
	//screen3
	// = {"Global Settings     ","Midi Channel: xx    ", "Midi trig:  "};
	initArrays(screen3,13,1,"Midi Channel:");
     5b2:	24 e1       	ldi	r18, 0x14	; 20
     5b4:	33 e0       	ldi	r19, 0x03	; 3
     5b6:	41 e0       	ldi	r20, 0x01	; 1
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	6d e0       	ldi	r22, 0x0D	; 13
     5bc:	8f e1       	ldi	r24, 0x1F	; 31
     5be:	96 e0       	ldi	r25, 0x06	; 6
     5c0:	17 df       	rcall	.-466    	; 0x3f0 <initArrays>
	initArrays(screen3,18,2,"Midi trig:           ");
     5c2:	22 e2       	ldi	r18, 0x22	; 34
     5c4:	33 e0       	ldi	r19, 0x03	; 3
     5c6:	42 e0       	ldi	r20, 0x02	; 2
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	62 e1       	ldi	r22, 0x12	; 18
     5cc:	8f e1       	ldi	r24, 0x1F	; 31
     5ce:	96 e0       	ldi	r25, 0x06	; 6
     5d0:	0f df       	rcall	.-482    	; 0x3f0 <initArrays>
	initArrays(screen3,20,3,"                     ");
     5d2:	28 e3       	ldi	r18, 0x38	; 56
     5d4:	33 e0       	ldi	r19, 0x03	; 3
     5d6:	43 e0       	ldi	r20, 0x03	; 3
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	64 e1       	ldi	r22, 0x14	; 20
     5dc:	8f e1       	ldi	r24, 0x1F	; 31
     5de:	96 e0       	ldi	r25, 0x06	; 6
     5e0:	07 df       	rcall	.-498    	; 0x3f0 <initArrays>
	initArrays(screen3,15,0,"Global Settings");	
     5e2:	2e e4       	ldi	r18, 0x4E	; 78
     5e4:	33 e0       	ldi	r19, 0x03	; 3
     5e6:	40 e0       	ldi	r20, 0x00	; 0
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	6f e0       	ldi	r22, 0x0F	; 15
     5ec:	8f e1       	ldi	r24, 0x1F	; 31
     5ee:	96 e0       	ldi	r25, 0x06	; 6
     5f0:	ff ce       	rjmp	.-514    	; 0x3f0 <initArrays>
     5f2:	08 95       	ret

000005f4 <startADCConversion>:
char envelopeTimePrint[20] = "EnvelopeTimex:xxxxMS";

uint8_t startADCConversion()
{
	
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     5f4:	ea e7       	ldi	r30, 0x7A	; 122
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	80 81       	ld	r24, Z
     5fa:	80 64       	ori	r24, 0x40	; 64
     5fc:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     5fe:	80 81       	ld	r24, Z
     600:	86 fd       	sbrc	r24, 6
     602:	fd cf       	rjmp	.-6      	; 0x5fe <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.
     604:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
}
     608:	08 95       	ret

0000060a <initADC>:

void initADC()
{
	DDRE = 0B00111000; //init pins E5, 4, and 3 as select pins on the external mux.
     60a:	88 e3       	ldi	r24, 0x38	; 56
     60c:	8d b9       	out	0x0d, r24	; 13
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     60e:	80 e2       	ldi	r24, 0x20	; 32
     610:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     614:	87 e8       	ldi	r24, 0x87	; 135
     616:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     61a:	88 e0       	ldi	r24, 0x08	; 8
     61c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     620:	8f ef       	ldi	r24, 0xFF	; 255
     622:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     626:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     62a:	10 92 f0 05 	sts	0x05F0, r1	; 0x8005f0 <knobBufferCounter>
	startADCConversion();
     62e:	e2 cf       	rjmp	.-60     	; 0x5f4 <startADCConversion>
     630:	08 95       	ret

00000632 <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     632:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     634:	98 2f       	mov	r25, r24
     636:	96 95       	lsr	r25
     638:	96 95       	lsr	r25
     63a:	2f e2       	ldi	r18, 0x2F	; 47
     63c:	92 9f       	mul	r25, r18
     63e:	91 2d       	mov	r25, r1
     640:	11 24       	eor	r1, r1
     642:	96 95       	lsr	r25
     644:	2c e2       	ldi	r18, 0x2C	; 44
     646:	92 9f       	mul	r25, r18
     648:	80 19       	sub	r24, r0
     64a:	11 24       	eor	r1, r1
     64c:	98 2f       	mov	r25, r24
	if(select<40)
     64e:	88 32       	cpi	r24, 0x28	; 40
     650:	18 f5       	brcc	.+70     	; 0x698 <selectKnob+0x66>
	{
		ADCSRB = (1 << MUX5);
     652:	88 e0       	ldi	r24, 0x08	; 8
     654:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     658:	c9 2f       	mov	r28, r25
     65a:	c7 70       	andi	r28, 0x07	; 7
		uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     65c:	96 95       	lsr	r25
     65e:	96 95       	lsr	r25
     660:	96 95       	lsr	r25
     662:	90 62       	ori	r25, 0x20	; 32
     664:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     668:	c5 df       	rcall	.-118    	; 0x5f4 <startADCConversion>
		//we might need to worry about the delay, but that's fine.
		
		//we put our select0 and select2 pins in the opposite ports, so we need to do some math to fix that.
		//easy stupid fix:
		switch (tempMuxSelect)
     66a:	c3 30       	cpi	r28, 0x03	; 3
     66c:	59 f0       	breq	.+22     	; 0x684 <selectKnob+0x52>
     66e:	18 f4       	brcc	.+6      	; 0x676 <selectKnob+0x44>
     670:	c1 30       	cpi	r28, 0x01	; 1
     672:	31 f0       	breq	.+12     	; 0x680 <selectKnob+0x4e>
     674:	0c c0       	rjmp	.+24     	; 0x68e <selectKnob+0x5c>
     676:	c4 30       	cpi	r28, 0x04	; 4
     678:	39 f0       	breq	.+14     	; 0x688 <selectKnob+0x56>
     67a:	c6 30       	cpi	r28, 0x06	; 6
     67c:	39 f0       	breq	.+14     	; 0x68c <selectKnob+0x5a>
     67e:	07 c0       	rjmp	.+14     	; 0x68e <selectKnob+0x5c>
		{
			case 1: muxSelect = 4;
     680:	c4 e0       	ldi	r28, 0x04	; 4
     682:	05 c0       	rjmp	.+10     	; 0x68e <selectKnob+0x5c>
			break;
			
			case 3:	muxSelect = 6;
     684:	c6 e0       	ldi	r28, 0x06	; 6
			break;
     686:	03 c0       	rjmp	.+6      	; 0x68e <selectKnob+0x5c>
			
			case 4: muxSelect = 1;
     688:	c1 e0       	ldi	r28, 0x01	; 1
			break;
     68a:	01 c0       	rjmp	.+2      	; 0x68e <selectKnob+0x5c>
			
			case 6: muxSelect = 3;
     68c:	c3 e0       	ldi	r28, 0x03	; 3
			break;
		}

	//then the external multiplexer
		PORTE = (muxSelect << 3);
     68e:	cc 0f       	add	r28, r28
     690:	cc 0f       	add	r28, r28
     692:	cc 0f       	add	r28, r28
     694:	ce b9       	out	0x0e, r28	; 14
     696:	20 c0       	rjmp	.+64     	; 0x6d8 <selectKnob+0xa6>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     698:	89 32       	cpi	r24, 0x29	; 41
     69a:	71 f0       	breq	.+28     	; 0x6b8 <selectKnob+0x86>
     69c:	18 f4       	brcc	.+6      	; 0x6a4 <selectKnob+0x72>
     69e:	88 32       	cpi	r24, 0x28	; 40
     6a0:	31 f0       	breq	.+12     	; 0x6ae <selectKnob+0x7c>
     6a2:	1a c0       	rjmp	.+52     	; 0x6d8 <selectKnob+0xa6>
     6a4:	8a 32       	cpi	r24, 0x2A	; 42
     6a6:	69 f0       	breq	.+26     	; 0x6c2 <selectKnob+0x90>
     6a8:	8b 32       	cpi	r24, 0x2B	; 43
     6aa:	81 f0       	breq	.+32     	; 0x6cc <selectKnob+0x9a>
     6ac:	15 c0       	rjmp	.+42     	; 0x6d8 <selectKnob+0xa6>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     6ae:	85 e2       	ldi	r24, 0x25	; 37
     6b0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     6b4:	9f df       	rcall	.-194    	; 0x5f4 <startADCConversion>
		break;
     6b6:	10 c0       	rjmp	.+32     	; 0x6d8 <selectKnob+0xa6>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     6b8:	86 e2       	ldi	r24, 0x26	; 38
     6ba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     6be:	9a df       	rcall	.-204    	; 0x5f4 <startADCConversion>
		break;
     6c0:	0b c0       	rjmp	.+22     	; 0x6d8 <selectKnob+0xa6>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     6c2:	87 e2       	ldi	r24, 0x27	; 39
     6c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     6c8:	95 df       	rcall	.-214    	; 0x5f4 <startADCConversion>
		break;
     6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <selectKnob+0xa6>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     6cc:	80 e2       	ldi	r24, 0x20	; 32
     6ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     6d2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     6d6:	8e df       	rcall	.-228    	; 0x5f4 <startADCConversion>
		break;
		}
	
	}
	
}
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <updateKnob>:

void updateKnob(uint8_t select)
{
     6dc:	cf 93       	push	r28
     6de:	c8 2f       	mov	r28, r24

	knobBuffer[select] = startADCConversion(); 
     6e0:	89 df       	rcall	.-238    	; 0x5f4 <startADCConversion>
     6e2:	ec 2f       	mov	r30, r28
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	e5 5e       	subi	r30, 0xE5	; 229
     6e8:	fa 4f       	sbci	r31, 0xFA	; 250
     6ea:	80 83       	st	Z, r24
}
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <interperetKnob>:

void interperetKnob(uint8_t select)
{//this function will compare outputs, and write to our struct.
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
	select = select%44;
     6fa:	98 2f       	mov	r25, r24
     6fc:	96 95       	lsr	r25
     6fe:	96 95       	lsr	r25
     700:	2f e2       	ldi	r18, 0x2F	; 47
     702:	92 9f       	mul	r25, r18
     704:	91 2d       	mov	r25, r1
     706:	11 24       	eor	r1, r1
     708:	96 95       	lsr	r25
     70a:	2c e2       	ldi	r18, 0x2C	; 44
     70c:	92 9f       	mul	r25, r18
     70e:	80 19       	sub	r24, r0
     710:	11 24       	eor	r1, r1
     712:	98 2f       	mov	r25, r24
	//we might not need this with the IIR filter
	float volumeDivisor = 3.1875;
	
	
	//Change from FIR filter to IIR filter.
     checkBuffer[select] += ((knobBuffer[select]-checkBuffer[select])/2);
     714:	a8 2f       	mov	r26, r24
     716:	b0 e0       	ldi	r27, 0x00	; 0
     718:	fd 01       	movw	r30, r26
     71a:	ef 50       	subi	r30, 0x0F	; 15
     71c:	fa 4f       	sbci	r31, 0xFA	; 250
     71e:	60 81       	ld	r22, Z
     720:	fd 01       	movw	r30, r26
     722:	e5 5e       	subi	r30, 0xE5	; 229
     724:	fa 4f       	sbci	r31, 0xFA	; 250
     726:	e0 81       	ld	r30, Z
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	e6 1b       	sub	r30, r22
     72c:	f1 09       	sbc	r31, r1
     72e:	af 01       	movw	r20, r30
     730:	12 f4       	brpl	.+4      	; 0x736 <interperetKnob+0x46>
     732:	4f 5f       	subi	r20, 0xFF	; 255
     734:	5f 4f       	sbci	r21, 0xFF	; 255
     736:	55 95       	asr	r21
     738:	47 95       	ror	r20
     73a:	46 0f       	add	r20, r22
     73c:	af 50       	subi	r26, 0x0F	; 15
     73e:	ba 4f       	sbci	r27, 0xFA	; 250
     740:	4c 93       	st	X, r20
	
	
	if (select<40)
     742:	98 32       	cpi	r25, 0x28	; 40
     744:	08 f0       	brcs	.+2      	; 0x748 <interperetKnob+0x58>
     746:	1a c2       	rjmp	.+1076   	; 0xb7c <interperetKnob+0x48c>
	{
		uint8_t positionSelect = select%8;
     748:	c9 2f       	mov	r28, r25
     74a:	c7 70       	andi	r28, 0x07	; 7
		uint8_t bankSwitch = select/8;
		switch (bankSwitch)
     74c:	96 95       	lsr	r25
     74e:	96 95       	lsr	r25
     750:	96 95       	lsr	r25
     752:	92 30       	cpi	r25, 0x02	; 2
     754:	09 f4       	brne	.+2      	; 0x758 <interperetKnob+0x68>
     756:	da c0       	rjmp	.+436    	; 0x90c <interperetKnob+0x21c>
     758:	30 f4       	brcc	.+12     	; 0x766 <interperetKnob+0x76>
     75a:	99 23       	and	r25, r25
     75c:	59 f0       	breq	.+22     	; 0x774 <interperetKnob+0x84>
     75e:	91 30       	cpi	r25, 0x01	; 1
     760:	09 f4       	brne	.+2      	; 0x764 <interperetKnob+0x74>
     762:	96 c0       	rjmp	.+300    	; 0x890 <interperetKnob+0x1a0>
     764:	2a c2       	rjmp	.+1108   	; 0xbba <interperetKnob+0x4ca>
     766:	93 30       	cpi	r25, 0x03	; 3
     768:	09 f4       	brne	.+2      	; 0x76c <interperetKnob+0x7c>
     76a:	55 c1       	rjmp	.+682    	; 0xa16 <interperetKnob+0x326>
     76c:	94 30       	cpi	r25, 0x04	; 4
     76e:	09 f4       	brne	.+2      	; 0x772 <interperetKnob+0x82>
     770:	6f c1       	rjmp	.+734    	; 0xa50 <interperetKnob+0x360>
     772:	23 c2       	rjmp	.+1094   	; 0xbba <interperetKnob+0x4ca>
		{
			
			case 0:; //switch cases are "labels", used for goto stuff. so, you have to end the label before declaring variables. should be fine?
			
			int16_t currentOutVoulume = ((currentPattern.outputLevelMSB[positionSelect]<<8)|(currentPattern.outputLevelLSB[positionSelect])); 
     774:	0c 2f       	mov	r16, r28
     776:	10 e0       	ldi	r17, 0x00	; 0
			//this should be a regular integer between -70 and +10
			int16_t negCheckValue = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     778:	64 2f       	mov	r22, r20
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__floatsisf>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	4c e4       	ldi	r20, 0x4C	; 76
     78a:	50 e4       	ldi	r21, 0x40	; 64
     78c:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__divsf3>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	4c e8       	ldi	r20, 0x8C	; 140
     796:	52 e4       	ldi	r21, 0x42	; 66
     798:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__subsf3>
     79c:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__fixsfsi>
     7a0:	86 2f       	mov	r24, r22
     7a2:	97 2f       	mov	r25, r23
     7a4:	9c 01       	movw	r18, r24
		switch (bankSwitch)
		{
			
			case 0:; //switch cases are "labels", used for goto stuff. so, you have to end the label before declaring variables. should be fine?
			
			int16_t currentOutVoulume = ((currentPattern.outputLevelMSB[positionSelect]<<8)|(currentPattern.outputLevelLSB[positionSelect])); 
     7a6:	f8 01       	movw	r30, r16
     7a8:	e2 59       	subi	r30, 0x92	; 146
     7aa:	fc 4f       	sbci	r31, 0xFC	; 252
			//this should be a regular integer between -70 and +10
			int16_t negCheckValue = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentOutVoulume!=negCheckValue)
     7ac:	80 81       	ld	r24, Z
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	98 2f       	mov	r25, r24
     7b2:	88 27       	eor	r24, r24
     7b4:	40 85       	ldd	r20, Z+8	; 0x08
     7b6:	84 2b       	or	r24, r20
     7b8:	82 17       	cp	r24, r18
     7ba:	93 07       	cpc	r25, r19
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <interperetKnob+0xd0>
     7be:	fd c1       	rjmp	.+1018   	; 0xbba <interperetKnob+0x4ca>
			{
				currentPattern.outputLevelLSB[positionSelect] = (negCheckValue);
     7c0:	f8 01       	movw	r30, r16
     7c2:	e2 59       	subi	r30, 0x92	; 146
     7c4:	fc 4f       	sbci	r31, 0xFC	; 252
     7c6:	60 87       	std	Z+8, r22	; 0x08
				if(negCheckValue>(-1))
     7c8:	33 23       	and	r19, r19
     7ca:	64 f1       	brlt	.+88     	; 0x824 <interperetKnob+0x134>
				{
					currentPattern.outputLevelMSB[positionSelect] = 0;
     7cc:	f8 01       	movw	r30, r16
     7ce:	e2 59       	subi	r30, 0x92	; 146
     7d0:	fc 4f       	sbci	r31, 0xFC	; 252
     7d2:	10 82       	st	Z, r1
					//just hard coding this for now until we make a function.
					outVolumePrint[14] = 48;
     7d4:	ec e3       	ldi	r30, 0x3C	; 60
     7d6:	f2 e0       	ldi	r31, 0x02	; 2
     7d8:	80 e3       	ldi	r24, 0x30	; 48
     7da:	86 87       	std	Z+14, r24	; 0x0e
					outVolumePrint[16] = (currentPattern.outputLevelLSB[positionSelect]%10)+48;
     7dc:	2d ec       	ldi	r18, 0xCD	; 205
     7de:	62 9f       	mul	r22, r18
     7e0:	81 2d       	mov	r24, r1
     7e2:	11 24       	eor	r1, r1
     7e4:	86 95       	lsr	r24
     7e6:	86 95       	lsr	r24
     7e8:	86 95       	lsr	r24
     7ea:	88 0f       	add	r24, r24
     7ec:	98 2f       	mov	r25, r24
     7ee:	99 0f       	add	r25, r25
     7f0:	99 0f       	add	r25, r25
     7f2:	89 0f       	add	r24, r25
     7f4:	96 2f       	mov	r25, r22
     7f6:	98 1b       	sub	r25, r24
     7f8:	89 2f       	mov	r24, r25
     7fa:	80 5d       	subi	r24, 0xD0	; 208
     7fc:	80 8b       	std	Z+16, r24	; 0x10
					outVolumePrint[15] = ((currentPattern.outputLevelLSB[positionSelect]%100)/10)+48;
     7fe:	89 e2       	ldi	r24, 0x29	; 41
     800:	68 9f       	mul	r22, r24
     802:	81 2d       	mov	r24, r1
     804:	11 24       	eor	r1, r1
     806:	82 95       	swap	r24
     808:	8f 70       	andi	r24, 0x0F	; 15
     80a:	94 e6       	ldi	r25, 0x64	; 100
     80c:	89 9f       	mul	r24, r25
     80e:	60 19       	sub	r22, r0
     810:	11 24       	eor	r1, r1
     812:	62 9f       	mul	r22, r18
     814:	61 2d       	mov	r22, r1
     816:	11 24       	eor	r1, r1
     818:	66 95       	lsr	r22
     81a:	66 95       	lsr	r22
     81c:	66 95       	lsr	r22
     81e:	60 5d       	subi	r22, 0xD0	; 208
     820:	67 87       	std	Z+15, r22	; 0x0f
     822:	23 c0       	rjmp	.+70     	; 0x86a <interperetKnob+0x17a>
				}else
				{
					currentPattern.outputLevelMSB[positionSelect] = 255;
     824:	8f ef       	ldi	r24, 0xFF	; 255
     826:	f8 01       	movw	r30, r16
     828:	e2 59       	subi	r30, 0x92	; 146
     82a:	fc 4f       	sbci	r31, 0xFC	; 252
     82c:	80 83       	st	Z, r24
					outVolumePrint[14] = '-';
     82e:	ec e3       	ldi	r30, 0x3C	; 60
     830:	f2 e0       	ldi	r31, 0x02	; 2
     832:	8d e2       	ldi	r24, 0x2D	; 45
     834:	86 87       	std	Z+14, r24	; 0x0e
					outVolumePrint[15] = ((((currentPattern.outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     836:	60 95       	com	r22
     838:	26 2f       	mov	r18, r22
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	2f 5f       	subi	r18, 0xFF	; 255
     83e:	3f 4f       	sbci	r19, 0xFF	; 255
     840:	c9 01       	movw	r24, r18
     842:	64 e6       	ldi	r22, 0x64	; 100
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__divmodhi4>
     84a:	0f 2e       	mov	r0, r31
     84c:	fa e0       	ldi	r31, 0x0A	; 10
     84e:	ef 2e       	mov	r14, r31
     850:	f1 2c       	mov	r15, r1
     852:	f0 2d       	mov	r31, r0
     854:	b7 01       	movw	r22, r14
     856:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__divmodhi4>
     85a:	60 5d       	subi	r22, 0xD0	; 208
     85c:	67 87       	std	Z+15, r22	; 0x0f
					outVolumePrint[16] = (((currentPattern.outputLevelLSB[positionSelect]^255)+1)%10)+48;
     85e:	c9 01       	movw	r24, r18
     860:	b7 01       	movw	r22, r14
     862:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__divmodhi4>
     866:	80 5d       	subi	r24, 0xD0	; 208
     868:	80 8b       	std	Z+16, r24	; 0x10
				}
				//then output to screen. 
				outVolumePrint[10] = positionSelect + 49;
     86a:	cf 5c       	subi	r28, 0xCF	; 207
     86c:	c0 93 46 02 	sts	0x0246, r28	; 0x800246 <outVolumePrint+0xa>
				outputS(outVolumePrint, 3);
     870:	63 e0       	ldi	r22, 0x03	; 3
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	8c e3       	ldi	r24, 0x3C	; 60
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	0c d7       	rcall	.+3608   	; 0x1692 <outputS>
				setOutputVolume(currentPattern.outputLevelLSB[positionSelect], currentPattern.outputLevelMSB[positionSelect], positionSelect);
     87a:	f8 01       	movw	r30, r16
     87c:	e2 59       	subi	r30, 0x92	; 146
     87e:	fc 4f       	sbci	r31, 0xFC	; 252
     880:	60 81       	ld	r22, Z
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	80 85       	ldd	r24, Z+8	; 0x08
     886:	a8 01       	movw	r20, r16
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <setOutputVolume>
     88e:	95 c1       	rjmp	.+810    	; 0xbba <interperetKnob+0x4ca>
			}
			break;
			
 			case 1:
 			if(currentPattern.outputPitch[positionSelect]!=(checkBuffer[select]^128))
     890:	0c 2f       	mov	r16, r28
     892:	10 e0       	ldi	r17, 0x00	; 0
     894:	60 e8       	ldi	r22, 0x80	; 128
     896:	64 0f       	add	r22, r20
     898:	f8 01       	movw	r30, r16
     89a:	e2 59       	subi	r30, 0x92	; 146
     89c:	fc 4f       	sbci	r31, 0xFC	; 252
     89e:	80 89       	ldd	r24, Z+16	; 0x10
     8a0:	86 17       	cp	r24, r22
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <interperetKnob+0x1b6>
     8a4:	8a c1       	rjmp	.+788    	; 0xbba <interperetKnob+0x4ca>
 			{
 				(currentPattern.outputPitch[positionSelect]) = (checkBuffer[select]^128);
     8a6:	f8 01       	movw	r30, r16
     8a8:	e2 59       	subi	r30, 0x92	; 146
     8aa:	fc 4f       	sbci	r31, 0xFC	; 252
     8ac:	60 8b       	std	Z+16, r22	; 0x10
				 if(encoderAValue == 0)
     8ae:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <encoderAValue>
     8b2:	81 11       	cpse	r24, r1
     8b4:	20 c0       	rjmp	.+64     	; 0x8f6 <interperetKnob+0x206>
				 {
					 pitchPrint[5] = (positionSelect+49);
     8b6:	cf 5c       	subi	r28, 0xCF	; 207
     8b8:	c0 93 55 02 	sts	0x0255, r28	; 0x800255 <pitchPrint+0x5>
					 if(currentPattern.outputPitch[positionSelect]>>7)
     8bc:	66 23       	and	r22, r22
     8be:	64 f4       	brge	.+24     	; 0x8d8 <interperetKnob+0x1e8>
					 {
						 //again, hard coding.
						 pitchPrint[7] = '-';
     8c0:	8d e2       	ldi	r24, 0x2D	; 45
     8c2:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <pitchPrint+0x7>
						 numPrinter(pitchPrint, 8, 3, (currentPattern.outputPitch[positionSelect]^255));
     8c6:	26 2f       	mov	r18, r22
     8c8:	20 95       	com	r18
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	43 e0       	ldi	r20, 0x03	; 3
     8ce:	68 e0       	ldi	r22, 0x08	; 8
     8d0:	80 e5       	ldi	r24, 0x50	; 80
     8d2:	92 e0       	ldi	r25, 0x02	; 2
     8d4:	f6 d6       	rcall	.+3564   	; 0x16c2 <numPrinter>
     8d6:	0a c0       	rjmp	.+20     	; 0x8ec <interperetKnob+0x1fc>
					 
					 }else{
						 pitchPrint[7] = '+';
     8d8:	8b e2       	ldi	r24, 0x2B	; 43
     8da:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <pitchPrint+0x7>
					 numPrinter(pitchPrint,8,3,currentPattern.outputPitch[positionSelect]);}
     8de:	26 2f       	mov	r18, r22
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	43 e0       	ldi	r20, 0x03	; 3
     8e4:	68 e0       	ldi	r22, 0x08	; 8
     8e6:	80 e5       	ldi	r24, 0x50	; 80
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	eb d6       	rcall	.+3542   	; 0x16c2 <numPrinter>
					 outputS(pitchPrint, 3);
     8ec:	63 e0       	ldi	r22, 0x03	; 3
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	80 e5       	ldi	r24, 0x50	; 80
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	ce d6       	rcall	.+3484   	; 0x1692 <outputS>
				 }
				 outputSampleRate(positionSelect, 0, currentPattern.outputPitch[positionSelect]);
     8f6:	f8 01       	movw	r30, r16
     8f8:	e2 59       	subi	r30, 0x92	; 146
     8fa:	fc 4f       	sbci	r31, 0xFC	; 252
     8fc:	40 89       	ldd	r20, Z+16	; 0x10
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	c8 01       	movw	r24, r16
     906:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <outputSampleRate>
     90a:	57 c1       	rjmp	.+686    	; 0xbba <interperetKnob+0x4ca>
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     90c:	0c 2f       	mov	r16, r28
     90e:	10 e0       	ldi	r17, 0x00	; 0
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     910:	64 2f       	mov	r22, r20
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__floatsisf>
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	4c e4       	ldi	r20, 0x4C	; 76
     922:	50 e4       	ldi	r21, 0x40	; 64
     924:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__divsf3>
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	4c e8       	ldi	r20, 0x8C	; 140
     92e:	52 e4       	ldi	r21, 0x42	; 66
     930:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__subsf3>
     934:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__fixsfsi>
     938:	86 2f       	mov	r24, r22
     93a:	97 2f       	mov	r25, r23
     93c:	9c 01       	movw	r18, r24
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     93e:	a8 01       	movw	r20, r16
     940:	42 59       	subi	r20, 0x92	; 146
     942:	5c 4f       	sbci	r21, 0xFC	; 252
     944:	fa 01       	movw	r30, r20
     946:	e8 5b       	subi	r30, 0xB8	; 184
     948:	ff 4f       	sbci	r31, 0xFF	; 255
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentEnvelopeVolume!=negCheckValueEnvelope)
     94a:	80 81       	ld	r24, Z
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	98 2f       	mov	r25, r24
     950:	88 27       	eor	r24, r24
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     952:	70 96       	adiw	r30, 0x10	; 16
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentEnvelopeVolume!=negCheckValueEnvelope)
     954:	40 81       	ld	r20, Z
     956:	84 2b       	or	r24, r20
     958:	82 17       	cp	r24, r18
     95a:	93 07       	cpc	r25, r19
     95c:	09 f4       	brne	.+2      	; 0x960 <interperetKnob+0x270>
     95e:	2d c1       	rjmp	.+602    	; 0xbba <interperetKnob+0x4ca>
			{
				currentPattern.trackFadeGainLSB[positionSelect] = (negCheckValueEnvelope);
     960:	f8 01       	movw	r30, r16
     962:	ea 53       	subi	r30, 0x3A	; 58
     964:	fc 4f       	sbci	r31, 0xFC	; 252
     966:	60 83       	st	Z, r22
				if(negCheckValueEnvelope>(-1))
     968:	33 23       	and	r19, r19
     96a:	64 f1       	brlt	.+88     	; 0x9c4 <interperetKnob+0x2d4>
				{
					currentPattern.trackFadeGainMSB[positionSelect] = 0;
     96c:	f8 01       	movw	r30, r16
     96e:	ea 54       	subi	r30, 0x4A	; 74
     970:	fc 4f       	sbci	r31, 0xFC	; 252
     972:	10 82       	st	Z, r1
					//just hard coding this for now until we make a function.
					envelopeLevelPrint[15] = 48;
     974:	e4 e1       	ldi	r30, 0x14	; 20
     976:	f2 e0       	ldi	r31, 0x02	; 2
     978:	80 e3       	ldi	r24, 0x30	; 48
     97a:	87 87       	std	Z+15, r24	; 0x0f
					envelopeLevelPrint[17] = (currentPattern.trackFadeGainLSB[positionSelect]%10)+48;
     97c:	2d ec       	ldi	r18, 0xCD	; 205
     97e:	62 9f       	mul	r22, r18
     980:	81 2d       	mov	r24, r1
     982:	11 24       	eor	r1, r1
     984:	86 95       	lsr	r24
     986:	86 95       	lsr	r24
     988:	86 95       	lsr	r24
     98a:	88 0f       	add	r24, r24
     98c:	98 2f       	mov	r25, r24
     98e:	99 0f       	add	r25, r25
     990:	99 0f       	add	r25, r25
     992:	89 0f       	add	r24, r25
     994:	96 2f       	mov	r25, r22
     996:	98 1b       	sub	r25, r24
     998:	89 2f       	mov	r24, r25
     99a:	80 5d       	subi	r24, 0xD0	; 208
     99c:	81 8b       	std	Z+17, r24	; 0x11
					envelopeLevelPrint[16] = ((currentPattern.trackFadeGainLSB[positionSelect]%100)/10)+48;
     99e:	89 e2       	ldi	r24, 0x29	; 41
     9a0:	68 9f       	mul	r22, r24
     9a2:	81 2d       	mov	r24, r1
     9a4:	11 24       	eor	r1, r1
     9a6:	82 95       	swap	r24
     9a8:	8f 70       	andi	r24, 0x0F	; 15
     9aa:	94 e6       	ldi	r25, 0x64	; 100
     9ac:	89 9f       	mul	r24, r25
     9ae:	60 19       	sub	r22, r0
     9b0:	11 24       	eor	r1, r1
     9b2:	62 9f       	mul	r22, r18
     9b4:	61 2d       	mov	r22, r1
     9b6:	11 24       	eor	r1, r1
     9b8:	66 95       	lsr	r22
     9ba:	66 95       	lsr	r22
     9bc:	66 95       	lsr	r22
     9be:	60 5d       	subi	r22, 0xD0	; 208
     9c0:	60 8b       	std	Z+16, r22	; 0x10
     9c2:	20 c0       	rjmp	.+64     	; 0xa04 <interperetKnob+0x314>
				}else
				{
					currentPattern.trackFadeGainMSB[positionSelect] = 255;
     9c4:	f8 01       	movw	r30, r16
     9c6:	ea 54       	subi	r30, 0x4A	; 74
     9c8:	fc 4f       	sbci	r31, 0xFC	; 252
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	80 83       	st	Z, r24
					envelopeLevelPrint[15] = '-';
     9ce:	e4 e1       	ldi	r30, 0x14	; 20
     9d0:	f2 e0       	ldi	r31, 0x02	; 2
     9d2:	8d e2       	ldi	r24, 0x2D	; 45
     9d4:	87 87       	std	Z+15, r24	; 0x0f
					envelopeLevelPrint[16] = ((((currentPattern.trackFadeGainLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     9d6:	60 95       	com	r22
     9d8:	26 2f       	mov	r18, r22
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	2f 5f       	subi	r18, 0xFF	; 255
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	c9 01       	movw	r24, r18
     9e2:	64 e6       	ldi	r22, 0x64	; 100
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__divmodhi4>
     9ea:	0a e0       	ldi	r16, 0x0A	; 10
     9ec:	10 e0       	ldi	r17, 0x00	; 0
     9ee:	b8 01       	movw	r22, r16
     9f0:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__divmodhi4>
     9f4:	60 5d       	subi	r22, 0xD0	; 208
     9f6:	60 8b       	std	Z+16, r22	; 0x10
					envelopeLevelPrint[17] = (((currentPattern.trackFadeGainLSB[positionSelect]^255)+1)%10)+48;
     9f8:	c9 01       	movw	r24, r18
     9fa:	b8 01       	movw	r22, r16
     9fc:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__divmodhi4>
     a00:	80 5d       	subi	r24, 0xD0	; 208
     a02:	81 8b       	std	Z+17, r24	; 0x11
				}
				//then output to screen.
				envelopeLevelPrint[13] = positionSelect + 49;
     a04:	cf 5c       	subi	r28, 0xCF	; 207
     a06:	c0 93 21 02 	sts	0x0221, r28	; 0x800221 <envelopeLevelPrint+0xd>
				outputS(envelopeLevelPrint, 3);
     a0a:	63 e0       	ldi	r22, 0x03	; 3
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	84 e1       	ldi	r24, 0x14	; 20
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	3f d6       	rcall	.+3198   	; 0x1692 <outputS>
     a14:	d2 c0       	rjmp	.+420    	; 0xbba <interperetKnob+0x4ca>
				//nothing to "set", since envelopes are triggered after a sound is playing.
			}
			break;
 			
 			case 3:
 			if(currentPattern.trackFadeTimeMSB[positionSelect]!=checkBuffer[select])
     a16:	8c 2f       	mov	r24, r28
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	fc 01       	movw	r30, r24
     a1c:	ea 52       	subi	r30, 0x2A	; 42
     a1e:	fc 4f       	sbci	r31, 0xFC	; 252
     a20:	20 81       	ld	r18, Z
     a22:	42 17       	cp	r20, r18
     a24:	09 f4       	brne	.+2      	; 0xa28 <interperetKnob+0x338>
     a26:	c9 c0       	rjmp	.+402    	; 0xbba <interperetKnob+0x4ca>
 			{
 				(currentPattern.trackFadeTimeMSB[positionSelect]) = checkBuffer[select];
     a28:	fc 01       	movw	r30, r24
     a2a:	ea 52       	subi	r30, 0x2A	; 42
     a2c:	fc 4f       	sbci	r31, 0xFC	; 252
     a2e:	40 83       	st	Z, r20
				 numPrinter(envelopeTimePrint,14,4,currentPattern.trackFadeTimeMSB[positionSelect]);
     a30:	24 2f       	mov	r18, r20
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	44 e0       	ldi	r20, 0x04	; 4
     a36:	6e e0       	ldi	r22, 0x0E	; 14
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	92 e0       	ldi	r25, 0x02	; 2
     a3c:	42 d6       	rcall	.+3204   	; 0x16c2 <numPrinter>
				 envelopeTimePrint[12] = positionSelect+49;
     a3e:	cf 5c       	subi	r28, 0xCF	; 207
     a40:	c0 93 0c 02 	sts	0x020C, r28	; 0x80020c <__data_start+0xc>
				 outputS(envelopeTimePrint, 3);
     a44:	63 e0       	ldi	r22, 0x03	; 3
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	92 e0       	ldi	r25, 0x02	; 2
     a4c:	22 d6       	rcall	.+3140   	; 0x1692 <outputS>
     a4e:	b5 c0       	rjmp	.+362    	; 0xbba <interperetKnob+0x4ca>
 			}
 			break;
 			
 			case 4:;
 			int16_t currentTrackVolume = ((currentPattern.trackMainVolumeMSB[positionSelect]<<8)|(currentPattern.trackMainVolumeLSB[positionSelect]));
     a50:	0c 2f       	mov	r16, r28
     a52:	10 e0       	ldi	r17, 0x00	; 0
 			int16_t negCheckValueTrack = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     a54:	64 2f       	mov	r22, r20
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__floatsisf>
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	4c e4       	ldi	r20, 0x4C	; 76
     a66:	50 e4       	ldi	r21, 0x40	; 64
     a68:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__divsf3>
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	4c e8       	ldi	r20, 0x8C	; 140
     a72:	52 e4       	ldi	r21, 0x42	; 66
     a74:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__subsf3>
     a78:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__fixsfsi>
     a7c:	86 2f       	mov	r24, r22
     a7e:	97 2f       	mov	r25, r23
     a80:	9c 01       	movw	r18, r24
				 outputS(envelopeTimePrint, 3);
 			}
 			break;
 			
 			case 4:;
 			int16_t currentTrackVolume = ((currentPattern.trackMainVolumeMSB[positionSelect]<<8)|(currentPattern.trackMainVolumeLSB[positionSelect]));
     a82:	f8 01       	movw	r30, r16
     a84:	e2 59       	subi	r30, 0x92	; 146
     a86:	fc 4f       	sbci	r31, 0xFC	; 252
 			int16_t negCheckValueTrack = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
 			if(currentTrackVolume!=negCheckValueTrack)
     a88:	80 a5       	ldd	r24, Z+40	; 0x28
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	98 2f       	mov	r25, r24
     a8e:	88 27       	eor	r24, r24
     a90:	40 ad       	ldd	r20, Z+56	; 0x38
     a92:	84 2b       	or	r24, r20
     a94:	82 17       	cp	r24, r18
     a96:	93 07       	cpc	r25, r19
     a98:	09 f4       	brne	.+2      	; 0xa9c <interperetKnob+0x3ac>
     a9a:	8f c0       	rjmp	.+286    	; 0xbba <interperetKnob+0x4ca>
 			{
	 			currentPattern.trackMainVolumeLSB[positionSelect] = (negCheckValueTrack);
     a9c:	f8 01       	movw	r30, r16
     a9e:	e2 59       	subi	r30, 0x92	; 146
     aa0:	fc 4f       	sbci	r31, 0xFC	; 252
     aa2:	60 af       	std	Z+56, r22	; 0x38
	 			if(negCheckValueTrack>(-1))
     aa4:	33 23       	and	r19, r19
     aa6:	64 f1       	brlt	.+88     	; 0xb00 <interperetKnob+0x410>
	 			{
		 			currentPattern.trackMainVolumeMSB[positionSelect] = 0;
     aa8:	f8 01       	movw	r30, r16
     aaa:	e2 59       	subi	r30, 0x92	; 146
     aac:	fc 4f       	sbci	r31, 0xFC	; 252
     aae:	10 a6       	std	Z+40, r1	; 0x28
		 			//just hard coding this for now until we make a function.
		 			trackVolumePrint[15] = 48;
     ab0:	e8 e2       	ldi	r30, 0x28	; 40
     ab2:	f2 e0       	ldi	r31, 0x02	; 2
     ab4:	80 e3       	ldi	r24, 0x30	; 48
     ab6:	87 87       	std	Z+15, r24	; 0x0f
		 			trackVolumePrint[17] = (currentPattern.trackMainVolumeLSB[positionSelect]%10)+48;
     ab8:	2d ec       	ldi	r18, 0xCD	; 205
     aba:	62 9f       	mul	r22, r18
     abc:	81 2d       	mov	r24, r1
     abe:	11 24       	eor	r1, r1
     ac0:	86 95       	lsr	r24
     ac2:	86 95       	lsr	r24
     ac4:	86 95       	lsr	r24
     ac6:	88 0f       	add	r24, r24
     ac8:	98 2f       	mov	r25, r24
     aca:	99 0f       	add	r25, r25
     acc:	99 0f       	add	r25, r25
     ace:	89 0f       	add	r24, r25
     ad0:	96 2f       	mov	r25, r22
     ad2:	98 1b       	sub	r25, r24
     ad4:	89 2f       	mov	r24, r25
     ad6:	80 5d       	subi	r24, 0xD0	; 208
     ad8:	81 8b       	std	Z+17, r24	; 0x11
		 			trackVolumePrint[16] = ((currentPattern.trackMainVolumeLSB[positionSelect]%100)/10)+48;
     ada:	89 e2       	ldi	r24, 0x29	; 41
     adc:	68 9f       	mul	r22, r24
     ade:	81 2d       	mov	r24, r1
     ae0:	11 24       	eor	r1, r1
     ae2:	82 95       	swap	r24
     ae4:	8f 70       	andi	r24, 0x0F	; 15
     ae6:	94 e6       	ldi	r25, 0x64	; 100
     ae8:	89 9f       	mul	r24, r25
     aea:	60 19       	sub	r22, r0
     aec:	11 24       	eor	r1, r1
     aee:	62 9f       	mul	r22, r18
     af0:	61 2d       	mov	r22, r1
     af2:	11 24       	eor	r1, r1
     af4:	66 95       	lsr	r22
     af6:	66 95       	lsr	r22
     af8:	66 95       	lsr	r22
     afa:	60 5d       	subi	r22, 0xD0	; 208
     afc:	60 8b       	std	Z+16, r22	; 0x10
     afe:	23 c0       	rjmp	.+70     	; 0xb46 <interperetKnob+0x456>
	 			}else
	 			{
		 			currentPattern.trackMainVolumeMSB[positionSelect] = 255;
     b00:	8f ef       	ldi	r24, 0xFF	; 255
     b02:	f8 01       	movw	r30, r16
     b04:	e2 59       	subi	r30, 0x92	; 146
     b06:	fc 4f       	sbci	r31, 0xFC	; 252
     b08:	80 a7       	std	Z+40, r24	; 0x28
		 			trackVolumePrint[15] = '-';
     b0a:	e8 e2       	ldi	r30, 0x28	; 40
     b0c:	f2 e0       	ldi	r31, 0x02	; 2
     b0e:	8d e2       	ldi	r24, 0x2D	; 45
     b10:	87 87       	std	Z+15, r24	; 0x0f
		 			trackVolumePrint[16] = ((((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     b12:	60 95       	com	r22
     b14:	26 2f       	mov	r18, r22
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	2f 5f       	subi	r18, 0xFF	; 255
     b1a:	3f 4f       	sbci	r19, 0xFF	; 255
     b1c:	c9 01       	movw	r24, r18
     b1e:	64 e6       	ldi	r22, 0x64	; 100
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__divmodhi4>
     b26:	0f 2e       	mov	r0, r31
     b28:	fa e0       	ldi	r31, 0x0A	; 10
     b2a:	ef 2e       	mov	r14, r31
     b2c:	f1 2c       	mov	r15, r1
     b2e:	f0 2d       	mov	r31, r0
     b30:	b7 01       	movw	r22, r14
     b32:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__divmodhi4>
     b36:	60 5d       	subi	r22, 0xD0	; 208
     b38:	60 8b       	std	Z+16, r22	; 0x10
		 			trackVolumePrint[17] = (((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
     b3a:	c9 01       	movw	r24, r18
     b3c:	b7 01       	movw	r22, r14
     b3e:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__divmodhi4>
     b42:	80 5d       	subi	r24, 0xD0	; 208
     b44:	81 8b       	std	Z+17, r24	; 0x11
	 			}
	 			//then output to screen.
	 			trackVolumePrint[11] = positionSelect + 49;
     b46:	cf 5c       	subi	r28, 0xCF	; 207
     b48:	c0 93 33 02 	sts	0x0233, r28	; 0x800233 <trackVolumePrint+0xb>
	 			outputS(trackVolumePrint, 3);
     b4c:	63 e0       	ldi	r22, 0x03	; 3
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	88 e2       	ldi	r24, 0x28	; 40
     b52:	92 e0       	ldi	r25, 0x02	; 2
     b54:	9e d5       	rcall	.+2876   	; 0x1692 <outputS>
	 			setTrackVolume(currentPattern.trackSampleLSB[positionSelect], currentPattern.trackSampleMSB[positionSelect],
				 currentPattern.trackMainVolumeLSB[positionSelect], currentPattern.trackMainVolumeMSB[positionSelect]);
     b56:	f8 01       	movw	r30, r16
     b58:	e2 59       	subi	r30, 0x92	; 146
     b5a:	fc 4f       	sbci	r31, 0xFC	; 252
		 			trackVolumePrint[17] = (((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
	 			}
	 			//then output to screen.
	 			trackVolumePrint[11] = positionSelect + 49;
	 			outputS(trackVolumePrint, 3);
	 			setTrackVolume(currentPattern.trackSampleLSB[positionSelect], currentPattern.trackSampleMSB[positionSelect],
     b5c:	20 a5       	ldd	r18, Z+40	; 0x28
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	40 ad       	ldd	r20, Z+56	; 0x38
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	df 01       	movw	r26, r30
     b66:	a8 56       	subi	r26, 0x68	; 104
     b68:	bf 4f       	sbci	r27, 0xFF	; 255
     b6a:	6c 91       	ld	r22, X
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	e8 55       	subi	r30, 0x58	; 88
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	80 81       	ld	r24, Z
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <setTrackVolume>
     b7a:	1f c0       	rjmp	.+62     	; 0xbba <interperetKnob+0x4ca>
		}
		
		
	}else
	{
		switch (select)
     b7c:	9a 32       	cpi	r25, 0x2A	; 42
     b7e:	e9 f4       	brne	.+58     	; 0xbba <interperetKnob+0x4ca>
// 				gpKnob1 = checkValue;
// 			}
// 			break;
// 			
 			case 42:
 			if(currentPattern.patternBPM!=checkBuffer[select]+30)
     b80:	24 2f       	mov	r18, r20
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	22 5e       	subi	r18, 0xE2	; 226
     b86:	3f 4f       	sbci	r19, 0xFF	; 255
     b88:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <currentPattern+0x158>
     b8c:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <currentPattern+0x159>
     b90:	82 17       	cp	r24, r18
     b92:	93 07       	cpc	r25, r19
     b94:	91 f0       	breq	.+36     	; 0xbba <interperetKnob+0x4ca>
			{
 				currentPattern.patternBPM = checkBuffer[select]+30;
     b96:	30 93 c7 04 	sts	0x04C7, r19	; 0x8004c7 <currentPattern+0x159>
     b9a:	20 93 c6 04 	sts	0x04C6, r18	; 0x8004c6 <currentPattern+0x158>
				if(encoderAValue==0){
     b9e:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <encoderAValue>
     ba2:	81 11       	cpse	r24, r1
				 numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
     ba4:	0a c0       	rjmp	.+20     	; 0xbba <interperetKnob+0x4ca>
     ba6:	43 e0       	ldi	r20, 0x03	; 3
     ba8:	65 e0       	ldi	r22, 0x05	; 5
     baa:	8f e6       	ldi	r24, 0x6F	; 111
     bac:	95 e0       	ldi	r25, 0x05	; 5
				 outputS(screen0[2], 2);
     bae:	89 d5       	rcall	.+2834   	; 0x16c2 <numPrinter>
     bb0:	62 e0       	ldi	r22, 0x02	; 2
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	8f e6       	ldi	r24, 0x6F	; 111
     bb6:	95 e0       	ldi	r25, 0x05	; 5
     bb8:	6c d5       	rcall	.+2776   	; 0x1692 <outputS>
// 			break;
		}
		
	}

}
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	08 95       	ret

00000bc6 <listenKnobs>:

void listenKnobs()
{
     bc6:	cf 93       	push	r28
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     bc8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
     bca:	8c 2f       	mov	r24, r28
     bcc:	32 dd       	rcall	.-1436   	; 0x632 <selectKnob>
		updateKnob(loopCounter);
     bce:	8c 2f       	mov	r24, r28
     bd0:	85 dd       	rcall	.-1270   	; 0x6dc <updateKnob>
		interperetKnob(loopCounter);
     bd2:	8c 2f       	mov	r24, r28
     bd4:	8d dd       	rcall	.-1254   	; 0x6f0 <interperetKnob>
     bd6:	cf 5f       	subi	r28, 0xFF	; 255

}

void listenKnobs()
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     bd8:	cc 32       	cpi	r28, 0x2C	; 44
     bda:	b9 f7       	brne	.-18     	; 0xbca <listenKnobs+0x4>
     bdc:	cf 91       	pop	r28
		updateKnob(loopCounter);
		interperetKnob(loopCounter);
	}


}
     bde:	08 95       	ret

00000be0 <initLEDs>:

uint16_t holdTrig = 0;

void initLEDs()
{
	DDRG = 0B00100101; //outputs on G5,2, and 0.
     be0:	85 e2       	ldi	r24, 0x25	; 37
     be2:	83 bb       	out	0x13, r24	; 19
     be4:	08 95       	ret

00000be6 <parseLEDs>:

}
void parseLEDs(uint16_t LEDInput)
{
     be6:	9c 01       	movw	r18, r24
	uint16_t trigLEDParse = LEDInput;
	PORTG &= (~(1 << PG2)); //set latch low for data input
     be8:	a2 98       	cbi	0x14, 2	; 20
     bea:	91 e1       	ldi	r25, 0x11	; 17
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
     bec:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
     bee:	33 23       	and	r19, r19
     bf0:	14 f4       	brge	.+4      	; 0xbf6 <parseLEDs+0x10>
		{
			PORTG |= (1 << PG5); //send current 1's place bit to the data pin
     bf2:	a5 9a       	sbi	0x14, 5	; 20
     bf4:	01 c0       	rjmp	.+2      	; 0xbf8 <parseLEDs+0x12>
		}
		else
		{
			PORTG &= (~(1 << PG5));
     bf6:	a5 98       	cbi	0x14, 5	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
     bf8:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
     bfa:	22 0f       	add	r18, r18
     bfc:	33 1f       	adc	r19, r19
     bfe:	91 50       	subi	r25, 0x01	; 1
}
void parseLEDs(uint16_t LEDInput)
{
	uint16_t trigLEDParse = LEDInput;
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t i = 0; i<17; i++)
     c00:	a9 f7       	brne	.-22     	; 0xbec <parseLEDs+0x6>
			PORTG &= (~(1 << PG5));
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	PORTG |= (1 << PG2); //latch pin high
     c02:	a2 9a       	sbi	0x14, 2	; 20
     c04:	08 95       	ret

00000c06 <updateLEDs>:
}

void updateLEDs()
{
	switch(encoderAValue)
     c06:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <encoderAValue>
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	61 f0       	breq	.+24     	; 0xc26 <updateLEDs+0x20>
     c0e:	28 f0       	brcs	.+10     	; 0xc1a <updateLEDs+0x14>
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	a1 f0       	breq	.+40     	; 0xc3c <updateLEDs+0x36>
     c14:	83 30       	cpi	r24, 0x03	; 3
     c16:	c1 f0       	breq	.+48     	; 0xc48 <updateLEDs+0x42>
     c18:	08 95       	ret
	{
		case 0:
		parseLEDs(currentTrigButtons);
     c1a:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <currentTrigButtons>
     c1e:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <currentTrigButtons+0x1>
     c22:	e1 cf       	rjmp	.-62     	; 0xbe6 <parseLEDs>
		break;
     c24:	08 95       	ret
		
		case 1:
		parseLEDs(currentPattern.trackSequence[currentStep]);
     c26:	e0 91 73 06 	lds	r30, 0x0673	; 0x800673 <currentStep>
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	ea 5c       	subi	r30, 0xCA	; 202
     c32:	fb 4f       	sbci	r31, 0xFB	; 251
     c34:	80 81       	ld	r24, Z
     c36:	91 81       	ldd	r25, Z+1	; 0x01
     c38:	d6 cf       	rjmp	.-84     	; 0xbe6 <parseLEDs>
		break;
     c3a:	08 95       	ret
		
		case 2:
		parseLEDs(currentTrigButtons);
     c3c:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <currentTrigButtons>
     c40:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <currentTrigButtons+0x1>
     c44:	d0 cf       	rjmp	.-96     	; 0xbe6 <parseLEDs>
		break;
     c46:	08 95       	ret
		
		case 3:
		parseLEDs(currentTrigButtons);
     c48:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <currentTrigButtons>
     c4c:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <currentTrigButtons+0x1>
     c50:	ca cf       	rjmp	.-108    	; 0xbe6 <parseLEDs>
     c52:	08 95       	ret

00000c54 <main>:
#include <avr/interrupt.h>


int main(void)
{
	midiChannel = 0; //for now, need to change this from load memory
     c54:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <midiChannel>
	initBank();
     c58:	07 dc       	rcall	.-2034   	; 0x468 <initBank>
	initScreen();
     c5a:	be d4       	rcall	.+2428   	; 0x15d8 <initScreen>
	initButtons();
     c5c:	64 da       	rcall	.-2872   	; 0x126 <initButtons>
	initLEDs();
     c5e:	c0 df       	rcall	.-128    	; 0xbe0 <initLEDs>
	initEncoders();
     c60:	8e db       	rcall	.-2276   	; 0x37e <initEncoders>
	initMenu();
     c62:	10 d0       	rcall	.+32     	; 0xc84 <initMenu>
	initADC();
     c64:	d2 dc       	rcall	.-1628   	; 0x60a <initADC>
	serialInit0();
     c66:	6e d7       	rcall	.+3804   	; 0x1b44 <serialInit0>
	sei();
	 //this will be necessary on first startup, but maybe not in the actual program? maybe just something handy to have.
	//loadMemory(); //we need to load in the first struct in locarion 0 of our eeprom.
	while (1)
	{
		listenTrigButtons();
     c68:	78 94       	sei
		listenMidi();
     c6a:	64 da       	rcall	.-2872   	; 0x134 <listenTrigButtons>
		listenGPButtons();
     c6c:	12 d4       	rcall	.+2084   	; 0x1492 <listenMidi>
     c6e:	74 db       	rcall	.-2328   	; 0x358 <listenGPButtons>
		listenMidi();
     c70:	10 d4       	rcall	.+2080   	; 0x1492 <listenMidi>
     c72:	c9 df       	rcall	.-110    	; 0xc06 <updateLEDs>
		updateLEDs();
     c74:	0e d4       	rcall	.+2076   	; 0x1492 <listenMidi>
     c76:	b5 db       	rcall	.-2198   	; 0x3e2 <listenEncoders>
		listenMidi();
     c78:	0c d4       	rcall	.+2072   	; 0x1492 <listenMidi>
     c7a:	a5 df       	rcall	.-182    	; 0xbc6 <listenKnobs>
		listenEncoders();
     c7c:	0a d4       	rcall	.+2068   	; 0x1492 <listenMidi>
     c7e:	42 d0       	rcall	.+132    	; 0xd04 <updateScreen>
		listenMidi();
     c80:	08 d4       	rcall	.+2064   	; 0x1492 <listenMidi>
     c82:	f3 cf       	rjmp	.-26     	; 0xc6a <main+0x16>

00000c84 <initMenu>:
		listenKnobs();
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
		listenMidi();
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
		//updateSequence();
		updateScreen();
     c8c:	c6 ec       	ldi	r28, 0xC6	; 198
     c8e:	d4 e0       	ldi	r29, 0x04	; 4
		listenMidi();
     c90:	28 81       	ld	r18, Y
     c92:	39 81       	ldd	r19, Y+1	; 0x01
     c94:	43 e0       	ldi	r20, 0x03	; 3
char midiNote[3] = "C-0";

void initMenu()
{

numPrinter(screen0[2],5,3, currentPattern.patternBPM);
     c96:	65 e0       	ldi	r22, 0x05	; 5
     c98:	8f e6       	ldi	r24, 0x6F	; 111
     c9a:	95 e0       	ldi	r25, 0x05	; 5
     c9c:	12 d5       	rcall	.+2596   	; 0x16c2 <numPrinter>
numPrinter(screen3[1],14,2, (midiChannel+1));
     c9e:	20 91 99 05 	lds	r18, 0x0599	; 0x800599 <midiChannel>
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	2f 5f       	subi	r18, 0xFF	; 255
     ca6:	3f 4f       	sbci	r19, 0xFF	; 255
     ca8:	42 e0       	ldi	r20, 0x02	; 2
     caa:	6e e0       	ldi	r22, 0x0E	; 14
     cac:	83 e3       	ldi	r24, 0x33	; 51
     cae:	96 e0       	ldi	r25, 0x06	; 6
     cb0:	08 d5       	rcall	.+2576   	; 0x16c2 <numPrinter>
numPrinter(screen0[1], 9, 3, currentPatternNumber);
     cb2:	20 91 1d 06 	lds	r18, 0x061D	; 0x80061d <currentPatternNumber>
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	43 e0       	ldi	r20, 0x03	; 3
     cba:	69 e0       	ldi	r22, 0x09	; 9
     cbc:	8b e5       	ldi	r24, 0x5B	; 91
     cbe:	95 e0       	ldi	r25, 0x05	; 5
     cc0:	00 d5       	rcall	.+2560   	; 0x16c2 <numPrinter>
numPrinter(screen1[1], 9, 3, currentPatternNumber);
     cc2:	20 91 1d 06 	lds	r18, 0x061D	; 0x80061d <currentPatternNumber>
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	43 e0       	ldi	r20, 0x03	; 3
     cca:	69 e0       	ldi	r22, 0x09	; 9
     ccc:	8f ed       	ldi	r24, 0xDF	; 223
     cce:	94 e0       	ldi	r25, 0x04	; 4
     cd0:	f8 d4       	rcall	.+2544   	; 0x16c2 <numPrinter>
numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
     cd2:	28 81       	ld	r18, Y
     cd4:	39 81       	ldd	r19, Y+1	; 0x01
     cd6:	43 e0       	ldi	r20, 0x03	; 3
     cd8:	65 e0       	ldi	r22, 0x05	; 5
     cda:	8f e6       	ldi	r24, 0x6F	; 111
     cdc:	95 e0       	ldi	r25, 0x05	; 5
     cde:	f1 d4       	rcall	.+2530   	; 0x16c2 <numPrinter>
     ce0:	07 e4       	ldi	r16, 0x47	; 71
     ce2:	15 e0       	ldi	r17, 0x05	; 5
     ce4:	c0 e0       	ldi	r28, 0x00	; 0

for(uint8_t i=0;i<4; i++ ){
	outputS(screen0[i],i);
     ce6:	d0 e0       	ldi	r29, 0x00	; 0
     ce8:	be 01       	movw	r22, r28
     cea:	c8 01       	movw	r24, r16
     cec:	d2 d4       	rcall	.+2468   	; 0x1692 <outputS>
     cee:	21 96       	adiw	r28, 0x01	; 1
     cf0:	0c 5e       	subi	r16, 0xEC	; 236
     cf2:	1f 4f       	sbci	r17, 0xFF	; 255
numPrinter(screen3[1],14,2, (midiChannel+1));
numPrinter(screen0[1], 9, 3, currentPatternNumber);
numPrinter(screen1[1], 9, 3, currentPatternNumber);
numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);

for(uint8_t i=0;i<4; i++ ){
     cf4:	c4 30       	cpi	r28, 0x04	; 4
     cf6:	d1 05       	cpc	r29, r1
     cf8:	b9 f7       	brne	.-18     	; 0xce8 <initMenu+0x64>
	outputS(screen0[i],i);
}


}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	08 95       	ret

00000d04 <updateScreen>:

void updateScreen()
{
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
	if(prevEncoderBValue!=encoderBValue)
     d0c:	90 91 ed 05 	lds	r25, 0x05ED	; 0x8005ed <prevEncoderBValue>
     d10:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <encoderBValue>
     d14:	98 17       	cp	r25, r24
     d16:	09 f4       	brne	.+2      	; 0xd1a <updateScreen+0x16>
     d18:	45 c3       	rjmp	.+1674   	; 0x13a4 <updateScreen+0x6a0>
	{
		encoderBValue = encoderBValue%4;
     d1a:	83 70       	andi	r24, 0x03	; 3
     d1c:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <encoderBValue>
		//this needs some work...
		uint8_t menuMoveArrow = encoderBValue - prevEncoderBValue; //this tells us whether we need to move up or down.
     d20:	89 1b       	sub	r24, r25
		switch(encoderAValue)
     d22:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <encoderAValue>
     d26:	92 30       	cpi	r25, 0x02	; 2
     d28:	09 f4       	brne	.+2      	; 0xd2c <updateScreen+0x28>
     d2a:	15 c1       	rjmp	.+554    	; 0xf56 <updateScreen+0x252>
     d2c:	93 30       	cpi	r25, 0x03	; 3
     d2e:	09 f4       	brne	.+2      	; 0xd32 <updateScreen+0x2e>
     d30:	57 c2       	rjmp	.+1198   	; 0x11e0 <updateScreen+0x4dc>
     d32:	91 30       	cpi	r25, 0x01	; 1
     d34:	09 f0       	breq	.+2      	; 0xd38 <updateScreen+0x34>
     d36:	32 c3       	rjmp	.+1636   	; 0x139c <updateScreen+0x698>
		{
			///Sequencer Edit Screen
			case 1:
			if(encoderBFlag)
     d38:	90 91 ec 05 	lds	r25, 0x05EC	; 0x8005ec <encoderBFlag>
     d3c:	99 23       	and	r25, r25
     d3e:	09 f4       	brne	.+2      	; 0xd42 <updateScreen+0x3e>
     d40:	9e c0       	rjmp	.+316    	; 0xe7e <updateScreen+0x17a>
			{
				switch (screen1Index)
     d42:	90 91 9a 05 	lds	r25, 0x059A	; 0x80059a <screen1Index>
     d46:	92 30       	cpi	r25, 0x02	; 2
     d48:	51 f1       	breq	.+84     	; 0xd9e <updateScreen+0x9a>
     d4a:	93 30       	cpi	r25, 0x03	; 3
     d4c:	09 f4       	brne	.+2      	; 0xd50 <updateScreen+0x4c>
     d4e:	5a c0       	rjmp	.+180    	; 0xe04 <updateScreen+0x100>
     d50:	91 30       	cpi	r25, 0x01	; 1
     d52:	09 f0       	breq	.+2      	; 0xd56 <updateScreen+0x52>
     d54:	23 c3       	rjmp	.+1606   	; 0x139c <updateScreen+0x698>
				{
					// change pattern
					case 1:
					if(menuMoveArrow==1)
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	89 f4       	brne	.+34     	; 0xd7c <updateScreen+0x78>
					{
						currentPatternNumber = currentPatternNumber + 1;
     d5a:	20 91 1d 06 	lds	r18, 0x061D	; 0x80061d <currentPatternNumber>
     d5e:	2f 5f       	subi	r18, 0xFF	; 255
     d60:	20 93 1d 06 	sts	0x061D, r18	; 0x80061d <currentPatternNumber>
						numPrinter(screen1[1],9,3,currentPatternNumber);
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	43 e0       	ldi	r20, 0x03	; 3
     d68:	69 e0       	ldi	r22, 0x09	; 9
     d6a:	8f ed       	ldi	r24, 0xDF	; 223
     d6c:	94 e0       	ldi	r25, 0x04	; 4
     d6e:	a9 d4       	rcall	.+2386   	; 0x16c2 <numPrinter>
						outputS(screen1[1], 1);
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	8f ed       	ldi	r24, 0xDF	; 223
     d76:	94 e0       	ldi	r25, 0x04	; 4
     d78:	8c d4       	rcall	.+2328   	; 0x1692 <outputS>
     d7a:	10 c3       	rjmp	.+1568   	; 0x139c <updateScreen+0x698>
					}else
					{
						currentPatternNumber = currentPatternNumber - 1;
     d7c:	20 91 1d 06 	lds	r18, 0x061D	; 0x80061d <currentPatternNumber>
     d80:	21 50       	subi	r18, 0x01	; 1
     d82:	20 93 1d 06 	sts	0x061D, r18	; 0x80061d <currentPatternNumber>
						numPrinter(screen1[1],9,3,currentPatternNumber);
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	43 e0       	ldi	r20, 0x03	; 3
     d8a:	69 e0       	ldi	r22, 0x09	; 9
     d8c:	8f ed       	ldi	r24, 0xDF	; 223
     d8e:	94 e0       	ldi	r25, 0x04	; 4
     d90:	98 d4       	rcall	.+2352   	; 0x16c2 <numPrinter>
						outputS(screen1[1], 1);
     d92:	61 e0       	ldi	r22, 0x01	; 1
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	8f ed       	ldi	r24, 0xDF	; 223
     d98:	94 e0       	ldi	r25, 0x04	; 4
     d9a:	7b d4       	rcall	.+2294   	; 0x1692 <outputS>
     d9c:	ff c2       	rjmp	.+1534   	; 0x139c <updateScreen+0x698>
					}
					break;
				
					//edit number of steps
					case 2:
					if(menuMoveArrow==1){
     d9e:	81 30       	cpi	r24, 0x01	; 1
     da0:	c9 f4       	brne	.+50     	; 0xdd4 <updateScreen+0xd0>
						currentPattern.numSteps = currentPattern.numSteps+1;
     da2:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <currentPattern+0x15a>
     da6:	8f 5f       	subi	r24, 0xFF	; 255
						if(currentPattern.numSteps>64)
     da8:	81 34       	cpi	r24, 0x41	; 65
     daa:	18 f4       	brcc	.+6      	; 0xdb2 <updateScreen+0xae>
					break;
				
					//edit number of steps
					case 2:
					if(menuMoveArrow==1){
						currentPattern.numSteps = currentPattern.numSteps+1;
     dac:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <currentPattern+0x15a>
     db0:	03 c0       	rjmp	.+6      	; 0xdb8 <updateScreen+0xb4>
						if(currentPattern.numSteps>64)
						{
							currentPattern.numSteps = 64;
     db2:	80 e4       	ldi	r24, 0x40	; 64
     db4:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <currentPattern+0x15a>
						}
						numPrinter(screen1[2], 6, 2, currentPattern.numSteps);
     db8:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <currentPattern+0x15a>
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	42 e0       	ldi	r20, 0x02	; 2
     dc0:	66 e0       	ldi	r22, 0x06	; 6
     dc2:	83 ef       	ldi	r24, 0xF3	; 243
     dc4:	94 e0       	ldi	r25, 0x04	; 4
     dc6:	7d d4       	rcall	.+2298   	; 0x16c2 <numPrinter>
						outputS(screen1[2], 2);
     dc8:	62 e0       	ldi	r22, 0x02	; 2
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	83 ef       	ldi	r24, 0xF3	; 243
     dce:	94 e0       	ldi	r25, 0x04	; 4
     dd0:	60 d4       	rcall	.+2240   	; 0x1692 <outputS>
     dd2:	e4 c2       	rjmp	.+1480   	; 0x139c <updateScreen+0x698>
     dd4:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <currentPattern+0x15a>
					}else
					{
					
						currentPattern.numSteps = currentPattern.numSteps-1;
     dd8:	81 50       	subi	r24, 0x01	; 1
     dda:	19 f0       	breq	.+6      	; 0xde2 <updateScreen+0xde>
						if(currentPattern.numSteps<1)
     ddc:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <currentPattern+0x15a>
						numPrinter(screen1[2], 6, 2, currentPattern.numSteps);
						outputS(screen1[2], 2);
					}else
					{
					
						currentPattern.numSteps = currentPattern.numSteps-1;
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <updateScreen+0xe4>
     de2:	81 e0       	ldi	r24, 0x01	; 1
						if(currentPattern.numSteps<1)
						{
							currentPattern.numSteps= 1;
     de4:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <currentPattern+0x15a>
     de8:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <currentPattern+0x15a>
			
						}
						numPrinter(screen1[2], 6, 2, currentPattern.numSteps);
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	42 e0       	ldi	r20, 0x02	; 2
     df0:	66 e0       	ldi	r22, 0x06	; 6
     df2:	83 ef       	ldi	r24, 0xF3	; 243
     df4:	94 e0       	ldi	r25, 0x04	; 4
     df6:	65 d4       	rcall	.+2250   	; 0x16c2 <numPrinter>
						outputS(screen1[2],2);
     df8:	62 e0       	ldi	r22, 0x02	; 2
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	83 ef       	ldi	r24, 0xF3	; 243
     dfe:	94 e0       	ldi	r25, 0x04	; 4
     e00:	48 d4       	rcall	.+2192   	; 0x1692 <outputS>
     e02:	cc c2       	rjmp	.+1432   	; 0x139c <updateScreen+0x698>
     e04:	81 30       	cpi	r24, 0x01	; 1
				
				
				
				//edit current step
				case 3:
					if(menuMoveArrow==1)
     e06:	11 f5       	brne	.+68     	; 0xe4c <updateScreen+0x148>
     e08:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <currentStep>
					{
						currentStep = currentStep+1;
     e0c:	8f 5f       	subi	r24, 0xFF	; 255
     e0e:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <currentStep>
     e12:	40 91 c8 04 	lds	r20, 0x04C8	; 0x8004c8 <currentPattern+0x15a>
						if(currentStep>(currentPattern.numSteps)-1)
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	24 2f       	mov	r18, r20
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	21 50       	subi	r18, 0x01	; 1
     e1e:	31 09       	sbc	r19, r1
     e20:	28 17       	cp	r18, r24
     e22:	39 07       	cpc	r19, r25
     e24:	1c f4       	brge	.+6      	; 0xe2c <updateScreen+0x128>
     e26:	41 50       	subi	r20, 0x01	; 1
						{
							currentStep = (currentPattern.numSteps)-1;
     e28:	40 93 73 06 	sts	0x0673, r20	; 0x800673 <currentStep>
     e2c:	20 91 73 06 	lds	r18, 0x0673	; 0x800673 <currentStep>
						}
						numPrinter(screen1[3], 13, 2, currentStep+1);
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	2f 5f       	subi	r18, 0xFF	; 255
     e34:	3f 4f       	sbci	r19, 0xFF	; 255
     e36:	42 e0       	ldi	r20, 0x02	; 2
     e38:	6d e0       	ldi	r22, 0x0D	; 13
     e3a:	87 e0       	ldi	r24, 0x07	; 7
     e3c:	95 e0       	ldi	r25, 0x05	; 5
     e3e:	41 d4       	rcall	.+2178   	; 0x16c2 <numPrinter>
						outputS(screen1[3], 3);
     e40:	63 e0       	ldi	r22, 0x03	; 3
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	87 e0       	ldi	r24, 0x07	; 7
     e46:	95 e0       	ldi	r25, 0x05	; 5
     e48:	24 d4       	rcall	.+2120   	; 0x1692 <outputS>
     e4a:	a8 c2       	rjmp	.+1360   	; 0x139c <updateScreen+0x698>
     e4c:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <currentStep>
					
					}else
					{
						currentStep = currentStep-1;
     e50:	81 50       	subi	r24, 0x01	; 1
     e52:	18 f0       	brcs	.+6      	; 0xe5a <updateScreen+0x156>
     e54:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <currentStep>
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <updateScreen+0x15a>
     e5a:	10 92 73 06 	sts	0x0673, r1	; 0x800673 <currentStep>
						if(currentStep==255)
						{
							currentStep = 0;
						}
						numPrinter(screen1[3], 13, 2, currentStep+1);
     e5e:	20 91 73 06 	lds	r18, 0x0673	; 0x800673 <currentStep>
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	2f 5f       	subi	r18, 0xFF	; 255
     e66:	3f 4f       	sbci	r19, 0xFF	; 255
     e68:	42 e0       	ldi	r20, 0x02	; 2
     e6a:	6d e0       	ldi	r22, 0x0D	; 13
     e6c:	87 e0       	ldi	r24, 0x07	; 7
     e6e:	95 e0       	ldi	r25, 0x05	; 5
     e70:	28 d4       	rcall	.+2128   	; 0x16c2 <numPrinter>
						outputS(screen1[3], 3);
     e72:	63 e0       	ldi	r22, 0x03	; 3
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	87 e0       	ldi	r24, 0x07	; 7
     e78:	95 e0       	ldi	r25, 0x05	; 5
     e7a:	0b d4       	rcall	.+2070   	; 0x1692 <outputS>
     e7c:	8f c2       	rjmp	.+1310   	; 0x139c <updateScreen+0x698>
     e7e:	81 30       	cpi	r24, 0x01	; 1
					break;
				}//end of switch statment.
				
				//Move screen arrow/
			}else{
			if(menuMoveArrow==1)
     e80:	a1 f5       	brne	.+104    	; 0xeea <updateScreen+0x1e6>
     e82:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <screen1Index>
			{
				//move screen arrow down
				screen1Index++;
     e86:	8f 5f       	subi	r24, 0xFF	; 255
     e88:	84 30       	cpi	r24, 0x04	; 4
				if(screen1Index>3)
     e8a:	18 f4       	brcc	.+6      	; 0xe92 <updateScreen+0x18e>
     e8c:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <screen1Index>
				//Move screen arrow/
			}else{
			if(menuMoveArrow==1)
			{
				//move screen arrow down
				screen1Index++;
     e90:	03 c0       	rjmp	.+6      	; 0xe98 <updateScreen+0x194>
     e92:	83 e0       	ldi	r24, 0x03	; 3
				if(screen1Index>3)
				{
					screen1Index = 3;
     e94:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <screen1Index>
     e98:	60 91 9a 05 	lds	r22, 0x059A	; 0x80059a <screen1Index>
				}
				screen1[screen1Index][19] = '<';
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	c4 e1       	ldi	r28, 0x14	; 20
     ea0:	c6 9f       	mul	r28, r22
     ea2:	c0 01       	movw	r24, r0
     ea4:	c7 9f       	mul	r28, r23
     ea6:	90 0d       	add	r25, r0
     ea8:	11 24       	eor	r1, r1
     eaa:	85 53       	subi	r24, 0x35	; 53
     eac:	9b 4f       	sbci	r25, 0xFB	; 251
     eae:	2c e3       	ldi	r18, 0x3C	; 60
     eb0:	fc 01       	movw	r30, r24
     eb2:	23 8b       	std	Z+19, r18	; 0x13
     eb4:	9b 01       	movw	r18, r22
				screen1[screen1Index-1][19] = ' ';
     eb6:	21 50       	subi	r18, 0x01	; 1
     eb8:	31 09       	sbc	r19, r1
     eba:	c2 9f       	mul	r28, r18
     ebc:	f0 01       	movw	r30, r0
     ebe:	c3 9f       	mul	r28, r19
     ec0:	f0 0d       	add	r31, r0
     ec2:	11 24       	eor	r1, r1
     ec4:	e5 53       	subi	r30, 0x35	; 53
     ec6:	fb 4f       	sbci	r31, 0xFB	; 251
     ec8:	20 e2       	ldi	r18, 0x20	; 32
     eca:	23 8b       	std	Z+19, r18	; 0x13
				outputS(screen1[screen1Index], screen1Index);
     ecc:	e2 d3       	rcall	.+1988   	; 0x1692 <outputS>
				outputS(screen1[screen1Index-1], screen1Index-1);
     ece:	60 91 9a 05 	lds	r22, 0x059A	; 0x80059a <screen1Index>
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	61 50       	subi	r22, 0x01	; 1
     ed6:	71 09       	sbc	r23, r1
     ed8:	c6 9f       	mul	r28, r22
     eda:	c0 01       	movw	r24, r0
     edc:	c7 9f       	mul	r28, r23
     ede:	90 0d       	add	r25, r0
     ee0:	11 24       	eor	r1, r1
     ee2:	85 53       	subi	r24, 0x35	; 53
     ee4:	9b 4f       	sbci	r25, 0xFB	; 251
     ee6:	d5 d3       	rcall	.+1962   	; 0x1692 <outputS>
     ee8:	59 c2       	rjmp	.+1202   	; 0x139c <updateScreen+0x698>
     eea:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <screen1Index>
			}else 
			{
				//move arrow up
				screen1Index--;
     eee:	9e ef       	ldi	r25, 0xFE	; 254
				if(screen1Index>250||screen1Index==0)
     ef0:	98 0f       	add	r25, r24
     ef2:	9a 3f       	cpi	r25, 0xFA	; 250
     ef4:	20 f4       	brcc	.+8      	; 0xefe <updateScreen+0x1fa>
     ef6:	81 50       	subi	r24, 0x01	; 1
				outputS(screen1[screen1Index], screen1Index);
				outputS(screen1[screen1Index-1], screen1Index-1);
			}else 
			{
				//move arrow up
				screen1Index--;
     ef8:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <screen1Index>
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <updateScreen+0x200>
     efe:	81 e0       	ldi	r24, 0x01	; 1
				if(screen1Index>250||screen1Index==0)
				{
					screen1Index = 1;
     f00:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <screen1Index>
     f04:	60 91 9a 05 	lds	r22, 0x059A	; 0x80059a <screen1Index>
				}
				screen1[screen1Index][19] = '<';
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	c4 e1       	ldi	r28, 0x14	; 20
     f0c:	c6 9f       	mul	r28, r22
     f0e:	c0 01       	movw	r24, r0
     f10:	c7 9f       	mul	r28, r23
     f12:	90 0d       	add	r25, r0
     f14:	11 24       	eor	r1, r1
     f16:	85 53       	subi	r24, 0x35	; 53
     f18:	9b 4f       	sbci	r25, 0xFB	; 251
     f1a:	2c e3       	ldi	r18, 0x3C	; 60
     f1c:	fc 01       	movw	r30, r24
     f1e:	23 8b       	std	Z+19, r18	; 0x13
				screen1[screen1Index+1][19] = ' ';
     f20:	9b 01       	movw	r18, r22
     f22:	2f 5f       	subi	r18, 0xFF	; 255
     f24:	3f 4f       	sbci	r19, 0xFF	; 255
     f26:	c2 9f       	mul	r28, r18
     f28:	f0 01       	movw	r30, r0
     f2a:	c3 9f       	mul	r28, r19
     f2c:	f0 0d       	add	r31, r0
     f2e:	11 24       	eor	r1, r1
     f30:	e5 53       	subi	r30, 0x35	; 53
     f32:	fb 4f       	sbci	r31, 0xFB	; 251
     f34:	20 e2       	ldi	r18, 0x20	; 32
				outputS(screen1[screen1Index], screen1Index);
     f36:	23 8b       	std	Z+19, r18	; 0x13
     f38:	ac d3       	rcall	.+1880   	; 0x1692 <outputS>
				outputS(screen1[screen1Index+1], screen1Index+1);
     f3a:	60 91 9a 05 	lds	r22, 0x059A	; 0x80059a <screen1Index>
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	6f 5f       	subi	r22, 0xFF	; 255
     f42:	7f 4f       	sbci	r23, 0xFF	; 255
     f44:	c6 9f       	mul	r28, r22
     f46:	c0 01       	movw	r24, r0
     f48:	c7 9f       	mul	r28, r23
     f4a:	90 0d       	add	r25, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	85 53       	subi	r24, 0x35	; 53
     f50:	9b 4f       	sbci	r25, 0xFB	; 251
     f52:	9f d3       	rcall	.+1854   	; 0x1692 <outputS>
     f54:	23 c2       	rjmp	.+1094   	; 0x139c <updateScreen+0x698>
     f56:	90 91 ec 05 	lds	r25, 0x05EC	; 0x8005ec <encoderBFlag>
		break;
			
			
			//track setting screen
			case 2:
			if(encoderBFlag)
     f5a:	99 23       	and	r25, r25
     f5c:	09 f4       	brne	.+2      	; 0xf60 <updateScreen+0x25c>
     f5e:	d4 c0       	rjmp	.+424    	; 0x1108 <updateScreen+0x404>
     f60:	90 91 ee 05 	lds	r25, 0x05EE	; 0x8005ee <screen2Index>
			{
				switch (screen2Index)
     f64:	92 30       	cpi	r25, 0x02	; 2
     f66:	09 f4       	brne	.+2      	; 0xf6a <updateScreen+0x266>
     f68:	4e c0       	rjmp	.+156    	; 0x1006 <updateScreen+0x302>
     f6a:	93 30       	cpi	r25, 0x03	; 3
     f6c:	09 f4       	brne	.+2      	; 0xf70 <updateScreen+0x26c>
     f6e:	80 c0       	rjmp	.+256    	; 0x1070 <updateScreen+0x36c>
     f70:	91 30       	cpi	r25, 0x01	; 1
     f72:	09 f0       	breq	.+2      	; 0xf76 <updateScreen+0x272>
     f74:	13 c2       	rjmp	.+1062   	; 0x139c <updateScreen+0x698>
     f76:	81 30       	cpi	r24, 0x01	; 1
				{
					case 1:
					if(menuMoveArrow==1)
     f78:	19 f5       	brne	.+70     	; 0xfc0 <updateScreen+0x2bc>
     f7a:	20 91 1e 06 	lds	r18, 0x061E	; 0x80061e <currentTrack>
					{
						currentPattern.trackSampleLSB[currentTrack] = (currentPattern.trackSampleLSB[currentTrack])+ 1;
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	c9 01       	movw	r24, r18
     f82:	82 59       	subi	r24, 0x92	; 146
     f84:	9c 4f       	sbci	r25, 0xFC	; 252
     f86:	fc 01       	movw	r30, r24
     f88:	e8 55       	subi	r30, 0x58	; 88
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	c0 81       	ld	r28, Z
     f8e:	cf 5f       	subi	r28, 0xFF	; 255
     f90:	c0 83       	st	Z, r28
						uint16_t currentSample = (currentPattern.trackSampleMSB[currentTrack]<<8)|(currentPattern.trackSampleLSB[currentTrack]);
     f92:	70 97       	sbiw	r30, 0x10	; 16
     f94:	80 81       	ld	r24, Z
     f96:	d0 e0       	ldi	r29, 0x00	; 0
						numPrinter(screen2[1], 7, 2, (currentTrack+1));
     f98:	d8 2b       	or	r29, r24
     f9a:	2f 5f       	subi	r18, 0xFF	; 255
     f9c:	3f 4f       	sbci	r19, 0xFF	; 255
     f9e:	42 e0       	ldi	r20, 0x02	; 2
     fa0:	67 e0       	ldi	r22, 0x07	; 7
     fa2:	8f ea       	ldi	r24, 0xAF	; 175
     fa4:	95 e0       	ldi	r25, 0x05	; 5
						numPrinter(screen2[1], 10, 4, currentSample);
     fa6:	8d d3       	rcall	.+1818   	; 0x16c2 <numPrinter>
     fa8:	9e 01       	movw	r18, r28
     faa:	44 e0       	ldi	r20, 0x04	; 4
     fac:	6a e0       	ldi	r22, 0x0A	; 10
     fae:	8f ea       	ldi	r24, 0xAF	; 175
     fb0:	95 e0       	ldi	r25, 0x05	; 5
     fb2:	87 d3       	rcall	.+1806   	; 0x16c2 <numPrinter>
						outputS(screen2[1], 1);
     fb4:	61 e0       	ldi	r22, 0x01	; 1
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	8f ea       	ldi	r24, 0xAF	; 175
     fba:	95 e0       	ldi	r25, 0x05	; 5
     fbc:	6a d3       	rcall	.+1748   	; 0x1692 <outputS>
     fbe:	ee c1       	rjmp	.+988    	; 0x139c <updateScreen+0x698>
     fc0:	20 91 1e 06 	lds	r18, 0x061E	; 0x80061e <currentTrack>
						
					}else
					{
						currentPattern.trackSampleLSB[currentTrack] = (currentPattern.trackSampleLSB[currentTrack])- 1;
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	c9 01       	movw	r24, r18
     fc8:	82 59       	subi	r24, 0x92	; 146
     fca:	9c 4f       	sbci	r25, 0xFC	; 252
     fcc:	fc 01       	movw	r30, r24
     fce:	e8 55       	subi	r30, 0x58	; 88
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	c0 81       	ld	r28, Z
     fd4:	c1 50       	subi	r28, 0x01	; 1
						uint16_t currentSample = (currentPattern.trackSampleMSB[currentTrack]<<8)|(currentPattern.trackSampleLSB[currentTrack]);
     fd6:	c0 83       	st	Z, r28
     fd8:	70 97       	sbiw	r30, 0x10	; 16
     fda:	80 81       	ld	r24, Z
						numPrinter(screen2[1], 7, 2, (currentTrack+1));
     fdc:	d0 e0       	ldi	r29, 0x00	; 0
     fde:	d8 2b       	or	r29, r24
     fe0:	2f 5f       	subi	r18, 0xFF	; 255
     fe2:	3f 4f       	sbci	r19, 0xFF	; 255
     fe4:	42 e0       	ldi	r20, 0x02	; 2
     fe6:	67 e0       	ldi	r22, 0x07	; 7
     fe8:	8f ea       	ldi	r24, 0xAF	; 175
     fea:	95 e0       	ldi	r25, 0x05	; 5
						numPrinter(screen2[1], 10, 4, currentSample);
     fec:	6a d3       	rcall	.+1748   	; 0x16c2 <numPrinter>
     fee:	9e 01       	movw	r18, r28
     ff0:	44 e0       	ldi	r20, 0x04	; 4
     ff2:	6a e0       	ldi	r22, 0x0A	; 10
     ff4:	8f ea       	ldi	r24, 0xAF	; 175
     ff6:	95 e0       	ldi	r25, 0x05	; 5
     ff8:	64 d3       	rcall	.+1736   	; 0x16c2 <numPrinter>
						outputS(screen2[1], 1);
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	8f ea       	ldi	r24, 0xAF	; 175
    1000:	95 e0       	ldi	r25, 0x05	; 5
    1002:	47 d3       	rcall	.+1678   	; 0x1692 <outputS>
    1004:	cb c1       	rjmp	.+918    	; 0x139c <updateScreen+0x698>
    1006:	81 30       	cpi	r24, 0x01	; 1
					}
					
					break;
					
					case 2:
					if(menuMoveArrow==1)
    1008:	d1 f4       	brne	.+52     	; 0x103e <updateScreen+0x33a>
    100a:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <currentTrack>
					{
						currentPattern.trackPlayMode[currentTrack] = (currentPattern.trackPlayMode[currentTrack])+1;
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	fc 01       	movw	r30, r24
    1012:	ea 50       	subi	r30, 0x0A	; 10
    1014:	fc 4f       	sbci	r31, 0xFC	; 252
    1016:	20 81       	ld	r18, Z
    1018:	2f 5f       	subi	r18, 0xFF	; 255
						if(currentPattern.trackPlayMode[currentTrack]>6)
    101a:	27 30       	cpi	r18, 0x07	; 7
    101c:	28 f4       	brcc	.+10     	; 0x1028 <updateScreen+0x324>
					break;
					
					case 2:
					if(menuMoveArrow==1)
					{
						currentPattern.trackPlayMode[currentTrack] = (currentPattern.trackPlayMode[currentTrack])+1;
    101e:	fc 01       	movw	r30, r24
    1020:	ea 50       	subi	r30, 0x0A	; 10
    1022:	fc 4f       	sbci	r31, 0xFC	; 252
    1024:	20 83       	st	Z, r18
    1026:	05 c0       	rjmp	.+10     	; 0x1032 <updateScreen+0x32e>
						if(currentPattern.trackPlayMode[currentTrack]>6)
						{
							currentPattern.trackPlayMode[currentTrack] = 6;
    1028:	fc 01       	movw	r30, r24
    102a:	ea 50       	subi	r30, 0x0A	; 10
    102c:	fc 4f       	sbci	r31, 0xFC	; 252
    102e:	26 e0       	ldi	r18, 0x06	; 6
    1030:	20 83       	st	Z, r18
						}
						//do printing poly or solo stuff here.
						
						outputS(screen2[2], 2);
    1032:	62 e0       	ldi	r22, 0x02	; 2
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	83 ec       	ldi	r24, 0xC3	; 195
    1038:	95 e0       	ldi	r25, 0x05	; 5
    103a:	2b d3       	rcall	.+1622   	; 0x1692 <outputS>
    103c:	af c1       	rjmp	.+862    	; 0x139c <updateScreen+0x698>
    103e:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <currentTrack>
						
					}else
					{
						currentPattern.trackPlayMode[currentTrack] = (currentPattern.trackPlayMode[currentTrack])+1;
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	fc 01       	movw	r30, r24
    1046:	ea 50       	subi	r30, 0x0A	; 10
    1048:	fc 4f       	sbci	r31, 0xFC	; 252
    104a:	20 81       	ld	r18, Z
    104c:	2f 5f       	subi	r18, 0xFF	; 255
						if(currentPattern.trackPlayMode[currentTrack]==255)
    104e:	2f 3f       	cpi	r18, 0xFF	; 255
    1050:	29 f0       	breq	.+10     	; 0x105c <updateScreen+0x358>
						
						outputS(screen2[2], 2);
						
					}else
					{
						currentPattern.trackPlayMode[currentTrack] = (currentPattern.trackPlayMode[currentTrack])+1;
    1052:	fc 01       	movw	r30, r24
    1054:	ea 50       	subi	r30, 0x0A	; 10
    1056:	fc 4f       	sbci	r31, 0xFC	; 252
    1058:	20 83       	st	Z, r18
    105a:	04 c0       	rjmp	.+8      	; 0x1064 <updateScreen+0x360>
						if(currentPattern.trackPlayMode[currentTrack]==255)
						{
							currentPattern.trackPlayMode[currentTrack] = 0;
    105c:	fc 01       	movw	r30, r24
    105e:	ea 50       	subi	r30, 0x0A	; 10
    1060:	fc 4f       	sbci	r31, 0xFC	; 252
    1062:	10 82       	st	Z, r1
						}
						//do printing poly or solo stuff here
						outputS(screen2[2], 2);
    1064:	62 e0       	ldi	r22, 0x02	; 2
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	83 ec       	ldi	r24, 0xC3	; 195
    106a:	95 e0       	ldi	r25, 0x05	; 5
    106c:	12 d3       	rcall	.+1572   	; 0x1692 <outputS>
    106e:	96 c1       	rjmp	.+812    	; 0x139c <updateScreen+0x698>
    1070:	81 30       	cpi	r24, 0x01	; 1
					}
					break;
					
					//output routing on track setting screen
					case 3:
					if(menuMoveArrow==1)
    1072:	31 f5       	brne	.+76     	; 0x10c0 <updateScreen+0x3bc>
    1074:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <currentTrack>
					{
						currentPattern.trackOutputRoute[currentTrack] = (currentPattern.trackOutputRoute[currentTrack])+1;
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	fc 01       	movw	r30, r24
    107c:	e2 59       	subi	r30, 0x92	; 146
    107e:	fc 4f       	sbci	r31, 0xFC	; 252
    1080:	20 8d       	ldd	r18, Z+24	; 0x18
    1082:	2f 5f       	subi	r18, 0xFF	; 255
						if(currentPattern.trackOutputRoute[currentTrack]>7)
    1084:	28 30       	cpi	r18, 0x08	; 8
    1086:	28 f4       	brcc	.+10     	; 0x1092 <updateScreen+0x38e>
					
					//output routing on track setting screen
					case 3:
					if(menuMoveArrow==1)
					{
						currentPattern.trackOutputRoute[currentTrack] = (currentPattern.trackOutputRoute[currentTrack])+1;
    1088:	fc 01       	movw	r30, r24
    108a:	e2 59       	subi	r30, 0x92	; 146
    108c:	fc 4f       	sbci	r31, 0xFC	; 252
    108e:	20 8f       	std	Z+24, r18	; 0x18
						if(currentPattern.trackOutputRoute[currentTrack]>7)
						{
							currentPattern.trackOutputRoute[currentTrack] = 7;
    1090:	05 c0       	rjmp	.+10     	; 0x109c <updateScreen+0x398>
    1092:	27 e0       	ldi	r18, 0x07	; 7
    1094:	fc 01       	movw	r30, r24
    1096:	e2 59       	subi	r30, 0x92	; 146
    1098:	fc 4f       	sbci	r31, 0xFC	; 252
						}
						numPrinter(screen2[3], 10, 2, (currentPattern.trackOutputRoute[currentTrack])+1);
    109a:	20 8f       	std	Z+24, r18	; 0x18
    109c:	fc 01       	movw	r30, r24
    109e:	e2 59       	subi	r30, 0x92	; 146
    10a0:	fc 4f       	sbci	r31, 0xFC	; 252
    10a2:	20 8d       	ldd	r18, Z+24	; 0x18
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	2f 5f       	subi	r18, 0xFF	; 255
    10a8:	3f 4f       	sbci	r19, 0xFF	; 255
    10aa:	42 e0       	ldi	r20, 0x02	; 2
    10ac:	6a e0       	ldi	r22, 0x0A	; 10
    10ae:	87 ed       	ldi	r24, 0xD7	; 215
    10b0:	95 e0       	ldi	r25, 0x05	; 5
    10b2:	07 d3       	rcall	.+1550   	; 0x16c2 <numPrinter>
						outputS(screen2[3],3);
    10b4:	63 e0       	ldi	r22, 0x03	; 3
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	87 ed       	ldi	r24, 0xD7	; 215
    10ba:	95 e0       	ldi	r25, 0x05	; 5
    10bc:	ea d2       	rcall	.+1492   	; 0x1692 <outputS>
    10be:	6e c1       	rjmp	.+732    	; 0x139c <updateScreen+0x698>
    10c0:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <currentTrack>
						
					}else
					{
						currentPattern.trackOutputRoute[currentTrack] = (currentPattern.trackOutputRoute[currentTrack])-1;
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	fc 01       	movw	r30, r24
    10c8:	e2 59       	subi	r30, 0x92	; 146
    10ca:	fc 4f       	sbci	r31, 0xFC	; 252
    10cc:	20 8d       	ldd	r18, Z+24	; 0x18
    10ce:	21 50       	subi	r18, 0x01	; 1
    10d0:	28 f0       	brcs	.+10     	; 0x10dc <updateScreen+0x3d8>
    10d2:	fc 01       	movw	r30, r24
    10d4:	e2 59       	subi	r30, 0x92	; 146
    10d6:	fc 4f       	sbci	r31, 0xFC	; 252
    10d8:	20 8f       	std	Z+24, r18	; 0x18
						if(currentPattern.trackOutputRoute[currentTrack]==255)
						{
							currentPattern.trackOutputRoute[currentTrack] = 0;
    10da:	04 c0       	rjmp	.+8      	; 0x10e4 <updateScreen+0x3e0>
    10dc:	fc 01       	movw	r30, r24
    10de:	e2 59       	subi	r30, 0x92	; 146
    10e0:	fc 4f       	sbci	r31, 0xFC	; 252
						}
						numPrinter(screen2[3], 10, 2, (currentPattern.trackOutputRoute[currentTrack])+1);
    10e2:	10 8e       	std	Z+24, r1	; 0x18
    10e4:	fc 01       	movw	r30, r24
    10e6:	e2 59       	subi	r30, 0x92	; 146
    10e8:	fc 4f       	sbci	r31, 0xFC	; 252
    10ea:	20 8d       	ldd	r18, Z+24	; 0x18
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	2f 5f       	subi	r18, 0xFF	; 255
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
    10f2:	42 e0       	ldi	r20, 0x02	; 2
    10f4:	6a e0       	ldi	r22, 0x0A	; 10
    10f6:	87 ed       	ldi	r24, 0xD7	; 215
    10f8:	95 e0       	ldi	r25, 0x05	; 5
    10fa:	e3 d2       	rcall	.+1478   	; 0x16c2 <numPrinter>
						outputS(screen2[3],3);
    10fc:	63 e0       	ldi	r22, 0x03	; 3
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	87 ed       	ldi	r24, 0xD7	; 215
    1102:	95 e0       	ldi	r25, 0x05	; 5
    1104:	c6 d2       	rcall	.+1420   	; 0x1692 <outputS>
    1106:	4a c1       	rjmp	.+660    	; 0x139c <updateScreen+0x698>
    1108:	81 30       	cpi	r24, 0x01	; 1
					break;
					
				}
				
			}else{
			if(menuMoveArrow==1)
    110a:	a1 f5       	brne	.+104    	; 0x1174 <updateScreen+0x470>
    110c:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <screen2Index>
			{
				screen2Index++;
    1110:	8f 5f       	subi	r24, 0xFF	; 255
    1112:	84 30       	cpi	r24, 0x04	; 4
				if(screen2Index>3)
    1114:	18 f4       	brcc	.+6      	; 0x111c <updateScreen+0x418>
    1116:	80 93 ee 05 	sts	0x05EE, r24	; 0x8005ee <screen2Index>
				}
				
			}else{
			if(menuMoveArrow==1)
			{
				screen2Index++;
    111a:	03 c0       	rjmp	.+6      	; 0x1122 <updateScreen+0x41e>
    111c:	83 e0       	ldi	r24, 0x03	; 3
				if(screen2Index>3)
				{
					screen2Index = 3;
    111e:	80 93 ee 05 	sts	0x05EE, r24	; 0x8005ee <screen2Index>
				}
				screen2[screen2Index][19] = '<';
    1122:	60 91 ee 05 	lds	r22, 0x05EE	; 0x8005ee <screen2Index>
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	c4 e1       	ldi	r28, 0x14	; 20
    112a:	c6 9f       	mul	r28, r22
    112c:	c0 01       	movw	r24, r0
    112e:	c7 9f       	mul	r28, r23
    1130:	90 0d       	add	r25, r0
    1132:	11 24       	eor	r1, r1
    1134:	85 56       	subi	r24, 0x65	; 101
    1136:	9a 4f       	sbci	r25, 0xFA	; 250
    1138:	2c e3       	ldi	r18, 0x3C	; 60
    113a:	fc 01       	movw	r30, r24
				screen2[screen2Index-1][19] = ' ';
    113c:	23 8b       	std	Z+19, r18	; 0x13
    113e:	9b 01       	movw	r18, r22
    1140:	21 50       	subi	r18, 0x01	; 1
    1142:	31 09       	sbc	r19, r1
    1144:	c2 9f       	mul	r28, r18
    1146:	f0 01       	movw	r30, r0
    1148:	c3 9f       	mul	r28, r19
    114a:	f0 0d       	add	r31, r0
    114c:	11 24       	eor	r1, r1
    114e:	e5 56       	subi	r30, 0x65	; 101
    1150:	fa 4f       	sbci	r31, 0xFA	; 250
    1152:	20 e2       	ldi	r18, 0x20	; 32
				outputS(screen2[screen2Index], screen2Index);
    1154:	23 8b       	std	Z+19, r18	; 0x13
    1156:	9d d2       	rcall	.+1338   	; 0x1692 <outputS>
				outputS(screen2[screen2Index-1], screen2Index-1);
    1158:	60 91 ee 05 	lds	r22, 0x05EE	; 0x8005ee <screen2Index>
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	61 50       	subi	r22, 0x01	; 1
    1160:	71 09       	sbc	r23, r1
    1162:	c6 9f       	mul	r28, r22
    1164:	c0 01       	movw	r24, r0
    1166:	c7 9f       	mul	r28, r23
    1168:	90 0d       	add	r25, r0
    116a:	11 24       	eor	r1, r1
    116c:	85 56       	subi	r24, 0x65	; 101
    116e:	9a 4f       	sbci	r25, 0xFA	; 250
    1170:	90 d2       	rcall	.+1312   	; 0x1692 <outputS>
    1172:	14 c1       	rjmp	.+552    	; 0x139c <updateScreen+0x698>
    1174:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <screen2Index>
				
				
			}else
			{
				//moving arrow on track setting screen
				screen2Index--;
    1178:	9e ef       	ldi	r25, 0xFE	; 254
				if(screen2Index>250||screen2Index==0) //this should account for any negative numbers from overflow.
    117a:	98 0f       	add	r25, r24
    117c:	9a 3f       	cpi	r25, 0xFA	; 250
    117e:	20 f4       	brcc	.+8      	; 0x1188 <updateScreen+0x484>
    1180:	81 50       	subi	r24, 0x01	; 1
				
				
			}else
			{
				//moving arrow on track setting screen
				screen2Index--;
    1182:	80 93 ee 05 	sts	0x05EE, r24	; 0x8005ee <screen2Index>
    1186:	03 c0       	rjmp	.+6      	; 0x118e <updateScreen+0x48a>
				if(screen2Index>250||screen2Index==0) //this should account for any negative numbers from overflow.
				{
					screen2Index = 1;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	80 93 ee 05 	sts	0x05EE, r24	; 0x8005ee <screen2Index>
				}
				screen2[screen2Index][19] = '<';
    118e:	60 91 ee 05 	lds	r22, 0x05EE	; 0x8005ee <screen2Index>
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	c4 e1       	ldi	r28, 0x14	; 20
    1196:	c6 9f       	mul	r28, r22
    1198:	c0 01       	movw	r24, r0
    119a:	c7 9f       	mul	r28, r23
    119c:	90 0d       	add	r25, r0
    119e:	11 24       	eor	r1, r1
    11a0:	85 56       	subi	r24, 0x65	; 101
    11a2:	9a 4f       	sbci	r25, 0xFA	; 250
    11a4:	2c e3       	ldi	r18, 0x3C	; 60
    11a6:	fc 01       	movw	r30, r24
				screen2[screen2Index+1][19] = ' ';
    11a8:	23 8b       	std	Z+19, r18	; 0x13
    11aa:	9b 01       	movw	r18, r22
    11ac:	2f 5f       	subi	r18, 0xFF	; 255
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	c2 9f       	mul	r28, r18
    11b2:	f0 01       	movw	r30, r0
    11b4:	c3 9f       	mul	r28, r19
    11b6:	f0 0d       	add	r31, r0
    11b8:	11 24       	eor	r1, r1
    11ba:	e5 56       	subi	r30, 0x65	; 101
    11bc:	fa 4f       	sbci	r31, 0xFA	; 250
    11be:	20 e2       	ldi	r18, 0x20	; 32
				outputS(screen2[screen2Index], screen2Index);
    11c0:	23 8b       	std	Z+19, r18	; 0x13
    11c2:	67 d2       	rcall	.+1230   	; 0x1692 <outputS>
				outputS(screen2[screen2Index+1], screen2Index+1);
    11c4:	60 91 ee 05 	lds	r22, 0x05EE	; 0x8005ee <screen2Index>
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	6f 5f       	subi	r22, 0xFF	; 255
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	c6 9f       	mul	r28, r22
    11d0:	c0 01       	movw	r24, r0
    11d2:	c7 9f       	mul	r28, r23
    11d4:	90 0d       	add	r25, r0
    11d6:	11 24       	eor	r1, r1
    11d8:	85 56       	subi	r24, 0x65	; 101
    11da:	9a 4f       	sbci	r25, 0xFA	; 250
    11dc:	5a d2       	rcall	.+1204   	; 0x1692 <outputS>
    11de:	de c0       	rjmp	.+444    	; 0x139c <updateScreen+0x698>
    11e0:	81 30       	cpi	r24, 0x01	; 1
			
			case 3:
			
				//this is the functionality if encoder B flag is not pressed
				//haha, I probably need to change this to how all of the other cases work up there. 
				if(menuMoveArrow==1)
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <updateScreen+0x4e2>
    11e4:	6e c0       	rjmp	.+220    	; 0x12c2 <updateScreen+0x5be>
				{
					if(encoderBFlag)
    11e6:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <encoderBFlag>
    11ea:	88 23       	and	r24, r24
    11ec:	b1 f1       	breq	.+108    	; 0x125a <updateScreen+0x556>
					{
						switch(screen3Index)
    11ee:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <screen3Index>
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	19 f0       	breq	.+6      	; 0x11fc <updateScreen+0x4f8>
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	e1 f0       	breq	.+56     	; 0x1232 <updateScreen+0x52e>
						{
							case 1:
							midiChannel = midiChannel+1;
    11fa:	d0 c0       	rjmp	.+416    	; 0x139c <updateScreen+0x698>
    11fc:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <midiChannel>
							if(midiChannel>15)
    1200:	8f 5f       	subi	r24, 0xFF	; 255
    1202:	80 31       	cpi	r24, 0x10	; 16
					if(encoderBFlag)
					{
						switch(screen3Index)
						{
							case 1:
							midiChannel = midiChannel+1;
    1204:	18 f4       	brcc	.+6      	; 0x120c <updateScreen+0x508>
    1206:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <midiChannel>
							if(midiChannel>15)
							{
								midiChannel = 15;
    120a:	03 c0       	rjmp	.+6      	; 0x1212 <updateScreen+0x50e>
    120c:	8f e0       	ldi	r24, 0x0F	; 15
							}
							numPrinter(screen3[1], 14, 2, (midiChannel+1));
    120e:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <midiChannel>
    1212:	20 91 99 05 	lds	r18, 0x0599	; 0x800599 <midiChannel>
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	2f 5f       	subi	r18, 0xFF	; 255
    121a:	3f 4f       	sbci	r19, 0xFF	; 255
    121c:	42 e0       	ldi	r20, 0x02	; 2
    121e:	6e e0       	ldi	r22, 0x0E	; 14
    1220:	83 e3       	ldi	r24, 0x33	; 51
							outputS(screen3[1], 1);
    1222:	96 e0       	ldi	r25, 0x06	; 6
    1224:	4e d2       	rcall	.+1180   	; 0x16c2 <numPrinter>
    1226:	61 e0       	ldi	r22, 0x01	; 1
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	83 e3       	ldi	r24, 0x33	; 51
    122c:	96 e0       	ldi	r25, 0x06	; 6
							break;
    122e:	31 d2       	rcall	.+1122   	; 0x1692 <outputS>
							
							case 2:
							currentPattern.midiTrackNote[currentTrack] = (currentPattern.midiTrackNote[currentTrack]) + 1;
    1230:	b5 c0       	rjmp	.+362    	; 0x139c <updateScreen+0x698>
    1232:	e0 91 1e 06 	lds	r30, 0x061E	; 0x80061e <currentTrack>
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	ea 54       	subi	r30, 0x4A	; 74
    123a:	fb 4f       	sbci	r31, 0xFB	; 251
    123c:	20 81       	ld	r18, Z
    123e:	2f 5f       	subi	r18, 0xFF	; 255
							numPrinter(screen3[2], 14, 2, currentPattern.midiTrackNote[currentTrack]);
    1240:	20 83       	st	Z, r18
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	42 e0       	ldi	r20, 0x02	; 2
    1246:	6e e0       	ldi	r22, 0x0E	; 14
    1248:	87 e4       	ldi	r24, 0x47	; 71
    124a:	96 e0       	ldi	r25, 0x06	; 6
    124c:	3a d2       	rcall	.+1140   	; 0x16c2 <numPrinter>
							outputS(screen3[2], 2);
    124e:	62 e0       	ldi	r22, 0x02	; 2
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	87 e4       	ldi	r24, 0x47	; 71
    1254:	96 e0       	ldi	r25, 0x06	; 6
    1256:	1d d2       	rcall	.+1082   	; 0x1692 <outputS>
    1258:	a1 c0       	rjmp	.+322    	; 0x139c <updateScreen+0x698>
							break;
    125a:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <screen3Index>
							
							
						}
					}else
					{
						screen3Index++;
    125e:	8f 5f       	subi	r24, 0xFF	; 255
						if(screen3Index>2)
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	18 f4       	brcc	.+6      	; 0x126a <updateScreen+0x566>
							
							
						}
					}else
					{
						screen3Index++;
    1264:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <screen3Index>
    1268:	03 c0       	rjmp	.+6      	; 0x1270 <updateScreen+0x56c>
						if(screen3Index>2)
						{
							screen3Index = 2;
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <screen3Index>
						}
						screen3[screen3Index][19] = '<';
    1270:	60 91 6f 06 	lds	r22, 0x066F	; 0x80066f <screen3Index>
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	c4 e1       	ldi	r28, 0x14	; 20
    1278:	c6 9f       	mul	r28, r22
    127a:	c0 01       	movw	r24, r0
    127c:	c7 9f       	mul	r28, r23
    127e:	90 0d       	add	r25, r0
    1280:	11 24       	eor	r1, r1
    1282:	81 5e       	subi	r24, 0xE1	; 225
    1284:	99 4f       	sbci	r25, 0xF9	; 249
    1286:	2c e3       	ldi	r18, 0x3C	; 60
    1288:	fc 01       	movw	r30, r24
						screen3[screen3Index-1][19] = ' ';
    128a:	23 8b       	std	Z+19, r18	; 0x13
    128c:	9b 01       	movw	r18, r22
    128e:	21 50       	subi	r18, 0x01	; 1
    1290:	31 09       	sbc	r19, r1
    1292:	c2 9f       	mul	r28, r18
    1294:	f0 01       	movw	r30, r0
    1296:	c3 9f       	mul	r28, r19
    1298:	f0 0d       	add	r31, r0
    129a:	11 24       	eor	r1, r1
    129c:	e1 5e       	subi	r30, 0xE1	; 225
    129e:	f9 4f       	sbci	r31, 0xF9	; 249
    12a0:	20 e2       	ldi	r18, 0x20	; 32
						outputS(screen3[screen3Index], screen3Index);
    12a2:	23 8b       	std	Z+19, r18	; 0x13
    12a4:	f6 d1       	rcall	.+1004   	; 0x1692 <outputS>
						outputS(screen3[screen3Index-1], screen3Index-1);
    12a6:	60 91 6f 06 	lds	r22, 0x066F	; 0x80066f <screen3Index>
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	61 50       	subi	r22, 0x01	; 1
    12ae:	71 09       	sbc	r23, r1
    12b0:	c6 9f       	mul	r28, r22
    12b2:	c0 01       	movw	r24, r0
    12b4:	c7 9f       	mul	r28, r23
    12b6:	90 0d       	add	r25, r0
    12b8:	11 24       	eor	r1, r1
    12ba:	81 5e       	subi	r24, 0xE1	; 225
    12bc:	99 4f       	sbci	r25, 0xF9	; 249
    12be:	e9 d1       	rcall	.+978    	; 0x1692 <outputS>
					}
					
					
				}else
				{
					if(encoderBFlag)
    12c0:	6d c0       	rjmp	.+218    	; 0x139c <updateScreen+0x698>
    12c2:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <encoderBFlag>
    12c6:	88 23       	and	r24, r24
					{
						switch(screen3Index)
    12c8:	a1 f1       	breq	.+104    	; 0x1332 <updateScreen+0x62e>
    12ca:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <screen3Index>
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	19 f0       	breq	.+6      	; 0x12d8 <updateScreen+0x5d4>
    12d2:	82 30       	cpi	r24, 0x02	; 2
    12d4:	d1 f0       	breq	.+52     	; 0x130a <updateScreen+0x606>
						{
							case 1:
							midiChannel = midiChannel-1;
    12d6:	62 c0       	rjmp	.+196    	; 0x139c <updateScreen+0x698>
    12d8:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <midiChannel>
    12dc:	81 50       	subi	r24, 0x01	; 1
    12de:	18 f0       	brcs	.+6      	; 0x12e6 <updateScreen+0x5e2>
							if(midiChannel==255)
							{
								midiChannel = 0;
    12e0:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <midiChannel>
							}
							numPrinter(screen3[1], 14, 2, (midiChannel+1));
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <updateScreen+0x5e6>
    12e6:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <midiChannel>
    12ea:	20 91 99 05 	lds	r18, 0x0599	; 0x800599 <midiChannel>
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	2f 5f       	subi	r18, 0xFF	; 255
    12f2:	3f 4f       	sbci	r19, 0xFF	; 255
    12f4:	42 e0       	ldi	r20, 0x02	; 2
    12f6:	6e e0       	ldi	r22, 0x0E	; 14
    12f8:	83 e3       	ldi	r24, 0x33	; 51
							outputS(screen3[1], 1);
    12fa:	96 e0       	ldi	r25, 0x06	; 6
    12fc:	e2 d1       	rcall	.+964    	; 0x16c2 <numPrinter>
    12fe:	61 e0       	ldi	r22, 0x01	; 1
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	83 e3       	ldi	r24, 0x33	; 51
    1304:	96 e0       	ldi	r25, 0x06	; 6
							break;
    1306:	c5 d1       	rcall	.+906    	; 0x1692 <outputS>
							
							case 2:
							currentPattern.midiTrackNote[currentTrack] = (currentPattern.midiTrackNote[currentTrack]) - 1;
    1308:	49 c0       	rjmp	.+146    	; 0x139c <updateScreen+0x698>
    130a:	e0 91 1e 06 	lds	r30, 0x061E	; 0x80061e <currentTrack>
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	ea 54       	subi	r30, 0x4A	; 74
    1312:	fb 4f       	sbci	r31, 0xFB	; 251
    1314:	20 81       	ld	r18, Z
    1316:	21 50       	subi	r18, 0x01	; 1
							numPrinter(screen3[2], 14, 2, currentPattern.midiTrackNote[currentTrack]);
    1318:	20 83       	st	Z, r18
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	42 e0       	ldi	r20, 0x02	; 2
    131e:	6e e0       	ldi	r22, 0x0E	; 14
    1320:	87 e4       	ldi	r24, 0x47	; 71
    1322:	96 e0       	ldi	r25, 0x06	; 6
    1324:	ce d1       	rcall	.+924    	; 0x16c2 <numPrinter>
							outputS(screen3[2], 2);
    1326:	62 e0       	ldi	r22, 0x02	; 2
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	87 e4       	ldi	r24, 0x47	; 71
    132c:	96 e0       	ldi	r25, 0x06	; 6
    132e:	b1 d1       	rcall	.+866    	; 0x1692 <outputS>
							break;
    1330:	35 c0       	rjmp	.+106    	; 0x139c <updateScreen+0x698>
							
						}
					}else{
					screen3Index--;
    1332:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <screen3Index>
					if(screen3Index>250||screen3Index==0) //this should account for any negative numbers from overflow.
    1336:	9e ef       	ldi	r25, 0xFE	; 254
    1338:	98 0f       	add	r25, r24
    133a:	9a 3f       	cpi	r25, 0xFA	; 250
    133c:	20 f4       	brcc	.+8      	; 0x1346 <updateScreen+0x642>
							outputS(screen3[2], 2);
							break;
							
						}
					}else{
					screen3Index--;
    133e:	81 50       	subi	r24, 0x01	; 1
    1340:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <screen3Index>
    1344:	03 c0       	rjmp	.+6      	; 0x134c <updateScreen+0x648>
					if(screen3Index>250||screen3Index==0) //this should account for any negative numbers from overflow.
					{
						screen3Index = 1;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <screen3Index>
					}
					screen3[screen3Index][19] = '<';
    134c:	60 91 6f 06 	lds	r22, 0x066F	; 0x80066f <screen3Index>
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	c4 e1       	ldi	r28, 0x14	; 20
    1354:	c6 9f       	mul	r28, r22
    1356:	c0 01       	movw	r24, r0
    1358:	c7 9f       	mul	r28, r23
    135a:	90 0d       	add	r25, r0
    135c:	11 24       	eor	r1, r1
    135e:	81 5e       	subi	r24, 0xE1	; 225
    1360:	99 4f       	sbci	r25, 0xF9	; 249
    1362:	2c e3       	ldi	r18, 0x3C	; 60
    1364:	fc 01       	movw	r30, r24
					screen3[screen3Index+1][19] = ' ';
    1366:	23 8b       	std	Z+19, r18	; 0x13
    1368:	9b 01       	movw	r18, r22
    136a:	2f 5f       	subi	r18, 0xFF	; 255
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	c2 9f       	mul	r28, r18
    1370:	f0 01       	movw	r30, r0
    1372:	c3 9f       	mul	r28, r19
    1374:	f0 0d       	add	r31, r0
    1376:	11 24       	eor	r1, r1
    1378:	e1 5e       	subi	r30, 0xE1	; 225
    137a:	f9 4f       	sbci	r31, 0xF9	; 249
    137c:	20 e2       	ldi	r18, 0x20	; 32
					outputS(screen3[screen3Index], screen3Index);
    137e:	23 8b       	std	Z+19, r18	; 0x13
    1380:	88 d1       	rcall	.+784    	; 0x1692 <outputS>
					outputS(screen3[screen3Index+1], screen3Index+1);
    1382:	60 91 6f 06 	lds	r22, 0x066F	; 0x80066f <screen3Index>
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	6f 5f       	subi	r22, 0xFF	; 255
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	c6 9f       	mul	r28, r22
    138e:	c0 01       	movw	r24, r0
    1390:	c7 9f       	mul	r28, r23
    1392:	90 0d       	add	r25, r0
    1394:	11 24       	eor	r1, r1
    1396:	81 5e       	subi	r24, 0xE1	; 225
    1398:	99 4f       	sbci	r25, 0xF9	; 249
				
			
			break;
					
		}
		prevEncoderBValue = encoderBValue;
    139a:	7b d1       	rcall	.+758    	; 0x1692 <outputS>
    139c:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <encoderBValue>
    13a0:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <prevEncoderBValue>
	}
	
	//top encoder
	if(prevEncoderAValue!=encoderAValue){
    13a4:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <encoderAValue>
    13a8:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <prevEncoderAValue>
    13ac:	98 17       	cp	r25, r24
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <updateScreen+0x6ae>
	encoderAValue = encoderAValue%4;
    13b0:	6b c0       	rjmp	.+214    	; 0x1488 <updateScreen+0x784>
    13b2:	83 70       	andi	r24, 0x03	; 3
	switch (encoderAValue)
    13b4:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <encoderAValue>
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	09 f1       	breq	.+66     	; 0x13fe <updateScreen+0x6fa>
    13bc:	38 f0       	brcs	.+14     	; 0x13cc <updateScreen+0x6c8>
    13be:	82 30       	cpi	r24, 0x02	; 2
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <updateScreen+0x6c0>
    13c2:	3f c0       	rjmp	.+126    	; 0x1442 <updateScreen+0x73e>
    13c4:	83 30       	cpi	r24, 0x03	; 3
	{
		case 0:
		numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
    13c6:	09 f4       	brne	.+2      	; 0x13ca <updateScreen+0x6c6>
    13c8:	4c c0       	rjmp	.+152    	; 0x1462 <updateScreen+0x75e>
    13ca:	5a c0       	rjmp	.+180    	; 0x1480 <updateScreen+0x77c>
    13cc:	20 91 c6 04 	lds	r18, 0x04C6	; 0x8004c6 <currentPattern+0x158>
    13d0:	30 91 c7 04 	lds	r19, 0x04C7	; 0x8004c7 <currentPattern+0x159>
    13d4:	43 e0       	ldi	r20, 0x03	; 3
    13d6:	65 e0       	ldi	r22, 0x05	; 5
    13d8:	8f e6       	ldi	r24, 0x6F	; 111
    13da:	95 e0       	ldi	r25, 0x05	; 5
    13dc:	72 d1       	rcall	.+740    	; 0x16c2 <numPrinter>
    13de:	07 e4       	ldi	r16, 0x47	; 71
		for(uint8_t i=0;i<4; i++ ){
			outputS(screen0[i],i);
    13e0:	15 e0       	ldi	r17, 0x05	; 5
    13e2:	c0 e0       	ldi	r28, 0x00	; 0
    13e4:	d0 e0       	ldi	r29, 0x00	; 0
    13e6:	be 01       	movw	r22, r28
    13e8:	c8 01       	movw	r24, r16
    13ea:	53 d1       	rcall	.+678    	; 0x1692 <outputS>
    13ec:	21 96       	adiw	r28, 0x01	; 1
	encoderAValue = encoderAValue%4;
	switch (encoderAValue)
	{
		case 0:
		numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
		for(uint8_t i=0;i<4; i++ ){
    13ee:	0c 5e       	subi	r16, 0xEC	; 236
    13f0:	1f 4f       	sbci	r17, 0xFF	; 255
			outputS(screen0[i],i);
		}
		screen0Index = 0;
    13f2:	c4 30       	cpi	r28, 0x04	; 4
    13f4:	d1 05       	cpc	r29, r1
		
		break;
    13f6:	b9 f7       	brne	.-18     	; 0x13e6 <updateScreen+0x6e2>
		
		case 1:
		numPrinter(screen1[2], 6, 2, currentPattern.numSteps);
    13f8:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <screen0Index>
    13fc:	41 c0       	rjmp	.+130    	; 0x1480 <updateScreen+0x77c>
    13fe:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <currentPattern+0x15a>
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	42 e0       	ldi	r20, 0x02	; 2
    1406:	66 e0       	ldi	r22, 0x06	; 6
    1408:	83 ef       	ldi	r24, 0xF3	; 243
		numPrinter(screen1[3], 13, 2, (currentStep+1));
    140a:	94 e0       	ldi	r25, 0x04	; 4
    140c:	5a d1       	rcall	.+692    	; 0x16c2 <numPrinter>
    140e:	20 91 73 06 	lds	r18, 0x0673	; 0x800673 <currentStep>
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	2f 5f       	subi	r18, 0xFF	; 255
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	42 e0       	ldi	r20, 0x02	; 2
    141a:	6d e0       	ldi	r22, 0x0D	; 13
    141c:	87 e0       	ldi	r24, 0x07	; 7
    141e:	95 e0       	ldi	r25, 0x05	; 5
    1420:	50 d1       	rcall	.+672    	; 0x16c2 <numPrinter>
    1422:	0b ec       	ldi	r16, 0xCB	; 203
    1424:	14 e0       	ldi	r17, 0x04	; 4
		for(uint8_t i=0;i<4; i++ ){
 		outputS(screen1[i],i);
    1426:	c0 e0       	ldi	r28, 0x00	; 0
    1428:	d0 e0       	ldi	r29, 0x00	; 0
    142a:	be 01       	movw	r22, r28
    142c:	c8 01       	movw	r24, r16
    142e:	31 d1       	rcall	.+610    	; 0x1692 <outputS>
    1430:	21 96       	adiw	r28, 0x01	; 1
    1432:	0c 5e       	subi	r16, 0xEC	; 236
		break;
		
		case 1:
		numPrinter(screen1[2], 6, 2, currentPattern.numSteps);
		numPrinter(screen1[3], 13, 2, (currentStep+1));
		for(uint8_t i=0;i<4; i++ ){
    1434:	1f 4f       	sbci	r17, 0xFF	; 255
    1436:	c4 30       	cpi	r28, 0x04	; 4
    1438:	d1 05       	cpc	r29, r1
 		outputS(screen1[i],i);
		}
		screen1Index = 0;
    143a:	b9 f7       	brne	.-18     	; 0x142a <updateScreen+0x726>
    143c:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <screen1Index>
 		break;
    1440:	1f c0       	rjmp	.+62     	; 0x1480 <updateScreen+0x77c>
    1442:	0b e9       	ldi	r16, 0x9B	; 155
	}
	
	//top encoder
	if(prevEncoderAValue!=encoderAValue){
	encoderAValue = encoderAValue%4;
	switch (encoderAValue)
    1444:	15 e0       	ldi	r17, 0x05	; 5
    1446:	c0 e0       	ldi	r28, 0x00	; 0
		screen1Index = 0;
 		break;
		 
		case 2:
		for(uint8_t i=0;i<4; i++ ){
			outputS(screen2[i],i);
    1448:	d0 e0       	ldi	r29, 0x00	; 0
    144a:	be 01       	movw	r22, r28
    144c:	c8 01       	movw	r24, r16
    144e:	21 d1       	rcall	.+578    	; 0x1692 <outputS>
    1450:	21 96       	adiw	r28, 0x01	; 1
    1452:	0c 5e       	subi	r16, 0xEC	; 236
    1454:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		screen1Index = 0;
 		break;
		 
		case 2:
		for(uint8_t i=0;i<4; i++ ){
    1456:	c4 30       	cpi	r28, 0x04	; 4
    1458:	d1 05       	cpc	r29, r1
    145a:	b9 f7       	brne	.-18     	; 0x144a <updateScreen+0x746>
			outputS(screen2[i],i);
		}
		screen2Index = 0;
    145c:	10 92 ee 05 	sts	0x05EE, r1	; 0x8005ee <screen2Index>
		break;
    1460:	0f c0       	rjmp	.+30     	; 0x1480 <updateScreen+0x77c>
    1462:	0f e1       	ldi	r16, 0x1F	; 31
    1464:	16 e0       	ldi	r17, 0x06	; 6
	}
	
	//top encoder
	if(prevEncoderAValue!=encoderAValue){
	encoderAValue = encoderAValue%4;
	switch (encoderAValue)
    1466:	c0 e0       	ldi	r28, 0x00	; 0
    1468:	d0 e0       	ldi	r29, 0x00	; 0
		screen2Index = 0;
		break;
		 
		case 3:
		for(uint8_t i=0;i<4; i++ ){
			outputS(screen3[i],i);
    146a:	be 01       	movw	r22, r28
    146c:	c8 01       	movw	r24, r16
    146e:	11 d1       	rcall	.+546    	; 0x1692 <outputS>
    1470:	21 96       	adiw	r28, 0x01	; 1
    1472:	0c 5e       	subi	r16, 0xEC	; 236
    1474:	1f 4f       	sbci	r17, 0xFF	; 255
    1476:	c4 30       	cpi	r28, 0x04	; 4
		}
		screen2Index = 0;
		break;
		 
		case 3:
		for(uint8_t i=0;i<4; i++ ){
    1478:	d1 05       	cpc	r29, r1
    147a:	b9 f7       	brne	.-18     	; 0x146a <updateScreen+0x766>
    147c:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <screen3Index>
			outputS(screen3[i],i);
		}
		screen3Index = 0;
    1480:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <encoderAValue>
		break;
		 
		 
	}
	prevEncoderAValue = encoderAValue;
    1484:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <prevEncoderAValue>
    1488:	df 91       	pop	r29
	
	}


}
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	08 95       	ret

00001492 <listenMidi>:
uint8_t midiPCCheck = 0;
uint8_t midiOffCheck = 0;


void listenMidi()
{
    1492:	cf 92       	push	r12
    1494:	df 92       	push	r13
    1496:	ef 92       	push	r14
    1498:	ff 92       	push	r15
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
	midiNoteCheck = (0B10010000|midiChannel);
    14a2:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <midiChannel>
    14a6:	98 2f       	mov	r25, r24
    14a8:	90 69       	ori	r25, 0x90	; 144
    14aa:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <midiNoteCheck>
	midiCCCheck = (0B10110000|midiChannel);
    14ae:	98 2f       	mov	r25, r24
    14b0:	90 6b       	ori	r25, 0xB0	; 176
    14b2:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <midiCCCheck>
	midiPCCheck = (0B11000000|midiChannel);
    14b6:	98 2f       	mov	r25, r24
    14b8:	90 6c       	ori	r25, 0xC0	; 192
    14ba:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <midiPCCheck>
	midiOffCheck = (0B10000000|midiChannel);
    14be:	80 68       	ori	r24, 0x80	; 128
    14c0:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <midiOffCheck>
	
	//right now, this is just for testing.
	currentMidiMessage[0] = getChar();
    14c4:	55 d3       	rcall	.+1706   	; 0x1b70 <getChar>
    14c6:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <currentMidiMessage>
	//while(currentMidiMessage[0]==254)
	//{
	//	currentMidiMessage[0]=getChar(); //for now, get rid of midi clock signals
	//}
	if(currentMidiMessage[0]==midiNoteCheck)
    14ca:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <midiNoteCheck>
    14ce:	89 13       	cpse	r24, r25
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
    14d0:	2d c0       	rjmp	.+90     	; 0x152c <listenMidi+0x9a>
    14d2:	4e d3       	rcall	.+1692   	; 0x1b70 <getChar>
    14d4:	c4 e6       	ldi	r28, 0x64	; 100
    14d6:	d3 e0       	ldi	r29, 0x03	; 3
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	4a d3       	rcall	.+1684   	; 0x1b70 <getChar>
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	06 eb       	ldi	r16, 0xB6	; 182
    14e0:	14 e0       	ldi	r17, 0x04	; 4
    14e2:	c6 ef       	ldi	r28, 0xF6	; 246
    14e4:	d3 e0       	ldi	r29, 0x03	; 3
    14e6:	0f 2e       	mov	r0, r31
    14e8:	f6 e0       	ldi	r31, 0x06	; 6
    14ea:	cf 2e       	mov	r12, r31
    14ec:	f4 e0       	ldi	r31, 0x04	; 4
    14ee:	df 2e       	mov	r13, r31
    14f0:	f0 2d       	mov	r31, r0
		//outputS(printMidiNote, 3);
		
		for(int i=0; i<16; i++)
		{
			//I don't like this forloop, but It seems like the best way to deal with this struct at the moment.
			if((currentPattern.midiTrackNote[i])==(currentMidiMessage[1]))
    14f2:	0f 2e       	mov	r0, r31
    14f4:	f4 e6       	ldi	r31, 0x64	; 100
    14f6:	ef 2e       	mov	r14, r31
    14f8:	f3 e0       	ldi	r31, 0x03	; 3
    14fa:	ff 2e       	mov	r15, r31
    14fc:	f0 2d       	mov	r31, r0
    14fe:	f8 01       	movw	r30, r16
    1500:	91 91       	ld	r25, Z+
    1502:	8f 01       	movw	r16, r30
    1504:	f7 01       	movw	r30, r14
    1506:	81 81       	ldd	r24, Z+1	; 0x01
    1508:	98 13       	cpse	r25, r24
    150a:	0c c0       	rjmp	.+24     	; 0x1524 <listenMidi+0x92>
			trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
    150c:	28 81       	ld	r18, Y
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	fe 01       	movw	r30, r28
    1512:	e0 57       	subi	r30, 0x70	; 112
    1514:	f1 09       	sbc	r31, r1
    1516:	40 81       	ld	r20, Z
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	68 89       	ldd	r22, Y+16	; 0x10
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	88 a1       	ldd	r24, Y+32	; 0x20
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	3b d3       	rcall	.+1654   	; 0x1b9a <trackControl>
    1524:	21 96       	adiw	r28, 0x01	; 1
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
		//outputS(printMidiNote, 3);
		
		for(int i=0; i<16; i++)
    1526:	cc 15       	cp	r28, r12
    1528:	dd 05       	cpc	r29, r13
    152a:	49 f7       	brne	.-46     	; 0x14fe <listenMidi+0x6c>
			if((currentPattern.midiTrackNote[i])==(currentMidiMessage[1]))
			trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
		}
		
	}
	if(currentMidiMessage[0]==midiCCCheck)
    152c:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <currentMidiMessage>
    1530:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <midiCCCheck>
    1534:	98 13       	cpse	r25, r24
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (control)
    1536:	0b c0       	rjmp	.+22     	; 0x154e <listenMidi+0xbc>
    1538:	1b d3       	rcall	.+1590   	; 0x1b70 <getChar>
    153a:	c4 e6       	ldi	r28, 0x64	; 100
    153c:	d3 e0       	ldi	r29, 0x03	; 3
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	17 d3       	rcall	.+1582   	; 0x1b70 <getChar>
		outputS(printMidiCC, 3);
    1542:	8a 83       	std	Y+2, r24	; 0x02
    1544:	63 e0       	ldi	r22, 0x03	; 3
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	8c e8       	ldi	r24, 0x8C	; 140
    154a:	92 e0       	ldi	r25, 0x02	; 2
	
	}
	if(currentMidiMessage[0]==midiPCCheck)
    154c:	a2 d0       	rcall	.+324    	; 0x1692 <outputS>
    154e:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <currentMidiMessage>
    1552:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <midiPCCheck>
    1556:	98 13       	cpse	r25, r24
	{
		currentMidiMessage[1] = getChar(); //this should be a byte1 (progChageNumber)
    1558:	08 c0       	rjmp	.+16     	; 0x156a <listenMidi+0xd8>
    155a:	0a d3       	rcall	.+1556   	; 0x1b70 <getChar>
    155c:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <currentMidiMessage+0x1>
		outputS(printMidiPC, 3);
    1560:	63 e0       	ldi	r22, 0x03	; 3
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	88 e7       	ldi	r24, 0x78	; 120
    1566:	92 e0       	ldi	r25, 0x02	; 2
		
	}
	if(currentMidiMessage[0]==midiOffCheck)
    1568:	94 d0       	rcall	.+296    	; 0x1692 <outputS>
    156a:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <currentMidiMessage>
    156e:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <midiOffCheck>
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
    1572:	98 13       	cpse	r25, r24
    1574:	0b c0       	rjmp	.+22     	; 0x158c <listenMidi+0xfa>
    1576:	fc d2       	rcall	.+1528   	; 0x1b70 <getChar>
    1578:	c4 e6       	ldi	r28, 0x64	; 100
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
    157a:	d3 e0       	ldi	r29, 0x03	; 3
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	f8 d2       	rcall	.+1520   	; 0x1b70 <getChar>
		outputS(blank, 3);
    1580:	8a 83       	std	Y+2, r24	; 0x02
    1582:	63 e0       	ldi	r22, 0x03	; 3
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	84 e6       	ldi	r24, 0x64	; 100
    1588:	92 e0       	ldi	r25, 0x02	; 2
    158a:	83 d0       	rcall	.+262    	; 0x1692 <outputS>
	}



    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	df 90       	pop	r13
    159a:	cf 90       	pop	r12
    159c:	08 95       	ret

0000159e <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    159e:	e5 e0       	ldi	r30, 0x05	; 5
    15a0:	f1 e0       	ldi	r31, 0x01	; 1
    15a2:	80 81       	ld	r24, Z
    15a4:	82 60       	ori	r24, 0x02	; 2
    15a6:	80 83       	st	Z, r24
    15a8:	85 e0       	ldi	r24, 0x05	; 5
    15aa:	8a 95       	dec	r24
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <enableCycle+0xc>
    15ae:	00 00       	nop
    15b0:	80 81       	ld	r24, Z
    15b2:	8d 7f       	andi	r24, 0xFD	; 253
    15b4:	80 83       	st	Z, r24
    15b6:	08 95       	ret

000015b8 <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTJ &= 0B11111110; //set our DC pin low, to get ready to write data.
    15b8:	e5 e0       	ldi	r30, 0x05	; 5
    15ba:	f1 e0       	ldi	r31, 0x01	; 1
    15bc:	90 81       	ld	r25, Z
    15be:	9e 7f       	andi	r25, 0xFE	; 254
    15c0:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    15c2:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTJ &= 0B11111110; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
    15c4:	ec cf       	rjmp	.-40     	; 0x159e <enableCycle>
    15c6:	08 95       	ret

000015c8 <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTJ |=0B00000001; //set out DC Pin high, so it's ready to write data.
    15c8:	e5 e0       	ldi	r30, 0x05	; 5
    15ca:	f1 e0       	ldi	r31, 0x01	; 1
    15cc:	90 81       	ld	r25, Z
    15ce:	91 60       	ori	r25, 0x01	; 1
    15d0:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    15d2:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTJ |=0B00000001; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
    15d4:	e4 cf       	rjmp	.-56     	; 0x159e <enableCycle>
    15d6:	08 95       	ret

000015d8 <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRJ = 0x03; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
    15d8:	83 e0       	ldi	r24, 0x03	; 3
    15da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	DDRC =0xFF; //all pins on the LCD Data Bus.
    15de:	8f ef       	ldi	r24, 0xFF	; 255
    15e0:	87 b9       	out	0x07, r24	; 7

	
	PORTJ &= 0B11111100;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
    15e2:	e5 e0       	ldi	r30, 0x05	; 5
    15e4:	f1 e0       	ldi	r31, 0x01	; 1
    15e6:	80 81       	ld	r24, Z
    15e8:	8c 7f       	andi	r24, 0xFC	; 252
    15ea:	80 83       	st	Z, r24
	
	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
    15ec:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15ee:	8f e1       	ldi	r24, 0x1F	; 31
    15f0:	93 e0       	ldi	r25, 0x03	; 3
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <initScreen+0x1a>
    15f6:	00 c0       	rjmp	.+0      	; 0x15f8 <initScreen+0x20>
    15f8:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose
	

	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    15fa:	8a e2       	ldi	r24, 0x2A	; 42
    15fc:	dd df       	rcall	.-70     	; 0x15b8 <command>
	command(0x71);        // Function selection A:
    15fe:	81 e7       	ldi	r24, 0x71	; 113
    1600:	db df       	rcall	.-74     	; 0x15b8 <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
    1602:	8c e5       	ldi	r24, 0x5C	; 92
    1604:	e1 df       	rcall	.-62     	; 0x15c8 <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    1606:	88 e2       	ldi	r24, 0x28	; 40
    1608:	d7 df       	rcall	.-82     	; 0x15b8 <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
    160a:	88 e0       	ldi	r24, 0x08	; 8
    160c:	d5 df       	rcall	.-86     	; 0x15b8 <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    160e:	8a e2       	ldi	r24, 0x2A	; 42
    1610:	d3 df       	rcall	.-90     	; 0x15b8 <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    1612:	89 e7       	ldi	r24, 0x79	; 121
    1614:	d1 df       	rcall	.-94     	; 0x15b8 <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
    1616:	85 ed       	ldi	r24, 0xD5	; 213
    1618:	cf df       	rcall	.-98     	; 0x15b8 <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
    161a:	80 e7       	ldi	r24, 0x70	; 112
    161c:	cd df       	rcall	.-102    	; 0x15b8 <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    161e:	88 e7       	ldi	r24, 0x78	; 120
    1620:	cb df       	rcall	.-106    	; 0x15b8 <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
    1622:	89 e0       	ldi	r24, 0x09	; 9
    1624:	c9 df       	rcall	.-110    	; 0x15b8 <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
    1626:	86 e0       	ldi	r24, 0x06	; 6
    1628:	c7 df       	rcall	.-114    	; 0x15b8 <command>
	command(0x72);        // Function selection B:
    162a:	82 e7       	ldi	r24, 0x72	; 114
    162c:	c5 df       	rcall	.-118    	; 0x15b8 <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
    162e:	8a e0       	ldi	r24, 0x0A	; 10
    1630:	cb df       	rcall	.-106    	; 0x15c8 <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    1632:	89 e7       	ldi	r24, 0x79	; 121
    1634:	c1 df       	rcall	.-126    	; 0x15b8 <command>
	command(0xDA);        // Set SEG pins hardware configuration:
    1636:	8a ed       	ldi	r24, 0xDA	; 218
    1638:	bf df       	rcall	.-130    	; 0x15b8 <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
    163a:	80 e1       	ldi	r24, 0x10	; 16
    163c:	bd df       	rcall	.-134    	; 0x15b8 <command>
	command(0xDC);        // Function selection C:
    163e:	8c ed       	ldi	r24, 0xDC	; 220
    1640:	bb df       	rcall	.-138    	; 0x15b8 <command>
	command(0x00);        //  internal VSL, GPIO input disable
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	b9 df       	rcall	.-142    	; 0x15b8 <command>
	command(0x81);        // Set contrast control:
    1646:	81 e8       	ldi	r24, 0x81	; 129
    1648:	b7 df       	rcall	.-146    	; 0x15b8 <command>
    164a:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
    164c:	b5 df       	rcall	.-150    	; 0x15b8 <command>
    164e:	89 ed       	ldi	r24, 0xD9	; 217
    1650:	b3 df       	rcall	.-154    	; 0x15b8 <command>
	command(0xD9);        // Set phase length:
    1652:	81 ef       	ldi	r24, 0xF1	; 241
    1654:	b1 df       	rcall	.-158    	; 0x15b8 <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
    1656:	8b ed       	ldi	r24, 0xDB	; 219
    1658:	af df       	rcall	.-162    	; 0x15b8 <command>
    165a:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
    165c:	ad df       	rcall	.-166    	; 0x15b8 <command>
    165e:	88 e7       	ldi	r24, 0x78	; 120
    1660:	ab df       	rcall	.-170    	; 0x15b8 <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
    1662:	88 e2       	ldi	r24, 0x28	; 40
    1664:	a9 df       	rcall	.-174    	; 0x15b8 <command>
    1666:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    1668:	a7 df       	rcall	.-178    	; 0x15b8 <command>
    166a:	8f e3       	ldi	r24, 0x3F	; 63
    166c:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <initScreen+0x96>
    1672:	00 c0       	rjmp	.+0      	; 0x1674 <initScreen+0x9c>
	command(0x01);        // Clear display
    1674:	00 00       	nop
    1676:	80 e8       	ldi	r24, 0x80	; 128
    1678:	9f df       	rcall	.-194    	; 0x15b8 <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    167a:	8c e0       	ldi	r24, 0x0C	; 12
    167c:	9d df       	rcall	.-198    	; 0x15b8 <command>
    167e:	9f ef       	ldi	r25, 0xFF	; 255
    1680:	24 e3       	ldi	r18, 0x34	; 52
    1682:	8c e0       	ldi	r24, 0x0C	; 12
    1684:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	
	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
    1686:	20 40       	sbci	r18, 0x00	; 0
    1688:	80 40       	sbci	r24, 0x00	; 0
    168a:	e1 f7       	brne	.-8      	; 0x1684 <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
    168c:	00 c0       	rjmp	.+0      	; 0x168e <initScreen+0xb6>
    168e:	00 00       	nop
    1690:	08 95       	ret

00001692 <outputS>:
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	8c 01       	movw	r16, r24
    169c:	fb 01       	movw	r30, r22
    169e:	ff 27       	eor	r31, r31
    16a0:	e0 56       	subi	r30, 0x60	; 96
    16a2:	fd 4f       	sbci	r31, 0xFD	; 253
    16a4:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;
	
	command(new_line[r]);
    16a6:	88 df       	rcall	.-240    	; 0x15b8 <command>
    16a8:	e8 01       	movw	r28, r16
    16aa:	0c 5e       	subi	r16, 0xEC	; 236
    16ac:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
    16ae:	89 91       	ld	r24, Y+
    16b0:	8b df       	rcall	.-234    	; 0x15c8 <data>
	uint8_t r = row;
	uint8_t c = 0;
	
	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
    16b2:	c0 17       	cp	r28, r16
    16b4:	d1 07       	cpc	r29, r17
    16b6:	d9 f7       	brne	.-10     	; 0x16ae <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	08 95       	ret

000016c2 <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;
	
	switch(numCharacters)
    16c8:	43 30       	cpi	r20, 0x03	; 3
    16ca:	09 f4       	brne	.+2      	; 0x16ce <numPrinter+0xc>
    16cc:	51 c0       	rjmp	.+162    	; 0x1770 <numPrinter+0xae>
    16ce:	28 f4       	brcc	.+10     	; 0x16da <numPrinter+0x18>
    16d0:	41 30       	cpi	r20, 0x01	; 1
    16d2:	51 f0       	breq	.+20     	; 0x16e8 <numPrinter+0x26>
    16d4:	42 30       	cpi	r20, 0x02	; 2
    16d6:	21 f1       	breq	.+72     	; 0x1720 <numPrinter+0x5e>
    16d8:	a2 c1       	rjmp	.+836    	; 0x1a1e <numPrinter+0x35c>
    16da:	44 30       	cpi	r20, 0x04	; 4
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <numPrinter+0x1e>
    16de:	8e c0       	rjmp	.+284    	; 0x17fc <numPrinter+0x13a>
    16e0:	45 30       	cpi	r20, 0x05	; 5
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <numPrinter+0x24>
    16e4:	fd c0       	rjmp	.+506    	; 0x18e0 <numPrinter+0x21e>
    16e6:	9b c1       	rjmp	.+822    	; 0x1a1e <numPrinter+0x35c>
		case 0:
		break;
		
		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
    16e8:	ec 01       	movw	r28, r24
    16ea:	c6 0f       	add	r28, r22
    16ec:	d1 1d       	adc	r29, r1
    16ee:	ad ec       	ldi	r26, 0xCD	; 205
    16f0:	bc ec       	ldi	r27, 0xCC	; 204
    16f2:	81 d4       	rcall	.+2306   	; 0x1ff6 <__umulhisi3>
    16f4:	96 95       	lsr	r25
    16f6:	87 95       	ror	r24
    16f8:	96 95       	lsr	r25
    16fa:	87 95       	ror	r24
    16fc:	96 95       	lsr	r25
    16fe:	87 95       	ror	r24
    1700:	9c 01       	movw	r18, r24
    1702:	22 0f       	add	r18, r18
    1704:	33 1f       	adc	r19, r19
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	82 0f       	add	r24, r18
    1714:	93 1f       	adc	r25, r19
    1716:	e8 1b       	sub	r30, r24
    1718:	f9 0b       	sbc	r31, r25
    171a:	e0 5d       	subi	r30, 0xD0	; 208
    171c:	e8 83       	st	Y, r30
		break;
    171e:	7f c1       	rjmp	.+766    	; 0x1a1e <numPrinter+0x35c>
		
		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
    1720:	ec 01       	movw	r28, r24
    1722:	c6 0f       	add	r28, r22
    1724:	d1 1d       	adc	r29, r1
    1726:	ad ec       	ldi	r26, 0xCD	; 205
    1728:	bc ec       	ldi	r27, 0xCC	; 204
    172a:	65 d4       	rcall	.+2250   	; 0x1ff6 <__umulhisi3>
    172c:	96 95       	lsr	r25
    172e:	87 95       	ror	r24
    1730:	96 95       	lsr	r25
    1732:	87 95       	ror	r24
    1734:	96 95       	lsr	r25
    1736:	87 95       	ror	r24
    1738:	9c 01       	movw	r18, r24
    173a:	22 0f       	add	r18, r18
    173c:	33 1f       	adc	r19, r19
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	82 0f       	add	r24, r18
    174c:	93 1f       	adc	r25, r19
    174e:	9f 01       	movw	r18, r30
    1750:	28 1b       	sub	r18, r24
    1752:	39 0b       	sbc	r19, r25
    1754:	c9 01       	movw	r24, r18
    1756:	80 5d       	subi	r24, 0xD0	; 208
    1758:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
    175a:	9f 01       	movw	r18, r30
    175c:	4c d4       	rcall	.+2200   	; 0x1ff6 <__umulhisi3>
    175e:	96 95       	lsr	r25
    1760:	87 95       	ror	r24
    1762:	96 95       	lsr	r25
    1764:	87 95       	ror	r24
    1766:	96 95       	lsr	r25
    1768:	87 95       	ror	r24
    176a:	80 5d       	subi	r24, 0xD0	; 208
    176c:	88 83       	st	Y, r24
    176e:	57 c1       	rjmp	.+686    	; 0x1a1e <numPrinter+0x35c>
		break;
    1770:	ec 01       	movw	r28, r24
		
		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
    1772:	c6 0f       	add	r28, r22
    1774:	d1 1d       	adc	r29, r1
    1776:	ad ec       	ldi	r26, 0xCD	; 205
    1778:	bc ec       	ldi	r27, 0xCC	; 204
    177a:	3d d4       	rcall	.+2170   	; 0x1ff6 <__umulhisi3>
    177c:	96 95       	lsr	r25
    177e:	87 95       	ror	r24
    1780:	96 95       	lsr	r25
    1782:	87 95       	ror	r24
    1784:	96 95       	lsr	r25
    1786:	87 95       	ror	r24
    1788:	9c 01       	movw	r18, r24
    178a:	22 0f       	add	r18, r18
    178c:	33 1f       	adc	r19, r19
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	82 0f       	add	r24, r18
    179c:	93 1f       	adc	r25, r19
    179e:	9f 01       	movw	r18, r30
    17a0:	28 1b       	sub	r18, r24
    17a2:	39 0b       	sbc	r19, r25
    17a4:	c9 01       	movw	r24, r18
    17a6:	80 5d       	subi	r24, 0xD0	; 208
    17a8:	8a 83       	std	Y+2, r24	; 0x02
    17aa:	af 01       	movw	r20, r30
		charArray[(startingPos+1)] = tensPlace;
    17ac:	56 95       	lsr	r21
    17ae:	47 95       	ror	r20
    17b0:	56 95       	lsr	r21
    17b2:	47 95       	ror	r20
    17b4:	9a 01       	movw	r18, r20
    17b6:	ab e7       	ldi	r26, 0x7B	; 123
    17b8:	b4 e1       	ldi	r27, 0x14	; 20
    17ba:	1d d4       	rcall	.+2106   	; 0x1ff6 <__umulhisi3>
    17bc:	96 95       	lsr	r25
    17be:	87 95       	ror	r24
    17c0:	64 e6       	ldi	r22, 0x64	; 100
    17c2:	68 9f       	mul	r22, r24
    17c4:	90 01       	movw	r18, r0
    17c6:	69 9f       	mul	r22, r25
    17c8:	30 0d       	add	r19, r0
    17ca:	11 24       	eor	r1, r1
    17cc:	cf 01       	movw	r24, r30
    17ce:	82 1b       	sub	r24, r18
    17d0:	93 0b       	sbc	r25, r19
    17d2:	9c 01       	movw	r18, r24
    17d4:	ad ec       	ldi	r26, 0xCD	; 205
    17d6:	bc ec       	ldi	r27, 0xCC	; 204
    17d8:	0e d4       	rcall	.+2076   	; 0x1ff6 <__umulhisi3>
    17da:	96 95       	lsr	r25
    17dc:	87 95       	ror	r24
    17de:	96 95       	lsr	r25
    17e0:	87 95       	ror	r24
    17e2:	96 95       	lsr	r25
    17e4:	87 95       	ror	r24
    17e6:	80 5d       	subi	r24, 0xD0	; 208
    17e8:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
    17ea:	9a 01       	movw	r18, r20
    17ec:	ab e7       	ldi	r26, 0x7B	; 123
    17ee:	b4 e1       	ldi	r27, 0x14	; 20
    17f0:	02 d4       	rcall	.+2052   	; 0x1ff6 <__umulhisi3>
    17f2:	96 95       	lsr	r25
    17f4:	87 95       	ror	r24
    17f6:	80 5d       	subi	r24, 0xD0	; 208
    17f8:	88 83       	st	Y, r24
		break;
    17fa:	11 c1       	rjmp	.+546    	; 0x1a1e <numPrinter+0x35c>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
    17fc:	ec 01       	movw	r28, r24
    17fe:	c6 0f       	add	r28, r22
    1800:	d1 1d       	adc	r29, r1
    1802:	ad ec       	ldi	r26, 0xCD	; 205
    1804:	bc ec       	ldi	r27, 0xCC	; 204
    1806:	f7 d3       	rcall	.+2030   	; 0x1ff6 <__umulhisi3>
    1808:	96 95       	lsr	r25
    180a:	87 95       	ror	r24
    180c:	96 95       	lsr	r25
    180e:	87 95       	ror	r24
    1810:	96 95       	lsr	r25
    1812:	87 95       	ror	r24
    1814:	9c 01       	movw	r18, r24
    1816:	22 0f       	add	r18, r18
    1818:	33 1f       	adc	r19, r19
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	82 0f       	add	r24, r18
    1828:	93 1f       	adc	r25, r19
    182a:	9f 01       	movw	r18, r30
    182c:	28 1b       	sub	r18, r24
    182e:	39 0b       	sbc	r19, r25
    1830:	c9 01       	movw	r24, r18
    1832:	80 5d       	subi	r24, 0xD0	; 208
    1834:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
    1836:	9f 01       	movw	r18, r30
    1838:	36 95       	lsr	r19
    183a:	27 95       	ror	r18
    183c:	36 95       	lsr	r19
    183e:	27 95       	ror	r18
    1840:	ab e7       	ldi	r26, 0x7B	; 123
    1842:	b4 e1       	ldi	r27, 0x14	; 20
    1844:	d8 d3       	rcall	.+1968   	; 0x1ff6 <__umulhisi3>
    1846:	96 95       	lsr	r25
    1848:	87 95       	ror	r24
    184a:	44 e6       	ldi	r20, 0x64	; 100
    184c:	48 9f       	mul	r20, r24
    184e:	90 01       	movw	r18, r0
    1850:	49 9f       	mul	r20, r25
    1852:	30 0d       	add	r19, r0
    1854:	11 24       	eor	r1, r1
    1856:	cf 01       	movw	r24, r30
    1858:	82 1b       	sub	r24, r18
    185a:	93 0b       	sbc	r25, r19
    185c:	9c 01       	movw	r18, r24
    185e:	ad ec       	ldi	r26, 0xCD	; 205
    1860:	bc ec       	ldi	r27, 0xCC	; 204
    1862:	c9 d3       	rcall	.+1938   	; 0x1ff6 <__umulhisi3>
    1864:	96 95       	lsr	r25
    1866:	87 95       	ror	r24
    1868:	96 95       	lsr	r25
    186a:	87 95       	ror	r24
    186c:	96 95       	lsr	r25
    186e:	87 95       	ror	r24
    1870:	80 5d       	subi	r24, 0xD0	; 208
    1872:	8a 83       	std	Y+2, r24	; 0x02
    1874:	af 01       	movw	r20, r30
		charArray[(startingPos+1)] = hunderedsPlace;
    1876:	56 95       	lsr	r21
    1878:	47 95       	ror	r20
    187a:	56 95       	lsr	r21
    187c:	47 95       	ror	r20
    187e:	56 95       	lsr	r21
    1880:	47 95       	ror	r20
    1882:	9a 01       	movw	r18, r20
    1884:	a5 ec       	ldi	r26, 0xC5	; 197
    1886:	b0 e2       	ldi	r27, 0x20	; 32
    1888:	b6 d3       	rcall	.+1900   	; 0x1ff6 <__umulhisi3>
    188a:	92 95       	swap	r25
    188c:	82 95       	swap	r24
    188e:	8f 70       	andi	r24, 0x0F	; 15
    1890:	89 27       	eor	r24, r25
    1892:	9f 70       	andi	r25, 0x0F	; 15
    1894:	89 27       	eor	r24, r25
    1896:	68 ee       	ldi	r22, 0xE8	; 232
    1898:	73 e0       	ldi	r23, 0x03	; 3
    189a:	86 9f       	mul	r24, r22
    189c:	90 01       	movw	r18, r0
    189e:	87 9f       	mul	r24, r23
    18a0:	30 0d       	add	r19, r0
    18a2:	96 9f       	mul	r25, r22
    18a4:	30 0d       	add	r19, r0
    18a6:	11 24       	eor	r1, r1
    18a8:	cf 01       	movw	r24, r30
    18aa:	82 1b       	sub	r24, r18
    18ac:	93 0b       	sbc	r25, r19
    18ae:	9c 01       	movw	r18, r24
    18b0:	36 95       	lsr	r19
    18b2:	27 95       	ror	r18
    18b4:	36 95       	lsr	r19
    18b6:	27 95       	ror	r18
    18b8:	ab e7       	ldi	r26, 0x7B	; 123
    18ba:	b4 e1       	ldi	r27, 0x14	; 20
    18bc:	9c d3       	rcall	.+1848   	; 0x1ff6 <__umulhisi3>
    18be:	96 95       	lsr	r25
    18c0:	87 95       	ror	r24
    18c2:	80 5d       	subi	r24, 0xD0	; 208
    18c4:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
    18c6:	9a 01       	movw	r18, r20
    18c8:	a5 ec       	ldi	r26, 0xC5	; 197
    18ca:	b0 e2       	ldi	r27, 0x20	; 32
    18cc:	94 d3       	rcall	.+1832   	; 0x1ff6 <__umulhisi3>
    18ce:	92 95       	swap	r25
    18d0:	82 95       	swap	r24
    18d2:	8f 70       	andi	r24, 0x0F	; 15
    18d4:	89 27       	eor	r24, r25
    18d6:	9f 70       	andi	r25, 0x0F	; 15
    18d8:	89 27       	eor	r24, r25
    18da:	80 5d       	subi	r24, 0xD0	; 208
    18dc:	88 83       	st	Y, r24
		break;
    18de:	9f c0       	rjmp	.+318    	; 0x1a1e <numPrinter+0x35c>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
    18e0:	ec 01       	movw	r28, r24
    18e2:	c6 0f       	add	r28, r22
    18e4:	d1 1d       	adc	r29, r1
    18e6:	ad ec       	ldi	r26, 0xCD	; 205
    18e8:	bc ec       	ldi	r27, 0xCC	; 204
    18ea:	85 d3       	rcall	.+1802   	; 0x1ff6 <__umulhisi3>
    18ec:	96 95       	lsr	r25
    18ee:	87 95       	ror	r24
    18f0:	96 95       	lsr	r25
    18f2:	87 95       	ror	r24
    18f4:	96 95       	lsr	r25
    18f6:	87 95       	ror	r24
    18f8:	9c 01       	movw	r18, r24
    18fa:	22 0f       	add	r18, r18
    18fc:	33 1f       	adc	r19, r19
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	82 0f       	add	r24, r18
    190c:	93 1f       	adc	r25, r19
    190e:	9f 01       	movw	r18, r30
    1910:	28 1b       	sub	r18, r24
    1912:	39 0b       	sbc	r19, r25
    1914:	c9 01       	movw	r24, r18
    1916:	80 5d       	subi	r24, 0xD0	; 208
    1918:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
    191a:	9f 01       	movw	r18, r30
    191c:	36 95       	lsr	r19
    191e:	27 95       	ror	r18
    1920:	36 95       	lsr	r19
    1922:	27 95       	ror	r18
    1924:	ab e7       	ldi	r26, 0x7B	; 123
    1926:	b4 e1       	ldi	r27, 0x14	; 20
    1928:	66 d3       	rcall	.+1740   	; 0x1ff6 <__umulhisi3>
    192a:	96 95       	lsr	r25
    192c:	87 95       	ror	r24
    192e:	44 e6       	ldi	r20, 0x64	; 100
    1930:	48 9f       	mul	r20, r24
    1932:	90 01       	movw	r18, r0
    1934:	49 9f       	mul	r20, r25
    1936:	30 0d       	add	r19, r0
    1938:	11 24       	eor	r1, r1
    193a:	cf 01       	movw	r24, r30
    193c:	82 1b       	sub	r24, r18
    193e:	93 0b       	sbc	r25, r19
    1940:	9c 01       	movw	r18, r24
    1942:	ad ec       	ldi	r26, 0xCD	; 205
    1944:	bc ec       	ldi	r27, 0xCC	; 204
    1946:	57 d3       	rcall	.+1710   	; 0x1ff6 <__umulhisi3>
    1948:	96 95       	lsr	r25
    194a:	87 95       	ror	r24
    194c:	96 95       	lsr	r25
    194e:	87 95       	ror	r24
    1950:	96 95       	lsr	r25
    1952:	87 95       	ror	r24
    1954:	80 5d       	subi	r24, 0xD0	; 208
    1956:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
    1958:	9f 01       	movw	r18, r30
    195a:	36 95       	lsr	r19
    195c:	27 95       	ror	r18
    195e:	36 95       	lsr	r19
    1960:	27 95       	ror	r18
    1962:	36 95       	lsr	r19
    1964:	27 95       	ror	r18
    1966:	a5 ec       	ldi	r26, 0xC5	; 197
    1968:	b0 e2       	ldi	r27, 0x20	; 32
    196a:	45 d3       	rcall	.+1674   	; 0x1ff6 <__umulhisi3>
    196c:	92 95       	swap	r25
    196e:	82 95       	swap	r24
    1970:	8f 70       	andi	r24, 0x0F	; 15
    1972:	89 27       	eor	r24, r25
    1974:	9f 70       	andi	r25, 0x0F	; 15
    1976:	89 27       	eor	r24, r25
    1978:	48 ee       	ldi	r20, 0xE8	; 232
    197a:	53 e0       	ldi	r21, 0x03	; 3
    197c:	84 9f       	mul	r24, r20
    197e:	90 01       	movw	r18, r0
    1980:	85 9f       	mul	r24, r21
    1982:	30 0d       	add	r19, r0
    1984:	94 9f       	mul	r25, r20
    1986:	30 0d       	add	r19, r0
    1988:	11 24       	eor	r1, r1
    198a:	cf 01       	movw	r24, r30
    198c:	82 1b       	sub	r24, r18
    198e:	93 0b       	sbc	r25, r19
    1990:	9c 01       	movw	r18, r24
    1992:	36 95       	lsr	r19
    1994:	27 95       	ror	r18
    1996:	36 95       	lsr	r19
    1998:	27 95       	ror	r18
    199a:	ab e7       	ldi	r26, 0x7B	; 123
    199c:	b4 e1       	ldi	r27, 0x14	; 20
    199e:	2b d3       	rcall	.+1622   	; 0x1ff6 <__umulhisi3>
    19a0:	96 95       	lsr	r25
    19a2:	87 95       	ror	r24
    19a4:	80 5d       	subi	r24, 0xD0	; 208
    19a6:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
    19a8:	af 01       	movw	r20, r30
    19aa:	52 95       	swap	r21
    19ac:	42 95       	swap	r20
    19ae:	4f 70       	andi	r20, 0x0F	; 15
    19b0:	45 27       	eor	r20, r21
    19b2:	5f 70       	andi	r21, 0x0F	; 15
    19b4:	45 27       	eor	r20, r21
    19b6:	9a 01       	movw	r18, r20
    19b8:	a7 e4       	ldi	r26, 0x47	; 71
    19ba:	b3 e0       	ldi	r27, 0x03	; 3
    19bc:	1c d3       	rcall	.+1592   	; 0x1ff6 <__umulhisi3>
    19be:	96 95       	lsr	r25
    19c0:	87 95       	ror	r24
    19c2:	96 95       	lsr	r25
    19c4:	87 95       	ror	r24
    19c6:	96 95       	lsr	r25
    19c8:	87 95       	ror	r24
    19ca:	60 e1       	ldi	r22, 0x10	; 16
    19cc:	77 e2       	ldi	r23, 0x27	; 39
    19ce:	86 9f       	mul	r24, r22
    19d0:	90 01       	movw	r18, r0
    19d2:	87 9f       	mul	r24, r23
    19d4:	30 0d       	add	r19, r0
    19d6:	96 9f       	mul	r25, r22
    19d8:	30 0d       	add	r19, r0
    19da:	11 24       	eor	r1, r1
    19dc:	cf 01       	movw	r24, r30
    19de:	82 1b       	sub	r24, r18
    19e0:	93 0b       	sbc	r25, r19
    19e2:	9c 01       	movw	r18, r24
    19e4:	36 95       	lsr	r19
    19e6:	27 95       	ror	r18
    19e8:	36 95       	lsr	r19
    19ea:	27 95       	ror	r18
    19ec:	36 95       	lsr	r19
    19ee:	27 95       	ror	r18
    19f0:	a5 ec       	ldi	r26, 0xC5	; 197
    19f2:	b0 e2       	ldi	r27, 0x20	; 32
    19f4:	00 d3       	rcall	.+1536   	; 0x1ff6 <__umulhisi3>
    19f6:	92 95       	swap	r25
    19f8:	82 95       	swap	r24
    19fa:	8f 70       	andi	r24, 0x0F	; 15
    19fc:	89 27       	eor	r24, r25
    19fe:	9f 70       	andi	r25, 0x0F	; 15
    1a00:	89 27       	eor	r24, r25
    1a02:	80 5d       	subi	r24, 0xD0	; 208
    1a04:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
    1a06:	9a 01       	movw	r18, r20
    1a08:	a7 e4       	ldi	r26, 0x47	; 71
    1a0a:	b3 e0       	ldi	r27, 0x03	; 3
    1a0c:	f4 d2       	rcall	.+1512   	; 0x1ff6 <__umulhisi3>
    1a0e:	96 95       	lsr	r25
    1a10:	87 95       	ror	r24
    1a12:	96 95       	lsr	r25
    1a14:	87 95       	ror	r24
    1a16:	96 95       	lsr	r25
    1a18:	87 95       	ror	r24
    1a1a:	80 5d       	subi	r24, 0xD0	; 208
    1a1c:	88 83       	st	Y, r24
    1a1e:	df 91       	pop	r29
		break;
		
	}


    1a20:	cf 91       	pop	r28
    1a22:	08 95       	ret

00001a24 <__vector_27>:

uint8_t rxReadPosition = 0;
uint8_t rxWritePosition = 0;

ISR (USART0_TX_vect)
{
    1a24:	1f 92       	push	r1
    1a26:	0f 92       	push	r0
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	0f 92       	push	r0
    1a2c:	11 24       	eor	r1, r1
    1a2e:	0b b6       	in	r0, 0x3b	; 59
    1a30:	0f 92       	push	r0
    1a32:	2f 93       	push	r18
    1a34:	3f 93       	push	r19
    1a36:	8f 93       	push	r24
    1a38:	9f 93       	push	r25
    1a3a:	ef 93       	push	r30
    1a3c:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
    1a3e:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <serialReadPos>
    1a42:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <serialReadPos+0x1>
    1a46:	20 91 69 03 	lds	r18, 0x0369	; 0x800369 <serialWritePos>
    1a4a:	30 91 6a 03 	lds	r19, 0x036A	; 0x80036a <serialWritePos+0x1>
    1a4e:	82 17       	cp	r24, r18
    1a50:	93 07       	cpc	r25, r19
    1a52:	b9 f0       	breq	.+46     	; 0x1a82 <__vector_27+0x5e>
	{
		UDR0 = serial0Buffer[serialReadPos];
    1a54:	fc 01       	movw	r30, r24
    1a56:	ec 58       	subi	r30, 0x8C	; 140
    1a58:	f9 4f       	sbci	r31, 0xF9	; 249
    1a5a:	80 81       	ld	r24, Z
    1a5c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
    1a60:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <serialReadPos>
    1a64:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <serialReadPos+0x1>
    1a68:	01 96       	adiw	r24, 0x01	; 1
		
		if(serialReadPos >= TX_BUFFER_SIZE)
    1a6a:	80 38       	cpi	r24, 0x80	; 128
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	2c f4       	brge	.+10     	; 0x1a7a <__vector_27+0x56>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
    1a70:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <serialReadPos+0x1>
    1a74:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <serialReadPos>
    1a78:	04 c0       	rjmp	.+8      	; 0x1a82 <__vector_27+0x5e>
		
		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
    1a7a:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <serialReadPos+0x1>
    1a7e:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <serialReadPos>
		}
	}
}
    1a82:	ff 91       	pop	r31
    1a84:	ef 91       	pop	r30
    1a86:	9f 91       	pop	r25
    1a88:	8f 91       	pop	r24
    1a8a:	3f 91       	pop	r19
    1a8c:	2f 91       	pop	r18
    1a8e:	0f 90       	pop	r0
    1a90:	0b be       	out	0x3b, r0	; 59
    1a92:	0f 90       	pop	r0
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	0f 90       	pop	r0
    1a98:	1f 90       	pop	r1
    1a9a:	18 95       	reti

00001a9c <__vector_36>:

ISR (USART1_RX_vect)
{
    1a9c:	1f 92       	push	r1
    1a9e:	0f 92       	push	r0
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	0f 92       	push	r0
    1aa4:	11 24       	eor	r1, r1
    1aa6:	0b b6       	in	r0, 0x3b	; 59
    1aa8:	0f 92       	push	r0
    1aaa:	8f 93       	push	r24
    1aac:	9f 93       	push	r25
    1aae:	ef 93       	push	r30
    1ab0:	ff 93       	push	r31
		serial1Buffer[rxWritePosition] = UDR1;
    1ab2:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <rxWritePosition>
    1ab6:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1aba:	e8 2f       	mov	r30, r24
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	ec 50       	subi	r30, 0x0C	; 12
    1ac0:	f9 4f       	sbci	r31, 0xF9	; 249
    1ac2:	90 83       	st	Z, r25
		rxWritePosition++;
    1ac4:	8f 5f       	subi	r24, 0xFF	; 255
	
		if(rxWritePosition>= RX_BUFFER_SIZE)
    1ac6:	1a f0       	brmi	.+6      	; 0x1ace <__vector_36+0x32>
}

ISR (USART1_RX_vect)
{
		serial1Buffer[rxWritePosition] = UDR1;
		rxWritePosition++;
    1ac8:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <rxWritePosition>
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <__vector_36+0x36>
	
		if(rxWritePosition>= RX_BUFFER_SIZE)
		{
			rxWritePosition = 0; //this could cause some issues.
    1ace:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <rxWritePosition>
		}


}
    1ad2:	ff 91       	pop	r31
    1ad4:	ef 91       	pop	r30
    1ad6:	9f 91       	pop	r25
    1ad8:	8f 91       	pop	r24
    1ada:	0f 90       	pop	r0
    1adc:	0b be       	out	0x3b, r0	; 59
    1ade:	0f 90       	pop	r0
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	0f 90       	pop	r0
    1ae4:	1f 90       	pop	r1
    1ae6:	18 95       	reti

00001ae8 <appendSerial0>:

void appendSerial0(char c)
{
	serial0Buffer[serialWritePos] = c;
    1ae8:	20 91 69 03 	lds	r18, 0x0369	; 0x800369 <serialWritePos>
    1aec:	30 91 6a 03 	lds	r19, 0x036A	; 0x80036a <serialWritePos+0x1>
    1af0:	f9 01       	movw	r30, r18
    1af2:	ec 58       	subi	r30, 0x8C	; 140
    1af4:	f9 4f       	sbci	r31, 0xF9	; 249
    1af6:	80 83       	st	Z, r24
	serialWritePos++;
    1af8:	2f 5f       	subi	r18, 0xFF	; 255
    1afa:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    1afc:	20 38       	cpi	r18, 0x80	; 128
    1afe:	31 05       	cpc	r19, r1
    1b00:	2c f4       	brge	.+10     	; 0x1b0c <appendSerial0+0x24>
}

void appendSerial0(char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    1b02:	30 93 6a 03 	sts	0x036A, r19	; 0x80036a <serialWritePos+0x1>
    1b06:	20 93 69 03 	sts	0x0369, r18	; 0x800369 <serialWritePos>
    1b0a:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    1b0c:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <serialWritePos+0x1>
    1b10:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <serialWritePos>
    1b14:	08 95       	ret

00001b16 <serialWrite0>:
	}
}

void serialWrite0(char c[])
{
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	ec 01       	movw	r28, r24
    1b20:	8c 01       	movw	r16, r24
    1b22:	06 5f       	subi	r16, 0xF6	; 246
    1b24:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = 0; i<10; i++) //this may need to be 11
	{
		appendSerial0(c[i]);
    1b26:	89 91       	ld	r24, Y+
    1b28:	df df       	rcall	.-66     	; 0x1ae8 <appendSerial0>
	}
}

void serialWrite0(char c[])
{
	for (uint8_t i = 0; i<10; i++) //this may need to be 11
    1b2a:	c0 17       	cp	r28, r16
    1b2c:	d1 07       	cpc	r29, r17
    1b2e:	d9 f7       	brne	.-10     	; 0x1b26 <serialWrite0+0x10>
	{
		appendSerial0(c[i]);
		
	}
	
	if(UCSR0A & (1 << UDRE0))
    1b30:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1b34:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    1b36:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	08 95       	ret

00001b44 <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    1b44:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    1b48:	80 e1       	ldi	r24, 0x10	; 16
    1b4a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

UBRR1H = (BRCMidi >> 8);
    1b4e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
UBRR1L = BRCMidi;
    1b52:	8f e1       	ldi	r24, 0x1F	; 31
    1b54:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>

UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    1b58:	88 e4       	ldi	r24, 0x48	; 72
    1b5a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    1b5e:	86 e0       	ldi	r24, 0x06	; 6
    1b60:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>


UCSR1B = (1 << RXEN1)  | (1 << RXCIE0);
    1b64:	90 e9       	ldi	r25, 0x90	; 144
    1b66:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); //8 bit chars will be sent
    1b6a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1b6e:	08 95       	ret

00001b70 <getChar>:

char getChar()
{
	char returnMe = '\0';
	
	if(rxReadPosition != rxWritePosition)
    1b70:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <rxReadPosition>
    1b74:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <rxWritePosition>
    1b78:	98 17       	cp	r25, r24
    1b7a:	69 f0       	breq	.+26     	; 0x1b96 <getChar+0x26>
	{
		returnMe = serial1Buffer[rxReadPosition];
    1b7c:	e9 2f       	mov	r30, r25
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	ec 50       	subi	r30, 0x0C	; 12
    1b82:	f9 4f       	sbci	r31, 0xF9	; 249
    1b84:	80 81       	ld	r24, Z
		
		rxReadPosition++;
    1b86:	9f 5f       	subi	r25, 0xFF	; 255
		
		if(rxReadPosition >= RX_BUFFER_SIZE)
    1b88:	1a f0       	brmi	.+6      	; 0x1b90 <getChar+0x20>
	
	if(rxReadPosition != rxWritePosition)
	{
		returnMe = serial1Buffer[rxReadPosition];
		
		rxReadPosition++;
    1b8a:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <rxReadPosition>
    1b8e:	08 95       	ret
		
		if(rxReadPosition >= RX_BUFFER_SIZE)
		{
			rxReadPosition = 0;
    1b90:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <rxReadPosition>
    1b94:	08 95       	ret

}

char getChar()
{
	char returnMe = '\0';
    1b96:	80 e0       	ldi	r24, 0x00	; 0
		}
	
	}
	return returnMe;
	
    1b98:	08 95       	ret

00001b9a <trackControl>:
void resumeAll()
{
	char resumePlay[5] = {0xf0, 0xaa, 0x05, 0x0b, 0x55};
	serialWrite0(resumePlay);
	
}
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	2a 97       	sbiw	r28, 0x0a	; 10
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	90 ef       	ldi	r25, 0xF0	; 240
    1bb0:	99 83       	std	Y+1, r25	; 0x01
    1bb2:	9a ea       	ldi	r25, 0xAA	; 170
    1bb4:	9a 83       	std	Y+2, r25	; 0x02
    1bb6:	9a e0       	ldi	r25, 0x0A	; 10
    1bb8:	9b 83       	std	Y+3, r25	; 0x03
    1bba:	93 e0       	ldi	r25, 0x03	; 3
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	2d 83       	std	Y+5, r18	; 0x05
    1bc0:	8e 83       	std	Y+6, r24	; 0x06
    1bc2:	6f 83       	std	Y+7, r22	; 0x07
    1bc4:	48 87       	std	Y+8, r20	; 0x08
    1bc6:	19 86       	std	Y+9, r1	; 0x09
    1bc8:	85 e5       	ldi	r24, 0x55	; 85
    1bca:	8a 87       	std	Y+10, r24	; 0x0a
    1bcc:	ce 01       	movw	r24, r28
    1bce:	01 96       	adiw	r24, 0x01	; 1
    1bd0:	a2 df       	rcall	.-188    	; 0x1b16 <serialWrite0>
    1bd2:	2a 96       	adiw	r28, 0x0a	; 10
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	08 95       	ret

00001be4 <setOutputVolume>:
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	28 97       	sbiw	r28, 0x08	; 8
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	90 ef       	ldi	r25, 0xF0	; 240
    1bfa:	99 83       	std	Y+1, r25	; 0x01
    1bfc:	9a ea       	ldi	r25, 0xAA	; 170
    1bfe:	9a 83       	std	Y+2, r25	; 0x02
    1c00:	98 e0       	ldi	r25, 0x08	; 8
    1c02:	9b 83       	std	Y+3, r25	; 0x03
    1c04:	95 e0       	ldi	r25, 0x05	; 5
    1c06:	9c 83       	std	Y+4, r25	; 0x04
    1c08:	4d 83       	std	Y+5, r20	; 0x05
    1c0a:	8e 83       	std	Y+6, r24	; 0x06
    1c0c:	6f 83       	std	Y+7, r22	; 0x07
    1c0e:	85 e5       	ldi	r24, 0x55	; 85
    1c10:	88 87       	std	Y+8, r24	; 0x08
    1c12:	ce 01       	movw	r24, r28
    1c14:	01 96       	adiw	r24, 0x01	; 1
    1c16:	7f df       	rcall	.-258    	; 0x1b16 <serialWrite0>
    1c18:	28 96       	adiw	r28, 0x08	; 8
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	08 95       	ret

00001c2a <setTrackVolume>:
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	29 97       	sbiw	r28, 0x09	; 9
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	90 ef       	ldi	r25, 0xF0	; 240
    1c40:	99 83       	std	Y+1, r25	; 0x01
    1c42:	9a ea       	ldi	r25, 0xAA	; 170
    1c44:	9a 83       	std	Y+2, r25	; 0x02
    1c46:	99 e0       	ldi	r25, 0x09	; 9
    1c48:	9b 83       	std	Y+3, r25	; 0x03
    1c4a:	98 e0       	ldi	r25, 0x08	; 8
    1c4c:	9c 83       	std	Y+4, r25	; 0x04
    1c4e:	8d 83       	std	Y+5, r24	; 0x05
    1c50:	6e 83       	std	Y+6, r22	; 0x06
    1c52:	4f 83       	std	Y+7, r20	; 0x07
    1c54:	28 87       	std	Y+8, r18	; 0x08
    1c56:	85 e5       	ldi	r24, 0x55	; 85
    1c58:	89 87       	std	Y+9, r24	; 0x09
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	01 96       	adiw	r24, 0x01	; 1
    1c5e:	5b df       	rcall	.-330    	; 0x1b16 <serialWrite0>
    1c60:	29 96       	adiw	r28, 0x09	; 9
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	08 95       	ret

00001c72 <outputSampleRate>:

void outputSampleRate(uint8_t outputSelect, uint8_t offsetLSB, uint8_t offsetMSB)
{
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	28 97       	sbiw	r28, 0x08	; 8
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
	char pitchChange[8] = {0xf0, 0xaa, 0x08, 0x0c, outputSelect, offsetLSB, offsetMSB, 0x55};
    1c86:	90 ef       	ldi	r25, 0xF0	; 240
    1c88:	99 83       	std	Y+1, r25	; 0x01
    1c8a:	9a ea       	ldi	r25, 0xAA	; 170
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	98 e0       	ldi	r25, 0x08	; 8
    1c90:	9b 83       	std	Y+3, r25	; 0x03
    1c92:	9c e0       	ldi	r25, 0x0C	; 12
    1c94:	9c 83       	std	Y+4, r25	; 0x04
    1c96:	8d 83       	std	Y+5, r24	; 0x05
    1c98:	6e 83       	std	Y+6, r22	; 0x06
    1c9a:	4f 83       	std	Y+7, r20	; 0x07
    1c9c:	85 e5       	ldi	r24, 0x55	; 85
    1c9e:	88 87       	std	Y+8, r24	; 0x08
	serialWrite0(pitchChange);
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	38 df       	rcall	.-400    	; 0x1b16 <serialWrite0>
}
    1ca6:	28 96       	adiw	r28, 0x08	; 8
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	08 95       	ret

00001cb8 <__subsf3>:
    1cb8:	50 58       	subi	r21, 0x80	; 128

00001cba <__addsf3>:
    1cba:	bb 27       	eor	r27, r27
    1cbc:	aa 27       	eor	r26, r26
    1cbe:	0e d0       	rcall	.+28     	; 0x1cdc <__addsf3x>
    1cc0:	4d c1       	rjmp	.+666    	; 0x1f5c <__fp_round>
    1cc2:	3e d1       	rcall	.+636    	; 0x1f40 <__fp_pscA>
    1cc4:	30 f0       	brcs	.+12     	; 0x1cd2 <__addsf3+0x18>
    1cc6:	43 d1       	rcall	.+646    	; 0x1f4e <__fp_pscB>
    1cc8:	20 f0       	brcs	.+8      	; 0x1cd2 <__addsf3+0x18>
    1cca:	31 f4       	brne	.+12     	; 0x1cd8 <__addsf3+0x1e>
    1ccc:	9f 3f       	cpi	r25, 0xFF	; 255
    1cce:	11 f4       	brne	.+4      	; 0x1cd4 <__addsf3+0x1a>
    1cd0:	1e f4       	brtc	.+6      	; 0x1cd8 <__addsf3+0x1e>
    1cd2:	33 c1       	rjmp	.+614    	; 0x1f3a <__fp_nan>
    1cd4:	0e f4       	brtc	.+2      	; 0x1cd8 <__addsf3+0x1e>
    1cd6:	e0 95       	com	r30
    1cd8:	e7 fb       	bst	r30, 7
    1cda:	29 c1       	rjmp	.+594    	; 0x1f2e <__fp_inf>

00001cdc <__addsf3x>:
    1cdc:	e9 2f       	mov	r30, r25
    1cde:	4f d1       	rcall	.+670    	; 0x1f7e <__fp_split3>
    1ce0:	80 f3       	brcs	.-32     	; 0x1cc2 <__addsf3+0x8>
    1ce2:	ba 17       	cp	r27, r26
    1ce4:	62 07       	cpc	r22, r18
    1ce6:	73 07       	cpc	r23, r19
    1ce8:	84 07       	cpc	r24, r20
    1cea:	95 07       	cpc	r25, r21
    1cec:	18 f0       	brcs	.+6      	; 0x1cf4 <__addsf3x+0x18>
    1cee:	71 f4       	brne	.+28     	; 0x1d0c <__addsf3x+0x30>
    1cf0:	9e f5       	brtc	.+102    	; 0x1d58 <__addsf3x+0x7c>
    1cf2:	67 c1       	rjmp	.+718    	; 0x1fc2 <__fp_zero>
    1cf4:	0e f4       	brtc	.+2      	; 0x1cf8 <__addsf3x+0x1c>
    1cf6:	e0 95       	com	r30
    1cf8:	0b 2e       	mov	r0, r27
    1cfa:	ba 2f       	mov	r27, r26
    1cfc:	a0 2d       	mov	r26, r0
    1cfe:	0b 01       	movw	r0, r22
    1d00:	b9 01       	movw	r22, r18
    1d02:	90 01       	movw	r18, r0
    1d04:	0c 01       	movw	r0, r24
    1d06:	ca 01       	movw	r24, r20
    1d08:	a0 01       	movw	r20, r0
    1d0a:	11 24       	eor	r1, r1
    1d0c:	ff 27       	eor	r31, r31
    1d0e:	59 1b       	sub	r21, r25
    1d10:	99 f0       	breq	.+38     	; 0x1d38 <__addsf3x+0x5c>
    1d12:	59 3f       	cpi	r21, 0xF9	; 249
    1d14:	50 f4       	brcc	.+20     	; 0x1d2a <__addsf3x+0x4e>
    1d16:	50 3e       	cpi	r21, 0xE0	; 224
    1d18:	68 f1       	brcs	.+90     	; 0x1d74 <__addsf3x+0x98>
    1d1a:	1a 16       	cp	r1, r26
    1d1c:	f0 40       	sbci	r31, 0x00	; 0
    1d1e:	a2 2f       	mov	r26, r18
    1d20:	23 2f       	mov	r18, r19
    1d22:	34 2f       	mov	r19, r20
    1d24:	44 27       	eor	r20, r20
    1d26:	58 5f       	subi	r21, 0xF8	; 248
    1d28:	f3 cf       	rjmp	.-26     	; 0x1d10 <__addsf3x+0x34>
    1d2a:	46 95       	lsr	r20
    1d2c:	37 95       	ror	r19
    1d2e:	27 95       	ror	r18
    1d30:	a7 95       	ror	r26
    1d32:	f0 40       	sbci	r31, 0x00	; 0
    1d34:	53 95       	inc	r21
    1d36:	c9 f7       	brne	.-14     	; 0x1d2a <__addsf3x+0x4e>
    1d38:	7e f4       	brtc	.+30     	; 0x1d58 <__addsf3x+0x7c>
    1d3a:	1f 16       	cp	r1, r31
    1d3c:	ba 0b       	sbc	r27, r26
    1d3e:	62 0b       	sbc	r22, r18
    1d40:	73 0b       	sbc	r23, r19
    1d42:	84 0b       	sbc	r24, r20
    1d44:	ba f0       	brmi	.+46     	; 0x1d74 <__addsf3x+0x98>
    1d46:	91 50       	subi	r25, 0x01	; 1
    1d48:	a1 f0       	breq	.+40     	; 0x1d72 <__addsf3x+0x96>
    1d4a:	ff 0f       	add	r31, r31
    1d4c:	bb 1f       	adc	r27, r27
    1d4e:	66 1f       	adc	r22, r22
    1d50:	77 1f       	adc	r23, r23
    1d52:	88 1f       	adc	r24, r24
    1d54:	c2 f7       	brpl	.-16     	; 0x1d46 <__addsf3x+0x6a>
    1d56:	0e c0       	rjmp	.+28     	; 0x1d74 <__addsf3x+0x98>
    1d58:	ba 0f       	add	r27, r26
    1d5a:	62 1f       	adc	r22, r18
    1d5c:	73 1f       	adc	r23, r19
    1d5e:	84 1f       	adc	r24, r20
    1d60:	48 f4       	brcc	.+18     	; 0x1d74 <__addsf3x+0x98>
    1d62:	87 95       	ror	r24
    1d64:	77 95       	ror	r23
    1d66:	67 95       	ror	r22
    1d68:	b7 95       	ror	r27
    1d6a:	f7 95       	ror	r31
    1d6c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d6e:	08 f0       	brcs	.+2      	; 0x1d72 <__addsf3x+0x96>
    1d70:	b3 cf       	rjmp	.-154    	; 0x1cd8 <__addsf3+0x1e>
    1d72:	93 95       	inc	r25
    1d74:	88 0f       	add	r24, r24
    1d76:	08 f0       	brcs	.+2      	; 0x1d7a <__addsf3x+0x9e>
    1d78:	99 27       	eor	r25, r25
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	97 95       	ror	r25
    1d7e:	87 95       	ror	r24
    1d80:	08 95       	ret

00001d82 <__divsf3>:
    1d82:	0c d0       	rcall	.+24     	; 0x1d9c <__divsf3x>
    1d84:	eb c0       	rjmp	.+470    	; 0x1f5c <__fp_round>
    1d86:	e3 d0       	rcall	.+454    	; 0x1f4e <__fp_pscB>
    1d88:	40 f0       	brcs	.+16     	; 0x1d9a <__divsf3+0x18>
    1d8a:	da d0       	rcall	.+436    	; 0x1f40 <__fp_pscA>
    1d8c:	30 f0       	brcs	.+12     	; 0x1d9a <__divsf3+0x18>
    1d8e:	21 f4       	brne	.+8      	; 0x1d98 <__divsf3+0x16>
    1d90:	5f 3f       	cpi	r21, 0xFF	; 255
    1d92:	19 f0       	breq	.+6      	; 0x1d9a <__divsf3+0x18>
    1d94:	cc c0       	rjmp	.+408    	; 0x1f2e <__fp_inf>
    1d96:	51 11       	cpse	r21, r1
    1d98:	15 c1       	rjmp	.+554    	; 0x1fc4 <__fp_szero>
    1d9a:	cf c0       	rjmp	.+414    	; 0x1f3a <__fp_nan>

00001d9c <__divsf3x>:
    1d9c:	f0 d0       	rcall	.+480    	; 0x1f7e <__fp_split3>
    1d9e:	98 f3       	brcs	.-26     	; 0x1d86 <__divsf3+0x4>

00001da0 <__divsf3_pse>:
    1da0:	99 23       	and	r25, r25
    1da2:	c9 f3       	breq	.-14     	; 0x1d96 <__divsf3+0x14>
    1da4:	55 23       	and	r21, r21
    1da6:	b1 f3       	breq	.-20     	; 0x1d94 <__divsf3+0x12>
    1da8:	95 1b       	sub	r25, r21
    1daa:	55 0b       	sbc	r21, r21
    1dac:	bb 27       	eor	r27, r27
    1dae:	aa 27       	eor	r26, r26
    1db0:	62 17       	cp	r22, r18
    1db2:	73 07       	cpc	r23, r19
    1db4:	84 07       	cpc	r24, r20
    1db6:	38 f0       	brcs	.+14     	; 0x1dc6 <__divsf3_pse+0x26>
    1db8:	9f 5f       	subi	r25, 0xFF	; 255
    1dba:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbc:	22 0f       	add	r18, r18
    1dbe:	33 1f       	adc	r19, r19
    1dc0:	44 1f       	adc	r20, r20
    1dc2:	aa 1f       	adc	r26, r26
    1dc4:	a9 f3       	breq	.-22     	; 0x1db0 <__divsf3_pse+0x10>
    1dc6:	33 d0       	rcall	.+102    	; 0x1e2e <__divsf3_pse+0x8e>
    1dc8:	0e 2e       	mov	r0, r30
    1dca:	3a f0       	brmi	.+14     	; 0x1dda <__divsf3_pse+0x3a>
    1dcc:	e0 e8       	ldi	r30, 0x80	; 128
    1dce:	30 d0       	rcall	.+96     	; 0x1e30 <__divsf3_pse+0x90>
    1dd0:	91 50       	subi	r25, 0x01	; 1
    1dd2:	50 40       	sbci	r21, 0x00	; 0
    1dd4:	e6 95       	lsr	r30
    1dd6:	00 1c       	adc	r0, r0
    1dd8:	ca f7       	brpl	.-14     	; 0x1dcc <__divsf3_pse+0x2c>
    1dda:	29 d0       	rcall	.+82     	; 0x1e2e <__divsf3_pse+0x8e>
    1ddc:	fe 2f       	mov	r31, r30
    1dde:	27 d0       	rcall	.+78     	; 0x1e2e <__divsf3_pse+0x8e>
    1de0:	66 0f       	add	r22, r22
    1de2:	77 1f       	adc	r23, r23
    1de4:	88 1f       	adc	r24, r24
    1de6:	bb 1f       	adc	r27, r27
    1de8:	26 17       	cp	r18, r22
    1dea:	37 07       	cpc	r19, r23
    1dec:	48 07       	cpc	r20, r24
    1dee:	ab 07       	cpc	r26, r27
    1df0:	b0 e8       	ldi	r27, 0x80	; 128
    1df2:	09 f0       	breq	.+2      	; 0x1df6 <__divsf3_pse+0x56>
    1df4:	bb 0b       	sbc	r27, r27
    1df6:	80 2d       	mov	r24, r0
    1df8:	bf 01       	movw	r22, r30
    1dfa:	ff 27       	eor	r31, r31
    1dfc:	93 58       	subi	r25, 0x83	; 131
    1dfe:	5f 4f       	sbci	r21, 0xFF	; 255
    1e00:	2a f0       	brmi	.+10     	; 0x1e0c <__divsf3_pse+0x6c>
    1e02:	9e 3f       	cpi	r25, 0xFE	; 254
    1e04:	51 05       	cpc	r21, r1
    1e06:	68 f0       	brcs	.+26     	; 0x1e22 <__divsf3_pse+0x82>
    1e08:	92 c0       	rjmp	.+292    	; 0x1f2e <__fp_inf>
    1e0a:	dc c0       	rjmp	.+440    	; 0x1fc4 <__fp_szero>
    1e0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1e0e:	ec f3       	brlt	.-6      	; 0x1e0a <__divsf3_pse+0x6a>
    1e10:	98 3e       	cpi	r25, 0xE8	; 232
    1e12:	dc f3       	brlt	.-10     	; 0x1e0a <__divsf3_pse+0x6a>
    1e14:	86 95       	lsr	r24
    1e16:	77 95       	ror	r23
    1e18:	67 95       	ror	r22
    1e1a:	b7 95       	ror	r27
    1e1c:	f7 95       	ror	r31
    1e1e:	9f 5f       	subi	r25, 0xFF	; 255
    1e20:	c9 f7       	brne	.-14     	; 0x1e14 <__divsf3_pse+0x74>
    1e22:	88 0f       	add	r24, r24
    1e24:	91 1d       	adc	r25, r1
    1e26:	96 95       	lsr	r25
    1e28:	87 95       	ror	r24
    1e2a:	97 f9       	bld	r25, 7
    1e2c:	08 95       	ret
    1e2e:	e1 e0       	ldi	r30, 0x01	; 1
    1e30:	66 0f       	add	r22, r22
    1e32:	77 1f       	adc	r23, r23
    1e34:	88 1f       	adc	r24, r24
    1e36:	bb 1f       	adc	r27, r27
    1e38:	62 17       	cp	r22, r18
    1e3a:	73 07       	cpc	r23, r19
    1e3c:	84 07       	cpc	r24, r20
    1e3e:	ba 07       	cpc	r27, r26
    1e40:	20 f0       	brcs	.+8      	; 0x1e4a <__divsf3_pse+0xaa>
    1e42:	62 1b       	sub	r22, r18
    1e44:	73 0b       	sbc	r23, r19
    1e46:	84 0b       	sbc	r24, r20
    1e48:	ba 0b       	sbc	r27, r26
    1e4a:	ee 1f       	adc	r30, r30
    1e4c:	88 f7       	brcc	.-30     	; 0x1e30 <__divsf3_pse+0x90>
    1e4e:	e0 95       	com	r30
    1e50:	08 95       	ret

00001e52 <__fixsfsi>:
    1e52:	04 d0       	rcall	.+8      	; 0x1e5c <__fixunssfsi>
    1e54:	68 94       	set
    1e56:	b1 11       	cpse	r27, r1
    1e58:	b5 c0       	rjmp	.+362    	; 0x1fc4 <__fp_szero>
    1e5a:	08 95       	ret

00001e5c <__fixunssfsi>:
    1e5c:	98 d0       	rcall	.+304    	; 0x1f8e <__fp_splitA>
    1e5e:	88 f0       	brcs	.+34     	; 0x1e82 <__fixunssfsi+0x26>
    1e60:	9f 57       	subi	r25, 0x7F	; 127
    1e62:	90 f0       	brcs	.+36     	; 0x1e88 <__fixunssfsi+0x2c>
    1e64:	b9 2f       	mov	r27, r25
    1e66:	99 27       	eor	r25, r25
    1e68:	b7 51       	subi	r27, 0x17	; 23
    1e6a:	a0 f0       	brcs	.+40     	; 0x1e94 <__fixunssfsi+0x38>
    1e6c:	d1 f0       	breq	.+52     	; 0x1ea2 <__fixunssfsi+0x46>
    1e6e:	66 0f       	add	r22, r22
    1e70:	77 1f       	adc	r23, r23
    1e72:	88 1f       	adc	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	1a f0       	brmi	.+6      	; 0x1e7e <__fixunssfsi+0x22>
    1e78:	ba 95       	dec	r27
    1e7a:	c9 f7       	brne	.-14     	; 0x1e6e <__fixunssfsi+0x12>
    1e7c:	12 c0       	rjmp	.+36     	; 0x1ea2 <__fixunssfsi+0x46>
    1e7e:	b1 30       	cpi	r27, 0x01	; 1
    1e80:	81 f0       	breq	.+32     	; 0x1ea2 <__fixunssfsi+0x46>
    1e82:	9f d0       	rcall	.+318    	; 0x1fc2 <__fp_zero>
    1e84:	b1 e0       	ldi	r27, 0x01	; 1
    1e86:	08 95       	ret
    1e88:	9c c0       	rjmp	.+312    	; 0x1fc2 <__fp_zero>
    1e8a:	67 2f       	mov	r22, r23
    1e8c:	78 2f       	mov	r23, r24
    1e8e:	88 27       	eor	r24, r24
    1e90:	b8 5f       	subi	r27, 0xF8	; 248
    1e92:	39 f0       	breq	.+14     	; 0x1ea2 <__fixunssfsi+0x46>
    1e94:	b9 3f       	cpi	r27, 0xF9	; 249
    1e96:	cc f3       	brlt	.-14     	; 0x1e8a <__fixunssfsi+0x2e>
    1e98:	86 95       	lsr	r24
    1e9a:	77 95       	ror	r23
    1e9c:	67 95       	ror	r22
    1e9e:	b3 95       	inc	r27
    1ea0:	d9 f7       	brne	.-10     	; 0x1e98 <__fixunssfsi+0x3c>
    1ea2:	3e f4       	brtc	.+14     	; 0x1eb2 <__fixunssfsi+0x56>
    1ea4:	90 95       	com	r25
    1ea6:	80 95       	com	r24
    1ea8:	70 95       	com	r23
    1eaa:	61 95       	neg	r22
    1eac:	7f 4f       	sbci	r23, 0xFF	; 255
    1eae:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb2:	08 95       	ret

00001eb4 <__floatunsisf>:
    1eb4:	e8 94       	clt
    1eb6:	09 c0       	rjmp	.+18     	; 0x1eca <__floatsisf+0x12>

00001eb8 <__floatsisf>:
    1eb8:	97 fb       	bst	r25, 7
    1eba:	3e f4       	brtc	.+14     	; 0x1eca <__floatsisf+0x12>
    1ebc:	90 95       	com	r25
    1ebe:	80 95       	com	r24
    1ec0:	70 95       	com	r23
    1ec2:	61 95       	neg	r22
    1ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eca:	99 23       	and	r25, r25
    1ecc:	a9 f0       	breq	.+42     	; 0x1ef8 <__floatsisf+0x40>
    1ece:	f9 2f       	mov	r31, r25
    1ed0:	96 e9       	ldi	r25, 0x96	; 150
    1ed2:	bb 27       	eor	r27, r27
    1ed4:	93 95       	inc	r25
    1ed6:	f6 95       	lsr	r31
    1ed8:	87 95       	ror	r24
    1eda:	77 95       	ror	r23
    1edc:	67 95       	ror	r22
    1ede:	b7 95       	ror	r27
    1ee0:	f1 11       	cpse	r31, r1
    1ee2:	f8 cf       	rjmp	.-16     	; 0x1ed4 <__floatsisf+0x1c>
    1ee4:	fa f4       	brpl	.+62     	; 0x1f24 <__floatsisf+0x6c>
    1ee6:	bb 0f       	add	r27, r27
    1ee8:	11 f4       	brne	.+4      	; 0x1eee <__floatsisf+0x36>
    1eea:	60 ff       	sbrs	r22, 0
    1eec:	1b c0       	rjmp	.+54     	; 0x1f24 <__floatsisf+0x6c>
    1eee:	6f 5f       	subi	r22, 0xFF	; 255
    1ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef6:	16 c0       	rjmp	.+44     	; 0x1f24 <__floatsisf+0x6c>
    1ef8:	88 23       	and	r24, r24
    1efa:	11 f0       	breq	.+4      	; 0x1f00 <__floatsisf+0x48>
    1efc:	96 e9       	ldi	r25, 0x96	; 150
    1efe:	11 c0       	rjmp	.+34     	; 0x1f22 <__floatsisf+0x6a>
    1f00:	77 23       	and	r23, r23
    1f02:	21 f0       	breq	.+8      	; 0x1f0c <__floatsisf+0x54>
    1f04:	9e e8       	ldi	r25, 0x8E	; 142
    1f06:	87 2f       	mov	r24, r23
    1f08:	76 2f       	mov	r23, r22
    1f0a:	05 c0       	rjmp	.+10     	; 0x1f16 <__floatsisf+0x5e>
    1f0c:	66 23       	and	r22, r22
    1f0e:	71 f0       	breq	.+28     	; 0x1f2c <__floatsisf+0x74>
    1f10:	96 e8       	ldi	r25, 0x86	; 134
    1f12:	86 2f       	mov	r24, r22
    1f14:	70 e0       	ldi	r23, 0x00	; 0
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	2a f0       	brmi	.+10     	; 0x1f24 <__floatsisf+0x6c>
    1f1a:	9a 95       	dec	r25
    1f1c:	66 0f       	add	r22, r22
    1f1e:	77 1f       	adc	r23, r23
    1f20:	88 1f       	adc	r24, r24
    1f22:	da f7       	brpl	.-10     	; 0x1f1a <__floatsisf+0x62>
    1f24:	88 0f       	add	r24, r24
    1f26:	96 95       	lsr	r25
    1f28:	87 95       	ror	r24
    1f2a:	97 f9       	bld	r25, 7
    1f2c:	08 95       	ret

00001f2e <__fp_inf>:
    1f2e:	97 f9       	bld	r25, 7
    1f30:	9f 67       	ori	r25, 0x7F	; 127
    1f32:	80 e8       	ldi	r24, 0x80	; 128
    1f34:	70 e0       	ldi	r23, 0x00	; 0
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	08 95       	ret

00001f3a <__fp_nan>:
    1f3a:	9f ef       	ldi	r25, 0xFF	; 255
    1f3c:	80 ec       	ldi	r24, 0xC0	; 192
    1f3e:	08 95       	ret

00001f40 <__fp_pscA>:
    1f40:	00 24       	eor	r0, r0
    1f42:	0a 94       	dec	r0
    1f44:	16 16       	cp	r1, r22
    1f46:	17 06       	cpc	r1, r23
    1f48:	18 06       	cpc	r1, r24
    1f4a:	09 06       	cpc	r0, r25
    1f4c:	08 95       	ret

00001f4e <__fp_pscB>:
    1f4e:	00 24       	eor	r0, r0
    1f50:	0a 94       	dec	r0
    1f52:	12 16       	cp	r1, r18
    1f54:	13 06       	cpc	r1, r19
    1f56:	14 06       	cpc	r1, r20
    1f58:	05 06       	cpc	r0, r21
    1f5a:	08 95       	ret

00001f5c <__fp_round>:
    1f5c:	09 2e       	mov	r0, r25
    1f5e:	03 94       	inc	r0
    1f60:	00 0c       	add	r0, r0
    1f62:	11 f4       	brne	.+4      	; 0x1f68 <__fp_round+0xc>
    1f64:	88 23       	and	r24, r24
    1f66:	52 f0       	brmi	.+20     	; 0x1f7c <__fp_round+0x20>
    1f68:	bb 0f       	add	r27, r27
    1f6a:	40 f4       	brcc	.+16     	; 0x1f7c <__fp_round+0x20>
    1f6c:	bf 2b       	or	r27, r31
    1f6e:	11 f4       	brne	.+4      	; 0x1f74 <__fp_round+0x18>
    1f70:	60 ff       	sbrs	r22, 0
    1f72:	04 c0       	rjmp	.+8      	; 0x1f7c <__fp_round+0x20>
    1f74:	6f 5f       	subi	r22, 0xFF	; 255
    1f76:	7f 4f       	sbci	r23, 0xFF	; 255
    1f78:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7c:	08 95       	ret

00001f7e <__fp_split3>:
    1f7e:	57 fd       	sbrc	r21, 7
    1f80:	90 58       	subi	r25, 0x80	; 128
    1f82:	44 0f       	add	r20, r20
    1f84:	55 1f       	adc	r21, r21
    1f86:	59 f0       	breq	.+22     	; 0x1f9e <__fp_splitA+0x10>
    1f88:	5f 3f       	cpi	r21, 0xFF	; 255
    1f8a:	71 f0       	breq	.+28     	; 0x1fa8 <__fp_splitA+0x1a>
    1f8c:	47 95       	ror	r20

00001f8e <__fp_splitA>:
    1f8e:	88 0f       	add	r24, r24
    1f90:	97 fb       	bst	r25, 7
    1f92:	99 1f       	adc	r25, r25
    1f94:	61 f0       	breq	.+24     	; 0x1fae <__fp_splitA+0x20>
    1f96:	9f 3f       	cpi	r25, 0xFF	; 255
    1f98:	79 f0       	breq	.+30     	; 0x1fb8 <__fp_splitA+0x2a>
    1f9a:	87 95       	ror	r24
    1f9c:	08 95       	ret
    1f9e:	12 16       	cp	r1, r18
    1fa0:	13 06       	cpc	r1, r19
    1fa2:	14 06       	cpc	r1, r20
    1fa4:	55 1f       	adc	r21, r21
    1fa6:	f2 cf       	rjmp	.-28     	; 0x1f8c <__fp_split3+0xe>
    1fa8:	46 95       	lsr	r20
    1faa:	f1 df       	rcall	.-30     	; 0x1f8e <__fp_splitA>
    1fac:	08 c0       	rjmp	.+16     	; 0x1fbe <__fp_splitA+0x30>
    1fae:	16 16       	cp	r1, r22
    1fb0:	17 06       	cpc	r1, r23
    1fb2:	18 06       	cpc	r1, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	f1 cf       	rjmp	.-30     	; 0x1f9a <__fp_splitA+0xc>
    1fb8:	86 95       	lsr	r24
    1fba:	71 05       	cpc	r23, r1
    1fbc:	61 05       	cpc	r22, r1
    1fbe:	08 94       	sec
    1fc0:	08 95       	ret

00001fc2 <__fp_zero>:
    1fc2:	e8 94       	clt

00001fc4 <__fp_szero>:
    1fc4:	bb 27       	eor	r27, r27
    1fc6:	66 27       	eor	r22, r22
    1fc8:	77 27       	eor	r23, r23
    1fca:	cb 01       	movw	r24, r22
    1fcc:	97 f9       	bld	r25, 7
    1fce:	08 95       	ret

00001fd0 <__divmodhi4>:
    1fd0:	97 fb       	bst	r25, 7
    1fd2:	07 2e       	mov	r0, r23
    1fd4:	16 f4       	brtc	.+4      	; 0x1fda <__divmodhi4+0xa>
    1fd6:	00 94       	com	r0
    1fd8:	06 d0       	rcall	.+12     	; 0x1fe6 <__divmodhi4_neg1>
    1fda:	77 fd       	sbrc	r23, 7
    1fdc:	08 d0       	rcall	.+16     	; 0x1fee <__divmodhi4_neg2>
    1fde:	1a d0       	rcall	.+52     	; 0x2014 <__udivmodhi4>
    1fe0:	07 fc       	sbrc	r0, 7
    1fe2:	05 d0       	rcall	.+10     	; 0x1fee <__divmodhi4_neg2>
    1fe4:	3e f4       	brtc	.+14     	; 0x1ff4 <__divmodhi4_exit>

00001fe6 <__divmodhi4_neg1>:
    1fe6:	90 95       	com	r25
    1fe8:	81 95       	neg	r24
    1fea:	9f 4f       	sbci	r25, 0xFF	; 255
    1fec:	08 95       	ret

00001fee <__divmodhi4_neg2>:
    1fee:	70 95       	com	r23
    1ff0:	61 95       	neg	r22
    1ff2:	7f 4f       	sbci	r23, 0xFF	; 255

00001ff4 <__divmodhi4_exit>:
    1ff4:	08 95       	ret

00001ff6 <__umulhisi3>:
    1ff6:	a2 9f       	mul	r26, r18
    1ff8:	b0 01       	movw	r22, r0
    1ffa:	b3 9f       	mul	r27, r19
    1ffc:	c0 01       	movw	r24, r0
    1ffe:	a3 9f       	mul	r26, r19
    2000:	70 0d       	add	r23, r0
    2002:	81 1d       	adc	r24, r1
    2004:	11 24       	eor	r1, r1
    2006:	91 1d       	adc	r25, r1
    2008:	b2 9f       	mul	r27, r18
    200a:	70 0d       	add	r23, r0
    200c:	81 1d       	adc	r24, r1
    200e:	11 24       	eor	r1, r1
    2010:	91 1d       	adc	r25, r1
    2012:	08 95       	ret

00002014 <__udivmodhi4>:
    2014:	aa 1b       	sub	r26, r26
    2016:	bb 1b       	sub	r27, r27
    2018:	51 e1       	ldi	r21, 0x11	; 17
    201a:	07 c0       	rjmp	.+14     	; 0x202a <__udivmodhi4_ep>

0000201c <__udivmodhi4_loop>:
    201c:	aa 1f       	adc	r26, r26
    201e:	bb 1f       	adc	r27, r27
    2020:	a6 17       	cp	r26, r22
    2022:	b7 07       	cpc	r27, r23
    2024:	10 f0       	brcs	.+4      	; 0x202a <__udivmodhi4_ep>
    2026:	a6 1b       	sub	r26, r22
    2028:	b7 0b       	sbc	r27, r23

0000202a <__udivmodhi4_ep>:
    202a:	88 1f       	adc	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	5a 95       	dec	r21
    2030:	a9 f7       	brne	.-22     	; 0x201c <__udivmodhi4_loop>
    2032:	80 95       	com	r24
    2034:	90 95       	com	r25
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	08 95       	ret

0000203c <_exit>:
    203c:	f8 94       	cli

0000203e <__stop_program>:
    203e:	ff cf       	rjmp	.-2      	; 0x203e <__stop_program>
