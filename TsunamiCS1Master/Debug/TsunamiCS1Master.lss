
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e2  00800200  0000389c  00003930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000389c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000423  008003e2  008003e2  00003b12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003b12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  00003b88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007f86  00000000  00000000  00003fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002150  00000000  00000000  0000bf66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037f1  00000000  00000000  0000e0b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c4c  00000000  00000000  000118a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015d6  00000000  00000000  000124f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005448  00000000  00000000  00013aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  00018f12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
       2:	00 00       	nop
       4:	11 c1       	rjmp	.+546    	; 0x228 <__bad_interrupt>
       6:	00 00       	nop
       8:	0f c1       	rjmp	.+542    	; 0x228 <__bad_interrupt>
       a:	00 00       	nop
       c:	1e c2       	rjmp	.+1084   	; 0x44a <__vector_3>
       e:	00 00       	nop
      10:	3c c2       	rjmp	.+1144   	; 0x48a <__vector_4>
      12:	00 00       	nop
      14:	5a c2       	rjmp	.+1204   	; 0x4ca <__vector_5>
      16:	00 00       	nop
      18:	78 c2       	rjmp	.+1264   	; 0x50a <__vector_6>
      1a:	00 00       	nop
      1c:	05 c1       	rjmp	.+522    	; 0x228 <__bad_interrupt>
      1e:	00 00       	nop
      20:	03 c1       	rjmp	.+518    	; 0x228 <__bad_interrupt>
      22:	00 00       	nop
      24:	01 c1       	rjmp	.+514    	; 0x228 <__bad_interrupt>
      26:	00 00       	nop
      28:	ff c0       	rjmp	.+510    	; 0x228 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fd c0       	rjmp	.+506    	; 0x228 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fb c0       	rjmp	.+502    	; 0x228 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__vector_13>
      38:	f7 c0       	rjmp	.+494    	; 0x228 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f5 c0       	rjmp	.+490    	; 0x228 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f3 c0       	rjmp	.+486    	; 0x228 <__bad_interrupt>
      42:	00 00       	nop
      44:	f1 c0       	rjmp	.+482    	; 0x228 <__bad_interrupt>
      46:	00 00       	nop
      48:	ef c0       	rjmp	.+478    	; 0x228 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ed c0       	rjmp	.+474    	; 0x228 <__bad_interrupt>
      4e:	00 00       	nop
      50:	eb c0       	rjmp	.+470    	; 0x228 <__bad_interrupt>
      52:	00 00       	nop
      54:	e9 c0       	rjmp	.+466    	; 0x228 <__bad_interrupt>
      56:	00 00       	nop
      58:	e7 c0       	rjmp	.+462    	; 0x228 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e5 c0       	rjmp	.+458    	; 0x228 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e3 c0       	rjmp	.+454    	; 0x228 <__bad_interrupt>
      62:	00 00       	nop
      64:	e1 c0       	rjmp	.+450    	; 0x228 <__bad_interrupt>
      66:	00 00       	nop
      68:	df c0       	rjmp	.+446    	; 0x228 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__vector_27>
      70:	db c0       	rjmp	.+438    	; 0x228 <__bad_interrupt>
      72:	00 00       	nop
      74:	d9 c0       	rjmp	.+434    	; 0x228 <__bad_interrupt>
      76:	00 00       	nop
      78:	d7 c0       	rjmp	.+430    	; 0x228 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d5 c0       	rjmp	.+426    	; 0x228 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d3 c0       	rjmp	.+422    	; 0x228 <__bad_interrupt>
      82:	00 00       	nop
      84:	d1 c0       	rjmp	.+418    	; 0x228 <__bad_interrupt>
      86:	00 00       	nop
      88:	cf c0       	rjmp	.+414    	; 0x228 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cd c0       	rjmp	.+410    	; 0x228 <__bad_interrupt>
      8e:	00 00       	nop
      90:	cb c0       	rjmp	.+406    	; 0x228 <__bad_interrupt>
      92:	00 00       	nop
      94:	c9 c0       	rjmp	.+402    	; 0x228 <__bad_interrupt>
      96:	00 00       	nop
      98:	c7 c0       	rjmp	.+398    	; 0x228 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c5 c0       	rjmp	.+394    	; 0x228 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c3 c0       	rjmp	.+390    	; 0x228 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c1 c0       	rjmp	.+386    	; 0x228 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bf c0       	rjmp	.+382    	; 0x228 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	bd c0       	rjmp	.+378    	; 0x228 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bb c0       	rjmp	.+374    	; 0x228 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b9 c0       	rjmp	.+370    	; 0x228 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b7 c0       	rjmp	.+366    	; 0x228 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b5 c0       	rjmp	.+362    	; 0x228 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b3 c0       	rjmp	.+358    	; 0x228 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b1 c0       	rjmp	.+354    	; 0x228 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	af c0       	rjmp	.+350    	; 0x228 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ad c0       	rjmp	.+346    	; 0x228 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ab c0       	rjmp	.+342    	; 0x228 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a9 c0       	rjmp	.+338    	; 0x228 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__vector_54>
      dc:	a5 c0       	rjmp	.+330    	; 0x228 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a3 c0       	rjmp	.+326    	; 0x228 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	dc 02       	muls	r29, r28
      e6:	c1 04       	cpc	r12, r1
      e8:	c1 04       	cpc	r12, r1
      ea:	c1 04       	cpc	r12, r1
      ec:	c1 04       	cpc	r12, r1
      ee:	c1 04       	cpc	r12, r1
      f0:	c1 04       	cpc	r12, r1
      f2:	c1 04       	cpc	r12, r1
      f4:	c1 04       	cpc	r12, r1
      f6:	c1 04       	cpc	r12, r1
      f8:	c1 04       	cpc	r12, r1
      fa:	c1 04       	cpc	r12, r1
      fc:	c1 04       	cpc	r12, r1
      fe:	c1 04       	cpc	r12, r1
     100:	c1 04       	cpc	r12, r1
     102:	c1 04       	cpc	r12, r1
     104:	c1 04       	cpc	r12, r1
     106:	f3 02       	muls	r31, r19
     108:	10 03       	mulsu	r17, r16
     10a:	37 03       	mulsu	r19, r23
     10c:	c1 04       	cpc	r12, r1
     10e:	c1 04       	cpc	r12, r1
     110:	c1 04       	cpc	r12, r1
     112:	c1 04       	cpc	r12, r1
     114:	c1 04       	cpc	r12, r1
     116:	fb 02       	muls	r31, r27
     118:	18 03       	fmul	r17, r16
     11a:	3f 03       	fmul	r19, r23
     11c:	c1 04       	cpc	r12, r1
     11e:	c1 04       	cpc	r12, r1
     120:	c1 04       	cpc	r12, r1
     122:	c1 04       	cpc	r12, r1
     124:	c1 04       	cpc	r12, r1
     126:	5a 03       	fmul	r21, r18
     128:	8f 03       	fmulsu	r16, r23
     12a:	a3 03       	fmuls	r18, r19
     12c:	d8 03       	fmulsu	r21, r16
     12e:	3f 04       	cpc	r3, r15
     130:	c1 04       	cpc	r12, r1
     132:	c1 04       	cpc	r12, r1
     134:	c1 04       	cpc	r12, r1
     136:	62 03       	mulsu	r22, r18
     138:	97 03       	fmuls	r17, r23
     13a:	ab 03       	fmulsu	r18, r19
     13c:	e0 03       	fmuls	r22, r16
     13e:	47 04       	cpc	r4, r7
     140:	c1 04       	cpc	r12, r1
     142:	c1 04       	cpc	r12, r1
     144:	c1 04       	cpc	r12, r1
     146:	81 04       	cpc	r8, r1
     148:	9b 04       	cpc	r9, r11
     14a:	ba 04       	cpc	r11, r10
     14c:	c1 04       	cpc	r12, r1
     14e:	c1 04       	cpc	r12, r1
     150:	c1 04       	cpc	r12, r1
     152:	c1 04       	cpc	r12, r1
     154:	c1 04       	cpc	r12, r1
     156:	89 04       	cpc	r8, r9
     158:	a3 04       	cpc	r10, r3
     15a:	69 0a       	sbc	r6, r25
     15c:	32 0d       	add	r19, r2
     15e:	32 0d       	add	r19, r2
     160:	32 0d       	add	r19, r2
     162:	32 0d       	add	r19, r2
     164:	32 0d       	add	r19, r2
     166:	32 0d       	add	r19, r2
     168:	32 0d       	add	r19, r2
     16a:	32 0d       	add	r19, r2
     16c:	32 0d       	add	r19, r2
     16e:	32 0d       	add	r19, r2
     170:	32 0d       	add	r19, r2
     172:	32 0d       	add	r19, r2
     174:	32 0d       	add	r19, r2
     176:	32 0d       	add	r19, r2
     178:	32 0d       	add	r19, r2
     17a:	7f 0a       	sbc	r7, r31
     17c:	99 0a       	sbc	r9, r25
     17e:	bf 0a       	sbc	r11, r31
     180:	ee 0a       	sbc	r14, r30
     182:	32 0d       	add	r19, r2
     184:	32 0d       	add	r19, r2
     186:	32 0d       	add	r19, r2
     188:	32 0d       	add	r19, r2
     18a:	32 0d       	add	r19, r2
     18c:	b6 0a       	sbc	r11, r22
     18e:	dc 0a       	sbc	r13, r28
     190:	0b 0b       	sbc	r16, r27
     192:	32 0d       	add	r19, r2
     194:	32 0d       	add	r19, r2
     196:	32 0d       	add	r19, r2
     198:	32 0d       	add	r19, r2
     19a:	1c 0b       	sbc	r17, r28
     19c:	36 0b       	sbc	r19, r22
     19e:	6f 0b       	sbc	r22, r31
     1a0:	bb 0b       	sbc	r27, r27
     1a2:	ee 0b       	sbc	r30, r30
     1a4:	58 0c       	add	r5, r8
     1a6:	32 0d       	add	r19, r2
     1a8:	32 0d       	add	r19, r2
     1aa:	32 0d       	add	r19, r2
     1ac:	53 0b       	sbc	r21, r19
     1ae:	8c 0b       	sbc	r24, r28
     1b0:	d8 0b       	sbc	r29, r24
     1b2:	0b 0c       	add	r0, r11
     1b4:	75 0c       	add	r7, r5
     1b6:	32 0d       	add	r19, r2
     1b8:	32 0d       	add	r19, r2
     1ba:	9e 0c       	add	r9, r14
     1bc:	b8 0c       	add	r11, r8
     1be:	e7 0c       	add	r14, r7
     1c0:	16 0d       	add	r17, r6
     1c2:	32 0d       	add	r19, r2
     1c4:	32 0d       	add	r19, r2
     1c6:	32 0d       	add	r19, r2
     1c8:	32 0d       	add	r19, r2
     1ca:	32 0d       	add	r19, r2
     1cc:	d5 0c       	add	r13, r5
     1ce:	04 0d       	add	r16, r4
     1d0:	4d 13       	cpse	r20, r29
     1d2:	50 13       	cpse	r21, r16
     1d4:	53 13       	cpse	r21, r19
     1d6:	56 13       	cpse	r21, r22
     1d8:	59 13       	cpse	r21, r25
     1da:	5c 13       	cpse	r21, r28
     1dc:	5f 13       	cpse	r21, r31
     1de:	62 13       	cpse	r22, r18
     1e0:	65 13       	cpse	r22, r21
     1e2:	68 13       	cpse	r22, r24
     1e4:	6b 13       	cpse	r22, r27
     1e6:	6e 13       	cpse	r22, r30

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d1 e2       	ldi	r29, 0x21	; 33
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	13 e0       	ldi	r17, 0x03	; 3
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b2 e0       	ldi	r27, 0x02	; 2
     1fe:	ec e9       	ldi	r30, 0x9C	; 156
     200:	f8 e3       	ldi	r31, 0x38	; 56
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a2 3e       	cpi	r26, 0xE2	; 226
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	28 e0       	ldi	r18, 0x08	; 8
     214:	a2 ee       	ldi	r26, 0xE2	; 226
     216:	b3 e0       	ldi	r27, 0x03	; 3
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a5 30       	cpi	r26, 0x05	; 5
     21e:	b2 07       	cpc	r27, r18
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	4a d6       	rcall	.+3220   	; 0xeb8 <main>
     224:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <_exit>

00000228 <__bad_interrupt>:
     228:	eb ce       	rjmp	.-554    	; 0x0 <__vectors>

0000022a <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     22a:	8f ef       	ldi	r24, 0xFF	; 255
     22c:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     22e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons and Encoder buttons
	PORTB = 0B01111111; //lets see if we can read these without debouncing
     232:	8f e7       	ldi	r24, 0x7F	; 127
     234:	85 b9       	out	0x05, r24	; 5
     236:	08 95       	ret

00000238 <listenTrigButtons>:

}

void listenTrigButtons(Pattern *buttonCurrentPattern, Globals *currentGlobals)
{
     238:	cf 92       	push	r12
     23a:	df 92       	push	r13
     23c:	ef 92       	push	r14
     23e:	ff 92       	push	r15
     240:	0f 93       	push	r16
     242:	1f 93       	push	r17
     244:	cf 93       	push	r28
     246:	6c 01       	movw	r12, r24
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     248:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     24c:	20 95       	com	r18
     24e:	20 93 f5 03 	sts	0x03F5, r18	; 0x8003f5 <buttonsCurrentCycle>
	(currentGlobals->currentTrigButtons) = (buttonsCurrentCycle << 8) | (PINA^255);
     252:	90 b1       	in	r25, 0x00	; 0
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	32 2f       	mov	r19, r18
     258:	22 27       	eor	r18, r18
     25a:	90 95       	com	r25
     25c:	29 2b       	or	r18, r25
     25e:	db 01       	movw	r26, r22
     260:	2d 93       	st	X+, r18
     262:	3c 93       	st	X, r19
	if(currentGlobals->currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     264:	40 91 e2 03 	lds	r20, 0x03E2	; 0x8003e2 <__data_end>
     268:	50 91 e3 03 	lds	r21, 0x03E3	; 0x8003e3 <__data_end+0x1>
     26c:	24 17       	cp	r18, r20
     26e:	35 07       	cpc	r19, r21
     270:	09 f4       	brne	.+2      	; 0x274 <listenTrigButtons+0x3c>
     272:	43 c0       	rjmp	.+134    	; 0x2fa <listenTrigButtons+0xc2>
     274:	7b 01       	movw	r14, r22
	{
		lastFullBits = currentGlobals->currentTrigButtons;
     276:	30 93 e3 03 	sts	0x03E3, r19	; 0x8003e3 <__data_end+0x1>
     27a:	20 93 e2 03 	sts	0x03E2, r18	; 0x8003e2 <__data_end>
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
     27e:	fb 01       	movw	r30, r22
     280:	00 81       	ld	r16, Z
     282:	11 81       	ldd	r17, Z+1	; 0x01
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     284:	c0 e0       	ldi	r28, 0x00	; 0
		{
			currentTrig = (fullBitsParse&1);
     286:	90 2f       	mov	r25, r16
     288:	91 70       	andi	r25, 0x01	; 1
     28a:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <currentTrig>
			if(currentTrig)
     28e:	99 23       	and	r25, r25
     290:	79 f1       	breq	.+94     	; 0x2f0 <listenTrigButtons+0xb8>
			{
				uint8_t encoderAstate = currentGlobals->menuState >> 4;
				switch (encoderAstate)
     292:	d7 01       	movw	r26, r14
     294:	1a 96       	adiw	r26, 0x0a	; 10
     296:	9c 91       	ld	r25, X
     298:	92 95       	swap	r25
     29a:	9f 70       	andi	r25, 0x0F	; 15
     29c:	91 30       	cpi	r25, 0x01	; 1
     29e:	51 f0       	breq	.+20     	; 0x2b4 <listenTrigButtons+0x7c>
     2a0:	18 f0       	brcs	.+6      	; 0x2a8 <listenTrigButtons+0x70>
     2a2:	94 30       	cpi	r25, 0x04	; 4
     2a4:	28 f5       	brcc	.+74     	; 0x2f0 <listenTrigButtons+0xb8>
     2a6:	1a c0       	rjmp	.+52     	; 0x2dc <listenTrigButtons+0xa4>
				{
	
					//for "performance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
					case 0: //performance mode
					//we trigger a sound here based on the location of bc
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     2a8:	4c 2f       	mov	r20, r28
     2aa:	b7 01       	movw	r22, r14
     2ac:	c6 01       	movw	r24, r12
     2ae:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <playTrack>
					break;
     2b2:	1e c0       	rjmp	.+60     	; 0x2f0 <listenTrigButtons+0xb8>

					case 1:
					buttonCurrentPattern->trackSequence[currentGlobals->currentStep] ^= currentGlobals->currentTrigButtons;
     2b4:	d7 01       	movw	r26, r14
     2b6:	18 96       	adiw	r26, 0x08	; 8
     2b8:	ec 91       	ld	r30, X
     2ba:	18 97       	sbiw	r26, 0x08	; 8
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	ee 0f       	add	r30, r30
     2c0:	ff 1f       	adc	r31, r31
     2c2:	ec 0d       	add	r30, r12
     2c4:	fd 1d       	adc	r31, r13
     2c6:	e5 50       	subi	r30, 0x05	; 5
     2c8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ca:	20 81       	ld	r18, Z
     2cc:	31 81       	ldd	r19, Z+1	; 0x01
     2ce:	8d 91       	ld	r24, X+
     2d0:	9c 91       	ld	r25, X
     2d2:	82 27       	eor	r24, r18
     2d4:	93 27       	eor	r25, r19
     2d6:	91 83       	std	Z+1, r25	; 0x01
     2d8:	80 83       	st	Z, r24
					//turn on step number, or turn off step number.
					//step sequencer mode.
					break;
     2da:	0a c0       	rjmp	.+20     	; 0x2f0 <listenTrigButtons+0xb8>
					//we want this functionality for both case 2 and case 3
					case 2:
					case 3:;
					//select track for sample assignment
					//uint16_t currentSample = (buttonCurrentPattern->trackSampleMSB[bc]<<8)|(buttonCurrentPattern->trackSampleLSB[bc]);
					currentGlobals->currentTrack = bc;
     2dc:	f7 01       	movw	r30, r14
     2de:	c1 87       	std	Z+9, r28	; 0x09
					currentGlobals->valueChangeFlag |=(1<<triggerChange);
     2e0:	86 85       	ldd	r24, Z+14	; 0x0e
     2e2:	82 60       	ori	r24, 0x02	; 2
     2e4:	86 87       	std	Z+14, r24	; 0x0e
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     2e6:	4c 2f       	mov	r20, r28
     2e8:	b7 01       	movw	r22, r14
     2ea:	c6 01       	movw	r24, r12
     2ec:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <playTrack>
					default:
					//this should be the same as case 0;
					break;
				}
			}
			fullBitsParse = fullBitsParse>>1;
     2f0:	16 95       	lsr	r17
     2f2:	07 95       	ror	r16
	{
		lastFullBits = currentGlobals->currentTrigButtons;
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     2f4:	cf 5f       	subi	r28, 0xFF	; 255
     2f6:	c0 31       	cpi	r28, 0x10	; 16
     2f8:	31 f6       	brne	.-116    	; 0x286 <listenTrigButtons+0x4e>
				}
			}
			fullBitsParse = fullBitsParse>>1;
		}
	}
}
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	df 90       	pop	r13
     306:	cf 90       	pop	r12
     308:	08 95       	ret

0000030a <listenGPButtons>:

void listenGPButtons(Pattern currentPattern, Globals *currentGlobals) //may need to be a pointer
{
     30a:	ff 92       	push	r15
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	cd b7       	in	r28, 0x3d	; 61
     316:	de b7       	in	r29, 0x3e	; 62
     318:	cc 57       	subi	r28, 0x7C	; 124
     31a:	de 4f       	sbci	r29, 0xFE	; 254
     31c:	08 81       	ld	r16, Y
     31e:	19 81       	ldd	r17, Y+1	; 0x01
     320:	c4 58       	subi	r28, 0x84	; 132
     322:	d1 40       	sbci	r29, 0x01	; 1

	if(button_down(1 << PB5))
     324:	80 e2       	ldi	r24, 0x20	; 32
     326:	77 d0       	rcall	.+238    	; 0x416 <button_down>
     328:	88 23       	and	r24, r24
     32a:	41 f1       	breq	.+80     	; 0x37c <listenGPButtons+0x72>
	{ //top encoder button
		if(currentGlobals->menuState>>4==3)
     32c:	f8 01       	movw	r30, r16
     32e:	82 85       	ldd	r24, Z+10	; 0x0a
     330:	82 95       	swap	r24
     332:	8f 70       	andi	r24, 0x0F	; 15
     334:	83 30       	cpi	r24, 0x03	; 3
     336:	21 f4       	brne	.+8      	; 0x340 <listenGPButtons+0x36>
		{
			globalWrite(currentGlobals);
     338:	c8 01       	movw	r24, r16
     33a:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <globalWrite>
     33e:	1e c0       	rjmp	.+60     	; 0x37c <listenGPButtons+0x72>
		}else
		{
			eepromSavePattern(currentPattern, currentGlobals->currentPatternNumber);
     340:	f8 01       	movw	r30, r16
     342:	87 81       	ldd	r24, Z+7	; 0x07
     344:	8f 93       	push	r24
     346:	8d b7       	in	r24, 0x3d	; 61
     348:	9e b7       	in	r25, 0x3e	; 62
     34a:	8b 57       	subi	r24, 0x7B	; 123
     34c:	91 40       	sbci	r25, 0x01	; 1
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	f8 94       	cli
     352:	9e bf       	out	0x3e, r25	; 62
     354:	0f be       	out	0x3f, r0	; 63
     356:	8d bf       	out	0x3d, r24	; 61
     358:	ad b7       	in	r26, 0x3d	; 61
     35a:	be b7       	in	r27, 0x3e	; 62
     35c:	11 96       	adiw	r26, 0x01	; 1
     35e:	8b e7       	ldi	r24, 0x7B	; 123
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	fe 01       	movw	r30, r28
     364:	39 96       	adiw	r30, 0x09	; 9
     366:	01 90       	ld	r0, Z+
     368:	0d 92       	st	X+, r0
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	e1 f7       	brne	.-8      	; 0x366 <listenGPButtons+0x5c>
     36e:	0e 94 80 17 	call	0x2f00	; 0x2f00 <eepromSavePattern>
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	f8 94       	cli
     376:	de bf       	out	0x3e, r29	; 62
     378:	0f be       	out	0x3f, r0	; 63
     37a:	cd bf       	out	0x3d, r28	; 61
		}
		
	}

	uint8_t encoderSwitchMask = 0b00001000;
	if(button_down(1<<PB6))
     37c:	80 e4       	ldi	r24, 0x40	; 64
     37e:	4b d0       	rcall	.+150    	; 0x416 <button_down>
     380:	88 23       	and	r24, r24
     382:	51 f0       	breq	.+20     	; 0x398 <listenGPButtons+0x8e>
		{//bottom encoder button
			uint8_t encoderBCheck = currentGlobals->menuState&encoderSwitchMask;
     384:	f8 01       	movw	r30, r16
     386:	82 85       	ldd	r24, Z+10	; 0x0a
			if(encoderBCheck)
     388:	83 ff       	sbrs	r24, 3
     38a:	03 c0       	rjmp	.+6      	; 0x392 <listenGPButtons+0x88>
			{
				currentGlobals->menuState &=0b11110111;//turn off the encoderBFlag
     38c:	87 7f       	andi	r24, 0xF7	; 247
     38e:	82 87       	std	Z+10, r24	; 0x0a
     390:	03 c0       	rjmp	.+6      	; 0x398 <listenGPButtons+0x8e>

			}else
			{
				currentGlobals->menuState |=0b00001000; //turn on the encoderBFlag bit
     392:	88 60       	ori	r24, 0x08	; 8
     394:	f8 01       	movw	r30, r16
     396:	82 87       	std	Z+10, r24	; 0x0a
			}
		}
	uint8_t playButtonMask = 0b0000001; //we could probably make a define for both of these masks.
	uint8_t playStateCheck = currentGlobals->playState & playButtonMask;
     398:	f8 01       	movw	r30, r16
	if(button_down(1<<PB4))
     39a:	f3 84       	ldd	r15, Z+11	; 0x0b
     39c:	80 e1       	ldi	r24, 0x10	; 16
     39e:	3b d0       	rcall	.+118    	; 0x416 <button_down>
     3a0:	88 23       	and	r24, r24
     3a2:	71 f0       	breq	.+28     	; 0x3c0 <listenGPButtons+0xb6>
	{
		if(playStateCheck)
     3a4:	f0 fe       	sbrs	r15, 0
     3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <listenGPButtons+0xaa>
		{
			currentGlobals->playState=0; //playstate is on, turn it off
     3a8:	f8 01       	movw	r30, r16
     3aa:	13 86       	std	Z+11, r1	; 0x0b
			currentGlobals->currentGPButtons &=(~0x20); //turn the first bit
     3ac:	82 81       	ldd	r24, Z+2	; 0x02
     3ae:	8f 7d       	andi	r24, 0xDF	; 223
     3b0:	82 83       	std	Z+2, r24	; 0x02
     3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <listenGPButtons+0xb6>
			
		}else
		{
			currentGlobals->playState=1;
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	f8 01       	movw	r30, r16
     3b8:	83 87       	std	Z+11, r24	; 0x0b
			currentGlobals->currentGPButtons |= 0x20; //turn on the first bit
     3ba:	82 81       	ldd	r24, Z+2	; 0x02
     3bc:	80 62       	ori	r24, 0x20	; 32
     3be:	82 83       	std	Z+2, r24	; 0x02
		}

	} //not sure which button this is
	uint8_t trackButtonMask = 0b00000001;
	uint8_t trackStateCheck = (currentGlobals->buttonSwitchFlag) & trackButtonMask;
     3c0:	f8 01       	movw	r30, r16
	if(button_down(1<<PB0))
     3c2:	f5 84       	ldd	r15, Z+13	; 0x0d
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	27 d0       	rcall	.+78     	; 0x416 <button_down>
     3c8:	88 23       	and	r24, r24
     3ca:	71 f0       	breq	.+28     	; 0x3e8 <listenGPButtons+0xde>
	{
		if(trackStateCheck)
     3cc:	f0 fe       	sbrs	r15, 0
     3ce:	06 c0       	rjmp	.+12     	; 0x3dc <listenGPButtons+0xd2>
		{
			currentGlobals->buttonSwitchFlag = 0;
     3d0:	f8 01       	movw	r30, r16
     3d2:	15 86       	std	Z+13, r1	; 0x0d
			currentGlobals->currentGPButtons &=(~0x02);
     3d4:	82 81       	ldd	r24, Z+2	; 0x02
     3d6:	8d 7f       	andi	r24, 0xFD	; 253
     3d8:	82 83       	std	Z+2, r24	; 0x02
     3da:	06 c0       	rjmp	.+12     	; 0x3e8 <listenGPButtons+0xde>
		}else
		{
			currentGlobals->buttonSwitchFlag = 1;
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	f8 01       	movw	r30, r16
     3e0:	85 87       	std	Z+13, r24	; 0x0d
			currentGlobals->currentGPButtons |=0x02;
     3e2:	82 81       	ldd	r24, Z+2	; 0x02
     3e4:	82 60       	ori	r24, 0x02	; 2
		}
	}
	uint8_t fineButtonMask = 4;
	uint8_t fineStateCheck = (currentGlobals->currentGPButtons) & fineButtonMask;
     3e6:	82 83       	std	Z+2, r24	; 0x02
     3e8:	f8 01       	movw	r30, r16
	if(button_down(1<<PB1))
     3ea:	f2 80       	ldd	r15, Z+2	; 0x02
     3ec:	82 e0       	ldi	r24, 0x02	; 2
     3ee:	13 d0       	rcall	.+38     	; 0x416 <button_down>
     3f0:	88 23       	and	r24, r24
     3f2:	59 f0       	breq	.+22     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{		
		if(fineStateCheck)
     3f4:	f2 fe       	sbrs	r15, 2
     3f6:	05 c0       	rjmp	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		{
			
			currentGlobals->currentGPButtons &=(~0x04);
     3f8:	f8 01       	movw	r30, r16
     3fa:	82 81       	ldd	r24, Z+2	; 0x02
     3fc:	8b 7f       	andi	r24, 0xFB	; 251
     3fe:	82 83       	std	Z+2, r24	; 0x02
     400:	04 c0       	rjmp	.+8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		}else
		{
			currentGlobals->currentGPButtons |=0x04;
     402:	f8 01       	movw	r30, r16
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	84 60       	ori	r24, 0x04	; 4
     408:	82 83       	std	Z+2, r24	; 0x02
		}
		
	}
}
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	08 95       	ret

00000416 <button_down>:

volatile uint8_t buttons_down;
uint8_t button_down(uint8_t button_mask)
{
	//I should probably check out what this is.
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     416:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     418:	f8 94       	cli
	{
		button_mask &= buttons_down;
     41a:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <buttons_down>
     41e:	89 23       	and	r24, r25
		buttons_down ^= button_mask;
     420:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <buttons_down>
     424:	98 27       	eor	r25, r24
     426:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <buttons_down>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     42a:	2f bf       	out	0x3f, r18	; 63
	}
	
	return button_mask;
     42c:	08 95       	ret

0000042e <initEncoders>:
		encoderPortStates|=(1<<bottomEncoderPinB); //we want to set bit 3.
	}
}

void listenEncodersNew(Pattern *currentPattern, Globals *currentGlobals)
{
     42e:	e9 e6       	ldi	r30, 0x69	; 105
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	80 81       	ld	r24, Z
     434:	80 6f       	ori	r24, 0xF0	; 240
     436:	80 83       	st	Z, r24
     438:	ea e6       	ldi	r30, 0x6A	; 106
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 81       	ld	r24, Z
     43e:	8f 60       	ori	r24, 0x0F	; 15
     440:	80 83       	st	Z, r24
     442:	8d b3       	in	r24, 0x1d	; 29
     444:	8c 63       	ori	r24, 0x3C	; 60
     446:	8d bb       	out	0x1d, r24	; 29
     448:	08 95       	ret

0000044a <__vector_3>:
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	8f 93       	push	r24
     456:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <encoderPortStates>
     45a:	81 ff       	sbrs	r24, 1
     45c:	0b c0       	rjmp	.+22     	; 0x474 <__vector_3+0x2a>
     45e:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <bottomEncoderValue>
     462:	81 50       	subi	r24, 0x01	; 1
     464:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <bottomEncoderValue>
     468:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <encoderPortStates>
     46c:	8c 70       	andi	r24, 0x0C	; 12
     46e:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <encoderPortStates>
     472:	05 c0       	rjmp	.+10     	; 0x47e <__vector_3+0x34>
     474:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <encoderPortStates>
     478:	81 60       	ori	r24, 0x01	; 1
     47a:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <encoderPortStates>
     47e:	8f 91       	pop	r24
     480:	0f 90       	pop	r0
     482:	0f be       	out	0x3f, r0	; 63
     484:	0f 90       	pop	r0
     486:	1f 90       	pop	r1
     488:	18 95       	reti

0000048a <__vector_4>:
     48a:	1f 92       	push	r1
     48c:	0f 92       	push	r0
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	8f 93       	push	r24
     496:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <encoderPortStates>
     49a:	80 ff       	sbrs	r24, 0
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <__vector_4+0x2a>
     49e:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <bottomEncoderValue>
     4a2:	8f 5f       	subi	r24, 0xFF	; 255
     4a4:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <bottomEncoderValue>
     4a8:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <encoderPortStates>
     4ac:	8c 70       	andi	r24, 0x0C	; 12
     4ae:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <encoderPortStates>
     4b2:	05 c0       	rjmp	.+10     	; 0x4be <__vector_4+0x34>
     4b4:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <encoderPortStates>
     4b8:	82 60       	ori	r24, 0x02	; 2
     4ba:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <encoderPortStates>
     4be:	8f 91       	pop	r24
     4c0:	0f 90       	pop	r0
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	0f 90       	pop	r0
     4c6:	1f 90       	pop	r1
     4c8:	18 95       	reti

000004ca <__vector_5>:
     4ca:	1f 92       	push	r1
     4cc:	0f 92       	push	r0
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	0f 92       	push	r0
     4d2:	11 24       	eor	r1, r1
     4d4:	8f 93       	push	r24
     4d6:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <encoderPortStates>
     4da:	83 ff       	sbrs	r24, 3
     4dc:	0b c0       	rjmp	.+22     	; 0x4f4 <__vector_5+0x2a>
     4de:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <topEncoderValue>
     4e2:	8f 5f       	subi	r24, 0xFF	; 255
     4e4:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <topEncoderValue>
     4e8:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <encoderPortStates>
     4ec:	83 70       	andi	r24, 0x03	; 3
     4ee:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <encoderPortStates>
     4f2:	05 c0       	rjmp	.+10     	; 0x4fe <__vector_5+0x34>
     4f4:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <encoderPortStates>
     4f8:	84 60       	ori	r24, 0x04	; 4
     4fa:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <encoderPortStates>
     4fe:	8f 91       	pop	r24
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <__vector_6>:
     50a:	1f 92       	push	r1
     50c:	0f 92       	push	r0
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	0f 92       	push	r0
     512:	11 24       	eor	r1, r1
     514:	8f 93       	push	r24
     516:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <encoderPortStates>
     51a:	82 ff       	sbrs	r24, 2
     51c:	0b c0       	rjmp	.+22     	; 0x534 <__vector_6+0x2a>
     51e:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <topEncoderValue>
     522:	81 50       	subi	r24, 0x01	; 1
     524:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <topEncoderValue>
     528:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <encoderPortStates>
     52c:	83 70       	andi	r24, 0x03	; 3
     52e:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <encoderPortStates>
     532:	05 c0       	rjmp	.+10     	; 0x53e <__vector_6+0x34>
     534:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <encoderPortStates>
     538:	88 60       	ori	r24, 0x08	; 8
     53a:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <encoderPortStates>
     53e:	8f 91       	pop	r24
     540:	0f 90       	pop	r0
     542:	0f be       	out	0x3f, r0	; 63
     544:	0f 90       	pop	r0
     546:	1f 90       	pop	r1
     548:	18 95       	reti

0000054a <listenEncoders>:
	//this will happen every millisecond. 
	
}

void listenEncoders(Pattern *currentPattern, Globals *currentGlobals)
{
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	9c 01       	movw	r18, r24
     550:	fb 01       	movw	r30, r22
	if(topEncoderValue!=topEncoderLastValue)
     552:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <topEncoderValue>
     556:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <topEncoderLastValue>
     55a:	98 17       	cp	r25, r24
     55c:	89 f0       	breq	.+34     	; 0x580 <listenEncoders+0x36>
	{
		currentGlobals->menuState = ((topEncoderValue%4)<<4);
     55e:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <topEncoderValue>
     562:	93 70       	andi	r25, 0x03	; 3
     564:	92 95       	swap	r25
     566:	90 7f       	andi	r25, 0xF0	; 240
     568:	92 87       	std	Z+10, r25	; 0x0a
		bottomEncoderValue = 0; 
     56a:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <bottomEncoderValue>
		bottomEncoderLastValue = 0; 
     56e:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <bottomEncoderLastValue>
		currentGlobals->valueChangeFlag |= (1<<encoderChange);
     572:	86 85       	ldd	r24, Z+14	; 0x0e
     574:	81 60       	ori	r24, 0x01	; 1
     576:	86 87       	std	Z+14, r24	; 0x0e
		topEncoderLastValue = topEncoderValue;
     578:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <topEncoderValue>
     57c:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <topEncoderLastValue>
	}
	
	if(bottomEncoderValue!=bottomEncoderLastValue)
     580:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <bottomEncoderValue>
     584:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <bottomEncoderLastValue>
     588:	98 17       	cp	r25, r24
     58a:	09 f4       	brne	.+2      	; 0x58e <listenEncoders+0x44>
     58c:	fe c1       	rjmp	.+1020   	; 0x98a <listenEncoders+0x440>
	{
		 uint8_t menuSub = bottomEncoderValue - bottomEncoderLastValue;
     58e:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <bottomEncoderValue>
     592:	a9 2f       	mov	r26, r25
     594:	a8 1b       	sub	r26, r24
		 currentGlobals->valueChangeFlag |= (1<<encoderChange);
     596:	96 85       	ldd	r25, Z+14	; 0x0e
     598:	91 60       	ori	r25, 0x01	; 1
     59a:	96 87       	std	Z+14, r25	; 0x0e
		 			//if this value is negative, we increase the menu.
		 			//if positive, we decrement the menu.
		switch(currentGlobals->menuState)
     59c:	42 85       	ldd	r20, Z+10	; 0x0a
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	4b 33       	cpi	r20, 0x3B	; 59
     5a2:	51 05       	cpc	r21, r1
     5a4:	08 f0       	brcs	.+2      	; 0x5a8 <listenEncoders+0x5e>
     5a6:	ed c1       	rjmp	.+986    	; 0x982 <listenEncoders+0x438>
     5a8:	ef 01       	movw	r28, r30
     5aa:	fa 01       	movw	r30, r20
     5ac:	88 27       	eor	r24, r24
     5ae:	ee 58       	subi	r30, 0x8E	; 142
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	8f 4f       	sbci	r24, 0xFF	; 255
     5b4:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__tablejump2__>
		{
			case PreformanceModeInit:
			if(menuSub==1)
     5b8:	a1 30       	cpi	r26, 0x01	; 1
     5ba:	41 f4       	brne	.+16     	; 0x5cc <listenEncoders+0x82>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     5bc:	8f 81       	ldd	r24, Y+7	; 0x07
     5be:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     5c0:	11 f0       	breq	.+4      	; 0x5c6 <listenEncoders+0x7c>
		switch(currentGlobals->menuState)
		{
			case PreformanceModeInit:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     5c2:	8f 83       	std	Y+7, r24	; 0x07
     5c4:	0b c0       	rjmp	.+22     	; 0x5dc <listenEncoders+0x92>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     5c6:	8f ef       	ldi	r24, 0xFF	; 255
     5c8:	8f 83       	std	Y+7, r24	; 0x07
     5ca:	08 c0       	rjmp	.+16     	; 0x5dc <listenEncoders+0x92>
				}
				
			}else if(menuSub==255) //we don't want to hit this when switching menus after changing from the sequencer. 
     5cc:	af 3f       	cpi	r26, 0xFF	; 255
     5ce:	31 f4       	brne	.+12     	; 0x5dc <listenEncoders+0x92>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     5d0:	8f 81       	ldd	r24, Y+7	; 0x07
     5d2:	81 50       	subi	r24, 0x01	; 1
     5d4:	10 f0       	brcs	.+4      	; 0x5da <listenEncoders+0x90>
     5d6:	8f 83       	std	Y+7, r24	; 0x07
     5d8:	01 c0       	rjmp	.+2      	; 0x5dc <listenEncoders+0x92>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     5da:	1f 82       	std	Y+7, r1	; 0x07
				}
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     5dc:	6f 81       	ldd	r22, Y+7	; 0x07
     5de:	c9 01       	movw	r24, r18
     5e0:	0e 94 6d 19 	call	0x32da	; 0x32da <eepromLoadPattern>
			break;
     5e4:	ce c1       	rjmp	.+924    	; 0x982 <listenEncoders+0x438>
			
			case SequencerMenuArrow1:			
			if(menuSub==1)
     5e6:	a1 30       	cpi	r26, 0x01	; 1
     5e8:	19 f4       	brne	.+6      	; 0x5f0 <listenEncoders+0xa6>
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     5ea:	83 e1       	ldi	r24, 0x13	; 19
     5ec:	8a 87       	std	Y+10, r24	; 0x0a
     5ee:	c9 c1       	rjmp	.+914    	; 0x982 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     5f0:	82 e1       	ldi	r24, 0x12	; 18
     5f2:	8a 87       	std	Y+10, r24	; 0x0a
     5f4:	c6 c1       	rjmp	.+908    	; 0x982 <listenEncoders+0x438>
			}
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
     5f6:	a1 30       	cpi	r26, 0x01	; 1
     5f8:	41 f4       	brne	.+16     	; 0x60a <listenEncoders+0xc0>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     5fa:	8f 81       	ldd	r24, Y+7	; 0x07
     5fc:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     5fe:	11 f0       	breq	.+4      	; 0x604 <listenEncoders+0xba>
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     600:	8f 83       	std	Y+7, r24	; 0x07
     602:	09 c0       	rjmp	.+18     	; 0x616 <listenEncoders+0xcc>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     604:	8f ef       	ldi	r24, 0xFF	; 255
     606:	8f 83       	std	Y+7, r24	; 0x07
     608:	06 c0       	rjmp	.+12     	; 0x616 <listenEncoders+0xcc>
				}
		
			}else
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     60a:	8f 81       	ldd	r24, Y+7	; 0x07
     60c:	81 50       	subi	r24, 0x01	; 1
     60e:	10 f0       	brcs	.+4      	; 0x614 <listenEncoders+0xca>
     610:	8f 83       	std	Y+7, r24	; 0x07
     612:	01 c0       	rjmp	.+2      	; 0x616 <listenEncoders+0xcc>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     614:	1f 82       	std	Y+7, r1	; 0x07
				}	
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     616:	6f 81       	ldd	r22, Y+7	; 0x07
     618:	c9 01       	movw	r24, r18
     61a:	0e 94 6d 19 	call	0x32da	; 0x32da <eepromLoadPattern>
			//this keeps the knob reads that will happen right after the eeprom load to write over the loaded values.
			//Now when you load a pattern, the saved positions of the knobs are unchanged until you turn a knob. 
			break;
     61e:	b1 c1       	rjmp	.+866    	; 0x982 <listenEncoders+0x438>
			
			case SequencerMenuArrow2:
			if(menuSub==1)
     620:	a1 30       	cpi	r26, 0x01	; 1
     622:	19 f4       	brne	.+6      	; 0x62a <listenEncoders+0xe0>
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     624:	81 e1       	ldi	r24, 0x11	; 17
     626:	8a 87       	std	Y+10, r24	; 0x0a
     628:	ac c1       	rjmp	.+856    	; 0x982 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     62a:	83 e1       	ldi	r24, 0x13	; 19
     62c:	8a 87       	std	Y+10, r24	; 0x0a
     62e:	a9 c1       	rjmp	.+850    	; 0x982 <listenEncoders+0x438>
			}
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
     630:	a1 30       	cpi	r26, 0x01	; 1
     632:	79 f4       	brne	.+30     	; 0x652 <listenEncoders+0x108>
			{
				currentPattern->numSteps++;
     634:	f9 01       	movw	r30, r18
     636:	e6 53       	subi	r30, 0x36	; 54
     638:	ff 4f       	sbci	r31, 0xFF	; 255
     63a:	90 81       	ld	r25, Z
     63c:	9f 5f       	subi	r25, 0xFF	; 255
				if(currentPattern->numSteps>64)
     63e:	91 34       	cpi	r25, 0x41	; 65
     640:	10 f4       	brcc	.+4      	; 0x646 <listenEncoders+0xfc>
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
			{
				currentPattern->numSteps++;
     642:	90 83       	st	Z, r25
     644:	9e c1       	rjmp	.+828    	; 0x982 <listenEncoders+0x438>
				if(currentPattern->numSteps>64)
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
     646:	f9 01       	movw	r30, r18
     648:	e6 53       	subi	r30, 0x36	; 54
     64a:	ff 4f       	sbci	r31, 0xFF	; 255
     64c:	80 e4       	ldi	r24, 0x40	; 64
     64e:	80 83       	st	Z, r24
     650:	98 c1       	rjmp	.+816    	; 0x982 <listenEncoders+0x438>
				}
			}else
			{
				currentPattern->numSteps--;
     652:	f9 01       	movw	r30, r18
     654:	e6 53       	subi	r30, 0x36	; 54
     656:	ff 4f       	sbci	r31, 0xFF	; 255
     658:	90 81       	ld	r25, Z
     65a:	91 50       	subi	r25, 0x01	; 1
				if(currentPattern->numSteps<1)
     65c:	11 f0       	breq	.+4      	; 0x662 <listenEncoders+0x118>
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
				}
			}else
			{
				currentPattern->numSteps--;
     65e:	90 83       	st	Z, r25
     660:	90 c1       	rjmp	.+800    	; 0x982 <listenEncoders+0x438>
				if(currentPattern->numSteps<1)
				{//we can't have a 0 step pattern. 
					currentPattern->numSteps=1;
     662:	f9 01       	movw	r30, r18
     664:	e6 53       	subi	r30, 0x36	; 54
     666:	ff 4f       	sbci	r31, 0xFF	; 255
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	80 83       	st	Z, r24
     66c:	8a c1       	rjmp	.+788    	; 0x982 <listenEncoders+0x438>
				}
			}
			break;
			
			case SequencerMenuArrow3:;
			if(menuSub==1)
     66e:	a1 30       	cpi	r26, 0x01	; 1
     670:	19 f4       	brne	.+6      	; 0x678 <listenEncoders+0x12e>
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     672:	82 e1       	ldi	r24, 0x12	; 18
     674:	8a 87       	std	Y+10, r24	; 0x0a
     676:	85 c1       	rjmp	.+778    	; 0x982 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     678:	81 e1       	ldi	r24, 0x11	; 17
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	82 c1       	rjmp	.+772    	; 0x982 <listenEncoders+0x438>
			}
			break;
			
			case SequencerMenuArrow3Select:
			//change current step number
			if(menuSub==1)
     67e:	a1 30       	cpi	r26, 0x01	; 1
     680:	69 f4       	brne	.+26     	; 0x69c <listenEncoders+0x152>
			{
				currentGlobals->currentStep++;
     682:	98 85       	ldd	r25, Y+8	; 0x08
     684:	9f 5f       	subi	r25, 0xFF	; 255
     686:	98 87       	std	Y+8, r25	; 0x08
				if(currentGlobals->currentStep>=currentPattern->numSteps)
     688:	f9 01       	movw	r30, r18
     68a:	e6 53       	subi	r30, 0x36	; 54
     68c:	ff 4f       	sbci	r31, 0xFF	; 255
     68e:	80 81       	ld	r24, Z
     690:	98 17       	cp	r25, r24
     692:	08 f4       	brcc	.+2      	; 0x696 <listenEncoders+0x14c>
     694:	76 c1       	rjmp	.+748    	; 0x982 <listenEncoders+0x438>
				{//our ceiling is the maximum number of steps.
					currentGlobals->currentStep=(currentPattern->numSteps)-1;
     696:	81 50       	subi	r24, 0x01	; 1
     698:	88 87       	std	Y+8, r24	; 0x08
     69a:	73 c1       	rjmp	.+742    	; 0x982 <listenEncoders+0x438>
				}
			}else
			{
				currentGlobals->currentStep--;
     69c:	98 85       	ldd	r25, Y+8	; 0x08
     69e:	91 50       	subi	r25, 0x01	; 1
     6a0:	98 87       	std	Y+8, r25	; 0x08
				if(currentGlobals->currentStep>currentPattern->numSteps)
     6a2:	f9 01       	movw	r30, r18
     6a4:	e6 53       	subi	r30, 0x36	; 54
     6a6:	ff 4f       	sbci	r31, 0xFF	; 255
     6a8:	80 81       	ld	r24, Z
     6aa:	89 17       	cp	r24, r25
     6ac:	08 f0       	brcs	.+2      	; 0x6b0 <listenEncoders+0x166>
     6ae:	69 c1       	rjmp	.+722    	; 0x982 <listenEncoders+0x438>
				{//do no write notes to step 0.
					currentGlobals->currentStep=0;
     6b0:	18 86       	std	Y+8, r1	; 0x08
     6b2:	67 c1       	rjmp	.+718    	; 0x982 <listenEncoders+0x438>
				}				
			}
			break;
			
			case TrackMenuArrow1:;
			if(menuSub==1)
     6b4:	a1 30       	cpi	r26, 0x01	; 1
     6b6:	19 f4       	brne	.+6      	; 0x6be <listenEncoders+0x174>
			{
				currentGlobals->menuState = TrackMenuArrow5;
     6b8:	85 e2       	ldi	r24, 0x25	; 37
     6ba:	8a 87       	std	Y+10, r24	; 0x0a
     6bc:	62 c1       	rjmp	.+708    	; 0x982 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow2;
     6be:	82 e2       	ldi	r24, 0x22	; 34
     6c0:	8a 87       	std	Y+10, r24	; 0x0a
     6c2:	5f c1       	rjmp	.+702    	; 0x982 <listenEncoders+0x438>
			}
			break;
			
			case TrackMenuArrow1Select:;
			uint16_t currentSample = ((currentPattern->trackSampleMSB[currentGlobals->currentTrack])<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     6c4:	89 85       	ldd	r24, Y+9	; 0x09
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	b9 01       	movw	r22, r18
     6ca:	68 0f       	add	r22, r24
     6cc:	79 1f       	adc	r23, r25
     6ce:	fb 01       	movw	r30, r22
     6d0:	e8 56       	subi	r30, 0x68	; 104
     6d2:	ff 4f       	sbci	r31, 0xFF	; 255
     6d4:	40 81       	ld	r20, Z
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	54 2f       	mov	r21, r20
     6da:	44 27       	eor	r20, r20
     6dc:	70 96       	adiw	r30, 0x10	; 16
     6de:	60 81       	ld	r22, Z
     6e0:	46 2b       	or	r20, r22
			if(menuSub==1)
     6e2:	a1 30       	cpi	r26, 0x01	; 1
     6e4:	49 f4       	brne	.+18     	; 0x6f8 <listenEncoders+0x1ae>
     6e6:	4f 5f       	subi	r20, 0xFF	; 255
     6e8:	5f 4f       	sbci	r21, 0xFF	; 255
     6ea:	41 30       	cpi	r20, 0x01	; 1
     6ec:	60 e1       	ldi	r22, 0x10	; 16
     6ee:	56 07       	cpc	r21, r22
     6f0:	40 f0       	brcs	.+16     	; 0x702 <listenEncoders+0x1b8>
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	50 e1       	ldi	r21, 0x10	; 16
     6f6:	05 c0       	rjmp	.+10     	; 0x702 <listenEncoders+0x1b8>
				{//maximum number of indexable samples.
					currentSample=4096;
				}
			}else
			{//no samples in space 0.
				currentSample--;
     6f8:	41 50       	subi	r20, 0x01	; 1
     6fa:	51 09       	sbc	r21, r1
				if(currentSample<1)
     6fc:	11 f4       	brne	.+4      	; 0x702 <listenEncoders+0x1b8>
				{
					currentSample=1;
     6fe:	41 e0       	ldi	r20, 0x01	; 1
     700:	50 e0       	ldi	r21, 0x00	; 0
				}
			}
			currentPattern->trackSampleLSB[currentGlobals->currentTrack] = (currentSample&0x00FF);//we want to lob off the top 8 bits, just in case. May be unnecessary.
     702:	82 0f       	add	r24, r18
     704:	93 1f       	adc	r25, r19
     706:	fc 01       	movw	r30, r24
     708:	e8 55       	subi	r30, 0x58	; 88
     70a:	ff 4f       	sbci	r31, 0xFF	; 255
     70c:	40 83       	st	Z, r20
			currentPattern->trackSampleMSB[currentGlobals->currentTrack] = (currentSample>>8); 
     70e:	89 85       	ldd	r24, Y+9	; 0x09
     710:	28 0f       	add	r18, r24
     712:	31 1d       	adc	r19, r1
     714:	f9 01       	movw	r30, r18
     716:	e8 56       	subi	r30, 0x68	; 104
     718:	ff 4f       	sbci	r31, 0xFF	; 255
     71a:	50 83       	st	Z, r21
			break;
     71c:	32 c1       	rjmp	.+612    	; 0x982 <listenEncoders+0x438>
			
			case TrackMenuArrow2:
			if(menuSub==1)
     71e:	a1 30       	cpi	r26, 0x01	; 1
     720:	19 f4       	brne	.+6      	; 0x728 <listenEncoders+0x1de>
			{
				currentGlobals->menuState = TrackMenuArrow1;
     722:	81 e2       	ldi	r24, 0x21	; 33
     724:	8a 87       	std	Y+10, r24	; 0x0a
     726:	2d c1       	rjmp	.+602    	; 0x982 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow3;
     728:	83 e2       	ldi	r24, 0x23	; 35
     72a:	8a 87       	std	Y+10, r24	; 0x0a
     72c:	2a c1       	rjmp	.+596    	; 0x982 <listenEncoders+0x438>
			
			case TrackMenuArrow2Select:
			//change play mode of currently selected track
			//since we only have two play modes currently,
			//we only need to flip the play mode.
			currentPattern->trackPlayMode[currentGlobals->currentTrack] = (!(currentPattern->trackPlayMode[currentGlobals->currentTrack]))&(0b00000001);
     72e:	89 85       	ldd	r24, Y+9	; 0x09
     730:	28 0f       	add	r18, r24
     732:	31 1d       	adc	r19, r1
     734:	f9 01       	movw	r30, r18
     736:	e8 57       	subi	r30, 0x78	; 120
     738:	ff 4f       	sbci	r31, 0xFF	; 255
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 81       	ld	r25, Z
     73e:	91 11       	cpse	r25, r1
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	80 83       	st	Z, r24
			//flip all bits, mask for first bit. 
			break;
     744:	1e c1       	rjmp	.+572    	; 0x982 <listenEncoders+0x438>
			
			case TrackMenuArrow3:
			if(menuSub==1)
     746:	a1 30       	cpi	r26, 0x01	; 1
     748:	19 f4       	brne	.+6      	; 0x750 <listenEncoders+0x206>
			{
				currentGlobals->menuState = TrackMenuArrow2;
     74a:	82 e2       	ldi	r24, 0x22	; 34
     74c:	8a 87       	std	Y+10, r24	; 0x0a
     74e:	19 c1       	rjmp	.+562    	; 0x982 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow4;
     750:	84 e2       	ldi	r24, 0x24	; 36
     752:	8a 87       	std	Y+10, r24	; 0x0a
     754:	16 c1       	rjmp	.+556    	; 0x982 <listenEncoders+0x438>
			}
			break;
			
			case TrackMenuArrow3Select:
			
			if(menuSub==1)
     756:	a1 30       	cpi	r26, 0x01	; 1
     758:	b1 f4       	brne	.+44     	; 0x786 <listenEncoders+0x23c>
			{
				//indexing might be an issue here, don't remember if this is 0 indexed or not. 
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1 ;
     75a:	89 85       	ldd	r24, Y+9	; 0x09
     75c:	f9 01       	movw	r30, r18
     75e:	e8 0f       	add	r30, r24
     760:	f1 1d       	adc	r31, r1
     762:	80 8d       	ldd	r24, Z+24	; 0x18
     764:	8f 5f       	subi	r24, 0xFF	; 255
     766:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     768:	89 85       	ldd	r24, Y+9	; 0x09
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	f9 01       	movw	r30, r18
     76e:	e8 0f       	add	r30, r24
     770:	f9 1f       	adc	r31, r25
     772:	40 8d       	ldd	r20, Z+24	; 0x18
     774:	48 30       	cpi	r20, 0x08	; 8
     776:	08 f4       	brcc	.+2      	; 0x77a <listenEncoders+0x230>
     778:	04 c1       	rjmp	.+520    	; 0x982 <listenEncoders+0x438>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=7;
     77a:	f9 01       	movw	r30, r18
     77c:	e8 0f       	add	r30, r24
     77e:	f9 1f       	adc	r31, r25
     780:	87 e0       	ldi	r24, 0x07	; 7
     782:	80 8f       	std	Z+24, r24	; 0x18
     784:	fe c0       	rjmp	.+508    	; 0x982 <listenEncoders+0x438>
				}
			}else
			{
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])-1;
     786:	89 85       	ldd	r24, Y+9	; 0x09
     788:	f9 01       	movw	r30, r18
     78a:	e8 0f       	add	r30, r24
     78c:	f1 1d       	adc	r31, r1
     78e:	80 8d       	ldd	r24, Z+24	; 0x18
     790:	81 50       	subi	r24, 0x01	; 1
     792:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     794:	89 85       	ldd	r24, Y+9	; 0x09
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	f9 01       	movw	r30, r18
     79a:	e8 0f       	add	r30, r24
     79c:	f9 1f       	adc	r31, r25
     79e:	40 8d       	ldd	r20, Z+24	; 0x18
     7a0:	48 30       	cpi	r20, 0x08	; 8
     7a2:	08 f4       	brcc	.+2      	; 0x7a6 <listenEncoders+0x25c>
     7a4:	ee c0       	rjmp	.+476    	; 0x982 <listenEncoders+0x438>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=0;
     7a6:	f9 01       	movw	r30, r18
     7a8:	e8 0f       	add	r30, r24
     7aa:	f9 1f       	adc	r31, r25
     7ac:	10 8e       	std	Z+24, r1	; 0x18
     7ae:	e9 c0       	rjmp	.+466    	; 0x982 <listenEncoders+0x438>
				}
			}
			break;
			
			case TrackMenuArrow4:
			if(menuSub==1)
     7b0:	a1 30       	cpi	r26, 0x01	; 1
     7b2:	19 f4       	brne	.+6      	; 0x7ba <listenEncoders+0x270>
			{
				currentGlobals->menuState = TrackMenuArrow3;
     7b4:	83 e2       	ldi	r24, 0x23	; 35
     7b6:	8a 87       	std	Y+10, r24	; 0x0a
     7b8:	e4 c0       	rjmp	.+456    	; 0x982 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow5;
     7ba:	85 e2       	ldi	r24, 0x25	; 37
     7bc:	8a 87       	std	Y+10, r24	; 0x0a
     7be:	e1 c0       	rjmp	.+450    	; 0x982 <listenEncoders+0x438>
			}
			break;
			
			case TrackMenuArrow4Select:
			if(menuSub==1)
     7c0:	a1 30       	cpi	r26, 0x01	; 1
     7c2:	d9 f4       	brne	.+54     	; 0x7fa <listenEncoders+0x2b0>
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])++;
     7c4:	89 85       	ldd	r24, Y+9	; 0x09
     7c6:	f9 01       	movw	r30, r18
     7c8:	e8 0f       	add	r30, r24
     7ca:	f1 1d       	adc	r31, r1
     7cc:	e5 51       	subi	r30, 0x15	; 21
     7ce:	ff 4f       	sbci	r31, 0xFF	; 255
     7d0:	80 81       	ld	r24, Z
     7d2:	8f 5f       	subi	r24, 0xFF	; 255
     7d4:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>3)
     7d6:	89 85       	ldd	r24, Y+9	; 0x09
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	f9 01       	movw	r30, r18
     7dc:	e8 0f       	add	r30, r24
     7de:	f9 1f       	adc	r31, r25
     7e0:	e5 51       	subi	r30, 0x15	; 21
     7e2:	ff 4f       	sbci	r31, 0xFF	; 255
     7e4:	40 81       	ld	r20, Z
     7e6:	44 30       	cpi	r20, 0x04	; 4
     7e8:	08 f1       	brcs	.+66     	; 0x82c <listenEncoders+0x2e2>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=3;
     7ea:	82 0f       	add	r24, r18
     7ec:	93 1f       	adc	r25, r19
     7ee:	fc 01       	movw	r30, r24
     7f0:	e5 51       	subi	r30, 0x15	; 21
     7f2:	ff 4f       	sbci	r31, 0xFF	; 255
     7f4:	83 e0       	ldi	r24, 0x03	; 3
     7f6:	80 83       	st	Z, r24
     7f8:	19 c0       	rjmp	.+50     	; 0x82c <listenEncoders+0x2e2>
				}
			}else
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])--;
     7fa:	89 85       	ldd	r24, Y+9	; 0x09
     7fc:	f9 01       	movw	r30, r18
     7fe:	e8 0f       	add	r30, r24
     800:	f1 1d       	adc	r31, r1
     802:	e5 51       	subi	r30, 0x15	; 21
     804:	ff 4f       	sbci	r31, 0xFF	; 255
     806:	80 81       	ld	r24, Z
     808:	81 50       	subi	r24, 0x01	; 1
     80a:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>3)
     80c:	89 85       	ldd	r24, Y+9	; 0x09
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	f9 01       	movw	r30, r18
     812:	e8 0f       	add	r30, r24
     814:	f9 1f       	adc	r31, r25
     816:	e5 51       	subi	r30, 0x15	; 21
     818:	ff 4f       	sbci	r31, 0xFF	; 255
     81a:	40 81       	ld	r20, Z
     81c:	44 30       	cpi	r20, 0x04	; 4
     81e:	30 f0       	brcs	.+12     	; 0x82c <listenEncoders+0x2e2>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=0;
     820:	82 0f       	add	r24, r18
     822:	93 1f       	adc	r25, r19
     824:	fc 01       	movw	r30, r24
     826:	e5 51       	subi	r30, 0x15	; 21
     828:	ff 4f       	sbci	r31, 0xFF	; 255
     82a:	10 82       	st	Z, r1
				}
			}
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
     82c:	89 85       	ldd	r24, Y+9	; 0x09
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	f9 01       	movw	r30, r18
     832:	e8 0f       	add	r30, r24
     834:	f9 1f       	adc	r31, r25
     836:	e5 51       	subi	r30, 0x15	; 21
     838:	ff 4f       	sbci	r31, 0xFF	; 255
     83a:	40 81       	ld	r20, Z
     83c:	4d 7f       	andi	r20, 0xFD	; 253
     83e:	79 f4       	brne	.+30     	; 0x85e <listenEncoders+0x314>
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
     840:	28 0f       	add	r18, r24
     842:	39 1f       	adc	r19, r25
     844:	f9 01       	movw	r30, r18
     846:	e8 56       	subi	r30, 0x68	; 104
     848:	ff 4f       	sbci	r31, 0xFF	; 255
     84a:	d9 01       	movw	r26, r18
     84c:	a8 55       	subi	r26, 0x58	; 88
     84e:	bf 4f       	sbci	r27, 0xFF	; 255
     850:	2a eb       	ldi	r18, 0xBA	; 186
     852:	4f ef       	ldi	r20, 0xFF	; 255
     854:	60 81       	ld	r22, Z
     856:	8c 91       	ld	r24, X
     858:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <setTrackVolume>
     85c:	92 c0       	rjmp	.+292    	; 0x982 <listenEncoders+0x438>
			}else
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],
     85e:	f9 01       	movw	r30, r18
     860:	e8 0f       	add	r30, r24
     862:	f9 1f       	adc	r31, r25
     864:	ef 01       	movw	r28, r30
     866:	c8 56       	subi	r28, 0x68	; 104
     868:	df 4f       	sbci	r29, 0xFF	; 255
     86a:	df 01       	movw	r26, r30
     86c:	a8 55       	subi	r26, 0x58	; 88
     86e:	bf 4f       	sbci	r27, 0xFF	; 255
     870:	20 a5       	ldd	r18, Z+40	; 0x28
     872:	40 ad       	ldd	r20, Z+56	; 0x38
     874:	68 81       	ld	r22, Y
     876:	8c 91       	ld	r24, X
     878:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <setTrackVolume>
     87c:	82 c0       	rjmp	.+260    	; 0x982 <listenEncoders+0x438>
				currentPattern->trackMainVolumeLSB[currentGlobals->currentTrack],currentPattern->trackMainVolumeMSB[currentGlobals->currentTrack]);		
			}
			break;
			
			case TrackMenuArrow5:
			if(menuSub==1)
     87e:	a1 30       	cpi	r26, 0x01	; 1
     880:	19 f4       	brne	.+6      	; 0x888 <listenEncoders+0x33e>
			{
				currentGlobals->menuState = TrackMenuArrow4;
     882:	84 e2       	ldi	r24, 0x24	; 36
     884:	8a 87       	std	Y+10, r24	; 0x0a
     886:	7d c0       	rjmp	.+250    	; 0x982 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow1;
     888:	81 e2       	ldi	r24, 0x21	; 33
     88a:	8a 87       	std	Y+10, r24	; 0x0a
     88c:	7a c0       	rjmp	.+244    	; 0x982 <listenEncoders+0x438>
			}
			break;
			
			case TrackMenuArrow5Select:;
			uint16_t sustainTime = (currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack])|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);	
     88e:	49 85       	ldd	r20, Y+9	; 0x09
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	b9 01       	movw	r22, r18
     894:	64 0f       	add	r22, r20
     896:	75 1f       	adc	r23, r21
     898:	fb 01       	movw	r30, r22
     89a:	e5 53       	subi	r30, 0x35	; 53
     89c:	ff 4f       	sbci	r31, 0xFF	; 255
     89e:	80 81       	ld	r24, Z
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	98 2f       	mov	r25, r24
     8a4:	88 27       	eor	r24, r24
     8a6:	70 96       	adiw	r30, 0x10	; 16
     8a8:	60 81       	ld	r22, Z
     8aa:	86 2b       	or	r24, r22
			if(menuSub==1)
     8ac:	a1 30       	cpi	r26, 0x01	; 1
     8ae:	71 f4       	brne	.+28     	; 0x8cc <listenEncoders+0x382>
			{
				if((currentGlobals->currentGPButtons)&(0x04))
     8b0:	6a 81       	ldd	r22, Y+2	; 0x02
     8b2:	62 ff       	sbrs	r22, 2
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <listenEncoders+0x370>
				{
					sustainTime++;
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <listenEncoders+0x374>
				}
				else
				{
					sustainTime = sustainTime+236;
     8ba:	84 51       	subi	r24, 0x14	; 20
     8bc:	9f 4f       	sbci	r25, 0xFF	; 255
     8be:	81 36       	cpi	r24, 0x61	; 97
     8c0:	ea ee       	ldi	r30, 0xEA	; 234
     8c2:	9e 07       	cpc	r25, r30
     8c4:	80 f0       	brcs	.+32     	; 0x8e6 <listenEncoders+0x39c>
     8c6:	80 e6       	ldi	r24, 0x60	; 96
     8c8:	9a ee       	ldi	r25, 0xEA	; 234
     8ca:	0d c0       	rjmp	.+26     	; 0x8e6 <listenEncoders+0x39c>
				{
					sustainTime = 60000;
				}
			}else
			{
				if((currentGlobals->currentGPButtons)&(0x04))
     8cc:	6a 81       	ldd	r22, Y+2	; 0x02
     8ce:	62 ff       	sbrs	r22, 2
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <listenEncoders+0x38c>
				{
					sustainTime--;
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <listenEncoders+0x390>
				}else
				{	
					sustainTime = sustainTime - 236;
     8d6:	8c 5e       	subi	r24, 0xEC	; 236
     8d8:	91 09       	sbc	r25, r1
				}
				
				if(sustainTime>60000)
     8da:	81 36       	cpi	r24, 0x61	; 97
     8dc:	fa ee       	ldi	r31, 0xEA	; 234
     8de:	9f 07       	cpc	r25, r31
     8e0:	10 f0       	brcs	.+4      	; 0x8e6 <listenEncoders+0x39c>
				{
					sustainTime = 0;
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
			currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack] = (sustainTime>>8);
     8e6:	42 0f       	add	r20, r18
     8e8:	53 1f       	adc	r21, r19
     8ea:	fa 01       	movw	r30, r20
     8ec:	e5 53       	subi	r30, 0x35	; 53
     8ee:	ff 4f       	sbci	r31, 0xFF	; 255
     8f0:	90 83       	st	Z, r25
			currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] = sustainTime; //upper bits will be truncated.
     8f2:	99 85       	ldd	r25, Y+9	; 0x09
     8f4:	29 0f       	add	r18, r25
     8f6:	31 1d       	adc	r19, r1
     8f8:	f9 01       	movw	r30, r18
     8fa:	e5 52       	subi	r30, 0x25	; 37
     8fc:	ff 4f       	sbci	r31, 0xFF	; 255
     8fe:	80 83       	st	Z, r24

			break;
     900:	40 c0       	rjmp	.+128    	; 0x982 <listenEncoders+0x438>
			
			case GlobalMenuArrow1:
			if(menuSub==1)
     902:	a1 30       	cpi	r26, 0x01	; 1
     904:	19 f4       	brne	.+6      	; 0x90c <listenEncoders+0x3c2>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     906:	81 e3       	ldi	r24, 0x31	; 49
     908:	8a 87       	std	Y+10, r24	; 0x0a
     90a:	3b c0       	rjmp	.+118    	; 0x982 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     90c:	82 e3       	ldi	r24, 0x32	; 50
     90e:	8a 87       	std	Y+10, r24	; 0x0a
     910:	38 c0       	rjmp	.+112    	; 0x982 <listenEncoders+0x438>
			}
			break;
			
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
     912:	a1 30       	cpi	r26, 0x01	; 1
     914:	49 f4       	brne	.+18     	; 0x928 <listenEncoders+0x3de>
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     916:	88 89       	ldd	r24, Y+16	; 0x10
     918:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->midiChannel>15)
     91a:	80 31       	cpi	r24, 0x10	; 16
     91c:	10 f4       	brcc	.+4      	; 0x922 <listenEncoders+0x3d8>
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     91e:	88 8b       	std	Y+16, r24	; 0x10
     920:	30 c0       	rjmp	.+96     	; 0x982 <listenEncoders+0x438>
				if(currentGlobals->midiChannel>15)
				{
					currentGlobals->midiChannel=15;
     922:	8f e0       	ldi	r24, 0x0F	; 15
     924:	88 8b       	std	Y+16, r24	; 0x10
     926:	2d c0       	rjmp	.+90     	; 0x982 <listenEncoders+0x438>
				}
			}
			else
			{
				//decrement midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)-1;
     928:	88 89       	ldd	r24, Y+16	; 0x10
     92a:	81 50       	subi	r24, 0x01	; 1
     92c:	10 f0       	brcs	.+4      	; 0x932 <listenEncoders+0x3e8>
     92e:	88 8b       	std	Y+16, r24	; 0x10
     930:	28 c0       	rjmp	.+80     	; 0x982 <listenEncoders+0x438>
				if(currentGlobals->midiChannel>254)
				{
					currentGlobals->midiChannel=0;
     932:	18 8a       	std	Y+16, r1	; 0x10
     934:	26 c0       	rjmp	.+76     	; 0x982 <listenEncoders+0x438>
				}
			}
			break;
			
			case GlobalMenuArrow2:
			if(menuSub==1)
     936:	a1 30       	cpi	r26, 0x01	; 1
     938:	19 f4       	brne	.+6      	; 0x940 <listenEncoders+0x3f6>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     93a:	81 e3       	ldi	r24, 0x31	; 49
     93c:	8a 87       	std	Y+10, r24	; 0x0a
     93e:	21 c0       	rjmp	.+66     	; 0x982 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     940:	82 e3       	ldi	r24, 0x32	; 50
     942:	8a 87       	std	Y+10, r24	; 0x0a
     944:	1e c0       	rjmp	.+60     	; 0x982 <listenEncoders+0x438>
			break;
			
			case GlobalMenuArrow2Select:;
			//change midi note for selected track.
			//midi range is 0 to 127.
			uint8_t currentMidiNote = currentGlobals->midiTrackNote[currentGlobals->currentTrack];
     946:	e9 85       	ldd	r30, Y+9	; 0x09
     948:	2e 2f       	mov	r18, r30
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	ce 01       	movw	r24, r28
     94e:	82 0f       	add	r24, r18
     950:	93 1f       	adc	r25, r19
     952:	fc 01       	movw	r30, r24
     954:	81 89       	ldd	r24, Z+17	; 0x11
			if(menuSub==1)
     956:	a1 30       	cpi	r26, 0x01	; 1
     958:	21 f4       	brne	.+8      	; 0x962 <listenEncoders+0x418>
			{
				//not 100% sure how to set this up.
				currentMidiNote++;
     95a:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentMidiNote>127)
     95c:	32 f4       	brpl	.+12     	; 0x96a <listenEncoders+0x420>
				{
					currentMidiNote = 127;
     95e:	8f e7       	ldi	r24, 0x7F	; 127
     960:	04 c0       	rjmp	.+8      	; 0x96a <listenEncoders+0x420>
				}
			}else
			{
				currentMidiNote--;
     962:	81 50       	subi	r24, 0x01	; 1
				if(currentMidiNote>128)
     964:	81 38       	cpi	r24, 0x81	; 129
     966:	08 f0       	brcs	.+2      	; 0x96a <listenEncoders+0x420>
				{
					currentMidiNote = 0;
     968:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			currentGlobals->midiTrackNote[currentGlobals->currentTrack] = currentMidiNote;
     96a:	f9 01       	movw	r30, r18
     96c:	ec 0f       	add	r30, r28
     96e:	fd 1f       	adc	r31, r29
     970:	81 8b       	std	Z+17, r24	; 0x11
			break;
     972:	07 c0       	rjmp	.+14     	; 0x982 <listenEncoders+0x438>
			
			case GlobalMenuArrow3:
			//currently unreachable, no settings live here atm		
			if(menuSub==1)
     974:	a1 30       	cpi	r26, 0x01	; 1
     976:	19 f4       	brne	.+6      	; 0x97e <listenEncoders+0x434>
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     978:	82 e3       	ldi	r24, 0x32	; 50
     97a:	8a 87       	std	Y+10, r24	; 0x0a
     97c:	02 c0       	rjmp	.+4      	; 0x982 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     97e:	81 e3       	ldi	r24, 0x31	; 49
     980:	8a 87       	std	Y+10, r24	; 0x0a
			
			case GlobalMenuArrow3Select:
			//nothing to put here yet.
			break;
		}
		bottomEncoderLastValue = bottomEncoderValue;
     982:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <bottomEncoderValue>
     986:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <bottomEncoderLastValue>
		//menuSub=0;
	}
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <listenEnoderReset>:
uint8_t listenEnoderReset()
{
	uint8_t returnMe = 2;
	if(topEncoderValue!=topEncoderLastValue){
     990:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <topEncoderValue>
     994:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <topEncoderLastValue>
     998:	98 17       	cp	r25, r24
     99a:	21 f0       	breq	.+8      	; 0x9a4 <listenEnoderReset+0x14>
	returnMe = topEncoderValue%2; //should be 0 or 1.
     99c:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <topEncoderValue>
     9a0:	81 70       	andi	r24, 0x01	; 1
     9a2:	08 95       	ret
		//menuSub=0;
	}
}
uint8_t listenEnoderReset()
{
	uint8_t returnMe = 2;
     9a4:	82 e0       	ldi	r24, 0x02	; 2
	if(topEncoderValue!=topEncoderLastValue){
	returnMe = topEncoderValue%2; //should be 0 or 1.
	}
	return returnMe;
}
     9a6:	08 95       	ret

000009a8 <initArrays>:
#define F_CPU 16000000UL


//takes an array less than 20 and fills it with blank characters
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ec 01       	movw	r28, r24
	uint8_t lengthOfString = strlen(myString);
     9b2:	fa 01       	movw	r30, r20
     9b4:	01 90       	ld	r0, Z+
     9b6:	00 20       	and	r0, r0
     9b8:	e9 f7       	brne	.-6      	; 0x9b4 <initArrays+0xc>
     9ba:	31 97       	sbiw	r30, 0x01	; 1
     9bc:	8f 01       	movw	r16, r30
     9be:	04 1b       	sub	r16, r20
     9c0:	15 0b       	sbc	r17, r21
     9c2:	90 2f       	mov	r25, r16
	uint8_t charLeft = 20 - lengthOfString;
     9c4:	84 e1       	ldi	r24, 0x14	; 20
     9c6:	80 1b       	sub	r24, r16
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     9c8:	00 23       	and	r16, r16
     9ca:	a9 f0       	breq	.+42     	; 0x9f6 <initArrays+0x4e>
     9cc:	fa 01       	movw	r30, r20
     9ce:	25 e1       	ldi	r18, 0x15	; 21
     9d0:	26 9f       	mul	r18, r22
     9d2:	d0 01       	movw	r26, r0
     9d4:	27 9f       	mul	r18, r23
     9d6:	b0 0d       	add	r27, r0
     9d8:	11 24       	eor	r1, r1
     9da:	ac 0f       	add	r26, r28
     9dc:	bd 1f       	adc	r27, r29
     9de:	2f ef       	ldi	r18, 0xFF	; 255
     9e0:	20 0f       	add	r18, r16
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	2f 5f       	subi	r18, 0xFF	; 255
     9e6:	3f 4f       	sbci	r19, 0xFF	; 255
     9e8:	42 0f       	add	r20, r18
     9ea:	53 1f       	adc	r21, r19
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     9ec:	21 91       	ld	r18, Z+
     9ee:	2d 93       	st	X+, r18
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
	uint8_t lengthOfString = strlen(myString);
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     9f0:	e4 17       	cp	r30, r20
     9f2:	f5 07       	cpc	r31, r21
     9f4:	d9 f7       	brne	.-10     	; 0x9ec <initArrays+0x44>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     9f6:	88 23       	and	r24, r24
     9f8:	89 f0       	breq	.+34     	; 0xa1c <initArrays+0x74>
	{
		myArray[stringNumber][currentIndex] = ' ';
     9fa:	45 e1       	ldi	r20, 0x15	; 21
     9fc:	46 9f       	mul	r20, r22
     9fe:	90 01       	movw	r18, r0
     a00:	47 9f       	mul	r20, r23
     a02:	30 0d       	add	r19, r0
     a04:	11 24       	eor	r1, r1
     a06:	c2 0f       	add	r28, r18
     a08:	d3 1f       	adc	r29, r19
     a0a:	08 0f       	add	r16, r24
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	fe 01       	movw	r30, r28
     a10:	e9 0f       	add	r30, r25
     a12:	f1 1d       	adc	r31, r1
     a14:	80 83       	st	Z, r24
		currentIndex++;
     a16:	9f 5f       	subi	r25, 0xFF	; 255
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     a18:	90 13       	cpse	r25, r16
     a1a:	f9 cf       	rjmp	.-14     	; 0xa0e <initArrays+0x66>
	{
		myArray[stringNumber][currentIndex] = ' ';
		currentIndex++;
	}
}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <initBank>:

void initBank(Pattern *currentInitPattern)
{
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	ac 01       	movw	r20, r24
     a2c:	fc 01       	movw	r30, r24
     a2e:	e8 55       	subi	r30, 0x58	; 88
     a30:	ff 4f       	sbci	r31, 0xFF	; 255
     a32:	ec 01       	movw	r28, r24
     a34:	c8 57       	subi	r28, 0x78	; 120
     a36:	df 4f       	sbci	r29, 0xFF	; 255
     a38:	dc 01       	movw	r26, r24
     a3a:	a5 51       	subi	r26, 0x15	; 21
     a3c:	bf 4f       	sbci	r27, 0xFF	; 255
	for(uint8_t i = 0; i<16; i++)
     a3e:	90 e0       	ldi	r25, 0x00	; 0
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
    currentInitPattern->trackPlayMode[i] = 0x01;
     a40:	31 e0       	ldi	r19, 0x01	; 1
	currentInitPattern->envelopeType[i] = 3;
     a42:	23 e0       	ldi	r18, 0x03	; 3

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
     a44:	9f 5f       	subi	r25, 0xFF	; 255
     a46:	91 93       	st	Z+, r25
    currentInitPattern->trackPlayMode[i] = 0x01;
     a48:	39 93       	st	Y+, r19
	currentInitPattern->envelopeType[i] = 3;
     a4a:	2d 93       	st	X+, r18
	currentInitPattern->trackSustainTimeLSB[i] = 0;
     a4c:	12 aa       	std	Z+50, r1	; 0x32
	currentInitPattern->trackSustainTimeMSB[i] = 0;
     a4e:	12 a2       	std	Z+34, r1	; 0x22
	}
}

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
     a50:	90 31       	cpi	r25, 0x10	; 16
     a52:	c1 f7       	brne	.-16     	; 0xa44 <initBank+0x1e>
     a54:	fa 01       	movw	r30, r20
     a56:	e5 50       	subi	r30, 0x05	; 5
     a58:	ff 4f       	sbci	r31, 0xFF	; 255
     a5a:	9a 01       	movw	r18, r20
     a5c:	25 58       	subi	r18, 0x85	; 133
     a5e:	3e 4f       	sbci	r19, 0xFE	; 254
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     a60:	11 92       	st	Z+, r1
     a62:	11 92       	st	Z+, r1
	currentInitPattern->envelopeType[i] = 3;
	currentInitPattern->trackSustainTimeLSB[i] = 0;
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
     a64:	e2 17       	cp	r30, r18
     a66:	f3 07       	cpc	r31, r19
     a68:	d9 f7       	brne	.-10     	; 0xa60 <initBank+0x3a>
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
 
  }
  //We need to take these and put them in global. 
  currentInitPattern->patternBPM = 120;
     a6a:	fa 01       	movw	r30, r20
     a6c:	e8 53       	subi	r30, 0x38	; 56
     a6e:	ff 4f       	sbci	r31, 0xFF	; 255
     a70:	88 e7       	ldi	r24, 0x78	; 120
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	91 83       	std	Z+1, r25	; 0x01
     a76:	80 83       	st	Z, r24
  currentInitPattern->numSteps = 16;
     a78:	32 96       	adiw	r30, 0x02	; 2
     a7a:	80 e1       	ldi	r24, 0x10	; 16
     a7c:	80 83       	st	Z, r24
}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <initGlobals>:

void initGlobals(Globals *currentGlobals, uint8_t factoryReset)
{
     a84:	fc 01       	movw	r30, r24
		currentGlobals->currentTrigButtons=0; //current state of Trig buttons.
     a86:	11 82       	std	Z+1, r1	; 0x01
     a88:	10 82       	st	Z, r1
		currentGlobals->currentGPButtons=0; //current state of GP buttons
     a8a:	12 82       	std	Z+2, r1	; 0x02
		currentGlobals->currentPatternNumber=0; //current pattern, between 1 and 256
     a8c:	17 82       	std	Z+7, r1	; 0x07
		currentGlobals->currentStep=0; // current step in the sequencer
     a8e:	10 86       	std	Z+8, r1	; 0x08
		currentGlobals->currentTrack=0; //current track being edited
     a90:	11 86       	std	Z+9, r1	; 0x09
		currentGlobals->menuState=0; //where the menu is currently
     a92:	12 86       	std	Z+10, r1	; 0x0a
		currentGlobals->playState=0; //whether the sequencer is playing, stopped, or paused.
     a94:	13 86       	std	Z+11, r1	; 0x0b
		currentGlobals->factoryReset=0; //we may not need this in this struct, but good to have for now.
     a96:	14 86       	std	Z+12, r1	; 0x0c
		currentGlobals->buttonSwitchFlag=0; // could be rolled into value bits.
     a98:	15 86       	std	Z+13, r1	; 0x0d
		currentGlobals->valueChangeFlag=0; //bit 0 -> changes in encoders, bit 1-> changes in buttons, bit2 -> changes in knobs
     a9a:	16 86       	std	Z+14, r1	; 0x0e
		currentGlobals->knobStatus=0; //top 4 bits: knob type, bottom 4 bits: knob location.
     a9c:	17 86       	std	Z+15, r1	; 0x0f
		currentGlobals->releaseCounter = 0;
     a9e:	dc 01       	movw	r26, r24
     aa0:	ab 55       	subi	r26, 0x5B	; 91
     aa2:	bf 4f       	sbci	r27, 0xFF	; 255
     aa4:	1d 92       	st	X+, r1
     aa6:	1d 92       	st	X+, r1
     aa8:	1d 92       	st	X+, r1
     aaa:	1c 92       	st	X, r1
     aac:	13 97       	sbiw	r26, 0x03	; 3
		currentGlobals->lastGlobalTimer = 0;
     aae:	a8 5b       	subi	r26, 0xB8	; 184
     ab0:	bf 4f       	sbci	r27, 0xFF	; 255
     ab2:	1d 92       	st	X+, r1
     ab4:	1d 92       	st	X+, r1
     ab6:	1d 92       	st	X+, r1
     ab8:	1c 92       	st	X, r1
     aba:	13 97       	sbiw	r26, 0x03	; 3
		currentGlobals->clockCounter = 0;
     abc:	12 97       	sbiw	r26, 0x02	; 2
     abe:	1d 92       	st	X+, r1
     ac0:	1c 92       	st	X, r1
		currentGlobals->currentTrigSequencer = 0;
     ac2:	14 82       	std	Z+4, r1	; 0x04
     ac4:	13 82       	std	Z+3, r1	; 0x03
		currentGlobals->currentTrigMidi = 0;
     ac6:	16 82       	std	Z+6, r1	; 0x06
     ac8:	15 82       	std	Z+5, r1	; 0x05
		if(factoryReset==1)
     aca:	61 30       	cpi	r22, 0x01	; 1
     acc:	09 f5       	brne	.+66     	; 0xb10 <initGlobals+0x8c>
		{
			currentGlobals->midiChannel=0;
     ace:	10 8a       	std	Z+16, r1	; 0x10
			currentGlobals->midiTrackNote[0] = 0x24;
     ad0:	84 e2       	ldi	r24, 0x24	; 36
     ad2:	81 8b       	std	Z+17, r24	; 0x11
			currentGlobals->midiTrackNote[1] = 0x25;
     ad4:	85 e2       	ldi	r24, 0x25	; 37
     ad6:	82 8b       	std	Z+18, r24	; 0x12
			currentGlobals->midiTrackNote[2] = 0x26;
     ad8:	86 e2       	ldi	r24, 0x26	; 38
     ada:	83 8b       	std	Z+19, r24	; 0x13
			currentGlobals->midiTrackNote[3] = 0x27;
     adc:	87 e2       	ldi	r24, 0x27	; 39
     ade:	84 8b       	std	Z+20, r24	; 0x14
			currentGlobals->midiTrackNote[4] = 0x28;
     ae0:	88 e2       	ldi	r24, 0x28	; 40
     ae2:	85 8b       	std	Z+21, r24	; 0x15
			currentGlobals->midiTrackNote[5] = 0x29;
     ae4:	89 e2       	ldi	r24, 0x29	; 41
     ae6:	86 8b       	std	Z+22, r24	; 0x16
			currentGlobals->midiTrackNote[6] = 0x2a;
     ae8:	8a e2       	ldi	r24, 0x2A	; 42
     aea:	87 8b       	std	Z+23, r24	; 0x17
			currentGlobals->midiTrackNote[7] = 0x2b;
     aec:	8b e2       	ldi	r24, 0x2B	; 43
     aee:	80 8f       	std	Z+24, r24	; 0x18
			currentGlobals->midiTrackNote[8] = 0x2c;
     af0:	8c e2       	ldi	r24, 0x2C	; 44
     af2:	81 8f       	std	Z+25, r24	; 0x19
			currentGlobals->midiTrackNote[9] = 0x2d;
     af4:	8d e2       	ldi	r24, 0x2D	; 45
     af6:	82 8f       	std	Z+26, r24	; 0x1a
			currentGlobals->midiTrackNote[10] = 0x2e;
     af8:	8e e2       	ldi	r24, 0x2E	; 46
     afa:	83 8f       	std	Z+27, r24	; 0x1b
			currentGlobals->midiTrackNote[11] = 0x2f;
     afc:	8f e2       	ldi	r24, 0x2F	; 47
     afe:	84 8f       	std	Z+28, r24	; 0x1c
			currentGlobals->midiTrackNote[12] = 0x30;
     b00:	80 e3       	ldi	r24, 0x30	; 48
     b02:	85 8f       	std	Z+29, r24	; 0x1d
			currentGlobals->midiTrackNote[13] = 0x31;
     b04:	81 e3       	ldi	r24, 0x31	; 49
     b06:	86 8f       	std	Z+30, r24	; 0x1e
			currentGlobals->midiTrackNote[14] = 0x32;
     b08:	82 e3       	ldi	r24, 0x32	; 50
     b0a:	87 8f       	std	Z+31, r24	; 0x1f
			currentGlobals->midiTrackNote[15] = 0x33;
     b0c:	83 e3       	ldi	r24, 0x33	; 51
     b0e:	80 a3       	std	Z+32, r24	; 0x20
     b10:	08 95       	ret

00000b12 <initTimer>:
void initTimer() //we only need to use 1 timer, and Use ISRs for that. 
{
	//we're using timer 2, because it's the highest priority 8 bit timer interupt. 
	
		//here we need to setup our timer interrupt
		TCCR2A = (1 << WGM21); //set to clear on correct compare
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
		TCCR2B = (1 << CS21) | (1 << CS20); // set pre-scaler to 64
     b18:	93 e0       	ldi	r25, 0x03	; 3
     b1a:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
		OCR2A = 50; // every 25 ticks will be 0.0001 seconds at this pre scale.
     b1e:	92 e3       	ldi	r25, 0x32	; 50
     b20:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
		TIMSK2 = (1 << OCIE2A); // Enable OCR0A compare interrupt
     b24:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     b28:	08 95       	ret

00000b2a <updateTimers>:
		//interrupts should now be good to go.
}

void updateTimers(Globals *currentGlobals, uint32_t currentTime)
{
     b2a:	8f 92       	push	r8
     b2c:	9f 92       	push	r9
     b2e:	af 92       	push	r10
     b30:	bf 92       	push	r11
     b32:	cf 92       	push	r12
     b34:	df 92       	push	r13
     b36:	ef 92       	push	r14
     b38:	ff 92       	push	r15
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
	uint8_t change = 0;
	if(change=currentTime-(currentGlobals->lastGlobalTimer)) //check if there has been a change. 
     b3e:	fc 01       	movw	r30, r24
     b40:	e3 51       	subi	r30, 0x13	; 19
     b42:	ff 4f       	sbci	r31, 0xFF	; 255
     b44:	20 81       	ld	r18, Z
     b46:	84 2e       	mov	r8, r20
     b48:	82 1a       	sub	r8, r18
     b4a:	28 2d       	mov	r18, r8
     b4c:	09 f1       	breq	.+66     	; 0xb90 <updateTimers+0x66>
	{
		currentGlobals->clockCounter = (currentGlobals->clockCounter)+change;
     b4e:	dc 01       	movw	r26, r24
     b50:	a5 51       	subi	r26, 0x15	; 21
     b52:	bf 4f       	sbci	r27, 0xFF	; 255
     b54:	ed 91       	ld	r30, X+
     b56:	fc 91       	ld	r31, X
     b58:	11 97       	sbiw	r26, 0x01	; 1
     b5a:	e8 0d       	add	r30, r8
     b5c:	f1 1d       	adc	r31, r1
     b5e:	ed 93       	st	X+, r30
     b60:	fc 93       	st	X, r31
		currentGlobals->releaseCounter = (currentGlobals->releaseCounter)+change;
     b62:	fc 01       	movw	r30, r24
     b64:	eb 55       	subi	r30, 0x5B	; 91
     b66:	ff 4f       	sbci	r31, 0xFF	; 255
     b68:	c0 80       	ld	r12, Z
     b6a:	d1 80       	ldd	r13, Z+1	; 0x01
     b6c:	e2 80       	ldd	r14, Z+2	; 0x02
     b6e:	f3 80       	ldd	r15, Z+3	; 0x03
     b70:	46 01       	movw	r8, r12
     b72:	57 01       	movw	r10, r14
     b74:	82 0e       	add	r8, r18
     b76:	91 1c       	adc	r9, r1
     b78:	a1 1c       	adc	r10, r1
     b7a:	b1 1c       	adc	r11, r1
     b7c:	80 82       	st	Z, r8
     b7e:	91 82       	std	Z+1, r9	; 0x01
     b80:	a2 82       	std	Z+2, r10	; 0x02
     b82:	b3 82       	std	Z+3, r11	; 0x03
		currentGlobals->lastGlobalTimer = currentTime;
     b84:	e8 5b       	subi	r30, 0xB8	; 184
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	40 83       	st	Z, r20
     b8a:	51 83       	std	Z+1, r21	; 0x01
     b8c:	62 83       	std	Z+2, r22	; 0x02
     b8e:	73 83       	std	Z+3, r23	; 0x03
	//{
	//	currentGlobals->timerFlag = 0; //we may want to change this some other point in the code, like when everything reliant on this flag is complete. 
		//just so we're not wasting a conditional every time. 
	//}
	
}
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	bf 90       	pop	r11
     b9e:	af 90       	pop	r10
     ba0:	9f 90       	pop	r9
     ba2:	8f 90       	pop	r8
     ba4:	08 95       	ret

00000ba6 <factoryResetCheck>:
void factoryResetCheck(uint8_t *factoryReset, Pattern *currentPattern, Globals *currentGlobals)
{
     ba6:	af 92       	push	r10
     ba8:	bf 92       	push	r11
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	65 97       	sbiw	r28, 0x15	; 21
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
	if(((~PINA)&0x01)&&((~PINL)&0x01))
     bca:	00 99       	sbic	0x00, 0	; 0
     bcc:	6f c0       	rjmp	.+222    	; 0xcac <factoryResetCheck+0x106>
     bce:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     bd2:	20 fd       	sbrc	r18, 0
     bd4:	6b c0       	rjmp	.+214    	; 0xcac <factoryResetCheck+0x106>
     bd6:	8a 01       	movw	r16, r20
     bd8:	6b 01       	movw	r12, r22
     bda:	7c 01       	movw	r14, r24
	{//if both buttons are pressed on startup, wait 4 seconds
		outputS("FactoryReset?       ",0);
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	8b e5       	ldi	r24, 0x5B	; 91
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	0e 94 53 11 	call	0x22a6	; 0x22a6 <outputS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     be8:	2f ef       	ldi	r18, 0xFF	; 255
     bea:	84 e3       	ldi	r24, 0x34	; 52
     bec:	9c e0       	ldi	r25, 0x0C	; 12
     bee:	21 50       	subi	r18, 0x01	; 1
     bf0:	80 40       	sbci	r24, 0x00	; 0
     bf2:	90 40       	sbci	r25, 0x00	; 0
     bf4:	e1 f7       	brne	.-8      	; 0xbee <factoryResetCheck+0x48>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <factoryResetCheck+0x52>
     bf8:	00 00       	nop
		_delay_ms(4000);

		if(((~PINA)&0x01)&&((~PINL)&0x01))
     bfa:	00 99       	sbic	0x00, 0	; 0
     bfc:	57 c0       	rjmp	.+174    	; 0xcac <factoryResetCheck+0x106>
     bfe:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     c02:	80 fd       	sbrc	r24, 0
     c04:	53 c0       	rjmp	.+166    	; 0xcac <factoryResetCheck+0x106>
		{
			
			uint8_t choice = 2;
			uint8_t select = 0;
			char resetArray[21] = "yes?        no?     ";
     c06:	85 e1       	ldi	r24, 0x15	; 21
     c08:	e5 e8       	ldi	r30, 0x85	; 133
     c0a:	f2 e0       	ldi	r31, 0x02	; 2
     c0c:	de 01       	movw	r26, r28
     c0e:	11 96       	adiw	r26, 0x01	; 1
     c10:	01 90       	ld	r0, Z+
     c12:	0d 92       	st	X+, r0
     c14:	8a 95       	dec	r24
     c16:	e1 f7       	brne	.-8      	; 0xc10 <factoryResetCheck+0x6a>
			while(choice==2){
				outputS(resetArray,1);
				select = listenEnoderReset();
				if(select==0)
				{
					resetArray[4] = 8;
     c18:	68 94       	set
     c1a:	aa 24       	eor	r10, r10
     c1c:	a3 f8       	bld	r10, 3
					resetArray[15] = ' ';
     c1e:	68 94       	set
     c20:	bb 24       	eor	r11, r11
     c22:	b5 f8       	bld	r11, 5
			
			uint8_t choice = 2;
			uint8_t select = 0;
			char resetArray[21] = "yes?        no?     ";
			while(choice==2){
				outputS(resetArray,1);
     c24:	61 e0       	ldi	r22, 0x01	; 1
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	ce 01       	movw	r24, r28
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	0e 94 53 11 	call	0x22a6	; 0x22a6 <outputS>
				select = listenEnoderReset();
     c30:	af de       	rcall	.-674    	; 0x990 <listenEnoderReset>
				if(select==0)
     c32:	81 11       	cpse	r24, r1
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <factoryResetCheck+0x9a>
				{
					resetArray[4] = 8;
     c36:	ad 82       	std	Y+5, r10	; 0x05
					resetArray[15] = ' ';
     c38:	b8 8a       	std	Y+16, r11	; 0x10
				if(select==1)
				{
					resetArray[4] = ' ';
					resetArray[15] = 8;
				}
				if((~PINB)&(1<<5))
     c3a:	1d 99       	sbic	0x03, 5	; 3
     c3c:	f3 cf       	rjmp	.-26     	; 0xc24 <factoryResetCheck+0x7e>
     c3e:	0b c0       	rjmp	.+22     	; 0xc56 <factoryResetCheck+0xb0>
				if(select==0)
				{
					resetArray[4] = 8;
					resetArray[15] = ' ';
				}
				if(select==1)
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	29 f4       	brne	.+10     	; 0xc4e <factoryResetCheck+0xa8>
				{
					resetArray[4] = ' ';
     c44:	bd 82       	std	Y+5, r11	; 0x05
					resetArray[15] = 8;
     c46:	a8 8a       	std	Y+16, r10	; 0x10
				}
				if((~PINB)&(1<<5))
     c48:	1d 99       	sbic	0x03, 5	; 3
     c4a:	ec cf       	rjmp	.-40     	; 0xc24 <factoryResetCheck+0x7e>
     c4c:	2f c0       	rjmp	.+94     	; 0xcac <factoryResetCheck+0x106>
     c4e:	1d 99       	sbic	0x03, 5	; 3
     c50:	e9 cf       	rjmp	.-46     	; 0xc24 <factoryResetCheck+0x7e>
		{
			
			uint8_t choice = 2;
			uint8_t select = 0;
			char resetArray[21] = "yes?        no?     ";
			while(choice==2){
     c52:	82 30       	cpi	r24, 0x02	; 2
     c54:	39 f3       	breq	.-50     	; 0xc24 <factoryResetCheck+0x7e>
				{
					choice = select; //break out of while loop, and reset, or not.
				}
			}
			
			if(select==0) //yes was selected.
     c56:	81 11       	cpse	r24, r1
     c58:	29 c0       	rjmp	.+82     	; 0xcac <factoryResetCheck+0x106>
			{
				outputS("Progress:           ",2);
     c5a:	62 e0       	ldi	r22, 0x02	; 2
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	80 e7       	ldi	r24, 0x70	; 112
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	0e 94 53 11 	call	0x22a6	; 0x22a6 <outputS>
				(*factoryReset)=1;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	f7 01       	movw	r30, r14
     c6a:	80 83       	st	Z, r24
				initGlobals(currentGlobals, *factoryReset);
     c6c:	61 e0       	ldi	r22, 0x01	; 1
     c6e:	c8 01       	movw	r24, r16
     c70:	09 df       	rcall	.-494    	; 0xa84 <initGlobals>
				factoryResetEeprom(*currentPattern);
     c72:	8d b7       	in	r24, 0x3d	; 61
     c74:	9e b7       	in	r25, 0x3e	; 62
     c76:	8b 57       	subi	r24, 0x7B	; 123
     c78:	91 40       	sbci	r25, 0x01	; 1
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	9e bf       	out	0x3e, r25	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	8d bf       	out	0x3d, r24	; 61
     c84:	ad b7       	in	r26, 0x3d	; 61
     c86:	be b7       	in	r27, 0x3e	; 62
     c88:	11 96       	adiw	r26, 0x01	; 1
     c8a:	8b e7       	ldi	r24, 0x7B	; 123
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	f6 01       	movw	r30, r12
     c90:	01 90       	ld	r0, Z+
     c92:	0d 92       	st	X+, r0
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	e1 f7       	brne	.-8      	; 0xc90 <factoryResetCheck+0xea>
     c98:	0e 94 1f 1b 	call	0x363e	; 0x363e <factoryResetEeprom>
				globalWrite(currentGlobals);
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
     ca6:	c8 01       	movw	r24, r16
     ca8:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <globalWrite>
		}
		
	}
	
	
     cac:	65 96       	adiw	r28, 0x15	; 21
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	df 90       	pop	r13
     cc6:	cf 90       	pop	r12
     cc8:	bf 90       	pop	r11
     cca:	af 90       	pop	r10
     ccc:	08 95       	ret

00000cce <startADCConversion>:



uint8_t startADCConversion()
{
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     cce:	ea e7       	ldi	r30, 0x7A	; 122
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	80 64       	ori	r24, 0x40	; 64
     cd6:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     cd8:	80 81       	ld	r24, Z
     cda:	86 fd       	sbrc	r24, 6
     cdc:	fd cf       	rjmp	.-6      	; 0xcd8 <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.	
     cde:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
     ce2:	08 95       	ret

00000ce4 <initADC>:

void initADC()
{
	DDRF |= 0B00000111; //init pins F2, 1, and 0 as select pins on the external mux.
     ce4:	80 b3       	in	r24, 0x10	; 16
     ce6:	87 60       	ori	r24, 0x07	; 7
     ce8:	80 bb       	out	0x10, r24	; 16
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     cea:	80 e2       	ldi	r24, 0x20	; 32
     cec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     cf0:	87 e8       	ldi	r24, 0x87	; 135
     cf2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     cf6:	88 e0       	ldi	r24, 0x08	; 8
     cf8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     cfc:	8f ef       	ldi	r24, 0xFF	; 255
     cfe:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     d02:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     d06:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <knobBufferCounter>
	startADCConversion();
     d0a:	e1 cf       	rjmp	.-62     	; 0xcce <startADCConversion>
     d0c:	08 95       	ret

00000d0e <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     d0e:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     d10:	98 2f       	mov	r25, r24
     d12:	96 95       	lsr	r25
     d14:	96 95       	lsr	r25
     d16:	2f e2       	ldi	r18, 0x2F	; 47
     d18:	92 9f       	mul	r25, r18
     d1a:	91 2d       	mov	r25, r1
     d1c:	11 24       	eor	r1, r1
     d1e:	96 95       	lsr	r25
     d20:	2c e2       	ldi	r18, 0x2C	; 44
     d22:	92 9f       	mul	r25, r18
     d24:	80 19       	sub	r24, r0
     d26:	11 24       	eor	r1, r1
     d28:	98 2f       	mov	r25, r24
	if(select<40)
     d2a:	88 32       	cpi	r24, 0x28	; 40
     d2c:	70 f4       	brcc	.+28     	; 0xd4a <selectKnob+0x3c>
	{
		ADCSRB = (1 << MUX5);
     d2e:	88 e0       	ldi	r24, 0x08	; 8
     d30:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     d34:	c9 2f       	mov	r28, r25
     d36:	c7 70       	andi	r28, 0x07	; 7
		//uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplexer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     d38:	96 95       	lsr	r25
     d3a:	96 95       	lsr	r25
     d3c:	96 95       	lsr	r25
     d3e:	90 62       	ori	r25, 0x20	; 32
     d40:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changeover.
     d44:	c4 df       	rcall	.-120    	; 0xcce <startADCConversion>
		

		//then the external multiplexer
		PORTF = muxSelect;
     d46:	c1 bb       	out	0x11, r28	; 17
     d48:	20 c0       	rjmp	.+64     	; 0xd8a <selectKnob+0x7c>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     d4a:	89 32       	cpi	r24, 0x29	; 41
     d4c:	71 f0       	breq	.+28     	; 0xd6a <selectKnob+0x5c>
     d4e:	18 f4       	brcc	.+6      	; 0xd56 <selectKnob+0x48>
     d50:	88 32       	cpi	r24, 0x28	; 40
     d52:	31 f0       	breq	.+12     	; 0xd60 <selectKnob+0x52>
     d54:	1a c0       	rjmp	.+52     	; 0xd8a <selectKnob+0x7c>
     d56:	8a 32       	cpi	r24, 0x2A	; 42
     d58:	69 f0       	breq	.+26     	; 0xd74 <selectKnob+0x66>
     d5a:	8b 32       	cpi	r24, 0x2B	; 43
     d5c:	81 f0       	breq	.+32     	; 0xd7e <selectKnob+0x70>
     d5e:	15 c0       	rjmp	.+42     	; 0xd8a <selectKnob+0x7c>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     d60:	85 e2       	ldi	r24, 0x25	; 37
     d62:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     d66:	b3 df       	rcall	.-154    	; 0xcce <startADCConversion>
		break;
     d68:	10 c0       	rjmp	.+32     	; 0xd8a <selectKnob+0x7c>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     d6a:	86 e2       	ldi	r24, 0x26	; 38
     d6c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     d70:	ae df       	rcall	.-164    	; 0xcce <startADCConversion>
		break;
     d72:	0b c0       	rjmp	.+22     	; 0xd8a <selectKnob+0x7c>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     d74:	87 e2       	ldi	r24, 0x27	; 39
     d76:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     d7a:	a9 df       	rcall	.-174    	; 0xcce <startADCConversion>
		break;
     d7c:	06 c0       	rjmp	.+12     	; 0xd8a <selectKnob+0x7c>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     d7e:	80 e2       	ldi	r24, 0x20	; 32
     d80:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     d84:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     d88:	a2 df       	rcall	.-188    	; 0xcce <startADCConversion>
		break;
		}
	
	}
	
}
     d8a:	cf 91       	pop	r28
     d8c:	08 95       	ret

00000d8e <updateKnob>:

void updateKnob(uint8_t select, Globals *currentGlobals)
{
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	8b 01       	movw	r16, r22
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
     d98:	c8 2f       	mov	r28, r24
     d9a:	d0 e0       	ldi	r29, 0x00	; 0
     d9c:	98 df       	rcall	.-208    	; 0xcce <startADCConversion>
     d9e:	f8 01       	movw	r30, r16
     da0:	ec 0f       	add	r30, r28
     da2:	fd 1f       	adc	r31, r29
     da4:	81 a3       	std	Z+33, r24	; 0x21
		currentGlobals->filteredKnobBuffer[select] = 
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
     da6:	e3 5b       	subi	r30, 0xB3	; 179
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	40 81       	ld	r20, Z

void updateKnob(uint8_t select, Globals *currentGlobals)
{
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
		currentGlobals->filteredKnobBuffer[select] = 
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	84 1b       	sub	r24, r20
     db0:	91 09       	sbc	r25, r1
     db2:	9c 01       	movw	r18, r24
     db4:	12 f4       	brpl	.+4      	; 0xdba <updateKnob+0x2c>
     db6:	2f 5f       	subi	r18, 0xFF	; 255
     db8:	3f 4f       	sbci	r19, 0xFF	; 255
     dba:	35 95       	asr	r19
     dbc:	27 95       	ror	r18
     dbe:	24 0f       	add	r18, r20
     dc0:	20 83       	st	Z, r18
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	1f 91       	pop	r17
     dc8:	0f 91       	pop	r16
     dca:	08 95       	ret

00000dcc <initializeKnob>:
void initializeKnob(Globals *currentGlobals)
{
     dcc:	fc 01       	movw	r30, r24
     dce:	e3 5b       	subi	r30, 0xB3	; 179
     dd0:	ff 4f       	sbci	r31, 0xFF	; 255
     dd2:	9c 01       	movw	r18, r24
     dd4:	27 58       	subi	r18, 0x87	; 135
     dd6:	3f 4f       	sbci	r19, 0xFF	; 255
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
     dd8:	91 91       	ld	r25, Z+
     dda:	93 a7       	std	Z+43, r25	; 0x2b
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
void initializeKnob(Globals *currentGlobals)
{
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
     ddc:	e2 17       	cp	r30, r18
     dde:	f3 07       	cpc	r31, r19
     de0:	d9 f7       	brne	.-10     	; 0xdd8 <initializeKnob+0xc>
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
	}
}
     de2:	08 95       	ret

00000de4 <initLEDs>:
extern Pattern currentPattern;
extern uint8_t currentStep;

void initLEDs()
{
	DDRG = 0B00000111; //outputs on G5,2, and 0.
     de4:	87 e0       	ldi	r24, 0x07	; 7
     de6:	83 bb       	out	0x13, r24	; 19
     de8:	08 95       	ret

00000dea <parseLEDs>:
}
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
     dea:	a2 98       	cbi	0x14, 2	; 20
     dec:	27 e0       	ldi	r18, 0x07	; 7
	for(uint8_t j=0; j<7; j++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
     dee:	a0 9a       	sbi	0x14, 0	; 20
		if(gpParse&0x80)
     df0:	66 23       	and	r22, r22
     df2:	14 f4       	brge	.+4      	; 0xdf8 <parseLEDs+0xe>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
     df4:	a1 9a       	sbi	0x14, 1	; 20
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <parseLEDs+0x10>
		}
		else
		{
			PORTG &= (~(1 << PG1));
     df8:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
     dfa:	a0 98       	cbi	0x14, 0	; 20
		gpParse = gpParse << 1;
     dfc:	66 0f       	add	r22, r22
     dfe:	21 50       	subi	r18, 0x01	; 1
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t j=0; j<7; j++)
     e00:	b1 f7       	brne	.-20     	; 0xdee <parseLEDs+0x4>
     e02:	21 e1       	ldi	r18, 0x11	; 17
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
     e04:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
     e06:	99 23       	and	r25, r25
     e08:	14 f4       	brge	.+4      	; 0xe0e <parseLEDs+0x24>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
     e0a:	a1 9a       	sbi	0x14, 1	; 20
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <parseLEDs+0x26>
		}
		else
		{
			PORTG &= (~(1 << PG1));
     e0e:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
     e10:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	21 50       	subi	r18, 0x01	; 1
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
     e18:	a9 f7       	brne	.-22     	; 0xe04 <parseLEDs+0x1a>
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	
	
	PORTG |= (1 << PG2); //latch pin high
     e1a:	a2 9a       	sbi	0x14, 2	; 20
     e1c:	08 95       	ret

00000e1e <updateLEDs>:
}

void updateLEDs(Pattern ledCurrentPattern, Globals currentGlobals)
{
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	cd 57       	subi	r28, 0x7D	; 125
     e28:	de 4f       	sbci	r29, 0xFE	; 254
     e2a:	68 81       	ld	r22, Y
     e2c:	c3 58       	subi	r28, 0x83	; 131
     e2e:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t shiftedState = currentGlobals.menuState >> 4; //this will get rid of EncoderB
	uint16_t totalLights = currentGlobals.currentTrigButtons|currentGlobals.currentTrigMidi|currentGlobals.currentTrigSequencer; //we want lights from all sources. 
     e30:	cf 57       	subi	r28, 0x7F	; 127
     e32:	de 4f       	sbci	r29, 0xFE	; 254
     e34:	28 81       	ld	r18, Y
     e36:	39 81       	ldd	r19, Y+1	; 0x01
     e38:	c1 58       	subi	r28, 0x81	; 129
     e3a:	d1 40       	sbci	r29, 0x01	; 1
     e3c:	ca 57       	subi	r28, 0x7A	; 122
     e3e:	de 4f       	sbci	r29, 0xFE	; 254
     e40:	88 81       	ld	r24, Y
     e42:	99 81       	ldd	r25, Y+1	; 0x01
     e44:	c6 58       	subi	r28, 0x86	; 134
     e46:	d1 40       	sbci	r29, 0x01	; 1
     e48:	82 2b       	or	r24, r18
     e4a:	93 2b       	or	r25, r19
     e4c:	cc 57       	subi	r28, 0x7C	; 124
     e4e:	de 4f       	sbci	r29, 0xFE	; 254
     e50:	28 81       	ld	r18, Y
     e52:	39 81       	ldd	r19, Y+1	; 0x01
     e54:	c4 58       	subi	r28, 0x84	; 132
     e56:	d1 40       	sbci	r29, 0x01	; 1
     e58:	28 2b       	or	r18, r24
     e5a:	39 2b       	or	r19, r25
	//no input from midi yet, but we will have that eventually. 
	switch(shiftedState)
     e5c:	c5 57       	subi	r28, 0x75	; 117
     e5e:	de 4f       	sbci	r29, 0xFE	; 254
     e60:	98 81       	ld	r25, Y
     e62:	cb 58       	subi	r28, 0x8B	; 139
     e64:	d1 40       	sbci	r29, 0x01	; 1
     e66:	92 95       	swap	r25
     e68:	9f 70       	andi	r25, 0x0F	; 15
     e6a:	91 30       	cpi	r25, 0x01	; 1
     e6c:	49 f0       	breq	.+18     	; 0xe80 <updateLEDs+0x62>
     e6e:	28 f0       	brcs	.+10     	; 0xe7a <updateLEDs+0x5c>
     e70:	92 30       	cpi	r25, 0x02	; 2
     e72:	d1 f0       	breq	.+52     	; 0xea8 <updateLEDs+0x8a>
     e74:	93 30       	cpi	r25, 0x03	; 3
     e76:	d9 f0       	breq	.+54     	; 0xeae <updateLEDs+0x90>
     e78:	1c c0       	rjmp	.+56     	; 0xeb2 <updateLEDs+0x94>
	{
		case 0:
		parseLEDs(totalLights, currentGlobals.currentGPButtons);
     e7a:	c9 01       	movw	r24, r18
     e7c:	b6 df       	rcall	.-148    	; 0xdea <parseLEDs>
		break;
     e7e:	19 c0       	rjmp	.+50     	; 0xeb2 <updateLEDs+0x94>

		case 1:
		parseLEDs(ledCurrentPattern.trackSequence[currentGlobals.currentStep], currentGlobals.currentGPButtons);
     e80:	c7 57       	subi	r28, 0x77	; 119
     e82:	de 4f       	sbci	r29, 0xFE	; 254
     e84:	e8 81       	ld	r30, Y
     e86:	c9 58       	subi	r28, 0x89	; 137
     e88:	d1 40       	sbci	r29, 0x01	; 1
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	ee 0f       	add	r30, r30
     e8e:	ff 1f       	adc	r31, r31
     e90:	86 e0       	ldi	r24, 0x06	; 6
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	8c 0f       	add	r24, r28
     e96:	9d 1f       	adc	r25, r29
     e98:	e8 0f       	add	r30, r24
     e9a:	f9 1f       	adc	r31, r25
     e9c:	e5 50       	subi	r30, 0x05	; 5
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	80 81       	ld	r24, Z
     ea2:	91 81       	ldd	r25, Z+1	; 0x01
     ea4:	a2 df       	rcall	.-188    	; 0xdea <parseLEDs>
		break;

		case 2:
		parseLEDs(totalLights, currentGlobals.currentGPButtons);
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <updateLEDs+0x94>
     ea8:	c9 01       	movw	r24, r18
		break;
     eaa:	9f df       	rcall	.-194    	; 0xdea <parseLEDs>

		case 3:
		parseLEDs(totalLights, currentGlobals.currentGPButtons);
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <updateLEDs+0x94>
     eae:	c9 01       	movw	r24, r18
     eb0:	9c df       	rcall	.-200    	; 0xdea <parseLEDs>
		break;
	}

}
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	08 95       	ret

00000eb8 <main>:
//Pattern may not need to be volatile, but I'd like to keep it around. 
volatile Pattern currentPattern;
volatile Globals currentGlobals;
volatile uint32_t globalTimer = 0;

int main(){
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	c2 5b       	subi	r28, 0xB2	; 178
     ec2:	d3 40       	sbci	r29, 0x03	; 3
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
	uint8_t factoryReset=0; // set this to 1 if you would like to fill the eeprom with Factory data, and erase all user data.
     ece:	19 82       	std	Y+1, r1	; 0x01
	Screen screenBank;
	char testArray[21] = "CurrentTime:         ";
	
	initScreen();
     ed0:	0e 94 f6 10 	call	0x21ec	; 0x21ec <initScreen>
	initButtons();
     ed4:	aa d9       	rcall	.-3244   	; 0x22a <initButtons>
	initEncoders();
     ed6:	ab da       	rcall	.-2730   	; 0x42e <initEncoders>
     ed8:	89 ef       	ldi	r24, 0xF9	; 249
	initBank(&currentPattern);
     eda:	93 e0       	ldi	r25, 0x03	; 3
     edc:	a4 dd       	rcall	.-1208   	; 0xa26 <initBank>
     ede:	0e 94 22 17 	call	0x2e44	; 0x2e44 <twi_init>
	twi_init();
     ee2:	78 94       	sei
	sei();
     ee4:	44 e7       	ldi	r20, 0x74	; 116
	//factory Reset, we should turn this into a global function. 
	factoryResetCheck(&factoryReset,&currentPattern, &currentGlobals);
     ee6:	55 e0       	ldi	r21, 0x05	; 5
     ee8:	69 ef       	ldi	r22, 0xF9	; 249
     eea:	73 e0       	ldi	r23, 0x03	; 3
     eec:	ce 01       	movw	r24, r28
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	5a de       	rcall	.-844    	; 0xba6 <factoryResetCheck>
	
	initTimer();
     ef2:	0f de       	rcall	.-994    	; 0xb12 <initTimer>
	initGlobals(&currentGlobals, factoryReset);
     ef4:	69 81       	ldd	r22, Y+1	; 0x01
     ef6:	84 e7       	ldi	r24, 0x74	; 116
     ef8:	95 e0       	ldi	r25, 0x05	; 5
     efa:	c4 dd       	rcall	.-1144   	; 0xa84 <initGlobals>
	initLEDs();
     efc:	73 df       	rcall	.-282    	; 0xde4 <initLEDs>
     efe:	f2 de       	rcall	.-540    	; 0xce4 <initADC>
	initADC();
     f00:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <serialInit0>
	serialInit0();
     f04:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <initMidi>
	initMidi();
     f08:	60 91 7b 05 	lds	r22, 0x057B	; 0x80057b <currentGlobals+0x7>
	//initEnvelopes();
	//initSequencer();
	
	
	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
     f0c:	89 ef       	ldi	r24, 0xF9	; 249
     f0e:	93 e0       	ldi	r25, 0x03	; 3
     f10:	0e 94 6d 19 	call	0x32da	; 0x32da <eepromLoadPattern>
     f14:	00 e0       	ldi	r16, 0x00	; 0
     f16:	10 e0       	ldi	r17, 0x00	; 0
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
     f18:	0f 2e       	mov	r0, r31
     f1a:	fc e2       	ldi	r31, 0x2C	; 44
	{
		uint8_t loadSelect = i%44;
     f1c:	df 2e       	mov	r13, r31
     f1e:	f0 2d       	mov	r31, r0
     f20:	98 01       	movw	r18, r16
     f22:	af e2       	ldi	r26, 0x2F	; 47
     f24:	ba eb       	ldi	r27, 0xBA	; 186
     f26:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
     f2a:	96 95       	lsr	r25
     f2c:	87 95       	ror	r24
     f2e:	92 95       	swap	r25
     f30:	82 95       	swap	r24
     f32:	8f 70       	andi	r24, 0x0F	; 15
     f34:	89 27       	eor	r24, r25
     f36:	9f 70       	andi	r25, 0x0F	; 15
     f38:	89 27       	eor	r24, r25
     f3a:	d8 9e       	mul	r13, r24
     f3c:	90 01       	movw	r18, r0
     f3e:	d9 9e       	mul	r13, r25
     f40:	30 0d       	add	r19, r0
     f42:	11 24       	eor	r1, r1
     f44:	78 01       	movw	r14, r16
     f46:	e2 1a       	sub	r14, r18
     f48:	f3 0a       	sbc	r15, r19
		selectKnob(loadSelect);
     f4a:	8e 2d       	mov	r24, r14
     f4c:	e0 de       	rcall	.-576    	; 0xd0e <selectKnob>
     f4e:	64 e7       	ldi	r22, 0x74	; 116
		updateKnob(loadSelect, &currentGlobals);
     f50:	75 e0       	ldi	r23, 0x05	; 5
     f52:	8e 2d       	mov	r24, r14
     f54:	1c df       	rcall	.-456    	; 0xd8e <updateKnob>
     f56:	0f 5f       	subi	r16, 0xFF	; 255
	//initEnvelopes();
	//initSequencer();
	
	
	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
     f58:	1f 4f       	sbci	r17, 0xFF	; 255
     f5a:	08 3b       	cpi	r16, 0xB8	; 184
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	18 07       	cpc	r17, r24
     f60:	f9 f6       	brne	.-66     	; 0xf20 <main+0x68>
     f62:	84 e7       	ldi	r24, 0x74	; 116
	{
		uint8_t loadSelect = i%44;
		selectKnob(loadSelect);
		updateKnob(loadSelect, &currentGlobals);
	}
	initializeKnob(&currentGlobals); //then copy it to the lastFilteredKnobBuffer. 
     f64:	95 e0       	ldi	r25, 0x05	; 5
     f66:	32 df       	rcall	.-412    	; 0xdcc <initializeKnob>
     f68:	69 81       	ldd	r22, Y+1	; 0x01
     f6a:	84 e7       	ldi	r24, 0x74	; 116
	globalLoad(&currentGlobals, factoryReset);
     f6c:	95 e0       	ldi	r25, 0x05	; 5
     f6e:	0e 94 8e 1b 	call	0x371c	; 0x371c <globalLoad>
     f72:	8d b7       	in	r24, 0x3d	; 61
     f74:	9e b7       	in	r25, 0x3e	; 62
	initMenu(&screenBank, currentPattern, currentGlobals); //fills screenBank with menu strings
     f76:	82 5f       	subi	r24, 0xF2	; 242
     f78:	91 09       	sbc	r25, r1
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	9e bf       	out	0x3e, r25	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	8d bf       	out	0x3d, r24	; 61
     f84:	ad b7       	in	r26, 0x3d	; 61
     f86:	be b7       	in	r27, 0x3e	; 62
     f88:	11 96       	adiw	r26, 0x01	; 1
     f8a:	82 ef       	ldi	r24, 0xF2	; 242
     f8c:	e4 e7       	ldi	r30, 0x74	; 116
     f8e:	f5 e0       	ldi	r31, 0x05	; 5
     f90:	01 90       	ld	r0, Z+
     f92:	0d 92       	st	X+, r0
     f94:	8a 95       	dec	r24
     f96:	e1 f7       	brne	.-8      	; 0xf90 <main+0xd8>
     f98:	8d b7       	in	r24, 0x3d	; 61
     f9a:	9e b7       	in	r25, 0x3e	; 62
     f9c:	8b 57       	subi	r24, 0x7B	; 123
     f9e:	91 40       	sbci	r25, 0x01	; 1
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	9e bf       	out	0x3e, r25	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	8d bf       	out	0x3d, r24	; 61
     faa:	ad b7       	in	r26, 0x3d	; 61
     fac:	be b7       	in	r27, 0x3e	; 62
     fae:	11 96       	adiw	r26, 0x01	; 1
     fb0:	8b e7       	ldi	r24, 0x7B	; 123
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	e9 ef       	ldi	r30, 0xF9	; 249
     fb6:	f3 e0       	ldi	r31, 0x03	; 3
     fb8:	01 90       	ld	r0, Z+
     fba:	0d 92       	st	X+, r0
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	e1 f7       	brne	.-8      	; 0xfb8 <main+0x100>
     fc0:	ce 01       	movw	r24, r28
     fc2:	02 96       	adiw	r24, 0x02	; 2
     fc4:	26 d1       	rcall	.+588    	; 0x1212 <initMenu>
     fc6:	f8 94       	cli
     fc8:	78 94       	sei
	//this ISR is used for Button De-Bouncing. Maybe we could put it somewhere else. 
	//TCCR2B = 1<<CS22;//using 256 from pre-scaler
	//TIMSK2 = 1<<TOIE2; //interupt on counter overflow. since we're interupting on value 256 of with a 256 pre-scaler, we're calling this function every 65,536
	//clock cycles. at 16MHz, that equates to every 0.004096, seconds, or every 4 milliseconds. We ~~~should be able to do the same thing from our global counter.

	cli(); //this may not be needed, but also may be effecting things since we're setting interrupt registers after sei has already happened. 
     fca:	0f b6       	in	r0, 0x3f	; 63
	sei();
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	40 91 ea 03 	lds	r20, 0x03EA	; 0x8003ea <globalTimer>


while(1) {
	
	
	updateTimers(&currentGlobals, globalTimer); //we update our global timers here. 
     fd8:	50 91 eb 03 	lds	r21, 0x03EB	; 0x8003eb <globalTimer+0x1>
     fdc:	60 91 ec 03 	lds	r22, 0x03EC	; 0x8003ec <globalTimer+0x2>
     fe0:	70 91 ed 03 	lds	r23, 0x03ED	; 0x8003ed <globalTimer+0x3>
     fe4:	84 e7       	ldi	r24, 0x74	; 116
     fe6:	95 e0       	ldi	r25, 0x05	; 5
     fe8:	a0 dd       	rcall	.-1216   	; 0xb2a <updateTimers>
     fea:	64 e7       	ldi	r22, 0x74	; 116
//	{
		 //listenEncoders(&currentPattern, &currentGlobals); //we may not need to check this every millisecond. If we can just do these checks on 
		 //pin changes, it should be fine. and we have the specific pins to check from, so we should be good. 
//	}
	
	listenTrigButtons(&currentPattern, &currentGlobals);
     fec:	75 e0       	ldi	r23, 0x05	; 5
     fee:	89 ef       	ldi	r24, 0xF9	; 249
     ff0:	93 e0       	ldi	r25, 0x03	; 3
     ff2:	22 d9       	rcall	.-3516   	; 0x238 <listenTrigButtons>
     ff4:	04 e7       	ldi	r16, 0x74	; 116
     ff6:	15 e0       	ldi	r17, 0x05	; 5
	listenGPButtons(currentPattern, &currentGlobals);
     ff8:	1f 93       	push	r17
     ffa:	0f 93       	push	r16
     ffc:	8d b7       	in	r24, 0x3d	; 61
     ffe:	9e b7       	in	r25, 0x3e	; 62
    1000:	8b 57       	subi	r24, 0x7B	; 123
    1002:	91 40       	sbci	r25, 0x01	; 1
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	9e bf       	out	0x3e, r25	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	8d bf       	out	0x3d, r24	; 61
    100e:	ad b7       	in	r26, 0x3d	; 61
    1010:	be b7       	in	r27, 0x3e	; 62
    1012:	11 96       	adiw	r26, 0x01	; 1
    1014:	8b e7       	ldi	r24, 0x7B	; 123
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	e9 ef       	ldi	r30, 0xF9	; 249
    101a:	f3 e0       	ldi	r31, 0x03	; 3
    101c:	01 90       	ld	r0, Z+
    101e:	0d 92       	st	X+, r0
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	e1 f7       	brne	.-8      	; 0x101c <main+0x164>
    1024:	72 d9       	rcall	.-3356   	; 0x30a <listenGPButtons>
    1026:	8d b7       	in	r24, 0x3d	; 61
    1028:	9e b7       	in	r25, 0x3e	; 62
	updateLEDs(currentPattern, currentGlobals);
    102a:	83 58       	subi	r24, 0x83	; 131
    102c:	9e 4f       	sbci	r25, 0xFE	; 254
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	82 5f       	subi	r24, 0xF2	; 242
    103a:	91 09       	sbc	r25, r1
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	9e bf       	out	0x3e, r25	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	8d bf       	out	0x3d, r24	; 61
    1046:	ad b7       	in	r26, 0x3d	; 61
    1048:	be b7       	in	r27, 0x3e	; 62
    104a:	11 96       	adiw	r26, 0x01	; 1
    104c:	82 ef       	ldi	r24, 0xF2	; 242
    104e:	f8 01       	movw	r30, r16
    1050:	01 90       	ld	r0, Z+
    1052:	0d 92       	st	X+, r0
    1054:	8a 95       	dec	r24
    1056:	e1 f7       	brne	.-8      	; 0x1050 <main+0x198>
    1058:	8d b7       	in	r24, 0x3d	; 61
    105a:	9e b7       	in	r25, 0x3e	; 62
    105c:	8b 57       	subi	r24, 0x7B	; 123
    105e:	91 40       	sbci	r25, 0x01	; 1
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	9e bf       	out	0x3e, r25	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	8d bf       	out	0x3d, r24	; 61
    106a:	ad b7       	in	r26, 0x3d	; 61
    106c:	be b7       	in	r27, 0x3e	; 62
    106e:	11 96       	adiw	r26, 0x01	; 1
    1070:	8b e7       	ldi	r24, 0x7B	; 123
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	e9 ef       	ldi	r30, 0xF9	; 249
    1076:	f3 e0       	ldi	r31, 0x03	; 3
    1078:	01 90       	ld	r0, Z+
    107a:	0d 92       	st	X+, r0
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	e1 f7       	brne	.-8      	; 0x1078 <main+0x1c0>
    1080:	ce de       	rcall	.-612    	; 0xe1e <updateLEDs>
    1082:	0f b6       	in	r0, 0x3f	; 63
	//listenKnobs(&currentPattern, &currentGlobals);
	listenEncoders(&currentPattern, &currentGlobals);
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	b8 01       	movw	r22, r16
    108e:	89 ef       	ldi	r24, 0xF9	; 249
    1090:	93 e0       	ldi	r25, 0x03	; 3
    1092:	5b da       	rcall	.-2890   	; 0x54a <listenEncoders>
    1094:	1f 93       	push	r17
    1096:	0f 93       	push	r16
	updateSequencer(currentPattern, &currentGlobals);
    1098:	8d b7       	in	r24, 0x3d	; 61
    109a:	9e b7       	in	r25, 0x3e	; 62
    109c:	8b 57       	subi	r24, 0x7B	; 123
    109e:	91 40       	sbci	r25, 0x01	; 1
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	9e bf       	out	0x3e, r25	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	8d bf       	out	0x3d, r24	; 61
    10aa:	ad b7       	in	r26, 0x3d	; 61
    10ac:	be b7       	in	r27, 0x3e	; 62
    10ae:	11 96       	adiw	r26, 0x01	; 1
    10b0:	8b e7       	ldi	r24, 0x7B	; 123
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	e9 ef       	ldi	r30, 0xF9	; 249
    10b6:	f3 e0       	ldi	r31, 0x03	; 3
    10b8:	01 90       	ld	r0, Z+
    10ba:	0d 92       	st	X+, r0
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	e1 f7       	brne	.-8      	; 0x10b8 <main+0x200>
    10c0:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <updateSequencer>
    10c4:	0f b6       	in	r0, 0x3f	; 63
	updateScreen(&screenBank, &currentPattern, &currentGlobals);
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	a8 01       	movw	r20, r16
    10d0:	69 ef       	ldi	r22, 0xF9	; 249
    10d2:	73 e0       	ldi	r23, 0x03	; 3
    10d4:	ce 01       	movw	r24, r28
    10d6:	02 96       	adiw	r24, 0x02	; 2
    10d8:	dc d1       	rcall	.+952    	; 0x1492 <updateScreen>
    10da:	8d b7       	in	r24, 0x3d	; 61
    10dc:	9e b7       	in	r25, 0x3e	; 62
	midiRead(currentPattern, currentGlobals);
    10de:	82 5f       	subi	r24, 0xF2	; 242
    10e0:	91 09       	sbc	r25, r1
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	9e bf       	out	0x3e, r25	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	8d bf       	out	0x3d, r24	; 61
    10ec:	ad b7       	in	r26, 0x3d	; 61
    10ee:	be b7       	in	r27, 0x3e	; 62
    10f0:	11 96       	adiw	r26, 0x01	; 1
    10f2:	82 ef       	ldi	r24, 0xF2	; 242
    10f4:	f8 01       	movw	r30, r16
    10f6:	01 90       	ld	r0, Z+
    10f8:	0d 92       	st	X+, r0
    10fa:	8a 95       	dec	r24
    10fc:	e1 f7       	brne	.-8      	; 0x10f6 <main+0x23e>
    10fe:	8d b7       	in	r24, 0x3d	; 61
    1100:	9e b7       	in	r25, 0x3e	; 62
    1102:	8b 57       	subi	r24, 0x7B	; 123
    1104:	91 40       	sbci	r25, 0x01	; 1
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	9e bf       	out	0x3e, r25	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	8d bf       	out	0x3d, r24	; 61
    1110:	ad b7       	in	r26, 0x3d	; 61
    1112:	be b7       	in	r27, 0x3e	; 62
    1114:	11 96       	adiw	r26, 0x01	; 1
    1116:	8b e7       	ldi	r24, 0x7B	; 123
    1118:	91 e0       	ldi	r25, 0x01	; 1
    111a:	e9 ef       	ldi	r30, 0xF9	; 249
    111c:	f3 e0       	ldi	r31, 0x03	; 3
    111e:	01 90       	ld	r0, Z+
    1120:	0d 92       	st	X+, r0
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	e1 f7       	brne	.-8      	; 0x111e <main+0x266>
    1126:	d8 d7       	rcall	.+4016   	; 0x20d8 <midiRead>
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
	releaseUpdate(&currentPattern, &currentGlobals);
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	b8 01       	movw	r22, r16
    1134:	89 ef       	ldi	r24, 0xF9	; 249
    1136:	93 e0       	ldi	r25, 0x03	; 3
    1138:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <releaseUpdate>
    113c:	4b cf       	rjmp	.-362    	; 0xfd4 <main+0x11c>

0000113e <__vector_13>:
    113e:	1f 92       	push	r1
    1140:	0f 92       	push	r0
	//outputS(testArray,0);
	}
}

ISR(TIMER2_COMPA_vect)
{
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	0f 92       	push	r0
    1146:	11 24       	eor	r1, r1
    1148:	0b b6       	in	r0, 0x3b	; 59
    114a:	0f 92       	push	r0
    114c:	2f 93       	push	r18
    114e:	3f 93       	push	r19
    1150:	4f 93       	push	r20
    1152:	5f 93       	push	r21
    1154:	6f 93       	push	r22
    1156:	7f 93       	push	r23
    1158:	8f 93       	push	r24
    115a:	9f 93       	push	r25
    115c:	af 93       	push	r26
    115e:	bf 93       	push	r27
    1160:	ef 93       	push	r30
    1162:	ff 93       	push	r31
	globalTimer++; //this counts in one order of magnitude smaller than millis : 0.0001 seconds. 
    1164:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <globalTimer>
    1168:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <globalTimer+0x1>
    116c:	a0 91 ec 03 	lds	r26, 0x03EC	; 0x8003ec <globalTimer+0x2>
    1170:	b0 91 ed 03 	lds	r27, 0x03ED	; 0x8003ed <globalTimer+0x3>
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	a1 1d       	adc	r26, r1
    1178:	b1 1d       	adc	r27, r1
    117a:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <globalTimer>
    117e:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <globalTimer+0x1>
    1182:	a0 93 ec 03 	sts	0x03EC, r26	; 0x8003ec <globalTimer+0x2>
    1186:	b0 93 ed 03 	sts	0x03ED, r27	; 0x8003ed <globalTimer+0x3>
	//we don't want to do anything else here.
	if(globalTimer%40==0) //every 40 ticks, we want to call De bounce
    118a:	60 91 ea 03 	lds	r22, 0x03EA	; 0x8003ea <globalTimer>
    118e:	70 91 eb 03 	lds	r23, 0x03EB	; 0x8003eb <globalTimer+0x1>
    1192:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <globalTimer+0x2>
    1196:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <globalTimer+0x3>
    119a:	28 e2       	ldi	r18, 0x28	; 40
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	0e 94 b4 1b 	call	0x3768	; 0x3768 <__udivmodsi4>
    11a6:	67 2b       	or	r22, r23
    11a8:	68 2b       	or	r22, r24
    11aa:	69 2b       	or	r22, r25
    11ac:	f9 f4       	brne	.+62     	; 0x11ec <__vector_13+0xae>

static inline void debounce() //is this Timer interrupt too long?
{
	static uint8_t vcount_low = 0xFF, vcount_high = 0xFF;
	static uint8_t button_state = 0;
	uint8_t state_changed = ~BUTTON_PIN ^ button_state;
    11ae:	83 b1       	in	r24, 0x03	; 3
    11b0:	20 91 e9 03 	lds	r18, 0x03E9	; 0x8003e9 <button_state.1746>
    11b4:	80 95       	com	r24
    11b6:	38 2f       	mov	r19, r24
    11b8:	32 27       	eor	r19, r18
	VC_DEC_OR_SET(vcount_high, vcount_low, state_changed);
    11ba:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <vcount_low.1744>
    11be:	93 23       	and	r25, r19
    11c0:	89 2f       	mov	r24, r25
    11c2:	80 95       	com	r24
    11c4:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <vcount_low.1744>
    11c8:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__data_start>
    11cc:	93 23       	and	r25, r19
    11ce:	98 27       	eor	r25, r24
    11d0:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__data_start>
    11d4:	83 23       	and	r24, r19
	state_changed &= vcount_low & vcount_high;
    11d6:	89 23       	and	r24, r25
	button_state ^= state_changed;
    11d8:	92 2f       	mov	r25, r18
    11da:	98 27       	eor	r25, r24
    11dc:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <button_state.1746>
	buttons_down |= button_state&state_changed;
    11e0:	20 91 f7 03 	lds	r18, 0x03F7	; 0x8003f7 <buttons_down>
    11e4:	89 23       	and	r24, r25
    11e6:	82 2b       	or	r24, r18
    11e8:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <buttons_down>
	{
		debounce();
	}
    11ec:	ff 91       	pop	r31
    11ee:	ef 91       	pop	r30
    11f0:	bf 91       	pop	r27
    11f2:	af 91       	pop	r26
    11f4:	9f 91       	pop	r25
    11f6:	8f 91       	pop	r24
    11f8:	7f 91       	pop	r23
    11fa:	6f 91       	pop	r22
    11fc:	5f 91       	pop	r21
    11fe:	4f 91       	pop	r20
    1200:	3f 91       	pop	r19
    1202:	2f 91       	pop	r18
    1204:	0f 90       	pop	r0
    1206:	0b be       	out	0x3b, r0	; 59
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0f 90       	pop	r0
    120e:	1f 90       	pop	r1
    1210:	18 95       	reti

00001212 <initMenu>:
uint8_t prevMenuState; //do we need this anymore?

//I don't like using a global extern here, instead of a passed pointer,
//but I can't seem to get the struct to stay in scope.
void initMenu(Screen *initTheScreen, Pattern currentPattern, Globals currentGlobals)
{
    1212:	cf 92       	push	r12
    1214:	df 92       	push	r13
    1216:	ef 92       	push	r14
    1218:	ff 92       	push	r15
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	8c 01       	movw	r16, r24
    1228:	c2 57       	subi	r28, 0x72	; 114
    122a:	de 4f       	sbci	r29, 0xFE	; 254
    122c:	e8 80       	ld	r14, Y
    122e:	ce 58       	subi	r28, 0x8E	; 142
    1230:	d1 40       	sbci	r29, 0x01	; 1

//screen0
initArrays(initTheScreen->screen0,0,"Performance Mode");
    1232:	4a e9       	ldi	r20, 0x9A	; 154
    1234:	52 e0       	ldi	r21, 0x02	; 2
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	b6 db       	rcall	.-2196   	; 0x9a8 <initArrays>
initArrays(initTheScreen->screen0,1,"Pattern:");
    123c:	4b ea       	ldi	r20, 0xAB	; 171
    123e:	52 e0       	ldi	r21, 0x02	; 2
    1240:	61 e0       	ldi	r22, 0x01	; 1
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	c8 01       	movw	r24, r16
    1246:	b0 db       	rcall	.-2208   	; 0x9a8 <initArrays>
initArrays(initTheScreen->screen0,2,"BPM:");
    1248:	44 eb       	ldi	r20, 0xB4	; 180
    124a:	52 e0       	ldi	r21, 0x02	; 2
    124c:	62 e0       	ldi	r22, 0x02	; 2
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	c8 01       	movw	r24, r16
    1252:	aa db       	rcall	.-2220   	; 0x9a8 <initArrays>
initArrays(initTheScreen->screen0,3,"Stop");
    1254:	49 eb       	ldi	r20, 0xB9	; 185
    1256:	52 e0       	ldi	r21, 0x02	; 2
    1258:	63 e0       	ldi	r22, 0x03	; 3
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	c8 01       	movw	r24, r16
    125e:	a4 db       	rcall	.-2232   	; 0x9a8 <initArrays>

//screen1
initArrays(initTheScreen->screen1,0,"Sequence Edit");
    1260:	68 01       	movw	r12, r16
    1262:	8d eb       	ldi	r24, 0xBD	; 189
    1264:	c8 0e       	add	r12, r24
    1266:	d1 1c       	adc	r13, r1
    1268:	4e eb       	ldi	r20, 0xBE	; 190
    126a:	52 e0       	ldi	r21, 0x02	; 2
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	c6 01       	movw	r24, r12
    1272:	9a db       	rcall	.-2252   	; 0x9a8 <initArrays>
initArrays(initTheScreen->screen1,1,"Pattern:");
    1274:	4b ea       	ldi	r20, 0xAB	; 171
    1276:	52 e0       	ldi	r21, 0x02	; 2
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	c6 01       	movw	r24, r12
    127e:	94 db       	rcall	.-2264   	; 0x9a8 <initArrays>
initArrays(initTheScreen->screen1,2,"Steps:");
    1280:	4c ec       	ldi	r20, 0xCC	; 204
    1282:	52 e0       	ldi	r21, 0x02	; 2
    1284:	62 e0       	ldi	r22, 0x02	; 2
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	c6 01       	movw	r24, r12
    128a:	8e db       	rcall	.-2276   	; 0x9a8 <initArrays>
initArrays(initTheScreen->screen1,3,"Step number:");
    128c:	43 ed       	ldi	r20, 0xD3	; 211
    128e:	52 e0       	ldi	r21, 0x02	; 2
    1290:	63 e0       	ldi	r22, 0x03	; 3
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	c6 01       	movw	r24, r12
    1296:	88 db       	rcall	.-2288   	; 0x9a8 <initArrays>
    1298:	68 01       	movw	r12, r16

//screen2
initArrays(initTheScreen->screen2,0,"Track Settings");
    129a:	86 e8       	ldi	r24, 0x86	; 134
    129c:	c8 1a       	sub	r12, r24
    129e:	8e ef       	ldi	r24, 0xFE	; 254
    12a0:	d8 0a       	sbc	r13, r24
    12a2:	40 ee       	ldi	r20, 0xE0	; 224
    12a4:	52 e0       	ldi	r21, 0x02	; 2
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	c6 01       	movw	r24, r12
    12ac:	7d db       	rcall	.-2310   	; 0x9a8 <initArrays>
initArrays(initTheScreen->screen2,1,"Track:");
    12ae:	4f ee       	ldi	r20, 0xEF	; 239
    12b0:	52 e0       	ldi	r21, 0x02	; 2
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	c6 01       	movw	r24, r12
    12b8:	77 db       	rcall	.-2322   	; 0x9a8 <initArrays>
initArrays(initTheScreen->screen2,2,"PlayMode:");
    12ba:	46 ef       	ldi	r20, 0xF6	; 246
    12bc:	52 e0       	ldi	r21, 0x02	; 2
    12be:	62 e0       	ldi	r22, 0x02	; 2
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	c6 01       	movw	r24, r12
    12c4:	71 db       	rcall	.-2334   	; 0x9a8 <initArrays>
initArrays(initTheScreen->screen2,3,"OutRoute:");
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	53 e0       	ldi	r21, 0x03	; 3
    12ca:	63 e0       	ldi	r22, 0x03	; 3
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	c6 01       	movw	r24, r12
    12d0:	6b db       	rcall	.-2346   	; 0x9a8 <initArrays>
initArrays(initTheScreen->screen2,4,"EnvelopeMode:");
    12d2:	4a e0       	ldi	r20, 0x0A	; 10
    12d4:	53 e0       	ldi	r21, 0x03	; 3
    12d6:	64 e0       	ldi	r22, 0x04	; 4
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	c6 01       	movw	r24, r12
    12dc:	65 db       	rcall	.-2358   	; 0x9a8 <initArrays>
    12de:	48 e1       	ldi	r20, 0x18	; 24
initArrays(initTheScreen->screen2,5,"SustainTime:      S");
    12e0:	53 e0       	ldi	r21, 0x03	; 3
    12e2:	65 e0       	ldi	r22, 0x05	; 5
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	c6 01       	movw	r24, r12
    12e8:	5f db       	rcall	.-2370   	; 0x9a8 <initArrays>
    12ea:	68 01       	movw	r12, r16

//screen3
initArrays(initTheScreen->screen3,1,"Midi Channel:");
    12ec:	89 ec       	ldi	r24, 0xC9	; 201
    12ee:	c8 1a       	sub	r12, r24
    12f0:	8d ef       	ldi	r24, 0xFD	; 253
    12f2:	d8 0a       	sbc	r13, r24
    12f4:	4c e2       	ldi	r20, 0x2C	; 44
    12f6:	53 e0       	ldi	r21, 0x03	; 3
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	c6 01       	movw	r24, r12
    12fe:	54 db       	rcall	.-2392   	; 0x9a8 <initArrays>
initArrays(initTheScreen->screen3,2,"Midi trig   :");
    1300:	4a e3       	ldi	r20, 0x3A	; 58
    1302:	53 e0       	ldi	r21, 0x03	; 3
    1304:	62 e0       	ldi	r22, 0x02	; 2
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	c6 01       	movw	r24, r12
    130a:	4e db       	rcall	.-2404   	; 0x9a8 <initArrays>
initArrays(initTheScreen->screen3,3," ");
    130c:	4f ed       	ldi	r20, 0xDF	; 223
    130e:	53 e0       	ldi	r21, 0x03	; 3
    1310:	63 e0       	ldi	r22, 0x03	; 3
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	c6 01       	movw	r24, r12
    1316:	48 db       	rcall	.-2416   	; 0x9a8 <initArrays>
initArrays(initTheScreen->screen3,0,"Global Settings");
    1318:	48 e4       	ldi	r20, 0x48	; 72
    131a:	53 e0       	ldi	r21, 0x03	; 3
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	c6 01       	movw	r24, r12
    1322:	42 db       	rcall	.-2428   	; 0x9a8 <initArrays>

//init all of the knob arrays:
initArrays(initTheScreen->knobScreen,0,"OutVolume x : xxxdb");//string 0 is outVolume
    1324:	68 01       	movw	r12, r16
    1326:	8c e0       	ldi	r24, 0x0C	; 12
    1328:	c8 1a       	sub	r12, r24
    132a:	8d ef       	ldi	r24, 0xFD	; 253
    132c:	d8 0a       	sbc	r13, r24
    132e:	48 e5       	ldi	r20, 0x58	; 88
    1330:	53 e0       	ldi	r21, 0x03	; 3
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,1,"Pitch : xxx");//string 1 is pitch
    1338:	37 db       	rcall	.-2450   	; 0x9a8 <initArrays>
    133a:	4c e6       	ldi	r20, 0x6C	; 108
    133c:	53 e0       	ldi	r21, 0x03	; 3
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,2,"AttackTime  :      S"); //string 2 is Envelope gain
    1344:	31 db       	rcall	.-2462   	; 0x9a8 <initArrays>
    1346:	48 e7       	ldi	r20, 0x78	; 120
    1348:	53 e0       	ldi	r21, 0x03	; 3
    134a:	62 e0       	ldi	r22, 0x02	; 2
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	c6 01       	movw	r24, r12
    1350:	2b db       	rcall	.-2474   	; 0x9a8 <initArrays>
initArrays(initTheScreen->knobScreen,3,"ReleaseTimexx:xx xxx"); //string 3 is Envelop Time
    1352:	4d e8       	ldi	r20, 0x8D	; 141
    1354:	53 e0       	ldi	r21, 0x03	; 3
    1356:	63 e0       	ldi	r22, 0x03	; 3
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	c6 01       	movw	r24, r12
    135c:	25 db       	rcall	.-2486   	; 0x9a8 <initArrays>
initArrays(initTheScreen->knobScreen,4,"TrackVolume xx:xxxdb"); //string 4 is track Level.
    135e:	42 ea       	ldi	r20, 0xA2	; 162
    1360:	53 e0       	ldi	r21, 0x03	; 3
    1362:	64 e0       	ldi	r22, 0x04	; 4
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	c6 01       	movw	r24, r12
    1368:	1f db       	rcall	.-2498   	; 0x9a8 <initArrays>
    136a:	cc 52       	subi	r28, 0x2C	; 44
//initArrays(initTheScreen->knobScreen,5,"BPM: ");
//we might want to put in one of these for BPM, but I'm not sure. 

numPrinter(initTheScreen->screen0[2],5,3, currentPattern.patternBPM);
    136c:	df 4f       	sbci	r29, 0xFF	; 255
    136e:	28 81       	ld	r18, Y
    1370:	39 81       	ldd	r19, Y+1	; 0x01
    1372:	c4 5d       	subi	r28, 0xD4	; 212
    1374:	d0 40       	sbci	r29, 0x00	; 0
    1376:	43 e0       	ldi	r20, 0x03	; 3
    1378:	65 e0       	ldi	r22, 0x05	; 5
    137a:	c8 01       	movw	r24, r16
    137c:	8a 96       	adiw	r24, 0x2a	; 42
    137e:	ab d7       	rcall	.+3926   	; 0x22d6 <numPrinter>
    1380:	c9 56       	subi	r28, 0x69	; 105
numPrinter(initTheScreen->screen3[1],14,2, (currentGlobals.midiChannel)+1);
    1382:	de 4f       	sbci	r29, 0xFE	; 254
    1384:	28 81       	ld	r18, Y
    1386:	c7 59       	subi	r28, 0x97	; 151
    1388:	d1 40       	sbci	r29, 0x01	; 1
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	2f 5f       	subi	r18, 0xFF	; 255
    138e:	3f 4f       	sbci	r19, 0xFF	; 255
    1390:	42 e0       	ldi	r20, 0x02	; 2
    1392:	6e e0       	ldi	r22, 0x0E	; 14
    1394:	c8 01       	movw	r24, r16
    1396:	84 5b       	subi	r24, 0xB4	; 180
    1398:	9d 4f       	sbci	r25, 0xFD	; 253
    139a:	9d d7       	rcall	.+3898   	; 0x22d6 <numPrinter>
    139c:	f1 2c       	mov	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    139e:	8f ef       	ldi	r24, 0xFF	; 255
    13a0:	e8 1a       	sub	r14, r24
    13a2:	f8 0a       	sbc	r15, r24
    13a4:	97 01       	movw	r18, r14
    13a6:	43 e0       	ldi	r20, 0x03	; 3
    13a8:	69 e0       	ldi	r22, 0x09	; 9
    13aa:	c8 01       	movw	r24, r16
    13ac:	45 96       	adiw	r24, 0x15	; 21
    13ae:	93 d7       	rcall	.+3878   	; 0x22d6 <numPrinter>
    13b0:	97 01       	movw	r18, r14
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    13b2:	43 e0       	ldi	r20, 0x03	; 3
    13b4:	69 e0       	ldi	r22, 0x09	; 9
    13b6:	c8 01       	movw	r24, r16
    13b8:	8e 52       	subi	r24, 0x2E	; 46
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255
    13bc:	8c d7       	rcall	.+3864   	; 0x22d6 <numPrinter>
    13be:	ca 52       	subi	r28, 0x2A	; 42
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
    13c0:	df 4f       	sbci	r29, 0xFF	; 255
    13c2:	28 81       	ld	r18, Y
    13c4:	c6 5d       	subi	r28, 0xD6	; 214
    13c6:	d0 40       	sbci	r29, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	42 e0       	ldi	r20, 0x02	; 2
    13cc:	67 e0       	ldi	r22, 0x07	; 7
    13ce:	c8 01       	movw	r24, r16
    13d0:	89 51       	subi	r24, 0x19	; 25
    13d2:	9f 4f       	sbci	r25, 0xFF	; 255
    13d4:	80 d7       	rcall	.+3840   	; 0x22d6 <numPrinter>
    13d6:	c1 57       	subi	r28, 0x71	; 113
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
    13d8:	de 4f       	sbci	r29, 0xFE	; 254
    13da:	28 81       	ld	r18, Y
    13dc:	cf 58       	subi	r28, 0x8F	; 143
    13de:	d1 40       	sbci	r29, 0x01	; 1
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	2f 5f       	subi	r18, 0xFF	; 255
    13e4:	3f 4f       	sbci	r19, 0xFF	; 255
    13e6:	42 e0       	ldi	r20, 0x02	; 2
    13e8:	6d e0       	ldi	r22, 0x0D	; 13
    13ea:	c8 01       	movw	r24, r16
    13ec:	84 50       	subi	r24, 0x04	; 4
    13ee:	9f 4f       	sbci	r25, 0xFF	; 255
    13f0:	72 d7       	rcall	.+3812   	; 0x22d6 <numPrinter>
    13f2:	e1 2c       	mov	r14, r1
    13f4:	f1 2c       	mov	r15, r1
    13f6:	b7 01       	movw	r22, r14
    13f8:	c8 01       	movw	r24, r16
 
	for(uint8_t i=0;i<4; i++ )
	{
		outputS(initTheScreen->screen0[i],i);
    13fa:	55 d7       	rcall	.+3754   	; 0x22a6 <outputS>
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	e8 1a       	sub	r14, r24
    1400:	f8 0a       	sbc	r15, r24
    1402:	0b 5e       	subi	r16, 0xEB	; 235
    1404:	1f 4f       	sbci	r17, 0xFF	; 255
    1406:	84 e0       	ldi	r24, 0x04	; 4
    1408:	e8 16       	cp	r14, r24
    140a:	f1 04       	cpc	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
 
	for(uint8_t i=0;i<4; i++ )
    140c:	a1 f7       	brne	.-24     	; 0x13f6 <initMenu+0x1e4>
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	1f 91       	pop	r17
	{
		outputS(initTheScreen->screen0[i],i);
	}
}
    1414:	0f 91       	pop	r16
    1416:	ff 90       	pop	r15
    1418:	ef 90       	pop	r14
    141a:	df 90       	pop	r13
    141c:	cf 90       	pop	r12
    141e:	08 95       	ret

00001420 <reInitMenuOnLoad>:
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(Screen *initTheScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	ec 01       	movw	r28, r24
    142e:	8b 01       	movw	r16, r22
    1430:	7a 01       	movw	r14, r20
	numPrinter(initTheScreen->screen0[2],5,3, currentPattern->patternBPM);
    1432:	fb 01       	movw	r30, r22
    1434:	e8 53       	subi	r30, 0x38	; 56
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	20 81       	ld	r18, Z
    143a:	31 81       	ldd	r19, Z+1	; 0x01
    143c:	43 e0       	ldi	r20, 0x03	; 3
    143e:	65 e0       	ldi	r22, 0x05	; 5
    1440:	8a 96       	adiw	r24, 0x2a	; 42
    1442:	49 d7       	rcall	.+3730   	; 0x22d6 <numPrinter>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
    1444:	f8 01       	movw	r30, r16
    1446:	e6 53       	subi	r30, 0x36	; 54
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	20 81       	ld	r18, Z
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	42 e0       	ldi	r20, 0x02	; 2
    1450:	67 e0       	ldi	r22, 0x07	; 7
    1452:	ce 01       	movw	r24, r28
    1454:	89 51       	subi	r24, 0x19	; 25
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	3e d7       	rcall	.+3708   	; 0x22d6 <numPrinter>
	numPrinter(initTheScreen->screen1[1],9,3,(currentGlobals->currentPatternNumber)+1);
    145a:	f7 01       	movw	r30, r14
    145c:	27 81       	ldd	r18, Z+7	; 0x07
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	2f 5f       	subi	r18, 0xFF	; 255
    1462:	3f 4f       	sbci	r19, 0xFF	; 255
    1464:	43 e0       	ldi	r20, 0x03	; 3
    1466:	69 e0       	ldi	r22, 0x09	; 9
    1468:	ce 01       	movw	r24, r28
    146a:	8e 52       	subi	r24, 0x2E	; 46
    146c:	9f 4f       	sbci	r25, 0xFF	; 255
    146e:	33 d7       	rcall	.+3686   	; 0x22d6 <numPrinter>
	numPrinter(initTheScreen->screen0[1],9,3,(currentGlobals->currentPatternNumber)+1);
    1470:	f7 01       	movw	r30, r14
    1472:	27 81       	ldd	r18, Z+7	; 0x07
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	2f 5f       	subi	r18, 0xFF	; 255
    1478:	3f 4f       	sbci	r19, 0xFF	; 255
    147a:	43 e0       	ldi	r20, 0x03	; 3
    147c:	69 e0       	ldi	r22, 0x09	; 9
    147e:	ce 01       	movw	r24, r28
    1480:	45 96       	adiw	r24, 0x15	; 21
    1482:	29 d7       	rcall	.+3666   	; 0x22d6 <numPrinter>
}
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	ff 90       	pop	r15
    148e:	ef 90       	pop	r14
    1490:	08 95       	ret

00001492 <updateScreen>:

void updateScreen(Screen *menuScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    1492:	8f 92       	push	r8
    1494:	9f 92       	push	r9
    1496:	af 92       	push	r10
    1498:	bf 92       	push	r11
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	8c 01       	movw	r16, r24
    14ac:	7b 01       	movw	r14, r22
    14ae:	ea 01       	movw	r28, r20
	
	if((currentGlobals->valueChangeFlag)&(1<<encoderChange))//check if encoder bit is high
    14b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    14b2:	80 ff       	sbrs	r24, 0
    14b4:	da c2       	rjmp	.+1460   	; 0x1a6a <updateScreen+0x5d8>
	{ 
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<encoderChange));//set encoder bit low, and carry our whatever encoder change has occurred. 
    14b6:	1e 86       	std	Y+14, r1	; 0x0e
		//we need to debug this to make sure it's doing what we think it's doing.
		switch(currentGlobals->menuState)
    14b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	8b 33       	cpi	r24, 0x3B	; 59
    14be:	91 05       	cpc	r25, r1
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <updateScreen+0x32>
    14c2:	d0 c2       	rjmp	.+1440   	; 0x1a64 <updateScreen+0x5d2>
    14c4:	fc 01       	movw	r30, r24
    14c6:	88 27       	eor	r24, r24
    14c8:	e3 55       	subi	r30, 0x53	; 83
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	8f 4f       	sbci	r24, 0xFF	; 255
    14ce:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__tablejump2__>
		{
			case PreformanceModeInit: //initial state
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    14d2:	c8 01       	movw	r24, r16
    14d4:	a5 df       	rcall	.-182    	; 0x1420 <reInitMenuOnLoad>
			outputS(menuScreen->screen0[0], 0);
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	c8 01       	movw	r24, r16
    14dc:	e4 d6       	rcall	.+3528   	; 0x22a6 <outputS>
			outputS(menuScreen->screen0[1], 1);
    14de:	61 e0       	ldi	r22, 0x01	; 1
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	c8 01       	movw	r24, r16
    14e4:	45 96       	adiw	r24, 0x15	; 21
    14e6:	df d6       	rcall	.+3518   	; 0x22a6 <outputS>
			outputS(menuScreen->screen0[2], 2);
    14e8:	62 e0       	ldi	r22, 0x02	; 2
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	c8 01       	movw	r24, r16
    14ee:	8a 96       	adiw	r24, 0x2a	; 42
    14f0:	da d6       	rcall	.+3508   	; 0x22a6 <outputS>
			outputS(menuScreen->screen0[3], 3);
    14f2:	63 e0       	ldi	r22, 0x03	; 3
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	c8 01       	movw	r24, r16
    14f8:	cf 96       	adiw	r24, 0x3f	; 63
    14fa:	d5 d6       	rcall	.+3498   	; 0x22a6 <outputS>
			break;
    14fc:	b3 c2       	rjmp	.+1382   	; 0x1a64 <updateScreen+0x5d2>

			case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0);
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	c8 01       	movw	r24, r16
    1504:	83 54       	subi	r24, 0x43	; 67
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	ce d6       	rcall	.+3484   	; 0x22a6 <outputS>
			outputS(menuScreen->screen1[1], 1);
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	c8 01       	movw	r24, r16
    1510:	8e 52       	subi	r24, 0x2E	; 46
    1512:	9f 4f       	sbci	r25, 0xFF	; 255
    1514:	c8 d6       	rcall	.+3472   	; 0x22a6 <outputS>
			outputS(menuScreen->screen1[2], 2);
    1516:	62 e0       	ldi	r22, 0x02	; 2
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	c8 01       	movw	r24, r16
    151c:	89 51       	subi	r24, 0x19	; 25
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	c2 d6       	rcall	.+3460   	; 0x22a6 <outputS>
			outputS(menuScreen->screen1[3], 3);
    1522:	63 e0       	ldi	r22, 0x03	; 3
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	c8 01       	movw	r24, r16
    1528:	84 50       	subi	r24, 0x04	; 4
    152a:	9f 4f       	sbci	r25, 0xFF	; 255
    152c:	bc d6       	rcall	.+3448   	; 0x22a6 <outputS>
    152e:	81 e1       	ldi	r24, 0x11	; 17
			currentGlobals->menuState = SequencerMenuArrow1; 
    1530:	8a 87       	std	Y+10, r24	; 0x0a
    1532:	88 e0       	ldi	r24, 0x08	; 8
			
			
			case SequencerMenuArrow1:
			menuScreen->screen1[1][19]= 8;
    1534:	f8 01       	movw	r30, r16
    1536:	eb 51       	subi	r30, 0x1B	; 27
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	80 83       	st	Z, r24
    153c:	80 e2       	ldi	r24, 0x20	; 32
			menuScreen->screen1[2][19] = ' ';
    153e:	75 96       	adiw	r30, 0x15	; 21
    1540:	80 83       	st	Z, r24
			menuScreen->screen1[3][19] = ' ';
    1542:	75 96       	adiw	r30, 0x15	; 21
    1544:	80 83       	st	Z, r24
			outputS(menuScreen->screen1[1], 1);
    1546:	61 e0       	ldi	r22, 0x01	; 1
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	c8 01       	movw	r24, r16
    154c:	8e 52       	subi	r24, 0x2E	; 46
    154e:	9f 4f       	sbci	r25, 0xFF	; 255
    1550:	aa d6       	rcall	.+3412   	; 0x22a6 <outputS>
			outputS(menuScreen->screen1[2], 2);
    1552:	62 e0       	ldi	r22, 0x02	; 2
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	c8 01       	movw	r24, r16
    1558:	89 51       	subi	r24, 0x19	; 25
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    155c:	a4 d6       	rcall	.+3400   	; 0x22a6 <outputS>
    155e:	63 e0       	ldi	r22, 0x03	; 3
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	c8 01       	movw	r24, r16
    1564:	84 50       	subi	r24, 0x04	; 4
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    1568:	9e d6       	rcall	.+3388   	; 0x22a6 <outputS>
			
			case SequencerMenuArrow1Select:
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    156a:	7c c2       	rjmp	.+1272   	; 0x1a64 <updateScreen+0x5d2>
    156c:	c8 01       	movw	r24, r16
    156e:	58 df       	rcall	.-336    	; 0x1420 <reInitMenuOnLoad>
			outputS(menuScreen->screen1[1],1);
    1570:	61 e0       	ldi	r22, 0x01	; 1
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	c8 01       	movw	r24, r16
    1576:	8e 52       	subi	r24, 0x2E	; 46
    1578:	9f 4f       	sbci	r25, 0xFF	; 255
    157a:	95 d6       	rcall	.+3370   	; 0x22a6 <outputS>
    157c:	73 c2       	rjmp	.+1254   	; 0x1a64 <updateScreen+0x5d2>
			break;
    157e:	80 e2       	ldi	r24, 0x20	; 32
	
	
			case SequencerMenuArrow2:
			menuScreen->screen1[1][19]= ' ';
    1580:	f8 01       	movw	r30, r16
    1582:	eb 51       	subi	r30, 0x1B	; 27
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	80 83       	st	Z, r24
			menuScreen->screen1[2][19] = 8;
    1588:	98 e0       	ldi	r25, 0x08	; 8
    158a:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = ' ';
    158c:	90 83       	st	Z, r25
    158e:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen1[1], 1);
    1590:	80 83       	st	Z, r24
    1592:	61 e0       	ldi	r22, 0x01	; 1
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	c8 01       	movw	r24, r16
    1598:	8e 52       	subi	r24, 0x2E	; 46
    159a:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    159c:	84 d6       	rcall	.+3336   	; 0x22a6 <outputS>
    159e:	62 e0       	ldi	r22, 0x02	; 2
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	c8 01       	movw	r24, r16
    15a4:	89 51       	subi	r24, 0x19	; 25
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255
    15a8:	7e d6       	rcall	.+3324   	; 0x22a6 <outputS>
			outputS(menuScreen->screen1[3], 3);
    15aa:	63 e0       	ldi	r22, 0x03	; 3
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	c8 01       	movw	r24, r16
    15b0:	84 50       	subi	r24, 0x04	; 4
    15b2:	9f 4f       	sbci	r25, 0xFF	; 255
    15b4:	78 d6       	rcall	.+3312   	; 0x22a6 <outputS>
			break;
	
			case SequencerMenuArrow2Select:
			numPrinter(menuScreen->screen1[2],7,2,currentPattern->numSteps);
    15b6:	56 c2       	rjmp	.+1196   	; 0x1a64 <updateScreen+0x5d2>
    15b8:	fb 01       	movw	r30, r22
    15ba:	e6 53       	subi	r30, 0x36	; 54
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	20 81       	ld	r18, Z
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	42 e0       	ldi	r20, 0x02	; 2
    15c4:	67 e0       	ldi	r22, 0x07	; 7
    15c6:	68 01       	movw	r12, r16
    15c8:	87 ee       	ldi	r24, 0xE7	; 231
    15ca:	c8 0e       	add	r12, r24
    15cc:	d1 1c       	adc	r13, r1
    15ce:	c6 01       	movw	r24, r12
    15d0:	82 d6       	rcall	.+3332   	; 0x22d6 <numPrinter>
			outputS(menuScreen->screen1[2],2);
    15d2:	62 e0       	ldi	r22, 0x02	; 2
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	c6 01       	movw	r24, r12
    15d8:	66 d6       	rcall	.+3276   	; 0x22a6 <outputS>
			break;
    15da:	44 c2       	rjmp	.+1160   	; 0x1a64 <updateScreen+0x5d2>
	
			case SequencerMenuArrow3:
			menuScreen->screen1[1][19]= ' ';
    15dc:	80 e2       	ldi	r24, 0x20	; 32
    15de:	f8 01       	movw	r30, r16
    15e0:	eb 51       	subi	r30, 0x1B	; 27
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
			menuScreen->screen1[2][19] = ' ';
    15e4:	80 83       	st	Z, r24
    15e6:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = 8;
    15e8:	80 83       	st	Z, r24
    15ea:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen1[1], 1);
    15ec:	75 96       	adiw	r30, 0x15	; 21
    15ee:	80 83       	st	Z, r24
    15f0:	61 e0       	ldi	r22, 0x01	; 1
    15f2:	70 e0       	ldi	r23, 0x00	; 0
    15f4:	c8 01       	movw	r24, r16
    15f6:	8e 52       	subi	r24, 0x2E	; 46
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    15fa:	55 d6       	rcall	.+3242   	; 0x22a6 <outputS>
    15fc:	62 e0       	ldi	r22, 0x02	; 2
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	c8 01       	movw	r24, r16
    1602:	89 51       	subi	r24, 0x19	; 25
    1604:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    1606:	4f d6       	rcall	.+3230   	; 0x22a6 <outputS>
    1608:	63 e0       	ldi	r22, 0x03	; 3
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	c8 01       	movw	r24, r16
    160e:	84 50       	subi	r24, 0x04	; 4
    1610:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    1612:	49 d6       	rcall	.+3218   	; 0x22a6 <outputS>
		
			case SequencerMenuArrow3Select:
			numPrinter(menuScreen->screen1[3],14,2,(currentGlobals->currentStep)+1); //these are 0 indexed, so we need to add 1 to the display.
    1614:	27 c2       	rjmp	.+1102   	; 0x1a64 <updateScreen+0x5d2>
    1616:	28 85       	ldd	r18, Y+8	; 0x08
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	2f 5f       	subi	r18, 0xFF	; 255
    161c:	3f 4f       	sbci	r19, 0xFF	; 255
    161e:	42 e0       	ldi	r20, 0x02	; 2
    1620:	6e e0       	ldi	r22, 0x0E	; 14
    1622:	68 01       	movw	r12, r16
    1624:	9c ef       	ldi	r25, 0xFC	; 252
    1626:	c9 0e       	add	r12, r25
    1628:	d1 1c       	adc	r13, r1
			outputS(menuScreen->screen1[3],3);
    162a:	c6 01       	movw	r24, r12
    162c:	54 d6       	rcall	.+3240   	; 0x22d6 <numPrinter>
    162e:	63 e0       	ldi	r22, 0x03	; 3
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	c6 01       	movw	r24, r12
			break;
	

			case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0);
    1634:	38 d6       	rcall	.+3184   	; 0x22a6 <outputS>
    1636:	16 c2       	rjmp	.+1068   	; 0x1a64 <updateScreen+0x5d2>
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	c8 01       	movw	r24, r16
    163e:	86 58       	subi	r24, 0x86	; 134
    1640:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[1], 1);
    1642:	31 d6       	rcall	.+3170   	; 0x22a6 <outputS>
    1644:	61 e0       	ldi	r22, 0x01	; 1
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	c8 01       	movw	r24, r16
    164a:	81 57       	subi	r24, 0x71	; 113
    164c:	9e 4f       	sbci	r25, 0xFE	; 254
    164e:	2b d6       	rcall	.+3158   	; 0x22a6 <outputS>
			outputS(menuScreen->screen2[2], 2);
    1650:	62 e0       	ldi	r22, 0x02	; 2
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	c8 01       	movw	r24, r16
    1656:	8c 55       	subi	r24, 0x5C	; 92
    1658:	9e 4f       	sbci	r25, 0xFE	; 254
    165a:	25 d6       	rcall	.+3146   	; 0x22a6 <outputS>
			outputS(menuScreen->screen2[3], 3);
    165c:	63 e0       	ldi	r22, 0x03	; 3
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	c8 01       	movw	r24, r16
    1662:	87 54       	subi	r24, 0x47	; 71
    1664:	9e 4f       	sbci	r25, 0xFE	; 254
    1666:	1f d6       	rcall	.+3134   	; 0x22a6 <outputS>
			currentGlobals->menuState = TrackMenuArrow1;
    1668:	81 e2       	ldi	r24, 0x21	; 33
		
			case TrackMenuArrow1:
			menuScreen->screen2[1][19]= 8;
    166a:	8a 87       	std	Y+10, r24	; 0x0a
    166c:	88 e0       	ldi	r24, 0x08	; 8
    166e:	f8 01       	movw	r30, r16
    1670:	ee 55       	subi	r30, 0x5E	; 94
    1672:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    1674:	80 83       	st	Z, r24
    1676:	80 e2       	ldi	r24, 0x20	; 32
    1678:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    167a:	80 83       	st	Z, r24
    167c:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    167e:	80 83       	st	Z, r24
    1680:	61 e0       	ldi	r22, 0x01	; 1
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	c8 01       	movw	r24, r16
    1686:	81 57       	subi	r24, 0x71	; 113
    1688:	9e 4f       	sbci	r25, 0xFE	; 254
    168a:	0d d6       	rcall	.+3098   	; 0x22a6 <outputS>
			outputS(menuScreen->screen2[2], 2);
    168c:	62 e0       	ldi	r22, 0x02	; 2
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	c8 01       	movw	r24, r16
    1692:	8c 55       	subi	r24, 0x5C	; 92
    1694:	9e 4f       	sbci	r25, 0xFE	; 254
    1696:	07 d6       	rcall	.+3086   	; 0x22a6 <outputS>
			outputS(menuScreen->screen2[3], 3);
    1698:	63 e0       	ldi	r22, 0x03	; 3
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	c8 01       	movw	r24, r16
    169e:	87 54       	subi	r24, 0x47	; 71
    16a0:	9e 4f       	sbci	r25, 0xFE	; 254
    16a2:	01 d6       	rcall	.+3074   	; 0x22a6 <outputS>
			break;
    16a4:	df c1       	rjmp	.+958    	; 0x1a64 <updateScreen+0x5d2>
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    16a6:	89 85       	ldd	r24, Y+9	; 0x09
    16a8:	db 01       	movw	r26, r22
    16aa:	a8 0f       	add	r26, r24
    16ac:	b1 1d       	adc	r27, r1
    16ae:	fd 01       	movw	r30, r26
    16b0:	e8 56       	subi	r30, 0x68	; 104
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    16b4:	20 81       	ld	r18, Z
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	32 2f       	mov	r19, r18
    16ba:	22 27       	eor	r18, r18
			outputS(menuScreen->screen2[2], 2);
			outputS(menuScreen->screen2[3], 3);
			break;
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    16bc:	70 96       	adiw	r30, 0x10	; 16
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    16be:	80 81       	ld	r24, Z
    16c0:	28 2b       	or	r18, r24
    16c2:	44 e0       	ldi	r20, 0x04	; 4
    16c4:	6a e0       	ldi	r22, 0x0A	; 10
    16c6:	68 01       	movw	r12, r16
    16c8:	b1 e7       	ldi	r27, 0x71	; 113
    16ca:	cb 1a       	sub	r12, r27
    16cc:	be ef       	ldi	r27, 0xFE	; 254
    16ce:	db 0a       	sbc	r13, r27
    16d0:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen2[1],1);
    16d2:	01 d6       	rcall	.+3074   	; 0x22d6 <numPrinter>
    16d4:	61 e0       	ldi	r22, 0x01	; 1
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	c6 01       	movw	r24, r12
			break;
    16da:	e5 d5       	rcall	.+3018   	; 0x22a6 <outputS>
	
			case TrackMenuArrow2:
			menuScreen->screen2[1][19]= ' ';
    16dc:	c3 c1       	rjmp	.+902    	; 0x1a64 <updateScreen+0x5d2>
    16de:	80 e2       	ldi	r24, 0x20	; 32
    16e0:	f8 01       	movw	r30, r16
    16e2:	ee 55       	subi	r30, 0x5E	; 94
    16e4:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = 8;
    16e6:	80 83       	st	Z, r24
    16e8:	98 e0       	ldi	r25, 0x08	; 8
    16ea:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    16ec:	90 83       	st	Z, r25
    16ee:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    16f0:	80 83       	st	Z, r24
    16f2:	61 e0       	ldi	r22, 0x01	; 1
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	c8 01       	movw	r24, r16
    16f8:	81 57       	subi	r24, 0x71	; 113
    16fa:	9e 4f       	sbci	r25, 0xFE	; 254
    16fc:	d4 d5       	rcall	.+2984   	; 0x22a6 <outputS>
			outputS(menuScreen->screen2[2], 2);
    16fe:	62 e0       	ldi	r22, 0x02	; 2
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	c8 01       	movw	r24, r16
    1704:	8c 55       	subi	r24, 0x5C	; 92
    1706:	9e 4f       	sbci	r25, 0xFE	; 254
    1708:	ce d5       	rcall	.+2972   	; 0x22a6 <outputS>
    170a:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[3], 3);
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	c8 01       	movw	r24, r16
    1710:	87 54       	subi	r24, 0x47	; 71
    1712:	9e 4f       	sbci	r25, 0xFE	; 254
    1714:	c8 d5       	rcall	.+2960   	; 0x22a6 <outputS>
    1716:	a6 c1       	rjmp	.+844    	; 0x1a64 <updateScreen+0x5d2>
    1718:	89 85       	ldd	r24, Y+9	; 0x09
			break;
    171a:	fb 01       	movw	r30, r22
		
			case TrackMenuArrow2Select:
			//we need some serious button code in these two cases. 
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    171c:	e8 0f       	add	r30, r24
    171e:	f1 1d       	adc	r31, r1
    1720:	e8 57       	subi	r30, 0x78	; 120
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	80 81       	ld	r24, Z
    1726:	88 23       	and	r24, r24
    1728:	19 f0       	breq	.+6      	; 0x1730 <updateScreen+0x29e>
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	79 f0       	breq	.+30     	; 0x174c <updateScreen+0x2ba>
    172e:	1c c0       	rjmp	.+56     	; 0x1768 <updateScreen+0x2d6>
    1730:	83 e5       	ldi	r24, 0x53	; 83
			{
				case 0:
				menuScreen->screen2[2][10] = 'S';
    1732:	f8 01       	movw	r30, r16
    1734:	e2 55       	subi	r30, 0x52	; 82
    1736:	fe 4f       	sbci	r31, 0xFE	; 254
    1738:	80 83       	st	Z, r24
    173a:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[2][11] = 'o';
    173c:	31 96       	adiw	r30, 0x01	; 1
    173e:	80 83       	st	Z, r24
    1740:	9c e6       	ldi	r25, 0x6C	; 108
				menuScreen->screen2[2][12] = 'l';
    1742:	31 96       	adiw	r30, 0x01	; 1
    1744:	90 83       	st	Z, r25
    1746:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'o';
    1748:	80 83       	st	Z, r24
    174a:	0e c0       	rjmp	.+28     	; 0x1768 <updateScreen+0x2d6>
				break;
    174c:	80 e5       	ldi	r24, 0x50	; 80

				case 1:
				menuScreen->screen2[2][10] = 'P';
    174e:	f8 01       	movw	r30, r16
    1750:	e2 55       	subi	r30, 0x52	; 82
    1752:	fe 4f       	sbci	r31, 0xFE	; 254
    1754:	80 83       	st	Z, r24
				menuScreen->screen2[2][11] = 'o';
    1756:	8f e6       	ldi	r24, 0x6F	; 111
    1758:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][12] = 'l';
    175a:	80 83       	st	Z, r24
    175c:	8c e6       	ldi	r24, 0x6C	; 108
    175e:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'y';
    1760:	80 83       	st	Z, r24
    1762:	89 e7       	ldi	r24, 0x79	; 121
	
				case 3:
				break;
			}
			
			outputS(menuScreen->screen2[2], 2);
    1764:	31 96       	adiw	r30, 0x01	; 1
    1766:	80 83       	st	Z, r24
    1768:	62 e0       	ldi	r22, 0x02	; 2
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	c8 01       	movw	r24, r16
    176e:	8c 55       	subi	r24, 0x5C	; 92
    1770:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1772:	99 d5       	rcall	.+2866   	; 0x22a6 <outputS>

			case TrackMenuArrow3:
			menuScreen->screen2[1][19]= ' ';
    1774:	77 c1       	rjmp	.+750    	; 0x1a64 <updateScreen+0x5d2>
    1776:	80 e2       	ldi	r24, 0x20	; 32
    1778:	f8 01       	movw	r30, r16
    177a:	ee 55       	subi	r30, 0x5E	; 94
    177c:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    177e:	80 83       	st	Z, r24
    1780:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = 8;
    1782:	80 83       	st	Z, r24
    1784:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[1], 1);
    1786:	75 96       	adiw	r30, 0x15	; 21
    1788:	80 83       	st	Z, r24
    178a:	61 e0       	ldi	r22, 0x01	; 1
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	c8 01       	movw	r24, r16
    1790:	81 57       	subi	r24, 0x71	; 113
			outputS(menuScreen->screen2[2], 2);
    1792:	9e 4f       	sbci	r25, 0xFE	; 254
    1794:	88 d5       	rcall	.+2832   	; 0x22a6 <outputS>
    1796:	62 e0       	ldi	r22, 0x02	; 2
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	c8 01       	movw	r24, r16
    179c:	8c 55       	subi	r24, 0x5C	; 92
    179e:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[3], 3);
    17a0:	82 d5       	rcall	.+2820   	; 0x22a6 <outputS>
    17a2:	63 e0       	ldi	r22, 0x03	; 3
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	c8 01       	movw	r24, r16
    17a8:	87 54       	subi	r24, 0x47	; 71
    17aa:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    17ac:	7c d5       	rcall	.+2808   	; 0x22a6 <outputS>
		
			case TrackMenuArrow3Select:
			numPrinter(menuScreen->screen2[3],10,2,(currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1);
    17ae:	5a c1       	rjmp	.+692    	; 0x1a64 <updateScreen+0x5d2>
    17b0:	89 85       	ldd	r24, Y+9	; 0x09
    17b2:	fb 01       	movw	r30, r22
    17b4:	e8 0f       	add	r30, r24
    17b6:	f1 1d       	adc	r31, r1
    17b8:	20 8d       	ldd	r18, Z+24	; 0x18
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	2f 5f       	subi	r18, 0xFF	; 255
    17be:	3f 4f       	sbci	r19, 0xFF	; 255
    17c0:	42 e0       	ldi	r20, 0x02	; 2
    17c2:	6a e0       	ldi	r22, 0x0A	; 10
    17c4:	68 01       	movw	r12, r16
    17c6:	e7 e4       	ldi	r30, 0x47	; 71
    17c8:	ce 1a       	sub	r12, r30
    17ca:	ee ef       	ldi	r30, 0xFE	; 254
    17cc:	de 0a       	sbc	r13, r30
			outputS(menuScreen->screen2[3],3);
    17ce:	c6 01       	movw	r24, r12
    17d0:	82 d5       	rcall	.+2820   	; 0x22d6 <numPrinter>
    17d2:	63 e0       	ldi	r22, 0x03	; 3
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	c6 01       	movw	r24, r12
			break;
    17d8:	66 d5       	rcall	.+2764   	; 0x22a6 <outputS>
			
			case TrackMenuArrow4:
			menuScreen->screen2[2][19]= ' ';
    17da:	44 c1       	rjmp	.+648    	; 0x1a64 <updateScreen+0x5d2>
    17dc:	80 e2       	ldi	r24, 0x20	; 32
    17de:	f8 01       	movw	r30, r16
    17e0:	e9 54       	subi	r30, 0x49	; 73
    17e2:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[3][19] = ' ';
    17e4:	80 83       	st	Z, r24
    17e6:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[4][19] = 8;
    17e8:	80 83       	st	Z, r24
    17ea:	88 e0       	ldi	r24, 0x08	; 8
    17ec:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[2], 1);
    17ee:	80 83       	st	Z, r24
    17f0:	61 e0       	ldi	r22, 0x01	; 1
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	c8 01       	movw	r24, r16
    17f6:	8c 55       	subi	r24, 0x5C	; 92
    17f8:	9e 4f       	sbci	r25, 0xFE	; 254
    17fa:	55 d5       	rcall	.+2730   	; 0x22a6 <outputS>
			outputS(menuScreen->screen2[3], 2);
    17fc:	62 e0       	ldi	r22, 0x02	; 2
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	c8 01       	movw	r24, r16
    1802:	87 54       	subi	r24, 0x47	; 71
    1804:	9e 4f       	sbci	r25, 0xFE	; 254
    1806:	4f d5       	rcall	.+2718   	; 0x22a6 <outputS>
    1808:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[4], 3);
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	c8 01       	movw	r24, r16
    180e:	82 53       	subi	r24, 0x32	; 50
    1810:	9e 4f       	sbci	r25, 0xFE	; 254
    1812:	49 d5       	rcall	.+2706   	; 0x22a6 <outputS>
    1814:	27 c1       	rjmp	.+590    	; 0x1a64 <updateScreen+0x5d2>
    1816:	89 85       	ldd	r24, Y+9	; 0x09
			break;
    1818:	fb 01       	movw	r30, r22
			
			case TrackMenuArrow4Select:
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    181a:	e8 0f       	add	r30, r24
    181c:	f1 1d       	adc	r31, r1
    181e:	e5 51       	subi	r30, 0x15	; 21
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 81       	ld	r24, Z
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	a9 f0       	breq	.+42     	; 0x1852 <updateScreen+0x3c0>
    1828:	28 f0       	brcs	.+10     	; 0x1834 <updateScreen+0x3a2>
    182a:	82 30       	cpi	r24, 0x02	; 2
    182c:	f9 f0       	breq	.+62     	; 0x186c <updateScreen+0x3da>
    182e:	83 30       	cpi	r24, 0x03	; 3
    1830:	51 f1       	breq	.+84     	; 0x1886 <updateScreen+0x3f4>
    1832:	37 c0       	rjmp	.+110    	; 0x18a2 <updateScreen+0x410>
    1834:	81 e4       	ldi	r24, 0x41	; 65
    1836:	f8 01       	movw	r30, r16
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1838:	e4 52       	subi	r30, 0x24	; 36
    183a:	fe 4f       	sbci	r31, 0xFE	; 254
    183c:	80 83       	st	Z, r24
    183e:	8d e2       	ldi	r24, 0x2D	; 45
    1840:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1842:	80 83       	st	Z, r24
    1844:	82 e5       	ldi	r24, 0x52	; 82
    1846:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1848:	80 83       	st	Z, r24
    184a:	80 e2       	ldi	r24, 0x20	; 32
    184c:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    184e:	80 83       	st	Z, r24
    1850:	28 c0       	rjmp	.+80     	; 0x18a2 <updateScreen+0x410>
    1852:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1854:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1856:	e4 52       	subi	r30, 0x24	; 36
    1858:	fe 4f       	sbci	r31, 0xFE	; 254
    185a:	80 83       	st	Z, r24
    185c:	80 e2       	ldi	r24, 0x20	; 32
				menuScreen->screen2[4][15] = ' ';
    185e:	31 96       	adiw	r30, 0x01	; 1
    1860:	80 83       	st	Z, r24
    1862:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = ' ';
    1864:	80 83       	st	Z, r24
    1866:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1868:	80 83       	st	Z, r24
    186a:	1b c0       	rjmp	.+54     	; 0x18a2 <updateScreen+0x410>
				break;
    186c:	81 e4       	ldi	r24, 0x41	; 65
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    186e:	f8 01       	movw	r30, r16
    1870:	e4 52       	subi	r30, 0x24	; 36
    1872:	fe 4f       	sbci	r31, 0xFE	; 254
    1874:	80 83       	st	Z, r24
				menuScreen->screen2[4][15] = ' ';
    1876:	80 e2       	ldi	r24, 0x20	; 32
    1878:	31 96       	adiw	r30, 0x01	; 1
    187a:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    187c:	31 96       	adiw	r30, 0x01	; 1
    187e:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1880:	31 96       	adiw	r30, 0x01	; 1
				break;
    1882:	80 83       	st	Z, r24
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1884:	0e c0       	rjmp	.+28     	; 0x18a2 <updateScreen+0x410>
    1886:	8e e4       	ldi	r24, 0x4E	; 78
    1888:	f8 01       	movw	r30, r16
    188a:	e4 52       	subi	r30, 0x24	; 36
				menuScreen->screen2[4][15] = 'o';
    188c:	fe 4f       	sbci	r31, 0xFE	; 254
    188e:	80 83       	st	Z, r24
    1890:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][16] = 'n';
    1892:	31 96       	adiw	r30, 0x01	; 1
    1894:	80 83       	st	Z, r24
    1896:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][17] = 'e';
    1898:	31 96       	adiw	r30, 0x01	; 1
    189a:	80 83       	st	Z, r24
    189c:	85 e6       	ldi	r24, 0x65	; 101
				break;
			}
			outputS(menuScreen->screen2[4],3);
    189e:	31 96       	adiw	r30, 0x01	; 1
    18a0:	80 83       	st	Z, r24
    18a2:	63 e0       	ldi	r22, 0x03	; 3
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	c8 01       	movw	r24, r16
    18a8:	82 53       	subi	r24, 0x32	; 50
    18aa:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    18ac:	fc d4       	rcall	.+2552   	; 0x22a6 <outputS>
			
			case TrackMenuArrow5:
			menuScreen->screen2[3][19]= ' ';
    18ae:	da c0       	rjmp	.+436    	; 0x1a64 <updateScreen+0x5d2>
    18b0:	80 e2       	ldi	r24, 0x20	; 32
    18b2:	f8 01       	movw	r30, r16
    18b4:	e4 53       	subi	r30, 0x34	; 52
    18b6:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[4][19] = ' ';
    18b8:	80 83       	st	Z, r24
			menuScreen->screen2[5][19] = 8;
    18ba:	75 96       	adiw	r30, 0x15	; 21
    18bc:	80 83       	st	Z, r24
    18be:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[3], 1);
    18c0:	75 96       	adiw	r30, 0x15	; 21
    18c2:	80 83       	st	Z, r24
    18c4:	61 e0       	ldi	r22, 0x01	; 1
    18c6:	70 e0       	ldi	r23, 0x00	; 0
    18c8:	c8 01       	movw	r24, r16
    18ca:	87 54       	subi	r24, 0x47	; 71
    18cc:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[4], 2);
    18ce:	eb d4       	rcall	.+2518   	; 0x22a6 <outputS>
    18d0:	62 e0       	ldi	r22, 0x02	; 2
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	c8 01       	movw	r24, r16
    18d6:	82 53       	subi	r24, 0x32	; 50
    18d8:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[5], 3);
    18da:	e5 d4       	rcall	.+2506   	; 0x22a6 <outputS>
    18dc:	63 e0       	ldi	r22, 0x03	; 3
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	c8 01       	movw	r24, r16
    18e2:	8d 51       	subi	r24, 0x1D	; 29
    18e4:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    18e6:	df d4       	rcall	.+2494   	; 0x22a6 <outputS>

			case TrackMenuArrow5Select:;
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    18e8:	bd c0       	rjmp	.+378    	; 0x1a64 <updateScreen+0x5d2>
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	9b 01       	movw	r18, r22
    18ee:	28 0f       	add	r18, r24
    18f0:	31 1d       	adc	r19, r1
    18f2:	f9 01       	movw	r30, r18
			numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    18f4:	e5 53       	subi	r30, 0x35	; 53
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	20 81       	ld	r18, Z
			outputS(menuScreen->screen2[4], 2);
			outputS(menuScreen->screen2[5], 3);
			break;

			case TrackMenuArrow5Select:;
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    18fa:	30 e0       	ldi	r19, 0x00	; 0
			numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    18fc:	32 2f       	mov	r19, r18
    18fe:	22 27       	eor	r18, r18
    1900:	70 96       	adiw	r30, 0x10	; 16
    1902:	80 81       	ld	r24, Z
    1904:	28 2b       	or	r18, r24
    1906:	45 e0       	ldi	r20, 0x05	; 5
    1908:	6d e0       	ldi	r22, 0x0D	; 13
    190a:	68 01       	movw	r12, r16
    190c:	8d e1       	ldi	r24, 0x1D	; 29
    190e:	c8 1a       	sub	r12, r24
    1910:	8e ef       	ldi	r24, 0xFE	; 254
			menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
    1912:	d8 0a       	sbc	r13, r24
    1914:	c6 01       	movw	r24, r12
    1916:	df d4       	rcall	.+2494   	; 0x22d6 <numPrinter>
    1918:	d8 01       	movw	r26, r16
    191a:	a0 51       	subi	r26, 0x10	; 16
    191c:	be 4f       	sbci	r27, 0xFE	; 254
    191e:	8c 91       	ld	r24, X
    1920:	f8 01       	movw	r30, r16
			menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
    1922:	e1 51       	subi	r30, 0x11	; 17
    1924:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[5][14] = '.';
    1926:	80 83       	st	Z, r24
    1928:	32 96       	adiw	r30, 0x02	; 2
			outputS(menuScreen->screen2[5],3);
    192a:	80 81       	ld	r24, Z
    192c:	8c 93       	st	X, r24
    192e:	8e e2       	ldi	r24, 0x2E	; 46
    1930:	80 83       	st	Z, r24
			break;
    1932:	63 e0       	ldi	r22, 0x03	; 3

			case GlobalMenuInit:
			outputS(menuScreen->screen3[0], 0);
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	c6 01       	movw	r24, r12
    1938:	b6 d4       	rcall	.+2412   	; 0x22a6 <outputS>
    193a:	94 c0       	rjmp	.+296    	; 0x1a64 <updateScreen+0x5d2>
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[1], 1);
    1940:	c8 01       	movw	r24, r16
    1942:	89 5c       	subi	r24, 0xC9	; 201
    1944:	9d 4f       	sbci	r25, 0xFD	; 253
    1946:	af d4       	rcall	.+2398   	; 0x22a6 <outputS>
    1948:	61 e0       	ldi	r22, 0x01	; 1
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    194e:	84 5b       	subi	r24, 0xB4	; 180
    1950:	9d 4f       	sbci	r25, 0xFD	; 253
    1952:	a9 d4       	rcall	.+2386   	; 0x22a6 <outputS>
    1954:	62 e0       	ldi	r22, 0x02	; 2
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    195a:	8f 59       	subi	r24, 0x9F	; 159
    195c:	9d 4f       	sbci	r25, 0xFD	; 253
    195e:	a3 d4       	rcall	.+2374   	; 0x22a6 <outputS>
    1960:	63 e0       	ldi	r22, 0x03	; 3
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	c8 01       	movw	r24, r16
    1966:	8a 58       	subi	r24, 0x8A	; 138
			currentGlobals->menuState = GlobalMenuArrow1;
    1968:	9d 4f       	sbci	r25, 0xFD	; 253
    196a:	9d d4       	rcall	.+2362   	; 0x22a6 <outputS>

			case GlobalMenuArrow1:
			menuScreen->screen3[1][19]= 8;
    196c:	81 e3       	ldi	r24, 0x31	; 49
    196e:	8a 87       	std	Y+10, r24	; 0x0a
    1970:	88 e0       	ldi	r24, 0x08	; 8
    1972:	f8 01       	movw	r30, r16
    1974:	e1 5a       	subi	r30, 0xA1	; 161
			menuScreen->screen3[2][19] = ' ';
    1976:	fd 4f       	sbci	r31, 0xFD	; 253
    1978:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    197a:	80 e2       	ldi	r24, 0x20	; 32
    197c:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen3[1], 1);
    197e:	80 83       	st	Z, r24
    1980:	75 96       	adiw	r30, 0x15	; 21
    1982:	80 83       	st	Z, r24
    1984:	61 e0       	ldi	r22, 0x01	; 1
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    198a:	84 5b       	subi	r24, 0xB4	; 180
    198c:	9d 4f       	sbci	r25, 0xFD	; 253
    198e:	8b d4       	rcall	.+2326   	; 0x22a6 <outputS>
    1990:	62 e0       	ldi	r22, 0x02	; 2
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1996:	8f 59       	subi	r24, 0x9F	; 159
    1998:	9d 4f       	sbci	r25, 0xFD	; 253
    199a:	85 d4       	rcall	.+2314   	; 0x22a6 <outputS>
    199c:	63 e0       	ldi	r22, 0x03	; 3
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	c8 01       	movw	r24, r16
    19a2:	8a 58       	subi	r24, 0x8A	; 138
			break;
    19a4:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow1Select:
			numPrinter(menuScreen->screen3[1],14,2,(currentGlobals->midiChannel)+1);
    19a6:	7f d4       	rcall	.+2302   	; 0x22a6 <outputS>
    19a8:	5d c0       	rjmp	.+186    	; 0x1a64 <updateScreen+0x5d2>
    19aa:	28 89       	ldd	r18, Y+16	; 0x10
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	2f 5f       	subi	r18, 0xFF	; 255
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	42 e0       	ldi	r20, 0x02	; 2
    19b4:	6e e0       	ldi	r22, 0x0E	; 14
    19b6:	68 01       	movw	r12, r16
    19b8:	94 eb       	ldi	r25, 0xB4	; 180
    19ba:	c9 1a       	sub	r12, r25
    19bc:	9d ef       	ldi	r25, 0xFD	; 253
			outputS(menuScreen->screen3[1],1);
    19be:	d9 0a       	sbc	r13, r25
    19c0:	c6 01       	movw	r24, r12
    19c2:	89 d4       	rcall	.+2322   	; 0x22d6 <numPrinter>
    19c4:	61 e0       	ldi	r22, 0x01	; 1
    19c6:	70 e0       	ldi	r23, 0x00	; 0
			break;
    19c8:	c6 01       	movw	r24, r12

			case GlobalMenuArrow2:
			menuScreen->screen3[1][19]= ' ';
    19ca:	6d d4       	rcall	.+2266   	; 0x22a6 <outputS>
    19cc:	4b c0       	rjmp	.+150    	; 0x1a64 <updateScreen+0x5d2>
    19ce:	80 e2       	ldi	r24, 0x20	; 32
    19d0:	f8 01       	movw	r30, r16
			menuScreen->screen3[2][19] = 8;
    19d2:	e1 5a       	subi	r30, 0xA1	; 161
    19d4:	fd 4f       	sbci	r31, 0xFD	; 253
    19d6:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    19d8:	98 e0       	ldi	r25, 0x08	; 8
			outputS(menuScreen->screen3[1], 1);
    19da:	75 96       	adiw	r30, 0x15	; 21
    19dc:	90 83       	st	Z, r25
    19de:	75 96       	adiw	r30, 0x15	; 21
    19e0:	80 83       	st	Z, r24
    19e2:	61 e0       	ldi	r22, 0x01	; 1
    19e4:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[2], 2);
    19e6:	c8 01       	movw	r24, r16
    19e8:	84 5b       	subi	r24, 0xB4	; 180
    19ea:	9d 4f       	sbci	r25, 0xFD	; 253
    19ec:	5c d4       	rcall	.+2232   	; 0x22a6 <outputS>
    19ee:	62 e0       	ldi	r22, 0x02	; 2
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    19f4:	8f 59       	subi	r24, 0x9F	; 159
    19f6:	9d 4f       	sbci	r25, 0xFD	; 253
    19f8:	56 d4       	rcall	.+2220   	; 0x22a6 <outputS>
    19fa:	63 e0       	ldi	r22, 0x03	; 3
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	c8 01       	movw	r24, r16
    1a00:	8a 58       	subi	r24, 0x8A	; 138
			break;
    1a02:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow2Select:
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1a04:	50 d4       	rcall	.+2208   	; 0x22a6 <outputS>
    1a06:	2e c0       	rjmp	.+92     	; 0x1a64 <updateScreen+0x5d2>
    1a08:	89 85       	ldd	r24, Y+9	; 0x09
    1a0a:	fa 01       	movw	r30, r20
    1a0c:	e8 0f       	add	r30, r24
    1a0e:	f1 1d       	adc	r31, r1
    1a10:	41 89       	ldd	r20, Z+17	; 0x11
    1a12:	6e e0       	ldi	r22, 0x0E	; 14
    1a14:	68 01       	movw	r12, r16
    1a16:	af e9       	ldi	r26, 0x9F	; 159
    1a18:	ca 1a       	sub	r12, r26
    1a1a:	ad ef       	ldi	r26, 0xFD	; 253
    1a1c:	da 0a       	sbc	r13, r26
    1a1e:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen3[2],2);
    1a20:	20 d6       	rcall	.+3136   	; 0x2662 <midiNotePrinter>
    1a22:	62 e0       	ldi	r22, 0x02	; 2
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	c6 01       	movw	r24, r12
    1a28:	3e d4       	rcall	.+2172   	; 0x22a6 <outputS>
			break;
    1a2a:	1c c0       	rjmp	.+56     	; 0x1a64 <updateScreen+0x5d2>

			case GlobalMenuArrow3:
			menuScreen->screen3[1][19]= ' ';
    1a2c:	80 e2       	ldi	r24, 0x20	; 32
    1a2e:	f8 01       	movw	r30, r16
    1a30:	e1 5a       	subi	r30, 0xA1	; 161
    1a32:	fd 4f       	sbci	r31, 0xFD	; 253
			menuScreen->screen3[2][19] = ' ';
    1a34:	80 83       	st	Z, r24
    1a36:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen3[3][19] = 8;
    1a38:	80 83       	st	Z, r24
    1a3a:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen3[1], 1);
    1a3c:	75 96       	adiw	r30, 0x15	; 21
    1a3e:	80 83       	st	Z, r24
    1a40:	61 e0       	ldi	r22, 0x01	; 1
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	c8 01       	movw	r24, r16
    1a46:	84 5b       	subi	r24, 0xB4	; 180
    1a48:	9d 4f       	sbci	r25, 0xFD	; 253
			outputS(menuScreen->screen3[2], 2);
    1a4a:	2d d4       	rcall	.+2138   	; 0x22a6 <outputS>
    1a4c:	62 e0       	ldi	r22, 0x02	; 2
    1a4e:	70 e0       	ldi	r23, 0x00	; 0
    1a50:	c8 01       	movw	r24, r16
    1a52:	8f 59       	subi	r24, 0x9F	; 159
    1a54:	9d 4f       	sbci	r25, 0xFD	; 253
    1a56:	27 d4       	rcall	.+2126   	; 0x22a6 <outputS>
			outputS(menuScreen->screen3[3], 3);
    1a58:	63 e0       	ldi	r22, 0x03	; 3
    1a5a:	70 e0       	ldi	r23, 0x00	; 0
    1a5c:	c8 01       	movw	r24, r16
    1a5e:	8a 58       	subi	r24, 0x8A	; 138
    1a60:	9d 4f       	sbci	r25, 0xFD	; 253
    1a62:	21 d4       	rcall	.+2114   	; 0x22a6 <outputS>
    1a64:	8a 85       	ldd	r24, Y+10	; 0x0a
			break;
		}
		prevMenuState = currentGlobals->menuState;
    1a66:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <prevMenuState>
    1a6a:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
	//We should only reach this in track selection and global settings for setting midi notes. 
	if(currentGlobals->valueChangeFlag&(1<<triggerChange))
    1a6c:	81 ff       	sbrs	r24, 1
    1a6e:	19 c1       	rjmp	.+562    	; 0x1ca2 <updateScreen+0x810>
    1a70:	1e 86       	std	Y+14, r1	; 0x0e
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0<<triggerChange); //this is wrong. Will erase all of valueChange Flag. 
    1a72:	8a 85       	ldd	r24, Y+10	; 0x0a
		switch((currentGlobals->menuState)>>4) //we don't need to worry about what the bottom encoder is doing.  
    1a74:	82 95       	swap	r24
    1a76:	8f 70       	andi	r24, 0x0F	; 15
    1a78:	82 30       	cpi	r24, 0x02	; 2
    1a7a:	21 f0       	breq	.+8      	; 0x1a84 <updateScreen+0x5f2>
    1a7c:	83 30       	cpi	r24, 0x03	; 3
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <updateScreen+0x5f0>
    1a80:	f7 c0       	rjmp	.+494    	; 0x1c70 <updateScreen+0x7de>
    1a82:	0f c1       	rjmp	.+542    	; 0x1ca2 <updateScreen+0x810>
    1a84:	29 85       	ldd	r18, Y+9	; 0x09
		{
			case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	c7 01       	movw	r24, r14
    1a8a:	82 0f       	add	r24, r18
    1a8c:	93 1f       	adc	r25, r19
    1a8e:	fc 01       	movw	r30, r24
    1a90:	e8 56       	subi	r30, 0x68	; 104
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	c0 80       	ld	r12, Z
    1a96:	d1 2c       	mov	r13, r1
    1a98:	dc 2c       	mov	r13, r12
    1a9a:	cc 24       	eor	r12, r12
    1a9c:	70 96       	adiw	r30, 0x10	; 16
    1a9e:	80 81       	ld	r24, Z
    1aa0:	c8 2a       	or	r12, r24
    1aa2:	2f 5f       	subi	r18, 0xFF	; 255
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack)+1);
    1aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa6:	42 e0       	ldi	r20, 0x02	; 2
    1aa8:	67 e0       	ldi	r22, 0x07	; 7
    1aaa:	58 01       	movw	r10, r16
    1aac:	b1 e7       	ldi	r27, 0x71	; 113
    1aae:	ab 1a       	sub	r10, r27
    1ab0:	be ef       	ldi	r27, 0xFE	; 254
    1ab2:	bb 0a       	sbc	r11, r27
    1ab4:	c5 01       	movw	r24, r10
    1ab6:	0f d4       	rcall	.+2078   	; 0x22d6 <numPrinter>
    1ab8:	96 01       	movw	r18, r12
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
    1aba:	44 e0       	ldi	r20, 0x04	; 4
    1abc:	6a e0       	ldi	r22, 0x0A	; 10
    1abe:	c5 01       	movw	r24, r10
    1ac0:	0a d4       	rcall	.+2068   	; 0x22d6 <numPrinter>
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	f7 01       	movw	r30, r14
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
					switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1ac6:	e8 0f       	add	r30, r24
    1ac8:	f1 1d       	adc	r31, r1
    1aca:	e8 57       	subi	r30, 0x78	; 120
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 81       	ld	r24, Z
    1ad0:	88 23       	and	r24, r24
    1ad2:	19 f0       	breq	.+6      	; 0x1ada <updateScreen+0x648>
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	79 f0       	breq	.+30     	; 0x1af6 <updateScreen+0x664>
    1ad8:	1c c0       	rjmp	.+56     	; 0x1b12 <updateScreen+0x680>
    1ada:	83 e5       	ldi	r24, 0x53	; 83
    1adc:	f8 01       	movw	r30, r16
					{
						case 0:
						menuScreen->screen2[2][10] = 'S';
    1ade:	e2 55       	subi	r30, 0x52	; 82
    1ae0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae2:	80 83       	st	Z, r24
    1ae4:	8f e6       	ldi	r24, 0x6F	; 111
    1ae6:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][11] = 'o';
    1ae8:	80 83       	st	Z, r24
    1aea:	9c e6       	ldi	r25, 0x6C	; 108
    1aec:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][12] = 'l';
    1aee:	90 83       	st	Z, r25
    1af0:	31 96       	adiw	r30, 0x01	; 1
    1af2:	80 83       	st	Z, r24
						menuScreen->screen2[2][13] = 'o';
    1af4:	0e c0       	rjmp	.+28     	; 0x1b12 <updateScreen+0x680>
    1af6:	80 e5       	ldi	r24, 0x50	; 80
						break;
    1af8:	f8 01       	movw	r30, r16

						case 1:
						menuScreen->screen2[2][10] = 'P';
    1afa:	e2 55       	subi	r30, 0x52	; 82
    1afc:	fe 4f       	sbci	r31, 0xFE	; 254
    1afe:	80 83       	st	Z, r24
    1b00:	8f e6       	ldi	r24, 0x6F	; 111
    1b02:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][11] = 'o';
    1b04:	80 83       	st	Z, r24
    1b06:	8c e6       	ldi	r24, 0x6C	; 108
    1b08:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][12] = 'l';
    1b0a:	80 83       	st	Z, r24
    1b0c:	89 e7       	ldi	r24, 0x79	; 121
    1b0e:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][13] = 'y';
    1b10:	80 83       	st	Z, r24
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	f7 01       	movw	r30, r14

						case 3:
						break;
					}
					
			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack]+1));
    1b16:	e8 0f       	add	r30, r24
    1b18:	f1 1d       	adc	r31, r1
    1b1a:	20 8d       	ldd	r18, Z+24	; 0x18
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	2f 5f       	subi	r18, 0xFF	; 255
    1b20:	3f 4f       	sbci	r19, 0xFF	; 255
    1b22:	42 e0       	ldi	r20, 0x02	; 2
    1b24:	6a e0       	ldi	r22, 0x0A	; 10
    1b26:	c8 01       	movw	r24, r16
    1b28:	87 54       	subi	r24, 0x47	; 71
    1b2a:	9e 4f       	sbci	r25, 0xFE	; 254
    1b2c:	d4 d3       	rcall	.+1960   	; 0x22d6 <numPrinter>
    1b2e:	89 85       	ldd	r24, Y+9	; 0x09
    1b30:	f7 01       	movw	r30, r14
    1b32:	e8 0f       	add	r30, r24
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1b34:	f1 1d       	adc	r31, r1
    1b36:	e5 51       	subi	r30, 0x15	; 21
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	80 81       	ld	r24, Z
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	a9 f0       	breq	.+42     	; 0x1b6a <updateScreen+0x6d8>
    1b40:	28 f0       	brcs	.+10     	; 0x1b4c <updateScreen+0x6ba>
    1b42:	82 30       	cpi	r24, 0x02	; 2
    1b44:	f9 f0       	breq	.+62     	; 0x1b84 <updateScreen+0x6f2>
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	51 f1       	breq	.+84     	; 0x1b9e <updateScreen+0x70c>
    1b4a:	37 c0       	rjmp	.+110    	; 0x1bba <updateScreen+0x728>
    1b4c:	81 e4       	ldi	r24, 0x41	; 65
    1b4e:	f8 01       	movw	r30, r16
    1b50:	e4 52       	subi	r30, 0x24	; 36
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1b52:	fe 4f       	sbci	r31, 0xFE	; 254
    1b54:	80 83       	st	Z, r24
    1b56:	8d e2       	ldi	r24, 0x2D	; 45
    1b58:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1b5a:	80 83       	st	Z, r24
    1b5c:	82 e5       	ldi	r24, 0x52	; 82
    1b5e:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1b60:	80 83       	st	Z, r24
    1b62:	80 e2       	ldi	r24, 0x20	; 32
    1b64:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1b66:	80 83       	st	Z, r24
    1b68:	28 c0       	rjmp	.+80     	; 0x1bba <updateScreen+0x728>
    1b6a:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1b6c:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1b6e:	e4 52       	subi	r30, 0x24	; 36
    1b70:	fe 4f       	sbci	r31, 0xFE	; 254
    1b72:	80 83       	st	Z, r24
    1b74:	80 e2       	ldi	r24, 0x20	; 32
    1b76:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    1b78:	80 83       	st	Z, r24
    1b7a:	31 96       	adiw	r30, 0x01	; 1
    1b7c:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1b7e:	31 96       	adiw	r30, 0x01	; 1
    1b80:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1b82:	1b c0       	rjmp	.+54     	; 0x1bba <updateScreen+0x728>
    1b84:	81 e4       	ldi	r24, 0x41	; 65
				break;
    1b86:	f8 01       	movw	r30, r16
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1b88:	e4 52       	subi	r30, 0x24	; 36
    1b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b8c:	80 83       	st	Z, r24
    1b8e:	80 e2       	ldi	r24, 0x20	; 32
    1b90:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    1b92:	80 83       	st	Z, r24
    1b94:	31 96       	adiw	r30, 0x01	; 1
    1b96:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1b98:	31 96       	adiw	r30, 0x01	; 1
    1b9a:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1b9c:	0e c0       	rjmp	.+28     	; 0x1bba <updateScreen+0x728>
    1b9e:	8e e4       	ldi	r24, 0x4E	; 78
				break;
    1ba0:	f8 01       	movw	r30, r16
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1ba2:	e4 52       	subi	r30, 0x24	; 36
    1ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba6:	80 83       	st	Z, r24
    1ba8:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][15] = 'o';
    1baa:	31 96       	adiw	r30, 0x01	; 1
    1bac:	80 83       	st	Z, r24
    1bae:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][16] = 'n';
    1bb0:	31 96       	adiw	r30, 0x01	; 1
    1bb2:	80 83       	st	Z, r24
    1bb4:	85 e6       	ldi	r24, 0x65	; 101
				menuScreen->screen2[4][17] = 'e';
    1bb6:	31 96       	adiw	r30, 0x01	; 1
    1bb8:	80 83       	st	Z, r24
    1bba:	89 85       	ldd	r24, Y+9	; 0x09
				break;
			}
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1bbc:	f7 01       	movw	r30, r14
    1bbe:	e8 0f       	add	r30, r24
    1bc0:	f1 1d       	adc	r31, r1
    1bc2:	e5 53       	subi	r30, 0x35	; 53
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
		numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1bc6:	20 81       	ld	r18, Z
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	32 2f       	mov	r19, r18
    1bcc:	22 27       	eor	r18, r18
				menuScreen->screen2[4][15] = 'o';
				menuScreen->screen2[4][16] = 'n';
				menuScreen->screen2[4][17] = 'e';
				break;
			}
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1bce:	70 96       	adiw	r30, 0x10	; 16
		numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1bd0:	80 81       	ld	r24, Z
    1bd2:	28 2b       	or	r18, r24
    1bd4:	45 e0       	ldi	r20, 0x05	; 5
    1bd6:	6d e0       	ldi	r22, 0x0D	; 13
    1bd8:	c8 01       	movw	r24, r16
    1bda:	8d 51       	subi	r24, 0x1D	; 29
    1bdc:	9e 4f       	sbci	r25, 0xFE	; 254
    1bde:	7b d3       	rcall	.+1782   	; 0x22d6 <numPrinter>
		menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
    1be0:	d8 01       	movw	r26, r16
    1be2:	a0 51       	subi	r26, 0x10	; 16
    1be4:	be 4f       	sbci	r27, 0xFE	; 254
    1be6:	8c 91       	ld	r24, X
    1be8:	f8 01       	movw	r30, r16
    1bea:	e1 51       	subi	r30, 0x11	; 17
    1bec:	fe 4f       	sbci	r31, 0xFE	; 254
    1bee:	80 83       	st	Z, r24
		menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
    1bf0:	32 96       	adiw	r30, 0x02	; 2
    1bf2:	80 81       	ld	r24, Z
    1bf4:	8c 93       	st	X, r24
		menuScreen->screen2[5][14] = '.';
    1bf6:	8e e2       	ldi	r24, 0x2E	; 46
    1bf8:	80 83       	st	Z, r24
    1bfa:	8a 85       	ldd	r24, Y+10	; 0x0a
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
			
			if(((currentGlobals->menuState)&selectBit)>35) //this accounts for menu stats 36,37,44, and 45
    1bfc:	87 7f       	andi	r24, 0xF7	; 247
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	24 32       	cpi	r18, 0x24	; 36
    1c04:	31 05       	cpc	r19, r1
			{
				triggerChangeScreen = ((currentGlobals->menuState)&selectBit) - 34; //mask to get rid of encoder B pushed state. 
    1c06:	14 f0       	brlt	.+4      	; 0x1c0c <updateScreen+0x77a>
		menuScreen->screen2[5][14] = '.';
			//the track settings screens should now be populated
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
    1c08:	82 52       	subi	r24, 0x22	; 34
			if(((currentGlobals->menuState)&selectBit)>35) //this accounts for menu stats 36,37,44, and 45
			{
				triggerChangeScreen = ((currentGlobals->menuState)&selectBit) - 34; //mask to get rid of encoder B pushed state. 
			}
			
			outputS(menuScreen->screen2[triggerChangeScreen], 1); 
    1c0a:	01 c0       	rjmp	.+2      	; 0x1c0e <updateScreen+0x77c>
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	c8 2e       	mov	r12, r24
    1c10:	d1 2c       	mov	r13, r1
    1c12:	0f 2e       	mov	r0, r31
    1c14:	f5 e1       	ldi	r31, 0x15	; 21
    1c16:	bf 2e       	mov	r11, r31
    1c18:	f0 2d       	mov	r31, r0
    1c1a:	bc 9c       	mul	r11, r12
    1c1c:	c0 01       	movw	r24, r0
    1c1e:	bd 9c       	mul	r11, r13
    1c20:	90 0d       	add	r25, r0
    1c22:	11 24       	eor	r1, r1
    1c24:	86 58       	subi	r24, 0x86	; 134
    1c26:	9e 4f       	sbci	r25, 0xFE	; 254
    1c28:	61 e0       	ldi	r22, 0x01	; 1
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	80 0f       	add	r24, r16
			outputS(menuScreen->screen2[triggerChangeScreen+1], 2); 
    1c2e:	91 1f       	adc	r25, r17
    1c30:	3a d3       	rcall	.+1652   	; 0x22a6 <outputS>
    1c32:	96 01       	movw	r18, r12
    1c34:	2f 5f       	subi	r18, 0xFF	; 255
    1c36:	3f 4f       	sbci	r19, 0xFF	; 255
    1c38:	b2 9e       	mul	r11, r18
    1c3a:	c0 01       	movw	r24, r0
    1c3c:	b3 9e       	mul	r11, r19
    1c3e:	90 0d       	add	r25, r0
    1c40:	11 24       	eor	r1, r1
    1c42:	86 58       	subi	r24, 0x86	; 134
    1c44:	9e 4f       	sbci	r25, 0xFE	; 254
    1c46:	62 e0       	ldi	r22, 0x02	; 2
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	80 0f       	add	r24, r16
    1c4c:	91 1f       	adc	r25, r17
			outputS(menuScreen->screen2[triggerChangeScreen+2], 3);
    1c4e:	2b d3       	rcall	.+1622   	; 0x22a6 <outputS>
    1c50:	f2 e0       	ldi	r31, 0x02	; 2
    1c52:	cf 0e       	add	r12, r31
    1c54:	d1 1c       	adc	r13, r1
    1c56:	bc 9c       	mul	r11, r12
    1c58:	c0 01       	movw	r24, r0
    1c5a:	bd 9c       	mul	r11, r13
    1c5c:	90 0d       	add	r25, r0
    1c5e:	11 24       	eor	r1, r1
    1c60:	86 58       	subi	r24, 0x86	; 134
    1c62:	9e 4f       	sbci	r25, 0xFE	; 254
    1c64:	63 e0       	ldi	r22, 0x03	; 3
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	80 0f       	add	r24, r16
    1c6a:	91 1f       	adc	r25, r17
    1c6c:	1c d3       	rcall	.+1592   	; 0x22a6 <outputS>
			
			break;
    1c6e:	19 c0       	rjmp	.+50     	; 0x1ca2 <updateScreen+0x810>
			
			case 3:;
			//do we need this variable?
			numPrinter(menuScreen->screen3[2],10,2,(currentGlobals->currentTrack)+1);
    1c70:	29 85       	ldd	r18, Y+9	; 0x09
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	2f 5f       	subi	r18, 0xFF	; 255
    1c76:	3f 4f       	sbci	r19, 0xFF	; 255
    1c78:	42 e0       	ldi	r20, 0x02	; 2
    1c7a:	6a e0       	ldi	r22, 0x0A	; 10
    1c7c:	68 01       	movw	r12, r16
    1c7e:	8f e9       	ldi	r24, 0x9F	; 159
    1c80:	c8 1a       	sub	r12, r24
    1c82:	8d ef       	ldi	r24, 0xFD	; 253
    1c84:	d8 0a       	sbc	r13, r24
    1c86:	c6 01       	movw	r24, r12
    1c88:	26 d3       	rcall	.+1612   	; 0x22d6 <numPrinter>
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1c8a:	89 85       	ldd	r24, Y+9	; 0x09
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	e8 0f       	add	r30, r24
    1c90:	f1 1d       	adc	r31, r1
    1c92:	41 89       	ldd	r20, Z+17	; 0x11
    1c94:	6e e0       	ldi	r22, 0x0E	; 14
    1c96:	c6 01       	movw	r24, r12
    1c98:	e4 d4       	rcall	.+2504   	; 0x2662 <midiNotePrinter>
    1c9a:	62 e0       	ldi	r22, 0x02	; 2
			outputS(menuScreen->screen3[2],2);
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
    1c9e:	c6 01       	movw	r24, r12
    1ca0:	02 d3       	rcall	.+1540   	; 0x22a6 <outputS>
    1ca2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ca4:	82 ff       	sbrs	r24, 2
			break;
			
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
    1ca6:	70 c1       	rjmp	.+736    	; 0x1f88 <updateScreen+0xaf6>
    1ca8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1caa:	98 2f       	mov	r25, r24
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
    1cac:	9f 70       	andi	r25, 0x0F	; 15
    1cae:	89 2e       	mov	r8, r25
    1cb0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cb2:	90 ff       	sbrs	r25, 0
		uint8_t positionSelectUpper = 0;
		if((currentGlobals->buttonSwitchFlag)&0x01)
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <updateScreen+0x828>
    1cb6:	28 e0       	ldi	r18, 0x08	; 8
    1cb8:	01 c0       	rjmp	.+2      	; 0x1cbc <updateScreen+0x82a>
		{
			positionSelectUpper = 8;
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	82 95       	swap	r24
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
		uint8_t positionSelectUpper = 0;
    1cbe:	8f 70       	andi	r24, 0x0F	; 15
		{
			positionSelectUpper = 8;
		}
		

		switch((currentGlobals->knobStatus)>>4)
    1cc0:	82 30       	cpi	r24, 0x02	; 2
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <updateScreen+0x834>
    1cc4:	94 c0       	rjmp	.+296    	; 0x1dee <updateScreen+0x95c>
    1cc6:	30 f4       	brcc	.+12     	; 0x1cd4 <updateScreen+0x842>
    1cc8:	88 23       	and	r24, r24
    1cca:	69 f0       	breq	.+26     	; 0x1ce6 <updateScreen+0x854>
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <updateScreen+0x840>
    1cd0:	58 c0       	rjmp	.+176    	; 0x1d82 <updateScreen+0x8f0>
    1cd2:	59 c1       	rjmp	.+690    	; 0x1f86 <updateScreen+0xaf4>
    1cd4:	84 30       	cpi	r24, 0x04	; 4
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <updateScreen+0x848>
    1cd8:	f6 c0       	rjmp	.+492    	; 0x1ec6 <updateScreen+0xa34>
    1cda:	08 f4       	brcc	.+2      	; 0x1cde <updateScreen+0x84c>
    1cdc:	be c0       	rjmp	.+380    	; 0x1e5a <updateScreen+0x9c8>
    1cde:	85 30       	cpi	r24, 0x05	; 5
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <updateScreen+0x852>
    1ce2:	3f c1       	rjmp	.+638    	; 0x1f62 <updateScreen+0xad0>
    1ce4:	50 c1       	rjmp	.+672    	; 0x1f86 <updateScreen+0xaf4>
    1ce6:	e8 2d       	mov	r30, r8
		{
			case 0: //output volume
			if((currentPattern->outputLevelMSB[positionSelect])==0)
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	d7 01       	movw	r26, r14
    1cec:	ae 0f       	add	r26, r30
    1cee:	bf 1f       	adc	r27, r31
    1cf0:	8c 91       	ld	r24, X
    1cf2:	81 11       	cpse	r24, r1
    1cf4:	10 c0       	rjmp	.+32     	; 0x1d16 <updateScreen+0x884>
    1cf6:	80 e2       	ldi	r24, 0x20	; 32
			{ //value is positive
				menuScreen->knobScreen[0][14] = ' ';
    1cf8:	d8 01       	movw	r26, r16
    1cfa:	ae 5f       	subi	r26, 0xFE	; 254
    1cfc:	bc 4f       	sbci	r27, 0xFC	; 252
    1cfe:	8c 93       	st	X, r24
    1d00:	ee 0d       	add	r30, r14
				numPrinter(menuScreen->knobScreen[0],15,2,currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
    1d02:	ff 1d       	adc	r31, r15
    1d04:	20 85       	ldd	r18, Z+8	; 0x08
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	42 e0       	ldi	r20, 0x02	; 2
    1d0a:	6f e0       	ldi	r22, 0x0F	; 15
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	8c 50       	subi	r24, 0x0C	; 12
    1d10:	9d 4f       	sbci	r25, 0xFD	; 253
    1d12:	e1 d2       	rcall	.+1474   	; 0x22d6 <numPrinter>
    1d14:	29 c0       	rjmp	.+82     	; 0x1d68 <updateScreen+0x8d6>
    1d16:	8d e2       	ldi	r24, 0x2D	; 45
    1d18:	d8 01       	movw	r26, r16
			}else
			{
				menuScreen->knobScreen[0][14] = '-';
    1d1a:	ae 5f       	subi	r26, 0xFE	; 254
    1d1c:	bc 4f       	sbci	r27, 0xFC	; 252
    1d1e:	8c 93       	st	X, r24
    1d20:	68 01       	movw	r12, r16
				menuScreen->knobScreen[0][15] = ((((currentPattern->outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    1d22:	a3 e0       	ldi	r26, 0x03	; 3
    1d24:	ca 0e       	add	r12, r26
    1d26:	da 1e       	adc	r13, r26
    1d28:	ee 0d       	add	r30, r14
    1d2a:	ff 1d       	adc	r31, r15
    1d2c:	80 85       	ldd	r24, Z+8	; 0x08
    1d2e:	80 95       	com	r24
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	01 96       	adiw	r24, 0x01	; 1
    1d34:	64 e6       	ldi	r22, 0x64	; 100
    1d36:	70 e0       	ldi	r23, 0x00	; 0
    1d38:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__divmodhi4>
    1d3c:	2a e0       	ldi	r18, 0x0A	; 10
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	b9 01       	movw	r22, r18
    1d42:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__divmodhi4>
    1d46:	60 5d       	subi	r22, 0xD0	; 208
    1d48:	d6 01       	movw	r26, r12
    1d4a:	6c 93       	st	X, r22
				menuScreen->knobScreen[0][16] = (((currentPattern->outputLevelLSB[positionSelect]^255)+1)%10)+48;
    1d4c:	78 01       	movw	r14, r16
    1d4e:	bc ef       	ldi	r27, 0xFC	; 252
    1d50:	eb 1a       	sub	r14, r27
    1d52:	fb 0a       	sbc	r15, r27
    1d54:	80 85       	ldd	r24, Z+8	; 0x08
    1d56:	80 95       	com	r24
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	01 96       	adiw	r24, 0x01	; 1
    1d5c:	b9 01       	movw	r22, r18
    1d5e:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__divmodhi4>
    1d62:	80 5d       	subi	r24, 0xD0	; 208
    1d64:	f7 01       	movw	r30, r14
			}
				
			menuScreen->knobScreen[0][10] = positionSelect + 49;
    1d66:	80 83       	st	Z, r24
    1d68:	f8 01       	movw	r30, r16
    1d6a:	e2 50       	subi	r30, 0x02	; 2
    1d6c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d6e:	81 e3       	ldi	r24, 0x31	; 49
    1d70:	88 0d       	add	r24, r8
			outputS(menuScreen->knobScreen[0], 3);
    1d72:	80 83       	st	Z, r24
    1d74:	63 e0       	ldi	r22, 0x03	; 3
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	c8 01       	movw	r24, r16
    1d7a:	8c 50       	subi	r24, 0x0C	; 12
    1d7c:	9d 4f       	sbci	r25, 0xFD	; 253
    1d7e:	93 d2       	rcall	.+1318   	; 0x22a6 <outputS>
			break;
    1d80:	02 c1       	rjmp	.+516    	; 0x1f86 <updateScreen+0xaf4>
				
			case 1: //pitch
			menuScreen->knobScreen[1][5] = positionSelect+49; 
    1d82:	f8 01       	movw	r30, r16
    1d84:	e2 5f       	subi	r30, 0xF2	; 242
    1d86:	fc 4f       	sbci	r31, 0xFC	; 252
    1d88:	81 e3       	ldi	r24, 0x31	; 49
    1d8a:	88 0d       	add	r24, r8
			if(currentPattern->outputPitch[positionSelect]>>7)
    1d8c:	80 83       	st	Z, r24
    1d8e:	91 2c       	mov	r9, r1
    1d90:	f7 01       	movw	r30, r14
    1d92:	e8 0d       	add	r30, r8
    1d94:	f9 1d       	adc	r31, r9
    1d96:	80 89       	ldd	r24, Z+16	; 0x10
    1d98:	88 23       	and	r24, r24
			{
				menuScreen->knobScreen[1][7] = '-';
    1d9a:	94 f4       	brge	.+36     	; 0x1dc0 <updateScreen+0x92e>
    1d9c:	8d e2       	ldi	r24, 0x2D	; 45
    1d9e:	f8 01       	movw	r30, r16
    1da0:	e0 5f       	subi	r30, 0xF0	; 240
    1da2:	fc 4f       	sbci	r31, 0xFC	; 252
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect])^255);
    1da4:	80 83       	st	Z, r24
    1da6:	f7 01       	movw	r30, r14
    1da8:	e8 0d       	add	r30, r8
    1daa:	f9 1d       	adc	r31, r9
    1dac:	20 89       	ldd	r18, Z+16	; 0x10
    1dae:	20 95       	com	r18
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	43 e0       	ldi	r20, 0x03	; 3
    1db4:	68 e0       	ldi	r22, 0x08	; 8
    1db6:	c8 01       	movw	r24, r16
    1db8:	87 5f       	subi	r24, 0xF7	; 247
    1dba:	9c 4f       	sbci	r25, 0xFC	; 252
			}else
			{
				menuScreen->knobScreen[1][7] = '+';
    1dbc:	8c d2       	rcall	.+1304   	; 0x22d6 <numPrinter>
    1dbe:	10 c0       	rjmp	.+32     	; 0x1de0 <updateScreen+0x94e>
    1dc0:	8b e2       	ldi	r24, 0x2B	; 43
    1dc2:	f8 01       	movw	r30, r16
    1dc4:	e0 5f       	subi	r30, 0xF0	; 240
				numPrinter(menuScreen->knobScreen[1],8,3,currentPattern->outputPitch[positionSelect]);
    1dc6:	fc 4f       	sbci	r31, 0xFC	; 252
    1dc8:	80 83       	st	Z, r24
    1dca:	f7 01       	movw	r30, r14
    1dcc:	e8 0d       	add	r30, r8
    1dce:	f9 1d       	adc	r31, r9
    1dd0:	20 89       	ldd	r18, Z+16	; 0x10
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	43 e0       	ldi	r20, 0x03	; 3
    1dd6:	68 e0       	ldi	r22, 0x08	; 8
    1dd8:	c8 01       	movw	r24, r16
    1dda:	87 5f       	subi	r24, 0xF7	; 247
    1ddc:	9c 4f       	sbci	r25, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
    1dde:	7b d2       	rcall	.+1270   	; 0x22d6 <numPrinter>
    1de0:	63 e0       	ldi	r22, 0x03	; 3
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	c8 01       	movw	r24, r16
    1de6:	87 5f       	subi	r24, 0xF7	; 247
    1de8:	9c 4f       	sbci	r25, 0xFC	; 252
			break;
    1dea:	5d d2       	rcall	.+1210   	; 0x22a6 <outputS>
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    1dec:	cc c0       	rjmp	.+408    	; 0x1f86 <updateScreen+0xaf4>
    1dee:	91 2c       	mov	r9, r1
    1df0:	c2 2e       	mov	r12, r18
    1df2:	d1 2c       	mov	r13, r1
    1df4:	c4 01       	movw	r24, r8
    1df6:	8c 0d       	add	r24, r12
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    1df8:	9d 1d       	adc	r25, r13
    1dfa:	58 01       	movw	r10, r16
    1dfc:	f2 ee       	ldi	r31, 0xE2	; 226
    1dfe:	af 1a       	sub	r10, r31
    1e00:	fc ef       	ldi	r31, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    1e02:	bf 0a       	sbc	r11, r31
    1e04:	e8 0e       	add	r14, r24
    1e06:	f9 1e       	adc	r15, r25
    1e08:	f7 01       	movw	r30, r14
    1e0a:	e8 5b       	subi	r30, 0xB8	; 184
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	20 81       	ld	r18, Z
    1e10:	30 e0       	ldi	r19, 0x00	; 0
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    1e12:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    1e14:	22 27       	eor	r18, r18
    1e16:	70 96       	adiw	r30, 0x10	; 16
    1e18:	80 81       	ld	r24, Z
    1e1a:	28 2b       	or	r18, r24
    1e1c:	45 e0       	ldi	r20, 0x05	; 5
    1e1e:	6e e0       	ldi	r22, 0x0E	; 14
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
    1e20:	c5 01       	movw	r24, r10
    1e22:	59 d2       	rcall	.+1202   	; 0x22d6 <numPrinter>
    1e24:	f8 01       	movw	r30, r16
    1e26:	e5 5d       	subi	r30, 0xD5	; 213
    1e28:	fc 4f       	sbci	r31, 0xFC	; 252
    1e2a:	d8 01       	movw	r26, r16
    1e2c:	a4 5d       	subi	r26, 0xD4	; 212
    1e2e:	bc 4f       	sbci	r27, 0xFC	; 252
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
    1e30:	8c 91       	ld	r24, X
    1e32:	80 83       	st	Z, r24
    1e34:	32 96       	adiw	r30, 0x02	; 2
			menuScreen->knobScreen[2][15] = '.';	
    1e36:	80 81       	ld	r24, Z
    1e38:	8c 93       	st	X, r24
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
    1e3a:	8e e2       	ldi	r24, 0x2E	; 46
    1e3c:	80 83       	st	Z, r24
    1e3e:	94 01       	movw	r18, r8
    1e40:	2f 5f       	subi	r18, 0xFF	; 255
    1e42:	3f 4f       	sbci	r19, 0xFF	; 255
    1e44:	2c 0d       	add	r18, r12
    1e46:	3d 1d       	adc	r19, r13
    1e48:	42 e0       	ldi	r20, 0x02	; 2
    1e4a:	6a e0       	ldi	r22, 0x0A	; 10
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
    1e4c:	c5 01       	movw	r24, r10
    1e4e:	43 d2       	rcall	.+1158   	; 0x22d6 <numPrinter>
    1e50:	63 e0       	ldi	r22, 0x03	; 3
    1e52:	70 e0       	ldi	r23, 0x00	; 0
    1e54:	c5 01       	movw	r24, r10
			break;
    1e56:	27 d2       	rcall	.+1102   	; 0x22a6 <outputS>
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    1e58:	96 c0       	rjmp	.+300    	; 0x1f86 <updateScreen+0xaf4>
    1e5a:	91 2c       	mov	r9, r1
    1e5c:	c2 2e       	mov	r12, r18
    1e5e:	d1 2c       	mov	r13, r1
    1e60:	c4 01       	movw	r24, r8
    1e62:	8c 0d       	add	r24, r12
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    1e64:	9d 1d       	adc	r25, r13
    1e66:	58 01       	movw	r10, r16
    1e68:	2d ec       	ldi	r18, 0xCD	; 205
    1e6a:	a2 1a       	sub	r10, r18
    1e6c:	2c ef       	ldi	r18, 0xFC	; 252
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
			break;
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    1e6e:	b2 0a       	sbc	r11, r18
    1e70:	e8 0e       	add	r14, r24
    1e72:	f9 1e       	adc	r15, r25
    1e74:	f7 01       	movw	r30, r14
    1e76:	e8 59       	subi	r30, 0x98	; 152
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	20 81       	ld	r18, Z
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
			break;
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    1e80:	22 27       	eor	r18, r18
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    1e82:	70 96       	adiw	r30, 0x10	; 16
    1e84:	80 81       	ld	r24, Z
    1e86:	28 2b       	or	r18, r24
    1e88:	45 e0       	ldi	r20, 0x05	; 5
    1e8a:	6f e0       	ldi	r22, 0x0F	; 15
    1e8c:	c5 01       	movw	r24, r10
    1e8e:	23 d2       	rcall	.+1094   	; 0x22d6 <numPrinter>
			menuScreen->knobScreen[3][14] = menuScreen->knobScreen[3][15];
    1e90:	f8 01       	movw	r30, r16
    1e92:	ef 5b       	subi	r30, 0xBF	; 191
    1e94:	fc 4f       	sbci	r31, 0xFC	; 252
    1e96:	d8 01       	movw	r26, r16
    1e98:	ae 5b       	subi	r26, 0xBE	; 190
    1e9a:	bc 4f       	sbci	r27, 0xFC	; 252
    1e9c:	8c 91       	ld	r24, X
    1e9e:	80 83       	st	Z, r24
			menuScreen->knobScreen[3][15] = menuScreen->knobScreen[3][16];
    1ea0:	32 96       	adiw	r30, 0x02	; 2
    1ea2:	80 81       	ld	r24, Z
    1ea4:	8c 93       	st	X, r24
			menuScreen->knobScreen[3][16] = '.';
    1ea6:	8e e2       	ldi	r24, 0x2E	; 46
			numPrinter(menuScreen->knobScreen[3],11,2,(positionSelect+1+positionSelectUpper));
    1ea8:	80 83       	st	Z, r24
    1eaa:	94 01       	movw	r18, r8
    1eac:	2f 5f       	subi	r18, 0xFF	; 255
    1eae:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb0:	2c 0d       	add	r18, r12
    1eb2:	3d 1d       	adc	r19, r13
    1eb4:	42 e0       	ldi	r20, 0x02	; 2
    1eb6:	6b e0       	ldi	r22, 0x0B	; 11
    1eb8:	c5 01       	movw	r24, r10
			outputS(menuScreen->knobScreen[3], 3);
    1eba:	0d d2       	rcall	.+1050   	; 0x22d6 <numPrinter>
    1ebc:	63 e0       	ldi	r22, 0x03	; 3
    1ebe:	70 e0       	ldi	r23, 0x00	; 0
    1ec0:	c5 01       	movw	r24, r10
    1ec2:	f1 d1       	rcall	.+994    	; 0x22a6 <outputS>
			break;
				
			case 4: //track volume
			if(currentPattern->trackMainVolumeMSB[(positionSelect+positionSelectUpper)]==0)
    1ec4:	60 c0       	rjmp	.+192    	; 0x1f86 <updateScreen+0xaf4>
    1ec6:	c2 2e       	mov	r12, r18
    1ec8:	d1 2c       	mov	r13, r1
    1eca:	c8 0c       	add	r12, r8
    1ecc:	d1 1c       	adc	r13, r1
    1ece:	f7 01       	movw	r30, r14
    1ed0:	ec 0d       	add	r30, r12
    1ed2:	fd 1d       	adc	r31, r13
    1ed4:	80 a5       	ldd	r24, Z+40	; 0x28
			{
				menuScreen->knobScreen[4][15] = ' ';
    1ed6:	81 11       	cpse	r24, r1
    1ed8:	11 c0       	rjmp	.+34     	; 0x1efc <updateScreen+0xa6a>
    1eda:	80 e2       	ldi	r24, 0x20	; 32
    1edc:	f8 01       	movw	r30, r16
    1ede:	e9 5a       	subi	r30, 0xA9	; 169
 				numPrinter(menuScreen->knobScreen[4],16, 2, currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]);
    1ee0:	fc 4f       	sbci	r31, 0xFC	; 252
    1ee2:	80 83       	st	Z, r24
    1ee4:	f7 01       	movw	r30, r14
    1ee6:	ec 0d       	add	r30, r12
    1ee8:	fd 1d       	adc	r31, r13
    1eea:	20 ad       	ldd	r18, Z+56	; 0x38
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	42 e0       	ldi	r20, 0x02	; 2
    1ef0:	60 e1       	ldi	r22, 0x10	; 16
    1ef2:	c8 01       	movw	r24, r16
    1ef4:	88 5b       	subi	r24, 0xB8	; 184
    1ef6:	9c 4f       	sbci	r25, 0xFC	; 252
    1ef8:	ee d1       	rcall	.+988    	; 0x22d6 <numPrinter>
			}else
			{
				menuScreen->knobScreen[4][15] = '-';
    1efa:	25 c0       	rjmp	.+74     	; 0x1f46 <updateScreen+0xab4>
    1efc:	8d e2       	ldi	r24, 0x2D	; 45
    1efe:	f8 01       	movw	r30, r16
    1f00:	e9 5a       	subi	r30, 0xA9	; 169
    1f02:	fc 4f       	sbci	r31, 0xFC	; 252
				menuScreen->knobScreen[4][16] = ((((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    1f04:	80 83       	st	Z, r24
    1f06:	31 96       	adiw	r30, 0x01	; 1
    1f08:	ec 0c       	add	r14, r12
    1f0a:	fd 1c       	adc	r15, r13
    1f0c:	d7 01       	movw	r26, r14
    1f0e:	d8 96       	adiw	r26, 0x38	; 56
    1f10:	8c 91       	ld	r24, X
    1f12:	80 95       	com	r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	01 96       	adiw	r24, 0x01	; 1
    1f18:	64 e6       	ldi	r22, 0x64	; 100
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__divmodhi4>
    1f20:	2a e0       	ldi	r18, 0x0A	; 10
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	b9 01       	movw	r22, r18
    1f26:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__divmodhi4>
    1f2a:	60 5d       	subi	r22, 0xD0	; 208
				menuScreen->knobScreen[4][17] = (((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%10)+48;
    1f2c:	60 83       	st	Z, r22
    1f2e:	31 96       	adiw	r30, 0x01	; 1
    1f30:	d7 01       	movw	r26, r14
    1f32:	d8 96       	adiw	r26, 0x38	; 56
    1f34:	8c 91       	ld	r24, X
    1f36:	80 95       	com	r24
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	01 96       	adiw	r24, 0x01	; 1
    1f3c:	b9 01       	movw	r22, r18
    1f3e:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__divmodhi4>
    1f42:	80 5d       	subi	r24, 0xD0	; 208
			}
				 numPrinter(menuScreen->knobScreen[4],12,2,(positionSelect+positionSelectUpper+1));
    1f44:	80 83       	st	Z, r24
    1f46:	08 5b       	subi	r16, 0xB8	; 184
    1f48:	1c 4f       	sbci	r17, 0xFC	; 252
    1f4a:	96 01       	movw	r18, r12
    1f4c:	2f 5f       	subi	r18, 0xFF	; 255
    1f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f50:	42 e0       	ldi	r20, 0x02	; 2
    1f52:	6c e0       	ldi	r22, 0x0C	; 12
    1f54:	c8 01       	movw	r24, r16
    1f56:	bf d1       	rcall	.+894    	; 0x22d6 <numPrinter>
				 outputS(menuScreen->knobScreen[4], 3);
    1f58:	63 e0       	ldi	r22, 0x03	; 3
    1f5a:	70 e0       	ldi	r23, 0x00	; 0
    1f5c:	c8 01       	movw	r24, r16
    1f5e:	a3 d1       	rcall	.+838    	; 0x22a6 <outputS>
    1f60:	12 c0       	rjmp	.+36     	; 0x1f86 <updateScreen+0xaf4>
			break;
    1f62:	06 5d       	subi	r16, 0xD6	; 214
			
			case 5:
			numPrinter(menuScreen->screen0[2],5,3,currentPattern->patternBPM);
    1f64:	1f 4f       	sbci	r17, 0xFF	; 255
    1f66:	f7 01       	movw	r30, r14
    1f68:	e8 53       	subi	r30, 0x38	; 56
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	20 81       	ld	r18, Z
    1f6e:	31 81       	ldd	r19, Z+1	; 0x01
    1f70:	43 e0       	ldi	r20, 0x03	; 3
    1f72:	65 e0       	ldi	r22, 0x05	; 5
    1f74:	c8 01       	movw	r24, r16
    1f76:	af d1       	rcall	.+862    	; 0x22d6 <numPrinter>
    1f78:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f7a:	81 11       	cpse	r24, r1
			if(currentGlobals->menuState==PreformanceModeInit)
    1f7c:	04 c0       	rjmp	.+8      	; 0x1f86 <updateScreen+0xaf4>
    1f7e:	62 e0       	ldi	r22, 0x02	; 2
    1f80:	70 e0       	ldi	r23, 0x00	; 0
			{
				outputS(menuScreen->screen0[2],2);
    1f82:	c8 01       	movw	r24, r16
    1f84:	90 d1       	rcall	.+800    	; 0x22a6 <outputS>
    1f86:	1e 86       	std	Y+14, r1	; 0x0e
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
			}
			break;
		}
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<knobChange));			
    1f8c:	1f 91       	pop	r17
	}
    1f8e:	0f 91       	pop	r16
    1f90:	ff 90       	pop	r15
    1f92:	ef 90       	pop	r14
    1f94:	df 90       	pop	r13
    1f96:	cf 90       	pop	r12
    1f98:	bf 90       	pop	r11
    1f9a:	af 90       	pop	r10
    1f9c:	9f 90       	pop	r9
    1f9e:	8f 90       	pop	r8
    1fa0:	08 95       	ret

00001fa2 <__vector_54>:
    1fa2:	1f 92       	push	r1
    1fa4:	0f 92       	push	r0
    1fa6:	0f b6       	in	r0, 0x3f	; 63
}

void midiTransmit(uint8_t data)
{
  while (!(UCSR3A & (1 << UDRE3)));
  UDR3 = data;
    1fa8:	0f 92       	push	r0
    1faa:	11 24       	eor	r1, r1
    1fac:	0b b6       	in	r0, 0x3b	; 59
    1fae:	0f 92       	push	r0
    1fb0:	2f 93       	push	r18
    1fb2:	3f 93       	push	r19
    1fb4:	5f 93       	push	r21
    1fb6:	6f 93       	push	r22
    1fb8:	7f 93       	push	r23
    1fba:	8f 93       	push	r24
    1fbc:	9f 93       	push	r25
    1fbe:	af 93       	push	r26
    1fc0:	bf 93       	push	r27
    1fc2:	ef 93       	push	r30
    1fc4:	ff 93       	push	r31
    1fc6:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1fca:	82 2f       	mov	r24, r18
    1fcc:	82 95       	swap	r24
    1fce:	8f 70       	andi	r24, 0x0F	; 15
    1fd0:	88 50       	subi	r24, 0x08	; 8
    1fd2:	82 30       	cpi	r24, 0x02	; 2
    1fd4:	78 f4       	brcc	.+30     	; 0x1ff4 <__vector_54+0x52>
    1fd6:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <midiWriteIndex>
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	fc 01       	movw	r30, r24
    1fde:	ee 0f       	add	r30, r30
    1fe0:	ff 1f       	adc	r31, r31
    1fe2:	8e 0f       	add	r24, r30
    1fe4:	9f 1f       	adc	r25, r31
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	e9 59       	subi	r30, 0x99	; 153
    1fea:	f9 4f       	sbci	r31, 0xF9	; 249
    1fec:	20 83       	st	Z, r18
    1fee:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <midiWriteFlag>
    1ff2:	50 c0       	rjmp	.+160    	; 0x2094 <__vector_54+0xf2>
    1ff4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiWriteFlag>
    1ff8:	81 11       	cpse	r24, r1
    1ffa:	15 c0       	rjmp	.+42     	; 0x2026 <__vector_54+0x84>
    1ffc:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <midiWriteIndex>
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <midiWriteFlag>
    2006:	fc 01       	movw	r30, r24
    2008:	ee 0f       	add	r30, r30
    200a:	ff 1f       	adc	r31, r31
    200c:	e8 0f       	add	r30, r24
    200e:	f9 1f       	adc	r31, r25
    2010:	e9 59       	subi	r30, 0x99	; 153
    2012:	f9 4f       	sbci	r31, 0xF9	; 249
    2014:	e3 0f       	add	r30, r19
    2016:	f1 1d       	adc	r31, r1
    2018:	21 83       	std	Z+1, r18	; 0x01
    201a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiWriteFlag>
    201e:	8f 5f       	subi	r24, 0xFF	; 255
    2020:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <midiWriteFlag>
    2024:	37 c0       	rjmp	.+110    	; 0x2094 <__vector_54+0xf2>
    2026:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiWriteFlag>
    202a:	8f 3f       	cpi	r24, 0xFF	; 255
    202c:	99 f1       	breq	.+102    	; 0x2094 <__vector_54+0xf2>
    202e:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <midiWriteIndex>
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <midiWriteFlag>
    2038:	fc 01       	movw	r30, r24
    203a:	ee 0f       	add	r30, r30
    203c:	ff 1f       	adc	r31, r31
    203e:	e8 0f       	add	r30, r24
    2040:	f9 1f       	adc	r31, r25
    2042:	e9 59       	subi	r30, 0x99	; 153
    2044:	f9 4f       	sbci	r31, 0xF9	; 249
    2046:	e3 0f       	add	r30, r19
    2048:	f1 1d       	adc	r31, r1
    204a:	21 83       	std	Z+1, r18	; 0x01
    204c:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <midiWriteIndex>
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	fc 01       	movw	r30, r24
    2054:	ee 0f       	add	r30, r30
    2056:	ff 1f       	adc	r31, r31
    2058:	8e 0f       	add	r24, r30
    205a:	9f 1f       	adc	r25, r31
    205c:	fc 01       	movw	r30, r24
    205e:	e9 59       	subi	r30, 0x99	; 153
    2060:	f9 4f       	sbci	r31, 0xF9	; 249
    2062:	20 81       	ld	r18, Z
    2064:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <midiWriteIndex>
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	01 96       	adiw	r24, 0x01	; 1
    206c:	6a e0       	ldi	r22, 0x0A	; 10
    206e:	70 e0       	ldi	r23, 0x00	; 0
    2070:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__divmodhi4>
    2074:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <midiWriteIndex>
    2078:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <midiWriteIndex>
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	fc 01       	movw	r30, r24
    2080:	ee 0f       	add	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	8e 0f       	add	r24, r30
    2086:	9f 1f       	adc	r25, r31
    2088:	fc 01       	movw	r30, r24
    208a:	e9 59       	subi	r30, 0x99	; 153
    208c:	f9 4f       	sbci	r31, 0xF9	; 249
    208e:	20 83       	st	Z, r18
    2090:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <midiWriteFlag>
    2094:	ff 91       	pop	r31
    2096:	ef 91       	pop	r30
    2098:	bf 91       	pop	r27
    209a:	af 91       	pop	r26
    209c:	9f 91       	pop	r25
    209e:	8f 91       	pop	r24
    20a0:	7f 91       	pop	r23
    20a2:	6f 91       	pop	r22
    20a4:	5f 91       	pop	r21
    20a6:	3f 91       	pop	r19
    20a8:	2f 91       	pop	r18
    20aa:	0f 90       	pop	r0
    20ac:	0b be       	out	0x3b, r0	; 59
    20ae:	0f 90       	pop	r0
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	0f 90       	pop	r0
    20b4:	1f 90       	pop	r1
    20b6:	18 95       	reti

000020b8 <initMidi>:
    20b8:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    20bc:	8f e1       	ldi	r24, 0x1F	; 31
    20be:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    20c2:	e1 e3       	ldi	r30, 0x31	; 49
    20c4:	f1 e0       	ldi	r31, 0x01	; 1
    20c6:	80 81       	ld	r24, Z
    20c8:	88 69       	ori	r24, 0x98	; 152
    20ca:	80 83       	st	Z, r24
    20cc:	e2 e3       	ldi	r30, 0x32	; 50
    20ce:	f1 e0       	ldi	r31, 0x01	; 1
    20d0:	80 81       	ld	r24, Z
    20d2:	86 60       	ori	r24, 0x06	; 6
    20d4:	80 83       	st	Z, r24
    20d6:	08 95       	ret

000020d8 <midiRead>:
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
    20d8:	9f 92       	push	r9
    20da:	af 92       	push	r10
    20dc:	bf 92       	push	r11
    20de:	cf 92       	push	r12
    20e0:	df 92       	push	r13
    20e2:	ef 92       	push	r14
    20e4:	ff 92       	push	r15
    20e6:	0f 93       	push	r16
    20e8:	1f 93       	push	r17
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
  while (midiReadIndex != midiWriteIndex)
    20f2:	e0 91 ee 03 	lds	r30, 0x03EE	; 0x8003ee <midiReadIndex>
    20f6:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <midiWriteIndex>
    20fa:	e8 17       	cp	r30, r24
    20fc:	09 f4       	brne	.+2      	; 0x2100 <midiRead+0x28>
    20fe:	4d c0       	rjmp	.+154    	; 0x219a <midiRead+0xc2>
  {
    uint8_t midiMessageType = ((midiEventBuffer[midiReadIndex].statusByte)>>4);
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    2100:	7e 01       	movw	r14, r28
    2102:	86 e7       	ldi	r24, 0x76	; 118
    2104:	e8 1a       	sub	r14, r24
    2106:	8e ef       	ldi	r24, 0xFE	; 254
    2108:	f8 0a       	sbc	r15, r24
    {
        for (int i=0; i<16; i++)
        {
          if(midiEventBuffer[midiReadIndex].dataByte[0]==currentGlobals.midiTrackNote[i])
          { //we don't care about velocity, at least not yet.
			playTrack(&currentPattern,&currentGlobals, i); //this might be out of scope? need to test.
    210a:	ce 2c       	mov	r12, r14
    210c:	df 2c       	mov	r13, r15
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    210e:	0a e0       	ldi	r16, 0x0A	; 10
    2110:	10 e0       	ldi	r17, 0x00	; 0

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
  {
    uint8_t midiMessageType = ((midiEventBuffer[midiReadIndex].statusByte)>>4);
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	cf 01       	movw	r24, r30
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	e8 0f       	add	r30, r24
    211c:	f9 1f       	adc	r31, r25
    211e:	e9 59       	subi	r30, 0x99	; 153
    2120:	f9 4f       	sbci	r31, 0xF9	; 249
    2122:	80 81       	ld	r24, Z
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    2124:	22 81       	ldd	r18, Z+2	; 0x02
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    2126:	90 81       	ld	r25, Z
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    2128:	82 95       	swap	r24
    212a:	8f 70       	andi	r24, 0x0F	; 15
    212c:	89 30       	cpi	r24, 0x09	; 9
    212e:	39 f5       	brne	.+78     	; 0x217e <midiRead+0xa6>
    2130:	22 23       	and	r18, r18
    2132:	29 f1       	breq	.+74     	; 0x217e <midiRead+0xa6>
    2134:	9f 70       	andi	r25, 0x0F	; 15
    2136:	f7 01       	movw	r30, r14
    2138:	80 89       	ldd	r24, Z+16	; 0x10
    213a:	98 13       	cpse	r25, r24
    213c:	20 c0       	rjmp	.+64     	; 0x217e <midiRead+0xa6>
    213e:	57 01       	movw	r10, r14
    2140:	f1 e1       	ldi	r31, 0x11	; 17
    2142:	af 0e       	add	r10, r31
    2144:	b1 1c       	adc	r11, r1
    2146:	91 2c       	mov	r9, r1
    {
        for (int i=0; i<16; i++)
        {
          if(midiEventBuffer[midiReadIndex].dataByte[0]==currentGlobals.midiTrackNote[i])
    2148:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <midiReadIndex>
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	fc 01       	movw	r30, r24
    2150:	ee 0f       	add	r30, r30
    2152:	ff 1f       	adc	r31, r31
    2154:	8e 0f       	add	r24, r30
    2156:	9f 1f       	adc	r25, r31
    2158:	fc 01       	movw	r30, r24
    215a:	e9 59       	subi	r30, 0x99	; 153
    215c:	f9 4f       	sbci	r31, 0xF9	; 249
    215e:	91 81       	ldd	r25, Z+1	; 0x01
    2160:	f5 01       	movw	r30, r10
    2162:	81 91       	ld	r24, Z+
    2164:	5f 01       	movw	r10, r30
    2166:	98 13       	cpse	r25, r24
    2168:	06 c0       	rjmp	.+12     	; 0x2176 <midiRead+0x9e>
          { //we don't care about velocity, at least not yet.
			playTrack(&currentPattern,&currentGlobals, i); //this might be out of scope? need to test.
    216a:	49 2d       	mov	r20, r9
    216c:	6c 2d       	mov	r22, r12
    216e:	7d 2d       	mov	r23, r13
    2170:	ce 01       	movw	r24, r28
    2172:	0f 96       	adiw	r24, 0x0f	; 15
    2174:	8c d4       	rcall	.+2328   	; 0x2a8e <playTrack>
    2176:	93 94       	inc	r9
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    {
        for (int i=0; i<16; i++)
    2178:	f0 e1       	ldi	r31, 0x10	; 16
    217a:	9f 12       	cpse	r9, r31
    217c:	e5 cf       	rjmp	.-54     	; 0x2148 <midiRead+0x70>
          { //we don't care about velocity, at least not yet.
			playTrack(&currentPattern,&currentGlobals, i); //this might be out of scope? need to test.
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    217e:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <midiReadIndex>
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	01 96       	adiw	r24, 0x01	; 1
    2186:	b8 01       	movw	r22, r16
    2188:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__divmodhi4>
    218c:	e8 2f       	mov	r30, r24
    218e:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <midiReadIndex>
  UDR3 = data;
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
    2192:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <midiWriteIndex>
    2196:	8e 13       	cpse	r24, r30
    2198:	bc cf       	rjmp	.-136    	; 0x2112 <midiRead+0x3a>
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
  }
}
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	ff 90       	pop	r15
    21a4:	ef 90       	pop	r14
    21a6:	df 90       	pop	r13
    21a8:	cf 90       	pop	r12
    21aa:	bf 90       	pop	r11
    21ac:	af 90       	pop	r10
    21ae:	9f 90       	pop	r9
    21b0:	08 95       	ret

000021b2 <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    21b2:	e2 e0       	ldi	r30, 0x02	; 2
    21b4:	f1 e0       	ldi	r31, 0x01	; 1
    21b6:	80 81       	ld	r24, Z
    21b8:	80 62       	ori	r24, 0x20	; 32
    21ba:	80 83       	st	Z, r24
    21bc:	85 e0       	ldi	r24, 0x05	; 5
    21be:	8a 95       	dec	r24
    21c0:	f1 f7       	brne	.-4      	; 0x21be <enableCycle+0xc>
    21c2:	00 00       	nop
    21c4:	80 81       	ld	r24, Z
    21c6:	8f 7d       	andi	r24, 0xDF	; 223
    21c8:	80 83       	st	Z, r24
    21ca:	08 95       	ret

000021cc <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
    21cc:	e2 e0       	ldi	r30, 0x02	; 2
    21ce:	f1 e0       	ldi	r31, 0x01	; 1
    21d0:	90 81       	ld	r25, Z
    21d2:	9f 7b       	andi	r25, 0xBF	; 191
    21d4:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    21d6:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
    21d8:	ec cf       	rjmp	.-40     	; 0x21b2 <enableCycle>
    21da:	08 95       	ret

000021dc <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
    21dc:	e2 e0       	ldi	r30, 0x02	; 2
    21de:	f1 e0       	ldi	r31, 0x01	; 1
    21e0:	90 81       	ld	r25, Z
    21e2:	90 64       	ori	r25, 0x40	; 64
    21e4:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    21e6:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
    21e8:	e4 cf       	rjmp	.-56     	; 0x21b2 <enableCycle>
    21ea:	08 95       	ret

000021ec <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRH = 0x60; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
    21ec:	80 e6       	ldi	r24, 0x60	; 96
    21ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	DDRC =0xFF; //all pins on the LCD Data Bus.
    21f2:	8f ef       	ldi	r24, 0xFF	; 255
    21f4:	87 b9       	out	0x07, r24	; 7


	PORTH &= 0B10011111;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
    21f6:	e2 e0       	ldi	r30, 0x02	; 2
    21f8:	f1 e0       	ldi	r31, 0x01	; 1
    21fa:	80 81       	ld	r24, Z
    21fc:	8f 79       	andi	r24, 0x9F	; 159
    21fe:	80 83       	st	Z, r24

	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
    2200:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2202:	8f e1       	ldi	r24, 0x1F	; 31
    2204:	93 e0       	ldi	r25, 0x03	; 3
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <__stack+0x7>
    220a:	00 c0       	rjmp	.+0      	; 0x220c <__stack+0xd>
    220c:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose


	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    220e:	8a e2       	ldi	r24, 0x2A	; 42
    2210:	dd df       	rcall	.-70     	; 0x21cc <command>
	command(0x71);        // Function selection A:
    2212:	81 e7       	ldi	r24, 0x71	; 113
    2214:	db df       	rcall	.-74     	; 0x21cc <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
    2216:	8c e5       	ldi	r24, 0x5C	; 92
    2218:	e1 df       	rcall	.-62     	; 0x21dc <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    221a:	88 e2       	ldi	r24, 0x28	; 40
    221c:	d7 df       	rcall	.-82     	; 0x21cc <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
    221e:	88 e0       	ldi	r24, 0x08	; 8
    2220:	d5 df       	rcall	.-86     	; 0x21cc <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    2222:	8a e2       	ldi	r24, 0x2A	; 42
    2224:	d3 df       	rcall	.-90     	; 0x21cc <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    2226:	89 e7       	ldi	r24, 0x79	; 121
    2228:	d1 df       	rcall	.-94     	; 0x21cc <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
    222a:	85 ed       	ldi	r24, 0xD5	; 213
    222c:	cf df       	rcall	.-98     	; 0x21cc <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
    222e:	80 e7       	ldi	r24, 0x70	; 112
    2230:	cd df       	rcall	.-102    	; 0x21cc <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    2232:	88 e7       	ldi	r24, 0x78	; 120
    2234:	cb df       	rcall	.-106    	; 0x21cc <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
    2236:	89 e0       	ldi	r24, 0x09	; 9
    2238:	c9 df       	rcall	.-110    	; 0x21cc <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
    223a:	86 e0       	ldi	r24, 0x06	; 6
    223c:	c7 df       	rcall	.-114    	; 0x21cc <command>
	command(0x72);        // Function selection B:
    223e:	82 e7       	ldi	r24, 0x72	; 114
    2240:	c5 df       	rcall	.-118    	; 0x21cc <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
    2242:	8a e0       	ldi	r24, 0x0A	; 10
    2244:	cb df       	rcall	.-106    	; 0x21dc <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    2246:	89 e7       	ldi	r24, 0x79	; 121
    2248:	c1 df       	rcall	.-126    	; 0x21cc <command>
	command(0xDA);        // Set SEG pins hardware configuration:
    224a:	8a ed       	ldi	r24, 0xDA	; 218
    224c:	bf df       	rcall	.-130    	; 0x21cc <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
    224e:	80 e1       	ldi	r24, 0x10	; 16
    2250:	bd df       	rcall	.-134    	; 0x21cc <command>
	command(0xDC);        // Function selection C:
    2252:	8c ed       	ldi	r24, 0xDC	; 220
    2254:	bb df       	rcall	.-138    	; 0x21cc <command>
	command(0x00);        //  internal VSL, GPIO input disable
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	b9 df       	rcall	.-142    	; 0x21cc <command>
	command(0x81);        // Set contrast control:
    225a:	81 e8       	ldi	r24, 0x81	; 129
    225c:	b7 df       	rcall	.-146    	; 0x21cc <command>
    225e:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
    2260:	b5 df       	rcall	.-150    	; 0x21cc <command>
    2262:	89 ed       	ldi	r24, 0xD9	; 217
    2264:	b3 df       	rcall	.-154    	; 0x21cc <command>
	command(0xD9);        // Set phase length:
    2266:	81 ef       	ldi	r24, 0xF1	; 241
    2268:	b1 df       	rcall	.-158    	; 0x21cc <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
    226a:	8b ed       	ldi	r24, 0xDB	; 219
    226c:	af df       	rcall	.-162    	; 0x21cc <command>
    226e:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
    2270:	ad df       	rcall	.-166    	; 0x21cc <command>
    2272:	88 e7       	ldi	r24, 0x78	; 120
    2274:	ab df       	rcall	.-170    	; 0x21cc <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
    2276:	88 e2       	ldi	r24, 0x28	; 40
    2278:	a9 df       	rcall	.-174    	; 0x21cc <command>
    227a:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    227c:	a7 df       	rcall	.-178    	; 0x21cc <command>
    227e:	8f e3       	ldi	r24, 0x3F	; 63
    2280:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <__stack+0x83>
    2286:	00 c0       	rjmp	.+0      	; 0x2288 <__stack+0x89>
	command(0x01);        // Clear display
    2288:	00 00       	nop
    228a:	80 e8       	ldi	r24, 0x80	; 128
    228c:	9f df       	rcall	.-194    	; 0x21cc <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    228e:	8c e0       	ldi	r24, 0x0C	; 12
    2290:	9d df       	rcall	.-198    	; 0x21cc <command>
    2292:	9f ef       	ldi	r25, 0xFF	; 255
    2294:	24 e3       	ldi	r18, 0x34	; 52
    2296:	8c e0       	ldi	r24, 0x0C	; 12
    2298:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required

	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
    229a:	20 40       	sbci	r18, 0x00	; 0
    229c:	80 40       	sbci	r24, 0x00	; 0
    229e:	e1 f7       	brne	.-8      	; 0x2298 <__stack+0x99>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
    22a0:	00 c0       	rjmp	.+0      	; 0x22a2 <__stack+0xa3>
    22a2:	00 00       	nop
    22a4:	08 95       	ret

000022a6 <outputS>:
    22a6:	0f 93       	push	r16
    22a8:	1f 93       	push	r17
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
    22ae:	8c 01       	movw	r16, r24
    22b0:	fb 01       	movw	r30, r22
    22b2:	ff 27       	eor	r31, r31
    22b4:	ed 5f       	subi	r30, 0xFD	; 253
    22b6:	fd 4f       	sbci	r31, 0xFD	; 253
    22b8:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
    22ba:	88 df       	rcall	.-240    	; 0x21cc <command>
    22bc:	e8 01       	movw	r28, r16
    22be:	0c 5e       	subi	r16, 0xEC	; 236
    22c0:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
    22c2:	89 91       	ld	r24, Y+
    22c4:	8b df       	rcall	.-234    	; 0x21dc <data>
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
    22c6:	c0 17       	cp	r28, r16
    22c8:	d1 07       	cpc	r29, r17
    22ca:	d9 f7       	brne	.-10     	; 0x22c2 <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
    22cc:	df 91       	pop	r29
    22ce:	cf 91       	pop	r28
    22d0:	1f 91       	pop	r17
    22d2:	0f 91       	pop	r16
    22d4:	08 95       	ret

000022d6 <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
    22da:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch(numCharacters)
    22dc:	43 30       	cpi	r20, 0x03	; 3
    22de:	09 f4       	brne	.+2      	; 0x22e2 <numPrinter+0xc>
    22e0:	54 c0       	rjmp	.+168    	; 0x238a <numPrinter+0xb4>
    22e2:	28 f4       	brcc	.+10     	; 0x22ee <numPrinter+0x18>
    22e4:	41 30       	cpi	r20, 0x01	; 1
    22e6:	51 f0       	breq	.+20     	; 0x22fc <numPrinter+0x26>
    22e8:	42 30       	cpi	r20, 0x02	; 2
    22ea:	29 f1       	breq	.+74     	; 0x2336 <numPrinter+0x60>
    22ec:	b7 c1       	rjmp	.+878    	; 0x265c <numPrinter+0x386>
    22ee:	44 30       	cpi	r20, 0x04	; 4
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <numPrinter+0x1e>
    22f2:	95 c0       	rjmp	.+298    	; 0x241e <numPrinter+0x148>
    22f4:	45 30       	cpi	r20, 0x05	; 5
    22f6:	09 f4       	brne	.+2      	; 0x22fa <numPrinter+0x24>
    22f8:	0a c1       	rjmp	.+532    	; 0x250e <numPrinter+0x238>
    22fa:	b0 c1       	rjmp	.+864    	; 0x265c <numPrinter+0x386>
		case 0:
		break;

		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
    22fc:	ec 01       	movw	r28, r24
    22fe:	c6 0f       	add	r28, r22
    2300:	d1 1d       	adc	r29, r1
    2302:	ad ec       	ldi	r26, 0xCD	; 205
    2304:	bc ec       	ldi	r27, 0xCC	; 204
    2306:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    230a:	96 95       	lsr	r25
    230c:	87 95       	ror	r24
    230e:	96 95       	lsr	r25
    2310:	87 95       	ror	r24
    2312:	96 95       	lsr	r25
    2314:	87 95       	ror	r24
    2316:	9c 01       	movw	r18, r24
    2318:	22 0f       	add	r18, r18
    231a:	33 1f       	adc	r19, r19
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	82 0f       	add	r24, r18
    232a:	93 1f       	adc	r25, r19
    232c:	e8 1b       	sub	r30, r24
    232e:	f9 0b       	sbc	r31, r25
    2330:	e0 5d       	subi	r30, 0xD0	; 208
    2332:	e8 83       	st	Y, r30
		break;
    2334:	93 c1       	rjmp	.+806    	; 0x265c <numPrinter+0x386>

		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
    2336:	ec 01       	movw	r28, r24
    2338:	c6 0f       	add	r28, r22
    233a:	d1 1d       	adc	r29, r1
    233c:	ad ec       	ldi	r26, 0xCD	; 205
    233e:	bc ec       	ldi	r27, 0xCC	; 204
    2340:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    2344:	96 95       	lsr	r25
    2346:	87 95       	ror	r24
    2348:	96 95       	lsr	r25
    234a:	87 95       	ror	r24
    234c:	96 95       	lsr	r25
    234e:	87 95       	ror	r24
    2350:	9c 01       	movw	r18, r24
    2352:	22 0f       	add	r18, r18
    2354:	33 1f       	adc	r19, r19
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	82 0f       	add	r24, r18
    2364:	93 1f       	adc	r25, r19
    2366:	9f 01       	movw	r18, r30
    2368:	28 1b       	sub	r18, r24
    236a:	39 0b       	sbc	r19, r25
    236c:	c9 01       	movw	r24, r18
    236e:	80 5d       	subi	r24, 0xD0	; 208
    2370:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
    2372:	9f 01       	movw	r18, r30
    2374:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    2378:	96 95       	lsr	r25
    237a:	87 95       	ror	r24
    237c:	96 95       	lsr	r25
    237e:	87 95       	ror	r24
    2380:	96 95       	lsr	r25
    2382:	87 95       	ror	r24
    2384:	80 5d       	subi	r24, 0xD0	; 208
    2386:	88 83       	st	Y, r24
		break;
    2388:	69 c1       	rjmp	.+722    	; 0x265c <numPrinter+0x386>

		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
    238a:	ec 01       	movw	r28, r24
    238c:	c6 0f       	add	r28, r22
    238e:	d1 1d       	adc	r29, r1
    2390:	ad ec       	ldi	r26, 0xCD	; 205
    2392:	bc ec       	ldi	r27, 0xCC	; 204
    2394:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    2398:	96 95       	lsr	r25
    239a:	87 95       	ror	r24
    239c:	96 95       	lsr	r25
    239e:	87 95       	ror	r24
    23a0:	96 95       	lsr	r25
    23a2:	87 95       	ror	r24
    23a4:	9c 01       	movw	r18, r24
    23a6:	22 0f       	add	r18, r18
    23a8:	33 1f       	adc	r19, r19
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	88 0f       	add	r24, r24
    23b0:	99 1f       	adc	r25, r25
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	82 0f       	add	r24, r18
    23b8:	93 1f       	adc	r25, r19
    23ba:	9f 01       	movw	r18, r30
    23bc:	28 1b       	sub	r18, r24
    23be:	39 0b       	sbc	r19, r25
    23c0:	c9 01       	movw	r24, r18
    23c2:	80 5d       	subi	r24, 0xD0	; 208
    23c4:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = tensPlace;
    23c6:	af 01       	movw	r20, r30
    23c8:	56 95       	lsr	r21
    23ca:	47 95       	ror	r20
    23cc:	56 95       	lsr	r21
    23ce:	47 95       	ror	r20
    23d0:	9a 01       	movw	r18, r20
    23d2:	ab e7       	ldi	r26, 0x7B	; 123
    23d4:	b4 e1       	ldi	r27, 0x14	; 20
    23d6:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    23da:	96 95       	lsr	r25
    23dc:	87 95       	ror	r24
    23de:	64 e6       	ldi	r22, 0x64	; 100
    23e0:	68 9f       	mul	r22, r24
    23e2:	90 01       	movw	r18, r0
    23e4:	69 9f       	mul	r22, r25
    23e6:	30 0d       	add	r19, r0
    23e8:	11 24       	eor	r1, r1
    23ea:	cf 01       	movw	r24, r30
    23ec:	82 1b       	sub	r24, r18
    23ee:	93 0b       	sbc	r25, r19
    23f0:	9c 01       	movw	r18, r24
    23f2:	ad ec       	ldi	r26, 0xCD	; 205
    23f4:	bc ec       	ldi	r27, 0xCC	; 204
    23f6:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    23fa:	96 95       	lsr	r25
    23fc:	87 95       	ror	r24
    23fe:	96 95       	lsr	r25
    2400:	87 95       	ror	r24
    2402:	96 95       	lsr	r25
    2404:	87 95       	ror	r24
    2406:	80 5d       	subi	r24, 0xD0	; 208
    2408:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
    240a:	9a 01       	movw	r18, r20
    240c:	ab e7       	ldi	r26, 0x7B	; 123
    240e:	b4 e1       	ldi	r27, 0x14	; 20
    2410:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    2414:	96 95       	lsr	r25
    2416:	87 95       	ror	r24
    2418:	80 5d       	subi	r24, 0xD0	; 208
    241a:	88 83       	st	Y, r24
		break;
    241c:	1f c1       	rjmp	.+574    	; 0x265c <numPrinter+0x386>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
    241e:	ec 01       	movw	r28, r24
    2420:	c6 0f       	add	r28, r22
    2422:	d1 1d       	adc	r29, r1
    2424:	ad ec       	ldi	r26, 0xCD	; 205
    2426:	bc ec       	ldi	r27, 0xCC	; 204
    2428:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    242c:	96 95       	lsr	r25
    242e:	87 95       	ror	r24
    2430:	96 95       	lsr	r25
    2432:	87 95       	ror	r24
    2434:	96 95       	lsr	r25
    2436:	87 95       	ror	r24
    2438:	9c 01       	movw	r18, r24
    243a:	22 0f       	add	r18, r18
    243c:	33 1f       	adc	r19, r19
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	88 0f       	add	r24, r24
    2444:	99 1f       	adc	r25, r25
    2446:	88 0f       	add	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	82 0f       	add	r24, r18
    244c:	93 1f       	adc	r25, r19
    244e:	9f 01       	movw	r18, r30
    2450:	28 1b       	sub	r18, r24
    2452:	39 0b       	sbc	r19, r25
    2454:	c9 01       	movw	r24, r18
    2456:	80 5d       	subi	r24, 0xD0	; 208
    2458:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
    245a:	9f 01       	movw	r18, r30
    245c:	36 95       	lsr	r19
    245e:	27 95       	ror	r18
    2460:	36 95       	lsr	r19
    2462:	27 95       	ror	r18
    2464:	ab e7       	ldi	r26, 0x7B	; 123
    2466:	b4 e1       	ldi	r27, 0x14	; 20
    2468:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    246c:	96 95       	lsr	r25
    246e:	87 95       	ror	r24
    2470:	44 e6       	ldi	r20, 0x64	; 100
    2472:	48 9f       	mul	r20, r24
    2474:	90 01       	movw	r18, r0
    2476:	49 9f       	mul	r20, r25
    2478:	30 0d       	add	r19, r0
    247a:	11 24       	eor	r1, r1
    247c:	cf 01       	movw	r24, r30
    247e:	82 1b       	sub	r24, r18
    2480:	93 0b       	sbc	r25, r19
    2482:	9c 01       	movw	r18, r24
    2484:	ad ec       	ldi	r26, 0xCD	; 205
    2486:	bc ec       	ldi	r27, 0xCC	; 204
    2488:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    248c:	96 95       	lsr	r25
    248e:	87 95       	ror	r24
    2490:	96 95       	lsr	r25
    2492:	87 95       	ror	r24
    2494:	96 95       	lsr	r25
    2496:	87 95       	ror	r24
    2498:	80 5d       	subi	r24, 0xD0	; 208
    249a:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = hunderedsPlace;
    249c:	af 01       	movw	r20, r30
    249e:	56 95       	lsr	r21
    24a0:	47 95       	ror	r20
    24a2:	56 95       	lsr	r21
    24a4:	47 95       	ror	r20
    24a6:	56 95       	lsr	r21
    24a8:	47 95       	ror	r20
    24aa:	9a 01       	movw	r18, r20
    24ac:	a5 ec       	ldi	r26, 0xC5	; 197
    24ae:	b0 e2       	ldi	r27, 0x20	; 32
    24b0:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    24b4:	92 95       	swap	r25
    24b6:	82 95       	swap	r24
    24b8:	8f 70       	andi	r24, 0x0F	; 15
    24ba:	89 27       	eor	r24, r25
    24bc:	9f 70       	andi	r25, 0x0F	; 15
    24be:	89 27       	eor	r24, r25
    24c0:	68 ee       	ldi	r22, 0xE8	; 232
    24c2:	73 e0       	ldi	r23, 0x03	; 3
    24c4:	86 9f       	mul	r24, r22
    24c6:	90 01       	movw	r18, r0
    24c8:	87 9f       	mul	r24, r23
    24ca:	30 0d       	add	r19, r0
    24cc:	96 9f       	mul	r25, r22
    24ce:	30 0d       	add	r19, r0
    24d0:	11 24       	eor	r1, r1
    24d2:	cf 01       	movw	r24, r30
    24d4:	82 1b       	sub	r24, r18
    24d6:	93 0b       	sbc	r25, r19
    24d8:	9c 01       	movw	r18, r24
    24da:	36 95       	lsr	r19
    24dc:	27 95       	ror	r18
    24de:	36 95       	lsr	r19
    24e0:	27 95       	ror	r18
    24e2:	ab e7       	ldi	r26, 0x7B	; 123
    24e4:	b4 e1       	ldi	r27, 0x14	; 20
    24e6:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    24ea:	96 95       	lsr	r25
    24ec:	87 95       	ror	r24
    24ee:	80 5d       	subi	r24, 0xD0	; 208
    24f0:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
    24f2:	9a 01       	movw	r18, r20
    24f4:	a5 ec       	ldi	r26, 0xC5	; 197
    24f6:	b0 e2       	ldi	r27, 0x20	; 32
    24f8:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    24fc:	92 95       	swap	r25
    24fe:	82 95       	swap	r24
    2500:	8f 70       	andi	r24, 0x0F	; 15
    2502:	89 27       	eor	r24, r25
    2504:	9f 70       	andi	r25, 0x0F	; 15
    2506:	89 27       	eor	r24, r25
    2508:	80 5d       	subi	r24, 0xD0	; 208
    250a:	88 83       	st	Y, r24
		break;
    250c:	a7 c0       	rjmp	.+334    	; 0x265c <numPrinter+0x386>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
    250e:	ec 01       	movw	r28, r24
    2510:	c6 0f       	add	r28, r22
    2512:	d1 1d       	adc	r29, r1
    2514:	ad ec       	ldi	r26, 0xCD	; 205
    2516:	bc ec       	ldi	r27, 0xCC	; 204
    2518:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    251c:	96 95       	lsr	r25
    251e:	87 95       	ror	r24
    2520:	96 95       	lsr	r25
    2522:	87 95       	ror	r24
    2524:	96 95       	lsr	r25
    2526:	87 95       	ror	r24
    2528:	9c 01       	movw	r18, r24
    252a:	22 0f       	add	r18, r18
    252c:	33 1f       	adc	r19, r19
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	82 0f       	add	r24, r18
    253c:	93 1f       	adc	r25, r19
    253e:	9f 01       	movw	r18, r30
    2540:	28 1b       	sub	r18, r24
    2542:	39 0b       	sbc	r19, r25
    2544:	c9 01       	movw	r24, r18
    2546:	80 5d       	subi	r24, 0xD0	; 208
    2548:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
    254a:	9f 01       	movw	r18, r30
    254c:	36 95       	lsr	r19
    254e:	27 95       	ror	r18
    2550:	36 95       	lsr	r19
    2552:	27 95       	ror	r18
    2554:	ab e7       	ldi	r26, 0x7B	; 123
    2556:	b4 e1       	ldi	r27, 0x14	; 20
    2558:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    255c:	96 95       	lsr	r25
    255e:	87 95       	ror	r24
    2560:	44 e6       	ldi	r20, 0x64	; 100
    2562:	48 9f       	mul	r20, r24
    2564:	90 01       	movw	r18, r0
    2566:	49 9f       	mul	r20, r25
    2568:	30 0d       	add	r19, r0
    256a:	11 24       	eor	r1, r1
    256c:	cf 01       	movw	r24, r30
    256e:	82 1b       	sub	r24, r18
    2570:	93 0b       	sbc	r25, r19
    2572:	9c 01       	movw	r18, r24
    2574:	ad ec       	ldi	r26, 0xCD	; 205
    2576:	bc ec       	ldi	r27, 0xCC	; 204
    2578:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    257c:	96 95       	lsr	r25
    257e:	87 95       	ror	r24
    2580:	96 95       	lsr	r25
    2582:	87 95       	ror	r24
    2584:	96 95       	lsr	r25
    2586:	87 95       	ror	r24
    2588:	80 5d       	subi	r24, 0xD0	; 208
    258a:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
    258c:	9f 01       	movw	r18, r30
    258e:	36 95       	lsr	r19
    2590:	27 95       	ror	r18
    2592:	36 95       	lsr	r19
    2594:	27 95       	ror	r18
    2596:	36 95       	lsr	r19
    2598:	27 95       	ror	r18
    259a:	a5 ec       	ldi	r26, 0xC5	; 197
    259c:	b0 e2       	ldi	r27, 0x20	; 32
    259e:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    25a2:	92 95       	swap	r25
    25a4:	82 95       	swap	r24
    25a6:	8f 70       	andi	r24, 0x0F	; 15
    25a8:	89 27       	eor	r24, r25
    25aa:	9f 70       	andi	r25, 0x0F	; 15
    25ac:	89 27       	eor	r24, r25
    25ae:	48 ee       	ldi	r20, 0xE8	; 232
    25b0:	53 e0       	ldi	r21, 0x03	; 3
    25b2:	84 9f       	mul	r24, r20
    25b4:	90 01       	movw	r18, r0
    25b6:	85 9f       	mul	r24, r21
    25b8:	30 0d       	add	r19, r0
    25ba:	94 9f       	mul	r25, r20
    25bc:	30 0d       	add	r19, r0
    25be:	11 24       	eor	r1, r1
    25c0:	cf 01       	movw	r24, r30
    25c2:	82 1b       	sub	r24, r18
    25c4:	93 0b       	sbc	r25, r19
    25c6:	9c 01       	movw	r18, r24
    25c8:	36 95       	lsr	r19
    25ca:	27 95       	ror	r18
    25cc:	36 95       	lsr	r19
    25ce:	27 95       	ror	r18
    25d0:	ab e7       	ldi	r26, 0x7B	; 123
    25d2:	b4 e1       	ldi	r27, 0x14	; 20
    25d4:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    25d8:	96 95       	lsr	r25
    25da:	87 95       	ror	r24
    25dc:	80 5d       	subi	r24, 0xD0	; 208
    25de:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
    25e0:	af 01       	movw	r20, r30
    25e2:	52 95       	swap	r21
    25e4:	42 95       	swap	r20
    25e6:	4f 70       	andi	r20, 0x0F	; 15
    25e8:	45 27       	eor	r20, r21
    25ea:	5f 70       	andi	r21, 0x0F	; 15
    25ec:	45 27       	eor	r20, r21
    25ee:	9a 01       	movw	r18, r20
    25f0:	a7 e4       	ldi	r26, 0x47	; 71
    25f2:	b3 e0       	ldi	r27, 0x03	; 3
    25f4:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    25f8:	96 95       	lsr	r25
    25fa:	87 95       	ror	r24
    25fc:	96 95       	lsr	r25
    25fe:	87 95       	ror	r24
    2600:	96 95       	lsr	r25
    2602:	87 95       	ror	r24
    2604:	60 e1       	ldi	r22, 0x10	; 16
    2606:	77 e2       	ldi	r23, 0x27	; 39
    2608:	86 9f       	mul	r24, r22
    260a:	90 01       	movw	r18, r0
    260c:	87 9f       	mul	r24, r23
    260e:	30 0d       	add	r19, r0
    2610:	96 9f       	mul	r25, r22
    2612:	30 0d       	add	r19, r0
    2614:	11 24       	eor	r1, r1
    2616:	cf 01       	movw	r24, r30
    2618:	82 1b       	sub	r24, r18
    261a:	93 0b       	sbc	r25, r19
    261c:	9c 01       	movw	r18, r24
    261e:	36 95       	lsr	r19
    2620:	27 95       	ror	r18
    2622:	36 95       	lsr	r19
    2624:	27 95       	ror	r18
    2626:	36 95       	lsr	r19
    2628:	27 95       	ror	r18
    262a:	a5 ec       	ldi	r26, 0xC5	; 197
    262c:	b0 e2       	ldi	r27, 0x20	; 32
    262e:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    2632:	92 95       	swap	r25
    2634:	82 95       	swap	r24
    2636:	8f 70       	andi	r24, 0x0F	; 15
    2638:	89 27       	eor	r24, r25
    263a:	9f 70       	andi	r25, 0x0F	; 15
    263c:	89 27       	eor	r24, r25
    263e:	80 5d       	subi	r24, 0xD0	; 208
    2640:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
    2642:	9a 01       	movw	r18, r20
    2644:	a7 e4       	ldi	r26, 0x47	; 71
    2646:	b3 e0       	ldi	r27, 0x03	; 3
    2648:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__umulhisi3>
    264c:	96 95       	lsr	r25
    264e:	87 95       	ror	r24
    2650:	96 95       	lsr	r25
    2652:	87 95       	ror	r24
    2654:	96 95       	lsr	r25
    2656:	87 95       	ror	r24
    2658:	80 5d       	subi	r24, 0xD0	; 208
    265a:	88 83       	st	Y, r24
		break;

	}


}
    265c:	df 91       	pop	r29
    265e:	cf 91       	pop	r28
    2660:	08 95       	ret

00002662 <midiNotePrinter>:

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
    2662:	9c 01       	movw	r18, r24
    2664:	a6 2f       	mov	r26, r22
	char printSharp = 0;
	uint8_t valueSwitch = 0;
	//numbers will always go from B to C, and have 12 distinct values. 
	//we can get our number from this with division. 
	//midi note C0 starts at 12. So, we'll need to do some math there. 
	printNumber = (noteNumber/12)+47; 
    2666:	eb ea       	ldi	r30, 0xAB	; 171
    2668:	4e 9f       	mul	r20, r30
    266a:	e1 2d       	mov	r30, r1
    266c:	11 24       	eor	r1, r1
    266e:	e6 95       	lsr	r30
    2670:	e6 95       	lsr	r30
    2672:	e6 95       	lsr	r30
    2674:	9f e2       	ldi	r25, 0x2F	; 47
    2676:	9e 0f       	add	r25, r30
	
	//theres a weird wrap around with note numbers here. Since there isn't really an easy math patern we can take advantage of. 
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
    2678:	8e 2f       	mov	r24, r30
    267a:	88 0f       	add	r24, r24
    267c:	e8 0f       	add	r30, r24
    267e:	ee 0f       	add	r30, r30
    2680:	ee 0f       	add	r30, r30
    2682:	4e 1b       	sub	r20, r30
    2684:	50 e0       	ldi	r21, 0x00	; 0
    2686:	4c 30       	cpi	r20, 0x0C	; 12
    2688:	51 05       	cpc	r21, r1
    268a:	58 f5       	brcc	.+86     	; 0x26e2 <midiNotePrinter+0x80>
    268c:	fa 01       	movw	r30, r20
    268e:	88 27       	eor	r24, r24
    2690:	e8 51       	subi	r30, 0x18	; 24
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	8f 4f       	sbci	r24, 0xFF	; 255
    2696:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__tablejump2__>
	{
		
		case 0:
		printLetter = 'C';
		printSharp = ' ';
    269a:	80 e2       	ldi	r24, 0x20	; 32
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
	{
		
		case 0:
		printLetter = 'C';
    269c:	43 e4       	ldi	r20, 0x43	; 67
    269e:	23 c0       	rjmp	.+70     	; 0x26e6 <midiNotePrinter+0x84>
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
		printSharp = '#';
    26a0:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'C';
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
    26a2:	43 e4       	ldi	r20, 0x43	; 67
		printSharp = '#';
		break;
    26a4:	20 c0       	rjmp	.+64     	; 0x26e6 <midiNotePrinter+0x84>
		
		case 2:
		printLetter = 'D';
		printSharp = ' ';
    26a6:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'C';
		printSharp = '#';
		break;
		
		case 2:
		printLetter = 'D';
    26a8:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = ' ';
		break;
    26aa:	1d c0       	rjmp	.+58     	; 0x26e6 <midiNotePrinter+0x84>
		
		case 3:
		printLetter = 'D';
		printSharp = '#';
    26ac:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'D';
		printSharp = ' ';
		break;
		
		case 3:
		printLetter = 'D';
    26ae:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = '#';
		break;
    26b0:	1a c0       	rjmp	.+52     	; 0x26e6 <midiNotePrinter+0x84>
		
		case 4:
		printLetter = 'E';
		printSharp = ' ';
    26b2:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'D';
		printSharp = '#';
		break;
		
		case 4:
		printLetter = 'E';
    26b4:	45 e4       	ldi	r20, 0x45	; 69
		printSharp = ' ';
		break;
    26b6:	17 c0       	rjmp	.+46     	; 0x26e6 <midiNotePrinter+0x84>
		
		case 5:
		printLetter = 'F';
		printSharp = ' ';
    26b8:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'E';
		printSharp = ' ';
		break;
		
		case 5:
		printLetter = 'F';
    26ba:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = ' ';
		break;
    26bc:	14 c0       	rjmp	.+40     	; 0x26e6 <midiNotePrinter+0x84>
		
		case 6:
		printLetter = 'F';
		printSharp = '#';
    26be:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'F';
		printSharp = ' ';
		break;
		
		case 6:
		printLetter = 'F';
    26c0:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = '#';
		break;
    26c2:	11 c0       	rjmp	.+34     	; 0x26e6 <midiNotePrinter+0x84>
		
		case 7:
		printLetter = 'G';
		printSharp = ' ';
    26c4:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'F';
		printSharp = '#';
		break;
		
		case 7:
		printLetter = 'G';
    26c6:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = ' ';
		break;
    26c8:	0e c0       	rjmp	.+28     	; 0x26e6 <midiNotePrinter+0x84>
		
		case 8:
		printLetter = 'G';
		printSharp = '#';
    26ca:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'G';
		printSharp = ' ';
		break;
		
		case 8:
		printLetter = 'G';
    26cc:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = '#';
		break;
    26ce:	0b c0       	rjmp	.+22     	; 0x26e6 <midiNotePrinter+0x84>
		
		case 9:
		printLetter = 'A';
		printSharp = ' ';
    26d0:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'G';
		printSharp = '#';
		break;
		
		case 9:
		printLetter = 'A';
    26d2:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = ' ';
		break;
    26d4:	08 c0       	rjmp	.+16     	; 0x26e6 <midiNotePrinter+0x84>
		
		case 10:
		printLetter = 'A';
		printSharp = '#';
    26d6:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'A';
		printSharp = ' ';
		break;
		
		case 10:
		printLetter = 'A';
    26d8:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = '#';
		break;
    26da:	05 c0       	rjmp	.+10     	; 0x26e6 <midiNotePrinter+0x84>
		
		case 11:
		printLetter = 'B';
		printSharp = ' ';
    26dc:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'A';
		printSharp = '#';
		break;
		
		case 11:
		printLetter = 'B';
    26de:	42 e4       	ldi	r20, 0x42	; 66
		printSharp = ' ';
		break;
    26e0:	02 c0       	rjmp	.+4      	; 0x26e6 <midiNotePrinter+0x84>
void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
	char printNumber = 0;
	char printSharp = 0;
    26e2:	80 e0       	ldi	r24, 0x00	; 0
}

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
    26e4:	40 e0       	ldi	r20, 0x00	; 0
		printLetter = 'B';
		printSharp = ' ';
		break;
		
	}
	charArray[startingPosition] = printLetter;
    26e6:	f9 01       	movw	r30, r18
    26e8:	ea 0f       	add	r30, r26
    26ea:	f1 1d       	adc	r31, r1
    26ec:	40 83       	st	Z, r20
	charArray[startingPosition+1]= printSharp;
    26ee:	81 83       	std	Z+1, r24	; 0x01
	charArray[startingPosition+2]= printNumber;
    26f0:	92 83       	std	Z+2, r25	; 0x02
    26f2:	08 95       	ret

000026f4 <updateSequencer>:
//	clockCounter++;
	//we don't want to do anything else here.
//}

void updateSequencer(Pattern sequencerPattern, Globals *currentGlobals)
{
    26f4:	af 92       	push	r10
    26f6:	bf 92       	push	r11
    26f8:	cf 92       	push	r12
    26fa:	df 92       	push	r13
    26fc:	ef 92       	push	r14
    26fe:	ff 92       	push	r15
    2700:	0f 93       	push	r16
    2702:	1f 93       	push	r17
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	c7 57       	subi	r28, 0x77	; 119
    270e:	de 4f       	sbci	r29, 0xFE	; 254
    2710:	c8 80       	ld	r12, Y
    2712:	d9 80       	ldd	r13, Y+1	; 0x01
    2714:	c9 58       	subi	r28, 0x89	; 137
    2716:	d1 40       	sbci	r29, 0x01	; 1
	uint16_t BPMvar = 150000/(sequencerPattern.patternBPM);

	if(currentGlobals->clockCounter>=BPMvar && currentGlobals->playState) //if playstate is on, play next note in sequence.
    2718:	ca 52       	subi	r28, 0x2A	; 42
    271a:	df 4f       	sbci	r29, 0xFF	; 255
    271c:	28 81       	ld	r18, Y
    271e:	39 81       	ldd	r19, Y+1	; 0x01
    2720:	c6 5d       	subi	r28, 0xD6	; 214
    2722:	d0 40       	sbci	r29, 0x00	; 0
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	60 ef       	ldi	r22, 0xF0	; 240
    272a:	79 e4       	ldi	r23, 0x49	; 73
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__divmodsi4>
    2734:	f6 01       	movw	r30, r12
    2736:	e5 51       	subi	r30, 0x15	; 21
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	80 81       	ld	r24, Z
    273c:	91 81       	ldd	r25, Z+1	; 0x01
    273e:	82 17       	cp	r24, r18
    2740:	93 07       	cpc	r25, r19
    2742:	08 f4       	brcc	.+2      	; 0x2746 <updateSequencer+0x52>
    2744:	5a c0       	rjmp	.+180    	; 0x27fa <updateSequencer+0x106>
    2746:	f6 01       	movw	r30, r12
    2748:	83 85       	ldd	r24, Z+11	; 0x0b
    274a:	88 23       	and	r24, r24
    274c:	09 f4       	brne	.+2      	; 0x2750 <updateSequencer+0x5c>
    274e:	4b c0       	rjmp	.+150    	; 0x27e6 <updateSequencer+0xf2>
	{
		//this will be where we play samples
		currentGlobals->clockCounter = 0;
    2750:	e5 51       	subi	r30, 0x15	; 21
    2752:	ff 4f       	sbci	r31, 0xFF	; 255
    2754:	11 82       	std	Z+1, r1	; 0x01
    2756:	10 82       	st	Z, r1
		currentGlobals->currentTrigSequencer = 0; //we want to re-set this every time. 
    2758:	f6 01       	movw	r30, r12
    275a:	14 82       	std	Z+4, r1	; 0x04
    275c:	13 82       	std	Z+3, r1	; 0x03
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
    275e:	e0 91 f0 03 	lds	r30, 0x03F0	; 0x8003f0 <currentPlayStep>
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	ee 0f       	add	r30, r30
    2766:	ff 1f       	adc	r31, r31
    2768:	8e e0       	ldi	r24, 0x0E	; 14
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	8c 0f       	add	r24, r28
    276e:	9d 1f       	adc	r25, r29
    2770:	e8 0f       	add	r30, r24
    2772:	f9 1f       	adc	r31, r25
    2774:	e5 50       	subi	r30, 0x05	; 5
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	e0 80       	ld	r14, Z
    277a:	f1 80       	ldd	r15, Z+1	; 0x01
    277c:	00 e0       	ldi	r16, 0x00	; 0
    277e:	10 e0       	ldi	r17, 0x00	; 0
		{//we're going to loop through all of the possible tracks, and trigger them
			if((parseStep&1)==1)
			{
				//trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
				playTrack(&sequencerPattern, currentGlobals, sc);
				currentGlobals->currentTrigSequencer |= (1<<sc); //start to fill our lighting buffer. 
    2780:	aa 24       	eor	r10, r10
    2782:	a3 94       	inc	r10
    2784:	b1 2c       	mov	r11, r1
		currentGlobals->clockCounter = 0;
		currentGlobals->currentTrigSequencer = 0; //we want to re-set this every time. 
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
		{//we're going to loop through all of the possible tracks, and trigger them
			if((parseStep&1)==1)
    2786:	e0 fe       	sbrs	r14, 0
    2788:	13 c0       	rjmp	.+38     	; 0x27b0 <updateSequencer+0xbc>
			{
				//trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
				playTrack(&sequencerPattern, currentGlobals, sc);
    278a:	40 2f       	mov	r20, r16
    278c:	b6 01       	movw	r22, r12
    278e:	ce 01       	movw	r24, r28
    2790:	0e 96       	adiw	r24, 0x0e	; 14
    2792:	7d d1       	rcall	.+762    	; 0x2a8e <playTrack>
				currentGlobals->currentTrigSequencer |= (1<<sc); //start to fill our lighting buffer. 
    2794:	f6 01       	movw	r30, r12
    2796:	23 81       	ldd	r18, Z+3	; 0x03
    2798:	34 81       	ldd	r19, Z+4	; 0x04
    279a:	c5 01       	movw	r24, r10
    279c:	00 2e       	mov	r0, r16
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <updateSequencer+0xb0>
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	0a 94       	dec	r0
    27a6:	e2 f7       	brpl	.-8      	; 0x27a0 <updateSequencer+0xac>
    27a8:	82 2b       	or	r24, r18
    27aa:	93 2b       	or	r25, r19
    27ac:	94 83       	std	Z+4, r25	; 0x04
    27ae:	83 83       	std	Z+3, r24	; 0x03
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
    27b0:	f6 94       	lsr	r15
    27b2:	e7 94       	ror	r14
    27b4:	0f 5f       	subi	r16, 0xFF	; 255
    27b6:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		//this will be where we play samples
		currentGlobals->clockCounter = 0;
		currentGlobals->currentTrigSequencer = 0; //we want to re-set this every time. 
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
    27b8:	00 31       	cpi	r16, 0x10	; 16
    27ba:	11 05       	cpc	r17, r1
    27bc:	21 f7       	brne	.-56     	; 0x2786 <updateSequencer+0x92>
				playTrack(&sequencerPattern, currentGlobals, sc);
				currentGlobals->currentTrigSequencer |= (1<<sc); //start to fill our lighting buffer. 
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
		}
		currentPlayStep = currentPlayStep+1;
    27be:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <currentPlayStep>
    27c2:	8f 5f       	subi	r24, 0xFF	; 255
    27c4:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <currentPlayStep>
		if(currentPlayStep>(sequencerPattern.numSteps-1))
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	c8 52       	subi	r28, 0x28	; 40
    27cc:	df 4f       	sbci	r29, 0xFF	; 255
    27ce:	28 81       	ld	r18, Y
    27d0:	c8 5d       	subi	r28, 0xD8	; 216
    27d2:	d0 40       	sbci	r29, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	21 50       	subi	r18, 0x01	; 1
    27d8:	31 09       	sbc	r19, r1
    27da:	28 17       	cp	r18, r24
    27dc:	39 07       	cpc	r19, r25
    27de:	6c f4       	brge	.+26     	; 0x27fa <updateSequencer+0x106>
		{
			currentPlayStep=0; // don't play more steps than are in the sequence.
    27e0:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <currentPlayStep>
    27e4:	0a c0       	rjmp	.+20     	; 0x27fa <updateSequencer+0x106>
		}
		
	}else if(currentGlobals->clockCounter>=BPMvar && !currentGlobals->playState)
	{ 
		currentPlayStep=0;
    27e6:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <currentPlayStep>
		currentGlobals->clockCounter = 0;
    27ea:	f6 01       	movw	r30, r12
    27ec:	e5 51       	subi	r30, 0x15	; 21
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	11 82       	std	Z+1, r1	; 0x01
    27f2:	10 82       	st	Z, r1
		currentGlobals->currentTrigSequencer=0;
    27f4:	f6 01       	movw	r30, r12
    27f6:	14 82       	std	Z+4, r1	; 0x04
    27f8:	13 82       	std	Z+3, r1	; 0x03
	}
	
}
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	ff 90       	pop	r15
    2804:	ef 90       	pop	r14
    2806:	df 90       	pop	r13
    2808:	cf 90       	pop	r12
    280a:	bf 90       	pop	r11
    280c:	af 90       	pop	r10
    280e:	08 95       	ret

00002810 <__vector_27>:
char serial0Buffer[TX_BUFFER_SIZE];
int serialReadPos = 0;
int serialWritePos = 0;

ISR (USART0_TX_vect)
{
    2810:	1f 92       	push	r1
    2812:	0f 92       	push	r0
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	0f 92       	push	r0
    2818:	11 24       	eor	r1, r1
    281a:	0b b6       	in	r0, 0x3b	; 59
    281c:	0f 92       	push	r0
    281e:	2f 93       	push	r18
    2820:	3f 93       	push	r19
    2822:	8f 93       	push	r24
    2824:	9f 93       	push	r25
    2826:	ef 93       	push	r30
    2828:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
    282a:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <serialReadPos>
    282e:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <serialReadPos+0x1>
    2832:	20 91 f1 03 	lds	r18, 0x03F1	; 0x8003f1 <serialWritePos>
    2836:	30 91 f2 03 	lds	r19, 0x03F2	; 0x8003f2 <serialWritePos+0x1>
    283a:	82 17       	cp	r24, r18
    283c:	93 07       	cpc	r25, r19
    283e:	c1 f0       	breq	.+48     	; 0x2870 <__vector_27+0x60>
	{
		UDR0 = serial0Buffer[serialReadPos];
    2840:	fc 01       	movw	r30, r24
    2842:	eb 57       	subi	r30, 0x7B	; 123
    2844:	f9 4f       	sbci	r31, 0xF9	; 249
    2846:	80 81       	ld	r24, Z
    2848:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
    284c:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <serialReadPos>
    2850:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <serialReadPos+0x1>
    2854:	01 96       	adiw	r24, 0x01	; 1

		if(serialReadPos >= TX_BUFFER_SIZE)
    2856:	80 38       	cpi	r24, 0x80	; 128
    2858:	21 e0       	ldi	r18, 0x01	; 1
    285a:	92 07       	cpc	r25, r18
    285c:	2c f4       	brge	.+10     	; 0x2868 <__vector_27+0x58>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
    285e:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <serialReadPos+0x1>
    2862:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <serialReadPos>
    2866:	04 c0       	rjmp	.+8      	; 0x2870 <__vector_27+0x60>

		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
    2868:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <serialReadPos+0x1>
    286c:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <serialReadPos>
		}
	}
}
    2870:	ff 91       	pop	r31
    2872:	ef 91       	pop	r30
    2874:	9f 91       	pop	r25
    2876:	8f 91       	pop	r24
    2878:	3f 91       	pop	r19
    287a:	2f 91       	pop	r18
    287c:	0f 90       	pop	r0
    287e:	0b be       	out	0x3b, r0	; 59
    2880:	0f 90       	pop	r0
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	0f 90       	pop	r0
    2886:	1f 90       	pop	r1
    2888:	18 95       	reti

0000288a <appendSerial0>:

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
    288a:	20 91 f1 03 	lds	r18, 0x03F1	; 0x8003f1 <serialWritePos>
    288e:	30 91 f2 03 	lds	r19, 0x03F2	; 0x8003f2 <serialWritePos+0x1>
    2892:	f9 01       	movw	r30, r18
    2894:	eb 57       	subi	r30, 0x7B	; 123
    2896:	f9 4f       	sbci	r31, 0xF9	; 249
    2898:	80 83       	st	Z, r24
	serialWritePos++;
    289a:	2f 5f       	subi	r18, 0xFF	; 255
    289c:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    289e:	20 38       	cpi	r18, 0x80	; 128
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	38 07       	cpc	r19, r24
    28a4:	2c f4       	brge	.+10     	; 0x28b0 <appendSerial0+0x26>
}

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    28a6:	30 93 f2 03 	sts	0x03F2, r19	; 0x8003f2 <serialWritePos+0x1>
    28aa:	20 93 f1 03 	sts	0x03F1, r18	; 0x8003f1 <serialWritePos>
    28ae:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    28b0:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <serialWritePos+0x1>
    28b4:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <serialWritePos>
    28b8:	08 95       	ret

000028ba <serialWrite0>:
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
    28ba:	0f 93       	push	r16
    28bc:	1f 93       	push	r17
    28be:	cf 93       	push	r28
    28c0:	df 93       	push	r29
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    28c2:	66 23       	and	r22, r22
    28c4:	69 f0       	breq	.+26     	; 0x28e0 <serialWrite0+0x26>
    28c6:	ec 01       	movw	r28, r24
    28c8:	61 50       	subi	r22, 0x01	; 1
    28ca:	06 2f       	mov	r16, r22
    28cc:	10 e0       	ldi	r17, 0x00	; 0
    28ce:	0f 5f       	subi	r16, 0xFF	; 255
    28d0:	1f 4f       	sbci	r17, 0xFF	; 255
    28d2:	08 0f       	add	r16, r24
    28d4:	19 1f       	adc	r17, r25
	{
		appendSerial0(c[i]);
    28d6:	89 91       	ld	r24, Y+
    28d8:	d8 df       	rcall	.-80     	; 0x288a <appendSerial0>
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    28da:	c0 17       	cp	r28, r16
    28dc:	d1 07       	cpc	r29, r17
    28de:	d9 f7       	brne	.-10     	; 0x28d6 <serialWrite0+0x1c>
	{
		appendSerial0(c[i]);

	}

	if(UCSR0A & (1 << UDRE0))
    28e0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    28e4:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    28e6:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    28ea:	df 91       	pop	r29
    28ec:	cf 91       	pop	r28
    28ee:	1f 91       	pop	r17
    28f0:	0f 91       	pop	r16
    28f2:	08 95       	ret

000028f4 <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    28f4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    28f8:	80 e1       	ldi	r24, 0x10	; 16
    28fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>


UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    28fe:	88 e4       	ldi	r24, 0x48	; 72
    2900:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    2904:	86 e0       	ldi	r24, 0x06	; 6
    2906:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    290a:	08 95       	ret

0000290c <trackControl>:
		//this should be fine for now though. 
			//set track volume
			setTrackVolume(currentPattern->trackSampleLSB[i], currentPattern->trackSampleMSB[i], currentPattern->trackMainVolumeLSB[i], currentPattern->trackMainVolumeMSB[i]);
	}
	
}
    290c:	cf 93       	push	r28
    290e:	df 93       	push	r29
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	2a 97       	sbiw	r28, 0x0a	; 10
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	cd bf       	out	0x3d, r28	; 61
    2920:	90 ef       	ldi	r25, 0xF0	; 240
    2922:	99 83       	std	Y+1, r25	; 0x01
    2924:	9a ea       	ldi	r25, 0xAA	; 170
    2926:	9a 83       	std	Y+2, r25	; 0x02
    2928:	9a e0       	ldi	r25, 0x0A	; 10
    292a:	9b 83       	std	Y+3, r25	; 0x03
    292c:	93 e0       	ldi	r25, 0x03	; 3
    292e:	9c 83       	std	Y+4, r25	; 0x04
    2930:	2d 83       	std	Y+5, r18	; 0x05
    2932:	8e 83       	std	Y+6, r24	; 0x06
    2934:	6f 83       	std	Y+7, r22	; 0x07
    2936:	48 87       	std	Y+8, r20	; 0x08
    2938:	19 86       	std	Y+9, r1	; 0x09
    293a:	85 e5       	ldi	r24, 0x55	; 85
    293c:	8a 87       	std	Y+10, r24	; 0x0a
    293e:	6a e0       	ldi	r22, 0x0A	; 10
    2940:	ce 01       	movw	r24, r28
    2942:	01 96       	adiw	r24, 0x01	; 1
    2944:	ba df       	rcall	.-140    	; 0x28ba <serialWrite0>
    2946:	2a 96       	adiw	r28, 0x0a	; 10
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
    2952:	df 91       	pop	r29
    2954:	cf 91       	pop	r28
    2956:	08 95       	ret

00002958 <setOutputVolume>:
    2958:	cf 93       	push	r28
    295a:	df 93       	push	r29
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	28 97       	sbiw	r28, 0x08	; 8
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	de bf       	out	0x3e, r29	; 62
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	90 ef       	ldi	r25, 0xF0	; 240
    296e:	99 83       	std	Y+1, r25	; 0x01
    2970:	9a ea       	ldi	r25, 0xAA	; 170
    2972:	9a 83       	std	Y+2, r25	; 0x02
    2974:	98 e0       	ldi	r25, 0x08	; 8
    2976:	9b 83       	std	Y+3, r25	; 0x03
    2978:	95 e0       	ldi	r25, 0x05	; 5
    297a:	9c 83       	std	Y+4, r25	; 0x04
    297c:	4d 83       	std	Y+5, r20	; 0x05
    297e:	8e 83       	std	Y+6, r24	; 0x06
    2980:	6f 83       	std	Y+7, r22	; 0x07
    2982:	85 e5       	ldi	r24, 0x55	; 85
    2984:	88 87       	std	Y+8, r24	; 0x08
    2986:	68 e0       	ldi	r22, 0x08	; 8
    2988:	ce 01       	movw	r24, r28
    298a:	01 96       	adiw	r24, 0x01	; 1
    298c:	96 df       	rcall	.-212    	; 0x28ba <serialWrite0>
    298e:	28 96       	adiw	r28, 0x08	; 8
    2990:	0f b6       	in	r0, 0x3f	; 63
    2992:	f8 94       	cli
    2994:	de bf       	out	0x3e, r29	; 62
    2996:	0f be       	out	0x3f, r0	; 63
    2998:	cd bf       	out	0x3d, r28	; 61
    299a:	df 91       	pop	r29
    299c:	cf 91       	pop	r28
    299e:	08 95       	ret

000029a0 <setTrackVolume>:
    29a0:	cf 93       	push	r28
    29a2:	df 93       	push	r29
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	29 97       	sbiw	r28, 0x09	; 9
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	90 ef       	ldi	r25, 0xF0	; 240
    29b6:	99 83       	std	Y+1, r25	; 0x01
    29b8:	9a ea       	ldi	r25, 0xAA	; 170
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	99 e0       	ldi	r25, 0x09	; 9
    29be:	9b 83       	std	Y+3, r25	; 0x03
    29c0:	98 e0       	ldi	r25, 0x08	; 8
    29c2:	9c 83       	std	Y+4, r25	; 0x04
    29c4:	8d 83       	std	Y+5, r24	; 0x05
    29c6:	6e 83       	std	Y+6, r22	; 0x06
    29c8:	4f 83       	std	Y+7, r20	; 0x07
    29ca:	28 87       	std	Y+8, r18	; 0x08
    29cc:	85 e5       	ldi	r24, 0x55	; 85
    29ce:	89 87       	std	Y+9, r24	; 0x09
    29d0:	69 e0       	ldi	r22, 0x09	; 9
    29d2:	ce 01       	movw	r24, r28
    29d4:	01 96       	adiw	r24, 0x01	; 1
    29d6:	71 df       	rcall	.-286    	; 0x28ba <serialWrite0>
    29d8:	29 96       	adiw	r28, 0x09	; 9
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	08 95       	ret

000029ea <setTrackFade>:
    29ea:	cf 92       	push	r12
    29ec:	ef 92       	push	r14
    29ee:	0f 93       	push	r16
    29f0:	cf 93       	push	r28
    29f2:	df 93       	push	r29
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	2c 97       	sbiw	r28, 0x0c	; 12
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	90 ef       	ldi	r25, 0xF0	; 240
    2a06:	99 83       	std	Y+1, r25	; 0x01
    2a08:	9a ea       	ldi	r25, 0xAA	; 170
    2a0a:	9a 83       	std	Y+2, r25	; 0x02
    2a0c:	9c e0       	ldi	r25, 0x0C	; 12
    2a0e:	9b 83       	std	Y+3, r25	; 0x03
    2a10:	9a e0       	ldi	r25, 0x0A	; 10
    2a12:	9c 83       	std	Y+4, r25	; 0x04
    2a14:	8d 83       	std	Y+5, r24	; 0x05
    2a16:	6e 83       	std	Y+6, r22	; 0x06
    2a18:	4f 83       	std	Y+7, r20	; 0x07
    2a1a:	28 87       	std	Y+8, r18	; 0x08
    2a1c:	09 87       	std	Y+9, r16	; 0x09
    2a1e:	ea 86       	std	Y+10, r14	; 0x0a
    2a20:	cb 86       	std	Y+11, r12	; 0x0b
    2a22:	85 e5       	ldi	r24, 0x55	; 85
    2a24:	8c 87       	std	Y+12, r24	; 0x0c
    2a26:	6c e0       	ldi	r22, 0x0C	; 12
    2a28:	ce 01       	movw	r24, r28
    2a2a:	01 96       	adiw	r24, 0x01	; 1
    2a2c:	46 df       	rcall	.-372    	; 0x28ba <serialWrite0>
    2a2e:	2c 96       	adiw	r28, 0x0c	; 12
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	df 91       	pop	r29
    2a3c:	cf 91       	pop	r28
    2a3e:	0f 91       	pop	r16
    2a40:	ef 90       	pop	r14
    2a42:	cf 90       	pop	r12
    2a44:	08 95       	ret

00002a46 <outputSampleRate>:
    2a46:	cf 93       	push	r28
    2a48:	df 93       	push	r29
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    2a4e:	28 97       	sbiw	r28, 0x08	; 8
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	90 ef       	ldi	r25, 0xF0	; 240
    2a5c:	99 83       	std	Y+1, r25	; 0x01
    2a5e:	9a ea       	ldi	r25, 0xAA	; 170
    2a60:	9a 83       	std	Y+2, r25	; 0x02
    2a62:	98 e0       	ldi	r25, 0x08	; 8
    2a64:	9b 83       	std	Y+3, r25	; 0x03
    2a66:	9c e0       	ldi	r25, 0x0C	; 12
    2a68:	9c 83       	std	Y+4, r25	; 0x04
    2a6a:	8d 83       	std	Y+5, r24	; 0x05
    2a6c:	6e 83       	std	Y+6, r22	; 0x06
    2a6e:	4f 83       	std	Y+7, r20	; 0x07
    2a70:	85 e5       	ldi	r24, 0x55	; 85
    2a72:	88 87       	std	Y+8, r24	; 0x08
    2a74:	68 e0       	ldi	r22, 0x08	; 8
    2a76:	ce 01       	movw	r24, r28
    2a78:	01 96       	adiw	r24, 0x01	; 1
    2a7a:	1f df       	rcall	.-450    	; 0x28ba <serialWrite0>
    2a7c:	28 96       	adiw	r28, 0x08	; 8
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	08 95       	ret

00002a8e <playTrack>:
    2a8e:	2f 92       	push	r2
    2a90:	3f 92       	push	r3
    2a92:	4f 92       	push	r4
    2a94:	5f 92       	push	r5
    2a96:	6f 92       	push	r6
    2a98:	7f 92       	push	r7
    2a9a:	8f 92       	push	r8
    2a9c:	9f 92       	push	r9
    2a9e:	af 92       	push	r10
    2aa0:	bf 92       	push	r11
    2aa2:	cf 92       	push	r12
    2aa4:	ef 92       	push	r14
    2aa6:	0f 93       	push	r16
    2aa8:	1f 93       	push	r17
    2aaa:	cf 93       	push	r28
    2aac:	df 93       	push	r29
    2aae:	00 d0       	rcall	.+0      	; 0x2ab0 <playTrack+0x22>
    2ab0:	1f 92       	push	r1
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	4b 01       	movw	r8, r22
    2ab8:	14 2f       	mov	r17, r20
    2aba:	a4 2e       	mov	r10, r20
    2abc:	b1 2c       	mov	r11, r1
    2abe:	fc 01       	movw	r30, r24
    2ac0:	ea 0d       	add	r30, r10
    2ac2:	fb 1d       	adc	r31, r11
    2ac4:	e5 51       	subi	r30, 0x15	; 21
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	20 81       	ld	r18, Z
    2aca:	21 30       	cpi	r18, 0x01	; 1
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <playTrack+0x42>
    2ace:	8c c0       	rjmp	.+280    	; 0x2be8 <playTrack+0x15a>
    2ad0:	38 f0       	brcs	.+14     	; 0x2ae0 <playTrack+0x52>
    2ad2:	22 30       	cpi	r18, 0x02	; 2
    2ad4:	09 f4       	brne	.+2      	; 0x2ad8 <playTrack+0x4a>
    2ad6:	df c0       	rjmp	.+446    	; 0x2c96 <playTrack+0x208>
    2ad8:	23 30       	cpi	r18, 0x03	; 3
    2ada:	09 f4       	brne	.+2      	; 0x2ade <playTrack+0x50>
    2adc:	0c c1       	rjmp	.+536    	; 0x2cf6 <playTrack+0x268>
    2ade:	1f c1       	rjmp	.+574    	; 0x2d1e <playTrack+0x290>
    2ae0:	9c 01       	movw	r18, r24
    2ae2:	2a 0d       	add	r18, r10
    2ae4:	3b 1d       	adc	r19, r11
    2ae6:	3c 83       	std	Y+4, r19	; 0x04
    2ae8:	2b 83       	std	Y+3, r18	; 0x03
    2aea:	f9 01       	movw	r30, r18
    2aec:	e8 57       	subi	r30, 0x78	; 120
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	29 01       	movw	r4, r18
    2af2:	38 e9       	ldi	r19, 0x98	; 152
    2af4:	43 0e       	add	r4, r19
    2af6:	51 1c       	adc	r5, r1
    2af8:	6b 80       	ldd	r6, Y+3	; 0x03
    2afa:	7c 80       	ldd	r7, Y+4	; 0x04
    2afc:	88 ea       	ldi	r24, 0xA8	; 168
    2afe:	68 0e       	add	r6, r24
    2b00:	71 1c       	adc	r7, r1
    2b02:	20 81       	ld	r18, Z
    2b04:	ab 81       	ldd	r26, Y+3	; 0x03
    2b06:	bc 81       	ldd	r27, Y+4	; 0x04
    2b08:	58 96       	adiw	r26, 0x18	; 24
    2b0a:	4c 91       	ld	r20, X
    2b0c:	f2 01       	movw	r30, r4
    2b0e:	60 81       	ld	r22, Z
    2b10:	d3 01       	movw	r26, r6
    2b12:	8c 91       	ld	r24, X
    2b14:	fb de       	rcall	.-522    	; 0x290c <trackControl>
    2b16:	2b 80       	ldd	r2, Y+3	; 0x03
    2b18:	3c 80       	ldd	r3, Y+4	; 0x04
    2b1a:	b8 e4       	ldi	r27, 0x48	; 72
    2b1c:	2b 0e       	add	r2, r27
    2b1e:	31 1c       	adc	r3, r1
    2b20:	eb 81       	ldd	r30, Y+3	; 0x03
    2b22:	fc 81       	ldd	r31, Y+4	; 0x04
    2b24:	e8 5a       	subi	r30, 0xA8	; 168
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	fa 83       	std	Y+2, r31	; 0x02
    2b2a:	e9 83       	std	Y+1, r30	; 0x01
    2b2c:	c1 2c       	mov	r12, r1
    2b2e:	d1 01       	movw	r26, r2
    2b30:	ec 90       	ld	r14, X
    2b32:	00 81       	ld	r16, Z
    2b34:	eb 81       	ldd	r30, Y+3	; 0x03
    2b36:	fc 81       	ldd	r31, Y+4	; 0x04
    2b38:	20 a5       	ldd	r18, Z+40	; 0x28
    2b3a:	40 ad       	ldd	r20, Z+56	; 0x38
    2b3c:	d2 01       	movw	r26, r4
    2b3e:	6c 91       	ld	r22, X
    2b40:	f3 01       	movw	r30, r6
    2b42:	80 81       	ld	r24, Z
    2b44:	52 df       	rcall	.-348    	; 0x29ea <setTrackFade>
    2b46:	f4 01       	movw	r30, r8
    2b48:	e7 55       	subi	r30, 0x57	; 87
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	02 c0       	rjmp	.+4      	; 0x2b56 <playTrack+0xc8>
    2b52:	88 0f       	add	r24, r24
    2b54:	99 1f       	adc	r25, r25
    2b56:	1a 95       	dec	r17
    2b58:	e2 f7       	brpl	.-8      	; 0x2b52 <playTrack+0xc4>
    2b5a:	20 81       	ld	r18, Z
    2b5c:	31 81       	ldd	r19, Z+1	; 0x01
    2b5e:	82 2b       	or	r24, r18
    2b60:	93 2b       	or	r25, r19
    2b62:	91 83       	std	Z+1, r25	; 0x01
    2b64:	80 83       	st	Z, r24
    2b66:	f5 01       	movw	r30, r10
    2b68:	ee 0f       	add	r30, r30
    2b6a:	ff 1f       	adc	r31, r31
    2b6c:	ee 0f       	add	r30, r30
    2b6e:	ff 1f       	adc	r31, r31
    2b70:	e8 0d       	add	r30, r8
    2b72:	f9 1d       	adc	r31, r9
    2b74:	e5 55       	subi	r30, 0x55	; 85
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	ab 81       	ldd	r26, Y+3	; 0x03
    2b7a:	bc 81       	ldd	r27, Y+4	; 0x04
    2b7c:	a5 53       	subi	r26, 0x35	; 53
    2b7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b80:	2c 91       	ld	r18, X
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	32 2f       	mov	r19, r18
    2b86:	22 27       	eor	r18, r18
    2b88:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8c:	85 52       	subi	r24, 0x25	; 37
    2b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b90:	dc 01       	movw	r26, r24
    2b92:	8c 91       	ld	r24, X
    2b94:	a9 01       	movw	r20, r18
    2b96:	48 2b       	or	r20, r24
    2b98:	d1 01       	movw	r26, r2
    2b9a:	8c 91       	ld	r24, X
    2b9c:	28 2f       	mov	r18, r24
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	32 2f       	mov	r19, r18
    2ba2:	22 27       	eor	r18, r18
    2ba4:	a9 81       	ldd	r26, Y+1	; 0x01
    2ba6:	ba 81       	ldd	r27, Y+2	; 0x02
    2ba8:	8c 91       	ld	r24, X
    2baa:	28 2b       	or	r18, r24
    2bac:	24 0f       	add	r18, r20
    2bae:	35 1f       	adc	r19, r21
    2bb0:	c9 01       	movw	r24, r18
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	22 0f       	add	r18, r18
    2bb8:	33 1f       	adc	r19, r19
    2bba:	22 0f       	add	r18, r18
    2bbc:	33 1f       	adc	r19, r19
    2bbe:	22 0f       	add	r18, r18
    2bc0:	33 1f       	adc	r19, r19
    2bc2:	28 0f       	add	r18, r24
    2bc4:	39 1f       	adc	r19, r25
    2bc6:	d4 01       	movw	r26, r8
    2bc8:	ab 55       	subi	r26, 0x5B	; 91
    2bca:	bf 4f       	sbci	r27, 0xFF	; 255
    2bcc:	8d 91       	ld	r24, X+
    2bce:	9d 91       	ld	r25, X+
    2bd0:	0d 90       	ld	r0, X+
    2bd2:	bc 91       	ld	r27, X
    2bd4:	a0 2d       	mov	r26, r0
    2bd6:	82 0f       	add	r24, r18
    2bd8:	93 1f       	adc	r25, r19
    2bda:	a1 1d       	adc	r26, r1
    2bdc:	b1 1d       	adc	r27, r1
    2bde:	80 83       	st	Z, r24
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	a2 83       	std	Z+2, r26	; 0x02
    2be4:	b3 83       	std	Z+3, r27	; 0x03
    2be6:	9b c0       	rjmp	.+310    	; 0x2d1e <playTrack+0x290>
    2be8:	3c 01       	movw	r6, r24
    2bea:	6a 0c       	add	r6, r10
    2bec:	7b 1c       	adc	r7, r11
    2bee:	c3 01       	movw	r24, r6
    2bf0:	88 57       	subi	r24, 0x78	; 120
    2bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf4:	d3 01       	movw	r26, r6
    2bf6:	a8 56       	subi	r26, 0x68	; 104
    2bf8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bfa:	23 01       	movw	r4, r6
    2bfc:	e8 ea       	ldi	r30, 0xA8	; 168
    2bfe:	4e 0e       	add	r4, r30
    2c00:	51 1c       	adc	r5, r1
    2c02:	fc 01       	movw	r30, r24
    2c04:	20 81       	ld	r18, Z
    2c06:	f3 01       	movw	r30, r6
    2c08:	40 8d       	ldd	r20, Z+24	; 0x18
    2c0a:	6c 91       	ld	r22, X
    2c0c:	d2 01       	movw	r26, r4
    2c0e:	8c 91       	ld	r24, X
    2c10:	7d de       	rcall	.-774    	; 0x290c <trackControl>
    2c12:	f4 01       	movw	r30, r8
    2c14:	e7 55       	subi	r30, 0x57	; 87
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <playTrack+0x194>
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	1a 95       	dec	r17
    2c24:	e2 f7       	brpl	.-8      	; 0x2c1e <playTrack+0x190>
    2c26:	20 81       	ld	r18, Z
    2c28:	31 81       	ldd	r19, Z+1	; 0x01
    2c2a:	82 2b       	or	r24, r18
    2c2c:	93 2b       	or	r25, r19
    2c2e:	91 83       	std	Z+1, r25	; 0x01
    2c30:	80 83       	st	Z, r24
    2c32:	f5 01       	movw	r30, r10
    2c34:	ee 0f       	add	r30, r30
    2c36:	ff 1f       	adc	r31, r31
    2c38:	ee 0f       	add	r30, r30
    2c3a:	ff 1f       	adc	r31, r31
    2c3c:	e8 0d       	add	r30, r8
    2c3e:	f9 1d       	adc	r31, r9
    2c40:	e5 55       	subi	r30, 0x55	; 85
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	d3 01       	movw	r26, r6
    2c46:	a5 53       	subi	r26, 0x35	; 53
    2c48:	bf 4f       	sbci	r27, 0xFF	; 255
    2c4a:	2c 91       	ld	r18, X
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	32 2f       	mov	r19, r18
    2c50:	22 27       	eor	r18, r18
    2c52:	c3 01       	movw	r24, r6
    2c54:	85 52       	subi	r24, 0x25	; 37
    2c56:	9f 4f       	sbci	r25, 0xFF	; 255
    2c58:	dc 01       	movw	r26, r24
    2c5a:	8c 91       	ld	r24, X
    2c5c:	28 2b       	or	r18, r24
    2c5e:	c9 01       	movw	r24, r18
    2c60:	88 0f       	add	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	22 0f       	add	r18, r18
    2c66:	33 1f       	adc	r19, r19
    2c68:	22 0f       	add	r18, r18
    2c6a:	33 1f       	adc	r19, r19
    2c6c:	22 0f       	add	r18, r18
    2c6e:	33 1f       	adc	r19, r19
    2c70:	28 0f       	add	r18, r24
    2c72:	39 1f       	adc	r19, r25
    2c74:	d4 01       	movw	r26, r8
    2c76:	ab 55       	subi	r26, 0x5B	; 91
    2c78:	bf 4f       	sbci	r27, 0xFF	; 255
    2c7a:	8d 91       	ld	r24, X+
    2c7c:	9d 91       	ld	r25, X+
    2c7e:	0d 90       	ld	r0, X+
    2c80:	bc 91       	ld	r27, X
    2c82:	a0 2d       	mov	r26, r0
    2c84:	82 0f       	add	r24, r18
    2c86:	93 1f       	adc	r25, r19
    2c88:	a1 1d       	adc	r26, r1
    2c8a:	b1 1d       	adc	r27, r1
    2c8c:	80 83       	st	Z, r24
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	a2 83       	std	Z+2, r26	; 0x02
    2c92:	b3 83       	std	Z+3, r27	; 0x03
    2c94:	44 c0       	rjmp	.+136    	; 0x2d1e <playTrack+0x290>
    2c96:	fc 01       	movw	r30, r24
    2c98:	ea 0d       	add	r30, r10
    2c9a:	fb 1d       	adc	r31, r11
    2c9c:	fa 83       	std	Y+2, r31	; 0x02
    2c9e:	e9 83       	std	Y+1, r30	; 0x01
    2ca0:	e8 57       	subi	r30, 0x78	; 120
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	89 80       	ldd	r8, Y+1	; 0x01
    2ca6:	9a 80       	ldd	r9, Y+2	; 0x02
    2ca8:	28 e9       	ldi	r18, 0x98	; 152
    2caa:	82 0e       	add	r8, r18
    2cac:	91 1c       	adc	r9, r1
    2cae:	a9 80       	ldd	r10, Y+1	; 0x01
    2cb0:	ba 80       	ldd	r11, Y+2	; 0x02
    2cb2:	38 ea       	ldi	r19, 0xA8	; 168
    2cb4:	a3 0e       	add	r10, r19
    2cb6:	b1 1c       	adc	r11, r1
    2cb8:	20 81       	ld	r18, Z
    2cba:	a9 81       	ldd	r26, Y+1	; 0x01
    2cbc:	ba 81       	ldd	r27, Y+2	; 0x02
    2cbe:	58 96       	adiw	r26, 0x18	; 24
    2cc0:	4c 91       	ld	r20, X
    2cc2:	f4 01       	movw	r30, r8
    2cc4:	60 81       	ld	r22, Z
    2cc6:	d5 01       	movw	r26, r10
    2cc8:	8c 91       	ld	r24, X
    2cca:	20 de       	rcall	.-960    	; 0x290c <trackControl>
    2ccc:	a9 81       	ldd	r26, Y+1	; 0x01
    2cce:	ba 81       	ldd	r27, Y+2	; 0x02
    2cd0:	a8 5b       	subi	r26, 0xB8	; 184
    2cd2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cd4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd8:	e8 5a       	subi	r30, 0xA8	; 168
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	c1 2c       	mov	r12, r1
    2cde:	ec 90       	ld	r14, X
    2ce0:	00 81       	ld	r16, Z
    2ce2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ce6:	20 a5       	ldd	r18, Z+40	; 0x28
    2ce8:	40 ad       	ldd	r20, Z+56	; 0x38
    2cea:	d4 01       	movw	r26, r8
    2cec:	6c 91       	ld	r22, X
    2cee:	f5 01       	movw	r30, r10
    2cf0:	80 81       	ld	r24, Z
    2cf2:	7b de       	rcall	.-778    	; 0x29ea <setTrackFade>
    2cf4:	14 c0       	rjmp	.+40     	; 0x2d1e <playTrack+0x290>
    2cf6:	a8 0e       	add	r10, r24
    2cf8:	b9 1e       	adc	r11, r25
    2cfa:	c5 01       	movw	r24, r10
    2cfc:	88 57       	subi	r24, 0x78	; 120
    2cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2d00:	d5 01       	movw	r26, r10
    2d02:	a8 56       	subi	r26, 0x68	; 104
    2d04:	bf 4f       	sbci	r27, 0xFF	; 255
    2d06:	45 01       	movw	r8, r10
    2d08:	f8 ea       	ldi	r31, 0xA8	; 168
    2d0a:	8f 0e       	add	r8, r31
    2d0c:	91 1c       	adc	r9, r1
    2d0e:	fc 01       	movw	r30, r24
    2d10:	20 81       	ld	r18, Z
    2d12:	f5 01       	movw	r30, r10
    2d14:	40 8d       	ldd	r20, Z+24	; 0x18
    2d16:	6c 91       	ld	r22, X
    2d18:	d4 01       	movw	r26, r8
    2d1a:	8c 91       	ld	r24, X
    2d1c:	f7 dd       	rcall	.-1042   	; 0x290c <trackControl>
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	df 91       	pop	r29
    2d28:	cf 91       	pop	r28
    2d2a:	1f 91       	pop	r17
    2d2c:	0f 91       	pop	r16
    2d2e:	ef 90       	pop	r14
    2d30:	cf 90       	pop	r12
    2d32:	bf 90       	pop	r11
    2d34:	af 90       	pop	r10
    2d36:	9f 90       	pop	r9
    2d38:	8f 90       	pop	r8
    2d3a:	7f 90       	pop	r7
    2d3c:	6f 90       	pop	r6
    2d3e:	5f 90       	pop	r5
    2d40:	4f 90       	pop	r4
    2d42:	3f 90       	pop	r3
    2d44:	2f 90       	pop	r2
    2d46:	08 95       	ret

00002d48 <releaseUpdate>:

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
    2d48:	2f 92       	push	r2
    2d4a:	3f 92       	push	r3
    2d4c:	4f 92       	push	r4
    2d4e:	5f 92       	push	r5
    2d50:	6f 92       	push	r6
    2d52:	7f 92       	push	r7
    2d54:	8f 92       	push	r8
    2d56:	9f 92       	push	r9
    2d58:	af 92       	push	r10
    2d5a:	bf 92       	push	r11
    2d5c:	cf 92       	push	r12
    2d5e:	ef 92       	push	r14
    2d60:	0f 93       	push	r16
    2d62:	cf 93       	push	r28
    2d64:	df 93       	push	r29
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <releaseUpdate+0x20>
    2d68:	1f 92       	push	r1
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
    2d6e:	fb 01       	movw	r30, r22
    2d70:	e7 55       	subi	r30, 0x57	; 87
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	a0 80       	ld	r10, Z
    2d76:	b1 80       	ldd	r11, Z+1	; 0x01
    2d78:	3b 01       	movw	r6, r22
    2d7a:	2b ea       	ldi	r18, 0xAB	; 171
    2d7c:	62 0e       	add	r6, r18
    2d7e:	71 1c       	adc	r7, r1
    2d80:	88 59       	subi	r24, 0x98	; 152
    2d82:	9f 4f       	sbci	r25, 0xFF	; 255
    2d84:	4c 01       	movw	r8, r24
	
	for(int i = 0; i<16; i++)
    2d86:	1c 82       	std	Y+4, r1	; 0x04
    2d88:	1b 82       	std	Y+3, r1	; 0x03
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])<=(currentGlobals->releaseCounter))
    2d8a:	2b 01       	movw	r4, r22
    2d8c:	85 ea       	ldi	r24, 0xA5	; 165
    2d8e:	48 0e       	add	r4, r24
    2d90:	51 1c       	adc	r5, r1
			{
				//we need to do the release state here.
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],186,255,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
				currentGlobals->releaseTracker = currentGlobals->releaseTracker&(~(1<<i)); //turn off that track, so release stage does not play again. 
    2d92:	fa 83       	std	Y+2, r31	; 0x02
    2d94:	e9 83       	std	Y+1, r30	; 0x01
    2d96:	22 24       	eor	r2, r2
    2d98:	23 94       	inc	r2
    2d9a:	31 2c       	mov	r3, r1
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
    2d9c:	a0 fe       	sbrs	r10, 0
    2d9e:	2c c0       	rjmp	.+88     	; 0x2df8 <releaseUpdate+0xb0>
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])<=(currentGlobals->releaseCounter))
    2da0:	f3 01       	movw	r30, r6
    2da2:	40 81       	ld	r20, Z
    2da4:	51 81       	ldd	r21, Z+1	; 0x01
    2da6:	62 81       	ldd	r22, Z+2	; 0x02
    2da8:	73 81       	ldd	r23, Z+3	; 0x03
    2daa:	f2 01       	movw	r30, r4
    2dac:	80 81       	ld	r24, Z
    2dae:	91 81       	ldd	r25, Z+1	; 0x01
    2db0:	a2 81       	ldd	r26, Z+2	; 0x02
    2db2:	b3 81       	ldd	r27, Z+3	; 0x03
    2db4:	84 17       	cp	r24, r20
    2db6:	95 07       	cpc	r25, r21
    2db8:	a6 07       	cpc	r26, r22
    2dba:	b7 07       	cpc	r27, r23
    2dbc:	e8 f0       	brcs	.+58     	; 0x2df8 <releaseUpdate+0xb0>
			{
				//we need to do the release state here.
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],186,255,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
    2dbe:	cc 24       	eor	r12, r12
    2dc0:	c3 94       	inc	r12
    2dc2:	f4 01       	movw	r30, r8
    2dc4:	e0 80       	ld	r14, Z
    2dc6:	00 89       	ldd	r16, Z+16	; 0x10
    2dc8:	2f ef       	ldi	r18, 0xFF	; 255
    2dca:	4a eb       	ldi	r20, 0xBA	; 186
    2dcc:	60 a9       	ldd	r22, Z+48	; 0x30
    2dce:	e0 5c       	subi	r30, 0xC0	; 192
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 81       	ld	r24, Z
    2dd4:	0a de       	rcall	.-1004   	; 0x29ea <setTrackFade>
				currentGlobals->releaseTracker = currentGlobals->releaseTracker&(~(1<<i)); //turn off that track, so release stage does not play again. 
    2dd6:	c1 01       	movw	r24, r2
    2dd8:	0b 80       	ldd	r0, Y+3	; 0x03
    2dda:	02 c0       	rjmp	.+4      	; 0x2de0 <releaseUpdate+0x98>
    2ddc:	88 0f       	add	r24, r24
    2dde:	99 1f       	adc	r25, r25
    2de0:	0a 94       	dec	r0
    2de2:	e2 f7       	brpl	.-8      	; 0x2ddc <releaseUpdate+0x94>
    2de4:	80 95       	com	r24
    2de6:	90 95       	com	r25
    2de8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dea:	fa 81       	ldd	r31, Y+2	; 0x02
    2dec:	20 81       	ld	r18, Z
    2dee:	31 81       	ldd	r19, Z+1	; 0x01
    2df0:	82 23       	and	r24, r18
    2df2:	93 23       	and	r25, r19
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	80 83       	st	Z, r24
			}
		}
		releaseTrackerParse = releaseTrackerParse>>1;
    2df8:	b6 94       	lsr	r11
    2dfa:	a7 94       	ror	r10

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
    2dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2e00:	01 96       	adiw	r24, 0x01	; 1
    2e02:	9c 83       	std	Y+4, r25	; 0x04
    2e04:	8b 83       	std	Y+3, r24	; 0x03
    2e06:	94 e0       	ldi	r25, 0x04	; 4
    2e08:	69 0e       	add	r6, r25
    2e0a:	71 1c       	adc	r7, r1
    2e0c:	ef ef       	ldi	r30, 0xFF	; 255
    2e0e:	8e 1a       	sub	r8, r30
    2e10:	9e 0a       	sbc	r9, r30
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	9c 81       	ldd	r25, Y+4	; 0x04
    2e16:	40 97       	sbiw	r24, 0x10	; 16
    2e18:	09 f0       	breq	.+2      	; 0x2e1c <releaseUpdate+0xd4>
    2e1a:	c0 cf       	rjmp	.-128    	; 0x2d9c <releaseUpdate+0x54>
			}
		}
		releaseTrackerParse = releaseTrackerParse>>1;
	}
	
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	0f 90       	pop	r0
    2e22:	0f 90       	pop	r0
    2e24:	df 91       	pop	r29
    2e26:	cf 91       	pop	r28
    2e28:	0f 91       	pop	r16
    2e2a:	ef 90       	pop	r14
    2e2c:	cf 90       	pop	r12
    2e2e:	bf 90       	pop	r11
    2e30:	af 90       	pop	r10
    2e32:	9f 90       	pop	r9
    2e34:	8f 90       	pop	r8
    2e36:	7f 90       	pop	r7
    2e38:	6f 90       	pop	r6
    2e3a:	5f 90       	pop	r5
    2e3c:	4f 90       	pop	r4
    2e3e:	3f 90       	pop	r3
    2e40:	2f 90       	pop	r2
    2e42:	08 95       	ret

00002e44 <twi_init>:
		}

		returnNum=twi_readNak();

	return returnNum;
}
    2e44:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2e48:	88 e4       	ldi	r24, 0x48	; 72
    2e4a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2e4e:	08 95       	ret

00002e50 <twi_start>:
    2e50:	94 ea       	ldi	r25, 0xA4	; 164
    2e52:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e56:	ec eb       	ldi	r30, 0xBC	; 188
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	90 81       	ld	r25, Z
    2e5c:	99 23       	and	r25, r25
    2e5e:	ec f7       	brge	.-6      	; 0x2e5a <twi_start+0xa>
    2e60:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2e64:	98 7f       	andi	r25, 0xF8	; 248
    2e66:	98 30       	cpi	r25, 0x08	; 8
    2e68:	11 f0       	breq	.+4      	; 0x2e6e <twi_start+0x1e>
    2e6a:	90 31       	cpi	r25, 0x10	; 16
    2e6c:	a1 f4       	brne	.+40     	; 0x2e96 <twi_start+0x46>
    2e6e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2e72:	84 e8       	ldi	r24, 0x84	; 132
    2e74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e78:	ec eb       	ldi	r30, 0xBC	; 188
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	88 23       	and	r24, r24
    2e80:	ec f7       	brge	.-6      	; 0x2e7c <twi_start+0x2c>
    2e82:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2e86:	98 7f       	andi	r25, 0xF8	; 248
    2e88:	98 31       	cpi	r25, 0x18	; 24
    2e8a:	39 f0       	breq	.+14     	; 0x2e9a <twi_start+0x4a>
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	90 34       	cpi	r25, 0x40	; 64
    2e90:	29 f4       	brne	.+10     	; 0x2e9c <twi_start+0x4c>
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	08 95       	ret
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	08 95       	ret
    2e9a:	80 e0       	ldi	r24, 0x00	; 0
    2e9c:	08 95       	ret

00002e9e <twi_stop>:
    2e9e:	84 e9       	ldi	r24, 0x94	; 148
    2ea0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2ea4:	ec eb       	ldi	r30, 0xBC	; 188
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	80 81       	ld	r24, Z
    2eaa:	84 fd       	sbrc	r24, 4
    2eac:	fd cf       	rjmp	.-6      	; 0x2ea8 <twi_stop+0xa>
    2eae:	08 95       	ret

00002eb0 <twi_write>:
    2eb0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2eb4:	84 e8       	ldi	r24, 0x84	; 132
    2eb6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2eba:	ec eb       	ldi	r30, 0xBC	; 188
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	88 23       	and	r24, r24
    2ec2:	ec f7       	brge	.-6      	; 0x2ebe <twi_write+0xe>
    2ec4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2ec8:	98 7f       	andi	r25, 0xF8	; 248
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	98 32       	cpi	r25, 0x28	; 40
    2ece:	09 f4       	brne	.+2      	; 0x2ed2 <twi_write+0x22>
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	08 95       	ret

00002ed4 <twi_readAck>:
    2ed4:	84 ec       	ldi	r24, 0xC4	; 196
    2ed6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2eda:	ec eb       	ldi	r30, 0xBC	; 188
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	88 23       	and	r24, r24
    2ee2:	ec f7       	brge	.-6      	; 0x2ede <twi_readAck+0xa>
    2ee4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2ee8:	08 95       	ret

00002eea <twi_readNak>:
    2eea:	84 e8       	ldi	r24, 0x84	; 132
    2eec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2ef0:	ec eb       	ldi	r30, 0xBC	; 188
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	80 81       	ld	r24, Z
    2ef6:	88 23       	and	r24, r24
    2ef8:	ec f7       	brge	.-6      	; 0x2ef4 <twi_readNak+0xa>
    2efa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2efe:	08 95       	ret

00002f00 <eepromSavePattern>:
    2f00:	4f 92       	push	r4
    2f02:	5f 92       	push	r5
    2f04:	6f 92       	push	r6
    2f06:	7f 92       	push	r7
    2f08:	8f 92       	push	r8
    2f0a:	9f 92       	push	r9
    2f0c:	af 92       	push	r10
    2f0e:	bf 92       	push	r11
    2f10:	cf 92       	push	r12
    2f12:	df 92       	push	r13
    2f14:	ef 92       	push	r14
    2f16:	ff 92       	push	r15
    2f18:	0f 93       	push	r16
    2f1a:	1f 93       	push	r17
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	c4 59       	subi	r28, 0x94	; 148
    2f26:	d1 09       	sbc	r29, r1
    2f28:	0f b6       	in	r0, 0x3f	; 63
    2f2a:	f8 94       	cli
    2f2c:	de bf       	out	0x3e, r29	; 62
    2f2e:	0f be       	out	0x3f, r0	; 63
    2f30:	cd bf       	out	0x3d, r28	; 61
    2f32:	cd 5d       	subi	r28, 0xDD	; 221
    2f34:	dd 4f       	sbci	r29, 0xFD	; 253
    2f36:	48 81       	ld	r20, Y
    2f38:	c3 52       	subi	r28, 0x23	; 35
    2f3a:	d2 40       	sbci	r29, 0x02	; 2
    2f3c:	c0 59       	subi	r28, 0x90	; 144
    2f3e:	de 4f       	sbci	r29, 0xFE	; 254
    2f40:	88 81       	ld	r24, Y
    2f42:	c0 57       	subi	r28, 0x70	; 112
    2f44:	d1 40       	sbci	r29, 0x01	; 1
    2f46:	cf 58       	subi	r28, 0x8F	; 143
    2f48:	de 4f       	sbci	r29, 0xFE	; 254
    2f4a:	98 81       	ld	r25, Y
    2f4c:	c1 57       	subi	r28, 0x71	; 113
    2f4e:	d1 40       	sbci	r29, 0x01	; 1
    2f50:	24 2f       	mov	r18, r20
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	44 23       	and	r20, r20
    2f56:	8c f0       	brlt	.+34     	; 0x2f7a <eepromSavePattern+0x7a>
    2f58:	21 50       	subi	r18, 0x01	; 1
    2f5a:	31 09       	sbc	r19, r1
    2f5c:	39 01       	movw	r6, r18
    2f5e:	66 0c       	add	r6, r6
    2f60:	77 1c       	adc	r7, r7
    2f62:	62 0e       	add	r6, r18
    2f64:	73 1e       	adc	r7, r19
    2f66:	76 94       	lsr	r7
    2f68:	76 2c       	mov	r7, r6
    2f6a:	66 24       	eor	r6, r6
    2f6c:	77 94       	ror	r7
    2f6e:	67 94       	ror	r6
    2f70:	0f 2e       	mov	r0, r31
    2f72:	f0 ea       	ldi	r31, 0xA0	; 160
    2f74:	5f 2e       	mov	r5, r31
    2f76:	f0 2d       	mov	r31, r0
    2f78:	11 c0       	rjmp	.+34     	; 0x2f9c <eepromSavePattern+0x9c>
    2f7a:	20 58       	subi	r18, 0x80	; 128
    2f7c:	31 09       	sbc	r19, r1
    2f7e:	39 01       	movw	r6, r18
    2f80:	66 0c       	add	r6, r6
    2f82:	77 1c       	adc	r7, r7
    2f84:	26 0d       	add	r18, r6
    2f86:	37 1d       	adc	r19, r7
    2f88:	39 01       	movw	r6, r18
    2f8a:	76 94       	lsr	r7
    2f8c:	76 2c       	mov	r7, r6
    2f8e:	66 24       	eor	r6, r6
    2f90:	77 94       	ror	r7
    2f92:	67 94       	ror	r6
    2f94:	0f 2e       	mov	r0, r31
    2f96:	f8 ea       	ldi	r31, 0xA8	; 168
    2f98:	5f 2e       	mov	r5, r31
    2f9a:	f0 2d       	mov	r31, r0
    2f9c:	be 01       	movw	r22, r28
    2f9e:	68 55       	subi	r22, 0x58	; 88
    2fa0:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa2:	8e 01       	movw	r16, r28
    2fa4:	0f 5f       	subi	r16, 0xFF	; 255
    2fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e0 55       	subi	r30, 0x50	; 80
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	98 01       	movw	r18, r16
    2fb0:	db 01       	movw	r26, r22
    2fb2:	4d 91       	ld	r20, X+
    2fb4:	bd 01       	movw	r22, r26
    2fb6:	d9 01       	movw	r26, r18
    2fb8:	4d 93       	st	X+, r20
    2fba:	9d 01       	movw	r18, r26
    2fbc:	6e 17       	cp	r22, r30
    2fbe:	7f 07       	cpc	r23, r31
    2fc0:	b9 f7       	brne	.-18     	; 0x2fb0 <eepromSavePattern+0xb0>
    2fc2:	de 01       	movw	r26, r28
    2fc4:	19 96       	adiw	r26, 0x09	; 9
    2fc6:	9e 01       	movw	r18, r28
    2fc8:	28 54       	subi	r18, 0x48	; 72
    2fca:	3f 4f       	sbci	r19, 0xFF	; 255
    2fcc:	41 91       	ld	r20, Z+
    2fce:	4d 93       	st	X+, r20
    2fd0:	e2 17       	cp	r30, r18
    2fd2:	f3 07       	cpc	r31, r19
    2fd4:	d9 f7       	brne	.-10     	; 0x2fcc <eepromSavePattern+0xcc>
    2fd6:	4e 01       	movw	r8, r28
    2fd8:	b1 e1       	ldi	r27, 0x11	; 17
    2fda:	8b 0e       	add	r8, r27
    2fdc:	91 1c       	adc	r9, r1
    2fde:	7e 01       	movw	r14, r28
    2fe0:	e0 ec       	ldi	r30, 0xC0	; 192
    2fe2:	ee 0e       	add	r14, r30
    2fe4:	f1 1c       	adc	r15, r1
    2fe6:	d4 01       	movw	r26, r8
    2fe8:	f9 01       	movw	r30, r18
    2fea:	41 91       	ld	r20, Z+
    2fec:	9f 01       	movw	r18, r30
    2fee:	4d 93       	st	X+, r20
    2ff0:	ee 15       	cp	r30, r14
    2ff2:	ff 05       	cpc	r31, r15
    2ff4:	c9 f7       	brne	.-14     	; 0x2fe8 <eepromSavePattern+0xe8>
    2ff6:	9e 01       	movw	r18, r28
    2ff8:	27 5e       	subi	r18, 0xE7	; 231
    2ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffc:	be 01       	movw	r22, r28
    2ffe:	60 53       	subi	r22, 0x30	; 48
    3000:	7f 4f       	sbci	r23, 0xFF	; 255
    3002:	d7 01       	movw	r26, r14
    3004:	4d 91       	ld	r20, X+
    3006:	7d 01       	movw	r14, r26
    3008:	f9 01       	movw	r30, r18
    300a:	41 93       	st	Z+, r20
    300c:	9f 01       	movw	r18, r30
    300e:	a6 17       	cp	r26, r22
    3010:	b7 07       	cpc	r27, r23
    3012:	b9 f7       	brne	.-18     	; 0x3002 <eepromSavePattern+0x102>
    3014:	9e 01       	movw	r18, r28
    3016:	27 5d       	subi	r18, 0xD7	; 215
    3018:	3f 4f       	sbci	r19, 0xFF	; 255
    301a:	de 01       	movw	r26, r28
    301c:	a0 52       	subi	r26, 0x20	; 32
    301e:	bf 4f       	sbci	r27, 0xFF	; 255
    3020:	fb 01       	movw	r30, r22
    3022:	41 91       	ld	r20, Z+
    3024:	bf 01       	movw	r22, r30
    3026:	f9 01       	movw	r30, r18
    3028:	41 93       	st	Z+, r20
    302a:	9f 01       	movw	r18, r30
    302c:	6a 17       	cp	r22, r26
    302e:	7b 07       	cpc	r23, r27
    3030:	b9 f7       	brne	.-18     	; 0x3020 <eepromSavePattern+0x120>
    3032:	9e 01       	movw	r18, r28
    3034:	27 5c       	subi	r18, 0xC7	; 199
    3036:	3f 4f       	sbci	r19, 0xFF	; 255
    3038:	be 01       	movw	r22, r28
    303a:	60 51       	subi	r22, 0x10	; 16
    303c:	7f 4f       	sbci	r23, 0xFF	; 255
    303e:	4d 91       	ld	r20, X+
    3040:	f9 01       	movw	r30, r18
    3042:	41 93       	st	Z+, r20
    3044:	9f 01       	movw	r18, r30
    3046:	a6 17       	cp	r26, r22
    3048:	b7 07       	cpc	r27, r23
    304a:	c9 f7       	brne	.-14     	; 0x303e <eepromSavePattern+0x13e>
    304c:	9e 01       	movw	r18, r28
    304e:	27 5b       	subi	r18, 0xB7	; 183
    3050:	3f 4f       	sbci	r19, 0xFF	; 255
    3052:	de 01       	movw	r26, r28
    3054:	b3 95       	inc	r27
    3056:	fb 01       	movw	r30, r22
    3058:	41 91       	ld	r20, Z+
    305a:	bf 01       	movw	r22, r30
    305c:	f9 01       	movw	r30, r18
    305e:	41 93       	st	Z+, r20
    3060:	9f 01       	movw	r18, r30
    3062:	6a 17       	cp	r22, r26
    3064:	7b 07       	cpc	r23, r27
    3066:	b9 f7       	brne	.-18     	; 0x3056 <eepromSavePattern+0x156>
    3068:	9e 01       	movw	r18, r28
    306a:	27 5a       	subi	r18, 0xA7	; 167
    306c:	3f 4f       	sbci	r19, 0xFF	; 255
    306e:	be 01       	movw	r22, r28
    3070:	60 5f       	subi	r22, 0xF0	; 240
    3072:	7e 4f       	sbci	r23, 0xFE	; 254
    3074:	4d 91       	ld	r20, X+
    3076:	f9 01       	movw	r30, r18
    3078:	41 93       	st	Z+, r20
    307a:	9f 01       	movw	r18, r30
    307c:	a6 17       	cp	r26, r22
    307e:	b7 07       	cpc	r27, r23
    3080:	c9 f7       	brne	.-14     	; 0x3074 <eepromSavePattern+0x174>
    3082:	de 01       	movw	r26, r28
    3084:	a7 59       	subi	r26, 0x97	; 151
    3086:	bf 4f       	sbci	r27, 0xFF	; 255
    3088:	5e 01       	movw	r10, r28
    308a:	f0 ee       	ldi	r31, 0xE0	; 224
    308c:	af 1a       	sub	r10, r31
    308e:	fe ef       	ldi	r31, 0xFE	; 254
    3090:	bf 0a       	sbc	r11, r31
    3092:	fb 01       	movw	r30, r22
    3094:	21 91       	ld	r18, Z+
    3096:	bf 01       	movw	r22, r30
    3098:	2d 93       	st	X+, r18
    309a:	ea 15       	cp	r30, r10
    309c:	fb 05       	cpc	r31, r11
    309e:	c9 f7       	brne	.-14     	; 0x3092 <eepromSavePattern+0x192>
    30a0:	eb 96       	adiw	r28, 0x3b	; 59
    30a2:	9f af       	std	Y+63, r25	; 0x3f
    30a4:	eb 97       	sbiw	r28, 0x3b	; 59
    30a6:	ec 96       	adiw	r28, 0x3c	; 60
    30a8:	8f af       	std	Y+63, r24	; 0x3f
    30aa:	ec 97       	sbiw	r28, 0x3c	; 60
    30ac:	ce 58       	subi	r28, 0x8E	; 142
    30ae:	de 4f       	sbci	r29, 0xFE	; 254
    30b0:	88 81       	ld	r24, Y
    30b2:	c2 57       	subi	r28, 0x72	; 114
    30b4:	d1 40       	sbci	r29, 0x01	; 1
    30b6:	ed 96       	adiw	r28, 0x3d	; 61
    30b8:	8f af       	std	Y+63, r24	; 0x3f
    30ba:	ed 97       	sbiw	r28, 0x3d	; 61
    30bc:	85 2d       	mov	r24, r5
    30be:	c8 de       	rcall	.-624    	; 0x2e50 <twi_start>
    30c0:	81 30       	cpi	r24, 0x01	; 1
    30c2:	81 f4       	brne	.+32     	; 0x30e4 <eepromSavePattern+0x1e4>
    30c4:	84 e1       	ldi	r24, 0x14	; 20
    30c6:	e7 e0       	ldi	r30, 0x07	; 7
    30c8:	f2 e0       	ldi	r31, 0x02	; 2
    30ca:	de 01       	movw	r26, r28
    30cc:	af 57       	subi	r26, 0x7F	; 127
    30ce:	bf 4f       	sbci	r27, 0xFF	; 255
    30d0:	01 90       	ld	r0, Z+
    30d2:	0d 92       	st	X+, r0
    30d4:	8a 95       	dec	r24
    30d6:	e1 f7       	brne	.-8      	; 0x30d0 <eepromSavePattern+0x1d0>
    30d8:	63 e0       	ldi	r22, 0x03	; 3
    30da:	70 e0       	ldi	r23, 0x00	; 0
    30dc:	ce 01       	movw	r24, r28
    30de:	8f 57       	subi	r24, 0x7F	; 127
    30e0:	9f 4f       	sbci	r25, 0xFF	; 255
    30e2:	e1 d8       	rcall	.-3646   	; 0x22a6 <outputS>
    30e4:	87 2d       	mov	r24, r7
    30e6:	e4 de       	rcall	.-568    	; 0x2eb0 <twi_write>
    30e8:	46 2c       	mov	r4, r6
    30ea:	86 2d       	mov	r24, r6
    30ec:	e1 de       	rcall	.-574    	; 0x2eb0 <twi_write>
    30ee:	6e 01       	movw	r12, r28
    30f0:	fd e7       	ldi	r31, 0x7D	; 125
    30f2:	cf 0e       	add	r12, r31
    30f4:	d1 1c       	adc	r13, r1
    30f6:	78 01       	movw	r14, r16
    30f8:	d7 01       	movw	r26, r14
    30fa:	8d 91       	ld	r24, X+
    30fc:	7d 01       	movw	r14, r26
    30fe:	d8 de       	rcall	.-592    	; 0x2eb0 <twi_write>
    3100:	ce 14       	cp	r12, r14
    3102:	df 04       	cpc	r13, r15
    3104:	c9 f7       	brne	.-14     	; 0x30f8 <eepromSavePattern+0x1f8>
    3106:	cb de       	rcall	.-618    	; 0x2e9e <twi_stop>
    3108:	ef e1       	ldi	r30, 0x1F	; 31
    310a:	fe e4       	ldi	r31, 0x4E	; 78
    310c:	31 97       	sbiw	r30, 0x01	; 1
    310e:	f1 f7       	brne	.-4      	; 0x310c <eepromSavePattern+0x20c>
    3110:	00 c0       	rjmp	.+0      	; 0x3112 <eepromSavePattern+0x212>
    3112:	00 00       	nop
    3114:	9e 01       	movw	r18, r28
    3116:	20 5d       	subi	r18, 0xD0	; 208
    3118:	3e 4f       	sbci	r19, 0xFE	; 254
    311a:	f8 01       	movw	r30, r16
    311c:	d5 01       	movw	r26, r10
    311e:	8d 91       	ld	r24, X+
    3120:	5d 01       	movw	r10, r26
    3122:	81 93       	st	Z+, r24
    3124:	2a 17       	cp	r18, r26
    3126:	3b 07       	cpc	r19, r27
    3128:	c9 f7       	brne	.-14     	; 0x311c <eepromSavePattern+0x21c>
    312a:	de 01       	movw	r26, r28
    312c:	91 96       	adiw	r26, 0x21	; 33
    312e:	f9 01       	movw	r30, r18
    3130:	81 91       	ld	r24, Z+
    3132:	9f 01       	movw	r18, r30
    3134:	f4 01       	movw	r30, r8
    3136:	81 93       	st	Z+, r24
    3138:	4f 01       	movw	r8, r30
    313a:	ae 17       	cp	r26, r30
    313c:	bf 07       	cpc	r27, r31
    313e:	b9 f7       	brne	.-18     	; 0x312e <eepromSavePattern+0x22e>
    3140:	ce 01       	movw	r24, r28
    3142:	80 5c       	subi	r24, 0xC0	; 192
    3144:	9e 4f       	sbci	r25, 0xFE	; 254
    3146:	ae 01       	movw	r20, r28
    3148:	4f 5c       	subi	r20, 0xCF	; 207
    314a:	5f 4f       	sbci	r21, 0xFF	; 255
    314c:	fc 01       	movw	r30, r24
    314e:	21 91       	ld	r18, Z+
    3150:	cf 01       	movw	r24, r30
    3152:	2d 93       	st	X+, r18
    3154:	a4 17       	cp	r26, r20
    3156:	b5 07       	cpc	r27, r21
    3158:	c9 f7       	brne	.-14     	; 0x314c <eepromSavePattern+0x24c>
    315a:	ce 01       	movw	r24, r28
    315c:	80 5b       	subi	r24, 0xB0	; 176
    315e:	9e 4f       	sbci	r25, 0xFE	; 254
    3160:	de 01       	movw	r26, r28
    3162:	af 5b       	subi	r26, 0xBF	; 191
    3164:	bf 4f       	sbci	r27, 0xFF	; 255
    3166:	fc 01       	movw	r30, r24
    3168:	21 91       	ld	r18, Z+
    316a:	cf 01       	movw	r24, r30
    316c:	fa 01       	movw	r30, r20
    316e:	21 93       	st	Z+, r18
    3170:	af 01       	movw	r20, r30
    3172:	ea 17       	cp	r30, r26
    3174:	fb 07       	cpc	r31, r27
    3176:	b9 f7       	brne	.-18     	; 0x3166 <eepromSavePattern+0x266>
    3178:	fe 01       	movw	r30, r28
    317a:	e0 5a       	subi	r30, 0xA0	; 160
    317c:	fe 4f       	sbci	r31, 0xFE	; 254
    317e:	9e 01       	movw	r18, r28
    3180:	20 59       	subi	r18, 0x90	; 144
    3182:	3e 4f       	sbci	r19, 0xFE	; 254
    3184:	81 91       	ld	r24, Z+
    3186:	8d 93       	st	X+, r24
    3188:	2e 17       	cp	r18, r30
    318a:	3f 07       	cpc	r19, r31
    318c:	d9 f7       	brne	.-10     	; 0x3184 <eepromSavePattern+0x284>
    318e:	ae 01       	movw	r20, r28
    3190:	4d 58       	subi	r20, 0x8D	; 141
    3192:	5e 4f       	sbci	r21, 0xFE	; 254
    3194:	ce 01       	movw	r24, r28
    3196:	8f 5a       	subi	r24, 0xAF	; 175
    3198:	9f 4f       	sbci	r25, 0xFF	; 255
    319a:	de 01       	movw	r26, r28
    319c:	ad 57       	subi	r26, 0x7D	; 125
    319e:	be 4f       	sbci	r27, 0xFE	; 254
    31a0:	fa 01       	movw	r30, r20
    31a2:	21 91       	ld	r18, Z+
    31a4:	af 01       	movw	r20, r30
    31a6:	fc 01       	movw	r30, r24
    31a8:	21 93       	st	Z+, r18
    31aa:	cf 01       	movw	r24, r30
    31ac:	a4 17       	cp	r26, r20
    31ae:	b5 07       	cpc	r27, r21
    31b0:	b9 f7       	brne	.-18     	; 0x31a0 <eepromSavePattern+0x2a0>
    31b2:	ce 01       	movw	r24, r28
    31b4:	8f 59       	subi	r24, 0x9F	; 159
    31b6:	9f 4f       	sbci	r25, 0xFF	; 255
    31b8:	ae 01       	movw	r20, r28
    31ba:	4d 56       	subi	r20, 0x6D	; 109
    31bc:	5e 4f       	sbci	r21, 0xFE	; 254
    31be:	2d 91       	ld	r18, X+
    31c0:	fc 01       	movw	r30, r24
    31c2:	21 93       	st	Z+, r18
    31c4:	cf 01       	movw	r24, r30
    31c6:	a4 17       	cp	r26, r20
    31c8:	b5 07       	cpc	r27, r21
    31ca:	c9 f7       	brne	.-14     	; 0x31be <eepromSavePattern+0x2be>
    31cc:	de 01       	movw	r26, r28
    31ce:	af 58       	subi	r26, 0x8F	; 143
    31d0:	bf 4f       	sbci	r27, 0xFF	; 255
    31d2:	7e 01       	movw	r14, r28
    31d4:	fd e5       	ldi	r31, 0x5D	; 93
    31d6:	ef 1a       	sub	r14, r31
    31d8:	fe ef       	ldi	r31, 0xFE	; 254
    31da:	ff 0a       	sbc	r15, r31
    31dc:	fa 01       	movw	r30, r20
    31de:	81 91       	ld	r24, Z+
    31e0:	af 01       	movw	r20, r30
    31e2:	8d 93       	st	X+, r24
    31e4:	ee 16       	cp	r14, r30
    31e6:	ff 06       	cpc	r15, r31
    31e8:	c9 f7       	brne	.-14     	; 0x31dc <eepromSavePattern+0x2dc>
    31ea:	85 2d       	mov	r24, r5
    31ec:	31 de       	rcall	.-926    	; 0x2e50 <twi_start>
    31ee:	81 30       	cpi	r24, 0x01	; 1
    31f0:	81 f4       	brne	.+32     	; 0x3212 <eepromSavePattern+0x312>
    31f2:	84 e1       	ldi	r24, 0x14	; 20
    31f4:	ec e1       	ldi	r30, 0x1C	; 28
    31f6:	f2 e0       	ldi	r31, 0x02	; 2
    31f8:	de 01       	movw	r26, r28
    31fa:	af 57       	subi	r26, 0x7F	; 127
    31fc:	bf 4f       	sbci	r27, 0xFF	; 255
    31fe:	01 90       	ld	r0, Z+
    3200:	0d 92       	st	X+, r0
    3202:	8a 95       	dec	r24
    3204:	e1 f7       	brne	.-8      	; 0x31fe <eepromSavePattern+0x2fe>
    3206:	63 e0       	ldi	r22, 0x03	; 3
    3208:	70 e0       	ldi	r23, 0x00	; 0
    320a:	ce 01       	movw	r24, r28
    320c:	8f 57       	subi	r24, 0x7F	; 127
    320e:	9f 4f       	sbci	r25, 0xFF	; 255
    3210:	4a d8       	rcall	.-3948   	; 0x22a6 <outputS>
    3212:	c3 01       	movw	r24, r6
    3214:	80 58       	subi	r24, 0x80	; 128
    3216:	9f 4f       	sbci	r25, 0xFF	; 255
    3218:	89 2f       	mov	r24, r25
    321a:	4a de       	rcall	.-876    	; 0x2eb0 <twi_write>
    321c:	80 e8       	ldi	r24, 0x80	; 128
    321e:	84 0d       	add	r24, r4
    3220:	47 de       	rcall	.-882    	; 0x2eb0 <twi_write>
    3222:	6e 01       	movw	r12, r28
    3224:	f1 e8       	ldi	r31, 0x81	; 129
    3226:	cf 0e       	add	r12, r31
    3228:	d1 1c       	adc	r13, r1
    322a:	d8 01       	movw	r26, r16
    322c:	8d 91       	ld	r24, X+
    322e:	8d 01       	movw	r16, r26
    3230:	3f de       	rcall	.-898    	; 0x2eb0 <twi_write>
    3232:	c0 16       	cp	r12, r16
    3234:	d1 06       	cpc	r13, r17
    3236:	c9 f7       	brne	.-14     	; 0x322a <eepromSavePattern+0x32a>
    3238:	32 de       	rcall	.-924    	; 0x2e9e <twi_stop>
    323a:	ef e1       	ldi	r30, 0x1F	; 31
    323c:	fe e4       	ldi	r31, 0x4E	; 78
    323e:	31 97       	sbiw	r30, 0x01	; 1
    3240:	f1 f7       	brne	.-4      	; 0x323e <eepromSavePattern+0x33e>
    3242:	00 c0       	rjmp	.+0      	; 0x3244 <eepromSavePattern+0x344>
    3244:	00 00       	nop
    3246:	85 2d       	mov	r24, r5
    3248:	03 de       	rcall	.-1018   	; 0x2e50 <twi_start>
    324a:	81 30       	cpi	r24, 0x01	; 1
    324c:	81 f4       	brne	.+32     	; 0x326e <eepromSavePattern+0x36e>
    324e:	84 e1       	ldi	r24, 0x14	; 20
    3250:	e1 e3       	ldi	r30, 0x31	; 49
    3252:	f2 e0       	ldi	r31, 0x02	; 2
    3254:	de 01       	movw	r26, r28
    3256:	af 57       	subi	r26, 0x7F	; 127
    3258:	bf 4f       	sbci	r27, 0xFF	; 255
    325a:	01 90       	ld	r0, Z+
    325c:	0d 92       	st	X+, r0
    325e:	8a 95       	dec	r24
    3260:	e1 f7       	brne	.-8      	; 0x325a <eepromSavePattern+0x35a>
    3262:	63 e0       	ldi	r22, 0x03	; 3
    3264:	70 e0       	ldi	r23, 0x00	; 0
    3266:	ce 01       	movw	r24, r28
    3268:	8f 57       	subi	r24, 0x7F	; 127
    326a:	9f 4f       	sbci	r25, 0xFF	; 255
    326c:	1c d8       	rcall	.-4040   	; 0x22a6 <outputS>
    326e:	73 94       	inc	r7
    3270:	87 2d       	mov	r24, r7
    3272:	1e de       	rcall	.-964    	; 0x2eb0 <twi_write>
    3274:	84 2d       	mov	r24, r4
    3276:	1c de       	rcall	.-968    	; 0x2eb0 <twi_write>
    3278:	6e 01       	movw	r12, r28
    327a:	2d ed       	ldi	r18, 0xDD	; 221
    327c:	c2 1a       	sub	r12, r18
    327e:	2d ef       	ldi	r18, 0xFD	; 253
    3280:	d2 0a       	sbc	r13, r18
    3282:	d7 01       	movw	r26, r14
    3284:	1c 91       	ld	r17, X
    3286:	11 96       	adiw	r26, 0x01	; 1
    3288:	8c 91       	ld	r24, X
    328a:	b2 e0       	ldi	r27, 0x02	; 2
    328c:	eb 0e       	add	r14, r27
    328e:	f1 1c       	adc	r15, r1
    3290:	0f de       	rcall	.-994    	; 0x2eb0 <twi_write>
    3292:	81 2f       	mov	r24, r17
    3294:	0d de       	rcall	.-998    	; 0x2eb0 <twi_write>
    3296:	ce 14       	cp	r12, r14
    3298:	df 04       	cpc	r13, r15
    329a:	99 f7       	brne	.-26     	; 0x3282 <eepromSavePattern+0x382>
    329c:	00 de       	rcall	.-1024   	; 0x2e9e <twi_stop>
    329e:	ef e1       	ldi	r30, 0x1F	; 31
    32a0:	fe e4       	ldi	r31, 0x4E	; 78
    32a2:	31 97       	sbiw	r30, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <eepromSavePattern+0x3a2>
    32a6:	00 c0       	rjmp	.+0      	; 0x32a8 <eepromSavePattern+0x3a8>
    32a8:	00 00       	nop
    32aa:	cc 56       	subi	r28, 0x6C	; 108
    32ac:	df 4f       	sbci	r29, 0xFF	; 255
    32ae:	0f b6       	in	r0, 0x3f	; 63
    32b0:	f8 94       	cli
    32b2:	de bf       	out	0x3e, r29	; 62
    32b4:	0f be       	out	0x3f, r0	; 63
    32b6:	cd bf       	out	0x3d, r28	; 61
    32b8:	df 91       	pop	r29
    32ba:	cf 91       	pop	r28
    32bc:	1f 91       	pop	r17
    32be:	0f 91       	pop	r16
    32c0:	ff 90       	pop	r15
    32c2:	ef 90       	pop	r14
    32c4:	df 90       	pop	r13
    32c6:	cf 90       	pop	r12
    32c8:	bf 90       	pop	r11
    32ca:	af 90       	pop	r10
    32cc:	9f 90       	pop	r9
    32ce:	8f 90       	pop	r8
    32d0:	7f 90       	pop	r7
    32d2:	6f 90       	pop	r6
    32d4:	5f 90       	pop	r5
    32d6:	4f 90       	pop	r4
    32d8:	08 95       	ret

000032da <eepromLoadPattern>:
    32da:	8f 92       	push	r8
    32dc:	9f 92       	push	r9
    32de:	af 92       	push	r10
    32e0:	bf 92       	push	r11
    32e2:	cf 92       	push	r12
    32e4:	df 92       	push	r13
    32e6:	ef 92       	push	r14
    32e8:	ff 92       	push	r15
    32ea:	0f 93       	push	r16
    32ec:	1f 93       	push	r17
    32ee:	cf 93       	push	r28
    32f0:	df 93       	push	r29
    32f2:	cd b7       	in	r28, 0x3d	; 61
    32f4:	de b7       	in	r29, 0x3e	; 62
    32f6:	c4 59       	subi	r28, 0x94	; 148
    32f8:	d1 40       	sbci	r29, 0x01	; 1
    32fa:	0f b6       	in	r0, 0x3f	; 63
    32fc:	f8 94       	cli
    32fe:	de bf       	out	0x3e, r29	; 62
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	cd bf       	out	0x3d, r28	; 61
    3304:	7c 01       	movw	r14, r24
    3306:	86 2f       	mov	r24, r22
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	66 23       	and	r22, r22
    330c:	84 f0       	brlt	.+32     	; 0x332e <eepromLoadPattern+0x54>
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	9c 01       	movw	r18, r24
    3312:	22 0f       	add	r18, r18
    3314:	33 1f       	adc	r19, r19
    3316:	82 0f       	add	r24, r18
    3318:	93 1f       	adc	r25, r19
    331a:	96 95       	lsr	r25
    331c:	98 2f       	mov	r25, r24
    331e:	88 27       	eor	r24, r24
    3320:	97 95       	ror	r25
    3322:	87 95       	ror	r24
    3324:	08 2f       	mov	r16, r24
    3326:	d9 2e       	mov	r13, r25
    3328:	80 ea       	ldi	r24, 0xA0	; 160
    332a:	11 ea       	ldi	r17, 0xA1	; 161
    332c:	10 c0       	rjmp	.+32     	; 0x334e <eepromLoadPattern+0x74>
    332e:	80 58       	subi	r24, 0x80	; 128
    3330:	91 09       	sbc	r25, r1
    3332:	9c 01       	movw	r18, r24
    3334:	22 0f       	add	r18, r18
    3336:	33 1f       	adc	r19, r19
    3338:	82 0f       	add	r24, r18
    333a:	93 1f       	adc	r25, r19
    333c:	96 95       	lsr	r25
    333e:	98 2f       	mov	r25, r24
    3340:	88 27       	eor	r24, r24
    3342:	97 95       	ror	r25
    3344:	87 95       	ror	r24
    3346:	08 2f       	mov	r16, r24
    3348:	d9 2e       	mov	r13, r25
    334a:	88 ea       	ldi	r24, 0xA8	; 168
    334c:	19 ea       	ldi	r17, 0xA9	; 169
    334e:	80 dd       	rcall	.-1280   	; 0x2e50 <twi_start>
    3350:	81 30       	cpi	r24, 0x01	; 1
    3352:	31 f4       	brne	.+12     	; 0x3360 <eepromLoadPattern+0x86>
    3354:	63 e0       	ldi	r22, 0x03	; 3
    3356:	70 e0       	ldi	r23, 0x00	; 0
    3358:	87 eb       	ldi	r24, 0xB7	; 183
    335a:	93 e0       	ldi	r25, 0x03	; 3
    335c:	0e 94 53 11 	call	0x22a6	; 0x22a6 <outputS>
    3360:	8d 2d       	mov	r24, r13
    3362:	a6 dd       	rcall	.-1204   	; 0x2eb0 <twi_write>
    3364:	80 2f       	mov	r24, r16
    3366:	a4 dd       	rcall	.-1208   	; 0x2eb0 <twi_write>
    3368:	81 2f       	mov	r24, r17
    336a:	72 dd       	rcall	.-1308   	; 0x2e50 <twi_start>
    336c:	81 30       	cpi	r24, 0x01	; 1
    336e:	09 f0       	breq	.+2      	; 0x3372 <eepromLoadPattern+0x98>
    3370:	48 c1       	rjmp	.+656    	; 0x3602 <eepromLoadPattern+0x328>
    3372:	84 e1       	ldi	r24, 0x14	; 20
    3374:	e6 e4       	ldi	r30, 0x46	; 70
    3376:	f2 e0       	ldi	r31, 0x02	; 2
    3378:	de 01       	movw	r26, r28
    337a:	af 57       	subi	r26, 0x7F	; 127
    337c:	be 4f       	sbci	r27, 0xFE	; 254
    337e:	01 90       	ld	r0, Z+
    3380:	0d 92       	st	X+, r0
    3382:	8a 95       	dec	r24
    3384:	e1 f7       	brne	.-8      	; 0x337e <eepromLoadPattern+0xa4>
    3386:	63 e0       	ldi	r22, 0x03	; 3
    3388:	70 e0       	ldi	r23, 0x00	; 0
    338a:	ce 01       	movw	r24, r28
    338c:	8f 57       	subi	r24, 0x7F	; 127
    338e:	9e 4f       	sbci	r25, 0xFE	; 254
    3390:	0e 94 53 11 	call	0x22a6	; 0x22a6 <outputS>
    3394:	36 c1       	rjmp	.+620    	; 0x3602 <eepromLoadPattern+0x328>
    3396:	9e dd       	rcall	.-1220   	; 0x2ed4 <twi_readAck>
    3398:	d8 01       	movw	r26, r16
    339a:	8d 93       	st	X+, r24
    339c:	8d 01       	movw	r16, r26
    339e:	ac 15       	cp	r26, r12
    33a0:	bd 05       	cpc	r27, r13
    33a2:	c9 f7       	brne	.-14     	; 0x3396 <eepromLoadPattern+0xbc>
    33a4:	a2 dd       	rcall	.-1212   	; 0x2eea <twi_readNak>
    33a6:	c0 58       	subi	r28, 0x80	; 128
    33a8:	de 4f       	sbci	r29, 0xFE	; 254
    33aa:	88 83       	st	Y, r24
    33ac:	c0 58       	subi	r28, 0x80	; 128
    33ae:	d1 40       	sbci	r29, 0x01	; 1
    33b0:	76 dd       	rcall	.-1300   	; 0x2e9e <twi_stop>
    33b2:	87 01       	movw	r16, r14
    33b4:	4e 01       	movw	r8, r28
    33b6:	b9 e0       	ldi	r27, 0x09	; 9
    33b8:	8b 0e       	add	r8, r27
    33ba:	91 1c       	adc	r9, r1
    33bc:	f7 01       	movw	r30, r14
    33be:	d5 01       	movw	r26, r10
    33c0:	8d 91       	ld	r24, X+
    33c2:	5d 01       	movw	r10, r26
    33c4:	81 93       	st	Z+, r24
    33c6:	a8 15       	cp	r26, r8
    33c8:	b9 05       	cpc	r27, r9
    33ca:	c9 f7       	brne	.-14     	; 0x33be <eepromLoadPattern+0xe4>
    33cc:	d1 2c       	mov	r13, r1
    33ce:	f4 01       	movw	r30, r8
    33d0:	81 91       	ld	r24, Z+
    33d2:	4f 01       	movw	r8, r30
    33d4:	f8 01       	movw	r30, r16
    33d6:	80 87       	std	Z+8, r24	; 0x08
    33d8:	4d 2d       	mov	r20, r13
    33da:	60 81       	ld	r22, Z
    33dc:	0f 5f       	subi	r16, 0xFF	; 255
    33de:	1f 4f       	sbci	r17, 0xFF	; 255
    33e0:	bb da       	rcall	.-2698   	; 0x2958 <setOutputVolume>
    33e2:	d3 94       	inc	r13
    33e4:	f8 e0       	ldi	r31, 0x08	; 8
    33e6:	df 12       	cpse	r13, r31
    33e8:	f2 cf       	rjmp	.-28     	; 0x33ce <eepromLoadPattern+0xf4>
    33ea:	5e 01       	movw	r10, r28
    33ec:	81 e1       	ldi	r24, 0x11	; 17
    33ee:	a8 0e       	add	r10, r24
    33f0:	b1 1c       	adc	r11, r1
    33f2:	67 01       	movw	r12, r14
    33f4:	90 e1       	ldi	r25, 0x10	; 16
    33f6:	c9 0e       	add	r12, r25
    33f8:	d1 1c       	adc	r13, r1
    33fa:	10 e0       	ldi	r17, 0x00	; 0
    33fc:	d5 01       	movw	r26, r10
    33fe:	4d 91       	ld	r20, X+
    3400:	5d 01       	movw	r10, r26
    3402:	f6 01       	movw	r30, r12
    3404:	41 93       	st	Z+, r20
    3406:	6f 01       	movw	r12, r30
    3408:	60 e0       	ldi	r22, 0x00	; 0
    340a:	81 2f       	mov	r24, r17
    340c:	1c db       	rcall	.-2504   	; 0x2a46 <outputSampleRate>
    340e:	1f 5f       	subi	r17, 0xFF	; 255
    3410:	18 30       	cpi	r17, 0x08	; 8
    3412:	a1 f7       	brne	.-24     	; 0x33fc <eepromLoadPattern+0x122>
    3414:	fe 01       	movw	r30, r28
    3416:	79 96       	adiw	r30, 0x19	; 25
    3418:	c7 01       	movw	r24, r14
    341a:	48 96       	adiw	r24, 0x18	; 24
    341c:	ae 01       	movw	r20, r28
    341e:	47 5d       	subi	r20, 0xD7	; 215
    3420:	5f 4f       	sbci	r21, 0xFF	; 255
    3422:	21 91       	ld	r18, Z+
    3424:	dc 01       	movw	r26, r24
    3426:	2d 93       	st	X+, r18
    3428:	cd 01       	movw	r24, r26
    342a:	e4 17       	cp	r30, r20
    342c:	f5 07       	cpc	r31, r21
    342e:	c9 f7       	brne	.-14     	; 0x3422 <eepromLoadPattern+0x148>
    3430:	57 01       	movw	r10, r14
    3432:	b8 e2       	ldi	r27, 0x28	; 40
    3434:	ab 0e       	add	r10, r27
    3436:	b1 1c       	adc	r11, r1
    3438:	de 01       	movw	r26, r28
    343a:	d9 96       	adiw	r26, 0x39	; 57
    343c:	c5 01       	movw	r24, r10
    343e:	fa 01       	movw	r30, r20
    3440:	21 91       	ld	r18, Z+
    3442:	af 01       	movw	r20, r30
    3444:	fc 01       	movw	r30, r24
    3446:	21 93       	st	Z+, r18
    3448:	cf 01       	movw	r24, r30
    344a:	4a 17       	cp	r20, r26
    344c:	5b 07       	cpc	r21, r27
    344e:	b9 f7       	brne	.-18     	; 0x343e <eepromLoadPattern+0x164>
    3450:	c7 01       	movw	r24, r14
    3452:	c8 96       	adiw	r24, 0x38	; 56
    3454:	ae 01       	movw	r20, r28
    3456:	47 5b       	subi	r20, 0xB7	; 183
    3458:	5f 4f       	sbci	r21, 0xFF	; 255
    345a:	2d 91       	ld	r18, X+
    345c:	fc 01       	movw	r30, r24
    345e:	21 93       	st	Z+, r18
    3460:	cf 01       	movw	r24, r30
    3462:	a4 17       	cp	r26, r20
    3464:	b5 07       	cpc	r27, r21
    3466:	c9 f7       	brne	.-14     	; 0x345a <eepromLoadPattern+0x180>
    3468:	c7 01       	movw	r24, r14
    346a:	88 5b       	subi	r24, 0xB8	; 184
    346c:	9f 4f       	sbci	r25, 0xFF	; 255
    346e:	de 01       	movw	r26, r28
    3470:	a7 5a       	subi	r26, 0xA7	; 167
    3472:	bf 4f       	sbci	r27, 0xFF	; 255
    3474:	fa 01       	movw	r30, r20
    3476:	21 91       	ld	r18, Z+
    3478:	af 01       	movw	r20, r30
    347a:	fc 01       	movw	r30, r24
    347c:	21 93       	st	Z+, r18
    347e:	cf 01       	movw	r24, r30
    3480:	4a 17       	cp	r20, r26
    3482:	5b 07       	cpc	r21, r27
    3484:	b9 f7       	brne	.-18     	; 0x3474 <eepromLoadPattern+0x19a>
    3486:	c7 01       	movw	r24, r14
    3488:	88 5a       	subi	r24, 0xA8	; 168
    348a:	9f 4f       	sbci	r25, 0xFF	; 255
    348c:	ae 01       	movw	r20, r28
    348e:	47 59       	subi	r20, 0x97	; 151
    3490:	5f 4f       	sbci	r21, 0xFF	; 255
    3492:	2d 91       	ld	r18, X+
    3494:	fc 01       	movw	r30, r24
    3496:	21 93       	st	Z+, r18
    3498:	cf 01       	movw	r24, r30
    349a:	a4 17       	cp	r26, r20
    349c:	b5 07       	cpc	r27, r21
    349e:	c9 f7       	brne	.-14     	; 0x3492 <eepromLoadPattern+0x1b8>
    34a0:	d7 01       	movw	r26, r14
    34a2:	a8 59       	subi	r26, 0x98	; 152
    34a4:	bf 4f       	sbci	r27, 0xFF	; 255
    34a6:	9e 01       	movw	r18, r28
    34a8:	27 58       	subi	r18, 0x87	; 135
    34aa:	3f 4f       	sbci	r19, 0xFF	; 255
    34ac:	fa 01       	movw	r30, r20
    34ae:	81 91       	ld	r24, Z+
    34b0:	af 01       	movw	r20, r30
    34b2:	8d 93       	st	X+, r24
    34b4:	e2 17       	cp	r30, r18
    34b6:	f3 07       	cpc	r31, r19
    34b8:	c9 f7       	brne	.-14     	; 0x34ac <eepromLoadPattern+0x1d2>
    34ba:	f7 01       	movw	r30, r14
    34bc:	e8 53       	subi	r30, 0x38	; 56
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	eb 96       	adiw	r28, 0x3b	; 59
    34c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    34c4:	eb 97       	sbiw	r28, 0x3b	; 59
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	98 2f       	mov	r25, r24
    34ca:	88 27       	eor	r24, r24
    34cc:	ec 96       	adiw	r28, 0x3c	; 60
    34ce:	2f ad       	ldd	r18, Y+63	; 0x3f
    34d0:	ec 97       	sbiw	r28, 0x3c	; 60
    34d2:	82 2b       	or	r24, r18
    34d4:	91 83       	std	Z+1, r25	; 0x01
    34d6:	80 83       	st	Z, r24
    34d8:	ed 96       	adiw	r28, 0x3d	; 61
    34da:	8f ad       	ldd	r24, Y+63	; 0x3f
    34dc:	ed 97       	sbiw	r28, 0x3d	; 61
    34de:	32 96       	adiw	r30, 0x02	; 2
    34e0:	80 83       	st	Z, r24
    34e2:	ae 01       	movw	r20, r28
    34e4:	4f 57       	subi	r20, 0x7F	; 127
    34e6:	5f 4f       	sbci	r21, 0xFF	; 255
    34e8:	c7 01       	movw	r24, r14
    34ea:	88 58       	subi	r24, 0x88	; 136
    34ec:	9f 4f       	sbci	r25, 0xFF	; 255
    34ee:	fe 01       	movw	r30, r28
    34f0:	ef 56       	subi	r30, 0x6F	; 111
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	da 01       	movw	r26, r20
    34f6:	2d 91       	ld	r18, X+
    34f8:	ad 01       	movw	r20, r26
    34fa:	dc 01       	movw	r26, r24
    34fc:	2d 93       	st	X+, r18
    34fe:	cd 01       	movw	r24, r26
    3500:	e4 17       	cp	r30, r20
    3502:	f5 07       	cpc	r31, r21
    3504:	b9 f7       	brne	.-18     	; 0x34f4 <eepromLoadPattern+0x21a>
    3506:	c7 01       	movw	r24, r14
    3508:	88 57       	subi	r24, 0x78	; 120
    350a:	9f 4f       	sbci	r25, 0xFF	; 255
    350c:	ae 01       	movw	r20, r28
    350e:	4f 55       	subi	r20, 0x5F	; 95
    3510:	5f 4f       	sbci	r21, 0xFF	; 255
    3512:	21 91       	ld	r18, Z+
    3514:	dc 01       	movw	r26, r24
    3516:	2d 93       	st	X+, r18
    3518:	cd 01       	movw	r24, r26
    351a:	4e 17       	cp	r20, r30
    351c:	5f 07       	cpc	r21, r31
    351e:	c9 f7       	brne	.-14     	; 0x3512 <eepromLoadPattern+0x238>
    3520:	87 01       	movw	r16, r14
    3522:	08 56       	subi	r16, 0x68	; 104
    3524:	1f 4f       	sbci	r17, 0xFF	; 255
    3526:	4e 01       	movw	r8, r28
    3528:	b1 eb       	ldi	r27, 0xB1	; 177
    352a:	8b 0e       	add	r8, r27
    352c:	91 1c       	adc	r9, r1
    352e:	f8 01       	movw	r30, r16
    3530:	da 01       	movw	r26, r20
    3532:	8d 91       	ld	r24, X+
    3534:	ad 01       	movw	r20, r26
    3536:	81 93       	st	Z+, r24
    3538:	8a 16       	cp	r8, r26
    353a:	9b 06       	cpc	r9, r27
    353c:	c9 f7       	brne	.-14     	; 0x3530 <eepromLoadPattern+0x256>
    353e:	6e 01       	movw	r12, r28
    3540:	b1 ec       	ldi	r27, 0xC1	; 193
    3542:	cb 0e       	add	r12, r27
    3544:	d1 1c       	adc	r13, r1
    3546:	f4 01       	movw	r30, r8
    3548:	81 91       	ld	r24, Z+
    354a:	4f 01       	movw	r8, r30
    354c:	f8 01       	movw	r30, r16
    354e:	80 8b       	std	Z+16, r24	; 0x10
    3550:	d5 01       	movw	r26, r10
    3552:	2d 91       	ld	r18, X+
    3554:	5d 01       	movw	r10, r26
    3556:	1f 96       	adiw	r26, 0x0f	; 15
    3558:	4c 91       	ld	r20, X
    355a:	60 81       	ld	r22, Z
    355c:	0f 5f       	subi	r16, 0xFF	; 255
    355e:	1f 4f       	sbci	r17, 0xFF	; 255
    3560:	1f da       	rcall	.-3010   	; 0x29a0 <setTrackVolume>
    3562:	c8 14       	cp	r12, r8
    3564:	d9 04       	cpc	r13, r9
    3566:	79 f7       	brne	.-34     	; 0x3546 <eepromLoadPattern+0x26c>
    3568:	97 01       	movw	r18, r14
    356a:	28 54       	subi	r18, 0x48	; 72
    356c:	3f 4f       	sbci	r19, 0xFF	; 255
    356e:	de 01       	movw	r26, r28
    3570:	af 52       	subi	r26, 0x2F	; 47
    3572:	bf 4f       	sbci	r27, 0xFF	; 255
    3574:	f6 01       	movw	r30, r12
    3576:	81 91       	ld	r24, Z+
    3578:	6f 01       	movw	r12, r30
    357a:	f9 01       	movw	r30, r18
    357c:	81 93       	st	Z+, r24
    357e:	9f 01       	movw	r18, r30
    3580:	ca 16       	cp	r12, r26
    3582:	db 06       	cpc	r13, r27
    3584:	b9 f7       	brne	.-18     	; 0x3574 <eepromLoadPattern+0x29a>
    3586:	c7 01       	movw	r24, r14
    3588:	85 53       	subi	r24, 0x35	; 53
    358a:	9f 4f       	sbci	r25, 0xFF	; 255
    358c:	ae 01       	movw	r20, r28
    358e:	4f 51       	subi	r20, 0x1F	; 31
    3590:	5f 4f       	sbci	r21, 0xFF	; 255
    3592:	2d 91       	ld	r18, X+
    3594:	fc 01       	movw	r30, r24
    3596:	21 93       	st	Z+, r18
    3598:	cf 01       	movw	r24, r30
    359a:	4a 17       	cp	r20, r26
    359c:	5b 07       	cpc	r21, r27
    359e:	c9 f7       	brne	.-14     	; 0x3592 <eepromLoadPattern+0x2b8>
    35a0:	c7 01       	movw	r24, r14
    35a2:	85 52       	subi	r24, 0x25	; 37
    35a4:	9f 4f       	sbci	r25, 0xFF	; 255
    35a6:	be 01       	movw	r22, r28
    35a8:	6f 50       	subi	r22, 0x0F	; 15
    35aa:	7f 4f       	sbci	r23, 0xFF	; 255
    35ac:	da 01       	movw	r26, r20
    35ae:	2d 91       	ld	r18, X+
    35b0:	ad 01       	movw	r20, r26
    35b2:	fc 01       	movw	r30, r24
    35b4:	21 93       	st	Z+, r18
    35b6:	cf 01       	movw	r24, r30
    35b8:	a6 17       	cp	r26, r22
    35ba:	b7 07       	cpc	r27, r23
    35bc:	b9 f7       	brne	.-18     	; 0x35ac <eepromLoadPattern+0x2d2>
    35be:	c7 01       	movw	r24, r14
    35c0:	85 51       	subi	r24, 0x15	; 21
    35c2:	9f 4f       	sbci	r25, 0xFF	; 255
    35c4:	fe 01       	movw	r30, r28
    35c6:	ef 5f       	subi	r30, 0xFF	; 255
    35c8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ca:	db 01       	movw	r26, r22
    35cc:	2d 91       	ld	r18, X+
    35ce:	bd 01       	movw	r22, r26
    35d0:	dc 01       	movw	r26, r24
    35d2:	2d 93       	st	X+, r18
    35d4:	cd 01       	movw	r24, r26
    35d6:	e6 17       	cp	r30, r22
    35d8:	f7 07       	cpc	r31, r23
    35da:	b9 f7       	brne	.-18     	; 0x35ca <eepromLoadPattern+0x2f0>
    35dc:	d7 01       	movw	r26, r14
    35de:	a5 50       	subi	r26, 0x05	; 5
    35e0:	bf 4f       	sbci	r27, 0xFF	; 255
    35e2:	ae 01       	movw	r20, r28
    35e4:	4f 57       	subi	r20, 0x7F	; 127
    35e6:	5e 4f       	sbci	r21, 0xFE	; 254
    35e8:	80 81       	ld	r24, Z
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	98 2f       	mov	r25, r24
    35ee:	88 27       	eor	r24, r24
    35f0:	21 81       	ldd	r18, Z+1	; 0x01
    35f2:	82 2b       	or	r24, r18
    35f4:	8d 93       	st	X+, r24
    35f6:	9d 93       	st	X+, r25
    35f8:	32 96       	adiw	r30, 0x02	; 2
    35fa:	4e 17       	cp	r20, r30
    35fc:	5f 07       	cpc	r21, r31
    35fe:	a1 f7       	brne	.-24     	; 0x35e8 <eepromLoadPattern+0x30e>
    3600:	0a c0       	rjmp	.+20     	; 0x3616 <eepromLoadPattern+0x33c>
    3602:	fe 01       	movw	r30, r28
    3604:	31 96       	adiw	r30, 0x01	; 1
    3606:	5f 01       	movw	r10, r30
    3608:	6e 01       	movw	r12, r28
    360a:	f0 e8       	ldi	r31, 0x80	; 128
    360c:	cf 1a       	sub	r12, r31
    360e:	fe ef       	ldi	r31, 0xFE	; 254
    3610:	df 0a       	sbc	r13, r31
    3612:	85 01       	movw	r16, r10
    3614:	c0 ce       	rjmp	.-640    	; 0x3396 <eepromLoadPattern+0xbc>
    3616:	cc 56       	subi	r28, 0x6C	; 108
    3618:	de 4f       	sbci	r29, 0xFE	; 254
    361a:	0f b6       	in	r0, 0x3f	; 63
    361c:	f8 94       	cli
    361e:	de bf       	out	0x3e, r29	; 62
    3620:	0f be       	out	0x3f, r0	; 63
    3622:	cd bf       	out	0x3d, r28	; 61
    3624:	df 91       	pop	r29
    3626:	cf 91       	pop	r28
    3628:	1f 91       	pop	r17
    362a:	0f 91       	pop	r16
    362c:	ff 90       	pop	r15
    362e:	ef 90       	pop	r14
    3630:	df 90       	pop	r13
    3632:	cf 90       	pop	r12
    3634:	bf 90       	pop	r11
    3636:	af 90       	pop	r10
    3638:	9f 90       	pop	r9
    363a:	8f 90       	pop	r8
    363c:	08 95       	ret

0000363e <factoryResetEeprom>:
    363e:	ff 92       	push	r15
    3640:	0f 93       	push	r16
    3642:	1f 93       	push	r17
    3644:	cf 93       	push	r28
    3646:	df 93       	push	r29
    3648:	cd b7       	in	r28, 0x3d	; 61
    364a:	de b7       	in	r29, 0x3e	; 62
    364c:	65 97       	sbiw	r28, 0x15	; 21
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	f8 94       	cli
    3652:	de bf       	out	0x3e, r29	; 62
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	cd bf       	out	0x3d, r28	; 61
    3658:	85 e1       	ldi	r24, 0x15	; 21
    365a:	ec ec       	ldi	r30, 0xCC	; 204
    365c:	f3 e0       	ldi	r31, 0x03	; 3
    365e:	de 01       	movw	r26, r28
    3660:	11 96       	adiw	r26, 0x01	; 1
    3662:	01 90       	ld	r0, Z+
    3664:	0d 92       	st	X+, r0
    3666:	8a 95       	dec	r24
    3668:	e1 f7       	brne	.-8      	; 0x3662 <factoryResetEeprom+0x24>
    366a:	10 e0       	ldi	r17, 0x00	; 0
    366c:	0f 2e       	mov	r0, r31
    366e:	ff e4       	ldi	r31, 0x4F	; 79
    3670:	ff 2e       	mov	r15, r31
    3672:	f0 2d       	mov	r31, r0
    3674:	0b ed       	ldi	r16, 0xDB	; 219
    3676:	1f 93       	push	r17
    3678:	8d b7       	in	r24, 0x3d	; 61
    367a:	9e b7       	in	r25, 0x3e	; 62
    367c:	8b 57       	subi	r24, 0x7B	; 123
    367e:	91 40       	sbci	r25, 0x01	; 1
    3680:	0f b6       	in	r0, 0x3f	; 63
    3682:	f8 94       	cli
    3684:	9e bf       	out	0x3e, r25	; 62
    3686:	0f be       	out	0x3f, r0	; 63
    3688:	8d bf       	out	0x3d, r24	; 61
    368a:	ad b7       	in	r26, 0x3d	; 61
    368c:	be b7       	in	r27, 0x3e	; 62
    368e:	11 96       	adiw	r26, 0x01	; 1
    3690:	8b e7       	ldi	r24, 0x7B	; 123
    3692:	91 e0       	ldi	r25, 0x01	; 1
    3694:	fe 01       	movw	r30, r28
    3696:	7e 96       	adiw	r30, 0x1e	; 30
    3698:	01 90       	ld	r0, Z+
    369a:	0d 92       	st	X+, r0
    369c:	01 97       	sbiw	r24, 0x01	; 1
    369e:	e1 f7       	brne	.-8      	; 0x3698 <factoryResetEeprom+0x5a>
    36a0:	2f dc       	rcall	.-1954   	; 0x2f00 <eepromSavePattern>
    36a2:	8f e1       	ldi	r24, 0x1F	; 31
    36a4:	9e e4       	ldi	r25, 0x4E	; 78
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	f1 f7       	brne	.-4      	; 0x36a6 <factoryResetEeprom+0x68>
    36aa:	00 c0       	rjmp	.+0      	; 0x36ac <factoryResetEeprom+0x6e>
    36ac:	00 00       	nop
    36ae:	1f 9d       	mul	r17, r15
    36b0:	81 2d       	mov	r24, r1
    36b2:	11 24       	eor	r1, r1
    36b4:	86 95       	lsr	r24
    36b6:	86 95       	lsr	r24
    36b8:	e1 e0       	ldi	r30, 0x01	; 1
    36ba:	f0 e0       	ldi	r31, 0x00	; 0
    36bc:	ec 0f       	add	r30, r28
    36be:	fd 1f       	adc	r31, r29
    36c0:	e8 0f       	add	r30, r24
    36c2:	f1 1d       	adc	r31, r1
    36c4:	00 83       	st	Z, r16
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	f8 94       	cli
    36ca:	de bf       	out	0x3e, r29	; 62
    36cc:	0f be       	out	0x3f, r0	; 63
    36ce:	cd bf       	out	0x3d, r28	; 61
    36d0:	63 e0       	ldi	r22, 0x03	; 3
    36d2:	70 e0       	ldi	r23, 0x00	; 0
    36d4:	ce 01       	movw	r24, r28
    36d6:	01 96       	adiw	r24, 0x01	; 1
    36d8:	0e 94 53 11 	call	0x22a6	; 0x22a6 <outputS>
    36dc:	1f 5f       	subi	r17, 0xFF	; 255
    36de:	1f 3f       	cpi	r17, 0xFF	; 255
    36e0:	51 f6       	brne	.-108    	; 0x3676 <factoryResetEeprom+0x38>
    36e2:	65 96       	adiw	r28, 0x15	; 21
    36e4:	0f b6       	in	r0, 0x3f	; 63
    36e6:	f8 94       	cli
    36e8:	de bf       	out	0x3e, r29	; 62
    36ea:	0f be       	out	0x3f, r0	; 63
    36ec:	cd bf       	out	0x3d, r28	; 61
    36ee:	df 91       	pop	r29
    36f0:	cf 91       	pop	r28
    36f2:	1f 91       	pop	r17
    36f4:	0f 91       	pop	r16
    36f6:	ff 90       	pop	r15
    36f8:	08 95       	ret

000036fa <globalWrite>:

//this happens when save button is pressed on global menu. 
void globalWrite(Globals *currentGlobals)
{
    36fa:	cf 93       	push	r28
    36fc:	df 93       	push	r29
    36fe:	ec 01       	movw	r28, r24
	eeprom_write_byte(0,currentGlobals->midiChannel); //this may be wrong, but it does get rid of the warning. 
    3700:	68 89       	ldd	r22, Y+16	; 0x10
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	ba d0       	rcall	.+372    	; 0x387c <eeprom_write_byte>
	eeprom_write_block(currentGlobals->midiTrackNote,1,16);
    3708:	40 e1       	ldi	r20, 0x10	; 16
    370a:	50 e0       	ldi	r21, 0x00	; 0
    370c:	61 e0       	ldi	r22, 0x01	; 1
    370e:	70 e0       	ldi	r23, 0x00	; 0
    3710:	ce 01       	movw	r24, r28
    3712:	41 96       	adiw	r24, 0x11	; 17
    3714:	aa d0       	rcall	.+340    	; 0x386a <eeprom_write_block>
}
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	08 95       	ret

0000371c <globalLoad>:
//This happens at startup only, in function "initGlobals"

void globalLoad(Globals *currentGlobals, uint8_t factoryReset)
{
    371c:	cf 93       	push	r28
    371e:	df 93       	push	r29
	//we need to load all of the global midi settings here. 
	//we can also check the factory reset bit here. 
	//if the program has not gone through the initial state, and had the internal eeprom formatted, then this will return garbage. 
	if(factoryReset==0)
    3720:	61 11       	cpse	r22, r1
    3722:	0c c0       	rjmp	.+24     	; 0x373c <globalLoad+0x20>
    3724:	ec 01       	movw	r28, r24
	{
		currentGlobals->midiChannel = eeprom_read_byte(0);
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	97 d0       	rcall	.+302    	; 0x385a <eeprom_read_byte>
    372c:	88 8b       	std	Y+16, r24	; 0x10
		eeprom_read_block(currentGlobals->midiTrackNote,1,16);
    372e:	40 e1       	ldi	r20, 0x10	; 16
    3730:	50 e0       	ldi	r21, 0x00	; 0
    3732:	61 e0       	ldi	r22, 0x01	; 1
    3734:	70 e0       	ldi	r23, 0x00	; 0
    3736:	ce 01       	movw	r24, r28
    3738:	41 96       	adiw	r24, 0x11	; 17
    373a:	7f d0       	rcall	.+254    	; 0x383a <eeprom_read_block>
	}
}
    373c:	df 91       	pop	r29
    373e:	cf 91       	pop	r28
    3740:	08 95       	ret

00003742 <__divmodhi4>:
    3742:	97 fb       	bst	r25, 7
    3744:	07 2e       	mov	r0, r23
    3746:	16 f4       	brtc	.+4      	; 0x374c <__divmodhi4+0xa>
    3748:	00 94       	com	r0
    374a:	06 d0       	rcall	.+12     	; 0x3758 <__divmodhi4_neg1>
    374c:	77 fd       	sbrc	r23, 7
    374e:	08 d0       	rcall	.+16     	; 0x3760 <__divmodhi4_neg2>
    3750:	60 d0       	rcall	.+192    	; 0x3812 <__udivmodhi4>
    3752:	07 fc       	sbrc	r0, 7
    3754:	05 d0       	rcall	.+10     	; 0x3760 <__divmodhi4_neg2>
    3756:	3e f4       	brtc	.+14     	; 0x3766 <__divmodhi4_exit>

00003758 <__divmodhi4_neg1>:
    3758:	90 95       	com	r25
    375a:	81 95       	neg	r24
    375c:	9f 4f       	sbci	r25, 0xFF	; 255
    375e:	08 95       	ret

00003760 <__divmodhi4_neg2>:
    3760:	70 95       	com	r23
    3762:	61 95       	neg	r22
    3764:	7f 4f       	sbci	r23, 0xFF	; 255

00003766 <__divmodhi4_exit>:
    3766:	08 95       	ret

00003768 <__udivmodsi4>:
    3768:	a1 e2       	ldi	r26, 0x21	; 33
    376a:	1a 2e       	mov	r1, r26
    376c:	aa 1b       	sub	r26, r26
    376e:	bb 1b       	sub	r27, r27
    3770:	fd 01       	movw	r30, r26
    3772:	0d c0       	rjmp	.+26     	; 0x378e <__udivmodsi4_ep>

00003774 <__udivmodsi4_loop>:
    3774:	aa 1f       	adc	r26, r26
    3776:	bb 1f       	adc	r27, r27
    3778:	ee 1f       	adc	r30, r30
    377a:	ff 1f       	adc	r31, r31
    377c:	a2 17       	cp	r26, r18
    377e:	b3 07       	cpc	r27, r19
    3780:	e4 07       	cpc	r30, r20
    3782:	f5 07       	cpc	r31, r21
    3784:	20 f0       	brcs	.+8      	; 0x378e <__udivmodsi4_ep>
    3786:	a2 1b       	sub	r26, r18
    3788:	b3 0b       	sbc	r27, r19
    378a:	e4 0b       	sbc	r30, r20
    378c:	f5 0b       	sbc	r31, r21

0000378e <__udivmodsi4_ep>:
    378e:	66 1f       	adc	r22, r22
    3790:	77 1f       	adc	r23, r23
    3792:	88 1f       	adc	r24, r24
    3794:	99 1f       	adc	r25, r25
    3796:	1a 94       	dec	r1
    3798:	69 f7       	brne	.-38     	; 0x3774 <__udivmodsi4_loop>
    379a:	60 95       	com	r22
    379c:	70 95       	com	r23
    379e:	80 95       	com	r24
    37a0:	90 95       	com	r25
    37a2:	9b 01       	movw	r18, r22
    37a4:	ac 01       	movw	r20, r24
    37a6:	bd 01       	movw	r22, r26
    37a8:	cf 01       	movw	r24, r30
    37aa:	08 95       	ret

000037ac <__divmodsi4>:
    37ac:	05 2e       	mov	r0, r21
    37ae:	97 fb       	bst	r25, 7
    37b0:	16 f4       	brtc	.+4      	; 0x37b6 <__divmodsi4+0xa>
    37b2:	00 94       	com	r0
    37b4:	0f d0       	rcall	.+30     	; 0x37d4 <__negsi2>
    37b6:	57 fd       	sbrc	r21, 7
    37b8:	05 d0       	rcall	.+10     	; 0x37c4 <__divmodsi4_neg2>
    37ba:	d6 df       	rcall	.-84     	; 0x3768 <__udivmodsi4>
    37bc:	07 fc       	sbrc	r0, 7
    37be:	02 d0       	rcall	.+4      	; 0x37c4 <__divmodsi4_neg2>
    37c0:	46 f4       	brtc	.+16     	; 0x37d2 <__divmodsi4_exit>
    37c2:	08 c0       	rjmp	.+16     	; 0x37d4 <__negsi2>

000037c4 <__divmodsi4_neg2>:
    37c4:	50 95       	com	r21
    37c6:	40 95       	com	r20
    37c8:	30 95       	com	r19
    37ca:	21 95       	neg	r18
    37cc:	3f 4f       	sbci	r19, 0xFF	; 255
    37ce:	4f 4f       	sbci	r20, 0xFF	; 255
    37d0:	5f 4f       	sbci	r21, 0xFF	; 255

000037d2 <__divmodsi4_exit>:
    37d2:	08 95       	ret

000037d4 <__negsi2>:
    37d4:	90 95       	com	r25
    37d6:	80 95       	com	r24
    37d8:	70 95       	com	r23
    37da:	61 95       	neg	r22
    37dc:	7f 4f       	sbci	r23, 0xFF	; 255
    37de:	8f 4f       	sbci	r24, 0xFF	; 255
    37e0:	9f 4f       	sbci	r25, 0xFF	; 255
    37e2:	08 95       	ret

000037e4 <__tablejump2__>:
    37e4:	ee 0f       	add	r30, r30
    37e6:	ff 1f       	adc	r31, r31
    37e8:	88 1f       	adc	r24, r24
    37ea:	8b bf       	out	0x3b, r24	; 59
    37ec:	07 90       	elpm	r0, Z+
    37ee:	f6 91       	elpm	r31, Z
    37f0:	e0 2d       	mov	r30, r0
    37f2:	19 94       	eijmp

000037f4 <__umulhisi3>:
    37f4:	a2 9f       	mul	r26, r18
    37f6:	b0 01       	movw	r22, r0
    37f8:	b3 9f       	mul	r27, r19
    37fa:	c0 01       	movw	r24, r0
    37fc:	a3 9f       	mul	r26, r19
    37fe:	70 0d       	add	r23, r0
    3800:	81 1d       	adc	r24, r1
    3802:	11 24       	eor	r1, r1
    3804:	91 1d       	adc	r25, r1
    3806:	b2 9f       	mul	r27, r18
    3808:	70 0d       	add	r23, r0
    380a:	81 1d       	adc	r24, r1
    380c:	11 24       	eor	r1, r1
    380e:	91 1d       	adc	r25, r1
    3810:	08 95       	ret

00003812 <__udivmodhi4>:
    3812:	aa 1b       	sub	r26, r26
    3814:	bb 1b       	sub	r27, r27
    3816:	51 e1       	ldi	r21, 0x11	; 17
    3818:	07 c0       	rjmp	.+14     	; 0x3828 <__udivmodhi4_ep>

0000381a <__udivmodhi4_loop>:
    381a:	aa 1f       	adc	r26, r26
    381c:	bb 1f       	adc	r27, r27
    381e:	a6 17       	cp	r26, r22
    3820:	b7 07       	cpc	r27, r23
    3822:	10 f0       	brcs	.+4      	; 0x3828 <__udivmodhi4_ep>
    3824:	a6 1b       	sub	r26, r22
    3826:	b7 0b       	sbc	r27, r23

00003828 <__udivmodhi4_ep>:
    3828:	88 1f       	adc	r24, r24
    382a:	99 1f       	adc	r25, r25
    382c:	5a 95       	dec	r21
    382e:	a9 f7       	brne	.-22     	; 0x381a <__udivmodhi4_loop>
    3830:	80 95       	com	r24
    3832:	90 95       	com	r25
    3834:	bc 01       	movw	r22, r24
    3836:	cd 01       	movw	r24, r26
    3838:	08 95       	ret

0000383a <eeprom_read_block>:
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22

0000383e <eeprom_read_blraw>:
    383e:	fc 01       	movw	r30, r24
    3840:	f9 99       	sbic	0x1f, 1	; 31
    3842:	fe cf       	rjmp	.-4      	; 0x3840 <eeprom_read_blraw+0x2>
    3844:	06 c0       	rjmp	.+12     	; 0x3852 <eeprom_read_blraw+0x14>
    3846:	f2 bd       	out	0x22, r31	; 34
    3848:	e1 bd       	out	0x21, r30	; 33
    384a:	f8 9a       	sbi	0x1f, 0	; 31
    384c:	31 96       	adiw	r30, 0x01	; 1
    384e:	00 b4       	in	r0, 0x20	; 32
    3850:	0d 92       	st	X+, r0
    3852:	41 50       	subi	r20, 0x01	; 1
    3854:	50 40       	sbci	r21, 0x00	; 0
    3856:	b8 f7       	brcc	.-18     	; 0x3846 <eeprom_read_blraw+0x8>
    3858:	08 95       	ret

0000385a <eeprom_read_byte>:
    385a:	f9 99       	sbic	0x1f, 1	; 31
    385c:	fe cf       	rjmp	.-4      	; 0x385a <eeprom_read_byte>
    385e:	92 bd       	out	0x22, r25	; 34
    3860:	81 bd       	out	0x21, r24	; 33
    3862:	f8 9a       	sbi	0x1f, 0	; 31
    3864:	99 27       	eor	r25, r25
    3866:	80 b5       	in	r24, 0x20	; 32
    3868:	08 95       	ret

0000386a <eeprom_write_block>:
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	02 c0       	rjmp	.+4      	; 0x3874 <eeprom_write_block+0xa>
    3870:	2d 91       	ld	r18, X+
    3872:	05 d0       	rcall	.+10     	; 0x387e <eeprom_write_r18>
    3874:	41 50       	subi	r20, 0x01	; 1
    3876:	50 40       	sbci	r21, 0x00	; 0
    3878:	d8 f7       	brcc	.-10     	; 0x3870 <eeprom_write_block+0x6>
    387a:	08 95       	ret

0000387c <eeprom_write_byte>:
    387c:	26 2f       	mov	r18, r22

0000387e <eeprom_write_r18>:
    387e:	f9 99       	sbic	0x1f, 1	; 31
    3880:	fe cf       	rjmp	.-4      	; 0x387e <eeprom_write_r18>
    3882:	1f ba       	out	0x1f, r1	; 31
    3884:	92 bd       	out	0x22, r25	; 34
    3886:	81 bd       	out	0x21, r24	; 33
    3888:	20 bd       	out	0x20, r18	; 32
    388a:	0f b6       	in	r0, 0x3f	; 63
    388c:	f8 94       	cli
    388e:	fa 9a       	sbi	0x1f, 2	; 31
    3890:	f9 9a       	sbi	0x1f, 1	; 31
    3892:	0f be       	out	0x3f, r0	; 63
    3894:	01 96       	adiw	r24, 0x01	; 1
    3896:	08 95       	ret

00003898 <_exit>:
    3898:	f8 94       	cli

0000389a <__stop_program>:
    389a:	ff cf       	rjmp	.-2      	; 0x389a <__stop_program>
