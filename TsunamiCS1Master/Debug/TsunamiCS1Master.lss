
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018c  00800200  00003cde  00003d72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003cde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007c8  0080038c  0080038c  00003efe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003efe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003f30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00003f70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007520  00000000  00000000  000043b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002032  00000000  00000000  0000b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000342c  00000000  00000000  0000d902  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bd8  00000000  00000000  00010d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014e0  00000000  00000000  00011908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005032  00000000  00000000  00012de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  00017e1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
       2:	00 00       	nop
       4:	11 c1       	rjmp	.+546    	; 0x228 <__bad_interrupt>
       6:	00 00       	nop
       8:	0f c1       	rjmp	.+542    	; 0x228 <__bad_interrupt>
       a:	00 00       	nop
       c:	4f c2       	rjmp	.+1182   	; 0x4ac <__vector_3>
       e:	00 00       	nop
      10:	6b c2       	rjmp	.+1238   	; 0x4e8 <__vector_4>
      12:	00 00       	nop
      14:	87 c2       	rjmp	.+1294   	; 0x524 <__vector_5>
      16:	00 00       	nop
      18:	a3 c2       	rjmp	.+1350   	; 0x560 <__vector_6>
      1a:	00 00       	nop
      1c:	05 c1       	rjmp	.+522    	; 0x228 <__bad_interrupt>
      1e:	00 00       	nop
      20:	03 c1       	rjmp	.+518    	; 0x228 <__bad_interrupt>
      22:	00 00       	nop
      24:	01 c1       	rjmp	.+514    	; 0x228 <__bad_interrupt>
      26:	00 00       	nop
      28:	ff c0       	rjmp	.+510    	; 0x228 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fd c0       	rjmp	.+506    	; 0x228 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fb c0       	rjmp	.+502    	; 0x228 <__bad_interrupt>
      32:	00 00       	nop
      34:	f9 c0       	rjmp	.+498    	; 0x228 <__bad_interrupt>
      36:	00 00       	nop
      38:	f7 c0       	rjmp	.+494    	; 0x228 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__vector_15>
      3e:	00 00       	nop
      40:	f3 c0       	rjmp	.+486    	; 0x228 <__bad_interrupt>
      42:	00 00       	nop
      44:	f1 c0       	rjmp	.+482    	; 0x228 <__bad_interrupt>
      46:	00 00       	nop
      48:	ef c0       	rjmp	.+478    	; 0x228 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ed c0       	rjmp	.+474    	; 0x228 <__bad_interrupt>
      4e:	00 00       	nop
      50:	eb c0       	rjmp	.+470    	; 0x228 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__vector_21>
      58:	e7 c0       	rjmp	.+462    	; 0x228 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e5 c0       	rjmp	.+458    	; 0x228 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e3 c0       	rjmp	.+454    	; 0x228 <__bad_interrupt>
      62:	00 00       	nop
      64:	e1 c0       	rjmp	.+450    	; 0x228 <__bad_interrupt>
      66:	00 00       	nop
      68:	df c0       	rjmp	.+446    	; 0x228 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__vector_27>
      70:	db c0       	rjmp	.+438    	; 0x228 <__bad_interrupt>
      72:	00 00       	nop
      74:	d9 c0       	rjmp	.+434    	; 0x228 <__bad_interrupt>
      76:	00 00       	nop
      78:	d7 c0       	rjmp	.+430    	; 0x228 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d5 c0       	rjmp	.+426    	; 0x228 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__vector_32>
      84:	d1 c0       	rjmp	.+418    	; 0x228 <__bad_interrupt>
      86:	00 00       	nop
      88:	cf c0       	rjmp	.+414    	; 0x228 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cd c0       	rjmp	.+410    	; 0x228 <__bad_interrupt>
      8e:	00 00       	nop
      90:	cb c0       	rjmp	.+406    	; 0x228 <__bad_interrupt>
      92:	00 00       	nop
      94:	c9 c0       	rjmp	.+402    	; 0x228 <__bad_interrupt>
      96:	00 00       	nop
      98:	c7 c0       	rjmp	.+398    	; 0x228 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c5 c0       	rjmp	.+394    	; 0x228 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c3 c0       	rjmp	.+390    	; 0x228 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c1 c0       	rjmp	.+386    	; 0x228 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bf c0       	rjmp	.+382    	; 0x228 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	bd c0       	rjmp	.+378    	; 0x228 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bb c0       	rjmp	.+374    	; 0x228 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b9 c0       	rjmp	.+370    	; 0x228 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b7 c0       	rjmp	.+366    	; 0x228 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b5 c0       	rjmp	.+362    	; 0x228 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b3 c0       	rjmp	.+358    	; 0x228 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b1 c0       	rjmp	.+354    	; 0x228 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	af c0       	rjmp	.+350    	; 0x228 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ad c0       	rjmp	.+346    	; 0x228 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ab c0       	rjmp	.+342    	; 0x228 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a9 c0       	rjmp	.+338    	; 0x228 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__vector_54>
      dc:	a5 c0       	rjmp	.+330    	; 0x228 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a3 c0       	rjmp	.+326    	; 0x228 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0a 03       	fmul	r16, r18
      e6:	4f 05       	cpc	r20, r15
      e8:	4f 05       	cpc	r20, r15
      ea:	4f 05       	cpc	r20, r15
      ec:	4f 05       	cpc	r20, r15
      ee:	4f 05       	cpc	r20, r15
      f0:	4f 05       	cpc	r20, r15
      f2:	4f 05       	cpc	r20, r15
      f4:	4f 05       	cpc	r20, r15
      f6:	4f 05       	cpc	r20, r15
      f8:	4f 05       	cpc	r20, r15
      fa:	4f 05       	cpc	r20, r15
      fc:	4f 05       	cpc	r20, r15
      fe:	4f 05       	cpc	r20, r15
     100:	4f 05       	cpc	r20, r15
     102:	4f 05       	cpc	r20, r15
     104:	4f 05       	cpc	r20, r15
     106:	2e 03       	fmul	r18, r22
     108:	5a 03       	fmul	r21, r18
     10a:	83 03       	fmuls	r16, r19
     10c:	4f 05       	cpc	r20, r15
     10e:	4f 05       	cpc	r20, r15
     110:	4f 05       	cpc	r20, r15
     112:	4f 05       	cpc	r20, r15
     114:	4f 05       	cpc	r20, r15
     116:	38 03       	fmul	r19, r16
     118:	64 03       	mulsu	r22, r20
     11a:	8d 03       	fmulsu	r16, r21
     11c:	4f 05       	cpc	r20, r15
     11e:	4f 05       	cpc	r20, r15
     120:	4f 05       	cpc	r20, r15
     122:	4f 05       	cpc	r20, r15
     124:	4f 05       	cpc	r20, r15
     126:	b2 03       	fmuls	r19, r18
     128:	ed 03       	fmulsu	r22, r21
     12a:	04 04       	cpc	r0, r4
     12c:	41 04       	cpc	r4, r1
     12e:	b8 04       	cpc	r11, r8
     130:	4f 05       	cpc	r20, r15
     132:	4f 05       	cpc	r20, r15
     134:	4f 05       	cpc	r20, r15
     136:	bc 03       	fmulsu	r19, r20
     138:	f7 03       	fmuls	r23, r23
     13a:	0e 04       	cpc	r0, r14
     13c:	4b 04       	cpc	r4, r11
     13e:	c2 04       	cpc	r12, r2
     140:	4f 05       	cpc	r20, r15
     142:	4f 05       	cpc	r20, r15
     144:	4f 05       	cpc	r20, r15
     146:	01 05       	cpc	r16, r1
     148:	25 05       	cpc	r18, r5
     14a:	46 05       	cpc	r20, r6
     14c:	4f 05       	cpc	r20, r15
     14e:	4f 05       	cpc	r20, r15
     150:	4f 05       	cpc	r20, r15
     152:	4f 05       	cpc	r20, r15
     154:	4f 05       	cpc	r20, r15
     156:	0b 05       	cpc	r16, r11
     158:	2f 05       	cpc	r18, r15
     15a:	d8 0b       	sbc	r29, r24
     15c:	8e 0e       	add	r8, r30
     15e:	8e 0e       	add	r8, r30
     160:	8e 0e       	add	r8, r30
     162:	8e 0e       	add	r8, r30
     164:	8e 0e       	add	r8, r30
     166:	8e 0e       	add	r8, r30
     168:	8e 0e       	add	r8, r30
     16a:	8e 0e       	add	r8, r30
     16c:	8e 0e       	add	r8, r30
     16e:	8e 0e       	add	r8, r30
     170:	8e 0e       	add	r8, r30
     172:	8e 0e       	add	r8, r30
     174:	8e 0e       	add	r8, r30
     176:	8e 0e       	add	r8, r30
     178:	8e 0e       	add	r8, r30
     17a:	ee 0b       	sbc	r30, r30
     17c:	08 0c       	add	r0, r8
     17e:	2e 0c       	add	r2, r14
     180:	5d 0c       	add	r5, r13
     182:	8e 0e       	add	r8, r30
     184:	8e 0e       	add	r8, r30
     186:	8e 0e       	add	r8, r30
     188:	8e 0e       	add	r8, r30
     18a:	8e 0e       	add	r8, r30
     18c:	25 0c       	add	r2, r5
     18e:	4b 0c       	add	r4, r11
     190:	7a 0c       	add	r7, r10
     192:	8e 0e       	add	r8, r30
     194:	8e 0e       	add	r8, r30
     196:	8e 0e       	add	r8, r30
     198:	8e 0e       	add	r8, r30
     19a:	8b 0c       	add	r8, r11
     19c:	a5 0c       	add	r10, r5
     19e:	de 0c       	add	r13, r14
     1a0:	2a 0d       	add	r18, r10
     1a2:	5d 0d       	add	r21, r13
     1a4:	c7 0d       	add	r28, r7
     1a6:	8e 0e       	add	r8, r30
     1a8:	8e 0e       	add	r8, r30
     1aa:	8e 0e       	add	r8, r30
     1ac:	c2 0c       	add	r12, r2
     1ae:	fb 0c       	add	r15, r11
     1b0:	47 0d       	add	r20, r7
     1b2:	7a 0d       	add	r23, r10
     1b4:	e4 0d       	add	r30, r4
     1b6:	8e 0e       	add	r8, r30
     1b8:	8e 0e       	add	r8, r30
     1ba:	fa 0d       	add	r31, r10
     1bc:	14 0e       	add	r1, r20
     1be:	43 0e       	add	r4, r19
     1c0:	72 0e       	add	r7, r18
     1c2:	8e 0e       	add	r8, r30
     1c4:	8e 0e       	add	r8, r30
     1c6:	8e 0e       	add	r8, r30
     1c8:	8e 0e       	add	r8, r30
     1ca:	8e 0e       	add	r8, r30
     1cc:	31 0e       	add	r3, r17
     1ce:	60 0e       	add	r6, r16
     1d0:	81 14       	cp	r8, r1
     1d2:	84 14       	cp	r8, r4
     1d4:	87 14       	cp	r8, r7
     1d6:	8a 14       	cp	r8, r10
     1d8:	8d 14       	cp	r8, r13
     1da:	90 14       	cp	r9, r0
     1dc:	93 14       	cp	r9, r3
     1de:	96 14       	cp	r9, r6
     1e0:	99 14       	cp	r9, r9
     1e2:	9c 14       	cp	r9, r12
     1e4:	9f 14       	cp	r9, r15
     1e6:	a2 14       	cp	r10, r2

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d1 e2       	ldi	r29, 0x21	; 33
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	13 e0       	ldi	r17, 0x03	; 3
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b2 e0       	ldi	r27, 0x02	; 2
     1fe:	ee ed       	ldi	r30, 0xDE	; 222
     200:	fc e3       	ldi	r31, 0x3C	; 60
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	ac 38       	cpi	r26, 0x8C	; 140
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	2b e0       	ldi	r18, 0x0B	; 11
     214:	ac e8       	ldi	r26, 0x8C	; 140
     216:	b3 e0       	ldi	r27, 0x03	; 3
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a4 35       	cpi	r26, 0x54	; 84
     21e:	b2 07       	cpc	r27, r18
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	bf d7       	rcall	.+3966   	; 0x11a2 <main>
     224:	0c 94 6d 1e 	jmp	0x3cda	; 0x3cda <_exit>

00000228 <__bad_interrupt>:
     228:	eb ce       	rjmp	.-554    	; 0x0 <__vectors>

0000022a <__vector_15>:
uint8_t buttonsCurrentCycle;
uint16_t lastFullBits = 0;
uint8_t currentTrig;

ISR(TIMER2_OVF_vect)
{
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	2f 93       	push	r18
     236:	3f 93       	push	r19
     238:	8f 93       	push	r24
     23a:	9f 93       	push	r25

static inline void debounce()
{
	static uint8_t vcount_low = 0xFF, vcount_high = 0xFF;
	static uint8_t button_state = 0;
	uint8_t state_changed = ~BUTTON_PIN ^ button_state;
     23c:	83 b1       	in	r24, 0x03	; 3
     23e:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <__data_end>
     242:	80 95       	com	r24
     244:	38 2f       	mov	r19, r24
     246:	32 27       	eor	r19, r18
	VC_DEC_OR_SET(vcount_high, vcount_low, state_changed);
     248:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <vcount_low.1745>
     24c:	93 23       	and	r25, r19
     24e:	89 2f       	mov	r24, r25
     250:	80 95       	com	r24
     252:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <vcount_low.1745>
     256:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     25a:	93 23       	and	r25, r19
     25c:	98 27       	eor	r25, r24
     25e:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
     262:	83 23       	and	r24, r19
	state_changed &= vcount_low & vcount_high;
     264:	89 23       	and	r24, r25
	button_state ^= state_changed;
     266:	92 2f       	mov	r25, r18
     268:	98 27       	eor	r25, r24
     26a:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <__data_end>
	buttons_down |= button_state&state_changed;
     26e:	20 91 a0 03 	lds	r18, 0x03A0	; 0x8003a0 <buttons_down>
     272:	89 23       	and	r24, r25
     274:	82 2b       	or	r24, r18
     276:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <buttons_down>
	debounce();
}
     27a:	9f 91       	pop	r25
     27c:	8f 91       	pop	r24
     27e:	3f 91       	pop	r19
     280:	2f 91       	pop	r18
     282:	0f 90       	pop	r0
     284:	0f be       	out	0x3f, r0	; 63
     286:	0f 90       	pop	r0
     288:	1f 90       	pop	r1
     28a:	18 95       	reti

0000028c <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     28c:	8f ef       	ldi	r24, 0xFF	; 255
     28e:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     290:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons and Encoder buttons
	PORTB = 0B01111111;
     294:	8f e7       	ldi	r24, 0x7F	; 127
     296:	85 b9       	out	0x05, r24	; 5
     298:	08 95       	ret

0000029a <listenTrigButtons>:

}

void listenTrigButtons(Pattern *buttonCurrentPattern, Globals *currentGlobals)
{
     29a:	cf 92       	push	r12
     29c:	df 92       	push	r13
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	6c 01       	movw	r12, r24
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     2aa:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     2ae:	20 95       	com	r18
     2b0:	20 93 9e 03 	sts	0x039E, r18	; 0x80039e <buttonsCurrentCycle>
	(currentGlobals->currentTrigButtons) = (buttonsCurrentCycle << 8) | (PINA^255);
     2b4:	90 b1       	in	r25, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	32 2f       	mov	r19, r18
     2ba:	22 27       	eor	r18, r18
     2bc:	90 95       	com	r25
     2be:	29 2b       	or	r18, r25
     2c0:	db 01       	movw	r26, r22
     2c2:	2d 93       	st	X+, r18
     2c4:	3c 93       	st	X, r19
	if(currentGlobals->currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     2c6:	40 91 8d 03 	lds	r20, 0x038D	; 0x80038d <lastFullBits>
     2ca:	50 91 8e 03 	lds	r21, 0x038E	; 0x80038e <lastFullBits+0x1>
     2ce:	24 17       	cp	r18, r20
     2d0:	35 07       	cpc	r19, r21
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <listenTrigButtons+0x3c>
     2d4:	43 c0       	rjmp	.+134    	; 0x35c <listenTrigButtons+0xc2>
     2d6:	7b 01       	movw	r14, r22
	{
		lastFullBits = currentGlobals->currentTrigButtons;
     2d8:	30 93 8e 03 	sts	0x038E, r19	; 0x80038e <lastFullBits+0x1>
     2dc:	20 93 8d 03 	sts	0x038D, r18	; 0x80038d <lastFullBits>
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
     2e0:	fb 01       	movw	r30, r22
     2e2:	00 81       	ld	r16, Z
     2e4:	11 81       	ldd	r17, Z+1	; 0x01
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     2e6:	c0 e0       	ldi	r28, 0x00	; 0
		{
			currentTrig = (fullBitsParse&1);
     2e8:	90 2f       	mov	r25, r16
     2ea:	91 70       	andi	r25, 0x01	; 1
     2ec:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <currentTrig>
			if(currentTrig)
     2f0:	99 23       	and	r25, r25
     2f2:	79 f1       	breq	.+94     	; 0x352 <listenTrigButtons+0xb8>
			{
				uint8_t encoderAstate = currentGlobals->menuState >> 4;
				switch (encoderAstate)
     2f4:	d7 01       	movw	r26, r14
     2f6:	16 96       	adiw	r26, 0x06	; 6
     2f8:	9c 91       	ld	r25, X
     2fa:	92 95       	swap	r25
     2fc:	9f 70       	andi	r25, 0x0F	; 15
     2fe:	91 30       	cpi	r25, 0x01	; 1
     300:	51 f0       	breq	.+20     	; 0x316 <listenTrigButtons+0x7c>
     302:	18 f0       	brcs	.+6      	; 0x30a <listenTrigButtons+0x70>
     304:	94 30       	cpi	r25, 0x04	; 4
     306:	28 f5       	brcc	.+74     	; 0x352 <listenTrigButtons+0xb8>
     308:	1a c0       	rjmp	.+52     	; 0x33e <listenTrigButtons+0xa4>
				{
	
					//for "performance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
					case 0: //performance mode
					//we trigger a sound here based on the location of bc
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     30a:	4c 2f       	mov	r20, r28
     30c:	b7 01       	movw	r22, r14
     30e:	c6 01       	movw	r24, r12
     310:	0e 94 93 16 	call	0x2d26	; 0x2d26 <playTrack>
					break;
     314:	1e c0       	rjmp	.+60     	; 0x352 <listenTrigButtons+0xb8>

					case 1:
					buttonCurrentPattern->trackSequence[currentGlobals->currentStep] ^=currentGlobals->currentTrigButtons;
     316:	d7 01       	movw	r26, r14
     318:	14 96       	adiw	r26, 0x04	; 4
     31a:	ec 91       	ld	r30, X
     31c:	14 97       	sbiw	r26, 0x04	; 4
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	ee 0f       	add	r30, r30
     322:	ff 1f       	adc	r31, r31
     324:	ec 0d       	add	r30, r12
     326:	fd 1d       	adc	r31, r13
     328:	e5 50       	subi	r30, 0x05	; 5
     32a:	ff 4f       	sbci	r31, 0xFF	; 255
     32c:	20 81       	ld	r18, Z
     32e:	31 81       	ldd	r19, Z+1	; 0x01
     330:	8d 91       	ld	r24, X+
     332:	9c 91       	ld	r25, X
     334:	82 27       	eor	r24, r18
     336:	93 27       	eor	r25, r19
     338:	91 83       	std	Z+1, r25	; 0x01
     33a:	80 83       	st	Z, r24
					//turn on step number, or turn off step number.
					//step sequencer mode.
					break;
     33c:	0a c0       	rjmp	.+20     	; 0x352 <listenTrigButtons+0xb8>
					//we want this functionality for both case 2 and case 3
					case 2:
					case 3:;
					//select track for sample assignment
					//uint16_t currentSample = (buttonCurrentPattern->trackSampleMSB[bc]<<8)|(buttonCurrentPattern->trackSampleLSB[bc]);
					currentGlobals->currentTrack = bc;
     33e:	f7 01       	movw	r30, r14
     340:	c5 83       	std	Z+5, r28	; 0x05
					currentGlobals->valueChangeFlag |=(1<<triggerChange);
     342:	82 85       	ldd	r24, Z+10	; 0x0a
     344:	82 60       	ori	r24, 0x02	; 2
     346:	82 87       	std	Z+10, r24	; 0x0a
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     348:	4c 2f       	mov	r20, r28
     34a:	b7 01       	movw	r22, r14
     34c:	c6 01       	movw	r24, r12
     34e:	0e 94 93 16 	call	0x2d26	; 0x2d26 <playTrack>
					default:
					//this should be the same as case 0;
					break;
				}
			}
			fullBitsParse = fullBitsParse>>1;
     352:	16 95       	lsr	r17
     354:	07 95       	ror	r16
	{
		lastFullBits = currentGlobals->currentTrigButtons;
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     356:	cf 5f       	subi	r28, 0xFF	; 255
     358:	c0 31       	cpi	r28, 0x10	; 16
     35a:	31 f6       	brne	.-116    	; 0x2e8 <listenTrigButtons+0x4e>
				}
			}
			fullBitsParse = fullBitsParse>>1;
		}
	}
}
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	ff 90       	pop	r15
     364:	ef 90       	pop	r14
     366:	df 90       	pop	r13
     368:	cf 90       	pop	r12
     36a:	08 95       	ret

0000036c <listenGPButtons>:

void listenGPButtons(Pattern currentPattern, Globals *currentGlobals) //may need to be a pointer
{
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	cc 57       	subi	r28, 0x7C	; 124
     37c:	de 4f       	sbci	r29, 0xFE	; 254
     37e:	08 81       	ld	r16, Y
     380:	19 81       	ldd	r17, Y+1	; 0x01
     382:	c4 58       	subi	r28, 0x84	; 132
     384:	d1 40       	sbci	r29, 0x01	; 1

	if(button_down(1 << PB5))
     386:	80 e2       	ldi	r24, 0x20	; 32
     388:	77 d0       	rcall	.+238    	; 0x478 <button_down>
     38a:	88 23       	and	r24, r24
     38c:	41 f1       	breq	.+80     	; 0x3de <listenGPButtons+0x72>
	{ //top encoder button
		if(currentGlobals->menuState>>4==3)
     38e:	f8 01       	movw	r30, r16
     390:	86 81       	ldd	r24, Z+6	; 0x06
     392:	82 95       	swap	r24
     394:	8f 70       	andi	r24, 0x0F	; 15
     396:	83 30       	cpi	r24, 0x03	; 3
     398:	21 f4       	brne	.+8      	; 0x3a2 <listenGPButtons+0x36>
		{
			globalWrite(currentGlobals);
     39a:	c8 01       	movw	r24, r16
     39c:	0e 94 12 1c 	call	0x3824	; 0x3824 <globalWrite>
     3a0:	1e c0       	rjmp	.+60     	; 0x3de <listenGPButtons+0x72>
		}else
		{
			eepromSavePattern(currentPattern, currentGlobals->currentPatternNumber);
     3a2:	f8 01       	movw	r30, r16
     3a4:	83 81       	ldd	r24, Z+3	; 0x03
     3a6:	8f 93       	push	r24
     3a8:	8d b7       	in	r24, 0x3d	; 61
     3aa:	9e b7       	in	r25, 0x3e	; 62
     3ac:	8b 57       	subi	r24, 0x7B	; 123
     3ae:	91 40       	sbci	r25, 0x01	; 1
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	9e bf       	out	0x3e, r25	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	8d bf       	out	0x3d, r24	; 61
     3ba:	ad b7       	in	r26, 0x3d	; 61
     3bc:	be b7       	in	r27, 0x3e	; 62
     3be:	11 96       	adiw	r26, 0x01	; 1
     3c0:	8b e7       	ldi	r24, 0x7B	; 123
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	fe 01       	movw	r30, r28
     3c6:	39 96       	adiw	r30, 0x09	; 9
     3c8:	01 90       	ld	r0, Z+
     3ca:	0d 92       	st	X+, r0
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <listenGPButtons+0x5c>
     3d0:	0e 94 46 18 	call	0x308c	; 0x308c <eepromSavePattern>
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	de bf       	out	0x3e, r29	; 62
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	cd bf       	out	0x3d, r28	; 61
		}
		
	}

	uint8_t encoderSwitchMask = 0b00001000;
	if(button_down(1<<PB6))
     3de:	80 e4       	ldi	r24, 0x40	; 64
     3e0:	4b d0       	rcall	.+150    	; 0x478 <button_down>
     3e2:	88 23       	and	r24, r24
     3e4:	51 f0       	breq	.+20     	; 0x3fa <listenGPButtons+0x8e>
		{//bottom encoder button
			uint8_t encoderBCheck = currentGlobals->menuState&encoderSwitchMask;
     3e6:	f8 01       	movw	r30, r16
     3e8:	86 81       	ldd	r24, Z+6	; 0x06
			if(encoderBCheck)
     3ea:	83 ff       	sbrs	r24, 3
     3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <listenGPButtons+0x88>
			{
				currentGlobals->menuState &=0b11110111;//turn off the encoderBFlag
     3ee:	87 7f       	andi	r24, 0xF7	; 247
     3f0:	86 83       	std	Z+6, r24	; 0x06
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <listenGPButtons+0x8e>

			}else
			{
				currentGlobals->menuState |=0b00001000; //turn on the encoderBFlag bit
     3f4:	88 60       	ori	r24, 0x08	; 8
     3f6:	f8 01       	movw	r30, r16
     3f8:	86 83       	std	Z+6, r24	; 0x06
			}
		}
	uint8_t playButtonMask = 0b0000001; //we could probably make a define for both of these masks.
	uint8_t playStateCheck = currentGlobals->playState & playButtonMask;
     3fa:	f8 01       	movw	r30, r16
	if(button_down(1<<PB4))
     3fc:	f7 80       	ldd	r15, Z+7	; 0x07
     3fe:	80 e1       	ldi	r24, 0x10	; 16
     400:	3b d0       	rcall	.+118    	; 0x478 <button_down>
     402:	88 23       	and	r24, r24
     404:	71 f0       	breq	.+28     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	{
		if(playStateCheck)
     406:	f0 fe       	sbrs	r15, 0
     408:	06 c0       	rjmp	.+12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		{
			currentGlobals->playState=0; //playstate is on, turn it off
     40a:	f8 01       	movw	r30, r16
     40c:	17 82       	std	Z+7, r1	; 0x07
			currentGlobals->currentGPButtons &=(~0x20); //turn the first bit
     40e:	82 81       	ldd	r24, Z+2	; 0x02
     410:	8f 7d       	andi	r24, 0xDF	; 223
     412:	82 83       	std	Z+2, r24	; 0x02
     414:	06 c0       	rjmp	.+12     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			
		}else
		{
			currentGlobals->playState=1;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	f8 01       	movw	r30, r16
     41a:	87 83       	std	Z+7, r24	; 0x07
			currentGlobals->currentGPButtons |= 0x20; //turn on the first bit
     41c:	82 81       	ldd	r24, Z+2	; 0x02
     41e:	80 62       	ori	r24, 0x20	; 32
     420:	82 83       	std	Z+2, r24	; 0x02
		}

	} //not sure which button this is
	uint8_t trackButtonMask = 0b00000001;
	uint8_t trackStateCheck = (currentGlobals->buttonSwitchFlag) & trackButtonMask;
     422:	f8 01       	movw	r30, r16
	if(button_down(1<<PB0))
     424:	f1 84       	ldd	r15, Z+9	; 0x09
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	27 d0       	rcall	.+78     	; 0x478 <button_down>
     42a:	88 23       	and	r24, r24
     42c:	71 f0       	breq	.+28     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	{
		if(trackStateCheck)
     42e:	f0 fe       	sbrs	r15, 0
     430:	06 c0       	rjmp	.+12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		{
			currentGlobals->buttonSwitchFlag = 0;
     432:	f8 01       	movw	r30, r16
     434:	11 86       	std	Z+9, r1	; 0x09
			currentGlobals->currentGPButtons &=(~0x02);
     436:	82 81       	ldd	r24, Z+2	; 0x02
     438:	8d 7f       	andi	r24, 0xFD	; 253
     43a:	82 83       	std	Z+2, r24	; 0x02
     43c:	06 c0       	rjmp	.+12     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		}else
		{
			currentGlobals->buttonSwitchFlag = 1;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	f8 01       	movw	r30, r16
     442:	81 87       	std	Z+9, r24	; 0x09
			currentGlobals->currentGPButtons |=0x02;
     444:	82 81       	ldd	r24, Z+2	; 0x02
     446:	82 60       	ori	r24, 0x02	; 2
		}
	}
	uint8_t fineButtonMask = 4;
	uint8_t fineStateCheck = (currentGlobals->currentGPButtons) & fineButtonMask;
     448:	82 83       	std	Z+2, r24	; 0x02
     44a:	f8 01       	movw	r30, r16
	if(button_down(1<<PB1))
     44c:	f2 80       	ldd	r15, Z+2	; 0x02
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	13 d0       	rcall	.+38     	; 0x478 <button_down>
     452:	88 23       	and	r24, r24
     454:	59 f0       	breq	.+22     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	{		
		if(fineStateCheck)
     456:	f2 fe       	sbrs	r15, 2
     458:	05 c0       	rjmp	.+10     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		{
			
			currentGlobals->currentGPButtons &=(~0x04);
     45a:	f8 01       	movw	r30, r16
     45c:	82 81       	ldd	r24, Z+2	; 0x02
     45e:	8b 7f       	andi	r24, 0xFB	; 251
     460:	82 83       	std	Z+2, r24	; 0x02
     462:	04 c0       	rjmp	.+8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		}else
		{
			currentGlobals->currentGPButtons |=0x04;
     464:	f8 01       	movw	r30, r16
     466:	82 81       	ldd	r24, Z+2	; 0x02
     468:	84 60       	ori	r24, 0x04	; 4
     46a:	82 83       	std	Z+2, r24	; 0x02
		}
		
	}
}
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	ff 90       	pop	r15
     476:	08 95       	ret

00000478 <button_down>:

volatile uint8_t buttons_down;
uint8_t button_down(uint8_t button_mask)
{
	//I should probably check out what this is.
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     478:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     47a:	f8 94       	cli
	{
		button_mask &= buttons_down;
     47c:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <buttons_down>
     480:	89 23       	and	r24, r25
		buttons_down ^= button_mask;
     482:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <buttons_down>
     486:	98 27       	eor	r25, r24
     488:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <buttons_down>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     48c:	2f bf       	out	0x3f, r18	; 63
	}
	
	return button_mask;
     48e:	08 95       	ret

00000490 <initEncoders>:
	
	//Interrupt pins - 2,3,4,5
	
	
	//setup rising edge detection on Int pins 2 and 3 (would maybe want all pin states if this doesn't work).
	EICRA |=(1<<ISC31)|(1<<ISC30)|(1 << ISC21)|(1 << ISC20); 
     490:	e9 e6       	ldi	r30, 0x69	; 105
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	80 81       	ld	r24, Z
     496:	80 6f       	ori	r24, 0xF0	; 240
     498:	80 83       	st	Z, r24
	
	//same setup on pins 4 and 5
	EICRB |=(1<<ISC51)|(1<<ISC50)|(1 << ISC41)|(1 << ISC40);
     49a:	ea e6       	ldi	r30, 0x6A	; 106
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	8f 60       	ori	r24, 0x0F	; 15
     4a2:	80 83       	st	Z, r24
	
	//enable all 4 interrupts through masking
	EIMSK |=(1<<INT2)|(1<<INT3)|(1<<INT4)|(1<<INT5);
     4a4:	8d b3       	in	r24, 0x1d	; 29
     4a6:	8c 63       	ori	r24, 0x3C	; 60
     4a8:	8d bb       	out	0x1d, r24	; 29
     4aa:	08 95       	ret

000004ac <__vector_3>:


}
 
ISR(INT2_vect)
{
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1
     4b6:	8f 93       	push	r24
     4b8:	9f 93       	push	r25
	if(0b00000010&encoderPortStates)//this means Pin 2 is coming after pin 3
     4ba:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <encoderPortStates>
     4be:	81 ff       	sbrs	r24, 1
     4c0:	09 c0       	rjmp	.+18     	; 0x4d4 <__vector_3+0x28>
	{
		bottomEncoderValue--;
     4c2:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <bottomEncoderValue>
     4c6:	91 50       	subi	r25, 0x01	; 1
     4c8:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <bottomEncoderValue>
		encoderPortStates&=0b00001100; //reset our two pins to low. 
     4cc:	8c 70       	andi	r24, 0x0C	; 12
     4ce:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <encoderPortStates>
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <__vector_3+0x2e>
	}
	else
	{
		encoderPortStates|=0b00001101; //we want to set bit 1. 
     4d4:	8d 60       	ori	r24, 0x0D	; 13
     4d6:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <encoderPortStates>
	}
}
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <__vector_4>:

ISR(INT3_vect)
{
     4e8:	1f 92       	push	r1
     4ea:	0f 92       	push	r0
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	0f 92       	push	r0
     4f0:	11 24       	eor	r1, r1
     4f2:	8f 93       	push	r24
     4f4:	9f 93       	push	r25
	if(0b00000001&encoderPortStates)//this means Pin 3 is coming after pin 2
     4f6:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <encoderPortStates>
     4fa:	80 ff       	sbrs	r24, 0
     4fc:	09 c0       	rjmp	.+18     	; 0x510 <__vector_4+0x28>
	{
		bottomEncoderValue++;
     4fe:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <bottomEncoderValue>
     502:	9f 5f       	subi	r25, 0xFF	; 255
     504:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <bottomEncoderValue>
		encoderPortStates&=0b00001100; //reset our two pins to low.
     508:	8c 70       	andi	r24, 0x0C	; 12
     50a:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <encoderPortStates>
     50e:	03 c0       	rjmp	.+6      	; 0x516 <__vector_4+0x2e>
	}
	else
	{
		encoderPortStates|=0b00001110; //we want to set bit 2.
     510:	8e 60       	ori	r24, 0x0E	; 14
     512:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <encoderPortStates>
	}
}
     516:	9f 91       	pop	r25
     518:	8f 91       	pop	r24
     51a:	0f 90       	pop	r0
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	0f 90       	pop	r0
     520:	1f 90       	pop	r1
     522:	18 95       	reti

00000524 <__vector_5>:

ISR(INT4_vect)
{
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
	if(0b00001000&encoderPortStates)//this means Pin 4 is coming after pin 5
     532:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <encoderPortStates>
     536:	83 ff       	sbrs	r24, 3
     538:	09 c0       	rjmp	.+18     	; 0x54c <__vector_5+0x28>
	{
		topEncoderValue++;
     53a:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <topEncoderValue>
     53e:	9f 5f       	subi	r25, 0xFF	; 255
     540:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <topEncoderValue>
		encoderPortStates&=0b00000011; //reset our two pins to low.
     544:	83 70       	andi	r24, 0x03	; 3
     546:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <encoderPortStates>
     54a:	03 c0       	rjmp	.+6      	; 0x552 <__vector_5+0x2e>
	}
	else
	{
		encoderPortStates|=0b00000111; //we want to set bit three.
     54c:	87 60       	ori	r24, 0x07	; 7
     54e:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <encoderPortStates>
	}
}
     552:	9f 91       	pop	r25
     554:	8f 91       	pop	r24
     556:	0f 90       	pop	r0
     558:	0f be       	out	0x3f, r0	; 63
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <__vector_6>:

ISR(INT5_vect)
{
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	8f 93       	push	r24
     56c:	9f 93       	push	r25
	if(0b00000100&encoderPortStates)//this means Pin 3 is coming after pin 2
     56e:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <encoderPortStates>
     572:	82 ff       	sbrs	r24, 2
     574:	09 c0       	rjmp	.+18     	; 0x588 <__vector_6+0x28>
	{
		topEncoderValue--;
     576:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <topEncoderValue>
     57a:	91 50       	subi	r25, 0x01	; 1
     57c:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <topEncoderValue>
		encoderPortStates&=0b00000011; //reset our two pins to low.
     580:	83 70       	andi	r24, 0x03	; 3
     582:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <encoderPortStates>
     586:	03 c0       	rjmp	.+6      	; 0x58e <__vector_6+0x2e>
	}
	else
	{
		encoderPortStates|=0b00001011; //we want to set bit two.
     588:	8b 60       	ori	r24, 0x0B	; 11
     58a:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <encoderPortStates>
	}
}
     58e:	9f 91       	pop	r25
     590:	8f 91       	pop	r24
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti

0000059c <listenEncoders>:


void listenEncoders(Pattern *currentPattern, Globals *currentGlobals)
{
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	ac 01       	movw	r20, r24
     5a6:	db 01       	movw	r26, r22
	if(topEncoderValue!=topEncoderLastValue)
     5a8:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <topEncoderValue>
     5ac:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <topEncoderLastValue>
     5b0:	92 17       	cp	r25, r18
     5b2:	91 f0       	breq	.+36     	; 0x5d8 <listenEncoders+0x3c>
	{
		currentGlobals->menuState = ((topEncoderValue%4)<<4);
     5b4:	89 2f       	mov	r24, r25
     5b6:	83 70       	andi	r24, 0x03	; 3
     5b8:	82 95       	swap	r24
     5ba:	80 7f       	andi	r24, 0xF0	; 240
     5bc:	16 96       	adiw	r26, 0x06	; 6
     5be:	8c 93       	st	X, r24
     5c0:	16 97       	sbiw	r26, 0x06	; 6
		bottomEncoderValue = 0;
     5c2:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <bottomEncoderValue>
		currentGlobals->valueChangeFlag |= (1<<encoderChange);
     5c6:	1a 96       	adiw	r26, 0x0a	; 10
     5c8:	8c 91       	ld	r24, X
     5ca:	1a 97       	sbiw	r26, 0x0a	; 10
     5cc:	81 60       	ori	r24, 0x01	; 1
     5ce:	1a 96       	adiw	r26, 0x0a	; 10
     5d0:	8c 93       	st	X, r24
		topEncoderLastValue = topEncoderValue;
     5d2:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <topEncoderLastValue>
		
		//This seems to fix a bug where when going into performance mode, patternNumber is decremented.
		//may not be the best solution.
		return; 
     5d6:	67 c2       	rjmp	.+1230   	; 0xaa6 <listenEncoders+0x50a>
	}
	
	if(bottomEncoderValue!=bottomEncoderLastValue)
     5d8:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <bottomEncoderValue>
     5dc:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <bottomEncoderLastValue>
     5e0:	98 17       	cp	r25, r24
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <listenEncoders+0x4a>
     5e4:	60 c2       	rjmp	.+1216   	; 0xaa6 <listenEncoders+0x50a>
	{
		 uint8_t menuSub = bottomEncoderValue - bottomEncoderLastValue;
     5e6:	98 1b       	sub	r25, r24
		 currentGlobals->valueChangeFlag |= (1<<encoderChange);
     5e8:	1a 96       	adiw	r26, 0x0a	; 10
     5ea:	8c 91       	ld	r24, X
     5ec:	1a 97       	sbiw	r26, 0x0a	; 10
     5ee:	81 60       	ori	r24, 0x01	; 1
     5f0:	1a 96       	adiw	r26, 0x0a	; 10
     5f2:	8c 93       	st	X, r24
     5f4:	1a 97       	sbiw	r26, 0x0a	; 10
		 			//if this value is negative, we increase the menu.
		 			//if positive, we decrement the menu.
		switch(currentGlobals->menuState)
     5f6:	16 96       	adiw	r26, 0x06	; 6
     5f8:	0c 91       	ld	r16, X
     5fa:	16 97       	sbiw	r26, 0x06	; 6
     5fc:	10 e0       	ldi	r17, 0x00	; 0
     5fe:	0b 33       	cpi	r16, 0x3B	; 59
     600:	11 05       	cpc	r17, r1
     602:	08 f0       	brcs	.+2      	; 0x606 <listenEncoders+0x6a>
     604:	4c c2       	rjmp	.+1176   	; 0xa9e <listenEncoders+0x502>
     606:	f8 01       	movw	r30, r16
     608:	88 27       	eor	r24, r24
     60a:	ee 58       	subi	r30, 0x8E	; 142
     60c:	ff 4f       	sbci	r31, 0xFF	; 255
     60e:	8f 4f       	sbci	r24, 0xFF	; 255
     610:	0c 94 f1 1d 	jmp	0x3be2	; 0x3be2 <__tablejump2__>
		{
			case PreformanceModeInit:
			if(menuSub==1)
     614:	91 30       	cpi	r25, 0x01	; 1
     616:	71 f4       	brne	.+28     	; 0x634 <listenEncoders+0x98>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     618:	13 96       	adiw	r26, 0x03	; 3
     61a:	8c 91       	ld	r24, X
     61c:	13 97       	sbiw	r26, 0x03	; 3
     61e:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     620:	21 f0       	breq	.+8      	; 0x62a <listenEncoders+0x8e>
		switch(currentGlobals->menuState)
		{
			case PreformanceModeInit:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     622:	13 96       	adiw	r26, 0x03	; 3
     624:	8c 93       	st	X, r24
     626:	13 97       	sbiw	r26, 0x03	; 3
     628:	13 c0       	rjmp	.+38     	; 0x650 <listenEncoders+0xb4>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     62a:	8f ef       	ldi	r24, 0xFF	; 255
     62c:	13 96       	adiw	r26, 0x03	; 3
     62e:	8c 93       	st	X, r24
     630:	13 97       	sbiw	r26, 0x03	; 3
     632:	0e c0       	rjmp	.+28     	; 0x650 <listenEncoders+0xb4>
				}
				
			}else if(menuSub==255) //we don't want to hit this when switching menus after changing from the sequencer. 
     634:	9f 3f       	cpi	r25, 0xFF	; 255
     636:	61 f4       	brne	.+24     	; 0x650 <listenEncoders+0xb4>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     638:	13 96       	adiw	r26, 0x03	; 3
     63a:	8c 91       	ld	r24, X
     63c:	13 97       	sbiw	r26, 0x03	; 3
     63e:	81 50       	subi	r24, 0x01	; 1
     640:	20 f0       	brcs	.+8      	; 0x64a <listenEncoders+0xae>
     642:	13 96       	adiw	r26, 0x03	; 3
     644:	8c 93       	st	X, r24
     646:	13 97       	sbiw	r26, 0x03	; 3
     648:	03 c0       	rjmp	.+6      	; 0x650 <listenEncoders+0xb4>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     64a:	13 96       	adiw	r26, 0x03	; 3
     64c:	1c 92       	st	X, r1
     64e:	13 97       	sbiw	r26, 0x03	; 3
				}
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     650:	13 96       	adiw	r26, 0x03	; 3
     652:	6c 91       	ld	r22, X
     654:	ca 01       	movw	r24, r20
     656:	0e 94 33 1a 	call	0x3466	; 0x3466 <eepromLoadPattern>
			break;
     65a:	21 c2       	rjmp	.+1090   	; 0xa9e <listenEncoders+0x502>
			
			case SequencerMenuArrow1:			
			if(menuSub==1)
     65c:	91 30       	cpi	r25, 0x01	; 1
     65e:	21 f4       	brne	.+8      	; 0x668 <listenEncoders+0xcc>
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     660:	83 e1       	ldi	r24, 0x13	; 19
     662:	16 96       	adiw	r26, 0x06	; 6
     664:	8c 93       	st	X, r24
     666:	1b c2       	rjmp	.+1078   	; 0xa9e <listenEncoders+0x502>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     668:	82 e1       	ldi	r24, 0x12	; 18
     66a:	16 96       	adiw	r26, 0x06	; 6
     66c:	8c 93       	st	X, r24
     66e:	17 c2       	rjmp	.+1070   	; 0xa9e <listenEncoders+0x502>
			}
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
     670:	91 30       	cpi	r25, 0x01	; 1
     672:	71 f4       	brne	.+28     	; 0x690 <listenEncoders+0xf4>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     674:	13 96       	adiw	r26, 0x03	; 3
     676:	8c 91       	ld	r24, X
     678:	13 97       	sbiw	r26, 0x03	; 3
     67a:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     67c:	21 f0       	breq	.+8      	; 0x686 <listenEncoders+0xea>
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     67e:	13 96       	adiw	r26, 0x03	; 3
     680:	8c 93       	st	X, r24
     682:	13 97       	sbiw	r26, 0x03	; 3
     684:	11 c0       	rjmp	.+34     	; 0x6a8 <listenEncoders+0x10c>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     686:	8f ef       	ldi	r24, 0xFF	; 255
     688:	13 96       	adiw	r26, 0x03	; 3
     68a:	8c 93       	st	X, r24
     68c:	13 97       	sbiw	r26, 0x03	; 3
     68e:	0c c0       	rjmp	.+24     	; 0x6a8 <listenEncoders+0x10c>
				}
		
			}else
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     690:	13 96       	adiw	r26, 0x03	; 3
     692:	8c 91       	ld	r24, X
     694:	13 97       	sbiw	r26, 0x03	; 3
     696:	81 50       	subi	r24, 0x01	; 1
     698:	20 f0       	brcs	.+8      	; 0x6a2 <listenEncoders+0x106>
     69a:	13 96       	adiw	r26, 0x03	; 3
     69c:	8c 93       	st	X, r24
     69e:	13 97       	sbiw	r26, 0x03	; 3
     6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <listenEncoders+0x10c>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     6a2:	13 96       	adiw	r26, 0x03	; 3
     6a4:	1c 92       	st	X, r1
     6a6:	13 97       	sbiw	r26, 0x03	; 3
				}	
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     6a8:	13 96       	adiw	r26, 0x03	; 3
     6aa:	6c 91       	ld	r22, X
     6ac:	ca 01       	movw	r24, r20
     6ae:	0e 94 33 1a 	call	0x3466	; 0x3466 <eepromLoadPattern>
			//this keeps the knob reads that will happen right after the eeprom load to write over the loaded values.
			//Now when you load a pattern, the saved positions of the knobs are unchanged until you turn a knob. 
			break;
     6b2:	f5 c1       	rjmp	.+1002   	; 0xa9e <listenEncoders+0x502>
			
			case SequencerMenuArrow2:
			if(menuSub==1)
     6b4:	91 30       	cpi	r25, 0x01	; 1
     6b6:	21 f4       	brne	.+8      	; 0x6c0 <listenEncoders+0x124>
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     6b8:	81 e1       	ldi	r24, 0x11	; 17
     6ba:	16 96       	adiw	r26, 0x06	; 6
     6bc:	8c 93       	st	X, r24
     6be:	ef c1       	rjmp	.+990    	; 0xa9e <listenEncoders+0x502>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     6c0:	83 e1       	ldi	r24, 0x13	; 19
     6c2:	16 96       	adiw	r26, 0x06	; 6
     6c4:	8c 93       	st	X, r24
     6c6:	eb c1       	rjmp	.+982    	; 0xa9e <listenEncoders+0x502>
			}
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
     6c8:	91 30       	cpi	r25, 0x01	; 1
     6ca:	79 f4       	brne	.+30     	; 0x6ea <listenEncoders+0x14e>
			{
				currentPattern->numSteps++;
     6cc:	fa 01       	movw	r30, r20
     6ce:	e6 53       	subi	r30, 0x36	; 54
     6d0:	ff 4f       	sbci	r31, 0xFF	; 255
     6d2:	80 81       	ld	r24, Z
     6d4:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentPattern->numSteps>64)
     6d6:	81 34       	cpi	r24, 0x41	; 65
     6d8:	10 f4       	brcc	.+4      	; 0x6de <listenEncoders+0x142>
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
			{
				currentPattern->numSteps++;
     6da:	80 83       	st	Z, r24
     6dc:	e0 c1       	rjmp	.+960    	; 0xa9e <listenEncoders+0x502>
				if(currentPattern->numSteps>64)
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
     6de:	fa 01       	movw	r30, r20
     6e0:	e6 53       	subi	r30, 0x36	; 54
     6e2:	ff 4f       	sbci	r31, 0xFF	; 255
     6e4:	80 e4       	ldi	r24, 0x40	; 64
     6e6:	80 83       	st	Z, r24
     6e8:	da c1       	rjmp	.+948    	; 0xa9e <listenEncoders+0x502>
				}
			}else
			{
				currentPattern->numSteps--;
     6ea:	fa 01       	movw	r30, r20
     6ec:	e6 53       	subi	r30, 0x36	; 54
     6ee:	ff 4f       	sbci	r31, 0xFF	; 255
     6f0:	90 81       	ld	r25, Z
     6f2:	91 50       	subi	r25, 0x01	; 1
				if(currentPattern->numSteps<1)
     6f4:	11 f0       	breq	.+4      	; 0x6fa <listenEncoders+0x15e>
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
				}
			}else
			{
				currentPattern->numSteps--;
     6f6:	90 83       	st	Z, r25
     6f8:	d2 c1       	rjmp	.+932    	; 0xa9e <listenEncoders+0x502>
				if(currentPattern->numSteps<1)
				{//we can't have a 0 step pattern. 
					currentPattern->numSteps=1;
     6fa:	fa 01       	movw	r30, r20
     6fc:	e6 53       	subi	r30, 0x36	; 54
     6fe:	ff 4f       	sbci	r31, 0xFF	; 255
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	80 83       	st	Z, r24
     704:	cc c1       	rjmp	.+920    	; 0xa9e <listenEncoders+0x502>
				}
			}
			break;
			
			case SequencerMenuArrow3:;
			if(menuSub==1)
     706:	91 30       	cpi	r25, 0x01	; 1
     708:	21 f4       	brne	.+8      	; 0x712 <listenEncoders+0x176>
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     70a:	82 e1       	ldi	r24, 0x12	; 18
     70c:	16 96       	adiw	r26, 0x06	; 6
     70e:	8c 93       	st	X, r24
     710:	c6 c1       	rjmp	.+908    	; 0xa9e <listenEncoders+0x502>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     712:	81 e1       	ldi	r24, 0x11	; 17
     714:	16 96       	adiw	r26, 0x06	; 6
     716:	8c 93       	st	X, r24
     718:	c2 c1       	rjmp	.+900    	; 0xa9e <listenEncoders+0x502>
			}
			break;
			
			case SequencerMenuArrow3Select:
			//change current step number
			if(menuSub==1)
     71a:	91 30       	cpi	r25, 0x01	; 1
     71c:	91 f4       	brne	.+36     	; 0x742 <listenEncoders+0x1a6>
			{
				currentGlobals->currentStep++;
     71e:	14 96       	adiw	r26, 0x04	; 4
     720:	9c 91       	ld	r25, X
     722:	14 97       	sbiw	r26, 0x04	; 4
     724:	9f 5f       	subi	r25, 0xFF	; 255
     726:	14 96       	adiw	r26, 0x04	; 4
     728:	9c 93       	st	X, r25
     72a:	14 97       	sbiw	r26, 0x04	; 4
				if(currentGlobals->currentStep>=currentPattern->numSteps)
     72c:	fa 01       	movw	r30, r20
     72e:	e6 53       	subi	r30, 0x36	; 54
     730:	ff 4f       	sbci	r31, 0xFF	; 255
     732:	80 81       	ld	r24, Z
     734:	98 17       	cp	r25, r24
     736:	08 f4       	brcc	.+2      	; 0x73a <listenEncoders+0x19e>
     738:	b2 c1       	rjmp	.+868    	; 0xa9e <listenEncoders+0x502>
				{//our ceiling is the maximum number of steps.
					currentGlobals->currentStep=(currentPattern->numSteps)-1;
     73a:	81 50       	subi	r24, 0x01	; 1
     73c:	14 96       	adiw	r26, 0x04	; 4
     73e:	8c 93       	st	X, r24
     740:	ae c1       	rjmp	.+860    	; 0xa9e <listenEncoders+0x502>
				}
			}else
			{
				currentGlobals->currentStep--;
     742:	14 96       	adiw	r26, 0x04	; 4
     744:	9c 91       	ld	r25, X
     746:	14 97       	sbiw	r26, 0x04	; 4
     748:	91 50       	subi	r25, 0x01	; 1
     74a:	14 96       	adiw	r26, 0x04	; 4
     74c:	9c 93       	st	X, r25
     74e:	14 97       	sbiw	r26, 0x04	; 4
				if(currentGlobals->currentStep>currentPattern->numSteps)
     750:	fa 01       	movw	r30, r20
     752:	e6 53       	subi	r30, 0x36	; 54
     754:	ff 4f       	sbci	r31, 0xFF	; 255
     756:	80 81       	ld	r24, Z
     758:	89 17       	cp	r24, r25
     75a:	08 f0       	brcs	.+2      	; 0x75e <listenEncoders+0x1c2>
     75c:	a0 c1       	rjmp	.+832    	; 0xa9e <listenEncoders+0x502>
				{//do no write notes to step 0.
					currentGlobals->currentStep=0;
     75e:	14 96       	adiw	r26, 0x04	; 4
     760:	1c 92       	st	X, r1
     762:	9d c1       	rjmp	.+826    	; 0xa9e <listenEncoders+0x502>
				}				
			}
			break;
			
			case TrackMenuArrow1:;
			if(menuSub==1)
     764:	91 30       	cpi	r25, 0x01	; 1
     766:	21 f4       	brne	.+8      	; 0x770 <listenEncoders+0x1d4>
			{
				currentGlobals->menuState = TrackMenuArrow5;
     768:	85 e2       	ldi	r24, 0x25	; 37
     76a:	16 96       	adiw	r26, 0x06	; 6
     76c:	8c 93       	st	X, r24
     76e:	97 c1       	rjmp	.+814    	; 0xa9e <listenEncoders+0x502>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow2;
     770:	82 e2       	ldi	r24, 0x22	; 34
     772:	16 96       	adiw	r26, 0x06	; 6
     774:	8c 93       	st	X, r24
     776:	93 c1       	rjmp	.+806    	; 0xa9e <listenEncoders+0x502>
			}
			break;
			
			case TrackMenuArrow1Select:;
			uint16_t currentSample = ((currentPattern->trackSampleMSB[currentGlobals->currentTrack])<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     778:	15 96       	adiw	r26, 0x05	; 5
     77a:	6c 91       	ld	r22, X
     77c:	15 97       	sbiw	r26, 0x05	; 5
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	fa 01       	movw	r30, r20
     782:	e6 0f       	add	r30, r22
     784:	f7 1f       	adc	r31, r23
     786:	ef 01       	movw	r28, r30
     788:	c8 56       	subi	r28, 0x68	; 104
     78a:	df 4f       	sbci	r29, 0xFF	; 255
     78c:	28 81       	ld	r18, Y
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	32 2f       	mov	r19, r18
     792:	22 27       	eor	r18, r18
     794:	e8 55       	subi	r30, 0x58	; 88
     796:	ff 4f       	sbci	r31, 0xFF	; 255
     798:	80 81       	ld	r24, Z
     79a:	28 2b       	or	r18, r24
			if(menuSub==1)
     79c:	91 30       	cpi	r25, 0x01	; 1
     79e:	49 f4       	brne	.+18     	; 0x7b2 <listenEncoders+0x216>
     7a0:	2f 5f       	subi	r18, 0xFF	; 255
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	21 30       	cpi	r18, 0x01	; 1
     7a6:	80 e1       	ldi	r24, 0x10	; 16
     7a8:	38 07       	cpc	r19, r24
     7aa:	40 f0       	brcs	.+16     	; 0x7bc <listenEncoders+0x220>
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e1       	ldi	r19, 0x10	; 16
     7b0:	05 c0       	rjmp	.+10     	; 0x7bc <listenEncoders+0x220>
				{//maximum number of indexable samples.
					currentSample=4096;
				}
			}else
			{//no samples in space 0.
				currentSample--;
     7b2:	21 50       	subi	r18, 0x01	; 1
     7b4:	31 09       	sbc	r19, r1
				if(currentSample<1)
     7b6:	11 f4       	brne	.+4      	; 0x7bc <listenEncoders+0x220>
				{
					currentSample=1;
     7b8:	21 e0       	ldi	r18, 0x01	; 1
     7ba:	30 e0       	ldi	r19, 0x00	; 0
				}
			}
			currentPattern->trackSampleLSB[currentGlobals->currentTrack] = (currentSample&0x00FF);//we want to lob off the top 8 bits, just in case. May be unnecessary.
     7bc:	64 0f       	add	r22, r20
     7be:	75 1f       	adc	r23, r21
     7c0:	fb 01       	movw	r30, r22
     7c2:	e8 55       	subi	r30, 0x58	; 88
     7c4:	ff 4f       	sbci	r31, 0xFF	; 255
     7c6:	20 83       	st	Z, r18
			currentPattern->trackSampleMSB[currentGlobals->currentTrack] = (currentSample>>8); 
     7c8:	15 96       	adiw	r26, 0x05	; 5
     7ca:	8c 91       	ld	r24, X
     7cc:	48 0f       	add	r20, r24
     7ce:	51 1d       	adc	r21, r1
     7d0:	fa 01       	movw	r30, r20
     7d2:	e8 56       	subi	r30, 0x68	; 104
     7d4:	ff 4f       	sbci	r31, 0xFF	; 255
     7d6:	30 83       	st	Z, r19
			break;
     7d8:	62 c1       	rjmp	.+708    	; 0xa9e <listenEncoders+0x502>
			
			case TrackMenuArrow2:
			if(menuSub==1)
     7da:	91 30       	cpi	r25, 0x01	; 1
     7dc:	21 f4       	brne	.+8      	; 0x7e6 <listenEncoders+0x24a>
			{
				currentGlobals->menuState = TrackMenuArrow1;
     7de:	81 e2       	ldi	r24, 0x21	; 33
     7e0:	16 96       	adiw	r26, 0x06	; 6
     7e2:	8c 93       	st	X, r24
     7e4:	5c c1       	rjmp	.+696    	; 0xa9e <listenEncoders+0x502>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow3;
     7e6:	83 e2       	ldi	r24, 0x23	; 35
     7e8:	16 96       	adiw	r26, 0x06	; 6
     7ea:	8c 93       	st	X, r24
     7ec:	58 c1       	rjmp	.+688    	; 0xa9e <listenEncoders+0x502>
			
			case TrackMenuArrow2Select:
			//change play mode of currently selected track
			//since we only have two play modes currently,
			//we only need to flip the play mode.
			currentPattern->trackPlayMode[currentGlobals->currentTrack] = (!(currentPattern->trackPlayMode[currentGlobals->currentTrack]))&(0b00000001);
     7ee:	15 96       	adiw	r26, 0x05	; 5
     7f0:	8c 91       	ld	r24, X
     7f2:	48 0f       	add	r20, r24
     7f4:	51 1d       	adc	r21, r1
     7f6:	fa 01       	movw	r30, r20
     7f8:	e8 57       	subi	r30, 0x78	; 120
     7fa:	ff 4f       	sbci	r31, 0xFF	; 255
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	90 81       	ld	r25, Z
     800:	91 11       	cpse	r25, r1
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	80 83       	st	Z, r24
			//flip all bits, mask for first bit. 
			break;
     806:	4b c1       	rjmp	.+662    	; 0xa9e <listenEncoders+0x502>
			
			case TrackMenuArrow3:
			if(menuSub==1)
     808:	91 30       	cpi	r25, 0x01	; 1
     80a:	21 f4       	brne	.+8      	; 0x814 <listenEncoders+0x278>
			{
				currentGlobals->menuState = TrackMenuArrow2;
     80c:	82 e2       	ldi	r24, 0x22	; 34
     80e:	16 96       	adiw	r26, 0x06	; 6
     810:	8c 93       	st	X, r24
     812:	45 c1       	rjmp	.+650    	; 0xa9e <listenEncoders+0x502>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow4;
     814:	84 e2       	ldi	r24, 0x24	; 36
     816:	16 96       	adiw	r26, 0x06	; 6
     818:	8c 93       	st	X, r24
     81a:	41 c1       	rjmp	.+642    	; 0xa9e <listenEncoders+0x502>
			}
			break;
			
			case TrackMenuArrow3Select:
			
			if(menuSub==1)
     81c:	91 30       	cpi	r25, 0x01	; 1
     81e:	c9 f4       	brne	.+50     	; 0x852 <listenEncoders+0x2b6>
			{
				//indexing might be an issue here, don't remember if this is 0 indexed or not. 
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1 ;
     820:	15 96       	adiw	r26, 0x05	; 5
     822:	8c 91       	ld	r24, X
     824:	15 97       	sbiw	r26, 0x05	; 5
     826:	fa 01       	movw	r30, r20
     828:	e8 0f       	add	r30, r24
     82a:	f1 1d       	adc	r31, r1
     82c:	80 8d       	ldd	r24, Z+24	; 0x18
     82e:	8f 5f       	subi	r24, 0xFF	; 255
     830:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     832:	15 96       	adiw	r26, 0x05	; 5
     834:	8c 91       	ld	r24, X
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	fa 01       	movw	r30, r20
     83a:	e8 0f       	add	r30, r24
     83c:	f9 1f       	adc	r31, r25
     83e:	20 8d       	ldd	r18, Z+24	; 0x18
     840:	28 30       	cpi	r18, 0x08	; 8
     842:	08 f4       	brcc	.+2      	; 0x846 <listenEncoders+0x2aa>
     844:	2c c1       	rjmp	.+600    	; 0xa9e <listenEncoders+0x502>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=7;
     846:	fa 01       	movw	r30, r20
     848:	e8 0f       	add	r30, r24
     84a:	f9 1f       	adc	r31, r25
     84c:	87 e0       	ldi	r24, 0x07	; 7
     84e:	80 8f       	std	Z+24, r24	; 0x18
     850:	26 c1       	rjmp	.+588    	; 0xa9e <listenEncoders+0x502>
				}
			}else
			{
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])-1;
     852:	15 96       	adiw	r26, 0x05	; 5
     854:	8c 91       	ld	r24, X
     856:	15 97       	sbiw	r26, 0x05	; 5
     858:	fa 01       	movw	r30, r20
     85a:	e8 0f       	add	r30, r24
     85c:	f1 1d       	adc	r31, r1
     85e:	80 8d       	ldd	r24, Z+24	; 0x18
     860:	81 50       	subi	r24, 0x01	; 1
     862:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     864:	15 96       	adiw	r26, 0x05	; 5
     866:	8c 91       	ld	r24, X
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	fa 01       	movw	r30, r20
     86c:	e8 0f       	add	r30, r24
     86e:	f9 1f       	adc	r31, r25
     870:	20 8d       	ldd	r18, Z+24	; 0x18
     872:	28 30       	cpi	r18, 0x08	; 8
     874:	08 f4       	brcc	.+2      	; 0x878 <listenEncoders+0x2dc>
     876:	13 c1       	rjmp	.+550    	; 0xa9e <listenEncoders+0x502>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=0;
     878:	fa 01       	movw	r30, r20
     87a:	e8 0f       	add	r30, r24
     87c:	f9 1f       	adc	r31, r25
     87e:	10 8e       	std	Z+24, r1	; 0x18
     880:	0e c1       	rjmp	.+540    	; 0xa9e <listenEncoders+0x502>
				}
			}
			break;
			
			case TrackMenuArrow4:
			if(menuSub==1)
     882:	91 30       	cpi	r25, 0x01	; 1
     884:	21 f4       	brne	.+8      	; 0x88e <listenEncoders+0x2f2>
			{
				currentGlobals->menuState = TrackMenuArrow3;
     886:	83 e2       	ldi	r24, 0x23	; 35
     888:	16 96       	adiw	r26, 0x06	; 6
     88a:	8c 93       	st	X, r24
     88c:	08 c1       	rjmp	.+528    	; 0xa9e <listenEncoders+0x502>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow5;
     88e:	85 e2       	ldi	r24, 0x25	; 37
     890:	16 96       	adiw	r26, 0x06	; 6
     892:	8c 93       	st	X, r24
     894:	04 c1       	rjmp	.+520    	; 0xa9e <listenEncoders+0x502>
			}
			break;
			
			case TrackMenuArrow4Select:
			if(menuSub==1)
     896:	91 30       	cpi	r25, 0x01	; 1
     898:	f9 f4       	brne	.+62     	; 0x8d8 <listenEncoders+0x33c>
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])++;
     89a:	15 96       	adiw	r26, 0x05	; 5
     89c:	8c 91       	ld	r24, X
     89e:	15 97       	sbiw	r26, 0x05	; 5
     8a0:	fa 01       	movw	r30, r20
     8a2:	e8 0f       	add	r30, r24
     8a4:	f1 1d       	adc	r31, r1
     8a6:	e5 51       	subi	r30, 0x15	; 21
     8a8:	ff 4f       	sbci	r31, 0xFF	; 255
     8aa:	80 81       	ld	r24, Z
     8ac:	8f 5f       	subi	r24, 0xFF	; 255
     8ae:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>4)
     8b0:	15 96       	adiw	r26, 0x05	; 5
     8b2:	8c 91       	ld	r24, X
     8b4:	15 97       	sbiw	r26, 0x05	; 5
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	fa 01       	movw	r30, r20
     8ba:	e8 0f       	add	r30, r24
     8bc:	f9 1f       	adc	r31, r25
     8be:	e5 51       	subi	r30, 0x15	; 21
     8c0:	ff 4f       	sbci	r31, 0xFF	; 255
     8c2:	20 81       	ld	r18, Z
     8c4:	25 30       	cpi	r18, 0x05	; 5
     8c6:	28 f1       	brcs	.+74     	; 0x912 <listenEncoders+0x376>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=4;
     8c8:	84 0f       	add	r24, r20
     8ca:	95 1f       	adc	r25, r21
     8cc:	fc 01       	movw	r30, r24
     8ce:	e5 51       	subi	r30, 0x15	; 21
     8d0:	ff 4f       	sbci	r31, 0xFF	; 255
     8d2:	84 e0       	ldi	r24, 0x04	; 4
     8d4:	80 83       	st	Z, r24
     8d6:	1d c0       	rjmp	.+58     	; 0x912 <listenEncoders+0x376>
				}
			}else
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])--;
     8d8:	15 96       	adiw	r26, 0x05	; 5
     8da:	8c 91       	ld	r24, X
     8dc:	15 97       	sbiw	r26, 0x05	; 5
     8de:	fa 01       	movw	r30, r20
     8e0:	e8 0f       	add	r30, r24
     8e2:	f1 1d       	adc	r31, r1
     8e4:	e5 51       	subi	r30, 0x15	; 21
     8e6:	ff 4f       	sbci	r31, 0xFF	; 255
     8e8:	80 81       	ld	r24, Z
     8ea:	81 50       	subi	r24, 0x01	; 1
     8ec:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>4)
     8ee:	15 96       	adiw	r26, 0x05	; 5
     8f0:	8c 91       	ld	r24, X
     8f2:	15 97       	sbiw	r26, 0x05	; 5
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	fa 01       	movw	r30, r20
     8f8:	e8 0f       	add	r30, r24
     8fa:	f9 1f       	adc	r31, r25
     8fc:	e5 51       	subi	r30, 0x15	; 21
     8fe:	ff 4f       	sbci	r31, 0xFF	; 255
     900:	20 81       	ld	r18, Z
     902:	25 30       	cpi	r18, 0x05	; 5
     904:	30 f0       	brcs	.+12     	; 0x912 <listenEncoders+0x376>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=0;
     906:	84 0f       	add	r24, r20
     908:	95 1f       	adc	r25, r21
     90a:	fc 01       	movw	r30, r24
     90c:	e5 51       	subi	r30, 0x15	; 21
     90e:	ff 4f       	sbci	r31, 0xFF	; 255
     910:	10 82       	st	Z, r1
				}
			}
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
     912:	15 96       	adiw	r26, 0x05	; 5
     914:	8c 91       	ld	r24, X
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	fa 01       	movw	r30, r20
     91a:	e8 0f       	add	r30, r24
     91c:	f9 1f       	adc	r31, r25
     91e:	e5 51       	subi	r30, 0x15	; 21
     920:	ff 4f       	sbci	r31, 0xFF	; 255
     922:	20 81       	ld	r18, Z
     924:	2d 7f       	andi	r18, 0xFD	; 253
     926:	89 f4       	brne	.+34     	; 0x94a <listenEncoders+0x3ae>
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
     928:	48 0f       	add	r20, r24
     92a:	59 1f       	adc	r21, r25
     92c:	fa 01       	movw	r30, r20
     92e:	e8 56       	subi	r30, 0x68	; 104
     930:	ff 4f       	sbci	r31, 0xFF	; 255
     932:	60 81       	ld	r22, Z
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	70 96       	adiw	r30, 0x10	; 16
     938:	80 81       	ld	r24, Z
     93a:	2a eb       	ldi	r18, 0xBA	; 186
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	4f ef       	ldi	r20, 0xFF	; 255
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <setTrackVolume>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=0;
				}
			}
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
			{
     948:	aa c0       	rjmp	.+340    	; 0xa9e <listenEncoders+0x502>
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
			}else
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],
				currentPattern->trackMainVolumeLSB[currentGlobals->currentTrack],currentPattern->trackMainVolumeMSB[currentGlobals->currentTrack]);		
     94a:	fa 01       	movw	r30, r20
     94c:	e8 0f       	add	r30, r24
     94e:	f9 1f       	adc	r31, r25
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
			}else
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],
     950:	20 a5       	ldd	r18, Z+40	; 0x28
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 ad       	ldd	r20, Z+56	; 0x38
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	df 01       	movw	r26, r30
     95a:	a8 56       	subi	r26, 0x68	; 104
     95c:	bf 4f       	sbci	r27, 0xFF	; 255
     95e:	6c 91       	ld	r22, X
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	e8 55       	subi	r30, 0x58	; 88
     964:	ff 4f       	sbci	r31, 0xFF	; 255
     966:	80 81       	ld	r24, Z
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <setTrackVolume>
     96e:	97 c0       	rjmp	.+302    	; 0xa9e <listenEncoders+0x502>
				currentPattern->trackMainVolumeLSB[currentGlobals->currentTrack],currentPattern->trackMainVolumeMSB[currentGlobals->currentTrack]);		
			}
			break;
			
			case TrackMenuArrow5:
			if(menuSub==1)
     970:	91 30       	cpi	r25, 0x01	; 1
     972:	21 f4       	brne	.+8      	; 0x97c <listenEncoders+0x3e0>
			{
				currentGlobals->menuState = TrackMenuArrow4;
     974:	84 e2       	ldi	r24, 0x24	; 36
     976:	16 96       	adiw	r26, 0x06	; 6
     978:	8c 93       	st	X, r24
     97a:	91 c0       	rjmp	.+290    	; 0xa9e <listenEncoders+0x502>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow1;
     97c:	81 e2       	ldi	r24, 0x21	; 33
     97e:	16 96       	adiw	r26, 0x06	; 6
     980:	8c 93       	st	X, r24
     982:	8d c0       	rjmp	.+282    	; 0xa9e <listenEncoders+0x502>
			}
			break;
			
			case TrackMenuArrow5Select:
			if(menuSub==1)
     984:	91 30       	cpi	r25, 0x01	; 1
     986:	f9 f4       	brne	.+62     	; 0x9c6 <listenEncoders+0x42a>
			{
				currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]++;
     988:	15 96       	adiw	r26, 0x05	; 5
     98a:	8c 91       	ld	r24, X
     98c:	15 97       	sbiw	r26, 0x05	; 5
     98e:	fa 01       	movw	r30, r20
     990:	e8 0f       	add	r30, r24
     992:	f1 1d       	adc	r31, r1
     994:	e5 52       	subi	r30, 0x25	; 37
     996:	ff 4f       	sbci	r31, 0xFF	; 255
     998:	80 81       	ld	r24, Z
     99a:	8f 5f       	subi	r24, 0xFF	; 255
     99c:	80 83       	st	Z, r24
				if(currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]>254)
     99e:	15 96       	adiw	r26, 0x05	; 5
     9a0:	8c 91       	ld	r24, X
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	fa 01       	movw	r30, r20
     9a6:	e8 0f       	add	r30, r24
     9a8:	f9 1f       	adc	r31, r25
     9aa:	e5 52       	subi	r30, 0x25	; 37
     9ac:	ff 4f       	sbci	r31, 0xFF	; 255
     9ae:	20 81       	ld	r18, Z
     9b0:	2f 3f       	cpi	r18, 0xFF	; 255
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <listenEncoders+0x41a>
     9b4:	74 c0       	rjmp	.+232    	; 0xa9e <listenEncoders+0x502>
				{
					currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] = 254;
     9b6:	48 0f       	add	r20, r24
     9b8:	59 1f       	adc	r21, r25
     9ba:	fa 01       	movw	r30, r20
     9bc:	e5 52       	subi	r30, 0x25	; 37
     9be:	ff 4f       	sbci	r31, 0xFF	; 255
     9c0:	8e ef       	ldi	r24, 0xFE	; 254
     9c2:	80 83       	st	Z, r24
     9c4:	6c c0       	rjmp	.+216    	; 0xa9e <listenEncoders+0x502>
				}
			}else
			{
				currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]--;
     9c6:	15 96       	adiw	r26, 0x05	; 5
     9c8:	8c 91       	ld	r24, X
     9ca:	15 97       	sbiw	r26, 0x05	; 5
     9cc:	fa 01       	movw	r30, r20
     9ce:	e8 0f       	add	r30, r24
     9d0:	f1 1d       	adc	r31, r1
     9d2:	e5 52       	subi	r30, 0x25	; 37
     9d4:	ff 4f       	sbci	r31, 0xFF	; 255
     9d6:	80 81       	ld	r24, Z
     9d8:	81 50       	subi	r24, 0x01	; 1
     9da:	80 83       	st	Z, r24
				if(currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]>254)
     9dc:	15 96       	adiw	r26, 0x05	; 5
     9de:	8c 91       	ld	r24, X
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	fa 01       	movw	r30, r20
     9e4:	e8 0f       	add	r30, r24
     9e6:	f9 1f       	adc	r31, r25
     9e8:	e5 52       	subi	r30, 0x25	; 37
     9ea:	ff 4f       	sbci	r31, 0xFF	; 255
     9ec:	20 81       	ld	r18, Z
     9ee:	2f 3f       	cpi	r18, 0xFF	; 255
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <listenEncoders+0x458>
     9f2:	55 c0       	rjmp	.+170    	; 0xa9e <listenEncoders+0x502>
				{
					currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] = 0;
     9f4:	48 0f       	add	r20, r24
     9f6:	59 1f       	adc	r21, r25
     9f8:	fa 01       	movw	r30, r20
     9fa:	e5 52       	subi	r30, 0x25	; 37
     9fc:	ff 4f       	sbci	r31, 0xFF	; 255
     9fe:	10 82       	st	Z, r1
     a00:	4e c0       	rjmp	.+156    	; 0xa9e <listenEncoders+0x502>
				}
			}
			break;
			
			case GlobalMenuArrow1:
			if(menuSub==1)
     a02:	91 30       	cpi	r25, 0x01	; 1
     a04:	21 f4       	brne	.+8      	; 0xa0e <listenEncoders+0x472>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     a06:	81 e3       	ldi	r24, 0x31	; 49
     a08:	16 96       	adiw	r26, 0x06	; 6
     a0a:	8c 93       	st	X, r24
     a0c:	48 c0       	rjmp	.+144    	; 0xa9e <listenEncoders+0x502>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     a0e:	82 e3       	ldi	r24, 0x32	; 50
     a10:	16 96       	adiw	r26, 0x06	; 6
     a12:	8c 93       	st	X, r24
     a14:	44 c0       	rjmp	.+136    	; 0xa9e <listenEncoders+0x502>
			}
			break;
			
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
     a16:	91 30       	cpi	r25, 0x01	; 1
     a18:	69 f4       	brne	.+26     	; 0xa34 <listenEncoders+0x498>
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     a1a:	1c 96       	adiw	r26, 0x0c	; 12
     a1c:	8c 91       	ld	r24, X
     a1e:	1c 97       	sbiw	r26, 0x0c	; 12
     a20:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->midiChannel>15)
     a22:	80 31       	cpi	r24, 0x10	; 16
     a24:	18 f4       	brcc	.+6      	; 0xa2c <listenEncoders+0x490>
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     a26:	1c 96       	adiw	r26, 0x0c	; 12
     a28:	8c 93       	st	X, r24
     a2a:	39 c0       	rjmp	.+114    	; 0xa9e <listenEncoders+0x502>
				if(currentGlobals->midiChannel>15)
				{
					currentGlobals->midiChannel=15;
     a2c:	8f e0       	ldi	r24, 0x0F	; 15
     a2e:	1c 96       	adiw	r26, 0x0c	; 12
     a30:	8c 93       	st	X, r24
     a32:	35 c0       	rjmp	.+106    	; 0xa9e <listenEncoders+0x502>
				}
			}
			else
			{
				//decrement midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)-1;
     a34:	1c 96       	adiw	r26, 0x0c	; 12
     a36:	8c 91       	ld	r24, X
     a38:	1c 97       	sbiw	r26, 0x0c	; 12
     a3a:	81 50       	subi	r24, 0x01	; 1
     a3c:	18 f0       	brcs	.+6      	; 0xa44 <listenEncoders+0x4a8>
     a3e:	1c 96       	adiw	r26, 0x0c	; 12
     a40:	8c 93       	st	X, r24
     a42:	2d c0       	rjmp	.+90     	; 0xa9e <listenEncoders+0x502>
				if(currentGlobals->midiChannel>254)
				{
					currentGlobals->midiChannel=0;
     a44:	1c 96       	adiw	r26, 0x0c	; 12
     a46:	1c 92       	st	X, r1
     a48:	2a c0       	rjmp	.+84     	; 0xa9e <listenEncoders+0x502>
				}
			}
			break;
			
			case GlobalMenuArrow2:
			if(menuSub==1)
     a4a:	91 30       	cpi	r25, 0x01	; 1
     a4c:	21 f4       	brne	.+8      	; 0xa56 <listenEncoders+0x4ba>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     a4e:	81 e3       	ldi	r24, 0x31	; 49
     a50:	16 96       	adiw	r26, 0x06	; 6
     a52:	8c 93       	st	X, r24
     a54:	24 c0       	rjmp	.+72     	; 0xa9e <listenEncoders+0x502>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     a56:	82 e3       	ldi	r24, 0x32	; 50
     a58:	16 96       	adiw	r26, 0x06	; 6
     a5a:	8c 93       	st	X, r24
     a5c:	20 c0       	rjmp	.+64     	; 0xa9e <listenEncoders+0x502>
			break;
			
			case GlobalMenuArrow2Select:;
			//change midi note for selected track.
			//midi range is 0 to 127.
			uint8_t currentMidiNote = currentGlobals->midiTrackNote[currentGlobals->currentTrack];
     a5e:	15 96       	adiw	r26, 0x05	; 5
     a60:	2c 91       	ld	r18, X
     a62:	15 97       	sbiw	r26, 0x05	; 5
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	fb 01       	movw	r30, r22
     a68:	e2 0f       	add	r30, r18
     a6a:	f3 1f       	adc	r31, r19
     a6c:	85 85       	ldd	r24, Z+13	; 0x0d
			if(menuSub==1)
     a6e:	91 30       	cpi	r25, 0x01	; 1
     a70:	21 f4       	brne	.+8      	; 0xa7a <listenEncoders+0x4de>
			{
				//not 100% sure how to set this up.
				currentMidiNote++;
     a72:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentMidiNote>127)
     a74:	32 f4       	brpl	.+12     	; 0xa82 <listenEncoders+0x4e6>
				{
					currentMidiNote = 127;
     a76:	8f e7       	ldi	r24, 0x7F	; 127
     a78:	04 c0       	rjmp	.+8      	; 0xa82 <listenEncoders+0x4e6>
				}
			}else
			{
				currentMidiNote--;
     a7a:	81 50       	subi	r24, 0x01	; 1
				if(currentMidiNote>128)
     a7c:	81 38       	cpi	r24, 0x81	; 129
     a7e:	08 f0       	brcs	.+2      	; 0xa82 <listenEncoders+0x4e6>
				{
					currentMidiNote = 0;
     a80:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			currentGlobals->midiTrackNote[currentGlobals->currentTrack] = currentMidiNote;
     a82:	a2 0f       	add	r26, r18
     a84:	b3 1f       	adc	r27, r19
     a86:	1d 96       	adiw	r26, 0x0d	; 13
     a88:	8c 93       	st	X, r24
			break;
     a8a:	09 c0       	rjmp	.+18     	; 0xa9e <listenEncoders+0x502>
			
			case GlobalMenuArrow3:
			//currently unreachable, no settings live here atm		
			if(menuSub==1)
     a8c:	91 30       	cpi	r25, 0x01	; 1
     a8e:	21 f4       	brne	.+8      	; 0xa98 <listenEncoders+0x4fc>
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     a90:	82 e3       	ldi	r24, 0x32	; 50
     a92:	16 96       	adiw	r26, 0x06	; 6
     a94:	8c 93       	st	X, r24
     a96:	03 c0       	rjmp	.+6      	; 0xa9e <listenEncoders+0x502>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     a98:	81 e3       	ldi	r24, 0x31	; 49
     a9a:	16 96       	adiw	r26, 0x06	; 6
     a9c:	8c 93       	st	X, r24
			
			case GlobalMenuArrow3Select:
			//nothing to put here yet.
			break;
		}
		bottomEncoderLastValue = bottomEncoderValue;
     a9e:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <bottomEncoderValue>
     aa2:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <bottomEncoderLastValue>
		//menuSub=0;
	}
}
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	08 95       	ret

00000ab0 <initArrays>:
#include "globalVariables.h"
#include <string.h>

//takes an array less than 20 and fills it with blank characters
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	ec 01       	movw	r28, r24
	uint8_t lengthOfString = strlen(myString);
     aba:	fa 01       	movw	r30, r20
     abc:	01 90       	ld	r0, Z+
     abe:	00 20       	and	r0, r0
     ac0:	e9 f7       	brne	.-6      	; 0xabc <initArrays+0xc>
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	8f 01       	movw	r16, r30
     ac6:	04 1b       	sub	r16, r20
     ac8:	15 0b       	sbc	r17, r21
     aca:	90 2f       	mov	r25, r16
	uint8_t charLeft = 20 - lengthOfString;
     acc:	84 e1       	ldi	r24, 0x14	; 20
     ace:	80 1b       	sub	r24, r16
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     ad0:	00 23       	and	r16, r16
     ad2:	a9 f0       	breq	.+42     	; 0xafe <initArrays+0x4e>
     ad4:	fa 01       	movw	r30, r20
     ad6:	25 e1       	ldi	r18, 0x15	; 21
     ad8:	26 9f       	mul	r18, r22
     ada:	d0 01       	movw	r26, r0
     adc:	27 9f       	mul	r18, r23
     ade:	b0 0d       	add	r27, r0
     ae0:	11 24       	eor	r1, r1
     ae2:	ac 0f       	add	r26, r28
     ae4:	bd 1f       	adc	r27, r29
     ae6:	2f ef       	ldi	r18, 0xFF	; 255
     ae8:	20 0f       	add	r18, r16
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	2f 5f       	subi	r18, 0xFF	; 255
     aee:	3f 4f       	sbci	r19, 0xFF	; 255
     af0:	42 0f       	add	r20, r18
     af2:	53 1f       	adc	r21, r19
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     af4:	21 91       	ld	r18, Z+
     af6:	2d 93       	st	X+, r18
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
	uint8_t lengthOfString = strlen(myString);
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     af8:	e4 17       	cp	r30, r20
     afa:	f5 07       	cpc	r31, r21
     afc:	d9 f7       	brne	.-10     	; 0xaf4 <initArrays+0x44>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     afe:	88 23       	and	r24, r24
     b00:	89 f0       	breq	.+34     	; 0xb24 <initArrays+0x74>
	{
		myArray[stringNumber][currentIndex] = ' ';
     b02:	45 e1       	ldi	r20, 0x15	; 21
     b04:	46 9f       	mul	r20, r22
     b06:	90 01       	movw	r18, r0
     b08:	47 9f       	mul	r20, r23
     b0a:	30 0d       	add	r19, r0
     b0c:	11 24       	eor	r1, r1
     b0e:	c2 0f       	add	r28, r18
     b10:	d3 1f       	adc	r29, r19
     b12:	08 0f       	add	r16, r24
     b14:	80 e2       	ldi	r24, 0x20	; 32
     b16:	fe 01       	movw	r30, r28
     b18:	e9 0f       	add	r30, r25
     b1a:	f1 1d       	adc	r31, r1
     b1c:	80 83       	st	Z, r24
		currentIndex++;
     b1e:	9f 5f       	subi	r25, 0xFF	; 255
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     b20:	90 13       	cpse	r25, r16
     b22:	f9 cf       	rjmp	.-14     	; 0xb16 <initArrays+0x66>
	{
		myArray[stringNumber][currentIndex] = ' ';
		currentIndex++;
	}
}
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	08 95       	ret

00000b2e <initBank>:

void initBank(Pattern *currentInitPattern)
{
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	ac 01       	movw	r20, r24
     b34:	fc 01       	movw	r30, r24
     b36:	e8 55       	subi	r30, 0x58	; 88
     b38:	ff 4f       	sbci	r31, 0xFF	; 255
     b3a:	ec 01       	movw	r28, r24
     b3c:	c8 57       	subi	r28, 0x78	; 120
     b3e:	df 4f       	sbci	r29, 0xFF	; 255
     b40:	dc 01       	movw	r26, r24
     b42:	a5 51       	subi	r26, 0x15	; 21
     b44:	bf 4f       	sbci	r27, 0xFF	; 255
	for(uint8_t i = 0; i<16; i++)
     b46:	90 e0       	ldi	r25, 0x00	; 0
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
    currentInitPattern->trackPlayMode[i] = 0x01;
     b48:	31 e0       	ldi	r19, 0x01	; 1
	currentInitPattern->envelopeType[i] = 3;
     b4a:	23 e0       	ldi	r18, 0x03	; 3

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
     b4c:	9f 5f       	subi	r25, 0xFF	; 255
     b4e:	91 93       	st	Z+, r25
    currentInitPattern->trackPlayMode[i] = 0x01;
     b50:	39 93       	st	Y+, r19
	currentInitPattern->envelopeType[i] = 3;
     b52:	2d 93       	st	X+, r18
	currentInitPattern->trackSustainTimeLSB[i] = 0;
     b54:	12 aa       	std	Z+50, r1	; 0x32
	currentInitPattern->trackSustainTimeMSB[i] = 0;
     b56:	12 a2       	std	Z+34, r1	; 0x22
	}
}

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
     b58:	90 31       	cpi	r25, 0x10	; 16
     b5a:	c1 f7       	brne	.-16     	; 0xb4c <initBank+0x1e>
     b5c:	fa 01       	movw	r30, r20
     b5e:	e5 50       	subi	r30, 0x05	; 5
     b60:	ff 4f       	sbci	r31, 0xFF	; 255
     b62:	9a 01       	movw	r18, r20
     b64:	25 58       	subi	r18, 0x85	; 133
     b66:	3e 4f       	sbci	r19, 0xFE	; 254
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     b68:	11 92       	st	Z+, r1
     b6a:	11 92       	st	Z+, r1
	currentInitPattern->envelopeType[i] = 3;
	currentInitPattern->trackSustainTimeLSB[i] = 0;
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
     b6c:	e2 17       	cp	r30, r18
     b6e:	f3 07       	cpc	r31, r19
     b70:	d9 f7       	brne	.-10     	; 0xb68 <initBank+0x3a>
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
 
  }
  //We need to take these and put them in global. 
  currentInitPattern->patternBPM = 120;
     b72:	fa 01       	movw	r30, r20
     b74:	e8 53       	subi	r30, 0x38	; 56
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	88 e7       	ldi	r24, 0x78	; 120
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	91 83       	std	Z+1, r25	; 0x01
     b7e:	80 83       	st	Z, r24
  currentInitPattern->numSteps = 16;
     b80:	32 96       	adiw	r30, 0x02	; 2
     b82:	80 e1       	ldi	r24, 0x10	; 16
     b84:	80 83       	st	Z, r24
}
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <initGlobals>:

void initGlobals(Globals *currentGlobals, uint8_t factoryReset)
{
     b8c:	fc 01       	movw	r30, r24
		currentGlobals->currentTrigButtons=0; //current state of Trig buttons.
     b8e:	11 82       	std	Z+1, r1	; 0x01
     b90:	10 82       	st	Z, r1
		currentGlobals->currentGPButtons=0; //current state of GP buttons
     b92:	12 82       	std	Z+2, r1	; 0x02
		currentGlobals->currentPatternNumber=0; //current pattern, between 1 and 256
     b94:	13 82       	std	Z+3, r1	; 0x03
		currentGlobals->currentStep=0; // current step in the sequencer
     b96:	14 82       	std	Z+4, r1	; 0x04
		currentGlobals->currentTrack=0; //current track being edited
     b98:	15 82       	std	Z+5, r1	; 0x05
		currentGlobals->menuState=0; //where the menu is currently
     b9a:	16 82       	std	Z+6, r1	; 0x06
		currentGlobals->playState=0; //whether the sequencer is playing, stopped, or paused.
     b9c:	17 82       	std	Z+7, r1	; 0x07
		currentGlobals->factoryReset=0; //we may not need this in this struct, but good to have for now.
     b9e:	10 86       	std	Z+8, r1	; 0x08
		currentGlobals->buttonSwitchFlag=0; // could be rolled into value bits.
     ba0:	11 86       	std	Z+9, r1	; 0x09
		currentGlobals->valueChangeFlag=0; //bit 0 -> changes in encoders, bit 1-> changes in buttons, bit2 -> changes in knobs
     ba2:	12 86       	std	Z+10, r1	; 0x0a
		currentGlobals->knobStatus=0; //top 4 bits: knob type, bottom 4 bits: knob location.
     ba4:	13 86       	std	Z+11, r1	; 0x0b
		
		if(factoryReset==1)
     ba6:	61 30       	cpi	r22, 0x01	; 1
     ba8:	09 f5       	brne	.+66     	; 0xbec <initGlobals+0x60>
		{
			currentGlobals->midiChannel=0;
     baa:	14 86       	std	Z+12, r1	; 0x0c
			currentGlobals->midiTrackNote[0] = 0x24;
     bac:	84 e2       	ldi	r24, 0x24	; 36
     bae:	85 87       	std	Z+13, r24	; 0x0d
			currentGlobals->midiTrackNote[1] = 0x25;
     bb0:	85 e2       	ldi	r24, 0x25	; 37
     bb2:	86 87       	std	Z+14, r24	; 0x0e
			currentGlobals->midiTrackNote[2] = 0x26;
     bb4:	86 e2       	ldi	r24, 0x26	; 38
     bb6:	87 87       	std	Z+15, r24	; 0x0f
			currentGlobals->midiTrackNote[3] = 0x27;
     bb8:	87 e2       	ldi	r24, 0x27	; 39
     bba:	80 8b       	std	Z+16, r24	; 0x10
			currentGlobals->midiTrackNote[4] = 0x28;
     bbc:	88 e2       	ldi	r24, 0x28	; 40
     bbe:	81 8b       	std	Z+17, r24	; 0x11
			currentGlobals->midiTrackNote[5] = 0x29;
     bc0:	89 e2       	ldi	r24, 0x29	; 41
     bc2:	82 8b       	std	Z+18, r24	; 0x12
			currentGlobals->midiTrackNote[6] = 0x2a;
     bc4:	8a e2       	ldi	r24, 0x2A	; 42
     bc6:	83 8b       	std	Z+19, r24	; 0x13
			currentGlobals->midiTrackNote[7] = 0x2b;
     bc8:	8b e2       	ldi	r24, 0x2B	; 43
     bca:	84 8b       	std	Z+20, r24	; 0x14
			currentGlobals->midiTrackNote[8] = 0x2c;
     bcc:	8c e2       	ldi	r24, 0x2C	; 44
     bce:	85 8b       	std	Z+21, r24	; 0x15
			currentGlobals->midiTrackNote[9] = 0x2d;
     bd0:	8d e2       	ldi	r24, 0x2D	; 45
     bd2:	86 8b       	std	Z+22, r24	; 0x16
			currentGlobals->midiTrackNote[10] = 0x2e;
     bd4:	8e e2       	ldi	r24, 0x2E	; 46
     bd6:	87 8b       	std	Z+23, r24	; 0x17
			currentGlobals->midiTrackNote[11] = 0x2f;
     bd8:	8f e2       	ldi	r24, 0x2F	; 47
     bda:	80 8f       	std	Z+24, r24	; 0x18
			currentGlobals->midiTrackNote[12] = 0x30;
     bdc:	80 e3       	ldi	r24, 0x30	; 48
     bde:	81 8f       	std	Z+25, r24	; 0x19
			currentGlobals->midiTrackNote[13] = 0x31;
     be0:	81 e3       	ldi	r24, 0x31	; 49
     be2:	82 8f       	std	Z+26, r24	; 0x1a
			currentGlobals->midiTrackNote[14] = 0x32;
     be4:	82 e3       	ldi	r24, 0x32	; 50
     be6:	83 8f       	std	Z+27, r24	; 0x1b
			currentGlobals->midiTrackNote[15] = 0x33;
     be8:	83 e3       	ldi	r24, 0x33	; 51
     bea:	84 8f       	std	Z+28, r24	; 0x1c
     bec:	08 95       	ret

00000bee <startADCConversion>:



uint8_t startADCConversion()
{
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     bee:	ea e7       	ldi	r30, 0x7A	; 122
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	80 64       	ori	r24, 0x40	; 64
     bf6:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     bf8:	80 81       	ld	r24, Z
     bfa:	86 fd       	sbrc	r24, 6
     bfc:	fd cf       	rjmp	.-6      	; 0xbf8 <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.	
     bfe:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
     c02:	08 95       	ret

00000c04 <initADC>:

void initADC()
{
	DDRF |= 0B00000111; //init pins F2, 1, and 0 as select pins on the external mux.
     c04:	80 b3       	in	r24, 0x10	; 16
     c06:	87 60       	ori	r24, 0x07	; 7
     c08:	80 bb       	out	0x10, r24	; 16
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     c0a:	80 e2       	ldi	r24, 0x20	; 32
     c0c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     c10:	87 e8       	ldi	r24, 0x87	; 135
     c12:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     c16:	88 e0       	ldi	r24, 0x08	; 8
     c18:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     c22:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     c26:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <knobBufferCounter>
	startADCConversion();
     c2a:	e1 cf       	rjmp	.-62     	; 0xbee <startADCConversion>
     c2c:	08 95       	ret

00000c2e <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     c2e:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     c30:	98 2f       	mov	r25, r24
     c32:	96 95       	lsr	r25
     c34:	96 95       	lsr	r25
     c36:	2f e2       	ldi	r18, 0x2F	; 47
     c38:	92 9f       	mul	r25, r18
     c3a:	91 2d       	mov	r25, r1
     c3c:	11 24       	eor	r1, r1
     c3e:	96 95       	lsr	r25
     c40:	2c e2       	ldi	r18, 0x2C	; 44
     c42:	92 9f       	mul	r25, r18
     c44:	80 19       	sub	r24, r0
     c46:	11 24       	eor	r1, r1
     c48:	98 2f       	mov	r25, r24
	if(select<40)
     c4a:	88 32       	cpi	r24, 0x28	; 40
     c4c:	70 f4       	brcc	.+28     	; 0xc6a <selectKnob+0x3c>
	{
		ADCSRB = (1 << MUX5);
     c4e:	88 e0       	ldi	r24, 0x08	; 8
     c50:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     c54:	c9 2f       	mov	r28, r25
     c56:	c7 70       	andi	r28, 0x07	; 7
		//uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     c58:	96 95       	lsr	r25
     c5a:	96 95       	lsr	r25
     c5c:	96 95       	lsr	r25
     c5e:	90 62       	ori	r25, 0x20	; 32
     c60:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     c64:	c4 df       	rcall	.-120    	; 0xbee <startADCConversion>
		

		//then the external multiplexer
		PORTF = muxSelect;
     c66:	c1 bb       	out	0x11, r28	; 17
     c68:	20 c0       	rjmp	.+64     	; 0xcaa <selectKnob+0x7c>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     c6a:	89 32       	cpi	r24, 0x29	; 41
     c6c:	71 f0       	breq	.+28     	; 0xc8a <selectKnob+0x5c>
     c6e:	18 f4       	brcc	.+6      	; 0xc76 <selectKnob+0x48>
     c70:	88 32       	cpi	r24, 0x28	; 40
     c72:	31 f0       	breq	.+12     	; 0xc80 <selectKnob+0x52>
     c74:	1a c0       	rjmp	.+52     	; 0xcaa <selectKnob+0x7c>
     c76:	8a 32       	cpi	r24, 0x2A	; 42
     c78:	69 f0       	breq	.+26     	; 0xc94 <selectKnob+0x66>
     c7a:	8b 32       	cpi	r24, 0x2B	; 43
     c7c:	81 f0       	breq	.+32     	; 0xc9e <selectKnob+0x70>
     c7e:	15 c0       	rjmp	.+42     	; 0xcaa <selectKnob+0x7c>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     c80:	85 e2       	ldi	r24, 0x25	; 37
     c82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     c86:	b3 df       	rcall	.-154    	; 0xbee <startADCConversion>
		break;
     c88:	10 c0       	rjmp	.+32     	; 0xcaa <selectKnob+0x7c>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     c8a:	86 e2       	ldi	r24, 0x26	; 38
     c8c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     c90:	ae df       	rcall	.-164    	; 0xbee <startADCConversion>
		break;
     c92:	0b c0       	rjmp	.+22     	; 0xcaa <selectKnob+0x7c>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     c94:	87 e2       	ldi	r24, 0x27	; 39
     c96:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     c9a:	a9 df       	rcall	.-174    	; 0xbee <startADCConversion>
		break;
     c9c:	06 c0       	rjmp	.+12     	; 0xcaa <selectKnob+0x7c>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     c9e:	80 e2       	ldi	r24, 0x20	; 32
     ca0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     ca4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     ca8:	a2 df       	rcall	.-188    	; 0xbee <startADCConversion>
		break;
		}
	
	}
	
}
     caa:	cf 91       	pop	r28
     cac:	08 95       	ret

00000cae <updateKnob>:

void updateKnob(uint8_t select, Globals *currentGlobals)
{
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	8b 01       	movw	r16, r22
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
     cb8:	c8 2f       	mov	r28, r24
     cba:	d0 e0       	ldi	r29, 0x00	; 0
     cbc:	98 df       	rcall	.-208    	; 0xbee <startADCConversion>
     cbe:	f8 01       	movw	r30, r16
     cc0:	ec 0f       	add	r30, r28
     cc2:	fd 1f       	adc	r31, r29
     cc4:	85 8f       	std	Z+29, r24	; 0x1d
		currentGlobals->filteredKnobBuffer[select] = 
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
     cc6:	e7 5b       	subi	r30, 0xB7	; 183
     cc8:	ff 4f       	sbci	r31, 0xFF	; 255
     cca:	40 81       	ld	r20, Z

void updateKnob(uint8_t select, Globals *currentGlobals)
{
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
		currentGlobals->filteredKnobBuffer[select] = 
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	84 1b       	sub	r24, r20
     cd0:	91 09       	sbc	r25, r1
     cd2:	9c 01       	movw	r18, r24
     cd4:	12 f4       	brpl	.+4      	; 0xcda <updateKnob+0x2c>
     cd6:	2f 5f       	subi	r18, 0xFF	; 255
     cd8:	3f 4f       	sbci	r19, 0xFF	; 255
     cda:	35 95       	asr	r19
     cdc:	27 95       	ror	r18
     cde:	24 0f       	add	r18, r20
     ce0:	20 83       	st	Z, r18
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	08 95       	ret

00000cec <initializeKnob>:
void initializeKnob(Globals *currentGlobals)
{
     cec:	fc 01       	movw	r30, r24
     cee:	e7 5b       	subi	r30, 0xB7	; 183
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	9c 01       	movw	r18, r24
     cf4:	2b 58       	subi	r18, 0x8B	; 139
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
     cf8:	91 91       	ld	r25, Z+
     cfa:	93 a7       	std	Z+43, r25	; 0x2b
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
void initializeKnob(Globals *currentGlobals)
{
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
     cfc:	e2 17       	cp	r30, r18
     cfe:	f3 07       	cpc	r31, r19
     d00:	d9 f7       	brne	.-10     	; 0xcf8 <initializeKnob+0xc>
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
	}
}
     d02:	08 95       	ret

00000d04 <interperetKnob>:

void interperetKnob(uint8_t select, Pattern *currentKnobPattern, Globals *currentGlobals)
{//this function will compare outputs, and write to our struct.
     d04:	4f 92       	push	r4
     d06:	5f 92       	push	r5
     d08:	6f 92       	push	r6
     d0a:	7f 92       	push	r7
     d0c:	af 92       	push	r10
     d0e:	bf 92       	push	r11
     d10:	cf 92       	push	r12
     d12:	df 92       	push	r13
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
	select = select%44;
     d20:	98 2f       	mov	r25, r24
     d22:	96 95       	lsr	r25
     d24:	96 95       	lsr	r25
     d26:	0f e2       	ldi	r16, 0x2F	; 47
     d28:	90 9f       	mul	r25, r16
     d2a:	01 2d       	mov	r16, r1
     d2c:	11 24       	eor	r1, r1
     d2e:	90 2f       	mov	r25, r16
     d30:	96 95       	lsr	r25
     d32:	2c e2       	ldi	r18, 0x2C	; 44
     d34:	92 9f       	mul	r25, r18
     d36:	80 19       	sub	r24, r0
     d38:	11 24       	eor	r1, r1
     d3a:	98 2f       	mov	r25, r24
	
	if (select<40)
     d3c:	88 32       	cpi	r24, 0x28	; 40
     d3e:	08 f0       	brcs	.+2      	; 0xd42 <interperetKnob+0x3e>
     d40:	8f c1       	rjmp	.+798    	; 0x1060 <interperetKnob+0x35c>
	{
		uint8_t positionSelect = select%8;
     d42:	18 2f       	mov	r17, r24
     d44:	17 70       	andi	r17, 0x07	; 7
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
		uint8_t bankSwitch = select/8;
     d46:	86 95       	lsr	r24
     d48:	86 95       	lsr	r24
     d4a:	86 95       	lsr	r24
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
     d4c:	fa 01       	movw	r30, r20
     d4e:	21 85       	ldd	r18, Z+9	; 0x09
     d50:	20 ff       	sbrs	r18, 0
     d52:	03 c0       	rjmp	.+6      	; 0xd5a <interperetKnob+0x56>
		{
			positionSelectTracks=positionSelectTracks+8;
     d54:	c8 e0       	ldi	r28, 0x08	; 8
     d56:	c1 0f       	add	r28, r17
     d58:	01 c0       	rjmp	.+2      	; 0xd5c <interperetKnob+0x58>
	select = select%44;
	
	if (select<40)
	{
		uint8_t positionSelect = select%8;
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
     d5a:	c1 2f       	mov	r28, r17
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
		{
			positionSelectTracks=positionSelectTracks+8;
		}
		
		switch (bankSwitch){
     d5c:	82 30       	cpi	r24, 0x02	; 2
     d5e:	09 f4       	brne	.+2      	; 0xd62 <interperetKnob+0x5e>
     d60:	9e c0       	rjmp	.+316    	; 0xe9e <interperetKnob+0x19a>
     d62:	7a 01       	movw	r14, r20
     d64:	6b 01       	movw	r12, r22
     d66:	83 30       	cpi	r24, 0x03	; 3
     d68:	30 f4       	brcc	.+12     	; 0xd76 <interperetKnob+0x72>
     d6a:	88 23       	and	r24, r24
     d6c:	59 f0       	breq	.+22     	; 0xd84 <interperetKnob+0x80>
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	09 f4       	brne	.+2      	; 0xd74 <interperetKnob+0x70>
     d72:	6a c0       	rjmp	.+212    	; 0xe48 <interperetKnob+0x144>
     d74:	93 c1       	rjmp	.+806    	; 0x109c <interperetKnob+0x398>
     d76:	83 30       	cpi	r24, 0x03	; 3
     d78:	09 f4       	brne	.+2      	; 0xd7c <interperetKnob+0x78>
     d7a:	d9 c0       	rjmp	.+434    	; 0xf2e <interperetKnob+0x22a>
     d7c:	84 30       	cpi	r24, 0x04	; 4
     d7e:	09 f4       	brne	.+2      	; 0xd82 <interperetKnob+0x7e>
     d80:	fc c0       	rjmp	.+504    	; 0xf7a <interperetKnob+0x276>
     d82:	8c c1       	rjmp	.+792    	; 0x109c <interperetKnob+0x398>
			uint8_t newRead = 0;
			case 0:; //outputVolume
			
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
     d84:	c9 2f       	mov	r28, r25
     d86:	d0 e0       	ldi	r29, 0x00	; 0
     d88:	ca 01       	movw	r24, r20
     d8a:	8c 0f       	add	r24, r28
     d8c:	9d 1f       	adc	r25, r29
     d8e:	fc 01       	movw	r30, r24
     d90:	eb 58       	subi	r30, 0x8B	; 139
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
     d96:	bc 97       	sbiw	r30, 0x2c	; 44
     d98:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
     d9a:	26 17       	cp	r18, r22
     d9c:	20 f4       	brcc	.+8      	; 0xda6 <interperetKnob+0xa2>
	{
		returnMe = v1-v2;
     d9e:	f6 2f       	mov	r31, r22
     da0:	f2 1b       	sub	r31, r18
     da2:	2f 2f       	mov	r18, r31
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <interperetKnob+0xa4>
	}
	else
	{
		returnMe = v2-v1;
     da6:	26 1b       	sub	r18, r22
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];

			if(checkVariation(newRead,prevRead)>2)
     da8:	23 30       	cpi	r18, 0x03	; 3
     daa:	08 f4       	brcc	.+2      	; 0xdae <interperetKnob+0xaa>
     dac:	77 c1       	rjmp	.+750    	; 0x109c <interperetKnob+0x398>
			{
				
				int16_t negCheckValue = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__floatsisf>
     db8:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <volumeDivisor>
     dbc:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <volumeDivisor+0x1>
     dc0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <volumeDivisor+0x2>
     dc4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <volumeDivisor+0x3>
     dc8:	0e 94 9b 1c 	call	0x3936	; 0x3936 <__divsf3>
     dcc:	2b 01       	movw	r4, r22
     dce:	3c 01       	movw	r6, r24
     dd0:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <NegativeOffset>
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__floatsisf>
     dde:	9b 01       	movw	r18, r22
     de0:	ac 01       	movw	r20, r24
     de2:	c3 01       	movw	r24, r6
     de4:	b2 01       	movw	r22, r4
     de6:	0e 94 36 1c 	call	0x386c	; 0x386c <__subsf3>
     dea:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <__fixsfsi>
     dee:	86 2f       	mov	r24, r22
     df0:	26 2f       	mov	r18, r22
     df2:	37 2f       	mov	r19, r23
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     df4:	f7 01       	movw	r30, r14
     df6:	92 85       	ldd	r25, Z+10	; 0x0a
     df8:	94 60       	ori	r25, 0x04	; 4
     dfa:	92 87       	std	Z+10, r25	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value 
     dfc:	13 87       	std	Z+11, r17	; 0x0b
				
				currentKnobPattern->outputLevelLSB[positionSelect] = (negCheckValue);
     dfe:	61 2f       	mov	r22, r17
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	f6 01       	movw	r30, r12
     e04:	e6 0f       	add	r30, r22
     e06:	f7 1f       	adc	r31, r23
     e08:	80 87       	std	Z+8, r24	; 0x08
				if(negCheckValue>(-1))
     e0a:	33 23       	and	r19, r19
     e0c:	2c f0       	brlt	.+10     	; 0xe18 <interperetKnob+0x114>
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 0;	
     e0e:	f6 01       	movw	r30, r12
     e10:	e6 0f       	add	r30, r22
     e12:	f7 1f       	adc	r31, r23
     e14:	10 82       	st	Z, r1
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <interperetKnob+0x11e>
				}else
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 255;
     e18:	9f ef       	ldi	r25, 0xFF	; 255
     e1a:	f6 01       	movw	r30, r12
     e1c:	e6 0f       	add	r30, r22
     e1e:	f7 1f       	adc	r31, r23
     e20:	90 83       	st	Z, r25
				}
				setOutputVolume(currentKnobPattern->outputLevelLSB[positionSelect], currentKnobPattern->outputLevelMSB[positionSelect], positionSelect);
     e22:	f6 01       	movw	r30, r12
     e24:	e6 0f       	add	r30, r22
     e26:	f7 1f       	adc	r31, r23
     e28:	41 2f       	mov	r20, r17
     e2a:	60 81       	ld	r22, Z
     e2c:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <setOutputVolume>
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     e30:	97 01       	movw	r18, r14
     e32:	2c 0f       	add	r18, r28
     e34:	3d 1f       	adc	r19, r29
     e36:	f9 01       	movw	r30, r18
     e38:	eb 58       	subi	r30, 0x8B	; 139
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	e9 01       	movw	r28, r18
     e3e:	c7 5b       	subi	r28, 0xB7	; 183
     e40:	df 4f       	sbci	r29, 0xFF	; 255
     e42:	88 81       	ld	r24, Y
     e44:	80 83       	st	Z, r24
     e46:	2a c1       	rjmp	.+596    	; 0x109c <interperetKnob+0x398>
			}
			break;
			
 			case 1: //pitch
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
     e48:	89 2f       	mov	r24, r25
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9a 01       	movw	r18, r20
     e4e:	28 0f       	add	r18, r24
     e50:	39 1f       	adc	r19, r25
     e52:	f9 01       	movw	r30, r18
     e54:	e7 5b       	subi	r30, 0xB7	; 183
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	40 81       	ld	r20, Z
     e5a:	bc 96       	adiw	r30, 0x2c	; 44
     e5c:	20 81       	ld	r18, Z
     e5e:	24 17       	cp	r18, r20
     e60:	09 f4       	brne	.+2      	; 0xe64 <interperetKnob+0x160>
     e62:	1c c1       	rjmp	.+568    	; 0x109c <interperetKnob+0x398>
 			{
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     e64:	f7 01       	movw	r30, r14
     e66:	22 85       	ldd	r18, Z+10	; 0x0a
     e68:	24 60       	ori	r18, 0x04	; 4
     e6a:	22 87       	std	Z+10, r18	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     e6c:	21 2f       	mov	r18, r17
     e6e:	20 61       	ori	r18, 0x10	; 16
     e70:	23 87       	std	Z+11, r18	; 0x0b
 				currentKnobPattern->outputPitch[positionSelect] = (currentGlobals->filteredKnobBuffer[select]^128);
     e72:	fb 01       	movw	r30, r22
     e74:	e1 0f       	add	r30, r17
     e76:	f1 1d       	adc	r31, r1
     e78:	40 58       	subi	r20, 0x80	; 128
     e7a:	40 8b       	std	Z+16, r20	; 0x10
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     e7c:	97 01       	movw	r18, r14
     e7e:	28 0f       	add	r18, r24
     e80:	39 1f       	adc	r19, r25
     e82:	d9 01       	movw	r26, r18
     e84:	ab 58       	subi	r26, 0x8B	; 139
     e86:	bf 4f       	sbci	r27, 0xFF	; 255
     e88:	e9 01       	movw	r28, r18
     e8a:	c7 5b       	subi	r28, 0xB7	; 183
     e8c:	df 4f       	sbci	r29, 0xFF	; 255
     e8e:	88 81       	ld	r24, Y
     e90:	8c 93       	st	X, r24
				outputSampleRate(positionSelect, 0, currentKnobPattern->outputPitch[positionSelect]);
     e92:	40 89       	ldd	r20, Z+16	; 0x10
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	81 2f       	mov	r24, r17
     e98:	0e 94 6f 16 	call	0x2cde	; 0x2cde <outputSampleRate>
     e9c:	ff c0       	rjmp	.+510    	; 0x109c <interperetKnob+0x398>
 			}
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
     e9e:	29 2f       	mov	r18, r25
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	ca 01       	movw	r24, r20
     ea4:	82 0f       	add	r24, r18
     ea6:	93 1f       	adc	r25, r19
     ea8:	fc 01       	movw	r30, r24
     eaa:	eb 58       	subi	r30, 0x8B	; 139
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	d0 81       	ld	r29, Z
     eb0:	bc 97       	sbiw	r30, 0x2c	; 44
     eb2:	80 81       	ld	r24, Z
     eb4:	d8 17       	cp	r29, r24
     eb6:	09 f4       	brne	.+2      	; 0xeba <interperetKnob+0x1b6>
     eb8:	f1 c0       	rjmp	.+482    	; 0x109c <interperetKnob+0x398>
			{
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     eba:	cc 2e       	mov	r12, r28
     ebc:	d1 2c       	mov	r13, r1
     ebe:	db 01       	movw	r26, r22
     ec0:	ac 0d       	add	r26, r12
     ec2:	bd 1d       	adc	r27, r13
     ec4:	fd 01       	movw	r30, r26
     ec6:	e8 5a       	subi	r30, 0xA8	; 168
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	c0 81       	ld	r28, Z
     ecc:	a8 5b       	subi	r26, 0xB8	; 184
     ece:	bf 4f       	sbci	r27, 0xFF	; 255
     ed0:	ac 91       	ld	r26, X
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     ed2:	fa 01       	movw	r30, r20
     ed4:	92 85       	ldd	r25, Z+10	; 0x0a
     ed6:	94 60       	ori	r25, 0x04	; 4
     ed8:	92 87       	std	Z+10, r25	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
     eda:	91 2f       	mov	r25, r17
     edc:	90 62       	ori	r25, 0x20	; 32
     ede:	93 87       	std	Z+11, r25	; 0x0b
				
				if(currentGlobals->currentGPButtons&0x04) 
     ee0:	92 81       	ldd	r25, Z+2	; 0x02
     ee2:	92 ff       	sbrs	r25, 2
     ee4:	09 c0       	rjmp	.+18     	; 0xef8 <interperetKnob+0x1f4>
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
			{
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     ee6:	ec 2f       	mov	r30, r28
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	fa 2b       	or	r31, r26
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
				
				if(currentGlobals->currentGPButtons&0x04) 
				{ //if "fine" is on:
					totalAttackTime = totalAttackTime+((currentGlobals->filteredKnobBuffer[select])-(currentGlobals->lastFilteredKnobBuffer[select])); 
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	8d 1b       	sub	r24, r29
     ef0:	91 09       	sbc	r25, r1
     ef2:	e8 0f       	add	r30, r24
     ef4:	f9 1f       	adc	r31, r25
     ef6:	08 c0       	rjmp	.+16     	; 0xf08 <interperetKnob+0x204>
					//this algorithm needs work. We need to not write to Attack time if attack time is less than 20ms. 
					//maybe this algorythm is fine, we just don't print/attack stage for values under 20MS?
				}else
				{
					totalAttackTime = ((currentGlobals->filteredKnobBuffer[select])-1)*238;
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	ae ee       	ldi	r26, 0xEE	; 238
     efe:	a8 9f       	mul	r26, r24
     f00:	f0 01       	movw	r30, r0
     f02:	a9 9f       	mul	r26, r25
     f04:	f0 0d       	add	r31, r0
     f06:	11 24       	eor	r1, r1
				}
				currentKnobPattern->trackAttackTimeMSB[positionSelectTracks] = ((totalAttackTime)>>8);
     f08:	6c 0d       	add	r22, r12
     f0a:	7d 1d       	adc	r23, r13
     f0c:	db 01       	movw	r26, r22
     f0e:	a8 5b       	subi	r26, 0xB8	; 184
     f10:	bf 4f       	sbci	r27, 0xFF	; 255
     f12:	fc 93       	st	X, r31
				currentKnobPattern->trackAttackTimeLSB[positionSelectTracks] = (totalAttackTime); //this should truncate the top 8 bits. 
     f14:	50 96       	adiw	r26, 0x10	; 16
     f16:	ec 93       	st	X, r30
				//we will eventually need a switch to write to the MSB also, for both attack and release.

				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     f18:	24 0f       	add	r18, r20
     f1a:	35 1f       	adc	r19, r21
     f1c:	f9 01       	movw	r30, r18
     f1e:	eb 58       	subi	r30, 0x8B	; 139
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	d9 01       	movw	r26, r18
     f24:	a7 5b       	subi	r26, 0xB7	; 183
     f26:	bf 4f       	sbci	r27, 0xFF	; 255
     f28:	8c 91       	ld	r24, X
     f2a:	80 83       	st	Z, r24
     f2c:	b7 c0       	rjmp	.+366    	; 0x109c <interperetKnob+0x398>
			}
			break;
 			
 			case 3:
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
     f2e:	29 2f       	mov	r18, r25
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	ca 01       	movw	r24, r20
     f34:	82 0f       	add	r24, r18
     f36:	93 1f       	adc	r25, r19
     f38:	fc 01       	movw	r30, r24
     f3a:	e7 5b       	subi	r30, 0xB7	; 183
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	40 81       	ld	r20, Z
     f40:	bc 96       	adiw	r30, 0x2c	; 44
     f42:	80 81       	ld	r24, Z
     f44:	84 17       	cp	r24, r20
     f46:	09 f4       	brne	.+2      	; 0xf4a <interperetKnob+0x246>
     f48:	a9 c0       	rjmp	.+338    	; 0x109c <interperetKnob+0x398>
 			{
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     f4a:	f7 01       	movw	r30, r14
     f4c:	82 85       	ldd	r24, Z+10	; 0x0a
     f4e:	84 60       	ori	r24, 0x04	; 4
     f50:	82 87       	std	Z+10, r24	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     f52:	81 2f       	mov	r24, r17
     f54:	80 63       	ori	r24, 0x30	; 48
     f56:	83 87       	std	Z+11, r24	; 0x0b
 				currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks] = currentGlobals->filteredKnobBuffer[select];
     f58:	cc 0e       	add	r12, r28
     f5a:	d1 1c       	adc	r13, r1
     f5c:	f6 01       	movw	r30, r12
     f5e:	e8 58       	subi	r30, 0x88	; 136
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	40 83       	st	Z, r20
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     f64:	2e 0d       	add	r18, r14
     f66:	3f 1d       	adc	r19, r15
     f68:	f9 01       	movw	r30, r18
     f6a:	eb 58       	subi	r30, 0x8B	; 139
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	d9 01       	movw	r26, r18
     f70:	a7 5b       	subi	r26, 0xB7	; 183
     f72:	bf 4f       	sbci	r27, 0xFF	; 255
     f74:	8c 91       	ld	r24, X
     f76:	80 83       	st	Z, r24
     f78:	91 c0       	rjmp	.+290    	; 0x109c <interperetKnob+0x398>
 			}
 			break;
 			
 			case 4:;
 			//int16_t currentTrackValue = ((currentKnobPattern->trackMainVolumeMSB[positionSelectTracks]<<8)|(currentKnobPattern->trackMainVolumeLSB[positionSelectTracks]));
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
     f7a:	a9 2e       	mov	r10, r25
     f7c:	b1 2c       	mov	r11, r1
     f7e:	ca 01       	movw	r24, r20
     f80:	8a 0d       	add	r24, r10
     f82:	9b 1d       	adc	r25, r11
     f84:	fc 01       	movw	r30, r24
     f86:	eb 58       	subi	r30, 0x8B	; 139
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
     f8c:	bc 97       	sbiw	r30, 0x2c	; 44
     f8e:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
     f90:	26 17       	cp	r18, r22
     f92:	20 f4       	brcc	.+8      	; 0xf9c <interperetKnob+0x298>
	{
		returnMe = v1-v2;
     f94:	f6 2f       	mov	r31, r22
     f96:	f2 1b       	sub	r31, r18
     f98:	2f 2f       	mov	r18, r31
     f9a:	01 c0       	rjmp	.+2      	; 0xf9e <interperetKnob+0x29a>
	}
	else
	{
		returnMe = v2-v1;
     f9c:	26 1b       	sub	r18, r22
 			
 			case 4:;
 			//int16_t currentTrackValue = ((currentKnobPattern->trackMainVolumeMSB[positionSelectTracks]<<8)|(currentKnobPattern->trackMainVolumeLSB[positionSelectTracks]));
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];
 			if(checkVariation(newRead,prevRead)>2)
     f9e:	23 30       	cpi	r18, 0x03	; 3
     fa0:	08 f4       	brcc	.+2      	; 0xfa4 <interperetKnob+0x2a0>
     fa2:	7c c0       	rjmp	.+248    	; 0x109c <interperetKnob+0x398>
 			{
				int16_t negCheckValueTrack = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__floatsisf>
     fae:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <volumeDivisor>
     fb2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <volumeDivisor+0x1>
     fb6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <volumeDivisor+0x2>
     fba:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <volumeDivisor+0x3>
     fbe:	0e 94 9b 1c 	call	0x3936	; 0x3936 <__divsf3>
     fc2:	2b 01       	movw	r4, r22
     fc4:	3c 01       	movw	r6, r24
     fc6:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <NegativeOffset>
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__floatsisf>
     fd4:	9b 01       	movw	r18, r22
     fd6:	ac 01       	movw	r20, r24
     fd8:	c3 01       	movw	r24, r6
     fda:	b2 01       	movw	r22, r4
     fdc:	0e 94 36 1c 	call	0x386c	; 0x386c <__subsf3>
     fe0:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <__fixsfsi>
     fe4:	86 2f       	mov	r24, r22
     fe6:	97 2f       	mov	r25, r23
     fe8:	9c 01       	movw	r18, r24
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     fea:	f7 01       	movw	r30, r14
     fec:	82 85       	ldd	r24, Z+10	; 0x0a
     fee:	84 60       	ori	r24, 0x04	; 4
     ff0:	82 87       	std	Z+10, r24	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     ff2:	81 2f       	mov	r24, r17
     ff4:	80 64       	ori	r24, 0x40	; 64
     ff6:	83 87       	std	Z+11, r24	; 0x0b
				
	 			currentKnobPattern->trackMainVolumeLSB[positionSelectTracks] = (negCheckValueTrack);
     ff8:	d0 e0       	ldi	r29, 0x00	; 0
     ffa:	f6 01       	movw	r30, r12
     ffc:	ec 0f       	add	r30, r28
     ffe:	fd 1f       	adc	r31, r29
    1000:	60 af       	std	Z+56, r22	; 0x38
	 			if(negCheckValueTrack>(-1))
    1002:	33 23       	and	r19, r19
    1004:	2c f0       	brlt	.+10     	; 0x1010 <interperetKnob+0x30c>
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 0;
    1006:	f6 01       	movw	r30, r12
    1008:	ec 0f       	add	r30, r28
    100a:	fd 1f       	adc	r31, r29
    100c:	10 a6       	std	Z+40, r1	; 0x28
    100e:	05 c0       	rjmp	.+10     	; 0x101a <interperetKnob+0x316>
	 			}else
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 255;
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	f6 01       	movw	r30, r12
    1014:	ec 0f       	add	r30, r28
    1016:	fd 1f       	adc	r31, r29
    1018:	80 a7       	std	Z+40, r24	; 0x28
	 			}

				
				if(currentKnobPattern->envelopeType[positionSelectTracks]==1||currentKnobPattern->envelopeType[positionSelectTracks]==3) //set track volume directly if Envelope mode is only release, or none. 
    101a:	f6 01       	movw	r30, r12
    101c:	ec 0f       	add	r30, r28
    101e:	fd 1f       	adc	r31, r29
    1020:	e5 51       	subi	r30, 0x15	; 21
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	80 81       	ld	r24, Z
    1026:	8d 7f       	andi	r24, 0xFD	; 253
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	71 f4       	brne	.+28     	; 0x1048 <interperetKnob+0x344>
				{
	 				setTrackVolume(currentKnobPattern->trackSampleLSB[positionSelectTracks], currentKnobPattern->trackSampleMSB[positionSelectTracks],
    102c:	cc 0d       	add	r28, r12
    102e:	dd 1d       	adc	r29, r13
    1030:	de 01       	movw	r26, r28
    1032:	a8 56       	subi	r26, 0x68	; 104
    1034:	bf 4f       	sbci	r27, 0xFF	; 255
    1036:	fe 01       	movw	r30, r28
    1038:	e8 55       	subi	r30, 0x58	; 88
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	28 a5       	ldd	r18, Y+40	; 0x28
    103e:	46 2f       	mov	r20, r22
    1040:	6c 91       	ld	r22, X
    1042:	80 81       	ld	r24, Z
    1044:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <setTrackVolume>
					currentKnobPattern->trackMainVolumeLSB[positionSelectTracks], currentKnobPattern->trackMainVolumeMSB[positionSelectTracks]);
				}
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select]; 
    1048:	97 01       	movw	r18, r14
    104a:	2a 0d       	add	r18, r10
    104c:	3b 1d       	adc	r19, r11
    104e:	f9 01       	movw	r30, r18
    1050:	eb 58       	subi	r30, 0x8B	; 139
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	d9 01       	movw	r26, r18
    1056:	a7 5b       	subi	r26, 0xB7	; 183
    1058:	bf 4f       	sbci	r27, 0xFF	; 255
    105a:	8c 91       	ld	r24, X
    105c:	80 83       	st	Z, r24
    105e:	1e c0       	rjmp	.+60     	; 0x109c <interperetKnob+0x398>
		}
		
		
	}else
	{
		switch (select)
    1060:	8a 32       	cpi	r24, 0x2A	; 42
    1062:	e1 f4       	brne	.+56     	; 0x109c <interperetKnob+0x398>
// 			break;
// 			
 			case 42:
			 
			 //we need to do a bit more filtering here. Not sure if that's happening here, or in the actual knob read.
			 if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
    1064:	fa 01       	movw	r30, r20
    1066:	ed 58       	subi	r30, 0x8D	; 141
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	80 81       	ld	r24, Z
    106c:	bc 96       	adiw	r30, 0x2c	; 44
    106e:	90 81       	ld	r25, Z
    1070:	98 17       	cp	r25, r24
    1072:	a1 f0       	breq	.+40     	; 0x109c <interperetKnob+0x398>
			{//not sure if this works here, but we're going to try it. 
				
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
    1074:	fa 01       	movw	r30, r20
    1076:	92 85       	ldd	r25, Z+10	; 0x0a
    1078:	94 60       	ori	r25, 0x04	; 4
    107a:	92 87       	std	Z+10, r25	; 0x0a
				currentGlobals->knobStatus = (5<<4); //since all other pot banks are 0-4, the next ones will be 5-8. We should maybe figure out a better system for this, 
    107c:	90 e5       	ldi	r25, 0x50	; 80
    107e:	93 87       	std	Z+11, r25	; 0x0b
				//maybe some defines?				
 				currentKnobPattern->patternBPM = currentGlobals->filteredKnobBuffer[select];
    1080:	fb 01       	movw	r30, r22
    1082:	e8 53       	subi	r30, 0x38	; 56
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	91 83       	std	Z+1, r25	; 0x01
    108a:	80 83       	st	Z, r24
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
    108c:	fa 01       	movw	r30, r20
    108e:	e1 56       	subi	r30, 0x61	; 97
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	da 01       	movw	r26, r20
    1094:	ad 58       	subi	r26, 0x8D	; 141
    1096:	bf 4f       	sbci	r27, 0xFF	; 255
    1098:	8c 91       	ld	r24, X
    109a:	80 83       	st	Z, r24
// 			break;
		}
		
	}

}
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	df 90       	pop	r13
    10aa:	cf 90       	pop	r12
    10ac:	bf 90       	pop	r11
    10ae:	af 90       	pop	r10
    10b0:	7f 90       	pop	r7
    10b2:	6f 90       	pop	r6
    10b4:	5f 90       	pop	r5
    10b6:	4f 90       	pop	r4
    10b8:	08 95       	ret

000010ba <listenKnobs>:

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
    10ba:	ef 92       	push	r14
    10bc:	ff 92       	push	r15
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	7c 01       	movw	r14, r24
    10c6:	8b 01       	movw	r16, r22
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    10c8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
    10ca:	8c 2f       	mov	r24, r28
    10cc:	b0 dd       	rcall	.-1184   	; 0xc2e <selectKnob>
		updateKnob(loopCounter, currentGlobals);
    10ce:	b8 01       	movw	r22, r16
    10d0:	8c 2f       	mov	r24, r28
    10d2:	ed dd       	rcall	.-1062   	; 0xcae <updateKnob>
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
    10d4:	a8 01       	movw	r20, r16
    10d6:	b7 01       	movw	r22, r14
    10d8:	8c 2f       	mov	r24, r28
    10da:	14 de       	rcall	.-984    	; 0xd04 <interperetKnob>

}

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    10dc:	cf 5f       	subi	r28, 0xFF	; 255
    10de:	cc 32       	cpi	r28, 0x2C	; 44
    10e0:	a1 f7       	brne	.-24     	; 0x10ca <listenKnobs+0x10>
	{
		selectKnob(loopCounter);
		updateKnob(loopCounter, currentGlobals);
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
	}
}
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	ff 90       	pop	r15
    10ea:	ef 90       	pop	r14
    10ec:	08 95       	ret

000010ee <initLEDs>:
extern Pattern currentPattern;
extern uint8_t currentStep;

void initLEDs()
{
	DDRG = 0B00000111; //outputs on G5,2, and 0.
    10ee:	87 e0       	ldi	r24, 0x07	; 7
    10f0:	83 bb       	out	0x13, r24	; 19
    10f2:	08 95       	ret

000010f4 <parseLEDs>:
}
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
    10f4:	a2 98       	cbi	0x14, 2	; 20
    10f6:	27 e0       	ldi	r18, 0x07	; 7
	for(uint8_t j=0; j<7; j++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    10f8:	a0 9a       	sbi	0x14, 0	; 20
		if(gpParse&0x80)
    10fa:	66 23       	and	r22, r22
    10fc:	14 f4       	brge	.+4      	; 0x1102 <parseLEDs+0xe>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    10fe:	a1 9a       	sbi	0x14, 1	; 20
    1100:	01 c0       	rjmp	.+2      	; 0x1104 <parseLEDs+0x10>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    1102:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    1104:	a0 98       	cbi	0x14, 0	; 20
		gpParse = gpParse << 1;
    1106:	66 0f       	add	r22, r22
    1108:	21 50       	subi	r18, 0x01	; 1
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t j=0; j<7; j++)
    110a:	b1 f7       	brne	.-20     	; 0x10f8 <parseLEDs+0x4>
    110c:	21 e1       	ldi	r18, 0x11	; 17
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    110e:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
    1110:	99 23       	and	r25, r25
    1112:	14 f4       	brge	.+4      	; 0x1118 <parseLEDs+0x24>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    1114:	a1 9a       	sbi	0x14, 1	; 20
    1116:	01 c0       	rjmp	.+2      	; 0x111a <parseLEDs+0x26>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    1118:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    111a:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	21 50       	subi	r18, 0x01	; 1
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
    1122:	a9 f7       	brne	.-22     	; 0x110e <parseLEDs+0x1a>
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	
	
	PORTG |= (1 << PG2); //latch pin high
    1124:	a2 9a       	sbi	0x14, 2	; 20
    1126:	08 95       	ret

00001128 <updateLEDs>:
}

void updateLEDs(Pattern ledCurrentPattern, Globals currentGlobals)
{
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	cf 57       	subi	r28, 0x7F	; 127
    1132:	de 4f       	sbci	r29, 0xFE	; 254
    1134:	28 81       	ld	r18, Y
    1136:	39 81       	ldd	r19, Y+1	; 0x01
    1138:	c1 58       	subi	r28, 0x81	; 129
    113a:	d1 40       	sbci	r29, 0x01	; 1
    113c:	cd 57       	subi	r28, 0x7D	; 125
    113e:	de 4f       	sbci	r29, 0xFE	; 254
    1140:	68 81       	ld	r22, Y
    1142:	c3 58       	subi	r28, 0x83	; 131
    1144:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t shiftedState = currentGlobals.menuState >> 4; //this will get rid of EncoderB
	switch(shiftedState)
    1146:	c9 57       	subi	r28, 0x79	; 121
    1148:	de 4f       	sbci	r29, 0xFE	; 254
    114a:	98 81       	ld	r25, Y
    114c:	c7 58       	subi	r28, 0x87	; 135
    114e:	d1 40       	sbci	r29, 0x01	; 1
    1150:	92 95       	swap	r25
    1152:	9f 70       	andi	r25, 0x0F	; 15
    1154:	91 30       	cpi	r25, 0x01	; 1
    1156:	49 f0       	breq	.+18     	; 0x116a <updateLEDs+0x42>
    1158:	28 f0       	brcs	.+10     	; 0x1164 <updateLEDs+0x3c>
    115a:	92 30       	cpi	r25, 0x02	; 2
    115c:	d1 f0       	breq	.+52     	; 0x1192 <updateLEDs+0x6a>
    115e:	93 30       	cpi	r25, 0x03	; 3
    1160:	d9 f0       	breq	.+54     	; 0x1198 <updateLEDs+0x70>
    1162:	1c c0       	rjmp	.+56     	; 0x119c <updateLEDs+0x74>
	{
		case 0:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    1164:	c9 01       	movw	r24, r18
    1166:	c6 df       	rcall	.-116    	; 0x10f4 <parseLEDs>
		break;
    1168:	19 c0       	rjmp	.+50     	; 0x119c <updateLEDs+0x74>

		case 1:
		parseLEDs(ledCurrentPattern.trackSequence[currentGlobals.currentStep], currentGlobals.currentGPButtons);
    116a:	cb 57       	subi	r28, 0x7B	; 123
    116c:	de 4f       	sbci	r29, 0xFE	; 254
    116e:	e8 81       	ld	r30, Y
    1170:	c5 58       	subi	r28, 0x85	; 133
    1172:	d1 40       	sbci	r29, 0x01	; 1
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	ee 0f       	add	r30, r30
    1178:	ff 1f       	adc	r31, r31
    117a:	86 e0       	ldi	r24, 0x06	; 6
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	8c 0f       	add	r24, r28
    1180:	9d 1f       	adc	r25, r29
    1182:	e8 0f       	add	r30, r24
    1184:	f9 1f       	adc	r31, r25
    1186:	e5 50       	subi	r30, 0x05	; 5
    1188:	ff 4f       	sbci	r31, 0xFF	; 255
    118a:	80 81       	ld	r24, Z
    118c:	91 81       	ldd	r25, Z+1	; 0x01
    118e:	b2 df       	rcall	.-156    	; 0x10f4 <parseLEDs>
		break;

		case 2:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    1190:	05 c0       	rjmp	.+10     	; 0x119c <updateLEDs+0x74>
    1192:	c9 01       	movw	r24, r18
		break;
    1194:	af df       	rcall	.-162    	; 0x10f4 <parseLEDs>

		case 3:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    1196:	02 c0       	rjmp	.+4      	; 0x119c <updateLEDs+0x74>
    1198:	c9 01       	movw	r24, r18
    119a:	ac df       	rcall	.-168    	; 0x10f4 <parseLEDs>
		break;
	}

}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <main>:

int main(){


	
	initScreen();
    11a2:	0e 94 2a 12 	call	0x2454	; 0x2454 <initScreen>
	initGlobals(&currentGlobals, factoryReset);  
    11a6:	60 91 94 03 	lds	r22, 0x0394	; 0x800394 <factoryReset>
    11aa:	8d e1       	ldi	r24, 0x1D	; 29
    11ac:	95 e0       	ldi	r25, 0x05	; 5
    11ae:	ee dc       	rcall	.-1572   	; 0xb8c <initGlobals>
	initButtons();
    11b0:	6d d8       	rcall	.-3878   	; 0x28c <initButtons>
	initLEDs();
    11b2:	9d df       	rcall	.-198    	; 0x10ee <initLEDs>
	initEncoders();
    11b4:	6d d9       	rcall	.-3366   	; 0x490 <initEncoders>
    11b6:	26 dd       	rcall	.-1460   	; 0xc04 <initADC>
	initADC();
    11b8:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialInit0>
	serialInit0();
    11bc:	0e 94 83 11 	call	0x2306	; 0x2306 <initMidi>
	initMidi();
    11c0:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <initEnvelopes>
	initEnvelopes();
    11c4:	0e 94 ae 14 	call	0x295c	; 0x295c <initSequencer>
	initSequencer();
    11c8:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <twi_init>
	twi_init();
    11cc:	82 ea       	ldi	r24, 0xA2	; 162
	initBank(&currentPattern);
    11ce:	93 e0       	ldi	r25, 0x03	; 3
    11d0:	ae dc       	rcall	.-1700   	; 0xb2e <initBank>
    11d2:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <factoryReset>
	
	//this should be a global function. 
	if(factoryReset==1)
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	19 f5       	brne	.+70     	; 0x1220 <main+0x7e>
    11da:	8d b7       	in	r24, 0x3d	; 61
    11dc:	9e b7       	in	r25, 0x3e	; 62
	{
		//do factory reset here.
		factoryResetEeprom(currentPattern);
    11de:	8b 57       	subi	r24, 0x7B	; 123
    11e0:	91 40       	sbci	r25, 0x01	; 1
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	9e bf       	out	0x3e, r25	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	8d bf       	out	0x3d, r24	; 61
    11ec:	ad b7       	in	r26, 0x3d	; 61
    11ee:	be b7       	in	r27, 0x3e	; 62
    11f0:	11 96       	adiw	r26, 0x01	; 1
    11f2:	8b e7       	ldi	r24, 0x7B	; 123
    11f4:	91 e0       	ldi	r25, 0x01	; 1
    11f6:	e2 ea       	ldi	r30, 0xA2	; 162
    11f8:	f3 e0       	ldi	r31, 0x03	; 3
    11fa:	01 90       	ld	r0, Z+
    11fc:	0d 92       	st	X+, r0
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	e1 f7       	brne	.-8      	; 0x11fa <main+0x58>
    1202:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <factoryResetEeprom>
    1206:	8d b7       	in	r24, 0x3d	; 61
    1208:	9e b7       	in	r25, 0x3e	; 62
		globalWrite(&currentGlobals);
    120a:	85 58       	subi	r24, 0x85	; 133
    120c:	9e 4f       	sbci	r25, 0xFE	; 254
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	9e bf       	out	0x3e, r25	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	8d bf       	out	0x3d, r24	; 61
    1218:	8d e1       	ldi	r24, 0x1D	; 29
    121a:	95 e0       	ldi	r25, 0x05	; 5
    121c:	0e 94 12 1c 	call	0x3824	; 0x3824 <globalWrite>
    1220:	60 91 20 05 	lds	r22, 0x0520	; 0x800520 <currentGlobals+0x3>
	}

	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
    1224:	82 ea       	ldi	r24, 0xA2	; 162
    1226:	93 e0       	ldi	r25, 0x03	; 3
    1228:	0e 94 33 1a 	call	0x3466	; 0x3466 <eepromLoadPattern>
    122c:	c0 e0       	ldi	r28, 0x00	; 0
    122e:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    1230:	0f 2e       	mov	r0, r31
    1232:	fc e2       	ldi	r31, 0x2C	; 44
	{
		uint8_t loadSelect = i%44;
    1234:	ff 2e       	mov	r15, r31
    1236:	f0 2d       	mov	r31, r0
    1238:	9e 01       	movw	r18, r28
    123a:	af e2       	ldi	r26, 0x2F	; 47
    123c:	ba eb       	ldi	r27, 0xBA	; 186
    123e:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    1242:	96 95       	lsr	r25
    1244:	87 95       	ror	r24
    1246:	92 95       	swap	r25
    1248:	82 95       	swap	r24
    124a:	8f 70       	andi	r24, 0x0F	; 15
    124c:	89 27       	eor	r24, r25
    124e:	9f 70       	andi	r25, 0x0F	; 15
    1250:	89 27       	eor	r24, r25
    1252:	f8 9e       	mul	r15, r24
    1254:	90 01       	movw	r18, r0
    1256:	f9 9e       	mul	r15, r25
    1258:	30 0d       	add	r19, r0
    125a:	11 24       	eor	r1, r1
    125c:	8e 01       	movw	r16, r28
    125e:	02 1b       	sub	r16, r18
    1260:	13 0b       	sbc	r17, r19
    1262:	80 2f       	mov	r24, r16
		selectKnob(loadSelect);
    1264:	e4 dc       	rcall	.-1592   	; 0xc2e <selectKnob>
    1266:	6d e1       	ldi	r22, 0x1D	; 29
		updateKnob(loadSelect, &currentGlobals);
    1268:	75 e0       	ldi	r23, 0x05	; 5
    126a:	80 2f       	mov	r24, r16
    126c:	20 dd       	rcall	.-1472   	; 0xcae <updateKnob>
    126e:	21 96       	adiw	r28, 0x01	; 1
    1270:	c8 3b       	cpi	r28, 0xB8	; 184
		factoryResetEeprom(currentPattern);
		globalWrite(&currentGlobals);
	}

	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	d9 07       	cpc	r29, r25
    1276:	01 f7       	brne	.-64     	; 0x1238 <main+0x96>
    1278:	8d e1       	ldi	r24, 0x1D	; 29
	{
		uint8_t loadSelect = i%44;
		selectKnob(loadSelect);
		updateKnob(loadSelect, &currentGlobals);
	}
	initializeKnob(&currentGlobals); //then copy it to the lastFilteredKnobBuffer. 
    127a:	95 e0       	ldi	r25, 0x05	; 5
    127c:	37 dd       	rcall	.-1426   	; 0xcec <initializeKnob>
    127e:	60 91 94 03 	lds	r22, 0x0394	; 0x800394 <factoryReset>
	globalLoad(&currentGlobals, factoryReset);
    1282:	8d e1       	ldi	r24, 0x1D	; 29
    1284:	95 e0       	ldi	r25, 0x05	; 5
    1286:	0e 94 23 1c 	call	0x3846	; 0x3846 <globalLoad>
    128a:	8d b7       	in	r24, 0x3d	; 61
    128c:	9e b7       	in	r25, 0x3e	; 62
	initMenu(&screenBank, currentPattern, currentGlobals); //fills screenBank with menu strings
    128e:	87 5e       	subi	r24, 0xE7	; 231
    1290:	91 09       	sbc	r25, r1
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	9e bf       	out	0x3e, r25	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	8d bf       	out	0x3d, r24	; 61
    129c:	ad b7       	in	r26, 0x3d	; 61
    129e:	be b7       	in	r27, 0x3e	; 62
    12a0:	11 96       	adiw	r26, 0x01	; 1
    12a2:	87 ee       	ldi	r24, 0xE7	; 231
    12a4:	ed e1       	ldi	r30, 0x1D	; 29
    12a6:	f5 e0       	ldi	r31, 0x05	; 5
    12a8:	01 90       	ld	r0, Z+
    12aa:	0d 92       	st	X+, r0
    12ac:	8a 95       	dec	r24
    12ae:	e1 f7       	brne	.-8      	; 0x12a8 <main+0x106>
    12b0:	8d b7       	in	r24, 0x3d	; 61
    12b2:	9e b7       	in	r25, 0x3e	; 62
    12b4:	8b 57       	subi	r24, 0x7B	; 123
    12b6:	91 40       	sbci	r25, 0x01	; 1
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	9e bf       	out	0x3e, r25	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	8d bf       	out	0x3d, r24	; 61
    12c2:	ad b7       	in	r26, 0x3d	; 61
    12c4:	be b7       	in	r27, 0x3e	; 62
    12c6:	11 96       	adiw	r26, 0x01	; 1
    12c8:	8b e7       	ldi	r24, 0x7B	; 123
    12ca:	91 e0       	ldi	r25, 0x01	; 1
    12cc:	e2 ea       	ldi	r30, 0xA2	; 162
    12ce:	f3 e0       	ldi	r31, 0x03	; 3
    12d0:	01 90       	ld	r0, Z+
    12d2:	0d 92       	st	X+, r0
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <main+0x12e>
    12d8:	84 e0       	ldi	r24, 0x04	; 4
    12da:	96 e0       	ldi	r25, 0x06	; 6
    12dc:	09 d1       	rcall	.+530    	; 0x14f0 <initMenu>
    12de:	84 e0       	ldi	r24, 0x04	; 4
    12e0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>

	//this ISR is used for Button De-Bouncing. Maybe we could put it somewhere else. 
	TCCR2B = 1<<CS22;//using 64 from pre-scaler
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
	TIMSK2 = 1<<TOIE2;
    12ea:	78 94       	sei
    12ec:	8d b7       	in	r24, 0x3d	; 61


	sei();	
    12ee:	9e b7       	in	r25, 0x3e	; 62
    12f0:	8e 59       	subi	r24, 0x9E	; 158
    12f2:	9d 4f       	sbci	r25, 0xFD	; 253
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	9e bf       	out	0x3e, r25	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	8d bf       	out	0x3d, r24	; 61
    12fe:	6d e1       	ldi	r22, 0x1D	; 29
    1300:	75 e0       	ldi	r23, 0x05	; 5


while(1) {
	
	
	listenTrigButtons(&currentPattern, &currentGlobals);
    1302:	82 ea       	ldi	r24, 0xA2	; 162
    1304:	93 e0       	ldi	r25, 0x03	; 3
    1306:	0e 94 4d 01 	call	0x29a	; 0x29a <listenTrigButtons>
    130a:	8d e1       	ldi	r24, 0x1D	; 29
    130c:	95 e0       	ldi	r25, 0x05	; 5
	listenGPButtons(currentPattern, &currentGlobals);
    130e:	9f 93       	push	r25
    1310:	8f 93       	push	r24
    1312:	8d b7       	in	r24, 0x3d	; 61
    1314:	9e b7       	in	r25, 0x3e	; 62
    1316:	8b 57       	subi	r24, 0x7B	; 123
    1318:	91 40       	sbci	r25, 0x01	; 1
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	9e bf       	out	0x3e, r25	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	8d bf       	out	0x3d, r24	; 61
    1324:	ad b7       	in	r26, 0x3d	; 61
    1326:	be b7       	in	r27, 0x3e	; 62
    1328:	11 96       	adiw	r26, 0x01	; 1
    132a:	8b e7       	ldi	r24, 0x7B	; 123
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	e2 ea       	ldi	r30, 0xA2	; 162
    1330:	f3 e0       	ldi	r31, 0x03	; 3
    1332:	01 90       	ld	r0, Z+
    1334:	0d 92       	st	X+, r0
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	e1 f7       	brne	.-8      	; 0x1332 <main+0x190>
    133a:	18 d8       	rcall	.-4048   	; 0x36c <listenGPButtons>
    133c:	8d b7       	in	r24, 0x3d	; 61
    133e:	9e b7       	in	r25, 0x3e	; 62
	updateLEDs(currentPattern, currentGlobals);
    1340:	83 58       	subi	r24, 0x83	; 131
    1342:	9e 4f       	sbci	r25, 0xFE	; 254
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	9e bf       	out	0x3e, r25	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	8d bf       	out	0x3d, r24	; 61
    134e:	87 5e       	subi	r24, 0xE7	; 231
    1350:	91 09       	sbc	r25, r1
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	9e bf       	out	0x3e, r25	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	8d bf       	out	0x3d, r24	; 61
    135c:	ad b7       	in	r26, 0x3d	; 61
    135e:	be b7       	in	r27, 0x3e	; 62
    1360:	11 96       	adiw	r26, 0x01	; 1
    1362:	87 ee       	ldi	r24, 0xE7	; 231
    1364:	ed e1       	ldi	r30, 0x1D	; 29
    1366:	f5 e0       	ldi	r31, 0x05	; 5
    1368:	01 90       	ld	r0, Z+
    136a:	0d 92       	st	X+, r0
    136c:	8a 95       	dec	r24
    136e:	e1 f7       	brne	.-8      	; 0x1368 <main+0x1c6>
    1370:	8d b7       	in	r24, 0x3d	; 61
    1372:	9e b7       	in	r25, 0x3e	; 62
    1374:	8b 57       	subi	r24, 0x7B	; 123
    1376:	91 40       	sbci	r25, 0x01	; 1
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	9e bf       	out	0x3e, r25	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	8d bf       	out	0x3d, r24	; 61
    1382:	ad b7       	in	r26, 0x3d	; 61
    1384:	be b7       	in	r27, 0x3e	; 62
    1386:	11 96       	adiw	r26, 0x01	; 1
    1388:	8b e7       	ldi	r24, 0x7B	; 123
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	e2 ea       	ldi	r30, 0xA2	; 162
    138e:	f3 e0       	ldi	r31, 0x03	; 3
    1390:	01 90       	ld	r0, Z+
    1392:	0d 92       	st	X+, r0
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	e1 f7       	brne	.-8      	; 0x1390 <main+0x1ee>
    1398:	c7 de       	rcall	.-626    	; 0x1128 <updateLEDs>
    139a:	8d b7       	in	r24, 0x3d	; 61
    139c:	9e b7       	in	r25, 0x3e	; 62
	listenEncoders(&currentPattern, &currentGlobals);
    139e:	8e 59       	subi	r24, 0x9E	; 158
    13a0:	9d 4f       	sbci	r25, 0xFD	; 253
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	9e bf       	out	0x3e, r25	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	8d bf       	out	0x3d, r24	; 61
    13ac:	6d e1       	ldi	r22, 0x1D	; 29
    13ae:	75 e0       	ldi	r23, 0x05	; 5
    13b0:	82 ea       	ldi	r24, 0xA2	; 162
    13b2:	93 e0       	ldi	r25, 0x03	; 3
    13b4:	f3 d8       	rcall	.-3610   	; 0x59c <listenEncoders>
    13b6:	6d e1       	ldi	r22, 0x1D	; 29
	listenKnobs(&currentPattern, &currentGlobals);
    13b8:	75 e0       	ldi	r23, 0x05	; 5
    13ba:	82 ea       	ldi	r24, 0xA2	; 162
    13bc:	93 e0       	ldi	r25, 0x03	; 3
    13be:	7d de       	rcall	.-774    	; 0x10ba <listenKnobs>
    13c0:	8d b7       	in	r24, 0x3d	; 61
    13c2:	9e b7       	in	r25, 0x3e	; 62
	updateSequencer(currentPattern, currentGlobals);
    13c4:	87 5e       	subi	r24, 0xE7	; 231
    13c6:	91 09       	sbc	r25, r1
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	9e bf       	out	0x3e, r25	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	8d bf       	out	0x3d, r24	; 61
    13d2:	ad b7       	in	r26, 0x3d	; 61
    13d4:	be b7       	in	r27, 0x3e	; 62
    13d6:	11 96       	adiw	r26, 0x01	; 1
    13d8:	87 ee       	ldi	r24, 0xE7	; 231
    13da:	ed e1       	ldi	r30, 0x1D	; 29
    13dc:	f5 e0       	ldi	r31, 0x05	; 5
    13de:	01 90       	ld	r0, Z+
    13e0:	0d 92       	st	X+, r0
    13e2:	8a 95       	dec	r24
    13e4:	e1 f7       	brne	.-8      	; 0x13de <main+0x23c>
    13e6:	8d b7       	in	r24, 0x3d	; 61
    13e8:	9e b7       	in	r25, 0x3e	; 62
    13ea:	8b 57       	subi	r24, 0x7B	; 123
    13ec:	91 40       	sbci	r25, 0x01	; 1
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	9e bf       	out	0x3e, r25	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	8d bf       	out	0x3d, r24	; 61
    13f8:	ad b7       	in	r26, 0x3d	; 61
    13fa:	be b7       	in	r27, 0x3e	; 62
    13fc:	11 96       	adiw	r26, 0x01	; 1
    13fe:	8b e7       	ldi	r24, 0x7B	; 123
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	e2 ea       	ldi	r30, 0xA2	; 162
    1404:	f3 e0       	ldi	r31, 0x03	; 3
    1406:	01 90       	ld	r0, Z+
    1408:	0d 92       	st	X+, r0
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	e1 f7       	brne	.-8      	; 0x1406 <main+0x264>
    140e:	0e 94 ce 14 	call	0x299c	; 0x299c <updateSequencer>
    1412:	8d b7       	in	r24, 0x3d	; 61
    1414:	9e b7       	in	r25, 0x3e	; 62
	updateScreen(&screenBank, &currentPattern, &currentGlobals);
    1416:	8e 59       	subi	r24, 0x9E	; 158
    1418:	9d 4f       	sbci	r25, 0xFD	; 253
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	9e bf       	out	0x3e, r25	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	8d bf       	out	0x3d, r24	; 61
    1424:	4d e1       	ldi	r20, 0x1D	; 29
    1426:	55 e0       	ldi	r21, 0x05	; 5
    1428:	62 ea       	ldi	r22, 0xA2	; 162
    142a:	73 e0       	ldi	r23, 0x03	; 3
    142c:	84 e0       	ldi	r24, 0x04	; 4
    142e:	96 e0       	ldi	r25, 0x06	; 6
    1430:	9f d1       	rcall	.+830    	; 0x1770 <updateScreen>
    1432:	8d b7       	in	r24, 0x3d	; 61
    1434:	9e b7       	in	r25, 0x3e	; 62
	midiRead(currentPattern, currentGlobals);
    1436:	87 5e       	subi	r24, 0xE7	; 231
    1438:	91 09       	sbc	r25, r1
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	9e bf       	out	0x3e, r25	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	8d bf       	out	0x3d, r24	; 61
    1444:	ad b7       	in	r26, 0x3d	; 61
    1446:	be b7       	in	r27, 0x3e	; 62
    1448:	11 96       	adiw	r26, 0x01	; 1
    144a:	87 ee       	ldi	r24, 0xE7	; 231
    144c:	ed e1       	ldi	r30, 0x1D	; 29
    144e:	f5 e0       	ldi	r31, 0x05	; 5
    1450:	01 90       	ld	r0, Z+
    1452:	0d 92       	st	X+, r0
    1454:	8a 95       	dec	r24
    1456:	e1 f7       	brne	.-8      	; 0x1450 <main+0x2ae>
    1458:	8d b7       	in	r24, 0x3d	; 61
    145a:	9e b7       	in	r25, 0x3e	; 62
    145c:	8b 57       	subi	r24, 0x7B	; 123
    145e:	91 40       	sbci	r25, 0x01	; 1
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	9e bf       	out	0x3e, r25	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	8d bf       	out	0x3d, r24	; 61
    146a:	ad b7       	in	r26, 0x3d	; 61
    146c:	be b7       	in	r27, 0x3e	; 62
    146e:	11 96       	adiw	r26, 0x01	; 1
    1470:	8b e7       	ldi	r24, 0x7B	; 123
    1472:	91 e0       	ldi	r25, 0x01	; 1
    1474:	e2 ea       	ldi	r30, 0xA2	; 162
    1476:	f3 e0       	ldi	r31, 0x03	; 3
    1478:	01 90       	ld	r0, Z+
    147a:	0d 92       	st	X+, r0
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	e1 f7       	brne	.-8      	; 0x1478 <main+0x2d6>
    1480:	52 d7       	rcall	.+3748   	; 0x2326 <midiRead>
    1482:	8d b7       	in	r24, 0x3d	; 61
    1484:	9e b7       	in	r25, 0x3e	; 62
	releaseUpdate(&currentPattern, &currentGlobals);
    1486:	8e 59       	subi	r24, 0x9E	; 158
    1488:	9d 4f       	sbci	r25, 0xFD	; 253
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	9e bf       	out	0x3e, r25	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	8d bf       	out	0x3d, r24	; 61
    1494:	6d e1       	ldi	r22, 0x1D	; 29
    1496:	75 e0       	ldi	r23, 0x05	; 5
    1498:	82 ea       	ldi	r24, 0xA2	; 162
    149a:	93 e0       	ldi	r25, 0x03	; 3
    149c:	0e 94 93 17 	call	0x2f26	; 0x2f26 <releaseUpdate>
    14a0:	2e cf       	rjmp	.-420    	; 0x12fe <main+0x15c>

000014a2 <__vector_32>:
    14a2:	1f 92       	push	r1
    14a4:	0f 92       	push	r0

	}
}

ISR(TIMER3_COMPA_vect)
{
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	0f 92       	push	r0
    14aa:	11 24       	eor	r1, r1
    14ac:	0b b6       	in	r0, 0x3b	; 59
    14ae:	0f 92       	push	r0
    14b0:	8f 93       	push	r24
    14b2:	9f 93       	push	r25
    14b4:	af 93       	push	r26
    14b6:	bf 93       	push	r27
    14b8:	ef 93       	push	r30
    14ba:	ff 93       	push	r31
	currentGlobals.releaseCounter++; //this will increase every millisecond.
    14bc:	ee eb       	ldi	r30, 0xBE	; 190
    14be:	f5 e0       	ldi	r31, 0x05	; 5
    14c0:	80 81       	ld	r24, Z
    14c2:	91 81       	ldd	r25, Z+1	; 0x01
    14c4:	a2 81       	ldd	r26, Z+2	; 0x02
    14c6:	b3 81       	ldd	r27, Z+3	; 0x03
    14c8:	01 96       	adiw	r24, 0x01	; 1
    14ca:	a1 1d       	adc	r26, r1
    14cc:	b1 1d       	adc	r27, r1
    14ce:	80 83       	st	Z, r24
    14d0:	91 83       	std	Z+1, r25	; 0x01
    14d2:	a2 83       	std	Z+2, r26	; 0x02
    14d4:	b3 83       	std	Z+3, r27	; 0x03
	//should run for about 1000 hours before overflow, so not something we really have to worry about.
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	0f 90       	pop	r0
    14e4:	0b be       	out	0x3b, r0	; 59
    14e6:	0f 90       	pop	r0
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	0f 90       	pop	r0
    14ec:	1f 90       	pop	r1
    14ee:	18 95       	reti

000014f0 <initMenu>:
uint8_t prevMenuState; //do we need this anymore?

//I don't like using a global extern here, instead of a passed pointer,
//but I can't seem to get the struct to stay in scope.
void initMenu(Screen *initTheScreen, Pattern currentPattern, Globals currentGlobals)
{
    14f0:	cf 92       	push	r12
    14f2:	df 92       	push	r13
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	8c 01       	movw	r16, r24
    1506:	c6 57       	subi	r28, 0x76	; 118
    1508:	de 4f       	sbci	r29, 0xFE	; 254
    150a:	e8 80       	ld	r14, Y
    150c:	ca 58       	subi	r28, 0x8A	; 138
    150e:	d1 40       	sbci	r29, 0x01	; 1

//screen0
initArrays(initTheScreen->screen0,0,"Performance Mode");
    1510:	40 e6       	ldi	r20, 0x60	; 96
    1512:	52 e0       	ldi	r21, 0x02	; 2
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	cb da       	rcall	.-2666   	; 0xab0 <initArrays>
initArrays(initTheScreen->screen0,1,"Pattern:");
    151a:	41 e7       	ldi	r20, 0x71	; 113
    151c:	52 e0       	ldi	r21, 0x02	; 2
    151e:	61 e0       	ldi	r22, 0x01	; 1
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	c8 01       	movw	r24, r16
    1524:	c5 da       	rcall	.-2678   	; 0xab0 <initArrays>
initArrays(initTheScreen->screen0,2,"BPM:");
    1526:	4a e7       	ldi	r20, 0x7A	; 122
    1528:	52 e0       	ldi	r21, 0x02	; 2
    152a:	62 e0       	ldi	r22, 0x02	; 2
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	c8 01       	movw	r24, r16
    1530:	bf da       	rcall	.-2690   	; 0xab0 <initArrays>
initArrays(initTheScreen->screen0,3,"Stop");
    1532:	4f e7       	ldi	r20, 0x7F	; 127
    1534:	52 e0       	ldi	r21, 0x02	; 2
    1536:	63 e0       	ldi	r22, 0x03	; 3
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	c8 01       	movw	r24, r16
    153c:	b9 da       	rcall	.-2702   	; 0xab0 <initArrays>

//screen1
initArrays(initTheScreen->screen1,0,"Sequence Edit");
    153e:	68 01       	movw	r12, r16
    1540:	8d eb       	ldi	r24, 0xBD	; 189
    1542:	c8 0e       	add	r12, r24
    1544:	d1 1c       	adc	r13, r1
    1546:	44 e8       	ldi	r20, 0x84	; 132
    1548:	52 e0       	ldi	r21, 0x02	; 2
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	c6 01       	movw	r24, r12
    1550:	af da       	rcall	.-2722   	; 0xab0 <initArrays>
initArrays(initTheScreen->screen1,1,"Pattern:");
    1552:	41 e7       	ldi	r20, 0x71	; 113
    1554:	52 e0       	ldi	r21, 0x02	; 2
    1556:	61 e0       	ldi	r22, 0x01	; 1
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	c6 01       	movw	r24, r12
    155c:	a9 da       	rcall	.-2734   	; 0xab0 <initArrays>
initArrays(initTheScreen->screen1,2,"Steps:");
    155e:	42 e9       	ldi	r20, 0x92	; 146
    1560:	52 e0       	ldi	r21, 0x02	; 2
    1562:	62 e0       	ldi	r22, 0x02	; 2
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	c6 01       	movw	r24, r12
    1568:	a3 da       	rcall	.-2746   	; 0xab0 <initArrays>
initArrays(initTheScreen->screen1,3,"Step number:");
    156a:	49 e9       	ldi	r20, 0x99	; 153
    156c:	52 e0       	ldi	r21, 0x02	; 2
    156e:	63 e0       	ldi	r22, 0x03	; 3
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	c6 01       	movw	r24, r12
    1574:	9d da       	rcall	.-2758   	; 0xab0 <initArrays>
    1576:	68 01       	movw	r12, r16

//screen2
initArrays(initTheScreen->screen2,0,"Track Settings");
    1578:	86 e8       	ldi	r24, 0x86	; 134
    157a:	c8 1a       	sub	r12, r24
    157c:	8e ef       	ldi	r24, 0xFE	; 254
    157e:	d8 0a       	sbc	r13, r24
    1580:	46 ea       	ldi	r20, 0xA6	; 166
    1582:	52 e0       	ldi	r21, 0x02	; 2
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	c6 01       	movw	r24, r12
    158a:	92 da       	rcall	.-2780   	; 0xab0 <initArrays>
initArrays(initTheScreen->screen2,1,"Track:");
    158c:	45 eb       	ldi	r20, 0xB5	; 181
    158e:	52 e0       	ldi	r21, 0x02	; 2
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	c6 01       	movw	r24, r12
    1596:	8c da       	rcall	.-2792   	; 0xab0 <initArrays>
initArrays(initTheScreen->screen2,2,"PlayMode:");
    1598:	4c eb       	ldi	r20, 0xBC	; 188
    159a:	52 e0       	ldi	r21, 0x02	; 2
    159c:	62 e0       	ldi	r22, 0x02	; 2
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	c6 01       	movw	r24, r12
    15a2:	86 da       	rcall	.-2804   	; 0xab0 <initArrays>
initArrays(initTheScreen->screen2,3,"OutRoute:");
    15a4:	46 ec       	ldi	r20, 0xC6	; 198
    15a6:	52 e0       	ldi	r21, 0x02	; 2
    15a8:	63 e0       	ldi	r22, 0x03	; 3
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	c6 01       	movw	r24, r12
    15ae:	80 da       	rcall	.-2816   	; 0xab0 <initArrays>
initArrays(initTheScreen->screen2,4,"EnvelopeMode:");
    15b0:	40 ed       	ldi	r20, 0xD0	; 208
    15b2:	52 e0       	ldi	r21, 0x02	; 2
    15b4:	64 e0       	ldi	r22, 0x04	; 4
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	c6 01       	movw	r24, r12
    15ba:	7a da       	rcall	.-2828   	; 0xab0 <initArrays>
    15bc:	4e ed       	ldi	r20, 0xDE	; 222
initArrays(initTheScreen->screen2,5,"SustainTime: ");
    15be:	52 e0       	ldi	r21, 0x02	; 2
    15c0:	65 e0       	ldi	r22, 0x05	; 5
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	c6 01       	movw	r24, r12
    15c6:	74 da       	rcall	.-2840   	; 0xab0 <initArrays>
    15c8:	68 01       	movw	r12, r16

//screen3
initArrays(initTheScreen->screen3,1,"Midi Channel:");
    15ca:	89 ec       	ldi	r24, 0xC9	; 201
    15cc:	c8 1a       	sub	r12, r24
    15ce:	8d ef       	ldi	r24, 0xFD	; 253
    15d0:	d8 0a       	sbc	r13, r24
    15d2:	4c ee       	ldi	r20, 0xEC	; 236
    15d4:	52 e0       	ldi	r21, 0x02	; 2
    15d6:	61 e0       	ldi	r22, 0x01	; 1
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	c6 01       	movw	r24, r12
    15dc:	69 da       	rcall	.-2862   	; 0xab0 <initArrays>
initArrays(initTheScreen->screen3,2,"Midi trig   :");
    15de:	4a ef       	ldi	r20, 0xFA	; 250
    15e0:	52 e0       	ldi	r21, 0x02	; 2
    15e2:	62 e0       	ldi	r22, 0x02	; 2
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	c6 01       	movw	r24, r12
    15e8:	63 da       	rcall	.-2874   	; 0xab0 <initArrays>
initArrays(initTheScreen->screen3,3," ");
    15ea:	4a e8       	ldi	r20, 0x8A	; 138
    15ec:	53 e0       	ldi	r21, 0x03	; 3
    15ee:	63 e0       	ldi	r22, 0x03	; 3
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	c6 01       	movw	r24, r12
    15f4:	5d da       	rcall	.-2886   	; 0xab0 <initArrays>
initArrays(initTheScreen->screen3,0,"Global Settings");
    15f6:	48 e0       	ldi	r20, 0x08	; 8
    15f8:	53 e0       	ldi	r21, 0x03	; 3
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	c6 01       	movw	r24, r12
    1600:	57 da       	rcall	.-2898   	; 0xab0 <initArrays>

//init all of the knob arrays:
initArrays(initTheScreen->knobScreen,0,"OutVolume x : xxxdb");//string 0 is outVolume
    1602:	68 01       	movw	r12, r16
    1604:	8c e0       	ldi	r24, 0x0C	; 12
    1606:	c8 1a       	sub	r12, r24
    1608:	8d ef       	ldi	r24, 0xFD	; 253
    160a:	d8 0a       	sbc	r13, r24
    160c:	48 e1       	ldi	r20, 0x18	; 24
    160e:	53 e0       	ldi	r21, 0x03	; 3
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,1,"Pitch : xxx");//string 1 is pitch
    1616:	4c da       	rcall	.-2920   	; 0xab0 <initArrays>
    1618:	4c e2       	ldi	r20, 0x2C	; 44
    161a:	53 e0       	ldi	r21, 0x03	; 3
    161c:	61 e0       	ldi	r22, 0x01	; 1
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,2,"AttackTime  :      S"); //string 2 is Envelope gain
    1622:	46 da       	rcall	.-2932   	; 0xab0 <initArrays>
    1624:	48 e3       	ldi	r20, 0x38	; 56
    1626:	53 e0       	ldi	r21, 0x03	; 3
    1628:	62 e0       	ldi	r22, 0x02	; 2
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	c6 01       	movw	r24, r12
    162e:	40 da       	rcall	.-2944   	; 0xab0 <initArrays>
initArrays(initTheScreen->knobScreen,3,"ReleaseTimexx:xxxxMS"); //string 3 is Envelop Time
    1630:	4d e4       	ldi	r20, 0x4D	; 77
    1632:	53 e0       	ldi	r21, 0x03	; 3
    1634:	63 e0       	ldi	r22, 0x03	; 3
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	c6 01       	movw	r24, r12
    163a:	3a da       	rcall	.-2956   	; 0xab0 <initArrays>
initArrays(initTheScreen->knobScreen,4,"TrackVolume xx:xxxdb"); //string 4 is track Level.
    163c:	42 e6       	ldi	r20, 0x62	; 98
    163e:	53 e0       	ldi	r21, 0x03	; 3
    1640:	64 e0       	ldi	r22, 0x04	; 4
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	c6 01       	movw	r24, r12
    1646:	34 da       	rcall	.-2968   	; 0xab0 <initArrays>
    1648:	cc 52       	subi	r28, 0x2C	; 44
//initArrays(initTheScreen->knobScreen,5,"BPM: ");
//we might want to put in one of these for BPM, but I'm not sure. 

numPrinter(initTheScreen->screen0[2],5,3, currentPattern.patternBPM);
    164a:	df 4f       	sbci	r29, 0xFF	; 255
    164c:	28 81       	ld	r18, Y
    164e:	39 81       	ldd	r19, Y+1	; 0x01
    1650:	c4 5d       	subi	r28, 0xD4	; 212
    1652:	d0 40       	sbci	r29, 0x00	; 0
    1654:	43 e0       	ldi	r20, 0x03	; 3
    1656:	65 e0       	ldi	r22, 0x05	; 5
    1658:	c8 01       	movw	r24, r16
    165a:	8a 96       	adiw	r24, 0x2a	; 42
    165c:	70 d7       	rcall	.+3808   	; 0x253e <numPrinter>
    165e:	cd 56       	subi	r28, 0x6D	; 109
numPrinter(initTheScreen->screen3[1],14,2, (currentGlobals.midiChannel)+1);
    1660:	de 4f       	sbci	r29, 0xFE	; 254
    1662:	28 81       	ld	r18, Y
    1664:	c3 59       	subi	r28, 0x93	; 147
    1666:	d1 40       	sbci	r29, 0x01	; 1
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	2f 5f       	subi	r18, 0xFF	; 255
    166c:	3f 4f       	sbci	r19, 0xFF	; 255
    166e:	42 e0       	ldi	r20, 0x02	; 2
    1670:	6e e0       	ldi	r22, 0x0E	; 14
    1672:	c8 01       	movw	r24, r16
    1674:	84 5b       	subi	r24, 0xB4	; 180
    1676:	9d 4f       	sbci	r25, 0xFD	; 253
    1678:	62 d7       	rcall	.+3780   	; 0x253e <numPrinter>
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    167a:	f1 2c       	mov	r15, r1
    167c:	8f ef       	ldi	r24, 0xFF	; 255
    167e:	e8 1a       	sub	r14, r24
    1680:	f8 0a       	sbc	r15, r24
    1682:	97 01       	movw	r18, r14
    1684:	43 e0       	ldi	r20, 0x03	; 3
    1686:	69 e0       	ldi	r22, 0x09	; 9
    1688:	c8 01       	movw	r24, r16
    168a:	45 96       	adiw	r24, 0x15	; 21
    168c:	58 d7       	rcall	.+3760   	; 0x253e <numPrinter>
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    168e:	97 01       	movw	r18, r14
    1690:	43 e0       	ldi	r20, 0x03	; 3
    1692:	69 e0       	ldi	r22, 0x09	; 9
    1694:	c8 01       	movw	r24, r16
    1696:	8e 52       	subi	r24, 0x2E	; 46
    1698:	9f 4f       	sbci	r25, 0xFF	; 255
    169a:	51 d7       	rcall	.+3746   	; 0x253e <numPrinter>
    169c:	ca 52       	subi	r28, 0x2A	; 42
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
    169e:	df 4f       	sbci	r29, 0xFF	; 255
    16a0:	28 81       	ld	r18, Y
    16a2:	c6 5d       	subi	r28, 0xD6	; 214
    16a4:	d0 40       	sbci	r29, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	42 e0       	ldi	r20, 0x02	; 2
    16aa:	67 e0       	ldi	r22, 0x07	; 7
    16ac:	c8 01       	movw	r24, r16
    16ae:	89 51       	subi	r24, 0x19	; 25
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	45 d7       	rcall	.+3722   	; 0x253e <numPrinter>
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
    16b4:	c5 57       	subi	r28, 0x75	; 117
    16b6:	de 4f       	sbci	r29, 0xFE	; 254
    16b8:	28 81       	ld	r18, Y
    16ba:	cb 58       	subi	r28, 0x8B	; 139
    16bc:	d1 40       	sbci	r29, 0x01	; 1
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	2f 5f       	subi	r18, 0xFF	; 255
    16c2:	3f 4f       	sbci	r19, 0xFF	; 255
    16c4:	42 e0       	ldi	r20, 0x02	; 2
    16c6:	6d e0       	ldi	r22, 0x0D	; 13
    16c8:	c8 01       	movw	r24, r16
    16ca:	84 50       	subi	r24, 0x04	; 4
    16cc:	9f 4f       	sbci	r25, 0xFF	; 255
    16ce:	37 d7       	rcall	.+3694   	; 0x253e <numPrinter>
    16d0:	e1 2c       	mov	r14, r1
    16d2:	f1 2c       	mov	r15, r1
    16d4:	b7 01       	movw	r22, r14
 
	for(uint8_t i=0;i<4; i++ )
	{
		outputS(initTheScreen->screen0[i],i);
    16d6:	c8 01       	movw	r24, r16
    16d8:	1a d7       	rcall	.+3636   	; 0x250e <outputS>
    16da:	8f ef       	ldi	r24, 0xFF	; 255
    16dc:	e8 1a       	sub	r14, r24
    16de:	f8 0a       	sbc	r15, r24
    16e0:	0b 5e       	subi	r16, 0xEB	; 235
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	84 e0       	ldi	r24, 0x04	; 4
    16e6:	e8 16       	cp	r14, r24
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
 
	for(uint8_t i=0;i<4; i++ )
    16e8:	f1 04       	cpc	r15, r1
    16ea:	a1 f7       	brne	.-24     	; 0x16d4 <initMenu+0x1e4>
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
	{
		outputS(initTheScreen->screen0[i],i);
	}
}
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	ff 90       	pop	r15
    16f6:	ef 90       	pop	r14
    16f8:	df 90       	pop	r13
    16fa:	cf 90       	pop	r12
    16fc:	08 95       	ret

000016fe <reInitMenuOnLoad>:
    16fe:	ef 92       	push	r14
    1700:	ff 92       	push	r15

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(Screen *initTheScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	ec 01       	movw	r28, r24
    170c:	8b 01       	movw	r16, r22
    170e:	7a 01       	movw	r14, r20
	numPrinter(initTheScreen->screen0[2],5,3, currentPattern->patternBPM);
    1710:	fb 01       	movw	r30, r22
    1712:	e8 53       	subi	r30, 0x38	; 56
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	20 81       	ld	r18, Z
    1718:	31 81       	ldd	r19, Z+1	; 0x01
    171a:	43 e0       	ldi	r20, 0x03	; 3
    171c:	65 e0       	ldi	r22, 0x05	; 5
    171e:	8a 96       	adiw	r24, 0x2a	; 42
    1720:	0e d7       	rcall	.+3612   	; 0x253e <numPrinter>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
    1722:	f8 01       	movw	r30, r16
    1724:	e6 53       	subi	r30, 0x36	; 54
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	20 81       	ld	r18, Z
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	42 e0       	ldi	r20, 0x02	; 2
    172e:	67 e0       	ldi	r22, 0x07	; 7
    1730:	ce 01       	movw	r24, r28
    1732:	89 51       	subi	r24, 0x19	; 25
    1734:	9f 4f       	sbci	r25, 0xFF	; 255
    1736:	03 d7       	rcall	.+3590   	; 0x253e <numPrinter>
	numPrinter(initTheScreen->screen1[1],9,3,(currentGlobals->currentPatternNumber)+1);
    1738:	f7 01       	movw	r30, r14
    173a:	23 81       	ldd	r18, Z+3	; 0x03
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	2f 5f       	subi	r18, 0xFF	; 255
    1740:	3f 4f       	sbci	r19, 0xFF	; 255
    1742:	43 e0       	ldi	r20, 0x03	; 3
    1744:	69 e0       	ldi	r22, 0x09	; 9
    1746:	ce 01       	movw	r24, r28
    1748:	8e 52       	subi	r24, 0x2E	; 46
    174a:	9f 4f       	sbci	r25, 0xFF	; 255
    174c:	f8 d6       	rcall	.+3568   	; 0x253e <numPrinter>
	numPrinter(initTheScreen->screen0[1],9,3,(currentGlobals->currentPatternNumber)+1);
    174e:	f7 01       	movw	r30, r14
    1750:	23 81       	ldd	r18, Z+3	; 0x03
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	2f 5f       	subi	r18, 0xFF	; 255
    1756:	3f 4f       	sbci	r19, 0xFF	; 255
    1758:	43 e0       	ldi	r20, 0x03	; 3
    175a:	69 e0       	ldi	r22, 0x09	; 9
    175c:	ce 01       	movw	r24, r28
    175e:	45 96       	adiw	r24, 0x15	; 21
    1760:	ee d6       	rcall	.+3548   	; 0x253e <numPrinter>
}
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	08 95       	ret

00001770 <updateScreen>:

void updateScreen(Screen *menuScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    1770:	8f 92       	push	r8
    1772:	9f 92       	push	r9
    1774:	af 92       	push	r10
    1776:	bf 92       	push	r11
    1778:	cf 92       	push	r12
    177a:	df 92       	push	r13
    177c:	ef 92       	push	r14
    177e:	ff 92       	push	r15
    1780:	0f 93       	push	r16
    1782:	1f 93       	push	r17
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	8c 01       	movw	r16, r24
    178a:	7b 01       	movw	r14, r22
    178c:	ea 01       	movw	r28, r20
	
	if((currentGlobals->valueChangeFlag)&(1<<encoderChange))//check if encoder bit is high
    178e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1790:	80 ff       	sbrs	r24, 0
    1792:	c7 c2       	rjmp	.+1422   	; 0x1d22 <updateScreen+0x5b2>
	{ 
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<encoderChange));//set encoder bit low, and carry our whatever encoder change has occurred. 
    1794:	1a 86       	std	Y+10, r1	; 0x0a
		//we need to debug this to make sure it's doing what we think it's doing.
		switch(currentGlobals->menuState)
    1796:	8e 81       	ldd	r24, Y+6	; 0x06
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	8b 33       	cpi	r24, 0x3B	; 59
    179c:	91 05       	cpc	r25, r1
    179e:	08 f0       	brcs	.+2      	; 0x17a2 <updateScreen+0x32>
    17a0:	bd c2       	rjmp	.+1402   	; 0x1d1c <updateScreen+0x5ac>
    17a2:	fc 01       	movw	r30, r24
    17a4:	88 27       	eor	r24, r24
    17a6:	e3 55       	subi	r30, 0x53	; 83
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	8f 4f       	sbci	r24, 0xFF	; 255
    17ac:	0c 94 f1 1d 	jmp	0x3be2	; 0x3be2 <__tablejump2__>
		{
			case PreformanceModeInit: //initial state
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    17b0:	c8 01       	movw	r24, r16
    17b2:	a5 df       	rcall	.-182    	; 0x16fe <reInitMenuOnLoad>
			outputS(menuScreen->screen0[0], 0);
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	c8 01       	movw	r24, r16
    17ba:	a9 d6       	rcall	.+3410   	; 0x250e <outputS>
			outputS(menuScreen->screen0[1], 1);
    17bc:	61 e0       	ldi	r22, 0x01	; 1
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	c8 01       	movw	r24, r16
    17c2:	45 96       	adiw	r24, 0x15	; 21
    17c4:	a4 d6       	rcall	.+3400   	; 0x250e <outputS>
			outputS(menuScreen->screen0[2], 2);
    17c6:	62 e0       	ldi	r22, 0x02	; 2
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	c8 01       	movw	r24, r16
    17cc:	8a 96       	adiw	r24, 0x2a	; 42
    17ce:	9f d6       	rcall	.+3390   	; 0x250e <outputS>
			outputS(menuScreen->screen0[3], 3);
    17d0:	63 e0       	ldi	r22, 0x03	; 3
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	c8 01       	movw	r24, r16
    17d6:	cf 96       	adiw	r24, 0x3f	; 63
    17d8:	9a d6       	rcall	.+3380   	; 0x250e <outputS>
			break;
    17da:	a0 c2       	rjmp	.+1344   	; 0x1d1c <updateScreen+0x5ac>

			case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0);
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	c8 01       	movw	r24, r16
    17e2:	83 54       	subi	r24, 0x43	; 67
    17e4:	9f 4f       	sbci	r25, 0xFF	; 255
    17e6:	93 d6       	rcall	.+3366   	; 0x250e <outputS>
			outputS(menuScreen->screen1[1], 1);
    17e8:	61 e0       	ldi	r22, 0x01	; 1
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	c8 01       	movw	r24, r16
    17ee:	8e 52       	subi	r24, 0x2E	; 46
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	8d d6       	rcall	.+3354   	; 0x250e <outputS>
			outputS(menuScreen->screen1[2], 2);
    17f4:	62 e0       	ldi	r22, 0x02	; 2
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	c8 01       	movw	r24, r16
    17fa:	89 51       	subi	r24, 0x19	; 25
    17fc:	9f 4f       	sbci	r25, 0xFF	; 255
    17fe:	87 d6       	rcall	.+3342   	; 0x250e <outputS>
			outputS(menuScreen->screen1[3], 3);
    1800:	63 e0       	ldi	r22, 0x03	; 3
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	c8 01       	movw	r24, r16
    1806:	84 50       	subi	r24, 0x04	; 4
    1808:	9f 4f       	sbci	r25, 0xFF	; 255
    180a:	81 d6       	rcall	.+3330   	; 0x250e <outputS>
    180c:	81 e1       	ldi	r24, 0x11	; 17
			currentGlobals->menuState = SequencerMenuArrow1; 
    180e:	8e 83       	std	Y+6, r24	; 0x06
    1810:	88 e0       	ldi	r24, 0x08	; 8
			
			
			case SequencerMenuArrow1:
			menuScreen->screen1[1][19]= 8;
    1812:	f8 01       	movw	r30, r16
    1814:	eb 51       	subi	r30, 0x1B	; 27
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	80 83       	st	Z, r24
    181a:	80 e2       	ldi	r24, 0x20	; 32
			menuScreen->screen1[2][19] = ' ';
    181c:	75 96       	adiw	r30, 0x15	; 21
    181e:	80 83       	st	Z, r24
			menuScreen->screen1[3][19] = ' ';
    1820:	75 96       	adiw	r30, 0x15	; 21
    1822:	80 83       	st	Z, r24
			outputS(menuScreen->screen1[1], 1);
    1824:	61 e0       	ldi	r22, 0x01	; 1
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	c8 01       	movw	r24, r16
    182a:	8e 52       	subi	r24, 0x2E	; 46
    182c:	9f 4f       	sbci	r25, 0xFF	; 255
    182e:	6f d6       	rcall	.+3294   	; 0x250e <outputS>
			outputS(menuScreen->screen1[2], 2);
    1830:	62 e0       	ldi	r22, 0x02	; 2
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	c8 01       	movw	r24, r16
    1836:	89 51       	subi	r24, 0x19	; 25
    1838:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    183a:	69 d6       	rcall	.+3282   	; 0x250e <outputS>
    183c:	63 e0       	ldi	r22, 0x03	; 3
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	c8 01       	movw	r24, r16
    1842:	84 50       	subi	r24, 0x04	; 4
    1844:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    1846:	63 d6       	rcall	.+3270   	; 0x250e <outputS>
			
			case SequencerMenuArrow1Select:
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    1848:	69 c2       	rjmp	.+1234   	; 0x1d1c <updateScreen+0x5ac>
    184a:	c8 01       	movw	r24, r16
    184c:	58 df       	rcall	.-336    	; 0x16fe <reInitMenuOnLoad>
			outputS(menuScreen->screen1[1],1);
    184e:	61 e0       	ldi	r22, 0x01	; 1
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	c8 01       	movw	r24, r16
    1854:	8e 52       	subi	r24, 0x2E	; 46
    1856:	9f 4f       	sbci	r25, 0xFF	; 255
    1858:	5a d6       	rcall	.+3252   	; 0x250e <outputS>
    185a:	60 c2       	rjmp	.+1216   	; 0x1d1c <updateScreen+0x5ac>
			break;
    185c:	80 e2       	ldi	r24, 0x20	; 32
	
	
			case SequencerMenuArrow2:
			menuScreen->screen1[1][19]= ' ';
    185e:	f8 01       	movw	r30, r16
    1860:	eb 51       	subi	r30, 0x1B	; 27
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	80 83       	st	Z, r24
			menuScreen->screen1[2][19] = 8;
    1866:	98 e0       	ldi	r25, 0x08	; 8
    1868:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = ' ';
    186a:	90 83       	st	Z, r25
    186c:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen1[1], 1);
    186e:	80 83       	st	Z, r24
    1870:	61 e0       	ldi	r22, 0x01	; 1
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	c8 01       	movw	r24, r16
    1876:	8e 52       	subi	r24, 0x2E	; 46
    1878:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    187a:	49 d6       	rcall	.+3218   	; 0x250e <outputS>
    187c:	62 e0       	ldi	r22, 0x02	; 2
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	c8 01       	movw	r24, r16
    1882:	89 51       	subi	r24, 0x19	; 25
    1884:	9f 4f       	sbci	r25, 0xFF	; 255
    1886:	43 d6       	rcall	.+3206   	; 0x250e <outputS>
			outputS(menuScreen->screen1[3], 3);
    1888:	63 e0       	ldi	r22, 0x03	; 3
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	c8 01       	movw	r24, r16
    188e:	84 50       	subi	r24, 0x04	; 4
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	3d d6       	rcall	.+3194   	; 0x250e <outputS>
			break;
	
			case SequencerMenuArrow2Select:
			numPrinter(menuScreen->screen1[2],7,2,currentPattern->numSteps);
    1894:	43 c2       	rjmp	.+1158   	; 0x1d1c <updateScreen+0x5ac>
    1896:	fb 01       	movw	r30, r22
    1898:	e6 53       	subi	r30, 0x36	; 54
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	20 81       	ld	r18, Z
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	42 e0       	ldi	r20, 0x02	; 2
    18a2:	67 e0       	ldi	r22, 0x07	; 7
    18a4:	68 01       	movw	r12, r16
    18a6:	87 ee       	ldi	r24, 0xE7	; 231
    18a8:	c8 0e       	add	r12, r24
    18aa:	d1 1c       	adc	r13, r1
    18ac:	c6 01       	movw	r24, r12
    18ae:	47 d6       	rcall	.+3214   	; 0x253e <numPrinter>
			outputS(menuScreen->screen1[2],2);
    18b0:	62 e0       	ldi	r22, 0x02	; 2
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	c6 01       	movw	r24, r12
    18b6:	2b d6       	rcall	.+3158   	; 0x250e <outputS>
			break;
    18b8:	31 c2       	rjmp	.+1122   	; 0x1d1c <updateScreen+0x5ac>
	
			case SequencerMenuArrow3:
			menuScreen->screen1[1][19]= ' ';
    18ba:	80 e2       	ldi	r24, 0x20	; 32
    18bc:	f8 01       	movw	r30, r16
    18be:	eb 51       	subi	r30, 0x1B	; 27
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
			menuScreen->screen1[2][19] = ' ';
    18c2:	80 83       	st	Z, r24
    18c4:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = 8;
    18c6:	80 83       	st	Z, r24
    18c8:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen1[1], 1);
    18ca:	75 96       	adiw	r30, 0x15	; 21
    18cc:	80 83       	st	Z, r24
    18ce:	61 e0       	ldi	r22, 0x01	; 1
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	c8 01       	movw	r24, r16
    18d4:	8e 52       	subi	r24, 0x2E	; 46
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    18d8:	1a d6       	rcall	.+3124   	; 0x250e <outputS>
    18da:	62 e0       	ldi	r22, 0x02	; 2
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	c8 01       	movw	r24, r16
    18e0:	89 51       	subi	r24, 0x19	; 25
    18e2:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    18e4:	14 d6       	rcall	.+3112   	; 0x250e <outputS>
    18e6:	63 e0       	ldi	r22, 0x03	; 3
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	c8 01       	movw	r24, r16
    18ec:	84 50       	subi	r24, 0x04	; 4
    18ee:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    18f0:	0e d6       	rcall	.+3100   	; 0x250e <outputS>
		
			case SequencerMenuArrow3Select:
			numPrinter(menuScreen->screen1[3],14,2,(currentGlobals->currentStep)+1); //these are 0 indexed, so we need to add 1 to the display.
    18f2:	14 c2       	rjmp	.+1064   	; 0x1d1c <updateScreen+0x5ac>
    18f4:	2c 81       	ldd	r18, Y+4	; 0x04
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	2f 5f       	subi	r18, 0xFF	; 255
    18fa:	3f 4f       	sbci	r19, 0xFF	; 255
    18fc:	42 e0       	ldi	r20, 0x02	; 2
    18fe:	6e e0       	ldi	r22, 0x0E	; 14
    1900:	68 01       	movw	r12, r16
    1902:	9c ef       	ldi	r25, 0xFC	; 252
    1904:	c9 0e       	add	r12, r25
    1906:	d1 1c       	adc	r13, r1
			outputS(menuScreen->screen1[3],3);
    1908:	c6 01       	movw	r24, r12
    190a:	19 d6       	rcall	.+3122   	; 0x253e <numPrinter>
    190c:	63 e0       	ldi	r22, 0x03	; 3
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	c6 01       	movw	r24, r12
			break;
	

			case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0);
    1912:	fd d5       	rcall	.+3066   	; 0x250e <outputS>
    1914:	03 c2       	rjmp	.+1030   	; 0x1d1c <updateScreen+0x5ac>
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	c8 01       	movw	r24, r16
    191c:	86 58       	subi	r24, 0x86	; 134
    191e:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[1], 1);
    1920:	f6 d5       	rcall	.+3052   	; 0x250e <outputS>
    1922:	61 e0       	ldi	r22, 0x01	; 1
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	c8 01       	movw	r24, r16
    1928:	81 57       	subi	r24, 0x71	; 113
    192a:	9e 4f       	sbci	r25, 0xFE	; 254
    192c:	f0 d5       	rcall	.+3040   	; 0x250e <outputS>
			outputS(menuScreen->screen2[2], 2);
    192e:	62 e0       	ldi	r22, 0x02	; 2
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	c8 01       	movw	r24, r16
    1934:	8c 55       	subi	r24, 0x5C	; 92
    1936:	9e 4f       	sbci	r25, 0xFE	; 254
    1938:	ea d5       	rcall	.+3028   	; 0x250e <outputS>
			outputS(menuScreen->screen2[3], 3);
    193a:	63 e0       	ldi	r22, 0x03	; 3
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	c8 01       	movw	r24, r16
    1940:	87 54       	subi	r24, 0x47	; 71
    1942:	9e 4f       	sbci	r25, 0xFE	; 254
    1944:	e4 d5       	rcall	.+3016   	; 0x250e <outputS>
			currentGlobals->menuState = TrackMenuArrow1;
    1946:	81 e2       	ldi	r24, 0x21	; 33
		
			case TrackMenuArrow1:
			menuScreen->screen2[1][19]= 8;
    1948:	8e 83       	std	Y+6, r24	; 0x06
    194a:	88 e0       	ldi	r24, 0x08	; 8
    194c:	f8 01       	movw	r30, r16
    194e:	ee 55       	subi	r30, 0x5E	; 94
    1950:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    1952:	80 83       	st	Z, r24
    1954:	80 e2       	ldi	r24, 0x20	; 32
    1956:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    1958:	80 83       	st	Z, r24
    195a:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    195c:	80 83       	st	Z, r24
    195e:	61 e0       	ldi	r22, 0x01	; 1
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	c8 01       	movw	r24, r16
    1964:	81 57       	subi	r24, 0x71	; 113
    1966:	9e 4f       	sbci	r25, 0xFE	; 254
    1968:	d2 d5       	rcall	.+2980   	; 0x250e <outputS>
			outputS(menuScreen->screen2[2], 2);
    196a:	62 e0       	ldi	r22, 0x02	; 2
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	c8 01       	movw	r24, r16
    1970:	8c 55       	subi	r24, 0x5C	; 92
    1972:	9e 4f       	sbci	r25, 0xFE	; 254
    1974:	cc d5       	rcall	.+2968   	; 0x250e <outputS>
			outputS(menuScreen->screen2[3], 3);
    1976:	63 e0       	ldi	r22, 0x03	; 3
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	c8 01       	movw	r24, r16
    197c:	87 54       	subi	r24, 0x47	; 71
    197e:	9e 4f       	sbci	r25, 0xFE	; 254
    1980:	c6 d5       	rcall	.+2956   	; 0x250e <outputS>
			break;
    1982:	cc c1       	rjmp	.+920    	; 0x1d1c <updateScreen+0x5ac>
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
    1986:	db 01       	movw	r26, r22
    1988:	a8 0f       	add	r26, r24
    198a:	b1 1d       	adc	r27, r1
    198c:	fd 01       	movw	r30, r26
    198e:	e8 56       	subi	r30, 0x68	; 104
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    1992:	20 81       	ld	r18, Z
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	32 2f       	mov	r19, r18
    1998:	22 27       	eor	r18, r18
			outputS(menuScreen->screen2[2], 2);
			outputS(menuScreen->screen2[3], 3);
			break;
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    199a:	70 96       	adiw	r30, 0x10	; 16
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    199c:	80 81       	ld	r24, Z
    199e:	28 2b       	or	r18, r24
    19a0:	44 e0       	ldi	r20, 0x04	; 4
    19a2:	6a e0       	ldi	r22, 0x0A	; 10
    19a4:	68 01       	movw	r12, r16
    19a6:	b1 e7       	ldi	r27, 0x71	; 113
    19a8:	cb 1a       	sub	r12, r27
    19aa:	be ef       	ldi	r27, 0xFE	; 254
    19ac:	db 0a       	sbc	r13, r27
    19ae:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen2[1],1);
    19b0:	c6 d5       	rcall	.+2956   	; 0x253e <numPrinter>
    19b2:	61 e0       	ldi	r22, 0x01	; 1
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	c6 01       	movw	r24, r12
			break;
    19b8:	aa d5       	rcall	.+2900   	; 0x250e <outputS>
	
			case TrackMenuArrow2:
			menuScreen->screen2[1][19]= ' ';
    19ba:	b0 c1       	rjmp	.+864    	; 0x1d1c <updateScreen+0x5ac>
    19bc:	80 e2       	ldi	r24, 0x20	; 32
    19be:	f8 01       	movw	r30, r16
    19c0:	ee 55       	subi	r30, 0x5E	; 94
    19c2:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = 8;
    19c4:	80 83       	st	Z, r24
    19c6:	98 e0       	ldi	r25, 0x08	; 8
    19c8:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    19ca:	90 83       	st	Z, r25
    19cc:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    19ce:	80 83       	st	Z, r24
    19d0:	61 e0       	ldi	r22, 0x01	; 1
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	c8 01       	movw	r24, r16
    19d6:	81 57       	subi	r24, 0x71	; 113
    19d8:	9e 4f       	sbci	r25, 0xFE	; 254
    19da:	99 d5       	rcall	.+2866   	; 0x250e <outputS>
			outputS(menuScreen->screen2[2], 2);
    19dc:	62 e0       	ldi	r22, 0x02	; 2
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	c8 01       	movw	r24, r16
    19e2:	8c 55       	subi	r24, 0x5C	; 92
    19e4:	9e 4f       	sbci	r25, 0xFE	; 254
    19e6:	93 d5       	rcall	.+2854   	; 0x250e <outputS>
    19e8:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[3], 3);
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	c8 01       	movw	r24, r16
    19ee:	87 54       	subi	r24, 0x47	; 71
    19f0:	9e 4f       	sbci	r25, 0xFE	; 254
    19f2:	8d d5       	rcall	.+2842   	; 0x250e <outputS>
    19f4:	93 c1       	rjmp	.+806    	; 0x1d1c <updateScreen+0x5ac>
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
			break;
    19f8:	fb 01       	movw	r30, r22
		
			case TrackMenuArrow2Select:
			//we need some serious button code in these two cases. 
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    19fa:	e8 0f       	add	r30, r24
    19fc:	f1 1d       	adc	r31, r1
    19fe:	e8 57       	subi	r30, 0x78	; 120
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	80 81       	ld	r24, Z
    1a04:	88 23       	and	r24, r24
    1a06:	19 f0       	breq	.+6      	; 0x1a0e <updateScreen+0x29e>
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	79 f0       	breq	.+30     	; 0x1a2a <updateScreen+0x2ba>
    1a0c:	1c c0       	rjmp	.+56     	; 0x1a46 <updateScreen+0x2d6>
    1a0e:	83 e5       	ldi	r24, 0x53	; 83
			{
				case 0:
				menuScreen->screen2[2][10] = 'S';
    1a10:	f8 01       	movw	r30, r16
    1a12:	e2 55       	subi	r30, 0x52	; 82
    1a14:	fe 4f       	sbci	r31, 0xFE	; 254
    1a16:	80 83       	st	Z, r24
    1a18:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[2][11] = 'o';
    1a1a:	31 96       	adiw	r30, 0x01	; 1
    1a1c:	80 83       	st	Z, r24
    1a1e:	9c e6       	ldi	r25, 0x6C	; 108
				menuScreen->screen2[2][12] = 'l';
    1a20:	31 96       	adiw	r30, 0x01	; 1
    1a22:	90 83       	st	Z, r25
    1a24:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'o';
    1a26:	80 83       	st	Z, r24
    1a28:	0e c0       	rjmp	.+28     	; 0x1a46 <updateScreen+0x2d6>
				break;
    1a2a:	80 e5       	ldi	r24, 0x50	; 80

				case 1:
				menuScreen->screen2[2][10] = 'P';
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	e2 55       	subi	r30, 0x52	; 82
    1a30:	fe 4f       	sbci	r31, 0xFE	; 254
    1a32:	80 83       	st	Z, r24
				menuScreen->screen2[2][11] = 'o';
    1a34:	8f e6       	ldi	r24, 0x6F	; 111
    1a36:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][12] = 'l';
    1a38:	80 83       	st	Z, r24
    1a3a:	8c e6       	ldi	r24, 0x6C	; 108
    1a3c:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'y';
    1a3e:	80 83       	st	Z, r24
    1a40:	89 e7       	ldi	r24, 0x79	; 121
	
				case 3:
				break;
			}
			
			outputS(menuScreen->screen2[2], 2);
    1a42:	31 96       	adiw	r30, 0x01	; 1
    1a44:	80 83       	st	Z, r24
    1a46:	62 e0       	ldi	r22, 0x02	; 2
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	c8 01       	movw	r24, r16
    1a4c:	8c 55       	subi	r24, 0x5C	; 92
    1a4e:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1a50:	5e d5       	rcall	.+2748   	; 0x250e <outputS>

			case TrackMenuArrow3:
			menuScreen->screen2[1][19]= ' ';
    1a52:	64 c1       	rjmp	.+712    	; 0x1d1c <updateScreen+0x5ac>
    1a54:	80 e2       	ldi	r24, 0x20	; 32
    1a56:	f8 01       	movw	r30, r16
    1a58:	ee 55       	subi	r30, 0x5E	; 94
    1a5a:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    1a5c:	80 83       	st	Z, r24
    1a5e:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = 8;
    1a60:	80 83       	st	Z, r24
    1a62:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[1], 1);
    1a64:	75 96       	adiw	r30, 0x15	; 21
    1a66:	80 83       	st	Z, r24
    1a68:	61 e0       	ldi	r22, 0x01	; 1
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	c8 01       	movw	r24, r16
    1a6e:	81 57       	subi	r24, 0x71	; 113
			outputS(menuScreen->screen2[2], 2);
    1a70:	9e 4f       	sbci	r25, 0xFE	; 254
    1a72:	4d d5       	rcall	.+2714   	; 0x250e <outputS>
    1a74:	62 e0       	ldi	r22, 0x02	; 2
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	c8 01       	movw	r24, r16
    1a7a:	8c 55       	subi	r24, 0x5C	; 92
    1a7c:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[3], 3);
    1a7e:	47 d5       	rcall	.+2702   	; 0x250e <outputS>
    1a80:	63 e0       	ldi	r22, 0x03	; 3
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	c8 01       	movw	r24, r16
    1a86:	87 54       	subi	r24, 0x47	; 71
    1a88:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1a8a:	41 d5       	rcall	.+2690   	; 0x250e <outputS>
		
			case TrackMenuArrow3Select:
			numPrinter(menuScreen->screen2[3],10,2,(currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1);
    1a8c:	47 c1       	rjmp	.+654    	; 0x1d1c <updateScreen+0x5ac>
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	fb 01       	movw	r30, r22
    1a92:	e8 0f       	add	r30, r24
    1a94:	f1 1d       	adc	r31, r1
    1a96:	20 8d       	ldd	r18, Z+24	; 0x18
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	2f 5f       	subi	r18, 0xFF	; 255
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	42 e0       	ldi	r20, 0x02	; 2
    1aa0:	6a e0       	ldi	r22, 0x0A	; 10
    1aa2:	68 01       	movw	r12, r16
    1aa4:	e7 e4       	ldi	r30, 0x47	; 71
    1aa6:	ce 1a       	sub	r12, r30
    1aa8:	ee ef       	ldi	r30, 0xFE	; 254
    1aaa:	de 0a       	sbc	r13, r30
			outputS(menuScreen->screen2[3],3);
    1aac:	c6 01       	movw	r24, r12
    1aae:	47 d5       	rcall	.+2702   	; 0x253e <numPrinter>
    1ab0:	63 e0       	ldi	r22, 0x03	; 3
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	c6 01       	movw	r24, r12
			break;
    1ab6:	2b d5       	rcall	.+2646   	; 0x250e <outputS>
			
			case TrackMenuArrow4:
			menuScreen->screen2[2][19]= ' ';
    1ab8:	31 c1       	rjmp	.+610    	; 0x1d1c <updateScreen+0x5ac>
    1aba:	80 e2       	ldi	r24, 0x20	; 32
    1abc:	f8 01       	movw	r30, r16
    1abe:	e9 54       	subi	r30, 0x49	; 73
    1ac0:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[3][19] = ' ';
    1ac2:	80 83       	st	Z, r24
    1ac4:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[4][19] = 8;
    1ac6:	80 83       	st	Z, r24
    1ac8:	88 e0       	ldi	r24, 0x08	; 8
    1aca:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[2], 1);
    1acc:	80 83       	st	Z, r24
    1ace:	61 e0       	ldi	r22, 0x01	; 1
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	c8 01       	movw	r24, r16
    1ad4:	8c 55       	subi	r24, 0x5C	; 92
    1ad6:	9e 4f       	sbci	r25, 0xFE	; 254
    1ad8:	1a d5       	rcall	.+2612   	; 0x250e <outputS>
			outputS(menuScreen->screen2[3], 2);
    1ada:	62 e0       	ldi	r22, 0x02	; 2
    1adc:	70 e0       	ldi	r23, 0x00	; 0
    1ade:	c8 01       	movw	r24, r16
    1ae0:	87 54       	subi	r24, 0x47	; 71
    1ae2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ae4:	14 d5       	rcall	.+2600   	; 0x250e <outputS>
    1ae6:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[4], 3);
    1ae8:	70 e0       	ldi	r23, 0x00	; 0
    1aea:	c8 01       	movw	r24, r16
    1aec:	82 53       	subi	r24, 0x32	; 50
    1aee:	9e 4f       	sbci	r25, 0xFE	; 254
    1af0:	0e d5       	rcall	.+2588   	; 0x250e <outputS>
    1af2:	14 c1       	rjmp	.+552    	; 0x1d1c <updateScreen+0x5ac>
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
			break;
    1af6:	fb 01       	movw	r30, r22
			
			case TrackMenuArrow4Select:
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1af8:	e8 0f       	add	r30, r24
    1afa:	f1 1d       	adc	r31, r1
    1afc:	e5 51       	subi	r30, 0x15	; 21
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	80 81       	ld	r24, Z
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	a9 f0       	breq	.+42     	; 0x1b30 <updateScreen+0x3c0>
    1b06:	28 f0       	brcs	.+10     	; 0x1b12 <updateScreen+0x3a2>
    1b08:	82 30       	cpi	r24, 0x02	; 2
    1b0a:	f9 f0       	breq	.+62     	; 0x1b4a <updateScreen+0x3da>
    1b0c:	83 30       	cpi	r24, 0x03	; 3
    1b0e:	51 f1       	breq	.+84     	; 0x1b64 <updateScreen+0x3f4>
    1b10:	37 c0       	rjmp	.+110    	; 0x1b80 <updateScreen+0x410>
    1b12:	81 e4       	ldi	r24, 0x41	; 65
    1b14:	f8 01       	movw	r30, r16
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1b16:	e4 52       	subi	r30, 0x24	; 36
    1b18:	fe 4f       	sbci	r31, 0xFE	; 254
    1b1a:	80 83       	st	Z, r24
    1b1c:	8d e2       	ldi	r24, 0x2D	; 45
    1b1e:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1b20:	80 83       	st	Z, r24
    1b22:	82 e5       	ldi	r24, 0x52	; 82
    1b24:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1b26:	80 83       	st	Z, r24
    1b28:	80 e2       	ldi	r24, 0x20	; 32
    1b2a:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1b2c:	80 83       	st	Z, r24
    1b2e:	28 c0       	rjmp	.+80     	; 0x1b80 <updateScreen+0x410>
    1b30:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1b32:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1b34:	e4 52       	subi	r30, 0x24	; 36
    1b36:	fe 4f       	sbci	r31, 0xFE	; 254
    1b38:	80 83       	st	Z, r24
    1b3a:	80 e2       	ldi	r24, 0x20	; 32
				menuScreen->screen2[4][15] = ' ';
    1b3c:	31 96       	adiw	r30, 0x01	; 1
    1b3e:	80 83       	st	Z, r24
    1b40:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = ' ';
    1b42:	80 83       	st	Z, r24
    1b44:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1b46:	80 83       	st	Z, r24
    1b48:	1b c0       	rjmp	.+54     	; 0x1b80 <updateScreen+0x410>
				break;
    1b4a:	81 e4       	ldi	r24, 0x41	; 65
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	e4 52       	subi	r30, 0x24	; 36
    1b50:	fe 4f       	sbci	r31, 0xFE	; 254
    1b52:	80 83       	st	Z, r24
				menuScreen->screen2[4][15] = ' ';
    1b54:	80 e2       	ldi	r24, 0x20	; 32
    1b56:	31 96       	adiw	r30, 0x01	; 1
    1b58:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1b5a:	31 96       	adiw	r30, 0x01	; 1
    1b5c:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1b5e:	31 96       	adiw	r30, 0x01	; 1
				break;
    1b60:	80 83       	st	Z, r24
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1b62:	0e c0       	rjmp	.+28     	; 0x1b80 <updateScreen+0x410>
    1b64:	8e e4       	ldi	r24, 0x4E	; 78
    1b66:	f8 01       	movw	r30, r16
    1b68:	e4 52       	subi	r30, 0x24	; 36
				menuScreen->screen2[4][15] = 'o';
    1b6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b6c:	80 83       	st	Z, r24
    1b6e:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][16] = 'n';
    1b70:	31 96       	adiw	r30, 0x01	; 1
    1b72:	80 83       	st	Z, r24
    1b74:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][17] = 'e';
    1b76:	31 96       	adiw	r30, 0x01	; 1
    1b78:	80 83       	st	Z, r24
    1b7a:	85 e6       	ldi	r24, 0x65	; 101
				break;
			}
			outputS(menuScreen->screen2[4],3);
    1b7c:	31 96       	adiw	r30, 0x01	; 1
    1b7e:	80 83       	st	Z, r24
    1b80:	63 e0       	ldi	r22, 0x03	; 3
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	c8 01       	movw	r24, r16
    1b86:	82 53       	subi	r24, 0x32	; 50
    1b88:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			
			case TrackMenuArrow5:
			menuScreen->screen2[3][19]= ' ';
    1b8a:	c1 d4       	rcall	.+2434   	; 0x250e <outputS>
    1b8c:	c7 c0       	rjmp	.+398    	; 0x1d1c <updateScreen+0x5ac>
    1b8e:	80 e2       	ldi	r24, 0x20	; 32
    1b90:	f8 01       	movw	r30, r16
			menuScreen->screen2[4][19] = ' ';
    1b92:	e4 53       	subi	r30, 0x34	; 52
    1b94:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[5][19] = 8;
    1b96:	80 83       	st	Z, r24
    1b98:	75 96       	adiw	r30, 0x15	; 21
    1b9a:	80 83       	st	Z, r24
			outputS(menuScreen->screen2[3], 1);
    1b9c:	88 e0       	ldi	r24, 0x08	; 8
    1b9e:	75 96       	adiw	r30, 0x15	; 21
    1ba0:	80 83       	st	Z, r24
    1ba2:	61 e0       	ldi	r22, 0x01	; 1
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen2[4], 2);
    1ba8:	87 54       	subi	r24, 0x47	; 71
    1baa:	9e 4f       	sbci	r25, 0xFE	; 254
    1bac:	b0 d4       	rcall	.+2400   	; 0x250e <outputS>
    1bae:	62 e0       	ldi	r22, 0x02	; 2
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen2[5], 3);
    1bb4:	82 53       	subi	r24, 0x32	; 50
    1bb6:	9e 4f       	sbci	r25, 0xFE	; 254
    1bb8:	aa d4       	rcall	.+2388   	; 0x250e <outputS>
    1bba:	63 e0       	ldi	r22, 0x03	; 3
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	c8 01       	movw	r24, r16
			break;
    1bc0:	8d 51       	subi	r24, 0x1D	; 29

			case TrackMenuArrow5Select:
			numPrinter(menuScreen->screen2[5],13,3,(currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]));
    1bc2:	9e 4f       	sbci	r25, 0xFE	; 254
    1bc4:	a4 d4       	rcall	.+2376   	; 0x250e <outputS>
    1bc6:	aa c0       	rjmp	.+340    	; 0x1d1c <updateScreen+0x5ac>
    1bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bca:	fb 01       	movw	r30, r22
    1bcc:	e8 0f       	add	r30, r24
    1bce:	f1 1d       	adc	r31, r1
    1bd0:	e5 52       	subi	r30, 0x25	; 37
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	20 81       	ld	r18, Z
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	43 e0       	ldi	r20, 0x03	; 3
    1bda:	6d e0       	ldi	r22, 0x0D	; 13
    1bdc:	68 01       	movw	r12, r16
    1bde:	fd e1       	ldi	r31, 0x1D	; 29
    1be0:	cf 1a       	sub	r12, r31
    1be2:	fe ef       	ldi	r31, 0xFE	; 254
			outputS(menuScreen->screen2[5],3);
    1be4:	df 0a       	sbc	r13, r31
    1be6:	c6 01       	movw	r24, r12
    1be8:	aa d4       	rcall	.+2388   	; 0x253e <numPrinter>
    1bea:	63 e0       	ldi	r22, 0x03	; 3
			break;
    1bec:	70 e0       	ldi	r23, 0x00	; 0

			case GlobalMenuInit:
			outputS(menuScreen->screen3[0], 0);
    1bee:	c6 01       	movw	r24, r12
    1bf0:	8e d4       	rcall	.+2332   	; 0x250e <outputS>
    1bf2:	94 c0       	rjmp	.+296    	; 0x1d1c <updateScreen+0x5ac>
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[1], 1);
    1bfa:	89 5c       	subi	r24, 0xC9	; 201
    1bfc:	9d 4f       	sbci	r25, 0xFD	; 253
    1bfe:	87 d4       	rcall	.+2318   	; 0x250e <outputS>
    1c00:	61 e0       	ldi	r22, 0x01	; 1
    1c02:	70 e0       	ldi	r23, 0x00	; 0
    1c04:	c8 01       	movw	r24, r16
    1c06:	84 5b       	subi	r24, 0xB4	; 180
			outputS(menuScreen->screen3[2], 2);
    1c08:	9d 4f       	sbci	r25, 0xFD	; 253
    1c0a:	81 d4       	rcall	.+2306   	; 0x250e <outputS>
    1c0c:	62 e0       	ldi	r22, 0x02	; 2
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	c8 01       	movw	r24, r16
    1c12:	8f 59       	subi	r24, 0x9F	; 159
			outputS(menuScreen->screen3[3], 3);
    1c14:	9d 4f       	sbci	r25, 0xFD	; 253
    1c16:	7b d4       	rcall	.+2294   	; 0x250e <outputS>
    1c18:	63 e0       	ldi	r22, 0x03	; 3
    1c1a:	70 e0       	ldi	r23, 0x00	; 0
    1c1c:	c8 01       	movw	r24, r16
    1c1e:	8a 58       	subi	r24, 0x8A	; 138
    1c20:	9d 4f       	sbci	r25, 0xFD	; 253
			currentGlobals->menuState = GlobalMenuArrow1;
    1c22:	75 d4       	rcall	.+2282   	; 0x250e <outputS>
    1c24:	81 e3       	ldi	r24, 0x31	; 49

			case GlobalMenuArrow1:
			menuScreen->screen3[1][19]= 8;
    1c26:	8e 83       	std	Y+6, r24	; 0x06
    1c28:	88 e0       	ldi	r24, 0x08	; 8
    1c2a:	f8 01       	movw	r30, r16
    1c2c:	e1 5a       	subi	r30, 0xA1	; 161
    1c2e:	fd 4f       	sbci	r31, 0xFD	; 253
			menuScreen->screen3[2][19] = ' ';
    1c30:	80 83       	st	Z, r24
    1c32:	80 e2       	ldi	r24, 0x20	; 32
			menuScreen->screen3[3][19] = ' ';
    1c34:	75 96       	adiw	r30, 0x15	; 21
    1c36:	80 83       	st	Z, r24
			outputS(menuScreen->screen3[1], 1);
    1c38:	75 96       	adiw	r30, 0x15	; 21
    1c3a:	80 83       	st	Z, r24
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	c8 01       	movw	r24, r16
    1c42:	84 5b       	subi	r24, 0xB4	; 180
			outputS(menuScreen->screen3[2], 2);
    1c44:	9d 4f       	sbci	r25, 0xFD	; 253
    1c46:	63 d4       	rcall	.+2246   	; 0x250e <outputS>
    1c48:	62 e0       	ldi	r22, 0x02	; 2
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	c8 01       	movw	r24, r16
    1c4e:	8f 59       	subi	r24, 0x9F	; 159
			outputS(menuScreen->screen3[3], 3);
    1c50:	9d 4f       	sbci	r25, 0xFD	; 253
    1c52:	5d d4       	rcall	.+2234   	; 0x250e <outputS>
    1c54:	63 e0       	ldi	r22, 0x03	; 3
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	c8 01       	movw	r24, r16
    1c5a:	8a 58       	subi	r24, 0x8A	; 138
    1c5c:	9d 4f       	sbci	r25, 0xFD	; 253
			break;
    1c5e:	57 d4       	rcall	.+2222   	; 0x250e <outputS>
			
			case GlobalMenuArrow1Select:
			numPrinter(menuScreen->screen3[1],14,2,(currentGlobals->midiChannel)+1);
    1c60:	5d c0       	rjmp	.+186    	; 0x1d1c <updateScreen+0x5ac>
    1c62:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	2f 5f       	subi	r18, 0xFF	; 255
    1c68:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6a:	42 e0       	ldi	r20, 0x02	; 2
    1c6c:	6e e0       	ldi	r22, 0x0E	; 14
    1c6e:	68 01       	movw	r12, r16
    1c70:	84 eb       	ldi	r24, 0xB4	; 180
    1c72:	c8 1a       	sub	r12, r24
    1c74:	8d ef       	ldi	r24, 0xFD	; 253
    1c76:	d8 0a       	sbc	r13, r24
			outputS(menuScreen->screen3[1],1);
    1c78:	c6 01       	movw	r24, r12
    1c7a:	61 d4       	rcall	.+2242   	; 0x253e <numPrinter>
    1c7c:	61 e0       	ldi	r22, 0x01	; 1
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	c6 01       	movw	r24, r12
			break;
    1c82:	45 d4       	rcall	.+2186   	; 0x250e <outputS>

			case GlobalMenuArrow2:
			menuScreen->screen3[1][19]= ' ';
    1c84:	4b c0       	rjmp	.+150    	; 0x1d1c <updateScreen+0x5ac>
    1c86:	80 e2       	ldi	r24, 0x20	; 32
    1c88:	f8 01       	movw	r30, r16
    1c8a:	e1 5a       	subi	r30, 0xA1	; 161
			menuScreen->screen3[2][19] = 8;
    1c8c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c8e:	80 83       	st	Z, r24
    1c90:	98 e0       	ldi	r25, 0x08	; 8
			menuScreen->screen3[3][19] = ' ';
    1c92:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen3[1], 1);
    1c94:	90 83       	st	Z, r25
    1c96:	75 96       	adiw	r30, 0x15	; 21
    1c98:	80 83       	st	Z, r24
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
    1c9e:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1ca0:	84 5b       	subi	r24, 0xB4	; 180
    1ca2:	9d 4f       	sbci	r25, 0xFD	; 253
    1ca4:	34 d4       	rcall	.+2152   	; 0x250e <outputS>
    1ca6:	62 e0       	ldi	r22, 0x02	; 2
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	c8 01       	movw	r24, r16
    1cac:	8f 59       	subi	r24, 0x9F	; 159
			outputS(menuScreen->screen3[3], 3);
    1cae:	9d 4f       	sbci	r25, 0xFD	; 253
    1cb0:	2e d4       	rcall	.+2140   	; 0x250e <outputS>
    1cb2:	63 e0       	ldi	r22, 0x03	; 3
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	c8 01       	movw	r24, r16
    1cb8:	8a 58       	subi	r24, 0x8A	; 138
    1cba:	9d 4f       	sbci	r25, 0xFD	; 253
			break;
    1cbc:	28 d4       	rcall	.+2128   	; 0x250e <outputS>
			
			case GlobalMenuArrow2Select:
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1cbe:	2e c0       	rjmp	.+92     	; 0x1d1c <updateScreen+0x5ac>
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	fa 01       	movw	r30, r20
    1cc4:	e8 0f       	add	r30, r24
    1cc6:	f1 1d       	adc	r31, r1
    1cc8:	45 85       	ldd	r20, Z+13	; 0x0d
    1cca:	6e e0       	ldi	r22, 0x0E	; 14
    1ccc:	68 01       	movw	r12, r16
    1cce:	9f e9       	ldi	r25, 0x9F	; 159
    1cd0:	c9 1a       	sub	r12, r25
    1cd2:	9d ef       	ldi	r25, 0xFD	; 253
    1cd4:	d9 0a       	sbc	r13, r25
    1cd6:	c6 01       	movw	r24, r12
    1cd8:	f8 d5       	rcall	.+3056   	; 0x28ca <midiNotePrinter>
			outputS(menuScreen->screen3[2],2);
    1cda:	62 e0       	ldi	r22, 0x02	; 2
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	c6 01       	movw	r24, r12
    1ce0:	16 d4       	rcall	.+2092   	; 0x250e <outputS>
    1ce2:	1c c0       	rjmp	.+56     	; 0x1d1c <updateScreen+0x5ac>
			break;
    1ce4:	80 e2       	ldi	r24, 0x20	; 32

			case GlobalMenuArrow3:
			menuScreen->screen3[1][19]= ' ';
    1ce6:	f8 01       	movw	r30, r16
    1ce8:	e1 5a       	subi	r30, 0xA1	; 161
    1cea:	fd 4f       	sbci	r31, 0xFD	; 253
    1cec:	80 83       	st	Z, r24
    1cee:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen3[2][19] = ' ';
    1cf0:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = 8;
    1cf2:	88 e0       	ldi	r24, 0x08	; 8
    1cf4:	75 96       	adiw	r30, 0x15	; 21
    1cf6:	80 83       	st	Z, r24
			outputS(menuScreen->screen3[1], 1);
    1cf8:	61 e0       	ldi	r22, 0x01	; 1
    1cfa:	70 e0       	ldi	r23, 0x00	; 0
    1cfc:	c8 01       	movw	r24, r16
    1cfe:	84 5b       	subi	r24, 0xB4	; 180
    1d00:	9d 4f       	sbci	r25, 0xFD	; 253
    1d02:	05 d4       	rcall	.+2058   	; 0x250e <outputS>
			outputS(menuScreen->screen3[2], 2);
    1d04:	62 e0       	ldi	r22, 0x02	; 2
    1d06:	70 e0       	ldi	r23, 0x00	; 0
    1d08:	c8 01       	movw	r24, r16
    1d0a:	8f 59       	subi	r24, 0x9F	; 159
    1d0c:	9d 4f       	sbci	r25, 0xFD	; 253
    1d0e:	ff d3       	rcall	.+2046   	; 0x250e <outputS>
    1d10:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen3[3], 3);
    1d12:	70 e0       	ldi	r23, 0x00	; 0
    1d14:	c8 01       	movw	r24, r16
    1d16:	8a 58       	subi	r24, 0x8A	; 138
    1d18:	9d 4f       	sbci	r25, 0xFD	; 253
    1d1a:	f9 d3       	rcall	.+2034   	; 0x250e <outputS>
    1d1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d1e:	80 93 b5 09 	sts	0x09B5, r24	; 0x8009b5 <prevMenuState>
			break;
		}
		prevMenuState = currentGlobals->menuState;
    1d22:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d24:	81 ff       	sbrs	r24, 1
	}
	//We should only reach this in track selection and global settings for setting midi notes. 
	if(currentGlobals->valueChangeFlag&(1<<triggerChange))
    1d26:	05 c1       	rjmp	.+522    	; 0x1f32 <updateScreen+0x7c2>
    1d28:	1a 86       	std	Y+10, r1	; 0x0a
    1d2a:	8e 81       	ldd	r24, Y+6	; 0x06
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0<<triggerChange); //this is wrong. Will erase all of valueChange Flag. 
    1d2c:	82 95       	swap	r24
		switch((currentGlobals->menuState)>>4) //we don't need to worry about what the bottom encoder is doing.  
    1d2e:	8f 70       	andi	r24, 0x0F	; 15
    1d30:	82 30       	cpi	r24, 0x02	; 2
    1d32:	21 f0       	breq	.+8      	; 0x1d3c <updateScreen+0x5cc>
    1d34:	83 30       	cpi	r24, 0x03	; 3
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <updateScreen+0x5ca>
    1d38:	e3 c0       	rjmp	.+454    	; 0x1f00 <updateScreen+0x790>
    1d3a:	fb c0       	rjmp	.+502    	; 0x1f32 <updateScreen+0x7c2>
    1d3c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
		{
			case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1d40:	a7 01       	movw	r20, r14
    1d42:	42 0f       	add	r20, r18
    1d44:	53 1f       	adc	r21, r19
    1d46:	fa 01       	movw	r30, r20
    1d48:	e8 56       	subi	r30, 0x68	; 104
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	80 81       	ld	r24, Z
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	98 2f       	mov	r25, r24
    1d52:	88 27       	eor	r24, r24
    1d54:	70 96       	adiw	r30, 0x10	; 16
    1d56:	40 81       	ld	r20, Z
    1d58:	6c 01       	movw	r12, r24
    1d5a:	c4 2a       	or	r12, r20
    1d5c:	2f 5f       	subi	r18, 0xFF	; 255
    1d5e:	3f 4f       	sbci	r19, 0xFF	; 255
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack)+1);
    1d60:	42 e0       	ldi	r20, 0x02	; 2
    1d62:	67 e0       	ldi	r22, 0x07	; 7
    1d64:	58 01       	movw	r10, r16
    1d66:	a1 e7       	ldi	r26, 0x71	; 113
    1d68:	aa 1a       	sub	r10, r26
    1d6a:	ae ef       	ldi	r26, 0xFE	; 254
    1d6c:	ba 0a       	sbc	r11, r26
    1d6e:	c5 01       	movw	r24, r10
    1d70:	e6 d3       	rcall	.+1996   	; 0x253e <numPrinter>
    1d72:	96 01       	movw	r18, r12
    1d74:	44 e0       	ldi	r20, 0x04	; 4
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
    1d76:	6a e0       	ldi	r22, 0x0A	; 10
    1d78:	c5 01       	movw	r24, r10
    1d7a:	e1 d3       	rcall	.+1986   	; 0x253e <numPrinter>
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	f7 01       	movw	r30, r14
    1d80:	e8 0f       	add	r30, r24
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
					switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1d82:	f1 1d       	adc	r31, r1
    1d84:	e8 57       	subi	r30, 0x78	; 120
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	80 81       	ld	r24, Z
    1d8a:	88 23       	and	r24, r24
    1d8c:	19 f0       	breq	.+6      	; 0x1d94 <updateScreen+0x624>
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	79 f0       	breq	.+30     	; 0x1db0 <updateScreen+0x640>
    1d92:	1c c0       	rjmp	.+56     	; 0x1dcc <updateScreen+0x65c>
    1d94:	83 e5       	ldi	r24, 0x53	; 83
    1d96:	f8 01       	movw	r30, r16
    1d98:	e2 55       	subi	r30, 0x52	; 82
					{
						case 0:
						menuScreen->screen2[2][10] = 'S';
    1d9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d9c:	80 83       	st	Z, r24
    1d9e:	8f e6       	ldi	r24, 0x6F	; 111
    1da0:	31 96       	adiw	r30, 0x01	; 1
    1da2:	80 83       	st	Z, r24
						menuScreen->screen2[2][11] = 'o';
    1da4:	9c e6       	ldi	r25, 0x6C	; 108
    1da6:	31 96       	adiw	r30, 0x01	; 1
    1da8:	90 83       	st	Z, r25
						menuScreen->screen2[2][12] = 'l';
    1daa:	31 96       	adiw	r30, 0x01	; 1
    1dac:	80 83       	st	Z, r24
    1dae:	0e c0       	rjmp	.+28     	; 0x1dcc <updateScreen+0x65c>
						menuScreen->screen2[2][13] = 'o';
    1db0:	80 e5       	ldi	r24, 0x50	; 80
    1db2:	f8 01       	movw	r30, r16
						break;
    1db4:	e2 55       	subi	r30, 0x52	; 82

						case 1:
						menuScreen->screen2[2][10] = 'P';
    1db6:	fe 4f       	sbci	r31, 0xFE	; 254
    1db8:	80 83       	st	Z, r24
    1dba:	8f e6       	ldi	r24, 0x6F	; 111
    1dbc:	31 96       	adiw	r30, 0x01	; 1
    1dbe:	80 83       	st	Z, r24
						menuScreen->screen2[2][11] = 'o';
    1dc0:	8c e6       	ldi	r24, 0x6C	; 108
    1dc2:	31 96       	adiw	r30, 0x01	; 1
    1dc4:	80 83       	st	Z, r24
						menuScreen->screen2[2][12] = 'l';
    1dc6:	89 e7       	ldi	r24, 0x79	; 121
    1dc8:	31 96       	adiw	r30, 0x01	; 1
    1dca:	80 83       	st	Z, r24
						menuScreen->screen2[2][13] = 'y';
    1dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dce:	f7 01       	movw	r30, r14
    1dd0:	e8 0f       	add	r30, r24

						case 3:
						break;
					}
					
			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack]+1));
    1dd2:	f1 1d       	adc	r31, r1
    1dd4:	20 8d       	ldd	r18, Z+24	; 0x18
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	2f 5f       	subi	r18, 0xFF	; 255
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	42 e0       	ldi	r20, 0x02	; 2
    1dde:	6a e0       	ldi	r22, 0x0A	; 10
    1de0:	c8 01       	movw	r24, r16
    1de2:	87 54       	subi	r24, 0x47	; 71
    1de4:	9e 4f       	sbci	r25, 0xFE	; 254
    1de6:	ab d3       	rcall	.+1878   	; 0x253e <numPrinter>
    1de8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dea:	f7 01       	movw	r30, r14
    1dec:	e8 0f       	add	r30, r24
    1dee:	f1 1d       	adc	r31, r1
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1df0:	e5 51       	subi	r30, 0x15	; 21
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	80 81       	ld	r24, Z
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	a9 f0       	breq	.+42     	; 0x1e24 <updateScreen+0x6b4>
    1dfa:	28 f0       	brcs	.+10     	; 0x1e06 <updateScreen+0x696>
    1dfc:	82 30       	cpi	r24, 0x02	; 2
    1dfe:	f9 f0       	breq	.+62     	; 0x1e3e <updateScreen+0x6ce>
    1e00:	83 30       	cpi	r24, 0x03	; 3
    1e02:	51 f1       	breq	.+84     	; 0x1e58 <updateScreen+0x6e8>
    1e04:	37 c0       	rjmp	.+110    	; 0x1e74 <updateScreen+0x704>
    1e06:	81 e4       	ldi	r24, 0x41	; 65
    1e08:	f8 01       	movw	r30, r16
    1e0a:	e4 52       	subi	r30, 0x24	; 36
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1e0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e0e:	80 83       	st	Z, r24
    1e10:	8d e2       	ldi	r24, 0x2D	; 45
    1e12:	31 96       	adiw	r30, 0x01	; 1
    1e14:	80 83       	st	Z, r24
				menuScreen->screen2[4][15] = '-';
    1e16:	82 e5       	ldi	r24, 0x52	; 82
    1e18:	31 96       	adiw	r30, 0x01	; 1
    1e1a:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = 'R';
    1e1c:	80 e2       	ldi	r24, 0x20	; 32
    1e1e:	31 96       	adiw	r30, 0x01	; 1
    1e20:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1e22:	28 c0       	rjmp	.+80     	; 0x1e74 <updateScreen+0x704>
    1e24:	82 e5       	ldi	r24, 0x52	; 82
    1e26:	f8 01       	movw	r30, r16
				break;
    1e28:	e4 52       	subi	r30, 0x24	; 36
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e2c:	80 83       	st	Z, r24
    1e2e:	80 e2       	ldi	r24, 0x20	; 32
    1e30:	31 96       	adiw	r30, 0x01	; 1
    1e32:	80 83       	st	Z, r24
				menuScreen->screen2[4][15] = ' ';
    1e34:	31 96       	adiw	r30, 0x01	; 1
    1e36:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1e38:	31 96       	adiw	r30, 0x01	; 1
    1e3a:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1e3c:	1b c0       	rjmp	.+54     	; 0x1e74 <updateScreen+0x704>
    1e3e:	81 e4       	ldi	r24, 0x41	; 65
				break;
    1e40:	f8 01       	movw	r30, r16
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1e42:	e4 52       	subi	r30, 0x24	; 36
    1e44:	fe 4f       	sbci	r31, 0xFE	; 254
    1e46:	80 83       	st	Z, r24
    1e48:	80 e2       	ldi	r24, 0x20	; 32
    1e4a:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    1e4c:	80 83       	st	Z, r24
    1e4e:	31 96       	adiw	r30, 0x01	; 1
    1e50:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1e52:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1e54:	80 83       	st	Z, r24
    1e56:	0e c0       	rjmp	.+28     	; 0x1e74 <updateScreen+0x704>
				break;
    1e58:	8e e4       	ldi	r24, 0x4E	; 78
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	e4 52       	subi	r30, 0x24	; 36
    1e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e60:	80 83       	st	Z, r24
    1e62:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][15] = 'o';
    1e64:	31 96       	adiw	r30, 0x01	; 1
    1e66:	80 83       	st	Z, r24
    1e68:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][16] = 'n';
    1e6a:	31 96       	adiw	r30, 0x01	; 1
    1e6c:	80 83       	st	Z, r24
    1e6e:	85 e6       	ldi	r24, 0x65	; 101
				menuScreen->screen2[4][17] = 'e';
    1e70:	31 96       	adiw	r30, 0x01	; 1
    1e72:	80 83       	st	Z, r24
				break;
			}
			numPrinter(menuScreen->screen2[5],13,3,(currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]));
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	f7 01       	movw	r30, r14
    1e78:	e8 0f       	add	r30, r24
    1e7a:	f1 1d       	adc	r31, r1
    1e7c:	e5 52       	subi	r30, 0x25	; 37
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	20 81       	ld	r18, Z
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	43 e0       	ldi	r20, 0x03	; 3
    1e86:	6d e0       	ldi	r22, 0x0D	; 13
    1e88:	c8 01       	movw	r24, r16
    1e8a:	8d 51       	subi	r24, 0x1D	; 29
    1e8c:	9e 4f       	sbci	r25, 0xFE	; 254
    1e8e:	57 d3       	rcall	.+1710   	; 0x253e <numPrinter>
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;

			if(currentGlobals->menuState>35) //this accounts for menu stats 36,37,44, and 45
    1e90:	8e 81       	ldd	r24, Y+6	; 0x06
    1e92:	84 32       	cpi	r24, 0x24	; 36
    1e94:	18 f0       	brcs	.+6      	; 0x1e9c <updateScreen+0x72c>
			{
				triggerChangeScreen = (currentGlobals->menuState&0xF7) - 34; //mask to get rid of encoder B pushed state. 
    1e96:	87 7f       	andi	r24, 0xF7	; 247
    1e98:	82 52       	subi	r24, 0x22	; 34
			numPrinter(menuScreen->screen2[5],13,3,(currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]));
			//the track settings screens should now be populated
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
    1e9a:	01 c0       	rjmp	.+2      	; 0x1e9e <updateScreen+0x72e>

			if(currentGlobals->menuState>35) //this accounts for menu stats 36,37,44, and 45
			{
				triggerChangeScreen = (currentGlobals->menuState&0xF7) - 34; //mask to get rid of encoder B pushed state. 
			}
			outputS(menuScreen->screen2[triggerChangeScreen], 1); 
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	c8 2e       	mov	r12, r24
    1ea0:	d1 2c       	mov	r13, r1
    1ea2:	0f 2e       	mov	r0, r31
    1ea4:	f5 e1       	ldi	r31, 0x15	; 21
    1ea6:	bf 2e       	mov	r11, r31
    1ea8:	f0 2d       	mov	r31, r0
    1eaa:	bc 9c       	mul	r11, r12
    1eac:	c0 01       	movw	r24, r0
    1eae:	bd 9c       	mul	r11, r13
    1eb0:	90 0d       	add	r25, r0
    1eb2:	11 24       	eor	r1, r1
    1eb4:	86 58       	subi	r24, 0x86	; 134
    1eb6:	9e 4f       	sbci	r25, 0xFE	; 254
    1eb8:	61 e0       	ldi	r22, 0x01	; 1
    1eba:	70 e0       	ldi	r23, 0x00	; 0
    1ebc:	80 0f       	add	r24, r16
    1ebe:	91 1f       	adc	r25, r17
			outputS(menuScreen->screen2[triggerChangeScreen+1], 2); 
    1ec0:	26 d3       	rcall	.+1612   	; 0x250e <outputS>
    1ec2:	96 01       	movw	r18, r12
    1ec4:	2f 5f       	subi	r18, 0xFF	; 255
    1ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec8:	b2 9e       	mul	r11, r18
    1eca:	c0 01       	movw	r24, r0
    1ecc:	b3 9e       	mul	r11, r19
    1ece:	90 0d       	add	r25, r0
    1ed0:	11 24       	eor	r1, r1
    1ed2:	86 58       	subi	r24, 0x86	; 134
    1ed4:	9e 4f       	sbci	r25, 0xFE	; 254
    1ed6:	62 e0       	ldi	r22, 0x02	; 2
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	80 0f       	add	r24, r16
    1edc:	91 1f       	adc	r25, r17
    1ede:	17 d3       	rcall	.+1582   	; 0x250e <outputS>
			outputS(menuScreen->screen2[triggerChangeScreen+2], 3);
    1ee0:	b2 e0       	ldi	r27, 0x02	; 2
    1ee2:	cb 0e       	add	r12, r27
    1ee4:	d1 1c       	adc	r13, r1
    1ee6:	bc 9c       	mul	r11, r12
    1ee8:	c0 01       	movw	r24, r0
    1eea:	bd 9c       	mul	r11, r13
    1eec:	90 0d       	add	r25, r0
    1eee:	11 24       	eor	r1, r1
    1ef0:	86 58       	subi	r24, 0x86	; 134
    1ef2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ef4:	63 e0       	ldi	r22, 0x03	; 3
    1ef6:	70 e0       	ldi	r23, 0x00	; 0
    1ef8:	80 0f       	add	r24, r16
    1efa:	91 1f       	adc	r25, r17
    1efc:	08 d3       	rcall	.+1552   	; 0x250e <outputS>
    1efe:	19 c0       	rjmp	.+50     	; 0x1f32 <updateScreen+0x7c2>
			break;
    1f00:	2d 81       	ldd	r18, Y+5	; 0x05
			
			case 3:;
			//do we need this variable?
			numPrinter(menuScreen->screen3[2],10,2,(currentGlobals->currentTrack)+1);
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	2f 5f       	subi	r18, 0xFF	; 255
    1f06:	3f 4f       	sbci	r19, 0xFF	; 255
    1f08:	42 e0       	ldi	r20, 0x02	; 2
    1f0a:	6a e0       	ldi	r22, 0x0A	; 10
    1f0c:	68 01       	movw	r12, r16
    1f0e:	ef e9       	ldi	r30, 0x9F	; 159
    1f10:	ce 1a       	sub	r12, r30
    1f12:	ed ef       	ldi	r30, 0xFD	; 253
    1f14:	de 0a       	sbc	r13, r30
    1f16:	c6 01       	movw	r24, r12
    1f18:	12 d3       	rcall	.+1572   	; 0x253e <numPrinter>
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e8 0f       	add	r30, r24
    1f20:	f1 1d       	adc	r31, r1
    1f22:	45 85       	ldd	r20, Z+13	; 0x0d
    1f24:	6e e0       	ldi	r22, 0x0E	; 14
    1f26:	c6 01       	movw	r24, r12
    1f28:	d0 d4       	rcall	.+2464   	; 0x28ca <midiNotePrinter>
    1f2a:	62 e0       	ldi	r22, 0x02	; 2
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[2],2);
    1f2e:	c6 01       	movw	r24, r12
    1f30:	ee d2       	rcall	.+1500   	; 0x250e <outputS>
    1f32:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f34:	82 ff       	sbrs	r24, 2
    1f36:	4f c1       	rjmp	.+670    	; 0x21d6 <updateScreen+0xa66>
			break;
			
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
    1f38:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f3a:	f8 2f       	mov	r31, r24
    1f3c:	ff 70       	andi	r31, 0x0F	; 15
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
    1f3e:	cf 2e       	mov	r12, r31
    1f40:	99 85       	ldd	r25, Y+9	; 0x09
    1f42:	90 ff       	sbrs	r25, 0
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <updateScreen+0x7de>
		uint8_t positionSelectUpper = 0;
		if((currentGlobals->buttonSwitchFlag)&0x01)
    1f46:	68 94       	set
    1f48:	bb 24       	eor	r11, r11
    1f4a:	b3 f8       	bld	r11, 3
		{
			positionSelectUpper = 8;
    1f4c:	01 c0       	rjmp	.+2      	; 0x1f50 <updateScreen+0x7e0>
    1f4e:	b1 2c       	mov	r11, r1
    1f50:	82 95       	swap	r24
    1f52:	8f 70       	andi	r24, 0x0F	; 15
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
		uint8_t positionSelectUpper = 0;
    1f54:	82 30       	cpi	r24, 0x02	; 2
		{
			positionSelectUpper = 8;
		}
		

		switch((currentGlobals->knobStatus)>>4)
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <updateScreen+0x7ea>
    1f58:	8e c0       	rjmp	.+284    	; 0x2076 <updateScreen+0x906>
    1f5a:	30 f4       	brcc	.+12     	; 0x1f68 <updateScreen+0x7f8>
    1f5c:	88 23       	and	r24, r24
    1f5e:	69 f0       	breq	.+26     	; 0x1f7a <updateScreen+0x80a>
    1f60:	81 30       	cpi	r24, 0x01	; 1
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <updateScreen+0x7f6>
    1f64:	52 c0       	rjmp	.+164    	; 0x200a <updateScreen+0x89a>
    1f66:	36 c1       	rjmp	.+620    	; 0x21d4 <updateScreen+0xa64>
    1f68:	84 30       	cpi	r24, 0x04	; 4
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <updateScreen+0x7fe>
    1f6c:	d6 c0       	rjmp	.+428    	; 0x211a <updateScreen+0x9aa>
    1f6e:	08 f4       	brcc	.+2      	; 0x1f72 <updateScreen+0x802>
    1f70:	b4 c0       	rjmp	.+360    	; 0x20da <updateScreen+0x96a>
    1f72:	85 30       	cpi	r24, 0x05	; 5
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <updateScreen+0x808>
    1f76:	1c c1       	rjmp	.+568    	; 0x21b0 <updateScreen+0xa40>
    1f78:	2d c1       	rjmp	.+602    	; 0x21d4 <updateScreen+0xa64>
    1f7a:	ec 2d       	mov	r30, r12
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
		{
			case 0: //output volume
			if((currentPattern->outputLevelMSB[positionSelect])==0)
    1f7e:	d7 01       	movw	r26, r14
    1f80:	ae 0f       	add	r26, r30
    1f82:	bf 1f       	adc	r27, r31
    1f84:	8c 91       	ld	r24, X
    1f86:	81 11       	cpse	r24, r1
    1f88:	0a c0       	rjmp	.+20     	; 0x1f9e <updateScreen+0x82e>
    1f8a:	fd 01       	movw	r30, r26
    1f8c:	20 85       	ldd	r18, Z+8	; 0x08
			{ //value is positive
				numPrinter(menuScreen->knobScreen[0],14,3,currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	43 e0       	ldi	r20, 0x03	; 3
    1f92:	6e e0       	ldi	r22, 0x0E	; 14
    1f94:	c8 01       	movw	r24, r16
    1f96:	8c 50       	subi	r24, 0x0C	; 12
    1f98:	9d 4f       	sbci	r25, 0xFD	; 253
    1f9a:	d1 d2       	rcall	.+1442   	; 0x253e <numPrinter>
    1f9c:	29 c0       	rjmp	.+82     	; 0x1ff0 <updateScreen+0x880>
    1f9e:	8d e2       	ldi	r24, 0x2D	; 45
    1fa0:	d8 01       	movw	r26, r16
    1fa2:	ae 5f       	subi	r26, 0xFE	; 254
			}else
			{
				menuScreen->knobScreen[0][14] = '-';
    1fa4:	bc 4f       	sbci	r27, 0xFC	; 252
    1fa6:	8c 93       	st	X, r24
    1fa8:	58 01       	movw	r10, r16
    1faa:	23 e0       	ldi	r18, 0x03	; 3
				menuScreen->knobScreen[0][15] = ((((currentPattern->outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    1fac:	a2 0e       	add	r10, r18
    1fae:	b2 1e       	adc	r11, r18
    1fb0:	ee 0d       	add	r30, r14
    1fb2:	ff 1d       	adc	r31, r15
    1fb4:	80 85       	ldd	r24, Z+8	; 0x08
    1fb6:	80 95       	com	r24
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	01 96       	adiw	r24, 0x01	; 1
    1fbc:	64 e6       	ldi	r22, 0x64	; 100
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__divmodhi4>
    1fc4:	2a e0       	ldi	r18, 0x0A	; 10
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	b9 01       	movw	r22, r18
    1fca:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__divmodhi4>
    1fce:	60 5d       	subi	r22, 0xD0	; 208
    1fd0:	d5 01       	movw	r26, r10
    1fd2:	6c 93       	st	X, r22
    1fd4:	78 01       	movw	r14, r16
				menuScreen->knobScreen[0][16] = (((currentPattern->outputLevelLSB[positionSelect]^255)+1)%10)+48;
    1fd6:	bc ef       	ldi	r27, 0xFC	; 252
    1fd8:	eb 1a       	sub	r14, r27
    1fda:	fb 0a       	sbc	r15, r27
    1fdc:	80 85       	ldd	r24, Z+8	; 0x08
    1fde:	80 95       	com	r24
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	01 96       	adiw	r24, 0x01	; 1
    1fe4:	b9 01       	movw	r22, r18
    1fe6:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__divmodhi4>
    1fea:	80 5d       	subi	r24, 0xD0	; 208
    1fec:	f7 01       	movw	r30, r14
    1fee:	80 83       	st	Z, r24
			}
				
			menuScreen->knobScreen[0][10] = positionSelect + 49;
    1ff0:	f8 01       	movw	r30, r16
    1ff2:	e2 50       	subi	r30, 0x02	; 2
    1ff4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ff6:	81 e3       	ldi	r24, 0x31	; 49
    1ff8:	8c 0d       	add	r24, r12
    1ffa:	80 83       	st	Z, r24
			outputS(menuScreen->knobScreen[0], 3);
    1ffc:	63 e0       	ldi	r22, 0x03	; 3
    1ffe:	70 e0       	ldi	r23, 0x00	; 0
    2000:	c8 01       	movw	r24, r16
    2002:	8c 50       	subi	r24, 0x0C	; 12
    2004:	9d 4f       	sbci	r25, 0xFD	; 253
    2006:	83 d2       	rcall	.+1286   	; 0x250e <outputS>
			break;
    2008:	e5 c0       	rjmp	.+458    	; 0x21d4 <updateScreen+0xa64>
				
			case 1: //pitch
			menuScreen->knobScreen[1][5] = positionSelect+49; 
    200a:	f8 01       	movw	r30, r16
    200c:	e2 5f       	subi	r30, 0xF2	; 242
    200e:	fc 4f       	sbci	r31, 0xFC	; 252
    2010:	81 e3       	ldi	r24, 0x31	; 49
    2012:	8c 0d       	add	r24, r12
    2014:	80 83       	st	Z, r24
			if(currentPattern->outputPitch[positionSelect]>>7)
    2016:	d1 2c       	mov	r13, r1
    2018:	f7 01       	movw	r30, r14
    201a:	ec 0d       	add	r30, r12
    201c:	fd 1d       	adc	r31, r13
    201e:	80 89       	ldd	r24, Z+16	; 0x10
    2020:	88 23       	and	r24, r24
    2022:	94 f4       	brge	.+36     	; 0x2048 <updateScreen+0x8d8>
			{
				menuScreen->knobScreen[1][7] = '-';
    2024:	8d e2       	ldi	r24, 0x2D	; 45
    2026:	f8 01       	movw	r30, r16
    2028:	e0 5f       	subi	r30, 0xF0	; 240
    202a:	fc 4f       	sbci	r31, 0xFC	; 252
    202c:	80 83       	st	Z, r24
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect])^255);
    202e:	f7 01       	movw	r30, r14
    2030:	ec 0d       	add	r30, r12
    2032:	fd 1d       	adc	r31, r13
    2034:	20 89       	ldd	r18, Z+16	; 0x10
    2036:	20 95       	com	r18
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	43 e0       	ldi	r20, 0x03	; 3
    203c:	68 e0       	ldi	r22, 0x08	; 8
    203e:	c8 01       	movw	r24, r16
    2040:	87 5f       	subi	r24, 0xF7	; 247
    2042:	9c 4f       	sbci	r25, 0xFC	; 252
    2044:	7c d2       	rcall	.+1272   	; 0x253e <numPrinter>
			}else
			{
				menuScreen->knobScreen[1][7] = '+';
    2046:	10 c0       	rjmp	.+32     	; 0x2068 <updateScreen+0x8f8>
    2048:	8b e2       	ldi	r24, 0x2B	; 43
    204a:	f8 01       	movw	r30, r16
    204c:	e0 5f       	subi	r30, 0xF0	; 240
    204e:	fc 4f       	sbci	r31, 0xFC	; 252
				numPrinter(menuScreen->knobScreen[1],8,3,currentPattern->outputPitch[positionSelect]);
    2050:	80 83       	st	Z, r24
    2052:	f7 01       	movw	r30, r14
    2054:	ec 0d       	add	r30, r12
    2056:	fd 1d       	adc	r31, r13
    2058:	20 89       	ldd	r18, Z+16	; 0x10
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	43 e0       	ldi	r20, 0x03	; 3
    205e:	68 e0       	ldi	r22, 0x08	; 8
    2060:	c8 01       	movw	r24, r16
    2062:	87 5f       	subi	r24, 0xF7	; 247
    2064:	9c 4f       	sbci	r25, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
    2066:	6b d2       	rcall	.+1238   	; 0x253e <numPrinter>
    2068:	63 e0       	ldi	r22, 0x03	; 3
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	c8 01       	movw	r24, r16
    206e:	87 5f       	subi	r24, 0xF7	; 247
			break;
    2070:	9c 4f       	sbci	r25, 0xFC	; 252
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect]|((currentPattern->trackAttackTimeMSB[positionSelect])<<8);				
    2072:	4d d2       	rcall	.+1178   	; 0x250e <outputS>
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    2074:	af c0       	rjmp	.+350    	; 0x21d4 <updateScreen+0xa64>
    2076:	d1 2c       	mov	r13, r1
    2078:	48 01       	movw	r8, r16
    207a:	f2 ee       	ldi	r31, 0xE2	; 226
    207c:	8f 1a       	sub	r8, r31
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect]|((currentPattern->trackAttackTimeMSB[positionSelect])<<8);				
    207e:	fc ef       	ldi	r31, 0xFC	; 252
    2080:	9f 0a       	sbc	r9, r31
    2082:	ec 0c       	add	r14, r12
    2084:	fd 1c       	adc	r15, r13
    2086:	f7 01       	movw	r30, r14
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    2088:	e8 5b       	subi	r30, 0xB8	; 184
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	20 81       	ld	r18, Z
    208e:	30 e0       	ldi	r19, 0x00	; 0
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect]|((currentPattern->trackAttackTimeMSB[positionSelect])<<8);				
    2090:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    2092:	22 27       	eor	r18, r18
    2094:	70 96       	adiw	r30, 0x10	; 16
    2096:	80 81       	ld	r24, Z
    2098:	28 2b       	or	r18, r24
    209a:	45 e0       	ldi	r20, 0x05	; 5
    209c:	6e e0       	ldi	r22, 0x0E	; 14
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
    209e:	c4 01       	movw	r24, r8
    20a0:	4e d2       	rcall	.+1180   	; 0x253e <numPrinter>
    20a2:	f8 01       	movw	r30, r16
    20a4:	e5 5d       	subi	r30, 0xD5	; 213
    20a6:	fc 4f       	sbci	r31, 0xFC	; 252
    20a8:	d8 01       	movw	r26, r16
    20aa:	a4 5d       	subi	r26, 0xD4	; 212
    20ac:	bc 4f       	sbci	r27, 0xFC	; 252
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
    20ae:	8c 91       	ld	r24, X
    20b0:	80 83       	st	Z, r24
    20b2:	32 96       	adiw	r30, 0x02	; 2
			menuScreen->knobScreen[2][15] = '.';
    20b4:	80 81       	ld	r24, Z
    20b6:	8c 93       	st	X, r24
			//do stuff here to add the decimal point	
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
    20b8:	8e e2       	ldi	r24, 0x2E	; 46
    20ba:	80 83       	st	Z, r24
    20bc:	2f ef       	ldi	r18, 0xFF	; 255
    20be:	c2 1a       	sub	r12, r18
    20c0:	d2 0a       	sbc	r13, r18
    20c2:	96 01       	movw	r18, r12
    20c4:	2b 0d       	add	r18, r11
    20c6:	31 1d       	adc	r19, r1
    20c8:	42 e0       	ldi	r20, 0x02	; 2
    20ca:	6a e0       	ldi	r22, 0x0A	; 10
    20cc:	c4 01       	movw	r24, r8
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
    20ce:	37 d2       	rcall	.+1134   	; 0x253e <numPrinter>
    20d0:	63 e0       	ldi	r22, 0x03	; 3
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	c4 01       	movw	r24, r8
    20d6:	1b d2       	rcall	.+1078   	; 0x250e <outputS>
			break;
    20d8:	7d c0       	rjmp	.+250    	; 0x21d4 <updateScreen+0xa64>
				
			case 3: //envelope bottom knob
			numPrinter(menuScreen->knobScreen[3],14,4,currentPattern->trackReleaseTimeLSB[(positionSelect+positionSelectUpper)]);
    20da:	d1 2c       	mov	r13, r1
    20dc:	ab 2c       	mov	r10, r11
    20de:	b1 2c       	mov	r11, r1
    20e0:	0d 5c       	subi	r16, 0xCD	; 205
    20e2:	1c 4f       	sbci	r17, 0xFC	; 252
    20e4:	f7 01       	movw	r30, r14
    20e6:	ec 0d       	add	r30, r12
    20e8:	fd 1d       	adc	r31, r13
    20ea:	ea 0d       	add	r30, r10
    20ec:	fb 1d       	adc	r31, r11
    20ee:	e8 58       	subi	r30, 0x88	; 136
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	20 81       	ld	r18, Z
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	44 e0       	ldi	r20, 0x04	; 4
    20f8:	6e e0       	ldi	r22, 0x0E	; 14
    20fa:	c8 01       	movw	r24, r16
    20fc:	20 d2       	rcall	.+1088   	; 0x253e <numPrinter>
			numPrinter(menuScreen->knobScreen[3],11,2,(positionSelect+1+positionSelectUpper));
    20fe:	96 01       	movw	r18, r12
    2100:	2f 5f       	subi	r18, 0xFF	; 255
    2102:	3f 4f       	sbci	r19, 0xFF	; 255
    2104:	2a 0d       	add	r18, r10
    2106:	3b 1d       	adc	r19, r11
    2108:	42 e0       	ldi	r20, 0x02	; 2
    210a:	6b e0       	ldi	r22, 0x0B	; 11
    210c:	c8 01       	movw	r24, r16
    210e:	17 d2       	rcall	.+1070   	; 0x253e <numPrinter>
			outputS(menuScreen->knobScreen[3], 3);
    2110:	63 e0       	ldi	r22, 0x03	; 3
    2112:	70 e0       	ldi	r23, 0x00	; 0
    2114:	c8 01       	movw	r24, r16
    2116:	fb d1       	rcall	.+1014   	; 0x250e <outputS>
			break;
    2118:	5d c0       	rjmp	.+186    	; 0x21d4 <updateScreen+0xa64>
				
			case 4: //track volume
			if(currentPattern->trackMainVolumeMSB[(positionSelect+positionSelectUpper)]==0)
    211a:	2b 2d       	mov	r18, r11
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	c9 01       	movw	r24, r18
    2120:	8c 0d       	add	r24, r12
    2122:	91 1d       	adc	r25, r1
    2124:	6c 01       	movw	r12, r24
    2126:	f7 01       	movw	r30, r14
    2128:	e8 0f       	add	r30, r24
    212a:	f9 1f       	adc	r31, r25
    212c:	80 a5       	ldd	r24, Z+40	; 0x28
    212e:	81 11       	cpse	r24, r1
			{
				numPrinter(menuScreen->knobScreen[4],15, 2, currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]);
    2130:	0c c0       	rjmp	.+24     	; 0x214a <updateScreen+0x9da>
    2132:	f7 01       	movw	r30, r14
    2134:	ec 0d       	add	r30, r12
    2136:	fd 1d       	adc	r31, r13
    2138:	20 ad       	ldd	r18, Z+56	; 0x38
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	42 e0       	ldi	r20, 0x02	; 2
    213e:	6f e0       	ldi	r22, 0x0F	; 15
    2140:	c8 01       	movw	r24, r16
    2142:	88 5b       	subi	r24, 0xB8	; 184
    2144:	9c 4f       	sbci	r25, 0xFC	; 252
    2146:	fb d1       	rcall	.+1014   	; 0x253e <numPrinter>
    2148:	25 c0       	rjmp	.+74     	; 0x2194 <updateScreen+0xa24>
			}else
			{
				menuScreen->knobScreen[4][15] = '-';
    214a:	8d e2       	ldi	r24, 0x2D	; 45
    214c:	f8 01       	movw	r30, r16
    214e:	e9 5a       	subi	r30, 0xA9	; 169
    2150:	fc 4f       	sbci	r31, 0xFC	; 252
    2152:	80 83       	st	Z, r24
				menuScreen->knobScreen[4][16] = ((((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    2154:	31 96       	adiw	r30, 0x01	; 1
    2156:	ec 0c       	add	r14, r12
    2158:	fd 1c       	adc	r15, r13
    215a:	d7 01       	movw	r26, r14
    215c:	d8 96       	adiw	r26, 0x38	; 56
    215e:	8c 91       	ld	r24, X
    2160:	80 95       	com	r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	01 96       	adiw	r24, 0x01	; 1
    2166:	64 e6       	ldi	r22, 0x64	; 100
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__divmodhi4>
    216e:	2a e0       	ldi	r18, 0x0A	; 10
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	b9 01       	movw	r22, r18
    2174:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__divmodhi4>
    2178:	60 5d       	subi	r22, 0xD0	; 208
    217a:	60 83       	st	Z, r22
				menuScreen->knobScreen[4][17] = (((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%10)+48;
    217c:	31 96       	adiw	r30, 0x01	; 1
    217e:	d7 01       	movw	r26, r14
    2180:	d8 96       	adiw	r26, 0x38	; 56
    2182:	8c 91       	ld	r24, X
    2184:	80 95       	com	r24
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	01 96       	adiw	r24, 0x01	; 1
    218a:	b9 01       	movw	r22, r18
    218c:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__divmodhi4>
    2190:	80 5d       	subi	r24, 0xD0	; 208
    2192:	80 83       	st	Z, r24
			}
				 numPrinter(menuScreen->knobScreen[4],12,2,(positionSelect+positionSelectUpper+1));
    2194:	08 5b       	subi	r16, 0xB8	; 184
    2196:	1c 4f       	sbci	r17, 0xFC	; 252
    2198:	96 01       	movw	r18, r12
    219a:	2f 5f       	subi	r18, 0xFF	; 255
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	42 e0       	ldi	r20, 0x02	; 2
    21a0:	6c e0       	ldi	r22, 0x0C	; 12
    21a2:	c8 01       	movw	r24, r16
    21a4:	cc d1       	rcall	.+920    	; 0x253e <numPrinter>
    21a6:	63 e0       	ldi	r22, 0x03	; 3
				 outputS(menuScreen->knobScreen[4], 3);
    21a8:	70 e0       	ldi	r23, 0x00	; 0
    21aa:	c8 01       	movw	r24, r16
    21ac:	b0 d1       	rcall	.+864    	; 0x250e <outputS>
    21ae:	12 c0       	rjmp	.+36     	; 0x21d4 <updateScreen+0xa64>
    21b0:	06 5d       	subi	r16, 0xD6	; 214
			break;
    21b2:	1f 4f       	sbci	r17, 0xFF	; 255
			
			case 5:
			numPrinter(menuScreen->screen0[2],5,3,currentPattern->patternBPM);
    21b4:	f7 01       	movw	r30, r14
    21b6:	e8 53       	subi	r30, 0x38	; 56
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	20 81       	ld	r18, Z
    21bc:	31 81       	ldd	r19, Z+1	; 0x01
    21be:	43 e0       	ldi	r20, 0x03	; 3
    21c0:	65 e0       	ldi	r22, 0x05	; 5
    21c2:	c8 01       	movw	r24, r16
    21c4:	bc d1       	rcall	.+888    	; 0x253e <numPrinter>
    21c6:	8e 81       	ldd	r24, Y+6	; 0x06
    21c8:	81 11       	cpse	r24, r1
    21ca:	04 c0       	rjmp	.+8      	; 0x21d4 <updateScreen+0xa64>
			if(currentGlobals->menuState==PreformanceModeInit)
    21cc:	62 e0       	ldi	r22, 0x02	; 2
    21ce:	70 e0       	ldi	r23, 0x00	; 0
    21d0:	c8 01       	movw	r24, r16
			{
				outputS(menuScreen->screen0[2],2);
    21d2:	9d d1       	rcall	.+826    	; 0x250e <outputS>
    21d4:	1a 86       	std	Y+10, r1	; 0x0a
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	1f 91       	pop	r17
			}
			break;
		}
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<knobChange));			
    21dc:	0f 91       	pop	r16
	}
    21de:	ff 90       	pop	r15
    21e0:	ef 90       	pop	r14
    21e2:	df 90       	pop	r13
    21e4:	cf 90       	pop	r12
    21e6:	bf 90       	pop	r11
    21e8:	af 90       	pop	r10
    21ea:	9f 90       	pop	r9
    21ec:	8f 90       	pop	r8
    21ee:	08 95       	ret

000021f0 <__vector_54>:
    21f0:	1f 92       	push	r1
    21f2:	0f 92       	push	r0
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	0f 92       	push	r0
}

void midiTransmit(uint8_t data)
{
  while (!(UCSR3A & (1 << UDRE3)));
  UDR3 = data;
    21f8:	11 24       	eor	r1, r1
    21fa:	0b b6       	in	r0, 0x3b	; 59
    21fc:	0f 92       	push	r0
    21fe:	2f 93       	push	r18
    2200:	3f 93       	push	r19
    2202:	5f 93       	push	r21
    2204:	6f 93       	push	r22
    2206:	7f 93       	push	r23
    2208:	8f 93       	push	r24
    220a:	9f 93       	push	r25
    220c:	af 93       	push	r26
    220e:	bf 93       	push	r27
    2210:	ef 93       	push	r30
    2212:	ff 93       	push	r31
    2214:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2218:	82 2f       	mov	r24, r18
    221a:	82 95       	swap	r24
    221c:	8f 70       	andi	r24, 0x0F	; 15
    221e:	88 50       	subi	r24, 0x08	; 8
    2220:	82 30       	cpi	r24, 0x02	; 2
    2222:	78 f4       	brcc	.+30     	; 0x2242 <__stack+0x43>
    2224:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <midiWriteIndex>
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	fc 01       	movw	r30, r24
    222c:	ee 0f       	add	r30, r30
    222e:	ff 1f       	adc	r31, r31
    2230:	8e 0f       	add	r24, r30
    2232:	9f 1f       	adc	r25, r31
    2234:	fc 01       	movw	r30, r24
    2236:	ea 54       	subi	r30, 0x4A	; 74
    2238:	f6 4f       	sbci	r31, 0xF6	; 246
    223a:	20 83       	st	Z, r18
    223c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    2240:	50 c0       	rjmp	.+160    	; 0x22e2 <__stack+0xe3>
    2242:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    2246:	81 11       	cpse	r24, r1
    2248:	15 c0       	rjmp	.+42     	; 0x2274 <__stack+0x75>
    224a:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <midiWriteIndex>
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    2254:	fc 01       	movw	r30, r24
    2256:	ee 0f       	add	r30, r30
    2258:	ff 1f       	adc	r31, r31
    225a:	e8 0f       	add	r30, r24
    225c:	f9 1f       	adc	r31, r25
    225e:	ea 54       	subi	r30, 0x4A	; 74
    2260:	f6 4f       	sbci	r31, 0xF6	; 246
    2262:	e3 0f       	add	r30, r19
    2264:	f1 1d       	adc	r31, r1
    2266:	21 83       	std	Z+1, r18	; 0x01
    2268:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    226c:	8f 5f       	subi	r24, 0xFF	; 255
    226e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <midiWriteFlag>
    2272:	37 c0       	rjmp	.+110    	; 0x22e2 <__stack+0xe3>
    2274:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    2278:	8f 3f       	cpi	r24, 0xFF	; 255
    227a:	99 f1       	breq	.+102    	; 0x22e2 <__stack+0xe3>
    227c:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <midiWriteIndex>
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    2286:	fc 01       	movw	r30, r24
    2288:	ee 0f       	add	r30, r30
    228a:	ff 1f       	adc	r31, r31
    228c:	e8 0f       	add	r30, r24
    228e:	f9 1f       	adc	r31, r25
    2290:	ea 54       	subi	r30, 0x4A	; 74
    2292:	f6 4f       	sbci	r31, 0xF6	; 246
    2294:	e3 0f       	add	r30, r19
    2296:	f1 1d       	adc	r31, r1
    2298:	21 83       	std	Z+1, r18	; 0x01
    229a:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <midiWriteIndex>
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	fc 01       	movw	r30, r24
    22a2:	ee 0f       	add	r30, r30
    22a4:	ff 1f       	adc	r31, r31
    22a6:	8e 0f       	add	r24, r30
    22a8:	9f 1f       	adc	r25, r31
    22aa:	fc 01       	movw	r30, r24
    22ac:	ea 54       	subi	r30, 0x4A	; 74
    22ae:	f6 4f       	sbci	r31, 0xF6	; 246
    22b0:	20 81       	ld	r18, Z
    22b2:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <midiWriteIndex>
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	01 96       	adiw	r24, 0x01	; 1
    22ba:	6a e0       	ldi	r22, 0x0A	; 10
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__divmodhi4>
    22c2:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <midiWriteIndex>
    22c6:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <midiWriteIndex>
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	fc 01       	movw	r30, r24
    22ce:	ee 0f       	add	r30, r30
    22d0:	ff 1f       	adc	r31, r31
    22d2:	8e 0f       	add	r24, r30
    22d4:	9f 1f       	adc	r25, r31
    22d6:	fc 01       	movw	r30, r24
    22d8:	ea 54       	subi	r30, 0x4A	; 74
    22da:	f6 4f       	sbci	r31, 0xF6	; 246
    22dc:	20 83       	st	Z, r18
    22de:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    22e2:	ff 91       	pop	r31
    22e4:	ef 91       	pop	r30
    22e6:	bf 91       	pop	r27
    22e8:	af 91       	pop	r26
    22ea:	9f 91       	pop	r25
    22ec:	8f 91       	pop	r24
    22ee:	7f 91       	pop	r23
    22f0:	6f 91       	pop	r22
    22f2:	5f 91       	pop	r21
    22f4:	3f 91       	pop	r19
    22f6:	2f 91       	pop	r18
    22f8:	0f 90       	pop	r0
    22fa:	0b be       	out	0x3b, r0	; 59
    22fc:	0f 90       	pop	r0
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	0f 90       	pop	r0
    2302:	1f 90       	pop	r1
    2304:	18 95       	reti

00002306 <initMidi>:
    2306:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    230a:	8f e1       	ldi	r24, 0x1F	; 31
    230c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    2310:	e1 e3       	ldi	r30, 0x31	; 49
    2312:	f1 e0       	ldi	r31, 0x01	; 1
    2314:	80 81       	ld	r24, Z
    2316:	88 69       	ori	r24, 0x98	; 152
    2318:	80 83       	st	Z, r24
    231a:	e2 e3       	ldi	r30, 0x32	; 50
    231c:	f1 e0       	ldi	r31, 0x01	; 1
    231e:	80 81       	ld	r24, Z
    2320:	86 60       	ori	r24, 0x06	; 6
    2322:	80 83       	st	Z, r24
    2324:	08 95       	ret

00002326 <midiRead>:
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
    2326:	af 92       	push	r10
    2328:	bf 92       	push	r11
    232a:	cf 92       	push	r12
    232c:	df 92       	push	r13
    232e:	ef 92       	push	r14
    2330:	ff 92       	push	r15
    2332:	0f 93       	push	r16
    2334:	1f 93       	push	r17
    2336:	cf 93       	push	r28
    2338:	df 93       	push	r29
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
  while (midiReadIndex != midiWriteIndex)
    233e:	e0 91 95 03 	lds	r30, 0x0395	; 0x800395 <midiReadIndex>
    2342:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <midiWriteIndex>
    2346:	e8 17       	cp	r30, r24
    2348:	09 f4       	brne	.+2      	; 0x234c <midiRead+0x26>
    234a:	5c c0       	rjmp	.+184    	; 0x2404 <midiRead+0xde>
    234c:	7e 01       	movw	r14, r28
    234e:	86 ea       	ldi	r24, 0xA6	; 166
    2350:	e8 0e       	add	r14, r24
    2352:	f1 1c       	adc	r15, r1
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    2354:	0a e0       	ldi	r16, 0x0A	; 10
    2356:	10 e0       	ldi	r17, 0x00	; 0

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
  {
    uint8_t midiMessageType = ((midiEventBuffer[midiReadIndex].statusByte)>>4);
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	cf 01       	movw	r24, r30
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	e8 0f       	add	r30, r24
    2362:	f9 1f       	adc	r31, r25
    2364:	ea 54       	subi	r30, 0x4A	; 74
    2366:	f6 4f       	sbci	r31, 0xF6	; 246
    2368:	80 81       	ld	r24, Z
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    236a:	22 81       	ldd	r18, Z+2	; 0x02
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    236c:	90 81       	ld	r25, Z
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    236e:	82 95       	swap	r24
    2370:	8f 70       	andi	r24, 0x0F	; 15
    2372:	89 30       	cpi	r24, 0x09	; 9
    2374:	c9 f5       	brne	.+114    	; 0x23e8 <midiRead+0xc2>
    2376:	22 23       	and	r18, r18
    2378:	b9 f1       	breq	.+110    	; 0x23e8 <midiRead+0xc2>
    237a:	9f 70       	andi	r25, 0x0F	; 15
    237c:	cb 56       	subi	r28, 0x6B	; 107
    237e:	de 4f       	sbci	r29, 0xFE	; 254
    2380:	88 81       	ld	r24, Y
    2382:	c5 59       	subi	r28, 0x95	; 149
    2384:	d1 40       	sbci	r29, 0x01	; 1
    2386:	98 13       	cpse	r25, r24
    2388:	2f c0       	rjmp	.+94     	; 0x23e8 <midiRead+0xc2>
    238a:	0f 2e       	mov	r0, r31
    238c:	f9 e8       	ldi	r31, 0x89	; 137
    238e:	af 2e       	mov	r10, r31
    2390:	bb 24       	eor	r11, r11
    2392:	b3 94       	inc	r11
    2394:	f0 2d       	mov	r31, r0
    2396:	ac 0e       	add	r10, r28
    2398:	bd 1e       	adc	r11, r29
    239a:	ed e0       	ldi	r30, 0x0D	; 13
    239c:	ae 0e       	add	r10, r30
    239e:	b1 1c       	adc	r11, r1
    23a0:	6e 01       	movw	r12, r28
    23a2:	f6 e9       	ldi	r31, 0x96	; 150
    23a4:	cf 0e       	add	r12, r31
    23a6:	d1 1c       	adc	r13, r1
    {
        for (int i=0; i<16; i++)
        {
          if(midiEventBuffer[midiReadIndex].dataByte[0]==currentGlobals.midiTrackNote[i])
    23a8:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <midiReadIndex>
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	fc 01       	movw	r30, r24
    23b0:	ee 0f       	add	r30, r30
    23b2:	ff 1f       	adc	r31, r31
    23b4:	8e 0f       	add	r24, r30
    23b6:	9f 1f       	adc	r25, r31
    23b8:	fc 01       	movw	r30, r24
    23ba:	ea 54       	subi	r30, 0x4A	; 74
    23bc:	f6 4f       	sbci	r31, 0xF6	; 246
    23be:	91 81       	ldd	r25, Z+1	; 0x01
    23c0:	f5 01       	movw	r30, r10
    23c2:	81 91       	ld	r24, Z+
    23c4:	5f 01       	movw	r10, r30
    23c6:	98 13       	cpse	r25, r24
    23c8:	09 c0       	rjmp	.+18     	; 0x23dc <midiRead+0xb6>
          { //we don't care about velocity, at least not yet.
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
    23ca:	f6 01       	movw	r30, r12
    23cc:	20 81       	ld	r18, Z
    23ce:	e0 57       	subi	r30, 0x70	; 112
    23d0:	f1 09       	sbc	r31, r1
    23d2:	40 81       	ld	r20, Z
    23d4:	f6 01       	movw	r30, r12
    23d6:	60 89       	ldd	r22, Z+16	; 0x10
    23d8:	80 a1       	ldd	r24, Z+32	; 0x20
    23da:	e4 d3       	rcall	.+1992   	; 0x2ba4 <trackControl>
    23dc:	ff ef       	ldi	r31, 0xFF	; 255
    23de:	cf 1a       	sub	r12, r31
    23e0:	df 0a       	sbc	r13, r31
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    {
        for (int i=0; i<16; i++)
    23e2:	ce 14       	cp	r12, r14
    23e4:	df 04       	cpc	r13, r15
    23e6:	01 f7       	brne	.-64     	; 0x23a8 <midiRead+0x82>
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    23e8:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <midiReadIndex>
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	01 96       	adiw	r24, 0x01	; 1
    23f0:	b8 01       	movw	r22, r16
    23f2:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__divmodhi4>
    23f6:	e8 2f       	mov	r30, r24
    23f8:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <midiReadIndex>
  UDR3 = data;
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
    23fc:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <midiWriteIndex>
    2400:	8e 13       	cpse	r24, r30
    2402:	aa cf       	rjmp	.-172    	; 0x2358 <midiRead+0x32>
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
  }
}
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	ff 90       	pop	r15
    240e:	ef 90       	pop	r14
    2410:	df 90       	pop	r13
    2412:	cf 90       	pop	r12
    2414:	bf 90       	pop	r11
    2416:	af 90       	pop	r10
    2418:	08 95       	ret

0000241a <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    241a:	e2 e0       	ldi	r30, 0x02	; 2
    241c:	f1 e0       	ldi	r31, 0x01	; 1
    241e:	80 81       	ld	r24, Z
    2420:	80 62       	ori	r24, 0x20	; 32
    2422:	80 83       	st	Z, r24
    2424:	85 e0       	ldi	r24, 0x05	; 5
    2426:	8a 95       	dec	r24
    2428:	f1 f7       	brne	.-4      	; 0x2426 <enableCycle+0xc>
    242a:	00 00       	nop
    242c:	80 81       	ld	r24, Z
    242e:	8f 7d       	andi	r24, 0xDF	; 223
    2430:	80 83       	st	Z, r24
    2432:	08 95       	ret

00002434 <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
    2434:	e2 e0       	ldi	r30, 0x02	; 2
    2436:	f1 e0       	ldi	r31, 0x01	; 1
    2438:	90 81       	ld	r25, Z
    243a:	9f 7b       	andi	r25, 0xBF	; 191
    243c:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    243e:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
    2440:	ec cf       	rjmp	.-40     	; 0x241a <enableCycle>
    2442:	08 95       	ret

00002444 <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
    2444:	e2 e0       	ldi	r30, 0x02	; 2
    2446:	f1 e0       	ldi	r31, 0x01	; 1
    2448:	90 81       	ld	r25, Z
    244a:	90 64       	ori	r25, 0x40	; 64
    244c:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    244e:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
    2450:	e4 cf       	rjmp	.-56     	; 0x241a <enableCycle>
    2452:	08 95       	ret

00002454 <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRH = 0x60; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
    2454:	80 e6       	ldi	r24, 0x60	; 96
    2456:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	DDRC =0xFF; //all pins on the LCD Data Bus.
    245a:	8f ef       	ldi	r24, 0xFF	; 255
    245c:	87 b9       	out	0x07, r24	; 7


	PORTH &= 0B10011111;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
    245e:	e2 e0       	ldi	r30, 0x02	; 2
    2460:	f1 e0       	ldi	r31, 0x01	; 1
    2462:	80 81       	ld	r24, Z
    2464:	8f 79       	andi	r24, 0x9F	; 159
    2466:	80 83       	st	Z, r24

	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
    2468:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    246a:	8f e1       	ldi	r24, 0x1F	; 31
    246c:	93 e0       	ldi	r25, 0x03	; 3
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <initScreen+0x1a>
    2472:	00 c0       	rjmp	.+0      	; 0x2474 <initScreen+0x20>
    2474:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose


	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    2476:	8a e2       	ldi	r24, 0x2A	; 42
    2478:	dd df       	rcall	.-70     	; 0x2434 <command>
	command(0x71);        // Function selection A:
    247a:	81 e7       	ldi	r24, 0x71	; 113
    247c:	db df       	rcall	.-74     	; 0x2434 <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
    247e:	8c e5       	ldi	r24, 0x5C	; 92
    2480:	e1 df       	rcall	.-62     	; 0x2444 <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    2482:	88 e2       	ldi	r24, 0x28	; 40
    2484:	d7 df       	rcall	.-82     	; 0x2434 <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
    2486:	88 e0       	ldi	r24, 0x08	; 8
    2488:	d5 df       	rcall	.-86     	; 0x2434 <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    248a:	8a e2       	ldi	r24, 0x2A	; 42
    248c:	d3 df       	rcall	.-90     	; 0x2434 <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    248e:	89 e7       	ldi	r24, 0x79	; 121
    2490:	d1 df       	rcall	.-94     	; 0x2434 <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
    2492:	85 ed       	ldi	r24, 0xD5	; 213
    2494:	cf df       	rcall	.-98     	; 0x2434 <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
    2496:	80 e7       	ldi	r24, 0x70	; 112
    2498:	cd df       	rcall	.-102    	; 0x2434 <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    249a:	88 e7       	ldi	r24, 0x78	; 120
    249c:	cb df       	rcall	.-106    	; 0x2434 <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
    249e:	89 e0       	ldi	r24, 0x09	; 9
    24a0:	c9 df       	rcall	.-110    	; 0x2434 <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
    24a2:	86 e0       	ldi	r24, 0x06	; 6
    24a4:	c7 df       	rcall	.-114    	; 0x2434 <command>
	command(0x72);        // Function selection B:
    24a6:	82 e7       	ldi	r24, 0x72	; 114
    24a8:	c5 df       	rcall	.-118    	; 0x2434 <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
    24aa:	8a e0       	ldi	r24, 0x0A	; 10
    24ac:	cb df       	rcall	.-106    	; 0x2444 <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    24ae:	89 e7       	ldi	r24, 0x79	; 121
    24b0:	c1 df       	rcall	.-126    	; 0x2434 <command>
	command(0xDA);        // Set SEG pins hardware configuration:
    24b2:	8a ed       	ldi	r24, 0xDA	; 218
    24b4:	bf df       	rcall	.-130    	; 0x2434 <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
    24b6:	80 e1       	ldi	r24, 0x10	; 16
    24b8:	bd df       	rcall	.-134    	; 0x2434 <command>
	command(0xDC);        // Function selection C:
    24ba:	8c ed       	ldi	r24, 0xDC	; 220
    24bc:	bb df       	rcall	.-138    	; 0x2434 <command>
	command(0x00);        //  internal VSL, GPIO input disable
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	b9 df       	rcall	.-142    	; 0x2434 <command>
	command(0x81);        // Set contrast control:
    24c2:	81 e8       	ldi	r24, 0x81	; 129
    24c4:	b7 df       	rcall	.-146    	; 0x2434 <command>
    24c6:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
    24c8:	b5 df       	rcall	.-150    	; 0x2434 <command>
    24ca:	89 ed       	ldi	r24, 0xD9	; 217
    24cc:	b3 df       	rcall	.-154    	; 0x2434 <command>
	command(0xD9);        // Set phase length:
    24ce:	81 ef       	ldi	r24, 0xF1	; 241
    24d0:	b1 df       	rcall	.-158    	; 0x2434 <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
    24d2:	8b ed       	ldi	r24, 0xDB	; 219
    24d4:	af df       	rcall	.-162    	; 0x2434 <command>
    24d6:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
    24d8:	ad df       	rcall	.-166    	; 0x2434 <command>
    24da:	88 e7       	ldi	r24, 0x78	; 120
    24dc:	ab df       	rcall	.-170    	; 0x2434 <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
    24de:	88 e2       	ldi	r24, 0x28	; 40
    24e0:	a9 df       	rcall	.-174    	; 0x2434 <command>
    24e2:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    24e4:	a7 df       	rcall	.-178    	; 0x2434 <command>
    24e6:	8f e3       	ldi	r24, 0x3F	; 63
    24e8:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <initScreen+0x96>
    24ee:	00 c0       	rjmp	.+0      	; 0x24f0 <initScreen+0x9c>
	command(0x01);        // Clear display
    24f0:	00 00       	nop
    24f2:	80 e8       	ldi	r24, 0x80	; 128
    24f4:	9f df       	rcall	.-194    	; 0x2434 <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24f6:	8c e0       	ldi	r24, 0x0C	; 12
    24f8:	9d df       	rcall	.-198    	; 0x2434 <command>
    24fa:	9f ef       	ldi	r25, 0xFF	; 255
    24fc:	24 e3       	ldi	r18, 0x34	; 52
    24fe:	8c e0       	ldi	r24, 0x0C	; 12
    2500:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required

	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
    2502:	20 40       	sbci	r18, 0x00	; 0
    2504:	80 40       	sbci	r24, 0x00	; 0
    2506:	e1 f7       	brne	.-8      	; 0x2500 <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
    2508:	00 c0       	rjmp	.+0      	; 0x250a <initScreen+0xb6>
    250a:	00 00       	nop
    250c:	08 95       	ret

0000250e <outputS>:
    250e:	0f 93       	push	r16
    2510:	1f 93       	push	r17
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	8c 01       	movw	r16, r24
    2518:	fb 01       	movw	r30, r22
    251a:	ff 27       	eor	r31, r31
    251c:	e8 5f       	subi	r30, 0xF8	; 248
    251e:	fd 4f       	sbci	r31, 0xFD	; 253
    2520:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
    2522:	88 df       	rcall	.-240    	; 0x2434 <command>
    2524:	e8 01       	movw	r28, r16
    2526:	0c 5e       	subi	r16, 0xEC	; 236
    2528:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
    252a:	89 91       	ld	r24, Y+
    252c:	8b df       	rcall	.-234    	; 0x2444 <data>
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
    252e:	c0 17       	cp	r28, r16
    2530:	d1 07       	cpc	r29, r17
    2532:	d9 f7       	brne	.-10     	; 0x252a <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	1f 91       	pop	r17
    253a:	0f 91       	pop	r16
    253c:	08 95       	ret

0000253e <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch(numCharacters)
    2544:	43 30       	cpi	r20, 0x03	; 3
    2546:	09 f4       	brne	.+2      	; 0x254a <numPrinter+0xc>
    2548:	54 c0       	rjmp	.+168    	; 0x25f2 <numPrinter+0xb4>
    254a:	28 f4       	brcc	.+10     	; 0x2556 <numPrinter+0x18>
    254c:	41 30       	cpi	r20, 0x01	; 1
    254e:	51 f0       	breq	.+20     	; 0x2564 <numPrinter+0x26>
    2550:	42 30       	cpi	r20, 0x02	; 2
    2552:	29 f1       	breq	.+74     	; 0x259e <numPrinter+0x60>
    2554:	b7 c1       	rjmp	.+878    	; 0x28c4 <numPrinter+0x386>
    2556:	44 30       	cpi	r20, 0x04	; 4
    2558:	09 f4       	brne	.+2      	; 0x255c <numPrinter+0x1e>
    255a:	95 c0       	rjmp	.+298    	; 0x2686 <numPrinter+0x148>
    255c:	45 30       	cpi	r20, 0x05	; 5
    255e:	09 f4       	brne	.+2      	; 0x2562 <numPrinter+0x24>
    2560:	0a c1       	rjmp	.+532    	; 0x2776 <numPrinter+0x238>
    2562:	b0 c1       	rjmp	.+864    	; 0x28c4 <numPrinter+0x386>
		case 0:
		break;

		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
    2564:	ec 01       	movw	r28, r24
    2566:	c6 0f       	add	r28, r22
    2568:	d1 1d       	adc	r29, r1
    256a:	ad ec       	ldi	r26, 0xCD	; 205
    256c:	bc ec       	ldi	r27, 0xCC	; 204
    256e:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    2572:	96 95       	lsr	r25
    2574:	87 95       	ror	r24
    2576:	96 95       	lsr	r25
    2578:	87 95       	ror	r24
    257a:	96 95       	lsr	r25
    257c:	87 95       	ror	r24
    257e:	9c 01       	movw	r18, r24
    2580:	22 0f       	add	r18, r18
    2582:	33 1f       	adc	r19, r19
    2584:	88 0f       	add	r24, r24
    2586:	99 1f       	adc	r25, r25
    2588:	88 0f       	add	r24, r24
    258a:	99 1f       	adc	r25, r25
    258c:	88 0f       	add	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	82 0f       	add	r24, r18
    2592:	93 1f       	adc	r25, r19
    2594:	e8 1b       	sub	r30, r24
    2596:	f9 0b       	sbc	r31, r25
    2598:	e0 5d       	subi	r30, 0xD0	; 208
    259a:	e8 83       	st	Y, r30
		break;
    259c:	93 c1       	rjmp	.+806    	; 0x28c4 <numPrinter+0x386>

		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
    259e:	ec 01       	movw	r28, r24
    25a0:	c6 0f       	add	r28, r22
    25a2:	d1 1d       	adc	r29, r1
    25a4:	ad ec       	ldi	r26, 0xCD	; 205
    25a6:	bc ec       	ldi	r27, 0xCC	; 204
    25a8:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    25ac:	96 95       	lsr	r25
    25ae:	87 95       	ror	r24
    25b0:	96 95       	lsr	r25
    25b2:	87 95       	ror	r24
    25b4:	96 95       	lsr	r25
    25b6:	87 95       	ror	r24
    25b8:	9c 01       	movw	r18, r24
    25ba:	22 0f       	add	r18, r18
    25bc:	33 1f       	adc	r19, r19
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	88 0f       	add	r24, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	88 0f       	add	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	82 0f       	add	r24, r18
    25cc:	93 1f       	adc	r25, r19
    25ce:	9f 01       	movw	r18, r30
    25d0:	28 1b       	sub	r18, r24
    25d2:	39 0b       	sbc	r19, r25
    25d4:	c9 01       	movw	r24, r18
    25d6:	80 5d       	subi	r24, 0xD0	; 208
    25d8:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
    25da:	9f 01       	movw	r18, r30
    25dc:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    25e0:	96 95       	lsr	r25
    25e2:	87 95       	ror	r24
    25e4:	96 95       	lsr	r25
    25e6:	87 95       	ror	r24
    25e8:	96 95       	lsr	r25
    25ea:	87 95       	ror	r24
    25ec:	80 5d       	subi	r24, 0xD0	; 208
    25ee:	88 83       	st	Y, r24
		break;
    25f0:	69 c1       	rjmp	.+722    	; 0x28c4 <numPrinter+0x386>

		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
    25f2:	ec 01       	movw	r28, r24
    25f4:	c6 0f       	add	r28, r22
    25f6:	d1 1d       	adc	r29, r1
    25f8:	ad ec       	ldi	r26, 0xCD	; 205
    25fa:	bc ec       	ldi	r27, 0xCC	; 204
    25fc:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    2600:	96 95       	lsr	r25
    2602:	87 95       	ror	r24
    2604:	96 95       	lsr	r25
    2606:	87 95       	ror	r24
    2608:	96 95       	lsr	r25
    260a:	87 95       	ror	r24
    260c:	9c 01       	movw	r18, r24
    260e:	22 0f       	add	r18, r18
    2610:	33 1f       	adc	r19, r19
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	88 0f       	add	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	82 0f       	add	r24, r18
    2620:	93 1f       	adc	r25, r19
    2622:	9f 01       	movw	r18, r30
    2624:	28 1b       	sub	r18, r24
    2626:	39 0b       	sbc	r19, r25
    2628:	c9 01       	movw	r24, r18
    262a:	80 5d       	subi	r24, 0xD0	; 208
    262c:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = tensPlace;
    262e:	af 01       	movw	r20, r30
    2630:	56 95       	lsr	r21
    2632:	47 95       	ror	r20
    2634:	56 95       	lsr	r21
    2636:	47 95       	ror	r20
    2638:	9a 01       	movw	r18, r20
    263a:	ab e7       	ldi	r26, 0x7B	; 123
    263c:	b4 e1       	ldi	r27, 0x14	; 20
    263e:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    2642:	96 95       	lsr	r25
    2644:	87 95       	ror	r24
    2646:	64 e6       	ldi	r22, 0x64	; 100
    2648:	68 9f       	mul	r22, r24
    264a:	90 01       	movw	r18, r0
    264c:	69 9f       	mul	r22, r25
    264e:	30 0d       	add	r19, r0
    2650:	11 24       	eor	r1, r1
    2652:	cf 01       	movw	r24, r30
    2654:	82 1b       	sub	r24, r18
    2656:	93 0b       	sbc	r25, r19
    2658:	9c 01       	movw	r18, r24
    265a:	ad ec       	ldi	r26, 0xCD	; 205
    265c:	bc ec       	ldi	r27, 0xCC	; 204
    265e:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    2662:	96 95       	lsr	r25
    2664:	87 95       	ror	r24
    2666:	96 95       	lsr	r25
    2668:	87 95       	ror	r24
    266a:	96 95       	lsr	r25
    266c:	87 95       	ror	r24
    266e:	80 5d       	subi	r24, 0xD0	; 208
    2670:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
    2672:	9a 01       	movw	r18, r20
    2674:	ab e7       	ldi	r26, 0x7B	; 123
    2676:	b4 e1       	ldi	r27, 0x14	; 20
    2678:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    267c:	96 95       	lsr	r25
    267e:	87 95       	ror	r24
    2680:	80 5d       	subi	r24, 0xD0	; 208
    2682:	88 83       	st	Y, r24
		break;
    2684:	1f c1       	rjmp	.+574    	; 0x28c4 <numPrinter+0x386>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
    2686:	ec 01       	movw	r28, r24
    2688:	c6 0f       	add	r28, r22
    268a:	d1 1d       	adc	r29, r1
    268c:	ad ec       	ldi	r26, 0xCD	; 205
    268e:	bc ec       	ldi	r27, 0xCC	; 204
    2690:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    2694:	96 95       	lsr	r25
    2696:	87 95       	ror	r24
    2698:	96 95       	lsr	r25
    269a:	87 95       	ror	r24
    269c:	96 95       	lsr	r25
    269e:	87 95       	ror	r24
    26a0:	9c 01       	movw	r18, r24
    26a2:	22 0f       	add	r18, r18
    26a4:	33 1f       	adc	r19, r19
    26a6:	88 0f       	add	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	88 0f       	add	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	82 0f       	add	r24, r18
    26b4:	93 1f       	adc	r25, r19
    26b6:	9f 01       	movw	r18, r30
    26b8:	28 1b       	sub	r18, r24
    26ba:	39 0b       	sbc	r19, r25
    26bc:	c9 01       	movw	r24, r18
    26be:	80 5d       	subi	r24, 0xD0	; 208
    26c0:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
    26c2:	9f 01       	movw	r18, r30
    26c4:	36 95       	lsr	r19
    26c6:	27 95       	ror	r18
    26c8:	36 95       	lsr	r19
    26ca:	27 95       	ror	r18
    26cc:	ab e7       	ldi	r26, 0x7B	; 123
    26ce:	b4 e1       	ldi	r27, 0x14	; 20
    26d0:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    26d4:	96 95       	lsr	r25
    26d6:	87 95       	ror	r24
    26d8:	44 e6       	ldi	r20, 0x64	; 100
    26da:	48 9f       	mul	r20, r24
    26dc:	90 01       	movw	r18, r0
    26de:	49 9f       	mul	r20, r25
    26e0:	30 0d       	add	r19, r0
    26e2:	11 24       	eor	r1, r1
    26e4:	cf 01       	movw	r24, r30
    26e6:	82 1b       	sub	r24, r18
    26e8:	93 0b       	sbc	r25, r19
    26ea:	9c 01       	movw	r18, r24
    26ec:	ad ec       	ldi	r26, 0xCD	; 205
    26ee:	bc ec       	ldi	r27, 0xCC	; 204
    26f0:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    26f4:	96 95       	lsr	r25
    26f6:	87 95       	ror	r24
    26f8:	96 95       	lsr	r25
    26fa:	87 95       	ror	r24
    26fc:	96 95       	lsr	r25
    26fe:	87 95       	ror	r24
    2700:	80 5d       	subi	r24, 0xD0	; 208
    2702:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = hunderedsPlace;
    2704:	af 01       	movw	r20, r30
    2706:	56 95       	lsr	r21
    2708:	47 95       	ror	r20
    270a:	56 95       	lsr	r21
    270c:	47 95       	ror	r20
    270e:	56 95       	lsr	r21
    2710:	47 95       	ror	r20
    2712:	9a 01       	movw	r18, r20
    2714:	a5 ec       	ldi	r26, 0xC5	; 197
    2716:	b0 e2       	ldi	r27, 0x20	; 32
    2718:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    271c:	92 95       	swap	r25
    271e:	82 95       	swap	r24
    2720:	8f 70       	andi	r24, 0x0F	; 15
    2722:	89 27       	eor	r24, r25
    2724:	9f 70       	andi	r25, 0x0F	; 15
    2726:	89 27       	eor	r24, r25
    2728:	68 ee       	ldi	r22, 0xE8	; 232
    272a:	73 e0       	ldi	r23, 0x03	; 3
    272c:	86 9f       	mul	r24, r22
    272e:	90 01       	movw	r18, r0
    2730:	87 9f       	mul	r24, r23
    2732:	30 0d       	add	r19, r0
    2734:	96 9f       	mul	r25, r22
    2736:	30 0d       	add	r19, r0
    2738:	11 24       	eor	r1, r1
    273a:	cf 01       	movw	r24, r30
    273c:	82 1b       	sub	r24, r18
    273e:	93 0b       	sbc	r25, r19
    2740:	9c 01       	movw	r18, r24
    2742:	36 95       	lsr	r19
    2744:	27 95       	ror	r18
    2746:	36 95       	lsr	r19
    2748:	27 95       	ror	r18
    274a:	ab e7       	ldi	r26, 0x7B	; 123
    274c:	b4 e1       	ldi	r27, 0x14	; 20
    274e:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    2752:	96 95       	lsr	r25
    2754:	87 95       	ror	r24
    2756:	80 5d       	subi	r24, 0xD0	; 208
    2758:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
    275a:	9a 01       	movw	r18, r20
    275c:	a5 ec       	ldi	r26, 0xC5	; 197
    275e:	b0 e2       	ldi	r27, 0x20	; 32
    2760:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    2764:	92 95       	swap	r25
    2766:	82 95       	swap	r24
    2768:	8f 70       	andi	r24, 0x0F	; 15
    276a:	89 27       	eor	r24, r25
    276c:	9f 70       	andi	r25, 0x0F	; 15
    276e:	89 27       	eor	r24, r25
    2770:	80 5d       	subi	r24, 0xD0	; 208
    2772:	88 83       	st	Y, r24
		break;
    2774:	a7 c0       	rjmp	.+334    	; 0x28c4 <numPrinter+0x386>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
    2776:	ec 01       	movw	r28, r24
    2778:	c6 0f       	add	r28, r22
    277a:	d1 1d       	adc	r29, r1
    277c:	ad ec       	ldi	r26, 0xCD	; 205
    277e:	bc ec       	ldi	r27, 0xCC	; 204
    2780:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    2784:	96 95       	lsr	r25
    2786:	87 95       	ror	r24
    2788:	96 95       	lsr	r25
    278a:	87 95       	ror	r24
    278c:	96 95       	lsr	r25
    278e:	87 95       	ror	r24
    2790:	9c 01       	movw	r18, r24
    2792:	22 0f       	add	r18, r18
    2794:	33 1f       	adc	r19, r19
    2796:	88 0f       	add	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	82 0f       	add	r24, r18
    27a4:	93 1f       	adc	r25, r19
    27a6:	9f 01       	movw	r18, r30
    27a8:	28 1b       	sub	r18, r24
    27aa:	39 0b       	sbc	r19, r25
    27ac:	c9 01       	movw	r24, r18
    27ae:	80 5d       	subi	r24, 0xD0	; 208
    27b0:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
    27b2:	9f 01       	movw	r18, r30
    27b4:	36 95       	lsr	r19
    27b6:	27 95       	ror	r18
    27b8:	36 95       	lsr	r19
    27ba:	27 95       	ror	r18
    27bc:	ab e7       	ldi	r26, 0x7B	; 123
    27be:	b4 e1       	ldi	r27, 0x14	; 20
    27c0:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    27c4:	96 95       	lsr	r25
    27c6:	87 95       	ror	r24
    27c8:	44 e6       	ldi	r20, 0x64	; 100
    27ca:	48 9f       	mul	r20, r24
    27cc:	90 01       	movw	r18, r0
    27ce:	49 9f       	mul	r20, r25
    27d0:	30 0d       	add	r19, r0
    27d2:	11 24       	eor	r1, r1
    27d4:	cf 01       	movw	r24, r30
    27d6:	82 1b       	sub	r24, r18
    27d8:	93 0b       	sbc	r25, r19
    27da:	9c 01       	movw	r18, r24
    27dc:	ad ec       	ldi	r26, 0xCD	; 205
    27de:	bc ec       	ldi	r27, 0xCC	; 204
    27e0:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    27e4:	96 95       	lsr	r25
    27e6:	87 95       	ror	r24
    27e8:	96 95       	lsr	r25
    27ea:	87 95       	ror	r24
    27ec:	96 95       	lsr	r25
    27ee:	87 95       	ror	r24
    27f0:	80 5d       	subi	r24, 0xD0	; 208
    27f2:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
    27f4:	9f 01       	movw	r18, r30
    27f6:	36 95       	lsr	r19
    27f8:	27 95       	ror	r18
    27fa:	36 95       	lsr	r19
    27fc:	27 95       	ror	r18
    27fe:	36 95       	lsr	r19
    2800:	27 95       	ror	r18
    2802:	a5 ec       	ldi	r26, 0xC5	; 197
    2804:	b0 e2       	ldi	r27, 0x20	; 32
    2806:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    280a:	92 95       	swap	r25
    280c:	82 95       	swap	r24
    280e:	8f 70       	andi	r24, 0x0F	; 15
    2810:	89 27       	eor	r24, r25
    2812:	9f 70       	andi	r25, 0x0F	; 15
    2814:	89 27       	eor	r24, r25
    2816:	48 ee       	ldi	r20, 0xE8	; 232
    2818:	53 e0       	ldi	r21, 0x03	; 3
    281a:	84 9f       	mul	r24, r20
    281c:	90 01       	movw	r18, r0
    281e:	85 9f       	mul	r24, r21
    2820:	30 0d       	add	r19, r0
    2822:	94 9f       	mul	r25, r20
    2824:	30 0d       	add	r19, r0
    2826:	11 24       	eor	r1, r1
    2828:	cf 01       	movw	r24, r30
    282a:	82 1b       	sub	r24, r18
    282c:	93 0b       	sbc	r25, r19
    282e:	9c 01       	movw	r18, r24
    2830:	36 95       	lsr	r19
    2832:	27 95       	ror	r18
    2834:	36 95       	lsr	r19
    2836:	27 95       	ror	r18
    2838:	ab e7       	ldi	r26, 0x7B	; 123
    283a:	b4 e1       	ldi	r27, 0x14	; 20
    283c:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    2840:	96 95       	lsr	r25
    2842:	87 95       	ror	r24
    2844:	80 5d       	subi	r24, 0xD0	; 208
    2846:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
    2848:	af 01       	movw	r20, r30
    284a:	52 95       	swap	r21
    284c:	42 95       	swap	r20
    284e:	4f 70       	andi	r20, 0x0F	; 15
    2850:	45 27       	eor	r20, r21
    2852:	5f 70       	andi	r21, 0x0F	; 15
    2854:	45 27       	eor	r20, r21
    2856:	9a 01       	movw	r18, r20
    2858:	a7 e4       	ldi	r26, 0x47	; 71
    285a:	b3 e0       	ldi	r27, 0x03	; 3
    285c:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    2860:	96 95       	lsr	r25
    2862:	87 95       	ror	r24
    2864:	96 95       	lsr	r25
    2866:	87 95       	ror	r24
    2868:	96 95       	lsr	r25
    286a:	87 95       	ror	r24
    286c:	60 e1       	ldi	r22, 0x10	; 16
    286e:	77 e2       	ldi	r23, 0x27	; 39
    2870:	86 9f       	mul	r24, r22
    2872:	90 01       	movw	r18, r0
    2874:	87 9f       	mul	r24, r23
    2876:	30 0d       	add	r19, r0
    2878:	96 9f       	mul	r25, r22
    287a:	30 0d       	add	r19, r0
    287c:	11 24       	eor	r1, r1
    287e:	cf 01       	movw	r24, r30
    2880:	82 1b       	sub	r24, r18
    2882:	93 0b       	sbc	r25, r19
    2884:	9c 01       	movw	r18, r24
    2886:	36 95       	lsr	r19
    2888:	27 95       	ror	r18
    288a:	36 95       	lsr	r19
    288c:	27 95       	ror	r18
    288e:	36 95       	lsr	r19
    2890:	27 95       	ror	r18
    2892:	a5 ec       	ldi	r26, 0xC5	; 197
    2894:	b0 e2       	ldi	r27, 0x20	; 32
    2896:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    289a:	92 95       	swap	r25
    289c:	82 95       	swap	r24
    289e:	8f 70       	andi	r24, 0x0F	; 15
    28a0:	89 27       	eor	r24, r25
    28a2:	9f 70       	andi	r25, 0x0F	; 15
    28a4:	89 27       	eor	r24, r25
    28a6:	80 5d       	subi	r24, 0xD0	; 208
    28a8:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
    28aa:	9a 01       	movw	r18, r20
    28ac:	a7 e4       	ldi	r26, 0x47	; 71
    28ae:	b3 e0       	ldi	r27, 0x03	; 3
    28b0:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__umulhisi3>
    28b4:	96 95       	lsr	r25
    28b6:	87 95       	ror	r24
    28b8:	96 95       	lsr	r25
    28ba:	87 95       	ror	r24
    28bc:	96 95       	lsr	r25
    28be:	87 95       	ror	r24
    28c0:	80 5d       	subi	r24, 0xD0	; 208
    28c2:	88 83       	st	Y, r24
		break;

	}


}
    28c4:	df 91       	pop	r29
    28c6:	cf 91       	pop	r28
    28c8:	08 95       	ret

000028ca <midiNotePrinter>:

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
    28ca:	9c 01       	movw	r18, r24
    28cc:	a6 2f       	mov	r26, r22
	char printSharp = 0;
	uint8_t valueSwitch = 0;
	//numbers will always go from B to C, and have 12 distinct values. 
	//we can get our number from this with division. 
	//midi note C0 starts at 12. So, we'll need to do some math there. 
	printNumber = (noteNumber/12)+47; 
    28ce:	eb ea       	ldi	r30, 0xAB	; 171
    28d0:	4e 9f       	mul	r20, r30
    28d2:	e1 2d       	mov	r30, r1
    28d4:	11 24       	eor	r1, r1
    28d6:	e6 95       	lsr	r30
    28d8:	e6 95       	lsr	r30
    28da:	e6 95       	lsr	r30
    28dc:	9f e2       	ldi	r25, 0x2F	; 47
    28de:	9e 0f       	add	r25, r30
	
	//theres a weird wrap around with note numbers here. Since there isn't really an easy math patern we can take advantage of. 
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
    28e0:	8e 2f       	mov	r24, r30
    28e2:	88 0f       	add	r24, r24
    28e4:	e8 0f       	add	r30, r24
    28e6:	ee 0f       	add	r30, r30
    28e8:	ee 0f       	add	r30, r30
    28ea:	4e 1b       	sub	r20, r30
    28ec:	50 e0       	ldi	r21, 0x00	; 0
    28ee:	4c 30       	cpi	r20, 0x0C	; 12
    28f0:	51 05       	cpc	r21, r1
    28f2:	58 f5       	brcc	.+86     	; 0x294a <midiNotePrinter+0x80>
    28f4:	fa 01       	movw	r30, r20
    28f6:	88 27       	eor	r24, r24
    28f8:	e8 51       	subi	r30, 0x18	; 24
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	8f 4f       	sbci	r24, 0xFF	; 255
    28fe:	0c 94 f1 1d 	jmp	0x3be2	; 0x3be2 <__tablejump2__>
	{
		
		case 0:
		printLetter = 'C';
		printSharp = ' ';
    2902:	80 e2       	ldi	r24, 0x20	; 32
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
	{
		
		case 0:
		printLetter = 'C';
    2904:	43 e4       	ldi	r20, 0x43	; 67
    2906:	23 c0       	rjmp	.+70     	; 0x294e <midiNotePrinter+0x84>
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
		printSharp = '#';
    2908:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'C';
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
    290a:	43 e4       	ldi	r20, 0x43	; 67
		printSharp = '#';
		break;
    290c:	20 c0       	rjmp	.+64     	; 0x294e <midiNotePrinter+0x84>
		
		case 2:
		printLetter = 'D';
		printSharp = ' ';
    290e:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'C';
		printSharp = '#';
		break;
		
		case 2:
		printLetter = 'D';
    2910:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = ' ';
		break;
    2912:	1d c0       	rjmp	.+58     	; 0x294e <midiNotePrinter+0x84>
		
		case 3:
		printLetter = 'D';
		printSharp = '#';
    2914:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'D';
		printSharp = ' ';
		break;
		
		case 3:
		printLetter = 'D';
    2916:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = '#';
		break;
    2918:	1a c0       	rjmp	.+52     	; 0x294e <midiNotePrinter+0x84>
		
		case 4:
		printLetter = 'E';
		printSharp = ' ';
    291a:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'D';
		printSharp = '#';
		break;
		
		case 4:
		printLetter = 'E';
    291c:	45 e4       	ldi	r20, 0x45	; 69
		printSharp = ' ';
		break;
    291e:	17 c0       	rjmp	.+46     	; 0x294e <midiNotePrinter+0x84>
		
		case 5:
		printLetter = 'F';
		printSharp = ' ';
    2920:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'E';
		printSharp = ' ';
		break;
		
		case 5:
		printLetter = 'F';
    2922:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = ' ';
		break;
    2924:	14 c0       	rjmp	.+40     	; 0x294e <midiNotePrinter+0x84>
		
		case 6:
		printLetter = 'F';
		printSharp = '#';
    2926:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'F';
		printSharp = ' ';
		break;
		
		case 6:
		printLetter = 'F';
    2928:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = '#';
		break;
    292a:	11 c0       	rjmp	.+34     	; 0x294e <midiNotePrinter+0x84>
		
		case 7:
		printLetter = 'G';
		printSharp = ' ';
    292c:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'F';
		printSharp = '#';
		break;
		
		case 7:
		printLetter = 'G';
    292e:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = ' ';
		break;
    2930:	0e c0       	rjmp	.+28     	; 0x294e <midiNotePrinter+0x84>
		
		case 8:
		printLetter = 'G';
		printSharp = '#';
    2932:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'G';
		printSharp = ' ';
		break;
		
		case 8:
		printLetter = 'G';
    2934:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = '#';
		break;
    2936:	0b c0       	rjmp	.+22     	; 0x294e <midiNotePrinter+0x84>
		
		case 9:
		printLetter = 'A';
		printSharp = ' ';
    2938:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'G';
		printSharp = '#';
		break;
		
		case 9:
		printLetter = 'A';
    293a:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = ' ';
		break;
    293c:	08 c0       	rjmp	.+16     	; 0x294e <midiNotePrinter+0x84>
		
		case 10:
		printLetter = 'A';
		printSharp = '#';
    293e:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'A';
		printSharp = ' ';
		break;
		
		case 10:
		printLetter = 'A';
    2940:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = '#';
		break;
    2942:	05 c0       	rjmp	.+10     	; 0x294e <midiNotePrinter+0x84>
		
		case 11:
		printLetter = 'B';
		printSharp = ' ';
    2944:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'A';
		printSharp = '#';
		break;
		
		case 11:
		printLetter = 'B';
    2946:	42 e4       	ldi	r20, 0x42	; 66
		printSharp = ' ';
		break;
    2948:	02 c0       	rjmp	.+4      	; 0x294e <midiNotePrinter+0x84>
void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
	char printNumber = 0;
	char printSharp = 0;
    294a:	80 e0       	ldi	r24, 0x00	; 0
}

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
    294c:	40 e0       	ldi	r20, 0x00	; 0
		printLetter = 'B';
		printSharp = ' ';
		break;
		
	}
	charArray[startingPosition] = printLetter;
    294e:	f9 01       	movw	r30, r18
    2950:	ea 0f       	add	r30, r26
    2952:	f1 1d       	adc	r31, r1
    2954:	40 83       	st	Z, r20
	charArray[startingPosition+1]= printSharp;
    2956:	81 83       	std	Z+1, r24	; 0x01
	charArray[startingPosition+2]= printNumber;
    2958:	92 83       	std	Z+2, r25	; 0x02
    295a:	08 95       	ret

0000295c <initSequencer>:
//if a real-time sequencer is implemented, they will end up being the same thing.

void initSequencer()
{
	//here we need to setup our timer interrupt
	TCCR0A = (1 << WGM01); //set to clear on correct compare
    295c:	82 e0       	ldi	r24, 0x02	; 2
    295e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00); // set pre-scaler to 64
    2960:	93 e0       	ldi	r25, 0x03	; 3
    2962:	95 bd       	out	0x25, r25	; 37
	OCR0A = 25; // every 25 ticks will be 0.0001 seconds at this prescale.
    2964:	99 e1       	ldi	r25, 0x19	; 25
    2966:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1 << OCIE0A); // Enable OCR0A compare interrupt
    2968:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    296c:	08 95       	ret

0000296e <__vector_21>:
	//interrupts should now be good to go.
}

ISR(TIMER0_COMPA_vect)
{
    296e:	1f 92       	push	r1
    2970:	0f 92       	push	r0
    2972:	0f b6       	in	r0, 0x3f	; 63
    2974:	0f 92       	push	r0
    2976:	11 24       	eor	r1, r1
    2978:	8f 93       	push	r24
    297a:	9f 93       	push	r25
	clockCounter++;
    297c:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <clockCounter>
    2980:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <clockCounter+0x1>
    2984:	01 96       	adiw	r24, 0x01	; 1
    2986:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <clockCounter+0x1>
    298a:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <clockCounter>
	//we don't want to do anything else here.
}
    298e:	9f 91       	pop	r25
    2990:	8f 91       	pop	r24
    2992:	0f 90       	pop	r0
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	0f 90       	pop	r0
    2998:	1f 90       	pop	r1
    299a:	18 95       	reti

0000299c <updateSequencer>:

void updateSequencer(Pattern sequencerPattern, Globals currentGlobals)
{
    299c:	cf 92       	push	r12
    299e:	df 92       	push	r13
    29a0:	ef 92       	push	r14
    29a2:	ff 92       	push	r15
    29a4:	0f 93       	push	r16
    29a6:	1f 93       	push	r17
    29a8:	cf 93       	push	r28
    29aa:	df 93       	push	r29
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
	uint16_t BPMvar = 150000/(sequencerPattern.patternBPM);

	if(clockCounter>=BPMvar && currentGlobals.playState) //if playstate is on, play next note in sequence.
    29b0:	cc 52       	subi	r28, 0x2C	; 44
    29b2:	df 4f       	sbci	r29, 0xFF	; 255
    29b4:	28 81       	ld	r18, Y
    29b6:	39 81       	ldd	r19, Y+1	; 0x01
    29b8:	c4 5d       	subi	r28, 0xD4	; 212
    29ba:	d0 40       	sbci	r29, 0x00	; 0
    29bc:	40 e0       	ldi	r20, 0x00	; 0
    29be:	50 e0       	ldi	r21, 0x00	; 0
    29c0:	60 ef       	ldi	r22, 0xF0	; 240
    29c2:	79 e4       	ldi	r23, 0x49	; 73
    29c4:	82 e0       	ldi	r24, 0x02	; 2
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <__divmodsi4>
    29cc:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <clockCounter>
    29d0:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <clockCounter+0x1>
    29d4:	82 17       	cp	r24, r18
    29d6:	93 07       	cpc	r25, r19
    29d8:	08 f4       	brcc	.+2      	; 0x29dc <updateSequencer+0x40>
    29da:	4e c0       	rjmp	.+156    	; 0x2a78 <updateSequencer+0xdc>
    29dc:	c2 57       	subi	r28, 0x72	; 114
    29de:	de 4f       	sbci	r29, 0xFE	; 254
    29e0:	88 81       	ld	r24, Y
    29e2:	ce 58       	subi	r28, 0x8E	; 142
    29e4:	d1 40       	sbci	r29, 0x01	; 1
    29e6:	88 23       	and	r24, r24
    29e8:	09 f4       	brne	.+2      	; 0x29ec <updateSequencer+0x50>
    29ea:	40 c0       	rjmp	.+128    	; 0x2a6c <updateSequencer+0xd0>
	{
		//this will be where we play samples
		clockCounter=0; //clear before the loop, so we can continue counting while the sequencer plays notes.
    29ec:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <clockCounter+0x1>
    29f0:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <clockCounter>
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
    29f4:	e0 91 97 03 	lds	r30, 0x0397	; 0x800397 <currentPlayStep>
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	ee 0f       	add	r30, r30
    29fc:	ff 1f       	adc	r31, r31
    29fe:	8c e0       	ldi	r24, 0x0C	; 12
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	8c 0f       	add	r24, r28
    2a04:	9d 1f       	adc	r25, r29
    2a06:	e8 0f       	add	r30, r24
    2a08:	f9 1f       	adc	r31, r25
    2a0a:	e5 50       	subi	r30, 0x05	; 5
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	e0 80       	ld	r14, Z
    2a10:	f1 80       	ldd	r15, Z+1	; 0x01
    2a12:	8e 01       	movw	r16, r28
    2a14:	0c 56       	subi	r16, 0x6C	; 108
    2a16:	1f 4f       	sbci	r17, 0xFF	; 255
    2a18:	6e 01       	movw	r12, r28
    2a1a:	94 ea       	ldi	r25, 0xA4	; 164
    2a1c:	c9 0e       	add	r12, r25
    2a1e:	d1 1c       	adc	r13, r1
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
		{//we're going to loop through all of the possible tracks, and trigger them
			if((parseStep&1)==1)
    2a20:	e0 fe       	sbrs	r14, 0
    2a22:	09 c0       	rjmp	.+18     	; 0x2a36 <updateSequencer+0x9a>
			{
				trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
    2a24:	f8 01       	movw	r30, r16
    2a26:	20 81       	ld	r18, Z
    2a28:	e0 57       	subi	r30, 0x70	; 112
    2a2a:	f1 09       	sbc	r31, r1
    2a2c:	40 81       	ld	r20, Z
    2a2e:	f8 01       	movw	r30, r16
    2a30:	60 89       	ldd	r22, Z+16	; 0x10
    2a32:	80 a1       	ldd	r24, Z+32	; 0x20
    2a34:	b7 d0       	rcall	.+366    	; 0x2ba4 <trackControl>
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
    2a36:	f6 94       	lsr	r15
    2a38:	e7 94       	ror	r14
    2a3a:	0f 5f       	subi	r16, 0xFF	; 255
    2a3c:	1f 4f       	sbci	r17, 0xFF	; 255
	if(clockCounter>=BPMvar && currentGlobals.playState) //if playstate is on, play next note in sequence.
	{
		//this will be where we play samples
		clockCounter=0; //clear before the loop, so we can continue counting while the sequencer plays notes.
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
    2a3e:	0c 15       	cp	r16, r12
    2a40:	1d 05       	cpc	r17, r13
    2a42:	71 f7       	brne	.-36     	; 0x2a20 <updateSequencer+0x84>
			{
				trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
		}
		currentPlayStep = currentPlayStep+1;
    2a44:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <currentPlayStep>
    2a48:	8f 5f       	subi	r24, 0xFF	; 255
    2a4a:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <currentPlayStep>
		if(currentPlayStep>(sequencerPattern.numSteps-1))
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	ca 52       	subi	r28, 0x2A	; 42
    2a52:	df 4f       	sbci	r29, 0xFF	; 255
    2a54:	28 81       	ld	r18, Y
    2a56:	c6 5d       	subi	r28, 0xD6	; 214
    2a58:	d0 40       	sbci	r29, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	21 50       	subi	r18, 0x01	; 1
    2a5e:	31 09       	sbc	r19, r1
    2a60:	28 17       	cp	r18, r24
    2a62:	39 07       	cpc	r19, r25
    2a64:	4c f4       	brge	.+18     	; 0x2a78 <updateSequencer+0xdc>
		{
			currentPlayStep=0; // don't play more steps than are in the sequence.
    2a66:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <currentPlayStep>
    2a6a:	06 c0       	rjmp	.+12     	; 0x2a78 <updateSequencer+0xdc>
		}

	}else if(clockCounter>=BPMvar && !currentGlobals.playState)
	{ currentPlayStep=0;
    2a6c:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <currentPlayStep>
		clockCounter = 0;
    2a70:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <clockCounter+0x1>
    2a74:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <clockCounter>
	}

}
    2a78:	df 91       	pop	r29
    2a7a:	cf 91       	pop	r28
    2a7c:	1f 91       	pop	r17
    2a7e:	0f 91       	pop	r16
    2a80:	ff 90       	pop	r15
    2a82:	ef 90       	pop	r14
    2a84:	df 90       	pop	r13
    2a86:	cf 90       	pop	r12
    2a88:	08 95       	ret

00002a8a <__vector_27>:
char serial0Buffer[TX_BUFFER_SIZE];
int serialReadPos = 0;
int serialWritePos = 0;

ISR (USART0_TX_vect)
{
    2a8a:	1f 92       	push	r1
    2a8c:	0f 92       	push	r0
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	0f 92       	push	r0
    2a92:	11 24       	eor	r1, r1
    2a94:	0b b6       	in	r0, 0x3b	; 59
    2a96:	0f 92       	push	r0
    2a98:	2f 93       	push	r18
    2a9a:	3f 93       	push	r19
    2a9c:	8f 93       	push	r24
    2a9e:	9f 93       	push	r25
    2aa0:	ef 93       	push	r30
    2aa2:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
    2aa4:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <serialReadPos>
    2aa8:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <serialReadPos+0x1>
    2aac:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <serialWritePos>
    2ab0:	30 91 9b 03 	lds	r19, 0x039B	; 0x80039b <serialWritePos+0x1>
    2ab4:	82 17       	cp	r24, r18
    2ab6:	93 07       	cpc	r25, r19
    2ab8:	c1 f0       	breq	.+48     	; 0x2aea <__vector_27+0x60>
	{
		UDR0 = serial0Buffer[serialReadPos];
    2aba:	fc 01       	movw	r30, r24
    2abc:	ec 52       	subi	r30, 0x2C	; 44
    2abe:	f6 4f       	sbci	r31, 0xF6	; 246
    2ac0:	80 81       	ld	r24, Z
    2ac2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
    2ac6:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <serialReadPos>
    2aca:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <serialReadPos+0x1>
    2ace:	01 96       	adiw	r24, 0x01	; 1

		if(serialReadPos >= TX_BUFFER_SIZE)
    2ad0:	80 38       	cpi	r24, 0x80	; 128
    2ad2:	21 e0       	ldi	r18, 0x01	; 1
    2ad4:	92 07       	cpc	r25, r18
    2ad6:	2c f4       	brge	.+10     	; 0x2ae2 <__vector_27+0x58>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
    2ad8:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <serialReadPos+0x1>
    2adc:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <serialReadPos>
    2ae0:	04 c0       	rjmp	.+8      	; 0x2aea <__vector_27+0x60>

		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
    2ae2:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <serialReadPos+0x1>
    2ae6:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <serialReadPos>
		}
	}
}
    2aea:	ff 91       	pop	r31
    2aec:	ef 91       	pop	r30
    2aee:	9f 91       	pop	r25
    2af0:	8f 91       	pop	r24
    2af2:	3f 91       	pop	r19
    2af4:	2f 91       	pop	r18
    2af6:	0f 90       	pop	r0
    2af8:	0b be       	out	0x3b, r0	; 59
    2afa:	0f 90       	pop	r0
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	0f 90       	pop	r0
    2b00:	1f 90       	pop	r1
    2b02:	18 95       	reti

00002b04 <appendSerial0>:

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
    2b04:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <serialWritePos>
    2b08:	30 91 9b 03 	lds	r19, 0x039B	; 0x80039b <serialWritePos+0x1>
    2b0c:	f9 01       	movw	r30, r18
    2b0e:	ec 52       	subi	r30, 0x2C	; 44
    2b10:	f6 4f       	sbci	r31, 0xF6	; 246
    2b12:	80 83       	st	Z, r24
	serialWritePos++;
    2b14:	2f 5f       	subi	r18, 0xFF	; 255
    2b16:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    2b18:	20 38       	cpi	r18, 0x80	; 128
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	38 07       	cpc	r19, r24
    2b1e:	2c f4       	brge	.+10     	; 0x2b2a <appendSerial0+0x26>
}

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    2b20:	30 93 9b 03 	sts	0x039B, r19	; 0x80039b <serialWritePos+0x1>
    2b24:	20 93 9a 03 	sts	0x039A, r18	; 0x80039a <serialWritePos>
    2b28:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    2b2a:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <serialWritePos+0x1>
    2b2e:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <serialWritePos>
    2b32:	08 95       	ret

00002b34 <serialWrite0>:
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
    2b34:	0f 93       	push	r16
    2b36:	1f 93       	push	r17
    2b38:	cf 93       	push	r28
    2b3a:	df 93       	push	r29
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2b3c:	66 23       	and	r22, r22
    2b3e:	69 f0       	breq	.+26     	; 0x2b5a <serialWrite0+0x26>
    2b40:	ec 01       	movw	r28, r24
    2b42:	61 50       	subi	r22, 0x01	; 1
    2b44:	06 2f       	mov	r16, r22
    2b46:	10 e0       	ldi	r17, 0x00	; 0
    2b48:	0f 5f       	subi	r16, 0xFF	; 255
    2b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4c:	08 0f       	add	r16, r24
    2b4e:	19 1f       	adc	r17, r25
	{
		appendSerial0(c[i]);
    2b50:	89 91       	ld	r24, Y+
    2b52:	d8 df       	rcall	.-80     	; 0x2b04 <appendSerial0>
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2b54:	c0 17       	cp	r28, r16
    2b56:	d1 07       	cpc	r29, r17
    2b58:	d9 f7       	brne	.-10     	; 0x2b50 <serialWrite0+0x1c>
	{
		appendSerial0(c[i]);

	}

	if(UCSR0A & (1 << UDRE0))
    2b5a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2b5e:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    2b60:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    2b64:	df 91       	pop	r29
    2b66:	cf 91       	pop	r28
    2b68:	1f 91       	pop	r17
    2b6a:	0f 91       	pop	r16
    2b6c:	08 95       	ret

00002b6e <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    2b6e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    2b72:	80 e1       	ldi	r24, 0x10	; 16
    2b74:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>


UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    2b78:	88 e4       	ldi	r24, 0x48	; 72
    2b7a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    2b7e:	86 e0       	ldi	r24, 0x06	; 6
    2b80:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    2b84:	08 95       	ret

00002b86 <initEnvelopes>:
		//this should be fine for now though. 
			//set track volume
			setTrackVolume(currentPattern->trackSampleLSB[i], currentPattern->trackSampleMSB[i], currentPattern->trackMainVolumeLSB[i], currentPattern->trackMainVolumeMSB[i]);
	}
	
}
    2b86:	88 e0       	ldi	r24, 0x08	; 8
    2b88:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2b8c:	83 e0       	ldi	r24, 0x03	; 3
    2b8e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2b92:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    2b96:	8a ef       	ldi	r24, 0xFA	; 250
    2b98:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    2b9c:	82 e0       	ldi	r24, 0x02	; 2
    2b9e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2ba2:	08 95       	ret

00002ba4 <trackControl>:
    2ba4:	cf 93       	push	r28
    2ba6:	df 93       	push	r29
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	2a 97       	sbiw	r28, 0x0a	; 10
    2bae:	0f b6       	in	r0, 0x3f	; 63
    2bb0:	f8 94       	cli
    2bb2:	de bf       	out	0x3e, r29	; 62
    2bb4:	0f be       	out	0x3f, r0	; 63
    2bb6:	cd bf       	out	0x3d, r28	; 61
    2bb8:	90 ef       	ldi	r25, 0xF0	; 240
    2bba:	99 83       	std	Y+1, r25	; 0x01
    2bbc:	9a ea       	ldi	r25, 0xAA	; 170
    2bbe:	9a 83       	std	Y+2, r25	; 0x02
    2bc0:	9a e0       	ldi	r25, 0x0A	; 10
    2bc2:	9b 83       	std	Y+3, r25	; 0x03
    2bc4:	93 e0       	ldi	r25, 0x03	; 3
    2bc6:	9c 83       	std	Y+4, r25	; 0x04
    2bc8:	2d 83       	std	Y+5, r18	; 0x05
    2bca:	8e 83       	std	Y+6, r24	; 0x06
    2bcc:	6f 83       	std	Y+7, r22	; 0x07
    2bce:	48 87       	std	Y+8, r20	; 0x08
    2bd0:	19 86       	std	Y+9, r1	; 0x09
    2bd2:	85 e5       	ldi	r24, 0x55	; 85
    2bd4:	8a 87       	std	Y+10, r24	; 0x0a
    2bd6:	6a e0       	ldi	r22, 0x0A	; 10
    2bd8:	ce 01       	movw	r24, r28
    2bda:	01 96       	adiw	r24, 0x01	; 1
    2bdc:	ab df       	rcall	.-170    	; 0x2b34 <serialWrite0>
    2bde:	2a 96       	adiw	r28, 0x0a	; 10
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	08 95       	ret

00002bf0 <setOutputVolume>:
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	28 97       	sbiw	r28, 0x08	; 8
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	90 ef       	ldi	r25, 0xF0	; 240
    2c06:	99 83       	std	Y+1, r25	; 0x01
    2c08:	9a ea       	ldi	r25, 0xAA	; 170
    2c0a:	9a 83       	std	Y+2, r25	; 0x02
    2c0c:	98 e0       	ldi	r25, 0x08	; 8
    2c0e:	9b 83       	std	Y+3, r25	; 0x03
    2c10:	95 e0       	ldi	r25, 0x05	; 5
    2c12:	9c 83       	std	Y+4, r25	; 0x04
    2c14:	4d 83       	std	Y+5, r20	; 0x05
    2c16:	8e 83       	std	Y+6, r24	; 0x06
    2c18:	6f 83       	std	Y+7, r22	; 0x07
    2c1a:	85 e5       	ldi	r24, 0x55	; 85
    2c1c:	88 87       	std	Y+8, r24	; 0x08
    2c1e:	68 e0       	ldi	r22, 0x08	; 8
    2c20:	ce 01       	movw	r24, r28
    2c22:	01 96       	adiw	r24, 0x01	; 1
    2c24:	87 df       	rcall	.-242    	; 0x2b34 <serialWrite0>
    2c26:	28 96       	adiw	r28, 0x08	; 8
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	08 95       	ret

00002c38 <setTrackVolume>:
    2c38:	cf 93       	push	r28
    2c3a:	df 93       	push	r29
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
    2c40:	29 97       	sbiw	r28, 0x09	; 9
    2c42:	0f b6       	in	r0, 0x3f	; 63
    2c44:	f8 94       	cli
    2c46:	de bf       	out	0x3e, r29	; 62
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	cd bf       	out	0x3d, r28	; 61
    2c4c:	90 ef       	ldi	r25, 0xF0	; 240
    2c4e:	99 83       	std	Y+1, r25	; 0x01
    2c50:	9a ea       	ldi	r25, 0xAA	; 170
    2c52:	9a 83       	std	Y+2, r25	; 0x02
    2c54:	99 e0       	ldi	r25, 0x09	; 9
    2c56:	9b 83       	std	Y+3, r25	; 0x03
    2c58:	98 e0       	ldi	r25, 0x08	; 8
    2c5a:	9c 83       	std	Y+4, r25	; 0x04
    2c5c:	8d 83       	std	Y+5, r24	; 0x05
    2c5e:	6e 83       	std	Y+6, r22	; 0x06
    2c60:	4f 83       	std	Y+7, r20	; 0x07
    2c62:	28 87       	std	Y+8, r18	; 0x08
    2c64:	85 e5       	ldi	r24, 0x55	; 85
    2c66:	89 87       	std	Y+9, r24	; 0x09
    2c68:	69 e0       	ldi	r22, 0x09	; 9
    2c6a:	ce 01       	movw	r24, r28
    2c6c:	01 96       	adiw	r24, 0x01	; 1
    2c6e:	62 df       	rcall	.-316    	; 0x2b34 <serialWrite0>
    2c70:	29 96       	adiw	r28, 0x09	; 9
    2c72:	0f b6       	in	r0, 0x3f	; 63
    2c74:	f8 94       	cli
    2c76:	de bf       	out	0x3e, r29	; 62
    2c78:	0f be       	out	0x3f, r0	; 63
    2c7a:	cd bf       	out	0x3d, r28	; 61
    2c7c:	df 91       	pop	r29
    2c7e:	cf 91       	pop	r28
    2c80:	08 95       	ret

00002c82 <setTrackFade>:
    2c82:	cf 92       	push	r12
    2c84:	ef 92       	push	r14
    2c86:	0f 93       	push	r16
    2c88:	cf 93       	push	r28
    2c8a:	df 93       	push	r29
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
    2c90:	2c 97       	sbiw	r28, 0x0c	; 12
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	90 ef       	ldi	r25, 0xF0	; 240
    2c9e:	99 83       	std	Y+1, r25	; 0x01
    2ca0:	9a ea       	ldi	r25, 0xAA	; 170
    2ca2:	9a 83       	std	Y+2, r25	; 0x02
    2ca4:	9c e0       	ldi	r25, 0x0C	; 12
    2ca6:	9b 83       	std	Y+3, r25	; 0x03
    2ca8:	9a e0       	ldi	r25, 0x0A	; 10
    2caa:	9c 83       	std	Y+4, r25	; 0x04
    2cac:	8d 83       	std	Y+5, r24	; 0x05
    2cae:	6e 83       	std	Y+6, r22	; 0x06
    2cb0:	4f 83       	std	Y+7, r20	; 0x07
    2cb2:	28 87       	std	Y+8, r18	; 0x08
    2cb4:	09 87       	std	Y+9, r16	; 0x09
    2cb6:	ea 86       	std	Y+10, r14	; 0x0a
    2cb8:	cb 86       	std	Y+11, r12	; 0x0b
    2cba:	85 e5       	ldi	r24, 0x55	; 85
    2cbc:	8c 87       	std	Y+12, r24	; 0x0c
    2cbe:	6c e0       	ldi	r22, 0x0C	; 12
    2cc0:	ce 01       	movw	r24, r28
    2cc2:	01 96       	adiw	r24, 0x01	; 1
    2cc4:	37 df       	rcall	.-402    	; 0x2b34 <serialWrite0>
    2cc6:	2c 96       	adiw	r28, 0x0c	; 12
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	0f 91       	pop	r16
    2cd8:	ef 90       	pop	r14
    2cda:	cf 90       	pop	r12
    2cdc:	08 95       	ret

00002cde <outputSampleRate>:
    2cde:	cf 93       	push	r28
    2ce0:	df 93       	push	r29
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
    2ce6:	28 97       	sbiw	r28, 0x08	; 8
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	f8 94       	cli
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	cd bf       	out	0x3d, r28	; 61
    2cf2:	90 ef       	ldi	r25, 0xF0	; 240
    2cf4:	99 83       	std	Y+1, r25	; 0x01
    2cf6:	9a ea       	ldi	r25, 0xAA	; 170
    2cf8:	9a 83       	std	Y+2, r25	; 0x02
    2cfa:	98 e0       	ldi	r25, 0x08	; 8
    2cfc:	9b 83       	std	Y+3, r25	; 0x03
    2cfe:	9c e0       	ldi	r25, 0x0C	; 12
    2d00:	9c 83       	std	Y+4, r25	; 0x04
    2d02:	8d 83       	std	Y+5, r24	; 0x05
    2d04:	6e 83       	std	Y+6, r22	; 0x06
    2d06:	4f 83       	std	Y+7, r20	; 0x07
    2d08:	85 e5       	ldi	r24, 0x55	; 85
    2d0a:	88 87       	std	Y+8, r24	; 0x08
    2d0c:	68 e0       	ldi	r22, 0x08	; 8
    2d0e:	ce 01       	movw	r24, r28
    2d10:	01 96       	adiw	r24, 0x01	; 1
    2d12:	10 df       	rcall	.-480    	; 0x2b34 <serialWrite0>
    2d14:	28 96       	adiw	r28, 0x08	; 8
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	df 91       	pop	r29
    2d22:	cf 91       	pop	r28
    2d24:	08 95       	ret

00002d26 <playTrack>:
    2d26:	2f 92       	push	r2
    2d28:	3f 92       	push	r3
    2d2a:	4f 92       	push	r4
    2d2c:	5f 92       	push	r5
    2d2e:	6f 92       	push	r6
    2d30:	7f 92       	push	r7
    2d32:	8f 92       	push	r8
    2d34:	9f 92       	push	r9
    2d36:	af 92       	push	r10
    2d38:	bf 92       	push	r11
    2d3a:	cf 92       	push	r12
    2d3c:	ef 92       	push	r14
    2d3e:	0f 93       	push	r16
    2d40:	1f 93       	push	r17
    2d42:	cf 93       	push	r28
    2d44:	df 93       	push	r29
    2d46:	3b 01       	movw	r6, r22
    2d48:	14 2f       	mov	r17, r20
    2d4a:	84 2e       	mov	r8, r20
    2d4c:	91 2c       	mov	r9, r1
    2d4e:	9c 01       	movw	r18, r24
    2d50:	28 0d       	add	r18, r8
    2d52:	39 1d       	adc	r19, r9
    2d54:	f9 01       	movw	r30, r18
    2d56:	e5 53       	subi	r30, 0x35	; 53
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	a0 80       	ld	r10, Z
    2d5c:	b1 2c       	mov	r11, r1
    2d5e:	ba 2c       	mov	r11, r10
    2d60:	aa 24       	eor	r10, r10
    2d62:	70 96       	adiw	r30, 0x10	; 16
    2d64:	40 81       	ld	r20, Z
    2d66:	a4 2a       	or	r10, r20
    2d68:	70 96       	adiw	r30, 0x10	; 16
    2d6a:	20 81       	ld	r18, Z
    2d6c:	21 30       	cpi	r18, 0x01	; 1
    2d6e:	09 f4       	brne	.+2      	; 0x2d72 <playTrack+0x4c>
    2d70:	54 c0       	rjmp	.+168    	; 0x2e1a <playTrack+0xf4>
    2d72:	38 f0       	brcs	.+14     	; 0x2d82 <playTrack+0x5c>
    2d74:	22 30       	cpi	r18, 0x02	; 2
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <playTrack+0x54>
    2d78:	8b c0       	rjmp	.+278    	; 0x2e90 <playTrack+0x16a>
    2d7a:	23 30       	cpi	r18, 0x03	; 3
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <playTrack+0x5a>
    2d7e:	ae c0       	rjmp	.+348    	; 0x2edc <playTrack+0x1b6>
    2d80:	c1 c0       	rjmp	.+386    	; 0x2f04 <playTrack+0x1de>
    2d82:	ec 01       	movw	r28, r24
    2d84:	c8 0d       	add	r28, r8
    2d86:	d9 1d       	adc	r29, r9
    2d88:	fe 01       	movw	r30, r28
    2d8a:	e8 57       	subi	r30, 0x78	; 120
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	2e 01       	movw	r4, r28
    2d90:	28 e9       	ldi	r18, 0x98	; 152
    2d92:	42 0e       	add	r4, r18
    2d94:	51 1c       	adc	r5, r1
    2d96:	1e 01       	movw	r2, r28
    2d98:	88 ea       	ldi	r24, 0xA8	; 168
    2d9a:	28 0e       	add	r2, r24
    2d9c:	31 1c       	adc	r3, r1
    2d9e:	20 81       	ld	r18, Z
    2da0:	48 8d       	ldd	r20, Y+24	; 0x18
    2da2:	f2 01       	movw	r30, r4
    2da4:	60 81       	ld	r22, Z
    2da6:	f1 01       	movw	r30, r2
    2da8:	80 81       	ld	r24, Z
    2daa:	fc de       	rcall	.-520    	; 0x2ba4 <trackControl>
    2dac:	de 01       	movw	r26, r28
    2dae:	a8 5b       	subi	r26, 0xB8	; 184
    2db0:	bf 4f       	sbci	r27, 0xFF	; 255
    2db2:	fe 01       	movw	r30, r28
    2db4:	e8 5a       	subi	r30, 0xA8	; 168
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	c1 2c       	mov	r12, r1
    2dba:	ec 90       	ld	r14, X
    2dbc:	00 81       	ld	r16, Z
    2dbe:	28 a5       	ldd	r18, Y+40	; 0x28
    2dc0:	48 ad       	ldd	r20, Y+56	; 0x38
    2dc2:	f2 01       	movw	r30, r4
    2dc4:	60 81       	ld	r22, Z
    2dc6:	f1 01       	movw	r30, r2
    2dc8:	80 81       	ld	r24, Z
    2dca:	5b df       	rcall	.-330    	; 0x2c82 <setTrackFade>
    2dcc:	f3 01       	movw	r30, r6
    2dce:	eb 55       	subi	r30, 0x5B	; 91
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	02 c0       	rjmp	.+4      	; 0x2ddc <playTrack+0xb6>
    2dd8:	88 0f       	add	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	1a 95       	dec	r17
    2dde:	e2 f7       	brpl	.-8      	; 0x2dd8 <playTrack+0xb2>
    2de0:	20 81       	ld	r18, Z
    2de2:	31 81       	ldd	r19, Z+1	; 0x01
    2de4:	82 2b       	or	r24, r18
    2de6:	93 2b       	or	r25, r19
    2de8:	91 83       	std	Z+1, r25	; 0x01
    2dea:	80 83       	st	Z, r24
    2dec:	e4 01       	movw	r28, r8
    2dee:	cc 0f       	add	r28, r28
    2df0:	dd 1f       	adc	r29, r29
    2df2:	cc 0f       	add	r28, r28
    2df4:	dd 1f       	adc	r29, r29
    2df6:	c6 0d       	add	r28, r6
    2df8:	d7 1d       	adc	r29, r7
    2dfa:	c9 55       	subi	r28, 0x59	; 89
    2dfc:	df 4f       	sbci	r29, 0xFF	; 255
    2dfe:	34 97       	sbiw	r30, 0x04	; 4
    2e00:	80 81       	ld	r24, Z
    2e02:	91 81       	ldd	r25, Z+1	; 0x01
    2e04:	a2 81       	ldd	r26, Z+2	; 0x02
    2e06:	b3 81       	ldd	r27, Z+3	; 0x03
    2e08:	8a 0d       	add	r24, r10
    2e0a:	9b 1d       	adc	r25, r11
    2e0c:	a1 1d       	adc	r26, r1
    2e0e:	b1 1d       	adc	r27, r1
    2e10:	88 83       	st	Y, r24
    2e12:	99 83       	std	Y+1, r25	; 0x01
    2e14:	aa 83       	std	Y+2, r26	; 0x02
    2e16:	bb 83       	std	Y+3, r27	; 0x03
    2e18:	75 c0       	rjmp	.+234    	; 0x2f04 <playTrack+0x1de>
    2e1a:	ec 01       	movw	r28, r24
    2e1c:	c8 0d       	add	r28, r8
    2e1e:	d9 1d       	adc	r29, r9
    2e20:	ce 01       	movw	r24, r28
    2e22:	88 57       	subi	r24, 0x78	; 120
    2e24:	9f 4f       	sbci	r25, 0xFF	; 255
    2e26:	de 01       	movw	r26, r28
    2e28:	a8 56       	subi	r26, 0x68	; 104
    2e2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e2c:	2e 01       	movw	r4, r28
    2e2e:	f8 ea       	ldi	r31, 0xA8	; 168
    2e30:	4f 0e       	add	r4, r31
    2e32:	51 1c       	adc	r5, r1
    2e34:	fc 01       	movw	r30, r24
    2e36:	20 81       	ld	r18, Z
    2e38:	48 8d       	ldd	r20, Y+24	; 0x18
    2e3a:	6c 91       	ld	r22, X
    2e3c:	f2 01       	movw	r30, r4
    2e3e:	80 81       	ld	r24, Z
    2e40:	b1 de       	rcall	.-670    	; 0x2ba4 <trackControl>
    2e42:	f3 01       	movw	r30, r6
    2e44:	eb 55       	subi	r30, 0x5B	; 91
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	02 c0       	rjmp	.+4      	; 0x2e52 <playTrack+0x12c>
    2e4e:	88 0f       	add	r24, r24
    2e50:	99 1f       	adc	r25, r25
    2e52:	1a 95       	dec	r17
    2e54:	e2 f7       	brpl	.-8      	; 0x2e4e <playTrack+0x128>
    2e56:	20 81       	ld	r18, Z
    2e58:	31 81       	ldd	r19, Z+1	; 0x01
    2e5a:	82 2b       	or	r24, r18
    2e5c:	93 2b       	or	r25, r19
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	80 83       	st	Z, r24
    2e62:	e4 01       	movw	r28, r8
    2e64:	cc 0f       	add	r28, r28
    2e66:	dd 1f       	adc	r29, r29
    2e68:	cc 0f       	add	r28, r28
    2e6a:	dd 1f       	adc	r29, r29
    2e6c:	c6 0d       	add	r28, r6
    2e6e:	d7 1d       	adc	r29, r7
    2e70:	c9 55       	subi	r28, 0x59	; 89
    2e72:	df 4f       	sbci	r29, 0xFF	; 255
    2e74:	34 97       	sbiw	r30, 0x04	; 4
    2e76:	80 81       	ld	r24, Z
    2e78:	91 81       	ldd	r25, Z+1	; 0x01
    2e7a:	a2 81       	ldd	r26, Z+2	; 0x02
    2e7c:	b3 81       	ldd	r27, Z+3	; 0x03
    2e7e:	8a 0d       	add	r24, r10
    2e80:	9b 1d       	adc	r25, r11
    2e82:	a1 1d       	adc	r26, r1
    2e84:	b1 1d       	adc	r27, r1
    2e86:	88 83       	st	Y, r24
    2e88:	99 83       	std	Y+1, r25	; 0x01
    2e8a:	aa 83       	std	Y+2, r26	; 0x02
    2e8c:	bb 83       	std	Y+3, r27	; 0x03
    2e8e:	3a c0       	rjmp	.+116    	; 0x2f04 <playTrack+0x1de>
    2e90:	ec 01       	movw	r28, r24
    2e92:	c8 0d       	add	r28, r8
    2e94:	d9 1d       	adc	r29, r9
    2e96:	fe 01       	movw	r30, r28
    2e98:	e8 57       	subi	r30, 0x78	; 120
    2e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9c:	4e 01       	movw	r8, r28
    2e9e:	28 e9       	ldi	r18, 0x98	; 152
    2ea0:	82 0e       	add	r8, r18
    2ea2:	91 1c       	adc	r9, r1
    2ea4:	5e 01       	movw	r10, r28
    2ea6:	88 ea       	ldi	r24, 0xA8	; 168
    2ea8:	a8 0e       	add	r10, r24
    2eaa:	b1 1c       	adc	r11, r1
    2eac:	20 81       	ld	r18, Z
    2eae:	48 8d       	ldd	r20, Y+24	; 0x18
    2eb0:	f4 01       	movw	r30, r8
    2eb2:	60 81       	ld	r22, Z
    2eb4:	f5 01       	movw	r30, r10
    2eb6:	80 81       	ld	r24, Z
    2eb8:	75 de       	rcall	.-790    	; 0x2ba4 <trackControl>
    2eba:	de 01       	movw	r26, r28
    2ebc:	a8 5b       	subi	r26, 0xB8	; 184
    2ebe:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e8 5a       	subi	r30, 0xA8	; 168
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	c1 2c       	mov	r12, r1
    2ec8:	ec 90       	ld	r14, X
    2eca:	00 81       	ld	r16, Z
    2ecc:	28 a5       	ldd	r18, Y+40	; 0x28
    2ece:	48 ad       	ldd	r20, Y+56	; 0x38
    2ed0:	f4 01       	movw	r30, r8
    2ed2:	60 81       	ld	r22, Z
    2ed4:	f5 01       	movw	r30, r10
    2ed6:	80 81       	ld	r24, Z
    2ed8:	d4 de       	rcall	.-600    	; 0x2c82 <setTrackFade>
    2eda:	14 c0       	rjmp	.+40     	; 0x2f04 <playTrack+0x1de>
    2edc:	ec 01       	movw	r28, r24
    2ede:	c8 0d       	add	r28, r8
    2ee0:	d9 1d       	adc	r29, r9
    2ee2:	ce 01       	movw	r24, r28
    2ee4:	88 57       	subi	r24, 0x78	; 120
    2ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee8:	de 01       	movw	r26, r28
    2eea:	a8 56       	subi	r26, 0x68	; 104
    2eec:	bf 4f       	sbci	r27, 0xFF	; 255
    2eee:	5e 01       	movw	r10, r28
    2ef0:	f8 ea       	ldi	r31, 0xA8	; 168
    2ef2:	af 0e       	add	r10, r31
    2ef4:	b1 1c       	adc	r11, r1
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	20 81       	ld	r18, Z
    2efa:	48 8d       	ldd	r20, Y+24	; 0x18
    2efc:	6c 91       	ld	r22, X
    2efe:	f5 01       	movw	r30, r10
    2f00:	80 81       	ld	r24, Z
    2f02:	50 de       	rcall	.-864    	; 0x2ba4 <trackControl>
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	1f 91       	pop	r17
    2f0a:	0f 91       	pop	r16
    2f0c:	ef 90       	pop	r14
    2f0e:	cf 90       	pop	r12
    2f10:	bf 90       	pop	r11
    2f12:	af 90       	pop	r10
    2f14:	9f 90       	pop	r9
    2f16:	8f 90       	pop	r8
    2f18:	7f 90       	pop	r7
    2f1a:	6f 90       	pop	r6
    2f1c:	5f 90       	pop	r5
    2f1e:	4f 90       	pop	r4
    2f20:	3f 90       	pop	r3
    2f22:	2f 90       	pop	r2
    2f24:	08 95       	ret

00002f26 <releaseUpdate>:

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
    2f26:	4f 92       	push	r4
    2f28:	5f 92       	push	r5
    2f2a:	6f 92       	push	r6
    2f2c:	7f 92       	push	r7
    2f2e:	8f 92       	push	r8
    2f30:	9f 92       	push	r9
    2f32:	af 92       	push	r10
    2f34:	bf 92       	push	r11
    2f36:	cf 92       	push	r12
    2f38:	ef 92       	push	r14
    2f3a:	0f 93       	push	r16
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
    2f40:	fb 01       	movw	r30, r22
    2f42:	eb 55       	subi	r30, 0x5B	; 91
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	80 80       	ld	r8, Z
    2f48:	91 80       	ldd	r9, Z+1	; 0x01
    2f4a:	eb 01       	movw	r28, r22
    2f4c:	c9 55       	subi	r28, 0x59	; 89
    2f4e:	df 4f       	sbci	r29, 0xFF	; 255
    2f50:	88 58       	subi	r24, 0x88	; 136
    2f52:	9f 4f       	sbci	r25, 0xFF	; 255
    2f54:	5c 01       	movw	r10, r24
    2f56:	3b 01       	movw	r6, r22
    2f58:	87 ee       	ldi	r24, 0xE7	; 231
    2f5a:	68 0e       	add	r6, r24
    2f5c:	71 1c       	adc	r7, r1
	
	for(int i = 0; i<16; i++)
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
    2f5e:	e1 e0       	ldi	r30, 0x01	; 1
    2f60:	8e 22       	and	r8, r30
    2f62:	99 24       	eor	r9, r9
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])>=(currentGlobals->releaseCounter))
    2f64:	2b 01       	movw	r4, r22
    2f66:	f1 ea       	ldi	r31, 0xA1	; 161
    2f68:	4f 0e       	add	r4, r31
    2f6a:	51 1c       	adc	r5, r1
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
    2f6c:	81 14       	cp	r8, r1
    2f6e:	91 04       	cpc	r9, r1
    2f70:	d1 f0       	breq	.+52     	; 0x2fa6 <releaseUpdate+0x80>
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])>=(currentGlobals->releaseCounter))
    2f72:	48 81       	ld	r20, Y
    2f74:	59 81       	ldd	r21, Y+1	; 0x01
    2f76:	6a 81       	ldd	r22, Y+2	; 0x02
    2f78:	7b 81       	ldd	r23, Y+3	; 0x03
    2f7a:	f2 01       	movw	r30, r4
    2f7c:	80 81       	ld	r24, Z
    2f7e:	91 81       	ldd	r25, Z+1	; 0x01
    2f80:	a2 81       	ldd	r26, Z+2	; 0x02
    2f82:	b3 81       	ldd	r27, Z+3	; 0x03
    2f84:	48 17       	cp	r20, r24
    2f86:	59 07       	cpc	r21, r25
    2f88:	6a 07       	cpc	r22, r26
    2f8a:	7b 07       	cpc	r23, r27
    2f8c:	60 f0       	brcs	.+24     	; 0x2fa6 <releaseUpdate+0x80>
			{
				//we need to do the release state here.
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],255,186,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
    2f8e:	cc 24       	eor	r12, r12
    2f90:	c3 94       	inc	r12
    2f92:	f5 01       	movw	r30, r10
    2f94:	70 97       	sbiw	r30, 0x10	; 16
    2f96:	e0 80       	ld	r14, Z
    2f98:	f5 01       	movw	r30, r10
    2f9a:	00 81       	ld	r16, Z
    2f9c:	2a eb       	ldi	r18, 0xBA	; 186
    2f9e:	4f ef       	ldi	r20, 0xFF	; 255
    2fa0:	60 a1       	ldd	r22, Z+32	; 0x20
    2fa2:	80 a9       	ldd	r24, Z+48	; 0x30
    2fa4:	6e de       	rcall	.-804    	; 0x2c82 <setTrackFade>
    2fa6:	24 96       	adiw	r28, 0x04	; 4
    2fa8:	ff ef       	ldi	r31, 0xFF	; 255
    2faa:	af 1a       	sub	r10, r31
    2fac:	bf 0a       	sbc	r11, r31

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
    2fae:	c6 15       	cp	r28, r6
    2fb0:	d7 05       	cpc	r29, r7
    2fb2:	e1 f6       	brne	.-72     	; 0x2f6c <releaseUpdate+0x46>
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],255,186,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
			} //1 makes the stop flag active, so sample will end after the release envelope is done triggering. 
		}
	}
	
    2fb4:	df 91       	pop	r29
    2fb6:	cf 91       	pop	r28
    2fb8:	0f 91       	pop	r16
    2fba:	ef 90       	pop	r14
    2fbc:	cf 90       	pop	r12
    2fbe:	bf 90       	pop	r11
    2fc0:	af 90       	pop	r10
    2fc2:	9f 90       	pop	r9
    2fc4:	8f 90       	pop	r8
    2fc6:	7f 90       	pop	r7
    2fc8:	6f 90       	pop	r6
    2fca:	5f 90       	pop	r5
    2fcc:	4f 90       	pop	r4
    2fce:	08 95       	ret

00002fd0 <twi_init>:
		}

		returnNum=twi_readNak();

	return returnNum;
}
    2fd0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2fd4:	88 e4       	ldi	r24, 0x48	; 72
    2fd6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2fda:	08 95       	ret

00002fdc <twi_start>:
    2fdc:	94 ea       	ldi	r25, 0xA4	; 164
    2fde:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2fe2:	ec eb       	ldi	r30, 0xBC	; 188
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	90 81       	ld	r25, Z
    2fe8:	99 23       	and	r25, r25
    2fea:	ec f7       	brge	.-6      	; 0x2fe6 <twi_start+0xa>
    2fec:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2ff0:	98 7f       	andi	r25, 0xF8	; 248
    2ff2:	98 30       	cpi	r25, 0x08	; 8
    2ff4:	11 f0       	breq	.+4      	; 0x2ffa <twi_start+0x1e>
    2ff6:	90 31       	cpi	r25, 0x10	; 16
    2ff8:	a1 f4       	brne	.+40     	; 0x3022 <twi_start+0x46>
    2ffa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2ffe:	84 e8       	ldi	r24, 0x84	; 132
    3000:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3004:	ec eb       	ldi	r30, 0xBC	; 188
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	80 81       	ld	r24, Z
    300a:	88 23       	and	r24, r24
    300c:	ec f7       	brge	.-6      	; 0x3008 <twi_start+0x2c>
    300e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3012:	98 7f       	andi	r25, 0xF8	; 248
    3014:	98 31       	cpi	r25, 0x18	; 24
    3016:	39 f0       	breq	.+14     	; 0x3026 <twi_start+0x4a>
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	90 34       	cpi	r25, 0x40	; 64
    301c:	29 f4       	brne	.+10     	; 0x3028 <twi_start+0x4c>
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	08 95       	ret
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	08 95       	ret
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	08 95       	ret

0000302a <twi_stop>:
    302a:	84 e9       	ldi	r24, 0x94	; 148
    302c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3030:	ec eb       	ldi	r30, 0xBC	; 188
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	84 fd       	sbrc	r24, 4
    3038:	fd cf       	rjmp	.-6      	; 0x3034 <twi_stop+0xa>
    303a:	08 95       	ret

0000303c <twi_write>:
    303c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3040:	84 e8       	ldi	r24, 0x84	; 132
    3042:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3046:	ec eb       	ldi	r30, 0xBC	; 188
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	80 81       	ld	r24, Z
    304c:	88 23       	and	r24, r24
    304e:	ec f7       	brge	.-6      	; 0x304a <twi_write+0xe>
    3050:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3054:	98 7f       	andi	r25, 0xF8	; 248
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	98 32       	cpi	r25, 0x28	; 40
    305a:	09 f4       	brne	.+2      	; 0x305e <twi_write+0x22>
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	08 95       	ret

00003060 <twi_readAck>:
    3060:	84 ec       	ldi	r24, 0xC4	; 196
    3062:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3066:	ec eb       	ldi	r30, 0xBC	; 188
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	80 81       	ld	r24, Z
    306c:	88 23       	and	r24, r24
    306e:	ec f7       	brge	.-6      	; 0x306a <twi_readAck+0xa>
    3070:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3074:	08 95       	ret

00003076 <twi_readNak>:
    3076:	84 e8       	ldi	r24, 0x84	; 132
    3078:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    307c:	ec eb       	ldi	r30, 0xBC	; 188
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	80 81       	ld	r24, Z
    3082:	88 23       	and	r24, r24
    3084:	ec f7       	brge	.-6      	; 0x3080 <twi_readNak+0xa>
    3086:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    308a:	08 95       	ret

0000308c <eepromSavePattern>:
    308c:	4f 92       	push	r4
    308e:	5f 92       	push	r5
    3090:	6f 92       	push	r6
    3092:	7f 92       	push	r7
    3094:	8f 92       	push	r8
    3096:	9f 92       	push	r9
    3098:	af 92       	push	r10
    309a:	bf 92       	push	r11
    309c:	cf 92       	push	r12
    309e:	df 92       	push	r13
    30a0:	ef 92       	push	r14
    30a2:	ff 92       	push	r15
    30a4:	0f 93       	push	r16
    30a6:	1f 93       	push	r17
    30a8:	cf 93       	push	r28
    30aa:	df 93       	push	r29
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	c4 59       	subi	r28, 0x94	; 148
    30b2:	d1 09       	sbc	r29, r1
    30b4:	0f b6       	in	r0, 0x3f	; 63
    30b6:	f8 94       	cli
    30b8:	de bf       	out	0x3e, r29	; 62
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	cd bf       	out	0x3d, r28	; 61
    30be:	cd 5d       	subi	r28, 0xDD	; 221
    30c0:	dd 4f       	sbci	r29, 0xFD	; 253
    30c2:	48 81       	ld	r20, Y
    30c4:	c3 52       	subi	r28, 0x23	; 35
    30c6:	d2 40       	sbci	r29, 0x02	; 2
    30c8:	c0 59       	subi	r28, 0x90	; 144
    30ca:	de 4f       	sbci	r29, 0xFE	; 254
    30cc:	88 81       	ld	r24, Y
    30ce:	c0 57       	subi	r28, 0x70	; 112
    30d0:	d1 40       	sbci	r29, 0x01	; 1
    30d2:	cf 58       	subi	r28, 0x8F	; 143
    30d4:	de 4f       	sbci	r29, 0xFE	; 254
    30d6:	98 81       	ld	r25, Y
    30d8:	c1 57       	subi	r28, 0x71	; 113
    30da:	d1 40       	sbci	r29, 0x01	; 1
    30dc:	24 2f       	mov	r18, r20
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	44 23       	and	r20, r20
    30e2:	8c f0       	brlt	.+34     	; 0x3106 <eepromSavePattern+0x7a>
    30e4:	21 50       	subi	r18, 0x01	; 1
    30e6:	31 09       	sbc	r19, r1
    30e8:	39 01       	movw	r6, r18
    30ea:	66 0c       	add	r6, r6
    30ec:	77 1c       	adc	r7, r7
    30ee:	62 0e       	add	r6, r18
    30f0:	73 1e       	adc	r7, r19
    30f2:	76 94       	lsr	r7
    30f4:	76 2c       	mov	r7, r6
    30f6:	66 24       	eor	r6, r6
    30f8:	77 94       	ror	r7
    30fa:	67 94       	ror	r6
    30fc:	0f 2e       	mov	r0, r31
    30fe:	f0 ea       	ldi	r31, 0xA0	; 160
    3100:	5f 2e       	mov	r5, r31
    3102:	f0 2d       	mov	r31, r0
    3104:	11 c0       	rjmp	.+34     	; 0x3128 <eepromSavePattern+0x9c>
    3106:	20 58       	subi	r18, 0x80	; 128
    3108:	31 09       	sbc	r19, r1
    310a:	39 01       	movw	r6, r18
    310c:	66 0c       	add	r6, r6
    310e:	77 1c       	adc	r7, r7
    3110:	26 0d       	add	r18, r6
    3112:	37 1d       	adc	r19, r7
    3114:	39 01       	movw	r6, r18
    3116:	76 94       	lsr	r7
    3118:	76 2c       	mov	r7, r6
    311a:	66 24       	eor	r6, r6
    311c:	77 94       	ror	r7
    311e:	67 94       	ror	r6
    3120:	0f 2e       	mov	r0, r31
    3122:	f8 ea       	ldi	r31, 0xA8	; 168
    3124:	5f 2e       	mov	r5, r31
    3126:	f0 2d       	mov	r31, r0
    3128:	be 01       	movw	r22, r28
    312a:	68 55       	subi	r22, 0x58	; 88
    312c:	7f 4f       	sbci	r23, 0xFF	; 255
    312e:	8e 01       	movw	r16, r28
    3130:	0f 5f       	subi	r16, 0xFF	; 255
    3132:	1f 4f       	sbci	r17, 0xFF	; 255
    3134:	fe 01       	movw	r30, r28
    3136:	e0 55       	subi	r30, 0x50	; 80
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	98 01       	movw	r18, r16
    313c:	db 01       	movw	r26, r22
    313e:	4d 91       	ld	r20, X+
    3140:	bd 01       	movw	r22, r26
    3142:	d9 01       	movw	r26, r18
    3144:	4d 93       	st	X+, r20
    3146:	9d 01       	movw	r18, r26
    3148:	6e 17       	cp	r22, r30
    314a:	7f 07       	cpc	r23, r31
    314c:	b9 f7       	brne	.-18     	; 0x313c <eepromSavePattern+0xb0>
    314e:	de 01       	movw	r26, r28
    3150:	19 96       	adiw	r26, 0x09	; 9
    3152:	9e 01       	movw	r18, r28
    3154:	28 54       	subi	r18, 0x48	; 72
    3156:	3f 4f       	sbci	r19, 0xFF	; 255
    3158:	41 91       	ld	r20, Z+
    315a:	4d 93       	st	X+, r20
    315c:	e2 17       	cp	r30, r18
    315e:	f3 07       	cpc	r31, r19
    3160:	d9 f7       	brne	.-10     	; 0x3158 <eepromSavePattern+0xcc>
    3162:	4e 01       	movw	r8, r28
    3164:	b1 e1       	ldi	r27, 0x11	; 17
    3166:	8b 0e       	add	r8, r27
    3168:	91 1c       	adc	r9, r1
    316a:	7e 01       	movw	r14, r28
    316c:	e0 ec       	ldi	r30, 0xC0	; 192
    316e:	ee 0e       	add	r14, r30
    3170:	f1 1c       	adc	r15, r1
    3172:	d4 01       	movw	r26, r8
    3174:	f9 01       	movw	r30, r18
    3176:	41 91       	ld	r20, Z+
    3178:	9f 01       	movw	r18, r30
    317a:	4d 93       	st	X+, r20
    317c:	ee 15       	cp	r30, r14
    317e:	ff 05       	cpc	r31, r15
    3180:	c9 f7       	brne	.-14     	; 0x3174 <eepromSavePattern+0xe8>
    3182:	9e 01       	movw	r18, r28
    3184:	27 5e       	subi	r18, 0xE7	; 231
    3186:	3f 4f       	sbci	r19, 0xFF	; 255
    3188:	be 01       	movw	r22, r28
    318a:	60 53       	subi	r22, 0x30	; 48
    318c:	7f 4f       	sbci	r23, 0xFF	; 255
    318e:	d7 01       	movw	r26, r14
    3190:	4d 91       	ld	r20, X+
    3192:	7d 01       	movw	r14, r26
    3194:	f9 01       	movw	r30, r18
    3196:	41 93       	st	Z+, r20
    3198:	9f 01       	movw	r18, r30
    319a:	a6 17       	cp	r26, r22
    319c:	b7 07       	cpc	r27, r23
    319e:	b9 f7       	brne	.-18     	; 0x318e <eepromSavePattern+0x102>
    31a0:	9e 01       	movw	r18, r28
    31a2:	27 5d       	subi	r18, 0xD7	; 215
    31a4:	3f 4f       	sbci	r19, 0xFF	; 255
    31a6:	de 01       	movw	r26, r28
    31a8:	a0 52       	subi	r26, 0x20	; 32
    31aa:	bf 4f       	sbci	r27, 0xFF	; 255
    31ac:	fb 01       	movw	r30, r22
    31ae:	41 91       	ld	r20, Z+
    31b0:	bf 01       	movw	r22, r30
    31b2:	f9 01       	movw	r30, r18
    31b4:	41 93       	st	Z+, r20
    31b6:	9f 01       	movw	r18, r30
    31b8:	6a 17       	cp	r22, r26
    31ba:	7b 07       	cpc	r23, r27
    31bc:	b9 f7       	brne	.-18     	; 0x31ac <eepromSavePattern+0x120>
    31be:	9e 01       	movw	r18, r28
    31c0:	27 5c       	subi	r18, 0xC7	; 199
    31c2:	3f 4f       	sbci	r19, 0xFF	; 255
    31c4:	be 01       	movw	r22, r28
    31c6:	60 51       	subi	r22, 0x10	; 16
    31c8:	7f 4f       	sbci	r23, 0xFF	; 255
    31ca:	4d 91       	ld	r20, X+
    31cc:	f9 01       	movw	r30, r18
    31ce:	41 93       	st	Z+, r20
    31d0:	9f 01       	movw	r18, r30
    31d2:	a6 17       	cp	r26, r22
    31d4:	b7 07       	cpc	r27, r23
    31d6:	c9 f7       	brne	.-14     	; 0x31ca <eepromSavePattern+0x13e>
    31d8:	9e 01       	movw	r18, r28
    31da:	27 5b       	subi	r18, 0xB7	; 183
    31dc:	3f 4f       	sbci	r19, 0xFF	; 255
    31de:	de 01       	movw	r26, r28
    31e0:	b3 95       	inc	r27
    31e2:	fb 01       	movw	r30, r22
    31e4:	41 91       	ld	r20, Z+
    31e6:	bf 01       	movw	r22, r30
    31e8:	f9 01       	movw	r30, r18
    31ea:	41 93       	st	Z+, r20
    31ec:	9f 01       	movw	r18, r30
    31ee:	6a 17       	cp	r22, r26
    31f0:	7b 07       	cpc	r23, r27
    31f2:	b9 f7       	brne	.-18     	; 0x31e2 <eepromSavePattern+0x156>
    31f4:	9e 01       	movw	r18, r28
    31f6:	27 5a       	subi	r18, 0xA7	; 167
    31f8:	3f 4f       	sbci	r19, 0xFF	; 255
    31fa:	be 01       	movw	r22, r28
    31fc:	60 5f       	subi	r22, 0xF0	; 240
    31fe:	7e 4f       	sbci	r23, 0xFE	; 254
    3200:	4d 91       	ld	r20, X+
    3202:	f9 01       	movw	r30, r18
    3204:	41 93       	st	Z+, r20
    3206:	9f 01       	movw	r18, r30
    3208:	a6 17       	cp	r26, r22
    320a:	b7 07       	cpc	r27, r23
    320c:	c9 f7       	brne	.-14     	; 0x3200 <eepromSavePattern+0x174>
    320e:	de 01       	movw	r26, r28
    3210:	a7 59       	subi	r26, 0x97	; 151
    3212:	bf 4f       	sbci	r27, 0xFF	; 255
    3214:	5e 01       	movw	r10, r28
    3216:	f0 ee       	ldi	r31, 0xE0	; 224
    3218:	af 1a       	sub	r10, r31
    321a:	fe ef       	ldi	r31, 0xFE	; 254
    321c:	bf 0a       	sbc	r11, r31
    321e:	fb 01       	movw	r30, r22
    3220:	21 91       	ld	r18, Z+
    3222:	bf 01       	movw	r22, r30
    3224:	2d 93       	st	X+, r18
    3226:	ea 15       	cp	r30, r10
    3228:	fb 05       	cpc	r31, r11
    322a:	c9 f7       	brne	.-14     	; 0x321e <eepromSavePattern+0x192>
    322c:	eb 96       	adiw	r28, 0x3b	; 59
    322e:	9f af       	std	Y+63, r25	; 0x3f
    3230:	eb 97       	sbiw	r28, 0x3b	; 59
    3232:	ec 96       	adiw	r28, 0x3c	; 60
    3234:	8f af       	std	Y+63, r24	; 0x3f
    3236:	ec 97       	sbiw	r28, 0x3c	; 60
    3238:	ce 58       	subi	r28, 0x8E	; 142
    323a:	de 4f       	sbci	r29, 0xFE	; 254
    323c:	88 81       	ld	r24, Y
    323e:	c2 57       	subi	r28, 0x72	; 114
    3240:	d1 40       	sbci	r29, 0x01	; 1
    3242:	ed 96       	adiw	r28, 0x3d	; 61
    3244:	8f af       	std	Y+63, r24	; 0x3f
    3246:	ed 97       	sbiw	r28, 0x3d	; 61
    3248:	85 2d       	mov	r24, r5
    324a:	c8 de       	rcall	.-624    	; 0x2fdc <twi_start>
    324c:	81 30       	cpi	r24, 0x01	; 1
    324e:	81 f4       	brne	.+32     	; 0x3270 <eepromSavePattern+0x1e4>
    3250:	84 e1       	ldi	r24, 0x14	; 20
    3252:	ec e0       	ldi	r30, 0x0C	; 12
    3254:	f2 e0       	ldi	r31, 0x02	; 2
    3256:	de 01       	movw	r26, r28
    3258:	af 57       	subi	r26, 0x7F	; 127
    325a:	bf 4f       	sbci	r27, 0xFF	; 255
    325c:	01 90       	ld	r0, Z+
    325e:	0d 92       	st	X+, r0
    3260:	8a 95       	dec	r24
    3262:	e1 f7       	brne	.-8      	; 0x325c <eepromSavePattern+0x1d0>
    3264:	63 e0       	ldi	r22, 0x03	; 3
    3266:	70 e0       	ldi	r23, 0x00	; 0
    3268:	ce 01       	movw	r24, r28
    326a:	8f 57       	subi	r24, 0x7F	; 127
    326c:	9f 4f       	sbci	r25, 0xFF	; 255
    326e:	4f d9       	rcall	.-3426   	; 0x250e <outputS>
    3270:	87 2d       	mov	r24, r7
    3272:	e4 de       	rcall	.-568    	; 0x303c <twi_write>
    3274:	46 2c       	mov	r4, r6
    3276:	86 2d       	mov	r24, r6
    3278:	e1 de       	rcall	.-574    	; 0x303c <twi_write>
    327a:	6e 01       	movw	r12, r28
    327c:	fd e7       	ldi	r31, 0x7D	; 125
    327e:	cf 0e       	add	r12, r31
    3280:	d1 1c       	adc	r13, r1
    3282:	78 01       	movw	r14, r16
    3284:	d7 01       	movw	r26, r14
    3286:	8d 91       	ld	r24, X+
    3288:	7d 01       	movw	r14, r26
    328a:	d8 de       	rcall	.-592    	; 0x303c <twi_write>
    328c:	ce 14       	cp	r12, r14
    328e:	df 04       	cpc	r13, r15
    3290:	c9 f7       	brne	.-14     	; 0x3284 <eepromSavePattern+0x1f8>
    3292:	cb de       	rcall	.-618    	; 0x302a <twi_stop>
    3294:	ef e1       	ldi	r30, 0x1F	; 31
    3296:	fe e4       	ldi	r31, 0x4E	; 78
    3298:	31 97       	sbiw	r30, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <eepromSavePattern+0x20c>
    329c:	00 c0       	rjmp	.+0      	; 0x329e <eepromSavePattern+0x212>
    329e:	00 00       	nop
    32a0:	9e 01       	movw	r18, r28
    32a2:	20 5d       	subi	r18, 0xD0	; 208
    32a4:	3e 4f       	sbci	r19, 0xFE	; 254
    32a6:	f8 01       	movw	r30, r16
    32a8:	d5 01       	movw	r26, r10
    32aa:	8d 91       	ld	r24, X+
    32ac:	5d 01       	movw	r10, r26
    32ae:	81 93       	st	Z+, r24
    32b0:	2a 17       	cp	r18, r26
    32b2:	3b 07       	cpc	r19, r27
    32b4:	c9 f7       	brne	.-14     	; 0x32a8 <eepromSavePattern+0x21c>
    32b6:	de 01       	movw	r26, r28
    32b8:	91 96       	adiw	r26, 0x21	; 33
    32ba:	f9 01       	movw	r30, r18
    32bc:	81 91       	ld	r24, Z+
    32be:	9f 01       	movw	r18, r30
    32c0:	f4 01       	movw	r30, r8
    32c2:	81 93       	st	Z+, r24
    32c4:	4f 01       	movw	r8, r30
    32c6:	ae 17       	cp	r26, r30
    32c8:	bf 07       	cpc	r27, r31
    32ca:	b9 f7       	brne	.-18     	; 0x32ba <eepromSavePattern+0x22e>
    32cc:	ce 01       	movw	r24, r28
    32ce:	80 5c       	subi	r24, 0xC0	; 192
    32d0:	9e 4f       	sbci	r25, 0xFE	; 254
    32d2:	ae 01       	movw	r20, r28
    32d4:	4f 5c       	subi	r20, 0xCF	; 207
    32d6:	5f 4f       	sbci	r21, 0xFF	; 255
    32d8:	fc 01       	movw	r30, r24
    32da:	21 91       	ld	r18, Z+
    32dc:	cf 01       	movw	r24, r30
    32de:	2d 93       	st	X+, r18
    32e0:	a4 17       	cp	r26, r20
    32e2:	b5 07       	cpc	r27, r21
    32e4:	c9 f7       	brne	.-14     	; 0x32d8 <eepromSavePattern+0x24c>
    32e6:	ce 01       	movw	r24, r28
    32e8:	80 5b       	subi	r24, 0xB0	; 176
    32ea:	9e 4f       	sbci	r25, 0xFE	; 254
    32ec:	de 01       	movw	r26, r28
    32ee:	af 5b       	subi	r26, 0xBF	; 191
    32f0:	bf 4f       	sbci	r27, 0xFF	; 255
    32f2:	fc 01       	movw	r30, r24
    32f4:	21 91       	ld	r18, Z+
    32f6:	cf 01       	movw	r24, r30
    32f8:	fa 01       	movw	r30, r20
    32fa:	21 93       	st	Z+, r18
    32fc:	af 01       	movw	r20, r30
    32fe:	ea 17       	cp	r30, r26
    3300:	fb 07       	cpc	r31, r27
    3302:	b9 f7       	brne	.-18     	; 0x32f2 <eepromSavePattern+0x266>
    3304:	fe 01       	movw	r30, r28
    3306:	e0 5a       	subi	r30, 0xA0	; 160
    3308:	fe 4f       	sbci	r31, 0xFE	; 254
    330a:	9e 01       	movw	r18, r28
    330c:	20 59       	subi	r18, 0x90	; 144
    330e:	3e 4f       	sbci	r19, 0xFE	; 254
    3310:	81 91       	ld	r24, Z+
    3312:	8d 93       	st	X+, r24
    3314:	2e 17       	cp	r18, r30
    3316:	3f 07       	cpc	r19, r31
    3318:	d9 f7       	brne	.-10     	; 0x3310 <eepromSavePattern+0x284>
    331a:	ae 01       	movw	r20, r28
    331c:	4d 58       	subi	r20, 0x8D	; 141
    331e:	5e 4f       	sbci	r21, 0xFE	; 254
    3320:	ce 01       	movw	r24, r28
    3322:	8f 5a       	subi	r24, 0xAF	; 175
    3324:	9f 4f       	sbci	r25, 0xFF	; 255
    3326:	de 01       	movw	r26, r28
    3328:	ad 57       	subi	r26, 0x7D	; 125
    332a:	be 4f       	sbci	r27, 0xFE	; 254
    332c:	fa 01       	movw	r30, r20
    332e:	21 91       	ld	r18, Z+
    3330:	af 01       	movw	r20, r30
    3332:	fc 01       	movw	r30, r24
    3334:	21 93       	st	Z+, r18
    3336:	cf 01       	movw	r24, r30
    3338:	a4 17       	cp	r26, r20
    333a:	b5 07       	cpc	r27, r21
    333c:	b9 f7       	brne	.-18     	; 0x332c <eepromSavePattern+0x2a0>
    333e:	ce 01       	movw	r24, r28
    3340:	8f 59       	subi	r24, 0x9F	; 159
    3342:	9f 4f       	sbci	r25, 0xFF	; 255
    3344:	ae 01       	movw	r20, r28
    3346:	4d 56       	subi	r20, 0x6D	; 109
    3348:	5e 4f       	sbci	r21, 0xFE	; 254
    334a:	2d 91       	ld	r18, X+
    334c:	fc 01       	movw	r30, r24
    334e:	21 93       	st	Z+, r18
    3350:	cf 01       	movw	r24, r30
    3352:	a4 17       	cp	r26, r20
    3354:	b5 07       	cpc	r27, r21
    3356:	c9 f7       	brne	.-14     	; 0x334a <eepromSavePattern+0x2be>
    3358:	de 01       	movw	r26, r28
    335a:	af 58       	subi	r26, 0x8F	; 143
    335c:	bf 4f       	sbci	r27, 0xFF	; 255
    335e:	7e 01       	movw	r14, r28
    3360:	fd e5       	ldi	r31, 0x5D	; 93
    3362:	ef 1a       	sub	r14, r31
    3364:	fe ef       	ldi	r31, 0xFE	; 254
    3366:	ff 0a       	sbc	r15, r31
    3368:	fa 01       	movw	r30, r20
    336a:	81 91       	ld	r24, Z+
    336c:	af 01       	movw	r20, r30
    336e:	8d 93       	st	X+, r24
    3370:	ee 16       	cp	r14, r30
    3372:	ff 06       	cpc	r15, r31
    3374:	c9 f7       	brne	.-14     	; 0x3368 <eepromSavePattern+0x2dc>
    3376:	85 2d       	mov	r24, r5
    3378:	31 de       	rcall	.-926    	; 0x2fdc <twi_start>
    337a:	81 30       	cpi	r24, 0x01	; 1
    337c:	81 f4       	brne	.+32     	; 0x339e <eepromSavePattern+0x312>
    337e:	84 e1       	ldi	r24, 0x14	; 20
    3380:	e1 e2       	ldi	r30, 0x21	; 33
    3382:	f2 e0       	ldi	r31, 0x02	; 2
    3384:	de 01       	movw	r26, r28
    3386:	af 57       	subi	r26, 0x7F	; 127
    3388:	bf 4f       	sbci	r27, 0xFF	; 255
    338a:	01 90       	ld	r0, Z+
    338c:	0d 92       	st	X+, r0
    338e:	8a 95       	dec	r24
    3390:	e1 f7       	brne	.-8      	; 0x338a <eepromSavePattern+0x2fe>
    3392:	63 e0       	ldi	r22, 0x03	; 3
    3394:	70 e0       	ldi	r23, 0x00	; 0
    3396:	ce 01       	movw	r24, r28
    3398:	8f 57       	subi	r24, 0x7F	; 127
    339a:	9f 4f       	sbci	r25, 0xFF	; 255
    339c:	b8 d8       	rcall	.-3728   	; 0x250e <outputS>
    339e:	c3 01       	movw	r24, r6
    33a0:	80 58       	subi	r24, 0x80	; 128
    33a2:	9f 4f       	sbci	r25, 0xFF	; 255
    33a4:	89 2f       	mov	r24, r25
    33a6:	4a de       	rcall	.-876    	; 0x303c <twi_write>
    33a8:	80 e8       	ldi	r24, 0x80	; 128
    33aa:	84 0d       	add	r24, r4
    33ac:	47 de       	rcall	.-882    	; 0x303c <twi_write>
    33ae:	6e 01       	movw	r12, r28
    33b0:	f1 e8       	ldi	r31, 0x81	; 129
    33b2:	cf 0e       	add	r12, r31
    33b4:	d1 1c       	adc	r13, r1
    33b6:	d8 01       	movw	r26, r16
    33b8:	8d 91       	ld	r24, X+
    33ba:	8d 01       	movw	r16, r26
    33bc:	3f de       	rcall	.-898    	; 0x303c <twi_write>
    33be:	c0 16       	cp	r12, r16
    33c0:	d1 06       	cpc	r13, r17
    33c2:	c9 f7       	brne	.-14     	; 0x33b6 <eepromSavePattern+0x32a>
    33c4:	32 de       	rcall	.-924    	; 0x302a <twi_stop>
    33c6:	ef e1       	ldi	r30, 0x1F	; 31
    33c8:	fe e4       	ldi	r31, 0x4E	; 78
    33ca:	31 97       	sbiw	r30, 0x01	; 1
    33cc:	f1 f7       	brne	.-4      	; 0x33ca <eepromSavePattern+0x33e>
    33ce:	00 c0       	rjmp	.+0      	; 0x33d0 <eepromSavePattern+0x344>
    33d0:	00 00       	nop
    33d2:	85 2d       	mov	r24, r5
    33d4:	03 de       	rcall	.-1018   	; 0x2fdc <twi_start>
    33d6:	81 30       	cpi	r24, 0x01	; 1
    33d8:	81 f4       	brne	.+32     	; 0x33fa <eepromSavePattern+0x36e>
    33da:	84 e1       	ldi	r24, 0x14	; 20
    33dc:	e6 e3       	ldi	r30, 0x36	; 54
    33de:	f2 e0       	ldi	r31, 0x02	; 2
    33e0:	de 01       	movw	r26, r28
    33e2:	af 57       	subi	r26, 0x7F	; 127
    33e4:	bf 4f       	sbci	r27, 0xFF	; 255
    33e6:	01 90       	ld	r0, Z+
    33e8:	0d 92       	st	X+, r0
    33ea:	8a 95       	dec	r24
    33ec:	e1 f7       	brne	.-8      	; 0x33e6 <eepromSavePattern+0x35a>
    33ee:	63 e0       	ldi	r22, 0x03	; 3
    33f0:	70 e0       	ldi	r23, 0x00	; 0
    33f2:	ce 01       	movw	r24, r28
    33f4:	8f 57       	subi	r24, 0x7F	; 127
    33f6:	9f 4f       	sbci	r25, 0xFF	; 255
    33f8:	8a d8       	rcall	.-3820   	; 0x250e <outputS>
    33fa:	73 94       	inc	r7
    33fc:	87 2d       	mov	r24, r7
    33fe:	1e de       	rcall	.-964    	; 0x303c <twi_write>
    3400:	84 2d       	mov	r24, r4
    3402:	1c de       	rcall	.-968    	; 0x303c <twi_write>
    3404:	6e 01       	movw	r12, r28
    3406:	2d ed       	ldi	r18, 0xDD	; 221
    3408:	c2 1a       	sub	r12, r18
    340a:	2d ef       	ldi	r18, 0xFD	; 253
    340c:	d2 0a       	sbc	r13, r18
    340e:	d7 01       	movw	r26, r14
    3410:	1c 91       	ld	r17, X
    3412:	11 96       	adiw	r26, 0x01	; 1
    3414:	8c 91       	ld	r24, X
    3416:	b2 e0       	ldi	r27, 0x02	; 2
    3418:	eb 0e       	add	r14, r27
    341a:	f1 1c       	adc	r15, r1
    341c:	0f de       	rcall	.-994    	; 0x303c <twi_write>
    341e:	81 2f       	mov	r24, r17
    3420:	0d de       	rcall	.-998    	; 0x303c <twi_write>
    3422:	ce 14       	cp	r12, r14
    3424:	df 04       	cpc	r13, r15
    3426:	99 f7       	brne	.-26     	; 0x340e <eepromSavePattern+0x382>
    3428:	00 de       	rcall	.-1024   	; 0x302a <twi_stop>
    342a:	ef e1       	ldi	r30, 0x1F	; 31
    342c:	fe e4       	ldi	r31, 0x4E	; 78
    342e:	31 97       	sbiw	r30, 0x01	; 1
    3430:	f1 f7       	brne	.-4      	; 0x342e <eepromSavePattern+0x3a2>
    3432:	00 c0       	rjmp	.+0      	; 0x3434 <eepromSavePattern+0x3a8>
    3434:	00 00       	nop
    3436:	cc 56       	subi	r28, 0x6C	; 108
    3438:	df 4f       	sbci	r29, 0xFF	; 255
    343a:	0f b6       	in	r0, 0x3f	; 63
    343c:	f8 94       	cli
    343e:	de bf       	out	0x3e, r29	; 62
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	cd bf       	out	0x3d, r28	; 61
    3444:	df 91       	pop	r29
    3446:	cf 91       	pop	r28
    3448:	1f 91       	pop	r17
    344a:	0f 91       	pop	r16
    344c:	ff 90       	pop	r15
    344e:	ef 90       	pop	r14
    3450:	df 90       	pop	r13
    3452:	cf 90       	pop	r12
    3454:	bf 90       	pop	r11
    3456:	af 90       	pop	r10
    3458:	9f 90       	pop	r9
    345a:	8f 90       	pop	r8
    345c:	7f 90       	pop	r7
    345e:	6f 90       	pop	r6
    3460:	5f 90       	pop	r5
    3462:	4f 90       	pop	r4
    3464:	08 95       	ret

00003466 <eepromLoadPattern>:
    3466:	8f 92       	push	r8
    3468:	9f 92       	push	r9
    346a:	af 92       	push	r10
    346c:	bf 92       	push	r11
    346e:	cf 92       	push	r12
    3470:	df 92       	push	r13
    3472:	ef 92       	push	r14
    3474:	ff 92       	push	r15
    3476:	0f 93       	push	r16
    3478:	1f 93       	push	r17
    347a:	cf 93       	push	r28
    347c:	df 93       	push	r29
    347e:	cd b7       	in	r28, 0x3d	; 61
    3480:	de b7       	in	r29, 0x3e	; 62
    3482:	c4 59       	subi	r28, 0x94	; 148
    3484:	d1 40       	sbci	r29, 0x01	; 1
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	de bf       	out	0x3e, r29	; 62
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	cd bf       	out	0x3d, r28	; 61
    3490:	7c 01       	movw	r14, r24
    3492:	86 2f       	mov	r24, r22
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	66 23       	and	r22, r22
    3498:	84 f0       	brlt	.+32     	; 0x34ba <eepromLoadPattern+0x54>
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	9c 01       	movw	r18, r24
    349e:	22 0f       	add	r18, r18
    34a0:	33 1f       	adc	r19, r19
    34a2:	82 0f       	add	r24, r18
    34a4:	93 1f       	adc	r25, r19
    34a6:	96 95       	lsr	r25
    34a8:	98 2f       	mov	r25, r24
    34aa:	88 27       	eor	r24, r24
    34ac:	97 95       	ror	r25
    34ae:	87 95       	ror	r24
    34b0:	08 2f       	mov	r16, r24
    34b2:	d9 2e       	mov	r13, r25
    34b4:	80 ea       	ldi	r24, 0xA0	; 160
    34b6:	11 ea       	ldi	r17, 0xA1	; 161
    34b8:	10 c0       	rjmp	.+32     	; 0x34da <eepromLoadPattern+0x74>
    34ba:	80 58       	subi	r24, 0x80	; 128
    34bc:	91 09       	sbc	r25, r1
    34be:	9c 01       	movw	r18, r24
    34c0:	22 0f       	add	r18, r18
    34c2:	33 1f       	adc	r19, r19
    34c4:	82 0f       	add	r24, r18
    34c6:	93 1f       	adc	r25, r19
    34c8:	96 95       	lsr	r25
    34ca:	98 2f       	mov	r25, r24
    34cc:	88 27       	eor	r24, r24
    34ce:	97 95       	ror	r25
    34d0:	87 95       	ror	r24
    34d2:	08 2f       	mov	r16, r24
    34d4:	d9 2e       	mov	r13, r25
    34d6:	88 ea       	ldi	r24, 0xA8	; 168
    34d8:	19 ea       	ldi	r17, 0xA9	; 169
    34da:	80 dd       	rcall	.-1280   	; 0x2fdc <twi_start>
    34dc:	81 30       	cpi	r24, 0x01	; 1
    34de:	29 f4       	brne	.+10     	; 0x34ea <eepromLoadPattern+0x84>
    34e0:	63 e0       	ldi	r22, 0x03	; 3
    34e2:	70 e0       	ldi	r23, 0x00	; 0
    34e4:	87 e7       	ldi	r24, 0x77	; 119
    34e6:	93 e0       	ldi	r25, 0x03	; 3
    34e8:	12 d8       	rcall	.-4060   	; 0x250e <outputS>
    34ea:	8d 2d       	mov	r24, r13
    34ec:	a7 dd       	rcall	.-1202   	; 0x303c <twi_write>
    34ee:	80 2f       	mov	r24, r16
    34f0:	a5 dd       	rcall	.-1206   	; 0x303c <twi_write>
    34f2:	81 2f       	mov	r24, r17
    34f4:	73 dd       	rcall	.-1306   	; 0x2fdc <twi_start>
    34f6:	81 30       	cpi	r24, 0x01	; 1
    34f8:	09 f0       	breq	.+2      	; 0x34fc <eepromLoadPattern+0x96>
    34fa:	48 c1       	rjmp	.+656    	; 0x378c <eepromLoadPattern+0x326>
    34fc:	84 e1       	ldi	r24, 0x14	; 20
    34fe:	eb e4       	ldi	r30, 0x4B	; 75
    3500:	f2 e0       	ldi	r31, 0x02	; 2
    3502:	de 01       	movw	r26, r28
    3504:	af 57       	subi	r26, 0x7F	; 127
    3506:	be 4f       	sbci	r27, 0xFE	; 254
    3508:	01 90       	ld	r0, Z+
    350a:	0d 92       	st	X+, r0
    350c:	8a 95       	dec	r24
    350e:	e1 f7       	brne	.-8      	; 0x3508 <eepromLoadPattern+0xa2>
    3510:	63 e0       	ldi	r22, 0x03	; 3
    3512:	70 e0       	ldi	r23, 0x00	; 0
    3514:	ce 01       	movw	r24, r28
    3516:	8f 57       	subi	r24, 0x7F	; 127
    3518:	9e 4f       	sbci	r25, 0xFE	; 254
    351a:	0e 94 87 12 	call	0x250e	; 0x250e <outputS>
    351e:	36 c1       	rjmp	.+620    	; 0x378c <eepromLoadPattern+0x326>
    3520:	9f dd       	rcall	.-1218   	; 0x3060 <twi_readAck>
    3522:	d8 01       	movw	r26, r16
    3524:	8d 93       	st	X+, r24
    3526:	8d 01       	movw	r16, r26
    3528:	ac 15       	cp	r26, r12
    352a:	bd 05       	cpc	r27, r13
    352c:	c9 f7       	brne	.-14     	; 0x3520 <eepromLoadPattern+0xba>
    352e:	a3 dd       	rcall	.-1210   	; 0x3076 <twi_readNak>
    3530:	c0 58       	subi	r28, 0x80	; 128
    3532:	de 4f       	sbci	r29, 0xFE	; 254
    3534:	88 83       	st	Y, r24
    3536:	c0 58       	subi	r28, 0x80	; 128
    3538:	d1 40       	sbci	r29, 0x01	; 1
    353a:	77 dd       	rcall	.-1298   	; 0x302a <twi_stop>
    353c:	87 01       	movw	r16, r14
    353e:	4e 01       	movw	r8, r28
    3540:	b9 e0       	ldi	r27, 0x09	; 9
    3542:	8b 0e       	add	r8, r27
    3544:	91 1c       	adc	r9, r1
    3546:	f7 01       	movw	r30, r14
    3548:	d5 01       	movw	r26, r10
    354a:	8d 91       	ld	r24, X+
    354c:	5d 01       	movw	r10, r26
    354e:	81 93       	st	Z+, r24
    3550:	a8 15       	cp	r26, r8
    3552:	b9 05       	cpc	r27, r9
    3554:	c9 f7       	brne	.-14     	; 0x3548 <eepromLoadPattern+0xe2>
    3556:	d1 2c       	mov	r13, r1
    3558:	f4 01       	movw	r30, r8
    355a:	81 91       	ld	r24, Z+
    355c:	4f 01       	movw	r8, r30
    355e:	f8 01       	movw	r30, r16
    3560:	80 87       	std	Z+8, r24	; 0x08
    3562:	4d 2d       	mov	r20, r13
    3564:	60 81       	ld	r22, Z
    3566:	0f 5f       	subi	r16, 0xFF	; 255
    3568:	1f 4f       	sbci	r17, 0xFF	; 255
    356a:	42 db       	rcall	.-2428   	; 0x2bf0 <setOutputVolume>
    356c:	d3 94       	inc	r13
    356e:	f8 e0       	ldi	r31, 0x08	; 8
    3570:	df 12       	cpse	r13, r31
    3572:	f2 cf       	rjmp	.-28     	; 0x3558 <eepromLoadPattern+0xf2>
    3574:	5e 01       	movw	r10, r28
    3576:	81 e1       	ldi	r24, 0x11	; 17
    3578:	a8 0e       	add	r10, r24
    357a:	b1 1c       	adc	r11, r1
    357c:	67 01       	movw	r12, r14
    357e:	90 e1       	ldi	r25, 0x10	; 16
    3580:	c9 0e       	add	r12, r25
    3582:	d1 1c       	adc	r13, r1
    3584:	10 e0       	ldi	r17, 0x00	; 0
    3586:	d5 01       	movw	r26, r10
    3588:	4d 91       	ld	r20, X+
    358a:	5d 01       	movw	r10, r26
    358c:	f6 01       	movw	r30, r12
    358e:	41 93       	st	Z+, r20
    3590:	6f 01       	movw	r12, r30
    3592:	60 e0       	ldi	r22, 0x00	; 0
    3594:	81 2f       	mov	r24, r17
    3596:	a3 db       	rcall	.-2234   	; 0x2cde <outputSampleRate>
    3598:	1f 5f       	subi	r17, 0xFF	; 255
    359a:	18 30       	cpi	r17, 0x08	; 8
    359c:	a1 f7       	brne	.-24     	; 0x3586 <eepromLoadPattern+0x120>
    359e:	fe 01       	movw	r30, r28
    35a0:	79 96       	adiw	r30, 0x19	; 25
    35a2:	c7 01       	movw	r24, r14
    35a4:	48 96       	adiw	r24, 0x18	; 24
    35a6:	ae 01       	movw	r20, r28
    35a8:	47 5d       	subi	r20, 0xD7	; 215
    35aa:	5f 4f       	sbci	r21, 0xFF	; 255
    35ac:	21 91       	ld	r18, Z+
    35ae:	dc 01       	movw	r26, r24
    35b0:	2d 93       	st	X+, r18
    35b2:	cd 01       	movw	r24, r26
    35b4:	e4 17       	cp	r30, r20
    35b6:	f5 07       	cpc	r31, r21
    35b8:	c9 f7       	brne	.-14     	; 0x35ac <eepromLoadPattern+0x146>
    35ba:	57 01       	movw	r10, r14
    35bc:	b8 e2       	ldi	r27, 0x28	; 40
    35be:	ab 0e       	add	r10, r27
    35c0:	b1 1c       	adc	r11, r1
    35c2:	de 01       	movw	r26, r28
    35c4:	d9 96       	adiw	r26, 0x39	; 57
    35c6:	c5 01       	movw	r24, r10
    35c8:	fa 01       	movw	r30, r20
    35ca:	21 91       	ld	r18, Z+
    35cc:	af 01       	movw	r20, r30
    35ce:	fc 01       	movw	r30, r24
    35d0:	21 93       	st	Z+, r18
    35d2:	cf 01       	movw	r24, r30
    35d4:	4a 17       	cp	r20, r26
    35d6:	5b 07       	cpc	r21, r27
    35d8:	b9 f7       	brne	.-18     	; 0x35c8 <eepromLoadPattern+0x162>
    35da:	c7 01       	movw	r24, r14
    35dc:	c8 96       	adiw	r24, 0x38	; 56
    35de:	ae 01       	movw	r20, r28
    35e0:	47 5b       	subi	r20, 0xB7	; 183
    35e2:	5f 4f       	sbci	r21, 0xFF	; 255
    35e4:	2d 91       	ld	r18, X+
    35e6:	fc 01       	movw	r30, r24
    35e8:	21 93       	st	Z+, r18
    35ea:	cf 01       	movw	r24, r30
    35ec:	a4 17       	cp	r26, r20
    35ee:	b5 07       	cpc	r27, r21
    35f0:	c9 f7       	brne	.-14     	; 0x35e4 <eepromLoadPattern+0x17e>
    35f2:	c7 01       	movw	r24, r14
    35f4:	88 5b       	subi	r24, 0xB8	; 184
    35f6:	9f 4f       	sbci	r25, 0xFF	; 255
    35f8:	de 01       	movw	r26, r28
    35fa:	a7 5a       	subi	r26, 0xA7	; 167
    35fc:	bf 4f       	sbci	r27, 0xFF	; 255
    35fe:	fa 01       	movw	r30, r20
    3600:	21 91       	ld	r18, Z+
    3602:	af 01       	movw	r20, r30
    3604:	fc 01       	movw	r30, r24
    3606:	21 93       	st	Z+, r18
    3608:	cf 01       	movw	r24, r30
    360a:	4a 17       	cp	r20, r26
    360c:	5b 07       	cpc	r21, r27
    360e:	b9 f7       	brne	.-18     	; 0x35fe <eepromLoadPattern+0x198>
    3610:	c7 01       	movw	r24, r14
    3612:	88 5a       	subi	r24, 0xA8	; 168
    3614:	9f 4f       	sbci	r25, 0xFF	; 255
    3616:	ae 01       	movw	r20, r28
    3618:	47 59       	subi	r20, 0x97	; 151
    361a:	5f 4f       	sbci	r21, 0xFF	; 255
    361c:	2d 91       	ld	r18, X+
    361e:	fc 01       	movw	r30, r24
    3620:	21 93       	st	Z+, r18
    3622:	cf 01       	movw	r24, r30
    3624:	a4 17       	cp	r26, r20
    3626:	b5 07       	cpc	r27, r21
    3628:	c9 f7       	brne	.-14     	; 0x361c <eepromLoadPattern+0x1b6>
    362a:	d7 01       	movw	r26, r14
    362c:	a8 59       	subi	r26, 0x98	; 152
    362e:	bf 4f       	sbci	r27, 0xFF	; 255
    3630:	9e 01       	movw	r18, r28
    3632:	27 58       	subi	r18, 0x87	; 135
    3634:	3f 4f       	sbci	r19, 0xFF	; 255
    3636:	fa 01       	movw	r30, r20
    3638:	81 91       	ld	r24, Z+
    363a:	af 01       	movw	r20, r30
    363c:	8d 93       	st	X+, r24
    363e:	e2 17       	cp	r30, r18
    3640:	f3 07       	cpc	r31, r19
    3642:	c9 f7       	brne	.-14     	; 0x3636 <eepromLoadPattern+0x1d0>
    3644:	f7 01       	movw	r30, r14
    3646:	e8 53       	subi	r30, 0x38	; 56
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	eb 96       	adiw	r28, 0x3b	; 59
    364c:	8f ad       	ldd	r24, Y+63	; 0x3f
    364e:	eb 97       	sbiw	r28, 0x3b	; 59
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	98 2f       	mov	r25, r24
    3654:	88 27       	eor	r24, r24
    3656:	ec 96       	adiw	r28, 0x3c	; 60
    3658:	2f ad       	ldd	r18, Y+63	; 0x3f
    365a:	ec 97       	sbiw	r28, 0x3c	; 60
    365c:	82 2b       	or	r24, r18
    365e:	91 83       	std	Z+1, r25	; 0x01
    3660:	80 83       	st	Z, r24
    3662:	ed 96       	adiw	r28, 0x3d	; 61
    3664:	8f ad       	ldd	r24, Y+63	; 0x3f
    3666:	ed 97       	sbiw	r28, 0x3d	; 61
    3668:	32 96       	adiw	r30, 0x02	; 2
    366a:	80 83       	st	Z, r24
    366c:	ae 01       	movw	r20, r28
    366e:	4f 57       	subi	r20, 0x7F	; 127
    3670:	5f 4f       	sbci	r21, 0xFF	; 255
    3672:	c7 01       	movw	r24, r14
    3674:	88 58       	subi	r24, 0x88	; 136
    3676:	9f 4f       	sbci	r25, 0xFF	; 255
    3678:	fe 01       	movw	r30, r28
    367a:	ef 56       	subi	r30, 0x6F	; 111
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	da 01       	movw	r26, r20
    3680:	2d 91       	ld	r18, X+
    3682:	ad 01       	movw	r20, r26
    3684:	dc 01       	movw	r26, r24
    3686:	2d 93       	st	X+, r18
    3688:	cd 01       	movw	r24, r26
    368a:	e4 17       	cp	r30, r20
    368c:	f5 07       	cpc	r31, r21
    368e:	b9 f7       	brne	.-18     	; 0x367e <eepromLoadPattern+0x218>
    3690:	c7 01       	movw	r24, r14
    3692:	88 57       	subi	r24, 0x78	; 120
    3694:	9f 4f       	sbci	r25, 0xFF	; 255
    3696:	ae 01       	movw	r20, r28
    3698:	4f 55       	subi	r20, 0x5F	; 95
    369a:	5f 4f       	sbci	r21, 0xFF	; 255
    369c:	21 91       	ld	r18, Z+
    369e:	dc 01       	movw	r26, r24
    36a0:	2d 93       	st	X+, r18
    36a2:	cd 01       	movw	r24, r26
    36a4:	4e 17       	cp	r20, r30
    36a6:	5f 07       	cpc	r21, r31
    36a8:	c9 f7       	brne	.-14     	; 0x369c <eepromLoadPattern+0x236>
    36aa:	87 01       	movw	r16, r14
    36ac:	08 56       	subi	r16, 0x68	; 104
    36ae:	1f 4f       	sbci	r17, 0xFF	; 255
    36b0:	4e 01       	movw	r8, r28
    36b2:	b1 eb       	ldi	r27, 0xB1	; 177
    36b4:	8b 0e       	add	r8, r27
    36b6:	91 1c       	adc	r9, r1
    36b8:	f8 01       	movw	r30, r16
    36ba:	da 01       	movw	r26, r20
    36bc:	8d 91       	ld	r24, X+
    36be:	ad 01       	movw	r20, r26
    36c0:	81 93       	st	Z+, r24
    36c2:	8a 16       	cp	r8, r26
    36c4:	9b 06       	cpc	r9, r27
    36c6:	c9 f7       	brne	.-14     	; 0x36ba <eepromLoadPattern+0x254>
    36c8:	6e 01       	movw	r12, r28
    36ca:	b1 ec       	ldi	r27, 0xC1	; 193
    36cc:	cb 0e       	add	r12, r27
    36ce:	d1 1c       	adc	r13, r1
    36d0:	f4 01       	movw	r30, r8
    36d2:	81 91       	ld	r24, Z+
    36d4:	4f 01       	movw	r8, r30
    36d6:	f8 01       	movw	r30, r16
    36d8:	80 8b       	std	Z+16, r24	; 0x10
    36da:	d5 01       	movw	r26, r10
    36dc:	2d 91       	ld	r18, X+
    36de:	5d 01       	movw	r10, r26
    36e0:	1f 96       	adiw	r26, 0x0f	; 15
    36e2:	4c 91       	ld	r20, X
    36e4:	60 81       	ld	r22, Z
    36e6:	0f 5f       	subi	r16, 0xFF	; 255
    36e8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ea:	a6 da       	rcall	.-2740   	; 0x2c38 <setTrackVolume>
    36ec:	c8 14       	cp	r12, r8
    36ee:	d9 04       	cpc	r13, r9
    36f0:	79 f7       	brne	.-34     	; 0x36d0 <eepromLoadPattern+0x26a>
    36f2:	97 01       	movw	r18, r14
    36f4:	28 54       	subi	r18, 0x48	; 72
    36f6:	3f 4f       	sbci	r19, 0xFF	; 255
    36f8:	de 01       	movw	r26, r28
    36fa:	af 52       	subi	r26, 0x2F	; 47
    36fc:	bf 4f       	sbci	r27, 0xFF	; 255
    36fe:	f6 01       	movw	r30, r12
    3700:	81 91       	ld	r24, Z+
    3702:	6f 01       	movw	r12, r30
    3704:	f9 01       	movw	r30, r18
    3706:	81 93       	st	Z+, r24
    3708:	9f 01       	movw	r18, r30
    370a:	ca 16       	cp	r12, r26
    370c:	db 06       	cpc	r13, r27
    370e:	b9 f7       	brne	.-18     	; 0x36fe <eepromLoadPattern+0x298>
    3710:	c7 01       	movw	r24, r14
    3712:	85 53       	subi	r24, 0x35	; 53
    3714:	9f 4f       	sbci	r25, 0xFF	; 255
    3716:	ae 01       	movw	r20, r28
    3718:	4f 51       	subi	r20, 0x1F	; 31
    371a:	5f 4f       	sbci	r21, 0xFF	; 255
    371c:	2d 91       	ld	r18, X+
    371e:	fc 01       	movw	r30, r24
    3720:	21 93       	st	Z+, r18
    3722:	cf 01       	movw	r24, r30
    3724:	4a 17       	cp	r20, r26
    3726:	5b 07       	cpc	r21, r27
    3728:	c9 f7       	brne	.-14     	; 0x371c <eepromLoadPattern+0x2b6>
    372a:	c7 01       	movw	r24, r14
    372c:	85 52       	subi	r24, 0x25	; 37
    372e:	9f 4f       	sbci	r25, 0xFF	; 255
    3730:	be 01       	movw	r22, r28
    3732:	6f 50       	subi	r22, 0x0F	; 15
    3734:	7f 4f       	sbci	r23, 0xFF	; 255
    3736:	da 01       	movw	r26, r20
    3738:	2d 91       	ld	r18, X+
    373a:	ad 01       	movw	r20, r26
    373c:	fc 01       	movw	r30, r24
    373e:	21 93       	st	Z+, r18
    3740:	cf 01       	movw	r24, r30
    3742:	a6 17       	cp	r26, r22
    3744:	b7 07       	cpc	r27, r23
    3746:	b9 f7       	brne	.-18     	; 0x3736 <eepromLoadPattern+0x2d0>
    3748:	c7 01       	movw	r24, r14
    374a:	85 51       	subi	r24, 0x15	; 21
    374c:	9f 4f       	sbci	r25, 0xFF	; 255
    374e:	fe 01       	movw	r30, r28
    3750:	ef 5f       	subi	r30, 0xFF	; 255
    3752:	fe 4f       	sbci	r31, 0xFE	; 254
    3754:	db 01       	movw	r26, r22
    3756:	2d 91       	ld	r18, X+
    3758:	bd 01       	movw	r22, r26
    375a:	dc 01       	movw	r26, r24
    375c:	2d 93       	st	X+, r18
    375e:	cd 01       	movw	r24, r26
    3760:	e6 17       	cp	r30, r22
    3762:	f7 07       	cpc	r31, r23
    3764:	b9 f7       	brne	.-18     	; 0x3754 <eepromLoadPattern+0x2ee>
    3766:	d7 01       	movw	r26, r14
    3768:	a5 50       	subi	r26, 0x05	; 5
    376a:	bf 4f       	sbci	r27, 0xFF	; 255
    376c:	ae 01       	movw	r20, r28
    376e:	4f 57       	subi	r20, 0x7F	; 127
    3770:	5e 4f       	sbci	r21, 0xFE	; 254
    3772:	80 81       	ld	r24, Z
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	98 2f       	mov	r25, r24
    3778:	88 27       	eor	r24, r24
    377a:	21 81       	ldd	r18, Z+1	; 0x01
    377c:	82 2b       	or	r24, r18
    377e:	8d 93       	st	X+, r24
    3780:	9d 93       	st	X+, r25
    3782:	32 96       	adiw	r30, 0x02	; 2
    3784:	4e 17       	cp	r20, r30
    3786:	5f 07       	cpc	r21, r31
    3788:	a1 f7       	brne	.-24     	; 0x3772 <eepromLoadPattern+0x30c>
    378a:	0a c0       	rjmp	.+20     	; 0x37a0 <eepromLoadPattern+0x33a>
    378c:	fe 01       	movw	r30, r28
    378e:	31 96       	adiw	r30, 0x01	; 1
    3790:	5f 01       	movw	r10, r30
    3792:	6e 01       	movw	r12, r28
    3794:	f0 e8       	ldi	r31, 0x80	; 128
    3796:	cf 1a       	sub	r12, r31
    3798:	fe ef       	ldi	r31, 0xFE	; 254
    379a:	df 0a       	sbc	r13, r31
    379c:	85 01       	movw	r16, r10
    379e:	c0 ce       	rjmp	.-640    	; 0x3520 <eepromLoadPattern+0xba>
    37a0:	cc 56       	subi	r28, 0x6C	; 108
    37a2:	de 4f       	sbci	r29, 0xFE	; 254
    37a4:	0f b6       	in	r0, 0x3f	; 63
    37a6:	f8 94       	cli
    37a8:	de bf       	out	0x3e, r29	; 62
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	cd bf       	out	0x3d, r28	; 61
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	1f 91       	pop	r17
    37b4:	0f 91       	pop	r16
    37b6:	ff 90       	pop	r15
    37b8:	ef 90       	pop	r14
    37ba:	df 90       	pop	r13
    37bc:	cf 90       	pop	r12
    37be:	bf 90       	pop	r11
    37c0:	af 90       	pop	r10
    37c2:	9f 90       	pop	r9
    37c4:	8f 90       	pop	r8
    37c6:	08 95       	ret

000037c8 <factoryResetEeprom>:
    37c8:	1f 93       	push	r17
    37ca:	cf 93       	push	r28
    37cc:	df 93       	push	r29
    37ce:	cd b7       	in	r28, 0x3d	; 61
    37d0:	de b7       	in	r29, 0x3e	; 62
    37d2:	10 e0       	ldi	r17, 0x00	; 0
    37d4:	1f 93       	push	r17
    37d6:	8d b7       	in	r24, 0x3d	; 61
    37d8:	9e b7       	in	r25, 0x3e	; 62
    37da:	8b 57       	subi	r24, 0x7B	; 123
    37dc:	91 40       	sbci	r25, 0x01	; 1
    37de:	0f b6       	in	r0, 0x3f	; 63
    37e0:	f8 94       	cli
    37e2:	9e bf       	out	0x3e, r25	; 62
    37e4:	0f be       	out	0x3f, r0	; 63
    37e6:	8d bf       	out	0x3d, r24	; 61
    37e8:	ad b7       	in	r26, 0x3d	; 61
    37ea:	be b7       	in	r27, 0x3e	; 62
    37ec:	11 96       	adiw	r26, 0x01	; 1
    37ee:	8b e7       	ldi	r24, 0x7B	; 123
    37f0:	91 e0       	ldi	r25, 0x01	; 1
    37f2:	fe 01       	movw	r30, r28
    37f4:	37 96       	adiw	r30, 0x07	; 7
    37f6:	01 90       	ld	r0, Z+
    37f8:	0d 92       	st	X+, r0
    37fa:	01 97       	sbiw	r24, 0x01	; 1
    37fc:	e1 f7       	brne	.-8      	; 0x37f6 <factoryResetEeprom+0x2e>
    37fe:	46 dc       	rcall	.-1908   	; 0x308c <eepromSavePattern>
    3800:	8f e1       	ldi	r24, 0x1F	; 31
    3802:	9e e4       	ldi	r25, 0x4E	; 78
    3804:	01 97       	sbiw	r24, 0x01	; 1
    3806:	f1 f7       	brne	.-4      	; 0x3804 <factoryResetEeprom+0x3c>
    3808:	00 c0       	rjmp	.+0      	; 0x380a <factoryResetEeprom+0x42>
    380a:	00 00       	nop
    380c:	1f 5f       	subi	r17, 0xFF	; 255
    380e:	0f b6       	in	r0, 0x3f	; 63
    3810:	f8 94       	cli
    3812:	de bf       	out	0x3e, r29	; 62
    3814:	0f be       	out	0x3f, r0	; 63
    3816:	cd bf       	out	0x3d, r28	; 61
    3818:	1f 3f       	cpi	r17, 0xFF	; 255
    381a:	e1 f6       	brne	.-72     	; 0x37d4 <factoryResetEeprom+0xc>
    381c:	df 91       	pop	r29
    381e:	cf 91       	pop	r28
    3820:	1f 91       	pop	r17
    3822:	08 95       	ret

00003824 <globalWrite>:

//this happens when save button is pressed on global menu. 
void globalWrite(Globals *currentGlobals)
{
    3824:	cf 93       	push	r28
    3826:	df 93       	push	r29
    3828:	ec 01       	movw	r28, r24
	eeprom_write_byte(0,currentGlobals->midiChannel); //this may be wrong, but it does get rid of the warning. 
    382a:	6c 85       	ldd	r22, Y+12	; 0x0c
    382c:	80 e0       	ldi	r24, 0x00	; 0
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	46 d2       	rcall	.+1164   	; 0x3cbe <eeprom_write_byte>
	eeprom_write_block(currentGlobals->midiTrackNote,1,16);
    3832:	40 e1       	ldi	r20, 0x10	; 16
    3834:	50 e0       	ldi	r21, 0x00	; 0
    3836:	61 e0       	ldi	r22, 0x01	; 1
    3838:	70 e0       	ldi	r23, 0x00	; 0
    383a:	ce 01       	movw	r24, r28
    383c:	0d 96       	adiw	r24, 0x0d	; 13
    383e:	36 d2       	rcall	.+1132   	; 0x3cac <eeprom_write_block>
}
    3840:	df 91       	pop	r29
    3842:	cf 91       	pop	r28
    3844:	08 95       	ret

00003846 <globalLoad>:
//This happens at startup only, in function "initGlobals"

void globalLoad(Globals *currentGlobals, uint8_t factoryReset)
{
    3846:	cf 93       	push	r28
    3848:	df 93       	push	r29
	//we need to load all of the global midi settings here. 
	//we can also check the factory reset bit here. 
	//if the program has not gone through the initial state, and had the internal eeprom formatted, then this will return garbage. 
	if(factoryReset==0)
    384a:	61 11       	cpse	r22, r1
    384c:	0c c0       	rjmp	.+24     	; 0x3866 <globalLoad+0x20>
    384e:	ec 01       	movw	r28, r24
	{
		currentGlobals->midiChannel = eeprom_read_byte(0);
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	23 d2       	rcall	.+1094   	; 0x3c9c <eeprom_read_byte>
    3856:	8c 87       	std	Y+12, r24	; 0x0c
		eeprom_read_block(currentGlobals->midiTrackNote,1,16);
    3858:	40 e1       	ldi	r20, 0x10	; 16
    385a:	50 e0       	ldi	r21, 0x00	; 0
    385c:	61 e0       	ldi	r22, 0x01	; 1
    385e:	70 e0       	ldi	r23, 0x00	; 0
    3860:	ce 01       	movw	r24, r28
    3862:	0d 96       	adiw	r24, 0x0d	; 13
    3864:	0b d2       	rcall	.+1046   	; 0x3c7c <eeprom_read_block>
	}
}
    3866:	df 91       	pop	r29
    3868:	cf 91       	pop	r28
    386a:	08 95       	ret

0000386c <__subsf3>:
    386c:	50 58       	subi	r21, 0x80	; 128

0000386e <__addsf3>:
    386e:	bb 27       	eor	r27, r27
    3870:	aa 27       	eor	r26, r26
    3872:	0e d0       	rcall	.+28     	; 0x3890 <__addsf3x>
    3874:	4d c1       	rjmp	.+666    	; 0x3b10 <__fp_round>
    3876:	3e d1       	rcall	.+636    	; 0x3af4 <__fp_pscA>
    3878:	30 f0       	brcs	.+12     	; 0x3886 <__addsf3+0x18>
    387a:	43 d1       	rcall	.+646    	; 0x3b02 <__fp_pscB>
    387c:	20 f0       	brcs	.+8      	; 0x3886 <__addsf3+0x18>
    387e:	31 f4       	brne	.+12     	; 0x388c <__addsf3+0x1e>
    3880:	9f 3f       	cpi	r25, 0xFF	; 255
    3882:	11 f4       	brne	.+4      	; 0x3888 <__addsf3+0x1a>
    3884:	1e f4       	brtc	.+6      	; 0x388c <__addsf3+0x1e>
    3886:	33 c1       	rjmp	.+614    	; 0x3aee <__fp_nan>
    3888:	0e f4       	brtc	.+2      	; 0x388c <__addsf3+0x1e>
    388a:	e0 95       	com	r30
    388c:	e7 fb       	bst	r30, 7
    388e:	29 c1       	rjmp	.+594    	; 0x3ae2 <__fp_inf>

00003890 <__addsf3x>:
    3890:	e9 2f       	mov	r30, r25
    3892:	4f d1       	rcall	.+670    	; 0x3b32 <__fp_split3>
    3894:	80 f3       	brcs	.-32     	; 0x3876 <__addsf3+0x8>
    3896:	ba 17       	cp	r27, r26
    3898:	62 07       	cpc	r22, r18
    389a:	73 07       	cpc	r23, r19
    389c:	84 07       	cpc	r24, r20
    389e:	95 07       	cpc	r25, r21
    38a0:	18 f0       	brcs	.+6      	; 0x38a8 <__addsf3x+0x18>
    38a2:	71 f4       	brne	.+28     	; 0x38c0 <__addsf3x+0x30>
    38a4:	9e f5       	brtc	.+102    	; 0x390c <__addsf3x+0x7c>
    38a6:	67 c1       	rjmp	.+718    	; 0x3b76 <__fp_zero>
    38a8:	0e f4       	brtc	.+2      	; 0x38ac <__addsf3x+0x1c>
    38aa:	e0 95       	com	r30
    38ac:	0b 2e       	mov	r0, r27
    38ae:	ba 2f       	mov	r27, r26
    38b0:	a0 2d       	mov	r26, r0
    38b2:	0b 01       	movw	r0, r22
    38b4:	b9 01       	movw	r22, r18
    38b6:	90 01       	movw	r18, r0
    38b8:	0c 01       	movw	r0, r24
    38ba:	ca 01       	movw	r24, r20
    38bc:	a0 01       	movw	r20, r0
    38be:	11 24       	eor	r1, r1
    38c0:	ff 27       	eor	r31, r31
    38c2:	59 1b       	sub	r21, r25
    38c4:	99 f0       	breq	.+38     	; 0x38ec <__addsf3x+0x5c>
    38c6:	59 3f       	cpi	r21, 0xF9	; 249
    38c8:	50 f4       	brcc	.+20     	; 0x38de <__addsf3x+0x4e>
    38ca:	50 3e       	cpi	r21, 0xE0	; 224
    38cc:	68 f1       	brcs	.+90     	; 0x3928 <__addsf3x+0x98>
    38ce:	1a 16       	cp	r1, r26
    38d0:	f0 40       	sbci	r31, 0x00	; 0
    38d2:	a2 2f       	mov	r26, r18
    38d4:	23 2f       	mov	r18, r19
    38d6:	34 2f       	mov	r19, r20
    38d8:	44 27       	eor	r20, r20
    38da:	58 5f       	subi	r21, 0xF8	; 248
    38dc:	f3 cf       	rjmp	.-26     	; 0x38c4 <__addsf3x+0x34>
    38de:	46 95       	lsr	r20
    38e0:	37 95       	ror	r19
    38e2:	27 95       	ror	r18
    38e4:	a7 95       	ror	r26
    38e6:	f0 40       	sbci	r31, 0x00	; 0
    38e8:	53 95       	inc	r21
    38ea:	c9 f7       	brne	.-14     	; 0x38de <__addsf3x+0x4e>
    38ec:	7e f4       	brtc	.+30     	; 0x390c <__addsf3x+0x7c>
    38ee:	1f 16       	cp	r1, r31
    38f0:	ba 0b       	sbc	r27, r26
    38f2:	62 0b       	sbc	r22, r18
    38f4:	73 0b       	sbc	r23, r19
    38f6:	84 0b       	sbc	r24, r20
    38f8:	ba f0       	brmi	.+46     	; 0x3928 <__addsf3x+0x98>
    38fa:	91 50       	subi	r25, 0x01	; 1
    38fc:	a1 f0       	breq	.+40     	; 0x3926 <__addsf3x+0x96>
    38fe:	ff 0f       	add	r31, r31
    3900:	bb 1f       	adc	r27, r27
    3902:	66 1f       	adc	r22, r22
    3904:	77 1f       	adc	r23, r23
    3906:	88 1f       	adc	r24, r24
    3908:	c2 f7       	brpl	.-16     	; 0x38fa <__addsf3x+0x6a>
    390a:	0e c0       	rjmp	.+28     	; 0x3928 <__addsf3x+0x98>
    390c:	ba 0f       	add	r27, r26
    390e:	62 1f       	adc	r22, r18
    3910:	73 1f       	adc	r23, r19
    3912:	84 1f       	adc	r24, r20
    3914:	48 f4       	brcc	.+18     	; 0x3928 <__addsf3x+0x98>
    3916:	87 95       	ror	r24
    3918:	77 95       	ror	r23
    391a:	67 95       	ror	r22
    391c:	b7 95       	ror	r27
    391e:	f7 95       	ror	r31
    3920:	9e 3f       	cpi	r25, 0xFE	; 254
    3922:	08 f0       	brcs	.+2      	; 0x3926 <__addsf3x+0x96>
    3924:	b3 cf       	rjmp	.-154    	; 0x388c <__addsf3+0x1e>
    3926:	93 95       	inc	r25
    3928:	88 0f       	add	r24, r24
    392a:	08 f0       	brcs	.+2      	; 0x392e <__addsf3x+0x9e>
    392c:	99 27       	eor	r25, r25
    392e:	ee 0f       	add	r30, r30
    3930:	97 95       	ror	r25
    3932:	87 95       	ror	r24
    3934:	08 95       	ret

00003936 <__divsf3>:
    3936:	0c d0       	rcall	.+24     	; 0x3950 <__divsf3x>
    3938:	eb c0       	rjmp	.+470    	; 0x3b10 <__fp_round>
    393a:	e3 d0       	rcall	.+454    	; 0x3b02 <__fp_pscB>
    393c:	40 f0       	brcs	.+16     	; 0x394e <__divsf3+0x18>
    393e:	da d0       	rcall	.+436    	; 0x3af4 <__fp_pscA>
    3940:	30 f0       	brcs	.+12     	; 0x394e <__divsf3+0x18>
    3942:	21 f4       	brne	.+8      	; 0x394c <__divsf3+0x16>
    3944:	5f 3f       	cpi	r21, 0xFF	; 255
    3946:	19 f0       	breq	.+6      	; 0x394e <__divsf3+0x18>
    3948:	cc c0       	rjmp	.+408    	; 0x3ae2 <__fp_inf>
    394a:	51 11       	cpse	r21, r1
    394c:	15 c1       	rjmp	.+554    	; 0x3b78 <__fp_szero>
    394e:	cf c0       	rjmp	.+414    	; 0x3aee <__fp_nan>

00003950 <__divsf3x>:
    3950:	f0 d0       	rcall	.+480    	; 0x3b32 <__fp_split3>
    3952:	98 f3       	brcs	.-26     	; 0x393a <__divsf3+0x4>

00003954 <__divsf3_pse>:
    3954:	99 23       	and	r25, r25
    3956:	c9 f3       	breq	.-14     	; 0x394a <__divsf3+0x14>
    3958:	55 23       	and	r21, r21
    395a:	b1 f3       	breq	.-20     	; 0x3948 <__divsf3+0x12>
    395c:	95 1b       	sub	r25, r21
    395e:	55 0b       	sbc	r21, r21
    3960:	bb 27       	eor	r27, r27
    3962:	aa 27       	eor	r26, r26
    3964:	62 17       	cp	r22, r18
    3966:	73 07       	cpc	r23, r19
    3968:	84 07       	cpc	r24, r20
    396a:	38 f0       	brcs	.+14     	; 0x397a <__divsf3_pse+0x26>
    396c:	9f 5f       	subi	r25, 0xFF	; 255
    396e:	5f 4f       	sbci	r21, 0xFF	; 255
    3970:	22 0f       	add	r18, r18
    3972:	33 1f       	adc	r19, r19
    3974:	44 1f       	adc	r20, r20
    3976:	aa 1f       	adc	r26, r26
    3978:	a9 f3       	breq	.-22     	; 0x3964 <__divsf3_pse+0x10>
    397a:	33 d0       	rcall	.+102    	; 0x39e2 <__divsf3_pse+0x8e>
    397c:	0e 2e       	mov	r0, r30
    397e:	3a f0       	brmi	.+14     	; 0x398e <__divsf3_pse+0x3a>
    3980:	e0 e8       	ldi	r30, 0x80	; 128
    3982:	30 d0       	rcall	.+96     	; 0x39e4 <__divsf3_pse+0x90>
    3984:	91 50       	subi	r25, 0x01	; 1
    3986:	50 40       	sbci	r21, 0x00	; 0
    3988:	e6 95       	lsr	r30
    398a:	00 1c       	adc	r0, r0
    398c:	ca f7       	brpl	.-14     	; 0x3980 <__divsf3_pse+0x2c>
    398e:	29 d0       	rcall	.+82     	; 0x39e2 <__divsf3_pse+0x8e>
    3990:	fe 2f       	mov	r31, r30
    3992:	27 d0       	rcall	.+78     	; 0x39e2 <__divsf3_pse+0x8e>
    3994:	66 0f       	add	r22, r22
    3996:	77 1f       	adc	r23, r23
    3998:	88 1f       	adc	r24, r24
    399a:	bb 1f       	adc	r27, r27
    399c:	26 17       	cp	r18, r22
    399e:	37 07       	cpc	r19, r23
    39a0:	48 07       	cpc	r20, r24
    39a2:	ab 07       	cpc	r26, r27
    39a4:	b0 e8       	ldi	r27, 0x80	; 128
    39a6:	09 f0       	breq	.+2      	; 0x39aa <__divsf3_pse+0x56>
    39a8:	bb 0b       	sbc	r27, r27
    39aa:	80 2d       	mov	r24, r0
    39ac:	bf 01       	movw	r22, r30
    39ae:	ff 27       	eor	r31, r31
    39b0:	93 58       	subi	r25, 0x83	; 131
    39b2:	5f 4f       	sbci	r21, 0xFF	; 255
    39b4:	2a f0       	brmi	.+10     	; 0x39c0 <__divsf3_pse+0x6c>
    39b6:	9e 3f       	cpi	r25, 0xFE	; 254
    39b8:	51 05       	cpc	r21, r1
    39ba:	68 f0       	brcs	.+26     	; 0x39d6 <__divsf3_pse+0x82>
    39bc:	92 c0       	rjmp	.+292    	; 0x3ae2 <__fp_inf>
    39be:	dc c0       	rjmp	.+440    	; 0x3b78 <__fp_szero>
    39c0:	5f 3f       	cpi	r21, 0xFF	; 255
    39c2:	ec f3       	brlt	.-6      	; 0x39be <__divsf3_pse+0x6a>
    39c4:	98 3e       	cpi	r25, 0xE8	; 232
    39c6:	dc f3       	brlt	.-10     	; 0x39be <__divsf3_pse+0x6a>
    39c8:	86 95       	lsr	r24
    39ca:	77 95       	ror	r23
    39cc:	67 95       	ror	r22
    39ce:	b7 95       	ror	r27
    39d0:	f7 95       	ror	r31
    39d2:	9f 5f       	subi	r25, 0xFF	; 255
    39d4:	c9 f7       	brne	.-14     	; 0x39c8 <__divsf3_pse+0x74>
    39d6:	88 0f       	add	r24, r24
    39d8:	91 1d       	adc	r25, r1
    39da:	96 95       	lsr	r25
    39dc:	87 95       	ror	r24
    39de:	97 f9       	bld	r25, 7
    39e0:	08 95       	ret
    39e2:	e1 e0       	ldi	r30, 0x01	; 1
    39e4:	66 0f       	add	r22, r22
    39e6:	77 1f       	adc	r23, r23
    39e8:	88 1f       	adc	r24, r24
    39ea:	bb 1f       	adc	r27, r27
    39ec:	62 17       	cp	r22, r18
    39ee:	73 07       	cpc	r23, r19
    39f0:	84 07       	cpc	r24, r20
    39f2:	ba 07       	cpc	r27, r26
    39f4:	20 f0       	brcs	.+8      	; 0x39fe <__divsf3_pse+0xaa>
    39f6:	62 1b       	sub	r22, r18
    39f8:	73 0b       	sbc	r23, r19
    39fa:	84 0b       	sbc	r24, r20
    39fc:	ba 0b       	sbc	r27, r26
    39fe:	ee 1f       	adc	r30, r30
    3a00:	88 f7       	brcc	.-30     	; 0x39e4 <__divsf3_pse+0x90>
    3a02:	e0 95       	com	r30
    3a04:	08 95       	ret

00003a06 <__fixsfsi>:
    3a06:	04 d0       	rcall	.+8      	; 0x3a10 <__fixunssfsi>
    3a08:	68 94       	set
    3a0a:	b1 11       	cpse	r27, r1
    3a0c:	b5 c0       	rjmp	.+362    	; 0x3b78 <__fp_szero>
    3a0e:	08 95       	ret

00003a10 <__fixunssfsi>:
    3a10:	98 d0       	rcall	.+304    	; 0x3b42 <__fp_splitA>
    3a12:	88 f0       	brcs	.+34     	; 0x3a36 <__fixunssfsi+0x26>
    3a14:	9f 57       	subi	r25, 0x7F	; 127
    3a16:	90 f0       	brcs	.+36     	; 0x3a3c <__fixunssfsi+0x2c>
    3a18:	b9 2f       	mov	r27, r25
    3a1a:	99 27       	eor	r25, r25
    3a1c:	b7 51       	subi	r27, 0x17	; 23
    3a1e:	a0 f0       	brcs	.+40     	; 0x3a48 <__fixunssfsi+0x38>
    3a20:	d1 f0       	breq	.+52     	; 0x3a56 <__fixunssfsi+0x46>
    3a22:	66 0f       	add	r22, r22
    3a24:	77 1f       	adc	r23, r23
    3a26:	88 1f       	adc	r24, r24
    3a28:	99 1f       	adc	r25, r25
    3a2a:	1a f0       	brmi	.+6      	; 0x3a32 <__fixunssfsi+0x22>
    3a2c:	ba 95       	dec	r27
    3a2e:	c9 f7       	brne	.-14     	; 0x3a22 <__fixunssfsi+0x12>
    3a30:	12 c0       	rjmp	.+36     	; 0x3a56 <__fixunssfsi+0x46>
    3a32:	b1 30       	cpi	r27, 0x01	; 1
    3a34:	81 f0       	breq	.+32     	; 0x3a56 <__fixunssfsi+0x46>
    3a36:	9f d0       	rcall	.+318    	; 0x3b76 <__fp_zero>
    3a38:	b1 e0       	ldi	r27, 0x01	; 1
    3a3a:	08 95       	ret
    3a3c:	9c c0       	rjmp	.+312    	; 0x3b76 <__fp_zero>
    3a3e:	67 2f       	mov	r22, r23
    3a40:	78 2f       	mov	r23, r24
    3a42:	88 27       	eor	r24, r24
    3a44:	b8 5f       	subi	r27, 0xF8	; 248
    3a46:	39 f0       	breq	.+14     	; 0x3a56 <__fixunssfsi+0x46>
    3a48:	b9 3f       	cpi	r27, 0xF9	; 249
    3a4a:	cc f3       	brlt	.-14     	; 0x3a3e <__fixunssfsi+0x2e>
    3a4c:	86 95       	lsr	r24
    3a4e:	77 95       	ror	r23
    3a50:	67 95       	ror	r22
    3a52:	b3 95       	inc	r27
    3a54:	d9 f7       	brne	.-10     	; 0x3a4c <__fixunssfsi+0x3c>
    3a56:	3e f4       	brtc	.+14     	; 0x3a66 <__fixunssfsi+0x56>
    3a58:	90 95       	com	r25
    3a5a:	80 95       	com	r24
    3a5c:	70 95       	com	r23
    3a5e:	61 95       	neg	r22
    3a60:	7f 4f       	sbci	r23, 0xFF	; 255
    3a62:	8f 4f       	sbci	r24, 0xFF	; 255
    3a64:	9f 4f       	sbci	r25, 0xFF	; 255
    3a66:	08 95       	ret

00003a68 <__floatunsisf>:
    3a68:	e8 94       	clt
    3a6a:	09 c0       	rjmp	.+18     	; 0x3a7e <__floatsisf+0x12>

00003a6c <__floatsisf>:
    3a6c:	97 fb       	bst	r25, 7
    3a6e:	3e f4       	brtc	.+14     	; 0x3a7e <__floatsisf+0x12>
    3a70:	90 95       	com	r25
    3a72:	80 95       	com	r24
    3a74:	70 95       	com	r23
    3a76:	61 95       	neg	r22
    3a78:	7f 4f       	sbci	r23, 0xFF	; 255
    3a7a:	8f 4f       	sbci	r24, 0xFF	; 255
    3a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a7e:	99 23       	and	r25, r25
    3a80:	a9 f0       	breq	.+42     	; 0x3aac <__floatsisf+0x40>
    3a82:	f9 2f       	mov	r31, r25
    3a84:	96 e9       	ldi	r25, 0x96	; 150
    3a86:	bb 27       	eor	r27, r27
    3a88:	93 95       	inc	r25
    3a8a:	f6 95       	lsr	r31
    3a8c:	87 95       	ror	r24
    3a8e:	77 95       	ror	r23
    3a90:	67 95       	ror	r22
    3a92:	b7 95       	ror	r27
    3a94:	f1 11       	cpse	r31, r1
    3a96:	f8 cf       	rjmp	.-16     	; 0x3a88 <__floatsisf+0x1c>
    3a98:	fa f4       	brpl	.+62     	; 0x3ad8 <__floatsisf+0x6c>
    3a9a:	bb 0f       	add	r27, r27
    3a9c:	11 f4       	brne	.+4      	; 0x3aa2 <__floatsisf+0x36>
    3a9e:	60 ff       	sbrs	r22, 0
    3aa0:	1b c0       	rjmp	.+54     	; 0x3ad8 <__floatsisf+0x6c>
    3aa2:	6f 5f       	subi	r22, 0xFF	; 255
    3aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    3aa6:	8f 4f       	sbci	r24, 0xFF	; 255
    3aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    3aaa:	16 c0       	rjmp	.+44     	; 0x3ad8 <__floatsisf+0x6c>
    3aac:	88 23       	and	r24, r24
    3aae:	11 f0       	breq	.+4      	; 0x3ab4 <__floatsisf+0x48>
    3ab0:	96 e9       	ldi	r25, 0x96	; 150
    3ab2:	11 c0       	rjmp	.+34     	; 0x3ad6 <__floatsisf+0x6a>
    3ab4:	77 23       	and	r23, r23
    3ab6:	21 f0       	breq	.+8      	; 0x3ac0 <__floatsisf+0x54>
    3ab8:	9e e8       	ldi	r25, 0x8E	; 142
    3aba:	87 2f       	mov	r24, r23
    3abc:	76 2f       	mov	r23, r22
    3abe:	05 c0       	rjmp	.+10     	; 0x3aca <__floatsisf+0x5e>
    3ac0:	66 23       	and	r22, r22
    3ac2:	71 f0       	breq	.+28     	; 0x3ae0 <__floatsisf+0x74>
    3ac4:	96 e8       	ldi	r25, 0x86	; 134
    3ac6:	86 2f       	mov	r24, r22
    3ac8:	70 e0       	ldi	r23, 0x00	; 0
    3aca:	60 e0       	ldi	r22, 0x00	; 0
    3acc:	2a f0       	brmi	.+10     	; 0x3ad8 <__floatsisf+0x6c>
    3ace:	9a 95       	dec	r25
    3ad0:	66 0f       	add	r22, r22
    3ad2:	77 1f       	adc	r23, r23
    3ad4:	88 1f       	adc	r24, r24
    3ad6:	da f7       	brpl	.-10     	; 0x3ace <__floatsisf+0x62>
    3ad8:	88 0f       	add	r24, r24
    3ada:	96 95       	lsr	r25
    3adc:	87 95       	ror	r24
    3ade:	97 f9       	bld	r25, 7
    3ae0:	08 95       	ret

00003ae2 <__fp_inf>:
    3ae2:	97 f9       	bld	r25, 7
    3ae4:	9f 67       	ori	r25, 0x7F	; 127
    3ae6:	80 e8       	ldi	r24, 0x80	; 128
    3ae8:	70 e0       	ldi	r23, 0x00	; 0
    3aea:	60 e0       	ldi	r22, 0x00	; 0
    3aec:	08 95       	ret

00003aee <__fp_nan>:
    3aee:	9f ef       	ldi	r25, 0xFF	; 255
    3af0:	80 ec       	ldi	r24, 0xC0	; 192
    3af2:	08 95       	ret

00003af4 <__fp_pscA>:
    3af4:	00 24       	eor	r0, r0
    3af6:	0a 94       	dec	r0
    3af8:	16 16       	cp	r1, r22
    3afa:	17 06       	cpc	r1, r23
    3afc:	18 06       	cpc	r1, r24
    3afe:	09 06       	cpc	r0, r25
    3b00:	08 95       	ret

00003b02 <__fp_pscB>:
    3b02:	00 24       	eor	r0, r0
    3b04:	0a 94       	dec	r0
    3b06:	12 16       	cp	r1, r18
    3b08:	13 06       	cpc	r1, r19
    3b0a:	14 06       	cpc	r1, r20
    3b0c:	05 06       	cpc	r0, r21
    3b0e:	08 95       	ret

00003b10 <__fp_round>:
    3b10:	09 2e       	mov	r0, r25
    3b12:	03 94       	inc	r0
    3b14:	00 0c       	add	r0, r0
    3b16:	11 f4       	brne	.+4      	; 0x3b1c <__fp_round+0xc>
    3b18:	88 23       	and	r24, r24
    3b1a:	52 f0       	brmi	.+20     	; 0x3b30 <__fp_round+0x20>
    3b1c:	bb 0f       	add	r27, r27
    3b1e:	40 f4       	brcc	.+16     	; 0x3b30 <__fp_round+0x20>
    3b20:	bf 2b       	or	r27, r31
    3b22:	11 f4       	brne	.+4      	; 0x3b28 <__fp_round+0x18>
    3b24:	60 ff       	sbrs	r22, 0
    3b26:	04 c0       	rjmp	.+8      	; 0x3b30 <__fp_round+0x20>
    3b28:	6f 5f       	subi	r22, 0xFF	; 255
    3b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b2c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b30:	08 95       	ret

00003b32 <__fp_split3>:
    3b32:	57 fd       	sbrc	r21, 7
    3b34:	90 58       	subi	r25, 0x80	; 128
    3b36:	44 0f       	add	r20, r20
    3b38:	55 1f       	adc	r21, r21
    3b3a:	59 f0       	breq	.+22     	; 0x3b52 <__fp_splitA+0x10>
    3b3c:	5f 3f       	cpi	r21, 0xFF	; 255
    3b3e:	71 f0       	breq	.+28     	; 0x3b5c <__fp_splitA+0x1a>
    3b40:	47 95       	ror	r20

00003b42 <__fp_splitA>:
    3b42:	88 0f       	add	r24, r24
    3b44:	97 fb       	bst	r25, 7
    3b46:	99 1f       	adc	r25, r25
    3b48:	61 f0       	breq	.+24     	; 0x3b62 <__fp_splitA+0x20>
    3b4a:	9f 3f       	cpi	r25, 0xFF	; 255
    3b4c:	79 f0       	breq	.+30     	; 0x3b6c <__fp_splitA+0x2a>
    3b4e:	87 95       	ror	r24
    3b50:	08 95       	ret
    3b52:	12 16       	cp	r1, r18
    3b54:	13 06       	cpc	r1, r19
    3b56:	14 06       	cpc	r1, r20
    3b58:	55 1f       	adc	r21, r21
    3b5a:	f2 cf       	rjmp	.-28     	; 0x3b40 <__fp_split3+0xe>
    3b5c:	46 95       	lsr	r20
    3b5e:	f1 df       	rcall	.-30     	; 0x3b42 <__fp_splitA>
    3b60:	08 c0       	rjmp	.+16     	; 0x3b72 <__fp_splitA+0x30>
    3b62:	16 16       	cp	r1, r22
    3b64:	17 06       	cpc	r1, r23
    3b66:	18 06       	cpc	r1, r24
    3b68:	99 1f       	adc	r25, r25
    3b6a:	f1 cf       	rjmp	.-30     	; 0x3b4e <__fp_splitA+0xc>
    3b6c:	86 95       	lsr	r24
    3b6e:	71 05       	cpc	r23, r1
    3b70:	61 05       	cpc	r22, r1
    3b72:	08 94       	sec
    3b74:	08 95       	ret

00003b76 <__fp_zero>:
    3b76:	e8 94       	clt

00003b78 <__fp_szero>:
    3b78:	bb 27       	eor	r27, r27
    3b7a:	66 27       	eor	r22, r22
    3b7c:	77 27       	eor	r23, r23
    3b7e:	cb 01       	movw	r24, r22
    3b80:	97 f9       	bld	r25, 7
    3b82:	08 95       	ret

00003b84 <__divmodhi4>:
    3b84:	97 fb       	bst	r25, 7
    3b86:	07 2e       	mov	r0, r23
    3b88:	16 f4       	brtc	.+4      	; 0x3b8e <__divmodhi4+0xa>
    3b8a:	00 94       	com	r0
    3b8c:	06 d0       	rcall	.+12     	; 0x3b9a <__divmodhi4_neg1>
    3b8e:	77 fd       	sbrc	r23, 7
    3b90:	08 d0       	rcall	.+16     	; 0x3ba2 <__divmodhi4_neg2>
    3b92:	3e d0       	rcall	.+124    	; 0x3c10 <__udivmodhi4>
    3b94:	07 fc       	sbrc	r0, 7
    3b96:	05 d0       	rcall	.+10     	; 0x3ba2 <__divmodhi4_neg2>
    3b98:	3e f4       	brtc	.+14     	; 0x3ba8 <__divmodhi4_exit>

00003b9a <__divmodhi4_neg1>:
    3b9a:	90 95       	com	r25
    3b9c:	81 95       	neg	r24
    3b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba0:	08 95       	ret

00003ba2 <__divmodhi4_neg2>:
    3ba2:	70 95       	com	r23
    3ba4:	61 95       	neg	r22
    3ba6:	7f 4f       	sbci	r23, 0xFF	; 255

00003ba8 <__divmodhi4_exit>:
    3ba8:	08 95       	ret

00003baa <__divmodsi4>:
    3baa:	05 2e       	mov	r0, r21
    3bac:	97 fb       	bst	r25, 7
    3bae:	16 f4       	brtc	.+4      	; 0x3bb4 <__divmodsi4+0xa>
    3bb0:	00 94       	com	r0
    3bb2:	0f d0       	rcall	.+30     	; 0x3bd2 <__negsi2>
    3bb4:	57 fd       	sbrc	r21, 7
    3bb6:	05 d0       	rcall	.+10     	; 0x3bc2 <__divmodsi4_neg2>
    3bb8:	3f d0       	rcall	.+126    	; 0x3c38 <__udivmodsi4>
    3bba:	07 fc       	sbrc	r0, 7
    3bbc:	02 d0       	rcall	.+4      	; 0x3bc2 <__divmodsi4_neg2>
    3bbe:	46 f4       	brtc	.+16     	; 0x3bd0 <__divmodsi4_exit>
    3bc0:	08 c0       	rjmp	.+16     	; 0x3bd2 <__negsi2>

00003bc2 <__divmodsi4_neg2>:
    3bc2:	50 95       	com	r21
    3bc4:	40 95       	com	r20
    3bc6:	30 95       	com	r19
    3bc8:	21 95       	neg	r18
    3bca:	3f 4f       	sbci	r19, 0xFF	; 255
    3bcc:	4f 4f       	sbci	r20, 0xFF	; 255
    3bce:	5f 4f       	sbci	r21, 0xFF	; 255

00003bd0 <__divmodsi4_exit>:
    3bd0:	08 95       	ret

00003bd2 <__negsi2>:
    3bd2:	90 95       	com	r25
    3bd4:	80 95       	com	r24
    3bd6:	70 95       	com	r23
    3bd8:	61 95       	neg	r22
    3bda:	7f 4f       	sbci	r23, 0xFF	; 255
    3bdc:	8f 4f       	sbci	r24, 0xFF	; 255
    3bde:	9f 4f       	sbci	r25, 0xFF	; 255
    3be0:	08 95       	ret

00003be2 <__tablejump2__>:
    3be2:	ee 0f       	add	r30, r30
    3be4:	ff 1f       	adc	r31, r31
    3be6:	88 1f       	adc	r24, r24
    3be8:	8b bf       	out	0x3b, r24	; 59
    3bea:	07 90       	elpm	r0, Z+
    3bec:	f6 91       	elpm	r31, Z
    3bee:	e0 2d       	mov	r30, r0
    3bf0:	19 94       	eijmp

00003bf2 <__umulhisi3>:
    3bf2:	a2 9f       	mul	r26, r18
    3bf4:	b0 01       	movw	r22, r0
    3bf6:	b3 9f       	mul	r27, r19
    3bf8:	c0 01       	movw	r24, r0
    3bfa:	a3 9f       	mul	r26, r19
    3bfc:	70 0d       	add	r23, r0
    3bfe:	81 1d       	adc	r24, r1
    3c00:	11 24       	eor	r1, r1
    3c02:	91 1d       	adc	r25, r1
    3c04:	b2 9f       	mul	r27, r18
    3c06:	70 0d       	add	r23, r0
    3c08:	81 1d       	adc	r24, r1
    3c0a:	11 24       	eor	r1, r1
    3c0c:	91 1d       	adc	r25, r1
    3c0e:	08 95       	ret

00003c10 <__udivmodhi4>:
    3c10:	aa 1b       	sub	r26, r26
    3c12:	bb 1b       	sub	r27, r27
    3c14:	51 e1       	ldi	r21, 0x11	; 17
    3c16:	07 c0       	rjmp	.+14     	; 0x3c26 <__udivmodhi4_ep>

00003c18 <__udivmodhi4_loop>:
    3c18:	aa 1f       	adc	r26, r26
    3c1a:	bb 1f       	adc	r27, r27
    3c1c:	a6 17       	cp	r26, r22
    3c1e:	b7 07       	cpc	r27, r23
    3c20:	10 f0       	brcs	.+4      	; 0x3c26 <__udivmodhi4_ep>
    3c22:	a6 1b       	sub	r26, r22
    3c24:	b7 0b       	sbc	r27, r23

00003c26 <__udivmodhi4_ep>:
    3c26:	88 1f       	adc	r24, r24
    3c28:	99 1f       	adc	r25, r25
    3c2a:	5a 95       	dec	r21
    3c2c:	a9 f7       	brne	.-22     	; 0x3c18 <__udivmodhi4_loop>
    3c2e:	80 95       	com	r24
    3c30:	90 95       	com	r25
    3c32:	bc 01       	movw	r22, r24
    3c34:	cd 01       	movw	r24, r26
    3c36:	08 95       	ret

00003c38 <__udivmodsi4>:
    3c38:	a1 e2       	ldi	r26, 0x21	; 33
    3c3a:	1a 2e       	mov	r1, r26
    3c3c:	aa 1b       	sub	r26, r26
    3c3e:	bb 1b       	sub	r27, r27
    3c40:	fd 01       	movw	r30, r26
    3c42:	0d c0       	rjmp	.+26     	; 0x3c5e <__udivmodsi4_ep>

00003c44 <__udivmodsi4_loop>:
    3c44:	aa 1f       	adc	r26, r26
    3c46:	bb 1f       	adc	r27, r27
    3c48:	ee 1f       	adc	r30, r30
    3c4a:	ff 1f       	adc	r31, r31
    3c4c:	a2 17       	cp	r26, r18
    3c4e:	b3 07       	cpc	r27, r19
    3c50:	e4 07       	cpc	r30, r20
    3c52:	f5 07       	cpc	r31, r21
    3c54:	20 f0       	brcs	.+8      	; 0x3c5e <__udivmodsi4_ep>
    3c56:	a2 1b       	sub	r26, r18
    3c58:	b3 0b       	sbc	r27, r19
    3c5a:	e4 0b       	sbc	r30, r20
    3c5c:	f5 0b       	sbc	r31, r21

00003c5e <__udivmodsi4_ep>:
    3c5e:	66 1f       	adc	r22, r22
    3c60:	77 1f       	adc	r23, r23
    3c62:	88 1f       	adc	r24, r24
    3c64:	99 1f       	adc	r25, r25
    3c66:	1a 94       	dec	r1
    3c68:	69 f7       	brne	.-38     	; 0x3c44 <__udivmodsi4_loop>
    3c6a:	60 95       	com	r22
    3c6c:	70 95       	com	r23
    3c6e:	80 95       	com	r24
    3c70:	90 95       	com	r25
    3c72:	9b 01       	movw	r18, r22
    3c74:	ac 01       	movw	r20, r24
    3c76:	bd 01       	movw	r22, r26
    3c78:	cf 01       	movw	r24, r30
    3c7a:	08 95       	ret

00003c7c <eeprom_read_block>:
    3c7c:	dc 01       	movw	r26, r24
    3c7e:	cb 01       	movw	r24, r22

00003c80 <eeprom_read_blraw>:
    3c80:	fc 01       	movw	r30, r24
    3c82:	f9 99       	sbic	0x1f, 1	; 31
    3c84:	fe cf       	rjmp	.-4      	; 0x3c82 <eeprom_read_blraw+0x2>
    3c86:	06 c0       	rjmp	.+12     	; 0x3c94 <eeprom_read_blraw+0x14>
    3c88:	f2 bd       	out	0x22, r31	; 34
    3c8a:	e1 bd       	out	0x21, r30	; 33
    3c8c:	f8 9a       	sbi	0x1f, 0	; 31
    3c8e:	31 96       	adiw	r30, 0x01	; 1
    3c90:	00 b4       	in	r0, 0x20	; 32
    3c92:	0d 92       	st	X+, r0
    3c94:	41 50       	subi	r20, 0x01	; 1
    3c96:	50 40       	sbci	r21, 0x00	; 0
    3c98:	b8 f7       	brcc	.-18     	; 0x3c88 <eeprom_read_blraw+0x8>
    3c9a:	08 95       	ret

00003c9c <eeprom_read_byte>:
    3c9c:	f9 99       	sbic	0x1f, 1	; 31
    3c9e:	fe cf       	rjmp	.-4      	; 0x3c9c <eeprom_read_byte>
    3ca0:	92 bd       	out	0x22, r25	; 34
    3ca2:	81 bd       	out	0x21, r24	; 33
    3ca4:	f8 9a       	sbi	0x1f, 0	; 31
    3ca6:	99 27       	eor	r25, r25
    3ca8:	80 b5       	in	r24, 0x20	; 32
    3caa:	08 95       	ret

00003cac <eeprom_write_block>:
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	02 c0       	rjmp	.+4      	; 0x3cb6 <eeprom_write_block+0xa>
    3cb2:	2d 91       	ld	r18, X+
    3cb4:	05 d0       	rcall	.+10     	; 0x3cc0 <eeprom_write_r18>
    3cb6:	41 50       	subi	r20, 0x01	; 1
    3cb8:	50 40       	sbci	r21, 0x00	; 0
    3cba:	d8 f7       	brcc	.-10     	; 0x3cb2 <eeprom_write_block+0x6>
    3cbc:	08 95       	ret

00003cbe <eeprom_write_byte>:
    3cbe:	26 2f       	mov	r18, r22

00003cc0 <eeprom_write_r18>:
    3cc0:	f9 99       	sbic	0x1f, 1	; 31
    3cc2:	fe cf       	rjmp	.-4      	; 0x3cc0 <eeprom_write_r18>
    3cc4:	1f ba       	out	0x1f, r1	; 31
    3cc6:	92 bd       	out	0x22, r25	; 34
    3cc8:	81 bd       	out	0x21, r24	; 33
    3cca:	20 bd       	out	0x20, r18	; 32
    3ccc:	0f b6       	in	r0, 0x3f	; 63
    3cce:	f8 94       	cli
    3cd0:	fa 9a       	sbi	0x1f, 2	; 31
    3cd2:	f9 9a       	sbi	0x1f, 1	; 31
    3cd4:	0f be       	out	0x3f, r0	; 63
    3cd6:	01 96       	adiw	r24, 0x01	; 1
    3cd8:	08 95       	ret

00003cda <_exit>:
    3cda:	f8 94       	cli

00003cdc <__stop_program>:
    3cdc:	ff cf       	rjmp	.-2      	; 0x3cdc <__stop_program>
