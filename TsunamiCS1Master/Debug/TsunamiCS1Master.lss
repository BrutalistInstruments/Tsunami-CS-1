
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015a  00800200  00001ea2  00001f36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ea2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000416  0080035a  0080035a  00002090  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c84  00000000  00000000  00002370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001729  00000000  00000000  00006ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bc9  00000000  00000000  0000871d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e8  00000000  00000000  0000a2e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f84  00000000  00000000  0000a8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021ae  00000000  00000000  0000b854  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000da02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__vector_27>
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__vector_36>
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 ea       	ldi	r30, 0xA2	; 162
      fc:	fe e1       	ldi	r31, 0x1E	; 30
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 35       	cpi	r26, 0x5A	; 90
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	27 e0       	ldi	r18, 0x07	; 7
     110:	aa e5       	ldi	r26, 0x5A	; 90
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a0 37       	cpi	r26, 0x70	; 112
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	43 d5       	rcall	.+2694   	; 0xba6 <main>
     120:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     126:	8f ef       	ldi	r24, 0xFF	; 255
     128:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     12a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons and Encoder buttons
	PORTB = 0B01111111;
     12e:	8f e7       	ldi	r24, 0x7F	; 127
     130:	85 b9       	out	0x05, r24	; 5
     132:	08 95       	ret

00000134 <listenTrigButtons>:
	
}


void listenTrigButtons()
{
     134:	2f 92       	push	r2
     136:	3f 92       	push	r3
     138:	4f 92       	push	r4
     13a:	5f 92       	push	r5
     13c:	6f 92       	push	r6
     13e:	7f 92       	push	r7
     140:	8f 92       	push	r8
     142:	9f 92       	push	r9
     144:	af 92       	push	r10
     146:	bf 92       	push	r11
     148:	cf 92       	push	r12
     14a:	df 92       	push	r13
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     158:	c0 91 09 01 	lds	r28, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     15c:	c0 95       	com	r28
     15e:	c0 93 c5 04 	sts	0x04C5, r28	; 0x8004c5 <buttonsCurrentCycle>
	currentTrigButtons = (buttonsCurrentCycle << 8) | (PINA^255);
     162:	80 b1       	in	r24, 0x00	; 0
     164:	d0 e0       	ldi	r29, 0x00	; 0
     166:	dc 2f       	mov	r29, r28
     168:	cc 27       	eor	r28, r28
     16a:	80 95       	com	r24
     16c:	c8 2b       	or	r28, r24
     16e:	d0 93 94 05 	sts	0x0594, r29	; 0x800594 <currentTrigButtons+0x1>
     172:	c0 93 93 05 	sts	0x0593, r28	; 0x800593 <currentTrigButtons>
	if(currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     176:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <__data_end>
     17a:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <__data_end+0x1>
     17e:	c8 17       	cp	r28, r24
     180:	d9 07       	cpc	r29, r25
     182:	09 f4       	brne	.+2      	; 0x186 <listenTrigButtons+0x52>
     184:	a0 c0       	rjmp	.+320    	; 0x2c6 <listenTrigButtons+0x192>
	{
		lastFullBits = currentTrigButtons;
     186:	d0 93 5b 03 	sts	0x035B, r29	; 0x80035b <__data_end+0x1>
     18a:	c0 93 5a 03 	sts	0x035A, r28	; 0x80035a <__data_end>
     18e:	0f 2e       	mov	r0, r31
     190:	f2 e8       	ldi	r31, 0x82	; 130
     192:	ef 2e       	mov	r14, r31
     194:	f3 e0       	ldi	r31, 0x03	; 3
     196:	ff 2e       	mov	r15, r31
     198:	f0 2d       	mov	r31, r0
     19a:	02 ef       	ldi	r16, 0xF2	; 242
     19c:	13 e0       	ldi	r17, 0x03	; 3
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     19e:	51 2c       	mov	r5, r1
				
				case 2: ;
				//select track for sample assignment
				uint16_t currentSample = (currentPattern.trackSampleMSB[bc]<<8)|(currentPattern.trackSampleLSB[bc]);
				currentTrack = bc;
				numPrinter(screen2[1], 7, 2, (bc+1));
     1a0:	89 ee       	ldi	r24, 0xE9	; 233
     1a2:	9f ef       	ldi	r25, 0xFF	; 255
     1a4:	9c 01       	movw	r18, r24
     1a6:	2a 56       	subi	r18, 0x6A	; 106
     1a8:	33 40       	sbci	r19, 0x03	; 3
     1aa:	49 01       	movw	r8, r18
				numPrinter(screen2[1], 10, 4, currentSample);
				outputS(screen2[1], 1);
				switch (currentPattern.trackPlayMode[bc])
				{
					case 0:
					screen2[2][10] = 'P';
     1ac:	0f 2e       	mov	r0, r31
     1ae:	f7 e9       	ldi	r31, 0x97	; 151
     1b0:	af 2e       	mov	r10, r31
     1b2:	f5 e0       	ldi	r31, 0x05	; 5
     1b4:	bf 2e       	mov	r11, r31
     1b6:	f0 2d       	mov	r31, r0
     1b8:	0f 2e       	mov	r0, r31
     1ba:	f0 e5       	ldi	r31, 0x50	; 80
     1bc:	2f 2e       	mov	r2, r31
     1be:	f0 2d       	mov	r31, r0
					screen2[2][11] = 'o';
     1c0:	0f 2e       	mov	r0, r31
     1c2:	ff e6       	ldi	r31, 0x6F	; 111
     1c4:	4f 2e       	mov	r4, r31
     1c6:	f0 2d       	mov	r31, r0
					screen2[2][12] = 'l';
     1c8:	0f 2e       	mov	r0, r31
     1ca:	fc e6       	ldi	r31, 0x6C	; 108
     1cc:	3f 2e       	mov	r3, r31
     1ce:	f0 2d       	mov	r31, r0
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
	{
		currentTrig = (fullBitsParse&1);
     1d0:	8c 2f       	mov	r24, r28
     1d2:	81 70       	andi	r24, 0x01	; 1
     1d4:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <currentTrig>
		if(currentTrig)
     1d8:	88 23       	and	r24, r24
     1da:	09 f4       	brne	.+2      	; 0x1de <listenTrigButtons+0xaa>
     1dc:	69 c0       	rjmp	.+210    	; 0x2b0 <listenTrigButtons+0x17c>
		{
			switch (encoderAValue)
     1de:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
     1e2:	88 23       	and	r24, r24
     1e4:	19 f0       	breq	.+6      	; 0x1ec <listenTrigButtons+0xb8>
     1e6:	82 30       	cpi	r24, 0x02	; 2
     1e8:	69 f0       	breq	.+26     	; 0x204 <listenTrigButtons+0xd0>
     1ea:	62 c0       	rjmp	.+196    	; 0x2b0 <listenTrigButtons+0x17c>
			{
				
				//for "perfrmance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
				case 0: //performance mode
				//we trigger a sound here based on the location of bc
				trackControl(currentPattern.trackSampleLSB[bc], currentPattern.trackSampleMSB[bc], currentPattern.trackOutputRoute[bc], currentPattern.trackOutputRoute[bc]);
     1ec:	f7 01       	movw	r30, r14
     1ee:	40 81       	ld	r20, Z
     1f0:	50 e0       	ldi	r21, 0x00	; 0
     1f2:	f8 01       	movw	r30, r16
     1f4:	60 89       	ldd	r22, Z+16	; 0x10
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	80 a1       	ldd	r24, Z+32	; 0x20
     1fa:	9a 01       	movw	r18, r20
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <trackControl>
				//trackControl(3,0,0,1);
				//numPrinter(buttonTest,9, 2,bc);
				//outputS(buttonTest, 2);
				break;
     202:	56 c0       	rjmp	.+172    	; 0x2b0 <listenTrigButtons+0x17c>
     204:	38 01       	movw	r6, r16
				//step sequencer mode.
				break;
				
				case 2: ;
				//select track for sample assignment
				uint16_t currentSample = (currentPattern.trackSampleMSB[bc]<<8)|(currentPattern.trackSampleLSB[bc]);
     206:	f8 01       	movw	r30, r16
     208:	c0 88       	ldd	r12, Z+16	; 0x10
     20a:	d1 2c       	mov	r13, r1
     20c:	dc 2c       	mov	r13, r12
     20e:	cc 24       	eor	r12, r12
     210:	80 a1       	ldd	r24, Z+32	; 0x20
     212:	c8 2a       	or	r12, r24
				currentTrack = bc;
     214:	50 92 1a 06 	sts	0x061A, r5	; 0x80061a <currentTrack>
				numPrinter(screen2[1], 7, 2, (bc+1));
     218:	94 01       	movw	r18, r8
     21a:	2e 0d       	add	r18, r14
     21c:	3f 1d       	adc	r19, r15
     21e:	42 e0       	ldi	r20, 0x02	; 2
     220:	67 e0       	ldi	r22, 0x07	; 7
     222:	8b ea       	ldi	r24, 0xAB	; 171
     224:	95 e0       	ldi	r25, 0x05	; 5
     226:	0e 94 92 0a 	call	0x1524	; 0x1524 <numPrinter>
				numPrinter(screen2[1], 10, 4, currentSample);
     22a:	96 01       	movw	r18, r12
     22c:	44 e0       	ldi	r20, 0x04	; 4
     22e:	6a e0       	ldi	r22, 0x0A	; 10
     230:	8b ea       	ldi	r24, 0xAB	; 171
     232:	95 e0       	ldi	r25, 0x05	; 5
     234:	0e 94 92 0a 	call	0x1524	; 0x1524 <numPrinter>
				outputS(screen2[1], 1);
     238:	61 e0       	ldi	r22, 0x01	; 1
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	8b ea       	ldi	r24, 0xAB	; 171
     23e:	95 e0       	ldi	r25, 0x05	; 5
     240:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <outputS>
				switch (currentPattern.trackPlayMode[bc])
     244:	f8 01       	movw	r30, r16
     246:	80 81       	ld	r24, Z
     248:	88 23       	and	r24, r24
     24a:	19 f0       	breq	.+6      	; 0x252 <listenTrigButtons+0x11e>
     24c:	81 30       	cpi	r24, 0x01	; 1
     24e:	41 f0       	breq	.+16     	; 0x260 <listenTrigButtons+0x12c>
     250:	0d c0       	rjmp	.+26     	; 0x26c <listenTrigButtons+0x138>
				{
					case 0:
					screen2[2][10] = 'P';
     252:	f5 01       	movw	r30, r10
     254:	22 aa       	std	Z+50, r2	; 0x32
					screen2[2][11] = 'o';
     256:	43 aa       	std	Z+51, r4	; 0x33
					screen2[2][12] = 'l';
     258:	34 aa       	std	Z+52, r3	; 0x34
					screen2[2][13] = 'y';
     25a:	29 e7       	ldi	r18, 0x79	; 121
     25c:	25 ab       	std	Z+53, r18	; 0x35
					break;
     25e:	06 c0       	rjmp	.+12     	; 0x26c <listenTrigButtons+0x138>
					
					case 1:
					screen2[2][10] = 'S';
     260:	23 e5       	ldi	r18, 0x53	; 83
     262:	f5 01       	movw	r30, r10
     264:	22 ab       	std	Z+50, r18	; 0x32
					screen2[2][11] = 'o';
     266:	43 aa       	std	Z+51, r4	; 0x33
					screen2[2][12] = 'l';
     268:	34 aa       	std	Z+52, r3	; 0x34
					screen2[2][13] = 'o';
     26a:	45 aa       	std	Z+53, r4	; 0x35
					break;
					
					case 3:
					break;
				}
				outputS(screen2[2], 2);
     26c:	62 e0       	ldi	r22, 0x02	; 2
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	8f eb       	ldi	r24, 0xBF	; 191
     272:	95 e0       	ldi	r25, 0x05	; 5
     274:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <outputS>
				numPrinter(screen2[3], 10, 2, (currentPattern.trackOutputRoute[bc]+1));
     278:	f7 01       	movw	r30, r14
     27a:	20 81       	ld	r18, Z
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	2f 5f       	subi	r18, 0xFF	; 255
     280:	3f 4f       	sbci	r19, 0xFF	; 255
     282:	42 e0       	ldi	r20, 0x02	; 2
     284:	6a e0       	ldi	r22, 0x0A	; 10
     286:	83 ed       	ldi	r24, 0xD3	; 211
     288:	95 e0       	ldi	r25, 0x05	; 5
     28a:	0e 94 92 0a 	call	0x1524	; 0x1524 <numPrinter>
				outputS(screen2[3], 3);
     28e:	63 e0       	ldi	r22, 0x03	; 3
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	83 ed       	ldi	r24, 0xD3	; 211
     294:	95 e0       	ldi	r25, 0x05	; 5
     296:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <outputS>
				
				
				trackControl(currentPattern.trackSampleLSB[bc], currentPattern.trackSampleMSB[bc], currentPattern.trackOutputRoute[bc], currentPattern.trackOutputRoute[bc]);
     29a:	f7 01       	movw	r30, r14
     29c:	40 81       	ld	r20, Z
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	f3 01       	movw	r30, r6
     2a2:	60 89       	ldd	r22, Z+16	; 0x10
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	80 a1       	ldd	r24, Z+32	; 0x20
     2a8:	9a 01       	movw	r18, r20
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <trackControl>
			}
		
		
		}
		
		fullBitsParse = fullBitsParse>>1;
     2b0:	d6 95       	lsr	r29
     2b2:	c7 95       	ror	r28
	{
		lastFullBits = currentTrigButtons;
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     2b4:	53 94       	inc	r5
     2b6:	ff ef       	ldi	r31, 0xFF	; 255
     2b8:	ef 1a       	sub	r14, r31
     2ba:	ff 0a       	sbc	r15, r31
     2bc:	0f 5f       	subi	r16, 0xFF	; 255
     2be:	1f 4f       	sbci	r17, 0xFF	; 255
     2c0:	20 e1       	ldi	r18, 0x10	; 16
     2c2:	52 12       	cpse	r5, r18
     2c4:	85 cf       	rjmp	.-246    	; 0x1d0 <listenTrigButtons+0x9c>
		fullBitsParse = fullBitsParse>>1;
	}
	}


}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	1f 91       	pop	r17
     2cc:	0f 91       	pop	r16
     2ce:	ff 90       	pop	r15
     2d0:	ef 90       	pop	r14
     2d2:	df 90       	pop	r13
     2d4:	cf 90       	pop	r12
     2d6:	bf 90       	pop	r11
     2d8:	af 90       	pop	r10
     2da:	9f 90       	pop	r9
     2dc:	8f 90       	pop	r8
     2de:	7f 90       	pop	r7
     2e0:	6f 90       	pop	r6
     2e2:	5f 90       	pop	r5
     2e4:	4f 90       	pop	r4
     2e6:	3f 90       	pop	r3
     2e8:	2f 90       	pop	r2
     2ea:	08 95       	ret

000002ec <listenGPButtons>:

void listenGPButtons() // are the encoder buttons here also?
{
	currentGPButtons = PINB;
     2ec:	83 b1       	in	r24, 0x03	; 3
     2ee:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <currentGPButtons>
	if((currentGPButtons^255)&(1 << PB5))
     2f2:	80 95       	com	r24
     2f4:	85 ff       	sbrs	r24, 5
     2f6:	05 c0       	rjmp	.+10     	; 0x302 <listenGPButtons+0x16>
	{ //top encoder button
	//	outputS(testEncoderButton, 3);
	encoderAFlag = ~encoderAFlag;
     2f8:	90 91 e7 05 	lds	r25, 0x05E7	; 0x8005e7 <encoderAFlag>
     2fc:	90 95       	com	r25
     2fe:	90 93 e7 05 	sts	0x05E7, r25	; 0x8005e7 <encoderAFlag>
		
	}
	if((currentGPButtons^255)&(1 << PB6))
     302:	86 ff       	sbrs	r24, 6
     304:	05 c0       	rjmp	.+10     	; 0x310 <listenGPButtons+0x24>
	{//botton encoder button
		
		//outputS(testEncoderButton, 3);
		encoderBFlag = ~encoderBFlag;
     306:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <encoderBFlag>
     30a:	80 95       	com	r24
     30c:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <encoderBFlag>
     310:	08 95       	ret

00000312 <initEncoders>:
#include "globalVariables.h"

void initEncoders()
{
	//this is where we set the encoder pins to where they need to be
PORTH = 0B01111000; // enable internal pullup resistors.
     312:	88 e7       	ldi	r24, 0x78	; 120
     314:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     318:	08 95       	ret

0000031a <pollEncoder0>:

}

void pollEncoder0(uint8_t *encoderC0)
{
	if(~PINH&(1<<PH6))
     31a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     31e:	26 fd       	sbrc	r18, 6
     320:	12 c0       	rjmp	.+36     	; 0x346 <pollEncoder0+0x2c>
	{
		if(~PINH&(1<<PH5))
     322:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     326:	25 fd       	sbrc	r18, 5
     328:	05 c0       	rjmp	.+10     	; 0x334 <pollEncoder0+0x1a>
		{
			//left turn?
			*encoderC0= (*encoderC0)+1;
     32a:	fc 01       	movw	r30, r24
     32c:	20 81       	ld	r18, Z
     32e:	2f 5f       	subi	r18, 0xFF	; 255
     330:	20 83       	st	Z, r18
     332:	04 c0       	rjmp	.+8      	; 0x33c <pollEncoder0+0x22>
		}
		else
		{
			*encoderC0= (*encoderC0)-1;
     334:	fc 01       	movw	r30, r24
     336:	20 81       	ld	r18, Z
     338:	21 50       	subi	r18, 0x01	; 1
     33a:	20 83       	st	Z, r18
		}
		//_delay_ms(2); // seems un-necesary with while loop
		while(~PINH&(1<<PH6)){} // this does make things smoother, but we need to be sure we have interupts for important things.
     33c:	e0 e0       	ldi	r30, 0x00	; 0
     33e:	f1 e0       	ldi	r31, 0x01	; 1
     340:	80 81       	ld	r24, Z
     342:	86 ff       	sbrs	r24, 6
     344:	fd cf       	rjmp	.-6      	; 0x340 <pollEncoder0+0x26>
     346:	08 95       	ret

00000348 <pollEncoder1>:

}

void pollEncoder1(uint8_t *encoderC1)
{
	if(~PINH&(1<<PH3))
     348:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     34c:	23 fd       	sbrc	r18, 3
     34e:	12 c0       	rjmp	.+36     	; 0x374 <pollEncoder1+0x2c>
	{
		if(~PINH&(1<<PH4))
     350:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     354:	24 fd       	sbrc	r18, 4
     356:	05 c0       	rjmp	.+10     	; 0x362 <pollEncoder1+0x1a>
		{
			//left turn?
			*encoderC1=(*encoderC1)-1;
     358:	fc 01       	movw	r30, r24
     35a:	20 81       	ld	r18, Z
     35c:	21 50       	subi	r18, 0x01	; 1
     35e:	20 83       	st	Z, r18
     360:	04 c0       	rjmp	.+8      	; 0x36a <pollEncoder1+0x22>
		}
		else
		{
			*encoderC1=(*encoderC1)+1;
     362:	fc 01       	movw	r30, r24
     364:	20 81       	ld	r18, Z
     366:	2f 5f       	subi	r18, 0xFF	; 255
     368:	20 83       	st	Z, r18
		}
		//_delay_ms(2); // seems un-necesary with while loop
		while(~PINH&(1<<PH3)){} // this does make things smoother, but we need to be sure we have interupts for important things.
     36a:	e0 e0       	ldi	r30, 0x00	; 0
     36c:	f1 e0       	ldi	r31, 0x01	; 1
     36e:	80 81       	ld	r24, Z
     370:	83 ff       	sbrs	r24, 3
     372:	fd cf       	rjmp	.-6      	; 0x36e <pollEncoder1+0x26>
     374:	08 95       	ret

00000376 <listenEncoders>:


void listenEncoders()
{
	//this is where we update the encoder variables.
	pollEncoder0(&encoderAValue);
     376:	89 e6       	ldi	r24, 0x69	; 105
     378:	93 e0       	ldi	r25, 0x03	; 3
     37a:	cf df       	rcall	.-98     	; 0x31a <pollEncoder0>
	pollEncoder1(&encoderBValue);
     37c:	8e e6       	ldi	r24, 0x6E	; 110
     37e:	96 e0       	ldi	r25, 0x06	; 6
     380:	e3 cf       	rjmp	.-58     	; 0x348 <pollEncoder1>
     382:	08 95       	ret

00000384 <initArrays>:

#include <avr/io.h>
#include "globalVariables.h"

void initArrays(char myArray[4][20], uint8_t lengthOfString, int stringNumber, char* myString)
{
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	8c 01       	movw	r16, r24
     392:	7a 01       	movw	r14, r20
	uint8_t charLeft = 20 - lengthOfString;
     394:	94 e1       	ldi	r25, 0x14	; 20
     396:	59 2f       	mov	r21, r25
     398:	56 1b       	sub	r21, r22
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     39a:	66 23       	and	r22, r22
     39c:	a1 f0       	breq	.+40     	; 0x3c6 <initArrays+0x42>
     39e:	f9 01       	movw	r30, r18
     3a0:	84 e1       	ldi	r24, 0x14	; 20
     3a2:	8e 9d       	mul	r24, r14
     3a4:	d0 01       	movw	r26, r0
     3a6:	8f 9d       	mul	r24, r15
     3a8:	b0 0d       	add	r27, r0
     3aa:	11 24       	eor	r1, r1
     3ac:	a0 0f       	add	r26, r16
     3ae:	b1 1f       	adc	r27, r17
     3b0:	cf ef       	ldi	r28, 0xFF	; 255
     3b2:	c6 0f       	add	r28, r22
     3b4:	d0 e0       	ldi	r29, 0x00	; 0
     3b6:	21 96       	adiw	r28, 0x01	; 1
     3b8:	2c 0f       	add	r18, r28
     3ba:	3d 1f       	adc	r19, r29
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     3bc:	91 91       	ld	r25, Z+
     3be:	9d 93       	st	X+, r25

void initArrays(char myArray[4][20], uint8_t lengthOfString, int stringNumber, char* myString)
{
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     3c0:	e2 17       	cp	r30, r18
     3c2:	f3 07       	cpc	r31, r19
     3c4:	d9 f7       	brne	.-10     	; 0x3bc <initArrays+0x38>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
		
	}
	
	for(charLeft; charLeft>0; charLeft--)
     3c6:	55 23       	and	r21, r21
     3c8:	91 f0       	breq	.+36     	; 0x3ee <initArrays+0x6a>
	{
		
		myArray[stringNumber][currentIndex] = ' ';
     3ca:	24 e1       	ldi	r18, 0x14	; 20
     3cc:	2e 9d       	mul	r18, r14
     3ce:	c0 01       	movw	r24, r0
     3d0:	2f 9d       	mul	r18, r15
     3d2:	90 0d       	add	r25, r0
     3d4:	11 24       	eor	r1, r1
     3d6:	08 0f       	add	r16, r24
     3d8:	19 1f       	adc	r17, r25
     3da:	95 2f       	mov	r25, r21
     3dc:	96 0f       	add	r25, r22
     3de:	80 e2       	ldi	r24, 0x20	; 32
     3e0:	f8 01       	movw	r30, r16
     3e2:	e6 0f       	add	r30, r22
     3e4:	f1 1d       	adc	r31, r1
     3e6:	80 83       	st	Z, r24
		currentIndex++;
     3e8:	6f 5f       	subi	r22, 0xFF	; 255
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
		
	}
	
	for(charLeft; charLeft>0; charLeft--)
     3ea:	69 13       	cpse	r22, r25
     3ec:	f9 cf       	rjmp	.-14     	; 0x3e0 <initArrays+0x5c>
		
		myArray[stringNumber][currentIndex] = ' ';
		currentIndex++;
	}

}
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	08 95       	ret

000003fc <initBank>:

void initBank()
{
     3fc:	e2 e1       	ldi	r30, 0x12	; 18
     3fe:	f4 e0       	ldi	r31, 0x04	; 4
	for(uint8_t i = 0; i<16; i++)
     400:	80 e0       	ldi	r24, 0x00	; 0
	{
		currentPattern.trackSampleLSB[i] = i+1;
     402:	8f 5f       	subi	r24, 0xFF	; 255
     404:	81 93       	st	Z+, r24

}

void initBank()
{
	for(uint8_t i = 0; i<16; i++)
     406:	80 31       	cpi	r24, 0x10	; 16
     408:	e1 f7       	brne	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		currentPattern.trackSampleLSB[i] = i+1;
	}
	
	//assign midi notes C3 to E4
	currentPattern.midiTrackNote[0] = 0x30;
     40a:	80 e3       	ldi	r24, 0x30	; 48
     40c:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <currentPattern+0x148>
	currentPattern.midiTrackNote[1] = 0x31;
     410:	81 e3       	ldi	r24, 0x31	; 49
     412:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <currentPattern+0x149>
	currentPattern.midiTrackNote[2] = 0x32;
     416:	82 e3       	ldi	r24, 0x32	; 50
     418:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <currentPattern+0x14a>
	currentPattern.midiTrackNote[3] = 0x33;
     41c:	83 e3       	ldi	r24, 0x33	; 51
     41e:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <currentPattern+0x14b>
	currentPattern.midiTrackNote[4] = 0x34;
     422:	84 e3       	ldi	r24, 0x34	; 52
     424:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <currentPattern+0x14c>
	currentPattern.midiTrackNote[5] = 0x35;
     428:	85 e3       	ldi	r24, 0x35	; 53
     42a:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <currentPattern+0x14d>
	currentPattern.midiTrackNote[6] = 0x36;
     42e:	86 e3       	ldi	r24, 0x36	; 54
     430:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <currentPattern+0x14e>
	currentPattern.midiTrackNote[7] = 0x37;
     434:	87 e3       	ldi	r24, 0x37	; 55
     436:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <currentPattern+0x14f>
	currentPattern.midiTrackNote[8] = 0x38;
     43a:	88 e3       	ldi	r24, 0x38	; 56
     43c:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <currentPattern+0x150>
	currentPattern.midiTrackNote[9] = 0x39;
     440:	89 e3       	ldi	r24, 0x39	; 57
     442:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <currentPattern+0x151>
	currentPattern.midiTrackNote[10] = 0x3a;
     446:	8a e3       	ldi	r24, 0x3A	; 58
     448:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <currentPattern+0x152>
	currentPattern.midiTrackNote[11] = 0x3b;
     44c:	8b e3       	ldi	r24, 0x3B	; 59
     44e:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <currentPattern+0x153>
	currentPattern.midiTrackNote[12] = 0x3c;
     452:	8c e3       	ldi	r24, 0x3C	; 60
     454:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <currentPattern+0x154>
	currentPattern.midiTrackNote[13] = 0x3d;
     458:	8d e3       	ldi	r24, 0x3D	; 61
     45a:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <currentPattern+0x155>
	currentPattern.midiTrackNote[14] = 0x3e;
     45e:	8e e3       	ldi	r24, 0x3E	; 62
     460:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <currentPattern+0x156>
	currentPattern.midiTrackNote[15] = 0x3f;
     464:	8f e3       	ldi	r24, 0x3F	; 63
     466:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <currentPattern+0x157>
	currentPattern.patternBPM = 120;
     46a:	88 e7       	ldi	r24, 0x78	; 120
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <currentPattern+0x159>
     472:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <currentPattern+0x158>
	currentPatternNumber = 1;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <currentPatternNumber>
	currentStep = 0;
     47c:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <currentStep>
	currentPattern.numSteps = 16;
     480:	80 e1       	ldi	r24, 0x10	; 16
     482:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <currentPattern+0x15a>
	//screen0
	// = {"Performance Mode    ","Pattern:            ","BPM: xxx            ","Stop                "}
	initArrays(screen0,8,1,"Pattern:");
     486:	24 ea       	ldi	r18, 0xA4	; 164
     488:	32 e0       	ldi	r19, 0x02	; 2
     48a:	41 e0       	ldi	r20, 0x01	; 1
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	68 e0       	ldi	r22, 0x08	; 8
     490:	83 e4       	ldi	r24, 0x43	; 67
     492:	95 e0       	ldi	r25, 0x05	; 5
     494:	77 df       	rcall	.-274    	; 0x384 <initArrays>
	initArrays(screen0,4,2,"BPM:");
     496:	2d ea       	ldi	r18, 0xAD	; 173
     498:	32 e0       	ldi	r19, 0x02	; 2
     49a:	42 e0       	ldi	r20, 0x02	; 2
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	64 e0       	ldi	r22, 0x04	; 4
     4a0:	83 e4       	ldi	r24, 0x43	; 67
     4a2:	95 e0       	ldi	r25, 0x05	; 5
     4a4:	6f df       	rcall	.-290    	; 0x384 <initArrays>
	initArrays(screen0,4,3,"Stop");
     4a6:	22 eb       	ldi	r18, 0xB2	; 178
     4a8:	32 e0       	ldi	r19, 0x02	; 2
     4aa:	43 e0       	ldi	r20, 0x03	; 3
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	64 e0       	ldi	r22, 0x04	; 4
     4b0:	83 e4       	ldi	r24, 0x43	; 67
     4b2:	95 e0       	ldi	r25, 0x05	; 5
     4b4:	67 df       	rcall	.-306    	; 0x384 <initArrays>
	initArrays(screen0,16,0,"Performance Mode");
     4b6:	27 eb       	ldi	r18, 0xB7	; 183
     4b8:	32 e0       	ldi	r19, 0x02	; 2
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	60 e1       	ldi	r22, 0x10	; 16
     4c0:	83 e4       	ldi	r24, 0x43	; 67
     4c2:	95 e0       	ldi	r25, 0x05	; 5
     4c4:	5f df       	rcall	.-322    	; 0x384 <initArrays>
	//screen1
	// = {"Sequence Edit       ","Pattern:            ","Steps:              ","Step number:        "}; //this will eventually be 5 once we implement naming of samples.
	initArrays(screen1,8,1,"Pattern:");
     4c6:	24 ea       	ldi	r18, 0xA4	; 164
     4c8:	32 e0       	ldi	r19, 0x02	; 2
     4ca:	41 e0       	ldi	r20, 0x01	; 1
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	68 e0       	ldi	r22, 0x08	; 8
     4d0:	87 ec       	ldi	r24, 0xC7	; 199
     4d2:	94 e0       	ldi	r25, 0x04	; 4
     4d4:	57 df       	rcall	.-338    	; 0x384 <initArrays>
	initArrays(screen1,6,2,"Steps:");
     4d6:	28 ec       	ldi	r18, 0xC8	; 200
     4d8:	32 e0       	ldi	r19, 0x02	; 2
     4da:	42 e0       	ldi	r20, 0x02	; 2
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	66 e0       	ldi	r22, 0x06	; 6
     4e0:	87 ec       	ldi	r24, 0xC7	; 199
     4e2:	94 e0       	ldi	r25, 0x04	; 4
     4e4:	4f df       	rcall	.-354    	; 0x384 <initArrays>
	initArrays(screen1,12,3,"Step number:");
     4e6:	2f ec       	ldi	r18, 0xCF	; 207
     4e8:	32 e0       	ldi	r19, 0x02	; 2
     4ea:	43 e0       	ldi	r20, 0x03	; 3
     4ec:	50 e0       	ldi	r21, 0x00	; 0
     4ee:	6c e0       	ldi	r22, 0x0C	; 12
     4f0:	87 ec       	ldi	r24, 0xC7	; 199
     4f2:	94 e0       	ldi	r25, 0x04	; 4
     4f4:	47 df       	rcall	.-370    	; 0x384 <initArrays>
	initArrays(screen1,13,0,"Sequence Edit");
     4f6:	2c ed       	ldi	r18, 0xDC	; 220
     4f8:	32 e0       	ldi	r19, 0x02	; 2
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	6d e0       	ldi	r22, 0x0D	; 13
     500:	87 ec       	ldi	r24, 0xC7	; 199
     502:	94 e0       	ldi	r25, 0x04	; 4
     504:	3f df       	rcall	.-386    	; 0x384 <initArrays>
	//screen2
	//= {"Track Settings      ","Track:              ","Play Mode           ","OutRoute            "};
	initArrays(screen2,6,1,"Track:");
     506:	2a ee       	ldi	r18, 0xEA	; 234
     508:	32 e0       	ldi	r19, 0x02	; 2
     50a:	41 e0       	ldi	r20, 0x01	; 1
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	66 e0       	ldi	r22, 0x06	; 6
     510:	87 e9       	ldi	r24, 0x97	; 151
     512:	95 e0       	ldi	r25, 0x05	; 5
     514:	37 df       	rcall	.-402    	; 0x384 <initArrays>
	initArrays(screen2,9,2,"PlayMode:");
     516:	21 ef       	ldi	r18, 0xF1	; 241
     518:	32 e0       	ldi	r19, 0x02	; 2
     51a:	42 e0       	ldi	r20, 0x02	; 2
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	69 e0       	ldi	r22, 0x09	; 9
     520:	87 e9       	ldi	r24, 0x97	; 151
     522:	95 e0       	ldi	r25, 0x05	; 5
     524:	2f df       	rcall	.-418    	; 0x384 <initArrays>
	initArrays(screen2,9,3,"OutRoute:");
     526:	2b ef       	ldi	r18, 0xFB	; 251
     528:	32 e0       	ldi	r19, 0x02	; 2
     52a:	43 e0       	ldi	r20, 0x03	; 3
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	69 e0       	ldi	r22, 0x09	; 9
     530:	87 e9       	ldi	r24, 0x97	; 151
     532:	95 e0       	ldi	r25, 0x05	; 5
     534:	27 df       	rcall	.-434    	; 0x384 <initArrays>
	initArrays(screen2,14,0,"Track Settings");
     536:	25 e0       	ldi	r18, 0x05	; 5
     538:	33 e0       	ldi	r19, 0x03	; 3
     53a:	40 e0       	ldi	r20, 0x00	; 0
     53c:	50 e0       	ldi	r21, 0x00	; 0
     53e:	6e e0       	ldi	r22, 0x0E	; 14
     540:	87 e9       	ldi	r24, 0x97	; 151
     542:	95 e0       	ldi	r25, 0x05	; 5
     544:	1f df       	rcall	.-450    	; 0x384 <initArrays>
	//screen3
	// = {"Global Settings     ","Midi Channel: xx    ", "Midi trigger Notes  ","(put triggered note)"};
	initArrays(screen3,13,1,"Midi Channel:");
     546:	24 e1       	ldi	r18, 0x14	; 20
     548:	33 e0       	ldi	r19, 0x03	; 3
     54a:	41 e0       	ldi	r20, 0x01	; 1
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	6d e0       	ldi	r22, 0x0D	; 13
     550:	8b e1       	ldi	r24, 0x1B	; 27
     552:	96 e0       	ldi	r25, 0x06	; 6
     554:	17 df       	rcall	.-466    	; 0x384 <initArrays>
	initArrays(screen3,18,2,"Midi Trigger Notes");
     556:	22 e2       	ldi	r18, 0x22	; 34
     558:	33 e0       	ldi	r19, 0x03	; 3
     55a:	42 e0       	ldi	r20, 0x02	; 2
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	62 e1       	ldi	r22, 0x12	; 18
     560:	8b e1       	ldi	r24, 0x1B	; 27
     562:	96 e0       	ldi	r25, 0x06	; 6
     564:	0f df       	rcall	.-482    	; 0x384 <initArrays>
	initArrays(screen3,20,3,"(trigger Notes here)");
     566:	25 e3       	ldi	r18, 0x35	; 53
     568:	33 e0       	ldi	r19, 0x03	; 3
     56a:	43 e0       	ldi	r20, 0x03	; 3
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	64 e1       	ldi	r22, 0x14	; 20
     570:	8b e1       	ldi	r24, 0x1B	; 27
     572:	96 e0       	ldi	r25, 0x06	; 6
     574:	07 df       	rcall	.-498    	; 0x384 <initArrays>
	initArrays(screen3,15,0,"Global Settings");	
     576:	2a e4       	ldi	r18, 0x4A	; 74
     578:	33 e0       	ldi	r19, 0x03	; 3
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	6f e0       	ldi	r22, 0x0F	; 15
     580:	8b e1       	ldi	r24, 0x1B	; 27
     582:	96 e0       	ldi	r25, 0x06	; 6
     584:	ff ce       	rjmp	.-514    	; 0x384 <initArrays>
     586:	08 95       	ret

00000588 <startADCConversion>:
char envelopeTimePrint[20] = "EnvelopeTimex:xxxxMS";

uint8_t startADCConversion()
{
	
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     588:	ea e7       	ldi	r30, 0x7A	; 122
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	80 81       	ld	r24, Z
     58e:	80 64       	ori	r24, 0x40	; 64
     590:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     592:	80 81       	ld	r24, Z
     594:	86 fd       	sbrc	r24, 6
     596:	fd cf       	rjmp	.-6      	; 0x592 <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.
     598:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
}
     59c:	08 95       	ret

0000059e <initADC>:

void initADC()
{
	DDRE = 0B00111000; //init pins E5, 4, and 3 as select pins on the external mux.
     59e:	88 e3       	ldi	r24, 0x38	; 56
     5a0:	8d b9       	out	0x0d, r24	; 13
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     5a2:	80 e2       	ldi	r24, 0x20	; 32
     5a4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     5a8:	87 e8       	ldi	r24, 0x87	; 135
     5aa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     5ae:	88 e0       	ldi	r24, 0x08	; 8
     5b0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     5b4:	8f ef       	ldi	r24, 0xFF	; 255
     5b6:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     5ba:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     5be:	10 92 ec 05 	sts	0x05EC, r1	; 0x8005ec <knobBufferCounter>
	startADCConversion();
     5c2:	e2 cf       	rjmp	.-60     	; 0x588 <startADCConversion>
     5c4:	08 95       	ret

000005c6 <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     5c6:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     5c8:	98 2f       	mov	r25, r24
     5ca:	96 95       	lsr	r25
     5cc:	96 95       	lsr	r25
     5ce:	2f e2       	ldi	r18, 0x2F	; 47
     5d0:	92 9f       	mul	r25, r18
     5d2:	91 2d       	mov	r25, r1
     5d4:	11 24       	eor	r1, r1
     5d6:	96 95       	lsr	r25
     5d8:	2c e2       	ldi	r18, 0x2C	; 44
     5da:	92 9f       	mul	r25, r18
     5dc:	80 19       	sub	r24, r0
     5de:	11 24       	eor	r1, r1
     5e0:	98 2f       	mov	r25, r24
	if(select<40)
     5e2:	88 32       	cpi	r24, 0x28	; 40
     5e4:	18 f5       	brcc	.+70     	; 0x62c <selectKnob+0x66>
	{
		ADCSRB = (1 << MUX5);
     5e6:	88 e0       	ldi	r24, 0x08	; 8
     5e8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     5ec:	c9 2f       	mov	r28, r25
     5ee:	c7 70       	andi	r28, 0x07	; 7
		uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     5f0:	96 95       	lsr	r25
     5f2:	96 95       	lsr	r25
     5f4:	96 95       	lsr	r25
     5f6:	90 62       	ori	r25, 0x20	; 32
     5f8:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     5fc:	c5 df       	rcall	.-118    	; 0x588 <startADCConversion>
		//we might need to worry about the delay, but that's fine.
		
		//we put our select0 and select2 pins in the opposite ports, so we need to do some math to fix that.
		//easy stupid fix:
		switch (tempMuxSelect)
     5fe:	c3 30       	cpi	r28, 0x03	; 3
     600:	59 f0       	breq	.+22     	; 0x618 <selectKnob+0x52>
     602:	18 f4       	brcc	.+6      	; 0x60a <selectKnob+0x44>
     604:	c1 30       	cpi	r28, 0x01	; 1
     606:	31 f0       	breq	.+12     	; 0x614 <selectKnob+0x4e>
     608:	0c c0       	rjmp	.+24     	; 0x622 <selectKnob+0x5c>
     60a:	c4 30       	cpi	r28, 0x04	; 4
     60c:	39 f0       	breq	.+14     	; 0x61c <selectKnob+0x56>
     60e:	c6 30       	cpi	r28, 0x06	; 6
     610:	39 f0       	breq	.+14     	; 0x620 <selectKnob+0x5a>
     612:	07 c0       	rjmp	.+14     	; 0x622 <selectKnob+0x5c>
		{
			case 1: muxSelect = 4;
     614:	c4 e0       	ldi	r28, 0x04	; 4
     616:	05 c0       	rjmp	.+10     	; 0x622 <selectKnob+0x5c>
			break;
			
			case 3:	muxSelect = 6;
     618:	c6 e0       	ldi	r28, 0x06	; 6
			break;
     61a:	03 c0       	rjmp	.+6      	; 0x622 <selectKnob+0x5c>
			
			case 4: muxSelect = 1;
     61c:	c1 e0       	ldi	r28, 0x01	; 1
			break;
     61e:	01 c0       	rjmp	.+2      	; 0x622 <selectKnob+0x5c>
			
			case 6: muxSelect = 3;
     620:	c3 e0       	ldi	r28, 0x03	; 3
			break;
		}

	//then the external multiplexer
		PORTE = (muxSelect << 3);
     622:	cc 0f       	add	r28, r28
     624:	cc 0f       	add	r28, r28
     626:	cc 0f       	add	r28, r28
     628:	ce b9       	out	0x0e, r28	; 14
     62a:	20 c0       	rjmp	.+64     	; 0x66c <selectKnob+0xa6>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     62c:	89 32       	cpi	r24, 0x29	; 41
     62e:	71 f0       	breq	.+28     	; 0x64c <selectKnob+0x86>
     630:	18 f4       	brcc	.+6      	; 0x638 <selectKnob+0x72>
     632:	88 32       	cpi	r24, 0x28	; 40
     634:	31 f0       	breq	.+12     	; 0x642 <selectKnob+0x7c>
     636:	1a c0       	rjmp	.+52     	; 0x66c <selectKnob+0xa6>
     638:	8a 32       	cpi	r24, 0x2A	; 42
     63a:	69 f0       	breq	.+26     	; 0x656 <selectKnob+0x90>
     63c:	8b 32       	cpi	r24, 0x2B	; 43
     63e:	81 f0       	breq	.+32     	; 0x660 <selectKnob+0x9a>
     640:	15 c0       	rjmp	.+42     	; 0x66c <selectKnob+0xa6>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     642:	85 e2       	ldi	r24, 0x25	; 37
     644:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     648:	9f df       	rcall	.-194    	; 0x588 <startADCConversion>
		break;
     64a:	10 c0       	rjmp	.+32     	; 0x66c <selectKnob+0xa6>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     64c:	86 e2       	ldi	r24, 0x26	; 38
     64e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     652:	9a df       	rcall	.-204    	; 0x588 <startADCConversion>
		break;
     654:	0b c0       	rjmp	.+22     	; 0x66c <selectKnob+0xa6>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     656:	87 e2       	ldi	r24, 0x27	; 39
     658:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     65c:	95 df       	rcall	.-214    	; 0x588 <startADCConversion>
		break;
     65e:	06 c0       	rjmp	.+12     	; 0x66c <selectKnob+0xa6>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     660:	80 e2       	ldi	r24, 0x20	; 32
     662:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     666:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     66a:	8e df       	rcall	.-228    	; 0x588 <startADCConversion>
		break;
		}
	
	}
	
}
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <updateKnob>:

void updateKnob(uint8_t select)
{
     670:	cf 93       	push	r28
     672:	c8 2f       	mov	r28, r24

	knobBuffer[select] = startADCConversion(); 
     674:	89 df       	rcall	.-238    	; 0x588 <startADCConversion>
     676:	ec 2f       	mov	r30, r28
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	e9 5e       	subi	r30, 0xE9	; 233
     67c:	fa 4f       	sbci	r31, 0xFA	; 250
     67e:	80 83       	st	Z, r24
}
     680:	cf 91       	pop	r28
     682:	08 95       	ret

00000684 <interperetKnob>:

void interperetKnob(uint8_t select)
{//this function will compare outputs, and write to our struct.
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
	select = select%44;
     68e:	98 2f       	mov	r25, r24
     690:	96 95       	lsr	r25
     692:	96 95       	lsr	r25
     694:	2f e2       	ldi	r18, 0x2F	; 47
     696:	92 9f       	mul	r25, r18
     698:	91 2d       	mov	r25, r1
     69a:	11 24       	eor	r1, r1
     69c:	96 95       	lsr	r25
     69e:	2c e2       	ldi	r18, 0x2C	; 44
     6a0:	92 9f       	mul	r25, r18
     6a2:	80 19       	sub	r24, r0
     6a4:	11 24       	eor	r1, r1
     6a6:	98 2f       	mov	r25, r24
	//we might not need this with the IIR filter
	float volumeDivisor = 3.1875;
	
	
	//Change from FIR filter to IIR filter.
     checkBuffer[select] += ((knobBuffer[select]-checkBuffer[select])/2);
     6a8:	a8 2f       	mov	r26, r24
     6aa:	b0 e0       	ldi	r27, 0x00	; 0
     6ac:	fd 01       	movw	r30, r26
     6ae:	e3 51       	subi	r30, 0x13	; 19
     6b0:	fa 4f       	sbci	r31, 0xFA	; 250
     6b2:	60 81       	ld	r22, Z
     6b4:	fd 01       	movw	r30, r26
     6b6:	e9 5e       	subi	r30, 0xE9	; 233
     6b8:	fa 4f       	sbci	r31, 0xFA	; 250
     6ba:	e0 81       	ld	r30, Z
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	e6 1b       	sub	r30, r22
     6c0:	f1 09       	sbc	r31, r1
     6c2:	af 01       	movw	r20, r30
     6c4:	12 f4       	brpl	.+4      	; 0x6ca <interperetKnob+0x46>
     6c6:	4f 5f       	subi	r20, 0xFF	; 255
     6c8:	5f 4f       	sbci	r21, 0xFF	; 255
     6ca:	55 95       	asr	r21
     6cc:	47 95       	ror	r20
     6ce:	46 0f       	add	r20, r22
     6d0:	a3 51       	subi	r26, 0x13	; 19
     6d2:	ba 4f       	sbci	r27, 0xFA	; 250
     6d4:	4c 93       	st	X, r20
	
	
	if (select<40)
     6d6:	98 32       	cpi	r25, 0x28	; 40
     6d8:	08 f0       	brcs	.+2      	; 0x6dc <interperetKnob+0x58>
     6da:	19 c2       	rjmp	.+1074   	; 0xb0e <interperetKnob+0x48a>
	{
		uint8_t positionSelect = select%8;
     6dc:	c9 2f       	mov	r28, r25
     6de:	c7 70       	andi	r28, 0x07	; 7
		uint8_t bankSwitch = select/8;
		switch (bankSwitch)
     6e0:	96 95       	lsr	r25
     6e2:	96 95       	lsr	r25
     6e4:	96 95       	lsr	r25
     6e6:	92 30       	cpi	r25, 0x02	; 2
     6e8:	09 f4       	brne	.+2      	; 0x6ec <interperetKnob+0x68>
     6ea:	da c0       	rjmp	.+436    	; 0x8a0 <interperetKnob+0x21c>
     6ec:	30 f4       	brcc	.+12     	; 0x6fa <interperetKnob+0x76>
     6ee:	99 23       	and	r25, r25
     6f0:	59 f0       	breq	.+22     	; 0x708 <interperetKnob+0x84>
     6f2:	91 30       	cpi	r25, 0x01	; 1
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <interperetKnob+0x74>
     6f6:	96 c0       	rjmp	.+300    	; 0x824 <interperetKnob+0x1a0>
     6f8:	29 c2       	rjmp	.+1106   	; 0xb4c <interperetKnob+0x4c8>
     6fa:	93 30       	cpi	r25, 0x03	; 3
     6fc:	09 f4       	brne	.+2      	; 0x700 <interperetKnob+0x7c>
     6fe:	55 c1       	rjmp	.+682    	; 0x9aa <interperetKnob+0x326>
     700:	94 30       	cpi	r25, 0x04	; 4
     702:	09 f4       	brne	.+2      	; 0x706 <interperetKnob+0x82>
     704:	6f c1       	rjmp	.+734    	; 0x9e4 <interperetKnob+0x360>
     706:	22 c2       	rjmp	.+1092   	; 0xb4c <interperetKnob+0x4c8>
		{
			
			case 0:; //switch cases are "labels", used for goto stuff. so, you have to end the label before declaring variables. should be fine?
			
			int16_t currentOutVoulume = ((currentPattern.outputLevelMSB[positionSelect]<<8)|(currentPattern.outputLevelLSB[positionSelect])); 
     708:	0c 2f       	mov	r16, r28
     70a:	10 e0       	ldi	r17, 0x00	; 0
			//this should be a regular integer between -70 and +10
			int16_t negCheckValue = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     70c:	64 2f       	mov	r22, r20
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <__floatsisf>
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	4c e4       	ldi	r20, 0x4C	; 76
     71e:	50 e4       	ldi	r21, 0x40	; 64
     720:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__divsf3>
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	4c e8       	ldi	r20, 0x8C	; 140
     72a:	52 e4       	ldi	r21, 0x42	; 66
     72c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__subsf3>
     730:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__fixsfsi>
     734:	86 2f       	mov	r24, r22
     736:	97 2f       	mov	r25, r23
     738:	9c 01       	movw	r18, r24
		switch (bankSwitch)
		{
			
			case 0:; //switch cases are "labels", used for goto stuff. so, you have to end the label before declaring variables. should be fine?
			
			int16_t currentOutVoulume = ((currentPattern.outputLevelMSB[positionSelect]<<8)|(currentPattern.outputLevelLSB[positionSelect])); 
     73a:	f8 01       	movw	r30, r16
     73c:	e6 59       	subi	r30, 0x96	; 150
     73e:	fc 4f       	sbci	r31, 0xFC	; 252
			//this should be a regular integer between -70 and +10
			int16_t negCheckValue = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentOutVoulume!=negCheckValue)
     740:	80 81       	ld	r24, Z
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	98 2f       	mov	r25, r24
     746:	88 27       	eor	r24, r24
     748:	40 85       	ldd	r20, Z+8	; 0x08
     74a:	84 2b       	or	r24, r20
     74c:	82 17       	cp	r24, r18
     74e:	93 07       	cpc	r25, r19
     750:	09 f4       	brne	.+2      	; 0x754 <interperetKnob+0xd0>
     752:	fc c1       	rjmp	.+1016   	; 0xb4c <interperetKnob+0x4c8>
			{
				currentPattern.outputLevelLSB[positionSelect] = (negCheckValue);
     754:	f8 01       	movw	r30, r16
     756:	e6 59       	subi	r30, 0x96	; 150
     758:	fc 4f       	sbci	r31, 0xFC	; 252
     75a:	60 87       	std	Z+8, r22	; 0x08
				if(negCheckValue>(-1))
     75c:	33 23       	and	r19, r19
     75e:	64 f1       	brlt	.+88     	; 0x7b8 <interperetKnob+0x134>
				{
					currentPattern.outputLevelMSB[positionSelect] = 0;
     760:	f8 01       	movw	r30, r16
     762:	e6 59       	subi	r30, 0x96	; 150
     764:	fc 4f       	sbci	r31, 0xFC	; 252
     766:	10 82       	st	Z, r1
					//just hard coding this for now until we make a function.
					outVolumePrint[14] = 48;
     768:	ec e3       	ldi	r30, 0x3C	; 60
     76a:	f2 e0       	ldi	r31, 0x02	; 2
     76c:	80 e3       	ldi	r24, 0x30	; 48
     76e:	86 87       	std	Z+14, r24	; 0x0e
					outVolumePrint[16] = (currentPattern.outputLevelLSB[positionSelect]%10)+48;
     770:	2d ec       	ldi	r18, 0xCD	; 205
     772:	62 9f       	mul	r22, r18
     774:	81 2d       	mov	r24, r1
     776:	11 24       	eor	r1, r1
     778:	86 95       	lsr	r24
     77a:	86 95       	lsr	r24
     77c:	86 95       	lsr	r24
     77e:	88 0f       	add	r24, r24
     780:	98 2f       	mov	r25, r24
     782:	99 0f       	add	r25, r25
     784:	99 0f       	add	r25, r25
     786:	89 0f       	add	r24, r25
     788:	96 2f       	mov	r25, r22
     78a:	98 1b       	sub	r25, r24
     78c:	89 2f       	mov	r24, r25
     78e:	80 5d       	subi	r24, 0xD0	; 208
     790:	80 8b       	std	Z+16, r24	; 0x10
					outVolumePrint[15] = ((currentPattern.outputLevelLSB[positionSelect]%100)/10)+48;
     792:	89 e2       	ldi	r24, 0x29	; 41
     794:	68 9f       	mul	r22, r24
     796:	81 2d       	mov	r24, r1
     798:	11 24       	eor	r1, r1
     79a:	82 95       	swap	r24
     79c:	8f 70       	andi	r24, 0x0F	; 15
     79e:	94 e6       	ldi	r25, 0x64	; 100
     7a0:	89 9f       	mul	r24, r25
     7a2:	60 19       	sub	r22, r0
     7a4:	11 24       	eor	r1, r1
     7a6:	62 9f       	mul	r22, r18
     7a8:	61 2d       	mov	r22, r1
     7aa:	11 24       	eor	r1, r1
     7ac:	66 95       	lsr	r22
     7ae:	66 95       	lsr	r22
     7b0:	66 95       	lsr	r22
     7b2:	60 5d       	subi	r22, 0xD0	; 208
     7b4:	67 87       	std	Z+15, r22	; 0x0f
     7b6:	23 c0       	rjmp	.+70     	; 0x7fe <interperetKnob+0x17a>
				}else
				{
					currentPattern.outputLevelMSB[positionSelect] = 255;
     7b8:	8f ef       	ldi	r24, 0xFF	; 255
     7ba:	f8 01       	movw	r30, r16
     7bc:	e6 59       	subi	r30, 0x96	; 150
     7be:	fc 4f       	sbci	r31, 0xFC	; 252
     7c0:	80 83       	st	Z, r24
					outVolumePrint[14] = '-';
     7c2:	ec e3       	ldi	r30, 0x3C	; 60
     7c4:	f2 e0       	ldi	r31, 0x02	; 2
     7c6:	8d e2       	ldi	r24, 0x2D	; 45
     7c8:	86 87       	std	Z+14, r24	; 0x0e
					outVolumePrint[15] = ((((currentPattern.outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     7ca:	60 95       	com	r22
     7cc:	26 2f       	mov	r18, r22
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	2f 5f       	subi	r18, 0xFF	; 255
     7d2:	3f 4f       	sbci	r19, 0xFF	; 255
     7d4:	c9 01       	movw	r24, r18
     7d6:	64 e6       	ldi	r22, 0x64	; 100
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
     7de:	0f 2e       	mov	r0, r31
     7e0:	fa e0       	ldi	r31, 0x0A	; 10
     7e2:	ef 2e       	mov	r14, r31
     7e4:	f1 2c       	mov	r15, r1
     7e6:	f0 2d       	mov	r31, r0
     7e8:	b7 01       	movw	r22, r14
     7ea:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
     7ee:	60 5d       	subi	r22, 0xD0	; 208
     7f0:	67 87       	std	Z+15, r22	; 0x0f
					outVolumePrint[16] = (((currentPattern.outputLevelLSB[positionSelect]^255)+1)%10)+48;
     7f2:	c9 01       	movw	r24, r18
     7f4:	b7 01       	movw	r22, r14
     7f6:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
     7fa:	80 5d       	subi	r24, 0xD0	; 208
     7fc:	80 8b       	std	Z+16, r24	; 0x10
				}
				//then output to screen. 
				outVolumePrint[10] = positionSelect + 49;
     7fe:	cf 5c       	subi	r28, 0xCF	; 207
     800:	c0 93 46 02 	sts	0x0246, r28	; 0x800246 <outVolumePrint+0xa>
				outputS(outVolumePrint, 3);
     804:	63 e0       	ldi	r22, 0x03	; 3
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	8c e3       	ldi	r24, 0x3C	; 60
     80a:	92 e0       	ldi	r25, 0x02	; 2
     80c:	73 d6       	rcall	.+3302   	; 0x14f4 <outputS>
				setOutputVolume(currentPattern.outputLevelLSB[positionSelect], currentPattern.outputLevelMSB[positionSelect], positionSelect);
     80e:	f8 01       	movw	r30, r16
     810:	e6 59       	subi	r30, 0x96	; 150
     812:	fc 4f       	sbci	r31, 0xFC	; 252
     814:	60 81       	ld	r22, Z
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	80 85       	ldd	r24, Z+8	; 0x08
     81a:	a8 01       	movw	r20, r16
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <setOutputVolume>
     822:	94 c1       	rjmp	.+808    	; 0xb4c <interperetKnob+0x4c8>
			}
			break;
			
 			case 1:
 			if(currentPattern.outputPitch[positionSelect]!=(checkBuffer[select]^128))
     824:	0c 2f       	mov	r16, r28
     826:	10 e0       	ldi	r17, 0x00	; 0
     828:	60 e8       	ldi	r22, 0x80	; 128
     82a:	64 0f       	add	r22, r20
     82c:	f8 01       	movw	r30, r16
     82e:	e6 59       	subi	r30, 0x96	; 150
     830:	fc 4f       	sbci	r31, 0xFC	; 252
     832:	80 89       	ldd	r24, Z+16	; 0x10
     834:	86 17       	cp	r24, r22
     836:	09 f4       	brne	.+2      	; 0x83a <interperetKnob+0x1b6>
     838:	89 c1       	rjmp	.+786    	; 0xb4c <interperetKnob+0x4c8>
 			{
 				(currentPattern.outputPitch[positionSelect]) = (checkBuffer[select]^128);
     83a:	f8 01       	movw	r30, r16
     83c:	e6 59       	subi	r30, 0x96	; 150
     83e:	fc 4f       	sbci	r31, 0xFC	; 252
     840:	60 8b       	std	Z+16, r22	; 0x10
				 if(encoderAValue == 0)
     842:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
     846:	81 11       	cpse	r24, r1
     848:	20 c0       	rjmp	.+64     	; 0x88a <interperetKnob+0x206>
				 {
					 pitchPrint[5] = (positionSelect+49);
     84a:	cf 5c       	subi	r28, 0xCF	; 207
     84c:	c0 93 55 02 	sts	0x0255, r28	; 0x800255 <pitchPrint+0x5>
					 if(currentPattern.outputPitch[positionSelect]>>7)
     850:	66 23       	and	r22, r22
     852:	64 f4       	brge	.+24     	; 0x86c <interperetKnob+0x1e8>
					 {
						 //again, hard coding.
						 pitchPrint[7] = '-';
     854:	8d e2       	ldi	r24, 0x2D	; 45
     856:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <pitchPrint+0x7>
						 numPrinter(pitchPrint, 8, 3, (currentPattern.outputPitch[positionSelect]^255));
     85a:	26 2f       	mov	r18, r22
     85c:	20 95       	com	r18
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	43 e0       	ldi	r20, 0x03	; 3
     862:	68 e0       	ldi	r22, 0x08	; 8
     864:	80 e5       	ldi	r24, 0x50	; 80
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	5d d6       	rcall	.+3258   	; 0x1524 <numPrinter>
     86a:	0a c0       	rjmp	.+20     	; 0x880 <interperetKnob+0x1fc>
					 
					 }else{
						 pitchPrint[7] = '+';
     86c:	8b e2       	ldi	r24, 0x2B	; 43
     86e:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <pitchPrint+0x7>
					 numPrinter(pitchPrint,8,3,currentPattern.outputPitch[positionSelect]);}
     872:	26 2f       	mov	r18, r22
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	43 e0       	ldi	r20, 0x03	; 3
     878:	68 e0       	ldi	r22, 0x08	; 8
     87a:	80 e5       	ldi	r24, 0x50	; 80
     87c:	92 e0       	ldi	r25, 0x02	; 2
     87e:	52 d6       	rcall	.+3236   	; 0x1524 <numPrinter>
					 outputS(pitchPrint, 3);
     880:	63 e0       	ldi	r22, 0x03	; 3
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	80 e5       	ldi	r24, 0x50	; 80
     886:	92 e0       	ldi	r25, 0x02	; 2
     888:	35 d6       	rcall	.+3178   	; 0x14f4 <outputS>
				 }
				 outputSampleRate(positionSelect, 0, currentPattern.outputPitch[positionSelect]);
     88a:	f8 01       	movw	r30, r16
     88c:	e6 59       	subi	r30, 0x96	; 150
     88e:	fc 4f       	sbci	r31, 0xFC	; 252
     890:	40 89       	ldd	r20, Z+16	; 0x10
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	c8 01       	movw	r24, r16
     89a:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <outputSampleRate>
     89e:	56 c1       	rjmp	.+684    	; 0xb4c <interperetKnob+0x4c8>
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     8a0:	0c 2f       	mov	r16, r28
     8a2:	10 e0       	ldi	r17, 0x00	; 0
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     8a4:	64 2f       	mov	r22, r20
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <__floatsisf>
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	4c e4       	ldi	r20, 0x4C	; 76
     8b6:	50 e4       	ldi	r21, 0x40	; 64
     8b8:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__divsf3>
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	4c e8       	ldi	r20, 0x8C	; 140
     8c2:	52 e4       	ldi	r21, 0x42	; 66
     8c4:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__subsf3>
     8c8:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__fixsfsi>
     8cc:	86 2f       	mov	r24, r22
     8ce:	97 2f       	mov	r25, r23
     8d0:	9c 01       	movw	r18, r24
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     8d2:	a8 01       	movw	r20, r16
     8d4:	46 59       	subi	r20, 0x96	; 150
     8d6:	5c 4f       	sbci	r21, 0xFC	; 252
     8d8:	fa 01       	movw	r30, r20
     8da:	e8 5b       	subi	r30, 0xB8	; 184
     8dc:	ff 4f       	sbci	r31, 0xFF	; 255
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentEnvelopeVolume!=negCheckValueEnvelope)
     8de:	80 81       	ld	r24, Z
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	98 2f       	mov	r25, r24
     8e4:	88 27       	eor	r24, r24
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     8e6:	70 96       	adiw	r30, 0x10	; 16
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentEnvelopeVolume!=negCheckValueEnvelope)
     8e8:	40 81       	ld	r20, Z
     8ea:	84 2b       	or	r24, r20
     8ec:	82 17       	cp	r24, r18
     8ee:	93 07       	cpc	r25, r19
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <interperetKnob+0x270>
     8f2:	2c c1       	rjmp	.+600    	; 0xb4c <interperetKnob+0x4c8>
			{
				currentPattern.trackFadeGainLSB[positionSelect] = (negCheckValueEnvelope);
     8f4:	f8 01       	movw	r30, r16
     8f6:	ee 53       	subi	r30, 0x3E	; 62
     8f8:	fc 4f       	sbci	r31, 0xFC	; 252
     8fa:	60 83       	st	Z, r22
				if(negCheckValueEnvelope>(-1))
     8fc:	33 23       	and	r19, r19
     8fe:	64 f1       	brlt	.+88     	; 0x958 <interperetKnob+0x2d4>
				{
					currentPattern.trackFadeGainMSB[positionSelect] = 0;
     900:	f8 01       	movw	r30, r16
     902:	ee 54       	subi	r30, 0x4E	; 78
     904:	fc 4f       	sbci	r31, 0xFC	; 252
     906:	10 82       	st	Z, r1
					//just hard coding this for now until we make a function.
					envelopeLevelPrint[15] = 48;
     908:	e4 e1       	ldi	r30, 0x14	; 20
     90a:	f2 e0       	ldi	r31, 0x02	; 2
     90c:	80 e3       	ldi	r24, 0x30	; 48
     90e:	87 87       	std	Z+15, r24	; 0x0f
					envelopeLevelPrint[17] = (currentPattern.trackFadeGainLSB[positionSelect]%10)+48;
     910:	2d ec       	ldi	r18, 0xCD	; 205
     912:	62 9f       	mul	r22, r18
     914:	81 2d       	mov	r24, r1
     916:	11 24       	eor	r1, r1
     918:	86 95       	lsr	r24
     91a:	86 95       	lsr	r24
     91c:	86 95       	lsr	r24
     91e:	88 0f       	add	r24, r24
     920:	98 2f       	mov	r25, r24
     922:	99 0f       	add	r25, r25
     924:	99 0f       	add	r25, r25
     926:	89 0f       	add	r24, r25
     928:	96 2f       	mov	r25, r22
     92a:	98 1b       	sub	r25, r24
     92c:	89 2f       	mov	r24, r25
     92e:	80 5d       	subi	r24, 0xD0	; 208
     930:	81 8b       	std	Z+17, r24	; 0x11
					envelopeLevelPrint[16] = ((currentPattern.trackFadeGainLSB[positionSelect]%100)/10)+48;
     932:	89 e2       	ldi	r24, 0x29	; 41
     934:	68 9f       	mul	r22, r24
     936:	81 2d       	mov	r24, r1
     938:	11 24       	eor	r1, r1
     93a:	82 95       	swap	r24
     93c:	8f 70       	andi	r24, 0x0F	; 15
     93e:	94 e6       	ldi	r25, 0x64	; 100
     940:	89 9f       	mul	r24, r25
     942:	60 19       	sub	r22, r0
     944:	11 24       	eor	r1, r1
     946:	62 9f       	mul	r22, r18
     948:	61 2d       	mov	r22, r1
     94a:	11 24       	eor	r1, r1
     94c:	66 95       	lsr	r22
     94e:	66 95       	lsr	r22
     950:	66 95       	lsr	r22
     952:	60 5d       	subi	r22, 0xD0	; 208
     954:	60 8b       	std	Z+16, r22	; 0x10
     956:	20 c0       	rjmp	.+64     	; 0x998 <interperetKnob+0x314>
				}else
				{
					currentPattern.trackFadeGainMSB[positionSelect] = 255;
     958:	f8 01       	movw	r30, r16
     95a:	ee 54       	subi	r30, 0x4E	; 78
     95c:	fc 4f       	sbci	r31, 0xFC	; 252
     95e:	8f ef       	ldi	r24, 0xFF	; 255
     960:	80 83       	st	Z, r24
					envelopeLevelPrint[15] = '-';
     962:	e4 e1       	ldi	r30, 0x14	; 20
     964:	f2 e0       	ldi	r31, 0x02	; 2
     966:	8d e2       	ldi	r24, 0x2D	; 45
     968:	87 87       	std	Z+15, r24	; 0x0f
					envelopeLevelPrint[16] = ((((currentPattern.trackFadeGainLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     96a:	60 95       	com	r22
     96c:	26 2f       	mov	r18, r22
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	2f 5f       	subi	r18, 0xFF	; 255
     972:	3f 4f       	sbci	r19, 0xFF	; 255
     974:	c9 01       	movw	r24, r18
     976:	64 e6       	ldi	r22, 0x64	; 100
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
     97e:	0a e0       	ldi	r16, 0x0A	; 10
     980:	10 e0       	ldi	r17, 0x00	; 0
     982:	b8 01       	movw	r22, r16
     984:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
     988:	60 5d       	subi	r22, 0xD0	; 208
     98a:	60 8b       	std	Z+16, r22	; 0x10
					envelopeLevelPrint[17] = (((currentPattern.trackFadeGainLSB[positionSelect]^255)+1)%10)+48;
     98c:	c9 01       	movw	r24, r18
     98e:	b8 01       	movw	r22, r16
     990:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
     994:	80 5d       	subi	r24, 0xD0	; 208
     996:	81 8b       	std	Z+17, r24	; 0x11
				}
				//then output to screen.
				envelopeLevelPrint[13] = positionSelect + 49;
     998:	cf 5c       	subi	r28, 0xCF	; 207
     99a:	c0 93 21 02 	sts	0x0221, r28	; 0x800221 <envelopeLevelPrint+0xd>
				outputS(envelopeLevelPrint, 3);
     99e:	63 e0       	ldi	r22, 0x03	; 3
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	84 e1       	ldi	r24, 0x14	; 20
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	a6 d5       	rcall	.+2892   	; 0x14f4 <outputS>
     9a8:	d1 c0       	rjmp	.+418    	; 0xb4c <interperetKnob+0x4c8>
				//nothing to "set", since envelopes are triggered after a sound is playing.
			}
			break;
 			
 			case 3:
 			if(currentPattern.trackFadeTimeMSB[positionSelect]!=checkBuffer[select])
     9aa:	8c 2f       	mov	r24, r28
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	fc 01       	movw	r30, r24
     9b0:	ee 52       	subi	r30, 0x2E	; 46
     9b2:	fc 4f       	sbci	r31, 0xFC	; 252
     9b4:	20 81       	ld	r18, Z
     9b6:	42 17       	cp	r20, r18
     9b8:	09 f4       	brne	.+2      	; 0x9bc <interperetKnob+0x338>
     9ba:	c8 c0       	rjmp	.+400    	; 0xb4c <interperetKnob+0x4c8>
 			{
 				(currentPattern.trackFadeTimeMSB[positionSelect]) = checkBuffer[select];
     9bc:	fc 01       	movw	r30, r24
     9be:	ee 52       	subi	r30, 0x2E	; 46
     9c0:	fc 4f       	sbci	r31, 0xFC	; 252
     9c2:	40 83       	st	Z, r20
				 numPrinter(envelopeTimePrint,14,4,currentPattern.trackFadeTimeMSB[positionSelect]);
     9c4:	24 2f       	mov	r18, r20
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	44 e0       	ldi	r20, 0x04	; 4
     9ca:	6e e0       	ldi	r22, 0x0E	; 14
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	a9 d5       	rcall	.+2898   	; 0x1524 <numPrinter>
				 envelopeTimePrint[12] = positionSelect+49;
     9d2:	cf 5c       	subi	r28, 0xCF	; 207
     9d4:	c0 93 0c 02 	sts	0x020C, r28	; 0x80020c <__data_start+0xc>
				 outputS(envelopeTimePrint, 3);
     9d8:	63 e0       	ldi	r22, 0x03	; 3
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	92 e0       	ldi	r25, 0x02	; 2
     9e0:	89 d5       	rcall	.+2834   	; 0x14f4 <outputS>
     9e2:	b4 c0       	rjmp	.+360    	; 0xb4c <interperetKnob+0x4c8>
 			}
 			break;
 			
 			case 4:;
 			int16_t currentTrackVolume = ((currentPattern.trackMainVolumeMSB[positionSelect]<<8)|(currentPattern.trackMainVolumeLSB[positionSelect]));
     9e4:	0c 2f       	mov	r16, r28
     9e6:	10 e0       	ldi	r17, 0x00	; 0
 			int16_t negCheckValueTrack = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     9e8:	64 2f       	mov	r22, r20
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <__floatsisf>
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	4c e4       	ldi	r20, 0x4C	; 76
     9fa:	50 e4       	ldi	r21, 0x40	; 64
     9fc:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__divsf3>
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	4c e8       	ldi	r20, 0x8C	; 140
     a06:	52 e4       	ldi	r21, 0x42	; 66
     a08:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__subsf3>
     a0c:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__fixsfsi>
     a10:	86 2f       	mov	r24, r22
     a12:	97 2f       	mov	r25, r23
     a14:	9c 01       	movw	r18, r24
				 outputS(envelopeTimePrint, 3);
 			}
 			break;
 			
 			case 4:;
 			int16_t currentTrackVolume = ((currentPattern.trackMainVolumeMSB[positionSelect]<<8)|(currentPattern.trackMainVolumeLSB[positionSelect]));
     a16:	f8 01       	movw	r30, r16
     a18:	e6 59       	subi	r30, 0x96	; 150
     a1a:	fc 4f       	sbci	r31, 0xFC	; 252
 			int16_t negCheckValueTrack = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
 			if(currentTrackVolume!=negCheckValueTrack)
     a1c:	80 a5       	ldd	r24, Z+40	; 0x28
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	98 2f       	mov	r25, r24
     a22:	88 27       	eor	r24, r24
     a24:	40 ad       	ldd	r20, Z+56	; 0x38
     a26:	84 2b       	or	r24, r20
     a28:	82 17       	cp	r24, r18
     a2a:	93 07       	cpc	r25, r19
     a2c:	09 f4       	brne	.+2      	; 0xa30 <interperetKnob+0x3ac>
     a2e:	8e c0       	rjmp	.+284    	; 0xb4c <interperetKnob+0x4c8>
 			{
	 			currentPattern.trackMainVolumeLSB[positionSelect] = (negCheckValueTrack);
     a30:	f8 01       	movw	r30, r16
     a32:	e6 59       	subi	r30, 0x96	; 150
     a34:	fc 4f       	sbci	r31, 0xFC	; 252
     a36:	60 af       	std	Z+56, r22	; 0x38
	 			if(negCheckValueTrack>(-1))
     a38:	33 23       	and	r19, r19
     a3a:	64 f1       	brlt	.+88     	; 0xa94 <interperetKnob+0x410>
	 			{
		 			currentPattern.trackMainVolumeMSB[positionSelect] = 0;
     a3c:	f8 01       	movw	r30, r16
     a3e:	e6 59       	subi	r30, 0x96	; 150
     a40:	fc 4f       	sbci	r31, 0xFC	; 252
     a42:	10 a6       	std	Z+40, r1	; 0x28
		 			//just hard coding this for now until we make a function.
		 			trackVolumePrint[15] = 48;
     a44:	e8 e2       	ldi	r30, 0x28	; 40
     a46:	f2 e0       	ldi	r31, 0x02	; 2
     a48:	80 e3       	ldi	r24, 0x30	; 48
     a4a:	87 87       	std	Z+15, r24	; 0x0f
		 			trackVolumePrint[17] = (currentPattern.trackMainVolumeLSB[positionSelect]%10)+48;
     a4c:	2d ec       	ldi	r18, 0xCD	; 205
     a4e:	62 9f       	mul	r22, r18
     a50:	81 2d       	mov	r24, r1
     a52:	11 24       	eor	r1, r1
     a54:	86 95       	lsr	r24
     a56:	86 95       	lsr	r24
     a58:	86 95       	lsr	r24
     a5a:	88 0f       	add	r24, r24
     a5c:	98 2f       	mov	r25, r24
     a5e:	99 0f       	add	r25, r25
     a60:	99 0f       	add	r25, r25
     a62:	89 0f       	add	r24, r25
     a64:	96 2f       	mov	r25, r22
     a66:	98 1b       	sub	r25, r24
     a68:	89 2f       	mov	r24, r25
     a6a:	80 5d       	subi	r24, 0xD0	; 208
     a6c:	81 8b       	std	Z+17, r24	; 0x11
		 			trackVolumePrint[16] = ((currentPattern.trackMainVolumeLSB[positionSelect]%100)/10)+48;
     a6e:	89 e2       	ldi	r24, 0x29	; 41
     a70:	68 9f       	mul	r22, r24
     a72:	81 2d       	mov	r24, r1
     a74:	11 24       	eor	r1, r1
     a76:	82 95       	swap	r24
     a78:	8f 70       	andi	r24, 0x0F	; 15
     a7a:	94 e6       	ldi	r25, 0x64	; 100
     a7c:	89 9f       	mul	r24, r25
     a7e:	60 19       	sub	r22, r0
     a80:	11 24       	eor	r1, r1
     a82:	62 9f       	mul	r22, r18
     a84:	61 2d       	mov	r22, r1
     a86:	11 24       	eor	r1, r1
     a88:	66 95       	lsr	r22
     a8a:	66 95       	lsr	r22
     a8c:	66 95       	lsr	r22
     a8e:	60 5d       	subi	r22, 0xD0	; 208
     a90:	60 8b       	std	Z+16, r22	; 0x10
     a92:	23 c0       	rjmp	.+70     	; 0xada <interperetKnob+0x456>
	 			}else
	 			{
		 			currentPattern.trackMainVolumeMSB[positionSelect] = 255;
     a94:	8f ef       	ldi	r24, 0xFF	; 255
     a96:	f8 01       	movw	r30, r16
     a98:	e6 59       	subi	r30, 0x96	; 150
     a9a:	fc 4f       	sbci	r31, 0xFC	; 252
     a9c:	80 a7       	std	Z+40, r24	; 0x28
		 			trackVolumePrint[15] = '-';
     a9e:	e8 e2       	ldi	r30, 0x28	; 40
     aa0:	f2 e0       	ldi	r31, 0x02	; 2
     aa2:	8d e2       	ldi	r24, 0x2D	; 45
     aa4:	87 87       	std	Z+15, r24	; 0x0f
		 			trackVolumePrint[16] = ((((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     aa6:	60 95       	com	r22
     aa8:	26 2f       	mov	r18, r22
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	2f 5f       	subi	r18, 0xFF	; 255
     aae:	3f 4f       	sbci	r19, 0xFF	; 255
     ab0:	c9 01       	movw	r24, r18
     ab2:	64 e6       	ldi	r22, 0x64	; 100
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
     aba:	0f 2e       	mov	r0, r31
     abc:	fa e0       	ldi	r31, 0x0A	; 10
     abe:	ef 2e       	mov	r14, r31
     ac0:	f1 2c       	mov	r15, r1
     ac2:	f0 2d       	mov	r31, r0
     ac4:	b7 01       	movw	r22, r14
     ac6:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
     aca:	60 5d       	subi	r22, 0xD0	; 208
     acc:	60 8b       	std	Z+16, r22	; 0x10
		 			trackVolumePrint[17] = (((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
     ace:	c9 01       	movw	r24, r18
     ad0:	b7 01       	movw	r22, r14
     ad2:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
     ad6:	80 5d       	subi	r24, 0xD0	; 208
     ad8:	81 8b       	std	Z+17, r24	; 0x11
	 			}
	 			//then output to screen.
	 			trackVolumePrint[11] = positionSelect + 49;
     ada:	cf 5c       	subi	r28, 0xCF	; 207
     adc:	c0 93 33 02 	sts	0x0233, r28	; 0x800233 <trackVolumePrint+0xb>
	 			outputS(trackVolumePrint, 3);
     ae0:	63 e0       	ldi	r22, 0x03	; 3
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	88 e2       	ldi	r24, 0x28	; 40
     ae6:	92 e0       	ldi	r25, 0x02	; 2
     ae8:	05 d5       	rcall	.+2570   	; 0x14f4 <outputS>
	 			setTrackVolume(currentPattern.trackSampleLSB[positionSelect], currentPattern.trackSampleMSB[positionSelect],
				 currentPattern.trackMainVolumeLSB[positionSelect], currentPattern.trackMainVolumeMSB[positionSelect]);
     aea:	f8 01       	movw	r30, r16
     aec:	e6 59       	subi	r30, 0x96	; 150
     aee:	fc 4f       	sbci	r31, 0xFC	; 252
		 			trackVolumePrint[17] = (((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
	 			}
	 			//then output to screen.
	 			trackVolumePrint[11] = positionSelect + 49;
	 			outputS(trackVolumePrint, 3);
	 			setTrackVolume(currentPattern.trackSampleLSB[positionSelect], currentPattern.trackSampleMSB[positionSelect],
     af0:	20 a5       	ldd	r18, Z+40	; 0x28
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 ad       	ldd	r20, Z+56	; 0x38
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	df 01       	movw	r26, r30
     afa:	a8 56       	subi	r26, 0x68	; 104
     afc:	bf 4f       	sbci	r27, 0xFF	; 255
     afe:	6c 91       	ld	r22, X
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	e8 55       	subi	r30, 0x58	; 88
     b04:	ff 4f       	sbci	r31, 0xFF	; 255
     b06:	80 81       	ld	r24, Z
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	c0 d7       	rcall	.+3968   	; 0x1a8c <setTrackVolume>
     b0c:	1f c0       	rjmp	.+62     	; 0xb4c <interperetKnob+0x4c8>
		}
		
		
	}else
	{
		switch (select)
     b0e:	9a 32       	cpi	r25, 0x2A	; 42
     b10:	e9 f4       	brne	.+58     	; 0xb4c <interperetKnob+0x4c8>
// 				gpKnob1 = checkValue;
// 			}
// 			break;
// 			
 			case 42:
 			if(currentPattern.patternBPM!=checkBuffer[select]+30)
     b12:	24 2f       	mov	r18, r20
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	22 5e       	subi	r18, 0xE2	; 226
     b18:	3f 4f       	sbci	r19, 0xFF	; 255
     b1a:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <currentPattern+0x158>
     b1e:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <currentPattern+0x159>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	91 f0       	breq	.+36     	; 0xb4c <interperetKnob+0x4c8>
			{
 				currentPattern.patternBPM = checkBuffer[select]+30;
     b28:	30 93 c3 04 	sts	0x04C3, r19	; 0x8004c3 <currentPattern+0x159>
     b2c:	20 93 c2 04 	sts	0x04C2, r18	; 0x8004c2 <currentPattern+0x158>
				if(encoderAValue==0){
     b30:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
     b34:	81 11       	cpse	r24, r1
				 numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
     b36:	0a c0       	rjmp	.+20     	; 0xb4c <interperetKnob+0x4c8>
     b38:	43 e0       	ldi	r20, 0x03	; 3
     b3a:	65 e0       	ldi	r22, 0x05	; 5
     b3c:	8b e6       	ldi	r24, 0x6B	; 107
     b3e:	95 e0       	ldi	r25, 0x05	; 5
				 outputS(screen0[2], 2);
     b40:	f1 d4       	rcall	.+2530   	; 0x1524 <numPrinter>
     b42:	62 e0       	ldi	r22, 0x02	; 2
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	8b e6       	ldi	r24, 0x6B	; 107
     b48:	95 e0       	ldi	r25, 0x05	; 5
     b4a:	d4 d4       	rcall	.+2472   	; 0x14f4 <outputS>
// 			break;
		}
		
	}

}
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	08 95       	ret

00000b58 <listenKnobs>:

void listenKnobs()
{
     b58:	cf 93       	push	r28
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     b5a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
     b5c:	8c 2f       	mov	r24, r28
     b5e:	33 dd       	rcall	.-1434   	; 0x5c6 <selectKnob>
		updateKnob(loopCounter);
     b60:	8c 2f       	mov	r24, r28
     b62:	86 dd       	rcall	.-1268   	; 0x670 <updateKnob>
		interperetKnob(loopCounter);
     b64:	8c 2f       	mov	r24, r28
     b66:	8e dd       	rcall	.-1252   	; 0x684 <interperetKnob>
     b68:	cf 5f       	subi	r28, 0xFF	; 255

}

void listenKnobs()
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     b6a:	cc 32       	cpi	r28, 0x2C	; 44
     b6c:	b9 f7       	brne	.-18     	; 0xb5c <listenKnobs+0x4>
     b6e:	cf 91       	pop	r28
		updateKnob(loopCounter);
		interperetKnob(loopCounter);
	}


}
     b70:	08 95       	ret

00000b72 <initLEDs>:
#include <avr/io.h>
#include "globalVariables.h"

void initLEDs()
{
	DDRG = 0B00100101; //outputs on G5,2, and 0.
     b72:	85 e2       	ldi	r24, 0x25	; 37
     b74:	83 bb       	out	0x13, r24	; 19
     b76:	08 95       	ret

00000b78 <updateLEDs>:

}

void updateLEDs()
{
	if(encoderAValue==0){
     b78:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
     b7c:	81 11       	cpse	r24, r1
     b7e:	12 c0       	rjmp	.+36     	; 0xba4 <updateLEDs+0x2c>
	uint16_t trigLEDParse = currentTrigButtons;
     b80:	20 91 93 05 	lds	r18, 0x0593	; 0x800593 <currentTrigButtons>
     b84:	30 91 94 05 	lds	r19, 0x0594	; 0x800594 <currentTrigButtons+0x1>
	PORTG &= (~(1 << PG2)); //set latch low for data input
     b88:	a2 98       	cbi	0x14, 2	; 20
     b8a:	81 e1       	ldi	r24, 0x11	; 17
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
     b8c:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
     b8e:	33 23       	and	r19, r19
     b90:	14 f4       	brge	.+4      	; 0xb96 <updateLEDs+0x1e>
		{
			PORTG |= (1 << PG5); //send current 1's place bit to the data pin 
     b92:	a5 9a       	sbi	0x14, 5	; 20
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <updateLEDs+0x20>
		}
		else
		{
			PORTG &= (~(1 << PG5));
     b96:	a5 98       	cbi	0x14, 5	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
     b98:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	81 50       	subi	r24, 0x01	; 1
void updateLEDs()
{
	if(encoderAValue==0){
	uint16_t trigLEDParse = currentTrigButtons;
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t i = 0; i<17; i++)
     ba0:	a9 f7       	brne	.-22     	; 0xb8c <updateLEDs+0x14>
			PORTG &= (~(1 << PG5));
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	PORTG |= (1 << PG2); //latch pin high
     ba2:	a2 9a       	sbi	0x14, 2	; 20
     ba4:	08 95       	ret

00000ba6 <main>:
#include <avr/interrupt.h>


int main(void)
{
	midiChannel = 0; //for now, need to change this from load memory
     ba6:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <midiChannel>
	initBank();
     baa:	28 dc       	rcall	.-1968   	; 0x3fc <initBank>
	initScreen();
     bac:	46 d4       	rcall	.+2188   	; 0x143a <initScreen>
	initButtons();
     bae:	bb da       	rcall	.-2698   	; 0x126 <initButtons>
	initLEDs();
     bb0:	e0 df       	rcall	.-64     	; 0xb72 <initLEDs>
	initEncoders();
     bb2:	af db       	rcall	.-2210   	; 0x312 <initEncoders>
	initMenu();
     bb4:	10 d0       	rcall	.+32     	; 0xbd6 <initMenu>
	initADC();
     bb6:	f3 dc       	rcall	.-1562   	; 0x59e <initADC>
	serialInit0();
     bb8:	f6 d6       	rcall	.+3564   	; 0x19a6 <serialInit0>
	sei();
	 //this will be necessary on first startup, but maybe not in the actual program? maybe just something handy to have.
	//loadMemory(); //we need to load in the first struct in locarion 0 of our eeprom.
	while (1)
	{
		listenTrigButtons();
     bba:	78 94       	sei
		listenMidi();
     bbc:	bb da       	rcall	.-2698   	; 0x134 <listenTrigButtons>
		listenGPButtons();
     bbe:	9a d3       	rcall	.+1844   	; 0x12f4 <listenMidi>
     bc0:	95 db       	rcall	.-2262   	; 0x2ec <listenGPButtons>
		listenMidi();
     bc2:	98 d3       	rcall	.+1840   	; 0x12f4 <listenMidi>
     bc4:	d9 df       	rcall	.-78     	; 0xb78 <updateLEDs>
		updateLEDs();
     bc6:	96 d3       	rcall	.+1836   	; 0x12f4 <listenMidi>
     bc8:	d6 db       	rcall	.-2132   	; 0x376 <listenEncoders>
		listenMidi();
     bca:	94 d3       	rcall	.+1832   	; 0x12f4 <listenMidi>
     bcc:	c5 df       	rcall	.-118    	; 0xb58 <listenKnobs>
		listenEncoders();
     bce:	92 d3       	rcall	.+1828   	; 0x12f4 <listenMidi>
     bd0:	42 d0       	rcall	.+132    	; 0xc56 <updateScreen>
		listenMidi();
     bd2:	90 d3       	rcall	.+1824   	; 0x12f4 <listenMidi>
     bd4:	f3 cf       	rjmp	.-26     	; 0xbbc <main+0x16>

00000bd6 <initMenu>:
		listenKnobs();
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
		listenMidi();
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
		//updateSequence();
		updateScreen();
     bde:	c2 ec       	ldi	r28, 0xC2	; 194
     be0:	d4 e0       	ldi	r29, 0x04	; 4
		listenMidi();
     be2:	28 81       	ld	r18, Y
     be4:	39 81       	ldd	r19, Y+1	; 0x01
     be6:	43 e0       	ldi	r20, 0x03	; 3


void initMenu()
{

numPrinter(screen0[2],5,3, currentPattern.patternBPM);
     be8:	65 e0       	ldi	r22, 0x05	; 5
     bea:	8b e6       	ldi	r24, 0x6B	; 107
     bec:	95 e0       	ldi	r25, 0x05	; 5
     bee:	9a d4       	rcall	.+2356   	; 0x1524 <numPrinter>
numPrinter(screen3[1],14,2, (midiChannel+1));
     bf0:	20 91 95 05 	lds	r18, 0x0595	; 0x800595 <midiChannel>
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	2f 5f       	subi	r18, 0xFF	; 255
     bf8:	3f 4f       	sbci	r19, 0xFF	; 255
     bfa:	42 e0       	ldi	r20, 0x02	; 2
     bfc:	6e e0       	ldi	r22, 0x0E	; 14
     bfe:	8f e2       	ldi	r24, 0x2F	; 47
     c00:	96 e0       	ldi	r25, 0x06	; 6
     c02:	90 d4       	rcall	.+2336   	; 0x1524 <numPrinter>
numPrinter(screen0[1], 9, 3, currentPatternNumber);
     c04:	20 91 19 06 	lds	r18, 0x0619	; 0x800619 <currentPatternNumber>
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	43 e0       	ldi	r20, 0x03	; 3
     c0c:	69 e0       	ldi	r22, 0x09	; 9
     c0e:	87 e5       	ldi	r24, 0x57	; 87
     c10:	95 e0       	ldi	r25, 0x05	; 5
     c12:	88 d4       	rcall	.+2320   	; 0x1524 <numPrinter>
numPrinter(screen1[1], 9, 3, currentPatternNumber);
     c14:	20 91 19 06 	lds	r18, 0x0619	; 0x800619 <currentPatternNumber>
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	43 e0       	ldi	r20, 0x03	; 3
     c1c:	69 e0       	ldi	r22, 0x09	; 9
     c1e:	8b ed       	ldi	r24, 0xDB	; 219
     c20:	94 e0       	ldi	r25, 0x04	; 4
     c22:	80 d4       	rcall	.+2304   	; 0x1524 <numPrinter>
numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
     c24:	28 81       	ld	r18, Y
     c26:	39 81       	ldd	r19, Y+1	; 0x01
     c28:	43 e0       	ldi	r20, 0x03	; 3
     c2a:	65 e0       	ldi	r22, 0x05	; 5
     c2c:	8b e6       	ldi	r24, 0x6B	; 107
     c2e:	95 e0       	ldi	r25, 0x05	; 5
     c30:	79 d4       	rcall	.+2290   	; 0x1524 <numPrinter>
     c32:	03 e4       	ldi	r16, 0x43	; 67
     c34:	15 e0       	ldi	r17, 0x05	; 5
     c36:	c0 e0       	ldi	r28, 0x00	; 0

for(uint8_t i=0;i<4; i++ ){
	outputS(screen0[i],i);
     c38:	d0 e0       	ldi	r29, 0x00	; 0
     c3a:	be 01       	movw	r22, r28
     c3c:	c8 01       	movw	r24, r16
     c3e:	5a d4       	rcall	.+2228   	; 0x14f4 <outputS>
     c40:	21 96       	adiw	r28, 0x01	; 1
     c42:	0c 5e       	subi	r16, 0xEC	; 236
     c44:	1f 4f       	sbci	r17, 0xFF	; 255
numPrinter(screen3[1],14,2, (midiChannel+1));
numPrinter(screen0[1], 9, 3, currentPatternNumber);
numPrinter(screen1[1], 9, 3, currentPatternNumber);
numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);

for(uint8_t i=0;i<4; i++ ){
     c46:	c4 30       	cpi	r28, 0x04	; 4
     c48:	d1 05       	cpc	r29, r1
     c4a:	b9 f7       	brne	.-18     	; 0xc3a <initMenu+0x64>
	outputS(screen0[i],i);
}


}
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	08 95       	ret

00000c56 <updateScreen>:

void updateScreen()
{
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
	if(prevEncoderBValue!=encoderBValue)
     c5e:	90 91 e9 05 	lds	r25, 0x05E9	; 0x8005e9 <prevEncoderBValue>
     c62:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <encoderBValue>
     c66:	98 17       	cp	r25, r24
     c68:	09 f4       	brne	.+2      	; 0xc6c <updateScreen+0x16>
     c6a:	cd c2       	rjmp	.+1434   	; 0x1206 <updateScreen+0x5b0>
	{
		encoderBValue = encoderBValue%4;
     c6c:	83 70       	andi	r24, 0x03	; 3
     c6e:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <encoderBValue>
		//this needs some work...
		uint8_t menuMoveArrow = encoderBValue - prevEncoderBValue; //this tells us whether we need to move up or down.
     c72:	89 1b       	sub	r24, r25
		switch(encoderAValue)
     c74:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <encoderAValue>
     c78:	92 30       	cpi	r25, 0x02	; 2
     c7a:	09 f4       	brne	.+2      	; 0xc7e <updateScreen+0x28>
     c7c:	15 c1       	rjmp	.+554    	; 0xea8 <updateScreen+0x252>
     c7e:	93 30       	cpi	r25, 0x03	; 3
     c80:	09 f4       	brne	.+2      	; 0xc84 <updateScreen+0x2e>
     c82:	0b c2       	rjmp	.+1046   	; 0x109a <updateScreen+0x444>
     c84:	91 30       	cpi	r25, 0x01	; 1
     c86:	09 f0       	breq	.+2      	; 0xc8a <updateScreen+0x34>
     c88:	ba c2       	rjmp	.+1396   	; 0x11fe <updateScreen+0x5a8>
		{
			
			case 1:
			if(encoderBFlag)
     c8a:	90 91 e8 05 	lds	r25, 0x05E8	; 0x8005e8 <encoderBFlag>
     c8e:	99 23       	and	r25, r25
     c90:	09 f4       	brne	.+2      	; 0xc94 <updateScreen+0x3e>
     c92:	9e c0       	rjmp	.+316    	; 0xdd0 <updateScreen+0x17a>
			{
				switch (screen1Index)
     c94:	90 91 96 05 	lds	r25, 0x0596	; 0x800596 <screen1Index>
     c98:	92 30       	cpi	r25, 0x02	; 2
     c9a:	51 f1       	breq	.+84     	; 0xcf0 <updateScreen+0x9a>
     c9c:	93 30       	cpi	r25, 0x03	; 3
     c9e:	09 f4       	brne	.+2      	; 0xca2 <updateScreen+0x4c>
     ca0:	5a c0       	rjmp	.+180    	; 0xd56 <updateScreen+0x100>
     ca2:	91 30       	cpi	r25, 0x01	; 1
     ca4:	09 f0       	breq	.+2      	; 0xca8 <updateScreen+0x52>
     ca6:	ab c2       	rjmp	.+1366   	; 0x11fe <updateScreen+0x5a8>
				{
					case 1:
				if(menuMoveArrow==1)
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	89 f4       	brne	.+34     	; 0xcce <updateScreen+0x78>
				{
					currentPatternNumber = currentPatternNumber + 1;
     cac:	20 91 19 06 	lds	r18, 0x0619	; 0x800619 <currentPatternNumber>
     cb0:	2f 5f       	subi	r18, 0xFF	; 255
     cb2:	20 93 19 06 	sts	0x0619, r18	; 0x800619 <currentPatternNumber>
					numPrinter(screen1[1],9,3,currentPatternNumber);
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	43 e0       	ldi	r20, 0x03	; 3
     cba:	69 e0       	ldi	r22, 0x09	; 9
     cbc:	8b ed       	ldi	r24, 0xDB	; 219
     cbe:	94 e0       	ldi	r25, 0x04	; 4
     cc0:	31 d4       	rcall	.+2146   	; 0x1524 <numPrinter>
					outputS(screen1[1], 1);
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	8b ed       	ldi	r24, 0xDB	; 219
     cc8:	94 e0       	ldi	r25, 0x04	; 4
     cca:	14 d4       	rcall	.+2088   	; 0x14f4 <outputS>
     ccc:	98 c2       	rjmp	.+1328   	; 0x11fe <updateScreen+0x5a8>
				}else
				{
					currentPatternNumber = currentPatternNumber - 1;
     cce:	20 91 19 06 	lds	r18, 0x0619	; 0x800619 <currentPatternNumber>
     cd2:	21 50       	subi	r18, 0x01	; 1
     cd4:	20 93 19 06 	sts	0x0619, r18	; 0x800619 <currentPatternNumber>
					numPrinter(screen1[1],9,3,currentPatternNumber);
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	43 e0       	ldi	r20, 0x03	; 3
     cdc:	69 e0       	ldi	r22, 0x09	; 9
     cde:	8b ed       	ldi	r24, 0xDB	; 219
     ce0:	94 e0       	ldi	r25, 0x04	; 4
     ce2:	20 d4       	rcall	.+2112   	; 0x1524 <numPrinter>
					outputS(screen1[1], 1);
     ce4:	61 e0       	ldi	r22, 0x01	; 1
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	8b ed       	ldi	r24, 0xDB	; 219
     cea:	94 e0       	ldi	r25, 0x04	; 4
     cec:	03 d4       	rcall	.+2054   	; 0x14f4 <outputS>
     cee:	87 c2       	rjmp	.+1294   	; 0x11fe <updateScreen+0x5a8>
				}
				break;
				
				case 2:
				if(menuMoveArrow==1){
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	c9 f4       	brne	.+50     	; 0xd26 <updateScreen+0xd0>
				currentPattern.numSteps = currentPattern.numSteps+1;
     cf4:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <currentPattern+0x15a>
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
					if(currentPattern.numSteps>64)
     cfa:	81 34       	cpi	r24, 0x41	; 65
     cfc:	18 f4       	brcc	.+6      	; 0xd04 <updateScreen+0xae>
				}
				break;
				
				case 2:
				if(menuMoveArrow==1){
				currentPattern.numSteps = currentPattern.numSteps+1;
     cfe:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <currentPattern+0x15a>
     d02:	03 c0       	rjmp	.+6      	; 0xd0a <updateScreen+0xb4>
					if(currentPattern.numSteps>64)
					{
						currentPattern.numSteps = 64;
     d04:	80 e4       	ldi	r24, 0x40	; 64
     d06:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <currentPattern+0x15a>
					}
					numPrinter(screen1[2], 6, 2, currentPattern.numSteps);
     d0a:	20 91 c4 04 	lds	r18, 0x04C4	; 0x8004c4 <currentPattern+0x15a>
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	42 e0       	ldi	r20, 0x02	; 2
     d12:	66 e0       	ldi	r22, 0x06	; 6
     d14:	8f ee       	ldi	r24, 0xEF	; 239
     d16:	94 e0       	ldi	r25, 0x04	; 4
     d18:	05 d4       	rcall	.+2058   	; 0x1524 <numPrinter>
					outputS(screen1[2], 2);
     d1a:	62 e0       	ldi	r22, 0x02	; 2
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	8f ee       	ldi	r24, 0xEF	; 239
     d20:	94 e0       	ldi	r25, 0x04	; 4
     d22:	e8 d3       	rcall	.+2000   	; 0x14f4 <outputS>
     d24:	6c c2       	rjmp	.+1240   	; 0x11fe <updateScreen+0x5a8>
     d26:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <currentPattern+0x15a>
				}else
				{
					
					currentPattern.numSteps = currentPattern.numSteps-1;
     d2a:	81 50       	subi	r24, 0x01	; 1
     d2c:	19 f0       	breq	.+6      	; 0xd34 <updateScreen+0xde>
					if(currentPattern.numSteps<1)
     d2e:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <currentPattern+0x15a>
					numPrinter(screen1[2], 6, 2, currentPattern.numSteps);
					outputS(screen1[2], 2);
				}else
				{
					
					currentPattern.numSteps = currentPattern.numSteps-1;
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <updateScreen+0xe4>
     d34:	81 e0       	ldi	r24, 0x01	; 1
					if(currentPattern.numSteps<1)
					{
						currentPattern.numSteps= 1;
     d36:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <currentPattern+0x15a>
     d3a:	20 91 c4 04 	lds	r18, 0x04C4	; 0x8004c4 <currentPattern+0x15a>
			
					}
					numPrinter(screen1[2], 6, 2, currentPattern.numSteps);
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	42 e0       	ldi	r20, 0x02	; 2
     d42:	66 e0       	ldi	r22, 0x06	; 6
     d44:	8f ee       	ldi	r24, 0xEF	; 239
     d46:	94 e0       	ldi	r25, 0x04	; 4
     d48:	ed d3       	rcall	.+2010   	; 0x1524 <numPrinter>
					outputS(screen1[2],2);
     d4a:	62 e0       	ldi	r22, 0x02	; 2
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	8f ee       	ldi	r24, 0xEF	; 239
     d50:	94 e0       	ldi	r25, 0x04	; 4
     d52:	d0 d3       	rcall	.+1952   	; 0x14f4 <outputS>
     d54:	54 c2       	rjmp	.+1192   	; 0x11fe <updateScreen+0x5a8>
     d56:	81 30       	cpi	r24, 0x01	; 1
				}
				break;
				
				case 3:
				if(menuMoveArrow==1)
     d58:	11 f5       	brne	.+68     	; 0xd9e <updateScreen+0x148>
     d5a:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <currentStep>
				{
					currentStep = currentStep+1;
     d5e:	8f 5f       	subi	r24, 0xFF	; 255
     d60:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <currentStep>
     d64:	40 91 c4 04 	lds	r20, 0x04C4	; 0x8004c4 <currentPattern+0x15a>
					if(currentStep>(currentPattern.numSteps)-1)
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	24 2f       	mov	r18, r20
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	21 50       	subi	r18, 0x01	; 1
     d70:	31 09       	sbc	r19, r1
     d72:	28 17       	cp	r18, r24
     d74:	39 07       	cpc	r19, r25
     d76:	1c f4       	brge	.+6      	; 0xd7e <updateScreen+0x128>
     d78:	41 50       	subi	r20, 0x01	; 1
					{
						currentStep = (currentPattern.numSteps)-1;
     d7a:	40 93 6f 06 	sts	0x066F, r20	; 0x80066f <currentStep>
     d7e:	20 91 6f 06 	lds	r18, 0x066F	; 0x80066f <currentStep>
					}
					numPrinter(screen1[3], 13, 2, currentStep+1);
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	2f 5f       	subi	r18, 0xFF	; 255
     d86:	3f 4f       	sbci	r19, 0xFF	; 255
     d88:	42 e0       	ldi	r20, 0x02	; 2
     d8a:	6d e0       	ldi	r22, 0x0D	; 13
     d8c:	83 e0       	ldi	r24, 0x03	; 3
     d8e:	95 e0       	ldi	r25, 0x05	; 5
     d90:	c9 d3       	rcall	.+1938   	; 0x1524 <numPrinter>
					outputS(screen1[3], 3);
     d92:	63 e0       	ldi	r22, 0x03	; 3
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	83 e0       	ldi	r24, 0x03	; 3
     d98:	95 e0       	ldi	r25, 0x05	; 5
     d9a:	ac d3       	rcall	.+1880   	; 0x14f4 <outputS>
     d9c:	30 c2       	rjmp	.+1120   	; 0x11fe <updateScreen+0x5a8>
     d9e:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <currentStep>
					
				}else
				{
					currentStep = currentStep-1;
     da2:	81 50       	subi	r24, 0x01	; 1
     da4:	18 f0       	brcs	.+6      	; 0xdac <updateScreen+0x156>
     da6:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <currentStep>
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <updateScreen+0x15a>
     dac:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <currentStep>
					if(currentStep==255)
					{
						currentStep = 0;
					}
					numPrinter(screen1[3], 13, 2, currentStep+1);
     db0:	20 91 6f 06 	lds	r18, 0x066F	; 0x80066f <currentStep>
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	2f 5f       	subi	r18, 0xFF	; 255
     db8:	3f 4f       	sbci	r19, 0xFF	; 255
     dba:	42 e0       	ldi	r20, 0x02	; 2
     dbc:	6d e0       	ldi	r22, 0x0D	; 13
     dbe:	83 e0       	ldi	r24, 0x03	; 3
     dc0:	95 e0       	ldi	r25, 0x05	; 5
     dc2:	b0 d3       	rcall	.+1888   	; 0x1524 <numPrinter>
					outputS(screen1[3], 3);
     dc4:	63 e0       	ldi	r22, 0x03	; 3
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	83 e0       	ldi	r24, 0x03	; 3
     dca:	95 e0       	ldi	r25, 0x05	; 5
     dcc:	93 d3       	rcall	.+1830   	; 0x14f4 <outputS>
     dce:	17 c2       	rjmp	.+1070   	; 0x11fe <updateScreen+0x5a8>
     dd0:	81 30       	cpi	r24, 0x01	; 1
				}
				
				break;
				}
			}else{
			if(menuMoveArrow==1)
     dd2:	a1 f5       	brne	.+104    	; 0xe3c <updateScreen+0x1e6>
     dd4:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <screen1Index>
			{
				
				screen1Index++;
     dd8:	8f 5f       	subi	r24, 0xFF	; 255
     dda:	84 30       	cpi	r24, 0x04	; 4
				if(screen1Index>3)
     ddc:	18 f4       	brcc	.+6      	; 0xde4 <updateScreen+0x18e>
     dde:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <screen1Index>
				}
			}else{
			if(menuMoveArrow==1)
			{
				
				screen1Index++;
     de2:	03 c0       	rjmp	.+6      	; 0xdea <updateScreen+0x194>
     de4:	83 e0       	ldi	r24, 0x03	; 3
				if(screen1Index>3)
				{
					screen1Index = 3;
     de6:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <screen1Index>
     dea:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <screen1Index>
				}
				screen1[screen1Index][19] = '<';
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	c4 e1       	ldi	r28, 0x14	; 20
     df2:	c6 9f       	mul	r28, r22
     df4:	c0 01       	movw	r24, r0
     df6:	c7 9f       	mul	r28, r23
     df8:	90 0d       	add	r25, r0
     dfa:	11 24       	eor	r1, r1
     dfc:	89 53       	subi	r24, 0x39	; 57
     dfe:	9b 4f       	sbci	r25, 0xFB	; 251
     e00:	2c e3       	ldi	r18, 0x3C	; 60
     e02:	fc 01       	movw	r30, r24
     e04:	23 8b       	std	Z+19, r18	; 0x13
     e06:	9b 01       	movw	r18, r22
				screen1[screen1Index-1][19] = ' ';
     e08:	21 50       	subi	r18, 0x01	; 1
     e0a:	31 09       	sbc	r19, r1
     e0c:	c2 9f       	mul	r28, r18
     e0e:	f0 01       	movw	r30, r0
     e10:	c3 9f       	mul	r28, r19
     e12:	f0 0d       	add	r31, r0
     e14:	11 24       	eor	r1, r1
     e16:	e9 53       	subi	r30, 0x39	; 57
     e18:	fb 4f       	sbci	r31, 0xFB	; 251
     e1a:	20 e2       	ldi	r18, 0x20	; 32
     e1c:	23 8b       	std	Z+19, r18	; 0x13
				outputS(screen1[screen1Index], screen1Index);
     e1e:	6a d3       	rcall	.+1748   	; 0x14f4 <outputS>
				outputS(screen1[screen1Index-1], screen1Index-1);
     e20:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <screen1Index>
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	61 50       	subi	r22, 0x01	; 1
     e28:	71 09       	sbc	r23, r1
     e2a:	c6 9f       	mul	r28, r22
     e2c:	c0 01       	movw	r24, r0
     e2e:	c7 9f       	mul	r28, r23
     e30:	90 0d       	add	r25, r0
     e32:	11 24       	eor	r1, r1
     e34:	89 53       	subi	r24, 0x39	; 57
     e36:	9b 4f       	sbci	r25, 0xFB	; 251
     e38:	5d d3       	rcall	.+1722   	; 0x14f4 <outputS>
     e3a:	e1 c1       	rjmp	.+962    	; 0x11fe <updateScreen+0x5a8>
     e3c:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <screen1Index>
			
			
			}else 
			{
				screen1Index--;
     e40:	9e ef       	ldi	r25, 0xFE	; 254
				if(screen1Index>250||screen1Index==0)
     e42:	98 0f       	add	r25, r24
     e44:	9a 3f       	cpi	r25, 0xFA	; 250
     e46:	20 f4       	brcc	.+8      	; 0xe50 <updateScreen+0x1fa>
     e48:	81 50       	subi	r24, 0x01	; 1
				outputS(screen1[screen1Index-1], screen1Index-1);
			
			
			}else 
			{
				screen1Index--;
     e4a:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <screen1Index>
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <updateScreen+0x200>
     e50:	81 e0       	ldi	r24, 0x01	; 1
				if(screen1Index>250||screen1Index==0)
				{
					screen1Index = 1;
     e52:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <screen1Index>
     e56:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <screen1Index>
				}
				screen1[screen1Index][19] = '<';
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	c4 e1       	ldi	r28, 0x14	; 20
     e5e:	c6 9f       	mul	r28, r22
     e60:	c0 01       	movw	r24, r0
     e62:	c7 9f       	mul	r28, r23
     e64:	90 0d       	add	r25, r0
     e66:	11 24       	eor	r1, r1
     e68:	89 53       	subi	r24, 0x39	; 57
     e6a:	9b 4f       	sbci	r25, 0xFB	; 251
     e6c:	2c e3       	ldi	r18, 0x3C	; 60
     e6e:	fc 01       	movw	r30, r24
     e70:	23 8b       	std	Z+19, r18	; 0x13
				screen1[screen1Index+1][19] = ' ';
     e72:	9b 01       	movw	r18, r22
     e74:	2f 5f       	subi	r18, 0xFF	; 255
     e76:	3f 4f       	sbci	r19, 0xFF	; 255
     e78:	c2 9f       	mul	r28, r18
     e7a:	f0 01       	movw	r30, r0
     e7c:	c3 9f       	mul	r28, r19
     e7e:	f0 0d       	add	r31, r0
     e80:	11 24       	eor	r1, r1
     e82:	e9 53       	subi	r30, 0x39	; 57
     e84:	fb 4f       	sbci	r31, 0xFB	; 251
     e86:	20 e2       	ldi	r18, 0x20	; 32
				outputS(screen1[screen1Index], screen1Index);
     e88:	23 8b       	std	Z+19, r18	; 0x13
     e8a:	34 d3       	rcall	.+1640   	; 0x14f4 <outputS>
				outputS(screen1[screen1Index+1], screen1Index+1);
     e8c:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <screen1Index>
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	6f 5f       	subi	r22, 0xFF	; 255
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	c6 9f       	mul	r28, r22
     e98:	c0 01       	movw	r24, r0
     e9a:	c7 9f       	mul	r28, r23
     e9c:	90 0d       	add	r25, r0
     e9e:	11 24       	eor	r1, r1
     ea0:	89 53       	subi	r24, 0x39	; 57
     ea2:	9b 4f       	sbci	r25, 0xFB	; 251
     ea4:	27 d3       	rcall	.+1614   	; 0x14f4 <outputS>
     ea6:	ab c1       	rjmp	.+854    	; 0x11fe <updateScreen+0x5a8>
     ea8:	90 91 e8 05 	lds	r25, 0x05E8	; 0x8005e8 <encoderBFlag>
			}
			
			break;
			
			case 2:
			if(encoderBFlag)
     eac:	99 23       	and	r25, r25
     eae:	09 f4       	brne	.+2      	; 0xeb2 <updateScreen+0x25c>
     eb0:	88 c0       	rjmp	.+272    	; 0xfc2 <updateScreen+0x36c>
     eb2:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <screen2Index>
			{
				switch (screen2Index)
     eb6:	92 30       	cpi	r25, 0x02	; 2
     eb8:	19 f0       	breq	.+6      	; 0xec0 <updateScreen+0x26a>
     eba:	93 30       	cpi	r25, 0x03	; 3
     ebc:	b1 f1       	breq	.+108    	; 0xf2a <updateScreen+0x2d4>
     ebe:	9f c1       	rjmp	.+830    	; 0x11fe <updateScreen+0x5a8>
     ec0:	81 30       	cpi	r24, 0x01	; 1
					}
					
					break;
					
					case 2:
					if(menuMoveArrow==1)
     ec2:	d1 f4       	brne	.+52     	; 0xef8 <updateScreen+0x2a2>
     ec4:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <currentTrack>
					{
						currentPattern.trackPlayMode[currentTrack] = (currentPattern.trackPlayMode[currentTrack])+1;
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	fc 01       	movw	r30, r24
     ecc:	ee 50       	subi	r30, 0x0E	; 14
     ece:	fc 4f       	sbci	r31, 0xFC	; 252
     ed0:	20 81       	ld	r18, Z
     ed2:	2f 5f       	subi	r18, 0xFF	; 255
     ed4:	27 30       	cpi	r18, 0x07	; 7
						if(currentPattern.trackPlayMode[currentTrack]>6)
     ed6:	28 f4       	brcc	.+10     	; 0xee2 <updateScreen+0x28c>
					break;
					
					case 2:
					if(menuMoveArrow==1)
					{
						currentPattern.trackPlayMode[currentTrack] = (currentPattern.trackPlayMode[currentTrack])+1;
     ed8:	fc 01       	movw	r30, r24
     eda:	ee 50       	subi	r30, 0x0E	; 14
     edc:	fc 4f       	sbci	r31, 0xFC	; 252
     ede:	20 83       	st	Z, r18
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <updateScreen+0x296>
						if(currentPattern.trackPlayMode[currentTrack]>6)
						{
							currentPattern.trackPlayMode[currentTrack] = 6;
     ee2:	fc 01       	movw	r30, r24
     ee4:	ee 50       	subi	r30, 0x0E	; 14
     ee6:	fc 4f       	sbci	r31, 0xFC	; 252
     ee8:	26 e0       	ldi	r18, 0x06	; 6
     eea:	20 83       	st	Z, r18
						}
						//do printing poly or solo stuff here.
						
						outputS(screen2[2], 2);
     eec:	62 e0       	ldi	r22, 0x02	; 2
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	8f eb       	ldi	r24, 0xBF	; 191
     ef2:	95 e0       	ldi	r25, 0x05	; 5
     ef4:	ff d2       	rcall	.+1534   	; 0x14f4 <outputS>
     ef6:	83 c1       	rjmp	.+774    	; 0x11fe <updateScreen+0x5a8>
     ef8:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <currentTrack>
						
					}else
					{
						currentPattern.trackPlayMode[currentTrack] = (currentPattern.trackPlayMode[currentTrack])+1;
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	fc 01       	movw	r30, r24
     f00:	ee 50       	subi	r30, 0x0E	; 14
     f02:	fc 4f       	sbci	r31, 0xFC	; 252
     f04:	20 81       	ld	r18, Z
     f06:	2f 5f       	subi	r18, 0xFF	; 255
						if(currentPattern.trackPlayMode[currentTrack]==255)
     f08:	2f 3f       	cpi	r18, 0xFF	; 255
     f0a:	29 f0       	breq	.+10     	; 0xf16 <updateScreen+0x2c0>
						
						outputS(screen2[2], 2);
						
					}else
					{
						currentPattern.trackPlayMode[currentTrack] = (currentPattern.trackPlayMode[currentTrack])+1;
     f0c:	fc 01       	movw	r30, r24
     f0e:	ee 50       	subi	r30, 0x0E	; 14
     f10:	fc 4f       	sbci	r31, 0xFC	; 252
     f12:	20 83       	st	Z, r18
     f14:	04 c0       	rjmp	.+8      	; 0xf1e <updateScreen+0x2c8>
						if(currentPattern.trackPlayMode[currentTrack]==255)
						{
							currentPattern.trackPlayMode[currentTrack] = 0;
     f16:	fc 01       	movw	r30, r24
     f18:	ee 50       	subi	r30, 0x0E	; 14
     f1a:	fc 4f       	sbci	r31, 0xFC	; 252
     f1c:	10 82       	st	Z, r1
						}
						//do printing poly or solo stuff here
						outputS(screen2[2], 2);
     f1e:	62 e0       	ldi	r22, 0x02	; 2
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	8f eb       	ldi	r24, 0xBF	; 191
     f24:	95 e0       	ldi	r25, 0x05	; 5
     f26:	e6 d2       	rcall	.+1484   	; 0x14f4 <outputS>
     f28:	6a c1       	rjmp	.+724    	; 0x11fe <updateScreen+0x5a8>
     f2a:	81 30       	cpi	r24, 0x01	; 1
					}
					break;
					
					case 3:
					if(menuMoveArrow==1)
     f2c:	31 f5       	brne	.+76     	; 0xf7a <updateScreen+0x324>
     f2e:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <currentTrack>
					{
						currentPattern.trackOutputRoute[currentTrack] = (currentPattern.trackOutputRoute[currentTrack])+1;
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	fc 01       	movw	r30, r24
     f36:	e6 59       	subi	r30, 0x96	; 150
     f38:	fc 4f       	sbci	r31, 0xFC	; 252
     f3a:	20 8d       	ldd	r18, Z+24	; 0x18
     f3c:	2f 5f       	subi	r18, 0xFF	; 255
     f3e:	28 30       	cpi	r18, 0x08	; 8
						if(currentPattern.trackOutputRoute[currentTrack]>7)
     f40:	28 f4       	brcc	.+10     	; 0xf4c <updateScreen+0x2f6>
     f42:	fc 01       	movw	r30, r24
					break;
					
					case 3:
					if(menuMoveArrow==1)
					{
						currentPattern.trackOutputRoute[currentTrack] = (currentPattern.trackOutputRoute[currentTrack])+1;
     f44:	e6 59       	subi	r30, 0x96	; 150
     f46:	fc 4f       	sbci	r31, 0xFC	; 252
     f48:	20 8f       	std	Z+24, r18	; 0x18
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <updateScreen+0x300>
						if(currentPattern.trackOutputRoute[currentTrack]>7)
						{
							currentPattern.trackOutputRoute[currentTrack] = 7;
     f4c:	27 e0       	ldi	r18, 0x07	; 7
     f4e:	fc 01       	movw	r30, r24
     f50:	e6 59       	subi	r30, 0x96	; 150
     f52:	fc 4f       	sbci	r31, 0xFC	; 252
						}
						numPrinter(screen2[3], 10, 2, (currentPattern.trackOutputRoute[currentTrack])+1);
     f54:	20 8f       	std	Z+24, r18	; 0x18
     f56:	fc 01       	movw	r30, r24
     f58:	e6 59       	subi	r30, 0x96	; 150
     f5a:	fc 4f       	sbci	r31, 0xFC	; 252
     f5c:	20 8d       	ldd	r18, Z+24	; 0x18
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	2f 5f       	subi	r18, 0xFF	; 255
     f62:	3f 4f       	sbci	r19, 0xFF	; 255
     f64:	42 e0       	ldi	r20, 0x02	; 2
     f66:	6a e0       	ldi	r22, 0x0A	; 10
     f68:	83 ed       	ldi	r24, 0xD3	; 211
     f6a:	95 e0       	ldi	r25, 0x05	; 5
     f6c:	db d2       	rcall	.+1462   	; 0x1524 <numPrinter>
						outputS(screen2[3],3);
     f6e:	63 e0       	ldi	r22, 0x03	; 3
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	83 ed       	ldi	r24, 0xD3	; 211
     f74:	95 e0       	ldi	r25, 0x05	; 5
     f76:	be d2       	rcall	.+1404   	; 0x14f4 <outputS>
     f78:	42 c1       	rjmp	.+644    	; 0x11fe <updateScreen+0x5a8>
     f7a:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <currentTrack>
						
					}else
					{
						currentPattern.trackOutputRoute[currentTrack] = (currentPattern.trackOutputRoute[currentTrack])-1;
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	fc 01       	movw	r30, r24
     f82:	e6 59       	subi	r30, 0x96	; 150
     f84:	fc 4f       	sbci	r31, 0xFC	; 252
     f86:	20 8d       	ldd	r18, Z+24	; 0x18
     f88:	21 50       	subi	r18, 0x01	; 1
     f8a:	28 f0       	brcs	.+10     	; 0xf96 <updateScreen+0x340>
     f8c:	fc 01       	movw	r30, r24
     f8e:	e6 59       	subi	r30, 0x96	; 150
     f90:	fc 4f       	sbci	r31, 0xFC	; 252
     f92:	20 8f       	std	Z+24, r18	; 0x18
     f94:	04 c0       	rjmp	.+8      	; 0xf9e <updateScreen+0x348>
						if(currentPattern.trackOutputRoute[currentTrack]==255)
						{
							currentPattern.trackOutputRoute[currentTrack] = 0;
     f96:	fc 01       	movw	r30, r24
     f98:	e6 59       	subi	r30, 0x96	; 150
     f9a:	fc 4f       	sbci	r31, 0xFC	; 252
						}
						numPrinter(screen2[3], 10, 2, (currentPattern.trackOutputRoute[currentTrack])+1);
     f9c:	10 8e       	std	Z+24, r1	; 0x18
     f9e:	fc 01       	movw	r30, r24
     fa0:	e6 59       	subi	r30, 0x96	; 150
     fa2:	fc 4f       	sbci	r31, 0xFC	; 252
     fa4:	20 8d       	ldd	r18, Z+24	; 0x18
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	2f 5f       	subi	r18, 0xFF	; 255
     faa:	3f 4f       	sbci	r19, 0xFF	; 255
     fac:	42 e0       	ldi	r20, 0x02	; 2
     fae:	6a e0       	ldi	r22, 0x0A	; 10
     fb0:	83 ed       	ldi	r24, 0xD3	; 211
     fb2:	95 e0       	ldi	r25, 0x05	; 5
     fb4:	b7 d2       	rcall	.+1390   	; 0x1524 <numPrinter>
						outputS(screen2[3],3);
     fb6:	63 e0       	ldi	r22, 0x03	; 3
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	83 ed       	ldi	r24, 0xD3	; 211
     fbc:	95 e0       	ldi	r25, 0x05	; 5
     fbe:	9a d2       	rcall	.+1332   	; 0x14f4 <outputS>
     fc0:	1e c1       	rjmp	.+572    	; 0x11fe <updateScreen+0x5a8>
     fc2:	81 30       	cpi	r24, 0x01	; 1
					break;
					
				}
				
			}else{
			if(menuMoveArrow==1)
     fc4:	a1 f5       	brne	.+104    	; 0x102e <updateScreen+0x3d8>
     fc6:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <screen2Index>
			{
				screen2Index++;
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	84 30       	cpi	r24, 0x04	; 4
				if(screen2Index>3)
     fce:	18 f4       	brcc	.+6      	; 0xfd6 <updateScreen+0x380>
     fd0:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <screen2Index>
				}
				
			}else{
			if(menuMoveArrow==1)
			{
				screen2Index++;
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <updateScreen+0x386>
     fd6:	83 e0       	ldi	r24, 0x03	; 3
				if(screen2Index>3)
				{
					screen2Index = 3;
     fd8:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <screen2Index>
     fdc:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <screen2Index>
				}
				screen2[screen2Index][19] = '<';
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	c4 e1       	ldi	r28, 0x14	; 20
     fe4:	c6 9f       	mul	r28, r22
     fe6:	c0 01       	movw	r24, r0
     fe8:	c7 9f       	mul	r28, r23
     fea:	90 0d       	add	r25, r0
     fec:	11 24       	eor	r1, r1
     fee:	89 56       	subi	r24, 0x69	; 105
     ff0:	9a 4f       	sbci	r25, 0xFA	; 250
     ff2:	2c e3       	ldi	r18, 0x3C	; 60
     ff4:	fc 01       	movw	r30, r24
     ff6:	23 8b       	std	Z+19, r18	; 0x13
				screen2[screen2Index-1][19] = ' ';
     ff8:	9b 01       	movw	r18, r22
     ffa:	21 50       	subi	r18, 0x01	; 1
     ffc:	31 09       	sbc	r19, r1
     ffe:	c2 9f       	mul	r28, r18
    1000:	f0 01       	movw	r30, r0
    1002:	c3 9f       	mul	r28, r19
    1004:	f0 0d       	add	r31, r0
    1006:	11 24       	eor	r1, r1
    1008:	e9 56       	subi	r30, 0x69	; 105
    100a:	fa 4f       	sbci	r31, 0xFA	; 250
    100c:	20 e2       	ldi	r18, 0x20	; 32
				outputS(screen2[screen2Index], screen2Index);
    100e:	23 8b       	std	Z+19, r18	; 0x13
    1010:	71 d2       	rcall	.+1250   	; 0x14f4 <outputS>
				outputS(screen2[screen2Index-1], screen2Index-1);
    1012:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <screen2Index>
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	61 50       	subi	r22, 0x01	; 1
    101a:	71 09       	sbc	r23, r1
    101c:	c6 9f       	mul	r28, r22
    101e:	c0 01       	movw	r24, r0
    1020:	c7 9f       	mul	r28, r23
    1022:	90 0d       	add	r25, r0
    1024:	11 24       	eor	r1, r1
    1026:	89 56       	subi	r24, 0x69	; 105
    1028:	9a 4f       	sbci	r25, 0xFA	; 250
    102a:	64 d2       	rcall	.+1224   	; 0x14f4 <outputS>
    102c:	e8 c0       	rjmp	.+464    	; 0x11fe <updateScreen+0x5a8>
    102e:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <screen2Index>
				
				
			}else
			{
				screen2Index--;
    1032:	9e ef       	ldi	r25, 0xFE	; 254
				if(screen2Index>250||screen2Index==0) //this should account for any negative numbers from overflow.
    1034:	98 0f       	add	r25, r24
    1036:	9a 3f       	cpi	r25, 0xFA	; 250
    1038:	20 f4       	brcc	.+8      	; 0x1042 <updateScreen+0x3ec>
    103a:	81 50       	subi	r24, 0x01	; 1
				outputS(screen2[screen2Index-1], screen2Index-1);
				
				
			}else
			{
				screen2Index--;
    103c:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <screen2Index>
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <updateScreen+0x3f2>
    1042:	81 e0       	ldi	r24, 0x01	; 1
				if(screen2Index>250||screen2Index==0) //this should account for any negative numbers from overflow.
				{
					screen2Index = 1;
    1044:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <screen2Index>
    1048:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <screen2Index>
				}
				screen2[screen2Index][19] = '<';
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	c4 e1       	ldi	r28, 0x14	; 20
    1050:	c6 9f       	mul	r28, r22
    1052:	c0 01       	movw	r24, r0
    1054:	c7 9f       	mul	r28, r23
    1056:	90 0d       	add	r25, r0
    1058:	11 24       	eor	r1, r1
    105a:	89 56       	subi	r24, 0x69	; 105
    105c:	9a 4f       	sbci	r25, 0xFA	; 250
    105e:	2c e3       	ldi	r18, 0x3C	; 60
    1060:	fc 01       	movw	r30, r24
    1062:	23 8b       	std	Z+19, r18	; 0x13
				screen2[screen2Index+1][19] = ' ';
    1064:	9b 01       	movw	r18, r22
    1066:	2f 5f       	subi	r18, 0xFF	; 255
    1068:	3f 4f       	sbci	r19, 0xFF	; 255
    106a:	c2 9f       	mul	r28, r18
    106c:	f0 01       	movw	r30, r0
    106e:	c3 9f       	mul	r28, r19
    1070:	f0 0d       	add	r31, r0
    1072:	11 24       	eor	r1, r1
    1074:	e9 56       	subi	r30, 0x69	; 105
    1076:	fa 4f       	sbci	r31, 0xFA	; 250
    1078:	20 e2       	ldi	r18, 0x20	; 32
				outputS(screen2[screen2Index], screen2Index);
    107a:	23 8b       	std	Z+19, r18	; 0x13
    107c:	3b d2       	rcall	.+1142   	; 0x14f4 <outputS>
				outputS(screen2[screen2Index+1], screen2Index+1);
    107e:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <screen2Index>
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	6f 5f       	subi	r22, 0xFF	; 255
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	c6 9f       	mul	r28, r22
    108a:	c0 01       	movw	r24, r0
    108c:	c7 9f       	mul	r28, r23
    108e:	90 0d       	add	r25, r0
    1090:	11 24       	eor	r1, r1
    1092:	89 56       	subi	r24, 0x69	; 105
    1094:	9a 4f       	sbci	r25, 0xFA	; 250
    1096:	2e d2       	rcall	.+1116   	; 0x14f4 <outputS>
    1098:	b2 c0       	rjmp	.+356    	; 0x11fe <updateScreen+0x5a8>
    109a:	81 30       	cpi	r24, 0x01	; 1
			break;
			
			case 3:
			
				//this is the functionality if encoder B flag is not pressed
				if(menuMoveArrow==1)
    109c:	09 f0       	breq	.+2      	; 0x10a0 <updateScreen+0x44a>
    109e:	58 c0       	rjmp	.+176    	; 0x1150 <updateScreen+0x4fa>
    10a0:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <encoderBFlag>
				{
					if(encoderBFlag)
    10a4:	88 23       	and	r24, r24
    10a6:	01 f1       	breq	.+64     	; 0x10e8 <updateScreen+0x492>
					{
						switch(screen3Index)
    10a8:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <screen3Index>
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <updateScreen+0x45c>
						{
							case 1:
							midiChannel = midiChannel+1;
    10b0:	a6 c0       	rjmp	.+332    	; 0x11fe <updateScreen+0x5a8>
    10b2:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <midiChannel>
							if(midiChannel>15)
    10b6:	8f 5f       	subi	r24, 0xFF	; 255
    10b8:	80 31       	cpi	r24, 0x10	; 16
					if(encoderBFlag)
					{
						switch(screen3Index)
						{
							case 1:
							midiChannel = midiChannel+1;
    10ba:	18 f4       	brcc	.+6      	; 0x10c2 <updateScreen+0x46c>
    10bc:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <midiChannel>
							if(midiChannel>15)
							{
								midiChannel = 15;
    10c0:	03 c0       	rjmp	.+6      	; 0x10c8 <updateScreen+0x472>
    10c2:	8f e0       	ldi	r24, 0x0F	; 15
    10c4:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <midiChannel>
							}
							numPrinter(screen3[1], 14, 2, (midiChannel+1));
    10c8:	20 91 95 05 	lds	r18, 0x0595	; 0x800595 <midiChannel>
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	2f 5f       	subi	r18, 0xFF	; 255
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	42 e0       	ldi	r20, 0x02	; 2
    10d4:	6e e0       	ldi	r22, 0x0E	; 14
    10d6:	8f e2       	ldi	r24, 0x2F	; 47
    10d8:	96 e0       	ldi	r25, 0x06	; 6
    10da:	24 d2       	rcall	.+1096   	; 0x1524 <numPrinter>
							outputS(screen3[1], 1);
    10dc:	61 e0       	ldi	r22, 0x01	; 1
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	8f e2       	ldi	r24, 0x2F	; 47
    10e2:	96 e0       	ldi	r25, 0x06	; 6
    10e4:	07 d2       	rcall	.+1038   	; 0x14f4 <outputS>
    10e6:	8b c0       	rjmp	.+278    	; 0x11fe <updateScreen+0x5a8>
							break;
    10e8:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <screen3Index>
							
						}
					}else
					{
						screen3Index++;
    10ec:	8f 5f       	subi	r24, 0xFF	; 255
    10ee:	84 30       	cpi	r24, 0x04	; 4
						if(screen3Index>3)
    10f0:	18 f4       	brcc	.+6      	; 0x10f8 <updateScreen+0x4a2>
    10f2:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <screen3Index>
							break;
							
						}
					}else
					{
						screen3Index++;
    10f6:	03 c0       	rjmp	.+6      	; 0x10fe <updateScreen+0x4a8>
    10f8:	83 e0       	ldi	r24, 0x03	; 3
						if(screen3Index>3)
						{
							screen3Index = 3;
    10fa:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <screen3Index>
						}
						screen3[screen3Index][19] = '<';
    10fe:	60 91 6b 06 	lds	r22, 0x066B	; 0x80066b <screen3Index>
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	c4 e1       	ldi	r28, 0x14	; 20
    1106:	c6 9f       	mul	r28, r22
    1108:	c0 01       	movw	r24, r0
    110a:	c7 9f       	mul	r28, r23
    110c:	90 0d       	add	r25, r0
    110e:	11 24       	eor	r1, r1
    1110:	85 5e       	subi	r24, 0xE5	; 229
    1112:	99 4f       	sbci	r25, 0xF9	; 249
    1114:	2c e3       	ldi	r18, 0x3C	; 60
    1116:	fc 01       	movw	r30, r24
						screen3[screen3Index-1][19] = ' ';
    1118:	23 8b       	std	Z+19, r18	; 0x13
    111a:	9b 01       	movw	r18, r22
    111c:	21 50       	subi	r18, 0x01	; 1
    111e:	31 09       	sbc	r19, r1
    1120:	c2 9f       	mul	r28, r18
    1122:	f0 01       	movw	r30, r0
    1124:	c3 9f       	mul	r28, r19
    1126:	f0 0d       	add	r31, r0
    1128:	11 24       	eor	r1, r1
    112a:	e5 5e       	subi	r30, 0xE5	; 229
    112c:	f9 4f       	sbci	r31, 0xF9	; 249
    112e:	20 e2       	ldi	r18, 0x20	; 32
						outputS(screen3[screen3Index], screen3Index);
    1130:	23 8b       	std	Z+19, r18	; 0x13
    1132:	e0 d1       	rcall	.+960    	; 0x14f4 <outputS>
						outputS(screen3[screen3Index-1], screen3Index-1);
    1134:	60 91 6b 06 	lds	r22, 0x066B	; 0x80066b <screen3Index>
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	61 50       	subi	r22, 0x01	; 1
    113c:	71 09       	sbc	r23, r1
    113e:	c6 9f       	mul	r28, r22
    1140:	c0 01       	movw	r24, r0
    1142:	c7 9f       	mul	r28, r23
    1144:	90 0d       	add	r25, r0
    1146:	11 24       	eor	r1, r1
    1148:	85 5e       	subi	r24, 0xE5	; 229
    114a:	99 4f       	sbci	r25, 0xF9	; 249
    114c:	d3 d1       	rcall	.+934    	; 0x14f4 <outputS>
    114e:	57 c0       	rjmp	.+174    	; 0x11fe <updateScreen+0x5a8>
					}
					
					
				}else
				{
					if(encoderBFlag)
    1150:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <encoderBFlag>
    1154:	88 23       	and	r24, r24
					{
						switch(screen3Index)
    1156:	f1 f0       	breq	.+60     	; 0x1194 <updateScreen+0x53e>
    1158:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <screen3Index>
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	09 f0       	breq	.+2      	; 0x1162 <updateScreen+0x50c>
						{
							case 1:
							midiChannel = midiChannel-1;
    1160:	4e c0       	rjmp	.+156    	; 0x11fe <updateScreen+0x5a8>
    1162:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <midiChannel>
    1166:	81 50       	subi	r24, 0x01	; 1
    1168:	18 f0       	brcs	.+6      	; 0x1170 <updateScreen+0x51a>
    116a:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <midiChannel>
							if(midiChannel==255)
							{
								midiChannel = 0;
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <updateScreen+0x51e>
    1170:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <midiChannel>
							}
							numPrinter(screen3[1], 14, 2, (midiChannel+1));
    1174:	20 91 95 05 	lds	r18, 0x0595	; 0x800595 <midiChannel>
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	2f 5f       	subi	r18, 0xFF	; 255
    117c:	3f 4f       	sbci	r19, 0xFF	; 255
    117e:	42 e0       	ldi	r20, 0x02	; 2
    1180:	6e e0       	ldi	r22, 0x0E	; 14
    1182:	8f e2       	ldi	r24, 0x2F	; 47
    1184:	96 e0       	ldi	r25, 0x06	; 6
    1186:	ce d1       	rcall	.+924    	; 0x1524 <numPrinter>
							outputS(screen3[1], 1);
    1188:	61 e0       	ldi	r22, 0x01	; 1
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	8f e2       	ldi	r24, 0x2F	; 47
    118e:	96 e0       	ldi	r25, 0x06	; 6
    1190:	b1 d1       	rcall	.+866    	; 0x14f4 <outputS>
    1192:	35 c0       	rjmp	.+106    	; 0x11fe <updateScreen+0x5a8>
							break;
    1194:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <screen3Index>
							
						}
					}else{
					screen3Index--;
    1198:	9e ef       	ldi	r25, 0xFE	; 254
					if(screen3Index>250||screen3Index==0) //this should account for any negative numbers from overflow.
    119a:	98 0f       	add	r25, r24
    119c:	9a 3f       	cpi	r25, 0xFA	; 250
    119e:	20 f4       	brcc	.+8      	; 0x11a8 <updateScreen+0x552>
    11a0:	81 50       	subi	r24, 0x01	; 1
							outputS(screen3[1], 1);
							break;
							
						}
					}else{
					screen3Index--;
    11a2:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <screen3Index>
    11a6:	03 c0       	rjmp	.+6      	; 0x11ae <updateScreen+0x558>
					if(screen3Index>250||screen3Index==0) //this should account for any negative numbers from overflow.
					{
						screen3Index = 1;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <screen3Index>
					}
					screen3[screen3Index][19] = '<';
    11ae:	60 91 6b 06 	lds	r22, 0x066B	; 0x80066b <screen3Index>
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	c4 e1       	ldi	r28, 0x14	; 20
    11b6:	c6 9f       	mul	r28, r22
    11b8:	c0 01       	movw	r24, r0
    11ba:	c7 9f       	mul	r28, r23
    11bc:	90 0d       	add	r25, r0
    11be:	11 24       	eor	r1, r1
    11c0:	85 5e       	subi	r24, 0xE5	; 229
    11c2:	99 4f       	sbci	r25, 0xF9	; 249
    11c4:	2c e3       	ldi	r18, 0x3C	; 60
    11c6:	fc 01       	movw	r30, r24
					screen3[screen3Index+1][19] = ' ';
    11c8:	23 8b       	std	Z+19, r18	; 0x13
    11ca:	9b 01       	movw	r18, r22
    11cc:	2f 5f       	subi	r18, 0xFF	; 255
    11ce:	3f 4f       	sbci	r19, 0xFF	; 255
    11d0:	c2 9f       	mul	r28, r18
    11d2:	f0 01       	movw	r30, r0
    11d4:	c3 9f       	mul	r28, r19
    11d6:	f0 0d       	add	r31, r0
    11d8:	11 24       	eor	r1, r1
    11da:	e5 5e       	subi	r30, 0xE5	; 229
    11dc:	f9 4f       	sbci	r31, 0xF9	; 249
    11de:	20 e2       	ldi	r18, 0x20	; 32
					outputS(screen3[screen3Index], screen3Index);
    11e0:	23 8b       	std	Z+19, r18	; 0x13
    11e2:	88 d1       	rcall	.+784    	; 0x14f4 <outputS>
					outputS(screen3[screen3Index+1], screen3Index+1);
    11e4:	60 91 6b 06 	lds	r22, 0x066B	; 0x80066b <screen3Index>
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	6f 5f       	subi	r22, 0xFF	; 255
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
    11ee:	c6 9f       	mul	r28, r22
    11f0:	c0 01       	movw	r24, r0
    11f2:	c7 9f       	mul	r28, r23
    11f4:	90 0d       	add	r25, r0
    11f6:	11 24       	eor	r1, r1
    11f8:	85 5e       	subi	r24, 0xE5	; 229
    11fa:	99 4f       	sbci	r25, 0xF9	; 249
    11fc:	7b d1       	rcall	.+758    	; 0x14f4 <outputS>
				
			
			break;
					
		}
		prevEncoderBValue = encoderBValue;
    11fe:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <encoderBValue>
    1202:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <prevEncoderBValue>
	}
	
	//top encoder
	if(prevEncoderAValue!=encoderAValue){
    1206:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
    120a:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <prevEncoderAValue>
    120e:	98 17       	cp	r25, r24
    1210:	09 f4       	brne	.+2      	; 0x1214 <updateScreen+0x5be>
	encoderAValue = encoderAValue%4;
    1212:	6b c0       	rjmp	.+214    	; 0x12ea <updateScreen+0x694>
    1214:	83 70       	andi	r24, 0x03	; 3
    1216:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <encoderAValue>
	switch (encoderAValue)
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	09 f1       	breq	.+66     	; 0x1260 <updateScreen+0x60a>
    121e:	38 f0       	brcs	.+14     	; 0x122e <updateScreen+0x5d8>
    1220:	82 30       	cpi	r24, 0x02	; 2
    1222:	09 f4       	brne	.+2      	; 0x1226 <updateScreen+0x5d0>
    1224:	3f c0       	rjmp	.+126    	; 0x12a4 <updateScreen+0x64e>
    1226:	83 30       	cpi	r24, 0x03	; 3
    1228:	09 f4       	brne	.+2      	; 0x122c <updateScreen+0x5d6>
	{
		case 0:
		numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
    122a:	4c c0       	rjmp	.+152    	; 0x12c4 <updateScreen+0x66e>
    122c:	5a c0       	rjmp	.+180    	; 0x12e2 <updateScreen+0x68c>
    122e:	20 91 c2 04 	lds	r18, 0x04C2	; 0x8004c2 <currentPattern+0x158>
    1232:	30 91 c3 04 	lds	r19, 0x04C3	; 0x8004c3 <currentPattern+0x159>
    1236:	43 e0       	ldi	r20, 0x03	; 3
    1238:	65 e0       	ldi	r22, 0x05	; 5
    123a:	8b e6       	ldi	r24, 0x6B	; 107
    123c:	95 e0       	ldi	r25, 0x05	; 5
    123e:	72 d1       	rcall	.+740    	; 0x1524 <numPrinter>
    1240:	03 e4       	ldi	r16, 0x43	; 67
    1242:	15 e0       	ldi	r17, 0x05	; 5
		for(uint8_t i=0;i<4; i++ ){
			outputS(screen0[i],i);
    1244:	c0 e0       	ldi	r28, 0x00	; 0
    1246:	d0 e0       	ldi	r29, 0x00	; 0
    1248:	be 01       	movw	r22, r28
    124a:	c8 01       	movw	r24, r16
    124c:	53 d1       	rcall	.+678    	; 0x14f4 <outputS>
    124e:	21 96       	adiw	r28, 0x01	; 1
	encoderAValue = encoderAValue%4;
	switch (encoderAValue)
	{
		case 0:
		numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
		for(uint8_t i=0;i<4; i++ ){
    1250:	0c 5e       	subi	r16, 0xEC	; 236
    1252:	1f 4f       	sbci	r17, 0xFF	; 255
    1254:	c4 30       	cpi	r28, 0x04	; 4
			outputS(screen0[i],i);
		}
		screen0Index = 0;
    1256:	d1 05       	cpc	r29, r1
    1258:	b9 f7       	brne	.-18     	; 0x1248 <updateScreen+0x5f2>
		
		break;
    125a:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <screen0Index>
		
		case 1:
		numPrinter(screen1[2], 6, 2, currentPattern.numSteps);
    125e:	41 c0       	rjmp	.+130    	; 0x12e2 <updateScreen+0x68c>
    1260:	20 91 c4 04 	lds	r18, 0x04C4	; 0x8004c4 <currentPattern+0x15a>
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	42 e0       	ldi	r20, 0x02	; 2
    1268:	66 e0       	ldi	r22, 0x06	; 6
    126a:	8f ee       	ldi	r24, 0xEF	; 239
		numPrinter(screen1[3], 13, 2, (currentStep+1));
    126c:	94 e0       	ldi	r25, 0x04	; 4
    126e:	5a d1       	rcall	.+692    	; 0x1524 <numPrinter>
    1270:	20 91 6f 06 	lds	r18, 0x066F	; 0x80066f <currentStep>
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	2f 5f       	subi	r18, 0xFF	; 255
    1278:	3f 4f       	sbci	r19, 0xFF	; 255
    127a:	42 e0       	ldi	r20, 0x02	; 2
    127c:	6d e0       	ldi	r22, 0x0D	; 13
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	95 e0       	ldi	r25, 0x05	; 5
    1282:	50 d1       	rcall	.+672    	; 0x1524 <numPrinter>
    1284:	07 ec       	ldi	r16, 0xC7	; 199
    1286:	14 e0       	ldi	r17, 0x04	; 4
		for(uint8_t i=0;i<4; i++ ){
 		outputS(screen1[i],i);
    1288:	c0 e0       	ldi	r28, 0x00	; 0
    128a:	d0 e0       	ldi	r29, 0x00	; 0
    128c:	be 01       	movw	r22, r28
    128e:	c8 01       	movw	r24, r16
    1290:	31 d1       	rcall	.+610    	; 0x14f4 <outputS>
    1292:	21 96       	adiw	r28, 0x01	; 1
    1294:	0c 5e       	subi	r16, 0xEC	; 236
		break;
		
		case 1:
		numPrinter(screen1[2], 6, 2, currentPattern.numSteps);
		numPrinter(screen1[3], 13, 2, (currentStep+1));
		for(uint8_t i=0;i<4; i++ ){
    1296:	1f 4f       	sbci	r17, 0xFF	; 255
    1298:	c4 30       	cpi	r28, 0x04	; 4
    129a:	d1 05       	cpc	r29, r1
 		outputS(screen1[i],i);
		}
		screen1Index = 0;
    129c:	b9 f7       	brne	.-18     	; 0x128c <updateScreen+0x636>
    129e:	10 92 96 05 	sts	0x0596, r1	; 0x800596 <screen1Index>
 		break;
    12a2:	1f c0       	rjmp	.+62     	; 0x12e2 <updateScreen+0x68c>
    12a4:	07 e9       	ldi	r16, 0x97	; 151
	}
	
	//top encoder
	if(prevEncoderAValue!=encoderAValue){
	encoderAValue = encoderAValue%4;
	switch (encoderAValue)
    12a6:	15 e0       	ldi	r17, 0x05	; 5
    12a8:	c0 e0       	ldi	r28, 0x00	; 0
		screen1Index = 0;
 		break;
		 
		case 2:
		for(uint8_t i=0;i<4; i++ ){
			outputS(screen2[i],i);
    12aa:	d0 e0       	ldi	r29, 0x00	; 0
    12ac:	be 01       	movw	r22, r28
    12ae:	c8 01       	movw	r24, r16
    12b0:	21 d1       	rcall	.+578    	; 0x14f4 <outputS>
    12b2:	21 96       	adiw	r28, 0x01	; 1
    12b4:	0c 5e       	subi	r16, 0xEC	; 236
    12b6:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		screen1Index = 0;
 		break;
		 
		case 2:
		for(uint8_t i=0;i<4; i++ ){
    12b8:	c4 30       	cpi	r28, 0x04	; 4
    12ba:	d1 05       	cpc	r29, r1
    12bc:	b9 f7       	brne	.-18     	; 0x12ac <updateScreen+0x656>
			outputS(screen2[i],i);
		}
		screen2Index = 0;
    12be:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <screen2Index>
		break;
    12c2:	0f c0       	rjmp	.+30     	; 0x12e2 <updateScreen+0x68c>
    12c4:	0b e1       	ldi	r16, 0x1B	; 27
    12c6:	16 e0       	ldi	r17, 0x06	; 6
	}
	
	//top encoder
	if(prevEncoderAValue!=encoderAValue){
	encoderAValue = encoderAValue%4;
	switch (encoderAValue)
    12c8:	c0 e0       	ldi	r28, 0x00	; 0
    12ca:	d0 e0       	ldi	r29, 0x00	; 0
		screen2Index = 0;
		break;
		 
		case 3:
		for(uint8_t i=0;i<4; i++ ){
			outputS(screen3[i],i);
    12cc:	be 01       	movw	r22, r28
    12ce:	c8 01       	movw	r24, r16
    12d0:	11 d1       	rcall	.+546    	; 0x14f4 <outputS>
    12d2:	21 96       	adiw	r28, 0x01	; 1
    12d4:	0c 5e       	subi	r16, 0xEC	; 236
    12d6:	1f 4f       	sbci	r17, 0xFF	; 255
    12d8:	c4 30       	cpi	r28, 0x04	; 4
		}
		screen2Index = 0;
		break;
		 
		case 3:
		for(uint8_t i=0;i<4; i++ ){
    12da:	d1 05       	cpc	r29, r1
    12dc:	b9 f7       	brne	.-18     	; 0x12cc <updateScreen+0x676>
    12de:	10 92 6b 06 	sts	0x066B, r1	; 0x80066b <screen3Index>
			outputS(screen3[i],i);
		}
		screen3Index = 0;
    12e2:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
		break;
		 
		 
	}
	prevEncoderAValue = encoderAValue;
    12e6:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <prevEncoderAValue>
    12ea:	df 91       	pop	r29
	
	}


    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	08 95       	ret

000012f4 <listenMidi>:
uint8_t midiPCCheck = 0;
uint8_t midiOffCheck = 0;


void listenMidi()
{
    12f4:	cf 92       	push	r12
    12f6:	df 92       	push	r13
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
	midiNoteCheck = (0B10010000|midiChannel);
    1304:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <midiChannel>
    1308:	98 2f       	mov	r25, r24
    130a:	90 69       	ori	r25, 0x90	; 144
    130c:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <midiNoteCheck>
	midiCCCheck = (0B10110000|midiChannel);
    1310:	98 2f       	mov	r25, r24
    1312:	90 6b       	ori	r25, 0xB0	; 176
    1314:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <midiCCCheck>
	midiPCCheck = (0B11000000|midiChannel);
    1318:	98 2f       	mov	r25, r24
    131a:	90 6c       	ori	r25, 0xC0	; 192
    131c:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <midiPCCheck>
	midiOffCheck = (0B10000000|midiChannel);
    1320:	80 68       	ori	r24, 0x80	; 128
    1322:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <midiOffCheck>
	
	//right now, this is just for testing.
	currentMidiMessage[0] = getChar();
    1326:	55 d3       	rcall	.+1706   	; 0x19d2 <getChar>
    1328:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <currentMidiMessage>
	//while(currentMidiMessage[0]==254)
	//{
	//	currentMidiMessage[0]=getChar(); //for now, get rid of midi clock signals
	//}
	if(currentMidiMessage[0]==midiNoteCheck)
    132c:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <midiNoteCheck>
    1330:	89 13       	cpse	r24, r25
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
    1332:	2d c0       	rjmp	.+90     	; 0x138e <listenMidi+0x9a>
    1334:	4e d3       	rcall	.+1692   	; 0x19d2 <getChar>
    1336:	c0 e6       	ldi	r28, 0x60	; 96
    1338:	d3 e0       	ldi	r29, 0x03	; 3
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	4a d3       	rcall	.+1684   	; 0x19d2 <getChar>
    133e:	8a 83       	std	Y+2, r24	; 0x02
    1340:	02 eb       	ldi	r16, 0xB2	; 178
    1342:	14 e0       	ldi	r17, 0x04	; 4
    1344:	c2 ef       	ldi	r28, 0xF2	; 242
    1346:	d3 e0       	ldi	r29, 0x03	; 3
    1348:	0f 2e       	mov	r0, r31
    134a:	f2 e0       	ldi	r31, 0x02	; 2
    134c:	cf 2e       	mov	r12, r31
    134e:	f4 e0       	ldi	r31, 0x04	; 4
    1350:	df 2e       	mov	r13, r31
    1352:	f0 2d       	mov	r31, r0
		//outputS(printMidiNote, 3);
		
		for(int i=0; i<16; i++)
		{
			//I don't like this forloop, but It seems like the best way to deal with this struct at the moment.
			if((currentPattern.midiTrackNote[i])==(currentMidiMessage[1]))
    1354:	0f 2e       	mov	r0, r31
    1356:	f0 e6       	ldi	r31, 0x60	; 96
    1358:	ef 2e       	mov	r14, r31
    135a:	f3 e0       	ldi	r31, 0x03	; 3
    135c:	ff 2e       	mov	r15, r31
    135e:	f0 2d       	mov	r31, r0
    1360:	f8 01       	movw	r30, r16
    1362:	91 91       	ld	r25, Z+
    1364:	8f 01       	movw	r16, r30
    1366:	f7 01       	movw	r30, r14
    1368:	81 81       	ldd	r24, Z+1	; 0x01
    136a:	98 13       	cpse	r25, r24
    136c:	0c c0       	rjmp	.+24     	; 0x1386 <listenMidi+0x92>
			trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
    136e:	28 81       	ld	r18, Y
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	fe 01       	movw	r30, r28
    1374:	e0 57       	subi	r30, 0x70	; 112
    1376:	f1 09       	sbc	r31, r1
    1378:	40 81       	ld	r20, Z
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	68 89       	ldd	r22, Y+16	; 0x10
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	88 a1       	ldd	r24, Y+32	; 0x20
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	3b d3       	rcall	.+1654   	; 0x19fc <trackControl>
    1386:	21 96       	adiw	r28, 0x01	; 1
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
		//outputS(printMidiNote, 3);
		
		for(int i=0; i<16; i++)
    1388:	cc 15       	cp	r28, r12
    138a:	dd 05       	cpc	r29, r13
    138c:	49 f7       	brne	.-46     	; 0x1360 <listenMidi+0x6c>
			if((currentPattern.midiTrackNote[i])==(currentMidiMessage[1]))
			trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
		}
		
	}
	if(currentMidiMessage[0]==midiCCCheck)
    138e:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <currentMidiMessage>
    1392:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <midiCCCheck>
    1396:	98 13       	cpse	r25, r24
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (control)
    1398:	0b c0       	rjmp	.+22     	; 0x13b0 <listenMidi+0xbc>
    139a:	1b d3       	rcall	.+1590   	; 0x19d2 <getChar>
    139c:	c0 e6       	ldi	r28, 0x60	; 96
    139e:	d3 e0       	ldi	r29, 0x03	; 3
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	17 d3       	rcall	.+1582   	; 0x19d2 <getChar>
		outputS(printMidiCC, 3);
    13a4:	8a 83       	std	Y+2, r24	; 0x02
    13a6:	63 e0       	ldi	r22, 0x03	; 3
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	8c e8       	ldi	r24, 0x8C	; 140
    13ac:	92 e0       	ldi	r25, 0x02	; 2
	
	}
	if(currentMidiMessage[0]==midiPCCheck)
    13ae:	a2 d0       	rcall	.+324    	; 0x14f4 <outputS>
    13b0:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <currentMidiMessage>
    13b4:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <midiPCCheck>
    13b8:	98 13       	cpse	r25, r24
	{
		currentMidiMessage[1] = getChar(); //this should be a byte1 (progChageNumber)
    13ba:	08 c0       	rjmp	.+16     	; 0x13cc <listenMidi+0xd8>
    13bc:	0a d3       	rcall	.+1556   	; 0x19d2 <getChar>
    13be:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <currentMidiMessage+0x1>
		outputS(printMidiPC, 3);
    13c2:	63 e0       	ldi	r22, 0x03	; 3
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	88 e7       	ldi	r24, 0x78	; 120
    13c8:	92 e0       	ldi	r25, 0x02	; 2
		
	}
	if(currentMidiMessage[0]==midiOffCheck)
    13ca:	94 d0       	rcall	.+296    	; 0x14f4 <outputS>
    13cc:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <currentMidiMessage>
    13d0:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <midiOffCheck>
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
    13d4:	98 13       	cpse	r25, r24
    13d6:	0b c0       	rjmp	.+22     	; 0x13ee <listenMidi+0xfa>
    13d8:	fc d2       	rcall	.+1528   	; 0x19d2 <getChar>
    13da:	c0 e6       	ldi	r28, 0x60	; 96
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
    13dc:	d3 e0       	ldi	r29, 0x03	; 3
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	f8 d2       	rcall	.+1520   	; 0x19d2 <getChar>
		outputS(blank, 3);
    13e2:	8a 83       	std	Y+2, r24	; 0x02
    13e4:	63 e0       	ldi	r22, 0x03	; 3
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	84 e6       	ldi	r24, 0x64	; 100
    13ea:	92 e0       	ldi	r25, 0x02	; 2
    13ec:	83 d0       	rcall	.+262    	; 0x14f4 <outputS>
	}



    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	ff 90       	pop	r15
    13f8:	ef 90       	pop	r14
    13fa:	df 90       	pop	r13
    13fc:	cf 90       	pop	r12
    13fe:	08 95       	ret

00001400 <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    1400:	e5 e0       	ldi	r30, 0x05	; 5
    1402:	f1 e0       	ldi	r31, 0x01	; 1
    1404:	80 81       	ld	r24, Z
    1406:	82 60       	ori	r24, 0x02	; 2
    1408:	80 83       	st	Z, r24
    140a:	85 e0       	ldi	r24, 0x05	; 5
    140c:	8a 95       	dec	r24
    140e:	f1 f7       	brne	.-4      	; 0x140c <enableCycle+0xc>
    1410:	00 00       	nop
    1412:	80 81       	ld	r24, Z
    1414:	8d 7f       	andi	r24, 0xFD	; 253
    1416:	80 83       	st	Z, r24
    1418:	08 95       	ret

0000141a <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTJ &= 0B11111110; //set our DC pin low, to get ready to write data.
    141a:	e5 e0       	ldi	r30, 0x05	; 5
    141c:	f1 e0       	ldi	r31, 0x01	; 1
    141e:	90 81       	ld	r25, Z
    1420:	9e 7f       	andi	r25, 0xFE	; 254
    1422:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    1424:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTJ &= 0B11111110; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
    1426:	ec cf       	rjmp	.-40     	; 0x1400 <enableCycle>
    1428:	08 95       	ret

0000142a <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTJ |=0B00000001; //set out DC Pin high, so it's ready to write data.
    142a:	e5 e0       	ldi	r30, 0x05	; 5
    142c:	f1 e0       	ldi	r31, 0x01	; 1
    142e:	90 81       	ld	r25, Z
    1430:	91 60       	ori	r25, 0x01	; 1
    1432:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    1434:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTJ |=0B00000001; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
    1436:	e4 cf       	rjmp	.-56     	; 0x1400 <enableCycle>
    1438:	08 95       	ret

0000143a <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRJ = 0x03; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
    143a:	83 e0       	ldi	r24, 0x03	; 3
    143c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	DDRC =0xFF; //all pins on the LCD Data Bus.
    1440:	8f ef       	ldi	r24, 0xFF	; 255
    1442:	87 b9       	out	0x07, r24	; 7

	
	PORTJ &= 0B11111100;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
    1444:	e5 e0       	ldi	r30, 0x05	; 5
    1446:	f1 e0       	ldi	r31, 0x01	; 1
    1448:	80 81       	ld	r24, Z
    144a:	8c 7f       	andi	r24, 0xFC	; 252
    144c:	80 83       	st	Z, r24
	
	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
    144e:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1450:	8f e1       	ldi	r24, 0x1F	; 31
    1452:	93 e0       	ldi	r25, 0x03	; 3
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	f1 f7       	brne	.-4      	; 0x1454 <initScreen+0x1a>
    1458:	00 c0       	rjmp	.+0      	; 0x145a <initScreen+0x20>
    145a:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose
	

	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    145c:	8a e2       	ldi	r24, 0x2A	; 42
    145e:	dd df       	rcall	.-70     	; 0x141a <command>
	command(0x71);        // Function selection A:
    1460:	81 e7       	ldi	r24, 0x71	; 113
    1462:	db df       	rcall	.-74     	; 0x141a <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
    1464:	8c e5       	ldi	r24, 0x5C	; 92
    1466:	e1 df       	rcall	.-62     	; 0x142a <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    1468:	88 e2       	ldi	r24, 0x28	; 40
    146a:	d7 df       	rcall	.-82     	; 0x141a <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
    146c:	88 e0       	ldi	r24, 0x08	; 8
    146e:	d5 df       	rcall	.-86     	; 0x141a <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    1470:	8a e2       	ldi	r24, 0x2A	; 42
    1472:	d3 df       	rcall	.-90     	; 0x141a <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    1474:	89 e7       	ldi	r24, 0x79	; 121
    1476:	d1 df       	rcall	.-94     	; 0x141a <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
    1478:	85 ed       	ldi	r24, 0xD5	; 213
    147a:	cf df       	rcall	.-98     	; 0x141a <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
    147c:	80 e7       	ldi	r24, 0x70	; 112
    147e:	cd df       	rcall	.-102    	; 0x141a <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    1480:	88 e7       	ldi	r24, 0x78	; 120
    1482:	cb df       	rcall	.-106    	; 0x141a <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
    1484:	89 e0       	ldi	r24, 0x09	; 9
    1486:	c9 df       	rcall	.-110    	; 0x141a <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
    1488:	86 e0       	ldi	r24, 0x06	; 6
    148a:	c7 df       	rcall	.-114    	; 0x141a <command>
	command(0x72);        // Function selection B:
    148c:	82 e7       	ldi	r24, 0x72	; 114
    148e:	c5 df       	rcall	.-118    	; 0x141a <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
    1490:	8a e0       	ldi	r24, 0x0A	; 10
    1492:	cb df       	rcall	.-106    	; 0x142a <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    1494:	89 e7       	ldi	r24, 0x79	; 121
    1496:	c1 df       	rcall	.-126    	; 0x141a <command>
	command(0xDA);        // Set SEG pins hardware configuration:
    1498:	8a ed       	ldi	r24, 0xDA	; 218
    149a:	bf df       	rcall	.-130    	; 0x141a <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
    149c:	80 e1       	ldi	r24, 0x10	; 16
    149e:	bd df       	rcall	.-134    	; 0x141a <command>
	command(0xDC);        // Function selection C:
    14a0:	8c ed       	ldi	r24, 0xDC	; 220
    14a2:	bb df       	rcall	.-138    	; 0x141a <command>
	command(0x00);        //  internal VSL, GPIO input disable
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	b9 df       	rcall	.-142    	; 0x141a <command>
	command(0x81);        // Set contrast control:
    14a8:	81 e8       	ldi	r24, 0x81	; 129
    14aa:	b7 df       	rcall	.-146    	; 0x141a <command>
    14ac:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
    14ae:	b5 df       	rcall	.-150    	; 0x141a <command>
    14b0:	89 ed       	ldi	r24, 0xD9	; 217
    14b2:	b3 df       	rcall	.-154    	; 0x141a <command>
	command(0xD9);        // Set phase length:
    14b4:	81 ef       	ldi	r24, 0xF1	; 241
    14b6:	b1 df       	rcall	.-158    	; 0x141a <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
    14b8:	8b ed       	ldi	r24, 0xDB	; 219
    14ba:	af df       	rcall	.-162    	; 0x141a <command>
    14bc:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
    14be:	ad df       	rcall	.-166    	; 0x141a <command>
    14c0:	88 e7       	ldi	r24, 0x78	; 120
    14c2:	ab df       	rcall	.-170    	; 0x141a <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
    14c4:	88 e2       	ldi	r24, 0x28	; 40
    14c6:	a9 df       	rcall	.-174    	; 0x141a <command>
    14c8:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    14ca:	a7 df       	rcall	.-178    	; 0x141a <command>
    14cc:	8f e3       	ldi	r24, 0x3F	; 63
    14ce:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	f1 f7       	brne	.-4      	; 0x14d0 <initScreen+0x96>
    14d4:	00 c0       	rjmp	.+0      	; 0x14d6 <initScreen+0x9c>
	command(0x01);        // Clear display
    14d6:	00 00       	nop
    14d8:	80 e8       	ldi	r24, 0x80	; 128
    14da:	9f df       	rcall	.-194    	; 0x141a <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14dc:	8c e0       	ldi	r24, 0x0C	; 12
    14de:	9d df       	rcall	.-198    	; 0x141a <command>
    14e0:	9f ef       	ldi	r25, 0xFF	; 255
    14e2:	24 e3       	ldi	r18, 0x34	; 52
    14e4:	8c e0       	ldi	r24, 0x0C	; 12
    14e6:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	
	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
    14e8:	20 40       	sbci	r18, 0x00	; 0
    14ea:	80 40       	sbci	r24, 0x00	; 0
    14ec:	e1 f7       	brne	.-8      	; 0x14e6 <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
    14ee:	00 c0       	rjmp	.+0      	; 0x14f0 <initScreen+0xb6>
    14f0:	00 00       	nop
    14f2:	08 95       	ret

000014f4 <outputS>:
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	8c 01       	movw	r16, r24
    14fe:	fb 01       	movw	r30, r22
    1500:	ff 27       	eor	r31, r31
    1502:	e0 56       	subi	r30, 0x60	; 96
    1504:	fd 4f       	sbci	r31, 0xFD	; 253
    1506:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;
	
	command(new_line[r]);
    1508:	88 df       	rcall	.-240    	; 0x141a <command>
    150a:	e8 01       	movw	r28, r16
    150c:	0c 5e       	subi	r16, 0xEC	; 236
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
    1510:	89 91       	ld	r24, Y+
    1512:	8b df       	rcall	.-234    	; 0x142a <data>
	uint8_t r = row;
	uint8_t c = 0;
	
	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
    1514:	c0 17       	cp	r28, r16
    1516:	d1 07       	cpc	r29, r17
    1518:	d9 f7       	brne	.-10     	; 0x1510 <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	08 95       	ret

00001524 <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;
	
	switch(numCharacters)
    152a:	43 30       	cpi	r20, 0x03	; 3
    152c:	09 f4       	brne	.+2      	; 0x1530 <numPrinter+0xc>
    152e:	51 c0       	rjmp	.+162    	; 0x15d2 <numPrinter+0xae>
    1530:	28 f4       	brcc	.+10     	; 0x153c <numPrinter+0x18>
    1532:	41 30       	cpi	r20, 0x01	; 1
    1534:	51 f0       	breq	.+20     	; 0x154a <numPrinter+0x26>
    1536:	42 30       	cpi	r20, 0x02	; 2
    1538:	21 f1       	breq	.+72     	; 0x1582 <numPrinter+0x5e>
    153a:	a2 c1       	rjmp	.+836    	; 0x1880 <numPrinter+0x35c>
    153c:	44 30       	cpi	r20, 0x04	; 4
    153e:	09 f4       	brne	.+2      	; 0x1542 <numPrinter+0x1e>
    1540:	8e c0       	rjmp	.+284    	; 0x165e <numPrinter+0x13a>
    1542:	45 30       	cpi	r20, 0x05	; 5
    1544:	09 f4       	brne	.+2      	; 0x1548 <numPrinter+0x24>
    1546:	fd c0       	rjmp	.+506    	; 0x1742 <numPrinter+0x21e>
    1548:	9b c1       	rjmp	.+822    	; 0x1880 <numPrinter+0x35c>
		case 0:
		break;
		
		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
    154a:	ec 01       	movw	r28, r24
    154c:	c6 0f       	add	r28, r22
    154e:	d1 1d       	adc	r29, r1
    1550:	ad ec       	ldi	r26, 0xCD	; 205
    1552:	bc ec       	ldi	r27, 0xCC	; 204
    1554:	81 d4       	rcall	.+2306   	; 0x1e58 <__umulhisi3>
    1556:	96 95       	lsr	r25
    1558:	87 95       	ror	r24
    155a:	96 95       	lsr	r25
    155c:	87 95       	ror	r24
    155e:	96 95       	lsr	r25
    1560:	87 95       	ror	r24
    1562:	9c 01       	movw	r18, r24
    1564:	22 0f       	add	r18, r18
    1566:	33 1f       	adc	r19, r19
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	82 0f       	add	r24, r18
    1576:	93 1f       	adc	r25, r19
    1578:	e8 1b       	sub	r30, r24
    157a:	f9 0b       	sbc	r31, r25
    157c:	e0 5d       	subi	r30, 0xD0	; 208
    157e:	e8 83       	st	Y, r30
		break;
    1580:	7f c1       	rjmp	.+766    	; 0x1880 <numPrinter+0x35c>
		
		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
    1582:	ec 01       	movw	r28, r24
    1584:	c6 0f       	add	r28, r22
    1586:	d1 1d       	adc	r29, r1
    1588:	ad ec       	ldi	r26, 0xCD	; 205
    158a:	bc ec       	ldi	r27, 0xCC	; 204
    158c:	65 d4       	rcall	.+2250   	; 0x1e58 <__umulhisi3>
    158e:	96 95       	lsr	r25
    1590:	87 95       	ror	r24
    1592:	96 95       	lsr	r25
    1594:	87 95       	ror	r24
    1596:	96 95       	lsr	r25
    1598:	87 95       	ror	r24
    159a:	9c 01       	movw	r18, r24
    159c:	22 0f       	add	r18, r18
    159e:	33 1f       	adc	r19, r19
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	82 0f       	add	r24, r18
    15ae:	93 1f       	adc	r25, r19
    15b0:	9f 01       	movw	r18, r30
    15b2:	28 1b       	sub	r18, r24
    15b4:	39 0b       	sbc	r19, r25
    15b6:	c9 01       	movw	r24, r18
    15b8:	80 5d       	subi	r24, 0xD0	; 208
    15ba:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
    15bc:	9f 01       	movw	r18, r30
    15be:	4c d4       	rcall	.+2200   	; 0x1e58 <__umulhisi3>
    15c0:	96 95       	lsr	r25
    15c2:	87 95       	ror	r24
    15c4:	96 95       	lsr	r25
    15c6:	87 95       	ror	r24
    15c8:	96 95       	lsr	r25
    15ca:	87 95       	ror	r24
    15cc:	80 5d       	subi	r24, 0xD0	; 208
    15ce:	88 83       	st	Y, r24
    15d0:	57 c1       	rjmp	.+686    	; 0x1880 <numPrinter+0x35c>
		break;
    15d2:	ec 01       	movw	r28, r24
		
		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
    15d4:	c6 0f       	add	r28, r22
    15d6:	d1 1d       	adc	r29, r1
    15d8:	ad ec       	ldi	r26, 0xCD	; 205
    15da:	bc ec       	ldi	r27, 0xCC	; 204
    15dc:	3d d4       	rcall	.+2170   	; 0x1e58 <__umulhisi3>
    15de:	96 95       	lsr	r25
    15e0:	87 95       	ror	r24
    15e2:	96 95       	lsr	r25
    15e4:	87 95       	ror	r24
    15e6:	96 95       	lsr	r25
    15e8:	87 95       	ror	r24
    15ea:	9c 01       	movw	r18, r24
    15ec:	22 0f       	add	r18, r18
    15ee:	33 1f       	adc	r19, r19
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	82 0f       	add	r24, r18
    15fe:	93 1f       	adc	r25, r19
    1600:	9f 01       	movw	r18, r30
    1602:	28 1b       	sub	r18, r24
    1604:	39 0b       	sbc	r19, r25
    1606:	c9 01       	movw	r24, r18
    1608:	80 5d       	subi	r24, 0xD0	; 208
    160a:	8a 83       	std	Y+2, r24	; 0x02
    160c:	af 01       	movw	r20, r30
		charArray[(startingPos+1)] = tensPlace;
    160e:	56 95       	lsr	r21
    1610:	47 95       	ror	r20
    1612:	56 95       	lsr	r21
    1614:	47 95       	ror	r20
    1616:	9a 01       	movw	r18, r20
    1618:	ab e7       	ldi	r26, 0x7B	; 123
    161a:	b4 e1       	ldi	r27, 0x14	; 20
    161c:	1d d4       	rcall	.+2106   	; 0x1e58 <__umulhisi3>
    161e:	96 95       	lsr	r25
    1620:	87 95       	ror	r24
    1622:	64 e6       	ldi	r22, 0x64	; 100
    1624:	68 9f       	mul	r22, r24
    1626:	90 01       	movw	r18, r0
    1628:	69 9f       	mul	r22, r25
    162a:	30 0d       	add	r19, r0
    162c:	11 24       	eor	r1, r1
    162e:	cf 01       	movw	r24, r30
    1630:	82 1b       	sub	r24, r18
    1632:	93 0b       	sbc	r25, r19
    1634:	9c 01       	movw	r18, r24
    1636:	ad ec       	ldi	r26, 0xCD	; 205
    1638:	bc ec       	ldi	r27, 0xCC	; 204
    163a:	0e d4       	rcall	.+2076   	; 0x1e58 <__umulhisi3>
    163c:	96 95       	lsr	r25
    163e:	87 95       	ror	r24
    1640:	96 95       	lsr	r25
    1642:	87 95       	ror	r24
    1644:	96 95       	lsr	r25
    1646:	87 95       	ror	r24
    1648:	80 5d       	subi	r24, 0xD0	; 208
    164a:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
    164c:	9a 01       	movw	r18, r20
    164e:	ab e7       	ldi	r26, 0x7B	; 123
    1650:	b4 e1       	ldi	r27, 0x14	; 20
    1652:	02 d4       	rcall	.+2052   	; 0x1e58 <__umulhisi3>
    1654:	96 95       	lsr	r25
    1656:	87 95       	ror	r24
    1658:	80 5d       	subi	r24, 0xD0	; 208
    165a:	88 83       	st	Y, r24
		break;
    165c:	11 c1       	rjmp	.+546    	; 0x1880 <numPrinter+0x35c>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
    165e:	ec 01       	movw	r28, r24
    1660:	c6 0f       	add	r28, r22
    1662:	d1 1d       	adc	r29, r1
    1664:	ad ec       	ldi	r26, 0xCD	; 205
    1666:	bc ec       	ldi	r27, 0xCC	; 204
    1668:	f7 d3       	rcall	.+2030   	; 0x1e58 <__umulhisi3>
    166a:	96 95       	lsr	r25
    166c:	87 95       	ror	r24
    166e:	96 95       	lsr	r25
    1670:	87 95       	ror	r24
    1672:	96 95       	lsr	r25
    1674:	87 95       	ror	r24
    1676:	9c 01       	movw	r18, r24
    1678:	22 0f       	add	r18, r18
    167a:	33 1f       	adc	r19, r19
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	82 0f       	add	r24, r18
    168a:	93 1f       	adc	r25, r19
    168c:	9f 01       	movw	r18, r30
    168e:	28 1b       	sub	r18, r24
    1690:	39 0b       	sbc	r19, r25
    1692:	c9 01       	movw	r24, r18
    1694:	80 5d       	subi	r24, 0xD0	; 208
    1696:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
    1698:	9f 01       	movw	r18, r30
    169a:	36 95       	lsr	r19
    169c:	27 95       	ror	r18
    169e:	36 95       	lsr	r19
    16a0:	27 95       	ror	r18
    16a2:	ab e7       	ldi	r26, 0x7B	; 123
    16a4:	b4 e1       	ldi	r27, 0x14	; 20
    16a6:	d8 d3       	rcall	.+1968   	; 0x1e58 <__umulhisi3>
    16a8:	96 95       	lsr	r25
    16aa:	87 95       	ror	r24
    16ac:	44 e6       	ldi	r20, 0x64	; 100
    16ae:	48 9f       	mul	r20, r24
    16b0:	90 01       	movw	r18, r0
    16b2:	49 9f       	mul	r20, r25
    16b4:	30 0d       	add	r19, r0
    16b6:	11 24       	eor	r1, r1
    16b8:	cf 01       	movw	r24, r30
    16ba:	82 1b       	sub	r24, r18
    16bc:	93 0b       	sbc	r25, r19
    16be:	9c 01       	movw	r18, r24
    16c0:	ad ec       	ldi	r26, 0xCD	; 205
    16c2:	bc ec       	ldi	r27, 0xCC	; 204
    16c4:	c9 d3       	rcall	.+1938   	; 0x1e58 <__umulhisi3>
    16c6:	96 95       	lsr	r25
    16c8:	87 95       	ror	r24
    16ca:	96 95       	lsr	r25
    16cc:	87 95       	ror	r24
    16ce:	96 95       	lsr	r25
    16d0:	87 95       	ror	r24
    16d2:	80 5d       	subi	r24, 0xD0	; 208
    16d4:	8a 83       	std	Y+2, r24	; 0x02
    16d6:	af 01       	movw	r20, r30
		charArray[(startingPos+1)] = hunderedsPlace;
    16d8:	56 95       	lsr	r21
    16da:	47 95       	ror	r20
    16dc:	56 95       	lsr	r21
    16de:	47 95       	ror	r20
    16e0:	56 95       	lsr	r21
    16e2:	47 95       	ror	r20
    16e4:	9a 01       	movw	r18, r20
    16e6:	a5 ec       	ldi	r26, 0xC5	; 197
    16e8:	b0 e2       	ldi	r27, 0x20	; 32
    16ea:	b6 d3       	rcall	.+1900   	; 0x1e58 <__umulhisi3>
    16ec:	92 95       	swap	r25
    16ee:	82 95       	swap	r24
    16f0:	8f 70       	andi	r24, 0x0F	; 15
    16f2:	89 27       	eor	r24, r25
    16f4:	9f 70       	andi	r25, 0x0F	; 15
    16f6:	89 27       	eor	r24, r25
    16f8:	68 ee       	ldi	r22, 0xE8	; 232
    16fa:	73 e0       	ldi	r23, 0x03	; 3
    16fc:	86 9f       	mul	r24, r22
    16fe:	90 01       	movw	r18, r0
    1700:	87 9f       	mul	r24, r23
    1702:	30 0d       	add	r19, r0
    1704:	96 9f       	mul	r25, r22
    1706:	30 0d       	add	r19, r0
    1708:	11 24       	eor	r1, r1
    170a:	cf 01       	movw	r24, r30
    170c:	82 1b       	sub	r24, r18
    170e:	93 0b       	sbc	r25, r19
    1710:	9c 01       	movw	r18, r24
    1712:	36 95       	lsr	r19
    1714:	27 95       	ror	r18
    1716:	36 95       	lsr	r19
    1718:	27 95       	ror	r18
    171a:	ab e7       	ldi	r26, 0x7B	; 123
    171c:	b4 e1       	ldi	r27, 0x14	; 20
    171e:	9c d3       	rcall	.+1848   	; 0x1e58 <__umulhisi3>
    1720:	96 95       	lsr	r25
    1722:	87 95       	ror	r24
    1724:	80 5d       	subi	r24, 0xD0	; 208
    1726:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
    1728:	9a 01       	movw	r18, r20
    172a:	a5 ec       	ldi	r26, 0xC5	; 197
    172c:	b0 e2       	ldi	r27, 0x20	; 32
    172e:	94 d3       	rcall	.+1832   	; 0x1e58 <__umulhisi3>
    1730:	92 95       	swap	r25
    1732:	82 95       	swap	r24
    1734:	8f 70       	andi	r24, 0x0F	; 15
    1736:	89 27       	eor	r24, r25
    1738:	9f 70       	andi	r25, 0x0F	; 15
    173a:	89 27       	eor	r24, r25
    173c:	80 5d       	subi	r24, 0xD0	; 208
    173e:	88 83       	st	Y, r24
		break;
    1740:	9f c0       	rjmp	.+318    	; 0x1880 <numPrinter+0x35c>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
    1742:	ec 01       	movw	r28, r24
    1744:	c6 0f       	add	r28, r22
    1746:	d1 1d       	adc	r29, r1
    1748:	ad ec       	ldi	r26, 0xCD	; 205
    174a:	bc ec       	ldi	r27, 0xCC	; 204
    174c:	85 d3       	rcall	.+1802   	; 0x1e58 <__umulhisi3>
    174e:	96 95       	lsr	r25
    1750:	87 95       	ror	r24
    1752:	96 95       	lsr	r25
    1754:	87 95       	ror	r24
    1756:	96 95       	lsr	r25
    1758:	87 95       	ror	r24
    175a:	9c 01       	movw	r18, r24
    175c:	22 0f       	add	r18, r18
    175e:	33 1f       	adc	r19, r19
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	82 0f       	add	r24, r18
    176e:	93 1f       	adc	r25, r19
    1770:	9f 01       	movw	r18, r30
    1772:	28 1b       	sub	r18, r24
    1774:	39 0b       	sbc	r19, r25
    1776:	c9 01       	movw	r24, r18
    1778:	80 5d       	subi	r24, 0xD0	; 208
    177a:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
    177c:	9f 01       	movw	r18, r30
    177e:	36 95       	lsr	r19
    1780:	27 95       	ror	r18
    1782:	36 95       	lsr	r19
    1784:	27 95       	ror	r18
    1786:	ab e7       	ldi	r26, 0x7B	; 123
    1788:	b4 e1       	ldi	r27, 0x14	; 20
    178a:	66 d3       	rcall	.+1740   	; 0x1e58 <__umulhisi3>
    178c:	96 95       	lsr	r25
    178e:	87 95       	ror	r24
    1790:	44 e6       	ldi	r20, 0x64	; 100
    1792:	48 9f       	mul	r20, r24
    1794:	90 01       	movw	r18, r0
    1796:	49 9f       	mul	r20, r25
    1798:	30 0d       	add	r19, r0
    179a:	11 24       	eor	r1, r1
    179c:	cf 01       	movw	r24, r30
    179e:	82 1b       	sub	r24, r18
    17a0:	93 0b       	sbc	r25, r19
    17a2:	9c 01       	movw	r18, r24
    17a4:	ad ec       	ldi	r26, 0xCD	; 205
    17a6:	bc ec       	ldi	r27, 0xCC	; 204
    17a8:	57 d3       	rcall	.+1710   	; 0x1e58 <__umulhisi3>
    17aa:	96 95       	lsr	r25
    17ac:	87 95       	ror	r24
    17ae:	96 95       	lsr	r25
    17b0:	87 95       	ror	r24
    17b2:	96 95       	lsr	r25
    17b4:	87 95       	ror	r24
    17b6:	80 5d       	subi	r24, 0xD0	; 208
    17b8:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
    17ba:	9f 01       	movw	r18, r30
    17bc:	36 95       	lsr	r19
    17be:	27 95       	ror	r18
    17c0:	36 95       	lsr	r19
    17c2:	27 95       	ror	r18
    17c4:	36 95       	lsr	r19
    17c6:	27 95       	ror	r18
    17c8:	a5 ec       	ldi	r26, 0xC5	; 197
    17ca:	b0 e2       	ldi	r27, 0x20	; 32
    17cc:	45 d3       	rcall	.+1674   	; 0x1e58 <__umulhisi3>
    17ce:	92 95       	swap	r25
    17d0:	82 95       	swap	r24
    17d2:	8f 70       	andi	r24, 0x0F	; 15
    17d4:	89 27       	eor	r24, r25
    17d6:	9f 70       	andi	r25, 0x0F	; 15
    17d8:	89 27       	eor	r24, r25
    17da:	48 ee       	ldi	r20, 0xE8	; 232
    17dc:	53 e0       	ldi	r21, 0x03	; 3
    17de:	84 9f       	mul	r24, r20
    17e0:	90 01       	movw	r18, r0
    17e2:	85 9f       	mul	r24, r21
    17e4:	30 0d       	add	r19, r0
    17e6:	94 9f       	mul	r25, r20
    17e8:	30 0d       	add	r19, r0
    17ea:	11 24       	eor	r1, r1
    17ec:	cf 01       	movw	r24, r30
    17ee:	82 1b       	sub	r24, r18
    17f0:	93 0b       	sbc	r25, r19
    17f2:	9c 01       	movw	r18, r24
    17f4:	36 95       	lsr	r19
    17f6:	27 95       	ror	r18
    17f8:	36 95       	lsr	r19
    17fa:	27 95       	ror	r18
    17fc:	ab e7       	ldi	r26, 0x7B	; 123
    17fe:	b4 e1       	ldi	r27, 0x14	; 20
    1800:	2b d3       	rcall	.+1622   	; 0x1e58 <__umulhisi3>
    1802:	96 95       	lsr	r25
    1804:	87 95       	ror	r24
    1806:	80 5d       	subi	r24, 0xD0	; 208
    1808:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
    180a:	af 01       	movw	r20, r30
    180c:	52 95       	swap	r21
    180e:	42 95       	swap	r20
    1810:	4f 70       	andi	r20, 0x0F	; 15
    1812:	45 27       	eor	r20, r21
    1814:	5f 70       	andi	r21, 0x0F	; 15
    1816:	45 27       	eor	r20, r21
    1818:	9a 01       	movw	r18, r20
    181a:	a7 e4       	ldi	r26, 0x47	; 71
    181c:	b3 e0       	ldi	r27, 0x03	; 3
    181e:	1c d3       	rcall	.+1592   	; 0x1e58 <__umulhisi3>
    1820:	96 95       	lsr	r25
    1822:	87 95       	ror	r24
    1824:	96 95       	lsr	r25
    1826:	87 95       	ror	r24
    1828:	96 95       	lsr	r25
    182a:	87 95       	ror	r24
    182c:	60 e1       	ldi	r22, 0x10	; 16
    182e:	77 e2       	ldi	r23, 0x27	; 39
    1830:	86 9f       	mul	r24, r22
    1832:	90 01       	movw	r18, r0
    1834:	87 9f       	mul	r24, r23
    1836:	30 0d       	add	r19, r0
    1838:	96 9f       	mul	r25, r22
    183a:	30 0d       	add	r19, r0
    183c:	11 24       	eor	r1, r1
    183e:	cf 01       	movw	r24, r30
    1840:	82 1b       	sub	r24, r18
    1842:	93 0b       	sbc	r25, r19
    1844:	9c 01       	movw	r18, r24
    1846:	36 95       	lsr	r19
    1848:	27 95       	ror	r18
    184a:	36 95       	lsr	r19
    184c:	27 95       	ror	r18
    184e:	36 95       	lsr	r19
    1850:	27 95       	ror	r18
    1852:	a5 ec       	ldi	r26, 0xC5	; 197
    1854:	b0 e2       	ldi	r27, 0x20	; 32
    1856:	00 d3       	rcall	.+1536   	; 0x1e58 <__umulhisi3>
    1858:	92 95       	swap	r25
    185a:	82 95       	swap	r24
    185c:	8f 70       	andi	r24, 0x0F	; 15
    185e:	89 27       	eor	r24, r25
    1860:	9f 70       	andi	r25, 0x0F	; 15
    1862:	89 27       	eor	r24, r25
    1864:	80 5d       	subi	r24, 0xD0	; 208
    1866:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
    1868:	9a 01       	movw	r18, r20
    186a:	a7 e4       	ldi	r26, 0x47	; 71
    186c:	b3 e0       	ldi	r27, 0x03	; 3
    186e:	f4 d2       	rcall	.+1512   	; 0x1e58 <__umulhisi3>
    1870:	96 95       	lsr	r25
    1872:	87 95       	ror	r24
    1874:	96 95       	lsr	r25
    1876:	87 95       	ror	r24
    1878:	96 95       	lsr	r25
    187a:	87 95       	ror	r24
    187c:	80 5d       	subi	r24, 0xD0	; 208
    187e:	88 83       	st	Y, r24
    1880:	df 91       	pop	r29
		break;
		
	}


    1882:	cf 91       	pop	r28
    1884:	08 95       	ret

00001886 <__vector_27>:

uint8_t rxReadPosition = 0;
uint8_t rxWritePosition = 0;

ISR (USART0_TX_vect)
{
    1886:	1f 92       	push	r1
    1888:	0f 92       	push	r0
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	0f 92       	push	r0
    188e:	11 24       	eor	r1, r1
    1890:	0b b6       	in	r0, 0x3b	; 59
    1892:	0f 92       	push	r0
    1894:	2f 93       	push	r18
    1896:	3f 93       	push	r19
    1898:	8f 93       	push	r24
    189a:	9f 93       	push	r25
    189c:	ef 93       	push	r30
    189e:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
    18a0:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <serialReadPos>
    18a4:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <serialReadPos+0x1>
    18a8:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <serialWritePos>
    18ac:	30 91 66 03 	lds	r19, 0x0366	; 0x800366 <serialWritePos+0x1>
    18b0:	82 17       	cp	r24, r18
    18b2:	93 07       	cpc	r25, r19
    18b4:	b9 f0       	breq	.+46     	; 0x18e4 <__vector_27+0x5e>
	{
		UDR0 = serial0Buffer[serialReadPos];
    18b6:	fc 01       	movw	r30, r24
    18b8:	e0 59       	subi	r30, 0x90	; 144
    18ba:	f9 4f       	sbci	r31, 0xF9	; 249
    18bc:	80 81       	ld	r24, Z
    18be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
    18c2:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <serialReadPos>
    18c6:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <serialReadPos+0x1>
    18ca:	01 96       	adiw	r24, 0x01	; 1
		
		if(serialReadPos >= TX_BUFFER_SIZE)
    18cc:	80 38       	cpi	r24, 0x80	; 128
    18ce:	91 05       	cpc	r25, r1
    18d0:	2c f4       	brge	.+10     	; 0x18dc <__vector_27+0x56>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
    18d2:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <serialReadPos+0x1>
    18d6:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <serialReadPos>
    18da:	04 c0       	rjmp	.+8      	; 0x18e4 <__vector_27+0x5e>
		
		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
    18dc:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <serialReadPos+0x1>
    18e0:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <serialReadPos>
		}
	}
}
    18e4:	ff 91       	pop	r31
    18e6:	ef 91       	pop	r30
    18e8:	9f 91       	pop	r25
    18ea:	8f 91       	pop	r24
    18ec:	3f 91       	pop	r19
    18ee:	2f 91       	pop	r18
    18f0:	0f 90       	pop	r0
    18f2:	0b be       	out	0x3b, r0	; 59
    18f4:	0f 90       	pop	r0
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	0f 90       	pop	r0
    18fa:	1f 90       	pop	r1
    18fc:	18 95       	reti

000018fe <__vector_36>:

ISR (USART1_RX_vect)
{
    18fe:	1f 92       	push	r1
    1900:	0f 92       	push	r0
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	0f 92       	push	r0
    1906:	11 24       	eor	r1, r1
    1908:	0b b6       	in	r0, 0x3b	; 59
    190a:	0f 92       	push	r0
    190c:	8f 93       	push	r24
    190e:	9f 93       	push	r25
    1910:	ef 93       	push	r30
    1912:	ff 93       	push	r31
		serial1Buffer[rxWritePosition] = UDR1;
    1914:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <rxWritePosition>
    1918:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    191c:	e8 2f       	mov	r30, r24
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	e0 51       	subi	r30, 0x10	; 16
    1922:	f9 4f       	sbci	r31, 0xF9	; 249
    1924:	90 83       	st	Z, r25
		rxWritePosition++;
    1926:	8f 5f       	subi	r24, 0xFF	; 255
	
		if(rxWritePosition>= RX_BUFFER_SIZE)
    1928:	1a f0       	brmi	.+6      	; 0x1930 <__vector_36+0x32>
}

ISR (USART1_RX_vect)
{
		serial1Buffer[rxWritePosition] = UDR1;
		rxWritePosition++;
    192a:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <rxWritePosition>
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <__vector_36+0x36>
	
		if(rxWritePosition>= RX_BUFFER_SIZE)
		{
			rxWritePosition = 0; //this could cause some issues.
    1930:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <rxWritePosition>
		}


}
    1934:	ff 91       	pop	r31
    1936:	ef 91       	pop	r30
    1938:	9f 91       	pop	r25
    193a:	8f 91       	pop	r24
    193c:	0f 90       	pop	r0
    193e:	0b be       	out	0x3b, r0	; 59
    1940:	0f 90       	pop	r0
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	0f 90       	pop	r0
    1946:	1f 90       	pop	r1
    1948:	18 95       	reti

0000194a <appendSerial0>:

void appendSerial0(char c)
{
	serial0Buffer[serialWritePos] = c;
    194a:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <serialWritePos>
    194e:	30 91 66 03 	lds	r19, 0x0366	; 0x800366 <serialWritePos+0x1>
    1952:	f9 01       	movw	r30, r18
    1954:	e0 59       	subi	r30, 0x90	; 144
    1956:	f9 4f       	sbci	r31, 0xF9	; 249
    1958:	80 83       	st	Z, r24
	serialWritePos++;
    195a:	2f 5f       	subi	r18, 0xFF	; 255
    195c:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    195e:	20 38       	cpi	r18, 0x80	; 128
    1960:	31 05       	cpc	r19, r1
    1962:	2c f4       	brge	.+10     	; 0x196e <appendSerial0+0x24>
}

void appendSerial0(char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    1964:	30 93 66 03 	sts	0x0366, r19	; 0x800366 <serialWritePos+0x1>
    1968:	20 93 65 03 	sts	0x0365, r18	; 0x800365 <serialWritePos>
    196c:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    196e:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <serialWritePos+0x1>
    1972:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <serialWritePos>
    1976:	08 95       	ret

00001978 <serialWrite0>:
	}
}

void serialWrite0(char c[])
{
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	ec 01       	movw	r28, r24
    1982:	8c 01       	movw	r16, r24
    1984:	06 5f       	subi	r16, 0xF6	; 246
    1986:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = 0; i<10; i++) //this may need to be 11
	{
		appendSerial0(c[i]);
    1988:	89 91       	ld	r24, Y+
    198a:	df df       	rcall	.-66     	; 0x194a <appendSerial0>
	}
}

void serialWrite0(char c[])
{
	for (uint8_t i = 0; i<10; i++) //this may need to be 11
    198c:	c0 17       	cp	r28, r16
    198e:	d1 07       	cpc	r29, r17
    1990:	d9 f7       	brne	.-10     	; 0x1988 <serialWrite0+0x10>
	{
		appendSerial0(c[i]);
		
	}
	
	if(UCSR0A & (1 << UDRE0))
    1992:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1996:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    1998:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	08 95       	ret

000019a6 <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    19a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    19aa:	80 e1       	ldi	r24, 0x10	; 16
    19ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

UBRR1H = (BRCMidi >> 8);
    19b0:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
UBRR1L = BRCMidi;
    19b4:	8f e1       	ldi	r24, 0x1F	; 31
    19b6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>

UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    19ba:	88 e4       	ldi	r24, 0x48	; 72
    19bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    19c0:	86 e0       	ldi	r24, 0x06	; 6
    19c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>


UCSR1B = (1 << RXEN1)  | (1 << RXCIE0);
    19c6:	90 e9       	ldi	r25, 0x90	; 144
    19c8:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); //8 bit chars will be sent
    19cc:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    19d0:	08 95       	ret

000019d2 <getChar>:

char getChar()
{
	char returnMe = '\0';
	
	if(rxReadPosition != rxWritePosition)
    19d2:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <rxReadPosition>
    19d6:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <rxWritePosition>
    19da:	98 17       	cp	r25, r24
    19dc:	69 f0       	breq	.+26     	; 0x19f8 <getChar+0x26>
	{
		returnMe = serial1Buffer[rxReadPosition];
    19de:	e9 2f       	mov	r30, r25
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	e0 51       	subi	r30, 0x10	; 16
    19e4:	f9 4f       	sbci	r31, 0xF9	; 249
    19e6:	80 81       	ld	r24, Z
		
		rxReadPosition++;
    19e8:	9f 5f       	subi	r25, 0xFF	; 255
		
		if(rxReadPosition >= RX_BUFFER_SIZE)
    19ea:	1a f0       	brmi	.+6      	; 0x19f2 <getChar+0x20>
	
	if(rxReadPosition != rxWritePosition)
	{
		returnMe = serial1Buffer[rxReadPosition];
		
		rxReadPosition++;
    19ec:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <rxReadPosition>
    19f0:	08 95       	ret
		
		if(rxReadPosition >= RX_BUFFER_SIZE)
		{
			rxReadPosition = 0;
    19f2:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <rxReadPosition>
    19f6:	08 95       	ret

}

char getChar()
{
	char returnMe = '\0';
    19f8:	80 e0       	ldi	r24, 0x00	; 0
		}
	
	}
	return returnMe;
	
    19fa:	08 95       	ret

000019fc <trackControl>:
void resumeAll()
{
	char resumePlay[5] = {0xf0, 0xaa, 0x05, 0x0b, 0x55};
	serialWrite0(resumePlay);
	
}
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	2a 97       	sbiw	r28, 0x0a	; 10
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	90 ef       	ldi	r25, 0xF0	; 240
    1a12:	99 83       	std	Y+1, r25	; 0x01
    1a14:	9a ea       	ldi	r25, 0xAA	; 170
    1a16:	9a 83       	std	Y+2, r25	; 0x02
    1a18:	9a e0       	ldi	r25, 0x0A	; 10
    1a1a:	9b 83       	std	Y+3, r25	; 0x03
    1a1c:	93 e0       	ldi	r25, 0x03	; 3
    1a1e:	9c 83       	std	Y+4, r25	; 0x04
    1a20:	2d 83       	std	Y+5, r18	; 0x05
    1a22:	8e 83       	std	Y+6, r24	; 0x06
    1a24:	6f 83       	std	Y+7, r22	; 0x07
    1a26:	48 87       	std	Y+8, r20	; 0x08
    1a28:	19 86       	std	Y+9, r1	; 0x09
    1a2a:	85 e5       	ldi	r24, 0x55	; 85
    1a2c:	8a 87       	std	Y+10, r24	; 0x0a
    1a2e:	ce 01       	movw	r24, r28
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	a2 df       	rcall	.-188    	; 0x1978 <serialWrite0>
    1a34:	2a 96       	adiw	r28, 0x0a	; 10
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	08 95       	ret

00001a46 <setOutputVolume>:
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	28 97       	sbiw	r28, 0x08	; 8
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	90 ef       	ldi	r25, 0xF0	; 240
    1a5c:	99 83       	std	Y+1, r25	; 0x01
    1a5e:	9a ea       	ldi	r25, 0xAA	; 170
    1a60:	9a 83       	std	Y+2, r25	; 0x02
    1a62:	98 e0       	ldi	r25, 0x08	; 8
    1a64:	9b 83       	std	Y+3, r25	; 0x03
    1a66:	95 e0       	ldi	r25, 0x05	; 5
    1a68:	9c 83       	std	Y+4, r25	; 0x04
    1a6a:	4d 83       	std	Y+5, r20	; 0x05
    1a6c:	8e 83       	std	Y+6, r24	; 0x06
    1a6e:	6f 83       	std	Y+7, r22	; 0x07
    1a70:	85 e5       	ldi	r24, 0x55	; 85
    1a72:	88 87       	std	Y+8, r24	; 0x08
    1a74:	ce 01       	movw	r24, r28
    1a76:	01 96       	adiw	r24, 0x01	; 1
    1a78:	7f df       	rcall	.-258    	; 0x1978 <serialWrite0>
    1a7a:	28 96       	adiw	r28, 0x08	; 8
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	08 95       	ret

00001a8c <setTrackVolume>:
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	29 97       	sbiw	r28, 0x09	; 9
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	90 ef       	ldi	r25, 0xF0	; 240
    1aa2:	99 83       	std	Y+1, r25	; 0x01
    1aa4:	9a ea       	ldi	r25, 0xAA	; 170
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	99 e0       	ldi	r25, 0x09	; 9
    1aaa:	9b 83       	std	Y+3, r25	; 0x03
    1aac:	98 e0       	ldi	r25, 0x08	; 8
    1aae:	9c 83       	std	Y+4, r25	; 0x04
    1ab0:	8d 83       	std	Y+5, r24	; 0x05
    1ab2:	6e 83       	std	Y+6, r22	; 0x06
    1ab4:	4f 83       	std	Y+7, r20	; 0x07
    1ab6:	28 87       	std	Y+8, r18	; 0x08
    1ab8:	85 e5       	ldi	r24, 0x55	; 85
    1aba:	89 87       	std	Y+9, r24	; 0x09
    1abc:	ce 01       	movw	r24, r28
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	5b df       	rcall	.-330    	; 0x1978 <serialWrite0>
    1ac2:	29 96       	adiw	r28, 0x09	; 9
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	08 95       	ret

00001ad4 <outputSampleRate>:

void outputSampleRate(uint8_t outputSelect, uint8_t offsetLSB, uint8_t offsetMSB)
{
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	28 97       	sbiw	r28, 0x08	; 8
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
	char pitchChange[8] = {0xf0, 0xaa, 0x08, 0x0c, outputSelect, offsetLSB, offsetMSB, 0x55};
    1ae8:	90 ef       	ldi	r25, 0xF0	; 240
    1aea:	99 83       	std	Y+1, r25	; 0x01
    1aec:	9a ea       	ldi	r25, 0xAA	; 170
    1aee:	9a 83       	std	Y+2, r25	; 0x02
    1af0:	98 e0       	ldi	r25, 0x08	; 8
    1af2:	9b 83       	std	Y+3, r25	; 0x03
    1af4:	9c e0       	ldi	r25, 0x0C	; 12
    1af6:	9c 83       	std	Y+4, r25	; 0x04
    1af8:	8d 83       	std	Y+5, r24	; 0x05
    1afa:	6e 83       	std	Y+6, r22	; 0x06
    1afc:	4f 83       	std	Y+7, r20	; 0x07
    1afe:	85 e5       	ldi	r24, 0x55	; 85
    1b00:	88 87       	std	Y+8, r24	; 0x08
	serialWrite0(pitchChange);
    1b02:	ce 01       	movw	r24, r28
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	38 df       	rcall	.-400    	; 0x1978 <serialWrite0>
}
    1b08:	28 96       	adiw	r28, 0x08	; 8
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	cd bf       	out	0x3d, r28	; 61
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	08 95       	ret

00001b1a <__subsf3>:
    1b1a:	50 58       	subi	r21, 0x80	; 128

00001b1c <__addsf3>:
    1b1c:	bb 27       	eor	r27, r27
    1b1e:	aa 27       	eor	r26, r26
    1b20:	0e d0       	rcall	.+28     	; 0x1b3e <__addsf3x>
    1b22:	4d c1       	rjmp	.+666    	; 0x1dbe <__fp_round>
    1b24:	3e d1       	rcall	.+636    	; 0x1da2 <__fp_pscA>
    1b26:	30 f0       	brcs	.+12     	; 0x1b34 <__addsf3+0x18>
    1b28:	43 d1       	rcall	.+646    	; 0x1db0 <__fp_pscB>
    1b2a:	20 f0       	brcs	.+8      	; 0x1b34 <__addsf3+0x18>
    1b2c:	31 f4       	brne	.+12     	; 0x1b3a <__addsf3+0x1e>
    1b2e:	9f 3f       	cpi	r25, 0xFF	; 255
    1b30:	11 f4       	brne	.+4      	; 0x1b36 <__addsf3+0x1a>
    1b32:	1e f4       	brtc	.+6      	; 0x1b3a <__addsf3+0x1e>
    1b34:	33 c1       	rjmp	.+614    	; 0x1d9c <__fp_nan>
    1b36:	0e f4       	brtc	.+2      	; 0x1b3a <__addsf3+0x1e>
    1b38:	e0 95       	com	r30
    1b3a:	e7 fb       	bst	r30, 7
    1b3c:	29 c1       	rjmp	.+594    	; 0x1d90 <__fp_inf>

00001b3e <__addsf3x>:
    1b3e:	e9 2f       	mov	r30, r25
    1b40:	4f d1       	rcall	.+670    	; 0x1de0 <__fp_split3>
    1b42:	80 f3       	brcs	.-32     	; 0x1b24 <__addsf3+0x8>
    1b44:	ba 17       	cp	r27, r26
    1b46:	62 07       	cpc	r22, r18
    1b48:	73 07       	cpc	r23, r19
    1b4a:	84 07       	cpc	r24, r20
    1b4c:	95 07       	cpc	r25, r21
    1b4e:	18 f0       	brcs	.+6      	; 0x1b56 <__addsf3x+0x18>
    1b50:	71 f4       	brne	.+28     	; 0x1b6e <__addsf3x+0x30>
    1b52:	9e f5       	brtc	.+102    	; 0x1bba <__addsf3x+0x7c>
    1b54:	67 c1       	rjmp	.+718    	; 0x1e24 <__fp_zero>
    1b56:	0e f4       	brtc	.+2      	; 0x1b5a <__addsf3x+0x1c>
    1b58:	e0 95       	com	r30
    1b5a:	0b 2e       	mov	r0, r27
    1b5c:	ba 2f       	mov	r27, r26
    1b5e:	a0 2d       	mov	r26, r0
    1b60:	0b 01       	movw	r0, r22
    1b62:	b9 01       	movw	r22, r18
    1b64:	90 01       	movw	r18, r0
    1b66:	0c 01       	movw	r0, r24
    1b68:	ca 01       	movw	r24, r20
    1b6a:	a0 01       	movw	r20, r0
    1b6c:	11 24       	eor	r1, r1
    1b6e:	ff 27       	eor	r31, r31
    1b70:	59 1b       	sub	r21, r25
    1b72:	99 f0       	breq	.+38     	; 0x1b9a <__addsf3x+0x5c>
    1b74:	59 3f       	cpi	r21, 0xF9	; 249
    1b76:	50 f4       	brcc	.+20     	; 0x1b8c <__addsf3x+0x4e>
    1b78:	50 3e       	cpi	r21, 0xE0	; 224
    1b7a:	68 f1       	brcs	.+90     	; 0x1bd6 <__addsf3x+0x98>
    1b7c:	1a 16       	cp	r1, r26
    1b7e:	f0 40       	sbci	r31, 0x00	; 0
    1b80:	a2 2f       	mov	r26, r18
    1b82:	23 2f       	mov	r18, r19
    1b84:	34 2f       	mov	r19, r20
    1b86:	44 27       	eor	r20, r20
    1b88:	58 5f       	subi	r21, 0xF8	; 248
    1b8a:	f3 cf       	rjmp	.-26     	; 0x1b72 <__addsf3x+0x34>
    1b8c:	46 95       	lsr	r20
    1b8e:	37 95       	ror	r19
    1b90:	27 95       	ror	r18
    1b92:	a7 95       	ror	r26
    1b94:	f0 40       	sbci	r31, 0x00	; 0
    1b96:	53 95       	inc	r21
    1b98:	c9 f7       	brne	.-14     	; 0x1b8c <__addsf3x+0x4e>
    1b9a:	7e f4       	brtc	.+30     	; 0x1bba <__addsf3x+0x7c>
    1b9c:	1f 16       	cp	r1, r31
    1b9e:	ba 0b       	sbc	r27, r26
    1ba0:	62 0b       	sbc	r22, r18
    1ba2:	73 0b       	sbc	r23, r19
    1ba4:	84 0b       	sbc	r24, r20
    1ba6:	ba f0       	brmi	.+46     	; 0x1bd6 <__addsf3x+0x98>
    1ba8:	91 50       	subi	r25, 0x01	; 1
    1baa:	a1 f0       	breq	.+40     	; 0x1bd4 <__addsf3x+0x96>
    1bac:	ff 0f       	add	r31, r31
    1bae:	bb 1f       	adc	r27, r27
    1bb0:	66 1f       	adc	r22, r22
    1bb2:	77 1f       	adc	r23, r23
    1bb4:	88 1f       	adc	r24, r24
    1bb6:	c2 f7       	brpl	.-16     	; 0x1ba8 <__addsf3x+0x6a>
    1bb8:	0e c0       	rjmp	.+28     	; 0x1bd6 <__addsf3x+0x98>
    1bba:	ba 0f       	add	r27, r26
    1bbc:	62 1f       	adc	r22, r18
    1bbe:	73 1f       	adc	r23, r19
    1bc0:	84 1f       	adc	r24, r20
    1bc2:	48 f4       	brcc	.+18     	; 0x1bd6 <__addsf3x+0x98>
    1bc4:	87 95       	ror	r24
    1bc6:	77 95       	ror	r23
    1bc8:	67 95       	ror	r22
    1bca:	b7 95       	ror	r27
    1bcc:	f7 95       	ror	r31
    1bce:	9e 3f       	cpi	r25, 0xFE	; 254
    1bd0:	08 f0       	brcs	.+2      	; 0x1bd4 <__addsf3x+0x96>
    1bd2:	b3 cf       	rjmp	.-154    	; 0x1b3a <__addsf3+0x1e>
    1bd4:	93 95       	inc	r25
    1bd6:	88 0f       	add	r24, r24
    1bd8:	08 f0       	brcs	.+2      	; 0x1bdc <__addsf3x+0x9e>
    1bda:	99 27       	eor	r25, r25
    1bdc:	ee 0f       	add	r30, r30
    1bde:	97 95       	ror	r25
    1be0:	87 95       	ror	r24
    1be2:	08 95       	ret

00001be4 <__divsf3>:
    1be4:	0c d0       	rcall	.+24     	; 0x1bfe <__divsf3x>
    1be6:	eb c0       	rjmp	.+470    	; 0x1dbe <__fp_round>
    1be8:	e3 d0       	rcall	.+454    	; 0x1db0 <__fp_pscB>
    1bea:	40 f0       	brcs	.+16     	; 0x1bfc <__divsf3+0x18>
    1bec:	da d0       	rcall	.+436    	; 0x1da2 <__fp_pscA>
    1bee:	30 f0       	brcs	.+12     	; 0x1bfc <__divsf3+0x18>
    1bf0:	21 f4       	brne	.+8      	; 0x1bfa <__divsf3+0x16>
    1bf2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bf4:	19 f0       	breq	.+6      	; 0x1bfc <__divsf3+0x18>
    1bf6:	cc c0       	rjmp	.+408    	; 0x1d90 <__fp_inf>
    1bf8:	51 11       	cpse	r21, r1
    1bfa:	15 c1       	rjmp	.+554    	; 0x1e26 <__fp_szero>
    1bfc:	cf c0       	rjmp	.+414    	; 0x1d9c <__fp_nan>

00001bfe <__divsf3x>:
    1bfe:	f0 d0       	rcall	.+480    	; 0x1de0 <__fp_split3>
    1c00:	98 f3       	brcs	.-26     	; 0x1be8 <__divsf3+0x4>

00001c02 <__divsf3_pse>:
    1c02:	99 23       	and	r25, r25
    1c04:	c9 f3       	breq	.-14     	; 0x1bf8 <__divsf3+0x14>
    1c06:	55 23       	and	r21, r21
    1c08:	b1 f3       	breq	.-20     	; 0x1bf6 <__divsf3+0x12>
    1c0a:	95 1b       	sub	r25, r21
    1c0c:	55 0b       	sbc	r21, r21
    1c0e:	bb 27       	eor	r27, r27
    1c10:	aa 27       	eor	r26, r26
    1c12:	62 17       	cp	r22, r18
    1c14:	73 07       	cpc	r23, r19
    1c16:	84 07       	cpc	r24, r20
    1c18:	38 f0       	brcs	.+14     	; 0x1c28 <__divsf3_pse+0x26>
    1c1a:	9f 5f       	subi	r25, 0xFF	; 255
    1c1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1e:	22 0f       	add	r18, r18
    1c20:	33 1f       	adc	r19, r19
    1c22:	44 1f       	adc	r20, r20
    1c24:	aa 1f       	adc	r26, r26
    1c26:	a9 f3       	breq	.-22     	; 0x1c12 <__divsf3_pse+0x10>
    1c28:	33 d0       	rcall	.+102    	; 0x1c90 <__divsf3_pse+0x8e>
    1c2a:	0e 2e       	mov	r0, r30
    1c2c:	3a f0       	brmi	.+14     	; 0x1c3c <__divsf3_pse+0x3a>
    1c2e:	e0 e8       	ldi	r30, 0x80	; 128
    1c30:	30 d0       	rcall	.+96     	; 0x1c92 <__divsf3_pse+0x90>
    1c32:	91 50       	subi	r25, 0x01	; 1
    1c34:	50 40       	sbci	r21, 0x00	; 0
    1c36:	e6 95       	lsr	r30
    1c38:	00 1c       	adc	r0, r0
    1c3a:	ca f7       	brpl	.-14     	; 0x1c2e <__divsf3_pse+0x2c>
    1c3c:	29 d0       	rcall	.+82     	; 0x1c90 <__divsf3_pse+0x8e>
    1c3e:	fe 2f       	mov	r31, r30
    1c40:	27 d0       	rcall	.+78     	; 0x1c90 <__divsf3_pse+0x8e>
    1c42:	66 0f       	add	r22, r22
    1c44:	77 1f       	adc	r23, r23
    1c46:	88 1f       	adc	r24, r24
    1c48:	bb 1f       	adc	r27, r27
    1c4a:	26 17       	cp	r18, r22
    1c4c:	37 07       	cpc	r19, r23
    1c4e:	48 07       	cpc	r20, r24
    1c50:	ab 07       	cpc	r26, r27
    1c52:	b0 e8       	ldi	r27, 0x80	; 128
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <__divsf3_pse+0x56>
    1c56:	bb 0b       	sbc	r27, r27
    1c58:	80 2d       	mov	r24, r0
    1c5a:	bf 01       	movw	r22, r30
    1c5c:	ff 27       	eor	r31, r31
    1c5e:	93 58       	subi	r25, 0x83	; 131
    1c60:	5f 4f       	sbci	r21, 0xFF	; 255
    1c62:	2a f0       	brmi	.+10     	; 0x1c6e <__divsf3_pse+0x6c>
    1c64:	9e 3f       	cpi	r25, 0xFE	; 254
    1c66:	51 05       	cpc	r21, r1
    1c68:	68 f0       	brcs	.+26     	; 0x1c84 <__divsf3_pse+0x82>
    1c6a:	92 c0       	rjmp	.+292    	; 0x1d90 <__fp_inf>
    1c6c:	dc c0       	rjmp	.+440    	; 0x1e26 <__fp_szero>
    1c6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c70:	ec f3       	brlt	.-6      	; 0x1c6c <__divsf3_pse+0x6a>
    1c72:	98 3e       	cpi	r25, 0xE8	; 232
    1c74:	dc f3       	brlt	.-10     	; 0x1c6c <__divsf3_pse+0x6a>
    1c76:	86 95       	lsr	r24
    1c78:	77 95       	ror	r23
    1c7a:	67 95       	ror	r22
    1c7c:	b7 95       	ror	r27
    1c7e:	f7 95       	ror	r31
    1c80:	9f 5f       	subi	r25, 0xFF	; 255
    1c82:	c9 f7       	brne	.-14     	; 0x1c76 <__divsf3_pse+0x74>
    1c84:	88 0f       	add	r24, r24
    1c86:	91 1d       	adc	r25, r1
    1c88:	96 95       	lsr	r25
    1c8a:	87 95       	ror	r24
    1c8c:	97 f9       	bld	r25, 7
    1c8e:	08 95       	ret
    1c90:	e1 e0       	ldi	r30, 0x01	; 1
    1c92:	66 0f       	add	r22, r22
    1c94:	77 1f       	adc	r23, r23
    1c96:	88 1f       	adc	r24, r24
    1c98:	bb 1f       	adc	r27, r27
    1c9a:	62 17       	cp	r22, r18
    1c9c:	73 07       	cpc	r23, r19
    1c9e:	84 07       	cpc	r24, r20
    1ca0:	ba 07       	cpc	r27, r26
    1ca2:	20 f0       	brcs	.+8      	; 0x1cac <__divsf3_pse+0xaa>
    1ca4:	62 1b       	sub	r22, r18
    1ca6:	73 0b       	sbc	r23, r19
    1ca8:	84 0b       	sbc	r24, r20
    1caa:	ba 0b       	sbc	r27, r26
    1cac:	ee 1f       	adc	r30, r30
    1cae:	88 f7       	brcc	.-30     	; 0x1c92 <__divsf3_pse+0x90>
    1cb0:	e0 95       	com	r30
    1cb2:	08 95       	ret

00001cb4 <__fixsfsi>:
    1cb4:	04 d0       	rcall	.+8      	; 0x1cbe <__fixunssfsi>
    1cb6:	68 94       	set
    1cb8:	b1 11       	cpse	r27, r1
    1cba:	b5 c0       	rjmp	.+362    	; 0x1e26 <__fp_szero>
    1cbc:	08 95       	ret

00001cbe <__fixunssfsi>:
    1cbe:	98 d0       	rcall	.+304    	; 0x1df0 <__fp_splitA>
    1cc0:	88 f0       	brcs	.+34     	; 0x1ce4 <__fixunssfsi+0x26>
    1cc2:	9f 57       	subi	r25, 0x7F	; 127
    1cc4:	90 f0       	brcs	.+36     	; 0x1cea <__fixunssfsi+0x2c>
    1cc6:	b9 2f       	mov	r27, r25
    1cc8:	99 27       	eor	r25, r25
    1cca:	b7 51       	subi	r27, 0x17	; 23
    1ccc:	a0 f0       	brcs	.+40     	; 0x1cf6 <__fixunssfsi+0x38>
    1cce:	d1 f0       	breq	.+52     	; 0x1d04 <__fixunssfsi+0x46>
    1cd0:	66 0f       	add	r22, r22
    1cd2:	77 1f       	adc	r23, r23
    1cd4:	88 1f       	adc	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	1a f0       	brmi	.+6      	; 0x1ce0 <__fixunssfsi+0x22>
    1cda:	ba 95       	dec	r27
    1cdc:	c9 f7       	brne	.-14     	; 0x1cd0 <__fixunssfsi+0x12>
    1cde:	12 c0       	rjmp	.+36     	; 0x1d04 <__fixunssfsi+0x46>
    1ce0:	b1 30       	cpi	r27, 0x01	; 1
    1ce2:	81 f0       	breq	.+32     	; 0x1d04 <__fixunssfsi+0x46>
    1ce4:	9f d0       	rcall	.+318    	; 0x1e24 <__fp_zero>
    1ce6:	b1 e0       	ldi	r27, 0x01	; 1
    1ce8:	08 95       	ret
    1cea:	9c c0       	rjmp	.+312    	; 0x1e24 <__fp_zero>
    1cec:	67 2f       	mov	r22, r23
    1cee:	78 2f       	mov	r23, r24
    1cf0:	88 27       	eor	r24, r24
    1cf2:	b8 5f       	subi	r27, 0xF8	; 248
    1cf4:	39 f0       	breq	.+14     	; 0x1d04 <__fixunssfsi+0x46>
    1cf6:	b9 3f       	cpi	r27, 0xF9	; 249
    1cf8:	cc f3       	brlt	.-14     	; 0x1cec <__fixunssfsi+0x2e>
    1cfa:	86 95       	lsr	r24
    1cfc:	77 95       	ror	r23
    1cfe:	67 95       	ror	r22
    1d00:	b3 95       	inc	r27
    1d02:	d9 f7       	brne	.-10     	; 0x1cfa <__fixunssfsi+0x3c>
    1d04:	3e f4       	brtc	.+14     	; 0x1d14 <__fixunssfsi+0x56>
    1d06:	90 95       	com	r25
    1d08:	80 95       	com	r24
    1d0a:	70 95       	com	r23
    1d0c:	61 95       	neg	r22
    1d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d10:	8f 4f       	sbci	r24, 0xFF	; 255
    1d12:	9f 4f       	sbci	r25, 0xFF	; 255
    1d14:	08 95       	ret

00001d16 <__floatunsisf>:
    1d16:	e8 94       	clt
    1d18:	09 c0       	rjmp	.+18     	; 0x1d2c <__floatsisf+0x12>

00001d1a <__floatsisf>:
    1d1a:	97 fb       	bst	r25, 7
    1d1c:	3e f4       	brtc	.+14     	; 0x1d2c <__floatsisf+0x12>
    1d1e:	90 95       	com	r25
    1d20:	80 95       	com	r24
    1d22:	70 95       	com	r23
    1d24:	61 95       	neg	r22
    1d26:	7f 4f       	sbci	r23, 0xFF	; 255
    1d28:	8f 4f       	sbci	r24, 0xFF	; 255
    1d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2c:	99 23       	and	r25, r25
    1d2e:	a9 f0       	breq	.+42     	; 0x1d5a <__floatsisf+0x40>
    1d30:	f9 2f       	mov	r31, r25
    1d32:	96 e9       	ldi	r25, 0x96	; 150
    1d34:	bb 27       	eor	r27, r27
    1d36:	93 95       	inc	r25
    1d38:	f6 95       	lsr	r31
    1d3a:	87 95       	ror	r24
    1d3c:	77 95       	ror	r23
    1d3e:	67 95       	ror	r22
    1d40:	b7 95       	ror	r27
    1d42:	f1 11       	cpse	r31, r1
    1d44:	f8 cf       	rjmp	.-16     	; 0x1d36 <__floatsisf+0x1c>
    1d46:	fa f4       	brpl	.+62     	; 0x1d86 <__floatsisf+0x6c>
    1d48:	bb 0f       	add	r27, r27
    1d4a:	11 f4       	brne	.+4      	; 0x1d50 <__floatsisf+0x36>
    1d4c:	60 ff       	sbrs	r22, 0
    1d4e:	1b c0       	rjmp	.+54     	; 0x1d86 <__floatsisf+0x6c>
    1d50:	6f 5f       	subi	r22, 0xFF	; 255
    1d52:	7f 4f       	sbci	r23, 0xFF	; 255
    1d54:	8f 4f       	sbci	r24, 0xFF	; 255
    1d56:	9f 4f       	sbci	r25, 0xFF	; 255
    1d58:	16 c0       	rjmp	.+44     	; 0x1d86 <__floatsisf+0x6c>
    1d5a:	88 23       	and	r24, r24
    1d5c:	11 f0       	breq	.+4      	; 0x1d62 <__floatsisf+0x48>
    1d5e:	96 e9       	ldi	r25, 0x96	; 150
    1d60:	11 c0       	rjmp	.+34     	; 0x1d84 <__floatsisf+0x6a>
    1d62:	77 23       	and	r23, r23
    1d64:	21 f0       	breq	.+8      	; 0x1d6e <__floatsisf+0x54>
    1d66:	9e e8       	ldi	r25, 0x8E	; 142
    1d68:	87 2f       	mov	r24, r23
    1d6a:	76 2f       	mov	r23, r22
    1d6c:	05 c0       	rjmp	.+10     	; 0x1d78 <__floatsisf+0x5e>
    1d6e:	66 23       	and	r22, r22
    1d70:	71 f0       	breq	.+28     	; 0x1d8e <__floatsisf+0x74>
    1d72:	96 e8       	ldi	r25, 0x86	; 134
    1d74:	86 2f       	mov	r24, r22
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	2a f0       	brmi	.+10     	; 0x1d86 <__floatsisf+0x6c>
    1d7c:	9a 95       	dec	r25
    1d7e:	66 0f       	add	r22, r22
    1d80:	77 1f       	adc	r23, r23
    1d82:	88 1f       	adc	r24, r24
    1d84:	da f7       	brpl	.-10     	; 0x1d7c <__floatsisf+0x62>
    1d86:	88 0f       	add	r24, r24
    1d88:	96 95       	lsr	r25
    1d8a:	87 95       	ror	r24
    1d8c:	97 f9       	bld	r25, 7
    1d8e:	08 95       	ret

00001d90 <__fp_inf>:
    1d90:	97 f9       	bld	r25, 7
    1d92:	9f 67       	ori	r25, 0x7F	; 127
    1d94:	80 e8       	ldi	r24, 0x80	; 128
    1d96:	70 e0       	ldi	r23, 0x00	; 0
    1d98:	60 e0       	ldi	r22, 0x00	; 0
    1d9a:	08 95       	ret

00001d9c <__fp_nan>:
    1d9c:	9f ef       	ldi	r25, 0xFF	; 255
    1d9e:	80 ec       	ldi	r24, 0xC0	; 192
    1da0:	08 95       	ret

00001da2 <__fp_pscA>:
    1da2:	00 24       	eor	r0, r0
    1da4:	0a 94       	dec	r0
    1da6:	16 16       	cp	r1, r22
    1da8:	17 06       	cpc	r1, r23
    1daa:	18 06       	cpc	r1, r24
    1dac:	09 06       	cpc	r0, r25
    1dae:	08 95       	ret

00001db0 <__fp_pscB>:
    1db0:	00 24       	eor	r0, r0
    1db2:	0a 94       	dec	r0
    1db4:	12 16       	cp	r1, r18
    1db6:	13 06       	cpc	r1, r19
    1db8:	14 06       	cpc	r1, r20
    1dba:	05 06       	cpc	r0, r21
    1dbc:	08 95       	ret

00001dbe <__fp_round>:
    1dbe:	09 2e       	mov	r0, r25
    1dc0:	03 94       	inc	r0
    1dc2:	00 0c       	add	r0, r0
    1dc4:	11 f4       	brne	.+4      	; 0x1dca <__fp_round+0xc>
    1dc6:	88 23       	and	r24, r24
    1dc8:	52 f0       	brmi	.+20     	; 0x1dde <__fp_round+0x20>
    1dca:	bb 0f       	add	r27, r27
    1dcc:	40 f4       	brcc	.+16     	; 0x1dde <__fp_round+0x20>
    1dce:	bf 2b       	or	r27, r31
    1dd0:	11 f4       	brne	.+4      	; 0x1dd6 <__fp_round+0x18>
    1dd2:	60 ff       	sbrs	r22, 0
    1dd4:	04 c0       	rjmp	.+8      	; 0x1dde <__fp_round+0x20>
    1dd6:	6f 5f       	subi	r22, 0xFF	; 255
    1dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dda:	8f 4f       	sbci	r24, 0xFF	; 255
    1ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dde:	08 95       	ret

00001de0 <__fp_split3>:
    1de0:	57 fd       	sbrc	r21, 7
    1de2:	90 58       	subi	r25, 0x80	; 128
    1de4:	44 0f       	add	r20, r20
    1de6:	55 1f       	adc	r21, r21
    1de8:	59 f0       	breq	.+22     	; 0x1e00 <__fp_splitA+0x10>
    1dea:	5f 3f       	cpi	r21, 0xFF	; 255
    1dec:	71 f0       	breq	.+28     	; 0x1e0a <__fp_splitA+0x1a>
    1dee:	47 95       	ror	r20

00001df0 <__fp_splitA>:
    1df0:	88 0f       	add	r24, r24
    1df2:	97 fb       	bst	r25, 7
    1df4:	99 1f       	adc	r25, r25
    1df6:	61 f0       	breq	.+24     	; 0x1e10 <__fp_splitA+0x20>
    1df8:	9f 3f       	cpi	r25, 0xFF	; 255
    1dfa:	79 f0       	breq	.+30     	; 0x1e1a <__fp_splitA+0x2a>
    1dfc:	87 95       	ror	r24
    1dfe:	08 95       	ret
    1e00:	12 16       	cp	r1, r18
    1e02:	13 06       	cpc	r1, r19
    1e04:	14 06       	cpc	r1, r20
    1e06:	55 1f       	adc	r21, r21
    1e08:	f2 cf       	rjmp	.-28     	; 0x1dee <__fp_split3+0xe>
    1e0a:	46 95       	lsr	r20
    1e0c:	f1 df       	rcall	.-30     	; 0x1df0 <__fp_splitA>
    1e0e:	08 c0       	rjmp	.+16     	; 0x1e20 <__fp_splitA+0x30>
    1e10:	16 16       	cp	r1, r22
    1e12:	17 06       	cpc	r1, r23
    1e14:	18 06       	cpc	r1, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	f1 cf       	rjmp	.-30     	; 0x1dfc <__fp_splitA+0xc>
    1e1a:	86 95       	lsr	r24
    1e1c:	71 05       	cpc	r23, r1
    1e1e:	61 05       	cpc	r22, r1
    1e20:	08 94       	sec
    1e22:	08 95       	ret

00001e24 <__fp_zero>:
    1e24:	e8 94       	clt

00001e26 <__fp_szero>:
    1e26:	bb 27       	eor	r27, r27
    1e28:	66 27       	eor	r22, r22
    1e2a:	77 27       	eor	r23, r23
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	97 f9       	bld	r25, 7
    1e30:	08 95       	ret

00001e32 <__divmodhi4>:
    1e32:	97 fb       	bst	r25, 7
    1e34:	07 2e       	mov	r0, r23
    1e36:	16 f4       	brtc	.+4      	; 0x1e3c <__divmodhi4+0xa>
    1e38:	00 94       	com	r0
    1e3a:	06 d0       	rcall	.+12     	; 0x1e48 <__divmodhi4_neg1>
    1e3c:	77 fd       	sbrc	r23, 7
    1e3e:	08 d0       	rcall	.+16     	; 0x1e50 <__divmodhi4_neg2>
    1e40:	1a d0       	rcall	.+52     	; 0x1e76 <__udivmodhi4>
    1e42:	07 fc       	sbrc	r0, 7
    1e44:	05 d0       	rcall	.+10     	; 0x1e50 <__divmodhi4_neg2>
    1e46:	3e f4       	brtc	.+14     	; 0x1e56 <__divmodhi4_exit>

00001e48 <__divmodhi4_neg1>:
    1e48:	90 95       	com	r25
    1e4a:	81 95       	neg	r24
    1e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4e:	08 95       	ret

00001e50 <__divmodhi4_neg2>:
    1e50:	70 95       	com	r23
    1e52:	61 95       	neg	r22
    1e54:	7f 4f       	sbci	r23, 0xFF	; 255

00001e56 <__divmodhi4_exit>:
    1e56:	08 95       	ret

00001e58 <__umulhisi3>:
    1e58:	a2 9f       	mul	r26, r18
    1e5a:	b0 01       	movw	r22, r0
    1e5c:	b3 9f       	mul	r27, r19
    1e5e:	c0 01       	movw	r24, r0
    1e60:	a3 9f       	mul	r26, r19
    1e62:	70 0d       	add	r23, r0
    1e64:	81 1d       	adc	r24, r1
    1e66:	11 24       	eor	r1, r1
    1e68:	91 1d       	adc	r25, r1
    1e6a:	b2 9f       	mul	r27, r18
    1e6c:	70 0d       	add	r23, r0
    1e6e:	81 1d       	adc	r24, r1
    1e70:	11 24       	eor	r1, r1
    1e72:	91 1d       	adc	r25, r1
    1e74:	08 95       	ret

00001e76 <__udivmodhi4>:
    1e76:	aa 1b       	sub	r26, r26
    1e78:	bb 1b       	sub	r27, r27
    1e7a:	51 e1       	ldi	r21, 0x11	; 17
    1e7c:	07 c0       	rjmp	.+14     	; 0x1e8c <__udivmodhi4_ep>

00001e7e <__udivmodhi4_loop>:
    1e7e:	aa 1f       	adc	r26, r26
    1e80:	bb 1f       	adc	r27, r27
    1e82:	a6 17       	cp	r26, r22
    1e84:	b7 07       	cpc	r27, r23
    1e86:	10 f0       	brcs	.+4      	; 0x1e8c <__udivmodhi4_ep>
    1e88:	a6 1b       	sub	r26, r22
    1e8a:	b7 0b       	sbc	r27, r23

00001e8c <__udivmodhi4_ep>:
    1e8c:	88 1f       	adc	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	5a 95       	dec	r21
    1e92:	a9 f7       	brne	.-22     	; 0x1e7e <__udivmodhi4_loop>
    1e94:	80 95       	com	r24
    1e96:	90 95       	com	r25
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	08 95       	ret

00001e9e <_exit>:
    1e9e:	f8 94       	cli

00001ea0 <__stop_program>:
    1ea0:	ff cf       	rjmp	.-2      	; 0x1ea0 <__stop_program>
