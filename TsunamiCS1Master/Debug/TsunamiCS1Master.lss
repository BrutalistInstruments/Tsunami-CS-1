
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000196  00800200  000034c2  00003556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b4  00800396  00800396  000036ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000036ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000371c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  00003760  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000073c0  00000000  00000000  00003b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fff  00000000  00000000  0000af48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000030a2  00000000  00000000  0000cf47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ae4  00000000  00000000  0000ffec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001492  00000000  00000000  00010ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a18  00000000  00000000  00011f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0001697a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
       2:	00 00       	nop
       4:	11 c1       	rjmp	.+546    	; 0x228 <__bad_interrupt>
       6:	00 00       	nop
       8:	0f c1       	rjmp	.+542    	; 0x228 <__bad_interrupt>
       a:	00 00       	nop
       c:	50 c2       	rjmp	.+1184   	; 0x4ae <__vector_3>
       e:	00 00       	nop
      10:	6c c2       	rjmp	.+1240   	; 0x4ea <__vector_4>
      12:	00 00       	nop
      14:	88 c2       	rjmp	.+1296   	; 0x526 <__vector_5>
      16:	00 00       	nop
      18:	a4 c2       	rjmp	.+1352   	; 0x562 <__vector_6>
      1a:	00 00       	nop
      1c:	05 c1       	rjmp	.+522    	; 0x228 <__bad_interrupt>
      1e:	00 00       	nop
      20:	03 c1       	rjmp	.+518    	; 0x228 <__bad_interrupt>
      22:	00 00       	nop
      24:	01 c1       	rjmp	.+514    	; 0x228 <__bad_interrupt>
      26:	00 00       	nop
      28:	ff c0       	rjmp	.+510    	; 0x228 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fd c0       	rjmp	.+506    	; 0x228 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fb c0       	rjmp	.+502    	; 0x228 <__bad_interrupt>
      32:	00 00       	nop
      34:	f9 c0       	rjmp	.+498    	; 0x228 <__bad_interrupt>
      36:	00 00       	nop
      38:	f7 c0       	rjmp	.+494    	; 0x228 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__vector_15>
      3e:	00 00       	nop
      40:	f3 c0       	rjmp	.+486    	; 0x228 <__bad_interrupt>
      42:	00 00       	nop
      44:	f1 c0       	rjmp	.+482    	; 0x228 <__bad_interrupt>
      46:	00 00       	nop
      48:	ef c0       	rjmp	.+478    	; 0x228 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ed c0       	rjmp	.+474    	; 0x228 <__bad_interrupt>
      4e:	00 00       	nop
      50:	eb c0       	rjmp	.+470    	; 0x228 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__vector_21>
      58:	e7 c0       	rjmp	.+462    	; 0x228 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e5 c0       	rjmp	.+458    	; 0x228 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e3 c0       	rjmp	.+454    	; 0x228 <__bad_interrupt>
      62:	00 00       	nop
      64:	e1 c0       	rjmp	.+450    	; 0x228 <__bad_interrupt>
      66:	00 00       	nop
      68:	df c0       	rjmp	.+446    	; 0x228 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__vector_27>
      70:	db c0       	rjmp	.+438    	; 0x228 <__bad_interrupt>
      72:	00 00       	nop
      74:	d9 c0       	rjmp	.+434    	; 0x228 <__bad_interrupt>
      76:	00 00       	nop
      78:	d7 c0       	rjmp	.+430    	; 0x228 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d5 c0       	rjmp	.+426    	; 0x228 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d3 c0       	rjmp	.+422    	; 0x228 <__bad_interrupt>
      82:	00 00       	nop
      84:	d1 c0       	rjmp	.+418    	; 0x228 <__bad_interrupt>
      86:	00 00       	nop
      88:	cf c0       	rjmp	.+414    	; 0x228 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cd c0       	rjmp	.+410    	; 0x228 <__bad_interrupt>
      8e:	00 00       	nop
      90:	cb c0       	rjmp	.+406    	; 0x228 <__bad_interrupt>
      92:	00 00       	nop
      94:	c9 c0       	rjmp	.+402    	; 0x228 <__bad_interrupt>
      96:	00 00       	nop
      98:	c7 c0       	rjmp	.+398    	; 0x228 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c5 c0       	rjmp	.+394    	; 0x228 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c3 c0       	rjmp	.+390    	; 0x228 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c1 c0       	rjmp	.+386    	; 0x228 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bf c0       	rjmp	.+382    	; 0x228 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	bd c0       	rjmp	.+378    	; 0x228 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bb c0       	rjmp	.+374    	; 0x228 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b9 c0       	rjmp	.+370    	; 0x228 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b7 c0       	rjmp	.+366    	; 0x228 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b5 c0       	rjmp	.+362    	; 0x228 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b3 c0       	rjmp	.+358    	; 0x228 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b1 c0       	rjmp	.+354    	; 0x228 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	af c0       	rjmp	.+350    	; 0x228 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ad c0       	rjmp	.+346    	; 0x228 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ab c0       	rjmp	.+342    	; 0x228 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a9 c0       	rjmp	.+338    	; 0x228 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__vector_54>
      dc:	a5 c0       	rjmp	.+330    	; 0x228 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a3 c0       	rjmp	.+326    	; 0x228 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0b 03       	fmul	r16, r19
      e6:	90 04       	cpc	r9, r0
      e8:	90 04       	cpc	r9, r0
      ea:	90 04       	cpc	r9, r0
      ec:	90 04       	cpc	r9, r0
      ee:	90 04       	cpc	r9, r0
      f0:	90 04       	cpc	r9, r0
      f2:	90 04       	cpc	r9, r0
      f4:	90 04       	cpc	r9, r0
      f6:	90 04       	cpc	r9, r0
      f8:	90 04       	cpc	r9, r0
      fa:	90 04       	cpc	r9, r0
      fc:	90 04       	cpc	r9, r0
      fe:	90 04       	cpc	r9, r0
     100:	90 04       	cpc	r9, r0
     102:	90 04       	cpc	r9, r0
     104:	90 04       	cpc	r9, r0
     106:	2f 03       	fmul	r18, r23
     108:	5b 03       	fmul	r21, r19
     10a:	84 03       	fmuls	r16, r20
     10c:	90 04       	cpc	r9, r0
     10e:	90 04       	cpc	r9, r0
     110:	90 04       	cpc	r9, r0
     112:	90 04       	cpc	r9, r0
     114:	90 04       	cpc	r9, r0
     116:	39 03       	fmul	r19, r17
     118:	65 03       	mulsu	r22, r21
     11a:	8e 03       	fmulsu	r16, r22
     11c:	90 04       	cpc	r9, r0
     11e:	90 04       	cpc	r9, r0
     120:	90 04       	cpc	r9, r0
     122:	90 04       	cpc	r9, r0
     124:	90 04       	cpc	r9, r0
     126:	b3 03       	fmuls	r19, r19
     128:	ee 03       	fmulsu	r22, r22
     12a:	05 04       	cpc	r0, r5
     12c:	90 04       	cpc	r9, r0
     12e:	90 04       	cpc	r9, r0
     130:	90 04       	cpc	r9, r0
     132:	90 04       	cpc	r9, r0
     134:	90 04       	cpc	r9, r0
     136:	bd 03       	fmulsu	r19, r21
     138:	f8 03       	fmulsu	r23, r16
     13a:	0f 04       	cpc	r0, r15
     13c:	90 04       	cpc	r9, r0
     13e:	90 04       	cpc	r9, r0
     140:	90 04       	cpc	r9, r0
     142:	90 04       	cpc	r9, r0
     144:	90 04       	cpc	r9, r0
     146:	42 04       	cpc	r4, r2
     148:	66 04       	cpc	r6, r6
     14a:	87 04       	cpc	r8, r7
     14c:	90 04       	cpc	r9, r0
     14e:	90 04       	cpc	r9, r0
     150:	90 04       	cpc	r9, r0
     152:	90 04       	cpc	r9, r0
     154:	90 04       	cpc	r9, r0
     156:	4c 04       	cpc	r4, r12
     158:	70 04       	cpc	r7, r0
     15a:	90 0a       	sbc	r9, r16
     15c:	a9 0c       	add	r10, r9
     15e:	a9 0c       	add	r10, r9
     160:	a9 0c       	add	r10, r9
     162:	a9 0c       	add	r10, r9
     164:	a9 0c       	add	r10, r9
     166:	a9 0c       	add	r10, r9
     168:	a9 0c       	add	r10, r9
     16a:	a9 0c       	add	r10, r9
     16c:	a9 0c       	add	r10, r9
     16e:	a9 0c       	add	r10, r9
     170:	a9 0c       	add	r10, r9
     172:	a9 0c       	add	r10, r9
     174:	a9 0c       	add	r10, r9
     176:	a9 0c       	add	r10, r9
     178:	a9 0c       	add	r10, r9
     17a:	a6 0a       	sbc	r10, r22
     17c:	c0 0a       	sbc	r12, r16
     17e:	e6 0a       	sbc	r14, r22
     180:	15 0b       	sbc	r17, r21
     182:	a9 0c       	add	r10, r9
     184:	a9 0c       	add	r10, r9
     186:	a9 0c       	add	r10, r9
     188:	a9 0c       	add	r10, r9
     18a:	a9 0c       	add	r10, r9
     18c:	dd 0a       	sbc	r13, r29
     18e:	03 0b       	sbc	r16, r19
     190:	32 0b       	sbc	r19, r18
     192:	a9 0c       	add	r10, r9
     194:	a9 0c       	add	r10, r9
     196:	a9 0c       	add	r10, r9
     198:	a9 0c       	add	r10, r9
     19a:	43 0b       	sbc	r20, r19
     19c:	5d 0b       	sbc	r21, r29
     19e:	96 0b       	sbc	r25, r22
     1a0:	e2 0b       	sbc	r30, r18
     1a2:	a9 0c       	add	r10, r9
     1a4:	a9 0c       	add	r10, r9
     1a6:	a9 0c       	add	r10, r9
     1a8:	a9 0c       	add	r10, r9
     1aa:	a9 0c       	add	r10, r9
     1ac:	7a 0b       	sbc	r23, r26
     1ae:	b3 0b       	sbc	r27, r19
     1b0:	ff 0b       	sbc	r31, r31
     1b2:	a9 0c       	add	r10, r9
     1b4:	a9 0c       	add	r10, r9
     1b6:	a9 0c       	add	r10, r9
     1b8:	a9 0c       	add	r10, r9
     1ba:	15 0c       	add	r1, r5
     1bc:	2f 0c       	add	r2, r15
     1be:	5e 0c       	add	r5, r14
     1c0:	8d 0c       	add	r8, r13
     1c2:	a9 0c       	add	r10, r9
     1c4:	a9 0c       	add	r10, r9
     1c6:	a9 0c       	add	r10, r9
     1c8:	a9 0c       	add	r10, r9
     1ca:	a9 0c       	add	r10, r9
     1cc:	4c 0c       	add	r4, r12
     1ce:	7b 0c       	add	r7, r11
     1d0:	f5 11       	cpse	r31, r5
     1d2:	f8 11       	cpse	r31, r8
     1d4:	fb 11       	cpse	r31, r11
     1d6:	fe 11       	cpse	r31, r14
     1d8:	01 12       	cpse	r0, r17
     1da:	04 12       	cpse	r0, r20
     1dc:	07 12       	cpse	r0, r23
     1de:	0a 12       	cpse	r0, r26
     1e0:	0d 12       	cpse	r0, r29
     1e2:	10 12       	cpse	r1, r16
     1e4:	13 12       	cpse	r1, r19
     1e6:	16 12       	cpse	r1, r22

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d1 e2       	ldi	r29, 0x21	; 33
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	13 e0       	ldi	r17, 0x03	; 3
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b2 e0       	ldi	r27, 0x02	; 2
     1fe:	e2 ec       	ldi	r30, 0xC2	; 194
     200:	f4 e3       	ldi	r31, 0x34	; 52
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a6 39       	cpi	r26, 0x96	; 150
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	25 e0       	ldi	r18, 0x05	; 5
     214:	a6 e9       	ldi	r26, 0x96	; 150
     216:	b3 e0       	ldi	r27, 0x03	; 3
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	aa 34       	cpi	r26, 0x4A	; 74
     21e:	b2 07       	cpc	r27, r18
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	df d6       	rcall	.+3518   	; 0xfe2 <main>
     224:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <_exit>

00000228 <__bad_interrupt>:
     228:	eb ce       	rjmp	.-554    	; 0x0 <__vectors>

0000022a <__vector_15>:
uint8_t buttonsCurrentCycle;
uint16_t lastFullBits = 0;
uint8_t currentTrig;

ISR(TIMER2_OVF_vect)
{
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	2f 93       	push	r18
     236:	3f 93       	push	r19
     238:	8f 93       	push	r24
     23a:	9f 93       	push	r25

static inline void debounce()
{
	static uint8_t vcount_low = 0xFF, vcount_high = 0xFF;
	static uint8_t button_state = 0;
	uint8_t state_changed = ~BUTTON_PIN ^ button_state;
     23c:	83 b1       	in	r24, 0x03	; 3
     23e:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <__data_end>
     242:	80 95       	com	r24
     244:	38 2f       	mov	r19, r24
     246:	32 27       	eor	r19, r18
	VC_DEC_OR_SET(vcount_high, vcount_low, state_changed);
     248:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <vcount_low.1744>
     24c:	93 23       	and	r25, r19
     24e:	89 2f       	mov	r24, r25
     250:	80 95       	com	r24
     252:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <vcount_low.1744>
     256:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     25a:	93 23       	and	r25, r19
     25c:	98 27       	eor	r25, r24
     25e:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
     262:	83 23       	and	r24, r19
	state_changed &= vcount_low & vcount_high;
     264:	89 23       	and	r24, r25
	button_state ^= state_changed;
     266:	92 2f       	mov	r25, r18
     268:	98 27       	eor	r25, r24
     26a:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <__data_end>
	buttons_down |= button_state&state_changed;
     26e:	20 91 a9 03 	lds	r18, 0x03A9	; 0x8003a9 <buttons_down>
     272:	89 23       	and	r24, r25
     274:	82 2b       	or	r24, r18
     276:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <buttons_down>
	debounce();
}
     27a:	9f 91       	pop	r25
     27c:	8f 91       	pop	r24
     27e:	3f 91       	pop	r19
     280:	2f 91       	pop	r18
     282:	0f 90       	pop	r0
     284:	0f be       	out	0x3f, r0	; 63
     286:	0f 90       	pop	r0
     288:	1f 90       	pop	r1
     28a:	18 95       	reti

0000028c <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     28c:	8f ef       	ldi	r24, 0xFF	; 255
     28e:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     290:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons and Encoder buttons
	PORTB = 0B01111111;
     294:	8f e7       	ldi	r24, 0x7F	; 127
     296:	85 b9       	out	0x05, r24	; 5
     298:	08 95       	ret

0000029a <listenTrigButtons>:

}

void listenTrigButtons(Pattern *buttonCurrentPattern, Globals *currentGlobals)
{
     29a:	af 92       	push	r10
     29c:	bf 92       	push	r11
     29e:	cf 92       	push	r12
     2a0:	df 92       	push	r13
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	5c 01       	movw	r10, r24
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     2ae:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     2b2:	20 95       	com	r18
     2b4:	20 93 a7 03 	sts	0x03A7, r18	; 0x8003a7 <buttonsCurrentCycle>
	(currentGlobals->currentTrigButtons) = (buttonsCurrentCycle << 8) | (PINA^255);
     2b8:	90 b1       	in	r25, 0x00	; 0
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	32 2f       	mov	r19, r18
     2be:	22 27       	eor	r18, r18
     2c0:	90 95       	com	r25
     2c2:	29 2b       	or	r18, r25
     2c4:	db 01       	movw	r26, r22
     2c6:	2d 93       	st	X+, r18
     2c8:	3c 93       	st	X, r19
	if(currentGlobals->currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     2ca:	40 91 97 03 	lds	r20, 0x0397	; 0x800397 <lastFullBits>
     2ce:	50 91 98 03 	lds	r21, 0x0398	; 0x800398 <lastFullBits+0x1>
     2d2:	24 17       	cp	r18, r20
     2d4:	35 07       	cpc	r19, r21
     2d6:	09 f4       	brne	.+2      	; 0x2da <listenTrigButtons+0x40>
     2d8:	51 c0       	rjmp	.+162    	; 0x37c <listenTrigButtons+0xe2>
     2da:	6b 01       	movw	r12, r22
	{
		lastFullBits = currentGlobals->currentTrigButtons;
     2dc:	30 93 98 03 	sts	0x0398, r19	; 0x800398 <lastFullBits+0x1>
     2e0:	20 93 97 03 	sts	0x0397, r18	; 0x800397 <lastFullBits>
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
     2e4:	fb 01       	movw	r30, r22
     2e6:	00 81       	ld	r16, Z
     2e8:	11 81       	ldd	r17, Z+1	; 0x01
     2ea:	75 01       	movw	r14, r10
     2ec:	f8 e8       	ldi	r31, 0x88	; 136
     2ee:	ef 0e       	add	r14, r31
     2f0:	f1 1c       	adc	r15, r1
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     2f2:	c0 e0       	ldi	r28, 0x00	; 0
		{
			currentTrig = (fullBitsParse&1);
     2f4:	90 2f       	mov	r25, r16
     2f6:	91 70       	andi	r25, 0x01	; 1
     2f8:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <currentTrig>
			if(currentTrig)
     2fc:	99 23       	and	r25, r25
     2fe:	a9 f1       	breq	.+106    	; 0x36a <listenTrigButtons+0xd0>
			{
				uint8_t encoderAstate = currentGlobals->menuState >> 4;
				switch (encoderAstate)
     300:	d6 01       	movw	r26, r12
     302:	16 96       	adiw	r26, 0x06	; 6
     304:	9c 91       	ld	r25, X
     306:	92 95       	swap	r25
     308:	9f 70       	andi	r25, 0x0F	; 15
     30a:	91 30       	cpi	r25, 0x01	; 1
     30c:	51 f0       	breq	.+20     	; 0x322 <listenTrigButtons+0x88>
     30e:	18 f0       	brcs	.+6      	; 0x316 <listenTrigButtons+0x7c>
     310:	94 30       	cpi	r25, 0x04	; 4
     312:	58 f5       	brcc	.+86     	; 0x36a <listenTrigButtons+0xd0>
     314:	1a c0       	rjmp	.+52     	; 0x34a <listenTrigButtons+0xb0>
				{
	
					//for "performance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
					case 0: //performance mode
					//we trigger a sound here based on the location of bc
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     316:	4c 2f       	mov	r20, r28
     318:	b6 01       	movw	r22, r12
     31a:	c5 01       	movw	r24, r10
     31c:	0e 94 f7 13 	call	0x27ee	; 0x27ee <playTrack>
					//trackControl(buttonCurrentPattern->trackSampleLSB[bc], buttonCurrentPattern->trackSampleMSB[bc], buttonCurrentPattern->trackOutputRoute[bc], buttonCurrentPattern->trackPlayMode[bc]);
					// void trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand);
					break;
     320:	24 c0       	rjmp	.+72     	; 0x36a <listenTrigButtons+0xd0>

					case 1:
					buttonCurrentPattern->trackSequence[currentGlobals->currentStep] ^=currentGlobals->currentTrigButtons;
     322:	d6 01       	movw	r26, r12
     324:	14 96       	adiw	r26, 0x04	; 4
     326:	ec 91       	ld	r30, X
     328:	14 97       	sbiw	r26, 0x04	; 4
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	ee 0f       	add	r30, r30
     32e:	ff 1f       	adc	r31, r31
     330:	ea 0d       	add	r30, r10
     332:	fb 1d       	adc	r31, r11
     334:	e5 51       	subi	r30, 0x15	; 21
     336:	ff 4f       	sbci	r31, 0xFF	; 255
     338:	20 81       	ld	r18, Z
     33a:	31 81       	ldd	r19, Z+1	; 0x01
     33c:	8d 91       	ld	r24, X+
     33e:	9c 91       	ld	r25, X
     340:	82 27       	eor	r24, r18
     342:	93 27       	eor	r25, r19
     344:	91 83       	std	Z+1, r25	; 0x01
     346:	80 83       	st	Z, r24
					//turn on step number, or turn off step number.
					//step sequencer mode.
					break;
     348:	10 c0       	rjmp	.+32     	; 0x36a <listenTrigButtons+0xd0>
					//we want this functionality for both case 2 and case 3
					case 2:
					case 3:;
					//select track for sample assignment
					//uint16_t currentSample = (buttonCurrentPattern->trackSampleMSB[bc]<<8)|(buttonCurrentPattern->trackSampleLSB[bc]);
					currentGlobals->currentTrack = bc;
     34a:	f6 01       	movw	r30, r12
     34c:	c5 83       	std	Z+5, r28	; 0x05
					currentGlobals->valueChangeFlag |=(1<<triggerChange);
     34e:	82 85       	ldd	r24, Z+10	; 0x0a
     350:	82 60       	ori	r24, 0x02	; 2
     352:	82 87       	std	Z+10, r24	; 0x0a
					trackControl(buttonCurrentPattern->trackSampleLSB[bc], buttonCurrentPattern->trackSampleMSB[bc], buttonCurrentPattern->trackOutputRoute[bc], buttonCurrentPattern->trackPlayMode[bc]);
     354:	d7 01       	movw	r26, r14
     356:	2c 91       	ld	r18, X
     358:	f7 01       	movw	r30, r14
     35a:	e0 57       	subi	r30, 0x70	; 112
     35c:	f1 09       	sbc	r31, r1
     35e:	40 81       	ld	r20, Z
     360:	f7 01       	movw	r30, r14
     362:	60 89       	ldd	r22, Z+16	; 0x10
     364:	80 a1       	ldd	r24, Z+32	; 0x20
     366:	0e 94 36 13 	call	0x266c	; 0x266c <trackControl>
					default:
					//this should be the same as case 0;
					break;
				}
			}
			fullBitsParse = fullBitsParse>>1;
     36a:	16 95       	lsr	r17
     36c:	07 95       	ror	r16
	{
		lastFullBits = currentGlobals->currentTrigButtons;
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     36e:	cf 5f       	subi	r28, 0xFF	; 255
     370:	ff ef       	ldi	r31, 0xFF	; 255
     372:	ef 1a       	sub	r14, r31
     374:	ff 0a       	sbc	r15, r31
     376:	c0 31       	cpi	r28, 0x10	; 16
     378:	09 f0       	breq	.+2      	; 0x37c <listenTrigButtons+0xe2>
     37a:	bc cf       	rjmp	.-136    	; 0x2f4 <listenTrigButtons+0x5a>
				}
			}
			fullBitsParse = fullBitsParse>>1;
		}
	}
}
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	df 90       	pop	r13
     388:	cf 90       	pop	r12
     38a:	bf 90       	pop	r11
     38c:	af 90       	pop	r10
     38e:	08 95       	ret

00000390 <listenGPButtons>:

void listenGPButtons(Pattern currentPattern, Globals *currentGlobals) //may need to be a pointer
{
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	cc 58       	subi	r28, 0x8C	; 140
     3a0:	de 4f       	sbci	r29, 0xFE	; 254
     3a2:	08 81       	ld	r16, Y
     3a4:	19 81       	ldd	r17, Y+1	; 0x01
     3a6:	c4 57       	subi	r28, 0x74	; 116
     3a8:	d1 40       	sbci	r29, 0x01	; 1

	if(button_down(1 << PB5))
     3aa:	80 e2       	ldi	r24, 0x20	; 32
     3ac:	66 d0       	rcall	.+204    	; 0x47a <button_down>
     3ae:	88 23       	and	r24, r24
     3b0:	41 f1       	breq	.+80     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{ //top encoder button
		if(currentGlobals->menuState>>4==3)
     3b2:	f8 01       	movw	r30, r16
     3b4:	86 81       	ldd	r24, Z+6	; 0x06
     3b6:	82 95       	swap	r24
     3b8:	8f 70       	andi	r24, 0x0F	; 15
     3ba:	83 30       	cpi	r24, 0x03	; 3
     3bc:	21 f4       	brne	.+8      	; 0x3c6 <listenGPButtons+0x36>
		{
			globalWrite(currentGlobals);
     3be:	c8 01       	movw	r24, r16
     3c0:	0e 94 04 18 	call	0x3008	; 0x3008 <globalWrite>
     3c4:	1e c0       	rjmp	.+60     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		}else
		{
			eepromSavePattern(currentPattern, currentGlobals->currentPatternNumber);
     3c6:	f8 01       	movw	r30, r16
     3c8:	83 81       	ldd	r24, Z+3	; 0x03
     3ca:	8f 93       	push	r24
     3cc:	8d b7       	in	r24, 0x3d	; 61
     3ce:	9e b7       	in	r25, 0x3e	; 62
     3d0:	8b 56       	subi	r24, 0x6B	; 107
     3d2:	91 40       	sbci	r25, 0x01	; 1
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	9e bf       	out	0x3e, r25	; 62
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	8d bf       	out	0x3d, r24	; 61
     3de:	ad b7       	in	r26, 0x3d	; 61
     3e0:	be b7       	in	r27, 0x3e	; 62
     3e2:	11 96       	adiw	r26, 0x01	; 1
     3e4:	8b e6       	ldi	r24, 0x6B	; 107
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	fe 01       	movw	r30, r28
     3ea:	39 96       	adiw	r30, 0x09	; 9
     3ec:	01 90       	ld	r0, Z+
     3ee:	0d 92       	st	X+, r0
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <listenGPButtons+0x5c>
     3f4:	0e 94 b9 14 	call	0x2972	; 0x2972 <eepromSavePattern>
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	f8 94       	cli
     3fc:	de bf       	out	0x3e, r29	; 62
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	cd bf       	out	0x3d, r28	; 61
		}
		
	}

	uint8_t encoderSwitchMask = 0b00001000;
	if(button_down(1<<PB6))
     402:	80 e4       	ldi	r24, 0x40	; 64
     404:	3a d0       	rcall	.+116    	; 0x47a <button_down>
     406:	88 23       	and	r24, r24
     408:	51 f0       	breq	.+20     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		{//bottom encoder button
			uint8_t encoderBCheck = currentGlobals->menuState&encoderSwitchMask;
     40a:	f8 01       	movw	r30, r16
     40c:	86 81       	ldd	r24, Z+6	; 0x06
			if(encoderBCheck)
     40e:	83 ff       	sbrs	r24, 3
     410:	03 c0       	rjmp	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			{
				currentGlobals->menuState &=0b11110111;//turn off the encoderBFlag
     412:	87 7f       	andi	r24, 0xF7	; 247
     414:	86 83       	std	Z+6, r24	; 0x06
     416:	03 c0       	rjmp	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>

			}else
			{
				currentGlobals->menuState |=0b00001000; //turn on the encoderBFlag bit
     418:	88 60       	ori	r24, 0x08	; 8
     41a:	f8 01       	movw	r30, r16
     41c:	86 83       	std	Z+6, r24	; 0x06
			}
		}
	uint8_t playButtonMask = 0b0000001; //we could probably make a define for both of these masks.
	uint8_t playStateCheck = currentGlobals->playState & playButtonMask;
     41e:	f8 01       	movw	r30, r16
	if(button_down(1<<PB4))
     420:	f7 80       	ldd	r15, Z+7	; 0x07
     422:	80 e1       	ldi	r24, 0x10	; 16
     424:	2a d0       	rcall	.+84     	; 0x47a <button_down>
     426:	88 23       	and	r24, r24
     428:	71 f0       	breq	.+28     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	{
		if(playStateCheck)
     42a:	f0 fe       	sbrs	r15, 0
     42c:	06 c0       	rjmp	.+12     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		{
			currentGlobals->playState=0; //playstate is on, turn it off
     42e:	f8 01       	movw	r30, r16
     430:	17 82       	std	Z+7, r1	; 0x07
			currentGlobals->currentGPButtons &=(~0x20); //turn the first bit
     432:	82 81       	ldd	r24, Z+2	; 0x02
     434:	8f 7d       	andi	r24, 0xDF	; 223
     436:	82 83       	std	Z+2, r24	; 0x02
     438:	06 c0       	rjmp	.+12     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			
		}else
		{
			currentGlobals->playState=1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	f8 01       	movw	r30, r16
     43e:	87 83       	std	Z+7, r24	; 0x07
			currentGlobals->currentGPButtons |= 0x20; //turn on the first bit
     440:	82 81       	ldd	r24, Z+2	; 0x02
     442:	80 62       	ori	r24, 0x20	; 32
     444:	82 83       	std	Z+2, r24	; 0x02
		}

	} //not sure which button this is
	uint8_t trackButtonMask = 0b00000001;
	uint8_t trackStateCheck = (currentGlobals->buttonSwitchFlag) & trackButtonMask;
     446:	f8 01       	movw	r30, r16
	if(button_down(1<<PB0))
     448:	f1 84       	ldd	r15, Z+9	; 0x09
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	16 d0       	rcall	.+44     	; 0x47a <button_down>
     44e:	88 23       	and	r24, r24
     450:	71 f0       	breq	.+28     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
	{
		if(trackStateCheck)
     452:	f0 fe       	sbrs	r15, 0
     454:	06 c0       	rjmp	.+12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		{
			currentGlobals->buttonSwitchFlag = 0;
     456:	f8 01       	movw	r30, r16
     458:	11 86       	std	Z+9, r1	; 0x09
			currentGlobals->currentGPButtons &=(~0x02);
     45a:	82 81       	ldd	r24, Z+2	; 0x02
     45c:	8d 7f       	andi	r24, 0xFD	; 253
     45e:	82 83       	std	Z+2, r24	; 0x02
     460:	06 c0       	rjmp	.+12     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
		}else
		{
			currentGlobals->buttonSwitchFlag = 1;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	f8 01       	movw	r30, r16
     466:	81 87       	std	Z+9, r24	; 0x09
			currentGlobals->currentGPButtons |=0x02;
     468:	82 81       	ldd	r24, Z+2	; 0x02
     46a:	82 60       	ori	r24, 0x02	; 2
     46c:	82 83       	std	Z+2, r24	; 0x02
		}
	}
}
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	1f 91       	pop	r17
     474:	0f 91       	pop	r16
     476:	ff 90       	pop	r15
     478:	08 95       	ret

0000047a <button_down>:

volatile uint8_t buttons_down;
uint8_t button_down(uint8_t button_mask)
{
	//I should probably check out what this is.
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     47a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     47c:	f8 94       	cli
	{
		button_mask &= buttons_down;
     47e:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <buttons_down>
     482:	89 23       	and	r24, r25
		buttons_down ^= button_mask;
     484:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <buttons_down>
     488:	98 27       	eor	r25, r24
     48a:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <buttons_down>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     48e:	2f bf       	out	0x3f, r18	; 63
	}
	
	return button_mask;
     490:	08 95       	ret

00000492 <initEncoders>:
	
	//Interrupt pins - 2,3,4,5
	
	
	//setup rising edge detection on Int pins 2 and 3 (would maybe want all pin states if this doesn't work).
	EICRA |=(1<<ISC31)|(1<<ISC30)|(1 << ISC21)|(1 << ISC20); 
     492:	e9 e6       	ldi	r30, 0x69	; 105
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	80 6f       	ori	r24, 0xF0	; 240
     49a:	80 83       	st	Z, r24
	
	//same setup on pins 4 and 5
	EICRB |=(1<<ISC51)|(1<<ISC50)|(1 << ISC41)|(1 << ISC40);
     49c:	ea e6       	ldi	r30, 0x6A	; 106
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	8f 60       	ori	r24, 0x0F	; 15
     4a4:	80 83       	st	Z, r24
	
	//enable all 4 interrupts through masking
	EIMSK |=(1<<INT2)|(1<<INT3)|(1<<INT4)|(1<<INT5);
     4a6:	8d b3       	in	r24, 0x1d	; 29
     4a8:	8c 63       	ori	r24, 0x3C	; 60
     4aa:	8d bb       	out	0x1d, r24	; 29
     4ac:	08 95       	ret

000004ae <__vector_3>:


}
 
ISR(INT2_vect)
{
     4ae:	1f 92       	push	r1
     4b0:	0f 92       	push	r0
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	0f 92       	push	r0
     4b6:	11 24       	eor	r1, r1
     4b8:	8f 93       	push	r24
     4ba:	9f 93       	push	r25
	if(0b00000010&encoderPortStates)//this means Pin 2 is coming after pin 3
     4bc:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <encoderPortStates>
     4c0:	81 ff       	sbrs	r24, 1
     4c2:	09 c0       	rjmp	.+18     	; 0x4d6 <__vector_3+0x28>
	{
		bottomEncoderValue--;
     4c4:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <bottomEncoderValue>
     4c8:	91 50       	subi	r25, 0x01	; 1
     4ca:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <bottomEncoderValue>
		encoderPortStates&=0b00001100; //reset our two pins to low. 
     4ce:	8c 70       	andi	r24, 0x0C	; 12
     4d0:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <encoderPortStates>
     4d4:	03 c0       	rjmp	.+6      	; 0x4dc <__vector_3+0x2e>
	}
	else
	{
		encoderPortStates|=0b00001101; //we want to set bit 1. 
     4d6:	8d 60       	ori	r24, 0x0D	; 13
     4d8:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <encoderPortStates>
	}
}
     4dc:	9f 91       	pop	r25
     4de:	8f 91       	pop	r24
     4e0:	0f 90       	pop	r0
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	0f 90       	pop	r0
     4e6:	1f 90       	pop	r1
     4e8:	18 95       	reti

000004ea <__vector_4>:

ISR(INT3_vect)
{
     4ea:	1f 92       	push	r1
     4ec:	0f 92       	push	r0
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	0f 92       	push	r0
     4f2:	11 24       	eor	r1, r1
     4f4:	8f 93       	push	r24
     4f6:	9f 93       	push	r25
	if(0b00000001&encoderPortStates)//this means Pin 3 is coming after pin 2
     4f8:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <encoderPortStates>
     4fc:	80 ff       	sbrs	r24, 0
     4fe:	09 c0       	rjmp	.+18     	; 0x512 <__vector_4+0x28>
	{
		bottomEncoderValue++;
     500:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <bottomEncoderValue>
     504:	9f 5f       	subi	r25, 0xFF	; 255
     506:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <bottomEncoderValue>
		encoderPortStates&=0b00001100; //reset our two pins to low.
     50a:	8c 70       	andi	r24, 0x0C	; 12
     50c:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <encoderPortStates>
     510:	03 c0       	rjmp	.+6      	; 0x518 <__vector_4+0x2e>
	}
	else
	{
		encoderPortStates|=0b00001110; //we want to set bit 2.
     512:	8e 60       	ori	r24, 0x0E	; 14
     514:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <encoderPortStates>
	}
}
     518:	9f 91       	pop	r25
     51a:	8f 91       	pop	r24
     51c:	0f 90       	pop	r0
     51e:	0f be       	out	0x3f, r0	; 63
     520:	0f 90       	pop	r0
     522:	1f 90       	pop	r1
     524:	18 95       	reti

00000526 <__vector_5>:

ISR(INT4_vect)
{
     526:	1f 92       	push	r1
     528:	0f 92       	push	r0
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	0f 92       	push	r0
     52e:	11 24       	eor	r1, r1
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
	if(0b00001000&encoderPortStates)//this means Pin 4 is coming after pin 5
     534:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <encoderPortStates>
     538:	83 ff       	sbrs	r24, 3
     53a:	09 c0       	rjmp	.+18     	; 0x54e <__vector_5+0x28>
	{
		topEncoderValue++;
     53c:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <topEncoderValue>
     540:	9f 5f       	subi	r25, 0xFF	; 255
     542:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <topEncoderValue>
		encoderPortStates&=0b00000011; //reset our two pins to low.
     546:	83 70       	andi	r24, 0x03	; 3
     548:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <encoderPortStates>
     54c:	03 c0       	rjmp	.+6      	; 0x554 <__vector_5+0x2e>
	}
	else
	{
		encoderPortStates|=0b00000111; //we want to set bit three.
     54e:	87 60       	ori	r24, 0x07	; 7
     550:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <encoderPortStates>
	}
}
     554:	9f 91       	pop	r25
     556:	8f 91       	pop	r24
     558:	0f 90       	pop	r0
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	0f 90       	pop	r0
     55e:	1f 90       	pop	r1
     560:	18 95       	reti

00000562 <__vector_6>:

ISR(INT5_vect)
{
     562:	1f 92       	push	r1
     564:	0f 92       	push	r0
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	0f 92       	push	r0
     56a:	11 24       	eor	r1, r1
     56c:	8f 93       	push	r24
     56e:	9f 93       	push	r25
	if(0b00000100&encoderPortStates)//this means Pin 3 is coming after pin 2
     570:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <encoderPortStates>
     574:	82 ff       	sbrs	r24, 2
     576:	09 c0       	rjmp	.+18     	; 0x58a <__vector_6+0x28>
	{
		topEncoderValue--;
     578:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <topEncoderValue>
     57c:	91 50       	subi	r25, 0x01	; 1
     57e:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <topEncoderValue>
		encoderPortStates&=0b00000011; //reset our two pins to low.
     582:	83 70       	andi	r24, 0x03	; 3
     584:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <encoderPortStates>
     588:	03 c0       	rjmp	.+6      	; 0x590 <__vector_6+0x2e>
	}
	else
	{
		encoderPortStates|=0b00001011; //we want to set bit two.
     58a:	8b 60       	ori	r24, 0x0B	; 11
     58c:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <encoderPortStates>
	}
}
     590:	9f 91       	pop	r25
     592:	8f 91       	pop	r24
     594:	0f 90       	pop	r0
     596:	0f be       	out	0x3f, r0	; 63
     598:	0f 90       	pop	r0
     59a:	1f 90       	pop	r1
     59c:	18 95       	reti

0000059e <listenEncoders>:


void listenEncoders(Pattern *currentPattern, Globals *currentGlobals)
{
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	ac 01       	movw	r20, r24
     5a8:	db 01       	movw	r26, r22
	if(topEncoderValue!=topEncoderLastValue)
     5aa:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <topEncoderValue>
     5ae:	20 91 9b 03 	lds	r18, 0x039B	; 0x80039b <topEncoderLastValue>
     5b2:	92 17       	cp	r25, r18
     5b4:	91 f0       	breq	.+36     	; 0x5da <listenEncoders+0x3c>
	{
		currentGlobals->menuState = ((topEncoderValue%4)<<4);
     5b6:	89 2f       	mov	r24, r25
     5b8:	83 70       	andi	r24, 0x03	; 3
     5ba:	82 95       	swap	r24
     5bc:	80 7f       	andi	r24, 0xF0	; 240
     5be:	16 96       	adiw	r26, 0x06	; 6
     5c0:	8c 93       	st	X, r24
     5c2:	16 97       	sbiw	r26, 0x06	; 6
		bottomEncoderValue = 0;
     5c4:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <bottomEncoderValue>
		currentGlobals->valueChangeFlag |= (1<<encoderChange);
     5c8:	1a 96       	adiw	r26, 0x0a	; 10
     5ca:	8c 91       	ld	r24, X
     5cc:	1a 97       	sbiw	r26, 0x0a	; 10
     5ce:	81 60       	ori	r24, 0x01	; 1
     5d0:	1a 96       	adiw	r26, 0x0a	; 10
     5d2:	8c 93       	st	X, r24
		topEncoderLastValue = topEncoderValue;
     5d4:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <topEncoderLastValue>
		
		//This seems to fix a bug where when going into performance mode, patternNumber is decremented.
		//may not be the best solution.
		return; 
     5d8:	a7 c1       	rjmp	.+846    	; 0x928 <listenEncoders+0x38a>
	}
	
	if(bottomEncoderValue!=bottomEncoderLastValue)
     5da:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <bottomEncoderValue>
     5de:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <bottomEncoderLastValue>
     5e2:	98 17       	cp	r25, r24
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <listenEncoders+0x4a>
     5e6:	a0 c1       	rjmp	.+832    	; 0x928 <listenEncoders+0x38a>
	{
		 uint8_t menuSub = bottomEncoderValue - bottomEncoderLastValue;
     5e8:	98 1b       	sub	r25, r24
		 currentGlobals->valueChangeFlag |= (1<<encoderChange);
     5ea:	1a 96       	adiw	r26, 0x0a	; 10
     5ec:	8c 91       	ld	r24, X
     5ee:	1a 97       	sbiw	r26, 0x0a	; 10
     5f0:	81 60       	ori	r24, 0x01	; 1
     5f2:	1a 96       	adiw	r26, 0x0a	; 10
     5f4:	8c 93       	st	X, r24
     5f6:	1a 97       	sbiw	r26, 0x0a	; 10
		 			//if this value is negative, we increase the menu.
		 			//if positive, we decrement the menu.
		switch(currentGlobals->menuState)
     5f8:	16 96       	adiw	r26, 0x06	; 6
     5fa:	0c 91       	ld	r16, X
     5fc:	16 97       	sbiw	r26, 0x06	; 6
     5fe:	10 e0       	ldi	r17, 0x00	; 0
     600:	0b 33       	cpi	r16, 0x3B	; 59
     602:	11 05       	cpc	r17, r1
     604:	08 f0       	brcs	.+2      	; 0x608 <listenEncoders+0x6a>
     606:	8c c1       	rjmp	.+792    	; 0x920 <listenEncoders+0x382>
     608:	f8 01       	movw	r30, r16
     60a:	88 27       	eor	r24, r24
     60c:	ee 58       	subi	r30, 0x8E	; 142
     60e:	ff 4f       	sbci	r31, 0xFF	; 255
     610:	8f 4f       	sbci	r24, 0xFF	; 255
     612:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__tablejump2__>
		{
			case PreformanceModeInit:
			if(menuSub==1)
     616:	91 30       	cpi	r25, 0x01	; 1
     618:	71 f4       	brne	.+28     	; 0x636 <listenEncoders+0x98>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     61a:	13 96       	adiw	r26, 0x03	; 3
     61c:	8c 91       	ld	r24, X
     61e:	13 97       	sbiw	r26, 0x03	; 3
     620:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     622:	21 f0       	breq	.+8      	; 0x62c <listenEncoders+0x8e>
		switch(currentGlobals->menuState)
		{
			case PreformanceModeInit:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     624:	13 96       	adiw	r26, 0x03	; 3
     626:	8c 93       	st	X, r24
     628:	13 97       	sbiw	r26, 0x03	; 3
     62a:	13 c0       	rjmp	.+38     	; 0x652 <listenEncoders+0xb4>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     62c:	8f ef       	ldi	r24, 0xFF	; 255
     62e:	13 96       	adiw	r26, 0x03	; 3
     630:	8c 93       	st	X, r24
     632:	13 97       	sbiw	r26, 0x03	; 3
     634:	0e c0       	rjmp	.+28     	; 0x652 <listenEncoders+0xb4>
				}
				
			}else if(menuSub==255) //we don't want to hit this when switching menus after changing from the sequencer. 
     636:	9f 3f       	cpi	r25, 0xFF	; 255
     638:	61 f4       	brne	.+24     	; 0x652 <listenEncoders+0xb4>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     63a:	13 96       	adiw	r26, 0x03	; 3
     63c:	8c 91       	ld	r24, X
     63e:	13 97       	sbiw	r26, 0x03	; 3
     640:	81 50       	subi	r24, 0x01	; 1
     642:	20 f0       	brcs	.+8      	; 0x64c <listenEncoders+0xae>
     644:	13 96       	adiw	r26, 0x03	; 3
     646:	8c 93       	st	X, r24
     648:	13 97       	sbiw	r26, 0x03	; 3
     64a:	03 c0       	rjmp	.+6      	; 0x652 <listenEncoders+0xb4>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     64c:	13 96       	adiw	r26, 0x03	; 3
     64e:	1c 92       	st	X, r1
     650:	13 97       	sbiw	r26, 0x03	; 3
				}
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     652:	13 96       	adiw	r26, 0x03	; 3
     654:	6c 91       	ld	r22, X
     656:	ca 01       	movw	r24, r20
     658:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <eepromLoadPattern>
			break;
     65c:	61 c1       	rjmp	.+706    	; 0x920 <listenEncoders+0x382>
			
			case SequencerMenuArrow1:			
			if(menuSub==1)
     65e:	91 30       	cpi	r25, 0x01	; 1
     660:	21 f4       	brne	.+8      	; 0x66a <listenEncoders+0xcc>
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     662:	83 e1       	ldi	r24, 0x13	; 19
     664:	16 96       	adiw	r26, 0x06	; 6
     666:	8c 93       	st	X, r24
     668:	5b c1       	rjmp	.+694    	; 0x920 <listenEncoders+0x382>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     66a:	82 e1       	ldi	r24, 0x12	; 18
     66c:	16 96       	adiw	r26, 0x06	; 6
     66e:	8c 93       	st	X, r24
     670:	57 c1       	rjmp	.+686    	; 0x920 <listenEncoders+0x382>
			}
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
     672:	91 30       	cpi	r25, 0x01	; 1
     674:	71 f4       	brne	.+28     	; 0x692 <listenEncoders+0xf4>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     676:	13 96       	adiw	r26, 0x03	; 3
     678:	8c 91       	ld	r24, X
     67a:	13 97       	sbiw	r26, 0x03	; 3
     67c:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     67e:	21 f0       	breq	.+8      	; 0x688 <listenEncoders+0xea>
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     680:	13 96       	adiw	r26, 0x03	; 3
     682:	8c 93       	st	X, r24
     684:	13 97       	sbiw	r26, 0x03	; 3
     686:	11 c0       	rjmp	.+34     	; 0x6aa <listenEncoders+0x10c>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	13 96       	adiw	r26, 0x03	; 3
     68c:	8c 93       	st	X, r24
     68e:	13 97       	sbiw	r26, 0x03	; 3
     690:	0c c0       	rjmp	.+24     	; 0x6aa <listenEncoders+0x10c>
				}
		
			}else
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     692:	13 96       	adiw	r26, 0x03	; 3
     694:	8c 91       	ld	r24, X
     696:	13 97       	sbiw	r26, 0x03	; 3
     698:	81 50       	subi	r24, 0x01	; 1
     69a:	20 f0       	brcs	.+8      	; 0x6a4 <listenEncoders+0x106>
     69c:	13 96       	adiw	r26, 0x03	; 3
     69e:	8c 93       	st	X, r24
     6a0:	13 97       	sbiw	r26, 0x03	; 3
     6a2:	03 c0       	rjmp	.+6      	; 0x6aa <listenEncoders+0x10c>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     6a4:	13 96       	adiw	r26, 0x03	; 3
     6a6:	1c 92       	st	X, r1
     6a8:	13 97       	sbiw	r26, 0x03	; 3
				}	
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     6aa:	13 96       	adiw	r26, 0x03	; 3
     6ac:	6c 91       	ld	r22, X
     6ae:	ca 01       	movw	r24, r20
     6b0:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <eepromLoadPattern>
			//this keeps the knob reads that will happen right after the eeprom load to write over the loaded values.
			//Now when you load a pattern, the saved positions of the knobs are unchanged until you turn a knob. 
			break;
     6b4:	35 c1       	rjmp	.+618    	; 0x920 <listenEncoders+0x382>
			
			case SequencerMenuArrow2:
			if(menuSub==1)
     6b6:	91 30       	cpi	r25, 0x01	; 1
     6b8:	21 f4       	brne	.+8      	; 0x6c2 <listenEncoders+0x124>
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     6ba:	81 e1       	ldi	r24, 0x11	; 17
     6bc:	16 96       	adiw	r26, 0x06	; 6
     6be:	8c 93       	st	X, r24
     6c0:	2f c1       	rjmp	.+606    	; 0x920 <listenEncoders+0x382>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     6c2:	83 e1       	ldi	r24, 0x13	; 19
     6c4:	16 96       	adiw	r26, 0x06	; 6
     6c6:	8c 93       	st	X, r24
     6c8:	2b c1       	rjmp	.+598    	; 0x920 <listenEncoders+0x382>
			}
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
     6ca:	91 30       	cpi	r25, 0x01	; 1
     6cc:	79 f4       	brne	.+30     	; 0x6ec <listenEncoders+0x14e>
			{
				currentPattern->numSteps++;
     6ce:	fa 01       	movw	r30, r20
     6d0:	e6 53       	subi	r30, 0x36	; 54
     6d2:	ff 4f       	sbci	r31, 0xFF	; 255
     6d4:	90 81       	ld	r25, Z
     6d6:	9f 5f       	subi	r25, 0xFF	; 255
				if(currentPattern->numSteps>64)
     6d8:	91 34       	cpi	r25, 0x41	; 65
     6da:	10 f4       	brcc	.+4      	; 0x6e0 <listenEncoders+0x142>
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
			{
				currentPattern->numSteps++;
     6dc:	90 83       	st	Z, r25
     6de:	20 c1       	rjmp	.+576    	; 0x920 <listenEncoders+0x382>
				if(currentPattern->numSteps>64)
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
     6e0:	fa 01       	movw	r30, r20
     6e2:	e6 53       	subi	r30, 0x36	; 54
     6e4:	ff 4f       	sbci	r31, 0xFF	; 255
     6e6:	80 e4       	ldi	r24, 0x40	; 64
     6e8:	80 83       	st	Z, r24
     6ea:	1a c1       	rjmp	.+564    	; 0x920 <listenEncoders+0x382>
				}
			}else
			{
				currentPattern->numSteps--;
     6ec:	fa 01       	movw	r30, r20
     6ee:	e6 53       	subi	r30, 0x36	; 54
     6f0:	ff 4f       	sbci	r31, 0xFF	; 255
     6f2:	90 81       	ld	r25, Z
     6f4:	91 50       	subi	r25, 0x01	; 1
				if(currentPattern->numSteps<1)
     6f6:	11 f0       	breq	.+4      	; 0x6fc <listenEncoders+0x15e>
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
				}
			}else
			{
				currentPattern->numSteps--;
     6f8:	90 83       	st	Z, r25
     6fa:	12 c1       	rjmp	.+548    	; 0x920 <listenEncoders+0x382>
				if(currentPattern->numSteps<1)
				{//we can't have a 0 step pattern. 
					currentPattern->numSteps=1;
     6fc:	fa 01       	movw	r30, r20
     6fe:	e6 53       	subi	r30, 0x36	; 54
     700:	ff 4f       	sbci	r31, 0xFF	; 255
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	80 83       	st	Z, r24
     706:	0c c1       	rjmp	.+536    	; 0x920 <listenEncoders+0x382>
				}
			}
			break;
			
			case SequencerMenuArrow3:;
			if(menuSub==1)
     708:	91 30       	cpi	r25, 0x01	; 1
     70a:	21 f4       	brne	.+8      	; 0x714 <listenEncoders+0x176>
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     70c:	82 e1       	ldi	r24, 0x12	; 18
     70e:	16 96       	adiw	r26, 0x06	; 6
     710:	8c 93       	st	X, r24
     712:	06 c1       	rjmp	.+524    	; 0x920 <listenEncoders+0x382>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     714:	81 e1       	ldi	r24, 0x11	; 17
     716:	16 96       	adiw	r26, 0x06	; 6
     718:	8c 93       	st	X, r24
     71a:	02 c1       	rjmp	.+516    	; 0x920 <listenEncoders+0x382>
			}
			break;
			
			case SequencerMenuArrow3Select:
			//change current step number
			if(menuSub==1)
     71c:	91 30       	cpi	r25, 0x01	; 1
     71e:	91 f4       	brne	.+36     	; 0x744 <listenEncoders+0x1a6>
			{
				currentGlobals->currentStep++;
     720:	14 96       	adiw	r26, 0x04	; 4
     722:	9c 91       	ld	r25, X
     724:	14 97       	sbiw	r26, 0x04	; 4
     726:	9f 5f       	subi	r25, 0xFF	; 255
     728:	14 96       	adiw	r26, 0x04	; 4
     72a:	9c 93       	st	X, r25
     72c:	14 97       	sbiw	r26, 0x04	; 4
				if(currentGlobals->currentStep>=currentPattern->numSteps)
     72e:	fa 01       	movw	r30, r20
     730:	e6 53       	subi	r30, 0x36	; 54
     732:	ff 4f       	sbci	r31, 0xFF	; 255
     734:	80 81       	ld	r24, Z
     736:	98 17       	cp	r25, r24
     738:	08 f4       	brcc	.+2      	; 0x73c <listenEncoders+0x19e>
     73a:	f2 c0       	rjmp	.+484    	; 0x920 <listenEncoders+0x382>
				{//our ceiling is the maximum number of steps.
					currentGlobals->currentStep=(currentPattern->numSteps)-1;
     73c:	81 50       	subi	r24, 0x01	; 1
     73e:	14 96       	adiw	r26, 0x04	; 4
     740:	8c 93       	st	X, r24
     742:	ee c0       	rjmp	.+476    	; 0x920 <listenEncoders+0x382>
				}
			}else
			{
				currentGlobals->currentStep--;
     744:	14 96       	adiw	r26, 0x04	; 4
     746:	9c 91       	ld	r25, X
     748:	14 97       	sbiw	r26, 0x04	; 4
     74a:	91 50       	subi	r25, 0x01	; 1
     74c:	14 96       	adiw	r26, 0x04	; 4
     74e:	9c 93       	st	X, r25
     750:	14 97       	sbiw	r26, 0x04	; 4
				if(currentGlobals->currentStep>currentPattern->numSteps)
     752:	fa 01       	movw	r30, r20
     754:	e6 53       	subi	r30, 0x36	; 54
     756:	ff 4f       	sbci	r31, 0xFF	; 255
     758:	80 81       	ld	r24, Z
     75a:	89 17       	cp	r24, r25
     75c:	08 f0       	brcs	.+2      	; 0x760 <listenEncoders+0x1c2>
     75e:	e0 c0       	rjmp	.+448    	; 0x920 <listenEncoders+0x382>
				{//do no write notes to step 0.
					currentGlobals->currentStep=0;
     760:	14 96       	adiw	r26, 0x04	; 4
     762:	1c 92       	st	X, r1
     764:	dd c0       	rjmp	.+442    	; 0x920 <listenEncoders+0x382>
				}				
			}
			break;
			
			case TrackMenuArrow1:;
			if(menuSub==1)
     766:	91 30       	cpi	r25, 0x01	; 1
     768:	21 f4       	brne	.+8      	; 0x772 <listenEncoders+0x1d4>
			{
				currentGlobals->menuState = TrackMenuArrow3;
     76a:	83 e2       	ldi	r24, 0x23	; 35
     76c:	16 96       	adiw	r26, 0x06	; 6
     76e:	8c 93       	st	X, r24
     770:	d7 c0       	rjmp	.+430    	; 0x920 <listenEncoders+0x382>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow2;
     772:	82 e2       	ldi	r24, 0x22	; 34
     774:	16 96       	adiw	r26, 0x06	; 6
     776:	8c 93       	st	X, r24
     778:	d3 c0       	rjmp	.+422    	; 0x920 <listenEncoders+0x382>
			}
			break;
			
			case TrackMenuArrow1Select:;
			uint16_t currentSample = ((currentPattern->trackSampleMSB[currentGlobals->currentTrack])<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     77a:	15 96       	adiw	r26, 0x05	; 5
     77c:	6c 91       	ld	r22, X
     77e:	15 97       	sbiw	r26, 0x05	; 5
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	fa 01       	movw	r30, r20
     784:	e6 0f       	add	r30, r22
     786:	f7 1f       	adc	r31, r23
     788:	ef 01       	movw	r28, r30
     78a:	c8 56       	subi	r28, 0x68	; 104
     78c:	df 4f       	sbci	r29, 0xFF	; 255
     78e:	28 81       	ld	r18, Y
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	32 2f       	mov	r19, r18
     794:	22 27       	eor	r18, r18
     796:	e8 55       	subi	r30, 0x58	; 88
     798:	ff 4f       	sbci	r31, 0xFF	; 255
     79a:	80 81       	ld	r24, Z
     79c:	28 2b       	or	r18, r24
			if(menuSub==1)
     79e:	91 30       	cpi	r25, 0x01	; 1
     7a0:	49 f4       	brne	.+18     	; 0x7b4 <listenEncoders+0x216>
     7a2:	2f 5f       	subi	r18, 0xFF	; 255
     7a4:	3f 4f       	sbci	r19, 0xFF	; 255
     7a6:	21 30       	cpi	r18, 0x01	; 1
     7a8:	80 e1       	ldi	r24, 0x10	; 16
     7aa:	38 07       	cpc	r19, r24
     7ac:	40 f0       	brcs	.+16     	; 0x7be <listenEncoders+0x220>
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e1       	ldi	r19, 0x10	; 16
     7b2:	05 c0       	rjmp	.+10     	; 0x7be <listenEncoders+0x220>
				{//maximum number of indexable samples.
					currentSample=4096;
				}
			}else
			{//no samples in space 0.
				currentSample--;
     7b4:	21 50       	subi	r18, 0x01	; 1
     7b6:	31 09       	sbc	r19, r1
				if(currentSample<1)
     7b8:	11 f4       	brne	.+4      	; 0x7be <listenEncoders+0x220>
				{
					currentSample=1;
     7ba:	21 e0       	ldi	r18, 0x01	; 1
     7bc:	30 e0       	ldi	r19, 0x00	; 0
				}
			}
			currentPattern->trackSampleLSB[currentGlobals->currentTrack] = (currentSample&0x00FF);//we want to lob off the top 8 bits, just in case. May be unnecessary.
     7be:	64 0f       	add	r22, r20
     7c0:	75 1f       	adc	r23, r21
     7c2:	fb 01       	movw	r30, r22
     7c4:	e8 55       	subi	r30, 0x58	; 88
     7c6:	ff 4f       	sbci	r31, 0xFF	; 255
     7c8:	20 83       	st	Z, r18
			currentPattern->trackSampleMSB[currentGlobals->currentTrack] = (currentSample>>8); 
     7ca:	15 96       	adiw	r26, 0x05	; 5
     7cc:	8c 91       	ld	r24, X
     7ce:	48 0f       	add	r20, r24
     7d0:	51 1d       	adc	r21, r1
     7d2:	fa 01       	movw	r30, r20
     7d4:	e8 56       	subi	r30, 0x68	; 104
     7d6:	ff 4f       	sbci	r31, 0xFF	; 255
     7d8:	30 83       	st	Z, r19
			break;
     7da:	a2 c0       	rjmp	.+324    	; 0x920 <listenEncoders+0x382>
			
			case TrackMenuArrow2:
			if(menuSub==1)
     7dc:	91 30       	cpi	r25, 0x01	; 1
     7de:	21 f4       	brne	.+8      	; 0x7e8 <listenEncoders+0x24a>
			{
				currentGlobals->menuState = TrackMenuArrow1;
     7e0:	81 e2       	ldi	r24, 0x21	; 33
     7e2:	16 96       	adiw	r26, 0x06	; 6
     7e4:	8c 93       	st	X, r24
     7e6:	9c c0       	rjmp	.+312    	; 0x920 <listenEncoders+0x382>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow3;
     7e8:	83 e2       	ldi	r24, 0x23	; 35
     7ea:	16 96       	adiw	r26, 0x06	; 6
     7ec:	8c 93       	st	X, r24
     7ee:	98 c0       	rjmp	.+304    	; 0x920 <listenEncoders+0x382>
			
			case TrackMenuArrow2Select:
			//change play mode of currently selected track
			//since we only have two play modes currently,
			//we only need to flip the play mode.
			currentPattern->trackPlayMode[currentGlobals->currentTrack] = (!(currentPattern->trackPlayMode[currentGlobals->currentTrack]))&(0b00000001);
     7f0:	15 96       	adiw	r26, 0x05	; 5
     7f2:	8c 91       	ld	r24, X
     7f4:	48 0f       	add	r20, r24
     7f6:	51 1d       	adc	r21, r1
     7f8:	fa 01       	movw	r30, r20
     7fa:	e8 57       	subi	r30, 0x78	; 120
     7fc:	ff 4f       	sbci	r31, 0xFF	; 255
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	90 81       	ld	r25, Z
     802:	91 11       	cpse	r25, r1
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	80 83       	st	Z, r24
			//flip all bits, mask for first bit. 
			break;
     808:	8b c0       	rjmp	.+278    	; 0x920 <listenEncoders+0x382>
			
			case TrackMenuArrow3:
			if(menuSub==1)
     80a:	91 30       	cpi	r25, 0x01	; 1
     80c:	21 f4       	brne	.+8      	; 0x816 <listenEncoders+0x278>
			{
				currentGlobals->menuState = TrackMenuArrow2;
     80e:	82 e2       	ldi	r24, 0x22	; 34
     810:	16 96       	adiw	r26, 0x06	; 6
     812:	8c 93       	st	X, r24
     814:	85 c0       	rjmp	.+266    	; 0x920 <listenEncoders+0x382>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow1;
     816:	81 e2       	ldi	r24, 0x21	; 33
     818:	16 96       	adiw	r26, 0x06	; 6
     81a:	8c 93       	st	X, r24
     81c:	81 c0       	rjmp	.+258    	; 0x920 <listenEncoders+0x382>
			}
			break;
			
			case TrackMenuArrow3Select:
			
			if(menuSub==1)
     81e:	91 30       	cpi	r25, 0x01	; 1
     820:	c9 f4       	brne	.+50     	; 0x854 <listenEncoders+0x2b6>
			{
				//indexing might be an issue here, don't remember if this is 0 indexed or not. 
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1 ;
     822:	15 96       	adiw	r26, 0x05	; 5
     824:	8c 91       	ld	r24, X
     826:	15 97       	sbiw	r26, 0x05	; 5
     828:	fa 01       	movw	r30, r20
     82a:	e8 0f       	add	r30, r24
     82c:	f1 1d       	adc	r31, r1
     82e:	80 8d       	ldd	r24, Z+24	; 0x18
     830:	8f 5f       	subi	r24, 0xFF	; 255
     832:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     834:	15 96       	adiw	r26, 0x05	; 5
     836:	8c 91       	ld	r24, X
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	fa 01       	movw	r30, r20
     83c:	e8 0f       	add	r30, r24
     83e:	f9 1f       	adc	r31, r25
     840:	20 8d       	ldd	r18, Z+24	; 0x18
     842:	28 30       	cpi	r18, 0x08	; 8
     844:	08 f4       	brcc	.+2      	; 0x848 <listenEncoders+0x2aa>
     846:	6c c0       	rjmp	.+216    	; 0x920 <listenEncoders+0x382>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=7;
     848:	fa 01       	movw	r30, r20
     84a:	e8 0f       	add	r30, r24
     84c:	f9 1f       	adc	r31, r25
     84e:	87 e0       	ldi	r24, 0x07	; 7
     850:	80 8f       	std	Z+24, r24	; 0x18
     852:	66 c0       	rjmp	.+204    	; 0x920 <listenEncoders+0x382>
				}
			}else
			{
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])-1;
     854:	15 96       	adiw	r26, 0x05	; 5
     856:	8c 91       	ld	r24, X
     858:	15 97       	sbiw	r26, 0x05	; 5
     85a:	fa 01       	movw	r30, r20
     85c:	e8 0f       	add	r30, r24
     85e:	f1 1d       	adc	r31, r1
     860:	80 8d       	ldd	r24, Z+24	; 0x18
     862:	81 50       	subi	r24, 0x01	; 1
     864:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     866:	15 96       	adiw	r26, 0x05	; 5
     868:	8c 91       	ld	r24, X
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	fa 01       	movw	r30, r20
     86e:	e8 0f       	add	r30, r24
     870:	f9 1f       	adc	r31, r25
     872:	20 8d       	ldd	r18, Z+24	; 0x18
     874:	28 30       	cpi	r18, 0x08	; 8
     876:	08 f4       	brcc	.+2      	; 0x87a <listenEncoders+0x2dc>
     878:	53 c0       	rjmp	.+166    	; 0x920 <listenEncoders+0x382>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=0;
     87a:	fa 01       	movw	r30, r20
     87c:	e8 0f       	add	r30, r24
     87e:	f9 1f       	adc	r31, r25
     880:	10 8e       	std	Z+24, r1	; 0x18
     882:	4e c0       	rjmp	.+156    	; 0x920 <listenEncoders+0x382>
				}
			}
			break;
			
			case GlobalMenuArrow1:
			if(menuSub==1)
     884:	91 30       	cpi	r25, 0x01	; 1
     886:	21 f4       	brne	.+8      	; 0x890 <listenEncoders+0x2f2>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     888:	81 e3       	ldi	r24, 0x31	; 49
     88a:	16 96       	adiw	r26, 0x06	; 6
     88c:	8c 93       	st	X, r24
     88e:	48 c0       	rjmp	.+144    	; 0x920 <listenEncoders+0x382>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     890:	82 e3       	ldi	r24, 0x32	; 50
     892:	16 96       	adiw	r26, 0x06	; 6
     894:	8c 93       	st	X, r24
     896:	44 c0       	rjmp	.+136    	; 0x920 <listenEncoders+0x382>
			}
			break;
			
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
     898:	91 30       	cpi	r25, 0x01	; 1
     89a:	69 f4       	brne	.+26     	; 0x8b6 <listenEncoders+0x318>
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     89c:	1c 96       	adiw	r26, 0x0c	; 12
     89e:	8c 91       	ld	r24, X
     8a0:	1c 97       	sbiw	r26, 0x0c	; 12
     8a2:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->midiChannel>15)
     8a4:	80 31       	cpi	r24, 0x10	; 16
     8a6:	18 f4       	brcc	.+6      	; 0x8ae <listenEncoders+0x310>
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     8a8:	1c 96       	adiw	r26, 0x0c	; 12
     8aa:	8c 93       	st	X, r24
     8ac:	39 c0       	rjmp	.+114    	; 0x920 <listenEncoders+0x382>
				if(currentGlobals->midiChannel>15)
				{
					currentGlobals->midiChannel=15;
     8ae:	8f e0       	ldi	r24, 0x0F	; 15
     8b0:	1c 96       	adiw	r26, 0x0c	; 12
     8b2:	8c 93       	st	X, r24
     8b4:	35 c0       	rjmp	.+106    	; 0x920 <listenEncoders+0x382>
				}
			}
			else
			{
				//decrement midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)-1;
     8b6:	1c 96       	adiw	r26, 0x0c	; 12
     8b8:	8c 91       	ld	r24, X
     8ba:	1c 97       	sbiw	r26, 0x0c	; 12
     8bc:	81 50       	subi	r24, 0x01	; 1
     8be:	18 f0       	brcs	.+6      	; 0x8c6 <listenEncoders+0x328>
     8c0:	1c 96       	adiw	r26, 0x0c	; 12
     8c2:	8c 93       	st	X, r24
     8c4:	2d c0       	rjmp	.+90     	; 0x920 <listenEncoders+0x382>
				if(currentGlobals->midiChannel>254)
				{
					currentGlobals->midiChannel=0;
     8c6:	1c 96       	adiw	r26, 0x0c	; 12
     8c8:	1c 92       	st	X, r1
     8ca:	2a c0       	rjmp	.+84     	; 0x920 <listenEncoders+0x382>
				}
			}
			break;
			
			case GlobalMenuArrow2:
			if(menuSub==1)
     8cc:	91 30       	cpi	r25, 0x01	; 1
     8ce:	21 f4       	brne	.+8      	; 0x8d8 <listenEncoders+0x33a>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     8d0:	81 e3       	ldi	r24, 0x31	; 49
     8d2:	16 96       	adiw	r26, 0x06	; 6
     8d4:	8c 93       	st	X, r24
     8d6:	24 c0       	rjmp	.+72     	; 0x920 <listenEncoders+0x382>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     8d8:	82 e3       	ldi	r24, 0x32	; 50
     8da:	16 96       	adiw	r26, 0x06	; 6
     8dc:	8c 93       	st	X, r24
     8de:	20 c0       	rjmp	.+64     	; 0x920 <listenEncoders+0x382>
			break;
			
			case GlobalMenuArrow2Select:;
			//change midi note for selected track.
			//midi range is 0 to 127.
			uint8_t currentMidiNote = currentGlobals->midiTrackNote[currentGlobals->currentTrack];
     8e0:	15 96       	adiw	r26, 0x05	; 5
     8e2:	6c 91       	ld	r22, X
     8e4:	15 97       	sbiw	r26, 0x05	; 5
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	fd 01       	movw	r30, r26
     8ea:	e6 0f       	add	r30, r22
     8ec:	f7 1f       	adc	r31, r23
     8ee:	85 85       	ldd	r24, Z+13	; 0x0d
			if(menuSub==1)
     8f0:	91 30       	cpi	r25, 0x01	; 1
     8f2:	21 f4       	brne	.+8      	; 0x8fc <listenEncoders+0x35e>
			{
				//not 100% sure how to set this up.
				currentMidiNote++;
     8f4:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentMidiNote>127)
     8f6:	32 f4       	brpl	.+12     	; 0x904 <listenEncoders+0x366>
				{
					currentMidiNote = 127;
     8f8:	8f e7       	ldi	r24, 0x7F	; 127
     8fa:	04 c0       	rjmp	.+8      	; 0x904 <listenEncoders+0x366>
				}
			}else
			{
				currentMidiNote--;
     8fc:	81 50       	subi	r24, 0x01	; 1
				if(currentMidiNote>128)
     8fe:	81 38       	cpi	r24, 0x81	; 129
     900:	08 f0       	brcs	.+2      	; 0x904 <listenEncoders+0x366>
				{
					currentMidiNote = 0;
     902:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			currentGlobals->midiTrackNote[currentGlobals->currentTrack] = currentMidiNote;
     904:	a6 0f       	add	r26, r22
     906:	b7 1f       	adc	r27, r23
     908:	1d 96       	adiw	r26, 0x0d	; 13
     90a:	8c 93       	st	X, r24
			break;
     90c:	09 c0       	rjmp	.+18     	; 0x920 <listenEncoders+0x382>
			
			case GlobalMenuArrow3:
			//currently unreachable, no settings live here atm		
			if(menuSub==1)
     90e:	91 30       	cpi	r25, 0x01	; 1
     910:	21 f4       	brne	.+8      	; 0x91a <listenEncoders+0x37c>
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     912:	82 e3       	ldi	r24, 0x32	; 50
     914:	16 96       	adiw	r26, 0x06	; 6
     916:	8c 93       	st	X, r24
     918:	03 c0       	rjmp	.+6      	; 0x920 <listenEncoders+0x382>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     91a:	81 e3       	ldi	r24, 0x31	; 49
     91c:	16 96       	adiw	r26, 0x06	; 6
     91e:	8c 93       	st	X, r24
			
			case GlobalMenuArrow3Select:
			//nothing to put here yet.
			break;
		}
		bottomEncoderLastValue = bottomEncoderValue;
     920:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <bottomEncoderValue>
     924:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <bottomEncoderLastValue>
		//menuSub=0;
	}
}
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	08 95       	ret

00000932 <initArrays>:
#include "globalVariables.h"
#include <string.h>

//takes an array less than 20 and fills it with blank characters
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	ec 01       	movw	r28, r24
	uint8_t lengthOfString = strlen(myString);
     93c:	fa 01       	movw	r30, r20
     93e:	01 90       	ld	r0, Z+
     940:	00 20       	and	r0, r0
     942:	e9 f7       	brne	.-6      	; 0x93e <initArrays+0xc>
     944:	31 97       	sbiw	r30, 0x01	; 1
     946:	8f 01       	movw	r16, r30
     948:	04 1b       	sub	r16, r20
     94a:	15 0b       	sbc	r17, r21
     94c:	90 2f       	mov	r25, r16
	uint8_t charLeft = 20 - lengthOfString;
     94e:	84 e1       	ldi	r24, 0x14	; 20
     950:	80 1b       	sub	r24, r16
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     952:	00 23       	and	r16, r16
     954:	a9 f0       	breq	.+42     	; 0x980 <initArrays+0x4e>
     956:	fa 01       	movw	r30, r20
     958:	25 e1       	ldi	r18, 0x15	; 21
     95a:	26 9f       	mul	r18, r22
     95c:	d0 01       	movw	r26, r0
     95e:	27 9f       	mul	r18, r23
     960:	b0 0d       	add	r27, r0
     962:	11 24       	eor	r1, r1
     964:	ac 0f       	add	r26, r28
     966:	bd 1f       	adc	r27, r29
     968:	2f ef       	ldi	r18, 0xFF	; 255
     96a:	20 0f       	add	r18, r16
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	2f 5f       	subi	r18, 0xFF	; 255
     970:	3f 4f       	sbci	r19, 0xFF	; 255
     972:	42 0f       	add	r20, r18
     974:	53 1f       	adc	r21, r19
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     976:	21 91       	ld	r18, Z+
     978:	2d 93       	st	X+, r18
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
	uint8_t lengthOfString = strlen(myString);
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     97a:	e4 17       	cp	r30, r20
     97c:	f5 07       	cpc	r31, r21
     97e:	d9 f7       	brne	.-10     	; 0x976 <initArrays+0x44>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     980:	88 23       	and	r24, r24
     982:	89 f0       	breq	.+34     	; 0x9a6 <initArrays+0x74>
	{
		myArray[stringNumber][currentIndex] = ' ';
     984:	45 e1       	ldi	r20, 0x15	; 21
     986:	46 9f       	mul	r20, r22
     988:	90 01       	movw	r18, r0
     98a:	47 9f       	mul	r20, r23
     98c:	30 0d       	add	r19, r0
     98e:	11 24       	eor	r1, r1
     990:	c2 0f       	add	r28, r18
     992:	d3 1f       	adc	r29, r19
     994:	08 0f       	add	r16, r24
     996:	80 e2       	ldi	r24, 0x20	; 32
     998:	fe 01       	movw	r30, r28
     99a:	e9 0f       	add	r30, r25
     99c:	f1 1d       	adc	r31, r1
     99e:	80 83       	st	Z, r24
		currentIndex++;
     9a0:	9f 5f       	subi	r25, 0xFF	; 255
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     9a2:	90 13       	cpse	r25, r16
     9a4:	f9 cf       	rjmp	.-14     	; 0x998 <initArrays+0x66>
	{
		myArray[stringNumber][currentIndex] = ' ';
		currentIndex++;
	}
}
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	08 95       	ret

000009b0 <initBank>:

void initBank(Pattern *currentInitPattern)
{
     9b0:	ac 01       	movw	r20, r24
     9b2:	fc 01       	movw	r30, r24
     9b4:	e8 57       	subi	r30, 0x78	; 120
     9b6:	ff 4f       	sbci	r31, 0xFF	; 255
	for(uint8_t i = 0; i<16; i++)
     9b8:	90 e0       	ldi	r25, 0x00	; 0
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
    currentInitPattern->trackPlayMode[i] = 0x01;
     9ba:	21 e0       	ldi	r18, 0x01	; 1

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
     9bc:	9f 5f       	subi	r25, 0xFF	; 255
     9be:	90 a3       	std	Z+32, r25	; 0x20
    currentInitPattern->trackPlayMode[i] = 0x01;
     9c0:	21 93       	st	Z+, r18
	}
}

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
     9c2:	90 31       	cpi	r25, 0x10	; 16
     9c4:	d9 f7       	brne	.-10     	; 0x9bc <initBank+0xc>
     9c6:	fa 01       	movw	r30, r20
     9c8:	e5 51       	subi	r30, 0x15	; 21
     9ca:	ff 4f       	sbci	r31, 0xFF	; 255
     9cc:	9a 01       	movw	r18, r20
     9ce:	25 59       	subi	r18, 0x95	; 149
     9d0:	3e 4f       	sbci	r19, 0xFE	; 254
    currentInitPattern->trackPlayMode[i] = 0x01;
  }
  
  for(uint8_t j = 0; j<64; j++)
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     9d2:	11 92       	st	Z+, r1
     9d4:	11 92       	st	Z+, r1
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
    currentInitPattern->trackPlayMode[i] = 0x01;
  }
  
  for(uint8_t j = 0; j<64; j++)
     9d6:	e2 17       	cp	r30, r18
     9d8:	f3 07       	cpc	r31, r19
     9da:	d9 f7       	brne	.-10     	; 0x9d2 <initBank+0x22>
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
 
  }
  //We need to take these and put them in global. 
  currentInitPattern->patternBPM = 120;
     9dc:	fa 01       	movw	r30, r20
     9de:	e8 53       	subi	r30, 0x38	; 56
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	88 e7       	ldi	r24, 0x78	; 120
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	91 83       	std	Z+1, r25	; 0x01
     9e8:	80 83       	st	Z, r24
  currentInitPattern->numSteps = 16;
     9ea:	32 96       	adiw	r30, 0x02	; 2
     9ec:	80 e1       	ldi	r24, 0x10	; 16
     9ee:	80 83       	st	Z, r24
     9f0:	08 95       	ret

000009f2 <initGlobals>:
}

void initGlobals(Globals *currentGlobals, uint8_t factoryReset)
{
     9f2:	fc 01       	movw	r30, r24
		currentGlobals->currentTrigButtons=0; //current state of Trig buttons.
     9f4:	11 82       	std	Z+1, r1	; 0x01
     9f6:	10 82       	st	Z, r1
		currentGlobals->currentGPButtons=0; //current state of GP buttons
     9f8:	12 82       	std	Z+2, r1	; 0x02
		currentGlobals->currentPatternNumber=0; //current pattern, between 1 and 256
     9fa:	13 82       	std	Z+3, r1	; 0x03
		currentGlobals->currentStep=0; // current step in the sequencer
     9fc:	14 82       	std	Z+4, r1	; 0x04
		currentGlobals->currentTrack=0; //current track being edited
     9fe:	15 82       	std	Z+5, r1	; 0x05
		currentGlobals->menuState=0; //where the menu is currently
     a00:	16 82       	std	Z+6, r1	; 0x06
		currentGlobals->playState=0; //whether the sequencer is playing, stopped, or paused.
     a02:	17 82       	std	Z+7, r1	; 0x07
		currentGlobals->factoryReset=0; //we may not need this in this struct, but good to have for now.
     a04:	10 86       	std	Z+8, r1	; 0x08
		currentGlobals->buttonSwitchFlag=0; // could be rolled into value bits.
     a06:	11 86       	std	Z+9, r1	; 0x09
		currentGlobals->valueChangeFlag=0; //bit 0 -> changes in encoders, bit 1-> changes in buttons, bit2 -> changes in knobs
     a08:	12 86       	std	Z+10, r1	; 0x0a
		currentGlobals->knobStatus=0; //top 4 bits: knob type, bottom 4 bits: knob location.
     a0a:	13 86       	std	Z+11, r1	; 0x0b
		
		if(factoryReset==1)
     a0c:	61 30       	cpi	r22, 0x01	; 1
     a0e:	09 f5       	brne	.+66     	; 0xa52 <initGlobals+0x60>
		{
			currentGlobals->midiChannel=0;
     a10:	14 86       	std	Z+12, r1	; 0x0c
			currentGlobals->midiTrackNote[0] = 0x24;
     a12:	84 e2       	ldi	r24, 0x24	; 36
     a14:	85 87       	std	Z+13, r24	; 0x0d
			currentGlobals->midiTrackNote[1] = 0x25;
     a16:	85 e2       	ldi	r24, 0x25	; 37
     a18:	86 87       	std	Z+14, r24	; 0x0e
			currentGlobals->midiTrackNote[2] = 0x26;
     a1a:	86 e2       	ldi	r24, 0x26	; 38
     a1c:	87 87       	std	Z+15, r24	; 0x0f
			currentGlobals->midiTrackNote[3] = 0x27;
     a1e:	87 e2       	ldi	r24, 0x27	; 39
     a20:	80 8b       	std	Z+16, r24	; 0x10
			currentGlobals->midiTrackNote[4] = 0x28;
     a22:	88 e2       	ldi	r24, 0x28	; 40
     a24:	81 8b       	std	Z+17, r24	; 0x11
			currentGlobals->midiTrackNote[5] = 0x29;
     a26:	89 e2       	ldi	r24, 0x29	; 41
     a28:	82 8b       	std	Z+18, r24	; 0x12
			currentGlobals->midiTrackNote[6] = 0x2a;
     a2a:	8a e2       	ldi	r24, 0x2A	; 42
     a2c:	83 8b       	std	Z+19, r24	; 0x13
			currentGlobals->midiTrackNote[7] = 0x2b;
     a2e:	8b e2       	ldi	r24, 0x2B	; 43
     a30:	84 8b       	std	Z+20, r24	; 0x14
			currentGlobals->midiTrackNote[8] = 0x2c;
     a32:	8c e2       	ldi	r24, 0x2C	; 44
     a34:	85 8b       	std	Z+21, r24	; 0x15
			currentGlobals->midiTrackNote[9] = 0x2d;
     a36:	8d e2       	ldi	r24, 0x2D	; 45
     a38:	86 8b       	std	Z+22, r24	; 0x16
			currentGlobals->midiTrackNote[10] = 0x2e;
     a3a:	8e e2       	ldi	r24, 0x2E	; 46
     a3c:	87 8b       	std	Z+23, r24	; 0x17
			currentGlobals->midiTrackNote[11] = 0x2f;
     a3e:	8f e2       	ldi	r24, 0x2F	; 47
     a40:	80 8f       	std	Z+24, r24	; 0x18
			currentGlobals->midiTrackNote[12] = 0x30;
     a42:	80 e3       	ldi	r24, 0x30	; 48
     a44:	81 8f       	std	Z+25, r24	; 0x19
			currentGlobals->midiTrackNote[13] = 0x31;
     a46:	81 e3       	ldi	r24, 0x31	; 49
     a48:	82 8f       	std	Z+26, r24	; 0x1a
			currentGlobals->midiTrackNote[14] = 0x32;
     a4a:	82 e3       	ldi	r24, 0x32	; 50
     a4c:	83 8f       	std	Z+27, r24	; 0x1b
			currentGlobals->midiTrackNote[15] = 0x33;
     a4e:	83 e3       	ldi	r24, 0x33	; 51
     a50:	84 8f       	std	Z+28, r24	; 0x1c
     a52:	08 95       	ret

00000a54 <startADCConversion>:



uint8_t startADCConversion()
{
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     a54:	ea e7       	ldi	r30, 0x7A	; 122
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	80 64       	ori	r24, 0x40	; 64
     a5c:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     a5e:	80 81       	ld	r24, Z
     a60:	86 fd       	sbrc	r24, 6
     a62:	fd cf       	rjmp	.-6      	; 0xa5e <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.	
     a64:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
     a68:	08 95       	ret

00000a6a <initADC>:

void initADC()
{
	DDRF |= 0B00000111; //init pins F2, 1, and 0 as select pins on the external mux.
     a6a:	80 b3       	in	r24, 0x10	; 16
     a6c:	87 60       	ori	r24, 0x07	; 7
     a6e:	80 bb       	out	0x10, r24	; 16
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     a70:	80 e2       	ldi	r24, 0x20	; 32
     a72:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     a76:	87 e8       	ldi	r24, 0x87	; 135
     a78:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     a7c:	88 e0       	ldi	r24, 0x08	; 8
     a7e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     a82:	8f ef       	ldi	r24, 0xFF	; 255
     a84:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     a88:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     a8c:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <knobBufferCounter>
	startADCConversion();
     a90:	e1 cf       	rjmp	.-62     	; 0xa54 <startADCConversion>
     a92:	08 95       	ret

00000a94 <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     a94:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     a96:	98 2f       	mov	r25, r24
     a98:	96 95       	lsr	r25
     a9a:	96 95       	lsr	r25
     a9c:	2f e2       	ldi	r18, 0x2F	; 47
     a9e:	92 9f       	mul	r25, r18
     aa0:	91 2d       	mov	r25, r1
     aa2:	11 24       	eor	r1, r1
     aa4:	96 95       	lsr	r25
     aa6:	2c e2       	ldi	r18, 0x2C	; 44
     aa8:	92 9f       	mul	r25, r18
     aaa:	80 19       	sub	r24, r0
     aac:	11 24       	eor	r1, r1
     aae:	98 2f       	mov	r25, r24
	if(select<40)
     ab0:	88 32       	cpi	r24, 0x28	; 40
     ab2:	70 f4       	brcc	.+28     	; 0xad0 <selectKnob+0x3c>
	{
		ADCSRB = (1 << MUX5);
     ab4:	88 e0       	ldi	r24, 0x08	; 8
     ab6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     aba:	c9 2f       	mov	r28, r25
     abc:	c7 70       	andi	r28, 0x07	; 7
		//uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     abe:	96 95       	lsr	r25
     ac0:	96 95       	lsr	r25
     ac2:	96 95       	lsr	r25
     ac4:	90 62       	ori	r25, 0x20	; 32
     ac6:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     aca:	c4 df       	rcall	.-120    	; 0xa54 <startADCConversion>
		

		//then the external multiplexer
		PORTF = muxSelect;
     acc:	c1 bb       	out	0x11, r28	; 17
     ace:	20 c0       	rjmp	.+64     	; 0xb10 <selectKnob+0x7c>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     ad0:	89 32       	cpi	r24, 0x29	; 41
     ad2:	71 f0       	breq	.+28     	; 0xaf0 <selectKnob+0x5c>
     ad4:	18 f4       	brcc	.+6      	; 0xadc <selectKnob+0x48>
     ad6:	88 32       	cpi	r24, 0x28	; 40
     ad8:	31 f0       	breq	.+12     	; 0xae6 <selectKnob+0x52>
     ada:	1a c0       	rjmp	.+52     	; 0xb10 <selectKnob+0x7c>
     adc:	8a 32       	cpi	r24, 0x2A	; 42
     ade:	69 f0       	breq	.+26     	; 0xafa <selectKnob+0x66>
     ae0:	8b 32       	cpi	r24, 0x2B	; 43
     ae2:	81 f0       	breq	.+32     	; 0xb04 <selectKnob+0x70>
     ae4:	15 c0       	rjmp	.+42     	; 0xb10 <selectKnob+0x7c>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     ae6:	85 e2       	ldi	r24, 0x25	; 37
     ae8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     aec:	b3 df       	rcall	.-154    	; 0xa54 <startADCConversion>
		break;
     aee:	10 c0       	rjmp	.+32     	; 0xb10 <selectKnob+0x7c>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     af0:	86 e2       	ldi	r24, 0x26	; 38
     af2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     af6:	ae df       	rcall	.-164    	; 0xa54 <startADCConversion>
		break;
     af8:	0b c0       	rjmp	.+22     	; 0xb10 <selectKnob+0x7c>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     afa:	87 e2       	ldi	r24, 0x27	; 39
     afc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     b00:	a9 df       	rcall	.-174    	; 0xa54 <startADCConversion>
		break;
     b02:	06 c0       	rjmp	.+12     	; 0xb10 <selectKnob+0x7c>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     b04:	80 e2       	ldi	r24, 0x20	; 32
     b06:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     b0a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     b0e:	a2 df       	rcall	.-188    	; 0xa54 <startADCConversion>
		break;
		}
	
	}
	
}
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <updateKnob>:

void updateKnob(uint8_t select, Globals *currentGlobals)
{
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	8b 01       	movw	r16, r22
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
     b1e:	c8 2f       	mov	r28, r24
     b20:	d0 e0       	ldi	r29, 0x00	; 0
     b22:	98 df       	rcall	.-208    	; 0xa54 <startADCConversion>
     b24:	f8 01       	movw	r30, r16
     b26:	ec 0f       	add	r30, r28
     b28:	fd 1f       	adc	r31, r29
     b2a:	85 8f       	std	Z+29, r24	; 0x1d
		currentGlobals->filteredKnobBuffer[select] = 
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
     b2c:	e7 5b       	subi	r30, 0xB7	; 183
     b2e:	ff 4f       	sbci	r31, 0xFF	; 255
     b30:	40 81       	ld	r20, Z

void updateKnob(uint8_t select, Globals *currentGlobals)
{
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
		currentGlobals->filteredKnobBuffer[select] = 
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	84 1b       	sub	r24, r20
     b36:	91 09       	sbc	r25, r1
     b38:	9c 01       	movw	r18, r24
     b3a:	12 f4       	brpl	.+4      	; 0xb40 <updateKnob+0x2c>
     b3c:	2f 5f       	subi	r18, 0xFF	; 255
     b3e:	3f 4f       	sbci	r19, 0xFF	; 255
     b40:	35 95       	asr	r19
     b42:	27 95       	ror	r18
     b44:	24 0f       	add	r18, r20
     b46:	20 83       	st	Z, r18
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	08 95       	ret

00000b52 <initializeKnob>:
void initializeKnob(Globals *currentGlobals)
{
     b52:	fc 01       	movw	r30, r24
     b54:	e7 5b       	subi	r30, 0xB7	; 183
     b56:	ff 4f       	sbci	r31, 0xFF	; 255
     b58:	9c 01       	movw	r18, r24
     b5a:	2b 58       	subi	r18, 0x8B	; 139
     b5c:	3f 4f       	sbci	r19, 0xFF	; 255
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
     b5e:	91 91       	ld	r25, Z+
     b60:	93 a7       	std	Z+43, r25	; 0x2b
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
void initializeKnob(Globals *currentGlobals)
{
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
     b62:	e2 17       	cp	r30, r18
     b64:	f3 07       	cpc	r31, r19
     b66:	d9 f7       	brne	.-10     	; 0xb5e <initializeKnob+0xc>
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
	}
}
     b68:	08 95       	ret

00000b6a <interperetKnob>:

void interperetKnob(uint8_t select, Pattern *currentKnobPattern, Globals *currentGlobals)
{//this function will compare outputs, and write to our struct.
     b6a:	4f 92       	push	r4
     b6c:	5f 92       	push	r5
     b6e:	6f 92       	push	r6
     b70:	7f 92       	push	r7
     b72:	cf 92       	push	r12
     b74:	df 92       	push	r13
     b76:	ef 92       	push	r14
     b78:	ff 92       	push	r15
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
	select = select%44;
     b82:	98 2f       	mov	r25, r24
     b84:	96 95       	lsr	r25
     b86:	96 95       	lsr	r25
     b88:	ef e2       	ldi	r30, 0x2F	; 47
     b8a:	9e 9f       	mul	r25, r30
     b8c:	e1 2d       	mov	r30, r1
     b8e:	11 24       	eor	r1, r1
     b90:	9e 2f       	mov	r25, r30
     b92:	96 95       	lsr	r25
     b94:	2c e2       	ldi	r18, 0x2C	; 44
     b96:	92 9f       	mul	r25, r18
     b98:	80 19       	sub	r24, r0
     b9a:	11 24       	eor	r1, r1
     b9c:	98 2f       	mov	r25, r24
	
	if (select<40)
     b9e:	88 32       	cpi	r24, 0x28	; 40
     ba0:	08 f0       	brcs	.+2      	; 0xba4 <interperetKnob+0x3a>
     ba2:	80 c1       	rjmp	.+768    	; 0xea4 <interperetKnob+0x33a>
	{
		uint8_t positionSelect = select%8;
     ba4:	d8 2f       	mov	r29, r24
     ba6:	d7 70       	andi	r29, 0x07	; 7
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
		uint8_t bankSwitch = select/8;
     ba8:	86 95       	lsr	r24
     baa:	86 95       	lsr	r24
     bac:	86 95       	lsr	r24
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
     bae:	da 01       	movw	r26, r20
     bb0:	19 96       	adiw	r26, 0x09	; 9
     bb2:	2c 91       	ld	r18, X
     bb4:	20 ff       	sbrs	r18, 0
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <interperetKnob+0x54>
		{
			positionSelectTracks=positionSelectTracks+8;
     bb8:	c8 e0       	ldi	r28, 0x08	; 8
     bba:	cd 0f       	add	r28, r29
     bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <interperetKnob+0x56>
	select = select%44;
	
	if (select<40)
	{
		uint8_t positionSelect = select%8;
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
     bbe:	cd 2f       	mov	r28, r29
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
		{
			positionSelectTracks=positionSelectTracks+8;
		}
		
		switch (bankSwitch){
     bc0:	82 30       	cpi	r24, 0x02	; 2
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <interperetKnob+0x5c>
     bc4:	a2 c0       	rjmp	.+324    	; 0xd0a <interperetKnob+0x1a0>
     bc6:	7a 01       	movw	r14, r20
     bc8:	6b 01       	movw	r12, r22
     bca:	83 30       	cpi	r24, 0x03	; 3
     bcc:	30 f4       	brcc	.+12     	; 0xbda <interperetKnob+0x70>
     bce:	88 23       	and	r24, r24
     bd0:	59 f0       	breq	.+22     	; 0xbe8 <interperetKnob+0x7e>
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <interperetKnob+0x6e>
     bd6:	69 c0       	rjmp	.+210    	; 0xcaa <interperetKnob+0x140>
     bd8:	83 c1       	rjmp	.+774    	; 0xee0 <interperetKnob+0x376>
     bda:	83 30       	cpi	r24, 0x03	; 3
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <interperetKnob+0x76>
     bde:	bf c0       	rjmp	.+382    	; 0xd5e <interperetKnob+0x1f4>
     be0:	84 30       	cpi	r24, 0x04	; 4
     be2:	09 f4       	brne	.+2      	; 0xbe6 <interperetKnob+0x7c>
     be4:	e2 c0       	rjmp	.+452    	; 0xdaa <interperetKnob+0x240>
     be6:	7c c1       	rjmp	.+760    	; 0xee0 <interperetKnob+0x376>
			uint8_t newRead = 0;
			case 0:; //outputVolume
			
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
     be8:	09 2f       	mov	r16, r25
     bea:	10 e0       	ldi	r17, 0x00	; 0
     bec:	ca 01       	movw	r24, r20
     bee:	80 0f       	add	r24, r16
     bf0:	91 1f       	adc	r25, r17
     bf2:	fc 01       	movw	r30, r24
     bf4:	eb 58       	subi	r30, 0x8B	; 139
     bf6:	ff 4f       	sbci	r31, 0xFF	; 255
     bf8:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
     bfa:	bc 97       	sbiw	r30, 0x2c	; 44
     bfc:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
     bfe:	26 17       	cp	r18, r22
     c00:	20 f4       	brcc	.+8      	; 0xc0a <interperetKnob+0xa0>
	{
		returnMe = v1-v2;
     c02:	b6 2f       	mov	r27, r22
     c04:	b2 1b       	sub	r27, r18
     c06:	2b 2f       	mov	r18, r27
     c08:	01 c0       	rjmp	.+2      	; 0xc0c <interperetKnob+0xa2>
	}
	else
	{
		returnMe = v2-v1;
     c0a:	26 1b       	sub	r18, r22
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];

			if(checkVariation(newRead,prevRead)>2)
     c0c:	23 30       	cpi	r18, 0x03	; 3
     c0e:	08 f4       	brcc	.+2      	; 0xc12 <interperetKnob+0xa8>
     c10:	67 c1       	rjmp	.+718    	; 0xee0 <interperetKnob+0x376>
			{
				
				int16_t negCheckValue = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 28 19 	call	0x3250	; 0x3250 <__floatsisf>
     c1c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <volumeDivisor>
     c20:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <volumeDivisor+0x1>
     c24:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <volumeDivisor+0x2>
     c28:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <volumeDivisor+0x3>
     c2c:	0e 94 8d 18 	call	0x311a	; 0x311a <__divsf3>
     c30:	2b 01       	movw	r4, r22
     c32:	3c 01       	movw	r6, r24
     c34:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <NegativeOffset>
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 28 19 	call	0x3250	; 0x3250 <__floatsisf>
     c42:	9b 01       	movw	r18, r22
     c44:	ac 01       	movw	r20, r24
     c46:	c3 01       	movw	r24, r6
     c48:	b2 01       	movw	r22, r4
     c4a:	0e 94 28 18 	call	0x3050	; 0x3050 <__subsf3>
     c4e:	0e 94 f5 18 	call	0x31ea	; 0x31ea <__fixsfsi>
     c52:	86 2f       	mov	r24, r22
     c54:	26 2f       	mov	r18, r22
     c56:	37 2f       	mov	r19, r23
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     c58:	f7 01       	movw	r30, r14
     c5a:	92 85       	ldd	r25, Z+10	; 0x0a
     c5c:	94 60       	ori	r25, 0x04	; 4
     c5e:	92 87       	std	Z+10, r25	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value 
     c60:	d3 87       	std	Z+11, r29	; 0x0b
				
				currentKnobPattern->outputLevelLSB[positionSelect] = (negCheckValue);
     c62:	6d 2f       	mov	r22, r29
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	f6 01       	movw	r30, r12
     c68:	e6 0f       	add	r30, r22
     c6a:	f7 1f       	adc	r31, r23
     c6c:	80 87       	std	Z+8, r24	; 0x08
				if(negCheckValue>(-1))
     c6e:	33 23       	and	r19, r19
     c70:	2c f0       	brlt	.+10     	; 0xc7c <interperetKnob+0x112>
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 0;	
     c72:	f6 01       	movw	r30, r12
     c74:	e6 0f       	add	r30, r22
     c76:	f7 1f       	adc	r31, r23
     c78:	10 82       	st	Z, r1
     c7a:	05 c0       	rjmp	.+10     	; 0xc86 <interperetKnob+0x11c>
				}else
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 255;
     c7c:	9f ef       	ldi	r25, 0xFF	; 255
     c7e:	f6 01       	movw	r30, r12
     c80:	e6 0f       	add	r30, r22
     c82:	f7 1f       	adc	r31, r23
     c84:	90 83       	st	Z, r25
				}
				setOutputVolume(currentKnobPattern->outputLevelLSB[positionSelect], currentKnobPattern->outputLevelMSB[positionSelect], positionSelect);
     c86:	f6 01       	movw	r30, r12
     c88:	e6 0f       	add	r30, r22
     c8a:	f7 1f       	adc	r31, r23
     c8c:	4d 2f       	mov	r20, r29
     c8e:	60 81       	ld	r22, Z
     c90:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <setOutputVolume>
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     c94:	e7 01       	movw	r28, r14
     c96:	c0 0f       	add	r28, r16
     c98:	d1 1f       	adc	r29, r17
     c9a:	fe 01       	movw	r30, r28
     c9c:	eb 58       	subi	r30, 0x8B	; 139
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	c7 5b       	subi	r28, 0xB7	; 183
     ca2:	df 4f       	sbci	r29, 0xFF	; 255
     ca4:	88 81       	ld	r24, Y
     ca6:	80 83       	st	Z, r24
     ca8:	1b c1       	rjmp	.+566    	; 0xee0 <interperetKnob+0x376>
			}
			break;
			
 			case 1: //pitch
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
     caa:	89 2f       	mov	r24, r25
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	9a 01       	movw	r18, r20
     cb0:	28 0f       	add	r18, r24
     cb2:	39 1f       	adc	r19, r25
     cb4:	f9 01       	movw	r30, r18
     cb6:	e7 5b       	subi	r30, 0xB7	; 183
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	40 81       	ld	r20, Z
     cbc:	bc 96       	adiw	r30, 0x2c	; 44
     cbe:	20 81       	ld	r18, Z
     cc0:	24 17       	cp	r18, r20
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <interperetKnob+0x15c>
     cc4:	0d c1       	rjmp	.+538    	; 0xee0 <interperetKnob+0x376>
 			{
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     cc6:	d7 01       	movw	r26, r14
     cc8:	1a 96       	adiw	r26, 0x0a	; 10
     cca:	2c 91       	ld	r18, X
     ccc:	1a 97       	sbiw	r26, 0x0a	; 10
     cce:	24 60       	ori	r18, 0x04	; 4
     cd0:	1a 96       	adiw	r26, 0x0a	; 10
     cd2:	2c 93       	st	X, r18
     cd4:	1a 97       	sbiw	r26, 0x0a	; 10
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     cd6:	2d 2f       	mov	r18, r29
     cd8:	20 61       	ori	r18, 0x10	; 16
     cda:	1b 96       	adiw	r26, 0x0b	; 11
     cdc:	2c 93       	st	X, r18
 				currentKnobPattern->outputPitch[positionSelect] = (currentGlobals->filteredKnobBuffer[select]^128);
     cde:	fb 01       	movw	r30, r22
     ce0:	ed 0f       	add	r30, r29
     ce2:	f1 1d       	adc	r31, r1
     ce4:	40 58       	subi	r20, 0x80	; 128
     ce6:	40 8b       	std	Z+16, r20	; 0x10
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     ce8:	8e 0d       	add	r24, r14
     cea:	9f 1d       	adc	r25, r15
     cec:	9c 01       	movw	r18, r24
     cee:	2b 58       	subi	r18, 0x8B	; 139
     cf0:	3f 4f       	sbci	r19, 0xFF	; 255
     cf2:	87 5b       	subi	r24, 0xB7	; 183
     cf4:	9f 4f       	sbci	r25, 0xFF	; 255
     cf6:	dc 01       	movw	r26, r24
     cf8:	8c 91       	ld	r24, X
     cfa:	d9 01       	movw	r26, r18
     cfc:	8c 93       	st	X, r24
				outputSampleRate(positionSelect, 0, currentKnobPattern->outputPitch[positionSelect]);
     cfe:	40 89       	ldd	r20, Z+16	; 0x10
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	8d 2f       	mov	r24, r29
     d04:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <outputSampleRate>
     d08:	eb c0       	rjmp	.+470    	; 0xee0 <interperetKnob+0x376>
 			}
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
     d0a:	e9 2f       	mov	r30, r25
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	ca 01       	movw	r24, r20
     d10:	8e 0f       	add	r24, r30
     d12:	9f 1f       	adc	r25, r31
     d14:	dc 01       	movw	r26, r24
     d16:	a7 5b       	subi	r26, 0xB7	; 183
     d18:	bf 4f       	sbci	r27, 0xFF	; 255
     d1a:	2c 91       	ld	r18, X
     d1c:	9c 96       	adiw	r26, 0x2c	; 44
     d1e:	8c 91       	ld	r24, X
     d20:	82 17       	cp	r24, r18
     d22:	09 f4       	brne	.+2      	; 0xd26 <interperetKnob+0x1bc>
     d24:	dd c0       	rjmp	.+442    	; 0xee0 <interperetKnob+0x376>
			{
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     d26:	da 01       	movw	r26, r20
     d28:	1a 96       	adiw	r26, 0x0a	; 10
     d2a:	8c 91       	ld	r24, X
     d2c:	1a 97       	sbiw	r26, 0x0a	; 10
     d2e:	84 60       	ori	r24, 0x04	; 4
     d30:	1a 96       	adiw	r26, 0x0a	; 10
     d32:	8c 93       	st	X, r24
     d34:	1a 97       	sbiw	r26, 0x0a	; 10
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
     d36:	8d 2f       	mov	r24, r29
     d38:	80 62       	ori	r24, 0x20	; 32
     d3a:	1b 96       	adiw	r26, 0x0b	; 11
     d3c:	8c 93       	st	X, r24
				
				//we will eventually need a switch to write to the MSB also, for both attack and release.
				currentKnobPattern->trackAttackTimeLSB[positionSelectTracks] = (currentGlobals->filteredKnobBuffer[select]);
     d3e:	6c 0f       	add	r22, r28
     d40:	71 1d       	adc	r23, r1
     d42:	db 01       	movw	r26, r22
     d44:	a8 5a       	subi	r26, 0xA8	; 168
     d46:	bf 4f       	sbci	r27, 0xFF	; 255
     d48:	2c 93       	st	X, r18
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     d4a:	e4 0f       	add	r30, r20
     d4c:	f5 1f       	adc	r31, r21
     d4e:	df 01       	movw	r26, r30
     d50:	ab 58       	subi	r26, 0x8B	; 139
     d52:	bf 4f       	sbci	r27, 0xFF	; 255
     d54:	e7 5b       	subi	r30, 0xB7	; 183
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	80 81       	ld	r24, Z
     d5a:	8c 93       	st	X, r24
     d5c:	c1 c0       	rjmp	.+386    	; 0xee0 <interperetKnob+0x376>
			}
			break;
 			
 			case 3:
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
     d5e:	29 2f       	mov	r18, r25
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	ca 01       	movw	r24, r20
     d64:	82 0f       	add	r24, r18
     d66:	93 1f       	adc	r25, r19
     d68:	fc 01       	movw	r30, r24
     d6a:	e7 5b       	subi	r30, 0xB7	; 183
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	40 81       	ld	r20, Z
     d70:	bc 96       	adiw	r30, 0x2c	; 44
     d72:	80 81       	ld	r24, Z
     d74:	84 17       	cp	r24, r20
     d76:	09 f4       	brne	.+2      	; 0xd7a <interperetKnob+0x210>
     d78:	b3 c0       	rjmp	.+358    	; 0xee0 <interperetKnob+0x376>
 			{
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     d7a:	f7 01       	movw	r30, r14
     d7c:	82 85       	ldd	r24, Z+10	; 0x0a
     d7e:	84 60       	ori	r24, 0x04	; 4
     d80:	82 87       	std	Z+10, r24	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     d82:	8d 2f       	mov	r24, r29
     d84:	80 63       	ori	r24, 0x30	; 48
     d86:	83 87       	std	Z+11, r24	; 0x0b
 				currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks] = currentGlobals->filteredKnobBuffer[select];
     d88:	cc 0e       	add	r12, r28
     d8a:	d1 1c       	adc	r13, r1
     d8c:	f6 01       	movw	r30, r12
     d8e:	e8 58       	subi	r30, 0x88	; 136
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	40 83       	st	Z, r20
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     d94:	2e 0d       	add	r18, r14
     d96:	3f 1d       	adc	r19, r15
     d98:	f9 01       	movw	r30, r18
     d9a:	eb 58       	subi	r30, 0x8B	; 139
     d9c:	ff 4f       	sbci	r31, 0xFF	; 255
     d9e:	d9 01       	movw	r26, r18
     da0:	a7 5b       	subi	r26, 0xB7	; 183
     da2:	bf 4f       	sbci	r27, 0xFF	; 255
     da4:	8c 91       	ld	r24, X
     da6:	80 83       	st	Z, r24
     da8:	9b c0       	rjmp	.+310    	; 0xee0 <interperetKnob+0x376>
 			}
 			break;
 			
 			case 4:;
 			//int16_t currentTrackValue = ((currentKnobPattern->trackMainVolumeMSB[positionSelectTracks]<<8)|(currentKnobPattern->trackMainVolumeLSB[positionSelectTracks]));
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
     daa:	09 2f       	mov	r16, r25
     dac:	10 e0       	ldi	r17, 0x00	; 0
     dae:	ca 01       	movw	r24, r20
     db0:	80 0f       	add	r24, r16
     db2:	91 1f       	adc	r25, r17
     db4:	fc 01       	movw	r30, r24
     db6:	eb 58       	subi	r30, 0x8B	; 139
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
     dbc:	bc 97       	sbiw	r30, 0x2c	; 44
     dbe:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
     dc0:	26 17       	cp	r18, r22
     dc2:	20 f4       	brcc	.+8      	; 0xdcc <interperetKnob+0x262>
	{
		returnMe = v1-v2;
     dc4:	f6 2f       	mov	r31, r22
     dc6:	f2 1b       	sub	r31, r18
     dc8:	2f 2f       	mov	r18, r31
     dca:	01 c0       	rjmp	.+2      	; 0xdce <interperetKnob+0x264>
	}
	else
	{
		returnMe = v2-v1;
     dcc:	26 1b       	sub	r18, r22
 			
 			case 4:;
 			//int16_t currentTrackValue = ((currentKnobPattern->trackMainVolumeMSB[positionSelectTracks]<<8)|(currentKnobPattern->trackMainVolumeLSB[positionSelectTracks]));
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];
 			if(checkVariation(newRead,prevRead)>2)
     dce:	23 30       	cpi	r18, 0x03	; 3
     dd0:	08 f4       	brcc	.+2      	; 0xdd4 <interperetKnob+0x26a>
     dd2:	86 c0       	rjmp	.+268    	; 0xee0 <interperetKnob+0x376>
 			{
				int16_t negCheckValueTrack = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 28 19 	call	0x3250	; 0x3250 <__floatsisf>
     dde:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <volumeDivisor>
     de2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <volumeDivisor+0x1>
     de6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <volumeDivisor+0x2>
     dea:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <volumeDivisor+0x3>
     dee:	0e 94 8d 18 	call	0x311a	; 0x311a <__divsf3>
     df2:	2b 01       	movw	r4, r22
     df4:	3c 01       	movw	r6, r24
     df6:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <NegativeOffset>
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 28 19 	call	0x3250	; 0x3250 <__floatsisf>
     e04:	9b 01       	movw	r18, r22
     e06:	ac 01       	movw	r20, r24
     e08:	c3 01       	movw	r24, r6
     e0a:	b2 01       	movw	r22, r4
     e0c:	0e 94 28 18 	call	0x3050	; 0x3050 <__subsf3>
     e10:	0e 94 f5 18 	call	0x31ea	; 0x31ea <__fixsfsi>
     e14:	86 2f       	mov	r24, r22
     e16:	97 2f       	mov	r25, r23
     e18:	9c 01       	movw	r18, r24
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     e1a:	d7 01       	movw	r26, r14
     e1c:	1a 96       	adiw	r26, 0x0a	; 10
     e1e:	8c 91       	ld	r24, X
     e20:	1a 97       	sbiw	r26, 0x0a	; 10
     e22:	84 60       	ori	r24, 0x04	; 4
     e24:	1a 96       	adiw	r26, 0x0a	; 10
     e26:	8c 93       	st	X, r24
     e28:	1a 97       	sbiw	r26, 0x0a	; 10
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     e2a:	8d 2f       	mov	r24, r29
     e2c:	80 64       	ori	r24, 0x40	; 64
     e2e:	1b 96       	adiw	r26, 0x0b	; 11
     e30:	8c 93       	st	X, r24
				
	 			currentKnobPattern->trackMainVolumeLSB[positionSelectTracks] = (negCheckValueTrack);
     e32:	d0 e0       	ldi	r29, 0x00	; 0
     e34:	f6 01       	movw	r30, r12
     e36:	ec 0f       	add	r30, r28
     e38:	fd 1f       	adc	r31, r29
     e3a:	60 af       	std	Z+56, r22	; 0x38
	 			if(negCheckValueTrack>(-1))
     e3c:	33 23       	and	r19, r19
     e3e:	2c f0       	brlt	.+10     	; 0xe4a <interperetKnob+0x2e0>
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 0;
     e40:	f6 01       	movw	r30, r12
     e42:	ec 0f       	add	r30, r28
     e44:	fd 1f       	adc	r31, r29
     e46:	10 a6       	std	Z+40, r1	; 0x28
     e48:	05 c0       	rjmp	.+10     	; 0xe54 <interperetKnob+0x2ea>
	 			}else
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 255;
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	f6 01       	movw	r30, r12
     e4e:	ec 0f       	add	r30, r28
     e50:	fd 1f       	adc	r31, r29
     e52:	80 a7       	std	Z+40, r24	; 0x28
	 			}

				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     e54:	96 01       	movw	r18, r12
     e56:	2c 0f       	add	r18, r28
     e58:	3d 1f       	adc	r19, r29
     e5a:	f9 01       	movw	r30, r18
     e5c:	e8 5b       	subi	r30, 0xB8	; 184
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
				if(totalAttackTime==0) //we only want to set the track volume if the attack time is 0. otherwise, we have an envelope. 
     e60:	80 81       	ld	r24, Z
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	98 2f       	mov	r25, r24
     e66:	88 27       	eor	r24, r24
	 			}else
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 255;
	 			}

				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     e68:	70 96       	adiw	r30, 0x10	; 16
				if(totalAttackTime==0) //we only want to set the track volume if the attack time is 0. otherwise, we have an envelope. 
     e6a:	20 81       	ld	r18, Z
     e6c:	82 2b       	or	r24, r18
     e6e:	89 2b       	or	r24, r25
     e70:	71 f4       	brne	.+28     	; 0xe8e <interperetKnob+0x324>
				{
	 				setTrackVolume(currentKnobPattern->trackSampleLSB[positionSelectTracks], currentKnobPattern->trackSampleMSB[positionSelectTracks],
     e72:	cc 0d       	add	r28, r12
     e74:	dd 1d       	adc	r29, r13
     e76:	de 01       	movw	r26, r28
     e78:	a8 56       	subi	r26, 0x68	; 104
     e7a:	bf 4f       	sbci	r27, 0xFF	; 255
     e7c:	fe 01       	movw	r30, r28
     e7e:	e8 55       	subi	r30, 0x58	; 88
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	28 a5       	ldd	r18, Y+40	; 0x28
     e84:	46 2f       	mov	r20, r22
     e86:	6c 91       	ld	r22, X
     e88:	80 81       	ld	r24, Z
     e8a:	0e 94 80 13 	call	0x2700	; 0x2700 <setTrackVolume>
					currentKnobPattern->trackMainVolumeLSB[positionSelectTracks], currentKnobPattern->trackMainVolumeMSB[positionSelectTracks]);
				}
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select]; 
     e8e:	0e 0d       	add	r16, r14
     e90:	1f 1d       	adc	r17, r15
     e92:	f8 01       	movw	r30, r16
     e94:	eb 58       	subi	r30, 0x8B	; 139
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	d8 01       	movw	r26, r16
     e9a:	a7 5b       	subi	r26, 0xB7	; 183
     e9c:	bf 4f       	sbci	r27, 0xFF	; 255
     e9e:	8c 91       	ld	r24, X
     ea0:	80 83       	st	Z, r24
     ea2:	1e c0       	rjmp	.+60     	; 0xee0 <interperetKnob+0x376>
		}
		
		
	}else
	{
		switch (select)
     ea4:	8a 32       	cpi	r24, 0x2A	; 42
     ea6:	e1 f4       	brne	.+56     	; 0xee0 <interperetKnob+0x376>
// 			break;
// 			
 			case 42:
			 
			 //we need to do a bit more filtering here. Not sure if that's happening here, or in the actual knob read.
			 if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
     ea8:	fa 01       	movw	r30, r20
     eaa:	ed 58       	subi	r30, 0x8D	; 141
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	80 81       	ld	r24, Z
     eb0:	bc 96       	adiw	r30, 0x2c	; 44
     eb2:	90 81       	ld	r25, Z
     eb4:	98 17       	cp	r25, r24
     eb6:	a1 f0       	breq	.+40     	; 0xee0 <interperetKnob+0x376>
			{//not sure if this works here, but we're going to try it. 
				
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     eb8:	fa 01       	movw	r30, r20
     eba:	92 85       	ldd	r25, Z+10	; 0x0a
     ebc:	94 60       	ori	r25, 0x04	; 4
     ebe:	92 87       	std	Z+10, r25	; 0x0a
				currentGlobals->knobStatus = (5<<4); //since all other pot banks are 0-4, the next ones will be 5-8. We should maybe figure out a better system for this, 
     ec0:	90 e5       	ldi	r25, 0x50	; 80
     ec2:	93 87       	std	Z+11, r25	; 0x0b
				//maybe some defines?				
 				currentKnobPattern->patternBPM = currentGlobals->filteredKnobBuffer[select];
     ec4:	fb 01       	movw	r30, r22
     ec6:	e8 53       	subi	r30, 0x38	; 56
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	91 83       	std	Z+1, r25	; 0x01
     ece:	80 83       	st	Z, r24
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     ed0:	da 01       	movw	r26, r20
     ed2:	a1 56       	subi	r26, 0x61	; 97
     ed4:	bf 4f       	sbci	r27, 0xFF	; 255
     ed6:	fa 01       	movw	r30, r20
     ed8:	ed 58       	subi	r30, 0x8D	; 141
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	80 81       	ld	r24, Z
     ede:	8c 93       	st	X, r24
// 			break;
		}
		
	}

}
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	df 90       	pop	r13
     eee:	cf 90       	pop	r12
     ef0:	7f 90       	pop	r7
     ef2:	6f 90       	pop	r6
     ef4:	5f 90       	pop	r5
     ef6:	4f 90       	pop	r4
     ef8:	08 95       	ret

00000efa <listenKnobs>:

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	7c 01       	movw	r14, r24
     f06:	8b 01       	movw	r16, r22
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     f08:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
     f0a:	8c 2f       	mov	r24, r28
     f0c:	c3 dd       	rcall	.-1146   	; 0xa94 <selectKnob>
		updateKnob(loopCounter, currentGlobals);
     f0e:	b8 01       	movw	r22, r16
     f10:	8c 2f       	mov	r24, r28
     f12:	00 de       	rcall	.-1024   	; 0xb14 <updateKnob>
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
     f14:	a8 01       	movw	r20, r16
     f16:	b7 01       	movw	r22, r14
     f18:	8c 2f       	mov	r24, r28
     f1a:	27 de       	rcall	.-946    	; 0xb6a <interperetKnob>

}

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     f1c:	cf 5f       	subi	r28, 0xFF	; 255
     f1e:	cc 32       	cpi	r28, 0x2C	; 44
     f20:	a1 f7       	brne	.-24     	; 0xf0a <listenKnobs+0x10>
	{
		selectKnob(loopCounter);
		updateKnob(loopCounter, currentGlobals);
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
	}
}
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
     f2c:	08 95       	ret

00000f2e <initLEDs>:
extern Pattern currentPattern;
extern uint8_t currentStep;

void initLEDs()
{
	DDRG = 0B00000111; //outputs on G5,2, and 0.
     f2e:	87 e0       	ldi	r24, 0x07	; 7
     f30:	83 bb       	out	0x13, r24	; 19
     f32:	08 95       	ret

00000f34 <parseLEDs>:
}
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
     f34:	a2 98       	cbi	0x14, 2	; 20
     f36:	27 e0       	ldi	r18, 0x07	; 7
	for(uint8_t j=0; j<7; j++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
     f38:	a0 9a       	sbi	0x14, 0	; 20
		if(gpParse&0x80)
     f3a:	66 23       	and	r22, r22
     f3c:	14 f4       	brge	.+4      	; 0xf42 <parseLEDs+0xe>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
     f3e:	a1 9a       	sbi	0x14, 1	; 20
     f40:	01 c0       	rjmp	.+2      	; 0xf44 <parseLEDs+0x10>
		}
		else
		{
			PORTG &= (~(1 << PG1));
     f42:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
     f44:	a0 98       	cbi	0x14, 0	; 20
		gpParse = gpParse << 1;
     f46:	66 0f       	add	r22, r22
     f48:	21 50       	subi	r18, 0x01	; 1
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t j=0; j<7; j++)
     f4a:	b1 f7       	brne	.-20     	; 0xf38 <parseLEDs+0x4>
     f4c:	21 e1       	ldi	r18, 0x11	; 17
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
     f4e:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
     f50:	99 23       	and	r25, r25
     f52:	14 f4       	brge	.+4      	; 0xf58 <parseLEDs+0x24>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
     f54:	a1 9a       	sbi	0x14, 1	; 20
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <parseLEDs+0x26>
		}
		else
		{
			PORTG &= (~(1 << PG1));
     f58:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
     f5a:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	21 50       	subi	r18, 0x01	; 1
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
     f62:	a9 f7       	brne	.-22     	; 0xf4e <parseLEDs+0x1a>
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	
	
	PORTG |= (1 << PG2); //latch pin high
     f64:	a2 9a       	sbi	0x14, 2	; 20
     f66:	08 95       	ret

00000f68 <updateLEDs>:
}

void updateLEDs(Pattern ledCurrentPattern, Globals currentGlobals)
{
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	cf 58       	subi	r28, 0x8F	; 143
     f72:	de 4f       	sbci	r29, 0xFE	; 254
     f74:	28 81       	ld	r18, Y
     f76:	39 81       	ldd	r19, Y+1	; 0x01
     f78:	c1 57       	subi	r28, 0x71	; 113
     f7a:	d1 40       	sbci	r29, 0x01	; 1
     f7c:	cd 58       	subi	r28, 0x8D	; 141
     f7e:	de 4f       	sbci	r29, 0xFE	; 254
     f80:	68 81       	ld	r22, Y
     f82:	c3 57       	subi	r28, 0x73	; 115
     f84:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t shiftedState = currentGlobals.menuState >> 4; //this will get rid of EncoderB
	switch(shiftedState)
     f86:	c9 58       	subi	r28, 0x89	; 137
     f88:	de 4f       	sbci	r29, 0xFE	; 254
     f8a:	98 81       	ld	r25, Y
     f8c:	c7 57       	subi	r28, 0x77	; 119
     f8e:	d1 40       	sbci	r29, 0x01	; 1
     f90:	92 95       	swap	r25
     f92:	9f 70       	andi	r25, 0x0F	; 15
     f94:	91 30       	cpi	r25, 0x01	; 1
     f96:	49 f0       	breq	.+18     	; 0xfaa <updateLEDs+0x42>
     f98:	28 f0       	brcs	.+10     	; 0xfa4 <updateLEDs+0x3c>
     f9a:	92 30       	cpi	r25, 0x02	; 2
     f9c:	d1 f0       	breq	.+52     	; 0xfd2 <updateLEDs+0x6a>
     f9e:	93 30       	cpi	r25, 0x03	; 3
     fa0:	d9 f0       	breq	.+54     	; 0xfd8 <updateLEDs+0x70>
     fa2:	1c c0       	rjmp	.+56     	; 0xfdc <updateLEDs+0x74>
	{
		case 0:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
     fa4:	c9 01       	movw	r24, r18
     fa6:	c6 df       	rcall	.-116    	; 0xf34 <parseLEDs>
		break;
     fa8:	19 c0       	rjmp	.+50     	; 0xfdc <updateLEDs+0x74>

		case 1:
		parseLEDs(ledCurrentPattern.trackSequence[currentGlobals.currentStep], currentGlobals.currentGPButtons);
     faa:	cb 58       	subi	r28, 0x8B	; 139
     fac:	de 4f       	sbci	r29, 0xFE	; 254
     fae:	e8 81       	ld	r30, Y
     fb0:	c5 57       	subi	r28, 0x75	; 117
     fb2:	d1 40       	sbci	r29, 0x01	; 1
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	ee 0f       	add	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	86 e0       	ldi	r24, 0x06	; 6
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	8c 0f       	add	r24, r28
     fc0:	9d 1f       	adc	r25, r29
     fc2:	e8 0f       	add	r30, r24
     fc4:	f9 1f       	adc	r31, r25
     fc6:	e5 51       	subi	r30, 0x15	; 21
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	80 81       	ld	r24, Z
     fcc:	91 81       	ldd	r25, Z+1	; 0x01
     fce:	b2 df       	rcall	.-156    	; 0xf34 <parseLEDs>
		break;

		case 2:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
     fd0:	05 c0       	rjmp	.+10     	; 0xfdc <updateLEDs+0x74>
     fd2:	c9 01       	movw	r24, r18
		break;
     fd4:	af df       	rcall	.-162    	; 0xf34 <parseLEDs>

		case 3:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <updateLEDs+0x74>
     fd8:	c9 01       	movw	r24, r18
     fda:	ac df       	rcall	.-168    	; 0xf34 <parseLEDs>
		break;
	}

}
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <main>:
#include "sequencerLib.h"
#include "twiLib.h"
#include "midiLib.h"


int main(){
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	c7 50       	subi	r28, 0x07	; 7
     fec:	d6 40       	sbci	r29, 0x06	; 6
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
Pattern currentPattern;
Screen screenBank;
Globals currentGlobals;
uint8_t factoryReset=0; // set this to 1 if you would like to fill the eeprom with Factory data, and erase all user data.
	
	initScreen();
     ff8:	a2 d7       	rcall	.+3908   	; 0x1f3e <initScreen>
	initGlobals(&currentGlobals, factoryReset);  
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	ce 01       	movw	r24, r28
     ffe:	8f 5d       	subi	r24, 0xDF	; 223
    1000:	9a 4f       	sbci	r25, 0xFA	; 250
    1002:	f7 dc       	rcall	.-1554   	; 0x9f2 <initGlobals>
	initButtons();
    1004:	43 d9       	rcall	.-3450   	; 0x28c <initButtons>
	initLEDs();
    1006:	93 df       	rcall	.-218    	; 0xf2e <initLEDs>
	initEncoders();
    1008:	44 da       	rcall	.-2936   	; 0x492 <initEncoders>
	initADC();
    100a:	2f dd       	rcall	.-1442   	; 0xa6a <initADC>
    100c:	0e 94 2a 13 	call	0x2654	; 0x2654 <serialInit0>
	serialInit0();
    1010:	ef d6       	rcall	.+3550   	; 0x1df0 <initMidi>
	initMidi();
    1012:	0e 94 22 12 	call	0x2444	; 0x2444 <initSequencer>
	//initEnvelopes();
	initSequencer();
    1016:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <twi_init>
	twi_init();
    101a:	ce 01       	movw	r24, r28
	initBank(&currentPattern);
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	c8 dc       	rcall	.-1648   	; 0x9b0 <initBank>
    1020:	cc 5d       	subi	r28, 0xDC	; 220
    1022:	da 4f       	sbci	r29, 0xFA	; 250
		//do factory reset here.
		factoryResetEeprom(currentPattern);
		globalWrite(&currentGlobals);
	}

	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
    1024:	68 81       	ld	r22, Y
    1026:	c4 52       	subi	r28, 0x24	; 36
    1028:	d5 40       	sbci	r29, 0x05	; 5
    102a:	ce 01       	movw	r24, r28
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <eepromLoadPattern>
    1032:	00 e0       	ldi	r16, 0x00	; 0
    1034:	10 e0       	ldi	r17, 0x00	; 0
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    1036:	0f 2e       	mov	r0, r31
    1038:	fc e2       	ldi	r31, 0x2C	; 44
	{
		uint8_t loadSelect = i%44;
    103a:	df 2e       	mov	r13, r31
    103c:	f0 2d       	mov	r31, r0
    103e:	98 01       	movw	r18, r16
    1040:	af e2       	ldi	r26, 0x2F	; 47
    1042:	ba eb       	ldi	r27, 0xBA	; 186
    1044:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    1048:	96 95       	lsr	r25
    104a:	87 95       	ror	r24
    104c:	92 95       	swap	r25
    104e:	82 95       	swap	r24
    1050:	8f 70       	andi	r24, 0x0F	; 15
    1052:	89 27       	eor	r24, r25
    1054:	9f 70       	andi	r25, 0x0F	; 15
    1056:	89 27       	eor	r24, r25
    1058:	d8 9e       	mul	r13, r24
    105a:	90 01       	movw	r18, r0
    105c:	d9 9e       	mul	r13, r25
    105e:	30 0d       	add	r19, r0
    1060:	11 24       	eor	r1, r1
    1062:	78 01       	movw	r14, r16
    1064:	e2 1a       	sub	r14, r18
    1066:	f3 0a       	sbc	r15, r19
    1068:	8e 2d       	mov	r24, r14
		selectKnob(loadSelect);
    106a:	14 dd       	rcall	.-1496   	; 0xa94 <selectKnob>
    106c:	be 01       	movw	r22, r28
    106e:	6f 5d       	subi	r22, 0xDF	; 223
		updateKnob(loadSelect, &currentGlobals);
    1070:	7a 4f       	sbci	r23, 0xFA	; 250
    1072:	8e 2d       	mov	r24, r14
    1074:	4f dd       	rcall	.-1378   	; 0xb14 <updateKnob>
    1076:	0f 5f       	subi	r16, 0xFF	; 255
    1078:	1f 4f       	sbci	r17, 0xFF	; 255
    107a:	08 3b       	cpi	r16, 0xB8	; 184
		factoryResetEeprom(currentPattern);
		globalWrite(&currentGlobals);
	}

	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	18 07       	cpc	r17, r24
    1080:	f1 f6       	brne	.-68     	; 0x103e <main+0x5c>
    1082:	ce 01       	movw	r24, r28
    1084:	8f 5d       	subi	r24, 0xDF	; 223
	{
		uint8_t loadSelect = i%44;
		selectKnob(loadSelect);
		updateKnob(loadSelect, &currentGlobals);
	}
	initializeKnob(&currentGlobals); //then copy it to the lastFilteredKnobBuffer. 
    1086:	9a 4f       	sbci	r25, 0xFA	; 250
    1088:	64 dd       	rcall	.-1336   	; 0xb52 <initializeKnob>
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	ce 01       	movw	r24, r28
    108e:	8f 5d       	subi	r24, 0xDF	; 223
	globalLoad(&currentGlobals, factoryReset);
    1090:	9a 4f       	sbci	r25, 0xFA	; 250
    1092:	0e 94 15 18 	call	0x302a	; 0x302a <globalLoad>
    1096:	8d b7       	in	r24, 0x3d	; 61
    1098:	9e b7       	in	r25, 0x3e	; 62
    109a:	87 5e       	subi	r24, 0xE7	; 231
	initMenu(&screenBank, currentPattern, currentGlobals); //fills screenBank with menu strings
    109c:	91 09       	sbc	r25, r1
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	9e bf       	out	0x3e, r25	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	8d bf       	out	0x3d, r24	; 61
    10a8:	ad b7       	in	r26, 0x3d	; 61
    10aa:	be b7       	in	r27, 0x3e	; 62
    10ac:	11 96       	adiw	r26, 0x01	; 1
    10ae:	87 ee       	ldi	r24, 0xE7	; 231
    10b0:	fe 01       	movw	r30, r28
    10b2:	ef 5d       	subi	r30, 0xDF	; 223
    10b4:	fa 4f       	sbci	r31, 0xFA	; 250
    10b6:	01 90       	ld	r0, Z+
    10b8:	0d 92       	st	X+, r0
    10ba:	8a 95       	dec	r24
    10bc:	e1 f7       	brne	.-8      	; 0x10b6 <main+0xd4>
    10be:	8d b7       	in	r24, 0x3d	; 61
    10c0:	9e b7       	in	r25, 0x3e	; 62
    10c2:	8b 56       	subi	r24, 0x6B	; 107
    10c4:	91 40       	sbci	r25, 0x01	; 1
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	9e bf       	out	0x3e, r25	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	8d bf       	out	0x3d, r24	; 61
    10d0:	ad b7       	in	r26, 0x3d	; 61
    10d2:	be b7       	in	r27, 0x3e	; 62
    10d4:	11 96       	adiw	r26, 0x01	; 1
    10d6:	8b e6       	ldi	r24, 0x6B	; 107
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	fe 01       	movw	r30, r28
    10dc:	31 96       	adiw	r30, 0x01	; 1
    10de:	01 90       	ld	r0, Z+
    10e0:	0d 92       	st	X+, r0
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	e1 f7       	brne	.-8      	; 0x10de <main+0xfc>
    10e6:	ce 01       	movw	r24, r28
    10e8:	84 59       	subi	r24, 0x94	; 148
    10ea:	9e 4f       	sbci	r25, 0xFE	; 254
    10ec:	c7 d0       	rcall	.+398    	; 0x127c <initMenu>
    10ee:	84 e0       	ldi	r24, 0x04	; 4
    10f0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>

	//what were these for? Some timer interrupt somewhere?
	TCCR2B = 1<<CS22;//using 64 from pre-scaler
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
	TIMSK2 = 1<<TOIE2;
    10fa:	78 94       	sei
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli

	sei();	
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	8e 01       	movw	r16, r28
    1108:	0f 5d       	subi	r16, 0xDF	; 223

while(1) {
	
	
	listenTrigButtons(&currentPattern, &currentGlobals);
    110a:	1a 4f       	sbci	r17, 0xFA	; 250
    110c:	b8 01       	movw	r22, r16
    110e:	ce 01       	movw	r24, r28
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	c3 d8       	rcall	.-3706   	; 0x29a <listenTrigButtons>
    1114:	1f 93       	push	r17
    1116:	0f 93       	push	r16
    1118:	8d b7       	in	r24, 0x3d	; 61
	listenGPButtons(currentPattern, &currentGlobals);
    111a:	9e b7       	in	r25, 0x3e	; 62
    111c:	8b 56       	subi	r24, 0x6B	; 107
    111e:	91 40       	sbci	r25, 0x01	; 1
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	9e bf       	out	0x3e, r25	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	8d bf       	out	0x3d, r24	; 61
    112a:	ad b7       	in	r26, 0x3d	; 61
    112c:	be b7       	in	r27, 0x3e	; 62
    112e:	11 96       	adiw	r26, 0x01	; 1
    1130:	8b e6       	ldi	r24, 0x6B	; 107
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	fe 01       	movw	r30, r28
    1136:	31 96       	adiw	r30, 0x01	; 1
    1138:	01 90       	ld	r0, Z+
    113a:	0d 92       	st	X+, r0
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	e1 f7       	brne	.-8      	; 0x1138 <main+0x156>
    1140:	27 d9       	rcall	.-3506   	; 0x390 <listenGPButtons>
    1142:	8d b7       	in	r24, 0x3d	; 61
    1144:	9e b7       	in	r25, 0x3e	; 62
    1146:	83 59       	subi	r24, 0x93	; 147
	updateLEDs(currentPattern, currentGlobals);
    1148:	9e 4f       	sbci	r25, 0xFE	; 254
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	87 5e       	subi	r24, 0xE7	; 231
    1156:	91 09       	sbc	r25, r1
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	9e bf       	out	0x3e, r25	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	8d bf       	out	0x3d, r24	; 61
    1162:	ad b7       	in	r26, 0x3d	; 61
    1164:	be b7       	in	r27, 0x3e	; 62
    1166:	11 96       	adiw	r26, 0x01	; 1
    1168:	87 ee       	ldi	r24, 0xE7	; 231
    116a:	f8 01       	movw	r30, r16
    116c:	01 90       	ld	r0, Z+
    116e:	0d 92       	st	X+, r0
    1170:	8a 95       	dec	r24
    1172:	e1 f7       	brne	.-8      	; 0x116c <main+0x18a>
    1174:	8d b7       	in	r24, 0x3d	; 61
    1176:	9e b7       	in	r25, 0x3e	; 62
    1178:	8b 56       	subi	r24, 0x6B	; 107
    117a:	91 40       	sbci	r25, 0x01	; 1
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	9e bf       	out	0x3e, r25	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	8d bf       	out	0x3d, r24	; 61
    1186:	ad b7       	in	r26, 0x3d	; 61
    1188:	be b7       	in	r27, 0x3e	; 62
    118a:	11 96       	adiw	r26, 0x01	; 1
    118c:	8b e6       	ldi	r24, 0x6B	; 107
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	fe 01       	movw	r30, r28
    1192:	31 96       	adiw	r30, 0x01	; 1
    1194:	01 90       	ld	r0, Z+
    1196:	0d 92       	st	X+, r0
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	e1 f7       	brne	.-8      	; 0x1194 <main+0x1b2>
    119c:	e5 de       	rcall	.-566    	; 0xf68 <updateLEDs>
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
	listenEncoders(&currentPattern, &currentGlobals);
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	b8 01       	movw	r22, r16
    11aa:	ce 01       	movw	r24, r28
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	f7 d9       	rcall	.-3090   	; 0x59e <listenEncoders>
    11b0:	b8 01       	movw	r22, r16
    11b2:	ce 01       	movw	r24, r28
    11b4:	01 96       	adiw	r24, 0x01	; 1
	listenKnobs(&currentPattern, &currentGlobals);
    11b6:	a1 de       	rcall	.-702    	; 0xefa <listenKnobs>
    11b8:	8d b7       	in	r24, 0x3d	; 61
    11ba:	9e b7       	in	r25, 0x3e	; 62
    11bc:	87 5e       	subi	r24, 0xE7	; 231
    11be:	91 09       	sbc	r25, r1
	updateSequencer(currentPattern, currentGlobals);
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	9e bf       	out	0x3e, r25	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	8d bf       	out	0x3d, r24	; 61
    11ca:	ad b7       	in	r26, 0x3d	; 61
    11cc:	be b7       	in	r27, 0x3e	; 62
    11ce:	11 96       	adiw	r26, 0x01	; 1
    11d0:	87 ee       	ldi	r24, 0xE7	; 231
    11d2:	f8 01       	movw	r30, r16
    11d4:	01 90       	ld	r0, Z+
    11d6:	0d 92       	st	X+, r0
    11d8:	8a 95       	dec	r24
    11da:	e1 f7       	brne	.-8      	; 0x11d4 <main+0x1f2>
    11dc:	8d b7       	in	r24, 0x3d	; 61
    11de:	9e b7       	in	r25, 0x3e	; 62
    11e0:	8b 56       	subi	r24, 0x6B	; 107
    11e2:	91 40       	sbci	r25, 0x01	; 1
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	9e bf       	out	0x3e, r25	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	8d bf       	out	0x3d, r24	; 61
    11ee:	ad b7       	in	r26, 0x3d	; 61
    11f0:	be b7       	in	r27, 0x3e	; 62
    11f2:	11 96       	adiw	r26, 0x01	; 1
    11f4:	8b e6       	ldi	r24, 0x6B	; 107
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	fe 01       	movw	r30, r28
    11fa:	31 96       	adiw	r30, 0x01	; 1
    11fc:	01 90       	ld	r0, Z+
    11fe:	0d 92       	st	X+, r0
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	e1 f7       	brne	.-8      	; 0x11fc <main+0x21a>
    1204:	0e 94 42 12 	call	0x2484	; 0x2484 <updateSequencer>
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
	updateScreen(&screenBank, &currentPattern, &currentGlobals);
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	a8 01       	movw	r20, r16
    1214:	be 01       	movw	r22, r28
    1216:	6f 5f       	subi	r22, 0xFF	; 255
    1218:	7f 4f       	sbci	r23, 0xFF	; 255
    121a:	ce 01       	movw	r24, r28
    121c:	84 59       	subi	r24, 0x94	; 148
    121e:	9e 4f       	sbci	r25, 0xFE	; 254
    1220:	61 d1       	rcall	.+706    	; 0x14e4 <updateScreen>
    1222:	8d b7       	in	r24, 0x3d	; 61
    1224:	9e b7       	in	r25, 0x3e	; 62
    1226:	87 5e       	subi	r24, 0xE7	; 231
    1228:	91 09       	sbc	r25, r1
	midiRead(currentPattern, currentGlobals);
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	9e bf       	out	0x3e, r25	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	8d bf       	out	0x3d, r24	; 61
    1234:	ad b7       	in	r26, 0x3d	; 61
    1236:	be b7       	in	r27, 0x3e	; 62
    1238:	11 96       	adiw	r26, 0x01	; 1
    123a:	87 ee       	ldi	r24, 0xE7	; 231
    123c:	f8 01       	movw	r30, r16
    123e:	01 90       	ld	r0, Z+
    1240:	0d 92       	st	X+, r0
    1242:	8a 95       	dec	r24
    1244:	e1 f7       	brne	.-8      	; 0x123e <main+0x25c>
    1246:	8d b7       	in	r24, 0x3d	; 61
    1248:	9e b7       	in	r25, 0x3e	; 62
    124a:	8b 56       	subi	r24, 0x6B	; 107
    124c:	91 40       	sbci	r25, 0x01	; 1
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	9e bf       	out	0x3e, r25	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	8d bf       	out	0x3d, r24	; 61
    1258:	ad b7       	in	r26, 0x3d	; 61
    125a:	be b7       	in	r27, 0x3e	; 62
    125c:	11 96       	adiw	r26, 0x01	; 1
    125e:	8b e6       	ldi	r24, 0x6B	; 107
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	fe 01       	movw	r30, r28
    1264:	31 96       	adiw	r30, 0x01	; 1
    1266:	01 90       	ld	r0, Z+
    1268:	0d 92       	st	X+, r0
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	e1 f7       	brne	.-8      	; 0x1266 <main+0x284>
    126e:	d0 d5       	rcall	.+2976   	; 0x1e10 <midiRead>
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	48 cf       	rjmp	.-368    	; 0x110c <main+0x12a>

0000127c <initMenu>:
uint8_t prevMenuState; //do we need this anymore?

//I don't like using a global extern here, instead of a passed pointer,
//but I can't seem to get the struct to stay in scope.
void initMenu(Screen *initTheScreen, Pattern currentPattern, Globals currentGlobals)
{
    127c:	cf 92       	push	r12
    127e:	df 92       	push	r13
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	8c 01       	movw	r16, r24
    1292:	c6 58       	subi	r28, 0x86	; 134
    1294:	de 4f       	sbci	r29, 0xFE	; 254
    1296:	e8 80       	ld	r14, Y
    1298:	ca 57       	subi	r28, 0x7A	; 122
    129a:	d1 40       	sbci	r29, 0x01	; 1

//screen0
// = {"Performance Mode    ","Pattern:            ","BPM: xxx            ","Stop                "}
initArrays(initTheScreen->screen0,1,"Pattern:");
    129c:	40 e6       	ldi	r20, 0x60	; 96
    129e:	52 e0       	ldi	r21, 0x02	; 2
    12a0:	61 e0       	ldi	r22, 0x01	; 1
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	46 db       	rcall	.-2420   	; 0x932 <initArrays>
initArrays(initTheScreen->screen0,2,"BPM:");
    12a6:	49 e6       	ldi	r20, 0x69	; 105
    12a8:	52 e0       	ldi	r21, 0x02	; 2
    12aa:	62 e0       	ldi	r22, 0x02	; 2
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	c8 01       	movw	r24, r16
    12b0:	40 db       	rcall	.-2432   	; 0x932 <initArrays>
initArrays(initTheScreen->screen0,3,"Stop");
    12b2:	4e e6       	ldi	r20, 0x6E	; 110
    12b4:	52 e0       	ldi	r21, 0x02	; 2
    12b6:	63 e0       	ldi	r22, 0x03	; 3
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	c8 01       	movw	r24, r16
    12bc:	3a db       	rcall	.-2444   	; 0x932 <initArrays>
initArrays(initTheScreen->screen0,0,"Performance Mode");
    12be:	43 e7       	ldi	r20, 0x73	; 115
    12c0:	52 e0       	ldi	r21, 0x02	; 2
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	c8 01       	movw	r24, r16
    12c8:	34 db       	rcall	.-2456   	; 0x932 <initArrays>
//screen1
// = {"Sequence Edit       ","Pattern:            ","Steps:              ","Step number:        "}; //this will eventually be 5 once we implement naming of samples.
initArrays(initTheScreen->screen1,1,"Pattern:");
    12ca:	68 01       	movw	r12, r16
    12cc:	8d eb       	ldi	r24, 0xBD	; 189
    12ce:	c8 0e       	add	r12, r24
    12d0:	d1 1c       	adc	r13, r1
    12d2:	40 e6       	ldi	r20, 0x60	; 96
    12d4:	52 e0       	ldi	r21, 0x02	; 2
    12d6:	61 e0       	ldi	r22, 0x01	; 1
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	c6 01       	movw	r24, r12
    12dc:	2a db       	rcall	.-2476   	; 0x932 <initArrays>
initArrays(initTheScreen->screen1,2,"Steps:");
    12de:	44 e8       	ldi	r20, 0x84	; 132
    12e0:	52 e0       	ldi	r21, 0x02	; 2
    12e2:	62 e0       	ldi	r22, 0x02	; 2
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	c6 01       	movw	r24, r12
    12e8:	24 db       	rcall	.-2488   	; 0x932 <initArrays>
initArrays(initTheScreen->screen1,3,"Step number:");
    12ea:	4b e8       	ldi	r20, 0x8B	; 139
    12ec:	52 e0       	ldi	r21, 0x02	; 2
    12ee:	63 e0       	ldi	r22, 0x03	; 3
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	c6 01       	movw	r24, r12
    12f4:	1e db       	rcall	.-2500   	; 0x932 <initArrays>
initArrays(initTheScreen->screen1,0,"Sequence Edit");
    12f6:	48 e9       	ldi	r20, 0x98	; 152
    12f8:	52 e0       	ldi	r21, 0x02	; 2
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	c6 01       	movw	r24, r12
    1300:	18 db       	rcall	.-2512   	; 0x932 <initArrays>
    1302:	68 01       	movw	r12, r16
//screen2
//= {"Track Settings      ","Track:              ","Play Mode           ","OutRoute            "};
initArrays(initTheScreen->screen2,1,"Track:");
    1304:	86 e8       	ldi	r24, 0x86	; 134
    1306:	c8 1a       	sub	r12, r24
    1308:	8e ef       	ldi	r24, 0xFE	; 254
    130a:	d8 0a       	sbc	r13, r24
    130c:	46 ea       	ldi	r20, 0xA6	; 166
    130e:	52 e0       	ldi	r21, 0x02	; 2
    1310:	61 e0       	ldi	r22, 0x01	; 1
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	c6 01       	movw	r24, r12
    1316:	0d db       	rcall	.-2534   	; 0x932 <initArrays>
initArrays(initTheScreen->screen2,2,"PlayMode:");
    1318:	4d ea       	ldi	r20, 0xAD	; 173
    131a:	52 e0       	ldi	r21, 0x02	; 2
    131c:	62 e0       	ldi	r22, 0x02	; 2
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	c6 01       	movw	r24, r12
    1322:	07 db       	rcall	.-2546   	; 0x932 <initArrays>
initArrays(initTheScreen->screen2,3,"OutRoute:");
    1324:	47 eb       	ldi	r20, 0xB7	; 183
    1326:	52 e0       	ldi	r21, 0x02	; 2
    1328:	63 e0       	ldi	r22, 0x03	; 3
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	c6 01       	movw	r24, r12
    132e:	01 db       	rcall	.-2558   	; 0x932 <initArrays>
initArrays(initTheScreen->screen2,0,"Track Settings");
    1330:	41 ec       	ldi	r20, 0xC1	; 193
    1332:	52 e0       	ldi	r21, 0x02	; 2
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	c6 01       	movw	r24, r12
    133a:	fb da       	rcall	.-2570   	; 0x932 <initArrays>
//screen3
// = {"Global Settings     ","Midi Channel: xx    ", "Midi trig:  "};
initArrays(initTheScreen->screen3,1,"Midi Channel:");
    133c:	68 01       	movw	r12, r16
    133e:	89 ec       	ldi	r24, 0xC9	; 201
    1340:	c8 1a       	sub	r12, r24
    1342:	8d ef       	ldi	r24, 0xFD	; 253
    1344:	d8 0a       	sbc	r13, r24
    1346:	40 ed       	ldi	r20, 0xD0	; 208
    1348:	52 e0       	ldi	r21, 0x02	; 2
    134a:	61 e0       	ldi	r22, 0x01	; 1
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	c6 01       	movw	r24, r12
initArrays(initTheScreen->screen3,2,"Midi trig   :       ");
    1350:	f0 da       	rcall	.-2592   	; 0x932 <initArrays>
    1352:	4e ed       	ldi	r20, 0xDE	; 222
    1354:	52 e0       	ldi	r21, 0x02	; 2
    1356:	62 e0       	ldi	r22, 0x02	; 2
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	c6 01       	movw	r24, r12
initArrays(initTheScreen->screen3,3,"                     ");
    135c:	ea da       	rcall	.-2604   	; 0x932 <initArrays>
    135e:	43 ef       	ldi	r20, 0xF3	; 243
    1360:	52 e0       	ldi	r21, 0x02	; 2
    1362:	63 e0       	ldi	r22, 0x03	; 3
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	c6 01       	movw	r24, r12
    1368:	e4 da       	rcall	.-2616   	; 0x932 <initArrays>
initArrays(initTheScreen->screen3,0,"Global Settings");
    136a:	49 e0       	ldi	r20, 0x09	; 9
    136c:	53 e0       	ldi	r21, 0x03	; 3
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	c6 01       	movw	r24, r12
    1374:	de da       	rcall	.-2628   	; 0x932 <initArrays>

//init all of the knob arrays:

initArrays(initTheScreen->knobScreen,0,"OutVolume x : xxxdb");//string 0 is outVolume
    1376:	68 01       	movw	r12, r16
    1378:	88 e0       	ldi	r24, 0x08	; 8
    137a:	c8 1a       	sub	r12, r24
    137c:	8d ef       	ldi	r24, 0xFD	; 253
    137e:	d8 0a       	sbc	r13, r24
    1380:	49 e1       	ldi	r20, 0x19	; 25
    1382:	53 e0       	ldi	r21, 0x03	; 3
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,1,"Pitch : xxx");//string 1 is pitch
    138a:	d3 da       	rcall	.-2650   	; 0x932 <initArrays>
    138c:	4d e2       	ldi	r20, 0x2D	; 45
    138e:	53 e0       	ldi	r21, 0x03	; 3
    1390:	61 e0       	ldi	r22, 0x01	; 1
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,2,"AttackTime  : xxx MS"); //string 2 is Envelope gain
    1396:	cd da       	rcall	.-2662   	; 0x932 <initArrays>
    1398:	49 e3       	ldi	r20, 0x39	; 57
    139a:	53 e0       	ldi	r21, 0x03	; 3
    139c:	62 e0       	ldi	r22, 0x02	; 2
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	c6 01       	movw	r24, r12
    13a2:	c7 da       	rcall	.-2674   	; 0x932 <initArrays>
initArrays(initTheScreen->knobScreen,3,"ReleaseTimexx:xxxxMS"); //string 3 is Envelop Time
    13a4:	4e e4       	ldi	r20, 0x4E	; 78
    13a6:	53 e0       	ldi	r21, 0x03	; 3
    13a8:	63 e0       	ldi	r22, 0x03	; 3
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	c6 01       	movw	r24, r12
    13ae:	c1 da       	rcall	.-2686   	; 0x932 <initArrays>
initArrays(initTheScreen->knobScreen,4,"TrackVolume xx:xxxdb"); //string 4 is track Level.
    13b0:	43 e6       	ldi	r20, 0x63	; 99
    13b2:	53 e0       	ldi	r21, 0x03	; 3
    13b4:	64 e0       	ldi	r22, 0x04	; 4
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	c6 01       	movw	r24, r12
    13ba:	bb da       	rcall	.-2698   	; 0x932 <initArrays>
    13bc:	cc 52       	subi	r28, 0x2C	; 44
//initArrays(initTheScreen->knobScreen,5,"BPM: ");
//we might want to put in one of these for BPM, but I'm not sure. 

numPrinter(initTheScreen->screen0[2],5,3, currentPattern.patternBPM);
    13be:	df 4f       	sbci	r29, 0xFF	; 255
    13c0:	28 81       	ld	r18, Y
    13c2:	39 81       	ldd	r19, Y+1	; 0x01
    13c4:	c4 5d       	subi	r28, 0xD4	; 212
    13c6:	d0 40       	sbci	r29, 0x00	; 0
    13c8:	43 e0       	ldi	r20, 0x03	; 3
    13ca:	65 e0       	ldi	r22, 0x05	; 5
    13cc:	c8 01       	movw	r24, r16
    13ce:	8a 96       	adiw	r24, 0x2a	; 42
    13d0:	2b d6       	rcall	.+3158   	; 0x2028 <numPrinter>
    13d2:	cd 57       	subi	r28, 0x7D	; 125
numPrinter(initTheScreen->screen3[1],14,2, (currentGlobals.midiChannel)+1);
    13d4:	de 4f       	sbci	r29, 0xFE	; 254
    13d6:	28 81       	ld	r18, Y
    13d8:	c3 58       	subi	r28, 0x83	; 131
    13da:	d1 40       	sbci	r29, 0x01	; 1
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	2f 5f       	subi	r18, 0xFF	; 255
    13e0:	3f 4f       	sbci	r19, 0xFF	; 255
    13e2:	42 e0       	ldi	r20, 0x02	; 2
    13e4:	6e e0       	ldi	r22, 0x0E	; 14
    13e6:	c8 01       	movw	r24, r16
    13e8:	84 5b       	subi	r24, 0xB4	; 180
    13ea:	9d 4f       	sbci	r25, 0xFD	; 253
    13ec:	1d d6       	rcall	.+3130   	; 0x2028 <numPrinter>
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    13ee:	f1 2c       	mov	r15, r1
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	e8 1a       	sub	r14, r24
    13f4:	f8 0a       	sbc	r15, r24
    13f6:	97 01       	movw	r18, r14
    13f8:	43 e0       	ldi	r20, 0x03	; 3
    13fa:	69 e0       	ldi	r22, 0x09	; 9
    13fc:	c8 01       	movw	r24, r16
    13fe:	45 96       	adiw	r24, 0x15	; 21
    1400:	13 d6       	rcall	.+3110   	; 0x2028 <numPrinter>
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    1402:	97 01       	movw	r18, r14
    1404:	43 e0       	ldi	r20, 0x03	; 3
    1406:	69 e0       	ldi	r22, 0x09	; 9
    1408:	c8 01       	movw	r24, r16
    140a:	8e 52       	subi	r24, 0x2E	; 46
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	0c d6       	rcall	.+3096   	; 0x2028 <numPrinter>
    1410:	ca 52       	subi	r28, 0x2A	; 42
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
    1412:	df 4f       	sbci	r29, 0xFF	; 255
    1414:	28 81       	ld	r18, Y
    1416:	c6 5d       	subi	r28, 0xD6	; 214
    1418:	d0 40       	sbci	r29, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	42 e0       	ldi	r20, 0x02	; 2
    141e:	67 e0       	ldi	r22, 0x07	; 7
    1420:	c8 01       	movw	r24, r16
    1422:	89 51       	subi	r24, 0x19	; 25
    1424:	9f 4f       	sbci	r25, 0xFF	; 255
    1426:	00 d6       	rcall	.+3072   	; 0x2028 <numPrinter>
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
    1428:	c5 58       	subi	r28, 0x85	; 133
    142a:	de 4f       	sbci	r29, 0xFE	; 254
    142c:	28 81       	ld	r18, Y
    142e:	cb 57       	subi	r28, 0x7B	; 123
    1430:	d1 40       	sbci	r29, 0x01	; 1
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	2f 5f       	subi	r18, 0xFF	; 255
    1436:	3f 4f       	sbci	r19, 0xFF	; 255
    1438:	42 e0       	ldi	r20, 0x02	; 2
    143a:	6d e0       	ldi	r22, 0x0D	; 13
    143c:	c8 01       	movw	r24, r16
    143e:	84 50       	subi	r24, 0x04	; 4
    1440:	9f 4f       	sbci	r25, 0xFF	; 255
    1442:	f2 d5       	rcall	.+3044   	; 0x2028 <numPrinter>
    1444:	e1 2c       	mov	r14, r1
    1446:	f1 2c       	mov	r15, r1
    1448:	b7 01       	movw	r22, r14
 
	for(uint8_t i=0;i<4; i++ )
	{
		outputS(initTheScreen->screen0[i],i);
    144a:	c8 01       	movw	r24, r16
    144c:	d5 d5       	rcall	.+2986   	; 0x1ff8 <outputS>
    144e:	8f ef       	ldi	r24, 0xFF	; 255
    1450:	e8 1a       	sub	r14, r24
    1452:	f8 0a       	sbc	r15, r24
    1454:	0b 5e       	subi	r16, 0xEB	; 235
    1456:	1f 4f       	sbci	r17, 0xFF	; 255
    1458:	84 e0       	ldi	r24, 0x04	; 4
    145a:	e8 16       	cp	r14, r24
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
 
	for(uint8_t i=0;i<4; i++ )
    145c:	f1 04       	cpc	r15, r1
    145e:	a1 f7       	brne	.-24     	; 0x1448 <initMenu+0x1cc>
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
	{
		outputS(initTheScreen->screen0[i],i);
	}
}
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	ff 90       	pop	r15
    146a:	ef 90       	pop	r14
    146c:	df 90       	pop	r13
    146e:	cf 90       	pop	r12
    1470:	08 95       	ret

00001472 <reInitMenuOnLoad>:
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(Screen *initTheScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	ec 01       	movw	r28, r24
    1480:	8b 01       	movw	r16, r22
    1482:	7a 01       	movw	r14, r20
	numPrinter(initTheScreen->screen0[2],5,3, currentPattern->patternBPM);
    1484:	fb 01       	movw	r30, r22
    1486:	e8 53       	subi	r30, 0x38	; 56
    1488:	ff 4f       	sbci	r31, 0xFF	; 255
    148a:	20 81       	ld	r18, Z
    148c:	31 81       	ldd	r19, Z+1	; 0x01
    148e:	43 e0       	ldi	r20, 0x03	; 3
    1490:	65 e0       	ldi	r22, 0x05	; 5
    1492:	8a 96       	adiw	r24, 0x2a	; 42
    1494:	c9 d5       	rcall	.+2962   	; 0x2028 <numPrinter>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
    1496:	f8 01       	movw	r30, r16
    1498:	e6 53       	subi	r30, 0x36	; 54
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	20 81       	ld	r18, Z
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	42 e0       	ldi	r20, 0x02	; 2
    14a2:	67 e0       	ldi	r22, 0x07	; 7
    14a4:	ce 01       	movw	r24, r28
    14a6:	89 51       	subi	r24, 0x19	; 25
    14a8:	9f 4f       	sbci	r25, 0xFF	; 255
    14aa:	be d5       	rcall	.+2940   	; 0x2028 <numPrinter>
	numPrinter(initTheScreen->screen1[1],9,3,(currentGlobals->currentPatternNumber)+1);
    14ac:	f7 01       	movw	r30, r14
    14ae:	23 81       	ldd	r18, Z+3	; 0x03
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	2f 5f       	subi	r18, 0xFF	; 255
    14b4:	3f 4f       	sbci	r19, 0xFF	; 255
    14b6:	43 e0       	ldi	r20, 0x03	; 3
    14b8:	69 e0       	ldi	r22, 0x09	; 9
    14ba:	ce 01       	movw	r24, r28
    14bc:	8e 52       	subi	r24, 0x2E	; 46
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	b3 d5       	rcall	.+2918   	; 0x2028 <numPrinter>
	numPrinter(initTheScreen->screen0[1],9,3,(currentGlobals->currentPatternNumber)+1);
    14c2:	f7 01       	movw	r30, r14
    14c4:	23 81       	ldd	r18, Z+3	; 0x03
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	2f 5f       	subi	r18, 0xFF	; 255
    14ca:	3f 4f       	sbci	r19, 0xFF	; 255
    14cc:	43 e0       	ldi	r20, 0x03	; 3
    14ce:	69 e0       	ldi	r22, 0x09	; 9
    14d0:	ce 01       	movw	r24, r28
    14d2:	45 96       	adiw	r24, 0x15	; 21
    14d4:	a9 d5       	rcall	.+2898   	; 0x2028 <numPrinter>
}
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	ef 90       	pop	r14
    14e2:	08 95       	ret

000014e4 <updateScreen>:

void updateScreen(Screen *menuScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    14e4:	af 92       	push	r10
    14e6:	bf 92       	push	r11
    14e8:	cf 92       	push	r12
    14ea:	df 92       	push	r13
    14ec:	ef 92       	push	r14
    14ee:	ff 92       	push	r15
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	8c 01       	movw	r16, r24
    14fa:	6b 01       	movw	r12, r22
    14fc:	ea 01       	movw	r28, r20
	
	if((currentGlobals->valueChangeFlag)&(1<<encoderChange))//check if encoder bit is high
    14fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1500:	80 ff       	sbrs	r24, 0
    1502:	2a c2       	rjmp	.+1108   	; 0x1958 <updateScreen+0x474>
	{ 
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<encoderChange));//set encoder bit low, and carry our whatever encoder change has occurred. 
    1504:	1a 86       	std	Y+10, r1	; 0x0a
		//we need to debug this to make sure it's doing what we think it's doing.
		switch(currentGlobals->menuState)
    1506:	8e 81       	ldd	r24, Y+6	; 0x06
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	8b 33       	cpi	r24, 0x3B	; 59
    150c:	91 05       	cpc	r25, r1
    150e:	08 f0       	brcs	.+2      	; 0x1512 <updateScreen+0x2e>
    1510:	20 c2       	rjmp	.+1088   	; 0x1952 <updateScreen+0x46e>
    1512:	fc 01       	movw	r30, r24
    1514:	88 27       	eor	r24, r24
    1516:	e3 55       	subi	r30, 0x53	; 83
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	8f 4f       	sbci	r24, 0xFF	; 255
    151c:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__tablejump2__>
		{
			case PreformanceModeInit: //initial state
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    1520:	c8 01       	movw	r24, r16
    1522:	a7 df       	rcall	.-178    	; 0x1472 <reInitMenuOnLoad>
			outputS(menuScreen->screen0[0], 0);
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	c8 01       	movw	r24, r16
    152a:	66 d5       	rcall	.+2764   	; 0x1ff8 <outputS>
			outputS(menuScreen->screen0[1], 1);
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	c8 01       	movw	r24, r16
    1532:	45 96       	adiw	r24, 0x15	; 21
    1534:	61 d5       	rcall	.+2754   	; 0x1ff8 <outputS>
			outputS(menuScreen->screen0[2], 2);
    1536:	62 e0       	ldi	r22, 0x02	; 2
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	c8 01       	movw	r24, r16
    153c:	8a 96       	adiw	r24, 0x2a	; 42
    153e:	5c d5       	rcall	.+2744   	; 0x1ff8 <outputS>
			outputS(menuScreen->screen0[3], 3);
    1540:	63 e0       	ldi	r22, 0x03	; 3
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	c8 01       	movw	r24, r16
    1546:	cf 96       	adiw	r24, 0x3f	; 63
    1548:	57 d5       	rcall	.+2734   	; 0x1ff8 <outputS>
			break;
    154a:	03 c2       	rjmp	.+1030   	; 0x1952 <updateScreen+0x46e>

			case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0);
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	c8 01       	movw	r24, r16
    1552:	83 54       	subi	r24, 0x43	; 67
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	50 d5       	rcall	.+2720   	; 0x1ff8 <outputS>
			outputS(menuScreen->screen1[1], 1);
    1558:	61 e0       	ldi	r22, 0x01	; 1
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	c8 01       	movw	r24, r16
    155e:	8e 52       	subi	r24, 0x2E	; 46
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	4a d5       	rcall	.+2708   	; 0x1ff8 <outputS>
			outputS(menuScreen->screen1[2], 2);
    1564:	62 e0       	ldi	r22, 0x02	; 2
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	c8 01       	movw	r24, r16
    156a:	89 51       	subi	r24, 0x19	; 25
    156c:	9f 4f       	sbci	r25, 0xFF	; 255
    156e:	44 d5       	rcall	.+2696   	; 0x1ff8 <outputS>
			outputS(menuScreen->screen1[3], 3);
    1570:	63 e0       	ldi	r22, 0x03	; 3
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	c8 01       	movw	r24, r16
    1576:	84 50       	subi	r24, 0x04	; 4
    1578:	9f 4f       	sbci	r25, 0xFF	; 255
    157a:	3e d5       	rcall	.+2684   	; 0x1ff8 <outputS>
    157c:	81 e1       	ldi	r24, 0x11	; 17
	
			currentGlobals->menuState = SequencerMenuArrow1; 
    157e:	8e 83       	std	Y+6, r24	; 0x06
    1580:	88 e0       	ldi	r24, 0x08	; 8
	
	
			case SequencerMenuArrow1:
			menuScreen->screen1[1][19]= 8;
    1582:	f8 01       	movw	r30, r16
    1584:	eb 51       	subi	r30, 0x1B	; 27
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 83       	st	Z, r24
    158a:	80 e2       	ldi	r24, 0x20	; 32
			menuScreen->screen1[2][19] = ' ';
    158c:	75 96       	adiw	r30, 0x15	; 21
    158e:	80 83       	st	Z, r24
			menuScreen->screen1[3][19] = ' ';
    1590:	75 96       	adiw	r30, 0x15	; 21
    1592:	80 83       	st	Z, r24
			outputS(menuScreen->screen1[1], 1);
    1594:	61 e0       	ldi	r22, 0x01	; 1
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	c8 01       	movw	r24, r16
    159a:	8e 52       	subi	r24, 0x2E	; 46
    159c:	9f 4f       	sbci	r25, 0xFF	; 255
    159e:	2c d5       	rcall	.+2648   	; 0x1ff8 <outputS>
			outputS(menuScreen->screen1[2], 2);
    15a0:	62 e0       	ldi	r22, 0x02	; 2
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	c8 01       	movw	r24, r16
    15a6:	89 51       	subi	r24, 0x19	; 25
    15a8:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    15aa:	26 d5       	rcall	.+2636   	; 0x1ff8 <outputS>
    15ac:	63 e0       	ldi	r22, 0x03	; 3
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	c8 01       	movw	r24, r16
    15b2:	84 50       	subi	r24, 0x04	; 4
    15b4:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    15b6:	20 d5       	rcall	.+2624   	; 0x1ff8 <outputS>
			
			case SequencerMenuArrow1Select:
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    15b8:	cc c1       	rjmp	.+920    	; 0x1952 <updateScreen+0x46e>
    15ba:	c8 01       	movw	r24, r16
    15bc:	5a df       	rcall	.-332    	; 0x1472 <reInitMenuOnLoad>
			outputS(menuScreen->screen1[1],1);
    15be:	61 e0       	ldi	r22, 0x01	; 1
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	c8 01       	movw	r24, r16
    15c4:	8e 52       	subi	r24, 0x2E	; 46
    15c6:	9f 4f       	sbci	r25, 0xFF	; 255
    15c8:	17 d5       	rcall	.+2606   	; 0x1ff8 <outputS>
    15ca:	c3 c1       	rjmp	.+902    	; 0x1952 <updateScreen+0x46e>
			break;
    15cc:	80 e2       	ldi	r24, 0x20	; 32
	
	
			case SequencerMenuArrow2:
			menuScreen->screen1[1][19]= ' ';
    15ce:	f8 01       	movw	r30, r16
    15d0:	eb 51       	subi	r30, 0x1B	; 27
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 83       	st	Z, r24
			menuScreen->screen1[2][19] = 8;
    15d6:	98 e0       	ldi	r25, 0x08	; 8
    15d8:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = ' ';
    15da:	90 83       	st	Z, r25
    15dc:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen1[1], 1);
    15de:	80 83       	st	Z, r24
    15e0:	61 e0       	ldi	r22, 0x01	; 1
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	c8 01       	movw	r24, r16
    15e6:	8e 52       	subi	r24, 0x2E	; 46
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    15ea:	06 d5       	rcall	.+2572   	; 0x1ff8 <outputS>
    15ec:	62 e0       	ldi	r22, 0x02	; 2
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	c8 01       	movw	r24, r16
    15f2:	89 51       	subi	r24, 0x19	; 25
    15f4:	9f 4f       	sbci	r25, 0xFF	; 255
    15f6:	00 d5       	rcall	.+2560   	; 0x1ff8 <outputS>
			outputS(menuScreen->screen1[3], 3);
    15f8:	63 e0       	ldi	r22, 0x03	; 3
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	c8 01       	movw	r24, r16
    15fe:	84 50       	subi	r24, 0x04	; 4
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
    1602:	fa d4       	rcall	.+2548   	; 0x1ff8 <outputS>
			break;
	
			case SequencerMenuArrow2Select:
			numPrinter(menuScreen->screen1[2],7,2,currentPattern->numSteps);
    1604:	a6 c1       	rjmp	.+844    	; 0x1952 <updateScreen+0x46e>
    1606:	fb 01       	movw	r30, r22
    1608:	e6 53       	subi	r30, 0x36	; 54
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	20 81       	ld	r18, Z
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	42 e0       	ldi	r20, 0x02	; 2
    1612:	67 e0       	ldi	r22, 0x07	; 7
    1614:	78 01       	movw	r14, r16
    1616:	87 ee       	ldi	r24, 0xE7	; 231
    1618:	e8 0e       	add	r14, r24
    161a:	f1 1c       	adc	r15, r1
    161c:	c7 01       	movw	r24, r14
    161e:	04 d5       	rcall	.+2568   	; 0x2028 <numPrinter>
			outputS(menuScreen->screen1[2],2);
    1620:	62 e0       	ldi	r22, 0x02	; 2
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	c7 01       	movw	r24, r14
    1626:	e8 d4       	rcall	.+2512   	; 0x1ff8 <outputS>
			break;
    1628:	94 c1       	rjmp	.+808    	; 0x1952 <updateScreen+0x46e>
	
			case SequencerMenuArrow3:
			menuScreen->screen1[1][19]= ' ';
    162a:	80 e2       	ldi	r24, 0x20	; 32
    162c:	f8 01       	movw	r30, r16
    162e:	eb 51       	subi	r30, 0x1B	; 27
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
			menuScreen->screen1[2][19] = ' ';
    1632:	80 83       	st	Z, r24
    1634:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = 8;
    1636:	80 83       	st	Z, r24
    1638:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen1[1], 1);
    163a:	75 96       	adiw	r30, 0x15	; 21
    163c:	80 83       	st	Z, r24
    163e:	61 e0       	ldi	r22, 0x01	; 1
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	c8 01       	movw	r24, r16
    1644:	8e 52       	subi	r24, 0x2E	; 46
    1646:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    1648:	d7 d4       	rcall	.+2478   	; 0x1ff8 <outputS>
    164a:	62 e0       	ldi	r22, 0x02	; 2
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	c8 01       	movw	r24, r16
    1650:	89 51       	subi	r24, 0x19	; 25
    1652:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    1654:	d1 d4       	rcall	.+2466   	; 0x1ff8 <outputS>
    1656:	63 e0       	ldi	r22, 0x03	; 3
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	c8 01       	movw	r24, r16
    165c:	84 50       	subi	r24, 0x04	; 4
    165e:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    1660:	cb d4       	rcall	.+2454   	; 0x1ff8 <outputS>
		
			case SequencerMenuArrow3Select:
			numPrinter(menuScreen->screen1[3],14,2,(currentGlobals->currentStep)+1); //these are 0 indexed, so we need to add 1 to the display.
    1662:	77 c1       	rjmp	.+750    	; 0x1952 <updateScreen+0x46e>
    1664:	2c 81       	ldd	r18, Y+4	; 0x04
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	2f 5f       	subi	r18, 0xFF	; 255
    166a:	3f 4f       	sbci	r19, 0xFF	; 255
    166c:	42 e0       	ldi	r20, 0x02	; 2
    166e:	6e e0       	ldi	r22, 0x0E	; 14
    1670:	78 01       	movw	r14, r16
    1672:	ac ef       	ldi	r26, 0xFC	; 252
    1674:	ea 0e       	add	r14, r26
    1676:	f1 1c       	adc	r15, r1
			outputS(menuScreen->screen1[3],3);
    1678:	c7 01       	movw	r24, r14
    167a:	d6 d4       	rcall	.+2476   	; 0x2028 <numPrinter>
    167c:	63 e0       	ldi	r22, 0x03	; 3
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	c7 01       	movw	r24, r14
			break;
	

			case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0);
    1682:	ba d4       	rcall	.+2420   	; 0x1ff8 <outputS>
    1684:	66 c1       	rjmp	.+716    	; 0x1952 <updateScreen+0x46e>
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	c8 01       	movw	r24, r16
    168c:	86 58       	subi	r24, 0x86	; 134
    168e:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[1], 1);
    1690:	b3 d4       	rcall	.+2406   	; 0x1ff8 <outputS>
    1692:	61 e0       	ldi	r22, 0x01	; 1
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	c8 01       	movw	r24, r16
    1698:	81 57       	subi	r24, 0x71	; 113
    169a:	9e 4f       	sbci	r25, 0xFE	; 254
    169c:	ad d4       	rcall	.+2394   	; 0x1ff8 <outputS>
			outputS(menuScreen->screen2[2], 2);
    169e:	62 e0       	ldi	r22, 0x02	; 2
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	c8 01       	movw	r24, r16
    16a4:	8c 55       	subi	r24, 0x5C	; 92
    16a6:	9e 4f       	sbci	r25, 0xFE	; 254
    16a8:	a7 d4       	rcall	.+2382   	; 0x1ff8 <outputS>
			outputS(menuScreen->screen2[3], 3);
    16aa:	63 e0       	ldi	r22, 0x03	; 3
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	c8 01       	movw	r24, r16
    16b0:	87 54       	subi	r24, 0x47	; 71
    16b2:	9e 4f       	sbci	r25, 0xFE	; 254
    16b4:	a1 d4       	rcall	.+2370   	; 0x1ff8 <outputS>
			currentGlobals->menuState = TrackMenuArrow1;
    16b6:	81 e2       	ldi	r24, 0x21	; 33
		
			case TrackMenuArrow1:
			menuScreen->screen2[1][19]= 8;
    16b8:	8e 83       	std	Y+6, r24	; 0x06
    16ba:	88 e0       	ldi	r24, 0x08	; 8
    16bc:	f8 01       	movw	r30, r16
    16be:	ee 55       	subi	r30, 0x5E	; 94
    16c0:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    16c2:	80 83       	st	Z, r24
    16c4:	80 e2       	ldi	r24, 0x20	; 32
    16c6:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    16c8:	80 83       	st	Z, r24
    16ca:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    16cc:	80 83       	st	Z, r24
    16ce:	61 e0       	ldi	r22, 0x01	; 1
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	c8 01       	movw	r24, r16
    16d4:	81 57       	subi	r24, 0x71	; 113
    16d6:	9e 4f       	sbci	r25, 0xFE	; 254
    16d8:	8f d4       	rcall	.+2334   	; 0x1ff8 <outputS>
			outputS(menuScreen->screen2[2], 2);
    16da:	62 e0       	ldi	r22, 0x02	; 2
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	c8 01       	movw	r24, r16
    16e0:	8c 55       	subi	r24, 0x5C	; 92
    16e2:	9e 4f       	sbci	r25, 0xFE	; 254
    16e4:	89 d4       	rcall	.+2322   	; 0x1ff8 <outputS>
			outputS(menuScreen->screen2[3], 3);
    16e6:	63 e0       	ldi	r22, 0x03	; 3
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	c8 01       	movw	r24, r16
    16ec:	87 54       	subi	r24, 0x47	; 71
    16ee:	9e 4f       	sbci	r25, 0xFE	; 254
    16f0:	83 d4       	rcall	.+2310   	; 0x1ff8 <outputS>
			break;
    16f2:	2f c1       	rjmp	.+606    	; 0x1952 <updateScreen+0x46e>
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	9b 01       	movw	r18, r22
    16f8:	28 0f       	add	r18, r24
    16fa:	31 1d       	adc	r19, r1
    16fc:	f9 01       	movw	r30, r18
    16fe:	e8 56       	subi	r30, 0x68	; 104
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    1702:	20 81       	ld	r18, Z
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	32 2f       	mov	r19, r18
    1708:	22 27       	eor	r18, r18
			outputS(menuScreen->screen2[2], 2);
			outputS(menuScreen->screen2[3], 3);
			break;
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    170a:	70 96       	adiw	r30, 0x10	; 16
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    170c:	80 81       	ld	r24, Z
    170e:	28 2b       	or	r18, r24
    1710:	44 e0       	ldi	r20, 0x04	; 4
    1712:	6a e0       	ldi	r22, 0x0A	; 10
    1714:	78 01       	movw	r14, r16
    1716:	81 e7       	ldi	r24, 0x71	; 113
    1718:	e8 1a       	sub	r14, r24
    171a:	8e ef       	ldi	r24, 0xFE	; 254
    171c:	f8 0a       	sbc	r15, r24
    171e:	c7 01       	movw	r24, r14
			outputS(menuScreen->screen2[1],1);
    1720:	83 d4       	rcall	.+2310   	; 0x2028 <numPrinter>
    1722:	61 e0       	ldi	r22, 0x01	; 1
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	c7 01       	movw	r24, r14
			break;
    1728:	67 d4       	rcall	.+2254   	; 0x1ff8 <outputS>
	
			case TrackMenuArrow2:
			menuScreen->screen2[1][19]= ' ';
    172a:	13 c1       	rjmp	.+550    	; 0x1952 <updateScreen+0x46e>
    172c:	80 e2       	ldi	r24, 0x20	; 32
    172e:	f8 01       	movw	r30, r16
    1730:	ee 55       	subi	r30, 0x5E	; 94
    1732:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = 8;
    1734:	80 83       	st	Z, r24
    1736:	98 e0       	ldi	r25, 0x08	; 8
    1738:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    173a:	90 83       	st	Z, r25
    173c:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    173e:	80 83       	st	Z, r24
    1740:	61 e0       	ldi	r22, 0x01	; 1
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	c8 01       	movw	r24, r16
    1746:	81 57       	subi	r24, 0x71	; 113
    1748:	9e 4f       	sbci	r25, 0xFE	; 254
    174a:	56 d4       	rcall	.+2220   	; 0x1ff8 <outputS>
			outputS(menuScreen->screen2[2], 2);
    174c:	62 e0       	ldi	r22, 0x02	; 2
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	c8 01       	movw	r24, r16
    1752:	8c 55       	subi	r24, 0x5C	; 92
    1754:	9e 4f       	sbci	r25, 0xFE	; 254
    1756:	50 d4       	rcall	.+2208   	; 0x1ff8 <outputS>
    1758:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[3], 3);
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	c8 01       	movw	r24, r16
    175e:	87 54       	subi	r24, 0x47	; 71
    1760:	9e 4f       	sbci	r25, 0xFE	; 254
    1762:	4a d4       	rcall	.+2196   	; 0x1ff8 <outputS>
    1764:	f6 c0       	rjmp	.+492    	; 0x1952 <updateScreen+0x46e>
    1766:	8d 81       	ldd	r24, Y+5	; 0x05
			break;
    1768:	fb 01       	movw	r30, r22
		
			case TrackMenuArrow2Select:
			//we need some serious button code in these two cases. 
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    176a:	e8 0f       	add	r30, r24
    176c:	f1 1d       	adc	r31, r1
    176e:	e8 57       	subi	r30, 0x78	; 120
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	80 81       	ld	r24, Z
    1774:	88 23       	and	r24, r24
    1776:	19 f0       	breq	.+6      	; 0x177e <updateScreen+0x29a>
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	79 f0       	breq	.+30     	; 0x179a <updateScreen+0x2b6>
    177c:	1c c0       	rjmp	.+56     	; 0x17b6 <updateScreen+0x2d2>
    177e:	83 e5       	ldi	r24, 0x53	; 83
			{
				case 0:
				menuScreen->screen2[2][10] = 'S';
    1780:	f8 01       	movw	r30, r16
    1782:	e2 55       	subi	r30, 0x52	; 82
    1784:	fe 4f       	sbci	r31, 0xFE	; 254
    1786:	80 83       	st	Z, r24
    1788:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[2][11] = 'o';
    178a:	31 96       	adiw	r30, 0x01	; 1
    178c:	80 83       	st	Z, r24
    178e:	9c e6       	ldi	r25, 0x6C	; 108
				menuScreen->screen2[2][12] = 'l';
    1790:	31 96       	adiw	r30, 0x01	; 1
    1792:	90 83       	st	Z, r25
    1794:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'o';
    1796:	80 83       	st	Z, r24
    1798:	0e c0       	rjmp	.+28     	; 0x17b6 <updateScreen+0x2d2>
				break;
    179a:	80 e5       	ldi	r24, 0x50	; 80

				case 1:
				menuScreen->screen2[2][10] = 'P';
    179c:	f8 01       	movw	r30, r16
    179e:	e2 55       	subi	r30, 0x52	; 82
    17a0:	fe 4f       	sbci	r31, 0xFE	; 254
    17a2:	80 83       	st	Z, r24
				menuScreen->screen2[2][11] = 'o';
    17a4:	8f e6       	ldi	r24, 0x6F	; 111
    17a6:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][12] = 'l';
    17a8:	80 83       	st	Z, r24
    17aa:	8c e6       	ldi	r24, 0x6C	; 108
    17ac:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'y';
    17ae:	80 83       	st	Z, r24
    17b0:	89 e7       	ldi	r24, 0x79	; 121
	
				case 3:
				break;
			}
			
			outputS(menuScreen->screen2[2], 2);
    17b2:	31 96       	adiw	r30, 0x01	; 1
    17b4:	80 83       	st	Z, r24
    17b6:	62 e0       	ldi	r22, 0x02	; 2
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	c8 01       	movw	r24, r16
    17bc:	8c 55       	subi	r24, 0x5C	; 92
    17be:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    17c0:	1b d4       	rcall	.+2102   	; 0x1ff8 <outputS>

			case TrackMenuArrow3:
			menuScreen->screen2[1][19]= ' ';
    17c2:	c7 c0       	rjmp	.+398    	; 0x1952 <updateScreen+0x46e>
    17c4:	80 e2       	ldi	r24, 0x20	; 32
    17c6:	f8 01       	movw	r30, r16
    17c8:	ee 55       	subi	r30, 0x5E	; 94
    17ca:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    17cc:	80 83       	st	Z, r24
    17ce:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = 8;
    17d0:	80 83       	st	Z, r24
    17d2:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[1], 1);
    17d4:	75 96       	adiw	r30, 0x15	; 21
    17d6:	80 83       	st	Z, r24
    17d8:	61 e0       	ldi	r22, 0x01	; 1
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	c8 01       	movw	r24, r16
    17de:	81 57       	subi	r24, 0x71	; 113
			outputS(menuScreen->screen2[2], 2);
    17e0:	9e 4f       	sbci	r25, 0xFE	; 254
    17e2:	0a d4       	rcall	.+2068   	; 0x1ff8 <outputS>
    17e4:	62 e0       	ldi	r22, 0x02	; 2
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	c8 01       	movw	r24, r16
    17ea:	8c 55       	subi	r24, 0x5C	; 92
			outputS(menuScreen->screen2[3], 3);
    17ec:	9e 4f       	sbci	r25, 0xFE	; 254
    17ee:	04 d4       	rcall	.+2056   	; 0x1ff8 <outputS>
    17f0:	63 e0       	ldi	r22, 0x03	; 3
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	c8 01       	movw	r24, r16
    17f6:	87 54       	subi	r24, 0x47	; 71
			break;
		
			case TrackMenuArrow3Select:
			numPrinter(menuScreen->screen2[3],10,2,(currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1);
    17f8:	9e 4f       	sbci	r25, 0xFE	; 254
    17fa:	fe d3       	rcall	.+2044   	; 0x1ff8 <outputS>
    17fc:	aa c0       	rjmp	.+340    	; 0x1952 <updateScreen+0x46e>
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	fb 01       	movw	r30, r22
    1802:	e8 0f       	add	r30, r24
    1804:	f1 1d       	adc	r31, r1
    1806:	20 8d       	ldd	r18, Z+24	; 0x18
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	2f 5f       	subi	r18, 0xFF	; 255
    180c:	3f 4f       	sbci	r19, 0xFF	; 255
    180e:	42 e0       	ldi	r20, 0x02	; 2
    1810:	6a e0       	ldi	r22, 0x0A	; 10
    1812:	78 01       	movw	r14, r16
    1814:	a7 e4       	ldi	r26, 0x47	; 71
    1816:	ea 1a       	sub	r14, r26
    1818:	ae ef       	ldi	r26, 0xFE	; 254
			outputS(menuScreen->screen2[3],3);
    181a:	fa 0a       	sbc	r15, r26
    181c:	c7 01       	movw	r24, r14
    181e:	04 d4       	rcall	.+2056   	; 0x2028 <numPrinter>
    1820:	63 e0       	ldi	r22, 0x03	; 3
    1822:	70 e0       	ldi	r23, 0x00	; 0
			break;

			case GlobalMenuInit:
			outputS(menuScreen->screen3[0], 0);
    1824:	c7 01       	movw	r24, r14
    1826:	e8 d3       	rcall	.+2000   	; 0x1ff8 <outputS>
    1828:	94 c0       	rjmp	.+296    	; 0x1952 <updateScreen+0x46e>
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[1], 1);
    1830:	89 5c       	subi	r24, 0xC9	; 201
    1832:	9d 4f       	sbci	r25, 0xFD	; 253
    1834:	e1 d3       	rcall	.+1986   	; 0x1ff8 <outputS>
    1836:	61 e0       	ldi	r22, 0x01	; 1
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    183c:	84 5b       	subi	r24, 0xB4	; 180
    183e:	9d 4f       	sbci	r25, 0xFD	; 253
    1840:	db d3       	rcall	.+1974   	; 0x1ff8 <outputS>
    1842:	62 e0       	ldi	r22, 0x02	; 2
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	c8 01       	movw	r24, r16
    1848:	8f 59       	subi	r24, 0x9F	; 159
			outputS(menuScreen->screen3[3], 3);
    184a:	9d 4f       	sbci	r25, 0xFD	; 253
    184c:	d5 d3       	rcall	.+1962   	; 0x1ff8 <outputS>
    184e:	63 e0       	ldi	r22, 0x03	; 3
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	c8 01       	movw	r24, r16
    1854:	8a 58       	subi	r24, 0x8A	; 138
			currentGlobals->menuState = GlobalMenuArrow1;
    1856:	9d 4f       	sbci	r25, 0xFD	; 253

			case GlobalMenuArrow1:
			menuScreen->screen3[1][19]= 8;
    1858:	cf d3       	rcall	.+1950   	; 0x1ff8 <outputS>
    185a:	81 e3       	ldi	r24, 0x31	; 49
    185c:	8e 83       	std	Y+6, r24	; 0x06
    185e:	88 e0       	ldi	r24, 0x08	; 8
    1860:	f8 01       	movw	r30, r16
			menuScreen->screen3[2][19] = ' ';
    1862:	e1 5a       	subi	r30, 0xA1	; 161
    1864:	fd 4f       	sbci	r31, 0xFD	; 253
    1866:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    1868:	80 e2       	ldi	r24, 0x20	; 32
    186a:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen3[1], 1);
    186c:	80 83       	st	Z, r24
    186e:	75 96       	adiw	r30, 0x15	; 21
    1870:	80 83       	st	Z, r24
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1878:	84 5b       	subi	r24, 0xB4	; 180
    187a:	9d 4f       	sbci	r25, 0xFD	; 253
    187c:	bd d3       	rcall	.+1914   	; 0x1ff8 <outputS>
    187e:	62 e0       	ldi	r22, 0x02	; 2
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1884:	8f 59       	subi	r24, 0x9F	; 159
    1886:	9d 4f       	sbci	r25, 0xFD	; 253
    1888:	b7 d3       	rcall	.+1902   	; 0x1ff8 <outputS>
    188a:	63 e0       	ldi	r22, 0x03	; 3
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	c8 01       	movw	r24, r16
			break;
    1890:	8a 58       	subi	r24, 0x8A	; 138
			
			case GlobalMenuArrow1Select:
			numPrinter(menuScreen->screen3[1],14,2,(currentGlobals->midiChannel)+1);
    1892:	9d 4f       	sbci	r25, 0xFD	; 253
    1894:	b1 d3       	rcall	.+1890   	; 0x1ff8 <outputS>
    1896:	5d c0       	rjmp	.+186    	; 0x1952 <updateScreen+0x46e>
    1898:	2c 85       	ldd	r18, Y+12	; 0x0c
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	2f 5f       	subi	r18, 0xFF	; 255
    189e:	3f 4f       	sbci	r19, 0xFF	; 255
    18a0:	42 e0       	ldi	r20, 0x02	; 2
    18a2:	6e e0       	ldi	r22, 0x0E	; 14
    18a4:	78 01       	movw	r14, r16
    18a6:	b4 eb       	ldi	r27, 0xB4	; 180
    18a8:	eb 1a       	sub	r14, r27
    18aa:	bd ef       	ldi	r27, 0xFD	; 253
			outputS(menuScreen->screen3[1],1);
    18ac:	fb 0a       	sbc	r15, r27
    18ae:	c7 01       	movw	r24, r14
    18b0:	bb d3       	rcall	.+1910   	; 0x2028 <numPrinter>
    18b2:	61 e0       	ldi	r22, 0x01	; 1
			break;
    18b4:	70 e0       	ldi	r23, 0x00	; 0

			case GlobalMenuArrow2:
			menuScreen->screen3[1][19]= ' ';
    18b6:	c7 01       	movw	r24, r14
    18b8:	9f d3       	rcall	.+1854   	; 0x1ff8 <outputS>
    18ba:	4b c0       	rjmp	.+150    	; 0x1952 <updateScreen+0x46e>
    18bc:	80 e2       	ldi	r24, 0x20	; 32
    18be:	f8 01       	movw	r30, r16
			menuScreen->screen3[2][19] = 8;
    18c0:	e1 5a       	subi	r30, 0xA1	; 161
    18c2:	fd 4f       	sbci	r31, 0xFD	; 253
    18c4:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    18c6:	98 e0       	ldi	r25, 0x08	; 8
    18c8:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen3[1], 1);
    18ca:	90 83       	st	Z, r25
    18cc:	75 96       	adiw	r30, 0x15	; 21
    18ce:	80 83       	st	Z, r24
    18d0:	61 e0       	ldi	r22, 0x01	; 1
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    18d6:	84 5b       	subi	r24, 0xB4	; 180
    18d8:	9d 4f       	sbci	r25, 0xFD	; 253
    18da:	8e d3       	rcall	.+1820   	; 0x1ff8 <outputS>
    18dc:	62 e0       	ldi	r22, 0x02	; 2
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    18e2:	8f 59       	subi	r24, 0x9F	; 159
    18e4:	9d 4f       	sbci	r25, 0xFD	; 253
    18e6:	88 d3       	rcall	.+1808   	; 0x1ff8 <outputS>
    18e8:	63 e0       	ldi	r22, 0x03	; 3
    18ea:	70 e0       	ldi	r23, 0x00	; 0
    18ec:	c8 01       	movw	r24, r16
    18ee:	8a 58       	subi	r24, 0x8A	; 138
			break;
    18f0:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow2Select:
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    18f2:	82 d3       	rcall	.+1796   	; 0x1ff8 <outputS>
    18f4:	2e c0       	rjmp	.+92     	; 0x1952 <updateScreen+0x46e>
    18f6:	8d 81       	ldd	r24, Y+5	; 0x05
    18f8:	fa 01       	movw	r30, r20
    18fa:	e8 0f       	add	r30, r24
    18fc:	f1 1d       	adc	r31, r1
    18fe:	45 85       	ldd	r20, Z+13	; 0x0d
    1900:	6e e0       	ldi	r22, 0x0E	; 14
    1902:	78 01       	movw	r14, r16
    1904:	2f e9       	ldi	r18, 0x9F	; 159
    1906:	e2 1a       	sub	r14, r18
    1908:	2d ef       	ldi	r18, 0xFD	; 253
    190a:	f2 0a       	sbc	r15, r18
    190c:	c7 01       	movw	r24, r14
			outputS(menuScreen->screen3[2],2);
    190e:	52 d5       	rcall	.+2724   	; 0x23b4 <midiNotePrinter>
    1910:	62 e0       	ldi	r22, 0x02	; 2
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	c7 01       	movw	r24, r14
    1916:	70 d3       	rcall	.+1760   	; 0x1ff8 <outputS>
			break;
    1918:	1c c0       	rjmp	.+56     	; 0x1952 <updateScreen+0x46e>

			case GlobalMenuArrow3:
			menuScreen->screen3[1][19]= ' ';
    191a:	80 e2       	ldi	r24, 0x20	; 32
    191c:	f8 01       	movw	r30, r16
    191e:	e1 5a       	subi	r30, 0xA1	; 161
    1920:	fd 4f       	sbci	r31, 0xFD	; 253
    1922:	80 83       	st	Z, r24
			menuScreen->screen3[2][19] = ' ';
    1924:	75 96       	adiw	r30, 0x15	; 21
    1926:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = 8;
    1928:	88 e0       	ldi	r24, 0x08	; 8
    192a:	75 96       	adiw	r30, 0x15	; 21
    192c:	80 83       	st	Z, r24
			outputS(menuScreen->screen3[1], 1);
    192e:	61 e0       	ldi	r22, 0x01	; 1
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	c8 01       	movw	r24, r16
    1934:	84 5b       	subi	r24, 0xB4	; 180
    1936:	9d 4f       	sbci	r25, 0xFD	; 253
    1938:	5f d3       	rcall	.+1726   	; 0x1ff8 <outputS>
			outputS(menuScreen->screen3[2], 2);
    193a:	62 e0       	ldi	r22, 0x02	; 2
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	c8 01       	movw	r24, r16
    1940:	8f 59       	subi	r24, 0x9F	; 159
    1942:	9d 4f       	sbci	r25, 0xFD	; 253
    1944:	59 d3       	rcall	.+1714   	; 0x1ff8 <outputS>
			outputS(menuScreen->screen3[3], 3);
    1946:	63 e0       	ldi	r22, 0x03	; 3
    1948:	70 e0       	ldi	r23, 0x00	; 0
    194a:	c8 01       	movw	r24, r16
    194c:	8a 58       	subi	r24, 0x8A	; 138
    194e:	9d 4f       	sbci	r25, 0xFD	; 253
    1950:	53 d3       	rcall	.+1702   	; 0x1ff8 <outputS>
    1952:	8e 81       	ldd	r24, Y+6	; 0x06
			break;
		}
		prevMenuState = currentGlobals->menuState;
    1954:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <prevMenuState>
    1958:	8a 85       	ldd	r24, Y+10	; 0x0a
	}
	//We should only reach this in track selection and global settings for setting midi notes. 
	if(currentGlobals->valueChangeFlag&(1<<triggerChange))
    195a:	81 ff       	sbrs	r24, 1
    195c:	8a c0       	rjmp	.+276    	; 0x1a72 <updateScreen+0x58e>
    195e:	1a 86       	std	Y+10, r1	; 0x0a
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0<<triggerChange);
    1960:	8e 81       	ldd	r24, Y+6	; 0x06
		switch((currentGlobals->menuState)>>4) //we don't need to worry about what the bottom encoder is doing.  
    1962:	82 95       	swap	r24
    1964:	8f 70       	andi	r24, 0x0F	; 15
    1966:	82 30       	cpi	r24, 0x02	; 2
    1968:	21 f0       	breq	.+8      	; 0x1972 <updateScreen+0x48e>
    196a:	83 30       	cpi	r24, 0x03	; 3
    196c:	09 f4       	brne	.+2      	; 0x1970 <updateScreen+0x48c>
    196e:	68 c0       	rjmp	.+208    	; 0x1a40 <updateScreen+0x55c>
    1970:	80 c0       	rjmp	.+256    	; 0x1a72 <updateScreen+0x58e>
    1972:	2d 81       	ldd	r18, Y+5	; 0x05
		{
			case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	c6 01       	movw	r24, r12
    1978:	82 0f       	add	r24, r18
    197a:	93 1f       	adc	r25, r19
    197c:	fc 01       	movw	r30, r24
    197e:	e8 56       	subi	r30, 0x68	; 104
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	e0 80       	ld	r14, Z
    1984:	f1 2c       	mov	r15, r1
    1986:	fe 2c       	mov	r15, r14
    1988:	ee 24       	eor	r14, r14
    198a:	70 96       	adiw	r30, 0x10	; 16
    198c:	80 81       	ld	r24, Z
    198e:	e8 2a       	or	r14, r24
    1990:	58 01       	movw	r10, r16
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack)+1);
    1992:	81 e7       	ldi	r24, 0x71	; 113
    1994:	a8 1a       	sub	r10, r24
    1996:	8e ef       	ldi	r24, 0xFE	; 254
    1998:	b8 0a       	sbc	r11, r24
    199a:	2f 5f       	subi	r18, 0xFF	; 255
    199c:	3f 4f       	sbci	r19, 0xFF	; 255
    199e:	42 e0       	ldi	r20, 0x02	; 2
    19a0:	67 e0       	ldi	r22, 0x07	; 7
    19a2:	c5 01       	movw	r24, r10
    19a4:	41 d3       	rcall	.+1666   	; 0x2028 <numPrinter>
    19a6:	97 01       	movw	r18, r14
    19a8:	44 e0       	ldi	r20, 0x04	; 4
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
    19aa:	6a e0       	ldi	r22, 0x0A	; 10
    19ac:	c5 01       	movw	r24, r10
    19ae:	3c d3       	rcall	.+1656   	; 0x2028 <numPrinter>
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	f6 01       	movw	r30, r12
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
					switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    19b4:	e8 0f       	add	r30, r24
    19b6:	f1 1d       	adc	r31, r1
    19b8:	e8 57       	subi	r30, 0x78	; 120
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	80 81       	ld	r24, Z
    19be:	88 23       	and	r24, r24
    19c0:	19 f0       	breq	.+6      	; 0x19c8 <updateScreen+0x4e4>
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	79 f0       	breq	.+30     	; 0x19e4 <updateScreen+0x500>
    19c6:	1c c0       	rjmp	.+56     	; 0x1a00 <updateScreen+0x51c>
					{
						case 0:
						menuScreen->screen2[2][10] = 'S';
    19c8:	83 e5       	ldi	r24, 0x53	; 83
    19ca:	f8 01       	movw	r30, r16
    19cc:	e2 55       	subi	r30, 0x52	; 82
    19ce:	fe 4f       	sbci	r31, 0xFE	; 254
    19d0:	80 83       	st	Z, r24
						menuScreen->screen2[2][11] = 'o';
    19d2:	8f e6       	ldi	r24, 0x6F	; 111
    19d4:	31 96       	adiw	r30, 0x01	; 1
    19d6:	80 83       	st	Z, r24
						menuScreen->screen2[2][12] = 'l';
    19d8:	9c e6       	ldi	r25, 0x6C	; 108
    19da:	31 96       	adiw	r30, 0x01	; 1
    19dc:	90 83       	st	Z, r25
						menuScreen->screen2[2][13] = 'o';
    19de:	31 96       	adiw	r30, 0x01	; 1
						break;
    19e0:	80 83       	st	Z, r24

						case 1:
						menuScreen->screen2[2][10] = 'P';
    19e2:	0e c0       	rjmp	.+28     	; 0x1a00 <updateScreen+0x51c>
    19e4:	80 e5       	ldi	r24, 0x50	; 80
    19e6:	f8 01       	movw	r30, r16
    19e8:	e2 55       	subi	r30, 0x52	; 82
    19ea:	fe 4f       	sbci	r31, 0xFE	; 254
						menuScreen->screen2[2][11] = 'o';
    19ec:	80 83       	st	Z, r24
    19ee:	8f e6       	ldi	r24, 0x6F	; 111
						menuScreen->screen2[2][12] = 'l';
    19f0:	31 96       	adiw	r30, 0x01	; 1
    19f2:	80 83       	st	Z, r24
						menuScreen->screen2[2][13] = 'y';
    19f4:	8c e6       	ldi	r24, 0x6C	; 108
    19f6:	31 96       	adiw	r30, 0x01	; 1
    19f8:	80 83       	st	Z, r24

						case 3:
						break;
					}
					
			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack]+1));
    19fa:	89 e7       	ldi	r24, 0x79	; 121
    19fc:	31 96       	adiw	r30, 0x01	; 1
    19fe:	80 83       	st	Z, r24
    1a00:	8d 81       	ldd	r24, Y+5	; 0x05
    1a02:	f6 01       	movw	r30, r12
    1a04:	e8 0f       	add	r30, r24
    1a06:	f1 1d       	adc	r31, r1
    1a08:	20 8d       	ldd	r18, Z+24	; 0x18
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	2f 5f       	subi	r18, 0xFF	; 255
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	42 e0       	ldi	r20, 0x02	; 2
    1a12:	6a e0       	ldi	r22, 0x0A	; 10
    1a14:	78 01       	movw	r14, r16
    1a16:	a7 e4       	ldi	r26, 0x47	; 71
    1a18:	ea 1a       	sub	r14, r26
    1a1a:	ae ef       	ldi	r26, 0xFE	; 254
    1a1c:	fa 0a       	sbc	r15, r26
			outputS(menuScreen->screen2[1], 1);
    1a1e:	c7 01       	movw	r24, r14
    1a20:	03 d3       	rcall	.+1542   	; 0x2028 <numPrinter>
    1a22:	61 e0       	ldi	r22, 0x01	; 1
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	c5 01       	movw	r24, r10
			outputS(menuScreen->screen2[2], 2);
    1a28:	e7 d2       	rcall	.+1486   	; 0x1ff8 <outputS>
    1a2a:	62 e0       	ldi	r22, 0x02	; 2
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	c8 01       	movw	r24, r16
    1a30:	8c 55       	subi	r24, 0x5C	; 92
    1a32:	9e 4f       	sbci	r25, 0xFE	; 254
    1a34:	e1 d2       	rcall	.+1474   	; 0x1ff8 <outputS>
			outputS(menuScreen->screen2[3], 3);
    1a36:	63 e0       	ldi	r22, 0x03	; 3
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	c7 01       	movw	r24, r14
    1a3c:	dd d2       	rcall	.+1466   	; 0x1ff8 <outputS>
    1a3e:	19 c0       	rjmp	.+50     	; 0x1a72 <updateScreen+0x58e>
			break;
    1a40:	2d 81       	ldd	r18, Y+5	; 0x05
			
			case 3:;
			//do we need this variable?
			numPrinter(menuScreen->screen3[2],10,2,(currentGlobals->currentTrack)+1);
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	2f 5f       	subi	r18, 0xFF	; 255
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	42 e0       	ldi	r20, 0x02	; 2
    1a4a:	6a e0       	ldi	r22, 0x0A	; 10
    1a4c:	78 01       	movw	r14, r16
    1a4e:	bf e9       	ldi	r27, 0x9F	; 159
    1a50:	eb 1a       	sub	r14, r27
    1a52:	bd ef       	ldi	r27, 0xFD	; 253
    1a54:	fb 0a       	sbc	r15, r27
    1a56:	c7 01       	movw	r24, r14
    1a58:	e7 d2       	rcall	.+1486   	; 0x2028 <numPrinter>
    1a5a:	8d 81       	ldd	r24, Y+5	; 0x05
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e8 0f       	add	r30, r24
    1a60:	f1 1d       	adc	r31, r1
    1a62:	45 85       	ldd	r20, Z+13	; 0x0d
    1a64:	6e e0       	ldi	r22, 0x0E	; 14
    1a66:	c7 01       	movw	r24, r14
    1a68:	a5 d4       	rcall	.+2378   	; 0x23b4 <midiNotePrinter>
    1a6a:	62 e0       	ldi	r22, 0x02	; 2
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[2],2);
    1a6e:	c7 01       	movw	r24, r14
    1a70:	c3 d2       	rcall	.+1414   	; 0x1ff8 <outputS>
    1a72:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a74:	82 ff       	sbrs	r24, 2
    1a76:	26 c1       	rjmp	.+588    	; 0x1cc4 <updateScreen+0x7e0>
			break;
			
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange)) // since this is the last check, we don't really need this & operation. It just reads a bit better.
    1a78:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a7a:	98 2f       	mov	r25, r24
    1a7c:	9f 70       	andi	r25, 0x0F	; 15
	{
		//so, it seems like the responsiveness of this implementation is a lot slower than printing inside of the interpret knob method. 
		//Not sure why, will look into it later. For now, it works, and testing for this will be on the to-do list. 
		
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
    1a7e:	82 95       	swap	r24
    1a80:	8f 70       	andi	r24, 0x0F	; 15
    1a82:	82 30       	cpi	r24, 0x02	; 2
		if(positionSelect>15)
		{
			outputS("OVER 15",0);
		}

		switch((currentGlobals->knobStatus)>>4)
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <updateScreen+0x5a4>
    1a86:	8e c0       	rjmp	.+284    	; 0x1ba4 <updateScreen+0x6c0>
    1a88:	30 f4       	brcc	.+12     	; 0x1a96 <updateScreen+0x5b2>
    1a8a:	88 23       	and	r24, r24
    1a8c:	69 f0       	breq	.+26     	; 0x1aa8 <updateScreen+0x5c4>
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <updateScreen+0x5b0>
    1a92:	51 c0       	rjmp	.+162    	; 0x1b36 <updateScreen+0x652>
    1a94:	16 c1       	rjmp	.+556    	; 0x1cc2 <updateScreen+0x7de>
    1a96:	84 30       	cpi	r24, 0x04	; 4
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <updateScreen+0x5b8>
    1a9a:	ba c0       	rjmp	.+372    	; 0x1c10 <updateScreen+0x72c>
    1a9c:	08 f4       	brcc	.+2      	; 0x1aa0 <updateScreen+0x5bc>
    1a9e:	9d c0       	rjmp	.+314    	; 0x1bda <updateScreen+0x6f6>
    1aa0:	85 30       	cpi	r24, 0x05	; 5
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <updateScreen+0x5c2>
    1aa4:	fc c0       	rjmp	.+504    	; 0x1c9e <updateScreen+0x7ba>
    1aa6:	0d c1       	rjmp	.+538    	; 0x1cc2 <updateScreen+0x7de>
    1aa8:	e9 2e       	mov	r14, r25
    1aaa:	f1 2c       	mov	r15, r1
    1aac:	f6 01       	movw	r30, r12
		{
			case 0: //output volume
			if((currentPattern->outputLevelMSB[positionSelect])==0)
    1aae:	ee 0d       	add	r30, r14
    1ab0:	ff 1d       	adc	r31, r15
    1ab2:	80 81       	ld	r24, Z
    1ab4:	81 11       	cpse	r24, r1
    1ab6:	0c c0       	rjmp	.+24     	; 0x1ad0 <updateScreen+0x5ec>
    1ab8:	f6 01       	movw	r30, r12
    1aba:	ee 0d       	add	r30, r14
			{ //value is positive
				numPrinter(menuScreen->knobScreen[0],14,3,currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
    1abc:	ff 1d       	adc	r31, r15
    1abe:	20 85       	ldd	r18, Z+8	; 0x08
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	43 e0       	ldi	r20, 0x03	; 3
    1ac4:	6e e0       	ldi	r22, 0x0E	; 14
    1ac6:	c8 01       	movw	r24, r16
    1ac8:	88 50       	subi	r24, 0x08	; 8
    1aca:	9d 4f       	sbci	r25, 0xFD	; 253
    1acc:	ad d2       	rcall	.+1370   	; 0x2028 <numPrinter>
    1ace:	25 c0       	rjmp	.+74     	; 0x1b1a <updateScreen+0x636>
    1ad0:	8d e2       	ldi	r24, 0x2D	; 45
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	ea 5f       	subi	r30, 0xFA	; 250
			}else
			{
				menuScreen->knobScreen[0][14] = '-';
    1ad6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ad8:	80 83       	st	Z, r24
    1ada:	31 96       	adiw	r30, 0x01	; 1
    1adc:	ec 0c       	add	r14, r12
    1ade:	fd 1c       	adc	r15, r13
				menuScreen->knobScreen[0][15] = ((((currentPattern->outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    1ae0:	d7 01       	movw	r26, r14
    1ae2:	18 96       	adiw	r26, 0x08	; 8
    1ae4:	8c 91       	ld	r24, X
    1ae6:	80 95       	com	r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	01 96       	adiw	r24, 0x01	; 1
    1aec:	64 e6       	ldi	r22, 0x64	; 100
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	0e 94 b4 19 	call	0x3368	; 0x3368 <__divmodhi4>
    1af4:	2a e0       	ldi	r18, 0x0A	; 10
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	b9 01       	movw	r22, r18
    1afa:	0e 94 b4 19 	call	0x3368	; 0x3368 <__divmodhi4>
    1afe:	60 5d       	subi	r22, 0xD0	; 208
    1b00:	60 83       	st	Z, r22
    1b02:	31 96       	adiw	r30, 0x01	; 1
    1b04:	d7 01       	movw	r26, r14
				menuScreen->knobScreen[0][16] = (((currentPattern->outputLevelLSB[positionSelect]^255)+1)%10)+48;
    1b06:	18 96       	adiw	r26, 0x08	; 8
    1b08:	8c 91       	ld	r24, X
    1b0a:	80 95       	com	r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	01 96       	adiw	r24, 0x01	; 1
    1b10:	b9 01       	movw	r22, r18
    1b12:	0e 94 b4 19 	call	0x3368	; 0x3368 <__divmodhi4>
    1b16:	80 5d       	subi	r24, 0xD0	; 208
    1b18:	80 83       	st	Z, r24
			}
				
			menuScreen->knobScreen[0][10] = (currentGlobals->knobStatus&0x0F) + 49;
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	ee 5f       	subi	r30, 0xFE	; 254
    1b1e:	fc 4f       	sbci	r31, 0xFC	; 252
    1b20:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b22:	8f 70       	andi	r24, 0x0F	; 15
    1b24:	8f 5c       	subi	r24, 0xCF	; 207
    1b26:	80 83       	st	Z, r24
			outputS(menuScreen->knobScreen[0], 3);
    1b28:	63 e0       	ldi	r22, 0x03	; 3
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	c8 01       	movw	r24, r16
    1b2e:	88 50       	subi	r24, 0x08	; 8
    1b30:	9d 4f       	sbci	r25, 0xFD	; 253
    1b32:	62 d2       	rcall	.+1220   	; 0x1ff8 <outputS>
    1b34:	c6 c0       	rjmp	.+396    	; 0x1cc2 <updateScreen+0x7de>
			break;
				
			case 1: //pitch
			menuScreen->knobScreen[1][5] = positionSelect+49; 
    1b36:	f8 01       	movw	r30, r16
    1b38:	ee 5e       	subi	r30, 0xEE	; 238
    1b3a:	fc 4f       	sbci	r31, 0xFC	; 252
    1b3c:	81 e3       	ldi	r24, 0x31	; 49
    1b3e:	89 0f       	add	r24, r25
    1b40:	80 83       	st	Z, r24
			if(currentPattern->outputPitch[positionSelect]>>7)
    1b42:	e9 2e       	mov	r14, r25
    1b44:	f1 2c       	mov	r15, r1
    1b46:	f6 01       	movw	r30, r12
    1b48:	ee 0d       	add	r30, r14
    1b4a:	ff 1d       	adc	r31, r15
    1b4c:	80 89       	ldd	r24, Z+16	; 0x10
			{
				menuScreen->knobScreen[1][7] = '-';
    1b4e:	88 23       	and	r24, r24
    1b50:	94 f4       	brge	.+36     	; 0x1b76 <updateScreen+0x692>
    1b52:	8d e2       	ldi	r24, 0x2D	; 45
    1b54:	f8 01       	movw	r30, r16
    1b56:	ec 5e       	subi	r30, 0xEC	; 236
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect])^255);
    1b58:	fc 4f       	sbci	r31, 0xFC	; 252
    1b5a:	80 83       	st	Z, r24
    1b5c:	f6 01       	movw	r30, r12
    1b5e:	ee 0d       	add	r30, r14
    1b60:	ff 1d       	adc	r31, r15
    1b62:	20 89       	ldd	r18, Z+16	; 0x10
    1b64:	20 95       	com	r18
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	43 e0       	ldi	r20, 0x03	; 3
    1b6a:	68 e0       	ldi	r22, 0x08	; 8
    1b6c:	c8 01       	movw	r24, r16
    1b6e:	83 5f       	subi	r24, 0xF3	; 243
    1b70:	9c 4f       	sbci	r25, 0xFC	; 252
			}else
			{
				menuScreen->knobScreen[1][7] = '+';
    1b72:	5a d2       	rcall	.+1204   	; 0x2028 <numPrinter>
    1b74:	10 c0       	rjmp	.+32     	; 0x1b96 <updateScreen+0x6b2>
    1b76:	8b e2       	ldi	r24, 0x2B	; 43
    1b78:	f8 01       	movw	r30, r16
				numPrinter(menuScreen->knobScreen[1],8,3,currentPattern->outputPitch[positionSelect]);
    1b7a:	ec 5e       	subi	r30, 0xEC	; 236
    1b7c:	fc 4f       	sbci	r31, 0xFC	; 252
    1b7e:	80 83       	st	Z, r24
    1b80:	f6 01       	movw	r30, r12
    1b82:	ee 0d       	add	r30, r14
    1b84:	ff 1d       	adc	r31, r15
    1b86:	20 89       	ldd	r18, Z+16	; 0x10
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	43 e0       	ldi	r20, 0x03	; 3
    1b8c:	68 e0       	ldi	r22, 0x08	; 8
    1b8e:	c8 01       	movw	r24, r16
    1b90:	83 5f       	subi	r24, 0xF3	; 243
			}
			outputS(menuScreen->knobScreen[1],3);
    1b92:	9c 4f       	sbci	r25, 0xFC	; 252
    1b94:	49 d2       	rcall	.+1170   	; 0x2028 <numPrinter>
    1b96:	63 e0       	ldi	r22, 0x03	; 3
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	c8 01       	movw	r24, r16
    1b9c:	83 5f       	subi	r24, 0xF3	; 243
    1b9e:	9c 4f       	sbci	r25, 0xFC	; 252
			break;
				
			case 2: //attack envelope 				
			numPrinter(menuScreen->knobScreen[2],14, 4, currentPattern->trackAttackTimeLSB[positionSelect]);	
    1ba0:	2b d2       	rcall	.+1110   	; 0x1ff8 <outputS>
    1ba2:	8f c0       	rjmp	.+286    	; 0x1cc2 <updateScreen+0x7de>
    1ba4:	e9 2e       	mov	r14, r25
    1ba6:	f1 2c       	mov	r15, r1
    1ba8:	0e 5d       	subi	r16, 0xDE	; 222
    1baa:	1c 4f       	sbci	r17, 0xFC	; 252
    1bac:	ce 0c       	add	r12, r14
    1bae:	df 1c       	adc	r13, r15
    1bb0:	f6 01       	movw	r30, r12
    1bb2:	e8 5a       	subi	r30, 0xA8	; 168
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	20 81       	ld	r18, Z
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	44 e0       	ldi	r20, 0x04	; 4
    1bbc:	6e e0       	ldi	r22, 0x0E	; 14
    1bbe:	c8 01       	movw	r24, r16
			numPrinter(menuScreen->knobScreen[2],10,2,positionSelect+1);
    1bc0:	33 d2       	rcall	.+1126   	; 0x2028 <numPrinter>
    1bc2:	97 01       	movw	r18, r14
    1bc4:	2f 5f       	subi	r18, 0xFF	; 255
    1bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc8:	42 e0       	ldi	r20, 0x02	; 2
    1bca:	6a e0       	ldi	r22, 0x0A	; 10
    1bcc:	c8 01       	movw	r24, r16
    1bce:	2c d2       	rcall	.+1112   	; 0x2028 <numPrinter>
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
    1bd0:	63 e0       	ldi	r22, 0x03	; 3
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	c8 01       	movw	r24, r16
    1bd6:	10 d2       	rcall	.+1056   	; 0x1ff8 <outputS>
    1bd8:	74 c0       	rjmp	.+232    	; 0x1cc2 <updateScreen+0x7de>
			break;
    1bda:	e9 2e       	mov	r14, r25
				
			case 3: //envelope bottom knob
			numPrinter(menuScreen->knobScreen[3],14,4,currentPattern->trackReleaseTimeLSB[positionSelect]);
    1bdc:	f1 2c       	mov	r15, r1
    1bde:	09 5c       	subi	r16, 0xC9	; 201
    1be0:	1c 4f       	sbci	r17, 0xFC	; 252
    1be2:	ce 0c       	add	r12, r14
    1be4:	df 1c       	adc	r13, r15
    1be6:	f6 01       	movw	r30, r12
    1be8:	e8 58       	subi	r30, 0x88	; 136
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	20 81       	ld	r18, Z
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	44 e0       	ldi	r20, 0x04	; 4
    1bf2:	6e e0       	ldi	r22, 0x0E	; 14
    1bf4:	c8 01       	movw	r24, r16
    1bf6:	18 d2       	rcall	.+1072   	; 0x2028 <numPrinter>
    1bf8:	97 01       	movw	r18, r14
    1bfa:	2f 5f       	subi	r18, 0xFF	; 255
			numPrinter(menuScreen->knobScreen[3],11,2,positionSelect+1);
    1bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfe:	42 e0       	ldi	r20, 0x02	; 2
    1c00:	6b e0       	ldi	r22, 0x0B	; 11
    1c02:	c8 01       	movw	r24, r16
    1c04:	11 d2       	rcall	.+1058   	; 0x2028 <numPrinter>
    1c06:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->knobScreen[3], 3);
    1c08:	70 e0       	ldi	r23, 0x00	; 0
    1c0a:	c8 01       	movw	r24, r16
    1c0c:	f5 d1       	rcall	.+1002   	; 0x1ff8 <outputS>
    1c0e:	59 c0       	rjmp	.+178    	; 0x1cc2 <updateScreen+0x7de>
    1c10:	e9 2e       	mov	r14, r25
			break;
    1c12:	f1 2c       	mov	r15, r1
				
			case 4: //track volume
			if(currentPattern->trackMainVolumeMSB[positionSelect]==0)
    1c14:	f6 01       	movw	r30, r12
    1c16:	ee 0d       	add	r30, r14
    1c18:	ff 1d       	adc	r31, r15
    1c1a:	80 a5       	ldd	r24, Z+40	; 0x28
    1c1c:	81 11       	cpse	r24, r1
    1c1e:	0c c0       	rjmp	.+24     	; 0x1c38 <updateScreen+0x754>
    1c20:	f6 01       	movw	r30, r12
			{
				numPrinter(menuScreen->knobScreen[4],15, 2, currentPattern->trackMainVolumeLSB[positionSelect]);
    1c22:	ee 0d       	add	r30, r14
    1c24:	ff 1d       	adc	r31, r15
    1c26:	20 ad       	ldd	r18, Z+56	; 0x38
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	42 e0       	ldi	r20, 0x02	; 2
    1c2c:	6f e0       	ldi	r22, 0x0F	; 15
    1c2e:	c8 01       	movw	r24, r16
    1c30:	84 5b       	subi	r24, 0xB4	; 180
    1c32:	9c 4f       	sbci	r25, 0xFC	; 252
    1c34:	f9 d1       	rcall	.+1010   	; 0x2028 <numPrinter>
    1c36:	25 c0       	rjmp	.+74     	; 0x1c82 <updateScreen+0x79e>
    1c38:	8d e2       	ldi	r24, 0x2D	; 45
			}else
			{
				menuScreen->knobScreen[4][15] = '-';
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	e5 5a       	subi	r30, 0xA5	; 165
    1c3e:	fc 4f       	sbci	r31, 0xFC	; 252
    1c40:	80 83       	st	Z, r24
    1c42:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->knobScreen[4][16] = ((((currentPattern->trackMainVolumeLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    1c44:	ce 0c       	add	r12, r14
    1c46:	df 1c       	adc	r13, r15
    1c48:	d6 01       	movw	r26, r12
    1c4a:	d8 96       	adiw	r26, 0x38	; 56
    1c4c:	8c 91       	ld	r24, X
    1c4e:	80 95       	com	r24
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	64 e6       	ldi	r22, 0x64	; 100
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	0e 94 b4 19 	call	0x3368	; 0x3368 <__divmodhi4>
    1c5c:	2a e0       	ldi	r18, 0x0A	; 10
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	b9 01       	movw	r22, r18
    1c62:	0e 94 b4 19 	call	0x3368	; 0x3368 <__divmodhi4>
    1c66:	60 5d       	subi	r22, 0xD0	; 208
    1c68:	60 83       	st	Z, r22
    1c6a:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->knobScreen[4][17] = (((currentPattern->trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
    1c6c:	d6 01       	movw	r26, r12
    1c6e:	d8 96       	adiw	r26, 0x38	; 56
    1c70:	8c 91       	ld	r24, X
    1c72:	80 95       	com	r24
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	01 96       	adiw	r24, 0x01	; 1
    1c78:	b9 01       	movw	r22, r18
    1c7a:	0e 94 b4 19 	call	0x3368	; 0x3368 <__divmodhi4>
    1c7e:	80 5d       	subi	r24, 0xD0	; 208
    1c80:	80 83       	st	Z, r24
    1c82:	04 5b       	subi	r16, 0xB4	; 180
			}
				 numPrinter(menuScreen->knobScreen[4],12,2,positionSelect+1);
    1c84:	1c 4f       	sbci	r17, 0xFC	; 252
    1c86:	97 01       	movw	r18, r14
    1c88:	2f 5f       	subi	r18, 0xFF	; 255
    1c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8c:	42 e0       	ldi	r20, 0x02	; 2
    1c8e:	6c e0       	ldi	r22, 0x0C	; 12
    1c90:	c8 01       	movw	r24, r16
    1c92:	ca d1       	rcall	.+916    	; 0x2028 <numPrinter>
    1c94:	63 e0       	ldi	r22, 0x03	; 3
    1c96:	70 e0       	ldi	r23, 0x00	; 0
				 outputS(menuScreen->knobScreen[4], 3);
    1c98:	c8 01       	movw	r24, r16
    1c9a:	ae d1       	rcall	.+860    	; 0x1ff8 <outputS>
    1c9c:	12 c0       	rjmp	.+36     	; 0x1cc2 <updateScreen+0x7de>
    1c9e:	06 5d       	subi	r16, 0xD6	; 214
    1ca0:	1f 4f       	sbci	r17, 0xFF	; 255
			break;
    1ca2:	f6 01       	movw	r30, r12
			
			case 5:
			numPrinter(menuScreen->screen0[2],5,3,currentPattern->patternBPM);
    1ca4:	e8 53       	subi	r30, 0x38	; 56
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	20 81       	ld	r18, Z
    1caa:	31 81       	ldd	r19, Z+1	; 0x01
    1cac:	43 e0       	ldi	r20, 0x03	; 3
    1cae:	65 e0       	ldi	r22, 0x05	; 5
    1cb0:	c8 01       	movw	r24, r16
    1cb2:	ba d1       	rcall	.+884    	; 0x2028 <numPrinter>
    1cb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb6:	81 11       	cpse	r24, r1
    1cb8:	04 c0       	rjmp	.+8      	; 0x1cc2 <updateScreen+0x7de>
    1cba:	62 e0       	ldi	r22, 0x02	; 2
			if(currentGlobals->menuState==PreformanceModeInit)
    1cbc:	70 e0       	ldi	r23, 0x00	; 0
    1cbe:	c8 01       	movw	r24, r16
    1cc0:	9b d1       	rcall	.+822    	; 0x1ff8 <outputS>
			{
				outputS(menuScreen->screen0[2],2);
    1cc2:	1a 86       	std	Y+10, r1	; 0x0a
    1cc4:	df 91       	pop	r29
    1cc6:	cf 91       	pop	r28
    1cc8:	1f 91       	pop	r17
    1cca:	0f 91       	pop	r16
			}
			break;
		}
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<knobChange));			
    1ccc:	ff 90       	pop	r15
	}
    1cce:	ef 90       	pop	r14
    1cd0:	df 90       	pop	r13
    1cd2:	cf 90       	pop	r12
    1cd4:	bf 90       	pop	r11
    1cd6:	af 90       	pop	r10
    1cd8:	08 95       	ret

00001cda <__vector_54>:
    1cda:	1f 92       	push	r1
    1cdc:	0f 92       	push	r0
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	0f 92       	push	r0
    1ce2:	11 24       	eor	r1, r1
}

void midiTransmit(uint8_t data)
{
  while (!(UCSR3A & (1 << UDRE3)));
  UDR3 = data;
    1ce4:	0b b6       	in	r0, 0x3b	; 59
    1ce6:	0f 92       	push	r0
    1ce8:	2f 93       	push	r18
    1cea:	3f 93       	push	r19
    1cec:	5f 93       	push	r21
    1cee:	6f 93       	push	r22
    1cf0:	7f 93       	push	r23
    1cf2:	8f 93       	push	r24
    1cf4:	9f 93       	push	r25
    1cf6:	af 93       	push	r26
    1cf8:	bf 93       	push	r27
    1cfa:	ef 93       	push	r30
    1cfc:	ff 93       	push	r31
    1cfe:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1d02:	82 2f       	mov	r24, r18
    1d04:	82 95       	swap	r24
    1d06:	8f 70       	andi	r24, 0x0F	; 15
    1d08:	88 50       	subi	r24, 0x08	; 8
    1d0a:	82 30       	cpi	r24, 0x02	; 2
    1d0c:	78 f4       	brcc	.+30     	; 0x1d2c <__vector_54+0x52>
    1d0e:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <midiWriteIndex>
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	fc 01       	movw	r30, r24
    1d16:	ee 0f       	add	r30, r30
    1d18:	ff 1f       	adc	r31, r31
    1d1a:	8e 0f       	add	r24, r30
    1d1c:	9f 1f       	adc	r25, r31
    1d1e:	fc 01       	movw	r30, r24
    1d20:	e4 55       	subi	r30, 0x54	; 84
    1d22:	fc 4f       	sbci	r31, 0xFC	; 252
    1d24:	20 83       	st	Z, r18
    1d26:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    1d2a:	50 c0       	rjmp	.+160    	; 0x1dcc <__vector_54+0xf2>
    1d2c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    1d30:	81 11       	cpse	r24, r1
    1d32:	15 c0       	rjmp	.+42     	; 0x1d5e <__vector_54+0x84>
    1d34:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <midiWriteIndex>
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    1d3e:	fc 01       	movw	r30, r24
    1d40:	ee 0f       	add	r30, r30
    1d42:	ff 1f       	adc	r31, r31
    1d44:	e8 0f       	add	r30, r24
    1d46:	f9 1f       	adc	r31, r25
    1d48:	e4 55       	subi	r30, 0x54	; 84
    1d4a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d4c:	e3 0f       	add	r30, r19
    1d4e:	f1 1d       	adc	r31, r1
    1d50:	21 83       	std	Z+1, r18	; 0x01
    1d52:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    1d56:	8f 5f       	subi	r24, 0xFF	; 255
    1d58:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <midiWriteFlag>
    1d5c:	37 c0       	rjmp	.+110    	; 0x1dcc <__vector_54+0xf2>
    1d5e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    1d62:	8f 3f       	cpi	r24, 0xFF	; 255
    1d64:	99 f1       	breq	.+102    	; 0x1dcc <__vector_54+0xf2>
    1d66:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <midiWriteIndex>
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    1d70:	fc 01       	movw	r30, r24
    1d72:	ee 0f       	add	r30, r30
    1d74:	ff 1f       	adc	r31, r31
    1d76:	e8 0f       	add	r30, r24
    1d78:	f9 1f       	adc	r31, r25
    1d7a:	e4 55       	subi	r30, 0x54	; 84
    1d7c:	fc 4f       	sbci	r31, 0xFC	; 252
    1d7e:	e3 0f       	add	r30, r19
    1d80:	f1 1d       	adc	r31, r1
    1d82:	21 83       	std	Z+1, r18	; 0x01
    1d84:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <midiWriteIndex>
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	ee 0f       	add	r30, r30
    1d8e:	ff 1f       	adc	r31, r31
    1d90:	8e 0f       	add	r24, r30
    1d92:	9f 1f       	adc	r25, r31
    1d94:	fc 01       	movw	r30, r24
    1d96:	e4 55       	subi	r30, 0x54	; 84
    1d98:	fc 4f       	sbci	r31, 0xFC	; 252
    1d9a:	20 81       	ld	r18, Z
    1d9c:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <midiWriteIndex>
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	6a e0       	ldi	r22, 0x0A	; 10
    1da6:	70 e0       	ldi	r23, 0x00	; 0
    1da8:	0e 94 b4 19 	call	0x3368	; 0x3368 <__divmodhi4>
    1dac:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <midiWriteIndex>
    1db0:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <midiWriteIndex>
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	fc 01       	movw	r30, r24
    1db8:	ee 0f       	add	r30, r30
    1dba:	ff 1f       	adc	r31, r31
    1dbc:	8e 0f       	add	r24, r30
    1dbe:	9f 1f       	adc	r25, r31
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	e4 55       	subi	r30, 0x54	; 84
    1dc4:	fc 4f       	sbci	r31, 0xFC	; 252
    1dc6:	20 83       	st	Z, r18
    1dc8:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    1dcc:	ff 91       	pop	r31
    1dce:	ef 91       	pop	r30
    1dd0:	bf 91       	pop	r27
    1dd2:	af 91       	pop	r26
    1dd4:	9f 91       	pop	r25
    1dd6:	8f 91       	pop	r24
    1dd8:	7f 91       	pop	r23
    1dda:	6f 91       	pop	r22
    1ddc:	5f 91       	pop	r21
    1dde:	3f 91       	pop	r19
    1de0:	2f 91       	pop	r18
    1de2:	0f 90       	pop	r0
    1de4:	0b be       	out	0x3b, r0	; 59
    1de6:	0f 90       	pop	r0
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	0f 90       	pop	r0
    1dec:	1f 90       	pop	r1
    1dee:	18 95       	reti

00001df0 <initMidi>:
    1df0:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    1df4:	8f e1       	ldi	r24, 0x1F	; 31
    1df6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    1dfa:	e1 e3       	ldi	r30, 0x31	; 49
    1dfc:	f1 e0       	ldi	r31, 0x01	; 1
    1dfe:	80 81       	ld	r24, Z
    1e00:	88 69       	ori	r24, 0x98	; 152
    1e02:	80 83       	st	Z, r24
    1e04:	e2 e3       	ldi	r30, 0x32	; 50
    1e06:	f1 e0       	ldi	r31, 0x01	; 1
    1e08:	80 81       	ld	r24, Z
    1e0a:	86 60       	ori	r24, 0x06	; 6
    1e0c:	80 83       	st	Z, r24
    1e0e:	08 95       	ret

00001e10 <midiRead>:
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
    1e10:	af 92       	push	r10
    1e12:	bf 92       	push	r11
    1e14:	cf 92       	push	r12
    1e16:	df 92       	push	r13
    1e18:	ef 92       	push	r14
    1e1a:	ff 92       	push	r15
    1e1c:	0f 93       	push	r16
    1e1e:	1f 93       	push	r17
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
  while (midiReadIndex != midiWriteIndex)
    1e28:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <midiReadIndex>
    1e2c:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <midiWriteIndex>
    1e30:	e8 17       	cp	r30, r24
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <midiRead+0x26>
    1e34:	5c c0       	rjmp	.+184    	; 0x1eee <midiRead+0xde>
    1e36:	7e 01       	movw	r14, r28
    1e38:	86 ea       	ldi	r24, 0xA6	; 166
    1e3a:	e8 0e       	add	r14, r24
    1e3c:	f1 1c       	adc	r15, r1
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    1e3e:	0a e0       	ldi	r16, 0x0A	; 10
    1e40:	10 e0       	ldi	r17, 0x00	; 0

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
  {
    uint8_t midiMessageType = ((midiEventBuffer[midiReadIndex].statusByte)>>4);
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	cf 01       	movw	r24, r30
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	e8 0f       	add	r30, r24
    1e4c:	f9 1f       	adc	r31, r25
    1e4e:	e4 55       	subi	r30, 0x54	; 84
    1e50:	fc 4f       	sbci	r31, 0xFC	; 252
    1e52:	80 81       	ld	r24, Z
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    1e54:	22 81       	ldd	r18, Z+2	; 0x02
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    1e56:	90 81       	ld	r25, Z
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    1e58:	82 95       	swap	r24
    1e5a:	8f 70       	andi	r24, 0x0F	; 15
    1e5c:	89 30       	cpi	r24, 0x09	; 9
    1e5e:	c9 f5       	brne	.+114    	; 0x1ed2 <midiRead+0xc2>
    1e60:	22 23       	and	r18, r18
    1e62:	b9 f1       	breq	.+110    	; 0x1ed2 <midiRead+0xc2>
    1e64:	9f 70       	andi	r25, 0x0F	; 15
    1e66:	cb 57       	subi	r28, 0x7B	; 123
    1e68:	de 4f       	sbci	r29, 0xFE	; 254
    1e6a:	88 81       	ld	r24, Y
    1e6c:	c5 58       	subi	r28, 0x85	; 133
    1e6e:	d1 40       	sbci	r29, 0x01	; 1
    1e70:	98 13       	cpse	r25, r24
    1e72:	2f c0       	rjmp	.+94     	; 0x1ed2 <midiRead+0xc2>
    1e74:	0f 2e       	mov	r0, r31
    1e76:	f9 e7       	ldi	r31, 0x79	; 121
    1e78:	af 2e       	mov	r10, r31
    1e7a:	bb 24       	eor	r11, r11
    1e7c:	b3 94       	inc	r11
    1e7e:	f0 2d       	mov	r31, r0
    1e80:	ac 0e       	add	r10, r28
    1e82:	bd 1e       	adc	r11, r29
    1e84:	ed e0       	ldi	r30, 0x0D	; 13
    1e86:	ae 0e       	add	r10, r30
    1e88:	b1 1c       	adc	r11, r1
    1e8a:	6e 01       	movw	r12, r28
    1e8c:	f6 e9       	ldi	r31, 0x96	; 150
    1e8e:	cf 0e       	add	r12, r31
    1e90:	d1 1c       	adc	r13, r1
    {
        for (int i=0; i<16; i++)
        {
          if(midiEventBuffer[midiReadIndex].dataByte[0]==currentGlobals.midiTrackNote[i])
    1e92:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <midiReadIndex>
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	fc 01       	movw	r30, r24
    1e9a:	ee 0f       	add	r30, r30
    1e9c:	ff 1f       	adc	r31, r31
    1e9e:	8e 0f       	add	r24, r30
    1ea0:	9f 1f       	adc	r25, r31
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	e4 55       	subi	r30, 0x54	; 84
    1ea6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ea8:	91 81       	ldd	r25, Z+1	; 0x01
    1eaa:	f5 01       	movw	r30, r10
    1eac:	81 91       	ld	r24, Z+
    1eae:	5f 01       	movw	r10, r30
    1eb0:	98 13       	cpse	r25, r24
    1eb2:	09 c0       	rjmp	.+18     	; 0x1ec6 <midiRead+0xb6>
          { //we don't care about velocity, at least not yet.
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
    1eb4:	f6 01       	movw	r30, r12
    1eb6:	20 81       	ld	r18, Z
    1eb8:	e0 57       	subi	r30, 0x70	; 112
    1eba:	f1 09       	sbc	r31, r1
    1ebc:	40 81       	ld	r20, Z
    1ebe:	f6 01       	movw	r30, r12
    1ec0:	60 89       	ldd	r22, Z+16	; 0x10
    1ec2:	80 a1       	ldd	r24, Z+32	; 0x20
    1ec4:	d3 d3       	rcall	.+1958   	; 0x266c <trackControl>
    1ec6:	ff ef       	ldi	r31, 0xFF	; 255
    1ec8:	cf 1a       	sub	r12, r31
    1eca:	df 0a       	sbc	r13, r31
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    {
        for (int i=0; i<16; i++)
    1ecc:	ce 14       	cp	r12, r14
    1ece:	df 04       	cpc	r13, r15
    1ed0:	01 f7       	brne	.-64     	; 0x1e92 <midiRead+0x82>
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    1ed2:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <midiReadIndex>
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	01 96       	adiw	r24, 0x01	; 1
    1eda:	b8 01       	movw	r22, r16
    1edc:	0e 94 b4 19 	call	0x3368	; 0x3368 <__divmodhi4>
    1ee0:	e8 2f       	mov	r30, r24
    1ee2:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <midiReadIndex>
  UDR3 = data;
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
    1ee6:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <midiWriteIndex>
    1eea:	8e 13       	cpse	r24, r30
    1eec:	aa cf       	rjmp	.-172    	; 0x1e42 <midiRead+0x32>
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
  }
}
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	1f 91       	pop	r17
    1ef4:	0f 91       	pop	r16
    1ef6:	ff 90       	pop	r15
    1ef8:	ef 90       	pop	r14
    1efa:	df 90       	pop	r13
    1efc:	cf 90       	pop	r12
    1efe:	bf 90       	pop	r11
    1f00:	af 90       	pop	r10
    1f02:	08 95       	ret

00001f04 <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    1f04:	e2 e0       	ldi	r30, 0x02	; 2
    1f06:	f1 e0       	ldi	r31, 0x01	; 1
    1f08:	80 81       	ld	r24, Z
    1f0a:	80 62       	ori	r24, 0x20	; 32
    1f0c:	80 83       	st	Z, r24
    1f0e:	85 e0       	ldi	r24, 0x05	; 5
    1f10:	8a 95       	dec	r24
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <enableCycle+0xc>
    1f14:	00 00       	nop
    1f16:	80 81       	ld	r24, Z
    1f18:	8f 7d       	andi	r24, 0xDF	; 223
    1f1a:	80 83       	st	Z, r24
    1f1c:	08 95       	ret

00001f1e <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
    1f1e:	e2 e0       	ldi	r30, 0x02	; 2
    1f20:	f1 e0       	ldi	r31, 0x01	; 1
    1f22:	90 81       	ld	r25, Z
    1f24:	9f 7b       	andi	r25, 0xBF	; 191
    1f26:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    1f28:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
    1f2a:	ec cf       	rjmp	.-40     	; 0x1f04 <enableCycle>
    1f2c:	08 95       	ret

00001f2e <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
    1f2e:	e2 e0       	ldi	r30, 0x02	; 2
    1f30:	f1 e0       	ldi	r31, 0x01	; 1
    1f32:	90 81       	ld	r25, Z
    1f34:	90 64       	ori	r25, 0x40	; 64
    1f36:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    1f38:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
    1f3a:	e4 cf       	rjmp	.-56     	; 0x1f04 <enableCycle>
    1f3c:	08 95       	ret

00001f3e <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRH = 0x60; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
    1f3e:	80 e6       	ldi	r24, 0x60	; 96
    1f40:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	DDRC =0xFF; //all pins on the LCD Data Bus.
    1f44:	8f ef       	ldi	r24, 0xFF	; 255
    1f46:	87 b9       	out	0x07, r24	; 7


	PORTH &= 0B10011111;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
    1f48:	e2 e0       	ldi	r30, 0x02	; 2
    1f4a:	f1 e0       	ldi	r31, 0x01	; 1
    1f4c:	80 81       	ld	r24, Z
    1f4e:	8f 79       	andi	r24, 0x9F	; 159
    1f50:	80 83       	st	Z, r24

	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
    1f52:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f54:	8f e1       	ldi	r24, 0x1F	; 31
    1f56:	93 e0       	ldi	r25, 0x03	; 3
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <initScreen+0x1a>
    1f5c:	00 c0       	rjmp	.+0      	; 0x1f5e <initScreen+0x20>
    1f5e:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose


	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    1f60:	8a e2       	ldi	r24, 0x2A	; 42
    1f62:	dd df       	rcall	.-70     	; 0x1f1e <command>
	command(0x71);        // Function selection A:
    1f64:	81 e7       	ldi	r24, 0x71	; 113
    1f66:	db df       	rcall	.-74     	; 0x1f1e <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
    1f68:	8c e5       	ldi	r24, 0x5C	; 92
    1f6a:	e1 df       	rcall	.-62     	; 0x1f2e <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    1f6c:	88 e2       	ldi	r24, 0x28	; 40
    1f6e:	d7 df       	rcall	.-82     	; 0x1f1e <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
    1f70:	88 e0       	ldi	r24, 0x08	; 8
    1f72:	d5 df       	rcall	.-86     	; 0x1f1e <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    1f74:	8a e2       	ldi	r24, 0x2A	; 42
    1f76:	d3 df       	rcall	.-90     	; 0x1f1e <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    1f78:	89 e7       	ldi	r24, 0x79	; 121
    1f7a:	d1 df       	rcall	.-94     	; 0x1f1e <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
    1f7c:	85 ed       	ldi	r24, 0xD5	; 213
    1f7e:	cf df       	rcall	.-98     	; 0x1f1e <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
    1f80:	80 e7       	ldi	r24, 0x70	; 112
    1f82:	cd df       	rcall	.-102    	; 0x1f1e <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    1f84:	88 e7       	ldi	r24, 0x78	; 120
    1f86:	cb df       	rcall	.-106    	; 0x1f1e <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
    1f88:	89 e0       	ldi	r24, 0x09	; 9
    1f8a:	c9 df       	rcall	.-110    	; 0x1f1e <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
    1f8c:	86 e0       	ldi	r24, 0x06	; 6
    1f8e:	c7 df       	rcall	.-114    	; 0x1f1e <command>
	command(0x72);        // Function selection B:
    1f90:	82 e7       	ldi	r24, 0x72	; 114
    1f92:	c5 df       	rcall	.-118    	; 0x1f1e <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
    1f94:	8a e0       	ldi	r24, 0x0A	; 10
    1f96:	cb df       	rcall	.-106    	; 0x1f2e <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    1f98:	89 e7       	ldi	r24, 0x79	; 121
    1f9a:	c1 df       	rcall	.-126    	; 0x1f1e <command>
	command(0xDA);        // Set SEG pins hardware configuration:
    1f9c:	8a ed       	ldi	r24, 0xDA	; 218
    1f9e:	bf df       	rcall	.-130    	; 0x1f1e <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
    1fa0:	80 e1       	ldi	r24, 0x10	; 16
    1fa2:	bd df       	rcall	.-134    	; 0x1f1e <command>
	command(0xDC);        // Function selection C:
    1fa4:	8c ed       	ldi	r24, 0xDC	; 220
    1fa6:	bb df       	rcall	.-138    	; 0x1f1e <command>
	command(0x00);        //  internal VSL, GPIO input disable
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	b9 df       	rcall	.-142    	; 0x1f1e <command>
	command(0x81);        // Set contrast control:
    1fac:	81 e8       	ldi	r24, 0x81	; 129
    1fae:	b7 df       	rcall	.-146    	; 0x1f1e <command>
    1fb0:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
    1fb2:	b5 df       	rcall	.-150    	; 0x1f1e <command>
    1fb4:	89 ed       	ldi	r24, 0xD9	; 217
    1fb6:	b3 df       	rcall	.-154    	; 0x1f1e <command>
	command(0xD9);        // Set phase length:
    1fb8:	81 ef       	ldi	r24, 0xF1	; 241
    1fba:	b1 df       	rcall	.-158    	; 0x1f1e <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
    1fbc:	8b ed       	ldi	r24, 0xDB	; 219
    1fbe:	af df       	rcall	.-162    	; 0x1f1e <command>
    1fc0:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
    1fc2:	ad df       	rcall	.-166    	; 0x1f1e <command>
    1fc4:	88 e7       	ldi	r24, 0x78	; 120
    1fc6:	ab df       	rcall	.-170    	; 0x1f1e <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
    1fc8:	88 e2       	ldi	r24, 0x28	; 40
    1fca:	a9 df       	rcall	.-174    	; 0x1f1e <command>
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    1fce:	a7 df       	rcall	.-178    	; 0x1f1e <command>
    1fd0:	8f e3       	ldi	r24, 0x3F	; 63
    1fd2:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <initScreen+0x96>
    1fd8:	00 c0       	rjmp	.+0      	; 0x1fda <initScreen+0x9c>
	command(0x01);        // Clear display
    1fda:	00 00       	nop
    1fdc:	80 e8       	ldi	r24, 0x80	; 128
    1fde:	9f df       	rcall	.-194    	; 0x1f1e <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1fe0:	8c e0       	ldi	r24, 0x0C	; 12
    1fe2:	9d df       	rcall	.-198    	; 0x1f1e <command>
    1fe4:	9f ef       	ldi	r25, 0xFF	; 255
    1fe6:	24 e3       	ldi	r18, 0x34	; 52
    1fe8:	8c e0       	ldi	r24, 0x0C	; 12
    1fea:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required

	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
    1fec:	20 40       	sbci	r18, 0x00	; 0
    1fee:	80 40       	sbci	r24, 0x00	; 0
    1ff0:	e1 f7       	brne	.-8      	; 0x1fea <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
    1ff2:	00 c0       	rjmp	.+0      	; 0x1ff4 <initScreen+0xb6>
    1ff4:	00 00       	nop
    1ff6:	08 95       	ret

00001ff8 <outputS>:
    1ff8:	0f 93       	push	r16
    1ffa:	1f 93       	push	r17
    1ffc:	cf 93       	push	r28
    1ffe:	df 93       	push	r29
    2000:	8c 01       	movw	r16, r24
    2002:	fb 01       	movw	r30, r22
    2004:	ff 27       	eor	r31, r31
    2006:	e8 5f       	subi	r30, 0xF8	; 248
    2008:	fd 4f       	sbci	r31, 0xFD	; 253
    200a:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
    200c:	88 df       	rcall	.-240    	; 0x1f1e <command>
    200e:	e8 01       	movw	r28, r16
    2010:	0c 5e       	subi	r16, 0xEC	; 236
    2012:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
    2014:	89 91       	ld	r24, Y+
    2016:	8b df       	rcall	.-234    	; 0x1f2e <data>
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
    2018:	c0 17       	cp	r28, r16
    201a:	d1 07       	cpc	r29, r17
    201c:	d9 f7       	brne	.-10     	; 0x2014 <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
    201e:	df 91       	pop	r29
    2020:	cf 91       	pop	r28
    2022:	1f 91       	pop	r17
    2024:	0f 91       	pop	r16
    2026:	08 95       	ret

00002028 <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch(numCharacters)
    202e:	43 30       	cpi	r20, 0x03	; 3
    2030:	09 f4       	brne	.+2      	; 0x2034 <numPrinter+0xc>
    2032:	54 c0       	rjmp	.+168    	; 0x20dc <numPrinter+0xb4>
    2034:	28 f4       	brcc	.+10     	; 0x2040 <numPrinter+0x18>
    2036:	41 30       	cpi	r20, 0x01	; 1
    2038:	51 f0       	breq	.+20     	; 0x204e <numPrinter+0x26>
    203a:	42 30       	cpi	r20, 0x02	; 2
    203c:	29 f1       	breq	.+74     	; 0x2088 <numPrinter+0x60>
    203e:	b7 c1       	rjmp	.+878    	; 0x23ae <__stack+0x1af>
    2040:	44 30       	cpi	r20, 0x04	; 4
    2042:	09 f4       	brne	.+2      	; 0x2046 <numPrinter+0x1e>
    2044:	95 c0       	rjmp	.+298    	; 0x2170 <numPrinter+0x148>
    2046:	45 30       	cpi	r20, 0x05	; 5
    2048:	09 f4       	brne	.+2      	; 0x204c <numPrinter+0x24>
    204a:	0a c1       	rjmp	.+532    	; 0x2260 <__stack+0x61>
    204c:	b0 c1       	rjmp	.+864    	; 0x23ae <__stack+0x1af>
		case 0:
		break;

		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
    204e:	ec 01       	movw	r28, r24
    2050:	c6 0f       	add	r28, r22
    2052:	d1 1d       	adc	r29, r1
    2054:	ad ec       	ldi	r26, 0xCD	; 205
    2056:	bc ec       	ldi	r27, 0xCC	; 204
    2058:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    205c:	96 95       	lsr	r25
    205e:	87 95       	ror	r24
    2060:	96 95       	lsr	r25
    2062:	87 95       	ror	r24
    2064:	96 95       	lsr	r25
    2066:	87 95       	ror	r24
    2068:	9c 01       	movw	r18, r24
    206a:	22 0f       	add	r18, r18
    206c:	33 1f       	adc	r19, r19
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	82 0f       	add	r24, r18
    207c:	93 1f       	adc	r25, r19
    207e:	e8 1b       	sub	r30, r24
    2080:	f9 0b       	sbc	r31, r25
    2082:	e0 5d       	subi	r30, 0xD0	; 208
    2084:	e8 83       	st	Y, r30
		break;
    2086:	93 c1       	rjmp	.+806    	; 0x23ae <__stack+0x1af>

		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
    2088:	ec 01       	movw	r28, r24
    208a:	c6 0f       	add	r28, r22
    208c:	d1 1d       	adc	r29, r1
    208e:	ad ec       	ldi	r26, 0xCD	; 205
    2090:	bc ec       	ldi	r27, 0xCC	; 204
    2092:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    2096:	96 95       	lsr	r25
    2098:	87 95       	ror	r24
    209a:	96 95       	lsr	r25
    209c:	87 95       	ror	r24
    209e:	96 95       	lsr	r25
    20a0:	87 95       	ror	r24
    20a2:	9c 01       	movw	r18, r24
    20a4:	22 0f       	add	r18, r18
    20a6:	33 1f       	adc	r19, r19
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	82 0f       	add	r24, r18
    20b6:	93 1f       	adc	r25, r19
    20b8:	9f 01       	movw	r18, r30
    20ba:	28 1b       	sub	r18, r24
    20bc:	39 0b       	sbc	r19, r25
    20be:	c9 01       	movw	r24, r18
    20c0:	80 5d       	subi	r24, 0xD0	; 208
    20c2:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
    20c4:	9f 01       	movw	r18, r30
    20c6:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    20ca:	96 95       	lsr	r25
    20cc:	87 95       	ror	r24
    20ce:	96 95       	lsr	r25
    20d0:	87 95       	ror	r24
    20d2:	96 95       	lsr	r25
    20d4:	87 95       	ror	r24
    20d6:	80 5d       	subi	r24, 0xD0	; 208
    20d8:	88 83       	st	Y, r24
		break;
    20da:	69 c1       	rjmp	.+722    	; 0x23ae <__stack+0x1af>

		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
    20dc:	ec 01       	movw	r28, r24
    20de:	c6 0f       	add	r28, r22
    20e0:	d1 1d       	adc	r29, r1
    20e2:	ad ec       	ldi	r26, 0xCD	; 205
    20e4:	bc ec       	ldi	r27, 0xCC	; 204
    20e6:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    20ea:	96 95       	lsr	r25
    20ec:	87 95       	ror	r24
    20ee:	96 95       	lsr	r25
    20f0:	87 95       	ror	r24
    20f2:	96 95       	lsr	r25
    20f4:	87 95       	ror	r24
    20f6:	9c 01       	movw	r18, r24
    20f8:	22 0f       	add	r18, r18
    20fa:	33 1f       	adc	r19, r19
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	88 0f       	add	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	82 0f       	add	r24, r18
    210a:	93 1f       	adc	r25, r19
    210c:	9f 01       	movw	r18, r30
    210e:	28 1b       	sub	r18, r24
    2110:	39 0b       	sbc	r19, r25
    2112:	c9 01       	movw	r24, r18
    2114:	80 5d       	subi	r24, 0xD0	; 208
    2116:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = tensPlace;
    2118:	af 01       	movw	r20, r30
    211a:	56 95       	lsr	r21
    211c:	47 95       	ror	r20
    211e:	56 95       	lsr	r21
    2120:	47 95       	ror	r20
    2122:	9a 01       	movw	r18, r20
    2124:	ab e7       	ldi	r26, 0x7B	; 123
    2126:	b4 e1       	ldi	r27, 0x14	; 20
    2128:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    212c:	96 95       	lsr	r25
    212e:	87 95       	ror	r24
    2130:	64 e6       	ldi	r22, 0x64	; 100
    2132:	68 9f       	mul	r22, r24
    2134:	90 01       	movw	r18, r0
    2136:	69 9f       	mul	r22, r25
    2138:	30 0d       	add	r19, r0
    213a:	11 24       	eor	r1, r1
    213c:	cf 01       	movw	r24, r30
    213e:	82 1b       	sub	r24, r18
    2140:	93 0b       	sbc	r25, r19
    2142:	9c 01       	movw	r18, r24
    2144:	ad ec       	ldi	r26, 0xCD	; 205
    2146:	bc ec       	ldi	r27, 0xCC	; 204
    2148:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    214c:	96 95       	lsr	r25
    214e:	87 95       	ror	r24
    2150:	96 95       	lsr	r25
    2152:	87 95       	ror	r24
    2154:	96 95       	lsr	r25
    2156:	87 95       	ror	r24
    2158:	80 5d       	subi	r24, 0xD0	; 208
    215a:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
    215c:	9a 01       	movw	r18, r20
    215e:	ab e7       	ldi	r26, 0x7B	; 123
    2160:	b4 e1       	ldi	r27, 0x14	; 20
    2162:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    2166:	96 95       	lsr	r25
    2168:	87 95       	ror	r24
    216a:	80 5d       	subi	r24, 0xD0	; 208
    216c:	88 83       	st	Y, r24
		break;
    216e:	1f c1       	rjmp	.+574    	; 0x23ae <__stack+0x1af>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
    2170:	ec 01       	movw	r28, r24
    2172:	c6 0f       	add	r28, r22
    2174:	d1 1d       	adc	r29, r1
    2176:	ad ec       	ldi	r26, 0xCD	; 205
    2178:	bc ec       	ldi	r27, 0xCC	; 204
    217a:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    217e:	96 95       	lsr	r25
    2180:	87 95       	ror	r24
    2182:	96 95       	lsr	r25
    2184:	87 95       	ror	r24
    2186:	96 95       	lsr	r25
    2188:	87 95       	ror	r24
    218a:	9c 01       	movw	r18, r24
    218c:	22 0f       	add	r18, r18
    218e:	33 1f       	adc	r19, r19
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	82 0f       	add	r24, r18
    219e:	93 1f       	adc	r25, r19
    21a0:	9f 01       	movw	r18, r30
    21a2:	28 1b       	sub	r18, r24
    21a4:	39 0b       	sbc	r19, r25
    21a6:	c9 01       	movw	r24, r18
    21a8:	80 5d       	subi	r24, 0xD0	; 208
    21aa:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
    21ac:	9f 01       	movw	r18, r30
    21ae:	36 95       	lsr	r19
    21b0:	27 95       	ror	r18
    21b2:	36 95       	lsr	r19
    21b4:	27 95       	ror	r18
    21b6:	ab e7       	ldi	r26, 0x7B	; 123
    21b8:	b4 e1       	ldi	r27, 0x14	; 20
    21ba:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    21be:	96 95       	lsr	r25
    21c0:	87 95       	ror	r24
    21c2:	44 e6       	ldi	r20, 0x64	; 100
    21c4:	48 9f       	mul	r20, r24
    21c6:	90 01       	movw	r18, r0
    21c8:	49 9f       	mul	r20, r25
    21ca:	30 0d       	add	r19, r0
    21cc:	11 24       	eor	r1, r1
    21ce:	cf 01       	movw	r24, r30
    21d0:	82 1b       	sub	r24, r18
    21d2:	93 0b       	sbc	r25, r19
    21d4:	9c 01       	movw	r18, r24
    21d6:	ad ec       	ldi	r26, 0xCD	; 205
    21d8:	bc ec       	ldi	r27, 0xCC	; 204
    21da:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    21de:	96 95       	lsr	r25
    21e0:	87 95       	ror	r24
    21e2:	96 95       	lsr	r25
    21e4:	87 95       	ror	r24
    21e6:	96 95       	lsr	r25
    21e8:	87 95       	ror	r24
    21ea:	80 5d       	subi	r24, 0xD0	; 208
    21ec:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = hunderedsPlace;
    21ee:	af 01       	movw	r20, r30
    21f0:	56 95       	lsr	r21
    21f2:	47 95       	ror	r20
    21f4:	56 95       	lsr	r21
    21f6:	47 95       	ror	r20
    21f8:	56 95       	lsr	r21
    21fa:	47 95       	ror	r20
    21fc:	9a 01       	movw	r18, r20
    21fe:	a5 ec       	ldi	r26, 0xC5	; 197
    2200:	b0 e2       	ldi	r27, 0x20	; 32
    2202:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    2206:	92 95       	swap	r25
    2208:	82 95       	swap	r24
    220a:	8f 70       	andi	r24, 0x0F	; 15
    220c:	89 27       	eor	r24, r25
    220e:	9f 70       	andi	r25, 0x0F	; 15
    2210:	89 27       	eor	r24, r25
    2212:	68 ee       	ldi	r22, 0xE8	; 232
    2214:	73 e0       	ldi	r23, 0x03	; 3
    2216:	86 9f       	mul	r24, r22
    2218:	90 01       	movw	r18, r0
    221a:	87 9f       	mul	r24, r23
    221c:	30 0d       	add	r19, r0
    221e:	96 9f       	mul	r25, r22
    2220:	30 0d       	add	r19, r0
    2222:	11 24       	eor	r1, r1
    2224:	cf 01       	movw	r24, r30
    2226:	82 1b       	sub	r24, r18
    2228:	93 0b       	sbc	r25, r19
    222a:	9c 01       	movw	r18, r24
    222c:	36 95       	lsr	r19
    222e:	27 95       	ror	r18
    2230:	36 95       	lsr	r19
    2232:	27 95       	ror	r18
    2234:	ab e7       	ldi	r26, 0x7B	; 123
    2236:	b4 e1       	ldi	r27, 0x14	; 20
    2238:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    223c:	96 95       	lsr	r25
    223e:	87 95       	ror	r24
    2240:	80 5d       	subi	r24, 0xD0	; 208
    2242:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
    2244:	9a 01       	movw	r18, r20
    2246:	a5 ec       	ldi	r26, 0xC5	; 197
    2248:	b0 e2       	ldi	r27, 0x20	; 32
    224a:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    224e:	92 95       	swap	r25
    2250:	82 95       	swap	r24
    2252:	8f 70       	andi	r24, 0x0F	; 15
    2254:	89 27       	eor	r24, r25
    2256:	9f 70       	andi	r25, 0x0F	; 15
    2258:	89 27       	eor	r24, r25
    225a:	80 5d       	subi	r24, 0xD0	; 208
    225c:	88 83       	st	Y, r24
		break;
    225e:	a7 c0       	rjmp	.+334    	; 0x23ae <__stack+0x1af>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
    2260:	ec 01       	movw	r28, r24
    2262:	c6 0f       	add	r28, r22
    2264:	d1 1d       	adc	r29, r1
    2266:	ad ec       	ldi	r26, 0xCD	; 205
    2268:	bc ec       	ldi	r27, 0xCC	; 204
    226a:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    226e:	96 95       	lsr	r25
    2270:	87 95       	ror	r24
    2272:	96 95       	lsr	r25
    2274:	87 95       	ror	r24
    2276:	96 95       	lsr	r25
    2278:	87 95       	ror	r24
    227a:	9c 01       	movw	r18, r24
    227c:	22 0f       	add	r18, r18
    227e:	33 1f       	adc	r19, r19
    2280:	88 0f       	add	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	88 0f       	add	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	88 0f       	add	r24, r24
    228a:	99 1f       	adc	r25, r25
    228c:	82 0f       	add	r24, r18
    228e:	93 1f       	adc	r25, r19
    2290:	9f 01       	movw	r18, r30
    2292:	28 1b       	sub	r18, r24
    2294:	39 0b       	sbc	r19, r25
    2296:	c9 01       	movw	r24, r18
    2298:	80 5d       	subi	r24, 0xD0	; 208
    229a:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
    229c:	9f 01       	movw	r18, r30
    229e:	36 95       	lsr	r19
    22a0:	27 95       	ror	r18
    22a2:	36 95       	lsr	r19
    22a4:	27 95       	ror	r18
    22a6:	ab e7       	ldi	r26, 0x7B	; 123
    22a8:	b4 e1       	ldi	r27, 0x14	; 20
    22aa:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    22ae:	96 95       	lsr	r25
    22b0:	87 95       	ror	r24
    22b2:	44 e6       	ldi	r20, 0x64	; 100
    22b4:	48 9f       	mul	r20, r24
    22b6:	90 01       	movw	r18, r0
    22b8:	49 9f       	mul	r20, r25
    22ba:	30 0d       	add	r19, r0
    22bc:	11 24       	eor	r1, r1
    22be:	cf 01       	movw	r24, r30
    22c0:	82 1b       	sub	r24, r18
    22c2:	93 0b       	sbc	r25, r19
    22c4:	9c 01       	movw	r18, r24
    22c6:	ad ec       	ldi	r26, 0xCD	; 205
    22c8:	bc ec       	ldi	r27, 0xCC	; 204
    22ca:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    22ce:	96 95       	lsr	r25
    22d0:	87 95       	ror	r24
    22d2:	96 95       	lsr	r25
    22d4:	87 95       	ror	r24
    22d6:	96 95       	lsr	r25
    22d8:	87 95       	ror	r24
    22da:	80 5d       	subi	r24, 0xD0	; 208
    22dc:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
    22de:	9f 01       	movw	r18, r30
    22e0:	36 95       	lsr	r19
    22e2:	27 95       	ror	r18
    22e4:	36 95       	lsr	r19
    22e6:	27 95       	ror	r18
    22e8:	36 95       	lsr	r19
    22ea:	27 95       	ror	r18
    22ec:	a5 ec       	ldi	r26, 0xC5	; 197
    22ee:	b0 e2       	ldi	r27, 0x20	; 32
    22f0:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    22f4:	92 95       	swap	r25
    22f6:	82 95       	swap	r24
    22f8:	8f 70       	andi	r24, 0x0F	; 15
    22fa:	89 27       	eor	r24, r25
    22fc:	9f 70       	andi	r25, 0x0F	; 15
    22fe:	89 27       	eor	r24, r25
    2300:	48 ee       	ldi	r20, 0xE8	; 232
    2302:	53 e0       	ldi	r21, 0x03	; 3
    2304:	84 9f       	mul	r24, r20
    2306:	90 01       	movw	r18, r0
    2308:	85 9f       	mul	r24, r21
    230a:	30 0d       	add	r19, r0
    230c:	94 9f       	mul	r25, r20
    230e:	30 0d       	add	r19, r0
    2310:	11 24       	eor	r1, r1
    2312:	cf 01       	movw	r24, r30
    2314:	82 1b       	sub	r24, r18
    2316:	93 0b       	sbc	r25, r19
    2318:	9c 01       	movw	r18, r24
    231a:	36 95       	lsr	r19
    231c:	27 95       	ror	r18
    231e:	36 95       	lsr	r19
    2320:	27 95       	ror	r18
    2322:	ab e7       	ldi	r26, 0x7B	; 123
    2324:	b4 e1       	ldi	r27, 0x14	; 20
    2326:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    232a:	96 95       	lsr	r25
    232c:	87 95       	ror	r24
    232e:	80 5d       	subi	r24, 0xD0	; 208
    2330:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
    2332:	af 01       	movw	r20, r30
    2334:	52 95       	swap	r21
    2336:	42 95       	swap	r20
    2338:	4f 70       	andi	r20, 0x0F	; 15
    233a:	45 27       	eor	r20, r21
    233c:	5f 70       	andi	r21, 0x0F	; 15
    233e:	45 27       	eor	r20, r21
    2340:	9a 01       	movw	r18, r20
    2342:	a7 e4       	ldi	r26, 0x47	; 71
    2344:	b3 e0       	ldi	r27, 0x03	; 3
    2346:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    234a:	96 95       	lsr	r25
    234c:	87 95       	ror	r24
    234e:	96 95       	lsr	r25
    2350:	87 95       	ror	r24
    2352:	96 95       	lsr	r25
    2354:	87 95       	ror	r24
    2356:	60 e1       	ldi	r22, 0x10	; 16
    2358:	77 e2       	ldi	r23, 0x27	; 39
    235a:	86 9f       	mul	r24, r22
    235c:	90 01       	movw	r18, r0
    235e:	87 9f       	mul	r24, r23
    2360:	30 0d       	add	r19, r0
    2362:	96 9f       	mul	r25, r22
    2364:	30 0d       	add	r19, r0
    2366:	11 24       	eor	r1, r1
    2368:	cf 01       	movw	r24, r30
    236a:	82 1b       	sub	r24, r18
    236c:	93 0b       	sbc	r25, r19
    236e:	9c 01       	movw	r18, r24
    2370:	36 95       	lsr	r19
    2372:	27 95       	ror	r18
    2374:	36 95       	lsr	r19
    2376:	27 95       	ror	r18
    2378:	36 95       	lsr	r19
    237a:	27 95       	ror	r18
    237c:	a5 ec       	ldi	r26, 0xC5	; 197
    237e:	b0 e2       	ldi	r27, 0x20	; 32
    2380:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    2384:	92 95       	swap	r25
    2386:	82 95       	swap	r24
    2388:	8f 70       	andi	r24, 0x0F	; 15
    238a:	89 27       	eor	r24, r25
    238c:	9f 70       	andi	r25, 0x0F	; 15
    238e:	89 27       	eor	r24, r25
    2390:	80 5d       	subi	r24, 0xD0	; 208
    2392:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
    2394:	9a 01       	movw	r18, r20
    2396:	a7 e4       	ldi	r26, 0x47	; 71
    2398:	b3 e0       	ldi	r27, 0x03	; 3
    239a:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__umulhisi3>
    239e:	96 95       	lsr	r25
    23a0:	87 95       	ror	r24
    23a2:	96 95       	lsr	r25
    23a4:	87 95       	ror	r24
    23a6:	96 95       	lsr	r25
    23a8:	87 95       	ror	r24
    23aa:	80 5d       	subi	r24, 0xD0	; 208
    23ac:	88 83       	st	Y, r24
		break;

	}


}
    23ae:	df 91       	pop	r29
    23b0:	cf 91       	pop	r28
    23b2:	08 95       	ret

000023b4 <midiNotePrinter>:

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
    23b4:	9c 01       	movw	r18, r24
    23b6:	a6 2f       	mov	r26, r22
	char printSharp = 0;
	uint8_t valueSwitch = 0;
	//numbers will always go from B to C, and have 12 distinct values. 
	//we can get our number from this with division. 
	//midi note C0 starts at 12. So, we'll need to do some math there. 
	printNumber = (noteNumber/12)+47; 
    23b8:	eb ea       	ldi	r30, 0xAB	; 171
    23ba:	4e 9f       	mul	r20, r30
    23bc:	e1 2d       	mov	r30, r1
    23be:	11 24       	eor	r1, r1
    23c0:	e6 95       	lsr	r30
    23c2:	e6 95       	lsr	r30
    23c4:	e6 95       	lsr	r30
    23c6:	9f e2       	ldi	r25, 0x2F	; 47
    23c8:	9e 0f       	add	r25, r30
	
	//theres a weird wrap around with note numbers here. Since there isn't really an easy math patern we can take advantage of. 
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
    23ca:	8e 2f       	mov	r24, r30
    23cc:	88 0f       	add	r24, r24
    23ce:	e8 0f       	add	r30, r24
    23d0:	ee 0f       	add	r30, r30
    23d2:	ee 0f       	add	r30, r30
    23d4:	4e 1b       	sub	r20, r30
    23d6:	50 e0       	ldi	r21, 0x00	; 0
    23d8:	4c 30       	cpi	r20, 0x0C	; 12
    23da:	51 05       	cpc	r21, r1
    23dc:	50 f5       	brcc	.+84     	; 0x2432 <midiNotePrinter+0x7e>
    23de:	fa 01       	movw	r30, r20
    23e0:	88 27       	eor	r24, r24
    23e2:	e8 51       	subi	r30, 0x18	; 24
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	8f 4f       	sbci	r24, 0xFF	; 255
    23e8:	ee c7       	rjmp	.+4060   	; 0x33c6 <__tablejump2__>
	{
		
		case 0:
		printLetter = 'C';
		printSharp = ' ';
    23ea:	80 e2       	ldi	r24, 0x20	; 32
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
	{
		
		case 0:
		printLetter = 'C';
    23ec:	43 e4       	ldi	r20, 0x43	; 67
    23ee:	23 c0       	rjmp	.+70     	; 0x2436 <midiNotePrinter+0x82>
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
		printSharp = '#';
    23f0:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'C';
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
    23f2:	43 e4       	ldi	r20, 0x43	; 67
		printSharp = '#';
		break;
    23f4:	20 c0       	rjmp	.+64     	; 0x2436 <midiNotePrinter+0x82>
		
		case 2:
		printLetter = 'D';
		printSharp = ' ';
    23f6:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'C';
		printSharp = '#';
		break;
		
		case 2:
		printLetter = 'D';
    23f8:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = ' ';
		break;
    23fa:	1d c0       	rjmp	.+58     	; 0x2436 <midiNotePrinter+0x82>
		
		case 3:
		printLetter = 'D';
		printSharp = '#';
    23fc:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'D';
		printSharp = ' ';
		break;
		
		case 3:
		printLetter = 'D';
    23fe:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = '#';
		break;
    2400:	1a c0       	rjmp	.+52     	; 0x2436 <midiNotePrinter+0x82>
		
		case 4:
		printLetter = 'E';
		printSharp = ' ';
    2402:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'D';
		printSharp = '#';
		break;
		
		case 4:
		printLetter = 'E';
    2404:	45 e4       	ldi	r20, 0x45	; 69
		printSharp = ' ';
		break;
    2406:	17 c0       	rjmp	.+46     	; 0x2436 <midiNotePrinter+0x82>
		
		case 5:
		printLetter = 'F';
		printSharp = ' ';
    2408:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'E';
		printSharp = ' ';
		break;
		
		case 5:
		printLetter = 'F';
    240a:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = ' ';
		break;
    240c:	14 c0       	rjmp	.+40     	; 0x2436 <midiNotePrinter+0x82>
		
		case 6:
		printLetter = 'F';
		printSharp = '#';
    240e:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'F';
		printSharp = ' ';
		break;
		
		case 6:
		printLetter = 'F';
    2410:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = '#';
		break;
    2412:	11 c0       	rjmp	.+34     	; 0x2436 <midiNotePrinter+0x82>
		
		case 7:
		printLetter = 'G';
		printSharp = ' ';
    2414:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'F';
		printSharp = '#';
		break;
		
		case 7:
		printLetter = 'G';
    2416:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = ' ';
		break;
    2418:	0e c0       	rjmp	.+28     	; 0x2436 <midiNotePrinter+0x82>
		
		case 8:
		printLetter = 'G';
		printSharp = '#';
    241a:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'G';
		printSharp = ' ';
		break;
		
		case 8:
		printLetter = 'G';
    241c:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = '#';
		break;
    241e:	0b c0       	rjmp	.+22     	; 0x2436 <midiNotePrinter+0x82>
		
		case 9:
		printLetter = 'A';
		printSharp = ' ';
    2420:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'G';
		printSharp = '#';
		break;
		
		case 9:
		printLetter = 'A';
    2422:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = ' ';
		break;
    2424:	08 c0       	rjmp	.+16     	; 0x2436 <midiNotePrinter+0x82>
		
		case 10:
		printLetter = 'A';
		printSharp = '#';
    2426:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'A';
		printSharp = ' ';
		break;
		
		case 10:
		printLetter = 'A';
    2428:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = '#';
		break;
    242a:	05 c0       	rjmp	.+10     	; 0x2436 <midiNotePrinter+0x82>
		
		case 11:
		printLetter = 'B';
		printSharp = ' ';
    242c:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'A';
		printSharp = '#';
		break;
		
		case 11:
		printLetter = 'B';
    242e:	42 e4       	ldi	r20, 0x42	; 66
		printSharp = ' ';
		break;
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <midiNotePrinter+0x82>
void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
	char printNumber = 0;
	char printSharp = 0;
    2432:	80 e0       	ldi	r24, 0x00	; 0
}

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
    2434:	40 e0       	ldi	r20, 0x00	; 0
		printLetter = 'B';
		printSharp = ' ';
		break;
		
	}
	charArray[startingPosition] = printLetter;
    2436:	f9 01       	movw	r30, r18
    2438:	ea 0f       	add	r30, r26
    243a:	f1 1d       	adc	r31, r1
    243c:	40 83       	st	Z, r20
	charArray[startingPosition+1]= printSharp;
    243e:	81 83       	std	Z+1, r24	; 0x01
	charArray[startingPosition+2]= printNumber;
    2440:	92 83       	std	Z+2, r25	; 0x02
    2442:	08 95       	ret

00002444 <initSequencer>:
//if a real-time sequencer is implemented, they will end up being the same thing.

void initSequencer()
{
	//here we need to setup our timer interrupt, and set playback to stop.
	TCCR0A = (1 << WGM01); //set to clear on correct compare
    2444:	82 e0       	ldi	r24, 0x02	; 2
    2446:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00); // set pre-scaler to 64
    2448:	93 e0       	ldi	r25, 0x03	; 3
    244a:	95 bd       	out	0x25, r25	; 37
	OCR0A = 25; // every 25 ticks will be 0.0001 seconds at this prescale.
    244c:	99 e1       	ldi	r25, 0x19	; 25
    244e:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1 << OCIE0A); // Enable OCR0A compare interrupt
    2450:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    2454:	08 95       	ret

00002456 <__vector_21>:
	//interrupts should now be good to go.
}

ISR(TIMER0_COMPA_vect)
{
    2456:	1f 92       	push	r1
    2458:	0f 92       	push	r0
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	0f 92       	push	r0
    245e:	11 24       	eor	r1, r1
    2460:	8f 93       	push	r24
    2462:	9f 93       	push	r25
	clockCounter++;
    2464:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <clockCounter>
    2468:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <clockCounter+0x1>
    246c:	01 96       	adiw	r24, 0x01	; 1
    246e:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <clockCounter+0x1>
    2472:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <clockCounter>
	//we don't want to do anything else here.
}
    2476:	9f 91       	pop	r25
    2478:	8f 91       	pop	r24
    247a:	0f 90       	pop	r0
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	0f 90       	pop	r0
    2480:	1f 90       	pop	r1
    2482:	18 95       	reti

00002484 <updateSequencer>:

void updateSequencer(Pattern sequencerPattern, Globals currentGlobals)
{
    2484:	cf 92       	push	r12
    2486:	df 92       	push	r13
    2488:	ef 92       	push	r14
    248a:	ff 92       	push	r15
    248c:	0f 93       	push	r16
    248e:	1f 93       	push	r17
    2490:	cf 93       	push	r28
    2492:	df 93       	push	r29
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
	uint16_t BPMvar = 150000/(sequencerPattern.patternBPM);

	if(clockCounter>=BPMvar && currentGlobals.playState) //if playstate is on, play next note in sequence.
    2498:	cc 52       	subi	r28, 0x2C	; 44
    249a:	df 4f       	sbci	r29, 0xFF	; 255
    249c:	28 81       	ld	r18, Y
    249e:	39 81       	ldd	r19, Y+1	; 0x01
    24a0:	c4 5d       	subi	r28, 0xD4	; 212
    24a2:	d0 40       	sbci	r29, 0x00	; 0
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	60 ef       	ldi	r22, 0xF0	; 240
    24aa:	79 e4       	ldi	r23, 0x49	; 73
    24ac:	82 e0       	ldi	r24, 0x02	; 2
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	6e d7       	rcall	.+3804   	; 0x338e <__divmodsi4>
    24b2:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <clockCounter>
    24b6:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <clockCounter+0x1>
    24ba:	82 17       	cp	r24, r18
    24bc:	93 07       	cpc	r25, r19
    24be:	08 f4       	brcc	.+2      	; 0x24c2 <updateSequencer+0x3e>
    24c0:	4e c0       	rjmp	.+156    	; 0x255e <updateSequencer+0xda>
    24c2:	c2 58       	subi	r28, 0x82	; 130
    24c4:	de 4f       	sbci	r29, 0xFE	; 254
    24c6:	88 81       	ld	r24, Y
    24c8:	ce 57       	subi	r28, 0x7E	; 126
    24ca:	d1 40       	sbci	r29, 0x01	; 1
    24cc:	88 23       	and	r24, r24
    24ce:	09 f4       	brne	.+2      	; 0x24d2 <updateSequencer+0x4e>
    24d0:	40 c0       	rjmp	.+128    	; 0x2552 <updateSequencer+0xce>
	{
		//this will be where we play samples
		clockCounter=0; //clear before the loop, so we can continue counting while the sequencer plays notes.
    24d2:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <clockCounter+0x1>
    24d6:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <clockCounter>
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
    24da:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <currentPlayStep>
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	ee 0f       	add	r30, r30
    24e2:	ff 1f       	adc	r31, r31
    24e4:	8c e0       	ldi	r24, 0x0C	; 12
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	8c 0f       	add	r24, r28
    24ea:	9d 1f       	adc	r25, r29
    24ec:	e8 0f       	add	r30, r24
    24ee:	f9 1f       	adc	r31, r25
    24f0:	e5 51       	subi	r30, 0x15	; 21
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	e0 80       	ld	r14, Z
    24f6:	f1 80       	ldd	r15, Z+1	; 0x01
    24f8:	8e 01       	movw	r16, r28
    24fa:	0c 56       	subi	r16, 0x6C	; 108
    24fc:	1f 4f       	sbci	r17, 0xFF	; 255
    24fe:	6e 01       	movw	r12, r28
    2500:	94 ea       	ldi	r25, 0xA4	; 164
    2502:	c9 0e       	add	r12, r25
    2504:	d1 1c       	adc	r13, r1
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
		{//we're going to loop through all of the possible tracks, and trigger them
			if((parseStep&1)==1)
    2506:	e0 fe       	sbrs	r14, 0
    2508:	09 c0       	rjmp	.+18     	; 0x251c <updateSequencer+0x98>
			{
				trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
    250a:	f8 01       	movw	r30, r16
    250c:	20 81       	ld	r18, Z
    250e:	e0 57       	subi	r30, 0x70	; 112
    2510:	f1 09       	sbc	r31, r1
    2512:	40 81       	ld	r20, Z
    2514:	f8 01       	movw	r30, r16
    2516:	60 89       	ldd	r22, Z+16	; 0x10
    2518:	80 a1       	ldd	r24, Z+32	; 0x20
    251a:	a8 d0       	rcall	.+336    	; 0x266c <trackControl>
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
    251c:	f6 94       	lsr	r15
    251e:	e7 94       	ror	r14
    2520:	0f 5f       	subi	r16, 0xFF	; 255
    2522:	1f 4f       	sbci	r17, 0xFF	; 255
	if(clockCounter>=BPMvar && currentGlobals.playState) //if playstate is on, play next note in sequence.
	{
		//this will be where we play samples
		clockCounter=0; //clear before the loop, so we can continue counting while the sequencer plays notes.
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
    2524:	0c 15       	cp	r16, r12
    2526:	1d 05       	cpc	r17, r13
    2528:	71 f7       	brne	.-36     	; 0x2506 <updateSequencer+0x82>
			{
				trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
		}
		currentPlayStep = currentPlayStep+1;
    252a:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <currentPlayStep>
    252e:	8f 5f       	subi	r24, 0xFF	; 255
    2530:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <currentPlayStep>
		if(currentPlayStep>(sequencerPattern.numSteps-1))
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	ca 52       	subi	r28, 0x2A	; 42
    2538:	df 4f       	sbci	r29, 0xFF	; 255
    253a:	28 81       	ld	r18, Y
    253c:	c6 5d       	subi	r28, 0xD6	; 214
    253e:	d0 40       	sbci	r29, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	21 50       	subi	r18, 0x01	; 1
    2544:	31 09       	sbc	r19, r1
    2546:	28 17       	cp	r18, r24
    2548:	39 07       	cpc	r19, r25
    254a:	4c f4       	brge	.+18     	; 0x255e <updateSequencer+0xda>
		{
			currentPlayStep=0; // don't play more steps than are in the sequence.
    254c:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <currentPlayStep>
    2550:	06 c0       	rjmp	.+12     	; 0x255e <updateSequencer+0xda>
		}

	}else if(clockCounter>=BPMvar && !currentGlobals.playState)
	{ currentPlayStep=0;
    2552:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <currentPlayStep>
		clockCounter = 0;
    2556:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <clockCounter+0x1>
    255a:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <clockCounter>
	}

}
    255e:	df 91       	pop	r29
    2560:	cf 91       	pop	r28
    2562:	1f 91       	pop	r17
    2564:	0f 91       	pop	r16
    2566:	ff 90       	pop	r15
    2568:	ef 90       	pop	r14
    256a:	df 90       	pop	r13
    256c:	cf 90       	pop	r12
    256e:	08 95       	ret

00002570 <__vector_27>:
char serial0Buffer[TX_BUFFER_SIZE];
int serialReadPos = 0;
int serialWritePos = 0;

ISR (USART0_TX_vect)
{
    2570:	1f 92       	push	r1
    2572:	0f 92       	push	r0
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	0f 92       	push	r0
    2578:	11 24       	eor	r1, r1
    257a:	0b b6       	in	r0, 0x3b	; 59
    257c:	0f 92       	push	r0
    257e:	2f 93       	push	r18
    2580:	3f 93       	push	r19
    2582:	8f 93       	push	r24
    2584:	9f 93       	push	r25
    2586:	ef 93       	push	r30
    2588:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
    258a:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <serialReadPos>
    258e:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <serialReadPos+0x1>
    2592:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <serialWritePos>
    2596:	30 91 a4 03 	lds	r19, 0x03A4	; 0x8003a4 <serialWritePos+0x1>
    259a:	82 17       	cp	r24, r18
    259c:	93 07       	cpc	r25, r19
    259e:	c1 f0       	breq	.+48     	; 0x25d0 <__vector_27+0x60>
	{
		UDR0 = serial0Buffer[serialReadPos];
    25a0:	fc 01       	movw	r30, r24
    25a2:	e6 53       	subi	r30, 0x36	; 54
    25a4:	fc 4f       	sbci	r31, 0xFC	; 252
    25a6:	80 81       	ld	r24, Z
    25a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
    25ac:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <serialReadPos>
    25b0:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <serialReadPos+0x1>
    25b4:	01 96       	adiw	r24, 0x01	; 1

		if(serialReadPos >= TX_BUFFER_SIZE)
    25b6:	80 38       	cpi	r24, 0x80	; 128
    25b8:	21 e0       	ldi	r18, 0x01	; 1
    25ba:	92 07       	cpc	r25, r18
    25bc:	2c f4       	brge	.+10     	; 0x25c8 <__vector_27+0x58>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
    25be:	90 93 a6 03 	sts	0x03A6, r25	; 0x8003a6 <serialReadPos+0x1>
    25c2:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <serialReadPos>
    25c6:	04 c0       	rjmp	.+8      	; 0x25d0 <__vector_27+0x60>

		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
    25c8:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <serialReadPos+0x1>
    25cc:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <serialReadPos>
		}
	}
}
    25d0:	ff 91       	pop	r31
    25d2:	ef 91       	pop	r30
    25d4:	9f 91       	pop	r25
    25d6:	8f 91       	pop	r24
    25d8:	3f 91       	pop	r19
    25da:	2f 91       	pop	r18
    25dc:	0f 90       	pop	r0
    25de:	0b be       	out	0x3b, r0	; 59
    25e0:	0f 90       	pop	r0
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	0f 90       	pop	r0
    25e6:	1f 90       	pop	r1
    25e8:	18 95       	reti

000025ea <appendSerial0>:

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
    25ea:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <serialWritePos>
    25ee:	30 91 a4 03 	lds	r19, 0x03A4	; 0x8003a4 <serialWritePos+0x1>
    25f2:	f9 01       	movw	r30, r18
    25f4:	e6 53       	subi	r30, 0x36	; 54
    25f6:	fc 4f       	sbci	r31, 0xFC	; 252
    25f8:	80 83       	st	Z, r24
	serialWritePos++;
    25fa:	2f 5f       	subi	r18, 0xFF	; 255
    25fc:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    25fe:	20 38       	cpi	r18, 0x80	; 128
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	38 07       	cpc	r19, r24
    2604:	2c f4       	brge	.+10     	; 0x2610 <appendSerial0+0x26>
}

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    2606:	30 93 a4 03 	sts	0x03A4, r19	; 0x8003a4 <serialWritePos+0x1>
    260a:	20 93 a3 03 	sts	0x03A3, r18	; 0x8003a3 <serialWritePos>
    260e:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    2610:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <serialWritePos+0x1>
    2614:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <serialWritePos>
    2618:	08 95       	ret

0000261a <serialWrite0>:
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
    261a:	0f 93       	push	r16
    261c:	1f 93       	push	r17
    261e:	cf 93       	push	r28
    2620:	df 93       	push	r29
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2622:	66 23       	and	r22, r22
    2624:	69 f0       	breq	.+26     	; 0x2640 <serialWrite0+0x26>
    2626:	ec 01       	movw	r28, r24
    2628:	61 50       	subi	r22, 0x01	; 1
    262a:	06 2f       	mov	r16, r22
    262c:	10 e0       	ldi	r17, 0x00	; 0
    262e:	0f 5f       	subi	r16, 0xFF	; 255
    2630:	1f 4f       	sbci	r17, 0xFF	; 255
    2632:	08 0f       	add	r16, r24
    2634:	19 1f       	adc	r17, r25
	{
		appendSerial0(c[i]);
    2636:	89 91       	ld	r24, Y+
    2638:	d8 df       	rcall	.-80     	; 0x25ea <appendSerial0>
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    263a:	c0 17       	cp	r28, r16
    263c:	d1 07       	cpc	r29, r17
    263e:	d9 f7       	brne	.-10     	; 0x2636 <serialWrite0+0x1c>
	{
		appendSerial0(c[i]);

	}

	if(UCSR0A & (1 << UDRE0))
    2640:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2644:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    2646:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    264a:	df 91       	pop	r29
    264c:	cf 91       	pop	r28
    264e:	1f 91       	pop	r17
    2650:	0f 91       	pop	r16
    2652:	08 95       	ret

00002654 <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    2654:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    2658:	80 e1       	ldi	r24, 0x10	; 16
    265a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>


UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    265e:	88 e4       	ldi	r24, 0x48	; 72
    2660:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    2664:	86 e0       	ldi	r24, 0x06	; 6
    2666:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    266a:	08 95       	ret

0000266c <trackControl>:
void setInPutMix(uint8_t outputMask)
{
	unsigned char inMix[6] = {0xf0, 0xaa, 0x06, 0x0f, outputMask, 0x55};
	serialWrite0(inMix,6);

}
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	2a 97       	sbiw	r28, 0x0a	; 10
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	cd bf       	out	0x3d, r28	; 61
    2680:	90 ef       	ldi	r25, 0xF0	; 240
    2682:	99 83       	std	Y+1, r25	; 0x01
    2684:	9a ea       	ldi	r25, 0xAA	; 170
    2686:	9a 83       	std	Y+2, r25	; 0x02
    2688:	9a e0       	ldi	r25, 0x0A	; 10
    268a:	9b 83       	std	Y+3, r25	; 0x03
    268c:	93 e0       	ldi	r25, 0x03	; 3
    268e:	9c 83       	std	Y+4, r25	; 0x04
    2690:	2d 83       	std	Y+5, r18	; 0x05
    2692:	8e 83       	std	Y+6, r24	; 0x06
    2694:	6f 83       	std	Y+7, r22	; 0x07
    2696:	48 87       	std	Y+8, r20	; 0x08
    2698:	19 86       	std	Y+9, r1	; 0x09
    269a:	85 e5       	ldi	r24, 0x55	; 85
    269c:	8a 87       	std	Y+10, r24	; 0x0a
    269e:	6a e0       	ldi	r22, 0x0A	; 10
    26a0:	ce 01       	movw	r24, r28
    26a2:	01 96       	adiw	r24, 0x01	; 1
    26a4:	ba df       	rcall	.-140    	; 0x261a <serialWrite0>
    26a6:	2a 96       	adiw	r28, 0x0a	; 10
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	de bf       	out	0x3e, r29	; 62
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	cd bf       	out	0x3d, r28	; 61
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	08 95       	ret

000026b8 <setOutputVolume>:
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	28 97       	sbiw	r28, 0x08	; 8
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	90 ef       	ldi	r25, 0xF0	; 240
    26ce:	99 83       	std	Y+1, r25	; 0x01
    26d0:	9a ea       	ldi	r25, 0xAA	; 170
    26d2:	9a 83       	std	Y+2, r25	; 0x02
    26d4:	98 e0       	ldi	r25, 0x08	; 8
    26d6:	9b 83       	std	Y+3, r25	; 0x03
    26d8:	95 e0       	ldi	r25, 0x05	; 5
    26da:	9c 83       	std	Y+4, r25	; 0x04
    26dc:	4d 83       	std	Y+5, r20	; 0x05
    26de:	8e 83       	std	Y+6, r24	; 0x06
    26e0:	6f 83       	std	Y+7, r22	; 0x07
    26e2:	85 e5       	ldi	r24, 0x55	; 85
    26e4:	88 87       	std	Y+8, r24	; 0x08
    26e6:	68 e0       	ldi	r22, 0x08	; 8
    26e8:	ce 01       	movw	r24, r28
    26ea:	01 96       	adiw	r24, 0x01	; 1
    26ec:	96 df       	rcall	.-212    	; 0x261a <serialWrite0>
    26ee:	28 96       	adiw	r28, 0x08	; 8
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	08 95       	ret

00002700 <setTrackVolume>:
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	29 97       	sbiw	r28, 0x09	; 9
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	90 ef       	ldi	r25, 0xF0	; 240
    2716:	99 83       	std	Y+1, r25	; 0x01
    2718:	9a ea       	ldi	r25, 0xAA	; 170
    271a:	9a 83       	std	Y+2, r25	; 0x02
    271c:	99 e0       	ldi	r25, 0x09	; 9
    271e:	9b 83       	std	Y+3, r25	; 0x03
    2720:	98 e0       	ldi	r25, 0x08	; 8
    2722:	9c 83       	std	Y+4, r25	; 0x04
    2724:	8d 83       	std	Y+5, r24	; 0x05
    2726:	6e 83       	std	Y+6, r22	; 0x06
    2728:	4f 83       	std	Y+7, r20	; 0x07
    272a:	28 87       	std	Y+8, r18	; 0x08
    272c:	85 e5       	ldi	r24, 0x55	; 85
    272e:	89 87       	std	Y+9, r24	; 0x09
    2730:	69 e0       	ldi	r22, 0x09	; 9
    2732:	ce 01       	movw	r24, r28
    2734:	01 96       	adiw	r24, 0x01	; 1
    2736:	71 df       	rcall	.-286    	; 0x261a <serialWrite0>
    2738:	29 96       	adiw	r28, 0x09	; 9
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	08 95       	ret

0000274a <setTrackFade>:
    274a:	cf 92       	push	r12
    274c:	ef 92       	push	r14
    274e:	0f 93       	push	r16
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	2c 97       	sbiw	r28, 0x0c	; 12
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	f8 94       	cli
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	cd bf       	out	0x3d, r28	; 61
    2764:	90 ef       	ldi	r25, 0xF0	; 240
    2766:	99 83       	std	Y+1, r25	; 0x01
    2768:	9a ea       	ldi	r25, 0xAA	; 170
    276a:	9a 83       	std	Y+2, r25	; 0x02
    276c:	9c e0       	ldi	r25, 0x0C	; 12
    276e:	9b 83       	std	Y+3, r25	; 0x03
    2770:	9a e0       	ldi	r25, 0x0A	; 10
    2772:	9c 83       	std	Y+4, r25	; 0x04
    2774:	8d 83       	std	Y+5, r24	; 0x05
    2776:	6e 83       	std	Y+6, r22	; 0x06
    2778:	4f 83       	std	Y+7, r20	; 0x07
    277a:	28 87       	std	Y+8, r18	; 0x08
    277c:	09 87       	std	Y+9, r16	; 0x09
    277e:	ea 86       	std	Y+10, r14	; 0x0a
    2780:	cb 86       	std	Y+11, r12	; 0x0b
    2782:	85 e5       	ldi	r24, 0x55	; 85
    2784:	8c 87       	std	Y+12, r24	; 0x0c
    2786:	6c e0       	ldi	r22, 0x0C	; 12
    2788:	ce 01       	movw	r24, r28
    278a:	01 96       	adiw	r24, 0x01	; 1
    278c:	46 df       	rcall	.-372    	; 0x261a <serialWrite0>
    278e:	2c 96       	adiw	r28, 0x0c	; 12
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	df 91       	pop	r29
    279c:	cf 91       	pop	r28
    279e:	0f 91       	pop	r16
    27a0:	ef 90       	pop	r14
    27a2:	cf 90       	pop	r12
    27a4:	08 95       	ret

000027a6 <outputSampleRate>:
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	28 97       	sbiw	r28, 0x08	; 8
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	f8 94       	cli
    27b4:	de bf       	out	0x3e, r29	; 62
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	cd bf       	out	0x3d, r28	; 61
    27ba:	90 ef       	ldi	r25, 0xF0	; 240
    27bc:	99 83       	std	Y+1, r25	; 0x01
    27be:	9a ea       	ldi	r25, 0xAA	; 170
    27c0:	9a 83       	std	Y+2, r25	; 0x02
    27c2:	98 e0       	ldi	r25, 0x08	; 8
    27c4:	9b 83       	std	Y+3, r25	; 0x03
    27c6:	9c e0       	ldi	r25, 0x0C	; 12
    27c8:	9c 83       	std	Y+4, r25	; 0x04
    27ca:	8d 83       	std	Y+5, r24	; 0x05
    27cc:	6e 83       	std	Y+6, r22	; 0x06
    27ce:	4f 83       	std	Y+7, r20	; 0x07
    27d0:	85 e5       	ldi	r24, 0x55	; 85
    27d2:	88 87       	std	Y+8, r24	; 0x08
    27d4:	68 e0       	ldi	r22, 0x08	; 8
    27d6:	ce 01       	movw	r24, r28
    27d8:	01 96       	adiw	r24, 0x01	; 1
    27da:	1f df       	rcall	.-450    	; 0x261a <serialWrite0>
    27dc:	28 96       	adiw	r28, 0x08	; 8
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	08 95       	ret

000027ee <playTrack>:
void playTrack(Pattern *currentPattern, Globals *currentGlobals, uint8_t trigInput) //most of these params are just getting passed through.
{ //4 cases:
    27ee:	8f 92       	push	r8
    27f0:	9f 92       	push	r9
    27f2:	af 92       	push	r10
    27f4:	bf 92       	push	r11
    27f6:	cf 92       	push	r12
    27f8:	ef 92       	push	r14
    27fa:	0f 93       	push	r16
    27fc:	cf 93       	push	r28
    27fe:	df 93       	push	r29
	//3:only release envelopes
	//4:both sides of the envelope
	//we could maybe streamline this by playing the sample in every case, before checking any if statements?
	//don't know if these would cause any more latency between the if statement.
	
	uint16_t totalAttack = currentPattern->trackAttackTimeLSB[trigInput]|((currentPattern->trackAttackTimeMSB[trigInput])<<8);
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	bc 01       	movw	r22, r24
    2804:	64 0f       	add	r22, r20
    2806:	75 1f       	adc	r23, r21
    2808:	fb 01       	movw	r30, r22
    280a:	e8 5b       	subi	r30, 0xB8	; 184
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
	uint16_t totalRelease = currentPattern->trackReleaseTimeLSB[trigInput]|((currentPattern->trackReleaseTimeMSB[trigInput])<<8);
	if((totalAttack==0)) //&&(totalRelease==0))
    280e:	20 81       	ld	r18, Z
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	32 2f       	mov	r19, r18
    2814:	22 27       	eor	r18, r18
	//3:only release envelopes
	//4:both sides of the envelope
	//we could maybe streamline this by playing the sample in every case, before checking any if statements?
	//don't know if these would cause any more latency between the if statement.
	
	uint16_t totalAttack = currentPattern->trackAttackTimeLSB[trigInput]|((currentPattern->trackAttackTimeMSB[trigInput])<<8);
    2816:	70 96       	adiw	r30, 0x10	; 16
	uint16_t totalRelease = currentPattern->trackReleaseTimeLSB[trigInput]|((currentPattern->trackReleaseTimeMSB[trigInput])<<8);
	if((totalAttack==0)) //&&(totalRelease==0))
    2818:	60 81       	ld	r22, Z
    281a:	26 2b       	or	r18, r22
    281c:	23 2b       	or	r18, r19
    281e:	a9 f4       	brne	.+42     	; 0x284a <playTrack+0x5c>
	{
		trackControl(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput], 
			currentPattern->trackOutputRoute[trigInput], currentPattern->trackPlayMode[trigInput]);
    2820:	ec 01       	movw	r28, r24
    2822:	c4 0f       	add	r28, r20
    2824:	d5 1f       	adc	r29, r21
    2826:	ce 01       	movw	r24, r28
    2828:	88 57       	subi	r24, 0x78	; 120
    282a:	9f 4f       	sbci	r25, 0xFF	; 255
	
	uint16_t totalAttack = currentPattern->trackAttackTimeLSB[trigInput]|((currentPattern->trackAttackTimeMSB[trigInput])<<8);
	uint16_t totalRelease = currentPattern->trackReleaseTimeLSB[trigInput]|((currentPattern->trackReleaseTimeMSB[trigInput])<<8);
	if((totalAttack==0)) //&&(totalRelease==0))
	{
		trackControl(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput], 
    282c:	de 01       	movw	r26, r28
    282e:	a8 56       	subi	r26, 0x68	; 104
    2830:	bf 4f       	sbci	r27, 0xFF	; 255
    2832:	5e 01       	movw	r10, r28
    2834:	28 ea       	ldi	r18, 0xA8	; 168
    2836:	a2 0e       	add	r10, r18
    2838:	b1 1c       	adc	r11, r1
    283a:	fc 01       	movw	r30, r24
    283c:	20 81       	ld	r18, Z
    283e:	48 8d       	ldd	r20, Y+24	; 0x18
    2840:	6c 91       	ld	r22, X
    2842:	f5 01       	movw	r30, r10
    2844:	80 81       	ld	r24, Z
    2846:	12 df       	rcall	.-476    	; 0x266c <trackControl>
    2848:	2c c0       	rjmp	.+88     	; 0x28a2 <playTrack+0xb4>
			currentPattern->trackOutputRoute[trigInput], currentPattern->trackPlayMode[trigInput]);
	}
	else //if(totalRelease==0) //attack stage only
	{
		setTrackVolume(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput],255,186);
    284a:	ec 01       	movw	r28, r24
    284c:	c4 0f       	add	r28, r20
    284e:	d5 1f       	adc	r29, r21
    2850:	4e 01       	movw	r8, r28
    2852:	f8 e9       	ldi	r31, 0x98	; 152
    2854:	8f 0e       	add	r8, r31
    2856:	91 1c       	adc	r9, r1
    2858:	5e 01       	movw	r10, r28
    285a:	28 ea       	ldi	r18, 0xA8	; 168
    285c:	a2 0e       	add	r10, r18
    285e:	b1 1c       	adc	r11, r1
    2860:	2a eb       	ldi	r18, 0xBA	; 186
    2862:	4f ef       	ldi	r20, 0xFF	; 255
    2864:	f4 01       	movw	r30, r8
    2866:	60 81       	ld	r22, Z
    2868:	f5 01       	movw	r30, r10
    286a:	80 81       	ld	r24, Z
    286c:	49 df       	rcall	.-366    	; 0x2700 <setTrackVolume>
				trackControl(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput],
				currentPattern->trackOutputRoute[trigInput], currentPattern->trackPlayMode[trigInput]);
    286e:	fe 01       	movw	r30, r28
    2870:	e8 57       	subi	r30, 0x78	; 120
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
			currentPattern->trackOutputRoute[trigInput], currentPattern->trackPlayMode[trigInput]);
	}
	else //if(totalRelease==0) //attack stage only
	{
		setTrackVolume(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput],255,186);
				trackControl(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput],
    2874:	20 81       	ld	r18, Z
    2876:	48 8d       	ldd	r20, Y+24	; 0x18
    2878:	f4 01       	movw	r30, r8
    287a:	60 81       	ld	r22, Z
    287c:	f5 01       	movw	r30, r10
    287e:	80 81       	ld	r24, Z
    2880:	f5 de       	rcall	.-534    	; 0x266c <trackControl>
				currentPattern->trackOutputRoute[trigInput], currentPattern->trackPlayMode[trigInput]);
		setTrackFade(currentPattern->trackSampleLSB[trigInput], currentPattern->trackSampleMSB[trigInput], 
    2882:	de 01       	movw	r26, r28
    2884:	a8 5b       	subi	r26, 0xB8	; 184
    2886:	bf 4f       	sbci	r27, 0xFF	; 255
    2888:	fe 01       	movw	r30, r28
    288a:	e8 5a       	subi	r30, 0xA8	; 168
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	c1 2c       	mov	r12, r1
    2890:	ec 90       	ld	r14, X
    2892:	00 81       	ld	r16, Z
    2894:	28 a5       	ldd	r18, Y+40	; 0x28
    2896:	48 ad       	ldd	r20, Y+56	; 0x38
    2898:	f4 01       	movw	r30, r8
    289a:	60 81       	ld	r22, Z
    289c:	f5 01       	movw	r30, r10
    289e:	80 81       	ld	r24, Z
    28a0:	54 df       	rcall	.-344    	; 0x274a <setTrackFade>
		//do release section stuff
		
		
	}
	*/
}
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	0f 91       	pop	r16
    28a8:	ef 90       	pop	r14
    28aa:	cf 90       	pop	r12
    28ac:	bf 90       	pop	r11
    28ae:	af 90       	pop	r10
    28b0:	9f 90       	pop	r9
    28b2:	8f 90       	pop	r8
    28b4:	08 95       	ret

000028b6 <twi_init>:
		}

		returnNum=twi_readNak();

	return returnNum;
}
    28b6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    28ba:	88 e4       	ldi	r24, 0x48	; 72
    28bc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    28c0:	08 95       	ret

000028c2 <twi_start>:
    28c2:	94 ea       	ldi	r25, 0xA4	; 164
    28c4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    28c8:	ec eb       	ldi	r30, 0xBC	; 188
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	90 81       	ld	r25, Z
    28ce:	99 23       	and	r25, r25
    28d0:	ec f7       	brge	.-6      	; 0x28cc <twi_start+0xa>
    28d2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    28d6:	98 7f       	andi	r25, 0xF8	; 248
    28d8:	98 30       	cpi	r25, 0x08	; 8
    28da:	11 f0       	breq	.+4      	; 0x28e0 <twi_start+0x1e>
    28dc:	90 31       	cpi	r25, 0x10	; 16
    28de:	a1 f4       	brne	.+40     	; 0x2908 <twi_start+0x46>
    28e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    28e4:	84 e8       	ldi	r24, 0x84	; 132
    28e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    28ea:	ec eb       	ldi	r30, 0xBC	; 188
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	88 23       	and	r24, r24
    28f2:	ec f7       	brge	.-6      	; 0x28ee <twi_start+0x2c>
    28f4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    28f8:	98 7f       	andi	r25, 0xF8	; 248
    28fa:	98 31       	cpi	r25, 0x18	; 24
    28fc:	39 f0       	breq	.+14     	; 0x290c <twi_start+0x4a>
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	90 34       	cpi	r25, 0x40	; 64
    2902:	29 f4       	brne	.+10     	; 0x290e <twi_start+0x4c>
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	08 95       	ret
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	08 95       	ret
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	08 95       	ret

00002910 <twi_stop>:
    2910:	84 e9       	ldi	r24, 0x94	; 148
    2912:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2916:	ec eb       	ldi	r30, 0xBC	; 188
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	84 fd       	sbrc	r24, 4
    291e:	fd cf       	rjmp	.-6      	; 0x291a <twi_stop+0xa>
    2920:	08 95       	ret

00002922 <twi_write>:
    2922:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2926:	84 e8       	ldi	r24, 0x84	; 132
    2928:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    292c:	ec eb       	ldi	r30, 0xBC	; 188
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	88 23       	and	r24, r24
    2934:	ec f7       	brge	.-6      	; 0x2930 <twi_write+0xe>
    2936:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    293a:	98 7f       	andi	r25, 0xF8	; 248
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	98 32       	cpi	r25, 0x28	; 40
    2940:	09 f4       	brne	.+2      	; 0x2944 <twi_write+0x22>
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	08 95       	ret

00002946 <twi_readAck>:
    2946:	84 ec       	ldi	r24, 0xC4	; 196
    2948:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    294c:	ec eb       	ldi	r30, 0xBC	; 188
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	88 23       	and	r24, r24
    2954:	ec f7       	brge	.-6      	; 0x2950 <twi_readAck+0xa>
    2956:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    295a:	08 95       	ret

0000295c <twi_readNak>:
    295c:	84 e8       	ldi	r24, 0x84	; 132
    295e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2962:	ec eb       	ldi	r30, 0xBC	; 188
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	88 23       	and	r24, r24
    296a:	ec f7       	brge	.-6      	; 0x2966 <twi_readNak+0xa>
    296c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2970:	08 95       	ret

00002972 <eepromSavePattern>:
    2972:	2f 92       	push	r2
    2974:	3f 92       	push	r3
    2976:	4f 92       	push	r4
    2978:	5f 92       	push	r5
    297a:	6f 92       	push	r6
    297c:	7f 92       	push	r7
    297e:	8f 92       	push	r8
    2980:	9f 92       	push	r9
    2982:	af 92       	push	r10
    2984:	bf 92       	push	r11
    2986:	cf 92       	push	r12
    2988:	df 92       	push	r13
    298a:	ef 92       	push	r14
    298c:	ff 92       	push	r15
    298e:	0f 93       	push	r16
    2990:	1f 93       	push	r17
    2992:	cf 93       	push	r28
    2994:	df 93       	push	r29
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
    299a:	c4 59       	subi	r28, 0x94	; 148
    299c:	d1 09       	sbc	r29, r1
    299e:	0f b6       	in	r0, 0x3f	; 63
    29a0:	f8 94       	cli
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	0f be       	out	0x3f, r0	; 63
    29a6:	cd bf       	out	0x3d, r28	; 61
    29a8:	cb 5e       	subi	r28, 0xEB	; 235
    29aa:	dd 4f       	sbci	r29, 0xFD	; 253
    29ac:	28 81       	ld	r18, Y
    29ae:	c5 51       	subi	r28, 0x15	; 21
    29b0:	d2 40       	sbci	r29, 0x02	; 2
    29b2:	ce 58       	subi	r28, 0x8E	; 142
    29b4:	de 4f       	sbci	r29, 0xFE	; 254
    29b6:	38 80       	ld	r3, Y
    29b8:	c2 57       	subi	r28, 0x72	; 114
    29ba:	d1 40       	sbci	r29, 0x01	; 1
    29bc:	cd 58       	subi	r28, 0x8D	; 141
    29be:	de 4f       	sbci	r29, 0xFE	; 254
    29c0:	28 80       	ld	r2, Y
    29c2:	c3 57       	subi	r28, 0x73	; 115
    29c4:	d1 40       	sbci	r29, 0x01	; 1
    29c6:	82 2f       	mov	r24, r18
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	22 23       	and	r18, r18
    29cc:	84 f0       	brlt	.+32     	; 0x29ee <eepromSavePattern+0x7c>
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	3c 01       	movw	r6, r24
    29d2:	66 0c       	add	r6, r6
    29d4:	77 1c       	adc	r7, r7
    29d6:	68 0e       	add	r6, r24
    29d8:	79 1e       	adc	r7, r25
    29da:	76 94       	lsr	r7
    29dc:	76 2c       	mov	r7, r6
    29de:	66 24       	eor	r6, r6
    29e0:	77 94       	ror	r7
    29e2:	67 94       	ror	r6
    29e4:	0f 2e       	mov	r0, r31
    29e6:	f0 ea       	ldi	r31, 0xA0	; 160
    29e8:	5f 2e       	mov	r5, r31
    29ea:	f0 2d       	mov	r31, r0
    29ec:	11 c0       	rjmp	.+34     	; 0x2a10 <eepromSavePattern+0x9e>
    29ee:	80 58       	subi	r24, 0x80	; 128
    29f0:	91 09       	sbc	r25, r1
    29f2:	3c 01       	movw	r6, r24
    29f4:	66 0c       	add	r6, r6
    29f6:	77 1c       	adc	r7, r7
    29f8:	86 0d       	add	r24, r6
    29fa:	97 1d       	adc	r25, r7
    29fc:	3c 01       	movw	r6, r24
    29fe:	76 94       	lsr	r7
    2a00:	76 2c       	mov	r7, r6
    2a02:	66 24       	eor	r6, r6
    2a04:	77 94       	ror	r7
    2a06:	67 94       	ror	r6
    2a08:	0f 2e       	mov	r0, r31
    2a0a:	f8 ea       	ldi	r31, 0xA8	; 168
    2a0c:	5f 2e       	mov	r5, r31
    2a0e:	f0 2d       	mov	r31, r0
    2a10:	ae 01       	movw	r20, r28
    2a12:	46 55       	subi	r20, 0x56	; 86
    2a14:	5f 4f       	sbci	r21, 0xFF	; 255
    2a16:	ce 01       	movw	r24, r28
    2a18:	01 96       	adiw	r24, 0x01	; 1
    2a1a:	7c 01       	movw	r14, r24
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	ee 54       	subi	r30, 0x4E	; 78
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	da 01       	movw	r26, r20
    2a24:	2d 91       	ld	r18, X+
    2a26:	ad 01       	movw	r20, r26
    2a28:	dc 01       	movw	r26, r24
    2a2a:	2d 93       	st	X+, r18
    2a2c:	cd 01       	movw	r24, r26
    2a2e:	4e 17       	cp	r20, r30
    2a30:	5f 07       	cpc	r21, r31
    2a32:	b9 f7       	brne	.-18     	; 0x2a22 <eepromSavePattern+0xb0>
    2a34:	de 01       	movw	r26, r28
    2a36:	19 96       	adiw	r26, 0x09	; 9
    2a38:	ce 01       	movw	r24, r28
    2a3a:	86 54       	subi	r24, 0x46	; 70
    2a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3e:	21 91       	ld	r18, Z+
    2a40:	2d 93       	st	X+, r18
    2a42:	e8 17       	cp	r30, r24
    2a44:	f9 07       	cpc	r31, r25
    2a46:	d9 f7       	brne	.-10     	; 0x2a3e <eepromSavePattern+0xcc>
    2a48:	4e 01       	movw	r8, r28
    2a4a:	b1 e1       	ldi	r27, 0x11	; 17
    2a4c:	8b 0e       	add	r8, r27
    2a4e:	91 1c       	adc	r9, r1
    2a50:	be 01       	movw	r22, r28
    2a52:	6e 53       	subi	r22, 0x3E	; 62
    2a54:	7f 4f       	sbci	r23, 0xFF	; 255
    2a56:	d4 01       	movw	r26, r8
    2a58:	fc 01       	movw	r30, r24
    2a5a:	21 91       	ld	r18, Z+
    2a5c:	cf 01       	movw	r24, r30
    2a5e:	2d 93       	st	X+, r18
    2a60:	e6 17       	cp	r30, r22
    2a62:	f7 07       	cpc	r31, r23
    2a64:	c9 f7       	brne	.-14     	; 0x2a58 <eepromSavePattern+0xe6>
    2a66:	ce 01       	movw	r24, r28
    2a68:	49 96       	adiw	r24, 0x19	; 25
    2a6a:	ae 01       	movw	r20, r28
    2a6c:	4e 52       	subi	r20, 0x2E	; 46
    2a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a70:	db 01       	movw	r26, r22
    2a72:	2d 91       	ld	r18, X+
    2a74:	bd 01       	movw	r22, r26
    2a76:	fc 01       	movw	r30, r24
    2a78:	21 93       	st	Z+, r18
    2a7a:	cf 01       	movw	r24, r30
    2a7c:	a4 17       	cp	r26, r20
    2a7e:	b5 07       	cpc	r27, r21
    2a80:	b9 f7       	brne	.-18     	; 0x2a70 <eepromSavePattern+0xfe>
    2a82:	ce 01       	movw	r24, r28
    2a84:	89 96       	adiw	r24, 0x29	; 41
    2a86:	de 01       	movw	r26, r28
    2a88:	ae 51       	subi	r26, 0x1E	; 30
    2a8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a8c:	fa 01       	movw	r30, r20
    2a8e:	21 91       	ld	r18, Z+
    2a90:	af 01       	movw	r20, r30
    2a92:	fc 01       	movw	r30, r24
    2a94:	21 93       	st	Z+, r18
    2a96:	cf 01       	movw	r24, r30
    2a98:	4a 17       	cp	r20, r26
    2a9a:	5b 07       	cpc	r21, r27
    2a9c:	b9 f7       	brne	.-18     	; 0x2a8c <eepromSavePattern+0x11a>
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	c9 96       	adiw	r24, 0x39	; 57
    2aa2:	ae 01       	movw	r20, r28
    2aa4:	4e 50       	subi	r20, 0x0E	; 14
    2aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa8:	2d 91       	ld	r18, X+
    2aaa:	fc 01       	movw	r30, r24
    2aac:	21 93       	st	Z+, r18
    2aae:	cf 01       	movw	r24, r30
    2ab0:	a4 17       	cp	r26, r20
    2ab2:	b5 07       	cpc	r27, r21
    2ab4:	c9 f7       	brne	.-14     	; 0x2aa8 <eepromSavePattern+0x136>
    2ab6:	ce 01       	movw	r24, r28
    2ab8:	87 5b       	subi	r24, 0xB7	; 183
    2aba:	9f 4f       	sbci	r25, 0xFF	; 255
    2abc:	de 01       	movw	r26, r28
    2abe:	ae 5f       	subi	r26, 0xFE	; 254
    2ac0:	be 4f       	sbci	r27, 0xFE	; 254
    2ac2:	fa 01       	movw	r30, r20
    2ac4:	21 91       	ld	r18, Z+
    2ac6:	af 01       	movw	r20, r30
    2ac8:	fc 01       	movw	r30, r24
    2aca:	21 93       	st	Z+, r18
    2acc:	cf 01       	movw	r24, r30
    2ace:	4a 17       	cp	r20, r26
    2ad0:	5b 07       	cpc	r21, r27
    2ad2:	b9 f7       	brne	.-18     	; 0x2ac2 <eepromSavePattern+0x150>
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	87 5a       	subi	r24, 0xA7	; 167
    2ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    2ada:	ae 01       	movw	r20, r28
    2adc:	4e 5e       	subi	r20, 0xEE	; 238
    2ade:	5e 4f       	sbci	r21, 0xFE	; 254
    2ae0:	2d 91       	ld	r18, X+
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	21 93       	st	Z+, r18
    2ae6:	cf 01       	movw	r24, r30
    2ae8:	4a 17       	cp	r20, r26
    2aea:	5b 07       	cpc	r21, r27
    2aec:	c9 f7       	brne	.-14     	; 0x2ae0 <eepromSavePattern+0x16e>
    2aee:	de 01       	movw	r26, r28
    2af0:	a7 59       	subi	r26, 0x97	; 151
    2af2:	bf 4f       	sbci	r27, 0xFF	; 255
    2af4:	5e 01       	movw	r10, r28
    2af6:	fe ed       	ldi	r31, 0xDE	; 222
    2af8:	af 1a       	sub	r10, r31
    2afa:	fe ef       	ldi	r31, 0xFE	; 254
    2afc:	bf 0a       	sbc	r11, r31
    2afe:	fa 01       	movw	r30, r20
    2b00:	81 91       	ld	r24, Z+
    2b02:	af 01       	movw	r20, r30
    2b04:	8d 93       	st	X+, r24
    2b06:	ae 16       	cp	r10, r30
    2b08:	bf 06       	cpc	r11, r31
    2b0a:	c9 f7       	brne	.-14     	; 0x2afe <eepromSavePattern+0x18c>
    2b0c:	85 2d       	mov	r24, r5
    2b0e:	d9 de       	rcall	.-590    	; 0x28c2 <twi_start>
    2b10:	81 30       	cpi	r24, 0x01	; 1
    2b12:	81 f4       	brne	.+32     	; 0x2b34 <eepromSavePattern+0x1c2>
    2b14:	84 e1       	ldi	r24, 0x14	; 20
    2b16:	ec e0       	ldi	r30, 0x0C	; 12
    2b18:	f2 e0       	ldi	r31, 0x02	; 2
    2b1a:	de 01       	movw	r26, r28
    2b1c:	af 57       	subi	r26, 0x7F	; 127
    2b1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b20:	01 90       	ld	r0, Z+
    2b22:	0d 92       	st	X+, r0
    2b24:	8a 95       	dec	r24
    2b26:	e1 f7       	brne	.-8      	; 0x2b20 <eepromSavePattern+0x1ae>
    2b28:	63 e0       	ldi	r22, 0x03	; 3
    2b2a:	70 e0       	ldi	r23, 0x00	; 0
    2b2c:	ce 01       	movw	r24, r28
    2b2e:	8f 57       	subi	r24, 0x7F	; 127
    2b30:	9f 4f       	sbci	r25, 0xFF	; 255
    2b32:	62 da       	rcall	.-2876   	; 0x1ff8 <outputS>
    2b34:	87 2d       	mov	r24, r7
    2b36:	f5 de       	rcall	.-534    	; 0x2922 <twi_write>
    2b38:	46 2c       	mov	r4, r6
    2b3a:	86 2d       	mov	r24, r6
    2b3c:	f2 de       	rcall	.-540    	; 0x2922 <twi_write>
    2b3e:	6e 01       	movw	r12, r28
    2b40:	f9 e7       	ldi	r31, 0x79	; 121
    2b42:	cf 0e       	add	r12, r31
    2b44:	d1 1c       	adc	r13, r1
    2b46:	87 01       	movw	r16, r14
    2b48:	d8 01       	movw	r26, r16
    2b4a:	8d 91       	ld	r24, X+
    2b4c:	8d 01       	movw	r16, r26
    2b4e:	e9 de       	rcall	.-558    	; 0x2922 <twi_write>
    2b50:	c0 16       	cp	r12, r16
    2b52:	d1 06       	cpc	r13, r17
    2b54:	c9 f7       	brne	.-14     	; 0x2b48 <eepromSavePattern+0x1d6>
    2b56:	dc de       	rcall	.-584    	; 0x2910 <twi_stop>
    2b58:	ef e1       	ldi	r30, 0x1F	; 31
    2b5a:	fe e4       	ldi	r31, 0x4E	; 78
    2b5c:	31 97       	sbiw	r30, 0x01	; 1
    2b5e:	f1 f7       	brne	.-4      	; 0x2b5c <eepromSavePattern+0x1ea>
    2b60:	00 c0       	rjmp	.+0      	; 0x2b62 <eepromSavePattern+0x1f0>
    2b62:	00 00       	nop
    2b64:	9e 01       	movw	r18, r28
    2b66:	2e 5c       	subi	r18, 0xCE	; 206
    2b68:	3e 4f       	sbci	r19, 0xFE	; 254
    2b6a:	f7 01       	movw	r30, r14
    2b6c:	d5 01       	movw	r26, r10
    2b6e:	8d 91       	ld	r24, X+
    2b70:	5d 01       	movw	r10, r26
    2b72:	81 93       	st	Z+, r24
    2b74:	2a 17       	cp	r18, r26
    2b76:	3b 07       	cpc	r19, r27
    2b78:	c9 f7       	brne	.-14     	; 0x2b6c <eepromSavePattern+0x1fa>
    2b7a:	de 01       	movw	r26, r28
    2b7c:	91 96       	adiw	r26, 0x21	; 33
    2b7e:	f9 01       	movw	r30, r18
    2b80:	81 91       	ld	r24, Z+
    2b82:	9f 01       	movw	r18, r30
    2b84:	f4 01       	movw	r30, r8
    2b86:	81 93       	st	Z+, r24
    2b88:	4f 01       	movw	r8, r30
    2b8a:	ae 17       	cp	r26, r30
    2b8c:	bf 07       	cpc	r27, r31
    2b8e:	b9 f7       	brne	.-18     	; 0x2b7e <eepromSavePattern+0x20c>
    2b90:	ce 01       	movw	r24, r28
    2b92:	8e 5b       	subi	r24, 0xBE	; 190
    2b94:	9e 4f       	sbci	r25, 0xFE	; 254
    2b96:	ae 01       	movw	r20, r28
    2b98:	4f 5c       	subi	r20, 0xCF	; 207
    2b9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	21 91       	ld	r18, Z+
    2ba0:	cf 01       	movw	r24, r30
    2ba2:	2d 93       	st	X+, r18
    2ba4:	a4 17       	cp	r26, r20
    2ba6:	b5 07       	cpc	r27, r21
    2ba8:	c9 f7       	brne	.-14     	; 0x2b9c <eepromSavePattern+0x22a>
    2baa:	ce 01       	movw	r24, r28
    2bac:	8e 5a       	subi	r24, 0xAE	; 174
    2bae:	9e 4f       	sbci	r25, 0xFE	; 254
    2bb0:	de 01       	movw	r26, r28
    2bb2:	af 5b       	subi	r26, 0xBF	; 191
    2bb4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	21 91       	ld	r18, Z+
    2bba:	cf 01       	movw	r24, r30
    2bbc:	fa 01       	movw	r30, r20
    2bbe:	21 93       	st	Z+, r18
    2bc0:	af 01       	movw	r20, r30
    2bc2:	ae 17       	cp	r26, r30
    2bc4:	bf 07       	cpc	r27, r31
    2bc6:	b9 f7       	brne	.-18     	; 0x2bb6 <eepromSavePattern+0x244>
    2bc8:	fe 01       	movw	r30, r28
    2bca:	ee 59       	subi	r30, 0x9E	; 158
    2bcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2bce:	9e 01       	movw	r18, r28
    2bd0:	2e 58       	subi	r18, 0x8E	; 142
    2bd2:	3e 4f       	sbci	r19, 0xFE	; 254
    2bd4:	81 91       	ld	r24, Z+
    2bd6:	8d 93       	st	X+, r24
    2bd8:	2e 17       	cp	r18, r30
    2bda:	3f 07       	cpc	r19, r31
    2bdc:	d9 f7       	brne	.-10     	; 0x2bd4 <eepromSavePattern+0x262>
    2bde:	62 96       	adiw	r28, 0x12	; 18
    2be0:	2f ae       	std	Y+63, r2	; 0x3f
    2be2:	62 97       	sbiw	r28, 0x12	; 18
    2be4:	63 96       	adiw	r28, 0x13	; 19
    2be6:	3f ae       	std	Y+63, r3	; 0x3f
    2be8:	63 97       	sbiw	r28, 0x13	; 19
    2bea:	cc 58       	subi	r28, 0x8C	; 140
    2bec:	de 4f       	sbci	r29, 0xFE	; 254
    2bee:	88 81       	ld	r24, Y
    2bf0:	c4 57       	subi	r28, 0x74	; 116
    2bf2:	d1 40       	sbci	r29, 0x01	; 1
    2bf4:	64 96       	adiw	r28, 0x14	; 20
    2bf6:	8f af       	std	Y+63, r24	; 0x3f
    2bf8:	64 97       	sbiw	r28, 0x14	; 20
    2bfa:	85 2d       	mov	r24, r5
    2bfc:	62 de       	rcall	.-828    	; 0x28c2 <twi_start>
    2bfe:	81 30       	cpi	r24, 0x01	; 1
    2c00:	81 f4       	brne	.+32     	; 0x2c22 <eepromSavePattern+0x2b0>
    2c02:	84 e1       	ldi	r24, 0x14	; 20
    2c04:	e1 e2       	ldi	r30, 0x21	; 33
    2c06:	f2 e0       	ldi	r31, 0x02	; 2
    2c08:	de 01       	movw	r26, r28
    2c0a:	af 57       	subi	r26, 0x7F	; 127
    2c0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0e:	01 90       	ld	r0, Z+
    2c10:	0d 92       	st	X+, r0
    2c12:	8a 95       	dec	r24
    2c14:	e1 f7       	brne	.-8      	; 0x2c0e <eepromSavePattern+0x29c>
    2c16:	63 e0       	ldi	r22, 0x03	; 3
    2c18:	70 e0       	ldi	r23, 0x00	; 0
    2c1a:	ce 01       	movw	r24, r28
    2c1c:	8f 57       	subi	r24, 0x7F	; 127
    2c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c20:	eb d9       	rcall	.-3114   	; 0x1ff8 <outputS>
    2c22:	c3 01       	movw	r24, r6
    2c24:	80 58       	subi	r24, 0x80	; 128
    2c26:	9f 4f       	sbci	r25, 0xFF	; 255
    2c28:	89 2f       	mov	r24, r25
    2c2a:	7b de       	rcall	.-778    	; 0x2922 <twi_write>
    2c2c:	80 e8       	ldi	r24, 0x80	; 128
    2c2e:	84 0d       	add	r24, r4
    2c30:	78 de       	rcall	.-784    	; 0x2922 <twi_write>
    2c32:	8e 01       	movw	r16, r28
    2c34:	0c 5a       	subi	r16, 0xAC	; 172
    2c36:	1f 4f       	sbci	r17, 0xFF	; 255
    2c38:	d7 01       	movw	r26, r14
    2c3a:	8d 91       	ld	r24, X+
    2c3c:	7d 01       	movw	r14, r26
    2c3e:	71 de       	rcall	.-798    	; 0x2922 <twi_write>
    2c40:	0e 15       	cp	r16, r14
    2c42:	1f 05       	cpc	r17, r15
    2c44:	c9 f7       	brne	.-14     	; 0x2c38 <eepromSavePattern+0x2c6>
    2c46:	64 de       	rcall	.-824    	; 0x2910 <twi_stop>
    2c48:	ef e1       	ldi	r30, 0x1F	; 31
    2c4a:	fe e4       	ldi	r31, 0x4E	; 78
    2c4c:	31 97       	sbiw	r30, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <eepromSavePattern+0x2da>
    2c50:	00 c0       	rjmp	.+0      	; 0x2c52 <eepromSavePattern+0x2e0>
    2c52:	00 00       	nop
    2c54:	85 2d       	mov	r24, r5
    2c56:	35 de       	rcall	.-918    	; 0x28c2 <twi_start>
    2c58:	81 30       	cpi	r24, 0x01	; 1
    2c5a:	81 f4       	brne	.+32     	; 0x2c7c <eepromSavePattern+0x30a>
    2c5c:	84 e1       	ldi	r24, 0x14	; 20
    2c5e:	e6 e3       	ldi	r30, 0x36	; 54
    2c60:	f2 e0       	ldi	r31, 0x02	; 2
    2c62:	de 01       	movw	r26, r28
    2c64:	af 57       	subi	r26, 0x7F	; 127
    2c66:	bf 4f       	sbci	r27, 0xFF	; 255
    2c68:	01 90       	ld	r0, Z+
    2c6a:	0d 92       	st	X+, r0
    2c6c:	8a 95       	dec	r24
    2c6e:	e1 f7       	brne	.-8      	; 0x2c68 <eepromSavePattern+0x2f6>
    2c70:	63 e0       	ldi	r22, 0x03	; 3
    2c72:	70 e0       	ldi	r23, 0x00	; 0
    2c74:	ce 01       	movw	r24, r28
    2c76:	8f 57       	subi	r24, 0x7F	; 127
    2c78:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7a:	be d9       	rcall	.-3204   	; 0x1ff8 <outputS>
    2c7c:	73 94       	inc	r7
    2c7e:	87 2d       	mov	r24, r7
    2c80:	50 de       	rcall	.-864    	; 0x2922 <twi_write>
    2c82:	84 2d       	mov	r24, r4
    2c84:	4e de       	rcall	.-868    	; 0x2922 <twi_write>
    2c86:	8e 01       	movw	r16, r28
    2c88:	0b 56       	subi	r16, 0x6B	; 107
    2c8a:	1e 4f       	sbci	r17, 0xFE	; 254
    2c8c:	6e 01       	movw	r12, r28
    2c8e:	2b ee       	ldi	r18, 0xEB	; 235
    2c90:	c2 1a       	sub	r12, r18
    2c92:	2d ef       	ldi	r18, 0xFD	; 253
    2c94:	d2 0a       	sbc	r13, r18
    2c96:	d8 01       	movw	r26, r16
    2c98:	fc 90       	ld	r15, X
    2c9a:	11 96       	adiw	r26, 0x01	; 1
    2c9c:	8c 91       	ld	r24, X
    2c9e:	0e 5f       	subi	r16, 0xFE	; 254
    2ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca2:	3f de       	rcall	.-898    	; 0x2922 <twi_write>
    2ca4:	8f 2d       	mov	r24, r15
    2ca6:	3d de       	rcall	.-902    	; 0x2922 <twi_write>
    2ca8:	c0 16       	cp	r12, r16
    2caa:	d1 06       	cpc	r13, r17
    2cac:	a1 f7       	brne	.-24     	; 0x2c96 <eepromSavePattern+0x324>
    2cae:	30 de       	rcall	.-928    	; 0x2910 <twi_stop>
    2cb0:	ef e1       	ldi	r30, 0x1F	; 31
    2cb2:	fe e4       	ldi	r31, 0x4E	; 78
    2cb4:	31 97       	sbiw	r30, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <eepromSavePattern+0x342>
    2cb8:	00 c0       	rjmp	.+0      	; 0x2cba <eepromSavePattern+0x348>
    2cba:	00 00       	nop
    2cbc:	cc 56       	subi	r28, 0x6C	; 108
    2cbe:	df 4f       	sbci	r29, 0xFF	; 255
    2cc0:	0f b6       	in	r0, 0x3f	; 63
    2cc2:	f8 94       	cli
    2cc4:	de bf       	out	0x3e, r29	; 62
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	cd bf       	out	0x3d, r28	; 61
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	ff 90       	pop	r15
    2cd4:	ef 90       	pop	r14
    2cd6:	df 90       	pop	r13
    2cd8:	cf 90       	pop	r12
    2cda:	bf 90       	pop	r11
    2cdc:	af 90       	pop	r10
    2cde:	9f 90       	pop	r9
    2ce0:	8f 90       	pop	r8
    2ce2:	7f 90       	pop	r7
    2ce4:	6f 90       	pop	r6
    2ce6:	5f 90       	pop	r5
    2ce8:	4f 90       	pop	r4
    2cea:	3f 90       	pop	r3
    2cec:	2f 90       	pop	r2
    2cee:	08 95       	ret

00002cf0 <eepromLoadPattern>:
    2cf0:	8f 92       	push	r8
    2cf2:	9f 92       	push	r9
    2cf4:	af 92       	push	r10
    2cf6:	bf 92       	push	r11
    2cf8:	cf 92       	push	r12
    2cfa:	df 92       	push	r13
    2cfc:	ef 92       	push	r14
    2cfe:	ff 92       	push	r15
    2d00:	0f 93       	push	r16
    2d02:	1f 93       	push	r17
    2d04:	cf 93       	push	r28
    2d06:	df 93       	push	r29
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	c4 59       	subi	r28, 0x94	; 148
    2d0e:	d1 40       	sbci	r29, 0x01	; 1
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	f8 94       	cli
    2d14:	de bf       	out	0x3e, r29	; 62
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	cd bf       	out	0x3d, r28	; 61
    2d1a:	7c 01       	movw	r14, r24
    2d1c:	86 2f       	mov	r24, r22
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	66 23       	and	r22, r22
    2d22:	84 f0       	brlt	.+32     	; 0x2d44 <eepromLoadPattern+0x54>
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	9c 01       	movw	r18, r24
    2d28:	22 0f       	add	r18, r18
    2d2a:	33 1f       	adc	r19, r19
    2d2c:	82 0f       	add	r24, r18
    2d2e:	93 1f       	adc	r25, r19
    2d30:	96 95       	lsr	r25
    2d32:	98 2f       	mov	r25, r24
    2d34:	88 27       	eor	r24, r24
    2d36:	97 95       	ror	r25
    2d38:	87 95       	ror	r24
    2d3a:	08 2f       	mov	r16, r24
    2d3c:	d9 2e       	mov	r13, r25
    2d3e:	80 ea       	ldi	r24, 0xA0	; 160
    2d40:	11 ea       	ldi	r17, 0xA1	; 161
    2d42:	10 c0       	rjmp	.+32     	; 0x2d64 <eepromLoadPattern+0x74>
    2d44:	80 58       	subi	r24, 0x80	; 128
    2d46:	91 09       	sbc	r25, r1
    2d48:	9c 01       	movw	r18, r24
    2d4a:	22 0f       	add	r18, r18
    2d4c:	33 1f       	adc	r19, r19
    2d4e:	82 0f       	add	r24, r18
    2d50:	93 1f       	adc	r25, r19
    2d52:	96 95       	lsr	r25
    2d54:	98 2f       	mov	r25, r24
    2d56:	88 27       	eor	r24, r24
    2d58:	97 95       	ror	r25
    2d5a:	87 95       	ror	r24
    2d5c:	08 2f       	mov	r16, r24
    2d5e:	d9 2e       	mov	r13, r25
    2d60:	88 ea       	ldi	r24, 0xA8	; 168
    2d62:	19 ea       	ldi	r17, 0xA9	; 169
    2d64:	ae dd       	rcall	.-1188   	; 0x28c2 <twi_start>
    2d66:	81 30       	cpi	r24, 0x01	; 1
    2d68:	29 f4       	brne	.+10     	; 0x2d74 <eepromLoadPattern+0x84>
    2d6a:	63 e0       	ldi	r22, 0x03	; 3
    2d6c:	70 e0       	ldi	r23, 0x00	; 0
    2d6e:	80 e8       	ldi	r24, 0x80	; 128
    2d70:	93 e0       	ldi	r25, 0x03	; 3
    2d72:	42 d9       	rcall	.-3452   	; 0x1ff8 <outputS>
    2d74:	8d 2d       	mov	r24, r13
    2d76:	d5 dd       	rcall	.-1110   	; 0x2922 <twi_write>
    2d78:	80 2f       	mov	r24, r16
    2d7a:	d3 dd       	rcall	.-1114   	; 0x2922 <twi_write>
    2d7c:	81 2f       	mov	r24, r17
    2d7e:	a1 dd       	rcall	.-1214   	; 0x28c2 <twi_start>
    2d80:	81 30       	cpi	r24, 0x01	; 1
    2d82:	09 f0       	breq	.+2      	; 0x2d86 <eepromLoadPattern+0x96>
    2d84:	23 c1       	rjmp	.+582    	; 0x2fcc <eepromLoadPattern+0x2dc>
    2d86:	84 e1       	ldi	r24, 0x14	; 20
    2d88:	eb e4       	ldi	r30, 0x4B	; 75
    2d8a:	f2 e0       	ldi	r31, 0x02	; 2
    2d8c:	de 01       	movw	r26, r28
    2d8e:	af 57       	subi	r26, 0x7F	; 127
    2d90:	be 4f       	sbci	r27, 0xFE	; 254
    2d92:	01 90       	ld	r0, Z+
    2d94:	0d 92       	st	X+, r0
    2d96:	8a 95       	dec	r24
    2d98:	e1 f7       	brne	.-8      	; 0x2d92 <eepromLoadPattern+0xa2>
    2d9a:	63 e0       	ldi	r22, 0x03	; 3
    2d9c:	70 e0       	ldi	r23, 0x00	; 0
    2d9e:	ce 01       	movw	r24, r28
    2da0:	8f 57       	subi	r24, 0x7F	; 127
    2da2:	9e 4f       	sbci	r25, 0xFE	; 254
    2da4:	29 d9       	rcall	.-3502   	; 0x1ff8 <outputS>
    2da6:	12 c1       	rjmp	.+548    	; 0x2fcc <eepromLoadPattern+0x2dc>
    2da8:	ce dd       	rcall	.-1124   	; 0x2946 <twi_readAck>
    2daa:	d8 01       	movw	r26, r16
    2dac:	8d 93       	st	X+, r24
    2dae:	8d 01       	movw	r16, r26
    2db0:	ac 15       	cp	r26, r12
    2db2:	bd 05       	cpc	r27, r13
    2db4:	c9 f7       	brne	.-14     	; 0x2da8 <eepromLoadPattern+0xb8>
    2db6:	d2 dd       	rcall	.-1116   	; 0x295c <twi_readNak>
    2db8:	c0 58       	subi	r28, 0x80	; 128
    2dba:	de 4f       	sbci	r29, 0xFE	; 254
    2dbc:	88 83       	st	Y, r24
    2dbe:	c0 58       	subi	r28, 0x80	; 128
    2dc0:	d1 40       	sbci	r29, 0x01	; 1
    2dc2:	a6 dd       	rcall	.-1204   	; 0x2910 <twi_stop>
    2dc4:	87 01       	movw	r16, r14
    2dc6:	4e 01       	movw	r8, r28
    2dc8:	b9 e0       	ldi	r27, 0x09	; 9
    2dca:	8b 0e       	add	r8, r27
    2dcc:	91 1c       	adc	r9, r1
    2dce:	f7 01       	movw	r30, r14
    2dd0:	d5 01       	movw	r26, r10
    2dd2:	8d 91       	ld	r24, X+
    2dd4:	5d 01       	movw	r10, r26
    2dd6:	81 93       	st	Z+, r24
    2dd8:	a8 15       	cp	r26, r8
    2dda:	b9 05       	cpc	r27, r9
    2ddc:	c9 f7       	brne	.-14     	; 0x2dd0 <eepromLoadPattern+0xe0>
    2dde:	d1 2c       	mov	r13, r1
    2de0:	f4 01       	movw	r30, r8
    2de2:	81 91       	ld	r24, Z+
    2de4:	4f 01       	movw	r8, r30
    2de6:	f8 01       	movw	r30, r16
    2de8:	80 87       	std	Z+8, r24	; 0x08
    2dea:	4d 2d       	mov	r20, r13
    2dec:	60 81       	ld	r22, Z
    2dee:	0f 5f       	subi	r16, 0xFF	; 255
    2df0:	1f 4f       	sbci	r17, 0xFF	; 255
    2df2:	62 dc       	rcall	.-1852   	; 0x26b8 <setOutputVolume>
    2df4:	d3 94       	inc	r13
    2df6:	f8 e0       	ldi	r31, 0x08	; 8
    2df8:	df 12       	cpse	r13, r31
    2dfa:	f2 cf       	rjmp	.-28     	; 0x2de0 <eepromLoadPattern+0xf0>
    2dfc:	5e 01       	movw	r10, r28
    2dfe:	81 e1       	ldi	r24, 0x11	; 17
    2e00:	a8 0e       	add	r10, r24
    2e02:	b1 1c       	adc	r11, r1
    2e04:	67 01       	movw	r12, r14
    2e06:	90 e1       	ldi	r25, 0x10	; 16
    2e08:	c9 0e       	add	r12, r25
    2e0a:	d1 1c       	adc	r13, r1
    2e0c:	10 e0       	ldi	r17, 0x00	; 0
    2e0e:	d5 01       	movw	r26, r10
    2e10:	4d 91       	ld	r20, X+
    2e12:	5d 01       	movw	r10, r26
    2e14:	f6 01       	movw	r30, r12
    2e16:	41 93       	st	Z+, r20
    2e18:	6f 01       	movw	r12, r30
    2e1a:	60 e0       	ldi	r22, 0x00	; 0
    2e1c:	81 2f       	mov	r24, r17
    2e1e:	c3 dc       	rcall	.-1658   	; 0x27a6 <outputSampleRate>
    2e20:	1f 5f       	subi	r17, 0xFF	; 255
    2e22:	18 30       	cpi	r17, 0x08	; 8
    2e24:	a1 f7       	brne	.-24     	; 0x2e0e <eepromLoadPattern+0x11e>
    2e26:	fe 01       	movw	r30, r28
    2e28:	79 96       	adiw	r30, 0x19	; 25
    2e2a:	c7 01       	movw	r24, r14
    2e2c:	48 96       	adiw	r24, 0x18	; 24
    2e2e:	ae 01       	movw	r20, r28
    2e30:	47 5d       	subi	r20, 0xD7	; 215
    2e32:	5f 4f       	sbci	r21, 0xFF	; 255
    2e34:	21 91       	ld	r18, Z+
    2e36:	dc 01       	movw	r26, r24
    2e38:	2d 93       	st	X+, r18
    2e3a:	cd 01       	movw	r24, r26
    2e3c:	e4 17       	cp	r30, r20
    2e3e:	f5 07       	cpc	r31, r21
    2e40:	c9 f7       	brne	.-14     	; 0x2e34 <eepromLoadPattern+0x144>
    2e42:	47 01       	movw	r8, r14
    2e44:	b8 e2       	ldi	r27, 0x28	; 40
    2e46:	8b 0e       	add	r8, r27
    2e48:	91 1c       	adc	r9, r1
    2e4a:	de 01       	movw	r26, r28
    2e4c:	d9 96       	adiw	r26, 0x39	; 57
    2e4e:	c4 01       	movw	r24, r8
    2e50:	fa 01       	movw	r30, r20
    2e52:	21 91       	ld	r18, Z+
    2e54:	af 01       	movw	r20, r30
    2e56:	fc 01       	movw	r30, r24
    2e58:	21 93       	st	Z+, r18
    2e5a:	cf 01       	movw	r24, r30
    2e5c:	4a 17       	cp	r20, r26
    2e5e:	5b 07       	cpc	r21, r27
    2e60:	b9 f7       	brne	.-18     	; 0x2e50 <eepromLoadPattern+0x160>
    2e62:	c7 01       	movw	r24, r14
    2e64:	c8 96       	adiw	r24, 0x38	; 56
    2e66:	ae 01       	movw	r20, r28
    2e68:	47 5b       	subi	r20, 0xB7	; 183
    2e6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e6c:	2d 91       	ld	r18, X+
    2e6e:	fc 01       	movw	r30, r24
    2e70:	21 93       	st	Z+, r18
    2e72:	cf 01       	movw	r24, r30
    2e74:	a4 17       	cp	r26, r20
    2e76:	b5 07       	cpc	r27, r21
    2e78:	c9 f7       	brne	.-14     	; 0x2e6c <eepromLoadPattern+0x17c>
    2e7a:	c7 01       	movw	r24, r14
    2e7c:	88 5b       	subi	r24, 0xB8	; 184
    2e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e80:	de 01       	movw	r26, r28
    2e82:	a7 5a       	subi	r26, 0xA7	; 167
    2e84:	bf 4f       	sbci	r27, 0xFF	; 255
    2e86:	fa 01       	movw	r30, r20
    2e88:	21 91       	ld	r18, Z+
    2e8a:	af 01       	movw	r20, r30
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	21 93       	st	Z+, r18
    2e90:	cf 01       	movw	r24, r30
    2e92:	4a 17       	cp	r20, r26
    2e94:	5b 07       	cpc	r21, r27
    2e96:	b9 f7       	brne	.-18     	; 0x2e86 <eepromLoadPattern+0x196>
    2e98:	c7 01       	movw	r24, r14
    2e9a:	88 5a       	subi	r24, 0xA8	; 168
    2e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e9e:	ae 01       	movw	r20, r28
    2ea0:	47 59       	subi	r20, 0x97	; 151
    2ea2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ea4:	2d 91       	ld	r18, X+
    2ea6:	fc 01       	movw	r30, r24
    2ea8:	21 93       	st	Z+, r18
    2eaa:	cf 01       	movw	r24, r30
    2eac:	a4 17       	cp	r26, r20
    2eae:	b5 07       	cpc	r27, r21
    2eb0:	c9 f7       	brne	.-14     	; 0x2ea4 <eepromLoadPattern+0x1b4>
    2eb2:	d7 01       	movw	r26, r14
    2eb4:	a8 59       	subi	r26, 0x98	; 152
    2eb6:	bf 4f       	sbci	r27, 0xFF	; 255
    2eb8:	9e 01       	movw	r18, r28
    2eba:	27 58       	subi	r18, 0x87	; 135
    2ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ebe:	fa 01       	movw	r30, r20
    2ec0:	81 91       	ld	r24, Z+
    2ec2:	af 01       	movw	r20, r30
    2ec4:	8d 93       	st	X+, r24
    2ec6:	2e 17       	cp	r18, r30
    2ec8:	3f 07       	cpc	r19, r31
    2eca:	c9 f7       	brne	.-14     	; 0x2ebe <eepromLoadPattern+0x1ce>
    2ecc:	ae 01       	movw	r20, r28
    2ece:	4f 57       	subi	r20, 0x7F	; 127
    2ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ed2:	c7 01       	movw	r24, r14
    2ed4:	88 58       	subi	r24, 0x88	; 136
    2ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed8:	de 01       	movw	r26, r28
    2eda:	af 56       	subi	r26, 0x6F	; 111
    2edc:	bf 4f       	sbci	r27, 0xFF	; 255
    2ede:	fa 01       	movw	r30, r20
    2ee0:	21 91       	ld	r18, Z+
    2ee2:	af 01       	movw	r20, r30
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	21 93       	st	Z+, r18
    2ee8:	cf 01       	movw	r24, r30
    2eea:	a4 17       	cp	r26, r20
    2eec:	b5 07       	cpc	r27, r21
    2eee:	b9 f7       	brne	.-18     	; 0x2ede <eepromLoadPattern+0x1ee>
    2ef0:	c7 01       	movw	r24, r14
    2ef2:	88 57       	subi	r24, 0x78	; 120
    2ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef6:	ae 01       	movw	r20, r28
    2ef8:	4f 55       	subi	r20, 0x5F	; 95
    2efa:	5f 4f       	sbci	r21, 0xFF	; 255
    2efc:	2d 91       	ld	r18, X+
    2efe:	fc 01       	movw	r30, r24
    2f00:	21 93       	st	Z+, r18
    2f02:	cf 01       	movw	r24, r30
    2f04:	4a 17       	cp	r20, r26
    2f06:	5b 07       	cpc	r21, r27
    2f08:	c9 f7       	brne	.-14     	; 0x2efc <eepromLoadPattern+0x20c>
    2f0a:	87 01       	movw	r16, r14
    2f0c:	08 56       	subi	r16, 0x68	; 104
    2f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f10:	5e 01       	movw	r10, r28
    2f12:	f1 eb       	ldi	r31, 0xB1	; 177
    2f14:	af 0e       	add	r10, r31
    2f16:	b1 1c       	adc	r11, r1
    2f18:	d8 01       	movw	r26, r16
    2f1a:	fa 01       	movw	r30, r20
    2f1c:	81 91       	ld	r24, Z+
    2f1e:	af 01       	movw	r20, r30
    2f20:	8d 93       	st	X+, r24
    2f22:	ae 16       	cp	r10, r30
    2f24:	bf 06       	cpc	r11, r31
    2f26:	c9 f7       	brne	.-14     	; 0x2f1a <eepromLoadPattern+0x22a>
    2f28:	6e 01       	movw	r12, r28
    2f2a:	f1 ec       	ldi	r31, 0xC1	; 193
    2f2c:	cf 0e       	add	r12, r31
    2f2e:	d1 1c       	adc	r13, r1
    2f30:	d5 01       	movw	r26, r10
    2f32:	8d 91       	ld	r24, X+
    2f34:	5d 01       	movw	r10, r26
    2f36:	f8 01       	movw	r30, r16
    2f38:	80 8b       	std	Z+16, r24	; 0x10
    2f3a:	d4 01       	movw	r26, r8
    2f3c:	2d 91       	ld	r18, X+
    2f3e:	4d 01       	movw	r8, r26
    2f40:	1f 96       	adiw	r26, 0x0f	; 15
    2f42:	4c 91       	ld	r20, X
    2f44:	60 81       	ld	r22, Z
    2f46:	0f 5f       	subi	r16, 0xFF	; 255
    2f48:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4a:	da db       	rcall	.-2124   	; 0x2700 <setTrackVolume>
    2f4c:	ca 14       	cp	r12, r10
    2f4e:	db 04       	cpc	r13, r11
    2f50:	79 f7       	brne	.-34     	; 0x2f30 <eepromLoadPattern+0x240>
    2f52:	f7 01       	movw	r30, r14
    2f54:	e8 54       	subi	r30, 0x48	; 72
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	9e 01       	movw	r18, r28
    2f5a:	2f 52       	subi	r18, 0x2F	; 47
    2f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5e:	d6 01       	movw	r26, r12
    2f60:	8d 91       	ld	r24, X+
    2f62:	6d 01       	movw	r12, r26
    2f64:	81 93       	st	Z+, r24
    2f66:	2a 17       	cp	r18, r26
    2f68:	3b 07       	cpc	r19, r27
    2f6a:	c9 f7       	brne	.-14     	; 0x2f5e <eepromLoadPattern+0x26e>
    2f6c:	f7 01       	movw	r30, r14
    2f6e:	e8 53       	subi	r30, 0x38	; 56
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	cf 52       	subi	r28, 0x2F	; 47
    2f74:	df 4f       	sbci	r29, 0xFF	; 255
    2f76:	88 81       	ld	r24, Y
    2f78:	c1 5d       	subi	r28, 0xD1	; 209
    2f7a:	d0 40       	sbci	r29, 0x00	; 0
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	98 2f       	mov	r25, r24
    2f80:	88 27       	eor	r24, r24
    2f82:	ce 52       	subi	r28, 0x2E	; 46
    2f84:	df 4f       	sbci	r29, 0xFF	; 255
    2f86:	28 81       	ld	r18, Y
    2f88:	c2 5d       	subi	r28, 0xD2	; 210
    2f8a:	d0 40       	sbci	r29, 0x00	; 0
    2f8c:	82 2b       	or	r24, r18
    2f8e:	91 83       	std	Z+1, r25	; 0x01
    2f90:	80 83       	st	Z, r24
    2f92:	32 96       	adiw	r30, 0x02	; 2
    2f94:	cd 52       	subi	r28, 0x2D	; 45
    2f96:	df 4f       	sbci	r29, 0xFF	; 255
    2f98:	88 81       	ld	r24, Y
    2f9a:	c3 5d       	subi	r28, 0xD3	; 211
    2f9c:	d0 40       	sbci	r29, 0x00	; 0
    2f9e:	80 83       	st	Z, r24
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	ef 5f       	subi	r30, 0xFF	; 255
    2fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa6:	d7 01       	movw	r26, r14
    2fa8:	a5 51       	subi	r26, 0x15	; 21
    2faa:	bf 4f       	sbci	r27, 0xFF	; 255
    2fac:	ae 01       	movw	r20, r28
    2fae:	4f 57       	subi	r20, 0x7F	; 127
    2fb0:	5e 4f       	sbci	r21, 0xFE	; 254
    2fb2:	80 81       	ld	r24, Z
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	98 2f       	mov	r25, r24
    2fb8:	88 27       	eor	r24, r24
    2fba:	21 81       	ldd	r18, Z+1	; 0x01
    2fbc:	82 2b       	or	r24, r18
    2fbe:	8d 93       	st	X+, r24
    2fc0:	9d 93       	st	X+, r25
    2fc2:	32 96       	adiw	r30, 0x02	; 2
    2fc4:	4e 17       	cp	r20, r30
    2fc6:	5f 07       	cpc	r21, r31
    2fc8:	a1 f7       	brne	.-24     	; 0x2fb2 <eepromLoadPattern+0x2c2>
    2fca:	0a c0       	rjmp	.+20     	; 0x2fe0 <eepromLoadPattern+0x2f0>
    2fcc:	fe 01       	movw	r30, r28
    2fce:	31 96       	adiw	r30, 0x01	; 1
    2fd0:	5f 01       	movw	r10, r30
    2fd2:	6e 01       	movw	r12, r28
    2fd4:	f0 e8       	ldi	r31, 0x80	; 128
    2fd6:	cf 1a       	sub	r12, r31
    2fd8:	fe ef       	ldi	r31, 0xFE	; 254
    2fda:	df 0a       	sbc	r13, r31
    2fdc:	85 01       	movw	r16, r10
    2fde:	e4 ce       	rjmp	.-568    	; 0x2da8 <eepromLoadPattern+0xb8>
    2fe0:	cc 56       	subi	r28, 0x6C	; 108
    2fe2:	de 4f       	sbci	r29, 0xFE	; 254
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61
    2fee:	df 91       	pop	r29
    2ff0:	cf 91       	pop	r28
    2ff2:	1f 91       	pop	r17
    2ff4:	0f 91       	pop	r16
    2ff6:	ff 90       	pop	r15
    2ff8:	ef 90       	pop	r14
    2ffa:	df 90       	pop	r13
    2ffc:	cf 90       	pop	r12
    2ffe:	bf 90       	pop	r11
    3000:	af 90       	pop	r10
    3002:	9f 90       	pop	r9
    3004:	8f 90       	pop	r8
    3006:	08 95       	ret

00003008 <globalWrite>:

//this happens when save button is pressed on global menu. 
void globalWrite(Globals *currentGlobals)
{
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	ec 01       	movw	r28, r24
	eeprom_write_byte(0,currentGlobals->midiChannel); //this may be wrong, but it does get rid of the warning. 
    300e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	46 d2       	rcall	.+1164   	; 0x34a2 <eeprom_write_byte>
	eeprom_write_block(currentGlobals->midiTrackNote,1,16);
    3016:	40 e1       	ldi	r20, 0x10	; 16
    3018:	50 e0       	ldi	r21, 0x00	; 0
    301a:	61 e0       	ldi	r22, 0x01	; 1
    301c:	70 e0       	ldi	r23, 0x00	; 0
    301e:	ce 01       	movw	r24, r28
    3020:	0d 96       	adiw	r24, 0x0d	; 13
    3022:	36 d2       	rcall	.+1132   	; 0x3490 <eeprom_write_block>
}
    3024:	df 91       	pop	r29
    3026:	cf 91       	pop	r28
    3028:	08 95       	ret

0000302a <globalLoad>:
//This happens at startup only, in function "initGlobals"

void globalLoad(Globals *currentGlobals, uint8_t factoryReset)
{
    302a:	cf 93       	push	r28
    302c:	df 93       	push	r29
	//we need to load all of the global midi settings here. 
	//we can also check the factory reset bit here. 
	//if the program has not gone through the initial state, and had the internal eeprom formatted, then this will return garbage. 
	if(factoryReset==0)
    302e:	61 11       	cpse	r22, r1
    3030:	0c c0       	rjmp	.+24     	; 0x304a <globalLoad+0x20>
    3032:	ec 01       	movw	r28, r24
	{
		currentGlobals->midiChannel = eeprom_read_byte(0);
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	23 d2       	rcall	.+1094   	; 0x3480 <eeprom_read_byte>
    303a:	8c 87       	std	Y+12, r24	; 0x0c
		eeprom_read_block(currentGlobals->midiTrackNote,1,16);
    303c:	40 e1       	ldi	r20, 0x10	; 16
    303e:	50 e0       	ldi	r21, 0x00	; 0
    3040:	61 e0       	ldi	r22, 0x01	; 1
    3042:	70 e0       	ldi	r23, 0x00	; 0
    3044:	ce 01       	movw	r24, r28
    3046:	0d 96       	adiw	r24, 0x0d	; 13
    3048:	0b d2       	rcall	.+1046   	; 0x3460 <eeprom_read_block>
	}
}
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	08 95       	ret

00003050 <__subsf3>:
    3050:	50 58       	subi	r21, 0x80	; 128

00003052 <__addsf3>:
    3052:	bb 27       	eor	r27, r27
    3054:	aa 27       	eor	r26, r26
    3056:	0e d0       	rcall	.+28     	; 0x3074 <__addsf3x>
    3058:	4d c1       	rjmp	.+666    	; 0x32f4 <__fp_round>
    305a:	3e d1       	rcall	.+636    	; 0x32d8 <__fp_pscA>
    305c:	30 f0       	brcs	.+12     	; 0x306a <__addsf3+0x18>
    305e:	43 d1       	rcall	.+646    	; 0x32e6 <__fp_pscB>
    3060:	20 f0       	brcs	.+8      	; 0x306a <__addsf3+0x18>
    3062:	31 f4       	brne	.+12     	; 0x3070 <__addsf3+0x1e>
    3064:	9f 3f       	cpi	r25, 0xFF	; 255
    3066:	11 f4       	brne	.+4      	; 0x306c <__addsf3+0x1a>
    3068:	1e f4       	brtc	.+6      	; 0x3070 <__addsf3+0x1e>
    306a:	33 c1       	rjmp	.+614    	; 0x32d2 <__fp_nan>
    306c:	0e f4       	brtc	.+2      	; 0x3070 <__addsf3+0x1e>
    306e:	e0 95       	com	r30
    3070:	e7 fb       	bst	r30, 7
    3072:	29 c1       	rjmp	.+594    	; 0x32c6 <__fp_inf>

00003074 <__addsf3x>:
    3074:	e9 2f       	mov	r30, r25
    3076:	4f d1       	rcall	.+670    	; 0x3316 <__fp_split3>
    3078:	80 f3       	brcs	.-32     	; 0x305a <__addsf3+0x8>
    307a:	ba 17       	cp	r27, r26
    307c:	62 07       	cpc	r22, r18
    307e:	73 07       	cpc	r23, r19
    3080:	84 07       	cpc	r24, r20
    3082:	95 07       	cpc	r25, r21
    3084:	18 f0       	brcs	.+6      	; 0x308c <__addsf3x+0x18>
    3086:	71 f4       	brne	.+28     	; 0x30a4 <__addsf3x+0x30>
    3088:	9e f5       	brtc	.+102    	; 0x30f0 <__addsf3x+0x7c>
    308a:	67 c1       	rjmp	.+718    	; 0x335a <__fp_zero>
    308c:	0e f4       	brtc	.+2      	; 0x3090 <__addsf3x+0x1c>
    308e:	e0 95       	com	r30
    3090:	0b 2e       	mov	r0, r27
    3092:	ba 2f       	mov	r27, r26
    3094:	a0 2d       	mov	r26, r0
    3096:	0b 01       	movw	r0, r22
    3098:	b9 01       	movw	r22, r18
    309a:	90 01       	movw	r18, r0
    309c:	0c 01       	movw	r0, r24
    309e:	ca 01       	movw	r24, r20
    30a0:	a0 01       	movw	r20, r0
    30a2:	11 24       	eor	r1, r1
    30a4:	ff 27       	eor	r31, r31
    30a6:	59 1b       	sub	r21, r25
    30a8:	99 f0       	breq	.+38     	; 0x30d0 <__addsf3x+0x5c>
    30aa:	59 3f       	cpi	r21, 0xF9	; 249
    30ac:	50 f4       	brcc	.+20     	; 0x30c2 <__addsf3x+0x4e>
    30ae:	50 3e       	cpi	r21, 0xE0	; 224
    30b0:	68 f1       	brcs	.+90     	; 0x310c <__addsf3x+0x98>
    30b2:	1a 16       	cp	r1, r26
    30b4:	f0 40       	sbci	r31, 0x00	; 0
    30b6:	a2 2f       	mov	r26, r18
    30b8:	23 2f       	mov	r18, r19
    30ba:	34 2f       	mov	r19, r20
    30bc:	44 27       	eor	r20, r20
    30be:	58 5f       	subi	r21, 0xF8	; 248
    30c0:	f3 cf       	rjmp	.-26     	; 0x30a8 <__addsf3x+0x34>
    30c2:	46 95       	lsr	r20
    30c4:	37 95       	ror	r19
    30c6:	27 95       	ror	r18
    30c8:	a7 95       	ror	r26
    30ca:	f0 40       	sbci	r31, 0x00	; 0
    30cc:	53 95       	inc	r21
    30ce:	c9 f7       	brne	.-14     	; 0x30c2 <__addsf3x+0x4e>
    30d0:	7e f4       	brtc	.+30     	; 0x30f0 <__addsf3x+0x7c>
    30d2:	1f 16       	cp	r1, r31
    30d4:	ba 0b       	sbc	r27, r26
    30d6:	62 0b       	sbc	r22, r18
    30d8:	73 0b       	sbc	r23, r19
    30da:	84 0b       	sbc	r24, r20
    30dc:	ba f0       	brmi	.+46     	; 0x310c <__addsf3x+0x98>
    30de:	91 50       	subi	r25, 0x01	; 1
    30e0:	a1 f0       	breq	.+40     	; 0x310a <__addsf3x+0x96>
    30e2:	ff 0f       	add	r31, r31
    30e4:	bb 1f       	adc	r27, r27
    30e6:	66 1f       	adc	r22, r22
    30e8:	77 1f       	adc	r23, r23
    30ea:	88 1f       	adc	r24, r24
    30ec:	c2 f7       	brpl	.-16     	; 0x30de <__addsf3x+0x6a>
    30ee:	0e c0       	rjmp	.+28     	; 0x310c <__addsf3x+0x98>
    30f0:	ba 0f       	add	r27, r26
    30f2:	62 1f       	adc	r22, r18
    30f4:	73 1f       	adc	r23, r19
    30f6:	84 1f       	adc	r24, r20
    30f8:	48 f4       	brcc	.+18     	; 0x310c <__addsf3x+0x98>
    30fa:	87 95       	ror	r24
    30fc:	77 95       	ror	r23
    30fe:	67 95       	ror	r22
    3100:	b7 95       	ror	r27
    3102:	f7 95       	ror	r31
    3104:	9e 3f       	cpi	r25, 0xFE	; 254
    3106:	08 f0       	brcs	.+2      	; 0x310a <__addsf3x+0x96>
    3108:	b3 cf       	rjmp	.-154    	; 0x3070 <__addsf3+0x1e>
    310a:	93 95       	inc	r25
    310c:	88 0f       	add	r24, r24
    310e:	08 f0       	brcs	.+2      	; 0x3112 <__addsf3x+0x9e>
    3110:	99 27       	eor	r25, r25
    3112:	ee 0f       	add	r30, r30
    3114:	97 95       	ror	r25
    3116:	87 95       	ror	r24
    3118:	08 95       	ret

0000311a <__divsf3>:
    311a:	0c d0       	rcall	.+24     	; 0x3134 <__divsf3x>
    311c:	eb c0       	rjmp	.+470    	; 0x32f4 <__fp_round>
    311e:	e3 d0       	rcall	.+454    	; 0x32e6 <__fp_pscB>
    3120:	40 f0       	brcs	.+16     	; 0x3132 <__divsf3+0x18>
    3122:	da d0       	rcall	.+436    	; 0x32d8 <__fp_pscA>
    3124:	30 f0       	brcs	.+12     	; 0x3132 <__divsf3+0x18>
    3126:	21 f4       	brne	.+8      	; 0x3130 <__divsf3+0x16>
    3128:	5f 3f       	cpi	r21, 0xFF	; 255
    312a:	19 f0       	breq	.+6      	; 0x3132 <__divsf3+0x18>
    312c:	cc c0       	rjmp	.+408    	; 0x32c6 <__fp_inf>
    312e:	51 11       	cpse	r21, r1
    3130:	15 c1       	rjmp	.+554    	; 0x335c <__fp_szero>
    3132:	cf c0       	rjmp	.+414    	; 0x32d2 <__fp_nan>

00003134 <__divsf3x>:
    3134:	f0 d0       	rcall	.+480    	; 0x3316 <__fp_split3>
    3136:	98 f3       	brcs	.-26     	; 0x311e <__divsf3+0x4>

00003138 <__divsf3_pse>:
    3138:	99 23       	and	r25, r25
    313a:	c9 f3       	breq	.-14     	; 0x312e <__divsf3+0x14>
    313c:	55 23       	and	r21, r21
    313e:	b1 f3       	breq	.-20     	; 0x312c <__divsf3+0x12>
    3140:	95 1b       	sub	r25, r21
    3142:	55 0b       	sbc	r21, r21
    3144:	bb 27       	eor	r27, r27
    3146:	aa 27       	eor	r26, r26
    3148:	62 17       	cp	r22, r18
    314a:	73 07       	cpc	r23, r19
    314c:	84 07       	cpc	r24, r20
    314e:	38 f0       	brcs	.+14     	; 0x315e <__divsf3_pse+0x26>
    3150:	9f 5f       	subi	r25, 0xFF	; 255
    3152:	5f 4f       	sbci	r21, 0xFF	; 255
    3154:	22 0f       	add	r18, r18
    3156:	33 1f       	adc	r19, r19
    3158:	44 1f       	adc	r20, r20
    315a:	aa 1f       	adc	r26, r26
    315c:	a9 f3       	breq	.-22     	; 0x3148 <__divsf3_pse+0x10>
    315e:	33 d0       	rcall	.+102    	; 0x31c6 <__divsf3_pse+0x8e>
    3160:	0e 2e       	mov	r0, r30
    3162:	3a f0       	brmi	.+14     	; 0x3172 <__divsf3_pse+0x3a>
    3164:	e0 e8       	ldi	r30, 0x80	; 128
    3166:	30 d0       	rcall	.+96     	; 0x31c8 <__divsf3_pse+0x90>
    3168:	91 50       	subi	r25, 0x01	; 1
    316a:	50 40       	sbci	r21, 0x00	; 0
    316c:	e6 95       	lsr	r30
    316e:	00 1c       	adc	r0, r0
    3170:	ca f7       	brpl	.-14     	; 0x3164 <__divsf3_pse+0x2c>
    3172:	29 d0       	rcall	.+82     	; 0x31c6 <__divsf3_pse+0x8e>
    3174:	fe 2f       	mov	r31, r30
    3176:	27 d0       	rcall	.+78     	; 0x31c6 <__divsf3_pse+0x8e>
    3178:	66 0f       	add	r22, r22
    317a:	77 1f       	adc	r23, r23
    317c:	88 1f       	adc	r24, r24
    317e:	bb 1f       	adc	r27, r27
    3180:	26 17       	cp	r18, r22
    3182:	37 07       	cpc	r19, r23
    3184:	48 07       	cpc	r20, r24
    3186:	ab 07       	cpc	r26, r27
    3188:	b0 e8       	ldi	r27, 0x80	; 128
    318a:	09 f0       	breq	.+2      	; 0x318e <__divsf3_pse+0x56>
    318c:	bb 0b       	sbc	r27, r27
    318e:	80 2d       	mov	r24, r0
    3190:	bf 01       	movw	r22, r30
    3192:	ff 27       	eor	r31, r31
    3194:	93 58       	subi	r25, 0x83	; 131
    3196:	5f 4f       	sbci	r21, 0xFF	; 255
    3198:	2a f0       	brmi	.+10     	; 0x31a4 <__divsf3_pse+0x6c>
    319a:	9e 3f       	cpi	r25, 0xFE	; 254
    319c:	51 05       	cpc	r21, r1
    319e:	68 f0       	brcs	.+26     	; 0x31ba <__divsf3_pse+0x82>
    31a0:	92 c0       	rjmp	.+292    	; 0x32c6 <__fp_inf>
    31a2:	dc c0       	rjmp	.+440    	; 0x335c <__fp_szero>
    31a4:	5f 3f       	cpi	r21, 0xFF	; 255
    31a6:	ec f3       	brlt	.-6      	; 0x31a2 <__divsf3_pse+0x6a>
    31a8:	98 3e       	cpi	r25, 0xE8	; 232
    31aa:	dc f3       	brlt	.-10     	; 0x31a2 <__divsf3_pse+0x6a>
    31ac:	86 95       	lsr	r24
    31ae:	77 95       	ror	r23
    31b0:	67 95       	ror	r22
    31b2:	b7 95       	ror	r27
    31b4:	f7 95       	ror	r31
    31b6:	9f 5f       	subi	r25, 0xFF	; 255
    31b8:	c9 f7       	brne	.-14     	; 0x31ac <__divsf3_pse+0x74>
    31ba:	88 0f       	add	r24, r24
    31bc:	91 1d       	adc	r25, r1
    31be:	96 95       	lsr	r25
    31c0:	87 95       	ror	r24
    31c2:	97 f9       	bld	r25, 7
    31c4:	08 95       	ret
    31c6:	e1 e0       	ldi	r30, 0x01	; 1
    31c8:	66 0f       	add	r22, r22
    31ca:	77 1f       	adc	r23, r23
    31cc:	88 1f       	adc	r24, r24
    31ce:	bb 1f       	adc	r27, r27
    31d0:	62 17       	cp	r22, r18
    31d2:	73 07       	cpc	r23, r19
    31d4:	84 07       	cpc	r24, r20
    31d6:	ba 07       	cpc	r27, r26
    31d8:	20 f0       	brcs	.+8      	; 0x31e2 <__divsf3_pse+0xaa>
    31da:	62 1b       	sub	r22, r18
    31dc:	73 0b       	sbc	r23, r19
    31de:	84 0b       	sbc	r24, r20
    31e0:	ba 0b       	sbc	r27, r26
    31e2:	ee 1f       	adc	r30, r30
    31e4:	88 f7       	brcc	.-30     	; 0x31c8 <__divsf3_pse+0x90>
    31e6:	e0 95       	com	r30
    31e8:	08 95       	ret

000031ea <__fixsfsi>:
    31ea:	04 d0       	rcall	.+8      	; 0x31f4 <__fixunssfsi>
    31ec:	68 94       	set
    31ee:	b1 11       	cpse	r27, r1
    31f0:	b5 c0       	rjmp	.+362    	; 0x335c <__fp_szero>
    31f2:	08 95       	ret

000031f4 <__fixunssfsi>:
    31f4:	98 d0       	rcall	.+304    	; 0x3326 <__fp_splitA>
    31f6:	88 f0       	brcs	.+34     	; 0x321a <__fixunssfsi+0x26>
    31f8:	9f 57       	subi	r25, 0x7F	; 127
    31fa:	90 f0       	brcs	.+36     	; 0x3220 <__fixunssfsi+0x2c>
    31fc:	b9 2f       	mov	r27, r25
    31fe:	99 27       	eor	r25, r25
    3200:	b7 51       	subi	r27, 0x17	; 23
    3202:	a0 f0       	brcs	.+40     	; 0x322c <__fixunssfsi+0x38>
    3204:	d1 f0       	breq	.+52     	; 0x323a <__fixunssfsi+0x46>
    3206:	66 0f       	add	r22, r22
    3208:	77 1f       	adc	r23, r23
    320a:	88 1f       	adc	r24, r24
    320c:	99 1f       	adc	r25, r25
    320e:	1a f0       	brmi	.+6      	; 0x3216 <__fixunssfsi+0x22>
    3210:	ba 95       	dec	r27
    3212:	c9 f7       	brne	.-14     	; 0x3206 <__fixunssfsi+0x12>
    3214:	12 c0       	rjmp	.+36     	; 0x323a <__fixunssfsi+0x46>
    3216:	b1 30       	cpi	r27, 0x01	; 1
    3218:	81 f0       	breq	.+32     	; 0x323a <__fixunssfsi+0x46>
    321a:	9f d0       	rcall	.+318    	; 0x335a <__fp_zero>
    321c:	b1 e0       	ldi	r27, 0x01	; 1
    321e:	08 95       	ret
    3220:	9c c0       	rjmp	.+312    	; 0x335a <__fp_zero>
    3222:	67 2f       	mov	r22, r23
    3224:	78 2f       	mov	r23, r24
    3226:	88 27       	eor	r24, r24
    3228:	b8 5f       	subi	r27, 0xF8	; 248
    322a:	39 f0       	breq	.+14     	; 0x323a <__fixunssfsi+0x46>
    322c:	b9 3f       	cpi	r27, 0xF9	; 249
    322e:	cc f3       	brlt	.-14     	; 0x3222 <__fixunssfsi+0x2e>
    3230:	86 95       	lsr	r24
    3232:	77 95       	ror	r23
    3234:	67 95       	ror	r22
    3236:	b3 95       	inc	r27
    3238:	d9 f7       	brne	.-10     	; 0x3230 <__fixunssfsi+0x3c>
    323a:	3e f4       	brtc	.+14     	; 0x324a <__fixunssfsi+0x56>
    323c:	90 95       	com	r25
    323e:	80 95       	com	r24
    3240:	70 95       	com	r23
    3242:	61 95       	neg	r22
    3244:	7f 4f       	sbci	r23, 0xFF	; 255
    3246:	8f 4f       	sbci	r24, 0xFF	; 255
    3248:	9f 4f       	sbci	r25, 0xFF	; 255
    324a:	08 95       	ret

0000324c <__floatunsisf>:
    324c:	e8 94       	clt
    324e:	09 c0       	rjmp	.+18     	; 0x3262 <__floatsisf+0x12>

00003250 <__floatsisf>:
    3250:	97 fb       	bst	r25, 7
    3252:	3e f4       	brtc	.+14     	; 0x3262 <__floatsisf+0x12>
    3254:	90 95       	com	r25
    3256:	80 95       	com	r24
    3258:	70 95       	com	r23
    325a:	61 95       	neg	r22
    325c:	7f 4f       	sbci	r23, 0xFF	; 255
    325e:	8f 4f       	sbci	r24, 0xFF	; 255
    3260:	9f 4f       	sbci	r25, 0xFF	; 255
    3262:	99 23       	and	r25, r25
    3264:	a9 f0       	breq	.+42     	; 0x3290 <__floatsisf+0x40>
    3266:	f9 2f       	mov	r31, r25
    3268:	96 e9       	ldi	r25, 0x96	; 150
    326a:	bb 27       	eor	r27, r27
    326c:	93 95       	inc	r25
    326e:	f6 95       	lsr	r31
    3270:	87 95       	ror	r24
    3272:	77 95       	ror	r23
    3274:	67 95       	ror	r22
    3276:	b7 95       	ror	r27
    3278:	f1 11       	cpse	r31, r1
    327a:	f8 cf       	rjmp	.-16     	; 0x326c <__floatsisf+0x1c>
    327c:	fa f4       	brpl	.+62     	; 0x32bc <__floatsisf+0x6c>
    327e:	bb 0f       	add	r27, r27
    3280:	11 f4       	brne	.+4      	; 0x3286 <__floatsisf+0x36>
    3282:	60 ff       	sbrs	r22, 0
    3284:	1b c0       	rjmp	.+54     	; 0x32bc <__floatsisf+0x6c>
    3286:	6f 5f       	subi	r22, 0xFF	; 255
    3288:	7f 4f       	sbci	r23, 0xFF	; 255
    328a:	8f 4f       	sbci	r24, 0xFF	; 255
    328c:	9f 4f       	sbci	r25, 0xFF	; 255
    328e:	16 c0       	rjmp	.+44     	; 0x32bc <__floatsisf+0x6c>
    3290:	88 23       	and	r24, r24
    3292:	11 f0       	breq	.+4      	; 0x3298 <__floatsisf+0x48>
    3294:	96 e9       	ldi	r25, 0x96	; 150
    3296:	11 c0       	rjmp	.+34     	; 0x32ba <__floatsisf+0x6a>
    3298:	77 23       	and	r23, r23
    329a:	21 f0       	breq	.+8      	; 0x32a4 <__floatsisf+0x54>
    329c:	9e e8       	ldi	r25, 0x8E	; 142
    329e:	87 2f       	mov	r24, r23
    32a0:	76 2f       	mov	r23, r22
    32a2:	05 c0       	rjmp	.+10     	; 0x32ae <__floatsisf+0x5e>
    32a4:	66 23       	and	r22, r22
    32a6:	71 f0       	breq	.+28     	; 0x32c4 <__floatsisf+0x74>
    32a8:	96 e8       	ldi	r25, 0x86	; 134
    32aa:	86 2f       	mov	r24, r22
    32ac:	70 e0       	ldi	r23, 0x00	; 0
    32ae:	60 e0       	ldi	r22, 0x00	; 0
    32b0:	2a f0       	brmi	.+10     	; 0x32bc <__floatsisf+0x6c>
    32b2:	9a 95       	dec	r25
    32b4:	66 0f       	add	r22, r22
    32b6:	77 1f       	adc	r23, r23
    32b8:	88 1f       	adc	r24, r24
    32ba:	da f7       	brpl	.-10     	; 0x32b2 <__floatsisf+0x62>
    32bc:	88 0f       	add	r24, r24
    32be:	96 95       	lsr	r25
    32c0:	87 95       	ror	r24
    32c2:	97 f9       	bld	r25, 7
    32c4:	08 95       	ret

000032c6 <__fp_inf>:
    32c6:	97 f9       	bld	r25, 7
    32c8:	9f 67       	ori	r25, 0x7F	; 127
    32ca:	80 e8       	ldi	r24, 0x80	; 128
    32cc:	70 e0       	ldi	r23, 0x00	; 0
    32ce:	60 e0       	ldi	r22, 0x00	; 0
    32d0:	08 95       	ret

000032d2 <__fp_nan>:
    32d2:	9f ef       	ldi	r25, 0xFF	; 255
    32d4:	80 ec       	ldi	r24, 0xC0	; 192
    32d6:	08 95       	ret

000032d8 <__fp_pscA>:
    32d8:	00 24       	eor	r0, r0
    32da:	0a 94       	dec	r0
    32dc:	16 16       	cp	r1, r22
    32de:	17 06       	cpc	r1, r23
    32e0:	18 06       	cpc	r1, r24
    32e2:	09 06       	cpc	r0, r25
    32e4:	08 95       	ret

000032e6 <__fp_pscB>:
    32e6:	00 24       	eor	r0, r0
    32e8:	0a 94       	dec	r0
    32ea:	12 16       	cp	r1, r18
    32ec:	13 06       	cpc	r1, r19
    32ee:	14 06       	cpc	r1, r20
    32f0:	05 06       	cpc	r0, r21
    32f2:	08 95       	ret

000032f4 <__fp_round>:
    32f4:	09 2e       	mov	r0, r25
    32f6:	03 94       	inc	r0
    32f8:	00 0c       	add	r0, r0
    32fa:	11 f4       	brne	.+4      	; 0x3300 <__fp_round+0xc>
    32fc:	88 23       	and	r24, r24
    32fe:	52 f0       	brmi	.+20     	; 0x3314 <__fp_round+0x20>
    3300:	bb 0f       	add	r27, r27
    3302:	40 f4       	brcc	.+16     	; 0x3314 <__fp_round+0x20>
    3304:	bf 2b       	or	r27, r31
    3306:	11 f4       	brne	.+4      	; 0x330c <__fp_round+0x18>
    3308:	60 ff       	sbrs	r22, 0
    330a:	04 c0       	rjmp	.+8      	; 0x3314 <__fp_round+0x20>
    330c:	6f 5f       	subi	r22, 0xFF	; 255
    330e:	7f 4f       	sbci	r23, 0xFF	; 255
    3310:	8f 4f       	sbci	r24, 0xFF	; 255
    3312:	9f 4f       	sbci	r25, 0xFF	; 255
    3314:	08 95       	ret

00003316 <__fp_split3>:
    3316:	57 fd       	sbrc	r21, 7
    3318:	90 58       	subi	r25, 0x80	; 128
    331a:	44 0f       	add	r20, r20
    331c:	55 1f       	adc	r21, r21
    331e:	59 f0       	breq	.+22     	; 0x3336 <__fp_splitA+0x10>
    3320:	5f 3f       	cpi	r21, 0xFF	; 255
    3322:	71 f0       	breq	.+28     	; 0x3340 <__fp_splitA+0x1a>
    3324:	47 95       	ror	r20

00003326 <__fp_splitA>:
    3326:	88 0f       	add	r24, r24
    3328:	97 fb       	bst	r25, 7
    332a:	99 1f       	adc	r25, r25
    332c:	61 f0       	breq	.+24     	; 0x3346 <__fp_splitA+0x20>
    332e:	9f 3f       	cpi	r25, 0xFF	; 255
    3330:	79 f0       	breq	.+30     	; 0x3350 <__fp_splitA+0x2a>
    3332:	87 95       	ror	r24
    3334:	08 95       	ret
    3336:	12 16       	cp	r1, r18
    3338:	13 06       	cpc	r1, r19
    333a:	14 06       	cpc	r1, r20
    333c:	55 1f       	adc	r21, r21
    333e:	f2 cf       	rjmp	.-28     	; 0x3324 <__fp_split3+0xe>
    3340:	46 95       	lsr	r20
    3342:	f1 df       	rcall	.-30     	; 0x3326 <__fp_splitA>
    3344:	08 c0       	rjmp	.+16     	; 0x3356 <__fp_splitA+0x30>
    3346:	16 16       	cp	r1, r22
    3348:	17 06       	cpc	r1, r23
    334a:	18 06       	cpc	r1, r24
    334c:	99 1f       	adc	r25, r25
    334e:	f1 cf       	rjmp	.-30     	; 0x3332 <__fp_splitA+0xc>
    3350:	86 95       	lsr	r24
    3352:	71 05       	cpc	r23, r1
    3354:	61 05       	cpc	r22, r1
    3356:	08 94       	sec
    3358:	08 95       	ret

0000335a <__fp_zero>:
    335a:	e8 94       	clt

0000335c <__fp_szero>:
    335c:	bb 27       	eor	r27, r27
    335e:	66 27       	eor	r22, r22
    3360:	77 27       	eor	r23, r23
    3362:	cb 01       	movw	r24, r22
    3364:	97 f9       	bld	r25, 7
    3366:	08 95       	ret

00003368 <__divmodhi4>:
    3368:	97 fb       	bst	r25, 7
    336a:	07 2e       	mov	r0, r23
    336c:	16 f4       	brtc	.+4      	; 0x3372 <__divmodhi4+0xa>
    336e:	00 94       	com	r0
    3370:	06 d0       	rcall	.+12     	; 0x337e <__divmodhi4_neg1>
    3372:	77 fd       	sbrc	r23, 7
    3374:	08 d0       	rcall	.+16     	; 0x3386 <__divmodhi4_neg2>
    3376:	3e d0       	rcall	.+124    	; 0x33f4 <__udivmodhi4>
    3378:	07 fc       	sbrc	r0, 7
    337a:	05 d0       	rcall	.+10     	; 0x3386 <__divmodhi4_neg2>
    337c:	3e f4       	brtc	.+14     	; 0x338c <__divmodhi4_exit>

0000337e <__divmodhi4_neg1>:
    337e:	90 95       	com	r25
    3380:	81 95       	neg	r24
    3382:	9f 4f       	sbci	r25, 0xFF	; 255
    3384:	08 95       	ret

00003386 <__divmodhi4_neg2>:
    3386:	70 95       	com	r23
    3388:	61 95       	neg	r22
    338a:	7f 4f       	sbci	r23, 0xFF	; 255

0000338c <__divmodhi4_exit>:
    338c:	08 95       	ret

0000338e <__divmodsi4>:
    338e:	05 2e       	mov	r0, r21
    3390:	97 fb       	bst	r25, 7
    3392:	16 f4       	brtc	.+4      	; 0x3398 <__divmodsi4+0xa>
    3394:	00 94       	com	r0
    3396:	0f d0       	rcall	.+30     	; 0x33b6 <__negsi2>
    3398:	57 fd       	sbrc	r21, 7
    339a:	05 d0       	rcall	.+10     	; 0x33a6 <__divmodsi4_neg2>
    339c:	3f d0       	rcall	.+126    	; 0x341c <__udivmodsi4>
    339e:	07 fc       	sbrc	r0, 7
    33a0:	02 d0       	rcall	.+4      	; 0x33a6 <__divmodsi4_neg2>
    33a2:	46 f4       	brtc	.+16     	; 0x33b4 <__divmodsi4_exit>
    33a4:	08 c0       	rjmp	.+16     	; 0x33b6 <__negsi2>

000033a6 <__divmodsi4_neg2>:
    33a6:	50 95       	com	r21
    33a8:	40 95       	com	r20
    33aa:	30 95       	com	r19
    33ac:	21 95       	neg	r18
    33ae:	3f 4f       	sbci	r19, 0xFF	; 255
    33b0:	4f 4f       	sbci	r20, 0xFF	; 255
    33b2:	5f 4f       	sbci	r21, 0xFF	; 255

000033b4 <__divmodsi4_exit>:
    33b4:	08 95       	ret

000033b6 <__negsi2>:
    33b6:	90 95       	com	r25
    33b8:	80 95       	com	r24
    33ba:	70 95       	com	r23
    33bc:	61 95       	neg	r22
    33be:	7f 4f       	sbci	r23, 0xFF	; 255
    33c0:	8f 4f       	sbci	r24, 0xFF	; 255
    33c2:	9f 4f       	sbci	r25, 0xFF	; 255
    33c4:	08 95       	ret

000033c6 <__tablejump2__>:
    33c6:	ee 0f       	add	r30, r30
    33c8:	ff 1f       	adc	r31, r31
    33ca:	88 1f       	adc	r24, r24
    33cc:	8b bf       	out	0x3b, r24	; 59
    33ce:	07 90       	elpm	r0, Z+
    33d0:	f6 91       	elpm	r31, Z
    33d2:	e0 2d       	mov	r30, r0
    33d4:	19 94       	eijmp

000033d6 <__umulhisi3>:
    33d6:	a2 9f       	mul	r26, r18
    33d8:	b0 01       	movw	r22, r0
    33da:	b3 9f       	mul	r27, r19
    33dc:	c0 01       	movw	r24, r0
    33de:	a3 9f       	mul	r26, r19
    33e0:	70 0d       	add	r23, r0
    33e2:	81 1d       	adc	r24, r1
    33e4:	11 24       	eor	r1, r1
    33e6:	91 1d       	adc	r25, r1
    33e8:	b2 9f       	mul	r27, r18
    33ea:	70 0d       	add	r23, r0
    33ec:	81 1d       	adc	r24, r1
    33ee:	11 24       	eor	r1, r1
    33f0:	91 1d       	adc	r25, r1
    33f2:	08 95       	ret

000033f4 <__udivmodhi4>:
    33f4:	aa 1b       	sub	r26, r26
    33f6:	bb 1b       	sub	r27, r27
    33f8:	51 e1       	ldi	r21, 0x11	; 17
    33fa:	07 c0       	rjmp	.+14     	; 0x340a <__udivmodhi4_ep>

000033fc <__udivmodhi4_loop>:
    33fc:	aa 1f       	adc	r26, r26
    33fe:	bb 1f       	adc	r27, r27
    3400:	a6 17       	cp	r26, r22
    3402:	b7 07       	cpc	r27, r23
    3404:	10 f0       	brcs	.+4      	; 0x340a <__udivmodhi4_ep>
    3406:	a6 1b       	sub	r26, r22
    3408:	b7 0b       	sbc	r27, r23

0000340a <__udivmodhi4_ep>:
    340a:	88 1f       	adc	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	5a 95       	dec	r21
    3410:	a9 f7       	brne	.-22     	; 0x33fc <__udivmodhi4_loop>
    3412:	80 95       	com	r24
    3414:	90 95       	com	r25
    3416:	bc 01       	movw	r22, r24
    3418:	cd 01       	movw	r24, r26
    341a:	08 95       	ret

0000341c <__udivmodsi4>:
    341c:	a1 e2       	ldi	r26, 0x21	; 33
    341e:	1a 2e       	mov	r1, r26
    3420:	aa 1b       	sub	r26, r26
    3422:	bb 1b       	sub	r27, r27
    3424:	fd 01       	movw	r30, r26
    3426:	0d c0       	rjmp	.+26     	; 0x3442 <__udivmodsi4_ep>

00003428 <__udivmodsi4_loop>:
    3428:	aa 1f       	adc	r26, r26
    342a:	bb 1f       	adc	r27, r27
    342c:	ee 1f       	adc	r30, r30
    342e:	ff 1f       	adc	r31, r31
    3430:	a2 17       	cp	r26, r18
    3432:	b3 07       	cpc	r27, r19
    3434:	e4 07       	cpc	r30, r20
    3436:	f5 07       	cpc	r31, r21
    3438:	20 f0       	brcs	.+8      	; 0x3442 <__udivmodsi4_ep>
    343a:	a2 1b       	sub	r26, r18
    343c:	b3 0b       	sbc	r27, r19
    343e:	e4 0b       	sbc	r30, r20
    3440:	f5 0b       	sbc	r31, r21

00003442 <__udivmodsi4_ep>:
    3442:	66 1f       	adc	r22, r22
    3444:	77 1f       	adc	r23, r23
    3446:	88 1f       	adc	r24, r24
    3448:	99 1f       	adc	r25, r25
    344a:	1a 94       	dec	r1
    344c:	69 f7       	brne	.-38     	; 0x3428 <__udivmodsi4_loop>
    344e:	60 95       	com	r22
    3450:	70 95       	com	r23
    3452:	80 95       	com	r24
    3454:	90 95       	com	r25
    3456:	9b 01       	movw	r18, r22
    3458:	ac 01       	movw	r20, r24
    345a:	bd 01       	movw	r22, r26
    345c:	cf 01       	movw	r24, r30
    345e:	08 95       	ret

00003460 <eeprom_read_block>:
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22

00003464 <eeprom_read_blraw>:
    3464:	fc 01       	movw	r30, r24
    3466:	f9 99       	sbic	0x1f, 1	; 31
    3468:	fe cf       	rjmp	.-4      	; 0x3466 <eeprom_read_blraw+0x2>
    346a:	06 c0       	rjmp	.+12     	; 0x3478 <eeprom_read_blraw+0x14>
    346c:	f2 bd       	out	0x22, r31	; 34
    346e:	e1 bd       	out	0x21, r30	; 33
    3470:	f8 9a       	sbi	0x1f, 0	; 31
    3472:	31 96       	adiw	r30, 0x01	; 1
    3474:	00 b4       	in	r0, 0x20	; 32
    3476:	0d 92       	st	X+, r0
    3478:	41 50       	subi	r20, 0x01	; 1
    347a:	50 40       	sbci	r21, 0x00	; 0
    347c:	b8 f7       	brcc	.-18     	; 0x346c <eeprom_read_blraw+0x8>
    347e:	08 95       	ret

00003480 <eeprom_read_byte>:
    3480:	f9 99       	sbic	0x1f, 1	; 31
    3482:	fe cf       	rjmp	.-4      	; 0x3480 <eeprom_read_byte>
    3484:	92 bd       	out	0x22, r25	; 34
    3486:	81 bd       	out	0x21, r24	; 33
    3488:	f8 9a       	sbi	0x1f, 0	; 31
    348a:	99 27       	eor	r25, r25
    348c:	80 b5       	in	r24, 0x20	; 32
    348e:	08 95       	ret

00003490 <eeprom_write_block>:
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	02 c0       	rjmp	.+4      	; 0x349a <eeprom_write_block+0xa>
    3496:	2d 91       	ld	r18, X+
    3498:	05 d0       	rcall	.+10     	; 0x34a4 <eeprom_write_r18>
    349a:	41 50       	subi	r20, 0x01	; 1
    349c:	50 40       	sbci	r21, 0x00	; 0
    349e:	d8 f7       	brcc	.-10     	; 0x3496 <eeprom_write_block+0x6>
    34a0:	08 95       	ret

000034a2 <eeprom_write_byte>:
    34a2:	26 2f       	mov	r18, r22

000034a4 <eeprom_write_r18>:
    34a4:	f9 99       	sbic	0x1f, 1	; 31
    34a6:	fe cf       	rjmp	.-4      	; 0x34a4 <eeprom_write_r18>
    34a8:	1f ba       	out	0x1f, r1	; 31
    34aa:	92 bd       	out	0x22, r25	; 34
    34ac:	81 bd       	out	0x21, r24	; 33
    34ae:	20 bd       	out	0x20, r18	; 32
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	f8 94       	cli
    34b4:	fa 9a       	sbi	0x1f, 2	; 31
    34b6:	f9 9a       	sbi	0x1f, 1	; 31
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	01 96       	adiw	r24, 0x01	; 1
    34bc:	08 95       	ret

000034be <_exit>:
    34be:	f8 94       	cli

000034c0 <__stop_program>:
    34c0:	ff cf       	rjmp	.-2      	; 0x34c0 <__stop_program>
