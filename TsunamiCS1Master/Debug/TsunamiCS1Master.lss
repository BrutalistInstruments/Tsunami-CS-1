
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015a  00800200  00001b12  00001ba6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000416  0080035a  0080035a  00001d00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000048ca  00000000  00000000  00001fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000171a  00000000  00000000  000068aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019b7  00000000  00000000  00007fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c4  00000000  00000000  0000997c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f84  00000000  00000000  00009f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fad  00000000  00000000  0000aec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000ce71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__vector_27>
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__vector_36>
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e1       	ldi	r30, 0x12	; 18
      fc:	fb e1       	ldi	r31, 0x1B	; 27
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 35       	cpi	r26, 0x5A	; 90
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	27 e0       	ldi	r18, 0x07	; 7
     110:	aa e5       	ldi	r26, 0x5A	; 90
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a0 37       	cpi	r26, 0x70	; 112
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	f2 d4       	rcall	.+2532   	; 0xb04 <main>
     120:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     126:	8f ef       	ldi	r24, 0xFF	; 255
     128:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     12a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons and Encoder buttons
	PORTB = 0B01111111;
     12e:	8f e7       	ldi	r24, 0x7F	; 127
     130:	85 b9       	out	0x05, r24	; 5
     132:	08 95       	ret

00000134 <listenTrigButtons>:
	
}


void listenTrigButtons()
{
     134:	8f 92       	push	r8
     136:	9f 92       	push	r9
     138:	af 92       	push	r10
     13a:	bf 92       	push	r11
     13c:	cf 92       	push	r12
     13e:	df 92       	push	r13
     140:	ef 92       	push	r14
     142:	ff 92       	push	r15
     144:	1f 93       	push	r17
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     14a:	c0 91 09 01 	lds	r28, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     14e:	c0 95       	com	r28
     150:	c0 93 c5 04 	sts	0x04C5, r28	; 0x8004c5 <buttonsCurrentCycle>
	currentTrigButtons = (buttonsCurrentCycle << 8) | (PINA^255);
     154:	80 b1       	in	r24, 0x00	; 0
     156:	d0 e0       	ldi	r29, 0x00	; 0
     158:	dc 2f       	mov	r29, r28
     15a:	cc 27       	eor	r28, r28
     15c:	80 95       	com	r24
     15e:	c8 2b       	or	r28, r24
     160:	d0 93 94 05 	sts	0x0594, r29	; 0x800594 <currentTrigButtons+0x1>
     164:	c0 93 93 05 	sts	0x0593, r28	; 0x800593 <currentTrigButtons>
	if(currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     168:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <__data_end>
     16c:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <__data_end+0x1>
     170:	c8 17       	cp	r28, r24
     172:	d9 07       	cpc	r29, r25
     174:	09 f4       	brne	.+2      	; 0x178 <listenTrigButtons+0x44>
     176:	63 c0       	rjmp	.+198    	; 0x23e <listenTrigButtons+0x10a>
	{
		lastFullBits = currentTrigButtons;
     178:	d0 93 5b 03 	sts	0x035B, r29	; 0x80035b <__data_end+0x1>
     17c:	c0 93 5a 03 	sts	0x035A, r28	; 0x80035a <__data_end>
     180:	0f 2e       	mov	r0, r31
     182:	f2 e8       	ldi	r31, 0x82	; 130
     184:	cf 2e       	mov	r12, r31
     186:	f3 e0       	ldi	r31, 0x03	; 3
     188:	df 2e       	mov	r13, r31
     18a:	f0 2d       	mov	r31, r0
     18c:	0f 2e       	mov	r0, r31
     18e:	f2 e0       	ldi	r31, 0x02	; 2
     190:	ef 2e       	mov	r14, r31
     192:	f4 e0       	ldi	r31, 0x04	; 4
     194:	ff 2e       	mov	r15, r31
     196:	f0 2d       	mov	r31, r0
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     198:	10 e0       	ldi	r17, 0x00	; 0
				
				case 2: ;
				//select track for sample assignment
				uint16_t currentSample = (currentPattern.trackSampleMSB[bc]<<8)|(currentPattern.trackSampleLSB[bc]);
				currentTrack = bc;
				numPrinter(screen2[1], 7, 2, (bc+1));
     19a:	89 ee       	ldi	r24, 0xE9	; 233
     19c:	9f ef       	ldi	r25, 0xFF	; 255
     19e:	9c 01       	movw	r18, r24
     1a0:	2a 56       	subi	r18, 0x6A	; 106
     1a2:	33 40       	sbci	r19, 0x03	; 3
     1a4:	59 01       	movw	r10, r18
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
	{
		currentTrig = (fullBitsParse&1);
     1a6:	8c 2f       	mov	r24, r28
     1a8:	81 70       	andi	r24, 0x01	; 1
     1aa:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <currentTrig>
		if(currentTrig)
     1ae:	88 23       	and	r24, r24
     1b0:	d1 f1       	breq	.+116    	; 0x226 <listenTrigButtons+0xf2>
		{
			switch (encoderAValue)
     1b2:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
     1b6:	88 23       	and	r24, r24
     1b8:	19 f0       	breq	.+6      	; 0x1c0 <listenTrigButtons+0x8c>
     1ba:	82 30       	cpi	r24, 0x02	; 2
     1bc:	69 f0       	breq	.+26     	; 0x1d8 <listenTrigButtons+0xa4>
     1be:	33 c0       	rjmp	.+102    	; 0x226 <listenTrigButtons+0xf2>
			{
				
				//for "perfrmance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
				case 0: //performance mode
				//we trigger a sound here based on the location of bc
				trackControl(currentPattern.trackSampleLSB[bc], currentPattern.trackSampleMSB[bc], currentPattern.trackOutputRoute[bc], currentPattern.trackOutputRoute[bc]);
     1c0:	f6 01       	movw	r30, r12
     1c2:	40 81       	ld	r20, Z
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	f7 01       	movw	r30, r14
     1c8:	60 81       	ld	r22, Z
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	80 89       	ldd	r24, Z+16	; 0x10
     1ce:	9a 01       	movw	r18, r20
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0e 94 36 0b 	call	0x166c	; 0x166c <trackControl>
				//trackControl(3,0,0,1);
				//numPrinter(buttonTest,9, 2,bc);
				//outputS(buttonTest, 2);
				break;
     1d6:	27 c0       	rjmp	.+78     	; 0x226 <listenTrigButtons+0xf2>
				//step sequencer mode.
				break;
				
				case 2: ;
				//select track for sample assignment
				uint16_t currentSample = (currentPattern.trackSampleMSB[bc]<<8)|(currentPattern.trackSampleLSB[bc]);
     1d8:	f7 01       	movw	r30, r14
     1da:	80 80       	ld	r8, Z
     1dc:	91 2c       	mov	r9, r1
     1de:	98 2c       	mov	r9, r8
     1e0:	88 24       	eor	r8, r8
     1e2:	80 89       	ldd	r24, Z+16	; 0x10
     1e4:	88 2a       	or	r8, r24
				currentTrack = bc;
     1e6:	10 93 1a 06 	sts	0x061A, r17	; 0x80061a <currentTrack>
				numPrinter(screen2[1], 7, 2, (bc+1));
     1ea:	95 01       	movw	r18, r10
     1ec:	2c 0d       	add	r18, r12
     1ee:	3d 1d       	adc	r19, r13
     1f0:	42 e0       	ldi	r20, 0x02	; 2
     1f2:	67 e0       	ldi	r22, 0x07	; 7
     1f4:	8b ea       	ldi	r24, 0xAB	; 171
     1f6:	95 e0       	ldi	r25, 0x05	; 5
     1f8:	cd d7       	rcall	.+3994   	; 0x1194 <numPrinter>
				numPrinter(screen2[1], 10, 4, currentSample);
     1fa:	94 01       	movw	r18, r8
     1fc:	44 e0       	ldi	r20, 0x04	; 4
     1fe:	6a e0       	ldi	r22, 0x0A	; 10
     200:	8b ea       	ldi	r24, 0xAB	; 171
     202:	95 e0       	ldi	r25, 0x05	; 5
     204:	c7 d7       	rcall	.+3982   	; 0x1194 <numPrinter>
				outputS(screen2[1], 1);
     206:	61 e0       	ldi	r22, 0x01	; 1
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	8b ea       	ldi	r24, 0xAB	; 171
     20c:	95 e0       	ldi	r25, 0x05	; 5
     20e:	aa d7       	rcall	.+3924   	; 0x1164 <outputS>
				trackControl(currentPattern.trackSampleLSB[bc], currentPattern.trackSampleMSB[bc], currentPattern.trackOutputRoute[bc], currentPattern.trackOutputRoute[bc]);
     210:	f6 01       	movw	r30, r12
     212:	40 81       	ld	r20, Z
     214:	50 e0       	ldi	r21, 0x00	; 0
     216:	f7 01       	movw	r30, r14
     218:	60 81       	ld	r22, Z
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	80 89       	ldd	r24, Z+16	; 0x10
     21e:	9a 01       	movw	r18, r20
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 36 0b 	call	0x166c	; 0x166c <trackControl>
			}
		
		
		}
		
		fullBitsParse = fullBitsParse>>1;
     226:	d6 95       	lsr	r29
     228:	c7 95       	ror	r28
	{
		lastFullBits = currentTrigButtons;
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     22a:	1f 5f       	subi	r17, 0xFF	; 255
     22c:	ff ef       	ldi	r31, 0xFF	; 255
     22e:	cf 1a       	sub	r12, r31
     230:	df 0a       	sbc	r13, r31
     232:	2f ef       	ldi	r18, 0xFF	; 255
     234:	e2 1a       	sub	r14, r18
     236:	f2 0a       	sbc	r15, r18
     238:	10 31       	cpi	r17, 0x10	; 16
     23a:	09 f0       	breq	.+2      	; 0x23e <listenTrigButtons+0x10a>
     23c:	b4 cf       	rjmp	.-152    	; 0x1a6 <listenTrigButtons+0x72>
		fullBitsParse = fullBitsParse>>1;
	}
	}


}
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	1f 91       	pop	r17
     244:	ff 90       	pop	r15
     246:	ef 90       	pop	r14
     248:	df 90       	pop	r13
     24a:	cf 90       	pop	r12
     24c:	bf 90       	pop	r11
     24e:	af 90       	pop	r10
     250:	9f 90       	pop	r9
     252:	8f 90       	pop	r8
     254:	08 95       	ret

00000256 <listenGPButtons>:

void listenGPButtons() // are the encoder buttons here also?
{
	currentGPButtons = PINB;
     256:	83 b1       	in	r24, 0x03	; 3
     258:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <currentGPButtons>
	if((currentGPButtons^255)&(1 << PB5))
     25c:	80 95       	com	r24
     25e:	85 ff       	sbrs	r24, 5
     260:	05 c0       	rjmp	.+10     	; 0x26c <listenGPButtons+0x16>
	{ //top encoder button
	//	outputS(testEncoderButton, 3);
	encoderAFlag = ~encoderAFlag;
     262:	90 91 e7 05 	lds	r25, 0x05E7	; 0x8005e7 <encoderAFlag>
     266:	90 95       	com	r25
     268:	90 93 e7 05 	sts	0x05E7, r25	; 0x8005e7 <encoderAFlag>
		
	}
	if((currentGPButtons^255)&(1 << PB6))
     26c:	86 ff       	sbrs	r24, 6
     26e:	05 c0       	rjmp	.+10     	; 0x27a <listenGPButtons+0x24>
	{//botton encoder button
		
		//outputS(testEncoderButton, 3);
		encoderBFlag = ~encoderBFlag;
     270:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <encoderBFlag>
     274:	80 95       	com	r24
     276:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <encoderBFlag>
     27a:	08 95       	ret

0000027c <initEncoders>:
#include "globalVariables.h"

void initEncoders()
{
	//this is where we set the encoder pins to where they need to be
PORTH = 0B01111000; // enable internal pullup resistors.
     27c:	88 e7       	ldi	r24, 0x78	; 120
     27e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     282:	08 95       	ret

00000284 <pollEncoder0>:

}

void pollEncoder0(uint8_t *encoderC0)
{
	if(~PINH&(1<<PH6))
     284:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     288:	26 fd       	sbrc	r18, 6
     28a:	12 c0       	rjmp	.+36     	; 0x2b0 <pollEncoder0+0x2c>
	{
		if(~PINH&(1<<PH5))
     28c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     290:	25 fd       	sbrc	r18, 5
     292:	05 c0       	rjmp	.+10     	; 0x29e <pollEncoder0+0x1a>
		{
			//left turn?
			*encoderC0= (*encoderC0)+1;
     294:	fc 01       	movw	r30, r24
     296:	20 81       	ld	r18, Z
     298:	2f 5f       	subi	r18, 0xFF	; 255
     29a:	20 83       	st	Z, r18
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <pollEncoder0+0x22>
		}
		else
		{
			*encoderC0= (*encoderC0)-1;
     29e:	fc 01       	movw	r30, r24
     2a0:	20 81       	ld	r18, Z
     2a2:	21 50       	subi	r18, 0x01	; 1
     2a4:	20 83       	st	Z, r18
		}
		//_delay_ms(2); // seems un-necesary with while loop
		while(~PINH&(1<<PH6)){} // this does make things smoother, but we need to be sure we have interupts for important things.
     2a6:	e0 e0       	ldi	r30, 0x00	; 0
     2a8:	f1 e0       	ldi	r31, 0x01	; 1
     2aa:	80 81       	ld	r24, Z
     2ac:	86 ff       	sbrs	r24, 6
     2ae:	fd cf       	rjmp	.-6      	; 0x2aa <pollEncoder0+0x26>
     2b0:	08 95       	ret

000002b2 <pollEncoder1>:

}

void pollEncoder1(uint8_t *encoderC1)
{
	if(~PINH&(1<<PH3))
     2b2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     2b6:	23 fd       	sbrc	r18, 3
     2b8:	12 c0       	rjmp	.+36     	; 0x2de <pollEncoder1+0x2c>
	{
		if(~PINH&(1<<PH4))
     2ba:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     2be:	24 fd       	sbrc	r18, 4
     2c0:	05 c0       	rjmp	.+10     	; 0x2cc <pollEncoder1+0x1a>
		{
			//left turn?
			*encoderC1=(*encoderC1)-1;
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 81       	ld	r18, Z
     2c6:	21 50       	subi	r18, 0x01	; 1
     2c8:	20 83       	st	Z, r18
     2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <pollEncoder1+0x22>
		}
		else
		{
			*encoderC1=(*encoderC1)+1;
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 81       	ld	r18, Z
     2d0:	2f 5f       	subi	r18, 0xFF	; 255
     2d2:	20 83       	st	Z, r18
		}
		//_delay_ms(2); // seems un-necesary with while loop
		while(~PINH&(1<<PH3)){} // this does make things smoother, but we need to be sure we have interupts for important things.
     2d4:	e0 e0       	ldi	r30, 0x00	; 0
     2d6:	f1 e0       	ldi	r31, 0x01	; 1
     2d8:	80 81       	ld	r24, Z
     2da:	83 ff       	sbrs	r24, 3
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <pollEncoder1+0x26>
     2de:	08 95       	ret

000002e0 <listenEncoders>:


void listenEncoders()
{
	//this is where we update the encoder variables.
	pollEncoder0(&encoderAValue);
     2e0:	89 e6       	ldi	r24, 0x69	; 105
     2e2:	93 e0       	ldi	r25, 0x03	; 3
     2e4:	cf df       	rcall	.-98     	; 0x284 <pollEncoder0>
	pollEncoder1(&encoderBValue);
     2e6:	8e e6       	ldi	r24, 0x6E	; 110
     2e8:	96 e0       	ldi	r25, 0x06	; 6
     2ea:	e3 cf       	rjmp	.-58     	; 0x2b2 <pollEncoder1>
     2ec:	08 95       	ret

000002ee <initArrays>:

#include <avr/io.h>
#include "globalVariables.h"

void initArrays(char myArray[4][20], uint8_t lengthOfString, int stringNumber, char* myString)
{
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	8c 01       	movw	r16, r24
     2fc:	7a 01       	movw	r14, r20
	uint8_t charLeft = 20 - lengthOfString;
     2fe:	94 e1       	ldi	r25, 0x14	; 20
     300:	59 2f       	mov	r21, r25
     302:	56 1b       	sub	r21, r22
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     304:	66 23       	and	r22, r22
     306:	a1 f0       	breq	.+40     	; 0x330 <initArrays+0x42>
     308:	f9 01       	movw	r30, r18
     30a:	84 e1       	ldi	r24, 0x14	; 20
     30c:	8e 9d       	mul	r24, r14
     30e:	d0 01       	movw	r26, r0
     310:	8f 9d       	mul	r24, r15
     312:	b0 0d       	add	r27, r0
     314:	11 24       	eor	r1, r1
     316:	a0 0f       	add	r26, r16
     318:	b1 1f       	adc	r27, r17
     31a:	cf ef       	ldi	r28, 0xFF	; 255
     31c:	c6 0f       	add	r28, r22
     31e:	d0 e0       	ldi	r29, 0x00	; 0
     320:	21 96       	adiw	r28, 0x01	; 1
     322:	2c 0f       	add	r18, r28
     324:	3d 1f       	adc	r19, r29
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     326:	91 91       	ld	r25, Z+
     328:	9d 93       	st	X+, r25

void initArrays(char myArray[4][20], uint8_t lengthOfString, int stringNumber, char* myString)
{
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     32a:	e2 17       	cp	r30, r18
     32c:	f3 07       	cpc	r31, r19
     32e:	d9 f7       	brne	.-10     	; 0x326 <initArrays+0x38>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
		
	}
	
	for(charLeft; charLeft>0; charLeft--)
     330:	55 23       	and	r21, r21
     332:	91 f0       	breq	.+36     	; 0x358 <initArrays+0x6a>
	{
		
		myArray[stringNumber][currentIndex] = ' ';
     334:	24 e1       	ldi	r18, 0x14	; 20
     336:	2e 9d       	mul	r18, r14
     338:	c0 01       	movw	r24, r0
     33a:	2f 9d       	mul	r18, r15
     33c:	90 0d       	add	r25, r0
     33e:	11 24       	eor	r1, r1
     340:	08 0f       	add	r16, r24
     342:	19 1f       	adc	r17, r25
     344:	95 2f       	mov	r25, r21
     346:	96 0f       	add	r25, r22
     348:	80 e2       	ldi	r24, 0x20	; 32
     34a:	f8 01       	movw	r30, r16
     34c:	e6 0f       	add	r30, r22
     34e:	f1 1d       	adc	r31, r1
     350:	80 83       	st	Z, r24
		currentIndex++;
     352:	6f 5f       	subi	r22, 0xFF	; 255
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
		
	}
	
	for(charLeft; charLeft>0; charLeft--)
     354:	69 13       	cpse	r22, r25
     356:	f9 cf       	rjmp	.-14     	; 0x34a <initArrays+0x5c>
		
		myArray[stringNumber][currentIndex] = ' ';
		currentIndex++;
	}

}
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	08 95       	ret

00000366 <initBank>:

void initBank()
{
     366:	e2 e1       	ldi	r30, 0x12	; 18
     368:	f4 e0       	ldi	r31, 0x04	; 4
	for(uint8_t i = 0; i<16; i++)
     36a:	80 e0       	ldi	r24, 0x00	; 0
	{
		currentPattern.trackSampleLSB[i] = i+1;
     36c:	8f 5f       	subi	r24, 0xFF	; 255
     36e:	81 93       	st	Z+, r24

}

void initBank()
{
	for(uint8_t i = 0; i<16; i++)
     370:	80 31       	cpi	r24, 0x10	; 16
     372:	e1 f7       	brne	.-8      	; 0x36c <initBank+0x6>
	{
		currentPattern.trackSampleLSB[i] = i+1;
	}
	
	//assign midi notes C3 to E4
	currentPattern.midiTrackNote[0] = 0x30;
     374:	80 e3       	ldi	r24, 0x30	; 48
     376:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <currentPattern+0x148>
	currentPattern.midiTrackNote[1] = 0x31;
     37a:	81 e3       	ldi	r24, 0x31	; 49
     37c:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <currentPattern+0x149>
	currentPattern.midiTrackNote[2] = 0x32;
     380:	82 e3       	ldi	r24, 0x32	; 50
     382:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <currentPattern+0x14a>
	currentPattern.midiTrackNote[3] = 0x33;
     386:	83 e3       	ldi	r24, 0x33	; 51
     388:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <currentPattern+0x14b>
	currentPattern.midiTrackNote[4] = 0x34;
     38c:	84 e3       	ldi	r24, 0x34	; 52
     38e:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <currentPattern+0x14c>
	currentPattern.midiTrackNote[5] = 0x35;
     392:	85 e3       	ldi	r24, 0x35	; 53
     394:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <currentPattern+0x14d>
	currentPattern.midiTrackNote[6] = 0x36;
     398:	86 e3       	ldi	r24, 0x36	; 54
     39a:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <currentPattern+0x14e>
	currentPattern.midiTrackNote[7] = 0x37;
     39e:	87 e3       	ldi	r24, 0x37	; 55
     3a0:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <currentPattern+0x14f>
	currentPattern.midiTrackNote[8] = 0x38;
     3a4:	88 e3       	ldi	r24, 0x38	; 56
     3a6:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <currentPattern+0x150>
	currentPattern.midiTrackNote[9] = 0x39;
     3aa:	89 e3       	ldi	r24, 0x39	; 57
     3ac:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <currentPattern+0x151>
	currentPattern.midiTrackNote[10] = 0x3a;
     3b0:	8a e3       	ldi	r24, 0x3A	; 58
     3b2:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <currentPattern+0x152>
	currentPattern.midiTrackNote[11] = 0x3b;
     3b6:	8b e3       	ldi	r24, 0x3B	; 59
     3b8:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <currentPattern+0x153>
	currentPattern.midiTrackNote[12] = 0x3c;
     3bc:	8c e3       	ldi	r24, 0x3C	; 60
     3be:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <currentPattern+0x154>
	currentPattern.midiTrackNote[13] = 0x3d;
     3c2:	8d e3       	ldi	r24, 0x3D	; 61
     3c4:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <currentPattern+0x155>
	currentPattern.midiTrackNote[14] = 0x3e;
     3c8:	8e e3       	ldi	r24, 0x3E	; 62
     3ca:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <currentPattern+0x156>
	currentPattern.midiTrackNote[15] = 0x3f;
     3ce:	8f e3       	ldi	r24, 0x3F	; 63
     3d0:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <currentPattern+0x157>
	currentPattern.patternBPM = 120;
     3d4:	88 e7       	ldi	r24, 0x78	; 120
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <currentPattern+0x159>
     3dc:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <currentPattern+0x158>
	currentPatternNumber = 1;
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <currentPatternNumber>
	currentStep = 0;
     3e6:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <currentStep>
	currentPattern.numSteps = 16;
     3ea:	80 e1       	ldi	r24, 0x10	; 16
     3ec:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <currentPattern+0x15a>
	//screen0
	// = {"Performance Mode    ","Pattern:            ","BPM: xxx            ","Stop                "}
	initArrays(screen0,8,1,"Pattern:");
     3f0:	24 ea       	ldi	r18, 0xA4	; 164
     3f2:	32 e0       	ldi	r19, 0x02	; 2
     3f4:	41 e0       	ldi	r20, 0x01	; 1
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	68 e0       	ldi	r22, 0x08	; 8
     3fa:	83 e4       	ldi	r24, 0x43	; 67
     3fc:	95 e0       	ldi	r25, 0x05	; 5
     3fe:	77 df       	rcall	.-274    	; 0x2ee <initArrays>
	initArrays(screen0,4,2,"BPM:");
     400:	2d ea       	ldi	r18, 0xAD	; 173
     402:	32 e0       	ldi	r19, 0x02	; 2
     404:	42 e0       	ldi	r20, 0x02	; 2
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	64 e0       	ldi	r22, 0x04	; 4
     40a:	83 e4       	ldi	r24, 0x43	; 67
     40c:	95 e0       	ldi	r25, 0x05	; 5
     40e:	6f df       	rcall	.-290    	; 0x2ee <initArrays>
	initArrays(screen0,4,3,"Stop");
     410:	22 eb       	ldi	r18, 0xB2	; 178
     412:	32 e0       	ldi	r19, 0x02	; 2
     414:	43 e0       	ldi	r20, 0x03	; 3
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	64 e0       	ldi	r22, 0x04	; 4
     41a:	83 e4       	ldi	r24, 0x43	; 67
     41c:	95 e0       	ldi	r25, 0x05	; 5
     41e:	67 df       	rcall	.-306    	; 0x2ee <initArrays>
	initArrays(screen0,16,0,"Performance Mode");
     420:	27 eb       	ldi	r18, 0xB7	; 183
     422:	32 e0       	ldi	r19, 0x02	; 2
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	60 e1       	ldi	r22, 0x10	; 16
     42a:	83 e4       	ldi	r24, 0x43	; 67
     42c:	95 e0       	ldi	r25, 0x05	; 5
     42e:	5f df       	rcall	.-322    	; 0x2ee <initArrays>
	//screen1
	// = {"Sequence Edit       ","Pattern:            ","Steps:              ","Step number:        "}; //this will eventually be 5 once we implement naming of samples.
	initArrays(screen1,8,1,"Pattern:");
     430:	24 ea       	ldi	r18, 0xA4	; 164
     432:	32 e0       	ldi	r19, 0x02	; 2
     434:	41 e0       	ldi	r20, 0x01	; 1
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	68 e0       	ldi	r22, 0x08	; 8
     43a:	87 ec       	ldi	r24, 0xC7	; 199
     43c:	94 e0       	ldi	r25, 0x04	; 4
     43e:	57 df       	rcall	.-338    	; 0x2ee <initArrays>
	initArrays(screen1,6,2,"Steps:");
     440:	28 ec       	ldi	r18, 0xC8	; 200
     442:	32 e0       	ldi	r19, 0x02	; 2
     444:	42 e0       	ldi	r20, 0x02	; 2
     446:	50 e0       	ldi	r21, 0x00	; 0
     448:	66 e0       	ldi	r22, 0x06	; 6
     44a:	87 ec       	ldi	r24, 0xC7	; 199
     44c:	94 e0       	ldi	r25, 0x04	; 4
     44e:	4f df       	rcall	.-354    	; 0x2ee <initArrays>
	initArrays(screen1,12,3,"Step number:");
     450:	2f ec       	ldi	r18, 0xCF	; 207
     452:	32 e0       	ldi	r19, 0x02	; 2
     454:	43 e0       	ldi	r20, 0x03	; 3
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	6c e0       	ldi	r22, 0x0C	; 12
     45a:	87 ec       	ldi	r24, 0xC7	; 199
     45c:	94 e0       	ldi	r25, 0x04	; 4
     45e:	47 df       	rcall	.-370    	; 0x2ee <initArrays>
	initArrays(screen1,13,0,"Sequence Edit");
     460:	2c ed       	ldi	r18, 0xDC	; 220
     462:	32 e0       	ldi	r19, 0x02	; 2
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	6d e0       	ldi	r22, 0x0D	; 13
     46a:	87 ec       	ldi	r24, 0xC7	; 199
     46c:	94 e0       	ldi	r25, 0x04	; 4
     46e:	3f df       	rcall	.-386    	; 0x2ee <initArrays>
	//screen2
	//= {"Track Settings      ","Track:              ","Play Mode           ","OutRoute            "};
	initArrays(screen2,6,1,"Track:");
     470:	2a ee       	ldi	r18, 0xEA	; 234
     472:	32 e0       	ldi	r19, 0x02	; 2
     474:	41 e0       	ldi	r20, 0x01	; 1
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	66 e0       	ldi	r22, 0x06	; 6
     47a:	87 e9       	ldi	r24, 0x97	; 151
     47c:	95 e0       	ldi	r25, 0x05	; 5
     47e:	37 df       	rcall	.-402    	; 0x2ee <initArrays>
	initArrays(screen2,9,2,"PlayMode:");
     480:	21 ef       	ldi	r18, 0xF1	; 241
     482:	32 e0       	ldi	r19, 0x02	; 2
     484:	42 e0       	ldi	r20, 0x02	; 2
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	69 e0       	ldi	r22, 0x09	; 9
     48a:	87 e9       	ldi	r24, 0x97	; 151
     48c:	95 e0       	ldi	r25, 0x05	; 5
     48e:	2f df       	rcall	.-418    	; 0x2ee <initArrays>
	initArrays(screen2,9,3,"OutRoute:");
     490:	2b ef       	ldi	r18, 0xFB	; 251
     492:	32 e0       	ldi	r19, 0x02	; 2
     494:	43 e0       	ldi	r20, 0x03	; 3
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	69 e0       	ldi	r22, 0x09	; 9
     49a:	87 e9       	ldi	r24, 0x97	; 151
     49c:	95 e0       	ldi	r25, 0x05	; 5
     49e:	27 df       	rcall	.-434    	; 0x2ee <initArrays>
	initArrays(screen2,14,0,"Track Settings");
     4a0:	25 e0       	ldi	r18, 0x05	; 5
     4a2:	33 e0       	ldi	r19, 0x03	; 3
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	6e e0       	ldi	r22, 0x0E	; 14
     4aa:	87 e9       	ldi	r24, 0x97	; 151
     4ac:	95 e0       	ldi	r25, 0x05	; 5
     4ae:	1f df       	rcall	.-450    	; 0x2ee <initArrays>
	//screen3
	// = {"Global Settings     ","Midi Channel: xx    ", "Midi trigger Notes  ","(put triggered note)"};
	initArrays(screen3,13,1,"Midi Channel:");
     4b0:	24 e1       	ldi	r18, 0x14	; 20
     4b2:	33 e0       	ldi	r19, 0x03	; 3
     4b4:	41 e0       	ldi	r20, 0x01	; 1
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	6d e0       	ldi	r22, 0x0D	; 13
     4ba:	8b e1       	ldi	r24, 0x1B	; 27
     4bc:	96 e0       	ldi	r25, 0x06	; 6
     4be:	17 df       	rcall	.-466    	; 0x2ee <initArrays>
	initArrays(screen3,18,2,"Midi Trigger Notes");
     4c0:	22 e2       	ldi	r18, 0x22	; 34
     4c2:	33 e0       	ldi	r19, 0x03	; 3
     4c4:	42 e0       	ldi	r20, 0x02	; 2
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	62 e1       	ldi	r22, 0x12	; 18
     4ca:	8b e1       	ldi	r24, 0x1B	; 27
     4cc:	96 e0       	ldi	r25, 0x06	; 6
     4ce:	0f df       	rcall	.-482    	; 0x2ee <initArrays>
	initArrays(screen3,20,3,"(trigger Notes here)");
     4d0:	25 e3       	ldi	r18, 0x35	; 53
     4d2:	33 e0       	ldi	r19, 0x03	; 3
     4d4:	43 e0       	ldi	r20, 0x03	; 3
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	64 e1       	ldi	r22, 0x14	; 20
     4da:	8b e1       	ldi	r24, 0x1B	; 27
     4dc:	96 e0       	ldi	r25, 0x06	; 6
     4de:	07 df       	rcall	.-498    	; 0x2ee <initArrays>
	initArrays(screen3,15,0,"Global Settings");	
     4e0:	2a e4       	ldi	r18, 0x4A	; 74
     4e2:	33 e0       	ldi	r19, 0x03	; 3
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	6f e0       	ldi	r22, 0x0F	; 15
     4ea:	8b e1       	ldi	r24, 0x1B	; 27
     4ec:	96 e0       	ldi	r25, 0x06	; 6
     4ee:	ff ce       	rjmp	.-514    	; 0x2ee <initArrays>
     4f0:	08 95       	ret

000004f2 <startADCConversion>:
char envelopeTimePrint[20] = "EnvelopeTimex:xxxxMS";

uint8_t startADCConversion()
{
	
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     4f2:	ea e7       	ldi	r30, 0x7A	; 122
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	80 64       	ori	r24, 0x40	; 64
     4fa:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     4fc:	80 81       	ld	r24, Z
     4fe:	86 fd       	sbrc	r24, 6
     500:	fd cf       	rjmp	.-6      	; 0x4fc <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.
     502:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
}
     506:	08 95       	ret

00000508 <initADC>:

void initADC()
{
	DDRE = 0B00111000; //init pins E5, 4, and 3 as select pins on the external mux.
     508:	88 e3       	ldi	r24, 0x38	; 56
     50a:	8d b9       	out	0x0d, r24	; 13
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     50c:	80 e2       	ldi	r24, 0x20	; 32
     50e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     512:	87 e8       	ldi	r24, 0x87	; 135
     514:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     518:	88 e0       	ldi	r24, 0x08	; 8
     51a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     51e:	8f ef       	ldi	r24, 0xFF	; 255
     520:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     524:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     528:	10 92 ec 05 	sts	0x05EC, r1	; 0x8005ec <knobBufferCounter>
	startADCConversion();
     52c:	e2 cf       	rjmp	.-60     	; 0x4f2 <startADCConversion>
     52e:	08 95       	ret

00000530 <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     530:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     532:	98 2f       	mov	r25, r24
     534:	96 95       	lsr	r25
     536:	96 95       	lsr	r25
     538:	2f e2       	ldi	r18, 0x2F	; 47
     53a:	92 9f       	mul	r25, r18
     53c:	91 2d       	mov	r25, r1
     53e:	11 24       	eor	r1, r1
     540:	96 95       	lsr	r25
     542:	2c e2       	ldi	r18, 0x2C	; 44
     544:	92 9f       	mul	r25, r18
     546:	80 19       	sub	r24, r0
     548:	11 24       	eor	r1, r1
     54a:	98 2f       	mov	r25, r24
	if(select<40)
     54c:	88 32       	cpi	r24, 0x28	; 40
     54e:	18 f5       	brcc	.+70     	; 0x596 <selectKnob+0x66>
	{
		ADCSRB = (1 << MUX5);
     550:	88 e0       	ldi	r24, 0x08	; 8
     552:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     556:	c9 2f       	mov	r28, r25
     558:	c7 70       	andi	r28, 0x07	; 7
		uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     55a:	96 95       	lsr	r25
     55c:	96 95       	lsr	r25
     55e:	96 95       	lsr	r25
     560:	90 62       	ori	r25, 0x20	; 32
     562:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     566:	c5 df       	rcall	.-118    	; 0x4f2 <startADCConversion>
		//we might need to worry about the delay, but that's fine.
		
		//we put our select0 and select2 pins in the opposite ports, so we need to do some math to fix that.
		//easy stupid fix:
		switch (tempMuxSelect)
     568:	c3 30       	cpi	r28, 0x03	; 3
     56a:	59 f0       	breq	.+22     	; 0x582 <selectKnob+0x52>
     56c:	18 f4       	brcc	.+6      	; 0x574 <selectKnob+0x44>
     56e:	c1 30       	cpi	r28, 0x01	; 1
     570:	31 f0       	breq	.+12     	; 0x57e <selectKnob+0x4e>
     572:	0c c0       	rjmp	.+24     	; 0x58c <selectKnob+0x5c>
     574:	c4 30       	cpi	r28, 0x04	; 4
     576:	39 f0       	breq	.+14     	; 0x586 <selectKnob+0x56>
     578:	c6 30       	cpi	r28, 0x06	; 6
     57a:	39 f0       	breq	.+14     	; 0x58a <selectKnob+0x5a>
     57c:	07 c0       	rjmp	.+14     	; 0x58c <selectKnob+0x5c>
		{
			case 1: muxSelect = 4;
     57e:	c4 e0       	ldi	r28, 0x04	; 4
     580:	05 c0       	rjmp	.+10     	; 0x58c <selectKnob+0x5c>
			break;
			
			case 3:	muxSelect = 6;
     582:	c6 e0       	ldi	r28, 0x06	; 6
			break;
     584:	03 c0       	rjmp	.+6      	; 0x58c <selectKnob+0x5c>
			
			case 4: muxSelect = 1;
     586:	c1 e0       	ldi	r28, 0x01	; 1
			break;
     588:	01 c0       	rjmp	.+2      	; 0x58c <selectKnob+0x5c>
			
			case 6: muxSelect = 3;
     58a:	c3 e0       	ldi	r28, 0x03	; 3
			break;
		}

	//then the external multiplexer
		PORTE = (muxSelect << 3);
     58c:	cc 0f       	add	r28, r28
     58e:	cc 0f       	add	r28, r28
     590:	cc 0f       	add	r28, r28
     592:	ce b9       	out	0x0e, r28	; 14
     594:	20 c0       	rjmp	.+64     	; 0x5d6 <selectKnob+0xa6>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     596:	89 32       	cpi	r24, 0x29	; 41
     598:	71 f0       	breq	.+28     	; 0x5b6 <selectKnob+0x86>
     59a:	18 f4       	brcc	.+6      	; 0x5a2 <selectKnob+0x72>
     59c:	88 32       	cpi	r24, 0x28	; 40
     59e:	31 f0       	breq	.+12     	; 0x5ac <selectKnob+0x7c>
     5a0:	1a c0       	rjmp	.+52     	; 0x5d6 <selectKnob+0xa6>
     5a2:	8a 32       	cpi	r24, 0x2A	; 42
     5a4:	69 f0       	breq	.+26     	; 0x5c0 <selectKnob+0x90>
     5a6:	8b 32       	cpi	r24, 0x2B	; 43
     5a8:	81 f0       	breq	.+32     	; 0x5ca <selectKnob+0x9a>
     5aa:	15 c0       	rjmp	.+42     	; 0x5d6 <selectKnob+0xa6>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     5ac:	85 e2       	ldi	r24, 0x25	; 37
     5ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     5b2:	9f df       	rcall	.-194    	; 0x4f2 <startADCConversion>
		break;
     5b4:	10 c0       	rjmp	.+32     	; 0x5d6 <selectKnob+0xa6>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     5b6:	86 e2       	ldi	r24, 0x26	; 38
     5b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     5bc:	9a df       	rcall	.-204    	; 0x4f2 <startADCConversion>
		break;
     5be:	0b c0       	rjmp	.+22     	; 0x5d6 <selectKnob+0xa6>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     5c0:	87 e2       	ldi	r24, 0x27	; 39
     5c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     5c6:	95 df       	rcall	.-214    	; 0x4f2 <startADCConversion>
		break;
     5c8:	06 c0       	rjmp	.+12     	; 0x5d6 <selectKnob+0xa6>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     5ca:	80 e2       	ldi	r24, 0x20	; 32
     5cc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     5d0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     5d4:	8e df       	rcall	.-228    	; 0x4f2 <startADCConversion>
		break;
		}
	
	}
	
}
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <updateKnob>:

void updateKnob(uint8_t select)
{
     5da:	cf 93       	push	r28
     5dc:	c8 2f       	mov	r28, r24

	knobBuffer[select] = startADCConversion(); 
     5de:	89 df       	rcall	.-238    	; 0x4f2 <startADCConversion>
     5e0:	ec 2f       	mov	r30, r28
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	e9 5e       	subi	r30, 0xE9	; 233
     5e6:	fa 4f       	sbci	r31, 0xFA	; 250
     5e8:	80 83       	st	Z, r24
}
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <interperetKnob>:

void interperetKnob(uint8_t select)
{//this function will compare outputs, and write to our struct.
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
	select = select%44;
     5f8:	98 2f       	mov	r25, r24
     5fa:	96 95       	lsr	r25
     5fc:	96 95       	lsr	r25
     5fe:	2f e2       	ldi	r18, 0x2F	; 47
     600:	92 9f       	mul	r25, r18
     602:	91 2d       	mov	r25, r1
     604:	11 24       	eor	r1, r1
     606:	96 95       	lsr	r25
     608:	2c e2       	ldi	r18, 0x2C	; 44
     60a:	92 9f       	mul	r25, r18
     60c:	80 19       	sub	r24, r0
     60e:	11 24       	eor	r1, r1
     610:	98 2f       	mov	r25, r24
	//we might not need this with the IIR filter
	float volumeDivisor = 3.1875;
	
	
	//Change from FIR filter to IIR filter.
     checkBuffer[select] += ((knobBuffer[select]-checkBuffer[select])/2);
     612:	a8 2f       	mov	r26, r24
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	fd 01       	movw	r30, r26
     618:	e3 51       	subi	r30, 0x13	; 19
     61a:	fa 4f       	sbci	r31, 0xFA	; 250
     61c:	60 81       	ld	r22, Z
     61e:	fd 01       	movw	r30, r26
     620:	e9 5e       	subi	r30, 0xE9	; 233
     622:	fa 4f       	sbci	r31, 0xFA	; 250
     624:	e0 81       	ld	r30, Z
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	e6 1b       	sub	r30, r22
     62a:	f1 09       	sbc	r31, r1
     62c:	af 01       	movw	r20, r30
     62e:	12 f4       	brpl	.+4      	; 0x634 <interperetKnob+0x46>
     630:	4f 5f       	subi	r20, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	55 95       	asr	r21
     636:	47 95       	ror	r20
     638:	46 0f       	add	r20, r22
     63a:	a3 51       	subi	r26, 0x13	; 19
     63c:	ba 4f       	sbci	r27, 0xFA	; 250
     63e:	4c 93       	st	X, r20
	
	
	if (select<40)
     640:	98 32       	cpi	r25, 0x28	; 40
     642:	08 f0       	brcs	.+2      	; 0x646 <interperetKnob+0x58>
     644:	13 c2       	rjmp	.+1062   	; 0xa6c <interperetKnob+0x47e>
	{
		uint8_t positionSelect = select%8;
     646:	c9 2f       	mov	r28, r25
     648:	c7 70       	andi	r28, 0x07	; 7
		uint8_t bankSwitch = select/8;
		switch (bankSwitch)
     64a:	96 95       	lsr	r25
     64c:	96 95       	lsr	r25
     64e:	96 95       	lsr	r25
     650:	92 30       	cpi	r25, 0x02	; 2
     652:	09 f4       	brne	.+2      	; 0x656 <interperetKnob+0x68>
     654:	d8 c0       	rjmp	.+432    	; 0x806 <interperetKnob+0x218>
     656:	30 f4       	brcc	.+12     	; 0x664 <interperetKnob+0x76>
     658:	99 23       	and	r25, r25
     65a:	59 f0       	breq	.+22     	; 0x672 <interperetKnob+0x84>
     65c:	91 30       	cpi	r25, 0x01	; 1
     65e:	09 f4       	brne	.+2      	; 0x662 <interperetKnob+0x74>
     660:	95 c0       	rjmp	.+298    	; 0x78c <interperetKnob+0x19e>
     662:	23 c2       	rjmp	.+1094   	; 0xaaa <interperetKnob+0x4bc>
     664:	93 30       	cpi	r25, 0x03	; 3
     666:	09 f4       	brne	.+2      	; 0x66a <interperetKnob+0x7c>
     668:	52 c1       	rjmp	.+676    	; 0x90e <interperetKnob+0x320>
     66a:	94 30       	cpi	r25, 0x04	; 4
     66c:	09 f4       	brne	.+2      	; 0x670 <interperetKnob+0x82>
     66e:	6c c1       	rjmp	.+728    	; 0x948 <interperetKnob+0x35a>
     670:	1c c2       	rjmp	.+1080   	; 0xaaa <interperetKnob+0x4bc>
		{
			
			case 0:; //switch cases are "labels", used for goto stuff. so, you have to end the label before declaring variables. should be fine?
			
			int16_t currentOutVoulume = ((currentPattern.outputLevelMSB[positionSelect]<<8)|(currentPattern.outputLevelLSB[positionSelect])); 
     672:	0c 2f       	mov	r16, r28
     674:	10 e0       	ldi	r17, 0x00	; 0
			//this should be a regular integer between -70 and +10
			int16_t negCheckValue = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     676:	64 2f       	mov	r22, r20
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatsisf>
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	4c e4       	ldi	r20, 0x4C	; 76
     688:	50 e4       	ldi	r21, 0x40	; 64
     68a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__divsf3>
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	4c e8       	ldi	r20, 0x8C	; 140
     694:	52 e4       	ldi	r21, 0x42	; 66
     696:	0e 94 c5 0b 	call	0x178a	; 0x178a <__subsf3>
     69a:	0e 94 92 0c 	call	0x1924	; 0x1924 <__fixsfsi>
     69e:	86 2f       	mov	r24, r22
     6a0:	97 2f       	mov	r25, r23
     6a2:	9c 01       	movw	r18, r24
		switch (bankSwitch)
		{
			
			case 0:; //switch cases are "labels", used for goto stuff. so, you have to end the label before declaring variables. should be fine?
			
			int16_t currentOutVoulume = ((currentPattern.outputLevelMSB[positionSelect]<<8)|(currentPattern.outputLevelLSB[positionSelect])); 
     6a4:	f8 01       	movw	r30, r16
     6a6:	e6 59       	subi	r30, 0x96	; 150
     6a8:	fc 4f       	sbci	r31, 0xFC	; 252
			//this should be a regular integer between -70 and +10
			int16_t negCheckValue = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentOutVoulume!=negCheckValue)
     6aa:	80 81       	ld	r24, Z
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	98 2f       	mov	r25, r24
     6b0:	88 27       	eor	r24, r24
     6b2:	40 85       	ldd	r20, Z+8	; 0x08
     6b4:	84 2b       	or	r24, r20
     6b6:	82 17       	cp	r24, r18
     6b8:	93 07       	cpc	r25, r19
     6ba:	09 f4       	brne	.+2      	; 0x6be <interperetKnob+0xd0>
     6bc:	f6 c1       	rjmp	.+1004   	; 0xaaa <interperetKnob+0x4bc>
			{
				currentPattern.outputLevelLSB[positionSelect] = (negCheckValue);
     6be:	f8 01       	movw	r30, r16
     6c0:	e6 59       	subi	r30, 0x96	; 150
     6c2:	fc 4f       	sbci	r31, 0xFC	; 252
     6c4:	60 87       	std	Z+8, r22	; 0x08
				if(negCheckValue>(-1))
     6c6:	33 23       	and	r19, r19
     6c8:	64 f1       	brlt	.+88     	; 0x722 <interperetKnob+0x134>
				{
					currentPattern.outputLevelMSB[positionSelect] = 0;
     6ca:	f8 01       	movw	r30, r16
     6cc:	e6 59       	subi	r30, 0x96	; 150
     6ce:	fc 4f       	sbci	r31, 0xFC	; 252
     6d0:	10 82       	st	Z, r1
					//just hard coding this for now until we make a function.
					outVolumePrint[14] = 48;
     6d2:	ec e3       	ldi	r30, 0x3C	; 60
     6d4:	f2 e0       	ldi	r31, 0x02	; 2
     6d6:	80 e3       	ldi	r24, 0x30	; 48
     6d8:	86 87       	std	Z+14, r24	; 0x0e
					outVolumePrint[16] = (currentPattern.outputLevelLSB[positionSelect]%10)+48;
     6da:	2d ec       	ldi	r18, 0xCD	; 205
     6dc:	62 9f       	mul	r22, r18
     6de:	81 2d       	mov	r24, r1
     6e0:	11 24       	eor	r1, r1
     6e2:	86 95       	lsr	r24
     6e4:	86 95       	lsr	r24
     6e6:	86 95       	lsr	r24
     6e8:	88 0f       	add	r24, r24
     6ea:	98 2f       	mov	r25, r24
     6ec:	99 0f       	add	r25, r25
     6ee:	99 0f       	add	r25, r25
     6f0:	89 0f       	add	r24, r25
     6f2:	96 2f       	mov	r25, r22
     6f4:	98 1b       	sub	r25, r24
     6f6:	89 2f       	mov	r24, r25
     6f8:	80 5d       	subi	r24, 0xD0	; 208
     6fa:	80 8b       	std	Z+16, r24	; 0x10
					outVolumePrint[15] = ((currentPattern.outputLevelLSB[positionSelect]%100)/10)+48;
     6fc:	89 e2       	ldi	r24, 0x29	; 41
     6fe:	68 9f       	mul	r22, r24
     700:	81 2d       	mov	r24, r1
     702:	11 24       	eor	r1, r1
     704:	82 95       	swap	r24
     706:	8f 70       	andi	r24, 0x0F	; 15
     708:	94 e6       	ldi	r25, 0x64	; 100
     70a:	89 9f       	mul	r24, r25
     70c:	60 19       	sub	r22, r0
     70e:	11 24       	eor	r1, r1
     710:	62 9f       	mul	r22, r18
     712:	61 2d       	mov	r22, r1
     714:	11 24       	eor	r1, r1
     716:	66 95       	lsr	r22
     718:	66 95       	lsr	r22
     71a:	66 95       	lsr	r22
     71c:	60 5d       	subi	r22, 0xD0	; 208
     71e:	67 87       	std	Z+15, r22	; 0x0f
     720:	23 c0       	rjmp	.+70     	; 0x768 <interperetKnob+0x17a>
				}else
				{
					currentPattern.outputLevelMSB[positionSelect] = 255;
     722:	8f ef       	ldi	r24, 0xFF	; 255
     724:	f8 01       	movw	r30, r16
     726:	e6 59       	subi	r30, 0x96	; 150
     728:	fc 4f       	sbci	r31, 0xFC	; 252
     72a:	80 83       	st	Z, r24
					outVolumePrint[14] = '-';
     72c:	ec e3       	ldi	r30, 0x3C	; 60
     72e:	f2 e0       	ldi	r31, 0x02	; 2
     730:	8d e2       	ldi	r24, 0x2D	; 45
     732:	86 87       	std	Z+14, r24	; 0x0e
					outVolumePrint[15] = ((((currentPattern.outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     734:	60 95       	com	r22
     736:	26 2f       	mov	r18, r22
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	2f 5f       	subi	r18, 0xFF	; 255
     73c:	3f 4f       	sbci	r19, 0xFF	; 255
     73e:	c9 01       	movw	r24, r18
     740:	64 e6       	ldi	r22, 0x64	; 100
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__divmodhi4>
     748:	0f 2e       	mov	r0, r31
     74a:	fa e0       	ldi	r31, 0x0A	; 10
     74c:	ef 2e       	mov	r14, r31
     74e:	f1 2c       	mov	r15, r1
     750:	f0 2d       	mov	r31, r0
     752:	b7 01       	movw	r22, r14
     754:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__divmodhi4>
     758:	60 5d       	subi	r22, 0xD0	; 208
     75a:	67 87       	std	Z+15, r22	; 0x0f
					outVolumePrint[16] = (((currentPattern.outputLevelLSB[positionSelect]^255)+1)%10)+48;
     75c:	c9 01       	movw	r24, r18
     75e:	b7 01       	movw	r22, r14
     760:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__divmodhi4>
     764:	80 5d       	subi	r24, 0xD0	; 208
     766:	80 8b       	std	Z+16, r24	; 0x10
				}
				//then output to screen. 
				outVolumePrint[10] = positionSelect + 49;
     768:	cf 5c       	subi	r28, 0xCF	; 207
     76a:	c0 93 46 02 	sts	0x0246, r28	; 0x800246 <outVolumePrint+0xa>
				outputS(outVolumePrint, 3);
     76e:	63 e0       	ldi	r22, 0x03	; 3
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	8c e3       	ldi	r24, 0x3C	; 60
     774:	92 e0       	ldi	r25, 0x02	; 2
     776:	f6 d4       	rcall	.+2540   	; 0x1164 <outputS>
				setOutputVolume(currentPattern.outputLevelLSB[positionSelect], currentPattern.outputLevelMSB[positionSelect], positionSelect);
     778:	f8 01       	movw	r30, r16
     77a:	e6 59       	subi	r30, 0x96	; 150
     77c:	fc 4f       	sbci	r31, 0xFC	; 252
     77e:	60 81       	ld	r22, Z
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	80 85       	ldd	r24, Z+8	; 0x08
     784:	a8 01       	movw	r20, r16
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	96 d7       	rcall	.+3884   	; 0x16b6 <setOutputVolume>
     78a:	8f c1       	rjmp	.+798    	; 0xaaa <interperetKnob+0x4bc>
			}
			break;
			
 			case 1:
 			if(currentPattern.outputPitch[positionSelect]!=(checkBuffer[select]^128))
     78c:	0c 2f       	mov	r16, r28
     78e:	10 e0       	ldi	r17, 0x00	; 0
     790:	60 e8       	ldi	r22, 0x80	; 128
     792:	64 0f       	add	r22, r20
     794:	f8 01       	movw	r30, r16
     796:	e6 59       	subi	r30, 0x96	; 150
     798:	fc 4f       	sbci	r31, 0xFC	; 252
     79a:	80 89       	ldd	r24, Z+16	; 0x10
     79c:	86 17       	cp	r24, r22
     79e:	09 f4       	brne	.+2      	; 0x7a2 <interperetKnob+0x1b4>
     7a0:	84 c1       	rjmp	.+776    	; 0xaaa <interperetKnob+0x4bc>
 			{
 				(currentPattern.outputPitch[positionSelect]) = (checkBuffer[select]^128);
     7a2:	f8 01       	movw	r30, r16
     7a4:	e6 59       	subi	r30, 0x96	; 150
     7a6:	fc 4f       	sbci	r31, 0xFC	; 252
     7a8:	60 8b       	std	Z+16, r22	; 0x10
				 if(encoderAValue == 0)
     7aa:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
     7ae:	81 11       	cpse	r24, r1
     7b0:	20 c0       	rjmp	.+64     	; 0x7f2 <interperetKnob+0x204>
				 {
					 pitchPrint[5] = (positionSelect+49);
     7b2:	cf 5c       	subi	r28, 0xCF	; 207
     7b4:	c0 93 55 02 	sts	0x0255, r28	; 0x800255 <pitchPrint+0x5>
					 if(currentPattern.outputPitch[positionSelect]>>7)
     7b8:	66 23       	and	r22, r22
     7ba:	64 f4       	brge	.+24     	; 0x7d4 <interperetKnob+0x1e6>
					 {
						 //again, hard coding.
						 pitchPrint[7] = '-';
     7bc:	8d e2       	ldi	r24, 0x2D	; 45
     7be:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <pitchPrint+0x7>
						 numPrinter(pitchPrint, 8, 3, (currentPattern.outputPitch[positionSelect]^255));
     7c2:	26 2f       	mov	r18, r22
     7c4:	20 95       	com	r18
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	43 e0       	ldi	r20, 0x03	; 3
     7ca:	68 e0       	ldi	r22, 0x08	; 8
     7cc:	80 e5       	ldi	r24, 0x50	; 80
     7ce:	92 e0       	ldi	r25, 0x02	; 2
     7d0:	e1 d4       	rcall	.+2498   	; 0x1194 <numPrinter>
     7d2:	0a c0       	rjmp	.+20     	; 0x7e8 <interperetKnob+0x1fa>
					 
					 }else{
						 pitchPrint[7] = '+';
     7d4:	8b e2       	ldi	r24, 0x2B	; 43
     7d6:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <pitchPrint+0x7>
					 numPrinter(pitchPrint,8,3,currentPattern.outputPitch[positionSelect]);}
     7da:	26 2f       	mov	r18, r22
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	43 e0       	ldi	r20, 0x03	; 3
     7e0:	68 e0       	ldi	r22, 0x08	; 8
     7e2:	80 e5       	ldi	r24, 0x50	; 80
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	d6 d4       	rcall	.+2476   	; 0x1194 <numPrinter>
					 outputS(pitchPrint, 3);
     7e8:	63 e0       	ldi	r22, 0x03	; 3
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	80 e5       	ldi	r24, 0x50	; 80
     7ee:	92 e0       	ldi	r25, 0x02	; 2
     7f0:	b9 d4       	rcall	.+2418   	; 0x1164 <outputS>
				 }
				 outputSampleRate(positionSelect, 0, currentPattern.outputPitch[positionSelect]);
     7f2:	f8 01       	movw	r30, r16
     7f4:	e6 59       	subi	r30, 0x96	; 150
     7f6:	fc 4f       	sbci	r31, 0xFC	; 252
     7f8:	40 89       	ldd	r20, Z+16	; 0x10
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	c8 01       	movw	r24, r16
     802:	a0 d7       	rcall	.+3904   	; 0x1744 <outputSampleRate>
     804:	52 c1       	rjmp	.+676    	; 0xaaa <interperetKnob+0x4bc>
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     806:	0c 2f       	mov	r16, r28
     808:	10 e0       	ldi	r17, 0x00	; 0
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     80a:	64 2f       	mov	r22, r20
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatsisf>
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	4c e4       	ldi	r20, 0x4C	; 76
     81c:	50 e4       	ldi	r21, 0x40	; 64
     81e:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__divsf3>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	4c e8       	ldi	r20, 0x8C	; 140
     828:	52 e4       	ldi	r21, 0x42	; 66
     82a:	af d7       	rcall	.+3934   	; 0x178a <__subsf3>
     82c:	0e 94 92 0c 	call	0x1924	; 0x1924 <__fixsfsi>
     830:	86 2f       	mov	r24, r22
     832:	97 2f       	mov	r25, r23
     834:	9c 01       	movw	r18, r24
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     836:	a8 01       	movw	r20, r16
     838:	46 59       	subi	r20, 0x96	; 150
     83a:	5c 4f       	sbci	r21, 0xFC	; 252
     83c:	fa 01       	movw	r30, r20
     83e:	e8 5b       	subi	r30, 0xB8	; 184
     840:	ff 4f       	sbci	r31, 0xFF	; 255
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentEnvelopeVolume!=negCheckValueEnvelope)
     842:	80 81       	ld	r24, Z
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	98 2f       	mov	r25, r24
     848:	88 27       	eor	r24, r24
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     84a:	70 96       	adiw	r30, 0x10	; 16
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentEnvelopeVolume!=negCheckValueEnvelope)
     84c:	40 81       	ld	r20, Z
     84e:	84 2b       	or	r24, r20
     850:	82 17       	cp	r24, r18
     852:	93 07       	cpc	r25, r19
     854:	09 f4       	brne	.+2      	; 0x858 <interperetKnob+0x26a>
     856:	29 c1       	rjmp	.+594    	; 0xaaa <interperetKnob+0x4bc>
			{
				currentPattern.trackFadeGainLSB[positionSelect] = (negCheckValueEnvelope);
     858:	f8 01       	movw	r30, r16
     85a:	ee 53       	subi	r30, 0x3E	; 62
     85c:	fc 4f       	sbci	r31, 0xFC	; 252
     85e:	60 83       	st	Z, r22
				if(negCheckValueEnvelope>(-1))
     860:	33 23       	and	r19, r19
     862:	64 f1       	brlt	.+88     	; 0x8bc <interperetKnob+0x2ce>
				{
					currentPattern.trackFadeGainMSB[positionSelect] = 0;
     864:	f8 01       	movw	r30, r16
     866:	ee 54       	subi	r30, 0x4E	; 78
     868:	fc 4f       	sbci	r31, 0xFC	; 252
     86a:	10 82       	st	Z, r1
					//just hard coding this for now until we make a function.
					envelopeLevelPrint[15] = 48;
     86c:	e4 e1       	ldi	r30, 0x14	; 20
     86e:	f2 e0       	ldi	r31, 0x02	; 2
     870:	80 e3       	ldi	r24, 0x30	; 48
     872:	87 87       	std	Z+15, r24	; 0x0f
					envelopeLevelPrint[17] = (currentPattern.trackFadeGainLSB[positionSelect]%10)+48;
     874:	2d ec       	ldi	r18, 0xCD	; 205
     876:	62 9f       	mul	r22, r18
     878:	81 2d       	mov	r24, r1
     87a:	11 24       	eor	r1, r1
     87c:	86 95       	lsr	r24
     87e:	86 95       	lsr	r24
     880:	86 95       	lsr	r24
     882:	88 0f       	add	r24, r24
     884:	98 2f       	mov	r25, r24
     886:	99 0f       	add	r25, r25
     888:	99 0f       	add	r25, r25
     88a:	89 0f       	add	r24, r25
     88c:	96 2f       	mov	r25, r22
     88e:	98 1b       	sub	r25, r24
     890:	89 2f       	mov	r24, r25
     892:	80 5d       	subi	r24, 0xD0	; 208
     894:	81 8b       	std	Z+17, r24	; 0x11
					envelopeLevelPrint[16] = ((currentPattern.trackFadeGainLSB[positionSelect]%100)/10)+48;
     896:	89 e2       	ldi	r24, 0x29	; 41
     898:	68 9f       	mul	r22, r24
     89a:	81 2d       	mov	r24, r1
     89c:	11 24       	eor	r1, r1
     89e:	82 95       	swap	r24
     8a0:	8f 70       	andi	r24, 0x0F	; 15
     8a2:	94 e6       	ldi	r25, 0x64	; 100
     8a4:	89 9f       	mul	r24, r25
     8a6:	60 19       	sub	r22, r0
     8a8:	11 24       	eor	r1, r1
     8aa:	62 9f       	mul	r22, r18
     8ac:	61 2d       	mov	r22, r1
     8ae:	11 24       	eor	r1, r1
     8b0:	66 95       	lsr	r22
     8b2:	66 95       	lsr	r22
     8b4:	66 95       	lsr	r22
     8b6:	60 5d       	subi	r22, 0xD0	; 208
     8b8:	60 8b       	std	Z+16, r22	; 0x10
     8ba:	20 c0       	rjmp	.+64     	; 0x8fc <interperetKnob+0x30e>
				}else
				{
					currentPattern.trackFadeGainMSB[positionSelect] = 255;
     8bc:	f8 01       	movw	r30, r16
     8be:	ee 54       	subi	r30, 0x4E	; 78
     8c0:	fc 4f       	sbci	r31, 0xFC	; 252
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
     8c4:	80 83       	st	Z, r24
					envelopeLevelPrint[15] = '-';
     8c6:	e4 e1       	ldi	r30, 0x14	; 20
     8c8:	f2 e0       	ldi	r31, 0x02	; 2
     8ca:	8d e2       	ldi	r24, 0x2D	; 45
     8cc:	87 87       	std	Z+15, r24	; 0x0f
					envelopeLevelPrint[16] = ((((currentPattern.trackFadeGainLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     8ce:	60 95       	com	r22
     8d0:	26 2f       	mov	r18, r22
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	2f 5f       	subi	r18, 0xFF	; 255
     8d6:	3f 4f       	sbci	r19, 0xFF	; 255
     8d8:	c9 01       	movw	r24, r18
     8da:	64 e6       	ldi	r22, 0x64	; 100
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__divmodhi4>
     8e2:	0a e0       	ldi	r16, 0x0A	; 10
     8e4:	10 e0       	ldi	r17, 0x00	; 0
     8e6:	b8 01       	movw	r22, r16
     8e8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__divmodhi4>
     8ec:	60 5d       	subi	r22, 0xD0	; 208
     8ee:	60 8b       	std	Z+16, r22	; 0x10
					envelopeLevelPrint[17] = (((currentPattern.trackFadeGainLSB[positionSelect]^255)+1)%10)+48;
     8f0:	c9 01       	movw	r24, r18
     8f2:	b8 01       	movw	r22, r16
     8f4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__divmodhi4>
     8f8:	80 5d       	subi	r24, 0xD0	; 208
     8fa:	81 8b       	std	Z+17, r24	; 0x11
				}
				//then output to screen.
				envelopeLevelPrint[13] = positionSelect + 49;
     8fc:	cf 5c       	subi	r28, 0xCF	; 207
     8fe:	c0 93 21 02 	sts	0x0221, r28	; 0x800221 <envelopeLevelPrint+0xd>
				outputS(envelopeLevelPrint, 3);
     902:	63 e0       	ldi	r22, 0x03	; 3
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	84 e1       	ldi	r24, 0x14	; 20
     908:	92 e0       	ldi	r25, 0x02	; 2
     90a:	2c d4       	rcall	.+2136   	; 0x1164 <outputS>
     90c:	ce c0       	rjmp	.+412    	; 0xaaa <interperetKnob+0x4bc>
				//nothing to "set", since envelopes are triggered after a sound is playing.
			}
			break;
 			
 			case 3:
 			if(currentPattern.trackFadeTimeMSB[positionSelect]!=checkBuffer[select])
     90e:	8c 2f       	mov	r24, r28
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	fc 01       	movw	r30, r24
     914:	ee 52       	subi	r30, 0x2E	; 46
     916:	fc 4f       	sbci	r31, 0xFC	; 252
     918:	20 81       	ld	r18, Z
     91a:	42 17       	cp	r20, r18
     91c:	09 f4       	brne	.+2      	; 0x920 <interperetKnob+0x332>
     91e:	c5 c0       	rjmp	.+394    	; 0xaaa <interperetKnob+0x4bc>
 			{
 				(currentPattern.trackFadeTimeMSB[positionSelect]) = checkBuffer[select];
     920:	fc 01       	movw	r30, r24
     922:	ee 52       	subi	r30, 0x2E	; 46
     924:	fc 4f       	sbci	r31, 0xFC	; 252
     926:	40 83       	st	Z, r20
				 numPrinter(envelopeTimePrint,14,4,currentPattern.trackFadeTimeMSB[positionSelect]);
     928:	24 2f       	mov	r18, r20
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	44 e0       	ldi	r20, 0x04	; 4
     92e:	6e e0       	ldi	r22, 0x0E	; 14
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	92 e0       	ldi	r25, 0x02	; 2
     934:	2f d4       	rcall	.+2142   	; 0x1194 <numPrinter>
				 envelopeTimePrint[12] = positionSelect+49;
     936:	cf 5c       	subi	r28, 0xCF	; 207
     938:	c0 93 0c 02 	sts	0x020C, r28	; 0x80020c <__data_start+0xc>
				 outputS(envelopeTimePrint, 3);
     93c:	63 e0       	ldi	r22, 0x03	; 3
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	0f d4       	rcall	.+2078   	; 0x1164 <outputS>
     946:	b1 c0       	rjmp	.+354    	; 0xaaa <interperetKnob+0x4bc>
 			}
 			break;
 			
 			case 4:;
 			int16_t currentTrackVolume = ((currentPattern.trackMainVolumeMSB[positionSelect]<<8)|(currentPattern.trackMainVolumeLSB[positionSelect]));
     948:	0c 2f       	mov	r16, r28
     94a:	10 e0       	ldi	r17, 0x00	; 0
 			int16_t negCheckValueTrack = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     94c:	64 2f       	mov	r22, r20
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatsisf>
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	4c e4       	ldi	r20, 0x4C	; 76
     95e:	50 e4       	ldi	r21, 0x40	; 64
     960:	79 d7       	rcall	.+3826   	; 0x1854 <__divsf3>
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	4c e8       	ldi	r20, 0x8C	; 140
     968:	52 e4       	ldi	r21, 0x42	; 66
     96a:	0f d7       	rcall	.+3614   	; 0x178a <__subsf3>
     96c:	db d7       	rcall	.+4022   	; 0x1924 <__fixsfsi>
     96e:	86 2f       	mov	r24, r22
     970:	97 2f       	mov	r25, r23
     972:	9c 01       	movw	r18, r24
				 outputS(envelopeTimePrint, 3);
 			}
 			break;
 			
 			case 4:;
 			int16_t currentTrackVolume = ((currentPattern.trackMainVolumeMSB[positionSelect]<<8)|(currentPattern.trackMainVolumeLSB[positionSelect]));
     974:	f8 01       	movw	r30, r16
     976:	e6 59       	subi	r30, 0x96	; 150
     978:	fc 4f       	sbci	r31, 0xFC	; 252
 			int16_t negCheckValueTrack = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
 			if(currentTrackVolume!=negCheckValueTrack)
     97a:	80 a5       	ldd	r24, Z+40	; 0x28
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	98 2f       	mov	r25, r24
     980:	88 27       	eor	r24, r24
     982:	40 ad       	ldd	r20, Z+56	; 0x38
     984:	84 2b       	or	r24, r20
     986:	82 17       	cp	r24, r18
     988:	93 07       	cpc	r25, r19
     98a:	09 f4       	brne	.+2      	; 0x98e <interperetKnob+0x3a0>
     98c:	8e c0       	rjmp	.+284    	; 0xaaa <interperetKnob+0x4bc>
 			{
	 			currentPattern.trackMainVolumeLSB[positionSelect] = (negCheckValueTrack);
     98e:	f8 01       	movw	r30, r16
     990:	e6 59       	subi	r30, 0x96	; 150
     992:	fc 4f       	sbci	r31, 0xFC	; 252
     994:	60 af       	std	Z+56, r22	; 0x38
	 			if(negCheckValueTrack>(-1))
     996:	33 23       	and	r19, r19
     998:	64 f1       	brlt	.+88     	; 0x9f2 <interperetKnob+0x404>
	 			{
		 			currentPattern.trackMainVolumeMSB[positionSelect] = 0;
     99a:	f8 01       	movw	r30, r16
     99c:	e6 59       	subi	r30, 0x96	; 150
     99e:	fc 4f       	sbci	r31, 0xFC	; 252
     9a0:	10 a6       	std	Z+40, r1	; 0x28
		 			//just hard coding this for now until we make a function.
		 			trackVolumePrint[15] = 48;
     9a2:	e8 e2       	ldi	r30, 0x28	; 40
     9a4:	f2 e0       	ldi	r31, 0x02	; 2
     9a6:	80 e3       	ldi	r24, 0x30	; 48
     9a8:	87 87       	std	Z+15, r24	; 0x0f
		 			trackVolumePrint[17] = (currentPattern.trackMainVolumeLSB[positionSelect]%10)+48;
     9aa:	2d ec       	ldi	r18, 0xCD	; 205
     9ac:	62 9f       	mul	r22, r18
     9ae:	81 2d       	mov	r24, r1
     9b0:	11 24       	eor	r1, r1
     9b2:	86 95       	lsr	r24
     9b4:	86 95       	lsr	r24
     9b6:	86 95       	lsr	r24
     9b8:	88 0f       	add	r24, r24
     9ba:	98 2f       	mov	r25, r24
     9bc:	99 0f       	add	r25, r25
     9be:	99 0f       	add	r25, r25
     9c0:	89 0f       	add	r24, r25
     9c2:	96 2f       	mov	r25, r22
     9c4:	98 1b       	sub	r25, r24
     9c6:	89 2f       	mov	r24, r25
     9c8:	80 5d       	subi	r24, 0xD0	; 208
     9ca:	81 8b       	std	Z+17, r24	; 0x11
		 			trackVolumePrint[16] = ((currentPattern.trackMainVolumeLSB[positionSelect]%100)/10)+48;
     9cc:	89 e2       	ldi	r24, 0x29	; 41
     9ce:	68 9f       	mul	r22, r24
     9d0:	81 2d       	mov	r24, r1
     9d2:	11 24       	eor	r1, r1
     9d4:	82 95       	swap	r24
     9d6:	8f 70       	andi	r24, 0x0F	; 15
     9d8:	94 e6       	ldi	r25, 0x64	; 100
     9da:	89 9f       	mul	r24, r25
     9dc:	60 19       	sub	r22, r0
     9de:	11 24       	eor	r1, r1
     9e0:	62 9f       	mul	r22, r18
     9e2:	61 2d       	mov	r22, r1
     9e4:	11 24       	eor	r1, r1
     9e6:	66 95       	lsr	r22
     9e8:	66 95       	lsr	r22
     9ea:	66 95       	lsr	r22
     9ec:	60 5d       	subi	r22, 0xD0	; 208
     9ee:	60 8b       	std	Z+16, r22	; 0x10
     9f0:	23 c0       	rjmp	.+70     	; 0xa38 <interperetKnob+0x44a>
	 			}else
	 			{
		 			currentPattern.trackMainVolumeMSB[positionSelect] = 255;
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	f8 01       	movw	r30, r16
     9f6:	e6 59       	subi	r30, 0x96	; 150
     9f8:	fc 4f       	sbci	r31, 0xFC	; 252
     9fa:	80 a7       	std	Z+40, r24	; 0x28
		 			trackVolumePrint[15] = '-';
     9fc:	e8 e2       	ldi	r30, 0x28	; 40
     9fe:	f2 e0       	ldi	r31, 0x02	; 2
     a00:	8d e2       	ldi	r24, 0x2D	; 45
     a02:	87 87       	std	Z+15, r24	; 0x0f
		 			trackVolumePrint[16] = ((((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     a04:	60 95       	com	r22
     a06:	26 2f       	mov	r18, r22
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	2f 5f       	subi	r18, 0xFF	; 255
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	c9 01       	movw	r24, r18
     a10:	64 e6       	ldi	r22, 0x64	; 100
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__divmodhi4>
     a18:	0f 2e       	mov	r0, r31
     a1a:	fa e0       	ldi	r31, 0x0A	; 10
     a1c:	ef 2e       	mov	r14, r31
     a1e:	f1 2c       	mov	r15, r1
     a20:	f0 2d       	mov	r31, r0
     a22:	b7 01       	movw	r22, r14
     a24:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__divmodhi4>
     a28:	60 5d       	subi	r22, 0xD0	; 208
     a2a:	60 8b       	std	Z+16, r22	; 0x10
		 			trackVolumePrint[17] = (((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
     a2c:	c9 01       	movw	r24, r18
     a2e:	b7 01       	movw	r22, r14
     a30:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__divmodhi4>
     a34:	80 5d       	subi	r24, 0xD0	; 208
	 			}
	 			//then output to screen.
	 			trackVolumePrint[11] = positionSelect + 49;
     a36:	81 8b       	std	Z+17, r24	; 0x11
     a38:	cf 5c       	subi	r28, 0xCF	; 207
     a3a:	c0 93 33 02 	sts	0x0233, r28	; 0x800233 <trackVolumePrint+0xb>
	 			outputS(trackVolumePrint, 3);
     a3e:	63 e0       	ldi	r22, 0x03	; 3
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	88 e2       	ldi	r24, 0x28	; 40
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	8e d3       	rcall	.+1820   	; 0x1164 <outputS>
	 			setTrackVolume(currentPattern.trackSampleLSB[positionSelect], currentPattern.trackSampleMSB[positionSelect],
				 currentPattern.trackMainVolumeLSB[positionSelect], currentPattern.trackMainVolumeMSB[positionSelect]);
     a48:	f8 01       	movw	r30, r16
     a4a:	e6 59       	subi	r30, 0x96	; 150
     a4c:	fc 4f       	sbci	r31, 0xFC	; 252
		 			trackVolumePrint[17] = (((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
	 			}
	 			//then output to screen.
	 			trackVolumePrint[11] = positionSelect + 49;
	 			outputS(trackVolumePrint, 3);
	 			setTrackVolume(currentPattern.trackSampleLSB[positionSelect], currentPattern.trackSampleMSB[positionSelect],
     a4e:	20 a5       	ldd	r18, Z+40	; 0x28
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	40 ad       	ldd	r20, Z+56	; 0x38
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	df 01       	movw	r26, r30
     a58:	a8 56       	subi	r26, 0x68	; 104
     a5a:	bf 4f       	sbci	r27, 0xFF	; 255
     a5c:	6c 91       	ld	r22, X
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	e8 55       	subi	r30, 0x58	; 88
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	80 81       	ld	r24, Z
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	49 d6       	rcall	.+3218   	; 0x16fc <setTrackVolume>
     a6a:	1f c0       	rjmp	.+62     	; 0xaaa <interperetKnob+0x4bc>
		}
		
		
	}else
	{
		switch (select)
     a6c:	9a 32       	cpi	r25, 0x2A	; 42
     a6e:	e9 f4       	brne	.+58     	; 0xaaa <interperetKnob+0x4bc>
// 				gpKnob1 = checkValue;
// 			}
// 			break;
// 			
 			case 42:
 			if(currentPattern.patternBPM!=checkBuffer[select]+30)
     a70:	24 2f       	mov	r18, r20
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	22 5e       	subi	r18, 0xE2	; 226
     a76:	3f 4f       	sbci	r19, 0xFF	; 255
     a78:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <currentPattern+0x158>
     a7c:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <currentPattern+0x159>
     a80:	82 17       	cp	r24, r18
     a82:	93 07       	cpc	r25, r19
     a84:	91 f0       	breq	.+36     	; 0xaaa <interperetKnob+0x4bc>
			{
 				currentPattern.patternBPM = checkBuffer[select]+30;
     a86:	30 93 c3 04 	sts	0x04C3, r19	; 0x8004c3 <currentPattern+0x159>
     a8a:	20 93 c2 04 	sts	0x04C2, r18	; 0x8004c2 <currentPattern+0x158>
				if(encoderAValue==0){
     a8e:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
				 numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
     a92:	81 11       	cpse	r24, r1
     a94:	0a c0       	rjmp	.+20     	; 0xaaa <interperetKnob+0x4bc>
     a96:	43 e0       	ldi	r20, 0x03	; 3
     a98:	65 e0       	ldi	r22, 0x05	; 5
     a9a:	8b e6       	ldi	r24, 0x6B	; 107
     a9c:	95 e0       	ldi	r25, 0x05	; 5
				 outputS(screen0[2], 2);
     a9e:	7a d3       	rcall	.+1780   	; 0x1194 <numPrinter>
     aa0:	62 e0       	ldi	r22, 0x02	; 2
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	8b e6       	ldi	r24, 0x6B	; 107
     aa6:	95 e0       	ldi	r25, 0x05	; 5
     aa8:	5d d3       	rcall	.+1722   	; 0x1164 <outputS>
// 			break;
		}
		
	}

}
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	ff 90       	pop	r15
     ab2:	ef 90       	pop	r14
     ab4:	08 95       	ret

00000ab6 <listenKnobs>:

void listenKnobs()
{
     ab6:	cf 93       	push	r28
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     ab8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
     aba:	8c 2f       	mov	r24, r28
     abc:	39 dd       	rcall	.-1422   	; 0x530 <selectKnob>
		updateKnob(loopCounter);
     abe:	8c 2f       	mov	r24, r28
     ac0:	8c dd       	rcall	.-1256   	; 0x5da <updateKnob>
		interperetKnob(loopCounter);
     ac2:	8c 2f       	mov	r24, r28
     ac4:	94 dd       	rcall	.-1240   	; 0x5ee <interperetKnob>
     ac6:	cf 5f       	subi	r28, 0xFF	; 255

}

void listenKnobs()
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     ac8:	cc 32       	cpi	r28, 0x2C	; 44
     aca:	b9 f7       	brne	.-18     	; 0xaba <listenKnobs+0x4>
     acc:	cf 91       	pop	r28
		updateKnob(loopCounter);
		interperetKnob(loopCounter);
	}


}
     ace:	08 95       	ret

00000ad0 <initLEDs>:
#include <avr/io.h>
#include "globalVariables.h"

void initLEDs()
{
	DDRG = 0B00100101; //outputs on G5,2, and 0.
     ad0:	85 e2       	ldi	r24, 0x25	; 37
     ad2:	83 bb       	out	0x13, r24	; 19
     ad4:	08 95       	ret

00000ad6 <updateLEDs>:

}

void updateLEDs()
{
	if(encoderAValue==0){
     ad6:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
     ada:	81 11       	cpse	r24, r1
     adc:	12 c0       	rjmp	.+36     	; 0xb02 <updateLEDs+0x2c>
	uint16_t trigLEDParse = currentTrigButtons;
     ade:	20 91 93 05 	lds	r18, 0x0593	; 0x800593 <currentTrigButtons>
     ae2:	30 91 94 05 	lds	r19, 0x0594	; 0x800594 <currentTrigButtons+0x1>
	PORTG &= (~(1 << PG2)); //set latch low for data input
     ae6:	a2 98       	cbi	0x14, 2	; 20
     ae8:	81 e1       	ldi	r24, 0x11	; 17
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
     aea:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
     aec:	33 23       	and	r19, r19
     aee:	14 f4       	brge	.+4      	; 0xaf4 <updateLEDs+0x1e>
		{
			PORTG |= (1 << PG5); //send current 1's place bit to the data pin 
     af0:	a5 9a       	sbi	0x14, 5	; 20
     af2:	01 c0       	rjmp	.+2      	; 0xaf6 <updateLEDs+0x20>
		}
		else
		{
			PORTG &= (~(1 << PG5));
     af4:	a5 98       	cbi	0x14, 5	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
     af6:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
     af8:	22 0f       	add	r18, r18
     afa:	33 1f       	adc	r19, r19
     afc:	81 50       	subi	r24, 0x01	; 1
void updateLEDs()
{
	if(encoderAValue==0){
	uint16_t trigLEDParse = currentTrigButtons;
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t i = 0; i<17; i++)
     afe:	a9 f7       	brne	.-22     	; 0xaea <updateLEDs+0x14>
			PORTG &= (~(1 << PG5));
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	PORTG |= (1 << PG2); //latch pin high
     b00:	a2 9a       	sbi	0x14, 2	; 20
     b02:	08 95       	ret

00000b04 <main>:
#include <avr/interrupt.h>


int main(void)
{
	midiChannel = 0; //for now, need to change this from load memory
     b04:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <midiChannel>
	initBank();
     b08:	2e dc       	rcall	.-1956   	; 0x366 <initBank>
	initScreen();
     b0a:	cf d2       	rcall	.+1438   	; 0x10aa <initScreen>
	initButtons();
     b0c:	0c db       	rcall	.-2536   	; 0x126 <initButtons>
	initLEDs();
     b0e:	e0 df       	rcall	.-64     	; 0xad0 <initLEDs>
	initEncoders();
     b10:	b5 db       	rcall	.-2198   	; 0x27c <initEncoders>
	initMenu();
     b12:	10 d0       	rcall	.+32     	; 0xb34 <initMenu>
	initADC();
     b14:	f9 dc       	rcall	.-1550   	; 0x508 <initADC>
	serialInit0();
     b16:	7f d5       	rcall	.+2814   	; 0x1616 <serialInit0>
	sei();
	 //this will be necessary on first startup, but maybe not in the actual program? maybe just something handy to have.
	//loadMemory(); //we need to load in the first struct in locarion 0 of our eeprom.
	while (1)
	{
		listenTrigButtons();
     b18:	78 94       	sei
		listenMidi();
     b1a:	0c db       	rcall	.-2536   	; 0x134 <listenTrigButtons>
		listenGPButtons();
     b1c:	23 d2       	rcall	.+1094   	; 0xf64 <listenMidi>
     b1e:	9b db       	rcall	.-2250   	; 0x256 <listenGPButtons>
		listenMidi();
     b20:	21 d2       	rcall	.+1090   	; 0xf64 <listenMidi>
     b22:	d9 df       	rcall	.-78     	; 0xad6 <updateLEDs>
		updateLEDs();
     b24:	1f d2       	rcall	.+1086   	; 0xf64 <listenMidi>
     b26:	dc db       	rcall	.-2120   	; 0x2e0 <listenEncoders>
		listenMidi();
     b28:	1d d2       	rcall	.+1082   	; 0xf64 <listenMidi>
     b2a:	c5 df       	rcall	.-118    	; 0xab6 <listenKnobs>
		listenEncoders();
     b2c:	1b d2       	rcall	.+1078   	; 0xf64 <listenMidi>
     b2e:	42 d0       	rcall	.+132    	; 0xbb4 <updateScreen>
		listenMidi();
     b30:	19 d2       	rcall	.+1074   	; 0xf64 <listenMidi>
     b32:	f3 cf       	rjmp	.-26     	; 0xb1a <main+0x16>

00000b34 <initMenu>:
		listenKnobs();
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
		listenMidi();
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
		//updateSequence();
		updateScreen();
     b3c:	c2 ec       	ldi	r28, 0xC2	; 194
     b3e:	d4 e0       	ldi	r29, 0x04	; 4
		listenMidi();
     b40:	28 81       	ld	r18, Y
     b42:	39 81       	ldd	r19, Y+1	; 0x01
     b44:	43 e0       	ldi	r20, 0x03	; 3


void initMenu()
{

numPrinter(screen0[2],5,3, currentPattern.patternBPM);
     b46:	65 e0       	ldi	r22, 0x05	; 5
     b48:	8b e6       	ldi	r24, 0x6B	; 107
     b4a:	95 e0       	ldi	r25, 0x05	; 5
     b4c:	23 d3       	rcall	.+1606   	; 0x1194 <numPrinter>
numPrinter(screen3[1],14,2, (midiChannel+1));
     b4e:	20 91 95 05 	lds	r18, 0x0595	; 0x800595 <midiChannel>
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	2f 5f       	subi	r18, 0xFF	; 255
     b56:	3f 4f       	sbci	r19, 0xFF	; 255
     b58:	42 e0       	ldi	r20, 0x02	; 2
     b5a:	6e e0       	ldi	r22, 0x0E	; 14
     b5c:	8f e2       	ldi	r24, 0x2F	; 47
     b5e:	96 e0       	ldi	r25, 0x06	; 6
     b60:	19 d3       	rcall	.+1586   	; 0x1194 <numPrinter>
numPrinter(screen0[1], 9, 3, currentPatternNumber);
     b62:	20 91 19 06 	lds	r18, 0x0619	; 0x800619 <currentPatternNumber>
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	43 e0       	ldi	r20, 0x03	; 3
     b6a:	69 e0       	ldi	r22, 0x09	; 9
     b6c:	87 e5       	ldi	r24, 0x57	; 87
     b6e:	95 e0       	ldi	r25, 0x05	; 5
     b70:	11 d3       	rcall	.+1570   	; 0x1194 <numPrinter>
numPrinter(screen1[1], 9, 3, currentPatternNumber);
     b72:	20 91 19 06 	lds	r18, 0x0619	; 0x800619 <currentPatternNumber>
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	43 e0       	ldi	r20, 0x03	; 3
     b7a:	69 e0       	ldi	r22, 0x09	; 9
     b7c:	8b ed       	ldi	r24, 0xDB	; 219
     b7e:	94 e0       	ldi	r25, 0x04	; 4
     b80:	09 d3       	rcall	.+1554   	; 0x1194 <numPrinter>
numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
     b82:	28 81       	ld	r18, Y
     b84:	39 81       	ldd	r19, Y+1	; 0x01
     b86:	43 e0       	ldi	r20, 0x03	; 3
     b88:	65 e0       	ldi	r22, 0x05	; 5
     b8a:	8b e6       	ldi	r24, 0x6B	; 107
     b8c:	95 e0       	ldi	r25, 0x05	; 5
     b8e:	02 d3       	rcall	.+1540   	; 0x1194 <numPrinter>
     b90:	03 e4       	ldi	r16, 0x43	; 67
     b92:	15 e0       	ldi	r17, 0x05	; 5
     b94:	c0 e0       	ldi	r28, 0x00	; 0

for(uint8_t i=0;i<4; i++ ){
	outputS(screen0[i],i);
     b96:	d0 e0       	ldi	r29, 0x00	; 0
     b98:	be 01       	movw	r22, r28
     b9a:	c8 01       	movw	r24, r16
     b9c:	e3 d2       	rcall	.+1478   	; 0x1164 <outputS>
     b9e:	21 96       	adiw	r28, 0x01	; 1
     ba0:	0c 5e       	subi	r16, 0xEC	; 236
     ba2:	1f 4f       	sbci	r17, 0xFF	; 255
numPrinter(screen3[1],14,2, (midiChannel+1));
numPrinter(screen0[1], 9, 3, currentPatternNumber);
numPrinter(screen1[1], 9, 3, currentPatternNumber);
numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);

for(uint8_t i=0;i<4; i++ ){
     ba4:	c4 30       	cpi	r28, 0x04	; 4
     ba6:	d1 05       	cpc	r29, r1
     ba8:	b9 f7       	brne	.-18     	; 0xb98 <initMenu+0x64>
	outputS(screen0[i],i);
}


}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	08 95       	ret

00000bb4 <updateScreen>:

void updateScreen()
{
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
	if(prevEncoderBValue!=encoderBValue)
     bbc:	90 91 e9 05 	lds	r25, 0x05E9	; 0x8005e9 <prevEncoderBValue>
     bc0:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <encoderBValue>
     bc4:	98 17       	cp	r25, r24
     bc6:	09 f4       	brne	.+2      	; 0xbca <updateScreen+0x16>
     bc8:	56 c1       	rjmp	.+684    	; 0xe76 <updateScreen+0x2c2>
	{
		encoderBValue = encoderBValue%4;
     bca:	83 70       	andi	r24, 0x03	; 3
     bcc:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <encoderBValue>
		//this needs some work...
		uint8_t menuMoveArrow = encoderBValue - prevEncoderBValue; //this tells us whether we need to move up or down.
     bd0:	89 1b       	sub	r24, r25
		switch(encoderAValue)
     bd2:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <encoderAValue>
     bd6:	92 30       	cpi	r25, 0x02	; 2
     bd8:	09 f4       	brne	.+2      	; 0xbdc <updateScreen+0x28>
     bda:	72 c0       	rjmp	.+228    	; 0xcc0 <updateScreen+0x10c>
     bdc:	93 30       	cpi	r25, 0x03	; 3
     bde:	09 f4       	brne	.+2      	; 0xbe2 <updateScreen+0x2e>
     be0:	db c0       	rjmp	.+438    	; 0xd98 <updateScreen+0x1e4>
     be2:	91 30       	cpi	r25, 0x01	; 1
     be4:	09 f0       	breq	.+2      	; 0xbe8 <updateScreen+0x34>
     be6:	43 c1       	rjmp	.+646    	; 0xe6e <updateScreen+0x2ba>
		{
			case 1:
			if(menuMoveArrow==1)
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	a1 f5       	brne	.+104    	; 0xc54 <updateScreen+0xa0>
			{
				screen1Index++;
     bec:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <screen1Index>
     bf0:	8f 5f       	subi	r24, 0xFF	; 255
				if(screen1Index>3)
     bf2:	84 30       	cpi	r24, 0x04	; 4
     bf4:	18 f4       	brcc	.+6      	; 0xbfc <updateScreen+0x48>
		switch(encoderAValue)
		{
			case 1:
			if(menuMoveArrow==1)
			{
				screen1Index++;
     bf6:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <screen1Index>
     bfa:	03 c0       	rjmp	.+6      	; 0xc02 <updateScreen+0x4e>
				if(screen1Index>3)
				{
					screen1Index = 3;
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <screen1Index>
				}
				screen1[screen1Index][19] = '<';
     c02:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <screen1Index>
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	c4 e1       	ldi	r28, 0x14	; 20
     c0a:	c6 9f       	mul	r28, r22
     c0c:	c0 01       	movw	r24, r0
     c0e:	c7 9f       	mul	r28, r23
     c10:	90 0d       	add	r25, r0
     c12:	11 24       	eor	r1, r1
     c14:	89 53       	subi	r24, 0x39	; 57
     c16:	9b 4f       	sbci	r25, 0xFB	; 251
     c18:	2c e3       	ldi	r18, 0x3C	; 60
     c1a:	fc 01       	movw	r30, r24
     c1c:	23 8b       	std	Z+19, r18	; 0x13
				screen1[screen1Index-1][19] = ' ';
     c1e:	9b 01       	movw	r18, r22
     c20:	21 50       	subi	r18, 0x01	; 1
     c22:	31 09       	sbc	r19, r1
     c24:	c2 9f       	mul	r28, r18
     c26:	f0 01       	movw	r30, r0
     c28:	c3 9f       	mul	r28, r19
     c2a:	f0 0d       	add	r31, r0
     c2c:	11 24       	eor	r1, r1
     c2e:	e9 53       	subi	r30, 0x39	; 57
     c30:	fb 4f       	sbci	r31, 0xFB	; 251
     c32:	20 e2       	ldi	r18, 0x20	; 32
     c34:	23 8b       	std	Z+19, r18	; 0x13
				outputS(screen1[screen1Index], screen1Index);
     c36:	96 d2       	rcall	.+1324   	; 0x1164 <outputS>
				outputS(screen1[screen1Index-1], screen1Index-1);
     c38:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <screen1Index>
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	61 50       	subi	r22, 0x01	; 1
     c40:	71 09       	sbc	r23, r1
     c42:	c6 9f       	mul	r28, r22
     c44:	c0 01       	movw	r24, r0
     c46:	c7 9f       	mul	r28, r23
     c48:	90 0d       	add	r25, r0
     c4a:	11 24       	eor	r1, r1
     c4c:	89 53       	subi	r24, 0x39	; 57
     c4e:	9b 4f       	sbci	r25, 0xFB	; 251
     c50:	89 d2       	rcall	.+1298   	; 0x1164 <outputS>
     c52:	0d c1       	rjmp	.+538    	; 0xe6e <updateScreen+0x2ba>
			
			
			}else 
			{
				screen1Index--;
     c54:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <screen1Index>
				if(screen1Index>250||screen1Index==0)
     c58:	9e ef       	ldi	r25, 0xFE	; 254
     c5a:	98 0f       	add	r25, r24
     c5c:	9a 3f       	cpi	r25, 0xFA	; 250
     c5e:	20 f4       	brcc	.+8      	; 0xc68 <updateScreen+0xb4>
				outputS(screen1[screen1Index-1], screen1Index-1);
			
			
			}else 
			{
				screen1Index--;
     c60:	81 50       	subi	r24, 0x01	; 1
     c62:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <screen1Index>
     c66:	03 c0       	rjmp	.+6      	; 0xc6e <updateScreen+0xba>
				if(screen1Index>250||screen1Index==0)
				{
					screen1Index = 1;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <screen1Index>
				}
				screen1[screen1Index][19] = '<';
     c6e:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <screen1Index>
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	c4 e1       	ldi	r28, 0x14	; 20
     c76:	c6 9f       	mul	r28, r22
     c78:	c0 01       	movw	r24, r0
     c7a:	c7 9f       	mul	r28, r23
     c7c:	90 0d       	add	r25, r0
     c7e:	11 24       	eor	r1, r1
     c80:	89 53       	subi	r24, 0x39	; 57
     c82:	9b 4f       	sbci	r25, 0xFB	; 251
     c84:	2c e3       	ldi	r18, 0x3C	; 60
     c86:	fc 01       	movw	r30, r24
     c88:	23 8b       	std	Z+19, r18	; 0x13
				screen1[screen1Index+1][19] = ' ';
     c8a:	9b 01       	movw	r18, r22
     c8c:	2f 5f       	subi	r18, 0xFF	; 255
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	c2 9f       	mul	r28, r18
     c92:	f0 01       	movw	r30, r0
     c94:	c3 9f       	mul	r28, r19
     c96:	f0 0d       	add	r31, r0
     c98:	11 24       	eor	r1, r1
     c9a:	e9 53       	subi	r30, 0x39	; 57
     c9c:	fb 4f       	sbci	r31, 0xFB	; 251
     c9e:	20 e2       	ldi	r18, 0x20	; 32
				outputS(screen1[screen1Index], screen1Index);
     ca0:	23 8b       	std	Z+19, r18	; 0x13
     ca2:	60 d2       	rcall	.+1216   	; 0x1164 <outputS>
				outputS(screen1[screen1Index+1], screen1Index+1);
     ca4:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <screen1Index>
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	6f 5f       	subi	r22, 0xFF	; 255
     cac:	7f 4f       	sbci	r23, 0xFF	; 255
     cae:	c6 9f       	mul	r28, r22
     cb0:	c0 01       	movw	r24, r0
     cb2:	c7 9f       	mul	r28, r23
     cb4:	90 0d       	add	r25, r0
     cb6:	11 24       	eor	r1, r1
     cb8:	89 53       	subi	r24, 0x39	; 57
     cba:	9b 4f       	sbci	r25, 0xFB	; 251
     cbc:	53 d2       	rcall	.+1190   	; 0x1164 <outputS>
     cbe:	d7 c0       	rjmp	.+430    	; 0xe6e <updateScreen+0x2ba>
			}
			
			break;
			
			case 2:
			if(menuMoveArrow==1)
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	a1 f5       	brne	.+104    	; 0xd2c <updateScreen+0x178>
			{
				screen2Index++;
     cc4:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <screen2Index>
     cc8:	8f 5f       	subi	r24, 0xFF	; 255
				if(screen2Index>3)
     cca:	84 30       	cpi	r24, 0x04	; 4
     ccc:	18 f4       	brcc	.+6      	; 0xcd4 <updateScreen+0x120>
			break;
			
			case 2:
			if(menuMoveArrow==1)
			{
				screen2Index++;
     cce:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <screen2Index>
     cd2:	03 c0       	rjmp	.+6      	; 0xcda <updateScreen+0x126>
				if(screen2Index>3)
				{
					screen2Index = 3;
     cd4:	83 e0       	ldi	r24, 0x03	; 3
     cd6:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <screen2Index>
				}
				screen2[screen2Index][19] = '<';
     cda:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <screen2Index>
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	c4 e1       	ldi	r28, 0x14	; 20
     ce2:	c6 9f       	mul	r28, r22
     ce4:	c0 01       	movw	r24, r0
     ce6:	c7 9f       	mul	r28, r23
     ce8:	90 0d       	add	r25, r0
     cea:	11 24       	eor	r1, r1
     cec:	89 56       	subi	r24, 0x69	; 105
     cee:	9a 4f       	sbci	r25, 0xFA	; 250
     cf0:	2c e3       	ldi	r18, 0x3C	; 60
     cf2:	fc 01       	movw	r30, r24
     cf4:	23 8b       	std	Z+19, r18	; 0x13
				screen2[screen2Index-1][19] = ' ';
     cf6:	9b 01       	movw	r18, r22
     cf8:	21 50       	subi	r18, 0x01	; 1
     cfa:	31 09       	sbc	r19, r1
     cfc:	c2 9f       	mul	r28, r18
     cfe:	f0 01       	movw	r30, r0
     d00:	c3 9f       	mul	r28, r19
     d02:	f0 0d       	add	r31, r0
     d04:	11 24       	eor	r1, r1
     d06:	e9 56       	subi	r30, 0x69	; 105
     d08:	fa 4f       	sbci	r31, 0xFA	; 250
     d0a:	20 e2       	ldi	r18, 0x20	; 32
				outputS(screen2[screen2Index], screen2Index);
     d0c:	23 8b       	std	Z+19, r18	; 0x13
     d0e:	2a d2       	rcall	.+1108   	; 0x1164 <outputS>
				outputS(screen2[screen2Index-1], screen2Index-1);
     d10:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <screen2Index>
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	61 50       	subi	r22, 0x01	; 1
     d18:	71 09       	sbc	r23, r1
     d1a:	c6 9f       	mul	r28, r22
     d1c:	c0 01       	movw	r24, r0
     d1e:	c7 9f       	mul	r28, r23
     d20:	90 0d       	add	r25, r0
     d22:	11 24       	eor	r1, r1
     d24:	89 56       	subi	r24, 0x69	; 105
     d26:	9a 4f       	sbci	r25, 0xFA	; 250
     d28:	1d d2       	rcall	.+1082   	; 0x1164 <outputS>
     d2a:	a1 c0       	rjmp	.+322    	; 0xe6e <updateScreen+0x2ba>
				
				
			}else
			{
				screen2Index--;
     d2c:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <screen2Index>
				if(screen2Index>250||screen2Index==0) //this should account for any negative numbers from overflow.
     d30:	9e ef       	ldi	r25, 0xFE	; 254
     d32:	98 0f       	add	r25, r24
     d34:	9a 3f       	cpi	r25, 0xFA	; 250
     d36:	20 f4       	brcc	.+8      	; 0xd40 <updateScreen+0x18c>
				outputS(screen2[screen2Index-1], screen2Index-1);
				
				
			}else
			{
				screen2Index--;
     d38:	81 50       	subi	r24, 0x01	; 1
     d3a:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <screen2Index>
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <updateScreen+0x192>
				if(screen2Index>250||screen2Index==0) //this should account for any negative numbers from overflow.
				{
					screen2Index = 1;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <screen2Index>
				}
				screen2[screen2Index][19] = '<';
     d46:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <screen2Index>
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	c4 e1       	ldi	r28, 0x14	; 20
     d4e:	c6 9f       	mul	r28, r22
     d50:	c0 01       	movw	r24, r0
     d52:	c7 9f       	mul	r28, r23
     d54:	90 0d       	add	r25, r0
     d56:	11 24       	eor	r1, r1
     d58:	89 56       	subi	r24, 0x69	; 105
     d5a:	9a 4f       	sbci	r25, 0xFA	; 250
     d5c:	2c e3       	ldi	r18, 0x3C	; 60
     d5e:	fc 01       	movw	r30, r24
     d60:	23 8b       	std	Z+19, r18	; 0x13
				screen2[screen2Index+1][19] = ' ';
     d62:	9b 01       	movw	r18, r22
     d64:	2f 5f       	subi	r18, 0xFF	; 255
     d66:	3f 4f       	sbci	r19, 0xFF	; 255
     d68:	c2 9f       	mul	r28, r18
     d6a:	f0 01       	movw	r30, r0
     d6c:	c3 9f       	mul	r28, r19
     d6e:	f0 0d       	add	r31, r0
     d70:	11 24       	eor	r1, r1
     d72:	e9 56       	subi	r30, 0x69	; 105
     d74:	fa 4f       	sbci	r31, 0xFA	; 250
     d76:	20 e2       	ldi	r18, 0x20	; 32
				outputS(screen2[screen2Index], screen2Index);
     d78:	23 8b       	std	Z+19, r18	; 0x13
     d7a:	f4 d1       	rcall	.+1000   	; 0x1164 <outputS>
				outputS(screen2[screen2Index+1], screen2Index+1);
     d7c:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <screen2Index>
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	6f 5f       	subi	r22, 0xFF	; 255
     d84:	7f 4f       	sbci	r23, 0xFF	; 255
     d86:	c6 9f       	mul	r28, r22
     d88:	c0 01       	movw	r24, r0
     d8a:	c7 9f       	mul	r28, r23
     d8c:	90 0d       	add	r25, r0
     d8e:	11 24       	eor	r1, r1
     d90:	89 56       	subi	r24, 0x69	; 105
     d92:	9a 4f       	sbci	r25, 0xFA	; 250
     d94:	e7 d1       	rcall	.+974    	; 0x1164 <outputS>
     d96:	6b c0       	rjmp	.+214    	; 0xe6e <updateScreen+0x2ba>
			}
			*/
			break;
			
			case 3:
				if(menuMoveArrow==1)
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	a1 f5       	brne	.+104    	; 0xe04 <updateScreen+0x250>
				{
					screen3Index++;
     d9c:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <screen3Index>
     da0:	8f 5f       	subi	r24, 0xFF	; 255
					if(screen3Index>3)
     da2:	84 30       	cpi	r24, 0x04	; 4
     da4:	18 f4       	brcc	.+6      	; 0xdac <updateScreen+0x1f8>
			break;
			
			case 3:
				if(menuMoveArrow==1)
				{
					screen3Index++;
     da6:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <screen3Index>
     daa:	03 c0       	rjmp	.+6      	; 0xdb2 <updateScreen+0x1fe>
					if(screen3Index>3)
					{
						screen3Index = 3;
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <screen3Index>
					}
					screen3[screen3Index][19] = '<';
     db2:	60 91 6b 06 	lds	r22, 0x066B	; 0x80066b <screen3Index>
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	c4 e1       	ldi	r28, 0x14	; 20
     dba:	c6 9f       	mul	r28, r22
     dbc:	c0 01       	movw	r24, r0
     dbe:	c7 9f       	mul	r28, r23
     dc0:	90 0d       	add	r25, r0
     dc2:	11 24       	eor	r1, r1
     dc4:	85 5e       	subi	r24, 0xE5	; 229
     dc6:	99 4f       	sbci	r25, 0xF9	; 249
     dc8:	2c e3       	ldi	r18, 0x3C	; 60
     dca:	fc 01       	movw	r30, r24
     dcc:	23 8b       	std	Z+19, r18	; 0x13
					screen3[screen3Index-1][19] = ' ';
     dce:	9b 01       	movw	r18, r22
     dd0:	21 50       	subi	r18, 0x01	; 1
     dd2:	31 09       	sbc	r19, r1
     dd4:	c2 9f       	mul	r28, r18
     dd6:	f0 01       	movw	r30, r0
     dd8:	c3 9f       	mul	r28, r19
     dda:	f0 0d       	add	r31, r0
     ddc:	11 24       	eor	r1, r1
     dde:	e5 5e       	subi	r30, 0xE5	; 229
     de0:	f9 4f       	sbci	r31, 0xF9	; 249
     de2:	20 e2       	ldi	r18, 0x20	; 32
					outputS(screen3[screen3Index], screen3Index);
     de4:	23 8b       	std	Z+19, r18	; 0x13
     de6:	be d1       	rcall	.+892    	; 0x1164 <outputS>
					outputS(screen3[screen3Index-1], screen3Index-1);
     de8:	60 91 6b 06 	lds	r22, 0x066B	; 0x80066b <screen3Index>
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	61 50       	subi	r22, 0x01	; 1
     df0:	71 09       	sbc	r23, r1
     df2:	c6 9f       	mul	r28, r22
     df4:	c0 01       	movw	r24, r0
     df6:	c7 9f       	mul	r28, r23
     df8:	90 0d       	add	r25, r0
     dfa:	11 24       	eor	r1, r1
     dfc:	85 5e       	subi	r24, 0xE5	; 229
     dfe:	99 4f       	sbci	r25, 0xF9	; 249
     e00:	b1 d1       	rcall	.+866    	; 0x1164 <outputS>
     e02:	35 c0       	rjmp	.+106    	; 0xe6e <updateScreen+0x2ba>
					
					
				}else
				{
					screen3Index--;
     e04:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <screen3Index>
					if(screen3Index>250||screen3Index==0) //this should account for any negative numbers from overflow.
     e08:	9e ef       	ldi	r25, 0xFE	; 254
     e0a:	98 0f       	add	r25, r24
     e0c:	9a 3f       	cpi	r25, 0xFA	; 250
     e0e:	20 f4       	brcc	.+8      	; 0xe18 <updateScreen+0x264>
					outputS(screen3[screen3Index-1], screen3Index-1);
					
					
				}else
				{
					screen3Index--;
     e10:	81 50       	subi	r24, 0x01	; 1
     e12:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <screen3Index>
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <updateScreen+0x26a>
					if(screen3Index>250||screen3Index==0) //this should account for any negative numbers from overflow.
					{
						screen3Index = 1;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <screen3Index>
					}
					screen3[screen3Index][19] = '<';
     e1e:	60 91 6b 06 	lds	r22, 0x066B	; 0x80066b <screen3Index>
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	c4 e1       	ldi	r28, 0x14	; 20
     e26:	c6 9f       	mul	r28, r22
     e28:	c0 01       	movw	r24, r0
     e2a:	c7 9f       	mul	r28, r23
     e2c:	90 0d       	add	r25, r0
     e2e:	11 24       	eor	r1, r1
     e30:	85 5e       	subi	r24, 0xE5	; 229
     e32:	99 4f       	sbci	r25, 0xF9	; 249
     e34:	2c e3       	ldi	r18, 0x3C	; 60
     e36:	fc 01       	movw	r30, r24
     e38:	23 8b       	std	Z+19, r18	; 0x13
					screen3[screen3Index+1][19] = ' ';
     e3a:	9b 01       	movw	r18, r22
     e3c:	2f 5f       	subi	r18, 0xFF	; 255
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	c2 9f       	mul	r28, r18
     e42:	f0 01       	movw	r30, r0
     e44:	c3 9f       	mul	r28, r19
     e46:	f0 0d       	add	r31, r0
     e48:	11 24       	eor	r1, r1
     e4a:	e5 5e       	subi	r30, 0xE5	; 229
     e4c:	f9 4f       	sbci	r31, 0xF9	; 249
     e4e:	20 e2       	ldi	r18, 0x20	; 32
					outputS(screen3[screen3Index], screen3Index);
     e50:	23 8b       	std	Z+19, r18	; 0x13
     e52:	88 d1       	rcall	.+784    	; 0x1164 <outputS>
					outputS(screen3[screen3Index+1], screen3Index+1);
     e54:	60 91 6b 06 	lds	r22, 0x066B	; 0x80066b <screen3Index>
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	6f 5f       	subi	r22, 0xFF	; 255
     e5c:	7f 4f       	sbci	r23, 0xFF	; 255
     e5e:	c6 9f       	mul	r28, r22
     e60:	c0 01       	movw	r24, r0
     e62:	c7 9f       	mul	r28, r23
     e64:	90 0d       	add	r25, r0
     e66:	11 24       	eor	r1, r1
     e68:	85 5e       	subi	r24, 0xE5	; 229
     e6a:	99 4f       	sbci	r25, 0xF9	; 249
     e6c:	7b d1       	rcall	.+758    	; 0x1164 <outputS>
				}
			
			break;
			
		}
		prevEncoderBValue = encoderBValue;
     e6e:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <encoderBValue>
     e72:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <prevEncoderBValue>
	}
	
	//top encoder
	if(prevEncoderAValue!=encoderAValue){
     e76:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
     e7a:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <prevEncoderAValue>
     e7e:	98 17       	cp	r25, r24
     e80:	09 f4       	brne	.+2      	; 0xe84 <updateScreen+0x2d0>
     e82:	6b c0       	rjmp	.+214    	; 0xf5a <updateScreen+0x3a6>
	encoderAValue = encoderAValue%4;
     e84:	83 70       	andi	r24, 0x03	; 3
     e86:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <encoderAValue>
	switch (encoderAValue)
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	09 f1       	breq	.+66     	; 0xed0 <updateScreen+0x31c>
     e8e:	38 f0       	brcs	.+14     	; 0xe9e <updateScreen+0x2ea>
     e90:	82 30       	cpi	r24, 0x02	; 2
     e92:	09 f4       	brne	.+2      	; 0xe96 <updateScreen+0x2e2>
     e94:	3f c0       	rjmp	.+126    	; 0xf14 <updateScreen+0x360>
     e96:	83 30       	cpi	r24, 0x03	; 3
     e98:	09 f4       	brne	.+2      	; 0xe9c <updateScreen+0x2e8>
     e9a:	4c c0       	rjmp	.+152    	; 0xf34 <updateScreen+0x380>
	{
		case 0:
		numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
     e9c:	5a c0       	rjmp	.+180    	; 0xf52 <updateScreen+0x39e>
     e9e:	20 91 c2 04 	lds	r18, 0x04C2	; 0x8004c2 <currentPattern+0x158>
     ea2:	30 91 c3 04 	lds	r19, 0x04C3	; 0x8004c3 <currentPattern+0x159>
     ea6:	43 e0       	ldi	r20, 0x03	; 3
     ea8:	65 e0       	ldi	r22, 0x05	; 5
     eaa:	8b e6       	ldi	r24, 0x6B	; 107
     eac:	95 e0       	ldi	r25, 0x05	; 5
     eae:	72 d1       	rcall	.+740    	; 0x1194 <numPrinter>
     eb0:	03 e4       	ldi	r16, 0x43	; 67
     eb2:	15 e0       	ldi	r17, 0x05	; 5
     eb4:	c0 e0       	ldi	r28, 0x00	; 0
		for(uint8_t i=0;i<4; i++ ){
			outputS(screen0[i],i);
     eb6:	d0 e0       	ldi	r29, 0x00	; 0
     eb8:	be 01       	movw	r22, r28
     eba:	c8 01       	movw	r24, r16
     ebc:	53 d1       	rcall	.+678    	; 0x1164 <outputS>
     ebe:	21 96       	adiw	r28, 0x01	; 1
     ec0:	0c 5e       	subi	r16, 0xEC	; 236
	encoderAValue = encoderAValue%4;
	switch (encoderAValue)
	{
		case 0:
		numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
		for(uint8_t i=0;i<4; i++ ){
     ec2:	1f 4f       	sbci	r17, 0xFF	; 255
     ec4:	c4 30       	cpi	r28, 0x04	; 4
     ec6:	d1 05       	cpc	r29, r1
			outputS(screen0[i],i);
		}
		screen0Index = 0;
     ec8:	b9 f7       	brne	.-18     	; 0xeb8 <updateScreen+0x304>
     eca:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <screen0Index>
		
		break;
		
		case 1:
		numPrinter(screen1[2], 6, 2, currentPattern.numSteps);
     ece:	41 c0       	rjmp	.+130    	; 0xf52 <updateScreen+0x39e>
     ed0:	20 91 c4 04 	lds	r18, 0x04C4	; 0x8004c4 <currentPattern+0x15a>
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	42 e0       	ldi	r20, 0x02	; 2
     ed8:	66 e0       	ldi	r22, 0x06	; 6
     eda:	8f ee       	ldi	r24, 0xEF	; 239
     edc:	94 e0       	ldi	r25, 0x04	; 4
		numPrinter(screen1[3], 13, 2, (currentStep+1));
     ede:	5a d1       	rcall	.+692    	; 0x1194 <numPrinter>
     ee0:	20 91 6f 06 	lds	r18, 0x066F	; 0x80066f <currentStep>
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	2f 5f       	subi	r18, 0xFF	; 255
     ee8:	3f 4f       	sbci	r19, 0xFF	; 255
     eea:	42 e0       	ldi	r20, 0x02	; 2
     eec:	6d e0       	ldi	r22, 0x0D	; 13
     eee:	83 e0       	ldi	r24, 0x03	; 3
     ef0:	95 e0       	ldi	r25, 0x05	; 5
     ef2:	50 d1       	rcall	.+672    	; 0x1194 <numPrinter>
     ef4:	07 ec       	ldi	r16, 0xC7	; 199
     ef6:	14 e0       	ldi	r17, 0x04	; 4
     ef8:	c0 e0       	ldi	r28, 0x00	; 0
		for(uint8_t i=0;i<4; i++ ){
 		outputS(screen1[i],i);
     efa:	d0 e0       	ldi	r29, 0x00	; 0
     efc:	be 01       	movw	r22, r28
     efe:	c8 01       	movw	r24, r16
     f00:	31 d1       	rcall	.+610    	; 0x1164 <outputS>
     f02:	21 96       	adiw	r28, 0x01	; 1
     f04:	0c 5e       	subi	r16, 0xEC	; 236
		break;
		
		case 1:
		numPrinter(screen1[2], 6, 2, currentPattern.numSteps);
		numPrinter(screen1[3], 13, 2, (currentStep+1));
		for(uint8_t i=0;i<4; i++ ){
     f06:	1f 4f       	sbci	r17, 0xFF	; 255
     f08:	c4 30       	cpi	r28, 0x04	; 4
     f0a:	d1 05       	cpc	r29, r1
 		outputS(screen1[i],i);
		}
		screen1Index = 0;
     f0c:	b9 f7       	brne	.-18     	; 0xefc <updateScreen+0x348>
     f0e:	10 92 96 05 	sts	0x0596, r1	; 0x800596 <screen1Index>
 		break;
     f12:	1f c0       	rjmp	.+62     	; 0xf52 <updateScreen+0x39e>
     f14:	07 e9       	ldi	r16, 0x97	; 151
	}
	
	//top encoder
	if(prevEncoderAValue!=encoderAValue){
	encoderAValue = encoderAValue%4;
	switch (encoderAValue)
     f16:	15 e0       	ldi	r17, 0x05	; 5
     f18:	c0 e0       	ldi	r28, 0x00	; 0
		screen1Index = 0;
 		break;
		 
		case 2:
		for(uint8_t i=0;i<4; i++ ){
			outputS(screen2[i],i);
     f1a:	d0 e0       	ldi	r29, 0x00	; 0
     f1c:	be 01       	movw	r22, r28
     f1e:	c8 01       	movw	r24, r16
     f20:	21 d1       	rcall	.+578    	; 0x1164 <outputS>
     f22:	21 96       	adiw	r28, 0x01	; 1
     f24:	0c 5e       	subi	r16, 0xEC	; 236
		}
		screen1Index = 0;
 		break;
		 
		case 2:
		for(uint8_t i=0;i<4; i++ ){
     f26:	1f 4f       	sbci	r17, 0xFF	; 255
     f28:	c4 30       	cpi	r28, 0x04	; 4
     f2a:	d1 05       	cpc	r29, r1
			outputS(screen2[i],i);
		}
		screen2Index = 0;
     f2c:	b9 f7       	brne	.-18     	; 0xf1c <updateScreen+0x368>
     f2e:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <screen2Index>
		break;
     f32:	0f c0       	rjmp	.+30     	; 0xf52 <updateScreen+0x39e>
     f34:	0b e1       	ldi	r16, 0x1B	; 27
	}
	
	//top encoder
	if(prevEncoderAValue!=encoderAValue){
	encoderAValue = encoderAValue%4;
	switch (encoderAValue)
     f36:	16 e0       	ldi	r17, 0x06	; 6
     f38:	c0 e0       	ldi	r28, 0x00	; 0
		screen2Index = 0;
		break;
		 
		case 3:
		for(uint8_t i=0;i<4; i++ ){
			outputS(screen3[i],i);
     f3a:	d0 e0       	ldi	r29, 0x00	; 0
     f3c:	be 01       	movw	r22, r28
     f3e:	c8 01       	movw	r24, r16
     f40:	11 d1       	rcall	.+546    	; 0x1164 <outputS>
     f42:	21 96       	adiw	r28, 0x01	; 1
     f44:	0c 5e       	subi	r16, 0xEC	; 236
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		screen2Index = 0;
		break;
		 
		case 3:
		for(uint8_t i=0;i<4; i++ ){
     f48:	c4 30       	cpi	r28, 0x04	; 4
     f4a:	d1 05       	cpc	r29, r1
     f4c:	b9 f7       	brne	.-18     	; 0xf3c <updateScreen+0x388>
			outputS(screen3[i],i);
		}
		screen3Index = 0;
     f4e:	10 92 6b 06 	sts	0x066B, r1	; 0x80066b <screen3Index>
		break;
		 
		 
	}
	prevEncoderAValue = encoderAValue;
     f52:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
     f56:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <prevEncoderAValue>
	
	}


     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	08 95       	ret

00000f64 <listenMidi>:
uint8_t midiPCCheck = 0;
uint8_t midiOffCheck = 0;


void listenMidi()
{
     f64:	cf 92       	push	r12
     f66:	df 92       	push	r13
     f68:	ef 92       	push	r14
     f6a:	ff 92       	push	r15
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
	midiNoteCheck = (0B10010000|midiChannel);
     f74:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <midiChannel>
     f78:	98 2f       	mov	r25, r24
     f7a:	90 69       	ori	r25, 0x90	; 144
     f7c:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <midiNoteCheck>
	midiCCCheck = (0B10110000|midiChannel);
     f80:	98 2f       	mov	r25, r24
     f82:	90 6b       	ori	r25, 0xB0	; 176
     f84:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <midiCCCheck>
	midiPCCheck = (0B11000000|midiChannel);
     f88:	98 2f       	mov	r25, r24
     f8a:	90 6c       	ori	r25, 0xC0	; 192
     f8c:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <midiPCCheck>
	midiOffCheck = (0B10000000|midiChannel);
     f90:	80 68       	ori	r24, 0x80	; 128
     f92:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <midiOffCheck>
	
	//right now, this is just for testing.
	currentMidiMessage[0] = getChar();
     f96:	55 d3       	rcall	.+1706   	; 0x1642 <getChar>
     f98:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <currentMidiMessage>
	//while(currentMidiMessage[0]==254)
	//{
	//	currentMidiMessage[0]=getChar(); //for now, get rid of midi clock signals
	//}
	if(currentMidiMessage[0]==midiNoteCheck)
     f9c:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <midiNoteCheck>
     fa0:	89 13       	cpse	r24, r25
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
     fa2:	2d c0       	rjmp	.+90     	; 0xffe <listenMidi+0x9a>
     fa4:	4e d3       	rcall	.+1692   	; 0x1642 <getChar>
     fa6:	c0 e6       	ldi	r28, 0x60	; 96
     fa8:	d3 e0       	ldi	r29, 0x03	; 3
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	4a d3       	rcall	.+1684   	; 0x1642 <getChar>
     fae:	8a 83       	std	Y+2, r24	; 0x02
     fb0:	02 eb       	ldi	r16, 0xB2	; 178
     fb2:	14 e0       	ldi	r17, 0x04	; 4
     fb4:	c2 ef       	ldi	r28, 0xF2	; 242
     fb6:	d3 e0       	ldi	r29, 0x03	; 3
     fb8:	0f 2e       	mov	r0, r31
     fba:	f2 e0       	ldi	r31, 0x02	; 2
     fbc:	cf 2e       	mov	r12, r31
     fbe:	f4 e0       	ldi	r31, 0x04	; 4
     fc0:	df 2e       	mov	r13, r31
     fc2:	f0 2d       	mov	r31, r0
		//outputS(printMidiNote, 3);
		
		for(int i=0; i<16; i++)
		{
			//I don't like this forloop, but It seems like the best way to deal with this struct at the moment.
			if((currentPattern.midiTrackNote[i])==(currentMidiMessage[1]))
     fc4:	0f 2e       	mov	r0, r31
     fc6:	f0 e6       	ldi	r31, 0x60	; 96
     fc8:	ef 2e       	mov	r14, r31
     fca:	f3 e0       	ldi	r31, 0x03	; 3
     fcc:	ff 2e       	mov	r15, r31
     fce:	f0 2d       	mov	r31, r0
     fd0:	f8 01       	movw	r30, r16
     fd2:	91 91       	ld	r25, Z+
     fd4:	8f 01       	movw	r16, r30
     fd6:	f7 01       	movw	r30, r14
     fd8:	81 81       	ldd	r24, Z+1	; 0x01
     fda:	98 13       	cpse	r25, r24
     fdc:	0c c0       	rjmp	.+24     	; 0xff6 <listenMidi+0x92>
			trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
     fde:	28 81       	ld	r18, Y
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	fe 01       	movw	r30, r28
     fe4:	e0 57       	subi	r30, 0x70	; 112
     fe6:	f1 09       	sbc	r31, r1
     fe8:	40 81       	ld	r20, Z
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	68 89       	ldd	r22, Y+16	; 0x10
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	88 a1       	ldd	r24, Y+32	; 0x20
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	3b d3       	rcall	.+1654   	; 0x166c <trackControl>
     ff6:	21 96       	adiw	r28, 0x01	; 1
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
		//outputS(printMidiNote, 3);
		
		for(int i=0; i<16; i++)
     ff8:	cc 15       	cp	r28, r12
     ffa:	dd 05       	cpc	r29, r13
     ffc:	49 f7       	brne	.-46     	; 0xfd0 <listenMidi+0x6c>
			if((currentPattern.midiTrackNote[i])==(currentMidiMessage[1]))
			trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
		}
		
	}
	if(currentMidiMessage[0]==midiCCCheck)
     ffe:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <currentMidiMessage>
    1002:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <midiCCCheck>
    1006:	98 13       	cpse	r25, r24
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (control)
    1008:	0b c0       	rjmp	.+22     	; 0x1020 <listenMidi+0xbc>
    100a:	1b d3       	rcall	.+1590   	; 0x1642 <getChar>
    100c:	c0 e6       	ldi	r28, 0x60	; 96
    100e:	d3 e0       	ldi	r29, 0x03	; 3
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	17 d3       	rcall	.+1582   	; 0x1642 <getChar>
		outputS(printMidiCC, 3);
    1014:	8a 83       	std	Y+2, r24	; 0x02
    1016:	63 e0       	ldi	r22, 0x03	; 3
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	8c e8       	ldi	r24, 0x8C	; 140
    101c:	92 e0       	ldi	r25, 0x02	; 2
	
	}
	if(currentMidiMessage[0]==midiPCCheck)
    101e:	a2 d0       	rcall	.+324    	; 0x1164 <outputS>
    1020:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <currentMidiMessage>
    1024:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <midiPCCheck>
    1028:	98 13       	cpse	r25, r24
	{
		currentMidiMessage[1] = getChar(); //this should be a byte1 (progChageNumber)
    102a:	08 c0       	rjmp	.+16     	; 0x103c <listenMidi+0xd8>
    102c:	0a d3       	rcall	.+1556   	; 0x1642 <getChar>
    102e:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <currentMidiMessage+0x1>
		outputS(printMidiPC, 3);
    1032:	63 e0       	ldi	r22, 0x03	; 3
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	88 e7       	ldi	r24, 0x78	; 120
    1038:	92 e0       	ldi	r25, 0x02	; 2
		
	}
	if(currentMidiMessage[0]==midiOffCheck)
    103a:	94 d0       	rcall	.+296    	; 0x1164 <outputS>
    103c:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <currentMidiMessage>
    1040:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <midiOffCheck>
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
    1044:	98 13       	cpse	r25, r24
    1046:	0b c0       	rjmp	.+22     	; 0x105e <listenMidi+0xfa>
    1048:	fc d2       	rcall	.+1528   	; 0x1642 <getChar>
    104a:	c0 e6       	ldi	r28, 0x60	; 96
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
    104c:	d3 e0       	ldi	r29, 0x03	; 3
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	f8 d2       	rcall	.+1520   	; 0x1642 <getChar>
		outputS(blank, 3);
    1052:	8a 83       	std	Y+2, r24	; 0x02
    1054:	63 e0       	ldi	r22, 0x03	; 3
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	84 e6       	ldi	r24, 0x64	; 100
    105a:	92 e0       	ldi	r25, 0x02	; 2
    105c:	83 d0       	rcall	.+262    	; 0x1164 <outputS>
	}



    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	ff 90       	pop	r15
    1068:	ef 90       	pop	r14
    106a:	df 90       	pop	r13
    106c:	cf 90       	pop	r12
    106e:	08 95       	ret

00001070 <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    1070:	e5 e0       	ldi	r30, 0x05	; 5
    1072:	f1 e0       	ldi	r31, 0x01	; 1
    1074:	80 81       	ld	r24, Z
    1076:	82 60       	ori	r24, 0x02	; 2
    1078:	80 83       	st	Z, r24
    107a:	85 e0       	ldi	r24, 0x05	; 5
    107c:	8a 95       	dec	r24
    107e:	f1 f7       	brne	.-4      	; 0x107c <enableCycle+0xc>
    1080:	00 00       	nop
    1082:	80 81       	ld	r24, Z
    1084:	8d 7f       	andi	r24, 0xFD	; 253
    1086:	80 83       	st	Z, r24
    1088:	08 95       	ret

0000108a <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTJ &= 0B11111110; //set our DC pin low, to get ready to write data.
    108a:	e5 e0       	ldi	r30, 0x05	; 5
    108c:	f1 e0       	ldi	r31, 0x01	; 1
    108e:	90 81       	ld	r25, Z
    1090:	9e 7f       	andi	r25, 0xFE	; 254
    1092:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    1094:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTJ &= 0B11111110; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
    1096:	ec cf       	rjmp	.-40     	; 0x1070 <enableCycle>
    1098:	08 95       	ret

0000109a <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTJ |=0B00000001; //set out DC Pin high, so it's ready to write data.
    109a:	e5 e0       	ldi	r30, 0x05	; 5
    109c:	f1 e0       	ldi	r31, 0x01	; 1
    109e:	90 81       	ld	r25, Z
    10a0:	91 60       	ori	r25, 0x01	; 1
    10a2:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    10a4:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTJ |=0B00000001; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
    10a6:	e4 cf       	rjmp	.-56     	; 0x1070 <enableCycle>
    10a8:	08 95       	ret

000010aa <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRJ = 0x03; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
    10aa:	83 e0       	ldi	r24, 0x03	; 3
    10ac:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	DDRC =0xFF; //all pins on the LCD Data Bus.
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	87 b9       	out	0x07, r24	; 7

	
	PORTJ &= 0B11111100;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
    10b4:	e5 e0       	ldi	r30, 0x05	; 5
    10b6:	f1 e0       	ldi	r31, 0x01	; 1
    10b8:	80 81       	ld	r24, Z
    10ba:	8c 7f       	andi	r24, 0xFC	; 252
    10bc:	80 83       	st	Z, r24
	
	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
    10be:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10c0:	8f e1       	ldi	r24, 0x1F	; 31
    10c2:	93 e0       	ldi	r25, 0x03	; 3
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <initScreen+0x1a>
    10c8:	00 c0       	rjmp	.+0      	; 0x10ca <initScreen+0x20>
    10ca:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose
	

	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    10cc:	8a e2       	ldi	r24, 0x2A	; 42
    10ce:	dd df       	rcall	.-70     	; 0x108a <command>
	command(0x71);        // Function selection A:
    10d0:	81 e7       	ldi	r24, 0x71	; 113
    10d2:	db df       	rcall	.-74     	; 0x108a <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
    10d4:	8c e5       	ldi	r24, 0x5C	; 92
    10d6:	e1 df       	rcall	.-62     	; 0x109a <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    10d8:	88 e2       	ldi	r24, 0x28	; 40
    10da:	d7 df       	rcall	.-82     	; 0x108a <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
    10dc:	88 e0       	ldi	r24, 0x08	; 8
    10de:	d5 df       	rcall	.-86     	; 0x108a <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    10e0:	8a e2       	ldi	r24, 0x2A	; 42
    10e2:	d3 df       	rcall	.-90     	; 0x108a <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    10e4:	89 e7       	ldi	r24, 0x79	; 121
    10e6:	d1 df       	rcall	.-94     	; 0x108a <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
    10e8:	85 ed       	ldi	r24, 0xD5	; 213
    10ea:	cf df       	rcall	.-98     	; 0x108a <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
    10ec:	80 e7       	ldi	r24, 0x70	; 112
    10ee:	cd df       	rcall	.-102    	; 0x108a <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    10f0:	88 e7       	ldi	r24, 0x78	; 120
    10f2:	cb df       	rcall	.-106    	; 0x108a <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
    10f4:	89 e0       	ldi	r24, 0x09	; 9
    10f6:	c9 df       	rcall	.-110    	; 0x108a <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
    10f8:	86 e0       	ldi	r24, 0x06	; 6
    10fa:	c7 df       	rcall	.-114    	; 0x108a <command>
	command(0x72);        // Function selection B:
    10fc:	82 e7       	ldi	r24, 0x72	; 114
    10fe:	c5 df       	rcall	.-118    	; 0x108a <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
    1100:	8a e0       	ldi	r24, 0x0A	; 10
    1102:	cb df       	rcall	.-106    	; 0x109a <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    1104:	89 e7       	ldi	r24, 0x79	; 121
    1106:	c1 df       	rcall	.-126    	; 0x108a <command>
	command(0xDA);        // Set SEG pins hardware configuration:
    1108:	8a ed       	ldi	r24, 0xDA	; 218
    110a:	bf df       	rcall	.-130    	; 0x108a <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
    110c:	80 e1       	ldi	r24, 0x10	; 16
    110e:	bd df       	rcall	.-134    	; 0x108a <command>
	command(0xDC);        // Function selection C:
    1110:	8c ed       	ldi	r24, 0xDC	; 220
    1112:	bb df       	rcall	.-138    	; 0x108a <command>
	command(0x00);        //  internal VSL, GPIO input disable
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	b9 df       	rcall	.-142    	; 0x108a <command>
	command(0x81);        // Set contrast control:
    1118:	81 e8       	ldi	r24, 0x81	; 129
    111a:	b7 df       	rcall	.-146    	; 0x108a <command>
    111c:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
    111e:	b5 df       	rcall	.-150    	; 0x108a <command>
    1120:	89 ed       	ldi	r24, 0xD9	; 217
    1122:	b3 df       	rcall	.-154    	; 0x108a <command>
	command(0xD9);        // Set phase length:
    1124:	81 ef       	ldi	r24, 0xF1	; 241
    1126:	b1 df       	rcall	.-158    	; 0x108a <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
    1128:	8b ed       	ldi	r24, 0xDB	; 219
    112a:	af df       	rcall	.-162    	; 0x108a <command>
    112c:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
    112e:	ad df       	rcall	.-166    	; 0x108a <command>
    1130:	88 e7       	ldi	r24, 0x78	; 120
    1132:	ab df       	rcall	.-170    	; 0x108a <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
    1134:	88 e2       	ldi	r24, 0x28	; 40
    1136:	a9 df       	rcall	.-174    	; 0x108a <command>
    1138:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    113a:	a7 df       	rcall	.-178    	; 0x108a <command>
    113c:	8f e3       	ldi	r24, 0x3F	; 63
    113e:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	f1 f7       	brne	.-4      	; 0x1140 <initScreen+0x96>
    1144:	00 c0       	rjmp	.+0      	; 0x1146 <initScreen+0x9c>
	command(0x01);        // Clear display
    1146:	00 00       	nop
    1148:	80 e8       	ldi	r24, 0x80	; 128
    114a:	9f df       	rcall	.-194    	; 0x108a <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    114c:	8c e0       	ldi	r24, 0x0C	; 12
    114e:	9d df       	rcall	.-198    	; 0x108a <command>
    1150:	9f ef       	ldi	r25, 0xFF	; 255
    1152:	24 e3       	ldi	r18, 0x34	; 52
    1154:	8c e0       	ldi	r24, 0x0C	; 12
    1156:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	
	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
    1158:	20 40       	sbci	r18, 0x00	; 0
    115a:	80 40       	sbci	r24, 0x00	; 0
    115c:	e1 f7       	brne	.-8      	; 0x1156 <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
    115e:	00 c0       	rjmp	.+0      	; 0x1160 <initScreen+0xb6>
    1160:	00 00       	nop
    1162:	08 95       	ret

00001164 <outputS>:
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	8c 01       	movw	r16, r24
    116e:	fb 01       	movw	r30, r22
    1170:	ff 27       	eor	r31, r31
    1172:	e0 56       	subi	r30, 0x60	; 96
    1174:	fd 4f       	sbci	r31, 0xFD	; 253
    1176:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;
	
	command(new_line[r]);
    1178:	88 df       	rcall	.-240    	; 0x108a <command>
    117a:	e8 01       	movw	r28, r16
    117c:	0c 5e       	subi	r16, 0xEC	; 236
    117e:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
    1180:	89 91       	ld	r24, Y+
    1182:	8b df       	rcall	.-234    	; 0x109a <data>
	uint8_t r = row;
	uint8_t c = 0;
	
	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
    1184:	c0 17       	cp	r28, r16
    1186:	d1 07       	cpc	r29, r17
    1188:	d9 f7       	brne	.-10     	; 0x1180 <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	08 95       	ret

00001194 <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;
	
	switch(numCharacters)
    119a:	43 30       	cpi	r20, 0x03	; 3
    119c:	09 f4       	brne	.+2      	; 0x11a0 <numPrinter+0xc>
    119e:	51 c0       	rjmp	.+162    	; 0x1242 <numPrinter+0xae>
    11a0:	28 f4       	brcc	.+10     	; 0x11ac <numPrinter+0x18>
    11a2:	41 30       	cpi	r20, 0x01	; 1
    11a4:	51 f0       	breq	.+20     	; 0x11ba <numPrinter+0x26>
    11a6:	42 30       	cpi	r20, 0x02	; 2
    11a8:	21 f1       	breq	.+72     	; 0x11f2 <numPrinter+0x5e>
    11aa:	a2 c1       	rjmp	.+836    	; 0x14f0 <numPrinter+0x35c>
    11ac:	44 30       	cpi	r20, 0x04	; 4
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <numPrinter+0x1e>
    11b0:	8e c0       	rjmp	.+284    	; 0x12ce <numPrinter+0x13a>
    11b2:	45 30       	cpi	r20, 0x05	; 5
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <numPrinter+0x24>
    11b6:	fd c0       	rjmp	.+506    	; 0x13b2 <numPrinter+0x21e>
    11b8:	9b c1       	rjmp	.+822    	; 0x14f0 <numPrinter+0x35c>
		case 0:
		break;
		
		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
    11ba:	ec 01       	movw	r28, r24
    11bc:	c6 0f       	add	r28, r22
    11be:	d1 1d       	adc	r29, r1
    11c0:	ad ec       	ldi	r26, 0xCD	; 205
    11c2:	bc ec       	ldi	r27, 0xCC	; 204
    11c4:	81 d4       	rcall	.+2306   	; 0x1ac8 <__umulhisi3>
    11c6:	96 95       	lsr	r25
    11c8:	87 95       	ror	r24
    11ca:	96 95       	lsr	r25
    11cc:	87 95       	ror	r24
    11ce:	96 95       	lsr	r25
    11d0:	87 95       	ror	r24
    11d2:	9c 01       	movw	r18, r24
    11d4:	22 0f       	add	r18, r18
    11d6:	33 1f       	adc	r19, r19
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	82 0f       	add	r24, r18
    11e6:	93 1f       	adc	r25, r19
    11e8:	e8 1b       	sub	r30, r24
    11ea:	f9 0b       	sbc	r31, r25
    11ec:	e0 5d       	subi	r30, 0xD0	; 208
    11ee:	e8 83       	st	Y, r30
		break;
    11f0:	7f c1       	rjmp	.+766    	; 0x14f0 <numPrinter+0x35c>
		
		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
    11f2:	ec 01       	movw	r28, r24
    11f4:	c6 0f       	add	r28, r22
    11f6:	d1 1d       	adc	r29, r1
    11f8:	ad ec       	ldi	r26, 0xCD	; 205
    11fa:	bc ec       	ldi	r27, 0xCC	; 204
    11fc:	65 d4       	rcall	.+2250   	; 0x1ac8 <__umulhisi3>
    11fe:	96 95       	lsr	r25
    1200:	87 95       	ror	r24
    1202:	96 95       	lsr	r25
    1204:	87 95       	ror	r24
    1206:	96 95       	lsr	r25
    1208:	87 95       	ror	r24
    120a:	9c 01       	movw	r18, r24
    120c:	22 0f       	add	r18, r18
    120e:	33 1f       	adc	r19, r19
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	82 0f       	add	r24, r18
    121e:	93 1f       	adc	r25, r19
    1220:	9f 01       	movw	r18, r30
    1222:	28 1b       	sub	r18, r24
    1224:	39 0b       	sbc	r19, r25
    1226:	c9 01       	movw	r24, r18
    1228:	80 5d       	subi	r24, 0xD0	; 208
    122a:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
    122c:	9f 01       	movw	r18, r30
    122e:	4c d4       	rcall	.+2200   	; 0x1ac8 <__umulhisi3>
    1230:	96 95       	lsr	r25
    1232:	87 95       	ror	r24
    1234:	96 95       	lsr	r25
    1236:	87 95       	ror	r24
    1238:	96 95       	lsr	r25
    123a:	87 95       	ror	r24
    123c:	80 5d       	subi	r24, 0xD0	; 208
    123e:	88 83       	st	Y, r24
    1240:	57 c1       	rjmp	.+686    	; 0x14f0 <numPrinter+0x35c>
		break;
    1242:	ec 01       	movw	r28, r24
		
		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
    1244:	c6 0f       	add	r28, r22
    1246:	d1 1d       	adc	r29, r1
    1248:	ad ec       	ldi	r26, 0xCD	; 205
    124a:	bc ec       	ldi	r27, 0xCC	; 204
    124c:	3d d4       	rcall	.+2170   	; 0x1ac8 <__umulhisi3>
    124e:	96 95       	lsr	r25
    1250:	87 95       	ror	r24
    1252:	96 95       	lsr	r25
    1254:	87 95       	ror	r24
    1256:	96 95       	lsr	r25
    1258:	87 95       	ror	r24
    125a:	9c 01       	movw	r18, r24
    125c:	22 0f       	add	r18, r18
    125e:	33 1f       	adc	r19, r19
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	82 0f       	add	r24, r18
    126e:	93 1f       	adc	r25, r19
    1270:	9f 01       	movw	r18, r30
    1272:	28 1b       	sub	r18, r24
    1274:	39 0b       	sbc	r19, r25
    1276:	c9 01       	movw	r24, r18
    1278:	80 5d       	subi	r24, 0xD0	; 208
    127a:	8a 83       	std	Y+2, r24	; 0x02
    127c:	af 01       	movw	r20, r30
		charArray[(startingPos+1)] = tensPlace;
    127e:	56 95       	lsr	r21
    1280:	47 95       	ror	r20
    1282:	56 95       	lsr	r21
    1284:	47 95       	ror	r20
    1286:	9a 01       	movw	r18, r20
    1288:	ab e7       	ldi	r26, 0x7B	; 123
    128a:	b4 e1       	ldi	r27, 0x14	; 20
    128c:	1d d4       	rcall	.+2106   	; 0x1ac8 <__umulhisi3>
    128e:	96 95       	lsr	r25
    1290:	87 95       	ror	r24
    1292:	64 e6       	ldi	r22, 0x64	; 100
    1294:	68 9f       	mul	r22, r24
    1296:	90 01       	movw	r18, r0
    1298:	69 9f       	mul	r22, r25
    129a:	30 0d       	add	r19, r0
    129c:	11 24       	eor	r1, r1
    129e:	cf 01       	movw	r24, r30
    12a0:	82 1b       	sub	r24, r18
    12a2:	93 0b       	sbc	r25, r19
    12a4:	9c 01       	movw	r18, r24
    12a6:	ad ec       	ldi	r26, 0xCD	; 205
    12a8:	bc ec       	ldi	r27, 0xCC	; 204
    12aa:	0e d4       	rcall	.+2076   	; 0x1ac8 <__umulhisi3>
    12ac:	96 95       	lsr	r25
    12ae:	87 95       	ror	r24
    12b0:	96 95       	lsr	r25
    12b2:	87 95       	ror	r24
    12b4:	96 95       	lsr	r25
    12b6:	87 95       	ror	r24
    12b8:	80 5d       	subi	r24, 0xD0	; 208
    12ba:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
    12bc:	9a 01       	movw	r18, r20
    12be:	ab e7       	ldi	r26, 0x7B	; 123
    12c0:	b4 e1       	ldi	r27, 0x14	; 20
    12c2:	02 d4       	rcall	.+2052   	; 0x1ac8 <__umulhisi3>
    12c4:	96 95       	lsr	r25
    12c6:	87 95       	ror	r24
    12c8:	80 5d       	subi	r24, 0xD0	; 208
    12ca:	88 83       	st	Y, r24
		break;
    12cc:	11 c1       	rjmp	.+546    	; 0x14f0 <numPrinter+0x35c>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
    12ce:	ec 01       	movw	r28, r24
    12d0:	c6 0f       	add	r28, r22
    12d2:	d1 1d       	adc	r29, r1
    12d4:	ad ec       	ldi	r26, 0xCD	; 205
    12d6:	bc ec       	ldi	r27, 0xCC	; 204
    12d8:	f7 d3       	rcall	.+2030   	; 0x1ac8 <__umulhisi3>
    12da:	96 95       	lsr	r25
    12dc:	87 95       	ror	r24
    12de:	96 95       	lsr	r25
    12e0:	87 95       	ror	r24
    12e2:	96 95       	lsr	r25
    12e4:	87 95       	ror	r24
    12e6:	9c 01       	movw	r18, r24
    12e8:	22 0f       	add	r18, r18
    12ea:	33 1f       	adc	r19, r19
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	82 0f       	add	r24, r18
    12fa:	93 1f       	adc	r25, r19
    12fc:	9f 01       	movw	r18, r30
    12fe:	28 1b       	sub	r18, r24
    1300:	39 0b       	sbc	r19, r25
    1302:	c9 01       	movw	r24, r18
    1304:	80 5d       	subi	r24, 0xD0	; 208
    1306:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
    1308:	9f 01       	movw	r18, r30
    130a:	36 95       	lsr	r19
    130c:	27 95       	ror	r18
    130e:	36 95       	lsr	r19
    1310:	27 95       	ror	r18
    1312:	ab e7       	ldi	r26, 0x7B	; 123
    1314:	b4 e1       	ldi	r27, 0x14	; 20
    1316:	d8 d3       	rcall	.+1968   	; 0x1ac8 <__umulhisi3>
    1318:	96 95       	lsr	r25
    131a:	87 95       	ror	r24
    131c:	44 e6       	ldi	r20, 0x64	; 100
    131e:	48 9f       	mul	r20, r24
    1320:	90 01       	movw	r18, r0
    1322:	49 9f       	mul	r20, r25
    1324:	30 0d       	add	r19, r0
    1326:	11 24       	eor	r1, r1
    1328:	cf 01       	movw	r24, r30
    132a:	82 1b       	sub	r24, r18
    132c:	93 0b       	sbc	r25, r19
    132e:	9c 01       	movw	r18, r24
    1330:	ad ec       	ldi	r26, 0xCD	; 205
    1332:	bc ec       	ldi	r27, 0xCC	; 204
    1334:	c9 d3       	rcall	.+1938   	; 0x1ac8 <__umulhisi3>
    1336:	96 95       	lsr	r25
    1338:	87 95       	ror	r24
    133a:	96 95       	lsr	r25
    133c:	87 95       	ror	r24
    133e:	96 95       	lsr	r25
    1340:	87 95       	ror	r24
    1342:	80 5d       	subi	r24, 0xD0	; 208
    1344:	8a 83       	std	Y+2, r24	; 0x02
    1346:	af 01       	movw	r20, r30
		charArray[(startingPos+1)] = hunderedsPlace;
    1348:	56 95       	lsr	r21
    134a:	47 95       	ror	r20
    134c:	56 95       	lsr	r21
    134e:	47 95       	ror	r20
    1350:	56 95       	lsr	r21
    1352:	47 95       	ror	r20
    1354:	9a 01       	movw	r18, r20
    1356:	a5 ec       	ldi	r26, 0xC5	; 197
    1358:	b0 e2       	ldi	r27, 0x20	; 32
    135a:	b6 d3       	rcall	.+1900   	; 0x1ac8 <__umulhisi3>
    135c:	92 95       	swap	r25
    135e:	82 95       	swap	r24
    1360:	8f 70       	andi	r24, 0x0F	; 15
    1362:	89 27       	eor	r24, r25
    1364:	9f 70       	andi	r25, 0x0F	; 15
    1366:	89 27       	eor	r24, r25
    1368:	68 ee       	ldi	r22, 0xE8	; 232
    136a:	73 e0       	ldi	r23, 0x03	; 3
    136c:	86 9f       	mul	r24, r22
    136e:	90 01       	movw	r18, r0
    1370:	87 9f       	mul	r24, r23
    1372:	30 0d       	add	r19, r0
    1374:	96 9f       	mul	r25, r22
    1376:	30 0d       	add	r19, r0
    1378:	11 24       	eor	r1, r1
    137a:	cf 01       	movw	r24, r30
    137c:	82 1b       	sub	r24, r18
    137e:	93 0b       	sbc	r25, r19
    1380:	9c 01       	movw	r18, r24
    1382:	36 95       	lsr	r19
    1384:	27 95       	ror	r18
    1386:	36 95       	lsr	r19
    1388:	27 95       	ror	r18
    138a:	ab e7       	ldi	r26, 0x7B	; 123
    138c:	b4 e1       	ldi	r27, 0x14	; 20
    138e:	9c d3       	rcall	.+1848   	; 0x1ac8 <__umulhisi3>
    1390:	96 95       	lsr	r25
    1392:	87 95       	ror	r24
    1394:	80 5d       	subi	r24, 0xD0	; 208
    1396:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
    1398:	9a 01       	movw	r18, r20
    139a:	a5 ec       	ldi	r26, 0xC5	; 197
    139c:	b0 e2       	ldi	r27, 0x20	; 32
    139e:	94 d3       	rcall	.+1832   	; 0x1ac8 <__umulhisi3>
    13a0:	92 95       	swap	r25
    13a2:	82 95       	swap	r24
    13a4:	8f 70       	andi	r24, 0x0F	; 15
    13a6:	89 27       	eor	r24, r25
    13a8:	9f 70       	andi	r25, 0x0F	; 15
    13aa:	89 27       	eor	r24, r25
    13ac:	80 5d       	subi	r24, 0xD0	; 208
    13ae:	88 83       	st	Y, r24
		break;
    13b0:	9f c0       	rjmp	.+318    	; 0x14f0 <numPrinter+0x35c>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
    13b2:	ec 01       	movw	r28, r24
    13b4:	c6 0f       	add	r28, r22
    13b6:	d1 1d       	adc	r29, r1
    13b8:	ad ec       	ldi	r26, 0xCD	; 205
    13ba:	bc ec       	ldi	r27, 0xCC	; 204
    13bc:	85 d3       	rcall	.+1802   	; 0x1ac8 <__umulhisi3>
    13be:	96 95       	lsr	r25
    13c0:	87 95       	ror	r24
    13c2:	96 95       	lsr	r25
    13c4:	87 95       	ror	r24
    13c6:	96 95       	lsr	r25
    13c8:	87 95       	ror	r24
    13ca:	9c 01       	movw	r18, r24
    13cc:	22 0f       	add	r18, r18
    13ce:	33 1f       	adc	r19, r19
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	82 0f       	add	r24, r18
    13de:	93 1f       	adc	r25, r19
    13e0:	9f 01       	movw	r18, r30
    13e2:	28 1b       	sub	r18, r24
    13e4:	39 0b       	sbc	r19, r25
    13e6:	c9 01       	movw	r24, r18
    13e8:	80 5d       	subi	r24, 0xD0	; 208
    13ea:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
    13ec:	9f 01       	movw	r18, r30
    13ee:	36 95       	lsr	r19
    13f0:	27 95       	ror	r18
    13f2:	36 95       	lsr	r19
    13f4:	27 95       	ror	r18
    13f6:	ab e7       	ldi	r26, 0x7B	; 123
    13f8:	b4 e1       	ldi	r27, 0x14	; 20
    13fa:	66 d3       	rcall	.+1740   	; 0x1ac8 <__umulhisi3>
    13fc:	96 95       	lsr	r25
    13fe:	87 95       	ror	r24
    1400:	44 e6       	ldi	r20, 0x64	; 100
    1402:	48 9f       	mul	r20, r24
    1404:	90 01       	movw	r18, r0
    1406:	49 9f       	mul	r20, r25
    1408:	30 0d       	add	r19, r0
    140a:	11 24       	eor	r1, r1
    140c:	cf 01       	movw	r24, r30
    140e:	82 1b       	sub	r24, r18
    1410:	93 0b       	sbc	r25, r19
    1412:	9c 01       	movw	r18, r24
    1414:	ad ec       	ldi	r26, 0xCD	; 205
    1416:	bc ec       	ldi	r27, 0xCC	; 204
    1418:	57 d3       	rcall	.+1710   	; 0x1ac8 <__umulhisi3>
    141a:	96 95       	lsr	r25
    141c:	87 95       	ror	r24
    141e:	96 95       	lsr	r25
    1420:	87 95       	ror	r24
    1422:	96 95       	lsr	r25
    1424:	87 95       	ror	r24
    1426:	80 5d       	subi	r24, 0xD0	; 208
    1428:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
    142a:	9f 01       	movw	r18, r30
    142c:	36 95       	lsr	r19
    142e:	27 95       	ror	r18
    1430:	36 95       	lsr	r19
    1432:	27 95       	ror	r18
    1434:	36 95       	lsr	r19
    1436:	27 95       	ror	r18
    1438:	a5 ec       	ldi	r26, 0xC5	; 197
    143a:	b0 e2       	ldi	r27, 0x20	; 32
    143c:	45 d3       	rcall	.+1674   	; 0x1ac8 <__umulhisi3>
    143e:	92 95       	swap	r25
    1440:	82 95       	swap	r24
    1442:	8f 70       	andi	r24, 0x0F	; 15
    1444:	89 27       	eor	r24, r25
    1446:	9f 70       	andi	r25, 0x0F	; 15
    1448:	89 27       	eor	r24, r25
    144a:	48 ee       	ldi	r20, 0xE8	; 232
    144c:	53 e0       	ldi	r21, 0x03	; 3
    144e:	84 9f       	mul	r24, r20
    1450:	90 01       	movw	r18, r0
    1452:	85 9f       	mul	r24, r21
    1454:	30 0d       	add	r19, r0
    1456:	94 9f       	mul	r25, r20
    1458:	30 0d       	add	r19, r0
    145a:	11 24       	eor	r1, r1
    145c:	cf 01       	movw	r24, r30
    145e:	82 1b       	sub	r24, r18
    1460:	93 0b       	sbc	r25, r19
    1462:	9c 01       	movw	r18, r24
    1464:	36 95       	lsr	r19
    1466:	27 95       	ror	r18
    1468:	36 95       	lsr	r19
    146a:	27 95       	ror	r18
    146c:	ab e7       	ldi	r26, 0x7B	; 123
    146e:	b4 e1       	ldi	r27, 0x14	; 20
    1470:	2b d3       	rcall	.+1622   	; 0x1ac8 <__umulhisi3>
    1472:	96 95       	lsr	r25
    1474:	87 95       	ror	r24
    1476:	80 5d       	subi	r24, 0xD0	; 208
    1478:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
    147a:	af 01       	movw	r20, r30
    147c:	52 95       	swap	r21
    147e:	42 95       	swap	r20
    1480:	4f 70       	andi	r20, 0x0F	; 15
    1482:	45 27       	eor	r20, r21
    1484:	5f 70       	andi	r21, 0x0F	; 15
    1486:	45 27       	eor	r20, r21
    1488:	9a 01       	movw	r18, r20
    148a:	a7 e4       	ldi	r26, 0x47	; 71
    148c:	b3 e0       	ldi	r27, 0x03	; 3
    148e:	1c d3       	rcall	.+1592   	; 0x1ac8 <__umulhisi3>
    1490:	96 95       	lsr	r25
    1492:	87 95       	ror	r24
    1494:	96 95       	lsr	r25
    1496:	87 95       	ror	r24
    1498:	96 95       	lsr	r25
    149a:	87 95       	ror	r24
    149c:	60 e1       	ldi	r22, 0x10	; 16
    149e:	77 e2       	ldi	r23, 0x27	; 39
    14a0:	86 9f       	mul	r24, r22
    14a2:	90 01       	movw	r18, r0
    14a4:	87 9f       	mul	r24, r23
    14a6:	30 0d       	add	r19, r0
    14a8:	96 9f       	mul	r25, r22
    14aa:	30 0d       	add	r19, r0
    14ac:	11 24       	eor	r1, r1
    14ae:	cf 01       	movw	r24, r30
    14b0:	82 1b       	sub	r24, r18
    14b2:	93 0b       	sbc	r25, r19
    14b4:	9c 01       	movw	r18, r24
    14b6:	36 95       	lsr	r19
    14b8:	27 95       	ror	r18
    14ba:	36 95       	lsr	r19
    14bc:	27 95       	ror	r18
    14be:	36 95       	lsr	r19
    14c0:	27 95       	ror	r18
    14c2:	a5 ec       	ldi	r26, 0xC5	; 197
    14c4:	b0 e2       	ldi	r27, 0x20	; 32
    14c6:	00 d3       	rcall	.+1536   	; 0x1ac8 <__umulhisi3>
    14c8:	92 95       	swap	r25
    14ca:	82 95       	swap	r24
    14cc:	8f 70       	andi	r24, 0x0F	; 15
    14ce:	89 27       	eor	r24, r25
    14d0:	9f 70       	andi	r25, 0x0F	; 15
    14d2:	89 27       	eor	r24, r25
    14d4:	80 5d       	subi	r24, 0xD0	; 208
    14d6:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
    14d8:	9a 01       	movw	r18, r20
    14da:	a7 e4       	ldi	r26, 0x47	; 71
    14dc:	b3 e0       	ldi	r27, 0x03	; 3
    14de:	f4 d2       	rcall	.+1512   	; 0x1ac8 <__umulhisi3>
    14e0:	96 95       	lsr	r25
    14e2:	87 95       	ror	r24
    14e4:	96 95       	lsr	r25
    14e6:	87 95       	ror	r24
    14e8:	96 95       	lsr	r25
    14ea:	87 95       	ror	r24
    14ec:	80 5d       	subi	r24, 0xD0	; 208
    14ee:	88 83       	st	Y, r24
    14f0:	df 91       	pop	r29
		break;
		
	}


    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <__vector_27>:

uint8_t rxReadPosition = 0;
uint8_t rxWritePosition = 0;

ISR (USART0_TX_vect)
{
    14f6:	1f 92       	push	r1
    14f8:	0f 92       	push	r0
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	0f 92       	push	r0
    14fe:	11 24       	eor	r1, r1
    1500:	0b b6       	in	r0, 0x3b	; 59
    1502:	0f 92       	push	r0
    1504:	2f 93       	push	r18
    1506:	3f 93       	push	r19
    1508:	8f 93       	push	r24
    150a:	9f 93       	push	r25
    150c:	ef 93       	push	r30
    150e:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
    1510:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <serialReadPos>
    1514:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <serialReadPos+0x1>
    1518:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <serialWritePos>
    151c:	30 91 66 03 	lds	r19, 0x0366	; 0x800366 <serialWritePos+0x1>
    1520:	82 17       	cp	r24, r18
    1522:	93 07       	cpc	r25, r19
    1524:	b9 f0       	breq	.+46     	; 0x1554 <__vector_27+0x5e>
	{
		UDR0 = serial0Buffer[serialReadPos];
    1526:	fc 01       	movw	r30, r24
    1528:	e0 59       	subi	r30, 0x90	; 144
    152a:	f9 4f       	sbci	r31, 0xF9	; 249
    152c:	80 81       	ld	r24, Z
    152e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
    1532:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <serialReadPos>
    1536:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <serialReadPos+0x1>
    153a:	01 96       	adiw	r24, 0x01	; 1
		
		if(serialReadPos >= TX_BUFFER_SIZE)
    153c:	80 38       	cpi	r24, 0x80	; 128
    153e:	91 05       	cpc	r25, r1
    1540:	2c f4       	brge	.+10     	; 0x154c <__vector_27+0x56>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
    1542:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <serialReadPos+0x1>
    1546:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <serialReadPos>
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <__vector_27+0x5e>
		
		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
    154c:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <serialReadPos+0x1>
    1550:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <serialReadPos>
		}
	}
}
    1554:	ff 91       	pop	r31
    1556:	ef 91       	pop	r30
    1558:	9f 91       	pop	r25
    155a:	8f 91       	pop	r24
    155c:	3f 91       	pop	r19
    155e:	2f 91       	pop	r18
    1560:	0f 90       	pop	r0
    1562:	0b be       	out	0x3b, r0	; 59
    1564:	0f 90       	pop	r0
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	0f 90       	pop	r0
    156a:	1f 90       	pop	r1
    156c:	18 95       	reti

0000156e <__vector_36>:

ISR (USART1_RX_vect)
{
    156e:	1f 92       	push	r1
    1570:	0f 92       	push	r0
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	0f 92       	push	r0
    1576:	11 24       	eor	r1, r1
    1578:	0b b6       	in	r0, 0x3b	; 59
    157a:	0f 92       	push	r0
    157c:	8f 93       	push	r24
    157e:	9f 93       	push	r25
    1580:	ef 93       	push	r30
    1582:	ff 93       	push	r31
		serial1Buffer[rxWritePosition] = UDR1;
    1584:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <rxWritePosition>
    1588:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    158c:	e8 2f       	mov	r30, r24
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	e0 51       	subi	r30, 0x10	; 16
    1592:	f9 4f       	sbci	r31, 0xF9	; 249
    1594:	90 83       	st	Z, r25
		rxWritePosition++;
    1596:	8f 5f       	subi	r24, 0xFF	; 255
	
		if(rxWritePosition>= RX_BUFFER_SIZE)
    1598:	1a f0       	brmi	.+6      	; 0x15a0 <__vector_36+0x32>
}

ISR (USART1_RX_vect)
{
		serial1Buffer[rxWritePosition] = UDR1;
		rxWritePosition++;
    159a:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <rxWritePosition>
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <__vector_36+0x36>
	
		if(rxWritePosition>= RX_BUFFER_SIZE)
		{
			rxWritePosition = 0; //this could cause some issues.
    15a0:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <rxWritePosition>
		}


}
    15a4:	ff 91       	pop	r31
    15a6:	ef 91       	pop	r30
    15a8:	9f 91       	pop	r25
    15aa:	8f 91       	pop	r24
    15ac:	0f 90       	pop	r0
    15ae:	0b be       	out	0x3b, r0	; 59
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	0f 90       	pop	r0
    15b6:	1f 90       	pop	r1
    15b8:	18 95       	reti

000015ba <appendSerial0>:

void appendSerial0(char c)
{
	serial0Buffer[serialWritePos] = c;
    15ba:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <serialWritePos>
    15be:	30 91 66 03 	lds	r19, 0x0366	; 0x800366 <serialWritePos+0x1>
    15c2:	f9 01       	movw	r30, r18
    15c4:	e0 59       	subi	r30, 0x90	; 144
    15c6:	f9 4f       	sbci	r31, 0xF9	; 249
    15c8:	80 83       	st	Z, r24
	serialWritePos++;
    15ca:	2f 5f       	subi	r18, 0xFF	; 255
    15cc:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    15ce:	20 38       	cpi	r18, 0x80	; 128
    15d0:	31 05       	cpc	r19, r1
    15d2:	2c f4       	brge	.+10     	; 0x15de <appendSerial0+0x24>
}

void appendSerial0(char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    15d4:	30 93 66 03 	sts	0x0366, r19	; 0x800366 <serialWritePos+0x1>
    15d8:	20 93 65 03 	sts	0x0365, r18	; 0x800365 <serialWritePos>
    15dc:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    15de:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <serialWritePos+0x1>
    15e2:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <serialWritePos>
    15e6:	08 95       	ret

000015e8 <serialWrite0>:
	}
}

void serialWrite0(char c[])
{
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	ec 01       	movw	r28, r24
    15f2:	8c 01       	movw	r16, r24
    15f4:	06 5f       	subi	r16, 0xF6	; 246
    15f6:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = 0; i<10; i++) //this may need to be 11
	{
		appendSerial0(c[i]);
    15f8:	89 91       	ld	r24, Y+
    15fa:	df df       	rcall	.-66     	; 0x15ba <appendSerial0>
	}
}

void serialWrite0(char c[])
{
	for (uint8_t i = 0; i<10; i++) //this may need to be 11
    15fc:	c0 17       	cp	r28, r16
    15fe:	d1 07       	cpc	r29, r17
    1600:	d9 f7       	brne	.-10     	; 0x15f8 <serialWrite0+0x10>
	{
		appendSerial0(c[i]);
		
	}
	
	if(UCSR0A & (1 << UDRE0))
    1602:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1606:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    1608:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	08 95       	ret

00001616 <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    1616:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    161a:	80 e1       	ldi	r24, 0x10	; 16
    161c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

UBRR1H = (BRCMidi >> 8);
    1620:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
UBRR1L = BRCMidi;
    1624:	8f e1       	ldi	r24, 0x1F	; 31
    1626:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>

UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    162a:	88 e4       	ldi	r24, 0x48	; 72
    162c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    1630:	86 e0       	ldi	r24, 0x06	; 6
    1632:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>


UCSR1B = (1 << RXEN1)  | (1 << RXCIE0);
    1636:	90 e9       	ldi	r25, 0x90	; 144
    1638:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); //8 bit chars will be sent
    163c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1640:	08 95       	ret

00001642 <getChar>:

char getChar()
{
	char returnMe = '\0';
	
	if(rxReadPosition != rxWritePosition)
    1642:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <rxReadPosition>
    1646:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <rxWritePosition>
    164a:	98 17       	cp	r25, r24
    164c:	69 f0       	breq	.+26     	; 0x1668 <getChar+0x26>
	{
		returnMe = serial1Buffer[rxReadPosition];
    164e:	e9 2f       	mov	r30, r25
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	e0 51       	subi	r30, 0x10	; 16
    1654:	f9 4f       	sbci	r31, 0xF9	; 249
    1656:	80 81       	ld	r24, Z
		
		rxReadPosition++;
    1658:	9f 5f       	subi	r25, 0xFF	; 255
		
		if(rxReadPosition >= RX_BUFFER_SIZE)
    165a:	1a f0       	brmi	.+6      	; 0x1662 <getChar+0x20>
	
	if(rxReadPosition != rxWritePosition)
	{
		returnMe = serial1Buffer[rxReadPosition];
		
		rxReadPosition++;
    165c:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <rxReadPosition>
    1660:	08 95       	ret
		
		if(rxReadPosition >= RX_BUFFER_SIZE)
		{
			rxReadPosition = 0;
    1662:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <rxReadPosition>
    1666:	08 95       	ret

}

char getChar()
{
	char returnMe = '\0';
    1668:	80 e0       	ldi	r24, 0x00	; 0
		}
	
	}
	return returnMe;
	
    166a:	08 95       	ret

0000166c <trackControl>:
void resumeAll()
{
	char resumePlay[5] = {0xf0, 0xaa, 0x05, 0x0b, 0x55};
	serialWrite0(resumePlay);
	
}
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	2a 97       	sbiw	r28, 0x0a	; 10
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	90 ef       	ldi	r25, 0xF0	; 240
    1682:	99 83       	std	Y+1, r25	; 0x01
    1684:	9a ea       	ldi	r25, 0xAA	; 170
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	9a e0       	ldi	r25, 0x0A	; 10
    168a:	9b 83       	std	Y+3, r25	; 0x03
    168c:	93 e0       	ldi	r25, 0x03	; 3
    168e:	9c 83       	std	Y+4, r25	; 0x04
    1690:	2d 83       	std	Y+5, r18	; 0x05
    1692:	8e 83       	std	Y+6, r24	; 0x06
    1694:	6f 83       	std	Y+7, r22	; 0x07
    1696:	48 87       	std	Y+8, r20	; 0x08
    1698:	19 86       	std	Y+9, r1	; 0x09
    169a:	85 e5       	ldi	r24, 0x55	; 85
    169c:	8a 87       	std	Y+10, r24	; 0x0a
    169e:	ce 01       	movw	r24, r28
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	a2 df       	rcall	.-188    	; 0x15e8 <serialWrite0>
    16a4:	2a 96       	adiw	r28, 0x0a	; 10
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	08 95       	ret

000016b6 <setOutputVolume>:
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	28 97       	sbiw	r28, 0x08	; 8
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	90 ef       	ldi	r25, 0xF0	; 240
    16cc:	99 83       	std	Y+1, r25	; 0x01
    16ce:	9a ea       	ldi	r25, 0xAA	; 170
    16d0:	9a 83       	std	Y+2, r25	; 0x02
    16d2:	98 e0       	ldi	r25, 0x08	; 8
    16d4:	9b 83       	std	Y+3, r25	; 0x03
    16d6:	95 e0       	ldi	r25, 0x05	; 5
    16d8:	9c 83       	std	Y+4, r25	; 0x04
    16da:	4d 83       	std	Y+5, r20	; 0x05
    16dc:	8e 83       	std	Y+6, r24	; 0x06
    16de:	6f 83       	std	Y+7, r22	; 0x07
    16e0:	85 e5       	ldi	r24, 0x55	; 85
    16e2:	88 87       	std	Y+8, r24	; 0x08
    16e4:	ce 01       	movw	r24, r28
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	7f df       	rcall	.-258    	; 0x15e8 <serialWrite0>
    16ea:	28 96       	adiw	r28, 0x08	; 8
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	08 95       	ret

000016fc <setTrackVolume>:
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	29 97       	sbiw	r28, 0x09	; 9
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	90 ef       	ldi	r25, 0xF0	; 240
    1712:	99 83       	std	Y+1, r25	; 0x01
    1714:	9a ea       	ldi	r25, 0xAA	; 170
    1716:	9a 83       	std	Y+2, r25	; 0x02
    1718:	99 e0       	ldi	r25, 0x09	; 9
    171a:	9b 83       	std	Y+3, r25	; 0x03
    171c:	98 e0       	ldi	r25, 0x08	; 8
    171e:	9c 83       	std	Y+4, r25	; 0x04
    1720:	8d 83       	std	Y+5, r24	; 0x05
    1722:	6e 83       	std	Y+6, r22	; 0x06
    1724:	4f 83       	std	Y+7, r20	; 0x07
    1726:	28 87       	std	Y+8, r18	; 0x08
    1728:	85 e5       	ldi	r24, 0x55	; 85
    172a:	89 87       	std	Y+9, r24	; 0x09
    172c:	ce 01       	movw	r24, r28
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	5b df       	rcall	.-330    	; 0x15e8 <serialWrite0>
    1732:	29 96       	adiw	r28, 0x09	; 9
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <outputSampleRate>:

void outputSampleRate(uint8_t outputSelect, uint8_t offsetLSB, uint8_t offsetMSB)
{
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	28 97       	sbiw	r28, 0x08	; 8
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
	char pitchChange[8] = {0xf0, 0xaa, 0x08, 0x0c, outputSelect, offsetLSB, offsetMSB, 0x55};
    1758:	90 ef       	ldi	r25, 0xF0	; 240
    175a:	99 83       	std	Y+1, r25	; 0x01
    175c:	9a ea       	ldi	r25, 0xAA	; 170
    175e:	9a 83       	std	Y+2, r25	; 0x02
    1760:	98 e0       	ldi	r25, 0x08	; 8
    1762:	9b 83       	std	Y+3, r25	; 0x03
    1764:	9c e0       	ldi	r25, 0x0C	; 12
    1766:	9c 83       	std	Y+4, r25	; 0x04
    1768:	8d 83       	std	Y+5, r24	; 0x05
    176a:	6e 83       	std	Y+6, r22	; 0x06
    176c:	4f 83       	std	Y+7, r20	; 0x07
    176e:	85 e5       	ldi	r24, 0x55	; 85
    1770:	88 87       	std	Y+8, r24	; 0x08
	serialWrite0(pitchChange);
    1772:	ce 01       	movw	r24, r28
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	38 df       	rcall	.-400    	; 0x15e8 <serialWrite0>
}
    1778:	28 96       	adiw	r28, 0x08	; 8
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	08 95       	ret

0000178a <__subsf3>:
    178a:	50 58       	subi	r21, 0x80	; 128

0000178c <__addsf3>:
    178c:	bb 27       	eor	r27, r27
    178e:	aa 27       	eor	r26, r26
    1790:	0e d0       	rcall	.+28     	; 0x17ae <__addsf3x>
    1792:	4d c1       	rjmp	.+666    	; 0x1a2e <__fp_round>
    1794:	3e d1       	rcall	.+636    	; 0x1a12 <__fp_pscA>
    1796:	30 f0       	brcs	.+12     	; 0x17a4 <__addsf3+0x18>
    1798:	43 d1       	rcall	.+646    	; 0x1a20 <__fp_pscB>
    179a:	20 f0       	brcs	.+8      	; 0x17a4 <__addsf3+0x18>
    179c:	31 f4       	brne	.+12     	; 0x17aa <__addsf3+0x1e>
    179e:	9f 3f       	cpi	r25, 0xFF	; 255
    17a0:	11 f4       	brne	.+4      	; 0x17a6 <__addsf3+0x1a>
    17a2:	1e f4       	brtc	.+6      	; 0x17aa <__addsf3+0x1e>
    17a4:	33 c1       	rjmp	.+614    	; 0x1a0c <__fp_nan>
    17a6:	0e f4       	brtc	.+2      	; 0x17aa <__addsf3+0x1e>
    17a8:	e0 95       	com	r30
    17aa:	e7 fb       	bst	r30, 7
    17ac:	29 c1       	rjmp	.+594    	; 0x1a00 <__fp_inf>

000017ae <__addsf3x>:
    17ae:	e9 2f       	mov	r30, r25
    17b0:	4f d1       	rcall	.+670    	; 0x1a50 <__fp_split3>
    17b2:	80 f3       	brcs	.-32     	; 0x1794 <__addsf3+0x8>
    17b4:	ba 17       	cp	r27, r26
    17b6:	62 07       	cpc	r22, r18
    17b8:	73 07       	cpc	r23, r19
    17ba:	84 07       	cpc	r24, r20
    17bc:	95 07       	cpc	r25, r21
    17be:	18 f0       	brcs	.+6      	; 0x17c6 <__addsf3x+0x18>
    17c0:	71 f4       	brne	.+28     	; 0x17de <__addsf3x+0x30>
    17c2:	9e f5       	brtc	.+102    	; 0x182a <__addsf3x+0x7c>
    17c4:	67 c1       	rjmp	.+718    	; 0x1a94 <__fp_zero>
    17c6:	0e f4       	brtc	.+2      	; 0x17ca <__addsf3x+0x1c>
    17c8:	e0 95       	com	r30
    17ca:	0b 2e       	mov	r0, r27
    17cc:	ba 2f       	mov	r27, r26
    17ce:	a0 2d       	mov	r26, r0
    17d0:	0b 01       	movw	r0, r22
    17d2:	b9 01       	movw	r22, r18
    17d4:	90 01       	movw	r18, r0
    17d6:	0c 01       	movw	r0, r24
    17d8:	ca 01       	movw	r24, r20
    17da:	a0 01       	movw	r20, r0
    17dc:	11 24       	eor	r1, r1
    17de:	ff 27       	eor	r31, r31
    17e0:	59 1b       	sub	r21, r25
    17e2:	99 f0       	breq	.+38     	; 0x180a <__addsf3x+0x5c>
    17e4:	59 3f       	cpi	r21, 0xF9	; 249
    17e6:	50 f4       	brcc	.+20     	; 0x17fc <__addsf3x+0x4e>
    17e8:	50 3e       	cpi	r21, 0xE0	; 224
    17ea:	68 f1       	brcs	.+90     	; 0x1846 <__addsf3x+0x98>
    17ec:	1a 16       	cp	r1, r26
    17ee:	f0 40       	sbci	r31, 0x00	; 0
    17f0:	a2 2f       	mov	r26, r18
    17f2:	23 2f       	mov	r18, r19
    17f4:	34 2f       	mov	r19, r20
    17f6:	44 27       	eor	r20, r20
    17f8:	58 5f       	subi	r21, 0xF8	; 248
    17fa:	f3 cf       	rjmp	.-26     	; 0x17e2 <__addsf3x+0x34>
    17fc:	46 95       	lsr	r20
    17fe:	37 95       	ror	r19
    1800:	27 95       	ror	r18
    1802:	a7 95       	ror	r26
    1804:	f0 40       	sbci	r31, 0x00	; 0
    1806:	53 95       	inc	r21
    1808:	c9 f7       	brne	.-14     	; 0x17fc <__addsf3x+0x4e>
    180a:	7e f4       	brtc	.+30     	; 0x182a <__addsf3x+0x7c>
    180c:	1f 16       	cp	r1, r31
    180e:	ba 0b       	sbc	r27, r26
    1810:	62 0b       	sbc	r22, r18
    1812:	73 0b       	sbc	r23, r19
    1814:	84 0b       	sbc	r24, r20
    1816:	ba f0       	brmi	.+46     	; 0x1846 <__addsf3x+0x98>
    1818:	91 50       	subi	r25, 0x01	; 1
    181a:	a1 f0       	breq	.+40     	; 0x1844 <__addsf3x+0x96>
    181c:	ff 0f       	add	r31, r31
    181e:	bb 1f       	adc	r27, r27
    1820:	66 1f       	adc	r22, r22
    1822:	77 1f       	adc	r23, r23
    1824:	88 1f       	adc	r24, r24
    1826:	c2 f7       	brpl	.-16     	; 0x1818 <__addsf3x+0x6a>
    1828:	0e c0       	rjmp	.+28     	; 0x1846 <__addsf3x+0x98>
    182a:	ba 0f       	add	r27, r26
    182c:	62 1f       	adc	r22, r18
    182e:	73 1f       	adc	r23, r19
    1830:	84 1f       	adc	r24, r20
    1832:	48 f4       	brcc	.+18     	; 0x1846 <__addsf3x+0x98>
    1834:	87 95       	ror	r24
    1836:	77 95       	ror	r23
    1838:	67 95       	ror	r22
    183a:	b7 95       	ror	r27
    183c:	f7 95       	ror	r31
    183e:	9e 3f       	cpi	r25, 0xFE	; 254
    1840:	08 f0       	brcs	.+2      	; 0x1844 <__addsf3x+0x96>
    1842:	b3 cf       	rjmp	.-154    	; 0x17aa <__addsf3+0x1e>
    1844:	93 95       	inc	r25
    1846:	88 0f       	add	r24, r24
    1848:	08 f0       	brcs	.+2      	; 0x184c <__addsf3x+0x9e>
    184a:	99 27       	eor	r25, r25
    184c:	ee 0f       	add	r30, r30
    184e:	97 95       	ror	r25
    1850:	87 95       	ror	r24
    1852:	08 95       	ret

00001854 <__divsf3>:
    1854:	0c d0       	rcall	.+24     	; 0x186e <__divsf3x>
    1856:	eb c0       	rjmp	.+470    	; 0x1a2e <__fp_round>
    1858:	e3 d0       	rcall	.+454    	; 0x1a20 <__fp_pscB>
    185a:	40 f0       	brcs	.+16     	; 0x186c <__divsf3+0x18>
    185c:	da d0       	rcall	.+436    	; 0x1a12 <__fp_pscA>
    185e:	30 f0       	brcs	.+12     	; 0x186c <__divsf3+0x18>
    1860:	21 f4       	brne	.+8      	; 0x186a <__divsf3+0x16>
    1862:	5f 3f       	cpi	r21, 0xFF	; 255
    1864:	19 f0       	breq	.+6      	; 0x186c <__divsf3+0x18>
    1866:	cc c0       	rjmp	.+408    	; 0x1a00 <__fp_inf>
    1868:	51 11       	cpse	r21, r1
    186a:	15 c1       	rjmp	.+554    	; 0x1a96 <__fp_szero>
    186c:	cf c0       	rjmp	.+414    	; 0x1a0c <__fp_nan>

0000186e <__divsf3x>:
    186e:	f0 d0       	rcall	.+480    	; 0x1a50 <__fp_split3>
    1870:	98 f3       	brcs	.-26     	; 0x1858 <__divsf3+0x4>

00001872 <__divsf3_pse>:
    1872:	99 23       	and	r25, r25
    1874:	c9 f3       	breq	.-14     	; 0x1868 <__divsf3+0x14>
    1876:	55 23       	and	r21, r21
    1878:	b1 f3       	breq	.-20     	; 0x1866 <__divsf3+0x12>
    187a:	95 1b       	sub	r25, r21
    187c:	55 0b       	sbc	r21, r21
    187e:	bb 27       	eor	r27, r27
    1880:	aa 27       	eor	r26, r26
    1882:	62 17       	cp	r22, r18
    1884:	73 07       	cpc	r23, r19
    1886:	84 07       	cpc	r24, r20
    1888:	38 f0       	brcs	.+14     	; 0x1898 <__divsf3_pse+0x26>
    188a:	9f 5f       	subi	r25, 0xFF	; 255
    188c:	5f 4f       	sbci	r21, 0xFF	; 255
    188e:	22 0f       	add	r18, r18
    1890:	33 1f       	adc	r19, r19
    1892:	44 1f       	adc	r20, r20
    1894:	aa 1f       	adc	r26, r26
    1896:	a9 f3       	breq	.-22     	; 0x1882 <__divsf3_pse+0x10>
    1898:	33 d0       	rcall	.+102    	; 0x1900 <__divsf3_pse+0x8e>
    189a:	0e 2e       	mov	r0, r30
    189c:	3a f0       	brmi	.+14     	; 0x18ac <__divsf3_pse+0x3a>
    189e:	e0 e8       	ldi	r30, 0x80	; 128
    18a0:	30 d0       	rcall	.+96     	; 0x1902 <__divsf3_pse+0x90>
    18a2:	91 50       	subi	r25, 0x01	; 1
    18a4:	50 40       	sbci	r21, 0x00	; 0
    18a6:	e6 95       	lsr	r30
    18a8:	00 1c       	adc	r0, r0
    18aa:	ca f7       	brpl	.-14     	; 0x189e <__divsf3_pse+0x2c>
    18ac:	29 d0       	rcall	.+82     	; 0x1900 <__divsf3_pse+0x8e>
    18ae:	fe 2f       	mov	r31, r30
    18b0:	27 d0       	rcall	.+78     	; 0x1900 <__divsf3_pse+0x8e>
    18b2:	66 0f       	add	r22, r22
    18b4:	77 1f       	adc	r23, r23
    18b6:	88 1f       	adc	r24, r24
    18b8:	bb 1f       	adc	r27, r27
    18ba:	26 17       	cp	r18, r22
    18bc:	37 07       	cpc	r19, r23
    18be:	48 07       	cpc	r20, r24
    18c0:	ab 07       	cpc	r26, r27
    18c2:	b0 e8       	ldi	r27, 0x80	; 128
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <__divsf3_pse+0x56>
    18c6:	bb 0b       	sbc	r27, r27
    18c8:	80 2d       	mov	r24, r0
    18ca:	bf 01       	movw	r22, r30
    18cc:	ff 27       	eor	r31, r31
    18ce:	93 58       	subi	r25, 0x83	; 131
    18d0:	5f 4f       	sbci	r21, 0xFF	; 255
    18d2:	2a f0       	brmi	.+10     	; 0x18de <__divsf3_pse+0x6c>
    18d4:	9e 3f       	cpi	r25, 0xFE	; 254
    18d6:	51 05       	cpc	r21, r1
    18d8:	68 f0       	brcs	.+26     	; 0x18f4 <__divsf3_pse+0x82>
    18da:	92 c0       	rjmp	.+292    	; 0x1a00 <__fp_inf>
    18dc:	dc c0       	rjmp	.+440    	; 0x1a96 <__fp_szero>
    18de:	5f 3f       	cpi	r21, 0xFF	; 255
    18e0:	ec f3       	brlt	.-6      	; 0x18dc <__divsf3_pse+0x6a>
    18e2:	98 3e       	cpi	r25, 0xE8	; 232
    18e4:	dc f3       	brlt	.-10     	; 0x18dc <__divsf3_pse+0x6a>
    18e6:	86 95       	lsr	r24
    18e8:	77 95       	ror	r23
    18ea:	67 95       	ror	r22
    18ec:	b7 95       	ror	r27
    18ee:	f7 95       	ror	r31
    18f0:	9f 5f       	subi	r25, 0xFF	; 255
    18f2:	c9 f7       	brne	.-14     	; 0x18e6 <__divsf3_pse+0x74>
    18f4:	88 0f       	add	r24, r24
    18f6:	91 1d       	adc	r25, r1
    18f8:	96 95       	lsr	r25
    18fa:	87 95       	ror	r24
    18fc:	97 f9       	bld	r25, 7
    18fe:	08 95       	ret
    1900:	e1 e0       	ldi	r30, 0x01	; 1
    1902:	66 0f       	add	r22, r22
    1904:	77 1f       	adc	r23, r23
    1906:	88 1f       	adc	r24, r24
    1908:	bb 1f       	adc	r27, r27
    190a:	62 17       	cp	r22, r18
    190c:	73 07       	cpc	r23, r19
    190e:	84 07       	cpc	r24, r20
    1910:	ba 07       	cpc	r27, r26
    1912:	20 f0       	brcs	.+8      	; 0x191c <__divsf3_pse+0xaa>
    1914:	62 1b       	sub	r22, r18
    1916:	73 0b       	sbc	r23, r19
    1918:	84 0b       	sbc	r24, r20
    191a:	ba 0b       	sbc	r27, r26
    191c:	ee 1f       	adc	r30, r30
    191e:	88 f7       	brcc	.-30     	; 0x1902 <__divsf3_pse+0x90>
    1920:	e0 95       	com	r30
    1922:	08 95       	ret

00001924 <__fixsfsi>:
    1924:	04 d0       	rcall	.+8      	; 0x192e <__fixunssfsi>
    1926:	68 94       	set
    1928:	b1 11       	cpse	r27, r1
    192a:	b5 c0       	rjmp	.+362    	; 0x1a96 <__fp_szero>
    192c:	08 95       	ret

0000192e <__fixunssfsi>:
    192e:	98 d0       	rcall	.+304    	; 0x1a60 <__fp_splitA>
    1930:	88 f0       	brcs	.+34     	; 0x1954 <__fixunssfsi+0x26>
    1932:	9f 57       	subi	r25, 0x7F	; 127
    1934:	90 f0       	brcs	.+36     	; 0x195a <__fixunssfsi+0x2c>
    1936:	b9 2f       	mov	r27, r25
    1938:	99 27       	eor	r25, r25
    193a:	b7 51       	subi	r27, 0x17	; 23
    193c:	a0 f0       	brcs	.+40     	; 0x1966 <__fixunssfsi+0x38>
    193e:	d1 f0       	breq	.+52     	; 0x1974 <__fixunssfsi+0x46>
    1940:	66 0f       	add	r22, r22
    1942:	77 1f       	adc	r23, r23
    1944:	88 1f       	adc	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	1a f0       	brmi	.+6      	; 0x1950 <__fixunssfsi+0x22>
    194a:	ba 95       	dec	r27
    194c:	c9 f7       	brne	.-14     	; 0x1940 <__fixunssfsi+0x12>
    194e:	12 c0       	rjmp	.+36     	; 0x1974 <__fixunssfsi+0x46>
    1950:	b1 30       	cpi	r27, 0x01	; 1
    1952:	81 f0       	breq	.+32     	; 0x1974 <__fixunssfsi+0x46>
    1954:	9f d0       	rcall	.+318    	; 0x1a94 <__fp_zero>
    1956:	b1 e0       	ldi	r27, 0x01	; 1
    1958:	08 95       	ret
    195a:	9c c0       	rjmp	.+312    	; 0x1a94 <__fp_zero>
    195c:	67 2f       	mov	r22, r23
    195e:	78 2f       	mov	r23, r24
    1960:	88 27       	eor	r24, r24
    1962:	b8 5f       	subi	r27, 0xF8	; 248
    1964:	39 f0       	breq	.+14     	; 0x1974 <__fixunssfsi+0x46>
    1966:	b9 3f       	cpi	r27, 0xF9	; 249
    1968:	cc f3       	brlt	.-14     	; 0x195c <__fixunssfsi+0x2e>
    196a:	86 95       	lsr	r24
    196c:	77 95       	ror	r23
    196e:	67 95       	ror	r22
    1970:	b3 95       	inc	r27
    1972:	d9 f7       	brne	.-10     	; 0x196a <__fixunssfsi+0x3c>
    1974:	3e f4       	brtc	.+14     	; 0x1984 <__fixunssfsi+0x56>
    1976:	90 95       	com	r25
    1978:	80 95       	com	r24
    197a:	70 95       	com	r23
    197c:	61 95       	neg	r22
    197e:	7f 4f       	sbci	r23, 0xFF	; 255
    1980:	8f 4f       	sbci	r24, 0xFF	; 255
    1982:	9f 4f       	sbci	r25, 0xFF	; 255
    1984:	08 95       	ret

00001986 <__floatunsisf>:
    1986:	e8 94       	clt
    1988:	09 c0       	rjmp	.+18     	; 0x199c <__floatsisf+0x12>

0000198a <__floatsisf>:
    198a:	97 fb       	bst	r25, 7
    198c:	3e f4       	brtc	.+14     	; 0x199c <__floatsisf+0x12>
    198e:	90 95       	com	r25
    1990:	80 95       	com	r24
    1992:	70 95       	com	r23
    1994:	61 95       	neg	r22
    1996:	7f 4f       	sbci	r23, 0xFF	; 255
    1998:	8f 4f       	sbci	r24, 0xFF	; 255
    199a:	9f 4f       	sbci	r25, 0xFF	; 255
    199c:	99 23       	and	r25, r25
    199e:	a9 f0       	breq	.+42     	; 0x19ca <__floatsisf+0x40>
    19a0:	f9 2f       	mov	r31, r25
    19a2:	96 e9       	ldi	r25, 0x96	; 150
    19a4:	bb 27       	eor	r27, r27
    19a6:	93 95       	inc	r25
    19a8:	f6 95       	lsr	r31
    19aa:	87 95       	ror	r24
    19ac:	77 95       	ror	r23
    19ae:	67 95       	ror	r22
    19b0:	b7 95       	ror	r27
    19b2:	f1 11       	cpse	r31, r1
    19b4:	f8 cf       	rjmp	.-16     	; 0x19a6 <__floatsisf+0x1c>
    19b6:	fa f4       	brpl	.+62     	; 0x19f6 <__floatsisf+0x6c>
    19b8:	bb 0f       	add	r27, r27
    19ba:	11 f4       	brne	.+4      	; 0x19c0 <__floatsisf+0x36>
    19bc:	60 ff       	sbrs	r22, 0
    19be:	1b c0       	rjmp	.+54     	; 0x19f6 <__floatsisf+0x6c>
    19c0:	6f 5f       	subi	r22, 0xFF	; 255
    19c2:	7f 4f       	sbci	r23, 0xFF	; 255
    19c4:	8f 4f       	sbci	r24, 0xFF	; 255
    19c6:	9f 4f       	sbci	r25, 0xFF	; 255
    19c8:	16 c0       	rjmp	.+44     	; 0x19f6 <__floatsisf+0x6c>
    19ca:	88 23       	and	r24, r24
    19cc:	11 f0       	breq	.+4      	; 0x19d2 <__floatsisf+0x48>
    19ce:	96 e9       	ldi	r25, 0x96	; 150
    19d0:	11 c0       	rjmp	.+34     	; 0x19f4 <__floatsisf+0x6a>
    19d2:	77 23       	and	r23, r23
    19d4:	21 f0       	breq	.+8      	; 0x19de <__floatsisf+0x54>
    19d6:	9e e8       	ldi	r25, 0x8E	; 142
    19d8:	87 2f       	mov	r24, r23
    19da:	76 2f       	mov	r23, r22
    19dc:	05 c0       	rjmp	.+10     	; 0x19e8 <__floatsisf+0x5e>
    19de:	66 23       	and	r22, r22
    19e0:	71 f0       	breq	.+28     	; 0x19fe <__floatsisf+0x74>
    19e2:	96 e8       	ldi	r25, 0x86	; 134
    19e4:	86 2f       	mov	r24, r22
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	2a f0       	brmi	.+10     	; 0x19f6 <__floatsisf+0x6c>
    19ec:	9a 95       	dec	r25
    19ee:	66 0f       	add	r22, r22
    19f0:	77 1f       	adc	r23, r23
    19f2:	88 1f       	adc	r24, r24
    19f4:	da f7       	brpl	.-10     	; 0x19ec <__floatsisf+0x62>
    19f6:	88 0f       	add	r24, r24
    19f8:	96 95       	lsr	r25
    19fa:	87 95       	ror	r24
    19fc:	97 f9       	bld	r25, 7
    19fe:	08 95       	ret

00001a00 <__fp_inf>:
    1a00:	97 f9       	bld	r25, 7
    1a02:	9f 67       	ori	r25, 0x7F	; 127
    1a04:	80 e8       	ldi	r24, 0x80	; 128
    1a06:	70 e0       	ldi	r23, 0x00	; 0
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	08 95       	ret

00001a0c <__fp_nan>:
    1a0c:	9f ef       	ldi	r25, 0xFF	; 255
    1a0e:	80 ec       	ldi	r24, 0xC0	; 192
    1a10:	08 95       	ret

00001a12 <__fp_pscA>:
    1a12:	00 24       	eor	r0, r0
    1a14:	0a 94       	dec	r0
    1a16:	16 16       	cp	r1, r22
    1a18:	17 06       	cpc	r1, r23
    1a1a:	18 06       	cpc	r1, r24
    1a1c:	09 06       	cpc	r0, r25
    1a1e:	08 95       	ret

00001a20 <__fp_pscB>:
    1a20:	00 24       	eor	r0, r0
    1a22:	0a 94       	dec	r0
    1a24:	12 16       	cp	r1, r18
    1a26:	13 06       	cpc	r1, r19
    1a28:	14 06       	cpc	r1, r20
    1a2a:	05 06       	cpc	r0, r21
    1a2c:	08 95       	ret

00001a2e <__fp_round>:
    1a2e:	09 2e       	mov	r0, r25
    1a30:	03 94       	inc	r0
    1a32:	00 0c       	add	r0, r0
    1a34:	11 f4       	brne	.+4      	; 0x1a3a <__fp_round+0xc>
    1a36:	88 23       	and	r24, r24
    1a38:	52 f0       	brmi	.+20     	; 0x1a4e <__fp_round+0x20>
    1a3a:	bb 0f       	add	r27, r27
    1a3c:	40 f4       	brcc	.+16     	; 0x1a4e <__fp_round+0x20>
    1a3e:	bf 2b       	or	r27, r31
    1a40:	11 f4       	brne	.+4      	; 0x1a46 <__fp_round+0x18>
    1a42:	60 ff       	sbrs	r22, 0
    1a44:	04 c0       	rjmp	.+8      	; 0x1a4e <__fp_round+0x20>
    1a46:	6f 5f       	subi	r22, 0xFF	; 255
    1a48:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4e:	08 95       	ret

00001a50 <__fp_split3>:
    1a50:	57 fd       	sbrc	r21, 7
    1a52:	90 58       	subi	r25, 0x80	; 128
    1a54:	44 0f       	add	r20, r20
    1a56:	55 1f       	adc	r21, r21
    1a58:	59 f0       	breq	.+22     	; 0x1a70 <__fp_splitA+0x10>
    1a5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a5c:	71 f0       	breq	.+28     	; 0x1a7a <__fp_splitA+0x1a>
    1a5e:	47 95       	ror	r20

00001a60 <__fp_splitA>:
    1a60:	88 0f       	add	r24, r24
    1a62:	97 fb       	bst	r25, 7
    1a64:	99 1f       	adc	r25, r25
    1a66:	61 f0       	breq	.+24     	; 0x1a80 <__fp_splitA+0x20>
    1a68:	9f 3f       	cpi	r25, 0xFF	; 255
    1a6a:	79 f0       	breq	.+30     	; 0x1a8a <__fp_splitA+0x2a>
    1a6c:	87 95       	ror	r24
    1a6e:	08 95       	ret
    1a70:	12 16       	cp	r1, r18
    1a72:	13 06       	cpc	r1, r19
    1a74:	14 06       	cpc	r1, r20
    1a76:	55 1f       	adc	r21, r21
    1a78:	f2 cf       	rjmp	.-28     	; 0x1a5e <__fp_split3+0xe>
    1a7a:	46 95       	lsr	r20
    1a7c:	f1 df       	rcall	.-30     	; 0x1a60 <__fp_splitA>
    1a7e:	08 c0       	rjmp	.+16     	; 0x1a90 <__fp_splitA+0x30>
    1a80:	16 16       	cp	r1, r22
    1a82:	17 06       	cpc	r1, r23
    1a84:	18 06       	cpc	r1, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	f1 cf       	rjmp	.-30     	; 0x1a6c <__fp_splitA+0xc>
    1a8a:	86 95       	lsr	r24
    1a8c:	71 05       	cpc	r23, r1
    1a8e:	61 05       	cpc	r22, r1
    1a90:	08 94       	sec
    1a92:	08 95       	ret

00001a94 <__fp_zero>:
    1a94:	e8 94       	clt

00001a96 <__fp_szero>:
    1a96:	bb 27       	eor	r27, r27
    1a98:	66 27       	eor	r22, r22
    1a9a:	77 27       	eor	r23, r23
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	97 f9       	bld	r25, 7
    1aa0:	08 95       	ret

00001aa2 <__divmodhi4>:
    1aa2:	97 fb       	bst	r25, 7
    1aa4:	07 2e       	mov	r0, r23
    1aa6:	16 f4       	brtc	.+4      	; 0x1aac <__divmodhi4+0xa>
    1aa8:	00 94       	com	r0
    1aaa:	06 d0       	rcall	.+12     	; 0x1ab8 <__divmodhi4_neg1>
    1aac:	77 fd       	sbrc	r23, 7
    1aae:	08 d0       	rcall	.+16     	; 0x1ac0 <__divmodhi4_neg2>
    1ab0:	1a d0       	rcall	.+52     	; 0x1ae6 <__udivmodhi4>
    1ab2:	07 fc       	sbrc	r0, 7
    1ab4:	05 d0       	rcall	.+10     	; 0x1ac0 <__divmodhi4_neg2>
    1ab6:	3e f4       	brtc	.+14     	; 0x1ac6 <__divmodhi4_exit>

00001ab8 <__divmodhi4_neg1>:
    1ab8:	90 95       	com	r25
    1aba:	81 95       	neg	r24
    1abc:	9f 4f       	sbci	r25, 0xFF	; 255
    1abe:	08 95       	ret

00001ac0 <__divmodhi4_neg2>:
    1ac0:	70 95       	com	r23
    1ac2:	61 95       	neg	r22
    1ac4:	7f 4f       	sbci	r23, 0xFF	; 255

00001ac6 <__divmodhi4_exit>:
    1ac6:	08 95       	ret

00001ac8 <__umulhisi3>:
    1ac8:	a2 9f       	mul	r26, r18
    1aca:	b0 01       	movw	r22, r0
    1acc:	b3 9f       	mul	r27, r19
    1ace:	c0 01       	movw	r24, r0
    1ad0:	a3 9f       	mul	r26, r19
    1ad2:	70 0d       	add	r23, r0
    1ad4:	81 1d       	adc	r24, r1
    1ad6:	11 24       	eor	r1, r1
    1ad8:	91 1d       	adc	r25, r1
    1ada:	b2 9f       	mul	r27, r18
    1adc:	70 0d       	add	r23, r0
    1ade:	81 1d       	adc	r24, r1
    1ae0:	11 24       	eor	r1, r1
    1ae2:	91 1d       	adc	r25, r1
    1ae4:	08 95       	ret

00001ae6 <__udivmodhi4>:
    1ae6:	aa 1b       	sub	r26, r26
    1ae8:	bb 1b       	sub	r27, r27
    1aea:	51 e1       	ldi	r21, 0x11	; 17
    1aec:	07 c0       	rjmp	.+14     	; 0x1afc <__udivmodhi4_ep>

00001aee <__udivmodhi4_loop>:
    1aee:	aa 1f       	adc	r26, r26
    1af0:	bb 1f       	adc	r27, r27
    1af2:	a6 17       	cp	r26, r22
    1af4:	b7 07       	cpc	r27, r23
    1af6:	10 f0       	brcs	.+4      	; 0x1afc <__udivmodhi4_ep>
    1af8:	a6 1b       	sub	r26, r22
    1afa:	b7 0b       	sbc	r27, r23

00001afc <__udivmodhi4_ep>:
    1afc:	88 1f       	adc	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	5a 95       	dec	r21
    1b02:	a9 f7       	brne	.-22     	; 0x1aee <__udivmodhi4_loop>
    1b04:	80 95       	com	r24
    1b06:	90 95       	com	r25
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	08 95       	ret

00001b0e <_exit>:
    1b0e:	f8 94       	cli

00001b10 <__stop_program>:
    1b10:	ff cf       	rjmp	.-2      	; 0x1b10 <__stop_program>
