
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e6  00800200  0000403a  000040ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000403a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000423  008003e6  008003e6  000042b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000042b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000042e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  00004328  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007fbf  00000000  00000000  00004780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000215f  00000000  00000000  0000c73f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037f2  00000000  00000000  0000e89e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c4c  00000000  00000000  00012090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015d6  00000000  00000000  00012cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005466  00000000  00000000  000142b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  00019718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
       2:	00 00       	nop
       4:	12 c1       	rjmp	.+548    	; 0x22a <__bad_interrupt>
       6:	00 00       	nop
       8:	10 c1       	rjmp	.+544    	; 0x22a <__bad_interrupt>
       a:	00 00       	nop
       c:	1f c2       	rjmp	.+1086   	; 0x44c <__vector_3>
       e:	00 00       	nop
      10:	3d c2       	rjmp	.+1146   	; 0x48c <__vector_4>
      12:	00 00       	nop
      14:	5b c2       	rjmp	.+1206   	; 0x4cc <__vector_5>
      16:	00 00       	nop
      18:	79 c2       	rjmp	.+1266   	; 0x50c <__vector_6>
      1a:	00 00       	nop
      1c:	06 c1       	rjmp	.+524    	; 0x22a <__bad_interrupt>
      1e:	00 00       	nop
      20:	04 c1       	rjmp	.+520    	; 0x22a <__bad_interrupt>
      22:	00 00       	nop
      24:	02 c1       	rjmp	.+516    	; 0x22a <__bad_interrupt>
      26:	00 00       	nop
      28:	00 c1       	rjmp	.+512    	; 0x22a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fe c0       	rjmp	.+508    	; 0x22a <__bad_interrupt>
      2e:	00 00       	nop
      30:	fc c0       	rjmp	.+504    	; 0x22a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__vector_13>
      38:	f8 c0       	rjmp	.+496    	; 0x22a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__bad_interrupt>
      3e:	00 00       	nop
      40:	f4 c0       	rjmp	.+488    	; 0x22a <__bad_interrupt>
      42:	00 00       	nop
      44:	f2 c0       	rjmp	.+484    	; 0x22a <__bad_interrupt>
      46:	00 00       	nop
      48:	f0 c0       	rjmp	.+480    	; 0x22a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ee c0       	rjmp	.+476    	; 0x22a <__bad_interrupt>
      4e:	00 00       	nop
      50:	ec c0       	rjmp	.+472    	; 0x22a <__bad_interrupt>
      52:	00 00       	nop
      54:	ea c0       	rjmp	.+468    	; 0x22a <__bad_interrupt>
      56:	00 00       	nop
      58:	e8 c0       	rjmp	.+464    	; 0x22a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e6 c0       	rjmp	.+460    	; 0x22a <__bad_interrupt>
      5e:	00 00       	nop
      60:	e4 c0       	rjmp	.+456    	; 0x22a <__bad_interrupt>
      62:	00 00       	nop
      64:	e2 c0       	rjmp	.+452    	; 0x22a <__bad_interrupt>
      66:	00 00       	nop
      68:	e0 c0       	rjmp	.+448    	; 0x22a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__vector_27>
      70:	dc c0       	rjmp	.+440    	; 0x22a <__bad_interrupt>
      72:	00 00       	nop
      74:	da c0       	rjmp	.+436    	; 0x22a <__bad_interrupt>
      76:	00 00       	nop
      78:	d8 c0       	rjmp	.+432    	; 0x22a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d6 c0       	rjmp	.+428    	; 0x22a <__bad_interrupt>
      7e:	00 00       	nop
      80:	d4 c0       	rjmp	.+424    	; 0x22a <__bad_interrupt>
      82:	00 00       	nop
      84:	d2 c0       	rjmp	.+420    	; 0x22a <__bad_interrupt>
      86:	00 00       	nop
      88:	d0 c0       	rjmp	.+416    	; 0x22a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ce c0       	rjmp	.+412    	; 0x22a <__bad_interrupt>
      8e:	00 00       	nop
      90:	cc c0       	rjmp	.+408    	; 0x22a <__bad_interrupt>
      92:	00 00       	nop
      94:	ca c0       	rjmp	.+404    	; 0x22a <__bad_interrupt>
      96:	00 00       	nop
      98:	c8 c0       	rjmp	.+400    	; 0x22a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c6 c0       	rjmp	.+396    	; 0x22a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c4 c0       	rjmp	.+392    	; 0x22a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c2 c0       	rjmp	.+388    	; 0x22a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c0 c0       	rjmp	.+384    	; 0x22a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	be c0       	rjmp	.+380    	; 0x22a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bc c0       	rjmp	.+376    	; 0x22a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ba c0       	rjmp	.+372    	; 0x22a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b8 c0       	rjmp	.+368    	; 0x22a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b6 c0       	rjmp	.+364    	; 0x22a <__bad_interrupt>
      be:	00 00       	nop
      c0:	b4 c0       	rjmp	.+360    	; 0x22a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b2 c0       	rjmp	.+356    	; 0x22a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b0 c0       	rjmp	.+352    	; 0x22a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ae c0       	rjmp	.+348    	; 0x22a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ac c0       	rjmp	.+344    	; 0x22a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	aa c0       	rjmp	.+340    	; 0x22a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__vector_54>
      dc:	a6 c0       	rjmp	.+332    	; 0x22a <__bad_interrupt>
      de:	00 00       	nop
      e0:	a4 c0       	rjmp	.+328    	; 0x22a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	dd 02       	muls	r29, r29
      e6:	c2 04       	cpc	r12, r2
      e8:	c2 04       	cpc	r12, r2
      ea:	c2 04       	cpc	r12, r2
      ec:	c2 04       	cpc	r12, r2
      ee:	c2 04       	cpc	r12, r2
      f0:	c2 04       	cpc	r12, r2
      f2:	c2 04       	cpc	r12, r2
      f4:	c2 04       	cpc	r12, r2
      f6:	c2 04       	cpc	r12, r2
      f8:	c2 04       	cpc	r12, r2
      fa:	c2 04       	cpc	r12, r2
      fc:	c2 04       	cpc	r12, r2
      fe:	c2 04       	cpc	r12, r2
     100:	c2 04       	cpc	r12, r2
     102:	c2 04       	cpc	r12, r2
     104:	c2 04       	cpc	r12, r2
     106:	f4 02       	muls	r31, r20
     108:	11 03       	mulsu	r17, r17
     10a:	38 03       	fmul	r19, r16
     10c:	c2 04       	cpc	r12, r2
     10e:	c2 04       	cpc	r12, r2
     110:	c2 04       	cpc	r12, r2
     112:	c2 04       	cpc	r12, r2
     114:	c2 04       	cpc	r12, r2
     116:	fc 02       	muls	r31, r28
     118:	19 03       	fmul	r17, r17
     11a:	40 03       	mulsu	r20, r16
     11c:	c2 04       	cpc	r12, r2
     11e:	c2 04       	cpc	r12, r2
     120:	c2 04       	cpc	r12, r2
     122:	c2 04       	cpc	r12, r2
     124:	c2 04       	cpc	r12, r2
     126:	5b 03       	fmul	r21, r19
     128:	90 03       	fmuls	r17, r16
     12a:	a4 03       	fmuls	r18, r20
     12c:	d9 03       	fmulsu	r21, r17
     12e:	40 04       	cpc	r4, r0
     130:	c2 04       	cpc	r12, r2
     132:	c2 04       	cpc	r12, r2
     134:	c2 04       	cpc	r12, r2
     136:	63 03       	mulsu	r22, r19
     138:	98 03       	fmulsu	r17, r16
     13a:	ac 03       	fmulsu	r18, r20
     13c:	e1 03       	fmuls	r22, r17
     13e:	48 04       	cpc	r4, r8
     140:	c2 04       	cpc	r12, r2
     142:	c2 04       	cpc	r12, r2
     144:	c2 04       	cpc	r12, r2
     146:	82 04       	cpc	r8, r2
     148:	9c 04       	cpc	r9, r12
     14a:	bb 04       	cpc	r11, r11
     14c:	c2 04       	cpc	r12, r2
     14e:	c2 04       	cpc	r12, r2
     150:	c2 04       	cpc	r12, r2
     152:	c2 04       	cpc	r12, r2
     154:	c2 04       	cpc	r12, r2
     156:	8a 04       	cpc	r8, r10
     158:	a4 04       	cpc	r10, r4
     15a:	ac 0c       	add	r10, r12
     15c:	75 0f       	add	r23, r21
     15e:	75 0f       	add	r23, r21
     160:	75 0f       	add	r23, r21
     162:	75 0f       	add	r23, r21
     164:	75 0f       	add	r23, r21
     166:	75 0f       	add	r23, r21
     168:	75 0f       	add	r23, r21
     16a:	75 0f       	add	r23, r21
     16c:	75 0f       	add	r23, r21
     16e:	75 0f       	add	r23, r21
     170:	75 0f       	add	r23, r21
     172:	75 0f       	add	r23, r21
     174:	75 0f       	add	r23, r21
     176:	75 0f       	add	r23, r21
     178:	75 0f       	add	r23, r21
     17a:	c2 0c       	add	r12, r2
     17c:	dc 0c       	add	r13, r12
     17e:	02 0d       	add	r16, r2
     180:	31 0d       	add	r19, r1
     182:	75 0f       	add	r23, r21
     184:	75 0f       	add	r23, r21
     186:	75 0f       	add	r23, r21
     188:	75 0f       	add	r23, r21
     18a:	75 0f       	add	r23, r21
     18c:	f9 0c       	add	r15, r9
     18e:	1f 0d       	add	r17, r15
     190:	4e 0d       	add	r20, r14
     192:	75 0f       	add	r23, r21
     194:	75 0f       	add	r23, r21
     196:	75 0f       	add	r23, r21
     198:	75 0f       	add	r23, r21
     19a:	5f 0d       	add	r21, r15
     19c:	79 0d       	add	r23, r9
     19e:	b2 0d       	add	r27, r2
     1a0:	fe 0d       	add	r31, r14
     1a2:	31 0e       	add	r3, r17
     1a4:	9b 0e       	add	r9, r27
     1a6:	75 0f       	add	r23, r21
     1a8:	75 0f       	add	r23, r21
     1aa:	75 0f       	add	r23, r21
     1ac:	96 0d       	add	r25, r6
     1ae:	cf 0d       	add	r28, r15
     1b0:	1b 0e       	add	r1, r27
     1b2:	4e 0e       	add	r4, r30
     1b4:	b8 0e       	add	r11, r24
     1b6:	75 0f       	add	r23, r21
     1b8:	75 0f       	add	r23, r21
     1ba:	e1 0e       	add	r14, r17
     1bc:	fb 0e       	add	r15, r27
     1be:	2a 0f       	add	r18, r26
     1c0:	59 0f       	add	r21, r25
     1c2:	75 0f       	add	r23, r21
     1c4:	75 0f       	add	r23, r21
     1c6:	75 0f       	add	r23, r21
     1c8:	75 0f       	add	r23, r21
     1ca:	75 0f       	add	r23, r21
     1cc:	18 0f       	add	r17, r24
     1ce:	47 0f       	add	r20, r23
     1d0:	90 15       	cp	r25, r0
     1d2:	93 15       	cp	r25, r3
     1d4:	96 15       	cp	r25, r6
     1d6:	99 15       	cp	r25, r9
     1d8:	9c 15       	cp	r25, r12
     1da:	9f 15       	cp	r25, r15
     1dc:	a2 15       	cp	r26, r2
     1de:	a5 15       	cp	r26, r5
     1e0:	a8 15       	cp	r26, r8
     1e2:	ab 15       	cp	r26, r11
     1e4:	ae 15       	cp	r26, r14
     1e6:	b1 15       	cp	r27, r1

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d1 e2       	ldi	r29, 0x21	; 33
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	13 e0       	ldi	r17, 0x03	; 3
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b2 e0       	ldi	r27, 0x02	; 2
     1fe:	ea e3       	ldi	r30, 0x3A	; 58
     200:	f0 e4       	ldi	r31, 0x40	; 64
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a6 3e       	cpi	r26, 0xE6	; 230
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	28 e0       	ldi	r18, 0x08	; 8
     214:	a6 ee       	ldi	r26, 0xE6	; 230
     216:	b3 e0       	ldi	r27, 0x03	; 3
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a9 30       	cpi	r26, 0x09	; 9
     21e:	b2 07       	cpc	r27, r18
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 8f 09 	call	0x131e	; 0x131e <main>
     226:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <_exit>

0000022a <__bad_interrupt>:
     22a:	ea ce       	rjmp	.-556    	; 0x0 <__vectors>

0000022c <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     22c:	8f ef       	ldi	r24, 0xFF	; 255
     22e:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     230:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons and Encoder buttons
	PORTB = 0B01111111; //lets see if we can read these without debouncing
     234:	8f e7       	ldi	r24, 0x7F	; 127
     236:	85 b9       	out	0x05, r24	; 5
     238:	08 95       	ret

0000023a <listenTrigButtons>:

}

void listenTrigButtons(Pattern *buttonCurrentPattern, Globals *currentGlobals)
{
     23a:	cf 92       	push	r12
     23c:	df 92       	push	r13
     23e:	ef 92       	push	r14
     240:	ff 92       	push	r15
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	6c 01       	movw	r12, r24
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     24a:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     24e:	20 95       	com	r18
     250:	20 93 f9 03 	sts	0x03F9, r18	; 0x8003f9 <buttonsCurrentCycle>
	(currentGlobals->currentTrigButtons) = (buttonsCurrentCycle << 8) | (PINA^255);
     254:	90 b1       	in	r25, 0x00	; 0
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	32 2f       	mov	r19, r18
     25a:	22 27       	eor	r18, r18
     25c:	90 95       	com	r25
     25e:	29 2b       	or	r18, r25
     260:	db 01       	movw	r26, r22
     262:	2d 93       	st	X+, r18
     264:	3c 93       	st	X, r19
	if(currentGlobals->currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     266:	40 91 e6 03 	lds	r20, 0x03E6	; 0x8003e6 <__data_end>
     26a:	50 91 e7 03 	lds	r21, 0x03E7	; 0x8003e7 <__data_end+0x1>
     26e:	24 17       	cp	r18, r20
     270:	35 07       	cpc	r19, r21
     272:	09 f4       	brne	.+2      	; 0x276 <listenTrigButtons+0x3c>
     274:	43 c0       	rjmp	.+134    	; 0x2fc <listenTrigButtons+0xc2>
     276:	7b 01       	movw	r14, r22
	{
		lastFullBits = currentGlobals->currentTrigButtons;
     278:	30 93 e7 03 	sts	0x03E7, r19	; 0x8003e7 <__data_end+0x1>
     27c:	20 93 e6 03 	sts	0x03E6, r18	; 0x8003e6 <__data_end>
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
     280:	fb 01       	movw	r30, r22
     282:	00 81       	ld	r16, Z
     284:	11 81       	ldd	r17, Z+1	; 0x01
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     286:	c0 e0       	ldi	r28, 0x00	; 0
		{
			currentTrig = (fullBitsParse&1);
     288:	90 2f       	mov	r25, r16
     28a:	91 70       	andi	r25, 0x01	; 1
     28c:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <currentTrig>
			if(currentTrig)
     290:	99 23       	and	r25, r25
     292:	79 f1       	breq	.+94     	; 0x2f2 <listenTrigButtons+0xb8>
			{
				uint8_t encoderAstate = currentGlobals->menuState >> 4;
				switch (encoderAstate)
     294:	d7 01       	movw	r26, r14
     296:	1a 96       	adiw	r26, 0x0a	; 10
     298:	9c 91       	ld	r25, X
     29a:	92 95       	swap	r25
     29c:	9f 70       	andi	r25, 0x0F	; 15
     29e:	91 30       	cpi	r25, 0x01	; 1
     2a0:	51 f0       	breq	.+20     	; 0x2b6 <listenTrigButtons+0x7c>
     2a2:	18 f0       	brcs	.+6      	; 0x2aa <listenTrigButtons+0x70>
     2a4:	94 30       	cpi	r25, 0x04	; 4
     2a6:	28 f5       	brcc	.+74     	; 0x2f2 <listenTrigButtons+0xb8>
     2a8:	1a c0       	rjmp	.+52     	; 0x2de <listenTrigButtons+0xa4>
				{
	
					//for "performance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
					case 0: //performance mode
					//we trigger a sound here based on the location of bc
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     2aa:	4c 2f       	mov	r20, r28
     2ac:	b7 01       	movw	r22, r14
     2ae:	c6 01       	movw	r24, r12
     2b0:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <playTrack>
					break;
     2b4:	1e c0       	rjmp	.+60     	; 0x2f2 <listenTrigButtons+0xb8>

					case 1:
					buttonCurrentPattern->trackSequence[currentGlobals->currentStep] ^= currentGlobals->currentTrigButtons;
     2b6:	d7 01       	movw	r26, r14
     2b8:	18 96       	adiw	r26, 0x08	; 8
     2ba:	ec 91       	ld	r30, X
     2bc:	18 97       	sbiw	r26, 0x08	; 8
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	ee 0f       	add	r30, r30
     2c2:	ff 1f       	adc	r31, r31
     2c4:	ec 0d       	add	r30, r12
     2c6:	fd 1d       	adc	r31, r13
     2c8:	e5 50       	subi	r30, 0x05	; 5
     2ca:	ff 4f       	sbci	r31, 0xFF	; 255
     2cc:	20 81       	ld	r18, Z
     2ce:	31 81       	ldd	r19, Z+1	; 0x01
     2d0:	8d 91       	ld	r24, X+
     2d2:	9c 91       	ld	r25, X
     2d4:	82 27       	eor	r24, r18
     2d6:	93 27       	eor	r25, r19
     2d8:	91 83       	std	Z+1, r25	; 0x01
     2da:	80 83       	st	Z, r24
					//turn on step number, or turn off step number.
					//step sequencer mode.
					break;
     2dc:	0a c0       	rjmp	.+20     	; 0x2f2 <listenTrigButtons+0xb8>
					//we want this functionality for both case 2 and case 3
					case 2:
					case 3:;
					//select track for sample assignment
					//uint16_t currentSample = (buttonCurrentPattern->trackSampleMSB[bc]<<8)|(buttonCurrentPattern->trackSampleLSB[bc]);
					currentGlobals->currentTrack = bc;
     2de:	f7 01       	movw	r30, r14
     2e0:	c1 87       	std	Z+9, r28	; 0x09
					currentGlobals->valueChangeFlag |=(1<<triggerChange);
     2e2:	86 85       	ldd	r24, Z+14	; 0x0e
     2e4:	82 60       	ori	r24, 0x02	; 2
     2e6:	86 87       	std	Z+14, r24	; 0x0e
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     2e8:	4c 2f       	mov	r20, r28
     2ea:	b7 01       	movw	r22, r14
     2ec:	c6 01       	movw	r24, r12
     2ee:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <playTrack>
					default:
					//this should be the same as case 0;
					break;
				}
			}
			fullBitsParse = fullBitsParse>>1;
     2f2:	16 95       	lsr	r17
     2f4:	07 95       	ror	r16
	{
		lastFullBits = currentGlobals->currentTrigButtons;
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     2f6:	cf 5f       	subi	r28, 0xFF	; 255
     2f8:	c0 31       	cpi	r28, 0x10	; 16
     2fa:	31 f6       	brne	.-116    	; 0x288 <listenTrigButtons+0x4e>
				}
			}
			fullBitsParse = fullBitsParse>>1;
		}
	}
}
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	ff 90       	pop	r15
     304:	ef 90       	pop	r14
     306:	df 90       	pop	r13
     308:	cf 90       	pop	r12
     30a:	08 95       	ret

0000030c <listenGPButtons>:

void listenGPButtons(Pattern currentPattern, Globals *currentGlobals) //may need to be a pointer
{
     30c:	ff 92       	push	r15
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	cc 57       	subi	r28, 0x7C	; 124
     31c:	de 4f       	sbci	r29, 0xFE	; 254
     31e:	08 81       	ld	r16, Y
     320:	19 81       	ldd	r17, Y+1	; 0x01
     322:	c4 58       	subi	r28, 0x84	; 132
     324:	d1 40       	sbci	r29, 0x01	; 1

	if(button_down(1 << PB5))
     326:	80 e2       	ldi	r24, 0x20	; 32
     328:	77 d0       	rcall	.+238    	; 0x418 <button_down>
     32a:	88 23       	and	r24, r24
     32c:	41 f1       	breq	.+80     	; 0x37e <listenGPButtons+0x72>
	{ //top encoder button
		if(currentGlobals->menuState>>4==3)
     32e:	f8 01       	movw	r30, r16
     330:	82 85       	ldd	r24, Z+10	; 0x0a
     332:	82 95       	swap	r24
     334:	8f 70       	andi	r24, 0x0F	; 15
     336:	83 30       	cpi	r24, 0x03	; 3
     338:	21 f4       	brne	.+8      	; 0x342 <listenGPButtons+0x36>
		{
			globalWrite(currentGlobals);
     33a:	c8 01       	movw	r24, r16
     33c:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <globalWrite>
     340:	1e c0       	rjmp	.+60     	; 0x37e <listenGPButtons+0x72>
		}else
		{
			eepromSavePattern(currentPattern, currentGlobals->currentPatternNumber);
     342:	f8 01       	movw	r30, r16
     344:	87 81       	ldd	r24, Z+7	; 0x07
     346:	8f 93       	push	r24
     348:	8d b7       	in	r24, 0x3d	; 61
     34a:	9e b7       	in	r25, 0x3e	; 62
     34c:	8b 57       	subi	r24, 0x7B	; 123
     34e:	91 40       	sbci	r25, 0x01	; 1
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	f8 94       	cli
     354:	9e bf       	out	0x3e, r25	; 62
     356:	0f be       	out	0x3f, r0	; 63
     358:	8d bf       	out	0x3d, r24	; 61
     35a:	ad b7       	in	r26, 0x3d	; 61
     35c:	be b7       	in	r27, 0x3e	; 62
     35e:	11 96       	adiw	r26, 0x01	; 1
     360:	8b e7       	ldi	r24, 0x7B	; 123
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	fe 01       	movw	r30, r28
     366:	39 96       	adiw	r30, 0x09	; 9
     368:	01 90       	ld	r0, Z+
     36a:	0d 92       	st	X+, r0
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	e1 f7       	brne	.-8      	; 0x368 <listenGPButtons+0x5c>
     370:	0e 94 c3 19 	call	0x3386	; 0x3386 <eepromSavePattern>
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
		}
		
	}

	uint8_t encoderSwitchMask = 0b00001000;
	if(button_down(1<<PB6))
     37e:	80 e4       	ldi	r24, 0x40	; 64
     380:	4b d0       	rcall	.+150    	; 0x418 <button_down>
     382:	88 23       	and	r24, r24
     384:	51 f0       	breq	.+20     	; 0x39a <listenGPButtons+0x8e>
		{//bottom encoder button
			uint8_t encoderBCheck = currentGlobals->menuState&encoderSwitchMask;
     386:	f8 01       	movw	r30, r16
     388:	82 85       	ldd	r24, Z+10	; 0x0a
			if(encoderBCheck)
     38a:	83 ff       	sbrs	r24, 3
     38c:	03 c0       	rjmp	.+6      	; 0x394 <listenGPButtons+0x88>
			{
				currentGlobals->menuState &=0b11110111;//turn off the encoderBFlag
     38e:	87 7f       	andi	r24, 0xF7	; 247
     390:	82 87       	std	Z+10, r24	; 0x0a
     392:	03 c0       	rjmp	.+6      	; 0x39a <listenGPButtons+0x8e>

			}else
			{
				currentGlobals->menuState |=0b00001000; //turn on the encoderBFlag bit
     394:	88 60       	ori	r24, 0x08	; 8
     396:	f8 01       	movw	r30, r16
     398:	82 87       	std	Z+10, r24	; 0x0a
			}
		}
	uint8_t playButtonMask = 0b0000001; //we could probably make a define for both of these masks.
	uint8_t playStateCheck = currentGlobals->playState & playButtonMask;
     39a:	f8 01       	movw	r30, r16
	if(button_down(1<<PB4))
     39c:	f3 84       	ldd	r15, Z+11	; 0x0b
     39e:	80 e1       	ldi	r24, 0x10	; 16
     3a0:	3b d0       	rcall	.+118    	; 0x418 <button_down>
     3a2:	88 23       	and	r24, r24
     3a4:	71 f0       	breq	.+28     	; 0x3c2 <listenGPButtons+0xb6>
	{
		if(playStateCheck)
     3a6:	f0 fe       	sbrs	r15, 0
     3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <listenGPButtons+0xaa>
		{
			currentGlobals->playState=0; //playstate is on, turn it off
     3aa:	f8 01       	movw	r30, r16
     3ac:	13 86       	std	Z+11, r1	; 0x0b
			currentGlobals->currentGPButtons &=(~0x20); //turn the first bit
     3ae:	82 81       	ldd	r24, Z+2	; 0x02
     3b0:	8f 7d       	andi	r24, 0xDF	; 223
     3b2:	82 83       	std	Z+2, r24	; 0x02
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <listenGPButtons+0xb6>
			
		}else
		{
			currentGlobals->playState=1;
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	f8 01       	movw	r30, r16
     3ba:	83 87       	std	Z+11, r24	; 0x0b
			currentGlobals->currentGPButtons |= 0x20; //turn on the first bit
     3bc:	82 81       	ldd	r24, Z+2	; 0x02
     3be:	80 62       	ori	r24, 0x20	; 32
     3c0:	82 83       	std	Z+2, r24	; 0x02
		}

	} //not sure which button this is
	uint8_t trackButtonMask = 0b00000001;
	uint8_t trackStateCheck = (currentGlobals->buttonSwitchFlag) & trackButtonMask;
     3c2:	f8 01       	movw	r30, r16
	if(button_down(1<<PB0))
     3c4:	f5 84       	ldd	r15, Z+13	; 0x0d
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	27 d0       	rcall	.+78     	; 0x418 <button_down>
     3ca:	88 23       	and	r24, r24
     3cc:	71 f0       	breq	.+28     	; 0x3ea <listenGPButtons+0xde>
	{
		if(trackStateCheck)
     3ce:	f0 fe       	sbrs	r15, 0
     3d0:	06 c0       	rjmp	.+12     	; 0x3de <listenGPButtons+0xd2>
		{
			currentGlobals->buttonSwitchFlag = 0;
     3d2:	f8 01       	movw	r30, r16
     3d4:	15 86       	std	Z+13, r1	; 0x0d
			currentGlobals->currentGPButtons &=(~0x02);
     3d6:	82 81       	ldd	r24, Z+2	; 0x02
     3d8:	8d 7f       	andi	r24, 0xFD	; 253
     3da:	82 83       	std	Z+2, r24	; 0x02
     3dc:	06 c0       	rjmp	.+12     	; 0x3ea <listenGPButtons+0xde>
		}else
		{
			currentGlobals->buttonSwitchFlag = 1;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	f8 01       	movw	r30, r16
     3e2:	85 87       	std	Z+13, r24	; 0x0d
			currentGlobals->currentGPButtons |=0x02;
     3e4:	82 81       	ldd	r24, Z+2	; 0x02
     3e6:	82 60       	ori	r24, 0x02	; 2
		}
	}
	uint8_t fineButtonMask = 4;
	uint8_t fineStateCheck = (currentGlobals->currentGPButtons) & fineButtonMask;
     3e8:	82 83       	std	Z+2, r24	; 0x02
     3ea:	f8 01       	movw	r30, r16
	if(button_down(1<<PB1))
     3ec:	f2 80       	ldd	r15, Z+2	; 0x02
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	13 d0       	rcall	.+38     	; 0x418 <button_down>
     3f2:	88 23       	and	r24, r24
     3f4:	59 f0       	breq	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	{		
		if(fineStateCheck)
     3f6:	f2 fe       	sbrs	r15, 2
     3f8:	05 c0       	rjmp	.+10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		{
			
			currentGlobals->currentGPButtons &=(~0x04);
     3fa:	f8 01       	movw	r30, r16
     3fc:	82 81       	ldd	r24, Z+2	; 0x02
     3fe:	8b 7f       	andi	r24, 0xFB	; 251
     400:	82 83       	std	Z+2, r24	; 0x02
     402:	04 c0       	rjmp	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		}else
		{
			currentGlobals->currentGPButtons |=0x04;
     404:	f8 01       	movw	r30, r16
     406:	82 81       	ldd	r24, Z+2	; 0x02
     408:	84 60       	ori	r24, 0x04	; 4
     40a:	82 83       	std	Z+2, r24	; 0x02
		}
		
	}
}
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	08 95       	ret

00000418 <button_down>:

volatile uint8_t buttons_down;
uint8_t button_down(uint8_t button_mask)
{
	//I should probably check out what this is.
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     418:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     41a:	f8 94       	cli
	{
		button_mask &= buttons_down;
     41c:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <buttons_down>
     420:	89 23       	and	r24, r25
		buttons_down ^= button_mask;
     422:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <buttons_down>
     426:	98 27       	eor	r25, r24
     428:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <buttons_down>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     42c:	2f bf       	out	0x3f, r18	; 63
	}
	
	return button_mask;
     42e:	08 95       	ret

00000430 <initEncoders>:
		encoderPortStates|=(1<<bottomEncoderPinB); //we want to set bit 3.
	}
}

void listenEncodersNew(Pattern *currentPattern, Globals *currentGlobals)
{
     430:	e9 e6       	ldi	r30, 0x69	; 105
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	80 6f       	ori	r24, 0xF0	; 240
     438:	80 83       	st	Z, r24
     43a:	ea e6       	ldi	r30, 0x6A	; 106
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	8f 60       	ori	r24, 0x0F	; 15
     442:	80 83       	st	Z, r24
     444:	8d b3       	in	r24, 0x1d	; 29
     446:	8c 63       	ori	r24, 0x3C	; 60
     448:	8d bb       	out	0x1d, r24	; 29
     44a:	08 95       	ret

0000044c <__vector_3>:
     44c:	1f 92       	push	r1
     44e:	0f 92       	push	r0
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	0f 92       	push	r0
     454:	11 24       	eor	r1, r1
     456:	8f 93       	push	r24
     458:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     45c:	81 ff       	sbrs	r24, 1
     45e:	0b c0       	rjmp	.+22     	; 0x476 <__vector_3+0x2a>
     460:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <bottomEncoderValue>
     464:	81 50       	subi	r24, 0x01	; 1
     466:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <bottomEncoderValue>
     46a:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     46e:	8c 70       	andi	r24, 0x0C	; 12
     470:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <encoderPortStates>
     474:	05 c0       	rjmp	.+10     	; 0x480 <__vector_3+0x34>
     476:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     47a:	81 60       	ori	r24, 0x01	; 1
     47c:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <encoderPortStates>
     480:	8f 91       	pop	r24
     482:	0f 90       	pop	r0
     484:	0f be       	out	0x3f, r0	; 63
     486:	0f 90       	pop	r0
     488:	1f 90       	pop	r1
     48a:	18 95       	reti

0000048c <__vector_4>:
     48c:	1f 92       	push	r1
     48e:	0f 92       	push	r0
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	0f 92       	push	r0
     494:	11 24       	eor	r1, r1
     496:	8f 93       	push	r24
     498:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     49c:	80 ff       	sbrs	r24, 0
     49e:	0b c0       	rjmp	.+22     	; 0x4b6 <__vector_4+0x2a>
     4a0:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <bottomEncoderValue>
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <bottomEncoderValue>
     4aa:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     4ae:	8c 70       	andi	r24, 0x0C	; 12
     4b0:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <encoderPortStates>
     4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <__vector_4+0x34>
     4b6:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     4ba:	82 60       	ori	r24, 0x02	; 2
     4bc:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <encoderPortStates>
     4c0:	8f 91       	pop	r24
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <__vector_5>:
     4cc:	1f 92       	push	r1
     4ce:	0f 92       	push	r0
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	0f 92       	push	r0
     4d4:	11 24       	eor	r1, r1
     4d6:	8f 93       	push	r24
     4d8:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     4dc:	83 ff       	sbrs	r24, 3
     4de:	0b c0       	rjmp	.+22     	; 0x4f6 <__vector_5+0x2a>
     4e0:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <topEncoderValue>
     4e4:	8f 5f       	subi	r24, 0xFF	; 255
     4e6:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <topEncoderValue>
     4ea:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     4ee:	83 70       	andi	r24, 0x03	; 3
     4f0:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <encoderPortStates>
     4f4:	05 c0       	rjmp	.+10     	; 0x500 <__vector_5+0x34>
     4f6:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     4fa:	84 60       	ori	r24, 0x04	; 4
     4fc:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <encoderPortStates>
     500:	8f 91       	pop	r24
     502:	0f 90       	pop	r0
     504:	0f be       	out	0x3f, r0	; 63
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <__vector_6>:
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	8f 93       	push	r24
     518:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     51c:	82 ff       	sbrs	r24, 2
     51e:	0b c0       	rjmp	.+22     	; 0x536 <__vector_6+0x2a>
     520:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <topEncoderValue>
     524:	81 50       	subi	r24, 0x01	; 1
     526:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <topEncoderValue>
     52a:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     52e:	83 70       	andi	r24, 0x03	; 3
     530:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <encoderPortStates>
     534:	05 c0       	rjmp	.+10     	; 0x540 <__vector_6+0x34>
     536:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <encoderPortStates>
     53a:	88 60       	ori	r24, 0x08	; 8
     53c:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <encoderPortStates>
     540:	8f 91       	pop	r24
     542:	0f 90       	pop	r0
     544:	0f be       	out	0x3f, r0	; 63
     546:	0f 90       	pop	r0
     548:	1f 90       	pop	r1
     54a:	18 95       	reti

0000054c <listenEncoders>:
	//this will happen every millisecond. 
	
}

void listenEncoders(Pattern *currentPattern, Globals *currentGlobals)
{
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	9c 01       	movw	r18, r24
     552:	fb 01       	movw	r30, r22
	if(topEncoderValue!=topEncoderLastValue)
     554:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <topEncoderValue>
     558:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <topEncoderLastValue>
     55c:	98 17       	cp	r25, r24
     55e:	89 f0       	breq	.+34     	; 0x582 <listenEncoders+0x36>
	{
		currentGlobals->menuState = ((topEncoderValue%4)<<4);
     560:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <topEncoderValue>
     564:	93 70       	andi	r25, 0x03	; 3
     566:	92 95       	swap	r25
     568:	90 7f       	andi	r25, 0xF0	; 240
     56a:	92 87       	std	Z+10, r25	; 0x0a
		bottomEncoderValue = 0; 
     56c:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <bottomEncoderValue>
		bottomEncoderLastValue = 0; 
     570:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <bottomEncoderLastValue>
		currentGlobals->valueChangeFlag |= (1<<encoderChange);
     574:	86 85       	ldd	r24, Z+14	; 0x0e
     576:	81 60       	ori	r24, 0x01	; 1
     578:	86 87       	std	Z+14, r24	; 0x0e
		topEncoderLastValue = topEncoderValue;
     57a:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <topEncoderValue>
     57e:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <topEncoderLastValue>
	}
	
	if(bottomEncoderValue!=bottomEncoderLastValue)
     582:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <bottomEncoderValue>
     586:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <bottomEncoderLastValue>
     58a:	98 17       	cp	r25, r24
     58c:	09 f4       	brne	.+2      	; 0x590 <listenEncoders+0x44>
     58e:	fe c1       	rjmp	.+1020   	; 0x98c <listenEncoders+0x440>
	{
		 uint8_t menuSub = bottomEncoderValue - bottomEncoderLastValue;
     590:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <bottomEncoderValue>
     594:	a9 2f       	mov	r26, r25
     596:	a8 1b       	sub	r26, r24
		 currentGlobals->valueChangeFlag |= (1<<encoderChange);
     598:	96 85       	ldd	r25, Z+14	; 0x0e
     59a:	91 60       	ori	r25, 0x01	; 1
     59c:	96 87       	std	Z+14, r25	; 0x0e
		 			//if this value is negative, we increase the menu.
		 			//if positive, we decrement the menu.
		switch(currentGlobals->menuState)
     59e:	42 85       	ldd	r20, Z+10	; 0x0a
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	4b 33       	cpi	r20, 0x3B	; 59
     5a4:	51 05       	cpc	r21, r1
     5a6:	08 f0       	brcs	.+2      	; 0x5aa <listenEncoders+0x5e>
     5a8:	ed c1       	rjmp	.+986    	; 0x984 <listenEncoders+0x438>
     5aa:	ef 01       	movw	r28, r30
     5ac:	fa 01       	movw	r30, r20
     5ae:	88 27       	eor	r24, r24
     5b0:	ee 58       	subi	r30, 0x8E	; 142
     5b2:	ff 4f       	sbci	r31, 0xFF	; 255
     5b4:	8f 4f       	sbci	r24, 0xFF	; 255
     5b6:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <__tablejump2__>
		{
			case PreformanceModeInit:
			if(menuSub==1)
     5ba:	a1 30       	cpi	r26, 0x01	; 1
     5bc:	41 f4       	brne	.+16     	; 0x5ce <listenEncoders+0x82>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     5be:	8f 81       	ldd	r24, Y+7	; 0x07
     5c0:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     5c2:	11 f0       	breq	.+4      	; 0x5c8 <listenEncoders+0x7c>
		switch(currentGlobals->menuState)
		{
			case PreformanceModeInit:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     5c4:	8f 83       	std	Y+7, r24	; 0x07
     5c6:	0b c0       	rjmp	.+22     	; 0x5de <listenEncoders+0x92>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     5c8:	8f ef       	ldi	r24, 0xFF	; 255
     5ca:	8f 83       	std	Y+7, r24	; 0x07
     5cc:	08 c0       	rjmp	.+16     	; 0x5de <listenEncoders+0x92>
				}
				
			}else if(menuSub==255) //we don't want to hit this when switching menus after changing from the sequencer. 
     5ce:	af 3f       	cpi	r26, 0xFF	; 255
     5d0:	31 f4       	brne	.+12     	; 0x5de <listenEncoders+0x92>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     5d2:	8f 81       	ldd	r24, Y+7	; 0x07
     5d4:	81 50       	subi	r24, 0x01	; 1
     5d6:	10 f0       	brcs	.+4      	; 0x5dc <listenEncoders+0x90>
     5d8:	8f 83       	std	Y+7, r24	; 0x07
     5da:	01 c0       	rjmp	.+2      	; 0x5de <listenEncoders+0x92>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     5dc:	1f 82       	std	Y+7, r1	; 0x07
				}
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     5de:	6f 81       	ldd	r22, Y+7	; 0x07
     5e0:	c9 01       	movw	r24, r18
     5e2:	0e 94 b0 1b 	call	0x3760	; 0x3760 <eepromLoadPattern>
			break;
     5e6:	ce c1       	rjmp	.+924    	; 0x984 <listenEncoders+0x438>
			
			case SequencerMenuArrow1:			
			if(menuSub==1)
     5e8:	a1 30       	cpi	r26, 0x01	; 1
     5ea:	19 f4       	brne	.+6      	; 0x5f2 <listenEncoders+0xa6>
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     5ec:	83 e1       	ldi	r24, 0x13	; 19
     5ee:	8a 87       	std	Y+10, r24	; 0x0a
     5f0:	c9 c1       	rjmp	.+914    	; 0x984 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     5f2:	82 e1       	ldi	r24, 0x12	; 18
     5f4:	8a 87       	std	Y+10, r24	; 0x0a
     5f6:	c6 c1       	rjmp	.+908    	; 0x984 <listenEncoders+0x438>
			}
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
     5f8:	a1 30       	cpi	r26, 0x01	; 1
     5fa:	41 f4       	brne	.+16     	; 0x60c <listenEncoders+0xc0>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     5fc:	8f 81       	ldd	r24, Y+7	; 0x07
     5fe:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     600:	11 f0       	breq	.+4      	; 0x606 <listenEncoders+0xba>
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     602:	8f 83       	std	Y+7, r24	; 0x07
     604:	09 c0       	rjmp	.+18     	; 0x618 <listenEncoders+0xcc>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     606:	8f ef       	ldi	r24, 0xFF	; 255
     608:	8f 83       	std	Y+7, r24	; 0x07
     60a:	06 c0       	rjmp	.+12     	; 0x618 <listenEncoders+0xcc>
				}
		
			}else
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     60c:	8f 81       	ldd	r24, Y+7	; 0x07
     60e:	81 50       	subi	r24, 0x01	; 1
     610:	10 f0       	brcs	.+4      	; 0x616 <listenEncoders+0xca>
     612:	8f 83       	std	Y+7, r24	; 0x07
     614:	01 c0       	rjmp	.+2      	; 0x618 <listenEncoders+0xcc>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     616:	1f 82       	std	Y+7, r1	; 0x07
				}	
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     618:	6f 81       	ldd	r22, Y+7	; 0x07
     61a:	c9 01       	movw	r24, r18
     61c:	0e 94 b0 1b 	call	0x3760	; 0x3760 <eepromLoadPattern>
			//this keeps the knob reads that will happen right after the eeprom load to write over the loaded values.
			//Now when you load a pattern, the saved positions of the knobs are unchanged until you turn a knob. 
			break;
     620:	b1 c1       	rjmp	.+866    	; 0x984 <listenEncoders+0x438>
			
			case SequencerMenuArrow2:
			if(menuSub==1)
     622:	a1 30       	cpi	r26, 0x01	; 1
     624:	19 f4       	brne	.+6      	; 0x62c <listenEncoders+0xe0>
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     626:	81 e1       	ldi	r24, 0x11	; 17
     628:	8a 87       	std	Y+10, r24	; 0x0a
     62a:	ac c1       	rjmp	.+856    	; 0x984 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     62c:	83 e1       	ldi	r24, 0x13	; 19
     62e:	8a 87       	std	Y+10, r24	; 0x0a
     630:	a9 c1       	rjmp	.+850    	; 0x984 <listenEncoders+0x438>
			}
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
     632:	a1 30       	cpi	r26, 0x01	; 1
     634:	79 f4       	brne	.+30     	; 0x654 <listenEncoders+0x108>
			{
				currentPattern->numSteps++;
     636:	f9 01       	movw	r30, r18
     638:	e6 53       	subi	r30, 0x36	; 54
     63a:	ff 4f       	sbci	r31, 0xFF	; 255
     63c:	90 81       	ld	r25, Z
     63e:	9f 5f       	subi	r25, 0xFF	; 255
				if(currentPattern->numSteps>64)
     640:	91 34       	cpi	r25, 0x41	; 65
     642:	10 f4       	brcc	.+4      	; 0x648 <listenEncoders+0xfc>
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
			{
				currentPattern->numSteps++;
     644:	90 83       	st	Z, r25
     646:	9e c1       	rjmp	.+828    	; 0x984 <listenEncoders+0x438>
				if(currentPattern->numSteps>64)
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
     648:	f9 01       	movw	r30, r18
     64a:	e6 53       	subi	r30, 0x36	; 54
     64c:	ff 4f       	sbci	r31, 0xFF	; 255
     64e:	80 e4       	ldi	r24, 0x40	; 64
     650:	80 83       	st	Z, r24
     652:	98 c1       	rjmp	.+816    	; 0x984 <listenEncoders+0x438>
				}
			}else
			{
				currentPattern->numSteps--;
     654:	f9 01       	movw	r30, r18
     656:	e6 53       	subi	r30, 0x36	; 54
     658:	ff 4f       	sbci	r31, 0xFF	; 255
     65a:	90 81       	ld	r25, Z
     65c:	91 50       	subi	r25, 0x01	; 1
				if(currentPattern->numSteps<1)
     65e:	11 f0       	breq	.+4      	; 0x664 <listenEncoders+0x118>
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
				}
			}else
			{
				currentPattern->numSteps--;
     660:	90 83       	st	Z, r25
     662:	90 c1       	rjmp	.+800    	; 0x984 <listenEncoders+0x438>
				if(currentPattern->numSteps<1)
				{//we can't have a 0 step pattern. 
					currentPattern->numSteps=1;
     664:	f9 01       	movw	r30, r18
     666:	e6 53       	subi	r30, 0x36	; 54
     668:	ff 4f       	sbci	r31, 0xFF	; 255
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	80 83       	st	Z, r24
     66e:	8a c1       	rjmp	.+788    	; 0x984 <listenEncoders+0x438>
				}
			}
			break;
			
			case SequencerMenuArrow3:;
			if(menuSub==1)
     670:	a1 30       	cpi	r26, 0x01	; 1
     672:	19 f4       	brne	.+6      	; 0x67a <listenEncoders+0x12e>
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     674:	82 e1       	ldi	r24, 0x12	; 18
     676:	8a 87       	std	Y+10, r24	; 0x0a
     678:	85 c1       	rjmp	.+778    	; 0x984 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     67a:	81 e1       	ldi	r24, 0x11	; 17
     67c:	8a 87       	std	Y+10, r24	; 0x0a
     67e:	82 c1       	rjmp	.+772    	; 0x984 <listenEncoders+0x438>
			}
			break;
			
			case SequencerMenuArrow3Select:
			//change current step number
			if(menuSub==1)
     680:	a1 30       	cpi	r26, 0x01	; 1
     682:	69 f4       	brne	.+26     	; 0x69e <listenEncoders+0x152>
			{
				currentGlobals->currentStep++;
     684:	98 85       	ldd	r25, Y+8	; 0x08
     686:	9f 5f       	subi	r25, 0xFF	; 255
     688:	98 87       	std	Y+8, r25	; 0x08
				if(currentGlobals->currentStep>=currentPattern->numSteps)
     68a:	f9 01       	movw	r30, r18
     68c:	e6 53       	subi	r30, 0x36	; 54
     68e:	ff 4f       	sbci	r31, 0xFF	; 255
     690:	80 81       	ld	r24, Z
     692:	98 17       	cp	r25, r24
     694:	08 f4       	brcc	.+2      	; 0x698 <listenEncoders+0x14c>
     696:	76 c1       	rjmp	.+748    	; 0x984 <listenEncoders+0x438>
				{//our ceiling is the maximum number of steps.
					currentGlobals->currentStep=(currentPattern->numSteps)-1;
     698:	81 50       	subi	r24, 0x01	; 1
     69a:	88 87       	std	Y+8, r24	; 0x08
     69c:	73 c1       	rjmp	.+742    	; 0x984 <listenEncoders+0x438>
				}
			}else
			{
				currentGlobals->currentStep--;
     69e:	98 85       	ldd	r25, Y+8	; 0x08
     6a0:	91 50       	subi	r25, 0x01	; 1
     6a2:	98 87       	std	Y+8, r25	; 0x08
				if(currentGlobals->currentStep>currentPattern->numSteps)
     6a4:	f9 01       	movw	r30, r18
     6a6:	e6 53       	subi	r30, 0x36	; 54
     6a8:	ff 4f       	sbci	r31, 0xFF	; 255
     6aa:	80 81       	ld	r24, Z
     6ac:	89 17       	cp	r24, r25
     6ae:	08 f0       	brcs	.+2      	; 0x6b2 <listenEncoders+0x166>
     6b0:	69 c1       	rjmp	.+722    	; 0x984 <listenEncoders+0x438>
				{//do no write notes to step 0.
					currentGlobals->currentStep=0;
     6b2:	18 86       	std	Y+8, r1	; 0x08
     6b4:	67 c1       	rjmp	.+718    	; 0x984 <listenEncoders+0x438>
				}				
			}
			break;
			
			case TrackMenuArrow1:;
			if(menuSub==1)
     6b6:	a1 30       	cpi	r26, 0x01	; 1
     6b8:	19 f4       	brne	.+6      	; 0x6c0 <listenEncoders+0x174>
			{
				currentGlobals->menuState = TrackMenuArrow5;
     6ba:	85 e2       	ldi	r24, 0x25	; 37
     6bc:	8a 87       	std	Y+10, r24	; 0x0a
     6be:	62 c1       	rjmp	.+708    	; 0x984 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow2;
     6c0:	82 e2       	ldi	r24, 0x22	; 34
     6c2:	8a 87       	std	Y+10, r24	; 0x0a
     6c4:	5f c1       	rjmp	.+702    	; 0x984 <listenEncoders+0x438>
			}
			break;
			
			case TrackMenuArrow1Select:;
			uint16_t currentSample = ((currentPattern->trackSampleMSB[currentGlobals->currentTrack])<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     6c6:	89 85       	ldd	r24, Y+9	; 0x09
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	b9 01       	movw	r22, r18
     6cc:	68 0f       	add	r22, r24
     6ce:	79 1f       	adc	r23, r25
     6d0:	fb 01       	movw	r30, r22
     6d2:	e8 56       	subi	r30, 0x68	; 104
     6d4:	ff 4f       	sbci	r31, 0xFF	; 255
     6d6:	40 81       	ld	r20, Z
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	54 2f       	mov	r21, r20
     6dc:	44 27       	eor	r20, r20
     6de:	70 96       	adiw	r30, 0x10	; 16
     6e0:	60 81       	ld	r22, Z
     6e2:	46 2b       	or	r20, r22
			if(menuSub==1)
     6e4:	a1 30       	cpi	r26, 0x01	; 1
     6e6:	49 f4       	brne	.+18     	; 0x6fa <listenEncoders+0x1ae>
     6e8:	4f 5f       	subi	r20, 0xFF	; 255
     6ea:	5f 4f       	sbci	r21, 0xFF	; 255
     6ec:	41 30       	cpi	r20, 0x01	; 1
     6ee:	60 e1       	ldi	r22, 0x10	; 16
     6f0:	56 07       	cpc	r21, r22
     6f2:	40 f0       	brcs	.+16     	; 0x704 <listenEncoders+0x1b8>
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	50 e1       	ldi	r21, 0x10	; 16
     6f8:	05 c0       	rjmp	.+10     	; 0x704 <listenEncoders+0x1b8>
				{//maximum number of indexable samples.
					currentSample=4096;
				}
			}else
			{//no samples in space 0.
				currentSample--;
     6fa:	41 50       	subi	r20, 0x01	; 1
     6fc:	51 09       	sbc	r21, r1
				if(currentSample<1)
     6fe:	11 f4       	brne	.+4      	; 0x704 <listenEncoders+0x1b8>
				{
					currentSample=1;
     700:	41 e0       	ldi	r20, 0x01	; 1
     702:	50 e0       	ldi	r21, 0x00	; 0
				}
			}
			currentPattern->trackSampleLSB[currentGlobals->currentTrack] = (currentSample&0x00FF);//we want to lob off the top 8 bits, just in case. May be unnecessary.
     704:	82 0f       	add	r24, r18
     706:	93 1f       	adc	r25, r19
     708:	fc 01       	movw	r30, r24
     70a:	e8 55       	subi	r30, 0x58	; 88
     70c:	ff 4f       	sbci	r31, 0xFF	; 255
     70e:	40 83       	st	Z, r20
			currentPattern->trackSampleMSB[currentGlobals->currentTrack] = (currentSample>>8); 
     710:	89 85       	ldd	r24, Y+9	; 0x09
     712:	28 0f       	add	r18, r24
     714:	31 1d       	adc	r19, r1
     716:	f9 01       	movw	r30, r18
     718:	e8 56       	subi	r30, 0x68	; 104
     71a:	ff 4f       	sbci	r31, 0xFF	; 255
     71c:	50 83       	st	Z, r21
			break;
     71e:	32 c1       	rjmp	.+612    	; 0x984 <listenEncoders+0x438>
			
			case TrackMenuArrow2:
			if(menuSub==1)
     720:	a1 30       	cpi	r26, 0x01	; 1
     722:	19 f4       	brne	.+6      	; 0x72a <listenEncoders+0x1de>
			{
				currentGlobals->menuState = TrackMenuArrow1;
     724:	81 e2       	ldi	r24, 0x21	; 33
     726:	8a 87       	std	Y+10, r24	; 0x0a
     728:	2d c1       	rjmp	.+602    	; 0x984 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow3;
     72a:	83 e2       	ldi	r24, 0x23	; 35
     72c:	8a 87       	std	Y+10, r24	; 0x0a
     72e:	2a c1       	rjmp	.+596    	; 0x984 <listenEncoders+0x438>
			
			case TrackMenuArrow2Select:
			//change play mode of currently selected track
			//since we only have two play modes currently,
			//we only need to flip the play mode.
			currentPattern->trackPlayMode[currentGlobals->currentTrack] = (!(currentPattern->trackPlayMode[currentGlobals->currentTrack]))&(0b00000001);
     730:	89 85       	ldd	r24, Y+9	; 0x09
     732:	28 0f       	add	r18, r24
     734:	31 1d       	adc	r19, r1
     736:	f9 01       	movw	r30, r18
     738:	e8 57       	subi	r30, 0x78	; 120
     73a:	ff 4f       	sbci	r31, 0xFF	; 255
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	90 81       	ld	r25, Z
     740:	91 11       	cpse	r25, r1
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	80 83       	st	Z, r24
			//flip all bits, mask for first bit. 
			break;
     746:	1e c1       	rjmp	.+572    	; 0x984 <listenEncoders+0x438>
			
			case TrackMenuArrow3:
			if(menuSub==1)
     748:	a1 30       	cpi	r26, 0x01	; 1
     74a:	19 f4       	brne	.+6      	; 0x752 <listenEncoders+0x206>
			{
				currentGlobals->menuState = TrackMenuArrow2;
     74c:	82 e2       	ldi	r24, 0x22	; 34
     74e:	8a 87       	std	Y+10, r24	; 0x0a
     750:	19 c1       	rjmp	.+562    	; 0x984 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow4;
     752:	84 e2       	ldi	r24, 0x24	; 36
     754:	8a 87       	std	Y+10, r24	; 0x0a
     756:	16 c1       	rjmp	.+556    	; 0x984 <listenEncoders+0x438>
			}
			break;
			
			case TrackMenuArrow3Select:
			
			if(menuSub==1)
     758:	a1 30       	cpi	r26, 0x01	; 1
     75a:	b1 f4       	brne	.+44     	; 0x788 <listenEncoders+0x23c>
			{
				//indexing might be an issue here, don't remember if this is 0 indexed or not. 
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1 ;
     75c:	89 85       	ldd	r24, Y+9	; 0x09
     75e:	f9 01       	movw	r30, r18
     760:	e8 0f       	add	r30, r24
     762:	f1 1d       	adc	r31, r1
     764:	80 8d       	ldd	r24, Z+24	; 0x18
     766:	8f 5f       	subi	r24, 0xFF	; 255
     768:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     76a:	89 85       	ldd	r24, Y+9	; 0x09
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	f9 01       	movw	r30, r18
     770:	e8 0f       	add	r30, r24
     772:	f9 1f       	adc	r31, r25
     774:	40 8d       	ldd	r20, Z+24	; 0x18
     776:	48 30       	cpi	r20, 0x08	; 8
     778:	08 f4       	brcc	.+2      	; 0x77c <listenEncoders+0x230>
     77a:	04 c1       	rjmp	.+520    	; 0x984 <listenEncoders+0x438>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=7;
     77c:	f9 01       	movw	r30, r18
     77e:	e8 0f       	add	r30, r24
     780:	f9 1f       	adc	r31, r25
     782:	87 e0       	ldi	r24, 0x07	; 7
     784:	80 8f       	std	Z+24, r24	; 0x18
     786:	fe c0       	rjmp	.+508    	; 0x984 <listenEncoders+0x438>
				}
			}else
			{
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])-1;
     788:	89 85       	ldd	r24, Y+9	; 0x09
     78a:	f9 01       	movw	r30, r18
     78c:	e8 0f       	add	r30, r24
     78e:	f1 1d       	adc	r31, r1
     790:	80 8d       	ldd	r24, Z+24	; 0x18
     792:	81 50       	subi	r24, 0x01	; 1
     794:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     796:	89 85       	ldd	r24, Y+9	; 0x09
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	f9 01       	movw	r30, r18
     79c:	e8 0f       	add	r30, r24
     79e:	f9 1f       	adc	r31, r25
     7a0:	40 8d       	ldd	r20, Z+24	; 0x18
     7a2:	48 30       	cpi	r20, 0x08	; 8
     7a4:	08 f4       	brcc	.+2      	; 0x7a8 <listenEncoders+0x25c>
     7a6:	ee c0       	rjmp	.+476    	; 0x984 <listenEncoders+0x438>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=0;
     7a8:	f9 01       	movw	r30, r18
     7aa:	e8 0f       	add	r30, r24
     7ac:	f9 1f       	adc	r31, r25
     7ae:	10 8e       	std	Z+24, r1	; 0x18
     7b0:	e9 c0       	rjmp	.+466    	; 0x984 <listenEncoders+0x438>
				}
			}
			break;
			
			case TrackMenuArrow4:
			if(menuSub==1)
     7b2:	a1 30       	cpi	r26, 0x01	; 1
     7b4:	19 f4       	brne	.+6      	; 0x7bc <listenEncoders+0x270>
			{
				currentGlobals->menuState = TrackMenuArrow3;
     7b6:	83 e2       	ldi	r24, 0x23	; 35
     7b8:	8a 87       	std	Y+10, r24	; 0x0a
     7ba:	e4 c0       	rjmp	.+456    	; 0x984 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow5;
     7bc:	85 e2       	ldi	r24, 0x25	; 37
     7be:	8a 87       	std	Y+10, r24	; 0x0a
     7c0:	e1 c0       	rjmp	.+450    	; 0x984 <listenEncoders+0x438>
			}
			break;
			
			case TrackMenuArrow4Select:
			if(menuSub==1)
     7c2:	a1 30       	cpi	r26, 0x01	; 1
     7c4:	d9 f4       	brne	.+54     	; 0x7fc <listenEncoders+0x2b0>
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])++;
     7c6:	89 85       	ldd	r24, Y+9	; 0x09
     7c8:	f9 01       	movw	r30, r18
     7ca:	e8 0f       	add	r30, r24
     7cc:	f1 1d       	adc	r31, r1
     7ce:	e5 51       	subi	r30, 0x15	; 21
     7d0:	ff 4f       	sbci	r31, 0xFF	; 255
     7d2:	80 81       	ld	r24, Z
     7d4:	8f 5f       	subi	r24, 0xFF	; 255
     7d6:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>3)
     7d8:	89 85       	ldd	r24, Y+9	; 0x09
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	f9 01       	movw	r30, r18
     7de:	e8 0f       	add	r30, r24
     7e0:	f9 1f       	adc	r31, r25
     7e2:	e5 51       	subi	r30, 0x15	; 21
     7e4:	ff 4f       	sbci	r31, 0xFF	; 255
     7e6:	40 81       	ld	r20, Z
     7e8:	44 30       	cpi	r20, 0x04	; 4
     7ea:	08 f1       	brcs	.+66     	; 0x82e <listenEncoders+0x2e2>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=3;
     7ec:	82 0f       	add	r24, r18
     7ee:	93 1f       	adc	r25, r19
     7f0:	fc 01       	movw	r30, r24
     7f2:	e5 51       	subi	r30, 0x15	; 21
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	80 83       	st	Z, r24
     7fa:	19 c0       	rjmp	.+50     	; 0x82e <listenEncoders+0x2e2>
				}
			}else
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])--;
     7fc:	89 85       	ldd	r24, Y+9	; 0x09
     7fe:	f9 01       	movw	r30, r18
     800:	e8 0f       	add	r30, r24
     802:	f1 1d       	adc	r31, r1
     804:	e5 51       	subi	r30, 0x15	; 21
     806:	ff 4f       	sbci	r31, 0xFF	; 255
     808:	80 81       	ld	r24, Z
     80a:	81 50       	subi	r24, 0x01	; 1
     80c:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>3)
     80e:	89 85       	ldd	r24, Y+9	; 0x09
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	f9 01       	movw	r30, r18
     814:	e8 0f       	add	r30, r24
     816:	f9 1f       	adc	r31, r25
     818:	e5 51       	subi	r30, 0x15	; 21
     81a:	ff 4f       	sbci	r31, 0xFF	; 255
     81c:	40 81       	ld	r20, Z
     81e:	44 30       	cpi	r20, 0x04	; 4
     820:	30 f0       	brcs	.+12     	; 0x82e <listenEncoders+0x2e2>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=0;
     822:	82 0f       	add	r24, r18
     824:	93 1f       	adc	r25, r19
     826:	fc 01       	movw	r30, r24
     828:	e5 51       	subi	r30, 0x15	; 21
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	10 82       	st	Z, r1
				}
			}
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
     82e:	89 85       	ldd	r24, Y+9	; 0x09
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	f9 01       	movw	r30, r18
     834:	e8 0f       	add	r30, r24
     836:	f9 1f       	adc	r31, r25
     838:	e5 51       	subi	r30, 0x15	; 21
     83a:	ff 4f       	sbci	r31, 0xFF	; 255
     83c:	40 81       	ld	r20, Z
     83e:	4d 7f       	andi	r20, 0xFD	; 253
     840:	79 f4       	brne	.+30     	; 0x860 <listenEncoders+0x314>
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
     842:	28 0f       	add	r18, r24
     844:	39 1f       	adc	r19, r25
     846:	f9 01       	movw	r30, r18
     848:	e8 56       	subi	r30, 0x68	; 104
     84a:	ff 4f       	sbci	r31, 0xFF	; 255
     84c:	d9 01       	movw	r26, r18
     84e:	a8 55       	subi	r26, 0x58	; 88
     850:	bf 4f       	sbci	r27, 0xFF	; 255
     852:	2a eb       	ldi	r18, 0xBA	; 186
     854:	4f ef       	ldi	r20, 0xFF	; 255
     856:	60 81       	ld	r22, Z
     858:	8c 91       	ld	r24, X
     85a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <setTrackVolume>
     85e:	92 c0       	rjmp	.+292    	; 0x984 <listenEncoders+0x438>
			}else
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],
     860:	f9 01       	movw	r30, r18
     862:	e8 0f       	add	r30, r24
     864:	f9 1f       	adc	r31, r25
     866:	ef 01       	movw	r28, r30
     868:	c8 56       	subi	r28, 0x68	; 104
     86a:	df 4f       	sbci	r29, 0xFF	; 255
     86c:	df 01       	movw	r26, r30
     86e:	a8 55       	subi	r26, 0x58	; 88
     870:	bf 4f       	sbci	r27, 0xFF	; 255
     872:	20 a5       	ldd	r18, Z+40	; 0x28
     874:	40 ad       	ldd	r20, Z+56	; 0x38
     876:	68 81       	ld	r22, Y
     878:	8c 91       	ld	r24, X
     87a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <setTrackVolume>
     87e:	82 c0       	rjmp	.+260    	; 0x984 <listenEncoders+0x438>
				currentPattern->trackMainVolumeLSB[currentGlobals->currentTrack],currentPattern->trackMainVolumeMSB[currentGlobals->currentTrack]);		
			}
			break;
			
			case TrackMenuArrow5:
			if(menuSub==1)
     880:	a1 30       	cpi	r26, 0x01	; 1
     882:	19 f4       	brne	.+6      	; 0x88a <listenEncoders+0x33e>
			{
				currentGlobals->menuState = TrackMenuArrow4;
     884:	84 e2       	ldi	r24, 0x24	; 36
     886:	8a 87       	std	Y+10, r24	; 0x0a
     888:	7d c0       	rjmp	.+250    	; 0x984 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow1;
     88a:	81 e2       	ldi	r24, 0x21	; 33
     88c:	8a 87       	std	Y+10, r24	; 0x0a
     88e:	7a c0       	rjmp	.+244    	; 0x984 <listenEncoders+0x438>
			}
			break;
			
			case TrackMenuArrow5Select:;
			uint16_t sustainTime = (currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack])|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);	
     890:	49 85       	ldd	r20, Y+9	; 0x09
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	b9 01       	movw	r22, r18
     896:	64 0f       	add	r22, r20
     898:	75 1f       	adc	r23, r21
     89a:	fb 01       	movw	r30, r22
     89c:	e5 53       	subi	r30, 0x35	; 53
     89e:	ff 4f       	sbci	r31, 0xFF	; 255
     8a0:	80 81       	ld	r24, Z
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	98 2f       	mov	r25, r24
     8a6:	88 27       	eor	r24, r24
     8a8:	70 96       	adiw	r30, 0x10	; 16
     8aa:	60 81       	ld	r22, Z
     8ac:	86 2b       	or	r24, r22
			if(menuSub==1)
     8ae:	a1 30       	cpi	r26, 0x01	; 1
     8b0:	71 f4       	brne	.+28     	; 0x8ce <listenEncoders+0x382>
			{
				if((currentGlobals->currentGPButtons)&(0x04))
     8b2:	6a 81       	ldd	r22, Y+2	; 0x02
     8b4:	62 ff       	sbrs	r22, 2
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <listenEncoders+0x370>
				{
					sustainTime++;
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <listenEncoders+0x374>
				}
				else
				{
					sustainTime = sustainTime+236;
     8bc:	84 51       	subi	r24, 0x14	; 20
     8be:	9f 4f       	sbci	r25, 0xFF	; 255
     8c0:	81 36       	cpi	r24, 0x61	; 97
     8c2:	ea ee       	ldi	r30, 0xEA	; 234
     8c4:	9e 07       	cpc	r25, r30
     8c6:	80 f0       	brcs	.+32     	; 0x8e8 <listenEncoders+0x39c>
     8c8:	80 e6       	ldi	r24, 0x60	; 96
     8ca:	9a ee       	ldi	r25, 0xEA	; 234
     8cc:	0d c0       	rjmp	.+26     	; 0x8e8 <listenEncoders+0x39c>
				{
					sustainTime = 60000;
				}
			}else
			{
				if((currentGlobals->currentGPButtons)&(0x04))
     8ce:	6a 81       	ldd	r22, Y+2	; 0x02
     8d0:	62 ff       	sbrs	r22, 2
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <listenEncoders+0x38c>
				{
					sustainTime--;
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <listenEncoders+0x390>
				}else
				{	
					sustainTime = sustainTime - 236;
     8d8:	8c 5e       	subi	r24, 0xEC	; 236
     8da:	91 09       	sbc	r25, r1
				}
				
				if(sustainTime>60000)
     8dc:	81 36       	cpi	r24, 0x61	; 97
     8de:	fa ee       	ldi	r31, 0xEA	; 234
     8e0:	9f 07       	cpc	r25, r31
     8e2:	10 f0       	brcs	.+4      	; 0x8e8 <listenEncoders+0x39c>
				{
					sustainTime = 0;
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
			currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack] = (sustainTime>>8);
     8e8:	42 0f       	add	r20, r18
     8ea:	53 1f       	adc	r21, r19
     8ec:	fa 01       	movw	r30, r20
     8ee:	e5 53       	subi	r30, 0x35	; 53
     8f0:	ff 4f       	sbci	r31, 0xFF	; 255
     8f2:	90 83       	st	Z, r25
			currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] = sustainTime; //upper bits will be truncated.
     8f4:	99 85       	ldd	r25, Y+9	; 0x09
     8f6:	29 0f       	add	r18, r25
     8f8:	31 1d       	adc	r19, r1
     8fa:	f9 01       	movw	r30, r18
     8fc:	e5 52       	subi	r30, 0x25	; 37
     8fe:	ff 4f       	sbci	r31, 0xFF	; 255
     900:	80 83       	st	Z, r24

			break;
     902:	40 c0       	rjmp	.+128    	; 0x984 <listenEncoders+0x438>
			
			case GlobalMenuArrow1:
			if(menuSub==1)
     904:	a1 30       	cpi	r26, 0x01	; 1
     906:	19 f4       	brne	.+6      	; 0x90e <listenEncoders+0x3c2>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     908:	81 e3       	ldi	r24, 0x31	; 49
     90a:	8a 87       	std	Y+10, r24	; 0x0a
     90c:	3b c0       	rjmp	.+118    	; 0x984 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     90e:	82 e3       	ldi	r24, 0x32	; 50
     910:	8a 87       	std	Y+10, r24	; 0x0a
     912:	38 c0       	rjmp	.+112    	; 0x984 <listenEncoders+0x438>
			}
			break;
			
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
     914:	a1 30       	cpi	r26, 0x01	; 1
     916:	49 f4       	brne	.+18     	; 0x92a <listenEncoders+0x3de>
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     918:	88 89       	ldd	r24, Y+16	; 0x10
     91a:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->midiChannel>15)
     91c:	80 31       	cpi	r24, 0x10	; 16
     91e:	10 f4       	brcc	.+4      	; 0x924 <listenEncoders+0x3d8>
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     920:	88 8b       	std	Y+16, r24	; 0x10
     922:	30 c0       	rjmp	.+96     	; 0x984 <listenEncoders+0x438>
				if(currentGlobals->midiChannel>15)
				{
					currentGlobals->midiChannel=15;
     924:	8f e0       	ldi	r24, 0x0F	; 15
     926:	88 8b       	std	Y+16, r24	; 0x10
     928:	2d c0       	rjmp	.+90     	; 0x984 <listenEncoders+0x438>
				}
			}
			else
			{
				//decrement midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)-1;
     92a:	88 89       	ldd	r24, Y+16	; 0x10
     92c:	81 50       	subi	r24, 0x01	; 1
     92e:	10 f0       	brcs	.+4      	; 0x934 <listenEncoders+0x3e8>
     930:	88 8b       	std	Y+16, r24	; 0x10
     932:	28 c0       	rjmp	.+80     	; 0x984 <listenEncoders+0x438>
				if(currentGlobals->midiChannel>254)
				{
					currentGlobals->midiChannel=0;
     934:	18 8a       	std	Y+16, r1	; 0x10
     936:	26 c0       	rjmp	.+76     	; 0x984 <listenEncoders+0x438>
				}
			}
			break;
			
			case GlobalMenuArrow2:
			if(menuSub==1)
     938:	a1 30       	cpi	r26, 0x01	; 1
     93a:	19 f4       	brne	.+6      	; 0x942 <listenEncoders+0x3f6>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     93c:	81 e3       	ldi	r24, 0x31	; 49
     93e:	8a 87       	std	Y+10, r24	; 0x0a
     940:	21 c0       	rjmp	.+66     	; 0x984 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     942:	82 e3       	ldi	r24, 0x32	; 50
     944:	8a 87       	std	Y+10, r24	; 0x0a
     946:	1e c0       	rjmp	.+60     	; 0x984 <listenEncoders+0x438>
			break;
			
			case GlobalMenuArrow2Select:;
			//change midi note for selected track.
			//midi range is 0 to 127.
			uint8_t currentMidiNote = currentGlobals->midiTrackNote[currentGlobals->currentTrack];
     948:	e9 85       	ldd	r30, Y+9	; 0x09
     94a:	2e 2f       	mov	r18, r30
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	ce 01       	movw	r24, r28
     950:	82 0f       	add	r24, r18
     952:	93 1f       	adc	r25, r19
     954:	fc 01       	movw	r30, r24
     956:	81 89       	ldd	r24, Z+17	; 0x11
			if(menuSub==1)
     958:	a1 30       	cpi	r26, 0x01	; 1
     95a:	21 f4       	brne	.+8      	; 0x964 <listenEncoders+0x418>
			{
				//not 100% sure how to set this up.
				currentMidiNote++;
     95c:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentMidiNote>127)
     95e:	32 f4       	brpl	.+12     	; 0x96c <listenEncoders+0x420>
				{
					currentMidiNote = 127;
     960:	8f e7       	ldi	r24, 0x7F	; 127
     962:	04 c0       	rjmp	.+8      	; 0x96c <listenEncoders+0x420>
				}
			}else
			{
				currentMidiNote--;
     964:	81 50       	subi	r24, 0x01	; 1
				if(currentMidiNote>128)
     966:	81 38       	cpi	r24, 0x81	; 129
     968:	08 f0       	brcs	.+2      	; 0x96c <listenEncoders+0x420>
				{
					currentMidiNote = 0;
     96a:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			currentGlobals->midiTrackNote[currentGlobals->currentTrack] = currentMidiNote;
     96c:	f9 01       	movw	r30, r18
     96e:	ec 0f       	add	r30, r28
     970:	fd 1f       	adc	r31, r29
     972:	81 8b       	std	Z+17, r24	; 0x11
			break;
     974:	07 c0       	rjmp	.+14     	; 0x984 <listenEncoders+0x438>
			
			case GlobalMenuArrow3:
			//currently unreachable, no settings live here atm		
			if(menuSub==1)
     976:	a1 30       	cpi	r26, 0x01	; 1
     978:	19 f4       	brne	.+6      	; 0x980 <listenEncoders+0x434>
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     97a:	82 e3       	ldi	r24, 0x32	; 50
     97c:	8a 87       	std	Y+10, r24	; 0x0a
     97e:	02 c0       	rjmp	.+4      	; 0x984 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     980:	81 e3       	ldi	r24, 0x31	; 49
     982:	8a 87       	std	Y+10, r24	; 0x0a
			
			case GlobalMenuArrow3Select:
			//nothing to put here yet.
			break;
		}
		bottomEncoderLastValue = bottomEncoderValue;
     984:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <bottomEncoderValue>
     988:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <bottomEncoderLastValue>
		//menuSub=0;
	}
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <listenEnoderReset>:
uint8_t listenEnoderReset()
{
	uint8_t returnMe = 2;
	if(topEncoderValue!=topEncoderLastValue){
     992:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <topEncoderValue>
     996:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <topEncoderLastValue>
     99a:	98 17       	cp	r25, r24
     99c:	21 f0       	breq	.+8      	; 0x9a6 <listenEnoderReset+0x14>
	returnMe = topEncoderValue%2; //should be 0 or 1.
     99e:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <topEncoderValue>
     9a2:	81 70       	andi	r24, 0x01	; 1
     9a4:	08 95       	ret
		//menuSub=0;
	}
}
uint8_t listenEnoderReset()
{
	uint8_t returnMe = 2;
     9a6:	82 e0       	ldi	r24, 0x02	; 2
	if(topEncoderValue!=topEncoderLastValue){
	returnMe = topEncoderValue%2; //should be 0 or 1.
	}
	return returnMe;
}
     9a8:	08 95       	ret

000009aa <initArrays>:
#define F_CPU 16000000UL


//takes an array less than 20 and fills it with blank characters
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	ec 01       	movw	r28, r24
	uint8_t lengthOfString = strlen(myString);
     9b4:	fa 01       	movw	r30, r20
     9b6:	01 90       	ld	r0, Z+
     9b8:	00 20       	and	r0, r0
     9ba:	e9 f7       	brne	.-6      	; 0x9b6 <initArrays+0xc>
     9bc:	31 97       	sbiw	r30, 0x01	; 1
     9be:	8f 01       	movw	r16, r30
     9c0:	04 1b       	sub	r16, r20
     9c2:	15 0b       	sbc	r17, r21
     9c4:	90 2f       	mov	r25, r16
	uint8_t charLeft = 20 - lengthOfString;
     9c6:	84 e1       	ldi	r24, 0x14	; 20
     9c8:	80 1b       	sub	r24, r16
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     9ca:	00 23       	and	r16, r16
     9cc:	a9 f0       	breq	.+42     	; 0x9f8 <initArrays+0x4e>
     9ce:	fa 01       	movw	r30, r20
     9d0:	25 e1       	ldi	r18, 0x15	; 21
     9d2:	26 9f       	mul	r18, r22
     9d4:	d0 01       	movw	r26, r0
     9d6:	27 9f       	mul	r18, r23
     9d8:	b0 0d       	add	r27, r0
     9da:	11 24       	eor	r1, r1
     9dc:	ac 0f       	add	r26, r28
     9de:	bd 1f       	adc	r27, r29
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	20 0f       	add	r18, r16
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	2f 5f       	subi	r18, 0xFF	; 255
     9e8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ea:	42 0f       	add	r20, r18
     9ec:	53 1f       	adc	r21, r19
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     9ee:	21 91       	ld	r18, Z+
     9f0:	2d 93       	st	X+, r18
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
	uint8_t lengthOfString = strlen(myString);
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     9f2:	e4 17       	cp	r30, r20
     9f4:	f5 07       	cpc	r31, r21
     9f6:	d9 f7       	brne	.-10     	; 0x9ee <initArrays+0x44>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     9f8:	88 23       	and	r24, r24
     9fa:	89 f0       	breq	.+34     	; 0xa1e <initArrays+0x74>
	{
		myArray[stringNumber][currentIndex] = ' ';
     9fc:	45 e1       	ldi	r20, 0x15	; 21
     9fe:	46 9f       	mul	r20, r22
     a00:	90 01       	movw	r18, r0
     a02:	47 9f       	mul	r20, r23
     a04:	30 0d       	add	r19, r0
     a06:	11 24       	eor	r1, r1
     a08:	c2 0f       	add	r28, r18
     a0a:	d3 1f       	adc	r29, r19
     a0c:	08 0f       	add	r16, r24
     a0e:	80 e2       	ldi	r24, 0x20	; 32
     a10:	fe 01       	movw	r30, r28
     a12:	e9 0f       	add	r30, r25
     a14:	f1 1d       	adc	r31, r1
     a16:	80 83       	st	Z, r24
		currentIndex++;
     a18:	9f 5f       	subi	r25, 0xFF	; 255
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     a1a:	90 13       	cpse	r25, r16
     a1c:	f9 cf       	rjmp	.-14     	; 0xa10 <initArrays+0x66>
	{
		myArray[stringNumber][currentIndex] = ' ';
		currentIndex++;
	}
}
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	08 95       	ret

00000a28 <initBank>:

void initBank(Pattern *currentInitPattern)
{
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	ac 01       	movw	r20, r24
     a2e:	fc 01       	movw	r30, r24
     a30:	e8 55       	subi	r30, 0x58	; 88
     a32:	ff 4f       	sbci	r31, 0xFF	; 255
     a34:	ec 01       	movw	r28, r24
     a36:	c8 57       	subi	r28, 0x78	; 120
     a38:	df 4f       	sbci	r29, 0xFF	; 255
     a3a:	dc 01       	movw	r26, r24
     a3c:	a5 51       	subi	r26, 0x15	; 21
     a3e:	bf 4f       	sbci	r27, 0xFF	; 255
	for(uint8_t i = 0; i<16; i++)
     a40:	90 e0       	ldi	r25, 0x00	; 0
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
    currentInitPattern->trackPlayMode[i] = 0x01;
     a42:	31 e0       	ldi	r19, 0x01	; 1
	currentInitPattern->envelopeType[i] = 3;
     a44:	23 e0       	ldi	r18, 0x03	; 3

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
     a46:	9f 5f       	subi	r25, 0xFF	; 255
     a48:	91 93       	st	Z+, r25
    currentInitPattern->trackPlayMode[i] = 0x01;
     a4a:	39 93       	st	Y+, r19
	currentInitPattern->envelopeType[i] = 3;
     a4c:	2d 93       	st	X+, r18
	currentInitPattern->trackSustainTimeLSB[i] = 0;
     a4e:	12 aa       	std	Z+50, r1	; 0x32
	currentInitPattern->trackSustainTimeMSB[i] = 0;
     a50:	12 a2       	std	Z+34, r1	; 0x22
	}
}

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
     a52:	90 31       	cpi	r25, 0x10	; 16
     a54:	c1 f7       	brne	.-16     	; 0xa46 <initBank+0x1e>
     a56:	fa 01       	movw	r30, r20
     a58:	e5 50       	subi	r30, 0x05	; 5
     a5a:	ff 4f       	sbci	r31, 0xFF	; 255
     a5c:	9a 01       	movw	r18, r20
     a5e:	25 58       	subi	r18, 0x85	; 133
     a60:	3e 4f       	sbci	r19, 0xFE	; 254
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     a62:	11 92       	st	Z+, r1
     a64:	11 92       	st	Z+, r1
	currentInitPattern->envelopeType[i] = 3;
	currentInitPattern->trackSustainTimeLSB[i] = 0;
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
     a66:	e2 17       	cp	r30, r18
     a68:	f3 07       	cpc	r31, r19
     a6a:	d9 f7       	brne	.-10     	; 0xa62 <initBank+0x3a>
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
 
  }
  //We need to take these and put them in global. 
  currentInitPattern->patternBPM = 120;
     a6c:	fa 01       	movw	r30, r20
     a6e:	e8 53       	subi	r30, 0x38	; 56
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	88 e7       	ldi	r24, 0x78	; 120
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	91 83       	std	Z+1, r25	; 0x01
     a78:	80 83       	st	Z, r24
  currentInitPattern->numSteps = 16;
     a7a:	32 96       	adiw	r30, 0x02	; 2
     a7c:	80 e1       	ldi	r24, 0x10	; 16
     a7e:	80 83       	st	Z, r24
}
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	08 95       	ret

00000a86 <initGlobals>:

void initGlobals(Globals *currentGlobals, uint8_t factoryReset)
{
     a86:	fc 01       	movw	r30, r24
		currentGlobals->currentTrigButtons=0; //current state of Trig buttons.
     a88:	11 82       	std	Z+1, r1	; 0x01
     a8a:	10 82       	st	Z, r1
		currentGlobals->currentGPButtons=0; //current state of GP buttons
     a8c:	12 82       	std	Z+2, r1	; 0x02
		currentGlobals->currentPatternNumber=0; //current pattern, between 1 and 256
     a8e:	17 82       	std	Z+7, r1	; 0x07
		currentGlobals->currentStep=0; // current step in the sequencer
     a90:	10 86       	std	Z+8, r1	; 0x08
		currentGlobals->currentTrack=0; //current track being edited
     a92:	11 86       	std	Z+9, r1	; 0x09
		currentGlobals->menuState=0; //where the menu is currently
     a94:	12 86       	std	Z+10, r1	; 0x0a
		currentGlobals->playState=0; //whether the sequencer is playing, stopped, or paused.
     a96:	13 86       	std	Z+11, r1	; 0x0b
		currentGlobals->factoryReset=0; //we may not need this in this struct, but good to have for now.
     a98:	14 86       	std	Z+12, r1	; 0x0c
		currentGlobals->buttonSwitchFlag=0; // could be rolled into value bits.
     a9a:	15 86       	std	Z+13, r1	; 0x0d
		currentGlobals->valueChangeFlag=0; //bit 0 -> changes in encoders, bit 1-> changes in buttons, bit2 -> changes in knobs
     a9c:	16 86       	std	Z+14, r1	; 0x0e
		currentGlobals->knobStatus=0; //top 4 bits: knob type, bottom 4 bits: knob location.
     a9e:	17 86       	std	Z+15, r1	; 0x0f
		currentGlobals->releaseCounter = 0;
     aa0:	dc 01       	movw	r26, r24
     aa2:	ab 55       	subi	r26, 0x5B	; 91
     aa4:	bf 4f       	sbci	r27, 0xFF	; 255
     aa6:	1d 92       	st	X+, r1
     aa8:	1d 92       	st	X+, r1
     aaa:	1d 92       	st	X+, r1
     aac:	1c 92       	st	X, r1
     aae:	13 97       	sbiw	r26, 0x03	; 3
		currentGlobals->lastGlobalTimer = 0;
     ab0:	a8 5b       	subi	r26, 0xB8	; 184
     ab2:	bf 4f       	sbci	r27, 0xFF	; 255
     ab4:	1d 92       	st	X+, r1
     ab6:	1d 92       	st	X+, r1
     ab8:	1d 92       	st	X+, r1
     aba:	1c 92       	st	X, r1
     abc:	13 97       	sbiw	r26, 0x03	; 3
		currentGlobals->clockCounter = 0;
     abe:	12 97       	sbiw	r26, 0x02	; 2
     ac0:	1d 92       	st	X+, r1
     ac2:	1c 92       	st	X, r1
		currentGlobals->currentTrigSequencer = 0;
     ac4:	14 82       	std	Z+4, r1	; 0x04
     ac6:	13 82       	std	Z+3, r1	; 0x03
		currentGlobals->currentTrigMidi = 0;
     ac8:	16 82       	std	Z+6, r1	; 0x06
     aca:	15 82       	std	Z+5, r1	; 0x05
		if(factoryReset==1)
     acc:	61 30       	cpi	r22, 0x01	; 1
     ace:	09 f5       	brne	.+66     	; 0xb12 <initGlobals+0x8c>
		{
			currentGlobals->midiChannel=0;
     ad0:	10 8a       	std	Z+16, r1	; 0x10
			currentGlobals->midiTrackNote[0] = 0x24;
     ad2:	84 e2       	ldi	r24, 0x24	; 36
     ad4:	81 8b       	std	Z+17, r24	; 0x11
			currentGlobals->midiTrackNote[1] = 0x25;
     ad6:	85 e2       	ldi	r24, 0x25	; 37
     ad8:	82 8b       	std	Z+18, r24	; 0x12
			currentGlobals->midiTrackNote[2] = 0x26;
     ada:	86 e2       	ldi	r24, 0x26	; 38
     adc:	83 8b       	std	Z+19, r24	; 0x13
			currentGlobals->midiTrackNote[3] = 0x27;
     ade:	87 e2       	ldi	r24, 0x27	; 39
     ae0:	84 8b       	std	Z+20, r24	; 0x14
			currentGlobals->midiTrackNote[4] = 0x28;
     ae2:	88 e2       	ldi	r24, 0x28	; 40
     ae4:	85 8b       	std	Z+21, r24	; 0x15
			currentGlobals->midiTrackNote[5] = 0x29;
     ae6:	89 e2       	ldi	r24, 0x29	; 41
     ae8:	86 8b       	std	Z+22, r24	; 0x16
			currentGlobals->midiTrackNote[6] = 0x2a;
     aea:	8a e2       	ldi	r24, 0x2A	; 42
     aec:	87 8b       	std	Z+23, r24	; 0x17
			currentGlobals->midiTrackNote[7] = 0x2b;
     aee:	8b e2       	ldi	r24, 0x2B	; 43
     af0:	80 8f       	std	Z+24, r24	; 0x18
			currentGlobals->midiTrackNote[8] = 0x2c;
     af2:	8c e2       	ldi	r24, 0x2C	; 44
     af4:	81 8f       	std	Z+25, r24	; 0x19
			currentGlobals->midiTrackNote[9] = 0x2d;
     af6:	8d e2       	ldi	r24, 0x2D	; 45
     af8:	82 8f       	std	Z+26, r24	; 0x1a
			currentGlobals->midiTrackNote[10] = 0x2e;
     afa:	8e e2       	ldi	r24, 0x2E	; 46
     afc:	83 8f       	std	Z+27, r24	; 0x1b
			currentGlobals->midiTrackNote[11] = 0x2f;
     afe:	8f e2       	ldi	r24, 0x2F	; 47
     b00:	84 8f       	std	Z+28, r24	; 0x1c
			currentGlobals->midiTrackNote[12] = 0x30;
     b02:	80 e3       	ldi	r24, 0x30	; 48
     b04:	85 8f       	std	Z+29, r24	; 0x1d
			currentGlobals->midiTrackNote[13] = 0x31;
     b06:	81 e3       	ldi	r24, 0x31	; 49
     b08:	86 8f       	std	Z+30, r24	; 0x1e
			currentGlobals->midiTrackNote[14] = 0x32;
     b0a:	82 e3       	ldi	r24, 0x32	; 50
     b0c:	87 8f       	std	Z+31, r24	; 0x1f
			currentGlobals->midiTrackNote[15] = 0x33;
     b0e:	83 e3       	ldi	r24, 0x33	; 51
     b10:	80 a3       	std	Z+32, r24	; 0x20
     b12:	08 95       	ret

00000b14 <initTimer>:
void initTimer() //we only need to use 1 timer, and Use ISRs for that. 
{
	//we're using timer 2, because it's the highest priority 8 bit timer interupt. 
	
		//here we need to setup our timer interrupt
		TCCR2A = (1 << WGM21); //set to clear on correct compare
     b14:	82 e0       	ldi	r24, 0x02	; 2
     b16:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
		TCCR2B = (1 << CS21) | (1 << CS20); // set pre-scaler to 64
     b1a:	93 e0       	ldi	r25, 0x03	; 3
     b1c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
		OCR2A = 50; // every 25 ticks will be 0.0001 seconds at this pre scale.
     b20:	92 e3       	ldi	r25, 0x32	; 50
     b22:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
		TIMSK2 = (1 << OCIE2A); // Enable OCR0A compare interrupt
     b26:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     b2a:	08 95       	ret

00000b2c <updateTimers>:
		//interrupts should now be good to go.
}
void updateTimers(Globals *currentGlobals, uint32_t currentTime)
{
     b2c:	8f 92       	push	r8
     b2e:	9f 92       	push	r9
     b30:	af 92       	push	r10
     b32:	bf 92       	push	r11
     b34:	cf 92       	push	r12
     b36:	df 92       	push	r13
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
	uint8_t change = 0;
	if(change=currentTime-(currentGlobals->lastGlobalTimer)) //check if there has been a change. 
     b40:	fc 01       	movw	r30, r24
     b42:	e3 51       	subi	r30, 0x13	; 19
     b44:	ff 4f       	sbci	r31, 0xFF	; 255
     b46:	20 81       	ld	r18, Z
     b48:	84 2e       	mov	r8, r20
     b4a:	82 1a       	sub	r8, r18
     b4c:	28 2d       	mov	r18, r8
     b4e:	29 f1       	breq	.+74     	; 0xb9a <updateTimers+0x6e>
	{
		currentGlobals->clockCounter = (currentGlobals->clockCounter)+change;
     b50:	dc 01       	movw	r26, r24
     b52:	a5 51       	subi	r26, 0x15	; 21
     b54:	bf 4f       	sbci	r27, 0xFF	; 255
     b56:	ed 91       	ld	r30, X+
     b58:	fc 91       	ld	r31, X
     b5a:	11 97       	sbiw	r26, 0x01	; 1
     b5c:	e8 0d       	add	r30, r8
     b5e:	f1 1d       	adc	r31, r1
     b60:	ed 93       	st	X+, r30
     b62:	fc 93       	st	X, r31
		currentGlobals->releaseCounter = (currentGlobals->releaseCounter)+change;
     b64:	fc 01       	movw	r30, r24
     b66:	eb 55       	subi	r30, 0x5B	; 91
     b68:	ff 4f       	sbci	r31, 0xFF	; 255
     b6a:	c0 80       	ld	r12, Z
     b6c:	d1 80       	ldd	r13, Z+1	; 0x01
     b6e:	e2 80       	ldd	r14, Z+2	; 0x02
     b70:	f3 80       	ldd	r15, Z+3	; 0x03
     b72:	46 01       	movw	r8, r12
     b74:	57 01       	movw	r10, r14
     b76:	82 0e       	add	r8, r18
     b78:	91 1c       	adc	r9, r1
     b7a:	a1 1c       	adc	r10, r1
     b7c:	b1 1c       	adc	r11, r1
     b7e:	80 82       	st	Z, r8
     b80:	91 82       	std	Z+1, r9	; 0x01
     b82:	a2 82       	std	Z+2, r10	; 0x02
     b84:	b3 82       	std	Z+3, r11	; 0x03
		currentGlobals->lastGlobalTimer = currentTime;
     b86:	e8 5b       	subi	r30, 0xB8	; 184
     b88:	ff 4f       	sbci	r31, 0xFF	; 255
     b8a:	40 83       	st	Z, r20
     b8c:	51 83       	std	Z+1, r21	; 0x01
     b8e:	62 83       	std	Z+2, r22	; 0x02
     b90:	73 83       	std	Z+3, r23	; 0x03
		currentGlobals->timerFlag = 1;
     b92:	34 96       	adiw	r30, 0x04	; 4
     b94:	21 e0       	ldi	r18, 0x01	; 1
     b96:	20 83       	st	Z, r18
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <updateTimers+0x76>
	}else
	{
		currentGlobals->timerFlag = 0; //we may want to change this some other point in the code, like when everything reliant on this flag is complete. 
     b9a:	fc 01       	movw	r30, r24
     b9c:	ef 50       	subi	r30, 0x0F	; 15
     b9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ba0:	10 82       	st	Z, r1
		//just so we're not wasting a conditional every time. 
	}
	
}
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	ff 90       	pop	r15
     ba8:	ef 90       	pop	r14
     baa:	df 90       	pop	r13
     bac:	cf 90       	pop	r12
     bae:	bf 90       	pop	r11
     bb0:	af 90       	pop	r10
     bb2:	9f 90       	pop	r9
     bb4:	8f 90       	pop	r8
     bb6:	08 95       	ret

00000bb8 <factoryResetCheck>:
void factoryResetCheck(uint8_t *factoryReset, Pattern *currentPattern, Globals *currentGlobals)
{
     bb8:	af 92       	push	r10
     bba:	bf 92       	push	r11
     bbc:	cf 92       	push	r12
     bbe:	df 92       	push	r13
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	65 97       	sbiw	r28, 0x15	; 21
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
	if(((~PINA)&0x01)&&((~PINL)&0x01))
     bdc:	00 99       	sbic	0x00, 0	; 0
     bde:	6f c0       	rjmp	.+222    	; 0xcbe <factoryResetCheck+0x106>
     be0:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     be4:	20 fd       	sbrc	r18, 0
     be6:	6b c0       	rjmp	.+214    	; 0xcbe <factoryResetCheck+0x106>
     be8:	8a 01       	movw	r16, r20
     bea:	6b 01       	movw	r12, r22
     bec:	7c 01       	movw	r14, r24
	{//if both buttons are pressed on startup, wait 4 seconds
		outputS("FactoryReset?       ",0);
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	80 e6       	ldi	r24, 0x60	; 96
     bf4:	92 e0       	ldi	r25, 0x02	; 2
     bf6:	0e 94 96 13 	call	0x272c	; 0x272c <outputS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bfa:	2f ef       	ldi	r18, 0xFF	; 255
     bfc:	84 e3       	ldi	r24, 0x34	; 52
     bfe:	9c e0       	ldi	r25, 0x0C	; 12
     c00:	21 50       	subi	r18, 0x01	; 1
     c02:	80 40       	sbci	r24, 0x00	; 0
     c04:	90 40       	sbci	r25, 0x00	; 0
     c06:	e1 f7       	brne	.-8      	; 0xc00 <factoryResetCheck+0x48>
     c08:	00 c0       	rjmp	.+0      	; 0xc0a <factoryResetCheck+0x52>
     c0a:	00 00       	nop
		_delay_ms(4000);

		if(((~PINA)&0x01)&&((~PINL)&0x01))
     c0c:	00 99       	sbic	0x00, 0	; 0
     c0e:	57 c0       	rjmp	.+174    	; 0xcbe <factoryResetCheck+0x106>
     c10:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     c14:	80 fd       	sbrc	r24, 0
     c16:	53 c0       	rjmp	.+166    	; 0xcbe <factoryResetCheck+0x106>
		{
			
			uint8_t choice = 2;
			uint8_t select = 0;
			char resetArray[21] = "yes?        no?     ";
     c18:	85 e1       	ldi	r24, 0x15	; 21
     c1a:	ea e8       	ldi	r30, 0x8A	; 138
     c1c:	f2 e0       	ldi	r31, 0x02	; 2
     c1e:	de 01       	movw	r26, r28
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	01 90       	ld	r0, Z+
     c24:	0d 92       	st	X+, r0
     c26:	8a 95       	dec	r24
     c28:	e1 f7       	brne	.-8      	; 0xc22 <factoryResetCheck+0x6a>
			while(choice==2){
				outputS(resetArray,1);
				select = listenEnoderReset();
				if(select==0)
				{
					resetArray[4] = 8;
     c2a:	68 94       	set
     c2c:	aa 24       	eor	r10, r10
     c2e:	a3 f8       	bld	r10, 3
					resetArray[15] = ' ';
     c30:	68 94       	set
     c32:	bb 24       	eor	r11, r11
     c34:	b5 f8       	bld	r11, 5
			
			uint8_t choice = 2;
			uint8_t select = 0;
			char resetArray[21] = "yes?        no?     ";
			while(choice==2){
				outputS(resetArray,1);
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	ce 01       	movw	r24, r28
     c3c:	01 96       	adiw	r24, 0x01	; 1
     c3e:	0e 94 96 13 	call	0x272c	; 0x272c <outputS>
				select = listenEnoderReset();
     c42:	a7 de       	rcall	.-690    	; 0x992 <listenEnoderReset>
				if(select==0)
     c44:	81 11       	cpse	r24, r1
     c46:	05 c0       	rjmp	.+10     	; 0xc52 <factoryResetCheck+0x9a>
				{
					resetArray[4] = 8;
     c48:	ad 82       	std	Y+5, r10	; 0x05
					resetArray[15] = ' ';
     c4a:	b8 8a       	std	Y+16, r11	; 0x10
				if(select==1)
				{
					resetArray[4] = ' ';
					resetArray[15] = 8;
				}
				if((~PINB)&(1<<5))
     c4c:	1d 99       	sbic	0x03, 5	; 3
     c4e:	f3 cf       	rjmp	.-26     	; 0xc36 <factoryResetCheck+0x7e>
     c50:	0b c0       	rjmp	.+22     	; 0xc68 <factoryResetCheck+0xb0>
				if(select==0)
				{
					resetArray[4] = 8;
					resetArray[15] = ' ';
				}
				if(select==1)
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	29 f4       	brne	.+10     	; 0xc60 <factoryResetCheck+0xa8>
				{
					resetArray[4] = ' ';
     c56:	bd 82       	std	Y+5, r11	; 0x05
					resetArray[15] = 8;
     c58:	a8 8a       	std	Y+16, r10	; 0x10
				}
				if((~PINB)&(1<<5))
     c5a:	1d 99       	sbic	0x03, 5	; 3
     c5c:	ec cf       	rjmp	.-40     	; 0xc36 <factoryResetCheck+0x7e>
     c5e:	2f c0       	rjmp	.+94     	; 0xcbe <factoryResetCheck+0x106>
     c60:	1d 99       	sbic	0x03, 5	; 3
     c62:	e9 cf       	rjmp	.-46     	; 0xc36 <factoryResetCheck+0x7e>
		{
			
			uint8_t choice = 2;
			uint8_t select = 0;
			char resetArray[21] = "yes?        no?     ";
			while(choice==2){
     c64:	82 30       	cpi	r24, 0x02	; 2
     c66:	39 f3       	breq	.-50     	; 0xc36 <factoryResetCheck+0x7e>
				{
					choice = select; //break out of while loop, and reset, or not.
				}
			}
			
			if(select==0) //yes was selected.
     c68:	81 11       	cpse	r24, r1
     c6a:	29 c0       	rjmp	.+82     	; 0xcbe <factoryResetCheck+0x106>
			{
				outputS("Progress:           ",2);
     c6c:	62 e0       	ldi	r22, 0x02	; 2
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	85 e7       	ldi	r24, 0x75	; 117
     c72:	92 e0       	ldi	r25, 0x02	; 2
     c74:	0e 94 96 13 	call	0x272c	; 0x272c <outputS>
				(*factoryReset)=1;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	f7 01       	movw	r30, r14
     c7c:	80 83       	st	Z, r24
				initGlobals(currentGlobals, *factoryReset);
     c7e:	61 e0       	ldi	r22, 0x01	; 1
     c80:	c8 01       	movw	r24, r16
     c82:	01 df       	rcall	.-510    	; 0xa86 <initGlobals>
				factoryResetEeprom(*currentPattern);
     c84:	8d b7       	in	r24, 0x3d	; 61
     c86:	9e b7       	in	r25, 0x3e	; 62
     c88:	8b 57       	subi	r24, 0x7B	; 123
     c8a:	91 40       	sbci	r25, 0x01	; 1
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	9e bf       	out	0x3e, r25	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	8d bf       	out	0x3d, r24	; 61
     c96:	ad b7       	in	r26, 0x3d	; 61
     c98:	be b7       	in	r27, 0x3e	; 62
     c9a:	11 96       	adiw	r26, 0x01	; 1
     c9c:	8b e7       	ldi	r24, 0x7B	; 123
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	f6 01       	movw	r30, r12
     ca2:	01 90       	ld	r0, Z+
     ca4:	0d 92       	st	X+, r0
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <factoryResetCheck+0xea>
     caa:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <factoryResetEeprom>
				globalWrite(currentGlobals);
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	c8 01       	movw	r24, r16
     cba:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <globalWrite>
		}
		
	}
	
	
     cbe:	65 96       	adiw	r28, 0x15	; 21
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	0f 91       	pop	r16
     cd2:	ff 90       	pop	r15
     cd4:	ef 90       	pop	r14
     cd6:	df 90       	pop	r13
     cd8:	cf 90       	pop	r12
     cda:	bf 90       	pop	r11
     cdc:	af 90       	pop	r10
     cde:	08 95       	ret

00000ce0 <startADCConversion>:



uint8_t startADCConversion()
{
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     ce0:	ea e7       	ldi	r30, 0x7A	; 122
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	80 64       	ori	r24, 0x40	; 64
     ce8:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     cea:	80 81       	ld	r24, Z
     cec:	86 fd       	sbrc	r24, 6
     cee:	fd cf       	rjmp	.-6      	; 0xcea <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.	
     cf0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
     cf4:	08 95       	ret

00000cf6 <initADC>:

void initADC()
{
	DDRF |= 0B00000111; //init pins F2, 1, and 0 as select pins on the external mux.
     cf6:	80 b3       	in	r24, 0x10	; 16
     cf8:	87 60       	ori	r24, 0x07	; 7
     cfa:	80 bb       	out	0x10, r24	; 16
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     cfc:	80 e2       	ldi	r24, 0x20	; 32
     cfe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     d02:	87 e8       	ldi	r24, 0x87	; 135
     d04:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     d08:	88 e0       	ldi	r24, 0x08	; 8
     d0a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     d0e:	8f ef       	ldi	r24, 0xFF	; 255
     d10:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     d14:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     d18:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <knobBufferCounter>
	startADCConversion();
     d1c:	e1 cf       	rjmp	.-62     	; 0xce0 <startADCConversion>
     d1e:	08 95       	ret

00000d20 <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     d20:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     d22:	98 2f       	mov	r25, r24
     d24:	96 95       	lsr	r25
     d26:	96 95       	lsr	r25
     d28:	2f e2       	ldi	r18, 0x2F	; 47
     d2a:	92 9f       	mul	r25, r18
     d2c:	91 2d       	mov	r25, r1
     d2e:	11 24       	eor	r1, r1
     d30:	96 95       	lsr	r25
     d32:	2c e2       	ldi	r18, 0x2C	; 44
     d34:	92 9f       	mul	r25, r18
     d36:	80 19       	sub	r24, r0
     d38:	11 24       	eor	r1, r1
     d3a:	98 2f       	mov	r25, r24
	if(select<40)
     d3c:	88 32       	cpi	r24, 0x28	; 40
     d3e:	70 f4       	brcc	.+28     	; 0xd5c <selectKnob+0x3c>
	{
		ADCSRB = (1 << MUX5);
     d40:	88 e0       	ldi	r24, 0x08	; 8
     d42:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     d46:	c9 2f       	mov	r28, r25
     d48:	c7 70       	andi	r28, 0x07	; 7
		//uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     d4a:	96 95       	lsr	r25
     d4c:	96 95       	lsr	r25
     d4e:	96 95       	lsr	r25
     d50:	90 62       	ori	r25, 0x20	; 32
     d52:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     d56:	c4 df       	rcall	.-120    	; 0xce0 <startADCConversion>
		

		//then the external multiplexer
		PORTF = muxSelect;
     d58:	c1 bb       	out	0x11, r28	; 17
     d5a:	20 c0       	rjmp	.+64     	; 0xd9c <selectKnob+0x7c>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     d5c:	89 32       	cpi	r24, 0x29	; 41
     d5e:	71 f0       	breq	.+28     	; 0xd7c <selectKnob+0x5c>
     d60:	18 f4       	brcc	.+6      	; 0xd68 <selectKnob+0x48>
     d62:	88 32       	cpi	r24, 0x28	; 40
     d64:	31 f0       	breq	.+12     	; 0xd72 <selectKnob+0x52>
     d66:	1a c0       	rjmp	.+52     	; 0xd9c <selectKnob+0x7c>
     d68:	8a 32       	cpi	r24, 0x2A	; 42
     d6a:	69 f0       	breq	.+26     	; 0xd86 <selectKnob+0x66>
     d6c:	8b 32       	cpi	r24, 0x2B	; 43
     d6e:	81 f0       	breq	.+32     	; 0xd90 <selectKnob+0x70>
     d70:	15 c0       	rjmp	.+42     	; 0xd9c <selectKnob+0x7c>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     d72:	85 e2       	ldi	r24, 0x25	; 37
     d74:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     d78:	b3 df       	rcall	.-154    	; 0xce0 <startADCConversion>
		break;
     d7a:	10 c0       	rjmp	.+32     	; 0xd9c <selectKnob+0x7c>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     d7c:	86 e2       	ldi	r24, 0x26	; 38
     d7e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     d82:	ae df       	rcall	.-164    	; 0xce0 <startADCConversion>
		break;
     d84:	0b c0       	rjmp	.+22     	; 0xd9c <selectKnob+0x7c>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     d86:	87 e2       	ldi	r24, 0x27	; 39
     d88:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     d8c:	a9 df       	rcall	.-174    	; 0xce0 <startADCConversion>
		break;
     d8e:	06 c0       	rjmp	.+12     	; 0xd9c <selectKnob+0x7c>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     d90:	80 e2       	ldi	r24, 0x20	; 32
     d92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     d96:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     d9a:	a2 df       	rcall	.-188    	; 0xce0 <startADCConversion>
		break;
		}
	
	}
	
}
     d9c:	cf 91       	pop	r28
     d9e:	08 95       	ret

00000da0 <updateKnob>:

void updateKnob(uint8_t select, Globals *currentGlobals)
{
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	8b 01       	movw	r16, r22
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
     daa:	c8 2f       	mov	r28, r24
     dac:	d0 e0       	ldi	r29, 0x00	; 0
     dae:	98 df       	rcall	.-208    	; 0xce0 <startADCConversion>
     db0:	f8 01       	movw	r30, r16
     db2:	ec 0f       	add	r30, r28
     db4:	fd 1f       	adc	r31, r29
     db6:	81 a3       	std	Z+33, r24	; 0x21
		currentGlobals->filteredKnobBuffer[select] = 
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
     db8:	e3 5b       	subi	r30, 0xB3	; 179
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	40 81       	ld	r20, Z

void updateKnob(uint8_t select, Globals *currentGlobals)
{
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
		currentGlobals->filteredKnobBuffer[select] = 
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	84 1b       	sub	r24, r20
     dc2:	91 09       	sbc	r25, r1
     dc4:	9c 01       	movw	r18, r24
     dc6:	12 f4       	brpl	.+4      	; 0xdcc <updateKnob+0x2c>
     dc8:	2f 5f       	subi	r18, 0xFF	; 255
     dca:	3f 4f       	sbci	r19, 0xFF	; 255
     dcc:	35 95       	asr	r19
     dce:	27 95       	ror	r18
     dd0:	24 0f       	add	r18, r20
     dd2:	20 83       	st	Z, r18
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	08 95       	ret

00000dde <initializeKnob>:
void initializeKnob(Globals *currentGlobals)
{
     dde:	fc 01       	movw	r30, r24
     de0:	e3 5b       	subi	r30, 0xB3	; 179
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	9c 01       	movw	r18, r24
     de6:	27 58       	subi	r18, 0x87	; 135
     de8:	3f 4f       	sbci	r19, 0xFF	; 255
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
     dea:	91 91       	ld	r25, Z+
     dec:	93 a7       	std	Z+43, r25	; 0x2b
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
void initializeKnob(Globals *currentGlobals)
{
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
     dee:	e2 17       	cp	r30, r18
     df0:	f3 07       	cpc	r31, r19
     df2:	d9 f7       	brne	.-10     	; 0xdea <initializeKnob+0xc>
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
	}
}
     df4:	08 95       	ret

00000df6 <interperetKnob>:

void interperetKnob(uint8_t select, Pattern *currentKnobPattern, Globals *currentGlobals)
{//this function will compare outputs, and write to our struct.
     df6:	4f 92       	push	r4
     df8:	5f 92       	push	r5
     dfa:	6f 92       	push	r6
     dfc:	7f 92       	push	r7
     dfe:	af 92       	push	r10
     e00:	bf 92       	push	r11
     e02:	cf 92       	push	r12
     e04:	df 92       	push	r13
     e06:	ef 92       	push	r14
     e08:	ff 92       	push	r15
     e0a:	0f 93       	push	r16
     e0c:	1f 93       	push	r17
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
	select = select%44;
     e12:	98 2f       	mov	r25, r24
     e14:	96 95       	lsr	r25
     e16:	96 95       	lsr	r25
     e18:	2f e2       	ldi	r18, 0x2F	; 47
     e1a:	92 9f       	mul	r25, r18
     e1c:	91 2d       	mov	r25, r1
     e1e:	11 24       	eor	r1, r1
     e20:	96 95       	lsr	r25
     e22:	2c e2       	ldi	r18, 0x2C	; 44
     e24:	92 9f       	mul	r25, r18
     e26:	80 19       	sub	r24, r0
     e28:	11 24       	eor	r1, r1
     e2a:	98 2f       	mov	r25, r24
	
	if (select<40)
     e2c:	88 32       	cpi	r24, 0x28	; 40
     e2e:	08 f0       	brcs	.+2      	; 0xe32 <interperetKnob+0x3c>
     e30:	c5 c1       	rjmp	.+906    	; 0x11bc <interperetKnob+0x3c6>
	{
		uint8_t positionSelect = select%8;
     e32:	18 2f       	mov	r17, r24
     e34:	17 70       	andi	r17, 0x07	; 7
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
		uint8_t bankSwitch = select/8;
     e36:	86 95       	lsr	r24
     e38:	86 95       	lsr	r24
     e3a:	86 95       	lsr	r24
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
     e3c:	da 01       	movw	r26, r20
     e3e:	1d 96       	adiw	r26, 0x0d	; 13
     e40:	2c 91       	ld	r18, X
     e42:	20 ff       	sbrs	r18, 0
     e44:	05 c0       	rjmp	.+10     	; 0xe50 <interperetKnob+0x5a>
		{
			positionSelectTracks=positionSelectTracks+8;
     e46:	68 94       	set
     e48:	aa 24       	eor	r10, r10
     e4a:	a3 f8       	bld	r10, 3
     e4c:	a1 0e       	add	r10, r17
     e4e:	01 c0       	rjmp	.+2      	; 0xe52 <interperetKnob+0x5c>
	select = select%44;
	
	if (select<40)
	{
		uint8_t positionSelect = select%8;
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
     e50:	a1 2e       	mov	r10, r17
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
		{
			positionSelectTracks=positionSelectTracks+8;
		}
		
		switch (bankSwitch){
     e52:	82 30       	cpi	r24, 0x02	; 2
     e54:	09 f4       	brne	.+2      	; 0xe58 <interperetKnob+0x62>
     e56:	99 c0       	rjmp	.+306    	; 0xf8a <interperetKnob+0x194>
     e58:	ea 01       	movw	r28, r20
     e5a:	6b 01       	movw	r12, r22
     e5c:	83 30       	cpi	r24, 0x03	; 3
     e5e:	30 f4       	brcc	.+12     	; 0xe6c <interperetKnob+0x76>
     e60:	88 23       	and	r24, r24
     e62:	59 f0       	breq	.+22     	; 0xe7a <interperetKnob+0x84>
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	09 f4       	brne	.+2      	; 0xe6a <interperetKnob+0x74>
     e68:	67 c0       	rjmp	.+206    	; 0xf38 <interperetKnob+0x142>
     e6a:	c6 c1       	rjmp	.+908    	; 0x11f8 <interperetKnob+0x402>
     e6c:	83 30       	cpi	r24, 0x03	; 3
     e6e:	09 f4       	brne	.+2      	; 0xe72 <interperetKnob+0x7c>
     e70:	e1 c0       	rjmp	.+450    	; 0x1034 <interperetKnob+0x23e>
     e72:	84 30       	cpi	r24, 0x04	; 4
     e74:	09 f4       	brne	.+2      	; 0xe78 <interperetKnob+0x82>
     e76:	2e c1       	rjmp	.+604    	; 0x10d4 <interperetKnob+0x2de>
     e78:	bf c1       	rjmp	.+894    	; 0x11f8 <interperetKnob+0x402>
			uint8_t newRead = 0;
			case 0:; //outputVolume
			
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
     e7a:	e9 2e       	mov	r14, r25
     e7c:	f1 2c       	mov	r15, r1
     e7e:	ca 01       	movw	r24, r20
     e80:	8e 0d       	add	r24, r14
     e82:	9f 1d       	adc	r25, r15
     e84:	fc 01       	movw	r30, r24
     e86:	e7 58       	subi	r30, 0x87	; 135
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
     e8c:	bc 97       	sbiw	r30, 0x2c	; 44
     e8e:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
     e90:	26 17       	cp	r18, r22
     e92:	20 f4       	brcc	.+8      	; 0xe9c <interperetKnob+0xa6>
	{
		returnMe = v1-v2;
     e94:	b6 2f       	mov	r27, r22
     e96:	b2 1b       	sub	r27, r18
     e98:	2b 2f       	mov	r18, r27
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <interperetKnob+0xa8>
	}
	else
	{
		returnMe = v2-v1;
     e9c:	26 1b       	sub	r18, r22
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];

			if(checkVariation(newRead,prevRead)>2)
     e9e:	23 30       	cpi	r18, 0x03	; 3
     ea0:	08 f4       	brcc	.+2      	; 0xea4 <interperetKnob+0xae>
     ea2:	aa c1       	rjmp	.+852    	; 0x11f8 <interperetKnob+0x402>
			{
				
				int16_t negCheckValue = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__floatsisf>
     eae:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     eb2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     eb6:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     eba:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     ebe:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <__divsf3>
     ec2:	2b 01       	movw	r4, r22
     ec4:	3c 01       	movw	r6, r24
     ec6:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <NegativeOffset>
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__floatsisf>
     ed4:	9b 01       	movw	r18, r22
     ed6:	ac 01       	movw	r20, r24
     ed8:	c3 01       	movw	r24, r6
     eda:	b2 01       	movw	r22, r4
     edc:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <__subsf3>
     ee0:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <__fixsfsi>
     ee4:	86 2f       	mov	r24, r22
     ee6:	26 2f       	mov	r18, r22
     ee8:	37 2f       	mov	r19, r23
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     eea:	9e 85       	ldd	r25, Y+14	; 0x0e
     eec:	94 60       	ori	r25, 0x04	; 4
     eee:	9e 87       	std	Y+14, r25	; 0x0e
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value 
     ef0:	1f 87       	std	Y+15, r17	; 0x0f
				
				currentKnobPattern->outputLevelLSB[positionSelect] = (negCheckValue);
     ef2:	61 2f       	mov	r22, r17
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	f6 01       	movw	r30, r12
     ef8:	e6 0f       	add	r30, r22
     efa:	f7 1f       	adc	r31, r23
     efc:	80 87       	std	Z+8, r24	; 0x08
				if(negCheckValue>(-1))
     efe:	33 23       	and	r19, r19
     f00:	2c f0       	brlt	.+10     	; 0xf0c <interperetKnob+0x116>
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 0;	
     f02:	f6 01       	movw	r30, r12
     f04:	e6 0f       	add	r30, r22
     f06:	f7 1f       	adc	r31, r23
     f08:	10 82       	st	Z, r1
     f0a:	05 c0       	rjmp	.+10     	; 0xf16 <interperetKnob+0x120>
				}else
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 255;
     f0c:	9f ef       	ldi	r25, 0xFF	; 255
     f0e:	f6 01       	movw	r30, r12
     f10:	e6 0f       	add	r30, r22
     f12:	f7 1f       	adc	r31, r23
     f14:	90 83       	st	Z, r25
				}
				setOutputVolume(currentKnobPattern->outputLevelLSB[positionSelect], currentKnobPattern->outputLevelMSB[positionSelect], positionSelect);
     f16:	f6 01       	movw	r30, r12
     f18:	e6 0f       	add	r30, r22
     f1a:	f7 1f       	adc	r31, r23
     f1c:	41 2f       	mov	r20, r17
     f1e:	60 81       	ld	r22, Z
     f20:	0e 94 ef 16 	call	0x2dde	; 0x2dde <setOutputVolume>
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     f24:	ce 0d       	add	r28, r14
     f26:	df 1d       	adc	r29, r15
     f28:	fe 01       	movw	r30, r28
     f2a:	e7 58       	subi	r30, 0x87	; 135
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	c3 5b       	subi	r28, 0xB3	; 179
     f30:	df 4f       	sbci	r29, 0xFF	; 255
     f32:	88 81       	ld	r24, Y
     f34:	80 83       	st	Z, r24
     f36:	60 c1       	rjmp	.+704    	; 0x11f8 <interperetKnob+0x402>
			}
			break;
			
 			case 1: //pitch
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
     f38:	89 2f       	mov	r24, r25
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	9a 01       	movw	r18, r20
     f3e:	28 0f       	add	r18, r24
     f40:	39 1f       	adc	r19, r25
     f42:	f9 01       	movw	r30, r18
     f44:	e3 5b       	subi	r30, 0xB3	; 179
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	40 81       	ld	r20, Z
     f4a:	bc 96       	adiw	r30, 0x2c	; 44
     f4c:	20 81       	ld	r18, Z
     f4e:	24 17       	cp	r18, r20
     f50:	09 f4       	brne	.+2      	; 0xf54 <interperetKnob+0x15e>
     f52:	52 c1       	rjmp	.+676    	; 0x11f8 <interperetKnob+0x402>
 			{
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     f54:	2e 85       	ldd	r18, Y+14	; 0x0e
     f56:	24 60       	ori	r18, 0x04	; 4
     f58:	2e 87       	std	Y+14, r18	; 0x0e
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     f5a:	21 2f       	mov	r18, r17
     f5c:	20 61       	ori	r18, 0x10	; 16
     f5e:	2f 87       	std	Y+15, r18	; 0x0f
 				currentKnobPattern->outputPitch[positionSelect] = (currentGlobals->filteredKnobBuffer[select]^128);
     f60:	fb 01       	movw	r30, r22
     f62:	e1 0f       	add	r30, r17
     f64:	f1 1d       	adc	r31, r1
     f66:	40 58       	subi	r20, 0x80	; 128
     f68:	40 8b       	std	Z+16, r20	; 0x10
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     f6a:	8c 0f       	add	r24, r28
     f6c:	9d 1f       	adc	r25, r29
     f6e:	dc 01       	movw	r26, r24
     f70:	a7 58       	subi	r26, 0x87	; 135
     f72:	bf 4f       	sbci	r27, 0xFF	; 255
     f74:	ec 01       	movw	r28, r24
     f76:	c3 5b       	subi	r28, 0xB3	; 179
     f78:	df 4f       	sbci	r29, 0xFF	; 255
     f7a:	88 81       	ld	r24, Y
     f7c:	8c 93       	st	X, r24
				outputSampleRate(positionSelect, 0, currentKnobPattern->outputPitch[positionSelect]);
     f7e:	40 89       	ldd	r20, Z+16	; 0x10
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	81 2f       	mov	r24, r17
     f84:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <outputSampleRate>
     f88:	37 c1       	rjmp	.+622    	; 0x11f8 <interperetKnob+0x402>
 			}
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
     f8a:	e9 2f       	mov	r30, r25
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	ca 01       	movw	r24, r20
     f90:	8e 0f       	add	r24, r30
     f92:	9f 1f       	adc	r25, r31
     f94:	dc 01       	movw	r26, r24
     f96:	a7 58       	subi	r26, 0x87	; 135
     f98:	bf 4f       	sbci	r27, 0xFF	; 255
     f9a:	dc 91       	ld	r29, X
     f9c:	9c 97       	sbiw	r26, 0x2c	; 44
     f9e:	cc 91       	ld	r28, X
     fa0:	dc 17       	cp	r29, r28
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <interperetKnob+0x1b0>
     fa4:	29 c1       	rjmp	.+594    	; 0x11f8 <interperetKnob+0x402>
			{
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     fa6:	ca 2c       	mov	r12, r10
     fa8:	d1 2c       	mov	r13, r1
     faa:	9b 01       	movw	r18, r22
     fac:	2c 0d       	add	r18, r12
     fae:	3d 1d       	adc	r19, r13
     fb0:	d9 01       	movw	r26, r18
     fb2:	a8 5a       	subi	r26, 0xA8	; 168
     fb4:	bf 4f       	sbci	r27, 0xFF	; 255
     fb6:	8c 91       	ld	r24, X
     fb8:	50 97       	sbiw	r26, 0x10	; 16
     fba:	2c 91       	ld	r18, X
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     fbc:	da 01       	movw	r26, r20
     fbe:	1e 96       	adiw	r26, 0x0e	; 14
     fc0:	9c 91       	ld	r25, X
     fc2:	1e 97       	sbiw	r26, 0x0e	; 14
     fc4:	94 60       	ori	r25, 0x04	; 4
     fc6:	1e 96       	adiw	r26, 0x0e	; 14
     fc8:	9c 93       	st	X, r25
     fca:	1e 97       	sbiw	r26, 0x0e	; 14
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
     fcc:	91 2f       	mov	r25, r17
     fce:	90 62       	ori	r25, 0x20	; 32
     fd0:	1f 96       	adiw	r26, 0x0f	; 15
     fd2:	9c 93       	st	X, r25
     fd4:	1f 97       	sbiw	r26, 0x0f	; 15
				
				if(currentGlobals->currentGPButtons&0x04) 
     fd6:	12 96       	adiw	r26, 0x02	; 2
     fd8:	9c 91       	ld	r25, X
     fda:	92 ff       	sbrs	r25, 2
     fdc:	0a c0       	rjmp	.+20     	; 0xff2 <interperetKnob+0x1fc>
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
			{
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	dc 01       	movw	r26, r24
     fe2:	b2 2b       	or	r27, r18
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
				
				if(currentGlobals->currentGPButtons&0x04) 
				{ //if "fine" is on:
						totalAttackTime = totalAttackTime+((currentGlobals->filteredKnobBuffer[select])-(currentGlobals->lastFilteredKnobBuffer[select])); 
     fe4:	8c 2f       	mov	r24, r28
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	8d 1b       	sub	r24, r29
     fea:	91 09       	sbc	r25, r1
     fec:	8a 0f       	add	r24, r26
     fee:	9b 1f       	adc	r25, r27
     ff0:	0a c0       	rjmp	.+20     	; 0x1006 <interperetKnob+0x210>
				}else
				{
					totalAttackTime = ((currentGlobals->filteredKnobBuffer[select])-1)*238;
     ff2:	2c 2f       	mov	r18, r28
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	21 50       	subi	r18, 0x01	; 1
     ff8:	31 09       	sbc	r19, r1
     ffa:	ae ee       	ldi	r26, 0xEE	; 238
     ffc:	a2 9f       	mul	r26, r18
     ffe:	c0 01       	movw	r24, r0
    1000:	a3 9f       	mul	r26, r19
    1002:	90 0d       	add	r25, r0
    1004:	11 24       	eor	r1, r1
				}
				if(totalAttackTime<20)
    1006:	84 31       	cpi	r24, 0x14	; 20
    1008:	91 05       	cpc	r25, r1
    100a:	10 f4       	brcc	.+4      	; 0x1010 <interperetKnob+0x21a>
				{
					totalAttackTime = 20; 
    100c:	84 e1       	ldi	r24, 0x14	; 20
    100e:	90 e0       	ldi	r25, 0x00	; 0
				}
				currentKnobPattern->trackAttackTimeMSB[positionSelectTracks] = ((totalAttackTime)>>8);
    1010:	6c 0d       	add	r22, r12
    1012:	7d 1d       	adc	r23, r13
    1014:	db 01       	movw	r26, r22
    1016:	a8 5b       	subi	r26, 0xB8	; 184
    1018:	bf 4f       	sbci	r27, 0xFF	; 255
    101a:	9c 93       	st	X, r25
				currentKnobPattern->trackAttackTimeLSB[positionSelectTracks] = (totalAttackTime); //this should truncate the top 8 bits. 
    101c:	50 96       	adiw	r26, 0x10	; 16
    101e:	8c 93       	st	X, r24

				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
    1020:	e4 0f       	add	r30, r20
    1022:	f5 1f       	adc	r31, r21
    1024:	df 01       	movw	r26, r30
    1026:	a7 58       	subi	r26, 0x87	; 135
    1028:	bf 4f       	sbci	r27, 0xFF	; 255
    102a:	e3 5b       	subi	r30, 0xB3	; 179
    102c:	ff 4f       	sbci	r31, 0xFF	; 255
    102e:	80 81       	ld	r24, Z
    1030:	8c 93       	st	X, r24
    1032:	e2 c0       	rjmp	.+452    	; 0x11f8 <interperetKnob+0x402>
			}
			break;
 			
 			case 3: //release Envelope
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
    1034:	29 2f       	mov	r18, r25
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	ca 01       	movw	r24, r20
    103a:	82 0f       	add	r24, r18
    103c:	93 1f       	adc	r25, r19
    103e:	fc 01       	movw	r30, r24
    1040:	e7 58       	subi	r30, 0x87	; 135
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	f0 81       	ld	r31, Z
    1046:	dc 01       	movw	r26, r24
    1048:	a3 5b       	subi	r26, 0xB3	; 179
    104a:	bf 4f       	sbci	r27, 0xFF	; 255
    104c:	ec 91       	ld	r30, X
    104e:	fe 17       	cp	r31, r30
    1050:	09 f4       	brne	.+2      	; 0x1054 <interperetKnob+0x25e>
    1052:	d2 c0       	rjmp	.+420    	; 0x11f8 <interperetKnob+0x402>
 			{
				 uint16_t totalReleaseTime = currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks]|((currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks])<<8);
    1054:	6a 2d       	mov	r22, r10
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	a6 01       	movw	r20, r12
    105a:	46 0f       	add	r20, r22
    105c:	57 1f       	adc	r21, r23
    105e:	da 01       	movw	r26, r20
    1060:	a8 58       	subi	r26, 0x88	; 136
    1062:	bf 4f       	sbci	r27, 0xFF	; 255
    1064:	8c 91       	ld	r24, X
    1066:	50 97       	sbiw	r26, 0x10	; 16
    1068:	4c 91       	ld	r20, X
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
    106a:	9e 85       	ldd	r25, Y+14	; 0x0e
    106c:	94 60       	ori	r25, 0x04	; 4
    106e:	9e 87       	std	Y+14, r25	; 0x0e
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
    1070:	91 2f       	mov	r25, r17
    1072:	90 63       	ori	r25, 0x30	; 48
    1074:	9f 87       	std	Y+15, r25	; 0x0f
				if(currentGlobals->currentGPButtons&0x04)
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	92 ff       	sbrs	r25, 2
    107a:	0a c0       	rjmp	.+20     	; 0x1090 <interperetKnob+0x29a>
			break;
 			
 			case 3: //release Envelope
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
 			{
				 uint16_t totalReleaseTime = currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks]|((currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks])<<8);
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	dc 01       	movw	r26, r24
    1080:	b4 2b       	or	r27, r20
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
				if(currentGlobals->currentGPButtons&0x04)
				{ //if "fine" is on:
					totalReleaseTime = totalReleaseTime+((currentGlobals->filteredKnobBuffer[select])-(currentGlobals->lastFilteredKnobBuffer[select]));
    1082:	8e 2f       	mov	r24, r30
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	8f 1b       	sub	r24, r31
    1088:	91 09       	sbc	r25, r1
    108a:	8a 0f       	add	r24, r26
    108c:	9b 1f       	adc	r25, r27
    108e:	0a c0       	rjmp	.+20     	; 0x10a4 <interperetKnob+0x2ae>
				}else
				{
					totalReleaseTime = ((currentGlobals->filteredKnobBuffer[select])-1)*238;
    1090:	4e 2f       	mov	r20, r30
    1092:	50 e0       	ldi	r21, 0x00	; 0
    1094:	41 50       	subi	r20, 0x01	; 1
    1096:	51 09       	sbc	r21, r1
    1098:	ee ee       	ldi	r30, 0xEE	; 238
    109a:	e4 9f       	mul	r30, r20
    109c:	c0 01       	movw	r24, r0
    109e:	e5 9f       	mul	r30, r21
    10a0:	90 0d       	add	r25, r0
    10a2:	11 24       	eor	r1, r1
				}
				if(totalReleaseTime<20)
    10a4:	84 31       	cpi	r24, 0x14	; 20
    10a6:	91 05       	cpc	r25, r1
    10a8:	10 f4       	brcc	.+4      	; 0x10ae <interperetKnob+0x2b8>
				{
					totalReleaseTime = 220;
    10aa:	8c ed       	ldi	r24, 0xDC	; 220
    10ac:	90 e0       	ldi	r25, 0x00	; 0
				}
				currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks] = ((totalReleaseTime)>>8);
    10ae:	c6 0e       	add	r12, r22
    10b0:	d7 1e       	adc	r13, r23
    10b2:	f6 01       	movw	r30, r12
    10b4:	e8 59       	subi	r30, 0x98	; 152
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	90 83       	st	Z, r25
				currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks] = (totalReleaseTime);	
    10ba:	70 96       	adiw	r30, 0x10	; 16
    10bc:	80 83       	st	Z, r24
				
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
    10be:	2c 0f       	add	r18, r28
    10c0:	3d 1f       	adc	r19, r29
    10c2:	f9 01       	movw	r30, r18
    10c4:	e7 58       	subi	r30, 0x87	; 135
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	d9 01       	movw	r26, r18
    10ca:	a3 5b       	subi	r26, 0xB3	; 179
    10cc:	bf 4f       	sbci	r27, 0xFF	; 255
    10ce:	8c 91       	ld	r24, X
    10d0:	80 83       	st	Z, r24
    10d2:	92 c0       	rjmp	.+292    	; 0x11f8 <interperetKnob+0x402>
 			}
 			break;
 			
 			case 4:;
 			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
    10d4:	e9 2e       	mov	r14, r25
    10d6:	f1 2c       	mov	r15, r1
    10d8:	ca 01       	movw	r24, r20
    10da:	8e 0d       	add	r24, r14
    10dc:	9f 1d       	adc	r25, r15
    10de:	fc 01       	movw	r30, r24
    10e0:	e7 58       	subi	r30, 0x87	; 135
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
    10e6:	bc 97       	sbiw	r30, 0x2c	; 44
    10e8:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
    10ea:	26 17       	cp	r18, r22
    10ec:	20 f4       	brcc	.+8      	; 0x10f6 <interperetKnob+0x300>
	{
		returnMe = v1-v2;
    10ee:	b6 2f       	mov	r27, r22
    10f0:	b2 1b       	sub	r27, r18
    10f2:	2b 2f       	mov	r18, r27
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <interperetKnob+0x302>
	}
	else
	{
		returnMe = v2-v1;
    10f6:	26 1b       	sub	r18, r22
 			break;
 			
 			case 4:;
 			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];
 			if(checkVariation(newRead,prevRead)>2)
    10f8:	23 30       	cpi	r18, 0x03	; 3
    10fa:	08 f4       	brcc	.+2      	; 0x10fe <interperetKnob+0x308>
    10fc:	7d c0       	rjmp	.+250    	; 0x11f8 <interperetKnob+0x402>
 			{
				int16_t negCheckValueTrack = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__floatsisf>
    1108:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    110c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1110:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1114:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1118:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <__divsf3>
    111c:	2b 01       	movw	r4, r22
    111e:	3c 01       	movw	r6, r24
    1120:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <NegativeOffset>
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__floatsisf>
    112e:	9b 01       	movw	r18, r22
    1130:	ac 01       	movw	r20, r24
    1132:	c3 01       	movw	r24, r6
    1134:	b2 01       	movw	r22, r4
    1136:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <__subsf3>
    113a:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <__fixsfsi>
    113e:	86 2f       	mov	r24, r22
    1140:	97 2f       	mov	r25, r23
    1142:	9c 01       	movw	r18, r24
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
    1144:	8e 85       	ldd	r24, Y+14	; 0x0e
    1146:	84 60       	ori	r24, 0x04	; 4
    1148:	8e 87       	std	Y+14, r24	; 0x0e
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
    114a:	81 2f       	mov	r24, r17
    114c:	80 64       	ori	r24, 0x40	; 64
    114e:	8f 87       	std	Y+15, r24	; 0x0f
				
	 			currentKnobPattern->trackMainVolumeLSB[positionSelectTracks] = (negCheckValueTrack);
    1150:	b1 2c       	mov	r11, r1
    1152:	f6 01       	movw	r30, r12
    1154:	ea 0d       	add	r30, r10
    1156:	fb 1d       	adc	r31, r11
    1158:	60 af       	std	Z+56, r22	; 0x38
	 			if(negCheckValueTrack>(-1))
    115a:	33 23       	and	r19, r19
    115c:	2c f0       	brlt	.+10     	; 0x1168 <interperetKnob+0x372>
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 0;
    115e:	f6 01       	movw	r30, r12
    1160:	ea 0d       	add	r30, r10
    1162:	fb 1d       	adc	r31, r11
    1164:	10 a6       	std	Z+40, r1	; 0x28
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <interperetKnob+0x37c>
	 			}else
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 255;
    1168:	8f ef       	ldi	r24, 0xFF	; 255
    116a:	f6 01       	movw	r30, r12
    116c:	ea 0d       	add	r30, r10
    116e:	fb 1d       	adc	r31, r11
    1170:	80 a7       	std	Z+40, r24	; 0x28
	 			}

				
				if(currentKnobPattern->envelopeType[positionSelectTracks]==1||currentKnobPattern->envelopeType[positionSelectTracks]==3) //set track volume directly if Envelope mode is only release, or none. 
    1172:	f6 01       	movw	r30, r12
    1174:	ea 0d       	add	r30, r10
    1176:	fb 1d       	adc	r31, r11
    1178:	e5 51       	subi	r30, 0x15	; 21
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	80 81       	ld	r24, Z
    117e:	8d 7f       	andi	r24, 0xFD	; 253
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	81 f4       	brne	.+32     	; 0x11a4 <interperetKnob+0x3ae>
				{
	 				setTrackVolume(currentKnobPattern->trackSampleLSB[positionSelectTracks], currentKnobPattern->trackSampleMSB[positionSelectTracks],
    1184:	ac 0c       	add	r10, r12
    1186:	bd 1c       	adc	r11, r13
    1188:	d5 01       	movw	r26, r10
    118a:	a8 56       	subi	r26, 0x68	; 104
    118c:	bf 4f       	sbci	r27, 0xFF	; 255
    118e:	c5 01       	movw	r24, r10
    1190:	88 55       	subi	r24, 0x58	; 88
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	f5 01       	movw	r30, r10
    1196:	20 a5       	ldd	r18, Z+40	; 0x28
    1198:	46 2f       	mov	r20, r22
    119a:	6c 91       	ld	r22, X
    119c:	dc 01       	movw	r26, r24
    119e:	8c 91       	ld	r24, X
    11a0:	0e 94 13 17 	call	0x2e26	; 0x2e26 <setTrackVolume>
					currentKnobPattern->trackMainVolumeLSB[positionSelectTracks], currentKnobPattern->trackMainVolumeMSB[positionSelectTracks]);
				}
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select]; 
    11a4:	8e 01       	movw	r16, r28
    11a6:	0e 0d       	add	r16, r14
    11a8:	1f 1d       	adc	r17, r15
    11aa:	f8 01       	movw	r30, r16
    11ac:	e7 58       	subi	r30, 0x87	; 135
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	d8 01       	movw	r26, r16
    11b2:	a3 5b       	subi	r26, 0xB3	; 179
    11b4:	bf 4f       	sbci	r27, 0xFF	; 255
    11b6:	8c 91       	ld	r24, X
    11b8:	80 83       	st	Z, r24
    11ba:	1e c0       	rjmp	.+60     	; 0x11f8 <interperetKnob+0x402>
		}
		
		
	}else
	{
		switch (select)
    11bc:	8a 32       	cpi	r24, 0x2A	; 42
    11be:	e1 f4       	brne	.+56     	; 0x11f8 <interperetKnob+0x402>
// 			break;
// 			
 			case 42:
			 
			 //we need to do a bit more filtering here. Not sure if that's happening here, or in the actual knob read.
			 if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
    11c0:	fa 01       	movw	r30, r20
    11c2:	e9 58       	subi	r30, 0x89	; 137
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	80 81       	ld	r24, Z
    11c8:	bc 96       	adiw	r30, 0x2c	; 44
    11ca:	90 81       	ld	r25, Z
    11cc:	98 17       	cp	r25, r24
    11ce:	a1 f0       	breq	.+40     	; 0x11f8 <interperetKnob+0x402>
			{//not sure if this works here, but we're going to try it. 
				
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
    11d0:	fa 01       	movw	r30, r20
    11d2:	96 85       	ldd	r25, Z+14	; 0x0e
    11d4:	94 60       	ori	r25, 0x04	; 4
    11d6:	96 87       	std	Z+14, r25	; 0x0e
				currentGlobals->knobStatus = (5<<4); //since all other pot banks are 0-4, the next ones will be 5-8. We should maybe figure out a better system for this, 
    11d8:	90 e5       	ldi	r25, 0x50	; 80
    11da:	97 87       	std	Z+15, r25	; 0x0f
				//maybe some defines?				
 				currentKnobPattern->patternBPM = currentGlobals->filteredKnobBuffer[select];
    11dc:	fb 01       	movw	r30, r22
    11de:	e8 53       	subi	r30, 0x38	; 56
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	80 83       	st	Z, r24
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
    11e8:	da 01       	movw	r26, r20
    11ea:	ad 55       	subi	r26, 0x5D	; 93
    11ec:	bf 4f       	sbci	r27, 0xFF	; 255
    11ee:	fa 01       	movw	r30, r20
    11f0:	e9 58       	subi	r30, 0x89	; 137
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 81       	ld	r24, Z
    11f6:	8c 93       	st	X, r24
// 			break;
		}
		
	}

}
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	ff 90       	pop	r15
    1202:	ef 90       	pop	r14
    1204:	df 90       	pop	r13
    1206:	cf 90       	pop	r12
    1208:	bf 90       	pop	r11
    120a:	af 90       	pop	r10
    120c:	7f 90       	pop	r7
    120e:	6f 90       	pop	r6
    1210:	5f 90       	pop	r5
    1212:	4f 90       	pop	r4
    1214:	08 95       	ret

00001216 <listenKnobs>:

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
    1216:	ef 92       	push	r14
    1218:	ff 92       	push	r15
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	7c 01       	movw	r14, r24
    1222:	8b 01       	movw	r16, r22
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    1224:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
    1226:	8c 2f       	mov	r24, r28
    1228:	7b dd       	rcall	.-1290   	; 0xd20 <selectKnob>
		updateKnob(loopCounter, currentGlobals);
    122a:	b8 01       	movw	r22, r16
    122c:	8c 2f       	mov	r24, r28
    122e:	b8 dd       	rcall	.-1168   	; 0xda0 <updateKnob>
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
    1230:	a8 01       	movw	r20, r16
    1232:	b7 01       	movw	r22, r14
    1234:	8c 2f       	mov	r24, r28
    1236:	df dd       	rcall	.-1090   	; 0xdf6 <interperetKnob>

}

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    1238:	cf 5f       	subi	r28, 0xFF	; 255
    123a:	cc 32       	cpi	r28, 0x2C	; 44
    123c:	a1 f7       	brne	.-24     	; 0x1226 <listenKnobs+0x10>
	{
		selectKnob(loopCounter);
		updateKnob(loopCounter, currentGlobals);
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
	}
}
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	ff 90       	pop	r15
    1246:	ef 90       	pop	r14
    1248:	08 95       	ret

0000124a <initLEDs>:
extern Pattern currentPattern;
extern uint8_t currentStep;

void initLEDs()
{
	DDRG = 0B00000111; //outputs on G5,2, and 0.
    124a:	87 e0       	ldi	r24, 0x07	; 7
    124c:	83 bb       	out	0x13, r24	; 19
    124e:	08 95       	ret

00001250 <parseLEDs>:
}
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
    1250:	a2 98       	cbi	0x14, 2	; 20
    1252:	27 e0       	ldi	r18, 0x07	; 7
	for(uint8_t j=0; j<7; j++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    1254:	a0 9a       	sbi	0x14, 0	; 20
		if(gpParse&0x80)
    1256:	66 23       	and	r22, r22
    1258:	14 f4       	brge	.+4      	; 0x125e <parseLEDs+0xe>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    125a:	a1 9a       	sbi	0x14, 1	; 20
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <parseLEDs+0x10>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    125e:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    1260:	a0 98       	cbi	0x14, 0	; 20
		gpParse = gpParse << 1;
    1262:	66 0f       	add	r22, r22
    1264:	21 50       	subi	r18, 0x01	; 1
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t j=0; j<7; j++)
    1266:	b1 f7       	brne	.-20     	; 0x1254 <parseLEDs+0x4>
    1268:	21 e1       	ldi	r18, 0x11	; 17
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    126a:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
    126c:	99 23       	and	r25, r25
    126e:	14 f4       	brge	.+4      	; 0x1274 <parseLEDs+0x24>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    1270:	a1 9a       	sbi	0x14, 1	; 20
    1272:	01 c0       	rjmp	.+2      	; 0x1276 <parseLEDs+0x26>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    1274:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    1276:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	21 50       	subi	r18, 0x01	; 1
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
    127e:	a9 f7       	brne	.-22     	; 0x126a <parseLEDs+0x1a>
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	
	
	PORTG |= (1 << PG2); //latch pin high
    1280:	a2 9a       	sbi	0x14, 2	; 20
    1282:	08 95       	ret

00001284 <updateLEDs>:
}

void updateLEDs(Pattern ledCurrentPattern, Globals currentGlobals)
{
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	cd 57       	subi	r28, 0x7D	; 125
    128e:	de 4f       	sbci	r29, 0xFE	; 254
    1290:	68 81       	ld	r22, Y
    1292:	c3 58       	subi	r28, 0x83	; 131
    1294:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t shiftedState = currentGlobals.menuState >> 4; //this will get rid of EncoderB
	uint16_t totalLights = currentGlobals.currentTrigButtons|currentGlobals.currentTrigMidi|currentGlobals.currentTrigSequencer; //we want lights from all sources. 
    1296:	cf 57       	subi	r28, 0x7F	; 127
    1298:	de 4f       	sbci	r29, 0xFE	; 254
    129a:	28 81       	ld	r18, Y
    129c:	39 81       	ldd	r19, Y+1	; 0x01
    129e:	c1 58       	subi	r28, 0x81	; 129
    12a0:	d1 40       	sbci	r29, 0x01	; 1
    12a2:	ca 57       	subi	r28, 0x7A	; 122
    12a4:	de 4f       	sbci	r29, 0xFE	; 254
    12a6:	88 81       	ld	r24, Y
    12a8:	99 81       	ldd	r25, Y+1	; 0x01
    12aa:	c6 58       	subi	r28, 0x86	; 134
    12ac:	d1 40       	sbci	r29, 0x01	; 1
    12ae:	82 2b       	or	r24, r18
    12b0:	93 2b       	or	r25, r19
    12b2:	cc 57       	subi	r28, 0x7C	; 124
    12b4:	de 4f       	sbci	r29, 0xFE	; 254
    12b6:	28 81       	ld	r18, Y
    12b8:	39 81       	ldd	r19, Y+1	; 0x01
    12ba:	c4 58       	subi	r28, 0x84	; 132
    12bc:	d1 40       	sbci	r29, 0x01	; 1
    12be:	28 2b       	or	r18, r24
    12c0:	39 2b       	or	r19, r25
	//no input from midi yet, but we will have that eventually. 
	switch(shiftedState)
    12c2:	c5 57       	subi	r28, 0x75	; 117
    12c4:	de 4f       	sbci	r29, 0xFE	; 254
    12c6:	98 81       	ld	r25, Y
    12c8:	cb 58       	subi	r28, 0x8B	; 139
    12ca:	d1 40       	sbci	r29, 0x01	; 1
    12cc:	92 95       	swap	r25
    12ce:	9f 70       	andi	r25, 0x0F	; 15
    12d0:	91 30       	cpi	r25, 0x01	; 1
    12d2:	49 f0       	breq	.+18     	; 0x12e6 <updateLEDs+0x62>
    12d4:	28 f0       	brcs	.+10     	; 0x12e0 <updateLEDs+0x5c>
    12d6:	92 30       	cpi	r25, 0x02	; 2
    12d8:	d1 f0       	breq	.+52     	; 0x130e <updateLEDs+0x8a>
    12da:	93 30       	cpi	r25, 0x03	; 3
    12dc:	d9 f0       	breq	.+54     	; 0x1314 <updateLEDs+0x90>
    12de:	1c c0       	rjmp	.+56     	; 0x1318 <updateLEDs+0x94>
	{
		case 0:
		parseLEDs(totalLights, currentGlobals.currentGPButtons);
    12e0:	c9 01       	movw	r24, r18
    12e2:	b6 df       	rcall	.-148    	; 0x1250 <parseLEDs>
		break;
    12e4:	19 c0       	rjmp	.+50     	; 0x1318 <updateLEDs+0x94>

		case 1:
		parseLEDs(ledCurrentPattern.trackSequence[currentGlobals.currentStep], currentGlobals.currentGPButtons);
    12e6:	c7 57       	subi	r28, 0x77	; 119
    12e8:	de 4f       	sbci	r29, 0xFE	; 254
    12ea:	e8 81       	ld	r30, Y
    12ec:	c9 58       	subi	r28, 0x89	; 137
    12ee:	d1 40       	sbci	r29, 0x01	; 1
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	ee 0f       	add	r30, r30
    12f4:	ff 1f       	adc	r31, r31
    12f6:	86 e0       	ldi	r24, 0x06	; 6
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	8c 0f       	add	r24, r28
    12fc:	9d 1f       	adc	r25, r29
    12fe:	e8 0f       	add	r30, r24
    1300:	f9 1f       	adc	r31, r25
    1302:	e5 50       	subi	r30, 0x05	; 5
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	80 81       	ld	r24, Z
    1308:	91 81       	ldd	r25, Z+1	; 0x01
    130a:	a2 df       	rcall	.-188    	; 0x1250 <parseLEDs>
		break;

		case 2:
		parseLEDs(totalLights, currentGlobals.currentGPButtons);
    130c:	05 c0       	rjmp	.+10     	; 0x1318 <updateLEDs+0x94>
    130e:	c9 01       	movw	r24, r18
		break;
    1310:	9f df       	rcall	.-194    	; 0x1250 <parseLEDs>

		case 3:
		parseLEDs(totalLights, currentGlobals.currentGPButtons);
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <updateLEDs+0x94>
    1314:	c9 01       	movw	r24, r18
    1316:	9c df       	rcall	.-200    	; 0x1250 <parseLEDs>
		break;
	}

}
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <main>:
//Pattern may not need to be volatile, but I'd like to keep it around. 
volatile Pattern currentPattern;
volatile Globals currentGlobals;
volatile uint32_t globalTimer = 0;

int main(){
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	c2 5b       	subi	r28, 0xB2	; 178
    1328:	d3 40       	sbci	r29, 0x03	; 3
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
	uint8_t factoryReset=0; // set this to 1 if you would like to fill the eeprom with Factory data, and erase all user data.
    1334:	19 82       	std	Y+1, r1	; 0x01
	Screen screenBank;
	char testArray[21] = "CurrentTime:         ";
	
	initScreen();
    1336:	0e 94 39 13 	call	0x2672	; 0x2672 <initScreen>
	initButtons();
    133a:	0e 94 16 01 	call	0x22c	; 0x22c <initButtons>
	initEncoders();
    133e:	78 d8       	rcall	.-3856   	; 0x430 <initEncoders>
	initBank(&currentPattern);
    1340:	8d ef       	ldi	r24, 0xFD	; 253
    1342:	93 e0       	ldi	r25, 0x03	; 3
    1344:	71 db       	rcall	.-2334   	; 0xa28 <initBank>
	twi_init();
    1346:	0e 94 65 19 	call	0x32ca	; 0x32ca <twi_init>
	sei();
    134a:	78 94       	sei
	//factory Reset, we should turn this into a global function. 
	factoryResetCheck(&factoryReset,&currentPattern, &currentGlobals);
    134c:	48 e7       	ldi	r20, 0x78	; 120
    134e:	55 e0       	ldi	r21, 0x05	; 5
    1350:	6d ef       	ldi	r22, 0xFD	; 253
    1352:	73 e0       	ldi	r23, 0x03	; 3
    1354:	ce 01       	movw	r24, r28
    1356:	01 96       	adiw	r24, 0x01	; 1
	
	initTimer();
    1358:	2f dc       	rcall	.-1954   	; 0xbb8 <factoryResetCheck>
    135a:	dc db       	rcall	.-2120   	; 0xb14 <initTimer>
	initGlobals(&currentGlobals, factoryReset);
    135c:	69 81       	ldd	r22, Y+1	; 0x01
    135e:	88 e7       	ldi	r24, 0x78	; 120
	initLEDs();
    1360:	95 e0       	ldi	r25, 0x05	; 5
    1362:	91 db       	rcall	.-2270   	; 0xa86 <initGlobals>
	initADC();
    1364:	72 df       	rcall	.-284    	; 0x124a <initLEDs>
    1366:	c7 dc       	rcall	.-1650   	; 0xcf6 <initADC>
	serialInit0();
    1368:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <serialInit0>
	initMidi();
    136c:	0e 94 9f 12 	call	0x253e	; 0x253e <initMidi>
	//initEnvelopes();
	//initSequencer();
	
	
	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
    1370:	60 91 7f 05 	lds	r22, 0x057F	; 0x80057f <currentGlobals+0x7>
    1374:	8d ef       	ldi	r24, 0xFD	; 253
    1376:	93 e0       	ldi	r25, 0x03	; 3
    1378:	0e 94 b0 1b 	call	0x3760	; 0x3760 <eepromLoadPattern>
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    137c:	00 e0       	ldi	r16, 0x00	; 0
    137e:	10 e0       	ldi	r17, 0x00	; 0
	{
		uint8_t loadSelect = i%44;
    1380:	0f 2e       	mov	r0, r31
    1382:	fc e2       	ldi	r31, 0x2C	; 44
    1384:	df 2e       	mov	r13, r31
    1386:	f0 2d       	mov	r31, r0
    1388:	98 01       	movw	r18, r16
    138a:	af e2       	ldi	r26, 0x2F	; 47
    138c:	ba eb       	ldi	r27, 0xBA	; 186
    138e:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    1392:	96 95       	lsr	r25
    1394:	87 95       	ror	r24
    1396:	92 95       	swap	r25
    1398:	82 95       	swap	r24
    139a:	8f 70       	andi	r24, 0x0F	; 15
    139c:	89 27       	eor	r24, r25
    139e:	9f 70       	andi	r25, 0x0F	; 15
    13a0:	89 27       	eor	r24, r25
    13a2:	d8 9e       	mul	r13, r24
    13a4:	90 01       	movw	r18, r0
    13a6:	d9 9e       	mul	r13, r25
    13a8:	30 0d       	add	r19, r0
    13aa:	11 24       	eor	r1, r1
    13ac:	78 01       	movw	r14, r16
    13ae:	e2 1a       	sub	r14, r18
		selectKnob(loadSelect);
    13b0:	f3 0a       	sbc	r15, r19
    13b2:	8e 2d       	mov	r24, r14
    13b4:	b5 dc       	rcall	.-1686   	; 0xd20 <selectKnob>
		updateKnob(loadSelect, &currentGlobals);
    13b6:	68 e7       	ldi	r22, 0x78	; 120
    13b8:	75 e0       	ldi	r23, 0x05	; 5
    13ba:	8e 2d       	mov	r24, r14
    13bc:	f1 dc       	rcall	.-1566   	; 0xda0 <updateKnob>
    13be:	0f 5f       	subi	r16, 0xFF	; 255
	//initEnvelopes();
	//initSequencer();
	
	
	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    13c0:	1f 4f       	sbci	r17, 0xFF	; 255
    13c2:	08 3b       	cpi	r16, 0xB8	; 184
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	18 07       	cpc	r17, r24
    13c8:	f9 f6       	brne	.-66     	; 0x1388 <main+0x6a>
	{
		uint8_t loadSelect = i%44;
		selectKnob(loadSelect);
		updateKnob(loadSelect, &currentGlobals);
	}
	initializeKnob(&currentGlobals); //then copy it to the lastFilteredKnobBuffer. 
    13ca:	88 e7       	ldi	r24, 0x78	; 120
    13cc:	95 e0       	ldi	r25, 0x05	; 5
    13ce:	07 dd       	rcall	.-1522   	; 0xdde <initializeKnob>
    13d0:	69 81       	ldd	r22, Y+1	; 0x01
	globalLoad(&currentGlobals, factoryReset);
    13d2:	88 e7       	ldi	r24, 0x78	; 120
    13d4:	95 e0       	ldi	r25, 0x05	; 5
    13d6:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <globalLoad>
    13da:	ed b7       	in	r30, 0x3d	; 61
	initMenu(&screenBank, currentPattern, currentGlobals); //fills screenBank with menu strings
    13dc:	fe b7       	in	r31, 0x3e	; 62
    13de:	e2 5f       	subi	r30, 0xF2	; 242
    13e0:	f1 09       	sbc	r31, r1
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	fe bf       	out	0x3e, r31	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	ed bf       	out	0x3d, r30	; 61
    13ec:	ad b7       	in	r26, 0x3d	; 61
    13ee:	be b7       	in	r27, 0x3e	; 62
    13f0:	11 96       	adiw	r26, 0x01	; 1
    13f2:	82 ef       	ldi	r24, 0xF2	; 242
    13f4:	e8 e7       	ldi	r30, 0x78	; 120
    13f6:	f5 e0       	ldi	r31, 0x05	; 5
    13f8:	01 90       	ld	r0, Z+
    13fa:	0d 92       	st	X+, r0
    13fc:	8a 95       	dec	r24
    13fe:	e1 f7       	brne	.-8      	; 0x13f8 <main+0xda>
    1400:	8d b7       	in	r24, 0x3d	; 61
    1402:	9e b7       	in	r25, 0x3e	; 62
    1404:	8b 57       	subi	r24, 0x7B	; 123
    1406:	91 40       	sbci	r25, 0x01	; 1
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	9e bf       	out	0x3e, r25	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	8d bf       	out	0x3d, r24	; 61
    1412:	ad b7       	in	r26, 0x3d	; 61
    1414:	be b7       	in	r27, 0x3e	; 62
    1416:	11 96       	adiw	r26, 0x01	; 1
    1418:	8b e7       	ldi	r24, 0x7B	; 123
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	ed ef       	ldi	r30, 0xFD	; 253
    141e:	f3 e0       	ldi	r31, 0x03	; 3
    1420:	01 90       	ld	r0, Z+
    1422:	0d 92       	st	X+, r0
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	e1 f7       	brne	.-8      	; 0x1420 <main+0x102>
    1428:	ce 01       	movw	r24, r28
    142a:	02 96       	adiw	r24, 0x02	; 2
    142c:	35 d1       	rcall	.+618    	; 0x1698 <initMenu>
    142e:	f8 94       	cli
	//this ISR is used for Button De-Bouncing. Maybe we could put it somewhere else. 
	//TCCR2B = 1<<CS22;//using 256 from pre-scaler
	//TIMSK2 = 1<<TOIE2; //interupt on counter overflow. since we're interupting on value 256 of with a 256 pre-scaler, we're calling this function every 65,536
	//clock cycles. at 16MHz, that equates to every 0.004096, seconds, or every 4 milliseconds. We ~~~should be able to do the same thing from our global counter.

	cli(); //this may not be needed, but also may be effecting things since we're setting interrupt registers after sei has already happened. 
    1430:	78 94       	sei
	sei();
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	0f 2e       	mov	r0, r31

while(1) {
	
	
	updateTimers(&currentGlobals, globalTimer); //we update our global timers here. 
	if(currentGlobals.timerFlag) //triggers every millisecond / 16000 cycles.
    143e:	f9 e6       	ldi	r31, 0x69	; 105
    1440:	ef 2e       	mov	r14, r31
    1442:	f6 e0       	ldi	r31, 0x06	; 6
    1444:	ff 2e       	mov	r15, r31
    1446:	f0 2d       	mov	r31, r0
    1448:	40 91 ee 03 	lds	r20, 0x03EE	; 0x8003ee <globalTimer>


while(1) {
	
	
	updateTimers(&currentGlobals, globalTimer); //we update our global timers here. 
    144c:	50 91 ef 03 	lds	r21, 0x03EF	; 0x8003ef <globalTimer+0x1>
    1450:	60 91 f0 03 	lds	r22, 0x03F0	; 0x8003f0 <globalTimer+0x2>
    1454:	70 91 f1 03 	lds	r23, 0x03F1	; 0x8003f1 <globalTimer+0x3>
    1458:	88 e7       	ldi	r24, 0x78	; 120
    145a:	95 e0       	ldi	r25, 0x05	; 5
    145c:	67 db       	rcall	.-2354   	; 0xb2c <updateTimers>
	if(currentGlobals.timerFlag) //triggers every millisecond / 16000 cycles.
    145e:	f7 01       	movw	r30, r14
    1460:	80 81       	ld	r24, Z
    1462:	88 23       	and	r24, r24
    1464:	29 f0       	breq	.+10     	; 0x1470 <main+0x152>
	{
		listenEncoders(&currentPattern, &currentGlobals);
    1466:	68 e7       	ldi	r22, 0x78	; 120
    1468:	75 e0       	ldi	r23, 0x05	; 5
    146a:	8d ef       	ldi	r24, 0xFD	; 253
    146c:	93 e0       	ldi	r25, 0x03	; 3
    146e:	6e d8       	rcall	.-3876   	; 0x54c <listenEncoders>
    1470:	68 e7       	ldi	r22, 0x78	; 120
	}
	
	listenTrigButtons(&currentPattern, &currentGlobals);
    1472:	75 e0       	ldi	r23, 0x05	; 5
    1474:	8d ef       	ldi	r24, 0xFD	; 253
    1476:	93 e0       	ldi	r25, 0x03	; 3
    1478:	0e 94 1d 01 	call	0x23a	; 0x23a <listenTrigButtons>
    147c:	08 e7       	ldi	r16, 0x78	; 120
	listenGPButtons(currentPattern, &currentGlobals);
    147e:	15 e0       	ldi	r17, 0x05	; 5
    1480:	1f 93       	push	r17
    1482:	0f 93       	push	r16
    1484:	8d b7       	in	r24, 0x3d	; 61
    1486:	9e b7       	in	r25, 0x3e	; 62
    1488:	8b 57       	subi	r24, 0x7B	; 123
    148a:	91 40       	sbci	r25, 0x01	; 1
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	9e bf       	out	0x3e, r25	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	8d bf       	out	0x3d, r24	; 61
    1496:	ad b7       	in	r26, 0x3d	; 61
    1498:	be b7       	in	r27, 0x3e	; 62
    149a:	11 96       	adiw	r26, 0x01	; 1
    149c:	8b e7       	ldi	r24, 0x7B	; 123
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	ed ef       	ldi	r30, 0xFD	; 253
    14a2:	f3 e0       	ldi	r31, 0x03	; 3
    14a4:	01 90       	ld	r0, Z+
    14a6:	0d 92       	st	X+, r0
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	e1 f7       	brne	.-8      	; 0x14a4 <main+0x186>
    14ac:	0e 94 86 01 	call	0x30c	; 0x30c <listenGPButtons>
    14b0:	0f b6       	in	r0, 0x3f	; 63
	updateLEDs(currentPattern, currentGlobals);
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	8d b7       	in	r24, 0x3d	; 61
    14bc:	9e b7       	in	r25, 0x3e	; 62
    14be:	82 5f       	subi	r24, 0xF2	; 242
    14c0:	91 09       	sbc	r25, r1
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	9e bf       	out	0x3e, r25	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	8d bf       	out	0x3d, r24	; 61
    14cc:	ad b7       	in	r26, 0x3d	; 61
    14ce:	be b7       	in	r27, 0x3e	; 62
    14d0:	11 96       	adiw	r26, 0x01	; 1
    14d2:	82 ef       	ldi	r24, 0xF2	; 242
    14d4:	f8 01       	movw	r30, r16
    14d6:	01 90       	ld	r0, Z+
    14d8:	0d 92       	st	X+, r0
    14da:	8a 95       	dec	r24
    14dc:	e1 f7       	brne	.-8      	; 0x14d6 <main+0x1b8>
    14de:	ed b7       	in	r30, 0x3d	; 61
    14e0:	fe b7       	in	r31, 0x3e	; 62
    14e2:	eb 57       	subi	r30, 0x7B	; 123
    14e4:	f1 40       	sbci	r31, 0x01	; 1
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	fe bf       	out	0x3e, r31	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	ed bf       	out	0x3d, r30	; 61
    14f0:	ad b7       	in	r26, 0x3d	; 61
    14f2:	be b7       	in	r27, 0x3e	; 62
    14f4:	11 96       	adiw	r26, 0x01	; 1
    14f6:	8b e7       	ldi	r24, 0x7B	; 123
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	ed ef       	ldi	r30, 0xFD	; 253
    14fc:	f3 e0       	ldi	r31, 0x03	; 3
    14fe:	01 90       	ld	r0, Z+
    1500:	0d 92       	st	X+, r0
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	e1 f7       	brne	.-8      	; 0x14fe <main+0x1e0>
    1506:	be de       	rcall	.-644    	; 0x1284 <updateLEDs>
	listenKnobs(&currentPattern, &currentGlobals);
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	b8 01       	movw	r22, r16
    1514:	8d ef       	ldi	r24, 0xFD	; 253
    1516:	93 e0       	ldi	r25, 0x03	; 3
    1518:	7e de       	rcall	.-772    	; 0x1216 <listenKnobs>
    151a:	1f 93       	push	r17
	updateSequencer(currentPattern, &currentGlobals);
    151c:	0f 93       	push	r16
    151e:	ed b7       	in	r30, 0x3d	; 61
    1520:	fe b7       	in	r31, 0x3e	; 62
    1522:	eb 57       	subi	r30, 0x7B	; 123
    1524:	f1 40       	sbci	r31, 0x01	; 1
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	fe bf       	out	0x3e, r31	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	ed bf       	out	0x3d, r30	; 61
    1530:	ad b7       	in	r26, 0x3d	; 61
    1532:	be b7       	in	r27, 0x3e	; 62
    1534:	11 96       	adiw	r26, 0x01	; 1
    1536:	8b e7       	ldi	r24, 0x7B	; 123
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	ed ef       	ldi	r30, 0xFD	; 253
    153c:	f3 e0       	ldi	r31, 0x03	; 3
    153e:	01 90       	ld	r0, Z+
    1540:	0d 92       	st	X+, r0
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	e1 f7       	brne	.-8      	; 0x153e <main+0x220>
    1546:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <updateSequencer>
	updateScreen(&screenBank, &currentPattern, &currentGlobals);
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	a8 01       	movw	r20, r16
    1556:	6d ef       	ldi	r22, 0xFD	; 253
    1558:	73 e0       	ldi	r23, 0x03	; 3
    155a:	ce 01       	movw	r24, r28
    155c:	02 96       	adiw	r24, 0x02	; 2
    155e:	dc d1       	rcall	.+952    	; 0x1918 <updateScreen>
    1560:	ed b7       	in	r30, 0x3d	; 61
	midiRead(currentPattern, currentGlobals);
    1562:	fe b7       	in	r31, 0x3e	; 62
    1564:	e2 5f       	subi	r30, 0xF2	; 242
    1566:	f1 09       	sbc	r31, r1
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	fe bf       	out	0x3e, r31	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	ed bf       	out	0x3d, r30	; 61
    1572:	ad b7       	in	r26, 0x3d	; 61
    1574:	be b7       	in	r27, 0x3e	; 62
    1576:	11 96       	adiw	r26, 0x01	; 1
    1578:	82 ef       	ldi	r24, 0xF2	; 242
    157a:	f8 01       	movw	r30, r16
    157c:	01 90       	ld	r0, Z+
    157e:	0d 92       	st	X+, r0
    1580:	8a 95       	dec	r24
    1582:	e1 f7       	brne	.-8      	; 0x157c <main+0x25e>
    1584:	8d b7       	in	r24, 0x3d	; 61
    1586:	9e b7       	in	r25, 0x3e	; 62
    1588:	8b 57       	subi	r24, 0x7B	; 123
    158a:	91 40       	sbci	r25, 0x01	; 1
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	9e bf       	out	0x3e, r25	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	8d bf       	out	0x3d, r24	; 61
    1596:	ad b7       	in	r26, 0x3d	; 61
    1598:	be b7       	in	r27, 0x3e	; 62
    159a:	11 96       	adiw	r26, 0x01	; 1
    159c:	8b e7       	ldi	r24, 0x7B	; 123
    159e:	91 e0       	ldi	r25, 0x01	; 1
    15a0:	ed ef       	ldi	r30, 0xFD	; 253
    15a2:	f3 e0       	ldi	r31, 0x03	; 3
    15a4:	01 90       	ld	r0, Z+
    15a6:	0d 92       	st	X+, r0
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	e1 f7       	brne	.-8      	; 0x15a4 <main+0x286>
    15ac:	d8 d7       	rcall	.+4016   	; 0x255e <midiRead>
    15ae:	0f b6       	in	r0, 0x3f	; 63
	releaseUpdate(&currentPattern, &currentGlobals);
    15b0:	f8 94       	cli
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	cd bf       	out	0x3d, r28	; 61
    15b8:	b8 01       	movw	r22, r16
    15ba:	8d ef       	ldi	r24, 0xFD	; 253
    15bc:	93 e0       	ldi	r25, 0x03	; 3
    15be:	0e 94 e7 18 	call	0x31ce	; 0x31ce <releaseUpdate>
    15c2:	42 cf       	rjmp	.-380    	; 0x1448 <main+0x12a>

000015c4 <__vector_13>:
	//numPrinter(testArray, 11,5,currentGlobals.releaseCounter);
	//numPrinter(testArray, 11,5,(globalTimer/10)); //the only thing that should be effecting this timer, is the ISRs from the encoders. 
	//outputS(testArray,0);
	}
    15c4:	1f 92       	push	r1
}

ISR(TIMER2_COMPA_vect)
{
    15c6:	0f 92       	push	r0
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	0f 92       	push	r0
    15cc:	11 24       	eor	r1, r1
    15ce:	0b b6       	in	r0, 0x3b	; 59
    15d0:	0f 92       	push	r0
    15d2:	2f 93       	push	r18
    15d4:	3f 93       	push	r19
    15d6:	4f 93       	push	r20
    15d8:	5f 93       	push	r21
    15da:	6f 93       	push	r22
    15dc:	7f 93       	push	r23
    15de:	8f 93       	push	r24
    15e0:	9f 93       	push	r25
    15e2:	af 93       	push	r26
    15e4:	bf 93       	push	r27
    15e6:	ef 93       	push	r30
    15e8:	ff 93       	push	r31
	globalTimer++; //this counts in one order of magnitude smaller than millis : 0.0001 seconds. 
    15ea:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <globalTimer>
    15ee:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <globalTimer+0x1>
    15f2:	a0 91 f0 03 	lds	r26, 0x03F0	; 0x8003f0 <globalTimer+0x2>
    15f6:	b0 91 f1 03 	lds	r27, 0x03F1	; 0x8003f1 <globalTimer+0x3>
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	a1 1d       	adc	r26, r1
    15fe:	b1 1d       	adc	r27, r1
    1600:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <globalTimer>
    1604:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <globalTimer+0x1>
    1608:	a0 93 f0 03 	sts	0x03F0, r26	; 0x8003f0 <globalTimer+0x2>
    160c:	b0 93 f1 03 	sts	0x03F1, r27	; 0x8003f1 <globalTimer+0x3>
	//we don't want to do anything else here.
	if(globalTimer%40==0) //every 40 ticks, we want to call Debounce
    1610:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <globalTimer>
    1614:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <globalTimer+0x1>
    1618:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <globalTimer+0x2>
    161c:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <globalTimer+0x3>
    1620:	28 e2       	ldi	r18, 0x28	; 40
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__udivmodsi4>
    162c:	67 2b       	or	r22, r23
    162e:	68 2b       	or	r22, r24
    1630:	69 2b       	or	r22, r25
    1632:	f9 f4       	brne	.+62     	; 0x1672 <__vector_13+0xae>

static inline void debounce() //is this Timer interrupt too long?
{
	static uint8_t vcount_low = 0xFF, vcount_high = 0xFF;
	static uint8_t button_state = 0;
	uint8_t state_changed = ~BUTTON_PIN ^ button_state;
    1634:	83 b1       	in	r24, 0x03	; 3
    1636:	20 91 ed 03 	lds	r18, 0x03ED	; 0x8003ed <button_state.1746>
    163a:	80 95       	com	r24
    163c:	38 2f       	mov	r19, r24
    163e:	32 27       	eor	r19, r18
	VC_DEC_OR_SET(vcount_high, vcount_low, state_changed);
    1640:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <vcount_low.1744>
    1644:	93 23       	and	r25, r19
    1646:	89 2f       	mov	r24, r25
    1648:	80 95       	com	r24
    164a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <vcount_low.1744>
    164e:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <vcount_high.1745>
    1652:	93 23       	and	r25, r19
    1654:	98 27       	eor	r25, r24
    1656:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <vcount_high.1745>
    165a:	83 23       	and	r24, r19
	state_changed &= vcount_low & vcount_high;
    165c:	89 23       	and	r24, r25
	button_state ^= state_changed;
    165e:	92 2f       	mov	r25, r18
    1660:	98 27       	eor	r25, r24
    1662:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <button_state.1746>
	buttons_down |= button_state&state_changed;
    1666:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <buttons_down>
    166a:	89 23       	and	r24, r25
    166c:	82 2b       	or	r24, r18
    166e:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <buttons_down>
	{
		debounce();
	}
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	bf 91       	pop	r27
    1678:	af 91       	pop	r26
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	7f 91       	pop	r23
    1680:	6f 91       	pop	r22
    1682:	5f 91       	pop	r21
    1684:	4f 91       	pop	r20
    1686:	3f 91       	pop	r19
    1688:	2f 91       	pop	r18
    168a:	0f 90       	pop	r0
    168c:	0b be       	out	0x3b, r0	; 59
    168e:	0f 90       	pop	r0
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	0f 90       	pop	r0
    1694:	1f 90       	pop	r1
    1696:	18 95       	reti

00001698 <initMenu>:
uint8_t prevMenuState; //do we need this anymore?

//I don't like using a global extern here, instead of a passed pointer,
//but I can't seem to get the struct to stay in scope.
void initMenu(Screen *initTheScreen, Pattern currentPattern, Globals currentGlobals)
{
    1698:	cf 92       	push	r12
    169a:	df 92       	push	r13
    169c:	ef 92       	push	r14
    169e:	ff 92       	push	r15
    16a0:	0f 93       	push	r16
    16a2:	1f 93       	push	r17
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	8c 01       	movw	r16, r24
    16ae:	c2 57       	subi	r28, 0x72	; 114
    16b0:	de 4f       	sbci	r29, 0xFE	; 254
    16b2:	e8 80       	ld	r14, Y
    16b4:	ce 58       	subi	r28, 0x8E	; 142
    16b6:	d1 40       	sbci	r29, 0x01	; 1

//screen0
initArrays(initTheScreen->screen0,0,"Performance Mode");
    16b8:	4f e9       	ldi	r20, 0x9F	; 159
    16ba:	52 e0       	ldi	r21, 0x02	; 2
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	74 d9       	rcall	.-3352   	; 0x9aa <initArrays>
initArrays(initTheScreen->screen0,1,"Pattern:");
    16c2:	40 eb       	ldi	r20, 0xB0	; 176
    16c4:	52 e0       	ldi	r21, 0x02	; 2
    16c6:	61 e0       	ldi	r22, 0x01	; 1
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	c8 01       	movw	r24, r16
    16cc:	6e d9       	rcall	.-3364   	; 0x9aa <initArrays>
initArrays(initTheScreen->screen0,2,"BPM:");
    16ce:	49 eb       	ldi	r20, 0xB9	; 185
    16d0:	52 e0       	ldi	r21, 0x02	; 2
    16d2:	62 e0       	ldi	r22, 0x02	; 2
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	c8 01       	movw	r24, r16
    16d8:	68 d9       	rcall	.-3376   	; 0x9aa <initArrays>
initArrays(initTheScreen->screen0,3,"Stop");
    16da:	4e eb       	ldi	r20, 0xBE	; 190
    16dc:	52 e0       	ldi	r21, 0x02	; 2
    16de:	63 e0       	ldi	r22, 0x03	; 3
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	c8 01       	movw	r24, r16
    16e4:	62 d9       	rcall	.-3388   	; 0x9aa <initArrays>

//screen1
initArrays(initTheScreen->screen1,0,"Sequence Edit");
    16e6:	68 01       	movw	r12, r16
    16e8:	8d eb       	ldi	r24, 0xBD	; 189
    16ea:	c8 0e       	add	r12, r24
    16ec:	d1 1c       	adc	r13, r1
    16ee:	43 ec       	ldi	r20, 0xC3	; 195
    16f0:	52 e0       	ldi	r21, 0x02	; 2
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	c6 01       	movw	r24, r12
    16f8:	58 d9       	rcall	.-3408   	; 0x9aa <initArrays>
initArrays(initTheScreen->screen1,1,"Pattern:");
    16fa:	40 eb       	ldi	r20, 0xB0	; 176
    16fc:	52 e0       	ldi	r21, 0x02	; 2
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	c6 01       	movw	r24, r12
    1704:	52 d9       	rcall	.-3420   	; 0x9aa <initArrays>
initArrays(initTheScreen->screen1,2,"Steps:");
    1706:	41 ed       	ldi	r20, 0xD1	; 209
    1708:	52 e0       	ldi	r21, 0x02	; 2
    170a:	62 e0       	ldi	r22, 0x02	; 2
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	c6 01       	movw	r24, r12
    1710:	4c d9       	rcall	.-3432   	; 0x9aa <initArrays>
initArrays(initTheScreen->screen1,3,"Step number:");
    1712:	48 ed       	ldi	r20, 0xD8	; 216
    1714:	52 e0       	ldi	r21, 0x02	; 2
    1716:	63 e0       	ldi	r22, 0x03	; 3
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	c6 01       	movw	r24, r12
    171c:	46 d9       	rcall	.-3444   	; 0x9aa <initArrays>
    171e:	68 01       	movw	r12, r16

//screen2
initArrays(initTheScreen->screen2,0,"Track Settings");
    1720:	86 e8       	ldi	r24, 0x86	; 134
    1722:	c8 1a       	sub	r12, r24
    1724:	8e ef       	ldi	r24, 0xFE	; 254
    1726:	d8 0a       	sbc	r13, r24
    1728:	45 ee       	ldi	r20, 0xE5	; 229
    172a:	52 e0       	ldi	r21, 0x02	; 2
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	c6 01       	movw	r24, r12
    1732:	3b d9       	rcall	.-3466   	; 0x9aa <initArrays>
initArrays(initTheScreen->screen2,1,"Track:");
    1734:	44 ef       	ldi	r20, 0xF4	; 244
    1736:	52 e0       	ldi	r21, 0x02	; 2
    1738:	61 e0       	ldi	r22, 0x01	; 1
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	c6 01       	movw	r24, r12
    173e:	35 d9       	rcall	.-3478   	; 0x9aa <initArrays>
initArrays(initTheScreen->screen2,2,"PlayMode:");
    1740:	4b ef       	ldi	r20, 0xFB	; 251
    1742:	52 e0       	ldi	r21, 0x02	; 2
    1744:	62 e0       	ldi	r22, 0x02	; 2
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	c6 01       	movw	r24, r12
    174a:	2f d9       	rcall	.-3490   	; 0x9aa <initArrays>
initArrays(initTheScreen->screen2,3,"OutRoute:");
    174c:	45 e0       	ldi	r20, 0x05	; 5
    174e:	53 e0       	ldi	r21, 0x03	; 3
    1750:	63 e0       	ldi	r22, 0x03	; 3
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	c6 01       	movw	r24, r12
    1756:	29 d9       	rcall	.-3502   	; 0x9aa <initArrays>
initArrays(initTheScreen->screen2,4,"EnvelopeMode:");
    1758:	4f e0       	ldi	r20, 0x0F	; 15
    175a:	53 e0       	ldi	r21, 0x03	; 3
    175c:	64 e0       	ldi	r22, 0x04	; 4
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	c6 01       	movw	r24, r12
    1762:	23 d9       	rcall	.-3514   	; 0x9aa <initArrays>
    1764:	4d e1       	ldi	r20, 0x1D	; 29
initArrays(initTheScreen->screen2,5,"SustainTime:      S");
    1766:	53 e0       	ldi	r21, 0x03	; 3
    1768:	65 e0       	ldi	r22, 0x05	; 5
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	c6 01       	movw	r24, r12
    176e:	1d d9       	rcall	.-3526   	; 0x9aa <initArrays>
    1770:	68 01       	movw	r12, r16

//screen3
initArrays(initTheScreen->screen3,1,"Midi Channel:");
    1772:	89 ec       	ldi	r24, 0xC9	; 201
    1774:	c8 1a       	sub	r12, r24
    1776:	8d ef       	ldi	r24, 0xFD	; 253
    1778:	d8 0a       	sbc	r13, r24
    177a:	41 e3       	ldi	r20, 0x31	; 49
    177c:	53 e0       	ldi	r21, 0x03	; 3
    177e:	61 e0       	ldi	r22, 0x01	; 1
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	c6 01       	movw	r24, r12
    1784:	12 d9       	rcall	.-3548   	; 0x9aa <initArrays>
initArrays(initTheScreen->screen3,2,"Midi trig   :");
    1786:	4f e3       	ldi	r20, 0x3F	; 63
    1788:	53 e0       	ldi	r21, 0x03	; 3
    178a:	62 e0       	ldi	r22, 0x02	; 2
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	c6 01       	movw	r24, r12
    1790:	0c d9       	rcall	.-3560   	; 0x9aa <initArrays>
initArrays(initTheScreen->screen3,3," ");
    1792:	44 ee       	ldi	r20, 0xE4	; 228
    1794:	53 e0       	ldi	r21, 0x03	; 3
    1796:	63 e0       	ldi	r22, 0x03	; 3
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	c6 01       	movw	r24, r12
    179c:	06 d9       	rcall	.-3572   	; 0x9aa <initArrays>
initArrays(initTheScreen->screen3,0,"Global Settings");
    179e:	4d e4       	ldi	r20, 0x4D	; 77
    17a0:	53 e0       	ldi	r21, 0x03	; 3
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	c6 01       	movw	r24, r12
    17a8:	00 d9       	rcall	.-3584   	; 0x9aa <initArrays>

//init all of the knob arrays:
initArrays(initTheScreen->knobScreen,0,"OutVolume x : xxxdb");//string 0 is outVolume
    17aa:	68 01       	movw	r12, r16
    17ac:	8c e0       	ldi	r24, 0x0C	; 12
    17ae:	c8 1a       	sub	r12, r24
    17b0:	8d ef       	ldi	r24, 0xFD	; 253
    17b2:	d8 0a       	sbc	r13, r24
    17b4:	4d e5       	ldi	r20, 0x5D	; 93
    17b6:	53 e0       	ldi	r21, 0x03	; 3
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,1,"Pitch : xxx");//string 1 is pitch
    17be:	f5 d8       	rcall	.-3606   	; 0x9aa <initArrays>
    17c0:	41 e7       	ldi	r20, 0x71	; 113
    17c2:	53 e0       	ldi	r21, 0x03	; 3
    17c4:	61 e0       	ldi	r22, 0x01	; 1
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,2,"AttackTime  :      S"); //string 2 is Envelope gain
    17ca:	ef d8       	rcall	.-3618   	; 0x9aa <initArrays>
    17cc:	4d e7       	ldi	r20, 0x7D	; 125
    17ce:	53 e0       	ldi	r21, 0x03	; 3
    17d0:	62 e0       	ldi	r22, 0x02	; 2
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	c6 01       	movw	r24, r12
    17d6:	e9 d8       	rcall	.-3630   	; 0x9aa <initArrays>
initArrays(initTheScreen->knobScreen,3,"ReleaseTimexx:xx xxx"); //string 3 is Envelop Time
    17d8:	42 e9       	ldi	r20, 0x92	; 146
    17da:	53 e0       	ldi	r21, 0x03	; 3
    17dc:	63 e0       	ldi	r22, 0x03	; 3
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	c6 01       	movw	r24, r12
    17e2:	e3 d8       	rcall	.-3642   	; 0x9aa <initArrays>
initArrays(initTheScreen->knobScreen,4,"TrackVolume xx:xxxdb"); //string 4 is track Level.
    17e4:	47 ea       	ldi	r20, 0xA7	; 167
    17e6:	53 e0       	ldi	r21, 0x03	; 3
    17e8:	64 e0       	ldi	r22, 0x04	; 4
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	c6 01       	movw	r24, r12
    17ee:	dd d8       	rcall	.-3654   	; 0x9aa <initArrays>
    17f0:	cc 52       	subi	r28, 0x2C	; 44
//initArrays(initTheScreen->knobScreen,5,"BPM: ");
//we might want to put in one of these for BPM, but I'm not sure. 

numPrinter(initTheScreen->screen0[2],5,3, currentPattern.patternBPM);
    17f2:	df 4f       	sbci	r29, 0xFF	; 255
    17f4:	28 81       	ld	r18, Y
    17f6:	39 81       	ldd	r19, Y+1	; 0x01
    17f8:	c4 5d       	subi	r28, 0xD4	; 212
    17fa:	d0 40       	sbci	r29, 0x00	; 0
    17fc:	43 e0       	ldi	r20, 0x03	; 3
    17fe:	65 e0       	ldi	r22, 0x05	; 5
    1800:	c8 01       	movw	r24, r16
    1802:	8a 96       	adiw	r24, 0x2a	; 42
    1804:	ab d7       	rcall	.+3926   	; 0x275c <numPrinter>
    1806:	c9 56       	subi	r28, 0x69	; 105
numPrinter(initTheScreen->screen3[1],14,2, (currentGlobals.midiChannel)+1);
    1808:	de 4f       	sbci	r29, 0xFE	; 254
    180a:	28 81       	ld	r18, Y
    180c:	c7 59       	subi	r28, 0x97	; 151
    180e:	d1 40       	sbci	r29, 0x01	; 1
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	2f 5f       	subi	r18, 0xFF	; 255
    1814:	3f 4f       	sbci	r19, 0xFF	; 255
    1816:	42 e0       	ldi	r20, 0x02	; 2
    1818:	6e e0       	ldi	r22, 0x0E	; 14
    181a:	c8 01       	movw	r24, r16
    181c:	84 5b       	subi	r24, 0xB4	; 180
    181e:	9d 4f       	sbci	r25, 0xFD	; 253
    1820:	9d d7       	rcall	.+3898   	; 0x275c <numPrinter>
    1822:	f1 2c       	mov	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    1824:	8f ef       	ldi	r24, 0xFF	; 255
    1826:	e8 1a       	sub	r14, r24
    1828:	f8 0a       	sbc	r15, r24
    182a:	97 01       	movw	r18, r14
    182c:	43 e0       	ldi	r20, 0x03	; 3
    182e:	69 e0       	ldi	r22, 0x09	; 9
    1830:	c8 01       	movw	r24, r16
    1832:	45 96       	adiw	r24, 0x15	; 21
    1834:	93 d7       	rcall	.+3878   	; 0x275c <numPrinter>
    1836:	97 01       	movw	r18, r14
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    1838:	43 e0       	ldi	r20, 0x03	; 3
    183a:	69 e0       	ldi	r22, 0x09	; 9
    183c:	c8 01       	movw	r24, r16
    183e:	8e 52       	subi	r24, 0x2E	; 46
    1840:	9f 4f       	sbci	r25, 0xFF	; 255
    1842:	8c d7       	rcall	.+3864   	; 0x275c <numPrinter>
    1844:	ca 52       	subi	r28, 0x2A	; 42
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
    1846:	df 4f       	sbci	r29, 0xFF	; 255
    1848:	28 81       	ld	r18, Y
    184a:	c6 5d       	subi	r28, 0xD6	; 214
    184c:	d0 40       	sbci	r29, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	42 e0       	ldi	r20, 0x02	; 2
    1852:	67 e0       	ldi	r22, 0x07	; 7
    1854:	c8 01       	movw	r24, r16
    1856:	89 51       	subi	r24, 0x19	; 25
    1858:	9f 4f       	sbci	r25, 0xFF	; 255
    185a:	80 d7       	rcall	.+3840   	; 0x275c <numPrinter>
    185c:	c1 57       	subi	r28, 0x71	; 113
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
    185e:	de 4f       	sbci	r29, 0xFE	; 254
    1860:	28 81       	ld	r18, Y
    1862:	cf 58       	subi	r28, 0x8F	; 143
    1864:	d1 40       	sbci	r29, 0x01	; 1
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	2f 5f       	subi	r18, 0xFF	; 255
    186a:	3f 4f       	sbci	r19, 0xFF	; 255
    186c:	42 e0       	ldi	r20, 0x02	; 2
    186e:	6d e0       	ldi	r22, 0x0D	; 13
    1870:	c8 01       	movw	r24, r16
    1872:	84 50       	subi	r24, 0x04	; 4
    1874:	9f 4f       	sbci	r25, 0xFF	; 255
    1876:	72 d7       	rcall	.+3812   	; 0x275c <numPrinter>
    1878:	e1 2c       	mov	r14, r1
    187a:	f1 2c       	mov	r15, r1
    187c:	b7 01       	movw	r22, r14
    187e:	c8 01       	movw	r24, r16
 
	for(uint8_t i=0;i<4; i++ )
	{
		outputS(initTheScreen->screen0[i],i);
    1880:	55 d7       	rcall	.+3754   	; 0x272c <outputS>
    1882:	8f ef       	ldi	r24, 0xFF	; 255
    1884:	e8 1a       	sub	r14, r24
    1886:	f8 0a       	sbc	r15, r24
    1888:	0b 5e       	subi	r16, 0xEB	; 235
    188a:	1f 4f       	sbci	r17, 0xFF	; 255
    188c:	84 e0       	ldi	r24, 0x04	; 4
    188e:	e8 16       	cp	r14, r24
    1890:	f1 04       	cpc	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
 
	for(uint8_t i=0;i<4; i++ )
    1892:	a1 f7       	brne	.-24     	; 0x187c <initMenu+0x1e4>
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
	{
		outputS(initTheScreen->screen0[i],i);
	}
}
    189a:	0f 91       	pop	r16
    189c:	ff 90       	pop	r15
    189e:	ef 90       	pop	r14
    18a0:	df 90       	pop	r13
    18a2:	cf 90       	pop	r12
    18a4:	08 95       	ret

000018a6 <reInitMenuOnLoad>:
    18a6:	ef 92       	push	r14
    18a8:	ff 92       	push	r15
    18aa:	0f 93       	push	r16

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(Screen *initTheScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    18ac:	1f 93       	push	r17
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	ec 01       	movw	r28, r24
    18b4:	8b 01       	movw	r16, r22
    18b6:	7a 01       	movw	r14, r20
	numPrinter(initTheScreen->screen0[2],5,3, currentPattern->patternBPM);
    18b8:	fb 01       	movw	r30, r22
    18ba:	e8 53       	subi	r30, 0x38	; 56
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	20 81       	ld	r18, Z
    18c0:	31 81       	ldd	r19, Z+1	; 0x01
    18c2:	43 e0       	ldi	r20, 0x03	; 3
    18c4:	65 e0       	ldi	r22, 0x05	; 5
    18c6:	8a 96       	adiw	r24, 0x2a	; 42
    18c8:	49 d7       	rcall	.+3730   	; 0x275c <numPrinter>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
    18ca:	f8 01       	movw	r30, r16
    18cc:	e6 53       	subi	r30, 0x36	; 54
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	20 81       	ld	r18, Z
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	42 e0       	ldi	r20, 0x02	; 2
    18d6:	67 e0       	ldi	r22, 0x07	; 7
    18d8:	ce 01       	movw	r24, r28
    18da:	89 51       	subi	r24, 0x19	; 25
    18dc:	9f 4f       	sbci	r25, 0xFF	; 255
    18de:	3e d7       	rcall	.+3708   	; 0x275c <numPrinter>
	numPrinter(initTheScreen->screen1[1],9,3,(currentGlobals->currentPatternNumber)+1);
    18e0:	f7 01       	movw	r30, r14
    18e2:	27 81       	ldd	r18, Z+7	; 0x07
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	2f 5f       	subi	r18, 0xFF	; 255
    18e8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ea:	43 e0       	ldi	r20, 0x03	; 3
    18ec:	69 e0       	ldi	r22, 0x09	; 9
    18ee:	ce 01       	movw	r24, r28
    18f0:	8e 52       	subi	r24, 0x2E	; 46
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	33 d7       	rcall	.+3686   	; 0x275c <numPrinter>
	numPrinter(initTheScreen->screen0[1],9,3,(currentGlobals->currentPatternNumber)+1);
    18f6:	f7 01       	movw	r30, r14
    18f8:	27 81       	ldd	r18, Z+7	; 0x07
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	2f 5f       	subi	r18, 0xFF	; 255
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	43 e0       	ldi	r20, 0x03	; 3
    1902:	69 e0       	ldi	r22, 0x09	; 9
    1904:	ce 01       	movw	r24, r28
    1906:	45 96       	adiw	r24, 0x15	; 21
    1908:	29 d7       	rcall	.+3666   	; 0x275c <numPrinter>
}
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	ff 90       	pop	r15
    1914:	ef 90       	pop	r14
    1916:	08 95       	ret

00001918 <updateScreen>:

void updateScreen(Screen *menuScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    1918:	8f 92       	push	r8
    191a:	9f 92       	push	r9
    191c:	af 92       	push	r10
    191e:	bf 92       	push	r11
    1920:	cf 92       	push	r12
    1922:	df 92       	push	r13
    1924:	ef 92       	push	r14
    1926:	ff 92       	push	r15
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	8c 01       	movw	r16, r24
    1932:	7b 01       	movw	r14, r22
    1934:	ea 01       	movw	r28, r20
	
	if((currentGlobals->valueChangeFlag)&(1<<encoderChange))//check if encoder bit is high
    1936:	8e 85       	ldd	r24, Y+14	; 0x0e
    1938:	80 ff       	sbrs	r24, 0
    193a:	da c2       	rjmp	.+1460   	; 0x1ef0 <updateScreen+0x5d8>
	{ 
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<encoderChange));//set encoder bit low, and carry our whatever encoder change has occurred. 
    193c:	1e 86       	std	Y+14, r1	; 0x0e
		//we need to debug this to make sure it's doing what we think it's doing.
		switch(currentGlobals->menuState)
    193e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	8b 33       	cpi	r24, 0x3B	; 59
    1944:	91 05       	cpc	r25, r1
    1946:	08 f0       	brcs	.+2      	; 0x194a <updateScreen+0x32>
    1948:	d0 c2       	rjmp	.+1440   	; 0x1eea <updateScreen+0x5d2>
    194a:	fc 01       	movw	r30, r24
    194c:	88 27       	eor	r24, r24
    194e:	e3 55       	subi	r30, 0x53	; 83
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	8f 4f       	sbci	r24, 0xFF	; 255
    1954:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <__tablejump2__>
		{
			case PreformanceModeInit: //initial state
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    1958:	c8 01       	movw	r24, r16
    195a:	a5 df       	rcall	.-182    	; 0x18a6 <reInitMenuOnLoad>
			outputS(menuScreen->screen0[0], 0);
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	c8 01       	movw	r24, r16
    1962:	e4 d6       	rcall	.+3528   	; 0x272c <outputS>
			outputS(menuScreen->screen0[1], 1);
    1964:	61 e0       	ldi	r22, 0x01	; 1
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	c8 01       	movw	r24, r16
    196a:	45 96       	adiw	r24, 0x15	; 21
    196c:	df d6       	rcall	.+3518   	; 0x272c <outputS>
			outputS(menuScreen->screen0[2], 2);
    196e:	62 e0       	ldi	r22, 0x02	; 2
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	c8 01       	movw	r24, r16
    1974:	8a 96       	adiw	r24, 0x2a	; 42
    1976:	da d6       	rcall	.+3508   	; 0x272c <outputS>
			outputS(menuScreen->screen0[3], 3);
    1978:	63 e0       	ldi	r22, 0x03	; 3
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	c8 01       	movw	r24, r16
    197e:	cf 96       	adiw	r24, 0x3f	; 63
    1980:	d5 d6       	rcall	.+3498   	; 0x272c <outputS>
			break;
    1982:	b3 c2       	rjmp	.+1382   	; 0x1eea <updateScreen+0x5d2>

			case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0);
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	c8 01       	movw	r24, r16
    198a:	83 54       	subi	r24, 0x43	; 67
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	ce d6       	rcall	.+3484   	; 0x272c <outputS>
			outputS(menuScreen->screen1[1], 1);
    1990:	61 e0       	ldi	r22, 0x01	; 1
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	c8 01       	movw	r24, r16
    1996:	8e 52       	subi	r24, 0x2E	; 46
    1998:	9f 4f       	sbci	r25, 0xFF	; 255
    199a:	c8 d6       	rcall	.+3472   	; 0x272c <outputS>
			outputS(menuScreen->screen1[2], 2);
    199c:	62 e0       	ldi	r22, 0x02	; 2
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	c8 01       	movw	r24, r16
    19a2:	89 51       	subi	r24, 0x19	; 25
    19a4:	9f 4f       	sbci	r25, 0xFF	; 255
    19a6:	c2 d6       	rcall	.+3460   	; 0x272c <outputS>
			outputS(menuScreen->screen1[3], 3);
    19a8:	63 e0       	ldi	r22, 0x03	; 3
    19aa:	70 e0       	ldi	r23, 0x00	; 0
    19ac:	c8 01       	movw	r24, r16
    19ae:	84 50       	subi	r24, 0x04	; 4
    19b0:	9f 4f       	sbci	r25, 0xFF	; 255
    19b2:	bc d6       	rcall	.+3448   	; 0x272c <outputS>
    19b4:	81 e1       	ldi	r24, 0x11	; 17
			currentGlobals->menuState = SequencerMenuArrow1; 
    19b6:	8a 87       	std	Y+10, r24	; 0x0a
    19b8:	88 e0       	ldi	r24, 0x08	; 8
			
			
			case SequencerMenuArrow1:
			menuScreen->screen1[1][19]= 8;
    19ba:	f8 01       	movw	r30, r16
    19bc:	eb 51       	subi	r30, 0x1B	; 27
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	80 83       	st	Z, r24
    19c2:	80 e2       	ldi	r24, 0x20	; 32
			menuScreen->screen1[2][19] = ' ';
    19c4:	75 96       	adiw	r30, 0x15	; 21
    19c6:	80 83       	st	Z, r24
			menuScreen->screen1[3][19] = ' ';
    19c8:	75 96       	adiw	r30, 0x15	; 21
    19ca:	80 83       	st	Z, r24
			outputS(menuScreen->screen1[1], 1);
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	c8 01       	movw	r24, r16
    19d2:	8e 52       	subi	r24, 0x2E	; 46
    19d4:	9f 4f       	sbci	r25, 0xFF	; 255
    19d6:	aa d6       	rcall	.+3412   	; 0x272c <outputS>
			outputS(menuScreen->screen1[2], 2);
    19d8:	62 e0       	ldi	r22, 0x02	; 2
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	c8 01       	movw	r24, r16
    19de:	89 51       	subi	r24, 0x19	; 25
    19e0:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    19e2:	a4 d6       	rcall	.+3400   	; 0x272c <outputS>
    19e4:	63 e0       	ldi	r22, 0x03	; 3
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	c8 01       	movw	r24, r16
    19ea:	84 50       	subi	r24, 0x04	; 4
    19ec:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    19ee:	9e d6       	rcall	.+3388   	; 0x272c <outputS>
			
			case SequencerMenuArrow1Select:
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    19f0:	7c c2       	rjmp	.+1272   	; 0x1eea <updateScreen+0x5d2>
    19f2:	c8 01       	movw	r24, r16
    19f4:	58 df       	rcall	.-336    	; 0x18a6 <reInitMenuOnLoad>
			outputS(menuScreen->screen1[1],1);
    19f6:	61 e0       	ldi	r22, 0x01	; 1
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	c8 01       	movw	r24, r16
    19fc:	8e 52       	subi	r24, 0x2E	; 46
    19fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1a00:	95 d6       	rcall	.+3370   	; 0x272c <outputS>
    1a02:	73 c2       	rjmp	.+1254   	; 0x1eea <updateScreen+0x5d2>
			break;
    1a04:	80 e2       	ldi	r24, 0x20	; 32
	
	
			case SequencerMenuArrow2:
			menuScreen->screen1[1][19]= ' ';
    1a06:	f8 01       	movw	r30, r16
    1a08:	eb 51       	subi	r30, 0x1B	; 27
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	80 83       	st	Z, r24
			menuScreen->screen1[2][19] = 8;
    1a0e:	98 e0       	ldi	r25, 0x08	; 8
    1a10:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = ' ';
    1a12:	90 83       	st	Z, r25
    1a14:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen1[1], 1);
    1a16:	80 83       	st	Z, r24
    1a18:	61 e0       	ldi	r22, 0x01	; 1
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	c8 01       	movw	r24, r16
    1a1e:	8e 52       	subi	r24, 0x2E	; 46
    1a20:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    1a22:	84 d6       	rcall	.+3336   	; 0x272c <outputS>
    1a24:	62 e0       	ldi	r22, 0x02	; 2
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	c8 01       	movw	r24, r16
    1a2a:	89 51       	subi	r24, 0x19	; 25
    1a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2e:	7e d6       	rcall	.+3324   	; 0x272c <outputS>
			outputS(menuScreen->screen1[3], 3);
    1a30:	63 e0       	ldi	r22, 0x03	; 3
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	c8 01       	movw	r24, r16
    1a36:	84 50       	subi	r24, 0x04	; 4
    1a38:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3a:	78 d6       	rcall	.+3312   	; 0x272c <outputS>
			break;
	
			case SequencerMenuArrow2Select:
			numPrinter(menuScreen->screen1[2],7,2,currentPattern->numSteps);
    1a3c:	56 c2       	rjmp	.+1196   	; 0x1eea <updateScreen+0x5d2>
    1a3e:	fb 01       	movw	r30, r22
    1a40:	e6 53       	subi	r30, 0x36	; 54
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	20 81       	ld	r18, Z
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	42 e0       	ldi	r20, 0x02	; 2
    1a4a:	67 e0       	ldi	r22, 0x07	; 7
    1a4c:	68 01       	movw	r12, r16
    1a4e:	87 ee       	ldi	r24, 0xE7	; 231
    1a50:	c8 0e       	add	r12, r24
    1a52:	d1 1c       	adc	r13, r1
    1a54:	c6 01       	movw	r24, r12
    1a56:	82 d6       	rcall	.+3332   	; 0x275c <numPrinter>
			outputS(menuScreen->screen1[2],2);
    1a58:	62 e0       	ldi	r22, 0x02	; 2
    1a5a:	70 e0       	ldi	r23, 0x00	; 0
    1a5c:	c6 01       	movw	r24, r12
    1a5e:	66 d6       	rcall	.+3276   	; 0x272c <outputS>
			break;
    1a60:	44 c2       	rjmp	.+1160   	; 0x1eea <updateScreen+0x5d2>
	
			case SequencerMenuArrow3:
			menuScreen->screen1[1][19]= ' ';
    1a62:	80 e2       	ldi	r24, 0x20	; 32
    1a64:	f8 01       	movw	r30, r16
    1a66:	eb 51       	subi	r30, 0x1B	; 27
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
			menuScreen->screen1[2][19] = ' ';
    1a6a:	80 83       	st	Z, r24
    1a6c:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = 8;
    1a6e:	80 83       	st	Z, r24
    1a70:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen1[1], 1);
    1a72:	75 96       	adiw	r30, 0x15	; 21
    1a74:	80 83       	st	Z, r24
    1a76:	61 e0       	ldi	r22, 0x01	; 1
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	c8 01       	movw	r24, r16
    1a7c:	8e 52       	subi	r24, 0x2E	; 46
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    1a80:	55 d6       	rcall	.+3242   	; 0x272c <outputS>
    1a82:	62 e0       	ldi	r22, 0x02	; 2
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	c8 01       	movw	r24, r16
    1a88:	89 51       	subi	r24, 0x19	; 25
    1a8a:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    1a8c:	4f d6       	rcall	.+3230   	; 0x272c <outputS>
    1a8e:	63 e0       	ldi	r22, 0x03	; 3
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	c8 01       	movw	r24, r16
    1a94:	84 50       	subi	r24, 0x04	; 4
    1a96:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    1a98:	49 d6       	rcall	.+3218   	; 0x272c <outputS>
		
			case SequencerMenuArrow3Select:
			numPrinter(menuScreen->screen1[3],14,2,(currentGlobals->currentStep)+1); //these are 0 indexed, so we need to add 1 to the display.
    1a9a:	27 c2       	rjmp	.+1102   	; 0x1eea <updateScreen+0x5d2>
    1a9c:	28 85       	ldd	r18, Y+8	; 0x08
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	2f 5f       	subi	r18, 0xFF	; 255
    1aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa4:	42 e0       	ldi	r20, 0x02	; 2
    1aa6:	6e e0       	ldi	r22, 0x0E	; 14
    1aa8:	68 01       	movw	r12, r16
    1aaa:	9c ef       	ldi	r25, 0xFC	; 252
    1aac:	c9 0e       	add	r12, r25
    1aae:	d1 1c       	adc	r13, r1
			outputS(menuScreen->screen1[3],3);
    1ab0:	c6 01       	movw	r24, r12
    1ab2:	54 d6       	rcall	.+3240   	; 0x275c <numPrinter>
    1ab4:	63 e0       	ldi	r22, 0x03	; 3
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	c6 01       	movw	r24, r12
			break;
	

			case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0);
    1aba:	38 d6       	rcall	.+3184   	; 0x272c <outputS>
    1abc:	16 c2       	rjmp	.+1068   	; 0x1eea <updateScreen+0x5d2>
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	c8 01       	movw	r24, r16
    1ac4:	86 58       	subi	r24, 0x86	; 134
    1ac6:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[1], 1);
    1ac8:	31 d6       	rcall	.+3170   	; 0x272c <outputS>
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	c8 01       	movw	r24, r16
    1ad0:	81 57       	subi	r24, 0x71	; 113
    1ad2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ad4:	2b d6       	rcall	.+3158   	; 0x272c <outputS>
			outputS(menuScreen->screen2[2], 2);
    1ad6:	62 e0       	ldi	r22, 0x02	; 2
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	c8 01       	movw	r24, r16
    1adc:	8c 55       	subi	r24, 0x5C	; 92
    1ade:	9e 4f       	sbci	r25, 0xFE	; 254
    1ae0:	25 d6       	rcall	.+3146   	; 0x272c <outputS>
			outputS(menuScreen->screen2[3], 3);
    1ae2:	63 e0       	ldi	r22, 0x03	; 3
    1ae4:	70 e0       	ldi	r23, 0x00	; 0
    1ae6:	c8 01       	movw	r24, r16
    1ae8:	87 54       	subi	r24, 0x47	; 71
    1aea:	9e 4f       	sbci	r25, 0xFE	; 254
    1aec:	1f d6       	rcall	.+3134   	; 0x272c <outputS>
			currentGlobals->menuState = TrackMenuArrow1;
    1aee:	81 e2       	ldi	r24, 0x21	; 33
		
			case TrackMenuArrow1:
			menuScreen->screen2[1][19]= 8;
    1af0:	8a 87       	std	Y+10, r24	; 0x0a
    1af2:	88 e0       	ldi	r24, 0x08	; 8
    1af4:	f8 01       	movw	r30, r16
    1af6:	ee 55       	subi	r30, 0x5E	; 94
    1af8:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    1afa:	80 83       	st	Z, r24
    1afc:	80 e2       	ldi	r24, 0x20	; 32
    1afe:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    1b00:	80 83       	st	Z, r24
    1b02:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    1b04:	80 83       	st	Z, r24
    1b06:	61 e0       	ldi	r22, 0x01	; 1
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	c8 01       	movw	r24, r16
    1b0c:	81 57       	subi	r24, 0x71	; 113
    1b0e:	9e 4f       	sbci	r25, 0xFE	; 254
    1b10:	0d d6       	rcall	.+3098   	; 0x272c <outputS>
			outputS(menuScreen->screen2[2], 2);
    1b12:	62 e0       	ldi	r22, 0x02	; 2
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	c8 01       	movw	r24, r16
    1b18:	8c 55       	subi	r24, 0x5C	; 92
    1b1a:	9e 4f       	sbci	r25, 0xFE	; 254
    1b1c:	07 d6       	rcall	.+3086   	; 0x272c <outputS>
			outputS(menuScreen->screen2[3], 3);
    1b1e:	63 e0       	ldi	r22, 0x03	; 3
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	c8 01       	movw	r24, r16
    1b24:	87 54       	subi	r24, 0x47	; 71
    1b26:	9e 4f       	sbci	r25, 0xFE	; 254
    1b28:	01 d6       	rcall	.+3074   	; 0x272c <outputS>
			break;
    1b2a:	df c1       	rjmp	.+958    	; 0x1eea <updateScreen+0x5d2>
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1b2c:	89 85       	ldd	r24, Y+9	; 0x09
    1b2e:	db 01       	movw	r26, r22
    1b30:	a8 0f       	add	r26, r24
    1b32:	b1 1d       	adc	r27, r1
    1b34:	fd 01       	movw	r30, r26
    1b36:	e8 56       	subi	r30, 0x68	; 104
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    1b3a:	20 81       	ld	r18, Z
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	32 2f       	mov	r19, r18
    1b40:	22 27       	eor	r18, r18
			outputS(menuScreen->screen2[2], 2);
			outputS(menuScreen->screen2[3], 3);
			break;
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1b42:	70 96       	adiw	r30, 0x10	; 16
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    1b44:	80 81       	ld	r24, Z
    1b46:	28 2b       	or	r18, r24
    1b48:	44 e0       	ldi	r20, 0x04	; 4
    1b4a:	6a e0       	ldi	r22, 0x0A	; 10
    1b4c:	68 01       	movw	r12, r16
    1b4e:	b1 e7       	ldi	r27, 0x71	; 113
    1b50:	cb 1a       	sub	r12, r27
    1b52:	be ef       	ldi	r27, 0xFE	; 254
    1b54:	db 0a       	sbc	r13, r27
    1b56:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen2[1],1);
    1b58:	01 d6       	rcall	.+3074   	; 0x275c <numPrinter>
    1b5a:	61 e0       	ldi	r22, 0x01	; 1
    1b5c:	70 e0       	ldi	r23, 0x00	; 0
    1b5e:	c6 01       	movw	r24, r12
			break;
    1b60:	e5 d5       	rcall	.+3018   	; 0x272c <outputS>
	
			case TrackMenuArrow2:
			menuScreen->screen2[1][19]= ' ';
    1b62:	c3 c1       	rjmp	.+902    	; 0x1eea <updateScreen+0x5d2>
    1b64:	80 e2       	ldi	r24, 0x20	; 32
    1b66:	f8 01       	movw	r30, r16
    1b68:	ee 55       	subi	r30, 0x5E	; 94
    1b6a:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = 8;
    1b6c:	80 83       	st	Z, r24
    1b6e:	98 e0       	ldi	r25, 0x08	; 8
    1b70:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    1b72:	90 83       	st	Z, r25
    1b74:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    1b76:	80 83       	st	Z, r24
    1b78:	61 e0       	ldi	r22, 0x01	; 1
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	c8 01       	movw	r24, r16
    1b7e:	81 57       	subi	r24, 0x71	; 113
    1b80:	9e 4f       	sbci	r25, 0xFE	; 254
    1b82:	d4 d5       	rcall	.+2984   	; 0x272c <outputS>
			outputS(menuScreen->screen2[2], 2);
    1b84:	62 e0       	ldi	r22, 0x02	; 2
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	c8 01       	movw	r24, r16
    1b8a:	8c 55       	subi	r24, 0x5C	; 92
    1b8c:	9e 4f       	sbci	r25, 0xFE	; 254
    1b8e:	ce d5       	rcall	.+2972   	; 0x272c <outputS>
    1b90:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[3], 3);
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	c8 01       	movw	r24, r16
    1b96:	87 54       	subi	r24, 0x47	; 71
    1b98:	9e 4f       	sbci	r25, 0xFE	; 254
    1b9a:	c8 d5       	rcall	.+2960   	; 0x272c <outputS>
    1b9c:	a6 c1       	rjmp	.+844    	; 0x1eea <updateScreen+0x5d2>
    1b9e:	89 85       	ldd	r24, Y+9	; 0x09
			break;
    1ba0:	fb 01       	movw	r30, r22
		
			case TrackMenuArrow2Select:
			//we need some serious button code in these two cases. 
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1ba2:	e8 0f       	add	r30, r24
    1ba4:	f1 1d       	adc	r31, r1
    1ba6:	e8 57       	subi	r30, 0x78	; 120
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	80 81       	ld	r24, Z
    1bac:	88 23       	and	r24, r24
    1bae:	19 f0       	breq	.+6      	; 0x1bb6 <updateScreen+0x29e>
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	79 f0       	breq	.+30     	; 0x1bd2 <updateScreen+0x2ba>
    1bb4:	1c c0       	rjmp	.+56     	; 0x1bee <updateScreen+0x2d6>
    1bb6:	83 e5       	ldi	r24, 0x53	; 83
			{
				case 0:
				menuScreen->screen2[2][10] = 'S';
    1bb8:	f8 01       	movw	r30, r16
    1bba:	e2 55       	subi	r30, 0x52	; 82
    1bbc:	fe 4f       	sbci	r31, 0xFE	; 254
    1bbe:	80 83       	st	Z, r24
    1bc0:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[2][11] = 'o';
    1bc2:	31 96       	adiw	r30, 0x01	; 1
    1bc4:	80 83       	st	Z, r24
    1bc6:	9c e6       	ldi	r25, 0x6C	; 108
				menuScreen->screen2[2][12] = 'l';
    1bc8:	31 96       	adiw	r30, 0x01	; 1
    1bca:	90 83       	st	Z, r25
    1bcc:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'o';
    1bce:	80 83       	st	Z, r24
    1bd0:	0e c0       	rjmp	.+28     	; 0x1bee <updateScreen+0x2d6>
				break;
    1bd2:	80 e5       	ldi	r24, 0x50	; 80

				case 1:
				menuScreen->screen2[2][10] = 'P';
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	e2 55       	subi	r30, 0x52	; 82
    1bd8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bda:	80 83       	st	Z, r24
				menuScreen->screen2[2][11] = 'o';
    1bdc:	8f e6       	ldi	r24, 0x6F	; 111
    1bde:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][12] = 'l';
    1be0:	80 83       	st	Z, r24
    1be2:	8c e6       	ldi	r24, 0x6C	; 108
    1be4:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'y';
    1be6:	80 83       	st	Z, r24
    1be8:	89 e7       	ldi	r24, 0x79	; 121
	
				case 3:
				break;
			}
			
			outputS(menuScreen->screen2[2], 2);
    1bea:	31 96       	adiw	r30, 0x01	; 1
    1bec:	80 83       	st	Z, r24
    1bee:	62 e0       	ldi	r22, 0x02	; 2
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	c8 01       	movw	r24, r16
    1bf4:	8c 55       	subi	r24, 0x5C	; 92
    1bf6:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1bf8:	99 d5       	rcall	.+2866   	; 0x272c <outputS>

			case TrackMenuArrow3:
			menuScreen->screen2[1][19]= ' ';
    1bfa:	77 c1       	rjmp	.+750    	; 0x1eea <updateScreen+0x5d2>
    1bfc:	80 e2       	ldi	r24, 0x20	; 32
    1bfe:	f8 01       	movw	r30, r16
    1c00:	ee 55       	subi	r30, 0x5E	; 94
    1c02:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    1c04:	80 83       	st	Z, r24
    1c06:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = 8;
    1c08:	80 83       	st	Z, r24
    1c0a:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[1], 1);
    1c0c:	75 96       	adiw	r30, 0x15	; 21
    1c0e:	80 83       	st	Z, r24
    1c10:	61 e0       	ldi	r22, 0x01	; 1
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	c8 01       	movw	r24, r16
    1c16:	81 57       	subi	r24, 0x71	; 113
			outputS(menuScreen->screen2[2], 2);
    1c18:	9e 4f       	sbci	r25, 0xFE	; 254
    1c1a:	88 d5       	rcall	.+2832   	; 0x272c <outputS>
    1c1c:	62 e0       	ldi	r22, 0x02	; 2
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	c8 01       	movw	r24, r16
    1c22:	8c 55       	subi	r24, 0x5C	; 92
    1c24:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[3], 3);
    1c26:	82 d5       	rcall	.+2820   	; 0x272c <outputS>
    1c28:	63 e0       	ldi	r22, 0x03	; 3
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	c8 01       	movw	r24, r16
    1c2e:	87 54       	subi	r24, 0x47	; 71
    1c30:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1c32:	7c d5       	rcall	.+2808   	; 0x272c <outputS>
		
			case TrackMenuArrow3Select:
			numPrinter(menuScreen->screen2[3],10,2,(currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1);
    1c34:	5a c1       	rjmp	.+692    	; 0x1eea <updateScreen+0x5d2>
    1c36:	89 85       	ldd	r24, Y+9	; 0x09
    1c38:	fb 01       	movw	r30, r22
    1c3a:	e8 0f       	add	r30, r24
    1c3c:	f1 1d       	adc	r31, r1
    1c3e:	20 8d       	ldd	r18, Z+24	; 0x18
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	2f 5f       	subi	r18, 0xFF	; 255
    1c44:	3f 4f       	sbci	r19, 0xFF	; 255
    1c46:	42 e0       	ldi	r20, 0x02	; 2
    1c48:	6a e0       	ldi	r22, 0x0A	; 10
    1c4a:	68 01       	movw	r12, r16
    1c4c:	e7 e4       	ldi	r30, 0x47	; 71
    1c4e:	ce 1a       	sub	r12, r30
    1c50:	ee ef       	ldi	r30, 0xFE	; 254
    1c52:	de 0a       	sbc	r13, r30
			outputS(menuScreen->screen2[3],3);
    1c54:	c6 01       	movw	r24, r12
    1c56:	82 d5       	rcall	.+2820   	; 0x275c <numPrinter>
    1c58:	63 e0       	ldi	r22, 0x03	; 3
    1c5a:	70 e0       	ldi	r23, 0x00	; 0
    1c5c:	c6 01       	movw	r24, r12
			break;
    1c5e:	66 d5       	rcall	.+2764   	; 0x272c <outputS>
			
			case TrackMenuArrow4:
			menuScreen->screen2[2][19]= ' ';
    1c60:	44 c1       	rjmp	.+648    	; 0x1eea <updateScreen+0x5d2>
    1c62:	80 e2       	ldi	r24, 0x20	; 32
    1c64:	f8 01       	movw	r30, r16
    1c66:	e9 54       	subi	r30, 0x49	; 73
    1c68:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[3][19] = ' ';
    1c6a:	80 83       	st	Z, r24
    1c6c:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[4][19] = 8;
    1c6e:	80 83       	st	Z, r24
    1c70:	88 e0       	ldi	r24, 0x08	; 8
    1c72:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[2], 1);
    1c74:	80 83       	st	Z, r24
    1c76:	61 e0       	ldi	r22, 0x01	; 1
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	c8 01       	movw	r24, r16
    1c7c:	8c 55       	subi	r24, 0x5C	; 92
    1c7e:	9e 4f       	sbci	r25, 0xFE	; 254
    1c80:	55 d5       	rcall	.+2730   	; 0x272c <outputS>
			outputS(menuScreen->screen2[3], 2);
    1c82:	62 e0       	ldi	r22, 0x02	; 2
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	c8 01       	movw	r24, r16
    1c88:	87 54       	subi	r24, 0x47	; 71
    1c8a:	9e 4f       	sbci	r25, 0xFE	; 254
    1c8c:	4f d5       	rcall	.+2718   	; 0x272c <outputS>
    1c8e:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[4], 3);
    1c90:	70 e0       	ldi	r23, 0x00	; 0
    1c92:	c8 01       	movw	r24, r16
    1c94:	82 53       	subi	r24, 0x32	; 50
    1c96:	9e 4f       	sbci	r25, 0xFE	; 254
    1c98:	49 d5       	rcall	.+2706   	; 0x272c <outputS>
    1c9a:	27 c1       	rjmp	.+590    	; 0x1eea <updateScreen+0x5d2>
    1c9c:	89 85       	ldd	r24, Y+9	; 0x09
			break;
    1c9e:	fb 01       	movw	r30, r22
			
			case TrackMenuArrow4Select:
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1ca0:	e8 0f       	add	r30, r24
    1ca2:	f1 1d       	adc	r31, r1
    1ca4:	e5 51       	subi	r30, 0x15	; 21
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 81       	ld	r24, Z
    1caa:	81 30       	cpi	r24, 0x01	; 1
    1cac:	a9 f0       	breq	.+42     	; 0x1cd8 <updateScreen+0x3c0>
    1cae:	28 f0       	brcs	.+10     	; 0x1cba <updateScreen+0x3a2>
    1cb0:	82 30       	cpi	r24, 0x02	; 2
    1cb2:	f9 f0       	breq	.+62     	; 0x1cf2 <updateScreen+0x3da>
    1cb4:	83 30       	cpi	r24, 0x03	; 3
    1cb6:	51 f1       	breq	.+84     	; 0x1d0c <updateScreen+0x3f4>
    1cb8:	37 c0       	rjmp	.+110    	; 0x1d28 <updateScreen+0x410>
    1cba:	81 e4       	ldi	r24, 0x41	; 65
    1cbc:	f8 01       	movw	r30, r16
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1cbe:	e4 52       	subi	r30, 0x24	; 36
    1cc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc2:	80 83       	st	Z, r24
    1cc4:	8d e2       	ldi	r24, 0x2D	; 45
    1cc6:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1cc8:	80 83       	st	Z, r24
    1cca:	82 e5       	ldi	r24, 0x52	; 82
    1ccc:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1cce:	80 83       	st	Z, r24
    1cd0:	80 e2       	ldi	r24, 0x20	; 32
    1cd2:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1cd4:	80 83       	st	Z, r24
    1cd6:	28 c0       	rjmp	.+80     	; 0x1d28 <updateScreen+0x410>
    1cd8:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1cda:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1cdc:	e4 52       	subi	r30, 0x24	; 36
    1cde:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce0:	80 83       	st	Z, r24
    1ce2:	80 e2       	ldi	r24, 0x20	; 32
				menuScreen->screen2[4][15] = ' ';
    1ce4:	31 96       	adiw	r30, 0x01	; 1
    1ce6:	80 83       	st	Z, r24
    1ce8:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = ' ';
    1cea:	80 83       	st	Z, r24
    1cec:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1cee:	80 83       	st	Z, r24
    1cf0:	1b c0       	rjmp	.+54     	; 0x1d28 <updateScreen+0x410>
				break;
    1cf2:	81 e4       	ldi	r24, 0x41	; 65
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1cf4:	f8 01       	movw	r30, r16
    1cf6:	e4 52       	subi	r30, 0x24	; 36
    1cf8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cfa:	80 83       	st	Z, r24
				menuScreen->screen2[4][15] = ' ';
    1cfc:	80 e2       	ldi	r24, 0x20	; 32
    1cfe:	31 96       	adiw	r30, 0x01	; 1
    1d00:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1d02:	31 96       	adiw	r30, 0x01	; 1
    1d04:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1d06:	31 96       	adiw	r30, 0x01	; 1
				break;
    1d08:	80 83       	st	Z, r24
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1d0a:	0e c0       	rjmp	.+28     	; 0x1d28 <updateScreen+0x410>
    1d0c:	8e e4       	ldi	r24, 0x4E	; 78
    1d0e:	f8 01       	movw	r30, r16
    1d10:	e4 52       	subi	r30, 0x24	; 36
				menuScreen->screen2[4][15] = 'o';
    1d12:	fe 4f       	sbci	r31, 0xFE	; 254
    1d14:	80 83       	st	Z, r24
    1d16:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][16] = 'n';
    1d18:	31 96       	adiw	r30, 0x01	; 1
    1d1a:	80 83       	st	Z, r24
    1d1c:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][17] = 'e';
    1d1e:	31 96       	adiw	r30, 0x01	; 1
    1d20:	80 83       	st	Z, r24
    1d22:	85 e6       	ldi	r24, 0x65	; 101
				break;
			}
			outputS(menuScreen->screen2[4],3);
    1d24:	31 96       	adiw	r30, 0x01	; 1
    1d26:	80 83       	st	Z, r24
    1d28:	63 e0       	ldi	r22, 0x03	; 3
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	c8 01       	movw	r24, r16
    1d2e:	82 53       	subi	r24, 0x32	; 50
    1d30:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1d32:	fc d4       	rcall	.+2552   	; 0x272c <outputS>
			
			case TrackMenuArrow5:
			menuScreen->screen2[3][19]= ' ';
    1d34:	da c0       	rjmp	.+436    	; 0x1eea <updateScreen+0x5d2>
    1d36:	80 e2       	ldi	r24, 0x20	; 32
    1d38:	f8 01       	movw	r30, r16
    1d3a:	e4 53       	subi	r30, 0x34	; 52
    1d3c:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[4][19] = ' ';
    1d3e:	80 83       	st	Z, r24
			menuScreen->screen2[5][19] = 8;
    1d40:	75 96       	adiw	r30, 0x15	; 21
    1d42:	80 83       	st	Z, r24
    1d44:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[3], 1);
    1d46:	75 96       	adiw	r30, 0x15	; 21
    1d48:	80 83       	st	Z, r24
    1d4a:	61 e0       	ldi	r22, 0x01	; 1
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	c8 01       	movw	r24, r16
    1d50:	87 54       	subi	r24, 0x47	; 71
    1d52:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[4], 2);
    1d54:	eb d4       	rcall	.+2518   	; 0x272c <outputS>
    1d56:	62 e0       	ldi	r22, 0x02	; 2
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	c8 01       	movw	r24, r16
    1d5c:	82 53       	subi	r24, 0x32	; 50
    1d5e:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[5], 3);
    1d60:	e5 d4       	rcall	.+2506   	; 0x272c <outputS>
    1d62:	63 e0       	ldi	r22, 0x03	; 3
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	c8 01       	movw	r24, r16
    1d68:	8d 51       	subi	r24, 0x1D	; 29
    1d6a:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1d6c:	df d4       	rcall	.+2494   	; 0x272c <outputS>

			case TrackMenuArrow5Select:;
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1d6e:	bd c0       	rjmp	.+378    	; 0x1eea <updateScreen+0x5d2>
    1d70:	89 85       	ldd	r24, Y+9	; 0x09
    1d72:	9b 01       	movw	r18, r22
    1d74:	28 0f       	add	r18, r24
    1d76:	31 1d       	adc	r19, r1
    1d78:	f9 01       	movw	r30, r18
			numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1d7a:	e5 53       	subi	r30, 0x35	; 53
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	20 81       	ld	r18, Z
			outputS(menuScreen->screen2[4], 2);
			outputS(menuScreen->screen2[5], 3);
			break;

			case TrackMenuArrow5Select:;
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1d80:	30 e0       	ldi	r19, 0x00	; 0
			numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1d82:	32 2f       	mov	r19, r18
    1d84:	22 27       	eor	r18, r18
    1d86:	70 96       	adiw	r30, 0x10	; 16
    1d88:	80 81       	ld	r24, Z
    1d8a:	28 2b       	or	r18, r24
    1d8c:	45 e0       	ldi	r20, 0x05	; 5
    1d8e:	6d e0       	ldi	r22, 0x0D	; 13
    1d90:	68 01       	movw	r12, r16
    1d92:	8d e1       	ldi	r24, 0x1D	; 29
    1d94:	c8 1a       	sub	r12, r24
    1d96:	8e ef       	ldi	r24, 0xFE	; 254
			menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
    1d98:	d8 0a       	sbc	r13, r24
    1d9a:	c6 01       	movw	r24, r12
    1d9c:	df d4       	rcall	.+2494   	; 0x275c <numPrinter>
    1d9e:	d8 01       	movw	r26, r16
    1da0:	a0 51       	subi	r26, 0x10	; 16
    1da2:	be 4f       	sbci	r27, 0xFE	; 254
    1da4:	8c 91       	ld	r24, X
    1da6:	f8 01       	movw	r30, r16
			menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
    1da8:	e1 51       	subi	r30, 0x11	; 17
    1daa:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[5][14] = '.';
    1dac:	80 83       	st	Z, r24
    1dae:	32 96       	adiw	r30, 0x02	; 2
			outputS(menuScreen->screen2[5],3);
    1db0:	80 81       	ld	r24, Z
    1db2:	8c 93       	st	X, r24
    1db4:	8e e2       	ldi	r24, 0x2E	; 46
    1db6:	80 83       	st	Z, r24
			break;
    1db8:	63 e0       	ldi	r22, 0x03	; 3

			case GlobalMenuInit:
			outputS(menuScreen->screen3[0], 0);
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	c6 01       	movw	r24, r12
    1dbe:	b6 d4       	rcall	.+2412   	; 0x272c <outputS>
    1dc0:	94 c0       	rjmp	.+296    	; 0x1eea <updateScreen+0x5d2>
    1dc2:	60 e0       	ldi	r22, 0x00	; 0
    1dc4:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[1], 1);
    1dc6:	c8 01       	movw	r24, r16
    1dc8:	89 5c       	subi	r24, 0xC9	; 201
    1dca:	9d 4f       	sbci	r25, 0xFD	; 253
    1dcc:	af d4       	rcall	.+2398   	; 0x272c <outputS>
    1dce:	61 e0       	ldi	r22, 0x01	; 1
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1dd4:	84 5b       	subi	r24, 0xB4	; 180
    1dd6:	9d 4f       	sbci	r25, 0xFD	; 253
    1dd8:	a9 d4       	rcall	.+2386   	; 0x272c <outputS>
    1dda:	62 e0       	ldi	r22, 0x02	; 2
    1ddc:	70 e0       	ldi	r23, 0x00	; 0
    1dde:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1de0:	8f 59       	subi	r24, 0x9F	; 159
    1de2:	9d 4f       	sbci	r25, 0xFD	; 253
    1de4:	a3 d4       	rcall	.+2374   	; 0x272c <outputS>
    1de6:	63 e0       	ldi	r22, 0x03	; 3
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	c8 01       	movw	r24, r16
    1dec:	8a 58       	subi	r24, 0x8A	; 138
			currentGlobals->menuState = GlobalMenuArrow1;
    1dee:	9d 4f       	sbci	r25, 0xFD	; 253
    1df0:	9d d4       	rcall	.+2362   	; 0x272c <outputS>

			case GlobalMenuArrow1:
			menuScreen->screen3[1][19]= 8;
    1df2:	81 e3       	ldi	r24, 0x31	; 49
    1df4:	8a 87       	std	Y+10, r24	; 0x0a
    1df6:	88 e0       	ldi	r24, 0x08	; 8
    1df8:	f8 01       	movw	r30, r16
    1dfa:	e1 5a       	subi	r30, 0xA1	; 161
			menuScreen->screen3[2][19] = ' ';
    1dfc:	fd 4f       	sbci	r31, 0xFD	; 253
    1dfe:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    1e00:	80 e2       	ldi	r24, 0x20	; 32
    1e02:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen3[1], 1);
    1e04:	80 83       	st	Z, r24
    1e06:	75 96       	adiw	r30, 0x15	; 21
    1e08:	80 83       	st	Z, r24
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1e10:	84 5b       	subi	r24, 0xB4	; 180
    1e12:	9d 4f       	sbci	r25, 0xFD	; 253
    1e14:	8b d4       	rcall	.+2326   	; 0x272c <outputS>
    1e16:	62 e0       	ldi	r22, 0x02	; 2
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1e1c:	8f 59       	subi	r24, 0x9F	; 159
    1e1e:	9d 4f       	sbci	r25, 0xFD	; 253
    1e20:	85 d4       	rcall	.+2314   	; 0x272c <outputS>
    1e22:	63 e0       	ldi	r22, 0x03	; 3
    1e24:	70 e0       	ldi	r23, 0x00	; 0
    1e26:	c8 01       	movw	r24, r16
    1e28:	8a 58       	subi	r24, 0x8A	; 138
			break;
    1e2a:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow1Select:
			numPrinter(menuScreen->screen3[1],14,2,(currentGlobals->midiChannel)+1);
    1e2c:	7f d4       	rcall	.+2302   	; 0x272c <outputS>
    1e2e:	5d c0       	rjmp	.+186    	; 0x1eea <updateScreen+0x5d2>
    1e30:	28 89       	ldd	r18, Y+16	; 0x10
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	2f 5f       	subi	r18, 0xFF	; 255
    1e36:	3f 4f       	sbci	r19, 0xFF	; 255
    1e38:	42 e0       	ldi	r20, 0x02	; 2
    1e3a:	6e e0       	ldi	r22, 0x0E	; 14
    1e3c:	68 01       	movw	r12, r16
    1e3e:	94 eb       	ldi	r25, 0xB4	; 180
    1e40:	c9 1a       	sub	r12, r25
    1e42:	9d ef       	ldi	r25, 0xFD	; 253
			outputS(menuScreen->screen3[1],1);
    1e44:	d9 0a       	sbc	r13, r25
    1e46:	c6 01       	movw	r24, r12
    1e48:	89 d4       	rcall	.+2322   	; 0x275c <numPrinter>
    1e4a:	61 e0       	ldi	r22, 0x01	; 1
    1e4c:	70 e0       	ldi	r23, 0x00	; 0
			break;
    1e4e:	c6 01       	movw	r24, r12

			case GlobalMenuArrow2:
			menuScreen->screen3[1][19]= ' ';
    1e50:	6d d4       	rcall	.+2266   	; 0x272c <outputS>
    1e52:	4b c0       	rjmp	.+150    	; 0x1eea <updateScreen+0x5d2>
    1e54:	80 e2       	ldi	r24, 0x20	; 32
    1e56:	f8 01       	movw	r30, r16
			menuScreen->screen3[2][19] = 8;
    1e58:	e1 5a       	subi	r30, 0xA1	; 161
    1e5a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e5c:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    1e5e:	98 e0       	ldi	r25, 0x08	; 8
			outputS(menuScreen->screen3[1], 1);
    1e60:	75 96       	adiw	r30, 0x15	; 21
    1e62:	90 83       	st	Z, r25
    1e64:	75 96       	adiw	r30, 0x15	; 21
    1e66:	80 83       	st	Z, r24
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[2], 2);
    1e6c:	c8 01       	movw	r24, r16
    1e6e:	84 5b       	subi	r24, 0xB4	; 180
    1e70:	9d 4f       	sbci	r25, 0xFD	; 253
    1e72:	5c d4       	rcall	.+2232   	; 0x272c <outputS>
    1e74:	62 e0       	ldi	r22, 0x02	; 2
    1e76:	70 e0       	ldi	r23, 0x00	; 0
    1e78:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1e7a:	8f 59       	subi	r24, 0x9F	; 159
    1e7c:	9d 4f       	sbci	r25, 0xFD	; 253
    1e7e:	56 d4       	rcall	.+2220   	; 0x272c <outputS>
    1e80:	63 e0       	ldi	r22, 0x03	; 3
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	c8 01       	movw	r24, r16
    1e86:	8a 58       	subi	r24, 0x8A	; 138
			break;
    1e88:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow2Select:
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1e8a:	50 d4       	rcall	.+2208   	; 0x272c <outputS>
    1e8c:	2e c0       	rjmp	.+92     	; 0x1eea <updateScreen+0x5d2>
    1e8e:	89 85       	ldd	r24, Y+9	; 0x09
    1e90:	fa 01       	movw	r30, r20
    1e92:	e8 0f       	add	r30, r24
    1e94:	f1 1d       	adc	r31, r1
    1e96:	41 89       	ldd	r20, Z+17	; 0x11
    1e98:	6e e0       	ldi	r22, 0x0E	; 14
    1e9a:	68 01       	movw	r12, r16
    1e9c:	af e9       	ldi	r26, 0x9F	; 159
    1e9e:	ca 1a       	sub	r12, r26
    1ea0:	ad ef       	ldi	r26, 0xFD	; 253
    1ea2:	da 0a       	sbc	r13, r26
    1ea4:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen3[2],2);
    1ea6:	20 d6       	rcall	.+3136   	; 0x2ae8 <midiNotePrinter>
    1ea8:	62 e0       	ldi	r22, 0x02	; 2
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	c6 01       	movw	r24, r12
    1eae:	3e d4       	rcall	.+2172   	; 0x272c <outputS>
			break;
    1eb0:	1c c0       	rjmp	.+56     	; 0x1eea <updateScreen+0x5d2>

			case GlobalMenuArrow3:
			menuScreen->screen3[1][19]= ' ';
    1eb2:	80 e2       	ldi	r24, 0x20	; 32
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	e1 5a       	subi	r30, 0xA1	; 161
    1eb8:	fd 4f       	sbci	r31, 0xFD	; 253
			menuScreen->screen3[2][19] = ' ';
    1eba:	80 83       	st	Z, r24
    1ebc:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen3[3][19] = 8;
    1ebe:	80 83       	st	Z, r24
    1ec0:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen3[1], 1);
    1ec2:	75 96       	adiw	r30, 0x15	; 21
    1ec4:	80 83       	st	Z, r24
    1ec6:	61 e0       	ldi	r22, 0x01	; 1
    1ec8:	70 e0       	ldi	r23, 0x00	; 0
    1eca:	c8 01       	movw	r24, r16
    1ecc:	84 5b       	subi	r24, 0xB4	; 180
    1ece:	9d 4f       	sbci	r25, 0xFD	; 253
			outputS(menuScreen->screen3[2], 2);
    1ed0:	2d d4       	rcall	.+2138   	; 0x272c <outputS>
    1ed2:	62 e0       	ldi	r22, 0x02	; 2
    1ed4:	70 e0       	ldi	r23, 0x00	; 0
    1ed6:	c8 01       	movw	r24, r16
    1ed8:	8f 59       	subi	r24, 0x9F	; 159
    1eda:	9d 4f       	sbci	r25, 0xFD	; 253
    1edc:	27 d4       	rcall	.+2126   	; 0x272c <outputS>
			outputS(menuScreen->screen3[3], 3);
    1ede:	63 e0       	ldi	r22, 0x03	; 3
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
    1ee2:	c8 01       	movw	r24, r16
    1ee4:	8a 58       	subi	r24, 0x8A	; 138
    1ee6:	9d 4f       	sbci	r25, 0xFD	; 253
    1ee8:	21 d4       	rcall	.+2114   	; 0x272c <outputS>
    1eea:	8a 85       	ldd	r24, Y+10	; 0x0a
			break;
		}
		prevMenuState = currentGlobals->menuState;
    1eec:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <prevMenuState>
    1ef0:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
	//We should only reach this in track selection and global settings for setting midi notes. 
	if(currentGlobals->valueChangeFlag&(1<<triggerChange))
    1ef2:	81 ff       	sbrs	r24, 1
    1ef4:	19 c1       	rjmp	.+562    	; 0x2128 <updateScreen+0x810>
    1ef6:	1e 86       	std	Y+14, r1	; 0x0e
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0<<triggerChange); //this is wrong. Will erase all of valueChange Flag. 
    1ef8:	8a 85       	ldd	r24, Y+10	; 0x0a
		switch((currentGlobals->menuState)>>4) //we don't need to worry about what the bottom encoder is doing.  
    1efa:	82 95       	swap	r24
    1efc:	8f 70       	andi	r24, 0x0F	; 15
    1efe:	82 30       	cpi	r24, 0x02	; 2
    1f00:	21 f0       	breq	.+8      	; 0x1f0a <updateScreen+0x5f2>
    1f02:	83 30       	cpi	r24, 0x03	; 3
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <updateScreen+0x5f0>
    1f06:	f7 c0       	rjmp	.+494    	; 0x20f6 <updateScreen+0x7de>
    1f08:	0f c1       	rjmp	.+542    	; 0x2128 <updateScreen+0x810>
    1f0a:	29 85       	ldd	r18, Y+9	; 0x09
		{
			case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	c7 01       	movw	r24, r14
    1f10:	82 0f       	add	r24, r18
    1f12:	93 1f       	adc	r25, r19
    1f14:	fc 01       	movw	r30, r24
    1f16:	e8 56       	subi	r30, 0x68	; 104
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	c0 80       	ld	r12, Z
    1f1c:	d1 2c       	mov	r13, r1
    1f1e:	dc 2c       	mov	r13, r12
    1f20:	cc 24       	eor	r12, r12
    1f22:	70 96       	adiw	r30, 0x10	; 16
    1f24:	80 81       	ld	r24, Z
    1f26:	c8 2a       	or	r12, r24
    1f28:	2f 5f       	subi	r18, 0xFF	; 255
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack)+1);
    1f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2c:	42 e0       	ldi	r20, 0x02	; 2
    1f2e:	67 e0       	ldi	r22, 0x07	; 7
    1f30:	58 01       	movw	r10, r16
    1f32:	b1 e7       	ldi	r27, 0x71	; 113
    1f34:	ab 1a       	sub	r10, r27
    1f36:	be ef       	ldi	r27, 0xFE	; 254
    1f38:	bb 0a       	sbc	r11, r27
    1f3a:	c5 01       	movw	r24, r10
    1f3c:	0f d4       	rcall	.+2078   	; 0x275c <numPrinter>
    1f3e:	96 01       	movw	r18, r12
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
    1f40:	44 e0       	ldi	r20, 0x04	; 4
    1f42:	6a e0       	ldi	r22, 0x0A	; 10
    1f44:	c5 01       	movw	r24, r10
    1f46:	0a d4       	rcall	.+2068   	; 0x275c <numPrinter>
    1f48:	89 85       	ldd	r24, Y+9	; 0x09
    1f4a:	f7 01       	movw	r30, r14
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
					switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1f4c:	e8 0f       	add	r30, r24
    1f4e:	f1 1d       	adc	r31, r1
    1f50:	e8 57       	subi	r30, 0x78	; 120
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 81       	ld	r24, Z
    1f56:	88 23       	and	r24, r24
    1f58:	19 f0       	breq	.+6      	; 0x1f60 <updateScreen+0x648>
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	79 f0       	breq	.+30     	; 0x1f7c <updateScreen+0x664>
    1f5e:	1c c0       	rjmp	.+56     	; 0x1f98 <updateScreen+0x680>
    1f60:	83 e5       	ldi	r24, 0x53	; 83
    1f62:	f8 01       	movw	r30, r16
					{
						case 0:
						menuScreen->screen2[2][10] = 'S';
    1f64:	e2 55       	subi	r30, 0x52	; 82
    1f66:	fe 4f       	sbci	r31, 0xFE	; 254
    1f68:	80 83       	st	Z, r24
    1f6a:	8f e6       	ldi	r24, 0x6F	; 111
    1f6c:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][11] = 'o';
    1f6e:	80 83       	st	Z, r24
    1f70:	9c e6       	ldi	r25, 0x6C	; 108
    1f72:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][12] = 'l';
    1f74:	90 83       	st	Z, r25
    1f76:	31 96       	adiw	r30, 0x01	; 1
    1f78:	80 83       	st	Z, r24
						menuScreen->screen2[2][13] = 'o';
    1f7a:	0e c0       	rjmp	.+28     	; 0x1f98 <updateScreen+0x680>
    1f7c:	80 e5       	ldi	r24, 0x50	; 80
						break;
    1f7e:	f8 01       	movw	r30, r16

						case 1:
						menuScreen->screen2[2][10] = 'P';
    1f80:	e2 55       	subi	r30, 0x52	; 82
    1f82:	fe 4f       	sbci	r31, 0xFE	; 254
    1f84:	80 83       	st	Z, r24
    1f86:	8f e6       	ldi	r24, 0x6F	; 111
    1f88:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][11] = 'o';
    1f8a:	80 83       	st	Z, r24
    1f8c:	8c e6       	ldi	r24, 0x6C	; 108
    1f8e:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][12] = 'l';
    1f90:	80 83       	st	Z, r24
    1f92:	89 e7       	ldi	r24, 0x79	; 121
    1f94:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][13] = 'y';
    1f96:	80 83       	st	Z, r24
    1f98:	89 85       	ldd	r24, Y+9	; 0x09
    1f9a:	f7 01       	movw	r30, r14

						case 3:
						break;
					}
					
			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack]+1));
    1f9c:	e8 0f       	add	r30, r24
    1f9e:	f1 1d       	adc	r31, r1
    1fa0:	20 8d       	ldd	r18, Z+24	; 0x18
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	2f 5f       	subi	r18, 0xFF	; 255
    1fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa8:	42 e0       	ldi	r20, 0x02	; 2
    1faa:	6a e0       	ldi	r22, 0x0A	; 10
    1fac:	c8 01       	movw	r24, r16
    1fae:	87 54       	subi	r24, 0x47	; 71
    1fb0:	9e 4f       	sbci	r25, 0xFE	; 254
    1fb2:	d4 d3       	rcall	.+1960   	; 0x275c <numPrinter>
    1fb4:	89 85       	ldd	r24, Y+9	; 0x09
    1fb6:	f7 01       	movw	r30, r14
    1fb8:	e8 0f       	add	r30, r24
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1fba:	f1 1d       	adc	r31, r1
    1fbc:	e5 51       	subi	r30, 0x15	; 21
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	80 81       	ld	r24, Z
    1fc2:	81 30       	cpi	r24, 0x01	; 1
    1fc4:	a9 f0       	breq	.+42     	; 0x1ff0 <updateScreen+0x6d8>
    1fc6:	28 f0       	brcs	.+10     	; 0x1fd2 <updateScreen+0x6ba>
    1fc8:	82 30       	cpi	r24, 0x02	; 2
    1fca:	f9 f0       	breq	.+62     	; 0x200a <updateScreen+0x6f2>
    1fcc:	83 30       	cpi	r24, 0x03	; 3
    1fce:	51 f1       	breq	.+84     	; 0x2024 <updateScreen+0x70c>
    1fd0:	37 c0       	rjmp	.+110    	; 0x2040 <updateScreen+0x728>
    1fd2:	81 e4       	ldi	r24, 0x41	; 65
    1fd4:	f8 01       	movw	r30, r16
    1fd6:	e4 52       	subi	r30, 0x24	; 36
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1fd8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fda:	80 83       	st	Z, r24
    1fdc:	8d e2       	ldi	r24, 0x2D	; 45
    1fde:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1fe0:	80 83       	st	Z, r24
    1fe2:	82 e5       	ldi	r24, 0x52	; 82
    1fe4:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1fe6:	80 83       	st	Z, r24
    1fe8:	80 e2       	ldi	r24, 0x20	; 32
    1fea:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1fec:	80 83       	st	Z, r24
    1fee:	28 c0       	rjmp	.+80     	; 0x2040 <updateScreen+0x728>
    1ff0:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1ff2:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1ff4:	e4 52       	subi	r30, 0x24	; 36
    1ff6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff8:	80 83       	st	Z, r24
    1ffa:	80 e2       	ldi	r24, 0x20	; 32
    1ffc:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    1ffe:	80 83       	st	Z, r24
    2000:	31 96       	adiw	r30, 0x01	; 1
    2002:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    2004:	31 96       	adiw	r30, 0x01	; 1
    2006:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    2008:	1b c0       	rjmp	.+54     	; 0x2040 <updateScreen+0x728>
    200a:	81 e4       	ldi	r24, 0x41	; 65
				break;
    200c:	f8 01       	movw	r30, r16
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    200e:	e4 52       	subi	r30, 0x24	; 36
    2010:	fe 4f       	sbci	r31, 0xFE	; 254
    2012:	80 83       	st	Z, r24
    2014:	80 e2       	ldi	r24, 0x20	; 32
    2016:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    2018:	80 83       	st	Z, r24
    201a:	31 96       	adiw	r30, 0x01	; 1
    201c:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    201e:	31 96       	adiw	r30, 0x01	; 1
    2020:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    2022:	0e c0       	rjmp	.+28     	; 0x2040 <updateScreen+0x728>
    2024:	8e e4       	ldi	r24, 0x4E	; 78
				break;
    2026:	f8 01       	movw	r30, r16
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    2028:	e4 52       	subi	r30, 0x24	; 36
    202a:	fe 4f       	sbci	r31, 0xFE	; 254
    202c:	80 83       	st	Z, r24
    202e:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][15] = 'o';
    2030:	31 96       	adiw	r30, 0x01	; 1
    2032:	80 83       	st	Z, r24
    2034:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][16] = 'n';
    2036:	31 96       	adiw	r30, 0x01	; 1
    2038:	80 83       	st	Z, r24
    203a:	85 e6       	ldi	r24, 0x65	; 101
				menuScreen->screen2[4][17] = 'e';
    203c:	31 96       	adiw	r30, 0x01	; 1
    203e:	80 83       	st	Z, r24
    2040:	89 85       	ldd	r24, Y+9	; 0x09
				break;
			}
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    2042:	f7 01       	movw	r30, r14
    2044:	e8 0f       	add	r30, r24
    2046:	f1 1d       	adc	r31, r1
    2048:	e5 53       	subi	r30, 0x35	; 53
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
		numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    204c:	20 81       	ld	r18, Z
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	32 2f       	mov	r19, r18
    2052:	22 27       	eor	r18, r18
				menuScreen->screen2[4][15] = 'o';
				menuScreen->screen2[4][16] = 'n';
				menuScreen->screen2[4][17] = 'e';
				break;
			}
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    2054:	70 96       	adiw	r30, 0x10	; 16
		numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    2056:	80 81       	ld	r24, Z
    2058:	28 2b       	or	r18, r24
    205a:	45 e0       	ldi	r20, 0x05	; 5
    205c:	6d e0       	ldi	r22, 0x0D	; 13
    205e:	c8 01       	movw	r24, r16
    2060:	8d 51       	subi	r24, 0x1D	; 29
    2062:	9e 4f       	sbci	r25, 0xFE	; 254
    2064:	7b d3       	rcall	.+1782   	; 0x275c <numPrinter>
		menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
    2066:	d8 01       	movw	r26, r16
    2068:	a0 51       	subi	r26, 0x10	; 16
    206a:	be 4f       	sbci	r27, 0xFE	; 254
    206c:	8c 91       	ld	r24, X
    206e:	f8 01       	movw	r30, r16
    2070:	e1 51       	subi	r30, 0x11	; 17
    2072:	fe 4f       	sbci	r31, 0xFE	; 254
    2074:	80 83       	st	Z, r24
		menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
    2076:	32 96       	adiw	r30, 0x02	; 2
    2078:	80 81       	ld	r24, Z
    207a:	8c 93       	st	X, r24
		menuScreen->screen2[5][14] = '.';
    207c:	8e e2       	ldi	r24, 0x2E	; 46
    207e:	80 83       	st	Z, r24
    2080:	8a 85       	ldd	r24, Y+10	; 0x0a
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
			
			if(((currentGlobals->menuState)&selectBit)>35) //this accounts for menu stats 36,37,44, and 45
    2082:	87 7f       	andi	r24, 0xF7	; 247
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	24 32       	cpi	r18, 0x24	; 36
    208a:	31 05       	cpc	r19, r1
			{
				triggerChangeScreen = ((currentGlobals->menuState)&selectBit) - 34; //mask to get rid of encoder B pushed state. 
    208c:	14 f0       	brlt	.+4      	; 0x2092 <updateScreen+0x77a>
		menuScreen->screen2[5][14] = '.';
			//the track settings screens should now be populated
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
    208e:	82 52       	subi	r24, 0x22	; 34
			if(((currentGlobals->menuState)&selectBit)>35) //this accounts for menu stats 36,37,44, and 45
			{
				triggerChangeScreen = ((currentGlobals->menuState)&selectBit) - 34; //mask to get rid of encoder B pushed state. 
			}
			
			outputS(menuScreen->screen2[triggerChangeScreen], 1); 
    2090:	01 c0       	rjmp	.+2      	; 0x2094 <updateScreen+0x77c>
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	c8 2e       	mov	r12, r24
    2096:	d1 2c       	mov	r13, r1
    2098:	0f 2e       	mov	r0, r31
    209a:	f5 e1       	ldi	r31, 0x15	; 21
    209c:	bf 2e       	mov	r11, r31
    209e:	f0 2d       	mov	r31, r0
    20a0:	bc 9c       	mul	r11, r12
    20a2:	c0 01       	movw	r24, r0
    20a4:	bd 9c       	mul	r11, r13
    20a6:	90 0d       	add	r25, r0
    20a8:	11 24       	eor	r1, r1
    20aa:	86 58       	subi	r24, 0x86	; 134
    20ac:	9e 4f       	sbci	r25, 0xFE	; 254
    20ae:	61 e0       	ldi	r22, 0x01	; 1
    20b0:	70 e0       	ldi	r23, 0x00	; 0
    20b2:	80 0f       	add	r24, r16
			outputS(menuScreen->screen2[triggerChangeScreen+1], 2); 
    20b4:	91 1f       	adc	r25, r17
    20b6:	3a d3       	rcall	.+1652   	; 0x272c <outputS>
    20b8:	96 01       	movw	r18, r12
    20ba:	2f 5f       	subi	r18, 0xFF	; 255
    20bc:	3f 4f       	sbci	r19, 0xFF	; 255
    20be:	b2 9e       	mul	r11, r18
    20c0:	c0 01       	movw	r24, r0
    20c2:	b3 9e       	mul	r11, r19
    20c4:	90 0d       	add	r25, r0
    20c6:	11 24       	eor	r1, r1
    20c8:	86 58       	subi	r24, 0x86	; 134
    20ca:	9e 4f       	sbci	r25, 0xFE	; 254
    20cc:	62 e0       	ldi	r22, 0x02	; 2
    20ce:	70 e0       	ldi	r23, 0x00	; 0
    20d0:	80 0f       	add	r24, r16
    20d2:	91 1f       	adc	r25, r17
			outputS(menuScreen->screen2[triggerChangeScreen+2], 3);
    20d4:	2b d3       	rcall	.+1622   	; 0x272c <outputS>
    20d6:	f2 e0       	ldi	r31, 0x02	; 2
    20d8:	cf 0e       	add	r12, r31
    20da:	d1 1c       	adc	r13, r1
    20dc:	bc 9c       	mul	r11, r12
    20de:	c0 01       	movw	r24, r0
    20e0:	bd 9c       	mul	r11, r13
    20e2:	90 0d       	add	r25, r0
    20e4:	11 24       	eor	r1, r1
    20e6:	86 58       	subi	r24, 0x86	; 134
    20e8:	9e 4f       	sbci	r25, 0xFE	; 254
    20ea:	63 e0       	ldi	r22, 0x03	; 3
    20ec:	70 e0       	ldi	r23, 0x00	; 0
    20ee:	80 0f       	add	r24, r16
    20f0:	91 1f       	adc	r25, r17
    20f2:	1c d3       	rcall	.+1592   	; 0x272c <outputS>
			
			break;
    20f4:	19 c0       	rjmp	.+50     	; 0x2128 <updateScreen+0x810>
			
			case 3:;
			//do we need this variable?
			numPrinter(menuScreen->screen3[2],10,2,(currentGlobals->currentTrack)+1);
    20f6:	29 85       	ldd	r18, Y+9	; 0x09
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	2f 5f       	subi	r18, 0xFF	; 255
    20fc:	3f 4f       	sbci	r19, 0xFF	; 255
    20fe:	42 e0       	ldi	r20, 0x02	; 2
    2100:	6a e0       	ldi	r22, 0x0A	; 10
    2102:	68 01       	movw	r12, r16
    2104:	8f e9       	ldi	r24, 0x9F	; 159
    2106:	c8 1a       	sub	r12, r24
    2108:	8d ef       	ldi	r24, 0xFD	; 253
    210a:	d8 0a       	sbc	r13, r24
    210c:	c6 01       	movw	r24, r12
    210e:	26 d3       	rcall	.+1612   	; 0x275c <numPrinter>
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    2110:	89 85       	ldd	r24, Y+9	; 0x09
    2112:	fe 01       	movw	r30, r28
    2114:	e8 0f       	add	r30, r24
    2116:	f1 1d       	adc	r31, r1
    2118:	41 89       	ldd	r20, Z+17	; 0x11
    211a:	6e e0       	ldi	r22, 0x0E	; 14
    211c:	c6 01       	movw	r24, r12
    211e:	e4 d4       	rcall	.+2504   	; 0x2ae8 <midiNotePrinter>
    2120:	62 e0       	ldi	r22, 0x02	; 2
			outputS(menuScreen->screen3[2],2);
    2122:	70 e0       	ldi	r23, 0x00	; 0
    2124:	c6 01       	movw	r24, r12
    2126:	02 d3       	rcall	.+1540   	; 0x272c <outputS>
    2128:	8e 85       	ldd	r24, Y+14	; 0x0e
    212a:	82 ff       	sbrs	r24, 2
			break;
			
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
    212c:	70 c1       	rjmp	.+736    	; 0x240e <__stack+0x20f>
    212e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2130:	98 2f       	mov	r25, r24
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
    2132:	9f 70       	andi	r25, 0x0F	; 15
    2134:	89 2e       	mov	r8, r25
    2136:	9d 85       	ldd	r25, Y+13	; 0x0d
    2138:	90 ff       	sbrs	r25, 0
		uint8_t positionSelectUpper = 0;
		if((currentGlobals->buttonSwitchFlag)&0x01)
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <updateScreen+0x828>
    213c:	28 e0       	ldi	r18, 0x08	; 8
    213e:	01 c0       	rjmp	.+2      	; 0x2142 <updateScreen+0x82a>
		{
			positionSelectUpper = 8;
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	82 95       	swap	r24
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
		uint8_t positionSelectUpper = 0;
    2144:	8f 70       	andi	r24, 0x0F	; 15
		{
			positionSelectUpper = 8;
		}
		

		switch((currentGlobals->knobStatus)>>4)
    2146:	82 30       	cpi	r24, 0x02	; 2
    2148:	09 f4       	brne	.+2      	; 0x214c <updateScreen+0x834>
    214a:	94 c0       	rjmp	.+296    	; 0x2274 <__stack+0x75>
    214c:	30 f4       	brcc	.+12     	; 0x215a <updateScreen+0x842>
    214e:	88 23       	and	r24, r24
    2150:	69 f0       	breq	.+26     	; 0x216c <updateScreen+0x854>
    2152:	81 30       	cpi	r24, 0x01	; 1
    2154:	09 f4       	brne	.+2      	; 0x2158 <updateScreen+0x840>
    2156:	58 c0       	rjmp	.+176    	; 0x2208 <__stack+0x9>
    2158:	59 c1       	rjmp	.+690    	; 0x240c <__stack+0x20d>
    215a:	84 30       	cpi	r24, 0x04	; 4
    215c:	09 f4       	brne	.+2      	; 0x2160 <updateScreen+0x848>
    215e:	f6 c0       	rjmp	.+492    	; 0x234c <__stack+0x14d>
    2160:	08 f4       	brcc	.+2      	; 0x2164 <updateScreen+0x84c>
    2162:	be c0       	rjmp	.+380    	; 0x22e0 <__stack+0xe1>
    2164:	85 30       	cpi	r24, 0x05	; 5
    2166:	09 f4       	brne	.+2      	; 0x216a <updateScreen+0x852>
    2168:	3f c1       	rjmp	.+638    	; 0x23e8 <__stack+0x1e9>
    216a:	50 c1       	rjmp	.+672    	; 0x240c <__stack+0x20d>
    216c:	e8 2d       	mov	r30, r8
		{
			case 0: //output volume
			if((currentPattern->outputLevelMSB[positionSelect])==0)
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	d7 01       	movw	r26, r14
    2172:	ae 0f       	add	r26, r30
    2174:	bf 1f       	adc	r27, r31
    2176:	8c 91       	ld	r24, X
    2178:	81 11       	cpse	r24, r1
    217a:	10 c0       	rjmp	.+32     	; 0x219c <updateScreen+0x884>
    217c:	80 e2       	ldi	r24, 0x20	; 32
			{ //value is positive
				menuScreen->knobScreen[0][14] = ' ';
    217e:	d8 01       	movw	r26, r16
    2180:	ae 5f       	subi	r26, 0xFE	; 254
    2182:	bc 4f       	sbci	r27, 0xFC	; 252
    2184:	8c 93       	st	X, r24
    2186:	ee 0d       	add	r30, r14
				numPrinter(menuScreen->knobScreen[0],15,2,currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
    2188:	ff 1d       	adc	r31, r15
    218a:	20 85       	ldd	r18, Z+8	; 0x08
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	42 e0       	ldi	r20, 0x02	; 2
    2190:	6f e0       	ldi	r22, 0x0F	; 15
    2192:	c8 01       	movw	r24, r16
    2194:	8c 50       	subi	r24, 0x0C	; 12
    2196:	9d 4f       	sbci	r25, 0xFD	; 253
    2198:	e1 d2       	rcall	.+1474   	; 0x275c <numPrinter>
    219a:	29 c0       	rjmp	.+82     	; 0x21ee <updateScreen+0x8d6>
    219c:	8d e2       	ldi	r24, 0x2D	; 45
    219e:	d8 01       	movw	r26, r16
			}else
			{
				menuScreen->knobScreen[0][14] = '-';
    21a0:	ae 5f       	subi	r26, 0xFE	; 254
    21a2:	bc 4f       	sbci	r27, 0xFC	; 252
    21a4:	8c 93       	st	X, r24
    21a6:	68 01       	movw	r12, r16
				menuScreen->knobScreen[0][15] = ((((currentPattern->outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    21a8:	a3 e0       	ldi	r26, 0x03	; 3
    21aa:	ca 0e       	add	r12, r26
    21ac:	da 1e       	adc	r13, r26
    21ae:	ee 0d       	add	r30, r14
    21b0:	ff 1d       	adc	r31, r15
    21b2:	80 85       	ldd	r24, Z+8	; 0x08
    21b4:	80 95       	com	r24
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	01 96       	adiw	r24, 0x01	; 1
    21ba:	64 e6       	ldi	r22, 0x64	; 100
    21bc:	70 e0       	ldi	r23, 0x00	; 0
    21be:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__divmodhi4>
    21c2:	2a e0       	ldi	r18, 0x0A	; 10
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	b9 01       	movw	r22, r18
    21c8:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__divmodhi4>
    21cc:	60 5d       	subi	r22, 0xD0	; 208
    21ce:	d6 01       	movw	r26, r12
    21d0:	6c 93       	st	X, r22
				menuScreen->knobScreen[0][16] = (((currentPattern->outputLevelLSB[positionSelect]^255)+1)%10)+48;
    21d2:	78 01       	movw	r14, r16
    21d4:	bc ef       	ldi	r27, 0xFC	; 252
    21d6:	eb 1a       	sub	r14, r27
    21d8:	fb 0a       	sbc	r15, r27
    21da:	80 85       	ldd	r24, Z+8	; 0x08
    21dc:	80 95       	com	r24
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	01 96       	adiw	r24, 0x01	; 1
    21e2:	b9 01       	movw	r22, r18
    21e4:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__divmodhi4>
    21e8:	80 5d       	subi	r24, 0xD0	; 208
    21ea:	f7 01       	movw	r30, r14
			}
				
			menuScreen->knobScreen[0][10] = positionSelect + 49;
    21ec:	80 83       	st	Z, r24
    21ee:	f8 01       	movw	r30, r16
    21f0:	e2 50       	subi	r30, 0x02	; 2
    21f2:	fd 4f       	sbci	r31, 0xFD	; 253
    21f4:	81 e3       	ldi	r24, 0x31	; 49
    21f6:	88 0d       	add	r24, r8
			outputS(menuScreen->knobScreen[0], 3);
    21f8:	80 83       	st	Z, r24
    21fa:	63 e0       	ldi	r22, 0x03	; 3
    21fc:	70 e0       	ldi	r23, 0x00	; 0
    21fe:	c8 01       	movw	r24, r16
    2200:	8c 50       	subi	r24, 0x0C	; 12
    2202:	9d 4f       	sbci	r25, 0xFD	; 253
    2204:	93 d2       	rcall	.+1318   	; 0x272c <outputS>
			break;
    2206:	02 c1       	rjmp	.+516    	; 0x240c <__stack+0x20d>
				
			case 1: //pitch
			menuScreen->knobScreen[1][5] = positionSelect+49; 
    2208:	f8 01       	movw	r30, r16
    220a:	e2 5f       	subi	r30, 0xF2	; 242
    220c:	fc 4f       	sbci	r31, 0xFC	; 252
    220e:	81 e3       	ldi	r24, 0x31	; 49
    2210:	88 0d       	add	r24, r8
			if(currentPattern->outputPitch[positionSelect]>>7)
    2212:	80 83       	st	Z, r24
    2214:	91 2c       	mov	r9, r1
    2216:	f7 01       	movw	r30, r14
    2218:	e8 0d       	add	r30, r8
    221a:	f9 1d       	adc	r31, r9
    221c:	80 89       	ldd	r24, Z+16	; 0x10
    221e:	88 23       	and	r24, r24
			{
				menuScreen->knobScreen[1][7] = '-';
    2220:	94 f4       	brge	.+36     	; 0x2246 <__stack+0x47>
    2222:	8d e2       	ldi	r24, 0x2D	; 45
    2224:	f8 01       	movw	r30, r16
    2226:	e0 5f       	subi	r30, 0xF0	; 240
    2228:	fc 4f       	sbci	r31, 0xFC	; 252
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect])^255);
    222a:	80 83       	st	Z, r24
    222c:	f7 01       	movw	r30, r14
    222e:	e8 0d       	add	r30, r8
    2230:	f9 1d       	adc	r31, r9
    2232:	20 89       	ldd	r18, Z+16	; 0x10
    2234:	20 95       	com	r18
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	43 e0       	ldi	r20, 0x03	; 3
    223a:	68 e0       	ldi	r22, 0x08	; 8
    223c:	c8 01       	movw	r24, r16
    223e:	87 5f       	subi	r24, 0xF7	; 247
    2240:	9c 4f       	sbci	r25, 0xFC	; 252
			}else
			{
				menuScreen->knobScreen[1][7] = '+';
    2242:	8c d2       	rcall	.+1304   	; 0x275c <numPrinter>
    2244:	10 c0       	rjmp	.+32     	; 0x2266 <__stack+0x67>
    2246:	8b e2       	ldi	r24, 0x2B	; 43
    2248:	f8 01       	movw	r30, r16
    224a:	e0 5f       	subi	r30, 0xF0	; 240
				numPrinter(menuScreen->knobScreen[1],8,3,currentPattern->outputPitch[positionSelect]);
    224c:	fc 4f       	sbci	r31, 0xFC	; 252
    224e:	80 83       	st	Z, r24
    2250:	f7 01       	movw	r30, r14
    2252:	e8 0d       	add	r30, r8
    2254:	f9 1d       	adc	r31, r9
    2256:	20 89       	ldd	r18, Z+16	; 0x10
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	43 e0       	ldi	r20, 0x03	; 3
    225c:	68 e0       	ldi	r22, 0x08	; 8
    225e:	c8 01       	movw	r24, r16
    2260:	87 5f       	subi	r24, 0xF7	; 247
    2262:	9c 4f       	sbci	r25, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
    2264:	7b d2       	rcall	.+1270   	; 0x275c <numPrinter>
    2266:	63 e0       	ldi	r22, 0x03	; 3
    2268:	70 e0       	ldi	r23, 0x00	; 0
    226a:	c8 01       	movw	r24, r16
    226c:	87 5f       	subi	r24, 0xF7	; 247
    226e:	9c 4f       	sbci	r25, 0xFC	; 252
			break;
    2270:	5d d2       	rcall	.+1210   	; 0x272c <outputS>
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    2272:	cc c0       	rjmp	.+408    	; 0x240c <__stack+0x20d>
    2274:	91 2c       	mov	r9, r1
    2276:	c2 2e       	mov	r12, r18
    2278:	d1 2c       	mov	r13, r1
    227a:	c4 01       	movw	r24, r8
    227c:	8c 0d       	add	r24, r12
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    227e:	9d 1d       	adc	r25, r13
    2280:	58 01       	movw	r10, r16
    2282:	f2 ee       	ldi	r31, 0xE2	; 226
    2284:	af 1a       	sub	r10, r31
    2286:	fc ef       	ldi	r31, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    2288:	bf 0a       	sbc	r11, r31
    228a:	e8 0e       	add	r14, r24
    228c:	f9 1e       	adc	r15, r25
    228e:	f7 01       	movw	r30, r14
    2290:	e8 5b       	subi	r30, 0xB8	; 184
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	20 81       	ld	r18, Z
    2296:	30 e0       	ldi	r19, 0x00	; 0
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    2298:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    229a:	22 27       	eor	r18, r18
    229c:	70 96       	adiw	r30, 0x10	; 16
    229e:	80 81       	ld	r24, Z
    22a0:	28 2b       	or	r18, r24
    22a2:	45 e0       	ldi	r20, 0x05	; 5
    22a4:	6e e0       	ldi	r22, 0x0E	; 14
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
    22a6:	c5 01       	movw	r24, r10
    22a8:	59 d2       	rcall	.+1202   	; 0x275c <numPrinter>
    22aa:	f8 01       	movw	r30, r16
    22ac:	e5 5d       	subi	r30, 0xD5	; 213
    22ae:	fc 4f       	sbci	r31, 0xFC	; 252
    22b0:	d8 01       	movw	r26, r16
    22b2:	a4 5d       	subi	r26, 0xD4	; 212
    22b4:	bc 4f       	sbci	r27, 0xFC	; 252
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
    22b6:	8c 91       	ld	r24, X
    22b8:	80 83       	st	Z, r24
    22ba:	32 96       	adiw	r30, 0x02	; 2
			menuScreen->knobScreen[2][15] = '.';	
    22bc:	80 81       	ld	r24, Z
    22be:	8c 93       	st	X, r24
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
    22c0:	8e e2       	ldi	r24, 0x2E	; 46
    22c2:	80 83       	st	Z, r24
    22c4:	94 01       	movw	r18, r8
    22c6:	2f 5f       	subi	r18, 0xFF	; 255
    22c8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ca:	2c 0d       	add	r18, r12
    22cc:	3d 1d       	adc	r19, r13
    22ce:	42 e0       	ldi	r20, 0x02	; 2
    22d0:	6a e0       	ldi	r22, 0x0A	; 10
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
    22d2:	c5 01       	movw	r24, r10
    22d4:	43 d2       	rcall	.+1158   	; 0x275c <numPrinter>
    22d6:	63 e0       	ldi	r22, 0x03	; 3
    22d8:	70 e0       	ldi	r23, 0x00	; 0
    22da:	c5 01       	movw	r24, r10
			break;
    22dc:	27 d2       	rcall	.+1102   	; 0x272c <outputS>
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    22de:	96 c0       	rjmp	.+300    	; 0x240c <__stack+0x20d>
    22e0:	91 2c       	mov	r9, r1
    22e2:	c2 2e       	mov	r12, r18
    22e4:	d1 2c       	mov	r13, r1
    22e6:	c4 01       	movw	r24, r8
    22e8:	8c 0d       	add	r24, r12
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    22ea:	9d 1d       	adc	r25, r13
    22ec:	58 01       	movw	r10, r16
    22ee:	2d ec       	ldi	r18, 0xCD	; 205
    22f0:	a2 1a       	sub	r10, r18
    22f2:	2c ef       	ldi	r18, 0xFC	; 252
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
			break;
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    22f4:	b2 0a       	sbc	r11, r18
    22f6:	e8 0e       	add	r14, r24
    22f8:	f9 1e       	adc	r15, r25
    22fa:	f7 01       	movw	r30, r14
    22fc:	e8 59       	subi	r30, 0x98	; 152
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	20 81       	ld	r18, Z
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
			break;
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    2306:	22 27       	eor	r18, r18
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    2308:	70 96       	adiw	r30, 0x10	; 16
    230a:	80 81       	ld	r24, Z
    230c:	28 2b       	or	r18, r24
    230e:	45 e0       	ldi	r20, 0x05	; 5
    2310:	6f e0       	ldi	r22, 0x0F	; 15
    2312:	c5 01       	movw	r24, r10
    2314:	23 d2       	rcall	.+1094   	; 0x275c <numPrinter>
			menuScreen->knobScreen[3][14] = menuScreen->knobScreen[3][15];
    2316:	f8 01       	movw	r30, r16
    2318:	ef 5b       	subi	r30, 0xBF	; 191
    231a:	fc 4f       	sbci	r31, 0xFC	; 252
    231c:	d8 01       	movw	r26, r16
    231e:	ae 5b       	subi	r26, 0xBE	; 190
    2320:	bc 4f       	sbci	r27, 0xFC	; 252
    2322:	8c 91       	ld	r24, X
    2324:	80 83       	st	Z, r24
			menuScreen->knobScreen[3][15] = menuScreen->knobScreen[3][16];
    2326:	32 96       	adiw	r30, 0x02	; 2
    2328:	80 81       	ld	r24, Z
    232a:	8c 93       	st	X, r24
			menuScreen->knobScreen[3][16] = '.';
    232c:	8e e2       	ldi	r24, 0x2E	; 46
			numPrinter(menuScreen->knobScreen[3],11,2,(positionSelect+1+positionSelectUpper));
    232e:	80 83       	st	Z, r24
    2330:	94 01       	movw	r18, r8
    2332:	2f 5f       	subi	r18, 0xFF	; 255
    2334:	3f 4f       	sbci	r19, 0xFF	; 255
    2336:	2c 0d       	add	r18, r12
    2338:	3d 1d       	adc	r19, r13
    233a:	42 e0       	ldi	r20, 0x02	; 2
    233c:	6b e0       	ldi	r22, 0x0B	; 11
    233e:	c5 01       	movw	r24, r10
			outputS(menuScreen->knobScreen[3], 3);
    2340:	0d d2       	rcall	.+1050   	; 0x275c <numPrinter>
    2342:	63 e0       	ldi	r22, 0x03	; 3
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	c5 01       	movw	r24, r10
    2348:	f1 d1       	rcall	.+994    	; 0x272c <outputS>
			break;
				
			case 4: //track volume
			if(currentPattern->trackMainVolumeMSB[(positionSelect+positionSelectUpper)]==0)
    234a:	60 c0       	rjmp	.+192    	; 0x240c <__stack+0x20d>
    234c:	c2 2e       	mov	r12, r18
    234e:	d1 2c       	mov	r13, r1
    2350:	c8 0c       	add	r12, r8
    2352:	d1 1c       	adc	r13, r1
    2354:	f7 01       	movw	r30, r14
    2356:	ec 0d       	add	r30, r12
    2358:	fd 1d       	adc	r31, r13
    235a:	80 a5       	ldd	r24, Z+40	; 0x28
			{
				menuScreen->knobScreen[4][15] = ' ';
    235c:	81 11       	cpse	r24, r1
    235e:	11 c0       	rjmp	.+34     	; 0x2382 <__stack+0x183>
    2360:	80 e2       	ldi	r24, 0x20	; 32
    2362:	f8 01       	movw	r30, r16
    2364:	e9 5a       	subi	r30, 0xA9	; 169
 				numPrinter(menuScreen->knobScreen[4],16, 2, currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]);
    2366:	fc 4f       	sbci	r31, 0xFC	; 252
    2368:	80 83       	st	Z, r24
    236a:	f7 01       	movw	r30, r14
    236c:	ec 0d       	add	r30, r12
    236e:	fd 1d       	adc	r31, r13
    2370:	20 ad       	ldd	r18, Z+56	; 0x38
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	42 e0       	ldi	r20, 0x02	; 2
    2376:	60 e1       	ldi	r22, 0x10	; 16
    2378:	c8 01       	movw	r24, r16
    237a:	88 5b       	subi	r24, 0xB8	; 184
    237c:	9c 4f       	sbci	r25, 0xFC	; 252
    237e:	ee d1       	rcall	.+988    	; 0x275c <numPrinter>
			}else
			{
				menuScreen->knobScreen[4][15] = '-';
    2380:	25 c0       	rjmp	.+74     	; 0x23cc <__stack+0x1cd>
    2382:	8d e2       	ldi	r24, 0x2D	; 45
    2384:	f8 01       	movw	r30, r16
    2386:	e9 5a       	subi	r30, 0xA9	; 169
    2388:	fc 4f       	sbci	r31, 0xFC	; 252
				menuScreen->knobScreen[4][16] = ((((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    238a:	80 83       	st	Z, r24
    238c:	31 96       	adiw	r30, 0x01	; 1
    238e:	ec 0c       	add	r14, r12
    2390:	fd 1c       	adc	r15, r13
    2392:	d7 01       	movw	r26, r14
    2394:	d8 96       	adiw	r26, 0x38	; 56
    2396:	8c 91       	ld	r24, X
    2398:	80 95       	com	r24
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	01 96       	adiw	r24, 0x01	; 1
    239e:	64 e6       	ldi	r22, 0x64	; 100
    23a0:	70 e0       	ldi	r23, 0x00	; 0
    23a2:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__divmodhi4>
    23a6:	2a e0       	ldi	r18, 0x0A	; 10
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	b9 01       	movw	r22, r18
    23ac:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__divmodhi4>
    23b0:	60 5d       	subi	r22, 0xD0	; 208
				menuScreen->knobScreen[4][17] = (((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%10)+48;
    23b2:	60 83       	st	Z, r22
    23b4:	31 96       	adiw	r30, 0x01	; 1
    23b6:	d7 01       	movw	r26, r14
    23b8:	d8 96       	adiw	r26, 0x38	; 56
    23ba:	8c 91       	ld	r24, X
    23bc:	80 95       	com	r24
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	01 96       	adiw	r24, 0x01	; 1
    23c2:	b9 01       	movw	r22, r18
    23c4:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__divmodhi4>
    23c8:	80 5d       	subi	r24, 0xD0	; 208
			}
				 numPrinter(menuScreen->knobScreen[4],12,2,(positionSelect+positionSelectUpper+1));
    23ca:	80 83       	st	Z, r24
    23cc:	08 5b       	subi	r16, 0xB8	; 184
    23ce:	1c 4f       	sbci	r17, 0xFC	; 252
    23d0:	96 01       	movw	r18, r12
    23d2:	2f 5f       	subi	r18, 0xFF	; 255
    23d4:	3f 4f       	sbci	r19, 0xFF	; 255
    23d6:	42 e0       	ldi	r20, 0x02	; 2
    23d8:	6c e0       	ldi	r22, 0x0C	; 12
    23da:	c8 01       	movw	r24, r16
    23dc:	bf d1       	rcall	.+894    	; 0x275c <numPrinter>
				 outputS(menuScreen->knobScreen[4], 3);
    23de:	63 e0       	ldi	r22, 0x03	; 3
    23e0:	70 e0       	ldi	r23, 0x00	; 0
    23e2:	c8 01       	movw	r24, r16
    23e4:	a3 d1       	rcall	.+838    	; 0x272c <outputS>
    23e6:	12 c0       	rjmp	.+36     	; 0x240c <__stack+0x20d>
			break;
    23e8:	06 5d       	subi	r16, 0xD6	; 214
			
			case 5:
			numPrinter(menuScreen->screen0[2],5,3,currentPattern->patternBPM);
    23ea:	1f 4f       	sbci	r17, 0xFF	; 255
    23ec:	f7 01       	movw	r30, r14
    23ee:	e8 53       	subi	r30, 0x38	; 56
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	20 81       	ld	r18, Z
    23f4:	31 81       	ldd	r19, Z+1	; 0x01
    23f6:	43 e0       	ldi	r20, 0x03	; 3
    23f8:	65 e0       	ldi	r22, 0x05	; 5
    23fa:	c8 01       	movw	r24, r16
    23fc:	af d1       	rcall	.+862    	; 0x275c <numPrinter>
    23fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2400:	81 11       	cpse	r24, r1
			if(currentGlobals->menuState==PreformanceModeInit)
    2402:	04 c0       	rjmp	.+8      	; 0x240c <__stack+0x20d>
    2404:	62 e0       	ldi	r22, 0x02	; 2
    2406:	70 e0       	ldi	r23, 0x00	; 0
			{
				outputS(menuScreen->screen0[2],2);
    2408:	c8 01       	movw	r24, r16
    240a:	90 d1       	rcall	.+800    	; 0x272c <outputS>
    240c:	1e 86       	std	Y+14, r1	; 0x0e
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
			}
			break;
		}
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<knobChange));			
    2412:	1f 91       	pop	r17
	}
    2414:	0f 91       	pop	r16
    2416:	ff 90       	pop	r15
    2418:	ef 90       	pop	r14
    241a:	df 90       	pop	r13
    241c:	cf 90       	pop	r12
    241e:	bf 90       	pop	r11
    2420:	af 90       	pop	r10
    2422:	9f 90       	pop	r9
    2424:	8f 90       	pop	r8
    2426:	08 95       	ret

00002428 <__vector_54>:
    2428:	1f 92       	push	r1
    242a:	0f 92       	push	r0
    242c:	0f b6       	in	r0, 0x3f	; 63
}

void midiTransmit(uint8_t data)
{
  while (!(UCSR3A & (1 << UDRE3)));
  UDR3 = data;
    242e:	0f 92       	push	r0
    2430:	11 24       	eor	r1, r1
    2432:	0b b6       	in	r0, 0x3b	; 59
    2434:	0f 92       	push	r0
    2436:	2f 93       	push	r18
    2438:	3f 93       	push	r19
    243a:	5f 93       	push	r21
    243c:	6f 93       	push	r22
    243e:	7f 93       	push	r23
    2440:	8f 93       	push	r24
    2442:	9f 93       	push	r25
    2444:	af 93       	push	r26
    2446:	bf 93       	push	r27
    2448:	ef 93       	push	r30
    244a:	ff 93       	push	r31
    244c:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2450:	82 2f       	mov	r24, r18
    2452:	82 95       	swap	r24
    2454:	8f 70       	andi	r24, 0x0F	; 15
    2456:	88 50       	subi	r24, 0x08	; 8
    2458:	82 30       	cpi	r24, 0x02	; 2
    245a:	78 f4       	brcc	.+30     	; 0x247a <__vector_54+0x52>
    245c:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <midiWriteIndex>
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	fc 01       	movw	r30, r24
    2464:	ee 0f       	add	r30, r30
    2466:	ff 1f       	adc	r31, r31
    2468:	8e 0f       	add	r24, r30
    246a:	9f 1f       	adc	r25, r31
    246c:	fc 01       	movw	r30, r24
    246e:	e5 59       	subi	r30, 0x95	; 149
    2470:	f9 4f       	sbci	r31, 0xF9	; 249
    2472:	20 83       	st	Z, r18
    2474:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    2478:	50 c0       	rjmp	.+160    	; 0x251a <__vector_54+0xf2>
    247a:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    247e:	81 11       	cpse	r24, r1
    2480:	15 c0       	rjmp	.+42     	; 0x24ac <__vector_54+0x84>
    2482:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <midiWriteIndex>
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    248c:	fc 01       	movw	r30, r24
    248e:	ee 0f       	add	r30, r30
    2490:	ff 1f       	adc	r31, r31
    2492:	e8 0f       	add	r30, r24
    2494:	f9 1f       	adc	r31, r25
    2496:	e5 59       	subi	r30, 0x95	; 149
    2498:	f9 4f       	sbci	r31, 0xF9	; 249
    249a:	e3 0f       	add	r30, r19
    249c:	f1 1d       	adc	r31, r1
    249e:	21 83       	std	Z+1, r18	; 0x01
    24a0:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    24a4:	8f 5f       	subi	r24, 0xFF	; 255
    24a6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <midiWriteFlag>
    24aa:	37 c0       	rjmp	.+110    	; 0x251a <__vector_54+0xf2>
    24ac:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    24b0:	8f 3f       	cpi	r24, 0xFF	; 255
    24b2:	99 f1       	breq	.+102    	; 0x251a <__vector_54+0xf2>
    24b4:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <midiWriteIndex>
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    24be:	fc 01       	movw	r30, r24
    24c0:	ee 0f       	add	r30, r30
    24c2:	ff 1f       	adc	r31, r31
    24c4:	e8 0f       	add	r30, r24
    24c6:	f9 1f       	adc	r31, r25
    24c8:	e5 59       	subi	r30, 0x95	; 149
    24ca:	f9 4f       	sbci	r31, 0xF9	; 249
    24cc:	e3 0f       	add	r30, r19
    24ce:	f1 1d       	adc	r31, r1
    24d0:	21 83       	std	Z+1, r18	; 0x01
    24d2:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <midiWriteIndex>
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	fc 01       	movw	r30, r24
    24da:	ee 0f       	add	r30, r30
    24dc:	ff 1f       	adc	r31, r31
    24de:	8e 0f       	add	r24, r30
    24e0:	9f 1f       	adc	r25, r31
    24e2:	fc 01       	movw	r30, r24
    24e4:	e5 59       	subi	r30, 0x95	; 149
    24e6:	f9 4f       	sbci	r31, 0xF9	; 249
    24e8:	20 81       	ld	r18, Z
    24ea:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <midiWriteIndex>
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	01 96       	adiw	r24, 0x01	; 1
    24f2:	6a e0       	ldi	r22, 0x0A	; 10
    24f4:	70 e0       	ldi	r23, 0x00	; 0
    24f6:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__divmodhi4>
    24fa:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <midiWriteIndex>
    24fe:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <midiWriteIndex>
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	fc 01       	movw	r30, r24
    2506:	ee 0f       	add	r30, r30
    2508:	ff 1f       	adc	r31, r31
    250a:	8e 0f       	add	r24, r30
    250c:	9f 1f       	adc	r25, r31
    250e:	fc 01       	movw	r30, r24
    2510:	e5 59       	subi	r30, 0x95	; 149
    2512:	f9 4f       	sbci	r31, 0xF9	; 249
    2514:	20 83       	st	Z, r18
    2516:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    251a:	ff 91       	pop	r31
    251c:	ef 91       	pop	r30
    251e:	bf 91       	pop	r27
    2520:	af 91       	pop	r26
    2522:	9f 91       	pop	r25
    2524:	8f 91       	pop	r24
    2526:	7f 91       	pop	r23
    2528:	6f 91       	pop	r22
    252a:	5f 91       	pop	r21
    252c:	3f 91       	pop	r19
    252e:	2f 91       	pop	r18
    2530:	0f 90       	pop	r0
    2532:	0b be       	out	0x3b, r0	; 59
    2534:	0f 90       	pop	r0
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	0f 90       	pop	r0
    253a:	1f 90       	pop	r1
    253c:	18 95       	reti

0000253e <initMidi>:
    253e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    2542:	8f e1       	ldi	r24, 0x1F	; 31
    2544:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    2548:	e1 e3       	ldi	r30, 0x31	; 49
    254a:	f1 e0       	ldi	r31, 0x01	; 1
    254c:	80 81       	ld	r24, Z
    254e:	88 69       	ori	r24, 0x98	; 152
    2550:	80 83       	st	Z, r24
    2552:	e2 e3       	ldi	r30, 0x32	; 50
    2554:	f1 e0       	ldi	r31, 0x01	; 1
    2556:	80 81       	ld	r24, Z
    2558:	86 60       	ori	r24, 0x06	; 6
    255a:	80 83       	st	Z, r24
    255c:	08 95       	ret

0000255e <midiRead>:
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
    255e:	9f 92       	push	r9
    2560:	af 92       	push	r10
    2562:	bf 92       	push	r11
    2564:	cf 92       	push	r12
    2566:	df 92       	push	r13
    2568:	ef 92       	push	r14
    256a:	ff 92       	push	r15
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
  while (midiReadIndex != midiWriteIndex)
    2578:	e0 91 f2 03 	lds	r30, 0x03F2	; 0x8003f2 <midiReadIndex>
    257c:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <midiWriteIndex>
    2580:	e8 17       	cp	r30, r24
    2582:	09 f4       	brne	.+2      	; 0x2586 <midiRead+0x28>
    2584:	4d c0       	rjmp	.+154    	; 0x2620 <midiRead+0xc2>
  {
    uint8_t midiMessageType = ((midiEventBuffer[midiReadIndex].statusByte)>>4);
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    2586:	7e 01       	movw	r14, r28
    2588:	86 e7       	ldi	r24, 0x76	; 118
    258a:	e8 1a       	sub	r14, r24
    258c:	8e ef       	ldi	r24, 0xFE	; 254
    258e:	f8 0a       	sbc	r15, r24
    {
        for (int i=0; i<16; i++)
        {
          if(midiEventBuffer[midiReadIndex].dataByte[0]==currentGlobals.midiTrackNote[i])
          { //we don't care about velocity, at least not yet.
			playTrack(&currentPattern,&currentGlobals, i); //this might be out of scope? need to test.
    2590:	ce 2c       	mov	r12, r14
    2592:	df 2c       	mov	r13, r15
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    2594:	0a e0       	ldi	r16, 0x0A	; 10
    2596:	10 e0       	ldi	r17, 0x00	; 0

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
  {
    uint8_t midiMessageType = ((midiEventBuffer[midiReadIndex].statusByte)>>4);
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	cf 01       	movw	r24, r30
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	e8 0f       	add	r30, r24
    25a2:	f9 1f       	adc	r31, r25
    25a4:	e5 59       	subi	r30, 0x95	; 149
    25a6:	f9 4f       	sbci	r31, 0xF9	; 249
    25a8:	80 81       	ld	r24, Z
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    25aa:	22 81       	ldd	r18, Z+2	; 0x02
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    25ac:	90 81       	ld	r25, Z
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    25ae:	82 95       	swap	r24
    25b0:	8f 70       	andi	r24, 0x0F	; 15
    25b2:	89 30       	cpi	r24, 0x09	; 9
    25b4:	39 f5       	brne	.+78     	; 0x2604 <midiRead+0xa6>
    25b6:	22 23       	and	r18, r18
    25b8:	29 f1       	breq	.+74     	; 0x2604 <midiRead+0xa6>
    25ba:	9f 70       	andi	r25, 0x0F	; 15
    25bc:	f7 01       	movw	r30, r14
    25be:	80 89       	ldd	r24, Z+16	; 0x10
    25c0:	98 13       	cpse	r25, r24
    25c2:	20 c0       	rjmp	.+64     	; 0x2604 <midiRead+0xa6>
    25c4:	57 01       	movw	r10, r14
    25c6:	f1 e1       	ldi	r31, 0x11	; 17
    25c8:	af 0e       	add	r10, r31
    25ca:	b1 1c       	adc	r11, r1
    25cc:	91 2c       	mov	r9, r1
    {
        for (int i=0; i<16; i++)
        {
          if(midiEventBuffer[midiReadIndex].dataByte[0]==currentGlobals.midiTrackNote[i])
    25ce:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <midiReadIndex>
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	fc 01       	movw	r30, r24
    25d6:	ee 0f       	add	r30, r30
    25d8:	ff 1f       	adc	r31, r31
    25da:	8e 0f       	add	r24, r30
    25dc:	9f 1f       	adc	r25, r31
    25de:	fc 01       	movw	r30, r24
    25e0:	e5 59       	subi	r30, 0x95	; 149
    25e2:	f9 4f       	sbci	r31, 0xF9	; 249
    25e4:	91 81       	ldd	r25, Z+1	; 0x01
    25e6:	f5 01       	movw	r30, r10
    25e8:	81 91       	ld	r24, Z+
    25ea:	5f 01       	movw	r10, r30
    25ec:	98 13       	cpse	r25, r24
    25ee:	06 c0       	rjmp	.+12     	; 0x25fc <midiRead+0x9e>
          { //we don't care about velocity, at least not yet.
			playTrack(&currentPattern,&currentGlobals, i); //this might be out of scope? need to test.
    25f0:	49 2d       	mov	r20, r9
    25f2:	6c 2d       	mov	r22, r12
    25f4:	7d 2d       	mov	r23, r13
    25f6:	ce 01       	movw	r24, r28
    25f8:	0f 96       	adiw	r24, 0x0f	; 15
    25fa:	8c d4       	rcall	.+2328   	; 0x2f14 <playTrack>
    25fc:	93 94       	inc	r9
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    {
        for (int i=0; i<16; i++)
    25fe:	f0 e1       	ldi	r31, 0x10	; 16
    2600:	9f 12       	cpse	r9, r31
    2602:	e5 cf       	rjmp	.-54     	; 0x25ce <midiRead+0x70>
          { //we don't care about velocity, at least not yet.
			playTrack(&currentPattern,&currentGlobals, i); //this might be out of scope? need to test.
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    2604:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <midiReadIndex>
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	01 96       	adiw	r24, 0x01	; 1
    260c:	b8 01       	movw	r22, r16
    260e:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__divmodhi4>
    2612:	e8 2f       	mov	r30, r24
    2614:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <midiReadIndex>
  UDR3 = data;
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
    2618:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <midiWriteIndex>
    261c:	8e 13       	cpse	r24, r30
    261e:	bc cf       	rjmp	.-136    	; 0x2598 <midiRead+0x3a>
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
  }
}
    2620:	df 91       	pop	r29
    2622:	cf 91       	pop	r28
    2624:	1f 91       	pop	r17
    2626:	0f 91       	pop	r16
    2628:	ff 90       	pop	r15
    262a:	ef 90       	pop	r14
    262c:	df 90       	pop	r13
    262e:	cf 90       	pop	r12
    2630:	bf 90       	pop	r11
    2632:	af 90       	pop	r10
    2634:	9f 90       	pop	r9
    2636:	08 95       	ret

00002638 <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    2638:	e2 e0       	ldi	r30, 0x02	; 2
    263a:	f1 e0       	ldi	r31, 0x01	; 1
    263c:	80 81       	ld	r24, Z
    263e:	80 62       	ori	r24, 0x20	; 32
    2640:	80 83       	st	Z, r24
    2642:	85 e0       	ldi	r24, 0x05	; 5
    2644:	8a 95       	dec	r24
    2646:	f1 f7       	brne	.-4      	; 0x2644 <enableCycle+0xc>
    2648:	00 00       	nop
    264a:	80 81       	ld	r24, Z
    264c:	8f 7d       	andi	r24, 0xDF	; 223
    264e:	80 83       	st	Z, r24
    2650:	08 95       	ret

00002652 <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
    2652:	e2 e0       	ldi	r30, 0x02	; 2
    2654:	f1 e0       	ldi	r31, 0x01	; 1
    2656:	90 81       	ld	r25, Z
    2658:	9f 7b       	andi	r25, 0xBF	; 191
    265a:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    265c:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
    265e:	ec cf       	rjmp	.-40     	; 0x2638 <enableCycle>
    2660:	08 95       	ret

00002662 <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
    2662:	e2 e0       	ldi	r30, 0x02	; 2
    2664:	f1 e0       	ldi	r31, 0x01	; 1
    2666:	90 81       	ld	r25, Z
    2668:	90 64       	ori	r25, 0x40	; 64
    266a:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    266c:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
    266e:	e4 cf       	rjmp	.-56     	; 0x2638 <enableCycle>
    2670:	08 95       	ret

00002672 <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRH = 0x60; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
    2672:	80 e6       	ldi	r24, 0x60	; 96
    2674:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	DDRC =0xFF; //all pins on the LCD Data Bus.
    2678:	8f ef       	ldi	r24, 0xFF	; 255
    267a:	87 b9       	out	0x07, r24	; 7


	PORTH &= 0B10011111;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
    267c:	e2 e0       	ldi	r30, 0x02	; 2
    267e:	f1 e0       	ldi	r31, 0x01	; 1
    2680:	80 81       	ld	r24, Z
    2682:	8f 79       	andi	r24, 0x9F	; 159
    2684:	80 83       	st	Z, r24

	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
    2686:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2688:	8f e1       	ldi	r24, 0x1F	; 31
    268a:	93 e0       	ldi	r25, 0x03	; 3
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	f1 f7       	brne	.-4      	; 0x268c <initScreen+0x1a>
    2690:	00 c0       	rjmp	.+0      	; 0x2692 <initScreen+0x20>
    2692:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose


	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    2694:	8a e2       	ldi	r24, 0x2A	; 42
    2696:	dd df       	rcall	.-70     	; 0x2652 <command>
	command(0x71);        // Function selection A:
    2698:	81 e7       	ldi	r24, 0x71	; 113
    269a:	db df       	rcall	.-74     	; 0x2652 <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
    269c:	8c e5       	ldi	r24, 0x5C	; 92
    269e:	e1 df       	rcall	.-62     	; 0x2662 <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    26a0:	88 e2       	ldi	r24, 0x28	; 40
    26a2:	d7 df       	rcall	.-82     	; 0x2652 <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
    26a4:	88 e0       	ldi	r24, 0x08	; 8
    26a6:	d5 df       	rcall	.-86     	; 0x2652 <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    26a8:	8a e2       	ldi	r24, 0x2A	; 42
    26aa:	d3 df       	rcall	.-90     	; 0x2652 <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    26ac:	89 e7       	ldi	r24, 0x79	; 121
    26ae:	d1 df       	rcall	.-94     	; 0x2652 <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
    26b0:	85 ed       	ldi	r24, 0xD5	; 213
    26b2:	cf df       	rcall	.-98     	; 0x2652 <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
    26b4:	80 e7       	ldi	r24, 0x70	; 112
    26b6:	cd df       	rcall	.-102    	; 0x2652 <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    26b8:	88 e7       	ldi	r24, 0x78	; 120
    26ba:	cb df       	rcall	.-106    	; 0x2652 <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
    26bc:	89 e0       	ldi	r24, 0x09	; 9
    26be:	c9 df       	rcall	.-110    	; 0x2652 <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
    26c0:	86 e0       	ldi	r24, 0x06	; 6
    26c2:	c7 df       	rcall	.-114    	; 0x2652 <command>
	command(0x72);        // Function selection B:
    26c4:	82 e7       	ldi	r24, 0x72	; 114
    26c6:	c5 df       	rcall	.-118    	; 0x2652 <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
    26c8:	8a e0       	ldi	r24, 0x0A	; 10
    26ca:	cb df       	rcall	.-106    	; 0x2662 <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    26cc:	89 e7       	ldi	r24, 0x79	; 121
    26ce:	c1 df       	rcall	.-126    	; 0x2652 <command>
	command(0xDA);        // Set SEG pins hardware configuration:
    26d0:	8a ed       	ldi	r24, 0xDA	; 218
    26d2:	bf df       	rcall	.-130    	; 0x2652 <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
    26d4:	80 e1       	ldi	r24, 0x10	; 16
    26d6:	bd df       	rcall	.-134    	; 0x2652 <command>
	command(0xDC);        // Function selection C:
    26d8:	8c ed       	ldi	r24, 0xDC	; 220
    26da:	bb df       	rcall	.-138    	; 0x2652 <command>
	command(0x00);        //  internal VSL, GPIO input disable
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	b9 df       	rcall	.-142    	; 0x2652 <command>
	command(0x81);        // Set contrast control:
    26e0:	81 e8       	ldi	r24, 0x81	; 129
    26e2:	b7 df       	rcall	.-146    	; 0x2652 <command>
    26e4:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
    26e6:	b5 df       	rcall	.-150    	; 0x2652 <command>
    26e8:	89 ed       	ldi	r24, 0xD9	; 217
    26ea:	b3 df       	rcall	.-154    	; 0x2652 <command>
	command(0xD9);        // Set phase length:
    26ec:	81 ef       	ldi	r24, 0xF1	; 241
    26ee:	b1 df       	rcall	.-158    	; 0x2652 <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
    26f0:	8b ed       	ldi	r24, 0xDB	; 219
    26f2:	af df       	rcall	.-162    	; 0x2652 <command>
    26f4:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
    26f6:	ad df       	rcall	.-166    	; 0x2652 <command>
    26f8:	88 e7       	ldi	r24, 0x78	; 120
    26fa:	ab df       	rcall	.-170    	; 0x2652 <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
    26fc:	88 e2       	ldi	r24, 0x28	; 40
    26fe:	a9 df       	rcall	.-174    	; 0x2652 <command>
    2700:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    2702:	a7 df       	rcall	.-178    	; 0x2652 <command>
    2704:	8f e3       	ldi	r24, 0x3F	; 63
    2706:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <initScreen+0x96>
    270c:	00 c0       	rjmp	.+0      	; 0x270e <initScreen+0x9c>
	command(0x01);        // Clear display
    270e:	00 00       	nop
    2710:	80 e8       	ldi	r24, 0x80	; 128
    2712:	9f df       	rcall	.-194    	; 0x2652 <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2714:	8c e0       	ldi	r24, 0x0C	; 12
    2716:	9d df       	rcall	.-198    	; 0x2652 <command>
    2718:	9f ef       	ldi	r25, 0xFF	; 255
    271a:	24 e3       	ldi	r18, 0x34	; 52
    271c:	8c e0       	ldi	r24, 0x0C	; 12
    271e:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required

	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
    2720:	20 40       	sbci	r18, 0x00	; 0
    2722:	80 40       	sbci	r24, 0x00	; 0
    2724:	e1 f7       	brne	.-8      	; 0x271e <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
    2726:	00 c0       	rjmp	.+0      	; 0x2728 <initScreen+0xb6>
    2728:	00 00       	nop
    272a:	08 95       	ret

0000272c <outputS>:
    272c:	0f 93       	push	r16
    272e:	1f 93       	push	r17
    2730:	cf 93       	push	r28
    2732:	df 93       	push	r29
    2734:	8c 01       	movw	r16, r24
    2736:	fb 01       	movw	r30, r22
    2738:	ff 27       	eor	r31, r31
    273a:	e8 5f       	subi	r30, 0xF8	; 248
    273c:	fd 4f       	sbci	r31, 0xFD	; 253
    273e:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
    2740:	88 df       	rcall	.-240    	; 0x2652 <command>
    2742:	e8 01       	movw	r28, r16
    2744:	0c 5e       	subi	r16, 0xEC	; 236
    2746:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
    2748:	89 91       	ld	r24, Y+
    274a:	8b df       	rcall	.-234    	; 0x2662 <data>
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
    274c:	c0 17       	cp	r28, r16
    274e:	d1 07       	cpc	r29, r17
    2750:	d9 f7       	brne	.-10     	; 0x2748 <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
    2752:	df 91       	pop	r29
    2754:	cf 91       	pop	r28
    2756:	1f 91       	pop	r17
    2758:	0f 91       	pop	r16
    275a:	08 95       	ret

0000275c <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    275c:	cf 93       	push	r28
    275e:	df 93       	push	r29
    2760:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch(numCharacters)
    2762:	43 30       	cpi	r20, 0x03	; 3
    2764:	09 f4       	brne	.+2      	; 0x2768 <numPrinter+0xc>
    2766:	54 c0       	rjmp	.+168    	; 0x2810 <numPrinter+0xb4>
    2768:	28 f4       	brcc	.+10     	; 0x2774 <numPrinter+0x18>
    276a:	41 30       	cpi	r20, 0x01	; 1
    276c:	51 f0       	breq	.+20     	; 0x2782 <numPrinter+0x26>
    276e:	42 30       	cpi	r20, 0x02	; 2
    2770:	29 f1       	breq	.+74     	; 0x27bc <numPrinter+0x60>
    2772:	b7 c1       	rjmp	.+878    	; 0x2ae2 <numPrinter+0x386>
    2774:	44 30       	cpi	r20, 0x04	; 4
    2776:	09 f4       	brne	.+2      	; 0x277a <numPrinter+0x1e>
    2778:	95 c0       	rjmp	.+298    	; 0x28a4 <numPrinter+0x148>
    277a:	45 30       	cpi	r20, 0x05	; 5
    277c:	09 f4       	brne	.+2      	; 0x2780 <numPrinter+0x24>
    277e:	0a c1       	rjmp	.+532    	; 0x2994 <numPrinter+0x238>
    2780:	b0 c1       	rjmp	.+864    	; 0x2ae2 <numPrinter+0x386>
		case 0:
		break;

		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
    2782:	ec 01       	movw	r28, r24
    2784:	c6 0f       	add	r28, r22
    2786:	d1 1d       	adc	r29, r1
    2788:	ad ec       	ldi	r26, 0xCD	; 205
    278a:	bc ec       	ldi	r27, 0xCC	; 204
    278c:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    2790:	96 95       	lsr	r25
    2792:	87 95       	ror	r24
    2794:	96 95       	lsr	r25
    2796:	87 95       	ror	r24
    2798:	96 95       	lsr	r25
    279a:	87 95       	ror	r24
    279c:	9c 01       	movw	r18, r24
    279e:	22 0f       	add	r18, r18
    27a0:	33 1f       	adc	r19, r19
    27a2:	88 0f       	add	r24, r24
    27a4:	99 1f       	adc	r25, r25
    27a6:	88 0f       	add	r24, r24
    27a8:	99 1f       	adc	r25, r25
    27aa:	88 0f       	add	r24, r24
    27ac:	99 1f       	adc	r25, r25
    27ae:	82 0f       	add	r24, r18
    27b0:	93 1f       	adc	r25, r19
    27b2:	e8 1b       	sub	r30, r24
    27b4:	f9 0b       	sbc	r31, r25
    27b6:	e0 5d       	subi	r30, 0xD0	; 208
    27b8:	e8 83       	st	Y, r30
		break;
    27ba:	93 c1       	rjmp	.+806    	; 0x2ae2 <numPrinter+0x386>

		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
    27bc:	ec 01       	movw	r28, r24
    27be:	c6 0f       	add	r28, r22
    27c0:	d1 1d       	adc	r29, r1
    27c2:	ad ec       	ldi	r26, 0xCD	; 205
    27c4:	bc ec       	ldi	r27, 0xCC	; 204
    27c6:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    27ca:	96 95       	lsr	r25
    27cc:	87 95       	ror	r24
    27ce:	96 95       	lsr	r25
    27d0:	87 95       	ror	r24
    27d2:	96 95       	lsr	r25
    27d4:	87 95       	ror	r24
    27d6:	9c 01       	movw	r18, r24
    27d8:	22 0f       	add	r18, r18
    27da:	33 1f       	adc	r19, r19
    27dc:	88 0f       	add	r24, r24
    27de:	99 1f       	adc	r25, r25
    27e0:	88 0f       	add	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	88 0f       	add	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	82 0f       	add	r24, r18
    27ea:	93 1f       	adc	r25, r19
    27ec:	9f 01       	movw	r18, r30
    27ee:	28 1b       	sub	r18, r24
    27f0:	39 0b       	sbc	r19, r25
    27f2:	c9 01       	movw	r24, r18
    27f4:	80 5d       	subi	r24, 0xD0	; 208
    27f6:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
    27f8:	9f 01       	movw	r18, r30
    27fa:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    27fe:	96 95       	lsr	r25
    2800:	87 95       	ror	r24
    2802:	96 95       	lsr	r25
    2804:	87 95       	ror	r24
    2806:	96 95       	lsr	r25
    2808:	87 95       	ror	r24
    280a:	80 5d       	subi	r24, 0xD0	; 208
    280c:	88 83       	st	Y, r24
		break;
    280e:	69 c1       	rjmp	.+722    	; 0x2ae2 <numPrinter+0x386>

		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
    2810:	ec 01       	movw	r28, r24
    2812:	c6 0f       	add	r28, r22
    2814:	d1 1d       	adc	r29, r1
    2816:	ad ec       	ldi	r26, 0xCD	; 205
    2818:	bc ec       	ldi	r27, 0xCC	; 204
    281a:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    281e:	96 95       	lsr	r25
    2820:	87 95       	ror	r24
    2822:	96 95       	lsr	r25
    2824:	87 95       	ror	r24
    2826:	96 95       	lsr	r25
    2828:	87 95       	ror	r24
    282a:	9c 01       	movw	r18, r24
    282c:	22 0f       	add	r18, r18
    282e:	33 1f       	adc	r19, r19
    2830:	88 0f       	add	r24, r24
    2832:	99 1f       	adc	r25, r25
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	82 0f       	add	r24, r18
    283e:	93 1f       	adc	r25, r19
    2840:	9f 01       	movw	r18, r30
    2842:	28 1b       	sub	r18, r24
    2844:	39 0b       	sbc	r19, r25
    2846:	c9 01       	movw	r24, r18
    2848:	80 5d       	subi	r24, 0xD0	; 208
    284a:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = tensPlace;
    284c:	af 01       	movw	r20, r30
    284e:	56 95       	lsr	r21
    2850:	47 95       	ror	r20
    2852:	56 95       	lsr	r21
    2854:	47 95       	ror	r20
    2856:	9a 01       	movw	r18, r20
    2858:	ab e7       	ldi	r26, 0x7B	; 123
    285a:	b4 e1       	ldi	r27, 0x14	; 20
    285c:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    2860:	96 95       	lsr	r25
    2862:	87 95       	ror	r24
    2864:	64 e6       	ldi	r22, 0x64	; 100
    2866:	68 9f       	mul	r22, r24
    2868:	90 01       	movw	r18, r0
    286a:	69 9f       	mul	r22, r25
    286c:	30 0d       	add	r19, r0
    286e:	11 24       	eor	r1, r1
    2870:	cf 01       	movw	r24, r30
    2872:	82 1b       	sub	r24, r18
    2874:	93 0b       	sbc	r25, r19
    2876:	9c 01       	movw	r18, r24
    2878:	ad ec       	ldi	r26, 0xCD	; 205
    287a:	bc ec       	ldi	r27, 0xCC	; 204
    287c:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    2880:	96 95       	lsr	r25
    2882:	87 95       	ror	r24
    2884:	96 95       	lsr	r25
    2886:	87 95       	ror	r24
    2888:	96 95       	lsr	r25
    288a:	87 95       	ror	r24
    288c:	80 5d       	subi	r24, 0xD0	; 208
    288e:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
    2890:	9a 01       	movw	r18, r20
    2892:	ab e7       	ldi	r26, 0x7B	; 123
    2894:	b4 e1       	ldi	r27, 0x14	; 20
    2896:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    289a:	96 95       	lsr	r25
    289c:	87 95       	ror	r24
    289e:	80 5d       	subi	r24, 0xD0	; 208
    28a0:	88 83       	st	Y, r24
		break;
    28a2:	1f c1       	rjmp	.+574    	; 0x2ae2 <numPrinter+0x386>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
    28a4:	ec 01       	movw	r28, r24
    28a6:	c6 0f       	add	r28, r22
    28a8:	d1 1d       	adc	r29, r1
    28aa:	ad ec       	ldi	r26, 0xCD	; 205
    28ac:	bc ec       	ldi	r27, 0xCC	; 204
    28ae:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    28b2:	96 95       	lsr	r25
    28b4:	87 95       	ror	r24
    28b6:	96 95       	lsr	r25
    28b8:	87 95       	ror	r24
    28ba:	96 95       	lsr	r25
    28bc:	87 95       	ror	r24
    28be:	9c 01       	movw	r18, r24
    28c0:	22 0f       	add	r18, r18
    28c2:	33 1f       	adc	r19, r19
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	88 0f       	add	r24, r24
    28ce:	99 1f       	adc	r25, r25
    28d0:	82 0f       	add	r24, r18
    28d2:	93 1f       	adc	r25, r19
    28d4:	9f 01       	movw	r18, r30
    28d6:	28 1b       	sub	r18, r24
    28d8:	39 0b       	sbc	r19, r25
    28da:	c9 01       	movw	r24, r18
    28dc:	80 5d       	subi	r24, 0xD0	; 208
    28de:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
    28e0:	9f 01       	movw	r18, r30
    28e2:	36 95       	lsr	r19
    28e4:	27 95       	ror	r18
    28e6:	36 95       	lsr	r19
    28e8:	27 95       	ror	r18
    28ea:	ab e7       	ldi	r26, 0x7B	; 123
    28ec:	b4 e1       	ldi	r27, 0x14	; 20
    28ee:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    28f2:	96 95       	lsr	r25
    28f4:	87 95       	ror	r24
    28f6:	44 e6       	ldi	r20, 0x64	; 100
    28f8:	48 9f       	mul	r20, r24
    28fa:	90 01       	movw	r18, r0
    28fc:	49 9f       	mul	r20, r25
    28fe:	30 0d       	add	r19, r0
    2900:	11 24       	eor	r1, r1
    2902:	cf 01       	movw	r24, r30
    2904:	82 1b       	sub	r24, r18
    2906:	93 0b       	sbc	r25, r19
    2908:	9c 01       	movw	r18, r24
    290a:	ad ec       	ldi	r26, 0xCD	; 205
    290c:	bc ec       	ldi	r27, 0xCC	; 204
    290e:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    2912:	96 95       	lsr	r25
    2914:	87 95       	ror	r24
    2916:	96 95       	lsr	r25
    2918:	87 95       	ror	r24
    291a:	96 95       	lsr	r25
    291c:	87 95       	ror	r24
    291e:	80 5d       	subi	r24, 0xD0	; 208
    2920:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = hunderedsPlace;
    2922:	af 01       	movw	r20, r30
    2924:	56 95       	lsr	r21
    2926:	47 95       	ror	r20
    2928:	56 95       	lsr	r21
    292a:	47 95       	ror	r20
    292c:	56 95       	lsr	r21
    292e:	47 95       	ror	r20
    2930:	9a 01       	movw	r18, r20
    2932:	a5 ec       	ldi	r26, 0xC5	; 197
    2934:	b0 e2       	ldi	r27, 0x20	; 32
    2936:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    293a:	92 95       	swap	r25
    293c:	82 95       	swap	r24
    293e:	8f 70       	andi	r24, 0x0F	; 15
    2940:	89 27       	eor	r24, r25
    2942:	9f 70       	andi	r25, 0x0F	; 15
    2944:	89 27       	eor	r24, r25
    2946:	68 ee       	ldi	r22, 0xE8	; 232
    2948:	73 e0       	ldi	r23, 0x03	; 3
    294a:	86 9f       	mul	r24, r22
    294c:	90 01       	movw	r18, r0
    294e:	87 9f       	mul	r24, r23
    2950:	30 0d       	add	r19, r0
    2952:	96 9f       	mul	r25, r22
    2954:	30 0d       	add	r19, r0
    2956:	11 24       	eor	r1, r1
    2958:	cf 01       	movw	r24, r30
    295a:	82 1b       	sub	r24, r18
    295c:	93 0b       	sbc	r25, r19
    295e:	9c 01       	movw	r18, r24
    2960:	36 95       	lsr	r19
    2962:	27 95       	ror	r18
    2964:	36 95       	lsr	r19
    2966:	27 95       	ror	r18
    2968:	ab e7       	ldi	r26, 0x7B	; 123
    296a:	b4 e1       	ldi	r27, 0x14	; 20
    296c:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    2970:	96 95       	lsr	r25
    2972:	87 95       	ror	r24
    2974:	80 5d       	subi	r24, 0xD0	; 208
    2976:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
    2978:	9a 01       	movw	r18, r20
    297a:	a5 ec       	ldi	r26, 0xC5	; 197
    297c:	b0 e2       	ldi	r27, 0x20	; 32
    297e:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    2982:	92 95       	swap	r25
    2984:	82 95       	swap	r24
    2986:	8f 70       	andi	r24, 0x0F	; 15
    2988:	89 27       	eor	r24, r25
    298a:	9f 70       	andi	r25, 0x0F	; 15
    298c:	89 27       	eor	r24, r25
    298e:	80 5d       	subi	r24, 0xD0	; 208
    2990:	88 83       	st	Y, r24
		break;
    2992:	a7 c0       	rjmp	.+334    	; 0x2ae2 <numPrinter+0x386>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
    2994:	ec 01       	movw	r28, r24
    2996:	c6 0f       	add	r28, r22
    2998:	d1 1d       	adc	r29, r1
    299a:	ad ec       	ldi	r26, 0xCD	; 205
    299c:	bc ec       	ldi	r27, 0xCC	; 204
    299e:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    29a2:	96 95       	lsr	r25
    29a4:	87 95       	ror	r24
    29a6:	96 95       	lsr	r25
    29a8:	87 95       	ror	r24
    29aa:	96 95       	lsr	r25
    29ac:	87 95       	ror	r24
    29ae:	9c 01       	movw	r18, r24
    29b0:	22 0f       	add	r18, r18
    29b2:	33 1f       	adc	r19, r19
    29b4:	88 0f       	add	r24, r24
    29b6:	99 1f       	adc	r25, r25
    29b8:	88 0f       	add	r24, r24
    29ba:	99 1f       	adc	r25, r25
    29bc:	88 0f       	add	r24, r24
    29be:	99 1f       	adc	r25, r25
    29c0:	82 0f       	add	r24, r18
    29c2:	93 1f       	adc	r25, r19
    29c4:	9f 01       	movw	r18, r30
    29c6:	28 1b       	sub	r18, r24
    29c8:	39 0b       	sbc	r19, r25
    29ca:	c9 01       	movw	r24, r18
    29cc:	80 5d       	subi	r24, 0xD0	; 208
    29ce:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
    29d0:	9f 01       	movw	r18, r30
    29d2:	36 95       	lsr	r19
    29d4:	27 95       	ror	r18
    29d6:	36 95       	lsr	r19
    29d8:	27 95       	ror	r18
    29da:	ab e7       	ldi	r26, 0x7B	; 123
    29dc:	b4 e1       	ldi	r27, 0x14	; 20
    29de:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    29e2:	96 95       	lsr	r25
    29e4:	87 95       	ror	r24
    29e6:	44 e6       	ldi	r20, 0x64	; 100
    29e8:	48 9f       	mul	r20, r24
    29ea:	90 01       	movw	r18, r0
    29ec:	49 9f       	mul	r20, r25
    29ee:	30 0d       	add	r19, r0
    29f0:	11 24       	eor	r1, r1
    29f2:	cf 01       	movw	r24, r30
    29f4:	82 1b       	sub	r24, r18
    29f6:	93 0b       	sbc	r25, r19
    29f8:	9c 01       	movw	r18, r24
    29fa:	ad ec       	ldi	r26, 0xCD	; 205
    29fc:	bc ec       	ldi	r27, 0xCC	; 204
    29fe:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    2a02:	96 95       	lsr	r25
    2a04:	87 95       	ror	r24
    2a06:	96 95       	lsr	r25
    2a08:	87 95       	ror	r24
    2a0a:	96 95       	lsr	r25
    2a0c:	87 95       	ror	r24
    2a0e:	80 5d       	subi	r24, 0xD0	; 208
    2a10:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
    2a12:	9f 01       	movw	r18, r30
    2a14:	36 95       	lsr	r19
    2a16:	27 95       	ror	r18
    2a18:	36 95       	lsr	r19
    2a1a:	27 95       	ror	r18
    2a1c:	36 95       	lsr	r19
    2a1e:	27 95       	ror	r18
    2a20:	a5 ec       	ldi	r26, 0xC5	; 197
    2a22:	b0 e2       	ldi	r27, 0x20	; 32
    2a24:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    2a28:	92 95       	swap	r25
    2a2a:	82 95       	swap	r24
    2a2c:	8f 70       	andi	r24, 0x0F	; 15
    2a2e:	89 27       	eor	r24, r25
    2a30:	9f 70       	andi	r25, 0x0F	; 15
    2a32:	89 27       	eor	r24, r25
    2a34:	48 ee       	ldi	r20, 0xE8	; 232
    2a36:	53 e0       	ldi	r21, 0x03	; 3
    2a38:	84 9f       	mul	r24, r20
    2a3a:	90 01       	movw	r18, r0
    2a3c:	85 9f       	mul	r24, r21
    2a3e:	30 0d       	add	r19, r0
    2a40:	94 9f       	mul	r25, r20
    2a42:	30 0d       	add	r19, r0
    2a44:	11 24       	eor	r1, r1
    2a46:	cf 01       	movw	r24, r30
    2a48:	82 1b       	sub	r24, r18
    2a4a:	93 0b       	sbc	r25, r19
    2a4c:	9c 01       	movw	r18, r24
    2a4e:	36 95       	lsr	r19
    2a50:	27 95       	ror	r18
    2a52:	36 95       	lsr	r19
    2a54:	27 95       	ror	r18
    2a56:	ab e7       	ldi	r26, 0x7B	; 123
    2a58:	b4 e1       	ldi	r27, 0x14	; 20
    2a5a:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    2a5e:	96 95       	lsr	r25
    2a60:	87 95       	ror	r24
    2a62:	80 5d       	subi	r24, 0xD0	; 208
    2a64:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
    2a66:	af 01       	movw	r20, r30
    2a68:	52 95       	swap	r21
    2a6a:	42 95       	swap	r20
    2a6c:	4f 70       	andi	r20, 0x0F	; 15
    2a6e:	45 27       	eor	r20, r21
    2a70:	5f 70       	andi	r21, 0x0F	; 15
    2a72:	45 27       	eor	r20, r21
    2a74:	9a 01       	movw	r18, r20
    2a76:	a7 e4       	ldi	r26, 0x47	; 71
    2a78:	b3 e0       	ldi	r27, 0x03	; 3
    2a7a:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    2a7e:	96 95       	lsr	r25
    2a80:	87 95       	ror	r24
    2a82:	96 95       	lsr	r25
    2a84:	87 95       	ror	r24
    2a86:	96 95       	lsr	r25
    2a88:	87 95       	ror	r24
    2a8a:	60 e1       	ldi	r22, 0x10	; 16
    2a8c:	77 e2       	ldi	r23, 0x27	; 39
    2a8e:	86 9f       	mul	r24, r22
    2a90:	90 01       	movw	r18, r0
    2a92:	87 9f       	mul	r24, r23
    2a94:	30 0d       	add	r19, r0
    2a96:	96 9f       	mul	r25, r22
    2a98:	30 0d       	add	r19, r0
    2a9a:	11 24       	eor	r1, r1
    2a9c:	cf 01       	movw	r24, r30
    2a9e:	82 1b       	sub	r24, r18
    2aa0:	93 0b       	sbc	r25, r19
    2aa2:	9c 01       	movw	r18, r24
    2aa4:	36 95       	lsr	r19
    2aa6:	27 95       	ror	r18
    2aa8:	36 95       	lsr	r19
    2aaa:	27 95       	ror	r18
    2aac:	36 95       	lsr	r19
    2aae:	27 95       	ror	r18
    2ab0:	a5 ec       	ldi	r26, 0xC5	; 197
    2ab2:	b0 e2       	ldi	r27, 0x20	; 32
    2ab4:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    2ab8:	92 95       	swap	r25
    2aba:	82 95       	swap	r24
    2abc:	8f 70       	andi	r24, 0x0F	; 15
    2abe:	89 27       	eor	r24, r25
    2ac0:	9f 70       	andi	r25, 0x0F	; 15
    2ac2:	89 27       	eor	r24, r25
    2ac4:	80 5d       	subi	r24, 0xD0	; 208
    2ac6:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
    2ac8:	9a 01       	movw	r18, r20
    2aca:	a7 e4       	ldi	r26, 0x47	; 71
    2acc:	b3 e0       	ldi	r27, 0x03	; 3
    2ace:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__umulhisi3>
    2ad2:	96 95       	lsr	r25
    2ad4:	87 95       	ror	r24
    2ad6:	96 95       	lsr	r25
    2ad8:	87 95       	ror	r24
    2ada:	96 95       	lsr	r25
    2adc:	87 95       	ror	r24
    2ade:	80 5d       	subi	r24, 0xD0	; 208
    2ae0:	88 83       	st	Y, r24
		break;

	}


}
    2ae2:	df 91       	pop	r29
    2ae4:	cf 91       	pop	r28
    2ae6:	08 95       	ret

00002ae8 <midiNotePrinter>:

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
    2ae8:	9c 01       	movw	r18, r24
    2aea:	a6 2f       	mov	r26, r22
	char printSharp = 0;
	uint8_t valueSwitch = 0;
	//numbers will always go from B to C, and have 12 distinct values. 
	//we can get our number from this with division. 
	//midi note C0 starts at 12. So, we'll need to do some math there. 
	printNumber = (noteNumber/12)+47; 
    2aec:	eb ea       	ldi	r30, 0xAB	; 171
    2aee:	4e 9f       	mul	r20, r30
    2af0:	e1 2d       	mov	r30, r1
    2af2:	11 24       	eor	r1, r1
    2af4:	e6 95       	lsr	r30
    2af6:	e6 95       	lsr	r30
    2af8:	e6 95       	lsr	r30
    2afa:	9f e2       	ldi	r25, 0x2F	; 47
    2afc:	9e 0f       	add	r25, r30
	
	//theres a weird wrap around with note numbers here. Since there isn't really an easy math patern we can take advantage of. 
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
    2afe:	8e 2f       	mov	r24, r30
    2b00:	88 0f       	add	r24, r24
    2b02:	e8 0f       	add	r30, r24
    2b04:	ee 0f       	add	r30, r30
    2b06:	ee 0f       	add	r30, r30
    2b08:	4e 1b       	sub	r20, r30
    2b0a:	50 e0       	ldi	r21, 0x00	; 0
    2b0c:	4c 30       	cpi	r20, 0x0C	; 12
    2b0e:	51 05       	cpc	r21, r1
    2b10:	58 f5       	brcc	.+86     	; 0x2b68 <midiNotePrinter+0x80>
    2b12:	fa 01       	movw	r30, r20
    2b14:	88 27       	eor	r24, r24
    2b16:	e8 51       	subi	r30, 0x18	; 24
    2b18:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b1c:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <__tablejump2__>
	{
		
		case 0:
		printLetter = 'C';
		printSharp = ' ';
    2b20:	80 e2       	ldi	r24, 0x20	; 32
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
	{
		
		case 0:
		printLetter = 'C';
    2b22:	43 e4       	ldi	r20, 0x43	; 67
    2b24:	23 c0       	rjmp	.+70     	; 0x2b6c <midiNotePrinter+0x84>
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
		printSharp = '#';
    2b26:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'C';
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
    2b28:	43 e4       	ldi	r20, 0x43	; 67
		printSharp = '#';
		break;
    2b2a:	20 c0       	rjmp	.+64     	; 0x2b6c <midiNotePrinter+0x84>
		
		case 2:
		printLetter = 'D';
		printSharp = ' ';
    2b2c:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'C';
		printSharp = '#';
		break;
		
		case 2:
		printLetter = 'D';
    2b2e:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = ' ';
		break;
    2b30:	1d c0       	rjmp	.+58     	; 0x2b6c <midiNotePrinter+0x84>
		
		case 3:
		printLetter = 'D';
		printSharp = '#';
    2b32:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'D';
		printSharp = ' ';
		break;
		
		case 3:
		printLetter = 'D';
    2b34:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = '#';
		break;
    2b36:	1a c0       	rjmp	.+52     	; 0x2b6c <midiNotePrinter+0x84>
		
		case 4:
		printLetter = 'E';
		printSharp = ' ';
    2b38:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'D';
		printSharp = '#';
		break;
		
		case 4:
		printLetter = 'E';
    2b3a:	45 e4       	ldi	r20, 0x45	; 69
		printSharp = ' ';
		break;
    2b3c:	17 c0       	rjmp	.+46     	; 0x2b6c <midiNotePrinter+0x84>
		
		case 5:
		printLetter = 'F';
		printSharp = ' ';
    2b3e:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'E';
		printSharp = ' ';
		break;
		
		case 5:
		printLetter = 'F';
    2b40:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = ' ';
		break;
    2b42:	14 c0       	rjmp	.+40     	; 0x2b6c <midiNotePrinter+0x84>
		
		case 6:
		printLetter = 'F';
		printSharp = '#';
    2b44:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'F';
		printSharp = ' ';
		break;
		
		case 6:
		printLetter = 'F';
    2b46:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = '#';
		break;
    2b48:	11 c0       	rjmp	.+34     	; 0x2b6c <midiNotePrinter+0x84>
		
		case 7:
		printLetter = 'G';
		printSharp = ' ';
    2b4a:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'F';
		printSharp = '#';
		break;
		
		case 7:
		printLetter = 'G';
    2b4c:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = ' ';
		break;
    2b4e:	0e c0       	rjmp	.+28     	; 0x2b6c <midiNotePrinter+0x84>
		
		case 8:
		printLetter = 'G';
		printSharp = '#';
    2b50:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'G';
		printSharp = ' ';
		break;
		
		case 8:
		printLetter = 'G';
    2b52:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = '#';
		break;
    2b54:	0b c0       	rjmp	.+22     	; 0x2b6c <midiNotePrinter+0x84>
		
		case 9:
		printLetter = 'A';
		printSharp = ' ';
    2b56:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'G';
		printSharp = '#';
		break;
		
		case 9:
		printLetter = 'A';
    2b58:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = ' ';
		break;
    2b5a:	08 c0       	rjmp	.+16     	; 0x2b6c <midiNotePrinter+0x84>
		
		case 10:
		printLetter = 'A';
		printSharp = '#';
    2b5c:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'A';
		printSharp = ' ';
		break;
		
		case 10:
		printLetter = 'A';
    2b5e:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = '#';
		break;
    2b60:	05 c0       	rjmp	.+10     	; 0x2b6c <midiNotePrinter+0x84>
		
		case 11:
		printLetter = 'B';
		printSharp = ' ';
    2b62:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'A';
		printSharp = '#';
		break;
		
		case 11:
		printLetter = 'B';
    2b64:	42 e4       	ldi	r20, 0x42	; 66
		printSharp = ' ';
		break;
    2b66:	02 c0       	rjmp	.+4      	; 0x2b6c <midiNotePrinter+0x84>
void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
	char printNumber = 0;
	char printSharp = 0;
    2b68:	80 e0       	ldi	r24, 0x00	; 0
}

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
		printLetter = 'B';
		printSharp = ' ';
		break;
		
	}
	charArray[startingPosition] = printLetter;
    2b6c:	f9 01       	movw	r30, r18
    2b6e:	ea 0f       	add	r30, r26
    2b70:	f1 1d       	adc	r31, r1
    2b72:	40 83       	st	Z, r20
	charArray[startingPosition+1]= printSharp;
    2b74:	81 83       	std	Z+1, r24	; 0x01
	charArray[startingPosition+2]= printNumber;
    2b76:	92 83       	std	Z+2, r25	; 0x02
    2b78:	08 95       	ret

00002b7a <updateSequencer>:
//	clockCounter++;
	//we don't want to do anything else here.
//}

void updateSequencer(Pattern sequencerPattern, Globals *currentGlobals)
{
    2b7a:	af 92       	push	r10
    2b7c:	bf 92       	push	r11
    2b7e:	cf 92       	push	r12
    2b80:	df 92       	push	r13
    2b82:	ef 92       	push	r14
    2b84:	ff 92       	push	r15
    2b86:	0f 93       	push	r16
    2b88:	1f 93       	push	r17
    2b8a:	cf 93       	push	r28
    2b8c:	df 93       	push	r29
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	c7 57       	subi	r28, 0x77	; 119
    2b94:	de 4f       	sbci	r29, 0xFE	; 254
    2b96:	c8 80       	ld	r12, Y
    2b98:	d9 80       	ldd	r13, Y+1	; 0x01
    2b9a:	c9 58       	subi	r28, 0x89	; 137
    2b9c:	d1 40       	sbci	r29, 0x01	; 1
	uint16_t BPMvar = 150000/(sequencerPattern.patternBPM);

	if(currentGlobals->clockCounter>=BPMvar && currentGlobals->playState) //if playstate is on, play next note in sequence.
    2b9e:	ca 52       	subi	r28, 0x2A	; 42
    2ba0:	df 4f       	sbci	r29, 0xFF	; 255
    2ba2:	28 81       	ld	r18, Y
    2ba4:	39 81       	ldd	r19, Y+1	; 0x01
    2ba6:	c6 5d       	subi	r28, 0xD6	; 214
    2ba8:	d0 40       	sbci	r29, 0x00	; 0
    2baa:	40 e0       	ldi	r20, 0x00	; 0
    2bac:	50 e0       	ldi	r21, 0x00	; 0
    2bae:	60 ef       	ldi	r22, 0xF0	; 240
    2bb0:	79 e4       	ldi	r23, 0x49	; 73
    2bb2:	82 e0       	ldi	r24, 0x02	; 2
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <__divmodsi4>
    2bba:	f6 01       	movw	r30, r12
    2bbc:	e5 51       	subi	r30, 0x15	; 21
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	80 81       	ld	r24, Z
    2bc2:	91 81       	ldd	r25, Z+1	; 0x01
    2bc4:	82 17       	cp	r24, r18
    2bc6:	93 07       	cpc	r25, r19
    2bc8:	08 f4       	brcc	.+2      	; 0x2bcc <updateSequencer+0x52>
    2bca:	5a c0       	rjmp	.+180    	; 0x2c80 <updateSequencer+0x106>
    2bcc:	f6 01       	movw	r30, r12
    2bce:	83 85       	ldd	r24, Z+11	; 0x0b
    2bd0:	88 23       	and	r24, r24
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <updateSequencer+0x5c>
    2bd4:	4b c0       	rjmp	.+150    	; 0x2c6c <updateSequencer+0xf2>
	{
		//this will be where we play samples
		currentGlobals->clockCounter = 0;
    2bd6:	e5 51       	subi	r30, 0x15	; 21
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	11 82       	std	Z+1, r1	; 0x01
    2bdc:	10 82       	st	Z, r1
		currentGlobals->currentTrigSequencer = 0; //we want to re-set this every time. 
    2bde:	f6 01       	movw	r30, r12
    2be0:	14 82       	std	Z+4, r1	; 0x04
    2be2:	13 82       	std	Z+3, r1	; 0x03
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
    2be4:	e0 91 f4 03 	lds	r30, 0x03F4	; 0x8003f4 <currentPlayStep>
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	ee 0f       	add	r30, r30
    2bec:	ff 1f       	adc	r31, r31
    2bee:	8e e0       	ldi	r24, 0x0E	; 14
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	8c 0f       	add	r24, r28
    2bf4:	9d 1f       	adc	r25, r29
    2bf6:	e8 0f       	add	r30, r24
    2bf8:	f9 1f       	adc	r31, r25
    2bfa:	e5 50       	subi	r30, 0x05	; 5
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	e0 80       	ld	r14, Z
    2c00:	f1 80       	ldd	r15, Z+1	; 0x01
    2c02:	00 e0       	ldi	r16, 0x00	; 0
    2c04:	10 e0       	ldi	r17, 0x00	; 0
		{//we're going to loop through all of the possible tracks, and trigger them
			if((parseStep&1)==1)
			{
				//trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
				playTrack(&sequencerPattern, currentGlobals, sc);
				currentGlobals->currentTrigSequencer |= (1<<sc); //start to fill our lighting buffer. 
    2c06:	aa 24       	eor	r10, r10
    2c08:	a3 94       	inc	r10
    2c0a:	b1 2c       	mov	r11, r1
		currentGlobals->clockCounter = 0;
		currentGlobals->currentTrigSequencer = 0; //we want to re-set this every time. 
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
		{//we're going to loop through all of the possible tracks, and trigger them
			if((parseStep&1)==1)
    2c0c:	e0 fe       	sbrs	r14, 0
    2c0e:	13 c0       	rjmp	.+38     	; 0x2c36 <updateSequencer+0xbc>
			{
				//trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
				playTrack(&sequencerPattern, currentGlobals, sc);
    2c10:	40 2f       	mov	r20, r16
    2c12:	b6 01       	movw	r22, r12
    2c14:	ce 01       	movw	r24, r28
    2c16:	0e 96       	adiw	r24, 0x0e	; 14
    2c18:	7d d1       	rcall	.+762    	; 0x2f14 <playTrack>
				currentGlobals->currentTrigSequencer |= (1<<sc); //start to fill our lighting buffer. 
    2c1a:	f6 01       	movw	r30, r12
    2c1c:	23 81       	ldd	r18, Z+3	; 0x03
    2c1e:	34 81       	ldd	r19, Z+4	; 0x04
    2c20:	c5 01       	movw	r24, r10
    2c22:	00 2e       	mov	r0, r16
    2c24:	02 c0       	rjmp	.+4      	; 0x2c2a <updateSequencer+0xb0>
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	0a 94       	dec	r0
    2c2c:	e2 f7       	brpl	.-8      	; 0x2c26 <updateSequencer+0xac>
    2c2e:	82 2b       	or	r24, r18
    2c30:	93 2b       	or	r25, r19
    2c32:	94 83       	std	Z+4, r25	; 0x04
    2c34:	83 83       	std	Z+3, r24	; 0x03
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
    2c36:	f6 94       	lsr	r15
    2c38:	e7 94       	ror	r14
    2c3a:	0f 5f       	subi	r16, 0xFF	; 255
    2c3c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		//this will be where we play samples
		currentGlobals->clockCounter = 0;
		currentGlobals->currentTrigSequencer = 0; //we want to re-set this every time. 
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
    2c3e:	00 31       	cpi	r16, 0x10	; 16
    2c40:	11 05       	cpc	r17, r1
    2c42:	21 f7       	brne	.-56     	; 0x2c0c <updateSequencer+0x92>
				playTrack(&sequencerPattern, currentGlobals, sc);
				currentGlobals->currentTrigSequencer |= (1<<sc); //start to fill our lighting buffer. 
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
		}
		currentPlayStep = currentPlayStep+1;
    2c44:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <currentPlayStep>
    2c48:	8f 5f       	subi	r24, 0xFF	; 255
    2c4a:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <currentPlayStep>
		if(currentPlayStep>(sequencerPattern.numSteps-1))
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	c8 52       	subi	r28, 0x28	; 40
    2c52:	df 4f       	sbci	r29, 0xFF	; 255
    2c54:	28 81       	ld	r18, Y
    2c56:	c8 5d       	subi	r28, 0xD8	; 216
    2c58:	d0 40       	sbci	r29, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	21 50       	subi	r18, 0x01	; 1
    2c5e:	31 09       	sbc	r19, r1
    2c60:	28 17       	cp	r18, r24
    2c62:	39 07       	cpc	r19, r25
    2c64:	6c f4       	brge	.+26     	; 0x2c80 <updateSequencer+0x106>
		{
			currentPlayStep=0; // don't play more steps than are in the sequence.
    2c66:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <currentPlayStep>
    2c6a:	0a c0       	rjmp	.+20     	; 0x2c80 <updateSequencer+0x106>
		}
		
	}else if(currentGlobals->clockCounter>=BPMvar && !currentGlobals->playState)
	{ 
		currentPlayStep=0;
    2c6c:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <currentPlayStep>
		currentGlobals->clockCounter = 0;
    2c70:	f6 01       	movw	r30, r12
    2c72:	e5 51       	subi	r30, 0x15	; 21
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	11 82       	std	Z+1, r1	; 0x01
    2c78:	10 82       	st	Z, r1
		currentGlobals->currentTrigSequencer=0;
    2c7a:	f6 01       	movw	r30, r12
    2c7c:	14 82       	std	Z+4, r1	; 0x04
    2c7e:	13 82       	std	Z+3, r1	; 0x03
	}
	
}
    2c80:	df 91       	pop	r29
    2c82:	cf 91       	pop	r28
    2c84:	1f 91       	pop	r17
    2c86:	0f 91       	pop	r16
    2c88:	ff 90       	pop	r15
    2c8a:	ef 90       	pop	r14
    2c8c:	df 90       	pop	r13
    2c8e:	cf 90       	pop	r12
    2c90:	bf 90       	pop	r11
    2c92:	af 90       	pop	r10
    2c94:	08 95       	ret

00002c96 <__vector_27>:
char serial0Buffer[TX_BUFFER_SIZE];
int serialReadPos = 0;
int serialWritePos = 0;

ISR (USART0_TX_vect)
{
    2c96:	1f 92       	push	r1
    2c98:	0f 92       	push	r0
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	0f 92       	push	r0
    2c9e:	11 24       	eor	r1, r1
    2ca0:	0b b6       	in	r0, 0x3b	; 59
    2ca2:	0f 92       	push	r0
    2ca4:	2f 93       	push	r18
    2ca6:	3f 93       	push	r19
    2ca8:	8f 93       	push	r24
    2caa:	9f 93       	push	r25
    2cac:	ef 93       	push	r30
    2cae:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
    2cb0:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <serialReadPos>
    2cb4:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <serialReadPos+0x1>
    2cb8:	20 91 f5 03 	lds	r18, 0x03F5	; 0x8003f5 <serialWritePos>
    2cbc:	30 91 f6 03 	lds	r19, 0x03F6	; 0x8003f6 <serialWritePos+0x1>
    2cc0:	82 17       	cp	r24, r18
    2cc2:	93 07       	cpc	r25, r19
    2cc4:	c1 f0       	breq	.+48     	; 0x2cf6 <__vector_27+0x60>
	{
		UDR0 = serial0Buffer[serialReadPos];
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	e7 57       	subi	r30, 0x77	; 119
    2cca:	f9 4f       	sbci	r31, 0xF9	; 249
    2ccc:	80 81       	ld	r24, Z
    2cce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
    2cd2:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <serialReadPos>
    2cd6:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <serialReadPos+0x1>
    2cda:	01 96       	adiw	r24, 0x01	; 1

		if(serialReadPos >= TX_BUFFER_SIZE)
    2cdc:	80 38       	cpi	r24, 0x80	; 128
    2cde:	21 e0       	ldi	r18, 0x01	; 1
    2ce0:	92 07       	cpc	r25, r18
    2ce2:	2c f4       	brge	.+10     	; 0x2cee <__vector_27+0x58>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
    2ce4:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <serialReadPos+0x1>
    2ce8:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <serialReadPos>
    2cec:	04 c0       	rjmp	.+8      	; 0x2cf6 <__vector_27+0x60>

		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
    2cee:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <serialReadPos+0x1>
    2cf2:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <serialReadPos>
		}
	}
}
    2cf6:	ff 91       	pop	r31
    2cf8:	ef 91       	pop	r30
    2cfa:	9f 91       	pop	r25
    2cfc:	8f 91       	pop	r24
    2cfe:	3f 91       	pop	r19
    2d00:	2f 91       	pop	r18
    2d02:	0f 90       	pop	r0
    2d04:	0b be       	out	0x3b, r0	; 59
    2d06:	0f 90       	pop	r0
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	0f 90       	pop	r0
    2d0c:	1f 90       	pop	r1
    2d0e:	18 95       	reti

00002d10 <appendSerial0>:

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
    2d10:	20 91 f5 03 	lds	r18, 0x03F5	; 0x8003f5 <serialWritePos>
    2d14:	30 91 f6 03 	lds	r19, 0x03F6	; 0x8003f6 <serialWritePos+0x1>
    2d18:	f9 01       	movw	r30, r18
    2d1a:	e7 57       	subi	r30, 0x77	; 119
    2d1c:	f9 4f       	sbci	r31, 0xF9	; 249
    2d1e:	80 83       	st	Z, r24
	serialWritePos++;
    2d20:	2f 5f       	subi	r18, 0xFF	; 255
    2d22:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    2d24:	20 38       	cpi	r18, 0x80	; 128
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	38 07       	cpc	r19, r24
    2d2a:	2c f4       	brge	.+10     	; 0x2d36 <appendSerial0+0x26>
}

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    2d2c:	30 93 f6 03 	sts	0x03F6, r19	; 0x8003f6 <serialWritePos+0x1>
    2d30:	20 93 f5 03 	sts	0x03F5, r18	; 0x8003f5 <serialWritePos>
    2d34:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    2d36:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <serialWritePos+0x1>
    2d3a:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <serialWritePos>
    2d3e:	08 95       	ret

00002d40 <serialWrite0>:
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
    2d40:	0f 93       	push	r16
    2d42:	1f 93       	push	r17
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2d48:	66 23       	and	r22, r22
    2d4a:	69 f0       	breq	.+26     	; 0x2d66 <serialWrite0+0x26>
    2d4c:	ec 01       	movw	r28, r24
    2d4e:	61 50       	subi	r22, 0x01	; 1
    2d50:	06 2f       	mov	r16, r22
    2d52:	10 e0       	ldi	r17, 0x00	; 0
    2d54:	0f 5f       	subi	r16, 0xFF	; 255
    2d56:	1f 4f       	sbci	r17, 0xFF	; 255
    2d58:	08 0f       	add	r16, r24
    2d5a:	19 1f       	adc	r17, r25
	{
		appendSerial0(c[i]);
    2d5c:	89 91       	ld	r24, Y+
    2d5e:	d8 df       	rcall	.-80     	; 0x2d10 <appendSerial0>
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2d60:	c0 17       	cp	r28, r16
    2d62:	d1 07       	cpc	r29, r17
    2d64:	d9 f7       	brne	.-10     	; 0x2d5c <serialWrite0+0x1c>
	{
		appendSerial0(c[i]);

	}

	if(UCSR0A & (1 << UDRE0))
    2d66:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2d6a:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    2d6c:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    2d70:	df 91       	pop	r29
    2d72:	cf 91       	pop	r28
    2d74:	1f 91       	pop	r17
    2d76:	0f 91       	pop	r16
    2d78:	08 95       	ret

00002d7a <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    2d7a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    2d7e:	80 e1       	ldi	r24, 0x10	; 16
    2d80:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>


UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    2d84:	88 e4       	ldi	r24, 0x48	; 72
    2d86:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    2d8a:	86 e0       	ldi	r24, 0x06	; 6
    2d8c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    2d90:	08 95       	ret

00002d92 <trackControl>:
		//this should be fine for now though. 
			//set track volume
			setTrackVolume(currentPattern->trackSampleLSB[i], currentPattern->trackSampleMSB[i], currentPattern->trackMainVolumeLSB[i], currentPattern->trackMainVolumeMSB[i]);
	}
	
}
    2d92:	cf 93       	push	r28
    2d94:	df 93       	push	r29
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
    2d9a:	2a 97       	sbiw	r28, 0x0a	; 10
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	f8 94       	cli
    2da0:	de bf       	out	0x3e, r29	; 62
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	cd bf       	out	0x3d, r28	; 61
    2da6:	90 ef       	ldi	r25, 0xF0	; 240
    2da8:	99 83       	std	Y+1, r25	; 0x01
    2daa:	9a ea       	ldi	r25, 0xAA	; 170
    2dac:	9a 83       	std	Y+2, r25	; 0x02
    2dae:	9a e0       	ldi	r25, 0x0A	; 10
    2db0:	9b 83       	std	Y+3, r25	; 0x03
    2db2:	93 e0       	ldi	r25, 0x03	; 3
    2db4:	9c 83       	std	Y+4, r25	; 0x04
    2db6:	2d 83       	std	Y+5, r18	; 0x05
    2db8:	8e 83       	std	Y+6, r24	; 0x06
    2dba:	6f 83       	std	Y+7, r22	; 0x07
    2dbc:	48 87       	std	Y+8, r20	; 0x08
    2dbe:	19 86       	std	Y+9, r1	; 0x09
    2dc0:	85 e5       	ldi	r24, 0x55	; 85
    2dc2:	8a 87       	std	Y+10, r24	; 0x0a
    2dc4:	6a e0       	ldi	r22, 0x0A	; 10
    2dc6:	ce 01       	movw	r24, r28
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	ba df       	rcall	.-140    	; 0x2d40 <serialWrite0>
    2dcc:	2a 96       	adiw	r28, 0x0a	; 10
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd bf       	out	0x3d, r28	; 61
    2dd8:	df 91       	pop	r29
    2dda:	cf 91       	pop	r28
    2ddc:	08 95       	ret

00002dde <setOutputVolume>:
    2dde:	cf 93       	push	r28
    2de0:	df 93       	push	r29
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    2de6:	28 97       	sbiw	r28, 0x08	; 8
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	90 ef       	ldi	r25, 0xF0	; 240
    2df4:	99 83       	std	Y+1, r25	; 0x01
    2df6:	9a ea       	ldi	r25, 0xAA	; 170
    2df8:	9a 83       	std	Y+2, r25	; 0x02
    2dfa:	98 e0       	ldi	r25, 0x08	; 8
    2dfc:	9b 83       	std	Y+3, r25	; 0x03
    2dfe:	95 e0       	ldi	r25, 0x05	; 5
    2e00:	9c 83       	std	Y+4, r25	; 0x04
    2e02:	4d 83       	std	Y+5, r20	; 0x05
    2e04:	8e 83       	std	Y+6, r24	; 0x06
    2e06:	6f 83       	std	Y+7, r22	; 0x07
    2e08:	85 e5       	ldi	r24, 0x55	; 85
    2e0a:	88 87       	std	Y+8, r24	; 0x08
    2e0c:	68 e0       	ldi	r22, 0x08	; 8
    2e0e:	ce 01       	movw	r24, r28
    2e10:	01 96       	adiw	r24, 0x01	; 1
    2e12:	96 df       	rcall	.-212    	; 0x2d40 <serialWrite0>
    2e14:	28 96       	adiw	r28, 0x08	; 8
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	f8 94       	cli
    2e1a:	de bf       	out	0x3e, r29	; 62
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	cd bf       	out	0x3d, r28	; 61
    2e20:	df 91       	pop	r29
    2e22:	cf 91       	pop	r28
    2e24:	08 95       	ret

00002e26 <setTrackVolume>:
    2e26:	cf 93       	push	r28
    2e28:	df 93       	push	r29
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
    2e2e:	29 97       	sbiw	r28, 0x09	; 9
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	90 ef       	ldi	r25, 0xF0	; 240
    2e3c:	99 83       	std	Y+1, r25	; 0x01
    2e3e:	9a ea       	ldi	r25, 0xAA	; 170
    2e40:	9a 83       	std	Y+2, r25	; 0x02
    2e42:	99 e0       	ldi	r25, 0x09	; 9
    2e44:	9b 83       	std	Y+3, r25	; 0x03
    2e46:	98 e0       	ldi	r25, 0x08	; 8
    2e48:	9c 83       	std	Y+4, r25	; 0x04
    2e4a:	8d 83       	std	Y+5, r24	; 0x05
    2e4c:	6e 83       	std	Y+6, r22	; 0x06
    2e4e:	4f 83       	std	Y+7, r20	; 0x07
    2e50:	28 87       	std	Y+8, r18	; 0x08
    2e52:	85 e5       	ldi	r24, 0x55	; 85
    2e54:	89 87       	std	Y+9, r24	; 0x09
    2e56:	69 e0       	ldi	r22, 0x09	; 9
    2e58:	ce 01       	movw	r24, r28
    2e5a:	01 96       	adiw	r24, 0x01	; 1
    2e5c:	71 df       	rcall	.-286    	; 0x2d40 <serialWrite0>
    2e5e:	29 96       	adiw	r28, 0x09	; 9
    2e60:	0f b6       	in	r0, 0x3f	; 63
    2e62:	f8 94       	cli
    2e64:	de bf       	out	0x3e, r29	; 62
    2e66:	0f be       	out	0x3f, r0	; 63
    2e68:	cd bf       	out	0x3d, r28	; 61
    2e6a:	df 91       	pop	r29
    2e6c:	cf 91       	pop	r28
    2e6e:	08 95       	ret

00002e70 <setTrackFade>:
    2e70:	cf 92       	push	r12
    2e72:	ef 92       	push	r14
    2e74:	0f 93       	push	r16
    2e76:	cf 93       	push	r28
    2e78:	df 93       	push	r29
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
    2e7e:	2c 97       	sbiw	r28, 0x0c	; 12
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	de bf       	out	0x3e, r29	; 62
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	cd bf       	out	0x3d, r28	; 61
    2e8a:	90 ef       	ldi	r25, 0xF0	; 240
    2e8c:	99 83       	std	Y+1, r25	; 0x01
    2e8e:	9a ea       	ldi	r25, 0xAA	; 170
    2e90:	9a 83       	std	Y+2, r25	; 0x02
    2e92:	9c e0       	ldi	r25, 0x0C	; 12
    2e94:	9b 83       	std	Y+3, r25	; 0x03
    2e96:	9a e0       	ldi	r25, 0x0A	; 10
    2e98:	9c 83       	std	Y+4, r25	; 0x04
    2e9a:	8d 83       	std	Y+5, r24	; 0x05
    2e9c:	6e 83       	std	Y+6, r22	; 0x06
    2e9e:	4f 83       	std	Y+7, r20	; 0x07
    2ea0:	28 87       	std	Y+8, r18	; 0x08
    2ea2:	09 87       	std	Y+9, r16	; 0x09
    2ea4:	ea 86       	std	Y+10, r14	; 0x0a
    2ea6:	cb 86       	std	Y+11, r12	; 0x0b
    2ea8:	85 e5       	ldi	r24, 0x55	; 85
    2eaa:	8c 87       	std	Y+12, r24	; 0x0c
    2eac:	6c e0       	ldi	r22, 0x0C	; 12
    2eae:	ce 01       	movw	r24, r28
    2eb0:	01 96       	adiw	r24, 0x01	; 1
    2eb2:	46 df       	rcall	.-372    	; 0x2d40 <serialWrite0>
    2eb4:	2c 96       	adiw	r28, 0x0c	; 12
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
    2ec0:	df 91       	pop	r29
    2ec2:	cf 91       	pop	r28
    2ec4:	0f 91       	pop	r16
    2ec6:	ef 90       	pop	r14
    2ec8:	cf 90       	pop	r12
    2eca:	08 95       	ret

00002ecc <outputSampleRate>:
    2ecc:	cf 93       	push	r28
    2ece:	df 93       	push	r29
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
    2ed4:	28 97       	sbiw	r28, 0x08	; 8
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	de bf       	out	0x3e, r29	; 62
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	cd bf       	out	0x3d, r28	; 61
    2ee0:	90 ef       	ldi	r25, 0xF0	; 240
    2ee2:	99 83       	std	Y+1, r25	; 0x01
    2ee4:	9a ea       	ldi	r25, 0xAA	; 170
    2ee6:	9a 83       	std	Y+2, r25	; 0x02
    2ee8:	98 e0       	ldi	r25, 0x08	; 8
    2eea:	9b 83       	std	Y+3, r25	; 0x03
    2eec:	9c e0       	ldi	r25, 0x0C	; 12
    2eee:	9c 83       	std	Y+4, r25	; 0x04
    2ef0:	8d 83       	std	Y+5, r24	; 0x05
    2ef2:	6e 83       	std	Y+6, r22	; 0x06
    2ef4:	4f 83       	std	Y+7, r20	; 0x07
    2ef6:	85 e5       	ldi	r24, 0x55	; 85
    2ef8:	88 87       	std	Y+8, r24	; 0x08
    2efa:	68 e0       	ldi	r22, 0x08	; 8
    2efc:	ce 01       	movw	r24, r28
    2efe:	01 96       	adiw	r24, 0x01	; 1
    2f00:	1f df       	rcall	.-450    	; 0x2d40 <serialWrite0>
    2f02:	28 96       	adiw	r28, 0x08	; 8
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	df 91       	pop	r29
    2f10:	cf 91       	pop	r28
    2f12:	08 95       	ret

00002f14 <playTrack>:
    2f14:	2f 92       	push	r2
    2f16:	3f 92       	push	r3
    2f18:	4f 92       	push	r4
    2f1a:	5f 92       	push	r5
    2f1c:	6f 92       	push	r6
    2f1e:	7f 92       	push	r7
    2f20:	8f 92       	push	r8
    2f22:	9f 92       	push	r9
    2f24:	af 92       	push	r10
    2f26:	bf 92       	push	r11
    2f28:	cf 92       	push	r12
    2f2a:	ef 92       	push	r14
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	cf 93       	push	r28
    2f32:	df 93       	push	r29
    2f34:	00 d0       	rcall	.+0      	; 0x2f36 <playTrack+0x22>
    2f36:	1f 92       	push	r1
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	4b 01       	movw	r8, r22
    2f3e:	14 2f       	mov	r17, r20
    2f40:	a4 2e       	mov	r10, r20
    2f42:	b1 2c       	mov	r11, r1
    2f44:	fc 01       	movw	r30, r24
    2f46:	ea 0d       	add	r30, r10
    2f48:	fb 1d       	adc	r31, r11
    2f4a:	e5 51       	subi	r30, 0x15	; 21
    2f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4e:	20 81       	ld	r18, Z
    2f50:	21 30       	cpi	r18, 0x01	; 1
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <playTrack+0x42>
    2f54:	8c c0       	rjmp	.+280    	; 0x306e <playTrack+0x15a>
    2f56:	38 f0       	brcs	.+14     	; 0x2f66 <playTrack+0x52>
    2f58:	22 30       	cpi	r18, 0x02	; 2
    2f5a:	09 f4       	brne	.+2      	; 0x2f5e <playTrack+0x4a>
    2f5c:	df c0       	rjmp	.+446    	; 0x311c <playTrack+0x208>
    2f5e:	23 30       	cpi	r18, 0x03	; 3
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <playTrack+0x50>
    2f62:	0c c1       	rjmp	.+536    	; 0x317c <playTrack+0x268>
    2f64:	1f c1       	rjmp	.+574    	; 0x31a4 <playTrack+0x290>
    2f66:	9c 01       	movw	r18, r24
    2f68:	2a 0d       	add	r18, r10
    2f6a:	3b 1d       	adc	r19, r11
    2f6c:	3c 83       	std	Y+4, r19	; 0x04
    2f6e:	2b 83       	std	Y+3, r18	; 0x03
    2f70:	f9 01       	movw	r30, r18
    2f72:	e8 57       	subi	r30, 0x78	; 120
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	29 01       	movw	r4, r18
    2f78:	38 e9       	ldi	r19, 0x98	; 152
    2f7a:	43 0e       	add	r4, r19
    2f7c:	51 1c       	adc	r5, r1
    2f7e:	6b 80       	ldd	r6, Y+3	; 0x03
    2f80:	7c 80       	ldd	r7, Y+4	; 0x04
    2f82:	88 ea       	ldi	r24, 0xA8	; 168
    2f84:	68 0e       	add	r6, r24
    2f86:	71 1c       	adc	r7, r1
    2f88:	20 81       	ld	r18, Z
    2f8a:	ab 81       	ldd	r26, Y+3	; 0x03
    2f8c:	bc 81       	ldd	r27, Y+4	; 0x04
    2f8e:	58 96       	adiw	r26, 0x18	; 24
    2f90:	4c 91       	ld	r20, X
    2f92:	f2 01       	movw	r30, r4
    2f94:	60 81       	ld	r22, Z
    2f96:	d3 01       	movw	r26, r6
    2f98:	8c 91       	ld	r24, X
    2f9a:	fb de       	rcall	.-522    	; 0x2d92 <trackControl>
    2f9c:	2b 80       	ldd	r2, Y+3	; 0x03
    2f9e:	3c 80       	ldd	r3, Y+4	; 0x04
    2fa0:	b8 e4       	ldi	r27, 0x48	; 72
    2fa2:	2b 0e       	add	r2, r27
    2fa4:	31 1c       	adc	r3, r1
    2fa6:	eb 81       	ldd	r30, Y+3	; 0x03
    2fa8:	fc 81       	ldd	r31, Y+4	; 0x04
    2faa:	e8 5a       	subi	r30, 0xA8	; 168
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	fa 83       	std	Y+2, r31	; 0x02
    2fb0:	e9 83       	std	Y+1, r30	; 0x01
    2fb2:	c1 2c       	mov	r12, r1
    2fb4:	d1 01       	movw	r26, r2
    2fb6:	ec 90       	ld	r14, X
    2fb8:	00 81       	ld	r16, Z
    2fba:	eb 81       	ldd	r30, Y+3	; 0x03
    2fbc:	fc 81       	ldd	r31, Y+4	; 0x04
    2fbe:	20 a5       	ldd	r18, Z+40	; 0x28
    2fc0:	40 ad       	ldd	r20, Z+56	; 0x38
    2fc2:	d2 01       	movw	r26, r4
    2fc4:	6c 91       	ld	r22, X
    2fc6:	f3 01       	movw	r30, r6
    2fc8:	80 81       	ld	r24, Z
    2fca:	52 df       	rcall	.-348    	; 0x2e70 <setTrackFade>
    2fcc:	f4 01       	movw	r30, r8
    2fce:	e7 55       	subi	r30, 0x57	; 87
    2fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	02 c0       	rjmp	.+4      	; 0x2fdc <playTrack+0xc8>
    2fd8:	88 0f       	add	r24, r24
    2fda:	99 1f       	adc	r25, r25
    2fdc:	1a 95       	dec	r17
    2fde:	e2 f7       	brpl	.-8      	; 0x2fd8 <playTrack+0xc4>
    2fe0:	20 81       	ld	r18, Z
    2fe2:	31 81       	ldd	r19, Z+1	; 0x01
    2fe4:	82 2b       	or	r24, r18
    2fe6:	93 2b       	or	r25, r19
    2fe8:	91 83       	std	Z+1, r25	; 0x01
    2fea:	80 83       	st	Z, r24
    2fec:	f5 01       	movw	r30, r10
    2fee:	ee 0f       	add	r30, r30
    2ff0:	ff 1f       	adc	r31, r31
    2ff2:	ee 0f       	add	r30, r30
    2ff4:	ff 1f       	adc	r31, r31
    2ff6:	e8 0d       	add	r30, r8
    2ff8:	f9 1d       	adc	r31, r9
    2ffa:	e5 55       	subi	r30, 0x55	; 85
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	ab 81       	ldd	r26, Y+3	; 0x03
    3000:	bc 81       	ldd	r27, Y+4	; 0x04
    3002:	a5 53       	subi	r26, 0x35	; 53
    3004:	bf 4f       	sbci	r27, 0xFF	; 255
    3006:	2c 91       	ld	r18, X
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	32 2f       	mov	r19, r18
    300c:	22 27       	eor	r18, r18
    300e:	8b 81       	ldd	r24, Y+3	; 0x03
    3010:	9c 81       	ldd	r25, Y+4	; 0x04
    3012:	85 52       	subi	r24, 0x25	; 37
    3014:	9f 4f       	sbci	r25, 0xFF	; 255
    3016:	dc 01       	movw	r26, r24
    3018:	8c 91       	ld	r24, X
    301a:	a9 01       	movw	r20, r18
    301c:	48 2b       	or	r20, r24
    301e:	d1 01       	movw	r26, r2
    3020:	8c 91       	ld	r24, X
    3022:	28 2f       	mov	r18, r24
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	32 2f       	mov	r19, r18
    3028:	22 27       	eor	r18, r18
    302a:	a9 81       	ldd	r26, Y+1	; 0x01
    302c:	ba 81       	ldd	r27, Y+2	; 0x02
    302e:	8c 91       	ld	r24, X
    3030:	28 2b       	or	r18, r24
    3032:	24 0f       	add	r18, r20
    3034:	35 1f       	adc	r19, r21
    3036:	c9 01       	movw	r24, r18
    3038:	88 0f       	add	r24, r24
    303a:	99 1f       	adc	r25, r25
    303c:	22 0f       	add	r18, r18
    303e:	33 1f       	adc	r19, r19
    3040:	22 0f       	add	r18, r18
    3042:	33 1f       	adc	r19, r19
    3044:	22 0f       	add	r18, r18
    3046:	33 1f       	adc	r19, r19
    3048:	28 0f       	add	r18, r24
    304a:	39 1f       	adc	r19, r25
    304c:	d4 01       	movw	r26, r8
    304e:	ab 55       	subi	r26, 0x5B	; 91
    3050:	bf 4f       	sbci	r27, 0xFF	; 255
    3052:	8d 91       	ld	r24, X+
    3054:	9d 91       	ld	r25, X+
    3056:	0d 90       	ld	r0, X+
    3058:	bc 91       	ld	r27, X
    305a:	a0 2d       	mov	r26, r0
    305c:	82 0f       	add	r24, r18
    305e:	93 1f       	adc	r25, r19
    3060:	a1 1d       	adc	r26, r1
    3062:	b1 1d       	adc	r27, r1
    3064:	80 83       	st	Z, r24
    3066:	91 83       	std	Z+1, r25	; 0x01
    3068:	a2 83       	std	Z+2, r26	; 0x02
    306a:	b3 83       	std	Z+3, r27	; 0x03
    306c:	9b c0       	rjmp	.+310    	; 0x31a4 <playTrack+0x290>
    306e:	3c 01       	movw	r6, r24
    3070:	6a 0c       	add	r6, r10
    3072:	7b 1c       	adc	r7, r11
    3074:	c3 01       	movw	r24, r6
    3076:	88 57       	subi	r24, 0x78	; 120
    3078:	9f 4f       	sbci	r25, 0xFF	; 255
    307a:	d3 01       	movw	r26, r6
    307c:	a8 56       	subi	r26, 0x68	; 104
    307e:	bf 4f       	sbci	r27, 0xFF	; 255
    3080:	23 01       	movw	r4, r6
    3082:	e8 ea       	ldi	r30, 0xA8	; 168
    3084:	4e 0e       	add	r4, r30
    3086:	51 1c       	adc	r5, r1
    3088:	fc 01       	movw	r30, r24
    308a:	20 81       	ld	r18, Z
    308c:	f3 01       	movw	r30, r6
    308e:	40 8d       	ldd	r20, Z+24	; 0x18
    3090:	6c 91       	ld	r22, X
    3092:	d2 01       	movw	r26, r4
    3094:	8c 91       	ld	r24, X
    3096:	7d de       	rcall	.-774    	; 0x2d92 <trackControl>
    3098:	f4 01       	movw	r30, r8
    309a:	e7 55       	subi	r30, 0x57	; 87
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	02 c0       	rjmp	.+4      	; 0x30a8 <playTrack+0x194>
    30a4:	88 0f       	add	r24, r24
    30a6:	99 1f       	adc	r25, r25
    30a8:	1a 95       	dec	r17
    30aa:	e2 f7       	brpl	.-8      	; 0x30a4 <playTrack+0x190>
    30ac:	20 81       	ld	r18, Z
    30ae:	31 81       	ldd	r19, Z+1	; 0x01
    30b0:	82 2b       	or	r24, r18
    30b2:	93 2b       	or	r25, r19
    30b4:	91 83       	std	Z+1, r25	; 0x01
    30b6:	80 83       	st	Z, r24
    30b8:	f5 01       	movw	r30, r10
    30ba:	ee 0f       	add	r30, r30
    30bc:	ff 1f       	adc	r31, r31
    30be:	ee 0f       	add	r30, r30
    30c0:	ff 1f       	adc	r31, r31
    30c2:	e8 0d       	add	r30, r8
    30c4:	f9 1d       	adc	r31, r9
    30c6:	e5 55       	subi	r30, 0x55	; 85
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	d3 01       	movw	r26, r6
    30cc:	a5 53       	subi	r26, 0x35	; 53
    30ce:	bf 4f       	sbci	r27, 0xFF	; 255
    30d0:	2c 91       	ld	r18, X
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	32 2f       	mov	r19, r18
    30d6:	22 27       	eor	r18, r18
    30d8:	c3 01       	movw	r24, r6
    30da:	85 52       	subi	r24, 0x25	; 37
    30dc:	9f 4f       	sbci	r25, 0xFF	; 255
    30de:	dc 01       	movw	r26, r24
    30e0:	8c 91       	ld	r24, X
    30e2:	28 2b       	or	r18, r24
    30e4:	c9 01       	movw	r24, r18
    30e6:	88 0f       	add	r24, r24
    30e8:	99 1f       	adc	r25, r25
    30ea:	22 0f       	add	r18, r18
    30ec:	33 1f       	adc	r19, r19
    30ee:	22 0f       	add	r18, r18
    30f0:	33 1f       	adc	r19, r19
    30f2:	22 0f       	add	r18, r18
    30f4:	33 1f       	adc	r19, r19
    30f6:	28 0f       	add	r18, r24
    30f8:	39 1f       	adc	r19, r25
    30fa:	d4 01       	movw	r26, r8
    30fc:	ab 55       	subi	r26, 0x5B	; 91
    30fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3100:	8d 91       	ld	r24, X+
    3102:	9d 91       	ld	r25, X+
    3104:	0d 90       	ld	r0, X+
    3106:	bc 91       	ld	r27, X
    3108:	a0 2d       	mov	r26, r0
    310a:	82 0f       	add	r24, r18
    310c:	93 1f       	adc	r25, r19
    310e:	a1 1d       	adc	r26, r1
    3110:	b1 1d       	adc	r27, r1
    3112:	80 83       	st	Z, r24
    3114:	91 83       	std	Z+1, r25	; 0x01
    3116:	a2 83       	std	Z+2, r26	; 0x02
    3118:	b3 83       	std	Z+3, r27	; 0x03
    311a:	44 c0       	rjmp	.+136    	; 0x31a4 <playTrack+0x290>
    311c:	fc 01       	movw	r30, r24
    311e:	ea 0d       	add	r30, r10
    3120:	fb 1d       	adc	r31, r11
    3122:	fa 83       	std	Y+2, r31	; 0x02
    3124:	e9 83       	std	Y+1, r30	; 0x01
    3126:	e8 57       	subi	r30, 0x78	; 120
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	89 80       	ldd	r8, Y+1	; 0x01
    312c:	9a 80       	ldd	r9, Y+2	; 0x02
    312e:	28 e9       	ldi	r18, 0x98	; 152
    3130:	82 0e       	add	r8, r18
    3132:	91 1c       	adc	r9, r1
    3134:	a9 80       	ldd	r10, Y+1	; 0x01
    3136:	ba 80       	ldd	r11, Y+2	; 0x02
    3138:	38 ea       	ldi	r19, 0xA8	; 168
    313a:	a3 0e       	add	r10, r19
    313c:	b1 1c       	adc	r11, r1
    313e:	20 81       	ld	r18, Z
    3140:	a9 81       	ldd	r26, Y+1	; 0x01
    3142:	ba 81       	ldd	r27, Y+2	; 0x02
    3144:	58 96       	adiw	r26, 0x18	; 24
    3146:	4c 91       	ld	r20, X
    3148:	f4 01       	movw	r30, r8
    314a:	60 81       	ld	r22, Z
    314c:	d5 01       	movw	r26, r10
    314e:	8c 91       	ld	r24, X
    3150:	20 de       	rcall	.-960    	; 0x2d92 <trackControl>
    3152:	a9 81       	ldd	r26, Y+1	; 0x01
    3154:	ba 81       	ldd	r27, Y+2	; 0x02
    3156:	a8 5b       	subi	r26, 0xB8	; 184
    3158:	bf 4f       	sbci	r27, 0xFF	; 255
    315a:	e9 81       	ldd	r30, Y+1	; 0x01
    315c:	fa 81       	ldd	r31, Y+2	; 0x02
    315e:	e8 5a       	subi	r30, 0xA8	; 168
    3160:	ff 4f       	sbci	r31, 0xFF	; 255
    3162:	c1 2c       	mov	r12, r1
    3164:	ec 90       	ld	r14, X
    3166:	00 81       	ld	r16, Z
    3168:	e9 81       	ldd	r30, Y+1	; 0x01
    316a:	fa 81       	ldd	r31, Y+2	; 0x02
    316c:	20 a5       	ldd	r18, Z+40	; 0x28
    316e:	40 ad       	ldd	r20, Z+56	; 0x38
    3170:	d4 01       	movw	r26, r8
    3172:	6c 91       	ld	r22, X
    3174:	f5 01       	movw	r30, r10
    3176:	80 81       	ld	r24, Z
    3178:	7b de       	rcall	.-778    	; 0x2e70 <setTrackFade>
    317a:	14 c0       	rjmp	.+40     	; 0x31a4 <playTrack+0x290>
    317c:	a8 0e       	add	r10, r24
    317e:	b9 1e       	adc	r11, r25
    3180:	c5 01       	movw	r24, r10
    3182:	88 57       	subi	r24, 0x78	; 120
    3184:	9f 4f       	sbci	r25, 0xFF	; 255
    3186:	d5 01       	movw	r26, r10
    3188:	a8 56       	subi	r26, 0x68	; 104
    318a:	bf 4f       	sbci	r27, 0xFF	; 255
    318c:	45 01       	movw	r8, r10
    318e:	f8 ea       	ldi	r31, 0xA8	; 168
    3190:	8f 0e       	add	r8, r31
    3192:	91 1c       	adc	r9, r1
    3194:	fc 01       	movw	r30, r24
    3196:	20 81       	ld	r18, Z
    3198:	f5 01       	movw	r30, r10
    319a:	40 8d       	ldd	r20, Z+24	; 0x18
    319c:	6c 91       	ld	r22, X
    319e:	d4 01       	movw	r26, r8
    31a0:	8c 91       	ld	r24, X
    31a2:	f7 dd       	rcall	.-1042   	; 0x2d92 <trackControl>
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	df 91       	pop	r29
    31ae:	cf 91       	pop	r28
    31b0:	1f 91       	pop	r17
    31b2:	0f 91       	pop	r16
    31b4:	ef 90       	pop	r14
    31b6:	cf 90       	pop	r12
    31b8:	bf 90       	pop	r11
    31ba:	af 90       	pop	r10
    31bc:	9f 90       	pop	r9
    31be:	8f 90       	pop	r8
    31c0:	7f 90       	pop	r7
    31c2:	6f 90       	pop	r6
    31c4:	5f 90       	pop	r5
    31c6:	4f 90       	pop	r4
    31c8:	3f 90       	pop	r3
    31ca:	2f 90       	pop	r2
    31cc:	08 95       	ret

000031ce <releaseUpdate>:

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
    31ce:	2f 92       	push	r2
    31d0:	3f 92       	push	r3
    31d2:	4f 92       	push	r4
    31d4:	5f 92       	push	r5
    31d6:	6f 92       	push	r6
    31d8:	7f 92       	push	r7
    31da:	8f 92       	push	r8
    31dc:	9f 92       	push	r9
    31de:	af 92       	push	r10
    31e0:	bf 92       	push	r11
    31e2:	cf 92       	push	r12
    31e4:	ef 92       	push	r14
    31e6:	0f 93       	push	r16
    31e8:	cf 93       	push	r28
    31ea:	df 93       	push	r29
    31ec:	00 d0       	rcall	.+0      	; 0x31ee <releaseUpdate+0x20>
    31ee:	1f 92       	push	r1
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
    31f4:	fb 01       	movw	r30, r22
    31f6:	e7 55       	subi	r30, 0x57	; 87
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	a0 80       	ld	r10, Z
    31fc:	b1 80       	ldd	r11, Z+1	; 0x01
    31fe:	3b 01       	movw	r6, r22
    3200:	2b ea       	ldi	r18, 0xAB	; 171
    3202:	62 0e       	add	r6, r18
    3204:	71 1c       	adc	r7, r1
    3206:	88 59       	subi	r24, 0x98	; 152
    3208:	9f 4f       	sbci	r25, 0xFF	; 255
    320a:	4c 01       	movw	r8, r24
	
	for(int i = 0; i<16; i++)
    320c:	1c 82       	std	Y+4, r1	; 0x04
    320e:	1b 82       	std	Y+3, r1	; 0x03
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])<=(currentGlobals->releaseCounter))
    3210:	2b 01       	movw	r4, r22
    3212:	85 ea       	ldi	r24, 0xA5	; 165
    3214:	48 0e       	add	r4, r24
    3216:	51 1c       	adc	r5, r1
			{
				//we need to do the release state here.
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],186,255,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
				currentGlobals->releaseTracker = currentGlobals->releaseTracker&(~(1<<i)); //turn off that track, so release stage does not play again. 
    3218:	fa 83       	std	Y+2, r31	; 0x02
    321a:	e9 83       	std	Y+1, r30	; 0x01
    321c:	22 24       	eor	r2, r2
    321e:	23 94       	inc	r2
    3220:	31 2c       	mov	r3, r1
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
    3222:	a0 fe       	sbrs	r10, 0
    3224:	2c c0       	rjmp	.+88     	; 0x327e <releaseUpdate+0xb0>
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])<=(currentGlobals->releaseCounter))
    3226:	f3 01       	movw	r30, r6
    3228:	40 81       	ld	r20, Z
    322a:	51 81       	ldd	r21, Z+1	; 0x01
    322c:	62 81       	ldd	r22, Z+2	; 0x02
    322e:	73 81       	ldd	r23, Z+3	; 0x03
    3230:	f2 01       	movw	r30, r4
    3232:	80 81       	ld	r24, Z
    3234:	91 81       	ldd	r25, Z+1	; 0x01
    3236:	a2 81       	ldd	r26, Z+2	; 0x02
    3238:	b3 81       	ldd	r27, Z+3	; 0x03
    323a:	84 17       	cp	r24, r20
    323c:	95 07       	cpc	r25, r21
    323e:	a6 07       	cpc	r26, r22
    3240:	b7 07       	cpc	r27, r23
    3242:	e8 f0       	brcs	.+58     	; 0x327e <releaseUpdate+0xb0>
			{
				//we need to do the release state here.
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],186,255,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
    3244:	cc 24       	eor	r12, r12
    3246:	c3 94       	inc	r12
    3248:	f4 01       	movw	r30, r8
    324a:	e0 80       	ld	r14, Z
    324c:	00 89       	ldd	r16, Z+16	; 0x10
    324e:	2f ef       	ldi	r18, 0xFF	; 255
    3250:	4a eb       	ldi	r20, 0xBA	; 186
    3252:	60 a9       	ldd	r22, Z+48	; 0x30
    3254:	e0 5c       	subi	r30, 0xC0	; 192
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	80 81       	ld	r24, Z
    325a:	0a de       	rcall	.-1004   	; 0x2e70 <setTrackFade>
				currentGlobals->releaseTracker = currentGlobals->releaseTracker&(~(1<<i)); //turn off that track, so release stage does not play again. 
    325c:	c1 01       	movw	r24, r2
    325e:	0b 80       	ldd	r0, Y+3	; 0x03
    3260:	02 c0       	rjmp	.+4      	; 0x3266 <releaseUpdate+0x98>
    3262:	88 0f       	add	r24, r24
    3264:	99 1f       	adc	r25, r25
    3266:	0a 94       	dec	r0
    3268:	e2 f7       	brpl	.-8      	; 0x3262 <releaseUpdate+0x94>
    326a:	80 95       	com	r24
    326c:	90 95       	com	r25
    326e:	e9 81       	ldd	r30, Y+1	; 0x01
    3270:	fa 81       	ldd	r31, Y+2	; 0x02
    3272:	20 81       	ld	r18, Z
    3274:	31 81       	ldd	r19, Z+1	; 0x01
    3276:	82 23       	and	r24, r18
    3278:	93 23       	and	r25, r19
    327a:	91 83       	std	Z+1, r25	; 0x01
    327c:	80 83       	st	Z, r24
			}
		}
		releaseTrackerParse = releaseTrackerParse>>1;
    327e:	b6 94       	lsr	r11
    3280:	a7 94       	ror	r10

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
    3282:	8b 81       	ldd	r24, Y+3	; 0x03
    3284:	9c 81       	ldd	r25, Y+4	; 0x04
    3286:	01 96       	adiw	r24, 0x01	; 1
    3288:	9c 83       	std	Y+4, r25	; 0x04
    328a:	8b 83       	std	Y+3, r24	; 0x03
    328c:	94 e0       	ldi	r25, 0x04	; 4
    328e:	69 0e       	add	r6, r25
    3290:	71 1c       	adc	r7, r1
    3292:	ef ef       	ldi	r30, 0xFF	; 255
    3294:	8e 1a       	sub	r8, r30
    3296:	9e 0a       	sbc	r9, r30
    3298:	8b 81       	ldd	r24, Y+3	; 0x03
    329a:	9c 81       	ldd	r25, Y+4	; 0x04
    329c:	40 97       	sbiw	r24, 0x10	; 16
    329e:	09 f0       	breq	.+2      	; 0x32a2 <releaseUpdate+0xd4>
    32a0:	c0 cf       	rjmp	.-128    	; 0x3222 <releaseUpdate+0x54>
			}
		}
		releaseTrackerParse = releaseTrackerParse>>1;
	}
	
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	df 91       	pop	r29
    32ac:	cf 91       	pop	r28
    32ae:	0f 91       	pop	r16
    32b0:	ef 90       	pop	r14
    32b2:	cf 90       	pop	r12
    32b4:	bf 90       	pop	r11
    32b6:	af 90       	pop	r10
    32b8:	9f 90       	pop	r9
    32ba:	8f 90       	pop	r8
    32bc:	7f 90       	pop	r7
    32be:	6f 90       	pop	r6
    32c0:	5f 90       	pop	r5
    32c2:	4f 90       	pop	r4
    32c4:	3f 90       	pop	r3
    32c6:	2f 90       	pop	r2
    32c8:	08 95       	ret

000032ca <twi_init>:
		}

		returnNum=twi_readNak();

	return returnNum;
}
    32ca:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    32ce:	88 e4       	ldi	r24, 0x48	; 72
    32d0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    32d4:	08 95       	ret

000032d6 <twi_start>:
    32d6:	94 ea       	ldi	r25, 0xA4	; 164
    32d8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    32dc:	ec eb       	ldi	r30, 0xBC	; 188
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	90 81       	ld	r25, Z
    32e2:	99 23       	and	r25, r25
    32e4:	ec f7       	brge	.-6      	; 0x32e0 <twi_start+0xa>
    32e6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    32ea:	98 7f       	andi	r25, 0xF8	; 248
    32ec:	98 30       	cpi	r25, 0x08	; 8
    32ee:	11 f0       	breq	.+4      	; 0x32f4 <twi_start+0x1e>
    32f0:	90 31       	cpi	r25, 0x10	; 16
    32f2:	a1 f4       	brne	.+40     	; 0x331c <twi_start+0x46>
    32f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    32f8:	84 e8       	ldi	r24, 0x84	; 132
    32fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    32fe:	ec eb       	ldi	r30, 0xBC	; 188
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	80 81       	ld	r24, Z
    3304:	88 23       	and	r24, r24
    3306:	ec f7       	brge	.-6      	; 0x3302 <twi_start+0x2c>
    3308:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    330c:	98 7f       	andi	r25, 0xF8	; 248
    330e:	98 31       	cpi	r25, 0x18	; 24
    3310:	39 f0       	breq	.+14     	; 0x3320 <twi_start+0x4a>
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	90 34       	cpi	r25, 0x40	; 64
    3316:	29 f4       	brne	.+10     	; 0x3322 <twi_start+0x4c>
    3318:	80 e0       	ldi	r24, 0x00	; 0
    331a:	08 95       	ret
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	08 95       	ret
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	08 95       	ret

00003324 <twi_stop>:
    3324:	84 e9       	ldi	r24, 0x94	; 148
    3326:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    332a:	ec eb       	ldi	r30, 0xBC	; 188
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	80 81       	ld	r24, Z
    3330:	84 fd       	sbrc	r24, 4
    3332:	fd cf       	rjmp	.-6      	; 0x332e <twi_stop+0xa>
    3334:	08 95       	ret

00003336 <twi_write>:
    3336:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    333a:	84 e8       	ldi	r24, 0x84	; 132
    333c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3340:	ec eb       	ldi	r30, 0xBC	; 188
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	80 81       	ld	r24, Z
    3346:	88 23       	and	r24, r24
    3348:	ec f7       	brge	.-6      	; 0x3344 <twi_write+0xe>
    334a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    334e:	98 7f       	andi	r25, 0xF8	; 248
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	98 32       	cpi	r25, 0x28	; 40
    3354:	09 f4       	brne	.+2      	; 0x3358 <twi_write+0x22>
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	08 95       	ret

0000335a <twi_readAck>:
    335a:	84 ec       	ldi	r24, 0xC4	; 196
    335c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3360:	ec eb       	ldi	r30, 0xBC	; 188
    3362:	f0 e0       	ldi	r31, 0x00	; 0
    3364:	80 81       	ld	r24, Z
    3366:	88 23       	and	r24, r24
    3368:	ec f7       	brge	.-6      	; 0x3364 <twi_readAck+0xa>
    336a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    336e:	08 95       	ret

00003370 <twi_readNak>:
    3370:	84 e8       	ldi	r24, 0x84	; 132
    3372:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3376:	ec eb       	ldi	r30, 0xBC	; 188
    3378:	f0 e0       	ldi	r31, 0x00	; 0
    337a:	80 81       	ld	r24, Z
    337c:	88 23       	and	r24, r24
    337e:	ec f7       	brge	.-6      	; 0x337a <twi_readNak+0xa>
    3380:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3384:	08 95       	ret

00003386 <eepromSavePattern>:
    3386:	4f 92       	push	r4
    3388:	5f 92       	push	r5
    338a:	6f 92       	push	r6
    338c:	7f 92       	push	r7
    338e:	8f 92       	push	r8
    3390:	9f 92       	push	r9
    3392:	af 92       	push	r10
    3394:	bf 92       	push	r11
    3396:	cf 92       	push	r12
    3398:	df 92       	push	r13
    339a:	ef 92       	push	r14
    339c:	ff 92       	push	r15
    339e:	0f 93       	push	r16
    33a0:	1f 93       	push	r17
    33a2:	cf 93       	push	r28
    33a4:	df 93       	push	r29
    33a6:	cd b7       	in	r28, 0x3d	; 61
    33a8:	de b7       	in	r29, 0x3e	; 62
    33aa:	c4 59       	subi	r28, 0x94	; 148
    33ac:	d1 09       	sbc	r29, r1
    33ae:	0f b6       	in	r0, 0x3f	; 63
    33b0:	f8 94       	cli
    33b2:	de bf       	out	0x3e, r29	; 62
    33b4:	0f be       	out	0x3f, r0	; 63
    33b6:	cd bf       	out	0x3d, r28	; 61
    33b8:	cd 5d       	subi	r28, 0xDD	; 221
    33ba:	dd 4f       	sbci	r29, 0xFD	; 253
    33bc:	48 81       	ld	r20, Y
    33be:	c3 52       	subi	r28, 0x23	; 35
    33c0:	d2 40       	sbci	r29, 0x02	; 2
    33c2:	c0 59       	subi	r28, 0x90	; 144
    33c4:	de 4f       	sbci	r29, 0xFE	; 254
    33c6:	88 81       	ld	r24, Y
    33c8:	c0 57       	subi	r28, 0x70	; 112
    33ca:	d1 40       	sbci	r29, 0x01	; 1
    33cc:	cf 58       	subi	r28, 0x8F	; 143
    33ce:	de 4f       	sbci	r29, 0xFE	; 254
    33d0:	98 81       	ld	r25, Y
    33d2:	c1 57       	subi	r28, 0x71	; 113
    33d4:	d1 40       	sbci	r29, 0x01	; 1
    33d6:	24 2f       	mov	r18, r20
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	44 23       	and	r20, r20
    33dc:	8c f0       	brlt	.+34     	; 0x3400 <eepromSavePattern+0x7a>
    33de:	21 50       	subi	r18, 0x01	; 1
    33e0:	31 09       	sbc	r19, r1
    33e2:	39 01       	movw	r6, r18
    33e4:	66 0c       	add	r6, r6
    33e6:	77 1c       	adc	r7, r7
    33e8:	62 0e       	add	r6, r18
    33ea:	73 1e       	adc	r7, r19
    33ec:	76 94       	lsr	r7
    33ee:	76 2c       	mov	r7, r6
    33f0:	66 24       	eor	r6, r6
    33f2:	77 94       	ror	r7
    33f4:	67 94       	ror	r6
    33f6:	0f 2e       	mov	r0, r31
    33f8:	f0 ea       	ldi	r31, 0xA0	; 160
    33fa:	5f 2e       	mov	r5, r31
    33fc:	f0 2d       	mov	r31, r0
    33fe:	11 c0       	rjmp	.+34     	; 0x3422 <eepromSavePattern+0x9c>
    3400:	20 58       	subi	r18, 0x80	; 128
    3402:	31 09       	sbc	r19, r1
    3404:	39 01       	movw	r6, r18
    3406:	66 0c       	add	r6, r6
    3408:	77 1c       	adc	r7, r7
    340a:	26 0d       	add	r18, r6
    340c:	37 1d       	adc	r19, r7
    340e:	39 01       	movw	r6, r18
    3410:	76 94       	lsr	r7
    3412:	76 2c       	mov	r7, r6
    3414:	66 24       	eor	r6, r6
    3416:	77 94       	ror	r7
    3418:	67 94       	ror	r6
    341a:	0f 2e       	mov	r0, r31
    341c:	f8 ea       	ldi	r31, 0xA8	; 168
    341e:	5f 2e       	mov	r5, r31
    3420:	f0 2d       	mov	r31, r0
    3422:	be 01       	movw	r22, r28
    3424:	68 55       	subi	r22, 0x58	; 88
    3426:	7f 4f       	sbci	r23, 0xFF	; 255
    3428:	8e 01       	movw	r16, r28
    342a:	0f 5f       	subi	r16, 0xFF	; 255
    342c:	1f 4f       	sbci	r17, 0xFF	; 255
    342e:	fe 01       	movw	r30, r28
    3430:	e0 55       	subi	r30, 0x50	; 80
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	98 01       	movw	r18, r16
    3436:	db 01       	movw	r26, r22
    3438:	4d 91       	ld	r20, X+
    343a:	bd 01       	movw	r22, r26
    343c:	d9 01       	movw	r26, r18
    343e:	4d 93       	st	X+, r20
    3440:	9d 01       	movw	r18, r26
    3442:	6e 17       	cp	r22, r30
    3444:	7f 07       	cpc	r23, r31
    3446:	b9 f7       	brne	.-18     	; 0x3436 <eepromSavePattern+0xb0>
    3448:	de 01       	movw	r26, r28
    344a:	19 96       	adiw	r26, 0x09	; 9
    344c:	9e 01       	movw	r18, r28
    344e:	28 54       	subi	r18, 0x48	; 72
    3450:	3f 4f       	sbci	r19, 0xFF	; 255
    3452:	41 91       	ld	r20, Z+
    3454:	4d 93       	st	X+, r20
    3456:	e2 17       	cp	r30, r18
    3458:	f3 07       	cpc	r31, r19
    345a:	d9 f7       	brne	.-10     	; 0x3452 <eepromSavePattern+0xcc>
    345c:	4e 01       	movw	r8, r28
    345e:	b1 e1       	ldi	r27, 0x11	; 17
    3460:	8b 0e       	add	r8, r27
    3462:	91 1c       	adc	r9, r1
    3464:	7e 01       	movw	r14, r28
    3466:	e0 ec       	ldi	r30, 0xC0	; 192
    3468:	ee 0e       	add	r14, r30
    346a:	f1 1c       	adc	r15, r1
    346c:	d4 01       	movw	r26, r8
    346e:	f9 01       	movw	r30, r18
    3470:	41 91       	ld	r20, Z+
    3472:	9f 01       	movw	r18, r30
    3474:	4d 93       	st	X+, r20
    3476:	ee 15       	cp	r30, r14
    3478:	ff 05       	cpc	r31, r15
    347a:	c9 f7       	brne	.-14     	; 0x346e <eepromSavePattern+0xe8>
    347c:	9e 01       	movw	r18, r28
    347e:	27 5e       	subi	r18, 0xE7	; 231
    3480:	3f 4f       	sbci	r19, 0xFF	; 255
    3482:	be 01       	movw	r22, r28
    3484:	60 53       	subi	r22, 0x30	; 48
    3486:	7f 4f       	sbci	r23, 0xFF	; 255
    3488:	d7 01       	movw	r26, r14
    348a:	4d 91       	ld	r20, X+
    348c:	7d 01       	movw	r14, r26
    348e:	f9 01       	movw	r30, r18
    3490:	41 93       	st	Z+, r20
    3492:	9f 01       	movw	r18, r30
    3494:	a6 17       	cp	r26, r22
    3496:	b7 07       	cpc	r27, r23
    3498:	b9 f7       	brne	.-18     	; 0x3488 <eepromSavePattern+0x102>
    349a:	9e 01       	movw	r18, r28
    349c:	27 5d       	subi	r18, 0xD7	; 215
    349e:	3f 4f       	sbci	r19, 0xFF	; 255
    34a0:	de 01       	movw	r26, r28
    34a2:	a0 52       	subi	r26, 0x20	; 32
    34a4:	bf 4f       	sbci	r27, 0xFF	; 255
    34a6:	fb 01       	movw	r30, r22
    34a8:	41 91       	ld	r20, Z+
    34aa:	bf 01       	movw	r22, r30
    34ac:	f9 01       	movw	r30, r18
    34ae:	41 93       	st	Z+, r20
    34b0:	9f 01       	movw	r18, r30
    34b2:	6a 17       	cp	r22, r26
    34b4:	7b 07       	cpc	r23, r27
    34b6:	b9 f7       	brne	.-18     	; 0x34a6 <eepromSavePattern+0x120>
    34b8:	9e 01       	movw	r18, r28
    34ba:	27 5c       	subi	r18, 0xC7	; 199
    34bc:	3f 4f       	sbci	r19, 0xFF	; 255
    34be:	be 01       	movw	r22, r28
    34c0:	60 51       	subi	r22, 0x10	; 16
    34c2:	7f 4f       	sbci	r23, 0xFF	; 255
    34c4:	4d 91       	ld	r20, X+
    34c6:	f9 01       	movw	r30, r18
    34c8:	41 93       	st	Z+, r20
    34ca:	9f 01       	movw	r18, r30
    34cc:	a6 17       	cp	r26, r22
    34ce:	b7 07       	cpc	r27, r23
    34d0:	c9 f7       	brne	.-14     	; 0x34c4 <eepromSavePattern+0x13e>
    34d2:	9e 01       	movw	r18, r28
    34d4:	27 5b       	subi	r18, 0xB7	; 183
    34d6:	3f 4f       	sbci	r19, 0xFF	; 255
    34d8:	de 01       	movw	r26, r28
    34da:	b3 95       	inc	r27
    34dc:	fb 01       	movw	r30, r22
    34de:	41 91       	ld	r20, Z+
    34e0:	bf 01       	movw	r22, r30
    34e2:	f9 01       	movw	r30, r18
    34e4:	41 93       	st	Z+, r20
    34e6:	9f 01       	movw	r18, r30
    34e8:	6a 17       	cp	r22, r26
    34ea:	7b 07       	cpc	r23, r27
    34ec:	b9 f7       	brne	.-18     	; 0x34dc <eepromSavePattern+0x156>
    34ee:	9e 01       	movw	r18, r28
    34f0:	27 5a       	subi	r18, 0xA7	; 167
    34f2:	3f 4f       	sbci	r19, 0xFF	; 255
    34f4:	be 01       	movw	r22, r28
    34f6:	60 5f       	subi	r22, 0xF0	; 240
    34f8:	7e 4f       	sbci	r23, 0xFE	; 254
    34fa:	4d 91       	ld	r20, X+
    34fc:	f9 01       	movw	r30, r18
    34fe:	41 93       	st	Z+, r20
    3500:	9f 01       	movw	r18, r30
    3502:	a6 17       	cp	r26, r22
    3504:	b7 07       	cpc	r27, r23
    3506:	c9 f7       	brne	.-14     	; 0x34fa <eepromSavePattern+0x174>
    3508:	de 01       	movw	r26, r28
    350a:	a7 59       	subi	r26, 0x97	; 151
    350c:	bf 4f       	sbci	r27, 0xFF	; 255
    350e:	5e 01       	movw	r10, r28
    3510:	f0 ee       	ldi	r31, 0xE0	; 224
    3512:	af 1a       	sub	r10, r31
    3514:	fe ef       	ldi	r31, 0xFE	; 254
    3516:	bf 0a       	sbc	r11, r31
    3518:	fb 01       	movw	r30, r22
    351a:	21 91       	ld	r18, Z+
    351c:	bf 01       	movw	r22, r30
    351e:	2d 93       	st	X+, r18
    3520:	ea 15       	cp	r30, r10
    3522:	fb 05       	cpc	r31, r11
    3524:	c9 f7       	brne	.-14     	; 0x3518 <eepromSavePattern+0x192>
    3526:	eb 96       	adiw	r28, 0x3b	; 59
    3528:	9f af       	std	Y+63, r25	; 0x3f
    352a:	eb 97       	sbiw	r28, 0x3b	; 59
    352c:	ec 96       	adiw	r28, 0x3c	; 60
    352e:	8f af       	std	Y+63, r24	; 0x3f
    3530:	ec 97       	sbiw	r28, 0x3c	; 60
    3532:	ce 58       	subi	r28, 0x8E	; 142
    3534:	de 4f       	sbci	r29, 0xFE	; 254
    3536:	88 81       	ld	r24, Y
    3538:	c2 57       	subi	r28, 0x72	; 114
    353a:	d1 40       	sbci	r29, 0x01	; 1
    353c:	ed 96       	adiw	r28, 0x3d	; 61
    353e:	8f af       	std	Y+63, r24	; 0x3f
    3540:	ed 97       	sbiw	r28, 0x3d	; 61
    3542:	85 2d       	mov	r24, r5
    3544:	c8 de       	rcall	.-624    	; 0x32d6 <twi_start>
    3546:	81 30       	cpi	r24, 0x01	; 1
    3548:	81 f4       	brne	.+32     	; 0x356a <eepromSavePattern+0x1e4>
    354a:	84 e1       	ldi	r24, 0x14	; 20
    354c:	ec e0       	ldi	r30, 0x0C	; 12
    354e:	f2 e0       	ldi	r31, 0x02	; 2
    3550:	de 01       	movw	r26, r28
    3552:	af 57       	subi	r26, 0x7F	; 127
    3554:	bf 4f       	sbci	r27, 0xFF	; 255
    3556:	01 90       	ld	r0, Z+
    3558:	0d 92       	st	X+, r0
    355a:	8a 95       	dec	r24
    355c:	e1 f7       	brne	.-8      	; 0x3556 <eepromSavePattern+0x1d0>
    355e:	63 e0       	ldi	r22, 0x03	; 3
    3560:	70 e0       	ldi	r23, 0x00	; 0
    3562:	ce 01       	movw	r24, r28
    3564:	8f 57       	subi	r24, 0x7F	; 127
    3566:	9f 4f       	sbci	r25, 0xFF	; 255
    3568:	e1 d8       	rcall	.-3646   	; 0x272c <outputS>
    356a:	87 2d       	mov	r24, r7
    356c:	e4 de       	rcall	.-568    	; 0x3336 <twi_write>
    356e:	46 2c       	mov	r4, r6
    3570:	86 2d       	mov	r24, r6
    3572:	e1 de       	rcall	.-574    	; 0x3336 <twi_write>
    3574:	6e 01       	movw	r12, r28
    3576:	fd e7       	ldi	r31, 0x7D	; 125
    3578:	cf 0e       	add	r12, r31
    357a:	d1 1c       	adc	r13, r1
    357c:	78 01       	movw	r14, r16
    357e:	d7 01       	movw	r26, r14
    3580:	8d 91       	ld	r24, X+
    3582:	7d 01       	movw	r14, r26
    3584:	d8 de       	rcall	.-592    	; 0x3336 <twi_write>
    3586:	ce 14       	cp	r12, r14
    3588:	df 04       	cpc	r13, r15
    358a:	c9 f7       	brne	.-14     	; 0x357e <eepromSavePattern+0x1f8>
    358c:	cb de       	rcall	.-618    	; 0x3324 <twi_stop>
    358e:	ef e1       	ldi	r30, 0x1F	; 31
    3590:	fe e4       	ldi	r31, 0x4E	; 78
    3592:	31 97       	sbiw	r30, 0x01	; 1
    3594:	f1 f7       	brne	.-4      	; 0x3592 <eepromSavePattern+0x20c>
    3596:	00 c0       	rjmp	.+0      	; 0x3598 <eepromSavePattern+0x212>
    3598:	00 00       	nop
    359a:	9e 01       	movw	r18, r28
    359c:	20 5d       	subi	r18, 0xD0	; 208
    359e:	3e 4f       	sbci	r19, 0xFE	; 254
    35a0:	f8 01       	movw	r30, r16
    35a2:	d5 01       	movw	r26, r10
    35a4:	8d 91       	ld	r24, X+
    35a6:	5d 01       	movw	r10, r26
    35a8:	81 93       	st	Z+, r24
    35aa:	2a 17       	cp	r18, r26
    35ac:	3b 07       	cpc	r19, r27
    35ae:	c9 f7       	brne	.-14     	; 0x35a2 <eepromSavePattern+0x21c>
    35b0:	de 01       	movw	r26, r28
    35b2:	91 96       	adiw	r26, 0x21	; 33
    35b4:	f9 01       	movw	r30, r18
    35b6:	81 91       	ld	r24, Z+
    35b8:	9f 01       	movw	r18, r30
    35ba:	f4 01       	movw	r30, r8
    35bc:	81 93       	st	Z+, r24
    35be:	4f 01       	movw	r8, r30
    35c0:	ae 17       	cp	r26, r30
    35c2:	bf 07       	cpc	r27, r31
    35c4:	b9 f7       	brne	.-18     	; 0x35b4 <eepromSavePattern+0x22e>
    35c6:	ce 01       	movw	r24, r28
    35c8:	80 5c       	subi	r24, 0xC0	; 192
    35ca:	9e 4f       	sbci	r25, 0xFE	; 254
    35cc:	ae 01       	movw	r20, r28
    35ce:	4f 5c       	subi	r20, 0xCF	; 207
    35d0:	5f 4f       	sbci	r21, 0xFF	; 255
    35d2:	fc 01       	movw	r30, r24
    35d4:	21 91       	ld	r18, Z+
    35d6:	cf 01       	movw	r24, r30
    35d8:	2d 93       	st	X+, r18
    35da:	a4 17       	cp	r26, r20
    35dc:	b5 07       	cpc	r27, r21
    35de:	c9 f7       	brne	.-14     	; 0x35d2 <eepromSavePattern+0x24c>
    35e0:	ce 01       	movw	r24, r28
    35e2:	80 5b       	subi	r24, 0xB0	; 176
    35e4:	9e 4f       	sbci	r25, 0xFE	; 254
    35e6:	de 01       	movw	r26, r28
    35e8:	af 5b       	subi	r26, 0xBF	; 191
    35ea:	bf 4f       	sbci	r27, 0xFF	; 255
    35ec:	fc 01       	movw	r30, r24
    35ee:	21 91       	ld	r18, Z+
    35f0:	cf 01       	movw	r24, r30
    35f2:	fa 01       	movw	r30, r20
    35f4:	21 93       	st	Z+, r18
    35f6:	af 01       	movw	r20, r30
    35f8:	ea 17       	cp	r30, r26
    35fa:	fb 07       	cpc	r31, r27
    35fc:	b9 f7       	brne	.-18     	; 0x35ec <eepromSavePattern+0x266>
    35fe:	fe 01       	movw	r30, r28
    3600:	e0 5a       	subi	r30, 0xA0	; 160
    3602:	fe 4f       	sbci	r31, 0xFE	; 254
    3604:	9e 01       	movw	r18, r28
    3606:	20 59       	subi	r18, 0x90	; 144
    3608:	3e 4f       	sbci	r19, 0xFE	; 254
    360a:	81 91       	ld	r24, Z+
    360c:	8d 93       	st	X+, r24
    360e:	2e 17       	cp	r18, r30
    3610:	3f 07       	cpc	r19, r31
    3612:	d9 f7       	brne	.-10     	; 0x360a <eepromSavePattern+0x284>
    3614:	ae 01       	movw	r20, r28
    3616:	4d 58       	subi	r20, 0x8D	; 141
    3618:	5e 4f       	sbci	r21, 0xFE	; 254
    361a:	ce 01       	movw	r24, r28
    361c:	8f 5a       	subi	r24, 0xAF	; 175
    361e:	9f 4f       	sbci	r25, 0xFF	; 255
    3620:	de 01       	movw	r26, r28
    3622:	ad 57       	subi	r26, 0x7D	; 125
    3624:	be 4f       	sbci	r27, 0xFE	; 254
    3626:	fa 01       	movw	r30, r20
    3628:	21 91       	ld	r18, Z+
    362a:	af 01       	movw	r20, r30
    362c:	fc 01       	movw	r30, r24
    362e:	21 93       	st	Z+, r18
    3630:	cf 01       	movw	r24, r30
    3632:	a4 17       	cp	r26, r20
    3634:	b5 07       	cpc	r27, r21
    3636:	b9 f7       	brne	.-18     	; 0x3626 <eepromSavePattern+0x2a0>
    3638:	ce 01       	movw	r24, r28
    363a:	8f 59       	subi	r24, 0x9F	; 159
    363c:	9f 4f       	sbci	r25, 0xFF	; 255
    363e:	ae 01       	movw	r20, r28
    3640:	4d 56       	subi	r20, 0x6D	; 109
    3642:	5e 4f       	sbci	r21, 0xFE	; 254
    3644:	2d 91       	ld	r18, X+
    3646:	fc 01       	movw	r30, r24
    3648:	21 93       	st	Z+, r18
    364a:	cf 01       	movw	r24, r30
    364c:	a4 17       	cp	r26, r20
    364e:	b5 07       	cpc	r27, r21
    3650:	c9 f7       	brne	.-14     	; 0x3644 <eepromSavePattern+0x2be>
    3652:	de 01       	movw	r26, r28
    3654:	af 58       	subi	r26, 0x8F	; 143
    3656:	bf 4f       	sbci	r27, 0xFF	; 255
    3658:	7e 01       	movw	r14, r28
    365a:	fd e5       	ldi	r31, 0x5D	; 93
    365c:	ef 1a       	sub	r14, r31
    365e:	fe ef       	ldi	r31, 0xFE	; 254
    3660:	ff 0a       	sbc	r15, r31
    3662:	fa 01       	movw	r30, r20
    3664:	81 91       	ld	r24, Z+
    3666:	af 01       	movw	r20, r30
    3668:	8d 93       	st	X+, r24
    366a:	ee 16       	cp	r14, r30
    366c:	ff 06       	cpc	r15, r31
    366e:	c9 f7       	brne	.-14     	; 0x3662 <eepromSavePattern+0x2dc>
    3670:	85 2d       	mov	r24, r5
    3672:	31 de       	rcall	.-926    	; 0x32d6 <twi_start>
    3674:	81 30       	cpi	r24, 0x01	; 1
    3676:	81 f4       	brne	.+32     	; 0x3698 <eepromSavePattern+0x312>
    3678:	84 e1       	ldi	r24, 0x14	; 20
    367a:	e1 e2       	ldi	r30, 0x21	; 33
    367c:	f2 e0       	ldi	r31, 0x02	; 2
    367e:	de 01       	movw	r26, r28
    3680:	af 57       	subi	r26, 0x7F	; 127
    3682:	bf 4f       	sbci	r27, 0xFF	; 255
    3684:	01 90       	ld	r0, Z+
    3686:	0d 92       	st	X+, r0
    3688:	8a 95       	dec	r24
    368a:	e1 f7       	brne	.-8      	; 0x3684 <eepromSavePattern+0x2fe>
    368c:	63 e0       	ldi	r22, 0x03	; 3
    368e:	70 e0       	ldi	r23, 0x00	; 0
    3690:	ce 01       	movw	r24, r28
    3692:	8f 57       	subi	r24, 0x7F	; 127
    3694:	9f 4f       	sbci	r25, 0xFF	; 255
    3696:	4a d8       	rcall	.-3948   	; 0x272c <outputS>
    3698:	c3 01       	movw	r24, r6
    369a:	80 58       	subi	r24, 0x80	; 128
    369c:	9f 4f       	sbci	r25, 0xFF	; 255
    369e:	89 2f       	mov	r24, r25
    36a0:	4a de       	rcall	.-876    	; 0x3336 <twi_write>
    36a2:	80 e8       	ldi	r24, 0x80	; 128
    36a4:	84 0d       	add	r24, r4
    36a6:	47 de       	rcall	.-882    	; 0x3336 <twi_write>
    36a8:	6e 01       	movw	r12, r28
    36aa:	f1 e8       	ldi	r31, 0x81	; 129
    36ac:	cf 0e       	add	r12, r31
    36ae:	d1 1c       	adc	r13, r1
    36b0:	d8 01       	movw	r26, r16
    36b2:	8d 91       	ld	r24, X+
    36b4:	8d 01       	movw	r16, r26
    36b6:	3f de       	rcall	.-898    	; 0x3336 <twi_write>
    36b8:	c0 16       	cp	r12, r16
    36ba:	d1 06       	cpc	r13, r17
    36bc:	c9 f7       	brne	.-14     	; 0x36b0 <eepromSavePattern+0x32a>
    36be:	32 de       	rcall	.-924    	; 0x3324 <twi_stop>
    36c0:	ef e1       	ldi	r30, 0x1F	; 31
    36c2:	fe e4       	ldi	r31, 0x4E	; 78
    36c4:	31 97       	sbiw	r30, 0x01	; 1
    36c6:	f1 f7       	brne	.-4      	; 0x36c4 <eepromSavePattern+0x33e>
    36c8:	00 c0       	rjmp	.+0      	; 0x36ca <eepromSavePattern+0x344>
    36ca:	00 00       	nop
    36cc:	85 2d       	mov	r24, r5
    36ce:	03 de       	rcall	.-1018   	; 0x32d6 <twi_start>
    36d0:	81 30       	cpi	r24, 0x01	; 1
    36d2:	81 f4       	brne	.+32     	; 0x36f4 <eepromSavePattern+0x36e>
    36d4:	84 e1       	ldi	r24, 0x14	; 20
    36d6:	e6 e3       	ldi	r30, 0x36	; 54
    36d8:	f2 e0       	ldi	r31, 0x02	; 2
    36da:	de 01       	movw	r26, r28
    36dc:	af 57       	subi	r26, 0x7F	; 127
    36de:	bf 4f       	sbci	r27, 0xFF	; 255
    36e0:	01 90       	ld	r0, Z+
    36e2:	0d 92       	st	X+, r0
    36e4:	8a 95       	dec	r24
    36e6:	e1 f7       	brne	.-8      	; 0x36e0 <eepromSavePattern+0x35a>
    36e8:	63 e0       	ldi	r22, 0x03	; 3
    36ea:	70 e0       	ldi	r23, 0x00	; 0
    36ec:	ce 01       	movw	r24, r28
    36ee:	8f 57       	subi	r24, 0x7F	; 127
    36f0:	9f 4f       	sbci	r25, 0xFF	; 255
    36f2:	1c d8       	rcall	.-4040   	; 0x272c <outputS>
    36f4:	73 94       	inc	r7
    36f6:	87 2d       	mov	r24, r7
    36f8:	1e de       	rcall	.-964    	; 0x3336 <twi_write>
    36fa:	84 2d       	mov	r24, r4
    36fc:	1c de       	rcall	.-968    	; 0x3336 <twi_write>
    36fe:	6e 01       	movw	r12, r28
    3700:	2d ed       	ldi	r18, 0xDD	; 221
    3702:	c2 1a       	sub	r12, r18
    3704:	2d ef       	ldi	r18, 0xFD	; 253
    3706:	d2 0a       	sbc	r13, r18
    3708:	d7 01       	movw	r26, r14
    370a:	1c 91       	ld	r17, X
    370c:	11 96       	adiw	r26, 0x01	; 1
    370e:	8c 91       	ld	r24, X
    3710:	b2 e0       	ldi	r27, 0x02	; 2
    3712:	eb 0e       	add	r14, r27
    3714:	f1 1c       	adc	r15, r1
    3716:	0f de       	rcall	.-994    	; 0x3336 <twi_write>
    3718:	81 2f       	mov	r24, r17
    371a:	0d de       	rcall	.-998    	; 0x3336 <twi_write>
    371c:	ce 14       	cp	r12, r14
    371e:	df 04       	cpc	r13, r15
    3720:	99 f7       	brne	.-26     	; 0x3708 <eepromSavePattern+0x382>
    3722:	00 de       	rcall	.-1024   	; 0x3324 <twi_stop>
    3724:	ef e1       	ldi	r30, 0x1F	; 31
    3726:	fe e4       	ldi	r31, 0x4E	; 78
    3728:	31 97       	sbiw	r30, 0x01	; 1
    372a:	f1 f7       	brne	.-4      	; 0x3728 <eepromSavePattern+0x3a2>
    372c:	00 c0       	rjmp	.+0      	; 0x372e <eepromSavePattern+0x3a8>
    372e:	00 00       	nop
    3730:	cc 56       	subi	r28, 0x6C	; 108
    3732:	df 4f       	sbci	r29, 0xFF	; 255
    3734:	0f b6       	in	r0, 0x3f	; 63
    3736:	f8 94       	cli
    3738:	de bf       	out	0x3e, r29	; 62
    373a:	0f be       	out	0x3f, r0	; 63
    373c:	cd bf       	out	0x3d, r28	; 61
    373e:	df 91       	pop	r29
    3740:	cf 91       	pop	r28
    3742:	1f 91       	pop	r17
    3744:	0f 91       	pop	r16
    3746:	ff 90       	pop	r15
    3748:	ef 90       	pop	r14
    374a:	df 90       	pop	r13
    374c:	cf 90       	pop	r12
    374e:	bf 90       	pop	r11
    3750:	af 90       	pop	r10
    3752:	9f 90       	pop	r9
    3754:	8f 90       	pop	r8
    3756:	7f 90       	pop	r7
    3758:	6f 90       	pop	r6
    375a:	5f 90       	pop	r5
    375c:	4f 90       	pop	r4
    375e:	08 95       	ret

00003760 <eepromLoadPattern>:
    3760:	8f 92       	push	r8
    3762:	9f 92       	push	r9
    3764:	af 92       	push	r10
    3766:	bf 92       	push	r11
    3768:	cf 92       	push	r12
    376a:	df 92       	push	r13
    376c:	ef 92       	push	r14
    376e:	ff 92       	push	r15
    3770:	0f 93       	push	r16
    3772:	1f 93       	push	r17
    3774:	cf 93       	push	r28
    3776:	df 93       	push	r29
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
    377c:	c4 59       	subi	r28, 0x94	; 148
    377e:	d1 40       	sbci	r29, 0x01	; 1
    3780:	0f b6       	in	r0, 0x3f	; 63
    3782:	f8 94       	cli
    3784:	de bf       	out	0x3e, r29	; 62
    3786:	0f be       	out	0x3f, r0	; 63
    3788:	cd bf       	out	0x3d, r28	; 61
    378a:	7c 01       	movw	r14, r24
    378c:	86 2f       	mov	r24, r22
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	66 23       	and	r22, r22
    3792:	84 f0       	brlt	.+32     	; 0x37b4 <eepromLoadPattern+0x54>
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	9c 01       	movw	r18, r24
    3798:	22 0f       	add	r18, r18
    379a:	33 1f       	adc	r19, r19
    379c:	82 0f       	add	r24, r18
    379e:	93 1f       	adc	r25, r19
    37a0:	96 95       	lsr	r25
    37a2:	98 2f       	mov	r25, r24
    37a4:	88 27       	eor	r24, r24
    37a6:	97 95       	ror	r25
    37a8:	87 95       	ror	r24
    37aa:	08 2f       	mov	r16, r24
    37ac:	d9 2e       	mov	r13, r25
    37ae:	80 ea       	ldi	r24, 0xA0	; 160
    37b0:	11 ea       	ldi	r17, 0xA1	; 161
    37b2:	10 c0       	rjmp	.+32     	; 0x37d4 <eepromLoadPattern+0x74>
    37b4:	80 58       	subi	r24, 0x80	; 128
    37b6:	91 09       	sbc	r25, r1
    37b8:	9c 01       	movw	r18, r24
    37ba:	22 0f       	add	r18, r18
    37bc:	33 1f       	adc	r19, r19
    37be:	82 0f       	add	r24, r18
    37c0:	93 1f       	adc	r25, r19
    37c2:	96 95       	lsr	r25
    37c4:	98 2f       	mov	r25, r24
    37c6:	88 27       	eor	r24, r24
    37c8:	97 95       	ror	r25
    37ca:	87 95       	ror	r24
    37cc:	08 2f       	mov	r16, r24
    37ce:	d9 2e       	mov	r13, r25
    37d0:	88 ea       	ldi	r24, 0xA8	; 168
    37d2:	19 ea       	ldi	r17, 0xA9	; 169
    37d4:	80 dd       	rcall	.-1280   	; 0x32d6 <twi_start>
    37d6:	81 30       	cpi	r24, 0x01	; 1
    37d8:	31 f4       	brne	.+12     	; 0x37e6 <eepromLoadPattern+0x86>
    37da:	63 e0       	ldi	r22, 0x03	; 3
    37dc:	70 e0       	ldi	r23, 0x00	; 0
    37de:	8c eb       	ldi	r24, 0xBC	; 188
    37e0:	93 e0       	ldi	r25, 0x03	; 3
    37e2:	0e 94 96 13 	call	0x272c	; 0x272c <outputS>
    37e6:	8d 2d       	mov	r24, r13
    37e8:	a6 dd       	rcall	.-1204   	; 0x3336 <twi_write>
    37ea:	80 2f       	mov	r24, r16
    37ec:	a4 dd       	rcall	.-1208   	; 0x3336 <twi_write>
    37ee:	81 2f       	mov	r24, r17
    37f0:	72 dd       	rcall	.-1308   	; 0x32d6 <twi_start>
    37f2:	81 30       	cpi	r24, 0x01	; 1
    37f4:	09 f0       	breq	.+2      	; 0x37f8 <eepromLoadPattern+0x98>
    37f6:	48 c1       	rjmp	.+656    	; 0x3a88 <eepromLoadPattern+0x328>
    37f8:	84 e1       	ldi	r24, 0x14	; 20
    37fa:	eb e4       	ldi	r30, 0x4B	; 75
    37fc:	f2 e0       	ldi	r31, 0x02	; 2
    37fe:	de 01       	movw	r26, r28
    3800:	af 57       	subi	r26, 0x7F	; 127
    3802:	be 4f       	sbci	r27, 0xFE	; 254
    3804:	01 90       	ld	r0, Z+
    3806:	0d 92       	st	X+, r0
    3808:	8a 95       	dec	r24
    380a:	e1 f7       	brne	.-8      	; 0x3804 <eepromLoadPattern+0xa4>
    380c:	63 e0       	ldi	r22, 0x03	; 3
    380e:	70 e0       	ldi	r23, 0x00	; 0
    3810:	ce 01       	movw	r24, r28
    3812:	8f 57       	subi	r24, 0x7F	; 127
    3814:	9e 4f       	sbci	r25, 0xFE	; 254
    3816:	0e 94 96 13 	call	0x272c	; 0x272c <outputS>
    381a:	36 c1       	rjmp	.+620    	; 0x3a88 <eepromLoadPattern+0x328>
    381c:	9e dd       	rcall	.-1220   	; 0x335a <twi_readAck>
    381e:	d8 01       	movw	r26, r16
    3820:	8d 93       	st	X+, r24
    3822:	8d 01       	movw	r16, r26
    3824:	ac 15       	cp	r26, r12
    3826:	bd 05       	cpc	r27, r13
    3828:	c9 f7       	brne	.-14     	; 0x381c <eepromLoadPattern+0xbc>
    382a:	a2 dd       	rcall	.-1212   	; 0x3370 <twi_readNak>
    382c:	c0 58       	subi	r28, 0x80	; 128
    382e:	de 4f       	sbci	r29, 0xFE	; 254
    3830:	88 83       	st	Y, r24
    3832:	c0 58       	subi	r28, 0x80	; 128
    3834:	d1 40       	sbci	r29, 0x01	; 1
    3836:	76 dd       	rcall	.-1300   	; 0x3324 <twi_stop>
    3838:	87 01       	movw	r16, r14
    383a:	4e 01       	movw	r8, r28
    383c:	b9 e0       	ldi	r27, 0x09	; 9
    383e:	8b 0e       	add	r8, r27
    3840:	91 1c       	adc	r9, r1
    3842:	f7 01       	movw	r30, r14
    3844:	d5 01       	movw	r26, r10
    3846:	8d 91       	ld	r24, X+
    3848:	5d 01       	movw	r10, r26
    384a:	81 93       	st	Z+, r24
    384c:	a8 15       	cp	r26, r8
    384e:	b9 05       	cpc	r27, r9
    3850:	c9 f7       	brne	.-14     	; 0x3844 <eepromLoadPattern+0xe4>
    3852:	d1 2c       	mov	r13, r1
    3854:	f4 01       	movw	r30, r8
    3856:	81 91       	ld	r24, Z+
    3858:	4f 01       	movw	r8, r30
    385a:	f8 01       	movw	r30, r16
    385c:	80 87       	std	Z+8, r24	; 0x08
    385e:	4d 2d       	mov	r20, r13
    3860:	60 81       	ld	r22, Z
    3862:	0f 5f       	subi	r16, 0xFF	; 255
    3864:	1f 4f       	sbci	r17, 0xFF	; 255
    3866:	bb da       	rcall	.-2698   	; 0x2dde <setOutputVolume>
    3868:	d3 94       	inc	r13
    386a:	f8 e0       	ldi	r31, 0x08	; 8
    386c:	df 12       	cpse	r13, r31
    386e:	f2 cf       	rjmp	.-28     	; 0x3854 <eepromLoadPattern+0xf4>
    3870:	5e 01       	movw	r10, r28
    3872:	81 e1       	ldi	r24, 0x11	; 17
    3874:	a8 0e       	add	r10, r24
    3876:	b1 1c       	adc	r11, r1
    3878:	67 01       	movw	r12, r14
    387a:	90 e1       	ldi	r25, 0x10	; 16
    387c:	c9 0e       	add	r12, r25
    387e:	d1 1c       	adc	r13, r1
    3880:	10 e0       	ldi	r17, 0x00	; 0
    3882:	d5 01       	movw	r26, r10
    3884:	4d 91       	ld	r20, X+
    3886:	5d 01       	movw	r10, r26
    3888:	f6 01       	movw	r30, r12
    388a:	41 93       	st	Z+, r20
    388c:	6f 01       	movw	r12, r30
    388e:	60 e0       	ldi	r22, 0x00	; 0
    3890:	81 2f       	mov	r24, r17
    3892:	1c db       	rcall	.-2504   	; 0x2ecc <outputSampleRate>
    3894:	1f 5f       	subi	r17, 0xFF	; 255
    3896:	18 30       	cpi	r17, 0x08	; 8
    3898:	a1 f7       	brne	.-24     	; 0x3882 <eepromLoadPattern+0x122>
    389a:	fe 01       	movw	r30, r28
    389c:	79 96       	adiw	r30, 0x19	; 25
    389e:	c7 01       	movw	r24, r14
    38a0:	48 96       	adiw	r24, 0x18	; 24
    38a2:	ae 01       	movw	r20, r28
    38a4:	47 5d       	subi	r20, 0xD7	; 215
    38a6:	5f 4f       	sbci	r21, 0xFF	; 255
    38a8:	21 91       	ld	r18, Z+
    38aa:	dc 01       	movw	r26, r24
    38ac:	2d 93       	st	X+, r18
    38ae:	cd 01       	movw	r24, r26
    38b0:	e4 17       	cp	r30, r20
    38b2:	f5 07       	cpc	r31, r21
    38b4:	c9 f7       	brne	.-14     	; 0x38a8 <eepromLoadPattern+0x148>
    38b6:	57 01       	movw	r10, r14
    38b8:	b8 e2       	ldi	r27, 0x28	; 40
    38ba:	ab 0e       	add	r10, r27
    38bc:	b1 1c       	adc	r11, r1
    38be:	de 01       	movw	r26, r28
    38c0:	d9 96       	adiw	r26, 0x39	; 57
    38c2:	c5 01       	movw	r24, r10
    38c4:	fa 01       	movw	r30, r20
    38c6:	21 91       	ld	r18, Z+
    38c8:	af 01       	movw	r20, r30
    38ca:	fc 01       	movw	r30, r24
    38cc:	21 93       	st	Z+, r18
    38ce:	cf 01       	movw	r24, r30
    38d0:	4a 17       	cp	r20, r26
    38d2:	5b 07       	cpc	r21, r27
    38d4:	b9 f7       	brne	.-18     	; 0x38c4 <eepromLoadPattern+0x164>
    38d6:	c7 01       	movw	r24, r14
    38d8:	c8 96       	adiw	r24, 0x38	; 56
    38da:	ae 01       	movw	r20, r28
    38dc:	47 5b       	subi	r20, 0xB7	; 183
    38de:	5f 4f       	sbci	r21, 0xFF	; 255
    38e0:	2d 91       	ld	r18, X+
    38e2:	fc 01       	movw	r30, r24
    38e4:	21 93       	st	Z+, r18
    38e6:	cf 01       	movw	r24, r30
    38e8:	a4 17       	cp	r26, r20
    38ea:	b5 07       	cpc	r27, r21
    38ec:	c9 f7       	brne	.-14     	; 0x38e0 <eepromLoadPattern+0x180>
    38ee:	c7 01       	movw	r24, r14
    38f0:	88 5b       	subi	r24, 0xB8	; 184
    38f2:	9f 4f       	sbci	r25, 0xFF	; 255
    38f4:	de 01       	movw	r26, r28
    38f6:	a7 5a       	subi	r26, 0xA7	; 167
    38f8:	bf 4f       	sbci	r27, 0xFF	; 255
    38fa:	fa 01       	movw	r30, r20
    38fc:	21 91       	ld	r18, Z+
    38fe:	af 01       	movw	r20, r30
    3900:	fc 01       	movw	r30, r24
    3902:	21 93       	st	Z+, r18
    3904:	cf 01       	movw	r24, r30
    3906:	4a 17       	cp	r20, r26
    3908:	5b 07       	cpc	r21, r27
    390a:	b9 f7       	brne	.-18     	; 0x38fa <eepromLoadPattern+0x19a>
    390c:	c7 01       	movw	r24, r14
    390e:	88 5a       	subi	r24, 0xA8	; 168
    3910:	9f 4f       	sbci	r25, 0xFF	; 255
    3912:	ae 01       	movw	r20, r28
    3914:	47 59       	subi	r20, 0x97	; 151
    3916:	5f 4f       	sbci	r21, 0xFF	; 255
    3918:	2d 91       	ld	r18, X+
    391a:	fc 01       	movw	r30, r24
    391c:	21 93       	st	Z+, r18
    391e:	cf 01       	movw	r24, r30
    3920:	a4 17       	cp	r26, r20
    3922:	b5 07       	cpc	r27, r21
    3924:	c9 f7       	brne	.-14     	; 0x3918 <eepromLoadPattern+0x1b8>
    3926:	d7 01       	movw	r26, r14
    3928:	a8 59       	subi	r26, 0x98	; 152
    392a:	bf 4f       	sbci	r27, 0xFF	; 255
    392c:	9e 01       	movw	r18, r28
    392e:	27 58       	subi	r18, 0x87	; 135
    3930:	3f 4f       	sbci	r19, 0xFF	; 255
    3932:	fa 01       	movw	r30, r20
    3934:	81 91       	ld	r24, Z+
    3936:	af 01       	movw	r20, r30
    3938:	8d 93       	st	X+, r24
    393a:	e2 17       	cp	r30, r18
    393c:	f3 07       	cpc	r31, r19
    393e:	c9 f7       	brne	.-14     	; 0x3932 <eepromLoadPattern+0x1d2>
    3940:	f7 01       	movw	r30, r14
    3942:	e8 53       	subi	r30, 0x38	; 56
    3944:	ff 4f       	sbci	r31, 0xFF	; 255
    3946:	eb 96       	adiw	r28, 0x3b	; 59
    3948:	8f ad       	ldd	r24, Y+63	; 0x3f
    394a:	eb 97       	sbiw	r28, 0x3b	; 59
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	98 2f       	mov	r25, r24
    3950:	88 27       	eor	r24, r24
    3952:	ec 96       	adiw	r28, 0x3c	; 60
    3954:	2f ad       	ldd	r18, Y+63	; 0x3f
    3956:	ec 97       	sbiw	r28, 0x3c	; 60
    3958:	82 2b       	or	r24, r18
    395a:	91 83       	std	Z+1, r25	; 0x01
    395c:	80 83       	st	Z, r24
    395e:	ed 96       	adiw	r28, 0x3d	; 61
    3960:	8f ad       	ldd	r24, Y+63	; 0x3f
    3962:	ed 97       	sbiw	r28, 0x3d	; 61
    3964:	32 96       	adiw	r30, 0x02	; 2
    3966:	80 83       	st	Z, r24
    3968:	ae 01       	movw	r20, r28
    396a:	4f 57       	subi	r20, 0x7F	; 127
    396c:	5f 4f       	sbci	r21, 0xFF	; 255
    396e:	c7 01       	movw	r24, r14
    3970:	88 58       	subi	r24, 0x88	; 136
    3972:	9f 4f       	sbci	r25, 0xFF	; 255
    3974:	fe 01       	movw	r30, r28
    3976:	ef 56       	subi	r30, 0x6F	; 111
    3978:	ff 4f       	sbci	r31, 0xFF	; 255
    397a:	da 01       	movw	r26, r20
    397c:	2d 91       	ld	r18, X+
    397e:	ad 01       	movw	r20, r26
    3980:	dc 01       	movw	r26, r24
    3982:	2d 93       	st	X+, r18
    3984:	cd 01       	movw	r24, r26
    3986:	e4 17       	cp	r30, r20
    3988:	f5 07       	cpc	r31, r21
    398a:	b9 f7       	brne	.-18     	; 0x397a <eepromLoadPattern+0x21a>
    398c:	c7 01       	movw	r24, r14
    398e:	88 57       	subi	r24, 0x78	; 120
    3990:	9f 4f       	sbci	r25, 0xFF	; 255
    3992:	ae 01       	movw	r20, r28
    3994:	4f 55       	subi	r20, 0x5F	; 95
    3996:	5f 4f       	sbci	r21, 0xFF	; 255
    3998:	21 91       	ld	r18, Z+
    399a:	dc 01       	movw	r26, r24
    399c:	2d 93       	st	X+, r18
    399e:	cd 01       	movw	r24, r26
    39a0:	4e 17       	cp	r20, r30
    39a2:	5f 07       	cpc	r21, r31
    39a4:	c9 f7       	brne	.-14     	; 0x3998 <eepromLoadPattern+0x238>
    39a6:	87 01       	movw	r16, r14
    39a8:	08 56       	subi	r16, 0x68	; 104
    39aa:	1f 4f       	sbci	r17, 0xFF	; 255
    39ac:	4e 01       	movw	r8, r28
    39ae:	b1 eb       	ldi	r27, 0xB1	; 177
    39b0:	8b 0e       	add	r8, r27
    39b2:	91 1c       	adc	r9, r1
    39b4:	f8 01       	movw	r30, r16
    39b6:	da 01       	movw	r26, r20
    39b8:	8d 91       	ld	r24, X+
    39ba:	ad 01       	movw	r20, r26
    39bc:	81 93       	st	Z+, r24
    39be:	8a 16       	cp	r8, r26
    39c0:	9b 06       	cpc	r9, r27
    39c2:	c9 f7       	brne	.-14     	; 0x39b6 <eepromLoadPattern+0x256>
    39c4:	6e 01       	movw	r12, r28
    39c6:	b1 ec       	ldi	r27, 0xC1	; 193
    39c8:	cb 0e       	add	r12, r27
    39ca:	d1 1c       	adc	r13, r1
    39cc:	f4 01       	movw	r30, r8
    39ce:	81 91       	ld	r24, Z+
    39d0:	4f 01       	movw	r8, r30
    39d2:	f8 01       	movw	r30, r16
    39d4:	80 8b       	std	Z+16, r24	; 0x10
    39d6:	d5 01       	movw	r26, r10
    39d8:	2d 91       	ld	r18, X+
    39da:	5d 01       	movw	r10, r26
    39dc:	1f 96       	adiw	r26, 0x0f	; 15
    39de:	4c 91       	ld	r20, X
    39e0:	60 81       	ld	r22, Z
    39e2:	0f 5f       	subi	r16, 0xFF	; 255
    39e4:	1f 4f       	sbci	r17, 0xFF	; 255
    39e6:	1f da       	rcall	.-3010   	; 0x2e26 <setTrackVolume>
    39e8:	c8 14       	cp	r12, r8
    39ea:	d9 04       	cpc	r13, r9
    39ec:	79 f7       	brne	.-34     	; 0x39cc <eepromLoadPattern+0x26c>
    39ee:	97 01       	movw	r18, r14
    39f0:	28 54       	subi	r18, 0x48	; 72
    39f2:	3f 4f       	sbci	r19, 0xFF	; 255
    39f4:	de 01       	movw	r26, r28
    39f6:	af 52       	subi	r26, 0x2F	; 47
    39f8:	bf 4f       	sbci	r27, 0xFF	; 255
    39fa:	f6 01       	movw	r30, r12
    39fc:	81 91       	ld	r24, Z+
    39fe:	6f 01       	movw	r12, r30
    3a00:	f9 01       	movw	r30, r18
    3a02:	81 93       	st	Z+, r24
    3a04:	9f 01       	movw	r18, r30
    3a06:	ca 16       	cp	r12, r26
    3a08:	db 06       	cpc	r13, r27
    3a0a:	b9 f7       	brne	.-18     	; 0x39fa <eepromLoadPattern+0x29a>
    3a0c:	c7 01       	movw	r24, r14
    3a0e:	85 53       	subi	r24, 0x35	; 53
    3a10:	9f 4f       	sbci	r25, 0xFF	; 255
    3a12:	ae 01       	movw	r20, r28
    3a14:	4f 51       	subi	r20, 0x1F	; 31
    3a16:	5f 4f       	sbci	r21, 0xFF	; 255
    3a18:	2d 91       	ld	r18, X+
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	21 93       	st	Z+, r18
    3a1e:	cf 01       	movw	r24, r30
    3a20:	4a 17       	cp	r20, r26
    3a22:	5b 07       	cpc	r21, r27
    3a24:	c9 f7       	brne	.-14     	; 0x3a18 <eepromLoadPattern+0x2b8>
    3a26:	c7 01       	movw	r24, r14
    3a28:	85 52       	subi	r24, 0x25	; 37
    3a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a2c:	be 01       	movw	r22, r28
    3a2e:	6f 50       	subi	r22, 0x0F	; 15
    3a30:	7f 4f       	sbci	r23, 0xFF	; 255
    3a32:	da 01       	movw	r26, r20
    3a34:	2d 91       	ld	r18, X+
    3a36:	ad 01       	movw	r20, r26
    3a38:	fc 01       	movw	r30, r24
    3a3a:	21 93       	st	Z+, r18
    3a3c:	cf 01       	movw	r24, r30
    3a3e:	a6 17       	cp	r26, r22
    3a40:	b7 07       	cpc	r27, r23
    3a42:	b9 f7       	brne	.-18     	; 0x3a32 <eepromLoadPattern+0x2d2>
    3a44:	c7 01       	movw	r24, r14
    3a46:	85 51       	subi	r24, 0x15	; 21
    3a48:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4a:	fe 01       	movw	r30, r28
    3a4c:	ef 5f       	subi	r30, 0xFF	; 255
    3a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a50:	db 01       	movw	r26, r22
    3a52:	2d 91       	ld	r18, X+
    3a54:	bd 01       	movw	r22, r26
    3a56:	dc 01       	movw	r26, r24
    3a58:	2d 93       	st	X+, r18
    3a5a:	cd 01       	movw	r24, r26
    3a5c:	e6 17       	cp	r30, r22
    3a5e:	f7 07       	cpc	r31, r23
    3a60:	b9 f7       	brne	.-18     	; 0x3a50 <eepromLoadPattern+0x2f0>
    3a62:	d7 01       	movw	r26, r14
    3a64:	a5 50       	subi	r26, 0x05	; 5
    3a66:	bf 4f       	sbci	r27, 0xFF	; 255
    3a68:	ae 01       	movw	r20, r28
    3a6a:	4f 57       	subi	r20, 0x7F	; 127
    3a6c:	5e 4f       	sbci	r21, 0xFE	; 254
    3a6e:	80 81       	ld	r24, Z
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	98 2f       	mov	r25, r24
    3a74:	88 27       	eor	r24, r24
    3a76:	21 81       	ldd	r18, Z+1	; 0x01
    3a78:	82 2b       	or	r24, r18
    3a7a:	8d 93       	st	X+, r24
    3a7c:	9d 93       	st	X+, r25
    3a7e:	32 96       	adiw	r30, 0x02	; 2
    3a80:	4e 17       	cp	r20, r30
    3a82:	5f 07       	cpc	r21, r31
    3a84:	a1 f7       	brne	.-24     	; 0x3a6e <eepromLoadPattern+0x30e>
    3a86:	0a c0       	rjmp	.+20     	; 0x3a9c <eepromLoadPattern+0x33c>
    3a88:	fe 01       	movw	r30, r28
    3a8a:	31 96       	adiw	r30, 0x01	; 1
    3a8c:	5f 01       	movw	r10, r30
    3a8e:	6e 01       	movw	r12, r28
    3a90:	f0 e8       	ldi	r31, 0x80	; 128
    3a92:	cf 1a       	sub	r12, r31
    3a94:	fe ef       	ldi	r31, 0xFE	; 254
    3a96:	df 0a       	sbc	r13, r31
    3a98:	85 01       	movw	r16, r10
    3a9a:	c0 ce       	rjmp	.-640    	; 0x381c <eepromLoadPattern+0xbc>
    3a9c:	cc 56       	subi	r28, 0x6C	; 108
    3a9e:	de 4f       	sbci	r29, 0xFE	; 254
    3aa0:	0f b6       	in	r0, 0x3f	; 63
    3aa2:	f8 94       	cli
    3aa4:	de bf       	out	0x3e, r29	; 62
    3aa6:	0f be       	out	0x3f, r0	; 63
    3aa8:	cd bf       	out	0x3d, r28	; 61
    3aaa:	df 91       	pop	r29
    3aac:	cf 91       	pop	r28
    3aae:	1f 91       	pop	r17
    3ab0:	0f 91       	pop	r16
    3ab2:	ff 90       	pop	r15
    3ab4:	ef 90       	pop	r14
    3ab6:	df 90       	pop	r13
    3ab8:	cf 90       	pop	r12
    3aba:	bf 90       	pop	r11
    3abc:	af 90       	pop	r10
    3abe:	9f 90       	pop	r9
    3ac0:	8f 90       	pop	r8
    3ac2:	08 95       	ret

00003ac4 <factoryResetEeprom>:
    3ac4:	ff 92       	push	r15
    3ac6:	0f 93       	push	r16
    3ac8:	1f 93       	push	r17
    3aca:	cf 93       	push	r28
    3acc:	df 93       	push	r29
    3ace:	cd b7       	in	r28, 0x3d	; 61
    3ad0:	de b7       	in	r29, 0x3e	; 62
    3ad2:	65 97       	sbiw	r28, 0x15	; 21
    3ad4:	0f b6       	in	r0, 0x3f	; 63
    3ad6:	f8 94       	cli
    3ad8:	de bf       	out	0x3e, r29	; 62
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	cd bf       	out	0x3d, r28	; 61
    3ade:	85 e1       	ldi	r24, 0x15	; 21
    3ae0:	e1 ed       	ldi	r30, 0xD1	; 209
    3ae2:	f3 e0       	ldi	r31, 0x03	; 3
    3ae4:	de 01       	movw	r26, r28
    3ae6:	11 96       	adiw	r26, 0x01	; 1
    3ae8:	01 90       	ld	r0, Z+
    3aea:	0d 92       	st	X+, r0
    3aec:	8a 95       	dec	r24
    3aee:	e1 f7       	brne	.-8      	; 0x3ae8 <factoryResetEeprom+0x24>
    3af0:	10 e0       	ldi	r17, 0x00	; 0
    3af2:	0f 2e       	mov	r0, r31
    3af4:	ff e4       	ldi	r31, 0x4F	; 79
    3af6:	ff 2e       	mov	r15, r31
    3af8:	f0 2d       	mov	r31, r0
    3afa:	0b ed       	ldi	r16, 0xDB	; 219
    3afc:	1f 93       	push	r17
    3afe:	8d b7       	in	r24, 0x3d	; 61
    3b00:	9e b7       	in	r25, 0x3e	; 62
    3b02:	8b 57       	subi	r24, 0x7B	; 123
    3b04:	91 40       	sbci	r25, 0x01	; 1
    3b06:	0f b6       	in	r0, 0x3f	; 63
    3b08:	f8 94       	cli
    3b0a:	9e bf       	out	0x3e, r25	; 62
    3b0c:	0f be       	out	0x3f, r0	; 63
    3b0e:	8d bf       	out	0x3d, r24	; 61
    3b10:	ad b7       	in	r26, 0x3d	; 61
    3b12:	be b7       	in	r27, 0x3e	; 62
    3b14:	11 96       	adiw	r26, 0x01	; 1
    3b16:	8b e7       	ldi	r24, 0x7B	; 123
    3b18:	91 e0       	ldi	r25, 0x01	; 1
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	7e 96       	adiw	r30, 0x1e	; 30
    3b1e:	01 90       	ld	r0, Z+
    3b20:	0d 92       	st	X+, r0
    3b22:	01 97       	sbiw	r24, 0x01	; 1
    3b24:	e1 f7       	brne	.-8      	; 0x3b1e <factoryResetEeprom+0x5a>
    3b26:	2f dc       	rcall	.-1954   	; 0x3386 <eepromSavePattern>
    3b28:	8f e1       	ldi	r24, 0x1F	; 31
    3b2a:	9e e4       	ldi	r25, 0x4E	; 78
    3b2c:	01 97       	sbiw	r24, 0x01	; 1
    3b2e:	f1 f7       	brne	.-4      	; 0x3b2c <factoryResetEeprom+0x68>
    3b30:	00 c0       	rjmp	.+0      	; 0x3b32 <factoryResetEeprom+0x6e>
    3b32:	00 00       	nop
    3b34:	1f 9d       	mul	r17, r15
    3b36:	81 2d       	mov	r24, r1
    3b38:	11 24       	eor	r1, r1
    3b3a:	86 95       	lsr	r24
    3b3c:	86 95       	lsr	r24
    3b3e:	e1 e0       	ldi	r30, 0x01	; 1
    3b40:	f0 e0       	ldi	r31, 0x00	; 0
    3b42:	ec 0f       	add	r30, r28
    3b44:	fd 1f       	adc	r31, r29
    3b46:	e8 0f       	add	r30, r24
    3b48:	f1 1d       	adc	r31, r1
    3b4a:	00 83       	st	Z, r16
    3b4c:	0f b6       	in	r0, 0x3f	; 63
    3b4e:	f8 94       	cli
    3b50:	de bf       	out	0x3e, r29	; 62
    3b52:	0f be       	out	0x3f, r0	; 63
    3b54:	cd bf       	out	0x3d, r28	; 61
    3b56:	63 e0       	ldi	r22, 0x03	; 3
    3b58:	70 e0       	ldi	r23, 0x00	; 0
    3b5a:	ce 01       	movw	r24, r28
    3b5c:	01 96       	adiw	r24, 0x01	; 1
    3b5e:	0e 94 96 13 	call	0x272c	; 0x272c <outputS>
    3b62:	1f 5f       	subi	r17, 0xFF	; 255
    3b64:	1f 3f       	cpi	r17, 0xFF	; 255
    3b66:	51 f6       	brne	.-108    	; 0x3afc <factoryResetEeprom+0x38>
    3b68:	65 96       	adiw	r28, 0x15	; 21
    3b6a:	0f b6       	in	r0, 0x3f	; 63
    3b6c:	f8 94       	cli
    3b6e:	de bf       	out	0x3e, r29	; 62
    3b70:	0f be       	out	0x3f, r0	; 63
    3b72:	cd bf       	out	0x3d, r28	; 61
    3b74:	df 91       	pop	r29
    3b76:	cf 91       	pop	r28
    3b78:	1f 91       	pop	r17
    3b7a:	0f 91       	pop	r16
    3b7c:	ff 90       	pop	r15
    3b7e:	08 95       	ret

00003b80 <globalWrite>:

//this happens when save button is pressed on global menu. 
void globalWrite(Globals *currentGlobals)
{
    3b80:	cf 93       	push	r28
    3b82:	df 93       	push	r29
    3b84:	ec 01       	movw	r28, r24
	eeprom_write_byte(0,currentGlobals->midiChannel); //this may be wrong, but it does get rid of the warning. 
    3b86:	68 89       	ldd	r22, Y+16	; 0x10
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	46 d2       	rcall	.+1164   	; 0x401a <eeprom_write_byte>
	eeprom_write_block(currentGlobals->midiTrackNote,1,16);
    3b8e:	40 e1       	ldi	r20, 0x10	; 16
    3b90:	50 e0       	ldi	r21, 0x00	; 0
    3b92:	61 e0       	ldi	r22, 0x01	; 1
    3b94:	70 e0       	ldi	r23, 0x00	; 0
    3b96:	ce 01       	movw	r24, r28
    3b98:	41 96       	adiw	r24, 0x11	; 17
    3b9a:	36 d2       	rcall	.+1132   	; 0x4008 <eeprom_write_block>
}
    3b9c:	df 91       	pop	r29
    3b9e:	cf 91       	pop	r28
    3ba0:	08 95       	ret

00003ba2 <globalLoad>:
//This happens at startup only, in function "initGlobals"

void globalLoad(Globals *currentGlobals, uint8_t factoryReset)
{
    3ba2:	cf 93       	push	r28
    3ba4:	df 93       	push	r29
	//we need to load all of the global midi settings here. 
	//we can also check the factory reset bit here. 
	//if the program has not gone through the initial state, and had the internal eeprom formatted, then this will return garbage. 
	if(factoryReset==0)
    3ba6:	61 11       	cpse	r22, r1
    3ba8:	0c c0       	rjmp	.+24     	; 0x3bc2 <globalLoad+0x20>
    3baa:	ec 01       	movw	r28, r24
	{
		currentGlobals->midiChannel = eeprom_read_byte(0);
    3bac:	80 e0       	ldi	r24, 0x00	; 0
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	23 d2       	rcall	.+1094   	; 0x3ff8 <eeprom_read_byte>
    3bb2:	88 8b       	std	Y+16, r24	; 0x10
		eeprom_read_block(currentGlobals->midiTrackNote,1,16);
    3bb4:	40 e1       	ldi	r20, 0x10	; 16
    3bb6:	50 e0       	ldi	r21, 0x00	; 0
    3bb8:	61 e0       	ldi	r22, 0x01	; 1
    3bba:	70 e0       	ldi	r23, 0x00	; 0
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	41 96       	adiw	r24, 0x11	; 17
    3bc0:	0b d2       	rcall	.+1046   	; 0x3fd8 <eeprom_read_block>
	}
}
    3bc2:	df 91       	pop	r29
    3bc4:	cf 91       	pop	r28
    3bc6:	08 95       	ret

00003bc8 <__subsf3>:
    3bc8:	50 58       	subi	r21, 0x80	; 128

00003bca <__addsf3>:
    3bca:	bb 27       	eor	r27, r27
    3bcc:	aa 27       	eor	r26, r26
    3bce:	0e d0       	rcall	.+28     	; 0x3bec <__addsf3x>
    3bd0:	4d c1       	rjmp	.+666    	; 0x3e6c <__fp_round>
    3bd2:	3e d1       	rcall	.+636    	; 0x3e50 <__fp_pscA>
    3bd4:	30 f0       	brcs	.+12     	; 0x3be2 <__addsf3+0x18>
    3bd6:	43 d1       	rcall	.+646    	; 0x3e5e <__fp_pscB>
    3bd8:	20 f0       	brcs	.+8      	; 0x3be2 <__addsf3+0x18>
    3bda:	31 f4       	brne	.+12     	; 0x3be8 <__addsf3+0x1e>
    3bdc:	9f 3f       	cpi	r25, 0xFF	; 255
    3bde:	11 f4       	brne	.+4      	; 0x3be4 <__addsf3+0x1a>
    3be0:	1e f4       	brtc	.+6      	; 0x3be8 <__addsf3+0x1e>
    3be2:	33 c1       	rjmp	.+614    	; 0x3e4a <__fp_nan>
    3be4:	0e f4       	brtc	.+2      	; 0x3be8 <__addsf3+0x1e>
    3be6:	e0 95       	com	r30
    3be8:	e7 fb       	bst	r30, 7
    3bea:	29 c1       	rjmp	.+594    	; 0x3e3e <__fp_inf>

00003bec <__addsf3x>:
    3bec:	e9 2f       	mov	r30, r25
    3bee:	4f d1       	rcall	.+670    	; 0x3e8e <__fp_split3>
    3bf0:	80 f3       	brcs	.-32     	; 0x3bd2 <__addsf3+0x8>
    3bf2:	ba 17       	cp	r27, r26
    3bf4:	62 07       	cpc	r22, r18
    3bf6:	73 07       	cpc	r23, r19
    3bf8:	84 07       	cpc	r24, r20
    3bfa:	95 07       	cpc	r25, r21
    3bfc:	18 f0       	brcs	.+6      	; 0x3c04 <__addsf3x+0x18>
    3bfe:	71 f4       	brne	.+28     	; 0x3c1c <__addsf3x+0x30>
    3c00:	9e f5       	brtc	.+102    	; 0x3c68 <__addsf3x+0x7c>
    3c02:	67 c1       	rjmp	.+718    	; 0x3ed2 <__fp_zero>
    3c04:	0e f4       	brtc	.+2      	; 0x3c08 <__addsf3x+0x1c>
    3c06:	e0 95       	com	r30
    3c08:	0b 2e       	mov	r0, r27
    3c0a:	ba 2f       	mov	r27, r26
    3c0c:	a0 2d       	mov	r26, r0
    3c0e:	0b 01       	movw	r0, r22
    3c10:	b9 01       	movw	r22, r18
    3c12:	90 01       	movw	r18, r0
    3c14:	0c 01       	movw	r0, r24
    3c16:	ca 01       	movw	r24, r20
    3c18:	a0 01       	movw	r20, r0
    3c1a:	11 24       	eor	r1, r1
    3c1c:	ff 27       	eor	r31, r31
    3c1e:	59 1b       	sub	r21, r25
    3c20:	99 f0       	breq	.+38     	; 0x3c48 <__addsf3x+0x5c>
    3c22:	59 3f       	cpi	r21, 0xF9	; 249
    3c24:	50 f4       	brcc	.+20     	; 0x3c3a <__addsf3x+0x4e>
    3c26:	50 3e       	cpi	r21, 0xE0	; 224
    3c28:	68 f1       	brcs	.+90     	; 0x3c84 <__addsf3x+0x98>
    3c2a:	1a 16       	cp	r1, r26
    3c2c:	f0 40       	sbci	r31, 0x00	; 0
    3c2e:	a2 2f       	mov	r26, r18
    3c30:	23 2f       	mov	r18, r19
    3c32:	34 2f       	mov	r19, r20
    3c34:	44 27       	eor	r20, r20
    3c36:	58 5f       	subi	r21, 0xF8	; 248
    3c38:	f3 cf       	rjmp	.-26     	; 0x3c20 <__addsf3x+0x34>
    3c3a:	46 95       	lsr	r20
    3c3c:	37 95       	ror	r19
    3c3e:	27 95       	ror	r18
    3c40:	a7 95       	ror	r26
    3c42:	f0 40       	sbci	r31, 0x00	; 0
    3c44:	53 95       	inc	r21
    3c46:	c9 f7       	brne	.-14     	; 0x3c3a <__addsf3x+0x4e>
    3c48:	7e f4       	brtc	.+30     	; 0x3c68 <__addsf3x+0x7c>
    3c4a:	1f 16       	cp	r1, r31
    3c4c:	ba 0b       	sbc	r27, r26
    3c4e:	62 0b       	sbc	r22, r18
    3c50:	73 0b       	sbc	r23, r19
    3c52:	84 0b       	sbc	r24, r20
    3c54:	ba f0       	brmi	.+46     	; 0x3c84 <__addsf3x+0x98>
    3c56:	91 50       	subi	r25, 0x01	; 1
    3c58:	a1 f0       	breq	.+40     	; 0x3c82 <__addsf3x+0x96>
    3c5a:	ff 0f       	add	r31, r31
    3c5c:	bb 1f       	adc	r27, r27
    3c5e:	66 1f       	adc	r22, r22
    3c60:	77 1f       	adc	r23, r23
    3c62:	88 1f       	adc	r24, r24
    3c64:	c2 f7       	brpl	.-16     	; 0x3c56 <__addsf3x+0x6a>
    3c66:	0e c0       	rjmp	.+28     	; 0x3c84 <__addsf3x+0x98>
    3c68:	ba 0f       	add	r27, r26
    3c6a:	62 1f       	adc	r22, r18
    3c6c:	73 1f       	adc	r23, r19
    3c6e:	84 1f       	adc	r24, r20
    3c70:	48 f4       	brcc	.+18     	; 0x3c84 <__addsf3x+0x98>
    3c72:	87 95       	ror	r24
    3c74:	77 95       	ror	r23
    3c76:	67 95       	ror	r22
    3c78:	b7 95       	ror	r27
    3c7a:	f7 95       	ror	r31
    3c7c:	9e 3f       	cpi	r25, 0xFE	; 254
    3c7e:	08 f0       	brcs	.+2      	; 0x3c82 <__addsf3x+0x96>
    3c80:	b3 cf       	rjmp	.-154    	; 0x3be8 <__addsf3+0x1e>
    3c82:	93 95       	inc	r25
    3c84:	88 0f       	add	r24, r24
    3c86:	08 f0       	brcs	.+2      	; 0x3c8a <__addsf3x+0x9e>
    3c88:	99 27       	eor	r25, r25
    3c8a:	ee 0f       	add	r30, r30
    3c8c:	97 95       	ror	r25
    3c8e:	87 95       	ror	r24
    3c90:	08 95       	ret

00003c92 <__divsf3>:
    3c92:	0c d0       	rcall	.+24     	; 0x3cac <__divsf3x>
    3c94:	eb c0       	rjmp	.+470    	; 0x3e6c <__fp_round>
    3c96:	e3 d0       	rcall	.+454    	; 0x3e5e <__fp_pscB>
    3c98:	40 f0       	brcs	.+16     	; 0x3caa <__divsf3+0x18>
    3c9a:	da d0       	rcall	.+436    	; 0x3e50 <__fp_pscA>
    3c9c:	30 f0       	brcs	.+12     	; 0x3caa <__divsf3+0x18>
    3c9e:	21 f4       	brne	.+8      	; 0x3ca8 <__divsf3+0x16>
    3ca0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ca2:	19 f0       	breq	.+6      	; 0x3caa <__divsf3+0x18>
    3ca4:	cc c0       	rjmp	.+408    	; 0x3e3e <__fp_inf>
    3ca6:	51 11       	cpse	r21, r1
    3ca8:	15 c1       	rjmp	.+554    	; 0x3ed4 <__fp_szero>
    3caa:	cf c0       	rjmp	.+414    	; 0x3e4a <__fp_nan>

00003cac <__divsf3x>:
    3cac:	f0 d0       	rcall	.+480    	; 0x3e8e <__fp_split3>
    3cae:	98 f3       	brcs	.-26     	; 0x3c96 <__divsf3+0x4>

00003cb0 <__divsf3_pse>:
    3cb0:	99 23       	and	r25, r25
    3cb2:	c9 f3       	breq	.-14     	; 0x3ca6 <__divsf3+0x14>
    3cb4:	55 23       	and	r21, r21
    3cb6:	b1 f3       	breq	.-20     	; 0x3ca4 <__divsf3+0x12>
    3cb8:	95 1b       	sub	r25, r21
    3cba:	55 0b       	sbc	r21, r21
    3cbc:	bb 27       	eor	r27, r27
    3cbe:	aa 27       	eor	r26, r26
    3cc0:	62 17       	cp	r22, r18
    3cc2:	73 07       	cpc	r23, r19
    3cc4:	84 07       	cpc	r24, r20
    3cc6:	38 f0       	brcs	.+14     	; 0x3cd6 <__divsf3_pse+0x26>
    3cc8:	9f 5f       	subi	r25, 0xFF	; 255
    3cca:	5f 4f       	sbci	r21, 0xFF	; 255
    3ccc:	22 0f       	add	r18, r18
    3cce:	33 1f       	adc	r19, r19
    3cd0:	44 1f       	adc	r20, r20
    3cd2:	aa 1f       	adc	r26, r26
    3cd4:	a9 f3       	breq	.-22     	; 0x3cc0 <__divsf3_pse+0x10>
    3cd6:	33 d0       	rcall	.+102    	; 0x3d3e <__divsf3_pse+0x8e>
    3cd8:	0e 2e       	mov	r0, r30
    3cda:	3a f0       	brmi	.+14     	; 0x3cea <__divsf3_pse+0x3a>
    3cdc:	e0 e8       	ldi	r30, 0x80	; 128
    3cde:	30 d0       	rcall	.+96     	; 0x3d40 <__divsf3_pse+0x90>
    3ce0:	91 50       	subi	r25, 0x01	; 1
    3ce2:	50 40       	sbci	r21, 0x00	; 0
    3ce4:	e6 95       	lsr	r30
    3ce6:	00 1c       	adc	r0, r0
    3ce8:	ca f7       	brpl	.-14     	; 0x3cdc <__divsf3_pse+0x2c>
    3cea:	29 d0       	rcall	.+82     	; 0x3d3e <__divsf3_pse+0x8e>
    3cec:	fe 2f       	mov	r31, r30
    3cee:	27 d0       	rcall	.+78     	; 0x3d3e <__divsf3_pse+0x8e>
    3cf0:	66 0f       	add	r22, r22
    3cf2:	77 1f       	adc	r23, r23
    3cf4:	88 1f       	adc	r24, r24
    3cf6:	bb 1f       	adc	r27, r27
    3cf8:	26 17       	cp	r18, r22
    3cfa:	37 07       	cpc	r19, r23
    3cfc:	48 07       	cpc	r20, r24
    3cfe:	ab 07       	cpc	r26, r27
    3d00:	b0 e8       	ldi	r27, 0x80	; 128
    3d02:	09 f0       	breq	.+2      	; 0x3d06 <__divsf3_pse+0x56>
    3d04:	bb 0b       	sbc	r27, r27
    3d06:	80 2d       	mov	r24, r0
    3d08:	bf 01       	movw	r22, r30
    3d0a:	ff 27       	eor	r31, r31
    3d0c:	93 58       	subi	r25, 0x83	; 131
    3d0e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d10:	2a f0       	brmi	.+10     	; 0x3d1c <__divsf3_pse+0x6c>
    3d12:	9e 3f       	cpi	r25, 0xFE	; 254
    3d14:	51 05       	cpc	r21, r1
    3d16:	68 f0       	brcs	.+26     	; 0x3d32 <__divsf3_pse+0x82>
    3d18:	92 c0       	rjmp	.+292    	; 0x3e3e <__fp_inf>
    3d1a:	dc c0       	rjmp	.+440    	; 0x3ed4 <__fp_szero>
    3d1c:	5f 3f       	cpi	r21, 0xFF	; 255
    3d1e:	ec f3       	brlt	.-6      	; 0x3d1a <__divsf3_pse+0x6a>
    3d20:	98 3e       	cpi	r25, 0xE8	; 232
    3d22:	dc f3       	brlt	.-10     	; 0x3d1a <__divsf3_pse+0x6a>
    3d24:	86 95       	lsr	r24
    3d26:	77 95       	ror	r23
    3d28:	67 95       	ror	r22
    3d2a:	b7 95       	ror	r27
    3d2c:	f7 95       	ror	r31
    3d2e:	9f 5f       	subi	r25, 0xFF	; 255
    3d30:	c9 f7       	brne	.-14     	; 0x3d24 <__divsf3_pse+0x74>
    3d32:	88 0f       	add	r24, r24
    3d34:	91 1d       	adc	r25, r1
    3d36:	96 95       	lsr	r25
    3d38:	87 95       	ror	r24
    3d3a:	97 f9       	bld	r25, 7
    3d3c:	08 95       	ret
    3d3e:	e1 e0       	ldi	r30, 0x01	; 1
    3d40:	66 0f       	add	r22, r22
    3d42:	77 1f       	adc	r23, r23
    3d44:	88 1f       	adc	r24, r24
    3d46:	bb 1f       	adc	r27, r27
    3d48:	62 17       	cp	r22, r18
    3d4a:	73 07       	cpc	r23, r19
    3d4c:	84 07       	cpc	r24, r20
    3d4e:	ba 07       	cpc	r27, r26
    3d50:	20 f0       	brcs	.+8      	; 0x3d5a <__divsf3_pse+0xaa>
    3d52:	62 1b       	sub	r22, r18
    3d54:	73 0b       	sbc	r23, r19
    3d56:	84 0b       	sbc	r24, r20
    3d58:	ba 0b       	sbc	r27, r26
    3d5a:	ee 1f       	adc	r30, r30
    3d5c:	88 f7       	brcc	.-30     	; 0x3d40 <__divsf3_pse+0x90>
    3d5e:	e0 95       	com	r30
    3d60:	08 95       	ret

00003d62 <__fixsfsi>:
    3d62:	04 d0       	rcall	.+8      	; 0x3d6c <__fixunssfsi>
    3d64:	68 94       	set
    3d66:	b1 11       	cpse	r27, r1
    3d68:	b5 c0       	rjmp	.+362    	; 0x3ed4 <__fp_szero>
    3d6a:	08 95       	ret

00003d6c <__fixunssfsi>:
    3d6c:	98 d0       	rcall	.+304    	; 0x3e9e <__fp_splitA>
    3d6e:	88 f0       	brcs	.+34     	; 0x3d92 <__fixunssfsi+0x26>
    3d70:	9f 57       	subi	r25, 0x7F	; 127
    3d72:	90 f0       	brcs	.+36     	; 0x3d98 <__fixunssfsi+0x2c>
    3d74:	b9 2f       	mov	r27, r25
    3d76:	99 27       	eor	r25, r25
    3d78:	b7 51       	subi	r27, 0x17	; 23
    3d7a:	a0 f0       	brcs	.+40     	; 0x3da4 <__fixunssfsi+0x38>
    3d7c:	d1 f0       	breq	.+52     	; 0x3db2 <__fixunssfsi+0x46>
    3d7e:	66 0f       	add	r22, r22
    3d80:	77 1f       	adc	r23, r23
    3d82:	88 1f       	adc	r24, r24
    3d84:	99 1f       	adc	r25, r25
    3d86:	1a f0       	brmi	.+6      	; 0x3d8e <__fixunssfsi+0x22>
    3d88:	ba 95       	dec	r27
    3d8a:	c9 f7       	brne	.-14     	; 0x3d7e <__fixunssfsi+0x12>
    3d8c:	12 c0       	rjmp	.+36     	; 0x3db2 <__fixunssfsi+0x46>
    3d8e:	b1 30       	cpi	r27, 0x01	; 1
    3d90:	81 f0       	breq	.+32     	; 0x3db2 <__fixunssfsi+0x46>
    3d92:	9f d0       	rcall	.+318    	; 0x3ed2 <__fp_zero>
    3d94:	b1 e0       	ldi	r27, 0x01	; 1
    3d96:	08 95       	ret
    3d98:	9c c0       	rjmp	.+312    	; 0x3ed2 <__fp_zero>
    3d9a:	67 2f       	mov	r22, r23
    3d9c:	78 2f       	mov	r23, r24
    3d9e:	88 27       	eor	r24, r24
    3da0:	b8 5f       	subi	r27, 0xF8	; 248
    3da2:	39 f0       	breq	.+14     	; 0x3db2 <__fixunssfsi+0x46>
    3da4:	b9 3f       	cpi	r27, 0xF9	; 249
    3da6:	cc f3       	brlt	.-14     	; 0x3d9a <__fixunssfsi+0x2e>
    3da8:	86 95       	lsr	r24
    3daa:	77 95       	ror	r23
    3dac:	67 95       	ror	r22
    3dae:	b3 95       	inc	r27
    3db0:	d9 f7       	brne	.-10     	; 0x3da8 <__fixunssfsi+0x3c>
    3db2:	3e f4       	brtc	.+14     	; 0x3dc2 <__fixunssfsi+0x56>
    3db4:	90 95       	com	r25
    3db6:	80 95       	com	r24
    3db8:	70 95       	com	r23
    3dba:	61 95       	neg	r22
    3dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    3dbe:	8f 4f       	sbci	r24, 0xFF	; 255
    3dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc2:	08 95       	ret

00003dc4 <__floatunsisf>:
    3dc4:	e8 94       	clt
    3dc6:	09 c0       	rjmp	.+18     	; 0x3dda <__floatsisf+0x12>

00003dc8 <__floatsisf>:
    3dc8:	97 fb       	bst	r25, 7
    3dca:	3e f4       	brtc	.+14     	; 0x3dda <__floatsisf+0x12>
    3dcc:	90 95       	com	r25
    3dce:	80 95       	com	r24
    3dd0:	70 95       	com	r23
    3dd2:	61 95       	neg	r22
    3dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dda:	99 23       	and	r25, r25
    3ddc:	a9 f0       	breq	.+42     	; 0x3e08 <__floatsisf+0x40>
    3dde:	f9 2f       	mov	r31, r25
    3de0:	96 e9       	ldi	r25, 0x96	; 150
    3de2:	bb 27       	eor	r27, r27
    3de4:	93 95       	inc	r25
    3de6:	f6 95       	lsr	r31
    3de8:	87 95       	ror	r24
    3dea:	77 95       	ror	r23
    3dec:	67 95       	ror	r22
    3dee:	b7 95       	ror	r27
    3df0:	f1 11       	cpse	r31, r1
    3df2:	f8 cf       	rjmp	.-16     	; 0x3de4 <__floatsisf+0x1c>
    3df4:	fa f4       	brpl	.+62     	; 0x3e34 <__floatsisf+0x6c>
    3df6:	bb 0f       	add	r27, r27
    3df8:	11 f4       	brne	.+4      	; 0x3dfe <__floatsisf+0x36>
    3dfa:	60 ff       	sbrs	r22, 0
    3dfc:	1b c0       	rjmp	.+54     	; 0x3e34 <__floatsisf+0x6c>
    3dfe:	6f 5f       	subi	r22, 0xFF	; 255
    3e00:	7f 4f       	sbci	r23, 0xFF	; 255
    3e02:	8f 4f       	sbci	r24, 0xFF	; 255
    3e04:	9f 4f       	sbci	r25, 0xFF	; 255
    3e06:	16 c0       	rjmp	.+44     	; 0x3e34 <__floatsisf+0x6c>
    3e08:	88 23       	and	r24, r24
    3e0a:	11 f0       	breq	.+4      	; 0x3e10 <__floatsisf+0x48>
    3e0c:	96 e9       	ldi	r25, 0x96	; 150
    3e0e:	11 c0       	rjmp	.+34     	; 0x3e32 <__floatsisf+0x6a>
    3e10:	77 23       	and	r23, r23
    3e12:	21 f0       	breq	.+8      	; 0x3e1c <__floatsisf+0x54>
    3e14:	9e e8       	ldi	r25, 0x8E	; 142
    3e16:	87 2f       	mov	r24, r23
    3e18:	76 2f       	mov	r23, r22
    3e1a:	05 c0       	rjmp	.+10     	; 0x3e26 <__floatsisf+0x5e>
    3e1c:	66 23       	and	r22, r22
    3e1e:	71 f0       	breq	.+28     	; 0x3e3c <__floatsisf+0x74>
    3e20:	96 e8       	ldi	r25, 0x86	; 134
    3e22:	86 2f       	mov	r24, r22
    3e24:	70 e0       	ldi	r23, 0x00	; 0
    3e26:	60 e0       	ldi	r22, 0x00	; 0
    3e28:	2a f0       	brmi	.+10     	; 0x3e34 <__floatsisf+0x6c>
    3e2a:	9a 95       	dec	r25
    3e2c:	66 0f       	add	r22, r22
    3e2e:	77 1f       	adc	r23, r23
    3e30:	88 1f       	adc	r24, r24
    3e32:	da f7       	brpl	.-10     	; 0x3e2a <__floatsisf+0x62>
    3e34:	88 0f       	add	r24, r24
    3e36:	96 95       	lsr	r25
    3e38:	87 95       	ror	r24
    3e3a:	97 f9       	bld	r25, 7
    3e3c:	08 95       	ret

00003e3e <__fp_inf>:
    3e3e:	97 f9       	bld	r25, 7
    3e40:	9f 67       	ori	r25, 0x7F	; 127
    3e42:	80 e8       	ldi	r24, 0x80	; 128
    3e44:	70 e0       	ldi	r23, 0x00	; 0
    3e46:	60 e0       	ldi	r22, 0x00	; 0
    3e48:	08 95       	ret

00003e4a <__fp_nan>:
    3e4a:	9f ef       	ldi	r25, 0xFF	; 255
    3e4c:	80 ec       	ldi	r24, 0xC0	; 192
    3e4e:	08 95       	ret

00003e50 <__fp_pscA>:
    3e50:	00 24       	eor	r0, r0
    3e52:	0a 94       	dec	r0
    3e54:	16 16       	cp	r1, r22
    3e56:	17 06       	cpc	r1, r23
    3e58:	18 06       	cpc	r1, r24
    3e5a:	09 06       	cpc	r0, r25
    3e5c:	08 95       	ret

00003e5e <__fp_pscB>:
    3e5e:	00 24       	eor	r0, r0
    3e60:	0a 94       	dec	r0
    3e62:	12 16       	cp	r1, r18
    3e64:	13 06       	cpc	r1, r19
    3e66:	14 06       	cpc	r1, r20
    3e68:	05 06       	cpc	r0, r21
    3e6a:	08 95       	ret

00003e6c <__fp_round>:
    3e6c:	09 2e       	mov	r0, r25
    3e6e:	03 94       	inc	r0
    3e70:	00 0c       	add	r0, r0
    3e72:	11 f4       	brne	.+4      	; 0x3e78 <__fp_round+0xc>
    3e74:	88 23       	and	r24, r24
    3e76:	52 f0       	brmi	.+20     	; 0x3e8c <__fp_round+0x20>
    3e78:	bb 0f       	add	r27, r27
    3e7a:	40 f4       	brcc	.+16     	; 0x3e8c <__fp_round+0x20>
    3e7c:	bf 2b       	or	r27, r31
    3e7e:	11 f4       	brne	.+4      	; 0x3e84 <__fp_round+0x18>
    3e80:	60 ff       	sbrs	r22, 0
    3e82:	04 c0       	rjmp	.+8      	; 0x3e8c <__fp_round+0x20>
    3e84:	6f 5f       	subi	r22, 0xFF	; 255
    3e86:	7f 4f       	sbci	r23, 0xFF	; 255
    3e88:	8f 4f       	sbci	r24, 0xFF	; 255
    3e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e8c:	08 95       	ret

00003e8e <__fp_split3>:
    3e8e:	57 fd       	sbrc	r21, 7
    3e90:	90 58       	subi	r25, 0x80	; 128
    3e92:	44 0f       	add	r20, r20
    3e94:	55 1f       	adc	r21, r21
    3e96:	59 f0       	breq	.+22     	; 0x3eae <__fp_splitA+0x10>
    3e98:	5f 3f       	cpi	r21, 0xFF	; 255
    3e9a:	71 f0       	breq	.+28     	; 0x3eb8 <__fp_splitA+0x1a>
    3e9c:	47 95       	ror	r20

00003e9e <__fp_splitA>:
    3e9e:	88 0f       	add	r24, r24
    3ea0:	97 fb       	bst	r25, 7
    3ea2:	99 1f       	adc	r25, r25
    3ea4:	61 f0       	breq	.+24     	; 0x3ebe <__fp_splitA+0x20>
    3ea6:	9f 3f       	cpi	r25, 0xFF	; 255
    3ea8:	79 f0       	breq	.+30     	; 0x3ec8 <__fp_splitA+0x2a>
    3eaa:	87 95       	ror	r24
    3eac:	08 95       	ret
    3eae:	12 16       	cp	r1, r18
    3eb0:	13 06       	cpc	r1, r19
    3eb2:	14 06       	cpc	r1, r20
    3eb4:	55 1f       	adc	r21, r21
    3eb6:	f2 cf       	rjmp	.-28     	; 0x3e9c <__fp_split3+0xe>
    3eb8:	46 95       	lsr	r20
    3eba:	f1 df       	rcall	.-30     	; 0x3e9e <__fp_splitA>
    3ebc:	08 c0       	rjmp	.+16     	; 0x3ece <__fp_splitA+0x30>
    3ebe:	16 16       	cp	r1, r22
    3ec0:	17 06       	cpc	r1, r23
    3ec2:	18 06       	cpc	r1, r24
    3ec4:	99 1f       	adc	r25, r25
    3ec6:	f1 cf       	rjmp	.-30     	; 0x3eaa <__fp_splitA+0xc>
    3ec8:	86 95       	lsr	r24
    3eca:	71 05       	cpc	r23, r1
    3ecc:	61 05       	cpc	r22, r1
    3ece:	08 94       	sec
    3ed0:	08 95       	ret

00003ed2 <__fp_zero>:
    3ed2:	e8 94       	clt

00003ed4 <__fp_szero>:
    3ed4:	bb 27       	eor	r27, r27
    3ed6:	66 27       	eor	r22, r22
    3ed8:	77 27       	eor	r23, r23
    3eda:	cb 01       	movw	r24, r22
    3edc:	97 f9       	bld	r25, 7
    3ede:	08 95       	ret

00003ee0 <__divmodhi4>:
    3ee0:	97 fb       	bst	r25, 7
    3ee2:	07 2e       	mov	r0, r23
    3ee4:	16 f4       	brtc	.+4      	; 0x3eea <__divmodhi4+0xa>
    3ee6:	00 94       	com	r0
    3ee8:	06 d0       	rcall	.+12     	; 0x3ef6 <__divmodhi4_neg1>
    3eea:	77 fd       	sbrc	r23, 7
    3eec:	08 d0       	rcall	.+16     	; 0x3efe <__divmodhi4_neg2>
    3eee:	60 d0       	rcall	.+192    	; 0x3fb0 <__udivmodhi4>
    3ef0:	07 fc       	sbrc	r0, 7
    3ef2:	05 d0       	rcall	.+10     	; 0x3efe <__divmodhi4_neg2>
    3ef4:	3e f4       	brtc	.+14     	; 0x3f04 <__divmodhi4_exit>

00003ef6 <__divmodhi4_neg1>:
    3ef6:	90 95       	com	r25
    3ef8:	81 95       	neg	r24
    3efa:	9f 4f       	sbci	r25, 0xFF	; 255
    3efc:	08 95       	ret

00003efe <__divmodhi4_neg2>:
    3efe:	70 95       	com	r23
    3f00:	61 95       	neg	r22
    3f02:	7f 4f       	sbci	r23, 0xFF	; 255

00003f04 <__divmodhi4_exit>:
    3f04:	08 95       	ret

00003f06 <__udivmodsi4>:
    3f06:	a1 e2       	ldi	r26, 0x21	; 33
    3f08:	1a 2e       	mov	r1, r26
    3f0a:	aa 1b       	sub	r26, r26
    3f0c:	bb 1b       	sub	r27, r27
    3f0e:	fd 01       	movw	r30, r26
    3f10:	0d c0       	rjmp	.+26     	; 0x3f2c <__udivmodsi4_ep>

00003f12 <__udivmodsi4_loop>:
    3f12:	aa 1f       	adc	r26, r26
    3f14:	bb 1f       	adc	r27, r27
    3f16:	ee 1f       	adc	r30, r30
    3f18:	ff 1f       	adc	r31, r31
    3f1a:	a2 17       	cp	r26, r18
    3f1c:	b3 07       	cpc	r27, r19
    3f1e:	e4 07       	cpc	r30, r20
    3f20:	f5 07       	cpc	r31, r21
    3f22:	20 f0       	brcs	.+8      	; 0x3f2c <__udivmodsi4_ep>
    3f24:	a2 1b       	sub	r26, r18
    3f26:	b3 0b       	sbc	r27, r19
    3f28:	e4 0b       	sbc	r30, r20
    3f2a:	f5 0b       	sbc	r31, r21

00003f2c <__udivmodsi4_ep>:
    3f2c:	66 1f       	adc	r22, r22
    3f2e:	77 1f       	adc	r23, r23
    3f30:	88 1f       	adc	r24, r24
    3f32:	99 1f       	adc	r25, r25
    3f34:	1a 94       	dec	r1
    3f36:	69 f7       	brne	.-38     	; 0x3f12 <__udivmodsi4_loop>
    3f38:	60 95       	com	r22
    3f3a:	70 95       	com	r23
    3f3c:	80 95       	com	r24
    3f3e:	90 95       	com	r25
    3f40:	9b 01       	movw	r18, r22
    3f42:	ac 01       	movw	r20, r24
    3f44:	bd 01       	movw	r22, r26
    3f46:	cf 01       	movw	r24, r30
    3f48:	08 95       	ret

00003f4a <__divmodsi4>:
    3f4a:	05 2e       	mov	r0, r21
    3f4c:	97 fb       	bst	r25, 7
    3f4e:	16 f4       	brtc	.+4      	; 0x3f54 <__divmodsi4+0xa>
    3f50:	00 94       	com	r0
    3f52:	0f d0       	rcall	.+30     	; 0x3f72 <__negsi2>
    3f54:	57 fd       	sbrc	r21, 7
    3f56:	05 d0       	rcall	.+10     	; 0x3f62 <__divmodsi4_neg2>
    3f58:	d6 df       	rcall	.-84     	; 0x3f06 <__udivmodsi4>
    3f5a:	07 fc       	sbrc	r0, 7
    3f5c:	02 d0       	rcall	.+4      	; 0x3f62 <__divmodsi4_neg2>
    3f5e:	46 f4       	brtc	.+16     	; 0x3f70 <__divmodsi4_exit>
    3f60:	08 c0       	rjmp	.+16     	; 0x3f72 <__negsi2>

00003f62 <__divmodsi4_neg2>:
    3f62:	50 95       	com	r21
    3f64:	40 95       	com	r20
    3f66:	30 95       	com	r19
    3f68:	21 95       	neg	r18
    3f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f6c:	4f 4f       	sbci	r20, 0xFF	; 255
    3f6e:	5f 4f       	sbci	r21, 0xFF	; 255

00003f70 <__divmodsi4_exit>:
    3f70:	08 95       	ret

00003f72 <__negsi2>:
    3f72:	90 95       	com	r25
    3f74:	80 95       	com	r24
    3f76:	70 95       	com	r23
    3f78:	61 95       	neg	r22
    3f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f7c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f80:	08 95       	ret

00003f82 <__tablejump2__>:
    3f82:	ee 0f       	add	r30, r30
    3f84:	ff 1f       	adc	r31, r31
    3f86:	88 1f       	adc	r24, r24
    3f88:	8b bf       	out	0x3b, r24	; 59
    3f8a:	07 90       	elpm	r0, Z+
    3f8c:	f6 91       	elpm	r31, Z
    3f8e:	e0 2d       	mov	r30, r0
    3f90:	19 94       	eijmp

00003f92 <__umulhisi3>:
    3f92:	a2 9f       	mul	r26, r18
    3f94:	b0 01       	movw	r22, r0
    3f96:	b3 9f       	mul	r27, r19
    3f98:	c0 01       	movw	r24, r0
    3f9a:	a3 9f       	mul	r26, r19
    3f9c:	70 0d       	add	r23, r0
    3f9e:	81 1d       	adc	r24, r1
    3fa0:	11 24       	eor	r1, r1
    3fa2:	91 1d       	adc	r25, r1
    3fa4:	b2 9f       	mul	r27, r18
    3fa6:	70 0d       	add	r23, r0
    3fa8:	81 1d       	adc	r24, r1
    3faa:	11 24       	eor	r1, r1
    3fac:	91 1d       	adc	r25, r1
    3fae:	08 95       	ret

00003fb0 <__udivmodhi4>:
    3fb0:	aa 1b       	sub	r26, r26
    3fb2:	bb 1b       	sub	r27, r27
    3fb4:	51 e1       	ldi	r21, 0x11	; 17
    3fb6:	07 c0       	rjmp	.+14     	; 0x3fc6 <__udivmodhi4_ep>

00003fb8 <__udivmodhi4_loop>:
    3fb8:	aa 1f       	adc	r26, r26
    3fba:	bb 1f       	adc	r27, r27
    3fbc:	a6 17       	cp	r26, r22
    3fbe:	b7 07       	cpc	r27, r23
    3fc0:	10 f0       	brcs	.+4      	; 0x3fc6 <__udivmodhi4_ep>
    3fc2:	a6 1b       	sub	r26, r22
    3fc4:	b7 0b       	sbc	r27, r23

00003fc6 <__udivmodhi4_ep>:
    3fc6:	88 1f       	adc	r24, r24
    3fc8:	99 1f       	adc	r25, r25
    3fca:	5a 95       	dec	r21
    3fcc:	a9 f7       	brne	.-22     	; 0x3fb8 <__udivmodhi4_loop>
    3fce:	80 95       	com	r24
    3fd0:	90 95       	com	r25
    3fd2:	bc 01       	movw	r22, r24
    3fd4:	cd 01       	movw	r24, r26
    3fd6:	08 95       	ret

00003fd8 <eeprom_read_block>:
    3fd8:	dc 01       	movw	r26, r24
    3fda:	cb 01       	movw	r24, r22

00003fdc <eeprom_read_blraw>:
    3fdc:	fc 01       	movw	r30, r24
    3fde:	f9 99       	sbic	0x1f, 1	; 31
    3fe0:	fe cf       	rjmp	.-4      	; 0x3fde <eeprom_read_blraw+0x2>
    3fe2:	06 c0       	rjmp	.+12     	; 0x3ff0 <eeprom_read_blraw+0x14>
    3fe4:	f2 bd       	out	0x22, r31	; 34
    3fe6:	e1 bd       	out	0x21, r30	; 33
    3fe8:	f8 9a       	sbi	0x1f, 0	; 31
    3fea:	31 96       	adiw	r30, 0x01	; 1
    3fec:	00 b4       	in	r0, 0x20	; 32
    3fee:	0d 92       	st	X+, r0
    3ff0:	41 50       	subi	r20, 0x01	; 1
    3ff2:	50 40       	sbci	r21, 0x00	; 0
    3ff4:	b8 f7       	brcc	.-18     	; 0x3fe4 <eeprom_read_blraw+0x8>
    3ff6:	08 95       	ret

00003ff8 <eeprom_read_byte>:
    3ff8:	f9 99       	sbic	0x1f, 1	; 31
    3ffa:	fe cf       	rjmp	.-4      	; 0x3ff8 <eeprom_read_byte>
    3ffc:	92 bd       	out	0x22, r25	; 34
    3ffe:	81 bd       	out	0x21, r24	; 33
    4000:	f8 9a       	sbi	0x1f, 0	; 31
    4002:	99 27       	eor	r25, r25
    4004:	80 b5       	in	r24, 0x20	; 32
    4006:	08 95       	ret

00004008 <eeprom_write_block>:
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	02 c0       	rjmp	.+4      	; 0x4012 <eeprom_write_block+0xa>
    400e:	2d 91       	ld	r18, X+
    4010:	05 d0       	rcall	.+10     	; 0x401c <eeprom_write_r18>
    4012:	41 50       	subi	r20, 0x01	; 1
    4014:	50 40       	sbci	r21, 0x00	; 0
    4016:	d8 f7       	brcc	.-10     	; 0x400e <eeprom_write_block+0x6>
    4018:	08 95       	ret

0000401a <eeprom_write_byte>:
    401a:	26 2f       	mov	r18, r22

0000401c <eeprom_write_r18>:
    401c:	f9 99       	sbic	0x1f, 1	; 31
    401e:	fe cf       	rjmp	.-4      	; 0x401c <eeprom_write_r18>
    4020:	1f ba       	out	0x1f, r1	; 31
    4022:	92 bd       	out	0x22, r25	; 34
    4024:	81 bd       	out	0x21, r24	; 33
    4026:	20 bd       	out	0x20, r18	; 32
    4028:	0f b6       	in	r0, 0x3f	; 63
    402a:	f8 94       	cli
    402c:	fa 9a       	sbi	0x1f, 2	; 31
    402e:	f9 9a       	sbi	0x1f, 1	; 31
    4030:	0f be       	out	0x3f, r0	; 63
    4032:	01 96       	adiw	r24, 0x01	; 1
    4034:	08 95       	ret

00004036 <_exit>:
    4036:	f8 94       	cli

00004038 <__stop_program>:
    4038:	ff cf       	rjmp	.-2      	; 0x4038 <__stop_program>
