
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015a  00800200  00001c36  00001cca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000416  0080035a  0080035a  00001e24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049d4  00000000  00000000  00002104  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000171a  00000000  00000000  00006ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a79  00000000  00000000  000081f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e8  00000000  00000000  00009c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f84  00000000  00000000  0000a254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000203c  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__vector_27>
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__vector_36>
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e3       	ldi	r30, 0x36	; 54
      fc:	fc e1       	ldi	r31, 0x1C	; 28
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 35       	cpi	r26, 0x5A	; 90
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	27 e0       	ldi	r18, 0x07	; 7
     110:	aa e5       	ldi	r26, 0x5A	; 90
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a0 37       	cpi	r26, 0x70	; 112
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	3d d5       	rcall	.+2682   	; 0xb9a <main>
     120:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     126:	8f ef       	ldi	r24, 0xFF	; 255
     128:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     12a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons and Encoder buttons
	PORTB = 0B01111111;
     12e:	8f e7       	ldi	r24, 0x7F	; 127
     130:	85 b9       	out	0x05, r24	; 5
     132:	08 95       	ret

00000134 <listenTrigButtons>:
	
}


void listenTrigButtons()
{
     134:	2f 92       	push	r2
     136:	3f 92       	push	r3
     138:	4f 92       	push	r4
     13a:	5f 92       	push	r5
     13c:	6f 92       	push	r6
     13e:	7f 92       	push	r7
     140:	8f 92       	push	r8
     142:	9f 92       	push	r9
     144:	af 92       	push	r10
     146:	bf 92       	push	r11
     148:	cf 92       	push	r12
     14a:	df 92       	push	r13
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     158:	c0 91 09 01 	lds	r28, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     15c:	c0 95       	com	r28
     15e:	c0 93 c5 04 	sts	0x04C5, r28	; 0x8004c5 <buttonsCurrentCycle>
	currentTrigButtons = (buttonsCurrentCycle << 8) | (PINA^255);
     162:	80 b1       	in	r24, 0x00	; 0
     164:	d0 e0       	ldi	r29, 0x00	; 0
     166:	dc 2f       	mov	r29, r28
     168:	cc 27       	eor	r28, r28
     16a:	80 95       	com	r24
     16c:	c8 2b       	or	r28, r24
     16e:	d0 93 94 05 	sts	0x0594, r29	; 0x800594 <currentTrigButtons+0x1>
     172:	c0 93 93 05 	sts	0x0593, r28	; 0x800593 <currentTrigButtons>
	if(currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     176:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <__data_end>
     17a:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <__data_end+0x1>
     17e:	c8 17       	cp	r28, r24
     180:	d9 07       	cpc	r29, r25
     182:	09 f4       	brne	.+2      	; 0x186 <listenTrigButtons+0x52>
     184:	9f c0       	rjmp	.+318    	; 0x2c4 <listenTrigButtons+0x190>
	{
		lastFullBits = currentTrigButtons;
     186:	d0 93 5b 03 	sts	0x035B, r29	; 0x80035b <__data_end+0x1>
     18a:	c0 93 5a 03 	sts	0x035A, r28	; 0x80035a <__data_end>
     18e:	0f 2e       	mov	r0, r31
     190:	f2 e8       	ldi	r31, 0x82	; 130
     192:	ef 2e       	mov	r14, r31
     194:	f3 e0       	ldi	r31, 0x03	; 3
     196:	ff 2e       	mov	r15, r31
     198:	f0 2d       	mov	r31, r0
     19a:	02 ef       	ldi	r16, 0xF2	; 242
     19c:	13 e0       	ldi	r17, 0x03	; 3
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     19e:	51 2c       	mov	r5, r1
				
				case 2: ;
				//select track for sample assignment
				uint16_t currentSample = (currentPattern.trackSampleMSB[bc]<<8)|(currentPattern.trackSampleLSB[bc]);
				currentTrack = bc;
				numPrinter(screen2[1], 7, 2, (bc+1));
     1a0:	89 ee       	ldi	r24, 0xE9	; 233
     1a2:	9f ef       	ldi	r25, 0xFF	; 255
     1a4:	9c 01       	movw	r18, r24
     1a6:	2a 56       	subi	r18, 0x6A	; 106
     1a8:	33 40       	sbci	r19, 0x03	; 3
     1aa:	49 01       	movw	r8, r18
				numPrinter(screen2[1], 10, 4, currentSample);
				outputS(screen2[1], 1);
				switch (currentPattern.trackPlayMode[bc])
				{
					case 0:
					screen2[2][10] = 'P';
     1ac:	0f 2e       	mov	r0, r31
     1ae:	f7 e9       	ldi	r31, 0x97	; 151
     1b0:	af 2e       	mov	r10, r31
     1b2:	f5 e0       	ldi	r31, 0x05	; 5
     1b4:	bf 2e       	mov	r11, r31
     1b6:	f0 2d       	mov	r31, r0
     1b8:	0f 2e       	mov	r0, r31
     1ba:	f0 e5       	ldi	r31, 0x50	; 80
     1bc:	2f 2e       	mov	r2, r31
     1be:	f0 2d       	mov	r31, r0
					screen2[2][11] = 'o';
     1c0:	0f 2e       	mov	r0, r31
     1c2:	ff e6       	ldi	r31, 0x6F	; 111
     1c4:	4f 2e       	mov	r4, r31
     1c6:	f0 2d       	mov	r31, r0
					screen2[2][12] = 'l';
     1c8:	0f 2e       	mov	r0, r31
     1ca:	fc e6       	ldi	r31, 0x6C	; 108
     1cc:	3f 2e       	mov	r3, r31
     1ce:	f0 2d       	mov	r31, r0
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
	{
		currentTrig = (fullBitsParse&1);
     1d0:	8c 2f       	mov	r24, r28
     1d2:	81 70       	andi	r24, 0x01	; 1
     1d4:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <currentTrig>
		if(currentTrig)
     1d8:	88 23       	and	r24, r24
     1da:	09 f4       	brne	.+2      	; 0x1de <listenTrigButtons+0xaa>
     1dc:	68 c0       	rjmp	.+208    	; 0x2ae <listenTrigButtons+0x17a>
		{
			switch (encoderAValue)
     1de:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
     1e2:	88 23       	and	r24, r24
     1e4:	19 f0       	breq	.+6      	; 0x1ec <listenTrigButtons+0xb8>
     1e6:	82 30       	cpi	r24, 0x02	; 2
     1e8:	69 f0       	breq	.+26     	; 0x204 <listenTrigButtons+0xd0>
     1ea:	61 c0       	rjmp	.+194    	; 0x2ae <listenTrigButtons+0x17a>
			{
				
				//for "perfrmance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
				case 0: //performance mode
				//we trigger a sound here based on the location of bc
				trackControl(currentPattern.trackSampleLSB[bc], currentPattern.trackSampleMSB[bc], currentPattern.trackOutputRoute[bc], currentPattern.trackOutputRoute[bc]);
     1ec:	f7 01       	movw	r30, r14
     1ee:	40 81       	ld	r20, Z
     1f0:	50 e0       	ldi	r21, 0x00	; 0
     1f2:	f8 01       	movw	r30, r16
     1f4:	60 89       	ldd	r22, Z+16	; 0x10
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	80 a1       	ldd	r24, Z+32	; 0x20
     1fa:	9a 01       	movw	r18, r20
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 c8 0b 	call	0x1790	; 0x1790 <trackControl>
				//trackControl(3,0,0,1);
				//numPrinter(buttonTest,9, 2,bc);
				//outputS(buttonTest, 2);
				break;
     202:	55 c0       	rjmp	.+170    	; 0x2ae <listenTrigButtons+0x17a>
     204:	38 01       	movw	r6, r16
				//step sequencer mode.
				break;
				
				case 2: ;
				//select track for sample assignment
				uint16_t currentSample = (currentPattern.trackSampleMSB[bc]<<8)|(currentPattern.trackSampleLSB[bc]);
     206:	f8 01       	movw	r30, r16
     208:	c0 88       	ldd	r12, Z+16	; 0x10
     20a:	d1 2c       	mov	r13, r1
     20c:	dc 2c       	mov	r13, r12
     20e:	cc 24       	eor	r12, r12
     210:	80 a1       	ldd	r24, Z+32	; 0x20
     212:	c8 2a       	or	r12, r24
				currentTrack = bc;
     214:	50 92 1a 06 	sts	0x061A, r5	; 0x80061a <currentTrack>
				numPrinter(screen2[1], 7, 2, (bc+1));
     218:	94 01       	movw	r18, r8
     21a:	2e 0d       	add	r18, r14
     21c:	3f 1d       	adc	r19, r15
     21e:	42 e0       	ldi	r20, 0x02	; 2
     220:	67 e0       	ldi	r22, 0x07	; 7
     222:	8b ea       	ldi	r24, 0xAB	; 171
     224:	95 e0       	ldi	r25, 0x05	; 5
     226:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <numPrinter>
				numPrinter(screen2[1], 10, 4, currentSample);
     22a:	96 01       	movw	r18, r12
     22c:	44 e0       	ldi	r20, 0x04	; 4
     22e:	6a e0       	ldi	r22, 0x0A	; 10
     230:	8b ea       	ldi	r24, 0xAB	; 171
     232:	95 e0       	ldi	r25, 0x05	; 5
     234:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <numPrinter>
				outputS(screen2[1], 1);
     238:	61 e0       	ldi	r22, 0x01	; 1
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	8b ea       	ldi	r24, 0xAB	; 171
     23e:	95 e0       	ldi	r25, 0x05	; 5
     240:	0e 94 44 09 	call	0x1288	; 0x1288 <outputS>
				switch (currentPattern.trackPlayMode[bc])
     244:	f8 01       	movw	r30, r16
     246:	80 81       	ld	r24, Z
     248:	88 23       	and	r24, r24
     24a:	19 f0       	breq	.+6      	; 0x252 <listenTrigButtons+0x11e>
     24c:	81 30       	cpi	r24, 0x01	; 1
     24e:	41 f0       	breq	.+16     	; 0x260 <listenTrigButtons+0x12c>
     250:	0d c0       	rjmp	.+26     	; 0x26c <listenTrigButtons+0x138>
				{
					case 0:
					screen2[2][10] = 'P';
     252:	f5 01       	movw	r30, r10
     254:	22 aa       	std	Z+50, r2	; 0x32
					screen2[2][11] = 'o';
     256:	43 aa       	std	Z+51, r4	; 0x33
					screen2[2][12] = 'l';
     258:	34 aa       	std	Z+52, r3	; 0x34
					screen2[2][13] = 'y';
     25a:	29 e7       	ldi	r18, 0x79	; 121
     25c:	25 ab       	std	Z+53, r18	; 0x35
					break;
     25e:	06 c0       	rjmp	.+12     	; 0x26c <listenTrigButtons+0x138>
					
					case 1:
					screen2[2][10] = 'S';
     260:	23 e5       	ldi	r18, 0x53	; 83
     262:	f5 01       	movw	r30, r10
     264:	22 ab       	std	Z+50, r18	; 0x32
					screen2[2][11] = 'o';
     266:	43 aa       	std	Z+51, r4	; 0x33
					screen2[2][12] = 'l';
     268:	34 aa       	std	Z+52, r3	; 0x34
					screen2[2][13] = 'o';
     26a:	45 aa       	std	Z+53, r4	; 0x35
					break;
					
					case 3:
					break;
				}
				outputS(screen2[2], 2);
     26c:	62 e0       	ldi	r22, 0x02	; 2
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	8f eb       	ldi	r24, 0xBF	; 191
     272:	95 e0       	ldi	r25, 0x05	; 5
     274:	0e 94 44 09 	call	0x1288	; 0x1288 <outputS>
				numPrinter(screen2[3], 10, 2, (currentPattern.trackOutputRoute[bc]+1));
     278:	f7 01       	movw	r30, r14
     27a:	20 81       	ld	r18, Z
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	2f 5f       	subi	r18, 0xFF	; 255
     280:	3f 4f       	sbci	r19, 0xFF	; 255
     282:	42 e0       	ldi	r20, 0x02	; 2
     284:	6a e0       	ldi	r22, 0x0A	; 10
     286:	83 ed       	ldi	r24, 0xD3	; 211
     288:	95 e0       	ldi	r25, 0x05	; 5
     28a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <numPrinter>
				outputS(screen2[3], 3);
     28e:	63 e0       	ldi	r22, 0x03	; 3
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	83 ed       	ldi	r24, 0xD3	; 211
     294:	95 e0       	ldi	r25, 0x05	; 5
     296:	f8 d7       	rcall	.+4080   	; 0x1288 <outputS>
				
				
				trackControl(currentPattern.trackSampleLSB[bc], currentPattern.trackSampleMSB[bc], currentPattern.trackOutputRoute[bc], currentPattern.trackOutputRoute[bc]);
     298:	f7 01       	movw	r30, r14
     29a:	40 81       	ld	r20, Z
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	f3 01       	movw	r30, r6
     2a0:	60 89       	ldd	r22, Z+16	; 0x10
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	80 a1       	ldd	r24, Z+32	; 0x20
     2a6:	9a 01       	movw	r18, r20
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 c8 0b 	call	0x1790	; 0x1790 <trackControl>
			}
		
		
		}
		
		fullBitsParse = fullBitsParse>>1;
     2ae:	d6 95       	lsr	r29
     2b0:	c7 95       	ror	r28
	{
		lastFullBits = currentTrigButtons;
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     2b2:	53 94       	inc	r5
     2b4:	ff ef       	ldi	r31, 0xFF	; 255
     2b6:	ef 1a       	sub	r14, r31
     2b8:	ff 0a       	sbc	r15, r31
     2ba:	0f 5f       	subi	r16, 0xFF	; 255
     2bc:	1f 4f       	sbci	r17, 0xFF	; 255
     2be:	20 e1       	ldi	r18, 0x10	; 16
     2c0:	52 12       	cpse	r5, r18
     2c2:	86 cf       	rjmp	.-244    	; 0x1d0 <listenTrigButtons+0x9c>
		fullBitsParse = fullBitsParse>>1;
	}
	}


}
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	cf 90       	pop	r12
     2d4:	bf 90       	pop	r11
     2d6:	af 90       	pop	r10
     2d8:	9f 90       	pop	r9
     2da:	8f 90       	pop	r8
     2dc:	7f 90       	pop	r7
     2de:	6f 90       	pop	r6
     2e0:	5f 90       	pop	r5
     2e2:	4f 90       	pop	r4
     2e4:	3f 90       	pop	r3
     2e6:	2f 90       	pop	r2
     2e8:	08 95       	ret

000002ea <listenGPButtons>:

void listenGPButtons() // are the encoder buttons here also?
{
	currentGPButtons = PINB;
     2ea:	83 b1       	in	r24, 0x03	; 3
     2ec:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <currentGPButtons>
	if((currentGPButtons^255)&(1 << PB5))
     2f0:	80 95       	com	r24
     2f2:	85 ff       	sbrs	r24, 5
     2f4:	05 c0       	rjmp	.+10     	; 0x300 <listenGPButtons+0x16>
	{ //top encoder button
	//	outputS(testEncoderButton, 3);
	encoderAFlag = ~encoderAFlag;
     2f6:	90 91 e7 05 	lds	r25, 0x05E7	; 0x8005e7 <encoderAFlag>
     2fa:	90 95       	com	r25
     2fc:	90 93 e7 05 	sts	0x05E7, r25	; 0x8005e7 <encoderAFlag>
		
	}
	if((currentGPButtons^255)&(1 << PB6))
     300:	86 ff       	sbrs	r24, 6
     302:	05 c0       	rjmp	.+10     	; 0x30e <listenGPButtons+0x24>
	{//botton encoder button
		
		//outputS(testEncoderButton, 3);
		encoderBFlag = ~encoderBFlag;
     304:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <encoderBFlag>
     308:	80 95       	com	r24
     30a:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <encoderBFlag>
     30e:	08 95       	ret

00000310 <initEncoders>:
#include "globalVariables.h"

void initEncoders()
{
	//this is where we set the encoder pins to where they need to be
PORTH = 0B01111000; // enable internal pullup resistors.
     310:	88 e7       	ldi	r24, 0x78	; 120
     312:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     316:	08 95       	ret

00000318 <pollEncoder0>:

}

void pollEncoder0(uint8_t *encoderC0)
{
	if(~PINH&(1<<PH6))
     318:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     31c:	26 fd       	sbrc	r18, 6
     31e:	12 c0       	rjmp	.+36     	; 0x344 <pollEncoder0+0x2c>
	{
		if(~PINH&(1<<PH5))
     320:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     324:	25 fd       	sbrc	r18, 5
     326:	05 c0       	rjmp	.+10     	; 0x332 <pollEncoder0+0x1a>
		{
			//left turn?
			*encoderC0= (*encoderC0)+1;
     328:	fc 01       	movw	r30, r24
     32a:	20 81       	ld	r18, Z
     32c:	2f 5f       	subi	r18, 0xFF	; 255
     32e:	20 83       	st	Z, r18
     330:	04 c0       	rjmp	.+8      	; 0x33a <pollEncoder0+0x22>
		}
		else
		{
			*encoderC0= (*encoderC0)-1;
     332:	fc 01       	movw	r30, r24
     334:	20 81       	ld	r18, Z
     336:	21 50       	subi	r18, 0x01	; 1
     338:	20 83       	st	Z, r18
		}
		//_delay_ms(2); // seems un-necesary with while loop
		while(~PINH&(1<<PH6)){} // this does make things smoother, but we need to be sure we have interupts for important things.
     33a:	e0 e0       	ldi	r30, 0x00	; 0
     33c:	f1 e0       	ldi	r31, 0x01	; 1
     33e:	80 81       	ld	r24, Z
     340:	86 ff       	sbrs	r24, 6
     342:	fd cf       	rjmp	.-6      	; 0x33e <pollEncoder0+0x26>
     344:	08 95       	ret

00000346 <pollEncoder1>:

}

void pollEncoder1(uint8_t *encoderC1)
{
	if(~PINH&(1<<PH3))
     346:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     34a:	23 fd       	sbrc	r18, 3
     34c:	12 c0       	rjmp	.+36     	; 0x372 <pollEncoder1+0x2c>
	{
		if(~PINH&(1<<PH4))
     34e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     352:	24 fd       	sbrc	r18, 4
     354:	05 c0       	rjmp	.+10     	; 0x360 <pollEncoder1+0x1a>
		{
			//left turn?
			*encoderC1=(*encoderC1)-1;
     356:	fc 01       	movw	r30, r24
     358:	20 81       	ld	r18, Z
     35a:	21 50       	subi	r18, 0x01	; 1
     35c:	20 83       	st	Z, r18
     35e:	04 c0       	rjmp	.+8      	; 0x368 <pollEncoder1+0x22>
		}
		else
		{
			*encoderC1=(*encoderC1)+1;
     360:	fc 01       	movw	r30, r24
     362:	20 81       	ld	r18, Z
     364:	2f 5f       	subi	r18, 0xFF	; 255
     366:	20 83       	st	Z, r18
		}
		//_delay_ms(2); // seems un-necesary with while loop
		while(~PINH&(1<<PH3)){} // this does make things smoother, but we need to be sure we have interupts for important things.
     368:	e0 e0       	ldi	r30, 0x00	; 0
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	80 81       	ld	r24, Z
     36e:	83 ff       	sbrs	r24, 3
     370:	fd cf       	rjmp	.-6      	; 0x36c <pollEncoder1+0x26>
     372:	08 95       	ret

00000374 <listenEncoders>:


void listenEncoders()
{
	//this is where we update the encoder variables.
	pollEncoder0(&encoderAValue);
     374:	89 e6       	ldi	r24, 0x69	; 105
     376:	93 e0       	ldi	r25, 0x03	; 3
     378:	cf df       	rcall	.-98     	; 0x318 <pollEncoder0>
	pollEncoder1(&encoderBValue);
     37a:	8e e6       	ldi	r24, 0x6E	; 110
     37c:	96 e0       	ldi	r25, 0x06	; 6
     37e:	e3 cf       	rjmp	.-58     	; 0x346 <pollEncoder1>
     380:	08 95       	ret

00000382 <initArrays>:

#include <avr/io.h>
#include "globalVariables.h"

void initArrays(char myArray[4][20], uint8_t lengthOfString, int stringNumber, char* myString)
{
     382:	ef 92       	push	r14
     384:	ff 92       	push	r15
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	8c 01       	movw	r16, r24
     390:	7a 01       	movw	r14, r20
	uint8_t charLeft = 20 - lengthOfString;
     392:	94 e1       	ldi	r25, 0x14	; 20
     394:	59 2f       	mov	r21, r25
     396:	56 1b       	sub	r21, r22
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     398:	66 23       	and	r22, r22
     39a:	a1 f0       	breq	.+40     	; 0x3c4 <initArrays+0x42>
     39c:	f9 01       	movw	r30, r18
     39e:	84 e1       	ldi	r24, 0x14	; 20
     3a0:	8e 9d       	mul	r24, r14
     3a2:	d0 01       	movw	r26, r0
     3a4:	8f 9d       	mul	r24, r15
     3a6:	b0 0d       	add	r27, r0
     3a8:	11 24       	eor	r1, r1
     3aa:	a0 0f       	add	r26, r16
     3ac:	b1 1f       	adc	r27, r17
     3ae:	cf ef       	ldi	r28, 0xFF	; 255
     3b0:	c6 0f       	add	r28, r22
     3b2:	d0 e0       	ldi	r29, 0x00	; 0
     3b4:	21 96       	adiw	r28, 0x01	; 1
     3b6:	2c 0f       	add	r18, r28
     3b8:	3d 1f       	adc	r19, r29
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     3ba:	91 91       	ld	r25, Z+
     3bc:	9d 93       	st	X+, r25

void initArrays(char myArray[4][20], uint8_t lengthOfString, int stringNumber, char* myString)
{
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     3be:	e2 17       	cp	r30, r18
     3c0:	f3 07       	cpc	r31, r19
     3c2:	d9 f7       	brne	.-10     	; 0x3ba <initArrays+0x38>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
		
	}
	
	for(charLeft; charLeft>0; charLeft--)
     3c4:	55 23       	and	r21, r21
     3c6:	91 f0       	breq	.+36     	; 0x3ec <initArrays+0x6a>
	{
		
		myArray[stringNumber][currentIndex] = ' ';
     3c8:	24 e1       	ldi	r18, 0x14	; 20
     3ca:	2e 9d       	mul	r18, r14
     3cc:	c0 01       	movw	r24, r0
     3ce:	2f 9d       	mul	r18, r15
     3d0:	90 0d       	add	r25, r0
     3d2:	11 24       	eor	r1, r1
     3d4:	08 0f       	add	r16, r24
     3d6:	19 1f       	adc	r17, r25
     3d8:	95 2f       	mov	r25, r21
     3da:	96 0f       	add	r25, r22
     3dc:	80 e2       	ldi	r24, 0x20	; 32
     3de:	f8 01       	movw	r30, r16
     3e0:	e6 0f       	add	r30, r22
     3e2:	f1 1d       	adc	r31, r1
     3e4:	80 83       	st	Z, r24
		currentIndex++;
     3e6:	6f 5f       	subi	r22, 0xFF	; 255
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
		
	}
	
	for(charLeft; charLeft>0; charLeft--)
     3e8:	69 13       	cpse	r22, r25
     3ea:	f9 cf       	rjmp	.-14     	; 0x3de <initArrays+0x5c>
		
		myArray[stringNumber][currentIndex] = ' ';
		currentIndex++;
	}

}
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	08 95       	ret

000003fa <initBank>:

void initBank()
{
     3fa:	e2 e1       	ldi	r30, 0x12	; 18
     3fc:	f4 e0       	ldi	r31, 0x04	; 4
	for(uint8_t i = 0; i<16; i++)
     3fe:	80 e0       	ldi	r24, 0x00	; 0
	{
		currentPattern.trackSampleLSB[i] = i+1;
     400:	8f 5f       	subi	r24, 0xFF	; 255
     402:	81 93       	st	Z+, r24

}

void initBank()
{
	for(uint8_t i = 0; i<16; i++)
     404:	80 31       	cpi	r24, 0x10	; 16
     406:	e1 f7       	brne	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		currentPattern.trackSampleLSB[i] = i+1;
	}
	
	//assign midi notes C3 to E4
	currentPattern.midiTrackNote[0] = 0x30;
     408:	80 e3       	ldi	r24, 0x30	; 48
     40a:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <currentPattern+0x148>
	currentPattern.midiTrackNote[1] = 0x31;
     40e:	81 e3       	ldi	r24, 0x31	; 49
     410:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <currentPattern+0x149>
	currentPattern.midiTrackNote[2] = 0x32;
     414:	82 e3       	ldi	r24, 0x32	; 50
     416:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <currentPattern+0x14a>
	currentPattern.midiTrackNote[3] = 0x33;
     41a:	83 e3       	ldi	r24, 0x33	; 51
     41c:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <currentPattern+0x14b>
	currentPattern.midiTrackNote[4] = 0x34;
     420:	84 e3       	ldi	r24, 0x34	; 52
     422:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <currentPattern+0x14c>
	currentPattern.midiTrackNote[5] = 0x35;
     426:	85 e3       	ldi	r24, 0x35	; 53
     428:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <currentPattern+0x14d>
	currentPattern.midiTrackNote[6] = 0x36;
     42c:	86 e3       	ldi	r24, 0x36	; 54
     42e:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <currentPattern+0x14e>
	currentPattern.midiTrackNote[7] = 0x37;
     432:	87 e3       	ldi	r24, 0x37	; 55
     434:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <currentPattern+0x14f>
	currentPattern.midiTrackNote[8] = 0x38;
     438:	88 e3       	ldi	r24, 0x38	; 56
     43a:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <currentPattern+0x150>
	currentPattern.midiTrackNote[9] = 0x39;
     43e:	89 e3       	ldi	r24, 0x39	; 57
     440:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <currentPattern+0x151>
	currentPattern.midiTrackNote[10] = 0x3a;
     444:	8a e3       	ldi	r24, 0x3A	; 58
     446:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <currentPattern+0x152>
	currentPattern.midiTrackNote[11] = 0x3b;
     44a:	8b e3       	ldi	r24, 0x3B	; 59
     44c:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <currentPattern+0x153>
	currentPattern.midiTrackNote[12] = 0x3c;
     450:	8c e3       	ldi	r24, 0x3C	; 60
     452:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <currentPattern+0x154>
	currentPattern.midiTrackNote[13] = 0x3d;
     456:	8d e3       	ldi	r24, 0x3D	; 61
     458:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <currentPattern+0x155>
	currentPattern.midiTrackNote[14] = 0x3e;
     45c:	8e e3       	ldi	r24, 0x3E	; 62
     45e:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <currentPattern+0x156>
	currentPattern.midiTrackNote[15] = 0x3f;
     462:	8f e3       	ldi	r24, 0x3F	; 63
     464:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <currentPattern+0x157>
	currentPattern.patternBPM = 120;
     468:	88 e7       	ldi	r24, 0x78	; 120
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <currentPattern+0x159>
     470:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <currentPattern+0x158>
	currentPatternNumber = 1;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <currentPatternNumber>
	currentStep = 0;
     47a:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <currentStep>
	currentPattern.numSteps = 16;
     47e:	80 e1       	ldi	r24, 0x10	; 16
     480:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <currentPattern+0x15a>
	//screen0
	// = {"Performance Mode    ","Pattern:            ","BPM: xxx            ","Stop                "}
	initArrays(screen0,8,1,"Pattern:");
     484:	24 ea       	ldi	r18, 0xA4	; 164
     486:	32 e0       	ldi	r19, 0x02	; 2
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	68 e0       	ldi	r22, 0x08	; 8
     48e:	83 e4       	ldi	r24, 0x43	; 67
     490:	95 e0       	ldi	r25, 0x05	; 5
     492:	77 df       	rcall	.-274    	; 0x382 <initArrays>
	initArrays(screen0,4,2,"BPM:");
     494:	2d ea       	ldi	r18, 0xAD	; 173
     496:	32 e0       	ldi	r19, 0x02	; 2
     498:	42 e0       	ldi	r20, 0x02	; 2
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	64 e0       	ldi	r22, 0x04	; 4
     49e:	83 e4       	ldi	r24, 0x43	; 67
     4a0:	95 e0       	ldi	r25, 0x05	; 5
     4a2:	6f df       	rcall	.-290    	; 0x382 <initArrays>
	initArrays(screen0,4,3,"Stop");
     4a4:	22 eb       	ldi	r18, 0xB2	; 178
     4a6:	32 e0       	ldi	r19, 0x02	; 2
     4a8:	43 e0       	ldi	r20, 0x03	; 3
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	64 e0       	ldi	r22, 0x04	; 4
     4ae:	83 e4       	ldi	r24, 0x43	; 67
     4b0:	95 e0       	ldi	r25, 0x05	; 5
     4b2:	67 df       	rcall	.-306    	; 0x382 <initArrays>
	initArrays(screen0,16,0,"Performance Mode");
     4b4:	27 eb       	ldi	r18, 0xB7	; 183
     4b6:	32 e0       	ldi	r19, 0x02	; 2
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	60 e1       	ldi	r22, 0x10	; 16
     4be:	83 e4       	ldi	r24, 0x43	; 67
     4c0:	95 e0       	ldi	r25, 0x05	; 5
     4c2:	5f df       	rcall	.-322    	; 0x382 <initArrays>
	//screen1
	// = {"Sequence Edit       ","Pattern:            ","Steps:              ","Step number:        "}; //this will eventually be 5 once we implement naming of samples.
	initArrays(screen1,8,1,"Pattern:");
     4c4:	24 ea       	ldi	r18, 0xA4	; 164
     4c6:	32 e0       	ldi	r19, 0x02	; 2
     4c8:	41 e0       	ldi	r20, 0x01	; 1
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	68 e0       	ldi	r22, 0x08	; 8
     4ce:	87 ec       	ldi	r24, 0xC7	; 199
     4d0:	94 e0       	ldi	r25, 0x04	; 4
     4d2:	57 df       	rcall	.-338    	; 0x382 <initArrays>
	initArrays(screen1,6,2,"Steps:");
     4d4:	28 ec       	ldi	r18, 0xC8	; 200
     4d6:	32 e0       	ldi	r19, 0x02	; 2
     4d8:	42 e0       	ldi	r20, 0x02	; 2
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	66 e0       	ldi	r22, 0x06	; 6
     4de:	87 ec       	ldi	r24, 0xC7	; 199
     4e0:	94 e0       	ldi	r25, 0x04	; 4
     4e2:	4f df       	rcall	.-354    	; 0x382 <initArrays>
	initArrays(screen1,12,3,"Step number:");
     4e4:	2f ec       	ldi	r18, 0xCF	; 207
     4e6:	32 e0       	ldi	r19, 0x02	; 2
     4e8:	43 e0       	ldi	r20, 0x03	; 3
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	6c e0       	ldi	r22, 0x0C	; 12
     4ee:	87 ec       	ldi	r24, 0xC7	; 199
     4f0:	94 e0       	ldi	r25, 0x04	; 4
     4f2:	47 df       	rcall	.-370    	; 0x382 <initArrays>
	initArrays(screen1,13,0,"Sequence Edit");
     4f4:	2c ed       	ldi	r18, 0xDC	; 220
     4f6:	32 e0       	ldi	r19, 0x02	; 2
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	6d e0       	ldi	r22, 0x0D	; 13
     4fe:	87 ec       	ldi	r24, 0xC7	; 199
     500:	94 e0       	ldi	r25, 0x04	; 4
     502:	3f df       	rcall	.-386    	; 0x382 <initArrays>
	//screen2
	//= {"Track Settings      ","Track:              ","Play Mode           ","OutRoute            "};
	initArrays(screen2,6,1,"Track:");
     504:	2a ee       	ldi	r18, 0xEA	; 234
     506:	32 e0       	ldi	r19, 0x02	; 2
     508:	41 e0       	ldi	r20, 0x01	; 1
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	66 e0       	ldi	r22, 0x06	; 6
     50e:	87 e9       	ldi	r24, 0x97	; 151
     510:	95 e0       	ldi	r25, 0x05	; 5
     512:	37 df       	rcall	.-402    	; 0x382 <initArrays>
	initArrays(screen2,9,2,"PlayMode:");
     514:	21 ef       	ldi	r18, 0xF1	; 241
     516:	32 e0       	ldi	r19, 0x02	; 2
     518:	42 e0       	ldi	r20, 0x02	; 2
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	69 e0       	ldi	r22, 0x09	; 9
     51e:	87 e9       	ldi	r24, 0x97	; 151
     520:	95 e0       	ldi	r25, 0x05	; 5
     522:	2f df       	rcall	.-418    	; 0x382 <initArrays>
	initArrays(screen2,9,3,"OutRoute:");
     524:	2b ef       	ldi	r18, 0xFB	; 251
     526:	32 e0       	ldi	r19, 0x02	; 2
     528:	43 e0       	ldi	r20, 0x03	; 3
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	69 e0       	ldi	r22, 0x09	; 9
     52e:	87 e9       	ldi	r24, 0x97	; 151
     530:	95 e0       	ldi	r25, 0x05	; 5
     532:	27 df       	rcall	.-434    	; 0x382 <initArrays>
	initArrays(screen2,14,0,"Track Settings");
     534:	25 e0       	ldi	r18, 0x05	; 5
     536:	33 e0       	ldi	r19, 0x03	; 3
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	6e e0       	ldi	r22, 0x0E	; 14
     53e:	87 e9       	ldi	r24, 0x97	; 151
     540:	95 e0       	ldi	r25, 0x05	; 5
     542:	1f df       	rcall	.-450    	; 0x382 <initArrays>
	//screen3
	// = {"Global Settings     ","Midi Channel: xx    ", "Midi trigger Notes  ","(put triggered note)"};
	initArrays(screen3,13,1,"Midi Channel:");
     544:	24 e1       	ldi	r18, 0x14	; 20
     546:	33 e0       	ldi	r19, 0x03	; 3
     548:	41 e0       	ldi	r20, 0x01	; 1
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	6d e0       	ldi	r22, 0x0D	; 13
     54e:	8b e1       	ldi	r24, 0x1B	; 27
     550:	96 e0       	ldi	r25, 0x06	; 6
     552:	17 df       	rcall	.-466    	; 0x382 <initArrays>
	initArrays(screen3,18,2,"Midi Trigger Notes");
     554:	22 e2       	ldi	r18, 0x22	; 34
     556:	33 e0       	ldi	r19, 0x03	; 3
     558:	42 e0       	ldi	r20, 0x02	; 2
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	62 e1       	ldi	r22, 0x12	; 18
     55e:	8b e1       	ldi	r24, 0x1B	; 27
     560:	96 e0       	ldi	r25, 0x06	; 6
     562:	0f df       	rcall	.-482    	; 0x382 <initArrays>
	initArrays(screen3,20,3,"(trigger Notes here)");
     564:	25 e3       	ldi	r18, 0x35	; 53
     566:	33 e0       	ldi	r19, 0x03	; 3
     568:	43 e0       	ldi	r20, 0x03	; 3
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	64 e1       	ldi	r22, 0x14	; 20
     56e:	8b e1       	ldi	r24, 0x1B	; 27
     570:	96 e0       	ldi	r25, 0x06	; 6
     572:	07 df       	rcall	.-498    	; 0x382 <initArrays>
	initArrays(screen3,15,0,"Global Settings");	
     574:	2a e4       	ldi	r18, 0x4A	; 74
     576:	33 e0       	ldi	r19, 0x03	; 3
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	6f e0       	ldi	r22, 0x0F	; 15
     57e:	8b e1       	ldi	r24, 0x1B	; 27
     580:	96 e0       	ldi	r25, 0x06	; 6
     582:	ff ce       	rjmp	.-514    	; 0x382 <initArrays>
     584:	08 95       	ret

00000586 <startADCConversion>:
char envelopeTimePrint[20] = "EnvelopeTimex:xxxxMS";

uint8_t startADCConversion()
{
	
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     586:	ea e7       	ldi	r30, 0x7A	; 122
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	80 64       	ori	r24, 0x40	; 64
     58e:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     590:	80 81       	ld	r24, Z
     592:	86 fd       	sbrc	r24, 6
     594:	fd cf       	rjmp	.-6      	; 0x590 <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.
     596:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
}
     59a:	08 95       	ret

0000059c <initADC>:

void initADC()
{
	DDRE = 0B00111000; //init pins E5, 4, and 3 as select pins on the external mux.
     59c:	88 e3       	ldi	r24, 0x38	; 56
     59e:	8d b9       	out	0x0d, r24	; 13
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     5a0:	80 e2       	ldi	r24, 0x20	; 32
     5a2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     5a6:	87 e8       	ldi	r24, 0x87	; 135
     5a8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     5ac:	88 e0       	ldi	r24, 0x08	; 8
     5ae:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     5b2:	8f ef       	ldi	r24, 0xFF	; 255
     5b4:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     5b8:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     5bc:	10 92 ec 05 	sts	0x05EC, r1	; 0x8005ec <knobBufferCounter>
	startADCConversion();
     5c0:	e2 cf       	rjmp	.-60     	; 0x586 <startADCConversion>
     5c2:	08 95       	ret

000005c4 <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     5c4:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     5c6:	98 2f       	mov	r25, r24
     5c8:	96 95       	lsr	r25
     5ca:	96 95       	lsr	r25
     5cc:	2f e2       	ldi	r18, 0x2F	; 47
     5ce:	92 9f       	mul	r25, r18
     5d0:	91 2d       	mov	r25, r1
     5d2:	11 24       	eor	r1, r1
     5d4:	96 95       	lsr	r25
     5d6:	2c e2       	ldi	r18, 0x2C	; 44
     5d8:	92 9f       	mul	r25, r18
     5da:	80 19       	sub	r24, r0
     5dc:	11 24       	eor	r1, r1
     5de:	98 2f       	mov	r25, r24
	if(select<40)
     5e0:	88 32       	cpi	r24, 0x28	; 40
     5e2:	18 f5       	brcc	.+70     	; 0x62a <selectKnob+0x66>
	{
		ADCSRB = (1 << MUX5);
     5e4:	88 e0       	ldi	r24, 0x08	; 8
     5e6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     5ea:	c9 2f       	mov	r28, r25
     5ec:	c7 70       	andi	r28, 0x07	; 7
		uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     5ee:	96 95       	lsr	r25
     5f0:	96 95       	lsr	r25
     5f2:	96 95       	lsr	r25
     5f4:	90 62       	ori	r25, 0x20	; 32
     5f6:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     5fa:	c5 df       	rcall	.-118    	; 0x586 <startADCConversion>
		//we might need to worry about the delay, but that's fine.
		
		//we put our select0 and select2 pins in the opposite ports, so we need to do some math to fix that.
		//easy stupid fix:
		switch (tempMuxSelect)
     5fc:	c3 30       	cpi	r28, 0x03	; 3
     5fe:	59 f0       	breq	.+22     	; 0x616 <selectKnob+0x52>
     600:	18 f4       	brcc	.+6      	; 0x608 <selectKnob+0x44>
     602:	c1 30       	cpi	r28, 0x01	; 1
     604:	31 f0       	breq	.+12     	; 0x612 <selectKnob+0x4e>
     606:	0c c0       	rjmp	.+24     	; 0x620 <selectKnob+0x5c>
     608:	c4 30       	cpi	r28, 0x04	; 4
     60a:	39 f0       	breq	.+14     	; 0x61a <selectKnob+0x56>
     60c:	c6 30       	cpi	r28, 0x06	; 6
     60e:	39 f0       	breq	.+14     	; 0x61e <selectKnob+0x5a>
     610:	07 c0       	rjmp	.+14     	; 0x620 <selectKnob+0x5c>
		{
			case 1: muxSelect = 4;
     612:	c4 e0       	ldi	r28, 0x04	; 4
     614:	05 c0       	rjmp	.+10     	; 0x620 <selectKnob+0x5c>
			break;
			
			case 3:	muxSelect = 6;
     616:	c6 e0       	ldi	r28, 0x06	; 6
			break;
     618:	03 c0       	rjmp	.+6      	; 0x620 <selectKnob+0x5c>
			
			case 4: muxSelect = 1;
     61a:	c1 e0       	ldi	r28, 0x01	; 1
			break;
     61c:	01 c0       	rjmp	.+2      	; 0x620 <selectKnob+0x5c>
			
			case 6: muxSelect = 3;
     61e:	c3 e0       	ldi	r28, 0x03	; 3
			break;
		}

	//then the external multiplexer
		PORTE = (muxSelect << 3);
     620:	cc 0f       	add	r28, r28
     622:	cc 0f       	add	r28, r28
     624:	cc 0f       	add	r28, r28
     626:	ce b9       	out	0x0e, r28	; 14
     628:	20 c0       	rjmp	.+64     	; 0x66a <selectKnob+0xa6>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     62a:	89 32       	cpi	r24, 0x29	; 41
     62c:	71 f0       	breq	.+28     	; 0x64a <selectKnob+0x86>
     62e:	18 f4       	brcc	.+6      	; 0x636 <selectKnob+0x72>
     630:	88 32       	cpi	r24, 0x28	; 40
     632:	31 f0       	breq	.+12     	; 0x640 <selectKnob+0x7c>
     634:	1a c0       	rjmp	.+52     	; 0x66a <selectKnob+0xa6>
     636:	8a 32       	cpi	r24, 0x2A	; 42
     638:	69 f0       	breq	.+26     	; 0x654 <selectKnob+0x90>
     63a:	8b 32       	cpi	r24, 0x2B	; 43
     63c:	81 f0       	breq	.+32     	; 0x65e <selectKnob+0x9a>
     63e:	15 c0       	rjmp	.+42     	; 0x66a <selectKnob+0xa6>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     640:	85 e2       	ldi	r24, 0x25	; 37
     642:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     646:	9f df       	rcall	.-194    	; 0x586 <startADCConversion>
		break;
     648:	10 c0       	rjmp	.+32     	; 0x66a <selectKnob+0xa6>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     64a:	86 e2       	ldi	r24, 0x26	; 38
     64c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     650:	9a df       	rcall	.-204    	; 0x586 <startADCConversion>
		break;
     652:	0b c0       	rjmp	.+22     	; 0x66a <selectKnob+0xa6>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     654:	87 e2       	ldi	r24, 0x27	; 39
     656:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     65a:	95 df       	rcall	.-214    	; 0x586 <startADCConversion>
		break;
     65c:	06 c0       	rjmp	.+12     	; 0x66a <selectKnob+0xa6>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     65e:	80 e2       	ldi	r24, 0x20	; 32
     660:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     664:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     668:	8e df       	rcall	.-228    	; 0x586 <startADCConversion>
		break;
		}
	
	}
	
}
     66a:	cf 91       	pop	r28
     66c:	08 95       	ret

0000066e <updateKnob>:

void updateKnob(uint8_t select)
{
     66e:	cf 93       	push	r28
     670:	c8 2f       	mov	r28, r24

	knobBuffer[select] = startADCConversion(); 
     672:	89 df       	rcall	.-238    	; 0x586 <startADCConversion>
     674:	ec 2f       	mov	r30, r28
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	e9 5e       	subi	r30, 0xE9	; 233
     67a:	fa 4f       	sbci	r31, 0xFA	; 250
     67c:	80 83       	st	Z, r24
}
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <interperetKnob>:

void interperetKnob(uint8_t select)
{//this function will compare outputs, and write to our struct.
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
	select = select%44;
     68c:	98 2f       	mov	r25, r24
     68e:	96 95       	lsr	r25
     690:	96 95       	lsr	r25
     692:	2f e2       	ldi	r18, 0x2F	; 47
     694:	92 9f       	mul	r25, r18
     696:	91 2d       	mov	r25, r1
     698:	11 24       	eor	r1, r1
     69a:	96 95       	lsr	r25
     69c:	2c e2       	ldi	r18, 0x2C	; 44
     69e:	92 9f       	mul	r25, r18
     6a0:	80 19       	sub	r24, r0
     6a2:	11 24       	eor	r1, r1
     6a4:	98 2f       	mov	r25, r24
	//we might not need this with the IIR filter
	float volumeDivisor = 3.1875;
	
	
	//Change from FIR filter to IIR filter.
     checkBuffer[select] += ((knobBuffer[select]-checkBuffer[select])/2);
     6a6:	a8 2f       	mov	r26, r24
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	fd 01       	movw	r30, r26
     6ac:	e3 51       	subi	r30, 0x13	; 19
     6ae:	fa 4f       	sbci	r31, 0xFA	; 250
     6b0:	60 81       	ld	r22, Z
     6b2:	fd 01       	movw	r30, r26
     6b4:	e9 5e       	subi	r30, 0xE9	; 233
     6b6:	fa 4f       	sbci	r31, 0xFA	; 250
     6b8:	e0 81       	ld	r30, Z
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	e6 1b       	sub	r30, r22
     6be:	f1 09       	sbc	r31, r1
     6c0:	af 01       	movw	r20, r30
     6c2:	12 f4       	brpl	.+4      	; 0x6c8 <interperetKnob+0x46>
     6c4:	4f 5f       	subi	r20, 0xFF	; 255
     6c6:	5f 4f       	sbci	r21, 0xFF	; 255
     6c8:	55 95       	asr	r21
     6ca:	47 95       	ror	r20
     6cc:	46 0f       	add	r20, r22
     6ce:	a3 51       	subi	r26, 0x13	; 19
     6d0:	ba 4f       	sbci	r27, 0xFA	; 250
     6d2:	4c 93       	st	X, r20
	
	
	if (select<40)
     6d4:	98 32       	cpi	r25, 0x28	; 40
     6d6:	08 f0       	brcs	.+2      	; 0x6da <interperetKnob+0x58>
     6d8:	14 c2       	rjmp	.+1064   	; 0xb02 <interperetKnob+0x480>
	{
		uint8_t positionSelect = select%8;
     6da:	c9 2f       	mov	r28, r25
     6dc:	c7 70       	andi	r28, 0x07	; 7
		uint8_t bankSwitch = select/8;
		switch (bankSwitch)
     6de:	96 95       	lsr	r25
     6e0:	96 95       	lsr	r25
     6e2:	96 95       	lsr	r25
     6e4:	92 30       	cpi	r25, 0x02	; 2
     6e6:	09 f4       	brne	.+2      	; 0x6ea <interperetKnob+0x68>
     6e8:	d8 c0       	rjmp	.+432    	; 0x89a <interperetKnob+0x218>
     6ea:	30 f4       	brcc	.+12     	; 0x6f8 <interperetKnob+0x76>
     6ec:	99 23       	and	r25, r25
     6ee:	59 f0       	breq	.+22     	; 0x706 <interperetKnob+0x84>
     6f0:	91 30       	cpi	r25, 0x01	; 1
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <interperetKnob+0x74>
     6f4:	95 c0       	rjmp	.+298    	; 0x820 <interperetKnob+0x19e>
     6f6:	24 c2       	rjmp	.+1096   	; 0xb40 <interperetKnob+0x4be>
     6f8:	93 30       	cpi	r25, 0x03	; 3
     6fa:	09 f4       	brne	.+2      	; 0x6fe <interperetKnob+0x7c>
     6fc:	52 c1       	rjmp	.+676    	; 0x9a2 <interperetKnob+0x320>
     6fe:	94 30       	cpi	r25, 0x04	; 4
     700:	09 f4       	brne	.+2      	; 0x704 <interperetKnob+0x82>
     702:	6c c1       	rjmp	.+728    	; 0x9dc <interperetKnob+0x35a>
     704:	1d c2       	rjmp	.+1082   	; 0xb40 <interperetKnob+0x4be>
		{
			
			case 0:; //switch cases are "labels", used for goto stuff. so, you have to end the label before declaring variables. should be fine?
			
			int16_t currentOutVoulume = ((currentPattern.outputLevelMSB[positionSelect]<<8)|(currentPattern.outputLevelLSB[positionSelect])); 
     706:	0c 2f       	mov	r16, r28
     708:	10 e0       	ldi	r17, 0x00	; 0
			//this should be a regular integer between -70 and +10
			int16_t negCheckValue = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     70a:	64 2f       	mov	r22, r20
     70c:	70 e0       	ldi	r23, 0x00	; 0
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__floatsisf>
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	4c e4       	ldi	r20, 0x4C	; 76
     71c:	50 e4       	ldi	r21, 0x40	; 64
     71e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__divsf3>
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	4c e8       	ldi	r20, 0x8C	; 140
     728:	52 e4       	ldi	r21, 0x42	; 66
     72a:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__subsf3>
     72e:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__fixsfsi>
     732:	86 2f       	mov	r24, r22
     734:	97 2f       	mov	r25, r23
     736:	9c 01       	movw	r18, r24
		switch (bankSwitch)
		{
			
			case 0:; //switch cases are "labels", used for goto stuff. so, you have to end the label before declaring variables. should be fine?
			
			int16_t currentOutVoulume = ((currentPattern.outputLevelMSB[positionSelect]<<8)|(currentPattern.outputLevelLSB[positionSelect])); 
     738:	f8 01       	movw	r30, r16
     73a:	e6 59       	subi	r30, 0x96	; 150
     73c:	fc 4f       	sbci	r31, 0xFC	; 252
			//this should be a regular integer between -70 and +10
			int16_t negCheckValue = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentOutVoulume!=negCheckValue)
     73e:	80 81       	ld	r24, Z
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	98 2f       	mov	r25, r24
     744:	88 27       	eor	r24, r24
     746:	40 85       	ldd	r20, Z+8	; 0x08
     748:	84 2b       	or	r24, r20
     74a:	82 17       	cp	r24, r18
     74c:	93 07       	cpc	r25, r19
     74e:	09 f4       	brne	.+2      	; 0x752 <interperetKnob+0xd0>
     750:	f7 c1       	rjmp	.+1006   	; 0xb40 <interperetKnob+0x4be>
			{
				currentPattern.outputLevelLSB[positionSelect] = (negCheckValue);
     752:	f8 01       	movw	r30, r16
     754:	e6 59       	subi	r30, 0x96	; 150
     756:	fc 4f       	sbci	r31, 0xFC	; 252
     758:	60 87       	std	Z+8, r22	; 0x08
				if(negCheckValue>(-1))
     75a:	33 23       	and	r19, r19
     75c:	64 f1       	brlt	.+88     	; 0x7b6 <interperetKnob+0x134>
				{
					currentPattern.outputLevelMSB[positionSelect] = 0;
     75e:	f8 01       	movw	r30, r16
     760:	e6 59       	subi	r30, 0x96	; 150
     762:	fc 4f       	sbci	r31, 0xFC	; 252
     764:	10 82       	st	Z, r1
					//just hard coding this for now until we make a function.
					outVolumePrint[14] = 48;
     766:	ec e3       	ldi	r30, 0x3C	; 60
     768:	f2 e0       	ldi	r31, 0x02	; 2
     76a:	80 e3       	ldi	r24, 0x30	; 48
     76c:	86 87       	std	Z+14, r24	; 0x0e
					outVolumePrint[16] = (currentPattern.outputLevelLSB[positionSelect]%10)+48;
     76e:	2d ec       	ldi	r18, 0xCD	; 205
     770:	62 9f       	mul	r22, r18
     772:	81 2d       	mov	r24, r1
     774:	11 24       	eor	r1, r1
     776:	86 95       	lsr	r24
     778:	86 95       	lsr	r24
     77a:	86 95       	lsr	r24
     77c:	88 0f       	add	r24, r24
     77e:	98 2f       	mov	r25, r24
     780:	99 0f       	add	r25, r25
     782:	99 0f       	add	r25, r25
     784:	89 0f       	add	r24, r25
     786:	96 2f       	mov	r25, r22
     788:	98 1b       	sub	r25, r24
     78a:	89 2f       	mov	r24, r25
     78c:	80 5d       	subi	r24, 0xD0	; 208
     78e:	80 8b       	std	Z+16, r24	; 0x10
					outVolumePrint[15] = ((currentPattern.outputLevelLSB[positionSelect]%100)/10)+48;
     790:	89 e2       	ldi	r24, 0x29	; 41
     792:	68 9f       	mul	r22, r24
     794:	81 2d       	mov	r24, r1
     796:	11 24       	eor	r1, r1
     798:	82 95       	swap	r24
     79a:	8f 70       	andi	r24, 0x0F	; 15
     79c:	94 e6       	ldi	r25, 0x64	; 100
     79e:	89 9f       	mul	r24, r25
     7a0:	60 19       	sub	r22, r0
     7a2:	11 24       	eor	r1, r1
     7a4:	62 9f       	mul	r22, r18
     7a6:	61 2d       	mov	r22, r1
     7a8:	11 24       	eor	r1, r1
     7aa:	66 95       	lsr	r22
     7ac:	66 95       	lsr	r22
     7ae:	66 95       	lsr	r22
     7b0:	60 5d       	subi	r22, 0xD0	; 208
     7b2:	67 87       	std	Z+15, r22	; 0x0f
     7b4:	23 c0       	rjmp	.+70     	; 0x7fc <interperetKnob+0x17a>
				}else
				{
					currentPattern.outputLevelMSB[positionSelect] = 255;
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	f8 01       	movw	r30, r16
     7ba:	e6 59       	subi	r30, 0x96	; 150
     7bc:	fc 4f       	sbci	r31, 0xFC	; 252
     7be:	80 83       	st	Z, r24
					outVolumePrint[14] = '-';
     7c0:	ec e3       	ldi	r30, 0x3C	; 60
     7c2:	f2 e0       	ldi	r31, 0x02	; 2
     7c4:	8d e2       	ldi	r24, 0x2D	; 45
     7c6:	86 87       	std	Z+14, r24	; 0x0e
					outVolumePrint[15] = ((((currentPattern.outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     7c8:	60 95       	com	r22
     7ca:	26 2f       	mov	r18, r22
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	2f 5f       	subi	r18, 0xFF	; 255
     7d0:	3f 4f       	sbci	r19, 0xFF	; 255
     7d2:	c9 01       	movw	r24, r18
     7d4:	64 e6       	ldi	r22, 0x64	; 100
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
     7dc:	0f 2e       	mov	r0, r31
     7de:	fa e0       	ldi	r31, 0x0A	; 10
     7e0:	ef 2e       	mov	r14, r31
     7e2:	f1 2c       	mov	r15, r1
     7e4:	f0 2d       	mov	r31, r0
     7e6:	b7 01       	movw	r22, r14
     7e8:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
     7ec:	60 5d       	subi	r22, 0xD0	; 208
     7ee:	67 87       	std	Z+15, r22	; 0x0f
					outVolumePrint[16] = (((currentPattern.outputLevelLSB[positionSelect]^255)+1)%10)+48;
     7f0:	c9 01       	movw	r24, r18
     7f2:	b7 01       	movw	r22, r14
     7f4:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
     7f8:	80 5d       	subi	r24, 0xD0	; 208
     7fa:	80 8b       	std	Z+16, r24	; 0x10
				}
				//then output to screen. 
				outVolumePrint[10] = positionSelect + 49;
     7fc:	cf 5c       	subi	r28, 0xCF	; 207
     7fe:	c0 93 46 02 	sts	0x0246, r28	; 0x800246 <outVolumePrint+0xa>
				outputS(outVolumePrint, 3);
     802:	63 e0       	ldi	r22, 0x03	; 3
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	8c e3       	ldi	r24, 0x3C	; 60
     808:	92 e0       	ldi	r25, 0x02	; 2
     80a:	3e d5       	rcall	.+2684   	; 0x1288 <outputS>
				setOutputVolume(currentPattern.outputLevelLSB[positionSelect], currentPattern.outputLevelMSB[positionSelect], positionSelect);
     80c:	f8 01       	movw	r30, r16
     80e:	e6 59       	subi	r30, 0x96	; 150
     810:	fc 4f       	sbci	r31, 0xFC	; 252
     812:	60 81       	ld	r22, Z
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	80 85       	ldd	r24, Z+8	; 0x08
     818:	a8 01       	movw	r20, r16
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	de d7       	rcall	.+4028   	; 0x17da <setOutputVolume>
     81e:	90 c1       	rjmp	.+800    	; 0xb40 <interperetKnob+0x4be>
			}
			break;
			
 			case 1:
 			if(currentPattern.outputPitch[positionSelect]!=(checkBuffer[select]^128))
     820:	0c 2f       	mov	r16, r28
     822:	10 e0       	ldi	r17, 0x00	; 0
     824:	60 e8       	ldi	r22, 0x80	; 128
     826:	64 0f       	add	r22, r20
     828:	f8 01       	movw	r30, r16
     82a:	e6 59       	subi	r30, 0x96	; 150
     82c:	fc 4f       	sbci	r31, 0xFC	; 252
     82e:	80 89       	ldd	r24, Z+16	; 0x10
     830:	86 17       	cp	r24, r22
     832:	09 f4       	brne	.+2      	; 0x836 <interperetKnob+0x1b4>
     834:	85 c1       	rjmp	.+778    	; 0xb40 <interperetKnob+0x4be>
 			{
 				(currentPattern.outputPitch[positionSelect]) = (checkBuffer[select]^128);
     836:	f8 01       	movw	r30, r16
     838:	e6 59       	subi	r30, 0x96	; 150
     83a:	fc 4f       	sbci	r31, 0xFC	; 252
     83c:	60 8b       	std	Z+16, r22	; 0x10
				 if(encoderAValue == 0)
     83e:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
     842:	81 11       	cpse	r24, r1
     844:	20 c0       	rjmp	.+64     	; 0x886 <interperetKnob+0x204>
				 {
					 pitchPrint[5] = (positionSelect+49);
     846:	cf 5c       	subi	r28, 0xCF	; 207
     848:	c0 93 55 02 	sts	0x0255, r28	; 0x800255 <pitchPrint+0x5>
					 if(currentPattern.outputPitch[positionSelect]>>7)
     84c:	66 23       	and	r22, r22
     84e:	64 f4       	brge	.+24     	; 0x868 <interperetKnob+0x1e6>
					 {
						 //again, hard coding.
						 pitchPrint[7] = '-';
     850:	8d e2       	ldi	r24, 0x2D	; 45
     852:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <pitchPrint+0x7>
						 numPrinter(pitchPrint, 8, 3, (currentPattern.outputPitch[positionSelect]^255));
     856:	26 2f       	mov	r18, r22
     858:	20 95       	com	r18
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	43 e0       	ldi	r20, 0x03	; 3
     85e:	68 e0       	ldi	r22, 0x08	; 8
     860:	80 e5       	ldi	r24, 0x50	; 80
     862:	92 e0       	ldi	r25, 0x02	; 2
     864:	29 d5       	rcall	.+2642   	; 0x12b8 <numPrinter>
     866:	0a c0       	rjmp	.+20     	; 0x87c <interperetKnob+0x1fa>
					 
					 }else{
						 pitchPrint[7] = '+';
     868:	8b e2       	ldi	r24, 0x2B	; 43
     86a:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <pitchPrint+0x7>
					 numPrinter(pitchPrint,8,3,currentPattern.outputPitch[positionSelect]);}
     86e:	26 2f       	mov	r18, r22
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	43 e0       	ldi	r20, 0x03	; 3
     874:	68 e0       	ldi	r22, 0x08	; 8
     876:	80 e5       	ldi	r24, 0x50	; 80
     878:	92 e0       	ldi	r25, 0x02	; 2
     87a:	1e d5       	rcall	.+2620   	; 0x12b8 <numPrinter>
					 outputS(pitchPrint, 3);
     87c:	63 e0       	ldi	r22, 0x03	; 3
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	80 e5       	ldi	r24, 0x50	; 80
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	01 d5       	rcall	.+2562   	; 0x1288 <outputS>
				 }
				 outputSampleRate(positionSelect, 0, currentPattern.outputPitch[positionSelect]);
     886:	f8 01       	movw	r30, r16
     888:	e6 59       	subi	r30, 0x96	; 150
     88a:	fc 4f       	sbci	r31, 0xFC	; 252
     88c:	40 89       	ldd	r20, Z+16	; 0x10
     88e:	50 e0       	ldi	r21, 0x00	; 0
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	c8 01       	movw	r24, r16
     896:	e8 d7       	rcall	.+4048   	; 0x1868 <outputSampleRate>
     898:	53 c1       	rjmp	.+678    	; 0xb40 <interperetKnob+0x4be>
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     89a:	0c 2f       	mov	r16, r28
     89c:	10 e0       	ldi	r17, 0x00	; 0
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     89e:	64 2f       	mov	r22, r20
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__floatsisf>
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	4c e4       	ldi	r20, 0x4C	; 76
     8b0:	50 e4       	ldi	r21, 0x40	; 64
     8b2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__divsf3>
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	4c e8       	ldi	r20, 0x8C	; 140
     8bc:	52 e4       	ldi	r21, 0x42	; 66
     8be:	f7 d7       	rcall	.+4078   	; 0x18ae <__subsf3>
     8c0:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__fixsfsi>
     8c4:	86 2f       	mov	r24, r22
     8c6:	97 2f       	mov	r25, r23
     8c8:	9c 01       	movw	r18, r24
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     8ca:	a8 01       	movw	r20, r16
     8cc:	46 59       	subi	r20, 0x96	; 150
     8ce:	5c 4f       	sbci	r21, 0xFC	; 252
     8d0:	fa 01       	movw	r30, r20
     8d2:	e8 5b       	subi	r30, 0xB8	; 184
     8d4:	ff 4f       	sbci	r31, 0xFF	; 255
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentEnvelopeVolume!=negCheckValueEnvelope)
     8d6:	80 81       	ld	r24, Z
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	98 2f       	mov	r25, r24
     8dc:	88 27       	eor	r24, r24
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     8de:	70 96       	adiw	r30, 0x10	; 16
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentEnvelopeVolume!=negCheckValueEnvelope)
     8e0:	40 81       	ld	r20, Z
     8e2:	84 2b       	or	r24, r20
     8e4:	82 17       	cp	r24, r18
     8e6:	93 07       	cpc	r25, r19
     8e8:	09 f4       	brne	.+2      	; 0x8ec <interperetKnob+0x26a>
     8ea:	2a c1       	rjmp	.+596    	; 0xb40 <interperetKnob+0x4be>
			{
				currentPattern.trackFadeGainLSB[positionSelect] = (negCheckValueEnvelope);
     8ec:	f8 01       	movw	r30, r16
     8ee:	ee 53       	subi	r30, 0x3E	; 62
     8f0:	fc 4f       	sbci	r31, 0xFC	; 252
     8f2:	60 83       	st	Z, r22
				if(negCheckValueEnvelope>(-1))
     8f4:	33 23       	and	r19, r19
     8f6:	64 f1       	brlt	.+88     	; 0x950 <interperetKnob+0x2ce>
				{
					currentPattern.trackFadeGainMSB[positionSelect] = 0;
     8f8:	f8 01       	movw	r30, r16
     8fa:	ee 54       	subi	r30, 0x4E	; 78
     8fc:	fc 4f       	sbci	r31, 0xFC	; 252
     8fe:	10 82       	st	Z, r1
					//just hard coding this for now until we make a function.
					envelopeLevelPrint[15] = 48;
     900:	e4 e1       	ldi	r30, 0x14	; 20
     902:	f2 e0       	ldi	r31, 0x02	; 2
     904:	80 e3       	ldi	r24, 0x30	; 48
     906:	87 87       	std	Z+15, r24	; 0x0f
					envelopeLevelPrint[17] = (currentPattern.trackFadeGainLSB[positionSelect]%10)+48;
     908:	2d ec       	ldi	r18, 0xCD	; 205
     90a:	62 9f       	mul	r22, r18
     90c:	81 2d       	mov	r24, r1
     90e:	11 24       	eor	r1, r1
     910:	86 95       	lsr	r24
     912:	86 95       	lsr	r24
     914:	86 95       	lsr	r24
     916:	88 0f       	add	r24, r24
     918:	98 2f       	mov	r25, r24
     91a:	99 0f       	add	r25, r25
     91c:	99 0f       	add	r25, r25
     91e:	89 0f       	add	r24, r25
     920:	96 2f       	mov	r25, r22
     922:	98 1b       	sub	r25, r24
     924:	89 2f       	mov	r24, r25
     926:	80 5d       	subi	r24, 0xD0	; 208
     928:	81 8b       	std	Z+17, r24	; 0x11
					envelopeLevelPrint[16] = ((currentPattern.trackFadeGainLSB[positionSelect]%100)/10)+48;
     92a:	89 e2       	ldi	r24, 0x29	; 41
     92c:	68 9f       	mul	r22, r24
     92e:	81 2d       	mov	r24, r1
     930:	11 24       	eor	r1, r1
     932:	82 95       	swap	r24
     934:	8f 70       	andi	r24, 0x0F	; 15
     936:	94 e6       	ldi	r25, 0x64	; 100
     938:	89 9f       	mul	r24, r25
     93a:	60 19       	sub	r22, r0
     93c:	11 24       	eor	r1, r1
     93e:	62 9f       	mul	r22, r18
     940:	61 2d       	mov	r22, r1
     942:	11 24       	eor	r1, r1
     944:	66 95       	lsr	r22
     946:	66 95       	lsr	r22
     948:	66 95       	lsr	r22
     94a:	60 5d       	subi	r22, 0xD0	; 208
     94c:	60 8b       	std	Z+16, r22	; 0x10
     94e:	20 c0       	rjmp	.+64     	; 0x990 <interperetKnob+0x30e>
				}else
				{
					currentPattern.trackFadeGainMSB[positionSelect] = 255;
     950:	f8 01       	movw	r30, r16
     952:	ee 54       	subi	r30, 0x4E	; 78
     954:	fc 4f       	sbci	r31, 0xFC	; 252
     956:	8f ef       	ldi	r24, 0xFF	; 255
     958:	80 83       	st	Z, r24
					envelopeLevelPrint[15] = '-';
     95a:	e4 e1       	ldi	r30, 0x14	; 20
     95c:	f2 e0       	ldi	r31, 0x02	; 2
     95e:	8d e2       	ldi	r24, 0x2D	; 45
     960:	87 87       	std	Z+15, r24	; 0x0f
					envelopeLevelPrint[16] = ((((currentPattern.trackFadeGainLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     962:	60 95       	com	r22
     964:	26 2f       	mov	r18, r22
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	2f 5f       	subi	r18, 0xFF	; 255
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	c9 01       	movw	r24, r18
     96e:	64 e6       	ldi	r22, 0x64	; 100
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
     976:	0a e0       	ldi	r16, 0x0A	; 10
     978:	10 e0       	ldi	r17, 0x00	; 0
     97a:	b8 01       	movw	r22, r16
     97c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
     980:	60 5d       	subi	r22, 0xD0	; 208
     982:	60 8b       	std	Z+16, r22	; 0x10
					envelopeLevelPrint[17] = (((currentPattern.trackFadeGainLSB[positionSelect]^255)+1)%10)+48;
     984:	c9 01       	movw	r24, r18
     986:	b8 01       	movw	r22, r16
     988:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
     98c:	80 5d       	subi	r24, 0xD0	; 208
     98e:	81 8b       	std	Z+17, r24	; 0x11
				}
				//then output to screen.
				envelopeLevelPrint[13] = positionSelect + 49;
     990:	cf 5c       	subi	r28, 0xCF	; 207
     992:	c0 93 21 02 	sts	0x0221, r28	; 0x800221 <envelopeLevelPrint+0xd>
				outputS(envelopeLevelPrint, 3);
     996:	63 e0       	ldi	r22, 0x03	; 3
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	84 e1       	ldi	r24, 0x14	; 20
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	74 d4       	rcall	.+2280   	; 0x1288 <outputS>
     9a0:	cf c0       	rjmp	.+414    	; 0xb40 <interperetKnob+0x4be>
				//nothing to "set", since envelopes are triggered after a sound is playing.
			}
			break;
 			
 			case 3:
 			if(currentPattern.trackFadeTimeMSB[positionSelect]!=checkBuffer[select])
     9a2:	8c 2f       	mov	r24, r28
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	fc 01       	movw	r30, r24
     9a8:	ee 52       	subi	r30, 0x2E	; 46
     9aa:	fc 4f       	sbci	r31, 0xFC	; 252
     9ac:	20 81       	ld	r18, Z
     9ae:	42 17       	cp	r20, r18
     9b0:	09 f4       	brne	.+2      	; 0x9b4 <interperetKnob+0x332>
     9b2:	c6 c0       	rjmp	.+396    	; 0xb40 <interperetKnob+0x4be>
 			{
 				(currentPattern.trackFadeTimeMSB[positionSelect]) = checkBuffer[select];
     9b4:	fc 01       	movw	r30, r24
     9b6:	ee 52       	subi	r30, 0x2E	; 46
     9b8:	fc 4f       	sbci	r31, 0xFC	; 252
     9ba:	40 83       	st	Z, r20
				 numPrinter(envelopeTimePrint,14,4,currentPattern.trackFadeTimeMSB[positionSelect]);
     9bc:	24 2f       	mov	r18, r20
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	44 e0       	ldi	r20, 0x04	; 4
     9c2:	6e e0       	ldi	r22, 0x0E	; 14
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	92 e0       	ldi	r25, 0x02	; 2
     9c8:	77 d4       	rcall	.+2286   	; 0x12b8 <numPrinter>
				 envelopeTimePrint[12] = positionSelect+49;
     9ca:	cf 5c       	subi	r28, 0xCF	; 207
     9cc:	c0 93 0c 02 	sts	0x020C, r28	; 0x80020c <__data_start+0xc>
				 outputS(envelopeTimePrint, 3);
     9d0:	63 e0       	ldi	r22, 0x03	; 3
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	57 d4       	rcall	.+2222   	; 0x1288 <outputS>
     9da:	b2 c0       	rjmp	.+356    	; 0xb40 <interperetKnob+0x4be>
 			}
 			break;
 			
 			case 4:;
 			int16_t currentTrackVolume = ((currentPattern.trackMainVolumeMSB[positionSelect]<<8)|(currentPattern.trackMainVolumeLSB[positionSelect]));
     9dc:	0c 2f       	mov	r16, r28
     9de:	10 e0       	ldi	r17, 0x00	; 0
 			int16_t negCheckValueTrack = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     9e0:	64 2f       	mov	r22, r20
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__floatsisf>
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	4c e4       	ldi	r20, 0x4C	; 76
     9f2:	50 e4       	ldi	r21, 0x40	; 64
     9f4:	c1 d7       	rcall	.+3970   	; 0x1978 <__divsf3>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	4c e8       	ldi	r20, 0x8C	; 140
     9fc:	52 e4       	ldi	r21, 0x42	; 66
     9fe:	57 d7       	rcall	.+3758   	; 0x18ae <__subsf3>
     a00:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__fixsfsi>
     a04:	86 2f       	mov	r24, r22
     a06:	97 2f       	mov	r25, r23
     a08:	9c 01       	movw	r18, r24
				 outputS(envelopeTimePrint, 3);
 			}
 			break;
 			
 			case 4:;
 			int16_t currentTrackVolume = ((currentPattern.trackMainVolumeMSB[positionSelect]<<8)|(currentPattern.trackMainVolumeLSB[positionSelect]));
     a0a:	f8 01       	movw	r30, r16
     a0c:	e6 59       	subi	r30, 0x96	; 150
     a0e:	fc 4f       	sbci	r31, 0xFC	; 252
 			int16_t negCheckValueTrack = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
 			if(currentTrackVolume!=negCheckValueTrack)
     a10:	80 a5       	ldd	r24, Z+40	; 0x28
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	98 2f       	mov	r25, r24
     a16:	88 27       	eor	r24, r24
     a18:	40 ad       	ldd	r20, Z+56	; 0x38
     a1a:	84 2b       	or	r24, r20
     a1c:	82 17       	cp	r24, r18
     a1e:	93 07       	cpc	r25, r19
     a20:	09 f4       	brne	.+2      	; 0xa24 <interperetKnob+0x3a2>
     a22:	8e c0       	rjmp	.+284    	; 0xb40 <interperetKnob+0x4be>
 			{
	 			currentPattern.trackMainVolumeLSB[positionSelect] = (negCheckValueTrack);
     a24:	f8 01       	movw	r30, r16
     a26:	e6 59       	subi	r30, 0x96	; 150
     a28:	fc 4f       	sbci	r31, 0xFC	; 252
     a2a:	60 af       	std	Z+56, r22	; 0x38
	 			if(negCheckValueTrack>(-1))
     a2c:	33 23       	and	r19, r19
     a2e:	64 f1       	brlt	.+88     	; 0xa88 <interperetKnob+0x406>
	 			{
		 			currentPattern.trackMainVolumeMSB[positionSelect] = 0;
     a30:	f8 01       	movw	r30, r16
     a32:	e6 59       	subi	r30, 0x96	; 150
     a34:	fc 4f       	sbci	r31, 0xFC	; 252
     a36:	10 a6       	std	Z+40, r1	; 0x28
		 			//just hard coding this for now until we make a function.
		 			trackVolumePrint[15] = 48;
     a38:	e8 e2       	ldi	r30, 0x28	; 40
     a3a:	f2 e0       	ldi	r31, 0x02	; 2
     a3c:	80 e3       	ldi	r24, 0x30	; 48
     a3e:	87 87       	std	Z+15, r24	; 0x0f
		 			trackVolumePrint[17] = (currentPattern.trackMainVolumeLSB[positionSelect]%10)+48;
     a40:	2d ec       	ldi	r18, 0xCD	; 205
     a42:	62 9f       	mul	r22, r18
     a44:	81 2d       	mov	r24, r1
     a46:	11 24       	eor	r1, r1
     a48:	86 95       	lsr	r24
     a4a:	86 95       	lsr	r24
     a4c:	86 95       	lsr	r24
     a4e:	88 0f       	add	r24, r24
     a50:	98 2f       	mov	r25, r24
     a52:	99 0f       	add	r25, r25
     a54:	99 0f       	add	r25, r25
     a56:	89 0f       	add	r24, r25
     a58:	96 2f       	mov	r25, r22
     a5a:	98 1b       	sub	r25, r24
     a5c:	89 2f       	mov	r24, r25
     a5e:	80 5d       	subi	r24, 0xD0	; 208
     a60:	81 8b       	std	Z+17, r24	; 0x11
		 			trackVolumePrint[16] = ((currentPattern.trackMainVolumeLSB[positionSelect]%100)/10)+48;
     a62:	89 e2       	ldi	r24, 0x29	; 41
     a64:	68 9f       	mul	r22, r24
     a66:	81 2d       	mov	r24, r1
     a68:	11 24       	eor	r1, r1
     a6a:	82 95       	swap	r24
     a6c:	8f 70       	andi	r24, 0x0F	; 15
     a6e:	94 e6       	ldi	r25, 0x64	; 100
     a70:	89 9f       	mul	r24, r25
     a72:	60 19       	sub	r22, r0
     a74:	11 24       	eor	r1, r1
     a76:	62 9f       	mul	r22, r18
     a78:	61 2d       	mov	r22, r1
     a7a:	11 24       	eor	r1, r1
     a7c:	66 95       	lsr	r22
     a7e:	66 95       	lsr	r22
     a80:	66 95       	lsr	r22
     a82:	60 5d       	subi	r22, 0xD0	; 208
     a84:	60 8b       	std	Z+16, r22	; 0x10
     a86:	23 c0       	rjmp	.+70     	; 0xace <interperetKnob+0x44c>
	 			}else
	 			{
		 			currentPattern.trackMainVolumeMSB[positionSelect] = 255;
     a88:	8f ef       	ldi	r24, 0xFF	; 255
     a8a:	f8 01       	movw	r30, r16
     a8c:	e6 59       	subi	r30, 0x96	; 150
     a8e:	fc 4f       	sbci	r31, 0xFC	; 252
     a90:	80 a7       	std	Z+40, r24	; 0x28
		 			trackVolumePrint[15] = '-';
     a92:	e8 e2       	ldi	r30, 0x28	; 40
     a94:	f2 e0       	ldi	r31, 0x02	; 2
     a96:	8d e2       	ldi	r24, 0x2D	; 45
     a98:	87 87       	std	Z+15, r24	; 0x0f
		 			trackVolumePrint[16] = ((((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     a9a:	60 95       	com	r22
     a9c:	26 2f       	mov	r18, r22
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	2f 5f       	subi	r18, 0xFF	; 255
     aa2:	3f 4f       	sbci	r19, 0xFF	; 255
     aa4:	c9 01       	movw	r24, r18
     aa6:	64 e6       	ldi	r22, 0x64	; 100
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
     aae:	0f 2e       	mov	r0, r31
     ab0:	fa e0       	ldi	r31, 0x0A	; 10
     ab2:	ef 2e       	mov	r14, r31
     ab4:	f1 2c       	mov	r15, r1
     ab6:	f0 2d       	mov	r31, r0
     ab8:	b7 01       	movw	r22, r14
     aba:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
     abe:	60 5d       	subi	r22, 0xD0	; 208
     ac0:	60 8b       	std	Z+16, r22	; 0x10
		 			trackVolumePrint[17] = (((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
     ac2:	c9 01       	movw	r24, r18
     ac4:	b7 01       	movw	r22, r14
     ac6:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
     aca:	80 5d       	subi	r24, 0xD0	; 208
	 			}
	 			//then output to screen.
	 			trackVolumePrint[11] = positionSelect + 49;
     acc:	81 8b       	std	Z+17, r24	; 0x11
     ace:	cf 5c       	subi	r28, 0xCF	; 207
     ad0:	c0 93 33 02 	sts	0x0233, r28	; 0x800233 <trackVolumePrint+0xb>
	 			outputS(trackVolumePrint, 3);
     ad4:	63 e0       	ldi	r22, 0x03	; 3
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	88 e2       	ldi	r24, 0x28	; 40
     ada:	92 e0       	ldi	r25, 0x02	; 2
     adc:	d5 d3       	rcall	.+1962   	; 0x1288 <outputS>
	 			setTrackVolume(currentPattern.trackSampleLSB[positionSelect], currentPattern.trackSampleMSB[positionSelect],
				 currentPattern.trackMainVolumeLSB[positionSelect], currentPattern.trackMainVolumeMSB[positionSelect]);
     ade:	f8 01       	movw	r30, r16
     ae0:	e6 59       	subi	r30, 0x96	; 150
     ae2:	fc 4f       	sbci	r31, 0xFC	; 252
		 			trackVolumePrint[17] = (((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
	 			}
	 			//then output to screen.
	 			trackVolumePrint[11] = positionSelect + 49;
	 			outputS(trackVolumePrint, 3);
	 			setTrackVolume(currentPattern.trackSampleLSB[positionSelect], currentPattern.trackSampleMSB[positionSelect],
     ae4:	20 a5       	ldd	r18, Z+40	; 0x28
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 ad       	ldd	r20, Z+56	; 0x38
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	df 01       	movw	r26, r30
     aee:	a8 56       	subi	r26, 0x68	; 104
     af0:	bf 4f       	sbci	r27, 0xFF	; 255
     af2:	6c 91       	ld	r22, X
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	e8 55       	subi	r30, 0x58	; 88
     af8:	ff 4f       	sbci	r31, 0xFF	; 255
     afa:	80 81       	ld	r24, Z
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	90 d6       	rcall	.+3360   	; 0x1820 <setTrackVolume>
     b00:	1f c0       	rjmp	.+62     	; 0xb40 <interperetKnob+0x4be>
		}
		
		
	}else
	{
		switch (select)
     b02:	9a 32       	cpi	r25, 0x2A	; 42
     b04:	e9 f4       	brne	.+58     	; 0xb40 <interperetKnob+0x4be>
// 				gpKnob1 = checkValue;
// 			}
// 			break;
// 			
 			case 42:
 			if(currentPattern.patternBPM!=checkBuffer[select]+30)
     b06:	24 2f       	mov	r18, r20
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	22 5e       	subi	r18, 0xE2	; 226
     b0c:	3f 4f       	sbci	r19, 0xFF	; 255
     b0e:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <currentPattern+0x158>
     b12:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <currentPattern+0x159>
     b16:	82 17       	cp	r24, r18
     b18:	93 07       	cpc	r25, r19
     b1a:	91 f0       	breq	.+36     	; 0xb40 <interperetKnob+0x4be>
			{
 				currentPattern.patternBPM = checkBuffer[select]+30;
     b1c:	30 93 c3 04 	sts	0x04C3, r19	; 0x8004c3 <currentPattern+0x159>
     b20:	20 93 c2 04 	sts	0x04C2, r18	; 0x8004c2 <currentPattern+0x158>
				if(encoderAValue==0){
     b24:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
				 numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
     b28:	81 11       	cpse	r24, r1
     b2a:	0a c0       	rjmp	.+20     	; 0xb40 <interperetKnob+0x4be>
     b2c:	43 e0       	ldi	r20, 0x03	; 3
     b2e:	65 e0       	ldi	r22, 0x05	; 5
     b30:	8b e6       	ldi	r24, 0x6B	; 107
     b32:	95 e0       	ldi	r25, 0x05	; 5
				 outputS(screen0[2], 2);
     b34:	c1 d3       	rcall	.+1922   	; 0x12b8 <numPrinter>
     b36:	62 e0       	ldi	r22, 0x02	; 2
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	8b e6       	ldi	r24, 0x6B	; 107
     b3c:	95 e0       	ldi	r25, 0x05	; 5
     b3e:	a4 d3       	rcall	.+1864   	; 0x1288 <outputS>
// 			break;
		}
		
	}

}
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	ff 90       	pop	r15
     b48:	ef 90       	pop	r14
     b4a:	08 95       	ret

00000b4c <listenKnobs>:

void listenKnobs()
{
     b4c:	cf 93       	push	r28
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     b4e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
     b50:	8c 2f       	mov	r24, r28
     b52:	38 dd       	rcall	.-1424   	; 0x5c4 <selectKnob>
		updateKnob(loopCounter);
     b54:	8c 2f       	mov	r24, r28
     b56:	8b dd       	rcall	.-1258   	; 0x66e <updateKnob>
		interperetKnob(loopCounter);
     b58:	8c 2f       	mov	r24, r28
     b5a:	93 dd       	rcall	.-1242   	; 0x682 <interperetKnob>
     b5c:	cf 5f       	subi	r28, 0xFF	; 255

}

void listenKnobs()
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     b5e:	cc 32       	cpi	r28, 0x2C	; 44
     b60:	b9 f7       	brne	.-18     	; 0xb50 <listenKnobs+0x4>
     b62:	cf 91       	pop	r28
		updateKnob(loopCounter);
		interperetKnob(loopCounter);
	}


}
     b64:	08 95       	ret

00000b66 <initLEDs>:
#include <avr/io.h>
#include "globalVariables.h"

void initLEDs()
{
	DDRG = 0B00100101; //outputs on G5,2, and 0.
     b66:	85 e2       	ldi	r24, 0x25	; 37
     b68:	83 bb       	out	0x13, r24	; 19
     b6a:	08 95       	ret

00000b6c <updateLEDs>:

}

void updateLEDs()
{
	if(encoderAValue==0){
     b6c:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
     b70:	81 11       	cpse	r24, r1
     b72:	12 c0       	rjmp	.+36     	; 0xb98 <updateLEDs+0x2c>
	uint16_t trigLEDParse = currentTrigButtons;
     b74:	20 91 93 05 	lds	r18, 0x0593	; 0x800593 <currentTrigButtons>
     b78:	30 91 94 05 	lds	r19, 0x0594	; 0x800594 <currentTrigButtons+0x1>
	PORTG &= (~(1 << PG2)); //set latch low for data input
     b7c:	a2 98       	cbi	0x14, 2	; 20
     b7e:	81 e1       	ldi	r24, 0x11	; 17
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
     b80:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
     b82:	33 23       	and	r19, r19
     b84:	14 f4       	brge	.+4      	; 0xb8a <updateLEDs+0x1e>
		{
			PORTG |= (1 << PG5); //send current 1's place bit to the data pin 
     b86:	a5 9a       	sbi	0x14, 5	; 20
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <updateLEDs+0x20>
		}
		else
		{
			PORTG &= (~(1 << PG5));
     b8a:	a5 98       	cbi	0x14, 5	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
     b8c:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
     b8e:	22 0f       	add	r18, r18
     b90:	33 1f       	adc	r19, r19
     b92:	81 50       	subi	r24, 0x01	; 1
void updateLEDs()
{
	if(encoderAValue==0){
	uint16_t trigLEDParse = currentTrigButtons;
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t i = 0; i<17; i++)
     b94:	a9 f7       	brne	.-22     	; 0xb80 <updateLEDs+0x14>
			PORTG &= (~(1 << PG5));
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	PORTG |= (1 << PG2); //latch pin high
     b96:	a2 9a       	sbi	0x14, 2	; 20
     b98:	08 95       	ret

00000b9a <main>:
#include <avr/interrupt.h>


int main(void)
{
	midiChannel = 0; //for now, need to change this from load memory
     b9a:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <midiChannel>
	initBank();
     b9e:	2d dc       	rcall	.-1958   	; 0x3fa <initBank>
	initScreen();
     ba0:	16 d3       	rcall	.+1580   	; 0x11ce <initScreen>
	initButtons();
     ba2:	c1 da       	rcall	.-2686   	; 0x126 <initButtons>
	initLEDs();
     ba4:	e0 df       	rcall	.-64     	; 0xb66 <initLEDs>
	initEncoders();
     ba6:	b4 db       	rcall	.-2200   	; 0x310 <initEncoders>
	initMenu();
     ba8:	10 d0       	rcall	.+32     	; 0xbca <initMenu>
	initADC();
     baa:	f8 dc       	rcall	.-1552   	; 0x59c <initADC>
	serialInit0();
     bac:	c6 d5       	rcall	.+2956   	; 0x173a <serialInit0>
	sei();
	 //this will be necessary on first startup, but maybe not in the actual program? maybe just something handy to have.
	//loadMemory(); //we need to load in the first struct in locarion 0 of our eeprom.
	while (1)
	{
		listenTrigButtons();
     bae:	78 94       	sei
		listenMidi();
     bb0:	c1 da       	rcall	.-2686   	; 0x134 <listenTrigButtons>
		listenGPButtons();
     bb2:	6a d2       	rcall	.+1236   	; 0x1088 <listenMidi>
     bb4:	9a db       	rcall	.-2252   	; 0x2ea <listenGPButtons>
		listenMidi();
     bb6:	68 d2       	rcall	.+1232   	; 0x1088 <listenMidi>
     bb8:	d9 df       	rcall	.-78     	; 0xb6c <updateLEDs>
		updateLEDs();
     bba:	66 d2       	rcall	.+1228   	; 0x1088 <listenMidi>
     bbc:	db db       	rcall	.-2122   	; 0x374 <listenEncoders>
		listenMidi();
     bbe:	64 d2       	rcall	.+1224   	; 0x1088 <listenMidi>
     bc0:	c5 df       	rcall	.-118    	; 0xb4c <listenKnobs>
		listenEncoders();
     bc2:	62 d2       	rcall	.+1220   	; 0x1088 <listenMidi>
     bc4:	42 d0       	rcall	.+132    	; 0xc4a <updateScreen>
		listenMidi();
     bc6:	60 d2       	rcall	.+1216   	; 0x1088 <listenMidi>
     bc8:	f3 cf       	rjmp	.-26     	; 0xbb0 <main+0x16>

00000bca <initMenu>:
		listenKnobs();
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
		listenMidi();
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
		//updateSequence();
		updateScreen();
     bd2:	c2 ec       	ldi	r28, 0xC2	; 194
     bd4:	d4 e0       	ldi	r29, 0x04	; 4
		listenMidi();
     bd6:	28 81       	ld	r18, Y
     bd8:	39 81       	ldd	r19, Y+1	; 0x01
     bda:	43 e0       	ldi	r20, 0x03	; 3


void initMenu()
{

numPrinter(screen0[2],5,3, currentPattern.patternBPM);
     bdc:	65 e0       	ldi	r22, 0x05	; 5
     bde:	8b e6       	ldi	r24, 0x6B	; 107
     be0:	95 e0       	ldi	r25, 0x05	; 5
     be2:	6a d3       	rcall	.+1748   	; 0x12b8 <numPrinter>
numPrinter(screen3[1],14,2, (midiChannel+1));
     be4:	20 91 95 05 	lds	r18, 0x0595	; 0x800595 <midiChannel>
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	2f 5f       	subi	r18, 0xFF	; 255
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	42 e0       	ldi	r20, 0x02	; 2
     bf0:	6e e0       	ldi	r22, 0x0E	; 14
     bf2:	8f e2       	ldi	r24, 0x2F	; 47
     bf4:	96 e0       	ldi	r25, 0x06	; 6
     bf6:	60 d3       	rcall	.+1728   	; 0x12b8 <numPrinter>
numPrinter(screen0[1], 9, 3, currentPatternNumber);
     bf8:	20 91 19 06 	lds	r18, 0x0619	; 0x800619 <currentPatternNumber>
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	43 e0       	ldi	r20, 0x03	; 3
     c00:	69 e0       	ldi	r22, 0x09	; 9
     c02:	87 e5       	ldi	r24, 0x57	; 87
     c04:	95 e0       	ldi	r25, 0x05	; 5
     c06:	58 d3       	rcall	.+1712   	; 0x12b8 <numPrinter>
numPrinter(screen1[1], 9, 3, currentPatternNumber);
     c08:	20 91 19 06 	lds	r18, 0x0619	; 0x800619 <currentPatternNumber>
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	43 e0       	ldi	r20, 0x03	; 3
     c10:	69 e0       	ldi	r22, 0x09	; 9
     c12:	8b ed       	ldi	r24, 0xDB	; 219
     c14:	94 e0       	ldi	r25, 0x04	; 4
     c16:	50 d3       	rcall	.+1696   	; 0x12b8 <numPrinter>
numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
     c18:	28 81       	ld	r18, Y
     c1a:	39 81       	ldd	r19, Y+1	; 0x01
     c1c:	43 e0       	ldi	r20, 0x03	; 3
     c1e:	65 e0       	ldi	r22, 0x05	; 5
     c20:	8b e6       	ldi	r24, 0x6B	; 107
     c22:	95 e0       	ldi	r25, 0x05	; 5
     c24:	49 d3       	rcall	.+1682   	; 0x12b8 <numPrinter>
     c26:	03 e4       	ldi	r16, 0x43	; 67
     c28:	15 e0       	ldi	r17, 0x05	; 5
     c2a:	c0 e0       	ldi	r28, 0x00	; 0

for(uint8_t i=0;i<4; i++ ){
	outputS(screen0[i],i);
     c2c:	d0 e0       	ldi	r29, 0x00	; 0
     c2e:	be 01       	movw	r22, r28
     c30:	c8 01       	movw	r24, r16
     c32:	2a d3       	rcall	.+1620   	; 0x1288 <outputS>
     c34:	21 96       	adiw	r28, 0x01	; 1
     c36:	0c 5e       	subi	r16, 0xEC	; 236
     c38:	1f 4f       	sbci	r17, 0xFF	; 255
numPrinter(screen3[1],14,2, (midiChannel+1));
numPrinter(screen0[1], 9, 3, currentPatternNumber);
numPrinter(screen1[1], 9, 3, currentPatternNumber);
numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);

for(uint8_t i=0;i<4; i++ ){
     c3a:	c4 30       	cpi	r28, 0x04	; 4
     c3c:	d1 05       	cpc	r29, r1
     c3e:	b9 f7       	brne	.-18     	; 0xc2e <initMenu+0x64>
	outputS(screen0[i],i);
}


}
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	08 95       	ret

00000c4a <updateScreen>:

void updateScreen()
{
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
	if(prevEncoderBValue!=encoderBValue)
     c52:	90 91 e9 05 	lds	r25, 0x05E9	; 0x8005e9 <prevEncoderBValue>
     c56:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <encoderBValue>
     c5a:	98 17       	cp	r25, r24
     c5c:	09 f4       	brne	.+2      	; 0xc60 <updateScreen+0x16>
     c5e:	9d c1       	rjmp	.+826    	; 0xf9a <updateScreen+0x350>
	{
		encoderBValue = encoderBValue%4;
     c60:	83 70       	andi	r24, 0x03	; 3
     c62:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <encoderBValue>
		//this needs some work...
		uint8_t menuMoveArrow = encoderBValue - prevEncoderBValue; //this tells us whether we need to move up or down.
     c66:	89 1b       	sub	r24, r25
		switch(encoderAValue)
     c68:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <encoderAValue>
     c6c:	92 30       	cpi	r25, 0x02	; 2
     c6e:	09 f4       	brne	.+2      	; 0xc72 <updateScreen+0x28>
     c70:	72 c0       	rjmp	.+228    	; 0xd56 <updateScreen+0x10c>
     c72:	93 30       	cpi	r25, 0x03	; 3
     c74:	09 f4       	brne	.+2      	; 0xc78 <updateScreen+0x2e>
     c76:	db c0       	rjmp	.+438    	; 0xe2e <updateScreen+0x1e4>
     c78:	91 30       	cpi	r25, 0x01	; 1
     c7a:	09 f0       	breq	.+2      	; 0xc7e <updateScreen+0x34>
     c7c:	8a c1       	rjmp	.+788    	; 0xf92 <updateScreen+0x348>
		{
			case 1:
			if(menuMoveArrow==1)
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	a1 f5       	brne	.+104    	; 0xcea <updateScreen+0xa0>
			{
				screen1Index++;
     c82:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <screen1Index>
     c86:	8f 5f       	subi	r24, 0xFF	; 255
				if(screen1Index>3)
     c88:	84 30       	cpi	r24, 0x04	; 4
     c8a:	18 f4       	brcc	.+6      	; 0xc92 <updateScreen+0x48>
		switch(encoderAValue)
		{
			case 1:
			if(menuMoveArrow==1)
			{
				screen1Index++;
     c8c:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <screen1Index>
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <updateScreen+0x4e>
				if(screen1Index>3)
				{
					screen1Index = 3;
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <screen1Index>
				}
				screen1[screen1Index][19] = '<';
     c98:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <screen1Index>
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	c4 e1       	ldi	r28, 0x14	; 20
     ca0:	c6 9f       	mul	r28, r22
     ca2:	c0 01       	movw	r24, r0
     ca4:	c7 9f       	mul	r28, r23
     ca6:	90 0d       	add	r25, r0
     ca8:	11 24       	eor	r1, r1
     caa:	89 53       	subi	r24, 0x39	; 57
     cac:	9b 4f       	sbci	r25, 0xFB	; 251
     cae:	2c e3       	ldi	r18, 0x3C	; 60
     cb0:	fc 01       	movw	r30, r24
     cb2:	23 8b       	std	Z+19, r18	; 0x13
				screen1[screen1Index-1][19] = ' ';
     cb4:	9b 01       	movw	r18, r22
     cb6:	21 50       	subi	r18, 0x01	; 1
     cb8:	31 09       	sbc	r19, r1
     cba:	c2 9f       	mul	r28, r18
     cbc:	f0 01       	movw	r30, r0
     cbe:	c3 9f       	mul	r28, r19
     cc0:	f0 0d       	add	r31, r0
     cc2:	11 24       	eor	r1, r1
     cc4:	e9 53       	subi	r30, 0x39	; 57
     cc6:	fb 4f       	sbci	r31, 0xFB	; 251
     cc8:	20 e2       	ldi	r18, 0x20	; 32
     cca:	23 8b       	std	Z+19, r18	; 0x13
				outputS(screen1[screen1Index], screen1Index);
     ccc:	dd d2       	rcall	.+1466   	; 0x1288 <outputS>
				outputS(screen1[screen1Index-1], screen1Index-1);
     cce:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <screen1Index>
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	61 50       	subi	r22, 0x01	; 1
     cd6:	71 09       	sbc	r23, r1
     cd8:	c6 9f       	mul	r28, r22
     cda:	c0 01       	movw	r24, r0
     cdc:	c7 9f       	mul	r28, r23
     cde:	90 0d       	add	r25, r0
     ce0:	11 24       	eor	r1, r1
     ce2:	89 53       	subi	r24, 0x39	; 57
     ce4:	9b 4f       	sbci	r25, 0xFB	; 251
     ce6:	d0 d2       	rcall	.+1440   	; 0x1288 <outputS>
     ce8:	54 c1       	rjmp	.+680    	; 0xf92 <updateScreen+0x348>
			
			
			}else 
			{
				screen1Index--;
     cea:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <screen1Index>
				if(screen1Index>250||screen1Index==0)
     cee:	9e ef       	ldi	r25, 0xFE	; 254
     cf0:	98 0f       	add	r25, r24
     cf2:	9a 3f       	cpi	r25, 0xFA	; 250
     cf4:	20 f4       	brcc	.+8      	; 0xcfe <updateScreen+0xb4>
				outputS(screen1[screen1Index-1], screen1Index-1);
			
			
			}else 
			{
				screen1Index--;
     cf6:	81 50       	subi	r24, 0x01	; 1
     cf8:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <screen1Index>
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <updateScreen+0xba>
				if(screen1Index>250||screen1Index==0)
				{
					screen1Index = 1;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <screen1Index>
				}
				screen1[screen1Index][19] = '<';
     d04:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <screen1Index>
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	c4 e1       	ldi	r28, 0x14	; 20
     d0c:	c6 9f       	mul	r28, r22
     d0e:	c0 01       	movw	r24, r0
     d10:	c7 9f       	mul	r28, r23
     d12:	90 0d       	add	r25, r0
     d14:	11 24       	eor	r1, r1
     d16:	89 53       	subi	r24, 0x39	; 57
     d18:	9b 4f       	sbci	r25, 0xFB	; 251
     d1a:	2c e3       	ldi	r18, 0x3C	; 60
     d1c:	fc 01       	movw	r30, r24
     d1e:	23 8b       	std	Z+19, r18	; 0x13
				screen1[screen1Index+1][19] = ' ';
     d20:	9b 01       	movw	r18, r22
     d22:	2f 5f       	subi	r18, 0xFF	; 255
     d24:	3f 4f       	sbci	r19, 0xFF	; 255
     d26:	c2 9f       	mul	r28, r18
     d28:	f0 01       	movw	r30, r0
     d2a:	c3 9f       	mul	r28, r19
     d2c:	f0 0d       	add	r31, r0
     d2e:	11 24       	eor	r1, r1
     d30:	e9 53       	subi	r30, 0x39	; 57
     d32:	fb 4f       	sbci	r31, 0xFB	; 251
     d34:	20 e2       	ldi	r18, 0x20	; 32
				outputS(screen1[screen1Index], screen1Index);
     d36:	23 8b       	std	Z+19, r18	; 0x13
     d38:	a7 d2       	rcall	.+1358   	; 0x1288 <outputS>
				outputS(screen1[screen1Index+1], screen1Index+1);
     d3a:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <screen1Index>
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	6f 5f       	subi	r22, 0xFF	; 255
     d42:	7f 4f       	sbci	r23, 0xFF	; 255
     d44:	c6 9f       	mul	r28, r22
     d46:	c0 01       	movw	r24, r0
     d48:	c7 9f       	mul	r28, r23
     d4a:	90 0d       	add	r25, r0
     d4c:	11 24       	eor	r1, r1
     d4e:	89 53       	subi	r24, 0x39	; 57
     d50:	9b 4f       	sbci	r25, 0xFB	; 251
     d52:	9a d2       	rcall	.+1332   	; 0x1288 <outputS>
     d54:	1e c1       	rjmp	.+572    	; 0xf92 <updateScreen+0x348>
			}
			
			break;
			
			case 2:
			if(menuMoveArrow==1)
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	a1 f5       	brne	.+104    	; 0xdc2 <updateScreen+0x178>
			{
				screen2Index++;
     d5a:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <screen2Index>
     d5e:	8f 5f       	subi	r24, 0xFF	; 255
				if(screen2Index>3)
     d60:	84 30       	cpi	r24, 0x04	; 4
     d62:	18 f4       	brcc	.+6      	; 0xd6a <updateScreen+0x120>
			break;
			
			case 2:
			if(menuMoveArrow==1)
			{
				screen2Index++;
     d64:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <screen2Index>
     d68:	03 c0       	rjmp	.+6      	; 0xd70 <updateScreen+0x126>
				if(screen2Index>3)
				{
					screen2Index = 3;
     d6a:	83 e0       	ldi	r24, 0x03	; 3
     d6c:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <screen2Index>
				}
				screen2[screen2Index][19] = '<';
     d70:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <screen2Index>
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	c4 e1       	ldi	r28, 0x14	; 20
     d78:	c6 9f       	mul	r28, r22
     d7a:	c0 01       	movw	r24, r0
     d7c:	c7 9f       	mul	r28, r23
     d7e:	90 0d       	add	r25, r0
     d80:	11 24       	eor	r1, r1
     d82:	89 56       	subi	r24, 0x69	; 105
     d84:	9a 4f       	sbci	r25, 0xFA	; 250
     d86:	2c e3       	ldi	r18, 0x3C	; 60
     d88:	fc 01       	movw	r30, r24
     d8a:	23 8b       	std	Z+19, r18	; 0x13
				screen2[screen2Index-1][19] = ' ';
     d8c:	9b 01       	movw	r18, r22
     d8e:	21 50       	subi	r18, 0x01	; 1
     d90:	31 09       	sbc	r19, r1
     d92:	c2 9f       	mul	r28, r18
     d94:	f0 01       	movw	r30, r0
     d96:	c3 9f       	mul	r28, r19
     d98:	f0 0d       	add	r31, r0
     d9a:	11 24       	eor	r1, r1
     d9c:	e9 56       	subi	r30, 0x69	; 105
     d9e:	fa 4f       	sbci	r31, 0xFA	; 250
     da0:	20 e2       	ldi	r18, 0x20	; 32
				outputS(screen2[screen2Index], screen2Index);
     da2:	23 8b       	std	Z+19, r18	; 0x13
     da4:	71 d2       	rcall	.+1250   	; 0x1288 <outputS>
				outputS(screen2[screen2Index-1], screen2Index-1);
     da6:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <screen2Index>
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	61 50       	subi	r22, 0x01	; 1
     dae:	71 09       	sbc	r23, r1
     db0:	c6 9f       	mul	r28, r22
     db2:	c0 01       	movw	r24, r0
     db4:	c7 9f       	mul	r28, r23
     db6:	90 0d       	add	r25, r0
     db8:	11 24       	eor	r1, r1
     dba:	89 56       	subi	r24, 0x69	; 105
     dbc:	9a 4f       	sbci	r25, 0xFA	; 250
     dbe:	64 d2       	rcall	.+1224   	; 0x1288 <outputS>
     dc0:	e8 c0       	rjmp	.+464    	; 0xf92 <updateScreen+0x348>
				
				
			}else
			{
				screen2Index--;
     dc2:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <screen2Index>
				if(screen2Index>250||screen2Index==0) //this should account for any negative numbers from overflow.
     dc6:	9e ef       	ldi	r25, 0xFE	; 254
     dc8:	98 0f       	add	r25, r24
     dca:	9a 3f       	cpi	r25, 0xFA	; 250
     dcc:	20 f4       	brcc	.+8      	; 0xdd6 <updateScreen+0x18c>
				outputS(screen2[screen2Index-1], screen2Index-1);
				
				
			}else
			{
				screen2Index--;
     dce:	81 50       	subi	r24, 0x01	; 1
     dd0:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <screen2Index>
     dd4:	03 c0       	rjmp	.+6      	; 0xddc <updateScreen+0x192>
				if(screen2Index>250||screen2Index==0) //this should account for any negative numbers from overflow.
				{
					screen2Index = 1;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <screen2Index>
				}
				screen2[screen2Index][19] = '<';
     ddc:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <screen2Index>
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	c4 e1       	ldi	r28, 0x14	; 20
     de4:	c6 9f       	mul	r28, r22
     de6:	c0 01       	movw	r24, r0
     de8:	c7 9f       	mul	r28, r23
     dea:	90 0d       	add	r25, r0
     dec:	11 24       	eor	r1, r1
     dee:	89 56       	subi	r24, 0x69	; 105
     df0:	9a 4f       	sbci	r25, 0xFA	; 250
     df2:	2c e3       	ldi	r18, 0x3C	; 60
     df4:	fc 01       	movw	r30, r24
     df6:	23 8b       	std	Z+19, r18	; 0x13
				screen2[screen2Index+1][19] = ' ';
     df8:	9b 01       	movw	r18, r22
     dfa:	2f 5f       	subi	r18, 0xFF	; 255
     dfc:	3f 4f       	sbci	r19, 0xFF	; 255
     dfe:	c2 9f       	mul	r28, r18
     e00:	f0 01       	movw	r30, r0
     e02:	c3 9f       	mul	r28, r19
     e04:	f0 0d       	add	r31, r0
     e06:	11 24       	eor	r1, r1
     e08:	e9 56       	subi	r30, 0x69	; 105
     e0a:	fa 4f       	sbci	r31, 0xFA	; 250
     e0c:	20 e2       	ldi	r18, 0x20	; 32
				outputS(screen2[screen2Index], screen2Index);
     e0e:	23 8b       	std	Z+19, r18	; 0x13
     e10:	3b d2       	rcall	.+1142   	; 0x1288 <outputS>
				outputS(screen2[screen2Index+1], screen2Index+1);
     e12:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <screen2Index>
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	6f 5f       	subi	r22, 0xFF	; 255
     e1a:	7f 4f       	sbci	r23, 0xFF	; 255
     e1c:	c6 9f       	mul	r28, r22
     e1e:	c0 01       	movw	r24, r0
     e20:	c7 9f       	mul	r28, r23
     e22:	90 0d       	add	r25, r0
     e24:	11 24       	eor	r1, r1
     e26:	89 56       	subi	r24, 0x69	; 105
     e28:	9a 4f       	sbci	r25, 0xFA	; 250
     e2a:	2e d2       	rcall	.+1116   	; 0x1288 <outputS>
     e2c:	b2 c0       	rjmp	.+356    	; 0xf92 <updateScreen+0x348>
			break;
			
			case 3:
			
				//this is the functionality if encoder B flag is not pressed
				if(menuMoveArrow==1)
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	09 f0       	breq	.+2      	; 0xe34 <updateScreen+0x1ea>
     e32:	58 c0       	rjmp	.+176    	; 0xee4 <updateScreen+0x29a>
				{
					if(encoderBFlag)
     e34:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <encoderBFlag>
     e38:	88 23       	and	r24, r24
     e3a:	01 f1       	breq	.+64     	; 0xe7c <updateScreen+0x232>
					{
						switch(screen3Index)
     e3c:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <screen3Index>
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	09 f0       	breq	.+2      	; 0xe46 <updateScreen+0x1fc>
     e44:	a6 c0       	rjmp	.+332    	; 0xf92 <updateScreen+0x348>
						{
							case 1:
							midiChannel = midiChannel+1;
     e46:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <midiChannel>
     e4a:	8f 5f       	subi	r24, 0xFF	; 255
							if(midiChannel>15)
     e4c:	80 31       	cpi	r24, 0x10	; 16
     e4e:	18 f4       	brcc	.+6      	; 0xe56 <updateScreen+0x20c>
					if(encoderBFlag)
					{
						switch(screen3Index)
						{
							case 1:
							midiChannel = midiChannel+1;
     e50:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <midiChannel>
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <updateScreen+0x212>
							if(midiChannel>15)
							{
								midiChannel = 15;
     e56:	8f e0       	ldi	r24, 0x0F	; 15
     e58:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <midiChannel>
							}
							numPrinter(screen3[1], 14, 2, (midiChannel+1));
     e5c:	20 91 95 05 	lds	r18, 0x0595	; 0x800595 <midiChannel>
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	42 e0       	ldi	r20, 0x02	; 2
     e68:	6e e0       	ldi	r22, 0x0E	; 14
     e6a:	8f e2       	ldi	r24, 0x2F	; 47
     e6c:	96 e0       	ldi	r25, 0x06	; 6
							outputS(screen3[1], 1);
     e6e:	24 d2       	rcall	.+1096   	; 0x12b8 <numPrinter>
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	8f e2       	ldi	r24, 0x2F	; 47
     e76:	96 e0       	ldi	r25, 0x06	; 6
     e78:	07 d2       	rcall	.+1038   	; 0x1288 <outputS>
							break;
     e7a:	8b c0       	rjmp	.+278    	; 0xf92 <updateScreen+0x348>
							
						}
					}else
					{
						screen3Index++;
     e7c:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <screen3Index>
     e80:	8f 5f       	subi	r24, 0xFF	; 255
						if(screen3Index>3)
     e82:	84 30       	cpi	r24, 0x04	; 4
     e84:	18 f4       	brcc	.+6      	; 0xe8c <updateScreen+0x242>
							break;
							
						}
					}else
					{
						screen3Index++;
     e86:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <screen3Index>
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <updateScreen+0x248>
						if(screen3Index>3)
						{
							screen3Index = 3;
     e8c:	83 e0       	ldi	r24, 0x03	; 3
     e8e:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <screen3Index>
						}
						screen3[screen3Index][19] = '<';
     e92:	60 91 6b 06 	lds	r22, 0x066B	; 0x80066b <screen3Index>
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	c4 e1       	ldi	r28, 0x14	; 20
     e9a:	c6 9f       	mul	r28, r22
     e9c:	c0 01       	movw	r24, r0
     e9e:	c7 9f       	mul	r28, r23
     ea0:	90 0d       	add	r25, r0
     ea2:	11 24       	eor	r1, r1
     ea4:	85 5e       	subi	r24, 0xE5	; 229
     ea6:	99 4f       	sbci	r25, 0xF9	; 249
     ea8:	2c e3       	ldi	r18, 0x3C	; 60
     eaa:	fc 01       	movw	r30, r24
     eac:	23 8b       	std	Z+19, r18	; 0x13
						screen3[screen3Index-1][19] = ' ';
     eae:	9b 01       	movw	r18, r22
     eb0:	21 50       	subi	r18, 0x01	; 1
     eb2:	31 09       	sbc	r19, r1
     eb4:	c2 9f       	mul	r28, r18
     eb6:	f0 01       	movw	r30, r0
     eb8:	c3 9f       	mul	r28, r19
     eba:	f0 0d       	add	r31, r0
     ebc:	11 24       	eor	r1, r1
     ebe:	e5 5e       	subi	r30, 0xE5	; 229
     ec0:	f9 4f       	sbci	r31, 0xF9	; 249
     ec2:	20 e2       	ldi	r18, 0x20	; 32
						outputS(screen3[screen3Index], screen3Index);
     ec4:	23 8b       	std	Z+19, r18	; 0x13
     ec6:	e0 d1       	rcall	.+960    	; 0x1288 <outputS>
						outputS(screen3[screen3Index-1], screen3Index-1);
     ec8:	60 91 6b 06 	lds	r22, 0x066B	; 0x80066b <screen3Index>
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	61 50       	subi	r22, 0x01	; 1
     ed0:	71 09       	sbc	r23, r1
     ed2:	c6 9f       	mul	r28, r22
     ed4:	c0 01       	movw	r24, r0
     ed6:	c7 9f       	mul	r28, r23
     ed8:	90 0d       	add	r25, r0
     eda:	11 24       	eor	r1, r1
     edc:	85 5e       	subi	r24, 0xE5	; 229
     ede:	99 4f       	sbci	r25, 0xF9	; 249
     ee0:	d3 d1       	rcall	.+934    	; 0x1288 <outputS>
     ee2:	57 c0       	rjmp	.+174    	; 0xf92 <updateScreen+0x348>
					}
					
					
				}else
				{
					if(encoderBFlag)
     ee4:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <encoderBFlag>
     ee8:	88 23       	and	r24, r24
     eea:	f1 f0       	breq	.+60     	; 0xf28 <updateScreen+0x2de>
					{
						switch(screen3Index)
     eec:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <screen3Index>
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	09 f0       	breq	.+2      	; 0xef6 <updateScreen+0x2ac>
     ef4:	4e c0       	rjmp	.+156    	; 0xf92 <updateScreen+0x348>
						{
							case 1:
							midiChannel = midiChannel-1;
     ef6:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <midiChannel>
     efa:	81 50       	subi	r24, 0x01	; 1
     efc:	18 f0       	brcs	.+6      	; 0xf04 <updateScreen+0x2ba>
     efe:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <midiChannel>
							if(midiChannel==255)
							{
								midiChannel = 0;
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <updateScreen+0x2be>
     f04:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <midiChannel>
							}
							numPrinter(screen3[1], 14, 2, (midiChannel+1));
     f08:	20 91 95 05 	lds	r18, 0x0595	; 0x800595 <midiChannel>
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	2f 5f       	subi	r18, 0xFF	; 255
     f10:	3f 4f       	sbci	r19, 0xFF	; 255
     f12:	42 e0       	ldi	r20, 0x02	; 2
     f14:	6e e0       	ldi	r22, 0x0E	; 14
     f16:	8f e2       	ldi	r24, 0x2F	; 47
     f18:	96 e0       	ldi	r25, 0x06	; 6
							outputS(screen3[1], 1);
     f1a:	ce d1       	rcall	.+924    	; 0x12b8 <numPrinter>
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	8f e2       	ldi	r24, 0x2F	; 47
     f22:	96 e0       	ldi	r25, 0x06	; 6
     f24:	b1 d1       	rcall	.+866    	; 0x1288 <outputS>
							break;
     f26:	35 c0       	rjmp	.+106    	; 0xf92 <updateScreen+0x348>
							
						}
					}else{
					screen3Index--;
     f28:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <screen3Index>
					if(screen3Index>250||screen3Index==0) //this should account for any negative numbers from overflow.
     f2c:	9e ef       	ldi	r25, 0xFE	; 254
     f2e:	98 0f       	add	r25, r24
     f30:	9a 3f       	cpi	r25, 0xFA	; 250
     f32:	20 f4       	brcc	.+8      	; 0xf3c <updateScreen+0x2f2>
							outputS(screen3[1], 1);
							break;
							
						}
					}else{
					screen3Index--;
     f34:	81 50       	subi	r24, 0x01	; 1
     f36:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <screen3Index>
     f3a:	03 c0       	rjmp	.+6      	; 0xf42 <updateScreen+0x2f8>
					if(screen3Index>250||screen3Index==0) //this should account for any negative numbers from overflow.
					{
						screen3Index = 1;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <screen3Index>
					}
					screen3[screen3Index][19] = '<';
     f42:	60 91 6b 06 	lds	r22, 0x066B	; 0x80066b <screen3Index>
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	c4 e1       	ldi	r28, 0x14	; 20
     f4a:	c6 9f       	mul	r28, r22
     f4c:	c0 01       	movw	r24, r0
     f4e:	c7 9f       	mul	r28, r23
     f50:	90 0d       	add	r25, r0
     f52:	11 24       	eor	r1, r1
     f54:	85 5e       	subi	r24, 0xE5	; 229
     f56:	99 4f       	sbci	r25, 0xF9	; 249
     f58:	2c e3       	ldi	r18, 0x3C	; 60
     f5a:	fc 01       	movw	r30, r24
					screen3[screen3Index+1][19] = ' ';
     f5c:	23 8b       	std	Z+19, r18	; 0x13
     f5e:	9b 01       	movw	r18, r22
     f60:	2f 5f       	subi	r18, 0xFF	; 255
     f62:	3f 4f       	sbci	r19, 0xFF	; 255
     f64:	c2 9f       	mul	r28, r18
     f66:	f0 01       	movw	r30, r0
     f68:	c3 9f       	mul	r28, r19
     f6a:	f0 0d       	add	r31, r0
     f6c:	11 24       	eor	r1, r1
     f6e:	e5 5e       	subi	r30, 0xE5	; 229
     f70:	f9 4f       	sbci	r31, 0xF9	; 249
					outputS(screen3[screen3Index], screen3Index);
     f72:	20 e2       	ldi	r18, 0x20	; 32
     f74:	23 8b       	std	Z+19, r18	; 0x13
					outputS(screen3[screen3Index+1], screen3Index+1);
     f76:	88 d1       	rcall	.+784    	; 0x1288 <outputS>
     f78:	60 91 6b 06 	lds	r22, 0x066B	; 0x80066b <screen3Index>
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	6f 5f       	subi	r22, 0xFF	; 255
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	c6 9f       	mul	r28, r22
     f84:	c0 01       	movw	r24, r0
     f86:	c7 9f       	mul	r28, r23
     f88:	90 0d       	add	r25, r0
     f8a:	11 24       	eor	r1, r1
     f8c:	85 5e       	subi	r24, 0xE5	; 229
     f8e:	99 4f       	sbci	r25, 0xF9	; 249
     f90:	7b d1       	rcall	.+758    	; 0x1288 <outputS>
				
			
			break;
					
		}
		prevEncoderBValue = encoderBValue;
     f92:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <encoderBValue>
     f96:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <prevEncoderBValue>
	}
	
	//top encoder
	if(prevEncoderAValue!=encoderAValue){
     f9a:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
     f9e:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <prevEncoderAValue>
     fa2:	98 17       	cp	r25, r24
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <updateScreen+0x35e>
     fa6:	6b c0       	rjmp	.+214    	; 0x107e <updateScreen+0x434>
	encoderAValue = encoderAValue%4;
     fa8:	83 70       	andi	r24, 0x03	; 3
     faa:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <encoderAValue>
	switch (encoderAValue)
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	09 f1       	breq	.+66     	; 0xff4 <updateScreen+0x3aa>
     fb2:	38 f0       	brcs	.+14     	; 0xfc2 <updateScreen+0x378>
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	09 f4       	brne	.+2      	; 0xfba <updateScreen+0x370>
     fb8:	3f c0       	rjmp	.+126    	; 0x1038 <updateScreen+0x3ee>
     fba:	83 30       	cpi	r24, 0x03	; 3
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <updateScreen+0x376>
     fbe:	4c c0       	rjmp	.+152    	; 0x1058 <updateScreen+0x40e>
	{
		case 0:
		numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
     fc0:	5a c0       	rjmp	.+180    	; 0x1076 <updateScreen+0x42c>
     fc2:	20 91 c2 04 	lds	r18, 0x04C2	; 0x8004c2 <currentPattern+0x158>
     fc6:	30 91 c3 04 	lds	r19, 0x04C3	; 0x8004c3 <currentPattern+0x159>
     fca:	43 e0       	ldi	r20, 0x03	; 3
     fcc:	65 e0       	ldi	r22, 0x05	; 5
     fce:	8b e6       	ldi	r24, 0x6B	; 107
     fd0:	95 e0       	ldi	r25, 0x05	; 5
     fd2:	72 d1       	rcall	.+740    	; 0x12b8 <numPrinter>
     fd4:	03 e4       	ldi	r16, 0x43	; 67
     fd6:	15 e0       	ldi	r17, 0x05	; 5
     fd8:	c0 e0       	ldi	r28, 0x00	; 0
     fda:	d0 e0       	ldi	r29, 0x00	; 0
		for(uint8_t i=0;i<4; i++ ){
			outputS(screen0[i],i);
     fdc:	be 01       	movw	r22, r28
     fde:	c8 01       	movw	r24, r16
     fe0:	53 d1       	rcall	.+678    	; 0x1288 <outputS>
     fe2:	21 96       	adiw	r28, 0x01	; 1
     fe4:	0c 5e       	subi	r16, 0xEC	; 236
     fe6:	1f 4f       	sbci	r17, 0xFF	; 255
	encoderAValue = encoderAValue%4;
	switch (encoderAValue)
	{
		case 0:
		numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
		for(uint8_t i=0;i<4; i++ ){
     fe8:	c4 30       	cpi	r28, 0x04	; 4
     fea:	d1 05       	cpc	r29, r1
     fec:	b9 f7       	brne	.-18     	; 0xfdc <updateScreen+0x392>
			outputS(screen0[i],i);
		}
		screen0Index = 0;
     fee:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <screen0Index>
		
		break;
		
		case 1:
		numPrinter(screen1[2], 6, 2, currentPattern.numSteps);
     ff2:	41 c0       	rjmp	.+130    	; 0x1076 <updateScreen+0x42c>
     ff4:	20 91 c4 04 	lds	r18, 0x04C4	; 0x8004c4 <currentPattern+0x15a>
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	42 e0       	ldi	r20, 0x02	; 2
     ffc:	66 e0       	ldi	r22, 0x06	; 6
     ffe:	8f ee       	ldi	r24, 0xEF	; 239
    1000:	94 e0       	ldi	r25, 0x04	; 4
		numPrinter(screen1[3], 13, 2, (currentStep+1));
    1002:	5a d1       	rcall	.+692    	; 0x12b8 <numPrinter>
    1004:	20 91 6f 06 	lds	r18, 0x066F	; 0x80066f <currentStep>
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	2f 5f       	subi	r18, 0xFF	; 255
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	42 e0       	ldi	r20, 0x02	; 2
    1010:	6d e0       	ldi	r22, 0x0D	; 13
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	95 e0       	ldi	r25, 0x05	; 5
    1016:	50 d1       	rcall	.+672    	; 0x12b8 <numPrinter>
    1018:	07 ec       	ldi	r16, 0xC7	; 199
    101a:	14 e0       	ldi	r17, 0x04	; 4
    101c:	c0 e0       	ldi	r28, 0x00	; 0
		for(uint8_t i=0;i<4; i++ ){
 		outputS(screen1[i],i);
    101e:	d0 e0       	ldi	r29, 0x00	; 0
    1020:	be 01       	movw	r22, r28
    1022:	c8 01       	movw	r24, r16
    1024:	31 d1       	rcall	.+610    	; 0x1288 <outputS>
    1026:	21 96       	adiw	r28, 0x01	; 1
    1028:	0c 5e       	subi	r16, 0xEC	; 236
    102a:	1f 4f       	sbci	r17, 0xFF	; 255
		break;
		
		case 1:
		numPrinter(screen1[2], 6, 2, currentPattern.numSteps);
		numPrinter(screen1[3], 13, 2, (currentStep+1));
		for(uint8_t i=0;i<4; i++ ){
    102c:	c4 30       	cpi	r28, 0x04	; 4
    102e:	d1 05       	cpc	r29, r1
    1030:	b9 f7       	brne	.-18     	; 0x1020 <updateScreen+0x3d6>
 		outputS(screen1[i],i);
		}
		screen1Index = 0;
    1032:	10 92 96 05 	sts	0x0596, r1	; 0x800596 <screen1Index>
 		break;
    1036:	1f c0       	rjmp	.+62     	; 0x1076 <updateScreen+0x42c>
    1038:	07 e9       	ldi	r16, 0x97	; 151
	}
	
	//top encoder
	if(prevEncoderAValue!=encoderAValue){
	encoderAValue = encoderAValue%4;
	switch (encoderAValue)
    103a:	15 e0       	ldi	r17, 0x05	; 5
    103c:	c0 e0       	ldi	r28, 0x00	; 0
		screen1Index = 0;
 		break;
		 
		case 2:
		for(uint8_t i=0;i<4; i++ ){
			outputS(screen2[i],i);
    103e:	d0 e0       	ldi	r29, 0x00	; 0
    1040:	be 01       	movw	r22, r28
    1042:	c8 01       	movw	r24, r16
    1044:	21 d1       	rcall	.+578    	; 0x1288 <outputS>
    1046:	21 96       	adiw	r28, 0x01	; 1
    1048:	0c 5e       	subi	r16, 0xEC	; 236
    104a:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		screen1Index = 0;
 		break;
		 
		case 2:
		for(uint8_t i=0;i<4; i++ ){
    104c:	c4 30       	cpi	r28, 0x04	; 4
    104e:	d1 05       	cpc	r29, r1
    1050:	b9 f7       	brne	.-18     	; 0x1040 <updateScreen+0x3f6>
			outputS(screen2[i],i);
		}
		screen2Index = 0;
    1052:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <screen2Index>
		break;
    1056:	0f c0       	rjmp	.+30     	; 0x1076 <updateScreen+0x42c>
    1058:	0b e1       	ldi	r16, 0x1B	; 27
    105a:	16 e0       	ldi	r17, 0x06	; 6
	}
	
	//top encoder
	if(prevEncoderAValue!=encoderAValue){
	encoderAValue = encoderAValue%4;
	switch (encoderAValue)
    105c:	c0 e0       	ldi	r28, 0x00	; 0
    105e:	d0 e0       	ldi	r29, 0x00	; 0
		screen2Index = 0;
		break;
		 
		case 3:
		for(uint8_t i=0;i<4; i++ ){
			outputS(screen3[i],i);
    1060:	be 01       	movw	r22, r28
    1062:	c8 01       	movw	r24, r16
    1064:	11 d1       	rcall	.+546    	; 0x1288 <outputS>
    1066:	21 96       	adiw	r28, 0x01	; 1
    1068:	0c 5e       	subi	r16, 0xEC	; 236
    106a:	1f 4f       	sbci	r17, 0xFF	; 255
    106c:	c4 30       	cpi	r28, 0x04	; 4
		}
		screen2Index = 0;
		break;
		 
		case 3:
		for(uint8_t i=0;i<4; i++ ){
    106e:	d1 05       	cpc	r29, r1
    1070:	b9 f7       	brne	.-18     	; 0x1060 <updateScreen+0x416>
    1072:	10 92 6b 06 	sts	0x066B, r1	; 0x80066b <screen3Index>
			outputS(screen3[i],i);
		}
		screen3Index = 0;
    1076:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <encoderAValue>
		break;
		 
		 
	}
	prevEncoderAValue = encoderAValue;
    107a:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <prevEncoderAValue>
    107e:	df 91       	pop	r29
	
	}


    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	08 95       	ret

00001088 <listenMidi>:
uint8_t midiPCCheck = 0;
uint8_t midiOffCheck = 0;


void listenMidi()
{
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
	midiNoteCheck = (0B10010000|midiChannel);
    1098:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <midiChannel>
    109c:	98 2f       	mov	r25, r24
    109e:	90 69       	ori	r25, 0x90	; 144
    10a0:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <midiNoteCheck>
	midiCCCheck = (0B10110000|midiChannel);
    10a4:	98 2f       	mov	r25, r24
    10a6:	90 6b       	ori	r25, 0xB0	; 176
    10a8:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <midiCCCheck>
	midiPCCheck = (0B11000000|midiChannel);
    10ac:	98 2f       	mov	r25, r24
    10ae:	90 6c       	ori	r25, 0xC0	; 192
    10b0:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <midiPCCheck>
	midiOffCheck = (0B10000000|midiChannel);
    10b4:	80 68       	ori	r24, 0x80	; 128
    10b6:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <midiOffCheck>
	
	//right now, this is just for testing.
	currentMidiMessage[0] = getChar();
    10ba:	55 d3       	rcall	.+1706   	; 0x1766 <getChar>
    10bc:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <currentMidiMessage>
	//while(currentMidiMessage[0]==254)
	//{
	//	currentMidiMessage[0]=getChar(); //for now, get rid of midi clock signals
	//}
	if(currentMidiMessage[0]==midiNoteCheck)
    10c0:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <midiNoteCheck>
    10c4:	89 13       	cpse	r24, r25
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
    10c6:	2d c0       	rjmp	.+90     	; 0x1122 <listenMidi+0x9a>
    10c8:	4e d3       	rcall	.+1692   	; 0x1766 <getChar>
    10ca:	c0 e6       	ldi	r28, 0x60	; 96
    10cc:	d3 e0       	ldi	r29, 0x03	; 3
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
    10ce:	89 83       	std	Y+1, r24	; 0x01
    10d0:	4a d3       	rcall	.+1684   	; 0x1766 <getChar>
    10d2:	8a 83       	std	Y+2, r24	; 0x02
    10d4:	02 eb       	ldi	r16, 0xB2	; 178
    10d6:	14 e0       	ldi	r17, 0x04	; 4
    10d8:	c2 ef       	ldi	r28, 0xF2	; 242
    10da:	d3 e0       	ldi	r29, 0x03	; 3
    10dc:	0f 2e       	mov	r0, r31
    10de:	f2 e0       	ldi	r31, 0x02	; 2
    10e0:	cf 2e       	mov	r12, r31
    10e2:	f4 e0       	ldi	r31, 0x04	; 4
    10e4:	df 2e       	mov	r13, r31
    10e6:	f0 2d       	mov	r31, r0
		//outputS(printMidiNote, 3);
		
		for(int i=0; i<16; i++)
		{
			//I don't like this forloop, but It seems like the best way to deal with this struct at the moment.
			if((currentPattern.midiTrackNote[i])==(currentMidiMessage[1]))
    10e8:	0f 2e       	mov	r0, r31
    10ea:	f0 e6       	ldi	r31, 0x60	; 96
    10ec:	ef 2e       	mov	r14, r31
    10ee:	f3 e0       	ldi	r31, 0x03	; 3
    10f0:	ff 2e       	mov	r15, r31
    10f2:	f0 2d       	mov	r31, r0
    10f4:	f8 01       	movw	r30, r16
    10f6:	91 91       	ld	r25, Z+
    10f8:	8f 01       	movw	r16, r30
    10fa:	f7 01       	movw	r30, r14
    10fc:	81 81       	ldd	r24, Z+1	; 0x01
    10fe:	98 13       	cpse	r25, r24
    1100:	0c c0       	rjmp	.+24     	; 0x111a <listenMidi+0x92>
			trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
    1102:	28 81       	ld	r18, Y
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	fe 01       	movw	r30, r28
    1108:	e0 57       	subi	r30, 0x70	; 112
    110a:	f1 09       	sbc	r31, r1
    110c:	40 81       	ld	r20, Z
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	68 89       	ldd	r22, Y+16	; 0x10
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	88 a1       	ldd	r24, Y+32	; 0x20
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	3b d3       	rcall	.+1654   	; 0x1790 <trackControl>
    111a:	21 96       	adiw	r28, 0x01	; 1
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
		//outputS(printMidiNote, 3);
		
		for(int i=0; i<16; i++)
    111c:	cc 15       	cp	r28, r12
    111e:	dd 05       	cpc	r29, r13
    1120:	49 f7       	brne	.-46     	; 0x10f4 <listenMidi+0x6c>
			if((currentPattern.midiTrackNote[i])==(currentMidiMessage[1]))
			trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
		}
		
	}
	if(currentMidiMessage[0]==midiCCCheck)
    1122:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <currentMidiMessage>
    1126:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <midiCCCheck>
    112a:	98 13       	cpse	r25, r24
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (control)
    112c:	0b c0       	rjmp	.+22     	; 0x1144 <listenMidi+0xbc>
    112e:	1b d3       	rcall	.+1590   	; 0x1766 <getChar>
    1130:	c0 e6       	ldi	r28, 0x60	; 96
    1132:	d3 e0       	ldi	r29, 0x03	; 3
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	17 d3       	rcall	.+1582   	; 0x1766 <getChar>
		outputS(printMidiCC, 3);
    1138:	8a 83       	std	Y+2, r24	; 0x02
    113a:	63 e0       	ldi	r22, 0x03	; 3
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	8c e8       	ldi	r24, 0x8C	; 140
    1140:	92 e0       	ldi	r25, 0x02	; 2
	
	}
	if(currentMidiMessage[0]==midiPCCheck)
    1142:	a2 d0       	rcall	.+324    	; 0x1288 <outputS>
    1144:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <currentMidiMessage>
    1148:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <midiPCCheck>
    114c:	98 13       	cpse	r25, r24
	{
		currentMidiMessage[1] = getChar(); //this should be a byte1 (progChageNumber)
    114e:	08 c0       	rjmp	.+16     	; 0x1160 <listenMidi+0xd8>
    1150:	0a d3       	rcall	.+1556   	; 0x1766 <getChar>
    1152:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <currentMidiMessage+0x1>
		outputS(printMidiPC, 3);
    1156:	63 e0       	ldi	r22, 0x03	; 3
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	88 e7       	ldi	r24, 0x78	; 120
    115c:	92 e0       	ldi	r25, 0x02	; 2
		
	}
	if(currentMidiMessage[0]==midiOffCheck)
    115e:	94 d0       	rcall	.+296    	; 0x1288 <outputS>
    1160:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <currentMidiMessage>
    1164:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <midiOffCheck>
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
    1168:	98 13       	cpse	r25, r24
    116a:	0b c0       	rjmp	.+22     	; 0x1182 <listenMidi+0xfa>
    116c:	fc d2       	rcall	.+1528   	; 0x1766 <getChar>
    116e:	c0 e6       	ldi	r28, 0x60	; 96
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
    1170:	d3 e0       	ldi	r29, 0x03	; 3
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	f8 d2       	rcall	.+1520   	; 0x1766 <getChar>
		outputS(blank, 3);
    1176:	8a 83       	std	Y+2, r24	; 0x02
    1178:	63 e0       	ldi	r22, 0x03	; 3
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	84 e6       	ldi	r24, 0x64	; 100
    117e:	92 e0       	ldi	r25, 0x02	; 2
    1180:	83 d0       	rcall	.+262    	; 0x1288 <outputS>
	}



    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	cf 90       	pop	r12
    1192:	08 95       	ret

00001194 <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    1194:	e5 e0       	ldi	r30, 0x05	; 5
    1196:	f1 e0       	ldi	r31, 0x01	; 1
    1198:	80 81       	ld	r24, Z
    119a:	82 60       	ori	r24, 0x02	; 2
    119c:	80 83       	st	Z, r24
    119e:	85 e0       	ldi	r24, 0x05	; 5
    11a0:	8a 95       	dec	r24
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <enableCycle+0xc>
    11a4:	00 00       	nop
    11a6:	80 81       	ld	r24, Z
    11a8:	8d 7f       	andi	r24, 0xFD	; 253
    11aa:	80 83       	st	Z, r24
    11ac:	08 95       	ret

000011ae <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTJ &= 0B11111110; //set our DC pin low, to get ready to write data.
    11ae:	e5 e0       	ldi	r30, 0x05	; 5
    11b0:	f1 e0       	ldi	r31, 0x01	; 1
    11b2:	90 81       	ld	r25, Z
    11b4:	9e 7f       	andi	r25, 0xFE	; 254
    11b6:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    11b8:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTJ &= 0B11111110; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
    11ba:	ec cf       	rjmp	.-40     	; 0x1194 <enableCycle>
    11bc:	08 95       	ret

000011be <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTJ |=0B00000001; //set out DC Pin high, so it's ready to write data.
    11be:	e5 e0       	ldi	r30, 0x05	; 5
    11c0:	f1 e0       	ldi	r31, 0x01	; 1
    11c2:	90 81       	ld	r25, Z
    11c4:	91 60       	ori	r25, 0x01	; 1
    11c6:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    11c8:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTJ |=0B00000001; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
    11ca:	e4 cf       	rjmp	.-56     	; 0x1194 <enableCycle>
    11cc:	08 95       	ret

000011ce <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRJ = 0x03; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
    11ce:	83 e0       	ldi	r24, 0x03	; 3
    11d0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	DDRC =0xFF; //all pins on the LCD Data Bus.
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	87 b9       	out	0x07, r24	; 7

	
	PORTJ &= 0B11111100;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
    11d8:	e5 e0       	ldi	r30, 0x05	; 5
    11da:	f1 e0       	ldi	r31, 0x01	; 1
    11dc:	80 81       	ld	r24, Z
    11de:	8c 7f       	andi	r24, 0xFC	; 252
    11e0:	80 83       	st	Z, r24
	
	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
    11e2:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11e4:	8f e1       	ldi	r24, 0x1F	; 31
    11e6:	93 e0       	ldi	r25, 0x03	; 3
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <initScreen+0x1a>
    11ec:	00 c0       	rjmp	.+0      	; 0x11ee <initScreen+0x20>
    11ee:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose
	

	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    11f0:	8a e2       	ldi	r24, 0x2A	; 42
    11f2:	dd df       	rcall	.-70     	; 0x11ae <command>
	command(0x71);        // Function selection A:
    11f4:	81 e7       	ldi	r24, 0x71	; 113
    11f6:	db df       	rcall	.-74     	; 0x11ae <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
    11f8:	8c e5       	ldi	r24, 0x5C	; 92
    11fa:	e1 df       	rcall	.-62     	; 0x11be <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    11fc:	88 e2       	ldi	r24, 0x28	; 40
    11fe:	d7 df       	rcall	.-82     	; 0x11ae <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
    1200:	88 e0       	ldi	r24, 0x08	; 8
    1202:	d5 df       	rcall	.-86     	; 0x11ae <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    1204:	8a e2       	ldi	r24, 0x2A	; 42
    1206:	d3 df       	rcall	.-90     	; 0x11ae <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    1208:	89 e7       	ldi	r24, 0x79	; 121
    120a:	d1 df       	rcall	.-94     	; 0x11ae <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
    120c:	85 ed       	ldi	r24, 0xD5	; 213
    120e:	cf df       	rcall	.-98     	; 0x11ae <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
    1210:	80 e7       	ldi	r24, 0x70	; 112
    1212:	cd df       	rcall	.-102    	; 0x11ae <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    1214:	88 e7       	ldi	r24, 0x78	; 120
    1216:	cb df       	rcall	.-106    	; 0x11ae <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
    1218:	89 e0       	ldi	r24, 0x09	; 9
    121a:	c9 df       	rcall	.-110    	; 0x11ae <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
    121c:	86 e0       	ldi	r24, 0x06	; 6
    121e:	c7 df       	rcall	.-114    	; 0x11ae <command>
	command(0x72);        // Function selection B:
    1220:	82 e7       	ldi	r24, 0x72	; 114
    1222:	c5 df       	rcall	.-118    	; 0x11ae <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
    1224:	8a e0       	ldi	r24, 0x0A	; 10
    1226:	cb df       	rcall	.-106    	; 0x11be <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    1228:	89 e7       	ldi	r24, 0x79	; 121
    122a:	c1 df       	rcall	.-126    	; 0x11ae <command>
	command(0xDA);        // Set SEG pins hardware configuration:
    122c:	8a ed       	ldi	r24, 0xDA	; 218
    122e:	bf df       	rcall	.-130    	; 0x11ae <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
    1230:	80 e1       	ldi	r24, 0x10	; 16
    1232:	bd df       	rcall	.-134    	; 0x11ae <command>
	command(0xDC);        // Function selection C:
    1234:	8c ed       	ldi	r24, 0xDC	; 220
    1236:	bb df       	rcall	.-138    	; 0x11ae <command>
	command(0x00);        //  internal VSL, GPIO input disable
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	b9 df       	rcall	.-142    	; 0x11ae <command>
	command(0x81);        // Set contrast control:
    123c:	81 e8       	ldi	r24, 0x81	; 129
    123e:	b7 df       	rcall	.-146    	; 0x11ae <command>
    1240:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
    1242:	b5 df       	rcall	.-150    	; 0x11ae <command>
    1244:	89 ed       	ldi	r24, 0xD9	; 217
    1246:	b3 df       	rcall	.-154    	; 0x11ae <command>
	command(0xD9);        // Set phase length:
    1248:	81 ef       	ldi	r24, 0xF1	; 241
    124a:	b1 df       	rcall	.-158    	; 0x11ae <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
    124c:	8b ed       	ldi	r24, 0xDB	; 219
    124e:	af df       	rcall	.-162    	; 0x11ae <command>
    1250:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
    1252:	ad df       	rcall	.-166    	; 0x11ae <command>
    1254:	88 e7       	ldi	r24, 0x78	; 120
    1256:	ab df       	rcall	.-170    	; 0x11ae <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
    1258:	88 e2       	ldi	r24, 0x28	; 40
    125a:	a9 df       	rcall	.-174    	; 0x11ae <command>
    125c:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    125e:	a7 df       	rcall	.-178    	; 0x11ae <command>
    1260:	8f e3       	ldi	r24, 0x3F	; 63
    1262:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	f1 f7       	brne	.-4      	; 0x1264 <initScreen+0x96>
    1268:	00 c0       	rjmp	.+0      	; 0x126a <initScreen+0x9c>
	command(0x01);        // Clear display
    126a:	00 00       	nop
    126c:	80 e8       	ldi	r24, 0x80	; 128
    126e:	9f df       	rcall	.-194    	; 0x11ae <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1270:	8c e0       	ldi	r24, 0x0C	; 12
    1272:	9d df       	rcall	.-198    	; 0x11ae <command>
    1274:	9f ef       	ldi	r25, 0xFF	; 255
    1276:	24 e3       	ldi	r18, 0x34	; 52
    1278:	8c e0       	ldi	r24, 0x0C	; 12
    127a:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	
	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
    127c:	20 40       	sbci	r18, 0x00	; 0
    127e:	80 40       	sbci	r24, 0x00	; 0
    1280:	e1 f7       	brne	.-8      	; 0x127a <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
    1282:	00 c0       	rjmp	.+0      	; 0x1284 <initScreen+0xb6>
    1284:	00 00       	nop
    1286:	08 95       	ret

00001288 <outputS>:
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	8c 01       	movw	r16, r24
    1292:	fb 01       	movw	r30, r22
    1294:	ff 27       	eor	r31, r31
    1296:	e0 56       	subi	r30, 0x60	; 96
    1298:	fd 4f       	sbci	r31, 0xFD	; 253
    129a:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;
	
	command(new_line[r]);
    129c:	88 df       	rcall	.-240    	; 0x11ae <command>
    129e:	e8 01       	movw	r28, r16
    12a0:	0c 5e       	subi	r16, 0xEC	; 236
    12a2:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
    12a4:	89 91       	ld	r24, Y+
    12a6:	8b df       	rcall	.-234    	; 0x11be <data>
	uint8_t r = row;
	uint8_t c = 0;
	
	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
    12a8:	c0 17       	cp	r28, r16
    12aa:	d1 07       	cpc	r29, r17
    12ac:	d9 f7       	brne	.-10     	; 0x12a4 <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	08 95       	ret

000012b8 <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;
	
	switch(numCharacters)
    12be:	43 30       	cpi	r20, 0x03	; 3
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <numPrinter+0xc>
    12c2:	51 c0       	rjmp	.+162    	; 0x1366 <numPrinter+0xae>
    12c4:	28 f4       	brcc	.+10     	; 0x12d0 <numPrinter+0x18>
    12c6:	41 30       	cpi	r20, 0x01	; 1
    12c8:	51 f0       	breq	.+20     	; 0x12de <numPrinter+0x26>
    12ca:	42 30       	cpi	r20, 0x02	; 2
    12cc:	21 f1       	breq	.+72     	; 0x1316 <numPrinter+0x5e>
    12ce:	a2 c1       	rjmp	.+836    	; 0x1614 <numPrinter+0x35c>
    12d0:	44 30       	cpi	r20, 0x04	; 4
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <numPrinter+0x1e>
    12d4:	8e c0       	rjmp	.+284    	; 0x13f2 <numPrinter+0x13a>
    12d6:	45 30       	cpi	r20, 0x05	; 5
    12d8:	09 f4       	brne	.+2      	; 0x12dc <numPrinter+0x24>
    12da:	fd c0       	rjmp	.+506    	; 0x14d6 <numPrinter+0x21e>
    12dc:	9b c1       	rjmp	.+822    	; 0x1614 <numPrinter+0x35c>
		case 0:
		break;
		
		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
    12de:	ec 01       	movw	r28, r24
    12e0:	c6 0f       	add	r28, r22
    12e2:	d1 1d       	adc	r29, r1
    12e4:	ad ec       	ldi	r26, 0xCD	; 205
    12e6:	bc ec       	ldi	r27, 0xCC	; 204
    12e8:	81 d4       	rcall	.+2306   	; 0x1bec <__umulhisi3>
    12ea:	96 95       	lsr	r25
    12ec:	87 95       	ror	r24
    12ee:	96 95       	lsr	r25
    12f0:	87 95       	ror	r24
    12f2:	96 95       	lsr	r25
    12f4:	87 95       	ror	r24
    12f6:	9c 01       	movw	r18, r24
    12f8:	22 0f       	add	r18, r18
    12fa:	33 1f       	adc	r19, r19
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	82 0f       	add	r24, r18
    130a:	93 1f       	adc	r25, r19
    130c:	e8 1b       	sub	r30, r24
    130e:	f9 0b       	sbc	r31, r25
    1310:	e0 5d       	subi	r30, 0xD0	; 208
    1312:	e8 83       	st	Y, r30
		break;
    1314:	7f c1       	rjmp	.+766    	; 0x1614 <numPrinter+0x35c>
		
		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
    1316:	ec 01       	movw	r28, r24
    1318:	c6 0f       	add	r28, r22
    131a:	d1 1d       	adc	r29, r1
    131c:	ad ec       	ldi	r26, 0xCD	; 205
    131e:	bc ec       	ldi	r27, 0xCC	; 204
    1320:	65 d4       	rcall	.+2250   	; 0x1bec <__umulhisi3>
    1322:	96 95       	lsr	r25
    1324:	87 95       	ror	r24
    1326:	96 95       	lsr	r25
    1328:	87 95       	ror	r24
    132a:	96 95       	lsr	r25
    132c:	87 95       	ror	r24
    132e:	9c 01       	movw	r18, r24
    1330:	22 0f       	add	r18, r18
    1332:	33 1f       	adc	r19, r19
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	82 0f       	add	r24, r18
    1342:	93 1f       	adc	r25, r19
    1344:	9f 01       	movw	r18, r30
    1346:	28 1b       	sub	r18, r24
    1348:	39 0b       	sbc	r19, r25
    134a:	c9 01       	movw	r24, r18
    134c:	80 5d       	subi	r24, 0xD0	; 208
    134e:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
    1350:	9f 01       	movw	r18, r30
    1352:	4c d4       	rcall	.+2200   	; 0x1bec <__umulhisi3>
    1354:	96 95       	lsr	r25
    1356:	87 95       	ror	r24
    1358:	96 95       	lsr	r25
    135a:	87 95       	ror	r24
    135c:	96 95       	lsr	r25
    135e:	87 95       	ror	r24
    1360:	80 5d       	subi	r24, 0xD0	; 208
    1362:	88 83       	st	Y, r24
    1364:	57 c1       	rjmp	.+686    	; 0x1614 <numPrinter+0x35c>
		break;
    1366:	ec 01       	movw	r28, r24
		
		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
    1368:	c6 0f       	add	r28, r22
    136a:	d1 1d       	adc	r29, r1
    136c:	ad ec       	ldi	r26, 0xCD	; 205
    136e:	bc ec       	ldi	r27, 0xCC	; 204
    1370:	3d d4       	rcall	.+2170   	; 0x1bec <__umulhisi3>
    1372:	96 95       	lsr	r25
    1374:	87 95       	ror	r24
    1376:	96 95       	lsr	r25
    1378:	87 95       	ror	r24
    137a:	96 95       	lsr	r25
    137c:	87 95       	ror	r24
    137e:	9c 01       	movw	r18, r24
    1380:	22 0f       	add	r18, r18
    1382:	33 1f       	adc	r19, r19
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	82 0f       	add	r24, r18
    1392:	93 1f       	adc	r25, r19
    1394:	9f 01       	movw	r18, r30
    1396:	28 1b       	sub	r18, r24
    1398:	39 0b       	sbc	r19, r25
    139a:	c9 01       	movw	r24, r18
    139c:	80 5d       	subi	r24, 0xD0	; 208
    139e:	8a 83       	std	Y+2, r24	; 0x02
    13a0:	af 01       	movw	r20, r30
		charArray[(startingPos+1)] = tensPlace;
    13a2:	56 95       	lsr	r21
    13a4:	47 95       	ror	r20
    13a6:	56 95       	lsr	r21
    13a8:	47 95       	ror	r20
    13aa:	9a 01       	movw	r18, r20
    13ac:	ab e7       	ldi	r26, 0x7B	; 123
    13ae:	b4 e1       	ldi	r27, 0x14	; 20
    13b0:	1d d4       	rcall	.+2106   	; 0x1bec <__umulhisi3>
    13b2:	96 95       	lsr	r25
    13b4:	87 95       	ror	r24
    13b6:	64 e6       	ldi	r22, 0x64	; 100
    13b8:	68 9f       	mul	r22, r24
    13ba:	90 01       	movw	r18, r0
    13bc:	69 9f       	mul	r22, r25
    13be:	30 0d       	add	r19, r0
    13c0:	11 24       	eor	r1, r1
    13c2:	cf 01       	movw	r24, r30
    13c4:	82 1b       	sub	r24, r18
    13c6:	93 0b       	sbc	r25, r19
    13c8:	9c 01       	movw	r18, r24
    13ca:	ad ec       	ldi	r26, 0xCD	; 205
    13cc:	bc ec       	ldi	r27, 0xCC	; 204
    13ce:	0e d4       	rcall	.+2076   	; 0x1bec <__umulhisi3>
    13d0:	96 95       	lsr	r25
    13d2:	87 95       	ror	r24
    13d4:	96 95       	lsr	r25
    13d6:	87 95       	ror	r24
    13d8:	96 95       	lsr	r25
    13da:	87 95       	ror	r24
    13dc:	80 5d       	subi	r24, 0xD0	; 208
    13de:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
    13e0:	9a 01       	movw	r18, r20
    13e2:	ab e7       	ldi	r26, 0x7B	; 123
    13e4:	b4 e1       	ldi	r27, 0x14	; 20
    13e6:	02 d4       	rcall	.+2052   	; 0x1bec <__umulhisi3>
    13e8:	96 95       	lsr	r25
    13ea:	87 95       	ror	r24
    13ec:	80 5d       	subi	r24, 0xD0	; 208
    13ee:	88 83       	st	Y, r24
		break;
    13f0:	11 c1       	rjmp	.+546    	; 0x1614 <numPrinter+0x35c>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
    13f2:	ec 01       	movw	r28, r24
    13f4:	c6 0f       	add	r28, r22
    13f6:	d1 1d       	adc	r29, r1
    13f8:	ad ec       	ldi	r26, 0xCD	; 205
    13fa:	bc ec       	ldi	r27, 0xCC	; 204
    13fc:	f7 d3       	rcall	.+2030   	; 0x1bec <__umulhisi3>
    13fe:	96 95       	lsr	r25
    1400:	87 95       	ror	r24
    1402:	96 95       	lsr	r25
    1404:	87 95       	ror	r24
    1406:	96 95       	lsr	r25
    1408:	87 95       	ror	r24
    140a:	9c 01       	movw	r18, r24
    140c:	22 0f       	add	r18, r18
    140e:	33 1f       	adc	r19, r19
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	82 0f       	add	r24, r18
    141e:	93 1f       	adc	r25, r19
    1420:	9f 01       	movw	r18, r30
    1422:	28 1b       	sub	r18, r24
    1424:	39 0b       	sbc	r19, r25
    1426:	c9 01       	movw	r24, r18
    1428:	80 5d       	subi	r24, 0xD0	; 208
    142a:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
    142c:	9f 01       	movw	r18, r30
    142e:	36 95       	lsr	r19
    1430:	27 95       	ror	r18
    1432:	36 95       	lsr	r19
    1434:	27 95       	ror	r18
    1436:	ab e7       	ldi	r26, 0x7B	; 123
    1438:	b4 e1       	ldi	r27, 0x14	; 20
    143a:	d8 d3       	rcall	.+1968   	; 0x1bec <__umulhisi3>
    143c:	96 95       	lsr	r25
    143e:	87 95       	ror	r24
    1440:	44 e6       	ldi	r20, 0x64	; 100
    1442:	48 9f       	mul	r20, r24
    1444:	90 01       	movw	r18, r0
    1446:	49 9f       	mul	r20, r25
    1448:	30 0d       	add	r19, r0
    144a:	11 24       	eor	r1, r1
    144c:	cf 01       	movw	r24, r30
    144e:	82 1b       	sub	r24, r18
    1450:	93 0b       	sbc	r25, r19
    1452:	9c 01       	movw	r18, r24
    1454:	ad ec       	ldi	r26, 0xCD	; 205
    1456:	bc ec       	ldi	r27, 0xCC	; 204
    1458:	c9 d3       	rcall	.+1938   	; 0x1bec <__umulhisi3>
    145a:	96 95       	lsr	r25
    145c:	87 95       	ror	r24
    145e:	96 95       	lsr	r25
    1460:	87 95       	ror	r24
    1462:	96 95       	lsr	r25
    1464:	87 95       	ror	r24
    1466:	80 5d       	subi	r24, 0xD0	; 208
    1468:	8a 83       	std	Y+2, r24	; 0x02
    146a:	af 01       	movw	r20, r30
		charArray[(startingPos+1)] = hunderedsPlace;
    146c:	56 95       	lsr	r21
    146e:	47 95       	ror	r20
    1470:	56 95       	lsr	r21
    1472:	47 95       	ror	r20
    1474:	56 95       	lsr	r21
    1476:	47 95       	ror	r20
    1478:	9a 01       	movw	r18, r20
    147a:	a5 ec       	ldi	r26, 0xC5	; 197
    147c:	b0 e2       	ldi	r27, 0x20	; 32
    147e:	b6 d3       	rcall	.+1900   	; 0x1bec <__umulhisi3>
    1480:	92 95       	swap	r25
    1482:	82 95       	swap	r24
    1484:	8f 70       	andi	r24, 0x0F	; 15
    1486:	89 27       	eor	r24, r25
    1488:	9f 70       	andi	r25, 0x0F	; 15
    148a:	89 27       	eor	r24, r25
    148c:	68 ee       	ldi	r22, 0xE8	; 232
    148e:	73 e0       	ldi	r23, 0x03	; 3
    1490:	86 9f       	mul	r24, r22
    1492:	90 01       	movw	r18, r0
    1494:	87 9f       	mul	r24, r23
    1496:	30 0d       	add	r19, r0
    1498:	96 9f       	mul	r25, r22
    149a:	30 0d       	add	r19, r0
    149c:	11 24       	eor	r1, r1
    149e:	cf 01       	movw	r24, r30
    14a0:	82 1b       	sub	r24, r18
    14a2:	93 0b       	sbc	r25, r19
    14a4:	9c 01       	movw	r18, r24
    14a6:	36 95       	lsr	r19
    14a8:	27 95       	ror	r18
    14aa:	36 95       	lsr	r19
    14ac:	27 95       	ror	r18
    14ae:	ab e7       	ldi	r26, 0x7B	; 123
    14b0:	b4 e1       	ldi	r27, 0x14	; 20
    14b2:	9c d3       	rcall	.+1848   	; 0x1bec <__umulhisi3>
    14b4:	96 95       	lsr	r25
    14b6:	87 95       	ror	r24
    14b8:	80 5d       	subi	r24, 0xD0	; 208
    14ba:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
    14bc:	9a 01       	movw	r18, r20
    14be:	a5 ec       	ldi	r26, 0xC5	; 197
    14c0:	b0 e2       	ldi	r27, 0x20	; 32
    14c2:	94 d3       	rcall	.+1832   	; 0x1bec <__umulhisi3>
    14c4:	92 95       	swap	r25
    14c6:	82 95       	swap	r24
    14c8:	8f 70       	andi	r24, 0x0F	; 15
    14ca:	89 27       	eor	r24, r25
    14cc:	9f 70       	andi	r25, 0x0F	; 15
    14ce:	89 27       	eor	r24, r25
    14d0:	80 5d       	subi	r24, 0xD0	; 208
    14d2:	88 83       	st	Y, r24
		break;
    14d4:	9f c0       	rjmp	.+318    	; 0x1614 <numPrinter+0x35c>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
    14d6:	ec 01       	movw	r28, r24
    14d8:	c6 0f       	add	r28, r22
    14da:	d1 1d       	adc	r29, r1
    14dc:	ad ec       	ldi	r26, 0xCD	; 205
    14de:	bc ec       	ldi	r27, 0xCC	; 204
    14e0:	85 d3       	rcall	.+1802   	; 0x1bec <__umulhisi3>
    14e2:	96 95       	lsr	r25
    14e4:	87 95       	ror	r24
    14e6:	96 95       	lsr	r25
    14e8:	87 95       	ror	r24
    14ea:	96 95       	lsr	r25
    14ec:	87 95       	ror	r24
    14ee:	9c 01       	movw	r18, r24
    14f0:	22 0f       	add	r18, r18
    14f2:	33 1f       	adc	r19, r19
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	82 0f       	add	r24, r18
    1502:	93 1f       	adc	r25, r19
    1504:	9f 01       	movw	r18, r30
    1506:	28 1b       	sub	r18, r24
    1508:	39 0b       	sbc	r19, r25
    150a:	c9 01       	movw	r24, r18
    150c:	80 5d       	subi	r24, 0xD0	; 208
    150e:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
    1510:	9f 01       	movw	r18, r30
    1512:	36 95       	lsr	r19
    1514:	27 95       	ror	r18
    1516:	36 95       	lsr	r19
    1518:	27 95       	ror	r18
    151a:	ab e7       	ldi	r26, 0x7B	; 123
    151c:	b4 e1       	ldi	r27, 0x14	; 20
    151e:	66 d3       	rcall	.+1740   	; 0x1bec <__umulhisi3>
    1520:	96 95       	lsr	r25
    1522:	87 95       	ror	r24
    1524:	44 e6       	ldi	r20, 0x64	; 100
    1526:	48 9f       	mul	r20, r24
    1528:	90 01       	movw	r18, r0
    152a:	49 9f       	mul	r20, r25
    152c:	30 0d       	add	r19, r0
    152e:	11 24       	eor	r1, r1
    1530:	cf 01       	movw	r24, r30
    1532:	82 1b       	sub	r24, r18
    1534:	93 0b       	sbc	r25, r19
    1536:	9c 01       	movw	r18, r24
    1538:	ad ec       	ldi	r26, 0xCD	; 205
    153a:	bc ec       	ldi	r27, 0xCC	; 204
    153c:	57 d3       	rcall	.+1710   	; 0x1bec <__umulhisi3>
    153e:	96 95       	lsr	r25
    1540:	87 95       	ror	r24
    1542:	96 95       	lsr	r25
    1544:	87 95       	ror	r24
    1546:	96 95       	lsr	r25
    1548:	87 95       	ror	r24
    154a:	80 5d       	subi	r24, 0xD0	; 208
    154c:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
    154e:	9f 01       	movw	r18, r30
    1550:	36 95       	lsr	r19
    1552:	27 95       	ror	r18
    1554:	36 95       	lsr	r19
    1556:	27 95       	ror	r18
    1558:	36 95       	lsr	r19
    155a:	27 95       	ror	r18
    155c:	a5 ec       	ldi	r26, 0xC5	; 197
    155e:	b0 e2       	ldi	r27, 0x20	; 32
    1560:	45 d3       	rcall	.+1674   	; 0x1bec <__umulhisi3>
    1562:	92 95       	swap	r25
    1564:	82 95       	swap	r24
    1566:	8f 70       	andi	r24, 0x0F	; 15
    1568:	89 27       	eor	r24, r25
    156a:	9f 70       	andi	r25, 0x0F	; 15
    156c:	89 27       	eor	r24, r25
    156e:	48 ee       	ldi	r20, 0xE8	; 232
    1570:	53 e0       	ldi	r21, 0x03	; 3
    1572:	84 9f       	mul	r24, r20
    1574:	90 01       	movw	r18, r0
    1576:	85 9f       	mul	r24, r21
    1578:	30 0d       	add	r19, r0
    157a:	94 9f       	mul	r25, r20
    157c:	30 0d       	add	r19, r0
    157e:	11 24       	eor	r1, r1
    1580:	cf 01       	movw	r24, r30
    1582:	82 1b       	sub	r24, r18
    1584:	93 0b       	sbc	r25, r19
    1586:	9c 01       	movw	r18, r24
    1588:	36 95       	lsr	r19
    158a:	27 95       	ror	r18
    158c:	36 95       	lsr	r19
    158e:	27 95       	ror	r18
    1590:	ab e7       	ldi	r26, 0x7B	; 123
    1592:	b4 e1       	ldi	r27, 0x14	; 20
    1594:	2b d3       	rcall	.+1622   	; 0x1bec <__umulhisi3>
    1596:	96 95       	lsr	r25
    1598:	87 95       	ror	r24
    159a:	80 5d       	subi	r24, 0xD0	; 208
    159c:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
    159e:	af 01       	movw	r20, r30
    15a0:	52 95       	swap	r21
    15a2:	42 95       	swap	r20
    15a4:	4f 70       	andi	r20, 0x0F	; 15
    15a6:	45 27       	eor	r20, r21
    15a8:	5f 70       	andi	r21, 0x0F	; 15
    15aa:	45 27       	eor	r20, r21
    15ac:	9a 01       	movw	r18, r20
    15ae:	a7 e4       	ldi	r26, 0x47	; 71
    15b0:	b3 e0       	ldi	r27, 0x03	; 3
    15b2:	1c d3       	rcall	.+1592   	; 0x1bec <__umulhisi3>
    15b4:	96 95       	lsr	r25
    15b6:	87 95       	ror	r24
    15b8:	96 95       	lsr	r25
    15ba:	87 95       	ror	r24
    15bc:	96 95       	lsr	r25
    15be:	87 95       	ror	r24
    15c0:	60 e1       	ldi	r22, 0x10	; 16
    15c2:	77 e2       	ldi	r23, 0x27	; 39
    15c4:	86 9f       	mul	r24, r22
    15c6:	90 01       	movw	r18, r0
    15c8:	87 9f       	mul	r24, r23
    15ca:	30 0d       	add	r19, r0
    15cc:	96 9f       	mul	r25, r22
    15ce:	30 0d       	add	r19, r0
    15d0:	11 24       	eor	r1, r1
    15d2:	cf 01       	movw	r24, r30
    15d4:	82 1b       	sub	r24, r18
    15d6:	93 0b       	sbc	r25, r19
    15d8:	9c 01       	movw	r18, r24
    15da:	36 95       	lsr	r19
    15dc:	27 95       	ror	r18
    15de:	36 95       	lsr	r19
    15e0:	27 95       	ror	r18
    15e2:	36 95       	lsr	r19
    15e4:	27 95       	ror	r18
    15e6:	a5 ec       	ldi	r26, 0xC5	; 197
    15e8:	b0 e2       	ldi	r27, 0x20	; 32
    15ea:	00 d3       	rcall	.+1536   	; 0x1bec <__umulhisi3>
    15ec:	92 95       	swap	r25
    15ee:	82 95       	swap	r24
    15f0:	8f 70       	andi	r24, 0x0F	; 15
    15f2:	89 27       	eor	r24, r25
    15f4:	9f 70       	andi	r25, 0x0F	; 15
    15f6:	89 27       	eor	r24, r25
    15f8:	80 5d       	subi	r24, 0xD0	; 208
    15fa:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
    15fc:	9a 01       	movw	r18, r20
    15fe:	a7 e4       	ldi	r26, 0x47	; 71
    1600:	b3 e0       	ldi	r27, 0x03	; 3
    1602:	f4 d2       	rcall	.+1512   	; 0x1bec <__umulhisi3>
    1604:	96 95       	lsr	r25
    1606:	87 95       	ror	r24
    1608:	96 95       	lsr	r25
    160a:	87 95       	ror	r24
    160c:	96 95       	lsr	r25
    160e:	87 95       	ror	r24
    1610:	80 5d       	subi	r24, 0xD0	; 208
    1612:	88 83       	st	Y, r24
    1614:	df 91       	pop	r29
		break;
		
	}


    1616:	cf 91       	pop	r28
    1618:	08 95       	ret

0000161a <__vector_27>:

uint8_t rxReadPosition = 0;
uint8_t rxWritePosition = 0;

ISR (USART0_TX_vect)
{
    161a:	1f 92       	push	r1
    161c:	0f 92       	push	r0
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	0f 92       	push	r0
    1622:	11 24       	eor	r1, r1
    1624:	0b b6       	in	r0, 0x3b	; 59
    1626:	0f 92       	push	r0
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	8f 93       	push	r24
    162e:	9f 93       	push	r25
    1630:	ef 93       	push	r30
    1632:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
    1634:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <serialReadPos>
    1638:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <serialReadPos+0x1>
    163c:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <serialWritePos>
    1640:	30 91 66 03 	lds	r19, 0x0366	; 0x800366 <serialWritePos+0x1>
    1644:	82 17       	cp	r24, r18
    1646:	93 07       	cpc	r25, r19
    1648:	b9 f0       	breq	.+46     	; 0x1678 <__vector_27+0x5e>
	{
		UDR0 = serial0Buffer[serialReadPos];
    164a:	fc 01       	movw	r30, r24
    164c:	e0 59       	subi	r30, 0x90	; 144
    164e:	f9 4f       	sbci	r31, 0xF9	; 249
    1650:	80 81       	ld	r24, Z
    1652:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
    1656:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <serialReadPos>
    165a:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <serialReadPos+0x1>
    165e:	01 96       	adiw	r24, 0x01	; 1
		
		if(serialReadPos >= TX_BUFFER_SIZE)
    1660:	80 38       	cpi	r24, 0x80	; 128
    1662:	91 05       	cpc	r25, r1
    1664:	2c f4       	brge	.+10     	; 0x1670 <__vector_27+0x56>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
    1666:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <serialReadPos+0x1>
    166a:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <serialReadPos>
    166e:	04 c0       	rjmp	.+8      	; 0x1678 <__vector_27+0x5e>
		
		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
    1670:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <serialReadPos+0x1>
    1674:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <serialReadPos>
		}
	}
}
    1678:	ff 91       	pop	r31
    167a:	ef 91       	pop	r30
    167c:	9f 91       	pop	r25
    167e:	8f 91       	pop	r24
    1680:	3f 91       	pop	r19
    1682:	2f 91       	pop	r18
    1684:	0f 90       	pop	r0
    1686:	0b be       	out	0x3b, r0	; 59
    1688:	0f 90       	pop	r0
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	0f 90       	pop	r0
    168e:	1f 90       	pop	r1
    1690:	18 95       	reti

00001692 <__vector_36>:

ISR (USART1_RX_vect)
{
    1692:	1f 92       	push	r1
    1694:	0f 92       	push	r0
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	0f 92       	push	r0
    169a:	11 24       	eor	r1, r1
    169c:	0b b6       	in	r0, 0x3b	; 59
    169e:	0f 92       	push	r0
    16a0:	8f 93       	push	r24
    16a2:	9f 93       	push	r25
    16a4:	ef 93       	push	r30
    16a6:	ff 93       	push	r31
		serial1Buffer[rxWritePosition] = UDR1;
    16a8:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <rxWritePosition>
    16ac:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    16b0:	e8 2f       	mov	r30, r24
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	e0 51       	subi	r30, 0x10	; 16
    16b6:	f9 4f       	sbci	r31, 0xF9	; 249
    16b8:	90 83       	st	Z, r25
		rxWritePosition++;
    16ba:	8f 5f       	subi	r24, 0xFF	; 255
	
		if(rxWritePosition>= RX_BUFFER_SIZE)
    16bc:	1a f0       	brmi	.+6      	; 0x16c4 <__vector_36+0x32>
}

ISR (USART1_RX_vect)
{
		serial1Buffer[rxWritePosition] = UDR1;
		rxWritePosition++;
    16be:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <rxWritePosition>
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <__vector_36+0x36>
	
		if(rxWritePosition>= RX_BUFFER_SIZE)
		{
			rxWritePosition = 0; //this could cause some issues.
    16c4:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <rxWritePosition>
		}


}
    16c8:	ff 91       	pop	r31
    16ca:	ef 91       	pop	r30
    16cc:	9f 91       	pop	r25
    16ce:	8f 91       	pop	r24
    16d0:	0f 90       	pop	r0
    16d2:	0b be       	out	0x3b, r0	; 59
    16d4:	0f 90       	pop	r0
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	0f 90       	pop	r0
    16da:	1f 90       	pop	r1
    16dc:	18 95       	reti

000016de <appendSerial0>:

void appendSerial0(char c)
{
	serial0Buffer[serialWritePos] = c;
    16de:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <serialWritePos>
    16e2:	30 91 66 03 	lds	r19, 0x0366	; 0x800366 <serialWritePos+0x1>
    16e6:	f9 01       	movw	r30, r18
    16e8:	e0 59       	subi	r30, 0x90	; 144
    16ea:	f9 4f       	sbci	r31, 0xF9	; 249
    16ec:	80 83       	st	Z, r24
	serialWritePos++;
    16ee:	2f 5f       	subi	r18, 0xFF	; 255
    16f0:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    16f2:	20 38       	cpi	r18, 0x80	; 128
    16f4:	31 05       	cpc	r19, r1
    16f6:	2c f4       	brge	.+10     	; 0x1702 <appendSerial0+0x24>
}

void appendSerial0(char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    16f8:	30 93 66 03 	sts	0x0366, r19	; 0x800366 <serialWritePos+0x1>
    16fc:	20 93 65 03 	sts	0x0365, r18	; 0x800365 <serialWritePos>
    1700:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    1702:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <serialWritePos+0x1>
    1706:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <serialWritePos>
    170a:	08 95       	ret

0000170c <serialWrite0>:
	}
}

void serialWrite0(char c[])
{
    170c:	0f 93       	push	r16
    170e:	1f 93       	push	r17
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	ec 01       	movw	r28, r24
    1716:	8c 01       	movw	r16, r24
    1718:	06 5f       	subi	r16, 0xF6	; 246
    171a:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = 0; i<10; i++) //this may need to be 11
	{
		appendSerial0(c[i]);
    171c:	89 91       	ld	r24, Y+
    171e:	df df       	rcall	.-66     	; 0x16de <appendSerial0>
	}
}

void serialWrite0(char c[])
{
	for (uint8_t i = 0; i<10; i++) //this may need to be 11
    1720:	c0 17       	cp	r28, r16
    1722:	d1 07       	cpc	r29, r17
    1724:	d9 f7       	brne	.-10     	; 0x171c <serialWrite0+0x10>
	{
		appendSerial0(c[i]);
		
	}
	
	if(UCSR0A & (1 << UDRE0))
    1726:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    172a:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    172c:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	08 95       	ret

0000173a <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    173a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    173e:	80 e1       	ldi	r24, 0x10	; 16
    1740:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

UBRR1H = (BRCMidi >> 8);
    1744:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
UBRR1L = BRCMidi;
    1748:	8f e1       	ldi	r24, 0x1F	; 31
    174a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>

UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    174e:	88 e4       	ldi	r24, 0x48	; 72
    1750:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    1754:	86 e0       	ldi	r24, 0x06	; 6
    1756:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>


UCSR1B = (1 << RXEN1)  | (1 << RXCIE0);
    175a:	90 e9       	ldi	r25, 0x90	; 144
    175c:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); //8 bit chars will be sent
    1760:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1764:	08 95       	ret

00001766 <getChar>:

char getChar()
{
	char returnMe = '\0';
	
	if(rxReadPosition != rxWritePosition)
    1766:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <rxReadPosition>
    176a:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <rxWritePosition>
    176e:	98 17       	cp	r25, r24
    1770:	69 f0       	breq	.+26     	; 0x178c <getChar+0x26>
	{
		returnMe = serial1Buffer[rxReadPosition];
    1772:	e9 2f       	mov	r30, r25
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	e0 51       	subi	r30, 0x10	; 16
    1778:	f9 4f       	sbci	r31, 0xF9	; 249
    177a:	80 81       	ld	r24, Z
		
		rxReadPosition++;
    177c:	9f 5f       	subi	r25, 0xFF	; 255
		
		if(rxReadPosition >= RX_BUFFER_SIZE)
    177e:	1a f0       	brmi	.+6      	; 0x1786 <getChar+0x20>
	
	if(rxReadPosition != rxWritePosition)
	{
		returnMe = serial1Buffer[rxReadPosition];
		
		rxReadPosition++;
    1780:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <rxReadPosition>
    1784:	08 95       	ret
		
		if(rxReadPosition >= RX_BUFFER_SIZE)
		{
			rxReadPosition = 0;
    1786:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <rxReadPosition>
    178a:	08 95       	ret

}

char getChar()
{
	char returnMe = '\0';
    178c:	80 e0       	ldi	r24, 0x00	; 0
		}
	
	}
	return returnMe;
	
    178e:	08 95       	ret

00001790 <trackControl>:
void resumeAll()
{
	char resumePlay[5] = {0xf0, 0xaa, 0x05, 0x0b, 0x55};
	serialWrite0(resumePlay);
	
}
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	2a 97       	sbiw	r28, 0x0a	; 10
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	90 ef       	ldi	r25, 0xF0	; 240
    17a6:	99 83       	std	Y+1, r25	; 0x01
    17a8:	9a ea       	ldi	r25, 0xAA	; 170
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	9a e0       	ldi	r25, 0x0A	; 10
    17ae:	9b 83       	std	Y+3, r25	; 0x03
    17b0:	93 e0       	ldi	r25, 0x03	; 3
    17b2:	9c 83       	std	Y+4, r25	; 0x04
    17b4:	2d 83       	std	Y+5, r18	; 0x05
    17b6:	8e 83       	std	Y+6, r24	; 0x06
    17b8:	6f 83       	std	Y+7, r22	; 0x07
    17ba:	48 87       	std	Y+8, r20	; 0x08
    17bc:	19 86       	std	Y+9, r1	; 0x09
    17be:	85 e5       	ldi	r24, 0x55	; 85
    17c0:	8a 87       	std	Y+10, r24	; 0x0a
    17c2:	ce 01       	movw	r24, r28
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	a2 df       	rcall	.-188    	; 0x170c <serialWrite0>
    17c8:	2a 96       	adiw	r28, 0x0a	; 10
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	08 95       	ret

000017da <setOutputVolume>:
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	28 97       	sbiw	r28, 0x08	; 8
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	90 ef       	ldi	r25, 0xF0	; 240
    17f0:	99 83       	std	Y+1, r25	; 0x01
    17f2:	9a ea       	ldi	r25, 0xAA	; 170
    17f4:	9a 83       	std	Y+2, r25	; 0x02
    17f6:	98 e0       	ldi	r25, 0x08	; 8
    17f8:	9b 83       	std	Y+3, r25	; 0x03
    17fa:	95 e0       	ldi	r25, 0x05	; 5
    17fc:	9c 83       	std	Y+4, r25	; 0x04
    17fe:	4d 83       	std	Y+5, r20	; 0x05
    1800:	8e 83       	std	Y+6, r24	; 0x06
    1802:	6f 83       	std	Y+7, r22	; 0x07
    1804:	85 e5       	ldi	r24, 0x55	; 85
    1806:	88 87       	std	Y+8, r24	; 0x08
    1808:	ce 01       	movw	r24, r28
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	7f df       	rcall	.-258    	; 0x170c <serialWrite0>
    180e:	28 96       	adiw	r28, 0x08	; 8
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	08 95       	ret

00001820 <setTrackVolume>:
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	29 97       	sbiw	r28, 0x09	; 9
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	90 ef       	ldi	r25, 0xF0	; 240
    1836:	99 83       	std	Y+1, r25	; 0x01
    1838:	9a ea       	ldi	r25, 0xAA	; 170
    183a:	9a 83       	std	Y+2, r25	; 0x02
    183c:	99 e0       	ldi	r25, 0x09	; 9
    183e:	9b 83       	std	Y+3, r25	; 0x03
    1840:	98 e0       	ldi	r25, 0x08	; 8
    1842:	9c 83       	std	Y+4, r25	; 0x04
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	6e 83       	std	Y+6, r22	; 0x06
    1848:	4f 83       	std	Y+7, r20	; 0x07
    184a:	28 87       	std	Y+8, r18	; 0x08
    184c:	85 e5       	ldi	r24, 0x55	; 85
    184e:	89 87       	std	Y+9, r24	; 0x09
    1850:	ce 01       	movw	r24, r28
    1852:	01 96       	adiw	r24, 0x01	; 1
    1854:	5b df       	rcall	.-330    	; 0x170c <serialWrite0>
    1856:	29 96       	adiw	r28, 0x09	; 9
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	08 95       	ret

00001868 <outputSampleRate>:

void outputSampleRate(uint8_t outputSelect, uint8_t offsetLSB, uint8_t offsetMSB)
{
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	28 97       	sbiw	r28, 0x08	; 8
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
	char pitchChange[8] = {0xf0, 0xaa, 0x08, 0x0c, outputSelect, offsetLSB, offsetMSB, 0x55};
    187c:	90 ef       	ldi	r25, 0xF0	; 240
    187e:	99 83       	std	Y+1, r25	; 0x01
    1880:	9a ea       	ldi	r25, 0xAA	; 170
    1882:	9a 83       	std	Y+2, r25	; 0x02
    1884:	98 e0       	ldi	r25, 0x08	; 8
    1886:	9b 83       	std	Y+3, r25	; 0x03
    1888:	9c e0       	ldi	r25, 0x0C	; 12
    188a:	9c 83       	std	Y+4, r25	; 0x04
    188c:	8d 83       	std	Y+5, r24	; 0x05
    188e:	6e 83       	std	Y+6, r22	; 0x06
    1890:	4f 83       	std	Y+7, r20	; 0x07
    1892:	85 e5       	ldi	r24, 0x55	; 85
    1894:	88 87       	std	Y+8, r24	; 0x08
	serialWrite0(pitchChange);
    1896:	ce 01       	movw	r24, r28
    1898:	01 96       	adiw	r24, 0x01	; 1
    189a:	38 df       	rcall	.-400    	; 0x170c <serialWrite0>
}
    189c:	28 96       	adiw	r28, 0x08	; 8
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	08 95       	ret

000018ae <__subsf3>:
    18ae:	50 58       	subi	r21, 0x80	; 128

000018b0 <__addsf3>:
    18b0:	bb 27       	eor	r27, r27
    18b2:	aa 27       	eor	r26, r26
    18b4:	0e d0       	rcall	.+28     	; 0x18d2 <__addsf3x>
    18b6:	4d c1       	rjmp	.+666    	; 0x1b52 <__fp_round>
    18b8:	3e d1       	rcall	.+636    	; 0x1b36 <__fp_pscA>
    18ba:	30 f0       	brcs	.+12     	; 0x18c8 <__addsf3+0x18>
    18bc:	43 d1       	rcall	.+646    	; 0x1b44 <__fp_pscB>
    18be:	20 f0       	brcs	.+8      	; 0x18c8 <__addsf3+0x18>
    18c0:	31 f4       	brne	.+12     	; 0x18ce <__addsf3+0x1e>
    18c2:	9f 3f       	cpi	r25, 0xFF	; 255
    18c4:	11 f4       	brne	.+4      	; 0x18ca <__addsf3+0x1a>
    18c6:	1e f4       	brtc	.+6      	; 0x18ce <__addsf3+0x1e>
    18c8:	33 c1       	rjmp	.+614    	; 0x1b30 <__fp_nan>
    18ca:	0e f4       	brtc	.+2      	; 0x18ce <__addsf3+0x1e>
    18cc:	e0 95       	com	r30
    18ce:	e7 fb       	bst	r30, 7
    18d0:	29 c1       	rjmp	.+594    	; 0x1b24 <__fp_inf>

000018d2 <__addsf3x>:
    18d2:	e9 2f       	mov	r30, r25
    18d4:	4f d1       	rcall	.+670    	; 0x1b74 <__fp_split3>
    18d6:	80 f3       	brcs	.-32     	; 0x18b8 <__addsf3+0x8>
    18d8:	ba 17       	cp	r27, r26
    18da:	62 07       	cpc	r22, r18
    18dc:	73 07       	cpc	r23, r19
    18de:	84 07       	cpc	r24, r20
    18e0:	95 07       	cpc	r25, r21
    18e2:	18 f0       	brcs	.+6      	; 0x18ea <__addsf3x+0x18>
    18e4:	71 f4       	brne	.+28     	; 0x1902 <__addsf3x+0x30>
    18e6:	9e f5       	brtc	.+102    	; 0x194e <__addsf3x+0x7c>
    18e8:	67 c1       	rjmp	.+718    	; 0x1bb8 <__fp_zero>
    18ea:	0e f4       	brtc	.+2      	; 0x18ee <__addsf3x+0x1c>
    18ec:	e0 95       	com	r30
    18ee:	0b 2e       	mov	r0, r27
    18f0:	ba 2f       	mov	r27, r26
    18f2:	a0 2d       	mov	r26, r0
    18f4:	0b 01       	movw	r0, r22
    18f6:	b9 01       	movw	r22, r18
    18f8:	90 01       	movw	r18, r0
    18fa:	0c 01       	movw	r0, r24
    18fc:	ca 01       	movw	r24, r20
    18fe:	a0 01       	movw	r20, r0
    1900:	11 24       	eor	r1, r1
    1902:	ff 27       	eor	r31, r31
    1904:	59 1b       	sub	r21, r25
    1906:	99 f0       	breq	.+38     	; 0x192e <__addsf3x+0x5c>
    1908:	59 3f       	cpi	r21, 0xF9	; 249
    190a:	50 f4       	brcc	.+20     	; 0x1920 <__addsf3x+0x4e>
    190c:	50 3e       	cpi	r21, 0xE0	; 224
    190e:	68 f1       	brcs	.+90     	; 0x196a <__addsf3x+0x98>
    1910:	1a 16       	cp	r1, r26
    1912:	f0 40       	sbci	r31, 0x00	; 0
    1914:	a2 2f       	mov	r26, r18
    1916:	23 2f       	mov	r18, r19
    1918:	34 2f       	mov	r19, r20
    191a:	44 27       	eor	r20, r20
    191c:	58 5f       	subi	r21, 0xF8	; 248
    191e:	f3 cf       	rjmp	.-26     	; 0x1906 <__addsf3x+0x34>
    1920:	46 95       	lsr	r20
    1922:	37 95       	ror	r19
    1924:	27 95       	ror	r18
    1926:	a7 95       	ror	r26
    1928:	f0 40       	sbci	r31, 0x00	; 0
    192a:	53 95       	inc	r21
    192c:	c9 f7       	brne	.-14     	; 0x1920 <__addsf3x+0x4e>
    192e:	7e f4       	brtc	.+30     	; 0x194e <__addsf3x+0x7c>
    1930:	1f 16       	cp	r1, r31
    1932:	ba 0b       	sbc	r27, r26
    1934:	62 0b       	sbc	r22, r18
    1936:	73 0b       	sbc	r23, r19
    1938:	84 0b       	sbc	r24, r20
    193a:	ba f0       	brmi	.+46     	; 0x196a <__addsf3x+0x98>
    193c:	91 50       	subi	r25, 0x01	; 1
    193e:	a1 f0       	breq	.+40     	; 0x1968 <__addsf3x+0x96>
    1940:	ff 0f       	add	r31, r31
    1942:	bb 1f       	adc	r27, r27
    1944:	66 1f       	adc	r22, r22
    1946:	77 1f       	adc	r23, r23
    1948:	88 1f       	adc	r24, r24
    194a:	c2 f7       	brpl	.-16     	; 0x193c <__addsf3x+0x6a>
    194c:	0e c0       	rjmp	.+28     	; 0x196a <__addsf3x+0x98>
    194e:	ba 0f       	add	r27, r26
    1950:	62 1f       	adc	r22, r18
    1952:	73 1f       	adc	r23, r19
    1954:	84 1f       	adc	r24, r20
    1956:	48 f4       	brcc	.+18     	; 0x196a <__addsf3x+0x98>
    1958:	87 95       	ror	r24
    195a:	77 95       	ror	r23
    195c:	67 95       	ror	r22
    195e:	b7 95       	ror	r27
    1960:	f7 95       	ror	r31
    1962:	9e 3f       	cpi	r25, 0xFE	; 254
    1964:	08 f0       	brcs	.+2      	; 0x1968 <__addsf3x+0x96>
    1966:	b3 cf       	rjmp	.-154    	; 0x18ce <__addsf3+0x1e>
    1968:	93 95       	inc	r25
    196a:	88 0f       	add	r24, r24
    196c:	08 f0       	brcs	.+2      	; 0x1970 <__addsf3x+0x9e>
    196e:	99 27       	eor	r25, r25
    1970:	ee 0f       	add	r30, r30
    1972:	97 95       	ror	r25
    1974:	87 95       	ror	r24
    1976:	08 95       	ret

00001978 <__divsf3>:
    1978:	0c d0       	rcall	.+24     	; 0x1992 <__divsf3x>
    197a:	eb c0       	rjmp	.+470    	; 0x1b52 <__fp_round>
    197c:	e3 d0       	rcall	.+454    	; 0x1b44 <__fp_pscB>
    197e:	40 f0       	brcs	.+16     	; 0x1990 <__divsf3+0x18>
    1980:	da d0       	rcall	.+436    	; 0x1b36 <__fp_pscA>
    1982:	30 f0       	brcs	.+12     	; 0x1990 <__divsf3+0x18>
    1984:	21 f4       	brne	.+8      	; 0x198e <__divsf3+0x16>
    1986:	5f 3f       	cpi	r21, 0xFF	; 255
    1988:	19 f0       	breq	.+6      	; 0x1990 <__divsf3+0x18>
    198a:	cc c0       	rjmp	.+408    	; 0x1b24 <__fp_inf>
    198c:	51 11       	cpse	r21, r1
    198e:	15 c1       	rjmp	.+554    	; 0x1bba <__fp_szero>
    1990:	cf c0       	rjmp	.+414    	; 0x1b30 <__fp_nan>

00001992 <__divsf3x>:
    1992:	f0 d0       	rcall	.+480    	; 0x1b74 <__fp_split3>
    1994:	98 f3       	brcs	.-26     	; 0x197c <__divsf3+0x4>

00001996 <__divsf3_pse>:
    1996:	99 23       	and	r25, r25
    1998:	c9 f3       	breq	.-14     	; 0x198c <__divsf3+0x14>
    199a:	55 23       	and	r21, r21
    199c:	b1 f3       	breq	.-20     	; 0x198a <__divsf3+0x12>
    199e:	95 1b       	sub	r25, r21
    19a0:	55 0b       	sbc	r21, r21
    19a2:	bb 27       	eor	r27, r27
    19a4:	aa 27       	eor	r26, r26
    19a6:	62 17       	cp	r22, r18
    19a8:	73 07       	cpc	r23, r19
    19aa:	84 07       	cpc	r24, r20
    19ac:	38 f0       	brcs	.+14     	; 0x19bc <__divsf3_pse+0x26>
    19ae:	9f 5f       	subi	r25, 0xFF	; 255
    19b0:	5f 4f       	sbci	r21, 0xFF	; 255
    19b2:	22 0f       	add	r18, r18
    19b4:	33 1f       	adc	r19, r19
    19b6:	44 1f       	adc	r20, r20
    19b8:	aa 1f       	adc	r26, r26
    19ba:	a9 f3       	breq	.-22     	; 0x19a6 <__divsf3_pse+0x10>
    19bc:	33 d0       	rcall	.+102    	; 0x1a24 <__divsf3_pse+0x8e>
    19be:	0e 2e       	mov	r0, r30
    19c0:	3a f0       	brmi	.+14     	; 0x19d0 <__divsf3_pse+0x3a>
    19c2:	e0 e8       	ldi	r30, 0x80	; 128
    19c4:	30 d0       	rcall	.+96     	; 0x1a26 <__divsf3_pse+0x90>
    19c6:	91 50       	subi	r25, 0x01	; 1
    19c8:	50 40       	sbci	r21, 0x00	; 0
    19ca:	e6 95       	lsr	r30
    19cc:	00 1c       	adc	r0, r0
    19ce:	ca f7       	brpl	.-14     	; 0x19c2 <__divsf3_pse+0x2c>
    19d0:	29 d0       	rcall	.+82     	; 0x1a24 <__divsf3_pse+0x8e>
    19d2:	fe 2f       	mov	r31, r30
    19d4:	27 d0       	rcall	.+78     	; 0x1a24 <__divsf3_pse+0x8e>
    19d6:	66 0f       	add	r22, r22
    19d8:	77 1f       	adc	r23, r23
    19da:	88 1f       	adc	r24, r24
    19dc:	bb 1f       	adc	r27, r27
    19de:	26 17       	cp	r18, r22
    19e0:	37 07       	cpc	r19, r23
    19e2:	48 07       	cpc	r20, r24
    19e4:	ab 07       	cpc	r26, r27
    19e6:	b0 e8       	ldi	r27, 0x80	; 128
    19e8:	09 f0       	breq	.+2      	; 0x19ec <__divsf3_pse+0x56>
    19ea:	bb 0b       	sbc	r27, r27
    19ec:	80 2d       	mov	r24, r0
    19ee:	bf 01       	movw	r22, r30
    19f0:	ff 27       	eor	r31, r31
    19f2:	93 58       	subi	r25, 0x83	; 131
    19f4:	5f 4f       	sbci	r21, 0xFF	; 255
    19f6:	2a f0       	brmi	.+10     	; 0x1a02 <__divsf3_pse+0x6c>
    19f8:	9e 3f       	cpi	r25, 0xFE	; 254
    19fa:	51 05       	cpc	r21, r1
    19fc:	68 f0       	brcs	.+26     	; 0x1a18 <__divsf3_pse+0x82>
    19fe:	92 c0       	rjmp	.+292    	; 0x1b24 <__fp_inf>
    1a00:	dc c0       	rjmp	.+440    	; 0x1bba <__fp_szero>
    1a02:	5f 3f       	cpi	r21, 0xFF	; 255
    1a04:	ec f3       	brlt	.-6      	; 0x1a00 <__divsf3_pse+0x6a>
    1a06:	98 3e       	cpi	r25, 0xE8	; 232
    1a08:	dc f3       	brlt	.-10     	; 0x1a00 <__divsf3_pse+0x6a>
    1a0a:	86 95       	lsr	r24
    1a0c:	77 95       	ror	r23
    1a0e:	67 95       	ror	r22
    1a10:	b7 95       	ror	r27
    1a12:	f7 95       	ror	r31
    1a14:	9f 5f       	subi	r25, 0xFF	; 255
    1a16:	c9 f7       	brne	.-14     	; 0x1a0a <__divsf3_pse+0x74>
    1a18:	88 0f       	add	r24, r24
    1a1a:	91 1d       	adc	r25, r1
    1a1c:	96 95       	lsr	r25
    1a1e:	87 95       	ror	r24
    1a20:	97 f9       	bld	r25, 7
    1a22:	08 95       	ret
    1a24:	e1 e0       	ldi	r30, 0x01	; 1
    1a26:	66 0f       	add	r22, r22
    1a28:	77 1f       	adc	r23, r23
    1a2a:	88 1f       	adc	r24, r24
    1a2c:	bb 1f       	adc	r27, r27
    1a2e:	62 17       	cp	r22, r18
    1a30:	73 07       	cpc	r23, r19
    1a32:	84 07       	cpc	r24, r20
    1a34:	ba 07       	cpc	r27, r26
    1a36:	20 f0       	brcs	.+8      	; 0x1a40 <__divsf3_pse+0xaa>
    1a38:	62 1b       	sub	r22, r18
    1a3a:	73 0b       	sbc	r23, r19
    1a3c:	84 0b       	sbc	r24, r20
    1a3e:	ba 0b       	sbc	r27, r26
    1a40:	ee 1f       	adc	r30, r30
    1a42:	88 f7       	brcc	.-30     	; 0x1a26 <__divsf3_pse+0x90>
    1a44:	e0 95       	com	r30
    1a46:	08 95       	ret

00001a48 <__fixsfsi>:
    1a48:	04 d0       	rcall	.+8      	; 0x1a52 <__fixunssfsi>
    1a4a:	68 94       	set
    1a4c:	b1 11       	cpse	r27, r1
    1a4e:	b5 c0       	rjmp	.+362    	; 0x1bba <__fp_szero>
    1a50:	08 95       	ret

00001a52 <__fixunssfsi>:
    1a52:	98 d0       	rcall	.+304    	; 0x1b84 <__fp_splitA>
    1a54:	88 f0       	brcs	.+34     	; 0x1a78 <__fixunssfsi+0x26>
    1a56:	9f 57       	subi	r25, 0x7F	; 127
    1a58:	90 f0       	brcs	.+36     	; 0x1a7e <__fixunssfsi+0x2c>
    1a5a:	b9 2f       	mov	r27, r25
    1a5c:	99 27       	eor	r25, r25
    1a5e:	b7 51       	subi	r27, 0x17	; 23
    1a60:	a0 f0       	brcs	.+40     	; 0x1a8a <__fixunssfsi+0x38>
    1a62:	d1 f0       	breq	.+52     	; 0x1a98 <__fixunssfsi+0x46>
    1a64:	66 0f       	add	r22, r22
    1a66:	77 1f       	adc	r23, r23
    1a68:	88 1f       	adc	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	1a f0       	brmi	.+6      	; 0x1a74 <__fixunssfsi+0x22>
    1a6e:	ba 95       	dec	r27
    1a70:	c9 f7       	brne	.-14     	; 0x1a64 <__fixunssfsi+0x12>
    1a72:	12 c0       	rjmp	.+36     	; 0x1a98 <__fixunssfsi+0x46>
    1a74:	b1 30       	cpi	r27, 0x01	; 1
    1a76:	81 f0       	breq	.+32     	; 0x1a98 <__fixunssfsi+0x46>
    1a78:	9f d0       	rcall	.+318    	; 0x1bb8 <__fp_zero>
    1a7a:	b1 e0       	ldi	r27, 0x01	; 1
    1a7c:	08 95       	ret
    1a7e:	9c c0       	rjmp	.+312    	; 0x1bb8 <__fp_zero>
    1a80:	67 2f       	mov	r22, r23
    1a82:	78 2f       	mov	r23, r24
    1a84:	88 27       	eor	r24, r24
    1a86:	b8 5f       	subi	r27, 0xF8	; 248
    1a88:	39 f0       	breq	.+14     	; 0x1a98 <__fixunssfsi+0x46>
    1a8a:	b9 3f       	cpi	r27, 0xF9	; 249
    1a8c:	cc f3       	brlt	.-14     	; 0x1a80 <__fixunssfsi+0x2e>
    1a8e:	86 95       	lsr	r24
    1a90:	77 95       	ror	r23
    1a92:	67 95       	ror	r22
    1a94:	b3 95       	inc	r27
    1a96:	d9 f7       	brne	.-10     	; 0x1a8e <__fixunssfsi+0x3c>
    1a98:	3e f4       	brtc	.+14     	; 0x1aa8 <__fixunssfsi+0x56>
    1a9a:	90 95       	com	r25
    1a9c:	80 95       	com	r24
    1a9e:	70 95       	com	r23
    1aa0:	61 95       	neg	r22
    1aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa4:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa8:	08 95       	ret

00001aaa <__floatunsisf>:
    1aaa:	e8 94       	clt
    1aac:	09 c0       	rjmp	.+18     	; 0x1ac0 <__floatsisf+0x12>

00001aae <__floatsisf>:
    1aae:	97 fb       	bst	r25, 7
    1ab0:	3e f4       	brtc	.+14     	; 0x1ac0 <__floatsisf+0x12>
    1ab2:	90 95       	com	r25
    1ab4:	80 95       	com	r24
    1ab6:	70 95       	com	r23
    1ab8:	61 95       	neg	r22
    1aba:	7f 4f       	sbci	r23, 0xFF	; 255
    1abc:	8f 4f       	sbci	r24, 0xFF	; 255
    1abe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac0:	99 23       	and	r25, r25
    1ac2:	a9 f0       	breq	.+42     	; 0x1aee <__floatsisf+0x40>
    1ac4:	f9 2f       	mov	r31, r25
    1ac6:	96 e9       	ldi	r25, 0x96	; 150
    1ac8:	bb 27       	eor	r27, r27
    1aca:	93 95       	inc	r25
    1acc:	f6 95       	lsr	r31
    1ace:	87 95       	ror	r24
    1ad0:	77 95       	ror	r23
    1ad2:	67 95       	ror	r22
    1ad4:	b7 95       	ror	r27
    1ad6:	f1 11       	cpse	r31, r1
    1ad8:	f8 cf       	rjmp	.-16     	; 0x1aca <__floatsisf+0x1c>
    1ada:	fa f4       	brpl	.+62     	; 0x1b1a <__floatsisf+0x6c>
    1adc:	bb 0f       	add	r27, r27
    1ade:	11 f4       	brne	.+4      	; 0x1ae4 <__floatsisf+0x36>
    1ae0:	60 ff       	sbrs	r22, 0
    1ae2:	1b c0       	rjmp	.+54     	; 0x1b1a <__floatsisf+0x6c>
    1ae4:	6f 5f       	subi	r22, 0xFF	; 255
    1ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aea:	9f 4f       	sbci	r25, 0xFF	; 255
    1aec:	16 c0       	rjmp	.+44     	; 0x1b1a <__floatsisf+0x6c>
    1aee:	88 23       	and	r24, r24
    1af0:	11 f0       	breq	.+4      	; 0x1af6 <__floatsisf+0x48>
    1af2:	96 e9       	ldi	r25, 0x96	; 150
    1af4:	11 c0       	rjmp	.+34     	; 0x1b18 <__floatsisf+0x6a>
    1af6:	77 23       	and	r23, r23
    1af8:	21 f0       	breq	.+8      	; 0x1b02 <__floatsisf+0x54>
    1afa:	9e e8       	ldi	r25, 0x8E	; 142
    1afc:	87 2f       	mov	r24, r23
    1afe:	76 2f       	mov	r23, r22
    1b00:	05 c0       	rjmp	.+10     	; 0x1b0c <__floatsisf+0x5e>
    1b02:	66 23       	and	r22, r22
    1b04:	71 f0       	breq	.+28     	; 0x1b22 <__floatsisf+0x74>
    1b06:	96 e8       	ldi	r25, 0x86	; 134
    1b08:	86 2f       	mov	r24, r22
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	2a f0       	brmi	.+10     	; 0x1b1a <__floatsisf+0x6c>
    1b10:	9a 95       	dec	r25
    1b12:	66 0f       	add	r22, r22
    1b14:	77 1f       	adc	r23, r23
    1b16:	88 1f       	adc	r24, r24
    1b18:	da f7       	brpl	.-10     	; 0x1b10 <__floatsisf+0x62>
    1b1a:	88 0f       	add	r24, r24
    1b1c:	96 95       	lsr	r25
    1b1e:	87 95       	ror	r24
    1b20:	97 f9       	bld	r25, 7
    1b22:	08 95       	ret

00001b24 <__fp_inf>:
    1b24:	97 f9       	bld	r25, 7
    1b26:	9f 67       	ori	r25, 0x7F	; 127
    1b28:	80 e8       	ldi	r24, 0x80	; 128
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	08 95       	ret

00001b30 <__fp_nan>:
    1b30:	9f ef       	ldi	r25, 0xFF	; 255
    1b32:	80 ec       	ldi	r24, 0xC0	; 192
    1b34:	08 95       	ret

00001b36 <__fp_pscA>:
    1b36:	00 24       	eor	r0, r0
    1b38:	0a 94       	dec	r0
    1b3a:	16 16       	cp	r1, r22
    1b3c:	17 06       	cpc	r1, r23
    1b3e:	18 06       	cpc	r1, r24
    1b40:	09 06       	cpc	r0, r25
    1b42:	08 95       	ret

00001b44 <__fp_pscB>:
    1b44:	00 24       	eor	r0, r0
    1b46:	0a 94       	dec	r0
    1b48:	12 16       	cp	r1, r18
    1b4a:	13 06       	cpc	r1, r19
    1b4c:	14 06       	cpc	r1, r20
    1b4e:	05 06       	cpc	r0, r21
    1b50:	08 95       	ret

00001b52 <__fp_round>:
    1b52:	09 2e       	mov	r0, r25
    1b54:	03 94       	inc	r0
    1b56:	00 0c       	add	r0, r0
    1b58:	11 f4       	brne	.+4      	; 0x1b5e <__fp_round+0xc>
    1b5a:	88 23       	and	r24, r24
    1b5c:	52 f0       	brmi	.+20     	; 0x1b72 <__fp_round+0x20>
    1b5e:	bb 0f       	add	r27, r27
    1b60:	40 f4       	brcc	.+16     	; 0x1b72 <__fp_round+0x20>
    1b62:	bf 2b       	or	r27, r31
    1b64:	11 f4       	brne	.+4      	; 0x1b6a <__fp_round+0x18>
    1b66:	60 ff       	sbrs	r22, 0
    1b68:	04 c0       	rjmp	.+8      	; 0x1b72 <__fp_round+0x20>
    1b6a:	6f 5f       	subi	r22, 0xFF	; 255
    1b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b70:	9f 4f       	sbci	r25, 0xFF	; 255
    1b72:	08 95       	ret

00001b74 <__fp_split3>:
    1b74:	57 fd       	sbrc	r21, 7
    1b76:	90 58       	subi	r25, 0x80	; 128
    1b78:	44 0f       	add	r20, r20
    1b7a:	55 1f       	adc	r21, r21
    1b7c:	59 f0       	breq	.+22     	; 0x1b94 <__fp_splitA+0x10>
    1b7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b80:	71 f0       	breq	.+28     	; 0x1b9e <__fp_splitA+0x1a>
    1b82:	47 95       	ror	r20

00001b84 <__fp_splitA>:
    1b84:	88 0f       	add	r24, r24
    1b86:	97 fb       	bst	r25, 7
    1b88:	99 1f       	adc	r25, r25
    1b8a:	61 f0       	breq	.+24     	; 0x1ba4 <__fp_splitA+0x20>
    1b8c:	9f 3f       	cpi	r25, 0xFF	; 255
    1b8e:	79 f0       	breq	.+30     	; 0x1bae <__fp_splitA+0x2a>
    1b90:	87 95       	ror	r24
    1b92:	08 95       	ret
    1b94:	12 16       	cp	r1, r18
    1b96:	13 06       	cpc	r1, r19
    1b98:	14 06       	cpc	r1, r20
    1b9a:	55 1f       	adc	r21, r21
    1b9c:	f2 cf       	rjmp	.-28     	; 0x1b82 <__fp_split3+0xe>
    1b9e:	46 95       	lsr	r20
    1ba0:	f1 df       	rcall	.-30     	; 0x1b84 <__fp_splitA>
    1ba2:	08 c0       	rjmp	.+16     	; 0x1bb4 <__fp_splitA+0x30>
    1ba4:	16 16       	cp	r1, r22
    1ba6:	17 06       	cpc	r1, r23
    1ba8:	18 06       	cpc	r1, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	f1 cf       	rjmp	.-30     	; 0x1b90 <__fp_splitA+0xc>
    1bae:	86 95       	lsr	r24
    1bb0:	71 05       	cpc	r23, r1
    1bb2:	61 05       	cpc	r22, r1
    1bb4:	08 94       	sec
    1bb6:	08 95       	ret

00001bb8 <__fp_zero>:
    1bb8:	e8 94       	clt

00001bba <__fp_szero>:
    1bba:	bb 27       	eor	r27, r27
    1bbc:	66 27       	eor	r22, r22
    1bbe:	77 27       	eor	r23, r23
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	97 f9       	bld	r25, 7
    1bc4:	08 95       	ret

00001bc6 <__divmodhi4>:
    1bc6:	97 fb       	bst	r25, 7
    1bc8:	07 2e       	mov	r0, r23
    1bca:	16 f4       	brtc	.+4      	; 0x1bd0 <__divmodhi4+0xa>
    1bcc:	00 94       	com	r0
    1bce:	06 d0       	rcall	.+12     	; 0x1bdc <__divmodhi4_neg1>
    1bd0:	77 fd       	sbrc	r23, 7
    1bd2:	08 d0       	rcall	.+16     	; 0x1be4 <__divmodhi4_neg2>
    1bd4:	1a d0       	rcall	.+52     	; 0x1c0a <__udivmodhi4>
    1bd6:	07 fc       	sbrc	r0, 7
    1bd8:	05 d0       	rcall	.+10     	; 0x1be4 <__divmodhi4_neg2>
    1bda:	3e f4       	brtc	.+14     	; 0x1bea <__divmodhi4_exit>

00001bdc <__divmodhi4_neg1>:
    1bdc:	90 95       	com	r25
    1bde:	81 95       	neg	r24
    1be0:	9f 4f       	sbci	r25, 0xFF	; 255
    1be2:	08 95       	ret

00001be4 <__divmodhi4_neg2>:
    1be4:	70 95       	com	r23
    1be6:	61 95       	neg	r22
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255

00001bea <__divmodhi4_exit>:
    1bea:	08 95       	ret

00001bec <__umulhisi3>:
    1bec:	a2 9f       	mul	r26, r18
    1bee:	b0 01       	movw	r22, r0
    1bf0:	b3 9f       	mul	r27, r19
    1bf2:	c0 01       	movw	r24, r0
    1bf4:	a3 9f       	mul	r26, r19
    1bf6:	70 0d       	add	r23, r0
    1bf8:	81 1d       	adc	r24, r1
    1bfa:	11 24       	eor	r1, r1
    1bfc:	91 1d       	adc	r25, r1
    1bfe:	b2 9f       	mul	r27, r18
    1c00:	70 0d       	add	r23, r0
    1c02:	81 1d       	adc	r24, r1
    1c04:	11 24       	eor	r1, r1
    1c06:	91 1d       	adc	r25, r1
    1c08:	08 95       	ret

00001c0a <__udivmodhi4>:
    1c0a:	aa 1b       	sub	r26, r26
    1c0c:	bb 1b       	sub	r27, r27
    1c0e:	51 e1       	ldi	r21, 0x11	; 17
    1c10:	07 c0       	rjmp	.+14     	; 0x1c20 <__udivmodhi4_ep>

00001c12 <__udivmodhi4_loop>:
    1c12:	aa 1f       	adc	r26, r26
    1c14:	bb 1f       	adc	r27, r27
    1c16:	a6 17       	cp	r26, r22
    1c18:	b7 07       	cpc	r27, r23
    1c1a:	10 f0       	brcs	.+4      	; 0x1c20 <__udivmodhi4_ep>
    1c1c:	a6 1b       	sub	r26, r22
    1c1e:	b7 0b       	sbc	r27, r23

00001c20 <__udivmodhi4_ep>:
    1c20:	88 1f       	adc	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	5a 95       	dec	r21
    1c26:	a9 f7       	brne	.-22     	; 0x1c12 <__udivmodhi4_loop>
    1c28:	80 95       	com	r24
    1c2a:	90 95       	com	r25
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	08 95       	ret

00001c32 <_exit>:
    1c32:	f8 94       	cli

00001c34 <__stop_program>:
    1c34:	ff cf       	rjmp	.-2      	; 0x1c34 <__stop_program>
