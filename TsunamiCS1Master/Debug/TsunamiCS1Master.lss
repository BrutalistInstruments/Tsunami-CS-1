
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000208  00800200  00001568  000015fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002ca  00800408  00800408  00001804  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001834  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c4b  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000169b  00000000  00000000  0000572f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016e8  00000000  00000000  00006dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000056c  00000000  00000000  000084b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eec  00000000  00000000  00008a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b5e  00000000  00000000  0000990c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000b46a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6f c7       	rjmp	.+3806   	; 0xf4c <__vector_27>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	99 c7       	rjmp	.+3890   	; 0xfc4 <__vector_36>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e6       	ldi	r30, 0x68	; 104
      fc:	f5 e1       	ldi	r31, 0x15	; 21
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	26 e0       	ldi	r18, 0x06	; 6
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 3d       	cpi	r26, 0xD2	; 210
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	b5 d3       	rcall	.+1898   	; 0x88a <main>
     120:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     126:	8f ef       	ldi	r24, 0xFF	; 255
     128:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     12a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons
	PORTB = 0B00011111;
     12e:	8f e1       	ldi	r24, 0x1F	; 31
     130:	85 b9       	out	0x05, r24	; 5
     132:	08 95       	ret

00000134 <listenTrigButtons>:
	//what ports are the encoder buttons on?
}


void listenTrigButtons()
{
     134:	cf 92       	push	r12
     136:	df 92       	push	r13
     138:	ef 92       	push	r14
     13a:	ff 92       	push	r15
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     144:	c0 91 09 01 	lds	r28, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     148:	c0 95       	com	r28
     14a:	c0 93 70 05 	sts	0x0570, r28	; 0x800570 <buttonsCurrentCycle>
	currentTrigButtons = (buttonsCurrentCycle << 8) | (PINA^255);
     14e:	80 b1       	in	r24, 0x00	; 0
     150:	d0 e0       	ldi	r29, 0x00	; 0
     152:	dc 2f       	mov	r29, r28
     154:	cc 27       	eor	r28, r28
     156:	80 95       	com	r24
     158:	c8 2b       	or	r28, r24
     15a:	d0 93 9f 05 	sts	0x059F, r29	; 0x80059f <currentTrigButtons+0x1>
     15e:	c0 93 9e 05 	sts	0x059E, r28	; 0x80059e <currentTrigButtons>
	if(currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     162:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__data_end>
     166:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <__data_end+0x1>
     16a:	c8 17       	cp	r28, r24
     16c:	d9 07       	cpc	r29, r25
     16e:	09 f4       	brne	.+2      	; 0x172 <listenTrigButtons+0x3e>
     170:	3d c0       	rjmp	.+122    	; 0x1ec <listenTrigButtons+0xb8>
	{
		lastFullBits = currentTrigButtons;
     172:	d0 93 09 04 	sts	0x0409, r29	; 0x800409 <__data_end+0x1>
     176:	c0 93 08 04 	sts	0x0408, r28	; 0x800408 <__data_end>
     17a:	00 ea       	ldi	r16, 0xA0	; 160
     17c:	14 e0       	ldi	r17, 0x04	; 4
     17e:	0f 2e       	mov	r0, r31
     180:	f0 eb       	ldi	r31, 0xB0	; 176
     182:	ef 2e       	mov	r14, r31
     184:	f4 e0       	ldi	r31, 0x04	; 4
     186:	ff 2e       	mov	r15, r31
     188:	f0 2d       	mov	r31, r0
				//for "perfrmance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
				case 0: //performance mode
				//we trigger a sound here based on the location of bc
				trackControl(currentPattern.trackSampleLSB[bc], currentPattern.trackSampleMSB[bc], currentPattern.trackOutputRoute[bc], currentPattern.trackPlayMode[bc]);
				//trackControl(3,0,0,1);
				numPrinter(buttonTest,9, 2,bc);
     18a:	88 e7       	ldi	r24, 0x78	; 120
     18c:	9f ef       	ldi	r25, 0xFF	; 255
     18e:	9c 01       	movw	r18, r24
     190:	28 51       	subi	r18, 0x18	; 24
     192:	34 40       	sbci	r19, 0x04	; 4
     194:	69 01       	movw	r12, r18
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
	{
		currentTrig = (fullBitsParse&1);
     196:	8c 2f       	mov	r24, r28
     198:	81 70       	andi	r24, 0x01	; 1
     19a:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <currentTrig>
		if(currentTrig)
     19e:	88 23       	and	r24, r24
     1a0:	f1 f0       	breq	.+60     	; 0x1de <listenTrigButtons+0xaa>
		{
			switch (encoderAValue)
     1a2:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <encoderAValue>
     1a6:	81 11       	cpse	r24, r1
     1a8:	1a c0       	rjmp	.+52     	; 0x1de <listenTrigButtons+0xaa>
			{
				
				//for "perfrmance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
				case 0: //performance mode
				//we trigger a sound here based on the location of bc
				trackControl(currentPattern.trackSampleLSB[bc], currentPattern.trackSampleMSB[bc], currentPattern.trackOutputRoute[bc], currentPattern.trackPlayMode[bc]);
     1aa:	f8 01       	movw	r30, r16
     1ac:	20 81       	ld	r18, Z
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	e0 57       	subi	r30, 0x70	; 112
     1b2:	f1 09       	sbc	r31, r1
     1b4:	40 81       	ld	r20, Z
     1b6:	50 e0       	ldi	r21, 0x00	; 0
     1b8:	f8 01       	movw	r30, r16
     1ba:	60 89       	ldd	r22, Z+16	; 0x10
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	80 a1       	ldd	r24, Z+32	; 0x20
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	7f d7       	rcall	.+3838   	; 0x10c2 <trackControl>
				//trackControl(3,0,0,1);
				numPrinter(buttonTest,9, 2,bc);
     1c4:	96 01       	movw	r18, r12
     1c6:	20 0f       	add	r18, r16
     1c8:	31 1f       	adc	r19, r17
     1ca:	42 e0       	ldi	r20, 0x02	; 2
     1cc:	69 e0       	ldi	r22, 0x09	; 9
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	92 e0       	ldi	r25, 0x02	; 2
     1d2:	0b d5       	rcall	.+2582   	; 0xbea <numPrinter>
				outputS(buttonTest, 2);
     1d4:	62 e0       	ldi	r22, 0x02	; 2
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	92 e0       	ldi	r25, 0x02	; 2
     1dc:	ee d4       	rcall	.+2524   	; 0xbba <outputS>
			}
		
		
		}
		
		fullBitsParse = fullBitsParse>>1;
     1de:	d6 95       	lsr	r29
     1e0:	c7 95       	ror	r28
     1e2:	0f 5f       	subi	r16, 0xFF	; 255
     1e4:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lastFullBits = currentTrigButtons;
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     1e6:	0e 15       	cp	r16, r14
     1e8:	1f 05       	cpc	r17, r15
     1ea:	a9 f6       	brne	.-86     	; 0x196 <listenTrigButtons+0x62>
		fullBitsParse = fullBitsParse>>1;
	}
	}


}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
     1f2:	0f 91       	pop	r16
     1f4:	ff 90       	pop	r15
     1f6:	ef 90       	pop	r14
     1f8:	df 90       	pop	r13
     1fa:	cf 90       	pop	r12
     1fc:	08 95       	ret

000001fe <listenGPButtons>:

void listenGPButtons() // are the encoder buttons here also?
{
     1fe:	08 95       	ret

00000200 <initEncoders>:
#include "globalVariables.h"

void initEncoders()
{
	//this is where we set the encoder pins to where they need to be
PORTH = 0B01111000; // enable internal pullup resistors.
     200:	88 e7       	ldi	r24, 0x78	; 120
     202:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     206:	08 95       	ret

00000208 <pollEncoder0>:

}

void pollEncoder0(uint8_t *encoderC0)
{
	if(~PINH&(1<<PH6))
     208:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     20c:	26 fd       	sbrc	r18, 6
     20e:	12 c0       	rjmp	.+36     	; 0x234 <pollEncoder0+0x2c>
	{
		if(~PINH&(1<<PH5))
     210:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     214:	25 fd       	sbrc	r18, 5
     216:	05 c0       	rjmp	.+10     	; 0x222 <pollEncoder0+0x1a>
		{
			//left turn?
			*encoderC0= (*encoderC0)+1;
     218:	fc 01       	movw	r30, r24
     21a:	20 81       	ld	r18, Z
     21c:	2f 5f       	subi	r18, 0xFF	; 255
     21e:	20 83       	st	Z, r18
     220:	04 c0       	rjmp	.+8      	; 0x22a <pollEncoder0+0x22>
		}
		else
		{
			*encoderC0= (*encoderC0)-1;
     222:	fc 01       	movw	r30, r24
     224:	20 81       	ld	r18, Z
     226:	21 50       	subi	r18, 0x01	; 1
     228:	20 83       	st	Z, r18
		}
		//_delay_ms(2); // seems un-necesary with while loop
		while(~PINH&(1<<PH6)){} // this does make things smoother, but we need to be sure we have interupts for important things.
     22a:	e0 e0       	ldi	r30, 0x00	; 0
     22c:	f1 e0       	ldi	r31, 0x01	; 1
     22e:	80 81       	ld	r24, Z
     230:	86 ff       	sbrs	r24, 6
     232:	fd cf       	rjmp	.-6      	; 0x22e <pollEncoder0+0x26>
     234:	08 95       	ret

00000236 <pollEncoder1>:

}

void pollEncoder1(uint8_t *encoderC1)
{
	if(~PINH&(1<<PH3))
     236:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     23a:	23 fd       	sbrc	r18, 3
     23c:	12 c0       	rjmp	.+36     	; 0x262 <pollEncoder1+0x2c>
	{
		if(~PINH&(1<<PH4))
     23e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     242:	24 fd       	sbrc	r18, 4
     244:	05 c0       	rjmp	.+10     	; 0x250 <pollEncoder1+0x1a>
		{
			//left turn?
			*encoderC1=(*encoderC1)-1;
     246:	fc 01       	movw	r30, r24
     248:	20 81       	ld	r18, Z
     24a:	21 50       	subi	r18, 0x01	; 1
     24c:	20 83       	st	Z, r18
     24e:	04 c0       	rjmp	.+8      	; 0x258 <pollEncoder1+0x22>
		}
		else
		{
			*encoderC1=(*encoderC1)+1;
     250:	fc 01       	movw	r30, r24
     252:	20 81       	ld	r18, Z
     254:	2f 5f       	subi	r18, 0xFF	; 255
     256:	20 83       	st	Z, r18
		}
		//_delay_ms(2); // seems un-necesary with while loop
		while(~PINH&(1<<PH3)){} // this does make things smoother, but we need to be sure we have interupts for important things.
     258:	e0 e0       	ldi	r30, 0x00	; 0
     25a:	f1 e0       	ldi	r31, 0x01	; 1
     25c:	80 81       	ld	r24, Z
     25e:	83 ff       	sbrs	r24, 3
     260:	fd cf       	rjmp	.-6      	; 0x25c <pollEncoder1+0x26>
     262:	08 95       	ret

00000264 <listenEncoders>:


void listenEncoders()
{
	//this is where we update the encoder variables.
	pollEncoder0(&encoderAValue);
     264:	87 e1       	ldi	r24, 0x17	; 23
     266:	94 e0       	ldi	r25, 0x04	; 4
     268:	cf df       	rcall	.-98     	; 0x208 <pollEncoder0>
	pollEncoder1(&encoderBValue);
     26a:	81 ed       	ldi	r24, 0xD1	; 209
     26c:	95 e0       	ldi	r25, 0x05	; 5
     26e:	e3 cf       	rjmp	.-58     	; 0x236 <pollEncoder1>
     270:	08 95       	ret

00000272 <initBank>:

#include <avr/io.h>
#include "globalVariables.h"

void initBank()
{
     272:	e0 ec       	ldi	r30, 0xC0	; 192
     274:	f4 e0       	ldi	r31, 0x04	; 4
	for(uint8_t i = 0; i<16; i++)
     276:	80 e0       	ldi	r24, 0x00	; 0
	{
		currentPattern.trackSampleLSB[i] = i+1;
     278:	8f 5f       	subi	r24, 0xFF	; 255
     27a:	81 93       	st	Z+, r24
#include <avr/io.h>
#include "globalVariables.h"

void initBank()
{
	for(uint8_t i = 0; i<16; i++)
     27c:	80 31       	cpi	r24, 0x10	; 16
     27e:	e1 f7       	brne	.-8      	; 0x278 <initBank+0x6>
	{
		currentPattern.trackSampleLSB[i] = i+1;
	}
	
	//assign midi notes C3 to E4
	currentPattern.midiTrackNote[0] = 0x30;
     280:	80 e3       	ldi	r24, 0x30	; 48
     282:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <currentPattern+0x148>
	currentPattern.midiTrackNote[1] = 0x31;
     286:	81 e3       	ldi	r24, 0x31	; 49
     288:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <currentPattern+0x149>
	currentPattern.midiTrackNote[2] = 0x32;
     28c:	82 e3       	ldi	r24, 0x32	; 50
     28e:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <currentPattern+0x14a>
	currentPattern.midiTrackNote[3] = 0x33;
     292:	83 e3       	ldi	r24, 0x33	; 51
     294:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <currentPattern+0x14b>
	currentPattern.midiTrackNote[4] = 0x34;
     298:	84 e3       	ldi	r24, 0x34	; 52
     29a:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <currentPattern+0x14c>
	currentPattern.midiTrackNote[5] = 0x35;
     29e:	85 e3       	ldi	r24, 0x35	; 53
     2a0:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <currentPattern+0x14d>
	currentPattern.midiTrackNote[6] = 0x36;
     2a4:	86 e3       	ldi	r24, 0x36	; 54
     2a6:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <currentPattern+0x14e>
	currentPattern.midiTrackNote[7] = 0x37;
     2aa:	87 e3       	ldi	r24, 0x37	; 55
     2ac:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <currentPattern+0x14f>
	currentPattern.midiTrackNote[8] = 0x38;
     2b0:	88 e3       	ldi	r24, 0x38	; 56
     2b2:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <currentPattern+0x150>
	currentPattern.midiTrackNote[9] = 0x39;
     2b6:	89 e3       	ldi	r24, 0x39	; 57
     2b8:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <currentPattern+0x151>
	currentPattern.midiTrackNote[10] = 0x3a;
     2bc:	8a e3       	ldi	r24, 0x3A	; 58
     2be:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <currentPattern+0x152>
	currentPattern.midiTrackNote[11] = 0x3b;
     2c2:	8b e3       	ldi	r24, 0x3B	; 59
     2c4:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <currentPattern+0x153>
	currentPattern.midiTrackNote[12] = 0x3c;
     2c8:	8c e3       	ldi	r24, 0x3C	; 60
     2ca:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <currentPattern+0x154>
	currentPattern.midiTrackNote[13] = 0x3d;
     2ce:	8d e3       	ldi	r24, 0x3D	; 61
     2d0:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <currentPattern+0x155>
	currentPattern.midiTrackNote[14] = 0x3e;
     2d4:	8e e3       	ldi	r24, 0x3E	; 62
     2d6:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <currentPattern+0x156>
	currentPattern.midiTrackNote[15] = 0x3f;
     2da:	8f e3       	ldi	r24, 0x3F	; 63
     2dc:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <currentPattern+0x157>
     2e0:	08 95       	ret

000002e2 <startADCConversion>:
char envelopeTimePrint[20] = "EnvelopeTimex:xxxxMS";

uint8_t startADCConversion()
{
	
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     2e2:	ea e7       	ldi	r30, 0x7A	; 122
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	80 81       	ld	r24, Z
     2e8:	80 64       	ori	r24, 0x40	; 64
     2ea:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     2ec:	80 81       	ld	r24, Z
     2ee:	86 fd       	sbrc	r24, 6
     2f0:	fd cf       	rjmp	.-6      	; 0x2ec <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.
     2f2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
}
     2f6:	08 95       	ret

000002f8 <initADC>:

void initADC()
{
	DDRE = 0B00111000; //init pins E5, 4, and 3 as select pins on the external mux.
     2f8:	88 e3       	ldi	r24, 0x38	; 56
     2fa:	8d b9       	out	0x0d, r24	; 13
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     2fc:	80 e2       	ldi	r24, 0x20	; 32
     2fe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     302:	87 e8       	ldi	r24, 0x87	; 135
     304:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     308:	88 e0       	ldi	r24, 0x08	; 8
     30a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     30e:	8f ef       	ldi	r24, 0xFF	; 255
     310:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     314:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     318:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <knobBufferCounter>
	startADCConversion();
     31c:	e2 cf       	rjmp	.-60     	; 0x2e2 <startADCConversion>
     31e:	08 95       	ret

00000320 <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     320:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     322:	98 2f       	mov	r25, r24
     324:	96 95       	lsr	r25
     326:	96 95       	lsr	r25
     328:	2f e2       	ldi	r18, 0x2F	; 47
     32a:	92 9f       	mul	r25, r18
     32c:	91 2d       	mov	r25, r1
     32e:	11 24       	eor	r1, r1
     330:	96 95       	lsr	r25
     332:	2c e2       	ldi	r18, 0x2C	; 44
     334:	92 9f       	mul	r25, r18
     336:	80 19       	sub	r24, r0
     338:	11 24       	eor	r1, r1
     33a:	98 2f       	mov	r25, r24
	if(select<40)
     33c:	88 32       	cpi	r24, 0x28	; 40
     33e:	18 f5       	brcc	.+70     	; 0x386 <selectKnob+0x66>
	{
		ADCSRB = (1 << MUX5);
     340:	88 e0       	ldi	r24, 0x08	; 8
     342:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     346:	c9 2f       	mov	r28, r25
     348:	c7 70       	andi	r28, 0x07	; 7
		uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     34a:	96 95       	lsr	r25
     34c:	96 95       	lsr	r25
     34e:	96 95       	lsr	r25
     350:	90 62       	ori	r25, 0x20	; 32
     352:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     356:	c5 df       	rcall	.-118    	; 0x2e2 <startADCConversion>
		//we might need to worry about the delay, but that's fine.
		
		//we put our select0 and select2 pins in the opposite ports, so we need to do some math to fix that.
		//easy stupid fix:
		switch (tempMuxSelect)
     358:	c3 30       	cpi	r28, 0x03	; 3
     35a:	59 f0       	breq	.+22     	; 0x372 <selectKnob+0x52>
     35c:	18 f4       	brcc	.+6      	; 0x364 <selectKnob+0x44>
     35e:	c1 30       	cpi	r28, 0x01	; 1
     360:	31 f0       	breq	.+12     	; 0x36e <selectKnob+0x4e>
     362:	0c c0       	rjmp	.+24     	; 0x37c <selectKnob+0x5c>
     364:	c4 30       	cpi	r28, 0x04	; 4
     366:	39 f0       	breq	.+14     	; 0x376 <selectKnob+0x56>
     368:	c6 30       	cpi	r28, 0x06	; 6
     36a:	39 f0       	breq	.+14     	; 0x37a <selectKnob+0x5a>
     36c:	07 c0       	rjmp	.+14     	; 0x37c <selectKnob+0x5c>
		{
			case 1: muxSelect = 4;
     36e:	c4 e0       	ldi	r28, 0x04	; 4
     370:	05 c0       	rjmp	.+10     	; 0x37c <selectKnob+0x5c>
			break;
			
			case 3:	muxSelect = 6;
     372:	c6 e0       	ldi	r28, 0x06	; 6
			break;
     374:	03 c0       	rjmp	.+6      	; 0x37c <selectKnob+0x5c>
			
			case 4: muxSelect = 1;
     376:	c1 e0       	ldi	r28, 0x01	; 1
			break;
     378:	01 c0       	rjmp	.+2      	; 0x37c <selectKnob+0x5c>
			
			case 6: muxSelect = 3;
     37a:	c3 e0       	ldi	r28, 0x03	; 3
			break;
		}

	//then the external multiplexer
		PORTE = (muxSelect << 3);
     37c:	cc 0f       	add	r28, r28
     37e:	cc 0f       	add	r28, r28
     380:	cc 0f       	add	r28, r28
     382:	ce b9       	out	0x0e, r28	; 14
     384:	20 c0       	rjmp	.+64     	; 0x3c6 <selectKnob+0xa6>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     386:	89 32       	cpi	r24, 0x29	; 41
     388:	71 f0       	breq	.+28     	; 0x3a6 <selectKnob+0x86>
     38a:	18 f4       	brcc	.+6      	; 0x392 <selectKnob+0x72>
     38c:	88 32       	cpi	r24, 0x28	; 40
     38e:	31 f0       	breq	.+12     	; 0x39c <selectKnob+0x7c>
     390:	1a c0       	rjmp	.+52     	; 0x3c6 <selectKnob+0xa6>
     392:	8a 32       	cpi	r24, 0x2A	; 42
     394:	69 f0       	breq	.+26     	; 0x3b0 <selectKnob+0x90>
     396:	8b 32       	cpi	r24, 0x2B	; 43
     398:	81 f0       	breq	.+32     	; 0x3ba <selectKnob+0x9a>
     39a:	15 c0       	rjmp	.+42     	; 0x3c6 <selectKnob+0xa6>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     39c:	85 e2       	ldi	r24, 0x25	; 37
     39e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     3a2:	9f df       	rcall	.-194    	; 0x2e2 <startADCConversion>
		break;
     3a4:	10 c0       	rjmp	.+32     	; 0x3c6 <selectKnob+0xa6>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     3a6:	86 e2       	ldi	r24, 0x26	; 38
     3a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     3ac:	9a df       	rcall	.-204    	; 0x2e2 <startADCConversion>
		break;
     3ae:	0b c0       	rjmp	.+22     	; 0x3c6 <selectKnob+0xa6>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     3b0:	87 e2       	ldi	r24, 0x27	; 39
     3b2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     3b6:	95 df       	rcall	.-214    	; 0x2e2 <startADCConversion>
		break;
     3b8:	06 c0       	rjmp	.+12     	; 0x3c6 <selectKnob+0xa6>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     3ba:	80 e2       	ldi	r24, 0x20	; 32
     3bc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     3c0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     3c4:	8e df       	rcall	.-228    	; 0x2e2 <startADCConversion>
		break;
		}
	
	}
	
}
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <updateKnob>:

void updateKnob(uint8_t select)
{
     3ca:	cf 93       	push	r28
     3cc:	c8 2f       	mov	r28, r24

	knobBuffer[select] = startADCConversion(); 
     3ce:	89 df       	rcall	.-238    	; 0x2e2 <startADCConversion>
     3d0:	ec 2f       	mov	r30, r28
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	ee 58       	subi	r30, 0x8E	; 142
     3d6:	fa 4f       	sbci	r31, 0xFA	; 250
     3d8:	80 83       	st	Z, r24
}
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <interperetKnob>:

void interperetKnob(uint8_t select)
{//this function will compare outputs, and write to our struct.
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
     3e6:	cf 93       	push	r28
	select = select%44;
     3e8:	98 2f       	mov	r25, r24
     3ea:	96 95       	lsr	r25
     3ec:	96 95       	lsr	r25
     3ee:	2f e2       	ldi	r18, 0x2F	; 47
     3f0:	92 9f       	mul	r25, r18
     3f2:	91 2d       	mov	r25, r1
     3f4:	11 24       	eor	r1, r1
     3f6:	96 95       	lsr	r25
     3f8:	2c e2       	ldi	r18, 0x2C	; 44
     3fa:	92 9f       	mul	r25, r18
     3fc:	80 19       	sub	r24, r0
     3fe:	11 24       	eor	r1, r1
     400:	98 2f       	mov	r25, r24
	//we might not need this with the IIR filter
	float volumeDivisor = 3.1875;
	
	
	//Change from FIR filter to IIR filter.
     checkBuffer[select] += ((knobBuffer[select]-checkBuffer[select])/2);
     402:	a8 2f       	mov	r26, r24
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	fd 01       	movw	r30, r26
     408:	ec 55       	subi	r30, 0x5C	; 92
     40a:	fa 4f       	sbci	r31, 0xFA	; 250
     40c:	60 81       	ld	r22, Z
     40e:	fd 01       	movw	r30, r26
     410:	ee 58       	subi	r30, 0x8E	; 142
     412:	fa 4f       	sbci	r31, 0xFA	; 250
     414:	e0 81       	ld	r30, Z
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	e6 1b       	sub	r30, r22
     41a:	f1 09       	sbc	r31, r1
     41c:	af 01       	movw	r20, r30
     41e:	12 f4       	brpl	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     420:	4f 5f       	subi	r20, 0xFF	; 255
     422:	5f 4f       	sbci	r21, 0xFF	; 255
     424:	55 95       	asr	r21
     426:	47 95       	ror	r20
     428:	46 0f       	add	r20, r22
     42a:	ac 55       	subi	r26, 0x5C	; 92
     42c:	ba 4f       	sbci	r27, 0xFA	; 250
     42e:	4c 93       	st	X, r20
	
	
	if (select<40)
     430:	98 32       	cpi	r25, 0x28	; 40
     432:	08 f0       	brcs	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     434:	01 c2       	rjmp	.+1026   	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
	{
		uint8_t positionSelect = select%8;
     436:	c9 2f       	mov	r28, r25
     438:	c7 70       	andi	r28, 0x07	; 7
		uint8_t bankSwitch = select/8;
		switch (bankSwitch)
     43a:	96 95       	lsr	r25
     43c:	96 95       	lsr	r25
     43e:	96 95       	lsr	r25
     440:	92 30       	cpi	r25, 0x02	; 2
     442:	09 f4       	brne	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     444:	d1 c0       	rjmp	.+418    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     446:	30 f4       	brcc	.+12     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     448:	99 23       	and	r25, r25
     44a:	59 f0       	breq	.+22     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     44c:	91 30       	cpi	r25, 0x01	; 1
     44e:	09 f4       	brne	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     450:	8e c0       	rjmp	.+284    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     452:	f2 c1       	rjmp	.+996    	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
     454:	93 30       	cpi	r25, 0x03	; 3
     456:	09 f4       	brne	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     458:	45 c1       	rjmp	.+650    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
     45a:	94 30       	cpi	r25, 0x04	; 4
     45c:	09 f4       	brne	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45e:	5f c1       	rjmp	.+702    	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
     460:	eb c1       	rjmp	.+982    	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
		{
			
			case 0:; //switch cases are "labels", used for goto stuff. so, you have to end the label before declaring variables. should be fine?
			
			int16_t currentOutVoulume = ((currentPattern.outputLevelMSB[positionSelect]<<8)|(currentPattern.outputLevelLSB[positionSelect])); 
     462:	0c 2f       	mov	r16, r28
     464:	10 e0       	ldi	r17, 0x00	; 0
			//this should be a regular integer between -70 and +10
			int16_t negCheckValue = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     466:	64 2f       	mov	r22, r20
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	b8 d7       	rcall	.+3952   	; 0x13e0 <__floatsisf>
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	4c e4       	ldi	r20, 0x4C	; 76
     476:	50 e4       	ldi	r21, 0x40	; 64
     478:	18 d7       	rcall	.+3632   	; 0x12aa <__divsf3>
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	4c e8       	ldi	r20, 0x8C	; 140
     480:	52 e4       	ldi	r21, 0x42	; 66
     482:	ae d6       	rcall	.+3420   	; 0x11e0 <__subsf3>
     484:	7a d7       	rcall	.+3828   	; 0x137a <__fixsfsi>
     486:	86 2f       	mov	r24, r22
     488:	97 2f       	mov	r25, r23
     48a:	9c 01       	movw	r18, r24
		switch (bankSwitch)
		{
			
			case 0:; //switch cases are "labels", used for goto stuff. so, you have to end the label before declaring variables. should be fine?
			
			int16_t currentOutVoulume = ((currentPattern.outputLevelMSB[positionSelect]<<8)|(currentPattern.outputLevelLSB[positionSelect])); 
     48c:	f8 01       	movw	r30, r16
     48e:	e8 5e       	subi	r30, 0xE8	; 232
     490:	fb 4f       	sbci	r31, 0xFB	; 251
			//this should be a regular integer between -70 and +10
			int16_t negCheckValue = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentOutVoulume!=negCheckValue)
     492:	80 81       	ld	r24, Z
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	98 2f       	mov	r25, r24
     498:	88 27       	eor	r24, r24
     49a:	40 85       	ldd	r20, Z+8	; 0x08
     49c:	84 2b       	or	r24, r20
     49e:	82 17       	cp	r24, r18
     4a0:	93 07       	cpc	r25, r19
     4a2:	09 f4       	brne	.+2      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4a4:	c9 c1       	rjmp	.+914    	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
			{
				currentPattern.outputLevelLSB[positionSelect] = (negCheckValue);
     4a6:	f8 01       	movw	r30, r16
     4a8:	e8 5e       	subi	r30, 0xE8	; 232
     4aa:	fb 4f       	sbci	r31, 0xFB	; 251
     4ac:	60 87       	std	Z+8, r22	; 0x08
				if(negCheckValue>(-1))
     4ae:	33 23       	and	r19, r19
     4b0:	64 f1       	brlt	.+88     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
				{
					currentPattern.outputLevelMSB[positionSelect] = 0;
     4b2:	f8 01       	movw	r30, r16
     4b4:	e8 5e       	subi	r30, 0xE8	; 232
     4b6:	fb 4f       	sbci	r31, 0xFB	; 251
     4b8:	10 82       	st	Z, r1
					//just hard coding this for now until we make a function.
					outVolumePrint[14] = 48;
     4ba:	e0 e5       	ldi	r30, 0x50	; 80
     4bc:	f2 e0       	ldi	r31, 0x02	; 2
     4be:	80 e3       	ldi	r24, 0x30	; 48
     4c0:	86 87       	std	Z+14, r24	; 0x0e
					outVolumePrint[16] = (currentPattern.outputLevelLSB[positionSelect]%10)+48;
     4c2:	2d ec       	ldi	r18, 0xCD	; 205
     4c4:	62 9f       	mul	r22, r18
     4c6:	81 2d       	mov	r24, r1
     4c8:	11 24       	eor	r1, r1
     4ca:	86 95       	lsr	r24
     4cc:	86 95       	lsr	r24
     4ce:	86 95       	lsr	r24
     4d0:	88 0f       	add	r24, r24
     4d2:	98 2f       	mov	r25, r24
     4d4:	99 0f       	add	r25, r25
     4d6:	99 0f       	add	r25, r25
     4d8:	89 0f       	add	r24, r25
     4da:	96 2f       	mov	r25, r22
     4dc:	98 1b       	sub	r25, r24
     4de:	89 2f       	mov	r24, r25
     4e0:	80 5d       	subi	r24, 0xD0	; 208
     4e2:	80 8b       	std	Z+16, r24	; 0x10
					outVolumePrint[15] = ((currentPattern.outputLevelLSB[positionSelect]%100)/10)+48;
     4e4:	89 e2       	ldi	r24, 0x29	; 41
     4e6:	68 9f       	mul	r22, r24
     4e8:	81 2d       	mov	r24, r1
     4ea:	11 24       	eor	r1, r1
     4ec:	82 95       	swap	r24
     4ee:	8f 70       	andi	r24, 0x0F	; 15
     4f0:	94 e6       	ldi	r25, 0x64	; 100
     4f2:	89 9f       	mul	r24, r25
     4f4:	60 19       	sub	r22, r0
     4f6:	11 24       	eor	r1, r1
     4f8:	62 9f       	mul	r22, r18
     4fa:	61 2d       	mov	r22, r1
     4fc:	11 24       	eor	r1, r1
     4fe:	66 95       	lsr	r22
     500:	66 95       	lsr	r22
     502:	66 95       	lsr	r22
     504:	60 5d       	subi	r22, 0xD0	; 208
     506:	67 87       	std	Z+15, r22	; 0x0f
     508:	20 c0       	rjmp	.+64     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
				}else
				{
					currentPattern.outputLevelMSB[positionSelect] = 255;
     50a:	8f ef       	ldi	r24, 0xFF	; 255
     50c:	f8 01       	movw	r30, r16
     50e:	e8 5e       	subi	r30, 0xE8	; 232
     510:	fb 4f       	sbci	r31, 0xFB	; 251
     512:	80 83       	st	Z, r24
					outVolumePrint[14] = '-';
     514:	e0 e5       	ldi	r30, 0x50	; 80
     516:	f2 e0       	ldi	r31, 0x02	; 2
     518:	8d e2       	ldi	r24, 0x2D	; 45
     51a:	86 87       	std	Z+14, r24	; 0x0e
					outVolumePrint[15] = ((((currentPattern.outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     51c:	60 95       	com	r22
     51e:	26 2f       	mov	r18, r22
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	2f 5f       	subi	r18, 0xFF	; 255
     524:	3f 4f       	sbci	r19, 0xFF	; 255
     526:	c9 01       	movw	r24, r18
     528:	64 e6       	ldi	r22, 0x64	; 100
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	e5 d7       	rcall	.+4042   	; 0x14f8 <__divmodhi4>
     52e:	0f 2e       	mov	r0, r31
     530:	fa e0       	ldi	r31, 0x0A	; 10
     532:	ef 2e       	mov	r14, r31
     534:	f1 2c       	mov	r15, r1
     536:	f0 2d       	mov	r31, r0
     538:	b7 01       	movw	r22, r14
     53a:	de d7       	rcall	.+4028   	; 0x14f8 <__divmodhi4>
     53c:	60 5d       	subi	r22, 0xD0	; 208
					outVolumePrint[16] = (((currentPattern.outputLevelLSB[positionSelect]^255)+1)%10)+48;
     53e:	67 87       	std	Z+15, r22	; 0x0f
     540:	c9 01       	movw	r24, r18
     542:	b7 01       	movw	r22, r14
     544:	d9 d7       	rcall	.+4018   	; 0x14f8 <__divmodhi4>
     546:	80 5d       	subi	r24, 0xD0	; 208
     548:	80 8b       	std	Z+16, r24	; 0x10
				}
				//then output to screen. 
				outVolumePrint[10] = positionSelect + 49;
     54a:	cf 5c       	subi	r28, 0xCF	; 207
     54c:	c0 93 5a 02 	sts	0x025A, r28	; 0x80025a <outVolumePrint+0xa>
				outputS(outVolumePrint, 3);
     550:	63 e0       	ldi	r22, 0x03	; 3
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 e5       	ldi	r24, 0x50	; 80
     556:	92 e0       	ldi	r25, 0x02	; 2
     558:	30 d3       	rcall	.+1632   	; 0xbba <outputS>
				setOutputVolume(currentPattern.outputLevelLSB[positionSelect], currentPattern.outputLevelMSB[positionSelect], positionSelect);
     55a:	f8 01       	movw	r30, r16
     55c:	e8 5e       	subi	r30, 0xE8	; 232
     55e:	fb 4f       	sbci	r31, 0xFB	; 251
     560:	60 81       	ld	r22, Z
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	80 85       	ldd	r24, Z+8	; 0x08
     566:	a8 01       	movw	r20, r16
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	d0 d5       	rcall	.+2976   	; 0x110c <setOutputVolume>
     56c:	65 c1       	rjmp	.+714    	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
			}
			break;
			
 			case 1:
 			if(currentPattern.outputPitch[positionSelect]!=(checkBuffer[select]^128))
     56e:	0c 2f       	mov	r16, r28
     570:	10 e0       	ldi	r17, 0x00	; 0
     572:	60 e8       	ldi	r22, 0x80	; 128
     574:	64 0f       	add	r22, r20
     576:	f8 01       	movw	r30, r16
     578:	e8 5e       	subi	r30, 0xE8	; 232
     57a:	fb 4f       	sbci	r31, 0xFB	; 251
     57c:	80 89       	ldd	r24, Z+16	; 0x10
     57e:	86 17       	cp	r24, r22
     580:	09 f4       	brne	.+2      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     582:	5a c1       	rjmp	.+692    	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
 			{
 				(currentPattern.outputPitch[positionSelect]) = (checkBuffer[select]^128);
     584:	f8 01       	movw	r30, r16
     586:	e8 5e       	subi	r30, 0xE8	; 232
     588:	fb 4f       	sbci	r31, 0xFB	; 251
     58a:	60 8b       	std	Z+16, r22	; 0x10
				 if(encoderAValue == 0)
     58c:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <encoderAValue>
     590:	81 11       	cpse	r24, r1
     592:	20 c0       	rjmp	.+64     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
				 {
					 pitchPrint[5] = (positionSelect+49);
     594:	cf 5c       	subi	r28, 0xCF	; 207
     596:	c0 93 69 02 	sts	0x0269, r28	; 0x800269 <pitchPrint+0x5>
					 if(currentPattern.outputPitch[positionSelect]>>7)
     59a:	66 23       	and	r22, r22
     59c:	64 f4       	brge	.+24     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
					 {
						 //again, hard coding.
						 pitchPrint[7] = '-';
     59e:	8d e2       	ldi	r24, 0x2D	; 45
     5a0:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pitchPrint+0x7>
						 numPrinter(pitchPrint, 8, 3, (currentPattern.outputPitch[positionSelect]^255));
     5a4:	26 2f       	mov	r18, r22
     5a6:	20 95       	com	r18
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	43 e0       	ldi	r20, 0x03	; 3
     5ac:	68 e0       	ldi	r22, 0x08	; 8
     5ae:	84 e6       	ldi	r24, 0x64	; 100
     5b0:	92 e0       	ldi	r25, 0x02	; 2
     5b2:	1b d3       	rcall	.+1590   	; 0xbea <numPrinter>
     5b4:	0a c0       	rjmp	.+20     	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
					 
					 }else{
						 pitchPrint[7] = '+';
     5b6:	8b e2       	ldi	r24, 0x2B	; 43
     5b8:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pitchPrint+0x7>
					 numPrinter(pitchPrint,8,3,currentPattern.outputPitch[positionSelect]);}
     5bc:	26 2f       	mov	r18, r22
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	43 e0       	ldi	r20, 0x03	; 3
     5c2:	68 e0       	ldi	r22, 0x08	; 8
     5c4:	84 e6       	ldi	r24, 0x64	; 100
     5c6:	92 e0       	ldi	r25, 0x02	; 2
					 outputS(pitchPrint, 3);
     5c8:	10 d3       	rcall	.+1568   	; 0xbea <numPrinter>
     5ca:	63 e0       	ldi	r22, 0x03	; 3
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	84 e6       	ldi	r24, 0x64	; 100
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	f3 d2       	rcall	.+1510   	; 0xbba <outputS>
				 }
				 outputSampleRate(positionSelect, 0, currentPattern.outputPitch[positionSelect]);
     5d4:	f8 01       	movw	r30, r16
     5d6:	e8 5e       	subi	r30, 0xE8	; 232
     5d8:	fb 4f       	sbci	r31, 0xFB	; 251
     5da:	40 89       	ldd	r20, Z+16	; 0x10
     5dc:	50 e0       	ldi	r21, 0x00	; 0
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	c8 01       	movw	r24, r16
     5e4:	da d5       	rcall	.+2996   	; 0x119a <outputSampleRate>
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     5e6:	28 c1       	rjmp	.+592    	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
     5e8:	0c 2f       	mov	r16, r28
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     5ea:	10 e0       	ldi	r17, 0x00	; 0
     5ec:	64 2f       	mov	r22, r20
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	f5 d6       	rcall	.+3562   	; 0x13e0 <__floatsisf>
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	4c e4       	ldi	r20, 0x4C	; 76
     5fc:	50 e4       	ldi	r21, 0x40	; 64
     5fe:	55 d6       	rcall	.+3242   	; 0x12aa <__divsf3>
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	4c e8       	ldi	r20, 0x8C	; 140
     606:	52 e4       	ldi	r21, 0x42	; 66
     608:	eb d5       	rcall	.+3030   	; 0x11e0 <__subsf3>
     60a:	b7 d6       	rcall	.+3438   	; 0x137a <__fixsfsi>
     60c:	86 2f       	mov	r24, r22
     60e:	97 2f       	mov	r25, r23
     610:	9c 01       	movw	r18, r24
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     612:	a8 01       	movw	r20, r16
     614:	48 5e       	subi	r20, 0xE8	; 232
     616:	5b 4f       	sbci	r21, 0xFB	; 251
     618:	fa 01       	movw	r30, r20
     61a:	e8 5b       	subi	r30, 0xB8	; 184
     61c:	ff 4f       	sbci	r31, 0xFF	; 255
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentEnvelopeVolume!=negCheckValueEnvelope)
     61e:	80 81       	ld	r24, Z
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	98 2f       	mov	r25, r24
     624:	88 27       	eor	r24, r24
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     626:	70 96       	adiw	r30, 0x10	; 16
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentEnvelopeVolume!=negCheckValueEnvelope)
     628:	40 81       	ld	r20, Z
     62a:	84 2b       	or	r24, r20
     62c:	82 17       	cp	r24, r18
     62e:	93 07       	cpc	r25, r19
     630:	09 f4       	brne	.+2      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
     632:	02 c1       	rjmp	.+516    	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
			{
				currentPattern.trackFadeGainLSB[positionSelect] = (negCheckValueEnvelope);
     634:	f8 01       	movw	r30, r16
     636:	e0 59       	subi	r30, 0x90	; 144
     638:	fb 4f       	sbci	r31, 0xFB	; 251
     63a:	60 83       	st	Z, r22
				if(negCheckValueEnvelope>(-1))
     63c:	33 23       	and	r19, r19
     63e:	64 f1       	brlt	.+88     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
				{
					currentPattern.trackFadeGainMSB[positionSelect] = 0;
     640:	f8 01       	movw	r30, r16
     642:	e0 5a       	subi	r30, 0xA0	; 160
     644:	fb 4f       	sbci	r31, 0xFB	; 251
     646:	10 82       	st	Z, r1
					//just hard coding this for now until we make a function.
					envelopeLevelPrint[15] = 48;
     648:	e8 e2       	ldi	r30, 0x28	; 40
     64a:	f2 e0       	ldi	r31, 0x02	; 2
     64c:	80 e3       	ldi	r24, 0x30	; 48
     64e:	87 87       	std	Z+15, r24	; 0x0f
					envelopeLevelPrint[17] = (currentPattern.trackFadeGainLSB[positionSelect]%10)+48;
     650:	2d ec       	ldi	r18, 0xCD	; 205
     652:	62 9f       	mul	r22, r18
     654:	81 2d       	mov	r24, r1
     656:	11 24       	eor	r1, r1
     658:	86 95       	lsr	r24
     65a:	86 95       	lsr	r24
     65c:	86 95       	lsr	r24
     65e:	88 0f       	add	r24, r24
     660:	98 2f       	mov	r25, r24
     662:	99 0f       	add	r25, r25
     664:	99 0f       	add	r25, r25
     666:	89 0f       	add	r24, r25
     668:	96 2f       	mov	r25, r22
     66a:	98 1b       	sub	r25, r24
     66c:	89 2f       	mov	r24, r25
     66e:	80 5d       	subi	r24, 0xD0	; 208
     670:	81 8b       	std	Z+17, r24	; 0x11
					envelopeLevelPrint[16] = ((currentPattern.trackFadeGainLSB[positionSelect]%100)/10)+48;
     672:	89 e2       	ldi	r24, 0x29	; 41
     674:	68 9f       	mul	r22, r24
     676:	81 2d       	mov	r24, r1
     678:	11 24       	eor	r1, r1
     67a:	82 95       	swap	r24
     67c:	8f 70       	andi	r24, 0x0F	; 15
     67e:	94 e6       	ldi	r25, 0x64	; 100
     680:	89 9f       	mul	r24, r25
     682:	60 19       	sub	r22, r0
     684:	11 24       	eor	r1, r1
     686:	62 9f       	mul	r22, r18
     688:	61 2d       	mov	r22, r1
     68a:	11 24       	eor	r1, r1
     68c:	66 95       	lsr	r22
     68e:	66 95       	lsr	r22
     690:	66 95       	lsr	r22
     692:	60 5d       	subi	r22, 0xD0	; 208
     694:	60 8b       	std	Z+16, r22	; 0x10
     696:	1d c0       	rjmp	.+58     	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
				}else
				{
					currentPattern.trackFadeGainMSB[positionSelect] = 255;
     698:	f8 01       	movw	r30, r16
     69a:	e0 5a       	subi	r30, 0xA0	; 160
     69c:	fb 4f       	sbci	r31, 0xFB	; 251
     69e:	8f ef       	ldi	r24, 0xFF	; 255
     6a0:	80 83       	st	Z, r24
					envelopeLevelPrint[15] = '-';
     6a2:	e8 e2       	ldi	r30, 0x28	; 40
     6a4:	f2 e0       	ldi	r31, 0x02	; 2
     6a6:	8d e2       	ldi	r24, 0x2D	; 45
					envelopeLevelPrint[16] = ((((currentPattern.trackFadeGainLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     6a8:	87 87       	std	Z+15, r24	; 0x0f
     6aa:	60 95       	com	r22
     6ac:	26 2f       	mov	r18, r22
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	2f 5f       	subi	r18, 0xFF	; 255
     6b2:	3f 4f       	sbci	r19, 0xFF	; 255
     6b4:	c9 01       	movw	r24, r18
     6b6:	64 e6       	ldi	r22, 0x64	; 100
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	1e d7       	rcall	.+3644   	; 0x14f8 <__divmodhi4>
     6bc:	0a e0       	ldi	r16, 0x0A	; 10
     6be:	10 e0       	ldi	r17, 0x00	; 0
     6c0:	b8 01       	movw	r22, r16
     6c2:	1a d7       	rcall	.+3636   	; 0x14f8 <__divmodhi4>
     6c4:	60 5d       	subi	r22, 0xD0	; 208
					envelopeLevelPrint[17] = (((currentPattern.trackFadeGainLSB[positionSelect]^255)+1)%10)+48;
     6c6:	60 8b       	std	Z+16, r22	; 0x10
     6c8:	c9 01       	movw	r24, r18
     6ca:	b8 01       	movw	r22, r16
     6cc:	15 d7       	rcall	.+3626   	; 0x14f8 <__divmodhi4>
     6ce:	80 5d       	subi	r24, 0xD0	; 208
     6d0:	81 8b       	std	Z+17, r24	; 0x11
				}
				//then output to screen.
				envelopeLevelPrint[13] = positionSelect + 49;
     6d2:	cf 5c       	subi	r28, 0xCF	; 207
     6d4:	c0 93 35 02 	sts	0x0235, r28	; 0x800235 <envelopeLevelPrint+0xd>
				outputS(envelopeLevelPrint, 3);
     6d8:	63 e0       	ldi	r22, 0x03	; 3
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	88 e2       	ldi	r24, 0x28	; 40
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	6c d2       	rcall	.+1240   	; 0xbba <outputS>
     6e2:	aa c0       	rjmp	.+340    	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
     6e4:	8c 2f       	mov	r24, r28
				//nothing to "set", since envelopes are triggered after a sound is playing.
			}
			break;
 			
 			case 3:
 			if(currentPattern.trackFadeTimeMSB[positionSelect]!=checkBuffer[select])
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	fc 01       	movw	r30, r24
     6ea:	e0 58       	subi	r30, 0x80	; 128
     6ec:	fb 4f       	sbci	r31, 0xFB	; 251
     6ee:	20 81       	ld	r18, Z
     6f0:	42 17       	cp	r20, r18
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
     6f4:	a1 c0       	rjmp	.+322    	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
 			{
 				(currentPattern.trackFadeTimeMSB[positionSelect]) = checkBuffer[select];
     6f6:	fc 01       	movw	r30, r24
     6f8:	e0 58       	subi	r30, 0x80	; 128
     6fa:	fb 4f       	sbci	r31, 0xFB	; 251
				 numPrinter(envelopeTimePrint,14,4,currentPattern.trackFadeTimeMSB[positionSelect]);
     6fc:	40 83       	st	Z, r20
     6fe:	24 2f       	mov	r18, r20
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	44 e0       	ldi	r20, 0x04	; 4
     704:	6e e0       	ldi	r22, 0x0E	; 14
     706:	84 e1       	ldi	r24, 0x14	; 20
     708:	92 e0       	ldi	r25, 0x02	; 2
				 envelopeTimePrint[12] = positionSelect+49;
     70a:	6f d2       	rcall	.+1246   	; 0xbea <numPrinter>
     70c:	cf 5c       	subi	r28, 0xCF	; 207
     70e:	c0 93 20 02 	sts	0x0220, r28	; 0x800220 <envelopeTimePrint+0xc>
				 outputS(envelopeTimePrint, 3);
     712:	63 e0       	ldi	r22, 0x03	; 3
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	84 e1       	ldi	r24, 0x14	; 20
     718:	92 e0       	ldi	r25, 0x02	; 2
 			}
 			break;
 			
 			case 4:;
 			int16_t currentTrackVolume = ((currentPattern.trackMainVolumeMSB[positionSelect]<<8)|(currentPattern.trackMainVolumeLSB[positionSelect]));
     71a:	4f d2       	rcall	.+1182   	; 0xbba <outputS>
     71c:	8d c0       	rjmp	.+282    	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
 			int16_t negCheckValueTrack = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     71e:	0c 2f       	mov	r16, r28
     720:	10 e0       	ldi	r17, 0x00	; 0
     722:	64 2f       	mov	r22, r20
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	5a d6       	rcall	.+3252   	; 0x13e0 <__floatsisf>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	4c e4       	ldi	r20, 0x4C	; 76
     732:	50 e4       	ldi	r21, 0x40	; 64
     734:	ba d5       	rcall	.+2932   	; 0x12aa <__divsf3>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	4c e8       	ldi	r20, 0x8C	; 140
     73c:	52 e4       	ldi	r21, 0x42	; 66
     73e:	50 d5       	rcall	.+2720   	; 0x11e0 <__subsf3>
     740:	1c d6       	rcall	.+3128   	; 0x137a <__fixsfsi>
     742:	86 2f       	mov	r24, r22
     744:	97 2f       	mov	r25, r23
     746:	9c 01       	movw	r18, r24
     748:	f8 01       	movw	r30, r16
     74a:	e8 5e       	subi	r30, 0xE8	; 232
				 outputS(envelopeTimePrint, 3);
 			}
 			break;
 			
 			case 4:;
 			int16_t currentTrackVolume = ((currentPattern.trackMainVolumeMSB[positionSelect]<<8)|(currentPattern.trackMainVolumeLSB[positionSelect]));
     74c:	fb 4f       	sbci	r31, 0xFB	; 251
     74e:	80 a5       	ldd	r24, Z+40	; 0x28
     750:	90 e0       	ldi	r25, 0x00	; 0
 			int16_t negCheckValueTrack = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
 			if(currentTrackVolume!=negCheckValueTrack)
     752:	98 2f       	mov	r25, r24
     754:	88 27       	eor	r24, r24
     756:	40 ad       	ldd	r20, Z+56	; 0x38
     758:	84 2b       	or	r24, r20
     75a:	82 17       	cp	r24, r18
     75c:	93 07       	cpc	r25, r19
     75e:	09 f4       	brne	.+2      	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
     760:	6b c0       	rjmp	.+214    	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
     762:	f8 01       	movw	r30, r16
     764:	e8 5e       	subi	r30, 0xE8	; 232
 			{
	 			currentPattern.trackMainVolumeLSB[positionSelect] = (negCheckValueTrack);
     766:	fb 4f       	sbci	r31, 0xFB	; 251
     768:	60 af       	std	Z+56, r22	; 0x38
     76a:	33 23       	and	r19, r19
     76c:	64 f1       	brlt	.+88     	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
	 			if(negCheckValueTrack>(-1))
     76e:	f8 01       	movw	r30, r16
     770:	e8 5e       	subi	r30, 0xE8	; 232
	 			{
		 			currentPattern.trackMainVolumeMSB[positionSelect] = 0;
     772:	fb 4f       	sbci	r31, 0xFB	; 251
     774:	10 a6       	std	Z+40, r1	; 0x28
     776:	ec e3       	ldi	r30, 0x3C	; 60
     778:	f2 e0       	ldi	r31, 0x02	; 2
		 			//just hard coding this for now until we make a function.
		 			trackVolumePrint[15] = 48;
     77a:	80 e3       	ldi	r24, 0x30	; 48
     77c:	87 87       	std	Z+15, r24	; 0x0f
     77e:	2d ec       	ldi	r18, 0xCD	; 205
     780:	62 9f       	mul	r22, r18
		 			trackVolumePrint[17] = (currentPattern.trackMainVolumeLSB[positionSelect]%10)+48;
     782:	81 2d       	mov	r24, r1
     784:	11 24       	eor	r1, r1
     786:	86 95       	lsr	r24
     788:	86 95       	lsr	r24
     78a:	86 95       	lsr	r24
     78c:	88 0f       	add	r24, r24
     78e:	98 2f       	mov	r25, r24
     790:	99 0f       	add	r25, r25
     792:	99 0f       	add	r25, r25
     794:	89 0f       	add	r24, r25
     796:	96 2f       	mov	r25, r22
     798:	98 1b       	sub	r25, r24
     79a:	89 2f       	mov	r24, r25
     79c:	80 5d       	subi	r24, 0xD0	; 208
     79e:	81 8b       	std	Z+17, r24	; 0x11
     7a0:	89 e2       	ldi	r24, 0x29	; 41
     7a2:	68 9f       	mul	r22, r24
		 			trackVolumePrint[16] = ((currentPattern.trackMainVolumeLSB[positionSelect]%100)/10)+48;
     7a4:	81 2d       	mov	r24, r1
     7a6:	11 24       	eor	r1, r1
     7a8:	82 95       	swap	r24
     7aa:	8f 70       	andi	r24, 0x0F	; 15
     7ac:	94 e6       	ldi	r25, 0x64	; 100
     7ae:	89 9f       	mul	r24, r25
     7b0:	60 19       	sub	r22, r0
     7b2:	11 24       	eor	r1, r1
     7b4:	62 9f       	mul	r22, r18
     7b6:	61 2d       	mov	r22, r1
     7b8:	11 24       	eor	r1, r1
     7ba:	66 95       	lsr	r22
     7bc:	66 95       	lsr	r22
     7be:	66 95       	lsr	r22
     7c0:	60 5d       	subi	r22, 0xD0	; 208
     7c2:	60 8b       	std	Z+16, r22	; 0x10
     7c4:	20 c0       	rjmp	.+64     	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
	 			}else
	 			{
		 			currentPattern.trackMainVolumeMSB[positionSelect] = 255;
     7c8:	f8 01       	movw	r30, r16
     7ca:	e8 5e       	subi	r30, 0xE8	; 232
     7cc:	fb 4f       	sbci	r31, 0xFB	; 251
     7ce:	80 a7       	std	Z+40, r24	; 0x28
		 			trackVolumePrint[15] = '-';
     7d0:	ec e3       	ldi	r30, 0x3C	; 60
     7d2:	f2 e0       	ldi	r31, 0x02	; 2
     7d4:	8d e2       	ldi	r24, 0x2D	; 45
		 			trackVolumePrint[16] = ((((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     7d6:	87 87       	std	Z+15, r24	; 0x0f
     7d8:	60 95       	com	r22
     7da:	26 2f       	mov	r18, r22
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	2f 5f       	subi	r18, 0xFF	; 255
     7e0:	3f 4f       	sbci	r19, 0xFF	; 255
     7e2:	c9 01       	movw	r24, r18
     7e4:	64 e6       	ldi	r22, 0x64	; 100
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	87 d6       	rcall	.+3342   	; 0x14f8 <__divmodhi4>
     7ea:	0f 2e       	mov	r0, r31
     7ec:	fa e0       	ldi	r31, 0x0A	; 10
     7ee:	ef 2e       	mov	r14, r31
     7f0:	f1 2c       	mov	r15, r1
     7f2:	f0 2d       	mov	r31, r0
     7f4:	b7 01       	movw	r22, r14
     7f6:	80 d6       	rcall	.+3328   	; 0x14f8 <__divmodhi4>
     7f8:	60 5d       	subi	r22, 0xD0	; 208
     7fa:	60 8b       	std	Z+16, r22	; 0x10
		 			trackVolumePrint[17] = (((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
     7fc:	c9 01       	movw	r24, r18
     7fe:	b7 01       	movw	r22, r14
     800:	7b d6       	rcall	.+3318   	; 0x14f8 <__divmodhi4>
     802:	80 5d       	subi	r24, 0xD0	; 208
     804:	81 8b       	std	Z+17, r24	; 0x11
	 			}
	 			//then output to screen.
	 			trackVolumePrint[11] = positionSelect + 49;
     806:	cf 5c       	subi	r28, 0xCF	; 207
     808:	c0 93 47 02 	sts	0x0247, r28	; 0x800247 <trackVolumePrint+0xb>
	 			outputS(trackVolumePrint, 3);
     80c:	63 e0       	ldi	r22, 0x03	; 3
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	8c e3       	ldi	r24, 0x3C	; 60
     812:	92 e0       	ldi	r25, 0x02	; 2
     814:	d2 d1       	rcall	.+932    	; 0xbba <outputS>
     816:	f8 01       	movw	r30, r16
	 			setTrackVolume(currentPattern.trackSampleLSB[positionSelect], currentPattern.trackSampleMSB[positionSelect],
				 currentPattern.trackMainVolumeLSB[positionSelect], currentPattern.trackMainVolumeMSB[positionSelect]);
     818:	e8 5e       	subi	r30, 0xE8	; 232
     81a:	fb 4f       	sbci	r31, 0xFB	; 251
     81c:	20 a5       	ldd	r18, Z+40	; 0x28
		 			trackVolumePrint[17] = (((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
	 			}
	 			//then output to screen.
	 			trackVolumePrint[11] = positionSelect + 49;
	 			outputS(trackVolumePrint, 3);
	 			setTrackVolume(currentPattern.trackSampleLSB[positionSelect], currentPattern.trackSampleMSB[positionSelect],
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 ad       	ldd	r20, Z+56	; 0x38
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	df 01       	movw	r26, r30
     826:	a8 56       	subi	r26, 0x68	; 104
     828:	bf 4f       	sbci	r27, 0xFF	; 255
     82a:	6c 91       	ld	r22, X
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	e8 55       	subi	r30, 0x58	; 88
     830:	ff 4f       	sbci	r31, 0xFF	; 255
     832:	80 81       	ld	r24, Z
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	8d d4       	rcall	.+2330   	; 0x1152 <setTrackVolume>
     838:	cf 91       	pop	r28
     83a:	1f 91       	pop	r17
// 			break;
		}
		
	}

}
     83c:	0f 91       	pop	r16
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	08 95       	ret

00000844 <listenKnobs>:
     844:	cf 93       	push	r28
     846:	c0 e0       	ldi	r28, 0x00	; 0

void listenKnobs()
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
	{
		selectKnob(loopCounter);
     848:	8c 2f       	mov	r24, r28
     84a:	6a dd       	rcall	.-1324   	; 0x320 <selectKnob>
		updateKnob(loopCounter);
     84c:	8c 2f       	mov	r24, r28
     84e:	bd dd       	rcall	.-1158   	; 0x3ca <updateKnob>
		interperetKnob(loopCounter);
     850:	8c 2f       	mov	r24, r28
     852:	c5 dd       	rcall	.-1142   	; 0x3de <interperetKnob>
     854:	cf 5f       	subi	r28, 0xFF	; 255

}

void listenKnobs()
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     856:	cc 32       	cpi	r28, 0x2C	; 44
     858:	b9 f7       	brne	.-18     	; 0x848 <listenKnobs+0x4>
     85a:	cf 91       	pop	r28
		updateKnob(loopCounter);
		interperetKnob(loopCounter);
	}


}
     85c:	08 95       	ret

0000085e <initLEDs>:
#include <avr/io.h>
#include "globalVariables.h"

void initLEDs()
{
	DDRG = 0B00100101; //outputs on G5,2, and 0.
     85e:	85 e2       	ldi	r24, 0x25	; 37
     860:	83 bb       	out	0x13, r24	; 19
     862:	08 95       	ret

00000864 <updateLEDs>:

}

void updateLEDs()
{
	uint16_t trigLEDParse = currentTrigButtons;
     864:	20 91 9e 05 	lds	r18, 0x059E	; 0x80059e <currentTrigButtons>
     868:	30 91 9f 05 	lds	r19, 0x059F	; 0x80059f <currentTrigButtons+0x1>
	PORTG &= (~(1 << PG2)); //set latch low for data input
     86c:	a2 98       	cbi	0x14, 2	; 20
     86e:	81 e1       	ldi	r24, 0x11	; 17
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
     870:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
     872:	33 23       	and	r19, r19
     874:	14 f4       	brge	.+4      	; 0x87a <updateLEDs+0x16>
		{
			PORTG |= (1 << PG5); //send current 1's place bit to the data pin 
     876:	a5 9a       	sbi	0x14, 5	; 20
     878:	01 c0       	rjmp	.+2      	; 0x87c <updateLEDs+0x18>
		}
		else
		{
			PORTG &= (~(1 << PG5));
     87a:	a5 98       	cbi	0x14, 5	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
     87c:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
     87e:	22 0f       	add	r18, r18
     880:	33 1f       	adc	r19, r19
     882:	81 50       	subi	r24, 0x01	; 1

void updateLEDs()
{
	uint16_t trigLEDParse = currentTrigButtons;
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t i = 0; i<17; i++)
     884:	a9 f7       	brne	.-22     	; 0x870 <updateLEDs+0xc>
			PORTG &= (~(1 << PG5));
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	PORTG |= (1 << PG2); //latch pin high
     886:	a2 9a       	sbi	0x14, 2	; 20
     888:	08 95       	ret

0000088a <main>:
#include <avr/interrupt.h>


int main(void)
{
	midiChannel = 0; //for now, need to change this from load memory
     88a:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <midiChannel>
	initScreen();
     88e:	38 d1       	rcall	.+624    	; 0xb00 <initScreen>
	initButtons();
     890:	4a dc       	rcall	.-1900   	; 0x126 <initButtons>
	initLEDs();
     892:	e5 df       	rcall	.-54     	; 0x85e <initLEDs>
	initEncoders();
     894:	b5 dc       	rcall	.-1686   	; 0x200 <initEncoders>
	initMenu();
     896:	11 d0       	rcall	.+34     	; 0x8ba <initMenu>
	initADC();
     898:	2f dd       	rcall	.-1442   	; 0x2f8 <initADC>
	serialInit0();
     89a:	e8 d3       	rcall	.+2000   	; 0x106c <serialInit0>
	sei();
	initBank(); //this will be necessary on first startup, but maybe not in the actual program? maybe just something handy to have.
     89c:	78 94       	sei
	//loadMemory(); //we need to load in the first struct in locarion 0 of our eeprom.
	while (1)
	{
		listenTrigButtons();
     89e:	e9 dc       	rcall	.-1582   	; 0x272 <initBank>
		listenMidi();
     8a0:	49 dc       	rcall	.-1902   	; 0x134 <listenTrigButtons>
		listenGPButtons();
     8a2:	8b d0       	rcall	.+278    	; 0x9ba <listenMidi>
     8a4:	ac dc       	rcall	.-1704   	; 0x1fe <listenGPButtons>
		listenMidi();
     8a6:	89 d0       	rcall	.+274    	; 0x9ba <listenMidi>
     8a8:	dd df       	rcall	.-70     	; 0x864 <updateLEDs>
		updateLEDs();
     8aa:	87 d0       	rcall	.+270    	; 0x9ba <listenMidi>
     8ac:	db dc       	rcall	.-1610   	; 0x264 <listenEncoders>
		listenMidi();
     8ae:	85 d0       	rcall	.+266    	; 0x9ba <listenMidi>
     8b0:	c9 df       	rcall	.-110    	; 0x844 <listenKnobs>
		listenEncoders();
     8b2:	83 d0       	rcall	.+262    	; 0x9ba <listenMidi>
     8b4:	17 d0       	rcall	.+46     	; 0x8e4 <updateScreen>
		listenMidi();
     8b6:	81 d0       	rcall	.+258    	; 0x9ba <listenMidi>
     8b8:	f3 cf       	rjmp	.-26     	; 0x8a0 <main+0x16>

000008ba <initMenu>:
char s3line3[] = "(put triggered note)";

void initMenu()
{
	
outputS(s0line0, 0);
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	83 eb       	ldi	r24, 0xB3	; 179
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	7b d1       	rcall	.+758    	; 0xbba <outputS>
outputS(s0line1, 1);
     8c4:	61 e0       	ldi	r22, 0x01	; 1
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	8e e9       	ldi	r24, 0x9E	; 158
     8ca:	93 e0       	ldi	r25, 0x03	; 3
     8cc:	76 d1       	rcall	.+748    	; 0xbba <outputS>
outputS(s0line2, 2);
     8ce:	62 e0       	ldi	r22, 0x02	; 2
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	89 e8       	ldi	r24, 0x89	; 137
     8d4:	93 e0       	ldi	r25, 0x03	; 3
     8d6:	71 d1       	rcall	.+738    	; 0xbba <outputS>
outputS(s0line3, 3);
     8d8:	63 e0       	ldi	r22, 0x03	; 3
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	84 e7       	ldi	r24, 0x74	; 116
     8de:	93 e0       	ldi	r25, 0x03	; 3
     8e0:	6c c1       	rjmp	.+728    	; 0xbba <outputS>
     8e2:	08 95       	ret

000008e4 <updateScreen>:

}

void updateScreen()
{
	if(prevEncoderAValue!=encoderAValue){
     8e4:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <encoderAValue>
     8e8:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <prevEncoderAValue>
     8ec:	98 17       	cp	r25, r24
     8ee:	09 f4       	brne	.+2      	; 0x8f2 <updateScreen+0xe>
     8f0:	63 c0       	rjmp	.+198    	; 0x9b8 <updateScreen+0xd4>
	encoderAValue = encoderAValue%4;
     8f2:	83 70       	andi	r24, 0x03	; 3
     8f4:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <encoderAValue>
	switch (encoderAValue)
     8f8:	81 30       	cpi	r24, 0x01	; 1
     8fa:	e1 f0       	breq	.+56     	; 0x934 <updateScreen+0x50>
     8fc:	30 f0       	brcs	.+12     	; 0x90a <updateScreen+0x26>
     8fe:	82 30       	cpi	r24, 0x02	; 2
     900:	71 f1       	breq	.+92     	; 0x95e <updateScreen+0x7a>
     902:	83 30       	cpi	r24, 0x03	; 3
     904:	09 f4       	brne	.+2      	; 0x908 <updateScreen+0x24>
     906:	40 c0       	rjmp	.+128    	; 0x988 <updateScreen+0xa4>
     908:	53 c0       	rjmp	.+166    	; 0x9b0 <updateScreen+0xcc>
	{
		case 0:
		outputS(s0line0, 0);
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	83 eb       	ldi	r24, 0xB3	; 179
     910:	93 e0       	ldi	r25, 0x03	; 3
     912:	53 d1       	rcall	.+678    	; 0xbba <outputS>
		outputS(s0line1, 1);
     914:	61 e0       	ldi	r22, 0x01	; 1
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	8e e9       	ldi	r24, 0x9E	; 158
     91a:	93 e0       	ldi	r25, 0x03	; 3
     91c:	4e d1       	rcall	.+668    	; 0xbba <outputS>
		outputS(s0line2, 2);
     91e:	62 e0       	ldi	r22, 0x02	; 2
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	89 e8       	ldi	r24, 0x89	; 137
     924:	93 e0       	ldi	r25, 0x03	; 3
     926:	49 d1       	rcall	.+658    	; 0xbba <outputS>
		outputS(s0line3, 3);
     928:	63 e0       	ldi	r22, 0x03	; 3
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	84 e7       	ldi	r24, 0x74	; 116
     92e:	93 e0       	ldi	r25, 0x03	; 3
     930:	44 d1       	rcall	.+648    	; 0xbba <outputS>
		break;
     932:	3e c0       	rjmp	.+124    	; 0x9b0 <updateScreen+0xcc>
		
		case 1:
 		outputS(s1line0, 0);
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	8f e5       	ldi	r24, 0x5F	; 95
     93a:	93 e0       	ldi	r25, 0x03	; 3
     93c:	3e d1       	rcall	.+636    	; 0xbba <outputS>
 		outputS(s1line1, 1);
     93e:	61 e0       	ldi	r22, 0x01	; 1
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	8a e4       	ldi	r24, 0x4A	; 74
     944:	93 e0       	ldi	r25, 0x03	; 3
     946:	39 d1       	rcall	.+626    	; 0xbba <outputS>
 		outputS(s1line2, 2);
     948:	62 e0       	ldi	r22, 0x02	; 2
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	85 e3       	ldi	r24, 0x35	; 53
     94e:	93 e0       	ldi	r25, 0x03	; 3
     950:	34 d1       	rcall	.+616    	; 0xbba <outputS>
 		outputS(s1line3, 3);
     952:	63 e0       	ldi	r22, 0x03	; 3
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	80 e2       	ldi	r24, 0x20	; 32
     958:	93 e0       	ldi	r25, 0x03	; 3
     95a:	2f d1       	rcall	.+606    	; 0xbba <outputS>
 		break;
     95c:	29 c0       	rjmp	.+82     	; 0x9b0 <updateScreen+0xcc>
		 
		case 2:
		outputS(s2line0, 0);
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	8b e0       	ldi	r24, 0x0B	; 11
     964:	93 e0       	ldi	r25, 0x03	; 3
     966:	29 d1       	rcall	.+594    	; 0xbba <outputS>
		outputS(s2line1, 1);
     968:	61 e0       	ldi	r22, 0x01	; 1
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	86 ef       	ldi	r24, 0xF6	; 246
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	24 d1       	rcall	.+584    	; 0xbba <outputS>
		outputS(s2line2, 2);
     972:	62 e0       	ldi	r22, 0x02	; 2
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	81 ee       	ldi	r24, 0xE1	; 225
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	1f d1       	rcall	.+574    	; 0xbba <outputS>
		outputS(s2line3, 3);
     97c:	63 e0       	ldi	r22, 0x03	; 3
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	8c ec       	ldi	r24, 0xCC	; 204
     982:	92 e0       	ldi	r25, 0x02	; 2
     984:	1a d1       	rcall	.+564    	; 0xbba <outputS>
		break;
     986:	14 c0       	rjmp	.+40     	; 0x9b0 <updateScreen+0xcc>
		 
		case 3:
		outputS(s3line0, 0);
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	87 eb       	ldi	r24, 0xB7	; 183
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	14 d1       	rcall	.+552    	; 0xbba <outputS>
		outputS(s3line1, 1);
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	82 ea       	ldi	r24, 0xA2	; 162
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	0f d1       	rcall	.+542    	; 0xbba <outputS>
		outputS(s3line2, 2);
     99c:	62 e0       	ldi	r22, 0x02	; 2
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	8d e8       	ldi	r24, 0x8D	; 141
     9a2:	92 e0       	ldi	r25, 0x02	; 2
     9a4:	0a d1       	rcall	.+532    	; 0xbba <outputS>
     9a6:	63 e0       	ldi	r22, 0x03	; 3
		outputS(s3line3, 3);
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	88 e7       	ldi	r24, 0x78	; 120
     9ac:	92 e0       	ldi	r25, 0x02	; 2
     9ae:	05 d1       	rcall	.+522    	; 0xbba <outputS>
     9b0:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <encoderAValue>
		break;
		 
		 
	}
	prevEncoderAValue = encoderAValue;
     9b4:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <prevEncoderAValue>
     9b8:	08 95       	ret

000009ba <listenMidi>:
     9ba:	cf 92       	push	r12
     9bc:	df 92       	push	r13
uint8_t midiPCCheck = 0;
uint8_t midiOffCheck = 0;


void listenMidi()
{
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
	midiNoteCheck = (0B10010000|midiChannel);
     9ca:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <midiChannel>
     9ce:	98 2f       	mov	r25, r24
     9d0:	90 69       	ori	r25, 0x90	; 144
     9d2:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <midiNoteCheck>
	midiCCCheck = (0B10110000|midiChannel);
     9d6:	98 2f       	mov	r25, r24
     9d8:	90 6b       	ori	r25, 0xB0	; 176
     9da:	90 93 0c 04 	sts	0x040C, r25	; 0x80040c <midiCCCheck>
	midiPCCheck = (0B11000000|midiChannel);
     9de:	98 2f       	mov	r25, r24
     9e0:	90 6c       	ori	r25, 0xC0	; 192
     9e2:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <midiPCCheck>
	midiOffCheck = (0B10000000|midiChannel);
     9e6:	80 68       	ori	r24, 0x80	; 128
     9e8:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <midiOffCheck>
	
	//right now, this is just for testing.
	currentMidiMessage[0] = getChar();
     9ec:	55 d3       	rcall	.+1706   	; 0x1098 <getChar>
     9ee:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <currentMidiMessage>
	//while(currentMidiMessage[0]==254)
	//{
	//	currentMidiMessage[0]=getChar(); //for now, get rid of midi clock signals
	//}
	if(currentMidiMessage[0]==midiNoteCheck)
     9f2:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <midiNoteCheck>
     9f6:	89 13       	cpse	r24, r25
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
     9f8:	2d c0       	rjmp	.+90     	; 0xa54 <listenMidi+0x9a>
     9fa:	4e d3       	rcall	.+1692   	; 0x1098 <getChar>
     9fc:	ce e0       	ldi	r28, 0x0E	; 14
     9fe:	d4 e0       	ldi	r29, 0x04	; 4
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
     a00:	89 83       	std	Y+1, r24	; 0x01
     a02:	4a d3       	rcall	.+1684   	; 0x1098 <getChar>
     a04:	8a 83       	std	Y+2, r24	; 0x02
     a06:	00 e6       	ldi	r16, 0x60	; 96
     a08:	15 e0       	ldi	r17, 0x05	; 5
     a0a:	c0 ea       	ldi	r28, 0xA0	; 160
     a0c:	d4 e0       	ldi	r29, 0x04	; 4
     a0e:	0f 2e       	mov	r0, r31
     a10:	f0 eb       	ldi	r31, 0xB0	; 176
     a12:	cf 2e       	mov	r12, r31
     a14:	f4 e0       	ldi	r31, 0x04	; 4
     a16:	df 2e       	mov	r13, r31
     a18:	f0 2d       	mov	r31, r0
		//outputS(printMidiNote, 3);
		
		for(int i=0; i<16; i++)
		{
			//I don't like this forloop, but It seems like the best way to deal with this struct at the moment.
			if((currentPattern.midiTrackNote[i])==(currentMidiMessage[1]))
     a1a:	0f 2e       	mov	r0, r31
     a1c:	fe e0       	ldi	r31, 0x0E	; 14
     a1e:	ef 2e       	mov	r14, r31
     a20:	f4 e0       	ldi	r31, 0x04	; 4
     a22:	ff 2e       	mov	r15, r31
     a24:	f0 2d       	mov	r31, r0
     a26:	f8 01       	movw	r30, r16
     a28:	91 91       	ld	r25, Z+
     a2a:	8f 01       	movw	r16, r30
     a2c:	f7 01       	movw	r30, r14
     a2e:	81 81       	ldd	r24, Z+1	; 0x01
     a30:	98 13       	cpse	r25, r24
     a32:	0c c0       	rjmp	.+24     	; 0xa4c <listenMidi+0x92>
			trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
     a34:	28 81       	ld	r18, Y
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	fe 01       	movw	r30, r28
     a3a:	e0 57       	subi	r30, 0x70	; 112
     a3c:	f1 09       	sbc	r31, r1
     a3e:	40 81       	ld	r20, Z
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	68 89       	ldd	r22, Y+16	; 0x10
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	88 a1       	ldd	r24, Y+32	; 0x20
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	3b d3       	rcall	.+1654   	; 0x10c2 <trackControl>
     a4c:	21 96       	adiw	r28, 0x01	; 1
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
		//outputS(printMidiNote, 3);
		
		for(int i=0; i<16; i++)
     a4e:	cc 15       	cp	r28, r12
     a50:	dd 05       	cpc	r29, r13
     a52:	49 f7       	brne	.-46     	; 0xa26 <listenMidi+0x6c>
			if((currentPattern.midiTrackNote[i])==(currentMidiMessage[1]))
			trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
		}
		
	}
	if(currentMidiMessage[0]==midiCCCheck)
     a54:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <currentMidiMessage>
     a58:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <midiCCCheck>
     a5c:	98 13       	cpse	r25, r24
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (control)
     a5e:	0b c0       	rjmp	.+22     	; 0xa76 <listenMidi+0xbc>
     a60:	1b d3       	rcall	.+1590   	; 0x1098 <getChar>
     a62:	ce e0       	ldi	r28, 0x0E	; 14
     a64:	d4 e0       	ldi	r29, 0x04	; 4
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
     a66:	89 83       	std	Y+1, r24	; 0x01
     a68:	17 d3       	rcall	.+1582   	; 0x1098 <getChar>
		outputS(printMidiCC, 3);
     a6a:	8a 83       	std	Y+2, r24	; 0x02
     a6c:	63 e0       	ldi	r22, 0x03	; 3
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	80 ef       	ldi	r24, 0xF0	; 240
     a72:	93 e0       	ldi	r25, 0x03	; 3
	
	}
	if(currentMidiMessage[0]==midiPCCheck)
     a74:	a2 d0       	rcall	.+324    	; 0xbba <outputS>
     a76:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <currentMidiMessage>
     a7a:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <midiPCCheck>
     a7e:	98 13       	cpse	r25, r24
	{
		currentMidiMessage[1] = getChar(); //this should be a byte1 (progChageNumber)
     a80:	08 c0       	rjmp	.+16     	; 0xa92 <listenMidi+0xd8>
     a82:	0a d3       	rcall	.+1556   	; 0x1098 <getChar>
     a84:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <currentMidiMessage+0x1>
		outputS(printMidiPC, 3);
     a88:	63 e0       	ldi	r22, 0x03	; 3
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	8c ed       	ldi	r24, 0xDC	; 220
     a8e:	93 e0       	ldi	r25, 0x03	; 3
		
	}
	if(currentMidiMessage[0]==midiOffCheck)
     a90:	94 d0       	rcall	.+296    	; 0xbba <outputS>
     a92:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <currentMidiMessage>
     a96:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <midiOffCheck>
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
     a9a:	98 13       	cpse	r25, r24
     a9c:	0b c0       	rjmp	.+22     	; 0xab4 <listenMidi+0xfa>
     a9e:	fc d2       	rcall	.+1528   	; 0x1098 <getChar>
     aa0:	ce e0       	ldi	r28, 0x0E	; 14
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
     aa2:	d4 e0       	ldi	r29, 0x04	; 4
     aa4:	89 83       	std	Y+1, r24	; 0x01
     aa6:	f8 d2       	rcall	.+1520   	; 0x1098 <getChar>
		outputS(blank, 3);
     aa8:	8a 83       	std	Y+2, r24	; 0x02
     aaa:	63 e0       	ldi	r22, 0x03	; 3
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	88 ec       	ldi	r24, 0xC8	; 200
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	83 d0       	rcall	.+262    	; 0xbba <outputS>
	}



     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	cf 90       	pop	r12
     ac4:	08 95       	ret

00000ac6 <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
     ac6:	e5 e0       	ldi	r30, 0x05	; 5
     ac8:	f1 e0       	ldi	r31, 0x01	; 1
     aca:	80 81       	ld	r24, Z
     acc:	82 60       	ori	r24, 0x02	; 2
     ace:	80 83       	st	Z, r24
     ad0:	85 e0       	ldi	r24, 0x05	; 5
     ad2:	8a 95       	dec	r24
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <enableCycle+0xc>
     ad6:	00 00       	nop
     ad8:	80 81       	ld	r24, Z
     ada:	8d 7f       	andi	r24, 0xFD	; 253
     adc:	80 83       	st	Z, r24
     ade:	08 95       	ret

00000ae0 <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTJ &= 0B11111110; //set our DC pin low, to get ready to write data.
     ae0:	e5 e0       	ldi	r30, 0x05	; 5
     ae2:	f1 e0       	ldi	r31, 0x01	; 1
     ae4:	90 81       	ld	r25, Z
     ae6:	9e 7f       	andi	r25, 0xFE	; 254
     ae8:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
     aea:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTJ &= 0B11111110; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
     aec:	ec cf       	rjmp	.-40     	; 0xac6 <enableCycle>
     aee:	08 95       	ret

00000af0 <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTJ |=0B00000001; //set out DC Pin high, so it's ready to write data.
     af0:	e5 e0       	ldi	r30, 0x05	; 5
     af2:	f1 e0       	ldi	r31, 0x01	; 1
     af4:	90 81       	ld	r25, Z
     af6:	91 60       	ori	r25, 0x01	; 1
     af8:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
     afa:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTJ |=0B00000001; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
     afc:	e4 cf       	rjmp	.-56     	; 0xac6 <enableCycle>
     afe:	08 95       	ret

00000b00 <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRJ = 0x03; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	DDRC =0xFF; //all pins on the LCD Data Bus.
     b06:	8f ef       	ldi	r24, 0xFF	; 255
     b08:	87 b9       	out	0x07, r24	; 7

	
	PORTJ &= 0B11111100;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
     b0a:	e5 e0       	ldi	r30, 0x05	; 5
     b0c:	f1 e0       	ldi	r31, 0x01	; 1
     b0e:	80 81       	ld	r24, Z
     b10:	8c 7f       	andi	r24, 0xFC	; 252
     b12:	80 83       	st	Z, r24
	
	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
     b14:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b16:	8f e1       	ldi	r24, 0x1F	; 31
     b18:	93 e0       	ldi	r25, 0x03	; 3
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	f1 f7       	brne	.-4      	; 0xb1a <initScreen+0x1a>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <initScreen+0x20>
     b20:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose
	

	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
     b22:	8a e2       	ldi	r24, 0x2A	; 42
     b24:	dd df       	rcall	.-70     	; 0xae0 <command>
	command(0x71);        // Function selection A:
     b26:	81 e7       	ldi	r24, 0x71	; 113
     b28:	db df       	rcall	.-74     	; 0xae0 <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
     b2a:	8c e5       	ldi	r24, 0x5C	; 92
     b2c:	e1 df       	rcall	.-62     	; 0xaf0 <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
     b2e:	88 e2       	ldi	r24, 0x28	; 40
     b30:	d7 df       	rcall	.-82     	; 0xae0 <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
     b32:	88 e0       	ldi	r24, 0x08	; 8
     b34:	d5 df       	rcall	.-86     	; 0xae0 <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
     b36:	8a e2       	ldi	r24, 0x2A	; 42
     b38:	d3 df       	rcall	.-90     	; 0xae0 <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
     b3a:	89 e7       	ldi	r24, 0x79	; 121
     b3c:	d1 df       	rcall	.-94     	; 0xae0 <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
     b3e:	85 ed       	ldi	r24, 0xD5	; 213
     b40:	cf df       	rcall	.-98     	; 0xae0 <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
     b42:	80 e7       	ldi	r24, 0x70	; 112
     b44:	cd df       	rcall	.-102    	; 0xae0 <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
     b46:	88 e7       	ldi	r24, 0x78	; 120
     b48:	cb df       	rcall	.-106    	; 0xae0 <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
     b4a:	89 e0       	ldi	r24, 0x09	; 9
     b4c:	c9 df       	rcall	.-110    	; 0xae0 <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
     b4e:	86 e0       	ldi	r24, 0x06	; 6
     b50:	c7 df       	rcall	.-114    	; 0xae0 <command>
	command(0x72);        // Function selection B:
     b52:	82 e7       	ldi	r24, 0x72	; 114
     b54:	c5 df       	rcall	.-118    	; 0xae0 <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
     b56:	8a e0       	ldi	r24, 0x0A	; 10
     b58:	cb df       	rcall	.-106    	; 0xaf0 <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
     b5a:	89 e7       	ldi	r24, 0x79	; 121
     b5c:	c1 df       	rcall	.-126    	; 0xae0 <command>
	command(0xDA);        // Set SEG pins hardware configuration:
     b5e:	8a ed       	ldi	r24, 0xDA	; 218
     b60:	bf df       	rcall	.-130    	; 0xae0 <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
     b62:	80 e1       	ldi	r24, 0x10	; 16
     b64:	bd df       	rcall	.-134    	; 0xae0 <command>
	command(0xDC);        // Function selection C:
     b66:	8c ed       	ldi	r24, 0xDC	; 220
     b68:	bb df       	rcall	.-138    	; 0xae0 <command>
	command(0x00);        //  internal VSL, GPIO input disable
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	b9 df       	rcall	.-142    	; 0xae0 <command>
	command(0x81);        // Set contrast control:
     b6e:	81 e8       	ldi	r24, 0x81	; 129
     b70:	b7 df       	rcall	.-146    	; 0xae0 <command>
     b72:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
     b74:	b5 df       	rcall	.-150    	; 0xae0 <command>
     b76:	89 ed       	ldi	r24, 0xD9	; 217
     b78:	b3 df       	rcall	.-154    	; 0xae0 <command>
	command(0xD9);        // Set phase length:
     b7a:	81 ef       	ldi	r24, 0xF1	; 241
     b7c:	b1 df       	rcall	.-158    	; 0xae0 <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
     b7e:	8b ed       	ldi	r24, 0xDB	; 219
     b80:	af df       	rcall	.-162    	; 0xae0 <command>
     b82:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
     b84:	ad df       	rcall	.-166    	; 0xae0 <command>
     b86:	88 e7       	ldi	r24, 0x78	; 120
     b88:	ab df       	rcall	.-170    	; 0xae0 <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
     b8a:	88 e2       	ldi	r24, 0x28	; 40
     b8c:	a9 df       	rcall	.-174    	; 0xae0 <command>
     b8e:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
     b90:	a7 df       	rcall	.-178    	; 0xae0 <command>
     b92:	8f e3       	ldi	r24, 0x3F	; 63
     b94:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	f1 f7       	brne	.-4      	; 0xb96 <initScreen+0x96>
     b9a:	00 c0       	rjmp	.+0      	; 0xb9c <initScreen+0x9c>
	command(0x01);        // Clear display
     b9c:	00 00       	nop
     b9e:	80 e8       	ldi	r24, 0x80	; 128
     ba0:	9f df       	rcall	.-194    	; 0xae0 <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ba2:	8c e0       	ldi	r24, 0x0C	; 12
     ba4:	9d df       	rcall	.-198    	; 0xae0 <command>
     ba6:	9f ef       	ldi	r25, 0xFF	; 255
     ba8:	24 e3       	ldi	r18, 0x34	; 52
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	
	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
     bae:	20 40       	sbci	r18, 0x00	; 0
     bb0:	80 40       	sbci	r24, 0x00	; 0
     bb2:	e1 f7       	brne	.-8      	; 0xbac <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <initScreen+0xb6>
     bb6:	00 00       	nop
     bb8:	08 95       	ret

00000bba <outputS>:
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	8c 01       	movw	r16, r24
     bc4:	fb 01       	movw	r30, r22
     bc6:	ff 27       	eor	r31, r31
     bc8:	ec 5f       	subi	r30, 0xFC	; 252
     bca:	fb 4f       	sbci	r31, 0xFB	; 251
     bcc:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;
	
	command(new_line[r]);
     bce:	88 df       	rcall	.-240    	; 0xae0 <command>
     bd0:	e8 01       	movw	r28, r16
     bd2:	0c 5e       	subi	r16, 0xEC	; 236
     bd4:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
     bd6:	89 91       	ld	r24, Y+
     bd8:	8b df       	rcall	.-234    	; 0xaf0 <data>
	uint8_t r = row;
	uint8_t c = 0;
	
	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
     bda:	c0 17       	cp	r28, r16
     bdc:	d1 07       	cpc	r29, r17
     bde:	d9 f7       	brne	.-10     	; 0xbd6 <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	08 95       	ret

00000bea <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;
	
	switch(numCharacters)
     bf0:	43 30       	cpi	r20, 0x03	; 3
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <numPrinter+0xc>
     bf4:	51 c0       	rjmp	.+162    	; 0xc98 <numPrinter+0xae>
     bf6:	28 f4       	brcc	.+10     	; 0xc02 <numPrinter+0x18>
     bf8:	41 30       	cpi	r20, 0x01	; 1
     bfa:	51 f0       	breq	.+20     	; 0xc10 <numPrinter+0x26>
     bfc:	42 30       	cpi	r20, 0x02	; 2
     bfe:	21 f1       	breq	.+72     	; 0xc48 <numPrinter+0x5e>
     c00:	a2 c1       	rjmp	.+836    	; 0xf46 <numPrinter+0x35c>
     c02:	44 30       	cpi	r20, 0x04	; 4
     c04:	09 f4       	brne	.+2      	; 0xc08 <numPrinter+0x1e>
     c06:	8e c0       	rjmp	.+284    	; 0xd24 <numPrinter+0x13a>
     c08:	45 30       	cpi	r20, 0x05	; 5
     c0a:	09 f4       	brne	.+2      	; 0xc0e <numPrinter+0x24>
     c0c:	fd c0       	rjmp	.+506    	; 0xe08 <numPrinter+0x21e>
     c0e:	9b c1       	rjmp	.+822    	; 0xf46 <numPrinter+0x35c>
		case 0:
		break;
		
		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
     c10:	ec 01       	movw	r28, r24
     c12:	c6 0f       	add	r28, r22
     c14:	d1 1d       	adc	r29, r1
     c16:	ad ec       	ldi	r26, 0xCD	; 205
     c18:	bc ec       	ldi	r27, 0xCC	; 204
     c1a:	81 d4       	rcall	.+2306   	; 0x151e <__umulhisi3>
     c1c:	96 95       	lsr	r25
     c1e:	87 95       	ror	r24
     c20:	96 95       	lsr	r25
     c22:	87 95       	ror	r24
     c24:	96 95       	lsr	r25
     c26:	87 95       	ror	r24
     c28:	9c 01       	movw	r18, r24
     c2a:	22 0f       	add	r18, r18
     c2c:	33 1f       	adc	r19, r19
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	82 0f       	add	r24, r18
     c3c:	93 1f       	adc	r25, r19
     c3e:	e8 1b       	sub	r30, r24
     c40:	f9 0b       	sbc	r31, r25
     c42:	e0 5d       	subi	r30, 0xD0	; 208
     c44:	e8 83       	st	Y, r30
		break;
     c46:	7f c1       	rjmp	.+766    	; 0xf46 <numPrinter+0x35c>
		
		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
     c48:	ec 01       	movw	r28, r24
     c4a:	c6 0f       	add	r28, r22
     c4c:	d1 1d       	adc	r29, r1
     c4e:	ad ec       	ldi	r26, 0xCD	; 205
     c50:	bc ec       	ldi	r27, 0xCC	; 204
     c52:	65 d4       	rcall	.+2250   	; 0x151e <__umulhisi3>
     c54:	96 95       	lsr	r25
     c56:	87 95       	ror	r24
     c58:	96 95       	lsr	r25
     c5a:	87 95       	ror	r24
     c5c:	96 95       	lsr	r25
     c5e:	87 95       	ror	r24
     c60:	9c 01       	movw	r18, r24
     c62:	22 0f       	add	r18, r18
     c64:	33 1f       	adc	r19, r19
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	82 0f       	add	r24, r18
     c74:	93 1f       	adc	r25, r19
     c76:	9f 01       	movw	r18, r30
     c78:	28 1b       	sub	r18, r24
     c7a:	39 0b       	sbc	r19, r25
     c7c:	c9 01       	movw	r24, r18
     c7e:	80 5d       	subi	r24, 0xD0	; 208
     c80:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
     c82:	9f 01       	movw	r18, r30
     c84:	4c d4       	rcall	.+2200   	; 0x151e <__umulhisi3>
     c86:	96 95       	lsr	r25
     c88:	87 95       	ror	r24
     c8a:	96 95       	lsr	r25
     c8c:	87 95       	ror	r24
     c8e:	96 95       	lsr	r25
     c90:	87 95       	ror	r24
     c92:	80 5d       	subi	r24, 0xD0	; 208
     c94:	88 83       	st	Y, r24
     c96:	57 c1       	rjmp	.+686    	; 0xf46 <numPrinter+0x35c>
		break;
     c98:	ec 01       	movw	r28, r24
		
		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
     c9a:	c6 0f       	add	r28, r22
     c9c:	d1 1d       	adc	r29, r1
     c9e:	ad ec       	ldi	r26, 0xCD	; 205
     ca0:	bc ec       	ldi	r27, 0xCC	; 204
     ca2:	3d d4       	rcall	.+2170   	; 0x151e <__umulhisi3>
     ca4:	96 95       	lsr	r25
     ca6:	87 95       	ror	r24
     ca8:	96 95       	lsr	r25
     caa:	87 95       	ror	r24
     cac:	96 95       	lsr	r25
     cae:	87 95       	ror	r24
     cb0:	9c 01       	movw	r18, r24
     cb2:	22 0f       	add	r18, r18
     cb4:	33 1f       	adc	r19, r19
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	82 0f       	add	r24, r18
     cc4:	93 1f       	adc	r25, r19
     cc6:	9f 01       	movw	r18, r30
     cc8:	28 1b       	sub	r18, r24
     cca:	39 0b       	sbc	r19, r25
     ccc:	c9 01       	movw	r24, r18
     cce:	80 5d       	subi	r24, 0xD0	; 208
     cd0:	8a 83       	std	Y+2, r24	; 0x02
     cd2:	af 01       	movw	r20, r30
		charArray[(startingPos+1)] = tensPlace;
     cd4:	56 95       	lsr	r21
     cd6:	47 95       	ror	r20
     cd8:	56 95       	lsr	r21
     cda:	47 95       	ror	r20
     cdc:	9a 01       	movw	r18, r20
     cde:	ab e7       	ldi	r26, 0x7B	; 123
     ce0:	b4 e1       	ldi	r27, 0x14	; 20
     ce2:	1d d4       	rcall	.+2106   	; 0x151e <__umulhisi3>
     ce4:	96 95       	lsr	r25
     ce6:	87 95       	ror	r24
     ce8:	64 e6       	ldi	r22, 0x64	; 100
     cea:	68 9f       	mul	r22, r24
     cec:	90 01       	movw	r18, r0
     cee:	69 9f       	mul	r22, r25
     cf0:	30 0d       	add	r19, r0
     cf2:	11 24       	eor	r1, r1
     cf4:	cf 01       	movw	r24, r30
     cf6:	82 1b       	sub	r24, r18
     cf8:	93 0b       	sbc	r25, r19
     cfa:	9c 01       	movw	r18, r24
     cfc:	ad ec       	ldi	r26, 0xCD	; 205
     cfe:	bc ec       	ldi	r27, 0xCC	; 204
     d00:	0e d4       	rcall	.+2076   	; 0x151e <__umulhisi3>
     d02:	96 95       	lsr	r25
     d04:	87 95       	ror	r24
     d06:	96 95       	lsr	r25
     d08:	87 95       	ror	r24
     d0a:	96 95       	lsr	r25
     d0c:	87 95       	ror	r24
     d0e:	80 5d       	subi	r24, 0xD0	; 208
     d10:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
     d12:	9a 01       	movw	r18, r20
     d14:	ab e7       	ldi	r26, 0x7B	; 123
     d16:	b4 e1       	ldi	r27, 0x14	; 20
     d18:	02 d4       	rcall	.+2052   	; 0x151e <__umulhisi3>
     d1a:	96 95       	lsr	r25
     d1c:	87 95       	ror	r24
     d1e:	80 5d       	subi	r24, 0xD0	; 208
     d20:	88 83       	st	Y, r24
		break;
     d22:	11 c1       	rjmp	.+546    	; 0xf46 <numPrinter+0x35c>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
     d24:	ec 01       	movw	r28, r24
     d26:	c6 0f       	add	r28, r22
     d28:	d1 1d       	adc	r29, r1
     d2a:	ad ec       	ldi	r26, 0xCD	; 205
     d2c:	bc ec       	ldi	r27, 0xCC	; 204
     d2e:	f7 d3       	rcall	.+2030   	; 0x151e <__umulhisi3>
     d30:	96 95       	lsr	r25
     d32:	87 95       	ror	r24
     d34:	96 95       	lsr	r25
     d36:	87 95       	ror	r24
     d38:	96 95       	lsr	r25
     d3a:	87 95       	ror	r24
     d3c:	9c 01       	movw	r18, r24
     d3e:	22 0f       	add	r18, r18
     d40:	33 1f       	adc	r19, r19
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	82 0f       	add	r24, r18
     d50:	93 1f       	adc	r25, r19
     d52:	9f 01       	movw	r18, r30
     d54:	28 1b       	sub	r18, r24
     d56:	39 0b       	sbc	r19, r25
     d58:	c9 01       	movw	r24, r18
     d5a:	80 5d       	subi	r24, 0xD0	; 208
     d5c:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
     d5e:	9f 01       	movw	r18, r30
     d60:	36 95       	lsr	r19
     d62:	27 95       	ror	r18
     d64:	36 95       	lsr	r19
     d66:	27 95       	ror	r18
     d68:	ab e7       	ldi	r26, 0x7B	; 123
     d6a:	b4 e1       	ldi	r27, 0x14	; 20
     d6c:	d8 d3       	rcall	.+1968   	; 0x151e <__umulhisi3>
     d6e:	96 95       	lsr	r25
     d70:	87 95       	ror	r24
     d72:	44 e6       	ldi	r20, 0x64	; 100
     d74:	48 9f       	mul	r20, r24
     d76:	90 01       	movw	r18, r0
     d78:	49 9f       	mul	r20, r25
     d7a:	30 0d       	add	r19, r0
     d7c:	11 24       	eor	r1, r1
     d7e:	cf 01       	movw	r24, r30
     d80:	82 1b       	sub	r24, r18
     d82:	93 0b       	sbc	r25, r19
     d84:	9c 01       	movw	r18, r24
     d86:	ad ec       	ldi	r26, 0xCD	; 205
     d88:	bc ec       	ldi	r27, 0xCC	; 204
     d8a:	c9 d3       	rcall	.+1938   	; 0x151e <__umulhisi3>
     d8c:	96 95       	lsr	r25
     d8e:	87 95       	ror	r24
     d90:	96 95       	lsr	r25
     d92:	87 95       	ror	r24
     d94:	96 95       	lsr	r25
     d96:	87 95       	ror	r24
     d98:	80 5d       	subi	r24, 0xD0	; 208
     d9a:	8a 83       	std	Y+2, r24	; 0x02
     d9c:	af 01       	movw	r20, r30
		charArray[(startingPos+1)] = hunderedsPlace;
     d9e:	56 95       	lsr	r21
     da0:	47 95       	ror	r20
     da2:	56 95       	lsr	r21
     da4:	47 95       	ror	r20
     da6:	56 95       	lsr	r21
     da8:	47 95       	ror	r20
     daa:	9a 01       	movw	r18, r20
     dac:	a5 ec       	ldi	r26, 0xC5	; 197
     dae:	b0 e2       	ldi	r27, 0x20	; 32
     db0:	b6 d3       	rcall	.+1900   	; 0x151e <__umulhisi3>
     db2:	92 95       	swap	r25
     db4:	82 95       	swap	r24
     db6:	8f 70       	andi	r24, 0x0F	; 15
     db8:	89 27       	eor	r24, r25
     dba:	9f 70       	andi	r25, 0x0F	; 15
     dbc:	89 27       	eor	r24, r25
     dbe:	68 ee       	ldi	r22, 0xE8	; 232
     dc0:	73 e0       	ldi	r23, 0x03	; 3
     dc2:	86 9f       	mul	r24, r22
     dc4:	90 01       	movw	r18, r0
     dc6:	87 9f       	mul	r24, r23
     dc8:	30 0d       	add	r19, r0
     dca:	96 9f       	mul	r25, r22
     dcc:	30 0d       	add	r19, r0
     dce:	11 24       	eor	r1, r1
     dd0:	cf 01       	movw	r24, r30
     dd2:	82 1b       	sub	r24, r18
     dd4:	93 0b       	sbc	r25, r19
     dd6:	9c 01       	movw	r18, r24
     dd8:	36 95       	lsr	r19
     dda:	27 95       	ror	r18
     ddc:	36 95       	lsr	r19
     dde:	27 95       	ror	r18
     de0:	ab e7       	ldi	r26, 0x7B	; 123
     de2:	b4 e1       	ldi	r27, 0x14	; 20
     de4:	9c d3       	rcall	.+1848   	; 0x151e <__umulhisi3>
     de6:	96 95       	lsr	r25
     de8:	87 95       	ror	r24
     dea:	80 5d       	subi	r24, 0xD0	; 208
     dec:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
     dee:	9a 01       	movw	r18, r20
     df0:	a5 ec       	ldi	r26, 0xC5	; 197
     df2:	b0 e2       	ldi	r27, 0x20	; 32
     df4:	94 d3       	rcall	.+1832   	; 0x151e <__umulhisi3>
     df6:	92 95       	swap	r25
     df8:	82 95       	swap	r24
     dfa:	8f 70       	andi	r24, 0x0F	; 15
     dfc:	89 27       	eor	r24, r25
     dfe:	9f 70       	andi	r25, 0x0F	; 15
     e00:	89 27       	eor	r24, r25
     e02:	80 5d       	subi	r24, 0xD0	; 208
     e04:	88 83       	st	Y, r24
		break;
     e06:	9f c0       	rjmp	.+318    	; 0xf46 <numPrinter+0x35c>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
     e08:	ec 01       	movw	r28, r24
     e0a:	c6 0f       	add	r28, r22
     e0c:	d1 1d       	adc	r29, r1
     e0e:	ad ec       	ldi	r26, 0xCD	; 205
     e10:	bc ec       	ldi	r27, 0xCC	; 204
     e12:	85 d3       	rcall	.+1802   	; 0x151e <__umulhisi3>
     e14:	96 95       	lsr	r25
     e16:	87 95       	ror	r24
     e18:	96 95       	lsr	r25
     e1a:	87 95       	ror	r24
     e1c:	96 95       	lsr	r25
     e1e:	87 95       	ror	r24
     e20:	9c 01       	movw	r18, r24
     e22:	22 0f       	add	r18, r18
     e24:	33 1f       	adc	r19, r19
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	82 0f       	add	r24, r18
     e34:	93 1f       	adc	r25, r19
     e36:	9f 01       	movw	r18, r30
     e38:	28 1b       	sub	r18, r24
     e3a:	39 0b       	sbc	r19, r25
     e3c:	c9 01       	movw	r24, r18
     e3e:	80 5d       	subi	r24, 0xD0	; 208
     e40:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
     e42:	9f 01       	movw	r18, r30
     e44:	36 95       	lsr	r19
     e46:	27 95       	ror	r18
     e48:	36 95       	lsr	r19
     e4a:	27 95       	ror	r18
     e4c:	ab e7       	ldi	r26, 0x7B	; 123
     e4e:	b4 e1       	ldi	r27, 0x14	; 20
     e50:	66 d3       	rcall	.+1740   	; 0x151e <__umulhisi3>
     e52:	96 95       	lsr	r25
     e54:	87 95       	ror	r24
     e56:	44 e6       	ldi	r20, 0x64	; 100
     e58:	48 9f       	mul	r20, r24
     e5a:	90 01       	movw	r18, r0
     e5c:	49 9f       	mul	r20, r25
     e5e:	30 0d       	add	r19, r0
     e60:	11 24       	eor	r1, r1
     e62:	cf 01       	movw	r24, r30
     e64:	82 1b       	sub	r24, r18
     e66:	93 0b       	sbc	r25, r19
     e68:	9c 01       	movw	r18, r24
     e6a:	ad ec       	ldi	r26, 0xCD	; 205
     e6c:	bc ec       	ldi	r27, 0xCC	; 204
     e6e:	57 d3       	rcall	.+1710   	; 0x151e <__umulhisi3>
     e70:	96 95       	lsr	r25
     e72:	87 95       	ror	r24
     e74:	96 95       	lsr	r25
     e76:	87 95       	ror	r24
     e78:	96 95       	lsr	r25
     e7a:	87 95       	ror	r24
     e7c:	80 5d       	subi	r24, 0xD0	; 208
     e7e:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
     e80:	9f 01       	movw	r18, r30
     e82:	36 95       	lsr	r19
     e84:	27 95       	ror	r18
     e86:	36 95       	lsr	r19
     e88:	27 95       	ror	r18
     e8a:	36 95       	lsr	r19
     e8c:	27 95       	ror	r18
     e8e:	a5 ec       	ldi	r26, 0xC5	; 197
     e90:	b0 e2       	ldi	r27, 0x20	; 32
     e92:	45 d3       	rcall	.+1674   	; 0x151e <__umulhisi3>
     e94:	92 95       	swap	r25
     e96:	82 95       	swap	r24
     e98:	8f 70       	andi	r24, 0x0F	; 15
     e9a:	89 27       	eor	r24, r25
     e9c:	9f 70       	andi	r25, 0x0F	; 15
     e9e:	89 27       	eor	r24, r25
     ea0:	48 ee       	ldi	r20, 0xE8	; 232
     ea2:	53 e0       	ldi	r21, 0x03	; 3
     ea4:	84 9f       	mul	r24, r20
     ea6:	90 01       	movw	r18, r0
     ea8:	85 9f       	mul	r24, r21
     eaa:	30 0d       	add	r19, r0
     eac:	94 9f       	mul	r25, r20
     eae:	30 0d       	add	r19, r0
     eb0:	11 24       	eor	r1, r1
     eb2:	cf 01       	movw	r24, r30
     eb4:	82 1b       	sub	r24, r18
     eb6:	93 0b       	sbc	r25, r19
     eb8:	9c 01       	movw	r18, r24
     eba:	36 95       	lsr	r19
     ebc:	27 95       	ror	r18
     ebe:	36 95       	lsr	r19
     ec0:	27 95       	ror	r18
     ec2:	ab e7       	ldi	r26, 0x7B	; 123
     ec4:	b4 e1       	ldi	r27, 0x14	; 20
     ec6:	2b d3       	rcall	.+1622   	; 0x151e <__umulhisi3>
     ec8:	96 95       	lsr	r25
     eca:	87 95       	ror	r24
     ecc:	80 5d       	subi	r24, 0xD0	; 208
     ece:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
     ed0:	af 01       	movw	r20, r30
     ed2:	52 95       	swap	r21
     ed4:	42 95       	swap	r20
     ed6:	4f 70       	andi	r20, 0x0F	; 15
     ed8:	45 27       	eor	r20, r21
     eda:	5f 70       	andi	r21, 0x0F	; 15
     edc:	45 27       	eor	r20, r21
     ede:	9a 01       	movw	r18, r20
     ee0:	a7 e4       	ldi	r26, 0x47	; 71
     ee2:	b3 e0       	ldi	r27, 0x03	; 3
     ee4:	1c d3       	rcall	.+1592   	; 0x151e <__umulhisi3>
     ee6:	96 95       	lsr	r25
     ee8:	87 95       	ror	r24
     eea:	96 95       	lsr	r25
     eec:	87 95       	ror	r24
     eee:	96 95       	lsr	r25
     ef0:	87 95       	ror	r24
     ef2:	60 e1       	ldi	r22, 0x10	; 16
     ef4:	77 e2       	ldi	r23, 0x27	; 39
     ef6:	86 9f       	mul	r24, r22
     ef8:	90 01       	movw	r18, r0
     efa:	87 9f       	mul	r24, r23
     efc:	30 0d       	add	r19, r0
     efe:	96 9f       	mul	r25, r22
     f00:	30 0d       	add	r19, r0
     f02:	11 24       	eor	r1, r1
     f04:	cf 01       	movw	r24, r30
     f06:	82 1b       	sub	r24, r18
     f08:	93 0b       	sbc	r25, r19
     f0a:	9c 01       	movw	r18, r24
     f0c:	36 95       	lsr	r19
     f0e:	27 95       	ror	r18
     f10:	36 95       	lsr	r19
     f12:	27 95       	ror	r18
     f14:	36 95       	lsr	r19
     f16:	27 95       	ror	r18
     f18:	a5 ec       	ldi	r26, 0xC5	; 197
     f1a:	b0 e2       	ldi	r27, 0x20	; 32
     f1c:	00 d3       	rcall	.+1536   	; 0x151e <__umulhisi3>
     f1e:	92 95       	swap	r25
     f20:	82 95       	swap	r24
     f22:	8f 70       	andi	r24, 0x0F	; 15
     f24:	89 27       	eor	r24, r25
     f26:	9f 70       	andi	r25, 0x0F	; 15
     f28:	89 27       	eor	r24, r25
     f2a:	80 5d       	subi	r24, 0xD0	; 208
     f2c:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
     f2e:	9a 01       	movw	r18, r20
     f30:	a7 e4       	ldi	r26, 0x47	; 71
     f32:	b3 e0       	ldi	r27, 0x03	; 3
     f34:	f4 d2       	rcall	.+1512   	; 0x151e <__umulhisi3>
     f36:	96 95       	lsr	r25
     f38:	87 95       	ror	r24
     f3a:	96 95       	lsr	r25
     f3c:	87 95       	ror	r24
     f3e:	96 95       	lsr	r25
     f40:	87 95       	ror	r24
     f42:	80 5d       	subi	r24, 0xD0	; 208
     f44:	88 83       	st	Y, r24
     f46:	df 91       	pop	r29
		break;
		
	}


     f48:	cf 91       	pop	r28
     f4a:	08 95       	ret

00000f4c <__vector_27>:

uint8_t rxReadPosition = 0;
uint8_t rxWritePosition = 0;

ISR (USART0_TX_vect)
{
     f4c:	1f 92       	push	r1
     f4e:	0f 92       	push	r0
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	0f 92       	push	r0
     f54:	11 24       	eor	r1, r1
     f56:	0b b6       	in	r0, 0x3b	; 59
     f58:	0f 92       	push	r0
     f5a:	2f 93       	push	r18
     f5c:	3f 93       	push	r19
     f5e:	8f 93       	push	r24
     f60:	9f 93       	push	r25
     f62:	ef 93       	push	r30
     f64:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
     f66:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <serialReadPos>
     f6a:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <serialReadPos+0x1>
     f6e:	20 91 13 04 	lds	r18, 0x0413	; 0x800413 <serialWritePos>
     f72:	30 91 14 04 	lds	r19, 0x0414	; 0x800414 <serialWritePos+0x1>
     f76:	82 17       	cp	r24, r18
     f78:	93 07       	cpc	r25, r19
     f7a:	b9 f0       	breq	.+46     	; 0xfaa <__vector_27+0x5e>
	{
		UDR0 = serial0Buffer[serialReadPos];
     f7c:	fc 01       	movw	r30, r24
     f7e:	ee 52       	subi	r30, 0x2E	; 46
     f80:	fa 4f       	sbci	r31, 0xFA	; 250
     f82:	80 81       	ld	r24, Z
     f84:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
     f88:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <serialReadPos>
     f8c:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <serialReadPos+0x1>
     f90:	01 96       	adiw	r24, 0x01	; 1
		
		if(serialReadPos >= TX_BUFFER_SIZE)
     f92:	80 38       	cpi	r24, 0x80	; 128
     f94:	91 05       	cpc	r25, r1
     f96:	2c f4       	brge	.+10     	; 0xfa2 <__vector_27+0x56>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
     f98:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <serialReadPos+0x1>
     f9c:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <serialReadPos>
     fa0:	04 c0       	rjmp	.+8      	; 0xfaa <__vector_27+0x5e>
		
		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
     fa2:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <serialReadPos+0x1>
     fa6:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <serialReadPos>
		}
	}
}
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	9f 91       	pop	r25
     fb0:	8f 91       	pop	r24
     fb2:	3f 91       	pop	r19
     fb4:	2f 91       	pop	r18
     fb6:	0f 90       	pop	r0
     fb8:	0b be       	out	0x3b, r0	; 59
     fba:	0f 90       	pop	r0
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	0f 90       	pop	r0
     fc0:	1f 90       	pop	r1
     fc2:	18 95       	reti

00000fc4 <__vector_36>:

ISR (USART1_RX_vect)
{
     fc4:	1f 92       	push	r1
     fc6:	0f 92       	push	r0
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	0f 92       	push	r0
     fcc:	11 24       	eor	r1, r1
     fce:	0b b6       	in	r0, 0x3b	; 59
     fd0:	0f 92       	push	r0
     fd2:	8f 93       	push	r24
     fd4:	9f 93       	push	r25
     fd6:	ef 93       	push	r30
     fd8:	ff 93       	push	r31
	serial1Buffer[rxWritePosition] = UDR1;
     fda:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <rxWritePosition>
     fde:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     fe2:	e8 2f       	mov	r30, r24
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	ee 5a       	subi	r30, 0xAE	; 174
     fe8:	f9 4f       	sbci	r31, 0xF9	; 249
     fea:	90 83       	st	Z, r25
	rxWritePosition++;
     fec:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(rxWritePosition>= RX_BUFFER_SIZE)
     fee:	1a f0       	brmi	.+6      	; 0xff6 <__vector_36+0x32>
}

ISR (USART1_RX_vect)
{
	serial1Buffer[rxWritePosition] = UDR1;
	rxWritePosition++;
     ff0:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <rxWritePosition>
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <__vector_36+0x36>
	
	if(rxWritePosition>= RX_BUFFER_SIZE)
	{
		rxWritePosition = 0; //this could cause some issues.
     ff6:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <rxWritePosition>
	}


}
     ffa:	ff 91       	pop	r31
     ffc:	ef 91       	pop	r30
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	0f 90       	pop	r0
    1004:	0b be       	out	0x3b, r0	; 59
    1006:	0f 90       	pop	r0
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	0f 90       	pop	r0
    100c:	1f 90       	pop	r1
    100e:	18 95       	reti

00001010 <appendSerial0>:

void appendSerial0(char c)
{
	serial0Buffer[serialWritePos] = c;
    1010:	20 91 13 04 	lds	r18, 0x0413	; 0x800413 <serialWritePos>
    1014:	30 91 14 04 	lds	r19, 0x0414	; 0x800414 <serialWritePos+0x1>
    1018:	f9 01       	movw	r30, r18
    101a:	ee 52       	subi	r30, 0x2E	; 46
    101c:	fa 4f       	sbci	r31, 0xFA	; 250
    101e:	80 83       	st	Z, r24
	serialWritePos++;
    1020:	2f 5f       	subi	r18, 0xFF	; 255
    1022:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    1024:	20 38       	cpi	r18, 0x80	; 128
    1026:	31 05       	cpc	r19, r1
    1028:	2c f4       	brge	.+10     	; 0x1034 <appendSerial0+0x24>
}

void appendSerial0(char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    102a:	30 93 14 04 	sts	0x0414, r19	; 0x800414 <serialWritePos+0x1>
    102e:	20 93 13 04 	sts	0x0413, r18	; 0x800413 <serialWritePos>
    1032:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    1034:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <serialWritePos+0x1>
    1038:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <serialWritePos>
    103c:	08 95       	ret

0000103e <serialWrite0>:
	}
}

void serialWrite0(char c[])
{
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	ec 01       	movw	r28, r24
    1048:	8c 01       	movw	r16, r24
    104a:	06 5f       	subi	r16, 0xF6	; 246
    104c:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = 0; i<10; i++) //this may need to be 11
	{
		appendSerial0(c[i]);
    104e:	89 91       	ld	r24, Y+
    1050:	df df       	rcall	.-66     	; 0x1010 <appendSerial0>
	}
}

void serialWrite0(char c[])
{
	for (uint8_t i = 0; i<10; i++) //this may need to be 11
    1052:	c0 17       	cp	r28, r16
    1054:	d1 07       	cpc	r29, r17
    1056:	d9 f7       	brne	.-10     	; 0x104e <serialWrite0+0x10>
	{
		appendSerial0(c[i]);
		
	}
	
	if(UCSR0A & (1 << UDRE0))
    1058:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    105c:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    105e:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	08 95       	ret

0000106c <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    106c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    1070:	80 e1       	ldi	r24, 0x10	; 16
    1072:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

UBRR1H = (BRCMidi >> 8);
    1076:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
UBRR1L = BRCMidi;
    107a:	8f e1       	ldi	r24, 0x1F	; 31
    107c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>

UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    1080:	88 e4       	ldi	r24, 0x48	; 72
    1082:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    1086:	86 e0       	ldi	r24, 0x06	; 6
    1088:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>


UCSR1B = (1 << RXEN1)  | (1 << RXCIE0);
    108c:	90 e9       	ldi	r25, 0x90	; 144
    108e:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); //8 bit chars will be sent
    1092:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1096:	08 95       	ret

00001098 <getChar>:

char getChar()
{
	char returnMe = '\0';
	
	if(rxReadPosition != rxWritePosition)
    1098:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <rxReadPosition>
    109c:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <rxWritePosition>
    10a0:	98 17       	cp	r25, r24
    10a2:	69 f0       	breq	.+26     	; 0x10be <getChar+0x26>
	{
		returnMe = serial1Buffer[rxReadPosition];
    10a4:	e9 2f       	mov	r30, r25
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	ee 5a       	subi	r30, 0xAE	; 174
    10aa:	f9 4f       	sbci	r31, 0xF9	; 249
    10ac:	80 81       	ld	r24, Z
		
		rxReadPosition++;
    10ae:	9f 5f       	subi	r25, 0xFF	; 255
		
		if(rxReadPosition >= RX_BUFFER_SIZE)
    10b0:	1a f0       	brmi	.+6      	; 0x10b8 <getChar+0x20>
	
	if(rxReadPosition != rxWritePosition)
	{
		returnMe = serial1Buffer[rxReadPosition];
		
		rxReadPosition++;
    10b2:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <rxReadPosition>
    10b6:	08 95       	ret
		
		if(rxReadPosition >= RX_BUFFER_SIZE)
		{
			rxReadPosition = 0;
    10b8:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <rxReadPosition>
    10bc:	08 95       	ret

}

char getChar()
{
	char returnMe = '\0';
    10be:	80 e0       	ldi	r24, 0x00	; 0
		}
	
	}
	return returnMe;
	
}
    10c0:	08 95       	ret

000010c2 <trackControl>:
void resumeAll()
{
	char resumePlay[5] = {0xf0, 0xaa, 0x05, 0x0b, 0x55};
	serialWrite0(resumePlay);
	
}
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	2a 97       	sbiw	r28, 0x0a	; 10
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	90 ef       	ldi	r25, 0xF0	; 240
    10d8:	99 83       	std	Y+1, r25	; 0x01
    10da:	9a ea       	ldi	r25, 0xAA	; 170
    10dc:	9a 83       	std	Y+2, r25	; 0x02
    10de:	9a e0       	ldi	r25, 0x0A	; 10
    10e0:	9b 83       	std	Y+3, r25	; 0x03
    10e2:	93 e0       	ldi	r25, 0x03	; 3
    10e4:	9c 83       	std	Y+4, r25	; 0x04
    10e6:	2d 83       	std	Y+5, r18	; 0x05
    10e8:	8e 83       	std	Y+6, r24	; 0x06
    10ea:	6f 83       	std	Y+7, r22	; 0x07
    10ec:	48 87       	std	Y+8, r20	; 0x08
    10ee:	19 86       	std	Y+9, r1	; 0x09
    10f0:	85 e5       	ldi	r24, 0x55	; 85
    10f2:	8a 87       	std	Y+10, r24	; 0x0a
    10f4:	ce 01       	movw	r24, r28
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	a2 df       	rcall	.-188    	; 0x103e <serialWrite0>
    10fa:	2a 96       	adiw	r28, 0x0a	; 10
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	08 95       	ret

0000110c <setOutputVolume>:
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	28 97       	sbiw	r28, 0x08	; 8
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	90 ef       	ldi	r25, 0xF0	; 240
    1122:	99 83       	std	Y+1, r25	; 0x01
    1124:	9a ea       	ldi	r25, 0xAA	; 170
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	98 e0       	ldi	r25, 0x08	; 8
    112a:	9b 83       	std	Y+3, r25	; 0x03
    112c:	95 e0       	ldi	r25, 0x05	; 5
    112e:	9c 83       	std	Y+4, r25	; 0x04
    1130:	4d 83       	std	Y+5, r20	; 0x05
    1132:	8e 83       	std	Y+6, r24	; 0x06
    1134:	6f 83       	std	Y+7, r22	; 0x07
    1136:	85 e5       	ldi	r24, 0x55	; 85
    1138:	88 87       	std	Y+8, r24	; 0x08
    113a:	ce 01       	movw	r24, r28
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	7f df       	rcall	.-258    	; 0x103e <serialWrite0>
    1140:	28 96       	adiw	r28, 0x08	; 8
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	08 95       	ret

00001152 <setTrackVolume>:
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	29 97       	sbiw	r28, 0x09	; 9
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	90 ef       	ldi	r25, 0xF0	; 240
    1168:	99 83       	std	Y+1, r25	; 0x01
    116a:	9a ea       	ldi	r25, 0xAA	; 170
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	99 e0       	ldi	r25, 0x09	; 9
    1170:	9b 83       	std	Y+3, r25	; 0x03
    1172:	98 e0       	ldi	r25, 0x08	; 8
    1174:	9c 83       	std	Y+4, r25	; 0x04
    1176:	8d 83       	std	Y+5, r24	; 0x05
    1178:	6e 83       	std	Y+6, r22	; 0x06
    117a:	4f 83       	std	Y+7, r20	; 0x07
    117c:	28 87       	std	Y+8, r18	; 0x08
    117e:	85 e5       	ldi	r24, 0x55	; 85
    1180:	89 87       	std	Y+9, r24	; 0x09
    1182:	ce 01       	movw	r24, r28
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	5b df       	rcall	.-330    	; 0x103e <serialWrite0>
    1188:	29 96       	adiw	r28, 0x09	; 9
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	08 95       	ret

0000119a <outputSampleRate>:

void outputSampleRate(uint8_t outputSelect, uint8_t offsetLSB, uint8_t offsetMSB)
{
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	28 97       	sbiw	r28, 0x08	; 8
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
	char pitchChange[8] = {0xf0, 0xaa, 0x08, 0x0c, outputSelect, offsetLSB, offsetMSB, 0x55};
    11ae:	90 ef       	ldi	r25, 0xF0	; 240
    11b0:	99 83       	std	Y+1, r25	; 0x01
    11b2:	9a ea       	ldi	r25, 0xAA	; 170
    11b4:	9a 83       	std	Y+2, r25	; 0x02
    11b6:	98 e0       	ldi	r25, 0x08	; 8
    11b8:	9b 83       	std	Y+3, r25	; 0x03
    11ba:	9c e0       	ldi	r25, 0x0C	; 12
    11bc:	9c 83       	std	Y+4, r25	; 0x04
    11be:	8d 83       	std	Y+5, r24	; 0x05
    11c0:	6e 83       	std	Y+6, r22	; 0x06
    11c2:	4f 83       	std	Y+7, r20	; 0x07
    11c4:	85 e5       	ldi	r24, 0x55	; 85
    11c6:	88 87       	std	Y+8, r24	; 0x08
	serialWrite0(pitchChange);
    11c8:	ce 01       	movw	r24, r28
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	38 df       	rcall	.-400    	; 0x103e <serialWrite0>
}
    11ce:	28 96       	adiw	r28, 0x08	; 8
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	08 95       	ret

000011e0 <__subsf3>:
    11e0:	50 58       	subi	r21, 0x80	; 128

000011e2 <__addsf3>:
    11e2:	bb 27       	eor	r27, r27
    11e4:	aa 27       	eor	r26, r26
    11e6:	0e d0       	rcall	.+28     	; 0x1204 <__addsf3x>
    11e8:	4d c1       	rjmp	.+666    	; 0x1484 <__fp_round>
    11ea:	3e d1       	rcall	.+636    	; 0x1468 <__fp_pscA>
    11ec:	30 f0       	brcs	.+12     	; 0x11fa <__addsf3+0x18>
    11ee:	43 d1       	rcall	.+646    	; 0x1476 <__fp_pscB>
    11f0:	20 f0       	brcs	.+8      	; 0x11fa <__addsf3+0x18>
    11f2:	31 f4       	brne	.+12     	; 0x1200 <__addsf3+0x1e>
    11f4:	9f 3f       	cpi	r25, 0xFF	; 255
    11f6:	11 f4       	brne	.+4      	; 0x11fc <__addsf3+0x1a>
    11f8:	1e f4       	brtc	.+6      	; 0x1200 <__addsf3+0x1e>
    11fa:	33 c1       	rjmp	.+614    	; 0x1462 <__fp_nan>
    11fc:	0e f4       	brtc	.+2      	; 0x1200 <__addsf3+0x1e>
    11fe:	e0 95       	com	r30
    1200:	e7 fb       	bst	r30, 7
    1202:	29 c1       	rjmp	.+594    	; 0x1456 <__fp_inf>

00001204 <__addsf3x>:
    1204:	e9 2f       	mov	r30, r25
    1206:	4f d1       	rcall	.+670    	; 0x14a6 <__fp_split3>
    1208:	80 f3       	brcs	.-32     	; 0x11ea <__addsf3+0x8>
    120a:	ba 17       	cp	r27, r26
    120c:	62 07       	cpc	r22, r18
    120e:	73 07       	cpc	r23, r19
    1210:	84 07       	cpc	r24, r20
    1212:	95 07       	cpc	r25, r21
    1214:	18 f0       	brcs	.+6      	; 0x121c <__addsf3x+0x18>
    1216:	71 f4       	brne	.+28     	; 0x1234 <__addsf3x+0x30>
    1218:	9e f5       	brtc	.+102    	; 0x1280 <__addsf3x+0x7c>
    121a:	67 c1       	rjmp	.+718    	; 0x14ea <__fp_zero>
    121c:	0e f4       	brtc	.+2      	; 0x1220 <__addsf3x+0x1c>
    121e:	e0 95       	com	r30
    1220:	0b 2e       	mov	r0, r27
    1222:	ba 2f       	mov	r27, r26
    1224:	a0 2d       	mov	r26, r0
    1226:	0b 01       	movw	r0, r22
    1228:	b9 01       	movw	r22, r18
    122a:	90 01       	movw	r18, r0
    122c:	0c 01       	movw	r0, r24
    122e:	ca 01       	movw	r24, r20
    1230:	a0 01       	movw	r20, r0
    1232:	11 24       	eor	r1, r1
    1234:	ff 27       	eor	r31, r31
    1236:	59 1b       	sub	r21, r25
    1238:	99 f0       	breq	.+38     	; 0x1260 <__addsf3x+0x5c>
    123a:	59 3f       	cpi	r21, 0xF9	; 249
    123c:	50 f4       	brcc	.+20     	; 0x1252 <__addsf3x+0x4e>
    123e:	50 3e       	cpi	r21, 0xE0	; 224
    1240:	68 f1       	brcs	.+90     	; 0x129c <__addsf3x+0x98>
    1242:	1a 16       	cp	r1, r26
    1244:	f0 40       	sbci	r31, 0x00	; 0
    1246:	a2 2f       	mov	r26, r18
    1248:	23 2f       	mov	r18, r19
    124a:	34 2f       	mov	r19, r20
    124c:	44 27       	eor	r20, r20
    124e:	58 5f       	subi	r21, 0xF8	; 248
    1250:	f3 cf       	rjmp	.-26     	; 0x1238 <__addsf3x+0x34>
    1252:	46 95       	lsr	r20
    1254:	37 95       	ror	r19
    1256:	27 95       	ror	r18
    1258:	a7 95       	ror	r26
    125a:	f0 40       	sbci	r31, 0x00	; 0
    125c:	53 95       	inc	r21
    125e:	c9 f7       	brne	.-14     	; 0x1252 <__addsf3x+0x4e>
    1260:	7e f4       	brtc	.+30     	; 0x1280 <__addsf3x+0x7c>
    1262:	1f 16       	cp	r1, r31
    1264:	ba 0b       	sbc	r27, r26
    1266:	62 0b       	sbc	r22, r18
    1268:	73 0b       	sbc	r23, r19
    126a:	84 0b       	sbc	r24, r20
    126c:	ba f0       	brmi	.+46     	; 0x129c <__addsf3x+0x98>
    126e:	91 50       	subi	r25, 0x01	; 1
    1270:	a1 f0       	breq	.+40     	; 0x129a <__addsf3x+0x96>
    1272:	ff 0f       	add	r31, r31
    1274:	bb 1f       	adc	r27, r27
    1276:	66 1f       	adc	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	88 1f       	adc	r24, r24
    127c:	c2 f7       	brpl	.-16     	; 0x126e <__addsf3x+0x6a>
    127e:	0e c0       	rjmp	.+28     	; 0x129c <__addsf3x+0x98>
    1280:	ba 0f       	add	r27, r26
    1282:	62 1f       	adc	r22, r18
    1284:	73 1f       	adc	r23, r19
    1286:	84 1f       	adc	r24, r20
    1288:	48 f4       	brcc	.+18     	; 0x129c <__addsf3x+0x98>
    128a:	87 95       	ror	r24
    128c:	77 95       	ror	r23
    128e:	67 95       	ror	r22
    1290:	b7 95       	ror	r27
    1292:	f7 95       	ror	r31
    1294:	9e 3f       	cpi	r25, 0xFE	; 254
    1296:	08 f0       	brcs	.+2      	; 0x129a <__addsf3x+0x96>
    1298:	b3 cf       	rjmp	.-154    	; 0x1200 <__addsf3+0x1e>
    129a:	93 95       	inc	r25
    129c:	88 0f       	add	r24, r24
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <__addsf3x+0x9e>
    12a0:	99 27       	eor	r25, r25
    12a2:	ee 0f       	add	r30, r30
    12a4:	97 95       	ror	r25
    12a6:	87 95       	ror	r24
    12a8:	08 95       	ret

000012aa <__divsf3>:
    12aa:	0c d0       	rcall	.+24     	; 0x12c4 <__divsf3x>
    12ac:	eb c0       	rjmp	.+470    	; 0x1484 <__fp_round>
    12ae:	e3 d0       	rcall	.+454    	; 0x1476 <__fp_pscB>
    12b0:	40 f0       	brcs	.+16     	; 0x12c2 <__divsf3+0x18>
    12b2:	da d0       	rcall	.+436    	; 0x1468 <__fp_pscA>
    12b4:	30 f0       	brcs	.+12     	; 0x12c2 <__divsf3+0x18>
    12b6:	21 f4       	brne	.+8      	; 0x12c0 <__divsf3+0x16>
    12b8:	5f 3f       	cpi	r21, 0xFF	; 255
    12ba:	19 f0       	breq	.+6      	; 0x12c2 <__divsf3+0x18>
    12bc:	cc c0       	rjmp	.+408    	; 0x1456 <__fp_inf>
    12be:	51 11       	cpse	r21, r1
    12c0:	15 c1       	rjmp	.+554    	; 0x14ec <__fp_szero>
    12c2:	cf c0       	rjmp	.+414    	; 0x1462 <__fp_nan>

000012c4 <__divsf3x>:
    12c4:	f0 d0       	rcall	.+480    	; 0x14a6 <__fp_split3>
    12c6:	98 f3       	brcs	.-26     	; 0x12ae <__divsf3+0x4>

000012c8 <__divsf3_pse>:
    12c8:	99 23       	and	r25, r25
    12ca:	c9 f3       	breq	.-14     	; 0x12be <__divsf3+0x14>
    12cc:	55 23       	and	r21, r21
    12ce:	b1 f3       	breq	.-20     	; 0x12bc <__divsf3+0x12>
    12d0:	95 1b       	sub	r25, r21
    12d2:	55 0b       	sbc	r21, r21
    12d4:	bb 27       	eor	r27, r27
    12d6:	aa 27       	eor	r26, r26
    12d8:	62 17       	cp	r22, r18
    12da:	73 07       	cpc	r23, r19
    12dc:	84 07       	cpc	r24, r20
    12de:	38 f0       	brcs	.+14     	; 0x12ee <__divsf3_pse+0x26>
    12e0:	9f 5f       	subi	r25, 0xFF	; 255
    12e2:	5f 4f       	sbci	r21, 0xFF	; 255
    12e4:	22 0f       	add	r18, r18
    12e6:	33 1f       	adc	r19, r19
    12e8:	44 1f       	adc	r20, r20
    12ea:	aa 1f       	adc	r26, r26
    12ec:	a9 f3       	breq	.-22     	; 0x12d8 <__divsf3_pse+0x10>
    12ee:	33 d0       	rcall	.+102    	; 0x1356 <__divsf3_pse+0x8e>
    12f0:	0e 2e       	mov	r0, r30
    12f2:	3a f0       	brmi	.+14     	; 0x1302 <__divsf3_pse+0x3a>
    12f4:	e0 e8       	ldi	r30, 0x80	; 128
    12f6:	30 d0       	rcall	.+96     	; 0x1358 <__divsf3_pse+0x90>
    12f8:	91 50       	subi	r25, 0x01	; 1
    12fa:	50 40       	sbci	r21, 0x00	; 0
    12fc:	e6 95       	lsr	r30
    12fe:	00 1c       	adc	r0, r0
    1300:	ca f7       	brpl	.-14     	; 0x12f4 <__divsf3_pse+0x2c>
    1302:	29 d0       	rcall	.+82     	; 0x1356 <__divsf3_pse+0x8e>
    1304:	fe 2f       	mov	r31, r30
    1306:	27 d0       	rcall	.+78     	; 0x1356 <__divsf3_pse+0x8e>
    1308:	66 0f       	add	r22, r22
    130a:	77 1f       	adc	r23, r23
    130c:	88 1f       	adc	r24, r24
    130e:	bb 1f       	adc	r27, r27
    1310:	26 17       	cp	r18, r22
    1312:	37 07       	cpc	r19, r23
    1314:	48 07       	cpc	r20, r24
    1316:	ab 07       	cpc	r26, r27
    1318:	b0 e8       	ldi	r27, 0x80	; 128
    131a:	09 f0       	breq	.+2      	; 0x131e <__divsf3_pse+0x56>
    131c:	bb 0b       	sbc	r27, r27
    131e:	80 2d       	mov	r24, r0
    1320:	bf 01       	movw	r22, r30
    1322:	ff 27       	eor	r31, r31
    1324:	93 58       	subi	r25, 0x83	; 131
    1326:	5f 4f       	sbci	r21, 0xFF	; 255
    1328:	2a f0       	brmi	.+10     	; 0x1334 <__divsf3_pse+0x6c>
    132a:	9e 3f       	cpi	r25, 0xFE	; 254
    132c:	51 05       	cpc	r21, r1
    132e:	68 f0       	brcs	.+26     	; 0x134a <__divsf3_pse+0x82>
    1330:	92 c0       	rjmp	.+292    	; 0x1456 <__fp_inf>
    1332:	dc c0       	rjmp	.+440    	; 0x14ec <__fp_szero>
    1334:	5f 3f       	cpi	r21, 0xFF	; 255
    1336:	ec f3       	brlt	.-6      	; 0x1332 <__divsf3_pse+0x6a>
    1338:	98 3e       	cpi	r25, 0xE8	; 232
    133a:	dc f3       	brlt	.-10     	; 0x1332 <__divsf3_pse+0x6a>
    133c:	86 95       	lsr	r24
    133e:	77 95       	ror	r23
    1340:	67 95       	ror	r22
    1342:	b7 95       	ror	r27
    1344:	f7 95       	ror	r31
    1346:	9f 5f       	subi	r25, 0xFF	; 255
    1348:	c9 f7       	brne	.-14     	; 0x133c <__divsf3_pse+0x74>
    134a:	88 0f       	add	r24, r24
    134c:	91 1d       	adc	r25, r1
    134e:	96 95       	lsr	r25
    1350:	87 95       	ror	r24
    1352:	97 f9       	bld	r25, 7
    1354:	08 95       	ret
    1356:	e1 e0       	ldi	r30, 0x01	; 1
    1358:	66 0f       	add	r22, r22
    135a:	77 1f       	adc	r23, r23
    135c:	88 1f       	adc	r24, r24
    135e:	bb 1f       	adc	r27, r27
    1360:	62 17       	cp	r22, r18
    1362:	73 07       	cpc	r23, r19
    1364:	84 07       	cpc	r24, r20
    1366:	ba 07       	cpc	r27, r26
    1368:	20 f0       	brcs	.+8      	; 0x1372 <__divsf3_pse+0xaa>
    136a:	62 1b       	sub	r22, r18
    136c:	73 0b       	sbc	r23, r19
    136e:	84 0b       	sbc	r24, r20
    1370:	ba 0b       	sbc	r27, r26
    1372:	ee 1f       	adc	r30, r30
    1374:	88 f7       	brcc	.-30     	; 0x1358 <__divsf3_pse+0x90>
    1376:	e0 95       	com	r30
    1378:	08 95       	ret

0000137a <__fixsfsi>:
    137a:	04 d0       	rcall	.+8      	; 0x1384 <__fixunssfsi>
    137c:	68 94       	set
    137e:	b1 11       	cpse	r27, r1
    1380:	b5 c0       	rjmp	.+362    	; 0x14ec <__fp_szero>
    1382:	08 95       	ret

00001384 <__fixunssfsi>:
    1384:	98 d0       	rcall	.+304    	; 0x14b6 <__fp_splitA>
    1386:	88 f0       	brcs	.+34     	; 0x13aa <__fixunssfsi+0x26>
    1388:	9f 57       	subi	r25, 0x7F	; 127
    138a:	90 f0       	brcs	.+36     	; 0x13b0 <__fixunssfsi+0x2c>
    138c:	b9 2f       	mov	r27, r25
    138e:	99 27       	eor	r25, r25
    1390:	b7 51       	subi	r27, 0x17	; 23
    1392:	a0 f0       	brcs	.+40     	; 0x13bc <__fixunssfsi+0x38>
    1394:	d1 f0       	breq	.+52     	; 0x13ca <__fixunssfsi+0x46>
    1396:	66 0f       	add	r22, r22
    1398:	77 1f       	adc	r23, r23
    139a:	88 1f       	adc	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	1a f0       	brmi	.+6      	; 0x13a6 <__fixunssfsi+0x22>
    13a0:	ba 95       	dec	r27
    13a2:	c9 f7       	brne	.-14     	; 0x1396 <__fixunssfsi+0x12>
    13a4:	12 c0       	rjmp	.+36     	; 0x13ca <__fixunssfsi+0x46>
    13a6:	b1 30       	cpi	r27, 0x01	; 1
    13a8:	81 f0       	breq	.+32     	; 0x13ca <__fixunssfsi+0x46>
    13aa:	9f d0       	rcall	.+318    	; 0x14ea <__fp_zero>
    13ac:	b1 e0       	ldi	r27, 0x01	; 1
    13ae:	08 95       	ret
    13b0:	9c c0       	rjmp	.+312    	; 0x14ea <__fp_zero>
    13b2:	67 2f       	mov	r22, r23
    13b4:	78 2f       	mov	r23, r24
    13b6:	88 27       	eor	r24, r24
    13b8:	b8 5f       	subi	r27, 0xF8	; 248
    13ba:	39 f0       	breq	.+14     	; 0x13ca <__fixunssfsi+0x46>
    13bc:	b9 3f       	cpi	r27, 0xF9	; 249
    13be:	cc f3       	brlt	.-14     	; 0x13b2 <__fixunssfsi+0x2e>
    13c0:	86 95       	lsr	r24
    13c2:	77 95       	ror	r23
    13c4:	67 95       	ror	r22
    13c6:	b3 95       	inc	r27
    13c8:	d9 f7       	brne	.-10     	; 0x13c0 <__fixunssfsi+0x3c>
    13ca:	3e f4       	brtc	.+14     	; 0x13da <__fixunssfsi+0x56>
    13cc:	90 95       	com	r25
    13ce:	80 95       	com	r24
    13d0:	70 95       	com	r23
    13d2:	61 95       	neg	r22
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	8f 4f       	sbci	r24, 0xFF	; 255
    13d8:	9f 4f       	sbci	r25, 0xFF	; 255
    13da:	08 95       	ret

000013dc <__floatunsisf>:
    13dc:	e8 94       	clt
    13de:	09 c0       	rjmp	.+18     	; 0x13f2 <__floatsisf+0x12>

000013e0 <__floatsisf>:
    13e0:	97 fb       	bst	r25, 7
    13e2:	3e f4       	brtc	.+14     	; 0x13f2 <__floatsisf+0x12>
    13e4:	90 95       	com	r25
    13e6:	80 95       	com	r24
    13e8:	70 95       	com	r23
    13ea:	61 95       	neg	r22
    13ec:	7f 4f       	sbci	r23, 0xFF	; 255
    13ee:	8f 4f       	sbci	r24, 0xFF	; 255
    13f0:	9f 4f       	sbci	r25, 0xFF	; 255
    13f2:	99 23       	and	r25, r25
    13f4:	a9 f0       	breq	.+42     	; 0x1420 <__floatsisf+0x40>
    13f6:	f9 2f       	mov	r31, r25
    13f8:	96 e9       	ldi	r25, 0x96	; 150
    13fa:	bb 27       	eor	r27, r27
    13fc:	93 95       	inc	r25
    13fe:	f6 95       	lsr	r31
    1400:	87 95       	ror	r24
    1402:	77 95       	ror	r23
    1404:	67 95       	ror	r22
    1406:	b7 95       	ror	r27
    1408:	f1 11       	cpse	r31, r1
    140a:	f8 cf       	rjmp	.-16     	; 0x13fc <__floatsisf+0x1c>
    140c:	fa f4       	brpl	.+62     	; 0x144c <__floatsisf+0x6c>
    140e:	bb 0f       	add	r27, r27
    1410:	11 f4       	brne	.+4      	; 0x1416 <__floatsisf+0x36>
    1412:	60 ff       	sbrs	r22, 0
    1414:	1b c0       	rjmp	.+54     	; 0x144c <__floatsisf+0x6c>
    1416:	6f 5f       	subi	r22, 0xFF	; 255
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	8f 4f       	sbci	r24, 0xFF	; 255
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	16 c0       	rjmp	.+44     	; 0x144c <__floatsisf+0x6c>
    1420:	88 23       	and	r24, r24
    1422:	11 f0       	breq	.+4      	; 0x1428 <__floatsisf+0x48>
    1424:	96 e9       	ldi	r25, 0x96	; 150
    1426:	11 c0       	rjmp	.+34     	; 0x144a <__floatsisf+0x6a>
    1428:	77 23       	and	r23, r23
    142a:	21 f0       	breq	.+8      	; 0x1434 <__floatsisf+0x54>
    142c:	9e e8       	ldi	r25, 0x8E	; 142
    142e:	87 2f       	mov	r24, r23
    1430:	76 2f       	mov	r23, r22
    1432:	05 c0       	rjmp	.+10     	; 0x143e <__floatsisf+0x5e>
    1434:	66 23       	and	r22, r22
    1436:	71 f0       	breq	.+28     	; 0x1454 <__floatsisf+0x74>
    1438:	96 e8       	ldi	r25, 0x86	; 134
    143a:	86 2f       	mov	r24, r22
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	2a f0       	brmi	.+10     	; 0x144c <__floatsisf+0x6c>
    1442:	9a 95       	dec	r25
    1444:	66 0f       	add	r22, r22
    1446:	77 1f       	adc	r23, r23
    1448:	88 1f       	adc	r24, r24
    144a:	da f7       	brpl	.-10     	; 0x1442 <__floatsisf+0x62>
    144c:	88 0f       	add	r24, r24
    144e:	96 95       	lsr	r25
    1450:	87 95       	ror	r24
    1452:	97 f9       	bld	r25, 7
    1454:	08 95       	ret

00001456 <__fp_inf>:
    1456:	97 f9       	bld	r25, 7
    1458:	9f 67       	ori	r25, 0x7F	; 127
    145a:	80 e8       	ldi	r24, 0x80	; 128
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	08 95       	ret

00001462 <__fp_nan>:
    1462:	9f ef       	ldi	r25, 0xFF	; 255
    1464:	80 ec       	ldi	r24, 0xC0	; 192
    1466:	08 95       	ret

00001468 <__fp_pscA>:
    1468:	00 24       	eor	r0, r0
    146a:	0a 94       	dec	r0
    146c:	16 16       	cp	r1, r22
    146e:	17 06       	cpc	r1, r23
    1470:	18 06       	cpc	r1, r24
    1472:	09 06       	cpc	r0, r25
    1474:	08 95       	ret

00001476 <__fp_pscB>:
    1476:	00 24       	eor	r0, r0
    1478:	0a 94       	dec	r0
    147a:	12 16       	cp	r1, r18
    147c:	13 06       	cpc	r1, r19
    147e:	14 06       	cpc	r1, r20
    1480:	05 06       	cpc	r0, r21
    1482:	08 95       	ret

00001484 <__fp_round>:
    1484:	09 2e       	mov	r0, r25
    1486:	03 94       	inc	r0
    1488:	00 0c       	add	r0, r0
    148a:	11 f4       	brne	.+4      	; 0x1490 <__fp_round+0xc>
    148c:	88 23       	and	r24, r24
    148e:	52 f0       	brmi	.+20     	; 0x14a4 <__fp_round+0x20>
    1490:	bb 0f       	add	r27, r27
    1492:	40 f4       	brcc	.+16     	; 0x14a4 <__fp_round+0x20>
    1494:	bf 2b       	or	r27, r31
    1496:	11 f4       	brne	.+4      	; 0x149c <__fp_round+0x18>
    1498:	60 ff       	sbrs	r22, 0
    149a:	04 c0       	rjmp	.+8      	; 0x14a4 <__fp_round+0x20>
    149c:	6f 5f       	subi	r22, 0xFF	; 255
    149e:	7f 4f       	sbci	r23, 0xFF	; 255
    14a0:	8f 4f       	sbci	r24, 0xFF	; 255
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	08 95       	ret

000014a6 <__fp_split3>:
    14a6:	57 fd       	sbrc	r21, 7
    14a8:	90 58       	subi	r25, 0x80	; 128
    14aa:	44 0f       	add	r20, r20
    14ac:	55 1f       	adc	r21, r21
    14ae:	59 f0       	breq	.+22     	; 0x14c6 <__fp_splitA+0x10>
    14b0:	5f 3f       	cpi	r21, 0xFF	; 255
    14b2:	71 f0       	breq	.+28     	; 0x14d0 <__fp_splitA+0x1a>
    14b4:	47 95       	ror	r20

000014b6 <__fp_splitA>:
    14b6:	88 0f       	add	r24, r24
    14b8:	97 fb       	bst	r25, 7
    14ba:	99 1f       	adc	r25, r25
    14bc:	61 f0       	breq	.+24     	; 0x14d6 <__fp_splitA+0x20>
    14be:	9f 3f       	cpi	r25, 0xFF	; 255
    14c0:	79 f0       	breq	.+30     	; 0x14e0 <__fp_splitA+0x2a>
    14c2:	87 95       	ror	r24
    14c4:	08 95       	ret
    14c6:	12 16       	cp	r1, r18
    14c8:	13 06       	cpc	r1, r19
    14ca:	14 06       	cpc	r1, r20
    14cc:	55 1f       	adc	r21, r21
    14ce:	f2 cf       	rjmp	.-28     	; 0x14b4 <__fp_split3+0xe>
    14d0:	46 95       	lsr	r20
    14d2:	f1 df       	rcall	.-30     	; 0x14b6 <__fp_splitA>
    14d4:	08 c0       	rjmp	.+16     	; 0x14e6 <__fp_splitA+0x30>
    14d6:	16 16       	cp	r1, r22
    14d8:	17 06       	cpc	r1, r23
    14da:	18 06       	cpc	r1, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	f1 cf       	rjmp	.-30     	; 0x14c2 <__fp_splitA+0xc>
    14e0:	86 95       	lsr	r24
    14e2:	71 05       	cpc	r23, r1
    14e4:	61 05       	cpc	r22, r1
    14e6:	08 94       	sec
    14e8:	08 95       	ret

000014ea <__fp_zero>:
    14ea:	e8 94       	clt

000014ec <__fp_szero>:
    14ec:	bb 27       	eor	r27, r27
    14ee:	66 27       	eor	r22, r22
    14f0:	77 27       	eor	r23, r23
    14f2:	cb 01       	movw	r24, r22
    14f4:	97 f9       	bld	r25, 7
    14f6:	08 95       	ret

000014f8 <__divmodhi4>:
    14f8:	97 fb       	bst	r25, 7
    14fa:	07 2e       	mov	r0, r23
    14fc:	16 f4       	brtc	.+4      	; 0x1502 <__divmodhi4+0xa>
    14fe:	00 94       	com	r0
    1500:	06 d0       	rcall	.+12     	; 0x150e <__divmodhi4_neg1>
    1502:	77 fd       	sbrc	r23, 7
    1504:	08 d0       	rcall	.+16     	; 0x1516 <__divmodhi4_neg2>
    1506:	1a d0       	rcall	.+52     	; 0x153c <__udivmodhi4>
    1508:	07 fc       	sbrc	r0, 7
    150a:	05 d0       	rcall	.+10     	; 0x1516 <__divmodhi4_neg2>
    150c:	3e f4       	brtc	.+14     	; 0x151c <__divmodhi4_exit>

0000150e <__divmodhi4_neg1>:
    150e:	90 95       	com	r25
    1510:	81 95       	neg	r24
    1512:	9f 4f       	sbci	r25, 0xFF	; 255
    1514:	08 95       	ret

00001516 <__divmodhi4_neg2>:
    1516:	70 95       	com	r23
    1518:	61 95       	neg	r22
    151a:	7f 4f       	sbci	r23, 0xFF	; 255

0000151c <__divmodhi4_exit>:
    151c:	08 95       	ret

0000151e <__umulhisi3>:
    151e:	a2 9f       	mul	r26, r18
    1520:	b0 01       	movw	r22, r0
    1522:	b3 9f       	mul	r27, r19
    1524:	c0 01       	movw	r24, r0
    1526:	a3 9f       	mul	r26, r19
    1528:	70 0d       	add	r23, r0
    152a:	81 1d       	adc	r24, r1
    152c:	11 24       	eor	r1, r1
    152e:	91 1d       	adc	r25, r1
    1530:	b2 9f       	mul	r27, r18
    1532:	70 0d       	add	r23, r0
    1534:	81 1d       	adc	r24, r1
    1536:	11 24       	eor	r1, r1
    1538:	91 1d       	adc	r25, r1
    153a:	08 95       	ret

0000153c <__udivmodhi4>:
    153c:	aa 1b       	sub	r26, r26
    153e:	bb 1b       	sub	r27, r27
    1540:	51 e1       	ldi	r21, 0x11	; 17
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <__udivmodhi4_ep>

00001544 <__udivmodhi4_loop>:
    1544:	aa 1f       	adc	r26, r26
    1546:	bb 1f       	adc	r27, r27
    1548:	a6 17       	cp	r26, r22
    154a:	b7 07       	cpc	r27, r23
    154c:	10 f0       	brcs	.+4      	; 0x1552 <__udivmodhi4_ep>
    154e:	a6 1b       	sub	r26, r22
    1550:	b7 0b       	sbc	r27, r23

00001552 <__udivmodhi4_ep>:
    1552:	88 1f       	adc	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	5a 95       	dec	r21
    1558:	a9 f7       	brne	.-22     	; 0x1544 <__udivmodhi4_loop>
    155a:	80 95       	com	r24
    155c:	90 95       	com	r25
    155e:	bc 01       	movw	r22, r24
    1560:	cd 01       	movw	r24, r26
    1562:	08 95       	ret

00001564 <_exit>:
    1564:	f8 94       	cli

00001566 <__stop_program>:
    1566:	ff cf       	rjmp	.-2      	; 0x1566 <__stop_program>
