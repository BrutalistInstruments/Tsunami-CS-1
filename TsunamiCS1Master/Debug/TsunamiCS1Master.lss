
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000234  00800200  00001726  000017ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001726  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d3  00800434  00800434  000019ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003eea  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016a8  00000000  00000000  00005bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017c5  00000000  00000000  0000725a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000594  00000000  00000000  00008a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f07  00000000  00000000  00008fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d6d  00000000  00000000  00009ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000bc28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 85 08 	jmp	0x110a	; 0x110a <__vector_27>
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__vector_36>
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e2       	ldi	r30, 0x26	; 38
      fc:	f7 e1       	ldi	r31, 0x17	; 23
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 33       	cpi	r26, 0x34	; 52
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	27 e0       	ldi	r18, 0x07	; 7
     110:	a4 e3       	ldi	r26, 0x34	; 52
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a7 30       	cpi	r26, 0x07	; 7
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	13 d4       	rcall	.+2086   	; 0x946 <main>
     120:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     126:	8f ef       	ldi	r24, 0xFF	; 255
     128:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     12a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons
	PORTB = 0B00011111;
     12e:	8f e1       	ldi	r24, 0x1F	; 31
     130:	85 b9       	out	0x05, r24	; 5
     132:	08 95       	ret

00000134 <listenTrigButtons>:
	//what ports are the encoder buttons on?
}


void listenTrigButtons()
{
     134:	8f 92       	push	r8
     136:	9f 92       	push	r9
     138:	af 92       	push	r10
     13a:	bf 92       	push	r11
     13c:	cf 92       	push	r12
     13e:	df 92       	push	r13
     140:	ef 92       	push	r14
     142:	ff 92       	push	r15
     144:	1f 93       	push	r17
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     14a:	c0 91 09 01 	lds	r28, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     14e:	c0 95       	com	r28
     150:	c0 93 a2 05 	sts	0x05A2, r28	; 0x8005a2 <buttonsCurrentCycle>
	currentTrigButtons = (buttonsCurrentCycle << 8) | (PINA^255);
     154:	80 b1       	in	r24, 0x00	; 0
     156:	d0 e0       	ldi	r29, 0x00	; 0
     158:	dc 2f       	mov	r29, r28
     15a:	cc 27       	eor	r28, r28
     15c:	80 95       	com	r24
     15e:	c8 2b       	or	r28, r24
     160:	d0 93 d1 05 	sts	0x05D1, r29	; 0x8005d1 <currentTrigButtons+0x1>
     164:	c0 93 d0 05 	sts	0x05D0, r28	; 0x8005d0 <currentTrigButtons>
	if(currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     168:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__data_end>
     16c:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <__data_end+0x1>
     170:	c8 17       	cp	r28, r24
     172:	d9 07       	cpc	r29, r25
     174:	09 f4       	brne	.+2      	; 0x178 <listenTrigButtons+0x44>
     176:	63 c0       	rjmp	.+198    	; 0x23e <listenTrigButtons+0x10a>
	{
		lastFullBits = currentTrigButtons;
     178:	d0 93 35 04 	sts	0x0435, r29	; 0x800435 <__data_end+0x1>
     17c:	c0 93 34 04 	sts	0x0434, r28	; 0x800434 <__data_end>
     180:	0f 2e       	mov	r0, r31
     182:	f0 e6       	ldi	r31, 0x60	; 96
     184:	cf 2e       	mov	r12, r31
     186:	f4 e0       	ldi	r31, 0x04	; 4
     188:	df 2e       	mov	r13, r31
     18a:	f0 2d       	mov	r31, r0
     18c:	0f 2e       	mov	r0, r31
     18e:	f0 ee       	ldi	r31, 0xE0	; 224
     190:	ef 2e       	mov	r14, r31
     192:	f4 e0       	ldi	r31, 0x04	; 4
     194:	ff 2e       	mov	r15, r31
     196:	f0 2d       	mov	r31, r0
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     198:	10 e0       	ldi	r17, 0x00	; 0
				
				case 2: ;
				//select track for sample assignment
				uint16_t currentSample = (currentPattern.trackSampleMSB[bc]<<8)|(currentPattern.trackSampleLSB[bc]);
				currentTrack = bc;
				numPrinter(trackSpoof, 7, 2, (bc+1));
     19a:	89 ee       	ldi	r24, 0xE9	; 233
     19c:	9f ef       	ldi	r25, 0xFF	; 255
     19e:	9c 01       	movw	r18, r24
     1a0:	28 54       	subi	r18, 0x48	; 72
     1a2:	34 40       	sbci	r19, 0x04	; 4
     1a4:	59 01       	movw	r10, r18
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
	{
		currentTrig = (fullBitsParse&1);
     1a6:	8c 2f       	mov	r24, r28
     1a8:	81 70       	andi	r24, 0x01	; 1
     1aa:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <currentTrig>
		if(currentTrig)
     1ae:	88 23       	and	r24, r24
     1b0:	d1 f1       	breq	.+116    	; 0x226 <listenTrigButtons+0xf2>
		{
			switch (encoderAValue)
     1b2:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <encoderAValue>
     1b6:	88 23       	and	r24, r24
     1b8:	19 f0       	breq	.+6      	; 0x1c0 <listenTrigButtons+0x8c>
     1ba:	82 30       	cpi	r24, 0x02	; 2
     1bc:	69 f0       	breq	.+26     	; 0x1d8 <listenTrigButtons+0xa4>
     1be:	33 c0       	rjmp	.+102    	; 0x226 <listenTrigButtons+0xf2>
			{
				
				//for "perfrmance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
				case 0: //performance mode
				//we trigger a sound here based on the location of bc
				trackControl(currentPattern.trackSampleLSB[bc], currentPattern.trackSampleMSB[bc], currentPattern.trackOutputRoute[bc], currentPattern.trackOutputRoute[bc]);
     1c0:	f6 01       	movw	r30, r12
     1c2:	40 81       	ld	r20, Z
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	f7 01       	movw	r30, r14
     1c8:	60 81       	ld	r22, Z
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	80 89       	ldd	r24, Z+16	; 0x10
     1ce:	9a 01       	movw	r18, r20
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0e 94 40 09 	call	0x1280	; 0x1280 <trackControl>
				//trackControl(3,0,0,1);
				//numPrinter(buttonTest,9, 2,bc);
				//outputS(buttonTest, 2);
				break;
     1d6:	27 c0       	rjmp	.+78     	; 0x226 <listenTrigButtons+0xf2>
				//step sequencer mode.
				break;
				
				case 2: ;
				//select track for sample assignment
				uint16_t currentSample = (currentPattern.trackSampleMSB[bc]<<8)|(currentPattern.trackSampleLSB[bc]);
     1d8:	f7 01       	movw	r30, r14
     1da:	80 80       	ld	r8, Z
     1dc:	91 2c       	mov	r9, r1
     1de:	98 2c       	mov	r9, r8
     1e0:	88 24       	eor	r8, r8
     1e2:	80 89       	ldd	r24, Z+16	; 0x10
     1e4:	88 2a       	or	r8, r24
				currentTrack = bc;
     1e6:	10 93 03 06 	sts	0x0603, r17	; 0x800603 <currentTrack>
				numPrinter(trackSpoof, 7, 2, (bc+1));
     1ea:	95 01       	movw	r18, r10
     1ec:	2c 0d       	add	r18, r12
     1ee:	3d 1d       	adc	r19, r13
     1f0:	42 e0       	ldi	r20, 0x02	; 2
     1f2:	67 e0       	ldi	r22, 0x07	; 7
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	92 e0       	ldi	r25, 0x02	; 2
     1f8:	d7 d5       	rcall	.+2990   	; 0xda8 <numPrinter>
				numPrinter(trackSpoof, 10, 4, currentSample);
     1fa:	94 01       	movw	r18, r8
     1fc:	44 e0       	ldi	r20, 0x04	; 4
     1fe:	6a e0       	ldi	r22, 0x0A	; 10
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	92 e0       	ldi	r25, 0x02	; 2
     204:	d1 d5       	rcall	.+2978   	; 0xda8 <numPrinter>
				outputS(trackSpoof, 1);
     206:	61 e0       	ldi	r22, 0x01	; 1
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	92 e0       	ldi	r25, 0x02	; 2
     20e:	b4 d5       	rcall	.+2920   	; 0xd78 <outputS>
				trackControl(currentPattern.trackSampleLSB[bc], currentPattern.trackSampleMSB[bc], currentPattern.trackOutputRoute[bc], currentPattern.trackOutputRoute[bc]);
     210:	f6 01       	movw	r30, r12
     212:	40 81       	ld	r20, Z
     214:	50 e0       	ldi	r21, 0x00	; 0
     216:	f7 01       	movw	r30, r14
     218:	60 81       	ld	r22, Z
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	80 89       	ldd	r24, Z+16	; 0x10
     21e:	9a 01       	movw	r18, r20
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 40 09 	call	0x1280	; 0x1280 <trackControl>
			}
		
		
		}
		
		fullBitsParse = fullBitsParse>>1;
     226:	d6 95       	lsr	r29
     228:	c7 95       	ror	r28
	{
		lastFullBits = currentTrigButtons;
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     22a:	1f 5f       	subi	r17, 0xFF	; 255
     22c:	ff ef       	ldi	r31, 0xFF	; 255
     22e:	cf 1a       	sub	r12, r31
     230:	df 0a       	sbc	r13, r31
     232:	2f ef       	ldi	r18, 0xFF	; 255
     234:	e2 1a       	sub	r14, r18
     236:	f2 0a       	sbc	r15, r18
     238:	10 31       	cpi	r17, 0x10	; 16
     23a:	09 f0       	breq	.+2      	; 0x23e <listenTrigButtons+0x10a>
     23c:	b4 cf       	rjmp	.-152    	; 0x1a6 <listenTrigButtons+0x72>
		fullBitsParse = fullBitsParse>>1;
	}
	}


}
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	1f 91       	pop	r17
     244:	ff 90       	pop	r15
     246:	ef 90       	pop	r14
     248:	df 90       	pop	r13
     24a:	cf 90       	pop	r12
     24c:	bf 90       	pop	r11
     24e:	af 90       	pop	r10
     250:	9f 90       	pop	r9
     252:	8f 90       	pop	r8
     254:	08 95       	ret

00000256 <listenGPButtons>:

void listenGPButtons() // are the encoder buttons here also?
{
     256:	08 95       	ret

00000258 <initEncoders>:
#include "globalVariables.h"

void initEncoders()
{
	//this is where we set the encoder pins to where they need to be
PORTH = 0B01111000; // enable internal pullup resistors.
     258:	88 e7       	ldi	r24, 0x78	; 120
     25a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     25e:	08 95       	ret

00000260 <pollEncoder0>:

}

void pollEncoder0(uint8_t *encoderC0)
{
	if(~PINH&(1<<PH6))
     260:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     264:	26 fd       	sbrc	r18, 6
     266:	12 c0       	rjmp	.+36     	; 0x28c <pollEncoder0+0x2c>
	{
		if(~PINH&(1<<PH5))
     268:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     26c:	25 fd       	sbrc	r18, 5
     26e:	05 c0       	rjmp	.+10     	; 0x27a <pollEncoder0+0x1a>
		{
			//left turn?
			*encoderC0= (*encoderC0)+1;
     270:	fc 01       	movw	r30, r24
     272:	20 81       	ld	r18, Z
     274:	2f 5f       	subi	r18, 0xFF	; 255
     276:	20 83       	st	Z, r18
     278:	04 c0       	rjmp	.+8      	; 0x282 <pollEncoder0+0x22>
		}
		else
		{
			*encoderC0= (*encoderC0)-1;
     27a:	fc 01       	movw	r30, r24
     27c:	20 81       	ld	r18, Z
     27e:	21 50       	subi	r18, 0x01	; 1
     280:	20 83       	st	Z, r18
		}
		//_delay_ms(2); // seems un-necesary with while loop
		while(~PINH&(1<<PH6)){} // this does make things smoother, but we need to be sure we have interupts for important things.
     282:	e0 e0       	ldi	r30, 0x00	; 0
     284:	f1 e0       	ldi	r31, 0x01	; 1
     286:	80 81       	ld	r24, Z
     288:	86 ff       	sbrs	r24, 6
     28a:	fd cf       	rjmp	.-6      	; 0x286 <pollEncoder0+0x26>
     28c:	08 95       	ret

0000028e <pollEncoder1>:

}

void pollEncoder1(uint8_t *encoderC1)
{
	if(~PINH&(1<<PH3))
     28e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     292:	23 fd       	sbrc	r18, 3
     294:	12 c0       	rjmp	.+36     	; 0x2ba <pollEncoder1+0x2c>
	{
		if(~PINH&(1<<PH4))
     296:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     29a:	24 fd       	sbrc	r18, 4
     29c:	05 c0       	rjmp	.+10     	; 0x2a8 <pollEncoder1+0x1a>
		{
			//left turn?
			*encoderC1=(*encoderC1)-1;
     29e:	fc 01       	movw	r30, r24
     2a0:	20 81       	ld	r18, Z
     2a2:	21 50       	subi	r18, 0x01	; 1
     2a4:	20 83       	st	Z, r18
     2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <pollEncoder1+0x22>
		}
		else
		{
			*encoderC1=(*encoderC1)+1;
     2a8:	fc 01       	movw	r30, r24
     2aa:	20 81       	ld	r18, Z
     2ac:	2f 5f       	subi	r18, 0xFF	; 255
     2ae:	20 83       	st	Z, r18
		}
		//_delay_ms(2); // seems un-necesary with while loop
		while(~PINH&(1<<PH3)){} // this does make things smoother, but we need to be sure we have interupts for important things.
     2b0:	e0 e0       	ldi	r30, 0x00	; 0
     2b2:	f1 e0       	ldi	r31, 0x01	; 1
     2b4:	80 81       	ld	r24, Z
     2b6:	83 ff       	sbrs	r24, 3
     2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <pollEncoder1+0x26>
     2ba:	08 95       	ret

000002bc <listenEncoders>:


void listenEncoders()
{
	//this is where we update the encoder variables.
	pollEncoder0(&encoderAValue);
     2bc:	87 e4       	ldi	r24, 0x47	; 71
     2be:	94 e0       	ldi	r25, 0x04	; 4
     2c0:	cf df       	rcall	.-98     	; 0x260 <pollEncoder0>
	pollEncoder1(&encoderBValue);
     2c2:	85 e0       	ldi	r24, 0x05	; 5
     2c4:	96 e0       	ldi	r25, 0x06	; 6
     2c6:	e3 cf       	rjmp	.-58     	; 0x28e <pollEncoder1>
     2c8:	08 95       	ret

000002ca <initBank>:

#include <avr/io.h>
#include "globalVariables.h"

void initBank()
{
     2ca:	e0 ef       	ldi	r30, 0xF0	; 240
     2cc:	f4 e0       	ldi	r31, 0x04	; 4
	for(uint8_t i = 0; i<16; i++)
     2ce:	80 e0       	ldi	r24, 0x00	; 0
	{
		currentPattern.trackSampleLSB[i] = i+1;
     2d0:	8f 5f       	subi	r24, 0xFF	; 255
     2d2:	81 93       	st	Z+, r24
#include <avr/io.h>
#include "globalVariables.h"

void initBank()
{
	for(uint8_t i = 0; i<16; i++)
     2d4:	80 31       	cpi	r24, 0x10	; 16
     2d6:	e1 f7       	brne	.-8      	; 0x2d0 <initBank+0x6>
	{
		currentPattern.trackSampleLSB[i] = i+1;
	}
	
	//assign midi notes C3 to E4
	currentPattern.midiTrackNote[0] = 0x30;
     2d8:	80 e3       	ldi	r24, 0x30	; 48
     2da:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <currentPattern+0x148>
	currentPattern.midiTrackNote[1] = 0x31;
     2de:	81 e3       	ldi	r24, 0x31	; 49
     2e0:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <currentPattern+0x149>
	currentPattern.midiTrackNote[2] = 0x32;
     2e4:	82 e3       	ldi	r24, 0x32	; 50
     2e6:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <currentPattern+0x14a>
	currentPattern.midiTrackNote[3] = 0x33;
     2ea:	83 e3       	ldi	r24, 0x33	; 51
     2ec:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <currentPattern+0x14b>
	currentPattern.midiTrackNote[4] = 0x34;
     2f0:	84 e3       	ldi	r24, 0x34	; 52
     2f2:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <currentPattern+0x14c>
	currentPattern.midiTrackNote[5] = 0x35;
     2f6:	85 e3       	ldi	r24, 0x35	; 53
     2f8:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <currentPattern+0x14d>
	currentPattern.midiTrackNote[6] = 0x36;
     2fc:	86 e3       	ldi	r24, 0x36	; 54
     2fe:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <currentPattern+0x14e>
	currentPattern.midiTrackNote[7] = 0x37;
     302:	87 e3       	ldi	r24, 0x37	; 55
     304:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <currentPattern+0x14f>
	currentPattern.midiTrackNote[8] = 0x38;
     308:	88 e3       	ldi	r24, 0x38	; 56
     30a:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <currentPattern+0x150>
	currentPattern.midiTrackNote[9] = 0x39;
     30e:	89 e3       	ldi	r24, 0x39	; 57
     310:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <currentPattern+0x151>
	currentPattern.midiTrackNote[10] = 0x3a;
     314:	8a e3       	ldi	r24, 0x3A	; 58
     316:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <currentPattern+0x152>
	currentPattern.midiTrackNote[11] = 0x3b;
     31a:	8b e3       	ldi	r24, 0x3B	; 59
     31c:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <currentPattern+0x153>
	currentPattern.midiTrackNote[12] = 0x3c;
     320:	8c e3       	ldi	r24, 0x3C	; 60
     322:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <currentPattern+0x154>
	currentPattern.midiTrackNote[13] = 0x3d;
     326:	8d e3       	ldi	r24, 0x3D	; 61
     328:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <currentPattern+0x155>
	currentPattern.midiTrackNote[14] = 0x3e;
     32c:	8e e3       	ldi	r24, 0x3E	; 62
     32e:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <currentPattern+0x156>
	currentPattern.midiTrackNote[15] = 0x3f;
     332:	8f e3       	ldi	r24, 0x3F	; 63
     334:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <currentPattern+0x157>
	currentPattern.patternBPM = 120;
     338:	88 e7       	ldi	r24, 0x78	; 120
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	90 93 a1 05 	sts	0x05A1, r25	; 0x8005a1 <currentPattern+0x159>
     340:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <currentPattern+0x158>
	currentPatternNumber = 1;
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <currentPatternNumber>
     34a:	08 95       	ret

0000034c <startADCConversion>:
char BPMSpoof[20] = "BPM: xxx            "; 

uint8_t startADCConversion()
{
	
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     34c:	ea e7       	ldi	r30, 0x7A	; 122
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	80 81       	ld	r24, Z
     352:	80 64       	ori	r24, 0x40	; 64
     354:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     356:	80 81       	ld	r24, Z
     358:	86 fd       	sbrc	r24, 6
     35a:	fd cf       	rjmp	.-6      	; 0x356 <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.
     35c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
}
     360:	08 95       	ret

00000362 <initADC>:

void initADC()
{
	DDRE = 0B00111000; //init pins E5, 4, and 3 as select pins on the external mux.
     362:	88 e3       	ldi	r24, 0x38	; 56
     364:	8d b9       	out	0x0d, r24	; 13
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     366:	80 e2       	ldi	r24, 0x20	; 32
     368:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     36c:	87 e8       	ldi	r24, 0x87	; 135
     36e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     372:	88 e0       	ldi	r24, 0x08	; 8
     374:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     378:	8f ef       	ldi	r24, 0xFF	; 255
     37a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     37e:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     382:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <knobBufferCounter>
	startADCConversion();
     386:	e2 cf       	rjmp	.-60     	; 0x34c <startADCConversion>
     388:	08 95       	ret

0000038a <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     38a:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     38c:	98 2f       	mov	r25, r24
     38e:	96 95       	lsr	r25
     390:	96 95       	lsr	r25
     392:	2f e2       	ldi	r18, 0x2F	; 47
     394:	92 9f       	mul	r25, r18
     396:	91 2d       	mov	r25, r1
     398:	11 24       	eor	r1, r1
     39a:	96 95       	lsr	r25
     39c:	2c e2       	ldi	r18, 0x2C	; 44
     39e:	92 9f       	mul	r25, r18
     3a0:	80 19       	sub	r24, r0
     3a2:	11 24       	eor	r1, r1
     3a4:	98 2f       	mov	r25, r24
	if(select<40)
     3a6:	88 32       	cpi	r24, 0x28	; 40
     3a8:	18 f5       	brcc	.+70     	; 0x3f0 <selectKnob+0x66>
	{
		ADCSRB = (1 << MUX5);
     3aa:	88 e0       	ldi	r24, 0x08	; 8
     3ac:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     3b0:	c9 2f       	mov	r28, r25
     3b2:	c7 70       	andi	r28, 0x07	; 7
		uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     3b4:	96 95       	lsr	r25
     3b6:	96 95       	lsr	r25
     3b8:	96 95       	lsr	r25
     3ba:	90 62       	ori	r25, 0x20	; 32
     3bc:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     3c0:	c5 df       	rcall	.-118    	; 0x34c <startADCConversion>
		//we might need to worry about the delay, but that's fine.
		
		//we put our select0 and select2 pins in the opposite ports, so we need to do some math to fix that.
		//easy stupid fix:
		switch (tempMuxSelect)
     3c2:	c3 30       	cpi	r28, 0x03	; 3
     3c4:	59 f0       	breq	.+22     	; 0x3dc <selectKnob+0x52>
     3c6:	18 f4       	brcc	.+6      	; 0x3ce <selectKnob+0x44>
     3c8:	c1 30       	cpi	r28, 0x01	; 1
     3ca:	31 f0       	breq	.+12     	; 0x3d8 <selectKnob+0x4e>
     3cc:	0c c0       	rjmp	.+24     	; 0x3e6 <selectKnob+0x5c>
     3ce:	c4 30       	cpi	r28, 0x04	; 4
     3d0:	39 f0       	breq	.+14     	; 0x3e0 <selectKnob+0x56>
     3d2:	c6 30       	cpi	r28, 0x06	; 6
     3d4:	39 f0       	breq	.+14     	; 0x3e4 <selectKnob+0x5a>
     3d6:	07 c0       	rjmp	.+14     	; 0x3e6 <selectKnob+0x5c>
		{
			case 1: muxSelect = 4;
     3d8:	c4 e0       	ldi	r28, 0x04	; 4
     3da:	05 c0       	rjmp	.+10     	; 0x3e6 <selectKnob+0x5c>
			break;
			
			case 3:	muxSelect = 6;
     3dc:	c6 e0       	ldi	r28, 0x06	; 6
			break;
     3de:	03 c0       	rjmp	.+6      	; 0x3e6 <selectKnob+0x5c>
			
			case 4: muxSelect = 1;
     3e0:	c1 e0       	ldi	r28, 0x01	; 1
			break;
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <selectKnob+0x5c>
			
			case 6: muxSelect = 3;
     3e4:	c3 e0       	ldi	r28, 0x03	; 3
			break;
		}

	//then the external multiplexer
		PORTE = (muxSelect << 3);
     3e6:	cc 0f       	add	r28, r28
     3e8:	cc 0f       	add	r28, r28
     3ea:	cc 0f       	add	r28, r28
     3ec:	ce b9       	out	0x0e, r28	; 14
     3ee:	20 c0       	rjmp	.+64     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     3f0:	89 32       	cpi	r24, 0x29	; 41
     3f2:	71 f0       	breq	.+28     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3f4:	18 f4       	brcc	.+6      	; 0x3fc <selectKnob+0x72>
     3f6:	88 32       	cpi	r24, 0x28	; 40
     3f8:	31 f0       	breq	.+12     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3fa:	1a c0       	rjmp	.+52     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     3fc:	8a 32       	cpi	r24, 0x2A	; 42
     3fe:	69 f0       	breq	.+26     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     400:	8b 32       	cpi	r24, 0x2B	; 43
     402:	81 f0       	breq	.+32     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     404:	15 c0       	rjmp	.+42     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     406:	85 e2       	ldi	r24, 0x25	; 37
     408:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     40c:	9f df       	rcall	.-194    	; 0x34c <startADCConversion>
		break;
     40e:	10 c0       	rjmp	.+32     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     410:	86 e2       	ldi	r24, 0x26	; 38
     412:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     416:	9a df       	rcall	.-204    	; 0x34c <startADCConversion>
		break;
     418:	0b c0       	rjmp	.+22     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     41a:	87 e2       	ldi	r24, 0x27	; 39
     41c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     420:	95 df       	rcall	.-214    	; 0x34c <startADCConversion>
		break;
     422:	06 c0       	rjmp	.+12     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     424:	80 e2       	ldi	r24, 0x20	; 32
     426:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     42a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     42e:	8e df       	rcall	.-228    	; 0x34c <startADCConversion>
		break;
		}
	
	}
	
}
     430:	cf 91       	pop	r28
     432:	08 95       	ret

00000434 <updateKnob>:

void updateKnob(uint8_t select)
{
     434:	cf 93       	push	r28
     436:	c8 2f       	mov	r28, r24

	knobBuffer[select] = startADCConversion(); 
     438:	89 df       	rcall	.-238    	; 0x34c <startADCConversion>
     43a:	ec 2f       	mov	r30, r28
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	ec 55       	subi	r30, 0x5C	; 92
     440:	fa 4f       	sbci	r31, 0xFA	; 250
     442:	80 83       	st	Z, r24
}
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <interperetKnob>:

void interperetKnob(uint8_t select)
{//this function will compare outputs, and write to our struct.
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
	select = select%44;
     452:	98 2f       	mov	r25, r24
     454:	96 95       	lsr	r25
     456:	96 95       	lsr	r25
     458:	2f e2       	ldi	r18, 0x2F	; 47
     45a:	92 9f       	mul	r25, r18
     45c:	91 2d       	mov	r25, r1
     45e:	11 24       	eor	r1, r1
     460:	96 95       	lsr	r25
     462:	2c e2       	ldi	r18, 0x2C	; 44
     464:	92 9f       	mul	r25, r18
     466:	80 19       	sub	r24, r0
     468:	11 24       	eor	r1, r1
     46a:	98 2f       	mov	r25, r24
	//we might not need this with the IIR filter
	float volumeDivisor = 3.1875;
	
	
	//Change from FIR filter to IIR filter.
     checkBuffer[select] += ((knobBuffer[select]-checkBuffer[select])/2);
     46c:	a8 2f       	mov	r26, r24
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	fd 01       	movw	r30, r26
     472:	ea 52       	subi	r30, 0x2A	; 42
     474:	fa 4f       	sbci	r31, 0xFA	; 250
     476:	60 81       	ld	r22, Z
     478:	fd 01       	movw	r30, r26
     47a:	ec 55       	subi	r30, 0x5C	; 92
     47c:	fa 4f       	sbci	r31, 0xFA	; 250
     47e:	e0 81       	ld	r30, Z
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	e6 1b       	sub	r30, r22
     484:	f1 09       	sbc	r31, r1
     486:	af 01       	movw	r20, r30
     488:	12 f4       	brpl	.+4      	; 0x48e <interperetKnob+0x46>
     48a:	4f 5f       	subi	r20, 0xFF	; 255
     48c:	5f 4f       	sbci	r21, 0xFF	; 255
     48e:	55 95       	asr	r21
     490:	47 95       	ror	r20
     492:	46 0f       	add	r20, r22
     494:	aa 52       	subi	r26, 0x2A	; 42
     496:	ba 4f       	sbci	r27, 0xFA	; 250
     498:	4c 93       	st	X, r20
	
	
	if (select<40)
     49a:	98 32       	cpi	r25, 0x28	; 40
     49c:	08 f0       	brcs	.+2      	; 0x4a0 <interperetKnob+0x58>
     49e:	07 c2       	rjmp	.+1038   	; 0x8ae <interperetKnob+0x466>
	{
		uint8_t positionSelect = select%8;
     4a0:	c9 2f       	mov	r28, r25
     4a2:	c7 70       	andi	r28, 0x07	; 7
		uint8_t bankSwitch = select/8;
		switch (bankSwitch)
     4a4:	96 95       	lsr	r25
     4a6:	96 95       	lsr	r25
     4a8:	96 95       	lsr	r25
     4aa:	92 30       	cpi	r25, 0x02	; 2
     4ac:	09 f4       	brne	.+2      	; 0x4b0 <interperetKnob+0x68>
     4ae:	d6 c0       	rjmp	.+428    	; 0x65c <interperetKnob+0x214>
     4b0:	30 f4       	brcc	.+12     	; 0x4be <interperetKnob+0x76>
     4b2:	99 23       	and	r25, r25
     4b4:	59 f0       	breq	.+22     	; 0x4cc <interperetKnob+0x84>
     4b6:	91 30       	cpi	r25, 0x01	; 1
     4b8:	09 f4       	brne	.+2      	; 0x4bc <interperetKnob+0x74>
     4ba:	93 c0       	rjmp	.+294    	; 0x5e2 <interperetKnob+0x19a>
     4bc:	17 c2       	rjmp	.+1070   	; 0x8ec <interperetKnob+0x4a4>
     4be:	93 30       	cpi	r25, 0x03	; 3
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <interperetKnob+0x7c>
     4c2:	4a c1       	rjmp	.+660    	; 0x758 <interperetKnob+0x310>
     4c4:	94 30       	cpi	r25, 0x04	; 4
     4c6:	09 f4       	brne	.+2      	; 0x4ca <interperetKnob+0x82>
     4c8:	64 c1       	rjmp	.+712    	; 0x792 <interperetKnob+0x34a>
     4ca:	10 c2       	rjmp	.+1056   	; 0x8ec <interperetKnob+0x4a4>
		{
			
			case 0:; //switch cases are "labels", used for goto stuff. so, you have to end the label before declaring variables. should be fine?
			
			int16_t currentOutVoulume = ((currentPattern.outputLevelMSB[positionSelect]<<8)|(currentPattern.outputLevelLSB[positionSelect])); 
     4cc:	0c 2f       	mov	r16, r28
     4ce:	10 e0       	ldi	r17, 0x00	; 0
			//this should be a regular integer between -70 and +10
			int16_t negCheckValue = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     4d0:	64 2f       	mov	r22, r20
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 cf 0a 	call	0x159e	; 0x159e <__floatsisf>
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	4c e4       	ldi	r20, 0x4C	; 76
     4e2:	50 e4       	ldi	r21, 0x40	; 64
     4e4:	c1 d7       	rcall	.+3970   	; 0x1468 <__divsf3>
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	4c e8       	ldi	r20, 0x8C	; 140
     4ec:	52 e4       	ldi	r21, 0x42	; 66
     4ee:	57 d7       	rcall	.+3758   	; 0x139e <__subsf3>
     4f0:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fixsfsi>
     4f4:	86 2f       	mov	r24, r22
     4f6:	97 2f       	mov	r25, r23
     4f8:	9c 01       	movw	r18, r24
		switch (bankSwitch)
		{
			
			case 0:; //switch cases are "labels", used for goto stuff. so, you have to end the label before declaring variables. should be fine?
			
			int16_t currentOutVoulume = ((currentPattern.outputLevelMSB[positionSelect]<<8)|(currentPattern.outputLevelLSB[positionSelect])); 
     4fa:	f8 01       	movw	r30, r16
     4fc:	e8 5b       	subi	r30, 0xB8	; 184
     4fe:	fb 4f       	sbci	r31, 0xFB	; 251
			//this should be a regular integer between -70 and +10
			int16_t negCheckValue = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentOutVoulume!=negCheckValue)
     500:	80 81       	ld	r24, Z
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	98 2f       	mov	r25, r24
     506:	88 27       	eor	r24, r24
     508:	40 85       	ldd	r20, Z+8	; 0x08
     50a:	84 2b       	or	r24, r20
     50c:	82 17       	cp	r24, r18
     50e:	93 07       	cpc	r25, r19
     510:	09 f4       	brne	.+2      	; 0x514 <interperetKnob+0xcc>
     512:	ec c1       	rjmp	.+984    	; 0x8ec <interperetKnob+0x4a4>
			{
				currentPattern.outputLevelLSB[positionSelect] = (negCheckValue);
     514:	f8 01       	movw	r30, r16
     516:	e8 5b       	subi	r30, 0xB8	; 184
     518:	fb 4f       	sbci	r31, 0xFB	; 251
     51a:	60 87       	std	Z+8, r22	; 0x08
				if(negCheckValue>(-1))
     51c:	33 23       	and	r19, r19
     51e:	64 f1       	brlt	.+88     	; 0x578 <interperetKnob+0x130>
				{
					currentPattern.outputLevelMSB[positionSelect] = 0;
     520:	f8 01       	movw	r30, r16
     522:	e8 5b       	subi	r30, 0xB8	; 184
     524:	fb 4f       	sbci	r31, 0xFB	; 251
     526:	10 82       	st	Z, r1
					//just hard coding this for now until we make a function.
					outVolumePrint[14] = 48;
     528:	e4 e6       	ldi	r30, 0x64	; 100
     52a:	f2 e0       	ldi	r31, 0x02	; 2
     52c:	80 e3       	ldi	r24, 0x30	; 48
     52e:	86 87       	std	Z+14, r24	; 0x0e
					outVolumePrint[16] = (currentPattern.outputLevelLSB[positionSelect]%10)+48;
     530:	2d ec       	ldi	r18, 0xCD	; 205
     532:	62 9f       	mul	r22, r18
     534:	81 2d       	mov	r24, r1
     536:	11 24       	eor	r1, r1
     538:	86 95       	lsr	r24
     53a:	86 95       	lsr	r24
     53c:	86 95       	lsr	r24
     53e:	88 0f       	add	r24, r24
     540:	98 2f       	mov	r25, r24
     542:	99 0f       	add	r25, r25
     544:	99 0f       	add	r25, r25
     546:	89 0f       	add	r24, r25
     548:	96 2f       	mov	r25, r22
     54a:	98 1b       	sub	r25, r24
     54c:	89 2f       	mov	r24, r25
     54e:	80 5d       	subi	r24, 0xD0	; 208
     550:	80 8b       	std	Z+16, r24	; 0x10
					outVolumePrint[15] = ((currentPattern.outputLevelLSB[positionSelect]%100)/10)+48;
     552:	89 e2       	ldi	r24, 0x29	; 41
     554:	68 9f       	mul	r22, r24
     556:	81 2d       	mov	r24, r1
     558:	11 24       	eor	r1, r1
     55a:	82 95       	swap	r24
     55c:	8f 70       	andi	r24, 0x0F	; 15
     55e:	94 e6       	ldi	r25, 0x64	; 100
     560:	89 9f       	mul	r24, r25
     562:	60 19       	sub	r22, r0
     564:	11 24       	eor	r1, r1
     566:	62 9f       	mul	r22, r18
     568:	61 2d       	mov	r22, r1
     56a:	11 24       	eor	r1, r1
     56c:	66 95       	lsr	r22
     56e:	66 95       	lsr	r22
     570:	66 95       	lsr	r22
     572:	60 5d       	subi	r22, 0xD0	; 208
     574:	67 87       	std	Z+15, r22	; 0x0f
     576:	23 c0       	rjmp	.+70     	; 0x5be <interperetKnob+0x176>
				}else
				{
					currentPattern.outputLevelMSB[positionSelect] = 255;
     578:	8f ef       	ldi	r24, 0xFF	; 255
     57a:	f8 01       	movw	r30, r16
     57c:	e8 5b       	subi	r30, 0xB8	; 184
     57e:	fb 4f       	sbci	r31, 0xFB	; 251
     580:	80 83       	st	Z, r24
					outVolumePrint[14] = '-';
     582:	e4 e6       	ldi	r30, 0x64	; 100
     584:	f2 e0       	ldi	r31, 0x02	; 2
     586:	8d e2       	ldi	r24, 0x2D	; 45
     588:	86 87       	std	Z+14, r24	; 0x0e
					outVolumePrint[15] = ((((currentPattern.outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     58a:	60 95       	com	r22
     58c:	26 2f       	mov	r18, r22
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	2f 5f       	subi	r18, 0xFF	; 255
     592:	3f 4f       	sbci	r19, 0xFF	; 255
     594:	c9 01       	movw	r24, r18
     596:	64 e6       	ldi	r22, 0x64	; 100
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divmodhi4>
     59e:	0f 2e       	mov	r0, r31
     5a0:	fa e0       	ldi	r31, 0x0A	; 10
     5a2:	ef 2e       	mov	r14, r31
     5a4:	f1 2c       	mov	r15, r1
     5a6:	f0 2d       	mov	r31, r0
     5a8:	b7 01       	movw	r22, r14
     5aa:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divmodhi4>
     5ae:	60 5d       	subi	r22, 0xD0	; 208
     5b0:	67 87       	std	Z+15, r22	; 0x0f
					outVolumePrint[16] = (((currentPattern.outputLevelLSB[positionSelect]^255)+1)%10)+48;
     5b2:	c9 01       	movw	r24, r18
     5b4:	b7 01       	movw	r22, r14
     5b6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divmodhi4>
     5ba:	80 5d       	subi	r24, 0xD0	; 208
     5bc:	80 8b       	std	Z+16, r24	; 0x10
				}
				//then output to screen. 
				outVolumePrint[10] = positionSelect + 49;
     5be:	cf 5c       	subi	r28, 0xCF	; 207
     5c0:	c0 93 6e 02 	sts	0x026E, r28	; 0x80026e <outVolumePrint+0xa>
				outputS(outVolumePrint, 3);
     5c4:	63 e0       	ldi	r22, 0x03	; 3
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	84 e6       	ldi	r24, 0x64	; 100
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	d5 d3       	rcall	.+1962   	; 0xd78 <outputS>
				setOutputVolume(currentPattern.outputLevelLSB[positionSelect], currentPattern.outputLevelMSB[positionSelect], positionSelect);
     5ce:	f8 01       	movw	r30, r16
     5d0:	e8 5b       	subi	r30, 0xB8	; 184
     5d2:	fb 4f       	sbci	r31, 0xFB	; 251
     5d4:	60 81       	ld	r22, Z
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	80 85       	ldd	r24, Z+8	; 0x08
     5da:	a8 01       	movw	r20, r16
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	75 d6       	rcall	.+3306   	; 0x12ca <setOutputVolume>
     5e0:	85 c1       	rjmp	.+778    	; 0x8ec <interperetKnob+0x4a4>
			}
			break;
			
 			case 1:
 			if(currentPattern.outputPitch[positionSelect]!=(checkBuffer[select]^128))
     5e2:	0c 2f       	mov	r16, r28
     5e4:	10 e0       	ldi	r17, 0x00	; 0
     5e6:	60 e8       	ldi	r22, 0x80	; 128
     5e8:	64 0f       	add	r22, r20
     5ea:	f8 01       	movw	r30, r16
     5ec:	e8 5b       	subi	r30, 0xB8	; 184
     5ee:	fb 4f       	sbci	r31, 0xFB	; 251
     5f0:	80 89       	ldd	r24, Z+16	; 0x10
     5f2:	86 17       	cp	r24, r22
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <interperetKnob+0x1b0>
     5f6:	7a c1       	rjmp	.+756    	; 0x8ec <interperetKnob+0x4a4>
 			{
 				(currentPattern.outputPitch[positionSelect]) = (checkBuffer[select]^128);
     5f8:	f8 01       	movw	r30, r16
     5fa:	e8 5b       	subi	r30, 0xB8	; 184
     5fc:	fb 4f       	sbci	r31, 0xFB	; 251
     5fe:	60 8b       	std	Z+16, r22	; 0x10
				 if(encoderAValue == 0)
     600:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <encoderAValue>
     604:	81 11       	cpse	r24, r1
     606:	20 c0       	rjmp	.+64     	; 0x648 <interperetKnob+0x200>
				 {
					 pitchPrint[5] = (positionSelect+49);
     608:	cf 5c       	subi	r28, 0xCF	; 207
     60a:	c0 93 7d 02 	sts	0x027D, r28	; 0x80027d <pitchPrint+0x5>
					 if(currentPattern.outputPitch[positionSelect]>>7)
     60e:	66 23       	and	r22, r22
     610:	64 f4       	brge	.+24     	; 0x62a <interperetKnob+0x1e2>
					 {
						 //again, hard coding.
						 pitchPrint[7] = '-';
     612:	8d e2       	ldi	r24, 0x2D	; 45
     614:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <pitchPrint+0x7>
						 numPrinter(pitchPrint, 8, 3, (currentPattern.outputPitch[positionSelect]^255));
     618:	26 2f       	mov	r18, r22
     61a:	20 95       	com	r18
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	43 e0       	ldi	r20, 0x03	; 3
     620:	68 e0       	ldi	r22, 0x08	; 8
     622:	88 e7       	ldi	r24, 0x78	; 120
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	c0 d3       	rcall	.+1920   	; 0xda8 <numPrinter>
     628:	0a c0       	rjmp	.+20     	; 0x63e <interperetKnob+0x1f6>
					 
					 }else{
						 pitchPrint[7] = '+';
     62a:	8b e2       	ldi	r24, 0x2B	; 43
     62c:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <pitchPrint+0x7>
					 numPrinter(pitchPrint,8,3,currentPattern.outputPitch[positionSelect]);}
     630:	26 2f       	mov	r18, r22
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	43 e0       	ldi	r20, 0x03	; 3
     636:	68 e0       	ldi	r22, 0x08	; 8
     638:	88 e7       	ldi	r24, 0x78	; 120
     63a:	92 e0       	ldi	r25, 0x02	; 2
     63c:	b5 d3       	rcall	.+1898   	; 0xda8 <numPrinter>
					 outputS(pitchPrint, 3);
     63e:	63 e0       	ldi	r22, 0x03	; 3
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	88 e7       	ldi	r24, 0x78	; 120
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	98 d3       	rcall	.+1840   	; 0xd78 <outputS>
     648:	f8 01       	movw	r30, r16
				 }
				 outputSampleRate(positionSelect, 0, currentPattern.outputPitch[positionSelect]);
     64a:	e8 5b       	subi	r30, 0xB8	; 184
     64c:	fb 4f       	sbci	r31, 0xFB	; 251
     64e:	40 89       	ldd	r20, Z+16	; 0x10
     650:	50 e0       	ldi	r21, 0x00	; 0
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	c8 01       	movw	r24, r16
     658:	7f d6       	rcall	.+3326   	; 0x1358 <outputSampleRate>
     65a:	48 c1       	rjmp	.+656    	; 0x8ec <interperetKnob+0x4a4>
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     65c:	0c 2f       	mov	r16, r28
     65e:	10 e0       	ldi	r17, 0x00	; 0
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     660:	64 2f       	mov	r22, r20
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	9a d7       	rcall	.+3892   	; 0x159e <__floatsisf>
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	4c e4       	ldi	r20, 0x4C	; 76
     670:	50 e4       	ldi	r21, 0x40	; 64
     672:	fa d6       	rcall	.+3572   	; 0x1468 <__divsf3>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	4c e8       	ldi	r20, 0x8C	; 140
     67a:	52 e4       	ldi	r21, 0x42	; 66
     67c:	90 d6       	rcall	.+3360   	; 0x139e <__subsf3>
     67e:	5c d7       	rcall	.+3768   	; 0x1538 <__fixsfsi>
     680:	86 2f       	mov	r24, r22
     682:	97 2f       	mov	r25, r23
     684:	9c 01       	movw	r18, r24
     686:	a8 01       	movw	r20, r16
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     688:	48 5b       	subi	r20, 0xB8	; 184
     68a:	5b 4f       	sbci	r21, 0xFB	; 251
     68c:	fa 01       	movw	r30, r20
     68e:	e8 5b       	subi	r30, 0xB8	; 184
     690:	ff 4f       	sbci	r31, 0xFF	; 255
     692:	80 81       	ld	r24, Z
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentEnvelopeVolume!=negCheckValueEnvelope)
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	98 2f       	mov	r25, r24
     698:	88 27       	eor	r24, r24
     69a:	70 96       	adiw	r30, 0x10	; 16
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     69c:	40 81       	ld	r20, Z
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentEnvelopeVolume!=negCheckValueEnvelope)
     69e:	84 2b       	or	r24, r20
     6a0:	82 17       	cp	r24, r18
     6a2:	93 07       	cpc	r25, r19
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <interperetKnob+0x260>
     6a6:	22 c1       	rjmp	.+580    	; 0x8ec <interperetKnob+0x4a4>
     6a8:	f8 01       	movw	r30, r16
			{
				currentPattern.trackFadeGainLSB[positionSelect] = (negCheckValueEnvelope);
     6aa:	e0 56       	subi	r30, 0x60	; 96
     6ac:	fb 4f       	sbci	r31, 0xFB	; 251
     6ae:	60 83       	st	Z, r22
     6b0:	33 23       	and	r19, r19
				if(negCheckValueEnvelope>(-1))
     6b2:	64 f1       	brlt	.+88     	; 0x70c <interperetKnob+0x2c4>
     6b4:	f8 01       	movw	r30, r16
				{
					currentPattern.trackFadeGainMSB[positionSelect] = 0;
     6b6:	e0 57       	subi	r30, 0x70	; 112
     6b8:	fb 4f       	sbci	r31, 0xFB	; 251
     6ba:	10 82       	st	Z, r1
     6bc:	ec e3       	ldi	r30, 0x3C	; 60
					//just hard coding this for now until we make a function.
					envelopeLevelPrint[15] = 48;
     6be:	f2 e0       	ldi	r31, 0x02	; 2
     6c0:	80 e3       	ldi	r24, 0x30	; 48
     6c2:	87 87       	std	Z+15, r24	; 0x0f
     6c4:	2d ec       	ldi	r18, 0xCD	; 205
					envelopeLevelPrint[17] = (currentPattern.trackFadeGainLSB[positionSelect]%10)+48;
     6c6:	62 9f       	mul	r22, r18
     6c8:	81 2d       	mov	r24, r1
     6ca:	11 24       	eor	r1, r1
     6cc:	86 95       	lsr	r24
     6ce:	86 95       	lsr	r24
     6d0:	86 95       	lsr	r24
     6d2:	88 0f       	add	r24, r24
     6d4:	98 2f       	mov	r25, r24
     6d6:	99 0f       	add	r25, r25
     6d8:	99 0f       	add	r25, r25
     6da:	89 0f       	add	r24, r25
     6dc:	96 2f       	mov	r25, r22
     6de:	98 1b       	sub	r25, r24
     6e0:	89 2f       	mov	r24, r25
     6e2:	80 5d       	subi	r24, 0xD0	; 208
     6e4:	81 8b       	std	Z+17, r24	; 0x11
     6e6:	89 e2       	ldi	r24, 0x29	; 41
					envelopeLevelPrint[16] = ((currentPattern.trackFadeGainLSB[positionSelect]%100)/10)+48;
     6e8:	68 9f       	mul	r22, r24
     6ea:	81 2d       	mov	r24, r1
     6ec:	11 24       	eor	r1, r1
     6ee:	82 95       	swap	r24
     6f0:	8f 70       	andi	r24, 0x0F	; 15
     6f2:	94 e6       	ldi	r25, 0x64	; 100
     6f4:	89 9f       	mul	r24, r25
     6f6:	60 19       	sub	r22, r0
     6f8:	11 24       	eor	r1, r1
     6fa:	62 9f       	mul	r22, r18
     6fc:	61 2d       	mov	r22, r1
     6fe:	11 24       	eor	r1, r1
     700:	66 95       	lsr	r22
     702:	66 95       	lsr	r22
     704:	66 95       	lsr	r22
     706:	60 5d       	subi	r22, 0xD0	; 208
     708:	60 8b       	std	Z+16, r22	; 0x10
     70a:	1d c0       	rjmp	.+58     	; 0x746 <interperetKnob+0x2fe>
     70c:	f8 01       	movw	r30, r16
				}else
				{
					currentPattern.trackFadeGainMSB[positionSelect] = 255;
     70e:	e0 57       	subi	r30, 0x70	; 112
     710:	fb 4f       	sbci	r31, 0xFB	; 251
     712:	8f ef       	ldi	r24, 0xFF	; 255
     714:	80 83       	st	Z, r24
     716:	ec e3       	ldi	r30, 0x3C	; 60
					envelopeLevelPrint[15] = '-';
     718:	f2 e0       	ldi	r31, 0x02	; 2
     71a:	8d e2       	ldi	r24, 0x2D	; 45
     71c:	87 87       	std	Z+15, r24	; 0x0f
					envelopeLevelPrint[16] = ((((currentPattern.trackFadeGainLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     71e:	60 95       	com	r22
     720:	26 2f       	mov	r18, r22
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	2f 5f       	subi	r18, 0xFF	; 255
     726:	3f 4f       	sbci	r19, 0xFF	; 255
     728:	c9 01       	movw	r24, r18
     72a:	64 e6       	ldi	r22, 0x64	; 100
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	c3 d7       	rcall	.+3974   	; 0x16b6 <__divmodhi4>
     730:	0a e0       	ldi	r16, 0x0A	; 10
     732:	10 e0       	ldi	r17, 0x00	; 0
     734:	b8 01       	movw	r22, r16
     736:	bf d7       	rcall	.+3966   	; 0x16b6 <__divmodhi4>
     738:	60 5d       	subi	r22, 0xD0	; 208
     73a:	60 8b       	std	Z+16, r22	; 0x10
					envelopeLevelPrint[17] = (((currentPattern.trackFadeGainLSB[positionSelect]^255)+1)%10)+48;
     73c:	c9 01       	movw	r24, r18
     73e:	b8 01       	movw	r22, r16
     740:	ba d7       	rcall	.+3956   	; 0x16b6 <__divmodhi4>
     742:	80 5d       	subi	r24, 0xD0	; 208
     744:	81 8b       	std	Z+17, r24	; 0x11
				}
				//then output to screen.
				envelopeLevelPrint[13] = positionSelect + 49;
     746:	cf 5c       	subi	r28, 0xCF	; 207
     748:	c0 93 49 02 	sts	0x0249, r28	; 0x800249 <envelopeLevelPrint+0xd>
				outputS(envelopeLevelPrint, 3);
     74c:	63 e0       	ldi	r22, 0x03	; 3
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	8c e3       	ldi	r24, 0x3C	; 60
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	11 d3       	rcall	.+1570   	; 0xd78 <outputS>
     756:	ca c0       	rjmp	.+404    	; 0x8ec <interperetKnob+0x4a4>
     758:	8c 2f       	mov	r24, r28
				//nothing to "set", since envelopes are triggered after a sound is playing.
			}
			break;
 			
 			case 3:
 			if(currentPattern.trackFadeTimeMSB[positionSelect]!=checkBuffer[select])
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	fc 01       	movw	r30, r24
     75e:	e0 55       	subi	r30, 0x50	; 80
     760:	fb 4f       	sbci	r31, 0xFB	; 251
     762:	20 81       	ld	r18, Z
     764:	42 17       	cp	r20, r18
     766:	09 f4       	brne	.+2      	; 0x76a <interperetKnob+0x322>
     768:	c1 c0       	rjmp	.+386    	; 0x8ec <interperetKnob+0x4a4>
 			{
 				(currentPattern.trackFadeTimeMSB[positionSelect]) = checkBuffer[select];
     76a:	fc 01       	movw	r30, r24
     76c:	e0 55       	subi	r30, 0x50	; 80
     76e:	fb 4f       	sbci	r31, 0xFB	; 251
     770:	40 83       	st	Z, r20
				 numPrinter(envelopeTimePrint,14,4,currentPattern.trackFadeTimeMSB[positionSelect]);
     772:	24 2f       	mov	r18, r20
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	44 e0       	ldi	r20, 0x04	; 4
     778:	6e e0       	ldi	r22, 0x0E	; 14
     77a:	88 e2       	ldi	r24, 0x28	; 40
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	14 d3       	rcall	.+1576   	; 0xda8 <numPrinter>
				 envelopeTimePrint[12] = positionSelect+49;
     780:	cf 5c       	subi	r28, 0xCF	; 207
     782:	c0 93 34 02 	sts	0x0234, r28	; 0x800234 <envelopeTimePrint+0xc>
				 outputS(envelopeTimePrint, 3);
     786:	63 e0       	ldi	r22, 0x03	; 3
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	88 e2       	ldi	r24, 0x28	; 40
     78c:	92 e0       	ldi	r25, 0x02	; 2
     78e:	f4 d2       	rcall	.+1512   	; 0xd78 <outputS>
 			}
 			break;
 			
 			case 4:;
 			int16_t currentTrackVolume = ((currentPattern.trackMainVolumeMSB[positionSelect]<<8)|(currentPattern.trackMainVolumeLSB[positionSelect]));
     790:	ad c0       	rjmp	.+346    	; 0x8ec <interperetKnob+0x4a4>
     792:	0c 2f       	mov	r16, r28
 			int16_t negCheckValueTrack = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     794:	10 e0       	ldi	r17, 0x00	; 0
     796:	64 2f       	mov	r22, r20
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	ff d6       	rcall	.+3582   	; 0x159e <__floatsisf>
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	4c e4       	ldi	r20, 0x4C	; 76
     7a6:	50 e4       	ldi	r21, 0x40	; 64
     7a8:	5f d6       	rcall	.+3262   	; 0x1468 <__divsf3>
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	4c e8       	ldi	r20, 0x8C	; 140
     7b0:	52 e4       	ldi	r21, 0x42	; 66
     7b2:	f5 d5       	rcall	.+3050   	; 0x139e <__subsf3>
     7b4:	c1 d6       	rcall	.+3458   	; 0x1538 <__fixsfsi>
     7b6:	86 2f       	mov	r24, r22
     7b8:	97 2f       	mov	r25, r23
     7ba:	9c 01       	movw	r18, r24
     7bc:	f8 01       	movw	r30, r16
				 outputS(envelopeTimePrint, 3);
 			}
 			break;
 			
 			case 4:;
 			int16_t currentTrackVolume = ((currentPattern.trackMainVolumeMSB[positionSelect]<<8)|(currentPattern.trackMainVolumeLSB[positionSelect]));
     7be:	e8 5b       	subi	r30, 0xB8	; 184
     7c0:	fb 4f       	sbci	r31, 0xFB	; 251
     7c2:	80 a5       	ldd	r24, Z+40	; 0x28
 			int16_t negCheckValueTrack = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
 			if(currentTrackVolume!=negCheckValueTrack)
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	98 2f       	mov	r25, r24
     7c8:	88 27       	eor	r24, r24
     7ca:	40 ad       	ldd	r20, Z+56	; 0x38
     7cc:	84 2b       	or	r24, r20
     7ce:	82 17       	cp	r24, r18
     7d0:	93 07       	cpc	r25, r19
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <interperetKnob+0x38e>
     7d4:	8b c0       	rjmp	.+278    	; 0x8ec <interperetKnob+0x4a4>
     7d6:	f8 01       	movw	r30, r16
 			{
	 			currentPattern.trackMainVolumeLSB[positionSelect] = (negCheckValueTrack);
     7d8:	e8 5b       	subi	r30, 0xB8	; 184
     7da:	fb 4f       	sbci	r31, 0xFB	; 251
     7dc:	60 af       	std	Z+56, r22	; 0x38
     7de:	33 23       	and	r19, r19
	 			if(negCheckValueTrack>(-1))
     7e0:	64 f1       	brlt	.+88     	; 0x83a <interperetKnob+0x3f2>
     7e2:	f8 01       	movw	r30, r16
	 			{
		 			currentPattern.trackMainVolumeMSB[positionSelect] = 0;
     7e4:	e8 5b       	subi	r30, 0xB8	; 184
     7e6:	fb 4f       	sbci	r31, 0xFB	; 251
     7e8:	10 a6       	std	Z+40, r1	; 0x28
     7ea:	e0 e5       	ldi	r30, 0x50	; 80
		 			//just hard coding this for now until we make a function.
		 			trackVolumePrint[15] = 48;
     7ec:	f2 e0       	ldi	r31, 0x02	; 2
     7ee:	80 e3       	ldi	r24, 0x30	; 48
     7f0:	87 87       	std	Z+15, r24	; 0x0f
     7f2:	2d ec       	ldi	r18, 0xCD	; 205
		 			trackVolumePrint[17] = (currentPattern.trackMainVolumeLSB[positionSelect]%10)+48;
     7f4:	62 9f       	mul	r22, r18
     7f6:	81 2d       	mov	r24, r1
     7f8:	11 24       	eor	r1, r1
     7fa:	86 95       	lsr	r24
     7fc:	86 95       	lsr	r24
     7fe:	86 95       	lsr	r24
     800:	88 0f       	add	r24, r24
     802:	98 2f       	mov	r25, r24
     804:	99 0f       	add	r25, r25
     806:	99 0f       	add	r25, r25
     808:	89 0f       	add	r24, r25
     80a:	96 2f       	mov	r25, r22
     80c:	98 1b       	sub	r25, r24
     80e:	89 2f       	mov	r24, r25
     810:	80 5d       	subi	r24, 0xD0	; 208
     812:	81 8b       	std	Z+17, r24	; 0x11
     814:	89 e2       	ldi	r24, 0x29	; 41
		 			trackVolumePrint[16] = ((currentPattern.trackMainVolumeLSB[positionSelect]%100)/10)+48;
     816:	68 9f       	mul	r22, r24
     818:	81 2d       	mov	r24, r1
     81a:	11 24       	eor	r1, r1
     81c:	82 95       	swap	r24
     81e:	8f 70       	andi	r24, 0x0F	; 15
     820:	94 e6       	ldi	r25, 0x64	; 100
     822:	89 9f       	mul	r24, r25
     824:	60 19       	sub	r22, r0
     826:	11 24       	eor	r1, r1
     828:	62 9f       	mul	r22, r18
     82a:	61 2d       	mov	r22, r1
     82c:	11 24       	eor	r1, r1
     82e:	66 95       	lsr	r22
     830:	66 95       	lsr	r22
     832:	66 95       	lsr	r22
     834:	60 5d       	subi	r22, 0xD0	; 208
     836:	60 8b       	std	Z+16, r22	; 0x10
     838:	20 c0       	rjmp	.+64     	; 0x87a <interperetKnob+0x432>
     83a:	8f ef       	ldi	r24, 0xFF	; 255
	 			}else
	 			{
		 			currentPattern.trackMainVolumeMSB[positionSelect] = 255;
     83c:	f8 01       	movw	r30, r16
     83e:	e8 5b       	subi	r30, 0xB8	; 184
     840:	fb 4f       	sbci	r31, 0xFB	; 251
     842:	80 a7       	std	Z+40, r24	; 0x28
		 			trackVolumePrint[15] = '-';
     844:	e0 e5       	ldi	r30, 0x50	; 80
     846:	f2 e0       	ldi	r31, 0x02	; 2
     848:	8d e2       	ldi	r24, 0x2D	; 45
		 			trackVolumePrint[16] = ((((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     84a:	87 87       	std	Z+15, r24	; 0x0f
     84c:	60 95       	com	r22
     84e:	26 2f       	mov	r18, r22
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	2f 5f       	subi	r18, 0xFF	; 255
     854:	3f 4f       	sbci	r19, 0xFF	; 255
     856:	c9 01       	movw	r24, r18
     858:	64 e6       	ldi	r22, 0x64	; 100
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	2c d7       	rcall	.+3672   	; 0x16b6 <__divmodhi4>
     85e:	0f 2e       	mov	r0, r31
     860:	fa e0       	ldi	r31, 0x0A	; 10
     862:	ef 2e       	mov	r14, r31
     864:	f1 2c       	mov	r15, r1
     866:	f0 2d       	mov	r31, r0
     868:	b7 01       	movw	r22, r14
     86a:	25 d7       	rcall	.+3658   	; 0x16b6 <__divmodhi4>
     86c:	60 5d       	subi	r22, 0xD0	; 208
		 			trackVolumePrint[17] = (((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
     86e:	60 8b       	std	Z+16, r22	; 0x10
     870:	c9 01       	movw	r24, r18
     872:	b7 01       	movw	r22, r14
     874:	20 d7       	rcall	.+3648   	; 0x16b6 <__divmodhi4>
     876:	80 5d       	subi	r24, 0xD0	; 208
     878:	81 8b       	std	Z+17, r24	; 0x11
	 			}
	 			//then output to screen.
	 			trackVolumePrint[11] = positionSelect + 49;
     87a:	cf 5c       	subi	r28, 0xCF	; 207
     87c:	c0 93 5b 02 	sts	0x025B, r28	; 0x80025b <trackVolumePrint+0xb>
	 			outputS(trackVolumePrint, 3);
     880:	63 e0       	ldi	r22, 0x03	; 3
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	80 e5       	ldi	r24, 0x50	; 80
     886:	92 e0       	ldi	r25, 0x02	; 2
     888:	77 d2       	rcall	.+1262   	; 0xd78 <outputS>
	 			setTrackVolume(currentPattern.trackSampleLSB[positionSelect], currentPattern.trackSampleMSB[positionSelect],
				 currentPattern.trackMainVolumeLSB[positionSelect], currentPattern.trackMainVolumeMSB[positionSelect]);
     88a:	f8 01       	movw	r30, r16
     88c:	e8 5b       	subi	r30, 0xB8	; 184
     88e:	fb 4f       	sbci	r31, 0xFB	; 251
		 			trackVolumePrint[17] = (((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
	 			}
	 			//then output to screen.
	 			trackVolumePrint[11] = positionSelect + 49;
	 			outputS(trackVolumePrint, 3);
	 			setTrackVolume(currentPattern.trackSampleLSB[positionSelect], currentPattern.trackSampleMSB[positionSelect],
     890:	20 a5       	ldd	r18, Z+40	; 0x28
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 ad       	ldd	r20, Z+56	; 0x38
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	df 01       	movw	r26, r30
     89a:	a8 56       	subi	r26, 0x68	; 104
     89c:	bf 4f       	sbci	r27, 0xFF	; 255
     89e:	6c 91       	ld	r22, X
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	e8 55       	subi	r30, 0x58	; 88
     8a4:	ff 4f       	sbci	r31, 0xFF	; 255
     8a6:	80 81       	ld	r24, Z
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	32 d5       	rcall	.+2660   	; 0x1310 <setTrackVolume>
     8ac:	1f c0       	rjmp	.+62     	; 0x8ec <interperetKnob+0x4a4>
     8ae:	9a 32       	cpi	r25, 0x2A	; 42
		}
		
		
	}else
	{
		switch (select)
     8b0:	e9 f4       	brne	.+58     	; 0x8ec <interperetKnob+0x4a4>
     8b2:	24 2f       	mov	r18, r20
// 				gpKnob1 = checkValue;
// 			}
// 			break;
// 			
 			case 42:
 			if(currentPattern.patternBPM!=checkBuffer[select]+30)
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	22 5e       	subi	r18, 0xE2	; 226
     8b8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ba:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <currentPattern+0x158>
     8be:	90 91 a1 05 	lds	r25, 0x05A1	; 0x8005a1 <currentPattern+0x159>
     8c2:	82 17       	cp	r24, r18
     8c4:	93 07       	cpc	r25, r19
			{
 				currentPattern.patternBPM = checkBuffer[select]+30;
     8c6:	91 f0       	breq	.+36     	; 0x8ec <interperetKnob+0x4a4>
     8c8:	30 93 a1 05 	sts	0x05A1, r19	; 0x8005a1 <currentPattern+0x159>
     8cc:	20 93 a0 05 	sts	0x05A0, r18	; 0x8005a0 <currentPattern+0x158>
				if(encoderAValue==0){
     8d0:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <encoderAValue>
     8d4:	81 11       	cpse	r24, r1
				 numPrinter(BPMSpoof, 5, 3, currentPattern.patternBPM);
     8d6:	0a c0       	rjmp	.+20     	; 0x8ec <interperetKnob+0x4a4>
     8d8:	43 e0       	ldi	r20, 0x03	; 3
     8da:	65 e0       	ldi	r22, 0x05	; 5
     8dc:	84 e1       	ldi	r24, 0x14	; 20
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	63 d2       	rcall	.+1222   	; 0xda8 <numPrinter>
				 outputS(BPMSpoof, 2);
     8e2:	62 e0       	ldi	r22, 0x02	; 2
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	84 e1       	ldi	r24, 0x14	; 20
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	46 d2       	rcall	.+1164   	; 0xd78 <outputS>
     8ec:	cf 91       	pop	r28
// 			break;
		}
		
	}

}
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	ff 90       	pop	r15
     8f4:	ef 90       	pop	r14
     8f6:	08 95       	ret

000008f8 <listenKnobs>:
     8f8:	cf 93       	push	r28

void listenKnobs()
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     8fa:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
     8fc:	8c 2f       	mov	r24, r28
     8fe:	45 dd       	rcall	.-1398   	; 0x38a <selectKnob>
		updateKnob(loopCounter);
     900:	8c 2f       	mov	r24, r28
     902:	98 dd       	rcall	.-1232   	; 0x434 <updateKnob>
		interperetKnob(loopCounter);
     904:	8c 2f       	mov	r24, r28
     906:	a0 dd       	rcall	.-1216   	; 0x448 <interperetKnob>
     908:	cf 5f       	subi	r28, 0xFF	; 255

}

void listenKnobs()
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     90a:	cc 32       	cpi	r28, 0x2C	; 44
     90c:	b9 f7       	brne	.-18     	; 0x8fc <listenKnobs+0x4>
     90e:	cf 91       	pop	r28
		updateKnob(loopCounter);
		interperetKnob(loopCounter);
	}


}
     910:	08 95       	ret

00000912 <initLEDs>:
#include <avr/io.h>
#include "globalVariables.h"

void initLEDs()
{
	DDRG = 0B00100101; //outputs on G5,2, and 0.
     912:	85 e2       	ldi	r24, 0x25	; 37
     914:	83 bb       	out	0x13, r24	; 19
     916:	08 95       	ret

00000918 <updateLEDs>:

}

void updateLEDs()
{
	if(encoderAValue==0){
     918:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <encoderAValue>
     91c:	81 11       	cpse	r24, r1
     91e:	12 c0       	rjmp	.+36     	; 0x944 <updateLEDs+0x2c>
	uint16_t trigLEDParse = currentTrigButtons;
     920:	20 91 d0 05 	lds	r18, 0x05D0	; 0x8005d0 <currentTrigButtons>
     924:	30 91 d1 05 	lds	r19, 0x05D1	; 0x8005d1 <currentTrigButtons+0x1>
	PORTG &= (~(1 << PG2)); //set latch low for data input
     928:	a2 98       	cbi	0x14, 2	; 20
     92a:	81 e1       	ldi	r24, 0x11	; 17
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
     92c:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
     92e:	33 23       	and	r19, r19
     930:	14 f4       	brge	.+4      	; 0x936 <updateLEDs+0x1e>
		{
			PORTG |= (1 << PG5); //send current 1's place bit to the data pin 
     932:	a5 9a       	sbi	0x14, 5	; 20
     934:	01 c0       	rjmp	.+2      	; 0x938 <updateLEDs+0x20>
		}
		else
		{
			PORTG &= (~(1 << PG5));
     936:	a5 98       	cbi	0x14, 5	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
     938:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
     93a:	22 0f       	add	r18, r18
     93c:	33 1f       	adc	r19, r19
     93e:	81 50       	subi	r24, 0x01	; 1
void updateLEDs()
{
	if(encoderAValue==0){
	uint16_t trigLEDParse = currentTrigButtons;
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t i = 0; i<17; i++)
     940:	a9 f7       	brne	.-22     	; 0x92c <updateLEDs+0x14>
			PORTG &= (~(1 << PG5));
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	PORTG |= (1 << PG2); //latch pin high
     942:	a2 9a       	sbi	0x14, 2	; 20
     944:	08 95       	ret

00000946 <main>:
#include <avr/interrupt.h>


int main(void)
{
	midiChannel = 0; //for now, need to change this from load memory
     946:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <midiChannel>
	initBank();
     94a:	bf dc       	rcall	.-1666   	; 0x2ca <initBank>
	initScreen();
     94c:	b8 d1       	rcall	.+880    	; 0xcbe <initScreen>
	initButtons();
     94e:	eb db       	rcall	.-2090   	; 0x126 <initButtons>
	initLEDs();
     950:	e0 df       	rcall	.-64     	; 0x912 <initLEDs>
	initEncoders();
     952:	82 dc       	rcall	.-1788   	; 0x258 <initEncoders>
	initMenu();
     954:	10 d0       	rcall	.+32     	; 0x976 <initMenu>
	initADC();
     956:	05 dd       	rcall	.-1526   	; 0x362 <initADC>
	serialInit0();
     958:	68 d4       	rcall	.+2256   	; 0x122a <serialInit0>
	sei();
	 //this will be necessary on first startup, but maybe not in the actual program? maybe just something handy to have.
	//loadMemory(); //we need to load in the first struct in locarion 0 of our eeprom.
	while (1)
	{
		listenTrigButtons();
     95a:	78 94       	sei
		listenMidi();
     95c:	eb db       	rcall	.-2090   	; 0x134 <listenTrigButtons>
		listenGPButtons();
     95e:	0c d1       	rcall	.+536    	; 0xb78 <listenMidi>
     960:	7a dc       	rcall	.-1804   	; 0x256 <listenGPButtons>
		listenMidi();
     962:	0a d1       	rcall	.+532    	; 0xb78 <listenMidi>
     964:	d9 df       	rcall	.-78     	; 0x918 <updateLEDs>
		updateLEDs();
     966:	08 d1       	rcall	.+528    	; 0xb78 <listenMidi>
     968:	a9 dc       	rcall	.-1710   	; 0x2bc <listenEncoders>
		listenMidi();
     96a:	06 d1       	rcall	.+524    	; 0xb78 <listenMidi>
     96c:	c5 df       	rcall	.-118    	; 0x8f8 <listenKnobs>
		listenEncoders();
     96e:	04 d1       	rcall	.+520    	; 0xb78 <listenMidi>
     970:	42 d0       	rcall	.+132    	; 0x9f6 <updateScreen>
		listenMidi();
     972:	02 d1       	rcall	.+516    	; 0xb78 <listenMidi>
     974:	f3 cf       	rjmp	.-26     	; 0x95c <main+0x16>

00000976 <initMenu>:
		listenKnobs();
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
		listenMidi();
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
		//updateSequence();
		updateScreen();
     97e:	c0 ea       	ldi	r28, 0xA0	; 160
     980:	d5 e0       	ldi	r29, 0x05	; 5
		listenMidi();
     982:	28 81       	ld	r18, Y
     984:	39 81       	ldd	r19, Y+1	; 0x01
     986:	43 e0       	ldi	r20, 0x03	; 3
uint8_t screen3Index = 0;

void initMenu()
{

numPrinter(screen0[2],5,3, currentPattern.patternBPM);
     988:	65 e0       	ldi	r22, 0x05	; 5
     98a:	88 eb       	ldi	r24, 0xB8	; 184
     98c:	93 e0       	ldi	r25, 0x03	; 3
     98e:	0c d2       	rcall	.+1048   	; 0xda8 <numPrinter>
numPrinter(screen3[1],14,2, (midiChannel+1));
     990:	20 91 d2 05 	lds	r18, 0x05D2	; 0x8005d2 <midiChannel>
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	2f 5f       	subi	r18, 0xFF	; 255
     998:	3f 4f       	sbci	r19, 0xFF	; 255
     99a:	42 e0       	ldi	r20, 0x02	; 2
     99c:	6e e0       	ldi	r22, 0x0E	; 14
     99e:	80 ea       	ldi	r24, 0xA0	; 160
     9a0:	92 e0       	ldi	r25, 0x02	; 2
     9a2:	02 d2       	rcall	.+1028   	; 0xda8 <numPrinter>
numPrinter(screen0[1], 9, 3, currentPatternNumber);
     9a4:	20 91 02 06 	lds	r18, 0x0602	; 0x800602 <currentPatternNumber>
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	43 e0       	ldi	r20, 0x03	; 3
     9ac:	69 e0       	ldi	r22, 0x09	; 9
     9ae:	84 ea       	ldi	r24, 0xA4	; 164
     9b0:	93 e0       	ldi	r25, 0x03	; 3
     9b2:	fa d1       	rcall	.+1012   	; 0xda8 <numPrinter>
numPrinter(screen1[1], 9, 3, currentPatternNumber);
     9b4:	20 91 02 06 	lds	r18, 0x0602	; 0x800602 <currentPatternNumber>
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	43 e0       	ldi	r20, 0x03	; 3
     9bc:	69 e0       	ldi	r22, 0x09	; 9
     9be:	80 e4       	ldi	r24, 0x40	; 64
     9c0:	93 e0       	ldi	r25, 0x03	; 3
     9c2:	f2 d1       	rcall	.+996    	; 0xda8 <numPrinter>
numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
     9c4:	28 81       	ld	r18, Y
     9c6:	39 81       	ldd	r19, Y+1	; 0x01
     9c8:	43 e0       	ldi	r20, 0x03	; 3
     9ca:	65 e0       	ldi	r22, 0x05	; 5
     9cc:	88 eb       	ldi	r24, 0xB8	; 184
     9ce:	93 e0       	ldi	r25, 0x03	; 3
     9d0:	eb d1       	rcall	.+982    	; 0xda8 <numPrinter>
     9d2:	00 e9       	ldi	r16, 0x90	; 144
     9d4:	13 e0       	ldi	r17, 0x03	; 3
     9d6:	c0 e0       	ldi	r28, 0x00	; 0

for(uint8_t i=0;i<4; i++ ){
	outputS(screen0[i],i);
     9d8:	d0 e0       	ldi	r29, 0x00	; 0
     9da:	be 01       	movw	r22, r28
     9dc:	c8 01       	movw	r24, r16
     9de:	cc d1       	rcall	.+920    	; 0xd78 <outputS>
     9e0:	21 96       	adiw	r28, 0x01	; 1
     9e2:	0c 5e       	subi	r16, 0xEC	; 236
     9e4:	1f 4f       	sbci	r17, 0xFF	; 255
numPrinter(screen3[1],14,2, (midiChannel+1));
numPrinter(screen0[1], 9, 3, currentPatternNumber);
numPrinter(screen1[1], 9, 3, currentPatternNumber);
numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);

for(uint8_t i=0;i<4; i++ ){
     9e6:	c4 30       	cpi	r28, 0x04	; 4
     9e8:	d1 05       	cpc	r29, r1
     9ea:	b9 f7       	brne	.-18     	; 0x9da <initMenu+0x64>
	outputS(screen0[i],i);
}


}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	08 95       	ret

000009f6 <updateScreen>:

void updateScreen()
{
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
	if(prevEncoderBValue!=encoderBValue)
     9fe:	20 91 d3 05 	lds	r18, 0x05D3	; 0x8005d3 <prevEncoderBValue>
     a02:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <encoderBValue>
     a06:	28 17       	cp	r18, r24
     a08:	09 f4       	brne	.+2      	; 0xa0c <updateScreen+0x16>
     a0a:	53 c0       	rjmp	.+166    	; 0xab2 <updateScreen+0xbc>
	{
		//encoderBValue = encoderBValue%5;
		//this needs some work...
//		uint8_t menuMoveArrow = encoderBValue - prevEncoderBValue; //this tells us whether we need to move up or down.
		switch(encoderAValue)
     a0c:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <encoderAValue>
     a10:	92 30       	cpi	r25, 0x02	; 2
     a12:	09 f0       	breq	.+2      	; 0xa16 <updateScreen+0x20>
     a14:	4a c0       	rjmp	.+148    	; 0xaaa <updateScreen+0xb4>
			
			case 1:
			break;
			
			case 2:
			if(encoderBValue-prevEncoderBValue==1)
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	91 09       	sbc	r25, r1
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	19 f5       	brne	.+70     	; 0xa66 <updateScreen+0x70>
			{
				currentPattern.trackSampleLSB[currentTrack] = (currentPattern.trackSampleLSB[currentTrack])+ 1; 
     a20:	20 91 03 06 	lds	r18, 0x0603	; 0x800603 <currentTrack>
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	c9 01       	movw	r24, r18
     a28:	88 5b       	subi	r24, 0xB8	; 184
     a2a:	9b 4f       	sbci	r25, 0xFB	; 251
     a2c:	fc 01       	movw	r30, r24
     a2e:	e8 55       	subi	r30, 0x58	; 88
     a30:	ff 4f       	sbci	r31, 0xFF	; 255
     a32:	c0 81       	ld	r28, Z
     a34:	cf 5f       	subi	r28, 0xFF	; 255
     a36:	c0 83       	st	Z, r28
				uint16_t currentSample = (currentPattern.trackSampleMSB[currentTrack]<<8)|(currentPattern.trackSampleLSB[currentTrack]);
     a38:	70 97       	sbiw	r30, 0x10	; 16
     a3a:	80 81       	ld	r24, Z
     a3c:	d0 e0       	ldi	r29, 0x00	; 0
     a3e:	d8 2b       	or	r29, r24
				numPrinter(screen2[1], 7, 2, (currentTrack+1));
     a40:	2f 5f       	subi	r18, 0xFF	; 255
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	42 e0       	ldi	r20, 0x02	; 2
     a46:	67 e0       	ldi	r22, 0x07	; 7
     a48:	80 ef       	ldi	r24, 0xF0	; 240
     a4a:	92 e0       	ldi	r25, 0x02	; 2
     a4c:	ad d1       	rcall	.+858    	; 0xda8 <numPrinter>
				numPrinter(screen2[1], 10, 4, currentSample);
     a4e:	9e 01       	movw	r18, r28
     a50:	44 e0       	ldi	r20, 0x04	; 4
     a52:	6a e0       	ldi	r22, 0x0A	; 10
     a54:	80 ef       	ldi	r24, 0xF0	; 240
     a56:	92 e0       	ldi	r25, 0x02	; 2
     a58:	a7 d1       	rcall	.+846    	; 0xda8 <numPrinter>
				outputS(screen2[1], 1);
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	80 ef       	ldi	r24, 0xF0	; 240
     a60:	92 e0       	ldi	r25, 0x02	; 2
     a62:	8a d1       	rcall	.+788    	; 0xd78 <outputS>
     a64:	22 c0       	rjmp	.+68     	; 0xaaa <updateScreen+0xb4>
	
			}else
			{
				currentPattern.trackSampleLSB[currentTrack] = (currentPattern.trackSampleLSB[currentTrack])- 1;
     a66:	20 91 03 06 	lds	r18, 0x0603	; 0x800603 <currentTrack>
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	c9 01       	movw	r24, r18
     a6e:	88 5b       	subi	r24, 0xB8	; 184
     a70:	9b 4f       	sbci	r25, 0xFB	; 251
     a72:	fc 01       	movw	r30, r24
     a74:	e8 55       	subi	r30, 0x58	; 88
     a76:	ff 4f       	sbci	r31, 0xFF	; 255
     a78:	c0 81       	ld	r28, Z
     a7a:	c1 50       	subi	r28, 0x01	; 1
     a7c:	c0 83       	st	Z, r28
				uint16_t currentSample = (currentPattern.trackSampleMSB[currentTrack]<<8)|(currentPattern.trackSampleLSB[currentTrack]);
     a7e:	70 97       	sbiw	r30, 0x10	; 16
     a80:	80 81       	ld	r24, Z
     a82:	d0 e0       	ldi	r29, 0x00	; 0
     a84:	d8 2b       	or	r29, r24
				numPrinter(screen2[1], 7, 2, (currentTrack+1));
     a86:	2f 5f       	subi	r18, 0xFF	; 255
     a88:	3f 4f       	sbci	r19, 0xFF	; 255
     a8a:	42 e0       	ldi	r20, 0x02	; 2
     a8c:	67 e0       	ldi	r22, 0x07	; 7
     a8e:	80 ef       	ldi	r24, 0xF0	; 240
     a90:	92 e0       	ldi	r25, 0x02	; 2
     a92:	8a d1       	rcall	.+788    	; 0xda8 <numPrinter>
				numPrinter(screen2[1], 10, 4, currentSample);
     a94:	9e 01       	movw	r18, r28
     a96:	44 e0       	ldi	r20, 0x04	; 4
     a98:	6a e0       	ldi	r22, 0x0A	; 10
     a9a:	80 ef       	ldi	r24, 0xF0	; 240
     a9c:	92 e0       	ldi	r25, 0x02	; 2
     a9e:	84 d1       	rcall	.+776    	; 0xda8 <numPrinter>
				outputS(screen2[1], 1);
     aa0:	61 e0       	ldi	r22, 0x01	; 1
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	80 ef       	ldi	r24, 0xF0	; 240
     aa6:	92 e0       	ldi	r25, 0x02	; 2
     aa8:	67 d1       	rcall	.+718    	; 0xd78 <outputS>
     aaa:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <encoderBValue>
			
			case 3:
			break;
			
		}
		prevEncoderBValue = encoderBValue;
     aae:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <prevEncoderBValue>
     ab2:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <encoderAValue>
	}
	if(prevEncoderAValue!=encoderAValue){
     ab6:	90 91 a3 05 	lds	r25, 0x05A3	; 0x8005a3 <prevEncoderAValue>
     aba:	98 17       	cp	r25, r24
     abc:	09 f4       	brne	.+2      	; 0xac0 <updateScreen+0xca>
     abe:	57 c0       	rjmp	.+174    	; 0xb6e <updateScreen+0x178>
     ac0:	83 70       	andi	r24, 0x03	; 3
	encoderAValue = encoderAValue%4;
     ac2:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <encoderAValue>
     ac6:	81 30       	cpi	r24, 0x01	; 1
	switch (encoderAValue)
     ac8:	f9 f0       	breq	.+62     	; 0xb08 <updateScreen+0x112>
     aca:	28 f0       	brcs	.+10     	; 0xad6 <updateScreen+0xe0>
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	61 f1       	breq	.+88     	; 0xb28 <updateScreen+0x132>
     ad0:	83 30       	cpi	r24, 0x03	; 3
     ad2:	d1 f1       	breq	.+116    	; 0xb48 <updateScreen+0x152>
     ad4:	48 c0       	rjmp	.+144    	; 0xb66 <updateScreen+0x170>
     ad6:	20 91 a0 05 	lds	r18, 0x05A0	; 0x8005a0 <currentPattern+0x158>
	{
		case 0:
		numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
     ada:	30 91 a1 05 	lds	r19, 0x05A1	; 0x8005a1 <currentPattern+0x159>
     ade:	43 e0       	ldi	r20, 0x03	; 3
     ae0:	65 e0       	ldi	r22, 0x05	; 5
     ae2:	88 eb       	ldi	r24, 0xB8	; 184
     ae4:	93 e0       	ldi	r25, 0x03	; 3
     ae6:	60 d1       	rcall	.+704    	; 0xda8 <numPrinter>
     ae8:	00 e9       	ldi	r16, 0x90	; 144
     aea:	13 e0       	ldi	r17, 0x03	; 3
     aec:	c0 e0       	ldi	r28, 0x00	; 0
     aee:	d0 e0       	ldi	r29, 0x00	; 0
		for(uint8_t i=0;i<4; i++ ){
			outputS(screen0[i],i);
     af0:	be 01       	movw	r22, r28
     af2:	c8 01       	movw	r24, r16
     af4:	41 d1       	rcall	.+642    	; 0xd78 <outputS>
     af6:	21 96       	adiw	r28, 0x01	; 1
     af8:	0c 5e       	subi	r16, 0xEC	; 236
     afa:	1f 4f       	sbci	r17, 0xFF	; 255
     afc:	c4 30       	cpi	r28, 0x04	; 4
	encoderAValue = encoderAValue%4;
	switch (encoderAValue)
	{
		case 0:
		numPrinter(screen0[2], 5, 3, currentPattern.patternBPM);
		for(uint8_t i=0;i<4; i++ ){
     afe:	d1 05       	cpc	r29, r1
     b00:	b9 f7       	brne	.-18     	; 0xaf0 <updateScreen+0xfa>
     b02:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <screen0Index>
			outputS(screen0[i],i);
		}
		screen0Index = 0;
		
		break;
     b06:	2f c0       	rjmp	.+94     	; 0xb66 <updateScreen+0x170>
     b08:	0c e2       	ldi	r16, 0x2C	; 44
     b0a:	13 e0       	ldi	r17, 0x03	; 3
		}
		prevEncoderBValue = encoderBValue;
	}
	if(prevEncoderAValue!=encoderAValue){
	encoderAValue = encoderAValue%4;
	switch (encoderAValue)
     b0c:	c0 e0       	ldi	r28, 0x00	; 0
     b0e:	d0 e0       	ldi	r29, 0x00	; 0
		
		break;
		
		case 1:
		for(uint8_t i=0;i<4; i++ ){
 		outputS(screen1[i],i);
     b10:	be 01       	movw	r22, r28
     b12:	c8 01       	movw	r24, r16
     b14:	31 d1       	rcall	.+610    	; 0xd78 <outputS>
     b16:	21 96       	adiw	r28, 0x01	; 1
     b18:	0c 5e       	subi	r16, 0xEC	; 236
     b1a:	1f 4f       	sbci	r17, 0xFF	; 255
     b1c:	c4 30       	cpi	r28, 0x04	; 4
		screen0Index = 0;
		
		break;
		
		case 1:
		for(uint8_t i=0;i<4; i++ ){
     b1e:	d1 05       	cpc	r29, r1
     b20:	b9 f7       	brne	.-18     	; 0xb10 <updateScreen+0x11a>
     b22:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <screen1Index>
 		outputS(screen1[i],i);
		}
		screen1Index = 0;
 		break;
     b26:	1f c0       	rjmp	.+62     	; 0xb66 <updateScreen+0x170>
     b28:	0c ed       	ldi	r16, 0xDC	; 220
     b2a:	12 e0       	ldi	r17, 0x02	; 2
		}
		prevEncoderBValue = encoderBValue;
	}
	if(prevEncoderAValue!=encoderAValue){
	encoderAValue = encoderAValue%4;
	switch (encoderAValue)
     b2c:	c0 e0       	ldi	r28, 0x00	; 0
     b2e:	d0 e0       	ldi	r29, 0x00	; 0
		screen1Index = 0;
 		break;
		 
		case 2:
		for(uint8_t i=0;i<4; i++ ){
			outputS(screen2[i],i);
     b30:	be 01       	movw	r22, r28
     b32:	c8 01       	movw	r24, r16
     b34:	21 d1       	rcall	.+578    	; 0xd78 <outputS>
     b36:	21 96       	adiw	r28, 0x01	; 1
     b38:	0c 5e       	subi	r16, 0xEC	; 236
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
     b3c:	c4 30       	cpi	r28, 0x04	; 4
		}
		screen1Index = 0;
 		break;
		 
		case 2:
		for(uint8_t i=0;i<4; i++ ){
     b3e:	d1 05       	cpc	r29, r1
     b40:	b9 f7       	brne	.-18     	; 0xb30 <updateScreen+0x13a>
			outputS(screen2[i],i);
		}
		screen2Index = 0;
     b42:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <screen2Index>
		break;
     b46:	0f c0       	rjmp	.+30     	; 0xb66 <updateScreen+0x170>
     b48:	0c e8       	ldi	r16, 0x8C	; 140
     b4a:	12 e0       	ldi	r17, 0x02	; 2
		}
		prevEncoderBValue = encoderBValue;
	}
	if(prevEncoderAValue!=encoderAValue){
	encoderAValue = encoderAValue%4;
	switch (encoderAValue)
     b4c:	c0 e0       	ldi	r28, 0x00	; 0
     b4e:	d0 e0       	ldi	r29, 0x00	; 0
		screen2Index = 0;
		break;
		 
		case 3:
		for(uint8_t i=0;i<4; i++ ){
			outputS(screen3[i],i);
     b50:	be 01       	movw	r22, r28
     b52:	c8 01       	movw	r24, r16
     b54:	11 d1       	rcall	.+546    	; 0xd78 <outputS>
     b56:	21 96       	adiw	r28, 0x01	; 1
     b58:	0c 5e       	subi	r16, 0xEC	; 236
     b5a:	1f 4f       	sbci	r17, 0xFF	; 255
     b5c:	c4 30       	cpi	r28, 0x04	; 4
		}
		screen2Index = 0;
		break;
		 
		case 3:
		for(uint8_t i=0;i<4; i++ ){
     b5e:	d1 05       	cpc	r29, r1
     b60:	b9 f7       	brne	.-18     	; 0xb50 <updateScreen+0x15a>
     b62:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <screen3Index>
			outputS(screen3[i],i);
		}
		screen3Index = 0;
     b66:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <encoderAValue>
		break;
		 
		 
	}
	prevEncoderAValue = encoderAValue;
     b6a:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <prevEncoderAValue>
     b6e:	df 91       	pop	r29
	
	}


     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	08 95       	ret

00000b78 <listenMidi>:
uint8_t midiPCCheck = 0;
uint8_t midiOffCheck = 0;


void listenMidi()
{
     b78:	cf 92       	push	r12
     b7a:	df 92       	push	r13
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
	midiNoteCheck = (0B10010000|midiChannel);
     b88:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <midiChannel>
     b8c:	98 2f       	mov	r25, r24
     b8e:	90 69       	ori	r25, 0x90	; 144
     b90:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <midiNoteCheck>
	midiCCCheck = (0B10110000|midiChannel);
     b94:	98 2f       	mov	r25, r24
     b96:	90 6b       	ori	r25, 0xB0	; 176
     b98:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <midiCCCheck>
	midiPCCheck = (0B11000000|midiChannel);
     b9c:	98 2f       	mov	r25, r24
     b9e:	90 6c       	ori	r25, 0xC0	; 192
     ba0:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <midiPCCheck>
	midiOffCheck = (0B10000000|midiChannel);
     ba4:	80 68       	ori	r24, 0x80	; 128
     ba6:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <midiOffCheck>
	
	//right now, this is just for testing.
	currentMidiMessage[0] = getChar();
     baa:	55 d3       	rcall	.+1706   	; 0x1256 <getChar>
     bac:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <currentMidiMessage>
	//while(currentMidiMessage[0]==254)
	//{
	//	currentMidiMessage[0]=getChar(); //for now, get rid of midi clock signals
	//}
	if(currentMidiMessage[0]==midiNoteCheck)
     bb0:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <midiNoteCheck>
     bb4:	89 13       	cpse	r24, r25
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
     bb6:	2d c0       	rjmp	.+90     	; 0xc12 <listenMidi+0x9a>
     bb8:	4e d3       	rcall	.+1692   	; 0x1256 <getChar>
     bba:	ce e3       	ldi	r28, 0x3E	; 62
     bbc:	d4 e0       	ldi	r29, 0x04	; 4
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
     bbe:	89 83       	std	Y+1, r24	; 0x01
     bc0:	4a d3       	rcall	.+1684   	; 0x1256 <getChar>
     bc2:	8a 83       	std	Y+2, r24	; 0x02
     bc4:	00 e9       	ldi	r16, 0x90	; 144
     bc6:	15 e0       	ldi	r17, 0x05	; 5
     bc8:	c0 ed       	ldi	r28, 0xD0	; 208
     bca:	d4 e0       	ldi	r29, 0x04	; 4
     bcc:	0f 2e       	mov	r0, r31
     bce:	f0 ee       	ldi	r31, 0xE0	; 224
     bd0:	cf 2e       	mov	r12, r31
     bd2:	f4 e0       	ldi	r31, 0x04	; 4
     bd4:	df 2e       	mov	r13, r31
     bd6:	f0 2d       	mov	r31, r0
		//outputS(printMidiNote, 3);
		
		for(int i=0; i<16; i++)
		{
			//I don't like this forloop, but It seems like the best way to deal with this struct at the moment.
			if((currentPattern.midiTrackNote[i])==(currentMidiMessage[1]))
     bd8:	0f 2e       	mov	r0, r31
     bda:	fe e3       	ldi	r31, 0x3E	; 62
     bdc:	ef 2e       	mov	r14, r31
     bde:	f4 e0       	ldi	r31, 0x04	; 4
     be0:	ff 2e       	mov	r15, r31
     be2:	f0 2d       	mov	r31, r0
     be4:	f8 01       	movw	r30, r16
     be6:	91 91       	ld	r25, Z+
     be8:	8f 01       	movw	r16, r30
     bea:	f7 01       	movw	r30, r14
     bec:	81 81       	ldd	r24, Z+1	; 0x01
     bee:	98 13       	cpse	r25, r24
     bf0:	0c c0       	rjmp	.+24     	; 0xc0a <listenMidi+0x92>
			trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
     bf2:	28 81       	ld	r18, Y
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	fe 01       	movw	r30, r28
     bf8:	e0 57       	subi	r30, 0x70	; 112
     bfa:	f1 09       	sbc	r31, r1
     bfc:	40 81       	ld	r20, Z
     bfe:	50 e0       	ldi	r21, 0x00	; 0
     c00:	68 89       	ldd	r22, Y+16	; 0x10
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	88 a1       	ldd	r24, Y+32	; 0x20
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	3b d3       	rcall	.+1654   	; 0x1280 <trackControl>
     c0a:	21 96       	adiw	r28, 0x01	; 1
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
		//outputS(printMidiNote, 3);
		
		for(int i=0; i<16; i++)
     c0c:	cc 15       	cp	r28, r12
     c0e:	dd 05       	cpc	r29, r13
     c10:	49 f7       	brne	.-46     	; 0xbe4 <listenMidi+0x6c>
			if((currentPattern.midiTrackNote[i])==(currentMidiMessage[1]))
			trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
		}
		
	}
	if(currentMidiMessage[0]==midiCCCheck)
     c12:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <currentMidiMessage>
     c16:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <midiCCCheck>
     c1a:	98 13       	cpse	r25, r24
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (control)
     c1c:	0b c0       	rjmp	.+22     	; 0xc34 <listenMidi+0xbc>
     c1e:	1b d3       	rcall	.+1590   	; 0x1256 <getChar>
     c20:	ce e3       	ldi	r28, 0x3E	; 62
     c22:	d4 e0       	ldi	r29, 0x04	; 4
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
     c24:	89 83       	std	Y+1, r24	; 0x01
     c26:	17 d3       	rcall	.+1582   	; 0x1256 <getChar>
		outputS(printMidiCC, 3);
     c28:	8a 83       	std	Y+2, r24	; 0x02
     c2a:	63 e0       	ldi	r22, 0x03	; 3
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	8c e1       	ldi	r24, 0x1C	; 28
     c30:	94 e0       	ldi	r25, 0x04	; 4
	
	}
	if(currentMidiMessage[0]==midiPCCheck)
     c32:	a2 d0       	rcall	.+324    	; 0xd78 <outputS>
     c34:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <currentMidiMessage>
     c38:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <midiPCCheck>
     c3c:	98 13       	cpse	r25, r24
	{
		currentMidiMessage[1] = getChar(); //this should be a byte1 (progChageNumber)
     c3e:	08 c0       	rjmp	.+16     	; 0xc50 <listenMidi+0xd8>
     c40:	0a d3       	rcall	.+1556   	; 0x1256 <getChar>
     c42:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <currentMidiMessage+0x1>
		outputS(printMidiPC, 3);
     c46:	63 e0       	ldi	r22, 0x03	; 3
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	88 e0       	ldi	r24, 0x08	; 8
     c4c:	94 e0       	ldi	r25, 0x04	; 4
		
	}
	if(currentMidiMessage[0]==midiOffCheck)
     c4e:	94 d0       	rcall	.+296    	; 0xd78 <outputS>
     c50:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <currentMidiMessage>
     c54:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <midiOffCheck>
	{
		currentMidiMessage[1] = getChar(); //this should be byte1 (note)
     c58:	98 13       	cpse	r25, r24
     c5a:	0b c0       	rjmp	.+22     	; 0xc72 <listenMidi+0xfa>
     c5c:	fc d2       	rcall	.+1528   	; 0x1256 <getChar>
     c5e:	ce e3       	ldi	r28, 0x3E	; 62
		currentMidiMessage[2] = getChar(); //this should be byte2 (velocity)
     c60:	d4 e0       	ldi	r29, 0x04	; 4
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	f8 d2       	rcall	.+1520   	; 0x1256 <getChar>
		outputS(blank, 3);
     c66:	8a 83       	std	Y+2, r24	; 0x02
     c68:	63 e0       	ldi	r22, 0x03	; 3
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	84 ef       	ldi	r24, 0xF4	; 244
     c6e:	93 e0       	ldi	r25, 0x03	; 3
     c70:	83 d0       	rcall	.+262    	; 0xd78 <outputS>
	}



     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	ff 90       	pop	r15
     c7c:	ef 90       	pop	r14
     c7e:	df 90       	pop	r13
     c80:	cf 90       	pop	r12
     c82:	08 95       	ret

00000c84 <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
     c84:	e5 e0       	ldi	r30, 0x05	; 5
     c86:	f1 e0       	ldi	r31, 0x01	; 1
     c88:	80 81       	ld	r24, Z
     c8a:	82 60       	ori	r24, 0x02	; 2
     c8c:	80 83       	st	Z, r24
     c8e:	85 e0       	ldi	r24, 0x05	; 5
     c90:	8a 95       	dec	r24
     c92:	f1 f7       	brne	.-4      	; 0xc90 <enableCycle+0xc>
     c94:	00 00       	nop
     c96:	80 81       	ld	r24, Z
     c98:	8d 7f       	andi	r24, 0xFD	; 253
     c9a:	80 83       	st	Z, r24
     c9c:	08 95       	ret

00000c9e <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTJ &= 0B11111110; //set our DC pin low, to get ready to write data.
     c9e:	e5 e0       	ldi	r30, 0x05	; 5
     ca0:	f1 e0       	ldi	r31, 0x01	; 1
     ca2:	90 81       	ld	r25, Z
     ca4:	9e 7f       	andi	r25, 0xFE	; 254
     ca6:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
     ca8:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTJ &= 0B11111110; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
     caa:	ec cf       	rjmp	.-40     	; 0xc84 <enableCycle>
     cac:	08 95       	ret

00000cae <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTJ |=0B00000001; //set out DC Pin high, so it's ready to write data.
     cae:	e5 e0       	ldi	r30, 0x05	; 5
     cb0:	f1 e0       	ldi	r31, 0x01	; 1
     cb2:	90 81       	ld	r25, Z
     cb4:	91 60       	ori	r25, 0x01	; 1
     cb6:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
     cb8:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTJ |=0B00000001; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
     cba:	e4 cf       	rjmp	.-56     	; 0xc84 <enableCycle>
     cbc:	08 95       	ret

00000cbe <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRJ = 0x03; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	DDRC =0xFF; //all pins on the LCD Data Bus.
     cc4:	8f ef       	ldi	r24, 0xFF	; 255
     cc6:	87 b9       	out	0x07, r24	; 7

	
	PORTJ &= 0B11111100;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
     cc8:	e5 e0       	ldi	r30, 0x05	; 5
     cca:	f1 e0       	ldi	r31, 0x01	; 1
     ccc:	80 81       	ld	r24, Z
     cce:	8c 7f       	andi	r24, 0xFC	; 252
     cd0:	80 83       	st	Z, r24
	
	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
     cd2:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cd4:	8f e1       	ldi	r24, 0x1F	; 31
     cd6:	93 e0       	ldi	r25, 0x03	; 3
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <initScreen+0x1a>
     cdc:	00 c0       	rjmp	.+0      	; 0xcde <initScreen+0x20>
     cde:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose
	

	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
     ce0:	8a e2       	ldi	r24, 0x2A	; 42
     ce2:	dd df       	rcall	.-70     	; 0xc9e <command>
	command(0x71);        // Function selection A:
     ce4:	81 e7       	ldi	r24, 0x71	; 113
     ce6:	db df       	rcall	.-74     	; 0xc9e <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
     ce8:	8c e5       	ldi	r24, 0x5C	; 92
     cea:	e1 df       	rcall	.-62     	; 0xcae <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
     cec:	88 e2       	ldi	r24, 0x28	; 40
     cee:	d7 df       	rcall	.-82     	; 0xc9e <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
     cf0:	88 e0       	ldi	r24, 0x08	; 8
     cf2:	d5 df       	rcall	.-86     	; 0xc9e <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
     cf4:	8a e2       	ldi	r24, 0x2A	; 42
     cf6:	d3 df       	rcall	.-90     	; 0xc9e <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
     cf8:	89 e7       	ldi	r24, 0x79	; 121
     cfa:	d1 df       	rcall	.-94     	; 0xc9e <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
     cfc:	85 ed       	ldi	r24, 0xD5	; 213
     cfe:	cf df       	rcall	.-98     	; 0xc9e <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
     d00:	80 e7       	ldi	r24, 0x70	; 112
     d02:	cd df       	rcall	.-102    	; 0xc9e <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
     d04:	88 e7       	ldi	r24, 0x78	; 120
     d06:	cb df       	rcall	.-106    	; 0xc9e <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
     d08:	89 e0       	ldi	r24, 0x09	; 9
     d0a:	c9 df       	rcall	.-110    	; 0xc9e <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
     d0c:	86 e0       	ldi	r24, 0x06	; 6
     d0e:	c7 df       	rcall	.-114    	; 0xc9e <command>
	command(0x72);        // Function selection B:
     d10:	82 e7       	ldi	r24, 0x72	; 114
     d12:	c5 df       	rcall	.-118    	; 0xc9e <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
     d14:	8a e0       	ldi	r24, 0x0A	; 10
     d16:	cb df       	rcall	.-106    	; 0xcae <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
     d18:	89 e7       	ldi	r24, 0x79	; 121
     d1a:	c1 df       	rcall	.-126    	; 0xc9e <command>
	command(0xDA);        // Set SEG pins hardware configuration:
     d1c:	8a ed       	ldi	r24, 0xDA	; 218
     d1e:	bf df       	rcall	.-130    	; 0xc9e <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
     d20:	80 e1       	ldi	r24, 0x10	; 16
     d22:	bd df       	rcall	.-134    	; 0xc9e <command>
	command(0xDC);        // Function selection C:
     d24:	8c ed       	ldi	r24, 0xDC	; 220
     d26:	bb df       	rcall	.-138    	; 0xc9e <command>
	command(0x00);        //  internal VSL, GPIO input disable
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	b9 df       	rcall	.-142    	; 0xc9e <command>
	command(0x81);        // Set contrast control:
     d2c:	81 e8       	ldi	r24, 0x81	; 129
     d2e:	b7 df       	rcall	.-146    	; 0xc9e <command>
     d30:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
     d32:	b5 df       	rcall	.-150    	; 0xc9e <command>
     d34:	89 ed       	ldi	r24, 0xD9	; 217
     d36:	b3 df       	rcall	.-154    	; 0xc9e <command>
	command(0xD9);        // Set phase length:
     d38:	81 ef       	ldi	r24, 0xF1	; 241
     d3a:	b1 df       	rcall	.-158    	; 0xc9e <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
     d3c:	8b ed       	ldi	r24, 0xDB	; 219
     d3e:	af df       	rcall	.-162    	; 0xc9e <command>
     d40:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
     d42:	ad df       	rcall	.-166    	; 0xc9e <command>
     d44:	88 e7       	ldi	r24, 0x78	; 120
     d46:	ab df       	rcall	.-170    	; 0xc9e <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
     d48:	88 e2       	ldi	r24, 0x28	; 40
     d4a:	a9 df       	rcall	.-174    	; 0xc9e <command>
     d4c:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
     d4e:	a7 df       	rcall	.-178    	; 0xc9e <command>
     d50:	8f e3       	ldi	r24, 0x3F	; 63
     d52:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <initScreen+0x96>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <initScreen+0x9c>
	command(0x01);        // Clear display
     d5a:	00 00       	nop
     d5c:	80 e8       	ldi	r24, 0x80	; 128
     d5e:	9f df       	rcall	.-194    	; 0xc9e <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d60:	8c e0       	ldi	r24, 0x0C	; 12
     d62:	9d df       	rcall	.-198    	; 0xc9e <command>
     d64:	9f ef       	ldi	r25, 0xFF	; 255
     d66:	24 e3       	ldi	r18, 0x34	; 52
     d68:	8c e0       	ldi	r24, 0x0C	; 12
     d6a:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	
	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
     d6c:	20 40       	sbci	r18, 0x00	; 0
     d6e:	80 40       	sbci	r24, 0x00	; 0
     d70:	e1 f7       	brne	.-8      	; 0xd6a <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
     d72:	00 c0       	rjmp	.+0      	; 0xd74 <initScreen+0xb6>
     d74:	00 00       	nop
     d76:	08 95       	ret

00000d78 <outputS>:
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	8c 01       	movw	r16, r24
     d82:	fb 01       	movw	r30, r22
     d84:	ff 27       	eor	r31, r31
     d86:	e0 5d       	subi	r30, 0xD0	; 208
     d88:	fb 4f       	sbci	r31, 0xFB	; 251
     d8a:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;
	
	command(new_line[r]);
     d8c:	88 df       	rcall	.-240    	; 0xc9e <command>
     d8e:	e8 01       	movw	r28, r16
     d90:	0c 5e       	subi	r16, 0xEC	; 236
     d92:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
     d94:	89 91       	ld	r24, Y+
     d96:	8b df       	rcall	.-234    	; 0xcae <data>
	uint8_t r = row;
	uint8_t c = 0;
	
	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
     d98:	c0 17       	cp	r28, r16
     d9a:	d1 07       	cpc	r29, r17
     d9c:	d9 f7       	brne	.-10     	; 0xd94 <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	08 95       	ret

00000da8 <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;
	
	switch(numCharacters)
     dae:	43 30       	cpi	r20, 0x03	; 3
     db0:	09 f4       	brne	.+2      	; 0xdb4 <numPrinter+0xc>
     db2:	51 c0       	rjmp	.+162    	; 0xe56 <numPrinter+0xae>
     db4:	28 f4       	brcc	.+10     	; 0xdc0 <numPrinter+0x18>
     db6:	41 30       	cpi	r20, 0x01	; 1
     db8:	51 f0       	breq	.+20     	; 0xdce <numPrinter+0x26>
     dba:	42 30       	cpi	r20, 0x02	; 2
     dbc:	21 f1       	breq	.+72     	; 0xe06 <numPrinter+0x5e>
     dbe:	a2 c1       	rjmp	.+836    	; 0x1104 <numPrinter+0x35c>
     dc0:	44 30       	cpi	r20, 0x04	; 4
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <numPrinter+0x1e>
     dc4:	8e c0       	rjmp	.+284    	; 0xee2 <numPrinter+0x13a>
     dc6:	45 30       	cpi	r20, 0x05	; 5
     dc8:	09 f4       	brne	.+2      	; 0xdcc <numPrinter+0x24>
     dca:	fd c0       	rjmp	.+506    	; 0xfc6 <numPrinter+0x21e>
     dcc:	9b c1       	rjmp	.+822    	; 0x1104 <numPrinter+0x35c>
		case 0:
		break;
		
		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
     dce:	ec 01       	movw	r28, r24
     dd0:	c6 0f       	add	r28, r22
     dd2:	d1 1d       	adc	r29, r1
     dd4:	ad ec       	ldi	r26, 0xCD	; 205
     dd6:	bc ec       	ldi	r27, 0xCC	; 204
     dd8:	81 d4       	rcall	.+2306   	; 0x16dc <__umulhisi3>
     dda:	96 95       	lsr	r25
     ddc:	87 95       	ror	r24
     dde:	96 95       	lsr	r25
     de0:	87 95       	ror	r24
     de2:	96 95       	lsr	r25
     de4:	87 95       	ror	r24
     de6:	9c 01       	movw	r18, r24
     de8:	22 0f       	add	r18, r18
     dea:	33 1f       	adc	r19, r19
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	82 0f       	add	r24, r18
     dfa:	93 1f       	adc	r25, r19
     dfc:	e8 1b       	sub	r30, r24
     dfe:	f9 0b       	sbc	r31, r25
     e00:	e0 5d       	subi	r30, 0xD0	; 208
     e02:	e8 83       	st	Y, r30
		break;
     e04:	7f c1       	rjmp	.+766    	; 0x1104 <numPrinter+0x35c>
		
		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
     e06:	ec 01       	movw	r28, r24
     e08:	c6 0f       	add	r28, r22
     e0a:	d1 1d       	adc	r29, r1
     e0c:	ad ec       	ldi	r26, 0xCD	; 205
     e0e:	bc ec       	ldi	r27, 0xCC	; 204
     e10:	65 d4       	rcall	.+2250   	; 0x16dc <__umulhisi3>
     e12:	96 95       	lsr	r25
     e14:	87 95       	ror	r24
     e16:	96 95       	lsr	r25
     e18:	87 95       	ror	r24
     e1a:	96 95       	lsr	r25
     e1c:	87 95       	ror	r24
     e1e:	9c 01       	movw	r18, r24
     e20:	22 0f       	add	r18, r18
     e22:	33 1f       	adc	r19, r19
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	82 0f       	add	r24, r18
     e32:	93 1f       	adc	r25, r19
     e34:	9f 01       	movw	r18, r30
     e36:	28 1b       	sub	r18, r24
     e38:	39 0b       	sbc	r19, r25
     e3a:	c9 01       	movw	r24, r18
     e3c:	80 5d       	subi	r24, 0xD0	; 208
     e3e:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
     e40:	9f 01       	movw	r18, r30
     e42:	4c d4       	rcall	.+2200   	; 0x16dc <__umulhisi3>
     e44:	96 95       	lsr	r25
     e46:	87 95       	ror	r24
     e48:	96 95       	lsr	r25
     e4a:	87 95       	ror	r24
     e4c:	96 95       	lsr	r25
     e4e:	87 95       	ror	r24
     e50:	80 5d       	subi	r24, 0xD0	; 208
     e52:	88 83       	st	Y, r24
     e54:	57 c1       	rjmp	.+686    	; 0x1104 <numPrinter+0x35c>
		break;
     e56:	ec 01       	movw	r28, r24
		
		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
     e58:	c6 0f       	add	r28, r22
     e5a:	d1 1d       	adc	r29, r1
     e5c:	ad ec       	ldi	r26, 0xCD	; 205
     e5e:	bc ec       	ldi	r27, 0xCC	; 204
     e60:	3d d4       	rcall	.+2170   	; 0x16dc <__umulhisi3>
     e62:	96 95       	lsr	r25
     e64:	87 95       	ror	r24
     e66:	96 95       	lsr	r25
     e68:	87 95       	ror	r24
     e6a:	96 95       	lsr	r25
     e6c:	87 95       	ror	r24
     e6e:	9c 01       	movw	r18, r24
     e70:	22 0f       	add	r18, r18
     e72:	33 1f       	adc	r19, r19
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	82 0f       	add	r24, r18
     e82:	93 1f       	adc	r25, r19
     e84:	9f 01       	movw	r18, r30
     e86:	28 1b       	sub	r18, r24
     e88:	39 0b       	sbc	r19, r25
     e8a:	c9 01       	movw	r24, r18
     e8c:	80 5d       	subi	r24, 0xD0	; 208
     e8e:	8a 83       	std	Y+2, r24	; 0x02
     e90:	af 01       	movw	r20, r30
		charArray[(startingPos+1)] = tensPlace;
     e92:	56 95       	lsr	r21
     e94:	47 95       	ror	r20
     e96:	56 95       	lsr	r21
     e98:	47 95       	ror	r20
     e9a:	9a 01       	movw	r18, r20
     e9c:	ab e7       	ldi	r26, 0x7B	; 123
     e9e:	b4 e1       	ldi	r27, 0x14	; 20
     ea0:	1d d4       	rcall	.+2106   	; 0x16dc <__umulhisi3>
     ea2:	96 95       	lsr	r25
     ea4:	87 95       	ror	r24
     ea6:	64 e6       	ldi	r22, 0x64	; 100
     ea8:	68 9f       	mul	r22, r24
     eaa:	90 01       	movw	r18, r0
     eac:	69 9f       	mul	r22, r25
     eae:	30 0d       	add	r19, r0
     eb0:	11 24       	eor	r1, r1
     eb2:	cf 01       	movw	r24, r30
     eb4:	82 1b       	sub	r24, r18
     eb6:	93 0b       	sbc	r25, r19
     eb8:	9c 01       	movw	r18, r24
     eba:	ad ec       	ldi	r26, 0xCD	; 205
     ebc:	bc ec       	ldi	r27, 0xCC	; 204
     ebe:	0e d4       	rcall	.+2076   	; 0x16dc <__umulhisi3>
     ec0:	96 95       	lsr	r25
     ec2:	87 95       	ror	r24
     ec4:	96 95       	lsr	r25
     ec6:	87 95       	ror	r24
     ec8:	96 95       	lsr	r25
     eca:	87 95       	ror	r24
     ecc:	80 5d       	subi	r24, 0xD0	; 208
     ece:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
     ed0:	9a 01       	movw	r18, r20
     ed2:	ab e7       	ldi	r26, 0x7B	; 123
     ed4:	b4 e1       	ldi	r27, 0x14	; 20
     ed6:	02 d4       	rcall	.+2052   	; 0x16dc <__umulhisi3>
     ed8:	96 95       	lsr	r25
     eda:	87 95       	ror	r24
     edc:	80 5d       	subi	r24, 0xD0	; 208
     ede:	88 83       	st	Y, r24
		break;
     ee0:	11 c1       	rjmp	.+546    	; 0x1104 <numPrinter+0x35c>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
     ee2:	ec 01       	movw	r28, r24
     ee4:	c6 0f       	add	r28, r22
     ee6:	d1 1d       	adc	r29, r1
     ee8:	ad ec       	ldi	r26, 0xCD	; 205
     eea:	bc ec       	ldi	r27, 0xCC	; 204
     eec:	f7 d3       	rcall	.+2030   	; 0x16dc <__umulhisi3>
     eee:	96 95       	lsr	r25
     ef0:	87 95       	ror	r24
     ef2:	96 95       	lsr	r25
     ef4:	87 95       	ror	r24
     ef6:	96 95       	lsr	r25
     ef8:	87 95       	ror	r24
     efa:	9c 01       	movw	r18, r24
     efc:	22 0f       	add	r18, r18
     efe:	33 1f       	adc	r19, r19
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	82 0f       	add	r24, r18
     f0e:	93 1f       	adc	r25, r19
     f10:	9f 01       	movw	r18, r30
     f12:	28 1b       	sub	r18, r24
     f14:	39 0b       	sbc	r19, r25
     f16:	c9 01       	movw	r24, r18
     f18:	80 5d       	subi	r24, 0xD0	; 208
     f1a:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
     f1c:	9f 01       	movw	r18, r30
     f1e:	36 95       	lsr	r19
     f20:	27 95       	ror	r18
     f22:	36 95       	lsr	r19
     f24:	27 95       	ror	r18
     f26:	ab e7       	ldi	r26, 0x7B	; 123
     f28:	b4 e1       	ldi	r27, 0x14	; 20
     f2a:	d8 d3       	rcall	.+1968   	; 0x16dc <__umulhisi3>
     f2c:	96 95       	lsr	r25
     f2e:	87 95       	ror	r24
     f30:	44 e6       	ldi	r20, 0x64	; 100
     f32:	48 9f       	mul	r20, r24
     f34:	90 01       	movw	r18, r0
     f36:	49 9f       	mul	r20, r25
     f38:	30 0d       	add	r19, r0
     f3a:	11 24       	eor	r1, r1
     f3c:	cf 01       	movw	r24, r30
     f3e:	82 1b       	sub	r24, r18
     f40:	93 0b       	sbc	r25, r19
     f42:	9c 01       	movw	r18, r24
     f44:	ad ec       	ldi	r26, 0xCD	; 205
     f46:	bc ec       	ldi	r27, 0xCC	; 204
     f48:	c9 d3       	rcall	.+1938   	; 0x16dc <__umulhisi3>
     f4a:	96 95       	lsr	r25
     f4c:	87 95       	ror	r24
     f4e:	96 95       	lsr	r25
     f50:	87 95       	ror	r24
     f52:	96 95       	lsr	r25
     f54:	87 95       	ror	r24
     f56:	80 5d       	subi	r24, 0xD0	; 208
     f58:	8a 83       	std	Y+2, r24	; 0x02
     f5a:	af 01       	movw	r20, r30
		charArray[(startingPos+1)] = hunderedsPlace;
     f5c:	56 95       	lsr	r21
     f5e:	47 95       	ror	r20
     f60:	56 95       	lsr	r21
     f62:	47 95       	ror	r20
     f64:	56 95       	lsr	r21
     f66:	47 95       	ror	r20
     f68:	9a 01       	movw	r18, r20
     f6a:	a5 ec       	ldi	r26, 0xC5	; 197
     f6c:	b0 e2       	ldi	r27, 0x20	; 32
     f6e:	b6 d3       	rcall	.+1900   	; 0x16dc <__umulhisi3>
     f70:	92 95       	swap	r25
     f72:	82 95       	swap	r24
     f74:	8f 70       	andi	r24, 0x0F	; 15
     f76:	89 27       	eor	r24, r25
     f78:	9f 70       	andi	r25, 0x0F	; 15
     f7a:	89 27       	eor	r24, r25
     f7c:	68 ee       	ldi	r22, 0xE8	; 232
     f7e:	73 e0       	ldi	r23, 0x03	; 3
     f80:	86 9f       	mul	r24, r22
     f82:	90 01       	movw	r18, r0
     f84:	87 9f       	mul	r24, r23
     f86:	30 0d       	add	r19, r0
     f88:	96 9f       	mul	r25, r22
     f8a:	30 0d       	add	r19, r0
     f8c:	11 24       	eor	r1, r1
     f8e:	cf 01       	movw	r24, r30
     f90:	82 1b       	sub	r24, r18
     f92:	93 0b       	sbc	r25, r19
     f94:	9c 01       	movw	r18, r24
     f96:	36 95       	lsr	r19
     f98:	27 95       	ror	r18
     f9a:	36 95       	lsr	r19
     f9c:	27 95       	ror	r18
     f9e:	ab e7       	ldi	r26, 0x7B	; 123
     fa0:	b4 e1       	ldi	r27, 0x14	; 20
     fa2:	9c d3       	rcall	.+1848   	; 0x16dc <__umulhisi3>
     fa4:	96 95       	lsr	r25
     fa6:	87 95       	ror	r24
     fa8:	80 5d       	subi	r24, 0xD0	; 208
     faa:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
     fac:	9a 01       	movw	r18, r20
     fae:	a5 ec       	ldi	r26, 0xC5	; 197
     fb0:	b0 e2       	ldi	r27, 0x20	; 32
     fb2:	94 d3       	rcall	.+1832   	; 0x16dc <__umulhisi3>
     fb4:	92 95       	swap	r25
     fb6:	82 95       	swap	r24
     fb8:	8f 70       	andi	r24, 0x0F	; 15
     fba:	89 27       	eor	r24, r25
     fbc:	9f 70       	andi	r25, 0x0F	; 15
     fbe:	89 27       	eor	r24, r25
     fc0:	80 5d       	subi	r24, 0xD0	; 208
     fc2:	88 83       	st	Y, r24
		break;
     fc4:	9f c0       	rjmp	.+318    	; 0x1104 <numPrinter+0x35c>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
     fc6:	ec 01       	movw	r28, r24
     fc8:	c6 0f       	add	r28, r22
     fca:	d1 1d       	adc	r29, r1
     fcc:	ad ec       	ldi	r26, 0xCD	; 205
     fce:	bc ec       	ldi	r27, 0xCC	; 204
     fd0:	85 d3       	rcall	.+1802   	; 0x16dc <__umulhisi3>
     fd2:	96 95       	lsr	r25
     fd4:	87 95       	ror	r24
     fd6:	96 95       	lsr	r25
     fd8:	87 95       	ror	r24
     fda:	96 95       	lsr	r25
     fdc:	87 95       	ror	r24
     fde:	9c 01       	movw	r18, r24
     fe0:	22 0f       	add	r18, r18
     fe2:	33 1f       	adc	r19, r19
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	82 0f       	add	r24, r18
     ff2:	93 1f       	adc	r25, r19
     ff4:	9f 01       	movw	r18, r30
     ff6:	28 1b       	sub	r18, r24
     ff8:	39 0b       	sbc	r19, r25
     ffa:	c9 01       	movw	r24, r18
     ffc:	80 5d       	subi	r24, 0xD0	; 208
     ffe:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
    1000:	9f 01       	movw	r18, r30
    1002:	36 95       	lsr	r19
    1004:	27 95       	ror	r18
    1006:	36 95       	lsr	r19
    1008:	27 95       	ror	r18
    100a:	ab e7       	ldi	r26, 0x7B	; 123
    100c:	b4 e1       	ldi	r27, 0x14	; 20
    100e:	66 d3       	rcall	.+1740   	; 0x16dc <__umulhisi3>
    1010:	96 95       	lsr	r25
    1012:	87 95       	ror	r24
    1014:	44 e6       	ldi	r20, 0x64	; 100
    1016:	48 9f       	mul	r20, r24
    1018:	90 01       	movw	r18, r0
    101a:	49 9f       	mul	r20, r25
    101c:	30 0d       	add	r19, r0
    101e:	11 24       	eor	r1, r1
    1020:	cf 01       	movw	r24, r30
    1022:	82 1b       	sub	r24, r18
    1024:	93 0b       	sbc	r25, r19
    1026:	9c 01       	movw	r18, r24
    1028:	ad ec       	ldi	r26, 0xCD	; 205
    102a:	bc ec       	ldi	r27, 0xCC	; 204
    102c:	57 d3       	rcall	.+1710   	; 0x16dc <__umulhisi3>
    102e:	96 95       	lsr	r25
    1030:	87 95       	ror	r24
    1032:	96 95       	lsr	r25
    1034:	87 95       	ror	r24
    1036:	96 95       	lsr	r25
    1038:	87 95       	ror	r24
    103a:	80 5d       	subi	r24, 0xD0	; 208
    103c:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
    103e:	9f 01       	movw	r18, r30
    1040:	36 95       	lsr	r19
    1042:	27 95       	ror	r18
    1044:	36 95       	lsr	r19
    1046:	27 95       	ror	r18
    1048:	36 95       	lsr	r19
    104a:	27 95       	ror	r18
    104c:	a5 ec       	ldi	r26, 0xC5	; 197
    104e:	b0 e2       	ldi	r27, 0x20	; 32
    1050:	45 d3       	rcall	.+1674   	; 0x16dc <__umulhisi3>
    1052:	92 95       	swap	r25
    1054:	82 95       	swap	r24
    1056:	8f 70       	andi	r24, 0x0F	; 15
    1058:	89 27       	eor	r24, r25
    105a:	9f 70       	andi	r25, 0x0F	; 15
    105c:	89 27       	eor	r24, r25
    105e:	48 ee       	ldi	r20, 0xE8	; 232
    1060:	53 e0       	ldi	r21, 0x03	; 3
    1062:	84 9f       	mul	r24, r20
    1064:	90 01       	movw	r18, r0
    1066:	85 9f       	mul	r24, r21
    1068:	30 0d       	add	r19, r0
    106a:	94 9f       	mul	r25, r20
    106c:	30 0d       	add	r19, r0
    106e:	11 24       	eor	r1, r1
    1070:	cf 01       	movw	r24, r30
    1072:	82 1b       	sub	r24, r18
    1074:	93 0b       	sbc	r25, r19
    1076:	9c 01       	movw	r18, r24
    1078:	36 95       	lsr	r19
    107a:	27 95       	ror	r18
    107c:	36 95       	lsr	r19
    107e:	27 95       	ror	r18
    1080:	ab e7       	ldi	r26, 0x7B	; 123
    1082:	b4 e1       	ldi	r27, 0x14	; 20
    1084:	2b d3       	rcall	.+1622   	; 0x16dc <__umulhisi3>
    1086:	96 95       	lsr	r25
    1088:	87 95       	ror	r24
    108a:	80 5d       	subi	r24, 0xD0	; 208
    108c:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
    108e:	af 01       	movw	r20, r30
    1090:	52 95       	swap	r21
    1092:	42 95       	swap	r20
    1094:	4f 70       	andi	r20, 0x0F	; 15
    1096:	45 27       	eor	r20, r21
    1098:	5f 70       	andi	r21, 0x0F	; 15
    109a:	45 27       	eor	r20, r21
    109c:	9a 01       	movw	r18, r20
    109e:	a7 e4       	ldi	r26, 0x47	; 71
    10a0:	b3 e0       	ldi	r27, 0x03	; 3
    10a2:	1c d3       	rcall	.+1592   	; 0x16dc <__umulhisi3>
    10a4:	96 95       	lsr	r25
    10a6:	87 95       	ror	r24
    10a8:	96 95       	lsr	r25
    10aa:	87 95       	ror	r24
    10ac:	96 95       	lsr	r25
    10ae:	87 95       	ror	r24
    10b0:	60 e1       	ldi	r22, 0x10	; 16
    10b2:	77 e2       	ldi	r23, 0x27	; 39
    10b4:	86 9f       	mul	r24, r22
    10b6:	90 01       	movw	r18, r0
    10b8:	87 9f       	mul	r24, r23
    10ba:	30 0d       	add	r19, r0
    10bc:	96 9f       	mul	r25, r22
    10be:	30 0d       	add	r19, r0
    10c0:	11 24       	eor	r1, r1
    10c2:	cf 01       	movw	r24, r30
    10c4:	82 1b       	sub	r24, r18
    10c6:	93 0b       	sbc	r25, r19
    10c8:	9c 01       	movw	r18, r24
    10ca:	36 95       	lsr	r19
    10cc:	27 95       	ror	r18
    10ce:	36 95       	lsr	r19
    10d0:	27 95       	ror	r18
    10d2:	36 95       	lsr	r19
    10d4:	27 95       	ror	r18
    10d6:	a5 ec       	ldi	r26, 0xC5	; 197
    10d8:	b0 e2       	ldi	r27, 0x20	; 32
    10da:	00 d3       	rcall	.+1536   	; 0x16dc <__umulhisi3>
    10dc:	92 95       	swap	r25
    10de:	82 95       	swap	r24
    10e0:	8f 70       	andi	r24, 0x0F	; 15
    10e2:	89 27       	eor	r24, r25
    10e4:	9f 70       	andi	r25, 0x0F	; 15
    10e6:	89 27       	eor	r24, r25
    10e8:	80 5d       	subi	r24, 0xD0	; 208
    10ea:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
    10ec:	9a 01       	movw	r18, r20
    10ee:	a7 e4       	ldi	r26, 0x47	; 71
    10f0:	b3 e0       	ldi	r27, 0x03	; 3
    10f2:	f4 d2       	rcall	.+1512   	; 0x16dc <__umulhisi3>
    10f4:	96 95       	lsr	r25
    10f6:	87 95       	ror	r24
    10f8:	96 95       	lsr	r25
    10fa:	87 95       	ror	r24
    10fc:	96 95       	lsr	r25
    10fe:	87 95       	ror	r24
    1100:	80 5d       	subi	r24, 0xD0	; 208
    1102:	88 83       	st	Y, r24
    1104:	df 91       	pop	r29
		break;
		
	}


    1106:	cf 91       	pop	r28
    1108:	08 95       	ret

0000110a <__vector_27>:

uint8_t rxReadPosition = 0;
uint8_t rxWritePosition = 0;

ISR (USART0_TX_vect)
{
    110a:	1f 92       	push	r1
    110c:	0f 92       	push	r0
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	0f 92       	push	r0
    1112:	11 24       	eor	r1, r1
    1114:	0b b6       	in	r0, 0x3b	; 59
    1116:	0f 92       	push	r0
    1118:	2f 93       	push	r18
    111a:	3f 93       	push	r19
    111c:	8f 93       	push	r24
    111e:	9f 93       	push	r25
    1120:	ef 93       	push	r30
    1122:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
    1124:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <serialReadPos>
    1128:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <serialReadPos+0x1>
    112c:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <serialWritePos>
    1130:	30 91 44 04 	lds	r19, 0x0444	; 0x800444 <serialWritePos+0x1>
    1134:	82 17       	cp	r24, r18
    1136:	93 07       	cpc	r25, r19
    1138:	b9 f0       	breq	.+46     	; 0x1168 <__vector_27+0x5e>
	{
		UDR0 = serial0Buffer[serialReadPos];
    113a:	fc 01       	movw	r30, r24
    113c:	e9 5f       	subi	r30, 0xF9	; 249
    113e:	f9 4f       	sbci	r31, 0xF9	; 249
    1140:	80 81       	ld	r24, Z
    1142:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
    1146:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <serialReadPos>
    114a:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <serialReadPos+0x1>
    114e:	01 96       	adiw	r24, 0x01	; 1
		
		if(serialReadPos >= TX_BUFFER_SIZE)
    1150:	80 38       	cpi	r24, 0x80	; 128
    1152:	91 05       	cpc	r25, r1
    1154:	2c f4       	brge	.+10     	; 0x1160 <__vector_27+0x56>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
    1156:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <serialReadPos+0x1>
    115a:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <serialReadPos>
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <__vector_27+0x5e>
		
		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
    1160:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <serialReadPos+0x1>
    1164:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <serialReadPos>
		}
	}
}
    1168:	ff 91       	pop	r31
    116a:	ef 91       	pop	r30
    116c:	9f 91       	pop	r25
    116e:	8f 91       	pop	r24
    1170:	3f 91       	pop	r19
    1172:	2f 91       	pop	r18
    1174:	0f 90       	pop	r0
    1176:	0b be       	out	0x3b, r0	; 59
    1178:	0f 90       	pop	r0
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	0f 90       	pop	r0
    117e:	1f 90       	pop	r1
    1180:	18 95       	reti

00001182 <__vector_36>:

ISR (USART1_RX_vect)
{
    1182:	1f 92       	push	r1
    1184:	0f 92       	push	r0
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	0f 92       	push	r0
    118a:	11 24       	eor	r1, r1
    118c:	0b b6       	in	r0, 0x3b	; 59
    118e:	0f 92       	push	r0
    1190:	8f 93       	push	r24
    1192:	9f 93       	push	r25
    1194:	ef 93       	push	r30
    1196:	ff 93       	push	r31
		serial1Buffer[rxWritePosition] = UDR1;
    1198:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <rxWritePosition>
    119c:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    11a0:	e8 2f       	mov	r30, r24
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	e9 57       	subi	r30, 0x79	; 121
    11a6:	f9 4f       	sbci	r31, 0xF9	; 249
    11a8:	90 83       	st	Z, r25
		rxWritePosition++;
    11aa:	8f 5f       	subi	r24, 0xFF	; 255
	
		if(rxWritePosition>= RX_BUFFER_SIZE)
    11ac:	1a f0       	brmi	.+6      	; 0x11b4 <__vector_36+0x32>
}

ISR (USART1_RX_vect)
{
		serial1Buffer[rxWritePosition] = UDR1;
		rxWritePosition++;
    11ae:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <rxWritePosition>
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <__vector_36+0x36>
	
		if(rxWritePosition>= RX_BUFFER_SIZE)
		{
			rxWritePosition = 0; //this could cause some issues.
    11b4:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <rxWritePosition>
		}


}
    11b8:	ff 91       	pop	r31
    11ba:	ef 91       	pop	r30
    11bc:	9f 91       	pop	r25
    11be:	8f 91       	pop	r24
    11c0:	0f 90       	pop	r0
    11c2:	0b be       	out	0x3b, r0	; 59
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	0f 90       	pop	r0
    11ca:	1f 90       	pop	r1
    11cc:	18 95       	reti

000011ce <appendSerial0>:

void appendSerial0(char c)
{
	serial0Buffer[serialWritePos] = c;
    11ce:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <serialWritePos>
    11d2:	30 91 44 04 	lds	r19, 0x0444	; 0x800444 <serialWritePos+0x1>
    11d6:	f9 01       	movw	r30, r18
    11d8:	e9 5f       	subi	r30, 0xF9	; 249
    11da:	f9 4f       	sbci	r31, 0xF9	; 249
    11dc:	80 83       	st	Z, r24
	serialWritePos++;
    11de:	2f 5f       	subi	r18, 0xFF	; 255
    11e0:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    11e2:	20 38       	cpi	r18, 0x80	; 128
    11e4:	31 05       	cpc	r19, r1
    11e6:	2c f4       	brge	.+10     	; 0x11f2 <appendSerial0+0x24>
}

void appendSerial0(char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    11e8:	30 93 44 04 	sts	0x0444, r19	; 0x800444 <serialWritePos+0x1>
    11ec:	20 93 43 04 	sts	0x0443, r18	; 0x800443 <serialWritePos>
    11f0:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    11f2:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <serialWritePos+0x1>
    11f6:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <serialWritePos>
    11fa:	08 95       	ret

000011fc <serialWrite0>:
	}
}

void serialWrite0(char c[])
{
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	ec 01       	movw	r28, r24
    1206:	8c 01       	movw	r16, r24
    1208:	06 5f       	subi	r16, 0xF6	; 246
    120a:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = 0; i<10; i++) //this may need to be 11
	{
		appendSerial0(c[i]);
    120c:	89 91       	ld	r24, Y+
    120e:	df df       	rcall	.-66     	; 0x11ce <appendSerial0>
	}
}

void serialWrite0(char c[])
{
	for (uint8_t i = 0; i<10; i++) //this may need to be 11
    1210:	c0 17       	cp	r28, r16
    1212:	d1 07       	cpc	r29, r17
    1214:	d9 f7       	brne	.-10     	; 0x120c <serialWrite0+0x10>
	{
		appendSerial0(c[i]);
		
	}
	
	if(UCSR0A & (1 << UDRE0))
    1216:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    121a:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    121c:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	08 95       	ret

0000122a <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    122a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    122e:	80 e1       	ldi	r24, 0x10	; 16
    1230:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

UBRR1H = (BRCMidi >> 8);
    1234:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
UBRR1L = BRCMidi;
    1238:	8f e1       	ldi	r24, 0x1F	; 31
    123a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>

UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    123e:	88 e4       	ldi	r24, 0x48	; 72
    1240:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    1244:	86 e0       	ldi	r24, 0x06	; 6
    1246:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>


UCSR1B = (1 << RXEN1)  | (1 << RXCIE0);
    124a:	90 e9       	ldi	r25, 0x90	; 144
    124c:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); //8 bit chars will be sent
    1250:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1254:	08 95       	ret

00001256 <getChar>:

char getChar()
{
	char returnMe = '\0';
	
	if(rxReadPosition != rxWritePosition)
    1256:	90 91 42 04 	lds	r25, 0x0442	; 0x800442 <rxReadPosition>
    125a:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <rxWritePosition>
    125e:	98 17       	cp	r25, r24
    1260:	69 f0       	breq	.+26     	; 0x127c <getChar+0x26>
	{
		returnMe = serial1Buffer[rxReadPosition];
    1262:	e9 2f       	mov	r30, r25
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	e9 57       	subi	r30, 0x79	; 121
    1268:	f9 4f       	sbci	r31, 0xF9	; 249
    126a:	80 81       	ld	r24, Z
		
		rxReadPosition++;
    126c:	9f 5f       	subi	r25, 0xFF	; 255
		
		if(rxReadPosition >= RX_BUFFER_SIZE)
    126e:	1a f0       	brmi	.+6      	; 0x1276 <getChar+0x20>
	
	if(rxReadPosition != rxWritePosition)
	{
		returnMe = serial1Buffer[rxReadPosition];
		
		rxReadPosition++;
    1270:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <rxReadPosition>
    1274:	08 95       	ret
		
		if(rxReadPosition >= RX_BUFFER_SIZE)
		{
			rxReadPosition = 0;
    1276:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <rxReadPosition>
    127a:	08 95       	ret

}

char getChar()
{
	char returnMe = '\0';
    127c:	80 e0       	ldi	r24, 0x00	; 0
		}
	
	}
	return returnMe;
	
    127e:	08 95       	ret

00001280 <trackControl>:
void resumeAll()
{
	char resumePlay[5] = {0xf0, 0xaa, 0x05, 0x0b, 0x55};
	serialWrite0(resumePlay);
	
}
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	2a 97       	sbiw	r28, 0x0a	; 10
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	90 ef       	ldi	r25, 0xF0	; 240
    1296:	99 83       	std	Y+1, r25	; 0x01
    1298:	9a ea       	ldi	r25, 0xAA	; 170
    129a:	9a 83       	std	Y+2, r25	; 0x02
    129c:	9a e0       	ldi	r25, 0x0A	; 10
    129e:	9b 83       	std	Y+3, r25	; 0x03
    12a0:	93 e0       	ldi	r25, 0x03	; 3
    12a2:	9c 83       	std	Y+4, r25	; 0x04
    12a4:	2d 83       	std	Y+5, r18	; 0x05
    12a6:	8e 83       	std	Y+6, r24	; 0x06
    12a8:	6f 83       	std	Y+7, r22	; 0x07
    12aa:	48 87       	std	Y+8, r20	; 0x08
    12ac:	19 86       	std	Y+9, r1	; 0x09
    12ae:	85 e5       	ldi	r24, 0x55	; 85
    12b0:	8a 87       	std	Y+10, r24	; 0x0a
    12b2:	ce 01       	movw	r24, r28
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	a2 df       	rcall	.-188    	; 0x11fc <serialWrite0>
    12b8:	2a 96       	adiw	r28, 0x0a	; 10
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	08 95       	ret

000012ca <setOutputVolume>:
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	28 97       	sbiw	r28, 0x08	; 8
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	90 ef       	ldi	r25, 0xF0	; 240
    12e0:	99 83       	std	Y+1, r25	; 0x01
    12e2:	9a ea       	ldi	r25, 0xAA	; 170
    12e4:	9a 83       	std	Y+2, r25	; 0x02
    12e6:	98 e0       	ldi	r25, 0x08	; 8
    12e8:	9b 83       	std	Y+3, r25	; 0x03
    12ea:	95 e0       	ldi	r25, 0x05	; 5
    12ec:	9c 83       	std	Y+4, r25	; 0x04
    12ee:	4d 83       	std	Y+5, r20	; 0x05
    12f0:	8e 83       	std	Y+6, r24	; 0x06
    12f2:	6f 83       	std	Y+7, r22	; 0x07
    12f4:	85 e5       	ldi	r24, 0x55	; 85
    12f6:	88 87       	std	Y+8, r24	; 0x08
    12f8:	ce 01       	movw	r24, r28
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	7f df       	rcall	.-258    	; 0x11fc <serialWrite0>
    12fe:	28 96       	adiw	r28, 0x08	; 8
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	08 95       	ret

00001310 <setTrackVolume>:
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	29 97       	sbiw	r28, 0x09	; 9
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	90 ef       	ldi	r25, 0xF0	; 240
    1326:	99 83       	std	Y+1, r25	; 0x01
    1328:	9a ea       	ldi	r25, 0xAA	; 170
    132a:	9a 83       	std	Y+2, r25	; 0x02
    132c:	99 e0       	ldi	r25, 0x09	; 9
    132e:	9b 83       	std	Y+3, r25	; 0x03
    1330:	98 e0       	ldi	r25, 0x08	; 8
    1332:	9c 83       	std	Y+4, r25	; 0x04
    1334:	8d 83       	std	Y+5, r24	; 0x05
    1336:	6e 83       	std	Y+6, r22	; 0x06
    1338:	4f 83       	std	Y+7, r20	; 0x07
    133a:	28 87       	std	Y+8, r18	; 0x08
    133c:	85 e5       	ldi	r24, 0x55	; 85
    133e:	89 87       	std	Y+9, r24	; 0x09
    1340:	ce 01       	movw	r24, r28
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	5b df       	rcall	.-330    	; 0x11fc <serialWrite0>
    1346:	29 96       	adiw	r28, 0x09	; 9
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	08 95       	ret

00001358 <outputSampleRate>:

void outputSampleRate(uint8_t outputSelect, uint8_t offsetLSB, uint8_t offsetMSB)
{
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	28 97       	sbiw	r28, 0x08	; 8
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
	char pitchChange[8] = {0xf0, 0xaa, 0x08, 0x0c, outputSelect, offsetLSB, offsetMSB, 0x55};
    136c:	90 ef       	ldi	r25, 0xF0	; 240
    136e:	99 83       	std	Y+1, r25	; 0x01
    1370:	9a ea       	ldi	r25, 0xAA	; 170
    1372:	9a 83       	std	Y+2, r25	; 0x02
    1374:	98 e0       	ldi	r25, 0x08	; 8
    1376:	9b 83       	std	Y+3, r25	; 0x03
    1378:	9c e0       	ldi	r25, 0x0C	; 12
    137a:	9c 83       	std	Y+4, r25	; 0x04
    137c:	8d 83       	std	Y+5, r24	; 0x05
    137e:	6e 83       	std	Y+6, r22	; 0x06
    1380:	4f 83       	std	Y+7, r20	; 0x07
    1382:	85 e5       	ldi	r24, 0x55	; 85
    1384:	88 87       	std	Y+8, r24	; 0x08
	serialWrite0(pitchChange);
    1386:	ce 01       	movw	r24, r28
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	38 df       	rcall	.-400    	; 0x11fc <serialWrite0>
}
    138c:	28 96       	adiw	r28, 0x08	; 8
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	08 95       	ret

0000139e <__subsf3>:
    139e:	50 58       	subi	r21, 0x80	; 128

000013a0 <__addsf3>:
    13a0:	bb 27       	eor	r27, r27
    13a2:	aa 27       	eor	r26, r26
    13a4:	0e d0       	rcall	.+28     	; 0x13c2 <__addsf3x>
    13a6:	4d c1       	rjmp	.+666    	; 0x1642 <__fp_round>
    13a8:	3e d1       	rcall	.+636    	; 0x1626 <__fp_pscA>
    13aa:	30 f0       	brcs	.+12     	; 0x13b8 <__addsf3+0x18>
    13ac:	43 d1       	rcall	.+646    	; 0x1634 <__fp_pscB>
    13ae:	20 f0       	brcs	.+8      	; 0x13b8 <__addsf3+0x18>
    13b0:	31 f4       	brne	.+12     	; 0x13be <__addsf3+0x1e>
    13b2:	9f 3f       	cpi	r25, 0xFF	; 255
    13b4:	11 f4       	brne	.+4      	; 0x13ba <__addsf3+0x1a>
    13b6:	1e f4       	brtc	.+6      	; 0x13be <__addsf3+0x1e>
    13b8:	33 c1       	rjmp	.+614    	; 0x1620 <__fp_nan>
    13ba:	0e f4       	brtc	.+2      	; 0x13be <__addsf3+0x1e>
    13bc:	e0 95       	com	r30
    13be:	e7 fb       	bst	r30, 7
    13c0:	29 c1       	rjmp	.+594    	; 0x1614 <__fp_inf>

000013c2 <__addsf3x>:
    13c2:	e9 2f       	mov	r30, r25
    13c4:	4f d1       	rcall	.+670    	; 0x1664 <__fp_split3>
    13c6:	80 f3       	brcs	.-32     	; 0x13a8 <__addsf3+0x8>
    13c8:	ba 17       	cp	r27, r26
    13ca:	62 07       	cpc	r22, r18
    13cc:	73 07       	cpc	r23, r19
    13ce:	84 07       	cpc	r24, r20
    13d0:	95 07       	cpc	r25, r21
    13d2:	18 f0       	brcs	.+6      	; 0x13da <__addsf3x+0x18>
    13d4:	71 f4       	brne	.+28     	; 0x13f2 <__addsf3x+0x30>
    13d6:	9e f5       	brtc	.+102    	; 0x143e <__addsf3x+0x7c>
    13d8:	67 c1       	rjmp	.+718    	; 0x16a8 <__fp_zero>
    13da:	0e f4       	brtc	.+2      	; 0x13de <__addsf3x+0x1c>
    13dc:	e0 95       	com	r30
    13de:	0b 2e       	mov	r0, r27
    13e0:	ba 2f       	mov	r27, r26
    13e2:	a0 2d       	mov	r26, r0
    13e4:	0b 01       	movw	r0, r22
    13e6:	b9 01       	movw	r22, r18
    13e8:	90 01       	movw	r18, r0
    13ea:	0c 01       	movw	r0, r24
    13ec:	ca 01       	movw	r24, r20
    13ee:	a0 01       	movw	r20, r0
    13f0:	11 24       	eor	r1, r1
    13f2:	ff 27       	eor	r31, r31
    13f4:	59 1b       	sub	r21, r25
    13f6:	99 f0       	breq	.+38     	; 0x141e <__addsf3x+0x5c>
    13f8:	59 3f       	cpi	r21, 0xF9	; 249
    13fa:	50 f4       	brcc	.+20     	; 0x1410 <__addsf3x+0x4e>
    13fc:	50 3e       	cpi	r21, 0xE0	; 224
    13fe:	68 f1       	brcs	.+90     	; 0x145a <__addsf3x+0x98>
    1400:	1a 16       	cp	r1, r26
    1402:	f0 40       	sbci	r31, 0x00	; 0
    1404:	a2 2f       	mov	r26, r18
    1406:	23 2f       	mov	r18, r19
    1408:	34 2f       	mov	r19, r20
    140a:	44 27       	eor	r20, r20
    140c:	58 5f       	subi	r21, 0xF8	; 248
    140e:	f3 cf       	rjmp	.-26     	; 0x13f6 <__addsf3x+0x34>
    1410:	46 95       	lsr	r20
    1412:	37 95       	ror	r19
    1414:	27 95       	ror	r18
    1416:	a7 95       	ror	r26
    1418:	f0 40       	sbci	r31, 0x00	; 0
    141a:	53 95       	inc	r21
    141c:	c9 f7       	brne	.-14     	; 0x1410 <__addsf3x+0x4e>
    141e:	7e f4       	brtc	.+30     	; 0x143e <__addsf3x+0x7c>
    1420:	1f 16       	cp	r1, r31
    1422:	ba 0b       	sbc	r27, r26
    1424:	62 0b       	sbc	r22, r18
    1426:	73 0b       	sbc	r23, r19
    1428:	84 0b       	sbc	r24, r20
    142a:	ba f0       	brmi	.+46     	; 0x145a <__addsf3x+0x98>
    142c:	91 50       	subi	r25, 0x01	; 1
    142e:	a1 f0       	breq	.+40     	; 0x1458 <__addsf3x+0x96>
    1430:	ff 0f       	add	r31, r31
    1432:	bb 1f       	adc	r27, r27
    1434:	66 1f       	adc	r22, r22
    1436:	77 1f       	adc	r23, r23
    1438:	88 1f       	adc	r24, r24
    143a:	c2 f7       	brpl	.-16     	; 0x142c <__addsf3x+0x6a>
    143c:	0e c0       	rjmp	.+28     	; 0x145a <__addsf3x+0x98>
    143e:	ba 0f       	add	r27, r26
    1440:	62 1f       	adc	r22, r18
    1442:	73 1f       	adc	r23, r19
    1444:	84 1f       	adc	r24, r20
    1446:	48 f4       	brcc	.+18     	; 0x145a <__addsf3x+0x98>
    1448:	87 95       	ror	r24
    144a:	77 95       	ror	r23
    144c:	67 95       	ror	r22
    144e:	b7 95       	ror	r27
    1450:	f7 95       	ror	r31
    1452:	9e 3f       	cpi	r25, 0xFE	; 254
    1454:	08 f0       	brcs	.+2      	; 0x1458 <__addsf3x+0x96>
    1456:	b3 cf       	rjmp	.-154    	; 0x13be <__addsf3+0x1e>
    1458:	93 95       	inc	r25
    145a:	88 0f       	add	r24, r24
    145c:	08 f0       	brcs	.+2      	; 0x1460 <__addsf3x+0x9e>
    145e:	99 27       	eor	r25, r25
    1460:	ee 0f       	add	r30, r30
    1462:	97 95       	ror	r25
    1464:	87 95       	ror	r24
    1466:	08 95       	ret

00001468 <__divsf3>:
    1468:	0c d0       	rcall	.+24     	; 0x1482 <__divsf3x>
    146a:	eb c0       	rjmp	.+470    	; 0x1642 <__fp_round>
    146c:	e3 d0       	rcall	.+454    	; 0x1634 <__fp_pscB>
    146e:	40 f0       	brcs	.+16     	; 0x1480 <__divsf3+0x18>
    1470:	da d0       	rcall	.+436    	; 0x1626 <__fp_pscA>
    1472:	30 f0       	brcs	.+12     	; 0x1480 <__divsf3+0x18>
    1474:	21 f4       	brne	.+8      	; 0x147e <__divsf3+0x16>
    1476:	5f 3f       	cpi	r21, 0xFF	; 255
    1478:	19 f0       	breq	.+6      	; 0x1480 <__divsf3+0x18>
    147a:	cc c0       	rjmp	.+408    	; 0x1614 <__fp_inf>
    147c:	51 11       	cpse	r21, r1
    147e:	15 c1       	rjmp	.+554    	; 0x16aa <__fp_szero>
    1480:	cf c0       	rjmp	.+414    	; 0x1620 <__fp_nan>

00001482 <__divsf3x>:
    1482:	f0 d0       	rcall	.+480    	; 0x1664 <__fp_split3>
    1484:	98 f3       	brcs	.-26     	; 0x146c <__divsf3+0x4>

00001486 <__divsf3_pse>:
    1486:	99 23       	and	r25, r25
    1488:	c9 f3       	breq	.-14     	; 0x147c <__divsf3+0x14>
    148a:	55 23       	and	r21, r21
    148c:	b1 f3       	breq	.-20     	; 0x147a <__divsf3+0x12>
    148e:	95 1b       	sub	r25, r21
    1490:	55 0b       	sbc	r21, r21
    1492:	bb 27       	eor	r27, r27
    1494:	aa 27       	eor	r26, r26
    1496:	62 17       	cp	r22, r18
    1498:	73 07       	cpc	r23, r19
    149a:	84 07       	cpc	r24, r20
    149c:	38 f0       	brcs	.+14     	; 0x14ac <__divsf3_pse+0x26>
    149e:	9f 5f       	subi	r25, 0xFF	; 255
    14a0:	5f 4f       	sbci	r21, 0xFF	; 255
    14a2:	22 0f       	add	r18, r18
    14a4:	33 1f       	adc	r19, r19
    14a6:	44 1f       	adc	r20, r20
    14a8:	aa 1f       	adc	r26, r26
    14aa:	a9 f3       	breq	.-22     	; 0x1496 <__divsf3_pse+0x10>
    14ac:	33 d0       	rcall	.+102    	; 0x1514 <__divsf3_pse+0x8e>
    14ae:	0e 2e       	mov	r0, r30
    14b0:	3a f0       	brmi	.+14     	; 0x14c0 <__divsf3_pse+0x3a>
    14b2:	e0 e8       	ldi	r30, 0x80	; 128
    14b4:	30 d0       	rcall	.+96     	; 0x1516 <__divsf3_pse+0x90>
    14b6:	91 50       	subi	r25, 0x01	; 1
    14b8:	50 40       	sbci	r21, 0x00	; 0
    14ba:	e6 95       	lsr	r30
    14bc:	00 1c       	adc	r0, r0
    14be:	ca f7       	brpl	.-14     	; 0x14b2 <__divsf3_pse+0x2c>
    14c0:	29 d0       	rcall	.+82     	; 0x1514 <__divsf3_pse+0x8e>
    14c2:	fe 2f       	mov	r31, r30
    14c4:	27 d0       	rcall	.+78     	; 0x1514 <__divsf3_pse+0x8e>
    14c6:	66 0f       	add	r22, r22
    14c8:	77 1f       	adc	r23, r23
    14ca:	88 1f       	adc	r24, r24
    14cc:	bb 1f       	adc	r27, r27
    14ce:	26 17       	cp	r18, r22
    14d0:	37 07       	cpc	r19, r23
    14d2:	48 07       	cpc	r20, r24
    14d4:	ab 07       	cpc	r26, r27
    14d6:	b0 e8       	ldi	r27, 0x80	; 128
    14d8:	09 f0       	breq	.+2      	; 0x14dc <__divsf3_pse+0x56>
    14da:	bb 0b       	sbc	r27, r27
    14dc:	80 2d       	mov	r24, r0
    14de:	bf 01       	movw	r22, r30
    14e0:	ff 27       	eor	r31, r31
    14e2:	93 58       	subi	r25, 0x83	; 131
    14e4:	5f 4f       	sbci	r21, 0xFF	; 255
    14e6:	2a f0       	brmi	.+10     	; 0x14f2 <__divsf3_pse+0x6c>
    14e8:	9e 3f       	cpi	r25, 0xFE	; 254
    14ea:	51 05       	cpc	r21, r1
    14ec:	68 f0       	brcs	.+26     	; 0x1508 <__divsf3_pse+0x82>
    14ee:	92 c0       	rjmp	.+292    	; 0x1614 <__fp_inf>
    14f0:	dc c0       	rjmp	.+440    	; 0x16aa <__fp_szero>
    14f2:	5f 3f       	cpi	r21, 0xFF	; 255
    14f4:	ec f3       	brlt	.-6      	; 0x14f0 <__divsf3_pse+0x6a>
    14f6:	98 3e       	cpi	r25, 0xE8	; 232
    14f8:	dc f3       	brlt	.-10     	; 0x14f0 <__divsf3_pse+0x6a>
    14fa:	86 95       	lsr	r24
    14fc:	77 95       	ror	r23
    14fe:	67 95       	ror	r22
    1500:	b7 95       	ror	r27
    1502:	f7 95       	ror	r31
    1504:	9f 5f       	subi	r25, 0xFF	; 255
    1506:	c9 f7       	brne	.-14     	; 0x14fa <__divsf3_pse+0x74>
    1508:	88 0f       	add	r24, r24
    150a:	91 1d       	adc	r25, r1
    150c:	96 95       	lsr	r25
    150e:	87 95       	ror	r24
    1510:	97 f9       	bld	r25, 7
    1512:	08 95       	ret
    1514:	e1 e0       	ldi	r30, 0x01	; 1
    1516:	66 0f       	add	r22, r22
    1518:	77 1f       	adc	r23, r23
    151a:	88 1f       	adc	r24, r24
    151c:	bb 1f       	adc	r27, r27
    151e:	62 17       	cp	r22, r18
    1520:	73 07       	cpc	r23, r19
    1522:	84 07       	cpc	r24, r20
    1524:	ba 07       	cpc	r27, r26
    1526:	20 f0       	brcs	.+8      	; 0x1530 <__divsf3_pse+0xaa>
    1528:	62 1b       	sub	r22, r18
    152a:	73 0b       	sbc	r23, r19
    152c:	84 0b       	sbc	r24, r20
    152e:	ba 0b       	sbc	r27, r26
    1530:	ee 1f       	adc	r30, r30
    1532:	88 f7       	brcc	.-30     	; 0x1516 <__divsf3_pse+0x90>
    1534:	e0 95       	com	r30
    1536:	08 95       	ret

00001538 <__fixsfsi>:
    1538:	04 d0       	rcall	.+8      	; 0x1542 <__fixunssfsi>
    153a:	68 94       	set
    153c:	b1 11       	cpse	r27, r1
    153e:	b5 c0       	rjmp	.+362    	; 0x16aa <__fp_szero>
    1540:	08 95       	ret

00001542 <__fixunssfsi>:
    1542:	98 d0       	rcall	.+304    	; 0x1674 <__fp_splitA>
    1544:	88 f0       	brcs	.+34     	; 0x1568 <__fixunssfsi+0x26>
    1546:	9f 57       	subi	r25, 0x7F	; 127
    1548:	90 f0       	brcs	.+36     	; 0x156e <__fixunssfsi+0x2c>
    154a:	b9 2f       	mov	r27, r25
    154c:	99 27       	eor	r25, r25
    154e:	b7 51       	subi	r27, 0x17	; 23
    1550:	a0 f0       	brcs	.+40     	; 0x157a <__fixunssfsi+0x38>
    1552:	d1 f0       	breq	.+52     	; 0x1588 <__fixunssfsi+0x46>
    1554:	66 0f       	add	r22, r22
    1556:	77 1f       	adc	r23, r23
    1558:	88 1f       	adc	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	1a f0       	brmi	.+6      	; 0x1564 <__fixunssfsi+0x22>
    155e:	ba 95       	dec	r27
    1560:	c9 f7       	brne	.-14     	; 0x1554 <__fixunssfsi+0x12>
    1562:	12 c0       	rjmp	.+36     	; 0x1588 <__fixunssfsi+0x46>
    1564:	b1 30       	cpi	r27, 0x01	; 1
    1566:	81 f0       	breq	.+32     	; 0x1588 <__fixunssfsi+0x46>
    1568:	9f d0       	rcall	.+318    	; 0x16a8 <__fp_zero>
    156a:	b1 e0       	ldi	r27, 0x01	; 1
    156c:	08 95       	ret
    156e:	9c c0       	rjmp	.+312    	; 0x16a8 <__fp_zero>
    1570:	67 2f       	mov	r22, r23
    1572:	78 2f       	mov	r23, r24
    1574:	88 27       	eor	r24, r24
    1576:	b8 5f       	subi	r27, 0xF8	; 248
    1578:	39 f0       	breq	.+14     	; 0x1588 <__fixunssfsi+0x46>
    157a:	b9 3f       	cpi	r27, 0xF9	; 249
    157c:	cc f3       	brlt	.-14     	; 0x1570 <__fixunssfsi+0x2e>
    157e:	86 95       	lsr	r24
    1580:	77 95       	ror	r23
    1582:	67 95       	ror	r22
    1584:	b3 95       	inc	r27
    1586:	d9 f7       	brne	.-10     	; 0x157e <__fixunssfsi+0x3c>
    1588:	3e f4       	brtc	.+14     	; 0x1598 <__fixunssfsi+0x56>
    158a:	90 95       	com	r25
    158c:	80 95       	com	r24
    158e:	70 95       	com	r23
    1590:	61 95       	neg	r22
    1592:	7f 4f       	sbci	r23, 0xFF	; 255
    1594:	8f 4f       	sbci	r24, 0xFF	; 255
    1596:	9f 4f       	sbci	r25, 0xFF	; 255
    1598:	08 95       	ret

0000159a <__floatunsisf>:
    159a:	e8 94       	clt
    159c:	09 c0       	rjmp	.+18     	; 0x15b0 <__floatsisf+0x12>

0000159e <__floatsisf>:
    159e:	97 fb       	bst	r25, 7
    15a0:	3e f4       	brtc	.+14     	; 0x15b0 <__floatsisf+0x12>
    15a2:	90 95       	com	r25
    15a4:	80 95       	com	r24
    15a6:	70 95       	com	r23
    15a8:	61 95       	neg	r22
    15aa:	7f 4f       	sbci	r23, 0xFF	; 255
    15ac:	8f 4f       	sbci	r24, 0xFF	; 255
    15ae:	9f 4f       	sbci	r25, 0xFF	; 255
    15b0:	99 23       	and	r25, r25
    15b2:	a9 f0       	breq	.+42     	; 0x15de <__floatsisf+0x40>
    15b4:	f9 2f       	mov	r31, r25
    15b6:	96 e9       	ldi	r25, 0x96	; 150
    15b8:	bb 27       	eor	r27, r27
    15ba:	93 95       	inc	r25
    15bc:	f6 95       	lsr	r31
    15be:	87 95       	ror	r24
    15c0:	77 95       	ror	r23
    15c2:	67 95       	ror	r22
    15c4:	b7 95       	ror	r27
    15c6:	f1 11       	cpse	r31, r1
    15c8:	f8 cf       	rjmp	.-16     	; 0x15ba <__floatsisf+0x1c>
    15ca:	fa f4       	brpl	.+62     	; 0x160a <__floatsisf+0x6c>
    15cc:	bb 0f       	add	r27, r27
    15ce:	11 f4       	brne	.+4      	; 0x15d4 <__floatsisf+0x36>
    15d0:	60 ff       	sbrs	r22, 0
    15d2:	1b c0       	rjmp	.+54     	; 0x160a <__floatsisf+0x6c>
    15d4:	6f 5f       	subi	r22, 0xFF	; 255
    15d6:	7f 4f       	sbci	r23, 0xFF	; 255
    15d8:	8f 4f       	sbci	r24, 0xFF	; 255
    15da:	9f 4f       	sbci	r25, 0xFF	; 255
    15dc:	16 c0       	rjmp	.+44     	; 0x160a <__floatsisf+0x6c>
    15de:	88 23       	and	r24, r24
    15e0:	11 f0       	breq	.+4      	; 0x15e6 <__floatsisf+0x48>
    15e2:	96 e9       	ldi	r25, 0x96	; 150
    15e4:	11 c0       	rjmp	.+34     	; 0x1608 <__floatsisf+0x6a>
    15e6:	77 23       	and	r23, r23
    15e8:	21 f0       	breq	.+8      	; 0x15f2 <__floatsisf+0x54>
    15ea:	9e e8       	ldi	r25, 0x8E	; 142
    15ec:	87 2f       	mov	r24, r23
    15ee:	76 2f       	mov	r23, r22
    15f0:	05 c0       	rjmp	.+10     	; 0x15fc <__floatsisf+0x5e>
    15f2:	66 23       	and	r22, r22
    15f4:	71 f0       	breq	.+28     	; 0x1612 <__floatsisf+0x74>
    15f6:	96 e8       	ldi	r25, 0x86	; 134
    15f8:	86 2f       	mov	r24, r22
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	2a f0       	brmi	.+10     	; 0x160a <__floatsisf+0x6c>
    1600:	9a 95       	dec	r25
    1602:	66 0f       	add	r22, r22
    1604:	77 1f       	adc	r23, r23
    1606:	88 1f       	adc	r24, r24
    1608:	da f7       	brpl	.-10     	; 0x1600 <__floatsisf+0x62>
    160a:	88 0f       	add	r24, r24
    160c:	96 95       	lsr	r25
    160e:	87 95       	ror	r24
    1610:	97 f9       	bld	r25, 7
    1612:	08 95       	ret

00001614 <__fp_inf>:
    1614:	97 f9       	bld	r25, 7
    1616:	9f 67       	ori	r25, 0x7F	; 127
    1618:	80 e8       	ldi	r24, 0x80	; 128
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	60 e0       	ldi	r22, 0x00	; 0
    161e:	08 95       	ret

00001620 <__fp_nan>:
    1620:	9f ef       	ldi	r25, 0xFF	; 255
    1622:	80 ec       	ldi	r24, 0xC0	; 192
    1624:	08 95       	ret

00001626 <__fp_pscA>:
    1626:	00 24       	eor	r0, r0
    1628:	0a 94       	dec	r0
    162a:	16 16       	cp	r1, r22
    162c:	17 06       	cpc	r1, r23
    162e:	18 06       	cpc	r1, r24
    1630:	09 06       	cpc	r0, r25
    1632:	08 95       	ret

00001634 <__fp_pscB>:
    1634:	00 24       	eor	r0, r0
    1636:	0a 94       	dec	r0
    1638:	12 16       	cp	r1, r18
    163a:	13 06       	cpc	r1, r19
    163c:	14 06       	cpc	r1, r20
    163e:	05 06       	cpc	r0, r21
    1640:	08 95       	ret

00001642 <__fp_round>:
    1642:	09 2e       	mov	r0, r25
    1644:	03 94       	inc	r0
    1646:	00 0c       	add	r0, r0
    1648:	11 f4       	brne	.+4      	; 0x164e <__fp_round+0xc>
    164a:	88 23       	and	r24, r24
    164c:	52 f0       	brmi	.+20     	; 0x1662 <__fp_round+0x20>
    164e:	bb 0f       	add	r27, r27
    1650:	40 f4       	brcc	.+16     	; 0x1662 <__fp_round+0x20>
    1652:	bf 2b       	or	r27, r31
    1654:	11 f4       	brne	.+4      	; 0x165a <__fp_round+0x18>
    1656:	60 ff       	sbrs	r22, 0
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <__fp_round+0x20>
    165a:	6f 5f       	subi	r22, 0xFF	; 255
    165c:	7f 4f       	sbci	r23, 0xFF	; 255
    165e:	8f 4f       	sbci	r24, 0xFF	; 255
    1660:	9f 4f       	sbci	r25, 0xFF	; 255
    1662:	08 95       	ret

00001664 <__fp_split3>:
    1664:	57 fd       	sbrc	r21, 7
    1666:	90 58       	subi	r25, 0x80	; 128
    1668:	44 0f       	add	r20, r20
    166a:	55 1f       	adc	r21, r21
    166c:	59 f0       	breq	.+22     	; 0x1684 <__fp_splitA+0x10>
    166e:	5f 3f       	cpi	r21, 0xFF	; 255
    1670:	71 f0       	breq	.+28     	; 0x168e <__fp_splitA+0x1a>
    1672:	47 95       	ror	r20

00001674 <__fp_splitA>:
    1674:	88 0f       	add	r24, r24
    1676:	97 fb       	bst	r25, 7
    1678:	99 1f       	adc	r25, r25
    167a:	61 f0       	breq	.+24     	; 0x1694 <__fp_splitA+0x20>
    167c:	9f 3f       	cpi	r25, 0xFF	; 255
    167e:	79 f0       	breq	.+30     	; 0x169e <__fp_splitA+0x2a>
    1680:	87 95       	ror	r24
    1682:	08 95       	ret
    1684:	12 16       	cp	r1, r18
    1686:	13 06       	cpc	r1, r19
    1688:	14 06       	cpc	r1, r20
    168a:	55 1f       	adc	r21, r21
    168c:	f2 cf       	rjmp	.-28     	; 0x1672 <__fp_split3+0xe>
    168e:	46 95       	lsr	r20
    1690:	f1 df       	rcall	.-30     	; 0x1674 <__fp_splitA>
    1692:	08 c0       	rjmp	.+16     	; 0x16a4 <__fp_splitA+0x30>
    1694:	16 16       	cp	r1, r22
    1696:	17 06       	cpc	r1, r23
    1698:	18 06       	cpc	r1, r24
    169a:	99 1f       	adc	r25, r25
    169c:	f1 cf       	rjmp	.-30     	; 0x1680 <__fp_splitA+0xc>
    169e:	86 95       	lsr	r24
    16a0:	71 05       	cpc	r23, r1
    16a2:	61 05       	cpc	r22, r1
    16a4:	08 94       	sec
    16a6:	08 95       	ret

000016a8 <__fp_zero>:
    16a8:	e8 94       	clt

000016aa <__fp_szero>:
    16aa:	bb 27       	eor	r27, r27
    16ac:	66 27       	eor	r22, r22
    16ae:	77 27       	eor	r23, r23
    16b0:	cb 01       	movw	r24, r22
    16b2:	97 f9       	bld	r25, 7
    16b4:	08 95       	ret

000016b6 <__divmodhi4>:
    16b6:	97 fb       	bst	r25, 7
    16b8:	07 2e       	mov	r0, r23
    16ba:	16 f4       	brtc	.+4      	; 0x16c0 <__divmodhi4+0xa>
    16bc:	00 94       	com	r0
    16be:	06 d0       	rcall	.+12     	; 0x16cc <__divmodhi4_neg1>
    16c0:	77 fd       	sbrc	r23, 7
    16c2:	08 d0       	rcall	.+16     	; 0x16d4 <__divmodhi4_neg2>
    16c4:	1a d0       	rcall	.+52     	; 0x16fa <__udivmodhi4>
    16c6:	07 fc       	sbrc	r0, 7
    16c8:	05 d0       	rcall	.+10     	; 0x16d4 <__divmodhi4_neg2>
    16ca:	3e f4       	brtc	.+14     	; 0x16da <__divmodhi4_exit>

000016cc <__divmodhi4_neg1>:
    16cc:	90 95       	com	r25
    16ce:	81 95       	neg	r24
    16d0:	9f 4f       	sbci	r25, 0xFF	; 255
    16d2:	08 95       	ret

000016d4 <__divmodhi4_neg2>:
    16d4:	70 95       	com	r23
    16d6:	61 95       	neg	r22
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255

000016da <__divmodhi4_exit>:
    16da:	08 95       	ret

000016dc <__umulhisi3>:
    16dc:	a2 9f       	mul	r26, r18
    16de:	b0 01       	movw	r22, r0
    16e0:	b3 9f       	mul	r27, r19
    16e2:	c0 01       	movw	r24, r0
    16e4:	a3 9f       	mul	r26, r19
    16e6:	70 0d       	add	r23, r0
    16e8:	81 1d       	adc	r24, r1
    16ea:	11 24       	eor	r1, r1
    16ec:	91 1d       	adc	r25, r1
    16ee:	b2 9f       	mul	r27, r18
    16f0:	70 0d       	add	r23, r0
    16f2:	81 1d       	adc	r24, r1
    16f4:	11 24       	eor	r1, r1
    16f6:	91 1d       	adc	r25, r1
    16f8:	08 95       	ret

000016fa <__udivmodhi4>:
    16fa:	aa 1b       	sub	r26, r26
    16fc:	bb 1b       	sub	r27, r27
    16fe:	51 e1       	ldi	r21, 0x11	; 17
    1700:	07 c0       	rjmp	.+14     	; 0x1710 <__udivmodhi4_ep>

00001702 <__udivmodhi4_loop>:
    1702:	aa 1f       	adc	r26, r26
    1704:	bb 1f       	adc	r27, r27
    1706:	a6 17       	cp	r26, r22
    1708:	b7 07       	cpc	r27, r23
    170a:	10 f0       	brcs	.+4      	; 0x1710 <__udivmodhi4_ep>
    170c:	a6 1b       	sub	r26, r22
    170e:	b7 0b       	sbc	r27, r23

00001710 <__udivmodhi4_ep>:
    1710:	88 1f       	adc	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	5a 95       	dec	r21
    1716:	a9 f7       	brne	.-22     	; 0x1702 <__udivmodhi4_loop>
    1718:	80 95       	com	r24
    171a:	90 95       	com	r25
    171c:	bc 01       	movw	r22, r24
    171e:	cd 01       	movw	r24, r26
    1720:	08 95       	ret

00001722 <_exit>:
    1722:	f8 94       	cli

00001724 <__stop_program>:
    1724:	ff cf       	rjmp	.-2      	; 0x1724 <__stop_program>
