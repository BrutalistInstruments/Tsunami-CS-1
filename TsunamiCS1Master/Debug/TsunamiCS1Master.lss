
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001cc  00800200  00001362  000013f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001362  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000230  008003cc  008003cc  000015c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003627  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000156d  00000000  00000000  00004e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000142c  00000000  00000000  00006400  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d0  00000000  00000000  0000782c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000df3  00000000  00000000  00007cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019ef  00000000  00000000  00008aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000a4de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b1 c6       	rjmp	.+3426   	; 0xdd0 <__vector_27>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e6       	ldi	r30, 0x62	; 98
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 3c       	cpi	r26, 0xCC	; 204
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	25 e0       	ldi	r18, 0x05	; 5
     110:	ac ec       	ldi	r26, 0xCC	; 204
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ac 3f       	cpi	r26, 0xFC	; 252
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	85 d3       	rcall	.+1802   	; 0x82a <main>
     120:	0c 94 af 09 	jmp	0x135e	; 0x135e <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     126:	8f ef       	ldi	r24, 0xFF	; 255
     128:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     12a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons
	PORTB = 0B00011111;
     12e:	8f e1       	ldi	r24, 0x1F	; 31
     130:	85 b9       	out	0x05, r24	; 5
     132:	08 95       	ret

00000134 <listenTrigButtons>:
	//what ports are the encoder buttons on?
}


void listenTrigButtons()
{
     134:	cf 92       	push	r12
     136:	df 92       	push	r13
     138:	ef 92       	push	r14
     13a:	ff 92       	push	r15
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     144:	c0 91 09 01 	lds	r28, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     148:	c0 95       	com	r28
     14a:	c0 93 1b 05 	sts	0x051B, r28	; 0x80051b <buttonsCurrentCycle>
	currentTrigButtons = (buttonsCurrentCycle << 8) | (PINA^255);
     14e:	80 b1       	in	r24, 0x00	; 0
     150:	d0 e0       	ldi	r29, 0x00	; 0
     152:	dc 2f       	mov	r29, r28
     154:	cc 27       	eor	r28, r28
     156:	80 95       	com	r24
     158:	c8 2b       	or	r28, r24
     15a:	d0 93 4a 05 	sts	0x054A, r29	; 0x80054a <currentTrigButtons+0x1>
     15e:	c0 93 49 05 	sts	0x0549, r28	; 0x800549 <currentTrigButtons>
	if(currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     162:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <__data_end>
     166:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <__data_end+0x1>
     16a:	c8 17       	cp	r28, r24
     16c:	d9 07       	cpc	r29, r25
     16e:	09 f4       	brne	.+2      	; 0x172 <listenTrigButtons+0x3e>
     170:	3d c0       	rjmp	.+122    	; 0x1ec <listenTrigButtons+0xb8>
	{
		lastFullBits = currentTrigButtons;
     172:	d0 93 cd 03 	sts	0x03CD, r29	; 0x8003cd <__data_end+0x1>
     176:	c0 93 cc 03 	sts	0x03CC, r28	; 0x8003cc <__data_end>
     17a:	0b e5       	ldi	r16, 0x5B	; 91
     17c:	14 e0       	ldi	r17, 0x04	; 4
     17e:	0f 2e       	mov	r0, r31
     180:	fb e6       	ldi	r31, 0x6B	; 107
     182:	ef 2e       	mov	r14, r31
     184:	f4 e0       	ldi	r31, 0x04	; 4
     186:	ff 2e       	mov	r15, r31
     188:	f0 2d       	mov	r31, r0
				//for "perfrmance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
				case 0: //performance mode
				//we trigger a sound here based on the location of bc
				trackControl(currentPattern.trackSampleLSB[bc], currentPattern.trackSampleMSB[bc], currentPattern.trackOutputRoute[bc], currentPattern.trackPlayMode[bc]);
				//trackControl(3,0,0,1);
				numPrinter(buttonTest,9, 2,bc);
     18a:	88 e7       	ldi	r24, 0x78	; 120
     18c:	9f ef       	ldi	r25, 0xFF	; 255
     18e:	9c 01       	movw	r18, r24
     190:	23 5d       	subi	r18, 0xD3	; 211
     192:	33 40       	sbci	r19, 0x03	; 3
     194:	69 01       	movw	r12, r18
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
	{
		currentTrig = (fullBitsParse&1);
     196:	8c 2f       	mov	r24, r28
     198:	81 70       	andi	r24, 0x01	; 1
     19a:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <currentTrig>
		if(currentTrig)
     19e:	88 23       	and	r24, r24
     1a0:	f1 f0       	breq	.+60     	; 0x1de <listenTrigButtons+0xaa>
		{
			switch (encoderAValue)
     1a2:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <encoderAValue>
     1a6:	81 11       	cpse	r24, r1
     1a8:	1a c0       	rjmp	.+52     	; 0x1de <listenTrigButtons+0xaa>
			{
				
				//for "perfrmance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
				case 0: //performance mode
				//we trigger a sound here based on the location of bc
				trackControl(currentPattern.trackSampleLSB[bc], currentPattern.trackSampleMSB[bc], currentPattern.trackOutputRoute[bc], currentPattern.trackPlayMode[bc]);
     1aa:	f8 01       	movw	r30, r16
     1ac:	20 81       	ld	r18, Z
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	e0 57       	subi	r30, 0x70	; 112
     1b2:	f1 09       	sbc	r31, r1
     1b4:	40 81       	ld	r20, Z
     1b6:	50 e0       	ldi	r21, 0x00	; 0
     1b8:	f8 01       	movw	r30, r16
     1ba:	60 89       	ldd	r22, Z+16	; 0x10
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	80 a1       	ldd	r24, Z+32	; 0x20
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	7c d6       	rcall	.+3320   	; 0xebc <trackControl>
				//trackControl(3,0,0,1);
				numPrinter(buttonTest,9, 2,bc);
     1c4:	96 01       	movw	r18, r12
     1c6:	20 0f       	add	r18, r16
     1c8:	31 1f       	adc	r19, r17
     1ca:	42 e0       	ldi	r20, 0x02	; 2
     1cc:	69 e0       	ldi	r22, 0x09	; 9
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	92 e0       	ldi	r25, 0x02	; 2
     1d2:	4d d4       	rcall	.+2202   	; 0xa6e <numPrinter>
				outputS(buttonTest, 2);
     1d4:	62 e0       	ldi	r22, 0x02	; 2
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	92 e0       	ldi	r25, 0x02	; 2
     1dc:	30 d4       	rcall	.+2144   	; 0xa3e <outputS>
			}
		
		
		}
		
		fullBitsParse = fullBitsParse>>1;
     1de:	d6 95       	lsr	r29
     1e0:	c7 95       	ror	r28
     1e2:	0f 5f       	subi	r16, 0xFF	; 255
     1e4:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lastFullBits = currentTrigButtons;
		uint16_t fullBitsParse = currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     1e6:	0e 15       	cp	r16, r14
     1e8:	1f 05       	cpc	r17, r15
     1ea:	a9 f6       	brne	.-86     	; 0x196 <listenTrigButtons+0x62>
		fullBitsParse = fullBitsParse>>1;
	}
	}


}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
     1f2:	0f 91       	pop	r16
     1f4:	ff 90       	pop	r15
     1f6:	ef 90       	pop	r14
     1f8:	df 90       	pop	r13
     1fa:	cf 90       	pop	r12
     1fc:	08 95       	ret

000001fe <listenGPButtons>:

void listenGPButtons() // are the encoder buttons here also?
{
     1fe:	08 95       	ret

00000200 <initEncoders>:
#include "globalVariables.h"

void initEncoders()
{
	//this is where we set the encoder pins to where they need to be
PORTH = 0B01111000; // enable internal pullup resistors.
     200:	88 e7       	ldi	r24, 0x78	; 120
     202:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     206:	08 95       	ret

00000208 <pollEncoder0>:

}

void pollEncoder0(uint8_t *encoderC0)
{
	if(~PINH&(1<<PH6))
     208:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     20c:	26 fd       	sbrc	r18, 6
     20e:	12 c0       	rjmp	.+36     	; 0x234 <pollEncoder0+0x2c>
	{
		if(~PINH&(1<<PH5))
     210:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     214:	25 fd       	sbrc	r18, 5
     216:	05 c0       	rjmp	.+10     	; 0x222 <pollEncoder0+0x1a>
		{
			//left turn?
			*encoderC0= (*encoderC0)+1;
     218:	fc 01       	movw	r30, r24
     21a:	20 81       	ld	r18, Z
     21c:	2f 5f       	subi	r18, 0xFF	; 255
     21e:	20 83       	st	Z, r18
     220:	04 c0       	rjmp	.+8      	; 0x22a <pollEncoder0+0x22>
		}
		else
		{
			*encoderC0= (*encoderC0)-1;
     222:	fc 01       	movw	r30, r24
     224:	20 81       	ld	r18, Z
     226:	21 50       	subi	r18, 0x01	; 1
     228:	20 83       	st	Z, r18
		}
		//_delay_ms(2); // seems un-necesary with while loop
		while(~PINH&(1<<PH6)){} // this does make things smoother, but we need to be sure we have interupts for important things.
     22a:	e0 e0       	ldi	r30, 0x00	; 0
     22c:	f1 e0       	ldi	r31, 0x01	; 1
     22e:	80 81       	ld	r24, Z
     230:	86 ff       	sbrs	r24, 6
     232:	fd cf       	rjmp	.-6      	; 0x22e <pollEncoder0+0x26>
     234:	08 95       	ret

00000236 <pollEncoder1>:

}

void pollEncoder1(uint8_t *encoderC1)
{
	if(~PINH&(1<<PH3))
     236:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     23a:	23 fd       	sbrc	r18, 3
     23c:	12 c0       	rjmp	.+36     	; 0x262 <pollEncoder1+0x2c>
	{
		if(~PINH&(1<<PH4))
     23e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     242:	24 fd       	sbrc	r18, 4
     244:	05 c0       	rjmp	.+10     	; 0x250 <pollEncoder1+0x1a>
		{
			//left turn?
			*encoderC1=(*encoderC1)-1;
     246:	fc 01       	movw	r30, r24
     248:	20 81       	ld	r18, Z
     24a:	21 50       	subi	r18, 0x01	; 1
     24c:	20 83       	st	Z, r18
     24e:	04 c0       	rjmp	.+8      	; 0x258 <pollEncoder1+0x22>
		}
		else
		{
			*encoderC1=(*encoderC1)+1;
     250:	fc 01       	movw	r30, r24
     252:	20 81       	ld	r18, Z
     254:	2f 5f       	subi	r18, 0xFF	; 255
     256:	20 83       	st	Z, r18
		}
		//_delay_ms(2); // seems un-necesary with while loop
		while(~PINH&(1<<PH3)){} // this does make things smoother, but we need to be sure we have interupts for important things.
     258:	e0 e0       	ldi	r30, 0x00	; 0
     25a:	f1 e0       	ldi	r31, 0x01	; 1
     25c:	80 81       	ld	r24, Z
     25e:	83 ff       	sbrs	r24, 3
     260:	fd cf       	rjmp	.-6      	; 0x25c <pollEncoder1+0x26>
     262:	08 95       	ret

00000264 <listenEncoders>:


void listenEncoders()
{
	//this is where we update the encoder variables.
	pollEncoder0(&encoderAValue);
     264:	82 ed       	ldi	r24, 0xD2	; 210
     266:	93 e0       	ldi	r25, 0x03	; 3
     268:	cf df       	rcall	.-98     	; 0x208 <pollEncoder0>
	pollEncoder1(&encoderBValue);
     26a:	8b e7       	ldi	r24, 0x7B	; 123
     26c:	95 e0       	ldi	r25, 0x05	; 5
     26e:	e3 cf       	rjmp	.-58     	; 0x236 <pollEncoder1>
     270:	08 95       	ret

00000272 <initBank>:

#include <avr/io.h>
#include "globalVariables.h"

void initBank()
{
     272:	eb e7       	ldi	r30, 0x7B	; 123
     274:	f4 e0       	ldi	r31, 0x04	; 4
	for(uint8_t i = 0; i<16; i++)
     276:	80 e0       	ldi	r24, 0x00	; 0
	{
		currentPattern.trackSampleLSB[i] = i+1;
     278:	8f 5f       	subi	r24, 0xFF	; 255
     27a:	81 93       	st	Z+, r24
#include <avr/io.h>
#include "globalVariables.h"

void initBank()
{
	for(uint8_t i = 0; i<16; i++)
     27c:	80 31       	cpi	r24, 0x10	; 16
     27e:	e1 f7       	brne	.-8      	; 0x278 <initBank+0x6>
	{
		currentPattern.trackSampleLSB[i] = i+1;
	}


     280:	08 95       	ret

00000282 <startADCConversion>:
char envelopeTimePrint[20] = "EnvelopeTimex:xxxxMS";

uint8_t startADCConversion()
{
	
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     282:	ea e7       	ldi	r30, 0x7A	; 122
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	80 64       	ori	r24, 0x40	; 64
     28a:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     28c:	80 81       	ld	r24, Z
     28e:	86 fd       	sbrc	r24, 6
     290:	fd cf       	rjmp	.-6      	; 0x28c <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.
     292:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
}
     296:	08 95       	ret

00000298 <initADC>:

void initADC()
{
	DDRE = 0B00111000; //init pins E5, 4, and 3 as select pins on the external mux.
     298:	88 e3       	ldi	r24, 0x38	; 56
     29a:	8d b9       	out	0x0d, r24	; 13
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     29c:	80 e2       	ldi	r24, 0x20	; 32
     29e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     2a2:	87 e8       	ldi	r24, 0x87	; 135
     2a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     2a8:	88 e0       	ldi	r24, 0x08	; 8
     2aa:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     2ae:	8f ef       	ldi	r24, 0xFF	; 255
     2b0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     2b4:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     2b8:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <knobBufferCounter>
	startADCConversion();
     2bc:	e2 cf       	rjmp	.-60     	; 0x282 <startADCConversion>
     2be:	08 95       	ret

000002c0 <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     2c0:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     2c2:	98 2f       	mov	r25, r24
     2c4:	96 95       	lsr	r25
     2c6:	96 95       	lsr	r25
     2c8:	2f e2       	ldi	r18, 0x2F	; 47
     2ca:	92 9f       	mul	r25, r18
     2cc:	91 2d       	mov	r25, r1
     2ce:	11 24       	eor	r1, r1
     2d0:	96 95       	lsr	r25
     2d2:	2c e2       	ldi	r18, 0x2C	; 44
     2d4:	92 9f       	mul	r25, r18
     2d6:	80 19       	sub	r24, r0
     2d8:	11 24       	eor	r1, r1
     2da:	98 2f       	mov	r25, r24
	if(select<40)
     2dc:	88 32       	cpi	r24, 0x28	; 40
     2de:	18 f5       	brcc	.+70     	; 0x326 <selectKnob+0x66>
	{
		ADCSRB = (1 << MUX5);
     2e0:	88 e0       	ldi	r24, 0x08	; 8
     2e2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     2e6:	c9 2f       	mov	r28, r25
     2e8:	c7 70       	andi	r28, 0x07	; 7
		uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     2ea:	96 95       	lsr	r25
     2ec:	96 95       	lsr	r25
     2ee:	96 95       	lsr	r25
     2f0:	90 62       	ori	r25, 0x20	; 32
     2f2:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     2f6:	c5 df       	rcall	.-118    	; 0x282 <startADCConversion>
		//we might need to worry about the delay, but that's fine.
		
		//we put our select0 and select2 pins in the opposite ports, so we need to do some math to fix that.
		//easy stupid fix:
		switch (tempMuxSelect)
     2f8:	c3 30       	cpi	r28, 0x03	; 3
     2fa:	59 f0       	breq	.+22     	; 0x312 <selectKnob+0x52>
     2fc:	18 f4       	brcc	.+6      	; 0x304 <selectKnob+0x44>
     2fe:	c1 30       	cpi	r28, 0x01	; 1
     300:	31 f0       	breq	.+12     	; 0x30e <selectKnob+0x4e>
     302:	0c c0       	rjmp	.+24     	; 0x31c <selectKnob+0x5c>
     304:	c4 30       	cpi	r28, 0x04	; 4
     306:	39 f0       	breq	.+14     	; 0x316 <selectKnob+0x56>
     308:	c6 30       	cpi	r28, 0x06	; 6
     30a:	39 f0       	breq	.+14     	; 0x31a <selectKnob+0x5a>
     30c:	07 c0       	rjmp	.+14     	; 0x31c <selectKnob+0x5c>
		{
			case 1: muxSelect = 4;
     30e:	c4 e0       	ldi	r28, 0x04	; 4
     310:	05 c0       	rjmp	.+10     	; 0x31c <selectKnob+0x5c>
			break;
			
			case 3:	muxSelect = 6;
     312:	c6 e0       	ldi	r28, 0x06	; 6
			break;
     314:	03 c0       	rjmp	.+6      	; 0x31c <selectKnob+0x5c>
			
			case 4: muxSelect = 1;
     316:	c1 e0       	ldi	r28, 0x01	; 1
			break;
     318:	01 c0       	rjmp	.+2      	; 0x31c <selectKnob+0x5c>
			
			case 6: muxSelect = 3;
     31a:	c3 e0       	ldi	r28, 0x03	; 3
			break;
		}

	//then the external multiplexer
		PORTE = (muxSelect << 3);
     31c:	cc 0f       	add	r28, r28
     31e:	cc 0f       	add	r28, r28
     320:	cc 0f       	add	r28, r28
     322:	ce b9       	out	0x0e, r28	; 14
     324:	20 c0       	rjmp	.+64     	; 0x366 <selectKnob+0xa6>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     326:	89 32       	cpi	r24, 0x29	; 41
     328:	71 f0       	breq	.+28     	; 0x346 <selectKnob+0x86>
     32a:	18 f4       	brcc	.+6      	; 0x332 <selectKnob+0x72>
     32c:	88 32       	cpi	r24, 0x28	; 40
     32e:	31 f0       	breq	.+12     	; 0x33c <selectKnob+0x7c>
     330:	1a c0       	rjmp	.+52     	; 0x366 <selectKnob+0xa6>
     332:	8a 32       	cpi	r24, 0x2A	; 42
     334:	69 f0       	breq	.+26     	; 0x350 <selectKnob+0x90>
     336:	8b 32       	cpi	r24, 0x2B	; 43
     338:	81 f0       	breq	.+32     	; 0x35a <selectKnob+0x9a>
     33a:	15 c0       	rjmp	.+42     	; 0x366 <selectKnob+0xa6>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     33c:	85 e2       	ldi	r24, 0x25	; 37
     33e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     342:	9f df       	rcall	.-194    	; 0x282 <startADCConversion>
		break;
     344:	10 c0       	rjmp	.+32     	; 0x366 <selectKnob+0xa6>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     346:	86 e2       	ldi	r24, 0x26	; 38
     348:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     34c:	9a df       	rcall	.-204    	; 0x282 <startADCConversion>
		break;
     34e:	0b c0       	rjmp	.+22     	; 0x366 <selectKnob+0xa6>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     350:	87 e2       	ldi	r24, 0x27	; 39
     352:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     356:	95 df       	rcall	.-214    	; 0x282 <startADCConversion>
		break;
     358:	06 c0       	rjmp	.+12     	; 0x366 <selectKnob+0xa6>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     35a:	80 e2       	ldi	r24, 0x20	; 32
     35c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     360:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     364:	8e df       	rcall	.-228    	; 0x282 <startADCConversion>
		break;
		}
	
	}
	
}
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <updateKnob>:

void updateKnob(uint8_t select)
{
     36a:	cf 93       	push	r28
     36c:	c8 2f       	mov	r28, r24

	knobBuffer[select] = startADCConversion(); 
     36e:	89 df       	rcall	.-238    	; 0x282 <startADCConversion>
     370:	ec 2f       	mov	r30, r28
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	e3 5e       	subi	r30, 0xE3	; 227
     376:	fa 4f       	sbci	r31, 0xFA	; 250
     378:	80 83       	st	Z, r24
}
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <interperetKnob>:

void interperetKnob(uint8_t select)
{//this function will compare outputs, and write to our struct.
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
	select = select%44;
     388:	98 2f       	mov	r25, r24
     38a:	96 95       	lsr	r25
     38c:	96 95       	lsr	r25
     38e:	2f e2       	ldi	r18, 0x2F	; 47
     390:	92 9f       	mul	r25, r18
     392:	91 2d       	mov	r25, r1
     394:	11 24       	eor	r1, r1
     396:	96 95       	lsr	r25
     398:	2c e2       	ldi	r18, 0x2C	; 44
     39a:	92 9f       	mul	r25, r18
     39c:	80 19       	sub	r24, r0
     39e:	11 24       	eor	r1, r1
     3a0:	98 2f       	mov	r25, r24
	//we might not need this with the IIR filter
	float volumeDivisor = 3.1875;
	
	
	//Change from FIR filter to IIR filter.
     checkBuffer[select] += ((knobBuffer[select]-checkBuffer[select])/2);
     3a2:	a8 2f       	mov	r26, r24
     3a4:	b0 e0       	ldi	r27, 0x00	; 0
     3a6:	fd 01       	movw	r30, r26
     3a8:	e2 5b       	subi	r30, 0xB2	; 178
     3aa:	fa 4f       	sbci	r31, 0xFA	; 250
     3ac:	60 81       	ld	r22, Z
     3ae:	fd 01       	movw	r30, r26
     3b0:	e3 5e       	subi	r30, 0xE3	; 227
     3b2:	fa 4f       	sbci	r31, 0xFA	; 250
     3b4:	e0 81       	ld	r30, Z
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	e6 1b       	sub	r30, r22
     3ba:	f1 09       	sbc	r31, r1
     3bc:	af 01       	movw	r20, r30
     3be:	12 f4       	brpl	.+4      	; 0x3c4 <interperetKnob+0x46>
     3c0:	4f 5f       	subi	r20, 0xFF	; 255
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	55 95       	asr	r21
     3c6:	47 95       	ror	r20
     3c8:	46 0f       	add	r20, r22
     3ca:	a2 5b       	subi	r26, 0xB2	; 178
     3cc:	ba 4f       	sbci	r27, 0xFA	; 250
     3ce:	4c 93       	st	X, r20
	
	
	if (select<40)
     3d0:	98 32       	cpi	r25, 0x28	; 40
     3d2:	08 f0       	brcs	.+2      	; 0x3d6 <interperetKnob+0x58>
     3d4:	01 c2       	rjmp	.+1026   	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
	{
		uint8_t positionSelect = select%8;
     3d6:	c9 2f       	mov	r28, r25
     3d8:	c7 70       	andi	r28, 0x07	; 7
		uint8_t bankSwitch = select/8;
		switch (bankSwitch)
     3da:	96 95       	lsr	r25
     3dc:	96 95       	lsr	r25
     3de:	96 95       	lsr	r25
     3e0:	92 30       	cpi	r25, 0x02	; 2
     3e2:	09 f4       	brne	.+2      	; 0x3e6 <interperetKnob+0x68>
     3e4:	d1 c0       	rjmp	.+418    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     3e6:	30 f4       	brcc	.+12     	; 0x3f4 <interperetKnob+0x76>
     3e8:	99 23       	and	r25, r25
     3ea:	59 f0       	breq	.+22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3ec:	91 30       	cpi	r25, 0x01	; 1
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <interperetKnob+0x74>
     3f0:	8e c0       	rjmp	.+284    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     3f2:	f2 c1       	rjmp	.+996    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
     3f4:	93 30       	cpi	r25, 0x03	; 3
     3f6:	09 f4       	brne	.+2      	; 0x3fa <interperetKnob+0x7c>
     3f8:	45 c1       	rjmp	.+650    	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
     3fa:	94 30       	cpi	r25, 0x04	; 4
     3fc:	09 f4       	brne	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fe:	5f c1       	rjmp	.+702    	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     400:	eb c1       	rjmp	.+982    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
		{
			
			case 0:; //switch cases are "labels", used for goto stuff. so, you have to end the label before declaring variables. should be fine?
			
			int16_t currentOutVoulume = ((currentPattern.outputLevelMSB[positionSelect]<<8)|(currentPattern.outputLevelLSB[positionSelect])); 
     402:	0c 2f       	mov	r16, r28
     404:	10 e0       	ldi	r17, 0x00	; 0
			//this should be a regular integer between -70 and +10
			int16_t negCheckValue = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     406:	64 2f       	mov	r22, r20
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	e5 d6       	rcall	.+3530   	; 0x11da <__floatsisf>
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	4c e4       	ldi	r20, 0x4C	; 76
     416:	50 e4       	ldi	r21, 0x40	; 64
     418:	45 d6       	rcall	.+3210   	; 0x10a4 <__divsf3>
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	4c e8       	ldi	r20, 0x8C	; 140
     420:	52 e4       	ldi	r21, 0x42	; 66
     422:	db d5       	rcall	.+2998   	; 0xfda <__subsf3>
     424:	a7 d6       	rcall	.+3406   	; 0x1174 <__fixsfsi>
     426:	86 2f       	mov	r24, r22
     428:	97 2f       	mov	r25, r23
     42a:	9c 01       	movw	r18, r24
		switch (bankSwitch)
		{
			
			case 0:; //switch cases are "labels", used for goto stuff. so, you have to end the label before declaring variables. should be fine?
			
			int16_t currentOutVoulume = ((currentPattern.outputLevelMSB[positionSelect]<<8)|(currentPattern.outputLevelLSB[positionSelect])); 
     42c:	f8 01       	movw	r30, r16
     42e:	ed 52       	subi	r30, 0x2D	; 45
     430:	fc 4f       	sbci	r31, 0xFC	; 252
			//this should be a regular integer between -70 and +10
			int16_t negCheckValue = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentOutVoulume!=negCheckValue)
     432:	80 81       	ld	r24, Z
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	98 2f       	mov	r25, r24
     438:	88 27       	eor	r24, r24
     43a:	40 85       	ldd	r20, Z+8	; 0x08
     43c:	84 2b       	or	r24, r20
     43e:	82 17       	cp	r24, r18
     440:	93 07       	cpc	r25, r19
     442:	09 f4       	brne	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     444:	c9 c1       	rjmp	.+914    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			{
				currentPattern.outputLevelLSB[positionSelect] = (negCheckValue);
     446:	f8 01       	movw	r30, r16
     448:	ed 52       	subi	r30, 0x2D	; 45
     44a:	fc 4f       	sbci	r31, 0xFC	; 252
     44c:	60 87       	std	Z+8, r22	; 0x08
				if(negCheckValue>(-1))
     44e:	33 23       	and	r19, r19
     450:	64 f1       	brlt	.+88     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
				{
					currentPattern.outputLevelMSB[positionSelect] = 0;
     452:	f8 01       	movw	r30, r16
     454:	ed 52       	subi	r30, 0x2D	; 45
     456:	fc 4f       	sbci	r31, 0xFC	; 252
     458:	10 82       	st	Z, r1
					//just hard coding this for now until we make a function.
					outVolumePrint[14] = 48;
     45a:	e0 e5       	ldi	r30, 0x50	; 80
     45c:	f2 e0       	ldi	r31, 0x02	; 2
     45e:	80 e3       	ldi	r24, 0x30	; 48
     460:	86 87       	std	Z+14, r24	; 0x0e
					outVolumePrint[16] = (currentPattern.outputLevelLSB[positionSelect]%10)+48;
     462:	2d ec       	ldi	r18, 0xCD	; 205
     464:	62 9f       	mul	r22, r18
     466:	81 2d       	mov	r24, r1
     468:	11 24       	eor	r1, r1
     46a:	86 95       	lsr	r24
     46c:	86 95       	lsr	r24
     46e:	86 95       	lsr	r24
     470:	88 0f       	add	r24, r24
     472:	98 2f       	mov	r25, r24
     474:	99 0f       	add	r25, r25
     476:	99 0f       	add	r25, r25
     478:	89 0f       	add	r24, r25
     47a:	96 2f       	mov	r25, r22
     47c:	98 1b       	sub	r25, r24
     47e:	89 2f       	mov	r24, r25
     480:	80 5d       	subi	r24, 0xD0	; 208
     482:	80 8b       	std	Z+16, r24	; 0x10
					outVolumePrint[15] = ((currentPattern.outputLevelLSB[positionSelect]%100)/10)+48;
     484:	89 e2       	ldi	r24, 0x29	; 41
     486:	68 9f       	mul	r22, r24
     488:	81 2d       	mov	r24, r1
     48a:	11 24       	eor	r1, r1
     48c:	82 95       	swap	r24
     48e:	8f 70       	andi	r24, 0x0F	; 15
     490:	94 e6       	ldi	r25, 0x64	; 100
     492:	89 9f       	mul	r24, r25
     494:	60 19       	sub	r22, r0
     496:	11 24       	eor	r1, r1
     498:	62 9f       	mul	r22, r18
     49a:	61 2d       	mov	r22, r1
     49c:	11 24       	eor	r1, r1
     49e:	66 95       	lsr	r22
     4a0:	66 95       	lsr	r22
     4a2:	66 95       	lsr	r22
     4a4:	60 5d       	subi	r22, 0xD0	; 208
     4a6:	67 87       	std	Z+15, r22	; 0x0f
     4a8:	20 c0       	rjmp	.+64     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
				}else
				{
					currentPattern.outputLevelMSB[positionSelect] = 255;
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	f8 01       	movw	r30, r16
     4ae:	ed 52       	subi	r30, 0x2D	; 45
     4b0:	fc 4f       	sbci	r31, 0xFC	; 252
     4b2:	80 83       	st	Z, r24
					outVolumePrint[14] = '-';
     4b4:	e0 e5       	ldi	r30, 0x50	; 80
     4b6:	f2 e0       	ldi	r31, 0x02	; 2
     4b8:	8d e2       	ldi	r24, 0x2D	; 45
     4ba:	86 87       	std	Z+14, r24	; 0x0e
					outVolumePrint[15] = ((((currentPattern.outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     4bc:	60 95       	com	r22
     4be:	26 2f       	mov	r18, r22
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	2f 5f       	subi	r18, 0xFF	; 255
     4c4:	3f 4f       	sbci	r19, 0xFF	; 255
     4c6:	c9 01       	movw	r24, r18
     4c8:	64 e6       	ldi	r22, 0x64	; 100
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	12 d7       	rcall	.+3620   	; 0x12f2 <__divmodhi4>
     4ce:	0f 2e       	mov	r0, r31
     4d0:	fa e0       	ldi	r31, 0x0A	; 10
     4d2:	ef 2e       	mov	r14, r31
     4d4:	f1 2c       	mov	r15, r1
     4d6:	f0 2d       	mov	r31, r0
     4d8:	b7 01       	movw	r22, r14
     4da:	0b d7       	rcall	.+3606   	; 0x12f2 <__divmodhi4>
     4dc:	60 5d       	subi	r22, 0xD0	; 208
					outVolumePrint[16] = (((currentPattern.outputLevelLSB[positionSelect]^255)+1)%10)+48;
     4de:	67 87       	std	Z+15, r22	; 0x0f
     4e0:	c9 01       	movw	r24, r18
     4e2:	b7 01       	movw	r22, r14
     4e4:	06 d7       	rcall	.+3596   	; 0x12f2 <__divmodhi4>
     4e6:	80 5d       	subi	r24, 0xD0	; 208
     4e8:	80 8b       	std	Z+16, r24	; 0x10
				}
				//then output to screen. 
				outVolumePrint[10] = positionSelect + 49;
     4ea:	cf 5c       	subi	r28, 0xCF	; 207
     4ec:	c0 93 5a 02 	sts	0x025A, r28	; 0x80025a <outVolumePrint+0xa>
				outputS(outVolumePrint, 3);
     4f0:	63 e0       	ldi	r22, 0x03	; 3
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	80 e5       	ldi	r24, 0x50	; 80
     4f6:	92 e0       	ldi	r25, 0x02	; 2
     4f8:	a2 d2       	rcall	.+1348   	; 0xa3e <outputS>
				setOutputVolume(currentPattern.outputLevelLSB[positionSelect], currentPattern.outputLevelMSB[positionSelect], positionSelect);
     4fa:	f8 01       	movw	r30, r16
     4fc:	ed 52       	subi	r30, 0x2D	; 45
     4fe:	fc 4f       	sbci	r31, 0xFC	; 252
     500:	60 81       	ld	r22, Z
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	80 85       	ldd	r24, Z+8	; 0x08
     506:	a8 01       	movw	r20, r16
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	fd d4       	rcall	.+2554   	; 0xf06 <setOutputVolume>
     50c:	65 c1       	rjmp	.+714    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			}
			break;
			
 			case 1:
 			if(currentPattern.outputPitch[positionSelect]!=(checkBuffer[select]^128))
     50e:	0c 2f       	mov	r16, r28
     510:	10 e0       	ldi	r17, 0x00	; 0
     512:	60 e8       	ldi	r22, 0x80	; 128
     514:	64 0f       	add	r22, r20
     516:	f8 01       	movw	r30, r16
     518:	ed 52       	subi	r30, 0x2D	; 45
     51a:	fc 4f       	sbci	r31, 0xFC	; 252
     51c:	80 89       	ldd	r24, Z+16	; 0x10
     51e:	86 17       	cp	r24, r22
     520:	09 f4       	brne	.+2      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     522:	5a c1       	rjmp	.+692    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
 			{
 				(currentPattern.outputPitch[positionSelect]) = (checkBuffer[select]^128);
     524:	f8 01       	movw	r30, r16
     526:	ed 52       	subi	r30, 0x2D	; 45
     528:	fc 4f       	sbci	r31, 0xFC	; 252
     52a:	60 8b       	std	Z+16, r22	; 0x10
				 if(encoderAValue == 0)
     52c:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <encoderAValue>
     530:	81 11       	cpse	r24, r1
     532:	20 c0       	rjmp	.+64     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
				 {
					 pitchPrint[5] = (positionSelect+49);
     534:	cf 5c       	subi	r28, 0xCF	; 207
     536:	c0 93 69 02 	sts	0x0269, r28	; 0x800269 <pitchPrint+0x5>
					 if(currentPattern.outputPitch[positionSelect]>>7)
     53a:	66 23       	and	r22, r22
     53c:	64 f4       	brge	.+24     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
					 {
						 //again, hard coding.
						 pitchPrint[7] = '-';
     53e:	8d e2       	ldi	r24, 0x2D	; 45
     540:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pitchPrint+0x7>
						 numPrinter(pitchPrint, 8, 3, (currentPattern.outputPitch[positionSelect]^255));
     544:	26 2f       	mov	r18, r22
     546:	20 95       	com	r18
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	43 e0       	ldi	r20, 0x03	; 3
     54c:	68 e0       	ldi	r22, 0x08	; 8
     54e:	84 e6       	ldi	r24, 0x64	; 100
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	8d d2       	rcall	.+1306   	; 0xa6e <numPrinter>
					 
					 }else{
						 pitchPrint[7] = '+';
     554:	0a c0       	rjmp	.+20     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     556:	8b e2       	ldi	r24, 0x2B	; 43
     558:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pitchPrint+0x7>
					 numPrinter(pitchPrint,8,3,currentPattern.outputPitch[positionSelect]);}
     55c:	26 2f       	mov	r18, r22
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	43 e0       	ldi	r20, 0x03	; 3
     562:	68 e0       	ldi	r22, 0x08	; 8
     564:	84 e6       	ldi	r24, 0x64	; 100
     566:	92 e0       	ldi	r25, 0x02	; 2
					 outputS(pitchPrint, 3);
     568:	82 d2       	rcall	.+1284   	; 0xa6e <numPrinter>
     56a:	63 e0       	ldi	r22, 0x03	; 3
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	84 e6       	ldi	r24, 0x64	; 100
     570:	92 e0       	ldi	r25, 0x02	; 2
				 }
				 outputSampleRate(positionSelect, 0, currentPattern.outputPitch[positionSelect]);
     572:	65 d2       	rcall	.+1226   	; 0xa3e <outputS>
     574:	f8 01       	movw	r30, r16
     576:	ed 52       	subi	r30, 0x2D	; 45
     578:	fc 4f       	sbci	r31, 0xFC	; 252
     57a:	40 89       	ldd	r20, Z+16	; 0x10
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	c8 01       	movw	r24, r16
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     584:	07 d5       	rcall	.+2574   	; 0xf94 <outputSampleRate>
     586:	28 c1       	rjmp	.+592    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     588:	0c 2f       	mov	r16, r28
     58a:	10 e0       	ldi	r17, 0x00	; 0
     58c:	64 2f       	mov	r22, r20
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	22 d6       	rcall	.+3140   	; 0x11da <__floatsisf>
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	4c e4       	ldi	r20, 0x4C	; 76
     59c:	50 e4       	ldi	r21, 0x40	; 64
     59e:	82 d5       	rcall	.+2820   	; 0x10a4 <__divsf3>
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	4c e8       	ldi	r20, 0x8C	; 140
     5a6:	52 e4       	ldi	r21, 0x42	; 66
     5a8:	18 d5       	rcall	.+2608   	; 0xfda <__subsf3>
     5aa:	e4 d5       	rcall	.+3016   	; 0x1174 <__fixsfsi>
     5ac:	86 2f       	mov	r24, r22
     5ae:	97 2f       	mov	r25, r23
     5b0:	9c 01       	movw	r18, r24
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     5b2:	a8 01       	movw	r20, r16
     5b4:	4d 52       	subi	r20, 0x2D	; 45
     5b6:	5c 4f       	sbci	r21, 0xFC	; 252
     5b8:	fa 01       	movw	r30, r20
     5ba:	e8 5b       	subi	r30, 0xB8	; 184
     5bc:	ff 4f       	sbci	r31, 0xFF	; 255
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentEnvelopeVolume!=negCheckValueEnvelope)
     5be:	80 81       	ld	r24, Z
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	98 2f       	mov	r25, r24
     5c4:	88 27       	eor	r24, r24
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     5c6:	70 96       	adiw	r30, 0x10	; 16
			int16_t negCheckValueEnvelope = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentEnvelopeVolume!=negCheckValueEnvelope)
     5c8:	40 81       	ld	r20, Z
     5ca:	84 2b       	or	r24, r20
     5cc:	82 17       	cp	r24, r18
     5ce:	93 07       	cpc	r25, r19
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
     5d2:	02 c1       	rjmp	.+516    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			{
				currentPattern.trackFadeGainLSB[positionSelect] = (negCheckValueEnvelope);
     5d4:	f8 01       	movw	r30, r16
     5d6:	e5 5d       	subi	r30, 0xD5	; 213
     5d8:	fb 4f       	sbci	r31, 0xFB	; 251
     5da:	60 83       	st	Z, r22
				if(negCheckValueEnvelope>(-1))
     5dc:	33 23       	and	r19, r19
     5de:	64 f1       	brlt	.+88     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
				{
					currentPattern.trackFadeGainMSB[positionSelect] = 0;
     5e0:	f8 01       	movw	r30, r16
     5e2:	e5 5e       	subi	r30, 0xE5	; 229
     5e4:	fb 4f       	sbci	r31, 0xFB	; 251
     5e6:	10 82       	st	Z, r1
					//just hard coding this for now until we make a function.
					envelopeLevelPrint[15] = 48;
     5e8:	e8 e2       	ldi	r30, 0x28	; 40
     5ea:	f2 e0       	ldi	r31, 0x02	; 2
     5ec:	80 e3       	ldi	r24, 0x30	; 48
     5ee:	87 87       	std	Z+15, r24	; 0x0f
					envelopeLevelPrint[17] = (currentPattern.trackFadeGainLSB[positionSelect]%10)+48;
     5f0:	2d ec       	ldi	r18, 0xCD	; 205
     5f2:	62 9f       	mul	r22, r18
     5f4:	81 2d       	mov	r24, r1
     5f6:	11 24       	eor	r1, r1
     5f8:	86 95       	lsr	r24
     5fa:	86 95       	lsr	r24
     5fc:	86 95       	lsr	r24
     5fe:	88 0f       	add	r24, r24
     600:	98 2f       	mov	r25, r24
     602:	99 0f       	add	r25, r25
     604:	99 0f       	add	r25, r25
     606:	89 0f       	add	r24, r25
     608:	96 2f       	mov	r25, r22
     60a:	98 1b       	sub	r25, r24
     60c:	89 2f       	mov	r24, r25
     60e:	80 5d       	subi	r24, 0xD0	; 208
     610:	81 8b       	std	Z+17, r24	; 0x11
					envelopeLevelPrint[16] = ((currentPattern.trackFadeGainLSB[positionSelect]%100)/10)+48;
     612:	89 e2       	ldi	r24, 0x29	; 41
     614:	68 9f       	mul	r22, r24
     616:	81 2d       	mov	r24, r1
     618:	11 24       	eor	r1, r1
     61a:	82 95       	swap	r24
     61c:	8f 70       	andi	r24, 0x0F	; 15
     61e:	94 e6       	ldi	r25, 0x64	; 100
     620:	89 9f       	mul	r24, r25
     622:	60 19       	sub	r22, r0
     624:	11 24       	eor	r1, r1
     626:	62 9f       	mul	r22, r18
     628:	61 2d       	mov	r22, r1
     62a:	11 24       	eor	r1, r1
     62c:	66 95       	lsr	r22
     62e:	66 95       	lsr	r22
     630:	66 95       	lsr	r22
     632:	60 5d       	subi	r22, 0xD0	; 208
     634:	60 8b       	std	Z+16, r22	; 0x10
     636:	1d c0       	rjmp	.+58     	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
				}else
				{
					currentPattern.trackFadeGainMSB[positionSelect] = 255;
     638:	f8 01       	movw	r30, r16
     63a:	e5 5e       	subi	r30, 0xE5	; 229
     63c:	fb 4f       	sbci	r31, 0xFB	; 251
     63e:	8f ef       	ldi	r24, 0xFF	; 255
					envelopeLevelPrint[15] = '-';
     640:	80 83       	st	Z, r24
     642:	e8 e2       	ldi	r30, 0x28	; 40
     644:	f2 e0       	ldi	r31, 0x02	; 2
     646:	8d e2       	ldi	r24, 0x2D	; 45
					envelopeLevelPrint[16] = ((((currentPattern.trackFadeGainLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     648:	87 87       	std	Z+15, r24	; 0x0f
     64a:	60 95       	com	r22
     64c:	26 2f       	mov	r18, r22
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	2f 5f       	subi	r18, 0xFF	; 255
     652:	3f 4f       	sbci	r19, 0xFF	; 255
     654:	c9 01       	movw	r24, r18
     656:	64 e6       	ldi	r22, 0x64	; 100
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	4b d6       	rcall	.+3222   	; 0x12f2 <__divmodhi4>
     65c:	0a e0       	ldi	r16, 0x0A	; 10
     65e:	10 e0       	ldi	r17, 0x00	; 0
     660:	b8 01       	movw	r22, r16
     662:	47 d6       	rcall	.+3214   	; 0x12f2 <__divmodhi4>
     664:	60 5d       	subi	r22, 0xD0	; 208
					envelopeLevelPrint[17] = (((currentPattern.trackFadeGainLSB[positionSelect]^255)+1)%10)+48;
     666:	60 8b       	std	Z+16, r22	; 0x10
     668:	c9 01       	movw	r24, r18
     66a:	b8 01       	movw	r22, r16
     66c:	42 d6       	rcall	.+3204   	; 0x12f2 <__divmodhi4>
     66e:	80 5d       	subi	r24, 0xD0	; 208
     670:	81 8b       	std	Z+17, r24	; 0x11
				}
				//then output to screen.
				envelopeLevelPrint[13] = positionSelect + 49;
     672:	cf 5c       	subi	r28, 0xCF	; 207
     674:	c0 93 35 02 	sts	0x0235, r28	; 0x800235 <envelopeLevelPrint+0xd>
				outputS(envelopeLevelPrint, 3);
     678:	63 e0       	ldi	r22, 0x03	; 3
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	88 e2       	ldi	r24, 0x28	; 40
     67e:	92 e0       	ldi	r25, 0x02	; 2
     680:	de d1       	rcall	.+956    	; 0xa3e <outputS>
     682:	aa c0       	rjmp	.+340    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
				//nothing to "set", since envelopes are triggered after a sound is playing.
			}
			break;
 			
 			case 3:
 			if(currentPattern.trackFadeTimeMSB[positionSelect]!=checkBuffer[select])
     684:	8c 2f       	mov	r24, r28
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	fc 01       	movw	r30, r24
     68a:	e5 5c       	subi	r30, 0xC5	; 197
     68c:	fb 4f       	sbci	r31, 0xFB	; 251
     68e:	20 81       	ld	r18, Z
     690:	42 17       	cp	r20, r18
     692:	09 f4       	brne	.+2      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
 			{
 				(currentPattern.trackFadeTimeMSB[positionSelect]) = checkBuffer[select];
     694:	a1 c0       	rjmp	.+322    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
     696:	fc 01       	movw	r30, r24
     698:	e5 5c       	subi	r30, 0xC5	; 197
     69a:	fb 4f       	sbci	r31, 0xFB	; 251
				 numPrinter(envelopeTimePrint,14,4,currentPattern.trackFadeTimeMSB[positionSelect]);
     69c:	40 83       	st	Z, r20
     69e:	24 2f       	mov	r18, r20
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	44 e0       	ldi	r20, 0x04	; 4
     6a4:	6e e0       	ldi	r22, 0x0E	; 14
     6a6:	84 e1       	ldi	r24, 0x14	; 20
				 envelopeTimePrint[12] = positionSelect+49;
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	e1 d1       	rcall	.+962    	; 0xa6e <numPrinter>
     6ac:	cf 5c       	subi	r28, 0xCF	; 207
				 outputS(envelopeTimePrint, 3);
     6ae:	c0 93 20 02 	sts	0x0220, r28	; 0x800220 <envelopeTimePrint+0xc>
     6b2:	63 e0       	ldi	r22, 0x03	; 3
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	84 e1       	ldi	r24, 0x14	; 20
 			}
 			break;
 			
 			case 4:;
 			int16_t currentTrackVolume = ((currentPattern.trackMainVolumeMSB[positionSelect]<<8)|(currentPattern.trackMainVolumeLSB[positionSelect]));
     6b8:	92 e0       	ldi	r25, 0x02	; 2
     6ba:	c1 d1       	rcall	.+898    	; 0xa3e <outputS>
 			int16_t negCheckValueTrack = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     6bc:	8d c0       	rjmp	.+282    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
     6be:	0c 2f       	mov	r16, r28
     6c0:	10 e0       	ldi	r17, 0x00	; 0
     6c2:	64 2f       	mov	r22, r20
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	87 d5       	rcall	.+2830   	; 0x11da <__floatsisf>
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	4c e4       	ldi	r20, 0x4C	; 76
     6d2:	50 e4       	ldi	r21, 0x40	; 64
     6d4:	e7 d4       	rcall	.+2510   	; 0x10a4 <__divsf3>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	4c e8       	ldi	r20, 0x8C	; 140
     6dc:	52 e4       	ldi	r21, 0x42	; 66
     6de:	7d d4       	rcall	.+2298   	; 0xfda <__subsf3>
     6e0:	49 d5       	rcall	.+2706   	; 0x1174 <__fixsfsi>
     6e2:	86 2f       	mov	r24, r22
     6e4:	97 2f       	mov	r25, r23
     6e6:	9c 01       	movw	r18, r24
     6e8:	f8 01       	movw	r30, r16
				 outputS(envelopeTimePrint, 3);
 			}
 			break;
 			
 			case 4:;
 			int16_t currentTrackVolume = ((currentPattern.trackMainVolumeMSB[positionSelect]<<8)|(currentPattern.trackMainVolumeLSB[positionSelect]));
     6ea:	ed 52       	subi	r30, 0x2D	; 45
     6ec:	fc 4f       	sbci	r31, 0xFC	; 252
     6ee:	80 a5       	ldd	r24, Z+40	; 0x28
 			int16_t negCheckValueTrack = (checkBuffer[select] / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
 			if(currentTrackVolume!=negCheckValueTrack)
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	98 2f       	mov	r25, r24
     6f4:	88 27       	eor	r24, r24
     6f6:	40 ad       	ldd	r20, Z+56	; 0x38
     6f8:	84 2b       	or	r24, r20
     6fa:	82 17       	cp	r24, r18
     6fc:	93 07       	cpc	r25, r19
     6fe:	09 f4       	brne	.+2      	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
     700:	6b c0       	rjmp	.+214    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
     702:	f8 01       	movw	r30, r16
 			{
	 			currentPattern.trackMainVolumeLSB[positionSelect] = (negCheckValueTrack);
     704:	ed 52       	subi	r30, 0x2D	; 45
     706:	fc 4f       	sbci	r31, 0xFC	; 252
     708:	60 af       	std	Z+56, r22	; 0x38
     70a:	33 23       	and	r19, r19
	 			if(negCheckValueTrack>(-1))
     70c:	64 f1       	brlt	.+88     	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
     70e:	f8 01       	movw	r30, r16
	 			{
		 			currentPattern.trackMainVolumeMSB[positionSelect] = 0;
     710:	ed 52       	subi	r30, 0x2D	; 45
     712:	fc 4f       	sbci	r31, 0xFC	; 252
     714:	10 a6       	std	Z+40, r1	; 0x28
     716:	ec e3       	ldi	r30, 0x3C	; 60
		 			//just hard coding this for now until we make a function.
		 			trackVolumePrint[15] = 48;
     718:	f2 e0       	ldi	r31, 0x02	; 2
     71a:	80 e3       	ldi	r24, 0x30	; 48
     71c:	87 87       	std	Z+15, r24	; 0x0f
     71e:	2d ec       	ldi	r18, 0xCD	; 205
		 			trackVolumePrint[17] = (currentPattern.trackMainVolumeLSB[positionSelect]%10)+48;
     720:	62 9f       	mul	r22, r18
     722:	81 2d       	mov	r24, r1
     724:	11 24       	eor	r1, r1
     726:	86 95       	lsr	r24
     728:	86 95       	lsr	r24
     72a:	86 95       	lsr	r24
     72c:	88 0f       	add	r24, r24
     72e:	98 2f       	mov	r25, r24
     730:	99 0f       	add	r25, r25
     732:	99 0f       	add	r25, r25
     734:	89 0f       	add	r24, r25
     736:	96 2f       	mov	r25, r22
     738:	98 1b       	sub	r25, r24
     73a:	89 2f       	mov	r24, r25
     73c:	80 5d       	subi	r24, 0xD0	; 208
     73e:	81 8b       	std	Z+17, r24	; 0x11
     740:	89 e2       	ldi	r24, 0x29	; 41
		 			trackVolumePrint[16] = ((currentPattern.trackMainVolumeLSB[positionSelect]%100)/10)+48;
     742:	68 9f       	mul	r22, r24
     744:	81 2d       	mov	r24, r1
     746:	11 24       	eor	r1, r1
     748:	82 95       	swap	r24
     74a:	8f 70       	andi	r24, 0x0F	; 15
     74c:	94 e6       	ldi	r25, 0x64	; 100
     74e:	89 9f       	mul	r24, r25
     750:	60 19       	sub	r22, r0
     752:	11 24       	eor	r1, r1
     754:	62 9f       	mul	r22, r18
     756:	61 2d       	mov	r22, r1
     758:	11 24       	eor	r1, r1
     75a:	66 95       	lsr	r22
     75c:	66 95       	lsr	r22
     75e:	66 95       	lsr	r22
     760:	60 5d       	subi	r22, 0xD0	; 208
     762:	60 8b       	std	Z+16, r22	; 0x10
	 			}else
	 			{
		 			currentPattern.trackMainVolumeMSB[positionSelect] = 255;
     764:	20 c0       	rjmp	.+64     	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
     766:	8f ef       	ldi	r24, 0xFF	; 255
     768:	f8 01       	movw	r30, r16
     76a:	ed 52       	subi	r30, 0x2D	; 45
		 			trackVolumePrint[15] = '-';
     76c:	fc 4f       	sbci	r31, 0xFC	; 252
     76e:	80 a7       	std	Z+40, r24	; 0x28
     770:	ec e3       	ldi	r30, 0x3C	; 60
     772:	f2 e0       	ldi	r31, 0x02	; 2
		 			trackVolumePrint[16] = ((((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     774:	8d e2       	ldi	r24, 0x2D	; 45
     776:	87 87       	std	Z+15, r24	; 0x0f
     778:	60 95       	com	r22
     77a:	26 2f       	mov	r18, r22
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	2f 5f       	subi	r18, 0xFF	; 255
     780:	3f 4f       	sbci	r19, 0xFF	; 255
     782:	c9 01       	movw	r24, r18
     784:	64 e6       	ldi	r22, 0x64	; 100
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	b4 d5       	rcall	.+2920   	; 0x12f2 <__divmodhi4>
     78a:	0f 2e       	mov	r0, r31
     78c:	fa e0       	ldi	r31, 0x0A	; 10
     78e:	ef 2e       	mov	r14, r31
     790:	f1 2c       	mov	r15, r1
     792:	f0 2d       	mov	r31, r0
     794:	b7 01       	movw	r22, r14
     796:	ad d5       	rcall	.+2906   	; 0x12f2 <__divmodhi4>
     798:	60 5d       	subi	r22, 0xD0	; 208
		 			trackVolumePrint[17] = (((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
     79a:	60 8b       	std	Z+16, r22	; 0x10
     79c:	c9 01       	movw	r24, r18
     79e:	b7 01       	movw	r22, r14
     7a0:	a8 d5       	rcall	.+2896   	; 0x12f2 <__divmodhi4>
     7a2:	80 5d       	subi	r24, 0xD0	; 208
	 			}
	 			//then output to screen.
	 			trackVolumePrint[11] = positionSelect + 49;
     7a4:	81 8b       	std	Z+17, r24	; 0x11
     7a6:	cf 5c       	subi	r28, 0xCF	; 207
     7a8:	c0 93 47 02 	sts	0x0247, r28	; 0x800247 <trackVolumePrint+0xb>
	 			outputS(trackVolumePrint, 3);
     7ac:	63 e0       	ldi	r22, 0x03	; 3
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	8c e3       	ldi	r24, 0x3C	; 60
     7b2:	92 e0       	ldi	r25, 0x02	; 2
     7b4:	44 d1       	rcall	.+648    	; 0xa3e <outputS>
	 			setTrackVolume(currentPattern.trackSampleLSB[positionSelect], currentPattern.trackSampleMSB[positionSelect],
				 currentPattern.trackMainVolumeLSB[positionSelect], currentPattern.trackMainVolumeMSB[positionSelect]);
     7b6:	f8 01       	movw	r30, r16
     7b8:	ed 52       	subi	r30, 0x2D	; 45
     7ba:	fc 4f       	sbci	r31, 0xFC	; 252
		 			trackVolumePrint[17] = (((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
	 			}
	 			//then output to screen.
	 			trackVolumePrint[11] = positionSelect + 49;
	 			outputS(trackVolumePrint, 3);
	 			setTrackVolume(currentPattern.trackSampleLSB[positionSelect], currentPattern.trackSampleMSB[positionSelect],
     7bc:	20 a5       	ldd	r18, Z+40	; 0x28
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 ad       	ldd	r20, Z+56	; 0x38
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	df 01       	movw	r26, r30
     7c6:	a8 56       	subi	r26, 0x68	; 104
     7c8:	bf 4f       	sbci	r27, 0xFF	; 255
     7ca:	6c 91       	ld	r22, X
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	e8 55       	subi	r30, 0x58	; 88
     7d0:	ff 4f       	sbci	r31, 0xFF	; 255
     7d2:	80 81       	ld	r24, Z
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	ba d3       	rcall	.+1908   	; 0xf4c <setTrackVolume>
     7d8:	cf 91       	pop	r28
// 			break;
		}
		
	}

}
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	ff 90       	pop	r15
     7e0:	ef 90       	pop	r14
     7e2:	08 95       	ret

000007e4 <listenKnobs>:
     7e4:	cf 93       	push	r28

void listenKnobs()
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     7e6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
     7e8:	8c 2f       	mov	r24, r28
     7ea:	6a dd       	rcall	.-1324   	; 0x2c0 <selectKnob>
		updateKnob(loopCounter);
     7ec:	8c 2f       	mov	r24, r28
     7ee:	bd dd       	rcall	.-1158   	; 0x36a <updateKnob>
		interperetKnob(loopCounter);
     7f0:	8c 2f       	mov	r24, r28
     7f2:	c5 dd       	rcall	.-1142   	; 0x37e <interperetKnob>
     7f4:	cf 5f       	subi	r28, 0xFF	; 255

}

void listenKnobs()
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     7f6:	cc 32       	cpi	r28, 0x2C	; 44
     7f8:	b9 f7       	brne	.-18     	; 0x7e8 <listenKnobs+0x4>
     7fa:	cf 91       	pop	r28
		updateKnob(loopCounter);
		interperetKnob(loopCounter);
	}


}
     7fc:	08 95       	ret

000007fe <initLEDs>:
#include <avr/io.h>
#include "globalVariables.h"

void initLEDs()
{
	DDRG = 0B00100101; //outputs on G5,2, and 0.
     7fe:	85 e2       	ldi	r24, 0x25	; 37
     800:	83 bb       	out	0x13, r24	; 19
     802:	08 95       	ret

00000804 <updateLEDs>:

}

void updateLEDs()
{
	uint16_t trigLEDParse = currentTrigButtons;
     804:	20 91 49 05 	lds	r18, 0x0549	; 0x800549 <currentTrigButtons>
     808:	30 91 4a 05 	lds	r19, 0x054A	; 0x80054a <currentTrigButtons+0x1>
	PORTG &= (~(1 << PG2)); //set latch low for data input
     80c:	a2 98       	cbi	0x14, 2	; 20
     80e:	81 e1       	ldi	r24, 0x11	; 17
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
     810:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
     812:	33 23       	and	r19, r19
     814:	14 f4       	brge	.+4      	; 0x81a <updateLEDs+0x16>
		{
			PORTG |= (1 << PG5); //send current 1's place bit to the data pin 
     816:	a5 9a       	sbi	0x14, 5	; 20
     818:	01 c0       	rjmp	.+2      	; 0x81c <updateLEDs+0x18>
		}
		else
		{
			PORTG &= (~(1 << PG5));
     81a:	a5 98       	cbi	0x14, 5	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
     81c:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
     81e:	22 0f       	add	r18, r18
     820:	33 1f       	adc	r19, r19
     822:	81 50       	subi	r24, 0x01	; 1

void updateLEDs()
{
	uint16_t trigLEDParse = currentTrigButtons;
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t i = 0; i<17; i++)
     824:	a9 f7       	brne	.-22     	; 0x810 <updateLEDs+0xc>
			PORTG &= (~(1 << PG5));
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	PORTG |= (1 << PG2); //latch pin high
     826:	a2 9a       	sbi	0x14, 2	; 20
     828:	08 95       	ret

0000082a <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

int main(void)
{
	initScreen();
     82a:	ac d0       	rcall	.+344    	; 0x984 <initScreen>
	initButtons();
     82c:	7c dc       	rcall	.-1800   	; 0x126 <initButtons>
	initLEDs();
     82e:	e7 df       	rcall	.-50     	; 0x7fe <initLEDs>
	initEncoders();
     830:	e7 dc       	rcall	.-1586   	; 0x200 <initEncoders>
	initMenu();
     832:	0b d0       	rcall	.+22     	; 0x84a <initMenu>
	initADC();
     834:	31 dd       	rcall	.-1438   	; 0x298 <initADC>
	serialInit0();
     836:	36 d3       	rcall	.+1644   	; 0xea4 <serialInit0>
	sei();
	initBank(); //this will be necessary on first startup, but maybe not in the actual program? maybe just something handy to have.
     838:	78 94       	sei
     83a:	1b dd       	rcall	.-1482   	; 0x272 <initBank>
	//loadMemory(); //we need to load in the first struct in locarion 0 of our eeprom.
	while (1)
	{
		listenTrigButtons();
     83c:	7b dc       	rcall	.-1802   	; 0x134 <listenTrigButtons>
     83e:	df dc       	rcall	.-1602   	; 0x1fe <listenGPButtons>
		listenGPButtons();
     840:	e1 df       	rcall	.-62     	; 0x804 <updateLEDs>
     842:	10 dd       	rcall	.-1504   	; 0x264 <listenEncoders>
		updateLEDs();
     844:	cf df       	rcall	.-98     	; 0x7e4 <listenKnobs>
     846:	16 d0       	rcall	.+44     	; 0x874 <updateScreen>
		listenEncoders();
     848:	f9 cf       	rjmp	.-14     	; 0x83c <main+0x12>

0000084a <initMenu>:
char s3line3[] = "(put triggered note)";

void initMenu()
{
	
outputS(s0line0, 0);
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	83 eb       	ldi	r24, 0xB3	; 179
     850:	93 e0       	ldi	r25, 0x03	; 3
     852:	f5 d0       	rcall	.+490    	; 0xa3e <outputS>
outputS(s0line1, 1);
     854:	61 e0       	ldi	r22, 0x01	; 1
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	8e e9       	ldi	r24, 0x9E	; 158
     85a:	93 e0       	ldi	r25, 0x03	; 3
     85c:	f0 d0       	rcall	.+480    	; 0xa3e <outputS>
outputS(s0line2, 2);
     85e:	62 e0       	ldi	r22, 0x02	; 2
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	89 e8       	ldi	r24, 0x89	; 137
     864:	93 e0       	ldi	r25, 0x03	; 3
     866:	eb d0       	rcall	.+470    	; 0xa3e <outputS>
outputS(s0line3, 3);
     868:	63 e0       	ldi	r22, 0x03	; 3
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	84 e7       	ldi	r24, 0x74	; 116
     86e:	93 e0       	ldi	r25, 0x03	; 3
     870:	e6 c0       	rjmp	.+460    	; 0xa3e <outputS>
     872:	08 95       	ret

00000874 <updateScreen>:

}

void updateScreen()
{
	if(prevEncoderAValue!=encoderAValue){
     874:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <encoderAValue>
     878:	90 91 1c 05 	lds	r25, 0x051C	; 0x80051c <prevEncoderAValue>
     87c:	98 17       	cp	r25, r24
     87e:	09 f4       	brne	.+2      	; 0x882 <updateScreen+0xe>
     880:	63 c0       	rjmp	.+198    	; 0x948 <updateScreen+0xd4>
	encoderAValue = encoderAValue%4;
     882:	83 70       	andi	r24, 0x03	; 3
     884:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <encoderAValue>
	switch (encoderAValue)
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	e1 f0       	breq	.+56     	; 0x8c4 <updateScreen+0x50>
     88c:	30 f0       	brcs	.+12     	; 0x89a <updateScreen+0x26>
     88e:	82 30       	cpi	r24, 0x02	; 2
     890:	71 f1       	breq	.+92     	; 0x8ee <updateScreen+0x7a>
     892:	83 30       	cpi	r24, 0x03	; 3
     894:	09 f4       	brne	.+2      	; 0x898 <updateScreen+0x24>
     896:	40 c0       	rjmp	.+128    	; 0x918 <updateScreen+0xa4>
     898:	53 c0       	rjmp	.+166    	; 0x940 <updateScreen+0xcc>
	{
		case 0:
		outputS(s0line0, 0);
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	83 eb       	ldi	r24, 0xB3	; 179
     8a0:	93 e0       	ldi	r25, 0x03	; 3
     8a2:	cd d0       	rcall	.+410    	; 0xa3e <outputS>
		outputS(s0line1, 1);
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	8e e9       	ldi	r24, 0x9E	; 158
     8aa:	93 e0       	ldi	r25, 0x03	; 3
     8ac:	c8 d0       	rcall	.+400    	; 0xa3e <outputS>
		outputS(s0line2, 2);
     8ae:	62 e0       	ldi	r22, 0x02	; 2
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	89 e8       	ldi	r24, 0x89	; 137
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	c3 d0       	rcall	.+390    	; 0xa3e <outputS>
		outputS(s0line3, 3);
     8b8:	63 e0       	ldi	r22, 0x03	; 3
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	84 e7       	ldi	r24, 0x74	; 116
     8be:	93 e0       	ldi	r25, 0x03	; 3
     8c0:	be d0       	rcall	.+380    	; 0xa3e <outputS>
		break;
     8c2:	3e c0       	rjmp	.+124    	; 0x940 <updateScreen+0xcc>
		
		case 1:
 		outputS(s1line0, 0);
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	8f e5       	ldi	r24, 0x5F	; 95
     8ca:	93 e0       	ldi	r25, 0x03	; 3
     8cc:	b8 d0       	rcall	.+368    	; 0xa3e <outputS>
 		outputS(s1line1, 1);
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	8a e4       	ldi	r24, 0x4A	; 74
     8d4:	93 e0       	ldi	r25, 0x03	; 3
     8d6:	b3 d0       	rcall	.+358    	; 0xa3e <outputS>
 		outputS(s1line2, 2);
     8d8:	62 e0       	ldi	r22, 0x02	; 2
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	85 e3       	ldi	r24, 0x35	; 53
     8de:	93 e0       	ldi	r25, 0x03	; 3
     8e0:	ae d0       	rcall	.+348    	; 0xa3e <outputS>
 		outputS(s1line3, 3);
     8e2:	63 e0       	ldi	r22, 0x03	; 3
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	80 e2       	ldi	r24, 0x20	; 32
     8e8:	93 e0       	ldi	r25, 0x03	; 3
     8ea:	a9 d0       	rcall	.+338    	; 0xa3e <outputS>
 		break;
     8ec:	29 c0       	rjmp	.+82     	; 0x940 <updateScreen+0xcc>
		 
		case 2:
		outputS(s2line0, 0);
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	8b e0       	ldi	r24, 0x0B	; 11
     8f4:	93 e0       	ldi	r25, 0x03	; 3
     8f6:	a3 d0       	rcall	.+326    	; 0xa3e <outputS>
		outputS(s2line1, 1);
     8f8:	61 e0       	ldi	r22, 0x01	; 1
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	86 ef       	ldi	r24, 0xF6	; 246
     8fe:	92 e0       	ldi	r25, 0x02	; 2
     900:	9e d0       	rcall	.+316    	; 0xa3e <outputS>
		outputS(s2line2, 2);
     902:	62 e0       	ldi	r22, 0x02	; 2
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	81 ee       	ldi	r24, 0xE1	; 225
     908:	92 e0       	ldi	r25, 0x02	; 2
     90a:	99 d0       	rcall	.+306    	; 0xa3e <outputS>
		outputS(s2line3, 3);
     90c:	63 e0       	ldi	r22, 0x03	; 3
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	8c ec       	ldi	r24, 0xCC	; 204
     912:	92 e0       	ldi	r25, 0x02	; 2
     914:	94 d0       	rcall	.+296    	; 0xa3e <outputS>
		break;
     916:	14 c0       	rjmp	.+40     	; 0x940 <updateScreen+0xcc>
		 
		case 3:
		outputS(s3line0, 0);
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	87 eb       	ldi	r24, 0xB7	; 183
     91e:	92 e0       	ldi	r25, 0x02	; 2
     920:	8e d0       	rcall	.+284    	; 0xa3e <outputS>
		outputS(s3line1, 1);
     922:	61 e0       	ldi	r22, 0x01	; 1
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	82 ea       	ldi	r24, 0xA2	; 162
     928:	92 e0       	ldi	r25, 0x02	; 2
     92a:	89 d0       	rcall	.+274    	; 0xa3e <outputS>
		outputS(s3line2, 2);
     92c:	62 e0       	ldi	r22, 0x02	; 2
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	8d e8       	ldi	r24, 0x8D	; 141
     932:	92 e0       	ldi	r25, 0x02	; 2
     934:	84 d0       	rcall	.+264    	; 0xa3e <outputS>
     936:	63 e0       	ldi	r22, 0x03	; 3
		outputS(s3line3, 3);
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	88 e7       	ldi	r24, 0x78	; 120
     93c:	92 e0       	ldi	r25, 0x02	; 2
     93e:	7f d0       	rcall	.+254    	; 0xa3e <outputS>
     940:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <encoderAValue>
		break;
		 
		 
	}
	prevEncoderAValue = encoderAValue;
     944:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <prevEncoderAValue>
     948:	08 95       	ret

0000094a <enableCycle>:
     94a:	e5 e0       	ldi	r30, 0x05	; 5
     94c:	f1 e0       	ldi	r31, 0x01	; 1
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
     94e:	80 81       	ld	r24, Z
     950:	82 60       	ori	r24, 0x02	; 2
     952:	80 83       	st	Z, r24
     954:	85 e0       	ldi	r24, 0x05	; 5
     956:	8a 95       	dec	r24
     958:	f1 f7       	brne	.-4      	; 0x956 <enableCycle+0xc>
     95a:	00 00       	nop
     95c:	80 81       	ld	r24, Z
     95e:	8d 7f       	andi	r24, 0xFD	; 253
     960:	80 83       	st	Z, r24
     962:	08 95       	ret

00000964 <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTJ &= 0B11111110; //set our DC pin low, to get ready to write data.
     964:	e5 e0       	ldi	r30, 0x05	; 5
     966:	f1 e0       	ldi	r31, 0x01	; 1
     968:	90 81       	ld	r25, Z
     96a:	9e 7f       	andi	r25, 0xFE	; 254
     96c:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
     96e:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTJ &= 0B11111110; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
     970:	ec cf       	rjmp	.-40     	; 0x94a <enableCycle>
     972:	08 95       	ret

00000974 <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTJ |=0B00000001; //set out DC Pin high, so it's ready to write data.
     974:	e5 e0       	ldi	r30, 0x05	; 5
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	90 81       	ld	r25, Z
     97a:	91 60       	ori	r25, 0x01	; 1
     97c:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
     97e:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTJ |=0B00000001; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
     980:	e4 cf       	rjmp	.-56     	; 0x94a <enableCycle>
     982:	08 95       	ret

00000984 <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRJ = 0x03; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
     984:	83 e0       	ldi	r24, 0x03	; 3
     986:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	DDRC =0xFF; //all pins on the LCD Data Bus.
     98a:	8f ef       	ldi	r24, 0xFF	; 255
     98c:	87 b9       	out	0x07, r24	; 7

	
	PORTJ &= 0B11111100;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
     98e:	e5 e0       	ldi	r30, 0x05	; 5
     990:	f1 e0       	ldi	r31, 0x01	; 1
     992:	80 81       	ld	r24, Z
     994:	8c 7f       	andi	r24, 0xFC	; 252
     996:	80 83       	st	Z, r24
	
	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
     998:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     99a:	8f e1       	ldi	r24, 0x1F	; 31
     99c:	93 e0       	ldi	r25, 0x03	; 3
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	f1 f7       	brne	.-4      	; 0x99e <initScreen+0x1a>
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <initScreen+0x20>
     9a4:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose
	

	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
     9a6:	8a e2       	ldi	r24, 0x2A	; 42
     9a8:	dd df       	rcall	.-70     	; 0x964 <command>
	command(0x71);        // Function selection A:
     9aa:	81 e7       	ldi	r24, 0x71	; 113
     9ac:	db df       	rcall	.-74     	; 0x964 <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
     9ae:	8c e5       	ldi	r24, 0x5C	; 92
     9b0:	e1 df       	rcall	.-62     	; 0x974 <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
     9b2:	88 e2       	ldi	r24, 0x28	; 40
     9b4:	d7 df       	rcall	.-82     	; 0x964 <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
     9b6:	88 e0       	ldi	r24, 0x08	; 8
     9b8:	d5 df       	rcall	.-86     	; 0x964 <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
     9ba:	8a e2       	ldi	r24, 0x2A	; 42
     9bc:	d3 df       	rcall	.-90     	; 0x964 <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
     9be:	89 e7       	ldi	r24, 0x79	; 121
     9c0:	d1 df       	rcall	.-94     	; 0x964 <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
     9c2:	85 ed       	ldi	r24, 0xD5	; 213
     9c4:	cf df       	rcall	.-98     	; 0x964 <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
     9c6:	80 e7       	ldi	r24, 0x70	; 112
     9c8:	cd df       	rcall	.-102    	; 0x964 <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
     9ca:	88 e7       	ldi	r24, 0x78	; 120
     9cc:	cb df       	rcall	.-106    	; 0x964 <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
     9ce:	89 e0       	ldi	r24, 0x09	; 9
     9d0:	c9 df       	rcall	.-110    	; 0x964 <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
     9d2:	86 e0       	ldi	r24, 0x06	; 6
     9d4:	c7 df       	rcall	.-114    	; 0x964 <command>
	command(0x72);        // Function selection B:
     9d6:	82 e7       	ldi	r24, 0x72	; 114
     9d8:	c5 df       	rcall	.-118    	; 0x964 <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
     9da:	8a e0       	ldi	r24, 0x0A	; 10
     9dc:	cb df       	rcall	.-106    	; 0x974 <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
     9de:	89 e7       	ldi	r24, 0x79	; 121
     9e0:	c1 df       	rcall	.-126    	; 0x964 <command>
	command(0xDA);        // Set SEG pins hardware configuration:
     9e2:	8a ed       	ldi	r24, 0xDA	; 218
     9e4:	bf df       	rcall	.-130    	; 0x964 <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
     9e6:	80 e1       	ldi	r24, 0x10	; 16
     9e8:	bd df       	rcall	.-134    	; 0x964 <command>
	command(0xDC);        // Function selection C:
     9ea:	8c ed       	ldi	r24, 0xDC	; 220
     9ec:	bb df       	rcall	.-138    	; 0x964 <command>
	command(0x00);        //  internal VSL, GPIO input disable
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	b9 df       	rcall	.-142    	; 0x964 <command>
	command(0x81);        // Set contrast control:
     9f2:	81 e8       	ldi	r24, 0x81	; 129
     9f4:	b7 df       	rcall	.-146    	; 0x964 <command>
     9f6:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
     9f8:	b5 df       	rcall	.-150    	; 0x964 <command>
     9fa:	89 ed       	ldi	r24, 0xD9	; 217
     9fc:	b3 df       	rcall	.-154    	; 0x964 <command>
	command(0xD9);        // Set phase length:
     9fe:	81 ef       	ldi	r24, 0xF1	; 241
     a00:	b1 df       	rcall	.-158    	; 0x964 <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
     a02:	8b ed       	ldi	r24, 0xDB	; 219
     a04:	af df       	rcall	.-162    	; 0x964 <command>
     a06:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
     a08:	ad df       	rcall	.-166    	; 0x964 <command>
     a0a:	88 e7       	ldi	r24, 0x78	; 120
     a0c:	ab df       	rcall	.-170    	; 0x964 <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
     a0e:	88 e2       	ldi	r24, 0x28	; 40
     a10:	a9 df       	rcall	.-174    	; 0x964 <command>
     a12:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
     a14:	a7 df       	rcall	.-178    	; 0x964 <command>
     a16:	8f e3       	ldi	r24, 0x3F	; 63
     a18:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <initScreen+0x96>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <initScreen+0x9c>
	command(0x01);        // Clear display
     a20:	00 00       	nop
     a22:	80 e8       	ldi	r24, 0x80	; 128
     a24:	9f df       	rcall	.-194    	; 0x964 <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a26:	8c e0       	ldi	r24, 0x0C	; 12
     a28:	9d df       	rcall	.-198    	; 0x964 <command>
     a2a:	9f ef       	ldi	r25, 0xFF	; 255
     a2c:	24 e3       	ldi	r18, 0x34	; 52
     a2e:	8c e0       	ldi	r24, 0x0C	; 12
     a30:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	
	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
     a32:	20 40       	sbci	r18, 0x00	; 0
     a34:	80 40       	sbci	r24, 0x00	; 0
     a36:	e1 f7       	brne	.-8      	; 0xa30 <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <initScreen+0xb6>
     a3a:	00 00       	nop
     a3c:	08 95       	ret

00000a3e <outputS>:
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	8c 01       	movw	r16, r24
     a48:	fb 01       	movw	r30, r22
     a4a:	ff 27       	eor	r31, r31
     a4c:	e8 53       	subi	r30, 0x38	; 56
     a4e:	fc 4f       	sbci	r31, 0xFC	; 252
     a50:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;
	
	command(new_line[r]);
     a52:	88 df       	rcall	.-240    	; 0x964 <command>
     a54:	e8 01       	movw	r28, r16
     a56:	0c 5e       	subi	r16, 0xEC	; 236
     a58:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
     a5a:	89 91       	ld	r24, Y+
     a5c:	8b df       	rcall	.-234    	; 0x974 <data>
	uint8_t r = row;
	uint8_t c = 0;
	
	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
     a5e:	c0 17       	cp	r28, r16
     a60:	d1 07       	cpc	r29, r17
     a62:	d9 f7       	brne	.-10     	; 0xa5a <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	08 95       	ret

00000a6e <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;
	
	switch(numCharacters)
     a74:	43 30       	cpi	r20, 0x03	; 3
     a76:	09 f4       	brne	.+2      	; 0xa7a <numPrinter+0xc>
     a78:	51 c0       	rjmp	.+162    	; 0xb1c <numPrinter+0xae>
     a7a:	28 f4       	brcc	.+10     	; 0xa86 <numPrinter+0x18>
     a7c:	41 30       	cpi	r20, 0x01	; 1
     a7e:	51 f0       	breq	.+20     	; 0xa94 <numPrinter+0x26>
     a80:	42 30       	cpi	r20, 0x02	; 2
     a82:	21 f1       	breq	.+72     	; 0xacc <numPrinter+0x5e>
     a84:	a2 c1       	rjmp	.+836    	; 0xdca <numPrinter+0x35c>
     a86:	44 30       	cpi	r20, 0x04	; 4
     a88:	09 f4       	brne	.+2      	; 0xa8c <numPrinter+0x1e>
     a8a:	8e c0       	rjmp	.+284    	; 0xba8 <numPrinter+0x13a>
     a8c:	45 30       	cpi	r20, 0x05	; 5
     a8e:	09 f4       	brne	.+2      	; 0xa92 <numPrinter+0x24>
     a90:	fd c0       	rjmp	.+506    	; 0xc8c <numPrinter+0x21e>
     a92:	9b c1       	rjmp	.+822    	; 0xdca <numPrinter+0x35c>
		case 0:
		break;
		
		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
     a94:	ec 01       	movw	r28, r24
     a96:	c6 0f       	add	r28, r22
     a98:	d1 1d       	adc	r29, r1
     a9a:	ad ec       	ldi	r26, 0xCD	; 205
     a9c:	bc ec       	ldi	r27, 0xCC	; 204
     a9e:	3c d4       	rcall	.+2168   	; 0x1318 <__umulhisi3>
     aa0:	96 95       	lsr	r25
     aa2:	87 95       	ror	r24
     aa4:	96 95       	lsr	r25
     aa6:	87 95       	ror	r24
     aa8:	96 95       	lsr	r25
     aaa:	87 95       	ror	r24
     aac:	9c 01       	movw	r18, r24
     aae:	22 0f       	add	r18, r18
     ab0:	33 1f       	adc	r19, r19
     ab2:	88 0f       	add	r24, r24
     ab4:	99 1f       	adc	r25, r25
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	88 0f       	add	r24, r24
     abc:	99 1f       	adc	r25, r25
     abe:	82 0f       	add	r24, r18
     ac0:	93 1f       	adc	r25, r19
     ac2:	e8 1b       	sub	r30, r24
     ac4:	f9 0b       	sbc	r31, r25
     ac6:	e0 5d       	subi	r30, 0xD0	; 208
     ac8:	e8 83       	st	Y, r30
		break;
     aca:	7f c1       	rjmp	.+766    	; 0xdca <numPrinter+0x35c>
		
		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
     acc:	ec 01       	movw	r28, r24
     ace:	c6 0f       	add	r28, r22
     ad0:	d1 1d       	adc	r29, r1
     ad2:	ad ec       	ldi	r26, 0xCD	; 205
     ad4:	bc ec       	ldi	r27, 0xCC	; 204
     ad6:	20 d4       	rcall	.+2112   	; 0x1318 <__umulhisi3>
     ad8:	96 95       	lsr	r25
     ada:	87 95       	ror	r24
     adc:	96 95       	lsr	r25
     ade:	87 95       	ror	r24
     ae0:	96 95       	lsr	r25
     ae2:	87 95       	ror	r24
     ae4:	9c 01       	movw	r18, r24
     ae6:	22 0f       	add	r18, r18
     ae8:	33 1f       	adc	r19, r19
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	88 0f       	add	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	82 0f       	add	r24, r18
     af8:	93 1f       	adc	r25, r19
     afa:	9f 01       	movw	r18, r30
     afc:	28 1b       	sub	r18, r24
     afe:	39 0b       	sbc	r19, r25
     b00:	c9 01       	movw	r24, r18
     b02:	80 5d       	subi	r24, 0xD0	; 208
     b04:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
     b06:	9f 01       	movw	r18, r30
     b08:	07 d4       	rcall	.+2062   	; 0x1318 <__umulhisi3>
     b0a:	96 95       	lsr	r25
     b0c:	87 95       	ror	r24
     b0e:	96 95       	lsr	r25
     b10:	87 95       	ror	r24
     b12:	96 95       	lsr	r25
     b14:	87 95       	ror	r24
     b16:	80 5d       	subi	r24, 0xD0	; 208
     b18:	88 83       	st	Y, r24
     b1a:	57 c1       	rjmp	.+686    	; 0xdca <numPrinter+0x35c>
		break;
     b1c:	ec 01       	movw	r28, r24
		
		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
     b1e:	c6 0f       	add	r28, r22
     b20:	d1 1d       	adc	r29, r1
     b22:	ad ec       	ldi	r26, 0xCD	; 205
     b24:	bc ec       	ldi	r27, 0xCC	; 204
     b26:	f8 d3       	rcall	.+2032   	; 0x1318 <__umulhisi3>
     b28:	96 95       	lsr	r25
     b2a:	87 95       	ror	r24
     b2c:	96 95       	lsr	r25
     b2e:	87 95       	ror	r24
     b30:	96 95       	lsr	r25
     b32:	87 95       	ror	r24
     b34:	9c 01       	movw	r18, r24
     b36:	22 0f       	add	r18, r18
     b38:	33 1f       	adc	r19, r19
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	88 0f       	add	r24, r24
     b40:	99 1f       	adc	r25, r25
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	82 0f       	add	r24, r18
     b48:	93 1f       	adc	r25, r19
     b4a:	9f 01       	movw	r18, r30
     b4c:	28 1b       	sub	r18, r24
     b4e:	39 0b       	sbc	r19, r25
     b50:	c9 01       	movw	r24, r18
     b52:	80 5d       	subi	r24, 0xD0	; 208
     b54:	8a 83       	std	Y+2, r24	; 0x02
     b56:	af 01       	movw	r20, r30
		charArray[(startingPos+1)] = tensPlace;
     b58:	56 95       	lsr	r21
     b5a:	47 95       	ror	r20
     b5c:	56 95       	lsr	r21
     b5e:	47 95       	ror	r20
     b60:	9a 01       	movw	r18, r20
     b62:	ab e7       	ldi	r26, 0x7B	; 123
     b64:	b4 e1       	ldi	r27, 0x14	; 20
     b66:	d8 d3       	rcall	.+1968   	; 0x1318 <__umulhisi3>
     b68:	96 95       	lsr	r25
     b6a:	87 95       	ror	r24
     b6c:	64 e6       	ldi	r22, 0x64	; 100
     b6e:	68 9f       	mul	r22, r24
     b70:	90 01       	movw	r18, r0
     b72:	69 9f       	mul	r22, r25
     b74:	30 0d       	add	r19, r0
     b76:	11 24       	eor	r1, r1
     b78:	cf 01       	movw	r24, r30
     b7a:	82 1b       	sub	r24, r18
     b7c:	93 0b       	sbc	r25, r19
     b7e:	9c 01       	movw	r18, r24
     b80:	ad ec       	ldi	r26, 0xCD	; 205
     b82:	bc ec       	ldi	r27, 0xCC	; 204
     b84:	c9 d3       	rcall	.+1938   	; 0x1318 <__umulhisi3>
     b86:	96 95       	lsr	r25
     b88:	87 95       	ror	r24
     b8a:	96 95       	lsr	r25
     b8c:	87 95       	ror	r24
     b8e:	96 95       	lsr	r25
     b90:	87 95       	ror	r24
     b92:	80 5d       	subi	r24, 0xD0	; 208
     b94:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
     b96:	9a 01       	movw	r18, r20
     b98:	ab e7       	ldi	r26, 0x7B	; 123
     b9a:	b4 e1       	ldi	r27, 0x14	; 20
     b9c:	bd d3       	rcall	.+1914   	; 0x1318 <__umulhisi3>
     b9e:	96 95       	lsr	r25
     ba0:	87 95       	ror	r24
     ba2:	80 5d       	subi	r24, 0xD0	; 208
     ba4:	88 83       	st	Y, r24
		break;
     ba6:	11 c1       	rjmp	.+546    	; 0xdca <numPrinter+0x35c>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
     ba8:	ec 01       	movw	r28, r24
     baa:	c6 0f       	add	r28, r22
     bac:	d1 1d       	adc	r29, r1
     bae:	ad ec       	ldi	r26, 0xCD	; 205
     bb0:	bc ec       	ldi	r27, 0xCC	; 204
     bb2:	b2 d3       	rcall	.+1892   	; 0x1318 <__umulhisi3>
     bb4:	96 95       	lsr	r25
     bb6:	87 95       	ror	r24
     bb8:	96 95       	lsr	r25
     bba:	87 95       	ror	r24
     bbc:	96 95       	lsr	r25
     bbe:	87 95       	ror	r24
     bc0:	9c 01       	movw	r18, r24
     bc2:	22 0f       	add	r18, r18
     bc4:	33 1f       	adc	r19, r19
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	82 0f       	add	r24, r18
     bd4:	93 1f       	adc	r25, r19
     bd6:	9f 01       	movw	r18, r30
     bd8:	28 1b       	sub	r18, r24
     bda:	39 0b       	sbc	r19, r25
     bdc:	c9 01       	movw	r24, r18
     bde:	80 5d       	subi	r24, 0xD0	; 208
     be0:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
     be2:	9f 01       	movw	r18, r30
     be4:	36 95       	lsr	r19
     be6:	27 95       	ror	r18
     be8:	36 95       	lsr	r19
     bea:	27 95       	ror	r18
     bec:	ab e7       	ldi	r26, 0x7B	; 123
     bee:	b4 e1       	ldi	r27, 0x14	; 20
     bf0:	93 d3       	rcall	.+1830   	; 0x1318 <__umulhisi3>
     bf2:	96 95       	lsr	r25
     bf4:	87 95       	ror	r24
     bf6:	44 e6       	ldi	r20, 0x64	; 100
     bf8:	48 9f       	mul	r20, r24
     bfa:	90 01       	movw	r18, r0
     bfc:	49 9f       	mul	r20, r25
     bfe:	30 0d       	add	r19, r0
     c00:	11 24       	eor	r1, r1
     c02:	cf 01       	movw	r24, r30
     c04:	82 1b       	sub	r24, r18
     c06:	93 0b       	sbc	r25, r19
     c08:	9c 01       	movw	r18, r24
     c0a:	ad ec       	ldi	r26, 0xCD	; 205
     c0c:	bc ec       	ldi	r27, 0xCC	; 204
     c0e:	84 d3       	rcall	.+1800   	; 0x1318 <__umulhisi3>
     c10:	96 95       	lsr	r25
     c12:	87 95       	ror	r24
     c14:	96 95       	lsr	r25
     c16:	87 95       	ror	r24
     c18:	96 95       	lsr	r25
     c1a:	87 95       	ror	r24
     c1c:	80 5d       	subi	r24, 0xD0	; 208
     c1e:	8a 83       	std	Y+2, r24	; 0x02
     c20:	af 01       	movw	r20, r30
		charArray[(startingPos+1)] = hunderedsPlace;
     c22:	56 95       	lsr	r21
     c24:	47 95       	ror	r20
     c26:	56 95       	lsr	r21
     c28:	47 95       	ror	r20
     c2a:	56 95       	lsr	r21
     c2c:	47 95       	ror	r20
     c2e:	9a 01       	movw	r18, r20
     c30:	a5 ec       	ldi	r26, 0xC5	; 197
     c32:	b0 e2       	ldi	r27, 0x20	; 32
     c34:	71 d3       	rcall	.+1762   	; 0x1318 <__umulhisi3>
     c36:	92 95       	swap	r25
     c38:	82 95       	swap	r24
     c3a:	8f 70       	andi	r24, 0x0F	; 15
     c3c:	89 27       	eor	r24, r25
     c3e:	9f 70       	andi	r25, 0x0F	; 15
     c40:	89 27       	eor	r24, r25
     c42:	68 ee       	ldi	r22, 0xE8	; 232
     c44:	73 e0       	ldi	r23, 0x03	; 3
     c46:	86 9f       	mul	r24, r22
     c48:	90 01       	movw	r18, r0
     c4a:	87 9f       	mul	r24, r23
     c4c:	30 0d       	add	r19, r0
     c4e:	96 9f       	mul	r25, r22
     c50:	30 0d       	add	r19, r0
     c52:	11 24       	eor	r1, r1
     c54:	cf 01       	movw	r24, r30
     c56:	82 1b       	sub	r24, r18
     c58:	93 0b       	sbc	r25, r19
     c5a:	9c 01       	movw	r18, r24
     c5c:	36 95       	lsr	r19
     c5e:	27 95       	ror	r18
     c60:	36 95       	lsr	r19
     c62:	27 95       	ror	r18
     c64:	ab e7       	ldi	r26, 0x7B	; 123
     c66:	b4 e1       	ldi	r27, 0x14	; 20
     c68:	57 d3       	rcall	.+1710   	; 0x1318 <__umulhisi3>
     c6a:	96 95       	lsr	r25
     c6c:	87 95       	ror	r24
     c6e:	80 5d       	subi	r24, 0xD0	; 208
     c70:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
     c72:	9a 01       	movw	r18, r20
     c74:	a5 ec       	ldi	r26, 0xC5	; 197
     c76:	b0 e2       	ldi	r27, 0x20	; 32
     c78:	4f d3       	rcall	.+1694   	; 0x1318 <__umulhisi3>
     c7a:	92 95       	swap	r25
     c7c:	82 95       	swap	r24
     c7e:	8f 70       	andi	r24, 0x0F	; 15
     c80:	89 27       	eor	r24, r25
     c82:	9f 70       	andi	r25, 0x0F	; 15
     c84:	89 27       	eor	r24, r25
     c86:	80 5d       	subi	r24, 0xD0	; 208
     c88:	88 83       	st	Y, r24
		break;
     c8a:	9f c0       	rjmp	.+318    	; 0xdca <numPrinter+0x35c>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
     c8c:	ec 01       	movw	r28, r24
     c8e:	c6 0f       	add	r28, r22
     c90:	d1 1d       	adc	r29, r1
     c92:	ad ec       	ldi	r26, 0xCD	; 205
     c94:	bc ec       	ldi	r27, 0xCC	; 204
     c96:	40 d3       	rcall	.+1664   	; 0x1318 <__umulhisi3>
     c98:	96 95       	lsr	r25
     c9a:	87 95       	ror	r24
     c9c:	96 95       	lsr	r25
     c9e:	87 95       	ror	r24
     ca0:	96 95       	lsr	r25
     ca2:	87 95       	ror	r24
     ca4:	9c 01       	movw	r18, r24
     ca6:	22 0f       	add	r18, r18
     ca8:	33 1f       	adc	r19, r19
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	82 0f       	add	r24, r18
     cb8:	93 1f       	adc	r25, r19
     cba:	9f 01       	movw	r18, r30
     cbc:	28 1b       	sub	r18, r24
     cbe:	39 0b       	sbc	r19, r25
     cc0:	c9 01       	movw	r24, r18
     cc2:	80 5d       	subi	r24, 0xD0	; 208
     cc4:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
     cc6:	9f 01       	movw	r18, r30
     cc8:	36 95       	lsr	r19
     cca:	27 95       	ror	r18
     ccc:	36 95       	lsr	r19
     cce:	27 95       	ror	r18
     cd0:	ab e7       	ldi	r26, 0x7B	; 123
     cd2:	b4 e1       	ldi	r27, 0x14	; 20
     cd4:	21 d3       	rcall	.+1602   	; 0x1318 <__umulhisi3>
     cd6:	96 95       	lsr	r25
     cd8:	87 95       	ror	r24
     cda:	44 e6       	ldi	r20, 0x64	; 100
     cdc:	48 9f       	mul	r20, r24
     cde:	90 01       	movw	r18, r0
     ce0:	49 9f       	mul	r20, r25
     ce2:	30 0d       	add	r19, r0
     ce4:	11 24       	eor	r1, r1
     ce6:	cf 01       	movw	r24, r30
     ce8:	82 1b       	sub	r24, r18
     cea:	93 0b       	sbc	r25, r19
     cec:	9c 01       	movw	r18, r24
     cee:	ad ec       	ldi	r26, 0xCD	; 205
     cf0:	bc ec       	ldi	r27, 0xCC	; 204
     cf2:	12 d3       	rcall	.+1572   	; 0x1318 <__umulhisi3>
     cf4:	96 95       	lsr	r25
     cf6:	87 95       	ror	r24
     cf8:	96 95       	lsr	r25
     cfa:	87 95       	ror	r24
     cfc:	96 95       	lsr	r25
     cfe:	87 95       	ror	r24
     d00:	80 5d       	subi	r24, 0xD0	; 208
     d02:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
     d04:	9f 01       	movw	r18, r30
     d06:	36 95       	lsr	r19
     d08:	27 95       	ror	r18
     d0a:	36 95       	lsr	r19
     d0c:	27 95       	ror	r18
     d0e:	36 95       	lsr	r19
     d10:	27 95       	ror	r18
     d12:	a5 ec       	ldi	r26, 0xC5	; 197
     d14:	b0 e2       	ldi	r27, 0x20	; 32
     d16:	00 d3       	rcall	.+1536   	; 0x1318 <__umulhisi3>
     d18:	92 95       	swap	r25
     d1a:	82 95       	swap	r24
     d1c:	8f 70       	andi	r24, 0x0F	; 15
     d1e:	89 27       	eor	r24, r25
     d20:	9f 70       	andi	r25, 0x0F	; 15
     d22:	89 27       	eor	r24, r25
     d24:	48 ee       	ldi	r20, 0xE8	; 232
     d26:	53 e0       	ldi	r21, 0x03	; 3
     d28:	84 9f       	mul	r24, r20
     d2a:	90 01       	movw	r18, r0
     d2c:	85 9f       	mul	r24, r21
     d2e:	30 0d       	add	r19, r0
     d30:	94 9f       	mul	r25, r20
     d32:	30 0d       	add	r19, r0
     d34:	11 24       	eor	r1, r1
     d36:	cf 01       	movw	r24, r30
     d38:	82 1b       	sub	r24, r18
     d3a:	93 0b       	sbc	r25, r19
     d3c:	9c 01       	movw	r18, r24
     d3e:	36 95       	lsr	r19
     d40:	27 95       	ror	r18
     d42:	36 95       	lsr	r19
     d44:	27 95       	ror	r18
     d46:	ab e7       	ldi	r26, 0x7B	; 123
     d48:	b4 e1       	ldi	r27, 0x14	; 20
     d4a:	e6 d2       	rcall	.+1484   	; 0x1318 <__umulhisi3>
     d4c:	96 95       	lsr	r25
     d4e:	87 95       	ror	r24
     d50:	80 5d       	subi	r24, 0xD0	; 208
     d52:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
     d54:	af 01       	movw	r20, r30
     d56:	52 95       	swap	r21
     d58:	42 95       	swap	r20
     d5a:	4f 70       	andi	r20, 0x0F	; 15
     d5c:	45 27       	eor	r20, r21
     d5e:	5f 70       	andi	r21, 0x0F	; 15
     d60:	45 27       	eor	r20, r21
     d62:	9a 01       	movw	r18, r20
     d64:	a7 e4       	ldi	r26, 0x47	; 71
     d66:	b3 e0       	ldi	r27, 0x03	; 3
     d68:	d7 d2       	rcall	.+1454   	; 0x1318 <__umulhisi3>
     d6a:	96 95       	lsr	r25
     d6c:	87 95       	ror	r24
     d6e:	96 95       	lsr	r25
     d70:	87 95       	ror	r24
     d72:	96 95       	lsr	r25
     d74:	87 95       	ror	r24
     d76:	60 e1       	ldi	r22, 0x10	; 16
     d78:	77 e2       	ldi	r23, 0x27	; 39
     d7a:	86 9f       	mul	r24, r22
     d7c:	90 01       	movw	r18, r0
     d7e:	87 9f       	mul	r24, r23
     d80:	30 0d       	add	r19, r0
     d82:	96 9f       	mul	r25, r22
     d84:	30 0d       	add	r19, r0
     d86:	11 24       	eor	r1, r1
     d88:	cf 01       	movw	r24, r30
     d8a:	82 1b       	sub	r24, r18
     d8c:	93 0b       	sbc	r25, r19
     d8e:	9c 01       	movw	r18, r24
     d90:	36 95       	lsr	r19
     d92:	27 95       	ror	r18
     d94:	36 95       	lsr	r19
     d96:	27 95       	ror	r18
     d98:	36 95       	lsr	r19
     d9a:	27 95       	ror	r18
     d9c:	a5 ec       	ldi	r26, 0xC5	; 197
     d9e:	b0 e2       	ldi	r27, 0x20	; 32
     da0:	bb d2       	rcall	.+1398   	; 0x1318 <__umulhisi3>
     da2:	92 95       	swap	r25
     da4:	82 95       	swap	r24
     da6:	8f 70       	andi	r24, 0x0F	; 15
     da8:	89 27       	eor	r24, r25
     daa:	9f 70       	andi	r25, 0x0F	; 15
     dac:	89 27       	eor	r24, r25
     dae:	80 5d       	subi	r24, 0xD0	; 208
     db0:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
     db2:	9a 01       	movw	r18, r20
     db4:	a7 e4       	ldi	r26, 0x47	; 71
     db6:	b3 e0       	ldi	r27, 0x03	; 3
     db8:	af d2       	rcall	.+1374   	; 0x1318 <__umulhisi3>
     dba:	96 95       	lsr	r25
     dbc:	87 95       	ror	r24
     dbe:	96 95       	lsr	r25
     dc0:	87 95       	ror	r24
     dc2:	96 95       	lsr	r25
     dc4:	87 95       	ror	r24
     dc6:	80 5d       	subi	r24, 0xD0	; 208
     dc8:	88 83       	st	Y, r24
     dca:	df 91       	pop	r29
		break;
		
	}


     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <__vector_27>:

int serialReadPos = 0;////this is a necessary global for the serial Library
int serialWritePos = 0;//this is a necessary global for the serial Library

ISR (USART0_TX_vect)
{
     dd0:	1f 92       	push	r1
     dd2:	0f 92       	push	r0
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	0f 92       	push	r0
     dd8:	11 24       	eor	r1, r1
     dda:	0b b6       	in	r0, 0x3b	; 59
     ddc:	0f 92       	push	r0
     dde:	2f 93       	push	r18
     de0:	3f 93       	push	r19
     de2:	8f 93       	push	r24
     de4:	9f 93       	push	r25
     de6:	ef 93       	push	r30
     de8:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
     dea:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <serialReadPos>
     dee:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <serialReadPos+0x1>
     df2:	20 91 ce 03 	lds	r18, 0x03CE	; 0x8003ce <serialWritePos>
     df6:	30 91 cf 03 	lds	r19, 0x03CF	; 0x8003cf <serialWritePos+0x1>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	b9 f0       	breq	.+46     	; 0xe2e <__vector_27+0x5e>
	{
		UDR0 = serial0Buffer[serialReadPos];
     e00:	fc 01       	movw	r30, r24
     e02:	e4 58       	subi	r30, 0x84	; 132
     e04:	fa 4f       	sbci	r31, 0xFA	; 250
     e06:	80 81       	ld	r24, Z
     e08:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
     e0c:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <serialReadPos>
     e10:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <serialReadPos+0x1>
     e14:	01 96       	adiw	r24, 0x01	; 1
		
		if(serialReadPos >= TX_BUFFER_SIZE)
     e16:	80 38       	cpi	r24, 0x80	; 128
     e18:	91 05       	cpc	r25, r1
     e1a:	2c f4       	brge	.+10     	; 0xe26 <__vector_27+0x56>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
     e1c:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <serialReadPos+0x1>
     e20:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <serialReadPos>
     e24:	04 c0       	rjmp	.+8      	; 0xe2e <__vector_27+0x5e>
		
		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
     e26:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <serialReadPos+0x1>
     e2a:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <serialReadPos>
		}
	}
}
     e2e:	ff 91       	pop	r31
     e30:	ef 91       	pop	r30
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	3f 91       	pop	r19
     e38:	2f 91       	pop	r18
     e3a:	0f 90       	pop	r0
     e3c:	0b be       	out	0x3b, r0	; 59
     e3e:	0f 90       	pop	r0
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	0f 90       	pop	r0
     e44:	1f 90       	pop	r1
     e46:	18 95       	reti

00000e48 <appendSerial0>:

void appendSerial0(char c)
{
	serial0Buffer[serialWritePos] = c;
     e48:	20 91 ce 03 	lds	r18, 0x03CE	; 0x8003ce <serialWritePos>
     e4c:	30 91 cf 03 	lds	r19, 0x03CF	; 0x8003cf <serialWritePos+0x1>
     e50:	f9 01       	movw	r30, r18
     e52:	e4 58       	subi	r30, 0x84	; 132
     e54:	fa 4f       	sbci	r31, 0xFA	; 250
     e56:	80 83       	st	Z, r24
	serialWritePos++;
     e58:	2f 5f       	subi	r18, 0xFF	; 255
     e5a:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
     e5c:	20 38       	cpi	r18, 0x80	; 128
     e5e:	31 05       	cpc	r19, r1
     e60:	2c f4       	brge	.+10     	; 0xe6c <appendSerial0+0x24>
}

void appendSerial0(char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
     e62:	30 93 cf 03 	sts	0x03CF, r19	; 0x8003cf <serialWritePos+0x1>
     e66:	20 93 ce 03 	sts	0x03CE, r18	; 0x8003ce <serialWritePos>
     e6a:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
     e6c:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <serialWritePos+0x1>
     e70:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <serialWritePos>
     e74:	08 95       	ret

00000e76 <serialWrite0>:
	}
}

void serialWrite0(char c[])
{
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	ec 01       	movw	r28, r24
     e80:	8c 01       	movw	r16, r24
     e82:	06 5f       	subi	r16, 0xF6	; 246
     e84:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = 0; i<10; i++) //this may need to be 11
	{
		appendSerial0(c[i]);
     e86:	89 91       	ld	r24, Y+
     e88:	df df       	rcall	.-66     	; 0xe48 <appendSerial0>
	}
}

void serialWrite0(char c[])
{
	for (uint8_t i = 0; i<10; i++) //this may need to be 11
     e8a:	c0 17       	cp	r28, r16
     e8c:	d1 07       	cpc	r29, r17
     e8e:	d9 f7       	brne	.-10     	; 0xe86 <serialWrite0+0x10>
	{
		appendSerial0(c[i]);
		
	}
	
	if(UCSR0A & (1 << UDRE0))
     e90:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     e94:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
     e96:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	08 95       	ret

00000ea4 <serialInit0>:

void serialInit0()
{
UBRR0H = (BRC >> 8);
     ea4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRC;
     ea8:	80 e1       	ldi	r24, 0x10	; 16
     eaa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
     eae:	88 e4       	ldi	r24, 0x48	; 72
     eb0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     eb4:	86 e0       	ldi	r24, 0x06	; 6
     eb6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     eba:	08 95       	ret

00000ebc <trackControl>:
void resumeAll()
{
	char resumePlay[5] = {0xf0, 0xaa, 0x05, 0x0b, 0x55};
	serialWrite0(resumePlay);
	
}
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	2a 97       	sbiw	r28, 0x0a	; 10
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	90 ef       	ldi	r25, 0xF0	; 240
     ed2:	99 83       	std	Y+1, r25	; 0x01
     ed4:	9a ea       	ldi	r25, 0xAA	; 170
     ed6:	9a 83       	std	Y+2, r25	; 0x02
     ed8:	9a e0       	ldi	r25, 0x0A	; 10
     eda:	9b 83       	std	Y+3, r25	; 0x03
     edc:	93 e0       	ldi	r25, 0x03	; 3
     ede:	9c 83       	std	Y+4, r25	; 0x04
     ee0:	2d 83       	std	Y+5, r18	; 0x05
     ee2:	8e 83       	std	Y+6, r24	; 0x06
     ee4:	6f 83       	std	Y+7, r22	; 0x07
     ee6:	48 87       	std	Y+8, r20	; 0x08
     ee8:	19 86       	std	Y+9, r1	; 0x09
     eea:	85 e5       	ldi	r24, 0x55	; 85
     eec:	8a 87       	std	Y+10, r24	; 0x0a
     eee:	ce 01       	movw	r24, r28
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	c1 df       	rcall	.-126    	; 0xe76 <serialWrite0>
     ef4:	2a 96       	adiw	r28, 0x0a	; 10
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
     efa:	de bf       	out	0x3e, r29	; 62
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	cd bf       	out	0x3d, r28	; 61
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <setOutputVolume>:
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	28 97       	sbiw	r28, 0x08	; 8
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	90 ef       	ldi	r25, 0xF0	; 240
     f1c:	99 83       	std	Y+1, r25	; 0x01
     f1e:	9a ea       	ldi	r25, 0xAA	; 170
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	98 e0       	ldi	r25, 0x08	; 8
     f24:	9b 83       	std	Y+3, r25	; 0x03
     f26:	95 e0       	ldi	r25, 0x05	; 5
     f28:	9c 83       	std	Y+4, r25	; 0x04
     f2a:	4d 83       	std	Y+5, r20	; 0x05
     f2c:	8e 83       	std	Y+6, r24	; 0x06
     f2e:	6f 83       	std	Y+7, r22	; 0x07
     f30:	85 e5       	ldi	r24, 0x55	; 85
     f32:	88 87       	std	Y+8, r24	; 0x08
     f34:	ce 01       	movw	r24, r28
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	9e df       	rcall	.-196    	; 0xe76 <serialWrite0>
     f3a:	28 96       	adiw	r28, 0x08	; 8
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	08 95       	ret

00000f4c <setTrackVolume>:
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	29 97       	sbiw	r28, 0x09	; 9
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	90 ef       	ldi	r25, 0xF0	; 240
     f62:	99 83       	std	Y+1, r25	; 0x01
     f64:	9a ea       	ldi	r25, 0xAA	; 170
     f66:	9a 83       	std	Y+2, r25	; 0x02
     f68:	99 e0       	ldi	r25, 0x09	; 9
     f6a:	9b 83       	std	Y+3, r25	; 0x03
     f6c:	98 e0       	ldi	r25, 0x08	; 8
     f6e:	9c 83       	std	Y+4, r25	; 0x04
     f70:	8d 83       	std	Y+5, r24	; 0x05
     f72:	6e 83       	std	Y+6, r22	; 0x06
     f74:	4f 83       	std	Y+7, r20	; 0x07
     f76:	28 87       	std	Y+8, r18	; 0x08
     f78:	85 e5       	ldi	r24, 0x55	; 85
     f7a:	89 87       	std	Y+9, r24	; 0x09
     f7c:	ce 01       	movw	r24, r28
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	7a df       	rcall	.-268    	; 0xe76 <serialWrite0>
     f82:	29 96       	adiw	r28, 0x09	; 9
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	08 95       	ret

00000f94 <outputSampleRate>:

void outputSampleRate(uint8_t outputSelect, uint8_t offsetLSB, uint8_t offsetMSB)
{
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	28 97       	sbiw	r28, 0x08	; 8
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
	char pitchChange[8] = {0xf0, 0xaa, 0x08, 0x0c, outputSelect, offsetLSB, offsetMSB, 0x55};
     fa8:	90 ef       	ldi	r25, 0xF0	; 240
     faa:	99 83       	std	Y+1, r25	; 0x01
     fac:	9a ea       	ldi	r25, 0xAA	; 170
     fae:	9a 83       	std	Y+2, r25	; 0x02
     fb0:	98 e0       	ldi	r25, 0x08	; 8
     fb2:	9b 83       	std	Y+3, r25	; 0x03
     fb4:	9c e0       	ldi	r25, 0x0C	; 12
     fb6:	9c 83       	std	Y+4, r25	; 0x04
     fb8:	8d 83       	std	Y+5, r24	; 0x05
     fba:	6e 83       	std	Y+6, r22	; 0x06
     fbc:	4f 83       	std	Y+7, r20	; 0x07
     fbe:	85 e5       	ldi	r24, 0x55	; 85
     fc0:	88 87       	std	Y+8, r24	; 0x08
	serialWrite0(pitchChange);
     fc2:	ce 01       	movw	r24, r28
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	57 df       	rcall	.-338    	; 0xe76 <serialWrite0>
}
     fc8:	28 96       	adiw	r28, 0x08	; 8
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <__subsf3>:
     fda:	50 58       	subi	r21, 0x80	; 128

00000fdc <__addsf3>:
     fdc:	bb 27       	eor	r27, r27
     fde:	aa 27       	eor	r26, r26
     fe0:	0e d0       	rcall	.+28     	; 0xffe <__addsf3x>
     fe2:	4d c1       	rjmp	.+666    	; 0x127e <__fp_round>
     fe4:	3e d1       	rcall	.+636    	; 0x1262 <__fp_pscA>
     fe6:	30 f0       	brcs	.+12     	; 0xff4 <__addsf3+0x18>
     fe8:	43 d1       	rcall	.+646    	; 0x1270 <__fp_pscB>
     fea:	20 f0       	brcs	.+8      	; 0xff4 <__addsf3+0x18>
     fec:	31 f4       	brne	.+12     	; 0xffa <__addsf3+0x1e>
     fee:	9f 3f       	cpi	r25, 0xFF	; 255
     ff0:	11 f4       	brne	.+4      	; 0xff6 <__addsf3+0x1a>
     ff2:	1e f4       	brtc	.+6      	; 0xffa <__addsf3+0x1e>
     ff4:	33 c1       	rjmp	.+614    	; 0x125c <__fp_nan>
     ff6:	0e f4       	brtc	.+2      	; 0xffa <__addsf3+0x1e>
     ff8:	e0 95       	com	r30
     ffa:	e7 fb       	bst	r30, 7
     ffc:	29 c1       	rjmp	.+594    	; 0x1250 <__fp_inf>

00000ffe <__addsf3x>:
     ffe:	e9 2f       	mov	r30, r25
    1000:	4f d1       	rcall	.+670    	; 0x12a0 <__fp_split3>
    1002:	80 f3       	brcs	.-32     	; 0xfe4 <__addsf3+0x8>
    1004:	ba 17       	cp	r27, r26
    1006:	62 07       	cpc	r22, r18
    1008:	73 07       	cpc	r23, r19
    100a:	84 07       	cpc	r24, r20
    100c:	95 07       	cpc	r25, r21
    100e:	18 f0       	brcs	.+6      	; 0x1016 <__addsf3x+0x18>
    1010:	71 f4       	brne	.+28     	; 0x102e <__addsf3x+0x30>
    1012:	9e f5       	brtc	.+102    	; 0x107a <__addsf3x+0x7c>
    1014:	67 c1       	rjmp	.+718    	; 0x12e4 <__fp_zero>
    1016:	0e f4       	brtc	.+2      	; 0x101a <__addsf3x+0x1c>
    1018:	e0 95       	com	r30
    101a:	0b 2e       	mov	r0, r27
    101c:	ba 2f       	mov	r27, r26
    101e:	a0 2d       	mov	r26, r0
    1020:	0b 01       	movw	r0, r22
    1022:	b9 01       	movw	r22, r18
    1024:	90 01       	movw	r18, r0
    1026:	0c 01       	movw	r0, r24
    1028:	ca 01       	movw	r24, r20
    102a:	a0 01       	movw	r20, r0
    102c:	11 24       	eor	r1, r1
    102e:	ff 27       	eor	r31, r31
    1030:	59 1b       	sub	r21, r25
    1032:	99 f0       	breq	.+38     	; 0x105a <__addsf3x+0x5c>
    1034:	59 3f       	cpi	r21, 0xF9	; 249
    1036:	50 f4       	brcc	.+20     	; 0x104c <__addsf3x+0x4e>
    1038:	50 3e       	cpi	r21, 0xE0	; 224
    103a:	68 f1       	brcs	.+90     	; 0x1096 <__addsf3x+0x98>
    103c:	1a 16       	cp	r1, r26
    103e:	f0 40       	sbci	r31, 0x00	; 0
    1040:	a2 2f       	mov	r26, r18
    1042:	23 2f       	mov	r18, r19
    1044:	34 2f       	mov	r19, r20
    1046:	44 27       	eor	r20, r20
    1048:	58 5f       	subi	r21, 0xF8	; 248
    104a:	f3 cf       	rjmp	.-26     	; 0x1032 <__addsf3x+0x34>
    104c:	46 95       	lsr	r20
    104e:	37 95       	ror	r19
    1050:	27 95       	ror	r18
    1052:	a7 95       	ror	r26
    1054:	f0 40       	sbci	r31, 0x00	; 0
    1056:	53 95       	inc	r21
    1058:	c9 f7       	brne	.-14     	; 0x104c <__addsf3x+0x4e>
    105a:	7e f4       	brtc	.+30     	; 0x107a <__addsf3x+0x7c>
    105c:	1f 16       	cp	r1, r31
    105e:	ba 0b       	sbc	r27, r26
    1060:	62 0b       	sbc	r22, r18
    1062:	73 0b       	sbc	r23, r19
    1064:	84 0b       	sbc	r24, r20
    1066:	ba f0       	brmi	.+46     	; 0x1096 <__addsf3x+0x98>
    1068:	91 50       	subi	r25, 0x01	; 1
    106a:	a1 f0       	breq	.+40     	; 0x1094 <__addsf3x+0x96>
    106c:	ff 0f       	add	r31, r31
    106e:	bb 1f       	adc	r27, r27
    1070:	66 1f       	adc	r22, r22
    1072:	77 1f       	adc	r23, r23
    1074:	88 1f       	adc	r24, r24
    1076:	c2 f7       	brpl	.-16     	; 0x1068 <__addsf3x+0x6a>
    1078:	0e c0       	rjmp	.+28     	; 0x1096 <__addsf3x+0x98>
    107a:	ba 0f       	add	r27, r26
    107c:	62 1f       	adc	r22, r18
    107e:	73 1f       	adc	r23, r19
    1080:	84 1f       	adc	r24, r20
    1082:	48 f4       	brcc	.+18     	; 0x1096 <__addsf3x+0x98>
    1084:	87 95       	ror	r24
    1086:	77 95       	ror	r23
    1088:	67 95       	ror	r22
    108a:	b7 95       	ror	r27
    108c:	f7 95       	ror	r31
    108e:	9e 3f       	cpi	r25, 0xFE	; 254
    1090:	08 f0       	brcs	.+2      	; 0x1094 <__addsf3x+0x96>
    1092:	b3 cf       	rjmp	.-154    	; 0xffa <__addsf3+0x1e>
    1094:	93 95       	inc	r25
    1096:	88 0f       	add	r24, r24
    1098:	08 f0       	brcs	.+2      	; 0x109c <__addsf3x+0x9e>
    109a:	99 27       	eor	r25, r25
    109c:	ee 0f       	add	r30, r30
    109e:	97 95       	ror	r25
    10a0:	87 95       	ror	r24
    10a2:	08 95       	ret

000010a4 <__divsf3>:
    10a4:	0c d0       	rcall	.+24     	; 0x10be <__divsf3x>
    10a6:	eb c0       	rjmp	.+470    	; 0x127e <__fp_round>
    10a8:	e3 d0       	rcall	.+454    	; 0x1270 <__fp_pscB>
    10aa:	40 f0       	brcs	.+16     	; 0x10bc <__divsf3+0x18>
    10ac:	da d0       	rcall	.+436    	; 0x1262 <__fp_pscA>
    10ae:	30 f0       	brcs	.+12     	; 0x10bc <__divsf3+0x18>
    10b0:	21 f4       	brne	.+8      	; 0x10ba <__divsf3+0x16>
    10b2:	5f 3f       	cpi	r21, 0xFF	; 255
    10b4:	19 f0       	breq	.+6      	; 0x10bc <__divsf3+0x18>
    10b6:	cc c0       	rjmp	.+408    	; 0x1250 <__fp_inf>
    10b8:	51 11       	cpse	r21, r1
    10ba:	15 c1       	rjmp	.+554    	; 0x12e6 <__fp_szero>
    10bc:	cf c0       	rjmp	.+414    	; 0x125c <__fp_nan>

000010be <__divsf3x>:
    10be:	f0 d0       	rcall	.+480    	; 0x12a0 <__fp_split3>
    10c0:	98 f3       	brcs	.-26     	; 0x10a8 <__divsf3+0x4>

000010c2 <__divsf3_pse>:
    10c2:	99 23       	and	r25, r25
    10c4:	c9 f3       	breq	.-14     	; 0x10b8 <__divsf3+0x14>
    10c6:	55 23       	and	r21, r21
    10c8:	b1 f3       	breq	.-20     	; 0x10b6 <__divsf3+0x12>
    10ca:	95 1b       	sub	r25, r21
    10cc:	55 0b       	sbc	r21, r21
    10ce:	bb 27       	eor	r27, r27
    10d0:	aa 27       	eor	r26, r26
    10d2:	62 17       	cp	r22, r18
    10d4:	73 07       	cpc	r23, r19
    10d6:	84 07       	cpc	r24, r20
    10d8:	38 f0       	brcs	.+14     	; 0x10e8 <__divsf3_pse+0x26>
    10da:	9f 5f       	subi	r25, 0xFF	; 255
    10dc:	5f 4f       	sbci	r21, 0xFF	; 255
    10de:	22 0f       	add	r18, r18
    10e0:	33 1f       	adc	r19, r19
    10e2:	44 1f       	adc	r20, r20
    10e4:	aa 1f       	adc	r26, r26
    10e6:	a9 f3       	breq	.-22     	; 0x10d2 <__divsf3_pse+0x10>
    10e8:	33 d0       	rcall	.+102    	; 0x1150 <__divsf3_pse+0x8e>
    10ea:	0e 2e       	mov	r0, r30
    10ec:	3a f0       	brmi	.+14     	; 0x10fc <__divsf3_pse+0x3a>
    10ee:	e0 e8       	ldi	r30, 0x80	; 128
    10f0:	30 d0       	rcall	.+96     	; 0x1152 <__divsf3_pse+0x90>
    10f2:	91 50       	subi	r25, 0x01	; 1
    10f4:	50 40       	sbci	r21, 0x00	; 0
    10f6:	e6 95       	lsr	r30
    10f8:	00 1c       	adc	r0, r0
    10fa:	ca f7       	brpl	.-14     	; 0x10ee <__divsf3_pse+0x2c>
    10fc:	29 d0       	rcall	.+82     	; 0x1150 <__divsf3_pse+0x8e>
    10fe:	fe 2f       	mov	r31, r30
    1100:	27 d0       	rcall	.+78     	; 0x1150 <__divsf3_pse+0x8e>
    1102:	66 0f       	add	r22, r22
    1104:	77 1f       	adc	r23, r23
    1106:	88 1f       	adc	r24, r24
    1108:	bb 1f       	adc	r27, r27
    110a:	26 17       	cp	r18, r22
    110c:	37 07       	cpc	r19, r23
    110e:	48 07       	cpc	r20, r24
    1110:	ab 07       	cpc	r26, r27
    1112:	b0 e8       	ldi	r27, 0x80	; 128
    1114:	09 f0       	breq	.+2      	; 0x1118 <__divsf3_pse+0x56>
    1116:	bb 0b       	sbc	r27, r27
    1118:	80 2d       	mov	r24, r0
    111a:	bf 01       	movw	r22, r30
    111c:	ff 27       	eor	r31, r31
    111e:	93 58       	subi	r25, 0x83	; 131
    1120:	5f 4f       	sbci	r21, 0xFF	; 255
    1122:	2a f0       	brmi	.+10     	; 0x112e <__divsf3_pse+0x6c>
    1124:	9e 3f       	cpi	r25, 0xFE	; 254
    1126:	51 05       	cpc	r21, r1
    1128:	68 f0       	brcs	.+26     	; 0x1144 <__divsf3_pse+0x82>
    112a:	92 c0       	rjmp	.+292    	; 0x1250 <__fp_inf>
    112c:	dc c0       	rjmp	.+440    	; 0x12e6 <__fp_szero>
    112e:	5f 3f       	cpi	r21, 0xFF	; 255
    1130:	ec f3       	brlt	.-6      	; 0x112c <__divsf3_pse+0x6a>
    1132:	98 3e       	cpi	r25, 0xE8	; 232
    1134:	dc f3       	brlt	.-10     	; 0x112c <__divsf3_pse+0x6a>
    1136:	86 95       	lsr	r24
    1138:	77 95       	ror	r23
    113a:	67 95       	ror	r22
    113c:	b7 95       	ror	r27
    113e:	f7 95       	ror	r31
    1140:	9f 5f       	subi	r25, 0xFF	; 255
    1142:	c9 f7       	brne	.-14     	; 0x1136 <__divsf3_pse+0x74>
    1144:	88 0f       	add	r24, r24
    1146:	91 1d       	adc	r25, r1
    1148:	96 95       	lsr	r25
    114a:	87 95       	ror	r24
    114c:	97 f9       	bld	r25, 7
    114e:	08 95       	ret
    1150:	e1 e0       	ldi	r30, 0x01	; 1
    1152:	66 0f       	add	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	88 1f       	adc	r24, r24
    1158:	bb 1f       	adc	r27, r27
    115a:	62 17       	cp	r22, r18
    115c:	73 07       	cpc	r23, r19
    115e:	84 07       	cpc	r24, r20
    1160:	ba 07       	cpc	r27, r26
    1162:	20 f0       	brcs	.+8      	; 0x116c <__divsf3_pse+0xaa>
    1164:	62 1b       	sub	r22, r18
    1166:	73 0b       	sbc	r23, r19
    1168:	84 0b       	sbc	r24, r20
    116a:	ba 0b       	sbc	r27, r26
    116c:	ee 1f       	adc	r30, r30
    116e:	88 f7       	brcc	.-30     	; 0x1152 <__divsf3_pse+0x90>
    1170:	e0 95       	com	r30
    1172:	08 95       	ret

00001174 <__fixsfsi>:
    1174:	04 d0       	rcall	.+8      	; 0x117e <__fixunssfsi>
    1176:	68 94       	set
    1178:	b1 11       	cpse	r27, r1
    117a:	b5 c0       	rjmp	.+362    	; 0x12e6 <__fp_szero>
    117c:	08 95       	ret

0000117e <__fixunssfsi>:
    117e:	98 d0       	rcall	.+304    	; 0x12b0 <__fp_splitA>
    1180:	88 f0       	brcs	.+34     	; 0x11a4 <__fixunssfsi+0x26>
    1182:	9f 57       	subi	r25, 0x7F	; 127
    1184:	90 f0       	brcs	.+36     	; 0x11aa <__fixunssfsi+0x2c>
    1186:	b9 2f       	mov	r27, r25
    1188:	99 27       	eor	r25, r25
    118a:	b7 51       	subi	r27, 0x17	; 23
    118c:	a0 f0       	brcs	.+40     	; 0x11b6 <__fixunssfsi+0x38>
    118e:	d1 f0       	breq	.+52     	; 0x11c4 <__fixunssfsi+0x46>
    1190:	66 0f       	add	r22, r22
    1192:	77 1f       	adc	r23, r23
    1194:	88 1f       	adc	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	1a f0       	brmi	.+6      	; 0x11a0 <__fixunssfsi+0x22>
    119a:	ba 95       	dec	r27
    119c:	c9 f7       	brne	.-14     	; 0x1190 <__fixunssfsi+0x12>
    119e:	12 c0       	rjmp	.+36     	; 0x11c4 <__fixunssfsi+0x46>
    11a0:	b1 30       	cpi	r27, 0x01	; 1
    11a2:	81 f0       	breq	.+32     	; 0x11c4 <__fixunssfsi+0x46>
    11a4:	9f d0       	rcall	.+318    	; 0x12e4 <__fp_zero>
    11a6:	b1 e0       	ldi	r27, 0x01	; 1
    11a8:	08 95       	ret
    11aa:	9c c0       	rjmp	.+312    	; 0x12e4 <__fp_zero>
    11ac:	67 2f       	mov	r22, r23
    11ae:	78 2f       	mov	r23, r24
    11b0:	88 27       	eor	r24, r24
    11b2:	b8 5f       	subi	r27, 0xF8	; 248
    11b4:	39 f0       	breq	.+14     	; 0x11c4 <__fixunssfsi+0x46>
    11b6:	b9 3f       	cpi	r27, 0xF9	; 249
    11b8:	cc f3       	brlt	.-14     	; 0x11ac <__fixunssfsi+0x2e>
    11ba:	86 95       	lsr	r24
    11bc:	77 95       	ror	r23
    11be:	67 95       	ror	r22
    11c0:	b3 95       	inc	r27
    11c2:	d9 f7       	brne	.-10     	; 0x11ba <__fixunssfsi+0x3c>
    11c4:	3e f4       	brtc	.+14     	; 0x11d4 <__fixunssfsi+0x56>
    11c6:	90 95       	com	r25
    11c8:	80 95       	com	r24
    11ca:	70 95       	com	r23
    11cc:	61 95       	neg	r22
    11ce:	7f 4f       	sbci	r23, 0xFF	; 255
    11d0:	8f 4f       	sbci	r24, 0xFF	; 255
    11d2:	9f 4f       	sbci	r25, 0xFF	; 255
    11d4:	08 95       	ret

000011d6 <__floatunsisf>:
    11d6:	e8 94       	clt
    11d8:	09 c0       	rjmp	.+18     	; 0x11ec <__floatsisf+0x12>

000011da <__floatsisf>:
    11da:	97 fb       	bst	r25, 7
    11dc:	3e f4       	brtc	.+14     	; 0x11ec <__floatsisf+0x12>
    11de:	90 95       	com	r25
    11e0:	80 95       	com	r24
    11e2:	70 95       	com	r23
    11e4:	61 95       	neg	r22
    11e6:	7f 4f       	sbci	r23, 0xFF	; 255
    11e8:	8f 4f       	sbci	r24, 0xFF	; 255
    11ea:	9f 4f       	sbci	r25, 0xFF	; 255
    11ec:	99 23       	and	r25, r25
    11ee:	a9 f0       	breq	.+42     	; 0x121a <__floatsisf+0x40>
    11f0:	f9 2f       	mov	r31, r25
    11f2:	96 e9       	ldi	r25, 0x96	; 150
    11f4:	bb 27       	eor	r27, r27
    11f6:	93 95       	inc	r25
    11f8:	f6 95       	lsr	r31
    11fa:	87 95       	ror	r24
    11fc:	77 95       	ror	r23
    11fe:	67 95       	ror	r22
    1200:	b7 95       	ror	r27
    1202:	f1 11       	cpse	r31, r1
    1204:	f8 cf       	rjmp	.-16     	; 0x11f6 <__floatsisf+0x1c>
    1206:	fa f4       	brpl	.+62     	; 0x1246 <__floatsisf+0x6c>
    1208:	bb 0f       	add	r27, r27
    120a:	11 f4       	brne	.+4      	; 0x1210 <__floatsisf+0x36>
    120c:	60 ff       	sbrs	r22, 0
    120e:	1b c0       	rjmp	.+54     	; 0x1246 <__floatsisf+0x6c>
    1210:	6f 5f       	subi	r22, 0xFF	; 255
    1212:	7f 4f       	sbci	r23, 0xFF	; 255
    1214:	8f 4f       	sbci	r24, 0xFF	; 255
    1216:	9f 4f       	sbci	r25, 0xFF	; 255
    1218:	16 c0       	rjmp	.+44     	; 0x1246 <__floatsisf+0x6c>
    121a:	88 23       	and	r24, r24
    121c:	11 f0       	breq	.+4      	; 0x1222 <__floatsisf+0x48>
    121e:	96 e9       	ldi	r25, 0x96	; 150
    1220:	11 c0       	rjmp	.+34     	; 0x1244 <__floatsisf+0x6a>
    1222:	77 23       	and	r23, r23
    1224:	21 f0       	breq	.+8      	; 0x122e <__floatsisf+0x54>
    1226:	9e e8       	ldi	r25, 0x8E	; 142
    1228:	87 2f       	mov	r24, r23
    122a:	76 2f       	mov	r23, r22
    122c:	05 c0       	rjmp	.+10     	; 0x1238 <__floatsisf+0x5e>
    122e:	66 23       	and	r22, r22
    1230:	71 f0       	breq	.+28     	; 0x124e <__floatsisf+0x74>
    1232:	96 e8       	ldi	r25, 0x86	; 134
    1234:	86 2f       	mov	r24, r22
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	2a f0       	brmi	.+10     	; 0x1246 <__floatsisf+0x6c>
    123c:	9a 95       	dec	r25
    123e:	66 0f       	add	r22, r22
    1240:	77 1f       	adc	r23, r23
    1242:	88 1f       	adc	r24, r24
    1244:	da f7       	brpl	.-10     	; 0x123c <__floatsisf+0x62>
    1246:	88 0f       	add	r24, r24
    1248:	96 95       	lsr	r25
    124a:	87 95       	ror	r24
    124c:	97 f9       	bld	r25, 7
    124e:	08 95       	ret

00001250 <__fp_inf>:
    1250:	97 f9       	bld	r25, 7
    1252:	9f 67       	ori	r25, 0x7F	; 127
    1254:	80 e8       	ldi	r24, 0x80	; 128
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	08 95       	ret

0000125c <__fp_nan>:
    125c:	9f ef       	ldi	r25, 0xFF	; 255
    125e:	80 ec       	ldi	r24, 0xC0	; 192
    1260:	08 95       	ret

00001262 <__fp_pscA>:
    1262:	00 24       	eor	r0, r0
    1264:	0a 94       	dec	r0
    1266:	16 16       	cp	r1, r22
    1268:	17 06       	cpc	r1, r23
    126a:	18 06       	cpc	r1, r24
    126c:	09 06       	cpc	r0, r25
    126e:	08 95       	ret

00001270 <__fp_pscB>:
    1270:	00 24       	eor	r0, r0
    1272:	0a 94       	dec	r0
    1274:	12 16       	cp	r1, r18
    1276:	13 06       	cpc	r1, r19
    1278:	14 06       	cpc	r1, r20
    127a:	05 06       	cpc	r0, r21
    127c:	08 95       	ret

0000127e <__fp_round>:
    127e:	09 2e       	mov	r0, r25
    1280:	03 94       	inc	r0
    1282:	00 0c       	add	r0, r0
    1284:	11 f4       	brne	.+4      	; 0x128a <__fp_round+0xc>
    1286:	88 23       	and	r24, r24
    1288:	52 f0       	brmi	.+20     	; 0x129e <__fp_round+0x20>
    128a:	bb 0f       	add	r27, r27
    128c:	40 f4       	brcc	.+16     	; 0x129e <__fp_round+0x20>
    128e:	bf 2b       	or	r27, r31
    1290:	11 f4       	brne	.+4      	; 0x1296 <__fp_round+0x18>
    1292:	60 ff       	sbrs	r22, 0
    1294:	04 c0       	rjmp	.+8      	; 0x129e <__fp_round+0x20>
    1296:	6f 5f       	subi	r22, 0xFF	; 255
    1298:	7f 4f       	sbci	r23, 0xFF	; 255
    129a:	8f 4f       	sbci	r24, 0xFF	; 255
    129c:	9f 4f       	sbci	r25, 0xFF	; 255
    129e:	08 95       	ret

000012a0 <__fp_split3>:
    12a0:	57 fd       	sbrc	r21, 7
    12a2:	90 58       	subi	r25, 0x80	; 128
    12a4:	44 0f       	add	r20, r20
    12a6:	55 1f       	adc	r21, r21
    12a8:	59 f0       	breq	.+22     	; 0x12c0 <__fp_splitA+0x10>
    12aa:	5f 3f       	cpi	r21, 0xFF	; 255
    12ac:	71 f0       	breq	.+28     	; 0x12ca <__fp_splitA+0x1a>
    12ae:	47 95       	ror	r20

000012b0 <__fp_splitA>:
    12b0:	88 0f       	add	r24, r24
    12b2:	97 fb       	bst	r25, 7
    12b4:	99 1f       	adc	r25, r25
    12b6:	61 f0       	breq	.+24     	; 0x12d0 <__fp_splitA+0x20>
    12b8:	9f 3f       	cpi	r25, 0xFF	; 255
    12ba:	79 f0       	breq	.+30     	; 0x12da <__fp_splitA+0x2a>
    12bc:	87 95       	ror	r24
    12be:	08 95       	ret
    12c0:	12 16       	cp	r1, r18
    12c2:	13 06       	cpc	r1, r19
    12c4:	14 06       	cpc	r1, r20
    12c6:	55 1f       	adc	r21, r21
    12c8:	f2 cf       	rjmp	.-28     	; 0x12ae <__fp_split3+0xe>
    12ca:	46 95       	lsr	r20
    12cc:	f1 df       	rcall	.-30     	; 0x12b0 <__fp_splitA>
    12ce:	08 c0       	rjmp	.+16     	; 0x12e0 <__fp_splitA+0x30>
    12d0:	16 16       	cp	r1, r22
    12d2:	17 06       	cpc	r1, r23
    12d4:	18 06       	cpc	r1, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	f1 cf       	rjmp	.-30     	; 0x12bc <__fp_splitA+0xc>
    12da:	86 95       	lsr	r24
    12dc:	71 05       	cpc	r23, r1
    12de:	61 05       	cpc	r22, r1
    12e0:	08 94       	sec
    12e2:	08 95       	ret

000012e4 <__fp_zero>:
    12e4:	e8 94       	clt

000012e6 <__fp_szero>:
    12e6:	bb 27       	eor	r27, r27
    12e8:	66 27       	eor	r22, r22
    12ea:	77 27       	eor	r23, r23
    12ec:	cb 01       	movw	r24, r22
    12ee:	97 f9       	bld	r25, 7
    12f0:	08 95       	ret

000012f2 <__divmodhi4>:
    12f2:	97 fb       	bst	r25, 7
    12f4:	07 2e       	mov	r0, r23
    12f6:	16 f4       	brtc	.+4      	; 0x12fc <__divmodhi4+0xa>
    12f8:	00 94       	com	r0
    12fa:	06 d0       	rcall	.+12     	; 0x1308 <__divmodhi4_neg1>
    12fc:	77 fd       	sbrc	r23, 7
    12fe:	08 d0       	rcall	.+16     	; 0x1310 <__divmodhi4_neg2>
    1300:	1a d0       	rcall	.+52     	; 0x1336 <__udivmodhi4>
    1302:	07 fc       	sbrc	r0, 7
    1304:	05 d0       	rcall	.+10     	; 0x1310 <__divmodhi4_neg2>
    1306:	3e f4       	brtc	.+14     	; 0x1316 <__divmodhi4_exit>

00001308 <__divmodhi4_neg1>:
    1308:	90 95       	com	r25
    130a:	81 95       	neg	r24
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	08 95       	ret

00001310 <__divmodhi4_neg2>:
    1310:	70 95       	com	r23
    1312:	61 95       	neg	r22
    1314:	7f 4f       	sbci	r23, 0xFF	; 255

00001316 <__divmodhi4_exit>:
    1316:	08 95       	ret

00001318 <__umulhisi3>:
    1318:	a2 9f       	mul	r26, r18
    131a:	b0 01       	movw	r22, r0
    131c:	b3 9f       	mul	r27, r19
    131e:	c0 01       	movw	r24, r0
    1320:	a3 9f       	mul	r26, r19
    1322:	70 0d       	add	r23, r0
    1324:	81 1d       	adc	r24, r1
    1326:	11 24       	eor	r1, r1
    1328:	91 1d       	adc	r25, r1
    132a:	b2 9f       	mul	r27, r18
    132c:	70 0d       	add	r23, r0
    132e:	81 1d       	adc	r24, r1
    1330:	11 24       	eor	r1, r1
    1332:	91 1d       	adc	r25, r1
    1334:	08 95       	ret

00001336 <__udivmodhi4>:
    1336:	aa 1b       	sub	r26, r26
    1338:	bb 1b       	sub	r27, r27
    133a:	51 e1       	ldi	r21, 0x11	; 17
    133c:	07 c0       	rjmp	.+14     	; 0x134c <__udivmodhi4_ep>

0000133e <__udivmodhi4_loop>:
    133e:	aa 1f       	adc	r26, r26
    1340:	bb 1f       	adc	r27, r27
    1342:	a6 17       	cp	r26, r22
    1344:	b7 07       	cpc	r27, r23
    1346:	10 f0       	brcs	.+4      	; 0x134c <__udivmodhi4_ep>
    1348:	a6 1b       	sub	r26, r22
    134a:	b7 0b       	sbc	r27, r23

0000134c <__udivmodhi4_ep>:
    134c:	88 1f       	adc	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	5a 95       	dec	r21
    1352:	a9 f7       	brne	.-22     	; 0x133e <__udivmodhi4_loop>
    1354:	80 95       	com	r24
    1356:	90 95       	com	r25
    1358:	bc 01       	movw	r22, r24
    135a:	cd 01       	movw	r24, r26
    135c:	08 95       	ret

0000135e <_exit>:
    135e:	f8 94       	cli

00001360 <__stop_program>:
    1360:	ff cf       	rjmp	.-2      	; 0x1360 <__stop_program>
