
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000192  00800200  00003c74  00003d08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000416  00800392  00800392  00003e9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003e9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003ecc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00003f10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007940  00000000  00000000  00004350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000208c  00000000  00000000  0000bc90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003587  00000000  00000000  0000dd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ba8  00000000  00000000  000112a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001502  00000000  00000000  00011e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000050e7  00000000  00000000  0001334e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  00018435  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
       2:	00 00       	nop
       4:	11 c1       	rjmp	.+546    	; 0x228 <__bad_interrupt>
       6:	00 00       	nop
       8:	0f c1       	rjmp	.+542    	; 0x228 <__bad_interrupt>
       a:	00 00       	nop
       c:	4f c2       	rjmp	.+1182   	; 0x4ac <__vector_3>
       e:	00 00       	nop
      10:	6b c2       	rjmp	.+1238   	; 0x4e8 <__vector_4>
      12:	00 00       	nop
      14:	87 c2       	rjmp	.+1294   	; 0x524 <__vector_5>
      16:	00 00       	nop
      18:	a3 c2       	rjmp	.+1350   	; 0x560 <__vector_6>
      1a:	00 00       	nop
      1c:	05 c1       	rjmp	.+522    	; 0x228 <__bad_interrupt>
      1e:	00 00       	nop
      20:	03 c1       	rjmp	.+518    	; 0x228 <__bad_interrupt>
      22:	00 00       	nop
      24:	01 c1       	rjmp	.+514    	; 0x228 <__bad_interrupt>
      26:	00 00       	nop
      28:	ff c0       	rjmp	.+510    	; 0x228 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fd c0       	rjmp	.+506    	; 0x228 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fb c0       	rjmp	.+502    	; 0x228 <__bad_interrupt>
      32:	00 00       	nop
      34:	f9 c0       	rjmp	.+498    	; 0x228 <__bad_interrupt>
      36:	00 00       	nop
      38:	f7 c0       	rjmp	.+494    	; 0x228 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__vector_15>
      3e:	00 00       	nop
      40:	f3 c0       	rjmp	.+486    	; 0x228 <__bad_interrupt>
      42:	00 00       	nop
      44:	f1 c0       	rjmp	.+482    	; 0x228 <__bad_interrupt>
      46:	00 00       	nop
      48:	ef c0       	rjmp	.+478    	; 0x228 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ed c0       	rjmp	.+474    	; 0x228 <__bad_interrupt>
      4e:	00 00       	nop
      50:	eb c0       	rjmp	.+470    	; 0x228 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 87 14 	jmp	0x290e	; 0x290e <__vector_21>
      58:	e7 c0       	rjmp	.+462    	; 0x228 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e5 c0       	rjmp	.+458    	; 0x228 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e3 c0       	rjmp	.+454    	; 0x228 <__bad_interrupt>
      62:	00 00       	nop
      64:	e1 c0       	rjmp	.+450    	; 0x228 <__bad_interrupt>
      66:	00 00       	nop
      68:	df c0       	rjmp	.+446    	; 0x228 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__vector_27>
      70:	db c0       	rjmp	.+438    	; 0x228 <__bad_interrupt>
      72:	00 00       	nop
      74:	d9 c0       	rjmp	.+434    	; 0x228 <__bad_interrupt>
      76:	00 00       	nop
      78:	d7 c0       	rjmp	.+430    	; 0x228 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d5 c0       	rjmp	.+426    	; 0x228 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__vector_32>
      84:	d1 c0       	rjmp	.+418    	; 0x228 <__bad_interrupt>
      86:	00 00       	nop
      88:	cf c0       	rjmp	.+414    	; 0x228 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cd c0       	rjmp	.+410    	; 0x228 <__bad_interrupt>
      8e:	00 00       	nop
      90:	cb c0       	rjmp	.+406    	; 0x228 <__bad_interrupt>
      92:	00 00       	nop
      94:	c9 c0       	rjmp	.+402    	; 0x228 <__bad_interrupt>
      96:	00 00       	nop
      98:	c7 c0       	rjmp	.+398    	; 0x228 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c5 c0       	rjmp	.+394    	; 0x228 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c3 c0       	rjmp	.+390    	; 0x228 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c1 c0       	rjmp	.+386    	; 0x228 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bf c0       	rjmp	.+382    	; 0x228 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	bd c0       	rjmp	.+378    	; 0x228 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bb c0       	rjmp	.+374    	; 0x228 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b9 c0       	rjmp	.+370    	; 0x228 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b7 c0       	rjmp	.+366    	; 0x228 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b5 c0       	rjmp	.+362    	; 0x228 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b3 c0       	rjmp	.+358    	; 0x228 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b1 c0       	rjmp	.+354    	; 0x228 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	af c0       	rjmp	.+350    	; 0x228 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ad c0       	rjmp	.+346    	; 0x228 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ab c0       	rjmp	.+342    	; 0x228 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a9 c0       	rjmp	.+338    	; 0x228 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__vector_54>
      dc:	a5 c0       	rjmp	.+330    	; 0x228 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a3 c0       	rjmp	.+326    	; 0x228 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	00 03       	mulsu	r16, r16
      e6:	ea 04       	cpc	r14, r10
      e8:	ea 04       	cpc	r14, r10
      ea:	ea 04       	cpc	r14, r10
      ec:	ea 04       	cpc	r14, r10
      ee:	ea 04       	cpc	r14, r10
      f0:	ea 04       	cpc	r14, r10
      f2:	ea 04       	cpc	r14, r10
      f4:	ea 04       	cpc	r14, r10
      f6:	ea 04       	cpc	r14, r10
      f8:	ea 04       	cpc	r14, r10
      fa:	ea 04       	cpc	r14, r10
      fc:	ea 04       	cpc	r14, r10
      fe:	ea 04       	cpc	r14, r10
     100:	ea 04       	cpc	r14, r10
     102:	ea 04       	cpc	r14, r10
     104:	ea 04       	cpc	r14, r10
     106:	17 03       	mulsu	r17, r23
     108:	34 03       	mulsu	r19, r20
     10a:	5b 03       	fmul	r21, r19
     10c:	ea 04       	cpc	r14, r10
     10e:	ea 04       	cpc	r14, r10
     110:	ea 04       	cpc	r14, r10
     112:	ea 04       	cpc	r14, r10
     114:	ea 04       	cpc	r14, r10
     116:	1f 03       	fmul	r17, r23
     118:	3c 03       	fmul	r19, r20
     11a:	63 03       	mulsu	r22, r19
     11c:	ea 04       	cpc	r14, r10
     11e:	ea 04       	cpc	r14, r10
     120:	ea 04       	cpc	r14, r10
     122:	ea 04       	cpc	r14, r10
     124:	ea 04       	cpc	r14, r10
     126:	7e 03       	fmul	r23, r22
     128:	b3 03       	fmuls	r19, r19
     12a:	c7 03       	fmuls	r20, r23
     12c:	fc 03       	fmulsu	r23, r20
     12e:	68 04       	cpc	r6, r8
     130:	ea 04       	cpc	r14, r10
     132:	ea 04       	cpc	r14, r10
     134:	ea 04       	cpc	r14, r10
     136:	86 03       	fmuls	r16, r22
     138:	bb 03       	fmulsu	r19, r19
     13a:	cf 03       	fmulsu	r20, r23
     13c:	04 04       	cpc	r0, r4
     13e:	70 04       	cpc	r7, r0
     140:	ea 04       	cpc	r14, r10
     142:	ea 04       	cpc	r14, r10
     144:	ea 04       	cpc	r14, r10
     146:	aa 04       	cpc	r10, r10
     148:	c4 04       	cpc	r12, r4
     14a:	e3 04       	cpc	r14, r3
     14c:	ea 04       	cpc	r14, r10
     14e:	ea 04       	cpc	r14, r10
     150:	ea 04       	cpc	r14, r10
     152:	ea 04       	cpc	r14, r10
     154:	ea 04       	cpc	r14, r10
     156:	b2 04       	cpc	r11, r2
     158:	cc 04       	cpc	r12, r12
     15a:	6b 0b       	sbc	r22, r27
     15c:	34 0e       	add	r3, r20
     15e:	34 0e       	add	r3, r20
     160:	34 0e       	add	r3, r20
     162:	34 0e       	add	r3, r20
     164:	34 0e       	add	r3, r20
     166:	34 0e       	add	r3, r20
     168:	34 0e       	add	r3, r20
     16a:	34 0e       	add	r3, r20
     16c:	34 0e       	add	r3, r20
     16e:	34 0e       	add	r3, r20
     170:	34 0e       	add	r3, r20
     172:	34 0e       	add	r3, r20
     174:	34 0e       	add	r3, r20
     176:	34 0e       	add	r3, r20
     178:	34 0e       	add	r3, r20
     17a:	81 0b       	sbc	r24, r17
     17c:	9b 0b       	sbc	r25, r27
     17e:	c1 0b       	sbc	r28, r17
     180:	f0 0b       	sbc	r31, r16
     182:	34 0e       	add	r3, r20
     184:	34 0e       	add	r3, r20
     186:	34 0e       	add	r3, r20
     188:	34 0e       	add	r3, r20
     18a:	34 0e       	add	r3, r20
     18c:	b8 0b       	sbc	r27, r24
     18e:	de 0b       	sbc	r29, r30
     190:	0d 0c       	add	r0, r13
     192:	34 0e       	add	r3, r20
     194:	34 0e       	add	r3, r20
     196:	34 0e       	add	r3, r20
     198:	34 0e       	add	r3, r20
     19a:	1e 0c       	add	r1, r14
     19c:	38 0c       	add	r3, r8
     19e:	71 0c       	add	r7, r1
     1a0:	bd 0c       	add	r11, r13
     1a2:	f0 0c       	add	r15, r0
     1a4:	5a 0d       	add	r21, r10
     1a6:	34 0e       	add	r3, r20
     1a8:	34 0e       	add	r3, r20
     1aa:	34 0e       	add	r3, r20
     1ac:	55 0c       	add	r5, r5
     1ae:	8e 0c       	add	r8, r14
     1b0:	da 0c       	add	r13, r10
     1b2:	0d 0d       	add	r16, r13
     1b4:	77 0d       	add	r23, r7
     1b6:	34 0e       	add	r3, r20
     1b8:	34 0e       	add	r3, r20
     1ba:	a0 0d       	add	r26, r0
     1bc:	ba 0d       	add	r27, r10
     1be:	e9 0d       	add	r30, r9
     1c0:	18 0e       	add	r1, r24
     1c2:	34 0e       	add	r3, r20
     1c4:	34 0e       	add	r3, r20
     1c6:	34 0e       	add	r3, r20
     1c8:	34 0e       	add	r3, r20
     1ca:	34 0e       	add	r3, r20
     1cc:	d7 0d       	add	r29, r7
     1ce:	06 0e       	add	r0, r22
     1d0:	51 14       	cp	r5, r1
     1d2:	54 14       	cp	r5, r4
     1d4:	57 14       	cp	r5, r7
     1d6:	5a 14       	cp	r5, r10
     1d8:	5d 14       	cp	r5, r13
     1da:	60 14       	cp	r6, r0
     1dc:	63 14       	cp	r6, r3
     1de:	66 14       	cp	r6, r6
     1e0:	69 14       	cp	r6, r9
     1e2:	6c 14       	cp	r6, r12
     1e4:	6f 14       	cp	r6, r15
     1e6:	72 14       	cp	r7, r2

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d1 e2       	ldi	r29, 0x21	; 33
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	13 e0       	ldi	r17, 0x03	; 3
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b2 e0       	ldi	r27, 0x02	; 2
     1fe:	e4 e7       	ldi	r30, 0x74	; 116
     200:	fc e3       	ldi	r31, 0x3C	; 60
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a2 39       	cpi	r26, 0x92	; 146
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	27 e0       	ldi	r18, 0x07	; 7
     214:	a2 e9       	ldi	r26, 0x92	; 146
     216:	b3 e0       	ldi	r27, 0x03	; 3
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a8 3a       	cpi	r26, 0xA8	; 168
     21e:	b2 07       	cpc	r27, r18
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	80 d7       	rcall	.+3840   	; 0x1124 <main>
     224:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <_exit>

00000228 <__bad_interrupt>:
     228:	eb ce       	rjmp	.-554    	; 0x0 <__vectors>

0000022a <__vector_15>:
uint8_t buttonsCurrentCycle;
uint16_t lastFullBits = 0;
uint8_t currentTrig;

ISR(TIMER2_OVF_vect)
{
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	2f 93       	push	r18
     236:	3f 93       	push	r19
     238:	8f 93       	push	r24
     23a:	9f 93       	push	r25

static inline void debounce()
{
	static uint8_t vcount_low = 0xFF, vcount_high = 0xFF;
	static uint8_t button_state = 0;
	uint8_t state_changed = ~BUTTON_PIN ^ button_state;
     23c:	83 b1       	in	r24, 0x03	; 3
     23e:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <__data_end>
     242:	80 95       	com	r24
     244:	38 2f       	mov	r19, r24
     246:	32 27       	eor	r19, r18
	VC_DEC_OR_SET(vcount_high, vcount_low, state_changed);
     248:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <vcount_low.1745>
     24c:	93 23       	and	r25, r19
     24e:	89 2f       	mov	r24, r25
     250:	80 95       	com	r24
     252:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <vcount_low.1745>
     256:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     25a:	93 23       	and	r25, r19
     25c:	98 27       	eor	r25, r24
     25e:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
     262:	83 23       	and	r24, r19
	state_changed &= vcount_low & vcount_high;
     264:	89 23       	and	r24, r25
	button_state ^= state_changed;
     266:	92 2f       	mov	r25, r18
     268:	98 27       	eor	r25, r24
     26a:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <__data_end>
	buttons_down |= button_state&state_changed;
     26e:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <buttons_down>
     272:	89 23       	and	r24, r25
     274:	82 2b       	or	r24, r18
     276:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <buttons_down>
	debounce();
}
     27a:	9f 91       	pop	r25
     27c:	8f 91       	pop	r24
     27e:	3f 91       	pop	r19
     280:	2f 91       	pop	r18
     282:	0f 90       	pop	r0
     284:	0f be       	out	0x3f, r0	; 63
     286:	0f 90       	pop	r0
     288:	1f 90       	pop	r1
     28a:	18 95       	reti

0000028c <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     28c:	8f ef       	ldi	r24, 0xFF	; 255
     28e:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     290:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons and Encoder buttons
	PORTB = 0B01111111;
     294:	8f e7       	ldi	r24, 0x7F	; 127
     296:	85 b9       	out	0x05, r24	; 5
     298:	08 95       	ret

0000029a <listenTrigButtons>:

}

void listenTrigButtons(Pattern *buttonCurrentPattern, Globals *currentGlobals)
{
     29a:	cf 92       	push	r12
     29c:	df 92       	push	r13
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	6c 01       	movw	r12, r24
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     2aa:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     2ae:	20 95       	com	r18
     2b0:	20 93 a3 03 	sts	0x03A3, r18	; 0x8003a3 <buttonsCurrentCycle>
	(currentGlobals->currentTrigButtons) = (buttonsCurrentCycle << 8) | (PINA^255);
     2b4:	90 b1       	in	r25, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	32 2f       	mov	r19, r18
     2ba:	22 27       	eor	r18, r18
     2bc:	90 95       	com	r25
     2be:	29 2b       	or	r18, r25
     2c0:	db 01       	movw	r26, r22
     2c2:	2d 93       	st	X+, r18
     2c4:	3c 93       	st	X, r19
	if(currentGlobals->currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     2c6:	40 91 93 03 	lds	r20, 0x0393	; 0x800393 <lastFullBits>
     2ca:	50 91 94 03 	lds	r21, 0x0394	; 0x800394 <lastFullBits+0x1>
     2ce:	24 17       	cp	r18, r20
     2d0:	35 07       	cpc	r19, r21
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <listenTrigButtons+0x3c>
     2d4:	43 c0       	rjmp	.+134    	; 0x35c <listenTrigButtons+0xc2>
     2d6:	7b 01       	movw	r14, r22
	{
		lastFullBits = currentGlobals->currentTrigButtons;
     2d8:	30 93 94 03 	sts	0x0394, r19	; 0x800394 <lastFullBits+0x1>
     2dc:	20 93 93 03 	sts	0x0393, r18	; 0x800393 <lastFullBits>
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
     2e0:	fb 01       	movw	r30, r22
     2e2:	00 81       	ld	r16, Z
     2e4:	11 81       	ldd	r17, Z+1	; 0x01
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     2e6:	c0 e0       	ldi	r28, 0x00	; 0
		{
			currentTrig = (fullBitsParse&1);
     2e8:	90 2f       	mov	r25, r16
     2ea:	91 70       	andi	r25, 0x01	; 1
     2ec:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <currentTrig>
			if(currentTrig)
     2f0:	99 23       	and	r25, r25
     2f2:	79 f1       	breq	.+94     	; 0x352 <listenTrigButtons+0xb8>
			{
				uint8_t encoderAstate = currentGlobals->menuState >> 4;
				switch (encoderAstate)
     2f4:	d7 01       	movw	r26, r14
     2f6:	16 96       	adiw	r26, 0x06	; 6
     2f8:	9c 91       	ld	r25, X
     2fa:	92 95       	swap	r25
     2fc:	9f 70       	andi	r25, 0x0F	; 15
     2fe:	91 30       	cpi	r25, 0x01	; 1
     300:	51 f0       	breq	.+20     	; 0x316 <listenTrigButtons+0x7c>
     302:	18 f0       	brcs	.+6      	; 0x30a <listenTrigButtons+0x70>
     304:	94 30       	cpi	r25, 0x04	; 4
     306:	28 f5       	brcc	.+74     	; 0x352 <listenTrigButtons+0xb8>
     308:	1a c0       	rjmp	.+52     	; 0x33e <listenTrigButtons+0xa4>
				{
	
					//for "performance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
					case 0: //performance mode
					//we trigger a sound here based on the location of bc
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     30a:	4c 2f       	mov	r20, r28
     30c:	b7 01       	movw	r22, r14
     30e:	c6 01       	movw	r24, r12
     310:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <playTrack>
					break;
     314:	1e c0       	rjmp	.+60     	; 0x352 <listenTrigButtons+0xb8>

					case 1:
					buttonCurrentPattern->trackSequence[currentGlobals->currentStep] ^= currentGlobals->currentTrigButtons;
     316:	d7 01       	movw	r26, r14
     318:	14 96       	adiw	r26, 0x04	; 4
     31a:	ec 91       	ld	r30, X
     31c:	14 97       	sbiw	r26, 0x04	; 4
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	ee 0f       	add	r30, r30
     322:	ff 1f       	adc	r31, r31
     324:	ec 0d       	add	r30, r12
     326:	fd 1d       	adc	r31, r13
     328:	e5 50       	subi	r30, 0x05	; 5
     32a:	ff 4f       	sbci	r31, 0xFF	; 255
     32c:	20 81       	ld	r18, Z
     32e:	31 81       	ldd	r19, Z+1	; 0x01
     330:	8d 91       	ld	r24, X+
     332:	9c 91       	ld	r25, X
     334:	82 27       	eor	r24, r18
     336:	93 27       	eor	r25, r19
     338:	91 83       	std	Z+1, r25	; 0x01
     33a:	80 83       	st	Z, r24
					//turn on step number, or turn off step number.
					//step sequencer mode.
					break;
     33c:	0a c0       	rjmp	.+20     	; 0x352 <listenTrigButtons+0xb8>
					//we want this functionality for both case 2 and case 3
					case 2:
					case 3:;
					//select track for sample assignment
					//uint16_t currentSample = (buttonCurrentPattern->trackSampleMSB[bc]<<8)|(buttonCurrentPattern->trackSampleLSB[bc]);
					currentGlobals->currentTrack = bc;
     33e:	f7 01       	movw	r30, r14
     340:	c5 83       	std	Z+5, r28	; 0x05
					currentGlobals->valueChangeFlag |=(1<<triggerChange);
     342:	82 85       	ldd	r24, Z+10	; 0x0a
     344:	82 60       	ori	r24, 0x02	; 2
     346:	82 87       	std	Z+10, r24	; 0x0a
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     348:	4c 2f       	mov	r20, r28
     34a:	b7 01       	movw	r22, r14
     34c:	c6 01       	movw	r24, r12
     34e:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <playTrack>
					default:
					//this should be the same as case 0;
					break;
				}
			}
			fullBitsParse = fullBitsParse>>1;
     352:	16 95       	lsr	r17
     354:	07 95       	ror	r16
	{
		lastFullBits = currentGlobals->currentTrigButtons;
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     356:	cf 5f       	subi	r28, 0xFF	; 255
     358:	c0 31       	cpi	r28, 0x10	; 16
     35a:	31 f6       	brne	.-116    	; 0x2e8 <listenTrigButtons+0x4e>
				}
			}
			fullBitsParse = fullBitsParse>>1;
		}
	}
}
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	ff 90       	pop	r15
     364:	ef 90       	pop	r14
     366:	df 90       	pop	r13
     368:	cf 90       	pop	r12
     36a:	08 95       	ret

0000036c <listenGPButtons>:

void listenGPButtons(Pattern currentPattern, Globals *currentGlobals) //may need to be a pointer
{
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	cc 57       	subi	r28, 0x7C	; 124
     37c:	de 4f       	sbci	r29, 0xFE	; 254
     37e:	08 81       	ld	r16, Y
     380:	19 81       	ldd	r17, Y+1	; 0x01
     382:	c4 58       	subi	r28, 0x84	; 132
     384:	d1 40       	sbci	r29, 0x01	; 1

	if(button_down(1 << PB5))
     386:	80 e2       	ldi	r24, 0x20	; 32
     388:	77 d0       	rcall	.+238    	; 0x478 <button_down>
     38a:	88 23       	and	r24, r24
     38c:	41 f1       	breq	.+80     	; 0x3de <listenGPButtons+0x72>
	{ //top encoder button
		if(currentGlobals->menuState>>4==3)
     38e:	f8 01       	movw	r30, r16
     390:	86 81       	ldd	r24, Z+6	; 0x06
     392:	82 95       	swap	r24
     394:	8f 70       	andi	r24, 0x0F	; 15
     396:	83 30       	cpi	r24, 0x03	; 3
     398:	21 f4       	brne	.+8      	; 0x3a2 <listenGPButtons+0x36>
		{
			globalWrite(currentGlobals);
     39a:	c8 01       	movw	r24, r16
     39c:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <globalWrite>
     3a0:	1e c0       	rjmp	.+60     	; 0x3de <listenGPButtons+0x72>
		}else
		{
			eepromSavePattern(currentPattern, currentGlobals->currentPatternNumber);
     3a2:	f8 01       	movw	r30, r16
     3a4:	83 81       	ldd	r24, Z+3	; 0x03
     3a6:	8f 93       	push	r24
     3a8:	8d b7       	in	r24, 0x3d	; 61
     3aa:	9e b7       	in	r25, 0x3e	; 62
     3ac:	8b 57       	subi	r24, 0x7B	; 123
     3ae:	91 40       	sbci	r25, 0x01	; 1
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	9e bf       	out	0x3e, r25	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	8d bf       	out	0x3d, r24	; 61
     3ba:	ad b7       	in	r26, 0x3d	; 61
     3bc:	be b7       	in	r27, 0x3e	; 62
     3be:	11 96       	adiw	r26, 0x01	; 1
     3c0:	8b e7       	ldi	r24, 0x7B	; 123
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	fe 01       	movw	r30, r28
     3c6:	39 96       	adiw	r30, 0x09	; 9
     3c8:	01 90       	ld	r0, Z+
     3ca:	0d 92       	st	X+, r0
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <listenGPButtons+0x5c>
     3d0:	0e 94 3e 18 	call	0x307c	; 0x307c <eepromSavePattern>
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	de bf       	out	0x3e, r29	; 62
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	cd bf       	out	0x3d, r28	; 61
		}
		
	}

	uint8_t encoderSwitchMask = 0b00001000;
	if(button_down(1<<PB6))
     3de:	80 e4       	ldi	r24, 0x40	; 64
     3e0:	4b d0       	rcall	.+150    	; 0x478 <button_down>
     3e2:	88 23       	and	r24, r24
     3e4:	51 f0       	breq	.+20     	; 0x3fa <listenGPButtons+0x8e>
		{//bottom encoder button
			uint8_t encoderBCheck = currentGlobals->menuState&encoderSwitchMask;
     3e6:	f8 01       	movw	r30, r16
     3e8:	86 81       	ldd	r24, Z+6	; 0x06
			if(encoderBCheck)
     3ea:	83 ff       	sbrs	r24, 3
     3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <listenGPButtons+0x88>
			{
				currentGlobals->menuState &=0b11110111;//turn off the encoderBFlag
     3ee:	87 7f       	andi	r24, 0xF7	; 247
     3f0:	86 83       	std	Z+6, r24	; 0x06
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <listenGPButtons+0x8e>

			}else
			{
				currentGlobals->menuState |=0b00001000; //turn on the encoderBFlag bit
     3f4:	88 60       	ori	r24, 0x08	; 8
     3f6:	f8 01       	movw	r30, r16
     3f8:	86 83       	std	Z+6, r24	; 0x06
			}
		}
	uint8_t playButtonMask = 0b0000001; //we could probably make a define for both of these masks.
	uint8_t playStateCheck = currentGlobals->playState & playButtonMask;
     3fa:	f8 01       	movw	r30, r16
	if(button_down(1<<PB4))
     3fc:	f7 80       	ldd	r15, Z+7	; 0x07
     3fe:	80 e1       	ldi	r24, 0x10	; 16
     400:	3b d0       	rcall	.+118    	; 0x478 <button_down>
     402:	88 23       	and	r24, r24
     404:	71 f0       	breq	.+28     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	{
		if(playStateCheck)
     406:	f0 fe       	sbrs	r15, 0
     408:	06 c0       	rjmp	.+12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		{
			currentGlobals->playState=0; //playstate is on, turn it off
     40a:	f8 01       	movw	r30, r16
     40c:	17 82       	std	Z+7, r1	; 0x07
			currentGlobals->currentGPButtons &=(~0x20); //turn the first bit
     40e:	82 81       	ldd	r24, Z+2	; 0x02
     410:	8f 7d       	andi	r24, 0xDF	; 223
     412:	82 83       	std	Z+2, r24	; 0x02
     414:	06 c0       	rjmp	.+12     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			
		}else
		{
			currentGlobals->playState=1;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	f8 01       	movw	r30, r16
     41a:	87 83       	std	Z+7, r24	; 0x07
			currentGlobals->currentGPButtons |= 0x20; //turn on the first bit
     41c:	82 81       	ldd	r24, Z+2	; 0x02
     41e:	80 62       	ori	r24, 0x20	; 32
     420:	82 83       	std	Z+2, r24	; 0x02
		}

	} //not sure which button this is
	uint8_t trackButtonMask = 0b00000001;
	uint8_t trackStateCheck = (currentGlobals->buttonSwitchFlag) & trackButtonMask;
     422:	f8 01       	movw	r30, r16
	if(button_down(1<<PB0))
     424:	f1 84       	ldd	r15, Z+9	; 0x09
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	27 d0       	rcall	.+78     	; 0x478 <button_down>
     42a:	88 23       	and	r24, r24
     42c:	71 f0       	breq	.+28     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	{
		if(trackStateCheck)
     42e:	f0 fe       	sbrs	r15, 0
     430:	06 c0       	rjmp	.+12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		{
			currentGlobals->buttonSwitchFlag = 0;
     432:	f8 01       	movw	r30, r16
     434:	11 86       	std	Z+9, r1	; 0x09
			currentGlobals->currentGPButtons &=(~0x02);
     436:	82 81       	ldd	r24, Z+2	; 0x02
     438:	8d 7f       	andi	r24, 0xFD	; 253
     43a:	82 83       	std	Z+2, r24	; 0x02
     43c:	06 c0       	rjmp	.+12     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		}else
		{
			currentGlobals->buttonSwitchFlag = 1;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	f8 01       	movw	r30, r16
     442:	81 87       	std	Z+9, r24	; 0x09
			currentGlobals->currentGPButtons |=0x02;
     444:	82 81       	ldd	r24, Z+2	; 0x02
     446:	82 60       	ori	r24, 0x02	; 2
		}
	}
	uint8_t fineButtonMask = 4;
	uint8_t fineStateCheck = (currentGlobals->currentGPButtons) & fineButtonMask;
     448:	82 83       	std	Z+2, r24	; 0x02
     44a:	f8 01       	movw	r30, r16
	if(button_down(1<<PB1))
     44c:	f2 80       	ldd	r15, Z+2	; 0x02
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	13 d0       	rcall	.+38     	; 0x478 <button_down>
     452:	88 23       	and	r24, r24
     454:	59 f0       	breq	.+22     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	{		
		if(fineStateCheck)
     456:	f2 fe       	sbrs	r15, 2
     458:	05 c0       	rjmp	.+10     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		{
			
			currentGlobals->currentGPButtons &=(~0x04);
     45a:	f8 01       	movw	r30, r16
     45c:	82 81       	ldd	r24, Z+2	; 0x02
     45e:	8b 7f       	andi	r24, 0xFB	; 251
     460:	82 83       	std	Z+2, r24	; 0x02
     462:	04 c0       	rjmp	.+8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		}else
		{
			currentGlobals->currentGPButtons |=0x04;
     464:	f8 01       	movw	r30, r16
     466:	82 81       	ldd	r24, Z+2	; 0x02
     468:	84 60       	ori	r24, 0x04	; 4
     46a:	82 83       	std	Z+2, r24	; 0x02
		}
		
	}
}
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	ff 90       	pop	r15
     476:	08 95       	ret

00000478 <button_down>:

volatile uint8_t buttons_down;
uint8_t button_down(uint8_t button_mask)
{
	//I should probably check out what this is.
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     478:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     47a:	f8 94       	cli
	{
		button_mask &= buttons_down;
     47c:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <buttons_down>
     480:	89 23       	and	r24, r25
		buttons_down ^= button_mask;
     482:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <buttons_down>
     486:	98 27       	eor	r25, r24
     488:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <buttons_down>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     48c:	2f bf       	out	0x3f, r18	; 63
	}
	
	return button_mask;
     48e:	08 95       	ret

00000490 <initEncoders>:
	
	//Interrupt pins - 2,3,4,5
	
	
	//setup rising edge detection on Int pins 2 and 3 (would maybe want all pin states if this doesn't work).
	EICRA |=(1<<ISC31)|(1<<ISC30)|(1 << ISC21)|(1 << ISC20); 
     490:	e9 e6       	ldi	r30, 0x69	; 105
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	80 81       	ld	r24, Z
     496:	80 6f       	ori	r24, 0xF0	; 240
     498:	80 83       	st	Z, r24
	
	//same setup on pins 4 and 5
	EICRB |=(1<<ISC51)|(1<<ISC50)|(1 << ISC41)|(1 << ISC40);
     49a:	ea e6       	ldi	r30, 0x6A	; 106
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	8f 60       	ori	r24, 0x0F	; 15
     4a2:	80 83       	st	Z, r24
	
	//enable all 4 interrupts through masking
	EIMSK |=(1<<INT2)|(1<<INT3)|(1<<INT4)|(1<<INT5);
     4a4:	8d b3       	in	r24, 0x1d	; 29
     4a6:	8c 63       	ori	r24, 0x3C	; 60
     4a8:	8d bb       	out	0x1d, r24	; 29
     4aa:	08 95       	ret

000004ac <__vector_3>:


}
 
ISR(INT2_vect)
{
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1
     4b6:	8f 93       	push	r24
     4b8:	9f 93       	push	r25
	if(0b00000010&encoderPortStates)//this means Pin 2 is coming after pin 3
     4ba:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <encoderPortStates>
     4be:	81 ff       	sbrs	r24, 1
     4c0:	09 c0       	rjmp	.+18     	; 0x4d4 <__vector_3+0x28>
	{
		bottomEncoderValue--;
     4c2:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <bottomEncoderValue>
     4c6:	91 50       	subi	r25, 0x01	; 1
     4c8:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <bottomEncoderValue>
		encoderPortStates&=0b00001100; //reset our two pins to low. 
     4cc:	8c 70       	andi	r24, 0x0C	; 12
     4ce:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <encoderPortStates>
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <__vector_3+0x2e>
	}
	else
	{
		encoderPortStates|=0b00001101; //we want to set bit 1. 
     4d4:	8d 60       	ori	r24, 0x0D	; 13
     4d6:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <encoderPortStates>
	}
}
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <__vector_4>:

ISR(INT3_vect)
{
     4e8:	1f 92       	push	r1
     4ea:	0f 92       	push	r0
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	0f 92       	push	r0
     4f0:	11 24       	eor	r1, r1
     4f2:	8f 93       	push	r24
     4f4:	9f 93       	push	r25
	if(0b00000001&encoderPortStates)//this means Pin 3 is coming after pin 2
     4f6:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <encoderPortStates>
     4fa:	80 ff       	sbrs	r24, 0
     4fc:	09 c0       	rjmp	.+18     	; 0x510 <__vector_4+0x28>
	{
		bottomEncoderValue++;
     4fe:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <bottomEncoderValue>
     502:	9f 5f       	subi	r25, 0xFF	; 255
     504:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <bottomEncoderValue>
		encoderPortStates&=0b00001100; //reset our two pins to low.
     508:	8c 70       	andi	r24, 0x0C	; 12
     50a:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <encoderPortStates>
     50e:	03 c0       	rjmp	.+6      	; 0x516 <__vector_4+0x2e>
	}
	else
	{
		encoderPortStates|=0b00001110; //we want to set bit 2.
     510:	8e 60       	ori	r24, 0x0E	; 14
     512:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <encoderPortStates>
	}
}
     516:	9f 91       	pop	r25
     518:	8f 91       	pop	r24
     51a:	0f 90       	pop	r0
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	0f 90       	pop	r0
     520:	1f 90       	pop	r1
     522:	18 95       	reti

00000524 <__vector_5>:

ISR(INT4_vect)
{
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
	if(0b00001000&encoderPortStates)//this means Pin 4 is coming after pin 5
     532:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <encoderPortStates>
     536:	83 ff       	sbrs	r24, 3
     538:	09 c0       	rjmp	.+18     	; 0x54c <__vector_5+0x28>
	{
		topEncoderValue++;
     53a:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <topEncoderValue>
     53e:	9f 5f       	subi	r25, 0xFF	; 255
     540:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <topEncoderValue>
		encoderPortStates&=0b00000011; //reset our two pins to low.
     544:	83 70       	andi	r24, 0x03	; 3
     546:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <encoderPortStates>
     54a:	03 c0       	rjmp	.+6      	; 0x552 <__vector_5+0x2e>
	}
	else
	{
		encoderPortStates|=0b00000111; //we want to set bit three.
     54c:	87 60       	ori	r24, 0x07	; 7
     54e:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <encoderPortStates>
	}
}
     552:	9f 91       	pop	r25
     554:	8f 91       	pop	r24
     556:	0f 90       	pop	r0
     558:	0f be       	out	0x3f, r0	; 63
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <__vector_6>:

ISR(INT5_vect)
{
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	8f 93       	push	r24
     56c:	9f 93       	push	r25
	if(0b00000100&encoderPortStates)//this means Pin 3 is coming after pin 2
     56e:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <encoderPortStates>
     572:	82 ff       	sbrs	r24, 2
     574:	09 c0       	rjmp	.+18     	; 0x588 <__vector_6+0x28>
	{
		topEncoderValue--;
     576:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <topEncoderValue>
     57a:	91 50       	subi	r25, 0x01	; 1
     57c:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <topEncoderValue>
		encoderPortStates&=0b00000011; //reset our two pins to low.
     580:	83 70       	andi	r24, 0x03	; 3
     582:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <encoderPortStates>
     586:	03 c0       	rjmp	.+6      	; 0x58e <__vector_6+0x2e>
	}
	else
	{
		encoderPortStates|=0b00001011; //we want to set bit two.
     588:	8b 60       	ori	r24, 0x0B	; 11
     58a:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <encoderPortStates>
	}
}
     58e:	9f 91       	pop	r25
     590:	8f 91       	pop	r24
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti

0000059c <listenEncoders>:


void listenEncoders(Pattern *currentPattern, Globals *currentGlobals)
{
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	9c 01       	movw	r18, r24
     5a2:	fb 01       	movw	r30, r22
	if(topEncoderValue!=topEncoderLastValue)
     5a4:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <topEncoderValue>
     5a8:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <topEncoderLastValue>
     5ac:	98 17       	cp	r25, r24
     5ae:	79 f0       	breq	.+30     	; 0x5ce <listenEncoders+0x32>
	{
		currentGlobals->menuState = ((topEncoderValue%4)<<4);
     5b0:	89 2f       	mov	r24, r25
     5b2:	83 70       	andi	r24, 0x03	; 3
     5b4:	82 95       	swap	r24
     5b6:	80 7f       	andi	r24, 0xF0	; 240
     5b8:	86 83       	std	Z+6, r24	; 0x06
		bottomEncoderValue = 0; 
     5ba:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <bottomEncoderValue>
		bottomEncoderLastValue = 0; 
     5be:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <bottomEncoderLastValue>
		currentGlobals->valueChangeFlag |= (1<<encoderChange);
     5c2:	82 85       	ldd	r24, Z+10	; 0x0a
     5c4:	81 60       	ori	r24, 0x01	; 1
     5c6:	82 87       	std	Z+10, r24	; 0x0a
		topEncoderLastValue = topEncoderValue;
     5c8:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <topEncoderLastValue>
     5cc:	07 c2       	rjmp	.+1038   	; 0x9dc <listenEncoders+0x440>
		//This seems to fix a bug where when going into performance mode, patternNumber is decremented.
		//may not be the best solution.
		//return; 
	}
	
	if(bottomEncoderValue!=bottomEncoderLastValue)
     5ce:	a0 91 98 03 	lds	r26, 0x0398	; 0x800398 <bottomEncoderValue>
     5d2:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <bottomEncoderLastValue>
     5d6:	a8 17       	cp	r26, r24
     5d8:	09 f4       	brne	.+2      	; 0x5dc <listenEncoders+0x40>
     5da:	00 c2       	rjmp	.+1024   	; 0x9dc <listenEncoders+0x440>
	{
		 uint8_t menuSub = bottomEncoderValue - bottomEncoderLastValue;
     5dc:	a8 1b       	sub	r26, r24
		 currentGlobals->valueChangeFlag |= (1<<encoderChange);
     5de:	92 85       	ldd	r25, Z+10	; 0x0a
     5e0:	91 60       	ori	r25, 0x01	; 1
     5e2:	92 87       	std	Z+10, r25	; 0x0a
		 			//if this value is negative, we increase the menu.
		 			//if positive, we decrement the menu.
		switch(currentGlobals->menuState)
     5e4:	46 81       	ldd	r20, Z+6	; 0x06
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	4b 33       	cpi	r20, 0x3B	; 59
     5ea:	51 05       	cpc	r21, r1
     5ec:	08 f0       	brcs	.+2      	; 0x5f0 <listenEncoders+0x54>
     5ee:	f2 c1       	rjmp	.+996    	; 0x9d4 <listenEncoders+0x438>
     5f0:	ef 01       	movw	r28, r30
     5f2:	fa 01       	movw	r30, r20
     5f4:	88 27       	eor	r24, r24
     5f6:	ee 58       	subi	r30, 0x8E	; 142
     5f8:	ff 4f       	sbci	r31, 0xFF	; 255
     5fa:	8f 4f       	sbci	r24, 0xFF	; 255
     5fc:	0c 94 bc 1d 	jmp	0x3b78	; 0x3b78 <__tablejump2__>
		{
			case PreformanceModeInit:
			if(menuSub==1)
     600:	a1 30       	cpi	r26, 0x01	; 1
     602:	41 f4       	brne	.+16     	; 0x614 <listenEncoders+0x78>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     604:	8b 81       	ldd	r24, Y+3	; 0x03
     606:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     608:	11 f0       	breq	.+4      	; 0x60e <listenEncoders+0x72>
		switch(currentGlobals->menuState)
		{
			case PreformanceModeInit:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     60a:	8b 83       	std	Y+3, r24	; 0x03
     60c:	0b c0       	rjmp	.+22     	; 0x624 <listenEncoders+0x88>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     60e:	8f ef       	ldi	r24, 0xFF	; 255
     610:	8b 83       	std	Y+3, r24	; 0x03
     612:	08 c0       	rjmp	.+16     	; 0x624 <listenEncoders+0x88>
				}
				
			}else if(menuSub==255) //we don't want to hit this when switching menus after changing from the sequencer. 
     614:	af 3f       	cpi	r26, 0xFF	; 255
     616:	31 f4       	brne	.+12     	; 0x624 <listenEncoders+0x88>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     618:	8b 81       	ldd	r24, Y+3	; 0x03
     61a:	81 50       	subi	r24, 0x01	; 1
     61c:	10 f0       	brcs	.+4      	; 0x622 <listenEncoders+0x86>
     61e:	8b 83       	std	Y+3, r24	; 0x03
     620:	01 c0       	rjmp	.+2      	; 0x624 <listenEncoders+0x88>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     622:	1b 82       	std	Y+3, r1	; 0x03
				}
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     624:	6b 81       	ldd	r22, Y+3	; 0x03
     626:	c9 01       	movw	r24, r18
     628:	0e 94 2b 1a 	call	0x3456	; 0x3456 <eepromLoadPattern>
			break;
     62c:	d3 c1       	rjmp	.+934    	; 0x9d4 <listenEncoders+0x438>
			
			case SequencerMenuArrow1:			
			if(menuSub==1)
     62e:	a1 30       	cpi	r26, 0x01	; 1
     630:	19 f4       	brne	.+6      	; 0x638 <listenEncoders+0x9c>
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     632:	83 e1       	ldi	r24, 0x13	; 19
     634:	8e 83       	std	Y+6, r24	; 0x06
     636:	ce c1       	rjmp	.+924    	; 0x9d4 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     638:	82 e1       	ldi	r24, 0x12	; 18
     63a:	8e 83       	std	Y+6, r24	; 0x06
     63c:	cb c1       	rjmp	.+918    	; 0x9d4 <listenEncoders+0x438>
			}
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
     63e:	a1 30       	cpi	r26, 0x01	; 1
     640:	41 f4       	brne	.+16     	; 0x652 <listenEncoders+0xb6>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     642:	8b 81       	ldd	r24, Y+3	; 0x03
     644:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     646:	11 f0       	breq	.+4      	; 0x64c <listenEncoders+0xb0>
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     648:	8b 83       	std	Y+3, r24	; 0x03
     64a:	09 c0       	rjmp	.+18     	; 0x65e <listenEncoders+0xc2>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     64c:	8f ef       	ldi	r24, 0xFF	; 255
     64e:	8b 83       	std	Y+3, r24	; 0x03
     650:	06 c0       	rjmp	.+12     	; 0x65e <listenEncoders+0xc2>
				}
		
			}else
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     652:	8b 81       	ldd	r24, Y+3	; 0x03
     654:	81 50       	subi	r24, 0x01	; 1
     656:	10 f0       	brcs	.+4      	; 0x65c <listenEncoders+0xc0>
     658:	8b 83       	std	Y+3, r24	; 0x03
     65a:	01 c0       	rjmp	.+2      	; 0x65e <listenEncoders+0xc2>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     65c:	1b 82       	std	Y+3, r1	; 0x03
				}	
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     65e:	6b 81       	ldd	r22, Y+3	; 0x03
     660:	c9 01       	movw	r24, r18
     662:	0e 94 2b 1a 	call	0x3456	; 0x3456 <eepromLoadPattern>
			//this keeps the knob reads that will happen right after the eeprom load to write over the loaded values.
			//Now when you load a pattern, the saved positions of the knobs are unchanged until you turn a knob. 
			break;
     666:	b6 c1       	rjmp	.+876    	; 0x9d4 <listenEncoders+0x438>
			
			case SequencerMenuArrow2:
			if(menuSub==1)
     668:	a1 30       	cpi	r26, 0x01	; 1
     66a:	19 f4       	brne	.+6      	; 0x672 <listenEncoders+0xd6>
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     66c:	81 e1       	ldi	r24, 0x11	; 17
     66e:	8e 83       	std	Y+6, r24	; 0x06
     670:	b1 c1       	rjmp	.+866    	; 0x9d4 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     672:	83 e1       	ldi	r24, 0x13	; 19
     674:	8e 83       	std	Y+6, r24	; 0x06
     676:	ae c1       	rjmp	.+860    	; 0x9d4 <listenEncoders+0x438>
			}
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
     678:	a1 30       	cpi	r26, 0x01	; 1
     67a:	79 f4       	brne	.+30     	; 0x69a <listenEncoders+0xfe>
			{
				currentPattern->numSteps++;
     67c:	f9 01       	movw	r30, r18
     67e:	e6 53       	subi	r30, 0x36	; 54
     680:	ff 4f       	sbci	r31, 0xFF	; 255
     682:	90 81       	ld	r25, Z
     684:	9f 5f       	subi	r25, 0xFF	; 255
				if(currentPattern->numSteps>64)
     686:	91 34       	cpi	r25, 0x41	; 65
     688:	10 f4       	brcc	.+4      	; 0x68e <listenEncoders+0xf2>
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
			{
				currentPattern->numSteps++;
     68a:	90 83       	st	Z, r25
     68c:	a3 c1       	rjmp	.+838    	; 0x9d4 <listenEncoders+0x438>
				if(currentPattern->numSteps>64)
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
     68e:	f9 01       	movw	r30, r18
     690:	e6 53       	subi	r30, 0x36	; 54
     692:	ff 4f       	sbci	r31, 0xFF	; 255
     694:	80 e4       	ldi	r24, 0x40	; 64
     696:	80 83       	st	Z, r24
     698:	9d c1       	rjmp	.+826    	; 0x9d4 <listenEncoders+0x438>
				}
			}else
			{
				currentPattern->numSteps--;
     69a:	f9 01       	movw	r30, r18
     69c:	e6 53       	subi	r30, 0x36	; 54
     69e:	ff 4f       	sbci	r31, 0xFF	; 255
     6a0:	90 81       	ld	r25, Z
     6a2:	91 50       	subi	r25, 0x01	; 1
				if(currentPattern->numSteps<1)
     6a4:	11 f0       	breq	.+4      	; 0x6aa <listenEncoders+0x10e>
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
				}
			}else
			{
				currentPattern->numSteps--;
     6a6:	90 83       	st	Z, r25
     6a8:	95 c1       	rjmp	.+810    	; 0x9d4 <listenEncoders+0x438>
				if(currentPattern->numSteps<1)
				{//we can't have a 0 step pattern. 
					currentPattern->numSteps=1;
     6aa:	f9 01       	movw	r30, r18
     6ac:	e6 53       	subi	r30, 0x36	; 54
     6ae:	ff 4f       	sbci	r31, 0xFF	; 255
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	80 83       	st	Z, r24
     6b4:	8f c1       	rjmp	.+798    	; 0x9d4 <listenEncoders+0x438>
				}
			}
			break;
			
			case SequencerMenuArrow3:;
			if(menuSub==1)
     6b6:	a1 30       	cpi	r26, 0x01	; 1
     6b8:	19 f4       	brne	.+6      	; 0x6c0 <listenEncoders+0x124>
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     6ba:	82 e1       	ldi	r24, 0x12	; 18
     6bc:	8e 83       	std	Y+6, r24	; 0x06
     6be:	8a c1       	rjmp	.+788    	; 0x9d4 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     6c0:	81 e1       	ldi	r24, 0x11	; 17
     6c2:	8e 83       	std	Y+6, r24	; 0x06
     6c4:	87 c1       	rjmp	.+782    	; 0x9d4 <listenEncoders+0x438>
			}
			break;
			
			case SequencerMenuArrow3Select:
			//change current step number
			if(menuSub==1)
     6c6:	a1 30       	cpi	r26, 0x01	; 1
     6c8:	69 f4       	brne	.+26     	; 0x6e4 <listenEncoders+0x148>
			{
				currentGlobals->currentStep++;
     6ca:	9c 81       	ldd	r25, Y+4	; 0x04
     6cc:	9f 5f       	subi	r25, 0xFF	; 255
     6ce:	9c 83       	std	Y+4, r25	; 0x04
				if(currentGlobals->currentStep>=currentPattern->numSteps)
     6d0:	f9 01       	movw	r30, r18
     6d2:	e6 53       	subi	r30, 0x36	; 54
     6d4:	ff 4f       	sbci	r31, 0xFF	; 255
     6d6:	80 81       	ld	r24, Z
     6d8:	98 17       	cp	r25, r24
     6da:	08 f4       	brcc	.+2      	; 0x6de <listenEncoders+0x142>
     6dc:	7b c1       	rjmp	.+758    	; 0x9d4 <listenEncoders+0x438>
				{//our ceiling is the maximum number of steps.
					currentGlobals->currentStep=(currentPattern->numSteps)-1;
     6de:	81 50       	subi	r24, 0x01	; 1
     6e0:	8c 83       	std	Y+4, r24	; 0x04
     6e2:	78 c1       	rjmp	.+752    	; 0x9d4 <listenEncoders+0x438>
				}
			}else
			{
				currentGlobals->currentStep--;
     6e4:	9c 81       	ldd	r25, Y+4	; 0x04
     6e6:	91 50       	subi	r25, 0x01	; 1
     6e8:	9c 83       	std	Y+4, r25	; 0x04
				if(currentGlobals->currentStep>currentPattern->numSteps)
     6ea:	f9 01       	movw	r30, r18
     6ec:	e6 53       	subi	r30, 0x36	; 54
     6ee:	ff 4f       	sbci	r31, 0xFF	; 255
     6f0:	80 81       	ld	r24, Z
     6f2:	89 17       	cp	r24, r25
     6f4:	08 f0       	brcs	.+2      	; 0x6f8 <listenEncoders+0x15c>
     6f6:	6e c1       	rjmp	.+732    	; 0x9d4 <listenEncoders+0x438>
				{//do no write notes to step 0.
					currentGlobals->currentStep=0;
     6f8:	1c 82       	std	Y+4, r1	; 0x04
     6fa:	6c c1       	rjmp	.+728    	; 0x9d4 <listenEncoders+0x438>
				}				
			}
			break;
			
			case TrackMenuArrow1:;
			if(menuSub==1)
     6fc:	a1 30       	cpi	r26, 0x01	; 1
     6fe:	19 f4       	brne	.+6      	; 0x706 <listenEncoders+0x16a>
			{
				currentGlobals->menuState = TrackMenuArrow5;
     700:	85 e2       	ldi	r24, 0x25	; 37
     702:	8e 83       	std	Y+6, r24	; 0x06
     704:	67 c1       	rjmp	.+718    	; 0x9d4 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow2;
     706:	82 e2       	ldi	r24, 0x22	; 34
     708:	8e 83       	std	Y+6, r24	; 0x06
     70a:	64 c1       	rjmp	.+712    	; 0x9d4 <listenEncoders+0x438>
			}
			break;
			
			case TrackMenuArrow1Select:;
			uint16_t currentSample = ((currentPattern->trackSampleMSB[currentGlobals->currentTrack])<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     70c:	8d 81       	ldd	r24, Y+5	; 0x05
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	b9 01       	movw	r22, r18
     712:	68 0f       	add	r22, r24
     714:	79 1f       	adc	r23, r25
     716:	fb 01       	movw	r30, r22
     718:	e8 56       	subi	r30, 0x68	; 104
     71a:	ff 4f       	sbci	r31, 0xFF	; 255
     71c:	40 81       	ld	r20, Z
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	54 2f       	mov	r21, r20
     722:	44 27       	eor	r20, r20
     724:	70 96       	adiw	r30, 0x10	; 16
     726:	60 81       	ld	r22, Z
     728:	46 2b       	or	r20, r22
			if(menuSub==1)
     72a:	a1 30       	cpi	r26, 0x01	; 1
     72c:	49 f4       	brne	.+18     	; 0x740 <listenEncoders+0x1a4>
     72e:	4f 5f       	subi	r20, 0xFF	; 255
     730:	5f 4f       	sbci	r21, 0xFF	; 255
     732:	41 30       	cpi	r20, 0x01	; 1
     734:	60 e1       	ldi	r22, 0x10	; 16
     736:	56 07       	cpc	r21, r22
     738:	40 f0       	brcs	.+16     	; 0x74a <listenEncoders+0x1ae>
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	50 e1       	ldi	r21, 0x10	; 16
     73e:	05 c0       	rjmp	.+10     	; 0x74a <listenEncoders+0x1ae>
				{//maximum number of indexable samples.
					currentSample=4096;
				}
			}else
			{//no samples in space 0.
				currentSample--;
     740:	41 50       	subi	r20, 0x01	; 1
     742:	51 09       	sbc	r21, r1
				if(currentSample<1)
     744:	11 f4       	brne	.+4      	; 0x74a <listenEncoders+0x1ae>
				{
					currentSample=1;
     746:	41 e0       	ldi	r20, 0x01	; 1
     748:	50 e0       	ldi	r21, 0x00	; 0
				}
			}
			currentPattern->trackSampleLSB[currentGlobals->currentTrack] = (currentSample&0x00FF);//we want to lob off the top 8 bits, just in case. May be unnecessary.
     74a:	82 0f       	add	r24, r18
     74c:	93 1f       	adc	r25, r19
     74e:	fc 01       	movw	r30, r24
     750:	e8 55       	subi	r30, 0x58	; 88
     752:	ff 4f       	sbci	r31, 0xFF	; 255
     754:	40 83       	st	Z, r20
			currentPattern->trackSampleMSB[currentGlobals->currentTrack] = (currentSample>>8); 
     756:	8d 81       	ldd	r24, Y+5	; 0x05
     758:	28 0f       	add	r18, r24
     75a:	31 1d       	adc	r19, r1
     75c:	f9 01       	movw	r30, r18
     75e:	e8 56       	subi	r30, 0x68	; 104
     760:	ff 4f       	sbci	r31, 0xFF	; 255
     762:	50 83       	st	Z, r21
			break;
     764:	37 c1       	rjmp	.+622    	; 0x9d4 <listenEncoders+0x438>
			
			case TrackMenuArrow2:
			if(menuSub==1)
     766:	a1 30       	cpi	r26, 0x01	; 1
     768:	19 f4       	brne	.+6      	; 0x770 <listenEncoders+0x1d4>
			{
				currentGlobals->menuState = TrackMenuArrow1;
     76a:	81 e2       	ldi	r24, 0x21	; 33
     76c:	8e 83       	std	Y+6, r24	; 0x06
     76e:	32 c1       	rjmp	.+612    	; 0x9d4 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow3;
     770:	83 e2       	ldi	r24, 0x23	; 35
     772:	8e 83       	std	Y+6, r24	; 0x06
     774:	2f c1       	rjmp	.+606    	; 0x9d4 <listenEncoders+0x438>
			
			case TrackMenuArrow2Select:
			//change play mode of currently selected track
			//since we only have two play modes currently,
			//we only need to flip the play mode.
			currentPattern->trackPlayMode[currentGlobals->currentTrack] = (!(currentPattern->trackPlayMode[currentGlobals->currentTrack]))&(0b00000001);
     776:	8d 81       	ldd	r24, Y+5	; 0x05
     778:	28 0f       	add	r18, r24
     77a:	31 1d       	adc	r19, r1
     77c:	f9 01       	movw	r30, r18
     77e:	e8 57       	subi	r30, 0x78	; 120
     780:	ff 4f       	sbci	r31, 0xFF	; 255
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	90 81       	ld	r25, Z
     786:	91 11       	cpse	r25, r1
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	80 83       	st	Z, r24
			//flip all bits, mask for first bit. 
			break;
     78c:	23 c1       	rjmp	.+582    	; 0x9d4 <listenEncoders+0x438>
			
			case TrackMenuArrow3:
			if(menuSub==1)
     78e:	a1 30       	cpi	r26, 0x01	; 1
     790:	19 f4       	brne	.+6      	; 0x798 <listenEncoders+0x1fc>
			{
				currentGlobals->menuState = TrackMenuArrow2;
     792:	82 e2       	ldi	r24, 0x22	; 34
     794:	8e 83       	std	Y+6, r24	; 0x06
     796:	1e c1       	rjmp	.+572    	; 0x9d4 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow4;
     798:	84 e2       	ldi	r24, 0x24	; 36
     79a:	8e 83       	std	Y+6, r24	; 0x06
     79c:	1b c1       	rjmp	.+566    	; 0x9d4 <listenEncoders+0x438>
			}
			break;
			
			case TrackMenuArrow3Select:
			
			if(menuSub==1)
     79e:	a1 30       	cpi	r26, 0x01	; 1
     7a0:	b1 f4       	brne	.+44     	; 0x7ce <listenEncoders+0x232>
			{
				//indexing might be an issue here, don't remember if this is 0 indexed or not. 
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1 ;
     7a2:	8d 81       	ldd	r24, Y+5	; 0x05
     7a4:	f9 01       	movw	r30, r18
     7a6:	e8 0f       	add	r30, r24
     7a8:	f1 1d       	adc	r31, r1
     7aa:	80 8d       	ldd	r24, Z+24	; 0x18
     7ac:	8f 5f       	subi	r24, 0xFF	; 255
     7ae:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     7b0:	8d 81       	ldd	r24, Y+5	; 0x05
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	f9 01       	movw	r30, r18
     7b6:	e8 0f       	add	r30, r24
     7b8:	f9 1f       	adc	r31, r25
     7ba:	40 8d       	ldd	r20, Z+24	; 0x18
     7bc:	48 30       	cpi	r20, 0x08	; 8
     7be:	08 f4       	brcc	.+2      	; 0x7c2 <listenEncoders+0x226>
     7c0:	09 c1       	rjmp	.+530    	; 0x9d4 <listenEncoders+0x438>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=7;
     7c2:	f9 01       	movw	r30, r18
     7c4:	e8 0f       	add	r30, r24
     7c6:	f9 1f       	adc	r31, r25
     7c8:	87 e0       	ldi	r24, 0x07	; 7
     7ca:	80 8f       	std	Z+24, r24	; 0x18
     7cc:	03 c1       	rjmp	.+518    	; 0x9d4 <listenEncoders+0x438>
				}
			}else
			{
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])-1;
     7ce:	8d 81       	ldd	r24, Y+5	; 0x05
     7d0:	f9 01       	movw	r30, r18
     7d2:	e8 0f       	add	r30, r24
     7d4:	f1 1d       	adc	r31, r1
     7d6:	80 8d       	ldd	r24, Z+24	; 0x18
     7d8:	81 50       	subi	r24, 0x01	; 1
     7da:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     7dc:	8d 81       	ldd	r24, Y+5	; 0x05
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	f9 01       	movw	r30, r18
     7e2:	e8 0f       	add	r30, r24
     7e4:	f9 1f       	adc	r31, r25
     7e6:	40 8d       	ldd	r20, Z+24	; 0x18
     7e8:	48 30       	cpi	r20, 0x08	; 8
     7ea:	08 f4       	brcc	.+2      	; 0x7ee <listenEncoders+0x252>
     7ec:	f3 c0       	rjmp	.+486    	; 0x9d4 <listenEncoders+0x438>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=0;
     7ee:	f9 01       	movw	r30, r18
     7f0:	e8 0f       	add	r30, r24
     7f2:	f9 1f       	adc	r31, r25
     7f4:	10 8e       	std	Z+24, r1	; 0x18
     7f6:	ee c0       	rjmp	.+476    	; 0x9d4 <listenEncoders+0x438>
				}
			}
			break;
			
			case TrackMenuArrow4:
			if(menuSub==1)
     7f8:	a1 30       	cpi	r26, 0x01	; 1
     7fa:	19 f4       	brne	.+6      	; 0x802 <listenEncoders+0x266>
			{
				currentGlobals->menuState = TrackMenuArrow3;
     7fc:	83 e2       	ldi	r24, 0x23	; 35
     7fe:	8e 83       	std	Y+6, r24	; 0x06
     800:	e9 c0       	rjmp	.+466    	; 0x9d4 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow5;
     802:	85 e2       	ldi	r24, 0x25	; 37
     804:	8e 83       	std	Y+6, r24	; 0x06
     806:	e6 c0       	rjmp	.+460    	; 0x9d4 <listenEncoders+0x438>
			}
			break;
			
			case TrackMenuArrow4Select:
			if(menuSub==1)
     808:	a1 30       	cpi	r26, 0x01	; 1
     80a:	d9 f4       	brne	.+54     	; 0x842 <listenEncoders+0x2a6>
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])++;
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	f9 01       	movw	r30, r18
     810:	e8 0f       	add	r30, r24
     812:	f1 1d       	adc	r31, r1
     814:	e5 51       	subi	r30, 0x15	; 21
     816:	ff 4f       	sbci	r31, 0xFF	; 255
     818:	80 81       	ld	r24, Z
     81a:	8f 5f       	subi	r24, 0xFF	; 255
     81c:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>3)
     81e:	8d 81       	ldd	r24, Y+5	; 0x05
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	f9 01       	movw	r30, r18
     824:	e8 0f       	add	r30, r24
     826:	f9 1f       	adc	r31, r25
     828:	e5 51       	subi	r30, 0x15	; 21
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	40 81       	ld	r20, Z
     82e:	44 30       	cpi	r20, 0x04	; 4
     830:	08 f1       	brcs	.+66     	; 0x874 <listenEncoders+0x2d8>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=3;
     832:	82 0f       	add	r24, r18
     834:	93 1f       	adc	r25, r19
     836:	fc 01       	movw	r30, r24
     838:	e5 51       	subi	r30, 0x15	; 21
     83a:	ff 4f       	sbci	r31, 0xFF	; 255
     83c:	83 e0       	ldi	r24, 0x03	; 3
     83e:	80 83       	st	Z, r24
     840:	19 c0       	rjmp	.+50     	; 0x874 <listenEncoders+0x2d8>
				}
			}else
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])--;
     842:	8d 81       	ldd	r24, Y+5	; 0x05
     844:	f9 01       	movw	r30, r18
     846:	e8 0f       	add	r30, r24
     848:	f1 1d       	adc	r31, r1
     84a:	e5 51       	subi	r30, 0x15	; 21
     84c:	ff 4f       	sbci	r31, 0xFF	; 255
     84e:	80 81       	ld	r24, Z
     850:	81 50       	subi	r24, 0x01	; 1
     852:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>3)
     854:	8d 81       	ldd	r24, Y+5	; 0x05
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	f9 01       	movw	r30, r18
     85a:	e8 0f       	add	r30, r24
     85c:	f9 1f       	adc	r31, r25
     85e:	e5 51       	subi	r30, 0x15	; 21
     860:	ff 4f       	sbci	r31, 0xFF	; 255
     862:	40 81       	ld	r20, Z
     864:	44 30       	cpi	r20, 0x04	; 4
     866:	30 f0       	brcs	.+12     	; 0x874 <listenEncoders+0x2d8>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=0;
     868:	82 0f       	add	r24, r18
     86a:	93 1f       	adc	r25, r19
     86c:	fc 01       	movw	r30, r24
     86e:	e5 51       	subi	r30, 0x15	; 21
     870:	ff 4f       	sbci	r31, 0xFF	; 255
     872:	10 82       	st	Z, r1
				}
			}
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
     874:	8d 81       	ldd	r24, Y+5	; 0x05
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	f9 01       	movw	r30, r18
     87a:	e8 0f       	add	r30, r24
     87c:	f9 1f       	adc	r31, r25
     87e:	e5 51       	subi	r30, 0x15	; 21
     880:	ff 4f       	sbci	r31, 0xFF	; 255
     882:	40 81       	ld	r20, Z
     884:	4d 7f       	andi	r20, 0xFD	; 253
     886:	89 f4       	brne	.+34     	; 0x8aa <listenEncoders+0x30e>
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
     888:	28 0f       	add	r18, r24
     88a:	39 1f       	adc	r19, r25
     88c:	f9 01       	movw	r30, r18
     88e:	e8 56       	subi	r30, 0x68	; 104
     890:	ff 4f       	sbci	r31, 0xFF	; 255
     892:	60 81       	ld	r22, Z
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	70 96       	adiw	r30, 0x10	; 16
     898:	80 81       	ld	r24, Z
     89a:	2a eb       	ldi	r18, 0xBA	; 186
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	4f ef       	ldi	r20, 0xFF	; 255
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <setTrackVolume>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=0;
				}
			}
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
			{
     8a8:	95 c0       	rjmp	.+298    	; 0x9d4 <listenEncoders+0x438>
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
			}else
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],
				currentPattern->trackMainVolumeLSB[currentGlobals->currentTrack],currentPattern->trackMainVolumeMSB[currentGlobals->currentTrack]);		
     8aa:	f9 01       	movw	r30, r18
     8ac:	e8 0f       	add	r30, r24
     8ae:	f9 1f       	adc	r31, r25
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
			}else
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],
     8b0:	20 a5       	ldd	r18, Z+40	; 0x28
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 ad       	ldd	r20, Z+56	; 0x38
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	df 01       	movw	r26, r30
     8ba:	a8 56       	subi	r26, 0x68	; 104
     8bc:	bf 4f       	sbci	r27, 0xFF	; 255
     8be:	6c 91       	ld	r22, X
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	e8 55       	subi	r30, 0x58	; 88
     8c4:	ff 4f       	sbci	r31, 0xFF	; 255
     8c6:	80 81       	ld	r24, Z
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <setTrackVolume>
     8ce:	82 c0       	rjmp	.+260    	; 0x9d4 <listenEncoders+0x438>
				currentPattern->trackMainVolumeLSB[currentGlobals->currentTrack],currentPattern->trackMainVolumeMSB[currentGlobals->currentTrack]);		
			}
			break;
			
			case TrackMenuArrow5:
			if(menuSub==1)
     8d0:	a1 30       	cpi	r26, 0x01	; 1
     8d2:	19 f4       	brne	.+6      	; 0x8da <listenEncoders+0x33e>
			{
				currentGlobals->menuState = TrackMenuArrow4;
     8d4:	84 e2       	ldi	r24, 0x24	; 36
     8d6:	8e 83       	std	Y+6, r24	; 0x06
     8d8:	7d c0       	rjmp	.+250    	; 0x9d4 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow1;
     8da:	81 e2       	ldi	r24, 0x21	; 33
     8dc:	8e 83       	std	Y+6, r24	; 0x06
     8de:	7a c0       	rjmp	.+244    	; 0x9d4 <listenEncoders+0x438>
			}
			break;
			
			case TrackMenuArrow5Select:;
			uint16_t sustainTime = (currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack])|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);	
     8e0:	4d 81       	ldd	r20, Y+5	; 0x05
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	b9 01       	movw	r22, r18
     8e6:	64 0f       	add	r22, r20
     8e8:	75 1f       	adc	r23, r21
     8ea:	fb 01       	movw	r30, r22
     8ec:	e5 53       	subi	r30, 0x35	; 53
     8ee:	ff 4f       	sbci	r31, 0xFF	; 255
     8f0:	80 81       	ld	r24, Z
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	98 2f       	mov	r25, r24
     8f6:	88 27       	eor	r24, r24
     8f8:	70 96       	adiw	r30, 0x10	; 16
     8fa:	60 81       	ld	r22, Z
     8fc:	86 2b       	or	r24, r22
			if(menuSub==1)
     8fe:	a1 30       	cpi	r26, 0x01	; 1
     900:	71 f4       	brne	.+28     	; 0x91e <listenEncoders+0x382>
			{
				if((currentGlobals->currentGPButtons)&(0x04))
     902:	6a 81       	ldd	r22, Y+2	; 0x02
     904:	62 ff       	sbrs	r22, 2
     906:	02 c0       	rjmp	.+4      	; 0x90c <listenEncoders+0x370>
				{
					sustainTime++;
     908:	01 96       	adiw	r24, 0x01	; 1
     90a:	02 c0       	rjmp	.+4      	; 0x910 <listenEncoders+0x374>
				}
				else
				{
					sustainTime = sustainTime+236;
     90c:	84 51       	subi	r24, 0x14	; 20
     90e:	9f 4f       	sbci	r25, 0xFF	; 255
     910:	81 36       	cpi	r24, 0x61	; 97
     912:	ea ee       	ldi	r30, 0xEA	; 234
     914:	9e 07       	cpc	r25, r30
     916:	80 f0       	brcs	.+32     	; 0x938 <listenEncoders+0x39c>
     918:	80 e6       	ldi	r24, 0x60	; 96
     91a:	9a ee       	ldi	r25, 0xEA	; 234
     91c:	0d c0       	rjmp	.+26     	; 0x938 <listenEncoders+0x39c>
				{
					sustainTime = 60000;
				}
			}else
			{
				if((currentGlobals->currentGPButtons)&(0x04))
     91e:	6a 81       	ldd	r22, Y+2	; 0x02
     920:	62 ff       	sbrs	r22, 2
     922:	02 c0       	rjmp	.+4      	; 0x928 <listenEncoders+0x38c>
				{
					sustainTime--;
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	02 c0       	rjmp	.+4      	; 0x92c <listenEncoders+0x390>
				}else
				{	
					sustainTime = sustainTime - 236;
     928:	8c 5e       	subi	r24, 0xEC	; 236
     92a:	91 09       	sbc	r25, r1
				}
				
				if(sustainTime>60000)
     92c:	81 36       	cpi	r24, 0x61	; 97
     92e:	fa ee       	ldi	r31, 0xEA	; 234
     930:	9f 07       	cpc	r25, r31
     932:	10 f0       	brcs	.+4      	; 0x938 <listenEncoders+0x39c>
				{
					sustainTime = 0;
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
			currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack] = (sustainTime>>8);
     938:	42 0f       	add	r20, r18
     93a:	53 1f       	adc	r21, r19
     93c:	fa 01       	movw	r30, r20
     93e:	e5 53       	subi	r30, 0x35	; 53
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	90 83       	st	Z, r25
			currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] = sustainTime; //upper bits will be truncated.
     944:	9d 81       	ldd	r25, Y+5	; 0x05
     946:	29 0f       	add	r18, r25
     948:	31 1d       	adc	r19, r1
     94a:	f9 01       	movw	r30, r18
     94c:	e5 52       	subi	r30, 0x25	; 37
     94e:	ff 4f       	sbci	r31, 0xFF	; 255
     950:	80 83       	st	Z, r24

			break;
     952:	40 c0       	rjmp	.+128    	; 0x9d4 <listenEncoders+0x438>
			
			case GlobalMenuArrow1:
			if(menuSub==1)
     954:	a1 30       	cpi	r26, 0x01	; 1
     956:	19 f4       	brne	.+6      	; 0x95e <listenEncoders+0x3c2>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     958:	81 e3       	ldi	r24, 0x31	; 49
     95a:	8e 83       	std	Y+6, r24	; 0x06
     95c:	3b c0       	rjmp	.+118    	; 0x9d4 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     95e:	82 e3       	ldi	r24, 0x32	; 50
     960:	8e 83       	std	Y+6, r24	; 0x06
     962:	38 c0       	rjmp	.+112    	; 0x9d4 <listenEncoders+0x438>
			}
			break;
			
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
     964:	a1 30       	cpi	r26, 0x01	; 1
     966:	49 f4       	brne	.+18     	; 0x97a <listenEncoders+0x3de>
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     968:	8c 85       	ldd	r24, Y+12	; 0x0c
     96a:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->midiChannel>15)
     96c:	80 31       	cpi	r24, 0x10	; 16
     96e:	10 f4       	brcc	.+4      	; 0x974 <listenEncoders+0x3d8>
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     970:	8c 87       	std	Y+12, r24	; 0x0c
     972:	30 c0       	rjmp	.+96     	; 0x9d4 <listenEncoders+0x438>
				if(currentGlobals->midiChannel>15)
				{
					currentGlobals->midiChannel=15;
     974:	8f e0       	ldi	r24, 0x0F	; 15
     976:	8c 87       	std	Y+12, r24	; 0x0c
     978:	2d c0       	rjmp	.+90     	; 0x9d4 <listenEncoders+0x438>
				}
			}
			else
			{
				//decrement midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)-1;
     97a:	8c 85       	ldd	r24, Y+12	; 0x0c
     97c:	81 50       	subi	r24, 0x01	; 1
     97e:	10 f0       	brcs	.+4      	; 0x984 <listenEncoders+0x3e8>
     980:	8c 87       	std	Y+12, r24	; 0x0c
     982:	28 c0       	rjmp	.+80     	; 0x9d4 <listenEncoders+0x438>
				if(currentGlobals->midiChannel>254)
				{
					currentGlobals->midiChannel=0;
     984:	1c 86       	std	Y+12, r1	; 0x0c
     986:	26 c0       	rjmp	.+76     	; 0x9d4 <listenEncoders+0x438>
				}
			}
			break;
			
			case GlobalMenuArrow2:
			if(menuSub==1)
     988:	a1 30       	cpi	r26, 0x01	; 1
     98a:	19 f4       	brne	.+6      	; 0x992 <listenEncoders+0x3f6>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     98c:	81 e3       	ldi	r24, 0x31	; 49
     98e:	8e 83       	std	Y+6, r24	; 0x06
     990:	21 c0       	rjmp	.+66     	; 0x9d4 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     992:	82 e3       	ldi	r24, 0x32	; 50
     994:	8e 83       	std	Y+6, r24	; 0x06
     996:	1e c0       	rjmp	.+60     	; 0x9d4 <listenEncoders+0x438>
			break;
			
			case GlobalMenuArrow2Select:;
			//change midi note for selected track.
			//midi range is 0 to 127.
			uint8_t currentMidiNote = currentGlobals->midiTrackNote[currentGlobals->currentTrack];
     998:	ed 81       	ldd	r30, Y+5	; 0x05
     99a:	2e 2f       	mov	r18, r30
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	ce 01       	movw	r24, r28
     9a0:	82 0f       	add	r24, r18
     9a2:	93 1f       	adc	r25, r19
     9a4:	fc 01       	movw	r30, r24
     9a6:	85 85       	ldd	r24, Z+13	; 0x0d
			if(menuSub==1)
     9a8:	a1 30       	cpi	r26, 0x01	; 1
     9aa:	21 f4       	brne	.+8      	; 0x9b4 <listenEncoders+0x418>
			{
				//not 100% sure how to set this up.
				currentMidiNote++;
     9ac:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentMidiNote>127)
     9ae:	32 f4       	brpl	.+12     	; 0x9bc <listenEncoders+0x420>
				{
					currentMidiNote = 127;
     9b0:	8f e7       	ldi	r24, 0x7F	; 127
     9b2:	04 c0       	rjmp	.+8      	; 0x9bc <listenEncoders+0x420>
				}
			}else
			{
				currentMidiNote--;
     9b4:	81 50       	subi	r24, 0x01	; 1
				if(currentMidiNote>128)
     9b6:	81 38       	cpi	r24, 0x81	; 129
     9b8:	08 f0       	brcs	.+2      	; 0x9bc <listenEncoders+0x420>
				{
					currentMidiNote = 0;
     9ba:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			currentGlobals->midiTrackNote[currentGlobals->currentTrack] = currentMidiNote;
     9bc:	f9 01       	movw	r30, r18
     9be:	ec 0f       	add	r30, r28
     9c0:	fd 1f       	adc	r31, r29
     9c2:	85 87       	std	Z+13, r24	; 0x0d
			break;
     9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <listenEncoders+0x438>
			
			case GlobalMenuArrow3:
			//currently unreachable, no settings live here atm		
			if(menuSub==1)
     9c6:	a1 30       	cpi	r26, 0x01	; 1
     9c8:	19 f4       	brne	.+6      	; 0x9d0 <listenEncoders+0x434>
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     9ca:	82 e3       	ldi	r24, 0x32	; 50
     9cc:	8e 83       	std	Y+6, r24	; 0x06
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     9d0:	81 e3       	ldi	r24, 0x31	; 49
     9d2:	8e 83       	std	Y+6, r24	; 0x06
			
			case GlobalMenuArrow3Select:
			//nothing to put here yet.
			break;
		}
		bottomEncoderLastValue = bottomEncoderValue;
     9d4:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <bottomEncoderValue>
     9d8:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <bottomEncoderLastValue>
		//menuSub=0;
	}
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <initArrays>:
#include "globalVariables.h"
#include <string.h>

//takes an array less than 20 and fills it with blank characters
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	ec 01       	movw	r28, r24
	uint8_t lengthOfString = strlen(myString);
     9ec:	fa 01       	movw	r30, r20
     9ee:	01 90       	ld	r0, Z+
     9f0:	00 20       	and	r0, r0
     9f2:	e9 f7       	brne	.-6      	; 0x9ee <initArrays+0xc>
     9f4:	31 97       	sbiw	r30, 0x01	; 1
     9f6:	8f 01       	movw	r16, r30
     9f8:	04 1b       	sub	r16, r20
     9fa:	15 0b       	sbc	r17, r21
     9fc:	90 2f       	mov	r25, r16
	uint8_t charLeft = 20 - lengthOfString;
     9fe:	84 e1       	ldi	r24, 0x14	; 20
     a00:	80 1b       	sub	r24, r16
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     a02:	00 23       	and	r16, r16
     a04:	a9 f0       	breq	.+42     	; 0xa30 <initArrays+0x4e>
     a06:	fa 01       	movw	r30, r20
     a08:	25 e1       	ldi	r18, 0x15	; 21
     a0a:	26 9f       	mul	r18, r22
     a0c:	d0 01       	movw	r26, r0
     a0e:	27 9f       	mul	r18, r23
     a10:	b0 0d       	add	r27, r0
     a12:	11 24       	eor	r1, r1
     a14:	ac 0f       	add	r26, r28
     a16:	bd 1f       	adc	r27, r29
     a18:	2f ef       	ldi	r18, 0xFF	; 255
     a1a:	20 0f       	add	r18, r16
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	2f 5f       	subi	r18, 0xFF	; 255
     a20:	3f 4f       	sbci	r19, 0xFF	; 255
     a22:	42 0f       	add	r20, r18
     a24:	53 1f       	adc	r21, r19
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     a26:	21 91       	ld	r18, Z+
     a28:	2d 93       	st	X+, r18
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
	uint8_t lengthOfString = strlen(myString);
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     a2a:	e4 17       	cp	r30, r20
     a2c:	f5 07       	cpc	r31, r21
     a2e:	d9 f7       	brne	.-10     	; 0xa26 <initArrays+0x44>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     a30:	88 23       	and	r24, r24
     a32:	89 f0       	breq	.+34     	; 0xa56 <initArrays+0x74>
	{
		myArray[stringNumber][currentIndex] = ' ';
     a34:	45 e1       	ldi	r20, 0x15	; 21
     a36:	46 9f       	mul	r20, r22
     a38:	90 01       	movw	r18, r0
     a3a:	47 9f       	mul	r20, r23
     a3c:	30 0d       	add	r19, r0
     a3e:	11 24       	eor	r1, r1
     a40:	c2 0f       	add	r28, r18
     a42:	d3 1f       	adc	r29, r19
     a44:	08 0f       	add	r16, r24
     a46:	80 e2       	ldi	r24, 0x20	; 32
     a48:	fe 01       	movw	r30, r28
     a4a:	e9 0f       	add	r30, r25
     a4c:	f1 1d       	adc	r31, r1
     a4e:	80 83       	st	Z, r24
		currentIndex++;
     a50:	9f 5f       	subi	r25, 0xFF	; 255
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     a52:	90 13       	cpse	r25, r16
     a54:	f9 cf       	rjmp	.-14     	; 0xa48 <initArrays+0x66>
	{
		myArray[stringNumber][currentIndex] = ' ';
		currentIndex++;
	}
}
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	08 95       	ret

00000a60 <initBank>:

void initBank(Pattern *currentInitPattern)
{
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	ac 01       	movw	r20, r24
     a66:	fc 01       	movw	r30, r24
     a68:	e8 55       	subi	r30, 0x58	; 88
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	ec 01       	movw	r28, r24
     a6e:	c8 57       	subi	r28, 0x78	; 120
     a70:	df 4f       	sbci	r29, 0xFF	; 255
     a72:	dc 01       	movw	r26, r24
     a74:	a5 51       	subi	r26, 0x15	; 21
     a76:	bf 4f       	sbci	r27, 0xFF	; 255
	for(uint8_t i = 0; i<16; i++)
     a78:	90 e0       	ldi	r25, 0x00	; 0
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
    currentInitPattern->trackPlayMode[i] = 0x01;
     a7a:	31 e0       	ldi	r19, 0x01	; 1
	currentInitPattern->envelopeType[i] = 3;
     a7c:	23 e0       	ldi	r18, 0x03	; 3

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
     a7e:	9f 5f       	subi	r25, 0xFF	; 255
     a80:	91 93       	st	Z+, r25
    currentInitPattern->trackPlayMode[i] = 0x01;
     a82:	39 93       	st	Y+, r19
	currentInitPattern->envelopeType[i] = 3;
     a84:	2d 93       	st	X+, r18
	currentInitPattern->trackSustainTimeLSB[i] = 0;
     a86:	12 aa       	std	Z+50, r1	; 0x32
	currentInitPattern->trackSustainTimeMSB[i] = 0;
     a88:	12 a2       	std	Z+34, r1	; 0x22
	}
}

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
     a8a:	90 31       	cpi	r25, 0x10	; 16
     a8c:	c1 f7       	brne	.-16     	; 0xa7e <initBank+0x1e>
     a8e:	fa 01       	movw	r30, r20
     a90:	e5 50       	subi	r30, 0x05	; 5
     a92:	ff 4f       	sbci	r31, 0xFF	; 255
     a94:	9a 01       	movw	r18, r20
     a96:	25 58       	subi	r18, 0x85	; 133
     a98:	3e 4f       	sbci	r19, 0xFE	; 254
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     a9a:	11 92       	st	Z+, r1
     a9c:	11 92       	st	Z+, r1
	currentInitPattern->envelopeType[i] = 3;
	currentInitPattern->trackSustainTimeLSB[i] = 0;
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
     a9e:	e2 17       	cp	r30, r18
     aa0:	f3 07       	cpc	r31, r19
     aa2:	d9 f7       	brne	.-10     	; 0xa9a <initBank+0x3a>
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
 
  }
  //We need to take these and put them in global. 
  currentInitPattern->patternBPM = 120;
     aa4:	fa 01       	movw	r30, r20
     aa6:	e8 53       	subi	r30, 0x38	; 56
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	88 e7       	ldi	r24, 0x78	; 120
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	91 83       	std	Z+1, r25	; 0x01
     ab0:	80 83       	st	Z, r24
  currentInitPattern->numSteps = 16;
     ab2:	32 96       	adiw	r30, 0x02	; 2
     ab4:	80 e1       	ldi	r24, 0x10	; 16
     ab6:	80 83       	st	Z, r24
}
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <initGlobals>:

void initGlobals(Globals *currentGlobals, uint8_t factoryReset)
{
     abe:	fc 01       	movw	r30, r24
		currentGlobals->currentTrigButtons=0; //current state of Trig buttons.
     ac0:	11 82       	std	Z+1, r1	; 0x01
     ac2:	10 82       	st	Z, r1
		currentGlobals->currentGPButtons=0; //current state of GP buttons
     ac4:	12 82       	std	Z+2, r1	; 0x02
		currentGlobals->currentPatternNumber=0; //current pattern, between 1 and 256
     ac6:	13 82       	std	Z+3, r1	; 0x03
		currentGlobals->currentStep=0; // current step in the sequencer
     ac8:	14 82       	std	Z+4, r1	; 0x04
		currentGlobals->currentTrack=0; //current track being edited
     aca:	15 82       	std	Z+5, r1	; 0x05
		currentGlobals->menuState=0; //where the menu is currently
     acc:	16 82       	std	Z+6, r1	; 0x06
		currentGlobals->playState=0; //whether the sequencer is playing, stopped, or paused.
     ace:	17 82       	std	Z+7, r1	; 0x07
		currentGlobals->factoryReset=0; //we may not need this in this struct, but good to have for now.
     ad0:	10 86       	std	Z+8, r1	; 0x08
		currentGlobals->buttonSwitchFlag=0; // could be rolled into value bits.
     ad2:	11 86       	std	Z+9, r1	; 0x09
		currentGlobals->valueChangeFlag=0; //bit 0 -> changes in encoders, bit 1-> changes in buttons, bit2 -> changes in knobs
     ad4:	12 86       	std	Z+10, r1	; 0x0a
		currentGlobals->knobStatus=0; //top 4 bits: knob type, bottom 4 bits: knob location.
     ad6:	13 86       	std	Z+11, r1	; 0x0b
		
		if(factoryReset==1)
     ad8:	61 30       	cpi	r22, 0x01	; 1
     ada:	09 f5       	brne	.+66     	; 0xb1e <initGlobals+0x60>
		{
			currentGlobals->midiChannel=0;
     adc:	14 86       	std	Z+12, r1	; 0x0c
			currentGlobals->midiTrackNote[0] = 0x24;
     ade:	84 e2       	ldi	r24, 0x24	; 36
     ae0:	85 87       	std	Z+13, r24	; 0x0d
			currentGlobals->midiTrackNote[1] = 0x25;
     ae2:	85 e2       	ldi	r24, 0x25	; 37
     ae4:	86 87       	std	Z+14, r24	; 0x0e
			currentGlobals->midiTrackNote[2] = 0x26;
     ae6:	86 e2       	ldi	r24, 0x26	; 38
     ae8:	87 87       	std	Z+15, r24	; 0x0f
			currentGlobals->midiTrackNote[3] = 0x27;
     aea:	87 e2       	ldi	r24, 0x27	; 39
     aec:	80 8b       	std	Z+16, r24	; 0x10
			currentGlobals->midiTrackNote[4] = 0x28;
     aee:	88 e2       	ldi	r24, 0x28	; 40
     af0:	81 8b       	std	Z+17, r24	; 0x11
			currentGlobals->midiTrackNote[5] = 0x29;
     af2:	89 e2       	ldi	r24, 0x29	; 41
     af4:	82 8b       	std	Z+18, r24	; 0x12
			currentGlobals->midiTrackNote[6] = 0x2a;
     af6:	8a e2       	ldi	r24, 0x2A	; 42
     af8:	83 8b       	std	Z+19, r24	; 0x13
			currentGlobals->midiTrackNote[7] = 0x2b;
     afa:	8b e2       	ldi	r24, 0x2B	; 43
     afc:	84 8b       	std	Z+20, r24	; 0x14
			currentGlobals->midiTrackNote[8] = 0x2c;
     afe:	8c e2       	ldi	r24, 0x2C	; 44
     b00:	85 8b       	std	Z+21, r24	; 0x15
			currentGlobals->midiTrackNote[9] = 0x2d;
     b02:	8d e2       	ldi	r24, 0x2D	; 45
     b04:	86 8b       	std	Z+22, r24	; 0x16
			currentGlobals->midiTrackNote[10] = 0x2e;
     b06:	8e e2       	ldi	r24, 0x2E	; 46
     b08:	87 8b       	std	Z+23, r24	; 0x17
			currentGlobals->midiTrackNote[11] = 0x2f;
     b0a:	8f e2       	ldi	r24, 0x2F	; 47
     b0c:	80 8f       	std	Z+24, r24	; 0x18
			currentGlobals->midiTrackNote[12] = 0x30;
     b0e:	80 e3       	ldi	r24, 0x30	; 48
     b10:	81 8f       	std	Z+25, r24	; 0x19
			currentGlobals->midiTrackNote[13] = 0x31;
     b12:	81 e3       	ldi	r24, 0x31	; 49
     b14:	82 8f       	std	Z+26, r24	; 0x1a
			currentGlobals->midiTrackNote[14] = 0x32;
     b16:	82 e3       	ldi	r24, 0x32	; 50
     b18:	83 8f       	std	Z+27, r24	; 0x1b
			currentGlobals->midiTrackNote[15] = 0x33;
     b1a:	83 e3       	ldi	r24, 0x33	; 51
     b1c:	84 8f       	std	Z+28, r24	; 0x1c
     b1e:	08 95       	ret

00000b20 <startADCConversion>:



uint8_t startADCConversion()
{
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     b20:	ea e7       	ldi	r30, 0x7A	; 122
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	80 64       	ori	r24, 0x40	; 64
     b28:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     b2a:	80 81       	ld	r24, Z
     b2c:	86 fd       	sbrc	r24, 6
     b2e:	fd cf       	rjmp	.-6      	; 0xb2a <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.	
     b30:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
     b34:	08 95       	ret

00000b36 <initADC>:

void initADC()
{
	DDRF |= 0B00000111; //init pins F2, 1, and 0 as select pins on the external mux.
     b36:	80 b3       	in	r24, 0x10	; 16
     b38:	87 60       	ori	r24, 0x07	; 7
     b3a:	80 bb       	out	0x10, r24	; 16
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     b3c:	80 e2       	ldi	r24, 0x20	; 32
     b3e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     b42:	87 e8       	ldi	r24, 0x87	; 135
     b44:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     b48:	88 e0       	ldi	r24, 0x08	; 8
     b4a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     b54:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     b58:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <knobBufferCounter>
	startADCConversion();
     b5c:	e1 cf       	rjmp	.-62     	; 0xb20 <startADCConversion>
     b5e:	08 95       	ret

00000b60 <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     b60:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     b62:	98 2f       	mov	r25, r24
     b64:	96 95       	lsr	r25
     b66:	96 95       	lsr	r25
     b68:	2f e2       	ldi	r18, 0x2F	; 47
     b6a:	92 9f       	mul	r25, r18
     b6c:	91 2d       	mov	r25, r1
     b6e:	11 24       	eor	r1, r1
     b70:	96 95       	lsr	r25
     b72:	2c e2       	ldi	r18, 0x2C	; 44
     b74:	92 9f       	mul	r25, r18
     b76:	80 19       	sub	r24, r0
     b78:	11 24       	eor	r1, r1
     b7a:	98 2f       	mov	r25, r24
	if(select<40)
     b7c:	88 32       	cpi	r24, 0x28	; 40
     b7e:	70 f4       	brcc	.+28     	; 0xb9c <selectKnob+0x3c>
	{
		ADCSRB = (1 << MUX5);
     b80:	88 e0       	ldi	r24, 0x08	; 8
     b82:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     b86:	c9 2f       	mov	r28, r25
     b88:	c7 70       	andi	r28, 0x07	; 7
		//uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     b8a:	96 95       	lsr	r25
     b8c:	96 95       	lsr	r25
     b8e:	96 95       	lsr	r25
     b90:	90 62       	ori	r25, 0x20	; 32
     b92:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     b96:	c4 df       	rcall	.-120    	; 0xb20 <startADCConversion>
		

		//then the external multiplexer
		PORTF = muxSelect;
     b98:	c1 bb       	out	0x11, r28	; 17
     b9a:	20 c0       	rjmp	.+64     	; 0xbdc <selectKnob+0x7c>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     b9c:	89 32       	cpi	r24, 0x29	; 41
     b9e:	71 f0       	breq	.+28     	; 0xbbc <selectKnob+0x5c>
     ba0:	18 f4       	brcc	.+6      	; 0xba8 <selectKnob+0x48>
     ba2:	88 32       	cpi	r24, 0x28	; 40
     ba4:	31 f0       	breq	.+12     	; 0xbb2 <selectKnob+0x52>
     ba6:	1a c0       	rjmp	.+52     	; 0xbdc <selectKnob+0x7c>
     ba8:	8a 32       	cpi	r24, 0x2A	; 42
     baa:	69 f0       	breq	.+26     	; 0xbc6 <selectKnob+0x66>
     bac:	8b 32       	cpi	r24, 0x2B	; 43
     bae:	81 f0       	breq	.+32     	; 0xbd0 <selectKnob+0x70>
     bb0:	15 c0       	rjmp	.+42     	; 0xbdc <selectKnob+0x7c>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     bb2:	85 e2       	ldi	r24, 0x25	; 37
     bb4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     bb8:	b3 df       	rcall	.-154    	; 0xb20 <startADCConversion>
		break;
     bba:	10 c0       	rjmp	.+32     	; 0xbdc <selectKnob+0x7c>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     bbc:	86 e2       	ldi	r24, 0x26	; 38
     bbe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     bc2:	ae df       	rcall	.-164    	; 0xb20 <startADCConversion>
		break;
     bc4:	0b c0       	rjmp	.+22     	; 0xbdc <selectKnob+0x7c>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     bc6:	87 e2       	ldi	r24, 0x27	; 39
     bc8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     bcc:	a9 df       	rcall	.-174    	; 0xb20 <startADCConversion>
		break;
     bce:	06 c0       	rjmp	.+12     	; 0xbdc <selectKnob+0x7c>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     bd0:	80 e2       	ldi	r24, 0x20	; 32
     bd2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     bd6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     bda:	a2 df       	rcall	.-188    	; 0xb20 <startADCConversion>
		break;
		}
	
	}
	
}
     bdc:	cf 91       	pop	r28
     bde:	08 95       	ret

00000be0 <updateKnob>:

void updateKnob(uint8_t select, Globals *currentGlobals)
{
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	8b 01       	movw	r16, r22
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
     bea:	c8 2f       	mov	r28, r24
     bec:	d0 e0       	ldi	r29, 0x00	; 0
     bee:	98 df       	rcall	.-208    	; 0xb20 <startADCConversion>
     bf0:	f8 01       	movw	r30, r16
     bf2:	ec 0f       	add	r30, r28
     bf4:	fd 1f       	adc	r31, r29
     bf6:	85 8f       	std	Z+29, r24	; 0x1d
		currentGlobals->filteredKnobBuffer[select] = 
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
     bf8:	e7 5b       	subi	r30, 0xB7	; 183
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	40 81       	ld	r20, Z

void updateKnob(uint8_t select, Globals *currentGlobals)
{
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
		currentGlobals->filteredKnobBuffer[select] = 
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	84 1b       	sub	r24, r20
     c02:	91 09       	sbc	r25, r1
     c04:	9c 01       	movw	r18, r24
     c06:	12 f4       	brpl	.+4      	; 0xc0c <updateKnob+0x2c>
     c08:	2f 5f       	subi	r18, 0xFF	; 255
     c0a:	3f 4f       	sbci	r19, 0xFF	; 255
     c0c:	35 95       	asr	r19
     c0e:	27 95       	ror	r18
     c10:	24 0f       	add	r18, r20
     c12:	20 83       	st	Z, r18
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	08 95       	ret

00000c1e <initializeKnob>:
void initializeKnob(Globals *currentGlobals)
{
     c1e:	fc 01       	movw	r30, r24
     c20:	e7 5b       	subi	r30, 0xB7	; 183
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	9c 01       	movw	r18, r24
     c26:	2b 58       	subi	r18, 0x8B	; 139
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
     c2a:	91 91       	ld	r25, Z+
     c2c:	93 a7       	std	Z+43, r25	; 0x2b
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
void initializeKnob(Globals *currentGlobals)
{
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
     c2e:	e2 17       	cp	r30, r18
     c30:	f3 07       	cpc	r31, r19
     c32:	d9 f7       	brne	.-10     	; 0xc2a <initializeKnob+0xc>
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
	}
}
     c34:	08 95       	ret

00000c36 <interperetKnob>:

void interperetKnob(uint8_t select, Pattern *currentKnobPattern, Globals *currentGlobals)
{//this function will compare outputs, and write to our struct.
     c36:	4f 92       	push	r4
     c38:	5f 92       	push	r5
     c3a:	6f 92       	push	r6
     c3c:	7f 92       	push	r7
     c3e:	8f 92       	push	r8
     c40:	9f 92       	push	r9
     c42:	af 92       	push	r10
     c44:	bf 92       	push	r11
     c46:	cf 92       	push	r12
     c48:	df 92       	push	r13
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	ea 01       	movw	r28, r20
	select = select%44;
     c58:	98 2f       	mov	r25, r24
     c5a:	96 95       	lsr	r25
     c5c:	96 95       	lsr	r25
     c5e:	2f e2       	ldi	r18, 0x2F	; 47
     c60:	92 9f       	mul	r25, r18
     c62:	91 2d       	mov	r25, r1
     c64:	11 24       	eor	r1, r1
     c66:	96 95       	lsr	r25
     c68:	2c e2       	ldi	r18, 0x2C	; 44
     c6a:	92 9f       	mul	r25, r18
     c6c:	80 19       	sub	r24, r0
     c6e:	11 24       	eor	r1, r1
     c70:	98 2f       	mov	r25, r24
	
	if (select<40)
     c72:	88 32       	cpi	r24, 0x28	; 40
     c74:	08 f0       	brcs	.+2      	; 0xc78 <interperetKnob+0x42>
     c76:	b4 c1       	rjmp	.+872    	; 0xfe0 <interperetKnob+0x3aa>
	{
		uint8_t positionSelect = select%8;
     c78:	18 2f       	mov	r17, r24
     c7a:	17 70       	andi	r17, 0x07	; 7
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
		uint8_t bankSwitch = select/8;
     c7c:	86 95       	lsr	r24
     c7e:	86 95       	lsr	r24
     c80:	86 95       	lsr	r24
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
     c82:	29 85       	ldd	r18, Y+9	; 0x09
     c84:	20 ff       	sbrs	r18, 0
     c86:	05 c0       	rjmp	.+10     	; 0xc92 <interperetKnob+0x5c>
		{
			positionSelectTracks=positionSelectTracks+8;
     c88:	68 94       	set
     c8a:	aa 24       	eor	r10, r10
     c8c:	a3 f8       	bld	r10, 3
     c8e:	a1 0e       	add	r10, r17
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <interperetKnob+0x5e>
	select = select%44;
	
	if (select<40)
	{
		uint8_t positionSelect = select%8;
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
     c92:	a1 2e       	mov	r10, r17
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
		{
			positionSelectTracks=positionSelectTracks+8;
		}
		
		switch (bankSwitch){
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	09 f4       	brne	.+2      	; 0xc9a <interperetKnob+0x64>
     c98:	9f c0       	rjmp	.+318    	; 0xdd8 <interperetKnob+0x1a2>
     c9a:	7e 01       	movw	r14, r28
     c9c:	6b 01       	movw	r12, r22
     c9e:	83 30       	cpi	r24, 0x03	; 3
     ca0:	30 f4       	brcc	.+12     	; 0xcae <interperetKnob+0x78>
     ca2:	88 23       	and	r24, r24
     ca4:	59 f0       	breq	.+22     	; 0xcbc <interperetKnob+0x86>
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	09 f4       	brne	.+2      	; 0xcac <interperetKnob+0x76>
     caa:	6d c0       	rjmp	.+218    	; 0xd86 <interperetKnob+0x150>
     cac:	b6 c1       	rjmp	.+876    	; 0x101a <interperetKnob+0x3e4>
     cae:	83 30       	cpi	r24, 0x03	; 3
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <interperetKnob+0x7e>
     cb2:	db c0       	rjmp	.+438    	; 0xe6a <interperetKnob+0x234>
     cb4:	84 30       	cpi	r24, 0x04	; 4
     cb6:	09 f4       	brne	.+2      	; 0xcba <interperetKnob+0x84>
     cb8:	1f c1       	rjmp	.+574    	; 0xef8 <interperetKnob+0x2c2>
     cba:	af c1       	rjmp	.+862    	; 0x101a <interperetKnob+0x3e4>
			uint8_t newRead = 0;
			case 0:; //outputVolume
			
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
     cbc:	c9 2f       	mov	r28, r25
     cbe:	d0 e0       	ldi	r29, 0x00	; 0
     cc0:	c7 01       	movw	r24, r14
     cc2:	8c 0f       	add	r24, r28
     cc4:	9d 1f       	adc	r25, r29
     cc6:	fc 01       	movw	r30, r24
     cc8:	eb 58       	subi	r30, 0x8B	; 139
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
     cce:	bc 97       	sbiw	r30, 0x2c	; 44
     cd0:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
     cd2:	26 17       	cp	r18, r22
     cd4:	20 f4       	brcc	.+8      	; 0xcde <interperetKnob+0xa8>
	{
		returnMe = v1-v2;
     cd6:	86 2f       	mov	r24, r22
     cd8:	82 1b       	sub	r24, r18
     cda:	28 2f       	mov	r18, r24
     cdc:	01 c0       	rjmp	.+2      	; 0xce0 <interperetKnob+0xaa>
	}
	else
	{
		returnMe = v2-v1;
     cde:	26 1b       	sub	r18, r22
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];

			if(checkVariation(newRead,prevRead)>2)
     ce0:	23 30       	cpi	r18, 0x03	; 3
     ce2:	08 f4       	brcc	.+2      	; 0xce6 <interperetKnob+0xb0>
     ce4:	9a c1       	rjmp	.+820    	; 0x101a <interperetKnob+0x3e4>
			{
				
				int16_t negCheckValue = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__floatsisf>
     cf0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <volumeDivisor>
     cf4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <volumeDivisor+0x1>
     cf8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <volumeDivisor+0x2>
     cfc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <volumeDivisor+0x3>
     d00:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__divsf3>
     d04:	2b 01       	movw	r4, r22
     d06:	3c 01       	movw	r6, r24
     d08:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <NegativeOffset>
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__floatsisf>
     d16:	9b 01       	movw	r18, r22
     d18:	ac 01       	movw	r20, r24
     d1a:	c3 01       	movw	r24, r6
     d1c:	b2 01       	movw	r22, r4
     d1e:	0e 94 01 1c 	call	0x3802	; 0x3802 <__subsf3>
     d22:	0e 94 ce 1c 	call	0x399c	; 0x399c <__fixsfsi>
     d26:	86 2f       	mov	r24, r22
     d28:	26 2f       	mov	r18, r22
     d2a:	37 2f       	mov	r19, r23
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     d2c:	d7 01       	movw	r26, r14
     d2e:	1a 96       	adiw	r26, 0x0a	; 10
     d30:	9c 91       	ld	r25, X
     d32:	1a 97       	sbiw	r26, 0x0a	; 10
     d34:	94 60       	ori	r25, 0x04	; 4
     d36:	1a 96       	adiw	r26, 0x0a	; 10
     d38:	9c 93       	st	X, r25
     d3a:	1a 97       	sbiw	r26, 0x0a	; 10
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value 
     d3c:	1b 96       	adiw	r26, 0x0b	; 11
     d3e:	1c 93       	st	X, r17
				
				currentKnobPattern->outputLevelLSB[positionSelect] = (negCheckValue);
     d40:	61 2f       	mov	r22, r17
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	f6 01       	movw	r30, r12
     d46:	e6 0f       	add	r30, r22
     d48:	f7 1f       	adc	r31, r23
     d4a:	80 87       	std	Z+8, r24	; 0x08
				if(negCheckValue>(-1))
     d4c:	33 23       	and	r19, r19
     d4e:	2c f0       	brlt	.+10     	; 0xd5a <interperetKnob+0x124>
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 0;	
     d50:	f6 01       	movw	r30, r12
     d52:	e6 0f       	add	r30, r22
     d54:	f7 1f       	adc	r31, r23
     d56:	10 82       	st	Z, r1
     d58:	05 c0       	rjmp	.+10     	; 0xd64 <interperetKnob+0x12e>
				}else
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 255;
     d5a:	9f ef       	ldi	r25, 0xFF	; 255
     d5c:	f6 01       	movw	r30, r12
     d5e:	e6 0f       	add	r30, r22
     d60:	f7 1f       	adc	r31, r23
     d62:	90 83       	st	Z, r25
				}
				setOutputVolume(currentKnobPattern->outputLevelLSB[positionSelect], currentKnobPattern->outputLevelMSB[positionSelect], positionSelect);
     d64:	f6 01       	movw	r30, r12
     d66:	e6 0f       	add	r30, r22
     d68:	f7 1f       	adc	r31, r23
     d6a:	41 2f       	mov	r20, r17
     d6c:	60 81       	ld	r22, Z
     d6e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <setOutputVolume>
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     d72:	ce 0d       	add	r28, r14
     d74:	df 1d       	adc	r29, r15
     d76:	fe 01       	movw	r30, r28
     d78:	eb 58       	subi	r30, 0x8B	; 139
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	c7 5b       	subi	r28, 0xB7	; 183
     d7e:	df 4f       	sbci	r29, 0xFF	; 255
     d80:	88 81       	ld	r24, Y
     d82:	80 83       	st	Z, r24
     d84:	4a c1       	rjmp	.+660    	; 0x101a <interperetKnob+0x3e4>
			}
			break;
			
 			case 1: //pitch
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
     d86:	89 2f       	mov	r24, r25
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	9e 01       	movw	r18, r28
     d8c:	28 0f       	add	r18, r24
     d8e:	39 1f       	adc	r19, r25
     d90:	f9 01       	movw	r30, r18
     d92:	e7 5b       	subi	r30, 0xB7	; 183
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	40 81       	ld	r20, Z
     d98:	bc 96       	adiw	r30, 0x2c	; 44
     d9a:	20 81       	ld	r18, Z
     d9c:	24 17       	cp	r18, r20
     d9e:	09 f4       	brne	.+2      	; 0xda2 <interperetKnob+0x16c>
     da0:	3c c1       	rjmp	.+632    	; 0x101a <interperetKnob+0x3e4>
 			{
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     da2:	2a 85       	ldd	r18, Y+10	; 0x0a
     da4:	24 60       	ori	r18, 0x04	; 4
     da6:	2a 87       	std	Y+10, r18	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     da8:	21 2f       	mov	r18, r17
     daa:	20 61       	ori	r18, 0x10	; 16
     dac:	2b 87       	std	Y+11, r18	; 0x0b
 				currentKnobPattern->outputPitch[positionSelect] = (currentGlobals->filteredKnobBuffer[select]^128);
     dae:	fb 01       	movw	r30, r22
     db0:	e1 0f       	add	r30, r17
     db2:	f1 1d       	adc	r31, r1
     db4:	40 58       	subi	r20, 0x80	; 128
     db6:	40 8b       	std	Z+16, r20	; 0x10
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     db8:	8c 0f       	add	r24, r28
     dba:	9d 1f       	adc	r25, r29
     dbc:	dc 01       	movw	r26, r24
     dbe:	ab 58       	subi	r26, 0x8B	; 139
     dc0:	bf 4f       	sbci	r27, 0xFF	; 255
     dc2:	ec 01       	movw	r28, r24
     dc4:	c7 5b       	subi	r28, 0xB7	; 183
     dc6:	df 4f       	sbci	r29, 0xFF	; 255
     dc8:	88 81       	ld	r24, Y
     dca:	8c 93       	st	X, r24
				outputSampleRate(positionSelect, 0, currentKnobPattern->outputPitch[positionSelect]);
     dcc:	40 89       	ldd	r20, Z+16	; 0x10
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	81 2f       	mov	r24, r17
     dd2:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <outputSampleRate>
     dd6:	21 c1       	rjmp	.+578    	; 0x101a <interperetKnob+0x3e4>
 			}
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
     dd8:	e9 2f       	mov	r30, r25
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	ce 01       	movw	r24, r28
     dde:	8e 0f       	add	r24, r30
     de0:	9f 1f       	adc	r25, r31
     de2:	dc 01       	movw	r26, r24
     de4:	ab 58       	subi	r26, 0x8B	; 139
     de6:	bf 4f       	sbci	r27, 0xFF	; 255
     de8:	0c 91       	ld	r16, X
     dea:	87 5b       	subi	r24, 0xB7	; 183
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	dc 01       	movw	r26, r24
     df0:	8c 91       	ld	r24, X
     df2:	08 17       	cp	r16, r24
     df4:	09 f4       	brne	.+2      	; 0xdf8 <interperetKnob+0x1c2>
     df6:	11 c1       	rjmp	.+546    	; 0x101a <interperetKnob+0x3e4>
			{
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     df8:	ca 2c       	mov	r12, r10
     dfa:	d1 2c       	mov	r13, r1
     dfc:	ab 01       	movw	r20, r22
     dfe:	4c 0d       	add	r20, r12
     e00:	5d 1d       	adc	r21, r13
     e02:	9a 01       	movw	r18, r20
     e04:	28 5a       	subi	r18, 0xA8	; 168
     e06:	3f 4f       	sbci	r19, 0xFF	; 255
     e08:	d9 01       	movw	r26, r18
     e0a:	2c 91       	ld	r18, X
     e0c:	48 5b       	subi	r20, 0xB8	; 184
     e0e:	5f 4f       	sbci	r21, 0xFF	; 255
     e10:	da 01       	movw	r26, r20
     e12:	4c 91       	ld	r20, X
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     e14:	9a 85       	ldd	r25, Y+10	; 0x0a
     e16:	94 60       	ori	r25, 0x04	; 4
     e18:	9a 87       	std	Y+10, r25	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
     e1a:	91 2f       	mov	r25, r17
     e1c:	90 62       	ori	r25, 0x20	; 32
     e1e:	9b 87       	std	Y+11, r25	; 0x0b
				
				if(currentGlobals->currentGPButtons&0x04) 
     e20:	9a 81       	ldd	r25, Y+2	; 0x02
     e22:	92 ff       	sbrs	r25, 2
     e24:	08 c0       	rjmp	.+16     	; 0xe36 <interperetKnob+0x200>
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
			{
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	34 2b       	or	r19, r20
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
				
				if(currentGlobals->currentGPButtons&0x04) 
				{ //if "fine" is on:
					totalAttackTime = totalAttackTime+((currentGlobals->filteredKnobBuffer[select])-(currentGlobals->lastFilteredKnobBuffer[select])); 
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	80 1b       	sub	r24, r16
     e2e:	91 09       	sbc	r25, r1
     e30:	28 0f       	add	r18, r24
     e32:	39 1f       	adc	r19, r25
     e34:	08 c0       	rjmp	.+16     	; 0xe46 <interperetKnob+0x210>
					//this algorithm needs work. We need to not write to Attack time if attack time is less than 20ms. 
					//maybe this algorithm is fine, we just don't print/attack stage for values under 20MS?
				}else
				{
					totalAttackTime = ((currentGlobals->filteredKnobBuffer[select])-1)*238;
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	4e ee       	ldi	r20, 0xEE	; 238
     e3c:	48 9f       	mul	r20, r24
     e3e:	90 01       	movw	r18, r0
     e40:	49 9f       	mul	r20, r25
     e42:	30 0d       	add	r19, r0
     e44:	11 24       	eor	r1, r1
				}
				currentKnobPattern->trackAttackTimeMSB[positionSelectTracks] = ((totalAttackTime)>>8);
     e46:	6c 0d       	add	r22, r12
     e48:	7d 1d       	adc	r23, r13
     e4a:	db 01       	movw	r26, r22
     e4c:	a8 5b       	subi	r26, 0xB8	; 184
     e4e:	bf 4f       	sbci	r27, 0xFF	; 255
     e50:	3c 93       	st	X, r19
				currentKnobPattern->trackAttackTimeLSB[positionSelectTracks] = (totalAttackTime); //this should truncate the top 8 bits. 
     e52:	50 96       	adiw	r26, 0x10	; 16
     e54:	2c 93       	st	X, r18

				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     e56:	ec 0f       	add	r30, r28
     e58:	fd 1f       	adc	r31, r29
     e5a:	df 01       	movw	r26, r30
     e5c:	ab 58       	subi	r26, 0x8B	; 139
     e5e:	bf 4f       	sbci	r27, 0xFF	; 255
     e60:	e7 5b       	subi	r30, 0xB7	; 183
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	80 81       	ld	r24, Z
     e66:	8c 93       	st	X, r24
     e68:	d8 c0       	rjmp	.+432    	; 0x101a <interperetKnob+0x3e4>
			}
			break;
 			
 			case 3: //release Envelope
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
     e6a:	29 2f       	mov	r18, r25
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	ce 01       	movw	r24, r28
     e70:	82 0f       	add	r24, r18
     e72:	93 1f       	adc	r25, r19
     e74:	fc 01       	movw	r30, r24
     e76:	eb 58       	subi	r30, 0x8B	; 139
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	a0 81       	ld	r26, Z
     e7c:	bc 97       	sbiw	r30, 0x2c	; 44
     e7e:	80 81       	ld	r24, Z
     e80:	a8 17       	cp	r26, r24
     e82:	09 f4       	brne	.+2      	; 0xe86 <interperetKnob+0x250>
     e84:	ca c0       	rjmp	.+404    	; 0x101a <interperetKnob+0x3e4>
 			{
				 uint16_t totalReleaseTime = currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks]|((currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks])<<8);
     e86:	6a 2d       	mov	r22, r10
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	f6 01       	movw	r30, r12
     e8c:	e6 0f       	add	r30, r22
     e8e:	f7 1f       	adc	r31, r23
     e90:	ef 01       	movw	r28, r30
     e92:	c8 58       	subi	r28, 0x88	; 136
     e94:	df 4f       	sbci	r29, 0xFF	; 255
     e96:	48 81       	ld	r20, Y
     e98:	e8 59       	subi	r30, 0x98	; 152
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	e0 81       	ld	r30, Z
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     e9e:	e7 01       	movw	r28, r14
     ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea2:	94 60       	ori	r25, 0x04	; 4
     ea4:	9a 87       	std	Y+10, r25	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     ea6:	91 2f       	mov	r25, r17
     ea8:	90 63       	ori	r25, 0x30	; 48
     eaa:	9b 87       	std	Y+11, r25	; 0x0b
				if(currentGlobals->currentGPButtons&0x04)
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	92 ff       	sbrs	r25, 2
     eb0:	08 c0       	rjmp	.+16     	; 0xec2 <interperetKnob+0x28c>
			break;
 			
 			case 3: //release Envelope
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
 			{
				 uint16_t totalReleaseTime = currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks]|((currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks])<<8);
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	5e 2b       	or	r21, r30
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
				if(currentGlobals->currentGPButtons&0x04)
				{ //if "fine" is on:
					totalReleaseTime = totalReleaseTime+((currentGlobals->filteredKnobBuffer[select])-(currentGlobals->lastFilteredKnobBuffer[select]));
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	8a 1b       	sub	r24, r26
     eba:	91 09       	sbc	r25, r1
     ebc:	48 0f       	add	r20, r24
     ebe:	59 1f       	adc	r21, r25
     ec0:	08 c0       	rjmp	.+16     	; 0xed2 <interperetKnob+0x29c>
				}else
				{
					totalReleaseTime = ((currentGlobals->filteredKnobBuffer[select])-1)*238;
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	ee ee       	ldi	r30, 0xEE	; 238
     ec8:	e8 9f       	mul	r30, r24
     eca:	a0 01       	movw	r20, r0
     ecc:	e9 9f       	mul	r30, r25
     ece:	50 0d       	add	r21, r0
     ed0:	11 24       	eor	r1, r1
				}
				currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks] = ((totalReleaseTime)>>8);
     ed2:	c6 0e       	add	r12, r22
     ed4:	d7 1e       	adc	r13, r23
     ed6:	f6 01       	movw	r30, r12
     ed8:	e8 59       	subi	r30, 0x98	; 152
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	50 83       	st	Z, r21
				currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks] = (totalReleaseTime);	
     ede:	70 96       	adiw	r30, 0x10	; 16
     ee0:	40 83       	st	Z, r20
				
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     ee2:	2e 0d       	add	r18, r14
     ee4:	3f 1d       	adc	r19, r15
     ee6:	f9 01       	movw	r30, r18
     ee8:	eb 58       	subi	r30, 0x8B	; 139
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	d9 01       	movw	r26, r18
     eee:	a7 5b       	subi	r26, 0xB7	; 183
     ef0:	bf 4f       	sbci	r27, 0xFF	; 255
     ef2:	8c 91       	ld	r24, X
     ef4:	80 83       	st	Z, r24
     ef6:	91 c0       	rjmp	.+290    	; 0x101a <interperetKnob+0x3e4>
 			}
 			break;
 			
 			case 4:;
 			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
     ef8:	89 2e       	mov	r8, r25
     efa:	91 2c       	mov	r9, r1
     efc:	ce 01       	movw	r24, r28
     efe:	88 0d       	add	r24, r8
     f00:	99 1d       	adc	r25, r9
     f02:	fc 01       	movw	r30, r24
     f04:	eb 58       	subi	r30, 0x8B	; 139
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
     f0a:	bc 97       	sbiw	r30, 0x2c	; 44
     f0c:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
     f0e:	26 17       	cp	r18, r22
     f10:	20 f4       	brcc	.+8      	; 0xf1a <interperetKnob+0x2e4>
	{
		returnMe = v1-v2;
     f12:	d6 2f       	mov	r29, r22
     f14:	d2 1b       	sub	r29, r18
     f16:	2d 2f       	mov	r18, r29
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <interperetKnob+0x2e6>
	}
	else
	{
		returnMe = v2-v1;
     f1a:	26 1b       	sub	r18, r22
 			break;
 			
 			case 4:;
 			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];
 			if(checkVariation(newRead,prevRead)>2)
     f1c:	23 30       	cpi	r18, 0x03	; 3
     f1e:	08 f4       	brcc	.+2      	; 0xf22 <interperetKnob+0x2ec>
     f20:	7c c0       	rjmp	.+248    	; 0x101a <interperetKnob+0x3e4>
 			{
				int16_t negCheckValueTrack = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__floatsisf>
     f2c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <volumeDivisor>
     f30:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <volumeDivisor+0x1>
     f34:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <volumeDivisor+0x2>
     f38:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <volumeDivisor+0x3>
     f3c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__divsf3>
     f40:	2b 01       	movw	r4, r22
     f42:	3c 01       	movw	r6, r24
     f44:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <NegativeOffset>
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__floatsisf>
     f52:	9b 01       	movw	r18, r22
     f54:	ac 01       	movw	r20, r24
     f56:	c3 01       	movw	r24, r6
     f58:	b2 01       	movw	r22, r4
     f5a:	0e 94 01 1c 	call	0x3802	; 0x3802 <__subsf3>
     f5e:	0e 94 ce 1c 	call	0x399c	; 0x399c <__fixsfsi>
     f62:	86 2f       	mov	r24, r22
     f64:	97 2f       	mov	r25, r23
     f66:	9c 01       	movw	r18, r24
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     f68:	f7 01       	movw	r30, r14
     f6a:	82 85       	ldd	r24, Z+10	; 0x0a
     f6c:	84 60       	ori	r24, 0x04	; 4
     f6e:	82 87       	std	Z+10, r24	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     f70:	81 2f       	mov	r24, r17
     f72:	80 64       	ori	r24, 0x40	; 64
     f74:	83 87       	std	Z+11, r24	; 0x0b
				
	 			currentKnobPattern->trackMainVolumeLSB[positionSelectTracks] = (negCheckValueTrack);
     f76:	b1 2c       	mov	r11, r1
     f78:	f6 01       	movw	r30, r12
     f7a:	ea 0d       	add	r30, r10
     f7c:	fb 1d       	adc	r31, r11
     f7e:	60 af       	std	Z+56, r22	; 0x38
	 			if(negCheckValueTrack>(-1))
     f80:	33 23       	and	r19, r19
     f82:	2c f0       	brlt	.+10     	; 0xf8e <interperetKnob+0x358>
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 0;
     f84:	f6 01       	movw	r30, r12
     f86:	ea 0d       	add	r30, r10
     f88:	fb 1d       	adc	r31, r11
     f8a:	10 a6       	std	Z+40, r1	; 0x28
     f8c:	05 c0       	rjmp	.+10     	; 0xf98 <interperetKnob+0x362>
	 			}else
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 255;
     f8e:	8f ef       	ldi	r24, 0xFF	; 255
     f90:	f6 01       	movw	r30, r12
     f92:	ea 0d       	add	r30, r10
     f94:	fb 1d       	adc	r31, r11
     f96:	80 a7       	std	Z+40, r24	; 0x28
	 			}

				
				if(currentKnobPattern->envelopeType[positionSelectTracks]==1||currentKnobPattern->envelopeType[positionSelectTracks]==3) //set track volume directly if Envelope mode is only release, or none. 
     f98:	f6 01       	movw	r30, r12
     f9a:	ea 0d       	add	r30, r10
     f9c:	fb 1d       	adc	r31, r11
     f9e:	e5 51       	subi	r30, 0x15	; 21
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	80 81       	ld	r24, Z
     fa4:	8d 7f       	andi	r24, 0xFD	; 253
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	79 f4       	brne	.+30     	; 0xfc8 <interperetKnob+0x392>
				{
	 				setTrackVolume(currentKnobPattern->trackSampleLSB[positionSelectTracks], currentKnobPattern->trackSampleMSB[positionSelectTracks],
     faa:	e6 01       	movw	r28, r12
     fac:	ca 0d       	add	r28, r10
     fae:	db 1d       	adc	r29, r11
     fb0:	de 01       	movw	r26, r28
     fb2:	a8 56       	subi	r26, 0x68	; 104
     fb4:	bf 4f       	sbci	r27, 0xFF	; 255
     fb6:	fe 01       	movw	r30, r28
     fb8:	e8 55       	subi	r30, 0x58	; 88
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	28 a5       	ldd	r18, Y+40	; 0x28
     fbe:	46 2f       	mov	r20, r22
     fc0:	6c 91       	ld	r22, X
     fc2:	80 81       	ld	r24, Z
     fc4:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <setTrackVolume>
					currentKnobPattern->trackMainVolumeLSB[positionSelectTracks], currentKnobPattern->trackMainVolumeMSB[positionSelectTracks]);
				}
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select]; 
     fc8:	87 01       	movw	r16, r14
     fca:	08 0d       	add	r16, r8
     fcc:	19 1d       	adc	r17, r9
     fce:	f8 01       	movw	r30, r16
     fd0:	eb 58       	subi	r30, 0x8B	; 139
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	d8 01       	movw	r26, r16
     fd6:	a7 5b       	subi	r26, 0xB7	; 183
     fd8:	bf 4f       	sbci	r27, 0xFF	; 255
     fda:	8c 91       	ld	r24, X
     fdc:	80 83       	st	Z, r24
     fde:	1d c0       	rjmp	.+58     	; 0x101a <interperetKnob+0x3e4>
		}
		
		
	}else
	{
		switch (select)
     fe0:	8a 32       	cpi	r24, 0x2A	; 42
     fe2:	d9 f4       	brne	.+54     	; 0x101a <interperetKnob+0x3e4>
// 			break;
// 			
 			case 42:
			 
			 //we need to do a bit more filtering here. Not sure if that's happening here, or in the actual knob read.
			 if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
     fe4:	fa 01       	movw	r30, r20
     fe6:	ed 58       	subi	r30, 0x8D	; 141
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	80 81       	ld	r24, Z
     fec:	bc 96       	adiw	r30, 0x2c	; 44
     fee:	90 81       	ld	r25, Z
     ff0:	98 17       	cp	r25, r24
     ff2:	99 f0       	breq	.+38     	; 0x101a <interperetKnob+0x3e4>
			{//not sure if this works here, but we're going to try it. 
				
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff6:	94 60       	ori	r25, 0x04	; 4
     ff8:	9a 87       	std	Y+10, r25	; 0x0a
				currentGlobals->knobStatus = (5<<4); //since all other pot banks are 0-4, the next ones will be 5-8. We should maybe figure out a better system for this, 
     ffa:	90 e5       	ldi	r25, 0x50	; 80
     ffc:	9b 87       	std	Y+11, r25	; 0x0b
				//maybe some defines?				
 				currentKnobPattern->patternBPM = currentGlobals->filteredKnobBuffer[select];
     ffe:	fb 01       	movw	r30, r22
    1000:	e8 53       	subi	r30, 0x38	; 56
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	91 83       	std	Z+1, r25	; 0x01
    1008:	80 83       	st	Z, r24
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
    100a:	da 01       	movw	r26, r20
    100c:	a1 56       	subi	r26, 0x61	; 97
    100e:	bf 4f       	sbci	r27, 0xFF	; 255
    1010:	fa 01       	movw	r30, r20
    1012:	ed 58       	subi	r30, 0x8D	; 141
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	80 81       	ld	r24, Z
    1018:	8c 93       	st	X, r24
// 			break;
		}
		
	}

}
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	df 90       	pop	r13
    1028:	cf 90       	pop	r12
    102a:	bf 90       	pop	r11
    102c:	af 90       	pop	r10
    102e:	9f 90       	pop	r9
    1030:	8f 90       	pop	r8
    1032:	7f 90       	pop	r7
    1034:	6f 90       	pop	r6
    1036:	5f 90       	pop	r5
    1038:	4f 90       	pop	r4
    103a:	08 95       	ret

0000103c <listenKnobs>:

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
    103c:	ef 92       	push	r14
    103e:	ff 92       	push	r15
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	7c 01       	movw	r14, r24
    1048:	8b 01       	movw	r16, r22
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    104a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
    104c:	8c 2f       	mov	r24, r28
    104e:	88 dd       	rcall	.-1264   	; 0xb60 <selectKnob>
		updateKnob(loopCounter, currentGlobals);
    1050:	b8 01       	movw	r22, r16
    1052:	8c 2f       	mov	r24, r28
    1054:	c5 dd       	rcall	.-1142   	; 0xbe0 <updateKnob>
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
    1056:	a8 01       	movw	r20, r16
    1058:	b7 01       	movw	r22, r14
    105a:	8c 2f       	mov	r24, r28
    105c:	ec dd       	rcall	.-1064   	; 0xc36 <interperetKnob>

}

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    105e:	cf 5f       	subi	r28, 0xFF	; 255
    1060:	cc 32       	cpi	r28, 0x2C	; 44
    1062:	a1 f7       	brne	.-24     	; 0x104c <listenKnobs+0x10>
	{
		selectKnob(loopCounter);
		updateKnob(loopCounter, currentGlobals);
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
	}
}
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	08 95       	ret

00001070 <initLEDs>:
extern Pattern currentPattern;
extern uint8_t currentStep;

void initLEDs()
{
	DDRG = 0B00000111; //outputs on G5,2, and 0.
    1070:	87 e0       	ldi	r24, 0x07	; 7
    1072:	83 bb       	out	0x13, r24	; 19
    1074:	08 95       	ret

00001076 <parseLEDs>:
}
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
    1076:	a2 98       	cbi	0x14, 2	; 20
    1078:	27 e0       	ldi	r18, 0x07	; 7
	for(uint8_t j=0; j<7; j++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    107a:	a0 9a       	sbi	0x14, 0	; 20
		if(gpParse&0x80)
    107c:	66 23       	and	r22, r22
    107e:	14 f4       	brge	.+4      	; 0x1084 <parseLEDs+0xe>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    1080:	a1 9a       	sbi	0x14, 1	; 20
    1082:	01 c0       	rjmp	.+2      	; 0x1086 <parseLEDs+0x10>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    1084:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    1086:	a0 98       	cbi	0x14, 0	; 20
		gpParse = gpParse << 1;
    1088:	66 0f       	add	r22, r22
    108a:	21 50       	subi	r18, 0x01	; 1
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t j=0; j<7; j++)
    108c:	b1 f7       	brne	.-20     	; 0x107a <parseLEDs+0x4>
    108e:	21 e1       	ldi	r18, 0x11	; 17
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    1090:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
    1092:	99 23       	and	r25, r25
    1094:	14 f4       	brge	.+4      	; 0x109a <parseLEDs+0x24>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    1096:	a1 9a       	sbi	0x14, 1	; 20
    1098:	01 c0       	rjmp	.+2      	; 0x109c <parseLEDs+0x26>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    109a:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    109c:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	21 50       	subi	r18, 0x01	; 1
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
    10a4:	a9 f7       	brne	.-22     	; 0x1090 <parseLEDs+0x1a>
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	
	
	PORTG |= (1 << PG2); //latch pin high
    10a6:	a2 9a       	sbi	0x14, 2	; 20
    10a8:	08 95       	ret

000010aa <updateLEDs>:
}

void updateLEDs(Pattern ledCurrentPattern, Globals currentGlobals)
{
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	cf 57       	subi	r28, 0x7F	; 127
    10b4:	de 4f       	sbci	r29, 0xFE	; 254
    10b6:	28 81       	ld	r18, Y
    10b8:	39 81       	ldd	r19, Y+1	; 0x01
    10ba:	c1 58       	subi	r28, 0x81	; 129
    10bc:	d1 40       	sbci	r29, 0x01	; 1
    10be:	cd 57       	subi	r28, 0x7D	; 125
    10c0:	de 4f       	sbci	r29, 0xFE	; 254
    10c2:	68 81       	ld	r22, Y
    10c4:	c3 58       	subi	r28, 0x83	; 131
    10c6:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t shiftedState = currentGlobals.menuState >> 4; //this will get rid of EncoderB
	switch(shiftedState)
    10c8:	c9 57       	subi	r28, 0x79	; 121
    10ca:	de 4f       	sbci	r29, 0xFE	; 254
    10cc:	98 81       	ld	r25, Y
    10ce:	c7 58       	subi	r28, 0x87	; 135
    10d0:	d1 40       	sbci	r29, 0x01	; 1
    10d2:	92 95       	swap	r25
    10d4:	9f 70       	andi	r25, 0x0F	; 15
    10d6:	91 30       	cpi	r25, 0x01	; 1
    10d8:	49 f0       	breq	.+18     	; 0x10ec <updateLEDs+0x42>
    10da:	28 f0       	brcs	.+10     	; 0x10e6 <updateLEDs+0x3c>
    10dc:	92 30       	cpi	r25, 0x02	; 2
    10de:	d1 f0       	breq	.+52     	; 0x1114 <updateLEDs+0x6a>
    10e0:	93 30       	cpi	r25, 0x03	; 3
    10e2:	d9 f0       	breq	.+54     	; 0x111a <updateLEDs+0x70>
    10e4:	1c c0       	rjmp	.+56     	; 0x111e <updateLEDs+0x74>
	{
		case 0:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    10e6:	c9 01       	movw	r24, r18
    10e8:	c6 df       	rcall	.-116    	; 0x1076 <parseLEDs>
		break;
    10ea:	19 c0       	rjmp	.+50     	; 0x111e <updateLEDs+0x74>

		case 1:
		parseLEDs(ledCurrentPattern.trackSequence[currentGlobals.currentStep], currentGlobals.currentGPButtons);
    10ec:	cb 57       	subi	r28, 0x7B	; 123
    10ee:	de 4f       	sbci	r29, 0xFE	; 254
    10f0:	e8 81       	ld	r30, Y
    10f2:	c5 58       	subi	r28, 0x85	; 133
    10f4:	d1 40       	sbci	r29, 0x01	; 1
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	ee 0f       	add	r30, r30
    10fa:	ff 1f       	adc	r31, r31
    10fc:	86 e0       	ldi	r24, 0x06	; 6
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	8c 0f       	add	r24, r28
    1102:	9d 1f       	adc	r25, r29
    1104:	e8 0f       	add	r30, r24
    1106:	f9 1f       	adc	r31, r25
    1108:	e5 50       	subi	r30, 0x05	; 5
    110a:	ff 4f       	sbci	r31, 0xFF	; 255
    110c:	80 81       	ld	r24, Z
    110e:	91 81       	ldd	r25, Z+1	; 0x01
    1110:	b2 df       	rcall	.-156    	; 0x1076 <parseLEDs>
		break;

		case 2:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    1112:	05 c0       	rjmp	.+10     	; 0x111e <updateLEDs+0x74>
    1114:	c9 01       	movw	r24, r18
		break;
    1116:	af df       	rcall	.-162    	; 0x1076 <parseLEDs>

		case 3:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    1118:	02 c0       	rjmp	.+4      	; 0x111e <updateLEDs+0x74>
    111a:	c9 01       	movw	r24, r18
    111c:	ac df       	rcall	.-168    	; 0x1076 <parseLEDs>
		break;
	}

}
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	08 95       	ret

00001124 <main>:
//Pattern may not need to be volatile, but I'd like to keep it around. 
volatile Pattern currentPattern;
volatile Globals currentGlobals;


int main(){
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	c1 5b       	subi	r28, 0xB1	; 177
    112e:	d3 40       	sbci	r29, 0x03	; 3
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
	uint8_t factoryReset=0; // set this to 1 if you would like to fill the eeprom with Factory data, and erase all user data.
	Screen screenBank;
	
	initScreen();
    113a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <initScreen>
	initGlobals(&currentGlobals, factoryReset);  
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	82 e2       	ldi	r24, 0x22	; 34
    1142:	95 e0       	ldi	r25, 0x05	; 5
    1144:	bc dc       	rcall	.-1672   	; 0xabe <initGlobals>
	initButtons();
    1146:	a2 d8       	rcall	.-3772   	; 0x28c <initButtons>
	initLEDs();
    1148:	93 df       	rcall	.-218    	; 0x1070 <initLEDs>
	initEncoders();
    114a:	a2 d9       	rcall	.-3260   	; 0x490 <initEncoders>
    114c:	f4 dc       	rcall	.-1560   	; 0xb36 <initADC>
	initADC();
    114e:	0e 94 76 15 	call	0x2aec	; 0x2aec <serialInit0>
	serialInit0();
    1152:	0e 94 53 11 	call	0x22a6	; 0x22a6 <initMidi>
	initMidi();
    1156:	0e 94 82 15 	call	0x2b04	; 0x2b04 <initEnvelopes>
	initEnvelopes();
    115a:	0e 94 7e 14 	call	0x28fc	; 0x28fc <initSequencer>
	initSequencer();
    115e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <twi_init>
	twi_init();
    1162:	87 ea       	ldi	r24, 0xA7	; 167
	initBank(&currentPattern);
    1164:	93 e0       	ldi	r25, 0x03	; 3
    1166:	7c dc       	rcall	.-1800   	; 0xa60 <initBank>
    1168:	60 91 25 05 	lds	r22, 0x0525	; 0x800525 <currentGlobals+0x3>
		//do factory reset here.
		factoryResetEeprom(currentPattern);
		globalWrite(&currentGlobals);
	}

	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
    116c:	87 ea       	ldi	r24, 0xA7	; 167
    116e:	93 e0       	ldi	r25, 0x03	; 3
    1170:	0e 94 2b 1a 	call	0x3456	; 0x3456 <eepromLoadPattern>
    1174:	00 e0       	ldi	r16, 0x00	; 0
    1176:	10 e0       	ldi	r17, 0x00	; 0
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    1178:	0f 2e       	mov	r0, r31
    117a:	fc e2       	ldi	r31, 0x2C	; 44
	{
		uint8_t loadSelect = i%44;
    117c:	df 2e       	mov	r13, r31
    117e:	f0 2d       	mov	r31, r0
    1180:	98 01       	movw	r18, r16
    1182:	af e2       	ldi	r26, 0x2F	; 47
    1184:	ba eb       	ldi	r27, 0xBA	; 186
    1186:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    118a:	96 95       	lsr	r25
    118c:	87 95       	ror	r24
    118e:	92 95       	swap	r25
    1190:	82 95       	swap	r24
    1192:	8f 70       	andi	r24, 0x0F	; 15
    1194:	89 27       	eor	r24, r25
    1196:	9f 70       	andi	r25, 0x0F	; 15
    1198:	89 27       	eor	r24, r25
    119a:	d8 9e       	mul	r13, r24
    119c:	90 01       	movw	r18, r0
    119e:	d9 9e       	mul	r13, r25
    11a0:	30 0d       	add	r19, r0
    11a2:	11 24       	eor	r1, r1
    11a4:	78 01       	movw	r14, r16
    11a6:	e2 1a       	sub	r14, r18
    11a8:	f3 0a       	sbc	r15, r19
    11aa:	8e 2d       	mov	r24, r14
		selectKnob(loadSelect);
    11ac:	d9 dc       	rcall	.-1614   	; 0xb60 <selectKnob>
    11ae:	62 e2       	ldi	r22, 0x22	; 34
    11b0:	75 e0       	ldi	r23, 0x05	; 5
		updateKnob(loadSelect, &currentGlobals);
    11b2:	8e 2d       	mov	r24, r14
    11b4:	15 dd       	rcall	.-1494   	; 0xbe0 <updateKnob>
    11b6:	0f 5f       	subi	r16, 0xFF	; 255
    11b8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ba:	08 3b       	cpi	r16, 0xB8	; 184
		factoryResetEeprom(currentPattern);
		globalWrite(&currentGlobals);
	}

	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	18 07       	cpc	r17, r24
    11c0:	f9 f6       	brne	.-66     	; 0x1180 <main+0x5c>
    11c2:	82 e2       	ldi	r24, 0x22	; 34
    11c4:	95 e0       	ldi	r25, 0x05	; 5
	{
		uint8_t loadSelect = i%44;
		selectKnob(loadSelect);
		updateKnob(loadSelect, &currentGlobals);
	}
	initializeKnob(&currentGlobals); //then copy it to the lastFilteredKnobBuffer. 
    11c6:	2b dd       	rcall	.-1450   	; 0xc1e <initializeKnob>
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	82 e2       	ldi	r24, 0x22	; 34
    11cc:	95 e0       	ldi	r25, 0x05	; 5
	globalLoad(&currentGlobals, factoryReset);
    11ce:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <globalLoad>
    11d2:	8d b7       	in	r24, 0x3d	; 61
    11d4:	9e b7       	in	r25, 0x3e	; 62
    11d6:	87 5e       	subi	r24, 0xE7	; 231
	initMenu(&screenBank, currentPattern, currentGlobals); //fills screenBank with menu strings
    11d8:	91 09       	sbc	r25, r1
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	9e bf       	out	0x3e, r25	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	8d bf       	out	0x3d, r24	; 61
    11e4:	ad b7       	in	r26, 0x3d	; 61
    11e6:	be b7       	in	r27, 0x3e	; 62
    11e8:	11 96       	adiw	r26, 0x01	; 1
    11ea:	87 ee       	ldi	r24, 0xE7	; 231
    11ec:	e2 e2       	ldi	r30, 0x22	; 34
    11ee:	f5 e0       	ldi	r31, 0x05	; 5
    11f0:	01 90       	ld	r0, Z+
    11f2:	0d 92       	st	X+, r0
    11f4:	8a 95       	dec	r24
    11f6:	e1 f7       	brne	.-8      	; 0x11f0 <main+0xcc>
    11f8:	8d b7       	in	r24, 0x3d	; 61
    11fa:	9e b7       	in	r25, 0x3e	; 62
    11fc:	8b 57       	subi	r24, 0x7B	; 123
    11fe:	91 40       	sbci	r25, 0x01	; 1
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	9e bf       	out	0x3e, r25	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	8d bf       	out	0x3d, r24	; 61
    120a:	ad b7       	in	r26, 0x3d	; 61
    120c:	be b7       	in	r27, 0x3e	; 62
    120e:	11 96       	adiw	r26, 0x01	; 1
    1210:	8b e7       	ldi	r24, 0x7B	; 123
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	e7 ea       	ldi	r30, 0xA7	; 167
    1216:	f3 e0       	ldi	r31, 0x03	; 3
    1218:	01 90       	ld	r0, Z+
    121a:	0d 92       	st	X+, r0
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	e1 f7       	brne	.-8      	; 0x1218 <main+0xf4>
    1220:	ce 01       	movw	r24, r28
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	f8 d0       	rcall	.+496    	; 0x1416 <initMenu>
    1226:	84 e0       	ldi	r24, 0x04	; 4
    1228:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>

	//this ISR is used for Button De-Bouncing. Maybe we could put it somewhere else. 
	TCCR2B = 1<<CS22;//using 64 from pre-scaler
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
	TIMSK2 = 1<<TOIE2;
    1232:	78 94       	sei
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli


	sei();	
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	62 e2       	ldi	r22, 0x22	; 34
    1240:	75 e0       	ldi	r23, 0x05	; 5


while(1) {
	
	
	listenTrigButtons(&currentPattern, &currentGlobals);
    1242:	87 ea       	ldi	r24, 0xA7	; 167
    1244:	93 e0       	ldi	r25, 0x03	; 3
    1246:	29 d8       	rcall	.-4014   	; 0x29a <listenTrigButtons>
    1248:	82 e2       	ldi	r24, 0x22	; 34
    124a:	95 e0       	ldi	r25, 0x05	; 5
    124c:	9f 93       	push	r25
	listenGPButtons(currentPattern, &currentGlobals);
    124e:	8f 93       	push	r24
    1250:	8d b7       	in	r24, 0x3d	; 61
    1252:	9e b7       	in	r25, 0x3e	; 62
    1254:	8b 57       	subi	r24, 0x7B	; 123
    1256:	91 40       	sbci	r25, 0x01	; 1
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	9e bf       	out	0x3e, r25	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	8d bf       	out	0x3d, r24	; 61
    1262:	ad b7       	in	r26, 0x3d	; 61
    1264:	be b7       	in	r27, 0x3e	; 62
    1266:	11 96       	adiw	r26, 0x01	; 1
    1268:	8b e7       	ldi	r24, 0x7B	; 123
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	e7 ea       	ldi	r30, 0xA7	; 167
    126e:	f3 e0       	ldi	r31, 0x03	; 3
    1270:	01 90       	ld	r0, Z+
    1272:	0d 92       	st	X+, r0
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	e1 f7       	brne	.-8      	; 0x1270 <main+0x14c>
    1278:	79 d8       	rcall	.-3854   	; 0x36c <listenGPButtons>
    127a:	8d b7       	in	r24, 0x3d	; 61
    127c:	9e b7       	in	r25, 0x3e	; 62
    127e:	83 58       	subi	r24, 0x83	; 131
	updateLEDs(currentPattern, currentGlobals);
    1280:	9e 4f       	sbci	r25, 0xFE	; 254
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	87 5e       	subi	r24, 0xE7	; 231
    128e:	91 09       	sbc	r25, r1
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	9e bf       	out	0x3e, r25	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	8d bf       	out	0x3d, r24	; 61
    129a:	ad b7       	in	r26, 0x3d	; 61
    129c:	be b7       	in	r27, 0x3e	; 62
    129e:	11 96       	adiw	r26, 0x01	; 1
    12a0:	87 ee       	ldi	r24, 0xE7	; 231
    12a2:	e2 e2       	ldi	r30, 0x22	; 34
    12a4:	f5 e0       	ldi	r31, 0x05	; 5
    12a6:	01 90       	ld	r0, Z+
    12a8:	0d 92       	st	X+, r0
    12aa:	8a 95       	dec	r24
    12ac:	e1 f7       	brne	.-8      	; 0x12a6 <main+0x182>
    12ae:	8d b7       	in	r24, 0x3d	; 61
    12b0:	9e b7       	in	r25, 0x3e	; 62
    12b2:	8b 57       	subi	r24, 0x7B	; 123
    12b4:	91 40       	sbci	r25, 0x01	; 1
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	9e bf       	out	0x3e, r25	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	8d bf       	out	0x3d, r24	; 61
    12c0:	ad b7       	in	r26, 0x3d	; 61
    12c2:	be b7       	in	r27, 0x3e	; 62
    12c4:	11 96       	adiw	r26, 0x01	; 1
    12c6:	8b e7       	ldi	r24, 0x7B	; 123
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	e7 ea       	ldi	r30, 0xA7	; 167
    12cc:	f3 e0       	ldi	r31, 0x03	; 3
    12ce:	01 90       	ld	r0, Z+
    12d0:	0d 92       	st	X+, r0
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	e1 f7       	brne	.-8      	; 0x12ce <main+0x1aa>
    12d6:	e9 de       	rcall	.-558    	; 0x10aa <updateLEDs>
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
	listenEncoders(&currentPattern, &currentGlobals);
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	62 e2       	ldi	r22, 0x22	; 34
    12e4:	75 e0       	ldi	r23, 0x05	; 5
    12e6:	87 ea       	ldi	r24, 0xA7	; 167
    12e8:	93 e0       	ldi	r25, 0x03	; 3
    12ea:	58 d9       	rcall	.-3408   	; 0x59c <listenEncoders>
    12ec:	62 e2       	ldi	r22, 0x22	; 34
    12ee:	75 e0       	ldi	r23, 0x05	; 5
	listenKnobs(&currentPattern, &currentGlobals);
    12f0:	87 ea       	ldi	r24, 0xA7	; 167
    12f2:	93 e0       	ldi	r25, 0x03	; 3
    12f4:	a3 de       	rcall	.-698    	; 0x103c <listenKnobs>
    12f6:	8d b7       	in	r24, 0x3d	; 61
    12f8:	9e b7       	in	r25, 0x3e	; 62
    12fa:	87 5e       	subi	r24, 0xE7	; 231
	updateSequencer(currentPattern, currentGlobals);
    12fc:	91 09       	sbc	r25, r1
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	9e bf       	out	0x3e, r25	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	8d bf       	out	0x3d, r24	; 61
    1308:	ad b7       	in	r26, 0x3d	; 61
    130a:	be b7       	in	r27, 0x3e	; 62
    130c:	11 96       	adiw	r26, 0x01	; 1
    130e:	87 ee       	ldi	r24, 0xE7	; 231
    1310:	e2 e2       	ldi	r30, 0x22	; 34
    1312:	f5 e0       	ldi	r31, 0x05	; 5
    1314:	01 90       	ld	r0, Z+
    1316:	0d 92       	st	X+, r0
    1318:	8a 95       	dec	r24
    131a:	e1 f7       	brne	.-8      	; 0x1314 <main+0x1f0>
    131c:	8d b7       	in	r24, 0x3d	; 61
    131e:	9e b7       	in	r25, 0x3e	; 62
    1320:	8b 57       	subi	r24, 0x7B	; 123
    1322:	91 40       	sbci	r25, 0x01	; 1
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	9e bf       	out	0x3e, r25	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	8d bf       	out	0x3d, r24	; 61
    132e:	ad b7       	in	r26, 0x3d	; 61
    1330:	be b7       	in	r27, 0x3e	; 62
    1332:	11 96       	adiw	r26, 0x01	; 1
    1334:	8b e7       	ldi	r24, 0x7B	; 123
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	e7 ea       	ldi	r30, 0xA7	; 167
    133a:	f3 e0       	ldi	r31, 0x03	; 3
    133c:	01 90       	ld	r0, Z+
    133e:	0d 92       	st	X+, r0
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	e1 f7       	brne	.-8      	; 0x133c <main+0x218>
    1344:	0e 94 9e 14 	call	0x293c	; 0x293c <updateSequencer>
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
	updateScreen(&screenBank, &currentPattern, &currentGlobals);
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	42 e2       	ldi	r20, 0x22	; 34
    1354:	55 e0       	ldi	r21, 0x05	; 5
    1356:	67 ea       	ldi	r22, 0xA7	; 167
    1358:	73 e0       	ldi	r23, 0x03	; 3
    135a:	ce 01       	movw	r24, r28
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	9b d1       	rcall	.+822    	; 0x1696 <updateScreen>
    1360:	8d b7       	in	r24, 0x3d	; 61
    1362:	9e b7       	in	r25, 0x3e	; 62
    1364:	87 5e       	subi	r24, 0xE7	; 231
	midiRead(currentPattern, currentGlobals);
    1366:	91 09       	sbc	r25, r1
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	9e bf       	out	0x3e, r25	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	8d bf       	out	0x3d, r24	; 61
    1372:	ad b7       	in	r26, 0x3d	; 61
    1374:	be b7       	in	r27, 0x3e	; 62
    1376:	11 96       	adiw	r26, 0x01	; 1
    1378:	87 ee       	ldi	r24, 0xE7	; 231
    137a:	e2 e2       	ldi	r30, 0x22	; 34
    137c:	f5 e0       	ldi	r31, 0x05	; 5
    137e:	01 90       	ld	r0, Z+
    1380:	0d 92       	st	X+, r0
    1382:	8a 95       	dec	r24
    1384:	e1 f7       	brne	.-8      	; 0x137e <main+0x25a>
    1386:	8d b7       	in	r24, 0x3d	; 61
    1388:	9e b7       	in	r25, 0x3e	; 62
    138a:	8b 57       	subi	r24, 0x7B	; 123
    138c:	91 40       	sbci	r25, 0x01	; 1
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	9e bf       	out	0x3e, r25	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	8d bf       	out	0x3d, r24	; 61
    1398:	ad b7       	in	r26, 0x3d	; 61
    139a:	be b7       	in	r27, 0x3e	; 62
    139c:	11 96       	adiw	r26, 0x01	; 1
    139e:	8b e7       	ldi	r24, 0x7B	; 123
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	e7 ea       	ldi	r30, 0xA7	; 167
    13a4:	f3 e0       	ldi	r31, 0x03	; 3
    13a6:	01 90       	ld	r0, Z+
    13a8:	0d 92       	st	X+, r0
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <main+0x282>
    13ae:	8b d7       	rcall	.+3862   	; 0x22c6 <midiRead>
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
	releaseUpdate(&currentPattern, &currentGlobals);
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	62 e2       	ldi	r22, 0x22	; 34
    13bc:	75 e0       	ldi	r23, 0x05	; 5
    13be:	87 ea       	ldi	r24, 0xA7	; 167
    13c0:	93 e0       	ldi	r25, 0x03	; 3
    13c2:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <releaseUpdate>
    13c6:	3b cf       	rjmp	.-394    	; 0x123e <main+0x11a>

000013c8 <__vector_32>:
    13c8:	1f 92       	push	r1
    13ca:	0f 92       	push	r0
    13cc:	0f b6       	in	r0, 0x3f	; 63

	}
}

ISR(TIMER3_COMPA_vect)
{
    13ce:	0f 92       	push	r0
    13d0:	11 24       	eor	r1, r1
    13d2:	0b b6       	in	r0, 0x3b	; 59
    13d4:	0f 92       	push	r0
    13d6:	8f 93       	push	r24
    13d8:	9f 93       	push	r25
    13da:	af 93       	push	r26
    13dc:	bf 93       	push	r27
    13de:	ef 93       	push	r30
    13e0:	ff 93       	push	r31
	currentGlobals.releaseCounter++; //this will increase every millisecond.
    13e2:	e3 ec       	ldi	r30, 0xC3	; 195
    13e4:	f5 e0       	ldi	r31, 0x05	; 5
    13e6:	80 81       	ld	r24, Z
    13e8:	91 81       	ldd	r25, Z+1	; 0x01
    13ea:	a2 81       	ldd	r26, Z+2	; 0x02
    13ec:	b3 81       	ldd	r27, Z+3	; 0x03
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	a1 1d       	adc	r26, r1
    13f2:	b1 1d       	adc	r27, r1
    13f4:	80 83       	st	Z, r24
    13f6:	91 83       	std	Z+1, r25	; 0x01
    13f8:	a2 83       	std	Z+2, r26	; 0x02
    13fa:	b3 83       	std	Z+3, r27	; 0x03
	//should run for about 1000 hours before overflow, so not something we really have to worry about.
    13fc:	ff 91       	pop	r31
    13fe:	ef 91       	pop	r30
    1400:	bf 91       	pop	r27
    1402:	af 91       	pop	r26
    1404:	9f 91       	pop	r25
    1406:	8f 91       	pop	r24
    1408:	0f 90       	pop	r0
    140a:	0b be       	out	0x3b, r0	; 59
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti

00001416 <initMenu>:
uint8_t prevMenuState; //do we need this anymore?

//I don't like using a global extern here, instead of a passed pointer,
//but I can't seem to get the struct to stay in scope.
void initMenu(Screen *initTheScreen, Pattern currentPattern, Globals currentGlobals)
{
    1416:	cf 92       	push	r12
    1418:	df 92       	push	r13
    141a:	ef 92       	push	r14
    141c:	ff 92       	push	r15
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	8c 01       	movw	r16, r24
    142c:	c6 57       	subi	r28, 0x76	; 118
    142e:	de 4f       	sbci	r29, 0xFE	; 254
    1430:	e8 80       	ld	r14, Y
    1432:	ca 58       	subi	r28, 0x8A	; 138
    1434:	d1 40       	sbci	r29, 0x01	; 1

//screen0
initArrays(initTheScreen->screen0,0,"Performance Mode");
    1436:	40 e6       	ldi	r20, 0x60	; 96
    1438:	52 e0       	ldi	r21, 0x02	; 2
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	d1 da       	rcall	.-2654   	; 0x9e2 <initArrays>
initArrays(initTheScreen->screen0,1,"Pattern:");
    1440:	41 e7       	ldi	r20, 0x71	; 113
    1442:	52 e0       	ldi	r21, 0x02	; 2
    1444:	61 e0       	ldi	r22, 0x01	; 1
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	c8 01       	movw	r24, r16
    144a:	cb da       	rcall	.-2666   	; 0x9e2 <initArrays>
initArrays(initTheScreen->screen0,2,"BPM:");
    144c:	4a e7       	ldi	r20, 0x7A	; 122
    144e:	52 e0       	ldi	r21, 0x02	; 2
    1450:	62 e0       	ldi	r22, 0x02	; 2
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	c8 01       	movw	r24, r16
    1456:	c5 da       	rcall	.-2678   	; 0x9e2 <initArrays>
initArrays(initTheScreen->screen0,3,"Stop");
    1458:	4f e7       	ldi	r20, 0x7F	; 127
    145a:	52 e0       	ldi	r21, 0x02	; 2
    145c:	63 e0       	ldi	r22, 0x03	; 3
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	c8 01       	movw	r24, r16
    1462:	bf da       	rcall	.-2690   	; 0x9e2 <initArrays>

//screen1
initArrays(initTheScreen->screen1,0,"Sequence Edit");
    1464:	68 01       	movw	r12, r16
    1466:	8d eb       	ldi	r24, 0xBD	; 189
    1468:	c8 0e       	add	r12, r24
    146a:	d1 1c       	adc	r13, r1
    146c:	44 e8       	ldi	r20, 0x84	; 132
    146e:	52 e0       	ldi	r21, 0x02	; 2
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	c6 01       	movw	r24, r12
    1476:	b5 da       	rcall	.-2710   	; 0x9e2 <initArrays>
initArrays(initTheScreen->screen1,1,"Pattern:");
    1478:	41 e7       	ldi	r20, 0x71	; 113
    147a:	52 e0       	ldi	r21, 0x02	; 2
    147c:	61 e0       	ldi	r22, 0x01	; 1
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	c6 01       	movw	r24, r12
    1482:	af da       	rcall	.-2722   	; 0x9e2 <initArrays>
initArrays(initTheScreen->screen1,2,"Steps:");
    1484:	42 e9       	ldi	r20, 0x92	; 146
    1486:	52 e0       	ldi	r21, 0x02	; 2
    1488:	62 e0       	ldi	r22, 0x02	; 2
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	c6 01       	movw	r24, r12
    148e:	a9 da       	rcall	.-2734   	; 0x9e2 <initArrays>
initArrays(initTheScreen->screen1,3,"Step number:");
    1490:	49 e9       	ldi	r20, 0x99	; 153
    1492:	52 e0       	ldi	r21, 0x02	; 2
    1494:	63 e0       	ldi	r22, 0x03	; 3
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	c6 01       	movw	r24, r12
    149a:	a3 da       	rcall	.-2746   	; 0x9e2 <initArrays>
    149c:	68 01       	movw	r12, r16

//screen2
initArrays(initTheScreen->screen2,0,"Track Settings");
    149e:	86 e8       	ldi	r24, 0x86	; 134
    14a0:	c8 1a       	sub	r12, r24
    14a2:	8e ef       	ldi	r24, 0xFE	; 254
    14a4:	d8 0a       	sbc	r13, r24
    14a6:	46 ea       	ldi	r20, 0xA6	; 166
    14a8:	52 e0       	ldi	r21, 0x02	; 2
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	c6 01       	movw	r24, r12
    14b0:	98 da       	rcall	.-2768   	; 0x9e2 <initArrays>
initArrays(initTheScreen->screen2,1,"Track:");
    14b2:	45 eb       	ldi	r20, 0xB5	; 181
    14b4:	52 e0       	ldi	r21, 0x02	; 2
    14b6:	61 e0       	ldi	r22, 0x01	; 1
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	c6 01       	movw	r24, r12
    14bc:	92 da       	rcall	.-2780   	; 0x9e2 <initArrays>
initArrays(initTheScreen->screen2,2,"PlayMode:");
    14be:	4c eb       	ldi	r20, 0xBC	; 188
    14c0:	52 e0       	ldi	r21, 0x02	; 2
    14c2:	62 e0       	ldi	r22, 0x02	; 2
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	c6 01       	movw	r24, r12
    14c8:	8c da       	rcall	.-2792   	; 0x9e2 <initArrays>
initArrays(initTheScreen->screen2,3,"OutRoute:");
    14ca:	46 ec       	ldi	r20, 0xC6	; 198
    14cc:	52 e0       	ldi	r21, 0x02	; 2
    14ce:	63 e0       	ldi	r22, 0x03	; 3
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	c6 01       	movw	r24, r12
    14d4:	86 da       	rcall	.-2804   	; 0x9e2 <initArrays>
initArrays(initTheScreen->screen2,4,"EnvelopeMode:");
    14d6:	40 ed       	ldi	r20, 0xD0	; 208
    14d8:	52 e0       	ldi	r21, 0x02	; 2
    14da:	64 e0       	ldi	r22, 0x04	; 4
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	c6 01       	movw	r24, r12
    14e0:	80 da       	rcall	.-2816   	; 0x9e2 <initArrays>
    14e2:	4e ed       	ldi	r20, 0xDE	; 222
initArrays(initTheScreen->screen2,5,"SustainTime:      S");
    14e4:	52 e0       	ldi	r21, 0x02	; 2
    14e6:	65 e0       	ldi	r22, 0x05	; 5
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	c6 01       	movw	r24, r12
    14ec:	7a da       	rcall	.-2828   	; 0x9e2 <initArrays>
    14ee:	68 01       	movw	r12, r16

//screen3
initArrays(initTheScreen->screen3,1,"Midi Channel:");
    14f0:	89 ec       	ldi	r24, 0xC9	; 201
    14f2:	c8 1a       	sub	r12, r24
    14f4:	8d ef       	ldi	r24, 0xFD	; 253
    14f6:	d8 0a       	sbc	r13, r24
    14f8:	42 ef       	ldi	r20, 0xF2	; 242
    14fa:	52 e0       	ldi	r21, 0x02	; 2
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	c6 01       	movw	r24, r12
    1502:	6f da       	rcall	.-2850   	; 0x9e2 <initArrays>
initArrays(initTheScreen->screen3,2,"Midi trig   :");
    1504:	40 e0       	ldi	r20, 0x00	; 0
    1506:	53 e0       	ldi	r21, 0x03	; 3
    1508:	62 e0       	ldi	r22, 0x02	; 2
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	c6 01       	movw	r24, r12
    150e:	69 da       	rcall	.-2862   	; 0x9e2 <initArrays>
initArrays(initTheScreen->screen3,3," ");
    1510:	40 e9       	ldi	r20, 0x90	; 144
    1512:	53 e0       	ldi	r21, 0x03	; 3
    1514:	63 e0       	ldi	r22, 0x03	; 3
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	c6 01       	movw	r24, r12
    151a:	63 da       	rcall	.-2874   	; 0x9e2 <initArrays>
initArrays(initTheScreen->screen3,0,"Global Settings");
    151c:	4e e0       	ldi	r20, 0x0E	; 14
    151e:	53 e0       	ldi	r21, 0x03	; 3
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	c6 01       	movw	r24, r12
    1526:	5d da       	rcall	.-2886   	; 0x9e2 <initArrays>

//init all of the knob arrays:
initArrays(initTheScreen->knobScreen,0,"OutVolume x : xxxdb");//string 0 is outVolume
    1528:	68 01       	movw	r12, r16
    152a:	8c e0       	ldi	r24, 0x0C	; 12
    152c:	c8 1a       	sub	r12, r24
    152e:	8d ef       	ldi	r24, 0xFD	; 253
    1530:	d8 0a       	sbc	r13, r24
    1532:	4e e1       	ldi	r20, 0x1E	; 30
    1534:	53 e0       	ldi	r21, 0x03	; 3
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,1,"Pitch : xxx");//string 1 is pitch
    153c:	52 da       	rcall	.-2908   	; 0x9e2 <initArrays>
    153e:	42 e3       	ldi	r20, 0x32	; 50
    1540:	53 e0       	ldi	r21, 0x03	; 3
    1542:	61 e0       	ldi	r22, 0x01	; 1
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,2,"AttackTime  :      S"); //string 2 is Envelope gain
    1548:	4c da       	rcall	.-2920   	; 0x9e2 <initArrays>
    154a:	4e e3       	ldi	r20, 0x3E	; 62
    154c:	53 e0       	ldi	r21, 0x03	; 3
    154e:	62 e0       	ldi	r22, 0x02	; 2
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	c6 01       	movw	r24, r12
    1554:	46 da       	rcall	.-2932   	; 0x9e2 <initArrays>
initArrays(initTheScreen->knobScreen,3,"ReleaseTimexx:xx xxx"); //string 3 is Envelop Time
    1556:	43 e5       	ldi	r20, 0x53	; 83
    1558:	53 e0       	ldi	r21, 0x03	; 3
    155a:	63 e0       	ldi	r22, 0x03	; 3
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	c6 01       	movw	r24, r12
    1560:	40 da       	rcall	.-2944   	; 0x9e2 <initArrays>
initArrays(initTheScreen->knobScreen,4,"TrackVolume xx:xxxdb"); //string 4 is track Level.
    1562:	48 e6       	ldi	r20, 0x68	; 104
    1564:	53 e0       	ldi	r21, 0x03	; 3
    1566:	64 e0       	ldi	r22, 0x04	; 4
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	c6 01       	movw	r24, r12
    156c:	3a da       	rcall	.-2956   	; 0x9e2 <initArrays>
    156e:	cc 52       	subi	r28, 0x2C	; 44
//initArrays(initTheScreen->knobScreen,5,"BPM: ");
//we might want to put in one of these for BPM, but I'm not sure. 

numPrinter(initTheScreen->screen0[2],5,3, currentPattern.patternBPM);
    1570:	df 4f       	sbci	r29, 0xFF	; 255
    1572:	28 81       	ld	r18, Y
    1574:	39 81       	ldd	r19, Y+1	; 0x01
    1576:	c4 5d       	subi	r28, 0xD4	; 212
    1578:	d0 40       	sbci	r29, 0x00	; 0
    157a:	43 e0       	ldi	r20, 0x03	; 3
    157c:	65 e0       	ldi	r22, 0x05	; 5
    157e:	c8 01       	movw	r24, r16
    1580:	8a 96       	adiw	r24, 0x2a	; 42
    1582:	ad d7       	rcall	.+3930   	; 0x24de <numPrinter>
    1584:	cd 56       	subi	r28, 0x6D	; 109
numPrinter(initTheScreen->screen3[1],14,2, (currentGlobals.midiChannel)+1);
    1586:	de 4f       	sbci	r29, 0xFE	; 254
    1588:	28 81       	ld	r18, Y
    158a:	c3 59       	subi	r28, 0x93	; 147
    158c:	d1 40       	sbci	r29, 0x01	; 1
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	2f 5f       	subi	r18, 0xFF	; 255
    1592:	3f 4f       	sbci	r19, 0xFF	; 255
    1594:	42 e0       	ldi	r20, 0x02	; 2
    1596:	6e e0       	ldi	r22, 0x0E	; 14
    1598:	c8 01       	movw	r24, r16
    159a:	84 5b       	subi	r24, 0xB4	; 180
    159c:	9d 4f       	sbci	r25, 0xFD	; 253
    159e:	9f d7       	rcall	.+3902   	; 0x24de <numPrinter>
    15a0:	f1 2c       	mov	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    15a2:	8f ef       	ldi	r24, 0xFF	; 255
    15a4:	e8 1a       	sub	r14, r24
    15a6:	f8 0a       	sbc	r15, r24
    15a8:	97 01       	movw	r18, r14
    15aa:	43 e0       	ldi	r20, 0x03	; 3
    15ac:	69 e0       	ldi	r22, 0x09	; 9
    15ae:	c8 01       	movw	r24, r16
    15b0:	45 96       	adiw	r24, 0x15	; 21
    15b2:	95 d7       	rcall	.+3882   	; 0x24de <numPrinter>
    15b4:	97 01       	movw	r18, r14
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    15b6:	43 e0       	ldi	r20, 0x03	; 3
    15b8:	69 e0       	ldi	r22, 0x09	; 9
    15ba:	c8 01       	movw	r24, r16
    15bc:	8e 52       	subi	r24, 0x2E	; 46
    15be:	9f 4f       	sbci	r25, 0xFF	; 255
    15c0:	8e d7       	rcall	.+3868   	; 0x24de <numPrinter>
    15c2:	ca 52       	subi	r28, 0x2A	; 42
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
    15c4:	df 4f       	sbci	r29, 0xFF	; 255
    15c6:	28 81       	ld	r18, Y
    15c8:	c6 5d       	subi	r28, 0xD6	; 214
    15ca:	d0 40       	sbci	r29, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	42 e0       	ldi	r20, 0x02	; 2
    15d0:	67 e0       	ldi	r22, 0x07	; 7
    15d2:	c8 01       	movw	r24, r16
    15d4:	89 51       	subi	r24, 0x19	; 25
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	82 d7       	rcall	.+3844   	; 0x24de <numPrinter>
    15da:	c5 57       	subi	r28, 0x75	; 117
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
    15dc:	de 4f       	sbci	r29, 0xFE	; 254
    15de:	28 81       	ld	r18, Y
    15e0:	cb 58       	subi	r28, 0x8B	; 139
    15e2:	d1 40       	sbci	r29, 0x01	; 1
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	2f 5f       	subi	r18, 0xFF	; 255
    15e8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ea:	42 e0       	ldi	r20, 0x02	; 2
    15ec:	6d e0       	ldi	r22, 0x0D	; 13
    15ee:	c8 01       	movw	r24, r16
    15f0:	84 50       	subi	r24, 0x04	; 4
    15f2:	9f 4f       	sbci	r25, 0xFF	; 255
    15f4:	74 d7       	rcall	.+3816   	; 0x24de <numPrinter>
    15f6:	e1 2c       	mov	r14, r1
    15f8:	f1 2c       	mov	r15, r1
    15fa:	b7 01       	movw	r22, r14
    15fc:	c8 01       	movw	r24, r16
 
	for(uint8_t i=0;i<4; i++ )
	{
		outputS(initTheScreen->screen0[i],i);
    15fe:	57 d7       	rcall	.+3758   	; 0x24ae <outputS>
    1600:	8f ef       	ldi	r24, 0xFF	; 255
    1602:	e8 1a       	sub	r14, r24
    1604:	f8 0a       	sbc	r15, r24
    1606:	0b 5e       	subi	r16, 0xEB	; 235
    1608:	1f 4f       	sbci	r17, 0xFF	; 255
    160a:	84 e0       	ldi	r24, 0x04	; 4
    160c:	e8 16       	cp	r14, r24
    160e:	f1 04       	cpc	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
 
	for(uint8_t i=0;i<4; i++ )
    1610:	a1 f7       	brne	.-24     	; 0x15fa <initMenu+0x1e4>
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	1f 91       	pop	r17
	{
		outputS(initTheScreen->screen0[i],i);
	}
}
    1618:	0f 91       	pop	r16
    161a:	ff 90       	pop	r15
    161c:	ef 90       	pop	r14
    161e:	df 90       	pop	r13
    1620:	cf 90       	pop	r12
    1622:	08 95       	ret

00001624 <reInitMenuOnLoad>:
    1624:	ef 92       	push	r14
    1626:	ff 92       	push	r15
    1628:	0f 93       	push	r16

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(Screen *initTheScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	ec 01       	movw	r28, r24
    1632:	8b 01       	movw	r16, r22
    1634:	7a 01       	movw	r14, r20
	numPrinter(initTheScreen->screen0[2],5,3, currentPattern->patternBPM);
    1636:	fb 01       	movw	r30, r22
    1638:	e8 53       	subi	r30, 0x38	; 56
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	20 81       	ld	r18, Z
    163e:	31 81       	ldd	r19, Z+1	; 0x01
    1640:	43 e0       	ldi	r20, 0x03	; 3
    1642:	65 e0       	ldi	r22, 0x05	; 5
    1644:	8a 96       	adiw	r24, 0x2a	; 42
    1646:	4b d7       	rcall	.+3734   	; 0x24de <numPrinter>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
    1648:	f8 01       	movw	r30, r16
    164a:	e6 53       	subi	r30, 0x36	; 54
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	20 81       	ld	r18, Z
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	42 e0       	ldi	r20, 0x02	; 2
    1654:	67 e0       	ldi	r22, 0x07	; 7
    1656:	ce 01       	movw	r24, r28
    1658:	89 51       	subi	r24, 0x19	; 25
    165a:	9f 4f       	sbci	r25, 0xFF	; 255
    165c:	40 d7       	rcall	.+3712   	; 0x24de <numPrinter>
	numPrinter(initTheScreen->screen1[1],9,3,(currentGlobals->currentPatternNumber)+1);
    165e:	f7 01       	movw	r30, r14
    1660:	23 81       	ldd	r18, Z+3	; 0x03
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	2f 5f       	subi	r18, 0xFF	; 255
    1666:	3f 4f       	sbci	r19, 0xFF	; 255
    1668:	43 e0       	ldi	r20, 0x03	; 3
    166a:	69 e0       	ldi	r22, 0x09	; 9
    166c:	ce 01       	movw	r24, r28
    166e:	8e 52       	subi	r24, 0x2E	; 46
    1670:	9f 4f       	sbci	r25, 0xFF	; 255
    1672:	35 d7       	rcall	.+3690   	; 0x24de <numPrinter>
	numPrinter(initTheScreen->screen0[1],9,3,(currentGlobals->currentPatternNumber)+1);
    1674:	f7 01       	movw	r30, r14
    1676:	23 81       	ldd	r18, Z+3	; 0x03
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	2f 5f       	subi	r18, 0xFF	; 255
    167c:	3f 4f       	sbci	r19, 0xFF	; 255
    167e:	43 e0       	ldi	r20, 0x03	; 3
    1680:	69 e0       	ldi	r22, 0x09	; 9
    1682:	ce 01       	movw	r24, r28
    1684:	45 96       	adiw	r24, 0x15	; 21
    1686:	2b d7       	rcall	.+3670   	; 0x24de <numPrinter>
}
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	1f 91       	pop	r17
    168e:	0f 91       	pop	r16
    1690:	ff 90       	pop	r15
    1692:	ef 90       	pop	r14
    1694:	08 95       	ret

00001696 <updateScreen>:

void updateScreen(Screen *menuScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    1696:	8f 92       	push	r8
    1698:	9f 92       	push	r9
    169a:	af 92       	push	r10
    169c:	bf 92       	push	r11
    169e:	cf 92       	push	r12
    16a0:	df 92       	push	r13
    16a2:	ef 92       	push	r14
    16a4:	ff 92       	push	r15
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	8c 01       	movw	r16, r24
    16b0:	7b 01       	movw	r14, r22
    16b2:	ea 01       	movw	r28, r20
	
	if((currentGlobals->valueChangeFlag)&(1<<encoderChange))//check if encoder bit is high
    16b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    16b6:	80 ff       	sbrs	r24, 0
    16b8:	da c2       	rjmp	.+1460   	; 0x1c6e <updateScreen+0x5d8>
	{ 
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<encoderChange));//set encoder bit low, and carry our whatever encoder change has occurred. 
    16ba:	1a 86       	std	Y+10, r1	; 0x0a
		//we need to debug this to make sure it's doing what we think it's doing.
		switch(currentGlobals->menuState)
    16bc:	8e 81       	ldd	r24, Y+6	; 0x06
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	8b 33       	cpi	r24, 0x3B	; 59
    16c2:	91 05       	cpc	r25, r1
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <updateScreen+0x32>
    16c6:	d0 c2       	rjmp	.+1440   	; 0x1c68 <updateScreen+0x5d2>
    16c8:	fc 01       	movw	r30, r24
    16ca:	88 27       	eor	r24, r24
    16cc:	e3 55       	subi	r30, 0x53	; 83
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	8f 4f       	sbci	r24, 0xFF	; 255
    16d2:	0c 94 bc 1d 	jmp	0x3b78	; 0x3b78 <__tablejump2__>
		{
			case PreformanceModeInit: //initial state
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    16d6:	c8 01       	movw	r24, r16
    16d8:	a5 df       	rcall	.-182    	; 0x1624 <reInitMenuOnLoad>
			outputS(menuScreen->screen0[0], 0);
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	c8 01       	movw	r24, r16
    16e0:	e6 d6       	rcall	.+3532   	; 0x24ae <outputS>
			outputS(menuScreen->screen0[1], 1);
    16e2:	61 e0       	ldi	r22, 0x01	; 1
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	c8 01       	movw	r24, r16
    16e8:	45 96       	adiw	r24, 0x15	; 21
    16ea:	e1 d6       	rcall	.+3522   	; 0x24ae <outputS>
			outputS(menuScreen->screen0[2], 2);
    16ec:	62 e0       	ldi	r22, 0x02	; 2
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	c8 01       	movw	r24, r16
    16f2:	8a 96       	adiw	r24, 0x2a	; 42
    16f4:	dc d6       	rcall	.+3512   	; 0x24ae <outputS>
			outputS(menuScreen->screen0[3], 3);
    16f6:	63 e0       	ldi	r22, 0x03	; 3
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	c8 01       	movw	r24, r16
    16fc:	cf 96       	adiw	r24, 0x3f	; 63
    16fe:	d7 d6       	rcall	.+3502   	; 0x24ae <outputS>
			break;
    1700:	b3 c2       	rjmp	.+1382   	; 0x1c68 <updateScreen+0x5d2>

			case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0);
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	c8 01       	movw	r24, r16
    1708:	83 54       	subi	r24, 0x43	; 67
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	d0 d6       	rcall	.+3488   	; 0x24ae <outputS>
			outputS(menuScreen->screen1[1], 1);
    170e:	61 e0       	ldi	r22, 0x01	; 1
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	c8 01       	movw	r24, r16
    1714:	8e 52       	subi	r24, 0x2E	; 46
    1716:	9f 4f       	sbci	r25, 0xFF	; 255
    1718:	ca d6       	rcall	.+3476   	; 0x24ae <outputS>
			outputS(menuScreen->screen1[2], 2);
    171a:	62 e0       	ldi	r22, 0x02	; 2
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	c8 01       	movw	r24, r16
    1720:	89 51       	subi	r24, 0x19	; 25
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	c4 d6       	rcall	.+3464   	; 0x24ae <outputS>
			outputS(menuScreen->screen1[3], 3);
    1726:	63 e0       	ldi	r22, 0x03	; 3
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	c8 01       	movw	r24, r16
    172c:	84 50       	subi	r24, 0x04	; 4
    172e:	9f 4f       	sbci	r25, 0xFF	; 255
    1730:	be d6       	rcall	.+3452   	; 0x24ae <outputS>
    1732:	81 e1       	ldi	r24, 0x11	; 17
			currentGlobals->menuState = SequencerMenuArrow1; 
    1734:	8e 83       	std	Y+6, r24	; 0x06
    1736:	88 e0       	ldi	r24, 0x08	; 8
			
			
			case SequencerMenuArrow1:
			menuScreen->screen1[1][19]= 8;
    1738:	f8 01       	movw	r30, r16
    173a:	eb 51       	subi	r30, 0x1B	; 27
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	80 83       	st	Z, r24
    1740:	80 e2       	ldi	r24, 0x20	; 32
			menuScreen->screen1[2][19] = ' ';
    1742:	75 96       	adiw	r30, 0x15	; 21
    1744:	80 83       	st	Z, r24
			menuScreen->screen1[3][19] = ' ';
    1746:	75 96       	adiw	r30, 0x15	; 21
    1748:	80 83       	st	Z, r24
			outputS(menuScreen->screen1[1], 1);
    174a:	61 e0       	ldi	r22, 0x01	; 1
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	c8 01       	movw	r24, r16
    1750:	8e 52       	subi	r24, 0x2E	; 46
    1752:	9f 4f       	sbci	r25, 0xFF	; 255
    1754:	ac d6       	rcall	.+3416   	; 0x24ae <outputS>
			outputS(menuScreen->screen1[2], 2);
    1756:	62 e0       	ldi	r22, 0x02	; 2
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	c8 01       	movw	r24, r16
    175c:	89 51       	subi	r24, 0x19	; 25
    175e:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    1760:	a6 d6       	rcall	.+3404   	; 0x24ae <outputS>
    1762:	63 e0       	ldi	r22, 0x03	; 3
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	c8 01       	movw	r24, r16
    1768:	84 50       	subi	r24, 0x04	; 4
    176a:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    176c:	a0 d6       	rcall	.+3392   	; 0x24ae <outputS>
			
			case SequencerMenuArrow1Select:
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    176e:	7c c2       	rjmp	.+1272   	; 0x1c68 <updateScreen+0x5d2>
    1770:	c8 01       	movw	r24, r16
    1772:	58 df       	rcall	.-336    	; 0x1624 <reInitMenuOnLoad>
			outputS(menuScreen->screen1[1],1);
    1774:	61 e0       	ldi	r22, 0x01	; 1
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	c8 01       	movw	r24, r16
    177a:	8e 52       	subi	r24, 0x2E	; 46
    177c:	9f 4f       	sbci	r25, 0xFF	; 255
    177e:	97 d6       	rcall	.+3374   	; 0x24ae <outputS>
    1780:	73 c2       	rjmp	.+1254   	; 0x1c68 <updateScreen+0x5d2>
			break;
    1782:	80 e2       	ldi	r24, 0x20	; 32
	
	
			case SequencerMenuArrow2:
			menuScreen->screen1[1][19]= ' ';
    1784:	f8 01       	movw	r30, r16
    1786:	eb 51       	subi	r30, 0x1B	; 27
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	80 83       	st	Z, r24
			menuScreen->screen1[2][19] = 8;
    178c:	98 e0       	ldi	r25, 0x08	; 8
    178e:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = ' ';
    1790:	90 83       	st	Z, r25
    1792:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen1[1], 1);
    1794:	80 83       	st	Z, r24
    1796:	61 e0       	ldi	r22, 0x01	; 1
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	c8 01       	movw	r24, r16
    179c:	8e 52       	subi	r24, 0x2E	; 46
    179e:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    17a0:	86 d6       	rcall	.+3340   	; 0x24ae <outputS>
    17a2:	62 e0       	ldi	r22, 0x02	; 2
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	c8 01       	movw	r24, r16
    17a8:	89 51       	subi	r24, 0x19	; 25
    17aa:	9f 4f       	sbci	r25, 0xFF	; 255
    17ac:	80 d6       	rcall	.+3328   	; 0x24ae <outputS>
			outputS(menuScreen->screen1[3], 3);
    17ae:	63 e0       	ldi	r22, 0x03	; 3
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	c8 01       	movw	r24, r16
    17b4:	84 50       	subi	r24, 0x04	; 4
    17b6:	9f 4f       	sbci	r25, 0xFF	; 255
    17b8:	7a d6       	rcall	.+3316   	; 0x24ae <outputS>
			break;
	
			case SequencerMenuArrow2Select:
			numPrinter(menuScreen->screen1[2],7,2,currentPattern->numSteps);
    17ba:	56 c2       	rjmp	.+1196   	; 0x1c68 <updateScreen+0x5d2>
    17bc:	fb 01       	movw	r30, r22
    17be:	e6 53       	subi	r30, 0x36	; 54
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	20 81       	ld	r18, Z
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	42 e0       	ldi	r20, 0x02	; 2
    17c8:	67 e0       	ldi	r22, 0x07	; 7
    17ca:	68 01       	movw	r12, r16
    17cc:	87 ee       	ldi	r24, 0xE7	; 231
    17ce:	c8 0e       	add	r12, r24
    17d0:	d1 1c       	adc	r13, r1
    17d2:	c6 01       	movw	r24, r12
    17d4:	84 d6       	rcall	.+3336   	; 0x24de <numPrinter>
			outputS(menuScreen->screen1[2],2);
    17d6:	62 e0       	ldi	r22, 0x02	; 2
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	c6 01       	movw	r24, r12
    17dc:	68 d6       	rcall	.+3280   	; 0x24ae <outputS>
			break;
    17de:	44 c2       	rjmp	.+1160   	; 0x1c68 <updateScreen+0x5d2>
	
			case SequencerMenuArrow3:
			menuScreen->screen1[1][19]= ' ';
    17e0:	80 e2       	ldi	r24, 0x20	; 32
    17e2:	f8 01       	movw	r30, r16
    17e4:	eb 51       	subi	r30, 0x1B	; 27
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
			menuScreen->screen1[2][19] = ' ';
    17e8:	80 83       	st	Z, r24
    17ea:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = 8;
    17ec:	80 83       	st	Z, r24
    17ee:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen1[1], 1);
    17f0:	75 96       	adiw	r30, 0x15	; 21
    17f2:	80 83       	st	Z, r24
    17f4:	61 e0       	ldi	r22, 0x01	; 1
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	c8 01       	movw	r24, r16
    17fa:	8e 52       	subi	r24, 0x2E	; 46
    17fc:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    17fe:	57 d6       	rcall	.+3246   	; 0x24ae <outputS>
    1800:	62 e0       	ldi	r22, 0x02	; 2
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	c8 01       	movw	r24, r16
    1806:	89 51       	subi	r24, 0x19	; 25
    1808:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    180a:	51 d6       	rcall	.+3234   	; 0x24ae <outputS>
    180c:	63 e0       	ldi	r22, 0x03	; 3
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	c8 01       	movw	r24, r16
    1812:	84 50       	subi	r24, 0x04	; 4
    1814:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    1816:	4b d6       	rcall	.+3222   	; 0x24ae <outputS>
		
			case SequencerMenuArrow3Select:
			numPrinter(menuScreen->screen1[3],14,2,(currentGlobals->currentStep)+1); //these are 0 indexed, so we need to add 1 to the display.
    1818:	27 c2       	rjmp	.+1102   	; 0x1c68 <updateScreen+0x5d2>
    181a:	2c 81       	ldd	r18, Y+4	; 0x04
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	2f 5f       	subi	r18, 0xFF	; 255
    1820:	3f 4f       	sbci	r19, 0xFF	; 255
    1822:	42 e0       	ldi	r20, 0x02	; 2
    1824:	6e e0       	ldi	r22, 0x0E	; 14
    1826:	68 01       	movw	r12, r16
    1828:	9c ef       	ldi	r25, 0xFC	; 252
    182a:	c9 0e       	add	r12, r25
    182c:	d1 1c       	adc	r13, r1
			outputS(menuScreen->screen1[3],3);
    182e:	c6 01       	movw	r24, r12
    1830:	56 d6       	rcall	.+3244   	; 0x24de <numPrinter>
    1832:	63 e0       	ldi	r22, 0x03	; 3
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	c6 01       	movw	r24, r12
			break;
	

			case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0);
    1838:	3a d6       	rcall	.+3188   	; 0x24ae <outputS>
    183a:	16 c2       	rjmp	.+1068   	; 0x1c68 <updateScreen+0x5d2>
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	c8 01       	movw	r24, r16
    1842:	86 58       	subi	r24, 0x86	; 134
    1844:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[1], 1);
    1846:	33 d6       	rcall	.+3174   	; 0x24ae <outputS>
    1848:	61 e0       	ldi	r22, 0x01	; 1
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	c8 01       	movw	r24, r16
    184e:	81 57       	subi	r24, 0x71	; 113
    1850:	9e 4f       	sbci	r25, 0xFE	; 254
    1852:	2d d6       	rcall	.+3162   	; 0x24ae <outputS>
			outputS(menuScreen->screen2[2], 2);
    1854:	62 e0       	ldi	r22, 0x02	; 2
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	c8 01       	movw	r24, r16
    185a:	8c 55       	subi	r24, 0x5C	; 92
    185c:	9e 4f       	sbci	r25, 0xFE	; 254
    185e:	27 d6       	rcall	.+3150   	; 0x24ae <outputS>
			outputS(menuScreen->screen2[3], 3);
    1860:	63 e0       	ldi	r22, 0x03	; 3
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	c8 01       	movw	r24, r16
    1866:	87 54       	subi	r24, 0x47	; 71
    1868:	9e 4f       	sbci	r25, 0xFE	; 254
    186a:	21 d6       	rcall	.+3138   	; 0x24ae <outputS>
			currentGlobals->menuState = TrackMenuArrow1;
    186c:	81 e2       	ldi	r24, 0x21	; 33
		
			case TrackMenuArrow1:
			menuScreen->screen2[1][19]= 8;
    186e:	8e 83       	std	Y+6, r24	; 0x06
    1870:	88 e0       	ldi	r24, 0x08	; 8
    1872:	f8 01       	movw	r30, r16
    1874:	ee 55       	subi	r30, 0x5E	; 94
    1876:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    1878:	80 83       	st	Z, r24
    187a:	80 e2       	ldi	r24, 0x20	; 32
    187c:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    187e:	80 83       	st	Z, r24
    1880:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    1882:	80 83       	st	Z, r24
    1884:	61 e0       	ldi	r22, 0x01	; 1
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	c8 01       	movw	r24, r16
    188a:	81 57       	subi	r24, 0x71	; 113
    188c:	9e 4f       	sbci	r25, 0xFE	; 254
    188e:	0f d6       	rcall	.+3102   	; 0x24ae <outputS>
			outputS(menuScreen->screen2[2], 2);
    1890:	62 e0       	ldi	r22, 0x02	; 2
    1892:	70 e0       	ldi	r23, 0x00	; 0
    1894:	c8 01       	movw	r24, r16
    1896:	8c 55       	subi	r24, 0x5C	; 92
    1898:	9e 4f       	sbci	r25, 0xFE	; 254
    189a:	09 d6       	rcall	.+3090   	; 0x24ae <outputS>
			outputS(menuScreen->screen2[3], 3);
    189c:	63 e0       	ldi	r22, 0x03	; 3
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	c8 01       	movw	r24, r16
    18a2:	87 54       	subi	r24, 0x47	; 71
    18a4:	9e 4f       	sbci	r25, 0xFE	; 254
    18a6:	03 d6       	rcall	.+3078   	; 0x24ae <outputS>
			break;
    18a8:	df c1       	rjmp	.+958    	; 0x1c68 <updateScreen+0x5d2>
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	db 01       	movw	r26, r22
    18ae:	a8 0f       	add	r26, r24
    18b0:	b1 1d       	adc	r27, r1
    18b2:	fd 01       	movw	r30, r26
    18b4:	e8 56       	subi	r30, 0x68	; 104
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    18b8:	20 81       	ld	r18, Z
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	32 2f       	mov	r19, r18
    18be:	22 27       	eor	r18, r18
			outputS(menuScreen->screen2[2], 2);
			outputS(menuScreen->screen2[3], 3);
			break;
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    18c0:	70 96       	adiw	r30, 0x10	; 16
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    18c2:	80 81       	ld	r24, Z
    18c4:	28 2b       	or	r18, r24
    18c6:	44 e0       	ldi	r20, 0x04	; 4
    18c8:	6a e0       	ldi	r22, 0x0A	; 10
    18ca:	68 01       	movw	r12, r16
    18cc:	b1 e7       	ldi	r27, 0x71	; 113
    18ce:	cb 1a       	sub	r12, r27
    18d0:	be ef       	ldi	r27, 0xFE	; 254
    18d2:	db 0a       	sbc	r13, r27
    18d4:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen2[1],1);
    18d6:	03 d6       	rcall	.+3078   	; 0x24de <numPrinter>
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	c6 01       	movw	r24, r12
			break;
    18de:	e7 d5       	rcall	.+3022   	; 0x24ae <outputS>
	
			case TrackMenuArrow2:
			menuScreen->screen2[1][19]= ' ';
    18e0:	c3 c1       	rjmp	.+902    	; 0x1c68 <updateScreen+0x5d2>
    18e2:	80 e2       	ldi	r24, 0x20	; 32
    18e4:	f8 01       	movw	r30, r16
    18e6:	ee 55       	subi	r30, 0x5E	; 94
    18e8:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = 8;
    18ea:	80 83       	st	Z, r24
    18ec:	98 e0       	ldi	r25, 0x08	; 8
    18ee:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    18f0:	90 83       	st	Z, r25
    18f2:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    18f4:	80 83       	st	Z, r24
    18f6:	61 e0       	ldi	r22, 0x01	; 1
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	c8 01       	movw	r24, r16
    18fc:	81 57       	subi	r24, 0x71	; 113
    18fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1900:	d6 d5       	rcall	.+2988   	; 0x24ae <outputS>
			outputS(menuScreen->screen2[2], 2);
    1902:	62 e0       	ldi	r22, 0x02	; 2
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	c8 01       	movw	r24, r16
    1908:	8c 55       	subi	r24, 0x5C	; 92
    190a:	9e 4f       	sbci	r25, 0xFE	; 254
    190c:	d0 d5       	rcall	.+2976   	; 0x24ae <outputS>
    190e:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[3], 3);
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	c8 01       	movw	r24, r16
    1914:	87 54       	subi	r24, 0x47	; 71
    1916:	9e 4f       	sbci	r25, 0xFE	; 254
    1918:	ca d5       	rcall	.+2964   	; 0x24ae <outputS>
    191a:	a6 c1       	rjmp	.+844    	; 0x1c68 <updateScreen+0x5d2>
    191c:	8d 81       	ldd	r24, Y+5	; 0x05
			break;
    191e:	fb 01       	movw	r30, r22
		
			case TrackMenuArrow2Select:
			//we need some serious button code in these two cases. 
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1920:	e8 0f       	add	r30, r24
    1922:	f1 1d       	adc	r31, r1
    1924:	e8 57       	subi	r30, 0x78	; 120
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	80 81       	ld	r24, Z
    192a:	88 23       	and	r24, r24
    192c:	19 f0       	breq	.+6      	; 0x1934 <updateScreen+0x29e>
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	79 f0       	breq	.+30     	; 0x1950 <updateScreen+0x2ba>
    1932:	1c c0       	rjmp	.+56     	; 0x196c <updateScreen+0x2d6>
    1934:	83 e5       	ldi	r24, 0x53	; 83
			{
				case 0:
				menuScreen->screen2[2][10] = 'S';
    1936:	f8 01       	movw	r30, r16
    1938:	e2 55       	subi	r30, 0x52	; 82
    193a:	fe 4f       	sbci	r31, 0xFE	; 254
    193c:	80 83       	st	Z, r24
    193e:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[2][11] = 'o';
    1940:	31 96       	adiw	r30, 0x01	; 1
    1942:	80 83       	st	Z, r24
    1944:	9c e6       	ldi	r25, 0x6C	; 108
				menuScreen->screen2[2][12] = 'l';
    1946:	31 96       	adiw	r30, 0x01	; 1
    1948:	90 83       	st	Z, r25
    194a:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'o';
    194c:	80 83       	st	Z, r24
    194e:	0e c0       	rjmp	.+28     	; 0x196c <updateScreen+0x2d6>
				break;
    1950:	80 e5       	ldi	r24, 0x50	; 80

				case 1:
				menuScreen->screen2[2][10] = 'P';
    1952:	f8 01       	movw	r30, r16
    1954:	e2 55       	subi	r30, 0x52	; 82
    1956:	fe 4f       	sbci	r31, 0xFE	; 254
    1958:	80 83       	st	Z, r24
				menuScreen->screen2[2][11] = 'o';
    195a:	8f e6       	ldi	r24, 0x6F	; 111
    195c:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][12] = 'l';
    195e:	80 83       	st	Z, r24
    1960:	8c e6       	ldi	r24, 0x6C	; 108
    1962:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'y';
    1964:	80 83       	st	Z, r24
    1966:	89 e7       	ldi	r24, 0x79	; 121
	
				case 3:
				break;
			}
			
			outputS(menuScreen->screen2[2], 2);
    1968:	31 96       	adiw	r30, 0x01	; 1
    196a:	80 83       	st	Z, r24
    196c:	62 e0       	ldi	r22, 0x02	; 2
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	c8 01       	movw	r24, r16
    1972:	8c 55       	subi	r24, 0x5C	; 92
    1974:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1976:	9b d5       	rcall	.+2870   	; 0x24ae <outputS>

			case TrackMenuArrow3:
			menuScreen->screen2[1][19]= ' ';
    1978:	77 c1       	rjmp	.+750    	; 0x1c68 <updateScreen+0x5d2>
    197a:	80 e2       	ldi	r24, 0x20	; 32
    197c:	f8 01       	movw	r30, r16
    197e:	ee 55       	subi	r30, 0x5E	; 94
    1980:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    1982:	80 83       	st	Z, r24
    1984:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = 8;
    1986:	80 83       	st	Z, r24
    1988:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[1], 1);
    198a:	75 96       	adiw	r30, 0x15	; 21
    198c:	80 83       	st	Z, r24
    198e:	61 e0       	ldi	r22, 0x01	; 1
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	c8 01       	movw	r24, r16
    1994:	81 57       	subi	r24, 0x71	; 113
			outputS(menuScreen->screen2[2], 2);
    1996:	9e 4f       	sbci	r25, 0xFE	; 254
    1998:	8a d5       	rcall	.+2836   	; 0x24ae <outputS>
    199a:	62 e0       	ldi	r22, 0x02	; 2
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	c8 01       	movw	r24, r16
    19a0:	8c 55       	subi	r24, 0x5C	; 92
    19a2:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[3], 3);
    19a4:	84 d5       	rcall	.+2824   	; 0x24ae <outputS>
    19a6:	63 e0       	ldi	r22, 0x03	; 3
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	c8 01       	movw	r24, r16
    19ac:	87 54       	subi	r24, 0x47	; 71
    19ae:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    19b0:	7e d5       	rcall	.+2812   	; 0x24ae <outputS>
		
			case TrackMenuArrow3Select:
			numPrinter(menuScreen->screen2[3],10,2,(currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1);
    19b2:	5a c1       	rjmp	.+692    	; 0x1c68 <updateScreen+0x5d2>
    19b4:	8d 81       	ldd	r24, Y+5	; 0x05
    19b6:	fb 01       	movw	r30, r22
    19b8:	e8 0f       	add	r30, r24
    19ba:	f1 1d       	adc	r31, r1
    19bc:	20 8d       	ldd	r18, Z+24	; 0x18
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	2f 5f       	subi	r18, 0xFF	; 255
    19c2:	3f 4f       	sbci	r19, 0xFF	; 255
    19c4:	42 e0       	ldi	r20, 0x02	; 2
    19c6:	6a e0       	ldi	r22, 0x0A	; 10
    19c8:	68 01       	movw	r12, r16
    19ca:	e7 e4       	ldi	r30, 0x47	; 71
    19cc:	ce 1a       	sub	r12, r30
    19ce:	ee ef       	ldi	r30, 0xFE	; 254
    19d0:	de 0a       	sbc	r13, r30
			outputS(menuScreen->screen2[3],3);
    19d2:	c6 01       	movw	r24, r12
    19d4:	84 d5       	rcall	.+2824   	; 0x24de <numPrinter>
    19d6:	63 e0       	ldi	r22, 0x03	; 3
    19d8:	70 e0       	ldi	r23, 0x00	; 0
    19da:	c6 01       	movw	r24, r12
			break;
    19dc:	68 d5       	rcall	.+2768   	; 0x24ae <outputS>
			
			case TrackMenuArrow4:
			menuScreen->screen2[2][19]= ' ';
    19de:	44 c1       	rjmp	.+648    	; 0x1c68 <updateScreen+0x5d2>
    19e0:	80 e2       	ldi	r24, 0x20	; 32
    19e2:	f8 01       	movw	r30, r16
    19e4:	e9 54       	subi	r30, 0x49	; 73
    19e6:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[3][19] = ' ';
    19e8:	80 83       	st	Z, r24
    19ea:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[4][19] = 8;
    19ec:	80 83       	st	Z, r24
    19ee:	88 e0       	ldi	r24, 0x08	; 8
    19f0:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[2], 1);
    19f2:	80 83       	st	Z, r24
    19f4:	61 e0       	ldi	r22, 0x01	; 1
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	c8 01       	movw	r24, r16
    19fa:	8c 55       	subi	r24, 0x5C	; 92
    19fc:	9e 4f       	sbci	r25, 0xFE	; 254
    19fe:	57 d5       	rcall	.+2734   	; 0x24ae <outputS>
			outputS(menuScreen->screen2[3], 2);
    1a00:	62 e0       	ldi	r22, 0x02	; 2
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	c8 01       	movw	r24, r16
    1a06:	87 54       	subi	r24, 0x47	; 71
    1a08:	9e 4f       	sbci	r25, 0xFE	; 254
    1a0a:	51 d5       	rcall	.+2722   	; 0x24ae <outputS>
    1a0c:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[4], 3);
    1a0e:	70 e0       	ldi	r23, 0x00	; 0
    1a10:	c8 01       	movw	r24, r16
    1a12:	82 53       	subi	r24, 0x32	; 50
    1a14:	9e 4f       	sbci	r25, 0xFE	; 254
    1a16:	4b d5       	rcall	.+2710   	; 0x24ae <outputS>
    1a18:	27 c1       	rjmp	.+590    	; 0x1c68 <updateScreen+0x5d2>
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
			break;
    1a1c:	fb 01       	movw	r30, r22
			
			case TrackMenuArrow4Select:
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1a1e:	e8 0f       	add	r30, r24
    1a20:	f1 1d       	adc	r31, r1
    1a22:	e5 51       	subi	r30, 0x15	; 21
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	80 81       	ld	r24, Z
    1a28:	81 30       	cpi	r24, 0x01	; 1
    1a2a:	a9 f0       	breq	.+42     	; 0x1a56 <updateScreen+0x3c0>
    1a2c:	28 f0       	brcs	.+10     	; 0x1a38 <updateScreen+0x3a2>
    1a2e:	82 30       	cpi	r24, 0x02	; 2
    1a30:	f9 f0       	breq	.+62     	; 0x1a70 <updateScreen+0x3da>
    1a32:	83 30       	cpi	r24, 0x03	; 3
    1a34:	51 f1       	breq	.+84     	; 0x1a8a <updateScreen+0x3f4>
    1a36:	37 c0       	rjmp	.+110    	; 0x1aa6 <updateScreen+0x410>
    1a38:	81 e4       	ldi	r24, 0x41	; 65
    1a3a:	f8 01       	movw	r30, r16
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1a3c:	e4 52       	subi	r30, 0x24	; 36
    1a3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a40:	80 83       	st	Z, r24
    1a42:	8d e2       	ldi	r24, 0x2D	; 45
    1a44:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1a46:	80 83       	st	Z, r24
    1a48:	82 e5       	ldi	r24, 0x52	; 82
    1a4a:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1a4c:	80 83       	st	Z, r24
    1a4e:	80 e2       	ldi	r24, 0x20	; 32
    1a50:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1a52:	80 83       	st	Z, r24
    1a54:	28 c0       	rjmp	.+80     	; 0x1aa6 <updateScreen+0x410>
    1a56:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1a58:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1a5a:	e4 52       	subi	r30, 0x24	; 36
    1a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5e:	80 83       	st	Z, r24
    1a60:	80 e2       	ldi	r24, 0x20	; 32
				menuScreen->screen2[4][15] = ' ';
    1a62:	31 96       	adiw	r30, 0x01	; 1
    1a64:	80 83       	st	Z, r24
    1a66:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = ' ';
    1a68:	80 83       	st	Z, r24
    1a6a:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1a6c:	80 83       	st	Z, r24
    1a6e:	1b c0       	rjmp	.+54     	; 0x1aa6 <updateScreen+0x410>
				break;
    1a70:	81 e4       	ldi	r24, 0x41	; 65
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1a72:	f8 01       	movw	r30, r16
    1a74:	e4 52       	subi	r30, 0x24	; 36
    1a76:	fe 4f       	sbci	r31, 0xFE	; 254
    1a78:	80 83       	st	Z, r24
				menuScreen->screen2[4][15] = ' ';
    1a7a:	80 e2       	ldi	r24, 0x20	; 32
    1a7c:	31 96       	adiw	r30, 0x01	; 1
    1a7e:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1a80:	31 96       	adiw	r30, 0x01	; 1
    1a82:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1a84:	31 96       	adiw	r30, 0x01	; 1
				break;
    1a86:	80 83       	st	Z, r24
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1a88:	0e c0       	rjmp	.+28     	; 0x1aa6 <updateScreen+0x410>
    1a8a:	8e e4       	ldi	r24, 0x4E	; 78
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	e4 52       	subi	r30, 0x24	; 36
				menuScreen->screen2[4][15] = 'o';
    1a90:	fe 4f       	sbci	r31, 0xFE	; 254
    1a92:	80 83       	st	Z, r24
    1a94:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][16] = 'n';
    1a96:	31 96       	adiw	r30, 0x01	; 1
    1a98:	80 83       	st	Z, r24
    1a9a:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][17] = 'e';
    1a9c:	31 96       	adiw	r30, 0x01	; 1
    1a9e:	80 83       	st	Z, r24
    1aa0:	85 e6       	ldi	r24, 0x65	; 101
				break;
			}
			outputS(menuScreen->screen2[4],3);
    1aa2:	31 96       	adiw	r30, 0x01	; 1
    1aa4:	80 83       	st	Z, r24
    1aa6:	63 e0       	ldi	r22, 0x03	; 3
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	c8 01       	movw	r24, r16
    1aac:	82 53       	subi	r24, 0x32	; 50
    1aae:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1ab0:	fe d4       	rcall	.+2556   	; 0x24ae <outputS>
			
			case TrackMenuArrow5:
			menuScreen->screen2[3][19]= ' ';
    1ab2:	da c0       	rjmp	.+436    	; 0x1c68 <updateScreen+0x5d2>
    1ab4:	80 e2       	ldi	r24, 0x20	; 32
    1ab6:	f8 01       	movw	r30, r16
    1ab8:	e4 53       	subi	r30, 0x34	; 52
    1aba:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[4][19] = ' ';
    1abc:	80 83       	st	Z, r24
			menuScreen->screen2[5][19] = 8;
    1abe:	75 96       	adiw	r30, 0x15	; 21
    1ac0:	80 83       	st	Z, r24
    1ac2:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[3], 1);
    1ac4:	75 96       	adiw	r30, 0x15	; 21
    1ac6:	80 83       	st	Z, r24
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	c8 01       	movw	r24, r16
    1ace:	87 54       	subi	r24, 0x47	; 71
    1ad0:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[4], 2);
    1ad2:	ed d4       	rcall	.+2522   	; 0x24ae <outputS>
    1ad4:	62 e0       	ldi	r22, 0x02	; 2
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	c8 01       	movw	r24, r16
    1ada:	82 53       	subi	r24, 0x32	; 50
    1adc:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[5], 3);
    1ade:	e7 d4       	rcall	.+2510   	; 0x24ae <outputS>
    1ae0:	63 e0       	ldi	r22, 0x03	; 3
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	c8 01       	movw	r24, r16
    1ae6:	8d 51       	subi	r24, 0x1D	; 29
    1ae8:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1aea:	e1 d4       	rcall	.+2498   	; 0x24ae <outputS>

			case TrackMenuArrow5Select:;
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1aec:	bd c0       	rjmp	.+378    	; 0x1c68 <updateScreen+0x5d2>
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	9b 01       	movw	r18, r22
    1af2:	28 0f       	add	r18, r24
    1af4:	31 1d       	adc	r19, r1
    1af6:	f9 01       	movw	r30, r18
			numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1af8:	e5 53       	subi	r30, 0x35	; 53
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	20 81       	ld	r18, Z
			outputS(menuScreen->screen2[4], 2);
			outputS(menuScreen->screen2[5], 3);
			break;

			case TrackMenuArrow5Select:;
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1afe:	30 e0       	ldi	r19, 0x00	; 0
			numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1b00:	32 2f       	mov	r19, r18
    1b02:	22 27       	eor	r18, r18
    1b04:	70 96       	adiw	r30, 0x10	; 16
    1b06:	80 81       	ld	r24, Z
    1b08:	28 2b       	or	r18, r24
    1b0a:	45 e0       	ldi	r20, 0x05	; 5
    1b0c:	6d e0       	ldi	r22, 0x0D	; 13
    1b0e:	68 01       	movw	r12, r16
    1b10:	8d e1       	ldi	r24, 0x1D	; 29
    1b12:	c8 1a       	sub	r12, r24
    1b14:	8e ef       	ldi	r24, 0xFE	; 254
			menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
    1b16:	d8 0a       	sbc	r13, r24
    1b18:	c6 01       	movw	r24, r12
    1b1a:	e1 d4       	rcall	.+2498   	; 0x24de <numPrinter>
    1b1c:	d8 01       	movw	r26, r16
    1b1e:	a0 51       	subi	r26, 0x10	; 16
    1b20:	be 4f       	sbci	r27, 0xFE	; 254
    1b22:	8c 91       	ld	r24, X
    1b24:	f8 01       	movw	r30, r16
			menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
    1b26:	e1 51       	subi	r30, 0x11	; 17
    1b28:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[5][14] = '.';
    1b2a:	80 83       	st	Z, r24
    1b2c:	32 96       	adiw	r30, 0x02	; 2
			outputS(menuScreen->screen2[5],3);
    1b2e:	80 81       	ld	r24, Z
    1b30:	8c 93       	st	X, r24
    1b32:	8e e2       	ldi	r24, 0x2E	; 46
    1b34:	80 83       	st	Z, r24
			break;
    1b36:	63 e0       	ldi	r22, 0x03	; 3

			case GlobalMenuInit:
			outputS(menuScreen->screen3[0], 0);
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	c6 01       	movw	r24, r12
    1b3c:	b8 d4       	rcall	.+2416   	; 0x24ae <outputS>
    1b3e:	94 c0       	rjmp	.+296    	; 0x1c68 <updateScreen+0x5d2>
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[1], 1);
    1b44:	c8 01       	movw	r24, r16
    1b46:	89 5c       	subi	r24, 0xC9	; 201
    1b48:	9d 4f       	sbci	r25, 0xFD	; 253
    1b4a:	b1 d4       	rcall	.+2402   	; 0x24ae <outputS>
    1b4c:	61 e0       	ldi	r22, 0x01	; 1
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1b52:	84 5b       	subi	r24, 0xB4	; 180
    1b54:	9d 4f       	sbci	r25, 0xFD	; 253
    1b56:	ab d4       	rcall	.+2390   	; 0x24ae <outputS>
    1b58:	62 e0       	ldi	r22, 0x02	; 2
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1b5e:	8f 59       	subi	r24, 0x9F	; 159
    1b60:	9d 4f       	sbci	r25, 0xFD	; 253
    1b62:	a5 d4       	rcall	.+2378   	; 0x24ae <outputS>
    1b64:	63 e0       	ldi	r22, 0x03	; 3
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	c8 01       	movw	r24, r16
    1b6a:	8a 58       	subi	r24, 0x8A	; 138
			currentGlobals->menuState = GlobalMenuArrow1;
    1b6c:	9d 4f       	sbci	r25, 0xFD	; 253
    1b6e:	9f d4       	rcall	.+2366   	; 0x24ae <outputS>

			case GlobalMenuArrow1:
			menuScreen->screen3[1][19]= 8;
    1b70:	81 e3       	ldi	r24, 0x31	; 49
    1b72:	8e 83       	std	Y+6, r24	; 0x06
    1b74:	88 e0       	ldi	r24, 0x08	; 8
    1b76:	f8 01       	movw	r30, r16
    1b78:	e1 5a       	subi	r30, 0xA1	; 161
			menuScreen->screen3[2][19] = ' ';
    1b7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b7c:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    1b7e:	80 e2       	ldi	r24, 0x20	; 32
    1b80:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen3[1], 1);
    1b82:	80 83       	st	Z, r24
    1b84:	75 96       	adiw	r30, 0x15	; 21
    1b86:	80 83       	st	Z, r24
    1b88:	61 e0       	ldi	r22, 0x01	; 1
    1b8a:	70 e0       	ldi	r23, 0x00	; 0
    1b8c:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1b8e:	84 5b       	subi	r24, 0xB4	; 180
    1b90:	9d 4f       	sbci	r25, 0xFD	; 253
    1b92:	8d d4       	rcall	.+2330   	; 0x24ae <outputS>
    1b94:	62 e0       	ldi	r22, 0x02	; 2
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1b9a:	8f 59       	subi	r24, 0x9F	; 159
    1b9c:	9d 4f       	sbci	r25, 0xFD	; 253
    1b9e:	87 d4       	rcall	.+2318   	; 0x24ae <outputS>
    1ba0:	63 e0       	ldi	r22, 0x03	; 3
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	c8 01       	movw	r24, r16
    1ba6:	8a 58       	subi	r24, 0x8A	; 138
			break;
    1ba8:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow1Select:
			numPrinter(menuScreen->screen3[1],14,2,(currentGlobals->midiChannel)+1);
    1baa:	81 d4       	rcall	.+2306   	; 0x24ae <outputS>
    1bac:	5d c0       	rjmp	.+186    	; 0x1c68 <updateScreen+0x5d2>
    1bae:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	2f 5f       	subi	r18, 0xFF	; 255
    1bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb6:	42 e0       	ldi	r20, 0x02	; 2
    1bb8:	6e e0       	ldi	r22, 0x0E	; 14
    1bba:	68 01       	movw	r12, r16
    1bbc:	94 eb       	ldi	r25, 0xB4	; 180
    1bbe:	c9 1a       	sub	r12, r25
    1bc0:	9d ef       	ldi	r25, 0xFD	; 253
			outputS(menuScreen->screen3[1],1);
    1bc2:	d9 0a       	sbc	r13, r25
    1bc4:	c6 01       	movw	r24, r12
    1bc6:	8b d4       	rcall	.+2326   	; 0x24de <numPrinter>
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	70 e0       	ldi	r23, 0x00	; 0
			break;
    1bcc:	c6 01       	movw	r24, r12

			case GlobalMenuArrow2:
			menuScreen->screen3[1][19]= ' ';
    1bce:	6f d4       	rcall	.+2270   	; 0x24ae <outputS>
    1bd0:	4b c0       	rjmp	.+150    	; 0x1c68 <updateScreen+0x5d2>
    1bd2:	80 e2       	ldi	r24, 0x20	; 32
    1bd4:	f8 01       	movw	r30, r16
			menuScreen->screen3[2][19] = 8;
    1bd6:	e1 5a       	subi	r30, 0xA1	; 161
    1bd8:	fd 4f       	sbci	r31, 0xFD	; 253
    1bda:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    1bdc:	98 e0       	ldi	r25, 0x08	; 8
			outputS(menuScreen->screen3[1], 1);
    1bde:	75 96       	adiw	r30, 0x15	; 21
    1be0:	90 83       	st	Z, r25
    1be2:	75 96       	adiw	r30, 0x15	; 21
    1be4:	80 83       	st	Z, r24
    1be6:	61 e0       	ldi	r22, 0x01	; 1
    1be8:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[2], 2);
    1bea:	c8 01       	movw	r24, r16
    1bec:	84 5b       	subi	r24, 0xB4	; 180
    1bee:	9d 4f       	sbci	r25, 0xFD	; 253
    1bf0:	5e d4       	rcall	.+2236   	; 0x24ae <outputS>
    1bf2:	62 e0       	ldi	r22, 0x02	; 2
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1bf8:	8f 59       	subi	r24, 0x9F	; 159
    1bfa:	9d 4f       	sbci	r25, 0xFD	; 253
    1bfc:	58 d4       	rcall	.+2224   	; 0x24ae <outputS>
    1bfe:	63 e0       	ldi	r22, 0x03	; 3
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	c8 01       	movw	r24, r16
    1c04:	8a 58       	subi	r24, 0x8A	; 138
			break;
    1c06:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow2Select:
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1c08:	52 d4       	rcall	.+2212   	; 0x24ae <outputS>
    1c0a:	2e c0       	rjmp	.+92     	; 0x1c68 <updateScreen+0x5d2>
    1c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0e:	fa 01       	movw	r30, r20
    1c10:	e8 0f       	add	r30, r24
    1c12:	f1 1d       	adc	r31, r1
    1c14:	45 85       	ldd	r20, Z+13	; 0x0d
    1c16:	6e e0       	ldi	r22, 0x0E	; 14
    1c18:	68 01       	movw	r12, r16
    1c1a:	af e9       	ldi	r26, 0x9F	; 159
    1c1c:	ca 1a       	sub	r12, r26
    1c1e:	ad ef       	ldi	r26, 0xFD	; 253
    1c20:	da 0a       	sbc	r13, r26
    1c22:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen3[2],2);
    1c24:	22 d6       	rcall	.+3140   	; 0x286a <midiNotePrinter>
    1c26:	62 e0       	ldi	r22, 0x02	; 2
    1c28:	70 e0       	ldi	r23, 0x00	; 0
    1c2a:	c6 01       	movw	r24, r12
    1c2c:	40 d4       	rcall	.+2176   	; 0x24ae <outputS>
			break;
    1c2e:	1c c0       	rjmp	.+56     	; 0x1c68 <updateScreen+0x5d2>

			case GlobalMenuArrow3:
			menuScreen->screen3[1][19]= ' ';
    1c30:	80 e2       	ldi	r24, 0x20	; 32
    1c32:	f8 01       	movw	r30, r16
    1c34:	e1 5a       	subi	r30, 0xA1	; 161
    1c36:	fd 4f       	sbci	r31, 0xFD	; 253
			menuScreen->screen3[2][19] = ' ';
    1c38:	80 83       	st	Z, r24
    1c3a:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen3[3][19] = 8;
    1c3c:	80 83       	st	Z, r24
    1c3e:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen3[1], 1);
    1c40:	75 96       	adiw	r30, 0x15	; 21
    1c42:	80 83       	st	Z, r24
    1c44:	61 e0       	ldi	r22, 0x01	; 1
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	c8 01       	movw	r24, r16
    1c4a:	84 5b       	subi	r24, 0xB4	; 180
    1c4c:	9d 4f       	sbci	r25, 0xFD	; 253
			outputS(menuScreen->screen3[2], 2);
    1c4e:	2f d4       	rcall	.+2142   	; 0x24ae <outputS>
    1c50:	62 e0       	ldi	r22, 0x02	; 2
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	c8 01       	movw	r24, r16
    1c56:	8f 59       	subi	r24, 0x9F	; 159
    1c58:	9d 4f       	sbci	r25, 0xFD	; 253
    1c5a:	29 d4       	rcall	.+2130   	; 0x24ae <outputS>
			outputS(menuScreen->screen3[3], 3);
    1c5c:	63 e0       	ldi	r22, 0x03	; 3
    1c5e:	70 e0       	ldi	r23, 0x00	; 0
    1c60:	c8 01       	movw	r24, r16
    1c62:	8a 58       	subi	r24, 0x8A	; 138
    1c64:	9d 4f       	sbci	r25, 0xFD	; 253
    1c66:	23 d4       	rcall	.+2118   	; 0x24ae <outputS>
    1c68:	8e 81       	ldd	r24, Y+6	; 0x06
			break;
		}
		prevMenuState = currentGlobals->menuState;
    1c6a:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <prevMenuState>
    1c6e:	8a 85       	ldd	r24, Y+10	; 0x0a
	}
	//We should only reach this in track selection and global settings for setting midi notes. 
	if(currentGlobals->valueChangeFlag&(1<<triggerChange))
    1c70:	81 ff       	sbrs	r24, 1
    1c72:	19 c1       	rjmp	.+562    	; 0x1ea6 <updateScreen+0x810>
    1c74:	1a 86       	std	Y+10, r1	; 0x0a
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0<<triggerChange); //this is wrong. Will erase all of valueChange Flag. 
    1c76:	8e 81       	ldd	r24, Y+6	; 0x06
		switch((currentGlobals->menuState)>>4) //we don't need to worry about what the bottom encoder is doing.  
    1c78:	82 95       	swap	r24
    1c7a:	8f 70       	andi	r24, 0x0F	; 15
    1c7c:	82 30       	cpi	r24, 0x02	; 2
    1c7e:	21 f0       	breq	.+8      	; 0x1c88 <updateScreen+0x5f2>
    1c80:	83 30       	cpi	r24, 0x03	; 3
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <updateScreen+0x5f0>
    1c84:	f7 c0       	rjmp	.+494    	; 0x1e74 <updateScreen+0x7de>
    1c86:	0f c1       	rjmp	.+542    	; 0x1ea6 <updateScreen+0x810>
    1c88:	2d 81       	ldd	r18, Y+5	; 0x05
		{
			case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	c7 01       	movw	r24, r14
    1c8e:	82 0f       	add	r24, r18
    1c90:	93 1f       	adc	r25, r19
    1c92:	fc 01       	movw	r30, r24
    1c94:	e8 56       	subi	r30, 0x68	; 104
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	c0 80       	ld	r12, Z
    1c9a:	d1 2c       	mov	r13, r1
    1c9c:	dc 2c       	mov	r13, r12
    1c9e:	cc 24       	eor	r12, r12
    1ca0:	70 96       	adiw	r30, 0x10	; 16
    1ca2:	80 81       	ld	r24, Z
    1ca4:	c8 2a       	or	r12, r24
    1ca6:	2f 5f       	subi	r18, 0xFF	; 255
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack)+1);
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	42 e0       	ldi	r20, 0x02	; 2
    1cac:	67 e0       	ldi	r22, 0x07	; 7
    1cae:	58 01       	movw	r10, r16
    1cb0:	b1 e7       	ldi	r27, 0x71	; 113
    1cb2:	ab 1a       	sub	r10, r27
    1cb4:	be ef       	ldi	r27, 0xFE	; 254
    1cb6:	bb 0a       	sbc	r11, r27
    1cb8:	c5 01       	movw	r24, r10
    1cba:	11 d4       	rcall	.+2082   	; 0x24de <numPrinter>
    1cbc:	96 01       	movw	r18, r12
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
    1cbe:	44 e0       	ldi	r20, 0x04	; 4
    1cc0:	6a e0       	ldi	r22, 0x0A	; 10
    1cc2:	c5 01       	movw	r24, r10
    1cc4:	0c d4       	rcall	.+2072   	; 0x24de <numPrinter>
    1cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc8:	f7 01       	movw	r30, r14
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
					switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1cca:	e8 0f       	add	r30, r24
    1ccc:	f1 1d       	adc	r31, r1
    1cce:	e8 57       	subi	r30, 0x78	; 120
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 81       	ld	r24, Z
    1cd4:	88 23       	and	r24, r24
    1cd6:	19 f0       	breq	.+6      	; 0x1cde <updateScreen+0x648>
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	79 f0       	breq	.+30     	; 0x1cfa <updateScreen+0x664>
    1cdc:	1c c0       	rjmp	.+56     	; 0x1d16 <updateScreen+0x680>
    1cde:	83 e5       	ldi	r24, 0x53	; 83
    1ce0:	f8 01       	movw	r30, r16
					{
						case 0:
						menuScreen->screen2[2][10] = 'S';
    1ce2:	e2 55       	subi	r30, 0x52	; 82
    1ce4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce6:	80 83       	st	Z, r24
    1ce8:	8f e6       	ldi	r24, 0x6F	; 111
    1cea:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][11] = 'o';
    1cec:	80 83       	st	Z, r24
    1cee:	9c e6       	ldi	r25, 0x6C	; 108
    1cf0:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][12] = 'l';
    1cf2:	90 83       	st	Z, r25
    1cf4:	31 96       	adiw	r30, 0x01	; 1
    1cf6:	80 83       	st	Z, r24
						menuScreen->screen2[2][13] = 'o';
    1cf8:	0e c0       	rjmp	.+28     	; 0x1d16 <updateScreen+0x680>
    1cfa:	80 e5       	ldi	r24, 0x50	; 80
						break;
    1cfc:	f8 01       	movw	r30, r16

						case 1:
						menuScreen->screen2[2][10] = 'P';
    1cfe:	e2 55       	subi	r30, 0x52	; 82
    1d00:	fe 4f       	sbci	r31, 0xFE	; 254
    1d02:	80 83       	st	Z, r24
    1d04:	8f e6       	ldi	r24, 0x6F	; 111
    1d06:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][11] = 'o';
    1d08:	80 83       	st	Z, r24
    1d0a:	8c e6       	ldi	r24, 0x6C	; 108
    1d0c:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][12] = 'l';
    1d0e:	80 83       	st	Z, r24
    1d10:	89 e7       	ldi	r24, 0x79	; 121
    1d12:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][13] = 'y';
    1d14:	80 83       	st	Z, r24
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	f7 01       	movw	r30, r14

						case 3:
						break;
					}
					
			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack]+1));
    1d1a:	e8 0f       	add	r30, r24
    1d1c:	f1 1d       	adc	r31, r1
    1d1e:	20 8d       	ldd	r18, Z+24	; 0x18
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	2f 5f       	subi	r18, 0xFF	; 255
    1d24:	3f 4f       	sbci	r19, 0xFF	; 255
    1d26:	42 e0       	ldi	r20, 0x02	; 2
    1d28:	6a e0       	ldi	r22, 0x0A	; 10
    1d2a:	c8 01       	movw	r24, r16
    1d2c:	87 54       	subi	r24, 0x47	; 71
    1d2e:	9e 4f       	sbci	r25, 0xFE	; 254
    1d30:	d6 d3       	rcall	.+1964   	; 0x24de <numPrinter>
    1d32:	8d 81       	ldd	r24, Y+5	; 0x05
    1d34:	f7 01       	movw	r30, r14
    1d36:	e8 0f       	add	r30, r24
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1d38:	f1 1d       	adc	r31, r1
    1d3a:	e5 51       	subi	r30, 0x15	; 21
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	80 81       	ld	r24, Z
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	a9 f0       	breq	.+42     	; 0x1d6e <updateScreen+0x6d8>
    1d44:	28 f0       	brcs	.+10     	; 0x1d50 <updateScreen+0x6ba>
    1d46:	82 30       	cpi	r24, 0x02	; 2
    1d48:	f9 f0       	breq	.+62     	; 0x1d88 <updateScreen+0x6f2>
    1d4a:	83 30       	cpi	r24, 0x03	; 3
    1d4c:	51 f1       	breq	.+84     	; 0x1da2 <updateScreen+0x70c>
    1d4e:	37 c0       	rjmp	.+110    	; 0x1dbe <updateScreen+0x728>
    1d50:	81 e4       	ldi	r24, 0x41	; 65
    1d52:	f8 01       	movw	r30, r16
    1d54:	e4 52       	subi	r30, 0x24	; 36
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1d56:	fe 4f       	sbci	r31, 0xFE	; 254
    1d58:	80 83       	st	Z, r24
    1d5a:	8d e2       	ldi	r24, 0x2D	; 45
    1d5c:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1d5e:	80 83       	st	Z, r24
    1d60:	82 e5       	ldi	r24, 0x52	; 82
    1d62:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1d64:	80 83       	st	Z, r24
    1d66:	80 e2       	ldi	r24, 0x20	; 32
    1d68:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1d6a:	80 83       	st	Z, r24
    1d6c:	28 c0       	rjmp	.+80     	; 0x1dbe <updateScreen+0x728>
    1d6e:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1d70:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1d72:	e4 52       	subi	r30, 0x24	; 36
    1d74:	fe 4f       	sbci	r31, 0xFE	; 254
    1d76:	80 83       	st	Z, r24
    1d78:	80 e2       	ldi	r24, 0x20	; 32
    1d7a:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    1d7c:	80 83       	st	Z, r24
    1d7e:	31 96       	adiw	r30, 0x01	; 1
    1d80:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1d82:	31 96       	adiw	r30, 0x01	; 1
    1d84:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1d86:	1b c0       	rjmp	.+54     	; 0x1dbe <updateScreen+0x728>
    1d88:	81 e4       	ldi	r24, 0x41	; 65
				break;
    1d8a:	f8 01       	movw	r30, r16
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1d8c:	e4 52       	subi	r30, 0x24	; 36
    1d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d90:	80 83       	st	Z, r24
    1d92:	80 e2       	ldi	r24, 0x20	; 32
    1d94:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    1d96:	80 83       	st	Z, r24
    1d98:	31 96       	adiw	r30, 0x01	; 1
    1d9a:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1d9c:	31 96       	adiw	r30, 0x01	; 1
    1d9e:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1da0:	0e c0       	rjmp	.+28     	; 0x1dbe <updateScreen+0x728>
    1da2:	8e e4       	ldi	r24, 0x4E	; 78
				break;
    1da4:	f8 01       	movw	r30, r16
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1da6:	e4 52       	subi	r30, 0x24	; 36
    1da8:	fe 4f       	sbci	r31, 0xFE	; 254
    1daa:	80 83       	st	Z, r24
    1dac:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][15] = 'o';
    1dae:	31 96       	adiw	r30, 0x01	; 1
    1db0:	80 83       	st	Z, r24
    1db2:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][16] = 'n';
    1db4:	31 96       	adiw	r30, 0x01	; 1
    1db6:	80 83       	st	Z, r24
    1db8:	85 e6       	ldi	r24, 0x65	; 101
				menuScreen->screen2[4][17] = 'e';
    1dba:	31 96       	adiw	r30, 0x01	; 1
    1dbc:	80 83       	st	Z, r24
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
				break;
			}
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1dc0:	f7 01       	movw	r30, r14
    1dc2:	e8 0f       	add	r30, r24
    1dc4:	f1 1d       	adc	r31, r1
    1dc6:	e5 53       	subi	r30, 0x35	; 53
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
		numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1dca:	20 81       	ld	r18, Z
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	32 2f       	mov	r19, r18
    1dd0:	22 27       	eor	r18, r18
				menuScreen->screen2[4][15] = 'o';
				menuScreen->screen2[4][16] = 'n';
				menuScreen->screen2[4][17] = 'e';
				break;
			}
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1dd2:	70 96       	adiw	r30, 0x10	; 16
		numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1dd4:	80 81       	ld	r24, Z
    1dd6:	28 2b       	or	r18, r24
    1dd8:	45 e0       	ldi	r20, 0x05	; 5
    1dda:	6d e0       	ldi	r22, 0x0D	; 13
    1ddc:	c8 01       	movw	r24, r16
    1dde:	8d 51       	subi	r24, 0x1D	; 29
    1de0:	9e 4f       	sbci	r25, 0xFE	; 254
    1de2:	7d d3       	rcall	.+1786   	; 0x24de <numPrinter>
		menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
    1de4:	d8 01       	movw	r26, r16
    1de6:	a0 51       	subi	r26, 0x10	; 16
    1de8:	be 4f       	sbci	r27, 0xFE	; 254
    1dea:	8c 91       	ld	r24, X
    1dec:	f8 01       	movw	r30, r16
    1dee:	e1 51       	subi	r30, 0x11	; 17
    1df0:	fe 4f       	sbci	r31, 0xFE	; 254
    1df2:	80 83       	st	Z, r24
		menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
    1df4:	32 96       	adiw	r30, 0x02	; 2
    1df6:	80 81       	ld	r24, Z
    1df8:	8c 93       	st	X, r24
		menuScreen->screen2[5][14] = '.';
    1dfa:	8e e2       	ldi	r24, 0x2E	; 46
    1dfc:	80 83       	st	Z, r24
    1dfe:	8e 81       	ldd	r24, Y+6	; 0x06
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
			
			if(((currentGlobals->menuState)&selectBit)>35) //this accounts for menu stats 36,37,44, and 45
    1e00:	87 7f       	andi	r24, 0xF7	; 247
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	24 32       	cpi	r18, 0x24	; 36
    1e08:	31 05       	cpc	r19, r1
			{
				triggerChangeScreen = ((currentGlobals->menuState)&selectBit) - 34; //mask to get rid of encoder B pushed state. 
    1e0a:	14 f0       	brlt	.+4      	; 0x1e10 <updateScreen+0x77a>
		menuScreen->screen2[5][14] = '.';
			//the track settings screens should now be populated
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
    1e0c:	82 52       	subi	r24, 0x22	; 34
			if(((currentGlobals->menuState)&selectBit)>35) //this accounts for menu stats 36,37,44, and 45
			{
				triggerChangeScreen = ((currentGlobals->menuState)&selectBit) - 34; //mask to get rid of encoder B pushed state. 
			}
			
			outputS(menuScreen->screen2[triggerChangeScreen], 1); 
    1e0e:	01 c0       	rjmp	.+2      	; 0x1e12 <updateScreen+0x77c>
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	c8 2e       	mov	r12, r24
    1e14:	d1 2c       	mov	r13, r1
    1e16:	0f 2e       	mov	r0, r31
    1e18:	f5 e1       	ldi	r31, 0x15	; 21
    1e1a:	bf 2e       	mov	r11, r31
    1e1c:	f0 2d       	mov	r31, r0
    1e1e:	bc 9c       	mul	r11, r12
    1e20:	c0 01       	movw	r24, r0
    1e22:	bd 9c       	mul	r11, r13
    1e24:	90 0d       	add	r25, r0
    1e26:	11 24       	eor	r1, r1
    1e28:	86 58       	subi	r24, 0x86	; 134
    1e2a:	9e 4f       	sbci	r25, 0xFE	; 254
    1e2c:	61 e0       	ldi	r22, 0x01	; 1
    1e2e:	70 e0       	ldi	r23, 0x00	; 0
    1e30:	80 0f       	add	r24, r16
			outputS(menuScreen->screen2[triggerChangeScreen+1], 2); 
    1e32:	91 1f       	adc	r25, r17
    1e34:	3c d3       	rcall	.+1656   	; 0x24ae <outputS>
    1e36:	96 01       	movw	r18, r12
    1e38:	2f 5f       	subi	r18, 0xFF	; 255
    1e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3c:	b2 9e       	mul	r11, r18
    1e3e:	c0 01       	movw	r24, r0
    1e40:	b3 9e       	mul	r11, r19
    1e42:	90 0d       	add	r25, r0
    1e44:	11 24       	eor	r1, r1
    1e46:	86 58       	subi	r24, 0x86	; 134
    1e48:	9e 4f       	sbci	r25, 0xFE	; 254
    1e4a:	62 e0       	ldi	r22, 0x02	; 2
    1e4c:	70 e0       	ldi	r23, 0x00	; 0
    1e4e:	80 0f       	add	r24, r16
    1e50:	91 1f       	adc	r25, r17
			outputS(menuScreen->screen2[triggerChangeScreen+2], 3);
    1e52:	2d d3       	rcall	.+1626   	; 0x24ae <outputS>
    1e54:	f2 e0       	ldi	r31, 0x02	; 2
    1e56:	cf 0e       	add	r12, r31
    1e58:	d1 1c       	adc	r13, r1
    1e5a:	bc 9c       	mul	r11, r12
    1e5c:	c0 01       	movw	r24, r0
    1e5e:	bd 9c       	mul	r11, r13
    1e60:	90 0d       	add	r25, r0
    1e62:	11 24       	eor	r1, r1
    1e64:	86 58       	subi	r24, 0x86	; 134
    1e66:	9e 4f       	sbci	r25, 0xFE	; 254
    1e68:	63 e0       	ldi	r22, 0x03	; 3
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	80 0f       	add	r24, r16
    1e6e:	91 1f       	adc	r25, r17
    1e70:	1e d3       	rcall	.+1596   	; 0x24ae <outputS>
			
			break;
    1e72:	19 c0       	rjmp	.+50     	; 0x1ea6 <updateScreen+0x810>
			
			case 3:;
			//do we need this variable?
			numPrinter(menuScreen->screen3[2],10,2,(currentGlobals->currentTrack)+1);
    1e74:	2d 81       	ldd	r18, Y+5	; 0x05
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	2f 5f       	subi	r18, 0xFF	; 255
    1e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7c:	42 e0       	ldi	r20, 0x02	; 2
    1e7e:	6a e0       	ldi	r22, 0x0A	; 10
    1e80:	68 01       	movw	r12, r16
    1e82:	8f e9       	ldi	r24, 0x9F	; 159
    1e84:	c8 1a       	sub	r12, r24
    1e86:	8d ef       	ldi	r24, 0xFD	; 253
    1e88:	d8 0a       	sbc	r13, r24
    1e8a:	c6 01       	movw	r24, r12
    1e8c:	28 d3       	rcall	.+1616   	; 0x24de <numPrinter>
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	fe 01       	movw	r30, r28
    1e92:	e8 0f       	add	r30, r24
    1e94:	f1 1d       	adc	r31, r1
    1e96:	45 85       	ldd	r20, Z+13	; 0x0d
    1e98:	6e e0       	ldi	r22, 0x0E	; 14
    1e9a:	c6 01       	movw	r24, r12
    1e9c:	e6 d4       	rcall	.+2508   	; 0x286a <midiNotePrinter>
    1e9e:	62 e0       	ldi	r22, 0x02	; 2
			outputS(menuScreen->screen3[2],2);
    1ea0:	70 e0       	ldi	r23, 0x00	; 0
    1ea2:	c6 01       	movw	r24, r12
    1ea4:	04 d3       	rcall	.+1544   	; 0x24ae <outputS>
    1ea6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ea8:	82 ff       	sbrs	r24, 2
			break;
			
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
    1eaa:	65 c1       	rjmp	.+714    	; 0x2176 <updateScreen+0xae0>
    1eac:	8b 85       	ldd	r24, Y+11	; 0x0b
    1eae:	98 2f       	mov	r25, r24
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
    1eb0:	9f 70       	andi	r25, 0x0F	; 15
    1eb2:	89 2e       	mov	r8, r25
    1eb4:	99 85       	ldd	r25, Y+9	; 0x09
    1eb6:	90 ff       	sbrs	r25, 0
		uint8_t positionSelectUpper = 0;
		if((currentGlobals->buttonSwitchFlag)&0x01)
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <updateScreen+0x828>
    1eba:	28 e0       	ldi	r18, 0x08	; 8
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <updateScreen+0x82a>
		{
			positionSelectUpper = 8;
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	82 95       	swap	r24
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
		uint8_t positionSelectUpper = 0;
    1ec2:	8f 70       	andi	r24, 0x0F	; 15
		{
			positionSelectUpper = 8;
		}
		

		switch((currentGlobals->knobStatus)>>4)
    1ec4:	82 30       	cpi	r24, 0x02	; 2
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <updateScreen+0x834>
    1ec8:	8e c0       	rjmp	.+284    	; 0x1fe6 <updateScreen+0x950>
    1eca:	30 f4       	brcc	.+12     	; 0x1ed8 <updateScreen+0x842>
    1ecc:	88 23       	and	r24, r24
    1ece:	69 f0       	breq	.+26     	; 0x1eea <updateScreen+0x854>
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <updateScreen+0x840>
    1ed4:	52 c0       	rjmp	.+164    	; 0x1f7a <updateScreen+0x8e4>
    1ed6:	4e c1       	rjmp	.+668    	; 0x2174 <updateScreen+0xade>
    1ed8:	84 30       	cpi	r24, 0x04	; 4
    1eda:	09 f4       	brne	.+2      	; 0x1ede <updateScreen+0x848>
    1edc:	f0 c0       	rjmp	.+480    	; 0x20be <updateScreen+0xa28>
    1ede:	08 f4       	brcc	.+2      	; 0x1ee2 <updateScreen+0x84c>
    1ee0:	b8 c0       	rjmp	.+368    	; 0x2052 <updateScreen+0x9bc>
    1ee2:	85 30       	cpi	r24, 0x05	; 5
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <updateScreen+0x852>
    1ee6:	34 c1       	rjmp	.+616    	; 0x2150 <updateScreen+0xaba>
    1ee8:	45 c1       	rjmp	.+650    	; 0x2174 <updateScreen+0xade>
    1eea:	e8 2d       	mov	r30, r8
		{
			case 0: //output volume
			if((currentPattern->outputLevelMSB[positionSelect])==0)
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	d7 01       	movw	r26, r14
    1ef0:	ae 0f       	add	r26, r30
    1ef2:	bf 1f       	adc	r27, r31
    1ef4:	8c 91       	ld	r24, X
    1ef6:	81 11       	cpse	r24, r1
    1ef8:	0a c0       	rjmp	.+20     	; 0x1f0e <updateScreen+0x878>
    1efa:	fd 01       	movw	r30, r26
			{ //value is positive
				numPrinter(menuScreen->knobScreen[0],14,3,currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
    1efc:	20 85       	ldd	r18, Z+8	; 0x08
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	43 e0       	ldi	r20, 0x03	; 3
    1f02:	6e e0       	ldi	r22, 0x0E	; 14
    1f04:	c8 01       	movw	r24, r16
    1f06:	8c 50       	subi	r24, 0x0C	; 12
    1f08:	9d 4f       	sbci	r25, 0xFD	; 253
    1f0a:	e9 d2       	rcall	.+1490   	; 0x24de <numPrinter>
    1f0c:	29 c0       	rjmp	.+82     	; 0x1f60 <updateScreen+0x8ca>
    1f0e:	8d e2       	ldi	r24, 0x2D	; 45
    1f10:	d8 01       	movw	r26, r16
			}else
			{
				menuScreen->knobScreen[0][14] = '-';
    1f12:	ae 5f       	subi	r26, 0xFE	; 254
    1f14:	bc 4f       	sbci	r27, 0xFC	; 252
    1f16:	8c 93       	st	X, r24
    1f18:	68 01       	movw	r12, r16
				menuScreen->knobScreen[0][15] = ((((currentPattern->outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    1f1a:	a3 e0       	ldi	r26, 0x03	; 3
    1f1c:	ca 0e       	add	r12, r26
    1f1e:	da 1e       	adc	r13, r26
    1f20:	ee 0d       	add	r30, r14
    1f22:	ff 1d       	adc	r31, r15
    1f24:	80 85       	ldd	r24, Z+8	; 0x08
    1f26:	80 95       	com	r24
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	01 96       	adiw	r24, 0x01	; 1
    1f2c:	64 e6       	ldi	r22, 0x64	; 100
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__divmodhi4>
    1f34:	2a e0       	ldi	r18, 0x0A	; 10
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	b9 01       	movw	r22, r18
    1f3a:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__divmodhi4>
    1f3e:	60 5d       	subi	r22, 0xD0	; 208
    1f40:	d6 01       	movw	r26, r12
    1f42:	6c 93       	st	X, r22
				menuScreen->knobScreen[0][16] = (((currentPattern->outputLevelLSB[positionSelect]^255)+1)%10)+48;
    1f44:	78 01       	movw	r14, r16
    1f46:	bc ef       	ldi	r27, 0xFC	; 252
    1f48:	eb 1a       	sub	r14, r27
    1f4a:	fb 0a       	sbc	r15, r27
    1f4c:	80 85       	ldd	r24, Z+8	; 0x08
    1f4e:	80 95       	com	r24
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	01 96       	adiw	r24, 0x01	; 1
    1f54:	b9 01       	movw	r22, r18
    1f56:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__divmodhi4>
    1f5a:	80 5d       	subi	r24, 0xD0	; 208
    1f5c:	f7 01       	movw	r30, r14
			}
				
			menuScreen->knobScreen[0][10] = positionSelect + 49;
    1f5e:	80 83       	st	Z, r24
    1f60:	f8 01       	movw	r30, r16
    1f62:	e2 50       	subi	r30, 0x02	; 2
    1f64:	fd 4f       	sbci	r31, 0xFD	; 253
    1f66:	81 e3       	ldi	r24, 0x31	; 49
    1f68:	88 0d       	add	r24, r8
			outputS(menuScreen->knobScreen[0], 3);
    1f6a:	80 83       	st	Z, r24
    1f6c:	63 e0       	ldi	r22, 0x03	; 3
    1f6e:	70 e0       	ldi	r23, 0x00	; 0
    1f70:	c8 01       	movw	r24, r16
    1f72:	8c 50       	subi	r24, 0x0C	; 12
    1f74:	9d 4f       	sbci	r25, 0xFD	; 253
    1f76:	9b d2       	rcall	.+1334   	; 0x24ae <outputS>
			break;
    1f78:	fd c0       	rjmp	.+506    	; 0x2174 <updateScreen+0xade>
				
			case 1: //pitch
			menuScreen->knobScreen[1][5] = positionSelect+49; 
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	e2 5f       	subi	r30, 0xF2	; 242
    1f7e:	fc 4f       	sbci	r31, 0xFC	; 252
    1f80:	81 e3       	ldi	r24, 0x31	; 49
    1f82:	88 0d       	add	r24, r8
			if(currentPattern->outputPitch[positionSelect]>>7)
    1f84:	80 83       	st	Z, r24
    1f86:	91 2c       	mov	r9, r1
    1f88:	f7 01       	movw	r30, r14
    1f8a:	e8 0d       	add	r30, r8
    1f8c:	f9 1d       	adc	r31, r9
    1f8e:	80 89       	ldd	r24, Z+16	; 0x10
    1f90:	88 23       	and	r24, r24
			{
				menuScreen->knobScreen[1][7] = '-';
    1f92:	94 f4       	brge	.+36     	; 0x1fb8 <updateScreen+0x922>
    1f94:	8d e2       	ldi	r24, 0x2D	; 45
    1f96:	f8 01       	movw	r30, r16
    1f98:	e0 5f       	subi	r30, 0xF0	; 240
    1f9a:	fc 4f       	sbci	r31, 0xFC	; 252
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect])^255);
    1f9c:	80 83       	st	Z, r24
    1f9e:	f7 01       	movw	r30, r14
    1fa0:	e8 0d       	add	r30, r8
    1fa2:	f9 1d       	adc	r31, r9
    1fa4:	20 89       	ldd	r18, Z+16	; 0x10
    1fa6:	20 95       	com	r18
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	43 e0       	ldi	r20, 0x03	; 3
    1fac:	68 e0       	ldi	r22, 0x08	; 8
    1fae:	c8 01       	movw	r24, r16
    1fb0:	87 5f       	subi	r24, 0xF7	; 247
    1fb2:	9c 4f       	sbci	r25, 0xFC	; 252
			}else
			{
				menuScreen->knobScreen[1][7] = '+';
    1fb4:	94 d2       	rcall	.+1320   	; 0x24de <numPrinter>
    1fb6:	10 c0       	rjmp	.+32     	; 0x1fd8 <updateScreen+0x942>
    1fb8:	8b e2       	ldi	r24, 0x2B	; 43
    1fba:	f8 01       	movw	r30, r16
    1fbc:	e0 5f       	subi	r30, 0xF0	; 240
				numPrinter(menuScreen->knobScreen[1],8,3,currentPattern->outputPitch[positionSelect]);
    1fbe:	fc 4f       	sbci	r31, 0xFC	; 252
    1fc0:	80 83       	st	Z, r24
    1fc2:	f7 01       	movw	r30, r14
    1fc4:	e8 0d       	add	r30, r8
    1fc6:	f9 1d       	adc	r31, r9
    1fc8:	20 89       	ldd	r18, Z+16	; 0x10
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	43 e0       	ldi	r20, 0x03	; 3
    1fce:	68 e0       	ldi	r22, 0x08	; 8
    1fd0:	c8 01       	movw	r24, r16
    1fd2:	87 5f       	subi	r24, 0xF7	; 247
    1fd4:	9c 4f       	sbci	r25, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
    1fd6:	83 d2       	rcall	.+1286   	; 0x24de <numPrinter>
    1fd8:	63 e0       	ldi	r22, 0x03	; 3
    1fda:	70 e0       	ldi	r23, 0x00	; 0
    1fdc:	c8 01       	movw	r24, r16
    1fde:	87 5f       	subi	r24, 0xF7	; 247
    1fe0:	9c 4f       	sbci	r25, 0xFC	; 252
			break;
    1fe2:	65 d2       	rcall	.+1226   	; 0x24ae <outputS>
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    1fe4:	c7 c0       	rjmp	.+398    	; 0x2174 <updateScreen+0xade>
    1fe6:	91 2c       	mov	r9, r1
    1fe8:	c2 2e       	mov	r12, r18
    1fea:	d1 2c       	mov	r13, r1
    1fec:	c4 01       	movw	r24, r8
    1fee:	8c 0d       	add	r24, r12
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    1ff0:	9d 1d       	adc	r25, r13
    1ff2:	58 01       	movw	r10, r16
    1ff4:	f2 ee       	ldi	r31, 0xE2	; 226
    1ff6:	af 1a       	sub	r10, r31
    1ff8:	fc ef       	ldi	r31, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    1ffa:	bf 0a       	sbc	r11, r31
    1ffc:	e8 0e       	add	r14, r24
    1ffe:	f9 1e       	adc	r15, r25
    2000:	f7 01       	movw	r30, r14
    2002:	e8 5b       	subi	r30, 0xB8	; 184
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	20 81       	ld	r18, Z
    2008:	30 e0       	ldi	r19, 0x00	; 0
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    200a:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    200c:	22 27       	eor	r18, r18
    200e:	70 96       	adiw	r30, 0x10	; 16
    2010:	80 81       	ld	r24, Z
    2012:	28 2b       	or	r18, r24
    2014:	45 e0       	ldi	r20, 0x05	; 5
    2016:	6e e0       	ldi	r22, 0x0E	; 14
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
    2018:	c5 01       	movw	r24, r10
    201a:	61 d2       	rcall	.+1218   	; 0x24de <numPrinter>
    201c:	f8 01       	movw	r30, r16
    201e:	e5 5d       	subi	r30, 0xD5	; 213
    2020:	fc 4f       	sbci	r31, 0xFC	; 252
    2022:	d8 01       	movw	r26, r16
    2024:	a4 5d       	subi	r26, 0xD4	; 212
    2026:	bc 4f       	sbci	r27, 0xFC	; 252
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
    2028:	8c 91       	ld	r24, X
    202a:	80 83       	st	Z, r24
    202c:	32 96       	adiw	r30, 0x02	; 2
			menuScreen->knobScreen[2][15] = '.';	
    202e:	80 81       	ld	r24, Z
    2030:	8c 93       	st	X, r24
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
    2032:	8e e2       	ldi	r24, 0x2E	; 46
    2034:	80 83       	st	Z, r24
    2036:	94 01       	movw	r18, r8
    2038:	2f 5f       	subi	r18, 0xFF	; 255
    203a:	3f 4f       	sbci	r19, 0xFF	; 255
    203c:	2c 0d       	add	r18, r12
    203e:	3d 1d       	adc	r19, r13
    2040:	42 e0       	ldi	r20, 0x02	; 2
    2042:	6a e0       	ldi	r22, 0x0A	; 10
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
    2044:	c5 01       	movw	r24, r10
    2046:	4b d2       	rcall	.+1174   	; 0x24de <numPrinter>
    2048:	63 e0       	ldi	r22, 0x03	; 3
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	c5 01       	movw	r24, r10
			break;
    204e:	2f d2       	rcall	.+1118   	; 0x24ae <outputS>
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    2050:	91 c0       	rjmp	.+290    	; 0x2174 <updateScreen+0xade>
    2052:	91 2c       	mov	r9, r1
    2054:	c2 2e       	mov	r12, r18
    2056:	d1 2c       	mov	r13, r1
    2058:	c4 01       	movw	r24, r8
    205a:	8c 0d       	add	r24, r12
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    205c:	9d 1d       	adc	r25, r13
    205e:	58 01       	movw	r10, r16
    2060:	2d ec       	ldi	r18, 0xCD	; 205
    2062:	a2 1a       	sub	r10, r18
    2064:	2c ef       	ldi	r18, 0xFC	; 252
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
			break;
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    2066:	b2 0a       	sbc	r11, r18
    2068:	e8 0e       	add	r14, r24
    206a:	f9 1e       	adc	r15, r25
    206c:	f7 01       	movw	r30, r14
    206e:	e8 59       	subi	r30, 0x98	; 152
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	20 81       	ld	r18, Z
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
			break;
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    2078:	22 27       	eor	r18, r18
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    207a:	70 96       	adiw	r30, 0x10	; 16
    207c:	80 81       	ld	r24, Z
    207e:	28 2b       	or	r18, r24
    2080:	45 e0       	ldi	r20, 0x05	; 5
    2082:	6f e0       	ldi	r22, 0x0F	; 15
    2084:	c5 01       	movw	r24, r10
    2086:	2b d2       	rcall	.+1110   	; 0x24de <numPrinter>
			menuScreen->knobScreen[3][14] = menuScreen->knobScreen[3][15];
    2088:	f8 01       	movw	r30, r16
    208a:	ef 5b       	subi	r30, 0xBF	; 191
    208c:	fc 4f       	sbci	r31, 0xFC	; 252
    208e:	d8 01       	movw	r26, r16
    2090:	ae 5b       	subi	r26, 0xBE	; 190
    2092:	bc 4f       	sbci	r27, 0xFC	; 252
    2094:	8c 91       	ld	r24, X
			menuScreen->knobScreen[3][15] = menuScreen->knobScreen[3][16];
    2096:	80 83       	st	Z, r24
    2098:	32 96       	adiw	r30, 0x02	; 2
    209a:	80 81       	ld	r24, Z
			menuScreen->knobScreen[3][16] = '.';
    209c:	8c 93       	st	X, r24
			numPrinter(menuScreen->knobScreen[3],11,2,(positionSelect+1+positionSelectUpper));
    209e:	8e e2       	ldi	r24, 0x2E	; 46
    20a0:	80 83       	st	Z, r24
    20a2:	94 01       	movw	r18, r8
    20a4:	2f 5f       	subi	r18, 0xFF	; 255
    20a6:	3f 4f       	sbci	r19, 0xFF	; 255
    20a8:	2c 0d       	add	r18, r12
    20aa:	3d 1d       	adc	r19, r13
    20ac:	42 e0       	ldi	r20, 0x02	; 2
    20ae:	6b e0       	ldi	r22, 0x0B	; 11
    20b0:	c5 01       	movw	r24, r10
			outputS(menuScreen->knobScreen[3], 3);
    20b2:	15 d2       	rcall	.+1066   	; 0x24de <numPrinter>
    20b4:	63 e0       	ldi	r22, 0x03	; 3
    20b6:	70 e0       	ldi	r23, 0x00	; 0
    20b8:	c5 01       	movw	r24, r10
			break;
    20ba:	f9 d1       	rcall	.+1010   	; 0x24ae <outputS>
				
			case 4: //track volume
			if(currentPattern->trackMainVolumeMSB[(positionSelect+positionSelectUpper)]==0)
    20bc:	5b c0       	rjmp	.+182    	; 0x2174 <updateScreen+0xade>
    20be:	c2 2e       	mov	r12, r18
    20c0:	d1 2c       	mov	r13, r1
    20c2:	c8 0c       	add	r12, r8
    20c4:	d1 1c       	adc	r13, r1
    20c6:	f7 01       	movw	r30, r14
    20c8:	ec 0d       	add	r30, r12
    20ca:	fd 1d       	adc	r31, r13
    20cc:	80 a5       	ldd	r24, Z+40	; 0x28
			{
				numPrinter(menuScreen->knobScreen[4],15, 2, currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]);
    20ce:	81 11       	cpse	r24, r1
    20d0:	0c c0       	rjmp	.+24     	; 0x20ea <updateScreen+0xa54>
    20d2:	f7 01       	movw	r30, r14
    20d4:	ec 0d       	add	r30, r12
    20d6:	fd 1d       	adc	r31, r13
    20d8:	20 ad       	ldd	r18, Z+56	; 0x38
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	42 e0       	ldi	r20, 0x02	; 2
    20de:	6f e0       	ldi	r22, 0x0F	; 15
    20e0:	c8 01       	movw	r24, r16
    20e2:	88 5b       	subi	r24, 0xB8	; 184
    20e4:	9c 4f       	sbci	r25, 0xFC	; 252
    20e6:	fb d1       	rcall	.+1014   	; 0x24de <numPrinter>
			}else
			{
				menuScreen->knobScreen[4][15] = '-';
    20e8:	25 c0       	rjmp	.+74     	; 0x2134 <updateScreen+0xa9e>
    20ea:	8d e2       	ldi	r24, 0x2D	; 45
    20ec:	f8 01       	movw	r30, r16
    20ee:	e9 5a       	subi	r30, 0xA9	; 169
    20f0:	fc 4f       	sbci	r31, 0xFC	; 252
				menuScreen->knobScreen[4][16] = ((((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    20f2:	80 83       	st	Z, r24
    20f4:	31 96       	adiw	r30, 0x01	; 1
    20f6:	ec 0c       	add	r14, r12
    20f8:	fd 1c       	adc	r15, r13
    20fa:	d7 01       	movw	r26, r14
    20fc:	d8 96       	adiw	r26, 0x38	; 56
    20fe:	8c 91       	ld	r24, X
    2100:	80 95       	com	r24
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	64 e6       	ldi	r22, 0x64	; 100
    2108:	70 e0       	ldi	r23, 0x00	; 0
    210a:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__divmodhi4>
    210e:	2a e0       	ldi	r18, 0x0A	; 10
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	b9 01       	movw	r22, r18
    2114:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__divmodhi4>
    2118:	60 5d       	subi	r22, 0xD0	; 208
				menuScreen->knobScreen[4][17] = (((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%10)+48;
    211a:	60 83       	st	Z, r22
    211c:	31 96       	adiw	r30, 0x01	; 1
    211e:	d7 01       	movw	r26, r14
    2120:	d8 96       	adiw	r26, 0x38	; 56
    2122:	8c 91       	ld	r24, X
    2124:	80 95       	com	r24
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	01 96       	adiw	r24, 0x01	; 1
    212a:	b9 01       	movw	r22, r18
    212c:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__divmodhi4>
    2130:	80 5d       	subi	r24, 0xD0	; 208
			}
				 numPrinter(menuScreen->knobScreen[4],12,2,(positionSelect+positionSelectUpper+1));
    2132:	80 83       	st	Z, r24
    2134:	08 5b       	subi	r16, 0xB8	; 184
    2136:	1c 4f       	sbci	r17, 0xFC	; 252
    2138:	96 01       	movw	r18, r12
    213a:	2f 5f       	subi	r18, 0xFF	; 255
    213c:	3f 4f       	sbci	r19, 0xFF	; 255
    213e:	42 e0       	ldi	r20, 0x02	; 2
    2140:	6c e0       	ldi	r22, 0x0C	; 12
    2142:	c8 01       	movw	r24, r16
    2144:	cc d1       	rcall	.+920    	; 0x24de <numPrinter>
				 outputS(menuScreen->knobScreen[4], 3);
    2146:	63 e0       	ldi	r22, 0x03	; 3
    2148:	70 e0       	ldi	r23, 0x00	; 0
    214a:	c8 01       	movw	r24, r16
    214c:	b0 d1       	rcall	.+864    	; 0x24ae <outputS>
    214e:	12 c0       	rjmp	.+36     	; 0x2174 <updateScreen+0xade>
			break;
    2150:	06 5d       	subi	r16, 0xD6	; 214
			
			case 5:
			numPrinter(menuScreen->screen0[2],5,3,currentPattern->patternBPM);
    2152:	1f 4f       	sbci	r17, 0xFF	; 255
    2154:	f7 01       	movw	r30, r14
    2156:	e8 53       	subi	r30, 0x38	; 56
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	20 81       	ld	r18, Z
    215c:	31 81       	ldd	r19, Z+1	; 0x01
    215e:	43 e0       	ldi	r20, 0x03	; 3
    2160:	65 e0       	ldi	r22, 0x05	; 5
    2162:	c8 01       	movw	r24, r16
    2164:	bc d1       	rcall	.+888    	; 0x24de <numPrinter>
    2166:	8e 81       	ldd	r24, Y+6	; 0x06
    2168:	81 11       	cpse	r24, r1
			if(currentGlobals->menuState==PreformanceModeInit)
    216a:	04 c0       	rjmp	.+8      	; 0x2174 <updateScreen+0xade>
    216c:	62 e0       	ldi	r22, 0x02	; 2
    216e:	70 e0       	ldi	r23, 0x00	; 0
			{
				outputS(menuScreen->screen0[2],2);
    2170:	c8 01       	movw	r24, r16
    2172:	9d d1       	rcall	.+826    	; 0x24ae <outputS>
    2174:	1a 86       	std	Y+10, r1	; 0x0a
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
			}
			break;
		}
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<knobChange));			
    217a:	1f 91       	pop	r17
	}
    217c:	0f 91       	pop	r16
    217e:	ff 90       	pop	r15
    2180:	ef 90       	pop	r14
    2182:	df 90       	pop	r13
    2184:	cf 90       	pop	r12
    2186:	bf 90       	pop	r11
    2188:	af 90       	pop	r10
    218a:	9f 90       	pop	r9
    218c:	8f 90       	pop	r8
    218e:	08 95       	ret

00002190 <__vector_54>:
    2190:	1f 92       	push	r1
    2192:	0f 92       	push	r0
    2194:	0f b6       	in	r0, 0x3f	; 63
}

void midiTransmit(uint8_t data)
{
  while (!(UCSR3A & (1 << UDRE3)));
  UDR3 = data;
    2196:	0f 92       	push	r0
    2198:	11 24       	eor	r1, r1
    219a:	0b b6       	in	r0, 0x3b	; 59
    219c:	0f 92       	push	r0
    219e:	2f 93       	push	r18
    21a0:	3f 93       	push	r19
    21a2:	5f 93       	push	r21
    21a4:	6f 93       	push	r22
    21a6:	7f 93       	push	r23
    21a8:	8f 93       	push	r24
    21aa:	9f 93       	push	r25
    21ac:	af 93       	push	r26
    21ae:	bf 93       	push	r27
    21b0:	ef 93       	push	r30
    21b2:	ff 93       	push	r31
    21b4:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    21b8:	82 2f       	mov	r24, r18
    21ba:	82 95       	swap	r24
    21bc:	8f 70       	andi	r24, 0x0F	; 15
    21be:	88 50       	subi	r24, 0x08	; 8
    21c0:	82 30       	cpi	r24, 0x02	; 2
    21c2:	78 f4       	brcc	.+30     	; 0x21e2 <__vector_54+0x52>
    21c4:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <midiWriteIndex>
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	fc 01       	movw	r30, r24
    21cc:	ee 0f       	add	r30, r30
    21ce:	ff 1f       	adc	r31, r31
    21d0:	8e 0f       	add	r24, r30
    21d2:	9f 1f       	adc	r25, r31
    21d4:	fc 01       	movw	r30, r24
    21d6:	e6 5f       	subi	r30, 0xF6	; 246
    21d8:	f9 4f       	sbci	r31, 0xF9	; 249
    21da:	20 83       	st	Z, r18
    21dc:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    21e0:	50 c0       	rjmp	.+160    	; 0x2282 <__stack+0x83>
    21e2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    21e6:	81 11       	cpse	r24, r1
    21e8:	15 c0       	rjmp	.+42     	; 0x2214 <__stack+0x15>
    21ea:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <midiWriteIndex>
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    21f4:	fc 01       	movw	r30, r24
    21f6:	ee 0f       	add	r30, r30
    21f8:	ff 1f       	adc	r31, r31
    21fa:	e8 0f       	add	r30, r24
    21fc:	f9 1f       	adc	r31, r25
    21fe:	e6 5f       	subi	r30, 0xF6	; 246
    2200:	f9 4f       	sbci	r31, 0xF9	; 249
    2202:	e3 0f       	add	r30, r19
    2204:	f1 1d       	adc	r31, r1
    2206:	21 83       	std	Z+1, r18	; 0x01
    2208:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    220c:	8f 5f       	subi	r24, 0xFF	; 255
    220e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <midiWriteFlag>
    2212:	37 c0       	rjmp	.+110    	; 0x2282 <__stack+0x83>
    2214:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    2218:	8f 3f       	cpi	r24, 0xFF	; 255
    221a:	99 f1       	breq	.+102    	; 0x2282 <__stack+0x83>
    221c:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <midiWriteIndex>
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    2226:	fc 01       	movw	r30, r24
    2228:	ee 0f       	add	r30, r30
    222a:	ff 1f       	adc	r31, r31
    222c:	e8 0f       	add	r30, r24
    222e:	f9 1f       	adc	r31, r25
    2230:	e6 5f       	subi	r30, 0xF6	; 246
    2232:	f9 4f       	sbci	r31, 0xF9	; 249
    2234:	e3 0f       	add	r30, r19
    2236:	f1 1d       	adc	r31, r1
    2238:	21 83       	std	Z+1, r18	; 0x01
    223a:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <midiWriteIndex>
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	fc 01       	movw	r30, r24
    2242:	ee 0f       	add	r30, r30
    2244:	ff 1f       	adc	r31, r31
    2246:	8e 0f       	add	r24, r30
    2248:	9f 1f       	adc	r25, r31
    224a:	fc 01       	movw	r30, r24
    224c:	e6 5f       	subi	r30, 0xF6	; 246
    224e:	f9 4f       	sbci	r31, 0xF9	; 249
    2250:	20 81       	ld	r18, Z
    2252:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <midiWriteIndex>
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	01 96       	adiw	r24, 0x01	; 1
    225a:	6a e0       	ldi	r22, 0x0A	; 10
    225c:	70 e0       	ldi	r23, 0x00	; 0
    225e:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__divmodhi4>
    2262:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <midiWriteIndex>
    2266:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <midiWriteIndex>
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	fc 01       	movw	r30, r24
    226e:	ee 0f       	add	r30, r30
    2270:	ff 1f       	adc	r31, r31
    2272:	8e 0f       	add	r24, r30
    2274:	9f 1f       	adc	r25, r31
    2276:	fc 01       	movw	r30, r24
    2278:	e6 5f       	subi	r30, 0xF6	; 246
    227a:	f9 4f       	sbci	r31, 0xF9	; 249
    227c:	20 83       	st	Z, r18
    227e:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    2282:	ff 91       	pop	r31
    2284:	ef 91       	pop	r30
    2286:	bf 91       	pop	r27
    2288:	af 91       	pop	r26
    228a:	9f 91       	pop	r25
    228c:	8f 91       	pop	r24
    228e:	7f 91       	pop	r23
    2290:	6f 91       	pop	r22
    2292:	5f 91       	pop	r21
    2294:	3f 91       	pop	r19
    2296:	2f 91       	pop	r18
    2298:	0f 90       	pop	r0
    229a:	0b be       	out	0x3b, r0	; 59
    229c:	0f 90       	pop	r0
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	0f 90       	pop	r0
    22a2:	1f 90       	pop	r1
    22a4:	18 95       	reti

000022a6 <initMidi>:
    22a6:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    22aa:	8f e1       	ldi	r24, 0x1F	; 31
    22ac:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    22b0:	e1 e3       	ldi	r30, 0x31	; 49
    22b2:	f1 e0       	ldi	r31, 0x01	; 1
    22b4:	80 81       	ld	r24, Z
    22b6:	88 69       	ori	r24, 0x98	; 152
    22b8:	80 83       	st	Z, r24
    22ba:	e2 e3       	ldi	r30, 0x32	; 50
    22bc:	f1 e0       	ldi	r31, 0x01	; 1
    22be:	80 81       	ld	r24, Z
    22c0:	86 60       	ori	r24, 0x06	; 6
    22c2:	80 83       	st	Z, r24
    22c4:	08 95       	ret

000022c6 <midiRead>:
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
    22c6:	af 92       	push	r10
    22c8:	bf 92       	push	r11
    22ca:	cf 92       	push	r12
    22cc:	df 92       	push	r13
    22ce:	ef 92       	push	r14
    22d0:	ff 92       	push	r15
    22d2:	0f 93       	push	r16
    22d4:	1f 93       	push	r17
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
  while (midiReadIndex != midiWriteIndex)
    22de:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <midiReadIndex>
    22e2:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <midiWriteIndex>
    22e6:	e8 17       	cp	r30, r24
    22e8:	09 f4       	brne	.+2      	; 0x22ec <midiRead+0x26>
    22ea:	5c c0       	rjmp	.+184    	; 0x23a4 <midiRead+0xde>
    22ec:	7e 01       	movw	r14, r28
    22ee:	86 ea       	ldi	r24, 0xA6	; 166
    22f0:	e8 0e       	add	r14, r24
    22f2:	f1 1c       	adc	r15, r1
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    22f4:	0a e0       	ldi	r16, 0x0A	; 10
    22f6:	10 e0       	ldi	r17, 0x00	; 0

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
  {
    uint8_t midiMessageType = ((midiEventBuffer[midiReadIndex].statusByte)>>4);
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	cf 01       	movw	r24, r30
    22fc:	88 0f       	add	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	e8 0f       	add	r30, r24
    2302:	f9 1f       	adc	r31, r25
    2304:	e6 5f       	subi	r30, 0xF6	; 246
    2306:	f9 4f       	sbci	r31, 0xF9	; 249
    2308:	80 81       	ld	r24, Z
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    230a:	22 81       	ldd	r18, Z+2	; 0x02
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    230c:	90 81       	ld	r25, Z
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    230e:	82 95       	swap	r24
    2310:	8f 70       	andi	r24, 0x0F	; 15
    2312:	89 30       	cpi	r24, 0x09	; 9
    2314:	c9 f5       	brne	.+114    	; 0x2388 <midiRead+0xc2>
    2316:	22 23       	and	r18, r18
    2318:	b9 f1       	breq	.+110    	; 0x2388 <midiRead+0xc2>
    231a:	9f 70       	andi	r25, 0x0F	; 15
    231c:	cb 56       	subi	r28, 0x6B	; 107
    231e:	de 4f       	sbci	r29, 0xFE	; 254
    2320:	88 81       	ld	r24, Y
    2322:	c5 59       	subi	r28, 0x95	; 149
    2324:	d1 40       	sbci	r29, 0x01	; 1
    2326:	98 13       	cpse	r25, r24
    2328:	2f c0       	rjmp	.+94     	; 0x2388 <midiRead+0xc2>
    232a:	0f 2e       	mov	r0, r31
    232c:	f9 e8       	ldi	r31, 0x89	; 137
    232e:	af 2e       	mov	r10, r31
    2330:	bb 24       	eor	r11, r11
    2332:	b3 94       	inc	r11
    2334:	f0 2d       	mov	r31, r0
    2336:	ac 0e       	add	r10, r28
    2338:	bd 1e       	adc	r11, r29
    233a:	ed e0       	ldi	r30, 0x0D	; 13
    233c:	ae 0e       	add	r10, r30
    233e:	b1 1c       	adc	r11, r1
    2340:	6e 01       	movw	r12, r28
    2342:	f6 e9       	ldi	r31, 0x96	; 150
    2344:	cf 0e       	add	r12, r31
    2346:	d1 1c       	adc	r13, r1
    {
        for (int i=0; i<16; i++)
        {
          if(midiEventBuffer[midiReadIndex].dataByte[0]==currentGlobals.midiTrackNote[i])
    2348:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <midiReadIndex>
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	fc 01       	movw	r30, r24
    2350:	ee 0f       	add	r30, r30
    2352:	ff 1f       	adc	r31, r31
    2354:	8e 0f       	add	r24, r30
    2356:	9f 1f       	adc	r25, r31
    2358:	fc 01       	movw	r30, r24
    235a:	e6 5f       	subi	r30, 0xF6	; 246
    235c:	f9 4f       	sbci	r31, 0xF9	; 249
    235e:	91 81       	ldd	r25, Z+1	; 0x01
    2360:	f5 01       	movw	r30, r10
    2362:	81 91       	ld	r24, Z+
    2364:	5f 01       	movw	r10, r30
    2366:	98 13       	cpse	r25, r24
    2368:	09 c0       	rjmp	.+18     	; 0x237c <midiRead+0xb6>
          { //we don't care about velocity, at least not yet.
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
    236a:	f6 01       	movw	r30, r12
    236c:	20 81       	ld	r18, Z
    236e:	e0 57       	subi	r30, 0x70	; 112
    2370:	f1 09       	sbc	r31, r1
    2372:	40 81       	ld	r20, Z
    2374:	f6 01       	movw	r30, r12
    2376:	60 89       	ldd	r22, Z+16	; 0x10
    2378:	80 a1       	ldd	r24, Z+32	; 0x20
    237a:	d3 d3       	rcall	.+1958   	; 0x2b22 <trackControl>
    237c:	ff ef       	ldi	r31, 0xFF	; 255
    237e:	cf 1a       	sub	r12, r31
    2380:	df 0a       	sbc	r13, r31
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    {
        for (int i=0; i<16; i++)
    2382:	ce 14       	cp	r12, r14
    2384:	df 04       	cpc	r13, r15
    2386:	01 f7       	brne	.-64     	; 0x2348 <midiRead+0x82>
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    2388:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <midiReadIndex>
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	01 96       	adiw	r24, 0x01	; 1
    2390:	b8 01       	movw	r22, r16
    2392:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__divmodhi4>
    2396:	e8 2f       	mov	r30, r24
    2398:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <midiReadIndex>
  UDR3 = data;
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
    239c:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <midiWriteIndex>
    23a0:	8e 13       	cpse	r24, r30
    23a2:	aa cf       	rjmp	.-172    	; 0x22f8 <midiRead+0x32>
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
  }
}
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	1f 91       	pop	r17
    23aa:	0f 91       	pop	r16
    23ac:	ff 90       	pop	r15
    23ae:	ef 90       	pop	r14
    23b0:	df 90       	pop	r13
    23b2:	cf 90       	pop	r12
    23b4:	bf 90       	pop	r11
    23b6:	af 90       	pop	r10
    23b8:	08 95       	ret

000023ba <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    23ba:	e2 e0       	ldi	r30, 0x02	; 2
    23bc:	f1 e0       	ldi	r31, 0x01	; 1
    23be:	80 81       	ld	r24, Z
    23c0:	80 62       	ori	r24, 0x20	; 32
    23c2:	80 83       	st	Z, r24
    23c4:	85 e0       	ldi	r24, 0x05	; 5
    23c6:	8a 95       	dec	r24
    23c8:	f1 f7       	brne	.-4      	; 0x23c6 <enableCycle+0xc>
    23ca:	00 00       	nop
    23cc:	80 81       	ld	r24, Z
    23ce:	8f 7d       	andi	r24, 0xDF	; 223
    23d0:	80 83       	st	Z, r24
    23d2:	08 95       	ret

000023d4 <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
    23d4:	e2 e0       	ldi	r30, 0x02	; 2
    23d6:	f1 e0       	ldi	r31, 0x01	; 1
    23d8:	90 81       	ld	r25, Z
    23da:	9f 7b       	andi	r25, 0xBF	; 191
    23dc:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    23de:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
    23e0:	ec cf       	rjmp	.-40     	; 0x23ba <enableCycle>
    23e2:	08 95       	ret

000023e4 <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
    23e4:	e2 e0       	ldi	r30, 0x02	; 2
    23e6:	f1 e0       	ldi	r31, 0x01	; 1
    23e8:	90 81       	ld	r25, Z
    23ea:	90 64       	ori	r25, 0x40	; 64
    23ec:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    23ee:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
    23f0:	e4 cf       	rjmp	.-56     	; 0x23ba <enableCycle>
    23f2:	08 95       	ret

000023f4 <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRH = 0x60; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
    23f4:	80 e6       	ldi	r24, 0x60	; 96
    23f6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	DDRC =0xFF; //all pins on the LCD Data Bus.
    23fa:	8f ef       	ldi	r24, 0xFF	; 255
    23fc:	87 b9       	out	0x07, r24	; 7


	PORTH &= 0B10011111;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
    23fe:	e2 e0       	ldi	r30, 0x02	; 2
    2400:	f1 e0       	ldi	r31, 0x01	; 1
    2402:	80 81       	ld	r24, Z
    2404:	8f 79       	andi	r24, 0x9F	; 159
    2406:	80 83       	st	Z, r24

	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
    2408:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    240a:	8f e1       	ldi	r24, 0x1F	; 31
    240c:	93 e0       	ldi	r25, 0x03	; 3
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <initScreen+0x1a>
    2412:	00 c0       	rjmp	.+0      	; 0x2414 <initScreen+0x20>
    2414:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose


	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    2416:	8a e2       	ldi	r24, 0x2A	; 42
    2418:	dd df       	rcall	.-70     	; 0x23d4 <command>
	command(0x71);        // Function selection A:
    241a:	81 e7       	ldi	r24, 0x71	; 113
    241c:	db df       	rcall	.-74     	; 0x23d4 <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
    241e:	8c e5       	ldi	r24, 0x5C	; 92
    2420:	e1 df       	rcall	.-62     	; 0x23e4 <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    2422:	88 e2       	ldi	r24, 0x28	; 40
    2424:	d7 df       	rcall	.-82     	; 0x23d4 <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
    2426:	88 e0       	ldi	r24, 0x08	; 8
    2428:	d5 df       	rcall	.-86     	; 0x23d4 <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    242a:	8a e2       	ldi	r24, 0x2A	; 42
    242c:	d3 df       	rcall	.-90     	; 0x23d4 <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    242e:	89 e7       	ldi	r24, 0x79	; 121
    2430:	d1 df       	rcall	.-94     	; 0x23d4 <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
    2432:	85 ed       	ldi	r24, 0xD5	; 213
    2434:	cf df       	rcall	.-98     	; 0x23d4 <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
    2436:	80 e7       	ldi	r24, 0x70	; 112
    2438:	cd df       	rcall	.-102    	; 0x23d4 <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    243a:	88 e7       	ldi	r24, 0x78	; 120
    243c:	cb df       	rcall	.-106    	; 0x23d4 <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
    243e:	89 e0       	ldi	r24, 0x09	; 9
    2440:	c9 df       	rcall	.-110    	; 0x23d4 <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
    2442:	86 e0       	ldi	r24, 0x06	; 6
    2444:	c7 df       	rcall	.-114    	; 0x23d4 <command>
	command(0x72);        // Function selection B:
    2446:	82 e7       	ldi	r24, 0x72	; 114
    2448:	c5 df       	rcall	.-118    	; 0x23d4 <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
    244a:	8a e0       	ldi	r24, 0x0A	; 10
    244c:	cb df       	rcall	.-106    	; 0x23e4 <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    244e:	89 e7       	ldi	r24, 0x79	; 121
    2450:	c1 df       	rcall	.-126    	; 0x23d4 <command>
	command(0xDA);        // Set SEG pins hardware configuration:
    2452:	8a ed       	ldi	r24, 0xDA	; 218
    2454:	bf df       	rcall	.-130    	; 0x23d4 <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
    2456:	80 e1       	ldi	r24, 0x10	; 16
    2458:	bd df       	rcall	.-134    	; 0x23d4 <command>
	command(0xDC);        // Function selection C:
    245a:	8c ed       	ldi	r24, 0xDC	; 220
    245c:	bb df       	rcall	.-138    	; 0x23d4 <command>
	command(0x00);        //  internal VSL, GPIO input disable
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	b9 df       	rcall	.-142    	; 0x23d4 <command>
	command(0x81);        // Set contrast control:
    2462:	81 e8       	ldi	r24, 0x81	; 129
    2464:	b7 df       	rcall	.-146    	; 0x23d4 <command>
    2466:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
    2468:	b5 df       	rcall	.-150    	; 0x23d4 <command>
    246a:	89 ed       	ldi	r24, 0xD9	; 217
    246c:	b3 df       	rcall	.-154    	; 0x23d4 <command>
	command(0xD9);        // Set phase length:
    246e:	81 ef       	ldi	r24, 0xF1	; 241
    2470:	b1 df       	rcall	.-158    	; 0x23d4 <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
    2472:	8b ed       	ldi	r24, 0xDB	; 219
    2474:	af df       	rcall	.-162    	; 0x23d4 <command>
    2476:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
    2478:	ad df       	rcall	.-166    	; 0x23d4 <command>
    247a:	88 e7       	ldi	r24, 0x78	; 120
    247c:	ab df       	rcall	.-170    	; 0x23d4 <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
    247e:	88 e2       	ldi	r24, 0x28	; 40
    2480:	a9 df       	rcall	.-174    	; 0x23d4 <command>
    2482:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    2484:	a7 df       	rcall	.-178    	; 0x23d4 <command>
    2486:	8f e3       	ldi	r24, 0x3F	; 63
    2488:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <initScreen+0x96>
    248e:	00 c0       	rjmp	.+0      	; 0x2490 <initScreen+0x9c>
	command(0x01);        // Clear display
    2490:	00 00       	nop
    2492:	80 e8       	ldi	r24, 0x80	; 128
    2494:	9f df       	rcall	.-194    	; 0x23d4 <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2496:	8c e0       	ldi	r24, 0x0C	; 12
    2498:	9d df       	rcall	.-198    	; 0x23d4 <command>
    249a:	9f ef       	ldi	r25, 0xFF	; 255
    249c:	24 e3       	ldi	r18, 0x34	; 52
    249e:	8c e0       	ldi	r24, 0x0C	; 12
    24a0:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required

	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
    24a2:	20 40       	sbci	r18, 0x00	; 0
    24a4:	80 40       	sbci	r24, 0x00	; 0
    24a6:	e1 f7       	brne	.-8      	; 0x24a0 <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
    24a8:	00 c0       	rjmp	.+0      	; 0x24aa <initScreen+0xb6>
    24aa:	00 00       	nop
    24ac:	08 95       	ret

000024ae <outputS>:
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	8c 01       	movw	r16, r24
    24b8:	fb 01       	movw	r30, r22
    24ba:	ff 27       	eor	r31, r31
    24bc:	e8 5f       	subi	r30, 0xF8	; 248
    24be:	fd 4f       	sbci	r31, 0xFD	; 253
    24c0:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
    24c2:	88 df       	rcall	.-240    	; 0x23d4 <command>
    24c4:	e8 01       	movw	r28, r16
    24c6:	0c 5e       	subi	r16, 0xEC	; 236
    24c8:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
    24ca:	89 91       	ld	r24, Y+
    24cc:	8b df       	rcall	.-234    	; 0x23e4 <data>
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
    24ce:	c0 17       	cp	r28, r16
    24d0:	d1 07       	cpc	r29, r17
    24d2:	d9 f7       	brne	.-10     	; 0x24ca <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
    24d4:	df 91       	pop	r29
    24d6:	cf 91       	pop	r28
    24d8:	1f 91       	pop	r17
    24da:	0f 91       	pop	r16
    24dc:	08 95       	ret

000024de <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch(numCharacters)
    24e4:	43 30       	cpi	r20, 0x03	; 3
    24e6:	09 f4       	brne	.+2      	; 0x24ea <numPrinter+0xc>
    24e8:	54 c0       	rjmp	.+168    	; 0x2592 <numPrinter+0xb4>
    24ea:	28 f4       	brcc	.+10     	; 0x24f6 <numPrinter+0x18>
    24ec:	41 30       	cpi	r20, 0x01	; 1
    24ee:	51 f0       	breq	.+20     	; 0x2504 <numPrinter+0x26>
    24f0:	42 30       	cpi	r20, 0x02	; 2
    24f2:	29 f1       	breq	.+74     	; 0x253e <numPrinter+0x60>
    24f4:	b7 c1       	rjmp	.+878    	; 0x2864 <numPrinter+0x386>
    24f6:	44 30       	cpi	r20, 0x04	; 4
    24f8:	09 f4       	brne	.+2      	; 0x24fc <numPrinter+0x1e>
    24fa:	95 c0       	rjmp	.+298    	; 0x2626 <numPrinter+0x148>
    24fc:	45 30       	cpi	r20, 0x05	; 5
    24fe:	09 f4       	brne	.+2      	; 0x2502 <numPrinter+0x24>
    2500:	0a c1       	rjmp	.+532    	; 0x2716 <numPrinter+0x238>
    2502:	b0 c1       	rjmp	.+864    	; 0x2864 <numPrinter+0x386>
		case 0:
		break;

		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
    2504:	ec 01       	movw	r28, r24
    2506:	c6 0f       	add	r28, r22
    2508:	d1 1d       	adc	r29, r1
    250a:	ad ec       	ldi	r26, 0xCD	; 205
    250c:	bc ec       	ldi	r27, 0xCC	; 204
    250e:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    2512:	96 95       	lsr	r25
    2514:	87 95       	ror	r24
    2516:	96 95       	lsr	r25
    2518:	87 95       	ror	r24
    251a:	96 95       	lsr	r25
    251c:	87 95       	ror	r24
    251e:	9c 01       	movw	r18, r24
    2520:	22 0f       	add	r18, r18
    2522:	33 1f       	adc	r19, r19
    2524:	88 0f       	add	r24, r24
    2526:	99 1f       	adc	r25, r25
    2528:	88 0f       	add	r24, r24
    252a:	99 1f       	adc	r25, r25
    252c:	88 0f       	add	r24, r24
    252e:	99 1f       	adc	r25, r25
    2530:	82 0f       	add	r24, r18
    2532:	93 1f       	adc	r25, r19
    2534:	e8 1b       	sub	r30, r24
    2536:	f9 0b       	sbc	r31, r25
    2538:	e0 5d       	subi	r30, 0xD0	; 208
    253a:	e8 83       	st	Y, r30
		break;
    253c:	93 c1       	rjmp	.+806    	; 0x2864 <numPrinter+0x386>

		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
    253e:	ec 01       	movw	r28, r24
    2540:	c6 0f       	add	r28, r22
    2542:	d1 1d       	adc	r29, r1
    2544:	ad ec       	ldi	r26, 0xCD	; 205
    2546:	bc ec       	ldi	r27, 0xCC	; 204
    2548:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    254c:	96 95       	lsr	r25
    254e:	87 95       	ror	r24
    2550:	96 95       	lsr	r25
    2552:	87 95       	ror	r24
    2554:	96 95       	lsr	r25
    2556:	87 95       	ror	r24
    2558:	9c 01       	movw	r18, r24
    255a:	22 0f       	add	r18, r18
    255c:	33 1f       	adc	r19, r19
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	88 0f       	add	r24, r24
    2564:	99 1f       	adc	r25, r25
    2566:	88 0f       	add	r24, r24
    2568:	99 1f       	adc	r25, r25
    256a:	82 0f       	add	r24, r18
    256c:	93 1f       	adc	r25, r19
    256e:	9f 01       	movw	r18, r30
    2570:	28 1b       	sub	r18, r24
    2572:	39 0b       	sbc	r19, r25
    2574:	c9 01       	movw	r24, r18
    2576:	80 5d       	subi	r24, 0xD0	; 208
    2578:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
    257a:	9f 01       	movw	r18, r30
    257c:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    2580:	96 95       	lsr	r25
    2582:	87 95       	ror	r24
    2584:	96 95       	lsr	r25
    2586:	87 95       	ror	r24
    2588:	96 95       	lsr	r25
    258a:	87 95       	ror	r24
    258c:	80 5d       	subi	r24, 0xD0	; 208
    258e:	88 83       	st	Y, r24
		break;
    2590:	69 c1       	rjmp	.+722    	; 0x2864 <numPrinter+0x386>

		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
    2592:	ec 01       	movw	r28, r24
    2594:	c6 0f       	add	r28, r22
    2596:	d1 1d       	adc	r29, r1
    2598:	ad ec       	ldi	r26, 0xCD	; 205
    259a:	bc ec       	ldi	r27, 0xCC	; 204
    259c:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    25a0:	96 95       	lsr	r25
    25a2:	87 95       	ror	r24
    25a4:	96 95       	lsr	r25
    25a6:	87 95       	ror	r24
    25a8:	96 95       	lsr	r25
    25aa:	87 95       	ror	r24
    25ac:	9c 01       	movw	r18, r24
    25ae:	22 0f       	add	r18, r18
    25b0:	33 1f       	adc	r19, r19
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	88 0f       	add	r24, r24
    25bc:	99 1f       	adc	r25, r25
    25be:	82 0f       	add	r24, r18
    25c0:	93 1f       	adc	r25, r19
    25c2:	9f 01       	movw	r18, r30
    25c4:	28 1b       	sub	r18, r24
    25c6:	39 0b       	sbc	r19, r25
    25c8:	c9 01       	movw	r24, r18
    25ca:	80 5d       	subi	r24, 0xD0	; 208
    25cc:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = tensPlace;
    25ce:	af 01       	movw	r20, r30
    25d0:	56 95       	lsr	r21
    25d2:	47 95       	ror	r20
    25d4:	56 95       	lsr	r21
    25d6:	47 95       	ror	r20
    25d8:	9a 01       	movw	r18, r20
    25da:	ab e7       	ldi	r26, 0x7B	; 123
    25dc:	b4 e1       	ldi	r27, 0x14	; 20
    25de:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    25e2:	96 95       	lsr	r25
    25e4:	87 95       	ror	r24
    25e6:	64 e6       	ldi	r22, 0x64	; 100
    25e8:	68 9f       	mul	r22, r24
    25ea:	90 01       	movw	r18, r0
    25ec:	69 9f       	mul	r22, r25
    25ee:	30 0d       	add	r19, r0
    25f0:	11 24       	eor	r1, r1
    25f2:	cf 01       	movw	r24, r30
    25f4:	82 1b       	sub	r24, r18
    25f6:	93 0b       	sbc	r25, r19
    25f8:	9c 01       	movw	r18, r24
    25fa:	ad ec       	ldi	r26, 0xCD	; 205
    25fc:	bc ec       	ldi	r27, 0xCC	; 204
    25fe:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    2602:	96 95       	lsr	r25
    2604:	87 95       	ror	r24
    2606:	96 95       	lsr	r25
    2608:	87 95       	ror	r24
    260a:	96 95       	lsr	r25
    260c:	87 95       	ror	r24
    260e:	80 5d       	subi	r24, 0xD0	; 208
    2610:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
    2612:	9a 01       	movw	r18, r20
    2614:	ab e7       	ldi	r26, 0x7B	; 123
    2616:	b4 e1       	ldi	r27, 0x14	; 20
    2618:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    261c:	96 95       	lsr	r25
    261e:	87 95       	ror	r24
    2620:	80 5d       	subi	r24, 0xD0	; 208
    2622:	88 83       	st	Y, r24
		break;
    2624:	1f c1       	rjmp	.+574    	; 0x2864 <numPrinter+0x386>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
    2626:	ec 01       	movw	r28, r24
    2628:	c6 0f       	add	r28, r22
    262a:	d1 1d       	adc	r29, r1
    262c:	ad ec       	ldi	r26, 0xCD	; 205
    262e:	bc ec       	ldi	r27, 0xCC	; 204
    2630:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    2634:	96 95       	lsr	r25
    2636:	87 95       	ror	r24
    2638:	96 95       	lsr	r25
    263a:	87 95       	ror	r24
    263c:	96 95       	lsr	r25
    263e:	87 95       	ror	r24
    2640:	9c 01       	movw	r18, r24
    2642:	22 0f       	add	r18, r18
    2644:	33 1f       	adc	r19, r19
    2646:	88 0f       	add	r24, r24
    2648:	99 1f       	adc	r25, r25
    264a:	88 0f       	add	r24, r24
    264c:	99 1f       	adc	r25, r25
    264e:	88 0f       	add	r24, r24
    2650:	99 1f       	adc	r25, r25
    2652:	82 0f       	add	r24, r18
    2654:	93 1f       	adc	r25, r19
    2656:	9f 01       	movw	r18, r30
    2658:	28 1b       	sub	r18, r24
    265a:	39 0b       	sbc	r19, r25
    265c:	c9 01       	movw	r24, r18
    265e:	80 5d       	subi	r24, 0xD0	; 208
    2660:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
    2662:	9f 01       	movw	r18, r30
    2664:	36 95       	lsr	r19
    2666:	27 95       	ror	r18
    2668:	36 95       	lsr	r19
    266a:	27 95       	ror	r18
    266c:	ab e7       	ldi	r26, 0x7B	; 123
    266e:	b4 e1       	ldi	r27, 0x14	; 20
    2670:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    2674:	96 95       	lsr	r25
    2676:	87 95       	ror	r24
    2678:	44 e6       	ldi	r20, 0x64	; 100
    267a:	48 9f       	mul	r20, r24
    267c:	90 01       	movw	r18, r0
    267e:	49 9f       	mul	r20, r25
    2680:	30 0d       	add	r19, r0
    2682:	11 24       	eor	r1, r1
    2684:	cf 01       	movw	r24, r30
    2686:	82 1b       	sub	r24, r18
    2688:	93 0b       	sbc	r25, r19
    268a:	9c 01       	movw	r18, r24
    268c:	ad ec       	ldi	r26, 0xCD	; 205
    268e:	bc ec       	ldi	r27, 0xCC	; 204
    2690:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    2694:	96 95       	lsr	r25
    2696:	87 95       	ror	r24
    2698:	96 95       	lsr	r25
    269a:	87 95       	ror	r24
    269c:	96 95       	lsr	r25
    269e:	87 95       	ror	r24
    26a0:	80 5d       	subi	r24, 0xD0	; 208
    26a2:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = hunderedsPlace;
    26a4:	af 01       	movw	r20, r30
    26a6:	56 95       	lsr	r21
    26a8:	47 95       	ror	r20
    26aa:	56 95       	lsr	r21
    26ac:	47 95       	ror	r20
    26ae:	56 95       	lsr	r21
    26b0:	47 95       	ror	r20
    26b2:	9a 01       	movw	r18, r20
    26b4:	a5 ec       	ldi	r26, 0xC5	; 197
    26b6:	b0 e2       	ldi	r27, 0x20	; 32
    26b8:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    26bc:	92 95       	swap	r25
    26be:	82 95       	swap	r24
    26c0:	8f 70       	andi	r24, 0x0F	; 15
    26c2:	89 27       	eor	r24, r25
    26c4:	9f 70       	andi	r25, 0x0F	; 15
    26c6:	89 27       	eor	r24, r25
    26c8:	68 ee       	ldi	r22, 0xE8	; 232
    26ca:	73 e0       	ldi	r23, 0x03	; 3
    26cc:	86 9f       	mul	r24, r22
    26ce:	90 01       	movw	r18, r0
    26d0:	87 9f       	mul	r24, r23
    26d2:	30 0d       	add	r19, r0
    26d4:	96 9f       	mul	r25, r22
    26d6:	30 0d       	add	r19, r0
    26d8:	11 24       	eor	r1, r1
    26da:	cf 01       	movw	r24, r30
    26dc:	82 1b       	sub	r24, r18
    26de:	93 0b       	sbc	r25, r19
    26e0:	9c 01       	movw	r18, r24
    26e2:	36 95       	lsr	r19
    26e4:	27 95       	ror	r18
    26e6:	36 95       	lsr	r19
    26e8:	27 95       	ror	r18
    26ea:	ab e7       	ldi	r26, 0x7B	; 123
    26ec:	b4 e1       	ldi	r27, 0x14	; 20
    26ee:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    26f2:	96 95       	lsr	r25
    26f4:	87 95       	ror	r24
    26f6:	80 5d       	subi	r24, 0xD0	; 208
    26f8:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
    26fa:	9a 01       	movw	r18, r20
    26fc:	a5 ec       	ldi	r26, 0xC5	; 197
    26fe:	b0 e2       	ldi	r27, 0x20	; 32
    2700:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    2704:	92 95       	swap	r25
    2706:	82 95       	swap	r24
    2708:	8f 70       	andi	r24, 0x0F	; 15
    270a:	89 27       	eor	r24, r25
    270c:	9f 70       	andi	r25, 0x0F	; 15
    270e:	89 27       	eor	r24, r25
    2710:	80 5d       	subi	r24, 0xD0	; 208
    2712:	88 83       	st	Y, r24
		break;
    2714:	a7 c0       	rjmp	.+334    	; 0x2864 <numPrinter+0x386>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
    2716:	ec 01       	movw	r28, r24
    2718:	c6 0f       	add	r28, r22
    271a:	d1 1d       	adc	r29, r1
    271c:	ad ec       	ldi	r26, 0xCD	; 205
    271e:	bc ec       	ldi	r27, 0xCC	; 204
    2720:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    2724:	96 95       	lsr	r25
    2726:	87 95       	ror	r24
    2728:	96 95       	lsr	r25
    272a:	87 95       	ror	r24
    272c:	96 95       	lsr	r25
    272e:	87 95       	ror	r24
    2730:	9c 01       	movw	r18, r24
    2732:	22 0f       	add	r18, r18
    2734:	33 1f       	adc	r19, r19
    2736:	88 0f       	add	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	88 0f       	add	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	82 0f       	add	r24, r18
    2744:	93 1f       	adc	r25, r19
    2746:	9f 01       	movw	r18, r30
    2748:	28 1b       	sub	r18, r24
    274a:	39 0b       	sbc	r19, r25
    274c:	c9 01       	movw	r24, r18
    274e:	80 5d       	subi	r24, 0xD0	; 208
    2750:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
    2752:	9f 01       	movw	r18, r30
    2754:	36 95       	lsr	r19
    2756:	27 95       	ror	r18
    2758:	36 95       	lsr	r19
    275a:	27 95       	ror	r18
    275c:	ab e7       	ldi	r26, 0x7B	; 123
    275e:	b4 e1       	ldi	r27, 0x14	; 20
    2760:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    2764:	96 95       	lsr	r25
    2766:	87 95       	ror	r24
    2768:	44 e6       	ldi	r20, 0x64	; 100
    276a:	48 9f       	mul	r20, r24
    276c:	90 01       	movw	r18, r0
    276e:	49 9f       	mul	r20, r25
    2770:	30 0d       	add	r19, r0
    2772:	11 24       	eor	r1, r1
    2774:	cf 01       	movw	r24, r30
    2776:	82 1b       	sub	r24, r18
    2778:	93 0b       	sbc	r25, r19
    277a:	9c 01       	movw	r18, r24
    277c:	ad ec       	ldi	r26, 0xCD	; 205
    277e:	bc ec       	ldi	r27, 0xCC	; 204
    2780:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    2784:	96 95       	lsr	r25
    2786:	87 95       	ror	r24
    2788:	96 95       	lsr	r25
    278a:	87 95       	ror	r24
    278c:	96 95       	lsr	r25
    278e:	87 95       	ror	r24
    2790:	80 5d       	subi	r24, 0xD0	; 208
    2792:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
    2794:	9f 01       	movw	r18, r30
    2796:	36 95       	lsr	r19
    2798:	27 95       	ror	r18
    279a:	36 95       	lsr	r19
    279c:	27 95       	ror	r18
    279e:	36 95       	lsr	r19
    27a0:	27 95       	ror	r18
    27a2:	a5 ec       	ldi	r26, 0xC5	; 197
    27a4:	b0 e2       	ldi	r27, 0x20	; 32
    27a6:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    27aa:	92 95       	swap	r25
    27ac:	82 95       	swap	r24
    27ae:	8f 70       	andi	r24, 0x0F	; 15
    27b0:	89 27       	eor	r24, r25
    27b2:	9f 70       	andi	r25, 0x0F	; 15
    27b4:	89 27       	eor	r24, r25
    27b6:	48 ee       	ldi	r20, 0xE8	; 232
    27b8:	53 e0       	ldi	r21, 0x03	; 3
    27ba:	84 9f       	mul	r24, r20
    27bc:	90 01       	movw	r18, r0
    27be:	85 9f       	mul	r24, r21
    27c0:	30 0d       	add	r19, r0
    27c2:	94 9f       	mul	r25, r20
    27c4:	30 0d       	add	r19, r0
    27c6:	11 24       	eor	r1, r1
    27c8:	cf 01       	movw	r24, r30
    27ca:	82 1b       	sub	r24, r18
    27cc:	93 0b       	sbc	r25, r19
    27ce:	9c 01       	movw	r18, r24
    27d0:	36 95       	lsr	r19
    27d2:	27 95       	ror	r18
    27d4:	36 95       	lsr	r19
    27d6:	27 95       	ror	r18
    27d8:	ab e7       	ldi	r26, 0x7B	; 123
    27da:	b4 e1       	ldi	r27, 0x14	; 20
    27dc:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    27e0:	96 95       	lsr	r25
    27e2:	87 95       	ror	r24
    27e4:	80 5d       	subi	r24, 0xD0	; 208
    27e6:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
    27e8:	af 01       	movw	r20, r30
    27ea:	52 95       	swap	r21
    27ec:	42 95       	swap	r20
    27ee:	4f 70       	andi	r20, 0x0F	; 15
    27f0:	45 27       	eor	r20, r21
    27f2:	5f 70       	andi	r21, 0x0F	; 15
    27f4:	45 27       	eor	r20, r21
    27f6:	9a 01       	movw	r18, r20
    27f8:	a7 e4       	ldi	r26, 0x47	; 71
    27fa:	b3 e0       	ldi	r27, 0x03	; 3
    27fc:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    2800:	96 95       	lsr	r25
    2802:	87 95       	ror	r24
    2804:	96 95       	lsr	r25
    2806:	87 95       	ror	r24
    2808:	96 95       	lsr	r25
    280a:	87 95       	ror	r24
    280c:	60 e1       	ldi	r22, 0x10	; 16
    280e:	77 e2       	ldi	r23, 0x27	; 39
    2810:	86 9f       	mul	r24, r22
    2812:	90 01       	movw	r18, r0
    2814:	87 9f       	mul	r24, r23
    2816:	30 0d       	add	r19, r0
    2818:	96 9f       	mul	r25, r22
    281a:	30 0d       	add	r19, r0
    281c:	11 24       	eor	r1, r1
    281e:	cf 01       	movw	r24, r30
    2820:	82 1b       	sub	r24, r18
    2822:	93 0b       	sbc	r25, r19
    2824:	9c 01       	movw	r18, r24
    2826:	36 95       	lsr	r19
    2828:	27 95       	ror	r18
    282a:	36 95       	lsr	r19
    282c:	27 95       	ror	r18
    282e:	36 95       	lsr	r19
    2830:	27 95       	ror	r18
    2832:	a5 ec       	ldi	r26, 0xC5	; 197
    2834:	b0 e2       	ldi	r27, 0x20	; 32
    2836:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    283a:	92 95       	swap	r25
    283c:	82 95       	swap	r24
    283e:	8f 70       	andi	r24, 0x0F	; 15
    2840:	89 27       	eor	r24, r25
    2842:	9f 70       	andi	r25, 0x0F	; 15
    2844:	89 27       	eor	r24, r25
    2846:	80 5d       	subi	r24, 0xD0	; 208
    2848:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
    284a:	9a 01       	movw	r18, r20
    284c:	a7 e4       	ldi	r26, 0x47	; 71
    284e:	b3 e0       	ldi	r27, 0x03	; 3
    2850:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__umulhisi3>
    2854:	96 95       	lsr	r25
    2856:	87 95       	ror	r24
    2858:	96 95       	lsr	r25
    285a:	87 95       	ror	r24
    285c:	96 95       	lsr	r25
    285e:	87 95       	ror	r24
    2860:	80 5d       	subi	r24, 0xD0	; 208
    2862:	88 83       	st	Y, r24
		break;

	}


}
    2864:	df 91       	pop	r29
    2866:	cf 91       	pop	r28
    2868:	08 95       	ret

0000286a <midiNotePrinter>:

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
    286a:	9c 01       	movw	r18, r24
    286c:	a6 2f       	mov	r26, r22
	char printSharp = 0;
	uint8_t valueSwitch = 0;
	//numbers will always go from B to C, and have 12 distinct values. 
	//we can get our number from this with division. 
	//midi note C0 starts at 12. So, we'll need to do some math there. 
	printNumber = (noteNumber/12)+47; 
    286e:	eb ea       	ldi	r30, 0xAB	; 171
    2870:	4e 9f       	mul	r20, r30
    2872:	e1 2d       	mov	r30, r1
    2874:	11 24       	eor	r1, r1
    2876:	e6 95       	lsr	r30
    2878:	e6 95       	lsr	r30
    287a:	e6 95       	lsr	r30
    287c:	9f e2       	ldi	r25, 0x2F	; 47
    287e:	9e 0f       	add	r25, r30
	
	//theres a weird wrap around with note numbers here. Since there isn't really an easy math patern we can take advantage of. 
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
    2880:	8e 2f       	mov	r24, r30
    2882:	88 0f       	add	r24, r24
    2884:	e8 0f       	add	r30, r24
    2886:	ee 0f       	add	r30, r30
    2888:	ee 0f       	add	r30, r30
    288a:	4e 1b       	sub	r20, r30
    288c:	50 e0       	ldi	r21, 0x00	; 0
    288e:	4c 30       	cpi	r20, 0x0C	; 12
    2890:	51 05       	cpc	r21, r1
    2892:	58 f5       	brcc	.+86     	; 0x28ea <midiNotePrinter+0x80>
    2894:	fa 01       	movw	r30, r20
    2896:	88 27       	eor	r24, r24
    2898:	e8 51       	subi	r30, 0x18	; 24
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	8f 4f       	sbci	r24, 0xFF	; 255
    289e:	0c 94 bc 1d 	jmp	0x3b78	; 0x3b78 <__tablejump2__>
	{
		
		case 0:
		printLetter = 'C';
		printSharp = ' ';
    28a2:	80 e2       	ldi	r24, 0x20	; 32
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
	{
		
		case 0:
		printLetter = 'C';
    28a4:	43 e4       	ldi	r20, 0x43	; 67
    28a6:	23 c0       	rjmp	.+70     	; 0x28ee <midiNotePrinter+0x84>
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
		printSharp = '#';
    28a8:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'C';
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
    28aa:	43 e4       	ldi	r20, 0x43	; 67
		printSharp = '#';
		break;
    28ac:	20 c0       	rjmp	.+64     	; 0x28ee <midiNotePrinter+0x84>
		
		case 2:
		printLetter = 'D';
		printSharp = ' ';
    28ae:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'C';
		printSharp = '#';
		break;
		
		case 2:
		printLetter = 'D';
    28b0:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = ' ';
		break;
    28b2:	1d c0       	rjmp	.+58     	; 0x28ee <midiNotePrinter+0x84>
		
		case 3:
		printLetter = 'D';
		printSharp = '#';
    28b4:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'D';
		printSharp = ' ';
		break;
		
		case 3:
		printLetter = 'D';
    28b6:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = '#';
		break;
    28b8:	1a c0       	rjmp	.+52     	; 0x28ee <midiNotePrinter+0x84>
		
		case 4:
		printLetter = 'E';
		printSharp = ' ';
    28ba:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'D';
		printSharp = '#';
		break;
		
		case 4:
		printLetter = 'E';
    28bc:	45 e4       	ldi	r20, 0x45	; 69
		printSharp = ' ';
		break;
    28be:	17 c0       	rjmp	.+46     	; 0x28ee <midiNotePrinter+0x84>
		
		case 5:
		printLetter = 'F';
		printSharp = ' ';
    28c0:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'E';
		printSharp = ' ';
		break;
		
		case 5:
		printLetter = 'F';
    28c2:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = ' ';
		break;
    28c4:	14 c0       	rjmp	.+40     	; 0x28ee <midiNotePrinter+0x84>
		
		case 6:
		printLetter = 'F';
		printSharp = '#';
    28c6:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'F';
		printSharp = ' ';
		break;
		
		case 6:
		printLetter = 'F';
    28c8:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = '#';
		break;
    28ca:	11 c0       	rjmp	.+34     	; 0x28ee <midiNotePrinter+0x84>
		
		case 7:
		printLetter = 'G';
		printSharp = ' ';
    28cc:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'F';
		printSharp = '#';
		break;
		
		case 7:
		printLetter = 'G';
    28ce:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = ' ';
		break;
    28d0:	0e c0       	rjmp	.+28     	; 0x28ee <midiNotePrinter+0x84>
		
		case 8:
		printLetter = 'G';
		printSharp = '#';
    28d2:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'G';
		printSharp = ' ';
		break;
		
		case 8:
		printLetter = 'G';
    28d4:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = '#';
		break;
    28d6:	0b c0       	rjmp	.+22     	; 0x28ee <midiNotePrinter+0x84>
		
		case 9:
		printLetter = 'A';
		printSharp = ' ';
    28d8:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'G';
		printSharp = '#';
		break;
		
		case 9:
		printLetter = 'A';
    28da:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = ' ';
		break;
    28dc:	08 c0       	rjmp	.+16     	; 0x28ee <midiNotePrinter+0x84>
		
		case 10:
		printLetter = 'A';
		printSharp = '#';
    28de:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'A';
		printSharp = ' ';
		break;
		
		case 10:
		printLetter = 'A';
    28e0:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = '#';
		break;
    28e2:	05 c0       	rjmp	.+10     	; 0x28ee <midiNotePrinter+0x84>
		
		case 11:
		printLetter = 'B';
		printSharp = ' ';
    28e4:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'A';
		printSharp = '#';
		break;
		
		case 11:
		printLetter = 'B';
    28e6:	42 e4       	ldi	r20, 0x42	; 66
		printSharp = ' ';
		break;
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <midiNotePrinter+0x84>
void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
	char printNumber = 0;
	char printSharp = 0;
    28ea:	80 e0       	ldi	r24, 0x00	; 0
}

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
    28ec:	40 e0       	ldi	r20, 0x00	; 0
		printLetter = 'B';
		printSharp = ' ';
		break;
		
	}
	charArray[startingPosition] = printLetter;
    28ee:	f9 01       	movw	r30, r18
    28f0:	ea 0f       	add	r30, r26
    28f2:	f1 1d       	adc	r31, r1
    28f4:	40 83       	st	Z, r20
	charArray[startingPosition+1]= printSharp;
    28f6:	81 83       	std	Z+1, r24	; 0x01
	charArray[startingPosition+2]= printNumber;
    28f8:	92 83       	std	Z+2, r25	; 0x02
    28fa:	08 95       	ret

000028fc <initSequencer>:
//if a real-time sequencer is implemented, they will end up being the same thing.

void initSequencer()
{
	//here we need to setup our timer interrupt
	TCCR0A = (1 << WGM01); //set to clear on correct compare
    28fc:	82 e0       	ldi	r24, 0x02	; 2
    28fe:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00); // set pre-scaler to 64
    2900:	93 e0       	ldi	r25, 0x03	; 3
    2902:	95 bd       	out	0x25, r25	; 37
	OCR0A = 25; // every 25 ticks will be 0.0001 seconds at this prescale.
    2904:	99 e1       	ldi	r25, 0x19	; 25
    2906:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1 << OCIE0A); // Enable OCR0A compare interrupt
    2908:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    290c:	08 95       	ret

0000290e <__vector_21>:
	//interrupts should now be good to go.
}

ISR(TIMER0_COMPA_vect)
{
    290e:	1f 92       	push	r1
    2910:	0f 92       	push	r0
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	0f 92       	push	r0
    2916:	11 24       	eor	r1, r1
    2918:	8f 93       	push	r24
    291a:	9f 93       	push	r25
	clockCounter++;
    291c:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <clockCounter>
    2920:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <clockCounter+0x1>
    2924:	01 96       	adiw	r24, 0x01	; 1
    2926:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <clockCounter+0x1>
    292a:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <clockCounter>
	//we don't want to do anything else here.
}
    292e:	9f 91       	pop	r25
    2930:	8f 91       	pop	r24
    2932:	0f 90       	pop	r0
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	0f 90       	pop	r0
    2938:	1f 90       	pop	r1
    293a:	18 95       	reti

0000293c <updateSequencer>:

void updateSequencer(Pattern sequencerPattern, Globals currentGlobals)
{
    293c:	ef 92       	push	r14
    293e:	ff 92       	push	r15
    2940:	1f 93       	push	r17
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
	uint16_t BPMvar = 150000/(sequencerPattern.patternBPM);

	if(clockCounter>=BPMvar && currentGlobals.playState) //if playstate is on, play next note in sequence.
    294a:	cf 52       	subi	r28, 0x2F	; 47
    294c:	df 4f       	sbci	r29, 0xFF	; 255
    294e:	28 81       	ld	r18, Y
    2950:	39 81       	ldd	r19, Y+1	; 0x01
    2952:	c1 5d       	subi	r28, 0xD1	; 209
    2954:	d0 40       	sbci	r29, 0x00	; 0
    2956:	40 e0       	ldi	r20, 0x00	; 0
    2958:	50 e0       	ldi	r21, 0x00	; 0
    295a:	60 ef       	ldi	r22, 0xF0	; 240
    295c:	79 e4       	ldi	r23, 0x49	; 73
    295e:	82 e0       	ldi	r24, 0x02	; 2
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <__divmodsi4>
    2966:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <clockCounter>
    296a:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <clockCounter+0x1>
    296e:	82 17       	cp	r24, r18
    2970:	93 07       	cpc	r25, r19
    2972:	08 f4       	brcc	.+2      	; 0x2976 <updateSequencer+0x3a>
    2974:	43 c0       	rjmp	.+134    	; 0x29fc <updateSequencer+0xc0>
    2976:	c5 57       	subi	r28, 0x75	; 117
    2978:	de 4f       	sbci	r29, 0xFE	; 254
    297a:	88 81       	ld	r24, Y
    297c:	cb 58       	subi	r28, 0x8B	; 139
    297e:	d1 40       	sbci	r29, 0x01	; 1
    2980:	88 23       	and	r24, r24
    2982:	b1 f1       	breq	.+108    	; 0x29f0 <updateSequencer+0xb4>
	{
		//this will be where we play samples
		clockCounter=0; //clear before the loop, so we can continue counting while the sequencer plays notes.
    2984:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <clockCounter+0x1>
    2988:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <clockCounter>
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
    298c:	e0 91 9c 03 	lds	r30, 0x039C	; 0x80039c <currentPlayStep>
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	ee 0f       	add	r30, r30
    2994:	ff 1f       	adc	r31, r31
    2996:	89 e0       	ldi	r24, 0x09	; 9
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	8c 0f       	add	r24, r28
    299c:	9d 1f       	adc	r25, r29
    299e:	e8 0f       	add	r30, r24
    29a0:	f9 1f       	adc	r31, r25
    29a2:	e5 50       	subi	r30, 0x05	; 5
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	e0 80       	ld	r14, Z
    29a8:	f1 80       	ldd	r15, Z+1	; 0x01
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
    29aa:	10 e0       	ldi	r17, 0x00	; 0
		{//we're going to loop through all of the possible tracks, and trigger them
			if((parseStep&1)==1)
    29ac:	e0 fe       	sbrs	r14, 0
    29ae:	07 c0       	rjmp	.+14     	; 0x29be <updateSequencer+0x82>
			{
				//trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
				playTrack(&sequencerPattern, &currentGlobals, sc);
    29b0:	41 2f       	mov	r20, r17
    29b2:	be 01       	movw	r22, r28
    29b4:	6c 57       	subi	r22, 0x7C	; 124
    29b6:	7e 4f       	sbci	r23, 0xFE	; 254
    29b8:	ce 01       	movw	r24, r28
    29ba:	09 96       	adiw	r24, 0x09	; 9
    29bc:	73 d1       	rcall	.+742    	; 0x2ca4 <playTrack>
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
    29be:	f6 94       	lsr	r15
    29c0:	e7 94       	ror	r14
	if(clockCounter>=BPMvar && currentGlobals.playState) //if playstate is on, play next note in sequence.
	{
		//this will be where we play samples
		clockCounter=0; //clear before the loop, so we can continue counting while the sequencer plays notes.
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
    29c2:	1f 5f       	subi	r17, 0xFF	; 255
    29c4:	10 31       	cpi	r17, 0x10	; 16
    29c6:	91 f7       	brne	.-28     	; 0x29ac <updateSequencer+0x70>
				//trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
				playTrack(&sequencerPattern, &currentGlobals, sc);
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
		}
		currentPlayStep = currentPlayStep+1;
    29c8:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <currentPlayStep>
    29cc:	8f 5f       	subi	r24, 0xFF	; 255
    29ce:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <currentPlayStep>
		if(currentPlayStep>(sequencerPattern.numSteps-1))
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	cd 52       	subi	r28, 0x2D	; 45
    29d6:	df 4f       	sbci	r29, 0xFF	; 255
    29d8:	28 81       	ld	r18, Y
    29da:	c3 5d       	subi	r28, 0xD3	; 211
    29dc:	d0 40       	sbci	r29, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	21 50       	subi	r18, 0x01	; 1
    29e2:	31 09       	sbc	r19, r1
    29e4:	28 17       	cp	r18, r24
    29e6:	39 07       	cpc	r19, r25
    29e8:	4c f4       	brge	.+18     	; 0x29fc <updateSequencer+0xc0>
		{
			currentPlayStep=0; // don't play more steps than are in the sequence.
    29ea:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <currentPlayStep>
    29ee:	06 c0       	rjmp	.+12     	; 0x29fc <updateSequencer+0xc0>
		}
		
	}else if(clockCounter>=BPMvar && !currentGlobals.playState)
	{ currentPlayStep=0;
    29f0:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <currentPlayStep>
		clockCounter = 0;
    29f4:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <clockCounter+0x1>
    29f8:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <clockCounter>
	}
}
    29fc:	df 91       	pop	r29
    29fe:	cf 91       	pop	r28
    2a00:	1f 91       	pop	r17
    2a02:	ff 90       	pop	r15
    2a04:	ef 90       	pop	r14
    2a06:	08 95       	ret

00002a08 <__vector_27>:
char serial0Buffer[TX_BUFFER_SIZE];
int serialReadPos = 0;
int serialWritePos = 0;

ISR (USART0_TX_vect)
{
    2a08:	1f 92       	push	r1
    2a0a:	0f 92       	push	r0
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	0f 92       	push	r0
    2a10:	11 24       	eor	r1, r1
    2a12:	0b b6       	in	r0, 0x3b	; 59
    2a14:	0f 92       	push	r0
    2a16:	2f 93       	push	r18
    2a18:	3f 93       	push	r19
    2a1a:	8f 93       	push	r24
    2a1c:	9f 93       	push	r25
    2a1e:	ef 93       	push	r30
    2a20:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
    2a22:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <serialReadPos>
    2a26:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <serialReadPos+0x1>
    2a2a:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <serialWritePos>
    2a2e:	30 91 a0 03 	lds	r19, 0x03A0	; 0x8003a0 <serialWritePos+0x1>
    2a32:	82 17       	cp	r24, r18
    2a34:	93 07       	cpc	r25, r19
    2a36:	c1 f0       	breq	.+48     	; 0x2a68 <__vector_27+0x60>
	{
		UDR0 = serial0Buffer[serialReadPos];
    2a38:	fc 01       	movw	r30, r24
    2a3a:	e8 5d       	subi	r30, 0xD8	; 216
    2a3c:	f9 4f       	sbci	r31, 0xF9	; 249
    2a3e:	80 81       	ld	r24, Z
    2a40:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
    2a44:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <serialReadPos>
    2a48:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <serialReadPos+0x1>
    2a4c:	01 96       	adiw	r24, 0x01	; 1

		if(serialReadPos >= TX_BUFFER_SIZE)
    2a4e:	80 38       	cpi	r24, 0x80	; 128
    2a50:	21 e0       	ldi	r18, 0x01	; 1
    2a52:	92 07       	cpc	r25, r18
    2a54:	2c f4       	brge	.+10     	; 0x2a60 <__vector_27+0x58>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
    2a56:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <serialReadPos+0x1>
    2a5a:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <serialReadPos>
    2a5e:	04 c0       	rjmp	.+8      	; 0x2a68 <__vector_27+0x60>

		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
    2a60:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <serialReadPos+0x1>
    2a64:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <serialReadPos>
		}
	}
}
    2a68:	ff 91       	pop	r31
    2a6a:	ef 91       	pop	r30
    2a6c:	9f 91       	pop	r25
    2a6e:	8f 91       	pop	r24
    2a70:	3f 91       	pop	r19
    2a72:	2f 91       	pop	r18
    2a74:	0f 90       	pop	r0
    2a76:	0b be       	out	0x3b, r0	; 59
    2a78:	0f 90       	pop	r0
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	0f 90       	pop	r0
    2a7e:	1f 90       	pop	r1
    2a80:	18 95       	reti

00002a82 <appendSerial0>:

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
    2a82:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <serialWritePos>
    2a86:	30 91 a0 03 	lds	r19, 0x03A0	; 0x8003a0 <serialWritePos+0x1>
    2a8a:	f9 01       	movw	r30, r18
    2a8c:	e8 5d       	subi	r30, 0xD8	; 216
    2a8e:	f9 4f       	sbci	r31, 0xF9	; 249
    2a90:	80 83       	st	Z, r24
	serialWritePos++;
    2a92:	2f 5f       	subi	r18, 0xFF	; 255
    2a94:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    2a96:	20 38       	cpi	r18, 0x80	; 128
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	38 07       	cpc	r19, r24
    2a9c:	2c f4       	brge	.+10     	; 0x2aa8 <appendSerial0+0x26>
}

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    2a9e:	30 93 a0 03 	sts	0x03A0, r19	; 0x8003a0 <serialWritePos+0x1>
    2aa2:	20 93 9f 03 	sts	0x039F, r18	; 0x80039f <serialWritePos>
    2aa6:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    2aa8:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <serialWritePos+0x1>
    2aac:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <serialWritePos>
    2ab0:	08 95       	ret

00002ab2 <serialWrite0>:
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
    2ab2:	0f 93       	push	r16
    2ab4:	1f 93       	push	r17
    2ab6:	cf 93       	push	r28
    2ab8:	df 93       	push	r29
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2aba:	66 23       	and	r22, r22
    2abc:	69 f0       	breq	.+26     	; 0x2ad8 <serialWrite0+0x26>
    2abe:	ec 01       	movw	r28, r24
    2ac0:	61 50       	subi	r22, 0x01	; 1
    2ac2:	06 2f       	mov	r16, r22
    2ac4:	10 e0       	ldi	r17, 0x00	; 0
    2ac6:	0f 5f       	subi	r16, 0xFF	; 255
    2ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aca:	08 0f       	add	r16, r24
    2acc:	19 1f       	adc	r17, r25
	{
		appendSerial0(c[i]);
    2ace:	89 91       	ld	r24, Y+
    2ad0:	d8 df       	rcall	.-80     	; 0x2a82 <appendSerial0>
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2ad2:	c0 17       	cp	r28, r16
    2ad4:	d1 07       	cpc	r29, r17
    2ad6:	d9 f7       	brne	.-10     	; 0x2ace <serialWrite0+0x1c>
	{
		appendSerial0(c[i]);

	}

	if(UCSR0A & (1 << UDRE0))
    2ad8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2adc:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    2ade:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    2ae2:	df 91       	pop	r29
    2ae4:	cf 91       	pop	r28
    2ae6:	1f 91       	pop	r17
    2ae8:	0f 91       	pop	r16
    2aea:	08 95       	ret

00002aec <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    2aec:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    2af0:	80 e1       	ldi	r24, 0x10	; 16
    2af2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>


UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    2af6:	88 e4       	ldi	r24, 0x48	; 72
    2af8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    2afc:	86 e0       	ldi	r24, 0x06	; 6
    2afe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    2b02:	08 95       	ret

00002b04 <initEnvelopes>:
		//this should be fine for now though. 
			//set track volume
			setTrackVolume(currentPattern->trackSampleLSB[i], currentPattern->trackSampleMSB[i], currentPattern->trackMainVolumeLSB[i], currentPattern->trackMainVolumeMSB[i]);
	}
	
}
    2b04:	88 e0       	ldi	r24, 0x08	; 8
    2b06:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2b0a:	83 e0       	ldi	r24, 0x03	; 3
    2b0c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2b10:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    2b14:	8a ef       	ldi	r24, 0xFA	; 250
    2b16:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    2b1a:	82 e0       	ldi	r24, 0x02	; 2
    2b1c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2b20:	08 95       	ret

00002b22 <trackControl>:
    2b22:	cf 93       	push	r28
    2b24:	df 93       	push	r29
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
    2b2a:	2a 97       	sbiw	r28, 0x0a	; 10
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	de bf       	out	0x3e, r29	; 62
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	cd bf       	out	0x3d, r28	; 61
    2b36:	90 ef       	ldi	r25, 0xF0	; 240
    2b38:	99 83       	std	Y+1, r25	; 0x01
    2b3a:	9a ea       	ldi	r25, 0xAA	; 170
    2b3c:	9a 83       	std	Y+2, r25	; 0x02
    2b3e:	9a e0       	ldi	r25, 0x0A	; 10
    2b40:	9b 83       	std	Y+3, r25	; 0x03
    2b42:	93 e0       	ldi	r25, 0x03	; 3
    2b44:	9c 83       	std	Y+4, r25	; 0x04
    2b46:	2d 83       	std	Y+5, r18	; 0x05
    2b48:	8e 83       	std	Y+6, r24	; 0x06
    2b4a:	6f 83       	std	Y+7, r22	; 0x07
    2b4c:	48 87       	std	Y+8, r20	; 0x08
    2b4e:	19 86       	std	Y+9, r1	; 0x09
    2b50:	85 e5       	ldi	r24, 0x55	; 85
    2b52:	8a 87       	std	Y+10, r24	; 0x0a
    2b54:	6a e0       	ldi	r22, 0x0A	; 10
    2b56:	ce 01       	movw	r24, r28
    2b58:	01 96       	adiw	r24, 0x01	; 1
    2b5a:	ab df       	rcall	.-170    	; 0x2ab2 <serialWrite0>
    2b5c:	2a 96       	adiw	r28, 0x0a	; 10
    2b5e:	0f b6       	in	r0, 0x3f	; 63
    2b60:	f8 94       	cli
    2b62:	de bf       	out	0x3e, r29	; 62
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	cd bf       	out	0x3d, r28	; 61
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	08 95       	ret

00002b6e <setOutputVolume>:
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	28 97       	sbiw	r28, 0x08	; 8
    2b78:	0f b6       	in	r0, 0x3f	; 63
    2b7a:	f8 94       	cli
    2b7c:	de bf       	out	0x3e, r29	; 62
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	cd bf       	out	0x3d, r28	; 61
    2b82:	90 ef       	ldi	r25, 0xF0	; 240
    2b84:	99 83       	std	Y+1, r25	; 0x01
    2b86:	9a ea       	ldi	r25, 0xAA	; 170
    2b88:	9a 83       	std	Y+2, r25	; 0x02
    2b8a:	98 e0       	ldi	r25, 0x08	; 8
    2b8c:	9b 83       	std	Y+3, r25	; 0x03
    2b8e:	95 e0       	ldi	r25, 0x05	; 5
    2b90:	9c 83       	std	Y+4, r25	; 0x04
    2b92:	4d 83       	std	Y+5, r20	; 0x05
    2b94:	8e 83       	std	Y+6, r24	; 0x06
    2b96:	6f 83       	std	Y+7, r22	; 0x07
    2b98:	85 e5       	ldi	r24, 0x55	; 85
    2b9a:	88 87       	std	Y+8, r24	; 0x08
    2b9c:	68 e0       	ldi	r22, 0x08	; 8
    2b9e:	ce 01       	movw	r24, r28
    2ba0:	01 96       	adiw	r24, 0x01	; 1
    2ba2:	87 df       	rcall	.-242    	; 0x2ab2 <serialWrite0>
    2ba4:	28 96       	adiw	r28, 0x08	; 8
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	df 91       	pop	r29
    2bb2:	cf 91       	pop	r28
    2bb4:	08 95       	ret

00002bb6 <setTrackVolume>:
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
    2bbe:	29 97       	sbiw	r28, 0x09	; 9
    2bc0:	0f b6       	in	r0, 0x3f	; 63
    2bc2:	f8 94       	cli
    2bc4:	de bf       	out	0x3e, r29	; 62
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	cd bf       	out	0x3d, r28	; 61
    2bca:	90 ef       	ldi	r25, 0xF0	; 240
    2bcc:	99 83       	std	Y+1, r25	; 0x01
    2bce:	9a ea       	ldi	r25, 0xAA	; 170
    2bd0:	9a 83       	std	Y+2, r25	; 0x02
    2bd2:	99 e0       	ldi	r25, 0x09	; 9
    2bd4:	9b 83       	std	Y+3, r25	; 0x03
    2bd6:	98 e0       	ldi	r25, 0x08	; 8
    2bd8:	9c 83       	std	Y+4, r25	; 0x04
    2bda:	8d 83       	std	Y+5, r24	; 0x05
    2bdc:	6e 83       	std	Y+6, r22	; 0x06
    2bde:	4f 83       	std	Y+7, r20	; 0x07
    2be0:	28 87       	std	Y+8, r18	; 0x08
    2be2:	85 e5       	ldi	r24, 0x55	; 85
    2be4:	89 87       	std	Y+9, r24	; 0x09
    2be6:	69 e0       	ldi	r22, 0x09	; 9
    2be8:	ce 01       	movw	r24, r28
    2bea:	01 96       	adiw	r24, 0x01	; 1
    2bec:	62 df       	rcall	.-316    	; 0x2ab2 <serialWrite0>
    2bee:	29 96       	adiw	r28, 0x09	; 9
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	f8 94       	cli
    2bf4:	de bf       	out	0x3e, r29	; 62
    2bf6:	0f be       	out	0x3f, r0	; 63
    2bf8:	cd bf       	out	0x3d, r28	; 61
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	08 95       	ret

00002c00 <setTrackFade>:
    2c00:	cf 92       	push	r12
    2c02:	ef 92       	push	r14
    2c04:	0f 93       	push	r16
    2c06:	cf 93       	push	r28
    2c08:	df 93       	push	r29
    2c0a:	cd b7       	in	r28, 0x3d	; 61
    2c0c:	de b7       	in	r29, 0x3e	; 62
    2c0e:	2c 97       	sbiw	r28, 0x0c	; 12
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	f8 94       	cli
    2c14:	de bf       	out	0x3e, r29	; 62
    2c16:	0f be       	out	0x3f, r0	; 63
    2c18:	cd bf       	out	0x3d, r28	; 61
    2c1a:	90 ef       	ldi	r25, 0xF0	; 240
    2c1c:	99 83       	std	Y+1, r25	; 0x01
    2c1e:	9a ea       	ldi	r25, 0xAA	; 170
    2c20:	9a 83       	std	Y+2, r25	; 0x02
    2c22:	9c e0       	ldi	r25, 0x0C	; 12
    2c24:	9b 83       	std	Y+3, r25	; 0x03
    2c26:	9a e0       	ldi	r25, 0x0A	; 10
    2c28:	9c 83       	std	Y+4, r25	; 0x04
    2c2a:	8d 83       	std	Y+5, r24	; 0x05
    2c2c:	6e 83       	std	Y+6, r22	; 0x06
    2c2e:	4f 83       	std	Y+7, r20	; 0x07
    2c30:	28 87       	std	Y+8, r18	; 0x08
    2c32:	09 87       	std	Y+9, r16	; 0x09
    2c34:	ea 86       	std	Y+10, r14	; 0x0a
    2c36:	cb 86       	std	Y+11, r12	; 0x0b
    2c38:	85 e5       	ldi	r24, 0x55	; 85
    2c3a:	8c 87       	std	Y+12, r24	; 0x0c
    2c3c:	6c e0       	ldi	r22, 0x0C	; 12
    2c3e:	ce 01       	movw	r24, r28
    2c40:	01 96       	adiw	r24, 0x01	; 1
    2c42:	37 df       	rcall	.-402    	; 0x2ab2 <serialWrite0>
    2c44:	2c 96       	adiw	r28, 0x0c	; 12
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	0f 91       	pop	r16
    2c56:	ef 90       	pop	r14
    2c58:	cf 90       	pop	r12
    2c5a:	08 95       	ret

00002c5c <outputSampleRate>:
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	28 97       	sbiw	r28, 0x08	; 8
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	cd bf       	out	0x3d, r28	; 61
    2c70:	90 ef       	ldi	r25, 0xF0	; 240
    2c72:	99 83       	std	Y+1, r25	; 0x01
    2c74:	9a ea       	ldi	r25, 0xAA	; 170
    2c76:	9a 83       	std	Y+2, r25	; 0x02
    2c78:	98 e0       	ldi	r25, 0x08	; 8
    2c7a:	9b 83       	std	Y+3, r25	; 0x03
    2c7c:	9c e0       	ldi	r25, 0x0C	; 12
    2c7e:	9c 83       	std	Y+4, r25	; 0x04
    2c80:	8d 83       	std	Y+5, r24	; 0x05
    2c82:	6e 83       	std	Y+6, r22	; 0x06
    2c84:	4f 83       	std	Y+7, r20	; 0x07
    2c86:	85 e5       	ldi	r24, 0x55	; 85
    2c88:	88 87       	std	Y+8, r24	; 0x08
    2c8a:	68 e0       	ldi	r22, 0x08	; 8
    2c8c:	ce 01       	movw	r24, r28
    2c8e:	01 96       	adiw	r24, 0x01	; 1
    2c90:	10 df       	rcall	.-480    	; 0x2ab2 <serialWrite0>
    2c92:	28 96       	adiw	r28, 0x08	; 8
    2c94:	0f b6       	in	r0, 0x3f	; 63
    2c96:	f8 94       	cli
    2c98:	de bf       	out	0x3e, r29	; 62
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	cd bf       	out	0x3d, r28	; 61
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	08 95       	ret

00002ca4 <playTrack>:
    2ca4:	2f 92       	push	r2
    2ca6:	3f 92       	push	r3
    2ca8:	4f 92       	push	r4
    2caa:	5f 92       	push	r5
    2cac:	6f 92       	push	r6
    2cae:	7f 92       	push	r7
    2cb0:	8f 92       	push	r8
    2cb2:	9f 92       	push	r9
    2cb4:	af 92       	push	r10
    2cb6:	bf 92       	push	r11
    2cb8:	cf 92       	push	r12
    2cba:	df 92       	push	r13
    2cbc:	ef 92       	push	r14
    2cbe:	ff 92       	push	r15
    2cc0:	0f 93       	push	r16
    2cc2:	1f 93       	push	r17
    2cc4:	cf 93       	push	r28
    2cc6:	df 93       	push	r29
    2cc8:	00 d0       	rcall	.+0      	; 0x2cca <playTrack+0x26>
    2cca:	1f 92       	push	r1
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	2b 01       	movw	r4, r22
    2cd2:	d4 2e       	mov	r13, r20
    2cd4:	a4 2e       	mov	r10, r20
    2cd6:	b1 2c       	mov	r11, r1
    2cd8:	9c 01       	movw	r18, r24
    2cda:	2a 0d       	add	r18, r10
    2cdc:	3b 1d       	adc	r19, r11
    2cde:	f9 01       	movw	r30, r18
    2ce0:	e5 53       	subi	r30, 0x35	; 53
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	20 80       	ld	r2, Z
    2ce6:	31 2c       	mov	r3, r1
    2ce8:	32 2c       	mov	r3, r2
    2cea:	22 24       	eor	r2, r2
    2cec:	70 96       	adiw	r30, 0x10	; 16
    2cee:	40 81       	ld	r20, Z
    2cf0:	24 2a       	or	r2, r20
    2cf2:	70 96       	adiw	r30, 0x10	; 16
    2cf4:	20 81       	ld	r18, Z
    2cf6:	21 30       	cpi	r18, 0x01	; 1
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <playTrack+0x58>
    2cfa:	78 c0       	rjmp	.+240    	; 0x2dec <playTrack+0x148>
    2cfc:	38 f0       	brcs	.+14     	; 0x2d0c <playTrack+0x68>
    2cfe:	22 30       	cpi	r18, 0x02	; 2
    2d00:	09 f4       	brne	.+2      	; 0x2d04 <playTrack+0x60>
    2d02:	b0 c0       	rjmp	.+352    	; 0x2e64 <playTrack+0x1c0>
    2d04:	23 30       	cpi	r18, 0x03	; 3
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <playTrack+0x66>
    2d08:	dc c0       	rjmp	.+440    	; 0x2ec2 <playTrack+0x21e>
    2d0a:	ee c0       	rjmp	.+476    	; 0x2ee8 <playTrack+0x244>
    2d0c:	9c 01       	movw	r18, r24
    2d0e:	2a 0d       	add	r18, r10
    2d10:	3b 1d       	adc	r19, r11
    2d12:	3c 83       	std	Y+4, r19	; 0x04
    2d14:	2b 83       	std	Y+3, r18	; 0x03
    2d16:	89 01       	movw	r16, r18
    2d18:	08 5a       	subi	r16, 0xA8	; 168
    2d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1c:	f8 01       	movw	r30, r16
    2d1e:	f0 81       	ld	r31, Z
    2d20:	f9 83       	std	Y+1, r31	; 0x01
    2d22:	79 01       	movw	r14, r18
    2d24:	28 e4       	ldi	r18, 0x48	; 72
    2d26:	e2 0e       	add	r14, r18
    2d28:	f1 1c       	adc	r15, r1
    2d2a:	f7 01       	movw	r30, r14
    2d2c:	f0 81       	ld	r31, Z
    2d2e:	fa 83       	std	Y+2, r31	; 0x02
    2d30:	eb 81       	ldd	r30, Y+3	; 0x03
    2d32:	fc 81       	ldd	r31, Y+4	; 0x04
    2d34:	e8 57       	subi	r30, 0x78	; 120
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	6b 80       	ldd	r6, Y+3	; 0x03
    2d3a:	7c 80       	ldd	r7, Y+4	; 0x04
    2d3c:	28 e9       	ldi	r18, 0x98	; 152
    2d3e:	62 0e       	add	r6, r18
    2d40:	71 1c       	adc	r7, r1
    2d42:	8b 80       	ldd	r8, Y+3	; 0x03
    2d44:	9c 80       	ldd	r9, Y+4	; 0x04
    2d46:	38 ea       	ldi	r19, 0xA8	; 168
    2d48:	83 0e       	add	r8, r19
    2d4a:	91 1c       	adc	r9, r1
    2d4c:	20 81       	ld	r18, Z
    2d4e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d50:	fc 81       	ldd	r31, Y+4	; 0x04
    2d52:	40 8d       	ldd	r20, Z+24	; 0x18
    2d54:	f3 01       	movw	r30, r6
    2d56:	60 81       	ld	r22, Z
    2d58:	f4 01       	movw	r30, r8
    2d5a:	80 81       	ld	r24, Z
    2d5c:	e2 de       	rcall	.-572    	; 0x2b22 <trackControl>
    2d5e:	c1 2c       	mov	r12, r1
    2d60:	f7 01       	movw	r30, r14
    2d62:	e0 80       	ld	r14, Z
    2d64:	f8 01       	movw	r30, r16
    2d66:	00 81       	ld	r16, Z
    2d68:	eb 81       	ldd	r30, Y+3	; 0x03
    2d6a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d6c:	20 a5       	ldd	r18, Z+40	; 0x28
    2d6e:	40 ad       	ldd	r20, Z+56	; 0x38
    2d70:	f3 01       	movw	r30, r6
    2d72:	60 81       	ld	r22, Z
    2d74:	f4 01       	movw	r30, r8
    2d76:	80 81       	ld	r24, Z
    2d78:	43 df       	rcall	.-378    	; 0x2c00 <setTrackFade>
    2d7a:	f2 01       	movw	r30, r4
    2d7c:	eb 55       	subi	r30, 0x5B	; 91
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	02 c0       	rjmp	.+4      	; 0x2d8a <playTrack+0xe6>
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	da 94       	dec	r13
    2d8c:	e2 f7       	brpl	.-8      	; 0x2d86 <playTrack+0xe2>
    2d8e:	20 81       	ld	r18, Z
    2d90:	31 81       	ldd	r19, Z+1	; 0x01
    2d92:	82 2b       	or	r24, r18
    2d94:	93 2b       	or	r25, r19
    2d96:	91 83       	std	Z+1, r25	; 0x01
    2d98:	80 83       	st	Z, r24
    2d9a:	95 01       	movw	r18, r10
    2d9c:	22 0f       	add	r18, r18
    2d9e:	33 1f       	adc	r19, r19
    2da0:	22 0f       	add	r18, r18
    2da2:	33 1f       	adc	r19, r19
    2da4:	24 0d       	add	r18, r4
    2da6:	35 1d       	adc	r19, r5
    2da8:	29 55       	subi	r18, 0x59	; 89
    2daa:	3f 4f       	sbci	r19, 0xFF	; 255
    2dac:	3c 83       	std	Y+4, r19	; 0x04
    2dae:	2b 83       	std	Y+3, r18	; 0x03
    2db0:	39 81       	ldd	r19, Y+1	; 0x01
    2db2:	83 2f       	mov	r24, r19
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	ea 81       	ldd	r30, Y+2	; 0x02
    2db8:	9e 2b       	or	r25, r30
    2dba:	a1 01       	movw	r20, r2
    2dbc:	60 e0       	ldi	r22, 0x00	; 0
    2dbe:	70 e0       	ldi	r23, 0x00	; 0
    2dc0:	48 0f       	add	r20, r24
    2dc2:	59 1f       	adc	r21, r25
    2dc4:	61 1d       	adc	r22, r1
    2dc6:	71 1d       	adc	r23, r1
    2dc8:	f2 01       	movw	r30, r4
    2dca:	ef 55       	subi	r30, 0x5F	; 95
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	80 81       	ld	r24, Z
    2dd0:	91 81       	ldd	r25, Z+1	; 0x01
    2dd2:	a2 81       	ldd	r26, Z+2	; 0x02
    2dd4:	b3 81       	ldd	r27, Z+3	; 0x03
    2dd6:	84 0f       	add	r24, r20
    2dd8:	95 1f       	adc	r25, r21
    2dda:	a6 1f       	adc	r26, r22
    2ddc:	b7 1f       	adc	r27, r23
    2dde:	eb 81       	ldd	r30, Y+3	; 0x03
    2de0:	fc 81       	ldd	r31, Y+4	; 0x04
    2de2:	80 83       	st	Z, r24
    2de4:	91 83       	std	Z+1, r25	; 0x01
    2de6:	a2 83       	std	Z+2, r26	; 0x02
    2de8:	b3 83       	std	Z+3, r27	; 0x03
    2dea:	7e c0       	rjmp	.+252    	; 0x2ee8 <playTrack+0x244>
    2dec:	ac 01       	movw	r20, r24
    2dee:	4a 0d       	add	r20, r10
    2df0:	5b 1d       	adc	r21, r11
    2df2:	ca 01       	movw	r24, r20
    2df4:	88 57       	subi	r24, 0x78	; 120
    2df6:	9f 4f       	sbci	r25, 0xFF	; 255
    2df8:	da 01       	movw	r26, r20
    2dfa:	a8 56       	subi	r26, 0x68	; 104
    2dfc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dfe:	8a 01       	movw	r16, r20
    2e00:	08 55       	subi	r16, 0x58	; 88
    2e02:	1f 4f       	sbci	r17, 0xFF	; 255
    2e04:	fc 01       	movw	r30, r24
    2e06:	20 81       	ld	r18, Z
    2e08:	fa 01       	movw	r30, r20
    2e0a:	40 8d       	ldd	r20, Z+24	; 0x18
    2e0c:	6c 91       	ld	r22, X
    2e0e:	f8 01       	movw	r30, r16
    2e10:	80 81       	ld	r24, Z
    2e12:	87 de       	rcall	.-754    	; 0x2b22 <trackControl>
    2e14:	f2 01       	movw	r30, r4
    2e16:	eb 55       	subi	r30, 0x5B	; 91
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	02 c0       	rjmp	.+4      	; 0x2e24 <playTrack+0x180>
    2e20:	88 0f       	add	r24, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	da 94       	dec	r13
    2e26:	e2 f7       	brpl	.-8      	; 0x2e20 <playTrack+0x17c>
    2e28:	20 81       	ld	r18, Z
    2e2a:	31 81       	ldd	r19, Z+1	; 0x01
    2e2c:	82 2b       	or	r24, r18
    2e2e:	93 2b       	or	r25, r19
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	80 83       	st	Z, r24
    2e34:	95 01       	movw	r18, r10
    2e36:	22 0f       	add	r18, r18
    2e38:	33 1f       	adc	r19, r19
    2e3a:	22 0f       	add	r18, r18
    2e3c:	33 1f       	adc	r19, r19
    2e3e:	24 0d       	add	r18, r4
    2e40:	35 1d       	adc	r19, r5
    2e42:	29 55       	subi	r18, 0x59	; 89
    2e44:	3f 4f       	sbci	r19, 0xFF	; 255
    2e46:	34 97       	sbiw	r30, 0x04	; 4
    2e48:	80 81       	ld	r24, Z
    2e4a:	91 81       	ldd	r25, Z+1	; 0x01
    2e4c:	a2 81       	ldd	r26, Z+2	; 0x02
    2e4e:	b3 81       	ldd	r27, Z+3	; 0x03
    2e50:	82 0d       	add	r24, r2
    2e52:	93 1d       	adc	r25, r3
    2e54:	a1 1d       	adc	r26, r1
    2e56:	b1 1d       	adc	r27, r1
    2e58:	f9 01       	movw	r30, r18
    2e5a:	80 83       	st	Z, r24
    2e5c:	91 83       	std	Z+1, r25	; 0x01
    2e5e:	a2 83       	std	Z+2, r26	; 0x02
    2e60:	b3 83       	std	Z+3, r27	; 0x03
    2e62:	42 c0       	rjmp	.+132    	; 0x2ee8 <playTrack+0x244>
    2e64:	9c 01       	movw	r18, r24
    2e66:	2a 0d       	add	r18, r10
    2e68:	3b 1d       	adc	r19, r11
    2e6a:	3c 83       	std	Y+4, r19	; 0x04
    2e6c:	2b 83       	std	Y+3, r18	; 0x03
    2e6e:	f9 01       	movw	r30, r18
    2e70:	e8 57       	subi	r30, 0x78	; 120
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	49 01       	movw	r8, r18
    2e76:	38 e9       	ldi	r19, 0x98	; 152
    2e78:	83 0e       	add	r8, r19
    2e7a:	91 1c       	adc	r9, r1
    2e7c:	ab 80       	ldd	r10, Y+3	; 0x03
    2e7e:	bc 80       	ldd	r11, Y+4	; 0x04
    2e80:	88 ea       	ldi	r24, 0xA8	; 168
    2e82:	a8 0e       	add	r10, r24
    2e84:	b1 1c       	adc	r11, r1
    2e86:	20 81       	ld	r18, Z
    2e88:	eb 81       	ldd	r30, Y+3	; 0x03
    2e8a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e8c:	40 8d       	ldd	r20, Z+24	; 0x18
    2e8e:	f4 01       	movw	r30, r8
    2e90:	60 81       	ld	r22, Z
    2e92:	f5 01       	movw	r30, r10
    2e94:	80 81       	ld	r24, Z
    2e96:	45 de       	rcall	.-886    	; 0x2b22 <trackControl>
    2e98:	ab 81       	ldd	r26, Y+3	; 0x03
    2e9a:	bc 81       	ldd	r27, Y+4	; 0x04
    2e9c:	a8 5b       	subi	r26, 0xB8	; 184
    2e9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2ea0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ea2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ea4:	e8 5a       	subi	r30, 0xA8	; 168
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	c1 2c       	mov	r12, r1
    2eaa:	ec 90       	ld	r14, X
    2eac:	00 81       	ld	r16, Z
    2eae:	eb 81       	ldd	r30, Y+3	; 0x03
    2eb0:	fc 81       	ldd	r31, Y+4	; 0x04
    2eb2:	20 a5       	ldd	r18, Z+40	; 0x28
    2eb4:	40 ad       	ldd	r20, Z+56	; 0x38
    2eb6:	f4 01       	movw	r30, r8
    2eb8:	60 81       	ld	r22, Z
    2eba:	f5 01       	movw	r30, r10
    2ebc:	80 81       	ld	r24, Z
    2ebe:	a0 de       	rcall	.-704    	; 0x2c00 <setTrackFade>
    2ec0:	13 c0       	rjmp	.+38     	; 0x2ee8 <playTrack+0x244>
    2ec2:	a8 0e       	add	r10, r24
    2ec4:	b9 1e       	adc	r11, r25
    2ec6:	c5 01       	movw	r24, r10
    2ec8:	88 57       	subi	r24, 0x78	; 120
    2eca:	9f 4f       	sbci	r25, 0xFF	; 255
    2ecc:	d5 01       	movw	r26, r10
    2ece:	a8 56       	subi	r26, 0x68	; 104
    2ed0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed2:	85 01       	movw	r16, r10
    2ed4:	08 55       	subi	r16, 0x58	; 88
    2ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed8:	fc 01       	movw	r30, r24
    2eda:	20 81       	ld	r18, Z
    2edc:	f5 01       	movw	r30, r10
    2ede:	40 8d       	ldd	r20, Z+24	; 0x18
    2ee0:	6c 91       	ld	r22, X
    2ee2:	f8 01       	movw	r30, r16
    2ee4:	80 81       	ld	r24, Z
    2ee6:	1d de       	rcall	.-966    	; 0x2b22 <trackControl>
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	df 91       	pop	r29
    2ef2:	cf 91       	pop	r28
    2ef4:	1f 91       	pop	r17
    2ef6:	0f 91       	pop	r16
    2ef8:	ff 90       	pop	r15
    2efa:	ef 90       	pop	r14
    2efc:	df 90       	pop	r13
    2efe:	cf 90       	pop	r12
    2f00:	bf 90       	pop	r11
    2f02:	af 90       	pop	r10
    2f04:	9f 90       	pop	r9
    2f06:	8f 90       	pop	r8
    2f08:	7f 90       	pop	r7
    2f0a:	6f 90       	pop	r6
    2f0c:	5f 90       	pop	r5
    2f0e:	4f 90       	pop	r4
    2f10:	3f 90       	pop	r3
    2f12:	2f 90       	pop	r2
    2f14:	08 95       	ret

00002f16 <releaseUpdate>:

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
    2f16:	4f 92       	push	r4
    2f18:	5f 92       	push	r5
    2f1a:	6f 92       	push	r6
    2f1c:	7f 92       	push	r7
    2f1e:	8f 92       	push	r8
    2f20:	9f 92       	push	r9
    2f22:	af 92       	push	r10
    2f24:	bf 92       	push	r11
    2f26:	cf 92       	push	r12
    2f28:	ef 92       	push	r14
    2f2a:	0f 93       	push	r16
    2f2c:	cf 93       	push	r28
    2f2e:	df 93       	push	r29
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
    2f30:	fb 01       	movw	r30, r22
    2f32:	eb 55       	subi	r30, 0x5B	; 91
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	80 80       	ld	r8, Z
    2f38:	91 80       	ldd	r9, Z+1	; 0x01
    2f3a:	eb 01       	movw	r28, r22
    2f3c:	c9 55       	subi	r28, 0x59	; 89
    2f3e:	df 4f       	sbci	r29, 0xFF	; 255
    2f40:	88 58       	subi	r24, 0x88	; 136
    2f42:	9f 4f       	sbci	r25, 0xFF	; 255
    2f44:	5c 01       	movw	r10, r24
    2f46:	3b 01       	movw	r6, r22
    2f48:	87 ee       	ldi	r24, 0xE7	; 231
    2f4a:	68 0e       	add	r6, r24
    2f4c:	71 1c       	adc	r7, r1
	
	for(int i = 0; i<16; i++)
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
    2f4e:	e1 e0       	ldi	r30, 0x01	; 1
    2f50:	8e 22       	and	r8, r30
    2f52:	99 24       	eor	r9, r9
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])>=(currentGlobals->releaseCounter))
    2f54:	2b 01       	movw	r4, r22
    2f56:	f1 ea       	ldi	r31, 0xA1	; 161
    2f58:	4f 0e       	add	r4, r31
    2f5a:	51 1c       	adc	r5, r1
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
    2f5c:	81 14       	cp	r8, r1
    2f5e:	91 04       	cpc	r9, r1
    2f60:	d1 f0       	breq	.+52     	; 0x2f96 <releaseUpdate+0x80>
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])>=(currentGlobals->releaseCounter))
    2f62:	48 81       	ld	r20, Y
    2f64:	59 81       	ldd	r21, Y+1	; 0x01
    2f66:	6a 81       	ldd	r22, Y+2	; 0x02
    2f68:	7b 81       	ldd	r23, Y+3	; 0x03
    2f6a:	f2 01       	movw	r30, r4
    2f6c:	80 81       	ld	r24, Z
    2f6e:	91 81       	ldd	r25, Z+1	; 0x01
    2f70:	a2 81       	ldd	r26, Z+2	; 0x02
    2f72:	b3 81       	ldd	r27, Z+3	; 0x03
    2f74:	48 17       	cp	r20, r24
    2f76:	59 07       	cpc	r21, r25
    2f78:	6a 07       	cpc	r22, r26
    2f7a:	7b 07       	cpc	r23, r27
    2f7c:	60 f0       	brcs	.+24     	; 0x2f96 <releaseUpdate+0x80>
			{
				//we need to do the release state here.
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],255,186,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
    2f7e:	cc 24       	eor	r12, r12
    2f80:	c3 94       	inc	r12
    2f82:	f5 01       	movw	r30, r10
    2f84:	70 97       	sbiw	r30, 0x10	; 16
    2f86:	e0 80       	ld	r14, Z
    2f88:	f5 01       	movw	r30, r10
    2f8a:	00 81       	ld	r16, Z
    2f8c:	2a eb       	ldi	r18, 0xBA	; 186
    2f8e:	4f ef       	ldi	r20, 0xFF	; 255
    2f90:	60 a1       	ldd	r22, Z+32	; 0x20
    2f92:	80 a9       	ldd	r24, Z+48	; 0x30
    2f94:	35 de       	rcall	.-918    	; 0x2c00 <setTrackFade>
    2f96:	24 96       	adiw	r28, 0x04	; 4
    2f98:	ff ef       	ldi	r31, 0xFF	; 255
    2f9a:	af 1a       	sub	r10, r31
    2f9c:	bf 0a       	sbc	r11, r31

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
    2f9e:	c6 15       	cp	r28, r6
    2fa0:	d7 05       	cpc	r29, r7
    2fa2:	e1 f6       	brne	.-72     	; 0x2f5c <releaseUpdate+0x46>
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],255,186,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
			} //1 makes the stop flag active, so sample will end after the release envelope is done triggering. 
		}
	}
	
    2fa4:	df 91       	pop	r29
    2fa6:	cf 91       	pop	r28
    2fa8:	0f 91       	pop	r16
    2faa:	ef 90       	pop	r14
    2fac:	cf 90       	pop	r12
    2fae:	bf 90       	pop	r11
    2fb0:	af 90       	pop	r10
    2fb2:	9f 90       	pop	r9
    2fb4:	8f 90       	pop	r8
    2fb6:	7f 90       	pop	r7
    2fb8:	6f 90       	pop	r6
    2fba:	5f 90       	pop	r5
    2fbc:	4f 90       	pop	r4
    2fbe:	08 95       	ret

00002fc0 <twi_init>:
		}

		returnNum=twi_readNak();

	return returnNum;
}
    2fc0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2fc4:	88 e4       	ldi	r24, 0x48	; 72
    2fc6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2fca:	08 95       	ret

00002fcc <twi_start>:
    2fcc:	94 ea       	ldi	r25, 0xA4	; 164
    2fce:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2fd2:	ec eb       	ldi	r30, 0xBC	; 188
    2fd4:	f0 e0       	ldi	r31, 0x00	; 0
    2fd6:	90 81       	ld	r25, Z
    2fd8:	99 23       	and	r25, r25
    2fda:	ec f7       	brge	.-6      	; 0x2fd6 <twi_start+0xa>
    2fdc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2fe0:	98 7f       	andi	r25, 0xF8	; 248
    2fe2:	98 30       	cpi	r25, 0x08	; 8
    2fe4:	11 f0       	breq	.+4      	; 0x2fea <twi_start+0x1e>
    2fe6:	90 31       	cpi	r25, 0x10	; 16
    2fe8:	a1 f4       	brne	.+40     	; 0x3012 <twi_start+0x46>
    2fea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2fee:	84 e8       	ldi	r24, 0x84	; 132
    2ff0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2ff4:	ec eb       	ldi	r30, 0xBC	; 188
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	88 23       	and	r24, r24
    2ffc:	ec f7       	brge	.-6      	; 0x2ff8 <twi_start+0x2c>
    2ffe:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3002:	98 7f       	andi	r25, 0xF8	; 248
    3004:	98 31       	cpi	r25, 0x18	; 24
    3006:	39 f0       	breq	.+14     	; 0x3016 <twi_start+0x4a>
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	90 34       	cpi	r25, 0x40	; 64
    300c:	29 f4       	brne	.+10     	; 0x3018 <twi_start+0x4c>
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	08 95       	ret
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	08 95       	ret
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	08 95       	ret

0000301a <twi_stop>:
    301a:	84 e9       	ldi	r24, 0x94	; 148
    301c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3020:	ec eb       	ldi	r30, 0xBC	; 188
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	84 fd       	sbrc	r24, 4
    3028:	fd cf       	rjmp	.-6      	; 0x3024 <twi_stop+0xa>
    302a:	08 95       	ret

0000302c <twi_write>:
    302c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3030:	84 e8       	ldi	r24, 0x84	; 132
    3032:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3036:	ec eb       	ldi	r30, 0xBC	; 188
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	80 81       	ld	r24, Z
    303c:	88 23       	and	r24, r24
    303e:	ec f7       	brge	.-6      	; 0x303a <twi_write+0xe>
    3040:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3044:	98 7f       	andi	r25, 0xF8	; 248
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	98 32       	cpi	r25, 0x28	; 40
    304a:	09 f4       	brne	.+2      	; 0x304e <twi_write+0x22>
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	08 95       	ret

00003050 <twi_readAck>:
    3050:	84 ec       	ldi	r24, 0xC4	; 196
    3052:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3056:	ec eb       	ldi	r30, 0xBC	; 188
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	80 81       	ld	r24, Z
    305c:	88 23       	and	r24, r24
    305e:	ec f7       	brge	.-6      	; 0x305a <twi_readAck+0xa>
    3060:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3064:	08 95       	ret

00003066 <twi_readNak>:
    3066:	84 e8       	ldi	r24, 0x84	; 132
    3068:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    306c:	ec eb       	ldi	r30, 0xBC	; 188
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	88 23       	and	r24, r24
    3074:	ec f7       	brge	.-6      	; 0x3070 <twi_readNak+0xa>
    3076:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    307a:	08 95       	ret

0000307c <eepromSavePattern>:
    307c:	4f 92       	push	r4
    307e:	5f 92       	push	r5
    3080:	6f 92       	push	r6
    3082:	7f 92       	push	r7
    3084:	8f 92       	push	r8
    3086:	9f 92       	push	r9
    3088:	af 92       	push	r10
    308a:	bf 92       	push	r11
    308c:	cf 92       	push	r12
    308e:	df 92       	push	r13
    3090:	ef 92       	push	r14
    3092:	ff 92       	push	r15
    3094:	0f 93       	push	r16
    3096:	1f 93       	push	r17
    3098:	cf 93       	push	r28
    309a:	df 93       	push	r29
    309c:	cd b7       	in	r28, 0x3d	; 61
    309e:	de b7       	in	r29, 0x3e	; 62
    30a0:	c4 59       	subi	r28, 0x94	; 148
    30a2:	d1 09       	sbc	r29, r1
    30a4:	0f b6       	in	r0, 0x3f	; 63
    30a6:	f8 94       	cli
    30a8:	de bf       	out	0x3e, r29	; 62
    30aa:	0f be       	out	0x3f, r0	; 63
    30ac:	cd bf       	out	0x3d, r28	; 61
    30ae:	cd 5d       	subi	r28, 0xDD	; 221
    30b0:	dd 4f       	sbci	r29, 0xFD	; 253
    30b2:	48 81       	ld	r20, Y
    30b4:	c3 52       	subi	r28, 0x23	; 35
    30b6:	d2 40       	sbci	r29, 0x02	; 2
    30b8:	c0 59       	subi	r28, 0x90	; 144
    30ba:	de 4f       	sbci	r29, 0xFE	; 254
    30bc:	88 81       	ld	r24, Y
    30be:	c0 57       	subi	r28, 0x70	; 112
    30c0:	d1 40       	sbci	r29, 0x01	; 1
    30c2:	cf 58       	subi	r28, 0x8F	; 143
    30c4:	de 4f       	sbci	r29, 0xFE	; 254
    30c6:	98 81       	ld	r25, Y
    30c8:	c1 57       	subi	r28, 0x71	; 113
    30ca:	d1 40       	sbci	r29, 0x01	; 1
    30cc:	24 2f       	mov	r18, r20
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	44 23       	and	r20, r20
    30d2:	8c f0       	brlt	.+34     	; 0x30f6 <eepromSavePattern+0x7a>
    30d4:	21 50       	subi	r18, 0x01	; 1
    30d6:	31 09       	sbc	r19, r1
    30d8:	39 01       	movw	r6, r18
    30da:	66 0c       	add	r6, r6
    30dc:	77 1c       	adc	r7, r7
    30de:	62 0e       	add	r6, r18
    30e0:	73 1e       	adc	r7, r19
    30e2:	76 94       	lsr	r7
    30e4:	76 2c       	mov	r7, r6
    30e6:	66 24       	eor	r6, r6
    30e8:	77 94       	ror	r7
    30ea:	67 94       	ror	r6
    30ec:	0f 2e       	mov	r0, r31
    30ee:	f0 ea       	ldi	r31, 0xA0	; 160
    30f0:	5f 2e       	mov	r5, r31
    30f2:	f0 2d       	mov	r31, r0
    30f4:	11 c0       	rjmp	.+34     	; 0x3118 <eepromSavePattern+0x9c>
    30f6:	20 58       	subi	r18, 0x80	; 128
    30f8:	31 09       	sbc	r19, r1
    30fa:	39 01       	movw	r6, r18
    30fc:	66 0c       	add	r6, r6
    30fe:	77 1c       	adc	r7, r7
    3100:	26 0d       	add	r18, r6
    3102:	37 1d       	adc	r19, r7
    3104:	39 01       	movw	r6, r18
    3106:	76 94       	lsr	r7
    3108:	76 2c       	mov	r7, r6
    310a:	66 24       	eor	r6, r6
    310c:	77 94       	ror	r7
    310e:	67 94       	ror	r6
    3110:	0f 2e       	mov	r0, r31
    3112:	f8 ea       	ldi	r31, 0xA8	; 168
    3114:	5f 2e       	mov	r5, r31
    3116:	f0 2d       	mov	r31, r0
    3118:	be 01       	movw	r22, r28
    311a:	68 55       	subi	r22, 0x58	; 88
    311c:	7f 4f       	sbci	r23, 0xFF	; 255
    311e:	8e 01       	movw	r16, r28
    3120:	0f 5f       	subi	r16, 0xFF	; 255
    3122:	1f 4f       	sbci	r17, 0xFF	; 255
    3124:	fe 01       	movw	r30, r28
    3126:	e0 55       	subi	r30, 0x50	; 80
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	98 01       	movw	r18, r16
    312c:	db 01       	movw	r26, r22
    312e:	4d 91       	ld	r20, X+
    3130:	bd 01       	movw	r22, r26
    3132:	d9 01       	movw	r26, r18
    3134:	4d 93       	st	X+, r20
    3136:	9d 01       	movw	r18, r26
    3138:	6e 17       	cp	r22, r30
    313a:	7f 07       	cpc	r23, r31
    313c:	b9 f7       	brne	.-18     	; 0x312c <eepromSavePattern+0xb0>
    313e:	de 01       	movw	r26, r28
    3140:	19 96       	adiw	r26, 0x09	; 9
    3142:	9e 01       	movw	r18, r28
    3144:	28 54       	subi	r18, 0x48	; 72
    3146:	3f 4f       	sbci	r19, 0xFF	; 255
    3148:	41 91       	ld	r20, Z+
    314a:	4d 93       	st	X+, r20
    314c:	e2 17       	cp	r30, r18
    314e:	f3 07       	cpc	r31, r19
    3150:	d9 f7       	brne	.-10     	; 0x3148 <eepromSavePattern+0xcc>
    3152:	4e 01       	movw	r8, r28
    3154:	b1 e1       	ldi	r27, 0x11	; 17
    3156:	8b 0e       	add	r8, r27
    3158:	91 1c       	adc	r9, r1
    315a:	7e 01       	movw	r14, r28
    315c:	e0 ec       	ldi	r30, 0xC0	; 192
    315e:	ee 0e       	add	r14, r30
    3160:	f1 1c       	adc	r15, r1
    3162:	d4 01       	movw	r26, r8
    3164:	f9 01       	movw	r30, r18
    3166:	41 91       	ld	r20, Z+
    3168:	9f 01       	movw	r18, r30
    316a:	4d 93       	st	X+, r20
    316c:	ee 15       	cp	r30, r14
    316e:	ff 05       	cpc	r31, r15
    3170:	c9 f7       	brne	.-14     	; 0x3164 <eepromSavePattern+0xe8>
    3172:	9e 01       	movw	r18, r28
    3174:	27 5e       	subi	r18, 0xE7	; 231
    3176:	3f 4f       	sbci	r19, 0xFF	; 255
    3178:	be 01       	movw	r22, r28
    317a:	60 53       	subi	r22, 0x30	; 48
    317c:	7f 4f       	sbci	r23, 0xFF	; 255
    317e:	d7 01       	movw	r26, r14
    3180:	4d 91       	ld	r20, X+
    3182:	7d 01       	movw	r14, r26
    3184:	f9 01       	movw	r30, r18
    3186:	41 93       	st	Z+, r20
    3188:	9f 01       	movw	r18, r30
    318a:	a6 17       	cp	r26, r22
    318c:	b7 07       	cpc	r27, r23
    318e:	b9 f7       	brne	.-18     	; 0x317e <eepromSavePattern+0x102>
    3190:	9e 01       	movw	r18, r28
    3192:	27 5d       	subi	r18, 0xD7	; 215
    3194:	3f 4f       	sbci	r19, 0xFF	; 255
    3196:	de 01       	movw	r26, r28
    3198:	a0 52       	subi	r26, 0x20	; 32
    319a:	bf 4f       	sbci	r27, 0xFF	; 255
    319c:	fb 01       	movw	r30, r22
    319e:	41 91       	ld	r20, Z+
    31a0:	bf 01       	movw	r22, r30
    31a2:	f9 01       	movw	r30, r18
    31a4:	41 93       	st	Z+, r20
    31a6:	9f 01       	movw	r18, r30
    31a8:	6a 17       	cp	r22, r26
    31aa:	7b 07       	cpc	r23, r27
    31ac:	b9 f7       	brne	.-18     	; 0x319c <eepromSavePattern+0x120>
    31ae:	9e 01       	movw	r18, r28
    31b0:	27 5c       	subi	r18, 0xC7	; 199
    31b2:	3f 4f       	sbci	r19, 0xFF	; 255
    31b4:	be 01       	movw	r22, r28
    31b6:	60 51       	subi	r22, 0x10	; 16
    31b8:	7f 4f       	sbci	r23, 0xFF	; 255
    31ba:	4d 91       	ld	r20, X+
    31bc:	f9 01       	movw	r30, r18
    31be:	41 93       	st	Z+, r20
    31c0:	9f 01       	movw	r18, r30
    31c2:	a6 17       	cp	r26, r22
    31c4:	b7 07       	cpc	r27, r23
    31c6:	c9 f7       	brne	.-14     	; 0x31ba <eepromSavePattern+0x13e>
    31c8:	9e 01       	movw	r18, r28
    31ca:	27 5b       	subi	r18, 0xB7	; 183
    31cc:	3f 4f       	sbci	r19, 0xFF	; 255
    31ce:	de 01       	movw	r26, r28
    31d0:	b3 95       	inc	r27
    31d2:	fb 01       	movw	r30, r22
    31d4:	41 91       	ld	r20, Z+
    31d6:	bf 01       	movw	r22, r30
    31d8:	f9 01       	movw	r30, r18
    31da:	41 93       	st	Z+, r20
    31dc:	9f 01       	movw	r18, r30
    31de:	6a 17       	cp	r22, r26
    31e0:	7b 07       	cpc	r23, r27
    31e2:	b9 f7       	brne	.-18     	; 0x31d2 <eepromSavePattern+0x156>
    31e4:	9e 01       	movw	r18, r28
    31e6:	27 5a       	subi	r18, 0xA7	; 167
    31e8:	3f 4f       	sbci	r19, 0xFF	; 255
    31ea:	be 01       	movw	r22, r28
    31ec:	60 5f       	subi	r22, 0xF0	; 240
    31ee:	7e 4f       	sbci	r23, 0xFE	; 254
    31f0:	4d 91       	ld	r20, X+
    31f2:	f9 01       	movw	r30, r18
    31f4:	41 93       	st	Z+, r20
    31f6:	9f 01       	movw	r18, r30
    31f8:	a6 17       	cp	r26, r22
    31fa:	b7 07       	cpc	r27, r23
    31fc:	c9 f7       	brne	.-14     	; 0x31f0 <eepromSavePattern+0x174>
    31fe:	de 01       	movw	r26, r28
    3200:	a7 59       	subi	r26, 0x97	; 151
    3202:	bf 4f       	sbci	r27, 0xFF	; 255
    3204:	5e 01       	movw	r10, r28
    3206:	f0 ee       	ldi	r31, 0xE0	; 224
    3208:	af 1a       	sub	r10, r31
    320a:	fe ef       	ldi	r31, 0xFE	; 254
    320c:	bf 0a       	sbc	r11, r31
    320e:	fb 01       	movw	r30, r22
    3210:	21 91       	ld	r18, Z+
    3212:	bf 01       	movw	r22, r30
    3214:	2d 93       	st	X+, r18
    3216:	ea 15       	cp	r30, r10
    3218:	fb 05       	cpc	r31, r11
    321a:	c9 f7       	brne	.-14     	; 0x320e <eepromSavePattern+0x192>
    321c:	eb 96       	adiw	r28, 0x3b	; 59
    321e:	9f af       	std	Y+63, r25	; 0x3f
    3220:	eb 97       	sbiw	r28, 0x3b	; 59
    3222:	ec 96       	adiw	r28, 0x3c	; 60
    3224:	8f af       	std	Y+63, r24	; 0x3f
    3226:	ec 97       	sbiw	r28, 0x3c	; 60
    3228:	ce 58       	subi	r28, 0x8E	; 142
    322a:	de 4f       	sbci	r29, 0xFE	; 254
    322c:	88 81       	ld	r24, Y
    322e:	c2 57       	subi	r28, 0x72	; 114
    3230:	d1 40       	sbci	r29, 0x01	; 1
    3232:	ed 96       	adiw	r28, 0x3d	; 61
    3234:	8f af       	std	Y+63, r24	; 0x3f
    3236:	ed 97       	sbiw	r28, 0x3d	; 61
    3238:	85 2d       	mov	r24, r5
    323a:	c8 de       	rcall	.-624    	; 0x2fcc <twi_start>
    323c:	81 30       	cpi	r24, 0x01	; 1
    323e:	81 f4       	brne	.+32     	; 0x3260 <eepromSavePattern+0x1e4>
    3240:	84 e1       	ldi	r24, 0x14	; 20
    3242:	ec e0       	ldi	r30, 0x0C	; 12
    3244:	f2 e0       	ldi	r31, 0x02	; 2
    3246:	de 01       	movw	r26, r28
    3248:	af 57       	subi	r26, 0x7F	; 127
    324a:	bf 4f       	sbci	r27, 0xFF	; 255
    324c:	01 90       	ld	r0, Z+
    324e:	0d 92       	st	X+, r0
    3250:	8a 95       	dec	r24
    3252:	e1 f7       	brne	.-8      	; 0x324c <eepromSavePattern+0x1d0>
    3254:	63 e0       	ldi	r22, 0x03	; 3
    3256:	70 e0       	ldi	r23, 0x00	; 0
    3258:	ce 01       	movw	r24, r28
    325a:	8f 57       	subi	r24, 0x7F	; 127
    325c:	9f 4f       	sbci	r25, 0xFF	; 255
    325e:	27 d9       	rcall	.-3506   	; 0x24ae <outputS>
    3260:	87 2d       	mov	r24, r7
    3262:	e4 de       	rcall	.-568    	; 0x302c <twi_write>
    3264:	46 2c       	mov	r4, r6
    3266:	86 2d       	mov	r24, r6
    3268:	e1 de       	rcall	.-574    	; 0x302c <twi_write>
    326a:	6e 01       	movw	r12, r28
    326c:	fd e7       	ldi	r31, 0x7D	; 125
    326e:	cf 0e       	add	r12, r31
    3270:	d1 1c       	adc	r13, r1
    3272:	78 01       	movw	r14, r16
    3274:	d7 01       	movw	r26, r14
    3276:	8d 91       	ld	r24, X+
    3278:	7d 01       	movw	r14, r26
    327a:	d8 de       	rcall	.-592    	; 0x302c <twi_write>
    327c:	ce 14       	cp	r12, r14
    327e:	df 04       	cpc	r13, r15
    3280:	c9 f7       	brne	.-14     	; 0x3274 <eepromSavePattern+0x1f8>
    3282:	cb de       	rcall	.-618    	; 0x301a <twi_stop>
    3284:	ef e1       	ldi	r30, 0x1F	; 31
    3286:	fe e4       	ldi	r31, 0x4E	; 78
    3288:	31 97       	sbiw	r30, 0x01	; 1
    328a:	f1 f7       	brne	.-4      	; 0x3288 <eepromSavePattern+0x20c>
    328c:	00 c0       	rjmp	.+0      	; 0x328e <eepromSavePattern+0x212>
    328e:	00 00       	nop
    3290:	9e 01       	movw	r18, r28
    3292:	20 5d       	subi	r18, 0xD0	; 208
    3294:	3e 4f       	sbci	r19, 0xFE	; 254
    3296:	f8 01       	movw	r30, r16
    3298:	d5 01       	movw	r26, r10
    329a:	8d 91       	ld	r24, X+
    329c:	5d 01       	movw	r10, r26
    329e:	81 93       	st	Z+, r24
    32a0:	2a 17       	cp	r18, r26
    32a2:	3b 07       	cpc	r19, r27
    32a4:	c9 f7       	brne	.-14     	; 0x3298 <eepromSavePattern+0x21c>
    32a6:	de 01       	movw	r26, r28
    32a8:	91 96       	adiw	r26, 0x21	; 33
    32aa:	f9 01       	movw	r30, r18
    32ac:	81 91       	ld	r24, Z+
    32ae:	9f 01       	movw	r18, r30
    32b0:	f4 01       	movw	r30, r8
    32b2:	81 93       	st	Z+, r24
    32b4:	4f 01       	movw	r8, r30
    32b6:	ae 17       	cp	r26, r30
    32b8:	bf 07       	cpc	r27, r31
    32ba:	b9 f7       	brne	.-18     	; 0x32aa <eepromSavePattern+0x22e>
    32bc:	ce 01       	movw	r24, r28
    32be:	80 5c       	subi	r24, 0xC0	; 192
    32c0:	9e 4f       	sbci	r25, 0xFE	; 254
    32c2:	ae 01       	movw	r20, r28
    32c4:	4f 5c       	subi	r20, 0xCF	; 207
    32c6:	5f 4f       	sbci	r21, 0xFF	; 255
    32c8:	fc 01       	movw	r30, r24
    32ca:	21 91       	ld	r18, Z+
    32cc:	cf 01       	movw	r24, r30
    32ce:	2d 93       	st	X+, r18
    32d0:	a4 17       	cp	r26, r20
    32d2:	b5 07       	cpc	r27, r21
    32d4:	c9 f7       	brne	.-14     	; 0x32c8 <eepromSavePattern+0x24c>
    32d6:	ce 01       	movw	r24, r28
    32d8:	80 5b       	subi	r24, 0xB0	; 176
    32da:	9e 4f       	sbci	r25, 0xFE	; 254
    32dc:	de 01       	movw	r26, r28
    32de:	af 5b       	subi	r26, 0xBF	; 191
    32e0:	bf 4f       	sbci	r27, 0xFF	; 255
    32e2:	fc 01       	movw	r30, r24
    32e4:	21 91       	ld	r18, Z+
    32e6:	cf 01       	movw	r24, r30
    32e8:	fa 01       	movw	r30, r20
    32ea:	21 93       	st	Z+, r18
    32ec:	af 01       	movw	r20, r30
    32ee:	ea 17       	cp	r30, r26
    32f0:	fb 07       	cpc	r31, r27
    32f2:	b9 f7       	brne	.-18     	; 0x32e2 <eepromSavePattern+0x266>
    32f4:	fe 01       	movw	r30, r28
    32f6:	e0 5a       	subi	r30, 0xA0	; 160
    32f8:	fe 4f       	sbci	r31, 0xFE	; 254
    32fa:	9e 01       	movw	r18, r28
    32fc:	20 59       	subi	r18, 0x90	; 144
    32fe:	3e 4f       	sbci	r19, 0xFE	; 254
    3300:	81 91       	ld	r24, Z+
    3302:	8d 93       	st	X+, r24
    3304:	2e 17       	cp	r18, r30
    3306:	3f 07       	cpc	r19, r31
    3308:	d9 f7       	brne	.-10     	; 0x3300 <eepromSavePattern+0x284>
    330a:	ae 01       	movw	r20, r28
    330c:	4d 58       	subi	r20, 0x8D	; 141
    330e:	5e 4f       	sbci	r21, 0xFE	; 254
    3310:	ce 01       	movw	r24, r28
    3312:	8f 5a       	subi	r24, 0xAF	; 175
    3314:	9f 4f       	sbci	r25, 0xFF	; 255
    3316:	de 01       	movw	r26, r28
    3318:	ad 57       	subi	r26, 0x7D	; 125
    331a:	be 4f       	sbci	r27, 0xFE	; 254
    331c:	fa 01       	movw	r30, r20
    331e:	21 91       	ld	r18, Z+
    3320:	af 01       	movw	r20, r30
    3322:	fc 01       	movw	r30, r24
    3324:	21 93       	st	Z+, r18
    3326:	cf 01       	movw	r24, r30
    3328:	a4 17       	cp	r26, r20
    332a:	b5 07       	cpc	r27, r21
    332c:	b9 f7       	brne	.-18     	; 0x331c <eepromSavePattern+0x2a0>
    332e:	ce 01       	movw	r24, r28
    3330:	8f 59       	subi	r24, 0x9F	; 159
    3332:	9f 4f       	sbci	r25, 0xFF	; 255
    3334:	ae 01       	movw	r20, r28
    3336:	4d 56       	subi	r20, 0x6D	; 109
    3338:	5e 4f       	sbci	r21, 0xFE	; 254
    333a:	2d 91       	ld	r18, X+
    333c:	fc 01       	movw	r30, r24
    333e:	21 93       	st	Z+, r18
    3340:	cf 01       	movw	r24, r30
    3342:	a4 17       	cp	r26, r20
    3344:	b5 07       	cpc	r27, r21
    3346:	c9 f7       	brne	.-14     	; 0x333a <eepromSavePattern+0x2be>
    3348:	de 01       	movw	r26, r28
    334a:	af 58       	subi	r26, 0x8F	; 143
    334c:	bf 4f       	sbci	r27, 0xFF	; 255
    334e:	7e 01       	movw	r14, r28
    3350:	fd e5       	ldi	r31, 0x5D	; 93
    3352:	ef 1a       	sub	r14, r31
    3354:	fe ef       	ldi	r31, 0xFE	; 254
    3356:	ff 0a       	sbc	r15, r31
    3358:	fa 01       	movw	r30, r20
    335a:	81 91       	ld	r24, Z+
    335c:	af 01       	movw	r20, r30
    335e:	8d 93       	st	X+, r24
    3360:	ee 16       	cp	r14, r30
    3362:	ff 06       	cpc	r15, r31
    3364:	c9 f7       	brne	.-14     	; 0x3358 <eepromSavePattern+0x2dc>
    3366:	85 2d       	mov	r24, r5
    3368:	31 de       	rcall	.-926    	; 0x2fcc <twi_start>
    336a:	81 30       	cpi	r24, 0x01	; 1
    336c:	81 f4       	brne	.+32     	; 0x338e <eepromSavePattern+0x312>
    336e:	84 e1       	ldi	r24, 0x14	; 20
    3370:	e1 e2       	ldi	r30, 0x21	; 33
    3372:	f2 e0       	ldi	r31, 0x02	; 2
    3374:	de 01       	movw	r26, r28
    3376:	af 57       	subi	r26, 0x7F	; 127
    3378:	bf 4f       	sbci	r27, 0xFF	; 255
    337a:	01 90       	ld	r0, Z+
    337c:	0d 92       	st	X+, r0
    337e:	8a 95       	dec	r24
    3380:	e1 f7       	brne	.-8      	; 0x337a <eepromSavePattern+0x2fe>
    3382:	63 e0       	ldi	r22, 0x03	; 3
    3384:	70 e0       	ldi	r23, 0x00	; 0
    3386:	ce 01       	movw	r24, r28
    3388:	8f 57       	subi	r24, 0x7F	; 127
    338a:	9f 4f       	sbci	r25, 0xFF	; 255
    338c:	90 d8       	rcall	.-3808   	; 0x24ae <outputS>
    338e:	c3 01       	movw	r24, r6
    3390:	80 58       	subi	r24, 0x80	; 128
    3392:	9f 4f       	sbci	r25, 0xFF	; 255
    3394:	89 2f       	mov	r24, r25
    3396:	4a de       	rcall	.-876    	; 0x302c <twi_write>
    3398:	80 e8       	ldi	r24, 0x80	; 128
    339a:	84 0d       	add	r24, r4
    339c:	47 de       	rcall	.-882    	; 0x302c <twi_write>
    339e:	6e 01       	movw	r12, r28
    33a0:	f1 e8       	ldi	r31, 0x81	; 129
    33a2:	cf 0e       	add	r12, r31
    33a4:	d1 1c       	adc	r13, r1
    33a6:	d8 01       	movw	r26, r16
    33a8:	8d 91       	ld	r24, X+
    33aa:	8d 01       	movw	r16, r26
    33ac:	3f de       	rcall	.-898    	; 0x302c <twi_write>
    33ae:	c0 16       	cp	r12, r16
    33b0:	d1 06       	cpc	r13, r17
    33b2:	c9 f7       	brne	.-14     	; 0x33a6 <eepromSavePattern+0x32a>
    33b4:	32 de       	rcall	.-924    	; 0x301a <twi_stop>
    33b6:	ef e1       	ldi	r30, 0x1F	; 31
    33b8:	fe e4       	ldi	r31, 0x4E	; 78
    33ba:	31 97       	sbiw	r30, 0x01	; 1
    33bc:	f1 f7       	brne	.-4      	; 0x33ba <eepromSavePattern+0x33e>
    33be:	00 c0       	rjmp	.+0      	; 0x33c0 <eepromSavePattern+0x344>
    33c0:	00 00       	nop
    33c2:	85 2d       	mov	r24, r5
    33c4:	03 de       	rcall	.-1018   	; 0x2fcc <twi_start>
    33c6:	81 30       	cpi	r24, 0x01	; 1
    33c8:	81 f4       	brne	.+32     	; 0x33ea <eepromSavePattern+0x36e>
    33ca:	84 e1       	ldi	r24, 0x14	; 20
    33cc:	e6 e3       	ldi	r30, 0x36	; 54
    33ce:	f2 e0       	ldi	r31, 0x02	; 2
    33d0:	de 01       	movw	r26, r28
    33d2:	af 57       	subi	r26, 0x7F	; 127
    33d4:	bf 4f       	sbci	r27, 0xFF	; 255
    33d6:	01 90       	ld	r0, Z+
    33d8:	0d 92       	st	X+, r0
    33da:	8a 95       	dec	r24
    33dc:	e1 f7       	brne	.-8      	; 0x33d6 <eepromSavePattern+0x35a>
    33de:	63 e0       	ldi	r22, 0x03	; 3
    33e0:	70 e0       	ldi	r23, 0x00	; 0
    33e2:	ce 01       	movw	r24, r28
    33e4:	8f 57       	subi	r24, 0x7F	; 127
    33e6:	9f 4f       	sbci	r25, 0xFF	; 255
    33e8:	62 d8       	rcall	.-3900   	; 0x24ae <outputS>
    33ea:	73 94       	inc	r7
    33ec:	87 2d       	mov	r24, r7
    33ee:	1e de       	rcall	.-964    	; 0x302c <twi_write>
    33f0:	84 2d       	mov	r24, r4
    33f2:	1c de       	rcall	.-968    	; 0x302c <twi_write>
    33f4:	6e 01       	movw	r12, r28
    33f6:	2d ed       	ldi	r18, 0xDD	; 221
    33f8:	c2 1a       	sub	r12, r18
    33fa:	2d ef       	ldi	r18, 0xFD	; 253
    33fc:	d2 0a       	sbc	r13, r18
    33fe:	d7 01       	movw	r26, r14
    3400:	1c 91       	ld	r17, X
    3402:	11 96       	adiw	r26, 0x01	; 1
    3404:	8c 91       	ld	r24, X
    3406:	b2 e0       	ldi	r27, 0x02	; 2
    3408:	eb 0e       	add	r14, r27
    340a:	f1 1c       	adc	r15, r1
    340c:	0f de       	rcall	.-994    	; 0x302c <twi_write>
    340e:	81 2f       	mov	r24, r17
    3410:	0d de       	rcall	.-998    	; 0x302c <twi_write>
    3412:	ce 14       	cp	r12, r14
    3414:	df 04       	cpc	r13, r15
    3416:	99 f7       	brne	.-26     	; 0x33fe <eepromSavePattern+0x382>
    3418:	00 de       	rcall	.-1024   	; 0x301a <twi_stop>
    341a:	ef e1       	ldi	r30, 0x1F	; 31
    341c:	fe e4       	ldi	r31, 0x4E	; 78
    341e:	31 97       	sbiw	r30, 0x01	; 1
    3420:	f1 f7       	brne	.-4      	; 0x341e <eepromSavePattern+0x3a2>
    3422:	00 c0       	rjmp	.+0      	; 0x3424 <eepromSavePattern+0x3a8>
    3424:	00 00       	nop
    3426:	cc 56       	subi	r28, 0x6C	; 108
    3428:	df 4f       	sbci	r29, 0xFF	; 255
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	f8 94       	cli
    342e:	de bf       	out	0x3e, r29	; 62
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	cd bf       	out	0x3d, r28	; 61
    3434:	df 91       	pop	r29
    3436:	cf 91       	pop	r28
    3438:	1f 91       	pop	r17
    343a:	0f 91       	pop	r16
    343c:	ff 90       	pop	r15
    343e:	ef 90       	pop	r14
    3440:	df 90       	pop	r13
    3442:	cf 90       	pop	r12
    3444:	bf 90       	pop	r11
    3446:	af 90       	pop	r10
    3448:	9f 90       	pop	r9
    344a:	8f 90       	pop	r8
    344c:	7f 90       	pop	r7
    344e:	6f 90       	pop	r6
    3450:	5f 90       	pop	r5
    3452:	4f 90       	pop	r4
    3454:	08 95       	ret

00003456 <eepromLoadPattern>:
    3456:	8f 92       	push	r8
    3458:	9f 92       	push	r9
    345a:	af 92       	push	r10
    345c:	bf 92       	push	r11
    345e:	cf 92       	push	r12
    3460:	df 92       	push	r13
    3462:	ef 92       	push	r14
    3464:	ff 92       	push	r15
    3466:	0f 93       	push	r16
    3468:	1f 93       	push	r17
    346a:	cf 93       	push	r28
    346c:	df 93       	push	r29
    346e:	cd b7       	in	r28, 0x3d	; 61
    3470:	de b7       	in	r29, 0x3e	; 62
    3472:	c4 59       	subi	r28, 0x94	; 148
    3474:	d1 40       	sbci	r29, 0x01	; 1
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	cd bf       	out	0x3d, r28	; 61
    3480:	7c 01       	movw	r14, r24
    3482:	86 2f       	mov	r24, r22
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	66 23       	and	r22, r22
    3488:	84 f0       	brlt	.+32     	; 0x34aa <eepromLoadPattern+0x54>
    348a:	01 97       	sbiw	r24, 0x01	; 1
    348c:	9c 01       	movw	r18, r24
    348e:	22 0f       	add	r18, r18
    3490:	33 1f       	adc	r19, r19
    3492:	82 0f       	add	r24, r18
    3494:	93 1f       	adc	r25, r19
    3496:	96 95       	lsr	r25
    3498:	98 2f       	mov	r25, r24
    349a:	88 27       	eor	r24, r24
    349c:	97 95       	ror	r25
    349e:	87 95       	ror	r24
    34a0:	08 2f       	mov	r16, r24
    34a2:	d9 2e       	mov	r13, r25
    34a4:	80 ea       	ldi	r24, 0xA0	; 160
    34a6:	11 ea       	ldi	r17, 0xA1	; 161
    34a8:	10 c0       	rjmp	.+32     	; 0x34ca <eepromLoadPattern+0x74>
    34aa:	80 58       	subi	r24, 0x80	; 128
    34ac:	91 09       	sbc	r25, r1
    34ae:	9c 01       	movw	r18, r24
    34b0:	22 0f       	add	r18, r18
    34b2:	33 1f       	adc	r19, r19
    34b4:	82 0f       	add	r24, r18
    34b6:	93 1f       	adc	r25, r19
    34b8:	96 95       	lsr	r25
    34ba:	98 2f       	mov	r25, r24
    34bc:	88 27       	eor	r24, r24
    34be:	97 95       	ror	r25
    34c0:	87 95       	ror	r24
    34c2:	08 2f       	mov	r16, r24
    34c4:	d9 2e       	mov	r13, r25
    34c6:	88 ea       	ldi	r24, 0xA8	; 168
    34c8:	19 ea       	ldi	r17, 0xA9	; 169
    34ca:	80 dd       	rcall	.-1280   	; 0x2fcc <twi_start>
    34cc:	81 30       	cpi	r24, 0x01	; 1
    34ce:	31 f4       	brne	.+12     	; 0x34dc <eepromLoadPattern+0x86>
    34d0:	63 e0       	ldi	r22, 0x03	; 3
    34d2:	70 e0       	ldi	r23, 0x00	; 0
    34d4:	8d e7       	ldi	r24, 0x7D	; 125
    34d6:	93 e0       	ldi	r25, 0x03	; 3
    34d8:	0e 94 57 12 	call	0x24ae	; 0x24ae <outputS>
    34dc:	8d 2d       	mov	r24, r13
    34de:	a6 dd       	rcall	.-1204   	; 0x302c <twi_write>
    34e0:	80 2f       	mov	r24, r16
    34e2:	a4 dd       	rcall	.-1208   	; 0x302c <twi_write>
    34e4:	81 2f       	mov	r24, r17
    34e6:	72 dd       	rcall	.-1308   	; 0x2fcc <twi_start>
    34e8:	81 30       	cpi	r24, 0x01	; 1
    34ea:	09 f0       	breq	.+2      	; 0x34ee <eepromLoadPattern+0x98>
    34ec:	48 c1       	rjmp	.+656    	; 0x377e <eepromLoadPattern+0x328>
    34ee:	84 e1       	ldi	r24, 0x14	; 20
    34f0:	eb e4       	ldi	r30, 0x4B	; 75
    34f2:	f2 e0       	ldi	r31, 0x02	; 2
    34f4:	de 01       	movw	r26, r28
    34f6:	af 57       	subi	r26, 0x7F	; 127
    34f8:	be 4f       	sbci	r27, 0xFE	; 254
    34fa:	01 90       	ld	r0, Z+
    34fc:	0d 92       	st	X+, r0
    34fe:	8a 95       	dec	r24
    3500:	e1 f7       	brne	.-8      	; 0x34fa <eepromLoadPattern+0xa4>
    3502:	63 e0       	ldi	r22, 0x03	; 3
    3504:	70 e0       	ldi	r23, 0x00	; 0
    3506:	ce 01       	movw	r24, r28
    3508:	8f 57       	subi	r24, 0x7F	; 127
    350a:	9e 4f       	sbci	r25, 0xFE	; 254
    350c:	0e 94 57 12 	call	0x24ae	; 0x24ae <outputS>
    3510:	36 c1       	rjmp	.+620    	; 0x377e <eepromLoadPattern+0x328>
    3512:	9e dd       	rcall	.-1220   	; 0x3050 <twi_readAck>
    3514:	d8 01       	movw	r26, r16
    3516:	8d 93       	st	X+, r24
    3518:	8d 01       	movw	r16, r26
    351a:	ac 15       	cp	r26, r12
    351c:	bd 05       	cpc	r27, r13
    351e:	c9 f7       	brne	.-14     	; 0x3512 <eepromLoadPattern+0xbc>
    3520:	a2 dd       	rcall	.-1212   	; 0x3066 <twi_readNak>
    3522:	c0 58       	subi	r28, 0x80	; 128
    3524:	de 4f       	sbci	r29, 0xFE	; 254
    3526:	88 83       	st	Y, r24
    3528:	c0 58       	subi	r28, 0x80	; 128
    352a:	d1 40       	sbci	r29, 0x01	; 1
    352c:	76 dd       	rcall	.-1300   	; 0x301a <twi_stop>
    352e:	87 01       	movw	r16, r14
    3530:	4e 01       	movw	r8, r28
    3532:	b9 e0       	ldi	r27, 0x09	; 9
    3534:	8b 0e       	add	r8, r27
    3536:	91 1c       	adc	r9, r1
    3538:	f7 01       	movw	r30, r14
    353a:	d5 01       	movw	r26, r10
    353c:	8d 91       	ld	r24, X+
    353e:	5d 01       	movw	r10, r26
    3540:	81 93       	st	Z+, r24
    3542:	a8 15       	cp	r26, r8
    3544:	b9 05       	cpc	r27, r9
    3546:	c9 f7       	brne	.-14     	; 0x353a <eepromLoadPattern+0xe4>
    3548:	d1 2c       	mov	r13, r1
    354a:	f4 01       	movw	r30, r8
    354c:	81 91       	ld	r24, Z+
    354e:	4f 01       	movw	r8, r30
    3550:	f8 01       	movw	r30, r16
    3552:	80 87       	std	Z+8, r24	; 0x08
    3554:	4d 2d       	mov	r20, r13
    3556:	60 81       	ld	r22, Z
    3558:	0f 5f       	subi	r16, 0xFF	; 255
    355a:	1f 4f       	sbci	r17, 0xFF	; 255
    355c:	08 db       	rcall	.-2544   	; 0x2b6e <setOutputVolume>
    355e:	d3 94       	inc	r13
    3560:	f8 e0       	ldi	r31, 0x08	; 8
    3562:	df 12       	cpse	r13, r31
    3564:	f2 cf       	rjmp	.-28     	; 0x354a <eepromLoadPattern+0xf4>
    3566:	5e 01       	movw	r10, r28
    3568:	81 e1       	ldi	r24, 0x11	; 17
    356a:	a8 0e       	add	r10, r24
    356c:	b1 1c       	adc	r11, r1
    356e:	67 01       	movw	r12, r14
    3570:	90 e1       	ldi	r25, 0x10	; 16
    3572:	c9 0e       	add	r12, r25
    3574:	d1 1c       	adc	r13, r1
    3576:	10 e0       	ldi	r17, 0x00	; 0
    3578:	d5 01       	movw	r26, r10
    357a:	4d 91       	ld	r20, X+
    357c:	5d 01       	movw	r10, r26
    357e:	f6 01       	movw	r30, r12
    3580:	41 93       	st	Z+, r20
    3582:	6f 01       	movw	r12, r30
    3584:	60 e0       	ldi	r22, 0x00	; 0
    3586:	81 2f       	mov	r24, r17
    3588:	69 db       	rcall	.-2350   	; 0x2c5c <outputSampleRate>
    358a:	1f 5f       	subi	r17, 0xFF	; 255
    358c:	18 30       	cpi	r17, 0x08	; 8
    358e:	a1 f7       	brne	.-24     	; 0x3578 <eepromLoadPattern+0x122>
    3590:	fe 01       	movw	r30, r28
    3592:	79 96       	adiw	r30, 0x19	; 25
    3594:	c7 01       	movw	r24, r14
    3596:	48 96       	adiw	r24, 0x18	; 24
    3598:	ae 01       	movw	r20, r28
    359a:	47 5d       	subi	r20, 0xD7	; 215
    359c:	5f 4f       	sbci	r21, 0xFF	; 255
    359e:	21 91       	ld	r18, Z+
    35a0:	dc 01       	movw	r26, r24
    35a2:	2d 93       	st	X+, r18
    35a4:	cd 01       	movw	r24, r26
    35a6:	e4 17       	cp	r30, r20
    35a8:	f5 07       	cpc	r31, r21
    35aa:	c9 f7       	brne	.-14     	; 0x359e <eepromLoadPattern+0x148>
    35ac:	57 01       	movw	r10, r14
    35ae:	b8 e2       	ldi	r27, 0x28	; 40
    35b0:	ab 0e       	add	r10, r27
    35b2:	b1 1c       	adc	r11, r1
    35b4:	de 01       	movw	r26, r28
    35b6:	d9 96       	adiw	r26, 0x39	; 57
    35b8:	c5 01       	movw	r24, r10
    35ba:	fa 01       	movw	r30, r20
    35bc:	21 91       	ld	r18, Z+
    35be:	af 01       	movw	r20, r30
    35c0:	fc 01       	movw	r30, r24
    35c2:	21 93       	st	Z+, r18
    35c4:	cf 01       	movw	r24, r30
    35c6:	4a 17       	cp	r20, r26
    35c8:	5b 07       	cpc	r21, r27
    35ca:	b9 f7       	brne	.-18     	; 0x35ba <eepromLoadPattern+0x164>
    35cc:	c7 01       	movw	r24, r14
    35ce:	c8 96       	adiw	r24, 0x38	; 56
    35d0:	ae 01       	movw	r20, r28
    35d2:	47 5b       	subi	r20, 0xB7	; 183
    35d4:	5f 4f       	sbci	r21, 0xFF	; 255
    35d6:	2d 91       	ld	r18, X+
    35d8:	fc 01       	movw	r30, r24
    35da:	21 93       	st	Z+, r18
    35dc:	cf 01       	movw	r24, r30
    35de:	a4 17       	cp	r26, r20
    35e0:	b5 07       	cpc	r27, r21
    35e2:	c9 f7       	brne	.-14     	; 0x35d6 <eepromLoadPattern+0x180>
    35e4:	c7 01       	movw	r24, r14
    35e6:	88 5b       	subi	r24, 0xB8	; 184
    35e8:	9f 4f       	sbci	r25, 0xFF	; 255
    35ea:	de 01       	movw	r26, r28
    35ec:	a7 5a       	subi	r26, 0xA7	; 167
    35ee:	bf 4f       	sbci	r27, 0xFF	; 255
    35f0:	fa 01       	movw	r30, r20
    35f2:	21 91       	ld	r18, Z+
    35f4:	af 01       	movw	r20, r30
    35f6:	fc 01       	movw	r30, r24
    35f8:	21 93       	st	Z+, r18
    35fa:	cf 01       	movw	r24, r30
    35fc:	4a 17       	cp	r20, r26
    35fe:	5b 07       	cpc	r21, r27
    3600:	b9 f7       	brne	.-18     	; 0x35f0 <eepromLoadPattern+0x19a>
    3602:	c7 01       	movw	r24, r14
    3604:	88 5a       	subi	r24, 0xA8	; 168
    3606:	9f 4f       	sbci	r25, 0xFF	; 255
    3608:	ae 01       	movw	r20, r28
    360a:	47 59       	subi	r20, 0x97	; 151
    360c:	5f 4f       	sbci	r21, 0xFF	; 255
    360e:	2d 91       	ld	r18, X+
    3610:	fc 01       	movw	r30, r24
    3612:	21 93       	st	Z+, r18
    3614:	cf 01       	movw	r24, r30
    3616:	a4 17       	cp	r26, r20
    3618:	b5 07       	cpc	r27, r21
    361a:	c9 f7       	brne	.-14     	; 0x360e <eepromLoadPattern+0x1b8>
    361c:	d7 01       	movw	r26, r14
    361e:	a8 59       	subi	r26, 0x98	; 152
    3620:	bf 4f       	sbci	r27, 0xFF	; 255
    3622:	9e 01       	movw	r18, r28
    3624:	27 58       	subi	r18, 0x87	; 135
    3626:	3f 4f       	sbci	r19, 0xFF	; 255
    3628:	fa 01       	movw	r30, r20
    362a:	81 91       	ld	r24, Z+
    362c:	af 01       	movw	r20, r30
    362e:	8d 93       	st	X+, r24
    3630:	e2 17       	cp	r30, r18
    3632:	f3 07       	cpc	r31, r19
    3634:	c9 f7       	brne	.-14     	; 0x3628 <eepromLoadPattern+0x1d2>
    3636:	f7 01       	movw	r30, r14
    3638:	e8 53       	subi	r30, 0x38	; 56
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	eb 96       	adiw	r28, 0x3b	; 59
    363e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3640:	eb 97       	sbiw	r28, 0x3b	; 59
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	98 2f       	mov	r25, r24
    3646:	88 27       	eor	r24, r24
    3648:	ec 96       	adiw	r28, 0x3c	; 60
    364a:	2f ad       	ldd	r18, Y+63	; 0x3f
    364c:	ec 97       	sbiw	r28, 0x3c	; 60
    364e:	82 2b       	or	r24, r18
    3650:	91 83       	std	Z+1, r25	; 0x01
    3652:	80 83       	st	Z, r24
    3654:	ed 96       	adiw	r28, 0x3d	; 61
    3656:	8f ad       	ldd	r24, Y+63	; 0x3f
    3658:	ed 97       	sbiw	r28, 0x3d	; 61
    365a:	32 96       	adiw	r30, 0x02	; 2
    365c:	80 83       	st	Z, r24
    365e:	ae 01       	movw	r20, r28
    3660:	4f 57       	subi	r20, 0x7F	; 127
    3662:	5f 4f       	sbci	r21, 0xFF	; 255
    3664:	c7 01       	movw	r24, r14
    3666:	88 58       	subi	r24, 0x88	; 136
    3668:	9f 4f       	sbci	r25, 0xFF	; 255
    366a:	fe 01       	movw	r30, r28
    366c:	ef 56       	subi	r30, 0x6F	; 111
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	da 01       	movw	r26, r20
    3672:	2d 91       	ld	r18, X+
    3674:	ad 01       	movw	r20, r26
    3676:	dc 01       	movw	r26, r24
    3678:	2d 93       	st	X+, r18
    367a:	cd 01       	movw	r24, r26
    367c:	e4 17       	cp	r30, r20
    367e:	f5 07       	cpc	r31, r21
    3680:	b9 f7       	brne	.-18     	; 0x3670 <eepromLoadPattern+0x21a>
    3682:	c7 01       	movw	r24, r14
    3684:	88 57       	subi	r24, 0x78	; 120
    3686:	9f 4f       	sbci	r25, 0xFF	; 255
    3688:	ae 01       	movw	r20, r28
    368a:	4f 55       	subi	r20, 0x5F	; 95
    368c:	5f 4f       	sbci	r21, 0xFF	; 255
    368e:	21 91       	ld	r18, Z+
    3690:	dc 01       	movw	r26, r24
    3692:	2d 93       	st	X+, r18
    3694:	cd 01       	movw	r24, r26
    3696:	4e 17       	cp	r20, r30
    3698:	5f 07       	cpc	r21, r31
    369a:	c9 f7       	brne	.-14     	; 0x368e <eepromLoadPattern+0x238>
    369c:	87 01       	movw	r16, r14
    369e:	08 56       	subi	r16, 0x68	; 104
    36a0:	1f 4f       	sbci	r17, 0xFF	; 255
    36a2:	4e 01       	movw	r8, r28
    36a4:	b1 eb       	ldi	r27, 0xB1	; 177
    36a6:	8b 0e       	add	r8, r27
    36a8:	91 1c       	adc	r9, r1
    36aa:	f8 01       	movw	r30, r16
    36ac:	da 01       	movw	r26, r20
    36ae:	8d 91       	ld	r24, X+
    36b0:	ad 01       	movw	r20, r26
    36b2:	81 93       	st	Z+, r24
    36b4:	8a 16       	cp	r8, r26
    36b6:	9b 06       	cpc	r9, r27
    36b8:	c9 f7       	brne	.-14     	; 0x36ac <eepromLoadPattern+0x256>
    36ba:	6e 01       	movw	r12, r28
    36bc:	b1 ec       	ldi	r27, 0xC1	; 193
    36be:	cb 0e       	add	r12, r27
    36c0:	d1 1c       	adc	r13, r1
    36c2:	f4 01       	movw	r30, r8
    36c4:	81 91       	ld	r24, Z+
    36c6:	4f 01       	movw	r8, r30
    36c8:	f8 01       	movw	r30, r16
    36ca:	80 8b       	std	Z+16, r24	; 0x10
    36cc:	d5 01       	movw	r26, r10
    36ce:	2d 91       	ld	r18, X+
    36d0:	5d 01       	movw	r10, r26
    36d2:	1f 96       	adiw	r26, 0x0f	; 15
    36d4:	4c 91       	ld	r20, X
    36d6:	60 81       	ld	r22, Z
    36d8:	0f 5f       	subi	r16, 0xFF	; 255
    36da:	1f 4f       	sbci	r17, 0xFF	; 255
    36dc:	6c da       	rcall	.-2856   	; 0x2bb6 <setTrackVolume>
    36de:	c8 14       	cp	r12, r8
    36e0:	d9 04       	cpc	r13, r9
    36e2:	79 f7       	brne	.-34     	; 0x36c2 <eepromLoadPattern+0x26c>
    36e4:	97 01       	movw	r18, r14
    36e6:	28 54       	subi	r18, 0x48	; 72
    36e8:	3f 4f       	sbci	r19, 0xFF	; 255
    36ea:	de 01       	movw	r26, r28
    36ec:	af 52       	subi	r26, 0x2F	; 47
    36ee:	bf 4f       	sbci	r27, 0xFF	; 255
    36f0:	f6 01       	movw	r30, r12
    36f2:	81 91       	ld	r24, Z+
    36f4:	6f 01       	movw	r12, r30
    36f6:	f9 01       	movw	r30, r18
    36f8:	81 93       	st	Z+, r24
    36fa:	9f 01       	movw	r18, r30
    36fc:	ca 16       	cp	r12, r26
    36fe:	db 06       	cpc	r13, r27
    3700:	b9 f7       	brne	.-18     	; 0x36f0 <eepromLoadPattern+0x29a>
    3702:	c7 01       	movw	r24, r14
    3704:	85 53       	subi	r24, 0x35	; 53
    3706:	9f 4f       	sbci	r25, 0xFF	; 255
    3708:	ae 01       	movw	r20, r28
    370a:	4f 51       	subi	r20, 0x1F	; 31
    370c:	5f 4f       	sbci	r21, 0xFF	; 255
    370e:	2d 91       	ld	r18, X+
    3710:	fc 01       	movw	r30, r24
    3712:	21 93       	st	Z+, r18
    3714:	cf 01       	movw	r24, r30
    3716:	4a 17       	cp	r20, r26
    3718:	5b 07       	cpc	r21, r27
    371a:	c9 f7       	brne	.-14     	; 0x370e <eepromLoadPattern+0x2b8>
    371c:	c7 01       	movw	r24, r14
    371e:	85 52       	subi	r24, 0x25	; 37
    3720:	9f 4f       	sbci	r25, 0xFF	; 255
    3722:	be 01       	movw	r22, r28
    3724:	6f 50       	subi	r22, 0x0F	; 15
    3726:	7f 4f       	sbci	r23, 0xFF	; 255
    3728:	da 01       	movw	r26, r20
    372a:	2d 91       	ld	r18, X+
    372c:	ad 01       	movw	r20, r26
    372e:	fc 01       	movw	r30, r24
    3730:	21 93       	st	Z+, r18
    3732:	cf 01       	movw	r24, r30
    3734:	a6 17       	cp	r26, r22
    3736:	b7 07       	cpc	r27, r23
    3738:	b9 f7       	brne	.-18     	; 0x3728 <eepromLoadPattern+0x2d2>
    373a:	c7 01       	movw	r24, r14
    373c:	85 51       	subi	r24, 0x15	; 21
    373e:	9f 4f       	sbci	r25, 0xFF	; 255
    3740:	fe 01       	movw	r30, r28
    3742:	ef 5f       	subi	r30, 0xFF	; 255
    3744:	fe 4f       	sbci	r31, 0xFE	; 254
    3746:	db 01       	movw	r26, r22
    3748:	2d 91       	ld	r18, X+
    374a:	bd 01       	movw	r22, r26
    374c:	dc 01       	movw	r26, r24
    374e:	2d 93       	st	X+, r18
    3750:	cd 01       	movw	r24, r26
    3752:	e6 17       	cp	r30, r22
    3754:	f7 07       	cpc	r31, r23
    3756:	b9 f7       	brne	.-18     	; 0x3746 <eepromLoadPattern+0x2f0>
    3758:	d7 01       	movw	r26, r14
    375a:	a5 50       	subi	r26, 0x05	; 5
    375c:	bf 4f       	sbci	r27, 0xFF	; 255
    375e:	ae 01       	movw	r20, r28
    3760:	4f 57       	subi	r20, 0x7F	; 127
    3762:	5e 4f       	sbci	r21, 0xFE	; 254
    3764:	80 81       	ld	r24, Z
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	98 2f       	mov	r25, r24
    376a:	88 27       	eor	r24, r24
    376c:	21 81       	ldd	r18, Z+1	; 0x01
    376e:	82 2b       	or	r24, r18
    3770:	8d 93       	st	X+, r24
    3772:	9d 93       	st	X+, r25
    3774:	32 96       	adiw	r30, 0x02	; 2
    3776:	4e 17       	cp	r20, r30
    3778:	5f 07       	cpc	r21, r31
    377a:	a1 f7       	brne	.-24     	; 0x3764 <eepromLoadPattern+0x30e>
    377c:	0a c0       	rjmp	.+20     	; 0x3792 <eepromLoadPattern+0x33c>
    377e:	fe 01       	movw	r30, r28
    3780:	31 96       	adiw	r30, 0x01	; 1
    3782:	5f 01       	movw	r10, r30
    3784:	6e 01       	movw	r12, r28
    3786:	f0 e8       	ldi	r31, 0x80	; 128
    3788:	cf 1a       	sub	r12, r31
    378a:	fe ef       	ldi	r31, 0xFE	; 254
    378c:	df 0a       	sbc	r13, r31
    378e:	85 01       	movw	r16, r10
    3790:	c0 ce       	rjmp	.-640    	; 0x3512 <eepromLoadPattern+0xbc>
    3792:	cc 56       	subi	r28, 0x6C	; 108
    3794:	de 4f       	sbci	r29, 0xFE	; 254
    3796:	0f b6       	in	r0, 0x3f	; 63
    3798:	f8 94       	cli
    379a:	de bf       	out	0x3e, r29	; 62
    379c:	0f be       	out	0x3f, r0	; 63
    379e:	cd bf       	out	0x3d, r28	; 61
    37a0:	df 91       	pop	r29
    37a2:	cf 91       	pop	r28
    37a4:	1f 91       	pop	r17
    37a6:	0f 91       	pop	r16
    37a8:	ff 90       	pop	r15
    37aa:	ef 90       	pop	r14
    37ac:	df 90       	pop	r13
    37ae:	cf 90       	pop	r12
    37b0:	bf 90       	pop	r11
    37b2:	af 90       	pop	r10
    37b4:	9f 90       	pop	r9
    37b6:	8f 90       	pop	r8
    37b8:	08 95       	ret

000037ba <globalWrite>:

//this happens when save button is pressed on global menu. 
void globalWrite(Globals *currentGlobals)
{
    37ba:	cf 93       	push	r28
    37bc:	df 93       	push	r29
    37be:	ec 01       	movw	r28, r24
	eeprom_write_byte(0,currentGlobals->midiChannel); //this may be wrong, but it does get rid of the warning. 
    37c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	46 d2       	rcall	.+1164   	; 0x3c54 <eeprom_write_byte>
	eeprom_write_block(currentGlobals->midiTrackNote,1,16);
    37c8:	40 e1       	ldi	r20, 0x10	; 16
    37ca:	50 e0       	ldi	r21, 0x00	; 0
    37cc:	61 e0       	ldi	r22, 0x01	; 1
    37ce:	70 e0       	ldi	r23, 0x00	; 0
    37d0:	ce 01       	movw	r24, r28
    37d2:	0d 96       	adiw	r24, 0x0d	; 13
    37d4:	36 d2       	rcall	.+1132   	; 0x3c42 <eeprom_write_block>
}
    37d6:	df 91       	pop	r29
    37d8:	cf 91       	pop	r28
    37da:	08 95       	ret

000037dc <globalLoad>:
//This happens at startup only, in function "initGlobals"

void globalLoad(Globals *currentGlobals, uint8_t factoryReset)
{
    37dc:	cf 93       	push	r28
    37de:	df 93       	push	r29
	//we need to load all of the global midi settings here. 
	//we can also check the factory reset bit here. 
	//if the program has not gone through the initial state, and had the internal eeprom formatted, then this will return garbage. 
	if(factoryReset==0)
    37e0:	61 11       	cpse	r22, r1
    37e2:	0c c0       	rjmp	.+24     	; 0x37fc <globalLoad+0x20>
    37e4:	ec 01       	movw	r28, r24
	{
		currentGlobals->midiChannel = eeprom_read_byte(0);
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	23 d2       	rcall	.+1094   	; 0x3c32 <eeprom_read_byte>
    37ec:	8c 87       	std	Y+12, r24	; 0x0c
		eeprom_read_block(currentGlobals->midiTrackNote,1,16);
    37ee:	40 e1       	ldi	r20, 0x10	; 16
    37f0:	50 e0       	ldi	r21, 0x00	; 0
    37f2:	61 e0       	ldi	r22, 0x01	; 1
    37f4:	70 e0       	ldi	r23, 0x00	; 0
    37f6:	ce 01       	movw	r24, r28
    37f8:	0d 96       	adiw	r24, 0x0d	; 13
    37fa:	0b d2       	rcall	.+1046   	; 0x3c12 <eeprom_read_block>
	}
}
    37fc:	df 91       	pop	r29
    37fe:	cf 91       	pop	r28
    3800:	08 95       	ret

00003802 <__subsf3>:
    3802:	50 58       	subi	r21, 0x80	; 128

00003804 <__addsf3>:
    3804:	bb 27       	eor	r27, r27
    3806:	aa 27       	eor	r26, r26
    3808:	0e d0       	rcall	.+28     	; 0x3826 <__addsf3x>
    380a:	4d c1       	rjmp	.+666    	; 0x3aa6 <__fp_round>
    380c:	3e d1       	rcall	.+636    	; 0x3a8a <__fp_pscA>
    380e:	30 f0       	brcs	.+12     	; 0x381c <__addsf3+0x18>
    3810:	43 d1       	rcall	.+646    	; 0x3a98 <__fp_pscB>
    3812:	20 f0       	brcs	.+8      	; 0x381c <__addsf3+0x18>
    3814:	31 f4       	brne	.+12     	; 0x3822 <__addsf3+0x1e>
    3816:	9f 3f       	cpi	r25, 0xFF	; 255
    3818:	11 f4       	brne	.+4      	; 0x381e <__addsf3+0x1a>
    381a:	1e f4       	brtc	.+6      	; 0x3822 <__addsf3+0x1e>
    381c:	33 c1       	rjmp	.+614    	; 0x3a84 <__fp_nan>
    381e:	0e f4       	brtc	.+2      	; 0x3822 <__addsf3+0x1e>
    3820:	e0 95       	com	r30
    3822:	e7 fb       	bst	r30, 7
    3824:	29 c1       	rjmp	.+594    	; 0x3a78 <__fp_inf>

00003826 <__addsf3x>:
    3826:	e9 2f       	mov	r30, r25
    3828:	4f d1       	rcall	.+670    	; 0x3ac8 <__fp_split3>
    382a:	80 f3       	brcs	.-32     	; 0x380c <__addsf3+0x8>
    382c:	ba 17       	cp	r27, r26
    382e:	62 07       	cpc	r22, r18
    3830:	73 07       	cpc	r23, r19
    3832:	84 07       	cpc	r24, r20
    3834:	95 07       	cpc	r25, r21
    3836:	18 f0       	brcs	.+6      	; 0x383e <__addsf3x+0x18>
    3838:	71 f4       	brne	.+28     	; 0x3856 <__addsf3x+0x30>
    383a:	9e f5       	brtc	.+102    	; 0x38a2 <__addsf3x+0x7c>
    383c:	67 c1       	rjmp	.+718    	; 0x3b0c <__fp_zero>
    383e:	0e f4       	brtc	.+2      	; 0x3842 <__addsf3x+0x1c>
    3840:	e0 95       	com	r30
    3842:	0b 2e       	mov	r0, r27
    3844:	ba 2f       	mov	r27, r26
    3846:	a0 2d       	mov	r26, r0
    3848:	0b 01       	movw	r0, r22
    384a:	b9 01       	movw	r22, r18
    384c:	90 01       	movw	r18, r0
    384e:	0c 01       	movw	r0, r24
    3850:	ca 01       	movw	r24, r20
    3852:	a0 01       	movw	r20, r0
    3854:	11 24       	eor	r1, r1
    3856:	ff 27       	eor	r31, r31
    3858:	59 1b       	sub	r21, r25
    385a:	99 f0       	breq	.+38     	; 0x3882 <__addsf3x+0x5c>
    385c:	59 3f       	cpi	r21, 0xF9	; 249
    385e:	50 f4       	brcc	.+20     	; 0x3874 <__addsf3x+0x4e>
    3860:	50 3e       	cpi	r21, 0xE0	; 224
    3862:	68 f1       	brcs	.+90     	; 0x38be <__addsf3x+0x98>
    3864:	1a 16       	cp	r1, r26
    3866:	f0 40       	sbci	r31, 0x00	; 0
    3868:	a2 2f       	mov	r26, r18
    386a:	23 2f       	mov	r18, r19
    386c:	34 2f       	mov	r19, r20
    386e:	44 27       	eor	r20, r20
    3870:	58 5f       	subi	r21, 0xF8	; 248
    3872:	f3 cf       	rjmp	.-26     	; 0x385a <__addsf3x+0x34>
    3874:	46 95       	lsr	r20
    3876:	37 95       	ror	r19
    3878:	27 95       	ror	r18
    387a:	a7 95       	ror	r26
    387c:	f0 40       	sbci	r31, 0x00	; 0
    387e:	53 95       	inc	r21
    3880:	c9 f7       	brne	.-14     	; 0x3874 <__addsf3x+0x4e>
    3882:	7e f4       	brtc	.+30     	; 0x38a2 <__addsf3x+0x7c>
    3884:	1f 16       	cp	r1, r31
    3886:	ba 0b       	sbc	r27, r26
    3888:	62 0b       	sbc	r22, r18
    388a:	73 0b       	sbc	r23, r19
    388c:	84 0b       	sbc	r24, r20
    388e:	ba f0       	brmi	.+46     	; 0x38be <__addsf3x+0x98>
    3890:	91 50       	subi	r25, 0x01	; 1
    3892:	a1 f0       	breq	.+40     	; 0x38bc <__addsf3x+0x96>
    3894:	ff 0f       	add	r31, r31
    3896:	bb 1f       	adc	r27, r27
    3898:	66 1f       	adc	r22, r22
    389a:	77 1f       	adc	r23, r23
    389c:	88 1f       	adc	r24, r24
    389e:	c2 f7       	brpl	.-16     	; 0x3890 <__addsf3x+0x6a>
    38a0:	0e c0       	rjmp	.+28     	; 0x38be <__addsf3x+0x98>
    38a2:	ba 0f       	add	r27, r26
    38a4:	62 1f       	adc	r22, r18
    38a6:	73 1f       	adc	r23, r19
    38a8:	84 1f       	adc	r24, r20
    38aa:	48 f4       	brcc	.+18     	; 0x38be <__addsf3x+0x98>
    38ac:	87 95       	ror	r24
    38ae:	77 95       	ror	r23
    38b0:	67 95       	ror	r22
    38b2:	b7 95       	ror	r27
    38b4:	f7 95       	ror	r31
    38b6:	9e 3f       	cpi	r25, 0xFE	; 254
    38b8:	08 f0       	brcs	.+2      	; 0x38bc <__addsf3x+0x96>
    38ba:	b3 cf       	rjmp	.-154    	; 0x3822 <__addsf3+0x1e>
    38bc:	93 95       	inc	r25
    38be:	88 0f       	add	r24, r24
    38c0:	08 f0       	brcs	.+2      	; 0x38c4 <__addsf3x+0x9e>
    38c2:	99 27       	eor	r25, r25
    38c4:	ee 0f       	add	r30, r30
    38c6:	97 95       	ror	r25
    38c8:	87 95       	ror	r24
    38ca:	08 95       	ret

000038cc <__divsf3>:
    38cc:	0c d0       	rcall	.+24     	; 0x38e6 <__divsf3x>
    38ce:	eb c0       	rjmp	.+470    	; 0x3aa6 <__fp_round>
    38d0:	e3 d0       	rcall	.+454    	; 0x3a98 <__fp_pscB>
    38d2:	40 f0       	brcs	.+16     	; 0x38e4 <__divsf3+0x18>
    38d4:	da d0       	rcall	.+436    	; 0x3a8a <__fp_pscA>
    38d6:	30 f0       	brcs	.+12     	; 0x38e4 <__divsf3+0x18>
    38d8:	21 f4       	brne	.+8      	; 0x38e2 <__divsf3+0x16>
    38da:	5f 3f       	cpi	r21, 0xFF	; 255
    38dc:	19 f0       	breq	.+6      	; 0x38e4 <__divsf3+0x18>
    38de:	cc c0       	rjmp	.+408    	; 0x3a78 <__fp_inf>
    38e0:	51 11       	cpse	r21, r1
    38e2:	15 c1       	rjmp	.+554    	; 0x3b0e <__fp_szero>
    38e4:	cf c0       	rjmp	.+414    	; 0x3a84 <__fp_nan>

000038e6 <__divsf3x>:
    38e6:	f0 d0       	rcall	.+480    	; 0x3ac8 <__fp_split3>
    38e8:	98 f3       	brcs	.-26     	; 0x38d0 <__divsf3+0x4>

000038ea <__divsf3_pse>:
    38ea:	99 23       	and	r25, r25
    38ec:	c9 f3       	breq	.-14     	; 0x38e0 <__divsf3+0x14>
    38ee:	55 23       	and	r21, r21
    38f0:	b1 f3       	breq	.-20     	; 0x38de <__divsf3+0x12>
    38f2:	95 1b       	sub	r25, r21
    38f4:	55 0b       	sbc	r21, r21
    38f6:	bb 27       	eor	r27, r27
    38f8:	aa 27       	eor	r26, r26
    38fa:	62 17       	cp	r22, r18
    38fc:	73 07       	cpc	r23, r19
    38fe:	84 07       	cpc	r24, r20
    3900:	38 f0       	brcs	.+14     	; 0x3910 <__divsf3_pse+0x26>
    3902:	9f 5f       	subi	r25, 0xFF	; 255
    3904:	5f 4f       	sbci	r21, 0xFF	; 255
    3906:	22 0f       	add	r18, r18
    3908:	33 1f       	adc	r19, r19
    390a:	44 1f       	adc	r20, r20
    390c:	aa 1f       	adc	r26, r26
    390e:	a9 f3       	breq	.-22     	; 0x38fa <__divsf3_pse+0x10>
    3910:	33 d0       	rcall	.+102    	; 0x3978 <__divsf3_pse+0x8e>
    3912:	0e 2e       	mov	r0, r30
    3914:	3a f0       	brmi	.+14     	; 0x3924 <__divsf3_pse+0x3a>
    3916:	e0 e8       	ldi	r30, 0x80	; 128
    3918:	30 d0       	rcall	.+96     	; 0x397a <__divsf3_pse+0x90>
    391a:	91 50       	subi	r25, 0x01	; 1
    391c:	50 40       	sbci	r21, 0x00	; 0
    391e:	e6 95       	lsr	r30
    3920:	00 1c       	adc	r0, r0
    3922:	ca f7       	brpl	.-14     	; 0x3916 <__divsf3_pse+0x2c>
    3924:	29 d0       	rcall	.+82     	; 0x3978 <__divsf3_pse+0x8e>
    3926:	fe 2f       	mov	r31, r30
    3928:	27 d0       	rcall	.+78     	; 0x3978 <__divsf3_pse+0x8e>
    392a:	66 0f       	add	r22, r22
    392c:	77 1f       	adc	r23, r23
    392e:	88 1f       	adc	r24, r24
    3930:	bb 1f       	adc	r27, r27
    3932:	26 17       	cp	r18, r22
    3934:	37 07       	cpc	r19, r23
    3936:	48 07       	cpc	r20, r24
    3938:	ab 07       	cpc	r26, r27
    393a:	b0 e8       	ldi	r27, 0x80	; 128
    393c:	09 f0       	breq	.+2      	; 0x3940 <__divsf3_pse+0x56>
    393e:	bb 0b       	sbc	r27, r27
    3940:	80 2d       	mov	r24, r0
    3942:	bf 01       	movw	r22, r30
    3944:	ff 27       	eor	r31, r31
    3946:	93 58       	subi	r25, 0x83	; 131
    3948:	5f 4f       	sbci	r21, 0xFF	; 255
    394a:	2a f0       	brmi	.+10     	; 0x3956 <__divsf3_pse+0x6c>
    394c:	9e 3f       	cpi	r25, 0xFE	; 254
    394e:	51 05       	cpc	r21, r1
    3950:	68 f0       	brcs	.+26     	; 0x396c <__divsf3_pse+0x82>
    3952:	92 c0       	rjmp	.+292    	; 0x3a78 <__fp_inf>
    3954:	dc c0       	rjmp	.+440    	; 0x3b0e <__fp_szero>
    3956:	5f 3f       	cpi	r21, 0xFF	; 255
    3958:	ec f3       	brlt	.-6      	; 0x3954 <__divsf3_pse+0x6a>
    395a:	98 3e       	cpi	r25, 0xE8	; 232
    395c:	dc f3       	brlt	.-10     	; 0x3954 <__divsf3_pse+0x6a>
    395e:	86 95       	lsr	r24
    3960:	77 95       	ror	r23
    3962:	67 95       	ror	r22
    3964:	b7 95       	ror	r27
    3966:	f7 95       	ror	r31
    3968:	9f 5f       	subi	r25, 0xFF	; 255
    396a:	c9 f7       	brne	.-14     	; 0x395e <__divsf3_pse+0x74>
    396c:	88 0f       	add	r24, r24
    396e:	91 1d       	adc	r25, r1
    3970:	96 95       	lsr	r25
    3972:	87 95       	ror	r24
    3974:	97 f9       	bld	r25, 7
    3976:	08 95       	ret
    3978:	e1 e0       	ldi	r30, 0x01	; 1
    397a:	66 0f       	add	r22, r22
    397c:	77 1f       	adc	r23, r23
    397e:	88 1f       	adc	r24, r24
    3980:	bb 1f       	adc	r27, r27
    3982:	62 17       	cp	r22, r18
    3984:	73 07       	cpc	r23, r19
    3986:	84 07       	cpc	r24, r20
    3988:	ba 07       	cpc	r27, r26
    398a:	20 f0       	brcs	.+8      	; 0x3994 <__divsf3_pse+0xaa>
    398c:	62 1b       	sub	r22, r18
    398e:	73 0b       	sbc	r23, r19
    3990:	84 0b       	sbc	r24, r20
    3992:	ba 0b       	sbc	r27, r26
    3994:	ee 1f       	adc	r30, r30
    3996:	88 f7       	brcc	.-30     	; 0x397a <__divsf3_pse+0x90>
    3998:	e0 95       	com	r30
    399a:	08 95       	ret

0000399c <__fixsfsi>:
    399c:	04 d0       	rcall	.+8      	; 0x39a6 <__fixunssfsi>
    399e:	68 94       	set
    39a0:	b1 11       	cpse	r27, r1
    39a2:	b5 c0       	rjmp	.+362    	; 0x3b0e <__fp_szero>
    39a4:	08 95       	ret

000039a6 <__fixunssfsi>:
    39a6:	98 d0       	rcall	.+304    	; 0x3ad8 <__fp_splitA>
    39a8:	88 f0       	brcs	.+34     	; 0x39cc <__fixunssfsi+0x26>
    39aa:	9f 57       	subi	r25, 0x7F	; 127
    39ac:	90 f0       	brcs	.+36     	; 0x39d2 <__fixunssfsi+0x2c>
    39ae:	b9 2f       	mov	r27, r25
    39b0:	99 27       	eor	r25, r25
    39b2:	b7 51       	subi	r27, 0x17	; 23
    39b4:	a0 f0       	brcs	.+40     	; 0x39de <__fixunssfsi+0x38>
    39b6:	d1 f0       	breq	.+52     	; 0x39ec <__fixunssfsi+0x46>
    39b8:	66 0f       	add	r22, r22
    39ba:	77 1f       	adc	r23, r23
    39bc:	88 1f       	adc	r24, r24
    39be:	99 1f       	adc	r25, r25
    39c0:	1a f0       	brmi	.+6      	; 0x39c8 <__fixunssfsi+0x22>
    39c2:	ba 95       	dec	r27
    39c4:	c9 f7       	brne	.-14     	; 0x39b8 <__fixunssfsi+0x12>
    39c6:	12 c0       	rjmp	.+36     	; 0x39ec <__fixunssfsi+0x46>
    39c8:	b1 30       	cpi	r27, 0x01	; 1
    39ca:	81 f0       	breq	.+32     	; 0x39ec <__fixunssfsi+0x46>
    39cc:	9f d0       	rcall	.+318    	; 0x3b0c <__fp_zero>
    39ce:	b1 e0       	ldi	r27, 0x01	; 1
    39d0:	08 95       	ret
    39d2:	9c c0       	rjmp	.+312    	; 0x3b0c <__fp_zero>
    39d4:	67 2f       	mov	r22, r23
    39d6:	78 2f       	mov	r23, r24
    39d8:	88 27       	eor	r24, r24
    39da:	b8 5f       	subi	r27, 0xF8	; 248
    39dc:	39 f0       	breq	.+14     	; 0x39ec <__fixunssfsi+0x46>
    39de:	b9 3f       	cpi	r27, 0xF9	; 249
    39e0:	cc f3       	brlt	.-14     	; 0x39d4 <__fixunssfsi+0x2e>
    39e2:	86 95       	lsr	r24
    39e4:	77 95       	ror	r23
    39e6:	67 95       	ror	r22
    39e8:	b3 95       	inc	r27
    39ea:	d9 f7       	brne	.-10     	; 0x39e2 <__fixunssfsi+0x3c>
    39ec:	3e f4       	brtc	.+14     	; 0x39fc <__fixunssfsi+0x56>
    39ee:	90 95       	com	r25
    39f0:	80 95       	com	r24
    39f2:	70 95       	com	r23
    39f4:	61 95       	neg	r22
    39f6:	7f 4f       	sbci	r23, 0xFF	; 255
    39f8:	8f 4f       	sbci	r24, 0xFF	; 255
    39fa:	9f 4f       	sbci	r25, 0xFF	; 255
    39fc:	08 95       	ret

000039fe <__floatunsisf>:
    39fe:	e8 94       	clt
    3a00:	09 c0       	rjmp	.+18     	; 0x3a14 <__floatsisf+0x12>

00003a02 <__floatsisf>:
    3a02:	97 fb       	bst	r25, 7
    3a04:	3e f4       	brtc	.+14     	; 0x3a14 <__floatsisf+0x12>
    3a06:	90 95       	com	r25
    3a08:	80 95       	com	r24
    3a0a:	70 95       	com	r23
    3a0c:	61 95       	neg	r22
    3a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a10:	8f 4f       	sbci	r24, 0xFF	; 255
    3a12:	9f 4f       	sbci	r25, 0xFF	; 255
    3a14:	99 23       	and	r25, r25
    3a16:	a9 f0       	breq	.+42     	; 0x3a42 <__floatsisf+0x40>
    3a18:	f9 2f       	mov	r31, r25
    3a1a:	96 e9       	ldi	r25, 0x96	; 150
    3a1c:	bb 27       	eor	r27, r27
    3a1e:	93 95       	inc	r25
    3a20:	f6 95       	lsr	r31
    3a22:	87 95       	ror	r24
    3a24:	77 95       	ror	r23
    3a26:	67 95       	ror	r22
    3a28:	b7 95       	ror	r27
    3a2a:	f1 11       	cpse	r31, r1
    3a2c:	f8 cf       	rjmp	.-16     	; 0x3a1e <__floatsisf+0x1c>
    3a2e:	fa f4       	brpl	.+62     	; 0x3a6e <__floatsisf+0x6c>
    3a30:	bb 0f       	add	r27, r27
    3a32:	11 f4       	brne	.+4      	; 0x3a38 <__floatsisf+0x36>
    3a34:	60 ff       	sbrs	r22, 0
    3a36:	1b c0       	rjmp	.+54     	; 0x3a6e <__floatsisf+0x6c>
    3a38:	6f 5f       	subi	r22, 0xFF	; 255
    3a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a3c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a40:	16 c0       	rjmp	.+44     	; 0x3a6e <__floatsisf+0x6c>
    3a42:	88 23       	and	r24, r24
    3a44:	11 f0       	breq	.+4      	; 0x3a4a <__floatsisf+0x48>
    3a46:	96 e9       	ldi	r25, 0x96	; 150
    3a48:	11 c0       	rjmp	.+34     	; 0x3a6c <__floatsisf+0x6a>
    3a4a:	77 23       	and	r23, r23
    3a4c:	21 f0       	breq	.+8      	; 0x3a56 <__floatsisf+0x54>
    3a4e:	9e e8       	ldi	r25, 0x8E	; 142
    3a50:	87 2f       	mov	r24, r23
    3a52:	76 2f       	mov	r23, r22
    3a54:	05 c0       	rjmp	.+10     	; 0x3a60 <__floatsisf+0x5e>
    3a56:	66 23       	and	r22, r22
    3a58:	71 f0       	breq	.+28     	; 0x3a76 <__floatsisf+0x74>
    3a5a:	96 e8       	ldi	r25, 0x86	; 134
    3a5c:	86 2f       	mov	r24, r22
    3a5e:	70 e0       	ldi	r23, 0x00	; 0
    3a60:	60 e0       	ldi	r22, 0x00	; 0
    3a62:	2a f0       	brmi	.+10     	; 0x3a6e <__floatsisf+0x6c>
    3a64:	9a 95       	dec	r25
    3a66:	66 0f       	add	r22, r22
    3a68:	77 1f       	adc	r23, r23
    3a6a:	88 1f       	adc	r24, r24
    3a6c:	da f7       	brpl	.-10     	; 0x3a64 <__floatsisf+0x62>
    3a6e:	88 0f       	add	r24, r24
    3a70:	96 95       	lsr	r25
    3a72:	87 95       	ror	r24
    3a74:	97 f9       	bld	r25, 7
    3a76:	08 95       	ret

00003a78 <__fp_inf>:
    3a78:	97 f9       	bld	r25, 7
    3a7a:	9f 67       	ori	r25, 0x7F	; 127
    3a7c:	80 e8       	ldi	r24, 0x80	; 128
    3a7e:	70 e0       	ldi	r23, 0x00	; 0
    3a80:	60 e0       	ldi	r22, 0x00	; 0
    3a82:	08 95       	ret

00003a84 <__fp_nan>:
    3a84:	9f ef       	ldi	r25, 0xFF	; 255
    3a86:	80 ec       	ldi	r24, 0xC0	; 192
    3a88:	08 95       	ret

00003a8a <__fp_pscA>:
    3a8a:	00 24       	eor	r0, r0
    3a8c:	0a 94       	dec	r0
    3a8e:	16 16       	cp	r1, r22
    3a90:	17 06       	cpc	r1, r23
    3a92:	18 06       	cpc	r1, r24
    3a94:	09 06       	cpc	r0, r25
    3a96:	08 95       	ret

00003a98 <__fp_pscB>:
    3a98:	00 24       	eor	r0, r0
    3a9a:	0a 94       	dec	r0
    3a9c:	12 16       	cp	r1, r18
    3a9e:	13 06       	cpc	r1, r19
    3aa0:	14 06       	cpc	r1, r20
    3aa2:	05 06       	cpc	r0, r21
    3aa4:	08 95       	ret

00003aa6 <__fp_round>:
    3aa6:	09 2e       	mov	r0, r25
    3aa8:	03 94       	inc	r0
    3aaa:	00 0c       	add	r0, r0
    3aac:	11 f4       	brne	.+4      	; 0x3ab2 <__fp_round+0xc>
    3aae:	88 23       	and	r24, r24
    3ab0:	52 f0       	brmi	.+20     	; 0x3ac6 <__fp_round+0x20>
    3ab2:	bb 0f       	add	r27, r27
    3ab4:	40 f4       	brcc	.+16     	; 0x3ac6 <__fp_round+0x20>
    3ab6:	bf 2b       	or	r27, r31
    3ab8:	11 f4       	brne	.+4      	; 0x3abe <__fp_round+0x18>
    3aba:	60 ff       	sbrs	r22, 0
    3abc:	04 c0       	rjmp	.+8      	; 0x3ac6 <__fp_round+0x20>
    3abe:	6f 5f       	subi	r22, 0xFF	; 255
    3ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ac2:	8f 4f       	sbci	r24, 0xFF	; 255
    3ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac6:	08 95       	ret

00003ac8 <__fp_split3>:
    3ac8:	57 fd       	sbrc	r21, 7
    3aca:	90 58       	subi	r25, 0x80	; 128
    3acc:	44 0f       	add	r20, r20
    3ace:	55 1f       	adc	r21, r21
    3ad0:	59 f0       	breq	.+22     	; 0x3ae8 <__fp_splitA+0x10>
    3ad2:	5f 3f       	cpi	r21, 0xFF	; 255
    3ad4:	71 f0       	breq	.+28     	; 0x3af2 <__fp_splitA+0x1a>
    3ad6:	47 95       	ror	r20

00003ad8 <__fp_splitA>:
    3ad8:	88 0f       	add	r24, r24
    3ada:	97 fb       	bst	r25, 7
    3adc:	99 1f       	adc	r25, r25
    3ade:	61 f0       	breq	.+24     	; 0x3af8 <__fp_splitA+0x20>
    3ae0:	9f 3f       	cpi	r25, 0xFF	; 255
    3ae2:	79 f0       	breq	.+30     	; 0x3b02 <__fp_splitA+0x2a>
    3ae4:	87 95       	ror	r24
    3ae6:	08 95       	ret
    3ae8:	12 16       	cp	r1, r18
    3aea:	13 06       	cpc	r1, r19
    3aec:	14 06       	cpc	r1, r20
    3aee:	55 1f       	adc	r21, r21
    3af0:	f2 cf       	rjmp	.-28     	; 0x3ad6 <__fp_split3+0xe>
    3af2:	46 95       	lsr	r20
    3af4:	f1 df       	rcall	.-30     	; 0x3ad8 <__fp_splitA>
    3af6:	08 c0       	rjmp	.+16     	; 0x3b08 <__fp_splitA+0x30>
    3af8:	16 16       	cp	r1, r22
    3afa:	17 06       	cpc	r1, r23
    3afc:	18 06       	cpc	r1, r24
    3afe:	99 1f       	adc	r25, r25
    3b00:	f1 cf       	rjmp	.-30     	; 0x3ae4 <__fp_splitA+0xc>
    3b02:	86 95       	lsr	r24
    3b04:	71 05       	cpc	r23, r1
    3b06:	61 05       	cpc	r22, r1
    3b08:	08 94       	sec
    3b0a:	08 95       	ret

00003b0c <__fp_zero>:
    3b0c:	e8 94       	clt

00003b0e <__fp_szero>:
    3b0e:	bb 27       	eor	r27, r27
    3b10:	66 27       	eor	r22, r22
    3b12:	77 27       	eor	r23, r23
    3b14:	cb 01       	movw	r24, r22
    3b16:	97 f9       	bld	r25, 7
    3b18:	08 95       	ret

00003b1a <__divmodhi4>:
    3b1a:	97 fb       	bst	r25, 7
    3b1c:	07 2e       	mov	r0, r23
    3b1e:	16 f4       	brtc	.+4      	; 0x3b24 <__divmodhi4+0xa>
    3b20:	00 94       	com	r0
    3b22:	06 d0       	rcall	.+12     	; 0x3b30 <__divmodhi4_neg1>
    3b24:	77 fd       	sbrc	r23, 7
    3b26:	08 d0       	rcall	.+16     	; 0x3b38 <__divmodhi4_neg2>
    3b28:	3e d0       	rcall	.+124    	; 0x3ba6 <__udivmodhi4>
    3b2a:	07 fc       	sbrc	r0, 7
    3b2c:	05 d0       	rcall	.+10     	; 0x3b38 <__divmodhi4_neg2>
    3b2e:	3e f4       	brtc	.+14     	; 0x3b3e <__divmodhi4_exit>

00003b30 <__divmodhi4_neg1>:
    3b30:	90 95       	com	r25
    3b32:	81 95       	neg	r24
    3b34:	9f 4f       	sbci	r25, 0xFF	; 255
    3b36:	08 95       	ret

00003b38 <__divmodhi4_neg2>:
    3b38:	70 95       	com	r23
    3b3a:	61 95       	neg	r22
    3b3c:	7f 4f       	sbci	r23, 0xFF	; 255

00003b3e <__divmodhi4_exit>:
    3b3e:	08 95       	ret

00003b40 <__divmodsi4>:
    3b40:	05 2e       	mov	r0, r21
    3b42:	97 fb       	bst	r25, 7
    3b44:	16 f4       	brtc	.+4      	; 0x3b4a <__divmodsi4+0xa>
    3b46:	00 94       	com	r0
    3b48:	0f d0       	rcall	.+30     	; 0x3b68 <__negsi2>
    3b4a:	57 fd       	sbrc	r21, 7
    3b4c:	05 d0       	rcall	.+10     	; 0x3b58 <__divmodsi4_neg2>
    3b4e:	3f d0       	rcall	.+126    	; 0x3bce <__udivmodsi4>
    3b50:	07 fc       	sbrc	r0, 7
    3b52:	02 d0       	rcall	.+4      	; 0x3b58 <__divmodsi4_neg2>
    3b54:	46 f4       	brtc	.+16     	; 0x3b66 <__divmodsi4_exit>
    3b56:	08 c0       	rjmp	.+16     	; 0x3b68 <__negsi2>

00003b58 <__divmodsi4_neg2>:
    3b58:	50 95       	com	r21
    3b5a:	40 95       	com	r20
    3b5c:	30 95       	com	r19
    3b5e:	21 95       	neg	r18
    3b60:	3f 4f       	sbci	r19, 0xFF	; 255
    3b62:	4f 4f       	sbci	r20, 0xFF	; 255
    3b64:	5f 4f       	sbci	r21, 0xFF	; 255

00003b66 <__divmodsi4_exit>:
    3b66:	08 95       	ret

00003b68 <__negsi2>:
    3b68:	90 95       	com	r25
    3b6a:	80 95       	com	r24
    3b6c:	70 95       	com	r23
    3b6e:	61 95       	neg	r22
    3b70:	7f 4f       	sbci	r23, 0xFF	; 255
    3b72:	8f 4f       	sbci	r24, 0xFF	; 255
    3b74:	9f 4f       	sbci	r25, 0xFF	; 255
    3b76:	08 95       	ret

00003b78 <__tablejump2__>:
    3b78:	ee 0f       	add	r30, r30
    3b7a:	ff 1f       	adc	r31, r31
    3b7c:	88 1f       	adc	r24, r24
    3b7e:	8b bf       	out	0x3b, r24	; 59
    3b80:	07 90       	elpm	r0, Z+
    3b82:	f6 91       	elpm	r31, Z
    3b84:	e0 2d       	mov	r30, r0
    3b86:	19 94       	eijmp

00003b88 <__umulhisi3>:
    3b88:	a2 9f       	mul	r26, r18
    3b8a:	b0 01       	movw	r22, r0
    3b8c:	b3 9f       	mul	r27, r19
    3b8e:	c0 01       	movw	r24, r0
    3b90:	a3 9f       	mul	r26, r19
    3b92:	70 0d       	add	r23, r0
    3b94:	81 1d       	adc	r24, r1
    3b96:	11 24       	eor	r1, r1
    3b98:	91 1d       	adc	r25, r1
    3b9a:	b2 9f       	mul	r27, r18
    3b9c:	70 0d       	add	r23, r0
    3b9e:	81 1d       	adc	r24, r1
    3ba0:	11 24       	eor	r1, r1
    3ba2:	91 1d       	adc	r25, r1
    3ba4:	08 95       	ret

00003ba6 <__udivmodhi4>:
    3ba6:	aa 1b       	sub	r26, r26
    3ba8:	bb 1b       	sub	r27, r27
    3baa:	51 e1       	ldi	r21, 0x11	; 17
    3bac:	07 c0       	rjmp	.+14     	; 0x3bbc <__udivmodhi4_ep>

00003bae <__udivmodhi4_loop>:
    3bae:	aa 1f       	adc	r26, r26
    3bb0:	bb 1f       	adc	r27, r27
    3bb2:	a6 17       	cp	r26, r22
    3bb4:	b7 07       	cpc	r27, r23
    3bb6:	10 f0       	brcs	.+4      	; 0x3bbc <__udivmodhi4_ep>
    3bb8:	a6 1b       	sub	r26, r22
    3bba:	b7 0b       	sbc	r27, r23

00003bbc <__udivmodhi4_ep>:
    3bbc:	88 1f       	adc	r24, r24
    3bbe:	99 1f       	adc	r25, r25
    3bc0:	5a 95       	dec	r21
    3bc2:	a9 f7       	brne	.-22     	; 0x3bae <__udivmodhi4_loop>
    3bc4:	80 95       	com	r24
    3bc6:	90 95       	com	r25
    3bc8:	bc 01       	movw	r22, r24
    3bca:	cd 01       	movw	r24, r26
    3bcc:	08 95       	ret

00003bce <__udivmodsi4>:
    3bce:	a1 e2       	ldi	r26, 0x21	; 33
    3bd0:	1a 2e       	mov	r1, r26
    3bd2:	aa 1b       	sub	r26, r26
    3bd4:	bb 1b       	sub	r27, r27
    3bd6:	fd 01       	movw	r30, r26
    3bd8:	0d c0       	rjmp	.+26     	; 0x3bf4 <__udivmodsi4_ep>

00003bda <__udivmodsi4_loop>:
    3bda:	aa 1f       	adc	r26, r26
    3bdc:	bb 1f       	adc	r27, r27
    3bde:	ee 1f       	adc	r30, r30
    3be0:	ff 1f       	adc	r31, r31
    3be2:	a2 17       	cp	r26, r18
    3be4:	b3 07       	cpc	r27, r19
    3be6:	e4 07       	cpc	r30, r20
    3be8:	f5 07       	cpc	r31, r21
    3bea:	20 f0       	brcs	.+8      	; 0x3bf4 <__udivmodsi4_ep>
    3bec:	a2 1b       	sub	r26, r18
    3bee:	b3 0b       	sbc	r27, r19
    3bf0:	e4 0b       	sbc	r30, r20
    3bf2:	f5 0b       	sbc	r31, r21

00003bf4 <__udivmodsi4_ep>:
    3bf4:	66 1f       	adc	r22, r22
    3bf6:	77 1f       	adc	r23, r23
    3bf8:	88 1f       	adc	r24, r24
    3bfa:	99 1f       	adc	r25, r25
    3bfc:	1a 94       	dec	r1
    3bfe:	69 f7       	brne	.-38     	; 0x3bda <__udivmodsi4_loop>
    3c00:	60 95       	com	r22
    3c02:	70 95       	com	r23
    3c04:	80 95       	com	r24
    3c06:	90 95       	com	r25
    3c08:	9b 01       	movw	r18, r22
    3c0a:	ac 01       	movw	r20, r24
    3c0c:	bd 01       	movw	r22, r26
    3c0e:	cf 01       	movw	r24, r30
    3c10:	08 95       	ret

00003c12 <eeprom_read_block>:
    3c12:	dc 01       	movw	r26, r24
    3c14:	cb 01       	movw	r24, r22

00003c16 <eeprom_read_blraw>:
    3c16:	fc 01       	movw	r30, r24
    3c18:	f9 99       	sbic	0x1f, 1	; 31
    3c1a:	fe cf       	rjmp	.-4      	; 0x3c18 <eeprom_read_blraw+0x2>
    3c1c:	06 c0       	rjmp	.+12     	; 0x3c2a <eeprom_read_blraw+0x14>
    3c1e:	f2 bd       	out	0x22, r31	; 34
    3c20:	e1 bd       	out	0x21, r30	; 33
    3c22:	f8 9a       	sbi	0x1f, 0	; 31
    3c24:	31 96       	adiw	r30, 0x01	; 1
    3c26:	00 b4       	in	r0, 0x20	; 32
    3c28:	0d 92       	st	X+, r0
    3c2a:	41 50       	subi	r20, 0x01	; 1
    3c2c:	50 40       	sbci	r21, 0x00	; 0
    3c2e:	b8 f7       	brcc	.-18     	; 0x3c1e <eeprom_read_blraw+0x8>
    3c30:	08 95       	ret

00003c32 <eeprom_read_byte>:
    3c32:	f9 99       	sbic	0x1f, 1	; 31
    3c34:	fe cf       	rjmp	.-4      	; 0x3c32 <eeprom_read_byte>
    3c36:	92 bd       	out	0x22, r25	; 34
    3c38:	81 bd       	out	0x21, r24	; 33
    3c3a:	f8 9a       	sbi	0x1f, 0	; 31
    3c3c:	99 27       	eor	r25, r25
    3c3e:	80 b5       	in	r24, 0x20	; 32
    3c40:	08 95       	ret

00003c42 <eeprom_write_block>:
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	02 c0       	rjmp	.+4      	; 0x3c4c <eeprom_write_block+0xa>
    3c48:	2d 91       	ld	r18, X+
    3c4a:	05 d0       	rcall	.+10     	; 0x3c56 <eeprom_write_r18>
    3c4c:	41 50       	subi	r20, 0x01	; 1
    3c4e:	50 40       	sbci	r21, 0x00	; 0
    3c50:	d8 f7       	brcc	.-10     	; 0x3c48 <eeprom_write_block+0x6>
    3c52:	08 95       	ret

00003c54 <eeprom_write_byte>:
    3c54:	26 2f       	mov	r18, r22

00003c56 <eeprom_write_r18>:
    3c56:	f9 99       	sbic	0x1f, 1	; 31
    3c58:	fe cf       	rjmp	.-4      	; 0x3c56 <eeprom_write_r18>
    3c5a:	1f ba       	out	0x1f, r1	; 31
    3c5c:	92 bd       	out	0x22, r25	; 34
    3c5e:	81 bd       	out	0x21, r24	; 33
    3c60:	20 bd       	out	0x20, r18	; 32
    3c62:	0f b6       	in	r0, 0x3f	; 63
    3c64:	f8 94       	cli
    3c66:	fa 9a       	sbi	0x1f, 2	; 31
    3c68:	f9 9a       	sbi	0x1f, 1	; 31
    3c6a:	0f be       	out	0x3f, r0	; 63
    3c6c:	01 96       	adiw	r24, 0x01	; 1
    3c6e:	08 95       	ret

00003c70 <_exit>:
    3c70:	f8 94       	cli

00003c72 <__stop_program>:
    3c72:	ff cf       	rjmp	.-2      	; 0x3c72 <__stop_program>
