
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f6  00800200  000040ce  00004162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000040ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000425  008003f6  008003f6  00004358  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004358  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  000043c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000802d  00000000  00000000  00004820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002168  00000000  00000000  0000c84d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003888  00000000  00000000  0000e9b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c6c  00000000  00000000  00012240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001611  00000000  00000000  00012eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000054bc  00000000  00000000  000144bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  00019979  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
       2:	00 00       	nop
       4:	12 c1       	rjmp	.+548    	; 0x22a <__bad_interrupt>
       6:	00 00       	nop
       8:	10 c1       	rjmp	.+544    	; 0x22a <__bad_interrupt>
       a:	00 00       	nop
       c:	25 c2       	rjmp	.+1098   	; 0x458 <__vector_3>
       e:	00 00       	nop
      10:	43 c2       	rjmp	.+1158   	; 0x498 <__vector_4>
      12:	00 00       	nop
      14:	61 c2       	rjmp	.+1218   	; 0x4d8 <__vector_5>
      16:	00 00       	nop
      18:	a8 c2       	rjmp	.+1360   	; 0x56a <__vector_6>
      1a:	00 00       	nop
      1c:	06 c1       	rjmp	.+524    	; 0x22a <__bad_interrupt>
      1e:	00 00       	nop
      20:	04 c1       	rjmp	.+520    	; 0x22a <__bad_interrupt>
      22:	00 00       	nop
      24:	02 c1       	rjmp	.+516    	; 0x22a <__bad_interrupt>
      26:	00 00       	nop
      28:	00 c1       	rjmp	.+512    	; 0x22a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fe c0       	rjmp	.+508    	; 0x22a <__bad_interrupt>
      2e:	00 00       	nop
      30:	fc c0       	rjmp	.+504    	; 0x22a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__vector_13>
      38:	f8 c0       	rjmp	.+496    	; 0x22a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__bad_interrupt>
      3e:	00 00       	nop
      40:	f4 c0       	rjmp	.+488    	; 0x22a <__bad_interrupt>
      42:	00 00       	nop
      44:	f2 c0       	rjmp	.+484    	; 0x22a <__bad_interrupt>
      46:	00 00       	nop
      48:	f0 c0       	rjmp	.+480    	; 0x22a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ee c0       	rjmp	.+476    	; 0x22a <__bad_interrupt>
      4e:	00 00       	nop
      50:	ec c0       	rjmp	.+472    	; 0x22a <__bad_interrupt>
      52:	00 00       	nop
      54:	ea c0       	rjmp	.+468    	; 0x22a <__bad_interrupt>
      56:	00 00       	nop
      58:	e8 c0       	rjmp	.+464    	; 0x22a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e6 c0       	rjmp	.+460    	; 0x22a <__bad_interrupt>
      5e:	00 00       	nop
      60:	e4 c0       	rjmp	.+456    	; 0x22a <__bad_interrupt>
      62:	00 00       	nop
      64:	e2 c0       	rjmp	.+452    	; 0x22a <__bad_interrupt>
      66:	00 00       	nop
      68:	e0 c0       	rjmp	.+448    	; 0x22a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__vector_27>
      70:	dc c0       	rjmp	.+440    	; 0x22a <__bad_interrupt>
      72:	00 00       	nop
      74:	da c0       	rjmp	.+436    	; 0x22a <__bad_interrupt>
      76:	00 00       	nop
      78:	d8 c0       	rjmp	.+432    	; 0x22a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d6 c0       	rjmp	.+428    	; 0x22a <__bad_interrupt>
      7e:	00 00       	nop
      80:	d4 c0       	rjmp	.+424    	; 0x22a <__bad_interrupt>
      82:	00 00       	nop
      84:	d2 c0       	rjmp	.+420    	; 0x22a <__bad_interrupt>
      86:	00 00       	nop
      88:	d0 c0       	rjmp	.+416    	; 0x22a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ce c0       	rjmp	.+412    	; 0x22a <__bad_interrupt>
      8e:	00 00       	nop
      90:	cc c0       	rjmp	.+408    	; 0x22a <__bad_interrupt>
      92:	00 00       	nop
      94:	ca c0       	rjmp	.+404    	; 0x22a <__bad_interrupt>
      96:	00 00       	nop
      98:	c8 c0       	rjmp	.+400    	; 0x22a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c6 c0       	rjmp	.+396    	; 0x22a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c4 c0       	rjmp	.+392    	; 0x22a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c2 c0       	rjmp	.+388    	; 0x22a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c0 c0       	rjmp	.+384    	; 0x22a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	be c0       	rjmp	.+380    	; 0x22a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bc c0       	rjmp	.+376    	; 0x22a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ba c0       	rjmp	.+372    	; 0x22a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b8 c0       	rjmp	.+368    	; 0x22a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b6 c0       	rjmp	.+364    	; 0x22a <__bad_interrupt>
      be:	00 00       	nop
      c0:	b4 c0       	rjmp	.+360    	; 0x22a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b2 c0       	rjmp	.+356    	; 0x22a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b0 c0       	rjmp	.+352    	; 0x22a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ae c0       	rjmp	.+348    	; 0x22a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ac c0       	rjmp	.+344    	; 0x22a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	aa c0       	rjmp	.+340    	; 0x22a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__vector_54>
      dc:	a6 c0       	rjmp	.+332    	; 0x22a <__bad_interrupt>
      de:	00 00       	nop
      e0:	a4 c0       	rjmp	.+328    	; 0x22a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	69 03       	fmul	r22, r17
      e6:	4e 05       	cpc	r20, r14
      e8:	4e 05       	cpc	r20, r14
      ea:	4e 05       	cpc	r20, r14
      ec:	4e 05       	cpc	r20, r14
      ee:	4e 05       	cpc	r20, r14
      f0:	4e 05       	cpc	r20, r14
      f2:	4e 05       	cpc	r20, r14
      f4:	4e 05       	cpc	r20, r14
      f6:	4e 05       	cpc	r20, r14
      f8:	4e 05       	cpc	r20, r14
      fa:	4e 05       	cpc	r20, r14
      fc:	4e 05       	cpc	r20, r14
      fe:	4e 05       	cpc	r20, r14
     100:	4e 05       	cpc	r20, r14
     102:	4e 05       	cpc	r20, r14
     104:	4e 05       	cpc	r20, r14
     106:	80 03       	fmuls	r16, r16
     108:	9d 03       	fmulsu	r17, r21
     10a:	c4 03       	fmuls	r20, r20
     10c:	4e 05       	cpc	r20, r14
     10e:	4e 05       	cpc	r20, r14
     110:	4e 05       	cpc	r20, r14
     112:	4e 05       	cpc	r20, r14
     114:	4e 05       	cpc	r20, r14
     116:	88 03       	fmulsu	r16, r16
     118:	a5 03       	fmuls	r18, r21
     11a:	cc 03       	fmulsu	r20, r20
     11c:	4e 05       	cpc	r20, r14
     11e:	4e 05       	cpc	r20, r14
     120:	4e 05       	cpc	r20, r14
     122:	4e 05       	cpc	r20, r14
     124:	4e 05       	cpc	r20, r14
     126:	e7 03       	fmuls	r22, r23
     128:	1c 04       	cpc	r1, r12
     12a:	30 04       	cpc	r3, r0
     12c:	65 04       	cpc	r6, r5
     12e:	cc 04       	cpc	r12, r12
     130:	4e 05       	cpc	r20, r14
     132:	4e 05       	cpc	r20, r14
     134:	4e 05       	cpc	r20, r14
     136:	ef 03       	fmulsu	r22, r23
     138:	24 04       	cpc	r2, r4
     13a:	38 04       	cpc	r3, r8
     13c:	6d 04       	cpc	r6, r13
     13e:	d4 04       	cpc	r13, r4
     140:	4e 05       	cpc	r20, r14
     142:	4e 05       	cpc	r20, r14
     144:	4e 05       	cpc	r20, r14
     146:	0e 05       	cpc	r16, r14
     148:	28 05       	cpc	r18, r8
     14a:	47 05       	cpc	r20, r7
     14c:	4e 05       	cpc	r20, r14
     14e:	4e 05       	cpc	r20, r14
     150:	4e 05       	cpc	r20, r14
     152:	4e 05       	cpc	r20, r14
     154:	4e 05       	cpc	r20, r14
     156:	16 05       	cpc	r17, r6
     158:	30 05       	cpc	r19, r0
     15a:	f6 0c       	add	r15, r6
     15c:	bf 0f       	add	r27, r31
     15e:	bf 0f       	add	r27, r31
     160:	bf 0f       	add	r27, r31
     162:	bf 0f       	add	r27, r31
     164:	bf 0f       	add	r27, r31
     166:	bf 0f       	add	r27, r31
     168:	bf 0f       	add	r27, r31
     16a:	bf 0f       	add	r27, r31
     16c:	bf 0f       	add	r27, r31
     16e:	bf 0f       	add	r27, r31
     170:	bf 0f       	add	r27, r31
     172:	bf 0f       	add	r27, r31
     174:	bf 0f       	add	r27, r31
     176:	bf 0f       	add	r27, r31
     178:	bf 0f       	add	r27, r31
     17a:	0c 0d       	add	r16, r12
     17c:	26 0d       	add	r18, r6
     17e:	4c 0d       	add	r20, r12
     180:	7b 0d       	add	r23, r11
     182:	bf 0f       	add	r27, r31
     184:	bf 0f       	add	r27, r31
     186:	bf 0f       	add	r27, r31
     188:	bf 0f       	add	r27, r31
     18a:	bf 0f       	add	r27, r31
     18c:	43 0d       	add	r20, r3
     18e:	69 0d       	add	r22, r9
     190:	98 0d       	add	r25, r8
     192:	bf 0f       	add	r27, r31
     194:	bf 0f       	add	r27, r31
     196:	bf 0f       	add	r27, r31
     198:	bf 0f       	add	r27, r31
     19a:	a9 0d       	add	r26, r9
     19c:	c3 0d       	add	r28, r3
     19e:	fc 0d       	add	r31, r12
     1a0:	48 0e       	add	r4, r24
     1a2:	7b 0e       	add	r7, r27
     1a4:	e5 0e       	add	r14, r21
     1a6:	bf 0f       	add	r27, r31
     1a8:	bf 0f       	add	r27, r31
     1aa:	bf 0f       	add	r27, r31
     1ac:	e0 0d       	add	r30, r0
     1ae:	19 0e       	add	r1, r25
     1b0:	65 0e       	add	r6, r21
     1b2:	98 0e       	add	r9, r24
     1b4:	02 0f       	add	r16, r18
     1b6:	bf 0f       	add	r27, r31
     1b8:	bf 0f       	add	r27, r31
     1ba:	2b 0f       	add	r18, r27
     1bc:	45 0f       	add	r20, r21
     1be:	74 0f       	add	r23, r20
     1c0:	a3 0f       	add	r26, r19
     1c2:	bf 0f       	add	r27, r31
     1c4:	bf 0f       	add	r27, r31
     1c6:	bf 0f       	add	r27, r31
     1c8:	bf 0f       	add	r27, r31
     1ca:	bf 0f       	add	r27, r31
     1cc:	62 0f       	add	r22, r18
     1ce:	91 0f       	add	r25, r17
     1d0:	da 15       	cp	r29, r10
     1d2:	dd 15       	cp	r29, r13
     1d4:	e0 15       	cp	r30, r0
     1d6:	e3 15       	cp	r30, r3
     1d8:	e6 15       	cp	r30, r6
     1da:	e9 15       	cp	r30, r9
     1dc:	ec 15       	cp	r30, r12
     1de:	ef 15       	cp	r30, r15
     1e0:	f2 15       	cp	r31, r2
     1e2:	f5 15       	cp	r31, r5
     1e4:	f8 15       	cp	r31, r8
     1e6:	fb 15       	cp	r31, r11

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d1 e2       	ldi	r29, 0x21	; 33
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	13 e0       	ldi	r17, 0x03	; 3
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b2 e0       	ldi	r27, 0x02	; 2
     1fe:	ee ec       	ldi	r30, 0xCE	; 206
     200:	f0 e4       	ldi	r31, 0x40	; 64
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a6 3f       	cpi	r26, 0xF6	; 246
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	28 e0       	ldi	r18, 0x08	; 8
     214:	a6 ef       	ldi	r26, 0xF6	; 246
     216:	b3 e0       	ldi	r27, 0x03	; 3
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	ab 31       	cpi	r26, 0x1B	; 27
     21e:	b2 07       	cpc	r27, r18
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 d5 09 	call	0x13aa	; 0x13aa <main>
     226:	0c 94 65 20 	jmp	0x40ca	; 0x40ca <_exit>

0000022a <__bad_interrupt>:
     22a:	ea ce       	rjmp	.-556    	; 0x0 <__vectors>

0000022c <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     22c:	8f ef       	ldi	r24, 0xFF	; 255
     22e:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     230:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons and Encoder buttons
	PORTB = 0b01111111; 
     234:	8f e7       	ldi	r24, 0x7F	; 127
     236:	85 b9       	out	0x05, r24	; 5
     238:	08 95       	ret

0000023a <listenTrigButtons>:

}

void listenTrigButtons(Pattern *buttonCurrentPattern, Globals *currentGlobals)
{
     23a:	cf 92       	push	r12
     23c:	df 92       	push	r13
     23e:	ef 92       	push	r14
     240:	ff 92       	push	r15
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	6c 01       	movw	r12, r24
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     24a:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     24e:	20 95       	com	r18
     250:	20 93 0b 04 	sts	0x040B, r18	; 0x80040b <buttonsCurrentCycle>
	(currentGlobals->currentTrigButtons) = (buttonsCurrentCycle << 8) | (PINA^255);
     254:	90 b1       	in	r25, 0x00	; 0
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	32 2f       	mov	r19, r18
     25a:	22 27       	eor	r18, r18
     25c:	90 95       	com	r25
     25e:	29 2b       	or	r18, r25
     260:	db 01       	movw	r26, r22
     262:	2d 93       	st	X+, r18
     264:	3c 93       	st	X, r19
	if(currentGlobals->currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     266:	40 91 f6 03 	lds	r20, 0x03F6	; 0x8003f6 <__data_end>
     26a:	50 91 f7 03 	lds	r21, 0x03F7	; 0x8003f7 <__data_end+0x1>
     26e:	24 17       	cp	r18, r20
     270:	35 07       	cpc	r19, r21
     272:	09 f4       	brne	.+2      	; 0x276 <listenTrigButtons+0x3c>
     274:	43 c0       	rjmp	.+134    	; 0x2fc <listenTrigButtons+0xc2>
     276:	7b 01       	movw	r14, r22
	{
		lastFullBits = currentGlobals->currentTrigButtons;
     278:	30 93 f7 03 	sts	0x03F7, r19	; 0x8003f7 <__data_end+0x1>
     27c:	20 93 f6 03 	sts	0x03F6, r18	; 0x8003f6 <__data_end>
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
     280:	fb 01       	movw	r30, r22
     282:	00 81       	ld	r16, Z
     284:	11 81       	ldd	r17, Z+1	; 0x01
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     286:	c0 e0       	ldi	r28, 0x00	; 0
		{
			currentTrig = (fullBitsParse&1);
     288:	90 2f       	mov	r25, r16
     28a:	91 70       	andi	r25, 0x01	; 1
     28c:	90 93 0c 04 	sts	0x040C, r25	; 0x80040c <currentTrig>
			if(currentTrig)
     290:	99 23       	and	r25, r25
     292:	79 f1       	breq	.+94     	; 0x2f2 <listenTrigButtons+0xb8>
			{
				uint8_t encoderAstate = currentGlobals->menuState >> 4;
				switch (encoderAstate)
     294:	d7 01       	movw	r26, r14
     296:	1a 96       	adiw	r26, 0x0a	; 10
     298:	9c 91       	ld	r25, X
     29a:	92 95       	swap	r25
     29c:	9f 70       	andi	r25, 0x0F	; 15
     29e:	91 30       	cpi	r25, 0x01	; 1
     2a0:	51 f0       	breq	.+20     	; 0x2b6 <listenTrigButtons+0x7c>
     2a2:	18 f0       	brcs	.+6      	; 0x2aa <listenTrigButtons+0x70>
     2a4:	94 30       	cpi	r25, 0x04	; 4
     2a6:	28 f5       	brcc	.+74     	; 0x2f2 <listenTrigButtons+0xb8>
     2a8:	1a c0       	rjmp	.+52     	; 0x2de <listenTrigButtons+0xa4>
				{
	
					//for "performance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
					case 0: //performance mode
					//we trigger a sound here based on the location of bc
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     2aa:	4c 2f       	mov	r20, r28
     2ac:	b7 01       	movw	r22, r14
     2ae:	c6 01       	movw	r24, r12
     2b0:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <playTrack>
					break;
     2b4:	1e c0       	rjmp	.+60     	; 0x2f2 <listenTrigButtons+0xb8>

					case 1:
					buttonCurrentPattern->trackSequence[currentGlobals->currentStep] ^= currentGlobals->currentTrigButtons;
     2b6:	d7 01       	movw	r26, r14
     2b8:	18 96       	adiw	r26, 0x08	; 8
     2ba:	ec 91       	ld	r30, X
     2bc:	18 97       	sbiw	r26, 0x08	; 8
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	ee 0f       	add	r30, r30
     2c2:	ff 1f       	adc	r31, r31
     2c4:	ec 0d       	add	r30, r12
     2c6:	fd 1d       	adc	r31, r13
     2c8:	e5 50       	subi	r30, 0x05	; 5
     2ca:	ff 4f       	sbci	r31, 0xFF	; 255
     2cc:	20 81       	ld	r18, Z
     2ce:	31 81       	ldd	r19, Z+1	; 0x01
     2d0:	8d 91       	ld	r24, X+
     2d2:	9c 91       	ld	r25, X
     2d4:	82 27       	eor	r24, r18
     2d6:	93 27       	eor	r25, r19
     2d8:	91 83       	std	Z+1, r25	; 0x01
     2da:	80 83       	st	Z, r24
					//turn on step number, or turn off step number.
					//step sequencer mode.
					break;
     2dc:	0a c0       	rjmp	.+20     	; 0x2f2 <listenTrigButtons+0xb8>
					//we want this functionality for both case 2 and case 3
					case 2:
					case 3:;
					//select track for sample assignment
					//uint16_t currentSample = (buttonCurrentPattern->trackSampleMSB[bc]<<8)|(buttonCurrentPattern->trackSampleLSB[bc]);
					currentGlobals->currentTrack = bc;
     2de:	f7 01       	movw	r30, r14
     2e0:	c1 87       	std	Z+9, r28	; 0x09
					currentGlobals->valueChangeFlag |=(1<<triggerChange);
     2e2:	86 85       	ldd	r24, Z+14	; 0x0e
     2e4:	82 60       	ori	r24, 0x02	; 2
     2e6:	86 87       	std	Z+14, r24	; 0x0e
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     2e8:	4c 2f       	mov	r20, r28
     2ea:	b7 01       	movw	r22, r14
     2ec:	c6 01       	movw	r24, r12
     2ee:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <playTrack>
					default:
					//this should be the same as case 0;
					break;
				}
			}
			fullBitsParse = fullBitsParse>>1;
     2f2:	16 95       	lsr	r17
     2f4:	07 95       	ror	r16
	{
		lastFullBits = currentGlobals->currentTrigButtons;
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     2f6:	cf 5f       	subi	r28, 0xFF	; 255
     2f8:	c0 31       	cpi	r28, 0x10	; 16
     2fa:	31 f6       	brne	.-116    	; 0x288 <listenTrigButtons+0x4e>
				}
			}
			fullBitsParse = fullBitsParse>>1;
		}
	}
}
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	ff 90       	pop	r15
     304:	ef 90       	pop	r14
     306:	df 90       	pop	r13
     308:	cf 90       	pop	r12
     30a:	08 95       	ret

0000030c <listenGPButtons>:

void listenGPButtons(Pattern currentPattern, Globals *currentGlobals) //may need to be a pointer
{
     30c:	ff 92       	push	r15
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	cc 57       	subi	r28, 0x7C	; 124
     31c:	de 4f       	sbci	r29, 0xFE	; 254
     31e:	08 81       	ld	r16, Y
     320:	19 81       	ldd	r17, Y+1	; 0x01
     322:	c4 58       	subi	r28, 0x84	; 132
     324:	d1 40       	sbci	r29, 0x01	; 1

	if(button_down(1 << PB5))
     326:	80 e2       	ldi	r24, 0x20	; 32
     328:	77 d0       	rcall	.+238    	; 0x418 <button_down>
     32a:	88 23       	and	r24, r24
     32c:	41 f1       	breq	.+80     	; 0x37e <listenGPButtons+0x72>
	{ //top encoder button
		if(currentGlobals->menuState>>4==3)
     32e:	f8 01       	movw	r30, r16
     330:	82 85       	ldd	r24, Z+10	; 0x0a
     332:	82 95       	swap	r24
     334:	8f 70       	andi	r24, 0x0F	; 15
     336:	83 30       	cpi	r24, 0x03	; 3
     338:	21 f4       	brne	.+8      	; 0x342 <listenGPButtons+0x36>
		{
			globalWrite(currentGlobals);
     33a:	c8 01       	movw	r24, r16
     33c:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <globalWrite>
     340:	1e c0       	rjmp	.+60     	; 0x37e <listenGPButtons+0x72>
		}else
		{
			eepromSavePattern(currentPattern, currentGlobals->currentPatternNumber);
     342:	f8 01       	movw	r30, r16
     344:	87 81       	ldd	r24, Z+7	; 0x07
     346:	8f 93       	push	r24
     348:	8d b7       	in	r24, 0x3d	; 61
     34a:	9e b7       	in	r25, 0x3e	; 62
     34c:	8b 57       	subi	r24, 0x7B	; 123
     34e:	91 40       	sbci	r25, 0x01	; 1
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	f8 94       	cli
     354:	9e bf       	out	0x3e, r25	; 62
     356:	0f be       	out	0x3f, r0	; 63
     358:	8d bf       	out	0x3d, r24	; 61
     35a:	ad b7       	in	r26, 0x3d	; 61
     35c:	be b7       	in	r27, 0x3e	; 62
     35e:	11 96       	adiw	r26, 0x01	; 1
     360:	8b e7       	ldi	r24, 0x7B	; 123
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	fe 01       	movw	r30, r28
     366:	39 96       	adiw	r30, 0x09	; 9
     368:	01 90       	ld	r0, Z+
     36a:	0d 92       	st	X+, r0
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	e1 f7       	brne	.-8      	; 0x368 <listenGPButtons+0x5c>
     370:	0e 94 0d 1a 	call	0x341a	; 0x341a <eepromSavePattern>
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
		}
		
	}

	uint8_t encoderSwitchMask = 0b00001000;
	if(button_down(1<<PB6))
     37e:	80 e4       	ldi	r24, 0x40	; 64
     380:	4b d0       	rcall	.+150    	; 0x418 <button_down>
     382:	88 23       	and	r24, r24
     384:	51 f0       	breq	.+20     	; 0x39a <listenGPButtons+0x8e>
		{//bottom encoder button
			uint8_t encoderBCheck = currentGlobals->menuState&encoderSwitchMask;
     386:	f8 01       	movw	r30, r16
     388:	82 85       	ldd	r24, Z+10	; 0x0a
			if(encoderBCheck)
     38a:	83 ff       	sbrs	r24, 3
     38c:	03 c0       	rjmp	.+6      	; 0x394 <listenGPButtons+0x88>
			{
				currentGlobals->menuState &=0b11110111;//turn off the encoderBFlag
     38e:	87 7f       	andi	r24, 0xF7	; 247
     390:	82 87       	std	Z+10, r24	; 0x0a
     392:	03 c0       	rjmp	.+6      	; 0x39a <listenGPButtons+0x8e>

			}else
			{
				currentGlobals->menuState |=0b00001000; //turn on the encoderBFlag bit
     394:	88 60       	ori	r24, 0x08	; 8
     396:	f8 01       	movw	r30, r16
     398:	82 87       	std	Z+10, r24	; 0x0a
			}
		}
	uint8_t playButtonMask = 0b0000001; //we could probably make a define for both of these masks.
	uint8_t playStateCheck = currentGlobals->playState & playButtonMask;
     39a:	f8 01       	movw	r30, r16
	if(button_down(1<<PB4))
     39c:	f3 84       	ldd	r15, Z+11	; 0x0b
     39e:	80 e1       	ldi	r24, 0x10	; 16
     3a0:	3b d0       	rcall	.+118    	; 0x418 <button_down>
     3a2:	88 23       	and	r24, r24
     3a4:	71 f0       	breq	.+28     	; 0x3c2 <listenGPButtons+0xb6>
	{
		if(playStateCheck)
     3a6:	f0 fe       	sbrs	r15, 0
     3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <listenGPButtons+0xaa>
		{
			currentGlobals->playState=0; //playstate is on, turn it off
     3aa:	f8 01       	movw	r30, r16
     3ac:	13 86       	std	Z+11, r1	; 0x0b
			currentGlobals->currentGPButtons &=(~0x20); //turn the first bit
     3ae:	82 81       	ldd	r24, Z+2	; 0x02
     3b0:	8f 7d       	andi	r24, 0xDF	; 223
     3b2:	82 83       	std	Z+2, r24	; 0x02
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <listenGPButtons+0xb6>
			
		}else
		{
			currentGlobals->playState=1;
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	f8 01       	movw	r30, r16
     3ba:	83 87       	std	Z+11, r24	; 0x0b
			currentGlobals->currentGPButtons |= 0x20; //turn on the first bit
     3bc:	82 81       	ldd	r24, Z+2	; 0x02
     3be:	80 62       	ori	r24, 0x20	; 32
     3c0:	82 83       	std	Z+2, r24	; 0x02
		}

	} //not sure which button this is
	uint8_t trackButtonMask = 0b00000001;
	uint8_t trackStateCheck = (currentGlobals->buttonSwitchFlag) & trackButtonMask;
     3c2:	f8 01       	movw	r30, r16
	if(button_down(1<<PB0))
     3c4:	f5 84       	ldd	r15, Z+13	; 0x0d
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	27 d0       	rcall	.+78     	; 0x418 <button_down>
     3ca:	88 23       	and	r24, r24
     3cc:	71 f0       	breq	.+28     	; 0x3ea <listenGPButtons+0xde>
	{
		if(trackStateCheck)
     3ce:	f0 fe       	sbrs	r15, 0
     3d0:	06 c0       	rjmp	.+12     	; 0x3de <listenGPButtons+0xd2>
		{
			currentGlobals->buttonSwitchFlag = 0;
     3d2:	f8 01       	movw	r30, r16
     3d4:	15 86       	std	Z+13, r1	; 0x0d
			currentGlobals->currentGPButtons &=(~0x02);
     3d6:	82 81       	ldd	r24, Z+2	; 0x02
     3d8:	8d 7f       	andi	r24, 0xFD	; 253
     3da:	82 83       	std	Z+2, r24	; 0x02
     3dc:	06 c0       	rjmp	.+12     	; 0x3ea <listenGPButtons+0xde>
		}else
		{
			currentGlobals->buttonSwitchFlag = 1;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	f8 01       	movw	r30, r16
     3e2:	85 87       	std	Z+13, r24	; 0x0d
			currentGlobals->currentGPButtons |=0x02;
     3e4:	82 81       	ldd	r24, Z+2	; 0x02
     3e6:	82 60       	ori	r24, 0x02	; 2
		}
	}
	uint8_t fineButtonMask = 4;
	uint8_t fineStateCheck = (currentGlobals->currentGPButtons) & fineButtonMask;
     3e8:	82 83       	std	Z+2, r24	; 0x02
     3ea:	f8 01       	movw	r30, r16
	if(button_down(1<<PB1))
     3ec:	f2 80       	ldd	r15, Z+2	; 0x02
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	13 d0       	rcall	.+38     	; 0x418 <button_down>
     3f2:	88 23       	and	r24, r24
     3f4:	59 f0       	breq	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	{		
		if(fineStateCheck)
     3f6:	f2 fe       	sbrs	r15, 2
     3f8:	05 c0       	rjmp	.+10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		{
			
			currentGlobals->currentGPButtons &=(~0x04);
     3fa:	f8 01       	movw	r30, r16
     3fc:	82 81       	ldd	r24, Z+2	; 0x02
     3fe:	8b 7f       	andi	r24, 0xFB	; 251
     400:	82 83       	std	Z+2, r24	; 0x02
     402:	04 c0       	rjmp	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		}else
		{
			currentGlobals->currentGPButtons |=0x04;
     404:	f8 01       	movw	r30, r16
     406:	82 81       	ldd	r24, Z+2	; 0x02
     408:	84 60       	ori	r24, 0x04	; 4
     40a:	82 83       	std	Z+2, r24	; 0x02
		}
		
	}
}
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	08 95       	ret

00000418 <button_down>:

volatile uint8_t buttons_down;
uint8_t button_down(uint8_t button_mask)
{
	//I should probably check out what this is.
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     418:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     41a:	f8 94       	cli
	{
		button_mask &= buttons_down;
     41c:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <buttons_down>
     420:	89 23       	and	r24, r25
		buttons_down ^= button_mask;
     422:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <buttons_down>
     426:	98 27       	eor	r25, r24
     428:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <buttons_down>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     42c:	2f bf       	out	0x3f, r18	; 63
	}
	
	return button_mask;
     42e:	08 95       	ret

00000430 <initEncoders>:
{
	
	//Interrupt pins - 2,3,4,5
		
	//setup rising edge detection on Int pins 2 and 3 (would maybe want all pin states if this doesn't work).
	EICRA |=(1<<ISC31)|(1<<ISC30)|(1 << ISC21)|(1 << ISC20); 
     430:	e9 e6       	ldi	r30, 0x69	; 105
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	80 6f       	ori	r24, 0xF0	; 240
     438:	80 83       	st	Z, r24
	
	//same setup on pins 4 and 5
	EICRB |=(1<<ISC51)|(1<<ISC50)|(1 << ISC41)|(1 << ISC40);
     43a:	ea e6       	ldi	r30, 0x6A	; 106
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	8f 60       	ori	r24, 0x0F	; 15
     442:	80 83       	st	Z, r24
	
	//enable all 4 interrupts through masking
	EIMSK |=(1<<INT2)|(1<<INT3)|(1<<INT4)|(1<<INT5);
     444:	8d b3       	in	r24, 0x1d	; 29
     446:	8c 63       	ori	r24, 0x3C	; 60
     448:	8d bb       	out	0x1d, r24	; 29
	
	DDRE &=0xCF; //we want to set every bit that is on, except for pins 5 and 4.
     44a:	8d b1       	in	r24, 0x0d	; 13
     44c:	8f 7c       	andi	r24, 0xCF	; 207
     44e:	8d b9       	out	0x0d, r24	; 13
	DDRD &=0xF3; //we want to set every bit that is on, except for pins 2 and 3. 
     450:	8a b1       	in	r24, 0x0a	; 10
     452:	83 7f       	andi	r24, 0xF3	; 243
     454:	8a b9       	out	0x0a, r24	; 10
     456:	08 95       	ret

00000458 <__vector_3>:

}
 
ISR(INT2_vect)
{
     458:	1f 92       	push	r1
     45a:	0f 92       	push	r0
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	0f 92       	push	r0
     460:	11 24       	eor	r1, r1
     462:	8f 93       	push	r24
	
	if((1<<topEncoderPinB)&encoderPortStates)//this means Pin 2 is coming after pin 3
     464:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <encoderPortStates>
     468:	81 ff       	sbrs	r24, 1
     46a:	0b c0       	rjmp	.+22     	; 0x482 <__vector_3+0x2a>
	{
		bottomEncoderValue--;
     46c:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <bottomEncoderValue>
     470:	81 50       	subi	r24, 0x01	; 1
     472:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <bottomEncoderValue>
		encoderPortStates&=(1<<bottomEncoderPinB)|(1<<bottomEncoderPinA);//reset our two pins to low. 
     476:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <encoderPortStates>
     47a:	8c 70       	andi	r24, 0x0C	; 12
     47c:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <encoderPortStates>
     480:	05 c0       	rjmp	.+10     	; 0x48c <__vector_3+0x34>
	}
	else
	{
		encoderPortStates|=(1<<topEncoderPinA); //we want to set bit 0. 
     482:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <encoderPortStates>
     486:	81 60       	ori	r24, 0x01	; 1
     488:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <encoderPortStates>
	}
}
     48c:	8f 91       	pop	r24
     48e:	0f 90       	pop	r0
     490:	0f be       	out	0x3f, r0	; 63
     492:	0f 90       	pop	r0
     494:	1f 90       	pop	r1
     496:	18 95       	reti

00000498 <__vector_4>:

ISR(INT3_vect)
{
     498:	1f 92       	push	r1
     49a:	0f 92       	push	r0
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	0f 92       	push	r0
     4a0:	11 24       	eor	r1, r1
     4a2:	8f 93       	push	r24
	if((1<<topEncoderPinA)&encoderPortStates)//this means Pin 3 is coming after pin 2
     4a4:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <encoderPortStates>
     4a8:	80 ff       	sbrs	r24, 0
     4aa:	0b c0       	rjmp	.+22     	; 0x4c2 <__vector_4+0x2a>
	{
		bottomEncoderValue++;
     4ac:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <bottomEncoderValue>
     4b0:	8f 5f       	subi	r24, 0xFF	; 255
     4b2:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <bottomEncoderValue>
		encoderPortStates&=(1<<bottomEncoderPinA)|(1<<bottomEncoderPinB); //reset our two pins to low.
     4b6:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <encoderPortStates>
     4ba:	8c 70       	andi	r24, 0x0C	; 12
     4bc:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <encoderPortStates>
     4c0:	05 c0       	rjmp	.+10     	; 0x4cc <__vector_4+0x34>
	}
	else
	{
		encoderPortStates|=(1<<topEncoderPinB); //we want to set bit 1.
     4c2:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <encoderPortStates>
     4c6:	82 60       	ori	r24, 0x02	; 2
     4c8:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <encoderPortStates>
	}
}
     4cc:	8f 91       	pop	r24
     4ce:	0f 90       	pop	r0
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	0f 90       	pop	r0
     4d4:	1f 90       	pop	r1
     4d6:	18 95       	reti

000004d8 <__vector_5>:

ISR(INT4_vect)
{
     4d8:	1f 92       	push	r1
     4da:	0f 92       	push	r0
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	0f 92       	push	r0
     4e0:	11 24       	eor	r1, r1
     4e2:	0b b6       	in	r0, 0x3b	; 59
     4e4:	0f 92       	push	r0
     4e6:	8f 93       	push	r24
     4e8:	9f 93       	push	r25
     4ea:	ef 93       	push	r30
     4ec:	ff 93       	push	r31
	prevNextCodeTop <<2;
     4ee:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <prevNextCodeTop>
	prevNextCodeTop |= topEncoderRead;
     4f2:	8c b1       	in	r24, 0x0c	; 12
     4f4:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <prevNextCodeTop>
     4f8:	80 73       	andi	r24, 0x30	; 48
     4fa:	82 95       	swap	r24
     4fc:	8f 70       	andi	r24, 0x0F	; 15
     4fe:	89 2b       	or	r24, r25
     500:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <prevNextCodeTop>
	prevNextCodeTop &= 0x0F;
     504:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <prevNextCodeTop>
     508:	8f 70       	andi	r24, 0x0F	; 15
     50a:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <prevNextCodeTop>
	
	if(rot_enc_table[prevNextCodeTop])
     50e:	e0 91 fe 03 	lds	r30, 0x03FE	; 0x8003fe <prevNextCodeTop>
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	e0 5a       	subi	r30, 0xA0	; 160
     516:	fd 4f       	sbci	r31, 0xFD	; 253
     518:	80 81       	ld	r24, Z
     51a:	88 23       	and	r24, r24
     51c:	d9 f0       	breq	.+54     	; 0x554 <__vector_5+0x7c>
	{
		storeTop << 4;
     51e:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <storeTop>
		storeTop |= prevNextCodeTop;
     522:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <prevNextCodeTop>
     526:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <storeTop>
     52a:	89 2b       	or	r24, r25
     52c:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <storeTop>
		if ((storeTop&0xff)==0x2b)
     530:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <storeTop>
     534:	8b 32       	cpi	r24, 0x2B	; 43
     536:	29 f4       	brne	.+10     	; 0x542 <__vector_5+0x6a>
		{
			topEncoderValue++;
     538:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <topEncoderValue>
     53c:	8f 5f       	subi	r24, 0xFF	; 255
     53e:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <topEncoderValue>
		}
		if ((storeTop&0xff)==0x17)
     542:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <storeTop>
     546:	87 31       	cpi	r24, 0x17	; 23
     548:	29 f4       	brne	.+10     	; 0x554 <__vector_5+0x7c>
		{
			topEncoderValue--;
     54a:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <topEncoderValue>
     54e:	81 50       	subi	r24, 0x01	; 1
     550:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <topEncoderValue>
	else
	{
		encoderPortStates|=(1<<bottomEncoderPinA); //we want to set bit 2.
	}
	*/
}
     554:	ff 91       	pop	r31
     556:	ef 91       	pop	r30
     558:	9f 91       	pop	r25
     55a:	8f 91       	pop	r24
     55c:	0f 90       	pop	r0
     55e:	0b be       	out	0x3b, r0	; 59
     560:	0f 90       	pop	r0
     562:	0f be       	out	0x3f, r0	; 63
     564:	0f 90       	pop	r0
     566:	1f 90       	pop	r1
     568:	18 95       	reti

0000056a <__vector_6>:

ISR(INT5_vect)
{
     56a:	1f 92       	push	r1
     56c:	0f 92       	push	r0
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	0f 92       	push	r0
     572:	11 24       	eor	r1, r1
     574:	0b b6       	in	r0, 0x3b	; 59
     576:	0f 92       	push	r0
     578:	8f 93       	push	r24
     57a:	9f 93       	push	r25
     57c:	ef 93       	push	r30
     57e:	ff 93       	push	r31
	prevNextCodeTop <<2;
     580:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <prevNextCodeTop>
	prevNextCodeTop |= topEncoderRead;
     584:	8c b1       	in	r24, 0x0c	; 12
     586:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <prevNextCodeTop>
     58a:	80 73       	andi	r24, 0x30	; 48
     58c:	82 95       	swap	r24
     58e:	8f 70       	andi	r24, 0x0F	; 15
     590:	89 2b       	or	r24, r25
     592:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <prevNextCodeTop>
	prevNextCodeTop &= 0x0F;
     596:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <prevNextCodeTop>
     59a:	8f 70       	andi	r24, 0x0F	; 15
     59c:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <prevNextCodeTop>
	
	if(rot_enc_table[prevNextCodeTop])
     5a0:	e0 91 fe 03 	lds	r30, 0x03FE	; 0x8003fe <prevNextCodeTop>
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	e0 5a       	subi	r30, 0xA0	; 160
     5a8:	fd 4f       	sbci	r31, 0xFD	; 253
     5aa:	80 81       	ld	r24, Z
     5ac:	88 23       	and	r24, r24
     5ae:	d9 f0       	breq	.+54     	; 0x5e6 <__vector_6+0x7c>
	{
		storeTop << 4;
     5b0:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <storeTop>
		storeTop |= prevNextCodeTop;
     5b4:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <prevNextCodeTop>
     5b8:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <storeTop>
     5bc:	89 2b       	or	r24, r25
     5be:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <storeTop>
		if ((storeTop&0xff)==0x2b)
     5c2:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <storeTop>
     5c6:	8b 32       	cpi	r24, 0x2B	; 43
     5c8:	29 f4       	brne	.+10     	; 0x5d4 <__vector_6+0x6a>
		{
			topEncoderValue++;
     5ca:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <topEncoderValue>
     5ce:	8f 5f       	subi	r24, 0xFF	; 255
     5d0:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <topEncoderValue>
		}
		if ((storeTop&0xff)==0x17)
     5d4:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <storeTop>
     5d8:	87 31       	cpi	r24, 0x17	; 23
     5da:	29 f4       	brne	.+10     	; 0x5e6 <__vector_6+0x7c>
		{
			topEncoderValue--;
     5dc:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <topEncoderValue>
     5e0:	81 50       	subi	r24, 0x01	; 1
     5e2:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <topEncoderValue>
	else
	{
		encoderPortStates|=(1<<bottomEncoderPinB); //we want to set bit 3.
	}
	*/
}
     5e6:	ff 91       	pop	r31
     5e8:	ef 91       	pop	r30
     5ea:	9f 91       	pop	r25
     5ec:	8f 91       	pop	r24
     5ee:	0f 90       	pop	r0
     5f0:	0b be       	out	0x3b, r0	; 59
     5f2:	0f 90       	pop	r0
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	0f 90       	pop	r0
     5f8:	1f 90       	pop	r1
     5fa:	18 95       	reti

000005fc <listenEncodersNew>:

void listenEncodersNew(Pattern *currentPattern, Globals *currentGlobals)
{
	//this will happen every millisecond. 
	
		prevNextCodeTop <<2;
     5fc:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <prevNextCodeTop>
		prevNextCodeTop |= topEncoderRead;
     600:	8c b1       	in	r24, 0x0c	; 12
     602:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <prevNextCodeTop>
     606:	80 73       	andi	r24, 0x30	; 48
     608:	82 95       	swap	r24
     60a:	8f 70       	andi	r24, 0x0F	; 15
     60c:	89 2b       	or	r24, r25
     60e:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <prevNextCodeTop>
		prevNextCodeTop &= 0x0F;
     612:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <prevNextCodeTop>
     616:	8f 70       	andi	r24, 0x0F	; 15
     618:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <prevNextCodeTop>
		
		if(rot_enc_table[prevNextCodeTop])
     61c:	e0 91 fe 03 	lds	r30, 0x03FE	; 0x8003fe <prevNextCodeTop>
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	e0 5a       	subi	r30, 0xA0	; 160
     624:	fd 4f       	sbci	r31, 0xFD	; 253
     626:	80 81       	ld	r24, Z
     628:	88 23       	and	r24, r24
     62a:	d9 f0       	breq	.+54     	; 0x662 <listenEncodersNew+0x66>
		{
			storeTop << 4;
     62c:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <storeTop>
			storeTop |= prevNextCodeTop;
     630:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <prevNextCodeTop>
     634:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <storeTop>
     638:	89 2b       	or	r24, r25
     63a:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <storeTop>
			if ((storeTop&0xff)==0x2b)
     63e:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <storeTop>
     642:	8b 32       	cpi	r24, 0x2B	; 43
     644:	29 f4       	brne	.+10     	; 0x650 <listenEncodersNew+0x54>
			{
				topEncoderValue++;
     646:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <topEncoderValue>
     64a:	8f 5f       	subi	r24, 0xFF	; 255
     64c:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <topEncoderValue>
			}
			if ((storeTop&0xff)==0x17)
     650:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <storeTop>
     654:	87 31       	cpi	r24, 0x17	; 23
     656:	29 f4       	brne	.+10     	; 0x662 <listenEncodersNew+0x66>
			{
				topEncoderValue--;
     658:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <topEncoderValue>
     65c:	81 50       	subi	r24, 0x01	; 1
     65e:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <topEncoderValue>
     662:	08 95       	ret

00000664 <listenEncoders>:
		}
	
}

void listenEncoders(Pattern *currentPattern, Globals *currentGlobals)
{
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	9c 01       	movw	r18, r24
     66a:	fb 01       	movw	r30, r22
	if(topEncoderValue!=topEncoderLastValue)
     66c:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <topEncoderValue>
     670:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <topEncoderLastValue>
     674:	98 17       	cp	r25, r24
     676:	89 f0       	breq	.+34     	; 0x69a <listenEncoders+0x36>
	{
		currentGlobals->menuState = ((topEncoderValue%4)<<4);
     678:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <topEncoderValue>
     67c:	93 70       	andi	r25, 0x03	; 3
     67e:	92 95       	swap	r25
     680:	90 7f       	andi	r25, 0xF0	; 240
     682:	92 87       	std	Z+10, r25	; 0x0a
		bottomEncoderValue = 0; 
     684:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <bottomEncoderValue>
		bottomEncoderLastValue = 0; 
     688:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <bottomEncoderLastValue>
		currentGlobals->valueChangeFlag |= (1<<encoderChange);
     68c:	86 85       	ldd	r24, Z+14	; 0x0e
     68e:	81 60       	ori	r24, 0x01	; 1
     690:	86 87       	std	Z+14, r24	; 0x0e
		topEncoderLastValue = topEncoderValue;
     692:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <topEncoderValue>
     696:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <topEncoderLastValue>
	}
	
	if(bottomEncoderValue!=bottomEncoderLastValue)
     69a:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <bottomEncoderValue>
     69e:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <bottomEncoderLastValue>
     6a2:	98 17       	cp	r25, r24
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <listenEncoders+0x44>
     6a6:	fe c1       	rjmp	.+1020   	; 0xaa4 <listenEncoders+0x440>
	{
		 uint8_t menuSub = bottomEncoderValue - bottomEncoderLastValue;
     6a8:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <bottomEncoderValue>
     6ac:	a9 2f       	mov	r26, r25
     6ae:	a8 1b       	sub	r26, r24
		 currentGlobals->valueChangeFlag |= (1<<encoderChange);
     6b0:	96 85       	ldd	r25, Z+14	; 0x0e
     6b2:	91 60       	ori	r25, 0x01	; 1
     6b4:	96 87       	std	Z+14, r25	; 0x0e
		 			//if this value is negative, we increase the menu.
		 			//if positive, we decrement the menu.
		switch(currentGlobals->menuState)
     6b6:	42 85       	ldd	r20, Z+10	; 0x0a
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	4b 33       	cpi	r20, 0x3B	; 59
     6bc:	51 05       	cpc	r21, r1
     6be:	08 f0       	brcs	.+2      	; 0x6c2 <listenEncoders+0x5e>
     6c0:	ed c1       	rjmp	.+986    	; 0xa9c <listenEncoders+0x438>
     6c2:	ef 01       	movw	r28, r30
     6c4:	fa 01       	movw	r30, r20
     6c6:	88 27       	eor	r24, r24
     6c8:	ee 58       	subi	r30, 0x8E	; 142
     6ca:	ff 4f       	sbci	r31, 0xFF	; 255
     6cc:	8f 4f       	sbci	r24, 0xFF	; 255
     6ce:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <__tablejump2__>
		{
			case PreformanceModeInit:
			if(menuSub==1)
     6d2:	a1 30       	cpi	r26, 0x01	; 1
     6d4:	41 f4       	brne	.+16     	; 0x6e6 <listenEncoders+0x82>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     6d6:	8f 81       	ldd	r24, Y+7	; 0x07
     6d8:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     6da:	11 f0       	breq	.+4      	; 0x6e0 <listenEncoders+0x7c>
		switch(currentGlobals->menuState)
		{
			case PreformanceModeInit:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     6dc:	8f 83       	std	Y+7, r24	; 0x07
     6de:	0b c0       	rjmp	.+22     	; 0x6f6 <listenEncoders+0x92>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     6e0:	8f ef       	ldi	r24, 0xFF	; 255
     6e2:	8f 83       	std	Y+7, r24	; 0x07
     6e4:	08 c0       	rjmp	.+16     	; 0x6f6 <listenEncoders+0x92>
				}
				
			}else if(menuSub==255) //we don't want to hit this when switching menus after changing from the sequencer. 
     6e6:	af 3f       	cpi	r26, 0xFF	; 255
     6e8:	31 f4       	brne	.+12     	; 0x6f6 <listenEncoders+0x92>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     6ea:	8f 81       	ldd	r24, Y+7	; 0x07
     6ec:	81 50       	subi	r24, 0x01	; 1
     6ee:	10 f0       	brcs	.+4      	; 0x6f4 <listenEncoders+0x90>
     6f0:	8f 83       	std	Y+7, r24	; 0x07
     6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <listenEncoders+0x92>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     6f4:	1f 82       	std	Y+7, r1	; 0x07
				}
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     6f6:	6f 81       	ldd	r22, Y+7	; 0x07
     6f8:	c9 01       	movw	r24, r18
     6fa:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <eepromLoadPattern>
			break;
     6fe:	ce c1       	rjmp	.+924    	; 0xa9c <listenEncoders+0x438>
			
			case SequencerMenuArrow1:			
			if(menuSub==1)
     700:	a1 30       	cpi	r26, 0x01	; 1
     702:	19 f4       	brne	.+6      	; 0x70a <listenEncoders+0xa6>
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     704:	83 e1       	ldi	r24, 0x13	; 19
     706:	8a 87       	std	Y+10, r24	; 0x0a
     708:	c9 c1       	rjmp	.+914    	; 0xa9c <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     70a:	82 e1       	ldi	r24, 0x12	; 18
     70c:	8a 87       	std	Y+10, r24	; 0x0a
     70e:	c6 c1       	rjmp	.+908    	; 0xa9c <listenEncoders+0x438>
			}
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
     710:	a1 30       	cpi	r26, 0x01	; 1
     712:	41 f4       	brne	.+16     	; 0x724 <listenEncoders+0xc0>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     714:	8f 81       	ldd	r24, Y+7	; 0x07
     716:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     718:	11 f0       	breq	.+4      	; 0x71e <listenEncoders+0xba>
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     71a:	8f 83       	std	Y+7, r24	; 0x07
     71c:	09 c0       	rjmp	.+18     	; 0x730 <listenEncoders+0xcc>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     71e:	8f ef       	ldi	r24, 0xFF	; 255
     720:	8f 83       	std	Y+7, r24	; 0x07
     722:	06 c0       	rjmp	.+12     	; 0x730 <listenEncoders+0xcc>
				}
		
			}else
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     724:	8f 81       	ldd	r24, Y+7	; 0x07
     726:	81 50       	subi	r24, 0x01	; 1
     728:	10 f0       	brcs	.+4      	; 0x72e <listenEncoders+0xca>
     72a:	8f 83       	std	Y+7, r24	; 0x07
     72c:	01 c0       	rjmp	.+2      	; 0x730 <listenEncoders+0xcc>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     72e:	1f 82       	std	Y+7, r1	; 0x07
				}	
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     730:	6f 81       	ldd	r22, Y+7	; 0x07
     732:	c9 01       	movw	r24, r18
     734:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <eepromLoadPattern>
			//this keeps the knob reads that will happen right after the eeprom load to write over the loaded values.
			//Now when you load a pattern, the saved positions of the knobs are unchanged until you turn a knob. 
			break;
     738:	b1 c1       	rjmp	.+866    	; 0xa9c <listenEncoders+0x438>
			
			case SequencerMenuArrow2:
			if(menuSub==1)
     73a:	a1 30       	cpi	r26, 0x01	; 1
     73c:	19 f4       	brne	.+6      	; 0x744 <listenEncoders+0xe0>
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     73e:	81 e1       	ldi	r24, 0x11	; 17
     740:	8a 87       	std	Y+10, r24	; 0x0a
     742:	ac c1       	rjmp	.+856    	; 0xa9c <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     744:	83 e1       	ldi	r24, 0x13	; 19
     746:	8a 87       	std	Y+10, r24	; 0x0a
     748:	a9 c1       	rjmp	.+850    	; 0xa9c <listenEncoders+0x438>
			}
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
     74a:	a1 30       	cpi	r26, 0x01	; 1
     74c:	79 f4       	brne	.+30     	; 0x76c <listenEncoders+0x108>
			{
				currentPattern->numSteps++;
     74e:	f9 01       	movw	r30, r18
     750:	e6 53       	subi	r30, 0x36	; 54
     752:	ff 4f       	sbci	r31, 0xFF	; 255
     754:	90 81       	ld	r25, Z
     756:	9f 5f       	subi	r25, 0xFF	; 255
				if(currentPattern->numSteps>64)
     758:	91 34       	cpi	r25, 0x41	; 65
     75a:	10 f4       	brcc	.+4      	; 0x760 <listenEncoders+0xfc>
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
			{
				currentPattern->numSteps++;
     75c:	90 83       	st	Z, r25
     75e:	9e c1       	rjmp	.+828    	; 0xa9c <listenEncoders+0x438>
				if(currentPattern->numSteps>64)
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
     760:	f9 01       	movw	r30, r18
     762:	e6 53       	subi	r30, 0x36	; 54
     764:	ff 4f       	sbci	r31, 0xFF	; 255
     766:	80 e4       	ldi	r24, 0x40	; 64
     768:	80 83       	st	Z, r24
     76a:	98 c1       	rjmp	.+816    	; 0xa9c <listenEncoders+0x438>
				}
			}else
			{
				currentPattern->numSteps--;
     76c:	f9 01       	movw	r30, r18
     76e:	e6 53       	subi	r30, 0x36	; 54
     770:	ff 4f       	sbci	r31, 0xFF	; 255
     772:	90 81       	ld	r25, Z
     774:	91 50       	subi	r25, 0x01	; 1
				if(currentPattern->numSteps<1)
     776:	11 f0       	breq	.+4      	; 0x77c <listenEncoders+0x118>
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
				}
			}else
			{
				currentPattern->numSteps--;
     778:	90 83       	st	Z, r25
     77a:	90 c1       	rjmp	.+800    	; 0xa9c <listenEncoders+0x438>
				if(currentPattern->numSteps<1)
				{//we can't have a 0 step pattern. 
					currentPattern->numSteps=1;
     77c:	f9 01       	movw	r30, r18
     77e:	e6 53       	subi	r30, 0x36	; 54
     780:	ff 4f       	sbci	r31, 0xFF	; 255
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	80 83       	st	Z, r24
     786:	8a c1       	rjmp	.+788    	; 0xa9c <listenEncoders+0x438>
				}
			}
			break;
			
			case SequencerMenuArrow3:;
			if(menuSub==1)
     788:	a1 30       	cpi	r26, 0x01	; 1
     78a:	19 f4       	brne	.+6      	; 0x792 <listenEncoders+0x12e>
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     78c:	82 e1       	ldi	r24, 0x12	; 18
     78e:	8a 87       	std	Y+10, r24	; 0x0a
     790:	85 c1       	rjmp	.+778    	; 0xa9c <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     792:	81 e1       	ldi	r24, 0x11	; 17
     794:	8a 87       	std	Y+10, r24	; 0x0a
     796:	82 c1       	rjmp	.+772    	; 0xa9c <listenEncoders+0x438>
			}
			break;
			
			case SequencerMenuArrow3Select:
			//change current step number
			if(menuSub==1)
     798:	a1 30       	cpi	r26, 0x01	; 1
     79a:	69 f4       	brne	.+26     	; 0x7b6 <listenEncoders+0x152>
			{
				currentGlobals->currentStep++;
     79c:	98 85       	ldd	r25, Y+8	; 0x08
     79e:	9f 5f       	subi	r25, 0xFF	; 255
     7a0:	98 87       	std	Y+8, r25	; 0x08
				if(currentGlobals->currentStep>=currentPattern->numSteps)
     7a2:	f9 01       	movw	r30, r18
     7a4:	e6 53       	subi	r30, 0x36	; 54
     7a6:	ff 4f       	sbci	r31, 0xFF	; 255
     7a8:	80 81       	ld	r24, Z
     7aa:	98 17       	cp	r25, r24
     7ac:	08 f4       	brcc	.+2      	; 0x7b0 <listenEncoders+0x14c>
     7ae:	76 c1       	rjmp	.+748    	; 0xa9c <listenEncoders+0x438>
				{//our ceiling is the maximum number of steps.
					currentGlobals->currentStep=(currentPattern->numSteps)-1;
     7b0:	81 50       	subi	r24, 0x01	; 1
     7b2:	88 87       	std	Y+8, r24	; 0x08
     7b4:	73 c1       	rjmp	.+742    	; 0xa9c <listenEncoders+0x438>
				}
			}else
			{
				currentGlobals->currentStep--;
     7b6:	98 85       	ldd	r25, Y+8	; 0x08
     7b8:	91 50       	subi	r25, 0x01	; 1
     7ba:	98 87       	std	Y+8, r25	; 0x08
				if(currentGlobals->currentStep>currentPattern->numSteps)
     7bc:	f9 01       	movw	r30, r18
     7be:	e6 53       	subi	r30, 0x36	; 54
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
     7c2:	80 81       	ld	r24, Z
     7c4:	89 17       	cp	r24, r25
     7c6:	08 f0       	brcs	.+2      	; 0x7ca <listenEncoders+0x166>
     7c8:	69 c1       	rjmp	.+722    	; 0xa9c <listenEncoders+0x438>
				{//do no write notes to step 0.
					currentGlobals->currentStep=0;
     7ca:	18 86       	std	Y+8, r1	; 0x08
     7cc:	67 c1       	rjmp	.+718    	; 0xa9c <listenEncoders+0x438>
				}				
			}
			break;
			
			case TrackMenuArrow1:;
			if(menuSub==1)
     7ce:	a1 30       	cpi	r26, 0x01	; 1
     7d0:	19 f4       	brne	.+6      	; 0x7d8 <listenEncoders+0x174>
			{
				currentGlobals->menuState = TrackMenuArrow5;
     7d2:	85 e2       	ldi	r24, 0x25	; 37
     7d4:	8a 87       	std	Y+10, r24	; 0x0a
     7d6:	62 c1       	rjmp	.+708    	; 0xa9c <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow2;
     7d8:	82 e2       	ldi	r24, 0x22	; 34
     7da:	8a 87       	std	Y+10, r24	; 0x0a
     7dc:	5f c1       	rjmp	.+702    	; 0xa9c <listenEncoders+0x438>
			}
			break;
			
			case TrackMenuArrow1Select:;
			uint16_t currentSample = ((currentPattern->trackSampleMSB[currentGlobals->currentTrack])<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     7de:	89 85       	ldd	r24, Y+9	; 0x09
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	b9 01       	movw	r22, r18
     7e4:	68 0f       	add	r22, r24
     7e6:	79 1f       	adc	r23, r25
     7e8:	fb 01       	movw	r30, r22
     7ea:	e8 56       	subi	r30, 0x68	; 104
     7ec:	ff 4f       	sbci	r31, 0xFF	; 255
     7ee:	40 81       	ld	r20, Z
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	54 2f       	mov	r21, r20
     7f4:	44 27       	eor	r20, r20
     7f6:	70 96       	adiw	r30, 0x10	; 16
     7f8:	60 81       	ld	r22, Z
     7fa:	46 2b       	or	r20, r22
			if(menuSub==1)
     7fc:	a1 30       	cpi	r26, 0x01	; 1
     7fe:	49 f4       	brne	.+18     	; 0x812 <listenEncoders+0x1ae>
     800:	4f 5f       	subi	r20, 0xFF	; 255
     802:	5f 4f       	sbci	r21, 0xFF	; 255
     804:	41 30       	cpi	r20, 0x01	; 1
     806:	60 e1       	ldi	r22, 0x10	; 16
     808:	56 07       	cpc	r21, r22
     80a:	40 f0       	brcs	.+16     	; 0x81c <listenEncoders+0x1b8>
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	50 e1       	ldi	r21, 0x10	; 16
     810:	05 c0       	rjmp	.+10     	; 0x81c <listenEncoders+0x1b8>
				{//maximum number of indexable samples.
					currentSample=4096;
				}
			}else
			{//no samples in space 0.
				currentSample--;
     812:	41 50       	subi	r20, 0x01	; 1
     814:	51 09       	sbc	r21, r1
				if(currentSample<1)
     816:	11 f4       	brne	.+4      	; 0x81c <listenEncoders+0x1b8>
				{
					currentSample=1;
     818:	41 e0       	ldi	r20, 0x01	; 1
     81a:	50 e0       	ldi	r21, 0x00	; 0
				}
			}
			currentPattern->trackSampleLSB[currentGlobals->currentTrack] = (currentSample&0x00FF);//we want to lob off the top 8 bits, just in case. May be unnecessary.
     81c:	82 0f       	add	r24, r18
     81e:	93 1f       	adc	r25, r19
     820:	fc 01       	movw	r30, r24
     822:	e8 55       	subi	r30, 0x58	; 88
     824:	ff 4f       	sbci	r31, 0xFF	; 255
     826:	40 83       	st	Z, r20
			currentPattern->trackSampleMSB[currentGlobals->currentTrack] = (currentSample>>8); 
     828:	89 85       	ldd	r24, Y+9	; 0x09
     82a:	28 0f       	add	r18, r24
     82c:	31 1d       	adc	r19, r1
     82e:	f9 01       	movw	r30, r18
     830:	e8 56       	subi	r30, 0x68	; 104
     832:	ff 4f       	sbci	r31, 0xFF	; 255
     834:	50 83       	st	Z, r21
			break;
     836:	32 c1       	rjmp	.+612    	; 0xa9c <listenEncoders+0x438>
			
			case TrackMenuArrow2:
			if(menuSub==1)
     838:	a1 30       	cpi	r26, 0x01	; 1
     83a:	19 f4       	brne	.+6      	; 0x842 <listenEncoders+0x1de>
			{
				currentGlobals->menuState = TrackMenuArrow1;
     83c:	81 e2       	ldi	r24, 0x21	; 33
     83e:	8a 87       	std	Y+10, r24	; 0x0a
     840:	2d c1       	rjmp	.+602    	; 0xa9c <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow3;
     842:	83 e2       	ldi	r24, 0x23	; 35
     844:	8a 87       	std	Y+10, r24	; 0x0a
     846:	2a c1       	rjmp	.+596    	; 0xa9c <listenEncoders+0x438>
			
			case TrackMenuArrow2Select:
			//change play mode of currently selected track
			//since we only have two play modes currently,
			//we only need to flip the play mode.
			currentPattern->trackPlayMode[currentGlobals->currentTrack] = (!(currentPattern->trackPlayMode[currentGlobals->currentTrack]))&(0b00000001);
     848:	89 85       	ldd	r24, Y+9	; 0x09
     84a:	28 0f       	add	r18, r24
     84c:	31 1d       	adc	r19, r1
     84e:	f9 01       	movw	r30, r18
     850:	e8 57       	subi	r30, 0x78	; 120
     852:	ff 4f       	sbci	r31, 0xFF	; 255
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 81       	ld	r25, Z
     858:	91 11       	cpse	r25, r1
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	80 83       	st	Z, r24
			//flip all bits, mask for first bit. 
			break;
     85e:	1e c1       	rjmp	.+572    	; 0xa9c <listenEncoders+0x438>
			
			case TrackMenuArrow3:
			if(menuSub==1)
     860:	a1 30       	cpi	r26, 0x01	; 1
     862:	19 f4       	brne	.+6      	; 0x86a <listenEncoders+0x206>
			{
				currentGlobals->menuState = TrackMenuArrow2;
     864:	82 e2       	ldi	r24, 0x22	; 34
     866:	8a 87       	std	Y+10, r24	; 0x0a
     868:	19 c1       	rjmp	.+562    	; 0xa9c <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow4;
     86a:	84 e2       	ldi	r24, 0x24	; 36
     86c:	8a 87       	std	Y+10, r24	; 0x0a
     86e:	16 c1       	rjmp	.+556    	; 0xa9c <listenEncoders+0x438>
			}
			break;
			
			case TrackMenuArrow3Select:
			
			if(menuSub==1)
     870:	a1 30       	cpi	r26, 0x01	; 1
     872:	b1 f4       	brne	.+44     	; 0x8a0 <listenEncoders+0x23c>
			{
				//indexing might be an issue here, don't remember if this is 0 indexed or not. 
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1 ;
     874:	89 85       	ldd	r24, Y+9	; 0x09
     876:	f9 01       	movw	r30, r18
     878:	e8 0f       	add	r30, r24
     87a:	f1 1d       	adc	r31, r1
     87c:	80 8d       	ldd	r24, Z+24	; 0x18
     87e:	8f 5f       	subi	r24, 0xFF	; 255
     880:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     882:	89 85       	ldd	r24, Y+9	; 0x09
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	f9 01       	movw	r30, r18
     888:	e8 0f       	add	r30, r24
     88a:	f9 1f       	adc	r31, r25
     88c:	40 8d       	ldd	r20, Z+24	; 0x18
     88e:	48 30       	cpi	r20, 0x08	; 8
     890:	08 f4       	brcc	.+2      	; 0x894 <listenEncoders+0x230>
     892:	04 c1       	rjmp	.+520    	; 0xa9c <listenEncoders+0x438>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=7;
     894:	f9 01       	movw	r30, r18
     896:	e8 0f       	add	r30, r24
     898:	f9 1f       	adc	r31, r25
     89a:	87 e0       	ldi	r24, 0x07	; 7
     89c:	80 8f       	std	Z+24, r24	; 0x18
     89e:	fe c0       	rjmp	.+508    	; 0xa9c <listenEncoders+0x438>
				}
			}else
			{
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])-1;
     8a0:	89 85       	ldd	r24, Y+9	; 0x09
     8a2:	f9 01       	movw	r30, r18
     8a4:	e8 0f       	add	r30, r24
     8a6:	f1 1d       	adc	r31, r1
     8a8:	80 8d       	ldd	r24, Z+24	; 0x18
     8aa:	81 50       	subi	r24, 0x01	; 1
     8ac:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     8ae:	89 85       	ldd	r24, Y+9	; 0x09
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	f9 01       	movw	r30, r18
     8b4:	e8 0f       	add	r30, r24
     8b6:	f9 1f       	adc	r31, r25
     8b8:	40 8d       	ldd	r20, Z+24	; 0x18
     8ba:	48 30       	cpi	r20, 0x08	; 8
     8bc:	08 f4       	brcc	.+2      	; 0x8c0 <listenEncoders+0x25c>
     8be:	ee c0       	rjmp	.+476    	; 0xa9c <listenEncoders+0x438>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=0;
     8c0:	f9 01       	movw	r30, r18
     8c2:	e8 0f       	add	r30, r24
     8c4:	f9 1f       	adc	r31, r25
     8c6:	10 8e       	std	Z+24, r1	; 0x18
     8c8:	e9 c0       	rjmp	.+466    	; 0xa9c <listenEncoders+0x438>
				}
			}
			break;
			
			case TrackMenuArrow4:
			if(menuSub==1)
     8ca:	a1 30       	cpi	r26, 0x01	; 1
     8cc:	19 f4       	brne	.+6      	; 0x8d4 <listenEncoders+0x270>
			{
				currentGlobals->menuState = TrackMenuArrow3;
     8ce:	83 e2       	ldi	r24, 0x23	; 35
     8d0:	8a 87       	std	Y+10, r24	; 0x0a
     8d2:	e4 c0       	rjmp	.+456    	; 0xa9c <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow5;
     8d4:	85 e2       	ldi	r24, 0x25	; 37
     8d6:	8a 87       	std	Y+10, r24	; 0x0a
     8d8:	e1 c0       	rjmp	.+450    	; 0xa9c <listenEncoders+0x438>
			}
			break;
			
			case TrackMenuArrow4Select:
			if(menuSub==1)
     8da:	a1 30       	cpi	r26, 0x01	; 1
     8dc:	d9 f4       	brne	.+54     	; 0x914 <listenEncoders+0x2b0>
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])++;
     8de:	89 85       	ldd	r24, Y+9	; 0x09
     8e0:	f9 01       	movw	r30, r18
     8e2:	e8 0f       	add	r30, r24
     8e4:	f1 1d       	adc	r31, r1
     8e6:	e5 51       	subi	r30, 0x15	; 21
     8e8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ea:	80 81       	ld	r24, Z
     8ec:	8f 5f       	subi	r24, 0xFF	; 255
     8ee:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>3)
     8f0:	89 85       	ldd	r24, Y+9	; 0x09
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	f9 01       	movw	r30, r18
     8f6:	e8 0f       	add	r30, r24
     8f8:	f9 1f       	adc	r31, r25
     8fa:	e5 51       	subi	r30, 0x15	; 21
     8fc:	ff 4f       	sbci	r31, 0xFF	; 255
     8fe:	40 81       	ld	r20, Z
     900:	44 30       	cpi	r20, 0x04	; 4
     902:	08 f1       	brcs	.+66     	; 0x946 <listenEncoders+0x2e2>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=3;
     904:	82 0f       	add	r24, r18
     906:	93 1f       	adc	r25, r19
     908:	fc 01       	movw	r30, r24
     90a:	e5 51       	subi	r30, 0x15	; 21
     90c:	ff 4f       	sbci	r31, 0xFF	; 255
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	80 83       	st	Z, r24
     912:	19 c0       	rjmp	.+50     	; 0x946 <listenEncoders+0x2e2>
				}
			}else
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])--;
     914:	89 85       	ldd	r24, Y+9	; 0x09
     916:	f9 01       	movw	r30, r18
     918:	e8 0f       	add	r30, r24
     91a:	f1 1d       	adc	r31, r1
     91c:	e5 51       	subi	r30, 0x15	; 21
     91e:	ff 4f       	sbci	r31, 0xFF	; 255
     920:	80 81       	ld	r24, Z
     922:	81 50       	subi	r24, 0x01	; 1
     924:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>3)
     926:	89 85       	ldd	r24, Y+9	; 0x09
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	f9 01       	movw	r30, r18
     92c:	e8 0f       	add	r30, r24
     92e:	f9 1f       	adc	r31, r25
     930:	e5 51       	subi	r30, 0x15	; 21
     932:	ff 4f       	sbci	r31, 0xFF	; 255
     934:	40 81       	ld	r20, Z
     936:	44 30       	cpi	r20, 0x04	; 4
     938:	30 f0       	brcs	.+12     	; 0x946 <listenEncoders+0x2e2>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=0;
     93a:	82 0f       	add	r24, r18
     93c:	93 1f       	adc	r25, r19
     93e:	fc 01       	movw	r30, r24
     940:	e5 51       	subi	r30, 0x15	; 21
     942:	ff 4f       	sbci	r31, 0xFF	; 255
     944:	10 82       	st	Z, r1
				}
			}
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
     946:	89 85       	ldd	r24, Y+9	; 0x09
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	f9 01       	movw	r30, r18
     94c:	e8 0f       	add	r30, r24
     94e:	f9 1f       	adc	r31, r25
     950:	e5 51       	subi	r30, 0x15	; 21
     952:	ff 4f       	sbci	r31, 0xFF	; 255
     954:	40 81       	ld	r20, Z
     956:	4d 7f       	andi	r20, 0xFD	; 253
     958:	79 f4       	brne	.+30     	; 0x978 <listenEncoders+0x314>
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
     95a:	28 0f       	add	r18, r24
     95c:	39 1f       	adc	r19, r25
     95e:	f9 01       	movw	r30, r18
     960:	e8 56       	subi	r30, 0x68	; 104
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	d9 01       	movw	r26, r18
     966:	a8 55       	subi	r26, 0x58	; 88
     968:	bf 4f       	sbci	r27, 0xFF	; 255
     96a:	2a eb       	ldi	r18, 0xBA	; 186
     96c:	4f ef       	ldi	r20, 0xFF	; 255
     96e:	60 81       	ld	r22, Z
     970:	8c 91       	ld	r24, X
     972:	0e 94 5d 17 	call	0x2eba	; 0x2eba <setTrackVolume>
     976:	92 c0       	rjmp	.+292    	; 0xa9c <listenEncoders+0x438>
			}else
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],
     978:	f9 01       	movw	r30, r18
     97a:	e8 0f       	add	r30, r24
     97c:	f9 1f       	adc	r31, r25
     97e:	ef 01       	movw	r28, r30
     980:	c8 56       	subi	r28, 0x68	; 104
     982:	df 4f       	sbci	r29, 0xFF	; 255
     984:	df 01       	movw	r26, r30
     986:	a8 55       	subi	r26, 0x58	; 88
     988:	bf 4f       	sbci	r27, 0xFF	; 255
     98a:	20 a5       	ldd	r18, Z+40	; 0x28
     98c:	40 ad       	ldd	r20, Z+56	; 0x38
     98e:	68 81       	ld	r22, Y
     990:	8c 91       	ld	r24, X
     992:	0e 94 5d 17 	call	0x2eba	; 0x2eba <setTrackVolume>
     996:	82 c0       	rjmp	.+260    	; 0xa9c <listenEncoders+0x438>
				currentPattern->trackMainVolumeLSB[currentGlobals->currentTrack],currentPattern->trackMainVolumeMSB[currentGlobals->currentTrack]);		
			}
			break;
			
			case TrackMenuArrow5:
			if(menuSub==1)
     998:	a1 30       	cpi	r26, 0x01	; 1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <listenEncoders+0x33e>
			{
				currentGlobals->menuState = TrackMenuArrow4;
     99c:	84 e2       	ldi	r24, 0x24	; 36
     99e:	8a 87       	std	Y+10, r24	; 0x0a
     9a0:	7d c0       	rjmp	.+250    	; 0xa9c <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow1;
     9a2:	81 e2       	ldi	r24, 0x21	; 33
     9a4:	8a 87       	std	Y+10, r24	; 0x0a
     9a6:	7a c0       	rjmp	.+244    	; 0xa9c <listenEncoders+0x438>
			}
			break;
			
			case TrackMenuArrow5Select:;
			uint16_t sustainTime = (currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack])|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);	
     9a8:	49 85       	ldd	r20, Y+9	; 0x09
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	b9 01       	movw	r22, r18
     9ae:	64 0f       	add	r22, r20
     9b0:	75 1f       	adc	r23, r21
     9b2:	fb 01       	movw	r30, r22
     9b4:	e5 53       	subi	r30, 0x35	; 53
     9b6:	ff 4f       	sbci	r31, 0xFF	; 255
     9b8:	80 81       	ld	r24, Z
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	98 2f       	mov	r25, r24
     9be:	88 27       	eor	r24, r24
     9c0:	70 96       	adiw	r30, 0x10	; 16
     9c2:	60 81       	ld	r22, Z
     9c4:	86 2b       	or	r24, r22
			if(menuSub==1)
     9c6:	a1 30       	cpi	r26, 0x01	; 1
     9c8:	71 f4       	brne	.+28     	; 0x9e6 <listenEncoders+0x382>
			{
				if((currentGlobals->currentGPButtons)&(0x04))
     9ca:	6a 81       	ldd	r22, Y+2	; 0x02
     9cc:	62 ff       	sbrs	r22, 2
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <listenEncoders+0x370>
				{
					sustainTime++;
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <listenEncoders+0x374>
				}
				else
				{
					sustainTime = sustainTime+236;
     9d4:	84 51       	subi	r24, 0x14	; 20
     9d6:	9f 4f       	sbci	r25, 0xFF	; 255
     9d8:	81 36       	cpi	r24, 0x61	; 97
     9da:	ea ee       	ldi	r30, 0xEA	; 234
     9dc:	9e 07       	cpc	r25, r30
     9de:	80 f0       	brcs	.+32     	; 0xa00 <listenEncoders+0x39c>
     9e0:	80 e6       	ldi	r24, 0x60	; 96
     9e2:	9a ee       	ldi	r25, 0xEA	; 234
     9e4:	0d c0       	rjmp	.+26     	; 0xa00 <listenEncoders+0x39c>
				{
					sustainTime = 60000;
				}
			}else
			{
				if((currentGlobals->currentGPButtons)&(0x04))
     9e6:	6a 81       	ldd	r22, Y+2	; 0x02
     9e8:	62 ff       	sbrs	r22, 2
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <listenEncoders+0x38c>
				{
					sustainTime--;
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <listenEncoders+0x390>
				}else
				{	
					sustainTime = sustainTime - 236;
     9f0:	8c 5e       	subi	r24, 0xEC	; 236
     9f2:	91 09       	sbc	r25, r1
				}
				
				if(sustainTime>60000)
     9f4:	81 36       	cpi	r24, 0x61	; 97
     9f6:	fa ee       	ldi	r31, 0xEA	; 234
     9f8:	9f 07       	cpc	r25, r31
     9fa:	10 f0       	brcs	.+4      	; 0xa00 <listenEncoders+0x39c>
				{
					sustainTime = 0;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
			currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack] = (sustainTime>>8);
     a00:	42 0f       	add	r20, r18
     a02:	53 1f       	adc	r21, r19
     a04:	fa 01       	movw	r30, r20
     a06:	e5 53       	subi	r30, 0x35	; 53
     a08:	ff 4f       	sbci	r31, 0xFF	; 255
     a0a:	90 83       	st	Z, r25
			currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] = sustainTime; //upper bits will be truncated.
     a0c:	99 85       	ldd	r25, Y+9	; 0x09
     a0e:	29 0f       	add	r18, r25
     a10:	31 1d       	adc	r19, r1
     a12:	f9 01       	movw	r30, r18
     a14:	e5 52       	subi	r30, 0x25	; 37
     a16:	ff 4f       	sbci	r31, 0xFF	; 255
     a18:	80 83       	st	Z, r24

			break;
     a1a:	40 c0       	rjmp	.+128    	; 0xa9c <listenEncoders+0x438>
			
			case GlobalMenuArrow1:
			if(menuSub==1)
     a1c:	a1 30       	cpi	r26, 0x01	; 1
     a1e:	19 f4       	brne	.+6      	; 0xa26 <listenEncoders+0x3c2>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     a20:	81 e3       	ldi	r24, 0x31	; 49
     a22:	8a 87       	std	Y+10, r24	; 0x0a
     a24:	3b c0       	rjmp	.+118    	; 0xa9c <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     a26:	82 e3       	ldi	r24, 0x32	; 50
     a28:	8a 87       	std	Y+10, r24	; 0x0a
     a2a:	38 c0       	rjmp	.+112    	; 0xa9c <listenEncoders+0x438>
			}
			break;
			
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
     a2c:	a1 30       	cpi	r26, 0x01	; 1
     a2e:	49 f4       	brne	.+18     	; 0xa42 <listenEncoders+0x3de>
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     a30:	88 89       	ldd	r24, Y+16	; 0x10
     a32:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->midiChannel>15)
     a34:	80 31       	cpi	r24, 0x10	; 16
     a36:	10 f4       	brcc	.+4      	; 0xa3c <listenEncoders+0x3d8>
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     a38:	88 8b       	std	Y+16, r24	; 0x10
     a3a:	30 c0       	rjmp	.+96     	; 0xa9c <listenEncoders+0x438>
				if(currentGlobals->midiChannel>15)
				{
					currentGlobals->midiChannel=15;
     a3c:	8f e0       	ldi	r24, 0x0F	; 15
     a3e:	88 8b       	std	Y+16, r24	; 0x10
     a40:	2d c0       	rjmp	.+90     	; 0xa9c <listenEncoders+0x438>
				}
			}
			else
			{
				//decrement midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)-1;
     a42:	88 89       	ldd	r24, Y+16	; 0x10
     a44:	81 50       	subi	r24, 0x01	; 1
     a46:	10 f0       	brcs	.+4      	; 0xa4c <listenEncoders+0x3e8>
     a48:	88 8b       	std	Y+16, r24	; 0x10
     a4a:	28 c0       	rjmp	.+80     	; 0xa9c <listenEncoders+0x438>
				if(currentGlobals->midiChannel>254)
				{
					currentGlobals->midiChannel=0;
     a4c:	18 8a       	std	Y+16, r1	; 0x10
     a4e:	26 c0       	rjmp	.+76     	; 0xa9c <listenEncoders+0x438>
				}
			}
			break;
			
			case GlobalMenuArrow2:
			if(menuSub==1)
     a50:	a1 30       	cpi	r26, 0x01	; 1
     a52:	19 f4       	brne	.+6      	; 0xa5a <listenEncoders+0x3f6>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     a54:	81 e3       	ldi	r24, 0x31	; 49
     a56:	8a 87       	std	Y+10, r24	; 0x0a
     a58:	21 c0       	rjmp	.+66     	; 0xa9c <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     a5a:	82 e3       	ldi	r24, 0x32	; 50
     a5c:	8a 87       	std	Y+10, r24	; 0x0a
     a5e:	1e c0       	rjmp	.+60     	; 0xa9c <listenEncoders+0x438>
			break;
			
			case GlobalMenuArrow2Select:;
			//change midi note for selected track.
			//midi range is 0 to 127.
			uint8_t currentMidiNote = currentGlobals->midiTrackNote[currentGlobals->currentTrack];
     a60:	e9 85       	ldd	r30, Y+9	; 0x09
     a62:	2e 2f       	mov	r18, r30
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	ce 01       	movw	r24, r28
     a68:	82 0f       	add	r24, r18
     a6a:	93 1f       	adc	r25, r19
     a6c:	fc 01       	movw	r30, r24
     a6e:	81 89       	ldd	r24, Z+17	; 0x11
			if(menuSub==1)
     a70:	a1 30       	cpi	r26, 0x01	; 1
     a72:	21 f4       	brne	.+8      	; 0xa7c <listenEncoders+0x418>
			{
				//not 100% sure how to set this up.
				currentMidiNote++;
     a74:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentMidiNote>127)
     a76:	32 f4       	brpl	.+12     	; 0xa84 <listenEncoders+0x420>
				{
					currentMidiNote = 127;
     a78:	8f e7       	ldi	r24, 0x7F	; 127
     a7a:	04 c0       	rjmp	.+8      	; 0xa84 <listenEncoders+0x420>
				}
			}else
			{
				currentMidiNote--;
     a7c:	81 50       	subi	r24, 0x01	; 1
				if(currentMidiNote>128)
     a7e:	81 38       	cpi	r24, 0x81	; 129
     a80:	08 f0       	brcs	.+2      	; 0xa84 <listenEncoders+0x420>
				{
					currentMidiNote = 0;
     a82:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			currentGlobals->midiTrackNote[currentGlobals->currentTrack] = currentMidiNote;
     a84:	f9 01       	movw	r30, r18
     a86:	ec 0f       	add	r30, r28
     a88:	fd 1f       	adc	r31, r29
     a8a:	81 8b       	std	Z+17, r24	; 0x11
			break;
     a8c:	07 c0       	rjmp	.+14     	; 0xa9c <listenEncoders+0x438>
			
			case GlobalMenuArrow3:
			//currently unreachable, no settings live here atm		
			if(menuSub==1)
     a8e:	a1 30       	cpi	r26, 0x01	; 1
     a90:	19 f4       	brne	.+6      	; 0xa98 <listenEncoders+0x434>
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     a92:	82 e3       	ldi	r24, 0x32	; 50
     a94:	8a 87       	std	Y+10, r24	; 0x0a
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <listenEncoders+0x438>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     a98:	81 e3       	ldi	r24, 0x31	; 49
     a9a:	8a 87       	std	Y+10, r24	; 0x0a
			
			case GlobalMenuArrow3Select:
			//nothing to put here yet.
			break;
		}
		bottomEncoderLastValue = bottomEncoderValue;
     a9c:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <bottomEncoderValue>
     aa0:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <bottomEncoderLastValue>
		//menuSub=0;
	}
}
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <listenEnoderReset>:
uint8_t listenEnoderReset()
{
	uint8_t returnMe = 2;
	if(topEncoderValue!=topEncoderLastValue){
     aaa:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <topEncoderValue>
     aae:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <topEncoderLastValue>
     ab2:	98 17       	cp	r25, r24
     ab4:	21 f0       	breq	.+8      	; 0xabe <listenEnoderReset+0x14>
	returnMe = topEncoderValue%2; //should be 0 or 1.
     ab6:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <topEncoderValue>
     aba:	81 70       	andi	r24, 0x01	; 1
     abc:	08 95       	ret
		//menuSub=0;
	}
}
uint8_t listenEnoderReset()
{
	uint8_t returnMe = 2;
     abe:	82 e0       	ldi	r24, 0x02	; 2
	if(topEncoderValue!=topEncoderLastValue){
	returnMe = topEncoderValue%2; //should be 0 or 1.
	}
	return returnMe;
}
     ac0:	08 95       	ret

00000ac2 <initArrays>:
	//{
	//	currentGlobals->timerFlag = 0; //we may want to change this some other point in the code, like when everything reliant on this flag is complete. 
		//just so we're not wasting a conditional every time. 
	//}
	
}
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	ec 01       	movw	r28, r24
     acc:	fa 01       	movw	r30, r20
     ace:	01 90       	ld	r0, Z+
     ad0:	00 20       	and	r0, r0
     ad2:	e9 f7       	brne	.-6      	; 0xace <initArrays+0xc>
     ad4:	31 97       	sbiw	r30, 0x01	; 1
     ad6:	8f 01       	movw	r16, r30
     ad8:	04 1b       	sub	r16, r20
     ada:	15 0b       	sbc	r17, r21
     adc:	90 2f       	mov	r25, r16
     ade:	84 e1       	ldi	r24, 0x14	; 20
     ae0:	80 1b       	sub	r24, r16
     ae2:	00 23       	and	r16, r16
     ae4:	a9 f0       	breq	.+42     	; 0xb10 <initArrays+0x4e>
     ae6:	fa 01       	movw	r30, r20
     ae8:	25 e1       	ldi	r18, 0x15	; 21
     aea:	26 9f       	mul	r18, r22
     aec:	d0 01       	movw	r26, r0
     aee:	27 9f       	mul	r18, r23
     af0:	b0 0d       	add	r27, r0
     af2:	11 24       	eor	r1, r1
     af4:	ac 0f       	add	r26, r28
     af6:	bd 1f       	adc	r27, r29
     af8:	2f ef       	ldi	r18, 0xFF	; 255
     afa:	20 0f       	add	r18, r16
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	2f 5f       	subi	r18, 0xFF	; 255
     b00:	3f 4f       	sbci	r19, 0xFF	; 255
     b02:	42 0f       	add	r20, r18
     b04:	53 1f       	adc	r21, r19
     b06:	21 91       	ld	r18, Z+
     b08:	2d 93       	st	X+, r18
     b0a:	e4 17       	cp	r30, r20
     b0c:	f5 07       	cpc	r31, r21
     b0e:	d9 f7       	brne	.-10     	; 0xb06 <initArrays+0x44>
     b10:	88 23       	and	r24, r24
     b12:	89 f0       	breq	.+34     	; 0xb36 <initArrays+0x74>
     b14:	45 e1       	ldi	r20, 0x15	; 21
     b16:	46 9f       	mul	r20, r22
     b18:	90 01       	movw	r18, r0
     b1a:	47 9f       	mul	r20, r23
     b1c:	30 0d       	add	r19, r0
     b1e:	11 24       	eor	r1, r1
     b20:	c2 0f       	add	r28, r18
     b22:	d3 1f       	adc	r29, r19
     b24:	08 0f       	add	r16, r24
     b26:	80 e2       	ldi	r24, 0x20	; 32
     b28:	fe 01       	movw	r30, r28
     b2a:	e9 0f       	add	r30, r25
     b2c:	f1 1d       	adc	r31, r1
     b2e:	80 83       	st	Z, r24
     b30:	9f 5f       	subi	r25, 0xFF	; 255
     b32:	90 13       	cpse	r25, r16
     b34:	f9 cf       	rjmp	.-14     	; 0xb28 <initArrays+0x66>
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	08 95       	ret

00000b40 <initBank>:
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	ac 01       	movw	r20, r24
     b46:	fc 01       	movw	r30, r24
     b48:	e8 55       	subi	r30, 0x58	; 88
     b4a:	ff 4f       	sbci	r31, 0xFF	; 255
     b4c:	ec 01       	movw	r28, r24
     b4e:	c8 57       	subi	r28, 0x78	; 120
     b50:	df 4f       	sbci	r29, 0xFF	; 255
     b52:	dc 01       	movw	r26, r24
     b54:	a5 51       	subi	r26, 0x15	; 21
     b56:	bf 4f       	sbci	r27, 0xFF	; 255
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	31 e0       	ldi	r19, 0x01	; 1
     b5c:	23 e0       	ldi	r18, 0x03	; 3
     b5e:	9f 5f       	subi	r25, 0xFF	; 255
     b60:	91 93       	st	Z+, r25
     b62:	39 93       	st	Y+, r19
     b64:	2d 93       	st	X+, r18
     b66:	12 aa       	std	Z+50, r1	; 0x32
     b68:	12 a2       	std	Z+34, r1	; 0x22
     b6a:	90 31       	cpi	r25, 0x10	; 16
     b6c:	c1 f7       	brne	.-16     	; 0xb5e <initBank+0x1e>
     b6e:	fa 01       	movw	r30, r20
     b70:	e5 50       	subi	r30, 0x05	; 5
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	9a 01       	movw	r18, r20
     b76:	25 58       	subi	r18, 0x85	; 133
     b78:	3e 4f       	sbci	r19, 0xFE	; 254
     b7a:	11 92       	st	Z+, r1
     b7c:	11 92       	st	Z+, r1
     b7e:	e2 17       	cp	r30, r18
     b80:	f3 07       	cpc	r31, r19
     b82:	d9 f7       	brne	.-10     	; 0xb7a <initBank+0x3a>
     b84:	fa 01       	movw	r30, r20
     b86:	e8 53       	subi	r30, 0x38	; 56
     b88:	ff 4f       	sbci	r31, 0xFF	; 255
     b8a:	88 e7       	ldi	r24, 0x78	; 120
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	91 83       	std	Z+1, r25	; 0x01
     b90:	80 83       	st	Z, r24
     b92:	32 96       	adiw	r30, 0x02	; 2
     b94:	80 e1       	ldi	r24, 0x10	; 16
     b96:	80 83       	st	Z, r24
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <initGlobals>:
     b9e:	fc 01       	movw	r30, r24
     ba0:	11 82       	std	Z+1, r1	; 0x01
     ba2:	10 82       	st	Z, r1
     ba4:	12 82       	std	Z+2, r1	; 0x02
     ba6:	17 82       	std	Z+7, r1	; 0x07
     ba8:	10 86       	std	Z+8, r1	; 0x08
     baa:	11 86       	std	Z+9, r1	; 0x09
     bac:	12 86       	std	Z+10, r1	; 0x0a
     bae:	13 86       	std	Z+11, r1	; 0x0b
     bb0:	14 86       	std	Z+12, r1	; 0x0c
     bb2:	15 86       	std	Z+13, r1	; 0x0d
     bb4:	16 86       	std	Z+14, r1	; 0x0e
     bb6:	17 86       	std	Z+15, r1	; 0x0f
     bb8:	dc 01       	movw	r26, r24
     bba:	ab 55       	subi	r26, 0x5B	; 91
     bbc:	bf 4f       	sbci	r27, 0xFF	; 255
     bbe:	1d 92       	st	X+, r1
     bc0:	1d 92       	st	X+, r1
     bc2:	1d 92       	st	X+, r1
     bc4:	1c 92       	st	X, r1
     bc6:	13 97       	sbiw	r26, 0x03	; 3
     bc8:	a8 5b       	subi	r26, 0xB8	; 184
     bca:	bf 4f       	sbci	r27, 0xFF	; 255
     bcc:	1d 92       	st	X+, r1
     bce:	1d 92       	st	X+, r1
     bd0:	1d 92       	st	X+, r1
     bd2:	1c 92       	st	X, r1
     bd4:	13 97       	sbiw	r26, 0x03	; 3
     bd6:	12 97       	sbiw	r26, 0x02	; 2
     bd8:	1d 92       	st	X+, r1
     bda:	1c 92       	st	X, r1
     bdc:	14 82       	std	Z+4, r1	; 0x04
     bde:	13 82       	std	Z+3, r1	; 0x03
     be0:	16 82       	std	Z+6, r1	; 0x06
     be2:	15 82       	std	Z+5, r1	; 0x05
     be4:	61 30       	cpi	r22, 0x01	; 1
     be6:	09 f5       	brne	.+66     	; 0xc2a <initGlobals+0x8c>
     be8:	10 8a       	std	Z+16, r1	; 0x10
     bea:	84 e2       	ldi	r24, 0x24	; 36
     bec:	81 8b       	std	Z+17, r24	; 0x11
     bee:	85 e2       	ldi	r24, 0x25	; 37
     bf0:	82 8b       	std	Z+18, r24	; 0x12
     bf2:	86 e2       	ldi	r24, 0x26	; 38
     bf4:	83 8b       	std	Z+19, r24	; 0x13
     bf6:	87 e2       	ldi	r24, 0x27	; 39
     bf8:	84 8b       	std	Z+20, r24	; 0x14
     bfa:	88 e2       	ldi	r24, 0x28	; 40
     bfc:	85 8b       	std	Z+21, r24	; 0x15
     bfe:	89 e2       	ldi	r24, 0x29	; 41
     c00:	86 8b       	std	Z+22, r24	; 0x16
     c02:	8a e2       	ldi	r24, 0x2A	; 42
     c04:	87 8b       	std	Z+23, r24	; 0x17
     c06:	8b e2       	ldi	r24, 0x2B	; 43
     c08:	80 8f       	std	Z+24, r24	; 0x18
     c0a:	8c e2       	ldi	r24, 0x2C	; 44
     c0c:	81 8f       	std	Z+25, r24	; 0x19
     c0e:	8d e2       	ldi	r24, 0x2D	; 45
     c10:	82 8f       	std	Z+26, r24	; 0x1a
     c12:	8e e2       	ldi	r24, 0x2E	; 46
     c14:	83 8f       	std	Z+27, r24	; 0x1b
     c16:	8f e2       	ldi	r24, 0x2F	; 47
     c18:	84 8f       	std	Z+28, r24	; 0x1c
     c1a:	80 e3       	ldi	r24, 0x30	; 48
     c1c:	85 8f       	std	Z+29, r24	; 0x1d
     c1e:	81 e3       	ldi	r24, 0x31	; 49
     c20:	86 8f       	std	Z+30, r24	; 0x1e
     c22:	82 e3       	ldi	r24, 0x32	; 50
     c24:	87 8f       	std	Z+31, r24	; 0x1f
     c26:	83 e3       	ldi	r24, 0x33	; 51
     c28:	80 a3       	std	Z+32, r24	; 0x20
     c2a:	08 95       	ret

00000c2c <initTimer>:
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     c32:	93 e0       	ldi	r25, 0x03	; 3
     c34:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
     c38:	92 e3       	ldi	r25, 0x32	; 50
     c3a:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
     c3e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     c42:	08 95       	ret

00000c44 <factoryResetCheck>:
void factoryResetCheck(uint8_t *factoryReset, Pattern *currentPattern, Globals *currentGlobals)
{
     c44:	af 92       	push	r10
     c46:	bf 92       	push	r11
     c48:	cf 92       	push	r12
     c4a:	df 92       	push	r13
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	65 97       	sbiw	r28, 0x15	; 21
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
	if(((~PINA)&0x01)&&((~PINL)&0x01))
     c68:	00 99       	sbic	0x00, 0	; 0
     c6a:	6f c0       	rjmp	.+222    	; 0xd4a <factoryResetCheck+0x106>
     c6c:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     c70:	20 fd       	sbrc	r18, 0
     c72:	6b c0       	rjmp	.+214    	; 0xd4a <factoryResetCheck+0x106>
     c74:	8a 01       	movw	r16, r20
     c76:	6b 01       	movw	r12, r22
     c78:	7c 01       	movw	r14, r24
	{//if both buttons are pressed on startup, wait 4 seconds
		outputS("FactoryReset?       ",0);
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	80 e7       	ldi	r24, 0x70	; 112
     c80:	92 e0       	ldi	r25, 0x02	; 2
     c82:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <outputS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c86:	2f ef       	ldi	r18, 0xFF	; 255
     c88:	84 e3       	ldi	r24, 0x34	; 52
     c8a:	9c e0       	ldi	r25, 0x0C	; 12
     c8c:	21 50       	subi	r18, 0x01	; 1
     c8e:	80 40       	sbci	r24, 0x00	; 0
     c90:	90 40       	sbci	r25, 0x00	; 0
     c92:	e1 f7       	brne	.-8      	; 0xc8c <factoryResetCheck+0x48>
     c94:	00 c0       	rjmp	.+0      	; 0xc96 <factoryResetCheck+0x52>
     c96:	00 00       	nop
		_delay_ms(4000);

		if(((~PINA)&0x01)&&((~PINL)&0x01))
     c98:	00 99       	sbic	0x00, 0	; 0
     c9a:	57 c0       	rjmp	.+174    	; 0xd4a <factoryResetCheck+0x106>
     c9c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     ca0:	80 fd       	sbrc	r24, 0
     ca2:	53 c0       	rjmp	.+166    	; 0xd4a <factoryResetCheck+0x106>
		{
			
			uint8_t choice = 2;
			uint8_t select = 0;
			char resetArray[21] = "yes?        no?     ";
     ca4:	85 e1       	ldi	r24, 0x15	; 21
     ca6:	ea e9       	ldi	r30, 0x9A	; 154
     ca8:	f2 e0       	ldi	r31, 0x02	; 2
     caa:	de 01       	movw	r26, r28
     cac:	11 96       	adiw	r26, 0x01	; 1
     cae:	01 90       	ld	r0, Z+
     cb0:	0d 92       	st	X+, r0
     cb2:	8a 95       	dec	r24
     cb4:	e1 f7       	brne	.-8      	; 0xcae <factoryResetCheck+0x6a>
			while(choice==2){
				outputS(resetArray,1);
				select = listenEnoderReset();
				if(select==0)
				{
					resetArray[4] = 8;
     cb6:	68 94       	set
     cb8:	aa 24       	eor	r10, r10
     cba:	a3 f8       	bld	r10, 3
					resetArray[15] = ' ';
     cbc:	68 94       	set
     cbe:	bb 24       	eor	r11, r11
     cc0:	b5 f8       	bld	r11, 5
			
			uint8_t choice = 2;
			uint8_t select = 0;
			char resetArray[21] = "yes?        no?     ";
			while(choice==2){
				outputS(resetArray,1);
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	ce 01       	movw	r24, r28
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <outputS>
				select = listenEnoderReset();
     cce:	ed de       	rcall	.-550    	; 0xaaa <listenEnoderReset>
				if(select==0)
     cd0:	81 11       	cpse	r24, r1
     cd2:	05 c0       	rjmp	.+10     	; 0xcde <factoryResetCheck+0x9a>
				{
					resetArray[4] = 8;
     cd4:	ad 82       	std	Y+5, r10	; 0x05
					resetArray[15] = ' ';
     cd6:	b8 8a       	std	Y+16, r11	; 0x10
				if(select==1)
				{
					resetArray[4] = ' ';
					resetArray[15] = 8;
				}
				if((~PINB)&(1<<5))
     cd8:	1d 99       	sbic	0x03, 5	; 3
     cda:	f3 cf       	rjmp	.-26     	; 0xcc2 <factoryResetCheck+0x7e>
     cdc:	0b c0       	rjmp	.+22     	; 0xcf4 <factoryResetCheck+0xb0>
				if(select==0)
				{
					resetArray[4] = 8;
					resetArray[15] = ' ';
				}
				if(select==1)
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	29 f4       	brne	.+10     	; 0xcec <factoryResetCheck+0xa8>
				{
					resetArray[4] = ' ';
     ce2:	bd 82       	std	Y+5, r11	; 0x05
					resetArray[15] = 8;
     ce4:	a8 8a       	std	Y+16, r10	; 0x10
				}
				if((~PINB)&(1<<5))
     ce6:	1d 99       	sbic	0x03, 5	; 3
     ce8:	ec cf       	rjmp	.-40     	; 0xcc2 <factoryResetCheck+0x7e>
     cea:	2f c0       	rjmp	.+94     	; 0xd4a <factoryResetCheck+0x106>
     cec:	1d 99       	sbic	0x03, 5	; 3
     cee:	e9 cf       	rjmp	.-46     	; 0xcc2 <factoryResetCheck+0x7e>
		{
			
			uint8_t choice = 2;
			uint8_t select = 0;
			char resetArray[21] = "yes?        no?     ";
			while(choice==2){
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	39 f3       	breq	.-50     	; 0xcc2 <factoryResetCheck+0x7e>
				{
					choice = select; //break out of while loop, and reset, or not.
				}
			}
			
			if(select==0) //yes was selected.
     cf4:	81 11       	cpse	r24, r1
     cf6:	29 c0       	rjmp	.+82     	; 0xd4a <factoryResetCheck+0x106>
			{
				outputS("Progress:           ",2);
     cf8:	62 e0       	ldi	r22, 0x02	; 2
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	85 e8       	ldi	r24, 0x85	; 133
     cfe:	92 e0       	ldi	r25, 0x02	; 2
     d00:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <outputS>
				(*factoryReset)=1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	f7 01       	movw	r30, r14
     d08:	80 83       	st	Z, r24
				initGlobals(currentGlobals, *factoryReset);
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	c8 01       	movw	r24, r16
     d0e:	47 df       	rcall	.-370    	; 0xb9e <initGlobals>
				factoryResetEeprom(*currentPattern);
     d10:	8d b7       	in	r24, 0x3d	; 61
     d12:	9e b7       	in	r25, 0x3e	; 62
     d14:	8b 57       	subi	r24, 0x7B	; 123
     d16:	91 40       	sbci	r25, 0x01	; 1
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	9e bf       	out	0x3e, r25	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	8d bf       	out	0x3d, r24	; 61
     d22:	ad b7       	in	r26, 0x3d	; 61
     d24:	be b7       	in	r27, 0x3e	; 62
     d26:	11 96       	adiw	r26, 0x01	; 1
     d28:	8b e7       	ldi	r24, 0x7B	; 123
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	f6 01       	movw	r30, r12
     d2e:	01 90       	ld	r0, Z+
     d30:	0d 92       	st	X+, r0
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	e1 f7       	brne	.-8      	; 0xd2e <factoryResetCheck+0xea>
     d36:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <factoryResetEeprom>
				globalWrite(currentGlobals);
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	c8 01       	movw	r24, r16
     d46:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <globalWrite>
		}
		
	}
	
	
     d4a:	65 96       	adiw	r28, 0x15	; 21
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	ff 90       	pop	r15
     d60:	ef 90       	pop	r14
     d62:	df 90       	pop	r13
     d64:	cf 90       	pop	r12
     d66:	bf 90       	pop	r11
     d68:	af 90       	pop	r10
     d6a:	08 95       	ret

00000d6c <startADCConversion>:



uint8_t startADCConversion()
{
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     d6c:	ea e7       	ldi	r30, 0x7A	; 122
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	80 64       	ori	r24, 0x40	; 64
     d74:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     d76:	80 81       	ld	r24, Z
     d78:	86 fd       	sbrc	r24, 6
     d7a:	fd cf       	rjmp	.-6      	; 0xd76 <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.	
     d7c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
     d80:	08 95       	ret

00000d82 <initADC>:

void initADC()
{
	DDRF |= 0B00000111; //init pins F2, 1, and 0 as select pins on the external mux.
     d82:	80 b3       	in	r24, 0x10	; 16
     d84:	87 60       	ori	r24, 0x07	; 7
     d86:	80 bb       	out	0x10, r24	; 16
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     d88:	80 e2       	ldi	r24, 0x20	; 32
     d8a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     d8e:	87 e8       	ldi	r24, 0x87	; 135
     d90:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     d94:	88 e0       	ldi	r24, 0x08	; 8
     d96:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     da0:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     da4:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <knobBufferCounter>
	startADCConversion();
     da8:	e1 cf       	rjmp	.-62     	; 0xd6c <startADCConversion>
     daa:	08 95       	ret

00000dac <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     dac:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     dae:	98 2f       	mov	r25, r24
     db0:	96 95       	lsr	r25
     db2:	96 95       	lsr	r25
     db4:	2f e2       	ldi	r18, 0x2F	; 47
     db6:	92 9f       	mul	r25, r18
     db8:	91 2d       	mov	r25, r1
     dba:	11 24       	eor	r1, r1
     dbc:	96 95       	lsr	r25
     dbe:	2c e2       	ldi	r18, 0x2C	; 44
     dc0:	92 9f       	mul	r25, r18
     dc2:	80 19       	sub	r24, r0
     dc4:	11 24       	eor	r1, r1
     dc6:	98 2f       	mov	r25, r24
	if(select<40)
     dc8:	88 32       	cpi	r24, 0x28	; 40
     dca:	70 f4       	brcc	.+28     	; 0xde8 <selectKnob+0x3c>
	{
		ADCSRB = (1 << MUX5);
     dcc:	88 e0       	ldi	r24, 0x08	; 8
     dce:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     dd2:	c9 2f       	mov	r28, r25
     dd4:	c7 70       	andi	r28, 0x07	; 7
		//uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplexer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     dd6:	96 95       	lsr	r25
     dd8:	96 95       	lsr	r25
     dda:	96 95       	lsr	r25
     ddc:	90 62       	ori	r25, 0x20	; 32
     dde:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changeover.
     de2:	c4 df       	rcall	.-120    	; 0xd6c <startADCConversion>
		

		//then the external multiplexer
		PORTF = muxSelect;
     de4:	c1 bb       	out	0x11, r28	; 17
     de6:	20 c0       	rjmp	.+64     	; 0xe28 <selectKnob+0x7c>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     de8:	89 32       	cpi	r24, 0x29	; 41
     dea:	71 f0       	breq	.+28     	; 0xe08 <selectKnob+0x5c>
     dec:	18 f4       	brcc	.+6      	; 0xdf4 <selectKnob+0x48>
     dee:	88 32       	cpi	r24, 0x28	; 40
     df0:	31 f0       	breq	.+12     	; 0xdfe <selectKnob+0x52>
     df2:	1a c0       	rjmp	.+52     	; 0xe28 <selectKnob+0x7c>
     df4:	8a 32       	cpi	r24, 0x2A	; 42
     df6:	69 f0       	breq	.+26     	; 0xe12 <selectKnob+0x66>
     df8:	8b 32       	cpi	r24, 0x2B	; 43
     dfa:	81 f0       	breq	.+32     	; 0xe1c <selectKnob+0x70>
     dfc:	15 c0       	rjmp	.+42     	; 0xe28 <selectKnob+0x7c>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     dfe:	85 e2       	ldi	r24, 0x25	; 37
     e00:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     e04:	b3 df       	rcall	.-154    	; 0xd6c <startADCConversion>
		break;
     e06:	10 c0       	rjmp	.+32     	; 0xe28 <selectKnob+0x7c>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     e08:	86 e2       	ldi	r24, 0x26	; 38
     e0a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     e0e:	ae df       	rcall	.-164    	; 0xd6c <startADCConversion>
		break;
     e10:	0b c0       	rjmp	.+22     	; 0xe28 <selectKnob+0x7c>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     e12:	87 e2       	ldi	r24, 0x27	; 39
     e14:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     e18:	a9 df       	rcall	.-174    	; 0xd6c <startADCConversion>
		break;
     e1a:	06 c0       	rjmp	.+12     	; 0xe28 <selectKnob+0x7c>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     e1c:	80 e2       	ldi	r24, 0x20	; 32
     e1e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     e22:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     e26:	a2 df       	rcall	.-188    	; 0xd6c <startADCConversion>
		break;
		}
	
	}
	
}
     e28:	cf 91       	pop	r28
     e2a:	08 95       	ret

00000e2c <updateKnob>:

void updateKnob(uint8_t select, Globals *currentGlobals)
{
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	8b 01       	movw	r16, r22
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
     e36:	c8 2f       	mov	r28, r24
     e38:	d0 e0       	ldi	r29, 0x00	; 0
     e3a:	98 df       	rcall	.-208    	; 0xd6c <startADCConversion>
     e3c:	f8 01       	movw	r30, r16
     e3e:	ec 0f       	add	r30, r28
     e40:	fd 1f       	adc	r31, r29
     e42:	81 a3       	std	Z+33, r24	; 0x21
		currentGlobals->filteredKnobBuffer[select] = 
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
     e44:	e3 5b       	subi	r30, 0xB3	; 179
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	40 81       	ld	r20, Z

void updateKnob(uint8_t select, Globals *currentGlobals)
{
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
		currentGlobals->filteredKnobBuffer[select] = 
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	84 1b       	sub	r24, r20
     e4e:	91 09       	sbc	r25, r1
     e50:	9c 01       	movw	r18, r24
     e52:	12 f4       	brpl	.+4      	; 0xe58 <updateKnob+0x2c>
     e54:	2f 5f       	subi	r18, 0xFF	; 255
     e56:	3f 4f       	sbci	r19, 0xFF	; 255
     e58:	35 95       	asr	r19
     e5a:	27 95       	ror	r18
     e5c:	24 0f       	add	r18, r20
     e5e:	20 83       	st	Z, r18
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	08 95       	ret

00000e6a <initializeKnob>:
void initializeKnob(Globals *currentGlobals)
{
     e6a:	fc 01       	movw	r30, r24
     e6c:	e3 5b       	subi	r30, 0xB3	; 179
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	9c 01       	movw	r18, r24
     e72:	27 58       	subi	r18, 0x87	; 135
     e74:	3f 4f       	sbci	r19, 0xFF	; 255
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
     e76:	91 91       	ld	r25, Z+
     e78:	93 a7       	std	Z+43, r25	; 0x2b
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
void initializeKnob(Globals *currentGlobals)
{
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
     e7a:	e2 17       	cp	r30, r18
     e7c:	f3 07       	cpc	r31, r19
     e7e:	d9 f7       	brne	.-10     	; 0xe76 <initializeKnob+0xc>
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
	}
}
     e80:	08 95       	ret

00000e82 <interperetKnob>:

void interperetKnob(uint8_t select, Pattern *currentKnobPattern, Globals *currentGlobals)
{//this function will compare outputs, and write to our struct.
     e82:	4f 92       	push	r4
     e84:	5f 92       	push	r5
     e86:	6f 92       	push	r6
     e88:	7f 92       	push	r7
     e8a:	af 92       	push	r10
     e8c:	bf 92       	push	r11
     e8e:	cf 92       	push	r12
     e90:	df 92       	push	r13
     e92:	ef 92       	push	r14
     e94:	ff 92       	push	r15
     e96:	0f 93       	push	r16
     e98:	1f 93       	push	r17
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
	select = select%44;
     e9e:	98 2f       	mov	r25, r24
     ea0:	96 95       	lsr	r25
     ea2:	96 95       	lsr	r25
     ea4:	2f e2       	ldi	r18, 0x2F	; 47
     ea6:	92 9f       	mul	r25, r18
     ea8:	91 2d       	mov	r25, r1
     eaa:	11 24       	eor	r1, r1
     eac:	96 95       	lsr	r25
     eae:	2c e2       	ldi	r18, 0x2C	; 44
     eb0:	92 9f       	mul	r25, r18
     eb2:	80 19       	sub	r24, r0
     eb4:	11 24       	eor	r1, r1
     eb6:	98 2f       	mov	r25, r24
	
	if (select<40)
     eb8:	88 32       	cpi	r24, 0x28	; 40
     eba:	08 f0       	brcs	.+2      	; 0xebe <interperetKnob+0x3c>
     ebc:	c5 c1       	rjmp	.+906    	; 0x1248 <interperetKnob+0x3c6>
	{
		uint8_t positionSelect = select%8;
     ebe:	18 2f       	mov	r17, r24
     ec0:	17 70       	andi	r17, 0x07	; 7
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
		uint8_t bankSwitch = select/8;
     ec2:	86 95       	lsr	r24
     ec4:	86 95       	lsr	r24
     ec6:	86 95       	lsr	r24
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
     ec8:	da 01       	movw	r26, r20
     eca:	1d 96       	adiw	r26, 0x0d	; 13
     ecc:	2c 91       	ld	r18, X
     ece:	20 ff       	sbrs	r18, 0
     ed0:	05 c0       	rjmp	.+10     	; 0xedc <interperetKnob+0x5a>
		{
			positionSelectTracks=positionSelectTracks+8;
     ed2:	68 94       	set
     ed4:	aa 24       	eor	r10, r10
     ed6:	a3 f8       	bld	r10, 3
     ed8:	a1 0e       	add	r10, r17
     eda:	01 c0       	rjmp	.+2      	; 0xede <interperetKnob+0x5c>
	select = select%44;
	
	if (select<40)
	{
		uint8_t positionSelect = select%8;
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
     edc:	a1 2e       	mov	r10, r17
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
		{
			positionSelectTracks=positionSelectTracks+8;
		}
		
		switch (bankSwitch){
     ede:	82 30       	cpi	r24, 0x02	; 2
     ee0:	09 f4       	brne	.+2      	; 0xee4 <interperetKnob+0x62>
     ee2:	99 c0       	rjmp	.+306    	; 0x1016 <interperetKnob+0x194>
     ee4:	ea 01       	movw	r28, r20
     ee6:	6b 01       	movw	r12, r22
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	30 f4       	brcc	.+12     	; 0xef8 <interperetKnob+0x76>
     eec:	88 23       	and	r24, r24
     eee:	59 f0       	breq	.+22     	; 0xf06 <interperetKnob+0x84>
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	09 f4       	brne	.+2      	; 0xef6 <interperetKnob+0x74>
     ef4:	67 c0       	rjmp	.+206    	; 0xfc4 <interperetKnob+0x142>
     ef6:	c6 c1       	rjmp	.+908    	; 0x1284 <interperetKnob+0x402>
     ef8:	83 30       	cpi	r24, 0x03	; 3
     efa:	09 f4       	brne	.+2      	; 0xefe <interperetKnob+0x7c>
     efc:	e1 c0       	rjmp	.+450    	; 0x10c0 <interperetKnob+0x23e>
     efe:	84 30       	cpi	r24, 0x04	; 4
     f00:	09 f4       	brne	.+2      	; 0xf04 <interperetKnob+0x82>
     f02:	2e c1       	rjmp	.+604    	; 0x1160 <interperetKnob+0x2de>
     f04:	bf c1       	rjmp	.+894    	; 0x1284 <interperetKnob+0x402>
			uint8_t newRead = 0;
			case 0:; //outputVolume
			
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
     f06:	e9 2e       	mov	r14, r25
     f08:	f1 2c       	mov	r15, r1
     f0a:	ca 01       	movw	r24, r20
     f0c:	8e 0d       	add	r24, r14
     f0e:	9f 1d       	adc	r25, r15
     f10:	fc 01       	movw	r30, r24
     f12:	e7 58       	subi	r30, 0x87	; 135
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
     f18:	bc 97       	sbiw	r30, 0x2c	; 44
     f1a:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
     f1c:	26 17       	cp	r18, r22
     f1e:	20 f4       	brcc	.+8      	; 0xf28 <interperetKnob+0xa6>
	{
		returnMe = v1-v2;
     f20:	b6 2f       	mov	r27, r22
     f22:	b2 1b       	sub	r27, r18
     f24:	2b 2f       	mov	r18, r27
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <interperetKnob+0xa8>
	}
	else
	{
		returnMe = v2-v1;
     f28:	26 1b       	sub	r18, r22
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];

			if(checkVariation(newRead,prevRead)>2)
     f2a:	23 30       	cpi	r18, 0x03	; 3
     f2c:	08 f4       	brcc	.+2      	; 0xf30 <interperetKnob+0xae>
     f2e:	aa c1       	rjmp	.+852    	; 0x1284 <interperetKnob+0x402>
			{
				
				int16_t negCheckValue = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__floatsisf>
     f3a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     f3e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     f42:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     f46:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     f4a:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <__divsf3>
     f4e:	2b 01       	movw	r4, r22
     f50:	3c 01       	movw	r6, r24
     f52:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <NegativeOffset>
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__floatsisf>
     f60:	9b 01       	movw	r18, r22
     f62:	ac 01       	movw	r20, r24
     f64:	c3 01       	movw	r24, r6
     f66:	b2 01       	movw	r22, r4
     f68:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <__subsf3>
     f6c:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <__fixsfsi>
     f70:	86 2f       	mov	r24, r22
     f72:	26 2f       	mov	r18, r22
     f74:	37 2f       	mov	r19, r23
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     f76:	9e 85       	ldd	r25, Y+14	; 0x0e
     f78:	94 60       	ori	r25, 0x04	; 4
     f7a:	9e 87       	std	Y+14, r25	; 0x0e
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value 
     f7c:	1f 87       	std	Y+15, r17	; 0x0f
				
				currentKnobPattern->outputLevelLSB[positionSelect] = (negCheckValue);
     f7e:	61 2f       	mov	r22, r17
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	f6 01       	movw	r30, r12
     f84:	e6 0f       	add	r30, r22
     f86:	f7 1f       	adc	r31, r23
     f88:	80 87       	std	Z+8, r24	; 0x08
				if(negCheckValue>(-1))
     f8a:	33 23       	and	r19, r19
     f8c:	2c f0       	brlt	.+10     	; 0xf98 <interperetKnob+0x116>
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 0;	
     f8e:	f6 01       	movw	r30, r12
     f90:	e6 0f       	add	r30, r22
     f92:	f7 1f       	adc	r31, r23
     f94:	10 82       	st	Z, r1
     f96:	05 c0       	rjmp	.+10     	; 0xfa2 <interperetKnob+0x120>
				}else
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 255;
     f98:	9f ef       	ldi	r25, 0xFF	; 255
     f9a:	f6 01       	movw	r30, r12
     f9c:	e6 0f       	add	r30, r22
     f9e:	f7 1f       	adc	r31, r23
     fa0:	90 83       	st	Z, r25
				}
				setOutputVolume(currentKnobPattern->outputLevelLSB[positionSelect], currentKnobPattern->outputLevelMSB[positionSelect], positionSelect);
     fa2:	f6 01       	movw	r30, r12
     fa4:	e6 0f       	add	r30, r22
     fa6:	f7 1f       	adc	r31, r23
     fa8:	41 2f       	mov	r20, r17
     faa:	60 81       	ld	r22, Z
     fac:	0e 94 39 17 	call	0x2e72	; 0x2e72 <setOutputVolume>
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     fb0:	ce 0d       	add	r28, r14
     fb2:	df 1d       	adc	r29, r15
     fb4:	fe 01       	movw	r30, r28
     fb6:	e7 58       	subi	r30, 0x87	; 135
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	c3 5b       	subi	r28, 0xB3	; 179
     fbc:	df 4f       	sbci	r29, 0xFF	; 255
     fbe:	88 81       	ld	r24, Y
     fc0:	80 83       	st	Z, r24
     fc2:	60 c1       	rjmp	.+704    	; 0x1284 <interperetKnob+0x402>
			}
			break;
			
 			case 1: //pitch
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
     fc4:	89 2f       	mov	r24, r25
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	9a 01       	movw	r18, r20
     fca:	28 0f       	add	r18, r24
     fcc:	39 1f       	adc	r19, r25
     fce:	f9 01       	movw	r30, r18
     fd0:	e3 5b       	subi	r30, 0xB3	; 179
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	40 81       	ld	r20, Z
     fd6:	bc 96       	adiw	r30, 0x2c	; 44
     fd8:	20 81       	ld	r18, Z
     fda:	24 17       	cp	r18, r20
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <interperetKnob+0x15e>
     fde:	52 c1       	rjmp	.+676    	; 0x1284 <interperetKnob+0x402>
 			{
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     fe0:	2e 85       	ldd	r18, Y+14	; 0x0e
     fe2:	24 60       	ori	r18, 0x04	; 4
     fe4:	2e 87       	std	Y+14, r18	; 0x0e
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     fe6:	21 2f       	mov	r18, r17
     fe8:	20 61       	ori	r18, 0x10	; 16
     fea:	2f 87       	std	Y+15, r18	; 0x0f
 				currentKnobPattern->outputPitch[positionSelect] = (currentGlobals->filteredKnobBuffer[select]^128);
     fec:	fb 01       	movw	r30, r22
     fee:	e1 0f       	add	r30, r17
     ff0:	f1 1d       	adc	r31, r1
     ff2:	40 58       	subi	r20, 0x80	; 128
     ff4:	40 8b       	std	Z+16, r20	; 0x10
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     ff6:	8c 0f       	add	r24, r28
     ff8:	9d 1f       	adc	r25, r29
     ffa:	dc 01       	movw	r26, r24
     ffc:	a7 58       	subi	r26, 0x87	; 135
     ffe:	bf 4f       	sbci	r27, 0xFF	; 255
    1000:	ec 01       	movw	r28, r24
    1002:	c3 5b       	subi	r28, 0xB3	; 179
    1004:	df 4f       	sbci	r29, 0xFF	; 255
    1006:	88 81       	ld	r24, Y
    1008:	8c 93       	st	X, r24
				outputSampleRate(positionSelect, 0, currentKnobPattern->outputPitch[positionSelect]);
    100a:	40 89       	ldd	r20, Z+16	; 0x10
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	81 2f       	mov	r24, r17
    1010:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <outputSampleRate>
    1014:	37 c1       	rjmp	.+622    	; 0x1284 <interperetKnob+0x402>
 			}
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
    1016:	e9 2f       	mov	r30, r25
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	ca 01       	movw	r24, r20
    101c:	8e 0f       	add	r24, r30
    101e:	9f 1f       	adc	r25, r31
    1020:	dc 01       	movw	r26, r24
    1022:	a7 58       	subi	r26, 0x87	; 135
    1024:	bf 4f       	sbci	r27, 0xFF	; 255
    1026:	dc 91       	ld	r29, X
    1028:	9c 97       	sbiw	r26, 0x2c	; 44
    102a:	cc 91       	ld	r28, X
    102c:	dc 17       	cp	r29, r28
    102e:	09 f4       	brne	.+2      	; 0x1032 <interperetKnob+0x1b0>
    1030:	29 c1       	rjmp	.+594    	; 0x1284 <interperetKnob+0x402>
			{
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
    1032:	ca 2c       	mov	r12, r10
    1034:	d1 2c       	mov	r13, r1
    1036:	9b 01       	movw	r18, r22
    1038:	2c 0d       	add	r18, r12
    103a:	3d 1d       	adc	r19, r13
    103c:	d9 01       	movw	r26, r18
    103e:	a8 5a       	subi	r26, 0xA8	; 168
    1040:	bf 4f       	sbci	r27, 0xFF	; 255
    1042:	8c 91       	ld	r24, X
    1044:	50 97       	sbiw	r26, 0x10	; 16
    1046:	2c 91       	ld	r18, X
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
    1048:	da 01       	movw	r26, r20
    104a:	1e 96       	adiw	r26, 0x0e	; 14
    104c:	9c 91       	ld	r25, X
    104e:	1e 97       	sbiw	r26, 0x0e	; 14
    1050:	94 60       	ori	r25, 0x04	; 4
    1052:	1e 96       	adiw	r26, 0x0e	; 14
    1054:	9c 93       	st	X, r25
    1056:	1e 97       	sbiw	r26, 0x0e	; 14
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
    1058:	91 2f       	mov	r25, r17
    105a:	90 62       	ori	r25, 0x20	; 32
    105c:	1f 96       	adiw	r26, 0x0f	; 15
    105e:	9c 93       	st	X, r25
    1060:	1f 97       	sbiw	r26, 0x0f	; 15
				
				if(currentGlobals->currentGPButtons&0x04) 
    1062:	12 96       	adiw	r26, 0x02	; 2
    1064:	9c 91       	ld	r25, X
    1066:	92 ff       	sbrs	r25, 2
    1068:	0a c0       	rjmp	.+20     	; 0x107e <interperetKnob+0x1fc>
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
			{
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	dc 01       	movw	r26, r24
    106e:	b2 2b       	or	r27, r18
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
				
				if(currentGlobals->currentGPButtons&0x04) 
				{ //if "fine" is on:
						totalAttackTime = totalAttackTime+((currentGlobals->filteredKnobBuffer[select])-(currentGlobals->lastFilteredKnobBuffer[select])); 
    1070:	8c 2f       	mov	r24, r28
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	8d 1b       	sub	r24, r29
    1076:	91 09       	sbc	r25, r1
    1078:	8a 0f       	add	r24, r26
    107a:	9b 1f       	adc	r25, r27
    107c:	0a c0       	rjmp	.+20     	; 0x1092 <interperetKnob+0x210>
				}else
				{
					totalAttackTime = ((currentGlobals->filteredKnobBuffer[select])-1)*238;
    107e:	2c 2f       	mov	r18, r28
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	21 50       	subi	r18, 0x01	; 1
    1084:	31 09       	sbc	r19, r1
    1086:	ae ee       	ldi	r26, 0xEE	; 238
    1088:	a2 9f       	mul	r26, r18
    108a:	c0 01       	movw	r24, r0
    108c:	a3 9f       	mul	r26, r19
    108e:	90 0d       	add	r25, r0
    1090:	11 24       	eor	r1, r1
				}
				if(totalAttackTime<20)
    1092:	84 31       	cpi	r24, 0x14	; 20
    1094:	91 05       	cpc	r25, r1
    1096:	10 f4       	brcc	.+4      	; 0x109c <interperetKnob+0x21a>
				{
					totalAttackTime = 20; 
    1098:	84 e1       	ldi	r24, 0x14	; 20
    109a:	90 e0       	ldi	r25, 0x00	; 0
				}
				currentKnobPattern->trackAttackTimeMSB[positionSelectTracks] = ((totalAttackTime)>>8);
    109c:	6c 0d       	add	r22, r12
    109e:	7d 1d       	adc	r23, r13
    10a0:	db 01       	movw	r26, r22
    10a2:	a8 5b       	subi	r26, 0xB8	; 184
    10a4:	bf 4f       	sbci	r27, 0xFF	; 255
    10a6:	9c 93       	st	X, r25
				currentKnobPattern->trackAttackTimeLSB[positionSelectTracks] = (totalAttackTime); //this should truncate the top 8 bits. 
    10a8:	50 96       	adiw	r26, 0x10	; 16
    10aa:	8c 93       	st	X, r24

				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
    10ac:	e4 0f       	add	r30, r20
    10ae:	f5 1f       	adc	r31, r21
    10b0:	df 01       	movw	r26, r30
    10b2:	a7 58       	subi	r26, 0x87	; 135
    10b4:	bf 4f       	sbci	r27, 0xFF	; 255
    10b6:	e3 5b       	subi	r30, 0xB3	; 179
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	80 81       	ld	r24, Z
    10bc:	8c 93       	st	X, r24
    10be:	e2 c0       	rjmp	.+452    	; 0x1284 <interperetKnob+0x402>
			}
			break;
 			
 			case 3: //release Envelope
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
    10c0:	29 2f       	mov	r18, r25
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	ca 01       	movw	r24, r20
    10c6:	82 0f       	add	r24, r18
    10c8:	93 1f       	adc	r25, r19
    10ca:	fc 01       	movw	r30, r24
    10cc:	e7 58       	subi	r30, 0x87	; 135
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	f0 81       	ld	r31, Z
    10d2:	dc 01       	movw	r26, r24
    10d4:	a3 5b       	subi	r26, 0xB3	; 179
    10d6:	bf 4f       	sbci	r27, 0xFF	; 255
    10d8:	ec 91       	ld	r30, X
    10da:	fe 17       	cp	r31, r30
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <interperetKnob+0x25e>
    10de:	d2 c0       	rjmp	.+420    	; 0x1284 <interperetKnob+0x402>
 			{
				 uint16_t totalReleaseTime = currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks]|((currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks])<<8);
    10e0:	6a 2d       	mov	r22, r10
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	a6 01       	movw	r20, r12
    10e6:	46 0f       	add	r20, r22
    10e8:	57 1f       	adc	r21, r23
    10ea:	da 01       	movw	r26, r20
    10ec:	a8 58       	subi	r26, 0x88	; 136
    10ee:	bf 4f       	sbci	r27, 0xFF	; 255
    10f0:	8c 91       	ld	r24, X
    10f2:	50 97       	sbiw	r26, 0x10	; 16
    10f4:	4c 91       	ld	r20, X
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
    10f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f8:	94 60       	ori	r25, 0x04	; 4
    10fa:	9e 87       	std	Y+14, r25	; 0x0e
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
    10fc:	91 2f       	mov	r25, r17
    10fe:	90 63       	ori	r25, 0x30	; 48
    1100:	9f 87       	std	Y+15, r25	; 0x0f
				if(currentGlobals->currentGPButtons&0x04)
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	92 ff       	sbrs	r25, 2
    1106:	0a c0       	rjmp	.+20     	; 0x111c <interperetKnob+0x29a>
			break;
 			
 			case 3: //release Envelope
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
 			{
				 uint16_t totalReleaseTime = currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks]|((currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks])<<8);
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	dc 01       	movw	r26, r24
    110c:	b4 2b       	or	r27, r20
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
				if(currentGlobals->currentGPButtons&0x04)
				{ //if "fine" is on:
					totalReleaseTime = totalReleaseTime+((currentGlobals->filteredKnobBuffer[select])-(currentGlobals->lastFilteredKnobBuffer[select]));
    110e:	8e 2f       	mov	r24, r30
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	8f 1b       	sub	r24, r31
    1114:	91 09       	sbc	r25, r1
    1116:	8a 0f       	add	r24, r26
    1118:	9b 1f       	adc	r25, r27
    111a:	0a c0       	rjmp	.+20     	; 0x1130 <interperetKnob+0x2ae>
				}else
				{
					totalReleaseTime = ((currentGlobals->filteredKnobBuffer[select])-1)*238;
    111c:	4e 2f       	mov	r20, r30
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	41 50       	subi	r20, 0x01	; 1
    1122:	51 09       	sbc	r21, r1
    1124:	ee ee       	ldi	r30, 0xEE	; 238
    1126:	e4 9f       	mul	r30, r20
    1128:	c0 01       	movw	r24, r0
    112a:	e5 9f       	mul	r30, r21
    112c:	90 0d       	add	r25, r0
    112e:	11 24       	eor	r1, r1
				}
				if(totalReleaseTime<20)
    1130:	84 31       	cpi	r24, 0x14	; 20
    1132:	91 05       	cpc	r25, r1
    1134:	10 f4       	brcc	.+4      	; 0x113a <interperetKnob+0x2b8>
				{
					totalReleaseTime = 220;
    1136:	8c ed       	ldi	r24, 0xDC	; 220
    1138:	90 e0       	ldi	r25, 0x00	; 0
				}
				currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks] = ((totalReleaseTime)>>8);
    113a:	c6 0e       	add	r12, r22
    113c:	d7 1e       	adc	r13, r23
    113e:	f6 01       	movw	r30, r12
    1140:	e8 59       	subi	r30, 0x98	; 152
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	90 83       	st	Z, r25
				currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks] = (totalReleaseTime);	
    1146:	70 96       	adiw	r30, 0x10	; 16
    1148:	80 83       	st	Z, r24
				
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
    114a:	2c 0f       	add	r18, r28
    114c:	3d 1f       	adc	r19, r29
    114e:	f9 01       	movw	r30, r18
    1150:	e7 58       	subi	r30, 0x87	; 135
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	d9 01       	movw	r26, r18
    1156:	a3 5b       	subi	r26, 0xB3	; 179
    1158:	bf 4f       	sbci	r27, 0xFF	; 255
    115a:	8c 91       	ld	r24, X
    115c:	80 83       	st	Z, r24
    115e:	92 c0       	rjmp	.+292    	; 0x1284 <interperetKnob+0x402>
 			}
 			break;
 			
 			case 4:;
 			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
    1160:	e9 2e       	mov	r14, r25
    1162:	f1 2c       	mov	r15, r1
    1164:	ca 01       	movw	r24, r20
    1166:	8e 0d       	add	r24, r14
    1168:	9f 1d       	adc	r25, r15
    116a:	fc 01       	movw	r30, r24
    116c:	e7 58       	subi	r30, 0x87	; 135
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
    1172:	bc 97       	sbiw	r30, 0x2c	; 44
    1174:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
    1176:	26 17       	cp	r18, r22
    1178:	20 f4       	brcc	.+8      	; 0x1182 <interperetKnob+0x300>
	{
		returnMe = v1-v2;
    117a:	b6 2f       	mov	r27, r22
    117c:	b2 1b       	sub	r27, r18
    117e:	2b 2f       	mov	r18, r27
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <interperetKnob+0x302>
	}
	else
	{
		returnMe = v2-v1;
    1182:	26 1b       	sub	r18, r22
 			break;
 			
 			case 4:;
 			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];
 			if(checkVariation(newRead,prevRead)>2)
    1184:	23 30       	cpi	r18, 0x03	; 3
    1186:	08 f4       	brcc	.+2      	; 0x118a <interperetKnob+0x308>
    1188:	7d c0       	rjmp	.+250    	; 0x1284 <interperetKnob+0x402>
 			{
				int16_t negCheckValueTrack = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__floatsisf>
    1194:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1198:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    119c:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    11a0:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    11a4:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <__divsf3>
    11a8:	2b 01       	movw	r4, r22
    11aa:	3c 01       	movw	r6, r24
    11ac:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <NegativeOffset>
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__floatsisf>
    11ba:	9b 01       	movw	r18, r22
    11bc:	ac 01       	movw	r20, r24
    11be:	c3 01       	movw	r24, r6
    11c0:	b2 01       	movw	r22, r4
    11c2:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <__subsf3>
    11c6:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <__fixsfsi>
    11ca:	86 2f       	mov	r24, r22
    11cc:	97 2f       	mov	r25, r23
    11ce:	9c 01       	movw	r18, r24
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
    11d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    11d2:	84 60       	ori	r24, 0x04	; 4
    11d4:	8e 87       	std	Y+14, r24	; 0x0e
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
    11d6:	81 2f       	mov	r24, r17
    11d8:	80 64       	ori	r24, 0x40	; 64
    11da:	8f 87       	std	Y+15, r24	; 0x0f
				
	 			currentKnobPattern->trackMainVolumeLSB[positionSelectTracks] = (negCheckValueTrack);
    11dc:	b1 2c       	mov	r11, r1
    11de:	f6 01       	movw	r30, r12
    11e0:	ea 0d       	add	r30, r10
    11e2:	fb 1d       	adc	r31, r11
    11e4:	60 af       	std	Z+56, r22	; 0x38
	 			if(negCheckValueTrack>(-1))
    11e6:	33 23       	and	r19, r19
    11e8:	2c f0       	brlt	.+10     	; 0x11f4 <interperetKnob+0x372>
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 0;
    11ea:	f6 01       	movw	r30, r12
    11ec:	ea 0d       	add	r30, r10
    11ee:	fb 1d       	adc	r31, r11
    11f0:	10 a6       	std	Z+40, r1	; 0x28
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <interperetKnob+0x37c>
	 			}else
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 255;
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    11f6:	f6 01       	movw	r30, r12
    11f8:	ea 0d       	add	r30, r10
    11fa:	fb 1d       	adc	r31, r11
    11fc:	80 a7       	std	Z+40, r24	; 0x28
	 			}

				
				if(currentKnobPattern->envelopeType[positionSelectTracks]==1||currentKnobPattern->envelopeType[positionSelectTracks]==3) //set track volume directly if Envelope mode is only release, or none. 
    11fe:	f6 01       	movw	r30, r12
    1200:	ea 0d       	add	r30, r10
    1202:	fb 1d       	adc	r31, r11
    1204:	e5 51       	subi	r30, 0x15	; 21
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	80 81       	ld	r24, Z
    120a:	8d 7f       	andi	r24, 0xFD	; 253
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	81 f4       	brne	.+32     	; 0x1230 <interperetKnob+0x3ae>
				{
	 				setTrackVolume(currentKnobPattern->trackSampleLSB[positionSelectTracks], currentKnobPattern->trackSampleMSB[positionSelectTracks],
    1210:	ac 0c       	add	r10, r12
    1212:	bd 1c       	adc	r11, r13
    1214:	d5 01       	movw	r26, r10
    1216:	a8 56       	subi	r26, 0x68	; 104
    1218:	bf 4f       	sbci	r27, 0xFF	; 255
    121a:	c5 01       	movw	r24, r10
    121c:	88 55       	subi	r24, 0x58	; 88
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	f5 01       	movw	r30, r10
    1222:	20 a5       	ldd	r18, Z+40	; 0x28
    1224:	46 2f       	mov	r20, r22
    1226:	6c 91       	ld	r22, X
    1228:	dc 01       	movw	r26, r24
    122a:	8c 91       	ld	r24, X
    122c:	0e 94 5d 17 	call	0x2eba	; 0x2eba <setTrackVolume>
					currentKnobPattern->trackMainVolumeLSB[positionSelectTracks], currentKnobPattern->trackMainVolumeMSB[positionSelectTracks]);
				}
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select]; 
    1230:	8e 01       	movw	r16, r28
    1232:	0e 0d       	add	r16, r14
    1234:	1f 1d       	adc	r17, r15
    1236:	f8 01       	movw	r30, r16
    1238:	e7 58       	subi	r30, 0x87	; 135
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	d8 01       	movw	r26, r16
    123e:	a3 5b       	subi	r26, 0xB3	; 179
    1240:	bf 4f       	sbci	r27, 0xFF	; 255
    1242:	8c 91       	ld	r24, X
    1244:	80 83       	st	Z, r24
    1246:	1e c0       	rjmp	.+60     	; 0x1284 <interperetKnob+0x402>
		}
		
		
	}else
	{
		switch (select)
    1248:	8a 32       	cpi	r24, 0x2A	; 42
    124a:	e1 f4       	brne	.+56     	; 0x1284 <interperetKnob+0x402>
// 			break;
// 			
 			case 42:
			 
			 //we need to do a bit more filtering here. Not sure if that's happening here, or in the actual knob read.
			 if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
    124c:	fa 01       	movw	r30, r20
    124e:	e9 58       	subi	r30, 0x89	; 137
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	80 81       	ld	r24, Z
    1254:	bc 96       	adiw	r30, 0x2c	; 44
    1256:	90 81       	ld	r25, Z
    1258:	98 17       	cp	r25, r24
    125a:	a1 f0       	breq	.+40     	; 0x1284 <interperetKnob+0x402>
			{//not sure if this works here, but we're going to try it. 
				
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
    125c:	fa 01       	movw	r30, r20
    125e:	96 85       	ldd	r25, Z+14	; 0x0e
    1260:	94 60       	ori	r25, 0x04	; 4
    1262:	96 87       	std	Z+14, r25	; 0x0e
				currentGlobals->knobStatus = (5<<4); //since all other pot banks are 0-4, the next ones will be 5-8. We should maybe figure out a better system for this, 
    1264:	90 e5       	ldi	r25, 0x50	; 80
    1266:	97 87       	std	Z+15, r25	; 0x0f
				//maybe some defines?				
 				currentKnobPattern->patternBPM = currentGlobals->filteredKnobBuffer[select];
    1268:	fb 01       	movw	r30, r22
    126a:	e8 53       	subi	r30, 0x38	; 56
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	91 83       	std	Z+1, r25	; 0x01
    1272:	80 83       	st	Z, r24
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
    1274:	da 01       	movw	r26, r20
    1276:	ad 55       	subi	r26, 0x5D	; 93
    1278:	bf 4f       	sbci	r27, 0xFF	; 255
    127a:	fa 01       	movw	r30, r20
    127c:	e9 58       	subi	r30, 0x89	; 137
    127e:	ff 4f       	sbci	r31, 0xFF	; 255
    1280:	80 81       	ld	r24, Z
    1282:	8c 93       	st	X, r24
// 			break;
		}
		
	}

}
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	df 90       	pop	r13
    1292:	cf 90       	pop	r12
    1294:	bf 90       	pop	r11
    1296:	af 90       	pop	r10
    1298:	7f 90       	pop	r7
    129a:	6f 90       	pop	r6
    129c:	5f 90       	pop	r5
    129e:	4f 90       	pop	r4
    12a0:	08 95       	ret

000012a2 <listenKnobs>:

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
    12a2:	ef 92       	push	r14
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	7c 01       	movw	r14, r24
    12ae:	8b 01       	movw	r16, r22
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    12b0:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
    12b2:	8c 2f       	mov	r24, r28
    12b4:	7b dd       	rcall	.-1290   	; 0xdac <selectKnob>
		updateKnob(loopCounter, currentGlobals);
    12b6:	b8 01       	movw	r22, r16
    12b8:	8c 2f       	mov	r24, r28
    12ba:	b8 dd       	rcall	.-1168   	; 0xe2c <updateKnob>
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
    12bc:	a8 01       	movw	r20, r16
    12be:	b7 01       	movw	r22, r14
    12c0:	8c 2f       	mov	r24, r28
    12c2:	df dd       	rcall	.-1090   	; 0xe82 <interperetKnob>

}

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    12c4:	cf 5f       	subi	r28, 0xFF	; 255
    12c6:	cc 32       	cpi	r28, 0x2C	; 44
    12c8:	a1 f7       	brne	.-24     	; 0x12b2 <listenKnobs+0x10>
	{
		selectKnob(loopCounter);
		updateKnob(loopCounter, currentGlobals);
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
	}
}
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	08 95       	ret

000012d6 <initLEDs>:
extern Pattern currentPattern;
extern uint8_t currentStep;

void initLEDs()
{
	DDRG = 0B00000111; //outputs on G5,2, and 0.
    12d6:	87 e0       	ldi	r24, 0x07	; 7
    12d8:	83 bb       	out	0x13, r24	; 19
    12da:	08 95       	ret

000012dc <parseLEDs>:
}
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
    12dc:	a2 98       	cbi	0x14, 2	; 20
    12de:	27 e0       	ldi	r18, 0x07	; 7
	for(uint8_t j=0; j<7; j++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    12e0:	a0 9a       	sbi	0x14, 0	; 20
		if(gpParse&0x80)
    12e2:	66 23       	and	r22, r22
    12e4:	14 f4       	brge	.+4      	; 0x12ea <parseLEDs+0xe>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    12e6:	a1 9a       	sbi	0x14, 1	; 20
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <parseLEDs+0x10>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    12ea:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    12ec:	a0 98       	cbi	0x14, 0	; 20
		gpParse = gpParse << 1;
    12ee:	66 0f       	add	r22, r22
    12f0:	21 50       	subi	r18, 0x01	; 1
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t j=0; j<7; j++)
    12f2:	b1 f7       	brne	.-20     	; 0x12e0 <parseLEDs+0x4>
    12f4:	21 e1       	ldi	r18, 0x11	; 17
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    12f6:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
    12f8:	99 23       	and	r25, r25
    12fa:	14 f4       	brge	.+4      	; 0x1300 <parseLEDs+0x24>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    12fc:	a1 9a       	sbi	0x14, 1	; 20
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <parseLEDs+0x26>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    1300:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    1302:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	21 50       	subi	r18, 0x01	; 1
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
    130a:	a9 f7       	brne	.-22     	; 0x12f6 <parseLEDs+0x1a>
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	
	
	PORTG |= (1 << PG2); //latch pin high
    130c:	a2 9a       	sbi	0x14, 2	; 20
    130e:	08 95       	ret

00001310 <updateLEDs>:
}

void updateLEDs(Pattern ledCurrentPattern, Globals currentGlobals)
{
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	cd 57       	subi	r28, 0x7D	; 125
    131a:	de 4f       	sbci	r29, 0xFE	; 254
    131c:	68 81       	ld	r22, Y
    131e:	c3 58       	subi	r28, 0x83	; 131
    1320:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t shiftedState = currentGlobals.menuState >> 4; //this will get rid of EncoderB
	uint16_t totalLights = currentGlobals.currentTrigButtons|currentGlobals.currentTrigMidi|currentGlobals.currentTrigSequencer; //we want lights from all sources. 
    1322:	cf 57       	subi	r28, 0x7F	; 127
    1324:	de 4f       	sbci	r29, 0xFE	; 254
    1326:	28 81       	ld	r18, Y
    1328:	39 81       	ldd	r19, Y+1	; 0x01
    132a:	c1 58       	subi	r28, 0x81	; 129
    132c:	d1 40       	sbci	r29, 0x01	; 1
    132e:	ca 57       	subi	r28, 0x7A	; 122
    1330:	de 4f       	sbci	r29, 0xFE	; 254
    1332:	88 81       	ld	r24, Y
    1334:	99 81       	ldd	r25, Y+1	; 0x01
    1336:	c6 58       	subi	r28, 0x86	; 134
    1338:	d1 40       	sbci	r29, 0x01	; 1
    133a:	82 2b       	or	r24, r18
    133c:	93 2b       	or	r25, r19
    133e:	cc 57       	subi	r28, 0x7C	; 124
    1340:	de 4f       	sbci	r29, 0xFE	; 254
    1342:	28 81       	ld	r18, Y
    1344:	39 81       	ldd	r19, Y+1	; 0x01
    1346:	c4 58       	subi	r28, 0x84	; 132
    1348:	d1 40       	sbci	r29, 0x01	; 1
    134a:	28 2b       	or	r18, r24
    134c:	39 2b       	or	r19, r25
	//no input from midi yet, but we will have that eventually. 
	switch(shiftedState)
    134e:	c5 57       	subi	r28, 0x75	; 117
    1350:	de 4f       	sbci	r29, 0xFE	; 254
    1352:	98 81       	ld	r25, Y
    1354:	cb 58       	subi	r28, 0x8B	; 139
    1356:	d1 40       	sbci	r29, 0x01	; 1
    1358:	92 95       	swap	r25
    135a:	9f 70       	andi	r25, 0x0F	; 15
    135c:	91 30       	cpi	r25, 0x01	; 1
    135e:	49 f0       	breq	.+18     	; 0x1372 <updateLEDs+0x62>
    1360:	28 f0       	brcs	.+10     	; 0x136c <updateLEDs+0x5c>
    1362:	92 30       	cpi	r25, 0x02	; 2
    1364:	d1 f0       	breq	.+52     	; 0x139a <updateLEDs+0x8a>
    1366:	93 30       	cpi	r25, 0x03	; 3
    1368:	d9 f0       	breq	.+54     	; 0x13a0 <updateLEDs+0x90>
    136a:	1c c0       	rjmp	.+56     	; 0x13a4 <updateLEDs+0x94>
	{
		case 0:
		parseLEDs(totalLights, currentGlobals.currentGPButtons);
    136c:	c9 01       	movw	r24, r18
    136e:	b6 df       	rcall	.-148    	; 0x12dc <parseLEDs>
		break;
    1370:	19 c0       	rjmp	.+50     	; 0x13a4 <updateLEDs+0x94>

		case 1:
		parseLEDs(ledCurrentPattern.trackSequence[currentGlobals.currentStep], currentGlobals.currentGPButtons);
    1372:	c7 57       	subi	r28, 0x77	; 119
    1374:	de 4f       	sbci	r29, 0xFE	; 254
    1376:	e8 81       	ld	r30, Y
    1378:	c9 58       	subi	r28, 0x89	; 137
    137a:	d1 40       	sbci	r29, 0x01	; 1
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	ee 0f       	add	r30, r30
    1380:	ff 1f       	adc	r31, r31
    1382:	86 e0       	ldi	r24, 0x06	; 6
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	8c 0f       	add	r24, r28
    1388:	9d 1f       	adc	r25, r29
    138a:	e8 0f       	add	r30, r24
    138c:	f9 1f       	adc	r31, r25
    138e:	e5 50       	subi	r30, 0x05	; 5
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	80 81       	ld	r24, Z
    1394:	91 81       	ldd	r25, Z+1	; 0x01
    1396:	a2 df       	rcall	.-188    	; 0x12dc <parseLEDs>
		break;

		case 2:
		parseLEDs(totalLights, currentGlobals.currentGPButtons);
    1398:	05 c0       	rjmp	.+10     	; 0x13a4 <updateLEDs+0x94>
    139a:	c9 01       	movw	r24, r18
		break;
    139c:	9f df       	rcall	.-194    	; 0x12dc <parseLEDs>

		case 3:
		parseLEDs(totalLights, currentGlobals.currentGPButtons);
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <updateLEDs+0x94>
    13a0:	c9 01       	movw	r24, r18
    13a2:	9c df       	rcall	.-200    	; 0x12dc <parseLEDs>
		break;
	}

}
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	08 95       	ret

000013aa <main>:
//Pattern may not need to be volatile, but I'd like to keep it around. 
volatile Pattern currentPattern;
volatile Globals currentGlobals;
volatile uint32_t globalTimer = 0;

int main(){
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	c2 5b       	subi	r28, 0xB2	; 178
    13b4:	d3 40       	sbci	r29, 0x03	; 3
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
	uint8_t factoryReset=0; // set this to 1 if you would like to fill the eeprom with Factory data, and erase all user data.
    13c0:	19 82       	std	Y+1, r1	; 0x01
	Screen screenBank;
	char testArray[21] = "CurrentTime:         ";
	
	initScreen();
    13c2:	0e 94 83 13 	call	0x2706	; 0x2706 <initScreen>
	initButtons();
    13c6:	0e 94 16 01 	call	0x22c	; 0x22c <initButtons>
	initEncoders();
    13ca:	32 d8       	rcall	.-3996   	; 0x430 <initEncoders>
	initBank(&currentPattern);
    13cc:	8f e0       	ldi	r24, 0x0F	; 15
    13ce:	94 e0       	ldi	r25, 0x04	; 4
    13d0:	b7 db       	rcall	.-2194   	; 0xb40 <initBank>
	twi_init();
    13d2:	0e 94 af 19 	call	0x335e	; 0x335e <twi_init>
	sei();
    13d6:	78 94       	sei
	//factory Reset, we should turn this into a global function. 
	factoryResetCheck(&factoryReset,&currentPattern, &currentGlobals);
    13d8:	4a e8       	ldi	r20, 0x8A	; 138
    13da:	55 e0       	ldi	r21, 0x05	; 5
    13dc:	6f e0       	ldi	r22, 0x0F	; 15
    13de:	74 e0       	ldi	r23, 0x04	; 4
    13e0:	ce 01       	movw	r24, r28
    13e2:	01 96       	adiw	r24, 0x01	; 1
	
	initTimer();
    13e4:	2f dc       	rcall	.-1954   	; 0xc44 <factoryResetCheck>
    13e6:	22 dc       	rcall	.-1980   	; 0xc2c <initTimer>
	initGlobals(&currentGlobals, factoryReset);
    13e8:	69 81       	ldd	r22, Y+1	; 0x01
    13ea:	8a e8       	ldi	r24, 0x8A	; 138
	initLEDs();
    13ec:	95 e0       	ldi	r25, 0x05	; 5
    13ee:	d7 db       	rcall	.-2130   	; 0xb9e <initGlobals>
	initADC();
    13f0:	72 df       	rcall	.-284    	; 0x12d6 <initLEDs>
    13f2:	c7 dc       	rcall	.-1650   	; 0xd82 <initADC>
	serialInit0();
    13f4:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <serialInit0>
	initMidi();
    13f8:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <initMidi>
	//initEnvelopes();
	//initSequencer();
	
	
	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
    13fc:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <currentGlobals+0x7>
    1400:	8f e0       	ldi	r24, 0x0F	; 15
    1402:	94 e0       	ldi	r25, 0x04	; 4
    1404:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <eepromLoadPattern>
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    1408:	00 e0       	ldi	r16, 0x00	; 0
    140a:	10 e0       	ldi	r17, 0x00	; 0
	{
		uint8_t loadSelect = i%44;
    140c:	0f 2e       	mov	r0, r31
    140e:	fc e2       	ldi	r31, 0x2C	; 44
    1410:	df 2e       	mov	r13, r31
    1412:	f0 2d       	mov	r31, r0
    1414:	98 01       	movw	r18, r16
    1416:	af e2       	ldi	r26, 0x2F	; 47
    1418:	ba eb       	ldi	r27, 0xBA	; 186
    141a:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    141e:	96 95       	lsr	r25
    1420:	87 95       	ror	r24
    1422:	92 95       	swap	r25
    1424:	82 95       	swap	r24
    1426:	8f 70       	andi	r24, 0x0F	; 15
    1428:	89 27       	eor	r24, r25
    142a:	9f 70       	andi	r25, 0x0F	; 15
    142c:	89 27       	eor	r24, r25
    142e:	d8 9e       	mul	r13, r24
    1430:	90 01       	movw	r18, r0
    1432:	d9 9e       	mul	r13, r25
    1434:	30 0d       	add	r19, r0
    1436:	11 24       	eor	r1, r1
    1438:	78 01       	movw	r14, r16
    143a:	e2 1a       	sub	r14, r18
		selectKnob(loadSelect);
    143c:	f3 0a       	sbc	r15, r19
    143e:	8e 2d       	mov	r24, r14
    1440:	b5 dc       	rcall	.-1686   	; 0xdac <selectKnob>
		updateKnob(loadSelect, &currentGlobals);
    1442:	6a e8       	ldi	r22, 0x8A	; 138
    1444:	75 e0       	ldi	r23, 0x05	; 5
    1446:	8e 2d       	mov	r24, r14
    1448:	f1 dc       	rcall	.-1566   	; 0xe2c <updateKnob>
    144a:	0f 5f       	subi	r16, 0xFF	; 255
	//initEnvelopes();
	//initSequencer();
	
	
	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    144c:	1f 4f       	sbci	r17, 0xFF	; 255
    144e:	08 3b       	cpi	r16, 0xB8	; 184
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	18 07       	cpc	r17, r24
    1454:	f9 f6       	brne	.-66     	; 0x1414 <main+0x6a>
	{
		uint8_t loadSelect = i%44;
		selectKnob(loadSelect);
		updateKnob(loadSelect, &currentGlobals);
	}
	initializeKnob(&currentGlobals); //then copy it to the lastFilteredKnobBuffer. 
    1456:	8a e8       	ldi	r24, 0x8A	; 138
    1458:	95 e0       	ldi	r25, 0x05	; 5
    145a:	07 dd       	rcall	.-1522   	; 0xe6a <initializeKnob>
    145c:	69 81       	ldd	r22, Y+1	; 0x01
	globalLoad(&currentGlobals, factoryReset);
    145e:	8a e8       	ldi	r24, 0x8A	; 138
    1460:	95 e0       	ldi	r25, 0x05	; 5
    1462:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <globalLoad>
    1466:	8d b7       	in	r24, 0x3d	; 61
	initMenu(&screenBank, currentPattern, currentGlobals); //fills screenBank with menu strings
    1468:	9e b7       	in	r25, 0x3e	; 62
    146a:	82 5f       	subi	r24, 0xF2	; 242
    146c:	91 09       	sbc	r25, r1
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	9e bf       	out	0x3e, r25	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	8d bf       	out	0x3d, r24	; 61
    1478:	ad b7       	in	r26, 0x3d	; 61
    147a:	be b7       	in	r27, 0x3e	; 62
    147c:	11 96       	adiw	r26, 0x01	; 1
    147e:	82 ef       	ldi	r24, 0xF2	; 242
    1480:	ea e8       	ldi	r30, 0x8A	; 138
    1482:	f5 e0       	ldi	r31, 0x05	; 5
    1484:	01 90       	ld	r0, Z+
    1486:	0d 92       	st	X+, r0
    1488:	8a 95       	dec	r24
    148a:	e1 f7       	brne	.-8      	; 0x1484 <main+0xda>
    148c:	8d b7       	in	r24, 0x3d	; 61
    148e:	9e b7       	in	r25, 0x3e	; 62
    1490:	8b 57       	subi	r24, 0x7B	; 123
    1492:	91 40       	sbci	r25, 0x01	; 1
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	9e bf       	out	0x3e, r25	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	8d bf       	out	0x3d, r24	; 61
    149e:	ad b7       	in	r26, 0x3d	; 61
    14a0:	be b7       	in	r27, 0x3e	; 62
    14a2:	11 96       	adiw	r26, 0x01	; 1
    14a4:	8b e7       	ldi	r24, 0x7B	; 123
    14a6:	91 e0       	ldi	r25, 0x01	; 1
    14a8:	ef e0       	ldi	r30, 0x0F	; 15
    14aa:	f4 e0       	ldi	r31, 0x04	; 4
    14ac:	01 90       	ld	r0, Z+
    14ae:	0d 92       	st	X+, r0
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	e1 f7       	brne	.-8      	; 0x14ac <main+0x102>
    14b4:	ce 01       	movw	r24, r28
    14b6:	02 96       	adiw	r24, 0x02	; 2
    14b8:	39 d1       	rcall	.+626    	; 0x172c <initMenu>
    14ba:	f8 94       	cli
	//this ISR is used for Button De-Bouncing. Maybe we could put it somewhere else. 
	//TCCR2B = 1<<CS22;//using 256 from pre-scaler
	//TIMSK2 = 1<<TOIE2; //interupt on counter overflow. since we're interupting on value 256 of with a 256 pre-scaler, we're calling this function every 65,536
	//clock cycles. at 16MHz, that equates to every 0.004096, seconds, or every 4 milliseconds. We ~~~should be able to do the same thing from our global counter.

	cli(); //this may not be needed, but also may be effecting things since we're setting interrupt registers after sei has already happened. 
    14bc:	78 94       	sei
	sei();
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	6a e8       	ldi	r22, 0x8A	; 138
//	{
//		 listenEncodersNew(&currentPattern, &currentGlobals); //we may not need to check this every millisecond. If we can just do these checks on 
		 //pin changes, it should be fine. and we have the specific pins to check from, so we should be good. 
//	}
	
	listenTrigButtons(&currentPattern, &currentGlobals);
    14ca:	75 e0       	ldi	r23, 0x05	; 5
    14cc:	8f e0       	ldi	r24, 0x0F	; 15
    14ce:	94 e0       	ldi	r25, 0x04	; 4
    14d0:	0e 94 1d 01 	call	0x23a	; 0x23a <listenTrigButtons>
    14d4:	0a e8       	ldi	r16, 0x8A	; 138
	listenGPButtons(currentPattern, &currentGlobals);
    14d6:	15 e0       	ldi	r17, 0x05	; 5
    14d8:	1f 93       	push	r17
    14da:	0f 93       	push	r16
    14dc:	8d b7       	in	r24, 0x3d	; 61
    14de:	9e b7       	in	r25, 0x3e	; 62
    14e0:	8b 57       	subi	r24, 0x7B	; 123
    14e2:	91 40       	sbci	r25, 0x01	; 1
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	9e bf       	out	0x3e, r25	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	8d bf       	out	0x3d, r24	; 61
    14ee:	ad b7       	in	r26, 0x3d	; 61
    14f0:	be b7       	in	r27, 0x3e	; 62
    14f2:	11 96       	adiw	r26, 0x01	; 1
    14f4:	8b e7       	ldi	r24, 0x7B	; 123
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	ef e0       	ldi	r30, 0x0F	; 15
    14fa:	f4 e0       	ldi	r31, 0x04	; 4
    14fc:	01 90       	ld	r0, Z+
    14fe:	0d 92       	st	X+, r0
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	e1 f7       	brne	.-8      	; 0x14fc <main+0x152>
    1504:	0e 94 86 01 	call	0x30c	; 0x30c <listenGPButtons>
    1508:	8d b7       	in	r24, 0x3d	; 61
	updateLEDs(currentPattern, currentGlobals);
    150a:	9e b7       	in	r25, 0x3e	; 62
    150c:	83 58       	subi	r24, 0x83	; 131
    150e:	9e 4f       	sbci	r25, 0xFE	; 254
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	82 5f       	subi	r24, 0xF2	; 242
    151c:	91 09       	sbc	r25, r1
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	9e bf       	out	0x3e, r25	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	8d bf       	out	0x3d, r24	; 61
    1528:	ad b7       	in	r26, 0x3d	; 61
    152a:	be b7       	in	r27, 0x3e	; 62
    152c:	11 96       	adiw	r26, 0x01	; 1
    152e:	82 ef       	ldi	r24, 0xF2	; 242
    1530:	f8 01       	movw	r30, r16
    1532:	01 90       	ld	r0, Z+
    1534:	0d 92       	st	X+, r0
    1536:	8a 95       	dec	r24
    1538:	e1 f7       	brne	.-8      	; 0x1532 <main+0x188>
    153a:	8d b7       	in	r24, 0x3d	; 61
    153c:	9e b7       	in	r25, 0x3e	; 62
    153e:	8b 57       	subi	r24, 0x7B	; 123
    1540:	91 40       	sbci	r25, 0x01	; 1
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	9e bf       	out	0x3e, r25	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	8d bf       	out	0x3d, r24	; 61
    154c:	ad b7       	in	r26, 0x3d	; 61
    154e:	be b7       	in	r27, 0x3e	; 62
    1550:	11 96       	adiw	r26, 0x01	; 1
    1552:	8b e7       	ldi	r24, 0x7B	; 123
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	ef e0       	ldi	r30, 0x0F	; 15
    1558:	f4 e0       	ldi	r31, 0x04	; 4
    155a:	01 90       	ld	r0, Z+
    155c:	0d 92       	st	X+, r0
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	e1 f7       	brne	.-8      	; 0x155a <main+0x1b0>
    1562:	d6 de       	rcall	.-596    	; 0x1310 <updateLEDs>
	listenKnobs(&currentPattern, &currentGlobals);
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	b8 01       	movw	r22, r16
    1570:	8f e0       	ldi	r24, 0x0F	; 15
    1572:	94 e0       	ldi	r25, 0x04	; 4
    1574:	96 de       	rcall	.-724    	; 0x12a2 <listenKnobs>
	listenEncoders(&currentPattern, &currentGlobals);
    1576:	b8 01       	movw	r22, r16
    1578:	8f e0       	ldi	r24, 0x0F	; 15
    157a:	94 e0       	ldi	r25, 0x04	; 4
    157c:	73 d8       	rcall	.-3866   	; 0x664 <listenEncoders>
    157e:	1f 93       	push	r17
	updateSequencer(currentPattern, &currentGlobals);
    1580:	0f 93       	push	r16
    1582:	8d b7       	in	r24, 0x3d	; 61
    1584:	9e b7       	in	r25, 0x3e	; 62
    1586:	8b 57       	subi	r24, 0x7B	; 123
    1588:	91 40       	sbci	r25, 0x01	; 1
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	9e bf       	out	0x3e, r25	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	8d bf       	out	0x3d, r24	; 61
    1594:	ad b7       	in	r26, 0x3d	; 61
    1596:	be b7       	in	r27, 0x3e	; 62
    1598:	11 96       	adiw	r26, 0x01	; 1
    159a:	8b e7       	ldi	r24, 0x7B	; 123
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	ef e0       	ldi	r30, 0x0F	; 15
    15a0:	f4 e0       	ldi	r31, 0x04	; 4
    15a2:	01 90       	ld	r0, Z+
    15a4:	0d 92       	st	X+, r0
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	e1 f7       	brne	.-8      	; 0x15a2 <main+0x1f8>
    15aa:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <updateSequencer>
	updateScreen(&screenBank, &currentPattern, &currentGlobals);
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	cd bf       	out	0x3d, r28	; 61
    15b8:	a8 01       	movw	r20, r16
    15ba:	6f e0       	ldi	r22, 0x0F	; 15
    15bc:	74 e0       	ldi	r23, 0x04	; 4
    15be:	ce 01       	movw	r24, r28
    15c0:	02 96       	adiw	r24, 0x02	; 2
    15c2:	f4 d1       	rcall	.+1000   	; 0x19ac <updateScreen>
    15c4:	8d b7       	in	r24, 0x3d	; 61
	midiRead(currentPattern, currentGlobals);
    15c6:	9e b7       	in	r25, 0x3e	; 62
    15c8:	82 5f       	subi	r24, 0xF2	; 242
    15ca:	91 09       	sbc	r25, r1
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	9e bf       	out	0x3e, r25	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	8d bf       	out	0x3d, r24	; 61
    15d6:	ad b7       	in	r26, 0x3d	; 61
    15d8:	be b7       	in	r27, 0x3e	; 62
    15da:	11 96       	adiw	r26, 0x01	; 1
    15dc:	82 ef       	ldi	r24, 0xF2	; 242
    15de:	f8 01       	movw	r30, r16
    15e0:	01 90       	ld	r0, Z+
    15e2:	0d 92       	st	X+, r0
    15e4:	8a 95       	dec	r24
    15e6:	e1 f7       	brne	.-8      	; 0x15e0 <main+0x236>
    15e8:	8d b7       	in	r24, 0x3d	; 61
    15ea:	9e b7       	in	r25, 0x3e	; 62
    15ec:	8b 57       	subi	r24, 0x7B	; 123
    15ee:	91 40       	sbci	r25, 0x01	; 1
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	9e bf       	out	0x3e, r25	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	8d bf       	out	0x3d, r24	; 61
    15fa:	ad b7       	in	r26, 0x3d	; 61
    15fc:	be b7       	in	r27, 0x3e	; 62
    15fe:	11 96       	adiw	r26, 0x01	; 1
    1600:	8b e7       	ldi	r24, 0x7B	; 123
    1602:	91 e0       	ldi	r25, 0x01	; 1
    1604:	ef e0       	ldi	r30, 0x0F	; 15
    1606:	f4 e0       	ldi	r31, 0x04	; 4
    1608:	01 90       	ld	r0, Z+
    160a:	0d 92       	st	X+, r0
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	e1 f7       	brne	.-8      	; 0x1608 <main+0x25e>
    1610:	f0 d7       	rcall	.+4064   	; 0x25f2 <midiRead>
    1612:	0f b6       	in	r0, 0x3f	; 63
	releaseUpdate(&currentPattern, &currentGlobals);
    1614:	f8 94       	cli
    1616:	de bf       	out	0x3e, r29	; 62
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	cd bf       	out	0x3d, r28	; 61
    161c:	b8 01       	movw	r22, r16
    161e:	8f e0       	ldi	r24, 0x0F	; 15
    1620:	94 e0       	ldi	r25, 0x04	; 4
    1622:	0e 94 31 19 	call	0x3262	; 0x3262 <releaseUpdate>
    1626:	50 cf       	rjmp	.-352    	; 0x14c8 <main+0x11e>

00001628 <__vector_13>:
    1628:	1f 92       	push	r1
	//outputS(testArray,0);
	}
}

ISR(TIMER2_COMPA_vect)
{
    162a:	0f 92       	push	r0
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	0f 92       	push	r0
    1630:	11 24       	eor	r1, r1
    1632:	0b b6       	in	r0, 0x3b	; 59
    1634:	0f 92       	push	r0
    1636:	2f 93       	push	r18
    1638:	3f 93       	push	r19
    163a:	4f 93       	push	r20
    163c:	5f 93       	push	r21
    163e:	6f 93       	push	r22
    1640:	7f 93       	push	r23
    1642:	8f 93       	push	r24
    1644:	9f 93       	push	r25
    1646:	af 93       	push	r26
    1648:	bf 93       	push	r27
    164a:	ef 93       	push	r30
    164c:	ff 93       	push	r31
	globalTimer++; //this counts in one order of magnitude smaller than millis : 0.0001 seconds. 
    164e:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <globalTimer>
    1652:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <globalTimer+0x1>
    1656:	a0 91 02 04 	lds	r26, 0x0402	; 0x800402 <globalTimer+0x2>
    165a:	b0 91 03 04 	lds	r27, 0x0403	; 0x800403 <globalTimer+0x3>
    165e:	01 96       	adiw	r24, 0x01	; 1
    1660:	a1 1d       	adc	r26, r1
    1662:	b1 1d       	adc	r27, r1
    1664:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <globalTimer>
    1668:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <globalTimer+0x1>
    166c:	a0 93 02 04 	sts	0x0402, r26	; 0x800402 <globalTimer+0x2>
    1670:	b0 93 03 04 	sts	0x0403, r27	; 0x800403 <globalTimer+0x3>
	//we don't want to do anything else here.
	if(globalTimer%40==0) //every 40 ticks, we want to call De bounce
    1674:	60 91 00 04 	lds	r22, 0x0400	; 0x800400 <globalTimer>
    1678:	70 91 01 04 	lds	r23, 0x0401	; 0x800401 <globalTimer+0x1>
    167c:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <globalTimer+0x2>
    1680:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <globalTimer+0x3>
    1684:	28 e2       	ldi	r18, 0x28	; 40
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e0       	ldi	r20, 0x00	; 0
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__udivmodsi4>
    1690:	67 2b       	or	r22, r23
    1692:	68 2b       	or	r22, r24
    1694:	69 2b       	or	r22, r25
    1696:	f9 f4       	brne	.+62     	; 0x16d6 <__vector_13+0xae>

static inline void debounce() //is this Timer interrupt too long?
{
	static uint8_t vcount_low = 0xFF, vcount_high = 0xFF;
	static uint8_t button_state = 0;
	uint8_t state_changed = ~BUTTON_PIN ^ button_state;
    1698:	83 b1       	in	r24, 0x03	; 3
    169a:	20 91 ff 03 	lds	r18, 0x03FF	; 0x8003ff <button_state.1746>
    169e:	80 95       	com	r24
    16a0:	38 2f       	mov	r19, r24
    16a2:	32 27       	eor	r19, r18
	VC_DEC_OR_SET(vcount_high, vcount_low, state_changed);
    16a4:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <vcount_low.1744>
    16a8:	93 23       	and	r25, r19
    16aa:	89 2f       	mov	r24, r25
    16ac:	80 95       	com	r24
    16ae:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <vcount_low.1744>
    16b2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <vcount_high.1745>
    16b6:	93 23       	and	r25, r19
    16b8:	98 27       	eor	r25, r24
    16ba:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <vcount_high.1745>
    16be:	83 23       	and	r24, r19
	state_changed &= vcount_low & vcount_high;
    16c0:	89 23       	and	r24, r25
	button_state ^= state_changed;
    16c2:	92 2f       	mov	r25, r18
    16c4:	98 27       	eor	r25, r24
    16c6:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <button_state.1746>
	buttons_down |= button_state&state_changed;
    16ca:	20 91 0d 04 	lds	r18, 0x040D	; 0x80040d <buttons_down>
    16ce:	89 23       	and	r24, r25
    16d0:	82 2b       	or	r24, r18
    16d2:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <buttons_down>
	{
		debounce();
	}
	if(globalTimer%100==0)
    16d6:	60 91 00 04 	lds	r22, 0x0400	; 0x800400 <globalTimer>
    16da:	70 91 01 04 	lds	r23, 0x0401	; 0x800401 <globalTimer+0x1>
    16de:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <globalTimer+0x2>
    16e2:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <globalTimer+0x3>
    16e6:	24 e6       	ldi	r18, 0x64	; 100
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e0       	ldi	r20, 0x00	; 0
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__udivmodsi4>
    16f2:	67 2b       	or	r22, r23
    16f4:	68 2b       	or	r22, r24
    16f6:	69 2b       	or	r22, r25
    16f8:	31 f4       	brne	.+12     	; 0x1706 <__vector_13+0xde>
	{
		listenEncodersNew(&currentPattern, &currentGlobals);
    16fa:	6a e8       	ldi	r22, 0x8A	; 138
    16fc:	75 e0       	ldi	r23, 0x05	; 5
    16fe:	8f e0       	ldi	r24, 0x0F	; 15
    1700:	94 e0       	ldi	r25, 0x04	; 4
    1702:	0e 94 fe 02 	call	0x5fc	; 0x5fc <listenEncodersNew>
	}
    1706:	ff 91       	pop	r31
    1708:	ef 91       	pop	r30
    170a:	bf 91       	pop	r27
    170c:	af 91       	pop	r26
    170e:	9f 91       	pop	r25
    1710:	8f 91       	pop	r24
    1712:	7f 91       	pop	r23
    1714:	6f 91       	pop	r22
    1716:	5f 91       	pop	r21
    1718:	4f 91       	pop	r20
    171a:	3f 91       	pop	r19
    171c:	2f 91       	pop	r18
    171e:	0f 90       	pop	r0
    1720:	0b be       	out	0x3b, r0	; 59
    1722:	0f 90       	pop	r0
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	0f 90       	pop	r0
    1728:	1f 90       	pop	r1
    172a:	18 95       	reti

0000172c <initMenu>:
uint8_t prevMenuState; //do we need this anymore?

//I don't like using a global extern here, instead of a passed pointer,
//but I can't seem to get the struct to stay in scope.
void initMenu(Screen *initTheScreen, Pattern currentPattern, Globals currentGlobals)
{
    172c:	cf 92       	push	r12
    172e:	df 92       	push	r13
    1730:	ef 92       	push	r14
    1732:	ff 92       	push	r15
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	8c 01       	movw	r16, r24
    1742:	c2 57       	subi	r28, 0x72	; 114
    1744:	de 4f       	sbci	r29, 0xFE	; 254
    1746:	e8 80       	ld	r14, Y
    1748:	ce 58       	subi	r28, 0x8E	; 142
    174a:	d1 40       	sbci	r29, 0x01	; 1

//screen0
initArrays(initTheScreen->screen0,0,"Performance Mode");
    174c:	4f ea       	ldi	r20, 0xAF	; 175
    174e:	52 e0       	ldi	r21, 0x02	; 2
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	b6 d9       	rcall	.-3220   	; 0xac2 <initArrays>
initArrays(initTheScreen->screen0,1,"Pattern:");
    1756:	40 ec       	ldi	r20, 0xC0	; 192
    1758:	52 e0       	ldi	r21, 0x02	; 2
    175a:	61 e0       	ldi	r22, 0x01	; 1
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	c8 01       	movw	r24, r16
    1760:	b0 d9       	rcall	.-3232   	; 0xac2 <initArrays>
initArrays(initTheScreen->screen0,2,"BPM:");
    1762:	49 ec       	ldi	r20, 0xC9	; 201
    1764:	52 e0       	ldi	r21, 0x02	; 2
    1766:	62 e0       	ldi	r22, 0x02	; 2
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	c8 01       	movw	r24, r16
    176c:	aa d9       	rcall	.-3244   	; 0xac2 <initArrays>
initArrays(initTheScreen->screen0,3,"Stop");
    176e:	4e ec       	ldi	r20, 0xCE	; 206
    1770:	52 e0       	ldi	r21, 0x02	; 2
    1772:	63 e0       	ldi	r22, 0x03	; 3
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	c8 01       	movw	r24, r16
    1778:	a4 d9       	rcall	.-3256   	; 0xac2 <initArrays>

//screen1
initArrays(initTheScreen->screen1,0,"Sequence Edit");
    177a:	68 01       	movw	r12, r16
    177c:	8d eb       	ldi	r24, 0xBD	; 189
    177e:	c8 0e       	add	r12, r24
    1780:	d1 1c       	adc	r13, r1
    1782:	43 ed       	ldi	r20, 0xD3	; 211
    1784:	52 e0       	ldi	r21, 0x02	; 2
    1786:	60 e0       	ldi	r22, 0x00	; 0
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	c6 01       	movw	r24, r12
    178c:	9a d9       	rcall	.-3276   	; 0xac2 <initArrays>
initArrays(initTheScreen->screen1,1,"Pattern:");
    178e:	40 ec       	ldi	r20, 0xC0	; 192
    1790:	52 e0       	ldi	r21, 0x02	; 2
    1792:	61 e0       	ldi	r22, 0x01	; 1
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	c6 01       	movw	r24, r12
    1798:	94 d9       	rcall	.-3288   	; 0xac2 <initArrays>
initArrays(initTheScreen->screen1,2,"Steps:");
    179a:	41 ee       	ldi	r20, 0xE1	; 225
    179c:	52 e0       	ldi	r21, 0x02	; 2
    179e:	62 e0       	ldi	r22, 0x02	; 2
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	c6 01       	movw	r24, r12
    17a4:	8e d9       	rcall	.-3300   	; 0xac2 <initArrays>
initArrays(initTheScreen->screen1,3,"Step number:");
    17a6:	48 ee       	ldi	r20, 0xE8	; 232
    17a8:	52 e0       	ldi	r21, 0x02	; 2
    17aa:	63 e0       	ldi	r22, 0x03	; 3
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	c6 01       	movw	r24, r12
    17b0:	88 d9       	rcall	.-3312   	; 0xac2 <initArrays>
    17b2:	68 01       	movw	r12, r16

//screen2
initArrays(initTheScreen->screen2,0,"Track Settings");
    17b4:	86 e8       	ldi	r24, 0x86	; 134
    17b6:	c8 1a       	sub	r12, r24
    17b8:	8e ef       	ldi	r24, 0xFE	; 254
    17ba:	d8 0a       	sbc	r13, r24
    17bc:	45 ef       	ldi	r20, 0xF5	; 245
    17be:	52 e0       	ldi	r21, 0x02	; 2
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	c6 01       	movw	r24, r12
    17c6:	7d d9       	rcall	.-3334   	; 0xac2 <initArrays>
initArrays(initTheScreen->screen2,1,"Track:");
    17c8:	44 e0       	ldi	r20, 0x04	; 4
    17ca:	53 e0       	ldi	r21, 0x03	; 3
    17cc:	61 e0       	ldi	r22, 0x01	; 1
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	c6 01       	movw	r24, r12
    17d2:	77 d9       	rcall	.-3346   	; 0xac2 <initArrays>
initArrays(initTheScreen->screen2,2,"PlayMode:");
    17d4:	4b e0       	ldi	r20, 0x0B	; 11
    17d6:	53 e0       	ldi	r21, 0x03	; 3
    17d8:	62 e0       	ldi	r22, 0x02	; 2
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	c6 01       	movw	r24, r12
    17de:	71 d9       	rcall	.-3358   	; 0xac2 <initArrays>
initArrays(initTheScreen->screen2,3,"OutRoute:");
    17e0:	45 e1       	ldi	r20, 0x15	; 21
    17e2:	53 e0       	ldi	r21, 0x03	; 3
    17e4:	63 e0       	ldi	r22, 0x03	; 3
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	c6 01       	movw	r24, r12
    17ea:	6b d9       	rcall	.-3370   	; 0xac2 <initArrays>
initArrays(initTheScreen->screen2,4,"EnvelopeMode:");
    17ec:	4f e1       	ldi	r20, 0x1F	; 31
    17ee:	53 e0       	ldi	r21, 0x03	; 3
    17f0:	64 e0       	ldi	r22, 0x04	; 4
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	c6 01       	movw	r24, r12
    17f6:	65 d9       	rcall	.-3382   	; 0xac2 <initArrays>
    17f8:	4d e2       	ldi	r20, 0x2D	; 45
initArrays(initTheScreen->screen2,5,"SustainTime:      S");
    17fa:	53 e0       	ldi	r21, 0x03	; 3
    17fc:	65 e0       	ldi	r22, 0x05	; 5
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	c6 01       	movw	r24, r12
    1802:	5f d9       	rcall	.-3394   	; 0xac2 <initArrays>
    1804:	68 01       	movw	r12, r16

//screen3
initArrays(initTheScreen->screen3,1,"Midi Channel:");
    1806:	89 ec       	ldi	r24, 0xC9	; 201
    1808:	c8 1a       	sub	r12, r24
    180a:	8d ef       	ldi	r24, 0xFD	; 253
    180c:	d8 0a       	sbc	r13, r24
    180e:	41 e4       	ldi	r20, 0x41	; 65
    1810:	53 e0       	ldi	r21, 0x03	; 3
    1812:	61 e0       	ldi	r22, 0x01	; 1
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	c6 01       	movw	r24, r12
    1818:	54 d9       	rcall	.-3416   	; 0xac2 <initArrays>
initArrays(initTheScreen->screen3,2,"Midi trig   :");
    181a:	4f e4       	ldi	r20, 0x4F	; 79
    181c:	53 e0       	ldi	r21, 0x03	; 3
    181e:	62 e0       	ldi	r22, 0x02	; 2
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	c6 01       	movw	r24, r12
    1824:	4e d9       	rcall	.-3428   	; 0xac2 <initArrays>
initArrays(initTheScreen->screen3,3," ");
    1826:	44 ef       	ldi	r20, 0xF4	; 244
    1828:	53 e0       	ldi	r21, 0x03	; 3
    182a:	63 e0       	ldi	r22, 0x03	; 3
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	c6 01       	movw	r24, r12
    1830:	48 d9       	rcall	.-3440   	; 0xac2 <initArrays>
initArrays(initTheScreen->screen3,0,"Global Settings");
    1832:	4d e5       	ldi	r20, 0x5D	; 93
    1834:	53 e0       	ldi	r21, 0x03	; 3
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	c6 01       	movw	r24, r12
    183c:	42 d9       	rcall	.-3452   	; 0xac2 <initArrays>

//init all of the knob arrays:
initArrays(initTheScreen->knobScreen,0,"OutVolume x : xxxdb");//string 0 is outVolume
    183e:	68 01       	movw	r12, r16
    1840:	8c e0       	ldi	r24, 0x0C	; 12
    1842:	c8 1a       	sub	r12, r24
    1844:	8d ef       	ldi	r24, 0xFD	; 253
    1846:	d8 0a       	sbc	r13, r24
    1848:	4d e6       	ldi	r20, 0x6D	; 109
    184a:	53 e0       	ldi	r21, 0x03	; 3
    184c:	60 e0       	ldi	r22, 0x00	; 0
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,1,"Pitch : xxx");//string 1 is pitch
    1852:	37 d9       	rcall	.-3474   	; 0xac2 <initArrays>
    1854:	41 e8       	ldi	r20, 0x81	; 129
    1856:	53 e0       	ldi	r21, 0x03	; 3
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,2,"AttackTime  :      S"); //string 2 is Envelope gain
    185e:	31 d9       	rcall	.-3486   	; 0xac2 <initArrays>
    1860:	4d e8       	ldi	r20, 0x8D	; 141
    1862:	53 e0       	ldi	r21, 0x03	; 3
    1864:	62 e0       	ldi	r22, 0x02	; 2
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	c6 01       	movw	r24, r12
    186a:	2b d9       	rcall	.-3498   	; 0xac2 <initArrays>
initArrays(initTheScreen->knobScreen,3,"ReleaseTimexx:xx xxx"); //string 3 is Envelop Time
    186c:	42 ea       	ldi	r20, 0xA2	; 162
    186e:	53 e0       	ldi	r21, 0x03	; 3
    1870:	63 e0       	ldi	r22, 0x03	; 3
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	c6 01       	movw	r24, r12
    1876:	25 d9       	rcall	.-3510   	; 0xac2 <initArrays>
initArrays(initTheScreen->knobScreen,4,"TrackVolume xx:xxxdb"); //string 4 is track Level.
    1878:	47 eb       	ldi	r20, 0xB7	; 183
    187a:	53 e0       	ldi	r21, 0x03	; 3
    187c:	64 e0       	ldi	r22, 0x04	; 4
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	c6 01       	movw	r24, r12
    1882:	1f d9       	rcall	.-3522   	; 0xac2 <initArrays>
    1884:	cc 52       	subi	r28, 0x2C	; 44
//initArrays(initTheScreen->knobScreen,5,"BPM: ");
//we might want to put in one of these for BPM, but I'm not sure. 

numPrinter(initTheScreen->screen0[2],5,3, currentPattern.patternBPM);
    1886:	df 4f       	sbci	r29, 0xFF	; 255
    1888:	28 81       	ld	r18, Y
    188a:	39 81       	ldd	r19, Y+1	; 0x01
    188c:	c4 5d       	subi	r28, 0xD4	; 212
    188e:	d0 40       	sbci	r29, 0x00	; 0
    1890:	43 e0       	ldi	r20, 0x03	; 3
    1892:	65 e0       	ldi	r22, 0x05	; 5
    1894:	c8 01       	movw	r24, r16
    1896:	8a 96       	adiw	r24, 0x2a	; 42
    1898:	ab d7       	rcall	.+3926   	; 0x27f0 <numPrinter>
    189a:	c9 56       	subi	r28, 0x69	; 105
numPrinter(initTheScreen->screen3[1],14,2, (currentGlobals.midiChannel)+1);
    189c:	de 4f       	sbci	r29, 0xFE	; 254
    189e:	28 81       	ld	r18, Y
    18a0:	c7 59       	subi	r28, 0x97	; 151
    18a2:	d1 40       	sbci	r29, 0x01	; 1
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	2f 5f       	subi	r18, 0xFF	; 255
    18a8:	3f 4f       	sbci	r19, 0xFF	; 255
    18aa:	42 e0       	ldi	r20, 0x02	; 2
    18ac:	6e e0       	ldi	r22, 0x0E	; 14
    18ae:	c8 01       	movw	r24, r16
    18b0:	84 5b       	subi	r24, 0xB4	; 180
    18b2:	9d 4f       	sbci	r25, 0xFD	; 253
    18b4:	9d d7       	rcall	.+3898   	; 0x27f0 <numPrinter>
    18b6:	f1 2c       	mov	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	e8 1a       	sub	r14, r24
    18bc:	f8 0a       	sbc	r15, r24
    18be:	97 01       	movw	r18, r14
    18c0:	43 e0       	ldi	r20, 0x03	; 3
    18c2:	69 e0       	ldi	r22, 0x09	; 9
    18c4:	c8 01       	movw	r24, r16
    18c6:	45 96       	adiw	r24, 0x15	; 21
    18c8:	93 d7       	rcall	.+3878   	; 0x27f0 <numPrinter>
    18ca:	97 01       	movw	r18, r14
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    18cc:	43 e0       	ldi	r20, 0x03	; 3
    18ce:	69 e0       	ldi	r22, 0x09	; 9
    18d0:	c8 01       	movw	r24, r16
    18d2:	8e 52       	subi	r24, 0x2E	; 46
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	8c d7       	rcall	.+3864   	; 0x27f0 <numPrinter>
    18d8:	ca 52       	subi	r28, 0x2A	; 42
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
    18da:	df 4f       	sbci	r29, 0xFF	; 255
    18dc:	28 81       	ld	r18, Y
    18de:	c6 5d       	subi	r28, 0xD6	; 214
    18e0:	d0 40       	sbci	r29, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	42 e0       	ldi	r20, 0x02	; 2
    18e6:	67 e0       	ldi	r22, 0x07	; 7
    18e8:	c8 01       	movw	r24, r16
    18ea:	89 51       	subi	r24, 0x19	; 25
    18ec:	9f 4f       	sbci	r25, 0xFF	; 255
    18ee:	80 d7       	rcall	.+3840   	; 0x27f0 <numPrinter>
    18f0:	c1 57       	subi	r28, 0x71	; 113
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
    18f2:	de 4f       	sbci	r29, 0xFE	; 254
    18f4:	28 81       	ld	r18, Y
    18f6:	cf 58       	subi	r28, 0x8F	; 143
    18f8:	d1 40       	sbci	r29, 0x01	; 1
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	2f 5f       	subi	r18, 0xFF	; 255
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	42 e0       	ldi	r20, 0x02	; 2
    1902:	6d e0       	ldi	r22, 0x0D	; 13
    1904:	c8 01       	movw	r24, r16
    1906:	84 50       	subi	r24, 0x04	; 4
    1908:	9f 4f       	sbci	r25, 0xFF	; 255
    190a:	72 d7       	rcall	.+3812   	; 0x27f0 <numPrinter>
    190c:	e1 2c       	mov	r14, r1
    190e:	f1 2c       	mov	r15, r1
    1910:	b7 01       	movw	r22, r14
    1912:	c8 01       	movw	r24, r16
 
	for(uint8_t i=0;i<4; i++ )
	{
		outputS(initTheScreen->screen0[i],i);
    1914:	55 d7       	rcall	.+3754   	; 0x27c0 <outputS>
    1916:	8f ef       	ldi	r24, 0xFF	; 255
    1918:	e8 1a       	sub	r14, r24
    191a:	f8 0a       	sbc	r15, r24
    191c:	0b 5e       	subi	r16, 0xEB	; 235
    191e:	1f 4f       	sbci	r17, 0xFF	; 255
    1920:	84 e0       	ldi	r24, 0x04	; 4
    1922:	e8 16       	cp	r14, r24
    1924:	f1 04       	cpc	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
 
	for(uint8_t i=0;i<4; i++ )
    1926:	a1 f7       	brne	.-24     	; 0x1910 <initMenu+0x1e4>
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	1f 91       	pop	r17
	{
		outputS(initTheScreen->screen0[i],i);
	}
}
    192e:	0f 91       	pop	r16
    1930:	ff 90       	pop	r15
    1932:	ef 90       	pop	r14
    1934:	df 90       	pop	r13
    1936:	cf 90       	pop	r12
    1938:	08 95       	ret

0000193a <reInitMenuOnLoad>:
    193a:	ef 92       	push	r14
    193c:	ff 92       	push	r15
    193e:	0f 93       	push	r16

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(Screen *initTheScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    1940:	1f 93       	push	r17
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	ec 01       	movw	r28, r24
    1948:	8b 01       	movw	r16, r22
    194a:	7a 01       	movw	r14, r20
	numPrinter(initTheScreen->screen0[2],5,3, currentPattern->patternBPM);
    194c:	fb 01       	movw	r30, r22
    194e:	e8 53       	subi	r30, 0x38	; 56
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	20 81       	ld	r18, Z
    1954:	31 81       	ldd	r19, Z+1	; 0x01
    1956:	43 e0       	ldi	r20, 0x03	; 3
    1958:	65 e0       	ldi	r22, 0x05	; 5
    195a:	8a 96       	adiw	r24, 0x2a	; 42
    195c:	49 d7       	rcall	.+3730   	; 0x27f0 <numPrinter>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
    195e:	f8 01       	movw	r30, r16
    1960:	e6 53       	subi	r30, 0x36	; 54
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	20 81       	ld	r18, Z
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	42 e0       	ldi	r20, 0x02	; 2
    196a:	67 e0       	ldi	r22, 0x07	; 7
    196c:	ce 01       	movw	r24, r28
    196e:	89 51       	subi	r24, 0x19	; 25
    1970:	9f 4f       	sbci	r25, 0xFF	; 255
    1972:	3e d7       	rcall	.+3708   	; 0x27f0 <numPrinter>
	numPrinter(initTheScreen->screen1[1],9,3,(currentGlobals->currentPatternNumber)+1);
    1974:	f7 01       	movw	r30, r14
    1976:	27 81       	ldd	r18, Z+7	; 0x07
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	2f 5f       	subi	r18, 0xFF	; 255
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	43 e0       	ldi	r20, 0x03	; 3
    1980:	69 e0       	ldi	r22, 0x09	; 9
    1982:	ce 01       	movw	r24, r28
    1984:	8e 52       	subi	r24, 0x2E	; 46
    1986:	9f 4f       	sbci	r25, 0xFF	; 255
    1988:	33 d7       	rcall	.+3686   	; 0x27f0 <numPrinter>
	numPrinter(initTheScreen->screen0[1],9,3,(currentGlobals->currentPatternNumber)+1);
    198a:	f7 01       	movw	r30, r14
    198c:	27 81       	ldd	r18, Z+7	; 0x07
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	2f 5f       	subi	r18, 0xFF	; 255
    1992:	3f 4f       	sbci	r19, 0xFF	; 255
    1994:	43 e0       	ldi	r20, 0x03	; 3
    1996:	69 e0       	ldi	r22, 0x09	; 9
    1998:	ce 01       	movw	r24, r28
    199a:	45 96       	adiw	r24, 0x15	; 21
    199c:	29 d7       	rcall	.+3666   	; 0x27f0 <numPrinter>
}
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	1f 91       	pop	r17
    19a4:	0f 91       	pop	r16
    19a6:	ff 90       	pop	r15
    19a8:	ef 90       	pop	r14
    19aa:	08 95       	ret

000019ac <updateScreen>:

void updateScreen(Screen *menuScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    19ac:	8f 92       	push	r8
    19ae:	9f 92       	push	r9
    19b0:	af 92       	push	r10
    19b2:	bf 92       	push	r11
    19b4:	cf 92       	push	r12
    19b6:	df 92       	push	r13
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	8c 01       	movw	r16, r24
    19c6:	7b 01       	movw	r14, r22
    19c8:	ea 01       	movw	r28, r20
	
	if((currentGlobals->valueChangeFlag)&(1<<encoderChange))//check if encoder bit is high
    19ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    19cc:	80 ff       	sbrs	r24, 0
    19ce:	da c2       	rjmp	.+1460   	; 0x1f84 <updateScreen+0x5d8>
	{ 
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<encoderChange));//set encoder bit low, and carry our whatever encoder change has occurred. 
    19d0:	1e 86       	std	Y+14, r1	; 0x0e
		//we need to debug this to make sure it's doing what we think it's doing.
		switch(currentGlobals->menuState)
    19d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	8b 33       	cpi	r24, 0x3B	; 59
    19d8:	91 05       	cpc	r25, r1
    19da:	08 f0       	brcs	.+2      	; 0x19de <updateScreen+0x32>
    19dc:	d0 c2       	rjmp	.+1440   	; 0x1f7e <updateScreen+0x5d2>
    19de:	fc 01       	movw	r30, r24
    19e0:	88 27       	eor	r24, r24
    19e2:	e3 55       	subi	r30, 0x53	; 83
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	8f 4f       	sbci	r24, 0xFF	; 255
    19e8:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <__tablejump2__>
		{
			case PreformanceModeInit: //initial state
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    19ec:	c8 01       	movw	r24, r16
    19ee:	a5 df       	rcall	.-182    	; 0x193a <reInitMenuOnLoad>
			outputS(menuScreen->screen0[0], 0);
    19f0:	60 e0       	ldi	r22, 0x00	; 0
    19f2:	70 e0       	ldi	r23, 0x00	; 0
    19f4:	c8 01       	movw	r24, r16
    19f6:	e4 d6       	rcall	.+3528   	; 0x27c0 <outputS>
			outputS(menuScreen->screen0[1], 1);
    19f8:	61 e0       	ldi	r22, 0x01	; 1
    19fa:	70 e0       	ldi	r23, 0x00	; 0
    19fc:	c8 01       	movw	r24, r16
    19fe:	45 96       	adiw	r24, 0x15	; 21
    1a00:	df d6       	rcall	.+3518   	; 0x27c0 <outputS>
			outputS(menuScreen->screen0[2], 2);
    1a02:	62 e0       	ldi	r22, 0x02	; 2
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	c8 01       	movw	r24, r16
    1a08:	8a 96       	adiw	r24, 0x2a	; 42
    1a0a:	da d6       	rcall	.+3508   	; 0x27c0 <outputS>
			outputS(menuScreen->screen0[3], 3);
    1a0c:	63 e0       	ldi	r22, 0x03	; 3
    1a0e:	70 e0       	ldi	r23, 0x00	; 0
    1a10:	c8 01       	movw	r24, r16
    1a12:	cf 96       	adiw	r24, 0x3f	; 63
    1a14:	d5 d6       	rcall	.+3498   	; 0x27c0 <outputS>
			break;
    1a16:	b3 c2       	rjmp	.+1382   	; 0x1f7e <updateScreen+0x5d2>

			case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0);
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	c8 01       	movw	r24, r16
    1a1e:	83 54       	subi	r24, 0x43	; 67
    1a20:	9f 4f       	sbci	r25, 0xFF	; 255
    1a22:	ce d6       	rcall	.+3484   	; 0x27c0 <outputS>
			outputS(menuScreen->screen1[1], 1);
    1a24:	61 e0       	ldi	r22, 0x01	; 1
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	c8 01       	movw	r24, r16
    1a2a:	8e 52       	subi	r24, 0x2E	; 46
    1a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2e:	c8 d6       	rcall	.+3472   	; 0x27c0 <outputS>
			outputS(menuScreen->screen1[2], 2);
    1a30:	62 e0       	ldi	r22, 0x02	; 2
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	c8 01       	movw	r24, r16
    1a36:	89 51       	subi	r24, 0x19	; 25
    1a38:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3a:	c2 d6       	rcall	.+3460   	; 0x27c0 <outputS>
			outputS(menuScreen->screen1[3], 3);
    1a3c:	63 e0       	ldi	r22, 0x03	; 3
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	c8 01       	movw	r24, r16
    1a42:	84 50       	subi	r24, 0x04	; 4
    1a44:	9f 4f       	sbci	r25, 0xFF	; 255
    1a46:	bc d6       	rcall	.+3448   	; 0x27c0 <outputS>
    1a48:	81 e1       	ldi	r24, 0x11	; 17
			currentGlobals->menuState = SequencerMenuArrow1; 
    1a4a:	8a 87       	std	Y+10, r24	; 0x0a
    1a4c:	88 e0       	ldi	r24, 0x08	; 8
			
			
			case SequencerMenuArrow1:
			menuScreen->screen1[1][19]= 8;
    1a4e:	f8 01       	movw	r30, r16
    1a50:	eb 51       	subi	r30, 0x1B	; 27
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 83       	st	Z, r24
    1a56:	80 e2       	ldi	r24, 0x20	; 32
			menuScreen->screen1[2][19] = ' ';
    1a58:	75 96       	adiw	r30, 0x15	; 21
    1a5a:	80 83       	st	Z, r24
			menuScreen->screen1[3][19] = ' ';
    1a5c:	75 96       	adiw	r30, 0x15	; 21
    1a5e:	80 83       	st	Z, r24
			outputS(menuScreen->screen1[1], 1);
    1a60:	61 e0       	ldi	r22, 0x01	; 1
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	c8 01       	movw	r24, r16
    1a66:	8e 52       	subi	r24, 0x2E	; 46
    1a68:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6a:	aa d6       	rcall	.+3412   	; 0x27c0 <outputS>
			outputS(menuScreen->screen1[2], 2);
    1a6c:	62 e0       	ldi	r22, 0x02	; 2
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	c8 01       	movw	r24, r16
    1a72:	89 51       	subi	r24, 0x19	; 25
    1a74:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    1a76:	a4 d6       	rcall	.+3400   	; 0x27c0 <outputS>
    1a78:	63 e0       	ldi	r22, 0x03	; 3
    1a7a:	70 e0       	ldi	r23, 0x00	; 0
    1a7c:	c8 01       	movw	r24, r16
    1a7e:	84 50       	subi	r24, 0x04	; 4
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    1a82:	9e d6       	rcall	.+3388   	; 0x27c0 <outputS>
			
			case SequencerMenuArrow1Select:
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    1a84:	7c c2       	rjmp	.+1272   	; 0x1f7e <updateScreen+0x5d2>
    1a86:	c8 01       	movw	r24, r16
    1a88:	58 df       	rcall	.-336    	; 0x193a <reInitMenuOnLoad>
			outputS(menuScreen->screen1[1],1);
    1a8a:	61 e0       	ldi	r22, 0x01	; 1
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	c8 01       	movw	r24, r16
    1a90:	8e 52       	subi	r24, 0x2E	; 46
    1a92:	9f 4f       	sbci	r25, 0xFF	; 255
    1a94:	95 d6       	rcall	.+3370   	; 0x27c0 <outputS>
    1a96:	73 c2       	rjmp	.+1254   	; 0x1f7e <updateScreen+0x5d2>
			break;
    1a98:	80 e2       	ldi	r24, 0x20	; 32
	
	
			case SequencerMenuArrow2:
			menuScreen->screen1[1][19]= ' ';
    1a9a:	f8 01       	movw	r30, r16
    1a9c:	eb 51       	subi	r30, 0x1B	; 27
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	80 83       	st	Z, r24
			menuScreen->screen1[2][19] = 8;
    1aa2:	98 e0       	ldi	r25, 0x08	; 8
    1aa4:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = ' ';
    1aa6:	90 83       	st	Z, r25
    1aa8:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen1[1], 1);
    1aaa:	80 83       	st	Z, r24
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	c8 01       	movw	r24, r16
    1ab2:	8e 52       	subi	r24, 0x2E	; 46
    1ab4:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    1ab6:	84 d6       	rcall	.+3336   	; 0x27c0 <outputS>
    1ab8:	62 e0       	ldi	r22, 0x02	; 2
    1aba:	70 e0       	ldi	r23, 0x00	; 0
    1abc:	c8 01       	movw	r24, r16
    1abe:	89 51       	subi	r24, 0x19	; 25
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	7e d6       	rcall	.+3324   	; 0x27c0 <outputS>
			outputS(menuScreen->screen1[3], 3);
    1ac4:	63 e0       	ldi	r22, 0x03	; 3
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	c8 01       	movw	r24, r16
    1aca:	84 50       	subi	r24, 0x04	; 4
    1acc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ace:	78 d6       	rcall	.+3312   	; 0x27c0 <outputS>
			break;
	
			case SequencerMenuArrow2Select:
			numPrinter(menuScreen->screen1[2],7,2,currentPattern->numSteps);
    1ad0:	56 c2       	rjmp	.+1196   	; 0x1f7e <updateScreen+0x5d2>
    1ad2:	fb 01       	movw	r30, r22
    1ad4:	e6 53       	subi	r30, 0x36	; 54
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	20 81       	ld	r18, Z
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	42 e0       	ldi	r20, 0x02	; 2
    1ade:	67 e0       	ldi	r22, 0x07	; 7
    1ae0:	68 01       	movw	r12, r16
    1ae2:	87 ee       	ldi	r24, 0xE7	; 231
    1ae4:	c8 0e       	add	r12, r24
    1ae6:	d1 1c       	adc	r13, r1
    1ae8:	c6 01       	movw	r24, r12
    1aea:	82 d6       	rcall	.+3332   	; 0x27f0 <numPrinter>
			outputS(menuScreen->screen1[2],2);
    1aec:	62 e0       	ldi	r22, 0x02	; 2
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	c6 01       	movw	r24, r12
    1af2:	66 d6       	rcall	.+3276   	; 0x27c0 <outputS>
			break;
    1af4:	44 c2       	rjmp	.+1160   	; 0x1f7e <updateScreen+0x5d2>
	
			case SequencerMenuArrow3:
			menuScreen->screen1[1][19]= ' ';
    1af6:	80 e2       	ldi	r24, 0x20	; 32
    1af8:	f8 01       	movw	r30, r16
    1afa:	eb 51       	subi	r30, 0x1B	; 27
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
			menuScreen->screen1[2][19] = ' ';
    1afe:	80 83       	st	Z, r24
    1b00:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = 8;
    1b02:	80 83       	st	Z, r24
    1b04:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen1[1], 1);
    1b06:	75 96       	adiw	r30, 0x15	; 21
    1b08:	80 83       	st	Z, r24
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	c8 01       	movw	r24, r16
    1b10:	8e 52       	subi	r24, 0x2E	; 46
    1b12:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    1b14:	55 d6       	rcall	.+3242   	; 0x27c0 <outputS>
    1b16:	62 e0       	ldi	r22, 0x02	; 2
    1b18:	70 e0       	ldi	r23, 0x00	; 0
    1b1a:	c8 01       	movw	r24, r16
    1b1c:	89 51       	subi	r24, 0x19	; 25
    1b1e:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    1b20:	4f d6       	rcall	.+3230   	; 0x27c0 <outputS>
    1b22:	63 e0       	ldi	r22, 0x03	; 3
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	c8 01       	movw	r24, r16
    1b28:	84 50       	subi	r24, 0x04	; 4
    1b2a:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    1b2c:	49 d6       	rcall	.+3218   	; 0x27c0 <outputS>
		
			case SequencerMenuArrow3Select:
			numPrinter(menuScreen->screen1[3],14,2,(currentGlobals->currentStep)+1); //these are 0 indexed, so we need to add 1 to the display.
    1b2e:	27 c2       	rjmp	.+1102   	; 0x1f7e <updateScreen+0x5d2>
    1b30:	28 85       	ldd	r18, Y+8	; 0x08
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	2f 5f       	subi	r18, 0xFF	; 255
    1b36:	3f 4f       	sbci	r19, 0xFF	; 255
    1b38:	42 e0       	ldi	r20, 0x02	; 2
    1b3a:	6e e0       	ldi	r22, 0x0E	; 14
    1b3c:	68 01       	movw	r12, r16
    1b3e:	9c ef       	ldi	r25, 0xFC	; 252
    1b40:	c9 0e       	add	r12, r25
    1b42:	d1 1c       	adc	r13, r1
			outputS(menuScreen->screen1[3],3);
    1b44:	c6 01       	movw	r24, r12
    1b46:	54 d6       	rcall	.+3240   	; 0x27f0 <numPrinter>
    1b48:	63 e0       	ldi	r22, 0x03	; 3
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	c6 01       	movw	r24, r12
			break;
	

			case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0);
    1b4e:	38 d6       	rcall	.+3184   	; 0x27c0 <outputS>
    1b50:	16 c2       	rjmp	.+1068   	; 0x1f7e <updateScreen+0x5d2>
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	c8 01       	movw	r24, r16
    1b58:	86 58       	subi	r24, 0x86	; 134
    1b5a:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[1], 1);
    1b5c:	31 d6       	rcall	.+3170   	; 0x27c0 <outputS>
    1b5e:	61 e0       	ldi	r22, 0x01	; 1
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	c8 01       	movw	r24, r16
    1b64:	81 57       	subi	r24, 0x71	; 113
    1b66:	9e 4f       	sbci	r25, 0xFE	; 254
    1b68:	2b d6       	rcall	.+3158   	; 0x27c0 <outputS>
			outputS(menuScreen->screen2[2], 2);
    1b6a:	62 e0       	ldi	r22, 0x02	; 2
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	c8 01       	movw	r24, r16
    1b70:	8c 55       	subi	r24, 0x5C	; 92
    1b72:	9e 4f       	sbci	r25, 0xFE	; 254
    1b74:	25 d6       	rcall	.+3146   	; 0x27c0 <outputS>
			outputS(menuScreen->screen2[3], 3);
    1b76:	63 e0       	ldi	r22, 0x03	; 3
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	c8 01       	movw	r24, r16
    1b7c:	87 54       	subi	r24, 0x47	; 71
    1b7e:	9e 4f       	sbci	r25, 0xFE	; 254
    1b80:	1f d6       	rcall	.+3134   	; 0x27c0 <outputS>
			currentGlobals->menuState = TrackMenuArrow1;
    1b82:	81 e2       	ldi	r24, 0x21	; 33
		
			case TrackMenuArrow1:
			menuScreen->screen2[1][19]= 8;
    1b84:	8a 87       	std	Y+10, r24	; 0x0a
    1b86:	88 e0       	ldi	r24, 0x08	; 8
    1b88:	f8 01       	movw	r30, r16
    1b8a:	ee 55       	subi	r30, 0x5E	; 94
    1b8c:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    1b8e:	80 83       	st	Z, r24
    1b90:	80 e2       	ldi	r24, 0x20	; 32
    1b92:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    1b94:	80 83       	st	Z, r24
    1b96:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    1b98:	80 83       	st	Z, r24
    1b9a:	61 e0       	ldi	r22, 0x01	; 1
    1b9c:	70 e0       	ldi	r23, 0x00	; 0
    1b9e:	c8 01       	movw	r24, r16
    1ba0:	81 57       	subi	r24, 0x71	; 113
    1ba2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ba4:	0d d6       	rcall	.+3098   	; 0x27c0 <outputS>
			outputS(menuScreen->screen2[2], 2);
    1ba6:	62 e0       	ldi	r22, 0x02	; 2
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	c8 01       	movw	r24, r16
    1bac:	8c 55       	subi	r24, 0x5C	; 92
    1bae:	9e 4f       	sbci	r25, 0xFE	; 254
    1bb0:	07 d6       	rcall	.+3086   	; 0x27c0 <outputS>
			outputS(menuScreen->screen2[3], 3);
    1bb2:	63 e0       	ldi	r22, 0x03	; 3
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	c8 01       	movw	r24, r16
    1bb8:	87 54       	subi	r24, 0x47	; 71
    1bba:	9e 4f       	sbci	r25, 0xFE	; 254
    1bbc:	01 d6       	rcall	.+3074   	; 0x27c0 <outputS>
			break;
    1bbe:	df c1       	rjmp	.+958    	; 0x1f7e <updateScreen+0x5d2>
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1bc0:	89 85       	ldd	r24, Y+9	; 0x09
    1bc2:	db 01       	movw	r26, r22
    1bc4:	a8 0f       	add	r26, r24
    1bc6:	b1 1d       	adc	r27, r1
    1bc8:	fd 01       	movw	r30, r26
    1bca:	e8 56       	subi	r30, 0x68	; 104
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    1bce:	20 81       	ld	r18, Z
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	32 2f       	mov	r19, r18
    1bd4:	22 27       	eor	r18, r18
			outputS(menuScreen->screen2[2], 2);
			outputS(menuScreen->screen2[3], 3);
			break;
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1bd6:	70 96       	adiw	r30, 0x10	; 16
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    1bd8:	80 81       	ld	r24, Z
    1bda:	28 2b       	or	r18, r24
    1bdc:	44 e0       	ldi	r20, 0x04	; 4
    1bde:	6a e0       	ldi	r22, 0x0A	; 10
    1be0:	68 01       	movw	r12, r16
    1be2:	b1 e7       	ldi	r27, 0x71	; 113
    1be4:	cb 1a       	sub	r12, r27
    1be6:	be ef       	ldi	r27, 0xFE	; 254
    1be8:	db 0a       	sbc	r13, r27
    1bea:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen2[1],1);
    1bec:	01 d6       	rcall	.+3074   	; 0x27f0 <numPrinter>
    1bee:	61 e0       	ldi	r22, 0x01	; 1
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	c6 01       	movw	r24, r12
			break;
    1bf4:	e5 d5       	rcall	.+3018   	; 0x27c0 <outputS>
	
			case TrackMenuArrow2:
			menuScreen->screen2[1][19]= ' ';
    1bf6:	c3 c1       	rjmp	.+902    	; 0x1f7e <updateScreen+0x5d2>
    1bf8:	80 e2       	ldi	r24, 0x20	; 32
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	ee 55       	subi	r30, 0x5E	; 94
    1bfe:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = 8;
    1c00:	80 83       	st	Z, r24
    1c02:	98 e0       	ldi	r25, 0x08	; 8
    1c04:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    1c06:	90 83       	st	Z, r25
    1c08:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    1c0a:	80 83       	st	Z, r24
    1c0c:	61 e0       	ldi	r22, 0x01	; 1
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	c8 01       	movw	r24, r16
    1c12:	81 57       	subi	r24, 0x71	; 113
    1c14:	9e 4f       	sbci	r25, 0xFE	; 254
    1c16:	d4 d5       	rcall	.+2984   	; 0x27c0 <outputS>
			outputS(menuScreen->screen2[2], 2);
    1c18:	62 e0       	ldi	r22, 0x02	; 2
    1c1a:	70 e0       	ldi	r23, 0x00	; 0
    1c1c:	c8 01       	movw	r24, r16
    1c1e:	8c 55       	subi	r24, 0x5C	; 92
    1c20:	9e 4f       	sbci	r25, 0xFE	; 254
    1c22:	ce d5       	rcall	.+2972   	; 0x27c0 <outputS>
    1c24:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[3], 3);
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	c8 01       	movw	r24, r16
    1c2a:	87 54       	subi	r24, 0x47	; 71
    1c2c:	9e 4f       	sbci	r25, 0xFE	; 254
    1c2e:	c8 d5       	rcall	.+2960   	; 0x27c0 <outputS>
    1c30:	a6 c1       	rjmp	.+844    	; 0x1f7e <updateScreen+0x5d2>
    1c32:	89 85       	ldd	r24, Y+9	; 0x09
			break;
    1c34:	fb 01       	movw	r30, r22
		
			case TrackMenuArrow2Select:
			//we need some serious button code in these two cases. 
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1c36:	e8 0f       	add	r30, r24
    1c38:	f1 1d       	adc	r31, r1
    1c3a:	e8 57       	subi	r30, 0x78	; 120
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	80 81       	ld	r24, Z
    1c40:	88 23       	and	r24, r24
    1c42:	19 f0       	breq	.+6      	; 0x1c4a <updateScreen+0x29e>
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	79 f0       	breq	.+30     	; 0x1c66 <updateScreen+0x2ba>
    1c48:	1c c0       	rjmp	.+56     	; 0x1c82 <updateScreen+0x2d6>
    1c4a:	83 e5       	ldi	r24, 0x53	; 83
			{
				case 0:
				menuScreen->screen2[2][10] = 'S';
    1c4c:	f8 01       	movw	r30, r16
    1c4e:	e2 55       	subi	r30, 0x52	; 82
    1c50:	fe 4f       	sbci	r31, 0xFE	; 254
    1c52:	80 83       	st	Z, r24
    1c54:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[2][11] = 'o';
    1c56:	31 96       	adiw	r30, 0x01	; 1
    1c58:	80 83       	st	Z, r24
    1c5a:	9c e6       	ldi	r25, 0x6C	; 108
				menuScreen->screen2[2][12] = 'l';
    1c5c:	31 96       	adiw	r30, 0x01	; 1
    1c5e:	90 83       	st	Z, r25
    1c60:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'o';
    1c62:	80 83       	st	Z, r24
    1c64:	0e c0       	rjmp	.+28     	; 0x1c82 <updateScreen+0x2d6>
				break;
    1c66:	80 e5       	ldi	r24, 0x50	; 80

				case 1:
				menuScreen->screen2[2][10] = 'P';
    1c68:	f8 01       	movw	r30, r16
    1c6a:	e2 55       	subi	r30, 0x52	; 82
    1c6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c6e:	80 83       	st	Z, r24
				menuScreen->screen2[2][11] = 'o';
    1c70:	8f e6       	ldi	r24, 0x6F	; 111
    1c72:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][12] = 'l';
    1c74:	80 83       	st	Z, r24
    1c76:	8c e6       	ldi	r24, 0x6C	; 108
    1c78:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'y';
    1c7a:	80 83       	st	Z, r24
    1c7c:	89 e7       	ldi	r24, 0x79	; 121
	
				case 3:
				break;
			}
			
			outputS(menuScreen->screen2[2], 2);
    1c7e:	31 96       	adiw	r30, 0x01	; 1
    1c80:	80 83       	st	Z, r24
    1c82:	62 e0       	ldi	r22, 0x02	; 2
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	c8 01       	movw	r24, r16
    1c88:	8c 55       	subi	r24, 0x5C	; 92
    1c8a:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1c8c:	99 d5       	rcall	.+2866   	; 0x27c0 <outputS>

			case TrackMenuArrow3:
			menuScreen->screen2[1][19]= ' ';
    1c8e:	77 c1       	rjmp	.+750    	; 0x1f7e <updateScreen+0x5d2>
    1c90:	80 e2       	ldi	r24, 0x20	; 32
    1c92:	f8 01       	movw	r30, r16
    1c94:	ee 55       	subi	r30, 0x5E	; 94
    1c96:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    1c98:	80 83       	st	Z, r24
    1c9a:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = 8;
    1c9c:	80 83       	st	Z, r24
    1c9e:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[1], 1);
    1ca0:	75 96       	adiw	r30, 0x15	; 21
    1ca2:	80 83       	st	Z, r24
    1ca4:	61 e0       	ldi	r22, 0x01	; 1
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	c8 01       	movw	r24, r16
    1caa:	81 57       	subi	r24, 0x71	; 113
			outputS(menuScreen->screen2[2], 2);
    1cac:	9e 4f       	sbci	r25, 0xFE	; 254
    1cae:	88 d5       	rcall	.+2832   	; 0x27c0 <outputS>
    1cb0:	62 e0       	ldi	r22, 0x02	; 2
    1cb2:	70 e0       	ldi	r23, 0x00	; 0
    1cb4:	c8 01       	movw	r24, r16
    1cb6:	8c 55       	subi	r24, 0x5C	; 92
    1cb8:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[3], 3);
    1cba:	82 d5       	rcall	.+2820   	; 0x27c0 <outputS>
    1cbc:	63 e0       	ldi	r22, 0x03	; 3
    1cbe:	70 e0       	ldi	r23, 0x00	; 0
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	87 54       	subi	r24, 0x47	; 71
    1cc4:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1cc6:	7c d5       	rcall	.+2808   	; 0x27c0 <outputS>
		
			case TrackMenuArrow3Select:
			numPrinter(menuScreen->screen2[3],10,2,(currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1);
    1cc8:	5a c1       	rjmp	.+692    	; 0x1f7e <updateScreen+0x5d2>
    1cca:	89 85       	ldd	r24, Y+9	; 0x09
    1ccc:	fb 01       	movw	r30, r22
    1cce:	e8 0f       	add	r30, r24
    1cd0:	f1 1d       	adc	r31, r1
    1cd2:	20 8d       	ldd	r18, Z+24	; 0x18
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	2f 5f       	subi	r18, 0xFF	; 255
    1cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cda:	42 e0       	ldi	r20, 0x02	; 2
    1cdc:	6a e0       	ldi	r22, 0x0A	; 10
    1cde:	68 01       	movw	r12, r16
    1ce0:	e7 e4       	ldi	r30, 0x47	; 71
    1ce2:	ce 1a       	sub	r12, r30
    1ce4:	ee ef       	ldi	r30, 0xFE	; 254
    1ce6:	de 0a       	sbc	r13, r30
			outputS(menuScreen->screen2[3],3);
    1ce8:	c6 01       	movw	r24, r12
    1cea:	82 d5       	rcall	.+2820   	; 0x27f0 <numPrinter>
    1cec:	63 e0       	ldi	r22, 0x03	; 3
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	c6 01       	movw	r24, r12
			break;
    1cf2:	66 d5       	rcall	.+2764   	; 0x27c0 <outputS>
			
			case TrackMenuArrow4:
			menuScreen->screen2[2][19]= ' ';
    1cf4:	44 c1       	rjmp	.+648    	; 0x1f7e <updateScreen+0x5d2>
    1cf6:	80 e2       	ldi	r24, 0x20	; 32
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	e9 54       	subi	r30, 0x49	; 73
    1cfc:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[3][19] = ' ';
    1cfe:	80 83       	st	Z, r24
    1d00:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[4][19] = 8;
    1d02:	80 83       	st	Z, r24
    1d04:	88 e0       	ldi	r24, 0x08	; 8
    1d06:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[2], 1);
    1d08:	80 83       	st	Z, r24
    1d0a:	61 e0       	ldi	r22, 0x01	; 1
    1d0c:	70 e0       	ldi	r23, 0x00	; 0
    1d0e:	c8 01       	movw	r24, r16
    1d10:	8c 55       	subi	r24, 0x5C	; 92
    1d12:	9e 4f       	sbci	r25, 0xFE	; 254
    1d14:	55 d5       	rcall	.+2730   	; 0x27c0 <outputS>
			outputS(menuScreen->screen2[3], 2);
    1d16:	62 e0       	ldi	r22, 0x02	; 2
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	c8 01       	movw	r24, r16
    1d1c:	87 54       	subi	r24, 0x47	; 71
    1d1e:	9e 4f       	sbci	r25, 0xFE	; 254
    1d20:	4f d5       	rcall	.+2718   	; 0x27c0 <outputS>
    1d22:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[4], 3);
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	c8 01       	movw	r24, r16
    1d28:	82 53       	subi	r24, 0x32	; 50
    1d2a:	9e 4f       	sbci	r25, 0xFE	; 254
    1d2c:	49 d5       	rcall	.+2706   	; 0x27c0 <outputS>
    1d2e:	27 c1       	rjmp	.+590    	; 0x1f7e <updateScreen+0x5d2>
    1d30:	89 85       	ldd	r24, Y+9	; 0x09
			break;
    1d32:	fb 01       	movw	r30, r22
			
			case TrackMenuArrow4Select:
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1d34:	e8 0f       	add	r30, r24
    1d36:	f1 1d       	adc	r31, r1
    1d38:	e5 51       	subi	r30, 0x15	; 21
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 81       	ld	r24, Z
    1d3e:	81 30       	cpi	r24, 0x01	; 1
    1d40:	a9 f0       	breq	.+42     	; 0x1d6c <updateScreen+0x3c0>
    1d42:	28 f0       	brcs	.+10     	; 0x1d4e <updateScreen+0x3a2>
    1d44:	82 30       	cpi	r24, 0x02	; 2
    1d46:	f9 f0       	breq	.+62     	; 0x1d86 <updateScreen+0x3da>
    1d48:	83 30       	cpi	r24, 0x03	; 3
    1d4a:	51 f1       	breq	.+84     	; 0x1da0 <updateScreen+0x3f4>
    1d4c:	37 c0       	rjmp	.+110    	; 0x1dbc <updateScreen+0x410>
    1d4e:	81 e4       	ldi	r24, 0x41	; 65
    1d50:	f8 01       	movw	r30, r16
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1d52:	e4 52       	subi	r30, 0x24	; 36
    1d54:	fe 4f       	sbci	r31, 0xFE	; 254
    1d56:	80 83       	st	Z, r24
    1d58:	8d e2       	ldi	r24, 0x2D	; 45
    1d5a:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1d5c:	80 83       	st	Z, r24
    1d5e:	82 e5       	ldi	r24, 0x52	; 82
    1d60:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1d62:	80 83       	st	Z, r24
    1d64:	80 e2       	ldi	r24, 0x20	; 32
    1d66:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1d68:	80 83       	st	Z, r24
    1d6a:	28 c0       	rjmp	.+80     	; 0x1dbc <updateScreen+0x410>
    1d6c:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1d6e:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1d70:	e4 52       	subi	r30, 0x24	; 36
    1d72:	fe 4f       	sbci	r31, 0xFE	; 254
    1d74:	80 83       	st	Z, r24
    1d76:	80 e2       	ldi	r24, 0x20	; 32
				menuScreen->screen2[4][15] = ' ';
    1d78:	31 96       	adiw	r30, 0x01	; 1
    1d7a:	80 83       	st	Z, r24
    1d7c:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = ' ';
    1d7e:	80 83       	st	Z, r24
    1d80:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1d82:	80 83       	st	Z, r24
    1d84:	1b c0       	rjmp	.+54     	; 0x1dbc <updateScreen+0x410>
				break;
    1d86:	81 e4       	ldi	r24, 0x41	; 65
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1d88:	f8 01       	movw	r30, r16
    1d8a:	e4 52       	subi	r30, 0x24	; 36
    1d8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d8e:	80 83       	st	Z, r24
				menuScreen->screen2[4][15] = ' ';
    1d90:	80 e2       	ldi	r24, 0x20	; 32
    1d92:	31 96       	adiw	r30, 0x01	; 1
    1d94:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1d96:	31 96       	adiw	r30, 0x01	; 1
    1d98:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1d9a:	31 96       	adiw	r30, 0x01	; 1
				break;
    1d9c:	80 83       	st	Z, r24
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1d9e:	0e c0       	rjmp	.+28     	; 0x1dbc <updateScreen+0x410>
    1da0:	8e e4       	ldi	r24, 0x4E	; 78
    1da2:	f8 01       	movw	r30, r16
    1da4:	e4 52       	subi	r30, 0x24	; 36
				menuScreen->screen2[4][15] = 'o';
    1da6:	fe 4f       	sbci	r31, 0xFE	; 254
    1da8:	80 83       	st	Z, r24
    1daa:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][16] = 'n';
    1dac:	31 96       	adiw	r30, 0x01	; 1
    1dae:	80 83       	st	Z, r24
    1db0:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][17] = 'e';
    1db2:	31 96       	adiw	r30, 0x01	; 1
    1db4:	80 83       	st	Z, r24
    1db6:	85 e6       	ldi	r24, 0x65	; 101
				break;
			}
			outputS(menuScreen->screen2[4],3);
    1db8:	31 96       	adiw	r30, 0x01	; 1
    1dba:	80 83       	st	Z, r24
    1dbc:	63 e0       	ldi	r22, 0x03	; 3
    1dbe:	70 e0       	ldi	r23, 0x00	; 0
    1dc0:	c8 01       	movw	r24, r16
    1dc2:	82 53       	subi	r24, 0x32	; 50
    1dc4:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1dc6:	fc d4       	rcall	.+2552   	; 0x27c0 <outputS>
			
			case TrackMenuArrow5:
			menuScreen->screen2[3][19]= ' ';
    1dc8:	da c0       	rjmp	.+436    	; 0x1f7e <updateScreen+0x5d2>
    1dca:	80 e2       	ldi	r24, 0x20	; 32
    1dcc:	f8 01       	movw	r30, r16
    1dce:	e4 53       	subi	r30, 0x34	; 52
    1dd0:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[4][19] = ' ';
    1dd2:	80 83       	st	Z, r24
			menuScreen->screen2[5][19] = 8;
    1dd4:	75 96       	adiw	r30, 0x15	; 21
    1dd6:	80 83       	st	Z, r24
    1dd8:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[3], 1);
    1dda:	75 96       	adiw	r30, 0x15	; 21
    1ddc:	80 83       	st	Z, r24
    1dde:	61 e0       	ldi	r22, 0x01	; 1
    1de0:	70 e0       	ldi	r23, 0x00	; 0
    1de2:	c8 01       	movw	r24, r16
    1de4:	87 54       	subi	r24, 0x47	; 71
    1de6:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[4], 2);
    1de8:	eb d4       	rcall	.+2518   	; 0x27c0 <outputS>
    1dea:	62 e0       	ldi	r22, 0x02	; 2
    1dec:	70 e0       	ldi	r23, 0x00	; 0
    1dee:	c8 01       	movw	r24, r16
    1df0:	82 53       	subi	r24, 0x32	; 50
    1df2:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[5], 3);
    1df4:	e5 d4       	rcall	.+2506   	; 0x27c0 <outputS>
    1df6:	63 e0       	ldi	r22, 0x03	; 3
    1df8:	70 e0       	ldi	r23, 0x00	; 0
    1dfa:	c8 01       	movw	r24, r16
    1dfc:	8d 51       	subi	r24, 0x1D	; 29
    1dfe:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1e00:	df d4       	rcall	.+2494   	; 0x27c0 <outputS>

			case TrackMenuArrow5Select:;
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1e02:	bd c0       	rjmp	.+378    	; 0x1f7e <updateScreen+0x5d2>
    1e04:	89 85       	ldd	r24, Y+9	; 0x09
    1e06:	9b 01       	movw	r18, r22
    1e08:	28 0f       	add	r18, r24
    1e0a:	31 1d       	adc	r19, r1
    1e0c:	f9 01       	movw	r30, r18
			numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1e0e:	e5 53       	subi	r30, 0x35	; 53
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	20 81       	ld	r18, Z
			outputS(menuScreen->screen2[4], 2);
			outputS(menuScreen->screen2[5], 3);
			break;

			case TrackMenuArrow5Select:;
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1e14:	30 e0       	ldi	r19, 0x00	; 0
			numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1e16:	32 2f       	mov	r19, r18
    1e18:	22 27       	eor	r18, r18
    1e1a:	70 96       	adiw	r30, 0x10	; 16
    1e1c:	80 81       	ld	r24, Z
    1e1e:	28 2b       	or	r18, r24
    1e20:	45 e0       	ldi	r20, 0x05	; 5
    1e22:	6d e0       	ldi	r22, 0x0D	; 13
    1e24:	68 01       	movw	r12, r16
    1e26:	8d e1       	ldi	r24, 0x1D	; 29
    1e28:	c8 1a       	sub	r12, r24
    1e2a:	8e ef       	ldi	r24, 0xFE	; 254
			menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
    1e2c:	d8 0a       	sbc	r13, r24
    1e2e:	c6 01       	movw	r24, r12
    1e30:	df d4       	rcall	.+2494   	; 0x27f0 <numPrinter>
    1e32:	d8 01       	movw	r26, r16
    1e34:	a0 51       	subi	r26, 0x10	; 16
    1e36:	be 4f       	sbci	r27, 0xFE	; 254
    1e38:	8c 91       	ld	r24, X
    1e3a:	f8 01       	movw	r30, r16
			menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
    1e3c:	e1 51       	subi	r30, 0x11	; 17
    1e3e:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[5][14] = '.';
    1e40:	80 83       	st	Z, r24
    1e42:	32 96       	adiw	r30, 0x02	; 2
			outputS(menuScreen->screen2[5],3);
    1e44:	80 81       	ld	r24, Z
    1e46:	8c 93       	st	X, r24
    1e48:	8e e2       	ldi	r24, 0x2E	; 46
    1e4a:	80 83       	st	Z, r24
			break;
    1e4c:	63 e0       	ldi	r22, 0x03	; 3

			case GlobalMenuInit:
			outputS(menuScreen->screen3[0], 0);
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	c6 01       	movw	r24, r12
    1e52:	b6 d4       	rcall	.+2412   	; 0x27c0 <outputS>
    1e54:	94 c0       	rjmp	.+296    	; 0x1f7e <updateScreen+0x5d2>
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[1], 1);
    1e5a:	c8 01       	movw	r24, r16
    1e5c:	89 5c       	subi	r24, 0xC9	; 201
    1e5e:	9d 4f       	sbci	r25, 0xFD	; 253
    1e60:	af d4       	rcall	.+2398   	; 0x27c0 <outputS>
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	70 e0       	ldi	r23, 0x00	; 0
    1e66:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1e68:	84 5b       	subi	r24, 0xB4	; 180
    1e6a:	9d 4f       	sbci	r25, 0xFD	; 253
    1e6c:	a9 d4       	rcall	.+2386   	; 0x27c0 <outputS>
    1e6e:	62 e0       	ldi	r22, 0x02	; 2
    1e70:	70 e0       	ldi	r23, 0x00	; 0
    1e72:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1e74:	8f 59       	subi	r24, 0x9F	; 159
    1e76:	9d 4f       	sbci	r25, 0xFD	; 253
    1e78:	a3 d4       	rcall	.+2374   	; 0x27c0 <outputS>
    1e7a:	63 e0       	ldi	r22, 0x03	; 3
    1e7c:	70 e0       	ldi	r23, 0x00	; 0
    1e7e:	c8 01       	movw	r24, r16
    1e80:	8a 58       	subi	r24, 0x8A	; 138
			currentGlobals->menuState = GlobalMenuArrow1;
    1e82:	9d 4f       	sbci	r25, 0xFD	; 253
    1e84:	9d d4       	rcall	.+2362   	; 0x27c0 <outputS>

			case GlobalMenuArrow1:
			menuScreen->screen3[1][19]= 8;
    1e86:	81 e3       	ldi	r24, 0x31	; 49
    1e88:	8a 87       	std	Y+10, r24	; 0x0a
    1e8a:	88 e0       	ldi	r24, 0x08	; 8
    1e8c:	f8 01       	movw	r30, r16
    1e8e:	e1 5a       	subi	r30, 0xA1	; 161
			menuScreen->screen3[2][19] = ' ';
    1e90:	fd 4f       	sbci	r31, 0xFD	; 253
    1e92:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    1e94:	80 e2       	ldi	r24, 0x20	; 32
    1e96:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen3[1], 1);
    1e98:	80 83       	st	Z, r24
    1e9a:	75 96       	adiw	r30, 0x15	; 21
    1e9c:	80 83       	st	Z, r24
    1e9e:	61 e0       	ldi	r22, 0x01	; 1
    1ea0:	70 e0       	ldi	r23, 0x00	; 0
    1ea2:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1ea4:	84 5b       	subi	r24, 0xB4	; 180
    1ea6:	9d 4f       	sbci	r25, 0xFD	; 253
    1ea8:	8b d4       	rcall	.+2326   	; 0x27c0 <outputS>
    1eaa:	62 e0       	ldi	r22, 0x02	; 2
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1eb0:	8f 59       	subi	r24, 0x9F	; 159
    1eb2:	9d 4f       	sbci	r25, 0xFD	; 253
    1eb4:	85 d4       	rcall	.+2314   	; 0x27c0 <outputS>
    1eb6:	63 e0       	ldi	r22, 0x03	; 3
    1eb8:	70 e0       	ldi	r23, 0x00	; 0
    1eba:	c8 01       	movw	r24, r16
    1ebc:	8a 58       	subi	r24, 0x8A	; 138
			break;
    1ebe:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow1Select:
			numPrinter(menuScreen->screen3[1],14,2,(currentGlobals->midiChannel)+1);
    1ec0:	7f d4       	rcall	.+2302   	; 0x27c0 <outputS>
    1ec2:	5d c0       	rjmp	.+186    	; 0x1f7e <updateScreen+0x5d2>
    1ec4:	28 89       	ldd	r18, Y+16	; 0x10
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	2f 5f       	subi	r18, 0xFF	; 255
    1eca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ecc:	42 e0       	ldi	r20, 0x02	; 2
    1ece:	6e e0       	ldi	r22, 0x0E	; 14
    1ed0:	68 01       	movw	r12, r16
    1ed2:	94 eb       	ldi	r25, 0xB4	; 180
    1ed4:	c9 1a       	sub	r12, r25
    1ed6:	9d ef       	ldi	r25, 0xFD	; 253
			outputS(menuScreen->screen3[1],1);
    1ed8:	d9 0a       	sbc	r13, r25
    1eda:	c6 01       	movw	r24, r12
    1edc:	89 d4       	rcall	.+2322   	; 0x27f0 <numPrinter>
    1ede:	61 e0       	ldi	r22, 0x01	; 1
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
			break;
    1ee2:	c6 01       	movw	r24, r12

			case GlobalMenuArrow2:
			menuScreen->screen3[1][19]= ' ';
    1ee4:	6d d4       	rcall	.+2266   	; 0x27c0 <outputS>
    1ee6:	4b c0       	rjmp	.+150    	; 0x1f7e <updateScreen+0x5d2>
    1ee8:	80 e2       	ldi	r24, 0x20	; 32
    1eea:	f8 01       	movw	r30, r16
			menuScreen->screen3[2][19] = 8;
    1eec:	e1 5a       	subi	r30, 0xA1	; 161
    1eee:	fd 4f       	sbci	r31, 0xFD	; 253
    1ef0:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    1ef2:	98 e0       	ldi	r25, 0x08	; 8
			outputS(menuScreen->screen3[1], 1);
    1ef4:	75 96       	adiw	r30, 0x15	; 21
    1ef6:	90 83       	st	Z, r25
    1ef8:	75 96       	adiw	r30, 0x15	; 21
    1efa:	80 83       	st	Z, r24
    1efc:	61 e0       	ldi	r22, 0x01	; 1
    1efe:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[2], 2);
    1f00:	c8 01       	movw	r24, r16
    1f02:	84 5b       	subi	r24, 0xB4	; 180
    1f04:	9d 4f       	sbci	r25, 0xFD	; 253
    1f06:	5c d4       	rcall	.+2232   	; 0x27c0 <outputS>
    1f08:	62 e0       	ldi	r22, 0x02	; 2
    1f0a:	70 e0       	ldi	r23, 0x00	; 0
    1f0c:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1f0e:	8f 59       	subi	r24, 0x9F	; 159
    1f10:	9d 4f       	sbci	r25, 0xFD	; 253
    1f12:	56 d4       	rcall	.+2220   	; 0x27c0 <outputS>
    1f14:	63 e0       	ldi	r22, 0x03	; 3
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	c8 01       	movw	r24, r16
    1f1a:	8a 58       	subi	r24, 0x8A	; 138
			break;
    1f1c:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow2Select:
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1f1e:	50 d4       	rcall	.+2208   	; 0x27c0 <outputS>
    1f20:	2e c0       	rjmp	.+92     	; 0x1f7e <updateScreen+0x5d2>
    1f22:	89 85       	ldd	r24, Y+9	; 0x09
    1f24:	fa 01       	movw	r30, r20
    1f26:	e8 0f       	add	r30, r24
    1f28:	f1 1d       	adc	r31, r1
    1f2a:	41 89       	ldd	r20, Z+17	; 0x11
    1f2c:	6e e0       	ldi	r22, 0x0E	; 14
    1f2e:	68 01       	movw	r12, r16
    1f30:	af e9       	ldi	r26, 0x9F	; 159
    1f32:	ca 1a       	sub	r12, r26
    1f34:	ad ef       	ldi	r26, 0xFD	; 253
    1f36:	da 0a       	sbc	r13, r26
    1f38:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen3[2],2);
    1f3a:	20 d6       	rcall	.+3136   	; 0x2b7c <midiNotePrinter>
    1f3c:	62 e0       	ldi	r22, 0x02	; 2
    1f3e:	70 e0       	ldi	r23, 0x00	; 0
    1f40:	c6 01       	movw	r24, r12
    1f42:	3e d4       	rcall	.+2172   	; 0x27c0 <outputS>
			break;
    1f44:	1c c0       	rjmp	.+56     	; 0x1f7e <updateScreen+0x5d2>

			case GlobalMenuArrow3:
			menuScreen->screen3[1][19]= ' ';
    1f46:	80 e2       	ldi	r24, 0x20	; 32
    1f48:	f8 01       	movw	r30, r16
    1f4a:	e1 5a       	subi	r30, 0xA1	; 161
    1f4c:	fd 4f       	sbci	r31, 0xFD	; 253
			menuScreen->screen3[2][19] = ' ';
    1f4e:	80 83       	st	Z, r24
    1f50:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen3[3][19] = 8;
    1f52:	80 83       	st	Z, r24
    1f54:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen3[1], 1);
    1f56:	75 96       	adiw	r30, 0x15	; 21
    1f58:	80 83       	st	Z, r24
    1f5a:	61 e0       	ldi	r22, 0x01	; 1
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	c8 01       	movw	r24, r16
    1f60:	84 5b       	subi	r24, 0xB4	; 180
    1f62:	9d 4f       	sbci	r25, 0xFD	; 253
			outputS(menuScreen->screen3[2], 2);
    1f64:	2d d4       	rcall	.+2138   	; 0x27c0 <outputS>
    1f66:	62 e0       	ldi	r22, 0x02	; 2
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	c8 01       	movw	r24, r16
    1f6c:	8f 59       	subi	r24, 0x9F	; 159
    1f6e:	9d 4f       	sbci	r25, 0xFD	; 253
    1f70:	27 d4       	rcall	.+2126   	; 0x27c0 <outputS>
			outputS(menuScreen->screen3[3], 3);
    1f72:	63 e0       	ldi	r22, 0x03	; 3
    1f74:	70 e0       	ldi	r23, 0x00	; 0
    1f76:	c8 01       	movw	r24, r16
    1f78:	8a 58       	subi	r24, 0x8A	; 138
    1f7a:	9d 4f       	sbci	r25, 0xFD	; 253
    1f7c:	21 d4       	rcall	.+2114   	; 0x27c0 <outputS>
    1f7e:	8a 85       	ldd	r24, Y+10	; 0x0a
			break;
		}
		prevMenuState = currentGlobals->menuState;
    1f80:	80 93 7c 06 	sts	0x067C, r24	; 0x80067c <prevMenuState>
    1f84:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
	//We should only reach this in track selection and global settings for setting midi notes. 
	if(currentGlobals->valueChangeFlag&(1<<triggerChange))
    1f86:	81 ff       	sbrs	r24, 1
    1f88:	19 c1       	rjmp	.+562    	; 0x21bc <updateScreen+0x810>
    1f8a:	1e 86       	std	Y+14, r1	; 0x0e
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0<<triggerChange); //this is wrong. Will erase all of valueChange Flag. 
    1f8c:	8a 85       	ldd	r24, Y+10	; 0x0a
		switch((currentGlobals->menuState)>>4) //we don't need to worry about what the bottom encoder is doing.  
    1f8e:	82 95       	swap	r24
    1f90:	8f 70       	andi	r24, 0x0F	; 15
    1f92:	82 30       	cpi	r24, 0x02	; 2
    1f94:	21 f0       	breq	.+8      	; 0x1f9e <updateScreen+0x5f2>
    1f96:	83 30       	cpi	r24, 0x03	; 3
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <updateScreen+0x5f0>
    1f9a:	f7 c0       	rjmp	.+494    	; 0x218a <updateScreen+0x7de>
    1f9c:	0f c1       	rjmp	.+542    	; 0x21bc <updateScreen+0x810>
    1f9e:	29 85       	ldd	r18, Y+9	; 0x09
		{
			case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	c7 01       	movw	r24, r14
    1fa4:	82 0f       	add	r24, r18
    1fa6:	93 1f       	adc	r25, r19
    1fa8:	fc 01       	movw	r30, r24
    1faa:	e8 56       	subi	r30, 0x68	; 104
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	c0 80       	ld	r12, Z
    1fb0:	d1 2c       	mov	r13, r1
    1fb2:	dc 2c       	mov	r13, r12
    1fb4:	cc 24       	eor	r12, r12
    1fb6:	70 96       	adiw	r30, 0x10	; 16
    1fb8:	80 81       	ld	r24, Z
    1fba:	c8 2a       	or	r12, r24
    1fbc:	2f 5f       	subi	r18, 0xFF	; 255
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack)+1);
    1fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc0:	42 e0       	ldi	r20, 0x02	; 2
    1fc2:	67 e0       	ldi	r22, 0x07	; 7
    1fc4:	58 01       	movw	r10, r16
    1fc6:	b1 e7       	ldi	r27, 0x71	; 113
    1fc8:	ab 1a       	sub	r10, r27
    1fca:	be ef       	ldi	r27, 0xFE	; 254
    1fcc:	bb 0a       	sbc	r11, r27
    1fce:	c5 01       	movw	r24, r10
    1fd0:	0f d4       	rcall	.+2078   	; 0x27f0 <numPrinter>
    1fd2:	96 01       	movw	r18, r12
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
    1fd4:	44 e0       	ldi	r20, 0x04	; 4
    1fd6:	6a e0       	ldi	r22, 0x0A	; 10
    1fd8:	c5 01       	movw	r24, r10
    1fda:	0a d4       	rcall	.+2068   	; 0x27f0 <numPrinter>
    1fdc:	89 85       	ldd	r24, Y+9	; 0x09
    1fde:	f7 01       	movw	r30, r14
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
					switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1fe0:	e8 0f       	add	r30, r24
    1fe2:	f1 1d       	adc	r31, r1
    1fe4:	e8 57       	subi	r30, 0x78	; 120
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	80 81       	ld	r24, Z
    1fea:	88 23       	and	r24, r24
    1fec:	19 f0       	breq	.+6      	; 0x1ff4 <updateScreen+0x648>
    1fee:	81 30       	cpi	r24, 0x01	; 1
    1ff0:	79 f0       	breq	.+30     	; 0x2010 <updateScreen+0x664>
    1ff2:	1c c0       	rjmp	.+56     	; 0x202c <updateScreen+0x680>
    1ff4:	83 e5       	ldi	r24, 0x53	; 83
    1ff6:	f8 01       	movw	r30, r16
					{
						case 0:
						menuScreen->screen2[2][10] = 'S';
    1ff8:	e2 55       	subi	r30, 0x52	; 82
    1ffa:	fe 4f       	sbci	r31, 0xFE	; 254
    1ffc:	80 83       	st	Z, r24
    1ffe:	8f e6       	ldi	r24, 0x6F	; 111
    2000:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][11] = 'o';
    2002:	80 83       	st	Z, r24
    2004:	9c e6       	ldi	r25, 0x6C	; 108
    2006:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][12] = 'l';
    2008:	90 83       	st	Z, r25
    200a:	31 96       	adiw	r30, 0x01	; 1
    200c:	80 83       	st	Z, r24
						menuScreen->screen2[2][13] = 'o';
    200e:	0e c0       	rjmp	.+28     	; 0x202c <updateScreen+0x680>
    2010:	80 e5       	ldi	r24, 0x50	; 80
						break;
    2012:	f8 01       	movw	r30, r16

						case 1:
						menuScreen->screen2[2][10] = 'P';
    2014:	e2 55       	subi	r30, 0x52	; 82
    2016:	fe 4f       	sbci	r31, 0xFE	; 254
    2018:	80 83       	st	Z, r24
    201a:	8f e6       	ldi	r24, 0x6F	; 111
    201c:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][11] = 'o';
    201e:	80 83       	st	Z, r24
    2020:	8c e6       	ldi	r24, 0x6C	; 108
    2022:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][12] = 'l';
    2024:	80 83       	st	Z, r24
    2026:	89 e7       	ldi	r24, 0x79	; 121
    2028:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][13] = 'y';
    202a:	80 83       	st	Z, r24
    202c:	89 85       	ldd	r24, Y+9	; 0x09
    202e:	f7 01       	movw	r30, r14

						case 3:
						break;
					}
					
			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack]+1));
    2030:	e8 0f       	add	r30, r24
    2032:	f1 1d       	adc	r31, r1
    2034:	20 8d       	ldd	r18, Z+24	; 0x18
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	2f 5f       	subi	r18, 0xFF	; 255
    203a:	3f 4f       	sbci	r19, 0xFF	; 255
    203c:	42 e0       	ldi	r20, 0x02	; 2
    203e:	6a e0       	ldi	r22, 0x0A	; 10
    2040:	c8 01       	movw	r24, r16
    2042:	87 54       	subi	r24, 0x47	; 71
    2044:	9e 4f       	sbci	r25, 0xFE	; 254
    2046:	d4 d3       	rcall	.+1960   	; 0x27f0 <numPrinter>
    2048:	89 85       	ldd	r24, Y+9	; 0x09
    204a:	f7 01       	movw	r30, r14
    204c:	e8 0f       	add	r30, r24
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    204e:	f1 1d       	adc	r31, r1
    2050:	e5 51       	subi	r30, 0x15	; 21
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	80 81       	ld	r24, Z
    2056:	81 30       	cpi	r24, 0x01	; 1
    2058:	a9 f0       	breq	.+42     	; 0x2084 <updateScreen+0x6d8>
    205a:	28 f0       	brcs	.+10     	; 0x2066 <updateScreen+0x6ba>
    205c:	82 30       	cpi	r24, 0x02	; 2
    205e:	f9 f0       	breq	.+62     	; 0x209e <updateScreen+0x6f2>
    2060:	83 30       	cpi	r24, 0x03	; 3
    2062:	51 f1       	breq	.+84     	; 0x20b8 <updateScreen+0x70c>
    2064:	37 c0       	rjmp	.+110    	; 0x20d4 <updateScreen+0x728>
    2066:	81 e4       	ldi	r24, 0x41	; 65
    2068:	f8 01       	movw	r30, r16
    206a:	e4 52       	subi	r30, 0x24	; 36
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    206c:	fe 4f       	sbci	r31, 0xFE	; 254
    206e:	80 83       	st	Z, r24
    2070:	8d e2       	ldi	r24, 0x2D	; 45
    2072:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    2074:	80 83       	st	Z, r24
    2076:	82 e5       	ldi	r24, 0x52	; 82
    2078:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    207a:	80 83       	st	Z, r24
    207c:	80 e2       	ldi	r24, 0x20	; 32
    207e:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    2080:	80 83       	st	Z, r24
    2082:	28 c0       	rjmp	.+80     	; 0x20d4 <updateScreen+0x728>
    2084:	82 e5       	ldi	r24, 0x52	; 82
				break;
    2086:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    2088:	e4 52       	subi	r30, 0x24	; 36
    208a:	fe 4f       	sbci	r31, 0xFE	; 254
    208c:	80 83       	st	Z, r24
    208e:	80 e2       	ldi	r24, 0x20	; 32
    2090:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    2092:	80 83       	st	Z, r24
    2094:	31 96       	adiw	r30, 0x01	; 1
    2096:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    2098:	31 96       	adiw	r30, 0x01	; 1
    209a:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    209c:	1b c0       	rjmp	.+54     	; 0x20d4 <updateScreen+0x728>
    209e:	81 e4       	ldi	r24, 0x41	; 65
				break;
    20a0:	f8 01       	movw	r30, r16
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    20a2:	e4 52       	subi	r30, 0x24	; 36
    20a4:	fe 4f       	sbci	r31, 0xFE	; 254
    20a6:	80 83       	st	Z, r24
    20a8:	80 e2       	ldi	r24, 0x20	; 32
    20aa:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    20ac:	80 83       	st	Z, r24
    20ae:	31 96       	adiw	r30, 0x01	; 1
    20b0:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    20b2:	31 96       	adiw	r30, 0x01	; 1
    20b4:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    20b6:	0e c0       	rjmp	.+28     	; 0x20d4 <updateScreen+0x728>
    20b8:	8e e4       	ldi	r24, 0x4E	; 78
				break;
    20ba:	f8 01       	movw	r30, r16
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    20bc:	e4 52       	subi	r30, 0x24	; 36
    20be:	fe 4f       	sbci	r31, 0xFE	; 254
    20c0:	80 83       	st	Z, r24
    20c2:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][15] = 'o';
    20c4:	31 96       	adiw	r30, 0x01	; 1
    20c6:	80 83       	st	Z, r24
    20c8:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][16] = 'n';
    20ca:	31 96       	adiw	r30, 0x01	; 1
    20cc:	80 83       	st	Z, r24
    20ce:	85 e6       	ldi	r24, 0x65	; 101
				menuScreen->screen2[4][17] = 'e';
    20d0:	31 96       	adiw	r30, 0x01	; 1
    20d2:	80 83       	st	Z, r24
    20d4:	89 85       	ldd	r24, Y+9	; 0x09
				break;
			}
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    20d6:	f7 01       	movw	r30, r14
    20d8:	e8 0f       	add	r30, r24
    20da:	f1 1d       	adc	r31, r1
    20dc:	e5 53       	subi	r30, 0x35	; 53
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
		numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    20e0:	20 81       	ld	r18, Z
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	32 2f       	mov	r19, r18
    20e6:	22 27       	eor	r18, r18
				menuScreen->screen2[4][15] = 'o';
				menuScreen->screen2[4][16] = 'n';
				menuScreen->screen2[4][17] = 'e';
				break;
			}
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    20e8:	70 96       	adiw	r30, 0x10	; 16
		numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    20ea:	80 81       	ld	r24, Z
    20ec:	28 2b       	or	r18, r24
    20ee:	45 e0       	ldi	r20, 0x05	; 5
    20f0:	6d e0       	ldi	r22, 0x0D	; 13
    20f2:	c8 01       	movw	r24, r16
    20f4:	8d 51       	subi	r24, 0x1D	; 29
    20f6:	9e 4f       	sbci	r25, 0xFE	; 254
    20f8:	7b d3       	rcall	.+1782   	; 0x27f0 <numPrinter>
		menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
    20fa:	d8 01       	movw	r26, r16
    20fc:	a0 51       	subi	r26, 0x10	; 16
    20fe:	be 4f       	sbci	r27, 0xFE	; 254
    2100:	8c 91       	ld	r24, X
    2102:	f8 01       	movw	r30, r16
    2104:	e1 51       	subi	r30, 0x11	; 17
    2106:	fe 4f       	sbci	r31, 0xFE	; 254
    2108:	80 83       	st	Z, r24
		menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
    210a:	32 96       	adiw	r30, 0x02	; 2
    210c:	80 81       	ld	r24, Z
    210e:	8c 93       	st	X, r24
		menuScreen->screen2[5][14] = '.';
    2110:	8e e2       	ldi	r24, 0x2E	; 46
    2112:	80 83       	st	Z, r24
    2114:	8a 85       	ldd	r24, Y+10	; 0x0a
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
			
			if(((currentGlobals->menuState)&selectBit)>35) //this accounts for menu stats 36,37,44, and 45
    2116:	87 7f       	andi	r24, 0xF7	; 247
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	24 32       	cpi	r18, 0x24	; 36
    211e:	31 05       	cpc	r19, r1
			{
				triggerChangeScreen = ((currentGlobals->menuState)&selectBit) - 34; //mask to get rid of encoder B pushed state. 
    2120:	14 f0       	brlt	.+4      	; 0x2126 <updateScreen+0x77a>
		menuScreen->screen2[5][14] = '.';
			//the track settings screens should now be populated
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
    2122:	82 52       	subi	r24, 0x22	; 34
			if(((currentGlobals->menuState)&selectBit)>35) //this accounts for menu stats 36,37,44, and 45
			{
				triggerChangeScreen = ((currentGlobals->menuState)&selectBit) - 34; //mask to get rid of encoder B pushed state. 
			}
			
			outputS(menuScreen->screen2[triggerChangeScreen], 1); 
    2124:	01 c0       	rjmp	.+2      	; 0x2128 <updateScreen+0x77c>
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	c8 2e       	mov	r12, r24
    212a:	d1 2c       	mov	r13, r1
    212c:	0f 2e       	mov	r0, r31
    212e:	f5 e1       	ldi	r31, 0x15	; 21
    2130:	bf 2e       	mov	r11, r31
    2132:	f0 2d       	mov	r31, r0
    2134:	bc 9c       	mul	r11, r12
    2136:	c0 01       	movw	r24, r0
    2138:	bd 9c       	mul	r11, r13
    213a:	90 0d       	add	r25, r0
    213c:	11 24       	eor	r1, r1
    213e:	86 58       	subi	r24, 0x86	; 134
    2140:	9e 4f       	sbci	r25, 0xFE	; 254
    2142:	61 e0       	ldi	r22, 0x01	; 1
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	80 0f       	add	r24, r16
			outputS(menuScreen->screen2[triggerChangeScreen+1], 2); 
    2148:	91 1f       	adc	r25, r17
    214a:	3a d3       	rcall	.+1652   	; 0x27c0 <outputS>
    214c:	96 01       	movw	r18, r12
    214e:	2f 5f       	subi	r18, 0xFF	; 255
    2150:	3f 4f       	sbci	r19, 0xFF	; 255
    2152:	b2 9e       	mul	r11, r18
    2154:	c0 01       	movw	r24, r0
    2156:	b3 9e       	mul	r11, r19
    2158:	90 0d       	add	r25, r0
    215a:	11 24       	eor	r1, r1
    215c:	86 58       	subi	r24, 0x86	; 134
    215e:	9e 4f       	sbci	r25, 0xFE	; 254
    2160:	62 e0       	ldi	r22, 0x02	; 2
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	80 0f       	add	r24, r16
    2166:	91 1f       	adc	r25, r17
			outputS(menuScreen->screen2[triggerChangeScreen+2], 3);
    2168:	2b d3       	rcall	.+1622   	; 0x27c0 <outputS>
    216a:	f2 e0       	ldi	r31, 0x02	; 2
    216c:	cf 0e       	add	r12, r31
    216e:	d1 1c       	adc	r13, r1
    2170:	bc 9c       	mul	r11, r12
    2172:	c0 01       	movw	r24, r0
    2174:	bd 9c       	mul	r11, r13
    2176:	90 0d       	add	r25, r0
    2178:	11 24       	eor	r1, r1
    217a:	86 58       	subi	r24, 0x86	; 134
    217c:	9e 4f       	sbci	r25, 0xFE	; 254
    217e:	63 e0       	ldi	r22, 0x03	; 3
    2180:	70 e0       	ldi	r23, 0x00	; 0
    2182:	80 0f       	add	r24, r16
    2184:	91 1f       	adc	r25, r17
    2186:	1c d3       	rcall	.+1592   	; 0x27c0 <outputS>
			
			break;
    2188:	19 c0       	rjmp	.+50     	; 0x21bc <updateScreen+0x810>
			
			case 3:;
			//do we need this variable?
			numPrinter(menuScreen->screen3[2],10,2,(currentGlobals->currentTrack)+1);
    218a:	29 85       	ldd	r18, Y+9	; 0x09
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	2f 5f       	subi	r18, 0xFF	; 255
    2190:	3f 4f       	sbci	r19, 0xFF	; 255
    2192:	42 e0       	ldi	r20, 0x02	; 2
    2194:	6a e0       	ldi	r22, 0x0A	; 10
    2196:	68 01       	movw	r12, r16
    2198:	8f e9       	ldi	r24, 0x9F	; 159
    219a:	c8 1a       	sub	r12, r24
    219c:	8d ef       	ldi	r24, 0xFD	; 253
    219e:	d8 0a       	sbc	r13, r24
    21a0:	c6 01       	movw	r24, r12
    21a2:	26 d3       	rcall	.+1612   	; 0x27f0 <numPrinter>
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    21a4:	89 85       	ldd	r24, Y+9	; 0x09
    21a6:	fe 01       	movw	r30, r28
    21a8:	e8 0f       	add	r30, r24
    21aa:	f1 1d       	adc	r31, r1
    21ac:	41 89       	ldd	r20, Z+17	; 0x11
    21ae:	6e e0       	ldi	r22, 0x0E	; 14
    21b0:	c6 01       	movw	r24, r12
    21b2:	e4 d4       	rcall	.+2504   	; 0x2b7c <midiNotePrinter>
    21b4:	62 e0       	ldi	r22, 0x02	; 2
			outputS(menuScreen->screen3[2],2);
    21b6:	70 e0       	ldi	r23, 0x00	; 0
    21b8:	c6 01       	movw	r24, r12
    21ba:	02 d3       	rcall	.+1540   	; 0x27c0 <outputS>
    21bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    21be:	82 ff       	sbrs	r24, 2
			break;
			
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
    21c0:	70 c1       	rjmp	.+736    	; 0x24a2 <__stack+0x2a3>
    21c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c4:	98 2f       	mov	r25, r24
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
    21c6:	9f 70       	andi	r25, 0x0F	; 15
    21c8:	89 2e       	mov	r8, r25
    21ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    21cc:	90 ff       	sbrs	r25, 0
		uint8_t positionSelectUpper = 0;
		if((currentGlobals->buttonSwitchFlag)&0x01)
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <updateScreen+0x828>
    21d0:	28 e0       	ldi	r18, 0x08	; 8
    21d2:	01 c0       	rjmp	.+2      	; 0x21d6 <updateScreen+0x82a>
		{
			positionSelectUpper = 8;
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	82 95       	swap	r24
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
		uint8_t positionSelectUpper = 0;
    21d8:	8f 70       	andi	r24, 0x0F	; 15
		{
			positionSelectUpper = 8;
		}
		

		switch((currentGlobals->knobStatus)>>4)
    21da:	82 30       	cpi	r24, 0x02	; 2
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <updateScreen+0x834>
    21de:	94 c0       	rjmp	.+296    	; 0x2308 <__stack+0x109>
    21e0:	30 f4       	brcc	.+12     	; 0x21ee <updateScreen+0x842>
    21e2:	88 23       	and	r24, r24
    21e4:	69 f0       	breq	.+26     	; 0x2200 <__stack+0x1>
    21e6:	81 30       	cpi	r24, 0x01	; 1
    21e8:	09 f4       	brne	.+2      	; 0x21ec <updateScreen+0x840>
    21ea:	58 c0       	rjmp	.+176    	; 0x229c <__stack+0x9d>
    21ec:	59 c1       	rjmp	.+690    	; 0x24a0 <__stack+0x2a1>
    21ee:	84 30       	cpi	r24, 0x04	; 4
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <updateScreen+0x848>
    21f2:	f6 c0       	rjmp	.+492    	; 0x23e0 <__stack+0x1e1>
    21f4:	08 f4       	brcc	.+2      	; 0x21f8 <updateScreen+0x84c>
    21f6:	be c0       	rjmp	.+380    	; 0x2374 <__stack+0x175>
    21f8:	85 30       	cpi	r24, 0x05	; 5
    21fa:	09 f4       	brne	.+2      	; 0x21fe <updateScreen+0x852>
    21fc:	3f c1       	rjmp	.+638    	; 0x247c <__stack+0x27d>
    21fe:	50 c1       	rjmp	.+672    	; 0x24a0 <__stack+0x2a1>
    2200:	e8 2d       	mov	r30, r8
		{
			case 0: //output volume
			if((currentPattern->outputLevelMSB[positionSelect])==0)
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	d7 01       	movw	r26, r14
    2206:	ae 0f       	add	r26, r30
    2208:	bf 1f       	adc	r27, r31
    220a:	8c 91       	ld	r24, X
    220c:	81 11       	cpse	r24, r1
    220e:	10 c0       	rjmp	.+32     	; 0x2230 <__stack+0x31>
    2210:	80 e2       	ldi	r24, 0x20	; 32
			{ //value is positive
				menuScreen->knobScreen[0][14] = ' ';
    2212:	d8 01       	movw	r26, r16
    2214:	ae 5f       	subi	r26, 0xFE	; 254
    2216:	bc 4f       	sbci	r27, 0xFC	; 252
    2218:	8c 93       	st	X, r24
    221a:	ee 0d       	add	r30, r14
				numPrinter(menuScreen->knobScreen[0],15,2,currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
    221c:	ff 1d       	adc	r31, r15
    221e:	20 85       	ldd	r18, Z+8	; 0x08
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	42 e0       	ldi	r20, 0x02	; 2
    2224:	6f e0       	ldi	r22, 0x0F	; 15
    2226:	c8 01       	movw	r24, r16
    2228:	8c 50       	subi	r24, 0x0C	; 12
    222a:	9d 4f       	sbci	r25, 0xFD	; 253
    222c:	e1 d2       	rcall	.+1474   	; 0x27f0 <numPrinter>
    222e:	29 c0       	rjmp	.+82     	; 0x2282 <__stack+0x83>
    2230:	8d e2       	ldi	r24, 0x2D	; 45
    2232:	d8 01       	movw	r26, r16
			}else
			{
				menuScreen->knobScreen[0][14] = '-';
    2234:	ae 5f       	subi	r26, 0xFE	; 254
    2236:	bc 4f       	sbci	r27, 0xFC	; 252
    2238:	8c 93       	st	X, r24
    223a:	68 01       	movw	r12, r16
				menuScreen->knobScreen[0][15] = ((((currentPattern->outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    223c:	a3 e0       	ldi	r26, 0x03	; 3
    223e:	ca 0e       	add	r12, r26
    2240:	da 1e       	adc	r13, r26
    2242:	ee 0d       	add	r30, r14
    2244:	ff 1d       	adc	r31, r15
    2246:	80 85       	ldd	r24, Z+8	; 0x08
    2248:	80 95       	com	r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	64 e6       	ldi	r22, 0x64	; 100
    2250:	70 e0       	ldi	r23, 0x00	; 0
    2252:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <__divmodhi4>
    2256:	2a e0       	ldi	r18, 0x0A	; 10
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	b9 01       	movw	r22, r18
    225c:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <__divmodhi4>
    2260:	60 5d       	subi	r22, 0xD0	; 208
    2262:	d6 01       	movw	r26, r12
    2264:	6c 93       	st	X, r22
				menuScreen->knobScreen[0][16] = (((currentPattern->outputLevelLSB[positionSelect]^255)+1)%10)+48;
    2266:	78 01       	movw	r14, r16
    2268:	bc ef       	ldi	r27, 0xFC	; 252
    226a:	eb 1a       	sub	r14, r27
    226c:	fb 0a       	sbc	r15, r27
    226e:	80 85       	ldd	r24, Z+8	; 0x08
    2270:	80 95       	com	r24
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	01 96       	adiw	r24, 0x01	; 1
    2276:	b9 01       	movw	r22, r18
    2278:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <__divmodhi4>
    227c:	80 5d       	subi	r24, 0xD0	; 208
    227e:	f7 01       	movw	r30, r14
			}
				
			menuScreen->knobScreen[0][10] = positionSelect + 49;
    2280:	80 83       	st	Z, r24
    2282:	f8 01       	movw	r30, r16
    2284:	e2 50       	subi	r30, 0x02	; 2
    2286:	fd 4f       	sbci	r31, 0xFD	; 253
    2288:	81 e3       	ldi	r24, 0x31	; 49
    228a:	88 0d       	add	r24, r8
			outputS(menuScreen->knobScreen[0], 3);
    228c:	80 83       	st	Z, r24
    228e:	63 e0       	ldi	r22, 0x03	; 3
    2290:	70 e0       	ldi	r23, 0x00	; 0
    2292:	c8 01       	movw	r24, r16
    2294:	8c 50       	subi	r24, 0x0C	; 12
    2296:	9d 4f       	sbci	r25, 0xFD	; 253
    2298:	93 d2       	rcall	.+1318   	; 0x27c0 <outputS>
			break;
    229a:	02 c1       	rjmp	.+516    	; 0x24a0 <__stack+0x2a1>
				
			case 1: //pitch
			menuScreen->knobScreen[1][5] = positionSelect+49; 
    229c:	f8 01       	movw	r30, r16
    229e:	e2 5f       	subi	r30, 0xF2	; 242
    22a0:	fc 4f       	sbci	r31, 0xFC	; 252
    22a2:	81 e3       	ldi	r24, 0x31	; 49
    22a4:	88 0d       	add	r24, r8
			if(currentPattern->outputPitch[positionSelect]>>7)
    22a6:	80 83       	st	Z, r24
    22a8:	91 2c       	mov	r9, r1
    22aa:	f7 01       	movw	r30, r14
    22ac:	e8 0d       	add	r30, r8
    22ae:	f9 1d       	adc	r31, r9
    22b0:	80 89       	ldd	r24, Z+16	; 0x10
    22b2:	88 23       	and	r24, r24
			{
				menuScreen->knobScreen[1][7] = '-';
    22b4:	94 f4       	brge	.+36     	; 0x22da <__stack+0xdb>
    22b6:	8d e2       	ldi	r24, 0x2D	; 45
    22b8:	f8 01       	movw	r30, r16
    22ba:	e0 5f       	subi	r30, 0xF0	; 240
    22bc:	fc 4f       	sbci	r31, 0xFC	; 252
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect])^255);
    22be:	80 83       	st	Z, r24
    22c0:	f7 01       	movw	r30, r14
    22c2:	e8 0d       	add	r30, r8
    22c4:	f9 1d       	adc	r31, r9
    22c6:	20 89       	ldd	r18, Z+16	; 0x10
    22c8:	20 95       	com	r18
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	43 e0       	ldi	r20, 0x03	; 3
    22ce:	68 e0       	ldi	r22, 0x08	; 8
    22d0:	c8 01       	movw	r24, r16
    22d2:	87 5f       	subi	r24, 0xF7	; 247
    22d4:	9c 4f       	sbci	r25, 0xFC	; 252
			}else
			{
				menuScreen->knobScreen[1][7] = '+';
    22d6:	8c d2       	rcall	.+1304   	; 0x27f0 <numPrinter>
    22d8:	10 c0       	rjmp	.+32     	; 0x22fa <__stack+0xfb>
    22da:	8b e2       	ldi	r24, 0x2B	; 43
    22dc:	f8 01       	movw	r30, r16
    22de:	e0 5f       	subi	r30, 0xF0	; 240
				numPrinter(menuScreen->knobScreen[1],8,3,currentPattern->outputPitch[positionSelect]);
    22e0:	fc 4f       	sbci	r31, 0xFC	; 252
    22e2:	80 83       	st	Z, r24
    22e4:	f7 01       	movw	r30, r14
    22e6:	e8 0d       	add	r30, r8
    22e8:	f9 1d       	adc	r31, r9
    22ea:	20 89       	ldd	r18, Z+16	; 0x10
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	43 e0       	ldi	r20, 0x03	; 3
    22f0:	68 e0       	ldi	r22, 0x08	; 8
    22f2:	c8 01       	movw	r24, r16
    22f4:	87 5f       	subi	r24, 0xF7	; 247
    22f6:	9c 4f       	sbci	r25, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
    22f8:	7b d2       	rcall	.+1270   	; 0x27f0 <numPrinter>
    22fa:	63 e0       	ldi	r22, 0x03	; 3
    22fc:	70 e0       	ldi	r23, 0x00	; 0
    22fe:	c8 01       	movw	r24, r16
    2300:	87 5f       	subi	r24, 0xF7	; 247
    2302:	9c 4f       	sbci	r25, 0xFC	; 252
			break;
    2304:	5d d2       	rcall	.+1210   	; 0x27c0 <outputS>
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    2306:	cc c0       	rjmp	.+408    	; 0x24a0 <__stack+0x2a1>
    2308:	91 2c       	mov	r9, r1
    230a:	c2 2e       	mov	r12, r18
    230c:	d1 2c       	mov	r13, r1
    230e:	c4 01       	movw	r24, r8
    2310:	8c 0d       	add	r24, r12
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    2312:	9d 1d       	adc	r25, r13
    2314:	58 01       	movw	r10, r16
    2316:	f2 ee       	ldi	r31, 0xE2	; 226
    2318:	af 1a       	sub	r10, r31
    231a:	fc ef       	ldi	r31, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    231c:	bf 0a       	sbc	r11, r31
    231e:	e8 0e       	add	r14, r24
    2320:	f9 1e       	adc	r15, r25
    2322:	f7 01       	movw	r30, r14
    2324:	e8 5b       	subi	r30, 0xB8	; 184
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	20 81       	ld	r18, Z
    232a:	30 e0       	ldi	r19, 0x00	; 0
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    232c:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    232e:	22 27       	eor	r18, r18
    2330:	70 96       	adiw	r30, 0x10	; 16
    2332:	80 81       	ld	r24, Z
    2334:	28 2b       	or	r18, r24
    2336:	45 e0       	ldi	r20, 0x05	; 5
    2338:	6e e0       	ldi	r22, 0x0E	; 14
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
    233a:	c5 01       	movw	r24, r10
    233c:	59 d2       	rcall	.+1202   	; 0x27f0 <numPrinter>
    233e:	f8 01       	movw	r30, r16
    2340:	e5 5d       	subi	r30, 0xD5	; 213
    2342:	fc 4f       	sbci	r31, 0xFC	; 252
    2344:	d8 01       	movw	r26, r16
    2346:	a4 5d       	subi	r26, 0xD4	; 212
    2348:	bc 4f       	sbci	r27, 0xFC	; 252
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
    234a:	8c 91       	ld	r24, X
    234c:	80 83       	st	Z, r24
    234e:	32 96       	adiw	r30, 0x02	; 2
			menuScreen->knobScreen[2][15] = '.';	
    2350:	80 81       	ld	r24, Z
    2352:	8c 93       	st	X, r24
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
    2354:	8e e2       	ldi	r24, 0x2E	; 46
    2356:	80 83       	st	Z, r24
    2358:	94 01       	movw	r18, r8
    235a:	2f 5f       	subi	r18, 0xFF	; 255
    235c:	3f 4f       	sbci	r19, 0xFF	; 255
    235e:	2c 0d       	add	r18, r12
    2360:	3d 1d       	adc	r19, r13
    2362:	42 e0       	ldi	r20, 0x02	; 2
    2364:	6a e0       	ldi	r22, 0x0A	; 10
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
    2366:	c5 01       	movw	r24, r10
    2368:	43 d2       	rcall	.+1158   	; 0x27f0 <numPrinter>
    236a:	63 e0       	ldi	r22, 0x03	; 3
    236c:	70 e0       	ldi	r23, 0x00	; 0
    236e:	c5 01       	movw	r24, r10
			break;
    2370:	27 d2       	rcall	.+1102   	; 0x27c0 <outputS>
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    2372:	96 c0       	rjmp	.+300    	; 0x24a0 <__stack+0x2a1>
    2374:	91 2c       	mov	r9, r1
    2376:	c2 2e       	mov	r12, r18
    2378:	d1 2c       	mov	r13, r1
    237a:	c4 01       	movw	r24, r8
    237c:	8c 0d       	add	r24, r12
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    237e:	9d 1d       	adc	r25, r13
    2380:	58 01       	movw	r10, r16
    2382:	2d ec       	ldi	r18, 0xCD	; 205
    2384:	a2 1a       	sub	r10, r18
    2386:	2c ef       	ldi	r18, 0xFC	; 252
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
			break;
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    2388:	b2 0a       	sbc	r11, r18
    238a:	e8 0e       	add	r14, r24
    238c:	f9 1e       	adc	r15, r25
    238e:	f7 01       	movw	r30, r14
    2390:	e8 59       	subi	r30, 0x98	; 152
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	20 81       	ld	r18, Z
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
			break;
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    239a:	22 27       	eor	r18, r18
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    239c:	70 96       	adiw	r30, 0x10	; 16
    239e:	80 81       	ld	r24, Z
    23a0:	28 2b       	or	r18, r24
    23a2:	45 e0       	ldi	r20, 0x05	; 5
    23a4:	6f e0       	ldi	r22, 0x0F	; 15
    23a6:	c5 01       	movw	r24, r10
    23a8:	23 d2       	rcall	.+1094   	; 0x27f0 <numPrinter>
			menuScreen->knobScreen[3][14] = menuScreen->knobScreen[3][15];
    23aa:	f8 01       	movw	r30, r16
    23ac:	ef 5b       	subi	r30, 0xBF	; 191
    23ae:	fc 4f       	sbci	r31, 0xFC	; 252
    23b0:	d8 01       	movw	r26, r16
    23b2:	ae 5b       	subi	r26, 0xBE	; 190
    23b4:	bc 4f       	sbci	r27, 0xFC	; 252
    23b6:	8c 91       	ld	r24, X
    23b8:	80 83       	st	Z, r24
			menuScreen->knobScreen[3][15] = menuScreen->knobScreen[3][16];
    23ba:	32 96       	adiw	r30, 0x02	; 2
    23bc:	80 81       	ld	r24, Z
    23be:	8c 93       	st	X, r24
			menuScreen->knobScreen[3][16] = '.';
    23c0:	8e e2       	ldi	r24, 0x2E	; 46
			numPrinter(menuScreen->knobScreen[3],11,2,(positionSelect+1+positionSelectUpper));
    23c2:	80 83       	st	Z, r24
    23c4:	94 01       	movw	r18, r8
    23c6:	2f 5f       	subi	r18, 0xFF	; 255
    23c8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ca:	2c 0d       	add	r18, r12
    23cc:	3d 1d       	adc	r19, r13
    23ce:	42 e0       	ldi	r20, 0x02	; 2
    23d0:	6b e0       	ldi	r22, 0x0B	; 11
    23d2:	c5 01       	movw	r24, r10
			outputS(menuScreen->knobScreen[3], 3);
    23d4:	0d d2       	rcall	.+1050   	; 0x27f0 <numPrinter>
    23d6:	63 e0       	ldi	r22, 0x03	; 3
    23d8:	70 e0       	ldi	r23, 0x00	; 0
    23da:	c5 01       	movw	r24, r10
    23dc:	f1 d1       	rcall	.+994    	; 0x27c0 <outputS>
			break;
				
			case 4: //track volume
			if(currentPattern->trackMainVolumeMSB[(positionSelect+positionSelectUpper)]==0)
    23de:	60 c0       	rjmp	.+192    	; 0x24a0 <__stack+0x2a1>
    23e0:	c2 2e       	mov	r12, r18
    23e2:	d1 2c       	mov	r13, r1
    23e4:	c8 0c       	add	r12, r8
    23e6:	d1 1c       	adc	r13, r1
    23e8:	f7 01       	movw	r30, r14
    23ea:	ec 0d       	add	r30, r12
    23ec:	fd 1d       	adc	r31, r13
    23ee:	80 a5       	ldd	r24, Z+40	; 0x28
			{
				menuScreen->knobScreen[4][15] = ' ';
    23f0:	81 11       	cpse	r24, r1
    23f2:	11 c0       	rjmp	.+34     	; 0x2416 <__stack+0x217>
    23f4:	80 e2       	ldi	r24, 0x20	; 32
    23f6:	f8 01       	movw	r30, r16
    23f8:	e9 5a       	subi	r30, 0xA9	; 169
 				numPrinter(menuScreen->knobScreen[4],16, 2, currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]);
    23fa:	fc 4f       	sbci	r31, 0xFC	; 252
    23fc:	80 83       	st	Z, r24
    23fe:	f7 01       	movw	r30, r14
    2400:	ec 0d       	add	r30, r12
    2402:	fd 1d       	adc	r31, r13
    2404:	20 ad       	ldd	r18, Z+56	; 0x38
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	42 e0       	ldi	r20, 0x02	; 2
    240a:	60 e1       	ldi	r22, 0x10	; 16
    240c:	c8 01       	movw	r24, r16
    240e:	88 5b       	subi	r24, 0xB8	; 184
    2410:	9c 4f       	sbci	r25, 0xFC	; 252
    2412:	ee d1       	rcall	.+988    	; 0x27f0 <numPrinter>
			}else
			{
				menuScreen->knobScreen[4][15] = '-';
    2414:	25 c0       	rjmp	.+74     	; 0x2460 <__stack+0x261>
    2416:	8d e2       	ldi	r24, 0x2D	; 45
    2418:	f8 01       	movw	r30, r16
    241a:	e9 5a       	subi	r30, 0xA9	; 169
    241c:	fc 4f       	sbci	r31, 0xFC	; 252
				menuScreen->knobScreen[4][16] = ((((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    241e:	80 83       	st	Z, r24
    2420:	31 96       	adiw	r30, 0x01	; 1
    2422:	ec 0c       	add	r14, r12
    2424:	fd 1c       	adc	r15, r13
    2426:	d7 01       	movw	r26, r14
    2428:	d8 96       	adiw	r26, 0x38	; 56
    242a:	8c 91       	ld	r24, X
    242c:	80 95       	com	r24
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	01 96       	adiw	r24, 0x01	; 1
    2432:	64 e6       	ldi	r22, 0x64	; 100
    2434:	70 e0       	ldi	r23, 0x00	; 0
    2436:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <__divmodhi4>
    243a:	2a e0       	ldi	r18, 0x0A	; 10
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	b9 01       	movw	r22, r18
    2440:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <__divmodhi4>
    2444:	60 5d       	subi	r22, 0xD0	; 208
				menuScreen->knobScreen[4][17] = (((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%10)+48;
    2446:	60 83       	st	Z, r22
    2448:	31 96       	adiw	r30, 0x01	; 1
    244a:	d7 01       	movw	r26, r14
    244c:	d8 96       	adiw	r26, 0x38	; 56
    244e:	8c 91       	ld	r24, X
    2450:	80 95       	com	r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	01 96       	adiw	r24, 0x01	; 1
    2456:	b9 01       	movw	r22, r18
    2458:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <__divmodhi4>
    245c:	80 5d       	subi	r24, 0xD0	; 208
			}
				 numPrinter(menuScreen->knobScreen[4],12,2,(positionSelect+positionSelectUpper+1));
    245e:	80 83       	st	Z, r24
    2460:	08 5b       	subi	r16, 0xB8	; 184
    2462:	1c 4f       	sbci	r17, 0xFC	; 252
    2464:	96 01       	movw	r18, r12
    2466:	2f 5f       	subi	r18, 0xFF	; 255
    2468:	3f 4f       	sbci	r19, 0xFF	; 255
    246a:	42 e0       	ldi	r20, 0x02	; 2
    246c:	6c e0       	ldi	r22, 0x0C	; 12
    246e:	c8 01       	movw	r24, r16
    2470:	bf d1       	rcall	.+894    	; 0x27f0 <numPrinter>
				 outputS(menuScreen->knobScreen[4], 3);
    2472:	63 e0       	ldi	r22, 0x03	; 3
    2474:	70 e0       	ldi	r23, 0x00	; 0
    2476:	c8 01       	movw	r24, r16
    2478:	a3 d1       	rcall	.+838    	; 0x27c0 <outputS>
    247a:	12 c0       	rjmp	.+36     	; 0x24a0 <__stack+0x2a1>
			break;
    247c:	06 5d       	subi	r16, 0xD6	; 214
			
			case 5:
			numPrinter(menuScreen->screen0[2],5,3,currentPattern->patternBPM);
    247e:	1f 4f       	sbci	r17, 0xFF	; 255
    2480:	f7 01       	movw	r30, r14
    2482:	e8 53       	subi	r30, 0x38	; 56
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	20 81       	ld	r18, Z
    2488:	31 81       	ldd	r19, Z+1	; 0x01
    248a:	43 e0       	ldi	r20, 0x03	; 3
    248c:	65 e0       	ldi	r22, 0x05	; 5
    248e:	c8 01       	movw	r24, r16
    2490:	af d1       	rcall	.+862    	; 0x27f0 <numPrinter>
    2492:	8a 85       	ldd	r24, Y+10	; 0x0a
    2494:	81 11       	cpse	r24, r1
			if(currentGlobals->menuState==PreformanceModeInit)
    2496:	04 c0       	rjmp	.+8      	; 0x24a0 <__stack+0x2a1>
    2498:	62 e0       	ldi	r22, 0x02	; 2
    249a:	70 e0       	ldi	r23, 0x00	; 0
			{
				outputS(menuScreen->screen0[2],2);
    249c:	c8 01       	movw	r24, r16
    249e:	90 d1       	rcall	.+800    	; 0x27c0 <outputS>
    24a0:	1e 86       	std	Y+14, r1	; 0x0e
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
			}
			break;
		}
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<knobChange));			
    24a6:	1f 91       	pop	r17
	}
    24a8:	0f 91       	pop	r16
    24aa:	ff 90       	pop	r15
    24ac:	ef 90       	pop	r14
    24ae:	df 90       	pop	r13
    24b0:	cf 90       	pop	r12
    24b2:	bf 90       	pop	r11
    24b4:	af 90       	pop	r10
    24b6:	9f 90       	pop	r9
    24b8:	8f 90       	pop	r8
    24ba:	08 95       	ret

000024bc <__vector_54>:
    24bc:	1f 92       	push	r1
    24be:	0f 92       	push	r0
    24c0:	0f b6       	in	r0, 0x3f	; 63
}

void midiTransmit(uint8_t data)
{
  while (!(UCSR3A & (1 << UDRE3)));
  UDR3 = data;
    24c2:	0f 92       	push	r0
    24c4:	11 24       	eor	r1, r1
    24c6:	0b b6       	in	r0, 0x3b	; 59
    24c8:	0f 92       	push	r0
    24ca:	2f 93       	push	r18
    24cc:	3f 93       	push	r19
    24ce:	5f 93       	push	r21
    24d0:	6f 93       	push	r22
    24d2:	7f 93       	push	r23
    24d4:	8f 93       	push	r24
    24d6:	9f 93       	push	r25
    24d8:	af 93       	push	r26
    24da:	bf 93       	push	r27
    24dc:	ef 93       	push	r30
    24de:	ff 93       	push	r31
    24e0:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    24e4:	82 2f       	mov	r24, r18
    24e6:	82 95       	swap	r24
    24e8:	8f 70       	andi	r24, 0x0F	; 15
    24ea:	88 50       	subi	r24, 0x08	; 8
    24ec:	82 30       	cpi	r24, 0x02	; 2
    24ee:	78 f4       	brcc	.+30     	; 0x250e <__vector_54+0x52>
    24f0:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <midiWriteIndex>
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	fc 01       	movw	r30, r24
    24f8:	ee 0f       	add	r30, r30
    24fa:	ff 1f       	adc	r31, r31
    24fc:	8e 0f       	add	r24, r30
    24fe:	9f 1f       	adc	r25, r31
    2500:	fc 01       	movw	r30, r24
    2502:	e3 58       	subi	r30, 0x83	; 131
    2504:	f9 4f       	sbci	r31, 0xF9	; 249
    2506:	20 83       	st	Z, r18
    2508:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    250c:	50 c0       	rjmp	.+160    	; 0x25ae <__vector_54+0xf2>
    250e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    2512:	81 11       	cpse	r24, r1
    2514:	15 c0       	rjmp	.+42     	; 0x2540 <__vector_54+0x84>
    2516:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <midiWriteIndex>
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    2520:	fc 01       	movw	r30, r24
    2522:	ee 0f       	add	r30, r30
    2524:	ff 1f       	adc	r31, r31
    2526:	e8 0f       	add	r30, r24
    2528:	f9 1f       	adc	r31, r25
    252a:	e3 58       	subi	r30, 0x83	; 131
    252c:	f9 4f       	sbci	r31, 0xF9	; 249
    252e:	e3 0f       	add	r30, r19
    2530:	f1 1d       	adc	r31, r1
    2532:	21 83       	std	Z+1, r18	; 0x01
    2534:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    2538:	8f 5f       	subi	r24, 0xFF	; 255
    253a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <midiWriteFlag>
    253e:	37 c0       	rjmp	.+110    	; 0x25ae <__vector_54+0xf2>
    2540:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    2544:	8f 3f       	cpi	r24, 0xFF	; 255
    2546:	99 f1       	breq	.+102    	; 0x25ae <__vector_54+0xf2>
    2548:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <midiWriteIndex>
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    2552:	fc 01       	movw	r30, r24
    2554:	ee 0f       	add	r30, r30
    2556:	ff 1f       	adc	r31, r31
    2558:	e8 0f       	add	r30, r24
    255a:	f9 1f       	adc	r31, r25
    255c:	e3 58       	subi	r30, 0x83	; 131
    255e:	f9 4f       	sbci	r31, 0xF9	; 249
    2560:	e3 0f       	add	r30, r19
    2562:	f1 1d       	adc	r31, r1
    2564:	21 83       	std	Z+1, r18	; 0x01
    2566:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <midiWriteIndex>
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	fc 01       	movw	r30, r24
    256e:	ee 0f       	add	r30, r30
    2570:	ff 1f       	adc	r31, r31
    2572:	8e 0f       	add	r24, r30
    2574:	9f 1f       	adc	r25, r31
    2576:	fc 01       	movw	r30, r24
    2578:	e3 58       	subi	r30, 0x83	; 131
    257a:	f9 4f       	sbci	r31, 0xF9	; 249
    257c:	20 81       	ld	r18, Z
    257e:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <midiWriteIndex>
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	6a e0       	ldi	r22, 0x0A	; 10
    2588:	70 e0       	ldi	r23, 0x00	; 0
    258a:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <__divmodhi4>
    258e:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <midiWriteIndex>
    2592:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <midiWriteIndex>
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	fc 01       	movw	r30, r24
    259a:	ee 0f       	add	r30, r30
    259c:	ff 1f       	adc	r31, r31
    259e:	8e 0f       	add	r24, r30
    25a0:	9f 1f       	adc	r25, r31
    25a2:	fc 01       	movw	r30, r24
    25a4:	e3 58       	subi	r30, 0x83	; 131
    25a6:	f9 4f       	sbci	r31, 0xF9	; 249
    25a8:	20 83       	st	Z, r18
    25aa:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    25ae:	ff 91       	pop	r31
    25b0:	ef 91       	pop	r30
    25b2:	bf 91       	pop	r27
    25b4:	af 91       	pop	r26
    25b6:	9f 91       	pop	r25
    25b8:	8f 91       	pop	r24
    25ba:	7f 91       	pop	r23
    25bc:	6f 91       	pop	r22
    25be:	5f 91       	pop	r21
    25c0:	3f 91       	pop	r19
    25c2:	2f 91       	pop	r18
    25c4:	0f 90       	pop	r0
    25c6:	0b be       	out	0x3b, r0	; 59
    25c8:	0f 90       	pop	r0
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	0f 90       	pop	r0
    25ce:	1f 90       	pop	r1
    25d0:	18 95       	reti

000025d2 <initMidi>:
    25d2:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    25d6:	8f e1       	ldi	r24, 0x1F	; 31
    25d8:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    25dc:	e1 e3       	ldi	r30, 0x31	; 49
    25de:	f1 e0       	ldi	r31, 0x01	; 1
    25e0:	80 81       	ld	r24, Z
    25e2:	88 69       	ori	r24, 0x98	; 152
    25e4:	80 83       	st	Z, r24
    25e6:	e2 e3       	ldi	r30, 0x32	; 50
    25e8:	f1 e0       	ldi	r31, 0x01	; 1
    25ea:	80 81       	ld	r24, Z
    25ec:	86 60       	ori	r24, 0x06	; 6
    25ee:	80 83       	st	Z, r24
    25f0:	08 95       	ret

000025f2 <midiRead>:
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
    25f2:	9f 92       	push	r9
    25f4:	af 92       	push	r10
    25f6:	bf 92       	push	r11
    25f8:	cf 92       	push	r12
    25fa:	df 92       	push	r13
    25fc:	ef 92       	push	r14
    25fe:	ff 92       	push	r15
    2600:	0f 93       	push	r16
    2602:	1f 93       	push	r17
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
  while (midiReadIndex != midiWriteIndex)
    260c:	e0 91 04 04 	lds	r30, 0x0404	; 0x800404 <midiReadIndex>
    2610:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <midiWriteIndex>
    2614:	e8 17       	cp	r30, r24
    2616:	09 f4       	brne	.+2      	; 0x261a <midiRead+0x28>
    2618:	4d c0       	rjmp	.+154    	; 0x26b4 <midiRead+0xc2>
  {
    uint8_t midiMessageType = ((midiEventBuffer[midiReadIndex].statusByte)>>4);
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    261a:	7e 01       	movw	r14, r28
    261c:	86 e7       	ldi	r24, 0x76	; 118
    261e:	e8 1a       	sub	r14, r24
    2620:	8e ef       	ldi	r24, 0xFE	; 254
    2622:	f8 0a       	sbc	r15, r24
    {
        for (int i=0; i<16; i++)
        {
          if(midiEventBuffer[midiReadIndex].dataByte[0]==currentGlobals.midiTrackNote[i])
          { //we don't care about velocity, at least not yet.
			playTrack(&currentPattern,&currentGlobals, i); //this might be out of scope? need to test.
    2624:	ce 2c       	mov	r12, r14
    2626:	df 2c       	mov	r13, r15
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    2628:	0a e0       	ldi	r16, 0x0A	; 10
    262a:	10 e0       	ldi	r17, 0x00	; 0

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
  {
    uint8_t midiMessageType = ((midiEventBuffer[midiReadIndex].statusByte)>>4);
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	cf 01       	movw	r24, r30
    2630:	88 0f       	add	r24, r24
    2632:	99 1f       	adc	r25, r25
    2634:	e8 0f       	add	r30, r24
    2636:	f9 1f       	adc	r31, r25
    2638:	e3 58       	subi	r30, 0x83	; 131
    263a:	f9 4f       	sbci	r31, 0xF9	; 249
    263c:	80 81       	ld	r24, Z
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    263e:	22 81       	ldd	r18, Z+2	; 0x02
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    2640:	90 81       	ld	r25, Z
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    2642:	82 95       	swap	r24
    2644:	8f 70       	andi	r24, 0x0F	; 15
    2646:	89 30       	cpi	r24, 0x09	; 9
    2648:	39 f5       	brne	.+78     	; 0x2698 <midiRead+0xa6>
    264a:	22 23       	and	r18, r18
    264c:	29 f1       	breq	.+74     	; 0x2698 <midiRead+0xa6>
    264e:	9f 70       	andi	r25, 0x0F	; 15
    2650:	f7 01       	movw	r30, r14
    2652:	80 89       	ldd	r24, Z+16	; 0x10
    2654:	98 13       	cpse	r25, r24
    2656:	20 c0       	rjmp	.+64     	; 0x2698 <midiRead+0xa6>
    2658:	57 01       	movw	r10, r14
    265a:	f1 e1       	ldi	r31, 0x11	; 17
    265c:	af 0e       	add	r10, r31
    265e:	b1 1c       	adc	r11, r1
    2660:	91 2c       	mov	r9, r1
    {
        for (int i=0; i<16; i++)
        {
          if(midiEventBuffer[midiReadIndex].dataByte[0]==currentGlobals.midiTrackNote[i])
    2662:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <midiReadIndex>
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	fc 01       	movw	r30, r24
    266a:	ee 0f       	add	r30, r30
    266c:	ff 1f       	adc	r31, r31
    266e:	8e 0f       	add	r24, r30
    2670:	9f 1f       	adc	r25, r31
    2672:	fc 01       	movw	r30, r24
    2674:	e3 58       	subi	r30, 0x83	; 131
    2676:	f9 4f       	sbci	r31, 0xF9	; 249
    2678:	91 81       	ldd	r25, Z+1	; 0x01
    267a:	f5 01       	movw	r30, r10
    267c:	81 91       	ld	r24, Z+
    267e:	5f 01       	movw	r10, r30
    2680:	98 13       	cpse	r25, r24
    2682:	06 c0       	rjmp	.+12     	; 0x2690 <midiRead+0x9e>
          { //we don't care about velocity, at least not yet.
			playTrack(&currentPattern,&currentGlobals, i); //this might be out of scope? need to test.
    2684:	49 2d       	mov	r20, r9
    2686:	6c 2d       	mov	r22, r12
    2688:	7d 2d       	mov	r23, r13
    268a:	ce 01       	movw	r24, r28
    268c:	0f 96       	adiw	r24, 0x0f	; 15
    268e:	8c d4       	rcall	.+2328   	; 0x2fa8 <playTrack>
    2690:	93 94       	inc	r9
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    {
        for (int i=0; i<16; i++)
    2692:	f0 e1       	ldi	r31, 0x10	; 16
    2694:	9f 12       	cpse	r9, r31
    2696:	e5 cf       	rjmp	.-54     	; 0x2662 <midiRead+0x70>
          { //we don't care about velocity, at least not yet.
			playTrack(&currentPattern,&currentGlobals, i); //this might be out of scope? need to test.
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    2698:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <midiReadIndex>
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	01 96       	adiw	r24, 0x01	; 1
    26a0:	b8 01       	movw	r22, r16
    26a2:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <__divmodhi4>
    26a6:	e8 2f       	mov	r30, r24
    26a8:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <midiReadIndex>
  UDR3 = data;
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
    26ac:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <midiWriteIndex>
    26b0:	8e 13       	cpse	r24, r30
    26b2:	bc cf       	rjmp	.-136    	; 0x262c <midiRead+0x3a>
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
  }
}
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	1f 91       	pop	r17
    26ba:	0f 91       	pop	r16
    26bc:	ff 90       	pop	r15
    26be:	ef 90       	pop	r14
    26c0:	df 90       	pop	r13
    26c2:	cf 90       	pop	r12
    26c4:	bf 90       	pop	r11
    26c6:	af 90       	pop	r10
    26c8:	9f 90       	pop	r9
    26ca:	08 95       	ret

000026cc <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    26cc:	e2 e0       	ldi	r30, 0x02	; 2
    26ce:	f1 e0       	ldi	r31, 0x01	; 1
    26d0:	80 81       	ld	r24, Z
    26d2:	80 62       	ori	r24, 0x20	; 32
    26d4:	80 83       	st	Z, r24
    26d6:	85 e0       	ldi	r24, 0x05	; 5
    26d8:	8a 95       	dec	r24
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <enableCycle+0xc>
    26dc:	00 00       	nop
    26de:	80 81       	ld	r24, Z
    26e0:	8f 7d       	andi	r24, 0xDF	; 223
    26e2:	80 83       	st	Z, r24
    26e4:	08 95       	ret

000026e6 <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
    26e6:	e2 e0       	ldi	r30, 0x02	; 2
    26e8:	f1 e0       	ldi	r31, 0x01	; 1
    26ea:	90 81       	ld	r25, Z
    26ec:	9f 7b       	andi	r25, 0xBF	; 191
    26ee:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    26f0:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
    26f2:	ec cf       	rjmp	.-40     	; 0x26cc <enableCycle>
    26f4:	08 95       	ret

000026f6 <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
    26f6:	e2 e0       	ldi	r30, 0x02	; 2
    26f8:	f1 e0       	ldi	r31, 0x01	; 1
    26fa:	90 81       	ld	r25, Z
    26fc:	90 64       	ori	r25, 0x40	; 64
    26fe:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    2700:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
    2702:	e4 cf       	rjmp	.-56     	; 0x26cc <enableCycle>
    2704:	08 95       	ret

00002706 <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRH = 0x60; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
    2706:	80 e6       	ldi	r24, 0x60	; 96
    2708:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	DDRC =0xFF; //all pins on the LCD Data Bus.
    270c:	8f ef       	ldi	r24, 0xFF	; 255
    270e:	87 b9       	out	0x07, r24	; 7


	PORTH &= 0B10011111;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
    2710:	e2 e0       	ldi	r30, 0x02	; 2
    2712:	f1 e0       	ldi	r31, 0x01	; 1
    2714:	80 81       	ld	r24, Z
    2716:	8f 79       	andi	r24, 0x9F	; 159
    2718:	80 83       	st	Z, r24

	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
    271a:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    271c:	8f e1       	ldi	r24, 0x1F	; 31
    271e:	93 e0       	ldi	r25, 0x03	; 3
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	f1 f7       	brne	.-4      	; 0x2720 <initScreen+0x1a>
    2724:	00 c0       	rjmp	.+0      	; 0x2726 <initScreen+0x20>
    2726:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose


	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    2728:	8a e2       	ldi	r24, 0x2A	; 42
    272a:	dd df       	rcall	.-70     	; 0x26e6 <command>
	command(0x71);        // Function selection A:
    272c:	81 e7       	ldi	r24, 0x71	; 113
    272e:	db df       	rcall	.-74     	; 0x26e6 <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
    2730:	8c e5       	ldi	r24, 0x5C	; 92
    2732:	e1 df       	rcall	.-62     	; 0x26f6 <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    2734:	88 e2       	ldi	r24, 0x28	; 40
    2736:	d7 df       	rcall	.-82     	; 0x26e6 <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
    2738:	88 e0       	ldi	r24, 0x08	; 8
    273a:	d5 df       	rcall	.-86     	; 0x26e6 <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    273c:	8a e2       	ldi	r24, 0x2A	; 42
    273e:	d3 df       	rcall	.-90     	; 0x26e6 <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    2740:	89 e7       	ldi	r24, 0x79	; 121
    2742:	d1 df       	rcall	.-94     	; 0x26e6 <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
    2744:	85 ed       	ldi	r24, 0xD5	; 213
    2746:	cf df       	rcall	.-98     	; 0x26e6 <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
    2748:	80 e7       	ldi	r24, 0x70	; 112
    274a:	cd df       	rcall	.-102    	; 0x26e6 <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    274c:	88 e7       	ldi	r24, 0x78	; 120
    274e:	cb df       	rcall	.-106    	; 0x26e6 <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
    2750:	89 e0       	ldi	r24, 0x09	; 9
    2752:	c9 df       	rcall	.-110    	; 0x26e6 <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
    2754:	86 e0       	ldi	r24, 0x06	; 6
    2756:	c7 df       	rcall	.-114    	; 0x26e6 <command>
	command(0x72);        // Function selection B:
    2758:	82 e7       	ldi	r24, 0x72	; 114
    275a:	c5 df       	rcall	.-118    	; 0x26e6 <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
    275c:	8a e0       	ldi	r24, 0x0A	; 10
    275e:	cb df       	rcall	.-106    	; 0x26f6 <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    2760:	89 e7       	ldi	r24, 0x79	; 121
    2762:	c1 df       	rcall	.-126    	; 0x26e6 <command>
	command(0xDA);        // Set SEG pins hardware configuration:
    2764:	8a ed       	ldi	r24, 0xDA	; 218
    2766:	bf df       	rcall	.-130    	; 0x26e6 <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
    2768:	80 e1       	ldi	r24, 0x10	; 16
    276a:	bd df       	rcall	.-134    	; 0x26e6 <command>
	command(0xDC);        // Function selection C:
    276c:	8c ed       	ldi	r24, 0xDC	; 220
    276e:	bb df       	rcall	.-138    	; 0x26e6 <command>
	command(0x00);        //  internal VSL, GPIO input disable
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	b9 df       	rcall	.-142    	; 0x26e6 <command>
	command(0x81);        // Set contrast control:
    2774:	81 e8       	ldi	r24, 0x81	; 129
    2776:	b7 df       	rcall	.-146    	; 0x26e6 <command>
    2778:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
    277a:	b5 df       	rcall	.-150    	; 0x26e6 <command>
    277c:	89 ed       	ldi	r24, 0xD9	; 217
    277e:	b3 df       	rcall	.-154    	; 0x26e6 <command>
	command(0xD9);        // Set phase length:
    2780:	81 ef       	ldi	r24, 0xF1	; 241
    2782:	b1 df       	rcall	.-158    	; 0x26e6 <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
    2784:	8b ed       	ldi	r24, 0xDB	; 219
    2786:	af df       	rcall	.-162    	; 0x26e6 <command>
    2788:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
    278a:	ad df       	rcall	.-166    	; 0x26e6 <command>
    278c:	88 e7       	ldi	r24, 0x78	; 120
    278e:	ab df       	rcall	.-170    	; 0x26e6 <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
    2790:	88 e2       	ldi	r24, 0x28	; 40
    2792:	a9 df       	rcall	.-174    	; 0x26e6 <command>
    2794:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    2796:	a7 df       	rcall	.-178    	; 0x26e6 <command>
    2798:	8f e3       	ldi	r24, 0x3F	; 63
    279a:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <initScreen+0x96>
    27a0:	00 c0       	rjmp	.+0      	; 0x27a2 <initScreen+0x9c>
	command(0x01);        // Clear display
    27a2:	00 00       	nop
    27a4:	80 e8       	ldi	r24, 0x80	; 128
    27a6:	9f df       	rcall	.-194    	; 0x26e6 <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    27a8:	8c e0       	ldi	r24, 0x0C	; 12
    27aa:	9d df       	rcall	.-198    	; 0x26e6 <command>
    27ac:	9f ef       	ldi	r25, 0xFF	; 255
    27ae:	24 e3       	ldi	r18, 0x34	; 52
    27b0:	8c e0       	ldi	r24, 0x0C	; 12
    27b2:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required

	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
    27b4:	20 40       	sbci	r18, 0x00	; 0
    27b6:	80 40       	sbci	r24, 0x00	; 0
    27b8:	e1 f7       	brne	.-8      	; 0x27b2 <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
    27ba:	00 c0       	rjmp	.+0      	; 0x27bc <initScreen+0xb6>
    27bc:	00 00       	nop
    27be:	08 95       	ret

000027c0 <outputS>:
    27c0:	0f 93       	push	r16
    27c2:	1f 93       	push	r17
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
    27c8:	8c 01       	movw	r16, r24
    27ca:	fb 01       	movw	r30, r22
    27cc:	ff 27       	eor	r31, r31
    27ce:	e8 5f       	subi	r30, 0xF8	; 248
    27d0:	fd 4f       	sbci	r31, 0xFD	; 253
    27d2:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
    27d4:	88 df       	rcall	.-240    	; 0x26e6 <command>
    27d6:	e8 01       	movw	r28, r16
    27d8:	0c 5e       	subi	r16, 0xEC	; 236
    27da:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
    27dc:	89 91       	ld	r24, Y+
    27de:	8b df       	rcall	.-234    	; 0x26f6 <data>
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
    27e0:	c0 17       	cp	r28, r16
    27e2:	d1 07       	cpc	r29, r17
    27e4:	d9 f7       	brne	.-10     	; 0x27dc <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	1f 91       	pop	r17
    27ec:	0f 91       	pop	r16
    27ee:	08 95       	ret

000027f0 <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    27f0:	cf 93       	push	r28
    27f2:	df 93       	push	r29
    27f4:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch(numCharacters)
    27f6:	43 30       	cpi	r20, 0x03	; 3
    27f8:	09 f4       	brne	.+2      	; 0x27fc <numPrinter+0xc>
    27fa:	54 c0       	rjmp	.+168    	; 0x28a4 <numPrinter+0xb4>
    27fc:	28 f4       	brcc	.+10     	; 0x2808 <numPrinter+0x18>
    27fe:	41 30       	cpi	r20, 0x01	; 1
    2800:	51 f0       	breq	.+20     	; 0x2816 <numPrinter+0x26>
    2802:	42 30       	cpi	r20, 0x02	; 2
    2804:	29 f1       	breq	.+74     	; 0x2850 <numPrinter+0x60>
    2806:	b7 c1       	rjmp	.+878    	; 0x2b76 <numPrinter+0x386>
    2808:	44 30       	cpi	r20, 0x04	; 4
    280a:	09 f4       	brne	.+2      	; 0x280e <numPrinter+0x1e>
    280c:	95 c0       	rjmp	.+298    	; 0x2938 <numPrinter+0x148>
    280e:	45 30       	cpi	r20, 0x05	; 5
    2810:	09 f4       	brne	.+2      	; 0x2814 <numPrinter+0x24>
    2812:	0a c1       	rjmp	.+532    	; 0x2a28 <numPrinter+0x238>
    2814:	b0 c1       	rjmp	.+864    	; 0x2b76 <numPrinter+0x386>
		case 0:
		break;

		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
    2816:	ec 01       	movw	r28, r24
    2818:	c6 0f       	add	r28, r22
    281a:	d1 1d       	adc	r29, r1
    281c:	ad ec       	ldi	r26, 0xCD	; 205
    281e:	bc ec       	ldi	r27, 0xCC	; 204
    2820:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    2824:	96 95       	lsr	r25
    2826:	87 95       	ror	r24
    2828:	96 95       	lsr	r25
    282a:	87 95       	ror	r24
    282c:	96 95       	lsr	r25
    282e:	87 95       	ror	r24
    2830:	9c 01       	movw	r18, r24
    2832:	22 0f       	add	r18, r18
    2834:	33 1f       	adc	r19, r19
    2836:	88 0f       	add	r24, r24
    2838:	99 1f       	adc	r25, r25
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	82 0f       	add	r24, r18
    2844:	93 1f       	adc	r25, r19
    2846:	e8 1b       	sub	r30, r24
    2848:	f9 0b       	sbc	r31, r25
    284a:	e0 5d       	subi	r30, 0xD0	; 208
    284c:	e8 83       	st	Y, r30
		break;
    284e:	93 c1       	rjmp	.+806    	; 0x2b76 <numPrinter+0x386>

		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
    2850:	ec 01       	movw	r28, r24
    2852:	c6 0f       	add	r28, r22
    2854:	d1 1d       	adc	r29, r1
    2856:	ad ec       	ldi	r26, 0xCD	; 205
    2858:	bc ec       	ldi	r27, 0xCC	; 204
    285a:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    285e:	96 95       	lsr	r25
    2860:	87 95       	ror	r24
    2862:	96 95       	lsr	r25
    2864:	87 95       	ror	r24
    2866:	96 95       	lsr	r25
    2868:	87 95       	ror	r24
    286a:	9c 01       	movw	r18, r24
    286c:	22 0f       	add	r18, r18
    286e:	33 1f       	adc	r19, r19
    2870:	88 0f       	add	r24, r24
    2872:	99 1f       	adc	r25, r25
    2874:	88 0f       	add	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	88 0f       	add	r24, r24
    287a:	99 1f       	adc	r25, r25
    287c:	82 0f       	add	r24, r18
    287e:	93 1f       	adc	r25, r19
    2880:	9f 01       	movw	r18, r30
    2882:	28 1b       	sub	r18, r24
    2884:	39 0b       	sbc	r19, r25
    2886:	c9 01       	movw	r24, r18
    2888:	80 5d       	subi	r24, 0xD0	; 208
    288a:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
    288c:	9f 01       	movw	r18, r30
    288e:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    2892:	96 95       	lsr	r25
    2894:	87 95       	ror	r24
    2896:	96 95       	lsr	r25
    2898:	87 95       	ror	r24
    289a:	96 95       	lsr	r25
    289c:	87 95       	ror	r24
    289e:	80 5d       	subi	r24, 0xD0	; 208
    28a0:	88 83       	st	Y, r24
		break;
    28a2:	69 c1       	rjmp	.+722    	; 0x2b76 <numPrinter+0x386>

		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
    28a4:	ec 01       	movw	r28, r24
    28a6:	c6 0f       	add	r28, r22
    28a8:	d1 1d       	adc	r29, r1
    28aa:	ad ec       	ldi	r26, 0xCD	; 205
    28ac:	bc ec       	ldi	r27, 0xCC	; 204
    28ae:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    28b2:	96 95       	lsr	r25
    28b4:	87 95       	ror	r24
    28b6:	96 95       	lsr	r25
    28b8:	87 95       	ror	r24
    28ba:	96 95       	lsr	r25
    28bc:	87 95       	ror	r24
    28be:	9c 01       	movw	r18, r24
    28c0:	22 0f       	add	r18, r18
    28c2:	33 1f       	adc	r19, r19
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	88 0f       	add	r24, r24
    28ce:	99 1f       	adc	r25, r25
    28d0:	82 0f       	add	r24, r18
    28d2:	93 1f       	adc	r25, r19
    28d4:	9f 01       	movw	r18, r30
    28d6:	28 1b       	sub	r18, r24
    28d8:	39 0b       	sbc	r19, r25
    28da:	c9 01       	movw	r24, r18
    28dc:	80 5d       	subi	r24, 0xD0	; 208
    28de:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = tensPlace;
    28e0:	af 01       	movw	r20, r30
    28e2:	56 95       	lsr	r21
    28e4:	47 95       	ror	r20
    28e6:	56 95       	lsr	r21
    28e8:	47 95       	ror	r20
    28ea:	9a 01       	movw	r18, r20
    28ec:	ab e7       	ldi	r26, 0x7B	; 123
    28ee:	b4 e1       	ldi	r27, 0x14	; 20
    28f0:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    28f4:	96 95       	lsr	r25
    28f6:	87 95       	ror	r24
    28f8:	64 e6       	ldi	r22, 0x64	; 100
    28fa:	68 9f       	mul	r22, r24
    28fc:	90 01       	movw	r18, r0
    28fe:	69 9f       	mul	r22, r25
    2900:	30 0d       	add	r19, r0
    2902:	11 24       	eor	r1, r1
    2904:	cf 01       	movw	r24, r30
    2906:	82 1b       	sub	r24, r18
    2908:	93 0b       	sbc	r25, r19
    290a:	9c 01       	movw	r18, r24
    290c:	ad ec       	ldi	r26, 0xCD	; 205
    290e:	bc ec       	ldi	r27, 0xCC	; 204
    2910:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    2914:	96 95       	lsr	r25
    2916:	87 95       	ror	r24
    2918:	96 95       	lsr	r25
    291a:	87 95       	ror	r24
    291c:	96 95       	lsr	r25
    291e:	87 95       	ror	r24
    2920:	80 5d       	subi	r24, 0xD0	; 208
    2922:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
    2924:	9a 01       	movw	r18, r20
    2926:	ab e7       	ldi	r26, 0x7B	; 123
    2928:	b4 e1       	ldi	r27, 0x14	; 20
    292a:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    292e:	96 95       	lsr	r25
    2930:	87 95       	ror	r24
    2932:	80 5d       	subi	r24, 0xD0	; 208
    2934:	88 83       	st	Y, r24
		break;
    2936:	1f c1       	rjmp	.+574    	; 0x2b76 <numPrinter+0x386>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
    2938:	ec 01       	movw	r28, r24
    293a:	c6 0f       	add	r28, r22
    293c:	d1 1d       	adc	r29, r1
    293e:	ad ec       	ldi	r26, 0xCD	; 205
    2940:	bc ec       	ldi	r27, 0xCC	; 204
    2942:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    2946:	96 95       	lsr	r25
    2948:	87 95       	ror	r24
    294a:	96 95       	lsr	r25
    294c:	87 95       	ror	r24
    294e:	96 95       	lsr	r25
    2950:	87 95       	ror	r24
    2952:	9c 01       	movw	r18, r24
    2954:	22 0f       	add	r18, r18
    2956:	33 1f       	adc	r19, r19
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	88 0f       	add	r24, r24
    295e:	99 1f       	adc	r25, r25
    2960:	88 0f       	add	r24, r24
    2962:	99 1f       	adc	r25, r25
    2964:	82 0f       	add	r24, r18
    2966:	93 1f       	adc	r25, r19
    2968:	9f 01       	movw	r18, r30
    296a:	28 1b       	sub	r18, r24
    296c:	39 0b       	sbc	r19, r25
    296e:	c9 01       	movw	r24, r18
    2970:	80 5d       	subi	r24, 0xD0	; 208
    2972:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
    2974:	9f 01       	movw	r18, r30
    2976:	36 95       	lsr	r19
    2978:	27 95       	ror	r18
    297a:	36 95       	lsr	r19
    297c:	27 95       	ror	r18
    297e:	ab e7       	ldi	r26, 0x7B	; 123
    2980:	b4 e1       	ldi	r27, 0x14	; 20
    2982:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    2986:	96 95       	lsr	r25
    2988:	87 95       	ror	r24
    298a:	44 e6       	ldi	r20, 0x64	; 100
    298c:	48 9f       	mul	r20, r24
    298e:	90 01       	movw	r18, r0
    2990:	49 9f       	mul	r20, r25
    2992:	30 0d       	add	r19, r0
    2994:	11 24       	eor	r1, r1
    2996:	cf 01       	movw	r24, r30
    2998:	82 1b       	sub	r24, r18
    299a:	93 0b       	sbc	r25, r19
    299c:	9c 01       	movw	r18, r24
    299e:	ad ec       	ldi	r26, 0xCD	; 205
    29a0:	bc ec       	ldi	r27, 0xCC	; 204
    29a2:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    29a6:	96 95       	lsr	r25
    29a8:	87 95       	ror	r24
    29aa:	96 95       	lsr	r25
    29ac:	87 95       	ror	r24
    29ae:	96 95       	lsr	r25
    29b0:	87 95       	ror	r24
    29b2:	80 5d       	subi	r24, 0xD0	; 208
    29b4:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = hunderedsPlace;
    29b6:	af 01       	movw	r20, r30
    29b8:	56 95       	lsr	r21
    29ba:	47 95       	ror	r20
    29bc:	56 95       	lsr	r21
    29be:	47 95       	ror	r20
    29c0:	56 95       	lsr	r21
    29c2:	47 95       	ror	r20
    29c4:	9a 01       	movw	r18, r20
    29c6:	a5 ec       	ldi	r26, 0xC5	; 197
    29c8:	b0 e2       	ldi	r27, 0x20	; 32
    29ca:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    29ce:	92 95       	swap	r25
    29d0:	82 95       	swap	r24
    29d2:	8f 70       	andi	r24, 0x0F	; 15
    29d4:	89 27       	eor	r24, r25
    29d6:	9f 70       	andi	r25, 0x0F	; 15
    29d8:	89 27       	eor	r24, r25
    29da:	68 ee       	ldi	r22, 0xE8	; 232
    29dc:	73 e0       	ldi	r23, 0x03	; 3
    29de:	86 9f       	mul	r24, r22
    29e0:	90 01       	movw	r18, r0
    29e2:	87 9f       	mul	r24, r23
    29e4:	30 0d       	add	r19, r0
    29e6:	96 9f       	mul	r25, r22
    29e8:	30 0d       	add	r19, r0
    29ea:	11 24       	eor	r1, r1
    29ec:	cf 01       	movw	r24, r30
    29ee:	82 1b       	sub	r24, r18
    29f0:	93 0b       	sbc	r25, r19
    29f2:	9c 01       	movw	r18, r24
    29f4:	36 95       	lsr	r19
    29f6:	27 95       	ror	r18
    29f8:	36 95       	lsr	r19
    29fa:	27 95       	ror	r18
    29fc:	ab e7       	ldi	r26, 0x7B	; 123
    29fe:	b4 e1       	ldi	r27, 0x14	; 20
    2a00:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    2a04:	96 95       	lsr	r25
    2a06:	87 95       	ror	r24
    2a08:	80 5d       	subi	r24, 0xD0	; 208
    2a0a:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
    2a0c:	9a 01       	movw	r18, r20
    2a0e:	a5 ec       	ldi	r26, 0xC5	; 197
    2a10:	b0 e2       	ldi	r27, 0x20	; 32
    2a12:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    2a16:	92 95       	swap	r25
    2a18:	82 95       	swap	r24
    2a1a:	8f 70       	andi	r24, 0x0F	; 15
    2a1c:	89 27       	eor	r24, r25
    2a1e:	9f 70       	andi	r25, 0x0F	; 15
    2a20:	89 27       	eor	r24, r25
    2a22:	80 5d       	subi	r24, 0xD0	; 208
    2a24:	88 83       	st	Y, r24
		break;
    2a26:	a7 c0       	rjmp	.+334    	; 0x2b76 <numPrinter+0x386>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
    2a28:	ec 01       	movw	r28, r24
    2a2a:	c6 0f       	add	r28, r22
    2a2c:	d1 1d       	adc	r29, r1
    2a2e:	ad ec       	ldi	r26, 0xCD	; 205
    2a30:	bc ec       	ldi	r27, 0xCC	; 204
    2a32:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    2a36:	96 95       	lsr	r25
    2a38:	87 95       	ror	r24
    2a3a:	96 95       	lsr	r25
    2a3c:	87 95       	ror	r24
    2a3e:	96 95       	lsr	r25
    2a40:	87 95       	ror	r24
    2a42:	9c 01       	movw	r18, r24
    2a44:	22 0f       	add	r18, r18
    2a46:	33 1f       	adc	r19, r19
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	88 0f       	add	r24, r24
    2a4e:	99 1f       	adc	r25, r25
    2a50:	88 0f       	add	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	82 0f       	add	r24, r18
    2a56:	93 1f       	adc	r25, r19
    2a58:	9f 01       	movw	r18, r30
    2a5a:	28 1b       	sub	r18, r24
    2a5c:	39 0b       	sbc	r19, r25
    2a5e:	c9 01       	movw	r24, r18
    2a60:	80 5d       	subi	r24, 0xD0	; 208
    2a62:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
    2a64:	9f 01       	movw	r18, r30
    2a66:	36 95       	lsr	r19
    2a68:	27 95       	ror	r18
    2a6a:	36 95       	lsr	r19
    2a6c:	27 95       	ror	r18
    2a6e:	ab e7       	ldi	r26, 0x7B	; 123
    2a70:	b4 e1       	ldi	r27, 0x14	; 20
    2a72:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    2a76:	96 95       	lsr	r25
    2a78:	87 95       	ror	r24
    2a7a:	44 e6       	ldi	r20, 0x64	; 100
    2a7c:	48 9f       	mul	r20, r24
    2a7e:	90 01       	movw	r18, r0
    2a80:	49 9f       	mul	r20, r25
    2a82:	30 0d       	add	r19, r0
    2a84:	11 24       	eor	r1, r1
    2a86:	cf 01       	movw	r24, r30
    2a88:	82 1b       	sub	r24, r18
    2a8a:	93 0b       	sbc	r25, r19
    2a8c:	9c 01       	movw	r18, r24
    2a8e:	ad ec       	ldi	r26, 0xCD	; 205
    2a90:	bc ec       	ldi	r27, 0xCC	; 204
    2a92:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    2a96:	96 95       	lsr	r25
    2a98:	87 95       	ror	r24
    2a9a:	96 95       	lsr	r25
    2a9c:	87 95       	ror	r24
    2a9e:	96 95       	lsr	r25
    2aa0:	87 95       	ror	r24
    2aa2:	80 5d       	subi	r24, 0xD0	; 208
    2aa4:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
    2aa6:	9f 01       	movw	r18, r30
    2aa8:	36 95       	lsr	r19
    2aaa:	27 95       	ror	r18
    2aac:	36 95       	lsr	r19
    2aae:	27 95       	ror	r18
    2ab0:	36 95       	lsr	r19
    2ab2:	27 95       	ror	r18
    2ab4:	a5 ec       	ldi	r26, 0xC5	; 197
    2ab6:	b0 e2       	ldi	r27, 0x20	; 32
    2ab8:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    2abc:	92 95       	swap	r25
    2abe:	82 95       	swap	r24
    2ac0:	8f 70       	andi	r24, 0x0F	; 15
    2ac2:	89 27       	eor	r24, r25
    2ac4:	9f 70       	andi	r25, 0x0F	; 15
    2ac6:	89 27       	eor	r24, r25
    2ac8:	48 ee       	ldi	r20, 0xE8	; 232
    2aca:	53 e0       	ldi	r21, 0x03	; 3
    2acc:	84 9f       	mul	r24, r20
    2ace:	90 01       	movw	r18, r0
    2ad0:	85 9f       	mul	r24, r21
    2ad2:	30 0d       	add	r19, r0
    2ad4:	94 9f       	mul	r25, r20
    2ad6:	30 0d       	add	r19, r0
    2ad8:	11 24       	eor	r1, r1
    2ada:	cf 01       	movw	r24, r30
    2adc:	82 1b       	sub	r24, r18
    2ade:	93 0b       	sbc	r25, r19
    2ae0:	9c 01       	movw	r18, r24
    2ae2:	36 95       	lsr	r19
    2ae4:	27 95       	ror	r18
    2ae6:	36 95       	lsr	r19
    2ae8:	27 95       	ror	r18
    2aea:	ab e7       	ldi	r26, 0x7B	; 123
    2aec:	b4 e1       	ldi	r27, 0x14	; 20
    2aee:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    2af2:	96 95       	lsr	r25
    2af4:	87 95       	ror	r24
    2af6:	80 5d       	subi	r24, 0xD0	; 208
    2af8:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
    2afa:	af 01       	movw	r20, r30
    2afc:	52 95       	swap	r21
    2afe:	42 95       	swap	r20
    2b00:	4f 70       	andi	r20, 0x0F	; 15
    2b02:	45 27       	eor	r20, r21
    2b04:	5f 70       	andi	r21, 0x0F	; 15
    2b06:	45 27       	eor	r20, r21
    2b08:	9a 01       	movw	r18, r20
    2b0a:	a7 e4       	ldi	r26, 0x47	; 71
    2b0c:	b3 e0       	ldi	r27, 0x03	; 3
    2b0e:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    2b12:	96 95       	lsr	r25
    2b14:	87 95       	ror	r24
    2b16:	96 95       	lsr	r25
    2b18:	87 95       	ror	r24
    2b1a:	96 95       	lsr	r25
    2b1c:	87 95       	ror	r24
    2b1e:	60 e1       	ldi	r22, 0x10	; 16
    2b20:	77 e2       	ldi	r23, 0x27	; 39
    2b22:	86 9f       	mul	r24, r22
    2b24:	90 01       	movw	r18, r0
    2b26:	87 9f       	mul	r24, r23
    2b28:	30 0d       	add	r19, r0
    2b2a:	96 9f       	mul	r25, r22
    2b2c:	30 0d       	add	r19, r0
    2b2e:	11 24       	eor	r1, r1
    2b30:	cf 01       	movw	r24, r30
    2b32:	82 1b       	sub	r24, r18
    2b34:	93 0b       	sbc	r25, r19
    2b36:	9c 01       	movw	r18, r24
    2b38:	36 95       	lsr	r19
    2b3a:	27 95       	ror	r18
    2b3c:	36 95       	lsr	r19
    2b3e:	27 95       	ror	r18
    2b40:	36 95       	lsr	r19
    2b42:	27 95       	ror	r18
    2b44:	a5 ec       	ldi	r26, 0xC5	; 197
    2b46:	b0 e2       	ldi	r27, 0x20	; 32
    2b48:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    2b4c:	92 95       	swap	r25
    2b4e:	82 95       	swap	r24
    2b50:	8f 70       	andi	r24, 0x0F	; 15
    2b52:	89 27       	eor	r24, r25
    2b54:	9f 70       	andi	r25, 0x0F	; 15
    2b56:	89 27       	eor	r24, r25
    2b58:	80 5d       	subi	r24, 0xD0	; 208
    2b5a:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
    2b5c:	9a 01       	movw	r18, r20
    2b5e:	a7 e4       	ldi	r26, 0x47	; 71
    2b60:	b3 e0       	ldi	r27, 0x03	; 3
    2b62:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    2b66:	96 95       	lsr	r25
    2b68:	87 95       	ror	r24
    2b6a:	96 95       	lsr	r25
    2b6c:	87 95       	ror	r24
    2b6e:	96 95       	lsr	r25
    2b70:	87 95       	ror	r24
    2b72:	80 5d       	subi	r24, 0xD0	; 208
    2b74:	88 83       	st	Y, r24
		break;

	}


}
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	08 95       	ret

00002b7c <midiNotePrinter>:

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
    2b7c:	9c 01       	movw	r18, r24
    2b7e:	a6 2f       	mov	r26, r22
	char printSharp = 0;
	uint8_t valueSwitch = 0;
	//numbers will always go from B to C, and have 12 distinct values. 
	//we can get our number from this with division. 
	//midi note C0 starts at 12. So, we'll need to do some math there. 
	printNumber = (noteNumber/12)+47; 
    2b80:	eb ea       	ldi	r30, 0xAB	; 171
    2b82:	4e 9f       	mul	r20, r30
    2b84:	e1 2d       	mov	r30, r1
    2b86:	11 24       	eor	r1, r1
    2b88:	e6 95       	lsr	r30
    2b8a:	e6 95       	lsr	r30
    2b8c:	e6 95       	lsr	r30
    2b8e:	9f e2       	ldi	r25, 0x2F	; 47
    2b90:	9e 0f       	add	r25, r30
	
	//theres a weird wrap around with note numbers here. Since there isn't really an easy math patern we can take advantage of. 
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
    2b92:	8e 2f       	mov	r24, r30
    2b94:	88 0f       	add	r24, r24
    2b96:	e8 0f       	add	r30, r24
    2b98:	ee 0f       	add	r30, r30
    2b9a:	ee 0f       	add	r30, r30
    2b9c:	4e 1b       	sub	r20, r30
    2b9e:	50 e0       	ldi	r21, 0x00	; 0
    2ba0:	4c 30       	cpi	r20, 0x0C	; 12
    2ba2:	51 05       	cpc	r21, r1
    2ba4:	58 f5       	brcc	.+86     	; 0x2bfc <midiNotePrinter+0x80>
    2ba6:	fa 01       	movw	r30, r20
    2ba8:	88 27       	eor	r24, r24
    2baa:	e8 51       	subi	r30, 0x18	; 24
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	8f 4f       	sbci	r24, 0xFF	; 255
    2bb0:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <__tablejump2__>
	{
		
		case 0:
		printLetter = 'C';
		printSharp = ' ';
    2bb4:	80 e2       	ldi	r24, 0x20	; 32
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
	{
		
		case 0:
		printLetter = 'C';
    2bb6:	43 e4       	ldi	r20, 0x43	; 67
    2bb8:	23 c0       	rjmp	.+70     	; 0x2c00 <midiNotePrinter+0x84>
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
		printSharp = '#';
    2bba:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'C';
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
    2bbc:	43 e4       	ldi	r20, 0x43	; 67
		printSharp = '#';
		break;
    2bbe:	20 c0       	rjmp	.+64     	; 0x2c00 <midiNotePrinter+0x84>
		
		case 2:
		printLetter = 'D';
		printSharp = ' ';
    2bc0:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'C';
		printSharp = '#';
		break;
		
		case 2:
		printLetter = 'D';
    2bc2:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = ' ';
		break;
    2bc4:	1d c0       	rjmp	.+58     	; 0x2c00 <midiNotePrinter+0x84>
		
		case 3:
		printLetter = 'D';
		printSharp = '#';
    2bc6:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'D';
		printSharp = ' ';
		break;
		
		case 3:
		printLetter = 'D';
    2bc8:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = '#';
		break;
    2bca:	1a c0       	rjmp	.+52     	; 0x2c00 <midiNotePrinter+0x84>
		
		case 4:
		printLetter = 'E';
		printSharp = ' ';
    2bcc:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'D';
		printSharp = '#';
		break;
		
		case 4:
		printLetter = 'E';
    2bce:	45 e4       	ldi	r20, 0x45	; 69
		printSharp = ' ';
		break;
    2bd0:	17 c0       	rjmp	.+46     	; 0x2c00 <midiNotePrinter+0x84>
		
		case 5:
		printLetter = 'F';
		printSharp = ' ';
    2bd2:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'E';
		printSharp = ' ';
		break;
		
		case 5:
		printLetter = 'F';
    2bd4:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = ' ';
		break;
    2bd6:	14 c0       	rjmp	.+40     	; 0x2c00 <midiNotePrinter+0x84>
		
		case 6:
		printLetter = 'F';
		printSharp = '#';
    2bd8:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'F';
		printSharp = ' ';
		break;
		
		case 6:
		printLetter = 'F';
    2bda:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = '#';
		break;
    2bdc:	11 c0       	rjmp	.+34     	; 0x2c00 <midiNotePrinter+0x84>
		
		case 7:
		printLetter = 'G';
		printSharp = ' ';
    2bde:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'F';
		printSharp = '#';
		break;
		
		case 7:
		printLetter = 'G';
    2be0:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = ' ';
		break;
    2be2:	0e c0       	rjmp	.+28     	; 0x2c00 <midiNotePrinter+0x84>
		
		case 8:
		printLetter = 'G';
		printSharp = '#';
    2be4:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'G';
		printSharp = ' ';
		break;
		
		case 8:
		printLetter = 'G';
    2be6:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = '#';
		break;
    2be8:	0b c0       	rjmp	.+22     	; 0x2c00 <midiNotePrinter+0x84>
		
		case 9:
		printLetter = 'A';
		printSharp = ' ';
    2bea:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'G';
		printSharp = '#';
		break;
		
		case 9:
		printLetter = 'A';
    2bec:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = ' ';
		break;
    2bee:	08 c0       	rjmp	.+16     	; 0x2c00 <midiNotePrinter+0x84>
		
		case 10:
		printLetter = 'A';
		printSharp = '#';
    2bf0:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'A';
		printSharp = ' ';
		break;
		
		case 10:
		printLetter = 'A';
    2bf2:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = '#';
		break;
    2bf4:	05 c0       	rjmp	.+10     	; 0x2c00 <midiNotePrinter+0x84>
		
		case 11:
		printLetter = 'B';
		printSharp = ' ';
    2bf6:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'A';
		printSharp = '#';
		break;
		
		case 11:
		printLetter = 'B';
    2bf8:	42 e4       	ldi	r20, 0x42	; 66
		printSharp = ' ';
		break;
    2bfa:	02 c0       	rjmp	.+4      	; 0x2c00 <midiNotePrinter+0x84>
void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
	char printNumber = 0;
	char printSharp = 0;
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
}

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
    2bfe:	40 e0       	ldi	r20, 0x00	; 0
		printLetter = 'B';
		printSharp = ' ';
		break;
		
	}
	charArray[startingPosition] = printLetter;
    2c00:	f9 01       	movw	r30, r18
    2c02:	ea 0f       	add	r30, r26
    2c04:	f1 1d       	adc	r31, r1
    2c06:	40 83       	st	Z, r20
	charArray[startingPosition+1]= printSharp;
    2c08:	81 83       	std	Z+1, r24	; 0x01
	charArray[startingPosition+2]= printNumber;
    2c0a:	92 83       	std	Z+2, r25	; 0x02
    2c0c:	08 95       	ret

00002c0e <updateSequencer>:
//	clockCounter++;
	//we don't want to do anything else here.
//}

void updateSequencer(Pattern sequencerPattern, Globals *currentGlobals)
{
    2c0e:	af 92       	push	r10
    2c10:	bf 92       	push	r11
    2c12:	cf 92       	push	r12
    2c14:	df 92       	push	r13
    2c16:	ef 92       	push	r14
    2c18:	ff 92       	push	r15
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	c7 57       	subi	r28, 0x77	; 119
    2c28:	de 4f       	sbci	r29, 0xFE	; 254
    2c2a:	c8 80       	ld	r12, Y
    2c2c:	d9 80       	ldd	r13, Y+1	; 0x01
    2c2e:	c9 58       	subi	r28, 0x89	; 137
    2c30:	d1 40       	sbci	r29, 0x01	; 1
	uint16_t BPMvar = 150000/(sequencerPattern.patternBPM);

	if(currentGlobals->clockCounter>=BPMvar && currentGlobals->playState) //if playstate is on, play next note in sequence.
    2c32:	ca 52       	subi	r28, 0x2A	; 42
    2c34:	df 4f       	sbci	r29, 0xFF	; 255
    2c36:	28 81       	ld	r18, Y
    2c38:	39 81       	ldd	r19, Y+1	; 0x01
    2c3a:	c6 5d       	subi	r28, 0xD6	; 214
    2c3c:	d0 40       	sbci	r29, 0x00	; 0
    2c3e:	40 e0       	ldi	r20, 0x00	; 0
    2c40:	50 e0       	ldi	r21, 0x00	; 0
    2c42:	60 ef       	ldi	r22, 0xF0	; 240
    2c44:	79 e4       	ldi	r23, 0x49	; 73
    2c46:	82 e0       	ldi	r24, 0x02	; 2
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <__divmodsi4>
    2c4e:	f6 01       	movw	r30, r12
    2c50:	e5 51       	subi	r30, 0x15	; 21
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	80 81       	ld	r24, Z
    2c56:	91 81       	ldd	r25, Z+1	; 0x01
    2c58:	82 17       	cp	r24, r18
    2c5a:	93 07       	cpc	r25, r19
    2c5c:	08 f4       	brcc	.+2      	; 0x2c60 <updateSequencer+0x52>
    2c5e:	5a c0       	rjmp	.+180    	; 0x2d14 <updateSequencer+0x106>
    2c60:	f6 01       	movw	r30, r12
    2c62:	83 85       	ldd	r24, Z+11	; 0x0b
    2c64:	88 23       	and	r24, r24
    2c66:	09 f4       	brne	.+2      	; 0x2c6a <updateSequencer+0x5c>
    2c68:	4b c0       	rjmp	.+150    	; 0x2d00 <updateSequencer+0xf2>
	{
		//this will be where we play samples
		currentGlobals->clockCounter = 0;
    2c6a:	e5 51       	subi	r30, 0x15	; 21
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	11 82       	std	Z+1, r1	; 0x01
    2c70:	10 82       	st	Z, r1
		currentGlobals->currentTrigSequencer = 0; //we want to re-set this every time. 
    2c72:	f6 01       	movw	r30, r12
    2c74:	14 82       	std	Z+4, r1	; 0x04
    2c76:	13 82       	std	Z+3, r1	; 0x03
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
    2c78:	e0 91 06 04 	lds	r30, 0x0406	; 0x800406 <currentPlayStep>
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	ee 0f       	add	r30, r30
    2c80:	ff 1f       	adc	r31, r31
    2c82:	8e e0       	ldi	r24, 0x0E	; 14
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	8c 0f       	add	r24, r28
    2c88:	9d 1f       	adc	r25, r29
    2c8a:	e8 0f       	add	r30, r24
    2c8c:	f9 1f       	adc	r31, r25
    2c8e:	e5 50       	subi	r30, 0x05	; 5
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	e0 80       	ld	r14, Z
    2c94:	f1 80       	ldd	r15, Z+1	; 0x01
    2c96:	00 e0       	ldi	r16, 0x00	; 0
    2c98:	10 e0       	ldi	r17, 0x00	; 0
		{//we're going to loop through all of the possible tracks, and trigger them
			if((parseStep&1)==1)
			{
				//trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
				playTrack(&sequencerPattern, currentGlobals, sc);
				currentGlobals->currentTrigSequencer |= (1<<sc); //start to fill our lighting buffer. 
    2c9a:	aa 24       	eor	r10, r10
    2c9c:	a3 94       	inc	r10
    2c9e:	b1 2c       	mov	r11, r1
		currentGlobals->clockCounter = 0;
		currentGlobals->currentTrigSequencer = 0; //we want to re-set this every time. 
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
		{//we're going to loop through all of the possible tracks, and trigger them
			if((parseStep&1)==1)
    2ca0:	e0 fe       	sbrs	r14, 0
    2ca2:	13 c0       	rjmp	.+38     	; 0x2cca <updateSequencer+0xbc>
			{
				//trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
				playTrack(&sequencerPattern, currentGlobals, sc);
    2ca4:	40 2f       	mov	r20, r16
    2ca6:	b6 01       	movw	r22, r12
    2ca8:	ce 01       	movw	r24, r28
    2caa:	0e 96       	adiw	r24, 0x0e	; 14
    2cac:	7d d1       	rcall	.+762    	; 0x2fa8 <playTrack>
				currentGlobals->currentTrigSequencer |= (1<<sc); //start to fill our lighting buffer. 
    2cae:	f6 01       	movw	r30, r12
    2cb0:	23 81       	ldd	r18, Z+3	; 0x03
    2cb2:	34 81       	ldd	r19, Z+4	; 0x04
    2cb4:	c5 01       	movw	r24, r10
    2cb6:	00 2e       	mov	r0, r16
    2cb8:	02 c0       	rjmp	.+4      	; 0x2cbe <updateSequencer+0xb0>
    2cba:	88 0f       	add	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	0a 94       	dec	r0
    2cc0:	e2 f7       	brpl	.-8      	; 0x2cba <updateSequencer+0xac>
    2cc2:	82 2b       	or	r24, r18
    2cc4:	93 2b       	or	r25, r19
    2cc6:	94 83       	std	Z+4, r25	; 0x04
    2cc8:	83 83       	std	Z+3, r24	; 0x03
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
    2cca:	f6 94       	lsr	r15
    2ccc:	e7 94       	ror	r14
    2cce:	0f 5f       	subi	r16, 0xFF	; 255
    2cd0:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		//this will be where we play samples
		currentGlobals->clockCounter = 0;
		currentGlobals->currentTrigSequencer = 0; //we want to re-set this every time. 
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
    2cd2:	00 31       	cpi	r16, 0x10	; 16
    2cd4:	11 05       	cpc	r17, r1
    2cd6:	21 f7       	brne	.-56     	; 0x2ca0 <updateSequencer+0x92>
				playTrack(&sequencerPattern, currentGlobals, sc);
				currentGlobals->currentTrigSequencer |= (1<<sc); //start to fill our lighting buffer. 
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
		}
		currentPlayStep = currentPlayStep+1;
    2cd8:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <currentPlayStep>
    2cdc:	8f 5f       	subi	r24, 0xFF	; 255
    2cde:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <currentPlayStep>
		if(currentPlayStep>(sequencerPattern.numSteps-1))
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	c8 52       	subi	r28, 0x28	; 40
    2ce6:	df 4f       	sbci	r29, 0xFF	; 255
    2ce8:	28 81       	ld	r18, Y
    2cea:	c8 5d       	subi	r28, 0xD8	; 216
    2cec:	d0 40       	sbci	r29, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	21 50       	subi	r18, 0x01	; 1
    2cf2:	31 09       	sbc	r19, r1
    2cf4:	28 17       	cp	r18, r24
    2cf6:	39 07       	cpc	r19, r25
    2cf8:	6c f4       	brge	.+26     	; 0x2d14 <updateSequencer+0x106>
		{
			currentPlayStep=0; // don't play more steps than are in the sequence.
    2cfa:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <currentPlayStep>
    2cfe:	0a c0       	rjmp	.+20     	; 0x2d14 <updateSequencer+0x106>
		}
		
	}else if(currentGlobals->clockCounter>=BPMvar && !currentGlobals->playState)
	{ 
		currentPlayStep=0;
    2d00:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <currentPlayStep>
		currentGlobals->clockCounter = 0;
    2d04:	f6 01       	movw	r30, r12
    2d06:	e5 51       	subi	r30, 0x15	; 21
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	11 82       	std	Z+1, r1	; 0x01
    2d0c:	10 82       	st	Z, r1
		currentGlobals->currentTrigSequencer=0;
    2d0e:	f6 01       	movw	r30, r12
    2d10:	14 82       	std	Z+4, r1	; 0x04
    2d12:	13 82       	std	Z+3, r1	; 0x03
	}
	
}
    2d14:	df 91       	pop	r29
    2d16:	cf 91       	pop	r28
    2d18:	1f 91       	pop	r17
    2d1a:	0f 91       	pop	r16
    2d1c:	ff 90       	pop	r15
    2d1e:	ef 90       	pop	r14
    2d20:	df 90       	pop	r13
    2d22:	cf 90       	pop	r12
    2d24:	bf 90       	pop	r11
    2d26:	af 90       	pop	r10
    2d28:	08 95       	ret

00002d2a <__vector_27>:
char serial0Buffer[TX_BUFFER_SIZE];
int serialReadPos = 0;
int serialWritePos = 0;

ISR (USART0_TX_vect)
{
    2d2a:	1f 92       	push	r1
    2d2c:	0f 92       	push	r0
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	0f 92       	push	r0
    2d32:	11 24       	eor	r1, r1
    2d34:	0b b6       	in	r0, 0x3b	; 59
    2d36:	0f 92       	push	r0
    2d38:	2f 93       	push	r18
    2d3a:	3f 93       	push	r19
    2d3c:	8f 93       	push	r24
    2d3e:	9f 93       	push	r25
    2d40:	ef 93       	push	r30
    2d42:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
    2d44:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <serialReadPos>
    2d48:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <serialReadPos+0x1>
    2d4c:	20 91 07 04 	lds	r18, 0x0407	; 0x800407 <serialWritePos>
    2d50:	30 91 08 04 	lds	r19, 0x0408	; 0x800408 <serialWritePos+0x1>
    2d54:	82 17       	cp	r24, r18
    2d56:	93 07       	cpc	r25, r19
    2d58:	c1 f0       	breq	.+48     	; 0x2d8a <__vector_27+0x60>
	{
		UDR0 = serial0Buffer[serialReadPos];
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	e5 56       	subi	r30, 0x65	; 101
    2d5e:	f9 4f       	sbci	r31, 0xF9	; 249
    2d60:	80 81       	ld	r24, Z
    2d62:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
    2d66:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <serialReadPos>
    2d6a:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <serialReadPos+0x1>
    2d6e:	01 96       	adiw	r24, 0x01	; 1

		if(serialReadPos >= TX_BUFFER_SIZE)
    2d70:	80 38       	cpi	r24, 0x80	; 128
    2d72:	21 e0       	ldi	r18, 0x01	; 1
    2d74:	92 07       	cpc	r25, r18
    2d76:	2c f4       	brge	.+10     	; 0x2d82 <__vector_27+0x58>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
    2d78:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <serialReadPos+0x1>
    2d7c:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <serialReadPos>
    2d80:	04 c0       	rjmp	.+8      	; 0x2d8a <__vector_27+0x60>

		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
    2d82:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <serialReadPos+0x1>
    2d86:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <serialReadPos>
		}
	}
}
    2d8a:	ff 91       	pop	r31
    2d8c:	ef 91       	pop	r30
    2d8e:	9f 91       	pop	r25
    2d90:	8f 91       	pop	r24
    2d92:	3f 91       	pop	r19
    2d94:	2f 91       	pop	r18
    2d96:	0f 90       	pop	r0
    2d98:	0b be       	out	0x3b, r0	; 59
    2d9a:	0f 90       	pop	r0
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	0f 90       	pop	r0
    2da0:	1f 90       	pop	r1
    2da2:	18 95       	reti

00002da4 <appendSerial0>:

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
    2da4:	20 91 07 04 	lds	r18, 0x0407	; 0x800407 <serialWritePos>
    2da8:	30 91 08 04 	lds	r19, 0x0408	; 0x800408 <serialWritePos+0x1>
    2dac:	f9 01       	movw	r30, r18
    2dae:	e5 56       	subi	r30, 0x65	; 101
    2db0:	f9 4f       	sbci	r31, 0xF9	; 249
    2db2:	80 83       	st	Z, r24
	serialWritePos++;
    2db4:	2f 5f       	subi	r18, 0xFF	; 255
    2db6:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    2db8:	20 38       	cpi	r18, 0x80	; 128
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	38 07       	cpc	r19, r24
    2dbe:	2c f4       	brge	.+10     	; 0x2dca <appendSerial0+0x26>
}

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    2dc0:	30 93 08 04 	sts	0x0408, r19	; 0x800408 <serialWritePos+0x1>
    2dc4:	20 93 07 04 	sts	0x0407, r18	; 0x800407 <serialWritePos>
    2dc8:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    2dca:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <serialWritePos+0x1>
    2dce:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <serialWritePos>
    2dd2:	08 95       	ret

00002dd4 <serialWrite0>:
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
    2dd4:	0f 93       	push	r16
    2dd6:	1f 93       	push	r17
    2dd8:	cf 93       	push	r28
    2dda:	df 93       	push	r29
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2ddc:	66 23       	and	r22, r22
    2dde:	69 f0       	breq	.+26     	; 0x2dfa <serialWrite0+0x26>
    2de0:	ec 01       	movw	r28, r24
    2de2:	61 50       	subi	r22, 0x01	; 1
    2de4:	06 2f       	mov	r16, r22
    2de6:	10 e0       	ldi	r17, 0x00	; 0
    2de8:	0f 5f       	subi	r16, 0xFF	; 255
    2dea:	1f 4f       	sbci	r17, 0xFF	; 255
    2dec:	08 0f       	add	r16, r24
    2dee:	19 1f       	adc	r17, r25
	{
		appendSerial0(c[i]);
    2df0:	89 91       	ld	r24, Y+
    2df2:	d8 df       	rcall	.-80     	; 0x2da4 <appendSerial0>
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2df4:	c0 17       	cp	r28, r16
    2df6:	d1 07       	cpc	r29, r17
    2df8:	d9 f7       	brne	.-10     	; 0x2df0 <serialWrite0+0x1c>
	{
		appendSerial0(c[i]);

	}

	if(UCSR0A & (1 << UDRE0))
    2dfa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2dfe:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    2e00:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    2e04:	df 91       	pop	r29
    2e06:	cf 91       	pop	r28
    2e08:	1f 91       	pop	r17
    2e0a:	0f 91       	pop	r16
    2e0c:	08 95       	ret

00002e0e <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    2e0e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    2e12:	80 e1       	ldi	r24, 0x10	; 16
    2e14:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>


UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    2e18:	88 e4       	ldi	r24, 0x48	; 72
    2e1a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    2e1e:	86 e0       	ldi	r24, 0x06	; 6
    2e20:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    2e24:	08 95       	ret

00002e26 <trackControl>:
		//this should be fine for now though. 
			//set track volume
			setTrackVolume(currentPattern->trackSampleLSB[i], currentPattern->trackSampleMSB[i], currentPattern->trackMainVolumeLSB[i], currentPattern->trackMainVolumeMSB[i]);
	}
	
}
    2e26:	cf 93       	push	r28
    2e28:	df 93       	push	r29
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
    2e2e:	2a 97       	sbiw	r28, 0x0a	; 10
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	90 ef       	ldi	r25, 0xF0	; 240
    2e3c:	99 83       	std	Y+1, r25	; 0x01
    2e3e:	9a ea       	ldi	r25, 0xAA	; 170
    2e40:	9a 83       	std	Y+2, r25	; 0x02
    2e42:	9a e0       	ldi	r25, 0x0A	; 10
    2e44:	9b 83       	std	Y+3, r25	; 0x03
    2e46:	93 e0       	ldi	r25, 0x03	; 3
    2e48:	9c 83       	std	Y+4, r25	; 0x04
    2e4a:	2d 83       	std	Y+5, r18	; 0x05
    2e4c:	8e 83       	std	Y+6, r24	; 0x06
    2e4e:	6f 83       	std	Y+7, r22	; 0x07
    2e50:	48 87       	std	Y+8, r20	; 0x08
    2e52:	19 86       	std	Y+9, r1	; 0x09
    2e54:	85 e5       	ldi	r24, 0x55	; 85
    2e56:	8a 87       	std	Y+10, r24	; 0x0a
    2e58:	6a e0       	ldi	r22, 0x0A	; 10
    2e5a:	ce 01       	movw	r24, r28
    2e5c:	01 96       	adiw	r24, 0x01	; 1
    2e5e:	ba df       	rcall	.-140    	; 0x2dd4 <serialWrite0>
    2e60:	2a 96       	adiw	r28, 0x0a	; 10
    2e62:	0f b6       	in	r0, 0x3f	; 63
    2e64:	f8 94       	cli
    2e66:	de bf       	out	0x3e, r29	; 62
    2e68:	0f be       	out	0x3f, r0	; 63
    2e6a:	cd bf       	out	0x3d, r28	; 61
    2e6c:	df 91       	pop	r29
    2e6e:	cf 91       	pop	r28
    2e70:	08 95       	ret

00002e72 <setOutputVolume>:
    2e72:	cf 93       	push	r28
    2e74:	df 93       	push	r29
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
    2e7a:	28 97       	sbiw	r28, 0x08	; 8
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	90 ef       	ldi	r25, 0xF0	; 240
    2e88:	99 83       	std	Y+1, r25	; 0x01
    2e8a:	9a ea       	ldi	r25, 0xAA	; 170
    2e8c:	9a 83       	std	Y+2, r25	; 0x02
    2e8e:	98 e0       	ldi	r25, 0x08	; 8
    2e90:	9b 83       	std	Y+3, r25	; 0x03
    2e92:	95 e0       	ldi	r25, 0x05	; 5
    2e94:	9c 83       	std	Y+4, r25	; 0x04
    2e96:	4d 83       	std	Y+5, r20	; 0x05
    2e98:	8e 83       	std	Y+6, r24	; 0x06
    2e9a:	6f 83       	std	Y+7, r22	; 0x07
    2e9c:	85 e5       	ldi	r24, 0x55	; 85
    2e9e:	88 87       	std	Y+8, r24	; 0x08
    2ea0:	68 e0       	ldi	r22, 0x08	; 8
    2ea2:	ce 01       	movw	r24, r28
    2ea4:	01 96       	adiw	r24, 0x01	; 1
    2ea6:	96 df       	rcall	.-212    	; 0x2dd4 <serialWrite0>
    2ea8:	28 96       	adiw	r28, 0x08	; 8
    2eaa:	0f b6       	in	r0, 0x3f	; 63
    2eac:	f8 94       	cli
    2eae:	de bf       	out	0x3e, r29	; 62
    2eb0:	0f be       	out	0x3f, r0	; 63
    2eb2:	cd bf       	out	0x3d, r28	; 61
    2eb4:	df 91       	pop	r29
    2eb6:	cf 91       	pop	r28
    2eb8:	08 95       	ret

00002eba <setTrackVolume>:
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	29 97       	sbiw	r28, 0x09	; 9
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	f8 94       	cli
    2ec8:	de bf       	out	0x3e, r29	; 62
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	cd bf       	out	0x3d, r28	; 61
    2ece:	90 ef       	ldi	r25, 0xF0	; 240
    2ed0:	99 83       	std	Y+1, r25	; 0x01
    2ed2:	9a ea       	ldi	r25, 0xAA	; 170
    2ed4:	9a 83       	std	Y+2, r25	; 0x02
    2ed6:	99 e0       	ldi	r25, 0x09	; 9
    2ed8:	9b 83       	std	Y+3, r25	; 0x03
    2eda:	98 e0       	ldi	r25, 0x08	; 8
    2edc:	9c 83       	std	Y+4, r25	; 0x04
    2ede:	8d 83       	std	Y+5, r24	; 0x05
    2ee0:	6e 83       	std	Y+6, r22	; 0x06
    2ee2:	4f 83       	std	Y+7, r20	; 0x07
    2ee4:	28 87       	std	Y+8, r18	; 0x08
    2ee6:	85 e5       	ldi	r24, 0x55	; 85
    2ee8:	89 87       	std	Y+9, r24	; 0x09
    2eea:	69 e0       	ldi	r22, 0x09	; 9
    2eec:	ce 01       	movw	r24, r28
    2eee:	01 96       	adiw	r24, 0x01	; 1
    2ef0:	71 df       	rcall	.-286    	; 0x2dd4 <serialWrite0>
    2ef2:	29 96       	adiw	r28, 0x09	; 9
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	f8 94       	cli
    2ef8:	de bf       	out	0x3e, r29	; 62
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	cd bf       	out	0x3d, r28	; 61
    2efe:	df 91       	pop	r29
    2f00:	cf 91       	pop	r28
    2f02:	08 95       	ret

00002f04 <setTrackFade>:
    2f04:	cf 92       	push	r12
    2f06:	ef 92       	push	r14
    2f08:	0f 93       	push	r16
    2f0a:	cf 93       	push	r28
    2f0c:	df 93       	push	r29
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	2c 97       	sbiw	r28, 0x0c	; 12
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	90 ef       	ldi	r25, 0xF0	; 240
    2f20:	99 83       	std	Y+1, r25	; 0x01
    2f22:	9a ea       	ldi	r25, 0xAA	; 170
    2f24:	9a 83       	std	Y+2, r25	; 0x02
    2f26:	9c e0       	ldi	r25, 0x0C	; 12
    2f28:	9b 83       	std	Y+3, r25	; 0x03
    2f2a:	9a e0       	ldi	r25, 0x0A	; 10
    2f2c:	9c 83       	std	Y+4, r25	; 0x04
    2f2e:	8d 83       	std	Y+5, r24	; 0x05
    2f30:	6e 83       	std	Y+6, r22	; 0x06
    2f32:	4f 83       	std	Y+7, r20	; 0x07
    2f34:	28 87       	std	Y+8, r18	; 0x08
    2f36:	09 87       	std	Y+9, r16	; 0x09
    2f38:	ea 86       	std	Y+10, r14	; 0x0a
    2f3a:	cb 86       	std	Y+11, r12	; 0x0b
    2f3c:	85 e5       	ldi	r24, 0x55	; 85
    2f3e:	8c 87       	std	Y+12, r24	; 0x0c
    2f40:	6c e0       	ldi	r22, 0x0C	; 12
    2f42:	ce 01       	movw	r24, r28
    2f44:	01 96       	adiw	r24, 0x01	; 1
    2f46:	46 df       	rcall	.-372    	; 0x2dd4 <serialWrite0>
    2f48:	2c 96       	adiw	r28, 0x0c	; 12
    2f4a:	0f b6       	in	r0, 0x3f	; 63
    2f4c:	f8 94       	cli
    2f4e:	de bf       	out	0x3e, r29	; 62
    2f50:	0f be       	out	0x3f, r0	; 63
    2f52:	cd bf       	out	0x3d, r28	; 61
    2f54:	df 91       	pop	r29
    2f56:	cf 91       	pop	r28
    2f58:	0f 91       	pop	r16
    2f5a:	ef 90       	pop	r14
    2f5c:	cf 90       	pop	r12
    2f5e:	08 95       	ret

00002f60 <outputSampleRate>:
    2f60:	cf 93       	push	r28
    2f62:	df 93       	push	r29
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	28 97       	sbiw	r28, 0x08	; 8
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	90 ef       	ldi	r25, 0xF0	; 240
    2f76:	99 83       	std	Y+1, r25	; 0x01
    2f78:	9a ea       	ldi	r25, 0xAA	; 170
    2f7a:	9a 83       	std	Y+2, r25	; 0x02
    2f7c:	98 e0       	ldi	r25, 0x08	; 8
    2f7e:	9b 83       	std	Y+3, r25	; 0x03
    2f80:	9c e0       	ldi	r25, 0x0C	; 12
    2f82:	9c 83       	std	Y+4, r25	; 0x04
    2f84:	8d 83       	std	Y+5, r24	; 0x05
    2f86:	6e 83       	std	Y+6, r22	; 0x06
    2f88:	4f 83       	std	Y+7, r20	; 0x07
    2f8a:	85 e5       	ldi	r24, 0x55	; 85
    2f8c:	88 87       	std	Y+8, r24	; 0x08
    2f8e:	68 e0       	ldi	r22, 0x08	; 8
    2f90:	ce 01       	movw	r24, r28
    2f92:	01 96       	adiw	r24, 0x01	; 1
    2f94:	1f df       	rcall	.-450    	; 0x2dd4 <serialWrite0>
    2f96:	28 96       	adiw	r28, 0x08	; 8
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	f8 94       	cli
    2f9c:	de bf       	out	0x3e, r29	; 62
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	cd bf       	out	0x3d, r28	; 61
    2fa2:	df 91       	pop	r29
    2fa4:	cf 91       	pop	r28
    2fa6:	08 95       	ret

00002fa8 <playTrack>:
    2fa8:	2f 92       	push	r2
    2faa:	3f 92       	push	r3
    2fac:	4f 92       	push	r4
    2fae:	5f 92       	push	r5
    2fb0:	6f 92       	push	r6
    2fb2:	7f 92       	push	r7
    2fb4:	8f 92       	push	r8
    2fb6:	9f 92       	push	r9
    2fb8:	af 92       	push	r10
    2fba:	bf 92       	push	r11
    2fbc:	cf 92       	push	r12
    2fbe:	ef 92       	push	r14
    2fc0:	0f 93       	push	r16
    2fc2:	1f 93       	push	r17
    2fc4:	cf 93       	push	r28
    2fc6:	df 93       	push	r29
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <playTrack+0x22>
    2fca:	1f 92       	push	r1
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
    2fd0:	4b 01       	movw	r8, r22
    2fd2:	14 2f       	mov	r17, r20
    2fd4:	a4 2e       	mov	r10, r20
    2fd6:	b1 2c       	mov	r11, r1
    2fd8:	fc 01       	movw	r30, r24
    2fda:	ea 0d       	add	r30, r10
    2fdc:	fb 1d       	adc	r31, r11
    2fde:	e5 51       	subi	r30, 0x15	; 21
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	20 81       	ld	r18, Z
    2fe4:	21 30       	cpi	r18, 0x01	; 1
    2fe6:	09 f4       	brne	.+2      	; 0x2fea <playTrack+0x42>
    2fe8:	8c c0       	rjmp	.+280    	; 0x3102 <playTrack+0x15a>
    2fea:	38 f0       	brcs	.+14     	; 0x2ffa <playTrack+0x52>
    2fec:	22 30       	cpi	r18, 0x02	; 2
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <playTrack+0x4a>
    2ff0:	df c0       	rjmp	.+446    	; 0x31b0 <playTrack+0x208>
    2ff2:	23 30       	cpi	r18, 0x03	; 3
    2ff4:	09 f4       	brne	.+2      	; 0x2ff8 <playTrack+0x50>
    2ff6:	0c c1       	rjmp	.+536    	; 0x3210 <playTrack+0x268>
    2ff8:	1f c1       	rjmp	.+574    	; 0x3238 <playTrack+0x290>
    2ffa:	9c 01       	movw	r18, r24
    2ffc:	2a 0d       	add	r18, r10
    2ffe:	3b 1d       	adc	r19, r11
    3000:	3c 83       	std	Y+4, r19	; 0x04
    3002:	2b 83       	std	Y+3, r18	; 0x03
    3004:	f9 01       	movw	r30, r18
    3006:	e8 57       	subi	r30, 0x78	; 120
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	29 01       	movw	r4, r18
    300c:	38 e9       	ldi	r19, 0x98	; 152
    300e:	43 0e       	add	r4, r19
    3010:	51 1c       	adc	r5, r1
    3012:	6b 80       	ldd	r6, Y+3	; 0x03
    3014:	7c 80       	ldd	r7, Y+4	; 0x04
    3016:	88 ea       	ldi	r24, 0xA8	; 168
    3018:	68 0e       	add	r6, r24
    301a:	71 1c       	adc	r7, r1
    301c:	20 81       	ld	r18, Z
    301e:	ab 81       	ldd	r26, Y+3	; 0x03
    3020:	bc 81       	ldd	r27, Y+4	; 0x04
    3022:	58 96       	adiw	r26, 0x18	; 24
    3024:	4c 91       	ld	r20, X
    3026:	f2 01       	movw	r30, r4
    3028:	60 81       	ld	r22, Z
    302a:	d3 01       	movw	r26, r6
    302c:	8c 91       	ld	r24, X
    302e:	fb de       	rcall	.-522    	; 0x2e26 <trackControl>
    3030:	2b 80       	ldd	r2, Y+3	; 0x03
    3032:	3c 80       	ldd	r3, Y+4	; 0x04
    3034:	b8 e4       	ldi	r27, 0x48	; 72
    3036:	2b 0e       	add	r2, r27
    3038:	31 1c       	adc	r3, r1
    303a:	eb 81       	ldd	r30, Y+3	; 0x03
    303c:	fc 81       	ldd	r31, Y+4	; 0x04
    303e:	e8 5a       	subi	r30, 0xA8	; 168
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	fa 83       	std	Y+2, r31	; 0x02
    3044:	e9 83       	std	Y+1, r30	; 0x01
    3046:	c1 2c       	mov	r12, r1
    3048:	d1 01       	movw	r26, r2
    304a:	ec 90       	ld	r14, X
    304c:	00 81       	ld	r16, Z
    304e:	eb 81       	ldd	r30, Y+3	; 0x03
    3050:	fc 81       	ldd	r31, Y+4	; 0x04
    3052:	20 a5       	ldd	r18, Z+40	; 0x28
    3054:	40 ad       	ldd	r20, Z+56	; 0x38
    3056:	d2 01       	movw	r26, r4
    3058:	6c 91       	ld	r22, X
    305a:	f3 01       	movw	r30, r6
    305c:	80 81       	ld	r24, Z
    305e:	52 df       	rcall	.-348    	; 0x2f04 <setTrackFade>
    3060:	f4 01       	movw	r30, r8
    3062:	e7 55       	subi	r30, 0x57	; 87
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	02 c0       	rjmp	.+4      	; 0x3070 <playTrack+0xc8>
    306c:	88 0f       	add	r24, r24
    306e:	99 1f       	adc	r25, r25
    3070:	1a 95       	dec	r17
    3072:	e2 f7       	brpl	.-8      	; 0x306c <playTrack+0xc4>
    3074:	20 81       	ld	r18, Z
    3076:	31 81       	ldd	r19, Z+1	; 0x01
    3078:	82 2b       	or	r24, r18
    307a:	93 2b       	or	r25, r19
    307c:	91 83       	std	Z+1, r25	; 0x01
    307e:	80 83       	st	Z, r24
    3080:	f5 01       	movw	r30, r10
    3082:	ee 0f       	add	r30, r30
    3084:	ff 1f       	adc	r31, r31
    3086:	ee 0f       	add	r30, r30
    3088:	ff 1f       	adc	r31, r31
    308a:	e8 0d       	add	r30, r8
    308c:	f9 1d       	adc	r31, r9
    308e:	e5 55       	subi	r30, 0x55	; 85
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	ab 81       	ldd	r26, Y+3	; 0x03
    3094:	bc 81       	ldd	r27, Y+4	; 0x04
    3096:	a5 53       	subi	r26, 0x35	; 53
    3098:	bf 4f       	sbci	r27, 0xFF	; 255
    309a:	2c 91       	ld	r18, X
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	32 2f       	mov	r19, r18
    30a0:	22 27       	eor	r18, r18
    30a2:	8b 81       	ldd	r24, Y+3	; 0x03
    30a4:	9c 81       	ldd	r25, Y+4	; 0x04
    30a6:	85 52       	subi	r24, 0x25	; 37
    30a8:	9f 4f       	sbci	r25, 0xFF	; 255
    30aa:	dc 01       	movw	r26, r24
    30ac:	8c 91       	ld	r24, X
    30ae:	a9 01       	movw	r20, r18
    30b0:	48 2b       	or	r20, r24
    30b2:	d1 01       	movw	r26, r2
    30b4:	8c 91       	ld	r24, X
    30b6:	28 2f       	mov	r18, r24
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	32 2f       	mov	r19, r18
    30bc:	22 27       	eor	r18, r18
    30be:	a9 81       	ldd	r26, Y+1	; 0x01
    30c0:	ba 81       	ldd	r27, Y+2	; 0x02
    30c2:	8c 91       	ld	r24, X
    30c4:	28 2b       	or	r18, r24
    30c6:	24 0f       	add	r18, r20
    30c8:	35 1f       	adc	r19, r21
    30ca:	c9 01       	movw	r24, r18
    30cc:	88 0f       	add	r24, r24
    30ce:	99 1f       	adc	r25, r25
    30d0:	22 0f       	add	r18, r18
    30d2:	33 1f       	adc	r19, r19
    30d4:	22 0f       	add	r18, r18
    30d6:	33 1f       	adc	r19, r19
    30d8:	22 0f       	add	r18, r18
    30da:	33 1f       	adc	r19, r19
    30dc:	28 0f       	add	r18, r24
    30de:	39 1f       	adc	r19, r25
    30e0:	d4 01       	movw	r26, r8
    30e2:	ab 55       	subi	r26, 0x5B	; 91
    30e4:	bf 4f       	sbci	r27, 0xFF	; 255
    30e6:	8d 91       	ld	r24, X+
    30e8:	9d 91       	ld	r25, X+
    30ea:	0d 90       	ld	r0, X+
    30ec:	bc 91       	ld	r27, X
    30ee:	a0 2d       	mov	r26, r0
    30f0:	82 0f       	add	r24, r18
    30f2:	93 1f       	adc	r25, r19
    30f4:	a1 1d       	adc	r26, r1
    30f6:	b1 1d       	adc	r27, r1
    30f8:	80 83       	st	Z, r24
    30fa:	91 83       	std	Z+1, r25	; 0x01
    30fc:	a2 83       	std	Z+2, r26	; 0x02
    30fe:	b3 83       	std	Z+3, r27	; 0x03
    3100:	9b c0       	rjmp	.+310    	; 0x3238 <playTrack+0x290>
    3102:	3c 01       	movw	r6, r24
    3104:	6a 0c       	add	r6, r10
    3106:	7b 1c       	adc	r7, r11
    3108:	c3 01       	movw	r24, r6
    310a:	88 57       	subi	r24, 0x78	; 120
    310c:	9f 4f       	sbci	r25, 0xFF	; 255
    310e:	d3 01       	movw	r26, r6
    3110:	a8 56       	subi	r26, 0x68	; 104
    3112:	bf 4f       	sbci	r27, 0xFF	; 255
    3114:	23 01       	movw	r4, r6
    3116:	e8 ea       	ldi	r30, 0xA8	; 168
    3118:	4e 0e       	add	r4, r30
    311a:	51 1c       	adc	r5, r1
    311c:	fc 01       	movw	r30, r24
    311e:	20 81       	ld	r18, Z
    3120:	f3 01       	movw	r30, r6
    3122:	40 8d       	ldd	r20, Z+24	; 0x18
    3124:	6c 91       	ld	r22, X
    3126:	d2 01       	movw	r26, r4
    3128:	8c 91       	ld	r24, X
    312a:	7d de       	rcall	.-774    	; 0x2e26 <trackControl>
    312c:	f4 01       	movw	r30, r8
    312e:	e7 55       	subi	r30, 0x57	; 87
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	02 c0       	rjmp	.+4      	; 0x313c <playTrack+0x194>
    3138:	88 0f       	add	r24, r24
    313a:	99 1f       	adc	r25, r25
    313c:	1a 95       	dec	r17
    313e:	e2 f7       	brpl	.-8      	; 0x3138 <playTrack+0x190>
    3140:	20 81       	ld	r18, Z
    3142:	31 81       	ldd	r19, Z+1	; 0x01
    3144:	82 2b       	or	r24, r18
    3146:	93 2b       	or	r25, r19
    3148:	91 83       	std	Z+1, r25	; 0x01
    314a:	80 83       	st	Z, r24
    314c:	f5 01       	movw	r30, r10
    314e:	ee 0f       	add	r30, r30
    3150:	ff 1f       	adc	r31, r31
    3152:	ee 0f       	add	r30, r30
    3154:	ff 1f       	adc	r31, r31
    3156:	e8 0d       	add	r30, r8
    3158:	f9 1d       	adc	r31, r9
    315a:	e5 55       	subi	r30, 0x55	; 85
    315c:	ff 4f       	sbci	r31, 0xFF	; 255
    315e:	d3 01       	movw	r26, r6
    3160:	a5 53       	subi	r26, 0x35	; 53
    3162:	bf 4f       	sbci	r27, 0xFF	; 255
    3164:	2c 91       	ld	r18, X
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	32 2f       	mov	r19, r18
    316a:	22 27       	eor	r18, r18
    316c:	c3 01       	movw	r24, r6
    316e:	85 52       	subi	r24, 0x25	; 37
    3170:	9f 4f       	sbci	r25, 0xFF	; 255
    3172:	dc 01       	movw	r26, r24
    3174:	8c 91       	ld	r24, X
    3176:	28 2b       	or	r18, r24
    3178:	c9 01       	movw	r24, r18
    317a:	88 0f       	add	r24, r24
    317c:	99 1f       	adc	r25, r25
    317e:	22 0f       	add	r18, r18
    3180:	33 1f       	adc	r19, r19
    3182:	22 0f       	add	r18, r18
    3184:	33 1f       	adc	r19, r19
    3186:	22 0f       	add	r18, r18
    3188:	33 1f       	adc	r19, r19
    318a:	28 0f       	add	r18, r24
    318c:	39 1f       	adc	r19, r25
    318e:	d4 01       	movw	r26, r8
    3190:	ab 55       	subi	r26, 0x5B	; 91
    3192:	bf 4f       	sbci	r27, 0xFF	; 255
    3194:	8d 91       	ld	r24, X+
    3196:	9d 91       	ld	r25, X+
    3198:	0d 90       	ld	r0, X+
    319a:	bc 91       	ld	r27, X
    319c:	a0 2d       	mov	r26, r0
    319e:	82 0f       	add	r24, r18
    31a0:	93 1f       	adc	r25, r19
    31a2:	a1 1d       	adc	r26, r1
    31a4:	b1 1d       	adc	r27, r1
    31a6:	80 83       	st	Z, r24
    31a8:	91 83       	std	Z+1, r25	; 0x01
    31aa:	a2 83       	std	Z+2, r26	; 0x02
    31ac:	b3 83       	std	Z+3, r27	; 0x03
    31ae:	44 c0       	rjmp	.+136    	; 0x3238 <playTrack+0x290>
    31b0:	fc 01       	movw	r30, r24
    31b2:	ea 0d       	add	r30, r10
    31b4:	fb 1d       	adc	r31, r11
    31b6:	fa 83       	std	Y+2, r31	; 0x02
    31b8:	e9 83       	std	Y+1, r30	; 0x01
    31ba:	e8 57       	subi	r30, 0x78	; 120
    31bc:	ff 4f       	sbci	r31, 0xFF	; 255
    31be:	89 80       	ldd	r8, Y+1	; 0x01
    31c0:	9a 80       	ldd	r9, Y+2	; 0x02
    31c2:	28 e9       	ldi	r18, 0x98	; 152
    31c4:	82 0e       	add	r8, r18
    31c6:	91 1c       	adc	r9, r1
    31c8:	a9 80       	ldd	r10, Y+1	; 0x01
    31ca:	ba 80       	ldd	r11, Y+2	; 0x02
    31cc:	38 ea       	ldi	r19, 0xA8	; 168
    31ce:	a3 0e       	add	r10, r19
    31d0:	b1 1c       	adc	r11, r1
    31d2:	20 81       	ld	r18, Z
    31d4:	a9 81       	ldd	r26, Y+1	; 0x01
    31d6:	ba 81       	ldd	r27, Y+2	; 0x02
    31d8:	58 96       	adiw	r26, 0x18	; 24
    31da:	4c 91       	ld	r20, X
    31dc:	f4 01       	movw	r30, r8
    31de:	60 81       	ld	r22, Z
    31e0:	d5 01       	movw	r26, r10
    31e2:	8c 91       	ld	r24, X
    31e4:	20 de       	rcall	.-960    	; 0x2e26 <trackControl>
    31e6:	a9 81       	ldd	r26, Y+1	; 0x01
    31e8:	ba 81       	ldd	r27, Y+2	; 0x02
    31ea:	a8 5b       	subi	r26, 0xB8	; 184
    31ec:	bf 4f       	sbci	r27, 0xFF	; 255
    31ee:	e9 81       	ldd	r30, Y+1	; 0x01
    31f0:	fa 81       	ldd	r31, Y+2	; 0x02
    31f2:	e8 5a       	subi	r30, 0xA8	; 168
    31f4:	ff 4f       	sbci	r31, 0xFF	; 255
    31f6:	c1 2c       	mov	r12, r1
    31f8:	ec 90       	ld	r14, X
    31fa:	00 81       	ld	r16, Z
    31fc:	e9 81       	ldd	r30, Y+1	; 0x01
    31fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3200:	20 a5       	ldd	r18, Z+40	; 0x28
    3202:	40 ad       	ldd	r20, Z+56	; 0x38
    3204:	d4 01       	movw	r26, r8
    3206:	6c 91       	ld	r22, X
    3208:	f5 01       	movw	r30, r10
    320a:	80 81       	ld	r24, Z
    320c:	7b de       	rcall	.-778    	; 0x2f04 <setTrackFade>
    320e:	14 c0       	rjmp	.+40     	; 0x3238 <playTrack+0x290>
    3210:	a8 0e       	add	r10, r24
    3212:	b9 1e       	adc	r11, r25
    3214:	c5 01       	movw	r24, r10
    3216:	88 57       	subi	r24, 0x78	; 120
    3218:	9f 4f       	sbci	r25, 0xFF	; 255
    321a:	d5 01       	movw	r26, r10
    321c:	a8 56       	subi	r26, 0x68	; 104
    321e:	bf 4f       	sbci	r27, 0xFF	; 255
    3220:	45 01       	movw	r8, r10
    3222:	f8 ea       	ldi	r31, 0xA8	; 168
    3224:	8f 0e       	add	r8, r31
    3226:	91 1c       	adc	r9, r1
    3228:	fc 01       	movw	r30, r24
    322a:	20 81       	ld	r18, Z
    322c:	f5 01       	movw	r30, r10
    322e:	40 8d       	ldd	r20, Z+24	; 0x18
    3230:	6c 91       	ld	r22, X
    3232:	d4 01       	movw	r26, r8
    3234:	8c 91       	ld	r24, X
    3236:	f7 dd       	rcall	.-1042   	; 0x2e26 <trackControl>
    3238:	0f 90       	pop	r0
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	1f 91       	pop	r17
    3246:	0f 91       	pop	r16
    3248:	ef 90       	pop	r14
    324a:	cf 90       	pop	r12
    324c:	bf 90       	pop	r11
    324e:	af 90       	pop	r10
    3250:	9f 90       	pop	r9
    3252:	8f 90       	pop	r8
    3254:	7f 90       	pop	r7
    3256:	6f 90       	pop	r6
    3258:	5f 90       	pop	r5
    325a:	4f 90       	pop	r4
    325c:	3f 90       	pop	r3
    325e:	2f 90       	pop	r2
    3260:	08 95       	ret

00003262 <releaseUpdate>:

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
    3262:	2f 92       	push	r2
    3264:	3f 92       	push	r3
    3266:	4f 92       	push	r4
    3268:	5f 92       	push	r5
    326a:	6f 92       	push	r6
    326c:	7f 92       	push	r7
    326e:	8f 92       	push	r8
    3270:	9f 92       	push	r9
    3272:	af 92       	push	r10
    3274:	bf 92       	push	r11
    3276:	cf 92       	push	r12
    3278:	ef 92       	push	r14
    327a:	0f 93       	push	r16
    327c:	cf 93       	push	r28
    327e:	df 93       	push	r29
    3280:	00 d0       	rcall	.+0      	; 0x3282 <releaseUpdate+0x20>
    3282:	1f 92       	push	r1
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
    3288:	fb 01       	movw	r30, r22
    328a:	e7 55       	subi	r30, 0x57	; 87
    328c:	ff 4f       	sbci	r31, 0xFF	; 255
    328e:	a0 80       	ld	r10, Z
    3290:	b1 80       	ldd	r11, Z+1	; 0x01
    3292:	3b 01       	movw	r6, r22
    3294:	2b ea       	ldi	r18, 0xAB	; 171
    3296:	62 0e       	add	r6, r18
    3298:	71 1c       	adc	r7, r1
    329a:	88 59       	subi	r24, 0x98	; 152
    329c:	9f 4f       	sbci	r25, 0xFF	; 255
    329e:	4c 01       	movw	r8, r24
	
	for(int i = 0; i<16; i++)
    32a0:	1c 82       	std	Y+4, r1	; 0x04
    32a2:	1b 82       	std	Y+3, r1	; 0x03
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])<=(currentGlobals->releaseCounter))
    32a4:	2b 01       	movw	r4, r22
    32a6:	85 ea       	ldi	r24, 0xA5	; 165
    32a8:	48 0e       	add	r4, r24
    32aa:	51 1c       	adc	r5, r1
			{
				//we need to do the release state here.
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],186,255,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
				currentGlobals->releaseTracker = currentGlobals->releaseTracker&(~(1<<i)); //turn off that track, so release stage does not play again. 
    32ac:	fa 83       	std	Y+2, r31	; 0x02
    32ae:	e9 83       	std	Y+1, r30	; 0x01
    32b0:	22 24       	eor	r2, r2
    32b2:	23 94       	inc	r2
    32b4:	31 2c       	mov	r3, r1
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
    32b6:	a0 fe       	sbrs	r10, 0
    32b8:	2c c0       	rjmp	.+88     	; 0x3312 <releaseUpdate+0xb0>
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])<=(currentGlobals->releaseCounter))
    32ba:	f3 01       	movw	r30, r6
    32bc:	40 81       	ld	r20, Z
    32be:	51 81       	ldd	r21, Z+1	; 0x01
    32c0:	62 81       	ldd	r22, Z+2	; 0x02
    32c2:	73 81       	ldd	r23, Z+3	; 0x03
    32c4:	f2 01       	movw	r30, r4
    32c6:	80 81       	ld	r24, Z
    32c8:	91 81       	ldd	r25, Z+1	; 0x01
    32ca:	a2 81       	ldd	r26, Z+2	; 0x02
    32cc:	b3 81       	ldd	r27, Z+3	; 0x03
    32ce:	84 17       	cp	r24, r20
    32d0:	95 07       	cpc	r25, r21
    32d2:	a6 07       	cpc	r26, r22
    32d4:	b7 07       	cpc	r27, r23
    32d6:	e8 f0       	brcs	.+58     	; 0x3312 <releaseUpdate+0xb0>
			{
				//we need to do the release state here.
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],186,255,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
    32d8:	cc 24       	eor	r12, r12
    32da:	c3 94       	inc	r12
    32dc:	f4 01       	movw	r30, r8
    32de:	e0 80       	ld	r14, Z
    32e0:	00 89       	ldd	r16, Z+16	; 0x10
    32e2:	2f ef       	ldi	r18, 0xFF	; 255
    32e4:	4a eb       	ldi	r20, 0xBA	; 186
    32e6:	60 a9       	ldd	r22, Z+48	; 0x30
    32e8:	e0 5c       	subi	r30, 0xC0	; 192
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	80 81       	ld	r24, Z
    32ee:	0a de       	rcall	.-1004   	; 0x2f04 <setTrackFade>
				currentGlobals->releaseTracker = currentGlobals->releaseTracker&(~(1<<i)); //turn off that track, so release stage does not play again. 
    32f0:	c1 01       	movw	r24, r2
    32f2:	0b 80       	ldd	r0, Y+3	; 0x03
    32f4:	02 c0       	rjmp	.+4      	; 0x32fa <releaseUpdate+0x98>
    32f6:	88 0f       	add	r24, r24
    32f8:	99 1f       	adc	r25, r25
    32fa:	0a 94       	dec	r0
    32fc:	e2 f7       	brpl	.-8      	; 0x32f6 <releaseUpdate+0x94>
    32fe:	80 95       	com	r24
    3300:	90 95       	com	r25
    3302:	e9 81       	ldd	r30, Y+1	; 0x01
    3304:	fa 81       	ldd	r31, Y+2	; 0x02
    3306:	20 81       	ld	r18, Z
    3308:	31 81       	ldd	r19, Z+1	; 0x01
    330a:	82 23       	and	r24, r18
    330c:	93 23       	and	r25, r19
    330e:	91 83       	std	Z+1, r25	; 0x01
    3310:	80 83       	st	Z, r24
			}
		}
		releaseTrackerParse = releaseTrackerParse>>1;
    3312:	b6 94       	lsr	r11
    3314:	a7 94       	ror	r10

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
    3316:	8b 81       	ldd	r24, Y+3	; 0x03
    3318:	9c 81       	ldd	r25, Y+4	; 0x04
    331a:	01 96       	adiw	r24, 0x01	; 1
    331c:	9c 83       	std	Y+4, r25	; 0x04
    331e:	8b 83       	std	Y+3, r24	; 0x03
    3320:	94 e0       	ldi	r25, 0x04	; 4
    3322:	69 0e       	add	r6, r25
    3324:	71 1c       	adc	r7, r1
    3326:	ef ef       	ldi	r30, 0xFF	; 255
    3328:	8e 1a       	sub	r8, r30
    332a:	9e 0a       	sbc	r9, r30
    332c:	8b 81       	ldd	r24, Y+3	; 0x03
    332e:	9c 81       	ldd	r25, Y+4	; 0x04
    3330:	40 97       	sbiw	r24, 0x10	; 16
    3332:	09 f0       	breq	.+2      	; 0x3336 <releaseUpdate+0xd4>
    3334:	c0 cf       	rjmp	.-128    	; 0x32b6 <releaseUpdate+0x54>
			}
		}
		releaseTrackerParse = releaseTrackerParse>>1;
	}
	
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	0f 90       	pop	r0
    333e:	df 91       	pop	r29
    3340:	cf 91       	pop	r28
    3342:	0f 91       	pop	r16
    3344:	ef 90       	pop	r14
    3346:	cf 90       	pop	r12
    3348:	bf 90       	pop	r11
    334a:	af 90       	pop	r10
    334c:	9f 90       	pop	r9
    334e:	8f 90       	pop	r8
    3350:	7f 90       	pop	r7
    3352:	6f 90       	pop	r6
    3354:	5f 90       	pop	r5
    3356:	4f 90       	pop	r4
    3358:	3f 90       	pop	r3
    335a:	2f 90       	pop	r2
    335c:	08 95       	ret

0000335e <twi_init>:
		}

		returnNum=twi_readNak();

	return returnNum;
}
    335e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3362:	88 e4       	ldi	r24, 0x48	; 72
    3364:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    3368:	08 95       	ret

0000336a <twi_start>:
    336a:	94 ea       	ldi	r25, 0xA4	; 164
    336c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3370:	ec eb       	ldi	r30, 0xBC	; 188
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	90 81       	ld	r25, Z
    3376:	99 23       	and	r25, r25
    3378:	ec f7       	brge	.-6      	; 0x3374 <twi_start+0xa>
    337a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    337e:	98 7f       	andi	r25, 0xF8	; 248
    3380:	98 30       	cpi	r25, 0x08	; 8
    3382:	11 f0       	breq	.+4      	; 0x3388 <twi_start+0x1e>
    3384:	90 31       	cpi	r25, 0x10	; 16
    3386:	a1 f4       	brne	.+40     	; 0x33b0 <twi_start+0x46>
    3388:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    338c:	84 e8       	ldi	r24, 0x84	; 132
    338e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3392:	ec eb       	ldi	r30, 0xBC	; 188
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
    3398:	88 23       	and	r24, r24
    339a:	ec f7       	brge	.-6      	; 0x3396 <twi_start+0x2c>
    339c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    33a0:	98 7f       	andi	r25, 0xF8	; 248
    33a2:	98 31       	cpi	r25, 0x18	; 24
    33a4:	39 f0       	breq	.+14     	; 0x33b4 <twi_start+0x4a>
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	90 34       	cpi	r25, 0x40	; 64
    33aa:	29 f4       	brne	.+10     	; 0x33b6 <twi_start+0x4c>
    33ac:	80 e0       	ldi	r24, 0x00	; 0
    33ae:	08 95       	ret
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	08 95       	ret
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	08 95       	ret

000033b8 <twi_stop>:
    33b8:	84 e9       	ldi	r24, 0x94	; 148
    33ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    33be:	ec eb       	ldi	r30, 0xBC	; 188
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
    33c4:	84 fd       	sbrc	r24, 4
    33c6:	fd cf       	rjmp	.-6      	; 0x33c2 <twi_stop+0xa>
    33c8:	08 95       	ret

000033ca <twi_write>:
    33ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    33ce:	84 e8       	ldi	r24, 0x84	; 132
    33d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    33d4:	ec eb       	ldi	r30, 0xBC	; 188
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	80 81       	ld	r24, Z
    33da:	88 23       	and	r24, r24
    33dc:	ec f7       	brge	.-6      	; 0x33d8 <twi_write+0xe>
    33de:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    33e2:	98 7f       	andi	r25, 0xF8	; 248
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	98 32       	cpi	r25, 0x28	; 40
    33e8:	09 f4       	brne	.+2      	; 0x33ec <twi_write+0x22>
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    33ec:	08 95       	ret

000033ee <twi_readAck>:
    33ee:	84 ec       	ldi	r24, 0xC4	; 196
    33f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    33f4:	ec eb       	ldi	r30, 0xBC	; 188
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	80 81       	ld	r24, Z
    33fa:	88 23       	and	r24, r24
    33fc:	ec f7       	brge	.-6      	; 0x33f8 <twi_readAck+0xa>
    33fe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3402:	08 95       	ret

00003404 <twi_readNak>:
    3404:	84 e8       	ldi	r24, 0x84	; 132
    3406:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    340a:	ec eb       	ldi	r30, 0xBC	; 188
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	80 81       	ld	r24, Z
    3410:	88 23       	and	r24, r24
    3412:	ec f7       	brge	.-6      	; 0x340e <twi_readNak+0xa>
    3414:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3418:	08 95       	ret

0000341a <eepromSavePattern>:
    341a:	4f 92       	push	r4
    341c:	5f 92       	push	r5
    341e:	6f 92       	push	r6
    3420:	7f 92       	push	r7
    3422:	8f 92       	push	r8
    3424:	9f 92       	push	r9
    3426:	af 92       	push	r10
    3428:	bf 92       	push	r11
    342a:	cf 92       	push	r12
    342c:	df 92       	push	r13
    342e:	ef 92       	push	r14
    3430:	ff 92       	push	r15
    3432:	0f 93       	push	r16
    3434:	1f 93       	push	r17
    3436:	cf 93       	push	r28
    3438:	df 93       	push	r29
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
    343e:	c4 59       	subi	r28, 0x94	; 148
    3440:	d1 09       	sbc	r29, r1
    3442:	0f b6       	in	r0, 0x3f	; 63
    3444:	f8 94       	cli
    3446:	de bf       	out	0x3e, r29	; 62
    3448:	0f be       	out	0x3f, r0	; 63
    344a:	cd bf       	out	0x3d, r28	; 61
    344c:	cd 5d       	subi	r28, 0xDD	; 221
    344e:	dd 4f       	sbci	r29, 0xFD	; 253
    3450:	48 81       	ld	r20, Y
    3452:	c3 52       	subi	r28, 0x23	; 35
    3454:	d2 40       	sbci	r29, 0x02	; 2
    3456:	c0 59       	subi	r28, 0x90	; 144
    3458:	de 4f       	sbci	r29, 0xFE	; 254
    345a:	88 81       	ld	r24, Y
    345c:	c0 57       	subi	r28, 0x70	; 112
    345e:	d1 40       	sbci	r29, 0x01	; 1
    3460:	cf 58       	subi	r28, 0x8F	; 143
    3462:	de 4f       	sbci	r29, 0xFE	; 254
    3464:	98 81       	ld	r25, Y
    3466:	c1 57       	subi	r28, 0x71	; 113
    3468:	d1 40       	sbci	r29, 0x01	; 1
    346a:	24 2f       	mov	r18, r20
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	44 23       	and	r20, r20
    3470:	8c f0       	brlt	.+34     	; 0x3494 <eepromSavePattern+0x7a>
    3472:	21 50       	subi	r18, 0x01	; 1
    3474:	31 09       	sbc	r19, r1
    3476:	39 01       	movw	r6, r18
    3478:	66 0c       	add	r6, r6
    347a:	77 1c       	adc	r7, r7
    347c:	62 0e       	add	r6, r18
    347e:	73 1e       	adc	r7, r19
    3480:	76 94       	lsr	r7
    3482:	76 2c       	mov	r7, r6
    3484:	66 24       	eor	r6, r6
    3486:	77 94       	ror	r7
    3488:	67 94       	ror	r6
    348a:	0f 2e       	mov	r0, r31
    348c:	f0 ea       	ldi	r31, 0xA0	; 160
    348e:	5f 2e       	mov	r5, r31
    3490:	f0 2d       	mov	r31, r0
    3492:	11 c0       	rjmp	.+34     	; 0x34b6 <eepromSavePattern+0x9c>
    3494:	20 58       	subi	r18, 0x80	; 128
    3496:	31 09       	sbc	r19, r1
    3498:	39 01       	movw	r6, r18
    349a:	66 0c       	add	r6, r6
    349c:	77 1c       	adc	r7, r7
    349e:	26 0d       	add	r18, r6
    34a0:	37 1d       	adc	r19, r7
    34a2:	39 01       	movw	r6, r18
    34a4:	76 94       	lsr	r7
    34a6:	76 2c       	mov	r7, r6
    34a8:	66 24       	eor	r6, r6
    34aa:	77 94       	ror	r7
    34ac:	67 94       	ror	r6
    34ae:	0f 2e       	mov	r0, r31
    34b0:	f8 ea       	ldi	r31, 0xA8	; 168
    34b2:	5f 2e       	mov	r5, r31
    34b4:	f0 2d       	mov	r31, r0
    34b6:	be 01       	movw	r22, r28
    34b8:	68 55       	subi	r22, 0x58	; 88
    34ba:	7f 4f       	sbci	r23, 0xFF	; 255
    34bc:	8e 01       	movw	r16, r28
    34be:	0f 5f       	subi	r16, 0xFF	; 255
    34c0:	1f 4f       	sbci	r17, 0xFF	; 255
    34c2:	fe 01       	movw	r30, r28
    34c4:	e0 55       	subi	r30, 0x50	; 80
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	98 01       	movw	r18, r16
    34ca:	db 01       	movw	r26, r22
    34cc:	4d 91       	ld	r20, X+
    34ce:	bd 01       	movw	r22, r26
    34d0:	d9 01       	movw	r26, r18
    34d2:	4d 93       	st	X+, r20
    34d4:	9d 01       	movw	r18, r26
    34d6:	6e 17       	cp	r22, r30
    34d8:	7f 07       	cpc	r23, r31
    34da:	b9 f7       	brne	.-18     	; 0x34ca <eepromSavePattern+0xb0>
    34dc:	de 01       	movw	r26, r28
    34de:	19 96       	adiw	r26, 0x09	; 9
    34e0:	9e 01       	movw	r18, r28
    34e2:	28 54       	subi	r18, 0x48	; 72
    34e4:	3f 4f       	sbci	r19, 0xFF	; 255
    34e6:	41 91       	ld	r20, Z+
    34e8:	4d 93       	st	X+, r20
    34ea:	e2 17       	cp	r30, r18
    34ec:	f3 07       	cpc	r31, r19
    34ee:	d9 f7       	brne	.-10     	; 0x34e6 <eepromSavePattern+0xcc>
    34f0:	4e 01       	movw	r8, r28
    34f2:	b1 e1       	ldi	r27, 0x11	; 17
    34f4:	8b 0e       	add	r8, r27
    34f6:	91 1c       	adc	r9, r1
    34f8:	7e 01       	movw	r14, r28
    34fa:	e0 ec       	ldi	r30, 0xC0	; 192
    34fc:	ee 0e       	add	r14, r30
    34fe:	f1 1c       	adc	r15, r1
    3500:	d4 01       	movw	r26, r8
    3502:	f9 01       	movw	r30, r18
    3504:	41 91       	ld	r20, Z+
    3506:	9f 01       	movw	r18, r30
    3508:	4d 93       	st	X+, r20
    350a:	ee 15       	cp	r30, r14
    350c:	ff 05       	cpc	r31, r15
    350e:	c9 f7       	brne	.-14     	; 0x3502 <eepromSavePattern+0xe8>
    3510:	9e 01       	movw	r18, r28
    3512:	27 5e       	subi	r18, 0xE7	; 231
    3514:	3f 4f       	sbci	r19, 0xFF	; 255
    3516:	be 01       	movw	r22, r28
    3518:	60 53       	subi	r22, 0x30	; 48
    351a:	7f 4f       	sbci	r23, 0xFF	; 255
    351c:	d7 01       	movw	r26, r14
    351e:	4d 91       	ld	r20, X+
    3520:	7d 01       	movw	r14, r26
    3522:	f9 01       	movw	r30, r18
    3524:	41 93       	st	Z+, r20
    3526:	9f 01       	movw	r18, r30
    3528:	a6 17       	cp	r26, r22
    352a:	b7 07       	cpc	r27, r23
    352c:	b9 f7       	brne	.-18     	; 0x351c <eepromSavePattern+0x102>
    352e:	9e 01       	movw	r18, r28
    3530:	27 5d       	subi	r18, 0xD7	; 215
    3532:	3f 4f       	sbci	r19, 0xFF	; 255
    3534:	de 01       	movw	r26, r28
    3536:	a0 52       	subi	r26, 0x20	; 32
    3538:	bf 4f       	sbci	r27, 0xFF	; 255
    353a:	fb 01       	movw	r30, r22
    353c:	41 91       	ld	r20, Z+
    353e:	bf 01       	movw	r22, r30
    3540:	f9 01       	movw	r30, r18
    3542:	41 93       	st	Z+, r20
    3544:	9f 01       	movw	r18, r30
    3546:	6a 17       	cp	r22, r26
    3548:	7b 07       	cpc	r23, r27
    354a:	b9 f7       	brne	.-18     	; 0x353a <eepromSavePattern+0x120>
    354c:	9e 01       	movw	r18, r28
    354e:	27 5c       	subi	r18, 0xC7	; 199
    3550:	3f 4f       	sbci	r19, 0xFF	; 255
    3552:	be 01       	movw	r22, r28
    3554:	60 51       	subi	r22, 0x10	; 16
    3556:	7f 4f       	sbci	r23, 0xFF	; 255
    3558:	4d 91       	ld	r20, X+
    355a:	f9 01       	movw	r30, r18
    355c:	41 93       	st	Z+, r20
    355e:	9f 01       	movw	r18, r30
    3560:	a6 17       	cp	r26, r22
    3562:	b7 07       	cpc	r27, r23
    3564:	c9 f7       	brne	.-14     	; 0x3558 <eepromSavePattern+0x13e>
    3566:	9e 01       	movw	r18, r28
    3568:	27 5b       	subi	r18, 0xB7	; 183
    356a:	3f 4f       	sbci	r19, 0xFF	; 255
    356c:	de 01       	movw	r26, r28
    356e:	b3 95       	inc	r27
    3570:	fb 01       	movw	r30, r22
    3572:	41 91       	ld	r20, Z+
    3574:	bf 01       	movw	r22, r30
    3576:	f9 01       	movw	r30, r18
    3578:	41 93       	st	Z+, r20
    357a:	9f 01       	movw	r18, r30
    357c:	6a 17       	cp	r22, r26
    357e:	7b 07       	cpc	r23, r27
    3580:	b9 f7       	brne	.-18     	; 0x3570 <eepromSavePattern+0x156>
    3582:	9e 01       	movw	r18, r28
    3584:	27 5a       	subi	r18, 0xA7	; 167
    3586:	3f 4f       	sbci	r19, 0xFF	; 255
    3588:	be 01       	movw	r22, r28
    358a:	60 5f       	subi	r22, 0xF0	; 240
    358c:	7e 4f       	sbci	r23, 0xFE	; 254
    358e:	4d 91       	ld	r20, X+
    3590:	f9 01       	movw	r30, r18
    3592:	41 93       	st	Z+, r20
    3594:	9f 01       	movw	r18, r30
    3596:	a6 17       	cp	r26, r22
    3598:	b7 07       	cpc	r27, r23
    359a:	c9 f7       	brne	.-14     	; 0x358e <eepromSavePattern+0x174>
    359c:	de 01       	movw	r26, r28
    359e:	a7 59       	subi	r26, 0x97	; 151
    35a0:	bf 4f       	sbci	r27, 0xFF	; 255
    35a2:	5e 01       	movw	r10, r28
    35a4:	f0 ee       	ldi	r31, 0xE0	; 224
    35a6:	af 1a       	sub	r10, r31
    35a8:	fe ef       	ldi	r31, 0xFE	; 254
    35aa:	bf 0a       	sbc	r11, r31
    35ac:	fb 01       	movw	r30, r22
    35ae:	21 91       	ld	r18, Z+
    35b0:	bf 01       	movw	r22, r30
    35b2:	2d 93       	st	X+, r18
    35b4:	ea 15       	cp	r30, r10
    35b6:	fb 05       	cpc	r31, r11
    35b8:	c9 f7       	brne	.-14     	; 0x35ac <eepromSavePattern+0x192>
    35ba:	eb 96       	adiw	r28, 0x3b	; 59
    35bc:	9f af       	std	Y+63, r25	; 0x3f
    35be:	eb 97       	sbiw	r28, 0x3b	; 59
    35c0:	ec 96       	adiw	r28, 0x3c	; 60
    35c2:	8f af       	std	Y+63, r24	; 0x3f
    35c4:	ec 97       	sbiw	r28, 0x3c	; 60
    35c6:	ce 58       	subi	r28, 0x8E	; 142
    35c8:	de 4f       	sbci	r29, 0xFE	; 254
    35ca:	88 81       	ld	r24, Y
    35cc:	c2 57       	subi	r28, 0x72	; 114
    35ce:	d1 40       	sbci	r29, 0x01	; 1
    35d0:	ed 96       	adiw	r28, 0x3d	; 61
    35d2:	8f af       	std	Y+63, r24	; 0x3f
    35d4:	ed 97       	sbiw	r28, 0x3d	; 61
    35d6:	85 2d       	mov	r24, r5
    35d8:	c8 de       	rcall	.-624    	; 0x336a <twi_start>
    35da:	81 30       	cpi	r24, 0x01	; 1
    35dc:	81 f4       	brne	.+32     	; 0x35fe <eepromSavePattern+0x1e4>
    35de:	84 e1       	ldi	r24, 0x14	; 20
    35e0:	ec e0       	ldi	r30, 0x0C	; 12
    35e2:	f2 e0       	ldi	r31, 0x02	; 2
    35e4:	de 01       	movw	r26, r28
    35e6:	af 57       	subi	r26, 0x7F	; 127
    35e8:	bf 4f       	sbci	r27, 0xFF	; 255
    35ea:	01 90       	ld	r0, Z+
    35ec:	0d 92       	st	X+, r0
    35ee:	8a 95       	dec	r24
    35f0:	e1 f7       	brne	.-8      	; 0x35ea <eepromSavePattern+0x1d0>
    35f2:	63 e0       	ldi	r22, 0x03	; 3
    35f4:	70 e0       	ldi	r23, 0x00	; 0
    35f6:	ce 01       	movw	r24, r28
    35f8:	8f 57       	subi	r24, 0x7F	; 127
    35fa:	9f 4f       	sbci	r25, 0xFF	; 255
    35fc:	e1 d8       	rcall	.-3646   	; 0x27c0 <outputS>
    35fe:	87 2d       	mov	r24, r7
    3600:	e4 de       	rcall	.-568    	; 0x33ca <twi_write>
    3602:	46 2c       	mov	r4, r6
    3604:	86 2d       	mov	r24, r6
    3606:	e1 de       	rcall	.-574    	; 0x33ca <twi_write>
    3608:	6e 01       	movw	r12, r28
    360a:	fd e7       	ldi	r31, 0x7D	; 125
    360c:	cf 0e       	add	r12, r31
    360e:	d1 1c       	adc	r13, r1
    3610:	78 01       	movw	r14, r16
    3612:	d7 01       	movw	r26, r14
    3614:	8d 91       	ld	r24, X+
    3616:	7d 01       	movw	r14, r26
    3618:	d8 de       	rcall	.-592    	; 0x33ca <twi_write>
    361a:	ce 14       	cp	r12, r14
    361c:	df 04       	cpc	r13, r15
    361e:	c9 f7       	brne	.-14     	; 0x3612 <eepromSavePattern+0x1f8>
    3620:	cb de       	rcall	.-618    	; 0x33b8 <twi_stop>
    3622:	ef e1       	ldi	r30, 0x1F	; 31
    3624:	fe e4       	ldi	r31, 0x4E	; 78
    3626:	31 97       	sbiw	r30, 0x01	; 1
    3628:	f1 f7       	brne	.-4      	; 0x3626 <eepromSavePattern+0x20c>
    362a:	00 c0       	rjmp	.+0      	; 0x362c <eepromSavePattern+0x212>
    362c:	00 00       	nop
    362e:	9e 01       	movw	r18, r28
    3630:	20 5d       	subi	r18, 0xD0	; 208
    3632:	3e 4f       	sbci	r19, 0xFE	; 254
    3634:	f8 01       	movw	r30, r16
    3636:	d5 01       	movw	r26, r10
    3638:	8d 91       	ld	r24, X+
    363a:	5d 01       	movw	r10, r26
    363c:	81 93       	st	Z+, r24
    363e:	2a 17       	cp	r18, r26
    3640:	3b 07       	cpc	r19, r27
    3642:	c9 f7       	brne	.-14     	; 0x3636 <eepromSavePattern+0x21c>
    3644:	de 01       	movw	r26, r28
    3646:	91 96       	adiw	r26, 0x21	; 33
    3648:	f9 01       	movw	r30, r18
    364a:	81 91       	ld	r24, Z+
    364c:	9f 01       	movw	r18, r30
    364e:	f4 01       	movw	r30, r8
    3650:	81 93       	st	Z+, r24
    3652:	4f 01       	movw	r8, r30
    3654:	ae 17       	cp	r26, r30
    3656:	bf 07       	cpc	r27, r31
    3658:	b9 f7       	brne	.-18     	; 0x3648 <eepromSavePattern+0x22e>
    365a:	ce 01       	movw	r24, r28
    365c:	80 5c       	subi	r24, 0xC0	; 192
    365e:	9e 4f       	sbci	r25, 0xFE	; 254
    3660:	ae 01       	movw	r20, r28
    3662:	4f 5c       	subi	r20, 0xCF	; 207
    3664:	5f 4f       	sbci	r21, 0xFF	; 255
    3666:	fc 01       	movw	r30, r24
    3668:	21 91       	ld	r18, Z+
    366a:	cf 01       	movw	r24, r30
    366c:	2d 93       	st	X+, r18
    366e:	a4 17       	cp	r26, r20
    3670:	b5 07       	cpc	r27, r21
    3672:	c9 f7       	brne	.-14     	; 0x3666 <eepromSavePattern+0x24c>
    3674:	ce 01       	movw	r24, r28
    3676:	80 5b       	subi	r24, 0xB0	; 176
    3678:	9e 4f       	sbci	r25, 0xFE	; 254
    367a:	de 01       	movw	r26, r28
    367c:	af 5b       	subi	r26, 0xBF	; 191
    367e:	bf 4f       	sbci	r27, 0xFF	; 255
    3680:	fc 01       	movw	r30, r24
    3682:	21 91       	ld	r18, Z+
    3684:	cf 01       	movw	r24, r30
    3686:	fa 01       	movw	r30, r20
    3688:	21 93       	st	Z+, r18
    368a:	af 01       	movw	r20, r30
    368c:	ea 17       	cp	r30, r26
    368e:	fb 07       	cpc	r31, r27
    3690:	b9 f7       	brne	.-18     	; 0x3680 <eepromSavePattern+0x266>
    3692:	fe 01       	movw	r30, r28
    3694:	e0 5a       	subi	r30, 0xA0	; 160
    3696:	fe 4f       	sbci	r31, 0xFE	; 254
    3698:	9e 01       	movw	r18, r28
    369a:	20 59       	subi	r18, 0x90	; 144
    369c:	3e 4f       	sbci	r19, 0xFE	; 254
    369e:	81 91       	ld	r24, Z+
    36a0:	8d 93       	st	X+, r24
    36a2:	2e 17       	cp	r18, r30
    36a4:	3f 07       	cpc	r19, r31
    36a6:	d9 f7       	brne	.-10     	; 0x369e <eepromSavePattern+0x284>
    36a8:	ae 01       	movw	r20, r28
    36aa:	4d 58       	subi	r20, 0x8D	; 141
    36ac:	5e 4f       	sbci	r21, 0xFE	; 254
    36ae:	ce 01       	movw	r24, r28
    36b0:	8f 5a       	subi	r24, 0xAF	; 175
    36b2:	9f 4f       	sbci	r25, 0xFF	; 255
    36b4:	de 01       	movw	r26, r28
    36b6:	ad 57       	subi	r26, 0x7D	; 125
    36b8:	be 4f       	sbci	r27, 0xFE	; 254
    36ba:	fa 01       	movw	r30, r20
    36bc:	21 91       	ld	r18, Z+
    36be:	af 01       	movw	r20, r30
    36c0:	fc 01       	movw	r30, r24
    36c2:	21 93       	st	Z+, r18
    36c4:	cf 01       	movw	r24, r30
    36c6:	a4 17       	cp	r26, r20
    36c8:	b5 07       	cpc	r27, r21
    36ca:	b9 f7       	brne	.-18     	; 0x36ba <eepromSavePattern+0x2a0>
    36cc:	ce 01       	movw	r24, r28
    36ce:	8f 59       	subi	r24, 0x9F	; 159
    36d0:	9f 4f       	sbci	r25, 0xFF	; 255
    36d2:	ae 01       	movw	r20, r28
    36d4:	4d 56       	subi	r20, 0x6D	; 109
    36d6:	5e 4f       	sbci	r21, 0xFE	; 254
    36d8:	2d 91       	ld	r18, X+
    36da:	fc 01       	movw	r30, r24
    36dc:	21 93       	st	Z+, r18
    36de:	cf 01       	movw	r24, r30
    36e0:	a4 17       	cp	r26, r20
    36e2:	b5 07       	cpc	r27, r21
    36e4:	c9 f7       	brne	.-14     	; 0x36d8 <eepromSavePattern+0x2be>
    36e6:	de 01       	movw	r26, r28
    36e8:	af 58       	subi	r26, 0x8F	; 143
    36ea:	bf 4f       	sbci	r27, 0xFF	; 255
    36ec:	7e 01       	movw	r14, r28
    36ee:	fd e5       	ldi	r31, 0x5D	; 93
    36f0:	ef 1a       	sub	r14, r31
    36f2:	fe ef       	ldi	r31, 0xFE	; 254
    36f4:	ff 0a       	sbc	r15, r31
    36f6:	fa 01       	movw	r30, r20
    36f8:	81 91       	ld	r24, Z+
    36fa:	af 01       	movw	r20, r30
    36fc:	8d 93       	st	X+, r24
    36fe:	ee 16       	cp	r14, r30
    3700:	ff 06       	cpc	r15, r31
    3702:	c9 f7       	brne	.-14     	; 0x36f6 <eepromSavePattern+0x2dc>
    3704:	85 2d       	mov	r24, r5
    3706:	31 de       	rcall	.-926    	; 0x336a <twi_start>
    3708:	81 30       	cpi	r24, 0x01	; 1
    370a:	81 f4       	brne	.+32     	; 0x372c <eepromSavePattern+0x312>
    370c:	84 e1       	ldi	r24, 0x14	; 20
    370e:	e1 e2       	ldi	r30, 0x21	; 33
    3710:	f2 e0       	ldi	r31, 0x02	; 2
    3712:	de 01       	movw	r26, r28
    3714:	af 57       	subi	r26, 0x7F	; 127
    3716:	bf 4f       	sbci	r27, 0xFF	; 255
    3718:	01 90       	ld	r0, Z+
    371a:	0d 92       	st	X+, r0
    371c:	8a 95       	dec	r24
    371e:	e1 f7       	brne	.-8      	; 0x3718 <eepromSavePattern+0x2fe>
    3720:	63 e0       	ldi	r22, 0x03	; 3
    3722:	70 e0       	ldi	r23, 0x00	; 0
    3724:	ce 01       	movw	r24, r28
    3726:	8f 57       	subi	r24, 0x7F	; 127
    3728:	9f 4f       	sbci	r25, 0xFF	; 255
    372a:	4a d8       	rcall	.-3948   	; 0x27c0 <outputS>
    372c:	c3 01       	movw	r24, r6
    372e:	80 58       	subi	r24, 0x80	; 128
    3730:	9f 4f       	sbci	r25, 0xFF	; 255
    3732:	89 2f       	mov	r24, r25
    3734:	4a de       	rcall	.-876    	; 0x33ca <twi_write>
    3736:	80 e8       	ldi	r24, 0x80	; 128
    3738:	84 0d       	add	r24, r4
    373a:	47 de       	rcall	.-882    	; 0x33ca <twi_write>
    373c:	6e 01       	movw	r12, r28
    373e:	f1 e8       	ldi	r31, 0x81	; 129
    3740:	cf 0e       	add	r12, r31
    3742:	d1 1c       	adc	r13, r1
    3744:	d8 01       	movw	r26, r16
    3746:	8d 91       	ld	r24, X+
    3748:	8d 01       	movw	r16, r26
    374a:	3f de       	rcall	.-898    	; 0x33ca <twi_write>
    374c:	c0 16       	cp	r12, r16
    374e:	d1 06       	cpc	r13, r17
    3750:	c9 f7       	brne	.-14     	; 0x3744 <eepromSavePattern+0x32a>
    3752:	32 de       	rcall	.-924    	; 0x33b8 <twi_stop>
    3754:	ef e1       	ldi	r30, 0x1F	; 31
    3756:	fe e4       	ldi	r31, 0x4E	; 78
    3758:	31 97       	sbiw	r30, 0x01	; 1
    375a:	f1 f7       	brne	.-4      	; 0x3758 <eepromSavePattern+0x33e>
    375c:	00 c0       	rjmp	.+0      	; 0x375e <eepromSavePattern+0x344>
    375e:	00 00       	nop
    3760:	85 2d       	mov	r24, r5
    3762:	03 de       	rcall	.-1018   	; 0x336a <twi_start>
    3764:	81 30       	cpi	r24, 0x01	; 1
    3766:	81 f4       	brne	.+32     	; 0x3788 <eepromSavePattern+0x36e>
    3768:	84 e1       	ldi	r24, 0x14	; 20
    376a:	e6 e3       	ldi	r30, 0x36	; 54
    376c:	f2 e0       	ldi	r31, 0x02	; 2
    376e:	de 01       	movw	r26, r28
    3770:	af 57       	subi	r26, 0x7F	; 127
    3772:	bf 4f       	sbci	r27, 0xFF	; 255
    3774:	01 90       	ld	r0, Z+
    3776:	0d 92       	st	X+, r0
    3778:	8a 95       	dec	r24
    377a:	e1 f7       	brne	.-8      	; 0x3774 <eepromSavePattern+0x35a>
    377c:	63 e0       	ldi	r22, 0x03	; 3
    377e:	70 e0       	ldi	r23, 0x00	; 0
    3780:	ce 01       	movw	r24, r28
    3782:	8f 57       	subi	r24, 0x7F	; 127
    3784:	9f 4f       	sbci	r25, 0xFF	; 255
    3786:	1c d8       	rcall	.-4040   	; 0x27c0 <outputS>
    3788:	73 94       	inc	r7
    378a:	87 2d       	mov	r24, r7
    378c:	1e de       	rcall	.-964    	; 0x33ca <twi_write>
    378e:	84 2d       	mov	r24, r4
    3790:	1c de       	rcall	.-968    	; 0x33ca <twi_write>
    3792:	6e 01       	movw	r12, r28
    3794:	2d ed       	ldi	r18, 0xDD	; 221
    3796:	c2 1a       	sub	r12, r18
    3798:	2d ef       	ldi	r18, 0xFD	; 253
    379a:	d2 0a       	sbc	r13, r18
    379c:	d7 01       	movw	r26, r14
    379e:	1c 91       	ld	r17, X
    37a0:	11 96       	adiw	r26, 0x01	; 1
    37a2:	8c 91       	ld	r24, X
    37a4:	b2 e0       	ldi	r27, 0x02	; 2
    37a6:	eb 0e       	add	r14, r27
    37a8:	f1 1c       	adc	r15, r1
    37aa:	0f de       	rcall	.-994    	; 0x33ca <twi_write>
    37ac:	81 2f       	mov	r24, r17
    37ae:	0d de       	rcall	.-998    	; 0x33ca <twi_write>
    37b0:	ce 14       	cp	r12, r14
    37b2:	df 04       	cpc	r13, r15
    37b4:	99 f7       	brne	.-26     	; 0x379c <eepromSavePattern+0x382>
    37b6:	00 de       	rcall	.-1024   	; 0x33b8 <twi_stop>
    37b8:	ef e1       	ldi	r30, 0x1F	; 31
    37ba:	fe e4       	ldi	r31, 0x4E	; 78
    37bc:	31 97       	sbiw	r30, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <eepromSavePattern+0x3a2>
    37c0:	00 c0       	rjmp	.+0      	; 0x37c2 <eepromSavePattern+0x3a8>
    37c2:	00 00       	nop
    37c4:	cc 56       	subi	r28, 0x6C	; 108
    37c6:	df 4f       	sbci	r29, 0xFF	; 255
    37c8:	0f b6       	in	r0, 0x3f	; 63
    37ca:	f8 94       	cli
    37cc:	de bf       	out	0x3e, r29	; 62
    37ce:	0f be       	out	0x3f, r0	; 63
    37d0:	cd bf       	out	0x3d, r28	; 61
    37d2:	df 91       	pop	r29
    37d4:	cf 91       	pop	r28
    37d6:	1f 91       	pop	r17
    37d8:	0f 91       	pop	r16
    37da:	ff 90       	pop	r15
    37dc:	ef 90       	pop	r14
    37de:	df 90       	pop	r13
    37e0:	cf 90       	pop	r12
    37e2:	bf 90       	pop	r11
    37e4:	af 90       	pop	r10
    37e6:	9f 90       	pop	r9
    37e8:	8f 90       	pop	r8
    37ea:	7f 90       	pop	r7
    37ec:	6f 90       	pop	r6
    37ee:	5f 90       	pop	r5
    37f0:	4f 90       	pop	r4
    37f2:	08 95       	ret

000037f4 <eepromLoadPattern>:
    37f4:	8f 92       	push	r8
    37f6:	9f 92       	push	r9
    37f8:	af 92       	push	r10
    37fa:	bf 92       	push	r11
    37fc:	cf 92       	push	r12
    37fe:	df 92       	push	r13
    3800:	ef 92       	push	r14
    3802:	ff 92       	push	r15
    3804:	0f 93       	push	r16
    3806:	1f 93       	push	r17
    3808:	cf 93       	push	r28
    380a:	df 93       	push	r29
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
    3810:	c4 59       	subi	r28, 0x94	; 148
    3812:	d1 40       	sbci	r29, 0x01	; 1
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	f8 94       	cli
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	cd bf       	out	0x3d, r28	; 61
    381e:	7c 01       	movw	r14, r24
    3820:	86 2f       	mov	r24, r22
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	66 23       	and	r22, r22
    3826:	84 f0       	brlt	.+32     	; 0x3848 <eepromLoadPattern+0x54>
    3828:	01 97       	sbiw	r24, 0x01	; 1
    382a:	9c 01       	movw	r18, r24
    382c:	22 0f       	add	r18, r18
    382e:	33 1f       	adc	r19, r19
    3830:	82 0f       	add	r24, r18
    3832:	93 1f       	adc	r25, r19
    3834:	96 95       	lsr	r25
    3836:	98 2f       	mov	r25, r24
    3838:	88 27       	eor	r24, r24
    383a:	97 95       	ror	r25
    383c:	87 95       	ror	r24
    383e:	08 2f       	mov	r16, r24
    3840:	d9 2e       	mov	r13, r25
    3842:	80 ea       	ldi	r24, 0xA0	; 160
    3844:	11 ea       	ldi	r17, 0xA1	; 161
    3846:	10 c0       	rjmp	.+32     	; 0x3868 <eepromLoadPattern+0x74>
    3848:	80 58       	subi	r24, 0x80	; 128
    384a:	91 09       	sbc	r25, r1
    384c:	9c 01       	movw	r18, r24
    384e:	22 0f       	add	r18, r18
    3850:	33 1f       	adc	r19, r19
    3852:	82 0f       	add	r24, r18
    3854:	93 1f       	adc	r25, r19
    3856:	96 95       	lsr	r25
    3858:	98 2f       	mov	r25, r24
    385a:	88 27       	eor	r24, r24
    385c:	97 95       	ror	r25
    385e:	87 95       	ror	r24
    3860:	08 2f       	mov	r16, r24
    3862:	d9 2e       	mov	r13, r25
    3864:	88 ea       	ldi	r24, 0xA8	; 168
    3866:	19 ea       	ldi	r17, 0xA9	; 169
    3868:	80 dd       	rcall	.-1280   	; 0x336a <twi_start>
    386a:	81 30       	cpi	r24, 0x01	; 1
    386c:	31 f4       	brne	.+12     	; 0x387a <eepromLoadPattern+0x86>
    386e:	63 e0       	ldi	r22, 0x03	; 3
    3870:	70 e0       	ldi	r23, 0x00	; 0
    3872:	8c ec       	ldi	r24, 0xCC	; 204
    3874:	93 e0       	ldi	r25, 0x03	; 3
    3876:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <outputS>
    387a:	8d 2d       	mov	r24, r13
    387c:	a6 dd       	rcall	.-1204   	; 0x33ca <twi_write>
    387e:	80 2f       	mov	r24, r16
    3880:	a4 dd       	rcall	.-1208   	; 0x33ca <twi_write>
    3882:	81 2f       	mov	r24, r17
    3884:	72 dd       	rcall	.-1308   	; 0x336a <twi_start>
    3886:	81 30       	cpi	r24, 0x01	; 1
    3888:	09 f0       	breq	.+2      	; 0x388c <eepromLoadPattern+0x98>
    388a:	48 c1       	rjmp	.+656    	; 0x3b1c <eepromLoadPattern+0x328>
    388c:	84 e1       	ldi	r24, 0x14	; 20
    388e:	eb e4       	ldi	r30, 0x4B	; 75
    3890:	f2 e0       	ldi	r31, 0x02	; 2
    3892:	de 01       	movw	r26, r28
    3894:	af 57       	subi	r26, 0x7F	; 127
    3896:	be 4f       	sbci	r27, 0xFE	; 254
    3898:	01 90       	ld	r0, Z+
    389a:	0d 92       	st	X+, r0
    389c:	8a 95       	dec	r24
    389e:	e1 f7       	brne	.-8      	; 0x3898 <eepromLoadPattern+0xa4>
    38a0:	63 e0       	ldi	r22, 0x03	; 3
    38a2:	70 e0       	ldi	r23, 0x00	; 0
    38a4:	ce 01       	movw	r24, r28
    38a6:	8f 57       	subi	r24, 0x7F	; 127
    38a8:	9e 4f       	sbci	r25, 0xFE	; 254
    38aa:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <outputS>
    38ae:	36 c1       	rjmp	.+620    	; 0x3b1c <eepromLoadPattern+0x328>
    38b0:	9e dd       	rcall	.-1220   	; 0x33ee <twi_readAck>
    38b2:	d8 01       	movw	r26, r16
    38b4:	8d 93       	st	X+, r24
    38b6:	8d 01       	movw	r16, r26
    38b8:	ac 15       	cp	r26, r12
    38ba:	bd 05       	cpc	r27, r13
    38bc:	c9 f7       	brne	.-14     	; 0x38b0 <eepromLoadPattern+0xbc>
    38be:	a2 dd       	rcall	.-1212   	; 0x3404 <twi_readNak>
    38c0:	c0 58       	subi	r28, 0x80	; 128
    38c2:	de 4f       	sbci	r29, 0xFE	; 254
    38c4:	88 83       	st	Y, r24
    38c6:	c0 58       	subi	r28, 0x80	; 128
    38c8:	d1 40       	sbci	r29, 0x01	; 1
    38ca:	76 dd       	rcall	.-1300   	; 0x33b8 <twi_stop>
    38cc:	87 01       	movw	r16, r14
    38ce:	4e 01       	movw	r8, r28
    38d0:	b9 e0       	ldi	r27, 0x09	; 9
    38d2:	8b 0e       	add	r8, r27
    38d4:	91 1c       	adc	r9, r1
    38d6:	f7 01       	movw	r30, r14
    38d8:	d5 01       	movw	r26, r10
    38da:	8d 91       	ld	r24, X+
    38dc:	5d 01       	movw	r10, r26
    38de:	81 93       	st	Z+, r24
    38e0:	a8 15       	cp	r26, r8
    38e2:	b9 05       	cpc	r27, r9
    38e4:	c9 f7       	brne	.-14     	; 0x38d8 <eepromLoadPattern+0xe4>
    38e6:	d1 2c       	mov	r13, r1
    38e8:	f4 01       	movw	r30, r8
    38ea:	81 91       	ld	r24, Z+
    38ec:	4f 01       	movw	r8, r30
    38ee:	f8 01       	movw	r30, r16
    38f0:	80 87       	std	Z+8, r24	; 0x08
    38f2:	4d 2d       	mov	r20, r13
    38f4:	60 81       	ld	r22, Z
    38f6:	0f 5f       	subi	r16, 0xFF	; 255
    38f8:	1f 4f       	sbci	r17, 0xFF	; 255
    38fa:	bb da       	rcall	.-2698   	; 0x2e72 <setOutputVolume>
    38fc:	d3 94       	inc	r13
    38fe:	f8 e0       	ldi	r31, 0x08	; 8
    3900:	df 12       	cpse	r13, r31
    3902:	f2 cf       	rjmp	.-28     	; 0x38e8 <eepromLoadPattern+0xf4>
    3904:	5e 01       	movw	r10, r28
    3906:	81 e1       	ldi	r24, 0x11	; 17
    3908:	a8 0e       	add	r10, r24
    390a:	b1 1c       	adc	r11, r1
    390c:	67 01       	movw	r12, r14
    390e:	90 e1       	ldi	r25, 0x10	; 16
    3910:	c9 0e       	add	r12, r25
    3912:	d1 1c       	adc	r13, r1
    3914:	10 e0       	ldi	r17, 0x00	; 0
    3916:	d5 01       	movw	r26, r10
    3918:	4d 91       	ld	r20, X+
    391a:	5d 01       	movw	r10, r26
    391c:	f6 01       	movw	r30, r12
    391e:	41 93       	st	Z+, r20
    3920:	6f 01       	movw	r12, r30
    3922:	60 e0       	ldi	r22, 0x00	; 0
    3924:	81 2f       	mov	r24, r17
    3926:	1c db       	rcall	.-2504   	; 0x2f60 <outputSampleRate>
    3928:	1f 5f       	subi	r17, 0xFF	; 255
    392a:	18 30       	cpi	r17, 0x08	; 8
    392c:	a1 f7       	brne	.-24     	; 0x3916 <eepromLoadPattern+0x122>
    392e:	fe 01       	movw	r30, r28
    3930:	79 96       	adiw	r30, 0x19	; 25
    3932:	c7 01       	movw	r24, r14
    3934:	48 96       	adiw	r24, 0x18	; 24
    3936:	ae 01       	movw	r20, r28
    3938:	47 5d       	subi	r20, 0xD7	; 215
    393a:	5f 4f       	sbci	r21, 0xFF	; 255
    393c:	21 91       	ld	r18, Z+
    393e:	dc 01       	movw	r26, r24
    3940:	2d 93       	st	X+, r18
    3942:	cd 01       	movw	r24, r26
    3944:	e4 17       	cp	r30, r20
    3946:	f5 07       	cpc	r31, r21
    3948:	c9 f7       	brne	.-14     	; 0x393c <eepromLoadPattern+0x148>
    394a:	57 01       	movw	r10, r14
    394c:	b8 e2       	ldi	r27, 0x28	; 40
    394e:	ab 0e       	add	r10, r27
    3950:	b1 1c       	adc	r11, r1
    3952:	de 01       	movw	r26, r28
    3954:	d9 96       	adiw	r26, 0x39	; 57
    3956:	c5 01       	movw	r24, r10
    3958:	fa 01       	movw	r30, r20
    395a:	21 91       	ld	r18, Z+
    395c:	af 01       	movw	r20, r30
    395e:	fc 01       	movw	r30, r24
    3960:	21 93       	st	Z+, r18
    3962:	cf 01       	movw	r24, r30
    3964:	4a 17       	cp	r20, r26
    3966:	5b 07       	cpc	r21, r27
    3968:	b9 f7       	brne	.-18     	; 0x3958 <eepromLoadPattern+0x164>
    396a:	c7 01       	movw	r24, r14
    396c:	c8 96       	adiw	r24, 0x38	; 56
    396e:	ae 01       	movw	r20, r28
    3970:	47 5b       	subi	r20, 0xB7	; 183
    3972:	5f 4f       	sbci	r21, 0xFF	; 255
    3974:	2d 91       	ld	r18, X+
    3976:	fc 01       	movw	r30, r24
    3978:	21 93       	st	Z+, r18
    397a:	cf 01       	movw	r24, r30
    397c:	a4 17       	cp	r26, r20
    397e:	b5 07       	cpc	r27, r21
    3980:	c9 f7       	brne	.-14     	; 0x3974 <eepromLoadPattern+0x180>
    3982:	c7 01       	movw	r24, r14
    3984:	88 5b       	subi	r24, 0xB8	; 184
    3986:	9f 4f       	sbci	r25, 0xFF	; 255
    3988:	de 01       	movw	r26, r28
    398a:	a7 5a       	subi	r26, 0xA7	; 167
    398c:	bf 4f       	sbci	r27, 0xFF	; 255
    398e:	fa 01       	movw	r30, r20
    3990:	21 91       	ld	r18, Z+
    3992:	af 01       	movw	r20, r30
    3994:	fc 01       	movw	r30, r24
    3996:	21 93       	st	Z+, r18
    3998:	cf 01       	movw	r24, r30
    399a:	4a 17       	cp	r20, r26
    399c:	5b 07       	cpc	r21, r27
    399e:	b9 f7       	brne	.-18     	; 0x398e <eepromLoadPattern+0x19a>
    39a0:	c7 01       	movw	r24, r14
    39a2:	88 5a       	subi	r24, 0xA8	; 168
    39a4:	9f 4f       	sbci	r25, 0xFF	; 255
    39a6:	ae 01       	movw	r20, r28
    39a8:	47 59       	subi	r20, 0x97	; 151
    39aa:	5f 4f       	sbci	r21, 0xFF	; 255
    39ac:	2d 91       	ld	r18, X+
    39ae:	fc 01       	movw	r30, r24
    39b0:	21 93       	st	Z+, r18
    39b2:	cf 01       	movw	r24, r30
    39b4:	a4 17       	cp	r26, r20
    39b6:	b5 07       	cpc	r27, r21
    39b8:	c9 f7       	brne	.-14     	; 0x39ac <eepromLoadPattern+0x1b8>
    39ba:	d7 01       	movw	r26, r14
    39bc:	a8 59       	subi	r26, 0x98	; 152
    39be:	bf 4f       	sbci	r27, 0xFF	; 255
    39c0:	9e 01       	movw	r18, r28
    39c2:	27 58       	subi	r18, 0x87	; 135
    39c4:	3f 4f       	sbci	r19, 0xFF	; 255
    39c6:	fa 01       	movw	r30, r20
    39c8:	81 91       	ld	r24, Z+
    39ca:	af 01       	movw	r20, r30
    39cc:	8d 93       	st	X+, r24
    39ce:	e2 17       	cp	r30, r18
    39d0:	f3 07       	cpc	r31, r19
    39d2:	c9 f7       	brne	.-14     	; 0x39c6 <eepromLoadPattern+0x1d2>
    39d4:	f7 01       	movw	r30, r14
    39d6:	e8 53       	subi	r30, 0x38	; 56
    39d8:	ff 4f       	sbci	r31, 0xFF	; 255
    39da:	eb 96       	adiw	r28, 0x3b	; 59
    39dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    39de:	eb 97       	sbiw	r28, 0x3b	; 59
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	98 2f       	mov	r25, r24
    39e4:	88 27       	eor	r24, r24
    39e6:	ec 96       	adiw	r28, 0x3c	; 60
    39e8:	2f ad       	ldd	r18, Y+63	; 0x3f
    39ea:	ec 97       	sbiw	r28, 0x3c	; 60
    39ec:	82 2b       	or	r24, r18
    39ee:	91 83       	std	Z+1, r25	; 0x01
    39f0:	80 83       	st	Z, r24
    39f2:	ed 96       	adiw	r28, 0x3d	; 61
    39f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    39f6:	ed 97       	sbiw	r28, 0x3d	; 61
    39f8:	32 96       	adiw	r30, 0x02	; 2
    39fa:	80 83       	st	Z, r24
    39fc:	ae 01       	movw	r20, r28
    39fe:	4f 57       	subi	r20, 0x7F	; 127
    3a00:	5f 4f       	sbci	r21, 0xFF	; 255
    3a02:	c7 01       	movw	r24, r14
    3a04:	88 58       	subi	r24, 0x88	; 136
    3a06:	9f 4f       	sbci	r25, 0xFF	; 255
    3a08:	fe 01       	movw	r30, r28
    3a0a:	ef 56       	subi	r30, 0x6F	; 111
    3a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0e:	da 01       	movw	r26, r20
    3a10:	2d 91       	ld	r18, X+
    3a12:	ad 01       	movw	r20, r26
    3a14:	dc 01       	movw	r26, r24
    3a16:	2d 93       	st	X+, r18
    3a18:	cd 01       	movw	r24, r26
    3a1a:	e4 17       	cp	r30, r20
    3a1c:	f5 07       	cpc	r31, r21
    3a1e:	b9 f7       	brne	.-18     	; 0x3a0e <eepromLoadPattern+0x21a>
    3a20:	c7 01       	movw	r24, r14
    3a22:	88 57       	subi	r24, 0x78	; 120
    3a24:	9f 4f       	sbci	r25, 0xFF	; 255
    3a26:	ae 01       	movw	r20, r28
    3a28:	4f 55       	subi	r20, 0x5F	; 95
    3a2a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a2c:	21 91       	ld	r18, Z+
    3a2e:	dc 01       	movw	r26, r24
    3a30:	2d 93       	st	X+, r18
    3a32:	cd 01       	movw	r24, r26
    3a34:	4e 17       	cp	r20, r30
    3a36:	5f 07       	cpc	r21, r31
    3a38:	c9 f7       	brne	.-14     	; 0x3a2c <eepromLoadPattern+0x238>
    3a3a:	87 01       	movw	r16, r14
    3a3c:	08 56       	subi	r16, 0x68	; 104
    3a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a40:	4e 01       	movw	r8, r28
    3a42:	b1 eb       	ldi	r27, 0xB1	; 177
    3a44:	8b 0e       	add	r8, r27
    3a46:	91 1c       	adc	r9, r1
    3a48:	f8 01       	movw	r30, r16
    3a4a:	da 01       	movw	r26, r20
    3a4c:	8d 91       	ld	r24, X+
    3a4e:	ad 01       	movw	r20, r26
    3a50:	81 93       	st	Z+, r24
    3a52:	8a 16       	cp	r8, r26
    3a54:	9b 06       	cpc	r9, r27
    3a56:	c9 f7       	brne	.-14     	; 0x3a4a <eepromLoadPattern+0x256>
    3a58:	6e 01       	movw	r12, r28
    3a5a:	b1 ec       	ldi	r27, 0xC1	; 193
    3a5c:	cb 0e       	add	r12, r27
    3a5e:	d1 1c       	adc	r13, r1
    3a60:	f4 01       	movw	r30, r8
    3a62:	81 91       	ld	r24, Z+
    3a64:	4f 01       	movw	r8, r30
    3a66:	f8 01       	movw	r30, r16
    3a68:	80 8b       	std	Z+16, r24	; 0x10
    3a6a:	d5 01       	movw	r26, r10
    3a6c:	2d 91       	ld	r18, X+
    3a6e:	5d 01       	movw	r10, r26
    3a70:	1f 96       	adiw	r26, 0x0f	; 15
    3a72:	4c 91       	ld	r20, X
    3a74:	60 81       	ld	r22, Z
    3a76:	0f 5f       	subi	r16, 0xFF	; 255
    3a78:	1f 4f       	sbci	r17, 0xFF	; 255
    3a7a:	1f da       	rcall	.-3010   	; 0x2eba <setTrackVolume>
    3a7c:	c8 14       	cp	r12, r8
    3a7e:	d9 04       	cpc	r13, r9
    3a80:	79 f7       	brne	.-34     	; 0x3a60 <eepromLoadPattern+0x26c>
    3a82:	97 01       	movw	r18, r14
    3a84:	28 54       	subi	r18, 0x48	; 72
    3a86:	3f 4f       	sbci	r19, 0xFF	; 255
    3a88:	de 01       	movw	r26, r28
    3a8a:	af 52       	subi	r26, 0x2F	; 47
    3a8c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a8e:	f6 01       	movw	r30, r12
    3a90:	81 91       	ld	r24, Z+
    3a92:	6f 01       	movw	r12, r30
    3a94:	f9 01       	movw	r30, r18
    3a96:	81 93       	st	Z+, r24
    3a98:	9f 01       	movw	r18, r30
    3a9a:	ca 16       	cp	r12, r26
    3a9c:	db 06       	cpc	r13, r27
    3a9e:	b9 f7       	brne	.-18     	; 0x3a8e <eepromLoadPattern+0x29a>
    3aa0:	c7 01       	movw	r24, r14
    3aa2:	85 53       	subi	r24, 0x35	; 53
    3aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa6:	ae 01       	movw	r20, r28
    3aa8:	4f 51       	subi	r20, 0x1F	; 31
    3aaa:	5f 4f       	sbci	r21, 0xFF	; 255
    3aac:	2d 91       	ld	r18, X+
    3aae:	fc 01       	movw	r30, r24
    3ab0:	21 93       	st	Z+, r18
    3ab2:	cf 01       	movw	r24, r30
    3ab4:	4a 17       	cp	r20, r26
    3ab6:	5b 07       	cpc	r21, r27
    3ab8:	c9 f7       	brne	.-14     	; 0x3aac <eepromLoadPattern+0x2b8>
    3aba:	c7 01       	movw	r24, r14
    3abc:	85 52       	subi	r24, 0x25	; 37
    3abe:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac0:	be 01       	movw	r22, r28
    3ac2:	6f 50       	subi	r22, 0x0F	; 15
    3ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ac6:	da 01       	movw	r26, r20
    3ac8:	2d 91       	ld	r18, X+
    3aca:	ad 01       	movw	r20, r26
    3acc:	fc 01       	movw	r30, r24
    3ace:	21 93       	st	Z+, r18
    3ad0:	cf 01       	movw	r24, r30
    3ad2:	a6 17       	cp	r26, r22
    3ad4:	b7 07       	cpc	r27, r23
    3ad6:	b9 f7       	brne	.-18     	; 0x3ac6 <eepromLoadPattern+0x2d2>
    3ad8:	c7 01       	movw	r24, r14
    3ada:	85 51       	subi	r24, 0x15	; 21
    3adc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ade:	fe 01       	movw	r30, r28
    3ae0:	ef 5f       	subi	r30, 0xFF	; 255
    3ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ae4:	db 01       	movw	r26, r22
    3ae6:	2d 91       	ld	r18, X+
    3ae8:	bd 01       	movw	r22, r26
    3aea:	dc 01       	movw	r26, r24
    3aec:	2d 93       	st	X+, r18
    3aee:	cd 01       	movw	r24, r26
    3af0:	e6 17       	cp	r30, r22
    3af2:	f7 07       	cpc	r31, r23
    3af4:	b9 f7       	brne	.-18     	; 0x3ae4 <eepromLoadPattern+0x2f0>
    3af6:	d7 01       	movw	r26, r14
    3af8:	a5 50       	subi	r26, 0x05	; 5
    3afa:	bf 4f       	sbci	r27, 0xFF	; 255
    3afc:	ae 01       	movw	r20, r28
    3afe:	4f 57       	subi	r20, 0x7F	; 127
    3b00:	5e 4f       	sbci	r21, 0xFE	; 254
    3b02:	80 81       	ld	r24, Z
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	98 2f       	mov	r25, r24
    3b08:	88 27       	eor	r24, r24
    3b0a:	21 81       	ldd	r18, Z+1	; 0x01
    3b0c:	82 2b       	or	r24, r18
    3b0e:	8d 93       	st	X+, r24
    3b10:	9d 93       	st	X+, r25
    3b12:	32 96       	adiw	r30, 0x02	; 2
    3b14:	4e 17       	cp	r20, r30
    3b16:	5f 07       	cpc	r21, r31
    3b18:	a1 f7       	brne	.-24     	; 0x3b02 <eepromLoadPattern+0x30e>
    3b1a:	0a c0       	rjmp	.+20     	; 0x3b30 <eepromLoadPattern+0x33c>
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	31 96       	adiw	r30, 0x01	; 1
    3b20:	5f 01       	movw	r10, r30
    3b22:	6e 01       	movw	r12, r28
    3b24:	f0 e8       	ldi	r31, 0x80	; 128
    3b26:	cf 1a       	sub	r12, r31
    3b28:	fe ef       	ldi	r31, 0xFE	; 254
    3b2a:	df 0a       	sbc	r13, r31
    3b2c:	85 01       	movw	r16, r10
    3b2e:	c0 ce       	rjmp	.-640    	; 0x38b0 <eepromLoadPattern+0xbc>
    3b30:	cc 56       	subi	r28, 0x6C	; 108
    3b32:	de 4f       	sbci	r29, 0xFE	; 254
    3b34:	0f b6       	in	r0, 0x3f	; 63
    3b36:	f8 94       	cli
    3b38:	de bf       	out	0x3e, r29	; 62
    3b3a:	0f be       	out	0x3f, r0	; 63
    3b3c:	cd bf       	out	0x3d, r28	; 61
    3b3e:	df 91       	pop	r29
    3b40:	cf 91       	pop	r28
    3b42:	1f 91       	pop	r17
    3b44:	0f 91       	pop	r16
    3b46:	ff 90       	pop	r15
    3b48:	ef 90       	pop	r14
    3b4a:	df 90       	pop	r13
    3b4c:	cf 90       	pop	r12
    3b4e:	bf 90       	pop	r11
    3b50:	af 90       	pop	r10
    3b52:	9f 90       	pop	r9
    3b54:	8f 90       	pop	r8
    3b56:	08 95       	ret

00003b58 <factoryResetEeprom>:
    3b58:	ff 92       	push	r15
    3b5a:	0f 93       	push	r16
    3b5c:	1f 93       	push	r17
    3b5e:	cf 93       	push	r28
    3b60:	df 93       	push	r29
    3b62:	cd b7       	in	r28, 0x3d	; 61
    3b64:	de b7       	in	r29, 0x3e	; 62
    3b66:	65 97       	sbiw	r28, 0x15	; 21
    3b68:	0f b6       	in	r0, 0x3f	; 63
    3b6a:	f8 94       	cli
    3b6c:	de bf       	out	0x3e, r29	; 62
    3b6e:	0f be       	out	0x3f, r0	; 63
    3b70:	cd bf       	out	0x3d, r28	; 61
    3b72:	85 e1       	ldi	r24, 0x15	; 21
    3b74:	e1 ee       	ldi	r30, 0xE1	; 225
    3b76:	f3 e0       	ldi	r31, 0x03	; 3
    3b78:	de 01       	movw	r26, r28
    3b7a:	11 96       	adiw	r26, 0x01	; 1
    3b7c:	01 90       	ld	r0, Z+
    3b7e:	0d 92       	st	X+, r0
    3b80:	8a 95       	dec	r24
    3b82:	e1 f7       	brne	.-8      	; 0x3b7c <factoryResetEeprom+0x24>
    3b84:	10 e0       	ldi	r17, 0x00	; 0
    3b86:	0f 2e       	mov	r0, r31
    3b88:	ff e4       	ldi	r31, 0x4F	; 79
    3b8a:	ff 2e       	mov	r15, r31
    3b8c:	f0 2d       	mov	r31, r0
    3b8e:	0b ed       	ldi	r16, 0xDB	; 219
    3b90:	1f 93       	push	r17
    3b92:	8d b7       	in	r24, 0x3d	; 61
    3b94:	9e b7       	in	r25, 0x3e	; 62
    3b96:	8b 57       	subi	r24, 0x7B	; 123
    3b98:	91 40       	sbci	r25, 0x01	; 1
    3b9a:	0f b6       	in	r0, 0x3f	; 63
    3b9c:	f8 94       	cli
    3b9e:	9e bf       	out	0x3e, r25	; 62
    3ba0:	0f be       	out	0x3f, r0	; 63
    3ba2:	8d bf       	out	0x3d, r24	; 61
    3ba4:	ad b7       	in	r26, 0x3d	; 61
    3ba6:	be b7       	in	r27, 0x3e	; 62
    3ba8:	11 96       	adiw	r26, 0x01	; 1
    3baa:	8b e7       	ldi	r24, 0x7B	; 123
    3bac:	91 e0       	ldi	r25, 0x01	; 1
    3bae:	fe 01       	movw	r30, r28
    3bb0:	7e 96       	adiw	r30, 0x1e	; 30
    3bb2:	01 90       	ld	r0, Z+
    3bb4:	0d 92       	st	X+, r0
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	e1 f7       	brne	.-8      	; 0x3bb2 <factoryResetEeprom+0x5a>
    3bba:	2f dc       	rcall	.-1954   	; 0x341a <eepromSavePattern>
    3bbc:	8f e1       	ldi	r24, 0x1F	; 31
    3bbe:	9e e4       	ldi	r25, 0x4E	; 78
    3bc0:	01 97       	sbiw	r24, 0x01	; 1
    3bc2:	f1 f7       	brne	.-4      	; 0x3bc0 <factoryResetEeprom+0x68>
    3bc4:	00 c0       	rjmp	.+0      	; 0x3bc6 <factoryResetEeprom+0x6e>
    3bc6:	00 00       	nop
    3bc8:	1f 9d       	mul	r17, r15
    3bca:	81 2d       	mov	r24, r1
    3bcc:	11 24       	eor	r1, r1
    3bce:	86 95       	lsr	r24
    3bd0:	86 95       	lsr	r24
    3bd2:	e1 e0       	ldi	r30, 0x01	; 1
    3bd4:	f0 e0       	ldi	r31, 0x00	; 0
    3bd6:	ec 0f       	add	r30, r28
    3bd8:	fd 1f       	adc	r31, r29
    3bda:	e8 0f       	add	r30, r24
    3bdc:	f1 1d       	adc	r31, r1
    3bde:	00 83       	st	Z, r16
    3be0:	0f b6       	in	r0, 0x3f	; 63
    3be2:	f8 94       	cli
    3be4:	de bf       	out	0x3e, r29	; 62
    3be6:	0f be       	out	0x3f, r0	; 63
    3be8:	cd bf       	out	0x3d, r28	; 61
    3bea:	63 e0       	ldi	r22, 0x03	; 3
    3bec:	70 e0       	ldi	r23, 0x00	; 0
    3bee:	ce 01       	movw	r24, r28
    3bf0:	01 96       	adiw	r24, 0x01	; 1
    3bf2:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <outputS>
    3bf6:	1f 5f       	subi	r17, 0xFF	; 255
    3bf8:	1f 3f       	cpi	r17, 0xFF	; 255
    3bfa:	51 f6       	brne	.-108    	; 0x3b90 <factoryResetEeprom+0x38>
    3bfc:	65 96       	adiw	r28, 0x15	; 21
    3bfe:	0f b6       	in	r0, 0x3f	; 63
    3c00:	f8 94       	cli
    3c02:	de bf       	out	0x3e, r29	; 62
    3c04:	0f be       	out	0x3f, r0	; 63
    3c06:	cd bf       	out	0x3d, r28	; 61
    3c08:	df 91       	pop	r29
    3c0a:	cf 91       	pop	r28
    3c0c:	1f 91       	pop	r17
    3c0e:	0f 91       	pop	r16
    3c10:	ff 90       	pop	r15
    3c12:	08 95       	ret

00003c14 <globalWrite>:

//this happens when save button is pressed on global menu. 
void globalWrite(Globals *currentGlobals)
{
    3c14:	cf 93       	push	r28
    3c16:	df 93       	push	r29
    3c18:	ec 01       	movw	r28, r24
	eeprom_write_byte(0,currentGlobals->midiChannel); //this may be wrong, but it does get rid of the warning. 
    3c1a:	68 89       	ldd	r22, Y+16	; 0x10
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	46 d2       	rcall	.+1164   	; 0x40ae <eeprom_write_byte>
	eeprom_write_block(currentGlobals->midiTrackNote,1,16);
    3c22:	40 e1       	ldi	r20, 0x10	; 16
    3c24:	50 e0       	ldi	r21, 0x00	; 0
    3c26:	61 e0       	ldi	r22, 0x01	; 1
    3c28:	70 e0       	ldi	r23, 0x00	; 0
    3c2a:	ce 01       	movw	r24, r28
    3c2c:	41 96       	adiw	r24, 0x11	; 17
    3c2e:	36 d2       	rcall	.+1132   	; 0x409c <eeprom_write_block>
}
    3c30:	df 91       	pop	r29
    3c32:	cf 91       	pop	r28
    3c34:	08 95       	ret

00003c36 <globalLoad>:
//This happens at startup only, in function "initGlobals"

void globalLoad(Globals *currentGlobals, uint8_t factoryReset)
{
    3c36:	cf 93       	push	r28
    3c38:	df 93       	push	r29
	//we need to load all of the global midi settings here. 
	//we can also check the factory reset bit here. 
	//if the program has not gone through the initial state, and had the internal eeprom formatted, then this will return garbage. 
	if(factoryReset==0)
    3c3a:	61 11       	cpse	r22, r1
    3c3c:	0c c0       	rjmp	.+24     	; 0x3c56 <globalLoad+0x20>
    3c3e:	ec 01       	movw	r28, r24
	{
		currentGlobals->midiChannel = eeprom_read_byte(0);
    3c40:	80 e0       	ldi	r24, 0x00	; 0
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	23 d2       	rcall	.+1094   	; 0x408c <eeprom_read_byte>
    3c46:	88 8b       	std	Y+16, r24	; 0x10
		eeprom_read_block(currentGlobals->midiTrackNote,1,16);
    3c48:	40 e1       	ldi	r20, 0x10	; 16
    3c4a:	50 e0       	ldi	r21, 0x00	; 0
    3c4c:	61 e0       	ldi	r22, 0x01	; 1
    3c4e:	70 e0       	ldi	r23, 0x00	; 0
    3c50:	ce 01       	movw	r24, r28
    3c52:	41 96       	adiw	r24, 0x11	; 17
    3c54:	0b d2       	rcall	.+1046   	; 0x406c <eeprom_read_block>
	}
}
    3c56:	df 91       	pop	r29
    3c58:	cf 91       	pop	r28
    3c5a:	08 95       	ret

00003c5c <__subsf3>:
    3c5c:	50 58       	subi	r21, 0x80	; 128

00003c5e <__addsf3>:
    3c5e:	bb 27       	eor	r27, r27
    3c60:	aa 27       	eor	r26, r26
    3c62:	0e d0       	rcall	.+28     	; 0x3c80 <__addsf3x>
    3c64:	4d c1       	rjmp	.+666    	; 0x3f00 <__fp_round>
    3c66:	3e d1       	rcall	.+636    	; 0x3ee4 <__fp_pscA>
    3c68:	30 f0       	brcs	.+12     	; 0x3c76 <__addsf3+0x18>
    3c6a:	43 d1       	rcall	.+646    	; 0x3ef2 <__fp_pscB>
    3c6c:	20 f0       	brcs	.+8      	; 0x3c76 <__addsf3+0x18>
    3c6e:	31 f4       	brne	.+12     	; 0x3c7c <__addsf3+0x1e>
    3c70:	9f 3f       	cpi	r25, 0xFF	; 255
    3c72:	11 f4       	brne	.+4      	; 0x3c78 <__addsf3+0x1a>
    3c74:	1e f4       	brtc	.+6      	; 0x3c7c <__addsf3+0x1e>
    3c76:	33 c1       	rjmp	.+614    	; 0x3ede <__fp_nan>
    3c78:	0e f4       	brtc	.+2      	; 0x3c7c <__addsf3+0x1e>
    3c7a:	e0 95       	com	r30
    3c7c:	e7 fb       	bst	r30, 7
    3c7e:	29 c1       	rjmp	.+594    	; 0x3ed2 <__fp_inf>

00003c80 <__addsf3x>:
    3c80:	e9 2f       	mov	r30, r25
    3c82:	4f d1       	rcall	.+670    	; 0x3f22 <__fp_split3>
    3c84:	80 f3       	brcs	.-32     	; 0x3c66 <__addsf3+0x8>
    3c86:	ba 17       	cp	r27, r26
    3c88:	62 07       	cpc	r22, r18
    3c8a:	73 07       	cpc	r23, r19
    3c8c:	84 07       	cpc	r24, r20
    3c8e:	95 07       	cpc	r25, r21
    3c90:	18 f0       	brcs	.+6      	; 0x3c98 <__addsf3x+0x18>
    3c92:	71 f4       	brne	.+28     	; 0x3cb0 <__addsf3x+0x30>
    3c94:	9e f5       	brtc	.+102    	; 0x3cfc <__addsf3x+0x7c>
    3c96:	67 c1       	rjmp	.+718    	; 0x3f66 <__fp_zero>
    3c98:	0e f4       	brtc	.+2      	; 0x3c9c <__addsf3x+0x1c>
    3c9a:	e0 95       	com	r30
    3c9c:	0b 2e       	mov	r0, r27
    3c9e:	ba 2f       	mov	r27, r26
    3ca0:	a0 2d       	mov	r26, r0
    3ca2:	0b 01       	movw	r0, r22
    3ca4:	b9 01       	movw	r22, r18
    3ca6:	90 01       	movw	r18, r0
    3ca8:	0c 01       	movw	r0, r24
    3caa:	ca 01       	movw	r24, r20
    3cac:	a0 01       	movw	r20, r0
    3cae:	11 24       	eor	r1, r1
    3cb0:	ff 27       	eor	r31, r31
    3cb2:	59 1b       	sub	r21, r25
    3cb4:	99 f0       	breq	.+38     	; 0x3cdc <__addsf3x+0x5c>
    3cb6:	59 3f       	cpi	r21, 0xF9	; 249
    3cb8:	50 f4       	brcc	.+20     	; 0x3cce <__addsf3x+0x4e>
    3cba:	50 3e       	cpi	r21, 0xE0	; 224
    3cbc:	68 f1       	brcs	.+90     	; 0x3d18 <__addsf3x+0x98>
    3cbe:	1a 16       	cp	r1, r26
    3cc0:	f0 40       	sbci	r31, 0x00	; 0
    3cc2:	a2 2f       	mov	r26, r18
    3cc4:	23 2f       	mov	r18, r19
    3cc6:	34 2f       	mov	r19, r20
    3cc8:	44 27       	eor	r20, r20
    3cca:	58 5f       	subi	r21, 0xF8	; 248
    3ccc:	f3 cf       	rjmp	.-26     	; 0x3cb4 <__addsf3x+0x34>
    3cce:	46 95       	lsr	r20
    3cd0:	37 95       	ror	r19
    3cd2:	27 95       	ror	r18
    3cd4:	a7 95       	ror	r26
    3cd6:	f0 40       	sbci	r31, 0x00	; 0
    3cd8:	53 95       	inc	r21
    3cda:	c9 f7       	brne	.-14     	; 0x3cce <__addsf3x+0x4e>
    3cdc:	7e f4       	brtc	.+30     	; 0x3cfc <__addsf3x+0x7c>
    3cde:	1f 16       	cp	r1, r31
    3ce0:	ba 0b       	sbc	r27, r26
    3ce2:	62 0b       	sbc	r22, r18
    3ce4:	73 0b       	sbc	r23, r19
    3ce6:	84 0b       	sbc	r24, r20
    3ce8:	ba f0       	brmi	.+46     	; 0x3d18 <__addsf3x+0x98>
    3cea:	91 50       	subi	r25, 0x01	; 1
    3cec:	a1 f0       	breq	.+40     	; 0x3d16 <__addsf3x+0x96>
    3cee:	ff 0f       	add	r31, r31
    3cf0:	bb 1f       	adc	r27, r27
    3cf2:	66 1f       	adc	r22, r22
    3cf4:	77 1f       	adc	r23, r23
    3cf6:	88 1f       	adc	r24, r24
    3cf8:	c2 f7       	brpl	.-16     	; 0x3cea <__addsf3x+0x6a>
    3cfa:	0e c0       	rjmp	.+28     	; 0x3d18 <__addsf3x+0x98>
    3cfc:	ba 0f       	add	r27, r26
    3cfe:	62 1f       	adc	r22, r18
    3d00:	73 1f       	adc	r23, r19
    3d02:	84 1f       	adc	r24, r20
    3d04:	48 f4       	brcc	.+18     	; 0x3d18 <__addsf3x+0x98>
    3d06:	87 95       	ror	r24
    3d08:	77 95       	ror	r23
    3d0a:	67 95       	ror	r22
    3d0c:	b7 95       	ror	r27
    3d0e:	f7 95       	ror	r31
    3d10:	9e 3f       	cpi	r25, 0xFE	; 254
    3d12:	08 f0       	brcs	.+2      	; 0x3d16 <__addsf3x+0x96>
    3d14:	b3 cf       	rjmp	.-154    	; 0x3c7c <__addsf3+0x1e>
    3d16:	93 95       	inc	r25
    3d18:	88 0f       	add	r24, r24
    3d1a:	08 f0       	brcs	.+2      	; 0x3d1e <__addsf3x+0x9e>
    3d1c:	99 27       	eor	r25, r25
    3d1e:	ee 0f       	add	r30, r30
    3d20:	97 95       	ror	r25
    3d22:	87 95       	ror	r24
    3d24:	08 95       	ret

00003d26 <__divsf3>:
    3d26:	0c d0       	rcall	.+24     	; 0x3d40 <__divsf3x>
    3d28:	eb c0       	rjmp	.+470    	; 0x3f00 <__fp_round>
    3d2a:	e3 d0       	rcall	.+454    	; 0x3ef2 <__fp_pscB>
    3d2c:	40 f0       	brcs	.+16     	; 0x3d3e <__divsf3+0x18>
    3d2e:	da d0       	rcall	.+436    	; 0x3ee4 <__fp_pscA>
    3d30:	30 f0       	brcs	.+12     	; 0x3d3e <__divsf3+0x18>
    3d32:	21 f4       	brne	.+8      	; 0x3d3c <__divsf3+0x16>
    3d34:	5f 3f       	cpi	r21, 0xFF	; 255
    3d36:	19 f0       	breq	.+6      	; 0x3d3e <__divsf3+0x18>
    3d38:	cc c0       	rjmp	.+408    	; 0x3ed2 <__fp_inf>
    3d3a:	51 11       	cpse	r21, r1
    3d3c:	15 c1       	rjmp	.+554    	; 0x3f68 <__fp_szero>
    3d3e:	cf c0       	rjmp	.+414    	; 0x3ede <__fp_nan>

00003d40 <__divsf3x>:
    3d40:	f0 d0       	rcall	.+480    	; 0x3f22 <__fp_split3>
    3d42:	98 f3       	brcs	.-26     	; 0x3d2a <__divsf3+0x4>

00003d44 <__divsf3_pse>:
    3d44:	99 23       	and	r25, r25
    3d46:	c9 f3       	breq	.-14     	; 0x3d3a <__divsf3+0x14>
    3d48:	55 23       	and	r21, r21
    3d4a:	b1 f3       	breq	.-20     	; 0x3d38 <__divsf3+0x12>
    3d4c:	95 1b       	sub	r25, r21
    3d4e:	55 0b       	sbc	r21, r21
    3d50:	bb 27       	eor	r27, r27
    3d52:	aa 27       	eor	r26, r26
    3d54:	62 17       	cp	r22, r18
    3d56:	73 07       	cpc	r23, r19
    3d58:	84 07       	cpc	r24, r20
    3d5a:	38 f0       	brcs	.+14     	; 0x3d6a <__divsf3_pse+0x26>
    3d5c:	9f 5f       	subi	r25, 0xFF	; 255
    3d5e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d60:	22 0f       	add	r18, r18
    3d62:	33 1f       	adc	r19, r19
    3d64:	44 1f       	adc	r20, r20
    3d66:	aa 1f       	adc	r26, r26
    3d68:	a9 f3       	breq	.-22     	; 0x3d54 <__divsf3_pse+0x10>
    3d6a:	33 d0       	rcall	.+102    	; 0x3dd2 <__divsf3_pse+0x8e>
    3d6c:	0e 2e       	mov	r0, r30
    3d6e:	3a f0       	brmi	.+14     	; 0x3d7e <__divsf3_pse+0x3a>
    3d70:	e0 e8       	ldi	r30, 0x80	; 128
    3d72:	30 d0       	rcall	.+96     	; 0x3dd4 <__divsf3_pse+0x90>
    3d74:	91 50       	subi	r25, 0x01	; 1
    3d76:	50 40       	sbci	r21, 0x00	; 0
    3d78:	e6 95       	lsr	r30
    3d7a:	00 1c       	adc	r0, r0
    3d7c:	ca f7       	brpl	.-14     	; 0x3d70 <__divsf3_pse+0x2c>
    3d7e:	29 d0       	rcall	.+82     	; 0x3dd2 <__divsf3_pse+0x8e>
    3d80:	fe 2f       	mov	r31, r30
    3d82:	27 d0       	rcall	.+78     	; 0x3dd2 <__divsf3_pse+0x8e>
    3d84:	66 0f       	add	r22, r22
    3d86:	77 1f       	adc	r23, r23
    3d88:	88 1f       	adc	r24, r24
    3d8a:	bb 1f       	adc	r27, r27
    3d8c:	26 17       	cp	r18, r22
    3d8e:	37 07       	cpc	r19, r23
    3d90:	48 07       	cpc	r20, r24
    3d92:	ab 07       	cpc	r26, r27
    3d94:	b0 e8       	ldi	r27, 0x80	; 128
    3d96:	09 f0       	breq	.+2      	; 0x3d9a <__divsf3_pse+0x56>
    3d98:	bb 0b       	sbc	r27, r27
    3d9a:	80 2d       	mov	r24, r0
    3d9c:	bf 01       	movw	r22, r30
    3d9e:	ff 27       	eor	r31, r31
    3da0:	93 58       	subi	r25, 0x83	; 131
    3da2:	5f 4f       	sbci	r21, 0xFF	; 255
    3da4:	2a f0       	brmi	.+10     	; 0x3db0 <__divsf3_pse+0x6c>
    3da6:	9e 3f       	cpi	r25, 0xFE	; 254
    3da8:	51 05       	cpc	r21, r1
    3daa:	68 f0       	brcs	.+26     	; 0x3dc6 <__divsf3_pse+0x82>
    3dac:	92 c0       	rjmp	.+292    	; 0x3ed2 <__fp_inf>
    3dae:	dc c0       	rjmp	.+440    	; 0x3f68 <__fp_szero>
    3db0:	5f 3f       	cpi	r21, 0xFF	; 255
    3db2:	ec f3       	brlt	.-6      	; 0x3dae <__divsf3_pse+0x6a>
    3db4:	98 3e       	cpi	r25, 0xE8	; 232
    3db6:	dc f3       	brlt	.-10     	; 0x3dae <__divsf3_pse+0x6a>
    3db8:	86 95       	lsr	r24
    3dba:	77 95       	ror	r23
    3dbc:	67 95       	ror	r22
    3dbe:	b7 95       	ror	r27
    3dc0:	f7 95       	ror	r31
    3dc2:	9f 5f       	subi	r25, 0xFF	; 255
    3dc4:	c9 f7       	brne	.-14     	; 0x3db8 <__divsf3_pse+0x74>
    3dc6:	88 0f       	add	r24, r24
    3dc8:	91 1d       	adc	r25, r1
    3dca:	96 95       	lsr	r25
    3dcc:	87 95       	ror	r24
    3dce:	97 f9       	bld	r25, 7
    3dd0:	08 95       	ret
    3dd2:	e1 e0       	ldi	r30, 0x01	; 1
    3dd4:	66 0f       	add	r22, r22
    3dd6:	77 1f       	adc	r23, r23
    3dd8:	88 1f       	adc	r24, r24
    3dda:	bb 1f       	adc	r27, r27
    3ddc:	62 17       	cp	r22, r18
    3dde:	73 07       	cpc	r23, r19
    3de0:	84 07       	cpc	r24, r20
    3de2:	ba 07       	cpc	r27, r26
    3de4:	20 f0       	brcs	.+8      	; 0x3dee <__divsf3_pse+0xaa>
    3de6:	62 1b       	sub	r22, r18
    3de8:	73 0b       	sbc	r23, r19
    3dea:	84 0b       	sbc	r24, r20
    3dec:	ba 0b       	sbc	r27, r26
    3dee:	ee 1f       	adc	r30, r30
    3df0:	88 f7       	brcc	.-30     	; 0x3dd4 <__divsf3_pse+0x90>
    3df2:	e0 95       	com	r30
    3df4:	08 95       	ret

00003df6 <__fixsfsi>:
    3df6:	04 d0       	rcall	.+8      	; 0x3e00 <__fixunssfsi>
    3df8:	68 94       	set
    3dfa:	b1 11       	cpse	r27, r1
    3dfc:	b5 c0       	rjmp	.+362    	; 0x3f68 <__fp_szero>
    3dfe:	08 95       	ret

00003e00 <__fixunssfsi>:
    3e00:	98 d0       	rcall	.+304    	; 0x3f32 <__fp_splitA>
    3e02:	88 f0       	brcs	.+34     	; 0x3e26 <__fixunssfsi+0x26>
    3e04:	9f 57       	subi	r25, 0x7F	; 127
    3e06:	90 f0       	brcs	.+36     	; 0x3e2c <__fixunssfsi+0x2c>
    3e08:	b9 2f       	mov	r27, r25
    3e0a:	99 27       	eor	r25, r25
    3e0c:	b7 51       	subi	r27, 0x17	; 23
    3e0e:	a0 f0       	brcs	.+40     	; 0x3e38 <__fixunssfsi+0x38>
    3e10:	d1 f0       	breq	.+52     	; 0x3e46 <__fixunssfsi+0x46>
    3e12:	66 0f       	add	r22, r22
    3e14:	77 1f       	adc	r23, r23
    3e16:	88 1f       	adc	r24, r24
    3e18:	99 1f       	adc	r25, r25
    3e1a:	1a f0       	brmi	.+6      	; 0x3e22 <__fixunssfsi+0x22>
    3e1c:	ba 95       	dec	r27
    3e1e:	c9 f7       	brne	.-14     	; 0x3e12 <__fixunssfsi+0x12>
    3e20:	12 c0       	rjmp	.+36     	; 0x3e46 <__fixunssfsi+0x46>
    3e22:	b1 30       	cpi	r27, 0x01	; 1
    3e24:	81 f0       	breq	.+32     	; 0x3e46 <__fixunssfsi+0x46>
    3e26:	9f d0       	rcall	.+318    	; 0x3f66 <__fp_zero>
    3e28:	b1 e0       	ldi	r27, 0x01	; 1
    3e2a:	08 95       	ret
    3e2c:	9c c0       	rjmp	.+312    	; 0x3f66 <__fp_zero>
    3e2e:	67 2f       	mov	r22, r23
    3e30:	78 2f       	mov	r23, r24
    3e32:	88 27       	eor	r24, r24
    3e34:	b8 5f       	subi	r27, 0xF8	; 248
    3e36:	39 f0       	breq	.+14     	; 0x3e46 <__fixunssfsi+0x46>
    3e38:	b9 3f       	cpi	r27, 0xF9	; 249
    3e3a:	cc f3       	brlt	.-14     	; 0x3e2e <__fixunssfsi+0x2e>
    3e3c:	86 95       	lsr	r24
    3e3e:	77 95       	ror	r23
    3e40:	67 95       	ror	r22
    3e42:	b3 95       	inc	r27
    3e44:	d9 f7       	brne	.-10     	; 0x3e3c <__fixunssfsi+0x3c>
    3e46:	3e f4       	brtc	.+14     	; 0x3e56 <__fixunssfsi+0x56>
    3e48:	90 95       	com	r25
    3e4a:	80 95       	com	r24
    3e4c:	70 95       	com	r23
    3e4e:	61 95       	neg	r22
    3e50:	7f 4f       	sbci	r23, 0xFF	; 255
    3e52:	8f 4f       	sbci	r24, 0xFF	; 255
    3e54:	9f 4f       	sbci	r25, 0xFF	; 255
    3e56:	08 95       	ret

00003e58 <__floatunsisf>:
    3e58:	e8 94       	clt
    3e5a:	09 c0       	rjmp	.+18     	; 0x3e6e <__floatsisf+0x12>

00003e5c <__floatsisf>:
    3e5c:	97 fb       	bst	r25, 7
    3e5e:	3e f4       	brtc	.+14     	; 0x3e6e <__floatsisf+0x12>
    3e60:	90 95       	com	r25
    3e62:	80 95       	com	r24
    3e64:	70 95       	com	r23
    3e66:	61 95       	neg	r22
    3e68:	7f 4f       	sbci	r23, 0xFF	; 255
    3e6a:	8f 4f       	sbci	r24, 0xFF	; 255
    3e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e6e:	99 23       	and	r25, r25
    3e70:	a9 f0       	breq	.+42     	; 0x3e9c <__floatsisf+0x40>
    3e72:	f9 2f       	mov	r31, r25
    3e74:	96 e9       	ldi	r25, 0x96	; 150
    3e76:	bb 27       	eor	r27, r27
    3e78:	93 95       	inc	r25
    3e7a:	f6 95       	lsr	r31
    3e7c:	87 95       	ror	r24
    3e7e:	77 95       	ror	r23
    3e80:	67 95       	ror	r22
    3e82:	b7 95       	ror	r27
    3e84:	f1 11       	cpse	r31, r1
    3e86:	f8 cf       	rjmp	.-16     	; 0x3e78 <__floatsisf+0x1c>
    3e88:	fa f4       	brpl	.+62     	; 0x3ec8 <__floatsisf+0x6c>
    3e8a:	bb 0f       	add	r27, r27
    3e8c:	11 f4       	brne	.+4      	; 0x3e92 <__floatsisf+0x36>
    3e8e:	60 ff       	sbrs	r22, 0
    3e90:	1b c0       	rjmp	.+54     	; 0x3ec8 <__floatsisf+0x6c>
    3e92:	6f 5f       	subi	r22, 0xFF	; 255
    3e94:	7f 4f       	sbci	r23, 0xFF	; 255
    3e96:	8f 4f       	sbci	r24, 0xFF	; 255
    3e98:	9f 4f       	sbci	r25, 0xFF	; 255
    3e9a:	16 c0       	rjmp	.+44     	; 0x3ec8 <__floatsisf+0x6c>
    3e9c:	88 23       	and	r24, r24
    3e9e:	11 f0       	breq	.+4      	; 0x3ea4 <__floatsisf+0x48>
    3ea0:	96 e9       	ldi	r25, 0x96	; 150
    3ea2:	11 c0       	rjmp	.+34     	; 0x3ec6 <__floatsisf+0x6a>
    3ea4:	77 23       	and	r23, r23
    3ea6:	21 f0       	breq	.+8      	; 0x3eb0 <__floatsisf+0x54>
    3ea8:	9e e8       	ldi	r25, 0x8E	; 142
    3eaa:	87 2f       	mov	r24, r23
    3eac:	76 2f       	mov	r23, r22
    3eae:	05 c0       	rjmp	.+10     	; 0x3eba <__floatsisf+0x5e>
    3eb0:	66 23       	and	r22, r22
    3eb2:	71 f0       	breq	.+28     	; 0x3ed0 <__floatsisf+0x74>
    3eb4:	96 e8       	ldi	r25, 0x86	; 134
    3eb6:	86 2f       	mov	r24, r22
    3eb8:	70 e0       	ldi	r23, 0x00	; 0
    3eba:	60 e0       	ldi	r22, 0x00	; 0
    3ebc:	2a f0       	brmi	.+10     	; 0x3ec8 <__floatsisf+0x6c>
    3ebe:	9a 95       	dec	r25
    3ec0:	66 0f       	add	r22, r22
    3ec2:	77 1f       	adc	r23, r23
    3ec4:	88 1f       	adc	r24, r24
    3ec6:	da f7       	brpl	.-10     	; 0x3ebe <__floatsisf+0x62>
    3ec8:	88 0f       	add	r24, r24
    3eca:	96 95       	lsr	r25
    3ecc:	87 95       	ror	r24
    3ece:	97 f9       	bld	r25, 7
    3ed0:	08 95       	ret

00003ed2 <__fp_inf>:
    3ed2:	97 f9       	bld	r25, 7
    3ed4:	9f 67       	ori	r25, 0x7F	; 127
    3ed6:	80 e8       	ldi	r24, 0x80	; 128
    3ed8:	70 e0       	ldi	r23, 0x00	; 0
    3eda:	60 e0       	ldi	r22, 0x00	; 0
    3edc:	08 95       	ret

00003ede <__fp_nan>:
    3ede:	9f ef       	ldi	r25, 0xFF	; 255
    3ee0:	80 ec       	ldi	r24, 0xC0	; 192
    3ee2:	08 95       	ret

00003ee4 <__fp_pscA>:
    3ee4:	00 24       	eor	r0, r0
    3ee6:	0a 94       	dec	r0
    3ee8:	16 16       	cp	r1, r22
    3eea:	17 06       	cpc	r1, r23
    3eec:	18 06       	cpc	r1, r24
    3eee:	09 06       	cpc	r0, r25
    3ef0:	08 95       	ret

00003ef2 <__fp_pscB>:
    3ef2:	00 24       	eor	r0, r0
    3ef4:	0a 94       	dec	r0
    3ef6:	12 16       	cp	r1, r18
    3ef8:	13 06       	cpc	r1, r19
    3efa:	14 06       	cpc	r1, r20
    3efc:	05 06       	cpc	r0, r21
    3efe:	08 95       	ret

00003f00 <__fp_round>:
    3f00:	09 2e       	mov	r0, r25
    3f02:	03 94       	inc	r0
    3f04:	00 0c       	add	r0, r0
    3f06:	11 f4       	brne	.+4      	; 0x3f0c <__fp_round+0xc>
    3f08:	88 23       	and	r24, r24
    3f0a:	52 f0       	brmi	.+20     	; 0x3f20 <__fp_round+0x20>
    3f0c:	bb 0f       	add	r27, r27
    3f0e:	40 f4       	brcc	.+16     	; 0x3f20 <__fp_round+0x20>
    3f10:	bf 2b       	or	r27, r31
    3f12:	11 f4       	brne	.+4      	; 0x3f18 <__fp_round+0x18>
    3f14:	60 ff       	sbrs	r22, 0
    3f16:	04 c0       	rjmp	.+8      	; 0x3f20 <__fp_round+0x20>
    3f18:	6f 5f       	subi	r22, 0xFF	; 255
    3f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f1c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f20:	08 95       	ret

00003f22 <__fp_split3>:
    3f22:	57 fd       	sbrc	r21, 7
    3f24:	90 58       	subi	r25, 0x80	; 128
    3f26:	44 0f       	add	r20, r20
    3f28:	55 1f       	adc	r21, r21
    3f2a:	59 f0       	breq	.+22     	; 0x3f42 <__fp_splitA+0x10>
    3f2c:	5f 3f       	cpi	r21, 0xFF	; 255
    3f2e:	71 f0       	breq	.+28     	; 0x3f4c <__fp_splitA+0x1a>
    3f30:	47 95       	ror	r20

00003f32 <__fp_splitA>:
    3f32:	88 0f       	add	r24, r24
    3f34:	97 fb       	bst	r25, 7
    3f36:	99 1f       	adc	r25, r25
    3f38:	61 f0       	breq	.+24     	; 0x3f52 <__fp_splitA+0x20>
    3f3a:	9f 3f       	cpi	r25, 0xFF	; 255
    3f3c:	79 f0       	breq	.+30     	; 0x3f5c <__fp_splitA+0x2a>
    3f3e:	87 95       	ror	r24
    3f40:	08 95       	ret
    3f42:	12 16       	cp	r1, r18
    3f44:	13 06       	cpc	r1, r19
    3f46:	14 06       	cpc	r1, r20
    3f48:	55 1f       	adc	r21, r21
    3f4a:	f2 cf       	rjmp	.-28     	; 0x3f30 <__fp_split3+0xe>
    3f4c:	46 95       	lsr	r20
    3f4e:	f1 df       	rcall	.-30     	; 0x3f32 <__fp_splitA>
    3f50:	08 c0       	rjmp	.+16     	; 0x3f62 <__fp_splitA+0x30>
    3f52:	16 16       	cp	r1, r22
    3f54:	17 06       	cpc	r1, r23
    3f56:	18 06       	cpc	r1, r24
    3f58:	99 1f       	adc	r25, r25
    3f5a:	f1 cf       	rjmp	.-30     	; 0x3f3e <__fp_splitA+0xc>
    3f5c:	86 95       	lsr	r24
    3f5e:	71 05       	cpc	r23, r1
    3f60:	61 05       	cpc	r22, r1
    3f62:	08 94       	sec
    3f64:	08 95       	ret

00003f66 <__fp_zero>:
    3f66:	e8 94       	clt

00003f68 <__fp_szero>:
    3f68:	bb 27       	eor	r27, r27
    3f6a:	66 27       	eor	r22, r22
    3f6c:	77 27       	eor	r23, r23
    3f6e:	cb 01       	movw	r24, r22
    3f70:	97 f9       	bld	r25, 7
    3f72:	08 95       	ret

00003f74 <__divmodhi4>:
    3f74:	97 fb       	bst	r25, 7
    3f76:	07 2e       	mov	r0, r23
    3f78:	16 f4       	brtc	.+4      	; 0x3f7e <__divmodhi4+0xa>
    3f7a:	00 94       	com	r0
    3f7c:	06 d0       	rcall	.+12     	; 0x3f8a <__divmodhi4_neg1>
    3f7e:	77 fd       	sbrc	r23, 7
    3f80:	08 d0       	rcall	.+16     	; 0x3f92 <__divmodhi4_neg2>
    3f82:	60 d0       	rcall	.+192    	; 0x4044 <__udivmodhi4>
    3f84:	07 fc       	sbrc	r0, 7
    3f86:	05 d0       	rcall	.+10     	; 0x3f92 <__divmodhi4_neg2>
    3f88:	3e f4       	brtc	.+14     	; 0x3f98 <__divmodhi4_exit>

00003f8a <__divmodhi4_neg1>:
    3f8a:	90 95       	com	r25
    3f8c:	81 95       	neg	r24
    3f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f90:	08 95       	ret

00003f92 <__divmodhi4_neg2>:
    3f92:	70 95       	com	r23
    3f94:	61 95       	neg	r22
    3f96:	7f 4f       	sbci	r23, 0xFF	; 255

00003f98 <__divmodhi4_exit>:
    3f98:	08 95       	ret

00003f9a <__udivmodsi4>:
    3f9a:	a1 e2       	ldi	r26, 0x21	; 33
    3f9c:	1a 2e       	mov	r1, r26
    3f9e:	aa 1b       	sub	r26, r26
    3fa0:	bb 1b       	sub	r27, r27
    3fa2:	fd 01       	movw	r30, r26
    3fa4:	0d c0       	rjmp	.+26     	; 0x3fc0 <__udivmodsi4_ep>

00003fa6 <__udivmodsi4_loop>:
    3fa6:	aa 1f       	adc	r26, r26
    3fa8:	bb 1f       	adc	r27, r27
    3faa:	ee 1f       	adc	r30, r30
    3fac:	ff 1f       	adc	r31, r31
    3fae:	a2 17       	cp	r26, r18
    3fb0:	b3 07       	cpc	r27, r19
    3fb2:	e4 07       	cpc	r30, r20
    3fb4:	f5 07       	cpc	r31, r21
    3fb6:	20 f0       	brcs	.+8      	; 0x3fc0 <__udivmodsi4_ep>
    3fb8:	a2 1b       	sub	r26, r18
    3fba:	b3 0b       	sbc	r27, r19
    3fbc:	e4 0b       	sbc	r30, r20
    3fbe:	f5 0b       	sbc	r31, r21

00003fc0 <__udivmodsi4_ep>:
    3fc0:	66 1f       	adc	r22, r22
    3fc2:	77 1f       	adc	r23, r23
    3fc4:	88 1f       	adc	r24, r24
    3fc6:	99 1f       	adc	r25, r25
    3fc8:	1a 94       	dec	r1
    3fca:	69 f7       	brne	.-38     	; 0x3fa6 <__udivmodsi4_loop>
    3fcc:	60 95       	com	r22
    3fce:	70 95       	com	r23
    3fd0:	80 95       	com	r24
    3fd2:	90 95       	com	r25
    3fd4:	9b 01       	movw	r18, r22
    3fd6:	ac 01       	movw	r20, r24
    3fd8:	bd 01       	movw	r22, r26
    3fda:	cf 01       	movw	r24, r30
    3fdc:	08 95       	ret

00003fde <__divmodsi4>:
    3fde:	05 2e       	mov	r0, r21
    3fe0:	97 fb       	bst	r25, 7
    3fe2:	16 f4       	brtc	.+4      	; 0x3fe8 <__divmodsi4+0xa>
    3fe4:	00 94       	com	r0
    3fe6:	0f d0       	rcall	.+30     	; 0x4006 <__negsi2>
    3fe8:	57 fd       	sbrc	r21, 7
    3fea:	05 d0       	rcall	.+10     	; 0x3ff6 <__divmodsi4_neg2>
    3fec:	d6 df       	rcall	.-84     	; 0x3f9a <__udivmodsi4>
    3fee:	07 fc       	sbrc	r0, 7
    3ff0:	02 d0       	rcall	.+4      	; 0x3ff6 <__divmodsi4_neg2>
    3ff2:	46 f4       	brtc	.+16     	; 0x4004 <__divmodsi4_exit>
    3ff4:	08 c0       	rjmp	.+16     	; 0x4006 <__negsi2>

00003ff6 <__divmodsi4_neg2>:
    3ff6:	50 95       	com	r21
    3ff8:	40 95       	com	r20
    3ffa:	30 95       	com	r19
    3ffc:	21 95       	neg	r18
    3ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    4000:	4f 4f       	sbci	r20, 0xFF	; 255
    4002:	5f 4f       	sbci	r21, 0xFF	; 255

00004004 <__divmodsi4_exit>:
    4004:	08 95       	ret

00004006 <__negsi2>:
    4006:	90 95       	com	r25
    4008:	80 95       	com	r24
    400a:	70 95       	com	r23
    400c:	61 95       	neg	r22
    400e:	7f 4f       	sbci	r23, 0xFF	; 255
    4010:	8f 4f       	sbci	r24, 0xFF	; 255
    4012:	9f 4f       	sbci	r25, 0xFF	; 255
    4014:	08 95       	ret

00004016 <__tablejump2__>:
    4016:	ee 0f       	add	r30, r30
    4018:	ff 1f       	adc	r31, r31
    401a:	88 1f       	adc	r24, r24
    401c:	8b bf       	out	0x3b, r24	; 59
    401e:	07 90       	elpm	r0, Z+
    4020:	f6 91       	elpm	r31, Z
    4022:	e0 2d       	mov	r30, r0
    4024:	19 94       	eijmp

00004026 <__umulhisi3>:
    4026:	a2 9f       	mul	r26, r18
    4028:	b0 01       	movw	r22, r0
    402a:	b3 9f       	mul	r27, r19
    402c:	c0 01       	movw	r24, r0
    402e:	a3 9f       	mul	r26, r19
    4030:	70 0d       	add	r23, r0
    4032:	81 1d       	adc	r24, r1
    4034:	11 24       	eor	r1, r1
    4036:	91 1d       	adc	r25, r1
    4038:	b2 9f       	mul	r27, r18
    403a:	70 0d       	add	r23, r0
    403c:	81 1d       	adc	r24, r1
    403e:	11 24       	eor	r1, r1
    4040:	91 1d       	adc	r25, r1
    4042:	08 95       	ret

00004044 <__udivmodhi4>:
    4044:	aa 1b       	sub	r26, r26
    4046:	bb 1b       	sub	r27, r27
    4048:	51 e1       	ldi	r21, 0x11	; 17
    404a:	07 c0       	rjmp	.+14     	; 0x405a <__udivmodhi4_ep>

0000404c <__udivmodhi4_loop>:
    404c:	aa 1f       	adc	r26, r26
    404e:	bb 1f       	adc	r27, r27
    4050:	a6 17       	cp	r26, r22
    4052:	b7 07       	cpc	r27, r23
    4054:	10 f0       	brcs	.+4      	; 0x405a <__udivmodhi4_ep>
    4056:	a6 1b       	sub	r26, r22
    4058:	b7 0b       	sbc	r27, r23

0000405a <__udivmodhi4_ep>:
    405a:	88 1f       	adc	r24, r24
    405c:	99 1f       	adc	r25, r25
    405e:	5a 95       	dec	r21
    4060:	a9 f7       	brne	.-22     	; 0x404c <__udivmodhi4_loop>
    4062:	80 95       	com	r24
    4064:	90 95       	com	r25
    4066:	bc 01       	movw	r22, r24
    4068:	cd 01       	movw	r24, r26
    406a:	08 95       	ret

0000406c <eeprom_read_block>:
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22

00004070 <eeprom_read_blraw>:
    4070:	fc 01       	movw	r30, r24
    4072:	f9 99       	sbic	0x1f, 1	; 31
    4074:	fe cf       	rjmp	.-4      	; 0x4072 <eeprom_read_blraw+0x2>
    4076:	06 c0       	rjmp	.+12     	; 0x4084 <eeprom_read_blraw+0x14>
    4078:	f2 bd       	out	0x22, r31	; 34
    407a:	e1 bd       	out	0x21, r30	; 33
    407c:	f8 9a       	sbi	0x1f, 0	; 31
    407e:	31 96       	adiw	r30, 0x01	; 1
    4080:	00 b4       	in	r0, 0x20	; 32
    4082:	0d 92       	st	X+, r0
    4084:	41 50       	subi	r20, 0x01	; 1
    4086:	50 40       	sbci	r21, 0x00	; 0
    4088:	b8 f7       	brcc	.-18     	; 0x4078 <eeprom_read_blraw+0x8>
    408a:	08 95       	ret

0000408c <eeprom_read_byte>:
    408c:	f9 99       	sbic	0x1f, 1	; 31
    408e:	fe cf       	rjmp	.-4      	; 0x408c <eeprom_read_byte>
    4090:	92 bd       	out	0x22, r25	; 34
    4092:	81 bd       	out	0x21, r24	; 33
    4094:	f8 9a       	sbi	0x1f, 0	; 31
    4096:	99 27       	eor	r25, r25
    4098:	80 b5       	in	r24, 0x20	; 32
    409a:	08 95       	ret

0000409c <eeprom_write_block>:
    409c:	dc 01       	movw	r26, r24
    409e:	cb 01       	movw	r24, r22
    40a0:	02 c0       	rjmp	.+4      	; 0x40a6 <eeprom_write_block+0xa>
    40a2:	2d 91       	ld	r18, X+
    40a4:	05 d0       	rcall	.+10     	; 0x40b0 <eeprom_write_r18>
    40a6:	41 50       	subi	r20, 0x01	; 1
    40a8:	50 40       	sbci	r21, 0x00	; 0
    40aa:	d8 f7       	brcc	.-10     	; 0x40a2 <eeprom_write_block+0x6>
    40ac:	08 95       	ret

000040ae <eeprom_write_byte>:
    40ae:	26 2f       	mov	r18, r22

000040b0 <eeprom_write_r18>:
    40b0:	f9 99       	sbic	0x1f, 1	; 31
    40b2:	fe cf       	rjmp	.-4      	; 0x40b0 <eeprom_write_r18>
    40b4:	1f ba       	out	0x1f, r1	; 31
    40b6:	92 bd       	out	0x22, r25	; 34
    40b8:	81 bd       	out	0x21, r24	; 33
    40ba:	20 bd       	out	0x20, r18	; 32
    40bc:	0f b6       	in	r0, 0x3f	; 63
    40be:	f8 94       	cli
    40c0:	fa 9a       	sbi	0x1f, 2	; 31
    40c2:	f9 9a       	sbi	0x1f, 1	; 31
    40c4:	0f be       	out	0x3f, r0	; 63
    40c6:	01 96       	adiw	r24, 0x01	; 1
    40c8:	08 95       	ret

000040ca <_exit>:
    40ca:	f8 94       	cli

000040cc <__stop_program>:
    40cc:	ff cf       	rjmp	.-2      	; 0x40cc <__stop_program>
