
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e8  00800200  0000400a  0000409e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000400a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000041f  008003e8  008003e8  00004286  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004286  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000042b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000450  00000000  00000000  000042f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007db0  00000000  00000000  00004748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002152  00000000  00000000  0000c4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000379a  00000000  00000000  0000e64a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c04  00000000  00000000  00011de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001583  00000000  00000000  000129e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000052db  00000000  00000000  00013f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  00019246  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
       2:	00 00       	nop
       4:	12 c1       	rjmp	.+548    	; 0x22a <__bad_interrupt>
       6:	00 00       	nop
       8:	10 c1       	rjmp	.+544    	; 0x22a <__bad_interrupt>
       a:	00 00       	nop
       c:	50 c2       	rjmp	.+1184   	; 0x4ae <__vector_3>
       e:	00 00       	nop
      10:	6e c2       	rjmp	.+1244   	; 0x4ee <__vector_4>
      12:	00 00       	nop
      14:	8c c2       	rjmp	.+1304   	; 0x52e <__vector_5>
      16:	00 00       	nop
      18:	aa c2       	rjmp	.+1364   	; 0x56e <__vector_6>
      1a:	00 00       	nop
      1c:	06 c1       	rjmp	.+524    	; 0x22a <__bad_interrupt>
      1e:	00 00       	nop
      20:	04 c1       	rjmp	.+520    	; 0x22a <__bad_interrupt>
      22:	00 00       	nop
      24:	02 c1       	rjmp	.+516    	; 0x22a <__bad_interrupt>
      26:	00 00       	nop
      28:	00 c1       	rjmp	.+512    	; 0x22a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fe c0       	rjmp	.+508    	; 0x22a <__bad_interrupt>
      2e:	00 00       	nop
      30:	fc c0       	rjmp	.+504    	; 0x22a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__vector_13>
      38:	f8 c0       	rjmp	.+496    	; 0x22a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f7 c0       	rjmp	.+494    	; 0x22c <__vector_15>
      3e:	00 00       	nop
      40:	f4 c0       	rjmp	.+488    	; 0x22a <__bad_interrupt>
      42:	00 00       	nop
      44:	f2 c0       	rjmp	.+484    	; 0x22a <__bad_interrupt>
      46:	00 00       	nop
      48:	f0 c0       	rjmp	.+480    	; 0x22a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ee c0       	rjmp	.+476    	; 0x22a <__bad_interrupt>
      4e:	00 00       	nop
      50:	ec c0       	rjmp	.+472    	; 0x22a <__bad_interrupt>
      52:	00 00       	nop
      54:	ea c0       	rjmp	.+468    	; 0x22a <__bad_interrupt>
      56:	00 00       	nop
      58:	e8 c0       	rjmp	.+464    	; 0x22a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e6 c0       	rjmp	.+460    	; 0x22a <__bad_interrupt>
      5e:	00 00       	nop
      60:	e4 c0       	rjmp	.+456    	; 0x22a <__bad_interrupt>
      62:	00 00       	nop
      64:	e2 c0       	rjmp	.+452    	; 0x22a <__bad_interrupt>
      66:	00 00       	nop
      68:	e0 c0       	rjmp	.+448    	; 0x22a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__vector_27>
      70:	dc c0       	rjmp	.+440    	; 0x22a <__bad_interrupt>
      72:	00 00       	nop
      74:	da c0       	rjmp	.+436    	; 0x22a <__bad_interrupt>
      76:	00 00       	nop
      78:	d8 c0       	rjmp	.+432    	; 0x22a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d6 c0       	rjmp	.+428    	; 0x22a <__bad_interrupt>
      7e:	00 00       	nop
      80:	d4 c0       	rjmp	.+424    	; 0x22a <__bad_interrupt>
      82:	00 00       	nop
      84:	d2 c0       	rjmp	.+420    	; 0x22a <__bad_interrupt>
      86:	00 00       	nop
      88:	d0 c0       	rjmp	.+416    	; 0x22a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ce c0       	rjmp	.+412    	; 0x22a <__bad_interrupt>
      8e:	00 00       	nop
      90:	cc c0       	rjmp	.+408    	; 0x22a <__bad_interrupt>
      92:	00 00       	nop
      94:	ca c0       	rjmp	.+404    	; 0x22a <__bad_interrupt>
      96:	00 00       	nop
      98:	c8 c0       	rjmp	.+400    	; 0x22a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c6 c0       	rjmp	.+396    	; 0x22a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c4 c0       	rjmp	.+392    	; 0x22a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c2 c0       	rjmp	.+388    	; 0x22a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c0 c0       	rjmp	.+384    	; 0x22a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	be c0       	rjmp	.+380    	; 0x22a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bc c0       	rjmp	.+376    	; 0x22a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ba c0       	rjmp	.+372    	; 0x22a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b8 c0       	rjmp	.+368    	; 0x22a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b6 c0       	rjmp	.+364    	; 0x22a <__bad_interrupt>
      be:	00 00       	nop
      c0:	b4 c0       	rjmp	.+360    	; 0x22a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b2 c0       	rjmp	.+356    	; 0x22a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b0 c0       	rjmp	.+352    	; 0x22a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ae c0       	rjmp	.+348    	; 0x22a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ac c0       	rjmp	.+344    	; 0x22a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	aa c0       	rjmp	.+340    	; 0x22a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__vector_54>
      dc:	a6 c0       	rjmp	.+332    	; 0x22a <__bad_interrupt>
      de:	00 00       	nop
      e0:	a4 c0       	rjmp	.+328    	; 0x22a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0e 03       	fmul	r16, r22
      e6:	f8 04       	cpc	r15, r8
      e8:	f8 04       	cpc	r15, r8
      ea:	f8 04       	cpc	r15, r8
      ec:	f8 04       	cpc	r15, r8
      ee:	f8 04       	cpc	r15, r8
      f0:	f8 04       	cpc	r15, r8
      f2:	f8 04       	cpc	r15, r8
      f4:	f8 04       	cpc	r15, r8
      f6:	f8 04       	cpc	r15, r8
      f8:	f8 04       	cpc	r15, r8
      fa:	f8 04       	cpc	r15, r8
      fc:	f8 04       	cpc	r15, r8
      fe:	f8 04       	cpc	r15, r8
     100:	f8 04       	cpc	r15, r8
     102:	f8 04       	cpc	r15, r8
     104:	f8 04       	cpc	r15, r8
     106:	25 03       	mulsu	r18, r21
     108:	42 03       	mulsu	r20, r18
     10a:	69 03       	fmul	r22, r17
     10c:	f8 04       	cpc	r15, r8
     10e:	f8 04       	cpc	r15, r8
     110:	f8 04       	cpc	r15, r8
     112:	f8 04       	cpc	r15, r8
     114:	f8 04       	cpc	r15, r8
     116:	2d 03       	fmul	r18, r21
     118:	4a 03       	fmul	r20, r18
     11a:	71 03       	mulsu	r23, r17
     11c:	f8 04       	cpc	r15, r8
     11e:	f8 04       	cpc	r15, r8
     120:	f8 04       	cpc	r15, r8
     122:	f8 04       	cpc	r15, r8
     124:	f8 04       	cpc	r15, r8
     126:	8c 03       	fmulsu	r16, r20
     128:	c1 03       	fmuls	r20, r17
     12a:	d5 03       	fmuls	r21, r21
     12c:	0a 04       	cpc	r0, r10
     12e:	76 04       	cpc	r7, r6
     130:	f8 04       	cpc	r15, r8
     132:	f8 04       	cpc	r15, r8
     134:	f8 04       	cpc	r15, r8
     136:	94 03       	fmuls	r17, r20
     138:	c9 03       	fmulsu	r20, r17
     13a:	dd 03       	fmulsu	r21, r21
     13c:	12 04       	cpc	r1, r2
     13e:	7e 04       	cpc	r7, r14
     140:	f8 04       	cpc	r15, r8
     142:	f8 04       	cpc	r15, r8
     144:	f8 04       	cpc	r15, r8
     146:	b8 04       	cpc	r11, r8
     148:	d2 04       	cpc	r13, r2
     14a:	f1 04       	cpc	r15, r1
     14c:	f8 04       	cpc	r15, r8
     14e:	f8 04       	cpc	r15, r8
     150:	f8 04       	cpc	r15, r8
     152:	f8 04       	cpc	r15, r8
     154:	f8 04       	cpc	r15, r8
     156:	c0 04       	cpc	r12, r0
     158:	da 04       	cpc	r13, r10
     15a:	aa 0c       	add	r10, r10
     15c:	73 0f       	add	r23, r19
     15e:	73 0f       	add	r23, r19
     160:	73 0f       	add	r23, r19
     162:	73 0f       	add	r23, r19
     164:	73 0f       	add	r23, r19
     166:	73 0f       	add	r23, r19
     168:	73 0f       	add	r23, r19
     16a:	73 0f       	add	r23, r19
     16c:	73 0f       	add	r23, r19
     16e:	73 0f       	add	r23, r19
     170:	73 0f       	add	r23, r19
     172:	73 0f       	add	r23, r19
     174:	73 0f       	add	r23, r19
     176:	73 0f       	add	r23, r19
     178:	73 0f       	add	r23, r19
     17a:	c0 0c       	add	r12, r0
     17c:	da 0c       	add	r13, r10
     17e:	00 0d       	add	r16, r0
     180:	2f 0d       	add	r18, r15
     182:	73 0f       	add	r23, r19
     184:	73 0f       	add	r23, r19
     186:	73 0f       	add	r23, r19
     188:	73 0f       	add	r23, r19
     18a:	73 0f       	add	r23, r19
     18c:	f7 0c       	add	r15, r7
     18e:	1d 0d       	add	r17, r13
     190:	4c 0d       	add	r20, r12
     192:	73 0f       	add	r23, r19
     194:	73 0f       	add	r23, r19
     196:	73 0f       	add	r23, r19
     198:	73 0f       	add	r23, r19
     19a:	5d 0d       	add	r21, r13
     19c:	77 0d       	add	r23, r7
     19e:	b0 0d       	add	r27, r0
     1a0:	fc 0d       	add	r31, r12
     1a2:	2f 0e       	add	r2, r31
     1a4:	99 0e       	add	r9, r25
     1a6:	73 0f       	add	r23, r19
     1a8:	73 0f       	add	r23, r19
     1aa:	73 0f       	add	r23, r19
     1ac:	94 0d       	add	r25, r4
     1ae:	cd 0d       	add	r28, r13
     1b0:	19 0e       	add	r1, r25
     1b2:	4c 0e       	add	r4, r28
     1b4:	b6 0e       	add	r11, r22
     1b6:	73 0f       	add	r23, r19
     1b8:	73 0f       	add	r23, r19
     1ba:	df 0e       	add	r13, r31
     1bc:	f9 0e       	add	r15, r25
     1be:	28 0f       	add	r18, r24
     1c0:	57 0f       	add	r21, r23
     1c2:	73 0f       	add	r23, r19
     1c4:	73 0f       	add	r23, r19
     1c6:	73 0f       	add	r23, r19
     1c8:	73 0f       	add	r23, r19
     1ca:	73 0f       	add	r23, r19
     1cc:	16 0f       	add	r17, r22
     1ce:	45 0f       	add	r20, r21
     1d0:	9b 15       	cp	r25, r11
     1d2:	9e 15       	cp	r25, r14
     1d4:	a1 15       	cp	r26, r1
     1d6:	a4 15       	cp	r26, r4
     1d8:	a7 15       	cp	r26, r7
     1da:	aa 15       	cp	r26, r10
     1dc:	ad 15       	cp	r26, r13
     1de:	b0 15       	cp	r27, r0
     1e0:	b3 15       	cp	r27, r3
     1e2:	b6 15       	cp	r27, r6
     1e4:	b9 15       	cp	r27, r9
     1e6:	bc 15       	cp	r27, r12

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d1 e2       	ldi	r29, 0x21	; 33
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	13 e0       	ldi	r17, 0x03	; 3
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b2 e0       	ldi	r27, 0x02	; 2
     1fe:	ea e0       	ldi	r30, 0x0A	; 10
     200:	f0 e4       	ldi	r31, 0x40	; 64
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a8 3e       	cpi	r26, 0xE8	; 232
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	28 e0       	ldi	r18, 0x08	; 8
     214:	a8 ee       	ldi	r26, 0xE8	; 232
     216:	b3 e0       	ldi	r27, 0x03	; 3
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a7 30       	cpi	r26, 0x07	; 7
     21e:	b2 07       	cpc	r27, r18
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 15 09 	call	0x122a	; 0x122a <main>
     226:	0c 94 03 20 	jmp	0x4006	; 0x4006 <_exit>

0000022a <__bad_interrupt>:
     22a:	ea ce       	rjmp	.-556    	; 0x0 <__vectors>

0000022c <__vector_15>:
uint8_t buttonsCurrentCycle;
uint16_t lastFullBits = 0;
uint8_t currentTrig;

ISR(TIMER2_OVF_vect)
{
     22c:	1f 92       	push	r1
     22e:	0f 92       	push	r0
     230:	0f b6       	in	r0, 0x3f	; 63
     232:	0f 92       	push	r0
     234:	11 24       	eor	r1, r1
     236:	2f 93       	push	r18
     238:	3f 93       	push	r19
     23a:	8f 93       	push	r24
     23c:	9f 93       	push	r25

static inline void debounce() //is this Timer interrupt too long?
{
	static uint8_t vcount_low = 0xFF, vcount_high = 0xFF;
	static uint8_t button_state = 0;
	uint8_t state_changed = ~BUTTON_PIN ^ button_state;
     23e:	83 b1       	in	r24, 0x03	; 3
     240:	20 91 e8 03 	lds	r18, 0x03E8	; 0x8003e8 <__data_end>
     244:	80 95       	com	r24
     246:	38 2f       	mov	r19, r24
     248:	32 27       	eor	r19, r18
	VC_DEC_OR_SET(vcount_high, vcount_low, state_changed);
     24a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <vcount_low.1749>
     24e:	93 23       	and	r25, r19
     250:	89 2f       	mov	r24, r25
     252:	80 95       	com	r24
     254:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <vcount_low.1749>
     258:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     25c:	93 23       	and	r25, r19
     25e:	98 27       	eor	r25, r24
     260:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
     264:	83 23       	and	r24, r19
	state_changed &= vcount_low & vcount_high;
     266:	89 23       	and	r24, r25
	button_state ^= state_changed;
     268:	92 2f       	mov	r25, r18
     26a:	98 27       	eor	r25, r24
     26c:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <__data_end>
	buttons_down |= button_state&state_changed;
     270:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <buttons_down>
     274:	89 23       	and	r24, r25
     276:	82 2b       	or	r24, r18
     278:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <buttons_down>
	debounce();
}
     27c:	9f 91       	pop	r25
     27e:	8f 91       	pop	r24
     280:	3f 91       	pop	r19
     282:	2f 91       	pop	r18
     284:	0f 90       	pop	r0
     286:	0f be       	out	0x3f, r0	; 63
     288:	0f 90       	pop	r0
     28a:	1f 90       	pop	r1
     28c:	18 95       	reti

0000028e <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     28e:	8f ef       	ldi	r24, 0xFF	; 255
     290:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     292:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons and Encoder buttons
	PORTB = 0B01111111; //lets see if we can read these without debouncing
     296:	8f e7       	ldi	r24, 0x7F	; 127
     298:	85 b9       	out	0x05, r24	; 5
     29a:	08 95       	ret

0000029c <listenTrigButtons>:

}

void listenTrigButtons(Pattern *buttonCurrentPattern, Globals *currentGlobals)
{
     29c:	cf 92       	push	r12
     29e:	df 92       	push	r13
     2a0:	ef 92       	push	r14
     2a2:	ff 92       	push	r15
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	6c 01       	movw	r12, r24
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     2ac:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     2b0:	20 95       	com	r18
     2b2:	20 93 fc 03 	sts	0x03FC, r18	; 0x8003fc <buttonsCurrentCycle>
	(currentGlobals->currentTrigButtons) = (buttonsCurrentCycle << 8) | (PINA^255);
     2b6:	90 b1       	in	r25, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	32 2f       	mov	r19, r18
     2bc:	22 27       	eor	r18, r18
     2be:	90 95       	com	r25
     2c0:	29 2b       	or	r18, r25
     2c2:	db 01       	movw	r26, r22
     2c4:	2d 93       	st	X+, r18
     2c6:	3c 93       	st	X, r19
	if(currentGlobals->currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     2c8:	40 91 e9 03 	lds	r20, 0x03E9	; 0x8003e9 <lastFullBits>
     2cc:	50 91 ea 03 	lds	r21, 0x03EA	; 0x8003ea <lastFullBits+0x1>
     2d0:	24 17       	cp	r18, r20
     2d2:	35 07       	cpc	r19, r21
     2d4:	09 f4       	brne	.+2      	; 0x2d8 <listenTrigButtons+0x3c>
     2d6:	43 c0       	rjmp	.+134    	; 0x35e <listenTrigButtons+0xc2>
     2d8:	7b 01       	movw	r14, r22
	{
		lastFullBits = currentGlobals->currentTrigButtons;
     2da:	30 93 ea 03 	sts	0x03EA, r19	; 0x8003ea <lastFullBits+0x1>
     2de:	20 93 e9 03 	sts	0x03E9, r18	; 0x8003e9 <lastFullBits>
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
     2e2:	fb 01       	movw	r30, r22
     2e4:	00 81       	ld	r16, Z
     2e6:	11 81       	ldd	r17, Z+1	; 0x01
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     2e8:	c0 e0       	ldi	r28, 0x00	; 0
		{
			currentTrig = (fullBitsParse&1);
     2ea:	90 2f       	mov	r25, r16
     2ec:	91 70       	andi	r25, 0x01	; 1
     2ee:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <currentTrig>
			if(currentTrig)
     2f2:	99 23       	and	r25, r25
     2f4:	79 f1       	breq	.+94     	; 0x354 <listenTrigButtons+0xb8>
			{
				uint8_t encoderAstate = currentGlobals->menuState >> 4;
				switch (encoderAstate)
     2f6:	d7 01       	movw	r26, r14
     2f8:	16 96       	adiw	r26, 0x06	; 6
     2fa:	9c 91       	ld	r25, X
     2fc:	92 95       	swap	r25
     2fe:	9f 70       	andi	r25, 0x0F	; 15
     300:	91 30       	cpi	r25, 0x01	; 1
     302:	51 f0       	breq	.+20     	; 0x318 <listenTrigButtons+0x7c>
     304:	18 f0       	brcs	.+6      	; 0x30c <listenTrigButtons+0x70>
     306:	94 30       	cpi	r25, 0x04	; 4
     308:	28 f5       	brcc	.+74     	; 0x354 <listenTrigButtons+0xb8>
     30a:	1a c0       	rjmp	.+52     	; 0x340 <listenTrigButtons+0xa4>
				{
	
					//for "performance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
					case 0: //performance mode
					//we trigger a sound here based on the location of bc
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     30c:	4c 2f       	mov	r20, r28
     30e:	b7 01       	movw	r22, r14
     310:	c6 01       	movw	r24, r12
     312:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <playTrack>
					break;
     316:	1e c0       	rjmp	.+60     	; 0x354 <listenTrigButtons+0xb8>

					case 1:
					buttonCurrentPattern->trackSequence[currentGlobals->currentStep] ^= currentGlobals->currentTrigButtons;
     318:	d7 01       	movw	r26, r14
     31a:	14 96       	adiw	r26, 0x04	; 4
     31c:	ec 91       	ld	r30, X
     31e:	14 97       	sbiw	r26, 0x04	; 4
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	ec 0d       	add	r30, r12
     328:	fd 1d       	adc	r31, r13
     32a:	e5 50       	subi	r30, 0x05	; 5
     32c:	ff 4f       	sbci	r31, 0xFF	; 255
     32e:	20 81       	ld	r18, Z
     330:	31 81       	ldd	r19, Z+1	; 0x01
     332:	8d 91       	ld	r24, X+
     334:	9c 91       	ld	r25, X
     336:	82 27       	eor	r24, r18
     338:	93 27       	eor	r25, r19
     33a:	91 83       	std	Z+1, r25	; 0x01
     33c:	80 83       	st	Z, r24
					//turn on step number, or turn off step number.
					//step sequencer mode.
					break;
     33e:	0a c0       	rjmp	.+20     	; 0x354 <listenTrigButtons+0xb8>
					//we want this functionality for both case 2 and case 3
					case 2:
					case 3:;
					//select track for sample assignment
					//uint16_t currentSample = (buttonCurrentPattern->trackSampleMSB[bc]<<8)|(buttonCurrentPattern->trackSampleLSB[bc]);
					currentGlobals->currentTrack = bc;
     340:	f7 01       	movw	r30, r14
     342:	c5 83       	std	Z+5, r28	; 0x05
					currentGlobals->valueChangeFlag |=(1<<triggerChange);
     344:	82 85       	ldd	r24, Z+10	; 0x0a
     346:	82 60       	ori	r24, 0x02	; 2
     348:	82 87       	std	Z+10, r24	; 0x0a
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     34a:	4c 2f       	mov	r20, r28
     34c:	b7 01       	movw	r22, r14
     34e:	c6 01       	movw	r24, r12
     350:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <playTrack>
					default:
					//this should be the same as case 0;
					break;
				}
			}
			fullBitsParse = fullBitsParse>>1;
     354:	16 95       	lsr	r17
     356:	07 95       	ror	r16
	{
		lastFullBits = currentGlobals->currentTrigButtons;
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     358:	cf 5f       	subi	r28, 0xFF	; 255
     35a:	c0 31       	cpi	r28, 0x10	; 16
     35c:	31 f6       	brne	.-116    	; 0x2ea <listenTrigButtons+0x4e>
				}
			}
			fullBitsParse = fullBitsParse>>1;
		}
	}
}
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
     362:	0f 91       	pop	r16
     364:	ff 90       	pop	r15
     366:	ef 90       	pop	r14
     368:	df 90       	pop	r13
     36a:	cf 90       	pop	r12
     36c:	08 95       	ret

0000036e <listenGPButtons>:

void listenGPButtons(Pattern currentPattern, Globals *currentGlobals) //may need to be a pointer
{
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	cc 57       	subi	r28, 0x7C	; 124
     37e:	de 4f       	sbci	r29, 0xFE	; 254
     380:	08 81       	ld	r16, Y
     382:	19 81       	ldd	r17, Y+1	; 0x01
     384:	c4 58       	subi	r28, 0x84	; 132
     386:	d1 40       	sbci	r29, 0x01	; 1

	if(button_down(1 << PB5))
     388:	80 e2       	ldi	r24, 0x20	; 32
     38a:	77 d0       	rcall	.+238    	; 0x47a <button_down>
     38c:	88 23       	and	r24, r24
     38e:	41 f1       	breq	.+80     	; 0x3e0 <listenGPButtons+0x72>
	{ //top encoder button
		if(currentGlobals->menuState>>4==3)
     390:	f8 01       	movw	r30, r16
     392:	86 81       	ldd	r24, Z+6	; 0x06
     394:	82 95       	swap	r24
     396:	8f 70       	andi	r24, 0x0F	; 15
     398:	83 30       	cpi	r24, 0x03	; 3
     39a:	21 f4       	brne	.+8      	; 0x3a4 <listenGPButtons+0x36>
		{
			globalWrite(currentGlobals);
     39c:	c8 01       	movw	r24, r16
     39e:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <globalWrite>
     3a2:	1e c0       	rjmp	.+60     	; 0x3e0 <listenGPButtons+0x72>
		}else
		{
			eepromSavePattern(currentPattern, currentGlobals->currentPatternNumber);
     3a4:	f8 01       	movw	r30, r16
     3a6:	83 81       	ldd	r24, Z+3	; 0x03
     3a8:	8f 93       	push	r24
     3aa:	8d b7       	in	r24, 0x3d	; 61
     3ac:	9e b7       	in	r25, 0x3e	; 62
     3ae:	8b 57       	subi	r24, 0x7B	; 123
     3b0:	91 40       	sbci	r25, 0x01	; 1
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	9e bf       	out	0x3e, r25	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	8d bf       	out	0x3d, r24	; 61
     3bc:	ad b7       	in	r26, 0x3d	; 61
     3be:	be b7       	in	r27, 0x3e	; 62
     3c0:	11 96       	adiw	r26, 0x01	; 1
     3c2:	8b e7       	ldi	r24, 0x7B	; 123
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	fe 01       	movw	r30, r28
     3c8:	39 96       	adiw	r30, 0x09	; 9
     3ca:	01 90       	ld	r0, Z+
     3cc:	0d 92       	st	X+, r0
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	e1 f7       	brne	.-8      	; 0x3ca <listenGPButtons+0x5c>
     3d2:	0e 94 ab 19 	call	0x3356	; 0x3356 <eepromSavePattern>
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
		}
		
	}

	uint8_t encoderSwitchMask = 0b00001000;
	if(button_down(1<<PB6))
     3e0:	80 e4       	ldi	r24, 0x40	; 64
     3e2:	4b d0       	rcall	.+150    	; 0x47a <button_down>
     3e4:	88 23       	and	r24, r24
     3e6:	51 f0       	breq	.+20     	; 0x3fc <listenGPButtons+0x8e>
		{//bottom encoder button
			uint8_t encoderBCheck = currentGlobals->menuState&encoderSwitchMask;
     3e8:	f8 01       	movw	r30, r16
     3ea:	86 81       	ldd	r24, Z+6	; 0x06
			if(encoderBCheck)
     3ec:	83 ff       	sbrs	r24, 3
     3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <listenGPButtons+0x88>
			{
				currentGlobals->menuState &=0b11110111;//turn off the encoderBFlag
     3f0:	87 7f       	andi	r24, 0xF7	; 247
     3f2:	86 83       	std	Z+6, r24	; 0x06
     3f4:	03 c0       	rjmp	.+6      	; 0x3fc <listenGPButtons+0x8e>

			}else
			{
				currentGlobals->menuState |=0b00001000; //turn on the encoderBFlag bit
     3f6:	88 60       	ori	r24, 0x08	; 8
     3f8:	f8 01       	movw	r30, r16
     3fa:	86 83       	std	Z+6, r24	; 0x06
			}
		}
	uint8_t playButtonMask = 0b0000001; //we could probably make a define for both of these masks.
	uint8_t playStateCheck = currentGlobals->playState & playButtonMask;
     3fc:	f8 01       	movw	r30, r16
	if(button_down(1<<PB4))
     3fe:	f7 80       	ldd	r15, Z+7	; 0x07
     400:	80 e1       	ldi	r24, 0x10	; 16
     402:	3b d0       	rcall	.+118    	; 0x47a <button_down>
     404:	88 23       	and	r24, r24
     406:	71 f0       	breq	.+28     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		if(playStateCheck)
     408:	f0 fe       	sbrs	r15, 0
     40a:	06 c0       	rjmp	.+12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		{
			currentGlobals->playState=0; //playstate is on, turn it off
     40c:	f8 01       	movw	r30, r16
     40e:	17 82       	std	Z+7, r1	; 0x07
			currentGlobals->currentGPButtons &=(~0x20); //turn the first bit
     410:	82 81       	ldd	r24, Z+2	; 0x02
     412:	8f 7d       	andi	r24, 0xDF	; 223
     414:	82 83       	std	Z+2, r24	; 0x02
     416:	06 c0       	rjmp	.+12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			
		}else
		{
			currentGlobals->playState=1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	f8 01       	movw	r30, r16
     41c:	87 83       	std	Z+7, r24	; 0x07
			currentGlobals->currentGPButtons |= 0x20; //turn on the first bit
     41e:	82 81       	ldd	r24, Z+2	; 0x02
     420:	80 62       	ori	r24, 0x20	; 32
     422:	82 83       	std	Z+2, r24	; 0x02
		}

	} //not sure which button this is
	uint8_t trackButtonMask = 0b00000001;
	uint8_t trackStateCheck = (currentGlobals->buttonSwitchFlag) & trackButtonMask;
     424:	f8 01       	movw	r30, r16
	if(button_down(1<<PB0))
     426:	f1 84       	ldd	r15, Z+9	; 0x09
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	27 d0       	rcall	.+78     	; 0x47a <button_down>
     42c:	88 23       	and	r24, r24
     42e:	71 f0       	breq	.+28     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	{
		if(trackStateCheck)
     430:	f0 fe       	sbrs	r15, 0
     432:	06 c0       	rjmp	.+12     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		{
			currentGlobals->buttonSwitchFlag = 0;
     434:	f8 01       	movw	r30, r16
     436:	11 86       	std	Z+9, r1	; 0x09
			currentGlobals->currentGPButtons &=(~0x02);
     438:	82 81       	ldd	r24, Z+2	; 0x02
     43a:	8d 7f       	andi	r24, 0xFD	; 253
     43c:	82 83       	std	Z+2, r24	; 0x02
     43e:	06 c0       	rjmp	.+12     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		}else
		{
			currentGlobals->buttonSwitchFlag = 1;
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	f8 01       	movw	r30, r16
     444:	81 87       	std	Z+9, r24	; 0x09
			currentGlobals->currentGPButtons |=0x02;
     446:	82 81       	ldd	r24, Z+2	; 0x02
     448:	82 60       	ori	r24, 0x02	; 2
		}
	}
	uint8_t fineButtonMask = 4;
	uint8_t fineStateCheck = (currentGlobals->currentGPButtons) & fineButtonMask;
     44a:	82 83       	std	Z+2, r24	; 0x02
     44c:	f8 01       	movw	r30, r16
	if(button_down(1<<PB1))
     44e:	f2 80       	ldd	r15, Z+2	; 0x02
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	13 d0       	rcall	.+38     	; 0x47a <button_down>
     454:	88 23       	and	r24, r24
     456:	59 f0       	breq	.+22     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
	{		
		if(fineStateCheck)
     458:	f2 fe       	sbrs	r15, 2
     45a:	05 c0       	rjmp	.+10     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
		{
			
			currentGlobals->currentGPButtons &=(~0x04);
     45c:	f8 01       	movw	r30, r16
     45e:	82 81       	ldd	r24, Z+2	; 0x02
     460:	8b 7f       	andi	r24, 0xFB	; 251
     462:	82 83       	std	Z+2, r24	; 0x02
     464:	04 c0       	rjmp	.+8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
		}else
		{
			currentGlobals->currentGPButtons |=0x04;
     466:	f8 01       	movw	r30, r16
     468:	82 81       	ldd	r24, Z+2	; 0x02
     46a:	84 60       	ori	r24, 0x04	; 4
     46c:	82 83       	std	Z+2, r24	; 0x02
		}
		
	}
}
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	1f 91       	pop	r17
     474:	0f 91       	pop	r16
     476:	ff 90       	pop	r15
     478:	08 95       	ret

0000047a <button_down>:

volatile uint8_t buttons_down;
uint8_t button_down(uint8_t button_mask)
{
	//I should probably check out what this is.
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     47a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     47c:	f8 94       	cli
	{
		button_mask &= buttons_down;
     47e:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <buttons_down>
     482:	89 23       	and	r24, r25
		buttons_down ^= button_mask;
     484:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <buttons_down>
     488:	98 27       	eor	r25, r24
     48a:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <buttons_down>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     48e:	2f bf       	out	0x3f, r18	; 63
	}
	
	return button_mask;
     490:	08 95       	ret

00000492 <initEncoders>:
{
	
	//Interrupt pins - 2,3,4,5
		
	//setup rising edge detection on Int pins 2 and 3 (would maybe want all pin states if this doesn't work).
	EICRA |=(1<<ISC31)|(1<<ISC30)|(1 << ISC21)|(1 << ISC20); 
     492:	e9 e6       	ldi	r30, 0x69	; 105
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	80 6f       	ori	r24, 0xF0	; 240
     49a:	80 83       	st	Z, r24
	
	//same setup on pins 4 and 5
	EICRB |=(1<<ISC51)|(1<<ISC50)|(1 << ISC41)|(1 << ISC40);
     49c:	ea e6       	ldi	r30, 0x6A	; 106
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	8f 60       	ori	r24, 0x0F	; 15
     4a4:	80 83       	st	Z, r24
	
	//enable all 4 interrupts through masking
	EIMSK |=(1<<INT2)|(1<<INT3)|(1<<INT4)|(1<<INT5);
     4a6:	8d b3       	in	r24, 0x1d	; 29
     4a8:	8c 63       	ori	r24, 0x3C	; 60
     4aa:	8d bb       	out	0x1d, r24	; 29
     4ac:	08 95       	ret

000004ae <__vector_3>:


}
 
ISR(INT2_vect)
{
     4ae:	1f 92       	push	r1
     4b0:	0f 92       	push	r0
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	0f 92       	push	r0
     4b6:	11 24       	eor	r1, r1
     4b8:	8f 93       	push	r24
	
	if((1<<topEncoderPinB)&encoderPortStates)//this means Pin 2 is coming after pin 3
     4ba:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <encoderPortStates>
     4be:	81 ff       	sbrs	r24, 1
     4c0:	0b c0       	rjmp	.+22     	; 0x4d8 <__vector_3+0x2a>
	{
		bottomEncoderValue--;
     4c2:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <bottomEncoderValue>
     4c6:	81 50       	subi	r24, 0x01	; 1
     4c8:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <bottomEncoderValue>
		encoderPortStates&=(1<<bottomEncoderPinB)|(1<<bottomEncoderPinA);//reset our two pins to low. 
     4cc:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <encoderPortStates>
     4d0:	8c 70       	andi	r24, 0x0C	; 12
     4d2:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <encoderPortStates>
     4d6:	05 c0       	rjmp	.+10     	; 0x4e2 <__vector_3+0x34>
	}
	else
	{
		encoderPortStates|=(1<<topEncoderPinA); //we want to set bit 0. 
     4d8:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <encoderPortStates>
     4dc:	81 60       	ori	r24, 0x01	; 1
     4de:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <encoderPortStates>
	}
}
     4e2:	8f 91       	pop	r24
     4e4:	0f 90       	pop	r0
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	0f 90       	pop	r0
     4ea:	1f 90       	pop	r1
     4ec:	18 95       	reti

000004ee <__vector_4>:

ISR(INT3_vect)
{
     4ee:	1f 92       	push	r1
     4f0:	0f 92       	push	r0
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	0f 92       	push	r0
     4f6:	11 24       	eor	r1, r1
     4f8:	8f 93       	push	r24

	if((1<<topEncoderPinA)&encoderPortStates)//this means Pin 3 is coming after pin 2
     4fa:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <encoderPortStates>
     4fe:	80 ff       	sbrs	r24, 0
     500:	0b c0       	rjmp	.+22     	; 0x518 <__vector_4+0x2a>
	{
		bottomEncoderValue++;
     502:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <bottomEncoderValue>
     506:	8f 5f       	subi	r24, 0xFF	; 255
     508:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <bottomEncoderValue>
		encoderPortStates&=(1<<bottomEncoderPinA)|(1<<bottomEncoderPinB); //reset our two pins to low.
     50c:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <encoderPortStates>
     510:	8c 70       	andi	r24, 0x0C	; 12
     512:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <encoderPortStates>
     516:	05 c0       	rjmp	.+10     	; 0x522 <__vector_4+0x34>
	}
	else
	{
		encoderPortStates|=(1<<topEncoderPinB); //we want to set bit 1.
     518:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <encoderPortStates>
     51c:	82 60       	ori	r24, 0x02	; 2
     51e:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <encoderPortStates>
	}
}
     522:	8f 91       	pop	r24
     524:	0f 90       	pop	r0
     526:	0f be       	out	0x3f, r0	; 63
     528:	0f 90       	pop	r0
     52a:	1f 90       	pop	r1
     52c:	18 95       	reti

0000052e <__vector_5>:

ISR(INT4_vect)
{
     52e:	1f 92       	push	r1
     530:	0f 92       	push	r0
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	0f 92       	push	r0
     536:	11 24       	eor	r1, r1
     538:	8f 93       	push	r24
	
	if((1<<bottomEncoderPinB)&encoderPortStates)//this means Pin 4 is coming after pin 5
     53a:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <encoderPortStates>
     53e:	83 ff       	sbrs	r24, 3
     540:	0b c0       	rjmp	.+22     	; 0x558 <__vector_5+0x2a>
	{
		topEncoderValue++;
     542:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <topEncoderValue>
     546:	8f 5f       	subi	r24, 0xFF	; 255
     548:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <topEncoderValue>
		encoderPortStates&=(1<<topEncoderPinA)|(1<<topEncoderPinB); //reset our two pins to low.
     54c:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <encoderPortStates>
     550:	83 70       	andi	r24, 0x03	; 3
     552:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <encoderPortStates>
     556:	05 c0       	rjmp	.+10     	; 0x562 <__vector_5+0x34>
	}
	else
	{
		encoderPortStates|=(1<<bottomEncoderPinA); //we want to set bit 2.
     558:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <encoderPortStates>
     55c:	84 60       	ori	r24, 0x04	; 4
     55e:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <encoderPortStates>
	}
}
     562:	8f 91       	pop	r24
     564:	0f 90       	pop	r0
     566:	0f be       	out	0x3f, r0	; 63
     568:	0f 90       	pop	r0
     56a:	1f 90       	pop	r1
     56c:	18 95       	reti

0000056e <__vector_6>:

ISR(INT5_vect)
{
     56e:	1f 92       	push	r1
     570:	0f 92       	push	r0
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	0f 92       	push	r0
     576:	11 24       	eor	r1, r1
     578:	8f 93       	push	r24
	
	if((1<<bottomEncoderPinA)&encoderPortStates)//this means Pin 3 is coming after pin 2
     57a:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <encoderPortStates>
     57e:	82 ff       	sbrs	r24, 2
     580:	0b c0       	rjmp	.+22     	; 0x598 <__vector_6+0x2a>
	{
		topEncoderValue--;
     582:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <topEncoderValue>
     586:	81 50       	subi	r24, 0x01	; 1
     588:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <topEncoderValue>
		encoderPortStates&=(1<<topEncoderPinA)|(1<<topEncoderPinB); //reset our two pins to low.
     58c:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <encoderPortStates>
     590:	83 70       	andi	r24, 0x03	; 3
     592:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <encoderPortStates>
     596:	05 c0       	rjmp	.+10     	; 0x5a2 <__vector_6+0x34>
	}
	else
	{
		encoderPortStates|=(1<<bottomEncoderPinB); //we want to set bit 3.
     598:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <encoderPortStates>
     59c:	88 60       	ori	r24, 0x08	; 8
     59e:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <encoderPortStates>
	}
}
     5a2:	8f 91       	pop	r24
     5a4:	0f 90       	pop	r0
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	0f 90       	pop	r0
     5aa:	1f 90       	pop	r1
     5ac:	18 95       	reti

000005ae <listenEncoders>:


void listenEncoders(Pattern *currentPattern, Globals *currentGlobals)
{
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	9c 01       	movw	r18, r24
     5b4:	fb 01       	movw	r30, r22
	if(topEncoderValue!=topEncoderLastValue)
     5b6:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <topEncoderValue>
     5ba:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <topEncoderLastValue>
     5be:	98 17       	cp	r25, r24
     5c0:	89 f0       	breq	.+34     	; 0x5e4 <listenEncoders+0x36>
	{
		currentGlobals->menuState = ((topEncoderValue%4)<<4);
     5c2:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <topEncoderValue>
     5c6:	93 70       	andi	r25, 0x03	; 3
     5c8:	92 95       	swap	r25
     5ca:	90 7f       	andi	r25, 0xF0	; 240
     5cc:	96 83       	std	Z+6, r25	; 0x06
		bottomEncoderValue = 0; 
     5ce:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <bottomEncoderValue>
		bottomEncoderLastValue = 0; 
     5d2:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <bottomEncoderLastValue>
		currentGlobals->valueChangeFlag |= (1<<encoderChange);
     5d6:	82 85       	ldd	r24, Z+10	; 0x0a
     5d8:	81 60       	ori	r24, 0x01	; 1
     5da:	82 87       	std	Z+10, r24	; 0x0a
		topEncoderLastValue = topEncoderValue;
     5dc:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <topEncoderValue>
     5e0:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <topEncoderLastValue>
	}
	
	if(bottomEncoderValue!=bottomEncoderLastValue)
     5e4:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <bottomEncoderValue>
     5e8:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <bottomEncoderLastValue>
     5ec:	98 17       	cp	r25, r24
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <listenEncoders+0x44>
     5f0:	03 c2       	rjmp	.+1030   	; 0x9f8 <listenEncoders+0x44a>
	{
		 uint8_t menuSub = bottomEncoderValue - bottomEncoderLastValue;
     5f2:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <bottomEncoderValue>
     5f6:	a9 2f       	mov	r26, r25
     5f8:	a8 1b       	sub	r26, r24
		 currentGlobals->valueChangeFlag |= (1<<encoderChange);
     5fa:	92 85       	ldd	r25, Z+10	; 0x0a
     5fc:	91 60       	ori	r25, 0x01	; 1
     5fe:	92 87       	std	Z+10, r25	; 0x0a
		 			//if this value is negative, we increase the menu.
		 			//if positive, we decrement the menu.
		switch(currentGlobals->menuState)
     600:	46 81       	ldd	r20, Z+6	; 0x06
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	4b 33       	cpi	r20, 0x3B	; 59
     606:	51 05       	cpc	r21, r1
     608:	08 f0       	brcs	.+2      	; 0x60c <listenEncoders+0x5e>
     60a:	f2 c1       	rjmp	.+996    	; 0x9f0 <listenEncoders+0x442>
     60c:	ef 01       	movw	r28, r30
     60e:	fa 01       	movw	r30, r20
     610:	88 27       	eor	r24, r24
     612:	ee 58       	subi	r30, 0x8E	; 142
     614:	ff 4f       	sbci	r31, 0xFF	; 255
     616:	8f 4f       	sbci	r24, 0xFF	; 255
     618:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__tablejump2__>
		{
			case PreformanceModeInit:
			if(menuSub==1)
     61c:	a1 30       	cpi	r26, 0x01	; 1
     61e:	41 f4       	brne	.+16     	; 0x630 <listenEncoders+0x82>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     624:	11 f0       	breq	.+4      	; 0x62a <listenEncoders+0x7c>
		switch(currentGlobals->menuState)
		{
			case PreformanceModeInit:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     626:	8b 83       	std	Y+3, r24	; 0x03
     628:	0b c0       	rjmp	.+22     	; 0x640 <listenEncoders+0x92>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     62a:	8f ef       	ldi	r24, 0xFF	; 255
     62c:	8b 83       	std	Y+3, r24	; 0x03
     62e:	08 c0       	rjmp	.+16     	; 0x640 <listenEncoders+0x92>
				}
				
			}else if(menuSub==255) //we don't want to hit this when switching menus after changing from the sequencer. 
     630:	af 3f       	cpi	r26, 0xFF	; 255
     632:	31 f4       	brne	.+12     	; 0x640 <listenEncoders+0x92>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     634:	8b 81       	ldd	r24, Y+3	; 0x03
     636:	81 50       	subi	r24, 0x01	; 1
     638:	10 f0       	brcs	.+4      	; 0x63e <listenEncoders+0x90>
     63a:	8b 83       	std	Y+3, r24	; 0x03
     63c:	01 c0       	rjmp	.+2      	; 0x640 <listenEncoders+0x92>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     63e:	1b 82       	std	Y+3, r1	; 0x03
				}
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     640:	6b 81       	ldd	r22, Y+3	; 0x03
     642:	c9 01       	movw	r24, r18
     644:	0e 94 98 1b 	call	0x3730	; 0x3730 <eepromLoadPattern>
			break;
     648:	d3 c1       	rjmp	.+934    	; 0x9f0 <listenEncoders+0x442>
			
			case SequencerMenuArrow1:			
			if(menuSub==1)
     64a:	a1 30       	cpi	r26, 0x01	; 1
     64c:	19 f4       	brne	.+6      	; 0x654 <listenEncoders+0xa6>
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     64e:	83 e1       	ldi	r24, 0x13	; 19
     650:	8e 83       	std	Y+6, r24	; 0x06
     652:	ce c1       	rjmp	.+924    	; 0x9f0 <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     654:	82 e1       	ldi	r24, 0x12	; 18
     656:	8e 83       	std	Y+6, r24	; 0x06
     658:	cb c1       	rjmp	.+918    	; 0x9f0 <listenEncoders+0x442>
			}
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
     65a:	a1 30       	cpi	r26, 0x01	; 1
     65c:	41 f4       	brne	.+16     	; 0x66e <listenEncoders+0xc0>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     65e:	8b 81       	ldd	r24, Y+3	; 0x03
     660:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     662:	11 f0       	breq	.+4      	; 0x668 <listenEncoders+0xba>
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     664:	8b 83       	std	Y+3, r24	; 0x03
     666:	09 c0       	rjmp	.+18     	; 0x67a <listenEncoders+0xcc>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     668:	8f ef       	ldi	r24, 0xFF	; 255
     66a:	8b 83       	std	Y+3, r24	; 0x03
     66c:	06 c0       	rjmp	.+12     	; 0x67a <listenEncoders+0xcc>
				}
		
			}else
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	81 50       	subi	r24, 0x01	; 1
     672:	10 f0       	brcs	.+4      	; 0x678 <listenEncoders+0xca>
     674:	8b 83       	std	Y+3, r24	; 0x03
     676:	01 c0       	rjmp	.+2      	; 0x67a <listenEncoders+0xcc>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     678:	1b 82       	std	Y+3, r1	; 0x03
				}	
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     67a:	6b 81       	ldd	r22, Y+3	; 0x03
     67c:	c9 01       	movw	r24, r18
     67e:	0e 94 98 1b 	call	0x3730	; 0x3730 <eepromLoadPattern>
			//this keeps the knob reads that will happen right after the eeprom load to write over the loaded values.
			//Now when you load a pattern, the saved positions of the knobs are unchanged until you turn a knob. 
			break;
     682:	b6 c1       	rjmp	.+876    	; 0x9f0 <listenEncoders+0x442>
			
			case SequencerMenuArrow2:
			if(menuSub==1)
     684:	a1 30       	cpi	r26, 0x01	; 1
     686:	19 f4       	brne	.+6      	; 0x68e <listenEncoders+0xe0>
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     688:	81 e1       	ldi	r24, 0x11	; 17
     68a:	8e 83       	std	Y+6, r24	; 0x06
     68c:	b1 c1       	rjmp	.+866    	; 0x9f0 <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     68e:	83 e1       	ldi	r24, 0x13	; 19
     690:	8e 83       	std	Y+6, r24	; 0x06
     692:	ae c1       	rjmp	.+860    	; 0x9f0 <listenEncoders+0x442>
			}
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
     694:	a1 30       	cpi	r26, 0x01	; 1
     696:	79 f4       	brne	.+30     	; 0x6b6 <listenEncoders+0x108>
			{
				currentPattern->numSteps++;
     698:	f9 01       	movw	r30, r18
     69a:	e6 53       	subi	r30, 0x36	; 54
     69c:	ff 4f       	sbci	r31, 0xFF	; 255
     69e:	90 81       	ld	r25, Z
     6a0:	9f 5f       	subi	r25, 0xFF	; 255
				if(currentPattern->numSteps>64)
     6a2:	91 34       	cpi	r25, 0x41	; 65
     6a4:	10 f4       	brcc	.+4      	; 0x6aa <listenEncoders+0xfc>
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
			{
				currentPattern->numSteps++;
     6a6:	90 83       	st	Z, r25
     6a8:	a3 c1       	rjmp	.+838    	; 0x9f0 <listenEncoders+0x442>
				if(currentPattern->numSteps>64)
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
     6aa:	f9 01       	movw	r30, r18
     6ac:	e6 53       	subi	r30, 0x36	; 54
     6ae:	ff 4f       	sbci	r31, 0xFF	; 255
     6b0:	80 e4       	ldi	r24, 0x40	; 64
     6b2:	80 83       	st	Z, r24
     6b4:	9d c1       	rjmp	.+826    	; 0x9f0 <listenEncoders+0x442>
				}
			}else
			{
				currentPattern->numSteps--;
     6b6:	f9 01       	movw	r30, r18
     6b8:	e6 53       	subi	r30, 0x36	; 54
     6ba:	ff 4f       	sbci	r31, 0xFF	; 255
     6bc:	90 81       	ld	r25, Z
     6be:	91 50       	subi	r25, 0x01	; 1
				if(currentPattern->numSteps<1)
     6c0:	11 f0       	breq	.+4      	; 0x6c6 <listenEncoders+0x118>
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
				}
			}else
			{
				currentPattern->numSteps--;
     6c2:	90 83       	st	Z, r25
     6c4:	95 c1       	rjmp	.+810    	; 0x9f0 <listenEncoders+0x442>
				if(currentPattern->numSteps<1)
				{//we can't have a 0 step pattern. 
					currentPattern->numSteps=1;
     6c6:	f9 01       	movw	r30, r18
     6c8:	e6 53       	subi	r30, 0x36	; 54
     6ca:	ff 4f       	sbci	r31, 0xFF	; 255
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	80 83       	st	Z, r24
     6d0:	8f c1       	rjmp	.+798    	; 0x9f0 <listenEncoders+0x442>
				}
			}
			break;
			
			case SequencerMenuArrow3:;
			if(menuSub==1)
     6d2:	a1 30       	cpi	r26, 0x01	; 1
     6d4:	19 f4       	brne	.+6      	; 0x6dc <listenEncoders+0x12e>
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     6d6:	82 e1       	ldi	r24, 0x12	; 18
     6d8:	8e 83       	std	Y+6, r24	; 0x06
     6da:	8a c1       	rjmp	.+788    	; 0x9f0 <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     6dc:	81 e1       	ldi	r24, 0x11	; 17
     6de:	8e 83       	std	Y+6, r24	; 0x06
     6e0:	87 c1       	rjmp	.+782    	; 0x9f0 <listenEncoders+0x442>
			}
			break;
			
			case SequencerMenuArrow3Select:
			//change current step number
			if(menuSub==1)
     6e2:	a1 30       	cpi	r26, 0x01	; 1
     6e4:	69 f4       	brne	.+26     	; 0x700 <listenEncoders+0x152>
			{
				currentGlobals->currentStep++;
     6e6:	9c 81       	ldd	r25, Y+4	; 0x04
     6e8:	9f 5f       	subi	r25, 0xFF	; 255
     6ea:	9c 83       	std	Y+4, r25	; 0x04
				if(currentGlobals->currentStep>=currentPattern->numSteps)
     6ec:	f9 01       	movw	r30, r18
     6ee:	e6 53       	subi	r30, 0x36	; 54
     6f0:	ff 4f       	sbci	r31, 0xFF	; 255
     6f2:	80 81       	ld	r24, Z
     6f4:	98 17       	cp	r25, r24
     6f6:	08 f4       	brcc	.+2      	; 0x6fa <listenEncoders+0x14c>
     6f8:	7b c1       	rjmp	.+758    	; 0x9f0 <listenEncoders+0x442>
				{//our ceiling is the maximum number of steps.
					currentGlobals->currentStep=(currentPattern->numSteps)-1;
     6fa:	81 50       	subi	r24, 0x01	; 1
     6fc:	8c 83       	std	Y+4, r24	; 0x04
     6fe:	78 c1       	rjmp	.+752    	; 0x9f0 <listenEncoders+0x442>
				}
			}else
			{
				currentGlobals->currentStep--;
     700:	9c 81       	ldd	r25, Y+4	; 0x04
     702:	91 50       	subi	r25, 0x01	; 1
     704:	9c 83       	std	Y+4, r25	; 0x04
				if(currentGlobals->currentStep>currentPattern->numSteps)
     706:	f9 01       	movw	r30, r18
     708:	e6 53       	subi	r30, 0x36	; 54
     70a:	ff 4f       	sbci	r31, 0xFF	; 255
     70c:	80 81       	ld	r24, Z
     70e:	89 17       	cp	r24, r25
     710:	08 f0       	brcs	.+2      	; 0x714 <listenEncoders+0x166>
     712:	6e c1       	rjmp	.+732    	; 0x9f0 <listenEncoders+0x442>
				{//do no write notes to step 0.
					currentGlobals->currentStep=0;
     714:	1c 82       	std	Y+4, r1	; 0x04
     716:	6c c1       	rjmp	.+728    	; 0x9f0 <listenEncoders+0x442>
				}				
			}
			break;
			
			case TrackMenuArrow1:;
			if(menuSub==1)
     718:	a1 30       	cpi	r26, 0x01	; 1
     71a:	19 f4       	brne	.+6      	; 0x722 <listenEncoders+0x174>
			{
				currentGlobals->menuState = TrackMenuArrow5;
     71c:	85 e2       	ldi	r24, 0x25	; 37
     71e:	8e 83       	std	Y+6, r24	; 0x06
     720:	67 c1       	rjmp	.+718    	; 0x9f0 <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow2;
     722:	82 e2       	ldi	r24, 0x22	; 34
     724:	8e 83       	std	Y+6, r24	; 0x06
     726:	64 c1       	rjmp	.+712    	; 0x9f0 <listenEncoders+0x442>
			}
			break;
			
			case TrackMenuArrow1Select:;
			uint16_t currentSample = ((currentPattern->trackSampleMSB[currentGlobals->currentTrack])<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     728:	8d 81       	ldd	r24, Y+5	; 0x05
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	b9 01       	movw	r22, r18
     72e:	68 0f       	add	r22, r24
     730:	79 1f       	adc	r23, r25
     732:	fb 01       	movw	r30, r22
     734:	e8 56       	subi	r30, 0x68	; 104
     736:	ff 4f       	sbci	r31, 0xFF	; 255
     738:	40 81       	ld	r20, Z
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	54 2f       	mov	r21, r20
     73e:	44 27       	eor	r20, r20
     740:	70 96       	adiw	r30, 0x10	; 16
     742:	60 81       	ld	r22, Z
     744:	46 2b       	or	r20, r22
			if(menuSub==1)
     746:	a1 30       	cpi	r26, 0x01	; 1
     748:	49 f4       	brne	.+18     	; 0x75c <listenEncoders+0x1ae>
     74a:	4f 5f       	subi	r20, 0xFF	; 255
     74c:	5f 4f       	sbci	r21, 0xFF	; 255
     74e:	41 30       	cpi	r20, 0x01	; 1
     750:	60 e1       	ldi	r22, 0x10	; 16
     752:	56 07       	cpc	r21, r22
     754:	40 f0       	brcs	.+16     	; 0x766 <listenEncoders+0x1b8>
     756:	40 e0       	ldi	r20, 0x00	; 0
     758:	50 e1       	ldi	r21, 0x10	; 16
     75a:	05 c0       	rjmp	.+10     	; 0x766 <listenEncoders+0x1b8>
				{//maximum number of indexable samples.
					currentSample=4096;
				}
			}else
			{//no samples in space 0.
				currentSample--;
     75c:	41 50       	subi	r20, 0x01	; 1
     75e:	51 09       	sbc	r21, r1
				if(currentSample<1)
     760:	11 f4       	brne	.+4      	; 0x766 <listenEncoders+0x1b8>
				{
					currentSample=1;
     762:	41 e0       	ldi	r20, 0x01	; 1
     764:	50 e0       	ldi	r21, 0x00	; 0
				}
			}
			currentPattern->trackSampleLSB[currentGlobals->currentTrack] = (currentSample&0x00FF);//we want to lob off the top 8 bits, just in case. May be unnecessary.
     766:	82 0f       	add	r24, r18
     768:	93 1f       	adc	r25, r19
     76a:	fc 01       	movw	r30, r24
     76c:	e8 55       	subi	r30, 0x58	; 88
     76e:	ff 4f       	sbci	r31, 0xFF	; 255
     770:	40 83       	st	Z, r20
			currentPattern->trackSampleMSB[currentGlobals->currentTrack] = (currentSample>>8); 
     772:	8d 81       	ldd	r24, Y+5	; 0x05
     774:	28 0f       	add	r18, r24
     776:	31 1d       	adc	r19, r1
     778:	f9 01       	movw	r30, r18
     77a:	e8 56       	subi	r30, 0x68	; 104
     77c:	ff 4f       	sbci	r31, 0xFF	; 255
     77e:	50 83       	st	Z, r21
			break;
     780:	37 c1       	rjmp	.+622    	; 0x9f0 <listenEncoders+0x442>
			
			case TrackMenuArrow2:
			if(menuSub==1)
     782:	a1 30       	cpi	r26, 0x01	; 1
     784:	19 f4       	brne	.+6      	; 0x78c <listenEncoders+0x1de>
			{
				currentGlobals->menuState = TrackMenuArrow1;
     786:	81 e2       	ldi	r24, 0x21	; 33
     788:	8e 83       	std	Y+6, r24	; 0x06
     78a:	32 c1       	rjmp	.+612    	; 0x9f0 <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow3;
     78c:	83 e2       	ldi	r24, 0x23	; 35
     78e:	8e 83       	std	Y+6, r24	; 0x06
     790:	2f c1       	rjmp	.+606    	; 0x9f0 <listenEncoders+0x442>
			
			case TrackMenuArrow2Select:
			//change play mode of currently selected track
			//since we only have two play modes currently,
			//we only need to flip the play mode.
			currentPattern->trackPlayMode[currentGlobals->currentTrack] = (!(currentPattern->trackPlayMode[currentGlobals->currentTrack]))&(0b00000001);
     792:	8d 81       	ldd	r24, Y+5	; 0x05
     794:	28 0f       	add	r18, r24
     796:	31 1d       	adc	r19, r1
     798:	f9 01       	movw	r30, r18
     79a:	e8 57       	subi	r30, 0x78	; 120
     79c:	ff 4f       	sbci	r31, 0xFF	; 255
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 81       	ld	r25, Z
     7a2:	91 11       	cpse	r25, r1
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	80 83       	st	Z, r24
			//flip all bits, mask for first bit. 
			break;
     7a8:	23 c1       	rjmp	.+582    	; 0x9f0 <listenEncoders+0x442>
			
			case TrackMenuArrow3:
			if(menuSub==1)
     7aa:	a1 30       	cpi	r26, 0x01	; 1
     7ac:	19 f4       	brne	.+6      	; 0x7b4 <listenEncoders+0x206>
			{
				currentGlobals->menuState = TrackMenuArrow2;
     7ae:	82 e2       	ldi	r24, 0x22	; 34
     7b0:	8e 83       	std	Y+6, r24	; 0x06
     7b2:	1e c1       	rjmp	.+572    	; 0x9f0 <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow4;
     7b4:	84 e2       	ldi	r24, 0x24	; 36
     7b6:	8e 83       	std	Y+6, r24	; 0x06
     7b8:	1b c1       	rjmp	.+566    	; 0x9f0 <listenEncoders+0x442>
			}
			break;
			
			case TrackMenuArrow3Select:
			
			if(menuSub==1)
     7ba:	a1 30       	cpi	r26, 0x01	; 1
     7bc:	b1 f4       	brne	.+44     	; 0x7ea <listenEncoders+0x23c>
			{
				//indexing might be an issue here, don't remember if this is 0 indexed or not. 
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1 ;
     7be:	8d 81       	ldd	r24, Y+5	; 0x05
     7c0:	f9 01       	movw	r30, r18
     7c2:	e8 0f       	add	r30, r24
     7c4:	f1 1d       	adc	r31, r1
     7c6:	80 8d       	ldd	r24, Z+24	; 0x18
     7c8:	8f 5f       	subi	r24, 0xFF	; 255
     7ca:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     7cc:	8d 81       	ldd	r24, Y+5	; 0x05
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	f9 01       	movw	r30, r18
     7d2:	e8 0f       	add	r30, r24
     7d4:	f9 1f       	adc	r31, r25
     7d6:	40 8d       	ldd	r20, Z+24	; 0x18
     7d8:	48 30       	cpi	r20, 0x08	; 8
     7da:	08 f4       	brcc	.+2      	; 0x7de <listenEncoders+0x230>
     7dc:	09 c1       	rjmp	.+530    	; 0x9f0 <listenEncoders+0x442>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=7;
     7de:	f9 01       	movw	r30, r18
     7e0:	e8 0f       	add	r30, r24
     7e2:	f9 1f       	adc	r31, r25
     7e4:	87 e0       	ldi	r24, 0x07	; 7
     7e6:	80 8f       	std	Z+24, r24	; 0x18
     7e8:	03 c1       	rjmp	.+518    	; 0x9f0 <listenEncoders+0x442>
				}
			}else
			{
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])-1;
     7ea:	8d 81       	ldd	r24, Y+5	; 0x05
     7ec:	f9 01       	movw	r30, r18
     7ee:	e8 0f       	add	r30, r24
     7f0:	f1 1d       	adc	r31, r1
     7f2:	80 8d       	ldd	r24, Z+24	; 0x18
     7f4:	81 50       	subi	r24, 0x01	; 1
     7f6:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     7f8:	8d 81       	ldd	r24, Y+5	; 0x05
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	f9 01       	movw	r30, r18
     7fe:	e8 0f       	add	r30, r24
     800:	f9 1f       	adc	r31, r25
     802:	40 8d       	ldd	r20, Z+24	; 0x18
     804:	48 30       	cpi	r20, 0x08	; 8
     806:	08 f4       	brcc	.+2      	; 0x80a <listenEncoders+0x25c>
     808:	f3 c0       	rjmp	.+486    	; 0x9f0 <listenEncoders+0x442>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=0;
     80a:	f9 01       	movw	r30, r18
     80c:	e8 0f       	add	r30, r24
     80e:	f9 1f       	adc	r31, r25
     810:	10 8e       	std	Z+24, r1	; 0x18
     812:	ee c0       	rjmp	.+476    	; 0x9f0 <listenEncoders+0x442>
				}
			}
			break;
			
			case TrackMenuArrow4:
			if(menuSub==1)
     814:	a1 30       	cpi	r26, 0x01	; 1
     816:	19 f4       	brne	.+6      	; 0x81e <listenEncoders+0x270>
			{
				currentGlobals->menuState = TrackMenuArrow3;
     818:	83 e2       	ldi	r24, 0x23	; 35
     81a:	8e 83       	std	Y+6, r24	; 0x06
     81c:	e9 c0       	rjmp	.+466    	; 0x9f0 <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow5;
     81e:	85 e2       	ldi	r24, 0x25	; 37
     820:	8e 83       	std	Y+6, r24	; 0x06
     822:	e6 c0       	rjmp	.+460    	; 0x9f0 <listenEncoders+0x442>
			}
			break;
			
			case TrackMenuArrow4Select:
			if(menuSub==1)
     824:	a1 30       	cpi	r26, 0x01	; 1
     826:	d9 f4       	brne	.+54     	; 0x85e <listenEncoders+0x2b0>
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])++;
     828:	8d 81       	ldd	r24, Y+5	; 0x05
     82a:	f9 01       	movw	r30, r18
     82c:	e8 0f       	add	r30, r24
     82e:	f1 1d       	adc	r31, r1
     830:	e5 51       	subi	r30, 0x15	; 21
     832:	ff 4f       	sbci	r31, 0xFF	; 255
     834:	80 81       	ld	r24, Z
     836:	8f 5f       	subi	r24, 0xFF	; 255
     838:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>3)
     83a:	8d 81       	ldd	r24, Y+5	; 0x05
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	f9 01       	movw	r30, r18
     840:	e8 0f       	add	r30, r24
     842:	f9 1f       	adc	r31, r25
     844:	e5 51       	subi	r30, 0x15	; 21
     846:	ff 4f       	sbci	r31, 0xFF	; 255
     848:	40 81       	ld	r20, Z
     84a:	44 30       	cpi	r20, 0x04	; 4
     84c:	08 f1       	brcs	.+66     	; 0x890 <listenEncoders+0x2e2>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=3;
     84e:	82 0f       	add	r24, r18
     850:	93 1f       	adc	r25, r19
     852:	fc 01       	movw	r30, r24
     854:	e5 51       	subi	r30, 0x15	; 21
     856:	ff 4f       	sbci	r31, 0xFF	; 255
     858:	83 e0       	ldi	r24, 0x03	; 3
     85a:	80 83       	st	Z, r24
     85c:	19 c0       	rjmp	.+50     	; 0x890 <listenEncoders+0x2e2>
				}
			}else
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])--;
     85e:	8d 81       	ldd	r24, Y+5	; 0x05
     860:	f9 01       	movw	r30, r18
     862:	e8 0f       	add	r30, r24
     864:	f1 1d       	adc	r31, r1
     866:	e5 51       	subi	r30, 0x15	; 21
     868:	ff 4f       	sbci	r31, 0xFF	; 255
     86a:	80 81       	ld	r24, Z
     86c:	81 50       	subi	r24, 0x01	; 1
     86e:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>3)
     870:	8d 81       	ldd	r24, Y+5	; 0x05
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	f9 01       	movw	r30, r18
     876:	e8 0f       	add	r30, r24
     878:	f9 1f       	adc	r31, r25
     87a:	e5 51       	subi	r30, 0x15	; 21
     87c:	ff 4f       	sbci	r31, 0xFF	; 255
     87e:	40 81       	ld	r20, Z
     880:	44 30       	cpi	r20, 0x04	; 4
     882:	30 f0       	brcs	.+12     	; 0x890 <listenEncoders+0x2e2>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=0;
     884:	82 0f       	add	r24, r18
     886:	93 1f       	adc	r25, r19
     888:	fc 01       	movw	r30, r24
     88a:	e5 51       	subi	r30, 0x15	; 21
     88c:	ff 4f       	sbci	r31, 0xFF	; 255
     88e:	10 82       	st	Z, r1
				}
			}
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	f9 01       	movw	r30, r18
     896:	e8 0f       	add	r30, r24
     898:	f9 1f       	adc	r31, r25
     89a:	e5 51       	subi	r30, 0x15	; 21
     89c:	ff 4f       	sbci	r31, 0xFF	; 255
     89e:	40 81       	ld	r20, Z
     8a0:	4d 7f       	andi	r20, 0xFD	; 253
     8a2:	89 f4       	brne	.+34     	; 0x8c6 <listenEncoders+0x318>
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
     8a4:	28 0f       	add	r18, r24
     8a6:	39 1f       	adc	r19, r25
     8a8:	f9 01       	movw	r30, r18
     8aa:	e8 56       	subi	r30, 0x68	; 104
     8ac:	ff 4f       	sbci	r31, 0xFF	; 255
     8ae:	60 81       	ld	r22, Z
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	70 96       	adiw	r30, 0x10	; 16
     8b4:	80 81       	ld	r24, Z
     8b6:	2a eb       	ldi	r18, 0xBA	; 186
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	4f ef       	ldi	r20, 0xFF	; 255
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <setTrackVolume>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=0;
				}
			}
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
			{
     8c4:	95 c0       	rjmp	.+298    	; 0x9f0 <listenEncoders+0x442>
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
			}else
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],
				currentPattern->trackMainVolumeLSB[currentGlobals->currentTrack],currentPattern->trackMainVolumeMSB[currentGlobals->currentTrack]);		
     8c6:	f9 01       	movw	r30, r18
     8c8:	e8 0f       	add	r30, r24
     8ca:	f9 1f       	adc	r31, r25
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
			}else
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],
     8cc:	20 a5       	ldd	r18, Z+40	; 0x28
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 ad       	ldd	r20, Z+56	; 0x38
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	df 01       	movw	r26, r30
     8d6:	a8 56       	subi	r26, 0x68	; 104
     8d8:	bf 4f       	sbci	r27, 0xFF	; 255
     8da:	6c 91       	ld	r22, X
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	e8 55       	subi	r30, 0x58	; 88
     8e0:	ff 4f       	sbci	r31, 0xFF	; 255
     8e2:	80 81       	ld	r24, Z
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <setTrackVolume>
     8ea:	82 c0       	rjmp	.+260    	; 0x9f0 <listenEncoders+0x442>
				currentPattern->trackMainVolumeLSB[currentGlobals->currentTrack],currentPattern->trackMainVolumeMSB[currentGlobals->currentTrack]);		
			}
			break;
			
			case TrackMenuArrow5:
			if(menuSub==1)
     8ec:	a1 30       	cpi	r26, 0x01	; 1
     8ee:	19 f4       	brne	.+6      	; 0x8f6 <listenEncoders+0x348>
			{
				currentGlobals->menuState = TrackMenuArrow4;
     8f0:	84 e2       	ldi	r24, 0x24	; 36
     8f2:	8e 83       	std	Y+6, r24	; 0x06
     8f4:	7d c0       	rjmp	.+250    	; 0x9f0 <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow1;
     8f6:	81 e2       	ldi	r24, 0x21	; 33
     8f8:	8e 83       	std	Y+6, r24	; 0x06
     8fa:	7a c0       	rjmp	.+244    	; 0x9f0 <listenEncoders+0x442>
			}
			break;
			
			case TrackMenuArrow5Select:;
			uint16_t sustainTime = (currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack])|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);	
     8fc:	4d 81       	ldd	r20, Y+5	; 0x05
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	b9 01       	movw	r22, r18
     902:	64 0f       	add	r22, r20
     904:	75 1f       	adc	r23, r21
     906:	fb 01       	movw	r30, r22
     908:	e5 53       	subi	r30, 0x35	; 53
     90a:	ff 4f       	sbci	r31, 0xFF	; 255
     90c:	80 81       	ld	r24, Z
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	98 2f       	mov	r25, r24
     912:	88 27       	eor	r24, r24
     914:	70 96       	adiw	r30, 0x10	; 16
     916:	60 81       	ld	r22, Z
     918:	86 2b       	or	r24, r22
			if(menuSub==1)
     91a:	a1 30       	cpi	r26, 0x01	; 1
     91c:	71 f4       	brne	.+28     	; 0x93a <listenEncoders+0x38c>
			{
				if((currentGlobals->currentGPButtons)&(0x04))
     91e:	6a 81       	ldd	r22, Y+2	; 0x02
     920:	62 ff       	sbrs	r22, 2
     922:	02 c0       	rjmp	.+4      	; 0x928 <listenEncoders+0x37a>
				{
					sustainTime++;
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	02 c0       	rjmp	.+4      	; 0x92c <listenEncoders+0x37e>
				}
				else
				{
					sustainTime = sustainTime+236;
     928:	84 51       	subi	r24, 0x14	; 20
     92a:	9f 4f       	sbci	r25, 0xFF	; 255
     92c:	81 36       	cpi	r24, 0x61	; 97
     92e:	ea ee       	ldi	r30, 0xEA	; 234
     930:	9e 07       	cpc	r25, r30
     932:	80 f0       	brcs	.+32     	; 0x954 <listenEncoders+0x3a6>
     934:	80 e6       	ldi	r24, 0x60	; 96
     936:	9a ee       	ldi	r25, 0xEA	; 234
     938:	0d c0       	rjmp	.+26     	; 0x954 <listenEncoders+0x3a6>
				{
					sustainTime = 60000;
				}
			}else
			{
				if((currentGlobals->currentGPButtons)&(0x04))
     93a:	6a 81       	ldd	r22, Y+2	; 0x02
     93c:	62 ff       	sbrs	r22, 2
     93e:	02 c0       	rjmp	.+4      	; 0x944 <listenEncoders+0x396>
				{
					sustainTime--;
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	02 c0       	rjmp	.+4      	; 0x948 <listenEncoders+0x39a>
				}else
				{	
					sustainTime = sustainTime - 236;
     944:	8c 5e       	subi	r24, 0xEC	; 236
     946:	91 09       	sbc	r25, r1
				}
				
				if(sustainTime>60000)
     948:	81 36       	cpi	r24, 0x61	; 97
     94a:	fa ee       	ldi	r31, 0xEA	; 234
     94c:	9f 07       	cpc	r25, r31
     94e:	10 f0       	brcs	.+4      	; 0x954 <listenEncoders+0x3a6>
				{
					sustainTime = 0;
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
			currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack] = (sustainTime>>8);
     954:	42 0f       	add	r20, r18
     956:	53 1f       	adc	r21, r19
     958:	fa 01       	movw	r30, r20
     95a:	e5 53       	subi	r30, 0x35	; 53
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	90 83       	st	Z, r25
			currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] = sustainTime; //upper bits will be truncated.
     960:	9d 81       	ldd	r25, Y+5	; 0x05
     962:	29 0f       	add	r18, r25
     964:	31 1d       	adc	r19, r1
     966:	f9 01       	movw	r30, r18
     968:	e5 52       	subi	r30, 0x25	; 37
     96a:	ff 4f       	sbci	r31, 0xFF	; 255
     96c:	80 83       	st	Z, r24

			break;
     96e:	40 c0       	rjmp	.+128    	; 0x9f0 <listenEncoders+0x442>
			
			case GlobalMenuArrow1:
			if(menuSub==1)
     970:	a1 30       	cpi	r26, 0x01	; 1
     972:	19 f4       	brne	.+6      	; 0x97a <listenEncoders+0x3cc>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     974:	81 e3       	ldi	r24, 0x31	; 49
     976:	8e 83       	std	Y+6, r24	; 0x06
     978:	3b c0       	rjmp	.+118    	; 0x9f0 <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     97a:	82 e3       	ldi	r24, 0x32	; 50
     97c:	8e 83       	std	Y+6, r24	; 0x06
     97e:	38 c0       	rjmp	.+112    	; 0x9f0 <listenEncoders+0x442>
			}
			break;
			
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
     980:	a1 30       	cpi	r26, 0x01	; 1
     982:	49 f4       	brne	.+18     	; 0x996 <listenEncoders+0x3e8>
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     984:	8c 85       	ldd	r24, Y+12	; 0x0c
     986:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->midiChannel>15)
     988:	80 31       	cpi	r24, 0x10	; 16
     98a:	10 f4       	brcc	.+4      	; 0x990 <listenEncoders+0x3e2>
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     98c:	8c 87       	std	Y+12, r24	; 0x0c
     98e:	30 c0       	rjmp	.+96     	; 0x9f0 <listenEncoders+0x442>
				if(currentGlobals->midiChannel>15)
				{
					currentGlobals->midiChannel=15;
     990:	8f e0       	ldi	r24, 0x0F	; 15
     992:	8c 87       	std	Y+12, r24	; 0x0c
     994:	2d c0       	rjmp	.+90     	; 0x9f0 <listenEncoders+0x442>
				}
			}
			else
			{
				//decrement midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)-1;
     996:	8c 85       	ldd	r24, Y+12	; 0x0c
     998:	81 50       	subi	r24, 0x01	; 1
     99a:	10 f0       	brcs	.+4      	; 0x9a0 <listenEncoders+0x3f2>
     99c:	8c 87       	std	Y+12, r24	; 0x0c
     99e:	28 c0       	rjmp	.+80     	; 0x9f0 <listenEncoders+0x442>
				if(currentGlobals->midiChannel>254)
				{
					currentGlobals->midiChannel=0;
     9a0:	1c 86       	std	Y+12, r1	; 0x0c
     9a2:	26 c0       	rjmp	.+76     	; 0x9f0 <listenEncoders+0x442>
				}
			}
			break;
			
			case GlobalMenuArrow2:
			if(menuSub==1)
     9a4:	a1 30       	cpi	r26, 0x01	; 1
     9a6:	19 f4       	brne	.+6      	; 0x9ae <listenEncoders+0x400>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     9a8:	81 e3       	ldi	r24, 0x31	; 49
     9aa:	8e 83       	std	Y+6, r24	; 0x06
     9ac:	21 c0       	rjmp	.+66     	; 0x9f0 <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     9ae:	82 e3       	ldi	r24, 0x32	; 50
     9b0:	8e 83       	std	Y+6, r24	; 0x06
     9b2:	1e c0       	rjmp	.+60     	; 0x9f0 <listenEncoders+0x442>
			break;
			
			case GlobalMenuArrow2Select:;
			//change midi note for selected track.
			//midi range is 0 to 127.
			uint8_t currentMidiNote = currentGlobals->midiTrackNote[currentGlobals->currentTrack];
     9b4:	ed 81       	ldd	r30, Y+5	; 0x05
     9b6:	2e 2f       	mov	r18, r30
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	ce 01       	movw	r24, r28
     9bc:	82 0f       	add	r24, r18
     9be:	93 1f       	adc	r25, r19
     9c0:	fc 01       	movw	r30, r24
     9c2:	85 85       	ldd	r24, Z+13	; 0x0d
			if(menuSub==1)
     9c4:	a1 30       	cpi	r26, 0x01	; 1
     9c6:	21 f4       	brne	.+8      	; 0x9d0 <listenEncoders+0x422>
			{
				//not 100% sure how to set this up.
				currentMidiNote++;
     9c8:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentMidiNote>127)
     9ca:	32 f4       	brpl	.+12     	; 0x9d8 <listenEncoders+0x42a>
				{
					currentMidiNote = 127;
     9cc:	8f e7       	ldi	r24, 0x7F	; 127
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <listenEncoders+0x42a>
				}
			}else
			{
				currentMidiNote--;
     9d0:	81 50       	subi	r24, 0x01	; 1
				if(currentMidiNote>128)
     9d2:	81 38       	cpi	r24, 0x81	; 129
     9d4:	08 f0       	brcs	.+2      	; 0x9d8 <listenEncoders+0x42a>
				{
					currentMidiNote = 0;
     9d6:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			currentGlobals->midiTrackNote[currentGlobals->currentTrack] = currentMidiNote;
     9d8:	f9 01       	movw	r30, r18
     9da:	ec 0f       	add	r30, r28
     9dc:	fd 1f       	adc	r31, r29
     9de:	85 87       	std	Z+13, r24	; 0x0d
			break;
     9e0:	07 c0       	rjmp	.+14     	; 0x9f0 <listenEncoders+0x442>
			
			case GlobalMenuArrow3:
			//currently unreachable, no settings live here atm		
			if(menuSub==1)
     9e2:	a1 30       	cpi	r26, 0x01	; 1
     9e4:	19 f4       	brne	.+6      	; 0x9ec <listenEncoders+0x43e>
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     9e6:	82 e3       	ldi	r24, 0x32	; 50
     9e8:	8e 83       	std	Y+6, r24	; 0x06
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     9ec:	81 e3       	ldi	r24, 0x31	; 49
     9ee:	8e 83       	std	Y+6, r24	; 0x06
			
			case GlobalMenuArrow3Select:
			//nothing to put here yet.
			break;
		}
		bottomEncoderLastValue = bottomEncoderValue;
     9f0:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <bottomEncoderValue>
     9f4:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <bottomEncoderLastValue>
		//menuSub=0;
	}
}
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	08 95       	ret

000009fe <listenEnoderReset>:
uint8_t listenEnoderReset()
{
	uint8_t returnMe = 2;
	if(topEncoderValue!=topEncoderLastValue){
     9fe:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <topEncoderValue>
     a02:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <topEncoderLastValue>
     a06:	98 17       	cp	r25, r24
     a08:	21 f0       	breq	.+8      	; 0xa12 <listenEnoderReset+0x14>
	returnMe = topEncoderValue%2; //should be 0 or 1.
     a0a:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <topEncoderValue>
     a0e:	81 70       	andi	r24, 0x01	; 1
     a10:	08 95       	ret
		//menuSub=0;
	}
}
uint8_t listenEnoderReset()
{
	uint8_t returnMe = 2;
     a12:	82 e0       	ldi	r24, 0x02	; 2
	if(topEncoderValue!=topEncoderLastValue){
	returnMe = topEncoderValue%2; //should be 0 or 1.
	}
	return returnMe;
}
     a14:	08 95       	ret

00000a16 <initArrays>:
#include "globalVariables.h"
#include <string.h>

//takes an array less than 20 and fills it with blank characters
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	ec 01       	movw	r28, r24
	uint8_t lengthOfString = strlen(myString);
     a20:	fa 01       	movw	r30, r20
     a22:	01 90       	ld	r0, Z+
     a24:	00 20       	and	r0, r0
     a26:	e9 f7       	brne	.-6      	; 0xa22 <initArrays+0xc>
     a28:	31 97       	sbiw	r30, 0x01	; 1
     a2a:	8f 01       	movw	r16, r30
     a2c:	04 1b       	sub	r16, r20
     a2e:	15 0b       	sbc	r17, r21
     a30:	90 2f       	mov	r25, r16
	uint8_t charLeft = 20 - lengthOfString;
     a32:	84 e1       	ldi	r24, 0x14	; 20
     a34:	80 1b       	sub	r24, r16
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     a36:	00 23       	and	r16, r16
     a38:	a9 f0       	breq	.+42     	; 0xa64 <initArrays+0x4e>
     a3a:	fa 01       	movw	r30, r20
     a3c:	25 e1       	ldi	r18, 0x15	; 21
     a3e:	26 9f       	mul	r18, r22
     a40:	d0 01       	movw	r26, r0
     a42:	27 9f       	mul	r18, r23
     a44:	b0 0d       	add	r27, r0
     a46:	11 24       	eor	r1, r1
     a48:	ac 0f       	add	r26, r28
     a4a:	bd 1f       	adc	r27, r29
     a4c:	2f ef       	ldi	r18, 0xFF	; 255
     a4e:	20 0f       	add	r18, r16
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	2f 5f       	subi	r18, 0xFF	; 255
     a54:	3f 4f       	sbci	r19, 0xFF	; 255
     a56:	42 0f       	add	r20, r18
     a58:	53 1f       	adc	r21, r19
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     a5a:	21 91       	ld	r18, Z+
     a5c:	2d 93       	st	X+, r18
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
	uint8_t lengthOfString = strlen(myString);
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     a5e:	e4 17       	cp	r30, r20
     a60:	f5 07       	cpc	r31, r21
     a62:	d9 f7       	brne	.-10     	; 0xa5a <initArrays+0x44>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     a64:	88 23       	and	r24, r24
     a66:	89 f0       	breq	.+34     	; 0xa8a <initArrays+0x74>
	{
		myArray[stringNumber][currentIndex] = ' ';
     a68:	45 e1       	ldi	r20, 0x15	; 21
     a6a:	46 9f       	mul	r20, r22
     a6c:	90 01       	movw	r18, r0
     a6e:	47 9f       	mul	r20, r23
     a70:	30 0d       	add	r19, r0
     a72:	11 24       	eor	r1, r1
     a74:	c2 0f       	add	r28, r18
     a76:	d3 1f       	adc	r29, r19
     a78:	08 0f       	add	r16, r24
     a7a:	80 e2       	ldi	r24, 0x20	; 32
     a7c:	fe 01       	movw	r30, r28
     a7e:	e9 0f       	add	r30, r25
     a80:	f1 1d       	adc	r31, r1
     a82:	80 83       	st	Z, r24
		currentIndex++;
     a84:	9f 5f       	subi	r25, 0xFF	; 255
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     a86:	90 13       	cpse	r25, r16
     a88:	f9 cf       	rjmp	.-14     	; 0xa7c <initArrays+0x66>
	{
		myArray[stringNumber][currentIndex] = ' ';
		currentIndex++;
	}
}
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	08 95       	ret

00000a94 <initBank>:

void initBank(Pattern *currentInitPattern)
{
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ac 01       	movw	r20, r24
     a9a:	fc 01       	movw	r30, r24
     a9c:	e8 55       	subi	r30, 0x58	; 88
     a9e:	ff 4f       	sbci	r31, 0xFF	; 255
     aa0:	ec 01       	movw	r28, r24
     aa2:	c8 57       	subi	r28, 0x78	; 120
     aa4:	df 4f       	sbci	r29, 0xFF	; 255
     aa6:	dc 01       	movw	r26, r24
     aa8:	a5 51       	subi	r26, 0x15	; 21
     aaa:	bf 4f       	sbci	r27, 0xFF	; 255
	for(uint8_t i = 0; i<16; i++)
     aac:	90 e0       	ldi	r25, 0x00	; 0
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
    currentInitPattern->trackPlayMode[i] = 0x01;
     aae:	31 e0       	ldi	r19, 0x01	; 1
	currentInitPattern->envelopeType[i] = 3;
     ab0:	23 e0       	ldi	r18, 0x03	; 3

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
     ab2:	9f 5f       	subi	r25, 0xFF	; 255
     ab4:	91 93       	st	Z+, r25
    currentInitPattern->trackPlayMode[i] = 0x01;
     ab6:	39 93       	st	Y+, r19
	currentInitPattern->envelopeType[i] = 3;
     ab8:	2d 93       	st	X+, r18
	currentInitPattern->trackSustainTimeLSB[i] = 0;
     aba:	12 aa       	std	Z+50, r1	; 0x32
	currentInitPattern->trackSustainTimeMSB[i] = 0;
     abc:	12 a2       	std	Z+34, r1	; 0x22
	}
}

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
     abe:	90 31       	cpi	r25, 0x10	; 16
     ac0:	c1 f7       	brne	.-16     	; 0xab2 <initBank+0x1e>
     ac2:	fa 01       	movw	r30, r20
     ac4:	e5 50       	subi	r30, 0x05	; 5
     ac6:	ff 4f       	sbci	r31, 0xFF	; 255
     ac8:	9a 01       	movw	r18, r20
     aca:	25 58       	subi	r18, 0x85	; 133
     acc:	3e 4f       	sbci	r19, 0xFE	; 254
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     ace:	11 92       	st	Z+, r1
     ad0:	11 92       	st	Z+, r1
	currentInitPattern->envelopeType[i] = 3;
	currentInitPattern->trackSustainTimeLSB[i] = 0;
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
     ad2:	e2 17       	cp	r30, r18
     ad4:	f3 07       	cpc	r31, r19
     ad6:	d9 f7       	brne	.-10     	; 0xace <initBank+0x3a>
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
 
  }
  //We need to take these and put them in global. 
  currentInitPattern->patternBPM = 120;
     ad8:	fa 01       	movw	r30, r20
     ada:	e8 53       	subi	r30, 0x38	; 56
     adc:	ff 4f       	sbci	r31, 0xFF	; 255
     ade:	88 e7       	ldi	r24, 0x78	; 120
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	91 83       	std	Z+1, r25	; 0x01
     ae4:	80 83       	st	Z, r24
  currentInitPattern->numSteps = 16;
     ae6:	32 96       	adiw	r30, 0x02	; 2
     ae8:	80 e1       	ldi	r24, 0x10	; 16
     aea:	80 83       	st	Z, r24
}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	08 95       	ret

00000af2 <initGlobals>:

void initGlobals(Globals *currentGlobals, uint8_t factoryReset)
{
     af2:	fc 01       	movw	r30, r24
		currentGlobals->currentTrigButtons=0; //current state of Trig buttons.
     af4:	11 82       	std	Z+1, r1	; 0x01
     af6:	10 82       	st	Z, r1
		currentGlobals->currentGPButtons=0; //current state of GP buttons
     af8:	12 82       	std	Z+2, r1	; 0x02
		currentGlobals->currentPatternNumber=0; //current pattern, between 1 and 256
     afa:	13 82       	std	Z+3, r1	; 0x03
		currentGlobals->currentStep=0; // current step in the sequencer
     afc:	14 82       	std	Z+4, r1	; 0x04
		currentGlobals->currentTrack=0; //current track being edited
     afe:	15 82       	std	Z+5, r1	; 0x05
		currentGlobals->menuState=0; //where the menu is currently
     b00:	16 82       	std	Z+6, r1	; 0x06
		currentGlobals->playState=0; //whether the sequencer is playing, stopped, or paused.
     b02:	17 82       	std	Z+7, r1	; 0x07
		currentGlobals->factoryReset=0; //we may not need this in this struct, but good to have for now.
     b04:	10 86       	std	Z+8, r1	; 0x08
		currentGlobals->buttonSwitchFlag=0; // could be rolled into value bits.
     b06:	11 86       	std	Z+9, r1	; 0x09
		currentGlobals->valueChangeFlag=0; //bit 0 -> changes in encoders, bit 1-> changes in buttons, bit2 -> changes in knobs
     b08:	12 86       	std	Z+10, r1	; 0x0a
		currentGlobals->knobStatus=0; //top 4 bits: knob type, bottom 4 bits: knob location.
     b0a:	13 86       	std	Z+11, r1	; 0x0b
		currentGlobals->releaseCounter = 0;
     b0c:	dc 01       	movw	r26, r24
     b0e:	af 55       	subi	r26, 0x5F	; 95
     b10:	bf 4f       	sbci	r27, 0xFF	; 255
     b12:	1d 92       	st	X+, r1
     b14:	1d 92       	st	X+, r1
     b16:	1d 92       	st	X+, r1
     b18:	1c 92       	st	X, r1
     b1a:	13 97       	sbiw	r26, 0x03	; 3
		currentGlobals->lastGlobalTimer = 0;
     b1c:	a8 5b       	subi	r26, 0xB8	; 184
     b1e:	bf 4f       	sbci	r27, 0xFF	; 255
     b20:	1d 92       	st	X+, r1
     b22:	1d 92       	st	X+, r1
     b24:	1d 92       	st	X+, r1
     b26:	1c 92       	st	X, r1
     b28:	13 97       	sbiw	r26, 0x03	; 3
		currentGlobals->clockCounter = 0;
     b2a:	12 97       	sbiw	r26, 0x02	; 2
     b2c:	1d 92       	st	X+, r1
     b2e:	1c 92       	st	X, r1
		if(factoryReset==1)
     b30:	61 30       	cpi	r22, 0x01	; 1
     b32:	09 f5       	brne	.+66     	; 0xb76 <initGlobals+0x84>
		{
			currentGlobals->midiChannel=0;
     b34:	14 86       	std	Z+12, r1	; 0x0c
			currentGlobals->midiTrackNote[0] = 0x24;
     b36:	84 e2       	ldi	r24, 0x24	; 36
     b38:	85 87       	std	Z+13, r24	; 0x0d
			currentGlobals->midiTrackNote[1] = 0x25;
     b3a:	85 e2       	ldi	r24, 0x25	; 37
     b3c:	86 87       	std	Z+14, r24	; 0x0e
			currentGlobals->midiTrackNote[2] = 0x26;
     b3e:	86 e2       	ldi	r24, 0x26	; 38
     b40:	87 87       	std	Z+15, r24	; 0x0f
			currentGlobals->midiTrackNote[3] = 0x27;
     b42:	87 e2       	ldi	r24, 0x27	; 39
     b44:	80 8b       	std	Z+16, r24	; 0x10
			currentGlobals->midiTrackNote[4] = 0x28;
     b46:	88 e2       	ldi	r24, 0x28	; 40
     b48:	81 8b       	std	Z+17, r24	; 0x11
			currentGlobals->midiTrackNote[5] = 0x29;
     b4a:	89 e2       	ldi	r24, 0x29	; 41
     b4c:	82 8b       	std	Z+18, r24	; 0x12
			currentGlobals->midiTrackNote[6] = 0x2a;
     b4e:	8a e2       	ldi	r24, 0x2A	; 42
     b50:	83 8b       	std	Z+19, r24	; 0x13
			currentGlobals->midiTrackNote[7] = 0x2b;
     b52:	8b e2       	ldi	r24, 0x2B	; 43
     b54:	84 8b       	std	Z+20, r24	; 0x14
			currentGlobals->midiTrackNote[8] = 0x2c;
     b56:	8c e2       	ldi	r24, 0x2C	; 44
     b58:	85 8b       	std	Z+21, r24	; 0x15
			currentGlobals->midiTrackNote[9] = 0x2d;
     b5a:	8d e2       	ldi	r24, 0x2D	; 45
     b5c:	86 8b       	std	Z+22, r24	; 0x16
			currentGlobals->midiTrackNote[10] = 0x2e;
     b5e:	8e e2       	ldi	r24, 0x2E	; 46
     b60:	87 8b       	std	Z+23, r24	; 0x17
			currentGlobals->midiTrackNote[11] = 0x2f;
     b62:	8f e2       	ldi	r24, 0x2F	; 47
     b64:	80 8f       	std	Z+24, r24	; 0x18
			currentGlobals->midiTrackNote[12] = 0x30;
     b66:	80 e3       	ldi	r24, 0x30	; 48
     b68:	81 8f       	std	Z+25, r24	; 0x19
			currentGlobals->midiTrackNote[13] = 0x31;
     b6a:	81 e3       	ldi	r24, 0x31	; 49
     b6c:	82 8f       	std	Z+26, r24	; 0x1a
			currentGlobals->midiTrackNote[14] = 0x32;
     b6e:	82 e3       	ldi	r24, 0x32	; 50
     b70:	83 8f       	std	Z+27, r24	; 0x1b
			currentGlobals->midiTrackNote[15] = 0x33;
     b72:	83 e3       	ldi	r24, 0x33	; 51
     b74:	84 8f       	std	Z+28, r24	; 0x1c
     b76:	08 95       	ret

00000b78 <initTimer>:
void initTimer() //we only need to use 1 timer, and Use ISRs for that. 
{
	//we're using timer 2, because it's the highest priority 8 bit timer interupt. 
	
		//here we need to setup our timer interrupt
		TCCR2A = (1 << WGM21); //set to clear on correct compare
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
		TCCR2B = (1 << CS21) | (1 << CS20); // set pre-scaler to 64
     b7e:	93 e0       	ldi	r25, 0x03	; 3
     b80:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
		OCR2A = 50; // every 25 ticks will be 0.0001 seconds at this pre scale.
     b84:	92 e3       	ldi	r25, 0x32	; 50
     b86:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
		TIMSK2 = (1 << OCIE2A); // Enable OCR0A compare interrupt
     b8a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     b8e:	08 95       	ret

00000b90 <updateTimers>:
		//interrupts should now be good to go.
}
void updateTimers(Globals *currentGlobals, uint32_t currentTime)
{
     b90:	8f 92       	push	r8
     b92:	9f 92       	push	r9
     b94:	af 92       	push	r10
     b96:	bf 92       	push	r11
     b98:	cf 92       	push	r12
     b9a:	df 92       	push	r13
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
	uint8_t change = 0;
	if(change=currentTime-(currentGlobals->lastGlobalTimer))
     ba4:	fc 01       	movw	r30, r24
     ba6:	e7 51       	subi	r30, 0x17	; 23
     ba8:	ff 4f       	sbci	r31, 0xFF	; 255
     baa:	20 81       	ld	r18, Z
     bac:	84 2e       	mov	r8, r20
     bae:	82 1a       	sub	r8, r18
     bb0:	28 2d       	mov	r18, r8
     bb2:	09 f1       	breq	.+66     	; 0xbf6 <updateTimers+0x66>
	{
		currentGlobals->clockCounter = (currentGlobals->clockCounter)+change;
     bb4:	dc 01       	movw	r26, r24
     bb6:	a9 51       	subi	r26, 0x19	; 25
     bb8:	bf 4f       	sbci	r27, 0xFF	; 255
     bba:	ed 91       	ld	r30, X+
     bbc:	fc 91       	ld	r31, X
     bbe:	11 97       	sbiw	r26, 0x01	; 1
     bc0:	e8 0d       	add	r30, r8
     bc2:	f1 1d       	adc	r31, r1
     bc4:	ed 93       	st	X+, r30
     bc6:	fc 93       	st	X, r31
		currentGlobals->releaseCounter = (currentGlobals->releaseCounter)+change;
     bc8:	fc 01       	movw	r30, r24
     bca:	ef 55       	subi	r30, 0x5F	; 95
     bcc:	ff 4f       	sbci	r31, 0xFF	; 255
     bce:	c0 80       	ld	r12, Z
     bd0:	d1 80       	ldd	r13, Z+1	; 0x01
     bd2:	e2 80       	ldd	r14, Z+2	; 0x02
     bd4:	f3 80       	ldd	r15, Z+3	; 0x03
     bd6:	46 01       	movw	r8, r12
     bd8:	57 01       	movw	r10, r14
     bda:	82 0e       	add	r8, r18
     bdc:	91 1c       	adc	r9, r1
     bde:	a1 1c       	adc	r10, r1
     be0:	b1 1c       	adc	r11, r1
     be2:	80 82       	st	Z, r8
     be4:	91 82       	std	Z+1, r9	; 0x01
     be6:	a2 82       	std	Z+2, r10	; 0x02
     be8:	b3 82       	std	Z+3, r11	; 0x03
		currentGlobals->lastGlobalTimer = currentTime;
     bea:	e8 5b       	subi	r30, 0xB8	; 184
     bec:	ff 4f       	sbci	r31, 0xFF	; 255
     bee:	40 83       	st	Z, r20
     bf0:	51 83       	std	Z+1, r21	; 0x01
     bf2:	62 83       	std	Z+2, r22	; 0x02
     bf4:	73 83       	std	Z+3, r23	; 0x03
	}
	
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	df 90       	pop	r13
     c00:	cf 90       	pop	r12
     c02:	bf 90       	pop	r11
     c04:	af 90       	pop	r10
     c06:	9f 90       	pop	r9
     c08:	8f 90       	pop	r8
     c0a:	08 95       	ret

00000c0c <startADCConversion>:



uint8_t startADCConversion()
{
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     c0c:	ea e7       	ldi	r30, 0x7A	; 122
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	80 64       	ori	r24, 0x40	; 64
     c14:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     c16:	80 81       	ld	r24, Z
     c18:	86 fd       	sbrc	r24, 6
     c1a:	fd cf       	rjmp	.-6      	; 0xc16 <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.	
     c1c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
     c20:	08 95       	ret

00000c22 <initADC>:

void initADC()
{
	DDRF |= 0B00000111; //init pins F2, 1, and 0 as select pins on the external mux.
     c22:	80 b3       	in	r24, 0x10	; 16
     c24:	87 60       	ori	r24, 0x07	; 7
     c26:	80 bb       	out	0x10, r24	; 16
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     c28:	80 e2       	ldi	r24, 0x20	; 32
     c2a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     c2e:	87 e8       	ldi	r24, 0x87	; 135
     c30:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     c34:	88 e0       	ldi	r24, 0x08	; 8
     c36:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     c3a:	8f ef       	ldi	r24, 0xFF	; 255
     c3c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     c40:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     c44:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <knobBufferCounter>
	startADCConversion();
     c48:	e1 cf       	rjmp	.-62     	; 0xc0c <startADCConversion>
     c4a:	08 95       	ret

00000c4c <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     c4c:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     c4e:	98 2f       	mov	r25, r24
     c50:	96 95       	lsr	r25
     c52:	96 95       	lsr	r25
     c54:	2f e2       	ldi	r18, 0x2F	; 47
     c56:	92 9f       	mul	r25, r18
     c58:	91 2d       	mov	r25, r1
     c5a:	11 24       	eor	r1, r1
     c5c:	96 95       	lsr	r25
     c5e:	2c e2       	ldi	r18, 0x2C	; 44
     c60:	92 9f       	mul	r25, r18
     c62:	80 19       	sub	r24, r0
     c64:	11 24       	eor	r1, r1
     c66:	98 2f       	mov	r25, r24
	if(select<40)
     c68:	88 32       	cpi	r24, 0x28	; 40
     c6a:	70 f4       	brcc	.+28     	; 0xc88 <selectKnob+0x3c>
	{
		ADCSRB = (1 << MUX5);
     c6c:	88 e0       	ldi	r24, 0x08	; 8
     c6e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     c72:	c9 2f       	mov	r28, r25
     c74:	c7 70       	andi	r28, 0x07	; 7
		//uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     c76:	96 95       	lsr	r25
     c78:	96 95       	lsr	r25
     c7a:	96 95       	lsr	r25
     c7c:	90 62       	ori	r25, 0x20	; 32
     c7e:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     c82:	c4 df       	rcall	.-120    	; 0xc0c <startADCConversion>
		

		//then the external multiplexer
		PORTF = muxSelect;
     c84:	c1 bb       	out	0x11, r28	; 17
     c86:	20 c0       	rjmp	.+64     	; 0xcc8 <selectKnob+0x7c>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     c88:	89 32       	cpi	r24, 0x29	; 41
     c8a:	71 f0       	breq	.+28     	; 0xca8 <selectKnob+0x5c>
     c8c:	18 f4       	brcc	.+6      	; 0xc94 <selectKnob+0x48>
     c8e:	88 32       	cpi	r24, 0x28	; 40
     c90:	31 f0       	breq	.+12     	; 0xc9e <selectKnob+0x52>
     c92:	1a c0       	rjmp	.+52     	; 0xcc8 <selectKnob+0x7c>
     c94:	8a 32       	cpi	r24, 0x2A	; 42
     c96:	69 f0       	breq	.+26     	; 0xcb2 <selectKnob+0x66>
     c98:	8b 32       	cpi	r24, 0x2B	; 43
     c9a:	81 f0       	breq	.+32     	; 0xcbc <selectKnob+0x70>
     c9c:	15 c0       	rjmp	.+42     	; 0xcc8 <selectKnob+0x7c>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     c9e:	85 e2       	ldi	r24, 0x25	; 37
     ca0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     ca4:	b3 df       	rcall	.-154    	; 0xc0c <startADCConversion>
		break;
     ca6:	10 c0       	rjmp	.+32     	; 0xcc8 <selectKnob+0x7c>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     ca8:	86 e2       	ldi	r24, 0x26	; 38
     caa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     cae:	ae df       	rcall	.-164    	; 0xc0c <startADCConversion>
		break;
     cb0:	0b c0       	rjmp	.+22     	; 0xcc8 <selectKnob+0x7c>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     cb2:	87 e2       	ldi	r24, 0x27	; 39
     cb4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     cb8:	a9 df       	rcall	.-174    	; 0xc0c <startADCConversion>
		break;
     cba:	06 c0       	rjmp	.+12     	; 0xcc8 <selectKnob+0x7c>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     cbc:	80 e2       	ldi	r24, 0x20	; 32
     cbe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     cc2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     cc6:	a2 df       	rcall	.-188    	; 0xc0c <startADCConversion>
		break;
		}
	
	}
	
}
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <updateKnob>:

void updateKnob(uint8_t select, Globals *currentGlobals)
{
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	8b 01       	movw	r16, r22
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
     cd6:	c8 2f       	mov	r28, r24
     cd8:	d0 e0       	ldi	r29, 0x00	; 0
     cda:	98 df       	rcall	.-208    	; 0xc0c <startADCConversion>
     cdc:	f8 01       	movw	r30, r16
     cde:	ec 0f       	add	r30, r28
     ce0:	fd 1f       	adc	r31, r29
     ce2:	85 8f       	std	Z+29, r24	; 0x1d
		currentGlobals->filteredKnobBuffer[select] = 
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
     ce4:	e7 5b       	subi	r30, 0xB7	; 183
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	40 81       	ld	r20, Z

void updateKnob(uint8_t select, Globals *currentGlobals)
{
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
		currentGlobals->filteredKnobBuffer[select] = 
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	84 1b       	sub	r24, r20
     cee:	91 09       	sbc	r25, r1
     cf0:	9c 01       	movw	r18, r24
     cf2:	12 f4       	brpl	.+4      	; 0xcf8 <updateKnob+0x2c>
     cf4:	2f 5f       	subi	r18, 0xFF	; 255
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	35 95       	asr	r19
     cfa:	27 95       	ror	r18
     cfc:	24 0f       	add	r18, r20
     cfe:	20 83       	st	Z, r18
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	08 95       	ret

00000d0a <initializeKnob>:
void initializeKnob(Globals *currentGlobals)
{
     d0a:	fc 01       	movw	r30, r24
     d0c:	e7 5b       	subi	r30, 0xB7	; 183
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	9c 01       	movw	r18, r24
     d12:	2b 58       	subi	r18, 0x8B	; 139
     d14:	3f 4f       	sbci	r19, 0xFF	; 255
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
     d16:	91 91       	ld	r25, Z+
     d18:	93 a7       	std	Z+43, r25	; 0x2b
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
void initializeKnob(Globals *currentGlobals)
{
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
     d1a:	e2 17       	cp	r30, r18
     d1c:	f3 07       	cpc	r31, r19
     d1e:	d9 f7       	brne	.-10     	; 0xd16 <initializeKnob+0xc>
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
	}
}
     d20:	08 95       	ret

00000d22 <interperetKnob>:

void interperetKnob(uint8_t select, Pattern *currentKnobPattern, Globals *currentGlobals)
{//this function will compare outputs, and write to our struct.
     d22:	4f 92       	push	r4
     d24:	5f 92       	push	r5
     d26:	6f 92       	push	r6
     d28:	7f 92       	push	r7
     d2a:	af 92       	push	r10
     d2c:	bf 92       	push	r11
     d2e:	cf 92       	push	r12
     d30:	df 92       	push	r13
     d32:	ef 92       	push	r14
     d34:	ff 92       	push	r15
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
	select = select%44;
     d3e:	98 2f       	mov	r25, r24
     d40:	96 95       	lsr	r25
     d42:	96 95       	lsr	r25
     d44:	2f e2       	ldi	r18, 0x2F	; 47
     d46:	92 9f       	mul	r25, r18
     d48:	91 2d       	mov	r25, r1
     d4a:	11 24       	eor	r1, r1
     d4c:	96 95       	lsr	r25
     d4e:	2c e2       	ldi	r18, 0x2C	; 44
     d50:	92 9f       	mul	r25, r18
     d52:	80 19       	sub	r24, r0
     d54:	11 24       	eor	r1, r1
     d56:	98 2f       	mov	r25, r24
	
	if (select<40)
     d58:	88 32       	cpi	r24, 0x28	; 40
     d5a:	08 f0       	brcs	.+2      	; 0xd5e <interperetKnob+0x3c>
     d5c:	c5 c1       	rjmp	.+906    	; 0x10e8 <interperetKnob+0x3c6>
	{
		uint8_t positionSelect = select%8;
     d5e:	18 2f       	mov	r17, r24
     d60:	17 70       	andi	r17, 0x07	; 7
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
		uint8_t bankSwitch = select/8;
     d62:	86 95       	lsr	r24
     d64:	86 95       	lsr	r24
     d66:	86 95       	lsr	r24
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
     d68:	da 01       	movw	r26, r20
     d6a:	19 96       	adiw	r26, 0x09	; 9
     d6c:	2c 91       	ld	r18, X
     d6e:	20 ff       	sbrs	r18, 0
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <interperetKnob+0x5a>
		{
			positionSelectTracks=positionSelectTracks+8;
     d72:	68 94       	set
     d74:	aa 24       	eor	r10, r10
     d76:	a3 f8       	bld	r10, 3
     d78:	a1 0e       	add	r10, r17
     d7a:	01 c0       	rjmp	.+2      	; 0xd7e <interperetKnob+0x5c>
	select = select%44;
	
	if (select<40)
	{
		uint8_t positionSelect = select%8;
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
     d7c:	a1 2e       	mov	r10, r17
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
		{
			positionSelectTracks=positionSelectTracks+8;
		}
		
		switch (bankSwitch){
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	09 f4       	brne	.+2      	; 0xd84 <interperetKnob+0x62>
     d82:	99 c0       	rjmp	.+306    	; 0xeb6 <interperetKnob+0x194>
     d84:	ea 01       	movw	r28, r20
     d86:	6b 01       	movw	r12, r22
     d88:	83 30       	cpi	r24, 0x03	; 3
     d8a:	30 f4       	brcc	.+12     	; 0xd98 <interperetKnob+0x76>
     d8c:	88 23       	and	r24, r24
     d8e:	59 f0       	breq	.+22     	; 0xda6 <interperetKnob+0x84>
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	09 f4       	brne	.+2      	; 0xd96 <interperetKnob+0x74>
     d94:	67 c0       	rjmp	.+206    	; 0xe64 <interperetKnob+0x142>
     d96:	c6 c1       	rjmp	.+908    	; 0x1124 <interperetKnob+0x402>
     d98:	83 30       	cpi	r24, 0x03	; 3
     d9a:	09 f4       	brne	.+2      	; 0xd9e <interperetKnob+0x7c>
     d9c:	e1 c0       	rjmp	.+450    	; 0xf60 <interperetKnob+0x23e>
     d9e:	84 30       	cpi	r24, 0x04	; 4
     da0:	09 f4       	brne	.+2      	; 0xda4 <interperetKnob+0x82>
     da2:	2e c1       	rjmp	.+604    	; 0x1000 <interperetKnob+0x2de>
     da4:	bf c1       	rjmp	.+894    	; 0x1124 <interperetKnob+0x402>
			uint8_t newRead = 0;
			case 0:; //outputVolume
			
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
     da6:	e9 2e       	mov	r14, r25
     da8:	f1 2c       	mov	r15, r1
     daa:	ca 01       	movw	r24, r20
     dac:	8e 0d       	add	r24, r14
     dae:	9f 1d       	adc	r25, r15
     db0:	fc 01       	movw	r30, r24
     db2:	eb 58       	subi	r30, 0x8B	; 139
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
     db8:	bc 97       	sbiw	r30, 0x2c	; 44
     dba:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
     dbc:	26 17       	cp	r18, r22
     dbe:	20 f4       	brcc	.+8      	; 0xdc8 <interperetKnob+0xa6>
	{
		returnMe = v1-v2;
     dc0:	b6 2f       	mov	r27, r22
     dc2:	b2 1b       	sub	r27, r18
     dc4:	2b 2f       	mov	r18, r27
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <interperetKnob+0xa8>
	}
	else
	{
		returnMe = v2-v1;
     dc8:	26 1b       	sub	r18, r22
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];

			if(checkVariation(newRead,prevRead)>2)
     dca:	23 30       	cpi	r18, 0x03	; 3
     dcc:	08 f4       	brcc	.+2      	; 0xdd0 <interperetKnob+0xae>
     dce:	aa c1       	rjmp	.+852    	; 0x1124 <interperetKnob+0x402>
			{
				
				int16_t negCheckValue = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <__floatsisf>
     dda:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <volumeDivisor>
     dde:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <volumeDivisor+0x1>
     de2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <volumeDivisor+0x2>
     de6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <volumeDivisor+0x3>
     dea:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__divsf3>
     dee:	2b 01       	movw	r4, r22
     df0:	3c 01       	movw	r6, r24
     df2:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <NegativeOffset>
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <__floatsisf>
     e00:	9b 01       	movw	r18, r22
     e02:	ac 01       	movw	r20, r24
     e04:	c3 01       	movw	r24, r6
     e06:	b2 01       	movw	r22, r4
     e08:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__subsf3>
     e0c:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <__fixsfsi>
     e10:	86 2f       	mov	r24, r22
     e12:	26 2f       	mov	r18, r22
     e14:	37 2f       	mov	r19, r23
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     e16:	9a 85       	ldd	r25, Y+10	; 0x0a
     e18:	94 60       	ori	r25, 0x04	; 4
     e1a:	9a 87       	std	Y+10, r25	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value 
     e1c:	1b 87       	std	Y+11, r17	; 0x0b
				
				currentKnobPattern->outputLevelLSB[positionSelect] = (negCheckValue);
     e1e:	61 2f       	mov	r22, r17
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	f6 01       	movw	r30, r12
     e24:	e6 0f       	add	r30, r22
     e26:	f7 1f       	adc	r31, r23
     e28:	80 87       	std	Z+8, r24	; 0x08
				if(negCheckValue>(-1))
     e2a:	33 23       	and	r19, r19
     e2c:	2c f0       	brlt	.+10     	; 0xe38 <interperetKnob+0x116>
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 0;	
     e2e:	f6 01       	movw	r30, r12
     e30:	e6 0f       	add	r30, r22
     e32:	f7 1f       	adc	r31, r23
     e34:	10 82       	st	Z, r1
     e36:	05 c0       	rjmp	.+10     	; 0xe42 <interperetKnob+0x120>
				}else
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 255;
     e38:	9f ef       	ldi	r25, 0xFF	; 255
     e3a:	f6 01       	movw	r30, r12
     e3c:	e6 0f       	add	r30, r22
     e3e:	f7 1f       	adc	r31, r23
     e40:	90 83       	st	Z, r25
				}
				setOutputVolume(currentKnobPattern->outputLevelLSB[positionSelect], currentKnobPattern->outputLevelMSB[positionSelect], positionSelect);
     e42:	f6 01       	movw	r30, r12
     e44:	e6 0f       	add	r30, r22
     e46:	f7 1f       	adc	r31, r23
     e48:	41 2f       	mov	r20, r17
     e4a:	60 81       	ld	r22, Z
     e4c:	0e 94 d7 16 	call	0x2dae	; 0x2dae <setOutputVolume>
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     e50:	ce 0d       	add	r28, r14
     e52:	df 1d       	adc	r29, r15
     e54:	fe 01       	movw	r30, r28
     e56:	eb 58       	subi	r30, 0x8B	; 139
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	c7 5b       	subi	r28, 0xB7	; 183
     e5c:	df 4f       	sbci	r29, 0xFF	; 255
     e5e:	88 81       	ld	r24, Y
     e60:	80 83       	st	Z, r24
     e62:	60 c1       	rjmp	.+704    	; 0x1124 <interperetKnob+0x402>
			}
			break;
			
 			case 1: //pitch
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
     e64:	89 2f       	mov	r24, r25
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	9a 01       	movw	r18, r20
     e6a:	28 0f       	add	r18, r24
     e6c:	39 1f       	adc	r19, r25
     e6e:	f9 01       	movw	r30, r18
     e70:	e7 5b       	subi	r30, 0xB7	; 183
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	40 81       	ld	r20, Z
     e76:	bc 96       	adiw	r30, 0x2c	; 44
     e78:	20 81       	ld	r18, Z
     e7a:	24 17       	cp	r18, r20
     e7c:	09 f4       	brne	.+2      	; 0xe80 <interperetKnob+0x15e>
     e7e:	52 c1       	rjmp	.+676    	; 0x1124 <interperetKnob+0x402>
 			{
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     e80:	2a 85       	ldd	r18, Y+10	; 0x0a
     e82:	24 60       	ori	r18, 0x04	; 4
     e84:	2a 87       	std	Y+10, r18	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     e86:	21 2f       	mov	r18, r17
     e88:	20 61       	ori	r18, 0x10	; 16
     e8a:	2b 87       	std	Y+11, r18	; 0x0b
 				currentKnobPattern->outputPitch[positionSelect] = (currentGlobals->filteredKnobBuffer[select]^128);
     e8c:	fb 01       	movw	r30, r22
     e8e:	e1 0f       	add	r30, r17
     e90:	f1 1d       	adc	r31, r1
     e92:	40 58       	subi	r20, 0x80	; 128
     e94:	40 8b       	std	Z+16, r20	; 0x10
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     e96:	8c 0f       	add	r24, r28
     e98:	9d 1f       	adc	r25, r29
     e9a:	dc 01       	movw	r26, r24
     e9c:	ab 58       	subi	r26, 0x8B	; 139
     e9e:	bf 4f       	sbci	r27, 0xFF	; 255
     ea0:	ec 01       	movw	r28, r24
     ea2:	c7 5b       	subi	r28, 0xB7	; 183
     ea4:	df 4f       	sbci	r29, 0xFF	; 255
     ea6:	88 81       	ld	r24, Y
     ea8:	8c 93       	st	X, r24
				outputSampleRate(positionSelect, 0, currentKnobPattern->outputPitch[positionSelect]);
     eaa:	40 89       	ldd	r20, Z+16	; 0x10
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	81 2f       	mov	r24, r17
     eb0:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <outputSampleRate>
     eb4:	37 c1       	rjmp	.+622    	; 0x1124 <interperetKnob+0x402>
 			}
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
     eb6:	e9 2f       	mov	r30, r25
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	ca 01       	movw	r24, r20
     ebc:	8e 0f       	add	r24, r30
     ebe:	9f 1f       	adc	r25, r31
     ec0:	dc 01       	movw	r26, r24
     ec2:	ab 58       	subi	r26, 0x8B	; 139
     ec4:	bf 4f       	sbci	r27, 0xFF	; 255
     ec6:	dc 91       	ld	r29, X
     ec8:	9c 97       	sbiw	r26, 0x2c	; 44
     eca:	cc 91       	ld	r28, X
     ecc:	dc 17       	cp	r29, r28
     ece:	09 f4       	brne	.+2      	; 0xed2 <interperetKnob+0x1b0>
     ed0:	29 c1       	rjmp	.+594    	; 0x1124 <interperetKnob+0x402>
			{
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     ed2:	ca 2c       	mov	r12, r10
     ed4:	d1 2c       	mov	r13, r1
     ed6:	9b 01       	movw	r18, r22
     ed8:	2c 0d       	add	r18, r12
     eda:	3d 1d       	adc	r19, r13
     edc:	d9 01       	movw	r26, r18
     ede:	a8 5a       	subi	r26, 0xA8	; 168
     ee0:	bf 4f       	sbci	r27, 0xFF	; 255
     ee2:	8c 91       	ld	r24, X
     ee4:	50 97       	sbiw	r26, 0x10	; 16
     ee6:	2c 91       	ld	r18, X
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     ee8:	da 01       	movw	r26, r20
     eea:	1a 96       	adiw	r26, 0x0a	; 10
     eec:	9c 91       	ld	r25, X
     eee:	1a 97       	sbiw	r26, 0x0a	; 10
     ef0:	94 60       	ori	r25, 0x04	; 4
     ef2:	1a 96       	adiw	r26, 0x0a	; 10
     ef4:	9c 93       	st	X, r25
     ef6:	1a 97       	sbiw	r26, 0x0a	; 10
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
     ef8:	91 2f       	mov	r25, r17
     efa:	90 62       	ori	r25, 0x20	; 32
     efc:	1b 96       	adiw	r26, 0x0b	; 11
     efe:	9c 93       	st	X, r25
     f00:	1b 97       	sbiw	r26, 0x0b	; 11
				
				if(currentGlobals->currentGPButtons&0x04) 
     f02:	12 96       	adiw	r26, 0x02	; 2
     f04:	9c 91       	ld	r25, X
     f06:	92 ff       	sbrs	r25, 2
     f08:	0a c0       	rjmp	.+20     	; 0xf1e <interperetKnob+0x1fc>
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
			{
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	dc 01       	movw	r26, r24
     f0e:	b2 2b       	or	r27, r18
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
				
				if(currentGlobals->currentGPButtons&0x04) 
				{ //if "fine" is on:
						totalAttackTime = totalAttackTime+((currentGlobals->filteredKnobBuffer[select])-(currentGlobals->lastFilteredKnobBuffer[select])); 
     f10:	8c 2f       	mov	r24, r28
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	8d 1b       	sub	r24, r29
     f16:	91 09       	sbc	r25, r1
     f18:	8a 0f       	add	r24, r26
     f1a:	9b 1f       	adc	r25, r27
     f1c:	0a c0       	rjmp	.+20     	; 0xf32 <interperetKnob+0x210>
				}else
				{
					totalAttackTime = ((currentGlobals->filteredKnobBuffer[select])-1)*238;
     f1e:	2c 2f       	mov	r18, r28
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	21 50       	subi	r18, 0x01	; 1
     f24:	31 09       	sbc	r19, r1
     f26:	ae ee       	ldi	r26, 0xEE	; 238
     f28:	a2 9f       	mul	r26, r18
     f2a:	c0 01       	movw	r24, r0
     f2c:	a3 9f       	mul	r26, r19
     f2e:	90 0d       	add	r25, r0
     f30:	11 24       	eor	r1, r1
				}
				if(totalAttackTime<20)
     f32:	84 31       	cpi	r24, 0x14	; 20
     f34:	91 05       	cpc	r25, r1
     f36:	10 f4       	brcc	.+4      	; 0xf3c <interperetKnob+0x21a>
				{
					totalAttackTime = 20; 
     f38:	84 e1       	ldi	r24, 0x14	; 20
     f3a:	90 e0       	ldi	r25, 0x00	; 0
				}
				currentKnobPattern->trackAttackTimeMSB[positionSelectTracks] = ((totalAttackTime)>>8);
     f3c:	6c 0d       	add	r22, r12
     f3e:	7d 1d       	adc	r23, r13
     f40:	db 01       	movw	r26, r22
     f42:	a8 5b       	subi	r26, 0xB8	; 184
     f44:	bf 4f       	sbci	r27, 0xFF	; 255
     f46:	9c 93       	st	X, r25
				currentKnobPattern->trackAttackTimeLSB[positionSelectTracks] = (totalAttackTime); //this should truncate the top 8 bits. 
     f48:	50 96       	adiw	r26, 0x10	; 16
     f4a:	8c 93       	st	X, r24

				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     f4c:	e4 0f       	add	r30, r20
     f4e:	f5 1f       	adc	r31, r21
     f50:	df 01       	movw	r26, r30
     f52:	ab 58       	subi	r26, 0x8B	; 139
     f54:	bf 4f       	sbci	r27, 0xFF	; 255
     f56:	e7 5b       	subi	r30, 0xB7	; 183
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	80 81       	ld	r24, Z
     f5c:	8c 93       	st	X, r24
     f5e:	e2 c0       	rjmp	.+452    	; 0x1124 <interperetKnob+0x402>
			}
			break;
 			
 			case 3: //release Envelope
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
     f60:	29 2f       	mov	r18, r25
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	ca 01       	movw	r24, r20
     f66:	82 0f       	add	r24, r18
     f68:	93 1f       	adc	r25, r19
     f6a:	fc 01       	movw	r30, r24
     f6c:	eb 58       	subi	r30, 0x8B	; 139
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	f0 81       	ld	r31, Z
     f72:	dc 01       	movw	r26, r24
     f74:	a7 5b       	subi	r26, 0xB7	; 183
     f76:	bf 4f       	sbci	r27, 0xFF	; 255
     f78:	ec 91       	ld	r30, X
     f7a:	fe 17       	cp	r31, r30
     f7c:	09 f4       	brne	.+2      	; 0xf80 <interperetKnob+0x25e>
     f7e:	d2 c0       	rjmp	.+420    	; 0x1124 <interperetKnob+0x402>
 			{
				 uint16_t totalReleaseTime = currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks]|((currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks])<<8);
     f80:	6a 2d       	mov	r22, r10
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	a6 01       	movw	r20, r12
     f86:	46 0f       	add	r20, r22
     f88:	57 1f       	adc	r21, r23
     f8a:	da 01       	movw	r26, r20
     f8c:	a8 58       	subi	r26, 0x88	; 136
     f8e:	bf 4f       	sbci	r27, 0xFF	; 255
     f90:	8c 91       	ld	r24, X
     f92:	50 97       	sbiw	r26, 0x10	; 16
     f94:	4c 91       	ld	r20, X
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     f96:	9a 85       	ldd	r25, Y+10	; 0x0a
     f98:	94 60       	ori	r25, 0x04	; 4
     f9a:	9a 87       	std	Y+10, r25	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     f9c:	91 2f       	mov	r25, r17
     f9e:	90 63       	ori	r25, 0x30	; 48
     fa0:	9b 87       	std	Y+11, r25	; 0x0b
				if(currentGlobals->currentGPButtons&0x04)
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	92 ff       	sbrs	r25, 2
     fa6:	0a c0       	rjmp	.+20     	; 0xfbc <interperetKnob+0x29a>
			break;
 			
 			case 3: //release Envelope
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
 			{
				 uint16_t totalReleaseTime = currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks]|((currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks])<<8);
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	dc 01       	movw	r26, r24
     fac:	b4 2b       	or	r27, r20
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
				if(currentGlobals->currentGPButtons&0x04)
				{ //if "fine" is on:
					totalReleaseTime = totalReleaseTime+((currentGlobals->filteredKnobBuffer[select])-(currentGlobals->lastFilteredKnobBuffer[select]));
     fae:	8e 2f       	mov	r24, r30
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	8f 1b       	sub	r24, r31
     fb4:	91 09       	sbc	r25, r1
     fb6:	8a 0f       	add	r24, r26
     fb8:	9b 1f       	adc	r25, r27
     fba:	0a c0       	rjmp	.+20     	; 0xfd0 <interperetKnob+0x2ae>
				}else
				{
					totalReleaseTime = ((currentGlobals->filteredKnobBuffer[select])-1)*238;
     fbc:	4e 2f       	mov	r20, r30
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	41 50       	subi	r20, 0x01	; 1
     fc2:	51 09       	sbc	r21, r1
     fc4:	ee ee       	ldi	r30, 0xEE	; 238
     fc6:	e4 9f       	mul	r30, r20
     fc8:	c0 01       	movw	r24, r0
     fca:	e5 9f       	mul	r30, r21
     fcc:	90 0d       	add	r25, r0
     fce:	11 24       	eor	r1, r1
				}
				if(totalReleaseTime<20)
     fd0:	84 31       	cpi	r24, 0x14	; 20
     fd2:	91 05       	cpc	r25, r1
     fd4:	10 f4       	brcc	.+4      	; 0xfda <interperetKnob+0x2b8>
				{
					totalReleaseTime = 20;
     fd6:	84 e1       	ldi	r24, 0x14	; 20
     fd8:	90 e0       	ldi	r25, 0x00	; 0
				}
				currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks] = ((totalReleaseTime)>>8);
     fda:	c6 0e       	add	r12, r22
     fdc:	d7 1e       	adc	r13, r23
     fde:	f6 01       	movw	r30, r12
     fe0:	e8 59       	subi	r30, 0x98	; 152
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	90 83       	st	Z, r25
				currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks] = (totalReleaseTime);	
     fe6:	70 96       	adiw	r30, 0x10	; 16
     fe8:	80 83       	st	Z, r24
				
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     fea:	2c 0f       	add	r18, r28
     fec:	3d 1f       	adc	r19, r29
     fee:	f9 01       	movw	r30, r18
     ff0:	eb 58       	subi	r30, 0x8B	; 139
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	d9 01       	movw	r26, r18
     ff6:	a7 5b       	subi	r26, 0xB7	; 183
     ff8:	bf 4f       	sbci	r27, 0xFF	; 255
     ffa:	8c 91       	ld	r24, X
     ffc:	80 83       	st	Z, r24
     ffe:	92 c0       	rjmp	.+292    	; 0x1124 <interperetKnob+0x402>
 			}
 			break;
 			
 			case 4:;
 			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
    1000:	e9 2e       	mov	r14, r25
    1002:	f1 2c       	mov	r15, r1
    1004:	ca 01       	movw	r24, r20
    1006:	8e 0d       	add	r24, r14
    1008:	9f 1d       	adc	r25, r15
    100a:	fc 01       	movw	r30, r24
    100c:	eb 58       	subi	r30, 0x8B	; 139
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
    1012:	bc 97       	sbiw	r30, 0x2c	; 44
    1014:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
    1016:	26 17       	cp	r18, r22
    1018:	20 f4       	brcc	.+8      	; 0x1022 <interperetKnob+0x300>
	{
		returnMe = v1-v2;
    101a:	b6 2f       	mov	r27, r22
    101c:	b2 1b       	sub	r27, r18
    101e:	2b 2f       	mov	r18, r27
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <interperetKnob+0x302>
	}
	else
	{
		returnMe = v2-v1;
    1022:	26 1b       	sub	r18, r22
 			break;
 			
 			case 4:;
 			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];
 			if(checkVariation(newRead,prevRead)>2)
    1024:	23 30       	cpi	r18, 0x03	; 3
    1026:	08 f4       	brcc	.+2      	; 0x102a <interperetKnob+0x308>
    1028:	7d c0       	rjmp	.+250    	; 0x1124 <interperetKnob+0x402>
 			{
				int16_t negCheckValueTrack = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <__floatsisf>
    1034:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <volumeDivisor>
    1038:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <volumeDivisor+0x1>
    103c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <volumeDivisor+0x2>
    1040:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <volumeDivisor+0x3>
    1044:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__divsf3>
    1048:	2b 01       	movw	r4, r22
    104a:	3c 01       	movw	r6, r24
    104c:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <NegativeOffset>
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <__floatsisf>
    105a:	9b 01       	movw	r18, r22
    105c:	ac 01       	movw	r20, r24
    105e:	c3 01       	movw	r24, r6
    1060:	b2 01       	movw	r22, r4
    1062:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__subsf3>
    1066:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <__fixsfsi>
    106a:	86 2f       	mov	r24, r22
    106c:	97 2f       	mov	r25, r23
    106e:	9c 01       	movw	r18, r24
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
    1070:	8a 85       	ldd	r24, Y+10	; 0x0a
    1072:	84 60       	ori	r24, 0x04	; 4
    1074:	8a 87       	std	Y+10, r24	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
    1076:	81 2f       	mov	r24, r17
    1078:	80 64       	ori	r24, 0x40	; 64
    107a:	8b 87       	std	Y+11, r24	; 0x0b
				
	 			currentKnobPattern->trackMainVolumeLSB[positionSelectTracks] = (negCheckValueTrack);
    107c:	b1 2c       	mov	r11, r1
    107e:	f6 01       	movw	r30, r12
    1080:	ea 0d       	add	r30, r10
    1082:	fb 1d       	adc	r31, r11
    1084:	60 af       	std	Z+56, r22	; 0x38
	 			if(negCheckValueTrack>(-1))
    1086:	33 23       	and	r19, r19
    1088:	2c f0       	brlt	.+10     	; 0x1094 <interperetKnob+0x372>
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 0;
    108a:	f6 01       	movw	r30, r12
    108c:	ea 0d       	add	r30, r10
    108e:	fb 1d       	adc	r31, r11
    1090:	10 a6       	std	Z+40, r1	; 0x28
    1092:	05 c0       	rjmp	.+10     	; 0x109e <interperetKnob+0x37c>
	 			}else
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 255;
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	f6 01       	movw	r30, r12
    1098:	ea 0d       	add	r30, r10
    109a:	fb 1d       	adc	r31, r11
    109c:	80 a7       	std	Z+40, r24	; 0x28
	 			}

				
				if(currentKnobPattern->envelopeType[positionSelectTracks]==1||currentKnobPattern->envelopeType[positionSelectTracks]==3) //set track volume directly if Envelope mode is only release, or none. 
    109e:	f6 01       	movw	r30, r12
    10a0:	ea 0d       	add	r30, r10
    10a2:	fb 1d       	adc	r31, r11
    10a4:	e5 51       	subi	r30, 0x15	; 21
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	80 81       	ld	r24, Z
    10aa:	8d 7f       	andi	r24, 0xFD	; 253
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	81 f4       	brne	.+32     	; 0x10d0 <interperetKnob+0x3ae>
				{
	 				setTrackVolume(currentKnobPattern->trackSampleLSB[positionSelectTracks], currentKnobPattern->trackSampleMSB[positionSelectTracks],
    10b0:	ac 0c       	add	r10, r12
    10b2:	bd 1c       	adc	r11, r13
    10b4:	d5 01       	movw	r26, r10
    10b6:	a8 56       	subi	r26, 0x68	; 104
    10b8:	bf 4f       	sbci	r27, 0xFF	; 255
    10ba:	c5 01       	movw	r24, r10
    10bc:	88 55       	subi	r24, 0x58	; 88
    10be:	9f 4f       	sbci	r25, 0xFF	; 255
    10c0:	f5 01       	movw	r30, r10
    10c2:	20 a5       	ldd	r18, Z+40	; 0x28
    10c4:	46 2f       	mov	r20, r22
    10c6:	6c 91       	ld	r22, X
    10c8:	dc 01       	movw	r26, r24
    10ca:	8c 91       	ld	r24, X
    10cc:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <setTrackVolume>
					currentKnobPattern->trackMainVolumeLSB[positionSelectTracks], currentKnobPattern->trackMainVolumeMSB[positionSelectTracks]);
				}
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select]; 
    10d0:	8e 01       	movw	r16, r28
    10d2:	0e 0d       	add	r16, r14
    10d4:	1f 1d       	adc	r17, r15
    10d6:	f8 01       	movw	r30, r16
    10d8:	eb 58       	subi	r30, 0x8B	; 139
    10da:	ff 4f       	sbci	r31, 0xFF	; 255
    10dc:	d8 01       	movw	r26, r16
    10de:	a7 5b       	subi	r26, 0xB7	; 183
    10e0:	bf 4f       	sbci	r27, 0xFF	; 255
    10e2:	8c 91       	ld	r24, X
    10e4:	80 83       	st	Z, r24
    10e6:	1e c0       	rjmp	.+60     	; 0x1124 <interperetKnob+0x402>
		}
		
		
	}else
	{
		switch (select)
    10e8:	8a 32       	cpi	r24, 0x2A	; 42
    10ea:	e1 f4       	brne	.+56     	; 0x1124 <interperetKnob+0x402>
// 			break;
// 			
 			case 42:
			 
			 //we need to do a bit more filtering here. Not sure if that's happening here, or in the actual knob read.
			 if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
    10ec:	fa 01       	movw	r30, r20
    10ee:	ed 58       	subi	r30, 0x8D	; 141
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	80 81       	ld	r24, Z
    10f4:	bc 96       	adiw	r30, 0x2c	; 44
    10f6:	90 81       	ld	r25, Z
    10f8:	98 17       	cp	r25, r24
    10fa:	a1 f0       	breq	.+40     	; 0x1124 <interperetKnob+0x402>
			{//not sure if this works here, but we're going to try it. 
				
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
    10fc:	fa 01       	movw	r30, r20
    10fe:	92 85       	ldd	r25, Z+10	; 0x0a
    1100:	94 60       	ori	r25, 0x04	; 4
    1102:	92 87       	std	Z+10, r25	; 0x0a
				currentGlobals->knobStatus = (5<<4); //since all other pot banks are 0-4, the next ones will be 5-8. We should maybe figure out a better system for this, 
    1104:	90 e5       	ldi	r25, 0x50	; 80
    1106:	93 87       	std	Z+11, r25	; 0x0b
				//maybe some defines?				
 				currentKnobPattern->patternBPM = currentGlobals->filteredKnobBuffer[select];
    1108:	fb 01       	movw	r30, r22
    110a:	e8 53       	subi	r30, 0x38	; 56
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	91 83       	std	Z+1, r25	; 0x01
    1112:	80 83       	st	Z, r24
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
    1114:	da 01       	movw	r26, r20
    1116:	a1 56       	subi	r26, 0x61	; 97
    1118:	bf 4f       	sbci	r27, 0xFF	; 255
    111a:	fa 01       	movw	r30, r20
    111c:	ed 58       	subi	r30, 0x8D	; 141
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	80 81       	ld	r24, Z
    1122:	8c 93       	st	X, r24
// 			break;
		}
		
	}

}
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	df 90       	pop	r13
    1132:	cf 90       	pop	r12
    1134:	bf 90       	pop	r11
    1136:	af 90       	pop	r10
    1138:	7f 90       	pop	r7
    113a:	6f 90       	pop	r6
    113c:	5f 90       	pop	r5
    113e:	4f 90       	pop	r4
    1140:	08 95       	ret

00001142 <listenKnobs>:

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	7c 01       	movw	r14, r24
    114e:	8b 01       	movw	r16, r22
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    1150:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
    1152:	8c 2f       	mov	r24, r28
    1154:	7b dd       	rcall	.-1290   	; 0xc4c <selectKnob>
		updateKnob(loopCounter, currentGlobals);
    1156:	b8 01       	movw	r22, r16
    1158:	8c 2f       	mov	r24, r28
    115a:	b8 dd       	rcall	.-1168   	; 0xccc <updateKnob>
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
    115c:	a8 01       	movw	r20, r16
    115e:	b7 01       	movw	r22, r14
    1160:	8c 2f       	mov	r24, r28
    1162:	df dd       	rcall	.-1090   	; 0xd22 <interperetKnob>

}

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    1164:	cf 5f       	subi	r28, 0xFF	; 255
    1166:	cc 32       	cpi	r28, 0x2C	; 44
    1168:	a1 f7       	brne	.-24     	; 0x1152 <listenKnobs+0x10>
	{
		selectKnob(loopCounter);
		updateKnob(loopCounter, currentGlobals);
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
	}
}
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	08 95       	ret

00001176 <initLEDs>:
extern Pattern currentPattern;
extern uint8_t currentStep;

void initLEDs()
{
	DDRG = 0B00000111; //outputs on G5,2, and 0.
    1176:	87 e0       	ldi	r24, 0x07	; 7
    1178:	83 bb       	out	0x13, r24	; 19
    117a:	08 95       	ret

0000117c <parseLEDs>:
}
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
    117c:	a2 98       	cbi	0x14, 2	; 20
    117e:	27 e0       	ldi	r18, 0x07	; 7
	for(uint8_t j=0; j<7; j++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    1180:	a0 9a       	sbi	0x14, 0	; 20
		if(gpParse&0x80)
    1182:	66 23       	and	r22, r22
    1184:	14 f4       	brge	.+4      	; 0x118a <parseLEDs+0xe>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    1186:	a1 9a       	sbi	0x14, 1	; 20
    1188:	01 c0       	rjmp	.+2      	; 0x118c <parseLEDs+0x10>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    118a:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    118c:	a0 98       	cbi	0x14, 0	; 20
		gpParse = gpParse << 1;
    118e:	66 0f       	add	r22, r22
    1190:	21 50       	subi	r18, 0x01	; 1
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t j=0; j<7; j++)
    1192:	b1 f7       	brne	.-20     	; 0x1180 <parseLEDs+0x4>
    1194:	21 e1       	ldi	r18, 0x11	; 17
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    1196:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
    1198:	99 23       	and	r25, r25
    119a:	14 f4       	brge	.+4      	; 0x11a0 <parseLEDs+0x24>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    119c:	a1 9a       	sbi	0x14, 1	; 20
    119e:	01 c0       	rjmp	.+2      	; 0x11a2 <parseLEDs+0x26>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    11a0:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    11a2:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	21 50       	subi	r18, 0x01	; 1
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
    11aa:	a9 f7       	brne	.-22     	; 0x1196 <parseLEDs+0x1a>
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	
	
	PORTG |= (1 << PG2); //latch pin high
    11ac:	a2 9a       	sbi	0x14, 2	; 20
    11ae:	08 95       	ret

000011b0 <updateLEDs>:
}

void updateLEDs(Pattern ledCurrentPattern, Globals currentGlobals)
{
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	cf 57       	subi	r28, 0x7F	; 127
    11ba:	de 4f       	sbci	r29, 0xFE	; 254
    11bc:	28 81       	ld	r18, Y
    11be:	39 81       	ldd	r19, Y+1	; 0x01
    11c0:	c1 58       	subi	r28, 0x81	; 129
    11c2:	d1 40       	sbci	r29, 0x01	; 1
    11c4:	cd 57       	subi	r28, 0x7D	; 125
    11c6:	de 4f       	sbci	r29, 0xFE	; 254
    11c8:	68 81       	ld	r22, Y
    11ca:	c3 58       	subi	r28, 0x83	; 131
    11cc:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t shiftedState = currentGlobals.menuState >> 4; //this will get rid of EncoderB
	switch(shiftedState)
    11ce:	c9 57       	subi	r28, 0x79	; 121
    11d0:	de 4f       	sbci	r29, 0xFE	; 254
    11d2:	98 81       	ld	r25, Y
    11d4:	c7 58       	subi	r28, 0x87	; 135
    11d6:	d1 40       	sbci	r29, 0x01	; 1
    11d8:	92 95       	swap	r25
    11da:	9f 70       	andi	r25, 0x0F	; 15
    11dc:	91 30       	cpi	r25, 0x01	; 1
    11de:	49 f0       	breq	.+18     	; 0x11f2 <updateLEDs+0x42>
    11e0:	28 f0       	brcs	.+10     	; 0x11ec <updateLEDs+0x3c>
    11e2:	92 30       	cpi	r25, 0x02	; 2
    11e4:	d1 f0       	breq	.+52     	; 0x121a <updateLEDs+0x6a>
    11e6:	93 30       	cpi	r25, 0x03	; 3
    11e8:	d9 f0       	breq	.+54     	; 0x1220 <updateLEDs+0x70>
    11ea:	1c c0       	rjmp	.+56     	; 0x1224 <updateLEDs+0x74>
	{
		case 0:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    11ec:	c9 01       	movw	r24, r18
    11ee:	c6 df       	rcall	.-116    	; 0x117c <parseLEDs>
		break;
    11f0:	19 c0       	rjmp	.+50     	; 0x1224 <updateLEDs+0x74>

		case 1:
		parseLEDs(ledCurrentPattern.trackSequence[currentGlobals.currentStep], currentGlobals.currentGPButtons);
    11f2:	cb 57       	subi	r28, 0x7B	; 123
    11f4:	de 4f       	sbci	r29, 0xFE	; 254
    11f6:	e8 81       	ld	r30, Y
    11f8:	c5 58       	subi	r28, 0x85	; 133
    11fa:	d1 40       	sbci	r29, 0x01	; 1
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	ee 0f       	add	r30, r30
    1200:	ff 1f       	adc	r31, r31
    1202:	86 e0       	ldi	r24, 0x06	; 6
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	8c 0f       	add	r24, r28
    1208:	9d 1f       	adc	r25, r29
    120a:	e8 0f       	add	r30, r24
    120c:	f9 1f       	adc	r31, r25
    120e:	e5 50       	subi	r30, 0x05	; 5
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	80 81       	ld	r24, Z
    1214:	91 81       	ldd	r25, Z+1	; 0x01
    1216:	b2 df       	rcall	.-156    	; 0x117c <parseLEDs>
		break;

		case 2:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    1218:	05 c0       	rjmp	.+10     	; 0x1224 <updateLEDs+0x74>
    121a:	c9 01       	movw	r24, r18
		break;
    121c:	af df       	rcall	.-162    	; 0x117c <parseLEDs>

		case 3:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <updateLEDs+0x74>
    1220:	c9 01       	movw	r24, r18
    1222:	ac df       	rcall	.-168    	; 0x117c <parseLEDs>
		break;
	}

}
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	08 95       	ret

0000122a <main>:
//Pattern may not need to be volatile, but I'd like to keep it around. 
volatile Pattern currentPattern;
volatile Globals currentGlobals;
volatile uint32_t globalTimer = 0;

int main(){
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	c6 5c       	subi	r28, 0xC6	; 198
    1234:	d3 40       	sbci	r29, 0x03	; 3
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
	uint8_t factoryReset=0; // set this to 1 if you would like to fill the eeprom with Factory data, and erase all user data.
	Screen screenBank;
	char testArray[21] = "CurrentTime:         ";
	
	initScreen();
    1240:	0e 94 44 13 	call	0x2688	; 0x2688 <initScreen>
	initButtons();
    1244:	24 d8       	rcall	.-4024   	; 0x28e <initButtons>
	initEncoders();
    1246:	25 d9       	rcall	.-3510   	; 0x492 <initEncoders>
	initBank(&currentPattern);
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	94 e0       	ldi	r25, 0x04	; 4
    124c:	23 dc       	rcall	.-1978   	; 0xa94 <initBank>
	twi_init();
    124e:	0e 94 4d 19 	call	0x329a	; 0x329a <twi_init>
	sei();
    1252:	78 94       	sei
	//factory Reset, we should turn this into a global function. 
	if(((~PINA)&0x01)&&((~PINL)&0x01))
    1254:	00 99       	sbic	0x00, 0	; 0
    1256:	81 c0       	rjmp	.+258    	; 0x135a <main+0x130>
    1258:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    125c:	80 fd       	sbrc	r24, 0
    125e:	7f c0       	rjmp	.+254    	; 0x135e <main+0x134>
	{//if both buttons are pressed on startup, wait 4 seconds
		outputS("FactoryReset?       ",0);
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	82 e6       	ldi	r24, 0x62	; 98
    1266:	92 e0       	ldi	r25, 0x02	; 2
    1268:	0e 94 a1 13 	call	0x2742	; 0x2742 <outputS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    126c:	2f ef       	ldi	r18, 0xFF	; 255
    126e:	8f e4       	ldi	r24, 0x4F	; 79
    1270:	93 ec       	ldi	r25, 0xC3	; 195
    1272:	21 50       	subi	r18, 0x01	; 1
    1274:	80 40       	sbci	r24, 0x00	; 0
    1276:	90 40       	sbci	r25, 0x00	; 0
    1278:	e1 f7       	brne	.-8      	; 0x1272 <main+0x48>
    127a:	00 c0       	rjmp	.+0      	; 0x127c <main+0x52>
    127c:	00 00       	nop
		_delay_ms(4000);

		if(((~PINA)&0x01)&&((~PINL)&0x01))
    127e:	00 99       	sbic	0x00, 0	; 0
    1280:	70 c0       	rjmp	.+224    	; 0x1362 <main+0x138>
    1282:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    1286:	80 fd       	sbrc	r24, 0
    1288:	6e c0       	rjmp	.+220    	; 0x1366 <main+0x13c>
		{ 
			
			uint8_t choice = 2;
			uint8_t select = 0;
			char resetArray[21] = "yes?        no?     ";
    128a:	85 e1       	ldi	r24, 0x15	; 21
    128c:	ec e8       	ldi	r30, 0x8C	; 140
    128e:	f2 e0       	ldi	r31, 0x02	; 2
    1290:	de 01       	movw	r26, r28
    1292:	ae 54       	subi	r26, 0x4E	; 78
    1294:	bc 4f       	sbci	r27, 0xFC	; 252
    1296:	01 90       	ld	r0, Z+
    1298:	0d 92       	st	X+, r0
    129a:	8a 95       	dec	r24
    129c:	e1 f7       	brne	.-8      	; 0x1296 <main+0x6c>
			while(choice==2){
				outputS(resetArray,1);
				select = listenEnoderReset();
				if(select==0)
				{
					resetArray[4] = 8;
    129e:	08 e0       	ldi	r16, 0x08	; 8
					resetArray[15] = ' ';
    12a0:	10 e2       	ldi	r17, 0x20	; 32
			
			uint8_t choice = 2;
			uint8_t select = 0;
			char resetArray[21] = "yes?        no?     ";
			while(choice==2){
				outputS(resetArray,1);
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	ce 01       	movw	r24, r28
    12a8:	8e 54       	subi	r24, 0x4E	; 78
    12aa:	9c 4f       	sbci	r25, 0xFC	; 252
    12ac:	0e 94 a1 13 	call	0x2742	; 0x2742 <outputS>
				select = listenEnoderReset();
    12b0:	a6 db       	rcall	.-2228   	; 0x9fe <listenEnoderReset>
				if(select==0)
    12b2:	81 11       	cpse	r24, r1
    12b4:	0d c0       	rjmp	.+26     	; 0x12d0 <main+0xa6>
				{
					resetArray[4] = 8;
    12b6:	ca 54       	subi	r28, 0x4A	; 74
    12b8:	dc 4f       	sbci	r29, 0xFC	; 252
    12ba:	08 83       	st	Y, r16
    12bc:	c6 5b       	subi	r28, 0xB6	; 182
    12be:	d3 40       	sbci	r29, 0x03	; 3
					resetArray[15] = ' ';
    12c0:	cf 53       	subi	r28, 0x3F	; 63
    12c2:	dc 4f       	sbci	r29, 0xFC	; 252
    12c4:	18 83       	st	Y, r17
    12c6:	c1 5c       	subi	r28, 0xC1	; 193
    12c8:	d3 40       	sbci	r29, 0x03	; 3
				if(select==1)
				{
					resetArray[4] = ' ';
					resetArray[15] = 8;
				}				
				if((~PINB)&(1<<5))
    12ca:	1d 9b       	sbis	0x03, 5	; 3
    12cc:	14 c0       	rjmp	.+40     	; 0x12f6 <main+0xcc>
    12ce:	e9 cf       	rjmp	.-46     	; 0x12a2 <main+0x78>
				if(select==0)
				{
					resetArray[4] = 8;
					resetArray[15] = ' ';
				}
				if(select==1)
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	69 f4       	brne	.+26     	; 0x12ee <main+0xc4>
				{
					resetArray[4] = ' ';
    12d4:	ca 54       	subi	r28, 0x4A	; 74
    12d6:	dc 4f       	sbci	r29, 0xFC	; 252
    12d8:	18 83       	st	Y, r17
    12da:	c6 5b       	subi	r28, 0xB6	; 182
    12dc:	d3 40       	sbci	r29, 0x03	; 3
					resetArray[15] = 8;
    12de:	cf 53       	subi	r28, 0x3F	; 63
    12e0:	dc 4f       	sbci	r29, 0xFC	; 252
    12e2:	08 83       	st	Y, r16
    12e4:	c1 5c       	subi	r28, 0xC1	; 193
    12e6:	d3 40       	sbci	r29, 0x03	; 3
				}				
				if((~PINB)&(1<<5))
    12e8:	1d 9b       	sbis	0x03, 5	; 3
    12ea:	33 c0       	rjmp	.+102    	; 0x1352 <main+0x128>
    12ec:	da cf       	rjmp	.-76     	; 0x12a2 <main+0x78>
    12ee:	1d 99       	sbic	0x03, 5	; 3
    12f0:	d8 cf       	rjmp	.-80     	; 0x12a2 <main+0x78>
		{ 
			
			uint8_t choice = 2;
			uint8_t select = 0;
			char resetArray[21] = "yes?        no?     ";
			while(choice==2){
    12f2:	82 30       	cpi	r24, 0x02	; 2
    12f4:	b1 f2       	breq	.-84     	; 0x12a2 <main+0x78>
				{
					choice = select; //break out of while loop, and reset, or not. 
				}
			}
			
			if(select==0) //yes was selected. 
    12f6:	81 11       	cpse	r24, r1
    12f8:	2e c0       	rjmp	.+92     	; 0x1356 <main+0x12c>
			{
				outputS("Progress:           ",2);
    12fa:	62 e0       	ldi	r22, 0x02	; 2
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	87 e7       	ldi	r24, 0x77	; 119
    1300:	92 e0       	ldi	r25, 0x02	; 2
    1302:	0e 94 a1 13 	call	0x2742	; 0x2742 <outputS>
				factoryReset=1;
				initGlobals(&currentGlobals, factoryReset);
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	8b e7       	ldi	r24, 0x7B	; 123
    130a:	95 e0       	ldi	r25, 0x05	; 5
    130c:	f2 db       	rcall	.-2076   	; 0xaf2 <initGlobals>
				factoryResetEeprom(currentPattern);
    130e:	8d b7       	in	r24, 0x3d	; 61
    1310:	9e b7       	in	r25, 0x3e	; 62
    1312:	8b 57       	subi	r24, 0x7B	; 123
    1314:	91 40       	sbci	r25, 0x01	; 1
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	9e bf       	out	0x3e, r25	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	8d bf       	out	0x3d, r24	; 61
    1320:	ad b7       	in	r26, 0x3d	; 61
    1322:	be b7       	in	r27, 0x3e	; 62
    1324:	11 96       	adiw	r26, 0x01	; 1
    1326:	8b e7       	ldi	r24, 0x7B	; 123
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	e0 e0       	ldi	r30, 0x00	; 0
    132c:	f4 e0       	ldi	r31, 0x04	; 4
    132e:	01 90       	ld	r0, Z+
    1330:	0d 92       	st	X+, r0
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	e1 f7       	brne	.-8      	; 0x132e <main+0x104>
    1336:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <factoryResetEeprom>
				globalWrite(&currentGlobals);
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	8b e7       	ldi	r24, 0x7B	; 123
    1346:	95 e0       	ldi	r25, 0x05	; 5
    1348:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <globalWrite>
			}
			
			if(select==0) //yes was selected. 
			{
				outputS("Progress:           ",2);
				factoryReset=1;
    134c:	cc 24       	eor	r12, r12
    134e:	c3 94       	inc	r12
    1350:	0b c0       	rjmp	.+22     	; 0x1368 <main+0x13e>
volatile Pattern currentPattern;
volatile Globals currentGlobals;
volatile uint32_t globalTimer = 0;

int main(){
	uint8_t factoryReset=0; // set this to 1 if you would like to fill the eeprom with Factory data, and erase all user data.
    1352:	c1 2c       	mov	r12, r1
    1354:	09 c0       	rjmp	.+18     	; 0x1368 <main+0x13e>
    1356:	c1 2c       	mov	r12, r1
    1358:	07 c0       	rjmp	.+14     	; 0x1368 <main+0x13e>
    135a:	c1 2c       	mov	r12, r1
    135c:	05 c0       	rjmp	.+10     	; 0x1368 <main+0x13e>
    135e:	c1 2c       	mov	r12, r1
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <main+0x13e>
    1362:	c1 2c       	mov	r12, r1
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <main+0x13e>
			}
		}
		
	}
	
	initTimer();
    1366:	c1 2c       	mov	r12, r1
	initGlobals(&currentGlobals, factoryReset);
    1368:	07 dc       	rcall	.-2034   	; 0xb78 <initTimer>
    136a:	6c 2d       	mov	r22, r12
    136c:	8b e7       	ldi	r24, 0x7B	; 123
    136e:	95 e0       	ldi	r25, 0x05	; 5
	initLEDs();
    1370:	c0 db       	rcall	.-2176   	; 0xaf2 <initGlobals>
    1372:	01 df       	rcall	.-510    	; 0x1176 <initLEDs>
	initADC();
    1374:	56 dc       	rcall	.-1876   	; 0xc22 <initADC>
    1376:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <serialInit0>
	serialInit0();
    137a:	0e 94 9d 12 	call	0x253a	; 0x253a <initMidi>
	initMidi();
    137e:	60 91 7e 05 	lds	r22, 0x057E	; 0x80057e <currentGlobals+0x3>
	//initEnvelopes();
	//initSequencer();
	
	
	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	94 e0       	ldi	r25, 0x04	; 4
    1386:	0e 94 98 1b 	call	0x3730	; 0x3730 <eepromLoadPattern>
    138a:	00 e0       	ldi	r16, 0x00	; 0
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    138c:	10 e0       	ldi	r17, 0x00	; 0
    138e:	0f 2e       	mov	r0, r31
	{
		uint8_t loadSelect = i%44;
    1390:	fc e2       	ldi	r31, 0x2C	; 44
    1392:	df 2e       	mov	r13, r31
    1394:	f0 2d       	mov	r31, r0
    1396:	98 01       	movw	r18, r16
    1398:	af e2       	ldi	r26, 0x2F	; 47
    139a:	ba eb       	ldi	r27, 0xBA	; 186
    139c:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    13a0:	96 95       	lsr	r25
    13a2:	87 95       	ror	r24
    13a4:	92 95       	swap	r25
    13a6:	82 95       	swap	r24
    13a8:	8f 70       	andi	r24, 0x0F	; 15
    13aa:	89 27       	eor	r24, r25
    13ac:	9f 70       	andi	r25, 0x0F	; 15
    13ae:	89 27       	eor	r24, r25
    13b0:	d8 9e       	mul	r13, r24
    13b2:	90 01       	movw	r18, r0
    13b4:	d9 9e       	mul	r13, r25
    13b6:	30 0d       	add	r19, r0
    13b8:	11 24       	eor	r1, r1
    13ba:	78 01       	movw	r14, r16
    13bc:	e2 1a       	sub	r14, r18
		selectKnob(loadSelect);
    13be:	f3 0a       	sbc	r15, r19
    13c0:	8e 2d       	mov	r24, r14
    13c2:	44 dc       	rcall	.-1912   	; 0xc4c <selectKnob>
		updateKnob(loadSelect, &currentGlobals);
    13c4:	6b e7       	ldi	r22, 0x7B	; 123
    13c6:	75 e0       	ldi	r23, 0x05	; 5
    13c8:	8e 2d       	mov	r24, r14
    13ca:	80 dc       	rcall	.-1792   	; 0xccc <updateKnob>
	//initEnvelopes();
	//initSequencer();
	
	
	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    13cc:	0f 5f       	subi	r16, 0xFF	; 255
    13ce:	1f 4f       	sbci	r17, 0xFF	; 255
    13d0:	08 3b       	cpi	r16, 0xB8	; 184
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	19 07       	cpc	r17, r25
    13d6:	f9 f6       	brne	.-66     	; 0x1396 <main+0x16c>
	{
		uint8_t loadSelect = i%44;
		selectKnob(loadSelect);
		updateKnob(loadSelect, &currentGlobals);
	}
	initializeKnob(&currentGlobals); //then copy it to the lastFilteredKnobBuffer. 
    13d8:	8b e7       	ldi	r24, 0x7B	; 123
    13da:	95 e0       	ldi	r25, 0x05	; 5
    13dc:	96 dc       	rcall	.-1748   	; 0xd0a <initializeKnob>
    13de:	6c 2d       	mov	r22, r12
	globalLoad(&currentGlobals, factoryReset);
    13e0:	8b e7       	ldi	r24, 0x7B	; 123
    13e2:	95 e0       	ldi	r25, 0x05	; 5
    13e4:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <globalLoad>
    13e8:	8d b7       	in	r24, 0x3d	; 61
	initMenu(&screenBank, currentPattern, currentGlobals); //fills screenBank with menu strings
    13ea:	9e b7       	in	r25, 0x3e	; 62
    13ec:	8d 5e       	subi	r24, 0xED	; 237
    13ee:	91 09       	sbc	r25, r1
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	9e bf       	out	0x3e, r25	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	8d bf       	out	0x3d, r24	; 61
    13fa:	ad b7       	in	r26, 0x3d	; 61
    13fc:	be b7       	in	r27, 0x3e	; 62
    13fe:	11 96       	adiw	r26, 0x01	; 1
    1400:	8d ee       	ldi	r24, 0xED	; 237
    1402:	eb e7       	ldi	r30, 0x7B	; 123
    1404:	f5 e0       	ldi	r31, 0x05	; 5
    1406:	01 90       	ld	r0, Z+
    1408:	0d 92       	st	X+, r0
    140a:	8a 95       	dec	r24
    140c:	e1 f7       	brne	.-8      	; 0x1406 <main+0x1dc>
    140e:	8d b7       	in	r24, 0x3d	; 61
    1410:	9e b7       	in	r25, 0x3e	; 62
    1412:	8b 57       	subi	r24, 0x7B	; 123
    1414:	91 40       	sbci	r25, 0x01	; 1
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	9e bf       	out	0x3e, r25	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	8d bf       	out	0x3d, r24	; 61
    1420:	ad b7       	in	r26, 0x3d	; 61
    1422:	be b7       	in	r27, 0x3e	; 62
    1424:	11 96       	adiw	r26, 0x01	; 1
    1426:	8b e7       	ldi	r24, 0x7B	; 123
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	e0 e0       	ldi	r30, 0x00	; 0
    142c:	f4 e0       	ldi	r31, 0x04	; 4
    142e:	01 90       	ld	r0, Z+
    1430:	0d 92       	st	X+, r0
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	e1 f7       	brne	.-8      	; 0x142e <main+0x204>
    1436:	ce 01       	movw	r24, r28
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	2c d1       	rcall	.+600    	; 0x1694 <initMenu>
    143c:	f8 94       	cli
	//this ISR is used for Button De-Bouncing. Maybe we could put it somewhere else. 
	//TCCR2B = 1<<CS22;//using 256 from pre-scaler
	//TIMSK2 = 1<<TOIE2; //interupt on counter overflow. since we're interupting on value 256 of with a 256 pre-scaler, we're calling this function every 65,536
	//clock cycles. at 16MHz, that equates to every 0.004096, seconds, or every 4 milliseconds. We ~~~should be able to do the same thing from our global counter.

	cli(); //this may not be needed, but also may be effecting things since we're setting interrupt registers after sei has already happened. 
    143e:	78 94       	sei
	sei();
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61


while(1) {
	
	
	updateTimers(&currentGlobals, globalTimer); //we update our global timers here. 
    144a:	40 91 f1 03 	lds	r20, 0x03F1	; 0x8003f1 <globalTimer>
    144e:	50 91 f2 03 	lds	r21, 0x03F2	; 0x8003f2 <globalTimer+0x1>
    1452:	60 91 f3 03 	lds	r22, 0x03F3	; 0x8003f3 <globalTimer+0x2>
    1456:	70 91 f4 03 	lds	r23, 0x03F4	; 0x8003f4 <globalTimer+0x3>
    145a:	8b e7       	ldi	r24, 0x7B	; 123
    145c:	95 e0       	ldi	r25, 0x05	; 5
    145e:	98 db       	rcall	.-2256   	; 0xb90 <updateTimers>
    1460:	6b e7       	ldi	r22, 0x7B	; 123
	
	listenTrigButtons(&currentPattern, &currentGlobals);
    1462:	75 e0       	ldi	r23, 0x05	; 5
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	94 e0       	ldi	r25, 0x04	; 4
    1468:	0e 94 4e 01 	call	0x29c	; 0x29c <listenTrigButtons>
    146c:	0b e7       	ldi	r16, 0x7B	; 123
	listenGPButtons(currentPattern, &currentGlobals);
    146e:	15 e0       	ldi	r17, 0x05	; 5
    1470:	1f 93       	push	r17
    1472:	0f 93       	push	r16
    1474:	8d b7       	in	r24, 0x3d	; 61
    1476:	9e b7       	in	r25, 0x3e	; 62
    1478:	8b 57       	subi	r24, 0x7B	; 123
    147a:	91 40       	sbci	r25, 0x01	; 1
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	9e bf       	out	0x3e, r25	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	8d bf       	out	0x3d, r24	; 61
    1486:	ad b7       	in	r26, 0x3d	; 61
    1488:	be b7       	in	r27, 0x3e	; 62
    148a:	11 96       	adiw	r26, 0x01	; 1
    148c:	8b e7       	ldi	r24, 0x7B	; 123
    148e:	91 e0       	ldi	r25, 0x01	; 1
    1490:	e0 e0       	ldi	r30, 0x00	; 0
    1492:	f4 e0       	ldi	r31, 0x04	; 4
    1494:	01 90       	ld	r0, Z+
    1496:	0d 92       	st	X+, r0
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	e1 f7       	brne	.-8      	; 0x1494 <main+0x26a>
    149c:	0e 94 b7 01 	call	0x36e	; 0x36e <listenGPButtons>
    14a0:	8d b7       	in	r24, 0x3d	; 61
	updateLEDs(currentPattern, currentGlobals);
    14a2:	9e b7       	in	r25, 0x3e	; 62
    14a4:	83 58       	subi	r24, 0x83	; 131
    14a6:	9e 4f       	sbci	r25, 0xFE	; 254
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	8d 5e       	subi	r24, 0xED	; 237
    14b4:	91 09       	sbc	r25, r1
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	9e bf       	out	0x3e, r25	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	8d bf       	out	0x3d, r24	; 61
    14c0:	ad b7       	in	r26, 0x3d	; 61
    14c2:	be b7       	in	r27, 0x3e	; 62
    14c4:	11 96       	adiw	r26, 0x01	; 1
    14c6:	8d ee       	ldi	r24, 0xED	; 237
    14c8:	f8 01       	movw	r30, r16
    14ca:	01 90       	ld	r0, Z+
    14cc:	0d 92       	st	X+, r0
    14ce:	8a 95       	dec	r24
    14d0:	e1 f7       	brne	.-8      	; 0x14ca <main+0x2a0>
    14d2:	8d b7       	in	r24, 0x3d	; 61
    14d4:	9e b7       	in	r25, 0x3e	; 62
    14d6:	8b 57       	subi	r24, 0x7B	; 123
    14d8:	91 40       	sbci	r25, 0x01	; 1
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	9e bf       	out	0x3e, r25	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	8d bf       	out	0x3d, r24	; 61
    14e4:	ad b7       	in	r26, 0x3d	; 61
    14e6:	be b7       	in	r27, 0x3e	; 62
    14e8:	11 96       	adiw	r26, 0x01	; 1
    14ea:	8b e7       	ldi	r24, 0x7B	; 123
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	e0 e0       	ldi	r30, 0x00	; 0
    14f0:	f4 e0       	ldi	r31, 0x04	; 4
    14f2:	01 90       	ld	r0, Z+
    14f4:	0d 92       	st	X+, r0
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	e1 f7       	brne	.-8      	; 0x14f2 <main+0x2c8>
    14fa:	5a de       	rcall	.-844    	; 0x11b0 <updateLEDs>
	listenEncoders(&currentPattern, &currentGlobals);
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	b8 01       	movw	r22, r16
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	94 e0       	ldi	r25, 0x04	; 4
    150c:	50 d8       	rcall	.-3936   	; 0x5ae <listenEncoders>
    150e:	b8 01       	movw	r22, r16
	listenKnobs(&currentPattern, &currentGlobals);
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	94 e0       	ldi	r25, 0x04	; 4
    1514:	16 de       	rcall	.-980    	; 0x1142 <listenKnobs>
    1516:	1f 93       	push	r17
    1518:	0f 93       	push	r16
	updateSequencer(currentPattern, &currentGlobals);
    151a:	8d b7       	in	r24, 0x3d	; 61
    151c:	9e b7       	in	r25, 0x3e	; 62
    151e:	8b 57       	subi	r24, 0x7B	; 123
    1520:	91 40       	sbci	r25, 0x01	; 1
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	9e bf       	out	0x3e, r25	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	8d bf       	out	0x3d, r24	; 61
    152c:	ad b7       	in	r26, 0x3d	; 61
    152e:	be b7       	in	r27, 0x3e	; 62
    1530:	11 96       	adiw	r26, 0x01	; 1
    1532:	8b e7       	ldi	r24, 0x7B	; 123
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	e0 e0       	ldi	r30, 0x00	; 0
    1538:	f4 e0       	ldi	r31, 0x04	; 4
    153a:	01 90       	ld	r0, Z+
    153c:	0d 92       	st	X+, r0
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	e1 f7       	brne	.-8      	; 0x153a <main+0x310>
    1542:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <updateSequencer>
    1546:	0f b6       	in	r0, 0x3f	; 63
	updateScreen(&screenBank, &currentPattern, &currentGlobals);
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	a8 01       	movw	r20, r16
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	74 e0       	ldi	r23, 0x04	; 4
    1556:	ce 01       	movw	r24, r28
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	dc d1       	rcall	.+952    	; 0x1914 <updateScreen>
    155c:	8d b7       	in	r24, 0x3d	; 61
    155e:	9e b7       	in	r25, 0x3e	; 62
	midiRead(currentPattern, currentGlobals);
    1560:	8d 5e       	subi	r24, 0xED	; 237
    1562:	91 09       	sbc	r25, r1
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	9e bf       	out	0x3e, r25	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	8d bf       	out	0x3d, r24	; 61
    156e:	ad b7       	in	r26, 0x3d	; 61
    1570:	be b7       	in	r27, 0x3e	; 62
    1572:	11 96       	adiw	r26, 0x01	; 1
    1574:	8d ee       	ldi	r24, 0xED	; 237
    1576:	f8 01       	movw	r30, r16
    1578:	01 90       	ld	r0, Z+
    157a:	0d 92       	st	X+, r0
    157c:	8a 95       	dec	r24
    157e:	e1 f7       	brne	.-8      	; 0x1578 <main+0x34e>
    1580:	8d b7       	in	r24, 0x3d	; 61
    1582:	9e b7       	in	r25, 0x3e	; 62
    1584:	8b 57       	subi	r24, 0x7B	; 123
    1586:	91 40       	sbci	r25, 0x01	; 1
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	9e bf       	out	0x3e, r25	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	8d bf       	out	0x3d, r24	; 61
    1592:	ad b7       	in	r26, 0x3d	; 61
    1594:	be b7       	in	r27, 0x3e	; 62
    1596:	11 96       	adiw	r26, 0x01	; 1
    1598:	8b e7       	ldi	r24, 0x7B	; 123
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	e0 e0       	ldi	r30, 0x00	; 0
    159e:	f4 e0       	ldi	r31, 0x04	; 4
    15a0:	01 90       	ld	r0, Z+
    15a2:	0d 92       	st	X+, r0
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	e1 f7       	brne	.-8      	; 0x15a0 <main+0x376>
    15a8:	d8 d7       	rcall	.+4016   	; 0x255a <midiRead>
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
	releaseUpdate(&currentPattern, &currentGlobals);
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	b8 01       	movw	r22, r16
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	94 e0       	ldi	r25, 0x04	; 4
    15ba:	0e 94 cf 18 	call	0x319e	; 0x319e <releaseUpdate>
    15be:	45 cf       	rjmp	.-374    	; 0x144a <main+0x220>

000015c0 <__vector_13>:
    15c0:	1f 92       	push	r1
    15c2:	0f 92       	push	r0
	//outputS(testArray,0);
	}
}

ISR(TIMER2_COMPA_vect)
{
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	0f 92       	push	r0
    15c8:	11 24       	eor	r1, r1
    15ca:	0b b6       	in	r0, 0x3b	; 59
    15cc:	0f 92       	push	r0
    15ce:	2f 93       	push	r18
    15d0:	3f 93       	push	r19
    15d2:	4f 93       	push	r20
    15d4:	5f 93       	push	r21
    15d6:	6f 93       	push	r22
    15d8:	7f 93       	push	r23
    15da:	8f 93       	push	r24
    15dc:	9f 93       	push	r25
    15de:	af 93       	push	r26
    15e0:	bf 93       	push	r27
    15e2:	ef 93       	push	r30
    15e4:	ff 93       	push	r31
	globalTimer++; //this counts in one order of magnitude smaller than millis : 0.0001 seconds. 
    15e6:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <globalTimer>
    15ea:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <globalTimer+0x1>
    15ee:	a0 91 f3 03 	lds	r26, 0x03F3	; 0x8003f3 <globalTimer+0x2>
    15f2:	b0 91 f4 03 	lds	r27, 0x03F4	; 0x8003f4 <globalTimer+0x3>
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	a1 1d       	adc	r26, r1
    15fa:	b1 1d       	adc	r27, r1
    15fc:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <globalTimer>
    1600:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <globalTimer+0x1>
    1604:	a0 93 f3 03 	sts	0x03F3, r26	; 0x8003f3 <globalTimer+0x2>
    1608:	b0 93 f4 03 	sts	0x03F4, r27	; 0x8003f4 <globalTimer+0x3>
	//we don't want to do anything else here.
	if(globalTimer%40==0) //every 40 ticks, we want to call Debounce
    160c:	60 91 f1 03 	lds	r22, 0x03F1	; 0x8003f1 <globalTimer>
    1610:	70 91 f2 03 	lds	r23, 0x03F2	; 0x8003f2 <globalTimer+0x1>
    1614:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <globalTimer+0x2>
    1618:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <globalTimer+0x3>
    161c:	28 e2       	ldi	r18, 0x28	; 40
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <__udivmodsi4>
    1628:	67 2b       	or	r22, r23
    162a:	68 2b       	or	r22, r24
    162c:	69 2b       	or	r22, r25
    162e:	f9 f4       	brne	.+62     	; 0x166e <__vector_13+0xae>

static inline void debounce() //is this Timer interrupt too long?
{
	static uint8_t vcount_low = 0xFF, vcount_high = 0xFF;
	static uint8_t button_state = 0;
	uint8_t state_changed = ~BUTTON_PIN ^ button_state;
    1630:	83 b1       	in	r24, 0x03	; 3
    1632:	20 91 f0 03 	lds	r18, 0x03F0	; 0x8003f0 <button_state.1739>
    1636:	80 95       	com	r24
    1638:	38 2f       	mov	r19, r24
    163a:	32 27       	eor	r19, r18
	VC_DEC_OR_SET(vcount_high, vcount_low, state_changed);
    163c:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <vcount_low.1737>
    1640:	93 23       	and	r25, r19
    1642:	89 2f       	mov	r24, r25
    1644:	80 95       	com	r24
    1646:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <vcount_low.1737>
    164a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <vcount_high.1738>
    164e:	93 23       	and	r25, r19
    1650:	98 27       	eor	r25, r24
    1652:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <vcount_high.1738>
    1656:	83 23       	and	r24, r19
	state_changed &= vcount_low & vcount_high;
    1658:	89 23       	and	r24, r25
	button_state ^= state_changed;
    165a:	92 2f       	mov	r25, r18
    165c:	98 27       	eor	r25, r24
    165e:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <button_state.1739>
	buttons_down |= button_state&state_changed;
    1662:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <buttons_down>
    1666:	89 23       	and	r24, r25
    1668:	82 2b       	or	r24, r18
    166a:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <buttons_down>
	{
		debounce();
	}
}
    166e:	ff 91       	pop	r31
    1670:	ef 91       	pop	r30
    1672:	bf 91       	pop	r27
    1674:	af 91       	pop	r26
    1676:	9f 91       	pop	r25
    1678:	8f 91       	pop	r24
    167a:	7f 91       	pop	r23
    167c:	6f 91       	pop	r22
    167e:	5f 91       	pop	r21
    1680:	4f 91       	pop	r20
    1682:	3f 91       	pop	r19
    1684:	2f 91       	pop	r18
    1686:	0f 90       	pop	r0
    1688:	0b be       	out	0x3b, r0	; 59
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti

00001694 <initMenu>:
uint8_t prevMenuState; //do we need this anymore?

//I don't like using a global extern here, instead of a passed pointer,
//but I can't seem to get the struct to stay in scope.
void initMenu(Screen *initTheScreen, Pattern currentPattern, Globals currentGlobals)
{
    1694:	cf 92       	push	r12
    1696:	df 92       	push	r13
    1698:	ef 92       	push	r14
    169a:	ff 92       	push	r15
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	8c 01       	movw	r16, r24
    16aa:	c6 57       	subi	r28, 0x76	; 118
    16ac:	de 4f       	sbci	r29, 0xFE	; 254
    16ae:	e8 80       	ld	r14, Y
    16b0:	ca 58       	subi	r28, 0x8A	; 138
    16b2:	d1 40       	sbci	r29, 0x01	; 1

//screen0
initArrays(initTheScreen->screen0,0,"Performance Mode");
    16b4:	41 ea       	ldi	r20, 0xA1	; 161
    16b6:	52 e0       	ldi	r21, 0x02	; 2
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	ac d9       	rcall	.-3240   	; 0xa16 <initArrays>
initArrays(initTheScreen->screen0,1,"Pattern:");
    16be:	42 eb       	ldi	r20, 0xB2	; 178
    16c0:	52 e0       	ldi	r21, 0x02	; 2
    16c2:	61 e0       	ldi	r22, 0x01	; 1
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	c8 01       	movw	r24, r16
    16c8:	a6 d9       	rcall	.-3252   	; 0xa16 <initArrays>
initArrays(initTheScreen->screen0,2,"BPM:");
    16ca:	4b eb       	ldi	r20, 0xBB	; 187
    16cc:	52 e0       	ldi	r21, 0x02	; 2
    16ce:	62 e0       	ldi	r22, 0x02	; 2
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	c8 01       	movw	r24, r16
    16d4:	a0 d9       	rcall	.-3264   	; 0xa16 <initArrays>
initArrays(initTheScreen->screen0,3,"Stop");
    16d6:	40 ec       	ldi	r20, 0xC0	; 192
    16d8:	52 e0       	ldi	r21, 0x02	; 2
    16da:	63 e0       	ldi	r22, 0x03	; 3
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	c8 01       	movw	r24, r16
    16e0:	9a d9       	rcall	.-3276   	; 0xa16 <initArrays>

//screen1
initArrays(initTheScreen->screen1,0,"Sequence Edit");
    16e2:	68 01       	movw	r12, r16
    16e4:	8d eb       	ldi	r24, 0xBD	; 189
    16e6:	c8 0e       	add	r12, r24
    16e8:	d1 1c       	adc	r13, r1
    16ea:	45 ec       	ldi	r20, 0xC5	; 197
    16ec:	52 e0       	ldi	r21, 0x02	; 2
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	c6 01       	movw	r24, r12
    16f4:	90 d9       	rcall	.-3296   	; 0xa16 <initArrays>
initArrays(initTheScreen->screen1,1,"Pattern:");
    16f6:	42 eb       	ldi	r20, 0xB2	; 178
    16f8:	52 e0       	ldi	r21, 0x02	; 2
    16fa:	61 e0       	ldi	r22, 0x01	; 1
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	c6 01       	movw	r24, r12
    1700:	8a d9       	rcall	.-3308   	; 0xa16 <initArrays>
initArrays(initTheScreen->screen1,2,"Steps:");
    1702:	43 ed       	ldi	r20, 0xD3	; 211
    1704:	52 e0       	ldi	r21, 0x02	; 2
    1706:	62 e0       	ldi	r22, 0x02	; 2
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	c6 01       	movw	r24, r12
    170c:	84 d9       	rcall	.-3320   	; 0xa16 <initArrays>
initArrays(initTheScreen->screen1,3,"Step number:");
    170e:	4a ed       	ldi	r20, 0xDA	; 218
    1710:	52 e0       	ldi	r21, 0x02	; 2
    1712:	63 e0       	ldi	r22, 0x03	; 3
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	c6 01       	movw	r24, r12
    1718:	7e d9       	rcall	.-3332   	; 0xa16 <initArrays>
    171a:	68 01       	movw	r12, r16

//screen2
initArrays(initTheScreen->screen2,0,"Track Settings");
    171c:	86 e8       	ldi	r24, 0x86	; 134
    171e:	c8 1a       	sub	r12, r24
    1720:	8e ef       	ldi	r24, 0xFE	; 254
    1722:	d8 0a       	sbc	r13, r24
    1724:	47 ee       	ldi	r20, 0xE7	; 231
    1726:	52 e0       	ldi	r21, 0x02	; 2
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	c6 01       	movw	r24, r12
    172e:	73 d9       	rcall	.-3354   	; 0xa16 <initArrays>
initArrays(initTheScreen->screen2,1,"Track:");
    1730:	46 ef       	ldi	r20, 0xF6	; 246
    1732:	52 e0       	ldi	r21, 0x02	; 2
    1734:	61 e0       	ldi	r22, 0x01	; 1
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	c6 01       	movw	r24, r12
    173a:	6d d9       	rcall	.-3366   	; 0xa16 <initArrays>
initArrays(initTheScreen->screen2,2,"PlayMode:");
    173c:	4d ef       	ldi	r20, 0xFD	; 253
    173e:	52 e0       	ldi	r21, 0x02	; 2
    1740:	62 e0       	ldi	r22, 0x02	; 2
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	c6 01       	movw	r24, r12
    1746:	67 d9       	rcall	.-3378   	; 0xa16 <initArrays>
initArrays(initTheScreen->screen2,3,"OutRoute:");
    1748:	47 e0       	ldi	r20, 0x07	; 7
    174a:	53 e0       	ldi	r21, 0x03	; 3
    174c:	63 e0       	ldi	r22, 0x03	; 3
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	c6 01       	movw	r24, r12
    1752:	61 d9       	rcall	.-3390   	; 0xa16 <initArrays>
initArrays(initTheScreen->screen2,4,"EnvelopeMode:");
    1754:	41 e1       	ldi	r20, 0x11	; 17
    1756:	53 e0       	ldi	r21, 0x03	; 3
    1758:	64 e0       	ldi	r22, 0x04	; 4
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	c6 01       	movw	r24, r12
    175e:	5b d9       	rcall	.-3402   	; 0xa16 <initArrays>
    1760:	4f e1       	ldi	r20, 0x1F	; 31
initArrays(initTheScreen->screen2,5,"SustainTime:      S");
    1762:	53 e0       	ldi	r21, 0x03	; 3
    1764:	65 e0       	ldi	r22, 0x05	; 5
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	c6 01       	movw	r24, r12
    176a:	55 d9       	rcall	.-3414   	; 0xa16 <initArrays>
    176c:	68 01       	movw	r12, r16

//screen3
initArrays(initTheScreen->screen3,1,"Midi Channel:");
    176e:	89 ec       	ldi	r24, 0xC9	; 201
    1770:	c8 1a       	sub	r12, r24
    1772:	8d ef       	ldi	r24, 0xFD	; 253
    1774:	d8 0a       	sbc	r13, r24
    1776:	43 e3       	ldi	r20, 0x33	; 51
    1778:	53 e0       	ldi	r21, 0x03	; 3
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	c6 01       	movw	r24, r12
    1780:	4a d9       	rcall	.-3436   	; 0xa16 <initArrays>
initArrays(initTheScreen->screen3,2,"Midi trig   :");
    1782:	41 e4       	ldi	r20, 0x41	; 65
    1784:	53 e0       	ldi	r21, 0x03	; 3
    1786:	62 e0       	ldi	r22, 0x02	; 2
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	c6 01       	movw	r24, r12
    178c:	44 d9       	rcall	.-3448   	; 0xa16 <initArrays>
initArrays(initTheScreen->screen3,3," ");
    178e:	46 ee       	ldi	r20, 0xE6	; 230
    1790:	53 e0       	ldi	r21, 0x03	; 3
    1792:	63 e0       	ldi	r22, 0x03	; 3
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	c6 01       	movw	r24, r12
    1798:	3e d9       	rcall	.-3460   	; 0xa16 <initArrays>
initArrays(initTheScreen->screen3,0,"Global Settings");
    179a:	4f e4       	ldi	r20, 0x4F	; 79
    179c:	53 e0       	ldi	r21, 0x03	; 3
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	c6 01       	movw	r24, r12
    17a4:	38 d9       	rcall	.-3472   	; 0xa16 <initArrays>

//init all of the knob arrays:
initArrays(initTheScreen->knobScreen,0,"OutVolume x : xxxdb");//string 0 is outVolume
    17a6:	68 01       	movw	r12, r16
    17a8:	8c e0       	ldi	r24, 0x0C	; 12
    17aa:	c8 1a       	sub	r12, r24
    17ac:	8d ef       	ldi	r24, 0xFD	; 253
    17ae:	d8 0a       	sbc	r13, r24
    17b0:	4f e5       	ldi	r20, 0x5F	; 95
    17b2:	53 e0       	ldi	r21, 0x03	; 3
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,1,"Pitch : xxx");//string 1 is pitch
    17ba:	2d d9       	rcall	.-3494   	; 0xa16 <initArrays>
    17bc:	43 e7       	ldi	r20, 0x73	; 115
    17be:	53 e0       	ldi	r21, 0x03	; 3
    17c0:	61 e0       	ldi	r22, 0x01	; 1
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,2,"AttackTime  :      S"); //string 2 is Envelope gain
    17c6:	27 d9       	rcall	.-3506   	; 0xa16 <initArrays>
    17c8:	4f e7       	ldi	r20, 0x7F	; 127
    17ca:	53 e0       	ldi	r21, 0x03	; 3
    17cc:	62 e0       	ldi	r22, 0x02	; 2
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	c6 01       	movw	r24, r12
    17d2:	21 d9       	rcall	.-3518   	; 0xa16 <initArrays>
initArrays(initTheScreen->knobScreen,3,"ReleaseTimexx:xx xxx"); //string 3 is Envelop Time
    17d4:	44 e9       	ldi	r20, 0x94	; 148
    17d6:	53 e0       	ldi	r21, 0x03	; 3
    17d8:	63 e0       	ldi	r22, 0x03	; 3
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	c6 01       	movw	r24, r12
    17de:	1b d9       	rcall	.-3530   	; 0xa16 <initArrays>
initArrays(initTheScreen->knobScreen,4,"TrackVolume xx:xxxdb"); //string 4 is track Level.
    17e0:	49 ea       	ldi	r20, 0xA9	; 169
    17e2:	53 e0       	ldi	r21, 0x03	; 3
    17e4:	64 e0       	ldi	r22, 0x04	; 4
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	c6 01       	movw	r24, r12
    17ea:	15 d9       	rcall	.-3542   	; 0xa16 <initArrays>
    17ec:	cc 52       	subi	r28, 0x2C	; 44
//initArrays(initTheScreen->knobScreen,5,"BPM: ");
//we might want to put in one of these for BPM, but I'm not sure. 

numPrinter(initTheScreen->screen0[2],5,3, currentPattern.patternBPM);
    17ee:	df 4f       	sbci	r29, 0xFF	; 255
    17f0:	28 81       	ld	r18, Y
    17f2:	39 81       	ldd	r19, Y+1	; 0x01
    17f4:	c4 5d       	subi	r28, 0xD4	; 212
    17f6:	d0 40       	sbci	r29, 0x00	; 0
    17f8:	43 e0       	ldi	r20, 0x03	; 3
    17fa:	65 e0       	ldi	r22, 0x05	; 5
    17fc:	c8 01       	movw	r24, r16
    17fe:	8a 96       	adiw	r24, 0x2a	; 42
    1800:	b8 d7       	rcall	.+3952   	; 0x2772 <numPrinter>
    1802:	cd 56       	subi	r28, 0x6D	; 109
numPrinter(initTheScreen->screen3[1],14,2, (currentGlobals.midiChannel)+1);
    1804:	de 4f       	sbci	r29, 0xFE	; 254
    1806:	28 81       	ld	r18, Y
    1808:	c3 59       	subi	r28, 0x93	; 147
    180a:	d1 40       	sbci	r29, 0x01	; 1
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	2f 5f       	subi	r18, 0xFF	; 255
    1810:	3f 4f       	sbci	r19, 0xFF	; 255
    1812:	42 e0       	ldi	r20, 0x02	; 2
    1814:	6e e0       	ldi	r22, 0x0E	; 14
    1816:	c8 01       	movw	r24, r16
    1818:	84 5b       	subi	r24, 0xB4	; 180
    181a:	9d 4f       	sbci	r25, 0xFD	; 253
    181c:	aa d7       	rcall	.+3924   	; 0x2772 <numPrinter>
    181e:	f1 2c       	mov	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    1820:	8f ef       	ldi	r24, 0xFF	; 255
    1822:	e8 1a       	sub	r14, r24
    1824:	f8 0a       	sbc	r15, r24
    1826:	97 01       	movw	r18, r14
    1828:	43 e0       	ldi	r20, 0x03	; 3
    182a:	69 e0       	ldi	r22, 0x09	; 9
    182c:	c8 01       	movw	r24, r16
    182e:	45 96       	adiw	r24, 0x15	; 21
    1830:	a0 d7       	rcall	.+3904   	; 0x2772 <numPrinter>
    1832:	97 01       	movw	r18, r14
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    1834:	43 e0       	ldi	r20, 0x03	; 3
    1836:	69 e0       	ldi	r22, 0x09	; 9
    1838:	c8 01       	movw	r24, r16
    183a:	8e 52       	subi	r24, 0x2E	; 46
    183c:	9f 4f       	sbci	r25, 0xFF	; 255
    183e:	99 d7       	rcall	.+3890   	; 0x2772 <numPrinter>
    1840:	ca 52       	subi	r28, 0x2A	; 42
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
    1842:	df 4f       	sbci	r29, 0xFF	; 255
    1844:	28 81       	ld	r18, Y
    1846:	c6 5d       	subi	r28, 0xD6	; 214
    1848:	d0 40       	sbci	r29, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	42 e0       	ldi	r20, 0x02	; 2
    184e:	67 e0       	ldi	r22, 0x07	; 7
    1850:	c8 01       	movw	r24, r16
    1852:	89 51       	subi	r24, 0x19	; 25
    1854:	9f 4f       	sbci	r25, 0xFF	; 255
    1856:	8d d7       	rcall	.+3866   	; 0x2772 <numPrinter>
    1858:	c5 57       	subi	r28, 0x75	; 117
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
    185a:	de 4f       	sbci	r29, 0xFE	; 254
    185c:	28 81       	ld	r18, Y
    185e:	cb 58       	subi	r28, 0x8B	; 139
    1860:	d1 40       	sbci	r29, 0x01	; 1
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	2f 5f       	subi	r18, 0xFF	; 255
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	42 e0       	ldi	r20, 0x02	; 2
    186a:	6d e0       	ldi	r22, 0x0D	; 13
    186c:	c8 01       	movw	r24, r16
    186e:	84 50       	subi	r24, 0x04	; 4
    1870:	9f 4f       	sbci	r25, 0xFF	; 255
    1872:	7f d7       	rcall	.+3838   	; 0x2772 <numPrinter>
    1874:	e1 2c       	mov	r14, r1
    1876:	f1 2c       	mov	r15, r1
    1878:	b7 01       	movw	r22, r14
    187a:	c8 01       	movw	r24, r16
 
	for(uint8_t i=0;i<4; i++ )
	{
		outputS(initTheScreen->screen0[i],i);
    187c:	62 d7       	rcall	.+3780   	; 0x2742 <outputS>
    187e:	8f ef       	ldi	r24, 0xFF	; 255
    1880:	e8 1a       	sub	r14, r24
    1882:	f8 0a       	sbc	r15, r24
    1884:	0b 5e       	subi	r16, 0xEB	; 235
    1886:	1f 4f       	sbci	r17, 0xFF	; 255
    1888:	84 e0       	ldi	r24, 0x04	; 4
    188a:	e8 16       	cp	r14, r24
    188c:	f1 04       	cpc	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
 
	for(uint8_t i=0;i<4; i++ )
    188e:	a1 f7       	brne	.-24     	; 0x1878 <initMenu+0x1e4>
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
	{
		outputS(initTheScreen->screen0[i],i);
	}
}
    1896:	0f 91       	pop	r16
    1898:	ff 90       	pop	r15
    189a:	ef 90       	pop	r14
    189c:	df 90       	pop	r13
    189e:	cf 90       	pop	r12
    18a0:	08 95       	ret

000018a2 <reInitMenuOnLoad>:
    18a2:	ef 92       	push	r14
    18a4:	ff 92       	push	r15
    18a6:	0f 93       	push	r16

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(Screen *initTheScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	ec 01       	movw	r28, r24
    18b0:	8b 01       	movw	r16, r22
    18b2:	7a 01       	movw	r14, r20
	numPrinter(initTheScreen->screen0[2],5,3, currentPattern->patternBPM);
    18b4:	fb 01       	movw	r30, r22
    18b6:	e8 53       	subi	r30, 0x38	; 56
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	20 81       	ld	r18, Z
    18bc:	31 81       	ldd	r19, Z+1	; 0x01
    18be:	43 e0       	ldi	r20, 0x03	; 3
    18c0:	65 e0       	ldi	r22, 0x05	; 5
    18c2:	8a 96       	adiw	r24, 0x2a	; 42
    18c4:	56 d7       	rcall	.+3756   	; 0x2772 <numPrinter>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
    18c6:	f8 01       	movw	r30, r16
    18c8:	e6 53       	subi	r30, 0x36	; 54
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	20 81       	ld	r18, Z
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	42 e0       	ldi	r20, 0x02	; 2
    18d2:	67 e0       	ldi	r22, 0x07	; 7
    18d4:	ce 01       	movw	r24, r28
    18d6:	89 51       	subi	r24, 0x19	; 25
    18d8:	9f 4f       	sbci	r25, 0xFF	; 255
    18da:	4b d7       	rcall	.+3734   	; 0x2772 <numPrinter>
	numPrinter(initTheScreen->screen1[1],9,3,(currentGlobals->currentPatternNumber)+1);
    18dc:	f7 01       	movw	r30, r14
    18de:	23 81       	ldd	r18, Z+3	; 0x03
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	2f 5f       	subi	r18, 0xFF	; 255
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	43 e0       	ldi	r20, 0x03	; 3
    18e8:	69 e0       	ldi	r22, 0x09	; 9
    18ea:	ce 01       	movw	r24, r28
    18ec:	8e 52       	subi	r24, 0x2E	; 46
    18ee:	9f 4f       	sbci	r25, 0xFF	; 255
    18f0:	40 d7       	rcall	.+3712   	; 0x2772 <numPrinter>
	numPrinter(initTheScreen->screen0[1],9,3,(currentGlobals->currentPatternNumber)+1);
    18f2:	f7 01       	movw	r30, r14
    18f4:	23 81       	ldd	r18, Z+3	; 0x03
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	2f 5f       	subi	r18, 0xFF	; 255
    18fa:	3f 4f       	sbci	r19, 0xFF	; 255
    18fc:	43 e0       	ldi	r20, 0x03	; 3
    18fe:	69 e0       	ldi	r22, 0x09	; 9
    1900:	ce 01       	movw	r24, r28
    1902:	45 96       	adiw	r24, 0x15	; 21
    1904:	36 d7       	rcall	.+3692   	; 0x2772 <numPrinter>
}
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	ff 90       	pop	r15
    1910:	ef 90       	pop	r14
    1912:	08 95       	ret

00001914 <updateScreen>:

void updateScreen(Screen *menuScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    1914:	8f 92       	push	r8
    1916:	9f 92       	push	r9
    1918:	af 92       	push	r10
    191a:	bf 92       	push	r11
    191c:	cf 92       	push	r12
    191e:	df 92       	push	r13
    1920:	ef 92       	push	r14
    1922:	ff 92       	push	r15
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	8c 01       	movw	r16, r24
    192e:	7b 01       	movw	r14, r22
    1930:	ea 01       	movw	r28, r20
	
	if((currentGlobals->valueChangeFlag)&(1<<encoderChange))//check if encoder bit is high
    1932:	8a 85       	ldd	r24, Y+10	; 0x0a
    1934:	80 ff       	sbrs	r24, 0
    1936:	da c2       	rjmp	.+1460   	; 0x1eec <updateScreen+0x5d8>
	{ 
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<encoderChange));//set encoder bit low, and carry our whatever encoder change has occurred. 
    1938:	1a 86       	std	Y+10, r1	; 0x0a
		//we need to debug this to make sure it's doing what we think it's doing.
		switch(currentGlobals->menuState)
    193a:	8e 81       	ldd	r24, Y+6	; 0x06
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	8b 33       	cpi	r24, 0x3B	; 59
    1940:	91 05       	cpc	r25, r1
    1942:	08 f0       	brcs	.+2      	; 0x1946 <updateScreen+0x32>
    1944:	d0 c2       	rjmp	.+1440   	; 0x1ee6 <updateScreen+0x5d2>
    1946:	fc 01       	movw	r30, r24
    1948:	88 27       	eor	r24, r24
    194a:	e3 55       	subi	r30, 0x53	; 83
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	8f 4f       	sbci	r24, 0xFF	; 255
    1950:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__tablejump2__>
		{
			case PreformanceModeInit: //initial state
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    1954:	c8 01       	movw	r24, r16
    1956:	a5 df       	rcall	.-182    	; 0x18a2 <reInitMenuOnLoad>
			outputS(menuScreen->screen0[0], 0);
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	c8 01       	movw	r24, r16
    195e:	f1 d6       	rcall	.+3554   	; 0x2742 <outputS>
			outputS(menuScreen->screen0[1], 1);
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	c8 01       	movw	r24, r16
    1966:	45 96       	adiw	r24, 0x15	; 21
    1968:	ec d6       	rcall	.+3544   	; 0x2742 <outputS>
			outputS(menuScreen->screen0[2], 2);
    196a:	62 e0       	ldi	r22, 0x02	; 2
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	c8 01       	movw	r24, r16
    1970:	8a 96       	adiw	r24, 0x2a	; 42
    1972:	e7 d6       	rcall	.+3534   	; 0x2742 <outputS>
			outputS(menuScreen->screen0[3], 3);
    1974:	63 e0       	ldi	r22, 0x03	; 3
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	c8 01       	movw	r24, r16
    197a:	cf 96       	adiw	r24, 0x3f	; 63
    197c:	e2 d6       	rcall	.+3524   	; 0x2742 <outputS>
			break;
    197e:	b3 c2       	rjmp	.+1382   	; 0x1ee6 <updateScreen+0x5d2>

			case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0);
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	c8 01       	movw	r24, r16
    1986:	83 54       	subi	r24, 0x43	; 67
    1988:	9f 4f       	sbci	r25, 0xFF	; 255
    198a:	db d6       	rcall	.+3510   	; 0x2742 <outputS>
			outputS(menuScreen->screen1[1], 1);
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	c8 01       	movw	r24, r16
    1992:	8e 52       	subi	r24, 0x2E	; 46
    1994:	9f 4f       	sbci	r25, 0xFF	; 255
    1996:	d5 d6       	rcall	.+3498   	; 0x2742 <outputS>
			outputS(menuScreen->screen1[2], 2);
    1998:	62 e0       	ldi	r22, 0x02	; 2
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	c8 01       	movw	r24, r16
    199e:	89 51       	subi	r24, 0x19	; 25
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	cf d6       	rcall	.+3486   	; 0x2742 <outputS>
			outputS(menuScreen->screen1[3], 3);
    19a4:	63 e0       	ldi	r22, 0x03	; 3
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	c8 01       	movw	r24, r16
    19aa:	84 50       	subi	r24, 0x04	; 4
    19ac:	9f 4f       	sbci	r25, 0xFF	; 255
    19ae:	c9 d6       	rcall	.+3474   	; 0x2742 <outputS>
    19b0:	81 e1       	ldi	r24, 0x11	; 17
			currentGlobals->menuState = SequencerMenuArrow1; 
    19b2:	8e 83       	std	Y+6, r24	; 0x06
    19b4:	88 e0       	ldi	r24, 0x08	; 8
			
			
			case SequencerMenuArrow1:
			menuScreen->screen1[1][19]= 8;
    19b6:	f8 01       	movw	r30, r16
    19b8:	eb 51       	subi	r30, 0x1B	; 27
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	80 83       	st	Z, r24
    19be:	80 e2       	ldi	r24, 0x20	; 32
			menuScreen->screen1[2][19] = ' ';
    19c0:	75 96       	adiw	r30, 0x15	; 21
    19c2:	80 83       	st	Z, r24
			menuScreen->screen1[3][19] = ' ';
    19c4:	75 96       	adiw	r30, 0x15	; 21
    19c6:	80 83       	st	Z, r24
			outputS(menuScreen->screen1[1], 1);
    19c8:	61 e0       	ldi	r22, 0x01	; 1
    19ca:	70 e0       	ldi	r23, 0x00	; 0
    19cc:	c8 01       	movw	r24, r16
    19ce:	8e 52       	subi	r24, 0x2E	; 46
    19d0:	9f 4f       	sbci	r25, 0xFF	; 255
    19d2:	b7 d6       	rcall	.+3438   	; 0x2742 <outputS>
			outputS(menuScreen->screen1[2], 2);
    19d4:	62 e0       	ldi	r22, 0x02	; 2
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	c8 01       	movw	r24, r16
    19da:	89 51       	subi	r24, 0x19	; 25
    19dc:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    19de:	b1 d6       	rcall	.+3426   	; 0x2742 <outputS>
    19e0:	63 e0       	ldi	r22, 0x03	; 3
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	c8 01       	movw	r24, r16
    19e6:	84 50       	subi	r24, 0x04	; 4
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    19ea:	ab d6       	rcall	.+3414   	; 0x2742 <outputS>
			
			case SequencerMenuArrow1Select:
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    19ec:	7c c2       	rjmp	.+1272   	; 0x1ee6 <updateScreen+0x5d2>
    19ee:	c8 01       	movw	r24, r16
    19f0:	58 df       	rcall	.-336    	; 0x18a2 <reInitMenuOnLoad>
			outputS(menuScreen->screen1[1],1);
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	c8 01       	movw	r24, r16
    19f8:	8e 52       	subi	r24, 0x2E	; 46
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	a2 d6       	rcall	.+3396   	; 0x2742 <outputS>
    19fe:	73 c2       	rjmp	.+1254   	; 0x1ee6 <updateScreen+0x5d2>
			break;
    1a00:	80 e2       	ldi	r24, 0x20	; 32
	
	
			case SequencerMenuArrow2:
			menuScreen->screen1[1][19]= ' ';
    1a02:	f8 01       	movw	r30, r16
    1a04:	eb 51       	subi	r30, 0x1B	; 27
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	80 83       	st	Z, r24
			menuScreen->screen1[2][19] = 8;
    1a0a:	98 e0       	ldi	r25, 0x08	; 8
    1a0c:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = ' ';
    1a0e:	90 83       	st	Z, r25
    1a10:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen1[1], 1);
    1a12:	80 83       	st	Z, r24
    1a14:	61 e0       	ldi	r22, 0x01	; 1
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	c8 01       	movw	r24, r16
    1a1a:	8e 52       	subi	r24, 0x2E	; 46
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    1a1e:	91 d6       	rcall	.+3362   	; 0x2742 <outputS>
    1a20:	62 e0       	ldi	r22, 0x02	; 2
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	c8 01       	movw	r24, r16
    1a26:	89 51       	subi	r24, 0x19	; 25
    1a28:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2a:	8b d6       	rcall	.+3350   	; 0x2742 <outputS>
			outputS(menuScreen->screen1[3], 3);
    1a2c:	63 e0       	ldi	r22, 0x03	; 3
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
    1a30:	c8 01       	movw	r24, r16
    1a32:	84 50       	subi	r24, 0x04	; 4
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	85 d6       	rcall	.+3338   	; 0x2742 <outputS>
			break;
	
			case SequencerMenuArrow2Select:
			numPrinter(menuScreen->screen1[2],7,2,currentPattern->numSteps);
    1a38:	56 c2       	rjmp	.+1196   	; 0x1ee6 <updateScreen+0x5d2>
    1a3a:	fb 01       	movw	r30, r22
    1a3c:	e6 53       	subi	r30, 0x36	; 54
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	20 81       	ld	r18, Z
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	42 e0       	ldi	r20, 0x02	; 2
    1a46:	67 e0       	ldi	r22, 0x07	; 7
    1a48:	68 01       	movw	r12, r16
    1a4a:	87 ee       	ldi	r24, 0xE7	; 231
    1a4c:	c8 0e       	add	r12, r24
    1a4e:	d1 1c       	adc	r13, r1
    1a50:	c6 01       	movw	r24, r12
    1a52:	8f d6       	rcall	.+3358   	; 0x2772 <numPrinter>
			outputS(menuScreen->screen1[2],2);
    1a54:	62 e0       	ldi	r22, 0x02	; 2
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	c6 01       	movw	r24, r12
    1a5a:	73 d6       	rcall	.+3302   	; 0x2742 <outputS>
			break;
    1a5c:	44 c2       	rjmp	.+1160   	; 0x1ee6 <updateScreen+0x5d2>
	
			case SequencerMenuArrow3:
			menuScreen->screen1[1][19]= ' ';
    1a5e:	80 e2       	ldi	r24, 0x20	; 32
    1a60:	f8 01       	movw	r30, r16
    1a62:	eb 51       	subi	r30, 0x1B	; 27
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
			menuScreen->screen1[2][19] = ' ';
    1a66:	80 83       	st	Z, r24
    1a68:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = 8;
    1a6a:	80 83       	st	Z, r24
    1a6c:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen1[1], 1);
    1a6e:	75 96       	adiw	r30, 0x15	; 21
    1a70:	80 83       	st	Z, r24
    1a72:	61 e0       	ldi	r22, 0x01	; 1
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	c8 01       	movw	r24, r16
    1a78:	8e 52       	subi	r24, 0x2E	; 46
    1a7a:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    1a7c:	62 d6       	rcall	.+3268   	; 0x2742 <outputS>
    1a7e:	62 e0       	ldi	r22, 0x02	; 2
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	c8 01       	movw	r24, r16
    1a84:	89 51       	subi	r24, 0x19	; 25
    1a86:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    1a88:	5c d6       	rcall	.+3256   	; 0x2742 <outputS>
    1a8a:	63 e0       	ldi	r22, 0x03	; 3
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	c8 01       	movw	r24, r16
    1a90:	84 50       	subi	r24, 0x04	; 4
    1a92:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    1a94:	56 d6       	rcall	.+3244   	; 0x2742 <outputS>
		
			case SequencerMenuArrow3Select:
			numPrinter(menuScreen->screen1[3],14,2,(currentGlobals->currentStep)+1); //these are 0 indexed, so we need to add 1 to the display.
    1a96:	27 c2       	rjmp	.+1102   	; 0x1ee6 <updateScreen+0x5d2>
    1a98:	2c 81       	ldd	r18, Y+4	; 0x04
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	2f 5f       	subi	r18, 0xFF	; 255
    1a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa0:	42 e0       	ldi	r20, 0x02	; 2
    1aa2:	6e e0       	ldi	r22, 0x0E	; 14
    1aa4:	68 01       	movw	r12, r16
    1aa6:	9c ef       	ldi	r25, 0xFC	; 252
    1aa8:	c9 0e       	add	r12, r25
    1aaa:	d1 1c       	adc	r13, r1
			outputS(menuScreen->screen1[3],3);
    1aac:	c6 01       	movw	r24, r12
    1aae:	61 d6       	rcall	.+3266   	; 0x2772 <numPrinter>
    1ab0:	63 e0       	ldi	r22, 0x03	; 3
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	c6 01       	movw	r24, r12
			break;
	

			case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0);
    1ab6:	45 d6       	rcall	.+3210   	; 0x2742 <outputS>
    1ab8:	16 c2       	rjmp	.+1068   	; 0x1ee6 <updateScreen+0x5d2>
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	c8 01       	movw	r24, r16
    1ac0:	86 58       	subi	r24, 0x86	; 134
    1ac2:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[1], 1);
    1ac4:	3e d6       	rcall	.+3196   	; 0x2742 <outputS>
    1ac6:	61 e0       	ldi	r22, 0x01	; 1
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	c8 01       	movw	r24, r16
    1acc:	81 57       	subi	r24, 0x71	; 113
    1ace:	9e 4f       	sbci	r25, 0xFE	; 254
    1ad0:	38 d6       	rcall	.+3184   	; 0x2742 <outputS>
			outputS(menuScreen->screen2[2], 2);
    1ad2:	62 e0       	ldi	r22, 0x02	; 2
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	c8 01       	movw	r24, r16
    1ad8:	8c 55       	subi	r24, 0x5C	; 92
    1ada:	9e 4f       	sbci	r25, 0xFE	; 254
    1adc:	32 d6       	rcall	.+3172   	; 0x2742 <outputS>
			outputS(menuScreen->screen2[3], 3);
    1ade:	63 e0       	ldi	r22, 0x03	; 3
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	c8 01       	movw	r24, r16
    1ae4:	87 54       	subi	r24, 0x47	; 71
    1ae6:	9e 4f       	sbci	r25, 0xFE	; 254
    1ae8:	2c d6       	rcall	.+3160   	; 0x2742 <outputS>
			currentGlobals->menuState = TrackMenuArrow1;
    1aea:	81 e2       	ldi	r24, 0x21	; 33
		
			case TrackMenuArrow1:
			menuScreen->screen2[1][19]= 8;
    1aec:	8e 83       	std	Y+6, r24	; 0x06
    1aee:	88 e0       	ldi	r24, 0x08	; 8
    1af0:	f8 01       	movw	r30, r16
    1af2:	ee 55       	subi	r30, 0x5E	; 94
    1af4:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    1af6:	80 83       	st	Z, r24
    1af8:	80 e2       	ldi	r24, 0x20	; 32
    1afa:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    1afc:	80 83       	st	Z, r24
    1afe:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    1b00:	80 83       	st	Z, r24
    1b02:	61 e0       	ldi	r22, 0x01	; 1
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	c8 01       	movw	r24, r16
    1b08:	81 57       	subi	r24, 0x71	; 113
    1b0a:	9e 4f       	sbci	r25, 0xFE	; 254
    1b0c:	1a d6       	rcall	.+3124   	; 0x2742 <outputS>
			outputS(menuScreen->screen2[2], 2);
    1b0e:	62 e0       	ldi	r22, 0x02	; 2
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	c8 01       	movw	r24, r16
    1b14:	8c 55       	subi	r24, 0x5C	; 92
    1b16:	9e 4f       	sbci	r25, 0xFE	; 254
    1b18:	14 d6       	rcall	.+3112   	; 0x2742 <outputS>
			outputS(menuScreen->screen2[3], 3);
    1b1a:	63 e0       	ldi	r22, 0x03	; 3
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	c8 01       	movw	r24, r16
    1b20:	87 54       	subi	r24, 0x47	; 71
    1b22:	9e 4f       	sbci	r25, 0xFE	; 254
    1b24:	0e d6       	rcall	.+3100   	; 0x2742 <outputS>
			break;
    1b26:	df c1       	rjmp	.+958    	; 0x1ee6 <updateScreen+0x5d2>
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	db 01       	movw	r26, r22
    1b2c:	a8 0f       	add	r26, r24
    1b2e:	b1 1d       	adc	r27, r1
    1b30:	fd 01       	movw	r30, r26
    1b32:	e8 56       	subi	r30, 0x68	; 104
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    1b36:	20 81       	ld	r18, Z
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	32 2f       	mov	r19, r18
    1b3c:	22 27       	eor	r18, r18
			outputS(menuScreen->screen2[2], 2);
			outputS(menuScreen->screen2[3], 3);
			break;
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1b3e:	70 96       	adiw	r30, 0x10	; 16
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    1b40:	80 81       	ld	r24, Z
    1b42:	28 2b       	or	r18, r24
    1b44:	44 e0       	ldi	r20, 0x04	; 4
    1b46:	6a e0       	ldi	r22, 0x0A	; 10
    1b48:	68 01       	movw	r12, r16
    1b4a:	b1 e7       	ldi	r27, 0x71	; 113
    1b4c:	cb 1a       	sub	r12, r27
    1b4e:	be ef       	ldi	r27, 0xFE	; 254
    1b50:	db 0a       	sbc	r13, r27
    1b52:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen2[1],1);
    1b54:	0e d6       	rcall	.+3100   	; 0x2772 <numPrinter>
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	c6 01       	movw	r24, r12
			break;
    1b5c:	f2 d5       	rcall	.+3044   	; 0x2742 <outputS>
	
			case TrackMenuArrow2:
			menuScreen->screen2[1][19]= ' ';
    1b5e:	c3 c1       	rjmp	.+902    	; 0x1ee6 <updateScreen+0x5d2>
    1b60:	80 e2       	ldi	r24, 0x20	; 32
    1b62:	f8 01       	movw	r30, r16
    1b64:	ee 55       	subi	r30, 0x5E	; 94
    1b66:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = 8;
    1b68:	80 83       	st	Z, r24
    1b6a:	98 e0       	ldi	r25, 0x08	; 8
    1b6c:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    1b6e:	90 83       	st	Z, r25
    1b70:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    1b72:	80 83       	st	Z, r24
    1b74:	61 e0       	ldi	r22, 0x01	; 1
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	c8 01       	movw	r24, r16
    1b7a:	81 57       	subi	r24, 0x71	; 113
    1b7c:	9e 4f       	sbci	r25, 0xFE	; 254
    1b7e:	e1 d5       	rcall	.+3010   	; 0x2742 <outputS>
			outputS(menuScreen->screen2[2], 2);
    1b80:	62 e0       	ldi	r22, 0x02	; 2
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	c8 01       	movw	r24, r16
    1b86:	8c 55       	subi	r24, 0x5C	; 92
    1b88:	9e 4f       	sbci	r25, 0xFE	; 254
    1b8a:	db d5       	rcall	.+2998   	; 0x2742 <outputS>
    1b8c:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[3], 3);
    1b8e:	70 e0       	ldi	r23, 0x00	; 0
    1b90:	c8 01       	movw	r24, r16
    1b92:	87 54       	subi	r24, 0x47	; 71
    1b94:	9e 4f       	sbci	r25, 0xFE	; 254
    1b96:	d5 d5       	rcall	.+2986   	; 0x2742 <outputS>
    1b98:	a6 c1       	rjmp	.+844    	; 0x1ee6 <updateScreen+0x5d2>
    1b9a:	8d 81       	ldd	r24, Y+5	; 0x05
			break;
    1b9c:	fb 01       	movw	r30, r22
		
			case TrackMenuArrow2Select:
			//we need some serious button code in these two cases. 
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1b9e:	e8 0f       	add	r30, r24
    1ba0:	f1 1d       	adc	r31, r1
    1ba2:	e8 57       	subi	r30, 0x78	; 120
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 81       	ld	r24, Z
    1ba8:	88 23       	and	r24, r24
    1baa:	19 f0       	breq	.+6      	; 0x1bb2 <updateScreen+0x29e>
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	79 f0       	breq	.+30     	; 0x1bce <updateScreen+0x2ba>
    1bb0:	1c c0       	rjmp	.+56     	; 0x1bea <updateScreen+0x2d6>
    1bb2:	83 e5       	ldi	r24, 0x53	; 83
			{
				case 0:
				menuScreen->screen2[2][10] = 'S';
    1bb4:	f8 01       	movw	r30, r16
    1bb6:	e2 55       	subi	r30, 0x52	; 82
    1bb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bba:	80 83       	st	Z, r24
    1bbc:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[2][11] = 'o';
    1bbe:	31 96       	adiw	r30, 0x01	; 1
    1bc0:	80 83       	st	Z, r24
    1bc2:	9c e6       	ldi	r25, 0x6C	; 108
				menuScreen->screen2[2][12] = 'l';
    1bc4:	31 96       	adiw	r30, 0x01	; 1
    1bc6:	90 83       	st	Z, r25
    1bc8:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'o';
    1bca:	80 83       	st	Z, r24
    1bcc:	0e c0       	rjmp	.+28     	; 0x1bea <updateScreen+0x2d6>
				break;
    1bce:	80 e5       	ldi	r24, 0x50	; 80

				case 1:
				menuScreen->screen2[2][10] = 'P';
    1bd0:	f8 01       	movw	r30, r16
    1bd2:	e2 55       	subi	r30, 0x52	; 82
    1bd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd6:	80 83       	st	Z, r24
				menuScreen->screen2[2][11] = 'o';
    1bd8:	8f e6       	ldi	r24, 0x6F	; 111
    1bda:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][12] = 'l';
    1bdc:	80 83       	st	Z, r24
    1bde:	8c e6       	ldi	r24, 0x6C	; 108
    1be0:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'y';
    1be2:	80 83       	st	Z, r24
    1be4:	89 e7       	ldi	r24, 0x79	; 121
	
				case 3:
				break;
			}
			
			outputS(menuScreen->screen2[2], 2);
    1be6:	31 96       	adiw	r30, 0x01	; 1
    1be8:	80 83       	st	Z, r24
    1bea:	62 e0       	ldi	r22, 0x02	; 2
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	c8 01       	movw	r24, r16
    1bf0:	8c 55       	subi	r24, 0x5C	; 92
    1bf2:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1bf4:	a6 d5       	rcall	.+2892   	; 0x2742 <outputS>

			case TrackMenuArrow3:
			menuScreen->screen2[1][19]= ' ';
    1bf6:	77 c1       	rjmp	.+750    	; 0x1ee6 <updateScreen+0x5d2>
    1bf8:	80 e2       	ldi	r24, 0x20	; 32
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	ee 55       	subi	r30, 0x5E	; 94
    1bfe:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    1c00:	80 83       	st	Z, r24
    1c02:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = 8;
    1c04:	80 83       	st	Z, r24
    1c06:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[1], 1);
    1c08:	75 96       	adiw	r30, 0x15	; 21
    1c0a:	80 83       	st	Z, r24
    1c0c:	61 e0       	ldi	r22, 0x01	; 1
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	c8 01       	movw	r24, r16
    1c12:	81 57       	subi	r24, 0x71	; 113
			outputS(menuScreen->screen2[2], 2);
    1c14:	9e 4f       	sbci	r25, 0xFE	; 254
    1c16:	95 d5       	rcall	.+2858   	; 0x2742 <outputS>
    1c18:	62 e0       	ldi	r22, 0x02	; 2
    1c1a:	70 e0       	ldi	r23, 0x00	; 0
    1c1c:	c8 01       	movw	r24, r16
    1c1e:	8c 55       	subi	r24, 0x5C	; 92
    1c20:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[3], 3);
    1c22:	8f d5       	rcall	.+2846   	; 0x2742 <outputS>
    1c24:	63 e0       	ldi	r22, 0x03	; 3
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	c8 01       	movw	r24, r16
    1c2a:	87 54       	subi	r24, 0x47	; 71
    1c2c:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1c2e:	89 d5       	rcall	.+2834   	; 0x2742 <outputS>
		
			case TrackMenuArrow3Select:
			numPrinter(menuScreen->screen2[3],10,2,(currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1);
    1c30:	5a c1       	rjmp	.+692    	; 0x1ee6 <updateScreen+0x5d2>
    1c32:	8d 81       	ldd	r24, Y+5	; 0x05
    1c34:	fb 01       	movw	r30, r22
    1c36:	e8 0f       	add	r30, r24
    1c38:	f1 1d       	adc	r31, r1
    1c3a:	20 8d       	ldd	r18, Z+24	; 0x18
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	2f 5f       	subi	r18, 0xFF	; 255
    1c40:	3f 4f       	sbci	r19, 0xFF	; 255
    1c42:	42 e0       	ldi	r20, 0x02	; 2
    1c44:	6a e0       	ldi	r22, 0x0A	; 10
    1c46:	68 01       	movw	r12, r16
    1c48:	e7 e4       	ldi	r30, 0x47	; 71
    1c4a:	ce 1a       	sub	r12, r30
    1c4c:	ee ef       	ldi	r30, 0xFE	; 254
    1c4e:	de 0a       	sbc	r13, r30
			outputS(menuScreen->screen2[3],3);
    1c50:	c6 01       	movw	r24, r12
    1c52:	8f d5       	rcall	.+2846   	; 0x2772 <numPrinter>
    1c54:	63 e0       	ldi	r22, 0x03	; 3
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	c6 01       	movw	r24, r12
			break;
    1c5a:	73 d5       	rcall	.+2790   	; 0x2742 <outputS>
			
			case TrackMenuArrow4:
			menuScreen->screen2[2][19]= ' ';
    1c5c:	44 c1       	rjmp	.+648    	; 0x1ee6 <updateScreen+0x5d2>
    1c5e:	80 e2       	ldi	r24, 0x20	; 32
    1c60:	f8 01       	movw	r30, r16
    1c62:	e9 54       	subi	r30, 0x49	; 73
    1c64:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[3][19] = ' ';
    1c66:	80 83       	st	Z, r24
    1c68:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[4][19] = 8;
    1c6a:	80 83       	st	Z, r24
    1c6c:	88 e0       	ldi	r24, 0x08	; 8
    1c6e:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[2], 1);
    1c70:	80 83       	st	Z, r24
    1c72:	61 e0       	ldi	r22, 0x01	; 1
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	c8 01       	movw	r24, r16
    1c78:	8c 55       	subi	r24, 0x5C	; 92
    1c7a:	9e 4f       	sbci	r25, 0xFE	; 254
    1c7c:	62 d5       	rcall	.+2756   	; 0x2742 <outputS>
			outputS(menuScreen->screen2[3], 2);
    1c7e:	62 e0       	ldi	r22, 0x02	; 2
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	c8 01       	movw	r24, r16
    1c84:	87 54       	subi	r24, 0x47	; 71
    1c86:	9e 4f       	sbci	r25, 0xFE	; 254
    1c88:	5c d5       	rcall	.+2744   	; 0x2742 <outputS>
    1c8a:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[4], 3);
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	c8 01       	movw	r24, r16
    1c90:	82 53       	subi	r24, 0x32	; 50
    1c92:	9e 4f       	sbci	r25, 0xFE	; 254
    1c94:	56 d5       	rcall	.+2732   	; 0x2742 <outputS>
    1c96:	27 c1       	rjmp	.+590    	; 0x1ee6 <updateScreen+0x5d2>
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
			break;
    1c9a:	fb 01       	movw	r30, r22
			
			case TrackMenuArrow4Select:
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1c9c:	e8 0f       	add	r30, r24
    1c9e:	f1 1d       	adc	r31, r1
    1ca0:	e5 51       	subi	r30, 0x15	; 21
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 81       	ld	r24, Z
    1ca6:	81 30       	cpi	r24, 0x01	; 1
    1ca8:	a9 f0       	breq	.+42     	; 0x1cd4 <updateScreen+0x3c0>
    1caa:	28 f0       	brcs	.+10     	; 0x1cb6 <updateScreen+0x3a2>
    1cac:	82 30       	cpi	r24, 0x02	; 2
    1cae:	f9 f0       	breq	.+62     	; 0x1cee <updateScreen+0x3da>
    1cb0:	83 30       	cpi	r24, 0x03	; 3
    1cb2:	51 f1       	breq	.+84     	; 0x1d08 <updateScreen+0x3f4>
    1cb4:	37 c0       	rjmp	.+110    	; 0x1d24 <updateScreen+0x410>
    1cb6:	81 e4       	ldi	r24, 0x41	; 65
    1cb8:	f8 01       	movw	r30, r16
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1cba:	e4 52       	subi	r30, 0x24	; 36
    1cbc:	fe 4f       	sbci	r31, 0xFE	; 254
    1cbe:	80 83       	st	Z, r24
    1cc0:	8d e2       	ldi	r24, 0x2D	; 45
    1cc2:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1cc4:	80 83       	st	Z, r24
    1cc6:	82 e5       	ldi	r24, 0x52	; 82
    1cc8:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1cca:	80 83       	st	Z, r24
    1ccc:	80 e2       	ldi	r24, 0x20	; 32
    1cce:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1cd0:	80 83       	st	Z, r24
    1cd2:	28 c0       	rjmp	.+80     	; 0x1d24 <updateScreen+0x410>
    1cd4:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1cd6:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1cd8:	e4 52       	subi	r30, 0x24	; 36
    1cda:	fe 4f       	sbci	r31, 0xFE	; 254
    1cdc:	80 83       	st	Z, r24
    1cde:	80 e2       	ldi	r24, 0x20	; 32
				menuScreen->screen2[4][15] = ' ';
    1ce0:	31 96       	adiw	r30, 0x01	; 1
    1ce2:	80 83       	st	Z, r24
    1ce4:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = ' ';
    1ce6:	80 83       	st	Z, r24
    1ce8:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1cea:	80 83       	st	Z, r24
    1cec:	1b c0       	rjmp	.+54     	; 0x1d24 <updateScreen+0x410>
				break;
    1cee:	81 e4       	ldi	r24, 0x41	; 65
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	e4 52       	subi	r30, 0x24	; 36
    1cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf6:	80 83       	st	Z, r24
				menuScreen->screen2[4][15] = ' ';
    1cf8:	80 e2       	ldi	r24, 0x20	; 32
    1cfa:	31 96       	adiw	r30, 0x01	; 1
    1cfc:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1cfe:	31 96       	adiw	r30, 0x01	; 1
    1d00:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1d02:	31 96       	adiw	r30, 0x01	; 1
				break;
    1d04:	80 83       	st	Z, r24
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1d06:	0e c0       	rjmp	.+28     	; 0x1d24 <updateScreen+0x410>
    1d08:	8e e4       	ldi	r24, 0x4E	; 78
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	e4 52       	subi	r30, 0x24	; 36
				menuScreen->screen2[4][15] = 'o';
    1d0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d10:	80 83       	st	Z, r24
    1d12:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][16] = 'n';
    1d14:	31 96       	adiw	r30, 0x01	; 1
    1d16:	80 83       	st	Z, r24
    1d18:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][17] = 'e';
    1d1a:	31 96       	adiw	r30, 0x01	; 1
    1d1c:	80 83       	st	Z, r24
    1d1e:	85 e6       	ldi	r24, 0x65	; 101
				break;
			}
			outputS(menuScreen->screen2[4],3);
    1d20:	31 96       	adiw	r30, 0x01	; 1
    1d22:	80 83       	st	Z, r24
    1d24:	63 e0       	ldi	r22, 0x03	; 3
    1d26:	70 e0       	ldi	r23, 0x00	; 0
    1d28:	c8 01       	movw	r24, r16
    1d2a:	82 53       	subi	r24, 0x32	; 50
    1d2c:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1d2e:	09 d5       	rcall	.+2578   	; 0x2742 <outputS>
			
			case TrackMenuArrow5:
			menuScreen->screen2[3][19]= ' ';
    1d30:	da c0       	rjmp	.+436    	; 0x1ee6 <updateScreen+0x5d2>
    1d32:	80 e2       	ldi	r24, 0x20	; 32
    1d34:	f8 01       	movw	r30, r16
    1d36:	e4 53       	subi	r30, 0x34	; 52
    1d38:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[4][19] = ' ';
    1d3a:	80 83       	st	Z, r24
			menuScreen->screen2[5][19] = 8;
    1d3c:	75 96       	adiw	r30, 0x15	; 21
    1d3e:	80 83       	st	Z, r24
    1d40:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[3], 1);
    1d42:	75 96       	adiw	r30, 0x15	; 21
    1d44:	80 83       	st	Z, r24
    1d46:	61 e0       	ldi	r22, 0x01	; 1
    1d48:	70 e0       	ldi	r23, 0x00	; 0
    1d4a:	c8 01       	movw	r24, r16
    1d4c:	87 54       	subi	r24, 0x47	; 71
    1d4e:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[4], 2);
    1d50:	f8 d4       	rcall	.+2544   	; 0x2742 <outputS>
    1d52:	62 e0       	ldi	r22, 0x02	; 2
    1d54:	70 e0       	ldi	r23, 0x00	; 0
    1d56:	c8 01       	movw	r24, r16
    1d58:	82 53       	subi	r24, 0x32	; 50
    1d5a:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[5], 3);
    1d5c:	f2 d4       	rcall	.+2532   	; 0x2742 <outputS>
    1d5e:	63 e0       	ldi	r22, 0x03	; 3
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	c8 01       	movw	r24, r16
    1d64:	8d 51       	subi	r24, 0x1D	; 29
    1d66:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1d68:	ec d4       	rcall	.+2520   	; 0x2742 <outputS>

			case TrackMenuArrow5Select:;
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1d6a:	bd c0       	rjmp	.+378    	; 0x1ee6 <updateScreen+0x5d2>
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9b 01       	movw	r18, r22
    1d70:	28 0f       	add	r18, r24
    1d72:	31 1d       	adc	r19, r1
    1d74:	f9 01       	movw	r30, r18
			numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1d76:	e5 53       	subi	r30, 0x35	; 53
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	20 81       	ld	r18, Z
			outputS(menuScreen->screen2[4], 2);
			outputS(menuScreen->screen2[5], 3);
			break;

			case TrackMenuArrow5Select:;
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
			numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1d7e:	32 2f       	mov	r19, r18
    1d80:	22 27       	eor	r18, r18
    1d82:	70 96       	adiw	r30, 0x10	; 16
    1d84:	80 81       	ld	r24, Z
    1d86:	28 2b       	or	r18, r24
    1d88:	45 e0       	ldi	r20, 0x05	; 5
    1d8a:	6d e0       	ldi	r22, 0x0D	; 13
    1d8c:	68 01       	movw	r12, r16
    1d8e:	8d e1       	ldi	r24, 0x1D	; 29
    1d90:	c8 1a       	sub	r12, r24
    1d92:	8e ef       	ldi	r24, 0xFE	; 254
			menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
    1d94:	d8 0a       	sbc	r13, r24
    1d96:	c6 01       	movw	r24, r12
    1d98:	ec d4       	rcall	.+2520   	; 0x2772 <numPrinter>
    1d9a:	d8 01       	movw	r26, r16
    1d9c:	a0 51       	subi	r26, 0x10	; 16
    1d9e:	be 4f       	sbci	r27, 0xFE	; 254
    1da0:	8c 91       	ld	r24, X
    1da2:	f8 01       	movw	r30, r16
			menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
    1da4:	e1 51       	subi	r30, 0x11	; 17
    1da6:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[5][14] = '.';
    1da8:	80 83       	st	Z, r24
    1daa:	32 96       	adiw	r30, 0x02	; 2
			outputS(menuScreen->screen2[5],3);
    1dac:	80 81       	ld	r24, Z
    1dae:	8c 93       	st	X, r24
    1db0:	8e e2       	ldi	r24, 0x2E	; 46
    1db2:	80 83       	st	Z, r24
			break;
    1db4:	63 e0       	ldi	r22, 0x03	; 3

			case GlobalMenuInit:
			outputS(menuScreen->screen3[0], 0);
    1db6:	70 e0       	ldi	r23, 0x00	; 0
    1db8:	c6 01       	movw	r24, r12
    1dba:	c3 d4       	rcall	.+2438   	; 0x2742 <outputS>
    1dbc:	94 c0       	rjmp	.+296    	; 0x1ee6 <updateScreen+0x5d2>
    1dbe:	60 e0       	ldi	r22, 0x00	; 0
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[1], 1);
    1dc2:	c8 01       	movw	r24, r16
    1dc4:	89 5c       	subi	r24, 0xC9	; 201
    1dc6:	9d 4f       	sbci	r25, 0xFD	; 253
    1dc8:	bc d4       	rcall	.+2424   	; 0x2742 <outputS>
    1dca:	61 e0       	ldi	r22, 0x01	; 1
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1dd0:	84 5b       	subi	r24, 0xB4	; 180
    1dd2:	9d 4f       	sbci	r25, 0xFD	; 253
    1dd4:	b6 d4       	rcall	.+2412   	; 0x2742 <outputS>
    1dd6:	62 e0       	ldi	r22, 0x02	; 2
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1ddc:	8f 59       	subi	r24, 0x9F	; 159
    1dde:	9d 4f       	sbci	r25, 0xFD	; 253
    1de0:	b0 d4       	rcall	.+2400   	; 0x2742 <outputS>
    1de2:	63 e0       	ldi	r22, 0x03	; 3
    1de4:	70 e0       	ldi	r23, 0x00	; 0
    1de6:	c8 01       	movw	r24, r16
    1de8:	8a 58       	subi	r24, 0x8A	; 138
			currentGlobals->menuState = GlobalMenuArrow1;
    1dea:	9d 4f       	sbci	r25, 0xFD	; 253
    1dec:	aa d4       	rcall	.+2388   	; 0x2742 <outputS>

			case GlobalMenuArrow1:
			menuScreen->screen3[1][19]= 8;
    1dee:	81 e3       	ldi	r24, 0x31	; 49
    1df0:	8e 83       	std	Y+6, r24	; 0x06
    1df2:	88 e0       	ldi	r24, 0x08	; 8
    1df4:	f8 01       	movw	r30, r16
    1df6:	e1 5a       	subi	r30, 0xA1	; 161
			menuScreen->screen3[2][19] = ' ';
    1df8:	fd 4f       	sbci	r31, 0xFD	; 253
    1dfa:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    1dfc:	80 e2       	ldi	r24, 0x20	; 32
    1dfe:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen3[1], 1);
    1e00:	80 83       	st	Z, r24
    1e02:	75 96       	adiw	r30, 0x15	; 21
    1e04:	80 83       	st	Z, r24
    1e06:	61 e0       	ldi	r22, 0x01	; 1
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1e0c:	84 5b       	subi	r24, 0xB4	; 180
    1e0e:	9d 4f       	sbci	r25, 0xFD	; 253
    1e10:	98 d4       	rcall	.+2352   	; 0x2742 <outputS>
    1e12:	62 e0       	ldi	r22, 0x02	; 2
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1e18:	8f 59       	subi	r24, 0x9F	; 159
    1e1a:	9d 4f       	sbci	r25, 0xFD	; 253
    1e1c:	92 d4       	rcall	.+2340   	; 0x2742 <outputS>
    1e1e:	63 e0       	ldi	r22, 0x03	; 3
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	c8 01       	movw	r24, r16
    1e24:	8a 58       	subi	r24, 0x8A	; 138
			break;
    1e26:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow1Select:
			numPrinter(menuScreen->screen3[1],14,2,(currentGlobals->midiChannel)+1);
    1e28:	8c d4       	rcall	.+2328   	; 0x2742 <outputS>
    1e2a:	5d c0       	rjmp	.+186    	; 0x1ee6 <updateScreen+0x5d2>
    1e2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	2f 5f       	subi	r18, 0xFF	; 255
    1e32:	3f 4f       	sbci	r19, 0xFF	; 255
    1e34:	42 e0       	ldi	r20, 0x02	; 2
    1e36:	6e e0       	ldi	r22, 0x0E	; 14
    1e38:	68 01       	movw	r12, r16
    1e3a:	94 eb       	ldi	r25, 0xB4	; 180
    1e3c:	c9 1a       	sub	r12, r25
    1e3e:	9d ef       	ldi	r25, 0xFD	; 253
			outputS(menuScreen->screen3[1],1);
    1e40:	d9 0a       	sbc	r13, r25
    1e42:	c6 01       	movw	r24, r12
    1e44:	96 d4       	rcall	.+2348   	; 0x2772 <numPrinter>
    1e46:	61 e0       	ldi	r22, 0x01	; 1
    1e48:	70 e0       	ldi	r23, 0x00	; 0
			break;
    1e4a:	c6 01       	movw	r24, r12

			case GlobalMenuArrow2:
			menuScreen->screen3[1][19]= ' ';
    1e4c:	7a d4       	rcall	.+2292   	; 0x2742 <outputS>
    1e4e:	4b c0       	rjmp	.+150    	; 0x1ee6 <updateScreen+0x5d2>
    1e50:	80 e2       	ldi	r24, 0x20	; 32
    1e52:	f8 01       	movw	r30, r16
			menuScreen->screen3[2][19] = 8;
    1e54:	e1 5a       	subi	r30, 0xA1	; 161
    1e56:	fd 4f       	sbci	r31, 0xFD	; 253
    1e58:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    1e5a:	98 e0       	ldi	r25, 0x08	; 8
			outputS(menuScreen->screen3[1], 1);
    1e5c:	75 96       	adiw	r30, 0x15	; 21
    1e5e:	90 83       	st	Z, r25
    1e60:	75 96       	adiw	r30, 0x15	; 21
    1e62:	80 83       	st	Z, r24
    1e64:	61 e0       	ldi	r22, 0x01	; 1
    1e66:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[2], 2);
    1e68:	c8 01       	movw	r24, r16
    1e6a:	84 5b       	subi	r24, 0xB4	; 180
    1e6c:	9d 4f       	sbci	r25, 0xFD	; 253
    1e6e:	69 d4       	rcall	.+2258   	; 0x2742 <outputS>
    1e70:	62 e0       	ldi	r22, 0x02	; 2
    1e72:	70 e0       	ldi	r23, 0x00	; 0
    1e74:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1e76:	8f 59       	subi	r24, 0x9F	; 159
    1e78:	9d 4f       	sbci	r25, 0xFD	; 253
    1e7a:	63 d4       	rcall	.+2246   	; 0x2742 <outputS>
    1e7c:	63 e0       	ldi	r22, 0x03	; 3
    1e7e:	70 e0       	ldi	r23, 0x00	; 0
    1e80:	c8 01       	movw	r24, r16
    1e82:	8a 58       	subi	r24, 0x8A	; 138
			break;
    1e84:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow2Select:
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1e86:	5d d4       	rcall	.+2234   	; 0x2742 <outputS>
    1e88:	2e c0       	rjmp	.+92     	; 0x1ee6 <updateScreen+0x5d2>
    1e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8c:	fa 01       	movw	r30, r20
    1e8e:	e8 0f       	add	r30, r24
    1e90:	f1 1d       	adc	r31, r1
    1e92:	45 85       	ldd	r20, Z+13	; 0x0d
    1e94:	6e e0       	ldi	r22, 0x0E	; 14
    1e96:	68 01       	movw	r12, r16
    1e98:	af e9       	ldi	r26, 0x9F	; 159
    1e9a:	ca 1a       	sub	r12, r26
    1e9c:	ad ef       	ldi	r26, 0xFD	; 253
    1e9e:	da 0a       	sbc	r13, r26
    1ea0:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen3[2],2);
    1ea2:	2d d6       	rcall	.+3162   	; 0x2afe <midiNotePrinter>
    1ea4:	62 e0       	ldi	r22, 0x02	; 2
    1ea6:	70 e0       	ldi	r23, 0x00	; 0
    1ea8:	c6 01       	movw	r24, r12
    1eaa:	4b d4       	rcall	.+2198   	; 0x2742 <outputS>
			break;
    1eac:	1c c0       	rjmp	.+56     	; 0x1ee6 <updateScreen+0x5d2>

			case GlobalMenuArrow3:
			menuScreen->screen3[1][19]= ' ';
    1eae:	80 e2       	ldi	r24, 0x20	; 32
    1eb0:	f8 01       	movw	r30, r16
    1eb2:	e1 5a       	subi	r30, 0xA1	; 161
    1eb4:	fd 4f       	sbci	r31, 0xFD	; 253
			menuScreen->screen3[2][19] = ' ';
    1eb6:	80 83       	st	Z, r24
    1eb8:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen3[3][19] = 8;
    1eba:	80 83       	st	Z, r24
    1ebc:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen3[1], 1);
    1ebe:	75 96       	adiw	r30, 0x15	; 21
    1ec0:	80 83       	st	Z, r24
    1ec2:	61 e0       	ldi	r22, 0x01	; 1
    1ec4:	70 e0       	ldi	r23, 0x00	; 0
    1ec6:	c8 01       	movw	r24, r16
    1ec8:	84 5b       	subi	r24, 0xB4	; 180
    1eca:	9d 4f       	sbci	r25, 0xFD	; 253
			outputS(menuScreen->screen3[2], 2);
    1ecc:	3a d4       	rcall	.+2164   	; 0x2742 <outputS>
    1ece:	62 e0       	ldi	r22, 0x02	; 2
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	c8 01       	movw	r24, r16
    1ed4:	8f 59       	subi	r24, 0x9F	; 159
    1ed6:	9d 4f       	sbci	r25, 0xFD	; 253
    1ed8:	34 d4       	rcall	.+2152   	; 0x2742 <outputS>
			outputS(menuScreen->screen3[3], 3);
    1eda:	63 e0       	ldi	r22, 0x03	; 3
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	c8 01       	movw	r24, r16
    1ee0:	8a 58       	subi	r24, 0x8A	; 138
    1ee2:	9d 4f       	sbci	r25, 0xFD	; 253
    1ee4:	2e d4       	rcall	.+2140   	; 0x2742 <outputS>
    1ee6:	8e 81       	ldd	r24, Y+6	; 0x06
			break;
		}
		prevMenuState = currentGlobals->menuState;
    1ee8:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <prevMenuState>
    1eec:	8a 85       	ldd	r24, Y+10	; 0x0a
	}
	//We should only reach this in track selection and global settings for setting midi notes. 
	if(currentGlobals->valueChangeFlag&(1<<triggerChange))
    1eee:	81 ff       	sbrs	r24, 1
    1ef0:	19 c1       	rjmp	.+562    	; 0x2124 <updateScreen+0x810>
    1ef2:	1a 86       	std	Y+10, r1	; 0x0a
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0<<triggerChange); //this is wrong. Will erase all of valueChange Flag. 
    1ef4:	8e 81       	ldd	r24, Y+6	; 0x06
		switch((currentGlobals->menuState)>>4) //we don't need to worry about what the bottom encoder is doing.  
    1ef6:	82 95       	swap	r24
    1ef8:	8f 70       	andi	r24, 0x0F	; 15
    1efa:	82 30       	cpi	r24, 0x02	; 2
    1efc:	21 f0       	breq	.+8      	; 0x1f06 <updateScreen+0x5f2>
    1efe:	83 30       	cpi	r24, 0x03	; 3
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <updateScreen+0x5f0>
    1f02:	f7 c0       	rjmp	.+494    	; 0x20f2 <updateScreen+0x7de>
    1f04:	0f c1       	rjmp	.+542    	; 0x2124 <updateScreen+0x810>
    1f06:	2d 81       	ldd	r18, Y+5	; 0x05
		{
			case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	c7 01       	movw	r24, r14
    1f0c:	82 0f       	add	r24, r18
    1f0e:	93 1f       	adc	r25, r19
    1f10:	fc 01       	movw	r30, r24
    1f12:	e8 56       	subi	r30, 0x68	; 104
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	c0 80       	ld	r12, Z
    1f18:	d1 2c       	mov	r13, r1
    1f1a:	dc 2c       	mov	r13, r12
    1f1c:	cc 24       	eor	r12, r12
    1f1e:	70 96       	adiw	r30, 0x10	; 16
    1f20:	80 81       	ld	r24, Z
    1f22:	c8 2a       	or	r12, r24
    1f24:	2f 5f       	subi	r18, 0xFF	; 255
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack)+1);
    1f26:	3f 4f       	sbci	r19, 0xFF	; 255
    1f28:	42 e0       	ldi	r20, 0x02	; 2
    1f2a:	67 e0       	ldi	r22, 0x07	; 7
    1f2c:	58 01       	movw	r10, r16
    1f2e:	b1 e7       	ldi	r27, 0x71	; 113
    1f30:	ab 1a       	sub	r10, r27
    1f32:	be ef       	ldi	r27, 0xFE	; 254
    1f34:	bb 0a       	sbc	r11, r27
    1f36:	c5 01       	movw	r24, r10
    1f38:	1c d4       	rcall	.+2104   	; 0x2772 <numPrinter>
    1f3a:	96 01       	movw	r18, r12
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
    1f3c:	44 e0       	ldi	r20, 0x04	; 4
    1f3e:	6a e0       	ldi	r22, 0x0A	; 10
    1f40:	c5 01       	movw	r24, r10
    1f42:	17 d4       	rcall	.+2094   	; 0x2772 <numPrinter>
    1f44:	8d 81       	ldd	r24, Y+5	; 0x05
    1f46:	f7 01       	movw	r30, r14
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
					switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1f48:	e8 0f       	add	r30, r24
    1f4a:	f1 1d       	adc	r31, r1
    1f4c:	e8 57       	subi	r30, 0x78	; 120
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	80 81       	ld	r24, Z
    1f52:	88 23       	and	r24, r24
    1f54:	19 f0       	breq	.+6      	; 0x1f5c <updateScreen+0x648>
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	79 f0       	breq	.+30     	; 0x1f78 <updateScreen+0x664>
    1f5a:	1c c0       	rjmp	.+56     	; 0x1f94 <updateScreen+0x680>
    1f5c:	83 e5       	ldi	r24, 0x53	; 83
    1f5e:	f8 01       	movw	r30, r16
					{
						case 0:
						menuScreen->screen2[2][10] = 'S';
    1f60:	e2 55       	subi	r30, 0x52	; 82
    1f62:	fe 4f       	sbci	r31, 0xFE	; 254
    1f64:	80 83       	st	Z, r24
    1f66:	8f e6       	ldi	r24, 0x6F	; 111
    1f68:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][11] = 'o';
    1f6a:	80 83       	st	Z, r24
    1f6c:	9c e6       	ldi	r25, 0x6C	; 108
    1f6e:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][12] = 'l';
    1f70:	90 83       	st	Z, r25
    1f72:	31 96       	adiw	r30, 0x01	; 1
    1f74:	80 83       	st	Z, r24
						menuScreen->screen2[2][13] = 'o';
    1f76:	0e c0       	rjmp	.+28     	; 0x1f94 <updateScreen+0x680>
    1f78:	80 e5       	ldi	r24, 0x50	; 80
						break;
    1f7a:	f8 01       	movw	r30, r16

						case 1:
						menuScreen->screen2[2][10] = 'P';
    1f7c:	e2 55       	subi	r30, 0x52	; 82
    1f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f80:	80 83       	st	Z, r24
    1f82:	8f e6       	ldi	r24, 0x6F	; 111
    1f84:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][11] = 'o';
    1f86:	80 83       	st	Z, r24
    1f88:	8c e6       	ldi	r24, 0x6C	; 108
    1f8a:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][12] = 'l';
    1f8c:	80 83       	st	Z, r24
    1f8e:	89 e7       	ldi	r24, 0x79	; 121
    1f90:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][13] = 'y';
    1f92:	80 83       	st	Z, r24
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	f7 01       	movw	r30, r14

						case 3:
						break;
					}
					
			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack]+1));
    1f98:	e8 0f       	add	r30, r24
    1f9a:	f1 1d       	adc	r31, r1
    1f9c:	20 8d       	ldd	r18, Z+24	; 0x18
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	2f 5f       	subi	r18, 0xFF	; 255
    1fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa4:	42 e0       	ldi	r20, 0x02	; 2
    1fa6:	6a e0       	ldi	r22, 0x0A	; 10
    1fa8:	c8 01       	movw	r24, r16
    1faa:	87 54       	subi	r24, 0x47	; 71
    1fac:	9e 4f       	sbci	r25, 0xFE	; 254
    1fae:	e1 d3       	rcall	.+1986   	; 0x2772 <numPrinter>
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	f7 01       	movw	r30, r14
    1fb4:	e8 0f       	add	r30, r24
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1fb6:	f1 1d       	adc	r31, r1
    1fb8:	e5 51       	subi	r30, 0x15	; 21
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	80 81       	ld	r24, Z
    1fbe:	81 30       	cpi	r24, 0x01	; 1
    1fc0:	a9 f0       	breq	.+42     	; 0x1fec <updateScreen+0x6d8>
    1fc2:	28 f0       	brcs	.+10     	; 0x1fce <updateScreen+0x6ba>
    1fc4:	82 30       	cpi	r24, 0x02	; 2
    1fc6:	f9 f0       	breq	.+62     	; 0x2006 <updateScreen+0x6f2>
    1fc8:	83 30       	cpi	r24, 0x03	; 3
    1fca:	51 f1       	breq	.+84     	; 0x2020 <updateScreen+0x70c>
    1fcc:	37 c0       	rjmp	.+110    	; 0x203c <updateScreen+0x728>
    1fce:	81 e4       	ldi	r24, 0x41	; 65
    1fd0:	f8 01       	movw	r30, r16
    1fd2:	e4 52       	subi	r30, 0x24	; 36
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1fd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fd6:	80 83       	st	Z, r24
    1fd8:	8d e2       	ldi	r24, 0x2D	; 45
    1fda:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1fdc:	80 83       	st	Z, r24
    1fde:	82 e5       	ldi	r24, 0x52	; 82
    1fe0:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1fe2:	80 83       	st	Z, r24
    1fe4:	80 e2       	ldi	r24, 0x20	; 32
    1fe6:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1fe8:	80 83       	st	Z, r24
    1fea:	28 c0       	rjmp	.+80     	; 0x203c <updateScreen+0x728>
    1fec:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1fee:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1ff0:	e4 52       	subi	r30, 0x24	; 36
    1ff2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff4:	80 83       	st	Z, r24
    1ff6:	80 e2       	ldi	r24, 0x20	; 32
    1ff8:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    1ffa:	80 83       	st	Z, r24
    1ffc:	31 96       	adiw	r30, 0x01	; 1
    1ffe:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    2000:	31 96       	adiw	r30, 0x01	; 1
    2002:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    2004:	1b c0       	rjmp	.+54     	; 0x203c <updateScreen+0x728>
    2006:	81 e4       	ldi	r24, 0x41	; 65
				break;
    2008:	f8 01       	movw	r30, r16
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    200a:	e4 52       	subi	r30, 0x24	; 36
    200c:	fe 4f       	sbci	r31, 0xFE	; 254
    200e:	80 83       	st	Z, r24
    2010:	80 e2       	ldi	r24, 0x20	; 32
    2012:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    2014:	80 83       	st	Z, r24
    2016:	31 96       	adiw	r30, 0x01	; 1
    2018:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    201a:	31 96       	adiw	r30, 0x01	; 1
    201c:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    201e:	0e c0       	rjmp	.+28     	; 0x203c <updateScreen+0x728>
    2020:	8e e4       	ldi	r24, 0x4E	; 78
				break;
    2022:	f8 01       	movw	r30, r16
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    2024:	e4 52       	subi	r30, 0x24	; 36
    2026:	fe 4f       	sbci	r31, 0xFE	; 254
    2028:	80 83       	st	Z, r24
    202a:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][15] = 'o';
    202c:	31 96       	adiw	r30, 0x01	; 1
    202e:	80 83       	st	Z, r24
    2030:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][16] = 'n';
    2032:	31 96       	adiw	r30, 0x01	; 1
    2034:	80 83       	st	Z, r24
    2036:	85 e6       	ldi	r24, 0x65	; 101
				menuScreen->screen2[4][17] = 'e';
    2038:	31 96       	adiw	r30, 0x01	; 1
    203a:	80 83       	st	Z, r24
    203c:	8d 81       	ldd	r24, Y+5	; 0x05
				break;
			}
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    203e:	f7 01       	movw	r30, r14
    2040:	e8 0f       	add	r30, r24
    2042:	f1 1d       	adc	r31, r1
    2044:	e5 53       	subi	r30, 0x35	; 53
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
		numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    2048:	20 81       	ld	r18, Z
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	32 2f       	mov	r19, r18
    204e:	22 27       	eor	r18, r18
				menuScreen->screen2[4][15] = 'o';
				menuScreen->screen2[4][16] = 'n';
				menuScreen->screen2[4][17] = 'e';
				break;
			}
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    2050:	70 96       	adiw	r30, 0x10	; 16
		numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    2052:	80 81       	ld	r24, Z
    2054:	28 2b       	or	r18, r24
    2056:	45 e0       	ldi	r20, 0x05	; 5
    2058:	6d e0       	ldi	r22, 0x0D	; 13
    205a:	c8 01       	movw	r24, r16
    205c:	8d 51       	subi	r24, 0x1D	; 29
    205e:	9e 4f       	sbci	r25, 0xFE	; 254
    2060:	88 d3       	rcall	.+1808   	; 0x2772 <numPrinter>
		menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
    2062:	d8 01       	movw	r26, r16
    2064:	a0 51       	subi	r26, 0x10	; 16
    2066:	be 4f       	sbci	r27, 0xFE	; 254
    2068:	8c 91       	ld	r24, X
    206a:	f8 01       	movw	r30, r16
    206c:	e1 51       	subi	r30, 0x11	; 17
    206e:	fe 4f       	sbci	r31, 0xFE	; 254
    2070:	80 83       	st	Z, r24
		menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
    2072:	32 96       	adiw	r30, 0x02	; 2
    2074:	80 81       	ld	r24, Z
    2076:	8c 93       	st	X, r24
		menuScreen->screen2[5][14] = '.';
    2078:	8e e2       	ldi	r24, 0x2E	; 46
    207a:	80 83       	st	Z, r24
    207c:	8e 81       	ldd	r24, Y+6	; 0x06
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
			
			if(((currentGlobals->menuState)&selectBit)>35) //this accounts for menu stats 36,37,44, and 45
    207e:	87 7f       	andi	r24, 0xF7	; 247
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	24 32       	cpi	r18, 0x24	; 36
    2086:	31 05       	cpc	r19, r1
			{
				triggerChangeScreen = ((currentGlobals->menuState)&selectBit) - 34; //mask to get rid of encoder B pushed state. 
    2088:	14 f0       	brlt	.+4      	; 0x208e <updateScreen+0x77a>
		menuScreen->screen2[5][14] = '.';
			//the track settings screens should now be populated
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
    208a:	82 52       	subi	r24, 0x22	; 34
			if(((currentGlobals->menuState)&selectBit)>35) //this accounts for menu stats 36,37,44, and 45
			{
				triggerChangeScreen = ((currentGlobals->menuState)&selectBit) - 34; //mask to get rid of encoder B pushed state. 
			}
			
			outputS(menuScreen->screen2[triggerChangeScreen], 1); 
    208c:	01 c0       	rjmp	.+2      	; 0x2090 <updateScreen+0x77c>
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	c8 2e       	mov	r12, r24
    2092:	d1 2c       	mov	r13, r1
    2094:	0f 2e       	mov	r0, r31
    2096:	f5 e1       	ldi	r31, 0x15	; 21
    2098:	bf 2e       	mov	r11, r31
    209a:	f0 2d       	mov	r31, r0
    209c:	bc 9c       	mul	r11, r12
    209e:	c0 01       	movw	r24, r0
    20a0:	bd 9c       	mul	r11, r13
    20a2:	90 0d       	add	r25, r0
    20a4:	11 24       	eor	r1, r1
    20a6:	86 58       	subi	r24, 0x86	; 134
    20a8:	9e 4f       	sbci	r25, 0xFE	; 254
    20aa:	61 e0       	ldi	r22, 0x01	; 1
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	80 0f       	add	r24, r16
			outputS(menuScreen->screen2[triggerChangeScreen+1], 2); 
    20b0:	91 1f       	adc	r25, r17
    20b2:	47 d3       	rcall	.+1678   	; 0x2742 <outputS>
    20b4:	96 01       	movw	r18, r12
    20b6:	2f 5f       	subi	r18, 0xFF	; 255
    20b8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ba:	b2 9e       	mul	r11, r18
    20bc:	c0 01       	movw	r24, r0
    20be:	b3 9e       	mul	r11, r19
    20c0:	90 0d       	add	r25, r0
    20c2:	11 24       	eor	r1, r1
    20c4:	86 58       	subi	r24, 0x86	; 134
    20c6:	9e 4f       	sbci	r25, 0xFE	; 254
    20c8:	62 e0       	ldi	r22, 0x02	; 2
    20ca:	70 e0       	ldi	r23, 0x00	; 0
    20cc:	80 0f       	add	r24, r16
    20ce:	91 1f       	adc	r25, r17
			outputS(menuScreen->screen2[triggerChangeScreen+2], 3);
    20d0:	38 d3       	rcall	.+1648   	; 0x2742 <outputS>
    20d2:	f2 e0       	ldi	r31, 0x02	; 2
    20d4:	cf 0e       	add	r12, r31
    20d6:	d1 1c       	adc	r13, r1
    20d8:	bc 9c       	mul	r11, r12
    20da:	c0 01       	movw	r24, r0
    20dc:	bd 9c       	mul	r11, r13
    20de:	90 0d       	add	r25, r0
    20e0:	11 24       	eor	r1, r1
    20e2:	86 58       	subi	r24, 0x86	; 134
    20e4:	9e 4f       	sbci	r25, 0xFE	; 254
    20e6:	63 e0       	ldi	r22, 0x03	; 3
    20e8:	70 e0       	ldi	r23, 0x00	; 0
    20ea:	80 0f       	add	r24, r16
    20ec:	91 1f       	adc	r25, r17
    20ee:	29 d3       	rcall	.+1618   	; 0x2742 <outputS>
			
			break;
    20f0:	19 c0       	rjmp	.+50     	; 0x2124 <updateScreen+0x810>
			
			case 3:;
			//do we need this variable?
			numPrinter(menuScreen->screen3[2],10,2,(currentGlobals->currentTrack)+1);
    20f2:	2d 81       	ldd	r18, Y+5	; 0x05
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	2f 5f       	subi	r18, 0xFF	; 255
    20f8:	3f 4f       	sbci	r19, 0xFF	; 255
    20fa:	42 e0       	ldi	r20, 0x02	; 2
    20fc:	6a e0       	ldi	r22, 0x0A	; 10
    20fe:	68 01       	movw	r12, r16
    2100:	8f e9       	ldi	r24, 0x9F	; 159
    2102:	c8 1a       	sub	r12, r24
    2104:	8d ef       	ldi	r24, 0xFD	; 253
    2106:	d8 0a       	sbc	r13, r24
    2108:	c6 01       	movw	r24, r12
    210a:	33 d3       	rcall	.+1638   	; 0x2772 <numPrinter>
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    210c:	8d 81       	ldd	r24, Y+5	; 0x05
    210e:	fe 01       	movw	r30, r28
    2110:	e8 0f       	add	r30, r24
    2112:	f1 1d       	adc	r31, r1
    2114:	45 85       	ldd	r20, Z+13	; 0x0d
    2116:	6e e0       	ldi	r22, 0x0E	; 14
    2118:	c6 01       	movw	r24, r12
    211a:	f1 d4       	rcall	.+2530   	; 0x2afe <midiNotePrinter>
    211c:	62 e0       	ldi	r22, 0x02	; 2
			outputS(menuScreen->screen3[2],2);
    211e:	70 e0       	ldi	r23, 0x00	; 0
    2120:	c6 01       	movw	r24, r12
    2122:	0f d3       	rcall	.+1566   	; 0x2742 <outputS>
    2124:	8a 85       	ldd	r24, Y+10	; 0x0a
    2126:	82 ff       	sbrs	r24, 2
			break;
			
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
    2128:	70 c1       	rjmp	.+736    	; 0x240a <__stack+0x20b>
    212a:	8b 85       	ldd	r24, Y+11	; 0x0b
    212c:	98 2f       	mov	r25, r24
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
    212e:	9f 70       	andi	r25, 0x0F	; 15
    2130:	89 2e       	mov	r8, r25
    2132:	99 85       	ldd	r25, Y+9	; 0x09
    2134:	90 ff       	sbrs	r25, 0
		uint8_t positionSelectUpper = 0;
		if((currentGlobals->buttonSwitchFlag)&0x01)
    2136:	02 c0       	rjmp	.+4      	; 0x213c <updateScreen+0x828>
    2138:	28 e0       	ldi	r18, 0x08	; 8
    213a:	01 c0       	rjmp	.+2      	; 0x213e <updateScreen+0x82a>
		{
			positionSelectUpper = 8;
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	82 95       	swap	r24
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
		uint8_t positionSelectUpper = 0;
    2140:	8f 70       	andi	r24, 0x0F	; 15
		{
			positionSelectUpper = 8;
		}
		

		switch((currentGlobals->knobStatus)>>4)
    2142:	82 30       	cpi	r24, 0x02	; 2
    2144:	09 f4       	brne	.+2      	; 0x2148 <updateScreen+0x834>
    2146:	94 c0       	rjmp	.+296    	; 0x2270 <__stack+0x71>
    2148:	30 f4       	brcc	.+12     	; 0x2156 <updateScreen+0x842>
    214a:	88 23       	and	r24, r24
    214c:	69 f0       	breq	.+26     	; 0x2168 <updateScreen+0x854>
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	09 f4       	brne	.+2      	; 0x2154 <updateScreen+0x840>
    2152:	58 c0       	rjmp	.+176    	; 0x2204 <__stack+0x5>
    2154:	59 c1       	rjmp	.+690    	; 0x2408 <__stack+0x209>
    2156:	84 30       	cpi	r24, 0x04	; 4
    2158:	09 f4       	brne	.+2      	; 0x215c <updateScreen+0x848>
    215a:	f6 c0       	rjmp	.+492    	; 0x2348 <__stack+0x149>
    215c:	08 f4       	brcc	.+2      	; 0x2160 <updateScreen+0x84c>
    215e:	be c0       	rjmp	.+380    	; 0x22dc <__stack+0xdd>
    2160:	85 30       	cpi	r24, 0x05	; 5
    2162:	09 f4       	brne	.+2      	; 0x2166 <updateScreen+0x852>
    2164:	3f c1       	rjmp	.+638    	; 0x23e4 <__stack+0x1e5>
    2166:	50 c1       	rjmp	.+672    	; 0x2408 <__stack+0x209>
    2168:	e8 2d       	mov	r30, r8
		{
			case 0: //output volume
			if((currentPattern->outputLevelMSB[positionSelect])==0)
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	d7 01       	movw	r26, r14
    216e:	ae 0f       	add	r26, r30
    2170:	bf 1f       	adc	r27, r31
    2172:	8c 91       	ld	r24, X
    2174:	81 11       	cpse	r24, r1
    2176:	10 c0       	rjmp	.+32     	; 0x2198 <updateScreen+0x884>
    2178:	80 e2       	ldi	r24, 0x20	; 32
			{ //value is positive
				menuScreen->knobScreen[0][14] = ' ';
    217a:	d8 01       	movw	r26, r16
    217c:	ae 5f       	subi	r26, 0xFE	; 254
    217e:	bc 4f       	sbci	r27, 0xFC	; 252
    2180:	8c 93       	st	X, r24
    2182:	ee 0d       	add	r30, r14
				numPrinter(menuScreen->knobScreen[0],15,2,currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
    2184:	ff 1d       	adc	r31, r15
    2186:	20 85       	ldd	r18, Z+8	; 0x08
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	42 e0       	ldi	r20, 0x02	; 2
    218c:	6f e0       	ldi	r22, 0x0F	; 15
    218e:	c8 01       	movw	r24, r16
    2190:	8c 50       	subi	r24, 0x0C	; 12
    2192:	9d 4f       	sbci	r25, 0xFD	; 253
    2194:	ee d2       	rcall	.+1500   	; 0x2772 <numPrinter>
    2196:	29 c0       	rjmp	.+82     	; 0x21ea <updateScreen+0x8d6>
    2198:	8d e2       	ldi	r24, 0x2D	; 45
    219a:	d8 01       	movw	r26, r16
			}else
			{
				menuScreen->knobScreen[0][14] = '-';
    219c:	ae 5f       	subi	r26, 0xFE	; 254
    219e:	bc 4f       	sbci	r27, 0xFC	; 252
    21a0:	8c 93       	st	X, r24
    21a2:	68 01       	movw	r12, r16
				menuScreen->knobScreen[0][15] = ((((currentPattern->outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    21a4:	a3 e0       	ldi	r26, 0x03	; 3
    21a6:	ca 0e       	add	r12, r26
    21a8:	da 1e       	adc	r13, r26
    21aa:	ee 0d       	add	r30, r14
    21ac:	ff 1d       	adc	r31, r15
    21ae:	80 85       	ldd	r24, Z+8	; 0x08
    21b0:	80 95       	com	r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	01 96       	adiw	r24, 0x01	; 1
    21b6:	64 e6       	ldi	r22, 0x64	; 100
    21b8:	70 e0       	ldi	r23, 0x00	; 0
    21ba:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__divmodhi4>
    21be:	2a e0       	ldi	r18, 0x0A	; 10
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	b9 01       	movw	r22, r18
    21c4:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__divmodhi4>
    21c8:	60 5d       	subi	r22, 0xD0	; 208
    21ca:	d6 01       	movw	r26, r12
    21cc:	6c 93       	st	X, r22
				menuScreen->knobScreen[0][16] = (((currentPattern->outputLevelLSB[positionSelect]^255)+1)%10)+48;
    21ce:	78 01       	movw	r14, r16
    21d0:	bc ef       	ldi	r27, 0xFC	; 252
    21d2:	eb 1a       	sub	r14, r27
    21d4:	fb 0a       	sbc	r15, r27
    21d6:	80 85       	ldd	r24, Z+8	; 0x08
    21d8:	80 95       	com	r24
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	b9 01       	movw	r22, r18
    21e0:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__divmodhi4>
    21e4:	80 5d       	subi	r24, 0xD0	; 208
    21e6:	f7 01       	movw	r30, r14
			}
				
			menuScreen->knobScreen[0][10] = positionSelect + 49;
    21e8:	80 83       	st	Z, r24
    21ea:	f8 01       	movw	r30, r16
    21ec:	e2 50       	subi	r30, 0x02	; 2
    21ee:	fd 4f       	sbci	r31, 0xFD	; 253
    21f0:	81 e3       	ldi	r24, 0x31	; 49
    21f2:	88 0d       	add	r24, r8
			outputS(menuScreen->knobScreen[0], 3);
    21f4:	80 83       	st	Z, r24
    21f6:	63 e0       	ldi	r22, 0x03	; 3
    21f8:	70 e0       	ldi	r23, 0x00	; 0
    21fa:	c8 01       	movw	r24, r16
    21fc:	8c 50       	subi	r24, 0x0C	; 12
    21fe:	9d 4f       	sbci	r25, 0xFD	; 253
    2200:	a0 d2       	rcall	.+1344   	; 0x2742 <outputS>
			break;
    2202:	02 c1       	rjmp	.+516    	; 0x2408 <__stack+0x209>
				
			case 1: //pitch
			menuScreen->knobScreen[1][5] = positionSelect+49; 
    2204:	f8 01       	movw	r30, r16
    2206:	e2 5f       	subi	r30, 0xF2	; 242
    2208:	fc 4f       	sbci	r31, 0xFC	; 252
    220a:	81 e3       	ldi	r24, 0x31	; 49
    220c:	88 0d       	add	r24, r8
			if(currentPattern->outputPitch[positionSelect]>>7)
    220e:	80 83       	st	Z, r24
    2210:	91 2c       	mov	r9, r1
    2212:	f7 01       	movw	r30, r14
    2214:	e8 0d       	add	r30, r8
    2216:	f9 1d       	adc	r31, r9
    2218:	80 89       	ldd	r24, Z+16	; 0x10
    221a:	88 23       	and	r24, r24
			{
				menuScreen->knobScreen[1][7] = '-';
    221c:	94 f4       	brge	.+36     	; 0x2242 <__stack+0x43>
    221e:	8d e2       	ldi	r24, 0x2D	; 45
    2220:	f8 01       	movw	r30, r16
    2222:	e0 5f       	subi	r30, 0xF0	; 240
    2224:	fc 4f       	sbci	r31, 0xFC	; 252
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect])^255);
    2226:	80 83       	st	Z, r24
    2228:	f7 01       	movw	r30, r14
    222a:	e8 0d       	add	r30, r8
    222c:	f9 1d       	adc	r31, r9
    222e:	20 89       	ldd	r18, Z+16	; 0x10
    2230:	20 95       	com	r18
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	43 e0       	ldi	r20, 0x03	; 3
    2236:	68 e0       	ldi	r22, 0x08	; 8
    2238:	c8 01       	movw	r24, r16
    223a:	87 5f       	subi	r24, 0xF7	; 247
    223c:	9c 4f       	sbci	r25, 0xFC	; 252
			}else
			{
				menuScreen->knobScreen[1][7] = '+';
    223e:	99 d2       	rcall	.+1330   	; 0x2772 <numPrinter>
    2240:	10 c0       	rjmp	.+32     	; 0x2262 <__stack+0x63>
    2242:	8b e2       	ldi	r24, 0x2B	; 43
    2244:	f8 01       	movw	r30, r16
    2246:	e0 5f       	subi	r30, 0xF0	; 240
				numPrinter(menuScreen->knobScreen[1],8,3,currentPattern->outputPitch[positionSelect]);
    2248:	fc 4f       	sbci	r31, 0xFC	; 252
    224a:	80 83       	st	Z, r24
    224c:	f7 01       	movw	r30, r14
    224e:	e8 0d       	add	r30, r8
    2250:	f9 1d       	adc	r31, r9
    2252:	20 89       	ldd	r18, Z+16	; 0x10
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	43 e0       	ldi	r20, 0x03	; 3
    2258:	68 e0       	ldi	r22, 0x08	; 8
    225a:	c8 01       	movw	r24, r16
    225c:	87 5f       	subi	r24, 0xF7	; 247
    225e:	9c 4f       	sbci	r25, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
    2260:	88 d2       	rcall	.+1296   	; 0x2772 <numPrinter>
    2262:	63 e0       	ldi	r22, 0x03	; 3
    2264:	70 e0       	ldi	r23, 0x00	; 0
    2266:	c8 01       	movw	r24, r16
    2268:	87 5f       	subi	r24, 0xF7	; 247
    226a:	9c 4f       	sbci	r25, 0xFC	; 252
			break;
    226c:	6a d2       	rcall	.+1236   	; 0x2742 <outputS>
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    226e:	cc c0       	rjmp	.+408    	; 0x2408 <__stack+0x209>
    2270:	91 2c       	mov	r9, r1
    2272:	c2 2e       	mov	r12, r18
    2274:	d1 2c       	mov	r13, r1
    2276:	c4 01       	movw	r24, r8
    2278:	8c 0d       	add	r24, r12
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    227a:	9d 1d       	adc	r25, r13
    227c:	58 01       	movw	r10, r16
    227e:	f2 ee       	ldi	r31, 0xE2	; 226
    2280:	af 1a       	sub	r10, r31
    2282:	fc ef       	ldi	r31, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    2284:	bf 0a       	sbc	r11, r31
    2286:	e8 0e       	add	r14, r24
    2288:	f9 1e       	adc	r15, r25
    228a:	f7 01       	movw	r30, r14
    228c:	e8 5b       	subi	r30, 0xB8	; 184
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	20 81       	ld	r18, Z
    2292:	30 e0       	ldi	r19, 0x00	; 0
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    2294:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    2296:	22 27       	eor	r18, r18
    2298:	70 96       	adiw	r30, 0x10	; 16
    229a:	80 81       	ld	r24, Z
    229c:	28 2b       	or	r18, r24
    229e:	45 e0       	ldi	r20, 0x05	; 5
    22a0:	6e e0       	ldi	r22, 0x0E	; 14
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
    22a2:	c5 01       	movw	r24, r10
    22a4:	66 d2       	rcall	.+1228   	; 0x2772 <numPrinter>
    22a6:	f8 01       	movw	r30, r16
    22a8:	e5 5d       	subi	r30, 0xD5	; 213
    22aa:	fc 4f       	sbci	r31, 0xFC	; 252
    22ac:	d8 01       	movw	r26, r16
    22ae:	a4 5d       	subi	r26, 0xD4	; 212
    22b0:	bc 4f       	sbci	r27, 0xFC	; 252
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
    22b2:	8c 91       	ld	r24, X
    22b4:	80 83       	st	Z, r24
    22b6:	32 96       	adiw	r30, 0x02	; 2
			menuScreen->knobScreen[2][15] = '.';	
    22b8:	80 81       	ld	r24, Z
    22ba:	8c 93       	st	X, r24
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
    22bc:	8e e2       	ldi	r24, 0x2E	; 46
    22be:	80 83       	st	Z, r24
    22c0:	94 01       	movw	r18, r8
    22c2:	2f 5f       	subi	r18, 0xFF	; 255
    22c4:	3f 4f       	sbci	r19, 0xFF	; 255
    22c6:	2c 0d       	add	r18, r12
    22c8:	3d 1d       	adc	r19, r13
    22ca:	42 e0       	ldi	r20, 0x02	; 2
    22cc:	6a e0       	ldi	r22, 0x0A	; 10
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
    22ce:	c5 01       	movw	r24, r10
    22d0:	50 d2       	rcall	.+1184   	; 0x2772 <numPrinter>
    22d2:	63 e0       	ldi	r22, 0x03	; 3
    22d4:	70 e0       	ldi	r23, 0x00	; 0
    22d6:	c5 01       	movw	r24, r10
			break;
    22d8:	34 d2       	rcall	.+1128   	; 0x2742 <outputS>
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    22da:	96 c0       	rjmp	.+300    	; 0x2408 <__stack+0x209>
    22dc:	91 2c       	mov	r9, r1
    22de:	c2 2e       	mov	r12, r18
    22e0:	d1 2c       	mov	r13, r1
    22e2:	c4 01       	movw	r24, r8
    22e4:	8c 0d       	add	r24, r12
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    22e6:	9d 1d       	adc	r25, r13
    22e8:	58 01       	movw	r10, r16
    22ea:	2d ec       	ldi	r18, 0xCD	; 205
    22ec:	a2 1a       	sub	r10, r18
    22ee:	2c ef       	ldi	r18, 0xFC	; 252
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
			break;
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    22f0:	b2 0a       	sbc	r11, r18
    22f2:	e8 0e       	add	r14, r24
    22f4:	f9 1e       	adc	r15, r25
    22f6:	f7 01       	movw	r30, r14
    22f8:	e8 59       	subi	r30, 0x98	; 152
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	20 81       	ld	r18, Z
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
			break;
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    2302:	22 27       	eor	r18, r18
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    2304:	70 96       	adiw	r30, 0x10	; 16
    2306:	80 81       	ld	r24, Z
    2308:	28 2b       	or	r18, r24
    230a:	45 e0       	ldi	r20, 0x05	; 5
    230c:	6f e0       	ldi	r22, 0x0F	; 15
    230e:	c5 01       	movw	r24, r10
    2310:	30 d2       	rcall	.+1120   	; 0x2772 <numPrinter>
			menuScreen->knobScreen[3][14] = menuScreen->knobScreen[3][15];
    2312:	f8 01       	movw	r30, r16
    2314:	ef 5b       	subi	r30, 0xBF	; 191
    2316:	fc 4f       	sbci	r31, 0xFC	; 252
    2318:	d8 01       	movw	r26, r16
    231a:	ae 5b       	subi	r26, 0xBE	; 190
    231c:	bc 4f       	sbci	r27, 0xFC	; 252
    231e:	8c 91       	ld	r24, X
    2320:	80 83       	st	Z, r24
			menuScreen->knobScreen[3][15] = menuScreen->knobScreen[3][16];
    2322:	32 96       	adiw	r30, 0x02	; 2
    2324:	80 81       	ld	r24, Z
    2326:	8c 93       	st	X, r24
			menuScreen->knobScreen[3][16] = '.';
    2328:	8e e2       	ldi	r24, 0x2E	; 46
			numPrinter(menuScreen->knobScreen[3],11,2,(positionSelect+1+positionSelectUpper));
    232a:	80 83       	st	Z, r24
    232c:	94 01       	movw	r18, r8
    232e:	2f 5f       	subi	r18, 0xFF	; 255
    2330:	3f 4f       	sbci	r19, 0xFF	; 255
    2332:	2c 0d       	add	r18, r12
    2334:	3d 1d       	adc	r19, r13
    2336:	42 e0       	ldi	r20, 0x02	; 2
    2338:	6b e0       	ldi	r22, 0x0B	; 11
    233a:	c5 01       	movw	r24, r10
			outputS(menuScreen->knobScreen[3], 3);
    233c:	1a d2       	rcall	.+1076   	; 0x2772 <numPrinter>
    233e:	63 e0       	ldi	r22, 0x03	; 3
    2340:	70 e0       	ldi	r23, 0x00	; 0
    2342:	c5 01       	movw	r24, r10
    2344:	fe d1       	rcall	.+1020   	; 0x2742 <outputS>
			break;
				
			case 4: //track volume
			if(currentPattern->trackMainVolumeMSB[(positionSelect+positionSelectUpper)]==0)
    2346:	60 c0       	rjmp	.+192    	; 0x2408 <__stack+0x209>
    2348:	c2 2e       	mov	r12, r18
    234a:	d1 2c       	mov	r13, r1
    234c:	c8 0c       	add	r12, r8
    234e:	d1 1c       	adc	r13, r1
    2350:	f7 01       	movw	r30, r14
    2352:	ec 0d       	add	r30, r12
    2354:	fd 1d       	adc	r31, r13
    2356:	80 a5       	ldd	r24, Z+40	; 0x28
			{
				menuScreen->knobScreen[4][15] = ' ';
    2358:	81 11       	cpse	r24, r1
    235a:	11 c0       	rjmp	.+34     	; 0x237e <__stack+0x17f>
    235c:	80 e2       	ldi	r24, 0x20	; 32
    235e:	f8 01       	movw	r30, r16
    2360:	e9 5a       	subi	r30, 0xA9	; 169
 				numPrinter(menuScreen->knobScreen[4],16, 2, currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]);
    2362:	fc 4f       	sbci	r31, 0xFC	; 252
    2364:	80 83       	st	Z, r24
    2366:	f7 01       	movw	r30, r14
    2368:	ec 0d       	add	r30, r12
    236a:	fd 1d       	adc	r31, r13
    236c:	20 ad       	ldd	r18, Z+56	; 0x38
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	42 e0       	ldi	r20, 0x02	; 2
    2372:	60 e1       	ldi	r22, 0x10	; 16
    2374:	c8 01       	movw	r24, r16
    2376:	88 5b       	subi	r24, 0xB8	; 184
    2378:	9c 4f       	sbci	r25, 0xFC	; 252
    237a:	fb d1       	rcall	.+1014   	; 0x2772 <numPrinter>
			}else
			{
				menuScreen->knobScreen[4][15] = '-';
    237c:	25 c0       	rjmp	.+74     	; 0x23c8 <__stack+0x1c9>
    237e:	8d e2       	ldi	r24, 0x2D	; 45
    2380:	f8 01       	movw	r30, r16
    2382:	e9 5a       	subi	r30, 0xA9	; 169
    2384:	fc 4f       	sbci	r31, 0xFC	; 252
				menuScreen->knobScreen[4][16] = ((((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    2386:	80 83       	st	Z, r24
    2388:	31 96       	adiw	r30, 0x01	; 1
    238a:	ec 0c       	add	r14, r12
    238c:	fd 1c       	adc	r15, r13
    238e:	d7 01       	movw	r26, r14
    2390:	d8 96       	adiw	r26, 0x38	; 56
    2392:	8c 91       	ld	r24, X
    2394:	80 95       	com	r24
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	01 96       	adiw	r24, 0x01	; 1
    239a:	64 e6       	ldi	r22, 0x64	; 100
    239c:	70 e0       	ldi	r23, 0x00	; 0
    239e:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__divmodhi4>
    23a2:	2a e0       	ldi	r18, 0x0A	; 10
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	b9 01       	movw	r22, r18
    23a8:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__divmodhi4>
    23ac:	60 5d       	subi	r22, 0xD0	; 208
				menuScreen->knobScreen[4][17] = (((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%10)+48;
    23ae:	60 83       	st	Z, r22
    23b0:	31 96       	adiw	r30, 0x01	; 1
    23b2:	d7 01       	movw	r26, r14
    23b4:	d8 96       	adiw	r26, 0x38	; 56
    23b6:	8c 91       	ld	r24, X
    23b8:	80 95       	com	r24
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	01 96       	adiw	r24, 0x01	; 1
    23be:	b9 01       	movw	r22, r18
    23c0:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__divmodhi4>
    23c4:	80 5d       	subi	r24, 0xD0	; 208
			}
				 numPrinter(menuScreen->knobScreen[4],12,2,(positionSelect+positionSelectUpper+1));
    23c6:	80 83       	st	Z, r24
    23c8:	08 5b       	subi	r16, 0xB8	; 184
    23ca:	1c 4f       	sbci	r17, 0xFC	; 252
    23cc:	96 01       	movw	r18, r12
    23ce:	2f 5f       	subi	r18, 0xFF	; 255
    23d0:	3f 4f       	sbci	r19, 0xFF	; 255
    23d2:	42 e0       	ldi	r20, 0x02	; 2
    23d4:	6c e0       	ldi	r22, 0x0C	; 12
    23d6:	c8 01       	movw	r24, r16
    23d8:	cc d1       	rcall	.+920    	; 0x2772 <numPrinter>
				 outputS(menuScreen->knobScreen[4], 3);
    23da:	63 e0       	ldi	r22, 0x03	; 3
    23dc:	70 e0       	ldi	r23, 0x00	; 0
    23de:	c8 01       	movw	r24, r16
    23e0:	b0 d1       	rcall	.+864    	; 0x2742 <outputS>
    23e2:	12 c0       	rjmp	.+36     	; 0x2408 <__stack+0x209>
			break;
    23e4:	06 5d       	subi	r16, 0xD6	; 214
			
			case 5:
			numPrinter(menuScreen->screen0[2],5,3,currentPattern->patternBPM);
    23e6:	1f 4f       	sbci	r17, 0xFF	; 255
    23e8:	f7 01       	movw	r30, r14
    23ea:	e8 53       	subi	r30, 0x38	; 56
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	20 81       	ld	r18, Z
    23f0:	31 81       	ldd	r19, Z+1	; 0x01
    23f2:	43 e0       	ldi	r20, 0x03	; 3
    23f4:	65 e0       	ldi	r22, 0x05	; 5
    23f6:	c8 01       	movw	r24, r16
    23f8:	bc d1       	rcall	.+888    	; 0x2772 <numPrinter>
    23fa:	8e 81       	ldd	r24, Y+6	; 0x06
    23fc:	81 11       	cpse	r24, r1
			if(currentGlobals->menuState==PreformanceModeInit)
    23fe:	04 c0       	rjmp	.+8      	; 0x2408 <__stack+0x209>
    2400:	62 e0       	ldi	r22, 0x02	; 2
    2402:	70 e0       	ldi	r23, 0x00	; 0
			{
				outputS(menuScreen->screen0[2],2);
    2404:	c8 01       	movw	r24, r16
    2406:	9d d1       	rcall	.+826    	; 0x2742 <outputS>
    2408:	1a 86       	std	Y+10, r1	; 0x0a
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
			}
			break;
		}
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<knobChange));			
    240e:	1f 91       	pop	r17
	}
    2410:	0f 91       	pop	r16
    2412:	ff 90       	pop	r15
    2414:	ef 90       	pop	r14
    2416:	df 90       	pop	r13
    2418:	cf 90       	pop	r12
    241a:	bf 90       	pop	r11
    241c:	af 90       	pop	r10
    241e:	9f 90       	pop	r9
    2420:	8f 90       	pop	r8
    2422:	08 95       	ret

00002424 <__vector_54>:
    2424:	1f 92       	push	r1
    2426:	0f 92       	push	r0
    2428:	0f b6       	in	r0, 0x3f	; 63
}

void midiTransmit(uint8_t data)
{
  while (!(UCSR3A & (1 << UDRE3)));
  UDR3 = data;
    242a:	0f 92       	push	r0
    242c:	11 24       	eor	r1, r1
    242e:	0b b6       	in	r0, 0x3b	; 59
    2430:	0f 92       	push	r0
    2432:	2f 93       	push	r18
    2434:	3f 93       	push	r19
    2436:	5f 93       	push	r21
    2438:	6f 93       	push	r22
    243a:	7f 93       	push	r23
    243c:	8f 93       	push	r24
    243e:	9f 93       	push	r25
    2440:	af 93       	push	r26
    2442:	bf 93       	push	r27
    2444:	ef 93       	push	r30
    2446:	ff 93       	push	r31
    2448:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    244c:	82 2f       	mov	r24, r18
    244e:	82 95       	swap	r24
    2450:	8f 70       	andi	r24, 0x0F	; 15
    2452:	88 50       	subi	r24, 0x08	; 8
    2454:	82 30       	cpi	r24, 0x02	; 2
    2456:	78 f4       	brcc	.+30     	; 0x2476 <__vector_54+0x52>
    2458:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <midiWriteIndex>
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	fc 01       	movw	r30, r24
    2460:	ee 0f       	add	r30, r30
    2462:	ff 1f       	adc	r31, r31
    2464:	8e 0f       	add	r24, r30
    2466:	9f 1f       	adc	r25, r31
    2468:	fc 01       	movw	r30, r24
    246a:	e7 59       	subi	r30, 0x97	; 151
    246c:	f9 4f       	sbci	r31, 0xF9	; 249
    246e:	20 83       	st	Z, r18
    2470:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <midiWriteFlag>
    2474:	50 c0       	rjmp	.+160    	; 0x2516 <__vector_54+0xf2>
    2476:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <midiWriteFlag>
    247a:	81 11       	cpse	r24, r1
    247c:	15 c0       	rjmp	.+42     	; 0x24a8 <__vector_54+0x84>
    247e:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <midiWriteIndex>
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <midiWriteFlag>
    2488:	fc 01       	movw	r30, r24
    248a:	ee 0f       	add	r30, r30
    248c:	ff 1f       	adc	r31, r31
    248e:	e8 0f       	add	r30, r24
    2490:	f9 1f       	adc	r31, r25
    2492:	e7 59       	subi	r30, 0x97	; 151
    2494:	f9 4f       	sbci	r31, 0xF9	; 249
    2496:	e3 0f       	add	r30, r19
    2498:	f1 1d       	adc	r31, r1
    249a:	21 83       	std	Z+1, r18	; 0x01
    249c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <midiWriteFlag>
    24a0:	8f 5f       	subi	r24, 0xFF	; 255
    24a2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <midiWriteFlag>
    24a6:	37 c0       	rjmp	.+110    	; 0x2516 <__vector_54+0xf2>
    24a8:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <midiWriteFlag>
    24ac:	8f 3f       	cpi	r24, 0xFF	; 255
    24ae:	99 f1       	breq	.+102    	; 0x2516 <__vector_54+0xf2>
    24b0:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <midiWriteIndex>
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <midiWriteFlag>
    24ba:	fc 01       	movw	r30, r24
    24bc:	ee 0f       	add	r30, r30
    24be:	ff 1f       	adc	r31, r31
    24c0:	e8 0f       	add	r30, r24
    24c2:	f9 1f       	adc	r31, r25
    24c4:	e7 59       	subi	r30, 0x97	; 151
    24c6:	f9 4f       	sbci	r31, 0xF9	; 249
    24c8:	e3 0f       	add	r30, r19
    24ca:	f1 1d       	adc	r31, r1
    24cc:	21 83       	std	Z+1, r18	; 0x01
    24ce:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <midiWriteIndex>
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	fc 01       	movw	r30, r24
    24d6:	ee 0f       	add	r30, r30
    24d8:	ff 1f       	adc	r31, r31
    24da:	8e 0f       	add	r24, r30
    24dc:	9f 1f       	adc	r25, r31
    24de:	fc 01       	movw	r30, r24
    24e0:	e7 59       	subi	r30, 0x97	; 151
    24e2:	f9 4f       	sbci	r31, 0xF9	; 249
    24e4:	20 81       	ld	r18, Z
    24e6:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <midiWriteIndex>
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	01 96       	adiw	r24, 0x01	; 1
    24ee:	6a e0       	ldi	r22, 0x0A	; 10
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__divmodhi4>
    24f6:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <midiWriteIndex>
    24fa:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <midiWriteIndex>
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	fc 01       	movw	r30, r24
    2502:	ee 0f       	add	r30, r30
    2504:	ff 1f       	adc	r31, r31
    2506:	8e 0f       	add	r24, r30
    2508:	9f 1f       	adc	r25, r31
    250a:	fc 01       	movw	r30, r24
    250c:	e7 59       	subi	r30, 0x97	; 151
    250e:	f9 4f       	sbci	r31, 0xF9	; 249
    2510:	20 83       	st	Z, r18
    2512:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <midiWriteFlag>
    2516:	ff 91       	pop	r31
    2518:	ef 91       	pop	r30
    251a:	bf 91       	pop	r27
    251c:	af 91       	pop	r26
    251e:	9f 91       	pop	r25
    2520:	8f 91       	pop	r24
    2522:	7f 91       	pop	r23
    2524:	6f 91       	pop	r22
    2526:	5f 91       	pop	r21
    2528:	3f 91       	pop	r19
    252a:	2f 91       	pop	r18
    252c:	0f 90       	pop	r0
    252e:	0b be       	out	0x3b, r0	; 59
    2530:	0f 90       	pop	r0
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	0f 90       	pop	r0
    2536:	1f 90       	pop	r1
    2538:	18 95       	reti

0000253a <initMidi>:
    253a:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    253e:	8f e1       	ldi	r24, 0x1F	; 31
    2540:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    2544:	e1 e3       	ldi	r30, 0x31	; 49
    2546:	f1 e0       	ldi	r31, 0x01	; 1
    2548:	80 81       	ld	r24, Z
    254a:	88 69       	ori	r24, 0x98	; 152
    254c:	80 83       	st	Z, r24
    254e:	e2 e3       	ldi	r30, 0x32	; 50
    2550:	f1 e0       	ldi	r31, 0x01	; 1
    2552:	80 81       	ld	r24, Z
    2554:	86 60       	ori	r24, 0x06	; 6
    2556:	80 83       	st	Z, r24
    2558:	08 95       	ret

0000255a <midiRead>:
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
    255a:	af 92       	push	r10
    255c:	bf 92       	push	r11
    255e:	cf 92       	push	r12
    2560:	df 92       	push	r13
    2562:	ef 92       	push	r14
    2564:	ff 92       	push	r15
    2566:	0f 93       	push	r16
    2568:	1f 93       	push	r17
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
  while (midiReadIndex != midiWriteIndex)
    2572:	e0 91 f5 03 	lds	r30, 0x03F5	; 0x8003f5 <midiReadIndex>
    2576:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <midiWriteIndex>
    257a:	e8 17       	cp	r30, r24
    257c:	09 f4       	brne	.+2      	; 0x2580 <midiRead+0x26>
    257e:	5c c0       	rjmp	.+184    	; 0x2638 <midiRead+0xde>
    2580:	7e 01       	movw	r14, r28
    2582:	86 ea       	ldi	r24, 0xA6	; 166
    2584:	e8 0e       	add	r14, r24
    2586:	f1 1c       	adc	r15, r1
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    2588:	0a e0       	ldi	r16, 0x0A	; 10
    258a:	10 e0       	ldi	r17, 0x00	; 0

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
  {
    uint8_t midiMessageType = ((midiEventBuffer[midiReadIndex].statusByte)>>4);
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	cf 01       	movw	r24, r30
    2590:	88 0f       	add	r24, r24
    2592:	99 1f       	adc	r25, r25
    2594:	e8 0f       	add	r30, r24
    2596:	f9 1f       	adc	r31, r25
    2598:	e7 59       	subi	r30, 0x97	; 151
    259a:	f9 4f       	sbci	r31, 0xF9	; 249
    259c:	80 81       	ld	r24, Z
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    259e:	22 81       	ldd	r18, Z+2	; 0x02
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    25a0:	90 81       	ld	r25, Z
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    25a2:	82 95       	swap	r24
    25a4:	8f 70       	andi	r24, 0x0F	; 15
    25a6:	89 30       	cpi	r24, 0x09	; 9
    25a8:	c9 f5       	brne	.+114    	; 0x261c <midiRead+0xc2>
    25aa:	22 23       	and	r18, r18
    25ac:	b9 f1       	breq	.+110    	; 0x261c <midiRead+0xc2>
    25ae:	9f 70       	andi	r25, 0x0F	; 15
    25b0:	cb 56       	subi	r28, 0x6B	; 107
    25b2:	de 4f       	sbci	r29, 0xFE	; 254
    25b4:	88 81       	ld	r24, Y
    25b6:	c5 59       	subi	r28, 0x95	; 149
    25b8:	d1 40       	sbci	r29, 0x01	; 1
    25ba:	98 13       	cpse	r25, r24
    25bc:	2f c0       	rjmp	.+94     	; 0x261c <midiRead+0xc2>
    25be:	0f 2e       	mov	r0, r31
    25c0:	f9 e8       	ldi	r31, 0x89	; 137
    25c2:	af 2e       	mov	r10, r31
    25c4:	bb 24       	eor	r11, r11
    25c6:	b3 94       	inc	r11
    25c8:	f0 2d       	mov	r31, r0
    25ca:	ac 0e       	add	r10, r28
    25cc:	bd 1e       	adc	r11, r29
    25ce:	ed e0       	ldi	r30, 0x0D	; 13
    25d0:	ae 0e       	add	r10, r30
    25d2:	b1 1c       	adc	r11, r1
    25d4:	6e 01       	movw	r12, r28
    25d6:	f6 e9       	ldi	r31, 0x96	; 150
    25d8:	cf 0e       	add	r12, r31
    25da:	d1 1c       	adc	r13, r1
    {
        for (int i=0; i<16; i++)
        {
          if(midiEventBuffer[midiReadIndex].dataByte[0]==currentGlobals.midiTrackNote[i])
    25dc:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <midiReadIndex>
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	fc 01       	movw	r30, r24
    25e4:	ee 0f       	add	r30, r30
    25e6:	ff 1f       	adc	r31, r31
    25e8:	8e 0f       	add	r24, r30
    25ea:	9f 1f       	adc	r25, r31
    25ec:	fc 01       	movw	r30, r24
    25ee:	e7 59       	subi	r30, 0x97	; 151
    25f0:	f9 4f       	sbci	r31, 0xF9	; 249
    25f2:	91 81       	ldd	r25, Z+1	; 0x01
    25f4:	f5 01       	movw	r30, r10
    25f6:	81 91       	ld	r24, Z+
    25f8:	5f 01       	movw	r10, r30
    25fa:	98 13       	cpse	r25, r24
    25fc:	09 c0       	rjmp	.+18     	; 0x2610 <midiRead+0xb6>
          { //we don't care about velocity, at least not yet.
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
    25fe:	f6 01       	movw	r30, r12
    2600:	20 81       	ld	r18, Z
    2602:	e0 57       	subi	r30, 0x70	; 112
    2604:	f1 09       	sbc	r31, r1
    2606:	40 81       	ld	r20, Z
    2608:	f6 01       	movw	r30, r12
    260a:	60 89       	ldd	r22, Z+16	; 0x10
    260c:	80 a1       	ldd	r24, Z+32	; 0x20
    260e:	a9 d3       	rcall	.+1874   	; 0x2d62 <trackControl>
    2610:	ff ef       	ldi	r31, 0xFF	; 255
    2612:	cf 1a       	sub	r12, r31
    2614:	df 0a       	sbc	r13, r31
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    {
        for (int i=0; i<16; i++)
    2616:	ce 14       	cp	r12, r14
    2618:	df 04       	cpc	r13, r15
    261a:	01 f7       	brne	.-64     	; 0x25dc <midiRead+0x82>
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    261c:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <midiReadIndex>
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	01 96       	adiw	r24, 0x01	; 1
    2624:	b8 01       	movw	r22, r16
    2626:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__divmodhi4>
    262a:	e8 2f       	mov	r30, r24
    262c:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <midiReadIndex>
  UDR3 = data;
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
    2630:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <midiWriteIndex>
    2634:	8e 13       	cpse	r24, r30
    2636:	aa cf       	rjmp	.-172    	; 0x258c <midiRead+0x32>
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
  }
}
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	1f 91       	pop	r17
    263e:	0f 91       	pop	r16
    2640:	ff 90       	pop	r15
    2642:	ef 90       	pop	r14
    2644:	df 90       	pop	r13
    2646:	cf 90       	pop	r12
    2648:	bf 90       	pop	r11
    264a:	af 90       	pop	r10
    264c:	08 95       	ret

0000264e <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    264e:	e2 e0       	ldi	r30, 0x02	; 2
    2650:	f1 e0       	ldi	r31, 0x01	; 1
    2652:	80 81       	ld	r24, Z
    2654:	80 62       	ori	r24, 0x20	; 32
    2656:	80 83       	st	Z, r24
    2658:	85 e0       	ldi	r24, 0x05	; 5
    265a:	8a 95       	dec	r24
    265c:	f1 f7       	brne	.-4      	; 0x265a <enableCycle+0xc>
    265e:	00 00       	nop
    2660:	80 81       	ld	r24, Z
    2662:	8f 7d       	andi	r24, 0xDF	; 223
    2664:	80 83       	st	Z, r24
    2666:	08 95       	ret

00002668 <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
    2668:	e2 e0       	ldi	r30, 0x02	; 2
    266a:	f1 e0       	ldi	r31, 0x01	; 1
    266c:	90 81       	ld	r25, Z
    266e:	9f 7b       	andi	r25, 0xBF	; 191
    2670:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    2672:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
    2674:	ec cf       	rjmp	.-40     	; 0x264e <enableCycle>
    2676:	08 95       	ret

00002678 <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
    2678:	e2 e0       	ldi	r30, 0x02	; 2
    267a:	f1 e0       	ldi	r31, 0x01	; 1
    267c:	90 81       	ld	r25, Z
    267e:	90 64       	ori	r25, 0x40	; 64
    2680:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    2682:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
    2684:	e4 cf       	rjmp	.-56     	; 0x264e <enableCycle>
    2686:	08 95       	ret

00002688 <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRH = 0x60; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
    2688:	80 e6       	ldi	r24, 0x60	; 96
    268a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	DDRC =0xFF; //all pins on the LCD Data Bus.
    268e:	8f ef       	ldi	r24, 0xFF	; 255
    2690:	87 b9       	out	0x07, r24	; 7


	PORTH &= 0B10011111;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
    2692:	e2 e0       	ldi	r30, 0x02	; 2
    2694:	f1 e0       	ldi	r31, 0x01	; 1
    2696:	80 81       	ld	r24, Z
    2698:	8f 79       	andi	r24, 0x9F	; 159
    269a:	80 83       	st	Z, r24

	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
    269c:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    269e:	8f e1       	ldi	r24, 0x1F	; 31
    26a0:	93 e0       	ldi	r25, 0x03	; 3
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	f1 f7       	brne	.-4      	; 0x26a2 <initScreen+0x1a>
    26a6:	00 c0       	rjmp	.+0      	; 0x26a8 <initScreen+0x20>
    26a8:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose


	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    26aa:	8a e2       	ldi	r24, 0x2A	; 42
    26ac:	dd df       	rcall	.-70     	; 0x2668 <command>
	command(0x71);        // Function selection A:
    26ae:	81 e7       	ldi	r24, 0x71	; 113
    26b0:	db df       	rcall	.-74     	; 0x2668 <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
    26b2:	8c e5       	ldi	r24, 0x5C	; 92
    26b4:	e1 df       	rcall	.-62     	; 0x2678 <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    26b6:	88 e2       	ldi	r24, 0x28	; 40
    26b8:	d7 df       	rcall	.-82     	; 0x2668 <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
    26ba:	88 e0       	ldi	r24, 0x08	; 8
    26bc:	d5 df       	rcall	.-86     	; 0x2668 <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    26be:	8a e2       	ldi	r24, 0x2A	; 42
    26c0:	d3 df       	rcall	.-90     	; 0x2668 <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    26c2:	89 e7       	ldi	r24, 0x79	; 121
    26c4:	d1 df       	rcall	.-94     	; 0x2668 <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
    26c6:	85 ed       	ldi	r24, 0xD5	; 213
    26c8:	cf df       	rcall	.-98     	; 0x2668 <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
    26ca:	80 e7       	ldi	r24, 0x70	; 112
    26cc:	cd df       	rcall	.-102    	; 0x2668 <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    26ce:	88 e7       	ldi	r24, 0x78	; 120
    26d0:	cb df       	rcall	.-106    	; 0x2668 <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
    26d2:	89 e0       	ldi	r24, 0x09	; 9
    26d4:	c9 df       	rcall	.-110    	; 0x2668 <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
    26d6:	86 e0       	ldi	r24, 0x06	; 6
    26d8:	c7 df       	rcall	.-114    	; 0x2668 <command>
	command(0x72);        // Function selection B:
    26da:	82 e7       	ldi	r24, 0x72	; 114
    26dc:	c5 df       	rcall	.-118    	; 0x2668 <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
    26de:	8a e0       	ldi	r24, 0x0A	; 10
    26e0:	cb df       	rcall	.-106    	; 0x2678 <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    26e2:	89 e7       	ldi	r24, 0x79	; 121
    26e4:	c1 df       	rcall	.-126    	; 0x2668 <command>
	command(0xDA);        // Set SEG pins hardware configuration:
    26e6:	8a ed       	ldi	r24, 0xDA	; 218
    26e8:	bf df       	rcall	.-130    	; 0x2668 <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
    26ea:	80 e1       	ldi	r24, 0x10	; 16
    26ec:	bd df       	rcall	.-134    	; 0x2668 <command>
	command(0xDC);        // Function selection C:
    26ee:	8c ed       	ldi	r24, 0xDC	; 220
    26f0:	bb df       	rcall	.-138    	; 0x2668 <command>
	command(0x00);        //  internal VSL, GPIO input disable
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	b9 df       	rcall	.-142    	; 0x2668 <command>
	command(0x81);        // Set contrast control:
    26f6:	81 e8       	ldi	r24, 0x81	; 129
    26f8:	b7 df       	rcall	.-146    	; 0x2668 <command>
    26fa:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
    26fc:	b5 df       	rcall	.-150    	; 0x2668 <command>
    26fe:	89 ed       	ldi	r24, 0xD9	; 217
    2700:	b3 df       	rcall	.-154    	; 0x2668 <command>
	command(0xD9);        // Set phase length:
    2702:	81 ef       	ldi	r24, 0xF1	; 241
    2704:	b1 df       	rcall	.-158    	; 0x2668 <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
    2706:	8b ed       	ldi	r24, 0xDB	; 219
    2708:	af df       	rcall	.-162    	; 0x2668 <command>
    270a:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
    270c:	ad df       	rcall	.-166    	; 0x2668 <command>
    270e:	88 e7       	ldi	r24, 0x78	; 120
    2710:	ab df       	rcall	.-170    	; 0x2668 <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
    2712:	88 e2       	ldi	r24, 0x28	; 40
    2714:	a9 df       	rcall	.-174    	; 0x2668 <command>
    2716:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    2718:	a7 df       	rcall	.-178    	; 0x2668 <command>
    271a:	8f e3       	ldi	r24, 0x3F	; 63
    271c:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <initScreen+0x96>
    2722:	00 c0       	rjmp	.+0      	; 0x2724 <initScreen+0x9c>
	command(0x01);        // Clear display
    2724:	00 00       	nop
    2726:	80 e8       	ldi	r24, 0x80	; 128
    2728:	9f df       	rcall	.-194    	; 0x2668 <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    272a:	8c e0       	ldi	r24, 0x0C	; 12
    272c:	9d df       	rcall	.-198    	; 0x2668 <command>
    272e:	9f ef       	ldi	r25, 0xFF	; 255
    2730:	24 e3       	ldi	r18, 0x34	; 52
    2732:	8c e0       	ldi	r24, 0x0C	; 12
    2734:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required

	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
    2736:	20 40       	sbci	r18, 0x00	; 0
    2738:	80 40       	sbci	r24, 0x00	; 0
    273a:	e1 f7       	brne	.-8      	; 0x2734 <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
    273c:	00 c0       	rjmp	.+0      	; 0x273e <initScreen+0xb6>
    273e:	00 00       	nop
    2740:	08 95       	ret

00002742 <outputS>:
    2742:	0f 93       	push	r16
    2744:	1f 93       	push	r17
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	8c 01       	movw	r16, r24
    274c:	fb 01       	movw	r30, r22
    274e:	ff 27       	eor	r31, r31
    2750:	e6 5f       	subi	r30, 0xF6	; 246
    2752:	fd 4f       	sbci	r31, 0xFD	; 253
    2754:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
    2756:	88 df       	rcall	.-240    	; 0x2668 <command>
    2758:	e8 01       	movw	r28, r16
    275a:	0c 5e       	subi	r16, 0xEC	; 236
    275c:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
    275e:	89 91       	ld	r24, Y+
    2760:	8b df       	rcall	.-234    	; 0x2678 <data>
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
    2762:	c0 17       	cp	r28, r16
    2764:	d1 07       	cpc	r29, r17
    2766:	d9 f7       	brne	.-10     	; 0x275e <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	08 95       	ret

00002772 <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    2772:	cf 93       	push	r28
    2774:	df 93       	push	r29
    2776:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch(numCharacters)
    2778:	43 30       	cpi	r20, 0x03	; 3
    277a:	09 f4       	brne	.+2      	; 0x277e <numPrinter+0xc>
    277c:	54 c0       	rjmp	.+168    	; 0x2826 <numPrinter+0xb4>
    277e:	28 f4       	brcc	.+10     	; 0x278a <numPrinter+0x18>
    2780:	41 30       	cpi	r20, 0x01	; 1
    2782:	51 f0       	breq	.+20     	; 0x2798 <numPrinter+0x26>
    2784:	42 30       	cpi	r20, 0x02	; 2
    2786:	29 f1       	breq	.+74     	; 0x27d2 <numPrinter+0x60>
    2788:	b7 c1       	rjmp	.+878    	; 0x2af8 <numPrinter+0x386>
    278a:	44 30       	cpi	r20, 0x04	; 4
    278c:	09 f4       	brne	.+2      	; 0x2790 <numPrinter+0x1e>
    278e:	95 c0       	rjmp	.+298    	; 0x28ba <numPrinter+0x148>
    2790:	45 30       	cpi	r20, 0x05	; 5
    2792:	09 f4       	brne	.+2      	; 0x2796 <numPrinter+0x24>
    2794:	0a c1       	rjmp	.+532    	; 0x29aa <numPrinter+0x238>
    2796:	b0 c1       	rjmp	.+864    	; 0x2af8 <numPrinter+0x386>
		case 0:
		break;

		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
    2798:	ec 01       	movw	r28, r24
    279a:	c6 0f       	add	r28, r22
    279c:	d1 1d       	adc	r29, r1
    279e:	ad ec       	ldi	r26, 0xCD	; 205
    27a0:	bc ec       	ldi	r27, 0xCC	; 204
    27a2:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    27a6:	96 95       	lsr	r25
    27a8:	87 95       	ror	r24
    27aa:	96 95       	lsr	r25
    27ac:	87 95       	ror	r24
    27ae:	96 95       	lsr	r25
    27b0:	87 95       	ror	r24
    27b2:	9c 01       	movw	r18, r24
    27b4:	22 0f       	add	r18, r18
    27b6:	33 1f       	adc	r19, r19
    27b8:	88 0f       	add	r24, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	88 0f       	add	r24, r24
    27be:	99 1f       	adc	r25, r25
    27c0:	88 0f       	add	r24, r24
    27c2:	99 1f       	adc	r25, r25
    27c4:	82 0f       	add	r24, r18
    27c6:	93 1f       	adc	r25, r19
    27c8:	e8 1b       	sub	r30, r24
    27ca:	f9 0b       	sbc	r31, r25
    27cc:	e0 5d       	subi	r30, 0xD0	; 208
    27ce:	e8 83       	st	Y, r30
		break;
    27d0:	93 c1       	rjmp	.+806    	; 0x2af8 <numPrinter+0x386>

		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
    27d2:	ec 01       	movw	r28, r24
    27d4:	c6 0f       	add	r28, r22
    27d6:	d1 1d       	adc	r29, r1
    27d8:	ad ec       	ldi	r26, 0xCD	; 205
    27da:	bc ec       	ldi	r27, 0xCC	; 204
    27dc:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    27e0:	96 95       	lsr	r25
    27e2:	87 95       	ror	r24
    27e4:	96 95       	lsr	r25
    27e6:	87 95       	ror	r24
    27e8:	96 95       	lsr	r25
    27ea:	87 95       	ror	r24
    27ec:	9c 01       	movw	r18, r24
    27ee:	22 0f       	add	r18, r18
    27f0:	33 1f       	adc	r19, r19
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	88 0f       	add	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	82 0f       	add	r24, r18
    2800:	93 1f       	adc	r25, r19
    2802:	9f 01       	movw	r18, r30
    2804:	28 1b       	sub	r18, r24
    2806:	39 0b       	sbc	r19, r25
    2808:	c9 01       	movw	r24, r18
    280a:	80 5d       	subi	r24, 0xD0	; 208
    280c:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
    280e:	9f 01       	movw	r18, r30
    2810:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    2814:	96 95       	lsr	r25
    2816:	87 95       	ror	r24
    2818:	96 95       	lsr	r25
    281a:	87 95       	ror	r24
    281c:	96 95       	lsr	r25
    281e:	87 95       	ror	r24
    2820:	80 5d       	subi	r24, 0xD0	; 208
    2822:	88 83       	st	Y, r24
		break;
    2824:	69 c1       	rjmp	.+722    	; 0x2af8 <numPrinter+0x386>

		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
    2826:	ec 01       	movw	r28, r24
    2828:	c6 0f       	add	r28, r22
    282a:	d1 1d       	adc	r29, r1
    282c:	ad ec       	ldi	r26, 0xCD	; 205
    282e:	bc ec       	ldi	r27, 0xCC	; 204
    2830:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    2834:	96 95       	lsr	r25
    2836:	87 95       	ror	r24
    2838:	96 95       	lsr	r25
    283a:	87 95       	ror	r24
    283c:	96 95       	lsr	r25
    283e:	87 95       	ror	r24
    2840:	9c 01       	movw	r18, r24
    2842:	22 0f       	add	r18, r18
    2844:	33 1f       	adc	r19, r19
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	88 0f       	add	r24, r24
    284c:	99 1f       	adc	r25, r25
    284e:	88 0f       	add	r24, r24
    2850:	99 1f       	adc	r25, r25
    2852:	82 0f       	add	r24, r18
    2854:	93 1f       	adc	r25, r19
    2856:	9f 01       	movw	r18, r30
    2858:	28 1b       	sub	r18, r24
    285a:	39 0b       	sbc	r19, r25
    285c:	c9 01       	movw	r24, r18
    285e:	80 5d       	subi	r24, 0xD0	; 208
    2860:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = tensPlace;
    2862:	af 01       	movw	r20, r30
    2864:	56 95       	lsr	r21
    2866:	47 95       	ror	r20
    2868:	56 95       	lsr	r21
    286a:	47 95       	ror	r20
    286c:	9a 01       	movw	r18, r20
    286e:	ab e7       	ldi	r26, 0x7B	; 123
    2870:	b4 e1       	ldi	r27, 0x14	; 20
    2872:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    2876:	96 95       	lsr	r25
    2878:	87 95       	ror	r24
    287a:	64 e6       	ldi	r22, 0x64	; 100
    287c:	68 9f       	mul	r22, r24
    287e:	90 01       	movw	r18, r0
    2880:	69 9f       	mul	r22, r25
    2882:	30 0d       	add	r19, r0
    2884:	11 24       	eor	r1, r1
    2886:	cf 01       	movw	r24, r30
    2888:	82 1b       	sub	r24, r18
    288a:	93 0b       	sbc	r25, r19
    288c:	9c 01       	movw	r18, r24
    288e:	ad ec       	ldi	r26, 0xCD	; 205
    2890:	bc ec       	ldi	r27, 0xCC	; 204
    2892:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    2896:	96 95       	lsr	r25
    2898:	87 95       	ror	r24
    289a:	96 95       	lsr	r25
    289c:	87 95       	ror	r24
    289e:	96 95       	lsr	r25
    28a0:	87 95       	ror	r24
    28a2:	80 5d       	subi	r24, 0xD0	; 208
    28a4:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
    28a6:	9a 01       	movw	r18, r20
    28a8:	ab e7       	ldi	r26, 0x7B	; 123
    28aa:	b4 e1       	ldi	r27, 0x14	; 20
    28ac:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    28b0:	96 95       	lsr	r25
    28b2:	87 95       	ror	r24
    28b4:	80 5d       	subi	r24, 0xD0	; 208
    28b6:	88 83       	st	Y, r24
		break;
    28b8:	1f c1       	rjmp	.+574    	; 0x2af8 <numPrinter+0x386>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
    28ba:	ec 01       	movw	r28, r24
    28bc:	c6 0f       	add	r28, r22
    28be:	d1 1d       	adc	r29, r1
    28c0:	ad ec       	ldi	r26, 0xCD	; 205
    28c2:	bc ec       	ldi	r27, 0xCC	; 204
    28c4:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    28c8:	96 95       	lsr	r25
    28ca:	87 95       	ror	r24
    28cc:	96 95       	lsr	r25
    28ce:	87 95       	ror	r24
    28d0:	96 95       	lsr	r25
    28d2:	87 95       	ror	r24
    28d4:	9c 01       	movw	r18, r24
    28d6:	22 0f       	add	r18, r18
    28d8:	33 1f       	adc	r19, r19
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	82 0f       	add	r24, r18
    28e8:	93 1f       	adc	r25, r19
    28ea:	9f 01       	movw	r18, r30
    28ec:	28 1b       	sub	r18, r24
    28ee:	39 0b       	sbc	r19, r25
    28f0:	c9 01       	movw	r24, r18
    28f2:	80 5d       	subi	r24, 0xD0	; 208
    28f4:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
    28f6:	9f 01       	movw	r18, r30
    28f8:	36 95       	lsr	r19
    28fa:	27 95       	ror	r18
    28fc:	36 95       	lsr	r19
    28fe:	27 95       	ror	r18
    2900:	ab e7       	ldi	r26, 0x7B	; 123
    2902:	b4 e1       	ldi	r27, 0x14	; 20
    2904:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    2908:	96 95       	lsr	r25
    290a:	87 95       	ror	r24
    290c:	44 e6       	ldi	r20, 0x64	; 100
    290e:	48 9f       	mul	r20, r24
    2910:	90 01       	movw	r18, r0
    2912:	49 9f       	mul	r20, r25
    2914:	30 0d       	add	r19, r0
    2916:	11 24       	eor	r1, r1
    2918:	cf 01       	movw	r24, r30
    291a:	82 1b       	sub	r24, r18
    291c:	93 0b       	sbc	r25, r19
    291e:	9c 01       	movw	r18, r24
    2920:	ad ec       	ldi	r26, 0xCD	; 205
    2922:	bc ec       	ldi	r27, 0xCC	; 204
    2924:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    2928:	96 95       	lsr	r25
    292a:	87 95       	ror	r24
    292c:	96 95       	lsr	r25
    292e:	87 95       	ror	r24
    2930:	96 95       	lsr	r25
    2932:	87 95       	ror	r24
    2934:	80 5d       	subi	r24, 0xD0	; 208
    2936:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = hunderedsPlace;
    2938:	af 01       	movw	r20, r30
    293a:	56 95       	lsr	r21
    293c:	47 95       	ror	r20
    293e:	56 95       	lsr	r21
    2940:	47 95       	ror	r20
    2942:	56 95       	lsr	r21
    2944:	47 95       	ror	r20
    2946:	9a 01       	movw	r18, r20
    2948:	a5 ec       	ldi	r26, 0xC5	; 197
    294a:	b0 e2       	ldi	r27, 0x20	; 32
    294c:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    2950:	92 95       	swap	r25
    2952:	82 95       	swap	r24
    2954:	8f 70       	andi	r24, 0x0F	; 15
    2956:	89 27       	eor	r24, r25
    2958:	9f 70       	andi	r25, 0x0F	; 15
    295a:	89 27       	eor	r24, r25
    295c:	68 ee       	ldi	r22, 0xE8	; 232
    295e:	73 e0       	ldi	r23, 0x03	; 3
    2960:	86 9f       	mul	r24, r22
    2962:	90 01       	movw	r18, r0
    2964:	87 9f       	mul	r24, r23
    2966:	30 0d       	add	r19, r0
    2968:	96 9f       	mul	r25, r22
    296a:	30 0d       	add	r19, r0
    296c:	11 24       	eor	r1, r1
    296e:	cf 01       	movw	r24, r30
    2970:	82 1b       	sub	r24, r18
    2972:	93 0b       	sbc	r25, r19
    2974:	9c 01       	movw	r18, r24
    2976:	36 95       	lsr	r19
    2978:	27 95       	ror	r18
    297a:	36 95       	lsr	r19
    297c:	27 95       	ror	r18
    297e:	ab e7       	ldi	r26, 0x7B	; 123
    2980:	b4 e1       	ldi	r27, 0x14	; 20
    2982:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    2986:	96 95       	lsr	r25
    2988:	87 95       	ror	r24
    298a:	80 5d       	subi	r24, 0xD0	; 208
    298c:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
    298e:	9a 01       	movw	r18, r20
    2990:	a5 ec       	ldi	r26, 0xC5	; 197
    2992:	b0 e2       	ldi	r27, 0x20	; 32
    2994:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    2998:	92 95       	swap	r25
    299a:	82 95       	swap	r24
    299c:	8f 70       	andi	r24, 0x0F	; 15
    299e:	89 27       	eor	r24, r25
    29a0:	9f 70       	andi	r25, 0x0F	; 15
    29a2:	89 27       	eor	r24, r25
    29a4:	80 5d       	subi	r24, 0xD0	; 208
    29a6:	88 83       	st	Y, r24
		break;
    29a8:	a7 c0       	rjmp	.+334    	; 0x2af8 <numPrinter+0x386>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
    29aa:	ec 01       	movw	r28, r24
    29ac:	c6 0f       	add	r28, r22
    29ae:	d1 1d       	adc	r29, r1
    29b0:	ad ec       	ldi	r26, 0xCD	; 205
    29b2:	bc ec       	ldi	r27, 0xCC	; 204
    29b4:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    29b8:	96 95       	lsr	r25
    29ba:	87 95       	ror	r24
    29bc:	96 95       	lsr	r25
    29be:	87 95       	ror	r24
    29c0:	96 95       	lsr	r25
    29c2:	87 95       	ror	r24
    29c4:	9c 01       	movw	r18, r24
    29c6:	22 0f       	add	r18, r18
    29c8:	33 1f       	adc	r19, r19
    29ca:	88 0f       	add	r24, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	88 0f       	add	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	88 0f       	add	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	82 0f       	add	r24, r18
    29d8:	93 1f       	adc	r25, r19
    29da:	9f 01       	movw	r18, r30
    29dc:	28 1b       	sub	r18, r24
    29de:	39 0b       	sbc	r19, r25
    29e0:	c9 01       	movw	r24, r18
    29e2:	80 5d       	subi	r24, 0xD0	; 208
    29e4:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
    29e6:	9f 01       	movw	r18, r30
    29e8:	36 95       	lsr	r19
    29ea:	27 95       	ror	r18
    29ec:	36 95       	lsr	r19
    29ee:	27 95       	ror	r18
    29f0:	ab e7       	ldi	r26, 0x7B	; 123
    29f2:	b4 e1       	ldi	r27, 0x14	; 20
    29f4:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    29f8:	96 95       	lsr	r25
    29fa:	87 95       	ror	r24
    29fc:	44 e6       	ldi	r20, 0x64	; 100
    29fe:	48 9f       	mul	r20, r24
    2a00:	90 01       	movw	r18, r0
    2a02:	49 9f       	mul	r20, r25
    2a04:	30 0d       	add	r19, r0
    2a06:	11 24       	eor	r1, r1
    2a08:	cf 01       	movw	r24, r30
    2a0a:	82 1b       	sub	r24, r18
    2a0c:	93 0b       	sbc	r25, r19
    2a0e:	9c 01       	movw	r18, r24
    2a10:	ad ec       	ldi	r26, 0xCD	; 205
    2a12:	bc ec       	ldi	r27, 0xCC	; 204
    2a14:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    2a18:	96 95       	lsr	r25
    2a1a:	87 95       	ror	r24
    2a1c:	96 95       	lsr	r25
    2a1e:	87 95       	ror	r24
    2a20:	96 95       	lsr	r25
    2a22:	87 95       	ror	r24
    2a24:	80 5d       	subi	r24, 0xD0	; 208
    2a26:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
    2a28:	9f 01       	movw	r18, r30
    2a2a:	36 95       	lsr	r19
    2a2c:	27 95       	ror	r18
    2a2e:	36 95       	lsr	r19
    2a30:	27 95       	ror	r18
    2a32:	36 95       	lsr	r19
    2a34:	27 95       	ror	r18
    2a36:	a5 ec       	ldi	r26, 0xC5	; 197
    2a38:	b0 e2       	ldi	r27, 0x20	; 32
    2a3a:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    2a3e:	92 95       	swap	r25
    2a40:	82 95       	swap	r24
    2a42:	8f 70       	andi	r24, 0x0F	; 15
    2a44:	89 27       	eor	r24, r25
    2a46:	9f 70       	andi	r25, 0x0F	; 15
    2a48:	89 27       	eor	r24, r25
    2a4a:	48 ee       	ldi	r20, 0xE8	; 232
    2a4c:	53 e0       	ldi	r21, 0x03	; 3
    2a4e:	84 9f       	mul	r24, r20
    2a50:	90 01       	movw	r18, r0
    2a52:	85 9f       	mul	r24, r21
    2a54:	30 0d       	add	r19, r0
    2a56:	94 9f       	mul	r25, r20
    2a58:	30 0d       	add	r19, r0
    2a5a:	11 24       	eor	r1, r1
    2a5c:	cf 01       	movw	r24, r30
    2a5e:	82 1b       	sub	r24, r18
    2a60:	93 0b       	sbc	r25, r19
    2a62:	9c 01       	movw	r18, r24
    2a64:	36 95       	lsr	r19
    2a66:	27 95       	ror	r18
    2a68:	36 95       	lsr	r19
    2a6a:	27 95       	ror	r18
    2a6c:	ab e7       	ldi	r26, 0x7B	; 123
    2a6e:	b4 e1       	ldi	r27, 0x14	; 20
    2a70:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    2a74:	96 95       	lsr	r25
    2a76:	87 95       	ror	r24
    2a78:	80 5d       	subi	r24, 0xD0	; 208
    2a7a:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
    2a7c:	af 01       	movw	r20, r30
    2a7e:	52 95       	swap	r21
    2a80:	42 95       	swap	r20
    2a82:	4f 70       	andi	r20, 0x0F	; 15
    2a84:	45 27       	eor	r20, r21
    2a86:	5f 70       	andi	r21, 0x0F	; 15
    2a88:	45 27       	eor	r20, r21
    2a8a:	9a 01       	movw	r18, r20
    2a8c:	a7 e4       	ldi	r26, 0x47	; 71
    2a8e:	b3 e0       	ldi	r27, 0x03	; 3
    2a90:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    2a94:	96 95       	lsr	r25
    2a96:	87 95       	ror	r24
    2a98:	96 95       	lsr	r25
    2a9a:	87 95       	ror	r24
    2a9c:	96 95       	lsr	r25
    2a9e:	87 95       	ror	r24
    2aa0:	60 e1       	ldi	r22, 0x10	; 16
    2aa2:	77 e2       	ldi	r23, 0x27	; 39
    2aa4:	86 9f       	mul	r24, r22
    2aa6:	90 01       	movw	r18, r0
    2aa8:	87 9f       	mul	r24, r23
    2aaa:	30 0d       	add	r19, r0
    2aac:	96 9f       	mul	r25, r22
    2aae:	30 0d       	add	r19, r0
    2ab0:	11 24       	eor	r1, r1
    2ab2:	cf 01       	movw	r24, r30
    2ab4:	82 1b       	sub	r24, r18
    2ab6:	93 0b       	sbc	r25, r19
    2ab8:	9c 01       	movw	r18, r24
    2aba:	36 95       	lsr	r19
    2abc:	27 95       	ror	r18
    2abe:	36 95       	lsr	r19
    2ac0:	27 95       	ror	r18
    2ac2:	36 95       	lsr	r19
    2ac4:	27 95       	ror	r18
    2ac6:	a5 ec       	ldi	r26, 0xC5	; 197
    2ac8:	b0 e2       	ldi	r27, 0x20	; 32
    2aca:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    2ace:	92 95       	swap	r25
    2ad0:	82 95       	swap	r24
    2ad2:	8f 70       	andi	r24, 0x0F	; 15
    2ad4:	89 27       	eor	r24, r25
    2ad6:	9f 70       	andi	r25, 0x0F	; 15
    2ad8:	89 27       	eor	r24, r25
    2ada:	80 5d       	subi	r24, 0xD0	; 208
    2adc:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
    2ade:	9a 01       	movw	r18, r20
    2ae0:	a7 e4       	ldi	r26, 0x47	; 71
    2ae2:	b3 e0       	ldi	r27, 0x03	; 3
    2ae4:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__umulhisi3>
    2ae8:	96 95       	lsr	r25
    2aea:	87 95       	ror	r24
    2aec:	96 95       	lsr	r25
    2aee:	87 95       	ror	r24
    2af0:	96 95       	lsr	r25
    2af2:	87 95       	ror	r24
    2af4:	80 5d       	subi	r24, 0xD0	; 208
    2af6:	88 83       	st	Y, r24
		break;

	}


}
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	08 95       	ret

00002afe <midiNotePrinter>:

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
    2afe:	9c 01       	movw	r18, r24
    2b00:	a6 2f       	mov	r26, r22
	char printSharp = 0;
	uint8_t valueSwitch = 0;
	//numbers will always go from B to C, and have 12 distinct values. 
	//we can get our number from this with division. 
	//midi note C0 starts at 12. So, we'll need to do some math there. 
	printNumber = (noteNumber/12)+47; 
    2b02:	eb ea       	ldi	r30, 0xAB	; 171
    2b04:	4e 9f       	mul	r20, r30
    2b06:	e1 2d       	mov	r30, r1
    2b08:	11 24       	eor	r1, r1
    2b0a:	e6 95       	lsr	r30
    2b0c:	e6 95       	lsr	r30
    2b0e:	e6 95       	lsr	r30
    2b10:	9f e2       	ldi	r25, 0x2F	; 47
    2b12:	9e 0f       	add	r25, r30
	
	//theres a weird wrap around with note numbers here. Since there isn't really an easy math patern we can take advantage of. 
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
    2b14:	8e 2f       	mov	r24, r30
    2b16:	88 0f       	add	r24, r24
    2b18:	e8 0f       	add	r30, r24
    2b1a:	ee 0f       	add	r30, r30
    2b1c:	ee 0f       	add	r30, r30
    2b1e:	4e 1b       	sub	r20, r30
    2b20:	50 e0       	ldi	r21, 0x00	; 0
    2b22:	4c 30       	cpi	r20, 0x0C	; 12
    2b24:	51 05       	cpc	r21, r1
    2b26:	58 f5       	brcc	.+86     	; 0x2b7e <midiNotePrinter+0x80>
    2b28:	fa 01       	movw	r30, r20
    2b2a:	88 27       	eor	r24, r24
    2b2c:	e8 51       	subi	r30, 0x18	; 24
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	8f 4f       	sbci	r24, 0xFF	; 255
    2b32:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__tablejump2__>
	{
		
		case 0:
		printLetter = 'C';
		printSharp = ' ';
    2b36:	80 e2       	ldi	r24, 0x20	; 32
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
	{
		
		case 0:
		printLetter = 'C';
    2b38:	43 e4       	ldi	r20, 0x43	; 67
    2b3a:	23 c0       	rjmp	.+70     	; 0x2b82 <midiNotePrinter+0x84>
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
		printSharp = '#';
    2b3c:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'C';
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
    2b3e:	43 e4       	ldi	r20, 0x43	; 67
		printSharp = '#';
		break;
    2b40:	20 c0       	rjmp	.+64     	; 0x2b82 <midiNotePrinter+0x84>
		
		case 2:
		printLetter = 'D';
		printSharp = ' ';
    2b42:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'C';
		printSharp = '#';
		break;
		
		case 2:
		printLetter = 'D';
    2b44:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = ' ';
		break;
    2b46:	1d c0       	rjmp	.+58     	; 0x2b82 <midiNotePrinter+0x84>
		
		case 3:
		printLetter = 'D';
		printSharp = '#';
    2b48:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'D';
		printSharp = ' ';
		break;
		
		case 3:
		printLetter = 'D';
    2b4a:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = '#';
		break;
    2b4c:	1a c0       	rjmp	.+52     	; 0x2b82 <midiNotePrinter+0x84>
		
		case 4:
		printLetter = 'E';
		printSharp = ' ';
    2b4e:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'D';
		printSharp = '#';
		break;
		
		case 4:
		printLetter = 'E';
    2b50:	45 e4       	ldi	r20, 0x45	; 69
		printSharp = ' ';
		break;
    2b52:	17 c0       	rjmp	.+46     	; 0x2b82 <midiNotePrinter+0x84>
		
		case 5:
		printLetter = 'F';
		printSharp = ' ';
    2b54:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'E';
		printSharp = ' ';
		break;
		
		case 5:
		printLetter = 'F';
    2b56:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = ' ';
		break;
    2b58:	14 c0       	rjmp	.+40     	; 0x2b82 <midiNotePrinter+0x84>
		
		case 6:
		printLetter = 'F';
		printSharp = '#';
    2b5a:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'F';
		printSharp = ' ';
		break;
		
		case 6:
		printLetter = 'F';
    2b5c:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = '#';
		break;
    2b5e:	11 c0       	rjmp	.+34     	; 0x2b82 <midiNotePrinter+0x84>
		
		case 7:
		printLetter = 'G';
		printSharp = ' ';
    2b60:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'F';
		printSharp = '#';
		break;
		
		case 7:
		printLetter = 'G';
    2b62:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = ' ';
		break;
    2b64:	0e c0       	rjmp	.+28     	; 0x2b82 <midiNotePrinter+0x84>
		
		case 8:
		printLetter = 'G';
		printSharp = '#';
    2b66:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'G';
		printSharp = ' ';
		break;
		
		case 8:
		printLetter = 'G';
    2b68:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = '#';
		break;
    2b6a:	0b c0       	rjmp	.+22     	; 0x2b82 <midiNotePrinter+0x84>
		
		case 9:
		printLetter = 'A';
		printSharp = ' ';
    2b6c:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'G';
		printSharp = '#';
		break;
		
		case 9:
		printLetter = 'A';
    2b6e:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = ' ';
		break;
    2b70:	08 c0       	rjmp	.+16     	; 0x2b82 <midiNotePrinter+0x84>
		
		case 10:
		printLetter = 'A';
		printSharp = '#';
    2b72:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'A';
		printSharp = ' ';
		break;
		
		case 10:
		printLetter = 'A';
    2b74:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = '#';
		break;
    2b76:	05 c0       	rjmp	.+10     	; 0x2b82 <midiNotePrinter+0x84>
		
		case 11:
		printLetter = 'B';
		printSharp = ' ';
    2b78:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'A';
		printSharp = '#';
		break;
		
		case 11:
		printLetter = 'B';
    2b7a:	42 e4       	ldi	r20, 0x42	; 66
		printSharp = ' ';
		break;
    2b7c:	02 c0       	rjmp	.+4      	; 0x2b82 <midiNotePrinter+0x84>
void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
	char printNumber = 0;
	char printSharp = 0;
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
}

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
    2b80:	40 e0       	ldi	r20, 0x00	; 0
		printLetter = 'B';
		printSharp = ' ';
		break;
		
	}
	charArray[startingPosition] = printLetter;
    2b82:	f9 01       	movw	r30, r18
    2b84:	ea 0f       	add	r30, r26
    2b86:	f1 1d       	adc	r31, r1
    2b88:	40 83       	st	Z, r20
	charArray[startingPosition+1]= printSharp;
    2b8a:	81 83       	std	Z+1, r24	; 0x01
	charArray[startingPosition+2]= printNumber;
    2b8c:	92 83       	std	Z+2, r25	; 0x02
    2b8e:	08 95       	ret

00002b90 <updateSequencer>:
//	clockCounter++;
	//we don't want to do anything else here.
//}

void updateSequencer(Pattern sequencerPattern, Globals *currentGlobals)
{
    2b90:	ef 92       	push	r14
    2b92:	ff 92       	push	r15
    2b94:	1f 93       	push	r17
    2b96:	cf 93       	push	r28
    2b98:	df 93       	push	r29
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
	uint16_t BPMvar = 150000/(sequencerPattern.patternBPM);

	if(currentGlobals->clockCounter>=BPMvar && currentGlobals->playState) //if playstate is on, play next note in sequence.
    2b9e:	cc 57       	subi	r28, 0x7C	; 124
    2ba0:	de 4f       	sbci	r29, 0xFE	; 254
    2ba2:	e8 80       	ld	r14, Y
    2ba4:	f9 80       	ldd	r15, Y+1	; 0x01
    2ba6:	c4 58       	subi	r28, 0x84	; 132
    2ba8:	d1 40       	sbci	r29, 0x01	; 1
    2baa:	cf 52       	subi	r28, 0x2F	; 47
    2bac:	df 4f       	sbci	r29, 0xFF	; 255
    2bae:	28 81       	ld	r18, Y
    2bb0:	39 81       	ldd	r19, Y+1	; 0x01
    2bb2:	c1 5d       	subi	r28, 0xD1	; 209
    2bb4:	d0 40       	sbci	r29, 0x00	; 0
    2bb6:	40 e0       	ldi	r20, 0x00	; 0
    2bb8:	50 e0       	ldi	r21, 0x00	; 0
    2bba:	60 ef       	ldi	r22, 0xF0	; 240
    2bbc:	79 e4       	ldi	r23, 0x49	; 73
    2bbe:	82 e0       	ldi	r24, 0x02	; 2
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <__divmodsi4>
    2bc6:	f7 01       	movw	r30, r14
    2bc8:	e9 51       	subi	r30, 0x19	; 25
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	80 81       	ld	r24, Z
    2bce:	91 81       	ldd	r25, Z+1	; 0x01
    2bd0:	82 17       	cp	r24, r18
    2bd2:	93 07       	cpc	r25, r19
    2bd4:	08 f4       	brcc	.+2      	; 0x2bd8 <updateSequencer+0x48>
    2bd6:	41 c0       	rjmp	.+130    	; 0x2c5a <updateSequencer+0xca>
    2bd8:	f7 01       	movw	r30, r14
    2bda:	87 81       	ldd	r24, Z+7	; 0x07
    2bdc:	88 23       	and	r24, r24
    2bde:	b1 f1       	breq	.+108    	; 0x2c4c <updateSequencer+0xbc>
	{
		//this will be where we play samples
		currentGlobals->clockCounter = 0;
    2be0:	e9 51       	subi	r30, 0x19	; 25
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	11 82       	std	Z+1, r1	; 0x01
    2be6:	10 82       	st	Z, r1
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
    2be8:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <currentPlayStep>
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	ee 0f       	add	r30, r30
    2bf0:	ff 1f       	adc	r31, r31
    2bf2:	89 e0       	ldi	r24, 0x09	; 9
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	8c 0f       	add	r24, r28
    2bf8:	9d 1f       	adc	r25, r29
    2bfa:	e8 0f       	add	r30, r24
    2bfc:	f9 1f       	adc	r31, r25
    2bfe:	e5 50       	subi	r30, 0x05	; 5
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	e0 80       	ld	r14, Z
    2c04:	f1 80       	ldd	r15, Z+1	; 0x01
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
    2c06:	10 e0       	ldi	r17, 0x00	; 0
		{//we're going to loop through all of the possible tracks, and trigger them
			if((parseStep&1)==1)
    2c08:	e0 fe       	sbrs	r14, 0
    2c0a:	07 c0       	rjmp	.+14     	; 0x2c1a <updateSequencer+0x8a>
			{
				//trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
				playTrack(&sequencerPattern, &currentGlobals, sc);
    2c0c:	41 2f       	mov	r20, r17
    2c0e:	be 01       	movw	r22, r28
    2c10:	6c 57       	subi	r22, 0x7C	; 124
    2c12:	7e 4f       	sbci	r23, 0xFE	; 254
    2c14:	ce 01       	movw	r24, r28
    2c16:	09 96       	adiw	r24, 0x09	; 9
    2c18:	65 d1       	rcall	.+714    	; 0x2ee4 <playTrack>
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
    2c1a:	f6 94       	lsr	r15
    2c1c:	e7 94       	ror	r14
	if(currentGlobals->clockCounter>=BPMvar && currentGlobals->playState) //if playstate is on, play next note in sequence.
	{
		//this will be where we play samples
		currentGlobals->clockCounter = 0;
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
    2c1e:	1f 5f       	subi	r17, 0xFF	; 255
    2c20:	10 31       	cpi	r17, 0x10	; 16
    2c22:	91 f7       	brne	.-28     	; 0x2c08 <updateSequencer+0x78>
				//trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
				playTrack(&sequencerPattern, &currentGlobals, sc);
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
		}
		currentPlayStep = currentPlayStep+1;
    2c24:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <currentPlayStep>
    2c28:	8f 5f       	subi	r24, 0xFF	; 255
    2c2a:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <currentPlayStep>
		if(currentPlayStep>(sequencerPattern.numSteps-1))
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	cd 52       	subi	r28, 0x2D	; 45
    2c32:	df 4f       	sbci	r29, 0xFF	; 255
    2c34:	28 81       	ld	r18, Y
    2c36:	c3 5d       	subi	r28, 0xD3	; 211
    2c38:	d0 40       	sbci	r29, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	21 50       	subi	r18, 0x01	; 1
    2c3e:	31 09       	sbc	r19, r1
    2c40:	28 17       	cp	r18, r24
    2c42:	39 07       	cpc	r19, r25
    2c44:	54 f4       	brge	.+20     	; 0x2c5a <updateSequencer+0xca>
		{
			currentPlayStep=0; // don't play more steps than are in the sequence.
    2c46:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <currentPlayStep>
    2c4a:	07 c0       	rjmp	.+14     	; 0x2c5a <updateSequencer+0xca>
		}
		
	}else if(currentGlobals->clockCounter>=BPMvar && !currentGlobals->playState)
	{ 
		currentPlayStep=0;
    2c4c:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <currentPlayStep>
		currentGlobals->clockCounter = 0;
    2c50:	f7 01       	movw	r30, r14
    2c52:	e9 51       	subi	r30, 0x19	; 25
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	11 82       	std	Z+1, r1	; 0x01
    2c58:	10 82       	st	Z, r1
	}
	
}
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	1f 91       	pop	r17
    2c60:	ff 90       	pop	r15
    2c62:	ef 90       	pop	r14
    2c64:	08 95       	ret

00002c66 <__vector_27>:
char serial0Buffer[TX_BUFFER_SIZE];
int serialReadPos = 0;
int serialWritePos = 0;

ISR (USART0_TX_vect)
{
    2c66:	1f 92       	push	r1
    2c68:	0f 92       	push	r0
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	0f 92       	push	r0
    2c6e:	11 24       	eor	r1, r1
    2c70:	0b b6       	in	r0, 0x3b	; 59
    2c72:	0f 92       	push	r0
    2c74:	2f 93       	push	r18
    2c76:	3f 93       	push	r19
    2c78:	8f 93       	push	r24
    2c7a:	9f 93       	push	r25
    2c7c:	ef 93       	push	r30
    2c7e:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
    2c80:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <serialReadPos>
    2c84:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <serialReadPos+0x1>
    2c88:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <serialWritePos>
    2c8c:	30 91 f9 03 	lds	r19, 0x03F9	; 0x8003f9 <serialWritePos+0x1>
    2c90:	82 17       	cp	r24, r18
    2c92:	93 07       	cpc	r25, r19
    2c94:	c1 f0       	breq	.+48     	; 0x2cc6 <__vector_27+0x60>
	{
		UDR0 = serial0Buffer[serialReadPos];
    2c96:	fc 01       	movw	r30, r24
    2c98:	e9 57       	subi	r30, 0x79	; 121
    2c9a:	f9 4f       	sbci	r31, 0xF9	; 249
    2c9c:	80 81       	ld	r24, Z
    2c9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
    2ca2:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <serialReadPos>
    2ca6:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <serialReadPos+0x1>
    2caa:	01 96       	adiw	r24, 0x01	; 1

		if(serialReadPos >= TX_BUFFER_SIZE)
    2cac:	80 38       	cpi	r24, 0x80	; 128
    2cae:	21 e0       	ldi	r18, 0x01	; 1
    2cb0:	92 07       	cpc	r25, r18
    2cb2:	2c f4       	brge	.+10     	; 0x2cbe <__vector_27+0x58>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
    2cb4:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <serialReadPos+0x1>
    2cb8:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <serialReadPos>
    2cbc:	04 c0       	rjmp	.+8      	; 0x2cc6 <__vector_27+0x60>

		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
    2cbe:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <serialReadPos+0x1>
    2cc2:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <serialReadPos>
		}
	}
}
    2cc6:	ff 91       	pop	r31
    2cc8:	ef 91       	pop	r30
    2cca:	9f 91       	pop	r25
    2ccc:	8f 91       	pop	r24
    2cce:	3f 91       	pop	r19
    2cd0:	2f 91       	pop	r18
    2cd2:	0f 90       	pop	r0
    2cd4:	0b be       	out	0x3b, r0	; 59
    2cd6:	0f 90       	pop	r0
    2cd8:	0f be       	out	0x3f, r0	; 63
    2cda:	0f 90       	pop	r0
    2cdc:	1f 90       	pop	r1
    2cde:	18 95       	reti

00002ce0 <appendSerial0>:

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
    2ce0:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <serialWritePos>
    2ce4:	30 91 f9 03 	lds	r19, 0x03F9	; 0x8003f9 <serialWritePos+0x1>
    2ce8:	f9 01       	movw	r30, r18
    2cea:	e9 57       	subi	r30, 0x79	; 121
    2cec:	f9 4f       	sbci	r31, 0xF9	; 249
    2cee:	80 83       	st	Z, r24
	serialWritePos++;
    2cf0:	2f 5f       	subi	r18, 0xFF	; 255
    2cf2:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    2cf4:	20 38       	cpi	r18, 0x80	; 128
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	38 07       	cpc	r19, r24
    2cfa:	2c f4       	brge	.+10     	; 0x2d06 <appendSerial0+0x26>
}

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    2cfc:	30 93 f9 03 	sts	0x03F9, r19	; 0x8003f9 <serialWritePos+0x1>
    2d00:	20 93 f8 03 	sts	0x03F8, r18	; 0x8003f8 <serialWritePos>
    2d04:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    2d06:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <serialWritePos+0x1>
    2d0a:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <serialWritePos>
    2d0e:	08 95       	ret

00002d10 <serialWrite0>:
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
    2d10:	0f 93       	push	r16
    2d12:	1f 93       	push	r17
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2d18:	66 23       	and	r22, r22
    2d1a:	69 f0       	breq	.+26     	; 0x2d36 <serialWrite0+0x26>
    2d1c:	ec 01       	movw	r28, r24
    2d1e:	61 50       	subi	r22, 0x01	; 1
    2d20:	06 2f       	mov	r16, r22
    2d22:	10 e0       	ldi	r17, 0x00	; 0
    2d24:	0f 5f       	subi	r16, 0xFF	; 255
    2d26:	1f 4f       	sbci	r17, 0xFF	; 255
    2d28:	08 0f       	add	r16, r24
    2d2a:	19 1f       	adc	r17, r25
	{
		appendSerial0(c[i]);
    2d2c:	89 91       	ld	r24, Y+
    2d2e:	d8 df       	rcall	.-80     	; 0x2ce0 <appendSerial0>
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2d30:	c0 17       	cp	r28, r16
    2d32:	d1 07       	cpc	r29, r17
    2d34:	d9 f7       	brne	.-10     	; 0x2d2c <serialWrite0+0x1c>
	{
		appendSerial0(c[i]);

	}

	if(UCSR0A & (1 << UDRE0))
    2d36:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2d3a:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    2d3c:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    2d40:	df 91       	pop	r29
    2d42:	cf 91       	pop	r28
    2d44:	1f 91       	pop	r17
    2d46:	0f 91       	pop	r16
    2d48:	08 95       	ret

00002d4a <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    2d4a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    2d4e:	80 e1       	ldi	r24, 0x10	; 16
    2d50:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>


UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    2d54:	88 e4       	ldi	r24, 0x48	; 72
    2d56:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    2d5a:	86 e0       	ldi	r24, 0x06	; 6
    2d5c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    2d60:	08 95       	ret

00002d62 <trackControl>:
		//this should be fine for now though. 
			//set track volume
			setTrackVolume(currentPattern->trackSampleLSB[i], currentPattern->trackSampleMSB[i], currentPattern->trackMainVolumeLSB[i], currentPattern->trackMainVolumeMSB[i]);
	}
	
}
    2d62:	cf 93       	push	r28
    2d64:	df 93       	push	r29
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    2d6a:	2a 97       	sbiw	r28, 0x0a	; 10
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	f8 94       	cli
    2d70:	de bf       	out	0x3e, r29	; 62
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	cd bf       	out	0x3d, r28	; 61
    2d76:	90 ef       	ldi	r25, 0xF0	; 240
    2d78:	99 83       	std	Y+1, r25	; 0x01
    2d7a:	9a ea       	ldi	r25, 0xAA	; 170
    2d7c:	9a 83       	std	Y+2, r25	; 0x02
    2d7e:	9a e0       	ldi	r25, 0x0A	; 10
    2d80:	9b 83       	std	Y+3, r25	; 0x03
    2d82:	93 e0       	ldi	r25, 0x03	; 3
    2d84:	9c 83       	std	Y+4, r25	; 0x04
    2d86:	2d 83       	std	Y+5, r18	; 0x05
    2d88:	8e 83       	std	Y+6, r24	; 0x06
    2d8a:	6f 83       	std	Y+7, r22	; 0x07
    2d8c:	48 87       	std	Y+8, r20	; 0x08
    2d8e:	19 86       	std	Y+9, r1	; 0x09
    2d90:	85 e5       	ldi	r24, 0x55	; 85
    2d92:	8a 87       	std	Y+10, r24	; 0x0a
    2d94:	6a e0       	ldi	r22, 0x0A	; 10
    2d96:	ce 01       	movw	r24, r28
    2d98:	01 96       	adiw	r24, 0x01	; 1
    2d9a:	ba df       	rcall	.-140    	; 0x2d10 <serialWrite0>
    2d9c:	2a 96       	adiw	r28, 0x0a	; 10
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
    2dac:	08 95       	ret

00002dae <setOutputVolume>:
    2dae:	cf 93       	push	r28
    2db0:	df 93       	push	r29
    2db2:	cd b7       	in	r28, 0x3d	; 61
    2db4:	de b7       	in	r29, 0x3e	; 62
    2db6:	28 97       	sbiw	r28, 0x08	; 8
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	de bf       	out	0x3e, r29	; 62
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	cd bf       	out	0x3d, r28	; 61
    2dc2:	90 ef       	ldi	r25, 0xF0	; 240
    2dc4:	99 83       	std	Y+1, r25	; 0x01
    2dc6:	9a ea       	ldi	r25, 0xAA	; 170
    2dc8:	9a 83       	std	Y+2, r25	; 0x02
    2dca:	98 e0       	ldi	r25, 0x08	; 8
    2dcc:	9b 83       	std	Y+3, r25	; 0x03
    2dce:	95 e0       	ldi	r25, 0x05	; 5
    2dd0:	9c 83       	std	Y+4, r25	; 0x04
    2dd2:	4d 83       	std	Y+5, r20	; 0x05
    2dd4:	8e 83       	std	Y+6, r24	; 0x06
    2dd6:	6f 83       	std	Y+7, r22	; 0x07
    2dd8:	85 e5       	ldi	r24, 0x55	; 85
    2dda:	88 87       	std	Y+8, r24	; 0x08
    2ddc:	68 e0       	ldi	r22, 0x08	; 8
    2dde:	ce 01       	movw	r24, r28
    2de0:	01 96       	adiw	r24, 0x01	; 1
    2de2:	96 df       	rcall	.-212    	; 0x2d10 <serialWrite0>
    2de4:	28 96       	adiw	r28, 0x08	; 8
    2de6:	0f b6       	in	r0, 0x3f	; 63
    2de8:	f8 94       	cli
    2dea:	de bf       	out	0x3e, r29	; 62
    2dec:	0f be       	out	0x3f, r0	; 63
    2dee:	cd bf       	out	0x3d, r28	; 61
    2df0:	df 91       	pop	r29
    2df2:	cf 91       	pop	r28
    2df4:	08 95       	ret

00002df6 <setTrackVolume>:
    2df6:	cf 93       	push	r28
    2df8:	df 93       	push	r29
    2dfa:	cd b7       	in	r28, 0x3d	; 61
    2dfc:	de b7       	in	r29, 0x3e	; 62
    2dfe:	29 97       	sbiw	r28, 0x09	; 9
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	90 ef       	ldi	r25, 0xF0	; 240
    2e0c:	99 83       	std	Y+1, r25	; 0x01
    2e0e:	9a ea       	ldi	r25, 0xAA	; 170
    2e10:	9a 83       	std	Y+2, r25	; 0x02
    2e12:	99 e0       	ldi	r25, 0x09	; 9
    2e14:	9b 83       	std	Y+3, r25	; 0x03
    2e16:	98 e0       	ldi	r25, 0x08	; 8
    2e18:	9c 83       	std	Y+4, r25	; 0x04
    2e1a:	8d 83       	std	Y+5, r24	; 0x05
    2e1c:	6e 83       	std	Y+6, r22	; 0x06
    2e1e:	4f 83       	std	Y+7, r20	; 0x07
    2e20:	28 87       	std	Y+8, r18	; 0x08
    2e22:	85 e5       	ldi	r24, 0x55	; 85
    2e24:	89 87       	std	Y+9, r24	; 0x09
    2e26:	69 e0       	ldi	r22, 0x09	; 9
    2e28:	ce 01       	movw	r24, r28
    2e2a:	01 96       	adiw	r24, 0x01	; 1
    2e2c:	71 df       	rcall	.-286    	; 0x2d10 <serialWrite0>
    2e2e:	29 96       	adiw	r28, 0x09	; 9
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	08 95       	ret

00002e40 <setTrackFade>:
    2e40:	cf 92       	push	r12
    2e42:	ef 92       	push	r14
    2e44:	0f 93       	push	r16
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	2c 97       	sbiw	r28, 0x0c	; 12
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	90 ef       	ldi	r25, 0xF0	; 240
    2e5c:	99 83       	std	Y+1, r25	; 0x01
    2e5e:	9a ea       	ldi	r25, 0xAA	; 170
    2e60:	9a 83       	std	Y+2, r25	; 0x02
    2e62:	9c e0       	ldi	r25, 0x0C	; 12
    2e64:	9b 83       	std	Y+3, r25	; 0x03
    2e66:	9a e0       	ldi	r25, 0x0A	; 10
    2e68:	9c 83       	std	Y+4, r25	; 0x04
    2e6a:	8d 83       	std	Y+5, r24	; 0x05
    2e6c:	6e 83       	std	Y+6, r22	; 0x06
    2e6e:	4f 83       	std	Y+7, r20	; 0x07
    2e70:	28 87       	std	Y+8, r18	; 0x08
    2e72:	09 87       	std	Y+9, r16	; 0x09
    2e74:	ea 86       	std	Y+10, r14	; 0x0a
    2e76:	cb 86       	std	Y+11, r12	; 0x0b
    2e78:	85 e5       	ldi	r24, 0x55	; 85
    2e7a:	8c 87       	std	Y+12, r24	; 0x0c
    2e7c:	6c e0       	ldi	r22, 0x0C	; 12
    2e7e:	ce 01       	movw	r24, r28
    2e80:	01 96       	adiw	r24, 0x01	; 1
    2e82:	46 df       	rcall	.-372    	; 0x2d10 <serialWrite0>
    2e84:	2c 96       	adiw	r28, 0x0c	; 12
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
    2e90:	df 91       	pop	r29
    2e92:	cf 91       	pop	r28
    2e94:	0f 91       	pop	r16
    2e96:	ef 90       	pop	r14
    2e98:	cf 90       	pop	r12
    2e9a:	08 95       	ret

00002e9c <outputSampleRate>:
    2e9c:	cf 93       	push	r28
    2e9e:	df 93       	push	r29
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
    2ea4:	28 97       	sbiw	r28, 0x08	; 8
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	f8 94       	cli
    2eaa:	de bf       	out	0x3e, r29	; 62
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	cd bf       	out	0x3d, r28	; 61
    2eb0:	90 ef       	ldi	r25, 0xF0	; 240
    2eb2:	99 83       	std	Y+1, r25	; 0x01
    2eb4:	9a ea       	ldi	r25, 0xAA	; 170
    2eb6:	9a 83       	std	Y+2, r25	; 0x02
    2eb8:	98 e0       	ldi	r25, 0x08	; 8
    2eba:	9b 83       	std	Y+3, r25	; 0x03
    2ebc:	9c e0       	ldi	r25, 0x0C	; 12
    2ebe:	9c 83       	std	Y+4, r25	; 0x04
    2ec0:	8d 83       	std	Y+5, r24	; 0x05
    2ec2:	6e 83       	std	Y+6, r22	; 0x06
    2ec4:	4f 83       	std	Y+7, r20	; 0x07
    2ec6:	85 e5       	ldi	r24, 0x55	; 85
    2ec8:	88 87       	std	Y+8, r24	; 0x08
    2eca:	68 e0       	ldi	r22, 0x08	; 8
    2ecc:	ce 01       	movw	r24, r28
    2ece:	01 96       	adiw	r24, 0x01	; 1
    2ed0:	1f df       	rcall	.-450    	; 0x2d10 <serialWrite0>
    2ed2:	28 96       	adiw	r28, 0x08	; 8
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	08 95       	ret

00002ee4 <playTrack>:
    2ee4:	2f 92       	push	r2
    2ee6:	3f 92       	push	r3
    2ee8:	4f 92       	push	r4
    2eea:	5f 92       	push	r5
    2eec:	6f 92       	push	r6
    2eee:	7f 92       	push	r7
    2ef0:	8f 92       	push	r8
    2ef2:	9f 92       	push	r9
    2ef4:	af 92       	push	r10
    2ef6:	bf 92       	push	r11
    2ef8:	cf 92       	push	r12
    2efa:	ef 92       	push	r14
    2efc:	0f 93       	push	r16
    2efe:	1f 93       	push	r17
    2f00:	cf 93       	push	r28
    2f02:	df 93       	push	r29
    2f04:	00 d0       	rcall	.+0      	; 0x2f06 <playTrack+0x22>
    2f06:	1f 92       	push	r1
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	4b 01       	movw	r8, r22
    2f0e:	14 2f       	mov	r17, r20
    2f10:	a4 2e       	mov	r10, r20
    2f12:	b1 2c       	mov	r11, r1
    2f14:	fc 01       	movw	r30, r24
    2f16:	ea 0d       	add	r30, r10
    2f18:	fb 1d       	adc	r31, r11
    2f1a:	e5 51       	subi	r30, 0x15	; 21
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	20 81       	ld	r18, Z
    2f20:	21 30       	cpi	r18, 0x01	; 1
    2f22:	09 f4       	brne	.+2      	; 0x2f26 <playTrack+0x42>
    2f24:	8c c0       	rjmp	.+280    	; 0x303e <playTrack+0x15a>
    2f26:	38 f0       	brcs	.+14     	; 0x2f36 <playTrack+0x52>
    2f28:	22 30       	cpi	r18, 0x02	; 2
    2f2a:	09 f4       	brne	.+2      	; 0x2f2e <playTrack+0x4a>
    2f2c:	df c0       	rjmp	.+446    	; 0x30ec <playTrack+0x208>
    2f2e:	23 30       	cpi	r18, 0x03	; 3
    2f30:	09 f4       	brne	.+2      	; 0x2f34 <playTrack+0x50>
    2f32:	0c c1       	rjmp	.+536    	; 0x314c <playTrack+0x268>
    2f34:	1f c1       	rjmp	.+574    	; 0x3174 <playTrack+0x290>
    2f36:	9c 01       	movw	r18, r24
    2f38:	2a 0d       	add	r18, r10
    2f3a:	3b 1d       	adc	r19, r11
    2f3c:	3c 83       	std	Y+4, r19	; 0x04
    2f3e:	2b 83       	std	Y+3, r18	; 0x03
    2f40:	f9 01       	movw	r30, r18
    2f42:	e8 57       	subi	r30, 0x78	; 120
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	29 01       	movw	r4, r18
    2f48:	38 e9       	ldi	r19, 0x98	; 152
    2f4a:	43 0e       	add	r4, r19
    2f4c:	51 1c       	adc	r5, r1
    2f4e:	6b 80       	ldd	r6, Y+3	; 0x03
    2f50:	7c 80       	ldd	r7, Y+4	; 0x04
    2f52:	88 ea       	ldi	r24, 0xA8	; 168
    2f54:	68 0e       	add	r6, r24
    2f56:	71 1c       	adc	r7, r1
    2f58:	20 81       	ld	r18, Z
    2f5a:	ab 81       	ldd	r26, Y+3	; 0x03
    2f5c:	bc 81       	ldd	r27, Y+4	; 0x04
    2f5e:	58 96       	adiw	r26, 0x18	; 24
    2f60:	4c 91       	ld	r20, X
    2f62:	f2 01       	movw	r30, r4
    2f64:	60 81       	ld	r22, Z
    2f66:	d3 01       	movw	r26, r6
    2f68:	8c 91       	ld	r24, X
    2f6a:	fb de       	rcall	.-522    	; 0x2d62 <trackControl>
    2f6c:	2b 80       	ldd	r2, Y+3	; 0x03
    2f6e:	3c 80       	ldd	r3, Y+4	; 0x04
    2f70:	b8 e4       	ldi	r27, 0x48	; 72
    2f72:	2b 0e       	add	r2, r27
    2f74:	31 1c       	adc	r3, r1
    2f76:	eb 81       	ldd	r30, Y+3	; 0x03
    2f78:	fc 81       	ldd	r31, Y+4	; 0x04
    2f7a:	e8 5a       	subi	r30, 0xA8	; 168
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	fa 83       	std	Y+2, r31	; 0x02
    2f80:	e9 83       	std	Y+1, r30	; 0x01
    2f82:	c1 2c       	mov	r12, r1
    2f84:	d1 01       	movw	r26, r2
    2f86:	ec 90       	ld	r14, X
    2f88:	00 81       	ld	r16, Z
    2f8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f8e:	20 a5       	ldd	r18, Z+40	; 0x28
    2f90:	40 ad       	ldd	r20, Z+56	; 0x38
    2f92:	d2 01       	movw	r26, r4
    2f94:	6c 91       	ld	r22, X
    2f96:	f3 01       	movw	r30, r6
    2f98:	80 81       	ld	r24, Z
    2f9a:	52 df       	rcall	.-348    	; 0x2e40 <setTrackFade>
    2f9c:	f4 01       	movw	r30, r8
    2f9e:	eb 55       	subi	r30, 0x5B	; 91
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <playTrack+0xc8>
    2fa8:	88 0f       	add	r24, r24
    2faa:	99 1f       	adc	r25, r25
    2fac:	1a 95       	dec	r17
    2fae:	e2 f7       	brpl	.-8      	; 0x2fa8 <playTrack+0xc4>
    2fb0:	20 81       	ld	r18, Z
    2fb2:	31 81       	ldd	r19, Z+1	; 0x01
    2fb4:	82 2b       	or	r24, r18
    2fb6:	93 2b       	or	r25, r19
    2fb8:	91 83       	std	Z+1, r25	; 0x01
    2fba:	80 83       	st	Z, r24
    2fbc:	f5 01       	movw	r30, r10
    2fbe:	ee 0f       	add	r30, r30
    2fc0:	ff 1f       	adc	r31, r31
    2fc2:	ee 0f       	add	r30, r30
    2fc4:	ff 1f       	adc	r31, r31
    2fc6:	e8 0d       	add	r30, r8
    2fc8:	f9 1d       	adc	r31, r9
    2fca:	e9 55       	subi	r30, 0x59	; 89
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	ab 81       	ldd	r26, Y+3	; 0x03
    2fd0:	bc 81       	ldd	r27, Y+4	; 0x04
    2fd2:	a5 53       	subi	r26, 0x35	; 53
    2fd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2fd6:	2c 91       	ld	r18, X
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	32 2f       	mov	r19, r18
    2fdc:	22 27       	eor	r18, r18
    2fde:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe2:	85 52       	subi	r24, 0x25	; 37
    2fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	8c 91       	ld	r24, X
    2fea:	a9 01       	movw	r20, r18
    2fec:	48 2b       	or	r20, r24
    2fee:	d1 01       	movw	r26, r2
    2ff0:	8c 91       	ld	r24, X
    2ff2:	28 2f       	mov	r18, r24
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	32 2f       	mov	r19, r18
    2ff8:	22 27       	eor	r18, r18
    2ffa:	a9 81       	ldd	r26, Y+1	; 0x01
    2ffc:	ba 81       	ldd	r27, Y+2	; 0x02
    2ffe:	8c 91       	ld	r24, X
    3000:	28 2b       	or	r18, r24
    3002:	24 0f       	add	r18, r20
    3004:	35 1f       	adc	r19, r21
    3006:	c9 01       	movw	r24, r18
    3008:	88 0f       	add	r24, r24
    300a:	99 1f       	adc	r25, r25
    300c:	22 0f       	add	r18, r18
    300e:	33 1f       	adc	r19, r19
    3010:	22 0f       	add	r18, r18
    3012:	33 1f       	adc	r19, r19
    3014:	22 0f       	add	r18, r18
    3016:	33 1f       	adc	r19, r19
    3018:	28 0f       	add	r18, r24
    301a:	39 1f       	adc	r19, r25
    301c:	d4 01       	movw	r26, r8
    301e:	af 55       	subi	r26, 0x5F	; 95
    3020:	bf 4f       	sbci	r27, 0xFF	; 255
    3022:	8d 91       	ld	r24, X+
    3024:	9d 91       	ld	r25, X+
    3026:	0d 90       	ld	r0, X+
    3028:	bc 91       	ld	r27, X
    302a:	a0 2d       	mov	r26, r0
    302c:	82 0f       	add	r24, r18
    302e:	93 1f       	adc	r25, r19
    3030:	a1 1d       	adc	r26, r1
    3032:	b1 1d       	adc	r27, r1
    3034:	80 83       	st	Z, r24
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	a2 83       	std	Z+2, r26	; 0x02
    303a:	b3 83       	std	Z+3, r27	; 0x03
    303c:	9b c0       	rjmp	.+310    	; 0x3174 <playTrack+0x290>
    303e:	3c 01       	movw	r6, r24
    3040:	6a 0c       	add	r6, r10
    3042:	7b 1c       	adc	r7, r11
    3044:	c3 01       	movw	r24, r6
    3046:	88 57       	subi	r24, 0x78	; 120
    3048:	9f 4f       	sbci	r25, 0xFF	; 255
    304a:	d3 01       	movw	r26, r6
    304c:	a8 56       	subi	r26, 0x68	; 104
    304e:	bf 4f       	sbci	r27, 0xFF	; 255
    3050:	23 01       	movw	r4, r6
    3052:	e8 ea       	ldi	r30, 0xA8	; 168
    3054:	4e 0e       	add	r4, r30
    3056:	51 1c       	adc	r5, r1
    3058:	fc 01       	movw	r30, r24
    305a:	20 81       	ld	r18, Z
    305c:	f3 01       	movw	r30, r6
    305e:	40 8d       	ldd	r20, Z+24	; 0x18
    3060:	6c 91       	ld	r22, X
    3062:	d2 01       	movw	r26, r4
    3064:	8c 91       	ld	r24, X
    3066:	7d de       	rcall	.-774    	; 0x2d62 <trackControl>
    3068:	f4 01       	movw	r30, r8
    306a:	eb 55       	subi	r30, 0x5B	; 91
    306c:	ff 4f       	sbci	r31, 0xFF	; 255
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	02 c0       	rjmp	.+4      	; 0x3078 <playTrack+0x194>
    3074:	88 0f       	add	r24, r24
    3076:	99 1f       	adc	r25, r25
    3078:	1a 95       	dec	r17
    307a:	e2 f7       	brpl	.-8      	; 0x3074 <playTrack+0x190>
    307c:	20 81       	ld	r18, Z
    307e:	31 81       	ldd	r19, Z+1	; 0x01
    3080:	82 2b       	or	r24, r18
    3082:	93 2b       	or	r25, r19
    3084:	91 83       	std	Z+1, r25	; 0x01
    3086:	80 83       	st	Z, r24
    3088:	f5 01       	movw	r30, r10
    308a:	ee 0f       	add	r30, r30
    308c:	ff 1f       	adc	r31, r31
    308e:	ee 0f       	add	r30, r30
    3090:	ff 1f       	adc	r31, r31
    3092:	e8 0d       	add	r30, r8
    3094:	f9 1d       	adc	r31, r9
    3096:	e9 55       	subi	r30, 0x59	; 89
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	d3 01       	movw	r26, r6
    309c:	a5 53       	subi	r26, 0x35	; 53
    309e:	bf 4f       	sbci	r27, 0xFF	; 255
    30a0:	2c 91       	ld	r18, X
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	32 2f       	mov	r19, r18
    30a6:	22 27       	eor	r18, r18
    30a8:	c3 01       	movw	r24, r6
    30aa:	85 52       	subi	r24, 0x25	; 37
    30ac:	9f 4f       	sbci	r25, 0xFF	; 255
    30ae:	dc 01       	movw	r26, r24
    30b0:	8c 91       	ld	r24, X
    30b2:	28 2b       	or	r18, r24
    30b4:	c9 01       	movw	r24, r18
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	22 0f       	add	r18, r18
    30bc:	33 1f       	adc	r19, r19
    30be:	22 0f       	add	r18, r18
    30c0:	33 1f       	adc	r19, r19
    30c2:	22 0f       	add	r18, r18
    30c4:	33 1f       	adc	r19, r19
    30c6:	28 0f       	add	r18, r24
    30c8:	39 1f       	adc	r19, r25
    30ca:	d4 01       	movw	r26, r8
    30cc:	af 55       	subi	r26, 0x5F	; 95
    30ce:	bf 4f       	sbci	r27, 0xFF	; 255
    30d0:	8d 91       	ld	r24, X+
    30d2:	9d 91       	ld	r25, X+
    30d4:	0d 90       	ld	r0, X+
    30d6:	bc 91       	ld	r27, X
    30d8:	a0 2d       	mov	r26, r0
    30da:	82 0f       	add	r24, r18
    30dc:	93 1f       	adc	r25, r19
    30de:	a1 1d       	adc	r26, r1
    30e0:	b1 1d       	adc	r27, r1
    30e2:	80 83       	st	Z, r24
    30e4:	91 83       	std	Z+1, r25	; 0x01
    30e6:	a2 83       	std	Z+2, r26	; 0x02
    30e8:	b3 83       	std	Z+3, r27	; 0x03
    30ea:	44 c0       	rjmp	.+136    	; 0x3174 <playTrack+0x290>
    30ec:	fc 01       	movw	r30, r24
    30ee:	ea 0d       	add	r30, r10
    30f0:	fb 1d       	adc	r31, r11
    30f2:	fa 83       	std	Y+2, r31	; 0x02
    30f4:	e9 83       	std	Y+1, r30	; 0x01
    30f6:	e8 57       	subi	r30, 0x78	; 120
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	89 80       	ldd	r8, Y+1	; 0x01
    30fc:	9a 80       	ldd	r9, Y+2	; 0x02
    30fe:	28 e9       	ldi	r18, 0x98	; 152
    3100:	82 0e       	add	r8, r18
    3102:	91 1c       	adc	r9, r1
    3104:	a9 80       	ldd	r10, Y+1	; 0x01
    3106:	ba 80       	ldd	r11, Y+2	; 0x02
    3108:	38 ea       	ldi	r19, 0xA8	; 168
    310a:	a3 0e       	add	r10, r19
    310c:	b1 1c       	adc	r11, r1
    310e:	20 81       	ld	r18, Z
    3110:	a9 81       	ldd	r26, Y+1	; 0x01
    3112:	ba 81       	ldd	r27, Y+2	; 0x02
    3114:	58 96       	adiw	r26, 0x18	; 24
    3116:	4c 91       	ld	r20, X
    3118:	f4 01       	movw	r30, r8
    311a:	60 81       	ld	r22, Z
    311c:	d5 01       	movw	r26, r10
    311e:	8c 91       	ld	r24, X
    3120:	20 de       	rcall	.-960    	; 0x2d62 <trackControl>
    3122:	a9 81       	ldd	r26, Y+1	; 0x01
    3124:	ba 81       	ldd	r27, Y+2	; 0x02
    3126:	a8 5b       	subi	r26, 0xB8	; 184
    3128:	bf 4f       	sbci	r27, 0xFF	; 255
    312a:	e9 81       	ldd	r30, Y+1	; 0x01
    312c:	fa 81       	ldd	r31, Y+2	; 0x02
    312e:	e8 5a       	subi	r30, 0xA8	; 168
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	c1 2c       	mov	r12, r1
    3134:	ec 90       	ld	r14, X
    3136:	00 81       	ld	r16, Z
    3138:	e9 81       	ldd	r30, Y+1	; 0x01
    313a:	fa 81       	ldd	r31, Y+2	; 0x02
    313c:	20 a5       	ldd	r18, Z+40	; 0x28
    313e:	40 ad       	ldd	r20, Z+56	; 0x38
    3140:	d4 01       	movw	r26, r8
    3142:	6c 91       	ld	r22, X
    3144:	f5 01       	movw	r30, r10
    3146:	80 81       	ld	r24, Z
    3148:	7b de       	rcall	.-778    	; 0x2e40 <setTrackFade>
    314a:	14 c0       	rjmp	.+40     	; 0x3174 <playTrack+0x290>
    314c:	a8 0e       	add	r10, r24
    314e:	b9 1e       	adc	r11, r25
    3150:	c5 01       	movw	r24, r10
    3152:	88 57       	subi	r24, 0x78	; 120
    3154:	9f 4f       	sbci	r25, 0xFF	; 255
    3156:	d5 01       	movw	r26, r10
    3158:	a8 56       	subi	r26, 0x68	; 104
    315a:	bf 4f       	sbci	r27, 0xFF	; 255
    315c:	45 01       	movw	r8, r10
    315e:	f8 ea       	ldi	r31, 0xA8	; 168
    3160:	8f 0e       	add	r8, r31
    3162:	91 1c       	adc	r9, r1
    3164:	fc 01       	movw	r30, r24
    3166:	20 81       	ld	r18, Z
    3168:	f5 01       	movw	r30, r10
    316a:	40 8d       	ldd	r20, Z+24	; 0x18
    316c:	6c 91       	ld	r22, X
    316e:	d4 01       	movw	r26, r8
    3170:	8c 91       	ld	r24, X
    3172:	f7 dd       	rcall	.-1042   	; 0x2d62 <trackControl>
    3174:	0f 90       	pop	r0
    3176:	0f 90       	pop	r0
    3178:	0f 90       	pop	r0
    317a:	0f 90       	pop	r0
    317c:	df 91       	pop	r29
    317e:	cf 91       	pop	r28
    3180:	1f 91       	pop	r17
    3182:	0f 91       	pop	r16
    3184:	ef 90       	pop	r14
    3186:	cf 90       	pop	r12
    3188:	bf 90       	pop	r11
    318a:	af 90       	pop	r10
    318c:	9f 90       	pop	r9
    318e:	8f 90       	pop	r8
    3190:	7f 90       	pop	r7
    3192:	6f 90       	pop	r6
    3194:	5f 90       	pop	r5
    3196:	4f 90       	pop	r4
    3198:	3f 90       	pop	r3
    319a:	2f 90       	pop	r2
    319c:	08 95       	ret

0000319e <releaseUpdate>:

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
    319e:	2f 92       	push	r2
    31a0:	3f 92       	push	r3
    31a2:	4f 92       	push	r4
    31a4:	5f 92       	push	r5
    31a6:	6f 92       	push	r6
    31a8:	7f 92       	push	r7
    31aa:	8f 92       	push	r8
    31ac:	9f 92       	push	r9
    31ae:	af 92       	push	r10
    31b0:	bf 92       	push	r11
    31b2:	cf 92       	push	r12
    31b4:	ef 92       	push	r14
    31b6:	0f 93       	push	r16
    31b8:	cf 93       	push	r28
    31ba:	df 93       	push	r29
    31bc:	00 d0       	rcall	.+0      	; 0x31be <releaseUpdate+0x20>
    31be:	1f 92       	push	r1
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
    31c4:	fb 01       	movw	r30, r22
    31c6:	eb 55       	subi	r30, 0x5B	; 91
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	a0 80       	ld	r10, Z
    31cc:	b1 80       	ldd	r11, Z+1	; 0x01
    31ce:	3b 01       	movw	r6, r22
    31d0:	27 ea       	ldi	r18, 0xA7	; 167
    31d2:	62 0e       	add	r6, r18
    31d4:	71 1c       	adc	r7, r1
    31d6:	88 59       	subi	r24, 0x98	; 152
    31d8:	9f 4f       	sbci	r25, 0xFF	; 255
    31da:	4c 01       	movw	r8, r24
	
	for(int i = 0; i<16; i++)
    31dc:	1c 82       	std	Y+4, r1	; 0x04
    31de:	1b 82       	std	Y+3, r1	; 0x03
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])<=(currentGlobals->releaseCounter))
    31e0:	2b 01       	movw	r4, r22
    31e2:	81 ea       	ldi	r24, 0xA1	; 161
    31e4:	48 0e       	add	r4, r24
    31e6:	51 1c       	adc	r5, r1
			{
				//we need to do the release state here.
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],186,255,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
				currentGlobals->releaseTracker = currentGlobals->releaseTracker&(~(1<<i)); //turn off that track, so release stage does not play again. 
    31e8:	fa 83       	std	Y+2, r31	; 0x02
    31ea:	e9 83       	std	Y+1, r30	; 0x01
    31ec:	22 24       	eor	r2, r2
    31ee:	23 94       	inc	r2
    31f0:	31 2c       	mov	r3, r1
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
    31f2:	a0 fe       	sbrs	r10, 0
    31f4:	2c c0       	rjmp	.+88     	; 0x324e <releaseUpdate+0xb0>
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])<=(currentGlobals->releaseCounter))
    31f6:	f3 01       	movw	r30, r6
    31f8:	40 81       	ld	r20, Z
    31fa:	51 81       	ldd	r21, Z+1	; 0x01
    31fc:	62 81       	ldd	r22, Z+2	; 0x02
    31fe:	73 81       	ldd	r23, Z+3	; 0x03
    3200:	f2 01       	movw	r30, r4
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
    3206:	a2 81       	ldd	r26, Z+2	; 0x02
    3208:	b3 81       	ldd	r27, Z+3	; 0x03
    320a:	84 17       	cp	r24, r20
    320c:	95 07       	cpc	r25, r21
    320e:	a6 07       	cpc	r26, r22
    3210:	b7 07       	cpc	r27, r23
    3212:	e8 f0       	brcs	.+58     	; 0x324e <releaseUpdate+0xb0>
			{
				//we need to do the release state here.
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],186,255,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
    3214:	cc 24       	eor	r12, r12
    3216:	c3 94       	inc	r12
    3218:	f4 01       	movw	r30, r8
    321a:	e0 80       	ld	r14, Z
    321c:	00 89       	ldd	r16, Z+16	; 0x10
    321e:	2f ef       	ldi	r18, 0xFF	; 255
    3220:	4a eb       	ldi	r20, 0xBA	; 186
    3222:	60 a9       	ldd	r22, Z+48	; 0x30
    3224:	e0 5c       	subi	r30, 0xC0	; 192
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	80 81       	ld	r24, Z
    322a:	0a de       	rcall	.-1004   	; 0x2e40 <setTrackFade>
				currentGlobals->releaseTracker = currentGlobals->releaseTracker&(~(1<<i)); //turn off that track, so release stage does not play again. 
    322c:	c1 01       	movw	r24, r2
    322e:	0b 80       	ldd	r0, Y+3	; 0x03
    3230:	02 c0       	rjmp	.+4      	; 0x3236 <releaseUpdate+0x98>
    3232:	88 0f       	add	r24, r24
    3234:	99 1f       	adc	r25, r25
    3236:	0a 94       	dec	r0
    3238:	e2 f7       	brpl	.-8      	; 0x3232 <releaseUpdate+0x94>
    323a:	80 95       	com	r24
    323c:	90 95       	com	r25
    323e:	e9 81       	ldd	r30, Y+1	; 0x01
    3240:	fa 81       	ldd	r31, Y+2	; 0x02
    3242:	20 81       	ld	r18, Z
    3244:	31 81       	ldd	r19, Z+1	; 0x01
    3246:	82 23       	and	r24, r18
    3248:	93 23       	and	r25, r19
    324a:	91 83       	std	Z+1, r25	; 0x01
    324c:	80 83       	st	Z, r24
			}
		}
		releaseTrackerParse = releaseTrackerParse>>1;
    324e:	b6 94       	lsr	r11
    3250:	a7 94       	ror	r10

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
    3252:	8b 81       	ldd	r24, Y+3	; 0x03
    3254:	9c 81       	ldd	r25, Y+4	; 0x04
    3256:	01 96       	adiw	r24, 0x01	; 1
    3258:	9c 83       	std	Y+4, r25	; 0x04
    325a:	8b 83       	std	Y+3, r24	; 0x03
    325c:	94 e0       	ldi	r25, 0x04	; 4
    325e:	69 0e       	add	r6, r25
    3260:	71 1c       	adc	r7, r1
    3262:	ef ef       	ldi	r30, 0xFF	; 255
    3264:	8e 1a       	sub	r8, r30
    3266:	9e 0a       	sbc	r9, r30
    3268:	8b 81       	ldd	r24, Y+3	; 0x03
    326a:	9c 81       	ldd	r25, Y+4	; 0x04
    326c:	40 97       	sbiw	r24, 0x10	; 16
    326e:	09 f0       	breq	.+2      	; 0x3272 <releaseUpdate+0xd4>
    3270:	c0 cf       	rjmp	.-128    	; 0x31f2 <releaseUpdate+0x54>
			}
		}
		releaseTrackerParse = releaseTrackerParse>>1;
	}
	
    3272:	0f 90       	pop	r0
    3274:	0f 90       	pop	r0
    3276:	0f 90       	pop	r0
    3278:	0f 90       	pop	r0
    327a:	df 91       	pop	r29
    327c:	cf 91       	pop	r28
    327e:	0f 91       	pop	r16
    3280:	ef 90       	pop	r14
    3282:	cf 90       	pop	r12
    3284:	bf 90       	pop	r11
    3286:	af 90       	pop	r10
    3288:	9f 90       	pop	r9
    328a:	8f 90       	pop	r8
    328c:	7f 90       	pop	r7
    328e:	6f 90       	pop	r6
    3290:	5f 90       	pop	r5
    3292:	4f 90       	pop	r4
    3294:	3f 90       	pop	r3
    3296:	2f 90       	pop	r2
    3298:	08 95       	ret

0000329a <twi_init>:
		}

		returnNum=twi_readNak();

	return returnNum;
}
    329a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    329e:	88 e4       	ldi	r24, 0x48	; 72
    32a0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    32a4:	08 95       	ret

000032a6 <twi_start>:
    32a6:	94 ea       	ldi	r25, 0xA4	; 164
    32a8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    32ac:	ec eb       	ldi	r30, 0xBC	; 188
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	90 81       	ld	r25, Z
    32b2:	99 23       	and	r25, r25
    32b4:	ec f7       	brge	.-6      	; 0x32b0 <twi_start+0xa>
    32b6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    32ba:	98 7f       	andi	r25, 0xF8	; 248
    32bc:	98 30       	cpi	r25, 0x08	; 8
    32be:	11 f0       	breq	.+4      	; 0x32c4 <twi_start+0x1e>
    32c0:	90 31       	cpi	r25, 0x10	; 16
    32c2:	a1 f4       	brne	.+40     	; 0x32ec <twi_start+0x46>
    32c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    32c8:	84 e8       	ldi	r24, 0x84	; 132
    32ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    32ce:	ec eb       	ldi	r30, 0xBC	; 188
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	80 81       	ld	r24, Z
    32d4:	88 23       	and	r24, r24
    32d6:	ec f7       	brge	.-6      	; 0x32d2 <twi_start+0x2c>
    32d8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    32dc:	98 7f       	andi	r25, 0xF8	; 248
    32de:	98 31       	cpi	r25, 0x18	; 24
    32e0:	39 f0       	breq	.+14     	; 0x32f0 <twi_start+0x4a>
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	90 34       	cpi	r25, 0x40	; 64
    32e6:	29 f4       	brne	.+10     	; 0x32f2 <twi_start+0x4c>
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	08 95       	ret
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	08 95       	ret
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	08 95       	ret

000032f4 <twi_stop>:
    32f4:	84 e9       	ldi	r24, 0x94	; 148
    32f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    32fa:	ec eb       	ldi	r30, 0xBC	; 188
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	80 81       	ld	r24, Z
    3300:	84 fd       	sbrc	r24, 4
    3302:	fd cf       	rjmp	.-6      	; 0x32fe <twi_stop+0xa>
    3304:	08 95       	ret

00003306 <twi_write>:
    3306:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    330a:	84 e8       	ldi	r24, 0x84	; 132
    330c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3310:	ec eb       	ldi	r30, 0xBC	; 188
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	80 81       	ld	r24, Z
    3316:	88 23       	and	r24, r24
    3318:	ec f7       	brge	.-6      	; 0x3314 <twi_write+0xe>
    331a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    331e:	98 7f       	andi	r25, 0xF8	; 248
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	98 32       	cpi	r25, 0x28	; 40
    3324:	09 f4       	brne	.+2      	; 0x3328 <twi_write+0x22>
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	08 95       	ret

0000332a <twi_readAck>:
    332a:	84 ec       	ldi	r24, 0xC4	; 196
    332c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3330:	ec eb       	ldi	r30, 0xBC	; 188
    3332:	f0 e0       	ldi	r31, 0x00	; 0
    3334:	80 81       	ld	r24, Z
    3336:	88 23       	and	r24, r24
    3338:	ec f7       	brge	.-6      	; 0x3334 <twi_readAck+0xa>
    333a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    333e:	08 95       	ret

00003340 <twi_readNak>:
    3340:	84 e8       	ldi	r24, 0x84	; 132
    3342:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3346:	ec eb       	ldi	r30, 0xBC	; 188
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	80 81       	ld	r24, Z
    334c:	88 23       	and	r24, r24
    334e:	ec f7       	brge	.-6      	; 0x334a <twi_readNak+0xa>
    3350:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3354:	08 95       	ret

00003356 <eepromSavePattern>:
    3356:	4f 92       	push	r4
    3358:	5f 92       	push	r5
    335a:	6f 92       	push	r6
    335c:	7f 92       	push	r7
    335e:	8f 92       	push	r8
    3360:	9f 92       	push	r9
    3362:	af 92       	push	r10
    3364:	bf 92       	push	r11
    3366:	cf 92       	push	r12
    3368:	df 92       	push	r13
    336a:	ef 92       	push	r14
    336c:	ff 92       	push	r15
    336e:	0f 93       	push	r16
    3370:	1f 93       	push	r17
    3372:	cf 93       	push	r28
    3374:	df 93       	push	r29
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
    337a:	c4 59       	subi	r28, 0x94	; 148
    337c:	d1 09       	sbc	r29, r1
    337e:	0f b6       	in	r0, 0x3f	; 63
    3380:	f8 94       	cli
    3382:	de bf       	out	0x3e, r29	; 62
    3384:	0f be       	out	0x3f, r0	; 63
    3386:	cd bf       	out	0x3d, r28	; 61
    3388:	cd 5d       	subi	r28, 0xDD	; 221
    338a:	dd 4f       	sbci	r29, 0xFD	; 253
    338c:	48 81       	ld	r20, Y
    338e:	c3 52       	subi	r28, 0x23	; 35
    3390:	d2 40       	sbci	r29, 0x02	; 2
    3392:	c0 59       	subi	r28, 0x90	; 144
    3394:	de 4f       	sbci	r29, 0xFE	; 254
    3396:	88 81       	ld	r24, Y
    3398:	c0 57       	subi	r28, 0x70	; 112
    339a:	d1 40       	sbci	r29, 0x01	; 1
    339c:	cf 58       	subi	r28, 0x8F	; 143
    339e:	de 4f       	sbci	r29, 0xFE	; 254
    33a0:	98 81       	ld	r25, Y
    33a2:	c1 57       	subi	r28, 0x71	; 113
    33a4:	d1 40       	sbci	r29, 0x01	; 1
    33a6:	24 2f       	mov	r18, r20
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	44 23       	and	r20, r20
    33ac:	8c f0       	brlt	.+34     	; 0x33d0 <eepromSavePattern+0x7a>
    33ae:	21 50       	subi	r18, 0x01	; 1
    33b0:	31 09       	sbc	r19, r1
    33b2:	39 01       	movw	r6, r18
    33b4:	66 0c       	add	r6, r6
    33b6:	77 1c       	adc	r7, r7
    33b8:	62 0e       	add	r6, r18
    33ba:	73 1e       	adc	r7, r19
    33bc:	76 94       	lsr	r7
    33be:	76 2c       	mov	r7, r6
    33c0:	66 24       	eor	r6, r6
    33c2:	77 94       	ror	r7
    33c4:	67 94       	ror	r6
    33c6:	0f 2e       	mov	r0, r31
    33c8:	f0 ea       	ldi	r31, 0xA0	; 160
    33ca:	5f 2e       	mov	r5, r31
    33cc:	f0 2d       	mov	r31, r0
    33ce:	11 c0       	rjmp	.+34     	; 0x33f2 <eepromSavePattern+0x9c>
    33d0:	20 58       	subi	r18, 0x80	; 128
    33d2:	31 09       	sbc	r19, r1
    33d4:	39 01       	movw	r6, r18
    33d6:	66 0c       	add	r6, r6
    33d8:	77 1c       	adc	r7, r7
    33da:	26 0d       	add	r18, r6
    33dc:	37 1d       	adc	r19, r7
    33de:	39 01       	movw	r6, r18
    33e0:	76 94       	lsr	r7
    33e2:	76 2c       	mov	r7, r6
    33e4:	66 24       	eor	r6, r6
    33e6:	77 94       	ror	r7
    33e8:	67 94       	ror	r6
    33ea:	0f 2e       	mov	r0, r31
    33ec:	f8 ea       	ldi	r31, 0xA8	; 168
    33ee:	5f 2e       	mov	r5, r31
    33f0:	f0 2d       	mov	r31, r0
    33f2:	be 01       	movw	r22, r28
    33f4:	68 55       	subi	r22, 0x58	; 88
    33f6:	7f 4f       	sbci	r23, 0xFF	; 255
    33f8:	8e 01       	movw	r16, r28
    33fa:	0f 5f       	subi	r16, 0xFF	; 255
    33fc:	1f 4f       	sbci	r17, 0xFF	; 255
    33fe:	fe 01       	movw	r30, r28
    3400:	e0 55       	subi	r30, 0x50	; 80
    3402:	ff 4f       	sbci	r31, 0xFF	; 255
    3404:	98 01       	movw	r18, r16
    3406:	db 01       	movw	r26, r22
    3408:	4d 91       	ld	r20, X+
    340a:	bd 01       	movw	r22, r26
    340c:	d9 01       	movw	r26, r18
    340e:	4d 93       	st	X+, r20
    3410:	9d 01       	movw	r18, r26
    3412:	6e 17       	cp	r22, r30
    3414:	7f 07       	cpc	r23, r31
    3416:	b9 f7       	brne	.-18     	; 0x3406 <eepromSavePattern+0xb0>
    3418:	de 01       	movw	r26, r28
    341a:	19 96       	adiw	r26, 0x09	; 9
    341c:	9e 01       	movw	r18, r28
    341e:	28 54       	subi	r18, 0x48	; 72
    3420:	3f 4f       	sbci	r19, 0xFF	; 255
    3422:	41 91       	ld	r20, Z+
    3424:	4d 93       	st	X+, r20
    3426:	e2 17       	cp	r30, r18
    3428:	f3 07       	cpc	r31, r19
    342a:	d9 f7       	brne	.-10     	; 0x3422 <eepromSavePattern+0xcc>
    342c:	4e 01       	movw	r8, r28
    342e:	b1 e1       	ldi	r27, 0x11	; 17
    3430:	8b 0e       	add	r8, r27
    3432:	91 1c       	adc	r9, r1
    3434:	7e 01       	movw	r14, r28
    3436:	e0 ec       	ldi	r30, 0xC0	; 192
    3438:	ee 0e       	add	r14, r30
    343a:	f1 1c       	adc	r15, r1
    343c:	d4 01       	movw	r26, r8
    343e:	f9 01       	movw	r30, r18
    3440:	41 91       	ld	r20, Z+
    3442:	9f 01       	movw	r18, r30
    3444:	4d 93       	st	X+, r20
    3446:	ee 15       	cp	r30, r14
    3448:	ff 05       	cpc	r31, r15
    344a:	c9 f7       	brne	.-14     	; 0x343e <eepromSavePattern+0xe8>
    344c:	9e 01       	movw	r18, r28
    344e:	27 5e       	subi	r18, 0xE7	; 231
    3450:	3f 4f       	sbci	r19, 0xFF	; 255
    3452:	be 01       	movw	r22, r28
    3454:	60 53       	subi	r22, 0x30	; 48
    3456:	7f 4f       	sbci	r23, 0xFF	; 255
    3458:	d7 01       	movw	r26, r14
    345a:	4d 91       	ld	r20, X+
    345c:	7d 01       	movw	r14, r26
    345e:	f9 01       	movw	r30, r18
    3460:	41 93       	st	Z+, r20
    3462:	9f 01       	movw	r18, r30
    3464:	a6 17       	cp	r26, r22
    3466:	b7 07       	cpc	r27, r23
    3468:	b9 f7       	brne	.-18     	; 0x3458 <eepromSavePattern+0x102>
    346a:	9e 01       	movw	r18, r28
    346c:	27 5d       	subi	r18, 0xD7	; 215
    346e:	3f 4f       	sbci	r19, 0xFF	; 255
    3470:	de 01       	movw	r26, r28
    3472:	a0 52       	subi	r26, 0x20	; 32
    3474:	bf 4f       	sbci	r27, 0xFF	; 255
    3476:	fb 01       	movw	r30, r22
    3478:	41 91       	ld	r20, Z+
    347a:	bf 01       	movw	r22, r30
    347c:	f9 01       	movw	r30, r18
    347e:	41 93       	st	Z+, r20
    3480:	9f 01       	movw	r18, r30
    3482:	6a 17       	cp	r22, r26
    3484:	7b 07       	cpc	r23, r27
    3486:	b9 f7       	brne	.-18     	; 0x3476 <eepromSavePattern+0x120>
    3488:	9e 01       	movw	r18, r28
    348a:	27 5c       	subi	r18, 0xC7	; 199
    348c:	3f 4f       	sbci	r19, 0xFF	; 255
    348e:	be 01       	movw	r22, r28
    3490:	60 51       	subi	r22, 0x10	; 16
    3492:	7f 4f       	sbci	r23, 0xFF	; 255
    3494:	4d 91       	ld	r20, X+
    3496:	f9 01       	movw	r30, r18
    3498:	41 93       	st	Z+, r20
    349a:	9f 01       	movw	r18, r30
    349c:	a6 17       	cp	r26, r22
    349e:	b7 07       	cpc	r27, r23
    34a0:	c9 f7       	brne	.-14     	; 0x3494 <eepromSavePattern+0x13e>
    34a2:	9e 01       	movw	r18, r28
    34a4:	27 5b       	subi	r18, 0xB7	; 183
    34a6:	3f 4f       	sbci	r19, 0xFF	; 255
    34a8:	de 01       	movw	r26, r28
    34aa:	b3 95       	inc	r27
    34ac:	fb 01       	movw	r30, r22
    34ae:	41 91       	ld	r20, Z+
    34b0:	bf 01       	movw	r22, r30
    34b2:	f9 01       	movw	r30, r18
    34b4:	41 93       	st	Z+, r20
    34b6:	9f 01       	movw	r18, r30
    34b8:	6a 17       	cp	r22, r26
    34ba:	7b 07       	cpc	r23, r27
    34bc:	b9 f7       	brne	.-18     	; 0x34ac <eepromSavePattern+0x156>
    34be:	9e 01       	movw	r18, r28
    34c0:	27 5a       	subi	r18, 0xA7	; 167
    34c2:	3f 4f       	sbci	r19, 0xFF	; 255
    34c4:	be 01       	movw	r22, r28
    34c6:	60 5f       	subi	r22, 0xF0	; 240
    34c8:	7e 4f       	sbci	r23, 0xFE	; 254
    34ca:	4d 91       	ld	r20, X+
    34cc:	f9 01       	movw	r30, r18
    34ce:	41 93       	st	Z+, r20
    34d0:	9f 01       	movw	r18, r30
    34d2:	a6 17       	cp	r26, r22
    34d4:	b7 07       	cpc	r27, r23
    34d6:	c9 f7       	brne	.-14     	; 0x34ca <eepromSavePattern+0x174>
    34d8:	de 01       	movw	r26, r28
    34da:	a7 59       	subi	r26, 0x97	; 151
    34dc:	bf 4f       	sbci	r27, 0xFF	; 255
    34de:	5e 01       	movw	r10, r28
    34e0:	f0 ee       	ldi	r31, 0xE0	; 224
    34e2:	af 1a       	sub	r10, r31
    34e4:	fe ef       	ldi	r31, 0xFE	; 254
    34e6:	bf 0a       	sbc	r11, r31
    34e8:	fb 01       	movw	r30, r22
    34ea:	21 91       	ld	r18, Z+
    34ec:	bf 01       	movw	r22, r30
    34ee:	2d 93       	st	X+, r18
    34f0:	ea 15       	cp	r30, r10
    34f2:	fb 05       	cpc	r31, r11
    34f4:	c9 f7       	brne	.-14     	; 0x34e8 <eepromSavePattern+0x192>
    34f6:	eb 96       	adiw	r28, 0x3b	; 59
    34f8:	9f af       	std	Y+63, r25	; 0x3f
    34fa:	eb 97       	sbiw	r28, 0x3b	; 59
    34fc:	ec 96       	adiw	r28, 0x3c	; 60
    34fe:	8f af       	std	Y+63, r24	; 0x3f
    3500:	ec 97       	sbiw	r28, 0x3c	; 60
    3502:	ce 58       	subi	r28, 0x8E	; 142
    3504:	de 4f       	sbci	r29, 0xFE	; 254
    3506:	88 81       	ld	r24, Y
    3508:	c2 57       	subi	r28, 0x72	; 114
    350a:	d1 40       	sbci	r29, 0x01	; 1
    350c:	ed 96       	adiw	r28, 0x3d	; 61
    350e:	8f af       	std	Y+63, r24	; 0x3f
    3510:	ed 97       	sbiw	r28, 0x3d	; 61
    3512:	85 2d       	mov	r24, r5
    3514:	c8 de       	rcall	.-624    	; 0x32a6 <twi_start>
    3516:	81 30       	cpi	r24, 0x01	; 1
    3518:	81 f4       	brne	.+32     	; 0x353a <eepromSavePattern+0x1e4>
    351a:	84 e1       	ldi	r24, 0x14	; 20
    351c:	ee e0       	ldi	r30, 0x0E	; 14
    351e:	f2 e0       	ldi	r31, 0x02	; 2
    3520:	de 01       	movw	r26, r28
    3522:	af 57       	subi	r26, 0x7F	; 127
    3524:	bf 4f       	sbci	r27, 0xFF	; 255
    3526:	01 90       	ld	r0, Z+
    3528:	0d 92       	st	X+, r0
    352a:	8a 95       	dec	r24
    352c:	e1 f7       	brne	.-8      	; 0x3526 <eepromSavePattern+0x1d0>
    352e:	63 e0       	ldi	r22, 0x03	; 3
    3530:	70 e0       	ldi	r23, 0x00	; 0
    3532:	ce 01       	movw	r24, r28
    3534:	8f 57       	subi	r24, 0x7F	; 127
    3536:	9f 4f       	sbci	r25, 0xFF	; 255
    3538:	04 d9       	rcall	.-3576   	; 0x2742 <outputS>
    353a:	87 2d       	mov	r24, r7
    353c:	e4 de       	rcall	.-568    	; 0x3306 <twi_write>
    353e:	46 2c       	mov	r4, r6
    3540:	86 2d       	mov	r24, r6
    3542:	e1 de       	rcall	.-574    	; 0x3306 <twi_write>
    3544:	6e 01       	movw	r12, r28
    3546:	fd e7       	ldi	r31, 0x7D	; 125
    3548:	cf 0e       	add	r12, r31
    354a:	d1 1c       	adc	r13, r1
    354c:	78 01       	movw	r14, r16
    354e:	d7 01       	movw	r26, r14
    3550:	8d 91       	ld	r24, X+
    3552:	7d 01       	movw	r14, r26
    3554:	d8 de       	rcall	.-592    	; 0x3306 <twi_write>
    3556:	ce 14       	cp	r12, r14
    3558:	df 04       	cpc	r13, r15
    355a:	c9 f7       	brne	.-14     	; 0x354e <eepromSavePattern+0x1f8>
    355c:	cb de       	rcall	.-618    	; 0x32f4 <twi_stop>
    355e:	ef e1       	ldi	r30, 0x1F	; 31
    3560:	fe e4       	ldi	r31, 0x4E	; 78
    3562:	31 97       	sbiw	r30, 0x01	; 1
    3564:	f1 f7       	brne	.-4      	; 0x3562 <eepromSavePattern+0x20c>
    3566:	00 c0       	rjmp	.+0      	; 0x3568 <eepromSavePattern+0x212>
    3568:	00 00       	nop
    356a:	9e 01       	movw	r18, r28
    356c:	20 5d       	subi	r18, 0xD0	; 208
    356e:	3e 4f       	sbci	r19, 0xFE	; 254
    3570:	f8 01       	movw	r30, r16
    3572:	d5 01       	movw	r26, r10
    3574:	8d 91       	ld	r24, X+
    3576:	5d 01       	movw	r10, r26
    3578:	81 93       	st	Z+, r24
    357a:	2a 17       	cp	r18, r26
    357c:	3b 07       	cpc	r19, r27
    357e:	c9 f7       	brne	.-14     	; 0x3572 <eepromSavePattern+0x21c>
    3580:	de 01       	movw	r26, r28
    3582:	91 96       	adiw	r26, 0x21	; 33
    3584:	f9 01       	movw	r30, r18
    3586:	81 91       	ld	r24, Z+
    3588:	9f 01       	movw	r18, r30
    358a:	f4 01       	movw	r30, r8
    358c:	81 93       	st	Z+, r24
    358e:	4f 01       	movw	r8, r30
    3590:	ae 17       	cp	r26, r30
    3592:	bf 07       	cpc	r27, r31
    3594:	b9 f7       	brne	.-18     	; 0x3584 <eepromSavePattern+0x22e>
    3596:	ce 01       	movw	r24, r28
    3598:	80 5c       	subi	r24, 0xC0	; 192
    359a:	9e 4f       	sbci	r25, 0xFE	; 254
    359c:	ae 01       	movw	r20, r28
    359e:	4f 5c       	subi	r20, 0xCF	; 207
    35a0:	5f 4f       	sbci	r21, 0xFF	; 255
    35a2:	fc 01       	movw	r30, r24
    35a4:	21 91       	ld	r18, Z+
    35a6:	cf 01       	movw	r24, r30
    35a8:	2d 93       	st	X+, r18
    35aa:	a4 17       	cp	r26, r20
    35ac:	b5 07       	cpc	r27, r21
    35ae:	c9 f7       	brne	.-14     	; 0x35a2 <eepromSavePattern+0x24c>
    35b0:	ce 01       	movw	r24, r28
    35b2:	80 5b       	subi	r24, 0xB0	; 176
    35b4:	9e 4f       	sbci	r25, 0xFE	; 254
    35b6:	de 01       	movw	r26, r28
    35b8:	af 5b       	subi	r26, 0xBF	; 191
    35ba:	bf 4f       	sbci	r27, 0xFF	; 255
    35bc:	fc 01       	movw	r30, r24
    35be:	21 91       	ld	r18, Z+
    35c0:	cf 01       	movw	r24, r30
    35c2:	fa 01       	movw	r30, r20
    35c4:	21 93       	st	Z+, r18
    35c6:	af 01       	movw	r20, r30
    35c8:	ea 17       	cp	r30, r26
    35ca:	fb 07       	cpc	r31, r27
    35cc:	b9 f7       	brne	.-18     	; 0x35bc <eepromSavePattern+0x266>
    35ce:	fe 01       	movw	r30, r28
    35d0:	e0 5a       	subi	r30, 0xA0	; 160
    35d2:	fe 4f       	sbci	r31, 0xFE	; 254
    35d4:	9e 01       	movw	r18, r28
    35d6:	20 59       	subi	r18, 0x90	; 144
    35d8:	3e 4f       	sbci	r19, 0xFE	; 254
    35da:	81 91       	ld	r24, Z+
    35dc:	8d 93       	st	X+, r24
    35de:	2e 17       	cp	r18, r30
    35e0:	3f 07       	cpc	r19, r31
    35e2:	d9 f7       	brne	.-10     	; 0x35da <eepromSavePattern+0x284>
    35e4:	ae 01       	movw	r20, r28
    35e6:	4d 58       	subi	r20, 0x8D	; 141
    35e8:	5e 4f       	sbci	r21, 0xFE	; 254
    35ea:	ce 01       	movw	r24, r28
    35ec:	8f 5a       	subi	r24, 0xAF	; 175
    35ee:	9f 4f       	sbci	r25, 0xFF	; 255
    35f0:	de 01       	movw	r26, r28
    35f2:	ad 57       	subi	r26, 0x7D	; 125
    35f4:	be 4f       	sbci	r27, 0xFE	; 254
    35f6:	fa 01       	movw	r30, r20
    35f8:	21 91       	ld	r18, Z+
    35fa:	af 01       	movw	r20, r30
    35fc:	fc 01       	movw	r30, r24
    35fe:	21 93       	st	Z+, r18
    3600:	cf 01       	movw	r24, r30
    3602:	a4 17       	cp	r26, r20
    3604:	b5 07       	cpc	r27, r21
    3606:	b9 f7       	brne	.-18     	; 0x35f6 <eepromSavePattern+0x2a0>
    3608:	ce 01       	movw	r24, r28
    360a:	8f 59       	subi	r24, 0x9F	; 159
    360c:	9f 4f       	sbci	r25, 0xFF	; 255
    360e:	ae 01       	movw	r20, r28
    3610:	4d 56       	subi	r20, 0x6D	; 109
    3612:	5e 4f       	sbci	r21, 0xFE	; 254
    3614:	2d 91       	ld	r18, X+
    3616:	fc 01       	movw	r30, r24
    3618:	21 93       	st	Z+, r18
    361a:	cf 01       	movw	r24, r30
    361c:	a4 17       	cp	r26, r20
    361e:	b5 07       	cpc	r27, r21
    3620:	c9 f7       	brne	.-14     	; 0x3614 <eepromSavePattern+0x2be>
    3622:	de 01       	movw	r26, r28
    3624:	af 58       	subi	r26, 0x8F	; 143
    3626:	bf 4f       	sbci	r27, 0xFF	; 255
    3628:	7e 01       	movw	r14, r28
    362a:	fd e5       	ldi	r31, 0x5D	; 93
    362c:	ef 1a       	sub	r14, r31
    362e:	fe ef       	ldi	r31, 0xFE	; 254
    3630:	ff 0a       	sbc	r15, r31
    3632:	fa 01       	movw	r30, r20
    3634:	81 91       	ld	r24, Z+
    3636:	af 01       	movw	r20, r30
    3638:	8d 93       	st	X+, r24
    363a:	ee 16       	cp	r14, r30
    363c:	ff 06       	cpc	r15, r31
    363e:	c9 f7       	brne	.-14     	; 0x3632 <eepromSavePattern+0x2dc>
    3640:	85 2d       	mov	r24, r5
    3642:	31 de       	rcall	.-926    	; 0x32a6 <twi_start>
    3644:	81 30       	cpi	r24, 0x01	; 1
    3646:	81 f4       	brne	.+32     	; 0x3668 <eepromSavePattern+0x312>
    3648:	84 e1       	ldi	r24, 0x14	; 20
    364a:	e3 e2       	ldi	r30, 0x23	; 35
    364c:	f2 e0       	ldi	r31, 0x02	; 2
    364e:	de 01       	movw	r26, r28
    3650:	af 57       	subi	r26, 0x7F	; 127
    3652:	bf 4f       	sbci	r27, 0xFF	; 255
    3654:	01 90       	ld	r0, Z+
    3656:	0d 92       	st	X+, r0
    3658:	8a 95       	dec	r24
    365a:	e1 f7       	brne	.-8      	; 0x3654 <eepromSavePattern+0x2fe>
    365c:	63 e0       	ldi	r22, 0x03	; 3
    365e:	70 e0       	ldi	r23, 0x00	; 0
    3660:	ce 01       	movw	r24, r28
    3662:	8f 57       	subi	r24, 0x7F	; 127
    3664:	9f 4f       	sbci	r25, 0xFF	; 255
    3666:	6d d8       	rcall	.-3878   	; 0x2742 <outputS>
    3668:	c3 01       	movw	r24, r6
    366a:	80 58       	subi	r24, 0x80	; 128
    366c:	9f 4f       	sbci	r25, 0xFF	; 255
    366e:	89 2f       	mov	r24, r25
    3670:	4a de       	rcall	.-876    	; 0x3306 <twi_write>
    3672:	80 e8       	ldi	r24, 0x80	; 128
    3674:	84 0d       	add	r24, r4
    3676:	47 de       	rcall	.-882    	; 0x3306 <twi_write>
    3678:	6e 01       	movw	r12, r28
    367a:	f1 e8       	ldi	r31, 0x81	; 129
    367c:	cf 0e       	add	r12, r31
    367e:	d1 1c       	adc	r13, r1
    3680:	d8 01       	movw	r26, r16
    3682:	8d 91       	ld	r24, X+
    3684:	8d 01       	movw	r16, r26
    3686:	3f de       	rcall	.-898    	; 0x3306 <twi_write>
    3688:	c0 16       	cp	r12, r16
    368a:	d1 06       	cpc	r13, r17
    368c:	c9 f7       	brne	.-14     	; 0x3680 <eepromSavePattern+0x32a>
    368e:	32 de       	rcall	.-924    	; 0x32f4 <twi_stop>
    3690:	ef e1       	ldi	r30, 0x1F	; 31
    3692:	fe e4       	ldi	r31, 0x4E	; 78
    3694:	31 97       	sbiw	r30, 0x01	; 1
    3696:	f1 f7       	brne	.-4      	; 0x3694 <eepromSavePattern+0x33e>
    3698:	00 c0       	rjmp	.+0      	; 0x369a <eepromSavePattern+0x344>
    369a:	00 00       	nop
    369c:	85 2d       	mov	r24, r5
    369e:	03 de       	rcall	.-1018   	; 0x32a6 <twi_start>
    36a0:	81 30       	cpi	r24, 0x01	; 1
    36a2:	81 f4       	brne	.+32     	; 0x36c4 <eepromSavePattern+0x36e>
    36a4:	84 e1       	ldi	r24, 0x14	; 20
    36a6:	e8 e3       	ldi	r30, 0x38	; 56
    36a8:	f2 e0       	ldi	r31, 0x02	; 2
    36aa:	de 01       	movw	r26, r28
    36ac:	af 57       	subi	r26, 0x7F	; 127
    36ae:	bf 4f       	sbci	r27, 0xFF	; 255
    36b0:	01 90       	ld	r0, Z+
    36b2:	0d 92       	st	X+, r0
    36b4:	8a 95       	dec	r24
    36b6:	e1 f7       	brne	.-8      	; 0x36b0 <eepromSavePattern+0x35a>
    36b8:	63 e0       	ldi	r22, 0x03	; 3
    36ba:	70 e0       	ldi	r23, 0x00	; 0
    36bc:	ce 01       	movw	r24, r28
    36be:	8f 57       	subi	r24, 0x7F	; 127
    36c0:	9f 4f       	sbci	r25, 0xFF	; 255
    36c2:	3f d8       	rcall	.-3970   	; 0x2742 <outputS>
    36c4:	73 94       	inc	r7
    36c6:	87 2d       	mov	r24, r7
    36c8:	1e de       	rcall	.-964    	; 0x3306 <twi_write>
    36ca:	84 2d       	mov	r24, r4
    36cc:	1c de       	rcall	.-968    	; 0x3306 <twi_write>
    36ce:	6e 01       	movw	r12, r28
    36d0:	2d ed       	ldi	r18, 0xDD	; 221
    36d2:	c2 1a       	sub	r12, r18
    36d4:	2d ef       	ldi	r18, 0xFD	; 253
    36d6:	d2 0a       	sbc	r13, r18
    36d8:	d7 01       	movw	r26, r14
    36da:	1c 91       	ld	r17, X
    36dc:	11 96       	adiw	r26, 0x01	; 1
    36de:	8c 91       	ld	r24, X
    36e0:	b2 e0       	ldi	r27, 0x02	; 2
    36e2:	eb 0e       	add	r14, r27
    36e4:	f1 1c       	adc	r15, r1
    36e6:	0f de       	rcall	.-994    	; 0x3306 <twi_write>
    36e8:	81 2f       	mov	r24, r17
    36ea:	0d de       	rcall	.-998    	; 0x3306 <twi_write>
    36ec:	ce 14       	cp	r12, r14
    36ee:	df 04       	cpc	r13, r15
    36f0:	99 f7       	brne	.-26     	; 0x36d8 <eepromSavePattern+0x382>
    36f2:	00 de       	rcall	.-1024   	; 0x32f4 <twi_stop>
    36f4:	ef e1       	ldi	r30, 0x1F	; 31
    36f6:	fe e4       	ldi	r31, 0x4E	; 78
    36f8:	31 97       	sbiw	r30, 0x01	; 1
    36fa:	f1 f7       	brne	.-4      	; 0x36f8 <eepromSavePattern+0x3a2>
    36fc:	00 c0       	rjmp	.+0      	; 0x36fe <eepromSavePattern+0x3a8>
    36fe:	00 00       	nop
    3700:	cc 56       	subi	r28, 0x6C	; 108
    3702:	df 4f       	sbci	r29, 0xFF	; 255
    3704:	0f b6       	in	r0, 0x3f	; 63
    3706:	f8 94       	cli
    3708:	de bf       	out	0x3e, r29	; 62
    370a:	0f be       	out	0x3f, r0	; 63
    370c:	cd bf       	out	0x3d, r28	; 61
    370e:	df 91       	pop	r29
    3710:	cf 91       	pop	r28
    3712:	1f 91       	pop	r17
    3714:	0f 91       	pop	r16
    3716:	ff 90       	pop	r15
    3718:	ef 90       	pop	r14
    371a:	df 90       	pop	r13
    371c:	cf 90       	pop	r12
    371e:	bf 90       	pop	r11
    3720:	af 90       	pop	r10
    3722:	9f 90       	pop	r9
    3724:	8f 90       	pop	r8
    3726:	7f 90       	pop	r7
    3728:	6f 90       	pop	r6
    372a:	5f 90       	pop	r5
    372c:	4f 90       	pop	r4
    372e:	08 95       	ret

00003730 <eepromLoadPattern>:
    3730:	8f 92       	push	r8
    3732:	9f 92       	push	r9
    3734:	af 92       	push	r10
    3736:	bf 92       	push	r11
    3738:	cf 92       	push	r12
    373a:	df 92       	push	r13
    373c:	ef 92       	push	r14
    373e:	ff 92       	push	r15
    3740:	0f 93       	push	r16
    3742:	1f 93       	push	r17
    3744:	cf 93       	push	r28
    3746:	df 93       	push	r29
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    374c:	c4 59       	subi	r28, 0x94	; 148
    374e:	d1 40       	sbci	r29, 0x01	; 1
    3750:	0f b6       	in	r0, 0x3f	; 63
    3752:	f8 94       	cli
    3754:	de bf       	out	0x3e, r29	; 62
    3756:	0f be       	out	0x3f, r0	; 63
    3758:	cd bf       	out	0x3d, r28	; 61
    375a:	7c 01       	movw	r14, r24
    375c:	86 2f       	mov	r24, r22
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	66 23       	and	r22, r22
    3762:	84 f0       	brlt	.+32     	; 0x3784 <eepromLoadPattern+0x54>
    3764:	01 97       	sbiw	r24, 0x01	; 1
    3766:	9c 01       	movw	r18, r24
    3768:	22 0f       	add	r18, r18
    376a:	33 1f       	adc	r19, r19
    376c:	82 0f       	add	r24, r18
    376e:	93 1f       	adc	r25, r19
    3770:	96 95       	lsr	r25
    3772:	98 2f       	mov	r25, r24
    3774:	88 27       	eor	r24, r24
    3776:	97 95       	ror	r25
    3778:	87 95       	ror	r24
    377a:	08 2f       	mov	r16, r24
    377c:	d9 2e       	mov	r13, r25
    377e:	80 ea       	ldi	r24, 0xA0	; 160
    3780:	11 ea       	ldi	r17, 0xA1	; 161
    3782:	10 c0       	rjmp	.+32     	; 0x37a4 <eepromLoadPattern+0x74>
    3784:	80 58       	subi	r24, 0x80	; 128
    3786:	91 09       	sbc	r25, r1
    3788:	9c 01       	movw	r18, r24
    378a:	22 0f       	add	r18, r18
    378c:	33 1f       	adc	r19, r19
    378e:	82 0f       	add	r24, r18
    3790:	93 1f       	adc	r25, r19
    3792:	96 95       	lsr	r25
    3794:	98 2f       	mov	r25, r24
    3796:	88 27       	eor	r24, r24
    3798:	97 95       	ror	r25
    379a:	87 95       	ror	r24
    379c:	08 2f       	mov	r16, r24
    379e:	d9 2e       	mov	r13, r25
    37a0:	88 ea       	ldi	r24, 0xA8	; 168
    37a2:	19 ea       	ldi	r17, 0xA9	; 169
    37a4:	80 dd       	rcall	.-1280   	; 0x32a6 <twi_start>
    37a6:	81 30       	cpi	r24, 0x01	; 1
    37a8:	31 f4       	brne	.+12     	; 0x37b6 <eepromLoadPattern+0x86>
    37aa:	63 e0       	ldi	r22, 0x03	; 3
    37ac:	70 e0       	ldi	r23, 0x00	; 0
    37ae:	8e eb       	ldi	r24, 0xBE	; 190
    37b0:	93 e0       	ldi	r25, 0x03	; 3
    37b2:	0e 94 a1 13 	call	0x2742	; 0x2742 <outputS>
    37b6:	8d 2d       	mov	r24, r13
    37b8:	a6 dd       	rcall	.-1204   	; 0x3306 <twi_write>
    37ba:	80 2f       	mov	r24, r16
    37bc:	a4 dd       	rcall	.-1208   	; 0x3306 <twi_write>
    37be:	81 2f       	mov	r24, r17
    37c0:	72 dd       	rcall	.-1308   	; 0x32a6 <twi_start>
    37c2:	81 30       	cpi	r24, 0x01	; 1
    37c4:	09 f0       	breq	.+2      	; 0x37c8 <eepromLoadPattern+0x98>
    37c6:	48 c1       	rjmp	.+656    	; 0x3a58 <eepromLoadPattern+0x328>
    37c8:	84 e1       	ldi	r24, 0x14	; 20
    37ca:	ed e4       	ldi	r30, 0x4D	; 77
    37cc:	f2 e0       	ldi	r31, 0x02	; 2
    37ce:	de 01       	movw	r26, r28
    37d0:	af 57       	subi	r26, 0x7F	; 127
    37d2:	be 4f       	sbci	r27, 0xFE	; 254
    37d4:	01 90       	ld	r0, Z+
    37d6:	0d 92       	st	X+, r0
    37d8:	8a 95       	dec	r24
    37da:	e1 f7       	brne	.-8      	; 0x37d4 <eepromLoadPattern+0xa4>
    37dc:	63 e0       	ldi	r22, 0x03	; 3
    37de:	70 e0       	ldi	r23, 0x00	; 0
    37e0:	ce 01       	movw	r24, r28
    37e2:	8f 57       	subi	r24, 0x7F	; 127
    37e4:	9e 4f       	sbci	r25, 0xFE	; 254
    37e6:	0e 94 a1 13 	call	0x2742	; 0x2742 <outputS>
    37ea:	36 c1       	rjmp	.+620    	; 0x3a58 <eepromLoadPattern+0x328>
    37ec:	9e dd       	rcall	.-1220   	; 0x332a <twi_readAck>
    37ee:	d8 01       	movw	r26, r16
    37f0:	8d 93       	st	X+, r24
    37f2:	8d 01       	movw	r16, r26
    37f4:	ac 15       	cp	r26, r12
    37f6:	bd 05       	cpc	r27, r13
    37f8:	c9 f7       	brne	.-14     	; 0x37ec <eepromLoadPattern+0xbc>
    37fa:	a2 dd       	rcall	.-1212   	; 0x3340 <twi_readNak>
    37fc:	c0 58       	subi	r28, 0x80	; 128
    37fe:	de 4f       	sbci	r29, 0xFE	; 254
    3800:	88 83       	st	Y, r24
    3802:	c0 58       	subi	r28, 0x80	; 128
    3804:	d1 40       	sbci	r29, 0x01	; 1
    3806:	76 dd       	rcall	.-1300   	; 0x32f4 <twi_stop>
    3808:	87 01       	movw	r16, r14
    380a:	4e 01       	movw	r8, r28
    380c:	b9 e0       	ldi	r27, 0x09	; 9
    380e:	8b 0e       	add	r8, r27
    3810:	91 1c       	adc	r9, r1
    3812:	f7 01       	movw	r30, r14
    3814:	d5 01       	movw	r26, r10
    3816:	8d 91       	ld	r24, X+
    3818:	5d 01       	movw	r10, r26
    381a:	81 93       	st	Z+, r24
    381c:	a8 15       	cp	r26, r8
    381e:	b9 05       	cpc	r27, r9
    3820:	c9 f7       	brne	.-14     	; 0x3814 <eepromLoadPattern+0xe4>
    3822:	d1 2c       	mov	r13, r1
    3824:	f4 01       	movw	r30, r8
    3826:	81 91       	ld	r24, Z+
    3828:	4f 01       	movw	r8, r30
    382a:	f8 01       	movw	r30, r16
    382c:	80 87       	std	Z+8, r24	; 0x08
    382e:	4d 2d       	mov	r20, r13
    3830:	60 81       	ld	r22, Z
    3832:	0f 5f       	subi	r16, 0xFF	; 255
    3834:	1f 4f       	sbci	r17, 0xFF	; 255
    3836:	bb da       	rcall	.-2698   	; 0x2dae <setOutputVolume>
    3838:	d3 94       	inc	r13
    383a:	f8 e0       	ldi	r31, 0x08	; 8
    383c:	df 12       	cpse	r13, r31
    383e:	f2 cf       	rjmp	.-28     	; 0x3824 <eepromLoadPattern+0xf4>
    3840:	5e 01       	movw	r10, r28
    3842:	81 e1       	ldi	r24, 0x11	; 17
    3844:	a8 0e       	add	r10, r24
    3846:	b1 1c       	adc	r11, r1
    3848:	67 01       	movw	r12, r14
    384a:	90 e1       	ldi	r25, 0x10	; 16
    384c:	c9 0e       	add	r12, r25
    384e:	d1 1c       	adc	r13, r1
    3850:	10 e0       	ldi	r17, 0x00	; 0
    3852:	d5 01       	movw	r26, r10
    3854:	4d 91       	ld	r20, X+
    3856:	5d 01       	movw	r10, r26
    3858:	f6 01       	movw	r30, r12
    385a:	41 93       	st	Z+, r20
    385c:	6f 01       	movw	r12, r30
    385e:	60 e0       	ldi	r22, 0x00	; 0
    3860:	81 2f       	mov	r24, r17
    3862:	1c db       	rcall	.-2504   	; 0x2e9c <outputSampleRate>
    3864:	1f 5f       	subi	r17, 0xFF	; 255
    3866:	18 30       	cpi	r17, 0x08	; 8
    3868:	a1 f7       	brne	.-24     	; 0x3852 <eepromLoadPattern+0x122>
    386a:	fe 01       	movw	r30, r28
    386c:	79 96       	adiw	r30, 0x19	; 25
    386e:	c7 01       	movw	r24, r14
    3870:	48 96       	adiw	r24, 0x18	; 24
    3872:	ae 01       	movw	r20, r28
    3874:	47 5d       	subi	r20, 0xD7	; 215
    3876:	5f 4f       	sbci	r21, 0xFF	; 255
    3878:	21 91       	ld	r18, Z+
    387a:	dc 01       	movw	r26, r24
    387c:	2d 93       	st	X+, r18
    387e:	cd 01       	movw	r24, r26
    3880:	e4 17       	cp	r30, r20
    3882:	f5 07       	cpc	r31, r21
    3884:	c9 f7       	brne	.-14     	; 0x3878 <eepromLoadPattern+0x148>
    3886:	57 01       	movw	r10, r14
    3888:	b8 e2       	ldi	r27, 0x28	; 40
    388a:	ab 0e       	add	r10, r27
    388c:	b1 1c       	adc	r11, r1
    388e:	de 01       	movw	r26, r28
    3890:	d9 96       	adiw	r26, 0x39	; 57
    3892:	c5 01       	movw	r24, r10
    3894:	fa 01       	movw	r30, r20
    3896:	21 91       	ld	r18, Z+
    3898:	af 01       	movw	r20, r30
    389a:	fc 01       	movw	r30, r24
    389c:	21 93       	st	Z+, r18
    389e:	cf 01       	movw	r24, r30
    38a0:	4a 17       	cp	r20, r26
    38a2:	5b 07       	cpc	r21, r27
    38a4:	b9 f7       	brne	.-18     	; 0x3894 <eepromLoadPattern+0x164>
    38a6:	c7 01       	movw	r24, r14
    38a8:	c8 96       	adiw	r24, 0x38	; 56
    38aa:	ae 01       	movw	r20, r28
    38ac:	47 5b       	subi	r20, 0xB7	; 183
    38ae:	5f 4f       	sbci	r21, 0xFF	; 255
    38b0:	2d 91       	ld	r18, X+
    38b2:	fc 01       	movw	r30, r24
    38b4:	21 93       	st	Z+, r18
    38b6:	cf 01       	movw	r24, r30
    38b8:	a4 17       	cp	r26, r20
    38ba:	b5 07       	cpc	r27, r21
    38bc:	c9 f7       	brne	.-14     	; 0x38b0 <eepromLoadPattern+0x180>
    38be:	c7 01       	movw	r24, r14
    38c0:	88 5b       	subi	r24, 0xB8	; 184
    38c2:	9f 4f       	sbci	r25, 0xFF	; 255
    38c4:	de 01       	movw	r26, r28
    38c6:	a7 5a       	subi	r26, 0xA7	; 167
    38c8:	bf 4f       	sbci	r27, 0xFF	; 255
    38ca:	fa 01       	movw	r30, r20
    38cc:	21 91       	ld	r18, Z+
    38ce:	af 01       	movw	r20, r30
    38d0:	fc 01       	movw	r30, r24
    38d2:	21 93       	st	Z+, r18
    38d4:	cf 01       	movw	r24, r30
    38d6:	4a 17       	cp	r20, r26
    38d8:	5b 07       	cpc	r21, r27
    38da:	b9 f7       	brne	.-18     	; 0x38ca <eepromLoadPattern+0x19a>
    38dc:	c7 01       	movw	r24, r14
    38de:	88 5a       	subi	r24, 0xA8	; 168
    38e0:	9f 4f       	sbci	r25, 0xFF	; 255
    38e2:	ae 01       	movw	r20, r28
    38e4:	47 59       	subi	r20, 0x97	; 151
    38e6:	5f 4f       	sbci	r21, 0xFF	; 255
    38e8:	2d 91       	ld	r18, X+
    38ea:	fc 01       	movw	r30, r24
    38ec:	21 93       	st	Z+, r18
    38ee:	cf 01       	movw	r24, r30
    38f0:	a4 17       	cp	r26, r20
    38f2:	b5 07       	cpc	r27, r21
    38f4:	c9 f7       	brne	.-14     	; 0x38e8 <eepromLoadPattern+0x1b8>
    38f6:	d7 01       	movw	r26, r14
    38f8:	a8 59       	subi	r26, 0x98	; 152
    38fa:	bf 4f       	sbci	r27, 0xFF	; 255
    38fc:	9e 01       	movw	r18, r28
    38fe:	27 58       	subi	r18, 0x87	; 135
    3900:	3f 4f       	sbci	r19, 0xFF	; 255
    3902:	fa 01       	movw	r30, r20
    3904:	81 91       	ld	r24, Z+
    3906:	af 01       	movw	r20, r30
    3908:	8d 93       	st	X+, r24
    390a:	e2 17       	cp	r30, r18
    390c:	f3 07       	cpc	r31, r19
    390e:	c9 f7       	brne	.-14     	; 0x3902 <eepromLoadPattern+0x1d2>
    3910:	f7 01       	movw	r30, r14
    3912:	e8 53       	subi	r30, 0x38	; 56
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	eb 96       	adiw	r28, 0x3b	; 59
    3918:	8f ad       	ldd	r24, Y+63	; 0x3f
    391a:	eb 97       	sbiw	r28, 0x3b	; 59
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	98 2f       	mov	r25, r24
    3920:	88 27       	eor	r24, r24
    3922:	ec 96       	adiw	r28, 0x3c	; 60
    3924:	2f ad       	ldd	r18, Y+63	; 0x3f
    3926:	ec 97       	sbiw	r28, 0x3c	; 60
    3928:	82 2b       	or	r24, r18
    392a:	91 83       	std	Z+1, r25	; 0x01
    392c:	80 83       	st	Z, r24
    392e:	ed 96       	adiw	r28, 0x3d	; 61
    3930:	8f ad       	ldd	r24, Y+63	; 0x3f
    3932:	ed 97       	sbiw	r28, 0x3d	; 61
    3934:	32 96       	adiw	r30, 0x02	; 2
    3936:	80 83       	st	Z, r24
    3938:	ae 01       	movw	r20, r28
    393a:	4f 57       	subi	r20, 0x7F	; 127
    393c:	5f 4f       	sbci	r21, 0xFF	; 255
    393e:	c7 01       	movw	r24, r14
    3940:	88 58       	subi	r24, 0x88	; 136
    3942:	9f 4f       	sbci	r25, 0xFF	; 255
    3944:	fe 01       	movw	r30, r28
    3946:	ef 56       	subi	r30, 0x6F	; 111
    3948:	ff 4f       	sbci	r31, 0xFF	; 255
    394a:	da 01       	movw	r26, r20
    394c:	2d 91       	ld	r18, X+
    394e:	ad 01       	movw	r20, r26
    3950:	dc 01       	movw	r26, r24
    3952:	2d 93       	st	X+, r18
    3954:	cd 01       	movw	r24, r26
    3956:	e4 17       	cp	r30, r20
    3958:	f5 07       	cpc	r31, r21
    395a:	b9 f7       	brne	.-18     	; 0x394a <eepromLoadPattern+0x21a>
    395c:	c7 01       	movw	r24, r14
    395e:	88 57       	subi	r24, 0x78	; 120
    3960:	9f 4f       	sbci	r25, 0xFF	; 255
    3962:	ae 01       	movw	r20, r28
    3964:	4f 55       	subi	r20, 0x5F	; 95
    3966:	5f 4f       	sbci	r21, 0xFF	; 255
    3968:	21 91       	ld	r18, Z+
    396a:	dc 01       	movw	r26, r24
    396c:	2d 93       	st	X+, r18
    396e:	cd 01       	movw	r24, r26
    3970:	4e 17       	cp	r20, r30
    3972:	5f 07       	cpc	r21, r31
    3974:	c9 f7       	brne	.-14     	; 0x3968 <eepromLoadPattern+0x238>
    3976:	87 01       	movw	r16, r14
    3978:	08 56       	subi	r16, 0x68	; 104
    397a:	1f 4f       	sbci	r17, 0xFF	; 255
    397c:	4e 01       	movw	r8, r28
    397e:	b1 eb       	ldi	r27, 0xB1	; 177
    3980:	8b 0e       	add	r8, r27
    3982:	91 1c       	adc	r9, r1
    3984:	f8 01       	movw	r30, r16
    3986:	da 01       	movw	r26, r20
    3988:	8d 91       	ld	r24, X+
    398a:	ad 01       	movw	r20, r26
    398c:	81 93       	st	Z+, r24
    398e:	8a 16       	cp	r8, r26
    3990:	9b 06       	cpc	r9, r27
    3992:	c9 f7       	brne	.-14     	; 0x3986 <eepromLoadPattern+0x256>
    3994:	6e 01       	movw	r12, r28
    3996:	b1 ec       	ldi	r27, 0xC1	; 193
    3998:	cb 0e       	add	r12, r27
    399a:	d1 1c       	adc	r13, r1
    399c:	f4 01       	movw	r30, r8
    399e:	81 91       	ld	r24, Z+
    39a0:	4f 01       	movw	r8, r30
    39a2:	f8 01       	movw	r30, r16
    39a4:	80 8b       	std	Z+16, r24	; 0x10
    39a6:	d5 01       	movw	r26, r10
    39a8:	2d 91       	ld	r18, X+
    39aa:	5d 01       	movw	r10, r26
    39ac:	1f 96       	adiw	r26, 0x0f	; 15
    39ae:	4c 91       	ld	r20, X
    39b0:	60 81       	ld	r22, Z
    39b2:	0f 5f       	subi	r16, 0xFF	; 255
    39b4:	1f 4f       	sbci	r17, 0xFF	; 255
    39b6:	1f da       	rcall	.-3010   	; 0x2df6 <setTrackVolume>
    39b8:	c8 14       	cp	r12, r8
    39ba:	d9 04       	cpc	r13, r9
    39bc:	79 f7       	brne	.-34     	; 0x399c <eepromLoadPattern+0x26c>
    39be:	97 01       	movw	r18, r14
    39c0:	28 54       	subi	r18, 0x48	; 72
    39c2:	3f 4f       	sbci	r19, 0xFF	; 255
    39c4:	de 01       	movw	r26, r28
    39c6:	af 52       	subi	r26, 0x2F	; 47
    39c8:	bf 4f       	sbci	r27, 0xFF	; 255
    39ca:	f6 01       	movw	r30, r12
    39cc:	81 91       	ld	r24, Z+
    39ce:	6f 01       	movw	r12, r30
    39d0:	f9 01       	movw	r30, r18
    39d2:	81 93       	st	Z+, r24
    39d4:	9f 01       	movw	r18, r30
    39d6:	ca 16       	cp	r12, r26
    39d8:	db 06       	cpc	r13, r27
    39da:	b9 f7       	brne	.-18     	; 0x39ca <eepromLoadPattern+0x29a>
    39dc:	c7 01       	movw	r24, r14
    39de:	85 53       	subi	r24, 0x35	; 53
    39e0:	9f 4f       	sbci	r25, 0xFF	; 255
    39e2:	ae 01       	movw	r20, r28
    39e4:	4f 51       	subi	r20, 0x1F	; 31
    39e6:	5f 4f       	sbci	r21, 0xFF	; 255
    39e8:	2d 91       	ld	r18, X+
    39ea:	fc 01       	movw	r30, r24
    39ec:	21 93       	st	Z+, r18
    39ee:	cf 01       	movw	r24, r30
    39f0:	4a 17       	cp	r20, r26
    39f2:	5b 07       	cpc	r21, r27
    39f4:	c9 f7       	brne	.-14     	; 0x39e8 <eepromLoadPattern+0x2b8>
    39f6:	c7 01       	movw	r24, r14
    39f8:	85 52       	subi	r24, 0x25	; 37
    39fa:	9f 4f       	sbci	r25, 0xFF	; 255
    39fc:	be 01       	movw	r22, r28
    39fe:	6f 50       	subi	r22, 0x0F	; 15
    3a00:	7f 4f       	sbci	r23, 0xFF	; 255
    3a02:	da 01       	movw	r26, r20
    3a04:	2d 91       	ld	r18, X+
    3a06:	ad 01       	movw	r20, r26
    3a08:	fc 01       	movw	r30, r24
    3a0a:	21 93       	st	Z+, r18
    3a0c:	cf 01       	movw	r24, r30
    3a0e:	a6 17       	cp	r26, r22
    3a10:	b7 07       	cpc	r27, r23
    3a12:	b9 f7       	brne	.-18     	; 0x3a02 <eepromLoadPattern+0x2d2>
    3a14:	c7 01       	movw	r24, r14
    3a16:	85 51       	subi	r24, 0x15	; 21
    3a18:	9f 4f       	sbci	r25, 0xFF	; 255
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	ef 5f       	subi	r30, 0xFF	; 255
    3a1e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a20:	db 01       	movw	r26, r22
    3a22:	2d 91       	ld	r18, X+
    3a24:	bd 01       	movw	r22, r26
    3a26:	dc 01       	movw	r26, r24
    3a28:	2d 93       	st	X+, r18
    3a2a:	cd 01       	movw	r24, r26
    3a2c:	e6 17       	cp	r30, r22
    3a2e:	f7 07       	cpc	r31, r23
    3a30:	b9 f7       	brne	.-18     	; 0x3a20 <eepromLoadPattern+0x2f0>
    3a32:	d7 01       	movw	r26, r14
    3a34:	a5 50       	subi	r26, 0x05	; 5
    3a36:	bf 4f       	sbci	r27, 0xFF	; 255
    3a38:	ae 01       	movw	r20, r28
    3a3a:	4f 57       	subi	r20, 0x7F	; 127
    3a3c:	5e 4f       	sbci	r21, 0xFE	; 254
    3a3e:	80 81       	ld	r24, Z
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	98 2f       	mov	r25, r24
    3a44:	88 27       	eor	r24, r24
    3a46:	21 81       	ldd	r18, Z+1	; 0x01
    3a48:	82 2b       	or	r24, r18
    3a4a:	8d 93       	st	X+, r24
    3a4c:	9d 93       	st	X+, r25
    3a4e:	32 96       	adiw	r30, 0x02	; 2
    3a50:	4e 17       	cp	r20, r30
    3a52:	5f 07       	cpc	r21, r31
    3a54:	a1 f7       	brne	.-24     	; 0x3a3e <eepromLoadPattern+0x30e>
    3a56:	0a c0       	rjmp	.+20     	; 0x3a6c <eepromLoadPattern+0x33c>
    3a58:	fe 01       	movw	r30, r28
    3a5a:	31 96       	adiw	r30, 0x01	; 1
    3a5c:	5f 01       	movw	r10, r30
    3a5e:	6e 01       	movw	r12, r28
    3a60:	f0 e8       	ldi	r31, 0x80	; 128
    3a62:	cf 1a       	sub	r12, r31
    3a64:	fe ef       	ldi	r31, 0xFE	; 254
    3a66:	df 0a       	sbc	r13, r31
    3a68:	85 01       	movw	r16, r10
    3a6a:	c0 ce       	rjmp	.-640    	; 0x37ec <eepromLoadPattern+0xbc>
    3a6c:	cc 56       	subi	r28, 0x6C	; 108
    3a6e:	de 4f       	sbci	r29, 0xFE	; 254
    3a70:	0f b6       	in	r0, 0x3f	; 63
    3a72:	f8 94       	cli
    3a74:	de bf       	out	0x3e, r29	; 62
    3a76:	0f be       	out	0x3f, r0	; 63
    3a78:	cd bf       	out	0x3d, r28	; 61
    3a7a:	df 91       	pop	r29
    3a7c:	cf 91       	pop	r28
    3a7e:	1f 91       	pop	r17
    3a80:	0f 91       	pop	r16
    3a82:	ff 90       	pop	r15
    3a84:	ef 90       	pop	r14
    3a86:	df 90       	pop	r13
    3a88:	cf 90       	pop	r12
    3a8a:	bf 90       	pop	r11
    3a8c:	af 90       	pop	r10
    3a8e:	9f 90       	pop	r9
    3a90:	8f 90       	pop	r8
    3a92:	08 95       	ret

00003a94 <factoryResetEeprom>:
    3a94:	ff 92       	push	r15
    3a96:	0f 93       	push	r16
    3a98:	1f 93       	push	r17
    3a9a:	cf 93       	push	r28
    3a9c:	df 93       	push	r29
    3a9e:	cd b7       	in	r28, 0x3d	; 61
    3aa0:	de b7       	in	r29, 0x3e	; 62
    3aa2:	65 97       	sbiw	r28, 0x15	; 21
    3aa4:	0f b6       	in	r0, 0x3f	; 63
    3aa6:	f8 94       	cli
    3aa8:	de bf       	out	0x3e, r29	; 62
    3aaa:	0f be       	out	0x3f, r0	; 63
    3aac:	cd bf       	out	0x3d, r28	; 61
    3aae:	85 e1       	ldi	r24, 0x15	; 21
    3ab0:	e3 ed       	ldi	r30, 0xD3	; 211
    3ab2:	f3 e0       	ldi	r31, 0x03	; 3
    3ab4:	de 01       	movw	r26, r28
    3ab6:	11 96       	adiw	r26, 0x01	; 1
    3ab8:	01 90       	ld	r0, Z+
    3aba:	0d 92       	st	X+, r0
    3abc:	8a 95       	dec	r24
    3abe:	e1 f7       	brne	.-8      	; 0x3ab8 <factoryResetEeprom+0x24>
    3ac0:	10 e0       	ldi	r17, 0x00	; 0
    3ac2:	0f 2e       	mov	r0, r31
    3ac4:	ff e4       	ldi	r31, 0x4F	; 79
    3ac6:	ff 2e       	mov	r15, r31
    3ac8:	f0 2d       	mov	r31, r0
    3aca:	0b ed       	ldi	r16, 0xDB	; 219
    3acc:	1f 93       	push	r17
    3ace:	8d b7       	in	r24, 0x3d	; 61
    3ad0:	9e b7       	in	r25, 0x3e	; 62
    3ad2:	8b 57       	subi	r24, 0x7B	; 123
    3ad4:	91 40       	sbci	r25, 0x01	; 1
    3ad6:	0f b6       	in	r0, 0x3f	; 63
    3ad8:	f8 94       	cli
    3ada:	9e bf       	out	0x3e, r25	; 62
    3adc:	0f be       	out	0x3f, r0	; 63
    3ade:	8d bf       	out	0x3d, r24	; 61
    3ae0:	ad b7       	in	r26, 0x3d	; 61
    3ae2:	be b7       	in	r27, 0x3e	; 62
    3ae4:	11 96       	adiw	r26, 0x01	; 1
    3ae6:	8b e7       	ldi	r24, 0x7B	; 123
    3ae8:	91 e0       	ldi	r25, 0x01	; 1
    3aea:	fe 01       	movw	r30, r28
    3aec:	7e 96       	adiw	r30, 0x1e	; 30
    3aee:	01 90       	ld	r0, Z+
    3af0:	0d 92       	st	X+, r0
    3af2:	01 97       	sbiw	r24, 0x01	; 1
    3af4:	e1 f7       	brne	.-8      	; 0x3aee <factoryResetEeprom+0x5a>
    3af6:	2f dc       	rcall	.-1954   	; 0x3356 <eepromSavePattern>
    3af8:	8f e1       	ldi	r24, 0x1F	; 31
    3afa:	9e e4       	ldi	r25, 0x4E	; 78
    3afc:	01 97       	sbiw	r24, 0x01	; 1
    3afe:	f1 f7       	brne	.-4      	; 0x3afc <factoryResetEeprom+0x68>
    3b00:	00 c0       	rjmp	.+0      	; 0x3b02 <factoryResetEeprom+0x6e>
    3b02:	00 00       	nop
    3b04:	1f 9d       	mul	r17, r15
    3b06:	81 2d       	mov	r24, r1
    3b08:	11 24       	eor	r1, r1
    3b0a:	86 95       	lsr	r24
    3b0c:	86 95       	lsr	r24
    3b0e:	e1 e0       	ldi	r30, 0x01	; 1
    3b10:	f0 e0       	ldi	r31, 0x00	; 0
    3b12:	ec 0f       	add	r30, r28
    3b14:	fd 1f       	adc	r31, r29
    3b16:	e8 0f       	add	r30, r24
    3b18:	f1 1d       	adc	r31, r1
    3b1a:	00 83       	st	Z, r16
    3b1c:	0f b6       	in	r0, 0x3f	; 63
    3b1e:	f8 94       	cli
    3b20:	de bf       	out	0x3e, r29	; 62
    3b22:	0f be       	out	0x3f, r0	; 63
    3b24:	cd bf       	out	0x3d, r28	; 61
    3b26:	63 e0       	ldi	r22, 0x03	; 3
    3b28:	70 e0       	ldi	r23, 0x00	; 0
    3b2a:	ce 01       	movw	r24, r28
    3b2c:	01 96       	adiw	r24, 0x01	; 1
    3b2e:	0e 94 a1 13 	call	0x2742	; 0x2742 <outputS>
    3b32:	1f 5f       	subi	r17, 0xFF	; 255
    3b34:	1f 3f       	cpi	r17, 0xFF	; 255
    3b36:	51 f6       	brne	.-108    	; 0x3acc <factoryResetEeprom+0x38>
    3b38:	65 96       	adiw	r28, 0x15	; 21
    3b3a:	0f b6       	in	r0, 0x3f	; 63
    3b3c:	f8 94       	cli
    3b3e:	de bf       	out	0x3e, r29	; 62
    3b40:	0f be       	out	0x3f, r0	; 63
    3b42:	cd bf       	out	0x3d, r28	; 61
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	1f 91       	pop	r17
    3b4a:	0f 91       	pop	r16
    3b4c:	ff 90       	pop	r15
    3b4e:	08 95       	ret

00003b50 <globalWrite>:

//this happens when save button is pressed on global menu. 
void globalWrite(Globals *currentGlobals)
{
    3b50:	cf 93       	push	r28
    3b52:	df 93       	push	r29
    3b54:	ec 01       	movw	r28, r24
	eeprom_write_byte(0,currentGlobals->midiChannel); //this may be wrong, but it does get rid of the warning. 
    3b56:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	46 d2       	rcall	.+1164   	; 0x3fea <eeprom_write_byte>
	eeprom_write_block(currentGlobals->midiTrackNote,1,16);
    3b5e:	40 e1       	ldi	r20, 0x10	; 16
    3b60:	50 e0       	ldi	r21, 0x00	; 0
    3b62:	61 e0       	ldi	r22, 0x01	; 1
    3b64:	70 e0       	ldi	r23, 0x00	; 0
    3b66:	ce 01       	movw	r24, r28
    3b68:	0d 96       	adiw	r24, 0x0d	; 13
    3b6a:	36 d2       	rcall	.+1132   	; 0x3fd8 <eeprom_write_block>
}
    3b6c:	df 91       	pop	r29
    3b6e:	cf 91       	pop	r28
    3b70:	08 95       	ret

00003b72 <globalLoad>:
//This happens at startup only, in function "initGlobals"

void globalLoad(Globals *currentGlobals, uint8_t factoryReset)
{
    3b72:	cf 93       	push	r28
    3b74:	df 93       	push	r29
	//we need to load all of the global midi settings here. 
	//we can also check the factory reset bit here. 
	//if the program has not gone through the initial state, and had the internal eeprom formatted, then this will return garbage. 
	if(factoryReset==0)
    3b76:	61 11       	cpse	r22, r1
    3b78:	0c c0       	rjmp	.+24     	; 0x3b92 <globalLoad+0x20>
    3b7a:	ec 01       	movw	r28, r24
	{
		currentGlobals->midiChannel = eeprom_read_byte(0);
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	23 d2       	rcall	.+1094   	; 0x3fc8 <eeprom_read_byte>
    3b82:	8c 87       	std	Y+12, r24	; 0x0c
		eeprom_read_block(currentGlobals->midiTrackNote,1,16);
    3b84:	40 e1       	ldi	r20, 0x10	; 16
    3b86:	50 e0       	ldi	r21, 0x00	; 0
    3b88:	61 e0       	ldi	r22, 0x01	; 1
    3b8a:	70 e0       	ldi	r23, 0x00	; 0
    3b8c:	ce 01       	movw	r24, r28
    3b8e:	0d 96       	adiw	r24, 0x0d	; 13
    3b90:	0b d2       	rcall	.+1046   	; 0x3fa8 <eeprom_read_block>
	}
}
    3b92:	df 91       	pop	r29
    3b94:	cf 91       	pop	r28
    3b96:	08 95       	ret

00003b98 <__subsf3>:
    3b98:	50 58       	subi	r21, 0x80	; 128

00003b9a <__addsf3>:
    3b9a:	bb 27       	eor	r27, r27
    3b9c:	aa 27       	eor	r26, r26
    3b9e:	0e d0       	rcall	.+28     	; 0x3bbc <__addsf3x>
    3ba0:	4d c1       	rjmp	.+666    	; 0x3e3c <__fp_round>
    3ba2:	3e d1       	rcall	.+636    	; 0x3e20 <__fp_pscA>
    3ba4:	30 f0       	brcs	.+12     	; 0x3bb2 <__addsf3+0x18>
    3ba6:	43 d1       	rcall	.+646    	; 0x3e2e <__fp_pscB>
    3ba8:	20 f0       	brcs	.+8      	; 0x3bb2 <__addsf3+0x18>
    3baa:	31 f4       	brne	.+12     	; 0x3bb8 <__addsf3+0x1e>
    3bac:	9f 3f       	cpi	r25, 0xFF	; 255
    3bae:	11 f4       	brne	.+4      	; 0x3bb4 <__addsf3+0x1a>
    3bb0:	1e f4       	brtc	.+6      	; 0x3bb8 <__addsf3+0x1e>
    3bb2:	33 c1       	rjmp	.+614    	; 0x3e1a <__fp_nan>
    3bb4:	0e f4       	brtc	.+2      	; 0x3bb8 <__addsf3+0x1e>
    3bb6:	e0 95       	com	r30
    3bb8:	e7 fb       	bst	r30, 7
    3bba:	29 c1       	rjmp	.+594    	; 0x3e0e <__fp_inf>

00003bbc <__addsf3x>:
    3bbc:	e9 2f       	mov	r30, r25
    3bbe:	4f d1       	rcall	.+670    	; 0x3e5e <__fp_split3>
    3bc0:	80 f3       	brcs	.-32     	; 0x3ba2 <__addsf3+0x8>
    3bc2:	ba 17       	cp	r27, r26
    3bc4:	62 07       	cpc	r22, r18
    3bc6:	73 07       	cpc	r23, r19
    3bc8:	84 07       	cpc	r24, r20
    3bca:	95 07       	cpc	r25, r21
    3bcc:	18 f0       	brcs	.+6      	; 0x3bd4 <__addsf3x+0x18>
    3bce:	71 f4       	brne	.+28     	; 0x3bec <__addsf3x+0x30>
    3bd0:	9e f5       	brtc	.+102    	; 0x3c38 <__addsf3x+0x7c>
    3bd2:	67 c1       	rjmp	.+718    	; 0x3ea2 <__fp_zero>
    3bd4:	0e f4       	brtc	.+2      	; 0x3bd8 <__addsf3x+0x1c>
    3bd6:	e0 95       	com	r30
    3bd8:	0b 2e       	mov	r0, r27
    3bda:	ba 2f       	mov	r27, r26
    3bdc:	a0 2d       	mov	r26, r0
    3bde:	0b 01       	movw	r0, r22
    3be0:	b9 01       	movw	r22, r18
    3be2:	90 01       	movw	r18, r0
    3be4:	0c 01       	movw	r0, r24
    3be6:	ca 01       	movw	r24, r20
    3be8:	a0 01       	movw	r20, r0
    3bea:	11 24       	eor	r1, r1
    3bec:	ff 27       	eor	r31, r31
    3bee:	59 1b       	sub	r21, r25
    3bf0:	99 f0       	breq	.+38     	; 0x3c18 <__addsf3x+0x5c>
    3bf2:	59 3f       	cpi	r21, 0xF9	; 249
    3bf4:	50 f4       	brcc	.+20     	; 0x3c0a <__addsf3x+0x4e>
    3bf6:	50 3e       	cpi	r21, 0xE0	; 224
    3bf8:	68 f1       	brcs	.+90     	; 0x3c54 <__addsf3x+0x98>
    3bfa:	1a 16       	cp	r1, r26
    3bfc:	f0 40       	sbci	r31, 0x00	; 0
    3bfe:	a2 2f       	mov	r26, r18
    3c00:	23 2f       	mov	r18, r19
    3c02:	34 2f       	mov	r19, r20
    3c04:	44 27       	eor	r20, r20
    3c06:	58 5f       	subi	r21, 0xF8	; 248
    3c08:	f3 cf       	rjmp	.-26     	; 0x3bf0 <__addsf3x+0x34>
    3c0a:	46 95       	lsr	r20
    3c0c:	37 95       	ror	r19
    3c0e:	27 95       	ror	r18
    3c10:	a7 95       	ror	r26
    3c12:	f0 40       	sbci	r31, 0x00	; 0
    3c14:	53 95       	inc	r21
    3c16:	c9 f7       	brne	.-14     	; 0x3c0a <__addsf3x+0x4e>
    3c18:	7e f4       	brtc	.+30     	; 0x3c38 <__addsf3x+0x7c>
    3c1a:	1f 16       	cp	r1, r31
    3c1c:	ba 0b       	sbc	r27, r26
    3c1e:	62 0b       	sbc	r22, r18
    3c20:	73 0b       	sbc	r23, r19
    3c22:	84 0b       	sbc	r24, r20
    3c24:	ba f0       	brmi	.+46     	; 0x3c54 <__addsf3x+0x98>
    3c26:	91 50       	subi	r25, 0x01	; 1
    3c28:	a1 f0       	breq	.+40     	; 0x3c52 <__addsf3x+0x96>
    3c2a:	ff 0f       	add	r31, r31
    3c2c:	bb 1f       	adc	r27, r27
    3c2e:	66 1f       	adc	r22, r22
    3c30:	77 1f       	adc	r23, r23
    3c32:	88 1f       	adc	r24, r24
    3c34:	c2 f7       	brpl	.-16     	; 0x3c26 <__addsf3x+0x6a>
    3c36:	0e c0       	rjmp	.+28     	; 0x3c54 <__addsf3x+0x98>
    3c38:	ba 0f       	add	r27, r26
    3c3a:	62 1f       	adc	r22, r18
    3c3c:	73 1f       	adc	r23, r19
    3c3e:	84 1f       	adc	r24, r20
    3c40:	48 f4       	brcc	.+18     	; 0x3c54 <__addsf3x+0x98>
    3c42:	87 95       	ror	r24
    3c44:	77 95       	ror	r23
    3c46:	67 95       	ror	r22
    3c48:	b7 95       	ror	r27
    3c4a:	f7 95       	ror	r31
    3c4c:	9e 3f       	cpi	r25, 0xFE	; 254
    3c4e:	08 f0       	brcs	.+2      	; 0x3c52 <__addsf3x+0x96>
    3c50:	b3 cf       	rjmp	.-154    	; 0x3bb8 <__addsf3+0x1e>
    3c52:	93 95       	inc	r25
    3c54:	88 0f       	add	r24, r24
    3c56:	08 f0       	brcs	.+2      	; 0x3c5a <__addsf3x+0x9e>
    3c58:	99 27       	eor	r25, r25
    3c5a:	ee 0f       	add	r30, r30
    3c5c:	97 95       	ror	r25
    3c5e:	87 95       	ror	r24
    3c60:	08 95       	ret

00003c62 <__divsf3>:
    3c62:	0c d0       	rcall	.+24     	; 0x3c7c <__divsf3x>
    3c64:	eb c0       	rjmp	.+470    	; 0x3e3c <__fp_round>
    3c66:	e3 d0       	rcall	.+454    	; 0x3e2e <__fp_pscB>
    3c68:	40 f0       	brcs	.+16     	; 0x3c7a <__divsf3+0x18>
    3c6a:	da d0       	rcall	.+436    	; 0x3e20 <__fp_pscA>
    3c6c:	30 f0       	brcs	.+12     	; 0x3c7a <__divsf3+0x18>
    3c6e:	21 f4       	brne	.+8      	; 0x3c78 <__divsf3+0x16>
    3c70:	5f 3f       	cpi	r21, 0xFF	; 255
    3c72:	19 f0       	breq	.+6      	; 0x3c7a <__divsf3+0x18>
    3c74:	cc c0       	rjmp	.+408    	; 0x3e0e <__fp_inf>
    3c76:	51 11       	cpse	r21, r1
    3c78:	15 c1       	rjmp	.+554    	; 0x3ea4 <__fp_szero>
    3c7a:	cf c0       	rjmp	.+414    	; 0x3e1a <__fp_nan>

00003c7c <__divsf3x>:
    3c7c:	f0 d0       	rcall	.+480    	; 0x3e5e <__fp_split3>
    3c7e:	98 f3       	brcs	.-26     	; 0x3c66 <__divsf3+0x4>

00003c80 <__divsf3_pse>:
    3c80:	99 23       	and	r25, r25
    3c82:	c9 f3       	breq	.-14     	; 0x3c76 <__divsf3+0x14>
    3c84:	55 23       	and	r21, r21
    3c86:	b1 f3       	breq	.-20     	; 0x3c74 <__divsf3+0x12>
    3c88:	95 1b       	sub	r25, r21
    3c8a:	55 0b       	sbc	r21, r21
    3c8c:	bb 27       	eor	r27, r27
    3c8e:	aa 27       	eor	r26, r26
    3c90:	62 17       	cp	r22, r18
    3c92:	73 07       	cpc	r23, r19
    3c94:	84 07       	cpc	r24, r20
    3c96:	38 f0       	brcs	.+14     	; 0x3ca6 <__divsf3_pse+0x26>
    3c98:	9f 5f       	subi	r25, 0xFF	; 255
    3c9a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c9c:	22 0f       	add	r18, r18
    3c9e:	33 1f       	adc	r19, r19
    3ca0:	44 1f       	adc	r20, r20
    3ca2:	aa 1f       	adc	r26, r26
    3ca4:	a9 f3       	breq	.-22     	; 0x3c90 <__divsf3_pse+0x10>
    3ca6:	33 d0       	rcall	.+102    	; 0x3d0e <__divsf3_pse+0x8e>
    3ca8:	0e 2e       	mov	r0, r30
    3caa:	3a f0       	brmi	.+14     	; 0x3cba <__divsf3_pse+0x3a>
    3cac:	e0 e8       	ldi	r30, 0x80	; 128
    3cae:	30 d0       	rcall	.+96     	; 0x3d10 <__divsf3_pse+0x90>
    3cb0:	91 50       	subi	r25, 0x01	; 1
    3cb2:	50 40       	sbci	r21, 0x00	; 0
    3cb4:	e6 95       	lsr	r30
    3cb6:	00 1c       	adc	r0, r0
    3cb8:	ca f7       	brpl	.-14     	; 0x3cac <__divsf3_pse+0x2c>
    3cba:	29 d0       	rcall	.+82     	; 0x3d0e <__divsf3_pse+0x8e>
    3cbc:	fe 2f       	mov	r31, r30
    3cbe:	27 d0       	rcall	.+78     	; 0x3d0e <__divsf3_pse+0x8e>
    3cc0:	66 0f       	add	r22, r22
    3cc2:	77 1f       	adc	r23, r23
    3cc4:	88 1f       	adc	r24, r24
    3cc6:	bb 1f       	adc	r27, r27
    3cc8:	26 17       	cp	r18, r22
    3cca:	37 07       	cpc	r19, r23
    3ccc:	48 07       	cpc	r20, r24
    3cce:	ab 07       	cpc	r26, r27
    3cd0:	b0 e8       	ldi	r27, 0x80	; 128
    3cd2:	09 f0       	breq	.+2      	; 0x3cd6 <__divsf3_pse+0x56>
    3cd4:	bb 0b       	sbc	r27, r27
    3cd6:	80 2d       	mov	r24, r0
    3cd8:	bf 01       	movw	r22, r30
    3cda:	ff 27       	eor	r31, r31
    3cdc:	93 58       	subi	r25, 0x83	; 131
    3cde:	5f 4f       	sbci	r21, 0xFF	; 255
    3ce0:	2a f0       	brmi	.+10     	; 0x3cec <__divsf3_pse+0x6c>
    3ce2:	9e 3f       	cpi	r25, 0xFE	; 254
    3ce4:	51 05       	cpc	r21, r1
    3ce6:	68 f0       	brcs	.+26     	; 0x3d02 <__divsf3_pse+0x82>
    3ce8:	92 c0       	rjmp	.+292    	; 0x3e0e <__fp_inf>
    3cea:	dc c0       	rjmp	.+440    	; 0x3ea4 <__fp_szero>
    3cec:	5f 3f       	cpi	r21, 0xFF	; 255
    3cee:	ec f3       	brlt	.-6      	; 0x3cea <__divsf3_pse+0x6a>
    3cf0:	98 3e       	cpi	r25, 0xE8	; 232
    3cf2:	dc f3       	brlt	.-10     	; 0x3cea <__divsf3_pse+0x6a>
    3cf4:	86 95       	lsr	r24
    3cf6:	77 95       	ror	r23
    3cf8:	67 95       	ror	r22
    3cfa:	b7 95       	ror	r27
    3cfc:	f7 95       	ror	r31
    3cfe:	9f 5f       	subi	r25, 0xFF	; 255
    3d00:	c9 f7       	brne	.-14     	; 0x3cf4 <__divsf3_pse+0x74>
    3d02:	88 0f       	add	r24, r24
    3d04:	91 1d       	adc	r25, r1
    3d06:	96 95       	lsr	r25
    3d08:	87 95       	ror	r24
    3d0a:	97 f9       	bld	r25, 7
    3d0c:	08 95       	ret
    3d0e:	e1 e0       	ldi	r30, 0x01	; 1
    3d10:	66 0f       	add	r22, r22
    3d12:	77 1f       	adc	r23, r23
    3d14:	88 1f       	adc	r24, r24
    3d16:	bb 1f       	adc	r27, r27
    3d18:	62 17       	cp	r22, r18
    3d1a:	73 07       	cpc	r23, r19
    3d1c:	84 07       	cpc	r24, r20
    3d1e:	ba 07       	cpc	r27, r26
    3d20:	20 f0       	brcs	.+8      	; 0x3d2a <__divsf3_pse+0xaa>
    3d22:	62 1b       	sub	r22, r18
    3d24:	73 0b       	sbc	r23, r19
    3d26:	84 0b       	sbc	r24, r20
    3d28:	ba 0b       	sbc	r27, r26
    3d2a:	ee 1f       	adc	r30, r30
    3d2c:	88 f7       	brcc	.-30     	; 0x3d10 <__divsf3_pse+0x90>
    3d2e:	e0 95       	com	r30
    3d30:	08 95       	ret

00003d32 <__fixsfsi>:
    3d32:	04 d0       	rcall	.+8      	; 0x3d3c <__fixunssfsi>
    3d34:	68 94       	set
    3d36:	b1 11       	cpse	r27, r1
    3d38:	b5 c0       	rjmp	.+362    	; 0x3ea4 <__fp_szero>
    3d3a:	08 95       	ret

00003d3c <__fixunssfsi>:
    3d3c:	98 d0       	rcall	.+304    	; 0x3e6e <__fp_splitA>
    3d3e:	88 f0       	brcs	.+34     	; 0x3d62 <__fixunssfsi+0x26>
    3d40:	9f 57       	subi	r25, 0x7F	; 127
    3d42:	90 f0       	brcs	.+36     	; 0x3d68 <__fixunssfsi+0x2c>
    3d44:	b9 2f       	mov	r27, r25
    3d46:	99 27       	eor	r25, r25
    3d48:	b7 51       	subi	r27, 0x17	; 23
    3d4a:	a0 f0       	brcs	.+40     	; 0x3d74 <__fixunssfsi+0x38>
    3d4c:	d1 f0       	breq	.+52     	; 0x3d82 <__fixunssfsi+0x46>
    3d4e:	66 0f       	add	r22, r22
    3d50:	77 1f       	adc	r23, r23
    3d52:	88 1f       	adc	r24, r24
    3d54:	99 1f       	adc	r25, r25
    3d56:	1a f0       	brmi	.+6      	; 0x3d5e <__fixunssfsi+0x22>
    3d58:	ba 95       	dec	r27
    3d5a:	c9 f7       	brne	.-14     	; 0x3d4e <__fixunssfsi+0x12>
    3d5c:	12 c0       	rjmp	.+36     	; 0x3d82 <__fixunssfsi+0x46>
    3d5e:	b1 30       	cpi	r27, 0x01	; 1
    3d60:	81 f0       	breq	.+32     	; 0x3d82 <__fixunssfsi+0x46>
    3d62:	9f d0       	rcall	.+318    	; 0x3ea2 <__fp_zero>
    3d64:	b1 e0       	ldi	r27, 0x01	; 1
    3d66:	08 95       	ret
    3d68:	9c c0       	rjmp	.+312    	; 0x3ea2 <__fp_zero>
    3d6a:	67 2f       	mov	r22, r23
    3d6c:	78 2f       	mov	r23, r24
    3d6e:	88 27       	eor	r24, r24
    3d70:	b8 5f       	subi	r27, 0xF8	; 248
    3d72:	39 f0       	breq	.+14     	; 0x3d82 <__fixunssfsi+0x46>
    3d74:	b9 3f       	cpi	r27, 0xF9	; 249
    3d76:	cc f3       	brlt	.-14     	; 0x3d6a <__fixunssfsi+0x2e>
    3d78:	86 95       	lsr	r24
    3d7a:	77 95       	ror	r23
    3d7c:	67 95       	ror	r22
    3d7e:	b3 95       	inc	r27
    3d80:	d9 f7       	brne	.-10     	; 0x3d78 <__fixunssfsi+0x3c>
    3d82:	3e f4       	brtc	.+14     	; 0x3d92 <__fixunssfsi+0x56>
    3d84:	90 95       	com	r25
    3d86:	80 95       	com	r24
    3d88:	70 95       	com	r23
    3d8a:	61 95       	neg	r22
    3d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d8e:	8f 4f       	sbci	r24, 0xFF	; 255
    3d90:	9f 4f       	sbci	r25, 0xFF	; 255
    3d92:	08 95       	ret

00003d94 <__floatunsisf>:
    3d94:	e8 94       	clt
    3d96:	09 c0       	rjmp	.+18     	; 0x3daa <__floatsisf+0x12>

00003d98 <__floatsisf>:
    3d98:	97 fb       	bst	r25, 7
    3d9a:	3e f4       	brtc	.+14     	; 0x3daa <__floatsisf+0x12>
    3d9c:	90 95       	com	r25
    3d9e:	80 95       	com	r24
    3da0:	70 95       	com	r23
    3da2:	61 95       	neg	r22
    3da4:	7f 4f       	sbci	r23, 0xFF	; 255
    3da6:	8f 4f       	sbci	r24, 0xFF	; 255
    3da8:	9f 4f       	sbci	r25, 0xFF	; 255
    3daa:	99 23       	and	r25, r25
    3dac:	a9 f0       	breq	.+42     	; 0x3dd8 <__floatsisf+0x40>
    3dae:	f9 2f       	mov	r31, r25
    3db0:	96 e9       	ldi	r25, 0x96	; 150
    3db2:	bb 27       	eor	r27, r27
    3db4:	93 95       	inc	r25
    3db6:	f6 95       	lsr	r31
    3db8:	87 95       	ror	r24
    3dba:	77 95       	ror	r23
    3dbc:	67 95       	ror	r22
    3dbe:	b7 95       	ror	r27
    3dc0:	f1 11       	cpse	r31, r1
    3dc2:	f8 cf       	rjmp	.-16     	; 0x3db4 <__floatsisf+0x1c>
    3dc4:	fa f4       	brpl	.+62     	; 0x3e04 <__floatsisf+0x6c>
    3dc6:	bb 0f       	add	r27, r27
    3dc8:	11 f4       	brne	.+4      	; 0x3dce <__floatsisf+0x36>
    3dca:	60 ff       	sbrs	r22, 0
    3dcc:	1b c0       	rjmp	.+54     	; 0x3e04 <__floatsisf+0x6c>
    3dce:	6f 5f       	subi	r22, 0xFF	; 255
    3dd0:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd2:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd6:	16 c0       	rjmp	.+44     	; 0x3e04 <__floatsisf+0x6c>
    3dd8:	88 23       	and	r24, r24
    3dda:	11 f0       	breq	.+4      	; 0x3de0 <__floatsisf+0x48>
    3ddc:	96 e9       	ldi	r25, 0x96	; 150
    3dde:	11 c0       	rjmp	.+34     	; 0x3e02 <__floatsisf+0x6a>
    3de0:	77 23       	and	r23, r23
    3de2:	21 f0       	breq	.+8      	; 0x3dec <__floatsisf+0x54>
    3de4:	9e e8       	ldi	r25, 0x8E	; 142
    3de6:	87 2f       	mov	r24, r23
    3de8:	76 2f       	mov	r23, r22
    3dea:	05 c0       	rjmp	.+10     	; 0x3df6 <__floatsisf+0x5e>
    3dec:	66 23       	and	r22, r22
    3dee:	71 f0       	breq	.+28     	; 0x3e0c <__floatsisf+0x74>
    3df0:	96 e8       	ldi	r25, 0x86	; 134
    3df2:	86 2f       	mov	r24, r22
    3df4:	70 e0       	ldi	r23, 0x00	; 0
    3df6:	60 e0       	ldi	r22, 0x00	; 0
    3df8:	2a f0       	brmi	.+10     	; 0x3e04 <__floatsisf+0x6c>
    3dfa:	9a 95       	dec	r25
    3dfc:	66 0f       	add	r22, r22
    3dfe:	77 1f       	adc	r23, r23
    3e00:	88 1f       	adc	r24, r24
    3e02:	da f7       	brpl	.-10     	; 0x3dfa <__floatsisf+0x62>
    3e04:	88 0f       	add	r24, r24
    3e06:	96 95       	lsr	r25
    3e08:	87 95       	ror	r24
    3e0a:	97 f9       	bld	r25, 7
    3e0c:	08 95       	ret

00003e0e <__fp_inf>:
    3e0e:	97 f9       	bld	r25, 7
    3e10:	9f 67       	ori	r25, 0x7F	; 127
    3e12:	80 e8       	ldi	r24, 0x80	; 128
    3e14:	70 e0       	ldi	r23, 0x00	; 0
    3e16:	60 e0       	ldi	r22, 0x00	; 0
    3e18:	08 95       	ret

00003e1a <__fp_nan>:
    3e1a:	9f ef       	ldi	r25, 0xFF	; 255
    3e1c:	80 ec       	ldi	r24, 0xC0	; 192
    3e1e:	08 95       	ret

00003e20 <__fp_pscA>:
    3e20:	00 24       	eor	r0, r0
    3e22:	0a 94       	dec	r0
    3e24:	16 16       	cp	r1, r22
    3e26:	17 06       	cpc	r1, r23
    3e28:	18 06       	cpc	r1, r24
    3e2a:	09 06       	cpc	r0, r25
    3e2c:	08 95       	ret

00003e2e <__fp_pscB>:
    3e2e:	00 24       	eor	r0, r0
    3e30:	0a 94       	dec	r0
    3e32:	12 16       	cp	r1, r18
    3e34:	13 06       	cpc	r1, r19
    3e36:	14 06       	cpc	r1, r20
    3e38:	05 06       	cpc	r0, r21
    3e3a:	08 95       	ret

00003e3c <__fp_round>:
    3e3c:	09 2e       	mov	r0, r25
    3e3e:	03 94       	inc	r0
    3e40:	00 0c       	add	r0, r0
    3e42:	11 f4       	brne	.+4      	; 0x3e48 <__fp_round+0xc>
    3e44:	88 23       	and	r24, r24
    3e46:	52 f0       	brmi	.+20     	; 0x3e5c <__fp_round+0x20>
    3e48:	bb 0f       	add	r27, r27
    3e4a:	40 f4       	brcc	.+16     	; 0x3e5c <__fp_round+0x20>
    3e4c:	bf 2b       	or	r27, r31
    3e4e:	11 f4       	brne	.+4      	; 0x3e54 <__fp_round+0x18>
    3e50:	60 ff       	sbrs	r22, 0
    3e52:	04 c0       	rjmp	.+8      	; 0x3e5c <__fp_round+0x20>
    3e54:	6f 5f       	subi	r22, 0xFF	; 255
    3e56:	7f 4f       	sbci	r23, 0xFF	; 255
    3e58:	8f 4f       	sbci	r24, 0xFF	; 255
    3e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e5c:	08 95       	ret

00003e5e <__fp_split3>:
    3e5e:	57 fd       	sbrc	r21, 7
    3e60:	90 58       	subi	r25, 0x80	; 128
    3e62:	44 0f       	add	r20, r20
    3e64:	55 1f       	adc	r21, r21
    3e66:	59 f0       	breq	.+22     	; 0x3e7e <__fp_splitA+0x10>
    3e68:	5f 3f       	cpi	r21, 0xFF	; 255
    3e6a:	71 f0       	breq	.+28     	; 0x3e88 <__fp_splitA+0x1a>
    3e6c:	47 95       	ror	r20

00003e6e <__fp_splitA>:
    3e6e:	88 0f       	add	r24, r24
    3e70:	97 fb       	bst	r25, 7
    3e72:	99 1f       	adc	r25, r25
    3e74:	61 f0       	breq	.+24     	; 0x3e8e <__fp_splitA+0x20>
    3e76:	9f 3f       	cpi	r25, 0xFF	; 255
    3e78:	79 f0       	breq	.+30     	; 0x3e98 <__fp_splitA+0x2a>
    3e7a:	87 95       	ror	r24
    3e7c:	08 95       	ret
    3e7e:	12 16       	cp	r1, r18
    3e80:	13 06       	cpc	r1, r19
    3e82:	14 06       	cpc	r1, r20
    3e84:	55 1f       	adc	r21, r21
    3e86:	f2 cf       	rjmp	.-28     	; 0x3e6c <__fp_split3+0xe>
    3e88:	46 95       	lsr	r20
    3e8a:	f1 df       	rcall	.-30     	; 0x3e6e <__fp_splitA>
    3e8c:	08 c0       	rjmp	.+16     	; 0x3e9e <__fp_splitA+0x30>
    3e8e:	16 16       	cp	r1, r22
    3e90:	17 06       	cpc	r1, r23
    3e92:	18 06       	cpc	r1, r24
    3e94:	99 1f       	adc	r25, r25
    3e96:	f1 cf       	rjmp	.-30     	; 0x3e7a <__fp_splitA+0xc>
    3e98:	86 95       	lsr	r24
    3e9a:	71 05       	cpc	r23, r1
    3e9c:	61 05       	cpc	r22, r1
    3e9e:	08 94       	sec
    3ea0:	08 95       	ret

00003ea2 <__fp_zero>:
    3ea2:	e8 94       	clt

00003ea4 <__fp_szero>:
    3ea4:	bb 27       	eor	r27, r27
    3ea6:	66 27       	eor	r22, r22
    3ea8:	77 27       	eor	r23, r23
    3eaa:	cb 01       	movw	r24, r22
    3eac:	97 f9       	bld	r25, 7
    3eae:	08 95       	ret

00003eb0 <__divmodhi4>:
    3eb0:	97 fb       	bst	r25, 7
    3eb2:	07 2e       	mov	r0, r23
    3eb4:	16 f4       	brtc	.+4      	; 0x3eba <__divmodhi4+0xa>
    3eb6:	00 94       	com	r0
    3eb8:	06 d0       	rcall	.+12     	; 0x3ec6 <__divmodhi4_neg1>
    3eba:	77 fd       	sbrc	r23, 7
    3ebc:	08 d0       	rcall	.+16     	; 0x3ece <__divmodhi4_neg2>
    3ebe:	60 d0       	rcall	.+192    	; 0x3f80 <__udivmodhi4>
    3ec0:	07 fc       	sbrc	r0, 7
    3ec2:	05 d0       	rcall	.+10     	; 0x3ece <__divmodhi4_neg2>
    3ec4:	3e f4       	brtc	.+14     	; 0x3ed4 <__divmodhi4_exit>

00003ec6 <__divmodhi4_neg1>:
    3ec6:	90 95       	com	r25
    3ec8:	81 95       	neg	r24
    3eca:	9f 4f       	sbci	r25, 0xFF	; 255
    3ecc:	08 95       	ret

00003ece <__divmodhi4_neg2>:
    3ece:	70 95       	com	r23
    3ed0:	61 95       	neg	r22
    3ed2:	7f 4f       	sbci	r23, 0xFF	; 255

00003ed4 <__divmodhi4_exit>:
    3ed4:	08 95       	ret

00003ed6 <__udivmodsi4>:
    3ed6:	a1 e2       	ldi	r26, 0x21	; 33
    3ed8:	1a 2e       	mov	r1, r26
    3eda:	aa 1b       	sub	r26, r26
    3edc:	bb 1b       	sub	r27, r27
    3ede:	fd 01       	movw	r30, r26
    3ee0:	0d c0       	rjmp	.+26     	; 0x3efc <__udivmodsi4_ep>

00003ee2 <__udivmodsi4_loop>:
    3ee2:	aa 1f       	adc	r26, r26
    3ee4:	bb 1f       	adc	r27, r27
    3ee6:	ee 1f       	adc	r30, r30
    3ee8:	ff 1f       	adc	r31, r31
    3eea:	a2 17       	cp	r26, r18
    3eec:	b3 07       	cpc	r27, r19
    3eee:	e4 07       	cpc	r30, r20
    3ef0:	f5 07       	cpc	r31, r21
    3ef2:	20 f0       	brcs	.+8      	; 0x3efc <__udivmodsi4_ep>
    3ef4:	a2 1b       	sub	r26, r18
    3ef6:	b3 0b       	sbc	r27, r19
    3ef8:	e4 0b       	sbc	r30, r20
    3efa:	f5 0b       	sbc	r31, r21

00003efc <__udivmodsi4_ep>:
    3efc:	66 1f       	adc	r22, r22
    3efe:	77 1f       	adc	r23, r23
    3f00:	88 1f       	adc	r24, r24
    3f02:	99 1f       	adc	r25, r25
    3f04:	1a 94       	dec	r1
    3f06:	69 f7       	brne	.-38     	; 0x3ee2 <__udivmodsi4_loop>
    3f08:	60 95       	com	r22
    3f0a:	70 95       	com	r23
    3f0c:	80 95       	com	r24
    3f0e:	90 95       	com	r25
    3f10:	9b 01       	movw	r18, r22
    3f12:	ac 01       	movw	r20, r24
    3f14:	bd 01       	movw	r22, r26
    3f16:	cf 01       	movw	r24, r30
    3f18:	08 95       	ret

00003f1a <__divmodsi4>:
    3f1a:	05 2e       	mov	r0, r21
    3f1c:	97 fb       	bst	r25, 7
    3f1e:	16 f4       	brtc	.+4      	; 0x3f24 <__divmodsi4+0xa>
    3f20:	00 94       	com	r0
    3f22:	0f d0       	rcall	.+30     	; 0x3f42 <__negsi2>
    3f24:	57 fd       	sbrc	r21, 7
    3f26:	05 d0       	rcall	.+10     	; 0x3f32 <__divmodsi4_neg2>
    3f28:	d6 df       	rcall	.-84     	; 0x3ed6 <__udivmodsi4>
    3f2a:	07 fc       	sbrc	r0, 7
    3f2c:	02 d0       	rcall	.+4      	; 0x3f32 <__divmodsi4_neg2>
    3f2e:	46 f4       	brtc	.+16     	; 0x3f40 <__divmodsi4_exit>
    3f30:	08 c0       	rjmp	.+16     	; 0x3f42 <__negsi2>

00003f32 <__divmodsi4_neg2>:
    3f32:	50 95       	com	r21
    3f34:	40 95       	com	r20
    3f36:	30 95       	com	r19
    3f38:	21 95       	neg	r18
    3f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f3c:	4f 4f       	sbci	r20, 0xFF	; 255
    3f3e:	5f 4f       	sbci	r21, 0xFF	; 255

00003f40 <__divmodsi4_exit>:
    3f40:	08 95       	ret

00003f42 <__negsi2>:
    3f42:	90 95       	com	r25
    3f44:	80 95       	com	r24
    3f46:	70 95       	com	r23
    3f48:	61 95       	neg	r22
    3f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f4c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f50:	08 95       	ret

00003f52 <__tablejump2__>:
    3f52:	ee 0f       	add	r30, r30
    3f54:	ff 1f       	adc	r31, r31
    3f56:	88 1f       	adc	r24, r24
    3f58:	8b bf       	out	0x3b, r24	; 59
    3f5a:	07 90       	elpm	r0, Z+
    3f5c:	f6 91       	elpm	r31, Z
    3f5e:	e0 2d       	mov	r30, r0
    3f60:	19 94       	eijmp

00003f62 <__umulhisi3>:
    3f62:	a2 9f       	mul	r26, r18
    3f64:	b0 01       	movw	r22, r0
    3f66:	b3 9f       	mul	r27, r19
    3f68:	c0 01       	movw	r24, r0
    3f6a:	a3 9f       	mul	r26, r19
    3f6c:	70 0d       	add	r23, r0
    3f6e:	81 1d       	adc	r24, r1
    3f70:	11 24       	eor	r1, r1
    3f72:	91 1d       	adc	r25, r1
    3f74:	b2 9f       	mul	r27, r18
    3f76:	70 0d       	add	r23, r0
    3f78:	81 1d       	adc	r24, r1
    3f7a:	11 24       	eor	r1, r1
    3f7c:	91 1d       	adc	r25, r1
    3f7e:	08 95       	ret

00003f80 <__udivmodhi4>:
    3f80:	aa 1b       	sub	r26, r26
    3f82:	bb 1b       	sub	r27, r27
    3f84:	51 e1       	ldi	r21, 0x11	; 17
    3f86:	07 c0       	rjmp	.+14     	; 0x3f96 <__udivmodhi4_ep>

00003f88 <__udivmodhi4_loop>:
    3f88:	aa 1f       	adc	r26, r26
    3f8a:	bb 1f       	adc	r27, r27
    3f8c:	a6 17       	cp	r26, r22
    3f8e:	b7 07       	cpc	r27, r23
    3f90:	10 f0       	brcs	.+4      	; 0x3f96 <__udivmodhi4_ep>
    3f92:	a6 1b       	sub	r26, r22
    3f94:	b7 0b       	sbc	r27, r23

00003f96 <__udivmodhi4_ep>:
    3f96:	88 1f       	adc	r24, r24
    3f98:	99 1f       	adc	r25, r25
    3f9a:	5a 95       	dec	r21
    3f9c:	a9 f7       	brne	.-22     	; 0x3f88 <__udivmodhi4_loop>
    3f9e:	80 95       	com	r24
    3fa0:	90 95       	com	r25
    3fa2:	bc 01       	movw	r22, r24
    3fa4:	cd 01       	movw	r24, r26
    3fa6:	08 95       	ret

00003fa8 <eeprom_read_block>:
    3fa8:	dc 01       	movw	r26, r24
    3faa:	cb 01       	movw	r24, r22

00003fac <eeprom_read_blraw>:
    3fac:	fc 01       	movw	r30, r24
    3fae:	f9 99       	sbic	0x1f, 1	; 31
    3fb0:	fe cf       	rjmp	.-4      	; 0x3fae <eeprom_read_blraw+0x2>
    3fb2:	06 c0       	rjmp	.+12     	; 0x3fc0 <eeprom_read_blraw+0x14>
    3fb4:	f2 bd       	out	0x22, r31	; 34
    3fb6:	e1 bd       	out	0x21, r30	; 33
    3fb8:	f8 9a       	sbi	0x1f, 0	; 31
    3fba:	31 96       	adiw	r30, 0x01	; 1
    3fbc:	00 b4       	in	r0, 0x20	; 32
    3fbe:	0d 92       	st	X+, r0
    3fc0:	41 50       	subi	r20, 0x01	; 1
    3fc2:	50 40       	sbci	r21, 0x00	; 0
    3fc4:	b8 f7       	brcc	.-18     	; 0x3fb4 <eeprom_read_blraw+0x8>
    3fc6:	08 95       	ret

00003fc8 <eeprom_read_byte>:
    3fc8:	f9 99       	sbic	0x1f, 1	; 31
    3fca:	fe cf       	rjmp	.-4      	; 0x3fc8 <eeprom_read_byte>
    3fcc:	92 bd       	out	0x22, r25	; 34
    3fce:	81 bd       	out	0x21, r24	; 33
    3fd0:	f8 9a       	sbi	0x1f, 0	; 31
    3fd2:	99 27       	eor	r25, r25
    3fd4:	80 b5       	in	r24, 0x20	; 32
    3fd6:	08 95       	ret

00003fd8 <eeprom_write_block>:
    3fd8:	dc 01       	movw	r26, r24
    3fda:	cb 01       	movw	r24, r22
    3fdc:	02 c0       	rjmp	.+4      	; 0x3fe2 <eeprom_write_block+0xa>
    3fde:	2d 91       	ld	r18, X+
    3fe0:	05 d0       	rcall	.+10     	; 0x3fec <eeprom_write_r18>
    3fe2:	41 50       	subi	r20, 0x01	; 1
    3fe4:	50 40       	sbci	r21, 0x00	; 0
    3fe6:	d8 f7       	brcc	.-10     	; 0x3fde <eeprom_write_block+0x6>
    3fe8:	08 95       	ret

00003fea <eeprom_write_byte>:
    3fea:	26 2f       	mov	r18, r22

00003fec <eeprom_write_r18>:
    3fec:	f9 99       	sbic	0x1f, 1	; 31
    3fee:	fe cf       	rjmp	.-4      	; 0x3fec <eeprom_write_r18>
    3ff0:	1f ba       	out	0x1f, r1	; 31
    3ff2:	92 bd       	out	0x22, r25	; 34
    3ff4:	81 bd       	out	0x21, r24	; 33
    3ff6:	20 bd       	out	0x20, r18	; 32
    3ff8:	0f b6       	in	r0, 0x3f	; 63
    3ffa:	f8 94       	cli
    3ffc:	fa 9a       	sbi	0x1f, 2	; 31
    3ffe:	f9 9a       	sbi	0x1f, 1	; 31
    4000:	0f be       	out	0x3f, r0	; 63
    4002:	01 96       	adiw	r24, 0x01	; 1
    4004:	08 95       	ret

00004006 <_exit>:
    4006:	f8 94       	cli

00004008 <__stop_program>:
    4008:	ff cf       	rjmp	.-2      	; 0x4008 <__stop_program>
