
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001cc  00800200  0000135c  000013f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000135c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000288  008003cc  008003cc  000015bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031e1  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ad  00000000  00000000  00004a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000131e  00000000  00000000  00005eca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a0  00000000  00000000  000071e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d8b  00000000  00000000  00007688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001957  00000000  00000000  00008413  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00009d6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ae c6       	rjmp	.+3420   	; 0xdca <__vector_27>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e5       	ldi	r30, 0x5C	; 92
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 3c       	cpi	r26, 0xCC	; 204
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	26 e0       	ldi	r18, 0x06	; 6
     110:	ac ec       	ldi	r26, 0xCC	; 204
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 35       	cpi	r26, 0x54	; 84
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	84 d3       	rcall	.+1800   	; 0x828 <main>
     120:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     126:	8f ef       	ldi	r24, 0xFF	; 255
     128:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     12a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons
	PORTB = 0B00011111;
     12e:	8f e1       	ldi	r24, 0x1F	; 31
     130:	85 b9       	out	0x05, r24	; 5
     132:	08 95       	ret

00000134 <listenTrigButtons>:

}


void listenTrigButtons()
{
     134:	cf 92       	push	r12
     136:	df 92       	push	r13
     138:	ef 92       	push	r14
     13a:	ff 92       	push	r15
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     144:	c0 91 09 01 	lds	r28, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     148:	c0 95       	com	r28
     14a:	c0 93 1d 05 	sts	0x051D, r28	; 0x80051d <buttonsCurrentCycle>
	fullBits = (buttonsCurrentCycle << 8) | (PINA^255);
     14e:	80 b1       	in	r24, 0x00	; 0
     150:	d0 e0       	ldi	r29, 0x00	; 0
     152:	dc 2f       	mov	r29, r28
     154:	cc 27       	eor	r28, r28
     156:	80 95       	com	r24
     158:	c8 2b       	or	r28, r24
     15a:	d0 93 d0 05 	sts	0x05D0, r29	; 0x8005d0 <fullBits+0x1>
     15e:	c0 93 cf 05 	sts	0x05CF, r28	; 0x8005cf <fullBits>
	if(fullBits!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     162:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <__data_end>
     166:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <__data_end+0x1>
     16a:	c8 17       	cp	r28, r24
     16c:	d9 07       	cpc	r29, r25
     16e:	09 f4       	brne	.+2      	; 0x172 <listenTrigButtons+0x3e>
     170:	3d c0       	rjmp	.+122    	; 0x1ec <listenTrigButtons+0xb8>
	{
		lastFullBits = fullBits;
     172:	d0 93 cd 03 	sts	0x03CD, r29	; 0x8003cd <__data_end+0x1>
     176:	c0 93 cc 03 	sts	0x03CC, r28	; 0x8003cc <__data_end>
     17a:	0d e5       	ldi	r16, 0x5D	; 93
     17c:	14 e0       	ldi	r17, 0x04	; 4
     17e:	0f 2e       	mov	r0, r31
     180:	fd e6       	ldi	r31, 0x6D	; 109
     182:	ef 2e       	mov	r14, r31
     184:	f4 e0       	ldi	r31, 0x04	; 4
     186:	ff 2e       	mov	r15, r31
     188:	f0 2d       	mov	r31, r0
				//for "perfrmance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
				case 0: //performance mode
				//we trigger a sound here based on the location of bc
				trackControl(currentPattern.trackSampleLSB[bc], currentPattern.trackSampleMSB[bc], currentPattern.trackOutputRoute[bc], currentPattern.trackPlayMode[bc]);
				//trackControl(3,0,0,1);
				numPrinter(buttonTest,9, 2,bc);
     18a:	88 e7       	ldi	r24, 0x78	; 120
     18c:	9f ef       	ldi	r25, 0xFF	; 255
     18e:	9c 01       	movw	r18, r24
     190:	25 5d       	subi	r18, 0xD5	; 213
     192:	33 40       	sbci	r19, 0x03	; 3
     194:	69 01       	movw	r12, r18
		uint16_t fullBitsParse = fullBits;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
	{
		currentTrig = (fullBitsParse&1);
     196:	8c 2f       	mov	r24, r28
     198:	81 70       	andi	r24, 0x01	; 1
     19a:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <currentTrig>
		if(currentTrig)
     19e:	88 23       	and	r24, r24
     1a0:	f1 f0       	breq	.+60     	; 0x1de <listenTrigButtons+0xaa>
		{
			switch (encoderAValue)
     1a2:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <encoderAValue>
     1a6:	81 11       	cpse	r24, r1
     1a8:	1a c0       	rjmp	.+52     	; 0x1de <listenTrigButtons+0xaa>
			{
				
				//for "perfrmance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
				case 0: //performance mode
				//we trigger a sound here based on the location of bc
				trackControl(currentPattern.trackSampleLSB[bc], currentPattern.trackSampleMSB[bc], currentPattern.trackOutputRoute[bc], currentPattern.trackPlayMode[bc]);
     1aa:	f8 01       	movw	r30, r16
     1ac:	20 81       	ld	r18, Z
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	e0 57       	subi	r30, 0x70	; 112
     1b2:	f1 09       	sbc	r31, r1
     1b4:	40 81       	ld	r20, Z
     1b6:	50 e0       	ldi	r21, 0x00	; 0
     1b8:	f8 01       	movw	r30, r16
     1ba:	60 89       	ldd	r22, Z+16	; 0x10
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	80 a1       	ldd	r24, Z+32	; 0x20
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	79 d6       	rcall	.+3314   	; 0xeb6 <trackControl>
				//trackControl(3,0,0,1);
				numPrinter(buttonTest,9, 2,bc);
     1c4:	96 01       	movw	r18, r12
     1c6:	20 0f       	add	r18, r16
     1c8:	31 1f       	adc	r19, r17
     1ca:	42 e0       	ldi	r20, 0x02	; 2
     1cc:	69 e0       	ldi	r22, 0x09	; 9
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	92 e0       	ldi	r25, 0x02	; 2
     1d2:	4a d4       	rcall	.+2196   	; 0xa68 <numPrinter>
				outputS(buttonTest, 2);
     1d4:	62 e0       	ldi	r22, 0x02	; 2
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	92 e0       	ldi	r25, 0x02	; 2
     1dc:	2d d4       	rcall	.+2138   	; 0xa38 <outputS>
			}
		
		
		}
		
		fullBitsParse = fullBitsParse>>1;
     1de:	d6 95       	lsr	r29
     1e0:	c7 95       	ror	r28
     1e2:	0f 5f       	subi	r16, 0xFF	; 255
     1e4:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lastFullBits = fullBits;
		uint16_t fullBitsParse = fullBits;
		//play sounds, if that is the switch case on the encoder
	//updateLEDs
	for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     1e6:	0e 15       	cp	r16, r14
     1e8:	1f 05       	cpc	r17, r15
     1ea:	a9 f6       	brne	.-86     	; 0x196 <listenTrigButtons+0x62>
		fullBitsParse = fullBitsParse>>1;
	}
	}


}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
     1f2:	0f 91       	pop	r16
     1f4:	ff 90       	pop	r15
     1f6:	ef 90       	pop	r14
     1f8:	df 90       	pop	r13
     1fa:	cf 90       	pop	r12
     1fc:	08 95       	ret

000001fe <listenGPButtons>:

void listenGPButtons() // are the encoder buttons here also?
{
     1fe:	08 95       	ret

00000200 <initEncoders>:
#include "globalVariables.h"

void initEncoders()
{
	//this is where we set the encoder pins to where they need to be
PORTH = 0B01111000; // enable internal pullup resistors.
     200:	88 e7       	ldi	r24, 0x78	; 120
     202:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     206:	08 95       	ret

00000208 <pollEncoder0>:

}

void pollEncoder0(uint8_t *encoderC0)
{
	if(~PINH&(1<<PH6))
     208:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     20c:	26 fd       	sbrc	r18, 6
     20e:	12 c0       	rjmp	.+36     	; 0x234 <pollEncoder0+0x2c>
	{
		if(~PINH&(1<<PH5))
     210:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     214:	25 fd       	sbrc	r18, 5
     216:	05 c0       	rjmp	.+10     	; 0x222 <pollEncoder0+0x1a>
		{
			//left turn?
			*encoderC0= (*encoderC0)+1;
     218:	fc 01       	movw	r30, r24
     21a:	20 81       	ld	r18, Z
     21c:	2f 5f       	subi	r18, 0xFF	; 255
     21e:	20 83       	st	Z, r18
     220:	04 c0       	rjmp	.+8      	; 0x22a <pollEncoder0+0x22>
		}
		else
		{
			*encoderC0= (*encoderC0)-1;
     222:	fc 01       	movw	r30, r24
     224:	20 81       	ld	r18, Z
     226:	21 50       	subi	r18, 0x01	; 1
     228:	20 83       	st	Z, r18
		}
		//_delay_ms(2); // seems un-necesary with while loop
		while(~PINH&(1<<PH6)){} // this does make things smoother, but we need to be sure we have interupts for important things.
     22a:	e0 e0       	ldi	r30, 0x00	; 0
     22c:	f1 e0       	ldi	r31, 0x01	; 1
     22e:	80 81       	ld	r24, Z
     230:	86 ff       	sbrs	r24, 6
     232:	fd cf       	rjmp	.-6      	; 0x22e <pollEncoder0+0x26>
     234:	08 95       	ret

00000236 <pollEncoder1>:

}

void pollEncoder1(uint8_t *encoderC1)
{
	if(~PINH&(1<<PH3))
     236:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     23a:	23 fd       	sbrc	r18, 3
     23c:	12 c0       	rjmp	.+36     	; 0x262 <pollEncoder1+0x2c>
	{
		if(~PINH&(1<<PH4))
     23e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     242:	24 fd       	sbrc	r18, 4
     244:	05 c0       	rjmp	.+10     	; 0x250 <pollEncoder1+0x1a>
		{
			//left turn?
			*encoderC1=(*encoderC1)-1;
     246:	fc 01       	movw	r30, r24
     248:	20 81       	ld	r18, Z
     24a:	21 50       	subi	r18, 0x01	; 1
     24c:	20 83       	st	Z, r18
     24e:	04 c0       	rjmp	.+8      	; 0x258 <pollEncoder1+0x22>
		}
		else
		{
			*encoderC1=(*encoderC1)+1;
     250:	fc 01       	movw	r30, r24
     252:	20 81       	ld	r18, Z
     254:	2f 5f       	subi	r18, 0xFF	; 255
     256:	20 83       	st	Z, r18
		}
		//_delay_ms(2); // seems un-necesary with while loop
		while(~PINH&(1<<PH3)){} // this does make things smoother, but we need to be sure we have interupts for important things.
     258:	e0 e0       	ldi	r30, 0x00	; 0
     25a:	f1 e0       	ldi	r31, 0x01	; 1
     25c:	80 81       	ld	r24, Z
     25e:	83 ff       	sbrs	r24, 3
     260:	fd cf       	rjmp	.-6      	; 0x25c <pollEncoder1+0x26>
     262:	08 95       	ret

00000264 <listenEncoders>:


void listenEncoders()
{
	//this is where we update the encoder variables.
	pollEncoder0(&encoderAValue);
     264:	84 ed       	ldi	r24, 0xD4	; 212
     266:	93 e0       	ldi	r25, 0x03	; 3
     268:	cf df       	rcall	.-98     	; 0x208 <pollEncoder0>
	pollEncoder1(&encoderBValue);
     26a:	83 ed       	ldi	r24, 0xD3	; 211
     26c:	95 e0       	ldi	r25, 0x05	; 5
     26e:	e3 cf       	rjmp	.-58     	; 0x236 <pollEncoder1>
     270:	08 95       	ret

00000272 <initBank>:

#include <avr/io.h>
#include "globalVariables.h"

void initBank()
{
     272:	ed e7       	ldi	r30, 0x7D	; 125
     274:	f4 e0       	ldi	r31, 0x04	; 4
	for(uint8_t i = 0; i<16; i++)
     276:	80 e0       	ldi	r24, 0x00	; 0
	{
		currentPattern.trackSampleLSB[i] = i+1;
     278:	8f 5f       	subi	r24, 0xFF	; 255
     27a:	81 93       	st	Z+, r24
#include <avr/io.h>
#include "globalVariables.h"

void initBank()
{
	for(uint8_t i = 0; i<16; i++)
     27c:	80 31       	cpi	r24, 0x10	; 16
     27e:	e1 f7       	brne	.-8      	; 0x278 <initBank+0x6>
	{
		currentPattern.trackSampleLSB[i] = i+1;
	}


     280:	08 95       	ret

00000282 <startADCConversion>:
char envelopeTimePrint[20] = "EnvelopeTimex:xxxxMS";

uint8_t startADCConversion()
{
	
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     282:	ea e7       	ldi	r30, 0x7A	; 122
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	80 64       	ori	r24, 0x40	; 64
     28a:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     28c:	80 81       	ld	r24, Z
     28e:	86 fd       	sbrc	r24, 6
     290:	fd cf       	rjmp	.-6      	; 0x28c <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.
     292:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
}
     296:	08 95       	ret

00000298 <initADC>:

void initADC()
{
	DDRE = 0B00111000; //init pins E5, 4, and 3 as select pins on the external mux.
     298:	88 e3       	ldi	r24, 0x38	; 56
     29a:	8d b9       	out	0x0d, r24	; 13
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     29c:	80 e2       	ldi	r24, 0x20	; 32
     29e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     2a2:	87 e8       	ldi	r24, 0x87	; 135
     2a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     2a8:	88 e0       	ldi	r24, 0x08	; 8
     2aa:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     2ae:	8f ef       	ldi	r24, 0xFF	; 255
     2b0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     2b4:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	startADCConversion();
     2b8:	e4 cf       	rjmp	.-56     	; 0x282 <startADCConversion>
     2ba:	08 95       	ret

000002bc <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     2bc:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     2be:	98 2f       	mov	r25, r24
     2c0:	96 95       	lsr	r25
     2c2:	96 95       	lsr	r25
     2c4:	2f e2       	ldi	r18, 0x2F	; 47
     2c6:	92 9f       	mul	r25, r18
     2c8:	91 2d       	mov	r25, r1
     2ca:	11 24       	eor	r1, r1
     2cc:	96 95       	lsr	r25
     2ce:	2c e2       	ldi	r18, 0x2C	; 44
     2d0:	92 9f       	mul	r25, r18
     2d2:	80 19       	sub	r24, r0
     2d4:	11 24       	eor	r1, r1
     2d6:	98 2f       	mov	r25, r24
	if(select<40)
     2d8:	88 32       	cpi	r24, 0x28	; 40
     2da:	18 f5       	brcc	.+70     	; 0x322 <selectKnob+0x66>
	{
		ADCSRB = (1 << MUX5);
     2dc:	88 e0       	ldi	r24, 0x08	; 8
     2de:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     2e2:	c9 2f       	mov	r28, r25
     2e4:	c7 70       	andi	r28, 0x07	; 7
		uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     2e6:	96 95       	lsr	r25
     2e8:	96 95       	lsr	r25
     2ea:	96 95       	lsr	r25
     2ec:	90 62       	ori	r25, 0x20	; 32
     2ee:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     2f2:	c7 df       	rcall	.-114    	; 0x282 <startADCConversion>
		//we might need to worry about the delay, but that's fine.
		
		//we put our select0 and select2 pins in the opposite ports, so we need to do some math to fix that.
		//easy stupid fix:
		switch (tempMuxSelect)
     2f4:	c3 30       	cpi	r28, 0x03	; 3
     2f6:	59 f0       	breq	.+22     	; 0x30e <selectKnob+0x52>
     2f8:	18 f4       	brcc	.+6      	; 0x300 <selectKnob+0x44>
     2fa:	c1 30       	cpi	r28, 0x01	; 1
     2fc:	31 f0       	breq	.+12     	; 0x30a <selectKnob+0x4e>
     2fe:	0c c0       	rjmp	.+24     	; 0x318 <selectKnob+0x5c>
     300:	c4 30       	cpi	r28, 0x04	; 4
     302:	39 f0       	breq	.+14     	; 0x312 <selectKnob+0x56>
     304:	c6 30       	cpi	r28, 0x06	; 6
     306:	39 f0       	breq	.+14     	; 0x316 <selectKnob+0x5a>
     308:	07 c0       	rjmp	.+14     	; 0x318 <selectKnob+0x5c>
		{
			case 1: muxSelect = 4;
     30a:	c4 e0       	ldi	r28, 0x04	; 4
     30c:	05 c0       	rjmp	.+10     	; 0x318 <selectKnob+0x5c>
			break;
			
			case 3:	muxSelect = 6;
     30e:	c6 e0       	ldi	r28, 0x06	; 6
			break;
     310:	03 c0       	rjmp	.+6      	; 0x318 <selectKnob+0x5c>
			
			case 4: muxSelect = 1;
     312:	c1 e0       	ldi	r28, 0x01	; 1
			break;
     314:	01 c0       	rjmp	.+2      	; 0x318 <selectKnob+0x5c>
			
			case 6: muxSelect = 3;
     316:	c3 e0       	ldi	r28, 0x03	; 3
			break;
		}

	//then the external multiplexer
		PORTE = (muxSelect << 3);
     318:	cc 0f       	add	r28, r28
     31a:	cc 0f       	add	r28, r28
     31c:	cc 0f       	add	r28, r28
     31e:	ce b9       	out	0x0e, r28	; 14
     320:	20 c0       	rjmp	.+64     	; 0x362 <selectKnob+0xa6>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     322:	89 32       	cpi	r24, 0x29	; 41
     324:	71 f0       	breq	.+28     	; 0x342 <selectKnob+0x86>
     326:	18 f4       	brcc	.+6      	; 0x32e <selectKnob+0x72>
     328:	88 32       	cpi	r24, 0x28	; 40
     32a:	31 f0       	breq	.+12     	; 0x338 <selectKnob+0x7c>
     32c:	1a c0       	rjmp	.+52     	; 0x362 <selectKnob+0xa6>
     32e:	8a 32       	cpi	r24, 0x2A	; 42
     330:	69 f0       	breq	.+26     	; 0x34c <selectKnob+0x90>
     332:	8b 32       	cpi	r24, 0x2B	; 43
     334:	81 f0       	breq	.+32     	; 0x356 <selectKnob+0x9a>
     336:	15 c0       	rjmp	.+42     	; 0x362 <selectKnob+0xa6>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     338:	85 e2       	ldi	r24, 0x25	; 37
     33a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     33e:	a1 df       	rcall	.-190    	; 0x282 <startADCConversion>
		break;
     340:	10 c0       	rjmp	.+32     	; 0x362 <selectKnob+0xa6>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     342:	86 e2       	ldi	r24, 0x26	; 38
     344:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     348:	9c df       	rcall	.-200    	; 0x282 <startADCConversion>
		break;
     34a:	0b c0       	rjmp	.+22     	; 0x362 <selectKnob+0xa6>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     34c:	87 e2       	ldi	r24, 0x27	; 39
     34e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     352:	97 df       	rcall	.-210    	; 0x282 <startADCConversion>
		break;
     354:	06 c0       	rjmp	.+12     	; 0x362 <selectKnob+0xa6>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     356:	80 e2       	ldi	r24, 0x20	; 32
     358:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     35c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     360:	90 df       	rcall	.-224    	; 0x282 <startADCConversion>
		break;
		}
	
	}
	
}
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <updateKnob>:

void updateKnob(uint8_t select)
{
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
for (int i = 3; i > 0; i--) {
	knobBuffer[i][select] = knobBuffer[i - 1][select];//shift everyone up one.
     36a:	c8 2f       	mov	r28, r24
     36c:	d0 e0       	ldi	r29, 0x00	; 0
     36e:	c1 5e       	subi	r28, 0xE1	; 225
     370:	da 4f       	sbci	r29, 0xFA	; 250
     372:	de 01       	movw	r26, r28
     374:	ac 57       	subi	r26, 0x7C	; 124
     376:	bf 4f       	sbci	r27, 0xFF	; 255
     378:	fe 01       	movw	r30, r28
     37a:	e8 5a       	subi	r30, 0xA8	; 168
     37c:	ff 4f       	sbci	r31, 0xFF	; 255
     37e:	80 81       	ld	r24, Z
     380:	8c 93       	st	X, r24
     382:	8c a5       	ldd	r24, Y+44	; 0x2c
     384:	80 83       	st	Z, r24
     386:	88 81       	ld	r24, Y
     388:	8c a7       	std	Y+44, r24	; 0x2c
}
knobBuffer[0][select] = startADCConversion(); 
     38a:	7b df       	rcall	.-266    	; 0x282 <startADCConversion>
     38c:	88 83       	st	Y, r24

}
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <interperetKnob>:

void interperetKnob(uint8_t select)
{//this function will compare outputs, and write to our struct.
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
	select = select%44;
     39e:	98 2f       	mov	r25, r24
     3a0:	96 95       	lsr	r25
     3a2:	96 95       	lsr	r25
     3a4:	2f e2       	ldi	r18, 0x2F	; 47
     3a6:	92 9f       	mul	r25, r18
     3a8:	91 2d       	mov	r25, r1
     3aa:	11 24       	eor	r1, r1
     3ac:	96 95       	lsr	r25
     3ae:	2c e2       	ldi	r18, 0x2C	; 44
     3b0:	92 9f       	mul	r25, r18
     3b2:	80 19       	sub	r24, r0
     3b4:	11 24       	eor	r1, r1
     3b6:	98 2f       	mov	r25, r24
	float volumeDivisor = 3.1875;
	checkValue = (knobBuffer[0][select])+(knobBuffer[1][select])+(knobBuffer[2][select])+(knobBuffer[3][select]);
     3b8:	e8 2f       	mov	r30, r24
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	e1 5e       	subi	r30, 0xE1	; 225
     3be:	fa 4f       	sbci	r31, 0xFA	; 250
	checkValue = (checkValue >> 2); //this gets us the 8 bit value for to check against 
     3c0:	80 81       	ld	r24, Z
     3c2:	64 a5       	ldd	r22, Z+44	; 0x2c
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	68 0f       	add	r22, r24
     3c8:	71 1d       	adc	r23, r1

void interperetKnob(uint8_t select)
{//this function will compare outputs, and write to our struct.
	select = select%44;
	float volumeDivisor = 3.1875;
	checkValue = (knobBuffer[0][select])+(knobBuffer[1][select])+(knobBuffer[2][select])+(knobBuffer[3][select]);
     3ca:	df 01       	movw	r26, r30
     3cc:	a8 5a       	subi	r26, 0xA8	; 168
     3ce:	bf 4f       	sbci	r27, 0xFF	; 255
	checkValue = (checkValue >> 2); //this gets us the 8 bit value for to check against 
     3d0:	8c 91       	ld	r24, X
     3d2:	68 0f       	add	r22, r24
     3d4:	71 1d       	adc	r23, r1

void interperetKnob(uint8_t select)
{//this function will compare outputs, and write to our struct.
	select = select%44;
	float volumeDivisor = 3.1875;
	checkValue = (knobBuffer[0][select])+(knobBuffer[1][select])+(knobBuffer[2][select])+(knobBuffer[3][select]);
     3d6:	ec 57       	subi	r30, 0x7C	; 124
     3d8:	ff 4f       	sbci	r31, 0xFF	; 255
	checkValue = (checkValue >> 2); //this gets us the 8 bit value for to check against 
     3da:	80 81       	ld	r24, Z
     3dc:	68 0f       	add	r22, r24
     3de:	71 1d       	adc	r23, r1
     3e0:	75 95       	asr	r23
     3e2:	67 95       	ror	r22
     3e4:	75 95       	asr	r23
     3e6:	67 95       	ror	r22
     3e8:	70 93 cf 03 	sts	0x03CF, r23	; 0x8003cf <checkValue+0x1>
     3ec:	60 93 ce 03 	sts	0x03CE, r22	; 0x8003ce <checkValue>
	if (select<40)
     3f0:	98 32       	cpi	r25, 0x28	; 40
     3f2:	08 f0       	brcs	.+2      	; 0x3f6 <interperetKnob+0x62>
     3f4:	06 c2       	rjmp	.+1036   	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
	{
		uint8_t positionSelect = select%8;
     3f6:	c9 2f       	mov	r28, r25
     3f8:	c7 70       	andi	r28, 0x07	; 7
		uint8_t bankSwitch = select/8;
		switch (bankSwitch)
     3fa:	96 95       	lsr	r25
     3fc:	96 95       	lsr	r25
     3fe:	96 95       	lsr	r25
     400:	92 30       	cpi	r25, 0x02	; 2
     402:	09 f4       	brne	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     404:	d4 c0       	rjmp	.+424    	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     406:	30 f4       	brcc	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     408:	99 23       	and	r25, r25
     40a:	59 f0       	breq	.+22     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     40c:	91 30       	cpi	r25, 0x01	; 1
     40e:	09 f4       	brne	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     410:	8e c0       	rjmp	.+284    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     412:	f7 c1       	rjmp	.+1006   	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
     414:	93 30       	cpi	r25, 0x03	; 3
     416:	09 f4       	brne	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     418:	48 c1       	rjmp	.+656    	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
     41a:	94 30       	cpi	r25, 0x04	; 4
     41c:	09 f4       	brne	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	64 c1       	rjmp	.+712    	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
     420:	f0 c1       	rjmp	.+992    	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
		{
			
			case 0:; //switch cases are "labels", used for goto stuff. so, you have to end the label before declaring variables. should be fine?
			
			int16_t currentOutVoulume = ((currentPattern.outputLevelMSB[positionSelect]<<8)|(currentPattern.outputLevelLSB[positionSelect])); 
     422:	0c 2f       	mov	r16, r28
     424:	10 e0       	ldi	r17, 0x00	; 0
			//this should be a regular integer between -70 and +10
			int16_t negCheckValue = (checkValue / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     426:	07 2e       	mov	r0, r23
     428:	00 0c       	add	r0, r0
     42a:	88 0b       	sbc	r24, r24
     42c:	99 0b       	sbc	r25, r25
     42e:	d2 d6       	rcall	.+3492   	; 0x11d4 <__floatsisf>
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	4c e4       	ldi	r20, 0x4C	; 76
     436:	50 e4       	ldi	r21, 0x40	; 64
     438:	32 d6       	rcall	.+3172   	; 0x109e <__divsf3>
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	4c e8       	ldi	r20, 0x8C	; 140
     440:	52 e4       	ldi	r21, 0x42	; 66
     442:	c8 d5       	rcall	.+2960   	; 0xfd4 <__subsf3>
     444:	94 d6       	rcall	.+3368   	; 0x116e <__fixsfsi>
     446:	86 2f       	mov	r24, r22
     448:	97 2f       	mov	r25, r23
     44a:	9c 01       	movw	r18, r24
		switch (bankSwitch)
		{
			
			case 0:; //switch cases are "labels", used for goto stuff. so, you have to end the label before declaring variables. should be fine?
			
			int16_t currentOutVoulume = ((currentPattern.outputLevelMSB[positionSelect]<<8)|(currentPattern.outputLevelLSB[positionSelect])); 
     44c:	f8 01       	movw	r30, r16
     44e:	eb 52       	subi	r30, 0x2B	; 43
     450:	fc 4f       	sbci	r31, 0xFC	; 252
			//this should be a regular integer between -70 and +10
			int16_t negCheckValue = (checkValue / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentOutVoulume!=negCheckValue)
     452:	80 81       	ld	r24, Z
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	98 2f       	mov	r25, r24
     458:	88 27       	eor	r24, r24
     45a:	40 85       	ldd	r20, Z+8	; 0x08
     45c:	84 2b       	or	r24, r20
     45e:	82 17       	cp	r24, r18
     460:	93 07       	cpc	r25, r19
     462:	09 f4       	brne	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     464:	ce c1       	rjmp	.+924    	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
			{
				currentPattern.outputLevelLSB[positionSelect] = (negCheckValue);
     466:	f8 01       	movw	r30, r16
     468:	eb 52       	subi	r30, 0x2B	; 43
     46a:	fc 4f       	sbci	r31, 0xFC	; 252
     46c:	60 87       	std	Z+8, r22	; 0x08
				if(negCheckValue>(-1))
     46e:	33 23       	and	r19, r19
     470:	64 f1       	brlt	.+88     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
				{
					currentPattern.outputLevelMSB[positionSelect] = 0;
     472:	f8 01       	movw	r30, r16
     474:	eb 52       	subi	r30, 0x2B	; 43
     476:	fc 4f       	sbci	r31, 0xFC	; 252
     478:	10 82       	st	Z, r1
					//just hard coding this for now until we make a function.
					outVolumePrint[14] = 48;
     47a:	e0 e5       	ldi	r30, 0x50	; 80
     47c:	f2 e0       	ldi	r31, 0x02	; 2
     47e:	80 e3       	ldi	r24, 0x30	; 48
     480:	86 87       	std	Z+14, r24	; 0x0e
					outVolumePrint[16] = (currentPattern.outputLevelLSB[positionSelect]%10)+48;
     482:	2d ec       	ldi	r18, 0xCD	; 205
     484:	62 9f       	mul	r22, r18
     486:	81 2d       	mov	r24, r1
     488:	11 24       	eor	r1, r1
     48a:	86 95       	lsr	r24
     48c:	86 95       	lsr	r24
     48e:	86 95       	lsr	r24
     490:	88 0f       	add	r24, r24
     492:	98 2f       	mov	r25, r24
     494:	99 0f       	add	r25, r25
     496:	99 0f       	add	r25, r25
     498:	89 0f       	add	r24, r25
     49a:	46 2f       	mov	r20, r22
     49c:	48 1b       	sub	r20, r24
     49e:	84 2f       	mov	r24, r20
     4a0:	80 5d       	subi	r24, 0xD0	; 208
     4a2:	80 8b       	std	Z+16, r24	; 0x10
					outVolumePrint[15] = ((currentPattern.outputLevelLSB[positionSelect]%100)/10)+48;
     4a4:	89 e2       	ldi	r24, 0x29	; 41
     4a6:	68 9f       	mul	r22, r24
     4a8:	81 2d       	mov	r24, r1
     4aa:	11 24       	eor	r1, r1
     4ac:	82 95       	swap	r24
     4ae:	8f 70       	andi	r24, 0x0F	; 15
     4b0:	94 e6       	ldi	r25, 0x64	; 100
     4b2:	89 9f       	mul	r24, r25
     4b4:	60 19       	sub	r22, r0
     4b6:	11 24       	eor	r1, r1
     4b8:	62 9f       	mul	r22, r18
     4ba:	61 2d       	mov	r22, r1
     4bc:	11 24       	eor	r1, r1
     4be:	66 95       	lsr	r22
     4c0:	66 95       	lsr	r22
     4c2:	66 95       	lsr	r22
     4c4:	60 5d       	subi	r22, 0xD0	; 208
     4c6:	67 87       	std	Z+15, r22	; 0x0f
     4c8:	20 c0       	rjmp	.+64     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
				}else
				{
					currentPattern.outputLevelMSB[positionSelect] = 255;
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	f8 01       	movw	r30, r16
     4ce:	eb 52       	subi	r30, 0x2B	; 43
     4d0:	fc 4f       	sbci	r31, 0xFC	; 252
     4d2:	80 83       	st	Z, r24
					outVolumePrint[14] = '-';
     4d4:	e0 e5       	ldi	r30, 0x50	; 80
     4d6:	f2 e0       	ldi	r31, 0x02	; 2
     4d8:	8d e2       	ldi	r24, 0x2D	; 45
     4da:	86 87       	std	Z+14, r24	; 0x0e
					outVolumePrint[15] = ((((currentPattern.outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     4dc:	60 95       	com	r22
     4de:	26 2f       	mov	r18, r22
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	2f 5f       	subi	r18, 0xFF	; 255
     4e4:	3f 4f       	sbci	r19, 0xFF	; 255
     4e6:	c9 01       	movw	r24, r18
     4e8:	64 e6       	ldi	r22, 0x64	; 100
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	ff d6       	rcall	.+3582   	; 0x12ec <__divmodhi4>
     4ee:	0f 2e       	mov	r0, r31
     4f0:	fa e0       	ldi	r31, 0x0A	; 10
     4f2:	ef 2e       	mov	r14, r31
     4f4:	f1 2c       	mov	r15, r1
     4f6:	f0 2d       	mov	r31, r0
     4f8:	b7 01       	movw	r22, r14
     4fa:	f8 d6       	rcall	.+3568   	; 0x12ec <__divmodhi4>
     4fc:	60 5d       	subi	r22, 0xD0	; 208
					outVolumePrint[16] = (((currentPattern.outputLevelLSB[positionSelect]^255)+1)%10)+48;
     4fe:	67 87       	std	Z+15, r22	; 0x0f
     500:	c9 01       	movw	r24, r18
     502:	b7 01       	movw	r22, r14
     504:	f3 d6       	rcall	.+3558   	; 0x12ec <__divmodhi4>
     506:	80 5d       	subi	r24, 0xD0	; 208
     508:	80 8b       	std	Z+16, r24	; 0x10
				}
				//then output to screen. 
				outVolumePrint[10] = positionSelect + 49;
     50a:	cf 5c       	subi	r28, 0xCF	; 207
     50c:	c0 93 5a 02 	sts	0x025A, r28	; 0x80025a <outVolumePrint+0xa>
				outputS(outVolumePrint, 3);
     510:	63 e0       	ldi	r22, 0x03	; 3
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	80 e5       	ldi	r24, 0x50	; 80
     516:	92 e0       	ldi	r25, 0x02	; 2
     518:	8f d2       	rcall	.+1310   	; 0xa38 <outputS>
				setOutputVolume(currentPattern.outputLevelLSB[positionSelect], currentPattern.outputLevelMSB[positionSelect], positionSelect);
     51a:	f8 01       	movw	r30, r16
     51c:	eb 52       	subi	r30, 0x2B	; 43
     51e:	fc 4f       	sbci	r31, 0xFC	; 252
     520:	60 81       	ld	r22, Z
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	80 85       	ldd	r24, Z+8	; 0x08
     526:	a8 01       	movw	r20, r16
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	ea d4       	rcall	.+2516   	; 0xf00 <setOutputVolume>
     52c:	6a c1       	rjmp	.+724    	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
			}
			break;
			
 			case 1:
 			if(currentPattern.outputPitch[positionSelect]!=(checkValue^128))
     52e:	0c 2f       	mov	r16, r28
     530:	10 e0       	ldi	r17, 0x00	; 0
     532:	f8 01       	movw	r30, r16
     534:	eb 52       	subi	r30, 0x2B	; 43
     536:	fc 4f       	sbci	r31, 0xFC	; 252
     538:	80 89       	ldd	r24, Z+16	; 0x10
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	9b 01       	movw	r18, r22
     53e:	20 58       	subi	r18, 0x80	; 128
     540:	82 17       	cp	r24, r18
     542:	93 07       	cpc	r25, r19
     544:	09 f4       	brne	.+2      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     546:	5d c1       	rjmp	.+698    	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
 			{
 				(currentPattern.outputPitch[positionSelect]) = (checkValue^128);
     548:	60 58       	subi	r22, 0x80	; 128
     54a:	f8 01       	movw	r30, r16
     54c:	eb 52       	subi	r30, 0x2B	; 43
     54e:	fc 4f       	sbci	r31, 0xFC	; 252
     550:	60 8b       	std	Z+16, r22	; 0x10
				 if(encoderAValue == 0)
     552:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <encoderAValue>
     556:	81 11       	cpse	r24, r1
     558:	20 c0       	rjmp	.+64     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
				 {
					 pitchPrint[5] = (positionSelect+49);
     55a:	cf 5c       	subi	r28, 0xCF	; 207
     55c:	c0 93 69 02 	sts	0x0269, r28	; 0x800269 <pitchPrint+0x5>
					 if(currentPattern.outputPitch[positionSelect]>>7)
     560:	66 23       	and	r22, r22
     562:	64 f4       	brge	.+24     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
					 {
						 //again, hard coding.
						 pitchPrint[7] = '-';
     564:	8d e2       	ldi	r24, 0x2D	; 45
     566:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pitchPrint+0x7>
						 numPrinter(pitchPrint, 8, 3, (currentPattern.outputPitch[positionSelect]^255));
     56a:	60 95       	com	r22
     56c:	26 2f       	mov	r18, r22
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	43 e0       	ldi	r20, 0x03	; 3
     572:	68 e0       	ldi	r22, 0x08	; 8
     574:	84 e6       	ldi	r24, 0x64	; 100
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	77 d2       	rcall	.+1262   	; 0xa68 <numPrinter>
					 
					 }else{
						 pitchPrint[7] = '+';
     57a:	0a c0       	rjmp	.+20     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
     57c:	8b e2       	ldi	r24, 0x2B	; 43
     57e:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pitchPrint+0x7>
					 numPrinter(pitchPrint,8,3,currentPattern.outputPitch[positionSelect]);}
     582:	26 2f       	mov	r18, r22
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	43 e0       	ldi	r20, 0x03	; 3
     588:	68 e0       	ldi	r22, 0x08	; 8
     58a:	84 e6       	ldi	r24, 0x64	; 100
     58c:	92 e0       	ldi	r25, 0x02	; 2
					 outputS(pitchPrint, 3);
     58e:	6c d2       	rcall	.+1240   	; 0xa68 <numPrinter>
     590:	63 e0       	ldi	r22, 0x03	; 3
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	84 e6       	ldi	r24, 0x64	; 100
     596:	92 e0       	ldi	r25, 0x02	; 2
				 }
				 outputSampleRate(positionSelect, 0, currentPattern.outputPitch[positionSelect]);
     598:	4f d2       	rcall	.+1182   	; 0xa38 <outputS>
     59a:	f8 01       	movw	r30, r16
     59c:	eb 52       	subi	r30, 0x2B	; 43
     59e:	fc 4f       	sbci	r31, 0xFC	; 252
     5a0:	40 89       	ldd	r20, Z+16	; 0x10
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	c8 01       	movw	r24, r16
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     5aa:	f1 d4       	rcall	.+2530   	; 0xf8e <outputSampleRate>
     5ac:	2a c1       	rjmp	.+596    	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
			int16_t negCheckValueEnvelope = (checkValue / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     5ae:	0c 2f       	mov	r16, r28
     5b0:	10 e0       	ldi	r17, 0x00	; 0
     5b2:	07 2e       	mov	r0, r23
     5b4:	00 0c       	add	r0, r0
     5b6:	88 0b       	sbc	r24, r24
     5b8:	99 0b       	sbc	r25, r25
     5ba:	0c d6       	rcall	.+3096   	; 0x11d4 <__floatsisf>
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	4c e4       	ldi	r20, 0x4C	; 76
     5c2:	50 e4       	ldi	r21, 0x40	; 64
     5c4:	6c d5       	rcall	.+2776   	; 0x109e <__divsf3>
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	4c e8       	ldi	r20, 0x8C	; 140
     5cc:	52 e4       	ldi	r21, 0x42	; 66
     5ce:	02 d5       	rcall	.+2564   	; 0xfd4 <__subsf3>
     5d0:	ce d5       	rcall	.+2972   	; 0x116e <__fixsfsi>
     5d2:	86 2f       	mov	r24, r22
     5d4:	97 2f       	mov	r25, r23
     5d6:	9c 01       	movw	r18, r24
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     5d8:	a8 01       	movw	r20, r16
     5da:	4b 52       	subi	r20, 0x2B	; 43
     5dc:	5c 4f       	sbci	r21, 0xFC	; 252
     5de:	fa 01       	movw	r30, r20
     5e0:	e8 5b       	subi	r30, 0xB8	; 184
     5e2:	ff 4f       	sbci	r31, 0xFF	; 255
			int16_t negCheckValueEnvelope = (checkValue / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentEnvelopeVolume!=negCheckValueEnvelope)
     5e4:	80 81       	ld	r24, Z
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	98 2f       	mov	r25, r24
     5ea:	88 27       	eor	r24, r24
 			}
			
 			break;
 			
 			case 2:;
			int16_t currentEnvelopeVolume = ((currentPattern.trackFadeGainMSB[positionSelect]<<8)|(currentPattern.trackFadeGainLSB[positionSelect]));
     5ec:	70 96       	adiw	r30, 0x10	; 16
			int16_t negCheckValueEnvelope = (checkValue / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
			if(currentEnvelopeVolume!=negCheckValueEnvelope)
     5ee:	40 81       	ld	r20, Z
     5f0:	84 2b       	or	r24, r20
     5f2:	82 17       	cp	r24, r18
     5f4:	93 07       	cpc	r25, r19
     5f6:	09 f4       	brne	.+2      	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
     5f8:	04 c1       	rjmp	.+520    	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
			{
				currentPattern.trackFadeGainLSB[positionSelect] = (negCheckValueEnvelope);
     5fa:	f8 01       	movw	r30, r16
     5fc:	e3 5d       	subi	r30, 0xD3	; 211
     5fe:	fb 4f       	sbci	r31, 0xFB	; 251
     600:	60 83       	st	Z, r22
				if(negCheckValueEnvelope>(-1))
     602:	33 23       	and	r19, r19
     604:	64 f1       	brlt	.+88     	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
				{
					currentPattern.trackFadeGainMSB[positionSelect] = 0;
     606:	f8 01       	movw	r30, r16
     608:	e3 5e       	subi	r30, 0xE3	; 227
     60a:	fb 4f       	sbci	r31, 0xFB	; 251
     60c:	10 82       	st	Z, r1
					//just hard coding this for now until we make a function.
					envelopeLevelPrint[15] = 48;
     60e:	e8 e2       	ldi	r30, 0x28	; 40
     610:	f2 e0       	ldi	r31, 0x02	; 2
     612:	80 e3       	ldi	r24, 0x30	; 48
     614:	87 87       	std	Z+15, r24	; 0x0f
					envelopeLevelPrint[17] = (currentPattern.trackFadeGainLSB[positionSelect]%10)+48;
     616:	2d ec       	ldi	r18, 0xCD	; 205
     618:	62 9f       	mul	r22, r18
     61a:	81 2d       	mov	r24, r1
     61c:	11 24       	eor	r1, r1
     61e:	86 95       	lsr	r24
     620:	86 95       	lsr	r24
     622:	86 95       	lsr	r24
     624:	88 0f       	add	r24, r24
     626:	98 2f       	mov	r25, r24
     628:	99 0f       	add	r25, r25
     62a:	99 0f       	add	r25, r25
     62c:	89 0f       	add	r24, r25
     62e:	96 2f       	mov	r25, r22
     630:	98 1b       	sub	r25, r24
     632:	89 2f       	mov	r24, r25
     634:	80 5d       	subi	r24, 0xD0	; 208
     636:	81 8b       	std	Z+17, r24	; 0x11
					envelopeLevelPrint[16] = ((currentPattern.trackFadeGainLSB[positionSelect]%100)/10)+48;
     638:	89 e2       	ldi	r24, 0x29	; 41
     63a:	68 9f       	mul	r22, r24
     63c:	81 2d       	mov	r24, r1
     63e:	11 24       	eor	r1, r1
     640:	82 95       	swap	r24
     642:	8f 70       	andi	r24, 0x0F	; 15
     644:	44 e6       	ldi	r20, 0x64	; 100
     646:	84 9f       	mul	r24, r20
     648:	60 19       	sub	r22, r0
     64a:	11 24       	eor	r1, r1
     64c:	62 9f       	mul	r22, r18
     64e:	61 2d       	mov	r22, r1
     650:	11 24       	eor	r1, r1
     652:	66 95       	lsr	r22
     654:	66 95       	lsr	r22
     656:	66 95       	lsr	r22
     658:	60 5d       	subi	r22, 0xD0	; 208
     65a:	60 8b       	std	Z+16, r22	; 0x10
     65c:	1d c0       	rjmp	.+58     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
				}else
				{
					currentPattern.trackFadeGainMSB[positionSelect] = 255;
     65e:	f8 01       	movw	r30, r16
     660:	e3 5e       	subi	r30, 0xE3	; 227
     662:	fb 4f       	sbci	r31, 0xFB	; 251
     664:	8f ef       	ldi	r24, 0xFF	; 255
					envelopeLevelPrint[15] = '-';
     666:	80 83       	st	Z, r24
     668:	e8 e2       	ldi	r30, 0x28	; 40
     66a:	f2 e0       	ldi	r31, 0x02	; 2
     66c:	8d e2       	ldi	r24, 0x2D	; 45
					envelopeLevelPrint[16] = ((((currentPattern.trackFadeGainLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     66e:	87 87       	std	Z+15, r24	; 0x0f
     670:	60 95       	com	r22
     672:	26 2f       	mov	r18, r22
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	2f 5f       	subi	r18, 0xFF	; 255
     678:	3f 4f       	sbci	r19, 0xFF	; 255
     67a:	c9 01       	movw	r24, r18
     67c:	64 e6       	ldi	r22, 0x64	; 100
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	35 d6       	rcall	.+3178   	; 0x12ec <__divmodhi4>
     682:	0a e0       	ldi	r16, 0x0A	; 10
     684:	10 e0       	ldi	r17, 0x00	; 0
     686:	b8 01       	movw	r22, r16
     688:	31 d6       	rcall	.+3170   	; 0x12ec <__divmodhi4>
     68a:	60 5d       	subi	r22, 0xD0	; 208
					envelopeLevelPrint[17] = (((currentPattern.trackFadeGainLSB[positionSelect]^255)+1)%10)+48;
     68c:	60 8b       	std	Z+16, r22	; 0x10
     68e:	c9 01       	movw	r24, r18
     690:	b8 01       	movw	r22, r16
     692:	2c d6       	rcall	.+3160   	; 0x12ec <__divmodhi4>
     694:	80 5d       	subi	r24, 0xD0	; 208
     696:	81 8b       	std	Z+17, r24	; 0x11
				}
				//then output to screen.
				envelopeLevelPrint[13] = positionSelect + 49;
     698:	cf 5c       	subi	r28, 0xCF	; 207
     69a:	c0 93 35 02 	sts	0x0235, r28	; 0x800235 <envelopeLevelPrint+0xd>
				outputS(envelopeLevelPrint, 3);
     69e:	63 e0       	ldi	r22, 0x03	; 3
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	88 e2       	ldi	r24, 0x28	; 40
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	c8 d1       	rcall	.+912    	; 0xa38 <outputS>
     6a8:	ac c0       	rjmp	.+344    	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
     6aa:	2c 2f       	mov	r18, r28
				//nothing to "set", since envelopes are triggered after a sound is playing.
			}
			break;
 			
 			case 3:
 			if(currentPattern.trackFadeTimeMSB[positionSelect]!=checkValue)
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	f9 01       	movw	r30, r18
     6b0:	e3 5c       	subi	r30, 0xC3	; 195
     6b2:	fb 4f       	sbci	r31, 0xFB	; 251
     6b4:	80 81       	ld	r24, Z
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	68 17       	cp	r22, r24
     6ba:	79 07       	cpc	r23, r25
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 			{
 				(currentPattern.trackFadeTimeMSB[positionSelect]) = checkValue;
     6be:	a1 c0       	rjmp	.+322    	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
     6c0:	f9 01       	movw	r30, r18
     6c2:	e3 5c       	subi	r30, 0xC3	; 195
     6c4:	fb 4f       	sbci	r31, 0xFB	; 251
				 numPrinter(envelopeTimePrint,14,4,currentPattern.trackFadeTimeMSB[positionSelect]);
     6c6:	60 83       	st	Z, r22
     6c8:	9b 01       	movw	r18, r22
     6ca:	33 27       	eor	r19, r19
     6cc:	44 e0       	ldi	r20, 0x04	; 4
     6ce:	6e e0       	ldi	r22, 0x0E	; 14
     6d0:	84 e1       	ldi	r24, 0x14	; 20
				 envelopeTimePrint[12] = positionSelect+49;
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	c9 d1       	rcall	.+914    	; 0xa68 <numPrinter>
     6d6:	cf 5c       	subi	r28, 0xCF	; 207
				 outputS(envelopeTimePrint, 3);
     6d8:	c0 93 20 02 	sts	0x0220, r28	; 0x800220 <envelopeTimePrint+0xc>
     6dc:	63 e0       	ldi	r22, 0x03	; 3
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	84 e1       	ldi	r24, 0x14	; 20
 			}
 			break;
 			
 			case 4:;
 			int16_t currentTrackVolume = ((currentPattern.trackMainVolumeMSB[positionSelect]<<8)|(currentPattern.trackMainVolumeLSB[positionSelect]));
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	a9 d1       	rcall	.+850    	; 0xa38 <outputS>
 			int16_t negCheckValueTrack = (checkValue / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
     6e6:	8d c0       	rjmp	.+282    	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
     6e8:	0c 2f       	mov	r16, r28
     6ea:	10 e0       	ldi	r17, 0x00	; 0
     6ec:	07 2e       	mov	r0, r23
     6ee:	00 0c       	add	r0, r0
     6f0:	88 0b       	sbc	r24, r24
     6f2:	99 0b       	sbc	r25, r25
     6f4:	6f d5       	rcall	.+2782   	; 0x11d4 <__floatsisf>
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	4c e4       	ldi	r20, 0x4C	; 76
     6fc:	50 e4       	ldi	r21, 0x40	; 64
     6fe:	cf d4       	rcall	.+2462   	; 0x109e <__divsf3>
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	4c e8       	ldi	r20, 0x8C	; 140
     706:	52 e4       	ldi	r21, 0x42	; 66
     708:	65 d4       	rcall	.+2250   	; 0xfd4 <__subsf3>
     70a:	31 d5       	rcall	.+2658   	; 0x116e <__fixsfsi>
     70c:	86 2f       	mov	r24, r22
     70e:	97 2f       	mov	r25, r23
     710:	9c 01       	movw	r18, r24
     712:	f8 01       	movw	r30, r16
				 outputS(envelopeTimePrint, 3);
 			}
 			break;
 			
 			case 4:;
 			int16_t currentTrackVolume = ((currentPattern.trackMainVolumeMSB[positionSelect]<<8)|(currentPattern.trackMainVolumeLSB[positionSelect]));
     714:	eb 52       	subi	r30, 0x2B	; 43
     716:	fc 4f       	sbci	r31, 0xFC	; 252
     718:	80 a5       	ldd	r24, Z+40	; 0x28
 			int16_t negCheckValueTrack = (checkValue / volumeDivisor)-70; //we need negative check values here, so this is what we have to do I guess?
 			if(currentTrackVolume!=negCheckValueTrack)
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	98 2f       	mov	r25, r24
     71e:	88 27       	eor	r24, r24
     720:	40 ad       	ldd	r20, Z+56	; 0x38
     722:	84 2b       	or	r24, r20
     724:	82 17       	cp	r24, r18
     726:	93 07       	cpc	r25, r19
     728:	09 f4       	brne	.+2      	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
     72a:	6b c0       	rjmp	.+214    	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
     72c:	f8 01       	movw	r30, r16
 			{
	 			currentPattern.trackMainVolumeLSB[positionSelect] = (negCheckValueTrack);
     72e:	eb 52       	subi	r30, 0x2B	; 43
     730:	fc 4f       	sbci	r31, 0xFC	; 252
     732:	60 af       	std	Z+56, r22	; 0x38
     734:	33 23       	and	r19, r19
	 			if(negCheckValueTrack>(-1))
     736:	64 f1       	brlt	.+88     	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
     738:	f8 01       	movw	r30, r16
	 			{
		 			currentPattern.trackMainVolumeMSB[positionSelect] = 0;
     73a:	eb 52       	subi	r30, 0x2B	; 43
     73c:	fc 4f       	sbci	r31, 0xFC	; 252
     73e:	10 a6       	std	Z+40, r1	; 0x28
     740:	ec e3       	ldi	r30, 0x3C	; 60
		 			//just hard coding this for now until we make a function.
		 			trackVolumePrint[15] = 48;
     742:	f2 e0       	ldi	r31, 0x02	; 2
     744:	80 e3       	ldi	r24, 0x30	; 48
     746:	87 87       	std	Z+15, r24	; 0x0f
     748:	2d ec       	ldi	r18, 0xCD	; 205
		 			trackVolumePrint[17] = (currentPattern.trackMainVolumeLSB[positionSelect]%10)+48;
     74a:	62 9f       	mul	r22, r18
     74c:	81 2d       	mov	r24, r1
     74e:	11 24       	eor	r1, r1
     750:	86 95       	lsr	r24
     752:	86 95       	lsr	r24
     754:	86 95       	lsr	r24
     756:	88 0f       	add	r24, r24
     758:	98 2f       	mov	r25, r24
     75a:	99 0f       	add	r25, r25
     75c:	99 0f       	add	r25, r25
     75e:	89 0f       	add	r24, r25
     760:	96 2f       	mov	r25, r22
     762:	98 1b       	sub	r25, r24
     764:	89 2f       	mov	r24, r25
     766:	80 5d       	subi	r24, 0xD0	; 208
     768:	81 8b       	std	Z+17, r24	; 0x11
     76a:	89 e2       	ldi	r24, 0x29	; 41
		 			trackVolumePrint[16] = ((currentPattern.trackMainVolumeLSB[positionSelect]%100)/10)+48;
     76c:	68 9f       	mul	r22, r24
     76e:	81 2d       	mov	r24, r1
     770:	11 24       	eor	r1, r1
     772:	82 95       	swap	r24
     774:	8f 70       	andi	r24, 0x0F	; 15
     776:	44 e6       	ldi	r20, 0x64	; 100
     778:	84 9f       	mul	r24, r20
     77a:	60 19       	sub	r22, r0
     77c:	11 24       	eor	r1, r1
     77e:	62 9f       	mul	r22, r18
     780:	61 2d       	mov	r22, r1
     782:	11 24       	eor	r1, r1
     784:	66 95       	lsr	r22
     786:	66 95       	lsr	r22
     788:	66 95       	lsr	r22
     78a:	60 5d       	subi	r22, 0xD0	; 208
     78c:	60 8b       	std	Z+16, r22	; 0x10
	 			}else
	 			{
		 			currentPattern.trackMainVolumeMSB[positionSelect] = 255;
     78e:	20 c0       	rjmp	.+64     	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	f8 01       	movw	r30, r16
     794:	eb 52       	subi	r30, 0x2B	; 43
		 			trackVolumePrint[15] = '-';
     796:	fc 4f       	sbci	r31, 0xFC	; 252
     798:	80 a7       	std	Z+40, r24	; 0x28
     79a:	ec e3       	ldi	r30, 0x3C	; 60
     79c:	f2 e0       	ldi	r31, 0x02	; 2
		 			trackVolumePrint[16] = ((((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
     79e:	8d e2       	ldi	r24, 0x2D	; 45
     7a0:	87 87       	std	Z+15, r24	; 0x0f
     7a2:	60 95       	com	r22
     7a4:	26 2f       	mov	r18, r22
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	2f 5f       	subi	r18, 0xFF	; 255
     7aa:	3f 4f       	sbci	r19, 0xFF	; 255
     7ac:	c9 01       	movw	r24, r18
     7ae:	64 e6       	ldi	r22, 0x64	; 100
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	9c d5       	rcall	.+2872   	; 0x12ec <__divmodhi4>
     7b4:	0f 2e       	mov	r0, r31
     7b6:	fa e0       	ldi	r31, 0x0A	; 10
     7b8:	ef 2e       	mov	r14, r31
     7ba:	f1 2c       	mov	r15, r1
     7bc:	f0 2d       	mov	r31, r0
     7be:	b7 01       	movw	r22, r14
     7c0:	95 d5       	rcall	.+2858   	; 0x12ec <__divmodhi4>
     7c2:	60 5d       	subi	r22, 0xD0	; 208
		 			trackVolumePrint[17] = (((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
     7c4:	60 8b       	std	Z+16, r22	; 0x10
     7c6:	c9 01       	movw	r24, r18
     7c8:	b7 01       	movw	r22, r14
     7ca:	90 d5       	rcall	.+2848   	; 0x12ec <__divmodhi4>
     7cc:	80 5d       	subi	r24, 0xD0	; 208
	 			}
	 			//then output to screen.
	 			trackVolumePrint[11] = positionSelect + 49;
     7ce:	81 8b       	std	Z+17, r24	; 0x11
     7d0:	cf 5c       	subi	r28, 0xCF	; 207
     7d2:	c0 93 47 02 	sts	0x0247, r28	; 0x800247 <trackVolumePrint+0xb>
	 			outputS(trackVolumePrint, 3);
     7d6:	63 e0       	ldi	r22, 0x03	; 3
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	8c e3       	ldi	r24, 0x3C	; 60
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	2c d1       	rcall	.+600    	; 0xa38 <outputS>
	 			setTrackVolume(currentPattern.trackSampleLSB[positionSelect], currentPattern.trackSampleMSB[positionSelect],
				 currentPattern.trackMainVolumeLSB[positionSelect], currentPattern.trackMainVolumeMSB[positionSelect]);
     7e0:	f8 01       	movw	r30, r16
     7e2:	eb 52       	subi	r30, 0x2B	; 43
     7e4:	fc 4f       	sbci	r31, 0xFC	; 252
		 			trackVolumePrint[17] = (((currentPattern.trackMainVolumeLSB[positionSelect]^255)+1)%10)+48;
	 			}
	 			//then output to screen.
	 			trackVolumePrint[11] = positionSelect + 49;
	 			outputS(trackVolumePrint, 3);
	 			setTrackVolume(currentPattern.trackSampleLSB[positionSelect], currentPattern.trackSampleMSB[positionSelect],
     7e6:	20 a5       	ldd	r18, Z+40	; 0x28
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 ad       	ldd	r20, Z+56	; 0x38
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	df 01       	movw	r26, r30
     7f0:	a8 56       	subi	r26, 0x68	; 104
     7f2:	bf 4f       	sbci	r27, 0xFF	; 255
     7f4:	6c 91       	ld	r22, X
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	e8 55       	subi	r30, 0x58	; 88
     7fa:	ff 4f       	sbci	r31, 0xFF	; 255
     7fc:	80 81       	ld	r24, Z
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	a2 d3       	rcall	.+1860   	; 0xf46 <setTrackVolume>
     802:	cf 91       	pop	r28
		}
		
	}


}
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	08 95       	ret

0000080e <listenKnobs>:
     80e:	cf 93       	push	r28

void listenKnobs()
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     810:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
     812:	8c 2f       	mov	r24, r28
     814:	53 dd       	rcall	.-1370   	; 0x2bc <selectKnob>
		updateKnob(loopCounter);
     816:	8c 2f       	mov	r24, r28
     818:	a6 dd       	rcall	.-1204   	; 0x366 <updateKnob>
		interperetKnob(loopCounter);
     81a:	8c 2f       	mov	r24, r28
     81c:	bb dd       	rcall	.-1162   	; 0x394 <interperetKnob>
     81e:	cf 5f       	subi	r28, 0xFF	; 255

}

void listenKnobs()
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
     820:	cc 32       	cpi	r28, 0x2C	; 44
     822:	b9 f7       	brne	.-18     	; 0x812 <listenKnobs+0x4>
     824:	cf 91       	pop	r28
		updateKnob(loopCounter);
		interperetKnob(loopCounter);
	}


}
     826:	08 95       	ret

00000828 <main>:
     828:	aa d0       	rcall	.+340    	; 0x97e <initScreen>
#include <avr/interrupt.h>

int main(void)
{
	initScreen();
	initButtons();
     82a:	7d dc       	rcall	.-1798   	; 0x126 <initButtons>
	initEncoders();
     82c:	e9 dc       	rcall	.-1582   	; 0x200 <initEncoders>
	initMenu();
     82e:	0a d0       	rcall	.+20     	; 0x844 <initMenu>
	initADC();
     830:	33 dd       	rcall	.-1434   	; 0x298 <initADC>
	serialInit0();
     832:	35 d3       	rcall	.+1642   	; 0xe9e <serialInit0>
	sei();
	initBank(); //this will be necessary on first startup, but maybe not in the actual program? maybe just something handy to have.
     834:	78 94       	sei
     836:	1d dd       	rcall	.-1478   	; 0x272 <initBank>
	//loadMemory(); //we need to load in the first struct in locarion 0 of our eeprom.
	//making an edit for GIT
	//more comments to see if we can cause the same problem
	while (1)
	{
		listenTrigButtons();
     838:	7d dc       	rcall	.-1798   	; 0x134 <listenTrigButtons>
     83a:	e1 dc       	rcall	.-1598   	; 0x1fe <listenGPButtons>
		listenGPButtons();
     83c:	13 dd       	rcall	.-1498   	; 0x264 <listenEncoders>
     83e:	e7 df       	rcall	.-50     	; 0x80e <listenKnobs>
		listenEncoders();
     840:	16 d0       	rcall	.+44     	; 0x86e <updateScreen>
     842:	fa cf       	rjmp	.-12     	; 0x838 <main+0x10>

00000844 <initMenu>:
		listenKnobs();
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
		//listenMidi();
		//updateSequence();
		updateScreen();
     848:	83 eb       	ldi	r24, 0xB3	; 179
     84a:	93 e0       	ldi	r25, 0x03	; 3
     84c:	f5 d0       	rcall	.+490    	; 0xa38 <outputS>

void initMenu()
{
	
outputS(s0line0, 0);
outputS(s0line1, 1);
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	8e e9       	ldi	r24, 0x9E	; 158
     854:	93 e0       	ldi	r25, 0x03	; 3
     856:	f0 d0       	rcall	.+480    	; 0xa38 <outputS>
outputS(s0line2, 2);
     858:	62 e0       	ldi	r22, 0x02	; 2
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	89 e8       	ldi	r24, 0x89	; 137
     85e:	93 e0       	ldi	r25, 0x03	; 3
     860:	eb d0       	rcall	.+470    	; 0xa38 <outputS>
outputS(s0line3, 3);
     862:	63 e0       	ldi	r22, 0x03	; 3
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	84 e7       	ldi	r24, 0x74	; 116
     868:	93 e0       	ldi	r25, 0x03	; 3
     86a:	e6 c0       	rjmp	.+460    	; 0xa38 <outputS>
     86c:	08 95       	ret

0000086e <updateScreen>:

}

void updateScreen()
{
	if(prevEncoderAValue!=encoderAValue){
     86e:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <encoderAValue>
     872:	90 91 1e 05 	lds	r25, 0x051E	; 0x80051e <prevEncoderAValue>
     876:	98 17       	cp	r25, r24
     878:	09 f4       	brne	.+2      	; 0x87c <updateScreen+0xe>
     87a:	63 c0       	rjmp	.+198    	; 0x942 <updateScreen+0xd4>
	encoderAValue = encoderAValue%4;
     87c:	83 70       	andi	r24, 0x03	; 3
     87e:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <encoderAValue>
	switch (encoderAValue)
     882:	81 30       	cpi	r24, 0x01	; 1
     884:	e1 f0       	breq	.+56     	; 0x8be <updateScreen+0x50>
     886:	30 f0       	brcs	.+12     	; 0x894 <updateScreen+0x26>
     888:	82 30       	cpi	r24, 0x02	; 2
     88a:	71 f1       	breq	.+92     	; 0x8e8 <updateScreen+0x7a>
     88c:	83 30       	cpi	r24, 0x03	; 3
     88e:	09 f4       	brne	.+2      	; 0x892 <updateScreen+0x24>
     890:	40 c0       	rjmp	.+128    	; 0x912 <updateScreen+0xa4>
     892:	53 c0       	rjmp	.+166    	; 0x93a <updateScreen+0xcc>
	{
		case 0:
		outputS(s0line0, 0);
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	83 eb       	ldi	r24, 0xB3	; 179
     89a:	93 e0       	ldi	r25, 0x03	; 3
     89c:	cd d0       	rcall	.+410    	; 0xa38 <outputS>
		outputS(s0line1, 1);
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	8e e9       	ldi	r24, 0x9E	; 158
     8a4:	93 e0       	ldi	r25, 0x03	; 3
     8a6:	c8 d0       	rcall	.+400    	; 0xa38 <outputS>
		outputS(s0line2, 2);
     8a8:	62 e0       	ldi	r22, 0x02	; 2
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	89 e8       	ldi	r24, 0x89	; 137
     8ae:	93 e0       	ldi	r25, 0x03	; 3
     8b0:	c3 d0       	rcall	.+390    	; 0xa38 <outputS>
		outputS(s0line3, 3);
     8b2:	63 e0       	ldi	r22, 0x03	; 3
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	84 e7       	ldi	r24, 0x74	; 116
     8b8:	93 e0       	ldi	r25, 0x03	; 3
     8ba:	be d0       	rcall	.+380    	; 0xa38 <outputS>
		break;
     8bc:	3e c0       	rjmp	.+124    	; 0x93a <updateScreen+0xcc>
		
		case 1:
 		outputS(s1line0, 0);
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	8f e5       	ldi	r24, 0x5F	; 95
     8c4:	93 e0       	ldi	r25, 0x03	; 3
     8c6:	b8 d0       	rcall	.+368    	; 0xa38 <outputS>
 		outputS(s1line1, 1);
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	8a e4       	ldi	r24, 0x4A	; 74
     8ce:	93 e0       	ldi	r25, 0x03	; 3
     8d0:	b3 d0       	rcall	.+358    	; 0xa38 <outputS>
 		outputS(s1line2, 2);
     8d2:	62 e0       	ldi	r22, 0x02	; 2
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	85 e3       	ldi	r24, 0x35	; 53
     8d8:	93 e0       	ldi	r25, 0x03	; 3
     8da:	ae d0       	rcall	.+348    	; 0xa38 <outputS>
 		outputS(s1line3, 3);
     8dc:	63 e0       	ldi	r22, 0x03	; 3
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	80 e2       	ldi	r24, 0x20	; 32
     8e2:	93 e0       	ldi	r25, 0x03	; 3
     8e4:	a9 d0       	rcall	.+338    	; 0xa38 <outputS>
 		break;
     8e6:	29 c0       	rjmp	.+82     	; 0x93a <updateScreen+0xcc>
		 
		case 2:
		outputS(s2line0, 0);
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	8b e0       	ldi	r24, 0x0B	; 11
     8ee:	93 e0       	ldi	r25, 0x03	; 3
     8f0:	a3 d0       	rcall	.+326    	; 0xa38 <outputS>
		outputS(s2line1, 1);
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	86 ef       	ldi	r24, 0xF6	; 246
     8f8:	92 e0       	ldi	r25, 0x02	; 2
     8fa:	9e d0       	rcall	.+316    	; 0xa38 <outputS>
		outputS(s2line2, 2);
     8fc:	62 e0       	ldi	r22, 0x02	; 2
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	81 ee       	ldi	r24, 0xE1	; 225
     902:	92 e0       	ldi	r25, 0x02	; 2
     904:	99 d0       	rcall	.+306    	; 0xa38 <outputS>
		outputS(s2line3, 3);
     906:	63 e0       	ldi	r22, 0x03	; 3
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	8c ec       	ldi	r24, 0xCC	; 204
     90c:	92 e0       	ldi	r25, 0x02	; 2
     90e:	94 d0       	rcall	.+296    	; 0xa38 <outputS>
		break;
     910:	14 c0       	rjmp	.+40     	; 0x93a <updateScreen+0xcc>
		 
		case 3:
		outputS(s3line0, 0);
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	87 eb       	ldi	r24, 0xB7	; 183
     918:	92 e0       	ldi	r25, 0x02	; 2
     91a:	8e d0       	rcall	.+284    	; 0xa38 <outputS>
		outputS(s3line1, 1);
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	82 ea       	ldi	r24, 0xA2	; 162
     922:	92 e0       	ldi	r25, 0x02	; 2
     924:	89 d0       	rcall	.+274    	; 0xa38 <outputS>
		outputS(s3line2, 2);
     926:	62 e0       	ldi	r22, 0x02	; 2
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	8d e8       	ldi	r24, 0x8D	; 141
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	84 d0       	rcall	.+264    	; 0xa38 <outputS>
     930:	63 e0       	ldi	r22, 0x03	; 3
		outputS(s3line3, 3);
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	88 e7       	ldi	r24, 0x78	; 120
     936:	92 e0       	ldi	r25, 0x02	; 2
     938:	7f d0       	rcall	.+254    	; 0xa38 <outputS>
     93a:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <encoderAValue>
		break;
		 
		 
	}
	prevEncoderAValue = encoderAValue;
     93e:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <prevEncoderAValue>
     942:	08 95       	ret

00000944 <enableCycle>:
     944:	e5 e0       	ldi	r30, 0x05	; 5
     946:	f1 e0       	ldi	r31, 0x01	; 1
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
     948:	80 81       	ld	r24, Z
     94a:	82 60       	ori	r24, 0x02	; 2
     94c:	80 83       	st	Z, r24
     94e:	85 e0       	ldi	r24, 0x05	; 5
     950:	8a 95       	dec	r24
     952:	f1 f7       	brne	.-4      	; 0x950 <enableCycle+0xc>
     954:	00 00       	nop
     956:	80 81       	ld	r24, Z
     958:	8d 7f       	andi	r24, 0xFD	; 253
     95a:	80 83       	st	Z, r24
     95c:	08 95       	ret

0000095e <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTJ &= 0B11111110; //set our DC pin low, to get ready to write data.
     95e:	e5 e0       	ldi	r30, 0x05	; 5
     960:	f1 e0       	ldi	r31, 0x01	; 1
     962:	90 81       	ld	r25, Z
     964:	9e 7f       	andi	r25, 0xFE	; 254
     966:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
     968:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTJ &= 0B11111110; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
     96a:	ec cf       	rjmp	.-40     	; 0x944 <enableCycle>
     96c:	08 95       	ret

0000096e <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTJ |=0B00000001; //set out DC Pin high, so it's ready to write data.
     96e:	e5 e0       	ldi	r30, 0x05	; 5
     970:	f1 e0       	ldi	r31, 0x01	; 1
     972:	90 81       	ld	r25, Z
     974:	91 60       	ori	r25, 0x01	; 1
     976:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.
	
	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
     978:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTJ |=0B00000001; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
     97a:	e4 cf       	rjmp	.-56     	; 0x944 <enableCycle>
     97c:	08 95       	ret

0000097e <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRJ = 0x03; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
     97e:	83 e0       	ldi	r24, 0x03	; 3
     980:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	DDRC =0xFF; //all pins on the LCD Data Bus.
     984:	8f ef       	ldi	r24, 0xFF	; 255
     986:	87 b9       	out	0x07, r24	; 7

	
	PORTJ &= 0B11111100;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
     988:	e5 e0       	ldi	r30, 0x05	; 5
     98a:	f1 e0       	ldi	r31, 0x01	; 1
     98c:	80 81       	ld	r24, Z
     98e:	8c 7f       	andi	r24, 0xFC	; 252
     990:	80 83       	st	Z, r24
	
	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
     992:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     994:	8f e1       	ldi	r24, 0x1F	; 31
     996:	93 e0       	ldi	r25, 0x03	; 3
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <initScreen+0x1a>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <initScreen+0x20>
     99e:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose
	

	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
     9a0:	8a e2       	ldi	r24, 0x2A	; 42
     9a2:	dd df       	rcall	.-70     	; 0x95e <command>
	command(0x71);        // Function selection A:
     9a4:	81 e7       	ldi	r24, 0x71	; 113
     9a6:	db df       	rcall	.-74     	; 0x95e <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
     9a8:	8c e5       	ldi	r24, 0x5C	; 92
     9aa:	e1 df       	rcall	.-62     	; 0x96e <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
     9ac:	88 e2       	ldi	r24, 0x28	; 40
     9ae:	d7 df       	rcall	.-82     	; 0x95e <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	d5 df       	rcall	.-86     	; 0x95e <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
     9b4:	8a e2       	ldi	r24, 0x2A	; 42
     9b6:	d3 df       	rcall	.-90     	; 0x95e <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
     9b8:	89 e7       	ldi	r24, 0x79	; 121
     9ba:	d1 df       	rcall	.-94     	; 0x95e <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
     9bc:	85 ed       	ldi	r24, 0xD5	; 213
     9be:	cf df       	rcall	.-98     	; 0x95e <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
     9c0:	80 e7       	ldi	r24, 0x70	; 112
     9c2:	cd df       	rcall	.-102    	; 0x95e <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
     9c4:	88 e7       	ldi	r24, 0x78	; 120
     9c6:	cb df       	rcall	.-106    	; 0x95e <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
     9c8:	89 e0       	ldi	r24, 0x09	; 9
     9ca:	c9 df       	rcall	.-110    	; 0x95e <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
     9cc:	86 e0       	ldi	r24, 0x06	; 6
     9ce:	c7 df       	rcall	.-114    	; 0x95e <command>
	command(0x72);        // Function selection B:
     9d0:	82 e7       	ldi	r24, 0x72	; 114
     9d2:	c5 df       	rcall	.-118    	; 0x95e <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
     9d4:	8a e0       	ldi	r24, 0x0A	; 10
     9d6:	cb df       	rcall	.-106    	; 0x96e <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
     9d8:	89 e7       	ldi	r24, 0x79	; 121
     9da:	c1 df       	rcall	.-126    	; 0x95e <command>
	command(0xDA);        // Set SEG pins hardware configuration:
     9dc:	8a ed       	ldi	r24, 0xDA	; 218
     9de:	bf df       	rcall	.-130    	; 0x95e <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	bd df       	rcall	.-134    	; 0x95e <command>
	command(0xDC);        // Function selection C:
     9e4:	8c ed       	ldi	r24, 0xDC	; 220
     9e6:	bb df       	rcall	.-138    	; 0x95e <command>
	command(0x00);        //  internal VSL, GPIO input disable
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	b9 df       	rcall	.-142    	; 0x95e <command>
	command(0x81);        // Set contrast control:
     9ec:	81 e8       	ldi	r24, 0x81	; 129
     9ee:	b7 df       	rcall	.-146    	; 0x95e <command>
     9f0:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
     9f2:	b5 df       	rcall	.-150    	; 0x95e <command>
     9f4:	89 ed       	ldi	r24, 0xD9	; 217
     9f6:	b3 df       	rcall	.-154    	; 0x95e <command>
	command(0xD9);        // Set phase length:
     9f8:	81 ef       	ldi	r24, 0xF1	; 241
     9fa:	b1 df       	rcall	.-158    	; 0x95e <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
     9fc:	8b ed       	ldi	r24, 0xDB	; 219
     9fe:	af df       	rcall	.-162    	; 0x95e <command>
     a00:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
     a02:	ad df       	rcall	.-166    	; 0x95e <command>
     a04:	88 e7       	ldi	r24, 0x78	; 120
     a06:	ab df       	rcall	.-170    	; 0x95e <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
     a08:	88 e2       	ldi	r24, 0x28	; 40
     a0a:	a9 df       	rcall	.-174    	; 0x95e <command>
     a0c:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
     a0e:	a7 df       	rcall	.-178    	; 0x95e <command>
     a10:	8f e3       	ldi	r24, 0x3F	; 63
     a12:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	f1 f7       	brne	.-4      	; 0xa14 <initScreen+0x96>
     a18:	00 c0       	rjmp	.+0      	; 0xa1a <initScreen+0x9c>
	command(0x01);        // Clear display
     a1a:	00 00       	nop
     a1c:	80 e8       	ldi	r24, 0x80	; 128
     a1e:	9f df       	rcall	.-194    	; 0x95e <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a20:	8c e0       	ldi	r24, 0x0C	; 12
     a22:	9d df       	rcall	.-198    	; 0x95e <command>
     a24:	9f ef       	ldi	r25, 0xFF	; 255
     a26:	24 e3       	ldi	r18, 0x34	; 52
     a28:	8c e0       	ldi	r24, 0x0C	; 12
     a2a:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required
	
	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
     a2c:	20 40       	sbci	r18, 0x00	; 0
     a2e:	80 40       	sbci	r24, 0x00	; 0
     a30:	e1 f7       	brne	.-8      	; 0xa2a <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
     a32:	00 c0       	rjmp	.+0      	; 0xa34 <initScreen+0xb6>
     a34:	00 00       	nop
     a36:	08 95       	ret

00000a38 <outputS>:
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	8c 01       	movw	r16, r24
     a42:	fb 01       	movw	r30, r22
     a44:	ff 27       	eor	r31, r31
     a46:	e8 53       	subi	r30, 0x38	; 56
     a48:	fc 4f       	sbci	r31, 0xFC	; 252
     a4a:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;
	
	command(new_line[r]);
     a4c:	88 df       	rcall	.-240    	; 0x95e <command>
     a4e:	e8 01       	movw	r28, r16
     a50:	0c 5e       	subi	r16, 0xEC	; 236
     a52:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
     a54:	89 91       	ld	r24, Y+
     a56:	8b df       	rcall	.-234    	; 0x96e <data>
	uint8_t r = row;
	uint8_t c = 0;
	
	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
     a58:	c0 17       	cp	r28, r16
     a5a:	d1 07       	cpc	r29, r17
     a5c:	d9 f7       	brne	.-10     	; 0xa54 <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	08 95       	ret

00000a68 <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;
	
	switch(numCharacters)
     a6e:	43 30       	cpi	r20, 0x03	; 3
     a70:	09 f4       	brne	.+2      	; 0xa74 <numPrinter+0xc>
     a72:	51 c0       	rjmp	.+162    	; 0xb16 <numPrinter+0xae>
     a74:	28 f4       	brcc	.+10     	; 0xa80 <numPrinter+0x18>
     a76:	41 30       	cpi	r20, 0x01	; 1
     a78:	51 f0       	breq	.+20     	; 0xa8e <numPrinter+0x26>
     a7a:	42 30       	cpi	r20, 0x02	; 2
     a7c:	21 f1       	breq	.+72     	; 0xac6 <numPrinter+0x5e>
     a7e:	a2 c1       	rjmp	.+836    	; 0xdc4 <numPrinter+0x35c>
     a80:	44 30       	cpi	r20, 0x04	; 4
     a82:	09 f4       	brne	.+2      	; 0xa86 <numPrinter+0x1e>
     a84:	8e c0       	rjmp	.+284    	; 0xba2 <numPrinter+0x13a>
     a86:	45 30       	cpi	r20, 0x05	; 5
     a88:	09 f4       	brne	.+2      	; 0xa8c <numPrinter+0x24>
     a8a:	fd c0       	rjmp	.+506    	; 0xc86 <numPrinter+0x21e>
     a8c:	9b c1       	rjmp	.+822    	; 0xdc4 <numPrinter+0x35c>
		case 0:
		break;
		
		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
     a8e:	ec 01       	movw	r28, r24
     a90:	c6 0f       	add	r28, r22
     a92:	d1 1d       	adc	r29, r1
     a94:	ad ec       	ldi	r26, 0xCD	; 205
     a96:	bc ec       	ldi	r27, 0xCC	; 204
     a98:	3c d4       	rcall	.+2168   	; 0x1312 <__umulhisi3>
     a9a:	96 95       	lsr	r25
     a9c:	87 95       	ror	r24
     a9e:	96 95       	lsr	r25
     aa0:	87 95       	ror	r24
     aa2:	96 95       	lsr	r25
     aa4:	87 95       	ror	r24
     aa6:	9c 01       	movw	r18, r24
     aa8:	22 0f       	add	r18, r18
     aaa:	33 1f       	adc	r19, r19
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	88 0f       	add	r24, r24
     ab6:	99 1f       	adc	r25, r25
     ab8:	82 0f       	add	r24, r18
     aba:	93 1f       	adc	r25, r19
     abc:	e8 1b       	sub	r30, r24
     abe:	f9 0b       	sbc	r31, r25
     ac0:	e0 5d       	subi	r30, 0xD0	; 208
     ac2:	e8 83       	st	Y, r30
		break;
     ac4:	7f c1       	rjmp	.+766    	; 0xdc4 <numPrinter+0x35c>
		
		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
     ac6:	ec 01       	movw	r28, r24
     ac8:	c6 0f       	add	r28, r22
     aca:	d1 1d       	adc	r29, r1
     acc:	ad ec       	ldi	r26, 0xCD	; 205
     ace:	bc ec       	ldi	r27, 0xCC	; 204
     ad0:	20 d4       	rcall	.+2112   	; 0x1312 <__umulhisi3>
     ad2:	96 95       	lsr	r25
     ad4:	87 95       	ror	r24
     ad6:	96 95       	lsr	r25
     ad8:	87 95       	ror	r24
     ada:	96 95       	lsr	r25
     adc:	87 95       	ror	r24
     ade:	9c 01       	movw	r18, r24
     ae0:	22 0f       	add	r18, r18
     ae2:	33 1f       	adc	r19, r19
     ae4:	88 0f       	add	r24, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	82 0f       	add	r24, r18
     af2:	93 1f       	adc	r25, r19
     af4:	9f 01       	movw	r18, r30
     af6:	28 1b       	sub	r18, r24
     af8:	39 0b       	sbc	r19, r25
     afa:	c9 01       	movw	r24, r18
     afc:	80 5d       	subi	r24, 0xD0	; 208
     afe:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
     b00:	9f 01       	movw	r18, r30
     b02:	07 d4       	rcall	.+2062   	; 0x1312 <__umulhisi3>
     b04:	96 95       	lsr	r25
     b06:	87 95       	ror	r24
     b08:	96 95       	lsr	r25
     b0a:	87 95       	ror	r24
     b0c:	96 95       	lsr	r25
     b0e:	87 95       	ror	r24
     b10:	80 5d       	subi	r24, 0xD0	; 208
     b12:	88 83       	st	Y, r24
     b14:	57 c1       	rjmp	.+686    	; 0xdc4 <numPrinter+0x35c>
		break;
     b16:	ec 01       	movw	r28, r24
		
		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
     b18:	c6 0f       	add	r28, r22
     b1a:	d1 1d       	adc	r29, r1
     b1c:	ad ec       	ldi	r26, 0xCD	; 205
     b1e:	bc ec       	ldi	r27, 0xCC	; 204
     b20:	f8 d3       	rcall	.+2032   	; 0x1312 <__umulhisi3>
     b22:	96 95       	lsr	r25
     b24:	87 95       	ror	r24
     b26:	96 95       	lsr	r25
     b28:	87 95       	ror	r24
     b2a:	96 95       	lsr	r25
     b2c:	87 95       	ror	r24
     b2e:	9c 01       	movw	r18, r24
     b30:	22 0f       	add	r18, r18
     b32:	33 1f       	adc	r19, r19
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	82 0f       	add	r24, r18
     b42:	93 1f       	adc	r25, r19
     b44:	9f 01       	movw	r18, r30
     b46:	28 1b       	sub	r18, r24
     b48:	39 0b       	sbc	r19, r25
     b4a:	c9 01       	movw	r24, r18
     b4c:	80 5d       	subi	r24, 0xD0	; 208
     b4e:	8a 83       	std	Y+2, r24	; 0x02
     b50:	af 01       	movw	r20, r30
		charArray[(startingPos+1)] = tensPlace;
     b52:	56 95       	lsr	r21
     b54:	47 95       	ror	r20
     b56:	56 95       	lsr	r21
     b58:	47 95       	ror	r20
     b5a:	9a 01       	movw	r18, r20
     b5c:	ab e7       	ldi	r26, 0x7B	; 123
     b5e:	b4 e1       	ldi	r27, 0x14	; 20
     b60:	d8 d3       	rcall	.+1968   	; 0x1312 <__umulhisi3>
     b62:	96 95       	lsr	r25
     b64:	87 95       	ror	r24
     b66:	64 e6       	ldi	r22, 0x64	; 100
     b68:	68 9f       	mul	r22, r24
     b6a:	90 01       	movw	r18, r0
     b6c:	69 9f       	mul	r22, r25
     b6e:	30 0d       	add	r19, r0
     b70:	11 24       	eor	r1, r1
     b72:	cf 01       	movw	r24, r30
     b74:	82 1b       	sub	r24, r18
     b76:	93 0b       	sbc	r25, r19
     b78:	9c 01       	movw	r18, r24
     b7a:	ad ec       	ldi	r26, 0xCD	; 205
     b7c:	bc ec       	ldi	r27, 0xCC	; 204
     b7e:	c9 d3       	rcall	.+1938   	; 0x1312 <__umulhisi3>
     b80:	96 95       	lsr	r25
     b82:	87 95       	ror	r24
     b84:	96 95       	lsr	r25
     b86:	87 95       	ror	r24
     b88:	96 95       	lsr	r25
     b8a:	87 95       	ror	r24
     b8c:	80 5d       	subi	r24, 0xD0	; 208
     b8e:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
     b90:	9a 01       	movw	r18, r20
     b92:	ab e7       	ldi	r26, 0x7B	; 123
     b94:	b4 e1       	ldi	r27, 0x14	; 20
     b96:	bd d3       	rcall	.+1914   	; 0x1312 <__umulhisi3>
     b98:	96 95       	lsr	r25
     b9a:	87 95       	ror	r24
     b9c:	80 5d       	subi	r24, 0xD0	; 208
     b9e:	88 83       	st	Y, r24
		break;
     ba0:	11 c1       	rjmp	.+546    	; 0xdc4 <numPrinter+0x35c>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
     ba2:	ec 01       	movw	r28, r24
     ba4:	c6 0f       	add	r28, r22
     ba6:	d1 1d       	adc	r29, r1
     ba8:	ad ec       	ldi	r26, 0xCD	; 205
     baa:	bc ec       	ldi	r27, 0xCC	; 204
     bac:	b2 d3       	rcall	.+1892   	; 0x1312 <__umulhisi3>
     bae:	96 95       	lsr	r25
     bb0:	87 95       	ror	r24
     bb2:	96 95       	lsr	r25
     bb4:	87 95       	ror	r24
     bb6:	96 95       	lsr	r25
     bb8:	87 95       	ror	r24
     bba:	9c 01       	movw	r18, r24
     bbc:	22 0f       	add	r18, r18
     bbe:	33 1f       	adc	r19, r19
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	82 0f       	add	r24, r18
     bce:	93 1f       	adc	r25, r19
     bd0:	9f 01       	movw	r18, r30
     bd2:	28 1b       	sub	r18, r24
     bd4:	39 0b       	sbc	r19, r25
     bd6:	c9 01       	movw	r24, r18
     bd8:	80 5d       	subi	r24, 0xD0	; 208
     bda:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
     bdc:	9f 01       	movw	r18, r30
     bde:	36 95       	lsr	r19
     be0:	27 95       	ror	r18
     be2:	36 95       	lsr	r19
     be4:	27 95       	ror	r18
     be6:	ab e7       	ldi	r26, 0x7B	; 123
     be8:	b4 e1       	ldi	r27, 0x14	; 20
     bea:	93 d3       	rcall	.+1830   	; 0x1312 <__umulhisi3>
     bec:	96 95       	lsr	r25
     bee:	87 95       	ror	r24
     bf0:	44 e6       	ldi	r20, 0x64	; 100
     bf2:	48 9f       	mul	r20, r24
     bf4:	90 01       	movw	r18, r0
     bf6:	49 9f       	mul	r20, r25
     bf8:	30 0d       	add	r19, r0
     bfa:	11 24       	eor	r1, r1
     bfc:	cf 01       	movw	r24, r30
     bfe:	82 1b       	sub	r24, r18
     c00:	93 0b       	sbc	r25, r19
     c02:	9c 01       	movw	r18, r24
     c04:	ad ec       	ldi	r26, 0xCD	; 205
     c06:	bc ec       	ldi	r27, 0xCC	; 204
     c08:	84 d3       	rcall	.+1800   	; 0x1312 <__umulhisi3>
     c0a:	96 95       	lsr	r25
     c0c:	87 95       	ror	r24
     c0e:	96 95       	lsr	r25
     c10:	87 95       	ror	r24
     c12:	96 95       	lsr	r25
     c14:	87 95       	ror	r24
     c16:	80 5d       	subi	r24, 0xD0	; 208
     c18:	8a 83       	std	Y+2, r24	; 0x02
     c1a:	af 01       	movw	r20, r30
		charArray[(startingPos+1)] = hunderedsPlace;
     c1c:	56 95       	lsr	r21
     c1e:	47 95       	ror	r20
     c20:	56 95       	lsr	r21
     c22:	47 95       	ror	r20
     c24:	56 95       	lsr	r21
     c26:	47 95       	ror	r20
     c28:	9a 01       	movw	r18, r20
     c2a:	a5 ec       	ldi	r26, 0xC5	; 197
     c2c:	b0 e2       	ldi	r27, 0x20	; 32
     c2e:	71 d3       	rcall	.+1762   	; 0x1312 <__umulhisi3>
     c30:	92 95       	swap	r25
     c32:	82 95       	swap	r24
     c34:	8f 70       	andi	r24, 0x0F	; 15
     c36:	89 27       	eor	r24, r25
     c38:	9f 70       	andi	r25, 0x0F	; 15
     c3a:	89 27       	eor	r24, r25
     c3c:	68 ee       	ldi	r22, 0xE8	; 232
     c3e:	73 e0       	ldi	r23, 0x03	; 3
     c40:	86 9f       	mul	r24, r22
     c42:	90 01       	movw	r18, r0
     c44:	87 9f       	mul	r24, r23
     c46:	30 0d       	add	r19, r0
     c48:	96 9f       	mul	r25, r22
     c4a:	30 0d       	add	r19, r0
     c4c:	11 24       	eor	r1, r1
     c4e:	cf 01       	movw	r24, r30
     c50:	82 1b       	sub	r24, r18
     c52:	93 0b       	sbc	r25, r19
     c54:	9c 01       	movw	r18, r24
     c56:	36 95       	lsr	r19
     c58:	27 95       	ror	r18
     c5a:	36 95       	lsr	r19
     c5c:	27 95       	ror	r18
     c5e:	ab e7       	ldi	r26, 0x7B	; 123
     c60:	b4 e1       	ldi	r27, 0x14	; 20
     c62:	57 d3       	rcall	.+1710   	; 0x1312 <__umulhisi3>
     c64:	96 95       	lsr	r25
     c66:	87 95       	ror	r24
     c68:	80 5d       	subi	r24, 0xD0	; 208
     c6a:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
     c6c:	9a 01       	movw	r18, r20
     c6e:	a5 ec       	ldi	r26, 0xC5	; 197
     c70:	b0 e2       	ldi	r27, 0x20	; 32
     c72:	4f d3       	rcall	.+1694   	; 0x1312 <__umulhisi3>
     c74:	92 95       	swap	r25
     c76:	82 95       	swap	r24
     c78:	8f 70       	andi	r24, 0x0F	; 15
     c7a:	89 27       	eor	r24, r25
     c7c:	9f 70       	andi	r25, 0x0F	; 15
     c7e:	89 27       	eor	r24, r25
     c80:	80 5d       	subi	r24, 0xD0	; 208
     c82:	88 83       	st	Y, r24
		break;
     c84:	9f c0       	rjmp	.+318    	; 0xdc4 <numPrinter+0x35c>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
     c86:	ec 01       	movw	r28, r24
     c88:	c6 0f       	add	r28, r22
     c8a:	d1 1d       	adc	r29, r1
     c8c:	ad ec       	ldi	r26, 0xCD	; 205
     c8e:	bc ec       	ldi	r27, 0xCC	; 204
     c90:	40 d3       	rcall	.+1664   	; 0x1312 <__umulhisi3>
     c92:	96 95       	lsr	r25
     c94:	87 95       	ror	r24
     c96:	96 95       	lsr	r25
     c98:	87 95       	ror	r24
     c9a:	96 95       	lsr	r25
     c9c:	87 95       	ror	r24
     c9e:	9c 01       	movw	r18, r24
     ca0:	22 0f       	add	r18, r18
     ca2:	33 1f       	adc	r19, r19
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	82 0f       	add	r24, r18
     cb2:	93 1f       	adc	r25, r19
     cb4:	9f 01       	movw	r18, r30
     cb6:	28 1b       	sub	r18, r24
     cb8:	39 0b       	sbc	r19, r25
     cba:	c9 01       	movw	r24, r18
     cbc:	80 5d       	subi	r24, 0xD0	; 208
     cbe:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
     cc0:	9f 01       	movw	r18, r30
     cc2:	36 95       	lsr	r19
     cc4:	27 95       	ror	r18
     cc6:	36 95       	lsr	r19
     cc8:	27 95       	ror	r18
     cca:	ab e7       	ldi	r26, 0x7B	; 123
     ccc:	b4 e1       	ldi	r27, 0x14	; 20
     cce:	21 d3       	rcall	.+1602   	; 0x1312 <__umulhisi3>
     cd0:	96 95       	lsr	r25
     cd2:	87 95       	ror	r24
     cd4:	44 e6       	ldi	r20, 0x64	; 100
     cd6:	48 9f       	mul	r20, r24
     cd8:	90 01       	movw	r18, r0
     cda:	49 9f       	mul	r20, r25
     cdc:	30 0d       	add	r19, r0
     cde:	11 24       	eor	r1, r1
     ce0:	cf 01       	movw	r24, r30
     ce2:	82 1b       	sub	r24, r18
     ce4:	93 0b       	sbc	r25, r19
     ce6:	9c 01       	movw	r18, r24
     ce8:	ad ec       	ldi	r26, 0xCD	; 205
     cea:	bc ec       	ldi	r27, 0xCC	; 204
     cec:	12 d3       	rcall	.+1572   	; 0x1312 <__umulhisi3>
     cee:	96 95       	lsr	r25
     cf0:	87 95       	ror	r24
     cf2:	96 95       	lsr	r25
     cf4:	87 95       	ror	r24
     cf6:	96 95       	lsr	r25
     cf8:	87 95       	ror	r24
     cfa:	80 5d       	subi	r24, 0xD0	; 208
     cfc:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
     cfe:	9f 01       	movw	r18, r30
     d00:	36 95       	lsr	r19
     d02:	27 95       	ror	r18
     d04:	36 95       	lsr	r19
     d06:	27 95       	ror	r18
     d08:	36 95       	lsr	r19
     d0a:	27 95       	ror	r18
     d0c:	a5 ec       	ldi	r26, 0xC5	; 197
     d0e:	b0 e2       	ldi	r27, 0x20	; 32
     d10:	00 d3       	rcall	.+1536   	; 0x1312 <__umulhisi3>
     d12:	92 95       	swap	r25
     d14:	82 95       	swap	r24
     d16:	8f 70       	andi	r24, 0x0F	; 15
     d18:	89 27       	eor	r24, r25
     d1a:	9f 70       	andi	r25, 0x0F	; 15
     d1c:	89 27       	eor	r24, r25
     d1e:	48 ee       	ldi	r20, 0xE8	; 232
     d20:	53 e0       	ldi	r21, 0x03	; 3
     d22:	84 9f       	mul	r24, r20
     d24:	90 01       	movw	r18, r0
     d26:	85 9f       	mul	r24, r21
     d28:	30 0d       	add	r19, r0
     d2a:	94 9f       	mul	r25, r20
     d2c:	30 0d       	add	r19, r0
     d2e:	11 24       	eor	r1, r1
     d30:	cf 01       	movw	r24, r30
     d32:	82 1b       	sub	r24, r18
     d34:	93 0b       	sbc	r25, r19
     d36:	9c 01       	movw	r18, r24
     d38:	36 95       	lsr	r19
     d3a:	27 95       	ror	r18
     d3c:	36 95       	lsr	r19
     d3e:	27 95       	ror	r18
     d40:	ab e7       	ldi	r26, 0x7B	; 123
     d42:	b4 e1       	ldi	r27, 0x14	; 20
     d44:	e6 d2       	rcall	.+1484   	; 0x1312 <__umulhisi3>
     d46:	96 95       	lsr	r25
     d48:	87 95       	ror	r24
     d4a:	80 5d       	subi	r24, 0xD0	; 208
     d4c:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
     d4e:	af 01       	movw	r20, r30
     d50:	52 95       	swap	r21
     d52:	42 95       	swap	r20
     d54:	4f 70       	andi	r20, 0x0F	; 15
     d56:	45 27       	eor	r20, r21
     d58:	5f 70       	andi	r21, 0x0F	; 15
     d5a:	45 27       	eor	r20, r21
     d5c:	9a 01       	movw	r18, r20
     d5e:	a7 e4       	ldi	r26, 0x47	; 71
     d60:	b3 e0       	ldi	r27, 0x03	; 3
     d62:	d7 d2       	rcall	.+1454   	; 0x1312 <__umulhisi3>
     d64:	96 95       	lsr	r25
     d66:	87 95       	ror	r24
     d68:	96 95       	lsr	r25
     d6a:	87 95       	ror	r24
     d6c:	96 95       	lsr	r25
     d6e:	87 95       	ror	r24
     d70:	60 e1       	ldi	r22, 0x10	; 16
     d72:	77 e2       	ldi	r23, 0x27	; 39
     d74:	86 9f       	mul	r24, r22
     d76:	90 01       	movw	r18, r0
     d78:	87 9f       	mul	r24, r23
     d7a:	30 0d       	add	r19, r0
     d7c:	96 9f       	mul	r25, r22
     d7e:	30 0d       	add	r19, r0
     d80:	11 24       	eor	r1, r1
     d82:	cf 01       	movw	r24, r30
     d84:	82 1b       	sub	r24, r18
     d86:	93 0b       	sbc	r25, r19
     d88:	9c 01       	movw	r18, r24
     d8a:	36 95       	lsr	r19
     d8c:	27 95       	ror	r18
     d8e:	36 95       	lsr	r19
     d90:	27 95       	ror	r18
     d92:	36 95       	lsr	r19
     d94:	27 95       	ror	r18
     d96:	a5 ec       	ldi	r26, 0xC5	; 197
     d98:	b0 e2       	ldi	r27, 0x20	; 32
     d9a:	bb d2       	rcall	.+1398   	; 0x1312 <__umulhisi3>
     d9c:	92 95       	swap	r25
     d9e:	82 95       	swap	r24
     da0:	8f 70       	andi	r24, 0x0F	; 15
     da2:	89 27       	eor	r24, r25
     da4:	9f 70       	andi	r25, 0x0F	; 15
     da6:	89 27       	eor	r24, r25
     da8:	80 5d       	subi	r24, 0xD0	; 208
     daa:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
     dac:	9a 01       	movw	r18, r20
     dae:	a7 e4       	ldi	r26, 0x47	; 71
     db0:	b3 e0       	ldi	r27, 0x03	; 3
     db2:	af d2       	rcall	.+1374   	; 0x1312 <__umulhisi3>
     db4:	96 95       	lsr	r25
     db6:	87 95       	ror	r24
     db8:	96 95       	lsr	r25
     dba:	87 95       	ror	r24
     dbc:	96 95       	lsr	r25
     dbe:	87 95       	ror	r24
     dc0:	80 5d       	subi	r24, 0xD0	; 208
     dc2:	88 83       	st	Y, r24
     dc4:	df 91       	pop	r29
		break;
		
	}


     dc6:	cf 91       	pop	r28
     dc8:	08 95       	ret

00000dca <__vector_27>:

int serialReadPos = 0;////this is a necessary global for the serial Library
int serialWritePos = 0;//this is a necessary global for the serial Library

ISR (USART0_TX_vect)
{
     dca:	1f 92       	push	r1
     dcc:	0f 92       	push	r0
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	0f 92       	push	r0
     dd2:	11 24       	eor	r1, r1
     dd4:	0b b6       	in	r0, 0x3b	; 59
     dd6:	0f 92       	push	r0
     dd8:	2f 93       	push	r18
     dda:	3f 93       	push	r19
     ddc:	8f 93       	push	r24
     dde:	9f 93       	push	r25
     de0:	ef 93       	push	r30
     de2:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
     de4:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <serialReadPos>
     de8:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <serialReadPos+0x1>
     dec:	20 91 d0 03 	lds	r18, 0x03D0	; 0x8003d0 <serialWritePos>
     df0:	30 91 d1 03 	lds	r19, 0x03D1	; 0x8003d1 <serialWritePos+0x1>
     df4:	82 17       	cp	r24, r18
     df6:	93 07       	cpc	r25, r19
     df8:	b9 f0       	breq	.+46     	; 0xe28 <__vector_27+0x5e>
	{
		UDR0 = serial0Buffer[serialReadPos];
     dfa:	fc 01       	movw	r30, r24
     dfc:	ec 52       	subi	r30, 0x2C	; 44
     dfe:	fa 4f       	sbci	r31, 0xFA	; 250
     e00:	80 81       	ld	r24, Z
     e02:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
     e06:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <serialReadPos>
     e0a:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <serialReadPos+0x1>
     e0e:	01 96       	adiw	r24, 0x01	; 1
		
		if(serialReadPos >= TX_BUFFER_SIZE)
     e10:	80 38       	cpi	r24, 0x80	; 128
     e12:	91 05       	cpc	r25, r1
     e14:	2c f4       	brge	.+10     	; 0xe20 <__vector_27+0x56>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
     e16:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <serialReadPos+0x1>
     e1a:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <serialReadPos>
     e1e:	04 c0       	rjmp	.+8      	; 0xe28 <__vector_27+0x5e>
		
		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
     e20:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <serialReadPos+0x1>
     e24:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <serialReadPos>
		}
	}
}
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	9f 91       	pop	r25
     e2e:	8f 91       	pop	r24
     e30:	3f 91       	pop	r19
     e32:	2f 91       	pop	r18
     e34:	0f 90       	pop	r0
     e36:	0b be       	out	0x3b, r0	; 59
     e38:	0f 90       	pop	r0
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	0f 90       	pop	r0
     e3e:	1f 90       	pop	r1
     e40:	18 95       	reti

00000e42 <appendSerial0>:

void appendSerial0(char c)
{
	serial0Buffer[serialWritePos] = c;
     e42:	20 91 d0 03 	lds	r18, 0x03D0	; 0x8003d0 <serialWritePos>
     e46:	30 91 d1 03 	lds	r19, 0x03D1	; 0x8003d1 <serialWritePos+0x1>
     e4a:	f9 01       	movw	r30, r18
     e4c:	ec 52       	subi	r30, 0x2C	; 44
     e4e:	fa 4f       	sbci	r31, 0xFA	; 250
     e50:	80 83       	st	Z, r24
	serialWritePos++;
     e52:	2f 5f       	subi	r18, 0xFF	; 255
     e54:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
     e56:	20 38       	cpi	r18, 0x80	; 128
     e58:	31 05       	cpc	r19, r1
     e5a:	2c f4       	brge	.+10     	; 0xe66 <appendSerial0+0x24>
}

void appendSerial0(char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
     e5c:	30 93 d1 03 	sts	0x03D1, r19	; 0x8003d1 <serialWritePos+0x1>
     e60:	20 93 d0 03 	sts	0x03D0, r18	; 0x8003d0 <serialWritePos>
     e64:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
     e66:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <serialWritePos+0x1>
     e6a:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <serialWritePos>
     e6e:	08 95       	ret

00000e70 <serialWrite0>:
	}
}

void serialWrite0(char c[])
{
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	ec 01       	movw	r28, r24
     e7a:	8c 01       	movw	r16, r24
     e7c:	06 5f       	subi	r16, 0xF6	; 246
     e7e:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = 0; i<10; i++) //this may need to be 11
	{
		appendSerial0(c[i]);
     e80:	89 91       	ld	r24, Y+
     e82:	df df       	rcall	.-66     	; 0xe42 <appendSerial0>
	}
}

void serialWrite0(char c[])
{
	for (uint8_t i = 0; i<10; i++) //this may need to be 11
     e84:	c0 17       	cp	r28, r16
     e86:	d1 07       	cpc	r29, r17
     e88:	d9 f7       	brne	.-10     	; 0xe80 <serialWrite0+0x10>
	{
		appendSerial0(c[i]);
		
	}
	
	if(UCSR0A & (1 << UDRE0))
     e8a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     e8e:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
     e90:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	08 95       	ret

00000e9e <serialInit0>:

void serialInit0()
{
UBRR0H = (BRC >> 8);
     e9e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRC;
     ea2:	80 e1       	ldi	r24, 0x10	; 16
     ea4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
     ea8:	88 e4       	ldi	r24, 0x48	; 72
     eaa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     eae:	86 e0       	ldi	r24, 0x06	; 6
     eb0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     eb4:	08 95       	ret

00000eb6 <trackControl>:
void resumeAll()
{
	char resumePlay[5] = {0xf0, 0xaa, 0x05, 0x0b, 0x55};
	serialWrite0(resumePlay);
	
}
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	2a 97       	sbiw	r28, 0x0a	; 10
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	90 ef       	ldi	r25, 0xF0	; 240
     ecc:	99 83       	std	Y+1, r25	; 0x01
     ece:	9a ea       	ldi	r25, 0xAA	; 170
     ed0:	9a 83       	std	Y+2, r25	; 0x02
     ed2:	9a e0       	ldi	r25, 0x0A	; 10
     ed4:	9b 83       	std	Y+3, r25	; 0x03
     ed6:	93 e0       	ldi	r25, 0x03	; 3
     ed8:	9c 83       	std	Y+4, r25	; 0x04
     eda:	2d 83       	std	Y+5, r18	; 0x05
     edc:	8e 83       	std	Y+6, r24	; 0x06
     ede:	6f 83       	std	Y+7, r22	; 0x07
     ee0:	48 87       	std	Y+8, r20	; 0x08
     ee2:	19 86       	std	Y+9, r1	; 0x09
     ee4:	85 e5       	ldi	r24, 0x55	; 85
     ee6:	8a 87       	std	Y+10, r24	; 0x0a
     ee8:	ce 01       	movw	r24, r28
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	c1 df       	rcall	.-126    	; 0xe70 <serialWrite0>
     eee:	2a 96       	adiw	r28, 0x0a	; 10
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	08 95       	ret

00000f00 <setOutputVolume>:
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	28 97       	sbiw	r28, 0x08	; 8
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	90 ef       	ldi	r25, 0xF0	; 240
     f16:	99 83       	std	Y+1, r25	; 0x01
     f18:	9a ea       	ldi	r25, 0xAA	; 170
     f1a:	9a 83       	std	Y+2, r25	; 0x02
     f1c:	98 e0       	ldi	r25, 0x08	; 8
     f1e:	9b 83       	std	Y+3, r25	; 0x03
     f20:	95 e0       	ldi	r25, 0x05	; 5
     f22:	9c 83       	std	Y+4, r25	; 0x04
     f24:	4d 83       	std	Y+5, r20	; 0x05
     f26:	8e 83       	std	Y+6, r24	; 0x06
     f28:	6f 83       	std	Y+7, r22	; 0x07
     f2a:	85 e5       	ldi	r24, 0x55	; 85
     f2c:	88 87       	std	Y+8, r24	; 0x08
     f2e:	ce 01       	movw	r24, r28
     f30:	01 96       	adiw	r24, 0x01	; 1
     f32:	9e df       	rcall	.-196    	; 0xe70 <serialWrite0>
     f34:	28 96       	adiw	r28, 0x08	; 8
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	08 95       	ret

00000f46 <setTrackVolume>:
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	29 97       	sbiw	r28, 0x09	; 9
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	90 ef       	ldi	r25, 0xF0	; 240
     f5c:	99 83       	std	Y+1, r25	; 0x01
     f5e:	9a ea       	ldi	r25, 0xAA	; 170
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	99 e0       	ldi	r25, 0x09	; 9
     f64:	9b 83       	std	Y+3, r25	; 0x03
     f66:	98 e0       	ldi	r25, 0x08	; 8
     f68:	9c 83       	std	Y+4, r25	; 0x04
     f6a:	8d 83       	std	Y+5, r24	; 0x05
     f6c:	6e 83       	std	Y+6, r22	; 0x06
     f6e:	4f 83       	std	Y+7, r20	; 0x07
     f70:	28 87       	std	Y+8, r18	; 0x08
     f72:	85 e5       	ldi	r24, 0x55	; 85
     f74:	89 87       	std	Y+9, r24	; 0x09
     f76:	ce 01       	movw	r24, r28
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	7a df       	rcall	.-268    	; 0xe70 <serialWrite0>
     f7c:	29 96       	adiw	r28, 0x09	; 9
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	08 95       	ret

00000f8e <outputSampleRate>:

void outputSampleRate(uint8_t outputSelect, uint8_t offsetLSB, uint8_t offsetMSB)
{
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	28 97       	sbiw	r28, 0x08	; 8
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
	char pitchChange[8] = {0xf0, 0xaa, 0x08, 0x0c, outputSelect, offsetLSB, offsetMSB, 0x55};
     fa2:	90 ef       	ldi	r25, 0xF0	; 240
     fa4:	99 83       	std	Y+1, r25	; 0x01
     fa6:	9a ea       	ldi	r25, 0xAA	; 170
     fa8:	9a 83       	std	Y+2, r25	; 0x02
     faa:	98 e0       	ldi	r25, 0x08	; 8
     fac:	9b 83       	std	Y+3, r25	; 0x03
     fae:	9c e0       	ldi	r25, 0x0C	; 12
     fb0:	9c 83       	std	Y+4, r25	; 0x04
     fb2:	8d 83       	std	Y+5, r24	; 0x05
     fb4:	6e 83       	std	Y+6, r22	; 0x06
     fb6:	4f 83       	std	Y+7, r20	; 0x07
     fb8:	85 e5       	ldi	r24, 0x55	; 85
     fba:	88 87       	std	Y+8, r24	; 0x08
	serialWrite0(pitchChange);
     fbc:	ce 01       	movw	r24, r28
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	57 df       	rcall	.-338    	; 0xe70 <serialWrite0>
}
     fc2:	28 96       	adiw	r28, 0x08	; 8
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <__subsf3>:
     fd4:	50 58       	subi	r21, 0x80	; 128

00000fd6 <__addsf3>:
     fd6:	bb 27       	eor	r27, r27
     fd8:	aa 27       	eor	r26, r26
     fda:	0e d0       	rcall	.+28     	; 0xff8 <__addsf3x>
     fdc:	4d c1       	rjmp	.+666    	; 0x1278 <__fp_round>
     fde:	3e d1       	rcall	.+636    	; 0x125c <__fp_pscA>
     fe0:	30 f0       	brcs	.+12     	; 0xfee <__addsf3+0x18>
     fe2:	43 d1       	rcall	.+646    	; 0x126a <__fp_pscB>
     fe4:	20 f0       	brcs	.+8      	; 0xfee <__addsf3+0x18>
     fe6:	31 f4       	brne	.+12     	; 0xff4 <__addsf3+0x1e>
     fe8:	9f 3f       	cpi	r25, 0xFF	; 255
     fea:	11 f4       	brne	.+4      	; 0xff0 <__addsf3+0x1a>
     fec:	1e f4       	brtc	.+6      	; 0xff4 <__addsf3+0x1e>
     fee:	33 c1       	rjmp	.+614    	; 0x1256 <__fp_nan>
     ff0:	0e f4       	brtc	.+2      	; 0xff4 <__addsf3+0x1e>
     ff2:	e0 95       	com	r30
     ff4:	e7 fb       	bst	r30, 7
     ff6:	29 c1       	rjmp	.+594    	; 0x124a <__fp_inf>

00000ff8 <__addsf3x>:
     ff8:	e9 2f       	mov	r30, r25
     ffa:	4f d1       	rcall	.+670    	; 0x129a <__fp_split3>
     ffc:	80 f3       	brcs	.-32     	; 0xfde <__addsf3+0x8>
     ffe:	ba 17       	cp	r27, r26
    1000:	62 07       	cpc	r22, r18
    1002:	73 07       	cpc	r23, r19
    1004:	84 07       	cpc	r24, r20
    1006:	95 07       	cpc	r25, r21
    1008:	18 f0       	brcs	.+6      	; 0x1010 <__addsf3x+0x18>
    100a:	71 f4       	brne	.+28     	; 0x1028 <__addsf3x+0x30>
    100c:	9e f5       	brtc	.+102    	; 0x1074 <__addsf3x+0x7c>
    100e:	67 c1       	rjmp	.+718    	; 0x12de <__fp_zero>
    1010:	0e f4       	brtc	.+2      	; 0x1014 <__addsf3x+0x1c>
    1012:	e0 95       	com	r30
    1014:	0b 2e       	mov	r0, r27
    1016:	ba 2f       	mov	r27, r26
    1018:	a0 2d       	mov	r26, r0
    101a:	0b 01       	movw	r0, r22
    101c:	b9 01       	movw	r22, r18
    101e:	90 01       	movw	r18, r0
    1020:	0c 01       	movw	r0, r24
    1022:	ca 01       	movw	r24, r20
    1024:	a0 01       	movw	r20, r0
    1026:	11 24       	eor	r1, r1
    1028:	ff 27       	eor	r31, r31
    102a:	59 1b       	sub	r21, r25
    102c:	99 f0       	breq	.+38     	; 0x1054 <__addsf3x+0x5c>
    102e:	59 3f       	cpi	r21, 0xF9	; 249
    1030:	50 f4       	brcc	.+20     	; 0x1046 <__addsf3x+0x4e>
    1032:	50 3e       	cpi	r21, 0xE0	; 224
    1034:	68 f1       	brcs	.+90     	; 0x1090 <__addsf3x+0x98>
    1036:	1a 16       	cp	r1, r26
    1038:	f0 40       	sbci	r31, 0x00	; 0
    103a:	a2 2f       	mov	r26, r18
    103c:	23 2f       	mov	r18, r19
    103e:	34 2f       	mov	r19, r20
    1040:	44 27       	eor	r20, r20
    1042:	58 5f       	subi	r21, 0xF8	; 248
    1044:	f3 cf       	rjmp	.-26     	; 0x102c <__addsf3x+0x34>
    1046:	46 95       	lsr	r20
    1048:	37 95       	ror	r19
    104a:	27 95       	ror	r18
    104c:	a7 95       	ror	r26
    104e:	f0 40       	sbci	r31, 0x00	; 0
    1050:	53 95       	inc	r21
    1052:	c9 f7       	brne	.-14     	; 0x1046 <__addsf3x+0x4e>
    1054:	7e f4       	brtc	.+30     	; 0x1074 <__addsf3x+0x7c>
    1056:	1f 16       	cp	r1, r31
    1058:	ba 0b       	sbc	r27, r26
    105a:	62 0b       	sbc	r22, r18
    105c:	73 0b       	sbc	r23, r19
    105e:	84 0b       	sbc	r24, r20
    1060:	ba f0       	brmi	.+46     	; 0x1090 <__addsf3x+0x98>
    1062:	91 50       	subi	r25, 0x01	; 1
    1064:	a1 f0       	breq	.+40     	; 0x108e <__addsf3x+0x96>
    1066:	ff 0f       	add	r31, r31
    1068:	bb 1f       	adc	r27, r27
    106a:	66 1f       	adc	r22, r22
    106c:	77 1f       	adc	r23, r23
    106e:	88 1f       	adc	r24, r24
    1070:	c2 f7       	brpl	.-16     	; 0x1062 <__addsf3x+0x6a>
    1072:	0e c0       	rjmp	.+28     	; 0x1090 <__addsf3x+0x98>
    1074:	ba 0f       	add	r27, r26
    1076:	62 1f       	adc	r22, r18
    1078:	73 1f       	adc	r23, r19
    107a:	84 1f       	adc	r24, r20
    107c:	48 f4       	brcc	.+18     	; 0x1090 <__addsf3x+0x98>
    107e:	87 95       	ror	r24
    1080:	77 95       	ror	r23
    1082:	67 95       	ror	r22
    1084:	b7 95       	ror	r27
    1086:	f7 95       	ror	r31
    1088:	9e 3f       	cpi	r25, 0xFE	; 254
    108a:	08 f0       	brcs	.+2      	; 0x108e <__addsf3x+0x96>
    108c:	b3 cf       	rjmp	.-154    	; 0xff4 <__addsf3+0x1e>
    108e:	93 95       	inc	r25
    1090:	88 0f       	add	r24, r24
    1092:	08 f0       	brcs	.+2      	; 0x1096 <__addsf3x+0x9e>
    1094:	99 27       	eor	r25, r25
    1096:	ee 0f       	add	r30, r30
    1098:	97 95       	ror	r25
    109a:	87 95       	ror	r24
    109c:	08 95       	ret

0000109e <__divsf3>:
    109e:	0c d0       	rcall	.+24     	; 0x10b8 <__divsf3x>
    10a0:	eb c0       	rjmp	.+470    	; 0x1278 <__fp_round>
    10a2:	e3 d0       	rcall	.+454    	; 0x126a <__fp_pscB>
    10a4:	40 f0       	brcs	.+16     	; 0x10b6 <__divsf3+0x18>
    10a6:	da d0       	rcall	.+436    	; 0x125c <__fp_pscA>
    10a8:	30 f0       	brcs	.+12     	; 0x10b6 <__divsf3+0x18>
    10aa:	21 f4       	brne	.+8      	; 0x10b4 <__divsf3+0x16>
    10ac:	5f 3f       	cpi	r21, 0xFF	; 255
    10ae:	19 f0       	breq	.+6      	; 0x10b6 <__divsf3+0x18>
    10b0:	cc c0       	rjmp	.+408    	; 0x124a <__fp_inf>
    10b2:	51 11       	cpse	r21, r1
    10b4:	15 c1       	rjmp	.+554    	; 0x12e0 <__fp_szero>
    10b6:	cf c0       	rjmp	.+414    	; 0x1256 <__fp_nan>

000010b8 <__divsf3x>:
    10b8:	f0 d0       	rcall	.+480    	; 0x129a <__fp_split3>
    10ba:	98 f3       	brcs	.-26     	; 0x10a2 <__divsf3+0x4>

000010bc <__divsf3_pse>:
    10bc:	99 23       	and	r25, r25
    10be:	c9 f3       	breq	.-14     	; 0x10b2 <__divsf3+0x14>
    10c0:	55 23       	and	r21, r21
    10c2:	b1 f3       	breq	.-20     	; 0x10b0 <__divsf3+0x12>
    10c4:	95 1b       	sub	r25, r21
    10c6:	55 0b       	sbc	r21, r21
    10c8:	bb 27       	eor	r27, r27
    10ca:	aa 27       	eor	r26, r26
    10cc:	62 17       	cp	r22, r18
    10ce:	73 07       	cpc	r23, r19
    10d0:	84 07       	cpc	r24, r20
    10d2:	38 f0       	brcs	.+14     	; 0x10e2 <__divsf3_pse+0x26>
    10d4:	9f 5f       	subi	r25, 0xFF	; 255
    10d6:	5f 4f       	sbci	r21, 0xFF	; 255
    10d8:	22 0f       	add	r18, r18
    10da:	33 1f       	adc	r19, r19
    10dc:	44 1f       	adc	r20, r20
    10de:	aa 1f       	adc	r26, r26
    10e0:	a9 f3       	breq	.-22     	; 0x10cc <__divsf3_pse+0x10>
    10e2:	33 d0       	rcall	.+102    	; 0x114a <__divsf3_pse+0x8e>
    10e4:	0e 2e       	mov	r0, r30
    10e6:	3a f0       	brmi	.+14     	; 0x10f6 <__divsf3_pse+0x3a>
    10e8:	e0 e8       	ldi	r30, 0x80	; 128
    10ea:	30 d0       	rcall	.+96     	; 0x114c <__divsf3_pse+0x90>
    10ec:	91 50       	subi	r25, 0x01	; 1
    10ee:	50 40       	sbci	r21, 0x00	; 0
    10f0:	e6 95       	lsr	r30
    10f2:	00 1c       	adc	r0, r0
    10f4:	ca f7       	brpl	.-14     	; 0x10e8 <__divsf3_pse+0x2c>
    10f6:	29 d0       	rcall	.+82     	; 0x114a <__divsf3_pse+0x8e>
    10f8:	fe 2f       	mov	r31, r30
    10fa:	27 d0       	rcall	.+78     	; 0x114a <__divsf3_pse+0x8e>
    10fc:	66 0f       	add	r22, r22
    10fe:	77 1f       	adc	r23, r23
    1100:	88 1f       	adc	r24, r24
    1102:	bb 1f       	adc	r27, r27
    1104:	26 17       	cp	r18, r22
    1106:	37 07       	cpc	r19, r23
    1108:	48 07       	cpc	r20, r24
    110a:	ab 07       	cpc	r26, r27
    110c:	b0 e8       	ldi	r27, 0x80	; 128
    110e:	09 f0       	breq	.+2      	; 0x1112 <__divsf3_pse+0x56>
    1110:	bb 0b       	sbc	r27, r27
    1112:	80 2d       	mov	r24, r0
    1114:	bf 01       	movw	r22, r30
    1116:	ff 27       	eor	r31, r31
    1118:	93 58       	subi	r25, 0x83	; 131
    111a:	5f 4f       	sbci	r21, 0xFF	; 255
    111c:	2a f0       	brmi	.+10     	; 0x1128 <__divsf3_pse+0x6c>
    111e:	9e 3f       	cpi	r25, 0xFE	; 254
    1120:	51 05       	cpc	r21, r1
    1122:	68 f0       	brcs	.+26     	; 0x113e <__divsf3_pse+0x82>
    1124:	92 c0       	rjmp	.+292    	; 0x124a <__fp_inf>
    1126:	dc c0       	rjmp	.+440    	; 0x12e0 <__fp_szero>
    1128:	5f 3f       	cpi	r21, 0xFF	; 255
    112a:	ec f3       	brlt	.-6      	; 0x1126 <__divsf3_pse+0x6a>
    112c:	98 3e       	cpi	r25, 0xE8	; 232
    112e:	dc f3       	brlt	.-10     	; 0x1126 <__divsf3_pse+0x6a>
    1130:	86 95       	lsr	r24
    1132:	77 95       	ror	r23
    1134:	67 95       	ror	r22
    1136:	b7 95       	ror	r27
    1138:	f7 95       	ror	r31
    113a:	9f 5f       	subi	r25, 0xFF	; 255
    113c:	c9 f7       	brne	.-14     	; 0x1130 <__divsf3_pse+0x74>
    113e:	88 0f       	add	r24, r24
    1140:	91 1d       	adc	r25, r1
    1142:	96 95       	lsr	r25
    1144:	87 95       	ror	r24
    1146:	97 f9       	bld	r25, 7
    1148:	08 95       	ret
    114a:	e1 e0       	ldi	r30, 0x01	; 1
    114c:	66 0f       	add	r22, r22
    114e:	77 1f       	adc	r23, r23
    1150:	88 1f       	adc	r24, r24
    1152:	bb 1f       	adc	r27, r27
    1154:	62 17       	cp	r22, r18
    1156:	73 07       	cpc	r23, r19
    1158:	84 07       	cpc	r24, r20
    115a:	ba 07       	cpc	r27, r26
    115c:	20 f0       	brcs	.+8      	; 0x1166 <__divsf3_pse+0xaa>
    115e:	62 1b       	sub	r22, r18
    1160:	73 0b       	sbc	r23, r19
    1162:	84 0b       	sbc	r24, r20
    1164:	ba 0b       	sbc	r27, r26
    1166:	ee 1f       	adc	r30, r30
    1168:	88 f7       	brcc	.-30     	; 0x114c <__divsf3_pse+0x90>
    116a:	e0 95       	com	r30
    116c:	08 95       	ret

0000116e <__fixsfsi>:
    116e:	04 d0       	rcall	.+8      	; 0x1178 <__fixunssfsi>
    1170:	68 94       	set
    1172:	b1 11       	cpse	r27, r1
    1174:	b5 c0       	rjmp	.+362    	; 0x12e0 <__fp_szero>
    1176:	08 95       	ret

00001178 <__fixunssfsi>:
    1178:	98 d0       	rcall	.+304    	; 0x12aa <__fp_splitA>
    117a:	88 f0       	brcs	.+34     	; 0x119e <__fixunssfsi+0x26>
    117c:	9f 57       	subi	r25, 0x7F	; 127
    117e:	90 f0       	brcs	.+36     	; 0x11a4 <__fixunssfsi+0x2c>
    1180:	b9 2f       	mov	r27, r25
    1182:	99 27       	eor	r25, r25
    1184:	b7 51       	subi	r27, 0x17	; 23
    1186:	a0 f0       	brcs	.+40     	; 0x11b0 <__fixunssfsi+0x38>
    1188:	d1 f0       	breq	.+52     	; 0x11be <__fixunssfsi+0x46>
    118a:	66 0f       	add	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	88 1f       	adc	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	1a f0       	brmi	.+6      	; 0x119a <__fixunssfsi+0x22>
    1194:	ba 95       	dec	r27
    1196:	c9 f7       	brne	.-14     	; 0x118a <__fixunssfsi+0x12>
    1198:	12 c0       	rjmp	.+36     	; 0x11be <__fixunssfsi+0x46>
    119a:	b1 30       	cpi	r27, 0x01	; 1
    119c:	81 f0       	breq	.+32     	; 0x11be <__fixunssfsi+0x46>
    119e:	9f d0       	rcall	.+318    	; 0x12de <__fp_zero>
    11a0:	b1 e0       	ldi	r27, 0x01	; 1
    11a2:	08 95       	ret
    11a4:	9c c0       	rjmp	.+312    	; 0x12de <__fp_zero>
    11a6:	67 2f       	mov	r22, r23
    11a8:	78 2f       	mov	r23, r24
    11aa:	88 27       	eor	r24, r24
    11ac:	b8 5f       	subi	r27, 0xF8	; 248
    11ae:	39 f0       	breq	.+14     	; 0x11be <__fixunssfsi+0x46>
    11b0:	b9 3f       	cpi	r27, 0xF9	; 249
    11b2:	cc f3       	brlt	.-14     	; 0x11a6 <__fixunssfsi+0x2e>
    11b4:	86 95       	lsr	r24
    11b6:	77 95       	ror	r23
    11b8:	67 95       	ror	r22
    11ba:	b3 95       	inc	r27
    11bc:	d9 f7       	brne	.-10     	; 0x11b4 <__fixunssfsi+0x3c>
    11be:	3e f4       	brtc	.+14     	; 0x11ce <__fixunssfsi+0x56>
    11c0:	90 95       	com	r25
    11c2:	80 95       	com	r24
    11c4:	70 95       	com	r23
    11c6:	61 95       	neg	r22
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	8f 4f       	sbci	r24, 0xFF	; 255
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	08 95       	ret

000011d0 <__floatunsisf>:
    11d0:	e8 94       	clt
    11d2:	09 c0       	rjmp	.+18     	; 0x11e6 <__floatsisf+0x12>

000011d4 <__floatsisf>:
    11d4:	97 fb       	bst	r25, 7
    11d6:	3e f4       	brtc	.+14     	; 0x11e6 <__floatsisf+0x12>
    11d8:	90 95       	com	r25
    11da:	80 95       	com	r24
    11dc:	70 95       	com	r23
    11de:	61 95       	neg	r22
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	8f 4f       	sbci	r24, 0xFF	; 255
    11e4:	9f 4f       	sbci	r25, 0xFF	; 255
    11e6:	99 23       	and	r25, r25
    11e8:	a9 f0       	breq	.+42     	; 0x1214 <__floatsisf+0x40>
    11ea:	f9 2f       	mov	r31, r25
    11ec:	96 e9       	ldi	r25, 0x96	; 150
    11ee:	bb 27       	eor	r27, r27
    11f0:	93 95       	inc	r25
    11f2:	f6 95       	lsr	r31
    11f4:	87 95       	ror	r24
    11f6:	77 95       	ror	r23
    11f8:	67 95       	ror	r22
    11fa:	b7 95       	ror	r27
    11fc:	f1 11       	cpse	r31, r1
    11fe:	f8 cf       	rjmp	.-16     	; 0x11f0 <__floatsisf+0x1c>
    1200:	fa f4       	brpl	.+62     	; 0x1240 <__floatsisf+0x6c>
    1202:	bb 0f       	add	r27, r27
    1204:	11 f4       	brne	.+4      	; 0x120a <__floatsisf+0x36>
    1206:	60 ff       	sbrs	r22, 0
    1208:	1b c0       	rjmp	.+54     	; 0x1240 <__floatsisf+0x6c>
    120a:	6f 5f       	subi	r22, 0xFF	; 255
    120c:	7f 4f       	sbci	r23, 0xFF	; 255
    120e:	8f 4f       	sbci	r24, 0xFF	; 255
    1210:	9f 4f       	sbci	r25, 0xFF	; 255
    1212:	16 c0       	rjmp	.+44     	; 0x1240 <__floatsisf+0x6c>
    1214:	88 23       	and	r24, r24
    1216:	11 f0       	breq	.+4      	; 0x121c <__floatsisf+0x48>
    1218:	96 e9       	ldi	r25, 0x96	; 150
    121a:	11 c0       	rjmp	.+34     	; 0x123e <__floatsisf+0x6a>
    121c:	77 23       	and	r23, r23
    121e:	21 f0       	breq	.+8      	; 0x1228 <__floatsisf+0x54>
    1220:	9e e8       	ldi	r25, 0x8E	; 142
    1222:	87 2f       	mov	r24, r23
    1224:	76 2f       	mov	r23, r22
    1226:	05 c0       	rjmp	.+10     	; 0x1232 <__floatsisf+0x5e>
    1228:	66 23       	and	r22, r22
    122a:	71 f0       	breq	.+28     	; 0x1248 <__floatsisf+0x74>
    122c:	96 e8       	ldi	r25, 0x86	; 134
    122e:	86 2f       	mov	r24, r22
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	2a f0       	brmi	.+10     	; 0x1240 <__floatsisf+0x6c>
    1236:	9a 95       	dec	r25
    1238:	66 0f       	add	r22, r22
    123a:	77 1f       	adc	r23, r23
    123c:	88 1f       	adc	r24, r24
    123e:	da f7       	brpl	.-10     	; 0x1236 <__floatsisf+0x62>
    1240:	88 0f       	add	r24, r24
    1242:	96 95       	lsr	r25
    1244:	87 95       	ror	r24
    1246:	97 f9       	bld	r25, 7
    1248:	08 95       	ret

0000124a <__fp_inf>:
    124a:	97 f9       	bld	r25, 7
    124c:	9f 67       	ori	r25, 0x7F	; 127
    124e:	80 e8       	ldi	r24, 0x80	; 128
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	08 95       	ret

00001256 <__fp_nan>:
    1256:	9f ef       	ldi	r25, 0xFF	; 255
    1258:	80 ec       	ldi	r24, 0xC0	; 192
    125a:	08 95       	ret

0000125c <__fp_pscA>:
    125c:	00 24       	eor	r0, r0
    125e:	0a 94       	dec	r0
    1260:	16 16       	cp	r1, r22
    1262:	17 06       	cpc	r1, r23
    1264:	18 06       	cpc	r1, r24
    1266:	09 06       	cpc	r0, r25
    1268:	08 95       	ret

0000126a <__fp_pscB>:
    126a:	00 24       	eor	r0, r0
    126c:	0a 94       	dec	r0
    126e:	12 16       	cp	r1, r18
    1270:	13 06       	cpc	r1, r19
    1272:	14 06       	cpc	r1, r20
    1274:	05 06       	cpc	r0, r21
    1276:	08 95       	ret

00001278 <__fp_round>:
    1278:	09 2e       	mov	r0, r25
    127a:	03 94       	inc	r0
    127c:	00 0c       	add	r0, r0
    127e:	11 f4       	brne	.+4      	; 0x1284 <__fp_round+0xc>
    1280:	88 23       	and	r24, r24
    1282:	52 f0       	brmi	.+20     	; 0x1298 <__fp_round+0x20>
    1284:	bb 0f       	add	r27, r27
    1286:	40 f4       	brcc	.+16     	; 0x1298 <__fp_round+0x20>
    1288:	bf 2b       	or	r27, r31
    128a:	11 f4       	brne	.+4      	; 0x1290 <__fp_round+0x18>
    128c:	60 ff       	sbrs	r22, 0
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <__fp_round+0x20>
    1290:	6f 5f       	subi	r22, 0xFF	; 255
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	8f 4f       	sbci	r24, 0xFF	; 255
    1296:	9f 4f       	sbci	r25, 0xFF	; 255
    1298:	08 95       	ret

0000129a <__fp_split3>:
    129a:	57 fd       	sbrc	r21, 7
    129c:	90 58       	subi	r25, 0x80	; 128
    129e:	44 0f       	add	r20, r20
    12a0:	55 1f       	adc	r21, r21
    12a2:	59 f0       	breq	.+22     	; 0x12ba <__fp_splitA+0x10>
    12a4:	5f 3f       	cpi	r21, 0xFF	; 255
    12a6:	71 f0       	breq	.+28     	; 0x12c4 <__fp_splitA+0x1a>
    12a8:	47 95       	ror	r20

000012aa <__fp_splitA>:
    12aa:	88 0f       	add	r24, r24
    12ac:	97 fb       	bst	r25, 7
    12ae:	99 1f       	adc	r25, r25
    12b0:	61 f0       	breq	.+24     	; 0x12ca <__fp_splitA+0x20>
    12b2:	9f 3f       	cpi	r25, 0xFF	; 255
    12b4:	79 f0       	breq	.+30     	; 0x12d4 <__fp_splitA+0x2a>
    12b6:	87 95       	ror	r24
    12b8:	08 95       	ret
    12ba:	12 16       	cp	r1, r18
    12bc:	13 06       	cpc	r1, r19
    12be:	14 06       	cpc	r1, r20
    12c0:	55 1f       	adc	r21, r21
    12c2:	f2 cf       	rjmp	.-28     	; 0x12a8 <__fp_split3+0xe>
    12c4:	46 95       	lsr	r20
    12c6:	f1 df       	rcall	.-30     	; 0x12aa <__fp_splitA>
    12c8:	08 c0       	rjmp	.+16     	; 0x12da <__fp_splitA+0x30>
    12ca:	16 16       	cp	r1, r22
    12cc:	17 06       	cpc	r1, r23
    12ce:	18 06       	cpc	r1, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	f1 cf       	rjmp	.-30     	; 0x12b6 <__fp_splitA+0xc>
    12d4:	86 95       	lsr	r24
    12d6:	71 05       	cpc	r23, r1
    12d8:	61 05       	cpc	r22, r1
    12da:	08 94       	sec
    12dc:	08 95       	ret

000012de <__fp_zero>:
    12de:	e8 94       	clt

000012e0 <__fp_szero>:
    12e0:	bb 27       	eor	r27, r27
    12e2:	66 27       	eor	r22, r22
    12e4:	77 27       	eor	r23, r23
    12e6:	cb 01       	movw	r24, r22
    12e8:	97 f9       	bld	r25, 7
    12ea:	08 95       	ret

000012ec <__divmodhi4>:
    12ec:	97 fb       	bst	r25, 7
    12ee:	07 2e       	mov	r0, r23
    12f0:	16 f4       	brtc	.+4      	; 0x12f6 <__divmodhi4+0xa>
    12f2:	00 94       	com	r0
    12f4:	06 d0       	rcall	.+12     	; 0x1302 <__divmodhi4_neg1>
    12f6:	77 fd       	sbrc	r23, 7
    12f8:	08 d0       	rcall	.+16     	; 0x130a <__divmodhi4_neg2>
    12fa:	1a d0       	rcall	.+52     	; 0x1330 <__udivmodhi4>
    12fc:	07 fc       	sbrc	r0, 7
    12fe:	05 d0       	rcall	.+10     	; 0x130a <__divmodhi4_neg2>
    1300:	3e f4       	brtc	.+14     	; 0x1310 <__divmodhi4_exit>

00001302 <__divmodhi4_neg1>:
    1302:	90 95       	com	r25
    1304:	81 95       	neg	r24
    1306:	9f 4f       	sbci	r25, 0xFF	; 255
    1308:	08 95       	ret

0000130a <__divmodhi4_neg2>:
    130a:	70 95       	com	r23
    130c:	61 95       	neg	r22
    130e:	7f 4f       	sbci	r23, 0xFF	; 255

00001310 <__divmodhi4_exit>:
    1310:	08 95       	ret

00001312 <__umulhisi3>:
    1312:	a2 9f       	mul	r26, r18
    1314:	b0 01       	movw	r22, r0
    1316:	b3 9f       	mul	r27, r19
    1318:	c0 01       	movw	r24, r0
    131a:	a3 9f       	mul	r26, r19
    131c:	70 0d       	add	r23, r0
    131e:	81 1d       	adc	r24, r1
    1320:	11 24       	eor	r1, r1
    1322:	91 1d       	adc	r25, r1
    1324:	b2 9f       	mul	r27, r18
    1326:	70 0d       	add	r23, r0
    1328:	81 1d       	adc	r24, r1
    132a:	11 24       	eor	r1, r1
    132c:	91 1d       	adc	r25, r1
    132e:	08 95       	ret

00001330 <__udivmodhi4>:
    1330:	aa 1b       	sub	r26, r26
    1332:	bb 1b       	sub	r27, r27
    1334:	51 e1       	ldi	r21, 0x11	; 17
    1336:	07 c0       	rjmp	.+14     	; 0x1346 <__udivmodhi4_ep>

00001338 <__udivmodhi4_loop>:
    1338:	aa 1f       	adc	r26, r26
    133a:	bb 1f       	adc	r27, r27
    133c:	a6 17       	cp	r26, r22
    133e:	b7 07       	cpc	r27, r23
    1340:	10 f0       	brcs	.+4      	; 0x1346 <__udivmodhi4_ep>
    1342:	a6 1b       	sub	r26, r22
    1344:	b7 0b       	sbc	r27, r23

00001346 <__udivmodhi4_ep>:
    1346:	88 1f       	adc	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	5a 95       	dec	r21
    134c:	a9 f7       	brne	.-22     	; 0x1338 <__udivmodhi4_loop>
    134e:	80 95       	com	r24
    1350:	90 95       	com	r25
    1352:	bc 01       	movw	r22, r24
    1354:	cd 01       	movw	r24, r26
    1356:	08 95       	ret

00001358 <_exit>:
    1358:	f8 94       	cli

0000135a <__stop_program>:
    135a:	ff cf       	rjmp	.-2      	; 0x135a <__stop_program>
